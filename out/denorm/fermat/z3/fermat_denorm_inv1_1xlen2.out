unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x147 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x341 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) (* (- 1) (* v!0 v!0)) (* (- 4) r!2) ?x147 (* 2 v!0))))
 (let (($x257 (>= ?x341 0)))
 (let (($x371 (= ?x341 0)))
 (let ((?x177 (* (- 2) v!0)))
 (let ((?x168 (* (- 1) ?x147)))
 (let ((?x273 (* 4 r!2)))
 (let ((?x131 (* v!0 v!0)))
 (let ((?x249 (* 2 u!1)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x163 (+ ?x100 ?x116 ?x41 ?x46 ?x192 ?x249 ?x131 ?x273 ?x168 ?x177)))
 (let ((?x458 (* (- 1) (* r!2 r!2 r!2))))
 (let ((?x161 (* (- 1) (* u!1 u!1 u!1))))
 (let ((?x308 (* u!1 u!1 v!0)))
 (let ((?x302 (* r!2 r!2 v!0)))
 (let ((?x326 (+ (* 2 (* u!1 r!2 v!0)) (* (- 3) (* u!1 u!1 r!2)) ?x302 ?x308 ?x161 ?x458 (* (- 3) (* u!1 r!2 r!2)))))
 (let ((?x148 (* ?x326 ?x163)))
 (let (($x319 (= ?x148 0)))
 (let (($x419 (not $x319)))
 (let ((?x580 (* 2 (* r!2 r!2))))
 (let ((?x453 (* 2 (* v!0 v!0 v!0))))
 (let ((?x155 (* 4 ?x302)))
 (let ((?x470 (* (- 5) (* r!2 v!0 v!0))))
 (let ((?x215 (* 2 ?x131)))
 (let ((?x405 (* (- 4) (* r!2 v!0))))
 (let ((?x483 (* (+ ?x405 ?x215 ?x470 ?x155 ?x458 ?x453 ?x580) ?x163)))
 (let (($x292 (= ?x483 0)))
 (let (($x354 (or (not $x292) $x419)))
 (let (($x355 (and $x371 $x354)))
 (let ((?x127 (+ ?x273 ?x249 ?x177 ?x100 ?x116 ?x41 ?x168 ?x131 ?x46 ?x192)))
 (let ((?x414 (+ ?x302 ?x458 (* 2 (* r!2 u!1 v!0)) ?x308 (* (- 3) (* r!2 r!2 u!1)) (* (- 3) (* r!2 u!1 u!1)) ?x161)))
 (let (($x298 (or (not (= (* (+ ?x215 ?x155 ?x580 ?x405 ?x470 ?x453 ?x458) ?x127) 0)) (not (= (* ?x414 ?x127) 0)))))
 (let (($x153 (and (= ?x127 0) $x298)))
 (let (($x558 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x448 (* (- 1) (* r r r))))
 (let ((?x325 (* r r v)))
 (let ((?x591 (+ ?x325 ?x448 (* 2 (* r u v)) (* u u v) (* (- 3) (* r r u)) (* (- 3) (* r u u)) (* (- 1) (* u u u)))))
 (let (($x526 (not (= (* ?x591 ?x198) 0))))
 (let ((?x465 (* 2 (* v v v))))
 (let ((?x464 (* (- 5) (* r v v))))
 (let ((?x335 (* 2 (* r r))))
 (let ((?x454 (* 4 ?x325)))
 (let ((?x466 (+ (* 2 ?x45) ?x454 ?x335 (* (- 4) (* r v)) ?x464 ?x465 ?x448)))
 (let (($x203 (= ?x198 0)))
 (and $x203 (or (not (= (* ?x466 ?x198) 0)) $x526))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x154 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x448 (* (- 1) (* r r r))))
 (let ((?x325 (* r r v)))
 (let ((?x591 (+ ?x325 ?x448 (* 2 (* r u v)) (* u u v) (* (- 3) (* r r u)) (* (- 3) (* r u u)) (* (- 1) (* u u u)))))
 (let (($x526 (not (= (* ?x591 ?x198) 0))))
 (let ((?x465 (* 2 (* v v v))))
 (let ((?x464 (* (- 5) (* r v v))))
 (let ((?x335 (* 2 (* r r))))
 (let ((?x454 (* 4 ?x325)))
 (let ((?x130 (+ (* 2 (* r (* (- 1) v))) ?x454 ?x335 ?x464 ?x465 (* 2 (* (* (- 1) v) r)) ?x448 (* 2 (* (* (- 1) v) (* (- 1) v))))))
 (let (($x203 (= ?x198 0)))
 (and $x203 (or (not (= (* ?x130 ?x198) 0)) $x526))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x162 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x448 (* (- 1) (* r r r))))
 (let ((?x325 (* r r v)))
 (let ((?x591 (+ ?x325 ?x448 (* 2 (* r u v)) (* u u v) (* (- 3) (* r r u)) (* (- 3) (* r u u)) (* (- 1) (* u u u)))))
 (let (($x526 (not (= (* ?x591 ?x198) 0))))
 (let ((?x465 (* 2 (* v v v))))
 (let ((?x464 (* (- 5) (* r v v))))
 (let ((?x335 (* 2 (* r r))))
 (let ((?x454 (* 4 ?x325)))
 (let ((?x466 (+ (* 2 ?x45) ?x454 ?x335 (* (- 4) (* r v)) ?x464 ?x465 ?x448)))
 (let (($x203 (= ?x198 0)))
 (let (($x413 (and $x203 (or (not (= (* ?x466 ?x198) 0)) $x526))))
 (let ((?x130 (+ (* 2 (* r (* (- 1) v))) ?x454 ?x335 ?x464 ?x465 (* 2 (* (* (- 1) v) r)) ?x448 (* 2 (* (* (- 1) v) (* (- 1) v))))))
 (let (($x195 (and $x203 (or (not (= (* ?x130 ?x198) 0)) $x526))))
 (rewrite (= $x195 $x413)))))))))))))))))))))))))))))
 ))
 (let (($x338 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x282 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x283 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x129 (* (- 1) v)))
 (let ((?x133 (+ r ?x129)))
 (let ((?x103 (* (+ (* (+ 2 v) ?x133 ?x133) (* (- 1) (* ?x133 ?x133 ?x133))) ?x283)))
 (let (($x531 (or (not (= ?x103 0)) (not (= (* (+ ?x84 (* (- 1) (* ?x71 ?x71 ?x71))) ?x282) 0)))))
 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x531))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x393 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x448 (* (- 1) (* r r r))))
 (let ((?x325 (* r r v)))
 (let ((?x591 (+ ?x325 ?x448 (* 2 (* r u v)) (* u u v) (* (- 3) (* r r u)) (* (- 3) (* r u u)) (* (- 1) (* u u u)))))
 (let (($x526 (not (= (* ?x591 ?x198) 0))))
 (let ((?x465 (* 2 (* v v v))))
 (let ((?x464 (* (- 5) (* r v v))))
 (let ((?x335 (* 2 (* r r))))
 (let ((?x454 (* 4 ?x325)))
 (let ((?x130 (+ (* 2 (* r (* (- 1) v))) ?x454 ?x335 ?x464 ?x465 (* 2 (* (* (- 1) v) r)) ?x448 (* 2 (* (* (- 1) v) (* (- 1) v))))))
 (let (($x203 (= ?x198 0)))
 (let (($x195 (and $x203 (or (not (= (* ?x130 ?x198) 0)) $x526))))
 (let ((?x282 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x283 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x129 (* (- 1) v)))
 (let ((?x133 (+ r ?x129)))
 (let ((?x103 (* (+ (* (+ 2 v) ?x133 ?x133) (* (- 1) (* ?x133 ?x133 ?x133))) ?x283)))
 (let (($x531 (or (not (= ?x103 0)) (not (= (* (+ ?x84 (* (- 1) (* ?x71 ?x71 ?x71))) ?x282) 0)))))
 (let (($x587 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x531)))
 (rewrite (= $x587 $x195))))))))))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((r Int) (u Int) (v Int) )(! (let ((?x71 (+ r u)))
 (let ((?x85 (* ?x71 ?x71 ?x71)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x82 (+ (- (+ (- ?x77 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x67 (- (* (- r v) (- r v) (+ v 2)) (* (- r v) (- r v) (- r v)))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x90 (or (not (= (* (- ?x63 ?x48) ?x67) 0)) (not (= (* (- ?x82 ?x48) (- ?x84 ?x85)) 0)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) $x90)))))))))))))))))) :qid k!28))
 ))
 (let ((?x109 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x282 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x283 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x129 (* (- 1) v)))
 (let ((?x133 (+ r ?x129)))
 (let ((?x103 (* (+ (* (+ 2 v) ?x133 ?x133) (* (- 1) (* ?x133 ?x133 ?x133))) ?x283)))
 (let (($x531 (or (not (= ?x103 0)) (not (= (* (+ ?x84 (* (- 1) (* ?x71 ?x71 ?x71))) ?x282) 0)))))
 (let (($x587 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x531)))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x82 (+ (- (+ (- ?x77 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x67 (- (* (- r v) (- r v) (+ v 2)) (* (- r v) (- r v) (- r v)))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x90 (or (not (= (* (- ?x63 ?x48) ?x67) 0)) (not (= (* (- ?x82 ?x48) (- ?x84 (* ?x71 ?x71 ?x71))) 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x91 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x90)))
 (rewrite (= $x91 $x587)))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x190 (mp (mp @x93 (quant-intro (proof-bind ?x109) (= $x92 $x338)) $x338) (rewrite (= $x338 $x338)) $x338)))
 (let ((@x112 (mp (mp @x190 (quant-intro (proof-bind ?x393) (= $x338 $x154)) $x154) (quant-intro (proof-bind ?x162) (= $x154 $x558)) $x558)))
 (let ((@x390 (mp (mp~ @x112 (sk (~ $x558 $x153)) $x153) (rewrite (= $x153 $x355)) $x355)))
 (let ((@x329 (and-elim @x390 $x371)))
 (let ((@x95 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x371) $x257)) @x329 $x257)))
 (let (($x258 (<= ?x341 0)))
 (let ((@x364 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x371) $x258)) @x329 $x258)))
 (let (($x268 (not (<= ?x148 0))))
 (let (($x137 (>= ?x148 0)))
 (let (($x479 (>= ?x483 0)))
 (let (($x481 (<= ?x483 0)))
 (let ((@x119 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x292 (not $x481) (not $x479))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x481)) @x364 @x95 false) $x481) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x479)) @x364 @x95 false) $x479) $x292)))
 (let ((@x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x319 $x268 (not $x137))) (unit-resolution (and-elim @x390 $x354) @x119 $x419) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x137)) @x364 @x95 false) $x137) $x268)))
 ((_ th-lemma arith farkas 1 1 1) @x306 @x364 @x95 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        36
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             192
 :arith-nonlinear-bounds    19
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.61
 :memory                    3.10
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1112296
 :num-checks                1
 :propagations              14
 :rlimit-count              3445
 :time                      0.01
 :total-time                0.02)
