unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x485 (to_real r!1)))
 (let ((?x84 (to_real b!2)))
 (let ((?x491 (* ?x84 ?x84 ?x485 ?x485 ?x485)))
 (let ((?x175 (to_real x!0)))
 (let ((?x305 (* ?x175 ?x175 ?x175 ?x485 ?x485 ?x485 ?x485)))
 (let ((?x493 (* 8.0 (* (to_real b00) (to_real x00) ?x175 ?x175 ?x175 ?x485 ?x485 ?x485))))
 (let ((?x335 (+ (* (/ 1.0 2.0) (* ?x84 (to_real b00) (to_real x00) ?x485)) (* (/ 1.0 4.0) (* (to_real r00) ?x84 ?x84 ?x485 ?x485)) (* (/ 1.0 4.0) (* ?x84 ?x84 (to_real b00) (to_real x00) ?x485 ?x485)) (* (- (/ 1.0 2.0)) (* ?x84 ?x485 ?x485)) (* (- (/ 1.0 4.0)) (* ?x84 ?x84 ?x84 ?x175 ?x485 ?x485)) (* (/ 1.0 2.0) (* (to_real r00) ?x84 ?x485)) (* 8.0 (* (to_real r00) ?x175 ?x175 ?x175 ?x485 ?x485 ?x485)) ?x493 (* (- 8.0) (* ?x84 ?x175 ?x175 ?x175 ?x175 ?x485 ?x485 ?x485)) (* (- 8.0) ?x305) (* (- (/ 1.0 2.0)) (* ?x84 ?x84 ?x175 ?x485)) (* (- (/ 1.0 4.0)) ?x491))))
 (let (($x394 (<= ?x335 0.0)))
 (let (($x236 (not $x394)))
 (let (($x344 (= ?x335 0.0)))
 (let (($x432 (not $x344)))
 (let ((?x258 (* ?x84 ?x175)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x62 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x62)))
 (let ((?x120 (+ (* (- (/ 1.0 2.0)) ?x84) ?x485)))
 (let ((?x376 (+ 1.0 (* 2.0 ?x175))))
 (let ((?x498 (* (- 1.0) (* ?x376 ?x376 ?x376 ?x120 ?x120 ?x120))))
 (let ((?x205 (* (- (/ 1.0 16.0)) (* ?x84 ?x84 ?x84 ?x84))))
 (let ((?x276 (* (/ 1.0 4.0) (* ?x84 ?x84 ?x84 ?x485))))
 (let ((?x280 (* (/ 1.0 4.0) (* ?x84 ?x84))))
 (let ((?x497 (* (- (/ 1.0 4.0)) (* ?x84 ?x84 ?x485 ?x485))))
 (let ((?x334 (* (- (/ 1.0 2.0)) (* ?x84 ?x485))))
 (let (($x247 (= (* (+ ?x334 ?x497 ?x280 ?x276 ?x205 ?x498) (+ ?x136 ?x150 ?x258 ?x485)) 0.0)))
 (let ((?x392 (+ ?x150 ?x258 ?x485 ?x136)))
 (let (($x282 (= 0.0 ?x392)))
 (let (($x430 (>= ?x392 0.0)))
 (let ((?x446 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x258)))
 (let (($x438 (>= ?x446 0.0)))
 (let (($x439 (= 0.0 ?x446)))
 (let ((@x483 (symm (commutativity (= $x439 (= ?x446 0.0))) (= (= ?x446 0.0) $x439))))
 (let ((@x107 (mp ((_ th-lemma arith) (= ?x446 0.0)) @x483 $x439)))
 (let ((?x87 (* b00 x00)))
 (let ((?x478 (+ r00 ?x87 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x391 (<= ?x478 0)))
 (let (($x410 (= 0 ?x478)))
 (let ((@x196 (symm (commutativity (= $x410 (= ?x478 0))) (= (= ?x478 0) $x410))))
 (let (($x444 (= ?x478 0)))
 (let (($x266 (not $x247)))
 (let (($x248 (or $x432 $x266)))
 (let (($x427 (and $x444 $x248)))
 (let (($x235 (= (* (+ ?x498 ?x497 ?x334 ?x205 ?x276 ?x280) (+ ?x485 ?x136 ?x150 ?x258)) 0.0)))
 (let ((?x262 (+ (* (/ 1.0 4.0) ?x491) (* (- (/ 1.0 4.0)) (* ?x84 ?x84 ?x485 ?x485 ?x62)) (* (- (/ 1.0 4.0)) (* ?x84 ?x84 ?x485 ?x485 ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x84 ?x84 ?x84 ?x175 ?x485 ?x485)) (* (/ 1.0 2.0) (* ?x84 ?x485 ?x485)) (* (- (/ 1.0 2.0)) (* ?x84 ?x485 ?x62)) (* (- (/ 1.0 2.0)) (* ?x84 ?x485 ?x145 ?x146)) (* (/ 1.0 2.0) (* ?x84 ?x84 ?x175 ?x485)) (* 8.0 ?x305) (* (- 8.0) (* ?x175 ?x175 ?x175 ?x485 ?x485 ?x485 ?x62)) (* (- 8.0) (* ?x175 ?x175 ?x175 ?x485 ?x485 ?x485 ?x145 ?x146)) (* 8.0 (* ?x84 ?x175 ?x175 ?x175 ?x175 ?x485 ?x485 ?x485)))))
 (let (($x159 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x87)) 0) (or (not (= ?x262 0.0)) (not $x235)))))
 (let (($x178 (exists ((b Int) (r Int) (x Int) )(! (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x62 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x62)))
 (let ((?x48 (to_real r)))
 (let ((?x490 (* (/ 1.0 4.0) (* (to_real b) (to_real b)))))
 (let ((?x453 (* (/ 1.0 4.0) (* (to_real b) (to_real b) (to_real b) ?x48))))
 (let ((?x450 (* (- (/ 1.0 16.0)) (* (to_real b) (to_real b) (to_real b) (to_real b)))))
 (let ((?x211 (* (- (/ 1.0 2.0)) (* (to_real b) ?x48))))
 (let ((?x187 (* (- (/ 1.0 4.0)) (* (to_real b) (to_real b) ?x48 ?x48))))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x177 (+ ?x171 ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* 2.0 ?x43)))
 (let ((?x399 (+ 1.0 ?x281)))
 (let ((?x487 (+ (* (- 1.0) (* ?x399 ?x399 ?x399 ?x177 ?x177 ?x177)) ?x187 ?x211 ?x450 ?x453 ?x490)))
 (let ((?x351 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x48 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x62)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x62)) (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x145 ?x146)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48 ?x48)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48 ?x62)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48 ?x145 ?x146)) (* 8.0 (* ?x40 ?x43 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x328 (not (= ?x351 0.0))))
 (let (($x501 (or $x328 (not (= (* ?x487 (+ ?x48 ?x136 ?x150 (* ?x40 ?x43))) 0.0)))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x123 $x501)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x416 (exists ((b Int) (r Int) (x Int) )(! (let ((?x62 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x188 (+ ?x150 ?x48 ?x171 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x157 (+ ?x48 ?x171)))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* 2.0 ?x43)))
 (let ((?x399 (+ 1.0 ?x281)))
 (let ((?x357 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x157 ?x157)) (* (- (/ 1.0 2.0)) (* ?x40 ?x157)) (* (- 1.0) (* ?x399 ?x399 ?x399 ?x157 ?x157 ?x157)))))
 (let ((?x167 (+ (* (- (/ 1.0 4.0)) (* ?x48 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x48 ?x40)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x445 (or (not (= (* ?x167 (+ ?x150 ?x48 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x357 ?x188) 0.0)))))
 (let (($x421 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x421 $x445))))))))))))))))))) :qid k!28))
 ))
 (let ((?x180 (lambda ((b Int) (r Int) (x Int) )(let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x62 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x62)))
 (let ((?x48 (to_real r)))
 (let ((?x490 (* (/ 1.0 4.0) (* (to_real b) (to_real b)))))
 (let ((?x453 (* (/ 1.0 4.0) (* (to_real b) (to_real b) (to_real b) ?x48))))
 (let ((?x450 (* (- (/ 1.0 16.0)) (* (to_real b) (to_real b) (to_real b) (to_real b)))))
 (let ((?x211 (* (- (/ 1.0 2.0)) (* (to_real b) ?x48))))
 (let ((?x187 (* (- (/ 1.0 4.0)) (* (to_real b) (to_real b) ?x48 ?x48))))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x177 (+ ?x171 ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* 2.0 ?x43)))
 (let ((?x399 (+ 1.0 ?x281)))
 (let ((?x487 (+ (* (- 1.0) (* ?x399 ?x399 ?x399 ?x177 ?x177 ?x177)) ?x187 ?x211 ?x450 ?x453 ?x490)))
 (let ((?x351 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x48 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x62)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x62)) (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x145 ?x146)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48 ?x48)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48 ?x62)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48 ?x145 ?x146)) (* 8.0 (* ?x40 ?x43 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x328 (not (= ?x351 0.0))))
 (let (($x501 (or $x328 (not (= (* ?x487 (+ ?x48 ?x136 ?x150 (* ?x40 ?x43))) 0.0)))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x105 (and $x123 $x501)))
 (let ((?x249 (* (- 1.0) (* ?x399 ?x399 ?x399 (+ ?x48 ?x171) (+ ?x48 ?x171) (+ ?x48 ?x171)))))
 (let ((?x357 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 (+ ?x48 ?x171) (+ ?x48 ?x171))) (* (- (/ 1.0 2.0)) (* ?x40 (+ ?x48 ?x171))) ?x249)))
 (let (($x441 (= (* ?x357 (+ ?x150 ?x48 ?x171 ?x136 (* (/ 1.0 2.0) (* ?x40 ?x399)))) 0.0)))
 (let ((?x167 (+ (* (- (/ 1.0 4.0)) (* ?x48 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x48 ?x40)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x445 (or (not (= (* ?x167 (+ ?x150 ?x48 ?x136 (* ?x43 ?x40))) 0.0)) (not $x441))))
 (let (($x421 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x496 (and $x421 $x445)))
 (rewrite (= $x496 $x105))))))))))))))))))))))))))))))))))
 ))
 (let (($x447 (exists ((b Int) (r Int) (x Int) )(! (let ((?x62 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x188 (+ ?x150 ?x48 ?x171 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x157 (+ ?x48 ?x171)))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* 2.0 ?x43)))
 (let ((?x399 (+ 1.0 ?x281)))
 (let ((?x357 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x157 ?x157)) (* (- (/ 1.0 2.0)) (* ?x40 ?x157)) (* (- 1.0) (* ?x399 ?x399 ?x399 ?x157 ?x157 ?x157)))))
 (let ((?x167 (+ (* (- (/ 1.0 4.0)) (* ?x48 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x48 ?x40)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x445 (or (not (= (* ?x167 (+ ?x150 ?x48 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x357 ?x188) 0.0)))))
 (let (($x137 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x137 $x445))))))))))))))))))) :qid k!28))
 ))
 (let ((?x428 (lambda ((b Int) (r Int) (x Int) )(let ((?x62 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x188 (+ ?x150 ?x48 ?x171 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x157 (+ ?x48 ?x171)))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* 2.0 ?x43)))
 (let ((?x399 (+ 1.0 ?x281)))
 (let ((?x357 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x157 ?x157)) (* (- (/ 1.0 2.0)) (* ?x40 ?x157)) (* (- 1.0) (* ?x399 ?x399 ?x399 ?x157 ?x157 ?x157)))))
 (let ((?x167 (+ (* (- (/ 1.0 4.0)) (* ?x48 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x48 ?x40)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x445 (or (not (= (* ?x167 (+ ?x150 ?x48 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x357 ?x188) 0.0)))))
 (let (($x421 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x496 (and $x421 $x445)))
 (let (($x137 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x469 (and $x137 $x445)))
 (rewrite (= $x469 $x496))))))))))))))))))))))))
 ))
 (let (($x79 (exists ((b Int) (r Int) (x Int) )(! (let ((?x56 (to_real 0)))
 (let ((?x66 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x48 (to_real r)))
 (let ((?x59 (- ?x48 ?x42)))
 (let ((?x73 (- (- (* (to_real (- 1)) ?x42 ?x42 ?x59 ?x59) (* ?x42 ?x59)) (* ?x59 ?x59 ?x59 ?x66 ?x66 ?x66))))
 (let ((?x68 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x59) (to_real r00)) (* ?x42 ?x66))))
 (let ((?x54 (- (- (* (to_real (- 1)) ?x42 ?x42 ?x48 ?x48) (* ?x42 ?x48)) (to_real (* r r r 2 x 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x54) ?x56)) (not (= (* ?x68 ?x73) ?x56)))))))))))))))) :qid k!28))
 ))
 (let ((?x415 (lambda ((b Int) (r Int) (x Int) )(let ((?x62 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x188 (+ ?x150 ?x48 ?x171 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x157 (+ ?x48 ?x171)))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* 2.0 ?x43)))
 (let ((?x399 (+ 1.0 ?x281)))
 (let ((?x357 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x157 ?x157)) (* (- (/ 1.0 2.0)) (* ?x40 ?x157)) (* (- 1.0) (* ?x399 ?x399 ?x399 ?x157 ?x157 ?x157)))))
 (let ((?x167 (+ (* (- (/ 1.0 4.0)) (* ?x48 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x48 ?x40)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x445 (or (not (= (* ?x167 (+ ?x150 ?x48 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x357 ?x188) 0.0)))))
 (let (($x137 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x469 (and $x137 $x445)))
 (let ((?x56 (to_real 0)))
 (let ((?x66 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x59 (- ?x48 ?x42)))
 (let ((?x73 (- (- (* (to_real (- 1)) ?x42 ?x42 ?x59 ?x59) (* ?x42 ?x59)) (* ?x59 ?x59 ?x59 ?x66 ?x66 ?x66))))
 (let ((?x68 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x59) ?x62) (* ?x42 ?x66))))
 (let ((?x54 (- (- (* (to_real (- 1)) ?x42 ?x42 ?x48 ?x48) (* ?x42 ?x48)) (to_real (* r r r 2 x 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x78 (and $x38 (or (not (= (* ?x46 ?x54) ?x56)) (not (= (* ?x68 ?x73) ?x56))))))
 (rewrite (= $x78 $x469)))))))))))))))))))))))))))))))))
 ))
 (let ((@x80 (asserted $x79)))
 (let ((@x341 (mp (mp @x80 (quant-intro (proof-bind ?x415) (= $x79 $x447)) $x447) (rewrite (= $x447 $x447)) $x447)))
 (let ((@x143 (mp (mp @x341 (quant-intro (proof-bind ?x428) (= $x447 $x416)) $x416) (quant-intro (proof-bind ?x180) (= $x416 $x178)) $x178)))
 (let ((@x286 (mp (mp~ @x143 (sk (~ $x178 $x159)) $x159) (rewrite (= $x159 $x427)) $x427)))
 (let ((@x457 (mp (and-elim @x286 $x444) @x196 $x410)))
 (let ((@x397 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x410) $x391)) @x457 $x391)))
 (let ((?x422 (+ ?x147 (* (- 1.0) (to_real ?x87)))))
 (let (($x353 (<= ?x422 0.0)))
 (let (($x436 (= 0.0 ?x422)))
 (let ((@x246 (symm (commutativity (= $x436 (= ?x422 0.0))) (= (= ?x422 0.0) $x436))))
 (let ((@x170 (mp ((_ th-lemma arith) (= ?x422 0.0)) @x246 $x436)))
 (let ((@x160 ((_ th-lemma arith) (hypothesis (not $x430)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x436) $x353)) @x170 $x353) @x397 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x439) $x438)) @x107 $x438) false)))
 (let (($x366 (<= ?x392 0.0)))
 (let (($x290 (<= ?x446 0.0)))
 (let (($x477 (>= ?x478 0)))
 (let ((@x456 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x410) $x477)) @x457 $x477)))
 (let (($x486 (>= ?x422 0.0)))
 (let ((@x261 ((_ th-lemma arith) (hypothesis (not $x366)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x436) $x486)) @x170 $x486) @x456 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x439) $x290)) @x107 $x290) false)))
 (let ((@x90 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x282 (not $x366) (not $x430))) (lemma @x261 $x366) (lemma @x160 $x430) $x282)))
 (let (($x256 (= ?x392 0.0)))
 (let (($x273 (not $x256)))
 (let ((@x213 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x273 $x247)) (hypothesis $x266) $x273) (symm (hypothesis $x282) $x256) false)))
 (let ((@x480 (unit-resolution (and-elim @x286 $x248) (unit-resolution (lemma @x213 (or (not $x282) $x247)) @x90 $x247) $x432)))
 (let (($x313 (>= ?x335 0.0)))
 (let ((@x557 (unit-resolution ((_ th-lemma arith) (or (not $x391) (not $x477) $x313)) @x397 @x456 (hypothesis (not $x313)) false)))
 (let ((@x117 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x344 $x236 (not $x313))) (lemma @x557 $x313) @x480 $x236)))
 (unit-resolution ((_ th-lemma arith) (or $x394 (not $x477) (not $x391))) @x397 @x456 @x117 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       28
 :arith-eq-adapter                24
 :arith-bound-propagations-cheap  20
 :arith-bound-propagations-lp     4
 :arith-conflicts                 40
 :arith-diseq                     18
 :arith-gcd-calls                 3
 :arith-grobner-calls             4
 :arith-grobner-conflicts         2
 :arith-horner-calls              4
 :arith-horner-cross-nested-forms 6
 :arith-lower                     41
 :arith-make-feasible             32
 :arith-max-columns               59
 :arith-max-rows                  18
 :arith-nla-explanations          65
 :arith-nla-lemmas                36
 :arith-patches                   3
 :arith-patches-success           3
 :arith-propagations              20
 :arith-upper                     32
 :conflicts                       9
 :decisions                       39
 :del-clause                      88
 :final-checks                    28
 :max-memory                      4.10
 :memory                          3.09
 :minimized-lits                  1
 :mk-bool-var                     117
 :mk-clause                       120
 :num-allocs                      1956368
 :num-checks                      1
 :propagations                    62
 :rlimit-count                    4181
 :time                            0.01
 :total-time                      0.02)
