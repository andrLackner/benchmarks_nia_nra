unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun s!0 () Int)
(declare-fun q!3 () Int)
(declare-fun r!1 () Int)
(declare-fun p!5 () Int)
(declare-fun a!4 () Int)
(proof
(let ((?x423 (* p00 b00 s!0)))
 (let ((?x398 (* q00 r00 b!2)))
 (let ((?x218 (* s00 a00 q!3)))
 (let ((?x404 (+ ?x218 (* (- 1) (* r00 b00 q!3)) (* (- 1) (* q00 a00 s!0)) ?x398 ?x423 (* (- 1) (* p00 s00 b!2)))))
 (let (($x181 (>= ?x404 0)))
 (let (($x204 (= ?x404 0)))
 (let ((?x585 (* p00 b00 r!1)))
 (let ((?x558 (* s00 a00 p!5)))
 (let ((?x525 (* r00 b00 p!5)))
 (let ((?x213 (* (- 1) ?x525)))
 (let ((?x385 (* q00 a00 r!1)))
 (let ((?x208 (* (- 1) ?x385)))
 (let ((?x332 (* q00 r00 a!4)))
 (let ((?x278 (* p00 s00 a!4)))
 (let ((?x475 (* (- 1) ?x278)))
 (let ((?x358 (* r!1 p!5 p!5 b!2 b!2 b!2)))
 (let ((?x405 (+ (* r!1 r!1 r!1 p!5 a!4 a!4 a!4 a!4 a!4) (* (- 2) (* r!1 r!1 r!1 p!5 a!4 a!4 a!4 a!4 b!2)) ?x358 (* r!1 r!1 r!1 p!5 a!4 a!4 a!4 b!2 b!2) (* (- 1) (* r!1 p!5 p!5 a!4 a!4 a!4)) (* 3 (* r!1 p!5 p!5 a!4 a!4 b!2)) (* (- 3) (* r!1 p!5 p!5 a!4 b!2 b!2)))))
 (let ((?x371 (* ?x405 (+ ?x475 ?x332 ?x208 ?x213 ?x558 ?x585))))
 (let (($x285 (= ?x371 0)))
 (let ((?x564 (* p00 s00 b!2)))
 (let ((?x308 (* q00 a00 s!0)))
 (let ((?x233 (* r00 b00 q!3)))
 (let ((?x461 (+ (* (- 1) ?x218) ?x233 ?x475 ?x308 ?x332 ?x208 (* (- 1) ?x398) (* (- 1) ?x423) ?x213 ?x558 ?x564 ?x585)))
 (let ((?x529 (+ p!5 (* (- 1) q!3))))
 (let ((?x394 (+ a!4 (* (- 1) b!2))))
 (let ((?x341 (* (- 1) s!0)))
 (let ((?x583 (+ ?x341 r!1)))
 (let ((?x222 (+ (* 2 (* s!0 p!5 q!3 b!2 b!2 b!2)) (* ?x583 ?x583 ?x583 ?x394 ?x394 ?x394 ?x529 b!2 b!2) (* (- 2) (* r!1 p!5 q!3 b!2 b!2 b!2)) ?x358 (* (- 1) (* s!0 q!3 q!3 b!2 b!2 b!2)) (* (- 1) (* s!0 p!5 p!5 b!2 b!2 b!2)) (* r!1 q!3 q!3 b!2 b!2 b!2))))
 (let ((?x389 (* ?x222 ?x461)))
 (let (($x260 (= ?x389 0)))
 (let (($x383 (not $x260)))
 (let (($x522 (or $x383 (not $x285))))
 (let ((?x420 (+ ?x278 (* (- 1) ?x332) ?x385 ?x525 (* (- 1) ?x558) (* (- 1) ?x585))))
 (let (($x568 (= ?x420 0)))
 (let ((?x451 (* p!5 b!2)))
 (let ((?x131 (* q00 a00)))
 (let (($x328 (= (+ ?x131 (* (- 1) (* p00 b00)) (* (- 1) (* a!4 q!3)) ?x451) 0)))
 (let ((?x127 (* s00 a00)))
 (let ((?x395 (+ ?x127 (* (- 1) (* r00 b00)) (* (- 1) (* s!0 a!4)) (* r!1 b!2))))
 (let ((?x37 (* p00 s00)))
 (let ((?x399 (+ ?x37 (* (- 1) (* q00 r00)) (* (- 1) (* s!0 p!5)) (* r!1 q!3))))
 (let (($x393 (and (= ?x399 0) (= ?x395 0) $x328 $x568 $x204 $x522)))
 (let ((?x142 (* r!1 q00 a00)))
 (let ((?x245 (* (- 1) ?x142)))
 (let ((?x446 (* p!5 s00 a00)))
 (let ((?x192 (* r!1 p00 b00)))
 (let ((?x236 (* p!5 r00 b00)))
 (let ((?x246 (* (- 1) ?x236)))
 (let ((?x593 (* a!4 q00 r00)))
 (let ((?x539 (* a!4 p00 s00)))
 (let ((?x248 (* (- 1) ?x539)))
 (let ((?x141 (* p!5 p!5 b!2 b!2 b!2 r!1)))
 (let ((?x367 (+ (* p!5 a!4 a!4 a!4 a!4 a!4 r!1 r!1 r!1) (* (- 2) (* p!5 a!4 a!4 a!4 a!4 b!2 r!1 r!1 r!1)) (* p!5 a!4 a!4 a!4 b!2 b!2 r!1 r!1 r!1) (* (- 1) (* p!5 p!5 a!4 a!4 a!4 r!1)) (* 3 (* p!5 p!5 a!4 a!4 b!2 r!1)) ?x141 (* (- 3) (* p!5 p!5 a!4 b!2 b!2 r!1)))))
 (let ((?x452 (* s!0 q00 a00)))
 (let ((?x512 (* q!3 r00 b00)))
 (let ((?x140 (* b!2 p00 s00)))
 (let ((?x238 (+ ?x248 ?x593 (* (- 1) (* b!2 q00 r00)) ?x140 ?x246 ?x192 ?x446 ?x245 (* (- 1) (* s!0 p00 b00)) ?x512 (* (- 1) (* q!3 s00 a00)) ?x452)))
 (let ((?x306 (+ r!1 ?x341)))
 (let ((?x139 (+ (* (- 1) (* q!3 q!3 b!2 b!2 b!2 s!0)) (* 2 (* p!5 q!3 b!2 b!2 b!2 s!0)) (* ?x306 ?x306 ?x306 ?x394 ?x394 ?x394 ?x529 b!2 b!2) (* (- 1) (* p!5 p!5 b!2 b!2 b!2 s!0)) (* q!3 q!3 b!2 b!2 b!2 r!1) (* (- 2) (* p!5 q!3 b!2 b!2 b!2 r!1)) ?x141)))
 (let (($x162 (or (not (= (* ?x139 ?x238) 0)) (not (= (* ?x367 (+ ?x248 ?x593 ?x246 ?x192 ?x446 ?x245)) 0)))))
 (let ((?x454 (* q!3 s00 a00)))
 (let ((?x159 (* s!0 p00 b00)))
 (let ((?x223 (* b!2 q00 r00)))
 (let (($x272 (= (+ ?x223 (* (- 1) ?x140) ?x159 (* (- 1) ?x512) ?x454 (* (- 1) ?x452)) 0)))
 (let (($x224 (= (+ ?x539 (* (- 1) ?x593) ?x236 (* (- 1) ?x192) (* (- 1) ?x446) ?x142) 0)))
 (let (($x524 (= (+ (* a!4 q!3) (* (- 1) ?x131) (* p00 b00) (* (- 1) ?x451)) 0)))
 (let ((?x145 (* r00 b00)))
 (let ((?x134 (* (- 1) ?x127)))
 (let ((?x41 (* q00 r00)))
 (let ((?x136 (* (- 1) ?x37)))
 (let (($x164 (and (= (+ (* p!5 s!0) ?x136 ?x41 (* (- 1) (* q!3 r!1))) 0) (= (+ (* a!4 s!0) (* (- 1) (* b!2 r!1)) ?x134 ?x145) 0) $x524 $x224 $x272 $x162)))
 (let (($x117 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x220 (* r q00 a00)))
 (let ((?x226 (* (- 1) ?x220)))
 (let ((?x209 (* p s00 a00)))
 (let ((?x206 (* r p00 b00)))
 (let ((?x186 (* p r00 b00)))
 (let ((?x187 (* (- 1) ?x186)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x195 (* (- 1) ?x63)))
 (let ((?x232 (+ ?x195 ?x66 ?x187 ?x206 ?x209 ?x226)))
 (let ((?x526 (* p p b b b r)))
 (let ((?x609 (+ (* p a a a a a r r r) (* (- 2) (* p a a a a b r r r)) (* p a a a b b r r r) (* (- 1) (* p p a a a r)) (* 3 (* p p a a b r)) ?x526 (* (- 3) (* p p a b b r)))))
 (let ((?x295 (* s q00 a00)))
 (let ((?x284 (* q s00 a00)))
 (let ((?x388 (* (- 1) ?x284)))
 (let ((?x250 (* q r00 b00)))
 (let ((?x249 (* s p00 b00)))
 (let ((?x353 (* (- 1) ?x249)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x368 (* (- 1) ?x72)))
 (let ((?x458 (* (- 2) (* p q b b b r))))
 (let ((?x502 (* q q b b b r)))
 (let ((?x490 (* (- 1) (* p p b b b s))))
 (let ((?x253 (* (- 1) q)))
 (let ((?x255 (+ p ?x253)))
 (let ((?x276 (+ a (* (- 1) b))))
 (let ((?x336 (+ r (* (- 1) s))))
 (let ((?x487 (* ?x336 ?x336 ?x336 ?x276 ?x276 ?x276 ?x255 b b)))
 (let ((?x456 (* 2 (* p q b b b s))))
 (let ((?x465 (* (- 1) (* q q b b b s))))
 (let ((?x360 (* (+ ?x465 ?x456 ?x487 ?x490 ?x502 ?x458 ?x526) (+ ?x195 ?x66 ?x368 ?x76 ?x187 ?x206 ?x209 ?x226 ?x353 ?x250 ?x388 ?x295))))
 (let (($x312 (= (+ ?x72 (* (- 1) ?x76) ?x249 (* (- 1) ?x250) ?x284 (* (- 1) ?x295)) 0)))
 (let (($x244 (= (+ ?x63 (* (- 1) ?x66) ?x186 (* (- 1) ?x206) (* (- 1) ?x209) ?x220) 0)))
 (let ((?x132 (* p00 b00)))
 (let ((?x131 (* q00 a00)))
 (let ((?x175 (* (- 1) ?x131)))
 (let (($x178 (= (+ (* a q) ?x175 ?x132 (* (- 1) (* p b))) 0)))
 (let ((?x145 (* r00 b00)))
 (let ((?x127 (* s00 a00)))
 (let ((?x134 (* (- 1) ?x127)))
 (let ((?x49 (* a s)))
 (let (($x160 (= (+ ?x49 (* (- 1) (* b r)) ?x134 ?x145) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x136 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x155 (= (+ ?x33 ?x136 ?x41 (* (- 1) (* q r))) 0)))
 (and $x155 $x160 $x178 $x244 $x312 (or (not (= ?x360 0)) (not (= (* ?x609 ?x232) 0)))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!39))
 ))
 (let (($x429 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x65 (* b00 p00 r)))
 (let ((?x225 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x319 (+ b (* (- 1) a))))
 (let ((?x427 (+ (* ?x319 ?x319 r r r a a a p) (* ?x319 ?x319 ?x319 r p p))))
 (let ((?x602 (+ (* (- 1) (* b00 r00 (+ p (* (- 1) q)))) (* (- 1) (* p00 s00 (+ a (* (- 1) b)))) (* b00 p00 (+ r (* (- 1) s))) (* q00 r00 (+ a (* (- 1) b))) (* a00 s00 (+ p (* (- 1) q))) (* (- 1) (* a00 q00 (+ r (* (- 1) s)))))))
 (let ((?x253 (* (- 1) q)))
 (let ((?x255 (+ p ?x253)))
 (let ((?x336 (+ r (* (- 1) s))))
 (let ((?x276 (+ a (* (- 1) b))))
 (let ((?x487 (* ?x336 ?x336 ?x336 ?x276 ?x276 ?x276 ?x255 b b)))
 (let (($x419 (not (= (* (+ ?x487 (* ?x336 ?x255 ?x255 b b b)) ?x602) 0))))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x573 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x190 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x281 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x136 (* (- 1) ?x37)))
 (and (= (+ (* (- 1) (* r q)) (* s p) ?x136 ?x41) 0) (= ?x281 0) $x190 (= ?x225 0) (= ?x573 0) (or $x419 (not (= (* ?x427 ?x225) 0))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x359 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x220 (* r q00 a00)))
 (let ((?x226 (* (- 1) ?x220)))
 (let ((?x209 (* p s00 a00)))
 (let ((?x206 (* r p00 b00)))
 (let ((?x186 (* p r00 b00)))
 (let ((?x187 (* (- 1) ?x186)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x195 (* (- 1) ?x63)))
 (let ((?x232 (+ ?x195 ?x66 ?x187 ?x206 ?x209 ?x226)))
 (let ((?x526 (* p p b b b r)))
 (let ((?x609 (+ (* p a a a a a r r r) (* (- 2) (* p a a a a b r r r)) (* p a a a b b r r r) (* (- 1) (* p p a a a r)) (* 3 (* p p a a b r)) ?x526 (* (- 3) (* p p a b b r)))))
 (let ((?x295 (* s q00 a00)))
 (let ((?x284 (* q s00 a00)))
 (let ((?x388 (* (- 1) ?x284)))
 (let ((?x250 (* q r00 b00)))
 (let ((?x249 (* s p00 b00)))
 (let ((?x353 (* (- 1) ?x249)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x368 (* (- 1) ?x72)))
 (let ((?x458 (* (- 2) (* p q b b b r))))
 (let ((?x502 (* q q b b b r)))
 (let ((?x490 (* (- 1) (* p p b b b s))))
 (let ((?x253 (* (- 1) q)))
 (let ((?x255 (+ p ?x253)))
 (let ((?x276 (+ a (* (- 1) b))))
 (let ((?x336 (+ r (* (- 1) s))))
 (let ((?x487 (* ?x336 ?x336 ?x336 ?x276 ?x276 ?x276 ?x255 b b)))
 (let ((?x456 (* 2 (* p q b b b s))))
 (let ((?x465 (* (- 1) (* q q b b b s))))
 (let ((?x360 (* (+ ?x465 ?x456 ?x487 ?x490 ?x502 ?x458 ?x526) (+ ?x195 ?x66 ?x368 ?x76 ?x187 ?x206 ?x209 ?x226 ?x353 ?x250 ?x388 ?x295))))
 (let (($x312 (= (+ ?x72 (* (- 1) ?x76) ?x249 (* (- 1) ?x250) ?x284 (* (- 1) ?x295)) 0)))
 (let (($x244 (= (+ ?x63 (* (- 1) ?x66) ?x186 (* (- 1) ?x206) (* (- 1) ?x209) ?x220) 0)))
 (let ((?x132 (* p00 b00)))
 (let ((?x131 (* q00 a00)))
 (let ((?x175 (* (- 1) ?x131)))
 (let (($x178 (= (+ (* a q) ?x175 ?x132 (* (- 1) (* p b))) 0)))
 (let ((?x145 (* r00 b00)))
 (let ((?x127 (* s00 a00)))
 (let ((?x134 (* (- 1) ?x127)))
 (let ((?x49 (* a s)))
 (let (($x160 (= (+ ?x49 (* (- 1) (* b r)) ?x134 ?x145) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x136 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x155 (= (+ ?x33 ?x136 ?x41 (* (- 1) (* q r))) 0)))
 (let (($x551 (and $x155 $x160 $x178 $x244 $x312 (or (not (= ?x360 0)) (not (= (* ?x609 ?x232) 0))))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x225 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x319 (+ b (* (- 1) a))))
 (let ((?x427 (+ (* ?x319 ?x319 r r r a a a p) (* ?x319 ?x319 ?x319 r p p))))
 (let ((?x602 (+ (* (- 1) (* b00 r00 ?x255)) (* (- 1) (* p00 s00 ?x276)) (* b00 p00 ?x336) (* q00 r00 ?x276) (* a00 s00 ?x255) (* (- 1) (* a00 q00 ?x336)))))
 (let (($x419 (not (= (* (+ ?x487 (* ?x336 ?x255 ?x255 b b b)) ?x602) 0))))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x573 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x190 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x281 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x410 (and (= (+ (* (- 1) (* r q)) (* s p) ?x136 ?x41) 0) (= ?x281 0) $x190 (= ?x225 0) (= ?x573 0) (or $x419 (not (= (* ?x427 ?x225) 0))))))
 (rewrite (= $x410 $x551))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x111 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x105 (+ (* a a a (- b a) (- b a) p r r r) (* (- b a) (- b a) (- b a) p p r))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x70 (- ?x68 ?x69)))
 (let ((?x89 (- r s)))
 (let ((?x84 (- p q)))
 (let ((?x86 (- a b)))
 (let ((?x98 (+ (* ?x86 ?x86 ?x86 b b ?x84 ?x89 ?x89 ?x89) (* b b b ?x84 ?x84 ?x89))))
 (let ((?x93 (+ (- (* (- 1) b00 ?x84 r00) (* ?x86 p00 s00)) (* b00 p00 ?x89) (* ?x86 q00 r00) (* a00 ?x84 s00))))
 (let (($x109 (or (not (= (* (- ?x93 (* a00 q00 ?x89)) ?x98) 0)) (not (= (* ?x70 ?x105) 0)))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* (- 1) a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) ?x49 ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x42 (+ (- (+ (* (- 1) q r) (* p s)) (* p00 s00)) ?x41)))
 (and (= ?x42 0) $x53 (= ?x60 0) (= ?x70 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) $x109))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x414 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x65 (* b00 p00 r)))
 (let ((?x225 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x319 (+ b (* (- 1) a))))
 (let ((?x427 (+ (* ?x319 ?x319 r r r a a a p) (* ?x319 ?x319 ?x319 r p p))))
 (let ((?x602 (+ (* (- 1) (* b00 r00 (+ p (* (- 1) q)))) (* (- 1) (* p00 s00 (+ a (* (- 1) b)))) (* b00 p00 (+ r (* (- 1) s))) (* q00 r00 (+ a (* (- 1) b))) (* a00 s00 (+ p (* (- 1) q))) (* (- 1) (* a00 q00 (+ r (* (- 1) s)))))))
 (let ((?x253 (* (- 1) q)))
 (let ((?x255 (+ p ?x253)))
 (let ((?x336 (+ r (* (- 1) s))))
 (let ((?x276 (+ a (* (- 1) b))))
 (let ((?x487 (* ?x336 ?x336 ?x336 ?x276 ?x276 ?x276 ?x255 b b)))
 (let (($x419 (not (= (* (+ ?x487 (* ?x336 ?x255 ?x255 b b b)) ?x602) 0))))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x573 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x190 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x281 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x136 (* (- 1) ?x37)))
 (let (($x410 (and (= (+ (* (- 1) (* r q)) (* s p) ?x136 ?x41) 0) (= ?x281 0) $x190 (= ?x225 0) (= ?x573 0) (or $x419 (not (= (* ?x427 ?x225) 0))))))
 (let ((?x105 (+ (* a a a (- b a) (- b a) p r r r) (* (- b a) (- b a) (- b a) p p r))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x70 (- ?x68 ?x69)))
 (let ((?x89 (- r s)))
 (let ((?x84 (- p q)))
 (let ((?x86 (- a b)))
 (let ((?x98 (+ (* ?x86 ?x86 ?x86 b b ?x84 ?x89 ?x89 ?x89) (* b b b ?x84 ?x84 ?x89))))
 (let ((?x93 (+ (- (* (- 1) b00 ?x84 r00) (* ?x86 p00 s00)) (* b00 p00 ?x89) (* ?x86 q00 r00) (* a00 ?x84 s00))))
 (let (($x109 (or (not (= (* (- ?x93 (* a00 q00 ?x89)) ?x98) 0)) (not (= (* ?x70 ?x105) 0)))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) ?x55) (* b00 p00)) ?x59) 0)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (let (($x110 (and $x44 $x53 $x61 (= ?x70 0) (= (- ?x80 ?x81) 0) $x109)))
 (rewrite (= $x110 $x410)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x112 (asserted $x111)))
 (let ((@x286 (mp (mp @x112 (quant-intro (proof-bind ?x414) (= $x111 $x429)) $x429) (rewrite (= $x429 $x429)) $x429)))
 (let ((@x166 (mp~ (mp @x286 (quant-intro (proof-bind ?x359) (= $x429 $x117)) $x117) (sk (~ $x117 $x164)) $x164)))
 (let ((@x309 (mp @x166 (rewrite (= $x164 $x393)) $x393)))
 (let ((@x513 (and-elim @x309 $x204)))
 (let ((@x191 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x204) $x181)) @x513 $x181)))
 (let (($x161 (>= ?x420 0)))
 (let ((@x302 (and-elim @x309 $x568)))
 (let ((@x557 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x568) $x161)) @x302 $x161)))
 (let (($x182 (<= ?x404 0)))
 (let ((@x268 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x204) $x182)) @x513 $x182)))
 (let (($x163 (<= ?x420 0)))
 (let ((@x497 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x568) $x163)) @x302 $x163)))
 (let (($x601 (not (<= ?x389 0))))
 (let (($x174 (>= ?x371 0)))
 (let (($x179 (<= ?x371 0)))
 (let ((@x567 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x285 (not $x179) (not $x174))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x179)) @x497 @x557 false) $x179) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x174)) @x497 @x557 false) $x174) $x285)))
 (let (($x180 (>= ?x389 0)))
 (let ((@x396 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x180)) @x497 @x268 @x557 @x191 false) $x180)))
 (let ((@x606 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x260 $x601 (not $x180))) @x396 (unit-resolution (and-elim @x309 $x522) @x567 $x383) $x601)))
 ((_ th-lemma arith farkas 1 1 1 1 1) @x606 @x497 @x268 @x557 @x191 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 14
 :arith-assert-diseq        3
 :arith-assert-lower        23
 :arith-assert-upper        22
 :arith-conflicts           4
 :arith-eq-adapter          11
 :arith-fixed-eqs           10
 :arith-grobner             4
 :arith-max-min             456
 :arith-nonlinear-horner    38
 :arith-num-rows            12
 :arith-pivots              5
 :arith-pseudo-nonlinear    8
 :arith-row-summations      3
 :arith-tableau-max-columns 68
 :arith-tableau-max-rows    12
 :conflicts                 4
 :decisions                 7
 :del-clause                27
 :final-checks              4
 :max-memory                80.90
 :memory                    19.15
 :mk-bool-var               33
 :mk-clause                 40
 :num-allocs                198872494433.00
 :num-checks                1
 :propagations              19
 :rlimit-count              17777519
 :time                      8.86
 :total-time                8.87)
