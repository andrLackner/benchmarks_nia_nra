unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x593 (to_real d!1)))
 (let ((?x135 (to_real y!0)))
 (let ((?x127 (to_real b!2)))
 (let ((?x62 (to_real b00)))
 (let ((?x673 (* (- (/ 1.0 16.0)) (* ?x62 ?x127 ?x127 ?x127 ?x135 ?x135 ?x593))))
 (let ((?x125 (to_real a!3)))
 (let ((?x486 (* (/ 3.0 256.0) (* ?x62 ?x125 ?x127 ?x127 ?x127 ?x135 ?x593 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x610 (* (/ 1.0 512.0) (* ?x62 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x67 (to_real d00)))
 (let ((?x383 (* (- (/ 3.0 256.0)) (* ?x67 ?x127 ?x127 ?x127 ?x127 ?x127 ?x135 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x873 (* (- (/ 1.0 512.0)) (* ?x67 ?x127 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x377 (* (- (/ 1.0 512.0)) (* ?x67 ?x125 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x584 (* (/ 3.0 256.0) (* ?x62 ?x127 ?x127 ?x127 ?x127 ?x135 ?x593 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x575 (* (/ 1.0 512.0) (* ?x62 ?x125 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x846 (* (/ 3.0 128.0) (* ?x62 ?x127 ?x127 ?x127 ?x127 ?x135 ?x135 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x378 (* (/ 1.0 64.0) (* ?x62 ?x127 ?x127 ?x127 ?x127 ?x135 ?x135 ?x135 ?x593 ?x593 ?x593))))
 (let ((?x755 (* (/ 3.0 128.0) (* ?x62 ?x125 ?x127 ?x127 ?x127 ?x135 ?x135 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x397 (* (- (/ 3.0 128.0)) (* ?x67 ?x125 ?x127 ?x127 ?x127 ?x127 ?x135 ?x135 ?x593 ?x593 ?x593))))
 (let ((?x390 (* (- (/ 3.0 128.0)) (* ?x67 ?x127 ?x127 ?x127 ?x127 ?x127 ?x135 ?x135 ?x593 ?x593 ?x593))))
 (let ((?x385 (* (- (/ 3.0 256.0)) (* ?x67 ?x125 ?x127 ?x127 ?x127 ?x127 ?x135 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x264 (* (- (/ 1.0 32.0)) (* ?x67 ?x127 ?x127 ?x127 ?x593 ?x593))))
 (let ((?x193 (* (- (/ 1.0 64.0)) (* ?x67 ?x125 ?x127 ?x127 ?x127 ?x127 ?x135 ?x135 ?x135 ?x593 ?x593))))
 (let ((?x352 (* (/ 1.0 32.0) (* ?x62 ?x127 ?x127 ?x593 ?x593 ?x593))))
 (let ((?x399 (* (- (/ 1.0 64.0)) (* ?x67 ?x127 ?x127 ?x127 ?x127 ?x127 ?x135 ?x135 ?x135 ?x593 ?x593))))
 (let ((?x359 (* (/ 1.0 64.0) (* ?x62 ?x125 ?x127 ?x127 ?x127 ?x135 ?x135 ?x135 ?x593 ?x593 ?x593))))
 (let ((?x701 (* (/ 1.0 16.0) (* ?x67 ?x127 ?x127 ?x127 ?x127 ?x135 ?x135))))
 (let ((?x424 (+ ?x701 ?x359 ?x399 ?x352 ?x193 ?x264 (* (/ 1.0 16.0) (* ?x67 ?x127 ?x127 ?x127 ?x127 ?x135 ?x593)) ?x385 ?x390 ?x397 (* (- (/ 1.0 64.0)) (* ?x62 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593)) (* (- (/ 1.0 16.0)) (* ?x62 ?x127 ?x127 ?x127 ?x135 ?x593 ?x593)) ?x755 ?x378 ?x846 ?x575 ?x584 (* (/ 1.0 64.0) (* ?x67 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593)) ?x377 ?x873 ?x383 ?x610 ?x486 ?x673)))
 (let (($x144 (>= ?x424 0.0)))
 (let ((?x418 (+ (* d00 b!2) (* (- 1) (* b00 d!1)))))
 (let (($x358 (>= ?x418 0)))
 (let (($x551 (= 0 ?x418)))
 (let ((@x242 (symm (commutativity (= $x551 (= ?x418 0))) (= (= ?x418 0) $x551))))
 (let (($x537 (= ?x418 0)))
 (let ((?x559 (+ ?x701 ?x359 ?x352 ?x193 ?x264 ?x673)))
 (let (($x865 (= ?x559 0.0)))
 (let (($x413 (not $x865)))
 (let (($x430 (or $x413 (not (= ?x424 0.0)))))
 (let ((?x341 (+ (* a00 d!1) (* 2 (* y!0 b!2)) (* (- 1) (* d!1 a!3)) (* (- 2) (* y00 b!2)))))
 (let (($x348 (= ?x341 0)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let ((?x35 (* a00 d00)))
 (let ((?x557 (+ ?x35 ?x101 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x531 (= ?x557 0)))
 (let (($x577 (and $x531 $x537 $x348 $x430)))
 (let ((?x661 (* (- (/ 1.0 64.0)) (* ?x127 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x135 ?x135 ?x135 ?x67))))
 (let ((?x396 (* (- (/ 3.0 128.0)) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x125 ?x135 ?x135 ?x67))))
 (let ((?x893 (* (- (/ 3.0 128.0)) (* ?x127 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x135 ?x135 ?x67))))
 (let ((?x888 (* (- (/ 3.0 256.0)) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x125 ?x135 ?x67))))
 (let ((?x840 (* (- (/ 3.0 256.0)) (* ?x127 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x135 ?x67))))
 (let ((?x191 (* (- (/ 1.0 512.0)) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x125 ?x67))))
 (let ((?x276 (* (- (/ 1.0 512.0)) (* ?x127 ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x67))))
 (let ((?x456 (* (/ 1.0 64.0) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x62 ?x135 ?x135 ?x135))))
 (let ((?x454 (* (/ 3.0 128.0) (* ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x62 ?x125 ?x135 ?x135))))
 (let ((?x452 (* (/ 3.0 128.0) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x62 ?x135 ?x135))))
 (let ((?x450 (* (/ 3.0 256.0) (* ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x62 ?x125 ?x135))))
 (let ((?x225 (* (/ 3.0 256.0) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x62 ?x135))))
 (let ((?x567 (* (/ 1.0 512.0) (* ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x593 ?x62 ?x125))))
 (let ((?x184 (* (- (/ 1.0 16.0)) (* ?x127 ?x127 ?x127 ?x593 ?x62 ?x135 ?x135))))
 (let ((?x224 (* (/ 1.0 512.0) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x593 ?x593 ?x593 ?x62))))
 (let ((?x574 (* (- (/ 1.0 32.0)) (* ?x127 ?x127 ?x127 ?x593 ?x593 ?x67))))
 (let ((?x169 (* (- (/ 1.0 64.0)) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x125 ?x135 ?x135 ?x135 ?x67))))
 (let ((?x181 (* (/ 1.0 16.0) (* ?x127 ?x127 ?x127 ?x127 ?x135 ?x135 ?x67))))
 (let ((?x138 (* (/ 1.0 64.0) (* ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x62 ?x125 ?x135 ?x135 ?x135))))
 (let ((?x573 (* (/ 1.0 32.0) (* ?x127 ?x127 ?x593 ?x593 ?x593 ?x62))))
 (let ((?x304 (+ ?x573 ?x138 ?x181 ?x169 ?x574 ?x224 ?x184 ?x567 ?x225 ?x450 ?x452 ?x454 ?x456 (* (/ 1.0 64.0) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x593 ?x67)) (* (/ 1.0 16.0) (* ?x127 ?x127 ?x127 ?x127 ?x593 ?x135 ?x67)) ?x276 ?x191 ?x840 ?x888 ?x893 ?x396 ?x661 (* (- (/ 1.0 64.0)) (* ?x127 ?x127 ?x127 ?x593 ?x593 ?x593 ?x62)) (* (- (/ 1.0 16.0)) (* ?x127 ?x127 ?x127 ?x593 ?x593 ?x62 ?x135)))))
 (let (($x238 (or (not (= (+ ?x573 ?x138 ?x181 ?x169 ?x574 ?x184) 0.0)) (not (= ?x304 0.0)))))
 (let ((?x120 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x596 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x101 (* 2 (* y!0 b00))) 0)))
 (let (($x325 (and $x596 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x120 0) $x238)))
 (let (($x219 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x65 (to_real y)))
 (let ((?x62 (to_real b00)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real d00)))
 (let ((?x919 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x65 ?x65 ?x65 ?x67))))
 (let ((?x64 (to_real a)))
 (let ((?x918 (* (- (/ 3.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x64 ?x65 ?x65 ?x67))))
 (let ((?x917 (* (- (/ 3.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x65 ?x65 ?x67))))
 (let ((?x916 (* (- (/ 3.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x65 ?x67))))
 (let ((?x915 (* (- (/ 3.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x65 ?x67))))
 (let ((?x914 (* (- (/ 1.0 512.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x64 ?x67))))
 (let ((?x913 (* (- (/ 1.0 512.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x67))))
 (let ((?x459 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x483 (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x64 ?x65 ?x65))))
 (let ((?x480 (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x65 ?x65))))
 (let ((?x476 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62 ?x64 ?x65))))
 (let ((?x473 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62 ?x65))))
 (let ((?x469 (* (/ 1.0 512.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62 ?x64))))
 (let ((?x319 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x65 ?x65))))
 (let ((?x466 (* (/ 1.0 512.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62))))
 (let ((?x318 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x67))))
 (let ((?x317 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x64 ?x65 ?x65 ?x65 ?x67))))
 (let ((?x236 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x65 ?x65 ?x67))))
 (let ((?x204 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x64 ?x65 ?x65 ?x65))))
 (let ((?x316 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62))))
 (let ((?x922 (+ ?x316 ?x204 ?x236 ?x317 ?x318 ?x466 ?x319 ?x469 ?x473 ?x476 ?x480 ?x483 ?x459 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x65 ?x67)) ?x913 ?x914 ?x915 ?x916 ?x917 ?x918 ?x919 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x65)))))
 (let (($x218 (or (not (= (+ ?x316 ?x204 ?x236 ?x317 ?x318 ?x319) 0.0)) (not (= ?x922 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x170 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let ((?x35 (* a00 d00)))
 (let (($x133 (= (+ ?x35 (* (- 1) (* a d00)) ?x101 (* 2 (* y b00))) 0)))
 (and $x133 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x170 0) $x218))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x747 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x65 (to_real y)))
 (let ((?x273 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x62 (to_real b00)))
 (let ((?x777 (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x273 ?x273)))
 (let ((?x67 (to_real d00)))
 (let ((?x674 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x792 (* (- (/ 1.0 32.0)) ?x674)))
 (let ((?x64 (to_real a)))
 (let ((?x732 (+ ?x64 ?x56)))
 (let ((?x760 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x822 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x880 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x648 (* (/ 1.0 32.0) ?x880)))
 (let ((?x729 (+ ?x648 (* (/ 1.0 64.0) ?x822) (* (/ 1.0 16.0) (* ?x67 ?x56 ?x56 ?x56 ?x56 ?x273 ?x273)) (* (- (/ 1.0 64.0)) ?x760) ?x792 (* (- (/ 1.0 16.0)) ?x777))))
 (let ((?x659 (* ?x67 ?x65 ?x65 ?x65 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x675 (* ?x62 ?x65 ?x65 ?x65 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x569 (+ ?x648 (* (/ 1.0 64.0) ?x675) (* (/ 1.0 16.0) (* ?x67 ?x65 ?x65 ?x56 ?x56 ?x56 ?x56)) (* (- (/ 1.0 64.0)) ?x659) ?x792 (* (- (/ 1.0 16.0)) (* ?x62 ?x65 ?x65 ?x59 ?x56 ?x56 ?x56)))))
 (let ((?x867 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x290 (= ?x867 0)))
 (let ((?x517 (* d00 a)))
 (let ((?x440 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x517)))
 (and (= ?x440 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x290 (or (not (= ?x569 0.0)) (not (= ?x729 0.0))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x258 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x65 (to_real y)))
 (let ((?x62 (to_real b00)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real d00)))
 (let ((?x919 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x65 ?x65 ?x65 ?x67))))
 (let ((?x64 (to_real a)))
 (let ((?x918 (* (- (/ 3.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x64 ?x65 ?x65 ?x67))))
 (let ((?x917 (* (- (/ 3.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x65 ?x65 ?x67))))
 (let ((?x916 (* (- (/ 3.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x65 ?x67))))
 (let ((?x915 (* (- (/ 3.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x65 ?x67))))
 (let ((?x914 (* (- (/ 1.0 512.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x64 ?x67))))
 (let ((?x913 (* (- (/ 1.0 512.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x67))))
 (let ((?x459 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x483 (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x64 ?x65 ?x65))))
 (let ((?x480 (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x65 ?x65))))
 (let ((?x476 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62 ?x64 ?x65))))
 (let ((?x473 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62 ?x65))))
 (let ((?x469 (* (/ 1.0 512.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62 ?x64))))
 (let ((?x319 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x65 ?x65))))
 (let ((?x466 (* (/ 1.0 512.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x62))))
 (let ((?x318 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x67))))
 (let ((?x317 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x64 ?x65 ?x65 ?x65 ?x67))))
 (let ((?x236 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x65 ?x65 ?x67))))
 (let ((?x204 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x64 ?x65 ?x65 ?x65))))
 (let ((?x316 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62))))
 (let ((?x922 (+ ?x316 ?x204 ?x236 ?x317 ?x318 ?x466 ?x319 ?x469 ?x473 ?x476 ?x480 ?x483 ?x459 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x65 ?x67)) ?x913 ?x914 ?x915 ?x916 ?x917 ?x918 ?x919 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x65)))))
 (let (($x218 (or (not (= (+ ?x316 ?x204 ?x236 ?x317 ?x318 ?x319) 0.0)) (not (= ?x922 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x170 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let ((?x35 (* a00 d00)))
 (let (($x133 (= (+ ?x35 (* (- 1) (* a d00)) ?x101 (* 2 (* y b00))) 0)))
 (let (($x929 (and $x133 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x170 0) $x218)))
 (let ((?x273 (+ ?x65 (* (/ 1.0 2.0) ?x59))))
 (let ((?x777 (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x273 ?x273)))
 (let ((?x674 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x792 (* (- (/ 1.0 32.0)) ?x674)))
 (let ((?x732 (+ ?x64 ?x56)))
 (let ((?x760 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x822 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x880 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x648 (* (/ 1.0 32.0) ?x880)))
 (let ((?x729 (+ ?x648 (* (/ 1.0 64.0) ?x822) (* (/ 1.0 16.0) (* ?x67 ?x56 ?x56 ?x56 ?x56 ?x273 ?x273)) (* (- (/ 1.0 64.0)) ?x760) ?x792 (* (- (/ 1.0 16.0)) ?x777))))
 (let ((?x659 (* ?x67 ?x65 ?x65 ?x65 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x675 (* ?x62 ?x65 ?x65 ?x65 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x569 (+ ?x648 (* (/ 1.0 64.0) ?x675) (* (/ 1.0 16.0) (* ?x67 ?x65 ?x65 ?x56 ?x56 ?x56 ?x56)) (* (- (/ 1.0 64.0)) ?x659) ?x792 (* (- (/ 1.0 16.0)) (* ?x62 ?x65 ?x65 ?x59 ?x56 ?x56 ?x56)))))
 (let ((?x867 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x290 (= ?x867 0)))
 (let ((?x517 (* d00 a)))
 (let (($x651 (= (+ (* 2 ?x100) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x517) 0)))
 (let (($x768 (and $x651 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x290 (or (not (= ?x569 0.0)) (not (= ?x729 0.0))))))
 (rewrite (= $x768 $x929))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x799 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x65 (to_real y)))
 (let ((?x273 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x62 (to_real b00)))
 (let ((?x777 (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x273 ?x273)))
 (let ((?x67 (to_real d00)))
 (let ((?x674 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x683 (* (/ 1.0 32.0) ?x674)))
 (let ((?x64 (to_real a)))
 (let ((?x732 (+ ?x64 ?x56)))
 (let ((?x760 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x822 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x880 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x196 (* (- (/ 1.0 32.0)) ?x880)))
 (let ((?x787 (+ ?x196 (* (- (/ 1.0 64.0)) ?x822) (* (- (/ 1.0 16.0)) (* ?x67 ?x56 ?x56 ?x56 ?x56 ?x273 ?x273)) (* (/ 1.0 64.0) ?x760) ?x683 (* (/ 1.0 16.0) ?x777))))
 (let ((?x659 (* ?x67 ?x65 ?x65 ?x65 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x675 (* ?x62 ?x65 ?x65 ?x65 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x716 (+ ?x196 (* (- (/ 1.0 64.0)) ?x675) (* (- (/ 1.0 16.0)) (* ?x67 ?x65 ?x65 ?x56 ?x56 ?x56 ?x56)) (* (/ 1.0 64.0) ?x659) ?x683 (* (/ 1.0 16.0) (* ?x62 ?x65 ?x65 ?x59 ?x56 ?x56 ?x56)))))
 (let ((?x867 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x290 (= ?x867 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let (($x398 (= (+ ?x101 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x398 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x290 (or (not (= ?x716 0.0)) (not (= ?x787 0.0))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x806 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x65 (to_real y)))
 (let ((?x273 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x62 (to_real b00)))
 (let ((?x777 (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x273 ?x273)))
 (let ((?x67 (to_real d00)))
 (let ((?x674 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x792 (* (- (/ 1.0 32.0)) ?x674)))
 (let ((?x64 (to_real a)))
 (let ((?x732 (+ ?x64 ?x56)))
 (let ((?x760 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x822 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x880 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x648 (* (/ 1.0 32.0) ?x880)))
 (let ((?x729 (+ ?x648 (* (/ 1.0 64.0) ?x822) (* (/ 1.0 16.0) (* ?x67 ?x56 ?x56 ?x56 ?x56 ?x273 ?x273)) (* (- (/ 1.0 64.0)) ?x760) ?x792 (* (- (/ 1.0 16.0)) ?x777))))
 (let ((?x659 (* ?x67 ?x65 ?x65 ?x65 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x675 (* ?x62 ?x65 ?x65 ?x65 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x569 (+ ?x648 (* (/ 1.0 64.0) ?x675) (* (/ 1.0 16.0) (* ?x67 ?x65 ?x65 ?x56 ?x56 ?x56 ?x56)) (* (- (/ 1.0 64.0)) ?x659) ?x792 (* (- (/ 1.0 16.0)) (* ?x62 ?x65 ?x65 ?x59 ?x56 ?x56 ?x56)))))
 (let ((?x867 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x290 (= ?x867 0)))
 (let ((?x517 (* d00 a)))
 (let ((?x440 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x517)))
 (let (($x768 (and (= ?x440 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x290 (or (not (= ?x569 0.0)) (not (= ?x729 0.0))))))
 (let ((?x683 (* (/ 1.0 32.0) ?x674)))
 (let ((?x196 (* (- (/ 1.0 32.0)) ?x880)))
 (let ((?x787 (+ ?x196 (* (- (/ 1.0 64.0)) ?x822) (* (- (/ 1.0 16.0)) (* ?x67 ?x56 ?x56 ?x56 ?x56 ?x273 ?x273)) (* (/ 1.0 64.0) ?x760) ?x683 (* (/ 1.0 16.0) ?x777))))
 (let ((?x716 (+ ?x196 (* (- (/ 1.0 64.0)) ?x675) (* (- (/ 1.0 16.0)) (* ?x67 ?x65 ?x65 ?x56 ?x56 ?x56 ?x56)) (* (/ 1.0 64.0) ?x659) ?x683 (* (/ 1.0 16.0) (* ?x62 ?x65 ?x65 ?x59 ?x56 ?x56 ?x56)))))
 (let ((?x35 (* a00 d00)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let (($x437 (and (= (+ ?x101 ?x35 (* 2 (* b00 y)) (* (- 1) ?x517)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x290 (or (not (= ?x716 0.0)) (not (= ?x787 0.0))))))
 (rewrite (= $x437 $x768)))))))))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x65 (to_real y)))
 (let ((?x79 (+ ?x65 ?x60)))
 (let ((?x62 (to_real b00)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x67 (to_real d00)))
 (let ((?x72 (* ?x58 ?x58 ?x58 ?x60 ?x60 ?x67)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x63 (* (to_real (- 1)) ?x58 ?x58 ?x62 ?x60 ?x60 ?x60)))
 (let ((?x83 (- ?x63 (* ?x80 ?x58 ?x58 ?x58 ?x62 ?x60 ?x60 ?x60 ?x79 ?x79 ?x79))))
 (let ((?x87 (+ (- ?x83 (* ?x58 ?x58 ?x58 ?x58 ?x67 ?x79 ?x79)) (* ?x80 ?x58 ?x58 ?x58 ?x58 ?x60 ?x60 ?x67 ?x79 ?x79 ?x79) ?x72 (* ?x58 ?x58 ?x58 ?x62 ?x60 ?x79 ?x79))))
 (let ((?x64 (to_real a)))
 (let ((?x69 (- ?x63 (* ?x64 ?x58 ?x58 ?x58 ?x62 ?x60 ?x60 ?x60 ?x65 ?x65 ?x65))))
 (let ((?x74 (+ (- ?x69 (* ?x58 ?x58 ?x58 ?x58 ?x67 ?x65 ?x65)) (* ?x64 ?x58 ?x58 ?x58 ?x58 ?x60 ?x60 ?x67 ?x65 ?x65 ?x65) ?x72 (* ?x58 ?x58 ?x58 ?x62 ?x60 ?x65 ?x65))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x74 ?x75)) (not (= ?x87 ?x75)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x810 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x65 (to_real y)))
 (let ((?x273 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x62 (to_real b00)))
 (let ((?x777 (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x273 ?x273)))
 (let ((?x67 (to_real d00)))
 (let ((?x674 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x683 (* (/ 1.0 32.0) ?x674)))
 (let ((?x64 (to_real a)))
 (let ((?x732 (+ ?x64 ?x56)))
 (let ((?x760 (* ?x67 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x822 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x732 ?x273 ?x273 ?x273)))
 (let ((?x880 (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x196 (* (- (/ 1.0 32.0)) ?x880)))
 (let ((?x787 (+ ?x196 (* (- (/ 1.0 64.0)) ?x822) (* (- (/ 1.0 16.0)) (* ?x67 ?x56 ?x56 ?x56 ?x56 ?x273 ?x273)) (* (/ 1.0 64.0) ?x760) ?x683 (* (/ 1.0 16.0) ?x777))))
 (let ((?x659 (* ?x67 ?x65 ?x65 ?x65 ?x59 ?x59 ?x56 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x675 (* ?x62 ?x65 ?x65 ?x65 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x64)))
 (let ((?x716 (+ ?x196 (* (- (/ 1.0 64.0)) ?x675) (* (- (/ 1.0 16.0)) (* ?x67 ?x65 ?x65 ?x56 ?x56 ?x56 ?x56)) (* (/ 1.0 64.0) ?x659) ?x683 (* (/ 1.0 16.0) (* ?x62 ?x65 ?x65 ?x59 ?x56 ?x56 ?x56)))))
 (let ((?x867 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x290 (= ?x867 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let (($x398 (= (+ ?x101 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x437 (and $x398 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x290 (or (not (= ?x716 0.0)) (not (= ?x787 0.0))))))
 (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x79 (+ ?x65 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x72 (* ?x58 ?x58 ?x58 ?x60 ?x60 ?x67)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x63 (* (to_real (- 1)) ?x58 ?x58 ?x62 ?x60 ?x60 ?x60)))
 (let ((?x83 (- ?x63 (* ?x80 ?x58 ?x58 ?x58 ?x62 ?x60 ?x60 ?x60 ?x79 ?x79 ?x79))))
 (let ((?x87 (+ (- ?x83 (* ?x58 ?x58 ?x58 ?x58 ?x67 ?x79 ?x79)) (* ?x80 ?x58 ?x58 ?x58 ?x58 ?x60 ?x60 ?x67 ?x79 ?x79 ?x79) ?x72 (* ?x58 ?x58 ?x58 ?x62 ?x60 ?x79 ?x79))))
 (let ((?x69 (- ?x63 (* ?x64 ?x58 ?x58 ?x58 ?x62 ?x60 ?x60 ?x60 ?x65 ?x65 ?x65))))
 (let ((?x74 (+ (- ?x69 (* ?x58 ?x58 ?x58 ?x58 ?x67 ?x65 ?x65)) (* ?x64 ?x58 ?x58 ?x58 ?x58 ?x60 ?x60 ?x67 ?x65 ?x65 ?x65) ?x72 (* ?x58 ?x58 ?x58 ?x62 ?x60 ?x65 ?x65))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x91 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x74 ?x75)) (not (= ?x87 ?x75))))))
 (rewrite (= $x91 $x437))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x414 (mp (mp @x93 (quant-intro (proof-bind ?x810) (= $x92 $x799)) $x799) (rewrite (= $x799 $x799)) $x799)))
 (let ((@x667 (mp (mp @x414 (quant-intro (proof-bind ?x806) (= $x799 $x747)) $x747) (quant-intro (proof-bind ?x258) (= $x747 $x219)) $x219)))
 (let ((@x433 (mp (mp~ @x667 (sk (~ $x219 $x325)) $x325) (rewrite (= $x325 $x577)) $x577)))
 (let ((@x249 (mp (and-elim @x433 $x537) @x242 $x551)))
 (let ((@x212 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x551) $x358)) @x249 $x358)))
 (let (($x361 (<= ?x418 0)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x551) $x361)) @x249 $x361)))
 (let ((@x220 (unit-resolution ((_ th-lemma arith) (or (not $x361) (not $x358) $x144)) @x250 @x212 (hypothesis (not $x144)) false)))
 (let ((@x842 (lemma @x220 $x144)))
 (let (($x208 (<= ?x424 0.0)))
 (let ((@x415 (unit-resolution ((_ th-lemma arith) (or $x208 (not $x358) (not $x361))) @x250 @x212 (hypothesis (not $x208)) false)))
 (let ((@x429 (lemma @x415 $x208)))
 (let (($x669 (>= ?x559 0.0)))
 (let (($x707 (not $x669)))
 (let (($x422 (<= ?x559 0.0)))
 (let ((@x268 (unit-resolution ((_ th-lemma arith) (or (not $x208) (not $x144) $x422 (not $x358) (not $x361))) @x250 @x212 (hypothesis (not $x422)) @x429 @x842 false)))
 (let (($x898 (= 0.0 ?x559)))
 (let (($x785 (not $x898)))
 (let ((@x788 (monotonicity (symm (commutativity (= $x898 $x865)) (= $x865 $x898)) (= $x413 $x785))))
 (let (($x425 (= ?x424 0.0)))
 (let (($x436 (= 0.0 ?x424)))
 (let ((@x750 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x436 (not $x208) (not $x144))) @x842 (or $x436 (not $x208)))))
 (let ((@x769 (mp (unit-resolution @x750 @x429 $x436) (commutativity (= $x436 $x425)) $x425)))
 (let ((@x798 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x898 (not $x422) $x707)) (mp (unit-resolution (and-elim @x433 $x430) @x769 $x413) @x788 $x785) (or (not $x422) $x707))))
 (let (($x680 (>= ?x341 0)))
 (let (($x202 (= 0 ?x341)))
 (let ((@x655 (mp (and-elim @x433 $x348) (symm (commutativity (= $x202 $x348)) (= $x348 $x202)) $x202)))
 (let (($x410 (<= ?x341 0)))
 (let (($x684 (>= ?x557 0)))
 (let (($x354 (= 0 ?x557)))
 (let ((@x677 (mp (and-elim @x433 $x531) (symm (commutativity (= $x354 $x531)) (= $x531 $x354)) $x354)))
 (let (($x356 (<= ?x557 0)))
 (let (($x434 (not $x361)))
 (let (($x435 (not $x358)))
 (let (($x213 (not $x144)))
 (let (($x404 (not $x208)))
 (let (($x843 (or $x404 $x213 $x669 (not $x680) (not $x410) $x435 $x434 (not $x684) (not $x356))))
 (unit-resolution ((_ th-lemma arith) $x843) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x354) $x356)) @x677 $x356) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x354) $x684)) @x677 $x684) @x250 @x212 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x202) $x410)) @x655 $x410) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x202) $x680)) @x655 $x680) (unit-resolution @x798 (lemma @x268 $x422) $x707) @x429 @x842 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       37
 :arith-eq-adapter                59
 :arith-bound-propagations-cheap  47
 :arith-bound-propagations-lp     8
 :arith-conflicts                 123
 :arith-diseq                     61
 :arith-gcd-calls                 9
 :arith-grobner-calls             5
 :arith-grobner-conflicts         4
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 18
 :arith-lower                     87
 :arith-make-feasible             80
 :arith-max-columns               63
 :arith-max-rows                  11
 :arith-nla-explanations          111
 :arith-nla-lemmas                122
 :arith-patches                   9
 :arith-patches-success           9
 :arith-propagations              47
 :arith-upper                     80
 :conflicts                       12
 :decisions                       154
 :del-clause                      174
 :final-checks                    35
 :max-memory                      5.07
 :memory                          3.20
 :mk-bool-var                     329
 :mk-clause                       254
 :num-allocs                      42278917
 :num-checks                      1
 :propagations                    134
 :rlimit-count                    7373
 :time                            0.07
 :total-time                      0.08)
