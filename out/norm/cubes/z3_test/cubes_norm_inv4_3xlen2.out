unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x256 (+ m!1 (* (- 6) n!0))))
 (let (($x451 (<= ?x256 6)))
 (let (($x703 (= ?x256 6)))
 (let ((?x876 (+ c!3 k!2)))
 (let ((?x815 (+ m!1 k!2)))
 (let ((?x838 (+ 6 m!1)))
 (let ((?x1036 (+ 1 n!0)))
 (let ((?x1208 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x1034 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x867 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x866 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x828 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x821 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x819 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x817 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x742 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x664 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x628 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x606 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x598 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x596 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x565 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x475 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x454 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x443 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x438 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x425 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x310 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x278 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x267 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x258 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x249 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x239 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x223 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x200 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x193 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x176 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x170 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x815 ?x815 ?x876 ?x876 ?x876)))
 (let ((?x148 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x815 ?x815 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x544 (+ ?x148 (* (- 3) ?x170) (* (- 3) ?x176) (* 3 ?x193) (* (- 3) ?x200) (* (- 1) ?x223) ?x239 (* (- 3) ?x249) (* (- 3) ?x258) (* (- 3) ?x267) (* 3 ?x278) (* (- 1) ?x310) (* 3 ?x425) ?x438 (* 3 ?x443) (* (- 3) ?x454) (* 3 ?x475) (* (- 1) ?x565) (* 3 ?x596) ?x598 ?x606 (* 3 ?x628) (* (- 1) ?x664) ?x742 ?x817 ?x819 (* (- 1) ?x821) (* (- 1) ?x828) (* (- 1) ?x866) (* 3 ?x867) (* (- 3) ?x1034) (* (- 1) ?x1208))))
 (let (($x694 (= ?x544 0)))
 (let (($x941 (not $x694)))
 (let ((?x813 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x810 (= ?x813 (- 1))))
 (let ((?x776 (* (- 2) n!0)))
 (let ((?x1062 (* (- 1) (* k!2 n!0))))
 (let ((?x1084 (* 3 c!3)))
 (let ((?x986 (+ ?x1084 k!2 ?x1062 ?x776)))
 (let (($x423 (= ?x986 1)))
 (let ((?x151 (* (- 9) n!0)))
 (let ((?x872 (* 5 k!2)))
 (let ((?x566 (* 9 (* c!3 n!0))))
 (let ((?x769 (* (- 1) (* k!2 k!2))))
 (let ((?x863 (* 18 c!3)))
 (let ((?x492 (+ ?x863 ?x769 ?x566 ?x872 ?x151)))
 (let (($x388 (= ?x492 4)))
 (let (($x564 (and $x703 $x388 $x423 $x810 $x941)))
 (let ((?x871 (+ k!2 m!1)))
 (let ((?x496 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x494 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x921 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x399 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x447 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x892 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x465 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x546 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x602 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x740 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x552 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x601 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x918 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x326 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x735 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x945 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x923 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x926 (* ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x887 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x930 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x693 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x234 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x935 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x894 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x890 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x488 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x1035 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876)))
 (let ((?x774 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x837 (* ?x1036 ?x1036 ?x1036 ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x684 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x1042 (* ?x1036 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x1086 (* ?x1036 ?x1036 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x838 ?x871 ?x871 ?x871 ?x871 ?x876 ?x876 ?x876 ?x876 ?x876 ?x876)))
 (let ((?x723 (+ ?x1086 ?x1042 ?x684 ?x837 (* (- 1) ?x774) (* (- 1) ?x1035) (* 3 ?x488) ?x890 (* 3 ?x894) (* (- 1) ?x935) (* 3 ?x234) ?x693 (* (- 1) ?x930) ?x887 (* (- 3) ?x926) (* (- 3) ?x923) (* (- 3) ?x945) (* (- 3) ?x735) (* (- 1) ?x326) (* (- 1) ?x918) ?x601 (* 3 ?x552) (* (- 3) ?x740) (* 3 ?x602) (* (- 3) ?x546) (* 3 ?x465) (* (- 3) ?x892) (* (- 1) ?x447) (* 3 ?x399) (* (- 1) ?x921) (* (- 3) ?x494) (* 3 ?x496))))
 (let (($x990 (and $x703 (= (+ ?x863 ?x872 ?x151 ?x769 ?x566) 4) (= (+ ?x1084 k!2 ?x776 ?x1062) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x723 0)))))
 (let (($x929 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x349 (+ 6 m)))
 (let ((?x352 (+ 1 n)))
 (let ((?x1207 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1134 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1126 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1110 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1043 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1031 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1022 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x827 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x797 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x792 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x767 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x729 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x668 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x666 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x638 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x624 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x617 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x590 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x581 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x561 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x558 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x479 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x468 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x461 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x422 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x368 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x336 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x272 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x225 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x181 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x138 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x287 (+ ?x138 ?x181 ?x225 ?x272 (* (- 1) ?x299) (* (- 1) ?x336) (* 3 ?x368) ?x422 (* 3 ?x461) (* (- 1) ?x468) (* 3 ?x479) ?x558 (* (- 1) ?x561) ?x581 (* (- 3) ?x590) (* (- 3) ?x617) (* (- 3) ?x624) (* (- 3) ?x638) (* (- 1) ?x666) (* (- 1) ?x668) ?x729 (* 3 ?x767) (* (- 3) ?x792) (* 3 ?x797) (* (- 3) ?x827) (* 3 ?x1022) (* (- 3) ?x1031) (* (- 1) ?x1043) (* 3 ?x1110) (* (- 1) ?x1126) (* (- 3) ?x1134) (* 3 ?x1207))))
 (let (($x341 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x303 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x255 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x251 (= ?x255 4)))
 (let (($x167 (= (+ m (* (- 6) n)) 6)))
 (and $x167 $x251 $x303 $x341 (not (= ?x287 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x322 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x349 (+ 6 m)))
 (let ((?x352 (+ 1 n)))
 (let ((?x624 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x590 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1043 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x827 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x797 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x792 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1110 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1126 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1134 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x368 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x617 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1207 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x767 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x468 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x729 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1022 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x581 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1031 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x668 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x461 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x638 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x479 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x422 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x138 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x225 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x181 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x272 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x336 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x558 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x561 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x666 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x675 (+ ?x666 ?x561 (* (- 1) ?x558) ?x336 (* (- 1) ?x272) ?x299 (* (- 1) ?x181) (* (- 1) ?x225) (* (- 1) ?x138) (* (- 1) ?x422) (* (- 3) ?x479) (* 3 ?x638) (* (- 3) ?x461) ?x668 (* 3 ?x1031) (* (- 1) ?x581) (* (- 3) ?x1022) (* (- 1) ?x729) ?x468 (* (- 3) ?x767) (* (- 3) ?x1207) (* 3 ?x617) (* (- 3) ?x368) (* 3 ?x1134) ?x1126 (* (- 3) ?x1110) (* 3 ?x792) (* (- 3) ?x797) (* 3 ?x827) ?x1043 (* 3 ?x590) (* 3 ?x624))))
 (let (($x943 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x607 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x209 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x167 (= (+ m (* (- 6) n)) 6)))
 (and $x167 (= ?x209 (- 4)) $x607 $x943 (not (= ?x675 0)))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x927 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x349 (+ 6 m)))
 (let ((?x352 (+ 1 n)))
 (let ((?x1207 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1134 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1126 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1110 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1043 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1031 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1022 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x827 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x797 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x792 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x767 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x729 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x668 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x666 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x638 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x624 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x617 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x590 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x581 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x561 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x558 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x479 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x468 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x461 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x422 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x368 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x336 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x272 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x225 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x181 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x138 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x287 (+ ?x138 ?x181 ?x225 ?x272 (* (- 1) ?x299) (* (- 1) ?x336) (* 3 ?x368) ?x422 (* 3 ?x461) (* (- 1) ?x468) (* 3 ?x479) ?x558 (* (- 1) ?x561) ?x581 (* (- 3) ?x590) (* (- 3) ?x617) (* (- 3) ?x624) (* (- 3) ?x638) (* (- 1) ?x666) (* (- 1) ?x668) ?x729 (* 3 ?x767) (* (- 3) ?x792) (* 3 ?x797) (* (- 3) ?x827) (* 3 ?x1022) (* (- 3) ?x1031) (* (- 1) ?x1043) (* 3 ?x1110) (* (- 1) ?x1126) (* (- 3) ?x1134) (* 3 ?x1207))))
 (let (($x341 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x303 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x255 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x251 (= ?x255 4)))
 (let (($x167 (= (+ m (* (- 6) n)) 6)))
 (let (($x235 (and $x167 $x251 $x303 $x341 (not (= ?x287 0)))))
 (let ((?x675 (+ ?x666 ?x561 (* (- 1) ?x558) ?x336 (* (- 1) ?x272) ?x299 (* (- 1) ?x181) (* (- 1) ?x225) (* (- 1) ?x138) (* (- 1) ?x422) (* (- 3) ?x479) (* 3 ?x638) (* (- 3) ?x461) ?x668 (* 3 ?x1031) (* (- 1) ?x581) (* (- 3) ?x1022) (* (- 1) ?x729) ?x468 (* (- 3) ?x767) (* (- 3) ?x1207) (* 3 ?x617) (* (- 3) ?x368) (* 3 ?x1134) ?x1126 (* (- 3) ?x1110) (* 3 ?x792) (* (- 3) ?x797) (* 3 ?x827) ?x1043 (* 3 ?x590) (* 3 ?x624))))
 (let (($x943 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x607 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x209 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x667 (and $x167 (= ?x209 (- 4)) $x607 $x943 (not (= ?x675 0)))))
 (rewrite (= $x667 $x235)))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x134 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x128 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x127 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x126 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x125 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x123 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x121 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x119 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x117 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x116 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x114 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x112 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x109 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x108 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x106 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x102 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x101 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x100 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x98 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x97 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x95 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x93 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x87 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x86 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x85 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x84 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x83 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x81 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x79 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x77 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x75 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x73 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x72 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x89 (- (- (+ (- (+ (- (+ ?x72 ?x73) ?x75) ?x77) ?x79) ?x81) ?x83) ?x84)))
 (let ((?x103 (- (+ (- (+ (- (- (- ?x89 ?x85) ?x86) ?x87) ?x93) ?x95) ?x97 ?x98) ?x100)))
 (let ((?x115 (- (+ (- (- (+ (- (- ?x103 ?x101) ?x102) ?x106) ?x108) ?x109) ?x112) ?x114)))
 (let ((?x129 (+ (- (+ (- (+ ?x115 ?x116 ?x117) ?x119) ?x121) ?x123) ?x125 ?x126 ?x127 ?x128)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x129 0))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x562 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x349 (+ 6 m)))
 (let ((?x352 (+ 1 n)))
 (let ((?x624 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x590 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1043 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x827 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x797 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x792 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1110 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1126 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1134 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x368 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x617 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1207 (* ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x767 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x468 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x729 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1022 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x581 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x1031 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x668 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x461 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x638 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x479 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x422 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x138 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x225 (* ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x181 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x272 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x336 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x558 (* ?x352 ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x561 (* ?x352 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x666 (* ?x352 ?x352 ?x352 ?x352 ?x349 ?x349 ?x349 ?x349 ?x349 ?x349 ?x69 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x675 (+ ?x666 ?x561 (* (- 1) ?x558) ?x336 (* (- 1) ?x272) ?x299 (* (- 1) ?x181) (* (- 1) ?x225) (* (- 1) ?x138) (* (- 1) ?x422) (* (- 3) ?x479) (* 3 ?x638) (* (- 3) ?x461) ?x668 (* 3 ?x1031) (* (- 1) ?x581) (* (- 3) ?x1022) (* (- 1) ?x729) ?x468 (* (- 3) ?x767) (* (- 3) ?x1207) (* 3 ?x617) (* (- 3) ?x368) (* 3 ?x1134) ?x1126 (* (- 3) ?x1110) (* 3 ?x792) (* (- 3) ?x797) (* 3 ?x827) ?x1043 (* 3 ?x590) (* 3 ?x624))))
 (let (($x943 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x607 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x209 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x167 (= (+ m (* (- 6) n)) 6)))
 (let (($x667 (and $x167 (= ?x209 (- 4)) $x607 $x943 (not (= ?x675 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x128 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x127 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x126 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x125 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x123 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x121 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x119 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x117 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x116 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x114 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x112 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x109 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x108 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x106 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x102 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x101 (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x100 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x98 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x97 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x95 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x93 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x87 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x86 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x85 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x84 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x83 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x81 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x79 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x77 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x75 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x73 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x72 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x89 (- (- (+ (- (+ (- (+ ?x72 ?x73) ?x75) ?x77) ?x79) ?x81) ?x83) ?x84)))
 (let ((?x103 (- (+ (- (+ (- (- (- ?x89 ?x85) ?x86) ?x87) ?x93) ?x95) ?x97 ?x98) ?x100)))
 (let ((?x115 (- (+ (- (- (+ (- (- ?x103 ?x101) ?x102) ?x106) ?x108) ?x109) ?x112) ?x114)))
 (let ((?x129 (+ (- (+ (- (+ ?x115 ?x116 ?x117) ?x119) ?x121) ?x123) ?x125 ?x126 ?x127 ?x128)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x133 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x129 0))))))
 (rewrite (= $x133 $x667)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x135 (asserted $x134)))
 (let ((@x1013 (mp (mp @x135 (quant-intro (proof-bind ?x562) (= $x134 $x322)) $x322) (rewrite (= $x322 $x322)) $x322)))
 (let ((@x367 (mp~ (mp @x1013 (quant-intro (proof-bind ?x927) (= $x322 $x929)) $x929) (sk (~ $x929 $x990)) $x990)))
 (let ((@x501 (mp @x367 (rewrite (= $x990 $x564)) $x564)))
 (let ((@x469 (and-elim @x501 $x703)))
 (let ((@x224 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x703) $x451)) @x469 $x451)))
 (let (($x879 (>= ?x256 6)))
 (let ((@x775 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x703) $x879)) @x469 $x879)))
 (let (($x548 (<= ?x492 4)))
 (let ((@x495 (and-elim @x501 $x388)))
 (let ((@x248 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x388) $x548)) @x495 $x548)))
 (let (($x340 (>= ?x492 4)))
 (let ((@x214 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x388) $x340)) @x495 $x340)))
 (let (($x882 (<= ?x986 1)))
 (let ((@x386 (and-elim @x501 $x423)))
 (let ((@x262 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x423) $x882)) @x386 $x882)))
 (let (($x609 (>= ?x986 1)))
 (let ((@x190 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x423) $x609)) @x386 $x609)))
 (let (($x875 (<= ?x813 (- 1))))
 (let ((@x392 (and-elim @x501 $x810)))
 (let ((@x1093 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x810) $x875)) @x392 $x875)))
 (let (($x338 (>= ?x813 (- 1))))
 (let ((@x378 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x810) $x338)) @x392 $x338)))
 (let (($x442 (not (<= ?x544 0))))
 (let (($x993 (>= ?x544 0)))
 (let ((@x807 ((_ th-lemma arith) (hypothesis (not $x993)) @x378 @x1093 @x775 @x224 @x378 @x1093 @x378 @x1093 @x190 @x262 @x378 @x1093 @x190 @x262 @x775 @x224 @x378 @x1093 @x190 @x262 @x214 @x248 false)))
 (let ((@x851 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x694 $x442 (not $x993))) (and-elim @x501 $x941) (or $x442 (not $x993)))))
 ((_ th-lemma arith) (unit-resolution @x851 (lemma @x807 $x993) $x442) @x378 @x1093 @x775 @x224 @x378 @x1093 @x378 @x1093 @x214 @x248 @x378 @x1093 @x378 @x1093 @x214 @x248 @x378 @x1093 @x214 @x248 @x190 @x262 @x214 @x248 @x775 @x224 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        11
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           11
 :arith-gomory-cuts         1
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             330
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    17
 :arith-num-rows            10
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      17
 :arith-tableau-max-columns 64
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              8
 :max-memory                20.44
 :memory                    19.59
 :mk-bool-var               19
 :mk-clause                 16
 :num-allocs                6087462
 :num-checks                1
 :propagations              10
 :rlimit-count              76461
 :time                      0.08
 :total-time                0.10)
