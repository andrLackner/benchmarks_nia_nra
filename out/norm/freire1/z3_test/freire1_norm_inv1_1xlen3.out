unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x1306 (* (- 1) r!1)))
 (let ((?x901 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1382 (* (- 1) ?x36)))
 (let ((?x1360 (* (- 2) x00)))
 (let ((?x593 (+ r00 ?x1360 ?x1382 ?x901 (* 2 x!0) ?x1306)))
 (let (($x1524 (<= ?x593 0)))
 (let (($x912 (= ?x593 0)))
 (let ((?x1351 (* r!1 r!1 r!1)))
 (let ((?x877 (+ x!0 ?x1306)))
 (let ((?x1246 (+ 1 r!1)))
 (let ((?x938 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x503 (+ (* 2 r00) (* (- 4) x00) (* (- 2) ?x36) (* r00 r00 x!0 x!0 x!0) (* (- 6) (* r00 r00 x!0 x!0 r!1 r!1)) (* (- 1) (* ?x1246 ?x1246 ?x1246 ?x1246 ?x877 ?x877 ?x877)) (* 3 (* r00 r00 x!0 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 r!1 r!1 r!1 r!1)) (* (- 2) (* x00 r!1 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 r!1 r!1 r!1)) (* (- 6) (* x00 x!0 x!0 r!1 r!1 r!1)) (* (- 12) (* x00 x!0 x!0 r!1 r!1)) (* 2 (* x00 x!0 x!0 x!0 r!1 r!1)) (* (- 2) (* ?x1246 ?x1246 ?x877 ?x877 ?x877 ?x877)) (* (- 10) (* x00 r!1)) (* (- 8) (* x00 r!1 r!1)) (* (- 4) (* r00 r00 r!1 r!1)) (* (- 3) (* r00 r00 x!0 x!0 r!1 r!1 r!1)) (* (- 6) (* x00 x!0 x!0 r!1)) (* 2 (* r00 r00 x!0 x!0 x!0 r!1)) (* 2 (* x00 x!0 x!0 x!0)) (* 4 (* x00 x!0 x!0 x!0 r!1)) (* (- 5) (* r00 r00 r!1)) (* (- 2) (* r00 r00 r!1 r!1 r!1)) (* 6 (* r00 r00 x!0 r!1 r!1 r!1)) (* (- 3) ?x901) ?x938 (* r00 r!1 r!1 r!1 r!1 r!1) (* 5 (* r00 r!1)) (* (- 3) (* r00 x!0 r!1 r!1)) (* (- 6) (* r00 x!0 r!1 r!1 r!1)) (* (- 3) (* r00 r00 x!0 x!0 r!1)) (* 3 (* r00 x!0 x!0 r!1 r!1 r!1)) (* (- 1) (* r00 x!0 x!0 x!0)) (* (- 2) (* r00 x!0 x!0 x!0 r!1)) (* 10 (* x!0 r!1)) (* 8 (* x!0 r!1 r!1)) (* 2 (* x!0 r!1 r!1 r!1)) (* (- 2) (* r00 r00 r!1 r!1 r!1 r!1)) (* (- 1) (* r00 r00 r!1 r!1 r!1 r!1 r!1)) (* 3 (* r00 r00 x!0 r!1 r!1)) (* (- 1) (* r00 x!0 x!0 x!0 r!1 r!1)) (* 4 x!0) (* (- 2) r!1) (* 6 (* x00 x!0 r!1 r!1)) (* 12 (* x00 x!0 r!1 r!1 r!1)) (* ?x1246 ?x1246 ?x1246 ?x877 ?x877 ?x877) ?x1351 (* 3 (* r!1 r!1 r!1 r!1)) (* (- 3) (* r00 x!0 r!1 r!1 r!1 r!1)) (* r00 r00 x!0 x!0 x!0 r!1 r!1) (* 3 (* r00 x!0 x!0 r!1)) (* 2 (* r00 r!1 r!1 r!1 r!1)) (* 6 (* x00 x!0 r!1 r!1 r!1 r!1)) (* 6 (* r00 x!0 x!0 r!1 r!1)) (* 2 (* r00 r!1 r!1 r!1)) (* 4 (* r00 r!1 r!1)))))
 (let (($x1332 (= ?x503 0)))
 (let (($x1330 (not $x1332)))
 (let (($x872 (and $x912 $x1330)))
 (let ((?x1305 (+ ?x1306 x!0)))
 (let ((?x1828 (* 2 ?x36)))
 (let ((?x1832 (* 4 x00)))
 (let ((?x850 (* (- 2) r00)))
 (let ((?x866 (+ (* 2 r!1) (* (- 4) x!0) ?x850 (* 3 ?x901) ?x1832 ?x1828 (* (- 5) (* r!1 r00)) (* (- 4) (* r!1 r!1 r00)) (* (- 2) (* r!1 r!1 r!1 r00)) (* (- 2) (* r!1 r!1 r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* 6 (* r!1 r!1 r!1 x!0 r00)) (* 2 (* ?x1246 ?x1246 ?x1305 ?x1305 ?x1305 ?x1305)) (* 3 (* r!1 r!1 r!1 r!1 x!0 r00)) (* (- 3) (* r!1 x!0 x!0 r00)) (* (- 6) (* r!1 r!1 x!0 x!0 r00)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0 r00)) (* x!0 x!0 x!0 r00) (* 2 (* r!1 x!0 x!0 x!0 r00)) (* r!1 r!1 x!0 x!0 x!0 r00) (* (- 10) (* r!1 x!0)) (* (- 8) (* r!1 r!1 x!0)) (* (- 2) (* r!1 r!1 r!1 x!0)) (* (- 1) ?x1351) (* (- 3) (* r!1 r!1 r!1 r!1)) (* 2 (* r!1 r!1 r!1 r00 r00)) (* 2 (* r!1 r!1 r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r!1 r!1 r00 r00) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 x!0 r00 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* 3 (* r!1 x!0 x!0 r00 r00)) (* 6 (* r!1 r!1 x!0 x!0 r00 r00)) (* 3 (* r!1 r!1 r!1 x!0 x!0 r00 r00)) (* (- 1) (* x!0 x!0 x!0 r00 r00)) (* (- 2) (* r!1 x!0 x!0 x!0 r00 r00)) (* (- 1) (* r!1 r!1 x!0 x!0 x!0 r00 r00)) (* (- 1) (* ?x1246 ?x1246 ?x1246 ?x1305 ?x1305 ?x1305)) (* (- 1) ?x938) (* ?x1246 ?x1246 ?x1246 ?x1246 ?x1305 ?x1305 ?x1305) (* 4 (* r!1 r!1 r00 r00)) (* 5 (* r!1 r00 r00)) (* (- 2) (* x!0 x!0 x!0 x00)) (* (- 4) (* r!1 x!0 x!0 x!0 x00)) (* (- 2) (* r!1 r!1 x!0 x!0 x!0 x00)) (* 6 (* r!1 x!0 x!0 x00)) (* (- 6) (* r!1 r!1 r!1 r!1 x!0 x00)) (* (- 12) (* r!1 r!1 r!1 x!0 x00)) (* (- 6) (* r!1 r!1 x!0 x00)) (* 2 (* r!1 r!1 r!1 r!1 r!1 x00)) (* 4 (* r!1 r!1 r!1 r!1 x00)) (* 4 (* r!1 r!1 r!1 x00)) (* 12 (* r!1 r!1 x!0 x!0 x00)) (* 6 (* r!1 r!1 r!1 x!0 x!0 x00)) (* 10 (* r!1 x00)) (* 8 (* r!1 r!1 x00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x132 (* (- 1) r00)))
 (let (($x909 (and (= (+ r!1 (* (- 2) x!0) ?x132 (* (- 1) ?x901) ?x35 ?x36) 0) (not (= ?x866 0)))))
 (let (($x1370 (exists ((r Int) (x Int) )(! (let ((?x1740 (* 6 (* r r r x x x00))))
 (let ((?x1739 (* 12 (* r r x x x00))))
 (let ((?x1831 (* 4 (* r r r x00))))
 (let ((?x1737 (* 4 (* r r r r x00))))
 (let ((?x1637 (* 2 (* r r r r r x00))))
 (let ((?x1736 (* (- 6) (* r r x x00))))
 (let ((?x1735 (* (- 12) (* r r r x x00))))
 (let ((?x1733 (* (- 6) (* r r r r x x00))))
 (let ((?x1732 (* 6 (* r x x x00))))
 (let ((?x1726 (* (- 2) (* r r x x x x00))))
 (let ((?x1741 (* (- 4) (* r x x x x00))))
 (let ((?x1718 (* (- 2) (* x x x x00))))
 (let ((?x1830 (* 5 (* r r00 r00))))
 (let ((?x1829 (* 4 (* r r r00 r00))))
 (let ((?x80 (* (- 1) r)))
 (let ((?x167 (+ ?x80 x)))
 (let ((?x140 (+ 1 r)))
 (let ((?x1397 (* ?x140 ?x140 ?x140 ?x140 ?x167 ?x167 ?x167)))
 (let ((?x1364 (* (- 1) (* r r r r r))))
 (let ((?x1304 (* (- 1) (* ?x140 ?x140 ?x140 ?x167 ?x167 ?x167))))
 (let ((?x1155 (* (- 1) (* r r x x x r00 r00))))
 (let ((?x1184 (* (- 2) (* r x x x r00 r00))))
 (let ((?x1153 (* (- 1) (* x x x r00 r00))))
 (let ((?x1181 (* 3 (* r r r x x r00 r00))))
 (let ((?x1178 (* 6 (* r r x x r00 r00))))
 (let ((?x1175 (* 3 (* r x x r00 r00))))
 (let ((?x1172 (* (- 3) (* r r r r x r00 r00))))
 (let ((?x1169 (* (- 6) (* r r r x r00 r00))))
 (let ((?x1166 (* (- 3) (* r r x r00 r00))))
 (let ((?x930 (* r r r r r r00 r00)))
 (let ((?x1161 (* 2 (* r r r r r00 r00))))
 (let ((?x1433 (* 2 (* r r r r00 r00))))
 (let ((?x1372 (* (- 3) (* r r r r))))
 (let ((?x1376 (* (- 1) (* r r r))))
 (let ((?x578 (* (- 2) (* r r r x))))
 (let ((?x1235 (* (- 8) (* r r x))))
 (let ((?x1233 (* (- 10) (* r x))))
 (let ((?x424 (* r r x x x r00)))
 (let ((?x441 (* 2 (* r x x x r00))))
 (let ((?x413 (* x x x r00)))
 (let ((?x440 (* (- 3) (* r r r x x r00))))
 (let ((?x439 (* (- 6) (* r r x x r00))))
 (let ((?x437 (* (- 3) (* r x x r00))))
 (let ((?x435 (* 3 (* r r r r x r00))))
 (let ((?x434 (* 6 (* r r r x r00))))
 (let ((?x432 (* 3 (* r r x r00))))
 (let ((?x243 (* (- 1) (* r r r r r r00))))
 (let ((?x430 (* (- 2) (* r r r r r00))))
 (let ((?x854 (* (- 2) (* r r r r00))))
 (let ((?x853 (* (- 4) (* r r r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x1828 (* 2 ?x36)))
 (let ((?x1832 (* 4 x00)))
 (let ((?x30 (* r r)))
 (let ((?x771 (* 3 ?x30)))
 (let ((?x850 (* (- 2) r00)))
 (let ((?x1229 (* (- 4) x)))
 (let ((?x540 (* 2 r)))
 (let ((?x1859 (+ ?x540 ?x1229 ?x850 ?x771 ?x1832 ?x1828 (* (- 5) (* r r00)) ?x853 ?x854 ?x430 ?x243 ?x432 ?x434 (* 2 (* ?x140 ?x140 ?x167 ?x167 ?x167 ?x167)) ?x435 ?x437 ?x439 ?x440 ?x413 ?x441 ?x424 ?x1233 ?x1235 ?x578 ?x1376 ?x1372 ?x1433 ?x1161 ?x930 ?x1166 ?x1169 ?x1172 ?x1175 ?x1178 ?x1181 ?x1153 ?x1184 ?x1155 ?x1304 ?x1364 ?x1397 ?x1829 ?x1830 ?x1718 ?x1741 ?x1726 ?x1732 ?x1733 ?x1735 ?x1736 ?x1637 ?x1737 ?x1831 ?x1739 ?x1740 (* 10 (* r x00)) (* 8 (* r r x00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x132 (* (- 1) r00)))
 (let (($x135 (= (+ r (* (- 2) x) ?x132 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x135 (not (= ?x1859 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x922 (exists ((r Int) (x Int) )(! (let ((?x80 (* (- 1) r)))
 (let ((?x1384 (+ x ?x80)))
 (let ((?x140 (+ 1 r)))
 (let ((?x1463 (+ (* (- 1) (* r00 ?x140 ?x140)) (* r00 ?x140 ?x140 ?x1384 ?x1384 ?x1384) (* (- 2) (* ?x140 ?x140 ?x140 ?x1384)) (* 2 (* ?x140 ?x140 ?x1384 ?x1384 ?x1384 ?x1384)) (* ?x140 ?x140 ?x140) (* (- 1) (* r00 ?x140 ?x140 ?x140)) (* (- 1) (* r00 r00 ?x140 ?x140 ?x1384 ?x1384 ?x1384)) (* (- 2) (* ?x140 ?x140 ?x1384)) (* (- 1) (* ?x140 ?x140 ?x140 ?x1384 ?x1384 ?x1384)) (* (- 1) (* ?x140 ?x140 ?x140 ?x140 ?x140)) (* ?x140 ?x140 ?x140 ?x140 ?x1384 ?x1384 ?x1384) (* r00 r00 ?x140 ?x140 ?x140) (* (- 2) (* x00 ?x140 ?x140 ?x1384 ?x1384 ?x1384)) (* 2 (* x00 ?x140 ?x140 ?x140)) (* 2 (* x00 ?x140 ?x140)) (* r00 r00 ?x140 ?x140))))
 (let ((?x36 (* r00 r00)))
 (let ((?x1382 (* (- 1) ?x36)))
 (let ((?x1360 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x80 r00 ?x30 ?x32 ?x1360 ?x1382) 0) (not (= ?x1463 0)))))))))))) :qid k!26))
 ))
 (let ((?x125 (lambda ((r Int) (x Int) )(let ((?x1740 (* 6 (* r r r x x x00))))
 (let ((?x1739 (* 12 (* r r x x x00))))
 (let ((?x1831 (* 4 (* r r r x00))))
 (let ((?x1737 (* 4 (* r r r r x00))))
 (let ((?x1637 (* 2 (* r r r r r x00))))
 (let ((?x1736 (* (- 6) (* r r x x00))))
 (let ((?x1735 (* (- 12) (* r r r x x00))))
 (let ((?x1733 (* (- 6) (* r r r r x x00))))
 (let ((?x1732 (* 6 (* r x x x00))))
 (let ((?x1726 (* (- 2) (* r r x x x x00))))
 (let ((?x1741 (* (- 4) (* r x x x x00))))
 (let ((?x1718 (* (- 2) (* x x x x00))))
 (let ((?x1830 (* 5 (* r r00 r00))))
 (let ((?x1829 (* 4 (* r r r00 r00))))
 (let ((?x80 (* (- 1) r)))
 (let ((?x167 (+ ?x80 x)))
 (let ((?x140 (+ 1 r)))
 (let ((?x1397 (* ?x140 ?x140 ?x140 ?x140 ?x167 ?x167 ?x167)))
 (let ((?x1364 (* (- 1) (* r r r r r))))
 (let ((?x1304 (* (- 1) (* ?x140 ?x140 ?x140 ?x167 ?x167 ?x167))))
 (let ((?x1155 (* (- 1) (* r r x x x r00 r00))))
 (let ((?x1184 (* (- 2) (* r x x x r00 r00))))
 (let ((?x1153 (* (- 1) (* x x x r00 r00))))
 (let ((?x1181 (* 3 (* r r r x x r00 r00))))
 (let ((?x1178 (* 6 (* r r x x r00 r00))))
 (let ((?x1175 (* 3 (* r x x r00 r00))))
 (let ((?x1172 (* (- 3) (* r r r r x r00 r00))))
 (let ((?x1169 (* (- 6) (* r r r x r00 r00))))
 (let ((?x1166 (* (- 3) (* r r x r00 r00))))
 (let ((?x930 (* r r r r r r00 r00)))
 (let ((?x1161 (* 2 (* r r r r r00 r00))))
 (let ((?x1433 (* 2 (* r r r r00 r00))))
 (let ((?x1372 (* (- 3) (* r r r r))))
 (let ((?x1376 (* (- 1) (* r r r))))
 (let ((?x578 (* (- 2) (* r r r x))))
 (let ((?x1235 (* (- 8) (* r r x))))
 (let ((?x1233 (* (- 10) (* r x))))
 (let ((?x424 (* r r x x x r00)))
 (let ((?x441 (* 2 (* r x x x r00))))
 (let ((?x413 (* x x x r00)))
 (let ((?x440 (* (- 3) (* r r r x x r00))))
 (let ((?x439 (* (- 6) (* r r x x r00))))
 (let ((?x437 (* (- 3) (* r x x r00))))
 (let ((?x435 (* 3 (* r r r r x r00))))
 (let ((?x434 (* 6 (* r r r x r00))))
 (let ((?x432 (* 3 (* r r x r00))))
 (let ((?x243 (* (- 1) (* r r r r r r00))))
 (let ((?x430 (* (- 2) (* r r r r r00))))
 (let ((?x854 (* (- 2) (* r r r r00))))
 (let ((?x853 (* (- 4) (* r r r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x1828 (* 2 ?x36)))
 (let ((?x1832 (* 4 x00)))
 (let ((?x30 (* r r)))
 (let ((?x771 (* 3 ?x30)))
 (let ((?x850 (* (- 2) r00)))
 (let ((?x1229 (* (- 4) x)))
 (let ((?x540 (* 2 r)))
 (let ((?x1859 (+ ?x540 ?x1229 ?x850 ?x771 ?x1832 ?x1828 (* (- 5) (* r r00)) ?x853 ?x854 ?x430 ?x243 ?x432 ?x434 (* 2 (* ?x140 ?x140 ?x167 ?x167 ?x167 ?x167)) ?x435 ?x437 ?x439 ?x440 ?x413 ?x441 ?x424 ?x1233 ?x1235 ?x578 ?x1376 ?x1372 ?x1433 ?x1161 ?x930 ?x1166 ?x1169 ?x1172 ?x1175 ?x1178 ?x1181 ?x1153 ?x1184 ?x1155 ?x1304 ?x1364 ?x1397 ?x1829 ?x1830 ?x1718 ?x1741 ?x1726 ?x1732 ?x1733 ?x1735 ?x1736 ?x1637 ?x1737 ?x1831 ?x1739 ?x1740 (* 10 (* r x00)) (* 8 (* r r x00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x132 (* (- 1) r00)))
 (let (($x135 (= (+ r (* (- 2) x) ?x132 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x1865 (and $x135 (not (= ?x1859 0)))))
 (let ((?x394 (* (- 2) (* x00 ?x140 ?x140 (+ x ?x80) (+ x ?x80) (+ x ?x80)))))
 (let ((?x1269 (* (- 1) (* ?x140 ?x140 ?x140 (+ x ?x80) (+ x ?x80) (+ x ?x80)))))
 (let ((?x1384 (+ x ?x80)))
 (let ((?x1463 (+ (* (- 1) (* r00 ?x140 ?x140)) (* r00 ?x140 ?x140 ?x1384 ?x1384 ?x1384) (* (- 2) (* ?x140 ?x140 ?x140 ?x1384)) (* 2 (* ?x140 ?x140 ?x1384 ?x1384 ?x1384 ?x1384)) (* ?x140 ?x140 ?x140) (* (- 1) (* r00 ?x140 ?x140 ?x140)) (* (- 1) (* r00 r00 ?x140 ?x140 ?x1384 ?x1384 ?x1384)) (* (- 2) (* ?x140 ?x140 ?x1384)) ?x1269 (* (- 1) (* ?x140 ?x140 ?x140 ?x140 ?x140)) (* ?x140 ?x140 ?x140 ?x140 ?x1384 ?x1384 ?x1384) (* r00 r00 ?x140 ?x140 ?x140) ?x394 (* 2 (* x00 ?x140 ?x140 ?x140)) (* 2 (* x00 ?x140 ?x140)) (* r00 r00 ?x140 ?x140))))
 (let (($x1368 (= (+ ?x80 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x944 (and $x1368 (not (= ?x1463 0)))))
 (rewrite (= $x944 $x1865))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x75 (exists ((r Int) (x Int) )(! (let ((?x43 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (+ (* (- 1) ?x41 ?x41 r00) (* ?x41 ?x41 r00 ?x43 ?x43 ?x43))))
 (let ((?x50 (+ (- ?x45 (* 2 ?x41 ?x41 ?x41 ?x43)) (* 2 ?x41 ?x41 ?x43 ?x43 ?x43 ?x43) (* ?x41 ?x41 ?x41))))
 (let ((?x57 (- (- ?x50 (* ?x41 ?x41 ?x41 r00)) (* ?x41 ?x41 r00 r00 ?x43 ?x43 ?x43))))
 (let ((?x59 (- (- ?x57 (* 2 ?x41 ?x41 ?x43)) (* ?x41 ?x41 ?x41 ?x43 ?x43 ?x43))))
 (let ((?x64 (+ (- ?x59 (* ?x41 ?x41 ?x41 ?x41 ?x41)) (* 0 ?x41 ?x41 ?x41 ?x41) (* ?x41 ?x41 ?x41 ?x41 ?x43 ?x43 ?x43) (* ?x41 ?x41 ?x41 r00 r00))))
 (let ((?x70 (+ (- ?x64 (* 2 ?x41 ?x41 ?x43 ?x43 ?x43 x00)) (* 2 ?x41 ?x41 ?x41 x00) (* 2 ?x41 ?x41 x00) (* ?x41 ?x41 r00 r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x70 0))))))))))))))) :qid k!26))
 ))
 (let ((?x1236 (lambda ((r Int) (x Int) )(let ((?x80 (* (- 1) r)))
 (let ((?x1384 (+ x ?x80)))
 (let ((?x140 (+ 1 r)))
 (let ((?x1463 (+ (* (- 1) (* r00 ?x140 ?x140)) (* r00 ?x140 ?x140 ?x1384 ?x1384 ?x1384) (* (- 2) (* ?x140 ?x140 ?x140 ?x1384)) (* 2 (* ?x140 ?x140 ?x1384 ?x1384 ?x1384 ?x1384)) (* ?x140 ?x140 ?x140) (* (- 1) (* r00 ?x140 ?x140 ?x140)) (* (- 1) (* r00 r00 ?x140 ?x140 ?x1384 ?x1384 ?x1384)) (* (- 2) (* ?x140 ?x140 ?x1384)) (* (- 1) (* ?x140 ?x140 ?x140 ?x1384 ?x1384 ?x1384)) (* (- 1) (* ?x140 ?x140 ?x140 ?x140 ?x140)) (* ?x140 ?x140 ?x140 ?x140 ?x1384 ?x1384 ?x1384) (* r00 r00 ?x140 ?x140 ?x140) (* (- 2) (* x00 ?x140 ?x140 ?x1384 ?x1384 ?x1384)) (* 2 (* x00 ?x140 ?x140 ?x140)) (* 2 (* x00 ?x140 ?x140)) (* r00 r00 ?x140 ?x140))))
 (let ((?x36 (* r00 r00)))
 (let ((?x1382 (* (- 1) ?x36)))
 (let ((?x1360 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x944 (and (= (+ ?x80 r00 ?x30 ?x32 ?x1360 ?x1382) 0) (not (= ?x1463 0)))))
 (let ((?x43 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (+ (* (- 1) ?x41 ?x41 r00) (* ?x41 ?x41 r00 ?x43 ?x43 ?x43))))
 (let ((?x50 (+ (- ?x45 (* 2 ?x41 ?x41 ?x41 ?x43)) (* 2 ?x41 ?x41 ?x43 ?x43 ?x43 ?x43) (* ?x41 ?x41 ?x41))))
 (let ((?x57 (- (- ?x50 (* ?x41 ?x41 ?x41 r00)) (* ?x41 ?x41 r00 r00 ?x43 ?x43 ?x43))))
 (let ((?x59 (- (- ?x57 (* 2 ?x41 ?x41 ?x43)) (* ?x41 ?x41 ?x41 ?x43 ?x43 ?x43))))
 (let ((?x64 (+ (- ?x59 (* ?x41 ?x41 ?x41 ?x41 ?x41)) (* 0 ?x41 ?x41 ?x41 ?x41) (* ?x41 ?x41 ?x41 ?x41 ?x43 ?x43 ?x43) (* ?x41 ?x41 ?x41 r00 r00))))
 (let ((?x70 (+ (- ?x64 (* 2 ?x41 ?x41 ?x43 ?x43 ?x43 x00)) (* 2 ?x41 ?x41 ?x41 x00) (* 2 ?x41 ?x41 x00) (* ?x41 ?x41 r00 r00))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x74 (and (= ?x38 0) (or (not (= ?x70 0))))))
 (rewrite (= $x74 $x944)))))))))))))))))))))))
 ))
 (let ((@x76 (asserted $x75)))
 (let ((@x464 (mp (mp @x76 (quant-intro (proof-bind ?x1236) (= $x75 $x922)) $x922) (rewrite (= $x922 $x922)) $x922)))
 (let ((@x907 (mp~ (mp @x464 (quant-intro (proof-bind ?x125) (= $x922 $x1370)) $x1370) (sk (~ $x1370 $x909)) $x909)))
 (let ((@x1671 (mp @x907 (rewrite (= $x909 $x872)) $x872)))
 (let ((@x414 (and-elim @x1671 $x912)))
 (let ((@x960 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x912) $x1524)) @x414 $x1524)))
 (let (($x1116 (>= ?x593 0)))
 (let ((@x957 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x912) $x1116)) @x414 $x1116)))
 (let (($x1129 (not (>= ?x503 0))))
 (let (($x1115 (<= ?x503 0)))
 (let ((@x1407 (lemma ((_ th-lemma arith) (hypothesis (not $x1115)) @x957 @x960 @x957 @x960 false) $x1115)))
 (let ((@x1516 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1332 (not $x1115) $x1129)) (and-elim @x1671 $x1330) (or (not $x1115) $x1129))))
 ((_ th-lemma arith) (unit-resolution @x1516 @x1407 $x1129) @x957 @x960 @x957 @x960 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             458
 :arith-nonlinear-bounds    14
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 80
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.78
 :memory                    19.25
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                593353
 :num-checks                1
 :propagations              4
 :rlimit-count              8551
 :time                      0.01
 :total-time                0.02)
