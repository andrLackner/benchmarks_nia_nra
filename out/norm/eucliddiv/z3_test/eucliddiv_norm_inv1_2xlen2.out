unsat
((set-logic NIA)
(proof
(let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x48 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x48)))
 (let ((?x51 (- ?x49 ?x50)))
 (let ((?x52 (- ?x51 ?x47)))
 (let ((?x53 (+ ?x52 ?x45 ?x50)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x56))))))))))))))))))) :qid k!29))
 ))
 (let (($x107 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x108 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x48 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x48)))
 (let ((?x51 (- ?x49 ?x50)))
 (let ((?x52 (- ?x51 ?x47)))
 (let ((?x53 (+ ?x52 ?x45 ?x50)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x57 (and $x33 $x41 $x56)))
 (let (($x445 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x346 (= (+ (* (- 1) y00) y) 0)))
 (let (($x99 (and $x346 $x445 false)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x71 (+ r ?x63)))
 (let ((?x65 (+ 1 q)))
 (let ((?x558 (* y00 ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x444 (* y00 y00 y00 y00 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x66 (* (- 1) ?x558)))
 (let ((?x223 (* (- 1) ?x444)))
 (let ((?x262 (+ ?x223 ?x66)))
 (let ((?x183 (+ ?x262 ?x444 ?x558)))
 (let ((@x300 (rewrite (= (* ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 y00) ?x558))))
 (let ((@x165 (rewrite (= ?x43 ?x71))))
 (let ((@x433 (rewrite (= ?x42 ?x65))))
 (let ((@x557 (monotonicity @x433 @x433 @x433 @x433 @x433 @x165 @x165 @x165 @x165 (= ?x50 (* ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 y00)))))
 (let ((@x296 (trans @x557 @x300 (= ?x50 ?x558))))
 (let ((?x380 (* ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 y00 y00 y00 y00)))
 (let ((@x214 (trans (monotonicity @x433 @x433 @x433 @x165 @x165 @x165 @x165 (= ?x45 ?x380)) (rewrite (= ?x380 ?x444)) (= ?x45 ?x444))))
 (let ((?x506 (* y00 y00 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71)))
 (let ((?x486 (+ ?x223 ?x506 ?x66)))
 (let ((?x171 (+ ?x486 (* (- 1) ?x506))))
 (let ((@x505 (monotonicity @x433 @x433 @x433 @x165 @x165 @x165 (= ?x47 (* ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 y00 y00)))))
 (let ((@x510 (trans @x505 (rewrite (= (* ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 y00 y00) ?x506)) (= ?x47 ?x506))))
 (let ((?x532 (+ ?x223 ?x506)))
 (let ((?x328 (* y00 y00 y00 ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x443 (* (- 1) ?x328)))
 (let ((?x498 (+ ?x443 ?x223)))
 (let ((?x523 (+ ?x498 ?x506 ?x328)))
 (let ((?x453 (* ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 ?x71 y00 y00 y00)))
 (let ((@x512 (monotonicity @x433 @x433 @x433 @x433 @x433 @x165 @x165 @x165 @x165 @x165 (= ?x48 ?x453))))
 (let ((?x436 (* (- 1) ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 ?x71 y00 y00 y00)))
 (let ((@x438 (monotonicity (rewrite (= ?x28 (- 1))) @x433 @x433 @x433 @x433 @x433 @x165 @x165 @x165 @x165 @x165 (= ?x44 ?x436))))
 (let ((@x221 (monotonicity (trans @x438 (rewrite (= ?x436 ?x443)) (= ?x44 ?x443)) @x214 (= ?x46 (- ?x443 ?x444)))))
 (let ((@x529 (monotonicity (trans @x221 (rewrite (= (- ?x443 ?x444) ?x498)) (= ?x46 ?x498)) @x510 (trans @x512 (rewrite (= ?x453 ?x328)) (= ?x48 ?x328)) (= ?x49 ?x523))))
 (let ((@x62 (monotonicity (trans @x529 (rewrite (= ?x523 ?x532)) (= ?x49 ?x532)) @x296 (= ?x51 (- ?x532 ?x558)))))
 (let ((@x485 (trans @x62 (rewrite (= (- ?x532 ?x558) (+ ?x532 ?x66))) (= ?x51 (+ ?x532 ?x66)))))
 (let ((@x162 (monotonicity (trans @x485 (rewrite (= (+ ?x532 ?x66) ?x486)) (= ?x51 ?x486)) @x510 (= ?x52 (- ?x486 ?x506)))))
 (let ((@x176 (trans (trans @x162 (rewrite (= (- ?x486 ?x506) ?x171)) (= ?x52 ?x171)) (rewrite (= ?x171 ?x262)) (= ?x52 ?x262))))
 (let ((@x70 (trans (monotonicity @x176 @x214 @x296 (= ?x53 ?x183)) (rewrite (= ?x183 0)) $x54)))
 (let ((@x378 (trans (monotonicity @x70 (= $x54 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x54 true))))
 (let ((@x88 (trans (monotonicity @x378 (= $x55 (not true))) (rewrite (= (not true) false)) (= $x55 false))))
 (let ((@x96 (trans (monotonicity @x88 (= $x56 (or false))) (rewrite (= (or false) false)) (= $x56 false))))
 (let ((@x102 (monotonicity (rewrite (= $x33 $x346)) (rewrite (= $x41 $x445)) @x96 (= $x57 $x99))))
 (trans @x102 (rewrite (= $x99 false)) (= $x57 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x115 (trans (quant-intro (proof-bind ?x108) (= $x58 $x107)) (elim-unused (= $x107 false)) (= $x58 false))))
 (let ((@x59 (asserted $x58)))
 (mp @x59 @x115 false))))))))

(:max-memory   19.14
 :memory       19.14
 :num-allocs   254876
 :rlimit-count 458
 :time         0.00
 :total-time   0.02)
