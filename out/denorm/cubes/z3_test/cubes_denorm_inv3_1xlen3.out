unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x571 (* (- 1) (* k!2 m!1 m!1 m!1 m!1))))
 (let ((?x557 (* (- 6) (* c!3 m!1 m!1 m!1))))
 (let ((?x354 (* n!0 n!0)))
 (let ((?x353 (* (- 1) ?x354)))
 (let ((?x342 (* (- 6) (* k!2 k!2 k!2 k!2))))
 (let ((?x350 (+ k!2 m!1)))
 (let ((?x351 (+ 6 m!1)))
 (let ((?x352 (+ 1 n!0)))
 (let ((?x345 (* ?x352 ?x352 ?x352 ?x351 ?x351 ?x351 ?x350 ?x350 ?x350)))
 (let ((?x552 (* (- 2) n!0)))
 (let ((?x277 (* (- 1) (* k!2 k!2 k!2 k!2 m!1))))
 (let ((?x255 (* (- 3) (* k!2 k!2 m!1 m!1 m!1))))
 (let ((?x434 (* (- 18) (* k!2 k!2 k!2 m!1))))
 (let ((?x237 (* (- 18) (* k!2 k!2 m!1 m!1))))
 (let ((?x495 (* (- 3) (* k!2 k!2 k!2 m!1 m!1))))
 (let ((?x561 (* (- 1) (* c!3 m!1 m!1 m!1 m!1))))
 (let ((?x109 (* (- 6) (* k!2 m!1 m!1 m!1))))
 (let ((?x229 (+ (- 1) ?x109 ?x561 ?x495 ?x237 ?x434 ?x255 (* (- 1) (* k!2 k!2 k!2 c!3 m!1)) ?x277 (* (- 3) (* k!2 k!2 c!3 m!1 m!1)) ?x552 ?x345 ?x342 ?x353 (* (- 18) (* k!2 c!3 m!1 m!1)) (* (- 3) (* k!2 c!3 m!1 m!1 m!1)) ?x557 ?x571 (* (- 6) (* k!2 k!2 k!2 c!3)) (* (- 18) (* k!2 k!2 c!3 m!1)))))
 (let (($x249 (<= ?x229 0)))
 (let ((?x629 (* (- 1) k!2)))
 (let ((?x453 (+ (* 3 n!0) ?x629 (* 3 ?x354))))
 (let (($x332 (<= ?x453 (- 1))))
 (let (($x496 (= ?x453 (- 1))))
 (let ((?x290 (* (- 3) c!3)))
 (let ((?x291 (* (- 3) k!2)))
 (let ((?x110 (* 2 n!0)))
 (let ((?x115 (* n!0 k!2)))
 (let ((?x382 (* ?x229 (+ 3 ?x115 ?x110 ?x291 ?x290 (* n!0 m!1)))))
 (let (($x493 (= ?x382 0)))
 (let (($x381 (not $x493)))
 (let ((?x631 (+ ?x115 ?x110 ?x629 ?x290)))
 (let (($x632 (= ?x631 (- 1))))
 (let ((?x133 (* k!2 k!2)))
 (let ((?x609 (+ ?x133 (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let ((?x146 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x472 (= ?x146 (- 6))))
 (let (($x349 (and $x472 (= ?x609 (- 4)) $x632 $x496 $x381)))
 (let ((?x319 (+ (- 1) ?x552 ?x353 ?x345 (* (- 1) (* c!3 k!2 k!2 k!2 m!1)) ?x277 (* (- 3) (* c!3 k!2 k!2 m!1 m!1)) ?x495 (* (- 3) (* c!3 k!2 m!1 m!1 m!1)) ?x255 ?x561 ?x571 (* (- 6) (* c!3 k!2 k!2 k!2)) ?x342 (* (- 18) (* c!3 k!2 k!2 m!1)) ?x434 (* (- 18) (* c!3 k!2 m!1 m!1)) ?x237 ?x557 ?x109)))
 (let (($x574 (= (* ?x319 (+ 3 ?x290 ?x291 ?x110 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let ((?x366 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x133) (* 9 (* c!3 n!0)))))
 (let (($x430 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x366 4) (= (+ (* 3 c!3) k!2 ?x552 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x354)) 1) (not $x574))))
 (let (($x487 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x679 (* (- 6) (* k m m m))))
 (let ((?x676 (* (- 6) (* c m m m))))
 (let ((?x673 (* (- 18) (* k k m m))))
 (let ((?x670 (* (- 18) (* c k m m))))
 (let ((?x667 (* (- 18) (* k k k m))))
 (let ((?x664 (* (- 18) (* c k k m))))
 (let ((?x661 (* (- 6) (* k k k k))))
 (let ((?x658 (* (- 6) (* c k k k))))
 (let ((?x634 (* (- 1) (* k m m m m))))
 (let ((?x633 (* (- 1) (* c m m m m))))
 (let ((?x655 (* (- 3) (* k k m m m))))
 (let ((?x652 (* (- 3) (* c k m m m))))
 (let ((?x649 (* (- 3) (* k k k m m))))
 (let ((?x646 (* (- 3) (* c k k m m))))
 (let ((?x628 (* (- 1) (* k k k k m))))
 (let ((?x627 (* (- 1) (* c k k k m))))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x268 (* n n)))
 (let ((?x424 (* (- 1) ?x268)))
 (let ((?x261 (* (- 2) n)))
 (let ((?x391 (+ (- 1) ?x261 ?x424 ?x293 ?x627 ?x628 ?x646 ?x649 ?x652 ?x655 ?x633 ?x634 ?x658 ?x661 ?x664 ?x667 ?x670 ?x673 ?x676 ?x679)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k ?x261 (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x391 ?x408) 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x281 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x681 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let (($x641 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x570 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x570 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x641 (not (= (* ?x217 ?x681) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x344 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x679 (* (- 6) (* k m m m))))
 (let ((?x676 (* (- 6) (* c m m m))))
 (let ((?x673 (* (- 18) (* k k m m))))
 (let ((?x670 (* (- 18) (* c k m m))))
 (let ((?x667 (* (- 18) (* k k k m))))
 (let ((?x664 (* (- 18) (* c k k m))))
 (let ((?x661 (* (- 6) (* k k k k))))
 (let ((?x658 (* (- 6) (* c k k k))))
 (let ((?x634 (* (- 1) (* k m m m m))))
 (let ((?x633 (* (- 1) (* c m m m m))))
 (let ((?x655 (* (- 3) (* k k m m m))))
 (let ((?x652 (* (- 3) (* c k m m m))))
 (let ((?x649 (* (- 3) (* k k k m m))))
 (let ((?x646 (* (- 3) (* c k k m m))))
 (let ((?x628 (* (- 1) (* k k k k m))))
 (let ((?x627 (* (- 1) (* c k k k m))))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x268 (* n n)))
 (let ((?x424 (* (- 1) ?x268)))
 (let ((?x261 (* (- 2) n)))
 (let ((?x391 (+ (- 1) ?x261 ?x424 ?x293 ?x627 ?x628 ?x646 ?x649 ?x652 ?x655 ?x633 ?x634 ?x658 ?x661 ?x664 ?x667 ?x670 ?x673 ?x676 ?x679)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k ?x261 (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x367 (and $x123 $x207 $x259 $x297 (not (= (* ?x391 ?x408) 0)))))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let ((?x231 (* ?x217 (+ 3 ?x220 (* (- 4) k) (* ?x340 ?x71) (* (- 1) m) ?x59))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x570 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x322 (and $x123 (= ?x570 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) (= (+ (* 3 ?x268) (* (- 1) k) (* 3 n)) (- 1)) (not (= ?x231 0)))))
 (rewrite (= $x322 $x367)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x84 (+ (- (* (- 1) ?x72 ?x72) (* (+ c k) ?x71 ?x71 ?x71 ?x80)) (* ?x71 ?x71 ?x71 ?x80 ?x80 ?x80 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x84) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x283 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x681 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let (($x641 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x570 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x322 (and $x123 (= ?x570 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x641 (not (= (* ?x217 ?x681) 0)))))
 (let ((?x72 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x84 (+ (- (* (- 1) ?x72 ?x72) (* (+ c k) ?x71 ?x71 ?x71 ?x80)) (* ?x71 ?x71 ?x71 ?x80 ?x80 ?x80 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x84) 0))))))
 (rewrite (= $x89 $x322))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x579 (mp (mp @x91 (quant-intro (proof-bind ?x283) (= $x90 $x281)) $x281) (rewrite (= $x281 $x281)) $x281)))
 (let ((@x494 (mp~ (mp @x579 (quant-intro (proof-bind ?x344) (= $x281 $x487)) $x487) (sk (~ $x487 $x430)) $x430)))
 (let ((@x156 (mp @x494 (rewrite (= $x430 $x349)) $x349)))
 (let ((@x451 (and-elim @x156 $x496)))
 (let ((@x470 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x496) $x332)) @x451 $x332)))
 (let (($x565 (>= ?x453 (- 1))))
 (let ((@x130 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x496) $x565)) @x451 $x565)))
 (let (($x265 (<= ?x631 (- 1))))
 (let ((@x614 (and-elim @x156 $x632)))
 (let ((@x554 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x632) $x265)) @x614 $x265)))
 (let (($x566 (>= ?x631 (- 1))))
 (let ((@x516 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x632) $x566)) @x614 $x566)))
 (let (($x680 (<= ?x146 (- 6))))
 (let ((@x509 (and-elim @x156 $x472)))
 (let ((@x135 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x472) $x680)) @x509 $x680)))
 (let (($x645 (>= ?x146 (- 6))))
 (let ((@x419 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x472) $x645)) @x509 $x645)))
 (let (($x457 (not $x249)))
 (let ((@x762 (hypothesis $x457)))
 (let (($x120 (not (<= ?x382 0))))
 (let (($x336 (>= ?x382 0)))
 (let (($x387 (>= ?x229 0)))
 (let (($x214 (not $x387)))
 (let (($x273 (= ?x229 0)))
 (let (($x94 (not $x273)))
 (let (($x517 (not $x336)))
 (let ((@x522 (hypothesis $x517)))
 (let ((@x289 ((_ th-lemma arith farkas 1 1 1) @x522 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x94 $x387)) (hypothesis $x273) $x387) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x94 $x249)) (hypothesis $x273) $x249) false)))
 (let ((@x531 (lemma ((_ th-lemma arith) @x522 @x762 @x419 @x135 @x516 @x554 @x130 @x470 false) (or $x249 $x336))))
 (let ((@x103 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x273 $x457 $x214)) (unit-resolution @x531 @x522 $x249) (unit-resolution (lemma @x289 (or $x94 $x336)) @x522 $x94) $x214)))
 (let ((@x125 (lemma ((_ th-lemma arith) @x522 @x103 @x419 @x135 @x516 @x554 @x130 @x470 false) $x336)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x493 $x120 $x517)) (and-elim @x156 $x381) (or $x120 $x517))))
 (let ((@x134 (unit-resolution @x448 @x125 $x120)))
 (let ((@x155 (lemma ((_ th-lemma arith) @x134 @x762 @x419 @x135 @x516 @x554 @x130 @x470 false) $x249)))
 (let ((@x198 ((_ th-lemma arith) @x134 (hypothesis $x214) @x419 @x135 @x516 @x554 @x130 @x470 false)))
 ((_ th-lemma arith farkas 1 1 1) @x134 (lemma @x198 $x387) @x155 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 68
 :arith-assert-diseq        8
 :arith-assert-lower        253
 :arith-assert-upper        263
 :arith-bound-prop          3
 :arith-branch-var          8
 :arith-conflicts           23
 :arith-eq-adapter          12
 :arith-fixed-eqs           63
 :arith-gcd-tests           48
 :arith-gomory-cuts         2
 :arith-grobner             16
 :arith-ineq-splits         8
 :arith-max-min             1843
 :arith-nonlinear-bounds    130
 :arith-nonlinear-horner    152
 :arith-num-rows            15
 :arith-offset-eqs          6
 :arith-patches             15
 :arith-pivots              140
 :arith-pseudo-nonlinear    60
 :arith-row-summations      403
 :arith-tableau-max-columns 61
 :arith-tableau-max-rows    15
 :conflicts                 25
 :decisions                 209
 :del-clause                53
 :final-checks              55
 :max-memory                19.81
 :memory                    19.19
 :minimized-lits            1
 :mk-bool-var               130
 :mk-clause                 88
 :num-allocs                1245854
 :num-checks                1
 :propagations              71
 :rlimit-count              103750
 :time                      0.04
 :total-time                0.05)
