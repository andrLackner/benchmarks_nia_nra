unsat
((set-logic NIA)
(proof
(let (($x93 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x58 (* (- 1) r00)))
 (let ((?x57 (* (- 1) y00)))
 (let (($x83 (not (= (+ r ?x57 ?x58 ?x98 (* y00 (+ 1 q))) 0))))
 (let (($x124 (= (+ r ?x58 ?x98 (* y00 q)) 0)))
 (let ((?x115 (* (- 1) y)))
 (let ((?x128 (+ y00 ?x115)))
 (let (($x125 (= ?x128 0)))
 (and $x125 $x124 $x83)))))))))) :qid k!28))
 ))
 (let (($x95 (exists ((q Int) (r Int) (y Int) )(! false :qid k!28))
 ))
 (let ((@x104 (elim-unused (= $x95 false))))
 (let ((?x151 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x58 (* (- 1) r00)))
 (let ((?x57 (* (- 1) y00)))
 (let (($x83 (not (= (+ r ?x57 ?x58 ?x98 (* y00 (+ 1 q))) 0))))
 (let (($x124 (= (+ r ?x58 ?x98 (* y00 q)) 0)))
 (let ((?x115 (* (- 1) y)))
 (let ((?x128 (+ y00 ?x115)))
 (let (($x125 (= ?x128 0)))
 (let (($x109 (and $x125 $x124 $x83)))
 (let (($x89 (= (+ r ?x58 (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x56 (not $x89)))
 (let (($x66 (= (+ y ?x57) 0)))
 (let (($x80 (and $x66 $x89 $x56)))
 (let ((@x88 (rewrite (= $x80 false))))
 (let ((@x117 (monotonicity (rewrite (= ?x128 (+ ?x115 y00))) (= $x125 (= (+ ?x115 y00) 0)))))
 (let ((@x136 (trans @x117 (rewrite (= (= (+ ?x115 y00) 0) $x66)) (= $x125 $x66))))
 (let ((@x165 (monotonicity @x136 (rewrite (= $x124 $x89)) (rewrite (= $x83 $x56)) (= $x109 $x80))))
 (trans @x165 @x88 (= $x109 false)))))))))))))))))))))
 ))
 (let ((@x158 (trans (quant-intro (proof-bind ?x151) (= $x93 $x95)) @x104 (= $x93 false))))
 (let (($x121 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x58 (* (- 1) r00)))
 (let ((?x57 (* (- 1) y00)))
 (let (($x83 (not (= (+ r ?x57 ?x58 ?x98 (* y00 (+ 1 q))) 0))))
 (let (($x124 (= (+ r ?x58 ?x98 (* y00 q)) 0)))
 (and (= (+ ?x57 y) 0) $x124 $x83))))))) :qid k!28))
 ))
 (let ((?x100 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x58 (* (- 1) r00)))
 (let ((?x57 (* (- 1) y00)))
 (let (($x83 (not (= (+ r ?x57 ?x58 ?x98 (* y00 (+ 1 q))) 0))))
 (let (($x124 (= (+ r ?x58 ?x98 (* y00 q)) 0)))
 (let ((?x115 (* (- 1) y)))
 (let ((?x128 (+ y00 ?x115)))
 (let (($x125 (= ?x128 0)))
 (let (($x109 (and $x125 $x124 $x83)))
 (let (($x107 (and (= (+ ?x57 y) 0) $x124 $x83)))
 (rewrite (= $x107 $x109))))))))))))))
 ))
 (let (($x52 (exists ((q Int) (r Int) (y Int) )(! (let ((?x47 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let (($x49 (not (= ?x47 0))))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x50)))))) :qid k!28))
 ))
 (let ((?x123 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x58 (* (- 1) r00)))
 (let ((?x57 (* (- 1) y00)))
 (let (($x83 (not (= (+ r ?x57 ?x58 ?x98 (* y00 (+ 1 q))) 0))))
 (let (($x124 (= (+ r ?x58 ?x98 (* y00 q)) 0)))
 (let (($x107 (and (= (+ ?x57 y) 0) $x124 $x83)))
 (let (($x48 (= (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00)) 0)))
 (let (($x49 (not $x48)))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) ?x36) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x51 (and $x33 $x41 $x50)))
 (rewrite (= $x51 $x107))))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (let ((@x62 (mp (mp @x53 (quant-intro (proof-bind ?x123) (= $x52 $x121)) $x121) (rewrite (= $x121 $x121)) $x121)))
 (mp (mp @x62 (quant-intro (proof-bind ?x100) (= $x121 $x93)) $x93) @x158 false))))))))))))))

(:max-memory   3.31
 :memory       3.00
 :mk-bool-var  6
 :num-allocs   958263
 :num-checks   1
 :rlimit-count 337
 :time         0.01
 :total-time   0.02)
