unsat
((set-logic NIA)
(proof
(let (($x54 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x47 (* ?x45 ?x45 ?x43 y00)))
 (let ((?x46 (* ?x45 ?x45 ?x45 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00 y00)))
 (let ((?x48 (+ ?x44 ?x46 ?x47)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x52)))))))))))))))) :qid k!29))
 ))
 (let (($x274 (= $x54 false)))
 (let (($x267 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x273 (elim-unused (= $x267 false))))
 (let (($x270 (= $x54 $x267)))
 (let ((?x326 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x47 (* ?x45 ?x45 ?x43 y00)))
 (let ((?x46 (* ?x45 ?x45 ?x45 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00 y00)))
 (let ((?x48 (+ ?x44 ?x46 ?x47)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x53 (and $x33 $x41 $x52)))
 (let (($x265 (= $x53 false)))
 (let (($x304 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x83 (= (+ (* (- 1) y00) y) 0)))
 (let (($x320 (and $x83 $x304 false)))
 (let (($x258 (= $x52 false)))
 (let ((@x257 (rewrite (= (or false) false))))
 (let (($x253 (or false)))
 (let (($x254 (= $x52 $x253)))
 (let (($x251 (= $x51 false)))
 (let ((@x250 (rewrite (= (not true) false))))
 (let (($x246 (not true)))
 (let (($x247 (= $x51 $x246)))
 (let (($x244 (= $x50 true)))
 (let ((@x243 (rewrite (= (= 0 0) true))))
 (let (($x239 (= 0 0)))
 (let (($x240 (= $x50 $x239)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x78 (+ r ?x59)))
 (let ((?x104 (+ 1 q)))
 (let ((?x302 (+ (* (- 1) (* y00 y00 ?x78 ?x78)) (* y00 y00 ?x104 ?x104 ?x104 ?x78) (* y00 ?x104 ?x104 ?x78))))
 (let ((?x306 (* 0 ?x302)))
 (let ((@x75 (trans (monotonicity (rewrite (= ?x30 ?x59)) (= ?x42 (+ ?x59 y00))) (rewrite (= (+ ?x59 y00) 0)) (= ?x42 0))))
 (let ((@x313 (trans (monotonicity @x75 (rewrite (= ?x48 ?x302)) (= ?x49 ?x306)) (rewrite (= ?x306 0)) $x50)))
 (let ((@x317 (trans (monotonicity (trans (monotonicity @x313 $x240) @x243 $x244) $x247) @x250 $x251)))
 (let ((@x322 (monotonicity (rewrite (= $x33 $x83)) (rewrite (= $x41 $x304)) (trans (monotonicity @x317 $x254) @x257 $x258) (= $x53 $x320))))
 (trans @x322 (rewrite (= $x320 false)) $x265)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (mp @x55 (trans (quant-intro (proof-bind ?x326) $x270) @x273 $x274) false))))))))))

(:max-memory   3.38
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   916671
 :rlimit-count 199
 :time         0.01
 :total-time   0.01)
