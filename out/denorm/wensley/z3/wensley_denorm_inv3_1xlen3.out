unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(declare-fun a!8 () Real)
(proof
(let ((?x569 (+ (* (/ 1.0 16.0) (* b!7 b!7 d!6 d!6 a!8)) (* (/ 1.0 8.0) (* y00 b!7 b!7 b!7 d!6)) (* (- (/ 1.0 8.0)) (* a00 b!7 b!7 d!6 a!8 a!8 y!5 y!5 y!5)) (* (- (/ 1.0 8.0)) (* b!7 b!7 b!7 d!6 y!5)) (* (- (/ 1.0 32.0)) (* b!7 b!7 b!7 d!6 d!6 a!8 y!5 y!5)) (* (- (/ 1.0 16.0)) (* a00 b!7 b!7 d!6 d!6)) (* (/ 1.0 8.0) (* b!7 b!7 d!6 a!8 a!8 a!8 y!5 y!5 y!5)) (* (/ 1.0 16.0) (* b!7 b!7 b!7 b!7 d!6 y!5 y!5 y!5)) (* (- (/ 1.0 4.0)) (* b!7 b!7 b!7 a!8 a!8 y!5 y!5 y!5 y!5)) (* (/ 1.0 4.0) (* y00 b!7 b!7 b!7 a!8 a!8 y!5 y!5 y!5)) (* (- (/ 1.0 16.0)) (* y00 b!7 b!7 b!7 b!7 d!6 y!5 y!5)) (* (/ 1.0 32.0) (* a00 b!7 b!7 b!7 d!6 d!6 y!5 y!5)))))
 (let (($x509 (>= ?x569 0.0)))
 (let (($x167 (not $x509)))
 (let (($x614 (= 0.0 ?x569)))
 (let (($x673 (not $x614)))
 (let ((@x750 (symm (commutativity (= $x614 (= ?x569 0.0))) (= (= ?x569 0.0) $x614))))
 (let (($x572 (= ?x569 0.0)))
 (let (($x619 (not $x572)))
 (let ((?x885 (* a00 d!6)))
 (let ((?x527 (* (- (/ 1.0 2.0)) ?x885)))
 (let ((?x780 (* y00 b!7)))
 (let ((?x261 (* d!6 a!8)))
 (let ((?x212 (* (/ 1.0 2.0) ?x261)))
 (let ((?x260 (* b!7 y!5)))
 (let ((?x483 (* (- 1.0) ?x260)))
 (let ((?x952 (+ (* (- (/ 1.0 2.0)) (* b!7 b!7 b!7 a!8 y!5 y!5 y!5)) (* (- (/ 3.0 16.0)) (* b!7 b!7 d!6 d!6 a!8 a!8 y!5)) (* (- (/ 1.0 4.0)) (* b!7 b!7 a!8 a!8 y!5 y!5 y!5)) (* (/ 1.0 16.0) (* b!7 b!7 b!7 d!6 d!6 y!5)) (* (- (/ 1.0 16.0)) (* b!7 b!7 b!7 d!6 d!6 d!6 a!8)) (* (- (/ 3.0 8.0)) (* b!7 b!7 b!7 b!7 d!6 y!5 y!5)) (* (- (/ 3.0 4.0)) (* b!7 b!7 b!7 d!6 a!8 y!5 y!5)) (* (- (/ 3.0 8.0)) (* b!7 b!7 d!6 a!8 a!8 y!5 y!5)) (* (- (/ 1.0 8.0)) (* b!7 b!7 d!6)) (* (- (/ 3.0 8.0)) (* b!7 b!7 b!7 d!6 d!6 a!8 y!5)) (* (- (/ 3.0 16.0)) (* b!7 b!7 b!7 b!7 d!6 d!6 y!5)) (* (- (/ 1.0 32.0)) (* b!7 b!7 b!7 b!7 d!6 d!6 d!6)) (* (/ 1.0 64.0) (* b!7 b!7 b!7 d!6 d!6 d!6)) (* (- (/ 1.0 32.0)) (* b!7 b!7 d!6 d!6 d!6 a!8 a!8)) (* (- (/ 1.0 4.0)) (* b!7 b!7 b!7 b!7 y!5 y!5 y!5)) (* (/ 1.0 16.0) (* b!7 b!7 b!7 d!6 y!5 y!5)))))
 (let (($x258 (= (* ?x952 (+ ?x483 ?x212 ?x780 ?x527)) 0.0)))
 (let ((?x748 (+ ?x527 ?x483 ?x212 ?x780)))
 (let (($x755 (= ?x748 0.0)))
 (let ((?x385 (+ (* 2.0 ?x260) (* (- 1.0) ?x261) (* (- 2.0) ?x780) ?x885)))
 (let (($x119 (= ?x385 0.0)))
 (let (($x840 (not $x258)))
 (let (($x528 (or $x619 $x840)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x804 (= (+ ?x30 ?x93 (* (- 1.0) (* d00 a!8)) (* 2.0 (* b00 y!5))) 0.0)))
 (let (($x609 (and $x804 (= (+ (* d00 b!7) (* (- 1.0) (* b00 d!6))) 0.0) $x119 $x528)))
 (let ((?x880 (* b!7 y00)))
 (let ((?x862 (+ (* (- (/ 1.0 8.0)) (* d!6 b!7 b!7)) (* (/ 1.0 16.0) (* y!5 y!5 d!6 b!7 b!7 b!7)) (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 b!7 b!7 a!8 a!8)) (* (/ 1.0 16.0) (* y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 b!7 b!7 b!7)) (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 2.0)) (* y!5 y!5 y!5 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 8.0)) (* y!5 y!5 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 4.0)) (* y!5 y!5 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 8.0)) (* y!5 y!5 d!6 b!7 b!7 a!8 a!8)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 8.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 16.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 b!7 b!7 a!8 a!8)))))
 (let ((?x386 (* ?x862 (+ ?x212 (* (- 1.0) (* y!5 b!7)) ?x880 (* (- (/ 1.0 2.0)) (* d!6 a00))))))
 (let ((?x359 (+ (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 a!8)) (* (- (/ 1.0 8.0)) (* y!5 d!6 b!7 b!7 b!7)) (* (/ 1.0 8.0) (* d!6 b!7 b!7 b!7 y00)) (* (- (/ 1.0 16.0)) (* d!6 d!6 b!7 b!7 a00)) (* (- (/ 1.0 32.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 a!8)) (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 b!7 b!7 b!7 b!7 y00)) (* (/ 1.0 32.0) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 a00)) (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 b!7 b!7 a!8 a!8 a!8)) (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8 y00)) (* (- (/ 1.0 8.0)) (* y!5 y!5 y!5 d!6 b!7 b!7 a!8 a!8 a00)))))
 (let ((?x278 (+ ?x261 (* (- 2.0) (* y!5 b!7)) (* 2.0 ?x880) (* (- 1.0) (* d!6 a00)))))
 (let (($x698 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x93 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x267 (and $x698 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x278 0.0) (or (not (= ?x359 0.0)) (not (= ?x386 0.0))))))
 (let (($x686 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x140 (* b y00)))
 (let ((?x116 (* y b)))
 (let ((?x177 (* (- 1.0) ?x116)))
 (let ((?x110 (* d a)))
 (let ((?x144 (* (/ 1.0 2.0) ?x110)))
 (let ((?x229 (+ ?x144 ?x177 ?x140 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x946 (+ ?x249 ?x265 ?x288 (* (/ 1.0 16.0) (* y d d b b b)) (* (/ 1.0 64.0) (* d d d b b b)) (* (- (/ 1.0 4.0)) (* y y y b b b b)) (* (- (/ 1.0 2.0)) (* y y y b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b b b)) (* (- (/ 3.0 4.0)) (* y y d b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b a a)) (* (- (/ 3.0 16.0)) (* y d d b b b b)) (* (- (/ 3.0 8.0)) (* y d d b b b a)) (* (- (/ 3.0 16.0)) (* y d d b b a a)) (* (- (/ 1.0 32.0)) (* d d d b b b b)) (* (- (/ 1.0 16.0)) (* d d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b a a)))))
 (let ((?x398 (+ (* (/ 1.0 16.0) (* d d b b a)) (* (- (/ 1.0 8.0)) (* y d b b b)) (* (/ 1.0 8.0) (* d b b b y00)) (* (- (/ 1.0 16.0)) (* d d b b a00)) (* (- (/ 1.0 32.0)) (* y y d d b b b a)) (* (/ 1.0 16.0) (* y y y d b b b b)) (* (- (/ 1.0 16.0)) (* y y d b b b b y00)) (* (/ 1.0 32.0) (* y y d d b b b a00)) (* (/ 1.0 8.0) (* y y y d b b a a a)) (* (- (/ 1.0 4.0)) (* y y y y b b b a a)) (* (/ 1.0 4.0) (* y y y b b b a a y00)) (* (- (/ 1.0 8.0)) (* y y y d b b a a a00)))))
 (let (($x390 (not (= ?x398 0.0))))
 (let (($x170 (= (+ ?x110 (* (- 2.0) ?x116) (* 2.0 ?x140) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x96 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x125 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x93 (* 2.0 (* y b00))) 0.0)))
 (and $x125 $x96 $x170 (or $x390 (not (= (* ?x946 ?x229) 0.0))))))))))))))))))))) :qid k!33))
 ))
 (let (($x433 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x939 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x438 (* y00 b)))
 (let ((?x689 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x438 ?x939)))
 (let ((?x661 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x150 (+ ?x249 (* (/ 1.0 16.0) (* ?x661 ?x661 d b b b)) (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x661 ?x661 ?x661 b b)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x392 (* (+ ?x249 ?x265 ?x288) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x438 ?x939))))
 (let ((?x116 (* y b)))
 (let ((?x135 (* (- 2.0) ?x116)))
 (let ((?x110 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let (($x798 (= (+ ?x93 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x798 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x110 ?x135 (* 2.0 ?x438) (* (- 1.0) ?x48)) 0.0) (or (not (= ?x392 0.0)) (not (= (* ?x150 ?x689) 0.0))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x679 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x140 (* b y00)))
 (let ((?x116 (* y b)))
 (let ((?x177 (* (- 1.0) ?x116)))
 (let ((?x110 (* d a)))
 (let ((?x144 (* (/ 1.0 2.0) ?x110)))
 (let ((?x229 (+ ?x144 ?x177 ?x140 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x946 (+ ?x249 ?x265 ?x288 (* (/ 1.0 16.0) (* y d d b b b)) (* (/ 1.0 64.0) (* d d d b b b)) (* (- (/ 1.0 4.0)) (* y y y b b b b)) (* (- (/ 1.0 2.0)) (* y y y b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b b b)) (* (- (/ 3.0 4.0)) (* y y d b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b a a)) (* (- (/ 3.0 16.0)) (* y d d b b b b)) (* (- (/ 3.0 8.0)) (* y d d b b b a)) (* (- (/ 3.0 16.0)) (* y d d b b a a)) (* (- (/ 1.0 32.0)) (* d d d b b b b)) (* (- (/ 1.0 16.0)) (* d d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b a a)))))
 (let ((?x398 (+ (* (/ 1.0 16.0) (* d d b b a)) (* (- (/ 1.0 8.0)) (* y d b b b)) (* (/ 1.0 8.0) (* d b b b y00)) (* (- (/ 1.0 16.0)) (* d d b b a00)) (* (- (/ 1.0 32.0)) (* y y d d b b b a)) (* (/ 1.0 16.0) (* y y y d b b b b)) (* (- (/ 1.0 16.0)) (* y y d b b b b y00)) (* (/ 1.0 32.0) (* y y d d b b b a00)) (* (/ 1.0 8.0) (* y y y d b b a a a)) (* (- (/ 1.0 4.0)) (* y y y y b b b a a)) (* (/ 1.0 4.0) (* y y y b b b a a y00)) (* (- (/ 1.0 8.0)) (* y y y d b b a a a00)))))
 (let (($x390 (not (= ?x398 0.0))))
 (let (($x170 (= (+ ?x110 (* (- 2.0) ?x116) (* 2.0 ?x140) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x96 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x125 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x93 (* 2.0 (* y b00))) 0.0)))
 (let (($x544 (and $x125 $x96 $x170 (or $x390 (not (= (* ?x946 ?x229) 0.0))))))
 (let ((?x48 (* a00 d)))
 (let ((?x939 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x438 (* y00 b)))
 (let ((?x689 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x438 ?x939)))
 (let ((?x661 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x150 (+ ?x249 (* (/ 1.0 16.0) (* ?x661 ?x661 d b b b)) (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x661 ?x661 ?x661 b b)))))
 (let (($x424 (or (not (= (* (+ ?x249 ?x265 ?x288) (+ ?x144 ?x177 ?x438 ?x939)) 0.0)) (not (= (* ?x150 ?x689) 0.0)))))
 (let (($x798 (= (+ ?x93 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x198 (and $x798 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x110 (* (- 2.0) ?x116) (* 2.0 ?x438) (* (- 1.0) ?x48)) 0.0) $x424)))
 (rewrite (= $x198 $x544)))))))))))))))))))))))))))))))
 ))
 (let (($x84 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x70 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x68 (+ a b)))
 (let ((?x38 (- 1.0)))
 (let ((?x60 (* ?x38 ?x53 ?x53 ?x51)))
 (let ((?x78 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 ?x70 ?x70)) (* ?x68 ?x68 ?x53 ?x53 ?x70 ?x70 ?x70))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x74 (- (+ (- (* ?x68 ?x51) (* 2.0 ?x53 ?x70)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x64 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 y y)) (* a a ?x53 ?x53 y y y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x64) 0.0)) (not (= (* ?x74 ?x78) 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x178 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x939 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x438 (* y00 b)))
 (let ((?x689 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x438 ?x939)))
 (let ((?x661 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x150 (+ ?x249 (* (/ 1.0 16.0) (* ?x661 ?x661 d b b b)) (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x661 ?x661 ?x661 b b)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x392 (* (+ ?x249 ?x265 ?x288) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x438 ?x939))))
 (let ((?x116 (* y b)))
 (let ((?x135 (* (- 2.0) ?x116)))
 (let ((?x110 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let (($x798 (= (+ ?x93 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x198 (and $x798 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x110 ?x135 (* 2.0 ?x438) (* (- 1.0) ?x48)) 0.0) (or (not (= ?x392 0.0)) (not (= (* ?x150 ?x689) 0.0))))))
 (let ((?x51 (/ d 2.0)))
 (let ((?x70 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x38 (- 1.0)))
 (let ((?x60 (* ?x38 ?x53 ?x53 ?x51)))
 (let ((?x78 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 ?x70 ?x70)) (* ?x68 ?x68 ?x53 ?x53 ?x70 ?x70 ?x70))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x74 (- (+ (- (* ?x68 ?x51) (* 2.0 ?x53 ?x70)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x64 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 y y)) (* a a ?x53 ?x53 y y y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x83 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x64) 0.0)) (not (= (* ?x74 ?x78) 0.0))))))
 (rewrite (= $x83 $x198)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x631 (mp (mp @x85 (quant-intro (proof-bind ?x178) (= $x84 $x433)) $x433) (quant-intro (proof-bind ?x679) (= $x433 $x686)) $x686)))
 (let ((@x559 (mp (mp~ @x631 (sk (~ $x686 $x267)) $x267) (rewrite (= $x267 $x609)) $x609)))
 (let ((@x870 (and-elim @x559 $x119)))
 (let (($x275 (<= ?x385 0.0)))
 (let (($x384 (= 0.0 ?x385)))
 (let ((@x796 (mp @x870 (symm (commutativity (= $x384 $x119)) (= $x119 $x384)) $x384)))
 (let ((@x786 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x275)) @x796 $x275)))
 (let (($x434 (>= ?x385 0.0)))
 (let ((@x628 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x434)) @x796 $x434)))
 (let (($x788 (<= ?x748 0.0)))
 (let (($x795 (>= ?x748 0.0)))
 (let ((@x859 ((_ th-lemma arith) (lemma ((_ th-lemma arith) @x786 (hypothesis (not $x795)) false) $x795) (lemma ((_ th-lemma arith) (hypothesis (not $x788)) @x628 false) $x788) @x628 @x786 (= ?x385 ?x748))))
 (let (($x600 (or (not $x755) $x258)))
 (let ((@x568 (unit-resolution ((_ th-lemma arith) $x600) (hypothesis $x840) (hypothesis $x755) false)))
 (let ((@x644 (unit-resolution (lemma @x568 $x600) (trans* (symm @x859 (= ?x748 ?x385)) @x870 $x755) $x258)))
 (let ((@x702 (mp (unit-resolution (and-elim @x559 $x528) @x644 $x619) (monotonicity @x750 (= $x619 $x673)) $x673)))
 (let (($x136 (<= ?x569 0.0)))
 (let ((@x130 (unit-resolution ((_ th-lemma arith) (or (not $x275) (not $x434) $x136)) @x786 @x628 (hypothesis (not $x136)) false)))
 (let ((@x502 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x614 (not $x136) $x167)) (lemma @x130 $x136) @x702 $x167)))
 (unit-resolution ((_ th-lemma arith) (or (not $x275) (not $x434) $x509)) @x786 @x628 @x502 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       20
 :arith-eq-adapter                13
 :arith-bound-propagations-cheap  8
 :arith-conflicts                 13
 :arith-diseq                     18
 :arith-fixed-eqs                 1
 :arith-grobner-calls             2
 :arith-grobner-conflicts         2
 :arith-horner-calls              2
 :arith-horner-cross-nested-forms 2
 :arith-lower                     15
 :arith-make-feasible             15
 :arith-max-columns               58
 :arith-max-rows                  7
 :arith-nla-explanations          6
 :arith-nla-lemmas                11
 :arith-propagations              8
 :arith-upper                     18
 :conflicts                       6
 :decisions                       21
 :del-clause                      18
 :final-checks                    14
 :max-memory                      1.95
 :memory                          1.12
 :mk-bool-var                     53
 :mk-clause                       48
 :num-allocs                      509357
 :num-checks                      1
 :propagations                    26
 :rlimit-count                    5065
 :time                            0.01
 :total-time                      0.01)
