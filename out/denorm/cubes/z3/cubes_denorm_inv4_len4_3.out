unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x223 (* n!0 n!0)))
 (let ((?x323 (* 3 ?x223)))
 (let ((?x215 (* (- 1) k!2)))
 (let ((?x240 (+ (* 3 n!0) ?x215 ?x323)))
 (let (($x376 (<= ?x240 (- 1))))
 (let (($x246 (= ?x240 (- 1))))
 (let ((?x199 (+ k!2 m!1)))
 (let ((?x316 (+ 6 m!1)))
 (let ((?x253 (+ 1 n!0)))
 (let ((?x310 (* ?x253 ?x253 ?x316 ?x316 ?x199 ?x199 ?x199)))
 (let ((?x515 (+ 6 m!1 (* (- 1) (* ?x316 ?x316 ?x316 ?x199 (+ k!2 c!3) (+ k!2 c!3))) (* (- 1) (* ?x253 ?x253 ?x316 ?x316 ?x316 ?x199 ?x199 (+ k!2 c!3))) ?x310)))
 (let ((?x520 (* (+ 7 (* 9 n!0) ?x215 (* (- 1) m!1) ?x323) ?x515)))
 (let (($x538 (= ?x520 0)))
 (let (($x517 (not $x538)))
 (let ((?x256 (* 9 n!0)))
 (let ((?x92 (* k!2 k!2)))
 (let ((?x357 (+ ?x92 ?x256 (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let ((?x214 (* (- 1) m!1)))
 (let ((?x145 (+ (* 6 n!0) ?x214)))
 (let (($x113 (= ?x145 (- 6))))
 (let (($x536 (and $x113 (= ?x357 (- 4)) (= (+ (* 2 n!0) ?x215 (* (- 3) c!3) (* n!0 k!2)) (- 1)) $x246 $x517)))
 (let ((?x358 (+ 6 m!1 (* (- 1) (* ?x253 ?x253 ?x316 ?x316 ?x316 ?x199 ?x199 (+ c!3 k!2))) ?x310 (* (- 1) (* ?x316 ?x316 ?x316 ?x199 (+ c!3 k!2) (+ c!3 k!2))))))
 (let (($x96 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x203 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x92) (* 9 (* c!3 n!0)))))
 (let (($x321 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x203 4) $x96 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x223)) 1) (not (= (* (+ 7 ?x215 ?x214 ?x256 ?x323) ?x358) 0)))))
 (let (($x98 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x342 (* (- 1) (* ?x391 ?x391 ?x391 ?x71 ?x76 ?x76))))
 (let ((?x304 (+ 1 n)))
 (let ((?x350 (* ?x304 ?x304 ?x391 ?x391 ?x71 ?x71 ?x71)))
 (let ((?x341 (* (- 1) (* ?x304 ?x304 ?x391 ?x391 ?x391 ?x71 ?x71 ?x76))))
 (let ((?x267 (* n n)))
 (let ((?x268 (* 3 ?x267)))
 (let ((?x48 (* 9 n)))
 (let ((?x352 (* (- 1) m)))
 (let ((?x236 (* (- 1) k)))
 (let (($x274 (= (* (+ 7 ?x236 ?x352 ?x48 ?x268) (+ 6 m ?x341 ?x350 ?x342)) 0)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) ?x267)) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 $x206 $x258 $x296 (not $x274)))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x552 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x342 (* (- 1) (* ?x391 ?x391 ?x391 ?x71 ?x76 ?x76))))
 (let ((?x304 (+ 1 n)))
 (let ((?x350 (* ?x304 ?x304 ?x391 ?x391 ?x71 ?x71 ?x71)))
 (let ((?x341 (* (- 1) (* ?x304 ?x304 ?x391 ?x391 ?x391 ?x71 ?x71 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x352 (* (- 1) m)))
 (let ((?x236 (* (- 1) k)))
 (let ((?x528 (* (+ 4 (* 3 (* ?x304 ?x304)) ?x236 ?x352 ?x65) (+ 6 ?x341 ?x350 ?x342 m))))
 (let (($x527 (not (= ?x528 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x236 ?x65) (- 1))))
 (let (($x276 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x276 $x173 $x527))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x566 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x342 (* (- 1) (* ?x391 ?x391 ?x391 ?x71 ?x76 ?x76))))
 (let ((?x304 (+ 1 n)))
 (let ((?x350 (* ?x304 ?x304 ?x391 ?x391 ?x71 ?x71 ?x71)))
 (let ((?x341 (* (- 1) (* ?x304 ?x304 ?x391 ?x391 ?x391 ?x71 ?x71 ?x76))))
 (let ((?x267 (* n n)))
 (let ((?x268 (* 3 ?x267)))
 (let ((?x48 (* 9 n)))
 (let ((?x352 (* (- 1) m)))
 (let ((?x236 (* (- 1) k)))
 (let (($x274 (= (* (+ 7 ?x236 ?x352 ?x48 ?x268) (+ 6 m ?x341 ?x350 ?x342)) 0)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) ?x267)) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x269 (and $x122 $x206 $x258 $x296 (not $x274))))
 (let ((?x528 (* (+ 4 (* 3 (* ?x304 ?x304)) ?x236 ?x352 (* 3 n)) (+ 6 ?x341 ?x350 ?x342 m))))
 (let (($x527 (not (= ?x528 0))))
 (let (($x173 (= (+ ?x268 ?x236 (* 3 n)) (- 1))))
 (let (($x276 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x295 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x276 $x173 $x527)))
 (rewrite (= $x295 $x269)))))))))))))))))))))))))))))))
 ))
 (let (($x529 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x342 (* (- 1) (* ?x391 ?x391 ?x391 ?x71 ?x76 ?x76))))
 (let ((?x304 (+ 1 n)))
 (let ((?x350 (* ?x304 ?x304 ?x391 ?x391 ?x71 ?x71 ?x71)))
 (let ((?x341 (* (- 1) (* ?x304 ?x304 ?x391 ?x391 ?x391 ?x71 ?x71 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x352 (* (- 1) m)))
 (let ((?x236 (* (- 1) k)))
 (let ((?x528 (* (+ 4 (* 3 (* ?x304 ?x304)) ?x236 ?x352 ?x65) (+ 6 ?x341 ?x350 ?x342 m))))
 (let (($x527 (not (= ?x528 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x236 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x564 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= ?x564 (- 4)) (= (+ (* (- 3) c) (* n k) ?x236 (* 2 n)) (- 1)) $x173 $x527)))))))))))))))))) :qid k!34))
 ))
 (let ((?x549 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x342 (* (- 1) (* ?x391 ?x391 ?x391 ?x71 ?x76 ?x76))))
 (let ((?x304 (+ 1 n)))
 (let ((?x350 (* ?x304 ?x304 ?x391 ?x391 ?x71 ?x71 ?x71)))
 (let ((?x341 (* (- 1) (* ?x304 ?x304 ?x391 ?x391 ?x391 ?x71 ?x71 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x352 (* (- 1) m)))
 (let ((?x236 (* (- 1) k)))
 (let ((?x528 (* (+ 4 (* 3 (* ?x304 ?x304)) ?x236 ?x352 ?x65) (+ 6 ?x341 ?x350 ?x342 m))))
 (let (($x527 (not (= ?x528 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x236 ?x65) (- 1))))
 (let (($x276 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x295 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x276 $x173 $x527)))
 (let ((?x48 (* 9 n)))
 (let ((?x564 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x337 (and $x122 (= ?x564 (- 4)) (= (+ (* (- 3) c) (* n k) ?x236 (* 2 n)) (- 1)) $x173 $x527)))
 (rewrite (= $x337 $x295)))))))))))))))))))))))))))
 ))
 (let (($x89 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x68 (+ n 1)))
 (let ((?x80 (+ (* (- 1) ?x76 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68 ?x68) (* ?x71 ?x71 ?x71 ?x77 ?x77 ?x68 ?x68))))
 (let ((?x84 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (+ (- ?x80 (* ?x76 ?x76 ?x71 ?x77 ?x77 ?x77)) m 6))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x84 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x364 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x342 (* (- 1) (* ?x391 ?x391 ?x391 ?x71 ?x76 ?x76))))
 (let ((?x304 (+ 1 n)))
 (let ((?x350 (* ?x304 ?x304 ?x391 ?x391 ?x71 ?x71 ?x71)))
 (let ((?x341 (* (- 1) (* ?x304 ?x304 ?x391 ?x391 ?x391 ?x71 ?x71 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x352 (* (- 1) m)))
 (let ((?x236 (* (- 1) k)))
 (let ((?x528 (* (+ 4 (* 3 (* ?x304 ?x304)) ?x236 ?x352 ?x65) (+ 6 ?x341 ?x350 ?x342 m))))
 (let (($x527 (not (= ?x528 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x236 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x564 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x337 (and $x122 (= ?x564 (- 4)) (= (+ (* (- 3) c) (* n k) ?x236 (* 2 n)) (- 1)) $x173 $x527)))
 (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x80 (+ (* (- 1) ?x76 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68 ?x68) (* ?x71 ?x71 ?x71 ?x77 ?x77 ?x68 ?x68))))
 (let ((?x84 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (+ (- ?x80 (* ?x76 ?x76 ?x71 ?x77 ?x77 ?x77)) m 6))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x88 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x84 0))))))
 (rewrite (= $x88 $x337))))))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x124 (mp (mp @x90 (quant-intro (proof-bind ?x364) (= $x89 $x529)) $x529) (rewrite (= $x529 $x529)) $x529)))
 (let ((@x162 (mp (mp @x124 (quant-intro (proof-bind ?x549) (= $x529 $x552)) $x552) (quant-intro (proof-bind ?x566) (= $x552 $x98)) $x98)))
 (let ((@x278 (mp (mp~ @x162 (sk (~ $x98 $x321)) $x321) (rewrite (= $x321 $x536)) $x536)))
 (let ((@x186 (and-elim @x278 $x246)))
 (let ((@x290 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x246) $x376)) @x186 $x376)))
 (let (($x360 (<= ?x145 (- 6))))
 (let ((@x171 (and-elim @x278 $x113)))
 (let ((@x185 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x360)) @x171 $x360)))
 (let (($x512 (>= ?x240 (- 1))))
 (let ((@x280 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x246) $x512)) @x186 $x512)))
 (let (($x366 (>= ?x145 (- 6))))
 (let ((@x132 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x366)) @x171 $x366)))
 (let (($x362 (not (<= ?x520 0))))
 (let (($x521 (>= ?x520 0)))
 (let ((@x118 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x521)) @x132 @x280 @x185 @x290 false) $x521)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x538 $x362 (not $x521))) (and-elim @x278 $x517) (or $x362 (not $x521)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x331 @x118 $x362) @x132 @x280 @x185 @x290 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             123
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    18
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      21
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.61
 :memory                    3.10
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1363393
 :num-checks                1
 :propagations              12
 :rlimit-count              10517
 :time                      0.01
 :total-time                0.02)
