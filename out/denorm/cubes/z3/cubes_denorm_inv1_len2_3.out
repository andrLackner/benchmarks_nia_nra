unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x479 (* (- 6) n!0)))
 (let ((?x381 (+ m!1 ?x479)))
 (let (($x423 (<= ?x381 6)))
 (let (($x278 (= ?x381 6)))
 (let ((?x352 (+ (- 6) m!1 ?x479)))
 (let ((?x491 (* c!3 k!2)))
 (let ((?x464 (* k!2 k!2)))
 (let ((?x354 (* 6 (* c!3 c!3 k!2))))
 (let ((?x189 (* 6 (* k!2 k!2 k!2))))
 (let ((?x231 (* 12 (* c!3 k!2 k!2))))
 (let ((?x181 (+ (* 12 (* m!1 n!0 c!3 k!2)) (* 6 (* m!1 n!0 k!2 k!2)) (* m!1 m!1 n!0 c!3 c!3) (* m!1 c!3) (* m!1 k!2 k!2 k!2) (* m!1 k!2) ?x231 (* m!1 m!1 c!3 c!3) (* 2 (* m!1 m!1 c!3 k!2)) (* 6 (* m!1 c!3 c!3)) ?x189 (* 6 (* m!1 k!2 k!2)) (* 12 (* m!1 c!3 k!2)) (* m!1 m!1 k!2 k!2) (* 6 (* n!0 c!3 c!3 k!2)) (* 12 (* n!0 c!3 k!2 k!2)) (* 6 (* n!0 k!2 k!2 k!2)) (* 6 (* m!1 n!0 c!3 c!3)) (* m!1 c!3 c!3 k!2) ?x354 (* 2 (* m!1 c!3 k!2 k!2)) (* m!1 n!0 c!3 c!3 k!2) (* 2 (* m!1 n!0 c!3 k!2 k!2)) (* m!1 n!0 k!2 k!2 k!2) ?x464 (* 2 (* m!1 m!1 n!0 c!3 k!2)) (* m!1 m!1 n!0 k!2 k!2) ?x491)))
 (let ((?x198 (* ?x181 ?x352)))
 (let (($x445 (= ?x198 0)))
 (let (($x199 (not $x445)))
 (let (($x373 (= (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2)) (- 1))))
 (let (($x368 (= (+ (* 2 n!0) (* (- 3) c!3) (* (- 1) k!2) (* n!0 k!2)) (- 1))))
 (let ((?x371 (+ (* 9 n!0) (* (- 18) c!3) (* (- 5) k!2) ?x464 (* (- 9) (* n!0 c!3)))))
 (let (($x375 (and $x278 (= ?x371 (- 4)) $x368 $x373 $x199)))
 (let ((?x499 (+ ?x464 (* c!3 c!3 k!2 m!1 n!0) (* 2 (* c!3 k!2 k!2 m!1 n!0)) (* k!2 k!2 k!2 m!1 n!0) (* c!3 c!3 m!1 m!1 n!0) (* 2 (* c!3 k!2 m!1 m!1 n!0)) (* k!2 k!2 m!1 m!1 n!0) ?x354 ?x231 ?x189 (* 6 (* c!3 c!3 m!1)) (* 12 (* c!3 k!2 m!1)) (* 6 (* k!2 k!2 m!1)) (* c!3 c!3 k!2 m!1) (* 2 (* c!3 k!2 k!2 m!1)) (* k!2 k!2 k!2 m!1) (* c!3 c!3 m!1 m!1) (* 2 (* c!3 k!2 m!1 m!1)) (* k!2 k!2 m!1 m!1) (* 6 (* c!3 c!3 k!2 n!0)) (* 12 (* c!3 k!2 k!2 n!0)) (* 6 (* k!2 k!2 k!2 n!0)) (* 6 (* c!3 c!3 m!1 n!0)) (* 12 (* c!3 k!2 m!1 n!0)) (* 6 (* k!2 k!2 m!1 n!0)) ?x491 (* c!3 m!1) (* k!2 m!1))))
 (let (($x328 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x102 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x464) (* 9 (* c!3 n!0)))))
 (let (($x503 (and $x278 (= ?x102 4) $x328 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x499 ?x352) 0)))))
 (let (($x348 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x538 (* k m)))
 (let ((?x537 (* c m)))
 (let ((?x536 (* c k)))
 (let ((?x510 (* 6 (* k k m n))))
 (let ((?x526 (* 12 (* c k m n))))
 (let ((?x494 (* 6 (* c c m n))))
 (let ((?x490 (* 6 (* k k k n))))
 (let ((?x525 (* 12 (* c k k n))))
 (let ((?x474 (* 6 (* c c k n))))
 (let ((?x470 (* k k m m)))
 (let ((?x524 (* 2 (* c k m m))))
 (let ((?x457 (* c c m m)))
 (let ((?x454 (* k k k m)))
 (let ((?x523 (* 2 (* c k k m))))
 (let ((?x441 (* c c k m)))
 (let ((?x418 (* 6 (* k k k))))
 (let ((?x395 (* k k m m n)))
 (let ((?x528 (* 2 (* c k m m n))))
 (let ((?x392 (* c c m m n)))
 (let ((?x391 (* k k k m n)))
 (let ((?x527 (* 2 (* c k k m n))))
 (let ((?x388 (* c c k m n)))
 (let ((?x49 (* k k)))
 (let ((?x550 (+ ?x49 ?x388 ?x527 ?x391 ?x392 ?x528 ?x395 (* 6 (* c c k)) (* 12 (* c k k)) ?x418 (* 6 (* c c m)) (* 12 (* c k m)) (* 6 (* k k m)) ?x441 ?x523 ?x454 ?x457 ?x524 ?x470 ?x474 ?x525 ?x490 ?x494 ?x526 ?x510 ?x536 ?x537 ?x538)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x550 ?x114) 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x404 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x538 (* k m)))
 (let ((?x537 (* c m)))
 (let ((?x536 (* c k)))
 (let ((?x510 (* 6 (* k k m n))))
 (let ((?x526 (* 12 (* c k m n))))
 (let ((?x494 (* 6 (* c c m n))))
 (let ((?x490 (* 6 (* k k k n))))
 (let ((?x525 (* 12 (* c k k n))))
 (let ((?x474 (* 6 (* c c k n))))
 (let ((?x470 (* k k m m)))
 (let ((?x524 (* 2 (* c k m m))))
 (let ((?x457 (* c c m m)))
 (let ((?x454 (* k k k m)))
 (let ((?x523 (* 2 (* c k k m))))
 (let ((?x441 (* c c k m)))
 (let ((?x418 (* 6 (* k k k))))
 (let ((?x395 (* k k m m n)))
 (let ((?x528 (* 2 (* c k m m n))))
 (let ((?x392 (* c c m m n)))
 (let ((?x391 (* k k k m n)))
 (let ((?x527 (* 2 (* c k k m n))))
 (let ((?x388 (* c c k m n)))
 (let ((?x49 (* k k)))
 (let ((?x178 (+ ?x49 (* 6 (* k c k)) (* 6 (* m k c)) ?x388 ?x527 ?x391 ?x392 ?x528 ?x395 (* 6 (* k c c)) ?x418 (* 6 (* m c k)) (* 6 (* m k k)) ?x441 ?x523 ?x454 ?x457 ?x524 (* 6 (* m c c)) ?x470 ?x474 ?x525 (* 6 (* k k c)) ?x490 ?x494 ?x526 ?x510 ?x536 ?x537 ?x538)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x178 ?x114) 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x290 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x538 (* k m)))
 (let ((?x537 (* c m)))
 (let ((?x536 (* c k)))
 (let ((?x510 (* 6 (* k k m n))))
 (let ((?x526 (* 12 (* c k m n))))
 (let ((?x494 (* 6 (* c c m n))))
 (let ((?x490 (* 6 (* k k k n))))
 (let ((?x525 (* 12 (* c k k n))))
 (let ((?x474 (* 6 (* c c k n))))
 (let ((?x470 (* k k m m)))
 (let ((?x524 (* 2 (* c k m m))))
 (let ((?x457 (* c c m m)))
 (let ((?x454 (* k k k m)))
 (let ((?x523 (* 2 (* c k k m))))
 (let ((?x441 (* c c k m)))
 (let ((?x418 (* 6 (* k k k))))
 (let ((?x395 (* k k m m n)))
 (let ((?x528 (* 2 (* c k m m n))))
 (let ((?x392 (* c c m m n)))
 (let ((?x391 (* k k k m n)))
 (let ((?x527 (* 2 (* c k k m n))))
 (let ((?x388 (* c c k m n)))
 (let ((?x49 (* k k)))
 (let ((?x550 (+ ?x49 ?x388 ?x527 ?x391 ?x392 ?x528 ?x395 (* 6 (* c c k)) (* 12 (* c k k)) ?x418 (* 6 (* c c m)) (* 12 (* c k m)) (* 6 (* k k m)) ?x441 ?x523 ?x454 ?x457 ?x524 ?x470 ?x474 ?x525 ?x490 ?x494 ?x526 ?x510 ?x536 ?x537 ?x538)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x240 (and $x125 $x209 $x261 $x299 (not (= (* ?x550 ?x114) 0)))))
 (let ((?x178 (+ ?x49 (* 6 (* k c k)) (* 6 (* m k c)) ?x388 ?x527 ?x391 ?x392 ?x528 ?x395 (* 6 (* k c c)) ?x418 (* 6 (* m c k)) (* 6 (* m k k)) ?x441 ?x523 ?x454 ?x457 ?x524 (* 6 (* m c c)) ?x470 ?x474 ?x525 (* 6 (* k k c)) ?x490 ?x494 ?x526 ?x510 ?x536 ?x537 ?x538)))
 (let (($x273 (and $x125 $x209 $x261 $x299 (not (= (* ?x178 ?x114) 0)))))
 (rewrite (= $x273 $x240))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x298 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x230 (* (+ (* (+ 1 n) (+ 6 m) ?x73 ?x72 ?x72) (* ?x73 ?x72)) ?x114)))
 (let (($x164 (not (= ?x230 0))))
 (let (($x314 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x305 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x305 $x314 $x164))))))))))))))) :qid k!34))
 ))
 (let ((?x410 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x538 (* k m)))
 (let ((?x537 (* c m)))
 (let ((?x536 (* c k)))
 (let ((?x510 (* 6 (* k k m n))))
 (let ((?x526 (* 12 (* c k m n))))
 (let ((?x494 (* 6 (* c c m n))))
 (let ((?x490 (* 6 (* k k k n))))
 (let ((?x525 (* 12 (* c k k n))))
 (let ((?x474 (* 6 (* c c k n))))
 (let ((?x470 (* k k m m)))
 (let ((?x524 (* 2 (* c k m m))))
 (let ((?x457 (* c c m m)))
 (let ((?x454 (* k k k m)))
 (let ((?x523 (* 2 (* c k k m))))
 (let ((?x441 (* c c k m)))
 (let ((?x418 (* 6 (* k k k))))
 (let ((?x395 (* k k m m n)))
 (let ((?x528 (* 2 (* c k m m n))))
 (let ((?x392 (* c c m m n)))
 (let ((?x391 (* k k k m n)))
 (let ((?x527 (* 2 (* c k k m n))))
 (let ((?x388 (* c c k m n)))
 (let ((?x49 (* k k)))
 (let ((?x178 (+ ?x49 (* 6 (* k c k)) (* 6 (* m k c)) ?x388 ?x527 ?x391 ?x392 ?x528 ?x395 (* 6 (* k c c)) ?x418 (* 6 (* m c k)) (* 6 (* m k k)) ?x441 ?x523 ?x454 ?x457 ?x524 (* 6 (* m c c)) ?x470 ?x474 ?x525 (* 6 (* k k c)) ?x490 ?x494 ?x526 ?x510 ?x536 ?x537 ?x538)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x273 (and $x125 $x209 $x261 $x299 (not (= (* ?x178 ?x114) 0)))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x230 (* (+ (* (+ 1 n) (+ 6 m) ?x73 ?x72 ?x72) (* ?x73 ?x72)) ?x114)))
 (let (($x164 (not (= ?x230 0))))
 (let (($x314 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x305 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x86 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x305 $x314 $x164)))
 (rewrite (= $x86 $x273)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x156 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x230 (* (+ (* (+ 1 n) (+ 6 m) ?x73 ?x72 ?x72) (* ?x73 ?x72)) ?x114)))
 (let (($x164 (not (= ?x230 0))))
 (let (($x314 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x530 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x376 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 (= ?x376 (- 4)) $x530 $x314 $x164))))))))))))) :qid k!34))
 ))
 (let ((?x382 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x230 (* (+ (* (+ 1 n) (+ 6 m) ?x73 ?x72 ?x72) (* ?x73 ?x72)) ?x114)))
 (let (($x164 (not (= ?x230 0))))
 (let (($x314 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x305 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x86 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x305 $x314 $x164)))
 (let (($x530 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x376 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x329 (and $x125 (= ?x376 (- 4)) $x530 $x314 $x164)))
 (rewrite (= $x329 $x86))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x73 (+ k m)))
 (let ((?x72 (+ c k)))
 (let ((?x78 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ (* ?x72 ?x72 ?x73 (+ m 6) ?x69) (* ?x72 ?x73)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x78 0))))))))))))))) :qid k!34))
 ))
 (let ((?x166 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x230 (* (+ (* (+ 1 n) (+ 6 m) ?x73 ?x72 ?x72) (* ?x73 ?x72)) ?x114)))
 (let (($x164 (not (= ?x230 0))))
 (let (($x314 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x530 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x376 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x329 (and $x125 (= ?x376 (- 4)) $x530 $x314 $x164)))
 (let ((?x78 (* (- (+ (* (- 6) 1) m 6) (* 6 (+ n 1))) (+ (* ?x72 ?x72 ?x73 (+ m 6) (+ n 1)) (* ?x72 ?x73)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x78 0))))))
 (rewrite (= $x82 $x329)))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x289 (mp (mp @x84 (quant-intro (proof-bind ?x166) (= $x83 $x156)) $x156) (rewrite (= $x156 $x156)) $x156)))
 (let ((@x344 (mp (mp @x289 (quant-intro (proof-bind ?x382) (= $x156 $x298)) $x298) (quant-intro (proof-bind ?x410) (= $x298 $x404)) $x404)))
 (let ((@x512 (mp~ (mp @x344 (quant-intro (proof-bind ?x290) (= $x404 $x348)) $x348) (sk (~ $x348 $x503)) $x503)))
 (let ((@x107 (mp @x512 (rewrite (= $x503 $x375)) $x375)))
 (let ((@x377 (and-elim @x107 $x278)))
 (let ((@x444 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x278) $x423)) @x377 $x423)))
 (let (($x405 (>= ?x381 6)))
 (let ((@x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x278) $x405)) @x377 $x405)))
 (let (($x426 (not (<= ?x198 0))))
 (let (($x92 (>= ?x198 0)))
 (let ((@x393 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x445 $x426 (not $x92))) (and-elim @x107 $x199) (or $x426 (not $x92)))))
 (let ((@x434 (unit-resolution @x393 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x92)) @x275 @x444 false) $x92) $x426)))
 ((_ th-lemma arith farkas 1 1 1) @x434 @x275 @x444 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        26
 :arith-assert-upper        21
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             147
 :arith-nonlinear-bounds    24
 :arith-num-rows            6
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 53
 :arith-tableau-max-rows    6
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.57
 :memory                    3.09
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1113051
 :num-checks                1
 :propagations              10
 :rlimit-count              3851
 :time                      0.01
 :total-time                0.01)
