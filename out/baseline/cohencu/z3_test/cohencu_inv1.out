unsat
((set-logic NIA)
(proof
(let (($x225 (exists ((x Int) (y Int) (z Int) (n Int) )(! (let ((?x36 (* 6 n00)))
 (let ((?x220 (- (+ (* (- 1) (+ z 6)) z00 (* 6 (+ n 1))) ?x36)))
 (let (($x222 (not (= ?x220 0))))
 (let (($x223 (or $x222)))
 (let ((?x212 (* y z00 z00 z00)))
 (let ((?x201 (* y y z00 z00)))
 (let ((?x196 (* y00 z00 z00 z00)))
 (let ((?x161 (* y00 y00 z00 z00)))
 (let ((?x157 (- (+ (* 216 x00 y00) (* 108 x y) (* 36 x00 z00)) (* 2 x z00 z00 z00))))
 (let ((?x163 (- (- (+ ?x157 (* 18 x z00 z00)) (* 12 y00 y00 z00)) ?x161)))
 (let ((?x169 (- (+ ?x163 (* 24 y y) (* 108 x x)) (* 4 y y y))))
 (let ((?x176 (- (+ ?x169 (* 18 y y00 z00) (* 24 y00 z00)) (* 120 y y00))))
 (let ((?x182 (- (+ (- ?x176 (* 24 y z00)) (* 16 y00 y00 y00)) (* 6 y y z00))))
 (let ((?x192 (- (- (+ ?x182 (* 96 y00 y00)) (* 12 y y y00)) (* 36 x00 y00 z00))))
 (let ((?x195 (- (- (- ?x192 (* 108 x00 y)) (* 18 x00 z00 z00)) (* 216 x x00))))
 (let ((?x200 (- (+ ?x195 ?x196 (* 2 x00 z00 z00 z00)) (* 216 x y00))))
 (let ((?x207 (- (- (+ ?x200 ?x201) (* 10 y00 z00 z00)) (* 36 x z00))))
 (let ((?x211 (+ ?x207 (* 36 x y00 z00) (* 10 y z00 z00) (* 108 x00 x00))))
 (let (($x214 (= (- ?x211 ?x212) 0)))
 (let ((?x74 (* 108 x00)))
 (let ((?x71 (* 72 y)))
 (let ((?x67 (* 72 y00)))
 (let ((?x64 (* 108 x)))
 (let ((?x135 (* y y z)))
 (let ((?x90 (* 18 x00 z)))
 (let ((?x80 (* 12 y z)))
 (let ((?x94 (* 6 y z00)))
 (let ((?x91 (* 6 y00 z00)))
 (let ((?x59 (* 12 y00 z)))
 (let ((?x113 (* y00 y00 z00)))
 (let ((?x81 (* 18 x z)))
 (let ((?x116 (- (- (- (* (- 18) x00 y00) (* 18 x y)) ?x81) (* 3 x z00 z00))))
 (let ((?x121 (- (+ (- ?x116 ?x113) (* 3 x00 z z00)) (* y y00 z00))))
 (let ((?x129 (- (- (+ (- (+ ?x121 ?x59) ?x91) (* 36 y y00) ?x94) ?x80) (* 3 x z z00))))
 (let ((?x138 (+ (- (+ ?x129 (* 2 y y z00)) (* 36 y00 y00)) ?x90 ?x135 (* 18 x00 y) (* 3 x00 z00 z00) ?x64)))
 (let ((?x145 (+ (- (+ (- ?x138 ?x67) (* 18 x y00) ?x71) ?x74) (* y y00 z) (* 3 y00 z00 z00))))
 (let (($x150 (= (- (- ?x145 (* 2 y00 y00 z)) (* 3 y z00 z00)) 0)))
 (let ((?x105 (* y z00 z00)))
 (let ((?x103 (* y z z00)))
 (let ((?x99 (* y00 z00 z00)))
 (let ((?x86 (+ (- (- (* (- 1) y00 z z00) ?x80) ?x81) (* 18 x00 z00) (* 12 y y))))
 (let ((?x93 (+ (- ?x86 (* 24 y00 y00)) ?x90 ?x59 ?x91 (* 12 y y00) ?x64)))
 (let ((?x102 (- (+ (- (+ (- (- ?x93 ?x67) ?x94) ?x71) ?x74) ?x99) (* 18 x z00))))
 (let (($x107 (= (- (+ ?x102 ?x103) ?x105) 0)))
 (let ((?x76 (* z z00 z00)))
 (let ((?x58 (+ (- (* (- 6) y z) (* z00 z00 z00)) (* 6 z00 z00))))
 (let ((?x70 (- (- (+ (- ?x58 ?x59) (* 18 y00 z00) ?x64) ?x67) (* 6 z z00))))
 (let (($x78 (= (+ (- (+ ?x70 ?x71) ?x74) ?x76) 0)))
 (let ((?x50 (* z z)))
 (let ((?x49 (* 6 z00)))
 (let ((?x46 (* 6 z)))
 (let ((?x45 (* 12 y)))
 (let ((?x43 (* 12 y00)))
 (let ((?x29 (- 1)))
 (let ((?x40 (* ?x29 z00 z00)))
 (let ((?x44 (+ ?x40 ?x43)))
 (let ((?x47 (- ?x44 ?x45)))
 (let ((?x48 (- ?x47 ?x46)))
 (let ((?x51 (+ ?x48 ?x49 ?x50)))
 (let (($x52 (= ?x51 0)))
 (let ((?x33 (* 6 n)))
 (let ((?x30 (* ?x29 z)))
 (let ((?x34 (+ ?x30 z00 ?x33)))
 (let ((?x37 (- ?x34 ?x36)))
 (let (($x39 (= ?x37 0)))
 (and $x39 $x52 $x78 $x107 $x150 $x214 $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!37))
 ))
 (let (($x627 (= $x225 false)))
 (let (($x596 (exists ((x Int) (y Int) (z Int) (n Int) )(! false :qid k!37))
 ))
 (let ((@x625 (elim-unused (= $x596 false))))
 (let (($x601 (= $x225 $x596)))
 (let ((?x843 (lambda ((x Int) (y Int) (z Int) (n Int) )(let ((?x36 (* 6 n00)))
 (let ((?x220 (- (+ (* (- 1) (+ z 6)) z00 (* 6 (+ n 1))) ?x36)))
 (let (($x222 (not (= ?x220 0))))
 (let (($x223 (or $x222)))
 (let ((?x212 (* y z00 z00 z00)))
 (let ((?x201 (* y y z00 z00)))
 (let ((?x196 (* y00 z00 z00 z00)))
 (let ((?x161 (* y00 y00 z00 z00)))
 (let ((?x157 (- (+ (* 216 x00 y00) (* 108 x y) (* 36 x00 z00)) (* 2 x z00 z00 z00))))
 (let ((?x163 (- (- (+ ?x157 (* 18 x z00 z00)) (* 12 y00 y00 z00)) ?x161)))
 (let ((?x169 (- (+ ?x163 (* 24 y y) (* 108 x x)) (* 4 y y y))))
 (let ((?x176 (- (+ ?x169 (* 18 y y00 z00) (* 24 y00 z00)) (* 120 y y00))))
 (let ((?x182 (- (+ (- ?x176 (* 24 y z00)) (* 16 y00 y00 y00)) (* 6 y y z00))))
 (let ((?x192 (- (- (+ ?x182 (* 96 y00 y00)) (* 12 y y y00)) (* 36 x00 y00 z00))))
 (let ((?x195 (- (- (- ?x192 (* 108 x00 y)) (* 18 x00 z00 z00)) (* 216 x x00))))
 (let ((?x200 (- (+ ?x195 ?x196 (* 2 x00 z00 z00 z00)) (* 216 x y00))))
 (let ((?x207 (- (- (+ ?x200 ?x201) (* 10 y00 z00 z00)) (* 36 x z00))))
 (let ((?x211 (+ ?x207 (* 36 x y00 z00) (* 10 y z00 z00) (* 108 x00 x00))))
 (let (($x214 (= (- ?x211 ?x212) 0)))
 (let ((?x74 (* 108 x00)))
 (let ((?x71 (* 72 y)))
 (let ((?x67 (* 72 y00)))
 (let ((?x64 (* 108 x)))
 (let ((?x135 (* y y z)))
 (let ((?x90 (* 18 x00 z)))
 (let ((?x80 (* 12 y z)))
 (let ((?x94 (* 6 y z00)))
 (let ((?x91 (* 6 y00 z00)))
 (let ((?x59 (* 12 y00 z)))
 (let ((?x113 (* y00 y00 z00)))
 (let ((?x81 (* 18 x z)))
 (let ((?x116 (- (- (- (* (- 18) x00 y00) (* 18 x y)) ?x81) (* 3 x z00 z00))))
 (let ((?x121 (- (+ (- ?x116 ?x113) (* 3 x00 z z00)) (* y y00 z00))))
 (let ((?x129 (- (- (+ (- (+ ?x121 ?x59) ?x91) (* 36 y y00) ?x94) ?x80) (* 3 x z z00))))
 (let ((?x138 (+ (- (+ ?x129 (* 2 y y z00)) (* 36 y00 y00)) ?x90 ?x135 (* 18 x00 y) (* 3 x00 z00 z00) ?x64)))
 (let ((?x145 (+ (- (+ (- ?x138 ?x67) (* 18 x y00) ?x71) ?x74) (* y y00 z) (* 3 y00 z00 z00))))
 (let (($x150 (= (- (- ?x145 (* 2 y00 y00 z)) (* 3 y z00 z00)) 0)))
 (let ((?x105 (* y z00 z00)))
 (let ((?x103 (* y z z00)))
 (let ((?x99 (* y00 z00 z00)))
 (let ((?x86 (+ (- (- (* (- 1) y00 z z00) ?x80) ?x81) (* 18 x00 z00) (* 12 y y))))
 (let ((?x93 (+ (- ?x86 (* 24 y00 y00)) ?x90 ?x59 ?x91 (* 12 y y00) ?x64)))
 (let ((?x102 (- (+ (- (+ (- (- ?x93 ?x67) ?x94) ?x71) ?x74) ?x99) (* 18 x z00))))
 (let (($x107 (= (- (+ ?x102 ?x103) ?x105) 0)))
 (let ((?x76 (* z z00 z00)))
 (let ((?x58 (+ (- (* (- 6) y z) (* z00 z00 z00)) (* 6 z00 z00))))
 (let ((?x70 (- (- (+ (- ?x58 ?x59) (* 18 y00 z00) ?x64) ?x67) (* 6 z z00))))
 (let (($x78 (= (+ (- (+ ?x70 ?x71) ?x74) ?x76) 0)))
 (let ((?x50 (* z z)))
 (let ((?x49 (* 6 z00)))
 (let ((?x46 (* 6 z)))
 (let ((?x45 (* 12 y)))
 (let ((?x43 (* 12 y00)))
 (let ((?x29 (- 1)))
 (let ((?x40 (* ?x29 z00 z00)))
 (let ((?x44 (+ ?x40 ?x43)))
 (let ((?x47 (- ?x44 ?x45)))
 (let ((?x48 (- ?x47 ?x46)))
 (let ((?x51 (+ ?x48 ?x49 ?x50)))
 (let (($x52 (= ?x51 0)))
 (let ((?x33 (* 6 n)))
 (let ((?x30 (* ?x29 z)))
 (let ((?x34 (+ ?x30 z00 ?x33)))
 (let ((?x37 (- ?x34 ?x36)))
 (let (($x39 (= ?x37 0)))
 (let (($x224 (and $x39 $x52 $x78 $x107 $x150 $x214 $x223)))
 (let (($x554 (= $x224 false)))
 (let (($x1164 (= (+ (* (- 1) z) z00 ?x33 (* (- 6) n00)) 0)))
 (let (($x500 (not $x1164)))
 (let ((?x1204 (* 108 (* x00 x00))))
 (let ((?x486 (* y00 y00)))
 (let ((?x957 (* 96 ?x486)))
 (let ((?x892 (* 16 (* y00 y00 y00))))
 (let ((?x762 (* (- 4) (* y y y))))
 (let ((?x710 (* 108 (* x x))))
 (let ((?x460 (* y y)))
 (let ((?x705 (* 24 ?x460)))
 (let ((?x1433 (+ (* 216 (* x00 y00)) (* 108 (* y x)) (* 36 (* x00 z00)) (* (- 2) (* z00 z00 z00 x)) (* 18 (* z00 z00 x)) (* (- 12) ?x113) (* (- 1) ?x161) ?x705 ?x710 ?x762 (* 18 (* y00 z00 y)) (* 24 (* y00 z00)) (* (- 120) (* y00 y)) (* (- 24) (* z00 y)) ?x892 (* (- 6) (* z00 y y)) ?x957 (* (- 12) (* y00 y y)) (* (- 36) (* x00 y00 z00)) (* (- 108) (* x00 y)) (* (- 18) (* x00 z00 z00)) (* (- 216) (* x00 x)) ?x196 (* 2 (* x00 z00 z00 z00)) (* (- 216) (* y00 x)) (* z00 z00 y y) (* (- 10) ?x99) (* (- 36) (* z00 x)) (* 36 (* y00 z00 x)) (* 10 (* z00 z00 y)) ?x1204 (* (- 1) (* z00 z00 z00 y)))))
 (let (($x1438 (= ?x1433 0)))
 (let ((?x498 (* (- 108) x00)))
 (let ((?x441 (* (- 72) y00)))
 (let ((?x829 (* 18 (* x00 z))))
 (let ((?x789 (* (- 36) ?x486)))
 (let ((?x1001 (* z y)))
 (let ((?x499 (* (- 12) ?x1001)))
 (let ((?x501 (* y00 z)))
 (let ((?x502 (* 12 ?x501)))
 (let ((?x687 (* (- 18) (* z x))))
 (let ((?x1068 (+ (* (- 18) (* x00 y00)) (* (- 18) (* y x)) ?x687 (* (- 3) (* z00 z00 x)) (* (- 1) ?x113) (* 3 (* x00 z00 z)) (* (- 1) (* y00 z00 y)) ?x502 (* (- 6) (* y00 z00)) (* 36 (* y00 y)) (* 6 (* z00 y)) ?x499 (* (- 3) (* z00 z x)) (* 2 (* z00 y y)) ?x789 ?x829 (* z y y) (* 18 (* x00 y)) (* 3 (* x00 z00 z00)) ?x64 ?x441 (* 18 (* y00 x)) ?x71 ?x498 (* y00 z y) (* 3 ?x99) (* (- 2) (* y00 y00 z)) (* (- 3) (* z00 z00 y)))))
 (let (($x1079 (= ?x1068 0)))
 (let ((?x515 (* (- 24) ?x486)))
 (let ((?x463 (* 12 ?x460)))
 (let ((?x407 (+ (* (- 1) (* y00 z00 z)) ?x499 ?x687 (* 18 (* x00 z00)) ?x463 ?x515 ?x829 ?x502 (* 6 (* y00 z00)) (* 12 (* y00 y)) ?x64 ?x441 (* (- 6) (* z00 y)) ?x71 ?x498 ?x99 (* (- 18) (* z00 x)) (* z00 z y) (* (- 1) (* z00 z00 y)))))
 (let (($x411 (= ?x407 0)))
 (let ((?x278 (* z00 z00)))
 (let ((?x382 (* 6 ?x278)))
 (let ((?x55 (* z00 z00 z00)))
 (let ((?x371 (* (- 1) ?x55)))
 (let ((?x1039 (+ (* (- 6) ?x1001) ?x371 ?x382 (* (- 12) ?x501) (* 18 (* y00 z00)) ?x64 ?x441 (* (- 6) (* z00 z)) ?x71 ?x498 (* z00 z00 z))))
 (let (($x536 (= ?x1039 0)))
 (let (($x484 (= (+ (* (- 1) ?x278) ?x43 (* (- 12) y) (* (- 6) z) ?x49 ?x50) 0)))
 (let (($x593 (and $x1164 $x484 $x536 $x411 $x1079 $x1438 $x500)))
 (let ((@x1066 (trans (monotonicity (rewrite (= $x222 $x500)) (= $x223 (or $x500))) (rewrite (= (or $x500) $x500)) (= $x223 $x500))))
 (let ((@x842 (monotonicity (rewrite (= $x39 $x1164)) (rewrite (= $x52 $x484)) (rewrite (= $x78 $x536)) (rewrite (= $x107 $x411)) (rewrite (= $x150 $x1079)) (rewrite (= $x214 $x1438)) @x1066 (= $x224 $x593))))
 (trans @x842 (rewrite (= $x593 false)) $x554))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x226 (asserted $x225)))
 (mp @x226 (trans (quant-intro (proof-bind ?x843) $x601) @x625 $x627) false))))))))))

(:max-memory   19.24
 :memory       19.24
 :num-allocs   271423
 :rlimit-count 1476
 :time         0.00
 :total-time   0.02)
