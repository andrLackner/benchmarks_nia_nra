unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x580 (to_real b!2)))
 (let ((?x560 (to_real d!1)))
 (let ((?x62 (to_real d00)))
 (let ((?x323 (* (/ 1.0 16.0) (* ?x62 ?x560 ?x560 ?x580 ?x580))))
 (let ((?x350 (* (- (/ 1.0 16.0)) (* (to_real b00) ?x560 ?x560 ?x560 ?x580))))
 (let ((?x544 (* (- (/ 1.0 8.0)) (* ?x62 ?x580 ?x580 ?x580 (to_real y!0) (to_real y!0)))))
 (let ((?x594 (to_real a!3)))
 (let ((?x254 (* (- (/ 1.0 32.0)) (* ?x62 ?x560 ?x560 ?x560 ?x580 ?x580 ?x594 ?x594 ?x594))))
 (let ((?x255 (* (/ 1.0 32.0) (* (to_real b00) ?x560 ?x560 ?x560 ?x560 ?x580 ?x594 ?x594 ?x594))))
 (let ((?x176 (* (/ 1.0 8.0) (* (to_real b00) ?x560 ?x580 ?x580 (to_real y!0) (to_real y!0)))))
 (let ((?x400 (+ ?x176 ?x255 ?x254 ?x544 ?x350 ?x323)))
 (let (($x412 (<= ?x400 0.0)))
 (let (($x373 (not $x412)))
 (let (($x327 (= 0.0 ?x400)))
 (let (($x450 (not $x327)))
 (let ((@x447 (symm (commutativity (= $x327 (= ?x400 0.0))) (= (= ?x400 0.0) $x327))))
 (let (($x494 (= ?x400 0.0)))
 (let (($x401 (not $x494)))
 (let ((?x378 (* (/ 3.0 32.0) (* (to_real b00) ?x560 ?x560 ?x560 ?x560 ?x580 ?x580 ?x580 ?x594))))
 (let ((?x99 (* (/ 1.0 32.0) (* (to_real b00) ?x560 ?x560 ?x560 ?x560 ?x580 ?x580 ?x580 ?x580))))
 (let ((?x469 (* (/ 3.0 32.0) (* (to_real b00) ?x560 ?x560 ?x560 ?x560 ?x580 ?x580 ?x594 ?x594))))
 (let ((?x538 (+ ?x176 ?x469 (* (- (/ 1.0 32.0)) (* ?x62 ?x560 ?x560 ?x580 ?x580 ?x580)) (* (- (/ 3.0 32.0)) (* ?x62 ?x560 ?x560 ?x560 ?x580 ?x580 ?x580 ?x594 ?x594)) (* (- (/ 1.0 32.0)) (* ?x62 ?x560 ?x560 ?x560 ?x580 ?x580 ?x580 ?x580 ?x580)) ?x99 ?x378 ?x255 ?x254 ?x544 (* (- (/ 1.0 8.0)) (* ?x62 ?x560 ?x580 ?x580 ?x580 (to_real y!0))) (* (- (/ 3.0 32.0)) (* ?x62 ?x560 ?x560 ?x560 ?x580 ?x580 ?x580 ?x580 ?x594)) (* (/ 1.0 8.0) (* (to_real b00) ?x560 ?x560 ?x580 ?x580 (to_real y!0))) ?x350 ?x323 (* (/ 1.0 32.0) (* (to_real b00) ?x560 ?x560 ?x560 ?x580 ?x580)))))
 (let (($x454 (= ?x538 0.0)))
 (let (($x116 (= 0.0 ?x538)))
 (let (($x211 (<= ?x538 0.0)))
 (let ((?x285 (+ (* d00 b!2) (* (- 1) (* b00 d!1)))))
 (let (($x322 (>= ?x285 0)))
 (let (($x530 (= 0 ?x285)))
 (let ((@x497 (symm (commutativity (= $x530 (= ?x285 0))) (= (= ?x285 0) $x530))))
 (let (($x590 (= ?x285 0)))
 (let (($x527 (or $x401 (not $x454))))
 (let ((?x399 (+ (* 2 (* y00 b!2)) (* d!1 a!3) (* (- 1) (* a00 d!1)) (* (- 2) (* y!0 b!2)))))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x151 (= (+ ?x35 ?x104 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x492 (and $x151 $x590 (= ?x399 0) $x527)))
 (let ((?x251 (* (/ 3.0 32.0) (* ?x580 ?x580 ?x560 ?x560 ?x560 ?x560 (to_real b00) ?x594 ?x594))))
 (let ((?x616 (* (/ 3.0 32.0) (* ?x580 ?x580 ?x580 ?x560 ?x560 ?x560 ?x560 (to_real b00) ?x594))))
 (let ((?x612 (* (/ 1.0 32.0) (* ?x580 ?x580 ?x580 ?x580 ?x560 ?x560 ?x560 ?x560 (to_real b00)))))
 (let ((?x242 (* (- (/ 1.0 8.0)) (* ?x580 ?x580 ?x580 ?x62 (to_real y!0) (to_real y!0)))))
 (let ((?x598 (* (/ 1.0 32.0) (* ?x580 ?x560 ?x560 ?x560 ?x560 (to_real b00) ?x594 ?x594 ?x594))))
 (let ((?x596 (* (- (/ 1.0 32.0)) (* ?x580 ?x580 ?x560 ?x560 ?x560 ?x62 ?x594 ?x594 ?x594))))
 (let ((?x593 (* (- (/ 1.0 16.0)) (* ?x580 ?x560 ?x560 ?x560 (to_real b00)))))
 (let ((?x561 (* (/ 1.0 16.0) (* ?x580 ?x580 ?x560 ?x560 ?x62))))
 (let ((?x588 (* (/ 1.0 8.0) (* ?x580 ?x580 ?x560 (to_real b00) (to_real y!0) (to_real y!0)))))
 (let ((?x199 (+ ?x588 ?x561 ?x593 ?x596 (* (/ 1.0 32.0) (* ?x580 ?x580 ?x560 ?x560 ?x560 (to_real b00))) (* (/ 1.0 8.0) (* ?x580 ?x580 ?x560 ?x560 (to_real b00) (to_real y!0))) ?x598 ?x242 (* (- (/ 1.0 32.0)) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x560 ?x560 ?x560 ?x62)) (* (- (/ 3.0 32.0)) (* ?x580 ?x580 ?x580 ?x580 ?x560 ?x560 ?x560 ?x62 ?x594)) (* (- (/ 3.0 32.0)) (* ?x580 ?x580 ?x580 ?x560 ?x560 ?x560 ?x62 ?x594 ?x594)) ?x612 ?x616 ?x251 (* (- (/ 1.0 32.0)) (* ?x580 ?x580 ?x580 ?x560 ?x560 ?x62)) (* (- (/ 1.0 8.0)) (* ?x580 ?x580 ?x580 ?x560 ?x62 (to_real y!0))))))
 (let (($x535 (or (not (= (+ ?x588 ?x561 ?x593 ?x596 ?x598 ?x242) 0.0)) (not (= ?x199 0.0)))))
 (let ((?x582 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x214 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x104 (* 2 (* y!0 b00))) 0)))
 (let (($x425 (and $x214 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x582 0) $x535)))
 (let (($x140 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y)))
 (let ((?x62 (to_real d00)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x70 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x311 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67))))
 (let ((?x259 (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x70 ?x70 ?x70))))
 (let ((?x310 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x70 ?x70 ?x70))))
 (let ((?x309 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x64))))
 (let ((?x308 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x62))))
 (let ((?x130 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x64 ?x67 ?x67))))
 (let ((?x636 (+ ?x130 ?x308 ?x309 ?x310 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x64 ?x67)) ?x259 ?x311 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x70)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x70 ?x70)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x70)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x70 ?x70)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67)))))
 (let (($x129 (or (not (= (+ ?x130 ?x308 ?x309 ?x310 ?x259 ?x311) 0.0)) (not (= ?x636 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x173 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (and $x136 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x173 0) $x129))))))))))))))))))))) :qid k!33))
 ))
 (let (($x263 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y)))
 (let ((?x532 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d00)))
 (let ((?x174 (* ?x62 ?x56 ?x56 ?x56 ?x532 ?x532)))
 (let ((?x70 (to_real a)))
 (let ((?x249 (+ ?x70 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x64 (to_real b00)))
 (let ((?x144 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x249 ?x249 ?x249)))
 (let ((?x385 (* ?x64 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x153 (* (- (/ 1.0 16.0)) ?x385)))
 (let ((?x207 (* ?x62 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x152 (* (/ 1.0 16.0) ?x207)))
 (let ((?x396 (+ ?x152 ?x153 (* (/ 1.0 8.0) (* ?x64 ?x59 ?x56 ?x56 ?x532 ?x532)) (* (- (/ 1.0 32.0)) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x249 ?x249 ?x249)) (* (/ 1.0 32.0) ?x144) (* (- (/ 1.0 8.0)) ?x174))))
 (let ((?x300 (+ ?x152 ?x153 (* (/ 1.0 8.0) (* ?x64 ?x67 ?x67 ?x59 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x70 ?x70 ?x70)) (* (/ 1.0 32.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x70 ?x70 ?x70)) (* (- (/ 1.0 8.0)) (* ?x62 ?x67 ?x67 ?x56 ?x56 ?x56)))))
 (let ((?x449 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x503 (= ?x449 0)))
 (let ((?x513 (* d00 a)))
 (let ((?x299 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x513)))
 (and (= ?x299 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x503 (or (not (= ?x300 0.0)) (not (= ?x396 0.0)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x328 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y)))
 (let ((?x62 (to_real d00)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x70 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x311 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67))))
 (let ((?x259 (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x70 ?x70 ?x70))))
 (let ((?x310 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x70 ?x70 ?x70))))
 (let ((?x309 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x64))))
 (let ((?x308 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x62))))
 (let ((?x130 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x64 ?x67 ?x67))))
 (let ((?x636 (+ ?x130 ?x308 ?x309 ?x310 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x64 ?x67)) ?x259 ?x311 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x70)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x70 ?x70)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x70)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x64 ?x70 ?x70)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67)))))
 (let (($x129 (or (not (= (+ ?x130 ?x308 ?x309 ?x310 ?x259 ?x311) 0.0)) (not (= ?x636 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x173 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (let (($x643 (and $x136 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x173 0) $x129)))
 (let ((?x532 (+ ?x67 (* (/ 1.0 2.0) ?x59))))
 (let ((?x174 (* ?x62 ?x56 ?x56 ?x56 ?x532 ?x532)))
 (let ((?x249 (+ ?x70 ?x56)))
 (let ((?x144 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x249 ?x249 ?x249)))
 (let ((?x385 (* ?x64 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x153 (* (- (/ 1.0 16.0)) ?x385)))
 (let ((?x207 (* ?x62 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x152 (* (/ 1.0 16.0) ?x207)))
 (let ((?x396 (+ ?x152 ?x153 (* (/ 1.0 8.0) (* ?x64 ?x59 ?x56 ?x56 ?x532 ?x532)) (* (- (/ 1.0 32.0)) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x249 ?x249 ?x249)) (* (/ 1.0 32.0) ?x144) (* (- (/ 1.0 8.0)) ?x174))))
 (let ((?x300 (+ ?x152 ?x153 (* (/ 1.0 8.0) (* ?x64 ?x67 ?x67 ?x59 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x70 ?x70 ?x70)) (* (/ 1.0 32.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x70 ?x70 ?x70)) (* (- (/ 1.0 8.0)) (* ?x62 ?x67 ?x67 ?x56 ?x56 ?x56)))))
 (let ((?x449 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x503 (= ?x449 0)))
 (let ((?x513 (* d00 a)))
 (let (($x157 (= (+ (* 2 ?x103) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x513) 0)))
 (let (($x415 (and $x157 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x503 (or (not (= ?x300 0.0)) (not (= ?x396 0.0))))))
 (rewrite (= $x415 $x643)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x559 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y)))
 (let ((?x532 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d00)))
 (let ((?x174 (* ?x62 ?x56 ?x56 ?x56 ?x532 ?x532)))
 (let ((?x70 (to_real a)))
 (let ((?x249 (+ ?x70 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x64 (to_real b00)))
 (let ((?x144 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x249 ?x249 ?x249)))
 (let ((?x385 (* ?x64 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x389 (* (/ 1.0 16.0) ?x385)))
 (let ((?x207 (* ?x62 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x248 (* (- (/ 1.0 16.0)) ?x207)))
 (let ((?x193 (+ ?x248 ?x389 (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x56 ?x56 ?x532 ?x532)) (* (/ 1.0 32.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x249 ?x249 ?x249)) (* (- (/ 1.0 32.0)) ?x144) (* (/ 1.0 8.0) ?x174))))
 (let ((?x539 (+ ?x248 ?x389 (* (- (/ 1.0 8.0)) (* ?x64 ?x67 ?x67 ?x59 ?x56 ?x56)) (* (/ 1.0 32.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x70 ?x70 ?x70)) (* (- (/ 1.0 32.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x70 ?x70 ?x70)) (* (/ 1.0 8.0) (* ?x62 ?x67 ?x67 ?x56 ?x56 ?x56)))))
 (let ((?x449 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x503 (= ?x449 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x364 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x364 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x503 (or (not (= ?x539 0.0)) (not (= ?x193 0.0)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x372 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y)))
 (let ((?x532 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d00)))
 (let ((?x174 (* ?x62 ?x56 ?x56 ?x56 ?x532 ?x532)))
 (let ((?x70 (to_real a)))
 (let ((?x249 (+ ?x70 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x64 (to_real b00)))
 (let ((?x144 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x249 ?x249 ?x249)))
 (let ((?x385 (* ?x64 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x153 (* (- (/ 1.0 16.0)) ?x385)))
 (let ((?x207 (* ?x62 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x152 (* (/ 1.0 16.0) ?x207)))
 (let ((?x396 (+ ?x152 ?x153 (* (/ 1.0 8.0) (* ?x64 ?x59 ?x56 ?x56 ?x532 ?x532)) (* (- (/ 1.0 32.0)) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x249 ?x249 ?x249)) (* (/ 1.0 32.0) ?x144) (* (- (/ 1.0 8.0)) ?x174))))
 (let ((?x300 (+ ?x152 ?x153 (* (/ 1.0 8.0) (* ?x64 ?x67 ?x67 ?x59 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x70 ?x70 ?x70)) (* (/ 1.0 32.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x70 ?x70 ?x70)) (* (- (/ 1.0 8.0)) (* ?x62 ?x67 ?x67 ?x56 ?x56 ?x56)))))
 (let ((?x449 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x503 (= ?x449 0)))
 (let ((?x513 (* d00 a)))
 (let ((?x299 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x513)))
 (let (($x415 (and (= ?x299 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x503 (or (not (= ?x300 0.0)) (not (= ?x396 0.0))))))
 (let ((?x389 (* (/ 1.0 16.0) ?x385)))
 (let ((?x248 (* (- (/ 1.0 16.0)) ?x207)))
 (let ((?x193 (+ ?x248 ?x389 (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x56 ?x56 ?x532 ?x532)) (* (/ 1.0 32.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x249 ?x249 ?x249)) (* (- (/ 1.0 32.0)) ?x144) (* (/ 1.0 8.0) ?x174))))
 (let ((?x539 (+ ?x248 ?x389 (* (- (/ 1.0 8.0)) (* ?x64 ?x67 ?x67 ?x59 ?x56 ?x56)) (* (/ 1.0 32.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x70 ?x70 ?x70)) (* (- (/ 1.0 32.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x70 ?x70 ?x70)) (* (/ 1.0 8.0) (* ?x62 ?x67 ?x67 ?x56 ?x56 ?x56)))))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x386 (and (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) ?x513)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x503 (or (not (= ?x539 0.0)) (not (= ?x193 0.0))))))
 (rewrite (= $x386 $x415))))))))))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x67 (to_real y)))
 (let ((?x80 (+ ?x67 ?x60)))
 (let ((?x62 (to_real d00)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x64 (to_real b00)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 ?x58 ?x60 ?x60 ?x62) (* ?x58 ?x64 ?x60 ?x60 ?x60))))
 (let ((?x86 (+ (- ?x66 (* ?x58 ?x58 ?x64 ?x60 ?x80 ?x80)) (* ?x84 ?x84 ?x84 ?x58 ?x58 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x90 (+ (- ?x86 (* ?x84 ?x84 ?x84 ?x58 ?x64 ?x60 ?x60 ?x60 ?x60)) (* ?x58 ?x58 ?x58 ?x62 ?x80 ?x80))))
 (let ((?x70 (to_real a)))
 (let ((?x72 (+ (- ?x66 (* ?x58 ?x58 ?x64 ?x60 ?x67 ?x67)) (* ?x70 ?x70 ?x70 ?x58 ?x58 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x76 (+ (- ?x72 (* ?x70 ?x70 ?x70 ?x58 ?x64 ?x60 ?x60 ?x60 ?x60)) (* ?x58 ?x58 ?x58 ?x62 ?x67 ?x67))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x76 ?x77)) (not (= ?x90 ?x77))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x461 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y)))
 (let ((?x532 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d00)))
 (let ((?x174 (* ?x62 ?x56 ?x56 ?x56 ?x532 ?x532)))
 (let ((?x70 (to_real a)))
 (let ((?x249 (+ ?x70 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x64 (to_real b00)))
 (let ((?x144 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x249 ?x249 ?x249)))
 (let ((?x385 (* ?x64 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x389 (* (/ 1.0 16.0) ?x385)))
 (let ((?x207 (* ?x62 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x248 (* (- (/ 1.0 16.0)) ?x207)))
 (let ((?x193 (+ ?x248 ?x389 (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x56 ?x56 ?x532 ?x532)) (* (/ 1.0 32.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x249 ?x249 ?x249)) (* (- (/ 1.0 32.0)) ?x144) (* (/ 1.0 8.0) ?x174))))
 (let ((?x539 (+ ?x248 ?x389 (* (- (/ 1.0 8.0)) (* ?x64 ?x67 ?x67 ?x59 ?x56 ?x56)) (* (/ 1.0 32.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x70 ?x70 ?x70)) (* (- (/ 1.0 32.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x70 ?x70 ?x70)) (* (/ 1.0 8.0) (* ?x62 ?x67 ?x67 ?x56 ?x56 ?x56)))))
 (let ((?x449 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x503 (= ?x449 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x364 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x386 (and $x364 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x503 (or (not (= ?x539 0.0)) (not (= ?x193 0.0))))))
 (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x80 (+ ?x67 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 ?x58 ?x60 ?x60 ?x62) (* ?x58 ?x64 ?x60 ?x60 ?x60))))
 (let ((?x86 (+ (- ?x66 (* ?x58 ?x58 ?x64 ?x60 ?x80 ?x80)) (* ?x84 ?x84 ?x84 ?x58 ?x58 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x90 (+ (- ?x86 (* ?x84 ?x84 ?x84 ?x58 ?x64 ?x60 ?x60 ?x60 ?x60)) (* ?x58 ?x58 ?x58 ?x62 ?x80 ?x80))))
 (let ((?x72 (+ (- ?x66 (* ?x58 ?x58 ?x64 ?x60 ?x67 ?x67)) (* ?x70 ?x70 ?x70 ?x58 ?x58 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x76 (+ (- ?x72 (* ?x70 ?x70 ?x70 ?x58 ?x64 ?x60 ?x60 ?x60 ?x60)) (* ?x58 ?x58 ?x58 ?x62 ?x67 ?x67))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x94 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x76 ?x77)) (not (= ?x90 ?x77))))))
 (rewrite (= $x94 $x386))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x583 (mp (mp @x96 (quant-intro (proof-bind ?x461) (= $x95 $x559)) $x559) (rewrite (= $x559 $x559)) $x559)))
 (let ((@x457 (mp (mp @x583 (quant-intro (proof-bind ?x372) (= $x559 $x263)) $x263) (quant-intro (proof-bind ?x328) (= $x263 $x140)) $x140)))
 (let ((@x170 (mp (mp~ @x457 (sk (~ $x140 $x425)) $x425) (rewrite (= $x425 $x492)) $x492)))
 (let ((@x201 (mp (and-elim @x170 $x590) @x497 $x530)))
 (let ((@x156 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x530) $x322)) @x201 $x322)))
 (let (($x159 (<= ?x285 0)))
 (let ((@x205 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x530) $x159)) @x201 $x159)))
 (let ((@x243 (unit-resolution ((_ th-lemma arith) (or $x211 (not $x322) (not $x159))) @x205 @x156 (hypothesis (not $x211)) false)))
 (let (($x158 (>= ?x538 0.0)))
 (let ((@x191 (unit-resolution ((_ th-lemma arith) (or $x158 (not $x322) (not $x159))) @x205 @x156 (hypothesis (not $x158)) false)))
 (let ((@x436 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x116 (not $x211) (not $x158))) (lemma @x191 $x158) (or $x116 (not $x211)))))
 (let ((@x442 (mp (unit-resolution @x436 (lemma @x243 $x211) $x116) (commutativity (= $x116 $x454)) $x454)))
 (let ((@x453 (mp (unit-resolution (and-elim @x170 $x527) @x442 $x401) (monotonicity @x447 (= $x401 $x450)) $x450)))
 (let (($x420 (>= ?x400 0.0)))
 (let ((@x120 (unit-resolution ((_ th-lemma arith) (or $x420 (not $x322) (not $x159))) @x205 @x156 (hypothesis (not $x420)) false)))
 (let ((@x507 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x327 $x373 (not $x420))) (lemma @x120 $x420) @x453 $x373)))
 (unit-resolution ((_ th-lemma arith) (or (not $x159) (not $x322) $x412)) @x205 @x156 @x507 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       27
 :arith-eq-adapter                28
 :arith-bound-propagations-cheap  67
 :arith-bound-propagations-lp     8
 :arith-conflicts                 140
 :arith-diseq                     53
 :arith-gcd-calls                 5
 :arith-grobner-calls             6
 :arith-grobner-conflicts         4
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 20
 :arith-lower                     107
 :arith-make-feasible             83
 :arith-max-columns               55
 :arith-max-rows                  11
 :arith-nla-explanations          111
 :arith-nla-lemmas                138
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              67
 :arith-upper                     82
 :conflicts                       14
 :decisions                       141
 :del-clause                      112
 :final-checks                    42
 :max-memory                      4.74
 :memory                          3.15
 :mk-bool-var                     263
 :mk-clause                       210
 :num-allocs                      6031706
 :num-checks                      1
 :propagations                    147
 :rlimit-count                    6557
 :time                            0.03
 :total-time                      0.03)
