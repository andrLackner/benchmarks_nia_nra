unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x563 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x95 (<= ?x563 (- 6))))
 (let (($x368 (= ?x563 (- 6))))
 (let ((?x272 (+ c!3 k!2)))
 (let ((?x369 (+ m!1 k!2)))
 (let ((?x170 (+ 6 m!1)))
 (let ((?x288 (+ 1 n!0)))
 (let ((?x364 (+ (* 6 (* ?x288 ?x170 ?x170 ?x170 ?x369 ?x369 ?x369 ?x272 ?x272)) (* (- 1) (* ?x288 ?x170 ?x170 ?x170 ?x170 ?x369 ?x369 ?x369 ?x272 ?x272)) (* (- 1) (* ?x288 ?x288 ?x288 ?x170 ?x170 ?x369 ?x272 ?x272)) (* 6 (* ?x288 ?x288 ?x288 ?x288 ?x170 ?x369 ?x272 ?x272)) (* 6 (* ?x288 ?x288 ?x170 ?x170 ?x170 ?x369 ?x369 ?x369 ?x272 ?x272)) (* 6 (* ?x288 ?x288 ?x288 ?x170 ?x369 ?x272 ?x272)))))
 (let (($x543 (= ?x364 0)))
 (let (($x512 (not $x543)))
 (let (($x293 (= (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2)) (- 1))))
 (let (($x151 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 3) c!3) (* (- 1) k!2)) (- 1))))
 (let ((?x252 (* k!2 k!2)))
 (let ((?x249 (+ (* 9 n!0) (* (- 9) (* n!0 c!3)) (* (- 18) c!3) ?x252 (* (- 5) k!2))))
 (let (($x343 (and $x368 (= ?x249 (- 4)) $x151 $x293 $x512)))
 (let ((?x271 (+ k!2 m!1)))
 (let ((?x231 (+ (* ?x288 ?x288 ?x288 ?x170 ?x170 ?x271 ?x272 ?x272) (* ?x288 ?x170 ?x170 ?x170 ?x170 ?x271 ?x271 ?x271 ?x272 ?x272) (* (- 6) (* ?x288 ?x170 ?x170 ?x170 ?x271 ?x271 ?x271 ?x272 ?x272)) (* (- 6) (* ?x288 ?x288 ?x288 ?x170 ?x271 ?x272 ?x272)) (* (- 6) (* ?x288 ?x288 ?x170 ?x170 ?x170 ?x271 ?x271 ?x271 ?x272 ?x272)) (* (- 6) (* ?x288 ?x288 ?x288 ?x288 ?x170 ?x271 ?x272 ?x272)))))
 (let (($x147 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x125 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x252) (* 9 (* c!3 n!0)))))
 (let (($x229 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x125 4) $x147 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x231 0)))))
 (let (($x345 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x407 (* (- 6) (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x444 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x376 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x98 (* (- 6) (* ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x192 (* ?x305 ?x302 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x122 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x68 ?x68)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x204 $x256 $x294 (not (= (+ ?x122 ?x192 ?x98 ?x376 ?x444 ?x407) 0)))))))))))))))))))))) :qid k!34))
 ))
 (let (($x406 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x376 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x407 (* (- 6) (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x444 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x122 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x68 ?x68)))
 (let ((?x98 (* (- 6) (* ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x192 (* ?x305 ?x302 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let (($x178 (not (= (+ ?x192 ?x98 ?x122 ?x444 ?x407 ?x376) 0))))
 (let (($x155 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x300 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x300 $x155 $x178)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x511 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x407 (* (- 6) (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x444 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x376 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x98 (* (- 6) (* ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x192 (* ?x305 ?x302 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x122 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x68 ?x68)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x238 (and $x120 $x204 $x256 $x294 (not (= (+ ?x122 ?x192 ?x98 ?x376 ?x444 ?x407) 0)))))
 (let (($x178 (not (= (+ ?x192 ?x98 ?x122 ?x444 ?x407 ?x376) 0))))
 (let (($x155 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x300 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x518 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x300 $x155 $x178)))
 (rewrite (= $x518 $x238)))))))))))))))))))))))))))
 ))
 (let (($x191 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x376 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x407 (* (- 6) (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x444 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x122 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x68 ?x68)))
 (let ((?x98 (* (- 6) (* ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x192 (* ?x305 ?x302 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let (($x178 (not (= (+ ?x192 ?x98 ?x122 ?x444 ?x407 ?x376) 0))))
 (let (($x155 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x245 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x536 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= ?x536 (- 4)) $x245 $x155 $x178)))))))))))))))))) :qid k!34))
 ))
 (let ((?x405 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x376 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x407 (* (- 6) (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x444 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x122 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x68 ?x68)))
 (let ((?x98 (* (- 6) (* ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x192 (* ?x305 ?x302 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let (($x178 (not (= (+ ?x192 ?x98 ?x122 ?x444 ?x407 ?x376) 0))))
 (let (($x155 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x300 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x518 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x300 $x155 $x178)))
 (let (($x245 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x536 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x199 (and $x120 (= ?x536 (- 4)) $x245 $x155 $x178)))
 (rewrite (= $x199 $x518)))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (- (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x80 (- (+ ?x74 (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (- ?x80 (* 6 ?x68 ?x68 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x194 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x376 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x407 (* (- 6) (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x69 ?x68 ?x68))))
 (let ((?x444 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x122 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x68 ?x68)))
 (let ((?x98 (* (- 6) (* ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x192 (* ?x305 ?x302 ?x302 ?x302 ?x302 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let (($x178 (not (= (+ ?x192 ?x98 ?x122 ?x444 ?x407 ?x376) 0))))
 (let (($x155 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x245 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x536 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x199 (and $x120 (= ?x536 (- 4)) $x245 $x155 $x178)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (- (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x80 (- (+ ?x74 (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (- ?x80 (* 6 ?x68 ?x68 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x199))))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x521 (mp (mp @x88 (quant-intro (proof-bind ?x194) (= $x87 $x191)) $x191) (rewrite (= $x191 $x191)) $x191)))
 (let ((@x224 (mp (mp @x521 (quant-intro (proof-bind ?x405) (= $x191 $x406)) $x406) (quant-intro (proof-bind ?x511) (= $x406 $x345)) $x345)))
 (let ((@x409 (mp (mp~ @x224 (sk (~ $x345 $x229)) $x229) (rewrite (= $x229 $x343)) $x343)))
 (let ((@x163 (and-elim @x409 $x368)))
 (let ((@x166 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x368) $x95)) @x163 $x95)))
 (let (($x217 (>= ?x563 (- 6))))
 (let ((@x562 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x368) $x217)) @x163 $x217)))
 (let (($x104 (not (<= ?x364 0))))
 (let (($x384 (>= ?x364 0)))
 (let ((@x115 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x543 $x104 (not $x384))) (and-elim @x409 $x512) (or $x104 (not $x384)))))
 (let ((@x304 (unit-resolution @x115 (lemma ((_ th-lemma arith) (hypothesis (not $x384)) @x562 @x166 false) $x384) $x104)))
 ((_ th-lemma arith) @x304 @x562 @x166 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             165
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.62
 :memory                    3.11
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1175627
 :num-checks                1
 :propagations              11
 :rlimit-count              4075
 :time                      0.01
 :total-time                0.01)
