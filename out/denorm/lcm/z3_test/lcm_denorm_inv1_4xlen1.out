unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun y!2 () Int)
(declare-fun k!10 () Int)
(declare-fun x!3 () Int)
(declare-fun k!00 () Int)
(declare-fun v!4 () Int)
(proof
(let ((?x120 (* (- 1) k!10)))
 (let ((?x110 (* u!5 x!3)))
 (let ((?x75 (* (- 1) k!00)))
 (let ((?x74 (* v!4 y!2)))
 (let ((?x333 (+ ?x74 ?x75 ?x110 ?x120)))
 (let ((?x361 (+ x!3 (* (- 1) y!2))))
 (let ((?x144 (+ u!5 v!4)))
 (let ((?x280 (* ?x144 ?x144 ?x144 ?x144 ?x144 ?x144 ?x361 ?x361 ?x361 ?x333 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5 u!5)))
 (let (($x279 (= ?x280 0)))
 (let (($x97 (<= ?x333 0)))
 (let (($x101 (= ?x333 0)))
 (let ((?x338 (+ (* (- 1) x!3) y!2)))
 (let ((?x382 (* ?x144 ?x144 ?x144 ?x144 ?x144 ?x144 ?x338 ?x338 ?x338 ?x338 ?x333 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let (($x374 (= ?x382 0)))
 (let (($x381 (or (not $x279) (not $x374))))
 (let (($x369 (and $x101 $x381)))
 (let ((?x136 (+ ?x110 ?x74 ?x75 ?x120)))
 (let ((?x355 (* ?x144 ?x144 ?x144 ?x144 ?x144 ?x144 ?x361 ?x361 ?x361 ?x136 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5 u!5)))
 (let ((?x335 (* ?x144 ?x144 ?x144 ?x144 ?x144 ?x144 ?x338 ?x338 ?x338 ?x338 ?x136 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let (($x80 (and (= ?x136 0) (or (not (= ?x335 0)) (not (= ?x355 0))))))
 (let (($x386 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x120 (* (- 1) k!10)))
 (let ((?x75 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x327 (+ ?x33 ?x34 ?x75 ?x120)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x51 (+ u v)))
 (let ((?x353 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x77 ?x77 ?x77 ?x327 y y y y u u u u u u)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x100 (+ ?x89 y)))
 (let ((?x310 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x100 ?x100 ?x100 ?x100 ?x327 x x x v v v v v v)))
 (and (= ?x327 0) (or (not (= ?x310 0)) (not (= ?x353 0))))))))))))))) :qid k!29))
 ))
 (let (($x130 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x120 (* (- 1) k!10)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x90 (+ y ?x89)))
 (let ((?x127 (* ?x90 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x75 (* (- 1) k!00)))
 (let ((?x129 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x90 ?x90 ?x90 ?x90 (+ ?x75 ?x52 ?x127 ?x120) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x125 (* ?x77 u)))
 (let ((?x67 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x75 ?x125 ?x45 ?x120) y y y y u u u u u u)))
 (and (= (+ ?x75 (* x u) (* y v) ?x120) 0) (or (not (= ?x67 0)) (not (= ?x129 0))))))))))))))))) :qid k!29))
 ))
 (let ((?x356 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x120 (* (- 1) k!10)))
 (let ((?x75 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x327 (+ ?x33 ?x34 ?x75 ?x120)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x51 (+ u v)))
 (let ((?x353 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x77 ?x77 ?x77 ?x327 y y y y u u u u u u)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x100 (+ ?x89 y)))
 (let ((?x310 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x100 ?x100 ?x100 ?x100 ?x327 x x x v v v v v v)))
 (let (($x416 (and (= ?x327 0) (or (not (= ?x310 0)) (not (= ?x353 0))))))
 (let ((?x90 (+ y ?x89)))
 (let ((?x129 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x90 ?x90 ?x90 ?x90 (+ ?x75 (* ?x51 x) (* ?x90 v) ?x120) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x67 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x75 (* ?x77 u) (* ?x44 y) ?x120) y y y y u u u u u u)))
 (let (($x118 (and (= (+ ?x75 (* x u) (* y v) ?x120) 0) (or (not (= ?x67 0)) (not (= ?x129 0))))))
 (rewrite (= $x118 $x416))))))))))))))))))))
 ))
 (let (($x103 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x90 (+ y ?x89)))
 (let ((?x127 (* ?x90 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x339 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x90 ?x90 ?x90 ?x90 (+ ?x71 ?x52 ?x127 ?x87) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x125 (* ?x77 u)))
 (let ((?x112 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x71 ?x125 ?x45 ?x87) y y y y u u u u u u)))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x112 0)) (not (= ?x339 0)))))))))))))))))) :qid k!29))
 ))
 (let ((?x142 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x120 (* (- 1) k!10)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x90 (+ y ?x89)))
 (let ((?x127 (* ?x90 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x75 (* (- 1) k!00)))
 (let ((?x129 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x90 ?x90 ?x90 ?x90 (+ ?x75 ?x52 ?x127 ?x120) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x125 (* ?x77 u)))
 (let ((?x67 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x75 ?x125 ?x45 ?x120) y y y y u u u u u u)))
 (let (($x118 (and (= (+ ?x75 (* x u) (* y v) ?x120) 0) (or (not (= ?x67 0)) (not (= ?x129 0))))))
 (let ((?x339 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x90 ?x90 ?x90 ?x90 (+ (* (- 1) (* u00 x00)) ?x52 ?x127 (* (- 1) (* v00 y00))) x x x v v v v v v)))
 (let ((?x112 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ (* (- 1) (* u00 x00)) ?x125 ?x45 (* (- 1) (* v00 y00))) y y y y u u u u u u)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x73 (* y v)))
 (let ((?x68 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x364 (and (= (+ ?x71 ?x68 ?x73 ?x87) 0) (or (not (= ?x112 0)) (not (= ?x339 0))))))
 (rewrite (= $x364 $x118)))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x51 (+ u v)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) (* ?x51 x) (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v x ?x29 ?x51 ?x51 ?x53 ?x29 v v v ?x51 ?x51 v v x x ?x53 ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x29 u u ?x44 ?x42 ?x29 u u y ?x29 ?x44 ?x44 ?x44 u u ?x44 ?x44 ?x42 ?x42 y y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))))))))) :qid k!29))
 ))
 (let ((?x124 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x90 (+ y ?x89)))
 (let ((?x127 (* ?x90 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x339 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x90 ?x90 ?x90 ?x90 (+ ?x71 ?x52 ?x127 ?x87) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x125 (* ?x77 u)))
 (let ((?x112 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x71 ?x125 ?x45 ?x87) y y y y u u u u u u)))
 (let (($x364 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x112 0)) (not (= ?x339 0))))))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v x ?x29 ?x51 ?x51 ?x53 ?x29 v v v ?x51 ?x51 v v x x ?x53 ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x29 u u ?x44 ?x42 ?x29 u u y ?x29 ?x44 ?x44 ?x44 u u ?x44 ?x44 ?x42 ?x42 y y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x364)))))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x78 (mp (mp @x63 (quant-intro (proof-bind ?x124) (= $x62 $x103)) $x103) (rewrite (= $x103 $x103)) $x103)))
 (let ((@x81 (mp (mp @x78 (quant-intro (proof-bind ?x142) (= $x103 $x130)) $x130) (quant-intro (proof-bind ?x356) (= $x130 $x386)) $x386)))
 (let ((@x281 (mp (mp~ @x81 (sk (~ $x386 $x80)) $x80) (rewrite (= $x80 $x369)) $x369)))
 (let ((@x277 (and-elim @x281 $x101)))
 (let ((@x376 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x101) $x97)) @x277 $x97)))
 (let (($x114 (>= ?x333 0)))
 (let ((@x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x101) $x114)) @x277 $x114)))
 (let (($x284 (>= ?x382 0)))
 (let ((@x384 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x284)) @x330 @x376 false) $x284) @x330 @x376 $x374)))
 (unit-resolution (and-elim @x281 $x381) @x384 ((_ th-lemma arith eq-propagate 0 0 0 0) @x330 @x376 @x330 @x376 $x279) false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        6
 :arith-conflicts           1
 :arith-eq-adapter          3
 :arith-fixed-eqs           3
 :arith-num-rows            4
 :arith-pseudo-nonlinear    4
 :arith-tableau-max-columns 15
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                3
 :eliminated-applications   2
 :max-memory                19.61
 :memory                    19.19
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                474769
 :num-checks                1
 :propagations              6
 :rlimit-count              937
 :time                      0.01
 :total-time                0.02)
