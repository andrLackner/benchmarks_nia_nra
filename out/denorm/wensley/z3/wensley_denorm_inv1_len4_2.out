unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x615 (to_real b!2)))
 (let ((?x180 (to_real d00)))
 (let ((?x188 (* ?x180 ?x615)))
 (let ((?x345 (to_real a!3)))
 (let ((?x733 (* ?x180 ?x345)))
 (let ((?x495 (+ ?x733 (* (- 1.0) (* (to_real a00) ?x180)) ?x188 (* 2.0 (* (to_real b00) (to_real y00))) (* (- 1.0) (* (to_real b00) (to_real d!1))) (* (- 2.0) (* (to_real b00) (to_real y!0))))))
 (let (($x498 (>= ?x495 0.0)))
 (let ((?x333 (to_real y!0)))
 (let ((?x76 (to_real b00)))
 (let ((?x287 (* ?x76 ?x333)))
 (let ((?x222 (+ (* (- 1.0) (to_real (* b00 y!0))) ?x287)))
 (let (($x488 (<= ?x222 0.0)))
 (let (($x415 (= ?x222 0.0)))
 (let ((@x702 (lemma (unit-resolution ((_ th-lemma arith) $x415) (hypothesis (not $x415)) false) $x415)))
 (let ((?x214 (to_real y00)))
 (let ((?x215 (* ?x76 ?x214)))
 (let ((?x728 (+ (* (- 1.0) (to_real (* b00 y00))) ?x215)))
 (let (($x228 (>= ?x728 0.0)))
 (let (($x816 (= 0.0 ?x728)))
 (let ((@x232 (symm (commutativity (= $x816 (= ?x728 0.0))) (= (= ?x728 0.0) $x816))))
 (let ((@x271 (mp ((_ th-lemma arith) (= ?x728 0.0)) @x232 $x816)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let ((?x225 (+ ?x35 ?x105 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x376 (<= ?x225 0)))
 (let (($x175 (= 0 ?x225)))
 (let ((@x544 (symm (commutativity (= $x175 (= ?x225 0))) (= (= ?x225 0) $x175))))
 (let (($x712 (= ?x225 0)))
 (let ((?x605 (to_real d!1)))
 (let ((?x821 (* ?x333 ?x605 ?x605 ?x605 ?x615 ?x615 ?x615 ?x615)))
 (let ((?x496 (* (- (/ 3.0 64.0)) ?x821)))
 (let ((?x745 (* ?x345 ?x605 ?x605 ?x605 ?x605 ?x615 ?x615 ?x615)))
 (let ((?x398 (* (- (/ 1.0 128.0)) ?x745)))
 (let ((?x706 (* ?x605 ?x615 ?x615)))
 (let ((?x275 (* (/ 1.0 8.0) ?x706)))
 (let ((?x654 (* ?x345 ?x605 ?x615 ?x615 ?x615 ?x615)))
 (let ((?x762 (* (- (/ 1.0 8.0)) ?x654)))
 (let ((?x607 (* (- (/ 1.0 2.0)) ?x615)))
 (let ((?x579 (* ?x333 ?x333 ?x333 ?x605 ?x615 ?x615 ?x615 ?x615)))
 (let ((?x515 (* (- (/ 1.0 16.0)) ?x579)))
 (let ((?x476 (* ?x333 ?x333 ?x345 ?x605 ?x605 ?x615 ?x615 ?x615)))
 (let ((?x357 (* (- (/ 3.0 32.0)) ?x476)))
 (let ((?x445 (* ?x345 ?x345 ?x605 ?x615 ?x615 ?x615)))
 (let ((?x660 (* (- (/ 1.0 16.0)) ?x445)))
 (let ((?x417 (* ?x333 ?x333 ?x605 ?x605 ?x615 ?x615 ?x615 ?x615)))
 (let ((?x406 (* (- (/ 3.0 32.0)) ?x417)))
 (let ((?x410 (* ?x333 ?x333 ?x333 ?x345 ?x605 ?x615 ?x615 ?x615)))
 (let ((?x577 (* (- (/ 1.0 16.0)) ?x410)))
 (let ((?x319 (* ?x333 ?x345 ?x605 ?x605 ?x605 ?x615 ?x615 ?x615)))
 (let ((?x347 (* (- (/ 3.0 64.0)) ?x319)))
 (let ((?x237 (* ?x605 ?x605 ?x605 ?x605 ?x615 ?x615 ?x615 ?x615)))
 (let ((?x407 (* (- (/ 1.0 128.0)) ?x237)))
 (let ((?x234 (* ?x605 ?x615 ?x615 ?x615 ?x615 ?x615)))
 (let ((?x344 (* (- (/ 1.0 16.0)) ?x234)))
 (let ((?x527 (+ ?x344 ?x407 ?x347 ?x577 ?x406 ?x660 ?x357 ?x515 ?x607 ?x762 ?x275 ?x398 ?x496)))
 (let ((?x239 (* ?x76 ?x605)))
 (let ((?x218 (* (- 2.0) ?x215)))
 (let ((?x368 (* (- 1.0) ?x188)))
 (let ((?x179 (to_real a00)))
 (let ((?x181 (* ?x179 ?x180)))
 (let ((?x819 (* (+ ?x181 ?x368 ?x218 ?x239 (* 2.0 ?x287) (* (- 1.0) ?x733)) ?x527)))
 (let (($x673 (= ?x819 0.0)))
 (let (($x590 (not $x673)))
 (let ((?x276 (+ (* (/ 1.0 8.0) (* ?x180 ?x345 ?x605 ?x615 ?x615)) (* (/ 1.0 16.0) (* ?x179 ?x180 ?x345 ?x345 ?x605 ?x615 ?x615 ?x615)) (* (/ 1.0 4.0) (* ?x76 ?x214 ?x605 ?x615 ?x615)) (* (/ 1.0 16.0) (* ?x179 ?x180 ?x333 ?x333 ?x333 ?x345 ?x605 ?x615 ?x615 ?x615)) (* (- 1.0) (* ?x76 ?x214 ?x615)) (* (/ 1.0 8.0) (* ?x76 ?x333 ?x345 ?x345 ?x605 ?x615 ?x615 ?x615)) (* (- (/ 1.0 8.0)) (* ?x76 ?x214 ?x345 ?x345 ?x605 ?x615 ?x615 ?x615)) (* (- (/ 1.0 16.0)) (* ?x180 ?x345 ?x345 ?x345 ?x605 ?x615 ?x615 ?x615)) (* ?x76 ?x333 ?x615) (* (- (/ 1.0 4.0)) (* ?x76 ?x333 ?x605 ?x615 ?x615)) (* (/ 1.0 2.0) (* ?x179 ?x180 ?x615)) (* (- (/ 1.0 2.0)) (* ?x180 ?x345 ?x615)) (* (/ 1.0 8.0) (* ?x76 ?x333 ?x333 ?x333 ?x333 ?x345 ?x605 ?x615 ?x615 ?x615)) (* (- (/ 1.0 8.0)) (* ?x179 ?x180 ?x605 ?x615 ?x615)) (* (- (/ 1.0 16.0)) (* ?x180 ?x333 ?x333 ?x333 ?x345 ?x345 ?x605 ?x615 ?x615 ?x615)) (* (- (/ 1.0 8.0)) (* ?x76 ?x214 ?x333 ?x333 ?x333 ?x345 ?x605 ?x615 ?x615 ?x615)))))
 (let (($x584 (= ?x276 0.0)))
 (let (($x656 (or (not $x584) $x590)))
 (let ((?x486 (* (- 2) (* b!2 y!0))))
 (let ((?x358 (+ (* d!1 a!3) ?x486 (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let (($x677 (= ?x358 0)))
 (let ((?x224 (* b00 d!1)))
 (let ((?x749 (+ ?x224 (* (- 1) (* d00 b!2)))))
 (let (($x815 (= ?x749 0)))
 (let (($x210 (and $x712 $x815 $x677 $x656)))
 (let ((?x149 (+ ?x607 (* (- (/ 1.0 16.0)) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x345)) (* (/ 1.0 8.0) (* ?x615 ?x615 ?x605)) (* (- (/ 1.0 16.0)) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x333 ?x333 ?x333)) (* (- (/ 1.0 16.0)) (* ?x615 ?x615 ?x615 ?x615 ?x615 ?x605)) (* (- (/ 1.0 8.0)) (* ?x615 ?x615 ?x615 ?x615 ?x605 ?x345)) (* (- (/ 1.0 16.0)) (* ?x615 ?x615 ?x615 ?x615 ?x605 ?x333 ?x333 ?x333)) (* (- (/ 1.0 128.0)) (* ?x615 ?x615 ?x615 ?x615 ?x605 ?x605 ?x605 ?x605)) (* (- (/ 1.0 128.0)) (* ?x615 ?x615 ?x615 ?x605 ?x605 ?x605 ?x605 ?x345)) (* (- (/ 3.0 64.0)) (* ?x615 ?x615 ?x615 ?x615 ?x605 ?x605 ?x605 ?x333)) (* (- (/ 3.0 64.0)) (* ?x615 ?x615 ?x615 ?x605 ?x605 ?x605 ?x345 ?x333)) (* (- (/ 3.0 32.0)) (* ?x615 ?x615 ?x615 ?x615 ?x605 ?x605 ?x333 ?x333)) (* (- (/ 3.0 32.0)) (* ?x615 ?x615 ?x615 ?x605 ?x605 ?x345 ?x333 ?x333)))))
 (let ((?x167 (+ ?x181 (* (- 1.0) (* ?x345 ?x180)) ?x218 (* (- 1.0) (* ?x615 ?x180)) (* 2.0 (* ?x333 ?x76)) (* ?x605 ?x76))))
 (let ((?x547 (+ (* (/ 1.0 2.0) (* ?x615 ?x179 ?x180)) (* (- (/ 1.0 2.0)) (* ?x615 ?x345 ?x180)) (* (- 1.0) (* ?x615 ?x76 ?x214)) (* ?x615 ?x333 ?x76) (* (/ 1.0 16.0) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x345 ?x179 ?x180)) (* (- (/ 1.0 16.0)) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x345 ?x345 ?x180)) (* (- (/ 1.0 8.0)) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x345 ?x76 ?x214)) (* (/ 1.0 8.0) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x345 ?x333 ?x76)) (* (- (/ 1.0 8.0)) (* ?x615 ?x615 ?x605 ?x179 ?x180)) (* (/ 1.0 8.0) (* ?x615 ?x615 ?x605 ?x345 ?x180)) (* (/ 1.0 4.0) (* ?x615 ?x615 ?x605 ?x76 ?x214)) (* (- (/ 1.0 4.0)) (* ?x615 ?x615 ?x605 ?x333 ?x76)) (* (/ 1.0 16.0) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x333 ?x333 ?x333 ?x179 ?x180)) (* (- (/ 1.0 16.0)) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x345 ?x333 ?x333 ?x333 ?x180)) (* (- (/ 1.0 8.0)) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x333 ?x333 ?x333 ?x76 ?x214)) (* (/ 1.0 8.0) (* ?x615 ?x615 ?x615 ?x605 ?x345 ?x333 ?x333 ?x333 ?x333 ?x76)))))
 (let ((?x531 (+ (* a!3 d!1) ?x486 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x230 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x105 (* 2 (* y!0 b00))) 0)))
 (let (($x156 (and $x230 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x531 0) (or (not (= ?x547 0.0)) (not (= (* ?x167 ?x149) 0.0))))))
 (let (($x182 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x812 (+ ?x274 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x67 ?x67 ?x67)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x67)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x67 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x67 ?x67)))))
 (let ((?x461 (* (- 1.0) (* ?x56 (to_real d00)))))
 (let ((?x214 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x215 (* ?x76 ?x214)))
 (let ((?x218 (* (- 2.0) ?x215)))
 (let ((?x199 (* (- 1.0) (* ?x62 (to_real d00)))))
 (let ((?x180 (to_real d00)))
 (let ((?x179 (to_real a00)))
 (let ((?x181 (* ?x179 ?x180)))
 (let ((?x571 (* (+ ?x181 ?x199 ?x218 ?x461 (* 2.0 (* ?x67 ?x76)) (* ?x59 ?x76)) ?x812)))
 (let ((?x473 (+ (* (/ 1.0 2.0) (* ?x56 ?x179 ?x180)) (* (- (/ 1.0 2.0)) (* ?x56 ?x62 ?x180)) (* (- 1.0) (* ?x56 ?x76 ?x214)) (* ?x56 ?x67 ?x76) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x179 ?x180)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x180)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x76 ?x214)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x67 ?x76)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x179 ?x180)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x62 ?x180)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x76 ?x214)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x67 ?x76)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67 ?x179 ?x180)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x67 ?x67 ?x67 ?x180)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67 ?x76 ?x214)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67 ?x67 ?x76)))))
 (let (($x449 (not (= ?x473 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x201 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x206 (= ?x201 0)))
 (let (($x147 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let (($x137 (= (+ ?x35 (* (- 1) (* a d00)) ?x105 (* 2 (* y b00))) 0)))
 (and $x137 $x147 $x206 (or $x449 (not (= ?x571 0.0)))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x717 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x59 (to_real d)))
 (let ((?x243 (* (/ 1.0 2.0) ?x59)))
 (let ((?x67 (to_real y)))
 (let ((?x682 (+ ?x67 ?x243)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x672 (+ ?x62 ?x56)))
 (let ((?x703 (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56))))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x130 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x672)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x682 ?x682 ?x682)))))
 (let ((?x180 (to_real d00)))
 (let ((?x179 (to_real a00)))
 (let ((?x181 (* ?x179 ?x180)))
 (let ((?x214 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x215 (* ?x76 ?x214)))
 (let ((?x218 (* (- 2.0) ?x215)))
 (let ((?x447 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x682)) (* (- 1.0) (* ?x180 ?x672))) ?x130)))
 (let ((?x744 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x67 ?x67 ?x67 ?x59 ?x56 ?x56 ?x56 ?x62)))))
 (let ((?x750 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x67)) (* (- 1.0) (* ?x180 ?x62))) ?x744)))
 (let (($x509 (or (not (= ?x750 0.0)) (not (= ?x447 0.0)))))
 (let ((?x608 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x613 (= ?x608 0)))
 (let ((?x329 (* d00 a)))
 (let ((?x729 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x329)))
 (and (= ?x729 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x613 $x509)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x300 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x812 (+ ?x274 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x67 ?x67 ?x67)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x67)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x67 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x67 ?x67)))))
 (let ((?x461 (* (- 1.0) (* ?x56 (to_real d00)))))
 (let ((?x214 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x215 (* ?x76 ?x214)))
 (let ((?x218 (* (- 2.0) ?x215)))
 (let ((?x199 (* (- 1.0) (* ?x62 (to_real d00)))))
 (let ((?x180 (to_real d00)))
 (let ((?x179 (to_real a00)))
 (let ((?x181 (* ?x179 ?x180)))
 (let ((?x571 (* (+ ?x181 ?x199 ?x218 ?x461 (* 2.0 (* ?x67 ?x76)) (* ?x59 ?x76)) ?x812)))
 (let ((?x473 (+ (* (/ 1.0 2.0) (* ?x56 ?x179 ?x180)) (* (- (/ 1.0 2.0)) (* ?x56 ?x62 ?x180)) (* (- 1.0) (* ?x56 ?x76 ?x214)) (* ?x56 ?x67 ?x76) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x179 ?x180)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x180)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x76 ?x214)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x67 ?x76)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x179 ?x180)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x62 ?x180)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x76 ?x214)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x67 ?x76)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67 ?x179 ?x180)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x67 ?x67 ?x67 ?x180)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67 ?x76 ?x214)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x67 ?x67 ?x67 ?x67 ?x76)))))
 (let (($x449 (not (= ?x473 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x201 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x206 (= ?x201 0)))
 (let (($x147 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let (($x137 (= (+ ?x35 (* (- 1) (* a d00)) ?x105 (* 2 (* y b00))) 0)))
 (let (($x600 (and $x137 $x147 $x206 (or $x449 (not (= ?x571 0.0))))))
 (let ((?x243 (* (/ 1.0 2.0) ?x59)))
 (let ((?x682 (+ ?x67 ?x243)))
 (let ((?x672 (+ ?x62 ?x56)))
 (let ((?x703 (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56))))
 (let ((?x130 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x672)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x682 ?x682 ?x682)))))
 (let ((?x447 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x682)) (* (- 1.0) (* ?x180 ?x672))) ?x130)))
 (let ((?x744 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x67 ?x67 ?x67 ?x59 ?x56 ?x56 ?x56 ?x62)))))
 (let ((?x750 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x67)) (* (- 1.0) (* ?x180 ?x62))) ?x744)))
 (let (($x509 (or (not (= ?x750 0.0)) (not (= ?x447 0.0)))))
 (let ((?x608 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x613 (= ?x608 0)))
 (let ((?x329 (* d00 a)))
 (let (($x338 (= (+ (* 2 ?x104) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x329) 0)))
 (let (($x671 (and $x338 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x613 $x509)))
 (rewrite (= $x671 $x600))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x623 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x59 (to_real d)))
 (let ((?x243 (* (/ 1.0 2.0) ?x59)))
 (let ((?x67 (to_real y)))
 (let ((?x682 (+ ?x67 ?x243)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x672 (+ ?x62 ?x56)))
 (let ((?x703 (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56))))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x130 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x672)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x682 ?x682 ?x682)))))
 (let ((?x180 (to_real d00)))
 (let ((?x179 (to_real a00)))
 (let ((?x181 (* ?x179 ?x180)))
 (let ((?x214 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x215 (* ?x76 ?x214)))
 (let ((?x218 (* (- 2.0) ?x215)))
 (let ((?x447 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x682)) (* (- 1.0) (* ?x180 ?x672))) ?x130)))
 (let ((?x744 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x67 ?x67 ?x67 ?x59 ?x56 ?x56 ?x56 ?x62)))))
 (let ((?x750 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x67)) (* (- 1.0) (* ?x180 ?x62))) ?x744)))
 (let (($x509 (or (not (= ?x750 0.0)) (not (= ?x447 0.0)))))
 (let ((?x608 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x613 (= ?x608 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x320 (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x320 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x613 $x509)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x725 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x59 (to_real d)))
 (let ((?x243 (* (/ 1.0 2.0) ?x59)))
 (let ((?x67 (to_real y)))
 (let ((?x682 (+ ?x67 ?x243)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x672 (+ ?x62 ?x56)))
 (let ((?x703 (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56))))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x130 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x672)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x682 ?x682 ?x682)))))
 (let ((?x180 (to_real d00)))
 (let ((?x179 (to_real a00)))
 (let ((?x181 (* ?x179 ?x180)))
 (let ((?x214 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x215 (* ?x76 ?x214)))
 (let ((?x218 (* (- 2.0) ?x215)))
 (let ((?x447 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x682)) (* (- 1.0) (* ?x180 ?x672))) ?x130)))
 (let ((?x744 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x67 ?x67 ?x67 ?x59 ?x56 ?x56 ?x56 ?x62)))))
 (let ((?x750 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x67)) (* (- 1.0) (* ?x180 ?x62))) ?x744)))
 (let (($x509 (or (not (= ?x750 0.0)) (not (= ?x447 0.0)))))
 (let ((?x608 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x613 (= ?x608 0)))
 (let ((?x329 (* d00 a)))
 (let ((?x729 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x329)))
 (let (($x671 (and (= ?x729 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x613 $x509)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x456 (and (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) ?x329)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x613 $x509)))
 (rewrite (= $x456 $x671)))))))))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x67 (to_real y)))
 (let ((?x75 (+ ?x67 ?x60)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x81 (+ a b)))
 (let ((?x85 (to_real ?x81)))
 (let ((?x65 (* ?x58 ?x58 ?x60)))
 (let ((?x88 (+ (- (* (to_real (- 1)) ?x85 ?x85 ?x58 ?x58 ?x58 ?x60) ?x58) ?x65)))
 (let ((?x35 (* a00 d00)))
 (let ((?x79 (to_real ?x35)))
 (let ((?x80 (+ (to_real (* (- 2) b00 y00)) ?x79 (* ?x57 (to_real b00) ?x75))))
 (let ((?x91 (* (- ?x80 (to_real (* ?x81 d00))) (- ?x88 (* ?x85 ?x58 ?x58 ?x58 ?x60 ?x75 ?x75 ?x75)))))
 (let ((?x62 (to_real a)))
 (let ((?x43 (- 1)))
 (let ((?x61 (to_real ?x43)))
 (let ((?x69 (- (+ (- (* ?x61 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60) ?x58) ?x65) (* ?x62 ?x58 ?x58 ?x58 ?x60 ?x67 ?x67 ?x67))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* (to_real ?x39) ?x69) ?x72)) (not (= ?x91 ?x72)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x752 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x59 (to_real d)))
 (let ((?x243 (* (/ 1.0 2.0) ?x59)))
 (let ((?x67 (to_real y)))
 (let ((?x682 (+ ?x67 ?x243)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x672 (+ ?x62 ?x56)))
 (let ((?x703 (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56))))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x130 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x672)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x672 ?x682 ?x682 ?x682)))))
 (let ((?x180 (to_real d00)))
 (let ((?x179 (to_real a00)))
 (let ((?x181 (* ?x179 ?x180)))
 (let ((?x214 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x215 (* ?x76 ?x214)))
 (let ((?x218 (* (- 2.0) ?x215)))
 (let ((?x447 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x682)) (* (- 1.0) (* ?x180 ?x672))) ?x130)))
 (let ((?x744 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) ?x274 ?x703 (* (- (/ 1.0 16.0)) (* ?x67 ?x67 ?x67 ?x59 ?x56 ?x56 ?x56 ?x62)))))
 (let ((?x750 (* (+ ?x218 ?x181 (* 2.0 (* ?x76 ?x67)) (* (- 1.0) (* ?x180 ?x62))) ?x744)))
 (let (($x509 (or (not (= ?x750 0.0)) (not (= ?x447 0.0)))))
 (let ((?x608 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x613 (= ?x608 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x320 (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x456 (and $x320 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x613 $x509)))
 (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x75 (+ ?x67 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x81 (+ a b)))
 (let ((?x85 (to_real ?x81)))
 (let ((?x65 (* ?x58 ?x58 ?x60)))
 (let ((?x88 (+ (- (* (to_real (- 1)) ?x85 ?x85 ?x58 ?x58 ?x58 ?x60) ?x58) ?x65)))
 (let ((?x79 (to_real ?x35)))
 (let ((?x84 (- (+ (to_real (* (- 2) b00 y00)) ?x79 (* ?x57 ?x76 ?x75)) (to_real (* ?x81 d00)))))
 (let (($x92 (= (* ?x84 (- ?x88 (* ?x85 ?x58 ?x58 ?x58 ?x60 ?x75 ?x75 ?x75))) ?x72)))
 (let ((?x66 (+ (- (* (to_real (- 1)) ?x62 ?x62 ?x58 ?x58 ?x58 ?x60) ?x58) ?x65)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let ((?x71 (* (to_real ?x39) (- ?x66 (* ?x62 ?x58 ?x58 ?x58 ?x60 ?x67 ?x67 ?x67)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x95 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x71 ?x72)) (not $x92)))))
 (rewrite (= $x95 $x456))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x507 (mp (mp @x97 (quant-intro (proof-bind ?x752) (= $x96 $x623)) $x623) (rewrite (= $x623 $x623)) $x623)))
 (let ((@x185 (mp (mp @x507 (quant-intro (proof-bind ?x725) (= $x623 $x717)) $x717) (quant-intro (proof-bind ?x300) (= $x717 $x182)) $x182)))
 (let ((@x267 (mp (mp~ @x185 (sk (~ $x182 $x156)) $x156) (rewrite (= $x156 $x210)) $x210)))
 (let ((@x545 (mp (and-elim @x267 $x712) @x544 $x175)))
 (let ((?x235 (+ ?x181 (* (- 1.0) (to_real ?x35)))))
 (let (($x403 (<= ?x235 0.0)))
 (let (($x227 (= ?x235 0.0)))
 (let ((@x788 ((_ th-lemma arith) $x227)))
 (let ((?x395 (+ ?x733 (* (- 1.0) (to_real (* d00 a!3))))))
 (let (($x809 (>= ?x395 0.0)))
 (let (($x805 (= ?x395 0.0)))
 (let ((@x551 ((_ th-lemma arith) $x805)))
 (let ((?x193 (+ (* (- 1.0) (to_real ?x224)) ?x239)))
 (let (($x280 (<= ?x193 0.0)))
 (let (($x396 (= ?x193 0.0)))
 (let ((@x510 ((_ th-lemma arith) $x396)))
 (let ((?x168 (+ ?x188 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x221 (>= ?x168 0.0)))
 (let ((@x109 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x168 0.0)) $x221)) ((_ th-lemma arith) (= ?x168 0.0)) $x221)))
 (let (($x593 (<= ?x749 0)))
 (let (($x621 (= 0 ?x749)))
 (let ((@x756 (mp (and-elim @x267 $x815) (symm (commutativity (= $x621 $x815)) (= $x815 $x621)) $x621)))
 (let ((@x757 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x621) $x593)) @x756 $x593)))
 (let ((@x508 ((_ th-lemma arith) @x757 @x109 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x396) $x280)) @x510 $x280) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x805) $x809)) @x551 $x809) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x227) $x403)) @x788 $x403) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x175) $x376)) @x545 $x376) (hypothesis (not $x498)) (hypothesis $x488) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x816) $x228)) @x271 $x228) false)))
 (let ((@x306 (unit-resolution (lemma @x508 (or (not $x488) $x498)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x415) $x488)) @x702 $x488) $x498)))
 (let ((?x375 (+ (* (/ 3.0 32.0) ?x476) (* (/ 1.0 16.0) ?x579) (* (/ 1.0 8.0) ?x654) (* (- (/ 1.0 8.0)) ?x706) (* (/ 1.0 128.0) ?x745) (* (/ 1.0 2.0) ?x615) (* (/ 3.0 64.0) ?x821) (* (/ 1.0 16.0) ?x234) (* (/ 1.0 128.0) ?x237) (* (/ 3.0 64.0) ?x319) (* (/ 1.0 16.0) ?x410) (* (/ 3.0 32.0) ?x417) (* (/ 1.0 16.0) ?x445))))
 (let (($x697 (<= ?x375 0.0)))
 (let (($x690 (not $x697)))
 (let ((?x426 (+ ?x357 ?x515 ?x762 ?x275 ?x398 ?x607 ?x496 ?x344 ?x407 ?x347 ?x577 ?x406 ?x660)))
 (let (($x649 (>= ?x426 0.0)))
 (let (($x901 (not $x649)))
 (let (($x433 (<= ?x426 0.0)))
 (let (($x886 (>= ?x375 0.0)))
 (let (($x894 (not $x886)))
 (let ((@x311 (hypothesis $x894)))
 (let (($x626 (<= ?x495 0.0)))
 (let (($x566 (>= ?x193 0.0)))
 (let ((@x719 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x396) $x566)) @x510 $x566)))
 (let (($x575 (<= ?x395 0.0)))
 (let ((@x665 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x805) $x575)) @x551 $x575)))
 (let (($x732 (<= ?x728 0.0)))
 (let ((@x205 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x816) $x732)) @x271 $x732)))
 (let (($x386 (>= ?x749 0)))
 (let ((@x134 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x621) $x386)) @x756 $x386)))
 (let (($x655 (>= ?x235 0.0)))
 (let ((@x592 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x227) $x655)) (lemma (unit-resolution @x788 (hypothesis (not $x227)) false) $x227) $x655)))
 (let (($x435 (>= ?x222 0.0)))
 (let ((@x475 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x415) $x435)) @x702 $x435)))
 (let ((?x782 (* d00 b!2)))
 (let ((?x233 (to_real ?x782)))
 (let ((?x238 (+ ?x368 ?x233)))
 (let (($x117 (>= ?x238 0.0)))
 (let (($x760 (= ?x238 0.0)))
 (let ((@x586 (lemma (unit-resolution ((_ th-lemma arith) $x760) (hypothesis (not $x760)) false) $x760)))
 (let ((@x152 ((_ th-lemma arith triangle-eq) (or (not $x760) $x117))))
 (let ((@x477 (unit-resolution @x152 @x586 $x117)))
 (let (($x190 (>= ?x225 0)))
 (let ((@x463 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x175) $x190)) @x545 $x190)))
 (let ((@x601 ((_ th-lemma arith) @x463 @x477 @x475 @x592 @x134 (hypothesis (not $x626)) @x205 @x665 @x719 false)))
 (let (($x518 (>= ?x819 0.0)))
 (let (($x910 (not $x518)))
 (let (($x692 (<= ?x819 0.0)))
 (let (($x785 (not $x692)))
 (let ((@x657 (hypothesis $x785)))
 (let (($x464 (not $x626)))
 (let ((@x693 (unit-resolution ((_ th-lemma arith) (or $x464 $x697 $x692)) @x657 (hypothesis $x690) $x464)))
 (let ((@x718 ((_ th-lemma arith) @x693 @x463 @x477 @x475 (hypothesis $x655) @x134 @x205 @x719 @x665 false)))
 (let ((@x887 (unit-resolution (lemma @x718 (or (not $x655) $x692 $x697)) @x592 (or $x692 $x697))))
 (let ((@x897 ((_ th-lemma arith) (or $x649 $x690))))
 (let ((@x313 (unit-resolution ((_ th-lemma arith) (or (not $x498) $x886 $x692)) @x657 @x306 @x311 false)))
 (let ((@x896 (lemma ((_ th-lemma arith) (hypothesis $x886) (hypothesis (not $x433)) false) (or $x894 $x433))))
 (let ((@x900 (unit-resolution @x896 (unit-resolution (lemma @x313 (or $x886 $x692)) @x657 $x886) $x433)))
 (let (($x843 (= ?x426 0.0)))
 (let (($x845 (not $x843)))
 (let (($x683 (<= ?x276 0.0)))
 (let (($x651 (>= ?x358 0)))
 (let (($x636 (= 0 ?x358)))
 (let ((@x256 (mp (and-elim @x267 $x677) (symm (commutativity (= $x636 $x677)) (= $x677 $x636)) $x636)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x636) $x651)) @x256 $x651)))
 (let (($x748 (<= ?x358 0)))
 (let ((@x141 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x636) $x748)) @x256 $x748)))
 (let ((@x441 (unit-resolution ((_ th-lemma arith) (or $x683 (not $x386) (not $x593) (not $x651) (not $x748))) @x757 @x134 @x141 @x448 (hypothesis (not $x683)) false)))
 (let (($x113 (>= ?x276 0.0)))
 (let (($x742 (<= ?x238 0.0)))
 (let ((@x792 (hypothesis $x760)))
 (let (($x123 (not $x593)))
 (let (($x107 (not $x386)))
 (let (($x124 (not $x748)))
 (let (($x115 (not $x651)))
 (let ((@x451 (unit-resolution ((_ th-lemma arith) (or $x113 $x115 $x124 (not $x742) (not $x117) $x107 $x123)) @x757 @x134 @x141 @x448 (hypothesis (not $x113)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x760) $x742)) @x792 $x742) (unit-resolution @x152 @x792 $x117) false)))
 (let ((@x879 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x584 (not $x683) (not $x113))) (unit-resolution (lemma @x451 (or (not $x760) $x113)) @x586 $x113) (lemma @x441 $x683) $x584)))
 (let ((@x881 (unit-resolution (and-elim @x267 $x656) @x879 $x590)))
 (let ((@x884 (unit-resolution ((_ th-lemma arith) (or $x845 $x673)) @x881 (hypothesis $x843) false)))
 (let ((@x905 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x843 (not $x433) $x901)) (lemma @x884 $x845) (or (not $x433) $x901))))
 (let ((@x906 (unit-resolution @x905 @x900 (unit-resolution @x897 (unit-resolution @x887 @x657 $x697) $x649) false)))
 (let (($x114 (= 0.0 ?x819)))
 (let (($x917 (not $x114)))
 (let ((@x919 (monotonicity (symm (commutativity (= $x114 $x673)) (= $x673 $x114)) (= $x590 $x917))))
 (let ((@x922 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x114 $x785 $x910)) (mp @x881 @x919 $x917) (or $x785 $x910))))
 (let ((@x923 (unit-resolution @x922 (lemma @x906 $x692) $x910)))
 (let ((@x924 (unit-resolution ((_ th-lemma arith) (or $x464 $x886 $x518)) @x923 (lemma @x601 $x626) @x311 false)))
 (let ((@x930 (unit-resolution @x905 (unit-resolution @x896 (lemma @x924 $x886) $x433) $x901)))
 (unit-resolution ((_ th-lemma arith) (or (not $x498) $x697 $x518)) @x923 (unit-resolution @x897 @x930 $x690) @x306 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       90
 :arith-eq-adapter                90
 :arith-bound-propagations-cheap  65
 :arith-bound-propagations-lp     11
 :arith-conflicts                 205
 :arith-diseq                     51
 :arith-fixed-eqs                 2
 :arith-gcd-calls                 6
 :arith-grobner-calls             11
 :arith-grobner-conflicts         2
 :arith-horner-calls              12
 :arith-horner-cross-nested-forms 33
 :arith-lower                     120
 :arith-make-feasible             110
 :arith-max-columns               102
 :arith-max-rows                  31
 :arith-nla-explanations          255
 :arith-nla-lemmas                200
 :arith-patches                   6
 :arith-patches-success           6
 :arith-propagations              65
 :arith-upper                     169
 :conflicts                       21
 :decisions                       204
 :del-clause                      364
 :final-checks                    89
 :max-memory                      5.90
 :memory                          3.17
 :mk-bool-var                     557
 :mk-clause                       466
 :num-allocs                      33383985
 :num-checks                      1
 :propagations                    309
 :rlimit-count                    10221
 :time                            0.11
 :total-time                      0.11)
