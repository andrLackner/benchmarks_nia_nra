unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x83 (* y00 q00)))
 (let ((?x998 (+ r00 ?x83 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x1485 (<= ?x998 0)))
 (let (($x1496 (= ?x998 0)))
 (let ((?x1408 (* y00 y00 y00 y00 y00 y00 q00)))
 (let ((?x374 (* (- 1) (* y00 y00 y00 y00 q00))))
 (let ((?x301 (* (- 1) (* y00 y00 y00 r00))))
 (let ((?x247 (* y00 y00 y00 y00 y00 r00)))
 (let ((?x747 (+ (* 3 (* y00 y00 y00 y00 q00 r!1 r!1)) (* (- 3) (* y00 y00 y00 y00 y00 q00 r!1 q!2)) ?x247 (* (- 1) (* y00 y00 r!1 r!1 q!2)) (* 3 (* y00 y00 y00 y00 q00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 y00 r!1 q!2 q!2)) (* y00 y00 r!1 r!1 r!1 r!1) ?x301 ?x374 (* y00 y00 r!1 r!1 r!1 r!1 q!2) (* (- 1) (* y00 y00 r00 r!1 r!1 r!1)) (* (- 3) (* y00 y00 y00 y00 r00 r!1)) (* (- 1) (* y00 y00 y00 q00 r!1 r!1 r!1)) (* (- 1) (* y00 y00 y00 q00 r!1 r!1 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 y00 q00 r!1)) (* y00 y00 y00 y00 y00 y00 q00 q!2) ?x1408 (* y00 y00 y00 r!1) (* (- 2) (* y00 y00 y00 r!1 q!2)) (* y00 y00 y00 y00 q!2) (* (- 1) (* y00 y00 r00 r!1 r!1 r!1 q!2)) (* 3 (* y00 y00 y00 r00 r!1 r!1)) (* 3 (* y00 y00 y00 r00 r!1 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 r00 r!1 q!2)) (* y00 y00 y00 y00 y00 r00 q!2) (* 2 (* y00 y00 r00 r!1)) (* (- 2) (* y00 y00 r!1 r!1)) (* 2 (* y00 y00 y00 q00 r!1)) (* y00 y00 y00 q00 r!1 q!2) (* (- 3) (* y00 y00 y00 r!1 r!1 r!1)) (* (- 2) (* y00 y00 y00 r!1 r!1 r!1 q!2)) (* y00 y00 y00 r!1 r!1 r!1 q!2 q!2) (* (- 1) (* y00 y00 y00 y00 y00 r!1)) (* 3 (* y00 y00 y00 y00 r!1 r!1)) (* 2 (* y00 y00 y00 y00 y00 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 r!1 r!1 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 y00 y00 q!2)) (* 3 (* y00 y00 y00 y00 y00 r!1 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 y00 y00 q!2 q!2)) (* y00 y00 r00 r!1 q!2))))
 (let (($x470 (= ?x747 0)))
 (let (($x1503 (not $x470)))
 (let ((?x1479 (+ y00 (* (- 1) y!0))))
 (let (($x1481 (= ?x1479 0)))
 (let (($x471 (and $x1481 $x1496 $x1503)))
 (let ((?x1440 (+ (* r!1 y00 y00 y00) (* (- 2) (* q!2 r!1 y00 y00 y00)) (* q!2 y00 y00 y00 y00) (* (- 1) (* r!1 r!1 r!1 y00 y00 r00)) (* (- 1) (* q!2 r!1 r!1 r!1 y00 y00 r00)) (* 3 (* r!1 r!1 y00 y00 y00 r00)) (* 3 (* q!2 r!1 r!1 y00 y00 y00 r00)) (* (- 3) (* r!1 y00 y00 y00 y00 r00)) (* (- 3) (* q!2 r!1 y00 y00 y00 y00 r00)) ?x247 (* q!2 y00 y00 y00 y00 y00 r00) (* 2 (* r!1 y00 y00 r00)) ?x301 ?x374 (* (- 2) (* r!1 r!1 y00 y00)) (* 2 (* r!1 y00 y00 y00 q00)) (* q!2 r!1 y00 y00 y00 q00) (* (- 3) (* r!1 r!1 r!1 y00 y00 y00)) (* (- 2) (* q!2 r!1 r!1 r!1 y00 y00 y00)) (* q!2 q!2 r!1 r!1 r!1 y00 y00 y00) (* 3 (* r!1 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 r!1 r!1 y00 y00 y00 y00)) (* (- 1) (* r!1 y00 y00 y00 y00 y00)) (* 2 (* q!2 r!1 y00 y00 y00 y00 y00)) (* 3 (* q!2 q!2 r!1 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 y00 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 y00 y00)) (* q!2 r!1 y00 y00 r00) (* (- 1) (* q!2 r!1 r!1 y00 y00)) (* (- 1) (* q!2 q!2 r!1 y00 y00 y00)) (* r!1 r!1 r!1 r!1 y00 y00) (* q!2 r!1 r!1 r!1 r!1 y00 y00) (* (- 1) (* r!1 r!1 r!1 y00 y00 y00 q00)) (* (- 1) (* q!2 r!1 r!1 r!1 y00 y00 y00 q00)) (* 3 (* r!1 r!1 y00 y00 y00 y00 q00)) (* 3 (* q!2 r!1 r!1 y00 y00 y00 y00 q00)) (* (- 3) (* r!1 y00 y00 y00 y00 y00 q00)) (* (- 3) (* q!2 r!1 y00 y00 y00 y00 y00 q00)) ?x1408 (* q!2 y00 y00 y00 y00 y00 y00 q00))))
 (let (($x1445 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x83)) 0) (not (= ?x1440 0)))))
 (let (($x1475 (exists ((q Int) (r Int) (y Int) )(! (let ((?x1408 (* y00 y00 y00 y00 y00 y00 q00)))
 (let ((?x374 (* (- 1) (* y00 y00 y00 y00 q00))))
 (let ((?x301 (* (- 1) (* y00 y00 y00 r00))))
 (let ((?x247 (* y00 y00 y00 y00 y00 r00)))
 (let ((?x1468 (+ (* r y00 y00 y00) (* (- 2) (* q r y00 y00 y00)) (* q y00 y00 y00 y00) (* (- 1) (* r r r y00 y00 r00)) (* (- 1) (* q r r r y00 y00 r00)) (* 3 (* r r y00 y00 y00 r00)) (* 3 (* q r r y00 y00 y00 r00)) (* (- 3) (* r y00 y00 y00 y00 r00)) (* (- 3) (* q r y00 y00 y00 y00 r00)) ?x247 (* q y00 y00 y00 y00 y00 r00) (* 2 (* r y00 y00 r00)) ?x301 ?x374 (* (- 2) (* r r y00 y00)) (* 2 (* r y00 y00 y00 q00)) (* q r y00 y00 y00 q00) (* (- 3) (* r r r y00 y00 y00)) (* (- 2) (* q r r r y00 y00 y00)) (* q q r r r y00 y00 y00) (* 3 (* r r y00 y00 y00 y00)) (* (- 3) (* q q r r y00 y00 y00 y00)) (* (- 1) (* r y00 y00 y00 y00 y00)) (* 2 (* q r y00 y00 y00 y00 y00)) (* 3 (* q q r y00 y00 y00 y00 y00)) (* (- 1) (* q y00 y00 y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00 y00 y00)) (* q r y00 y00 r00) (* (- 1) (* q r r y00 y00)) (* (- 1) (* q q r y00 y00 y00)) (* r r r r y00 y00) (* q r r r r y00 y00) (* (- 1) (* r r r y00 y00 y00 q00)) (* (- 1) (* q r r r y00 y00 y00 q00)) (* 3 (* r r y00 y00 y00 y00 q00)) (* 3 (* q r r y00 y00 y00 y00 q00)) (* (- 3) (* r y00 y00 y00 y00 y00 q00)) (* (- 3) (* q r y00 y00 y00 y00 y00 q00)) ?x1408 (* q y00 y00 y00 y00 y00 y00 q00))))
 (let (($x113 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x113 (not (= ?x1468 0))))))))) :qid k!29))
 ))
 (let (($x633 (exists ((q Int) (r Int) (y Int) )(! (let ((?x81 (* (- 1) y00)))
 (let ((?x443 (+ r ?x81)))
 (let ((?x441 (+ 1 q)))
 (let ((?x263 (+ (* 2 (* y00 y00 y00 ?x441 ?x443)) (* r00 y00 y00 ?x441 ?x443 ?x443 ?x443) (* (- 1) (* r00 y00 y00 ?x443)) (* (- 1) (* q00 y00 y00 y00 y00 ?x441)) (* (- 1) (* r00 y00 y00 y00 ?x441)) (* y00 y00 ?x443 ?x443) (* y00 y00 y00 y00 ?x441 ?x441) (* (- 1) (* q00 y00 y00 y00 ?x441 ?x443)) (* (- 1) (* y00 y00 y00 ?x441 ?x441 ?x443 ?x443 ?x443)) (* (- 1) (* r00 y00 y00 ?x441 ?x443)) (* (- 1) (* q00 y00 y00 y00 ?x443)) (* y00 y00 ?x441 ?x443 ?x443) (* y00 y00 y00 ?x441 ?x441 ?x443) (* (- 1) (* y00 y00 ?x441 ?x443 ?x443 ?x443 ?x443)) (* q00 y00 y00 y00 ?x441 ?x443 ?x443 ?x443))))
 (let (($x979 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ ?x81 y) 0) $x979 (not (= ?x263 0)))))))) :qid k!29))
 ))
 (let ((?x1607 (lambda ((q Int) (r Int) (y Int) )(let ((?x1408 (* y00 y00 y00 y00 y00 y00 q00)))
 (let ((?x374 (* (- 1) (* y00 y00 y00 y00 q00))))
 (let ((?x301 (* (- 1) (* y00 y00 y00 r00))))
 (let ((?x247 (* y00 y00 y00 y00 y00 r00)))
 (let ((?x1468 (+ (* r y00 y00 y00) (* (- 2) (* q r y00 y00 y00)) (* q y00 y00 y00 y00) (* (- 1) (* r r r y00 y00 r00)) (* (- 1) (* q r r r y00 y00 r00)) (* 3 (* r r y00 y00 y00 r00)) (* 3 (* q r r y00 y00 y00 r00)) (* (- 3) (* r y00 y00 y00 y00 r00)) (* (- 3) (* q r y00 y00 y00 y00 r00)) ?x247 (* q y00 y00 y00 y00 y00 r00) (* 2 (* r y00 y00 r00)) ?x301 ?x374 (* (- 2) (* r r y00 y00)) (* 2 (* r y00 y00 y00 q00)) (* q r y00 y00 y00 q00) (* (- 3) (* r r r y00 y00 y00)) (* (- 2) (* q r r r y00 y00 y00)) (* q q r r r y00 y00 y00) (* 3 (* r r y00 y00 y00 y00)) (* (- 3) (* q q r r y00 y00 y00 y00)) (* (- 1) (* r y00 y00 y00 y00 y00)) (* 2 (* q r y00 y00 y00 y00 y00)) (* 3 (* q q r y00 y00 y00 y00 y00)) (* (- 1) (* q y00 y00 y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00 y00 y00)) (* q r y00 y00 r00) (* (- 1) (* q r r y00 y00)) (* (- 1) (* q q r y00 y00 y00)) (* r r r r y00 y00) (* q r r r r y00 y00) (* (- 1) (* r r r y00 y00 y00 q00)) (* (- 1) (* q r r r y00 y00 y00 q00)) (* 3 (* r r y00 y00 y00 y00 q00)) (* 3 (* q r r y00 y00 y00 y00 q00)) (* (- 3) (* r y00 y00 y00 y00 y00 q00)) (* (- 3) (* q r y00 y00 y00 y00 y00 q00)) ?x1408 (* q y00 y00 y00 y00 y00 y00 q00))))
 (let (($x113 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x277 (and (= (+ y (* (- 1) y00)) 0) $x113 (not (= ?x1468 0)))))
 (let ((?x81 (* (- 1) y00)))
 (let ((?x443 (+ r ?x81)))
 (let ((?x441 (+ 1 q)))
 (let ((?x263 (+ (* 2 (* y00 y00 y00 ?x441 ?x443)) (* r00 y00 y00 ?x441 ?x443 ?x443 ?x443) (* (- 1) (* r00 y00 y00 ?x443)) (* (- 1) (* q00 y00 y00 y00 y00 ?x441)) (* (- 1) (* r00 y00 y00 y00 ?x441)) (* y00 y00 ?x443 ?x443) (* y00 y00 y00 y00 ?x441 ?x441) (* (- 1) (* q00 y00 y00 y00 ?x441 ?x443)) (* (- 1) (* y00 y00 y00 ?x441 ?x441 ?x443 ?x443 ?x443)) (* (- 1) (* r00 y00 y00 ?x441 ?x443)) (* (- 1) (* q00 y00 y00 y00 ?x443)) (* y00 y00 ?x441 ?x443 ?x443) (* y00 y00 y00 ?x441 ?x441 ?x443) (* (- 1) (* y00 y00 ?x441 ?x443 ?x443 ?x443 ?x443)) (* q00 y00 y00 y00 ?x441 ?x443 ?x443 ?x443))))
 (let (($x979 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x803 (and (= (+ ?x81 y) 0) $x979 (not (= ?x263 0)))))
 (rewrite (= $x803 $x277))))))))))))))))
 ))
 (let (($x76 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x43 y00 y00 y00)))
 (let ((?x48 (- (+ ?x44 (* ?x42 ?x43 ?x43 ?x43 r00 y00 y00)) (* ?x43 r00 y00 y00))))
 (let ((?x53 (- (- (+ ?x48 ?x44) (* ?x42 q00 y00 y00 y00 y00)) (* ?x42 r00 y00 y00 y00))))
 (let ((?x56 (+ ?x53 (* ?x43 ?x43 y00 y00) (* ?x42 ?x42 y00 y00 y00 y00))))
 (let ((?x62 (- (- ?x56 (* ?x42 q00 ?x43 y00 y00 y00)) (* ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00))))
 (let ((?x64 (- (- ?x62 (* ?x42 ?x43 r00 y00 y00)) (* q00 ?x43 y00 y00 y00))))
 (let ((?x67 (+ ?x64 (* ?x42 ?x43 ?x43 y00 y00) (* ?x42 ?x42 ?x43 y00 y00 y00))))
 (let ((?x71 (+ (- ?x67 (* ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00)) (* ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x71 0)))))))))))))) :qid k!29))
 ))
 (let ((?x864 (lambda ((q Int) (r Int) (y Int) )(let ((?x81 (* (- 1) y00)))
 (let ((?x443 (+ r ?x81)))
 (let ((?x441 (+ 1 q)))
 (let ((?x263 (+ (* 2 (* y00 y00 y00 ?x441 ?x443)) (* r00 y00 y00 ?x441 ?x443 ?x443 ?x443) (* (- 1) (* r00 y00 y00 ?x443)) (* (- 1) (* q00 y00 y00 y00 y00 ?x441)) (* (- 1) (* r00 y00 y00 y00 ?x441)) (* y00 y00 ?x443 ?x443) (* y00 y00 y00 y00 ?x441 ?x441) (* (- 1) (* q00 y00 y00 y00 ?x441 ?x443)) (* (- 1) (* y00 y00 y00 ?x441 ?x441 ?x443 ?x443 ?x443)) (* (- 1) (* r00 y00 y00 ?x441 ?x443)) (* (- 1) (* q00 y00 y00 y00 ?x443)) (* y00 y00 ?x441 ?x443 ?x443) (* y00 y00 y00 ?x441 ?x441 ?x443) (* (- 1) (* y00 y00 ?x441 ?x443 ?x443 ?x443 ?x443)) (* q00 y00 y00 y00 ?x441 ?x443 ?x443 ?x443))))
 (let (($x979 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x803 (and (= (+ ?x81 y) 0) $x979 (not (= ?x263 0)))))
 (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x43 y00 y00 y00)))
 (let ((?x48 (- (+ ?x44 (* ?x42 ?x43 ?x43 ?x43 r00 y00 y00)) (* ?x43 r00 y00 y00))))
 (let ((?x53 (- (- (+ ?x48 ?x44) (* ?x42 q00 y00 y00 y00 y00)) (* ?x42 r00 y00 y00 y00))))
 (let ((?x56 (+ ?x53 (* ?x43 ?x43 y00 y00) (* ?x42 ?x42 y00 y00 y00 y00))))
 (let ((?x62 (- (- ?x56 (* ?x42 q00 ?x43 y00 y00 y00)) (* ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00))))
 (let ((?x64 (- (- ?x62 (* ?x42 ?x43 r00 y00 y00)) (* q00 ?x43 y00 y00 y00))))
 (let ((?x67 (+ ?x64 (* ?x42 ?x43 ?x43 y00 y00) (* ?x42 ?x42 ?x43 y00 y00 y00))))
 (let ((?x71 (+ (- ?x67 (* ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00)) (* ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00))))
 (let (($x75 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x71 0))))))
 (rewrite (= $x75 $x803))))))))))))))))))))
 ))
 (let ((@x77 (asserted $x76)))
 (let ((@x1371 (mp (mp @x77 (quant-intro (proof-bind ?x864) (= $x76 $x633)) $x633) (rewrite (= $x633 $x633)) $x633)))
 (let ((@x1443 (mp~ (mp @x1371 (quant-intro (proof-bind ?x1607) (= $x633 $x1475)) $x1475) (sk (~ $x1475 $x1445)) $x1445)))
 (let ((@x999 (mp @x1443 (rewrite (= $x1445 $x471)) $x471)))
 (let ((@x1483 (and-elim @x999 $x1496)))
 (let ((@x735 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1496) $x1485)) @x1483 $x1485)))
 (let (($x1486 (>= ?x998 0)))
 (let ((@x971 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1496) $x1486)) @x1483 $x1486)))
 (let (($x1487 (<= ?x1479 0)))
 (let ((@x1510 (and-elim @x999 $x1481)))
 (let ((@x476 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1481) $x1487)) @x1510 $x1487)))
 (let (($x1489 (>= ?x1479 0)))
 (let ((@x1557 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1481) $x1489)) @x1510 $x1489)))
 (let (($x1501 (not (<= ?x747 0))))
 (let (($x1488 (>= ?x747 0)))
 (let ((@x1471 (lemma ((_ th-lemma arith) (hypothesis (not $x1488)) @x1557 @x476 @x971 @x735 false) $x1488)))
 (let ((@x1007 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x470 $x1501 (not $x1488))) (and-elim @x999 $x1503) (or $x1501 (not $x1488)))))
 ((_ th-lemma arith) (unit-resolution @x1007 @x1471 $x1501) @x1557 @x476 @x971 @x735 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        14
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-gcd-tests           3
 :arith-grobner             2
 :arith-max-min             367
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-patches             3
 :arith-patches_succ        3
 :arith-pivots              4
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              4
 :max-memory                19.67
 :memory                    19.19
 :mk-bool-var               9
 :mk-clause                 10
 :num-allocs                512018
 :num-checks                1
 :propagations              6
 :rlimit-count              5517
 :time                      0.01
 :total-time                0.02)
