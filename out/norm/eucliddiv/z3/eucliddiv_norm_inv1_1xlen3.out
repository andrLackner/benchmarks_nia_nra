unsat
((set-logic NIA)
(proof
(let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x46 (* ?x42 ?x42 ?x43 ?x43 ?x43 y00)))
 (let ((?x48 (* ?x42 y00 y00 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x45 (- ?x44 ?x44)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x50 (+ ?x49 ?x48)))
 (let ((?x51 (- ?x50 ?x46)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x54)))))))))))))))) :qid k!29))
 ))
 (let (($x817 (= $x56 false)))
 (let (($x810 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x816 (elim-unused (= $x810 false))))
 (let (($x813 (= $x56 $x810)))
 (let ((?x906 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x46 (* ?x42 ?x42 ?x43 ?x43 ?x43 y00)))
 (let ((?x48 (* ?x42 y00 y00 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x45 (- ?x44 ?x44)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x50 (+ ?x49 ?x48)))
 (let ((?x51 (- ?x50 ?x46)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x55 (and $x33 $x41 $x54)))
 (let (($x808 (= $x55 false)))
 (let (($x847 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x81 (= (+ (* (- 1) y00) y) 0)))
 (let (($x900 (and $x81 $x847 false)))
 (let (($x801 (= $x54 false)))
 (let ((@x800 (rewrite (= (or false) false))))
 (let (($x796 (or false)))
 (let (($x797 (= $x54 $x796)))
 (let (($x794 (= $x53 false)))
 (let ((@x793 (rewrite (= (not true) false))))
 (let (($x766 (not true)))
 (let (($x762 (= $x53 $x766)))
 (let (($x769 (= $x52 true)))
 (let ((@x768 (rewrite (= (= 0 0) true))))
 (let (($x774 (= 0 0)))
 (let (($x775 (= $x52 $x774)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x67 (+ r ?x61)))
 (let ((?x59 (+ 1 q)))
 (let ((?x846 (* y00 ?x59 ?x59 ?x67 ?x67 ?x67)))
 (let ((?x886 (+ ?x846 (* (- 1) ?x846))))
 (let ((@x69 (rewrite (= ?x43 ?x67))))
 (let ((@x66 (rewrite (= ?x42 ?x59))))
 (let ((@x485 (monotonicity @x66 @x66 @x69 @x69 @x69 (= ?x46 (* ?x59 ?x59 ?x67 ?x67 ?x67 y00)))))
 (let ((@x853 (trans @x485 (rewrite (= (* ?x59 ?x59 ?x67 ?x67 ?x67 y00) ?x846)) (= ?x46 ?x846))))
 (let ((?x861 (* y00 y00 y00 y00 ?x59)))
 (let ((?x870 (+ ?x846 (* (- 1) ?x861))))
 (let ((?x875 (+ ?x870 ?x861)))
 (let ((@x700 (monotonicity @x66 (= ?x48 (* ?x59 y00 y00 y00 y00)))))
 (let ((@x865 (trans @x700 (rewrite (= (* ?x59 y00 y00 y00 y00) ?x861)) (= ?x48 ?x861))))
 (let (($x491 (= ?x45 0)))
 (let ((?x820 (* y00 y00 y00 y00 ?x59 ?x59 ?x59 ?x67 ?x67 ?x67)))
 (let ((?x834 (+ ?x820 (* (- 1) ?x820))))
 (let ((@x822 (rewrite (= (* ?x59 ?x59 ?x59 ?x67 ?x67 ?x67 y00 y00 y00 y00) ?x820))))
 (let ((@x77 (monotonicity @x66 @x66 @x66 @x69 @x69 @x69 (= ?x44 (* ?x59 ?x59 ?x59 ?x67 ?x67 ?x67 y00 y00 y00 y00)))))
 (let ((@x824 (trans @x77 @x822 (= ?x44 ?x820))))
 (let ((@x841 (trans (monotonicity @x824 @x824 (= ?x45 (- ?x820 ?x820))) (rewrite (= (- ?x820 ?x820) ?x834)) (= ?x45 ?x834))))
 (let ((@x856 (monotonicity (trans @x841 (rewrite (= ?x834 0)) $x491) @x853 (= ?x47 (+ 0 ?x846)))))
 (let ((@x868 (monotonicity (trans @x856 (rewrite (= (+ 0 ?x846) ?x846)) (= ?x47 ?x846)) @x865 (= ?x49 (- ?x846 ?x861)))))
 (let ((@x877 (monotonicity (trans @x868 (rewrite (= (- ?x846 ?x861) ?x870)) (= ?x49 ?x870)) @x865 (= ?x50 ?x875))))
 (let ((@x884 (monotonicity (trans @x877 (rewrite (= ?x875 ?x846)) (= ?x50 ?x846)) @x853 (= ?x51 (- ?x846 ?x846)))))
 (let ((@x893 (trans (trans @x884 (rewrite (= (- ?x846 ?x846) ?x886)) (= ?x51 ?x886)) (rewrite (= ?x886 0)) $x52)))
 (let ((@x897 (trans (monotonicity (trans (monotonicity @x893 $x775) @x768 $x769) $x762) @x793 $x794)))
 (let ((@x902 (monotonicity (rewrite (= $x33 $x81)) (rewrite (= $x41 $x847)) (trans (monotonicity @x897 $x797) @x800 $x801) (= $x55 $x900))))
 (trans @x902 (rewrite (= $x900 false)) $x808))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (mp @x57 (trans (quant-intro (proof-bind ?x906) $x813) @x816 $x817) false))))))))))

(:max-memory   3.44
 :memory       3.14
 :mk-bool-var  5
 :num-allocs   898213
 :rlimit-count 631
 :time         0.01
 :total-time   0.01)
