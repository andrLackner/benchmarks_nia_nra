unsat
((set-logic NIA)
(declare-fun k!00 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(declare-fun k!10 () Int)
(proof
(let ((?x232 (+ k!10 (* (- 1) (* v!4 y!2)) (* (- 1) (* u!5 x!3)) k!00)))
 (let (($x350 (>= ?x232 0)))
 (let (($x355 (= ?x232 0)))
 (let ((?x329 (* (- 1) k!00)))
 (let ((?x413 (* u!5 x!3)))
 (let ((?x409 (* v!4 y!2)))
 (let ((?x633 (* (- 1) k!10)))
 (let ((?x347 (+ ?x633 ?x409 ?x413 ?x329)))
 (let ((?x314 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2))))
 (let ((?x400 (* v!4 v!4 v!4 y!2 x!3 x!3 x!3)))
 (let ((?x379 (* (- 1) (* v!4 v!4 v!4 u!5 u!5 y!2 x!3 x!3))))
 (let ((?x228 (* (- 1) (* v!4 v!4 v!4 y!2 y!2 y!2 y!2))))
 (let ((?x316 (* (- 1) (* u!5 u!5 u!5 y!2 y!2 y!2 y!2))))
 (let ((?x489 (+ (* u!5 u!5 u!5 y!2 x!3 x!3 x!3) (* 3 (* v!4 v!4 u!5 y!2 x!3 x!3 x!3)) (* (- 9) (* v!4 u!5 u!5 y!2 y!2 x!3 x!3)) ?x316 ?x228 (* (- 3) (* v!4 v!4 u!5 u!5 u!5 y!2 x!3 x!3)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 x!3 x!3)) (* (- 3) (* v!4 u!5 u!5 u!5 u!5 y!2 x!3 x!3)) ?x379 (* 3 (* v!4 u!5 u!5 y!2 x!3 x!3 x!3)) ?x400 (* (- 3) (* u!5 u!5 u!5 y!2 y!2 x!3 x!3)) (* (- 3) (* v!4 u!5 u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 3) (* v!4 v!4 v!4 y!2 y!2 x!3 x!3)) (* (- 9) (* v!4 v!4 u!5 y!2 y!2 x!3 x!3)) (* 6 (* v!4 u!5 u!5 u!5 u!5 y!2 y!2 x!3)) (* 2 (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 x!3)) (* 6 (* v!4 v!4 u!5 u!5 u!5 y!2 y!2 x!3)) (* 3 (* u!5 u!5 u!5 y!2 y!2 y!2 x!3)) (* 9 (* v!4 u!5 u!5 y!2 y!2 y!2 x!3)) (* 2 (* v!4 v!4 v!4 u!5 u!5 y!2 y!2 x!3)) (* 9 (* v!4 v!4 u!5 y!2 y!2 y!2 x!3)) (* 3 (* v!4 v!4 v!4 y!2 y!2 y!2 x!3)) (* (- 3) (* v!4 v!4 u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 u!5 u!5 y!2 y!2 y!2)) (* (- 3) (* v!4 u!5 u!5 y!2 y!2 y!2 y!2)) (* (- 3) (* v!4 v!4 u!5 y!2 y!2 y!2 y!2)) ?x314)))
 (let ((?x502 (* ?x489 ?x347)))
 (let (($x233 (= ?x502 0)))
 (let (($x504 (not $x233)))
 (let ((?x338 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)))
 (let ((?x331 (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x435 (+ ?x331 ?x338 ?x379 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 y!2 x!3 x!3)) (* v!4 v!4 v!4 u!5 u!5 x!3 x!3 x!3) (* (- 2) (* v!4 v!4 v!4 v!4 u!5 y!2 x!3 x!3)) ?x400 (* 2 (* v!4 v!4 v!4 v!4 u!5 x!3 x!3 x!3)))))
 (let ((?x445 (* ?x435 ?x347)))
 (let (($x385 (= ?x445 0)))
 (let (($x412 (or (not $x385) $x504)))
 (let (($x431 (and $x355 $x412)))
 (let ((?x415 (+ ?x413 ?x409 ?x633 ?x329)))
 (let ((?x1033 (* v!4 v!4 v!4 x!3 x!3 x!3 y!2)))
 (let ((?x399 (* (- 1) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x340 (+ ?x399 ?x1033 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 2) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) ?x331 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3) (* 2 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) ?x338)))
 (let ((?x321 (+ (* (- 1) (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) ?x399 (* u!5 u!5 u!5 x!3 x!3 x!3 y!2) (* 3 (* u!5 u!5 v!4 x!3 x!3 x!3 y!2)) (* 3 (* u!5 v!4 v!4 x!3 x!3 x!3 y!2)) ?x1033 (* (- 3) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 x!3 x!3 y!2 y!2)) (* (- 9) (* u!5 u!5 v!4 x!3 x!3 y!2 y!2)) (* (- 9) (* u!5 v!4 v!4 x!3 x!3 y!2 y!2)) (* (- 3) (* v!4 v!4 v!4 x!3 x!3 y!2 y!2)) (* 2 (* u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) (* 3 (* u!5 u!5 u!5 x!3 y!2 y!2 y!2)) (* 9 (* u!5 u!5 v!4 x!3 y!2 y!2 y!2)) (* 2 (* u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2)) (* 9 (* u!5 v!4 v!4 x!3 y!2 y!2 y!2)) (* 3 (* v!4 v!4 v!4 x!3 y!2 y!2 y!2)) ?x314 (* (- 3) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2)) ?x316 (* (- 3) (* u!5 u!5 v!4 y!2 y!2 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 y!2 y!2 y!2 y!2)) ?x228)))
 (let (($x343 (and (= ?x415 0) (or (not (= (* ?x321 ?x415) 0)) (not (= (* ?x340 ?x415) 0))))))
 (let (($x219 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x329 (* (- 1) k!00)))
 (let ((?x633 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x226 (+ ?x33 ?x34 ?x633 ?x329)))
 (let ((?x740 (* (- 1) (* v v v x x x x))))
 (let ((?x715 (* (- 1) (* v v v v v x x y))))
 (let ((?x224 (* v v v x x x y)))
 (let ((?x160 (* (- 1) (* u u v v v x x y))))
 (let ((?x1226 (+ ?x160 ?x224 ?x715 (* (- 2) (* u v v v v x x y)) ?x740 (* u u v v v x x x) (* 2 (* u v v v v x x x)) (* v v v v v x x x))))
 (let ((?x667 (* (- 1) (* v v v y y y y))))
 (let ((?x688 (* (- 3) (* u v v y y y y))))
 (let ((?x687 (* (- 3) (* u u v y y y y))))
 (let ((?x623 (* (- 1) (* u u u y y y y))))
 (let ((?x686 (* 3 (* v v v x y y y))))
 (let ((?x685 (* 9 (* u v v x y y y))))
 (let ((?x684 (* 9 (* u u v x y y y))))
 (let ((?x682 (* 3 (* u u u x y y y))))
 (let ((?x681 (* (- 3) (* v v v x x y y))))
 (let ((?x680 (* (- 9) (* u v v x x y y))))
 (let ((?x679 (* (- 9) (* u u v x x y y))))
 (let ((?x677 (* (- 3) (* u u u x x y y))))
 (let ((?x675 (* 3 (* u v v x x x y))))
 (let ((?x674 (* 3 (* u u v x x x y))))
 (let ((?x217 (* u u u x x x y)))
 (let ((?x146 (* (- 1) (* u u u u u x x y))))
 (let ((?x1069 (+ ?x146 (* (- 3) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) ?x160 ?x217 ?x674 ?x675 ?x224 (* (- 3) (* u u u u v y y y)) ?x677 ?x679 ?x680 ?x681 (* 2 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 6 (* u u u v v x y y)) ?x682 ?x684 (* 2 (* u u v v v x y y)) ?x685 ?x686 (* (- 1) (* u u u u u y y y)) (* (- 3) (* u u u v v y y y)) (* (- 1) (* u u v v v y y y)) ?x623 ?x687 ?x688 ?x667)))
 (and (= ?x226 0) (or (not (= (* ?x1069 ?x226) 0)) (not (= (* ?x1226 ?x226) 0))))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x493 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x633 (* (- 1) k!10)))
 (let ((?x213 (* (- 1) x)))
 (let ((?x500 (+ y ?x213)))
 (let ((?x644 (* ?x500 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x329 (* (- 1) k!00)))
 (let ((?x288 (+ (* (- 1) (* ?x54 ?x54 ?x500 x x v v v)) (* ?x500 x x x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x97 (+ x ?x82)))
 (let ((?x482 (* ?x97 u)))
 (let ((?x492 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x97 ?x97 y u u)) (* ?x44 ?x44 ?x44 ?x97 ?x97 ?x97 y))))
 (let (($x290 (or (not (= (* ?x492 (+ ?x329 ?x482 ?x45 ?x633)) 0)) (not (= (* ?x288 (+ ?x329 ?x55 ?x644 ?x633)) 0)))))
 (let ((?x113 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x113 0) $x290))))))))))))))))) :qid k!29))
 ))
 (let ((?x396 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x329 (* (- 1) k!00)))
 (let ((?x633 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x226 (+ ?x33 ?x34 ?x633 ?x329)))
 (let ((?x740 (* (- 1) (* v v v x x x x))))
 (let ((?x715 (* (- 1) (* v v v v v x x y))))
 (let ((?x224 (* v v v x x x y)))
 (let ((?x160 (* (- 1) (* u u v v v x x y))))
 (let ((?x1226 (+ ?x160 ?x224 ?x715 (* (- 2) (* u v v v v x x y)) ?x740 (* u u v v v x x x) (* 2 (* u v v v v x x x)) (* v v v v v x x x))))
 (let ((?x667 (* (- 1) (* v v v y y y y))))
 (let ((?x688 (* (- 3) (* u v v y y y y))))
 (let ((?x687 (* (- 3) (* u u v y y y y))))
 (let ((?x623 (* (- 1) (* u u u y y y y))))
 (let ((?x686 (* 3 (* v v v x y y y))))
 (let ((?x685 (* 9 (* u v v x y y y))))
 (let ((?x684 (* 9 (* u u v x y y y))))
 (let ((?x682 (* 3 (* u u u x y y y))))
 (let ((?x681 (* (- 3) (* v v v x x y y))))
 (let ((?x680 (* (- 9) (* u v v x x y y))))
 (let ((?x679 (* (- 9) (* u u v x x y y))))
 (let ((?x677 (* (- 3) (* u u u x x y y))))
 (let ((?x675 (* 3 (* u v v x x x y))))
 (let ((?x674 (* 3 (* u u v x x x y))))
 (let ((?x217 (* u u u x x x y)))
 (let ((?x146 (* (- 1) (* u u u u u x x y))))
 (let ((?x1069 (+ ?x146 (* (- 3) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) ?x160 ?x217 ?x674 ?x675 ?x224 (* (- 3) (* u u u u v y y y)) ?x677 ?x679 ?x680 ?x681 (* 2 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 6 (* u u u v v x y y)) ?x682 ?x684 (* 2 (* u u v v v x y y)) ?x685 ?x686 (* (- 1) (* u u u u u y y y)) (* (- 3) (* u u u v v y y y)) (* (- 1) (* u u v v v y y y)) ?x623 ?x687 ?x688 ?x667)))
 (let (($x1286 (and (= ?x226 0) (or (not (= (* ?x1069 ?x226) 0)) (not (= (* ?x1226 ?x226) 0))))))
 (let ((?x213 (* (- 1) x)))
 (let ((?x500 (+ y ?x213)))
 (let ((?x644 (* ?x500 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x288 (+ (* (- 1) (* ?x54 ?x54 ?x500 x x v v v)) (* ?x500 x x x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x97 (+ x ?x82)))
 (let ((?x482 (* ?x97 u)))
 (let ((?x492 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x97 ?x97 y u u)) (* ?x44 ?x44 ?x44 ?x97 ?x97 ?x97 y))))
 (let (($x290 (or (not (= (* ?x492 (+ ?x329 ?x482 ?x45 ?x633)) 0)) (not (= (* ?x288 (+ ?x329 ?x55 ?x644 ?x633)) 0)))))
 (let ((?x113 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x96 (and (= ?x113 0) $x290)))
 (rewrite (= $x96 $x1286))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x106 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x633 (* (- 1) k!10)))
 (let ((?x213 (* (- 1) x)))
 (let ((?x500 (+ y ?x213)))
 (let ((?x644 (* ?x500 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x329 (* (- 1) k!00)))
 (let ((?x288 (+ (* (- 1) (* ?x54 ?x54 ?x500 x x v v v)) (* ?x500 x x x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x97 (+ x ?x82)))
 (let ((?x482 (* ?x97 u)))
 (let ((?x492 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x97 ?x97 y u u)) (* ?x44 ?x44 ?x44 ?x97 ?x97 ?x97 y))))
 (let (($x290 (or (not (= (* ?x492 (+ ?x329 ?x482 ?x45 ?x633)) 0)) (not (= (* ?x288 (+ ?x329 ?x55 ?x644 ?x633)) 0)))))
 (and (= (+ ?x329 (* x u) (* y v) ?x633) 0) $x290)))))))))))))))) :qid k!29))
 ))
 (let ((?x85 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x633 (* (- 1) k!10)))
 (let ((?x213 (* (- 1) x)))
 (let ((?x500 (+ y ?x213)))
 (let ((?x644 (* ?x500 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x329 (* (- 1) k!00)))
 (let ((?x288 (+ (* (- 1) (* ?x54 ?x54 ?x500 x x v v v)) (* ?x500 x x x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x97 (+ x ?x82)))
 (let ((?x482 (* ?x97 u)))
 (let ((?x492 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x97 ?x97 y u u)) (* ?x44 ?x44 ?x44 ?x97 ?x97 ?x97 y))))
 (let (($x290 (or (not (= (* ?x492 (+ ?x329 ?x482 ?x45 ?x633)) 0)) (not (= (* ?x288 (+ ?x329 ?x55 ?x644 ?x633)) 0)))))
 (let ((?x113 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x96 (and (= ?x113 0) $x290)))
 (let (($x506 (and (= (+ ?x329 (* x u) (* y v) ?x633) 0) $x290)))
 (rewrite (= $x506 $x96)))))))))))))))))))))
 ))
 (let (($x373 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x213 (* (- 1) x)))
 (let ((?x500 (+ y ?x213)))
 (let ((?x644 (* ?x500 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x288 (+ (* (- 1) (* ?x54 ?x54 ?x500 x x v v v)) (* ?x500 x x x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x97 (+ x ?x82)))
 (let ((?x482 (* ?x97 u)))
 (let ((?x492 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x97 ?x97 y u u)) (* ?x44 ?x44 ?x44 ?x97 ?x97 ?x97 y))))
 (let (($x381 (or (not (= (* ?x492 (+ ?x77 ?x482 ?x45 ?x93)) 0)) (not (= (* ?x288 (+ ?x77 ?x55 ?x644 ?x93)) 0)))))
 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x381))))))))))))))))) :qid k!29))
 ))
 (let ((?x103 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x633 (* (- 1) k!10)))
 (let ((?x213 (* (- 1) x)))
 (let ((?x500 (+ y ?x213)))
 (let ((?x644 (* ?x500 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x329 (* (- 1) k!00)))
 (let ((?x288 (+ (* (- 1) (* ?x54 ?x54 ?x500 x x v v v)) (* ?x500 x x x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x97 (+ x ?x82)))
 (let ((?x482 (* ?x97 u)))
 (let ((?x492 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x97 ?x97 y u u)) (* ?x44 ?x44 ?x44 ?x97 ?x97 ?x97 y))))
 (let (($x290 (or (not (= (* ?x492 (+ ?x329 ?x482 ?x45 ?x633)) 0)) (not (= (* ?x288 (+ ?x329 ?x55 ?x644 ?x633)) 0)))))
 (let (($x506 (and (= (+ ?x329 (* x u) (* y v) ?x633) 0) $x290)))
 (let ((?x218 (* ?x288 (+ (* (- 1) (* u00 x00)) ?x55 ?x644 (* (- 1) (* v00 y00))))))
 (let ((?x562 (* ?x492 (+ (* (- 1) (* u00 x00)) ?x482 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x92 (* y v)))
 (let ((?x143 (* x u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let (($x561 (and (= (+ ?x77 ?x143 ?x92 ?x93) 0) (or (not (= ?x562 0)) (not (= ?x218 0))))))
 (rewrite (= $x561 $x506)))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x56 (- y x)))
 (let ((?x54 (+ u v)))
 (let ((?x29 (- 1)))
 (let ((?x62 (+ (* ?x29 ?x54 ?x54 v v v x x ?x56) (* v v v x x x ?x56))))
 (let ((?x38 (* v00 y00)))
 (let ((?x63 (* (- (+ (* ?x29 u00 x00) (* ?x54 x) (* v ?x56)) ?x38) ?x62)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x50 (+ (* ?x29 u u ?x44 ?x44 ?x44 ?x42 ?x42 y) (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y))))
 (let ((?x51 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x50)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x51 0)) (not (= ?x63 0))))))))))))))) :qid k!29))
 ))
 (let ((?x642 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x213 (* (- 1) x)))
 (let ((?x500 (+ y ?x213)))
 (let ((?x644 (* ?x500 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x288 (+ (* (- 1) (* ?x54 ?x54 ?x500 x x v v v)) (* ?x500 x x x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x97 (+ x ?x82)))
 (let ((?x482 (* ?x97 u)))
 (let ((?x492 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x97 ?x97 y u u)) (* ?x44 ?x44 ?x44 ?x97 ?x97 ?x97 y))))
 (let (($x381 (or (not (= (* ?x492 (+ ?x77 ?x482 ?x45 ?x93)) 0)) (not (= (* ?x288 (+ ?x77 ?x55 ?x644 ?x93)) 0)))))
 (let (($x561 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x381)))
 (let ((?x62 (+ (* (- 1) ?x54 ?x54 v v v x x (- y x)) (* v v v x x x (- y x)))))
 (let ((?x63 (* (- (+ (* (- 1) u00 x00) ?x55 (* v (- y x))) ?x38) ?x62)))
 (let ((?x42 (- x y)))
 (let ((?x29 (- 1)))
 (let ((?x50 (+ (* ?x29 u u ?x44 ?x44 ?x44 ?x42 ?x42 y) (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y))))
 (let (($x52 (= (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x50) 0)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x67 (and $x41 (or (not $x52) (not (= ?x63 0))))))
 (rewrite (= $x67 $x561))))))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x479 (mp (mp @x69 (quant-intro (proof-bind ?x642) (= $x68 $x373)) $x373) (rewrite (= $x373 $x373)) $x373)))
 (let ((@x83 (mp (mp @x479 (quant-intro (proof-bind ?x103) (= $x373 $x106)) $x106) (quant-intro (proof-bind ?x85) (= $x106 $x493)) $x493)))
 (let ((@x231 (mp~ (mp @x83 (quant-intro (proof-bind ?x396) (= $x493 $x219)) $x219) (sk (~ $x219 $x343)) $x343)))
 (let ((@x528 (mp @x231 (rewrite (= $x343 $x431)) $x431)))
 (let ((@x384 (and-elim @x528 $x355)))
 (let ((@x424 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x355) $x350)) @x384 $x350)))
 (let (($x349 (<= ?x232 0)))
 (let ((@x606 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x355) $x349)) @x384 $x349)))
 (let (($x98 (not (<= ?x502 0))))
 (let (($x238 (>= ?x502 0)))
 (let (($x393 (>= ?x445 0)))
 (let (($x235 (<= ?x445 0)))
 (let ((@x575 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x385 (not $x235) (not $x393))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x235)) @x606 @x424 false) $x235) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x393)) @x606 @x424 false) $x393) $x385)))
 (let ((@x548 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x233 $x98 (not $x238))) (unit-resolution (and-elim @x528 $x412) @x575 $x504) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x238)) @x606 @x424 false) $x238) $x98)))
 ((_ th-lemma arith farkas 1 1 1) @x548 @x606 @x424 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             352
 :arith-nonlinear-horner    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 56
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                4.28
 :memory                    3.17
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                111606987
 :num-checks                1
 :propagations              14
 :rlimit-count              506140
 :time                      0.30
 :total-time                0.31)
