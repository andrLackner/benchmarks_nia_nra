unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x599 (* n!0 c!3)))
 (let ((?x427 (* (- 9) ?x599)))
 (let ((?x511 (* m!1 m!1)))
 (let ((?x334 (* (- 5) m!1)))
 (let ((?x310 (* (- 27) c!3)))
 (let ((?x331 (* (- 32) k!2)))
 (let ((?x268 (* 2 (* k!2 m!1))))
 (let ((?x252 (* k!2 k!2)))
 (let ((?x159 (* 9 n!0)))
 (let ((?x538 (+ 13 ?x159 ?x252 ?x268 ?x331 ?x310 (* (- 9) (* n!0 k!2)) ?x334 ?x511 ?x427)))
 (let (($x556 (<= ?x538 0)))
 (let ((?x274 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x527 (<= ?x274 (- 6))))
 (let (($x526 (= ?x274 (- 6))))
 (let ((?x515 (+ k!2 c!3)))
 (let ((?x296 (+ k!2 m!1)))
 (let ((?x273 (+ 6 m!1)))
 (let ((?x468 (+ 1 n!0)))
 (let ((?x142 (+ (* (- 1) (* ?x468 ?x468 ?x468 ?x273 ?x273 ?x273 ?x515)) (* (- 1) (* ?x468 ?x468 ?x468 ?x273 ?x273 ?x296 ?x515 ?x515)) (* n!0 n!0 k!2) k!2 c!3 (* 2 (* n!0 k!2)) (* n!0 n!0 c!3) (* ?x468 ?x468 ?x468 ?x273 ?x273 ?x515 ?x515) (* ?x468 ?x468 ?x273 ?x273 ?x273 ?x296 ?x515) (* 2 ?x599))))
 (let ((?x351 (* ?x142 ?x538)))
 (let (($x270 (= ?x351 0)))
 (let (($x353 (not $x270)))
 (let ((?x102 (* (- 1) k!2)))
 (let ((?x166 (+ (* 3 n!0) ?x102 (* 3 (* n!0 n!0)))))
 (let (($x346 (= ?x166 (- 1))))
 (let ((?x400 (* n!0 k!2)))
 (let ((?x409 (+ (* 2 n!0) ?x102 (* (- 3) c!3) ?x400)))
 (let (($x408 (= ?x409 (- 1))))
 (let ((?x428 (+ ?x159 ?x252 (* (- 5) k!2) (* (- 18) c!3) ?x427)))
 (let (($x187 (= ?x428 (- 4))))
 (let (($x261 (and $x526 $x187 $x408 $x346 $x353)))
 (let ((?x517 (+ 13 ?x310 ?x331 ?x334 ?x159 ?x252 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) ?x268 ?x511)))
 (let ((?x419 (* (- 1) (* ?x468 ?x468 ?x468 ?x273 ?x273 ?x296 (+ c!3 k!2) (+ c!3 k!2)))))
 (let ((?x309 (+ c!3 k!2 (* 2 (* k!2 n!0)) (* 2 (* c!3 n!0)) (* ?x468 ?x468 ?x468 ?x273 ?x273 (+ c!3 k!2) (+ c!3 k!2)) (* ?x468 ?x468 ?x273 ?x273 ?x273 ?x296 (+ c!3 k!2)) (* c!3 n!0 n!0) (* k!2 n!0 n!0) (* (- 1) (* ?x468 ?x468 ?x468 ?x273 ?x273 ?x273 (+ c!3 k!2))) ?x419)))
 (let (($x618 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x299 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x252) (* 9 (* c!3 n!0)))))
 (let (($x404 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x299 4) $x618 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x309 ?x517) 0)))))
 (let (($x156 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x429 (* (- 5) m)))
 (let ((?x484 (+ 13 (* (- 27) c) (* (- 32) k) ?x429 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x529 (+ 6 m)))
 (let ((?x344 (+ 1 n)))
 (let ((?x622 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x72 ?x68 ?x68))))
 (let ((?x640 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x529 ?x68))))
 (let ((?x499 (* k n n)))
 (let ((?x498 (* c n n)))
 (let ((?x357 (* ?x344 ?x344 ?x529 ?x529 ?x529 ?x72 ?x68)))
 (let ((?x321 (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x68 ?x68)))
 (let ((?x149 (* c n)))
 (let ((?x520 (* 2 ?x149)))
 (let ((?x55 (* k n)))
 (let ((?x521 (* 2 ?x55)))
 (let (($x430 (= (* (+ c k ?x521 ?x520 ?x321 ?x357 ?x498 ?x499 ?x640 ?x622) ?x484) 0)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x211 (= (+ ?x40 ?x44 ?x213 ?x214 (* 9 ?x149)) 4)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (and $x127 $x211 $x263 $x301 (not $x430))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x325 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x429 (* (- 5) m)))
 (let ((?x101 (* (- 18) c)))
 (let ((?x97 (+ 13 ?x101 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x429 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x529 (+ 6 m)))
 (let ((?x344 (+ 1 n)))
 (let ((?x357 (* ?x344 ?x344 ?x529 ?x529 ?x529 ?x72 ?x68)))
 (let ((?x321 (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x68 ?x68)))
 (let ((?x640 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x529 ?x68))))
 (let ((?x622 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x72 ?x68 ?x68))))
 (let (($x611 (not (= (* (+ (* ?x344 ?x344 ?x68) ?x622 ?x640 ?x321 ?x357) ?x97) 0))))
 (let (($x169 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (and $x127 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x213 ?x214) 4) $x155 $x169 $x611))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x283 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x429 (* (- 5) m)))
 (let ((?x484 (+ 13 (* (- 27) c) (* (- 32) k) ?x429 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x529 (+ 6 m)))
 (let ((?x344 (+ 1 n)))
 (let ((?x622 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x72 ?x68 ?x68))))
 (let ((?x640 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x529 ?x68))))
 (let ((?x499 (* k n n)))
 (let ((?x498 (* c n n)))
 (let ((?x357 (* ?x344 ?x344 ?x529 ?x529 ?x529 ?x72 ?x68)))
 (let ((?x321 (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x68 ?x68)))
 (let ((?x149 (* c n)))
 (let ((?x520 (* 2 ?x149)))
 (let ((?x55 (* k n)))
 (let ((?x521 (* 2 ?x55)))
 (let (($x430 (= (* (+ c k ?x521 ?x520 ?x321 ?x357 ?x498 ?x499 ?x640 ?x622) ?x484) 0)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x211 (= (+ ?x40 ?x44 ?x213 ?x214 (* 9 ?x149)) 4)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (let (($x435 (and $x127 $x211 $x263 $x301 (not $x430))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x101 (* (- 18) c)))
 (let ((?x97 (+ 13 ?x101 (* (- 23) k) (* (- 9) (* ?x344 ?x68)) ?x429 ?x48 ?x78)))
 (let (($x611 (not (= (* (+ (* ?x344 ?x344 ?x68) ?x622 ?x640 ?x321 ?x357) ?x97) 0))))
 (let (($x169 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x218 (and $x127 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x213 ?x214) 4) $x155 $x169 $x611)))
 (rewrite (= $x218 $x435))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x605 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x429 (* (- 5) m)))
 (let ((?x101 (* (- 18) c)))
 (let ((?x97 (+ 13 ?x101 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x429 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x529 (+ 6 m)))
 (let ((?x344 (+ 1 n)))
 (let ((?x357 (* ?x344 ?x344 ?x529 ?x529 ?x529 ?x72 ?x68)))
 (let ((?x321 (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x68 ?x68)))
 (let ((?x640 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x529 ?x68))))
 (let ((?x622 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x72 ?x68 ?x68))))
 (let (($x611 (not (= (* (+ (* ?x344 ?x344 ?x68) ?x622 ?x640 ?x321 ?x357) ?x97) 0))))
 (let (($x169 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x378 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x249 (= (+ ?x101 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (and $x127 $x249 $x378 $x169 $x611))))))))))))))))))) :qid k!34))
 ))
 (let ((?x328 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x429 (* (- 5) m)))
 (let ((?x101 (* (- 18) c)))
 (let ((?x97 (+ 13 ?x101 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x429 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x529 (+ 6 m)))
 (let ((?x344 (+ 1 n)))
 (let ((?x357 (* ?x344 ?x344 ?x529 ?x529 ?x529 ?x72 ?x68)))
 (let ((?x321 (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x68 ?x68)))
 (let ((?x640 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x529 ?x68))))
 (let ((?x622 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x72 ?x68 ?x68))))
 (let (($x611 (not (= (* (+ (* ?x344 ?x344 ?x68) ?x622 ?x640 ?x321 ?x357) ?x97) 0))))
 (let (($x169 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (let (($x218 (and $x127 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x213 ?x214) 4) $x155 $x169 $x611)))
 (let (($x378 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x249 (= (+ ?x101 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x277 (and $x127 $x249 $x378 $x169 $x611)))
 (rewrite (= $x277 $x218)))))))))))))))))))))))))))))
 ))
 (let (($x94 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x85 (- (- (* ?x68 ?x70 ?x70) (* ?x68 ?x68 ?x72 ?x81 ?x81 ?x70 ?x70 ?x70)) (* ?x68 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x88 (+ ?x85 (* ?x68 ?x68 ?x81 ?x81 ?x70 ?x70 ?x70) (* ?x68 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x88) 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x138 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x429 (* (- 5) m)))
 (let ((?x101 (* (- 18) c)))
 (let ((?x97 (+ 13 ?x101 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x429 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x529 (+ 6 m)))
 (let ((?x344 (+ 1 n)))
 (let ((?x357 (* ?x344 ?x344 ?x529 ?x529 ?x529 ?x72 ?x68)))
 (let ((?x321 (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x68 ?x68)))
 (let ((?x640 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x529 ?x68))))
 (let ((?x622 (* (- 1) (* ?x344 ?x344 ?x344 ?x529 ?x529 ?x72 ?x68 ?x68))))
 (let (($x611 (not (= (* (+ (* ?x344 ?x344 ?x68) ?x622 ?x640 ?x321 ?x357) ?x97) 0))))
 (let (($x169 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x378 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x249 (= (+ ?x101 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (let (($x277 (and $x127 $x249 $x378 $x169 $x611)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x85 (- (- (* ?x68 ?x70 ?x70) (* ?x68 ?x68 ?x72 ?x81 ?x81 ?x70 ?x70 ?x70)) (* ?x68 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x88 (+ ?x85 (* ?x68 ?x68 ?x81 ?x81 ?x70 ?x70 ?x70) (* ?x68 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x93 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x88) 0))))))
 (rewrite (= $x93 $x277))))))))))))))))))))))))))))))))))
 ))
 (let ((@x95 (asserted $x94)))
 (let ((@x216 (mp (mp @x95 (quant-intro (proof-bind ?x138) (= $x94 $x605)) $x605) (rewrite (= $x605 $x605)) $x605)))
 (let ((@x330 (mp (mp @x216 (quant-intro (proof-bind ?x328) (= $x605 $x325)) $x325) (quant-intro (proof-bind ?x283) (= $x325 $x156)) $x156)))
 (let ((@x118 (mp (mp~ @x330 (sk (~ $x156 $x404)) $x404) (rewrite (= $x404 $x261)) $x261)))
 (let ((@x260 (and-elim @x118 $x526)))
 (let ((@x505 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x526) $x527)) @x260 $x527)))
 (let (($x234 (>= ?x274 (- 6))))
 (let ((@x199 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x526) $x234)) @x260 $x234)))
 (let (($x492 (<= ?x166 (- 1))))
 (let ((@x257 (and-elim @x118 $x346)))
 (let ((@x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x346) $x492)) @x257 $x492)))
 (let (($x259 (>= ?x166 (- 1))))
 (let ((@x230 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x346) $x259)) @x257 $x259)))
 (let (($x401 (<= ?x409 (- 1))))
 (let ((@x158 (and-elim @x118 $x408)))
 (let ((@x243 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x408) $x401)) @x158 $x401)))
 (let (($x179 (>= ?x409 (- 1))))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x408) $x179)) @x158 $x179)))
 (let (($x157 (<= ?x428 (- 4))))
 (let ((@x171 (and-elim @x118 $x187)))
 (let ((@x375 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x187) $x157)) @x171 $x157)))
 (let (($x235 (>= ?x428 (- 4))))
 (let ((@x316 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x187) $x235)) @x171 $x235)))
 (let ((@x667 ((_ th-lemma arith) (hypothesis (not $x556)) @x250 @x243 @x199 @x505 @x250 @x243 @x199 @x505 @x199 @x505 @x316 @x375 @x250 @x243 @x199 @x505 @x230 @x240 @x199 @x505 false)))
 (let ((@x565 (lemma @x667 $x556)))
 (let (($x597 (>= ?x538 0)))
 (let ((@x643 ((_ th-lemma arith) (hypothesis (not $x597)) @x316 @x375 @x250 @x243 @x199 @x505 @x199 @x505 @x230 @x240 @x199 @x505 @x250 @x243 @x199 @x505 false)))
 (let ((@x657 (lemma @x643 $x597)))
 (let (($x658 (not (>= ?x351 0))))
 (let (($x399 (<= ?x351 0)))
 (let (($x561 (= ?x538 0)))
 (let ((@x482 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x561 (not $x556) (not $x597))) @x657 @x565 $x561)))
 (let ((@x362 (hypothesis $x561)))
 (let ((@x578 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x399)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x561) $x597)) @x362 $x597) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x561) $x556)) @x362 $x556) false)))
 (let ((@x661 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x270 (not $x399) $x658)) (and-elim @x118 $x353) (or (not $x399) $x658))))
 (let ((@x668 (unit-resolution @x661 (unit-resolution (lemma @x578 (or (not $x561) $x399)) @x482 $x399) $x658)))
 ((_ th-lemma arith farkas 1 1 1) @x668 @x657 @x565 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 33
 :arith-assert-diseq        9
 :arith-assert-lower        186
 :arith-assert-upper        188
 :arith-bound-prop          2
 :arith-branch-var          10
 :arith-conflicts           19
 :arith-eq-adapter          15
 :arith-fixed-eqs           30
 :arith-gcd-tests           85
 :arith-gomory-cuts         4
 :arith-grobner             17
 :arith-ineq-splits         10
 :arith-max-min             1537
 :arith-nonlinear-bounds    71
 :arith-nonlinear-horner    184
 :arith-num-rows            15
 :arith-offset-eqs          1
 :arith-patches             20
 :arith-pivots              172
 :arith-pseudo-nonlinear    34
 :arith-row-summations      1007
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    15
 :conflicts                 23
 :decisions                 106
 :del-clause                53
 :final-checks              62
 :max-memory                3.90
 :memory                    3.17
 :minimized-lits            3
 :mk-bool-var               125
 :mk-clause                 71
 :num-allocs                7616706
 :num-checks                1
 :propagations              59
 :rlimit-count              195101
 :time                      0.07
 :total-time                0.08)
