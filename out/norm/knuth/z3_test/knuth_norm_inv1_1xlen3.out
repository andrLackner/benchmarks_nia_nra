unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun q!3 () Int)
(declare-fun r!2 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x41 (* d00 d00 q00)))
 (let ((?x32 (* 8 r00)))
 (let ((?x1527 (+ ?x32 ?x41 (* 4 (* d00 x00)) (* (- 8) r!2) (* (- 2) (* d00 q00)) (* (- 4) (* r00 d00)) (* (- 4) (* x!0 d!1)) (* 4 (* r!2 d!1)) (* 2 (* q!3 d!1)) (* (- 1) (* q!3 d!1 d!1)))))
 (let (($x1331 (<= ?x1527 0)))
 (let (($x4538 (= ?x1527 0)))
 (let ((?x5055 (* (- 1) x!0)))
 (let ((?x5044 (* 2 r!2)))
 (let ((?x2399 (+ ?x5044 ?x5055 q!3)))
 (let ((?x4423 (+ 2 d!1)))
 (let ((?x4880 (* (- 1) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 q!3))))
 (let ((?x3440 (* (- 1) (* q!3 q!3 q!3 q!3 q!3 d!1 d!1))))
 (let ((?x3459 (* 2 (* q!3 q!3 q!3 q!3 q!3 d!1))))
 (let ((?x654 (+ ?x3459 (* (- 48) (* d00 d00 q00 r!2 r!2 d!1)) (* 8 (* r00 q!3 q!3 q!3 q!3)) (* 4 (* d00 d00 q00 r!2 x!0 d!1 d!1 d!1)) (* (- 2) (* d00 q00 x!0 x!0 q!3 q!3)) (* 16 (* r!2 x!0 q!3 q!3 q!3)) (* (- 4) (* d00 x00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399)) (* 32 (* r!2 r!2 x!0 q!3 q!3)) (* 32 (* r00 r!2 r!2 q!3 q!3)) (* (- 8) (* r!2 x!0 x!0 q!3 q!3)) (* (- 16) (* r00 d00 r!2 q!3 q!3 q!3)) (* (- 8) (* d00 d00 q00 x!0 x!0)) (* 16 (* d00 d00 q00 x!0 q!3)) (* 4 (* d00 x00 x!0 x!0 q!3 q!3)) (* 48 (* d00 d00 q00 r!2 x!0 d!1)) (* (- 32) (* r00 r!2 x!0 q!3 q!3)) (* (- 8) (* d00 d00 q00 q!3 q!3)) (* 2 (* d00 q00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 q!3)) (* 8 (* ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 ?x2399 r!2 q!3)) (* (- 32) (* r!2 x!0 q!3 q!3 q!3 d!1)) (* (- 8) (* r00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 q!3)) (* 4 (* d00 d00 q00 r!2 r!2 q!3 q!3)) (* (- 4) (* r!2 r!2 q!3 q!3 q!3 d!1 d!1)) (* 8 (* ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399)) (* 16 (* d00 x00 r!2 r!2 q!3 q!3)) (* 4 (* d00 q00 x!0 q!3 q!3 q!3)) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 q!3) (* (- 16) (* r00 x!0 q!3 q!3 q!3)) (* (- 48) (* d00 d00 q00 r!2 q!3 d!1)) (* 20 (* r!2 x!0 x!0 q!3 q!3 d!1)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399)) (* (- 16) (* r00 d00 r!2 r!2 q!3 q!3)) (* 10 (* x!0 x!0 q!3 q!3 q!3 d!1)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 ?x2399 r!2 q!3)) (* 2 (* x!0 q!3 q!3 q!3 q!3 d!1 d!1)) (* (- 12) (* d00 d00 q00 x!0 x!0 d!1)) (* (- 4) (* x!0 x!0 x!0 q!3 q!3 d!1)) (* (- 2) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 q!3 q!3)) (* (- 1) (* x!0 x!0 q!3 q!3 q!3 d!1 d!1)) (* 32 (* d00 d00 q00 r!2 x!0)) (* 2 (* d00 d00 q00 x!0 q!3 d!1 d!1 d!1)) (* (- 4) (* r00 d00 q!3 q!3 q!3 q!3)) (* 12 (* d00 d00 q00 x!0 q!3 d!1 d!1)) (* (- 6) (* d00 d00 q00 x!0 x!0 d!1 d!1)) (* 24 (* d00 d00 q00 r!2 x!0 d!1 d!1)) (* 24 (* d00 d00 q00 x!0 q!3 d!1)) (* (- 8) (* r00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399)) (* 16 (* r00 d00 r!2 x!0 q!3 q!3)) (* (- 8) (* d00 x00 x!0 q!3 q!3 q!3)) (* 4 (* d00 r00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 q!3)) (* 8 (* r00 x!0 x!0 q!3 q!3)) (* (- 32) (* r!2 r!2 x!0 q!3 q!3 d!1)) (* 32 (* r00 r!2 q!3 q!3 q!3)) (* (- 6) (* d00 d00 q00 q!3 q!3 d!1 d!1)) (* (- 32) (* d00 d00 q00 r!2 q!3)) (* (- 2) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 q!3)) (* (- 8) (* d00 q00 r!2 q!3 q!3 q!3)) ?x3440 (* (- 24) (* d00 d00 q00 r!2 q!3 d!1 d!1)) (* 8 (* d00 q00 r!2 x!0 q!3 q!3)) (* (- 12) (* d00 d00 q00 q!3 q!3 d!1)) (* (- 4) (* d00 d00 q00 r!2 x!0 q!3 q!3)) (* d00 d00 q00 x!0 x!0 q!3 q!3) (* (- 2) (* d00 d00 q00 x!0 q!3 q!3 q!3)) (* 4 (* d00 d00 q00 r!2 q!3 q!3 q!3)) (* (- 4) (* d00 d00 q00 r!2 q!3 d!1 d!1 d!1)) (* (- 4) (* r00 d00 x!0 x!0 q!3 q!3)) (* (- 8) (* x!0 q!3 q!3 q!3 q!3 d!1)) ?x4880 (* d00 d00 q00 q!3 q!3 q!3 q!3) (* 16 (* d00 x00 r!2 q!3 q!3 q!3)) (* 12 (* r!2 q!3 q!3 q!3 q!3 d!1)) (* (- 1) (* d00 d00 q00 q!3 q!3 d!1 d!1 d!1)) (* 16 (* r!2 r!2 r!2 q!3 q!3 d!1)) (* (- 2) (* d00 q00 q!3 q!3 q!3 q!3)) (* 8 (* r00 d00 x!0 q!3 q!3 q!3)) (* 4 (* r!2 x!0 q!3 q!3 q!3 d!1 d!1)) (* (- 32) (* d00 d00 q00 r!2 r!2)) (* (- 8) (* r!2 q!3 q!3 q!3 q!3)) (* 4 (* d00 r00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399)) (* (- 4) (* r!2 q!3 q!3 q!3 q!3 d!1 d!1)) (* (- 32) (* r!2 r!2 q!3 q!3 q!3)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 r!2)) (* 24 (* r!2 r!2 q!3 q!3 q!3 d!1)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 r!2 q!3)) (* (- 4) (* d00 d00 q00 r!2 r!2 d!1 d!1 d!1)) (* (- 24) (* d00 d00 q00 r!2 r!2 d!1 d!1)) (* (- 16) (* d00 x00 r!2 x!0 q!3 q!3)) (* (- 4) (* d00 x00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 q!3)) (* (- 8) (* d00 q00 r!2 r!2 q!3 q!3)) (* 2 (* d00 q00 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399)) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x2399 ?x2399 ?x2399 r!2 q!3 q!3) (* (- 32) (* r!2 r!2 r!2 q!3 q!3)) (* (- 1) (* d00 d00 q00 x!0 x!0 d!1 d!1 d!1)) (* 4 (* d00 x00 q!3 q!3 q!3 q!3)))))
 (let (($x4939 (= ?x654 0)))
 (let (($x2292 (not $x4939)))
 (let ((?x1878 (+ 2 ?x5044 ?x5055 q!3 d!1)))
 (let ((?x4718 (+ 4 q!3)))
 (let ((?x1977 (* (- 1) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x4718 ?x1878 ?x1878 ?x1878 r!2))))
 (let ((?x2700 (+ (* 2 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878)) (* (- 2) (* d00 q00 ?x4423 ?x4423 ?x4423 ?x1878 ?x1878)) (* (- 8) (* r00 ?x4718 ?x4718 ?x1878 ?x1878)) (* (- 2) (* d00 q00 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 r!2)) (* 8 (* r00 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 r!2)) (* 4 (* ?x4423 ?x4718 ?x4718 ?x1878 ?x1878 r!2)) (* 4 (* d00 r00 ?x4718 ?x4718 ?x1878 ?x1878)) (* 8 (* ?x4718 ?x4718 ?x1878 ?x1878 ?x1878)) (* ?x4423 ?x4423 ?x4718 ?x4718 ?x4718 ?x1878 ?x1878) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 r!2) (* (- 8) (* ?x4423 ?x4423 ?x4423 ?x1878 ?x1878 ?x1878)) (* 2 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x4718 ?x1878 ?x1878 ?x1878 r!2)) (* (- 4) (* d00 x00 ?x4718 ?x4718 ?x1878 ?x1878)) (* 2 (* d00 q00 ?x4718 ?x4718 ?x1878 ?x1878)) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x1878 ?x1878) (* (- 1) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878)) (* (- 2) (* ?x4423 ?x4718 ?x4718 ?x4718 ?x1878 ?x1878)) ?x1977 (* (- 4) (* d00 r00 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 r!2)) (* 4 (* d00 x00 ?x4423 ?x4423 ?x4423 ?x1878 ?x1878)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x1878 ?x1878 ?x1878)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 r!2 r!2)) (* 8 (* r00 ?x4423 ?x4423 ?x4423 ?x1878 ?x1878)) (* (- 1) (* d00 d00 q00 ?x4718 ?x4718 ?x1878 ?x1878)) (* (- 4) (* d00 r00 ?x4423 ?x4423 ?x4423 ?x1878 ?x1878)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 ?x1878 r!2)) (* (- 8) (* ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 ?x1878 r!2)) (* (- 4) (* ?x4423 ?x4718 ?x4718 ?x1878 ?x1878 ?x1878)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x1878 ?x1878 r!2)) (* 4 (* d00 x00 ?x4423 ?x4423 ?x4423 ?x4718 ?x1878 ?x1878 ?x1878 r!2)))))
 (let (($x2923 (= ?x2700 0)))
 (let ((?x3871 (* (- 2) d!1)))
 (let ((?x908 (+ (- 4) ?x5044 ?x5055 q!3 ?x3871)))
 (let ((?x1556 (* 8 (* (+ (- 8) q!3) ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 ?x908 r!2))))
 (let ((?x1984 (* (- 4) (* (+ (- 8) q!3) ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 ?x908 r!2))))
 (let ((?x2529 (+ (- 8) q!3)))
 (let ((?x4094 (* (- 1) (* d00 d00 q00 ?x2529 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2))))
 (let ((?x3705 (+ (* 2 (* d00 q00 ?x2529 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2)) (* (- 8) (* ?x2529 ?x2529 ?x908 ?x908 ?x908)) (* d00 d00 q00 ?x2529 ?x2529 ?x908 ?x908) (* 8 (* ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908)) (* 4 (* ?x2529 ?x2529 ?x4423 ?x908 ?x908 ?x908)) (* 2 (* ?x2529 ?x2529 ?x2529 ?x4423 ?x908 ?x908)) (* (- 4) (* d00 x00 ?x2529 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2)) (* (- 8) (* r00 ?x4423 ?x4423 ?x4423 ?x908 ?x908)) (* 4 (* d00 r00 ?x4423 ?x4423 ?x4423 ?x908 ?x908)) (* 4 (* d00 r00 ?x2529 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2)) (* (- 4) (* ?x2529 ?x2529 ?x4423 ?x908 ?x908 r!2)) (* (- 1) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x908 ?x908)) (* (- 8) (* r00 ?x2529 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2)) (* 4 (* ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2 r!2)) (* (- 2) (* ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908)) (* 4 (* d00 x00 ?x2529 ?x2529 ?x908 ?x908)) (* (- 2) (* d00 q00 ?x2529 ?x2529 ?x908 ?x908)) (* (- 4) (* d00 x00 ?x4423 ?x4423 ?x4423 ?x908 ?x908)) (* (- 4) (* d00 r00 ?x2529 ?x2529 ?x908 ?x908)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908 r!2)) (* (- 2) (* ?x2529 ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2)) (* (- 1) (* ?x2529 ?x2529 ?x2529 ?x4423 ?x4423 ?x908 ?x908)) (* ?x2529 ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908 ?x908 r!2) (* ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x908 ?x908) ?x4094 ?x1984 ?x1556 (* 8 (* r00 ?x2529 ?x2529 ?x908 ?x908)) (* 2 (* d00 q00 ?x4423 ?x4423 ?x4423 ?x908 ?x908)))))
 (let (($x2309 (= ?x3705 0)))
 (let ((?x3493 (* (- 1) d!1)))
 (let ((?x4954 (+ (- 2) ?x5044 ?x5055 q!3 ?x3493)))
 (let ((?x2357 (+ (- 4) q!3)))
 (let ((?x4872 (* (- 1) (* ?x2357 ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2))))
 (let ((?x3288 (+ (* 2 (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954)) (* (- 4) (* d00 r00 ?x2357 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2)) (* 2 (* ?x2357 ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2)) (* (- 4) (* d00 x00 ?x2357 ?x2357 ?x4954 ?x4954)) (* (- 4) (* d00 r00 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954)) (* (- 8) (* ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954)) (* 8 (* ?x2357 ?x2357 ?x4954 ?x4954 ?x4954)) (* (- 2) (* d00 q00 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954)) (* (- 8) (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 ?x4954 r!2)) (* (- 2) (* d00 q00 ?x2357 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2)) (* (- 4) (* ?x2357 ?x2357 ?x4423 ?x4954 ?x4954 ?x4954)) (* (- 1) (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954)) (* (- 2) (* ?x2357 ?x2357 ?x2357 ?x4423 ?x4954 ?x4954)) (* 4 (* d00 r00 ?x2357 ?x2357 ?x4954 ?x4954)) (* (- 8) (* r00 ?x2357 ?x2357 ?x4954 ?x4954)) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954) (* (- 1) (* d00 d00 q00 ?x2357 ?x2357 ?x4954 ?x4954)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 r!2)) (* 2 (* d00 q00 ?x2357 ?x2357 ?x4954 ?x4954)) (* 8 (* r00 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954)) (* 8 (* r00 ?x2357 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2)) (* 4 (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 ?x4954 r!2)) (* 4 (* d00 x00 ?x2357 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2)) (* ?x2357 ?x2357 ?x2357 ?x4423 ?x4423 ?x4954 ?x4954) (* d00 d00 q00 ?x2357 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2) ?x4872 (* (- 4) (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954 r!2 r!2)) (* 4 (* d00 x00 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4954 ?x4954 ?x4954)) (* 4 (* ?x2357 ?x2357 ?x4423 ?x4954 ?x4954 r!2)))))
 (let (($x2565 (= ?x3288 0)))
 (let (($x1001 (not $x2565)))
 (let (($x2291 (or $x1001 (not $x2309) (not $x2923) $x2292)))
 (let (($x2070 (and $x4538 $x2291)))
 (let ((?x3498 (+ (- 2) q!3 ?x5044 ?x5055 ?x3493)))
 (let ((?x3552 (* (- 1) (* d00 d00 q00 ?x2357 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2))))
 (let ((?x4986 (+ (* 4 (* d00 r00 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498)) (* (- 8) (* ?x2357 ?x2357 ?x3498 ?x3498 ?x3498)) (* 4 (* ?x2357 ?x2357 ?x4423 ?x3498 ?x3498 ?x3498)) (* 8 (* ?x2357 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 ?x3498 r!2)) (* (- 4) (* d00 x00 ?x2357 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2)) (* (- 4) (* d00 r00 ?x2357 ?x2357 ?x3498 ?x3498)) (* 2 (* d00 q00 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498)) (* (- 8) (* r00 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498)) (* 4 (* d00 r00 ?x2357 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2)) (* 8 (* ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 r!2)) (* (- 2) (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498)) (* (- 2) (* ?x2357 ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2)) (* 8 (* r00 ?x2357 ?x2357 ?x3498 ?x3498)) (* (- 4) (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 ?x3498 r!2)) (* (- 1) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498)) (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498) (* (- 8) (* r00 ?x2357 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2)) (* (- 2) (* d00 q00 ?x2357 ?x2357 ?x3498 ?x3498)) ?x3552 (* 2 (* d00 q00 ?x2357 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2)) (* (- 1) (* ?x2357 ?x2357 ?x2357 ?x4423 ?x4423 ?x3498 ?x3498)) (* 4 (* d00 x00 ?x2357 ?x2357 ?x3498 ?x3498)) (* 4 (* ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2 r!2)) (* 2 (* ?x2357 ?x2357 ?x2357 ?x4423 ?x3498 ?x3498)) (* ?x2357 ?x2357 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498 ?x3498 r!2) (* (- 4) (* ?x2357 ?x2357 ?x4423 ?x3498 ?x3498 r!2)) (* d00 d00 q00 ?x2357 ?x2357 ?x3498 ?x3498) (* (- 4) (* d00 x00 ?x4423 ?x4423 ?x4423 ?x3498 ?x3498)))))
 (let ((?x3274 (+ q!3 ?x5044 ?x5055)))
 (let ((?x3448 (* (- 1) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 q!3))))
 (let ((?x3485 (+ (* 8 (* ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 ?x3274 r!2 q!3)) (* 12 (* q!3 q!3 q!3 x!0 x!0 d!1)) (* (- 2) (* d!1 q!3 ?x5055 q!3 q!3 q!3)) (* (- 1) (* q!3 q!3 q!3 x!0 x!0 d!1 d!1)) (* (- 2) (* d!1 ?x5055 q!3 q!3 q!3 q!3)) (* (- 2) (* d!1 ?x5055 ?x5055 q!3 q!3 q!3)) (* 16 (* q!3 q!3 r!2 r!2 d00 x00)) (* 48 (* r!2 x!0 d00 d00 q00 d!1)) (* (- 6) (* x!0 x!0 d00 d00 q00 d!1 d!1)) (* 20 (* q!3 q!3 r!2 x!0 x!0 d!1)) (* 2 (* q!3 q!3 q!3 q!3 x!0 d!1 d!1)) (* (- 12) (* x!0 x!0 d00 d00 q00 d!1)) (* (- 2) (* d!1 ?x5055 ?x5044 q!3 q!3 q!3)) (* (- 1) (* x!0 x!0 d00 d00 q00 d!1 d!1 d!1)) (* (- 16) (* q!3 q!3 r!2 r!2 r00 d00)) (* 8 (* q!3 q!3 q!3 q!3 r00)) (* 32 (* q!3 q!3 q!3 r!2 r!2 d!1)) (* (- 40) (* q!3 q!3 q!3 r!2 x!0 d!1)) (* (- 4) (* q!3 q!3 x!0 x!0 x!0 d!1)) (* (- 2) (* d!1 ?x5044 q!3 q!3 q!3 q!3)) (* (- 32) (* q!3 q!3 r!2 r!2 x!0 d!1)) (* (- 2) (* d!1 q!3 ?x5044 q!3 q!3 q!3)) (* (- 2) (* d!1 ?x5044 ?x5055 q!3 q!3 q!3)) (* 16 (* q!3 q!3 r!2 r!2 r!2 d!1)) (* (- 2) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 q!3 q!3)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 ?x3274 r!2 q!3)) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 q!3 q!3) (* (- 1) (* q!3 q!3 d00 d00 q00 d!1 d!1 d!1)) (* 2 (* q!3 x!0 d00 d00 q00 d!1 d!1 d!1)) (* (- 24) (* r!2 r!2 d00 d00 q00 d!1 d!1)) (* (- 4) (* r!2 r!2 d00 d00 q00 d!1 d!1 d!1)) (* (- 4) (* d00 x00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274)) (* (- 2) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 q!3)) (* (- 12) (* q!3 q!3 d00 d00 q00 d!1)) (* (- 6) (* q!3 q!3 d00 d00 q00 d!1 d!1)) (* (- 8) (* q!3 q!3 d00 d00 q00)) (* 4 (* q!3 q!3 r!2 r!2 d00 d00 q00)) (* (- 48) (* q!3 r!2 d00 d00 q00 d!1)) (* (- 24) (* q!3 r!2 d00 d00 q00 d!1 d!1)) (* 16 (* q!3 x!0 d00 d00 q00)) (* (- 4) (* q!3 r!2 d00 d00 q00 d!1 d!1 d!1)) (* 24 (* q!3 x!0 d00 d00 q00 d!1)) (* 12 (* q!3 x!0 d00 d00 q00 d!1 d!1)) (* (- 48) (* r!2 r!2 d00 d00 q00 d!1)) (* (- 8) (* x!0 x!0 d00 d00 q00)) (* 32 (* q!3 q!3 q!3 r!2 r00)) (* (- 8) (* q!3 q!3 q!3 q!3 r!2)) (* (- 16) (* q!3 q!3 q!3 x!0 r00)) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 q!3) (* 4 (* q!3 q!3 q!3 x!0 d00 q00)) (* (- 8) (* q!3 q!3 q!3 r!2 d00 q00)) (* (- 2) (* q!3 q!3 q!3 q!3 d00 q00)) (* (- 4) (* q!3 q!3 q!3 q!3 r00 d00)) (* (- 16) (* q!3 q!3 q!3 r!2 r00 d00)) (* 8 (* q!3 q!3 r!2 x!0 d00 q00)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 r!2 q!3)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274)) (* (- 4) (* q!3 q!3 x!0 x!0 r00 d00)) (* 16 (* q!3 q!3 r!2 x!0 r00 d00)) (* (- 2) (* d!1 ?x5044 ?x5044 q!3 q!3 q!3)) (* (- 8) (* q!3 q!3 r!2 r!2 d00 q00)) (* (- 4) (* d00 x00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 q!3)) (* 2 (* d00 q00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274)) (* (- 8) (* r00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274)) (* 4 (* r!2 x!0 d00 d00 q00 d!1 d!1 d!1)) (* 4 (* d00 r00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 q!3)) (* (- 8) (* r00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 q!3)) (* 32 (* r!2 x!0 d00 d00 q00)) ?x3440 (* 8 (* q!3 q!3 q!3 x!0 r00 d00)) (* 32 (* q!3 q!3 r!2 r!2 x!0)) (* 4 (* d00 r00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274)) (* (- 12) (* q!3 q!3 q!3 q!3 x!0 d!1)) (* 24 (* r!2 x!0 d00 d00 q00 d!1 d!1)) (* (- 2) (* q!3 q!3 x!0 x!0 d00 q00)) ?x3448 (* 2 (* d00 q00 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274 r!2 q!3)) (* (- 32) (* q!3 q!3 r!2 x!0 r00)) (* 4 (* q!3 q!3 q!3 q!3 d00 x00)) (* (- 16) (* q!3 q!3 r!2 x!0 d00 x00)) (* (- 32) (* q!3 q!3 r!2 r!2 r!2)) (* 4 (* q!3 q!3 x!0 x!0 d00 x00)) (* 8 (* q!3 q!3 x!0 x!0 r00)) (* 32 (* q!3 q!3 r!2 r!2 r00)) ?x3459 (* 20 (* q!3 q!3 q!3 q!3 r!2 d!1)) (* (- 8) (* q!3 q!3 r!2 x!0 x!0)) (* (- 4) (* q!3 q!3 q!3 r!2 r!2 d!1 d!1)) (* 16 (* q!3 q!3 q!3 r!2 x!0)) (* (- 32) (* q!3 q!3 q!3 r!2 r!2)) (* (- 4) (* q!3 q!3 q!3 q!3 r!2 d!1 d!1)) (* 4 (* q!3 q!3 q!3 r!2 x!0 d!1 d!1)) (* (- 32) (* r!2 r!2 d00 d00 q00)) (* (- 32) (* q!3 r!2 d00 d00 q00)) (* 16 (* q!3 q!3 q!3 r!2 d00 x00)) (* (- 8) (* q!3 q!3 q!3 x!0 d00 x00)) (* 8 (* ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 ?x3274)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3274 ?x3274 r!2)) (* q!3 q!3 q!3 q!3 d00 d00 q00) (* 4 (* q!3 q!3 q!3 r!2 d00 d00 q00)) (* (- 2) (* q!3 q!3 q!3 x!0 d00 d00 q00)) (* (- 4) (* q!3 q!3 r!2 x!0 d00 d00 q00)) (* q!3 q!3 x!0 x!0 d00 d00 q00))))
 (let ((?x3875 (+ (- 4) q!3 ?x5044 ?x5055 ?x3871)))
 (let ((?x3011 (* (- 1) (* ?x2529 ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2))))
 (let ((?x3036 (+ (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875) (* 2 (* ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875)) (* (- 1) (* d00 d00 q00 ?x2529 ?x2529 ?x3875 ?x3875)) (* 4 (* ?x2529 ?x2529 ?x4423 ?x3875 ?x3875 r!2)) (* 8 (* r00 ?x2529 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2)) (* 8 (* ?x2529 ?x2529 ?x3875 ?x3875 ?x3875)) (* 4 (* d00 x00 ?x2529 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2)) (* ?x2529 ?x2529 ?x2529 ?x4423 ?x4423 ?x3875 ?x3875) (* (- 2) (* d00 q00 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875)) (* (- 1) (* ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875)) ?x3011 (* (- 4) (* ?x2529 ?x2529 ?x4423 ?x3875 ?x3875 ?x3875)) (* 2 (* ?x2529 ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2)) (* (- 4) (* d00 r00 ?x2529 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2)) (* (- 4) (* d00 r00 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875)) (* d00 d00 q00 ?x2529 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2) (* (- 2) (* d00 q00 ?x2529 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2)) (* (- 4) (* ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 r!2 r!2)) (* 8 (* r00 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875)) (* (- 8) (* r00 ?x2529 ?x2529 ?x3875 ?x3875)) (* 2 (* d00 q00 ?x2529 ?x2529 ?x3875 ?x3875)) (* 4 (* d00 r00 ?x2529 ?x2529 ?x3875 ?x3875)) (* (- 2) (* ?x2529 ?x2529 ?x2529 ?x4423 ?x3875 ?x3875)) (* (- 4) (* d00 x00 ?x2529 ?x2529 ?x3875 ?x3875)) (* 4 (* ?x2529 ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 ?x3875 r!2)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 r!2)) (* (- 8) (* ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875)) (* (- 8) (* ?x2529 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875 ?x3875 ?x3875 r!2)) (* 4 (* d00 x00 ?x4423 ?x4423 ?x4423 ?x3875 ?x3875)))))
 (let ((?x663 (+ 2 q!3 ?x5044 ?x5055 d!1)))
 (let ((?x4611 (* (- 1) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x4718 ?x663 ?x663 ?x663 r!2))))
 (let ((?x4961 (+ (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 r!2) (* (- 8) (* ?x4423 ?x4423 ?x4423 ?x663 ?x663 ?x663)) (* 8 (* ?x4718 ?x4718 ?x663 ?x663 ?x663)) (* (- 2) (* ?x4423 ?x4718 ?x4718 ?x4718 ?x663 ?x663)) (* (- 1) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663)) ?x4611 (* (- 4) (* d00 r00 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 r!2)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x663 ?x663 ?x663)) (* (- 8) (* r00 ?x4718 ?x4718 ?x663 ?x663)) (* (- 2) (* d00 q00 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 r!2)) (* 4 (* d00 x00 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 r!2)) (* ?x4423 ?x4423 ?x4718 ?x4718 ?x4718 ?x663 ?x663) (* 4 (* d00 r00 ?x4718 ?x4718 ?x663 ?x663)) (* 8 (* r00 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 r!2)) (* 8 (* r00 ?x4423 ?x4423 ?x4423 ?x663 ?x663)) (* 2 (* d00 q00 ?x4718 ?x4718 ?x663 ?x663)) (* 4 (* ?x4423 ?x4718 ?x4718 ?x663 ?x663 r!2)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 r!2 r!2)) (* (- 4) (* ?x4423 ?x4718 ?x4718 ?x663 ?x663 ?x663)) (* 4 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 ?x663 r!2)) (* (- 8) (* ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663 ?x663 ?x663 r!2)) (* 4 (* d00 x00 ?x4423 ?x4423 ?x4423 ?x663 ?x663)) (* 2 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x663 ?x663)) (* (- 4) (* d00 r00 ?x4423 ?x4423 ?x4423 ?x663 ?x663)) (* (- 4) (* d00 x00 ?x4718 ?x4718 ?x663 ?x663)) (* (- 2) (* d00 q00 ?x4423 ?x4423 ?x4423 ?x663 ?x663)) (* (- 1) (* d00 d00 q00 ?x4718 ?x4718 ?x663 ?x663)) (* (- 4) (* ?x4423 ?x4423 ?x4423 ?x4423 ?x663 ?x663 r!2)) (* d00 d00 q00 ?x4423 ?x4423 ?x4423 ?x663 ?x663) (* 2 (* ?x4423 ?x4423 ?x4423 ?x4423 ?x4718 ?x4718 ?x663 ?x663 ?x663 r!2)))))
 (let (($x4981 (or (not (= ?x4961 0)) (not (= ?x3036 0)) (not (= ?x3485 0)) (not (= ?x4986 0)))))
 (let ((?x5053 (* q!3 d!1 d!1)))
 (let ((?x435 (* r00 d00)))
 (let ((?x436 (* 4 ?x435)))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x4714 (+ (* 8 r!2) ?x300 ?x348 ?x332 ?x398 ?x436 (* (- 4) (* r!2 d!1)) (* 4 (* x!0 d!1)) (* (- 2) (* q!3 d!1)) ?x5053)))
 (let (($x4152 (and (= ?x4714 0) $x4981)))
 (let (($x5561 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x6158 (* (- 1) d)))
 (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x2712 (+ (- 2) q ?x233 ?x312 ?x6158)))
 (let ((?x450 (+ 2 d)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x2967 (* (- 1) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r))))
 (let ((?x3831 (+ (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 8) (* ?x6157 ?x6157 ?x2712 ?x2712 ?x2712)) (* 4 (* ?x6157 ?x6157 ?x450 ?x2712 ?x2712 ?x2712)) (* 8 (* ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 ?x2712 r)) (* (- 4) (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* (- 4) (* d00 r00 ?x6157 ?x6157 ?x2712 ?x2712)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712)) (* 4 (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* 8 (* ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 r)) (* (- 2) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 2) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* 8 (* r00 ?x6157 ?x6157 ?x2712 ?x2712)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 ?x2712 r)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712) (* (- 8) (* r00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* (- 2) (* d00 q00 ?x6157 ?x6157 ?x2712 ?x2712)) ?x2967 (* 2 (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* (- 1) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x2712 ?x2712)) (* 4 (* d00 x00 ?x6157 ?x6157 ?x2712 ?x2712)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r r)) (* 2 (* ?x6157 ?x6157 ?x6157 ?x450 ?x2712 ?x2712)) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r) (* (- 4) (* ?x6157 ?x6157 ?x450 ?x2712 ?x2712 r)) (* d00 d00 q00 ?x6157 ?x6157 ?x2712 ?x2712) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x2712 ?x2712)))))
 (let ((?x6081 (* q q x x d00 d00 q00)))
 (let ((?x6072 (* q q q q d00 d00 q00)))
 (let ((?x3736 (+ q ?x233 ?x312)))
 (let ((?x6060 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 r)))
 (let ((?x3818 (* 2 (* q q q q q d))))
 (let ((?x4442 (* (- 32) (* q q r r r))))
 (let ((?x4101 (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q))))
 (let ((?x4653 (+ (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* 12 (* q q q x x d)) (* (- 2) (* d q ?x312 q q q)) (* (- 1) (* q q q x x d d)) (* (- 2) (* d ?x312 q q q q)) (* (- 2) (* d ?x312 ?x312 q q q)) (* 16 (* q q r r d00 x00)) (* 48 (* r x d00 d00 q00 d)) (* (- 6) (* x x d00 d00 q00 d d)) (* 20 (* q q r x x d)) (* 2 (* q q q q x d d)) (* (- 12) (* x x d00 d00 q00 d)) (* (- 2) (* d ?x312 ?x233 q q q)) (* (- 1) (* x x d00 d00 q00 d d d)) (* (- 16) (* q q r r r00 d00)) (* 8 (* q q q q r00)) (* 32 (* q q q r r d)) (* (- 40) (* q q q r x d)) (* (- 4) (* q q x x x d)) (* (- 2) (* d ?x233 q q q q)) (* (- 32) (* q q r r x d)) (* (- 2) (* d q ?x233 q q q)) (* (- 2) (* d ?x233 ?x312 q q q)) (* 16 (* q q r r r d)) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q) (* (- 1) (* q q d00 d00 q00 d d d)) (* 2 (* q x d00 d00 q00 d d d)) (* (- 24) (* r r d00 d00 q00 d d)) (* (- 4) (* r r d00 d00 q00 d d d)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q)) (* (- 12) (* q q d00 d00 q00 d)) (* (- 6) (* q q d00 d00 q00 d d)) (* (- 8) (* q q d00 d00 q00)) (* 4 (* q q r r d00 d00 q00)) (* (- 48) (* q r d00 d00 q00 d)) (* (- 24) (* q r d00 d00 q00 d d)) (* 16 (* q x d00 d00 q00)) (* (- 4) (* q r d00 d00 q00 d d d)) (* 24 (* q x d00 d00 q00 d)) (* 12 (* q x d00 d00 q00 d d)) (* (- 48) (* r r d00 d00 q00 d)) (* (- 8) (* x x d00 d00 q00)) (* 32 (* q q q r r00)) (* (- 8) (* q q q q r)) (* (- 16) (* q q q x r00)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q) (* 4 (* q q q x d00 q00)) (* (- 8) (* q q q r d00 q00)) (* (- 2) (* q q q q d00 q00)) (* (- 4) (* q q q q r00 d00)) (* (- 16) (* q q q r r00 d00)) (* 8 (* q q r x d00 q00)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r r q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* (- 4) (* q q x x r00 d00)) (* 16 (* q q r x r00 d00)) (* (- 2) (* d ?x233 ?x233 q q q)) (* (- 8) (* q q r r d00 q00)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* 4 (* r x d00 d00 q00 d d d)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* 32 (* r x d00 d00 q00)) (* (- 1) (* q q q q q d d)) (* 8 (* q q q x r00 d00)) (* 32 (* q q r r x)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 12) (* q q q q x d)) (* 24 (* r x d00 d00 q00 d d)) (* (- 2) (* q q x x d00 q00)) ?x4101 (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 32) (* q q r x r00)) (* 4 (* q q q q d00 x00)) (* (- 16) (* q q r x d00 x00)) ?x4442 (* 4 (* q q x x d00 x00)) (* 8 (* q q x x r00)) (* 32 (* q q r r r00)) ?x3818 (* 20 (* q q q q r d)) (* (- 8) (* q q r x x)) (* (- 4) (* q q q r r d d)) (* 16 (* q q q r x)) (* (- 32) (* q q q r r)) (* (- 4) (* q q q q r d d)) (* 4 (* q q q r x d d)) (* (- 32) (* r r d00 d00 q00)) (* (- 32) (* q r d00 d00 q00)) (* 16 (* q q q r d00 x00)) (* (- 8) (* q q q x d00 x00)) (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* 4 ?x6060) ?x6072 (* 4 (* q q q r d00 d00 q00)) (* (- 2) (* q q q x d00 d00 q00)) (* (- 4) (* q q r x d00 d00 q00)) ?x6081)))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x5361 (+ (- 4) q ?x233 ?x312 ?x6208)))
 (let ((?x3213 (* (- 8) (* (+ (- 8) q) ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x4779 (* 4 (* (+ (- 8) q) ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x353 (* (- 2) (* (+ (- 8) q) (+ (- 8) q) (+ (- 8) q) ?x450 ?x5361 ?x5361))))
 (let ((?x4068 (* (- 4) (* (+ (- 8) q) ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r r))))
 (let ((?x1016 (* (- 2) (* d00 q00 (+ (- 8) q) ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x1504 (* (- 1) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x2412 (+ (* d00 d00 q00 ?x450 ?x450 ?x450 ?x5361 ?x5361) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* (- 1) (* d00 d00 q00 ?x6207 ?x6207 ?x5361 ?x5361)) (* 4 (* ?x6207 ?x6207 ?x450 ?x5361 ?x5361 r)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* 8 (* ?x6207 ?x6207 ?x5361 ?x5361 ?x5361)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x5361 ?x5361) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* (- 1) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361)) ?x1504 (* (- 4) (* ?x6207 ?x6207 ?x450 ?x5361 ?x5361 ?x5361)) (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r) ?x1016 ?x4068 (* 8 (* r00 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* (- 8) (* r00 ?x6207 ?x6207 ?x5361 ?x5361)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x5361 ?x5361)) (* 4 (* d00 r00 ?x6207 ?x6207 ?x5361 ?x5361)) ?x353 (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x5361 ?x5361)) ?x4779 (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361)) ?x3213 (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x5361 ?x5361)))))
 (let ((?x2320 (+ 2 q ?x233 ?x312 d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x674 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2320 ?x2320 ?x2320 r))))
 (let ((?x1022 (+ (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r) (* (- 8) (* ?x450 ?x450 ?x450 ?x2320 ?x2320 ?x2320)) (* 8 (* ?x6108 ?x6108 ?x2320 ?x2320 ?x2320)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320)) ?x674 (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2320 ?x2320 ?x2320)) (* (- 8) (* r00 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x2320 ?x2320) (* 4 (* d00 r00 ?x6108 ?x6108 ?x2320 ?x2320)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x2320 ?x2320)) (* 4 (* ?x450 ?x6108 ?x6108 ?x2320 ?x2320 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r r)) (* (- 4) (* ?x450 ?x6108 ?x6108 ?x2320 ?x2320 ?x2320)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 ?x2320 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 ?x2320 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2320 ?x2320 r)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2320 ?x2320) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2320 ?x2320 ?x2320 r)))))
 (let (($x1514 (or (not (= ?x1022 0)) (not (= ?x2412 0)) (not (= ?x4653 0)) (not (= ?x3831 0)))))
 (let ((?x6029 (* q d d)))
 (let ((?x5172 (* (- 2) (* q d))))
 (let ((?x580 (* 4 (* x d))))
 (let ((?x5543 (* (- 4) (* r d))))
 (let ((?x435 (* r00 d00)))
 (let ((?x436 (* 4 ?x435)))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (and (= (+ ?x5568 ?x300 ?x348 ?x332 ?x398 ?x436 ?x5543 ?x580 ?x5172 ?x6029) 0) $x1514)))))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let (($x521 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x2087 (+ ?x233 ?x312 q)))
 (let ((?x450 (+ 2 d)))
 (let ((?x4178 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q))))
 (let ((?x3893 (+ (* (- 4) (* ?x450 ?x2087 ?x2087 ?x2087 q q)) (* ?x450 ?x450 ?x2087 ?x2087 q q q) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) ?x4178 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q)) (* (- 8) (* r00 ?x2087 ?x2087 q q)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087) (* 4 (* ?x450 ?x2087 ?x2087 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r r q)) (* (- 4) (* d00 x00 ?x2087 ?x2087 q q)) (* 2 (* d00 q00 ?x2087 ?x2087 q q)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 2) (* ?x450 ?x2087 ?x2087 q q q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* ?x2087 ?x2087 ?x2087 q q)) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* (- 1) (* d00 d00 q00 ?x2087 ?x2087 q q)) (* 4 (* d00 r00 ?x2087 ?x2087 q q)))))
 (let (($x3823 (not (= ?x3893 0))))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x693 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x1880 (* (- 1) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r))))
 (let ((?x2765 (+ (* (- 4) (* ?x6207 ?x6207 ?x450 ?x693 ?x693 ?x693)) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x693 ?x693) (* (- 8) (* ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 r)) (* (- 1) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x693 ?x693)) ?x1880 (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 8) (* r00 ?x6207 ?x6207 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693) (* 4 (* ?x6207 ?x6207 ?x450 ?x693 ?x693 r)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r r)) (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x693 ?x693)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r) (* (- 2) (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 2) (* ?x6207 ?x6207 ?x6207 ?x450 ?x693 ?x693)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* ?x6207 ?x6207 ?x693 ?x693 ?x693)) (* (- 8) (* ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* (- 1) (* d00 d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* 4 (* d00 r00 ?x6207 ?x6207 ?x693 ?x693)))))
 (let (($x2762 (not (= ?x2765 0))))
 (let ((?x1992 (+ 2 ?x233 ?x312 q d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x2810 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r))))
 (let ((?x2587 (+ (* (- 4) (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992) (* (- 8) (* ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) ?x2810 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 8) (* r00 ?x6108 ?x6108 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992) (* 4 (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r r)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 r00 ?x6108 ?x6108 ?x1992 ?x1992)))))
 (let (($x2524 (not (= ?x2587 0))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x2590 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x2601 (* (- 1) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r))))
 (let ((?x2113 (+ (* (- 4) (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 ?x2590)) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x2590 ?x2590) (* (- 8) (* ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 r)) (* (- 1) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) ?x2601 (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 8) (* r00 ?x6157 ?x6157 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590) (* 4 (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 r)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r r)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 2 (* d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r) (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x2590 ?x2590)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* ?x6157 ?x6157 ?x2590 ?x2590 ?x2590)) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* (- 1) (* d00 d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 4 (* d00 r00 ?x6157 ?x6157 ?x2590 ?x2590)))))
 (let (($x2091 (not (= ?x2113 0))))
 (let ((?x4878 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x580 (* 4 (* x d))))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let ((?x1032 (+ ?x5568 ?x300 ?x580 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4878)))
 (let (($x797 (= ?x1032 0)))
 (and $x797 (or $x2091 $x2524 $x2762 $x3823)))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x2679 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x6158 (* (- 1) d)))
 (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x2712 (+ (- 2) q ?x233 ?x312 ?x6158)))
 (let ((?x450 (+ 2 d)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x2967 (* (- 1) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r))))
 (let ((?x3831 (+ (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 8) (* ?x6157 ?x6157 ?x2712 ?x2712 ?x2712)) (* 4 (* ?x6157 ?x6157 ?x450 ?x2712 ?x2712 ?x2712)) (* 8 (* ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 ?x2712 r)) (* (- 4) (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* (- 4) (* d00 r00 ?x6157 ?x6157 ?x2712 ?x2712)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712)) (* 4 (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* 8 (* ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 r)) (* (- 2) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* (- 2) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* 8 (* r00 ?x6157 ?x6157 ?x2712 ?x2712)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 ?x2712 r)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2712 ?x2712)) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712) (* (- 8) (* r00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* (- 2) (* d00 q00 ?x6157 ?x6157 ?x2712 ?x2712)) ?x2967 (* 2 (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r)) (* (- 1) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x2712 ?x2712)) (* 4 (* d00 x00 ?x6157 ?x6157 ?x2712 ?x2712)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r r)) (* 2 (* ?x6157 ?x6157 ?x6157 ?x450 ?x2712 ?x2712)) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2712 ?x2712 ?x2712 r) (* (- 4) (* ?x6157 ?x6157 ?x450 ?x2712 ?x2712 r)) (* d00 d00 q00 ?x6157 ?x6157 ?x2712 ?x2712) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x2712 ?x2712)))))
 (let ((?x6081 (* q q x x d00 d00 q00)))
 (let ((?x6072 (* q q q q d00 d00 q00)))
 (let ((?x3736 (+ q ?x233 ?x312)))
 (let ((?x6060 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 r)))
 (let ((?x3818 (* 2 (* q q q q q d))))
 (let ((?x4442 (* (- 32) (* q q r r r))))
 (let ((?x4101 (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q))))
 (let ((?x4653 (+ (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* 12 (* q q q x x d)) (* (- 2) (* d q ?x312 q q q)) (* (- 1) (* q q q x x d d)) (* (- 2) (* d ?x312 q q q q)) (* (- 2) (* d ?x312 ?x312 q q q)) (* 16 (* q q r r d00 x00)) (* 48 (* r x d00 d00 q00 d)) (* (- 6) (* x x d00 d00 q00 d d)) (* 20 (* q q r x x d)) (* 2 (* q q q q x d d)) (* (- 12) (* x x d00 d00 q00 d)) (* (- 2) (* d ?x312 ?x233 q q q)) (* (- 1) (* x x d00 d00 q00 d d d)) (* (- 16) (* q q r r r00 d00)) (* 8 (* q q q q r00)) (* 32 (* q q q r r d)) (* (- 40) (* q q q r x d)) (* (- 4) (* q q x x x d)) (* (- 2) (* d ?x233 q q q q)) (* (- 32) (* q q r r x d)) (* (- 2) (* d q ?x233 q q q)) (* (- 2) (* d ?x233 ?x312 q q q)) (* 16 (* q q r r r d)) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q) (* (- 1) (* q q d00 d00 q00 d d d)) (* 2 (* q x d00 d00 q00 d d d)) (* (- 24) (* r r d00 d00 q00 d d)) (* (- 4) (* r r d00 d00 q00 d d d)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q)) (* (- 12) (* q q d00 d00 q00 d)) (* (- 6) (* q q d00 d00 q00 d d)) (* (- 8) (* q q d00 d00 q00)) (* 4 (* q q r r d00 d00 q00)) (* (- 48) (* q r d00 d00 q00 d)) (* (- 24) (* q r d00 d00 q00 d d)) (* 16 (* q x d00 d00 q00)) (* (- 4) (* q r d00 d00 q00 d d d)) (* 24 (* q x d00 d00 q00 d)) (* 12 (* q x d00 d00 q00 d d)) (* (- 48) (* r r d00 d00 q00 d)) (* (- 8) (* x x d00 d00 q00)) (* 32 (* q q q r r00)) (* (- 8) (* q q q q r)) (* (- 16) (* q q q x r00)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q) (* 4 (* q q q x d00 q00)) (* (- 8) (* q q q r d00 q00)) (* (- 2) (* q q q q d00 q00)) (* (- 4) (* q q q q r00 d00)) (* (- 16) (* q q q r r00 d00)) (* 8 (* q q r x d00 q00)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r r q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* (- 4) (* q q x x r00 d00)) (* 16 (* q q r x r00 d00)) (* (- 2) (* d ?x233 ?x233 q q q)) (* (- 8) (* q q r r d00 q00)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* 4 (* r x d00 d00 q00 d d d)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* 32 (* r x d00 d00 q00)) (* (- 1) (* q q q q q d d)) (* 8 (* q q q x r00 d00)) (* 32 (* q q r r x)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 12) (* q q q q x d)) (* 24 (* r x d00 d00 q00 d d)) (* (- 2) (* q q x x d00 q00)) ?x4101 (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 32) (* q q r x r00)) (* 4 (* q q q q d00 x00)) (* (- 16) (* q q r x d00 x00)) ?x4442 (* 4 (* q q x x d00 x00)) (* 8 (* q q x x r00)) (* 32 (* q q r r r00)) ?x3818 (* 20 (* q q q q r d)) (* (- 8) (* q q r x x)) (* (- 4) (* q q q r r d d)) (* 16 (* q q q r x)) (* (- 32) (* q q q r r)) (* (- 4) (* q q q q r d d)) (* 4 (* q q q r x d d)) (* (- 32) (* r r d00 d00 q00)) (* (- 32) (* q r d00 d00 q00)) (* 16 (* q q q r d00 x00)) (* (- 8) (* q q q x d00 x00)) (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* 4 ?x6060) ?x6072 (* 4 (* q q q r d00 d00 q00)) (* (- 2) (* q q q x d00 d00 q00)) (* (- 4) (* q q r x d00 d00 q00)) ?x6081)))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x5361 (+ (- 4) q ?x233 ?x312 ?x6208)))
 (let ((?x3213 (* (- 8) (* (+ (- 8) q) ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x4779 (* 4 (* (+ (- 8) q) ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x353 (* (- 2) (* (+ (- 8) q) (+ (- 8) q) (+ (- 8) q) ?x450 ?x5361 ?x5361))))
 (let ((?x4068 (* (- 4) (* (+ (- 8) q) ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r r))))
 (let ((?x1016 (* (- 2) (* d00 q00 (+ (- 8) q) ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x1504 (* (- 1) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r))))
 (let ((?x2412 (+ (* d00 d00 q00 ?x450 ?x450 ?x450 ?x5361 ?x5361) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* (- 1) (* d00 d00 q00 ?x6207 ?x6207 ?x5361 ?x5361)) (* 4 (* ?x6207 ?x6207 ?x450 ?x5361 ?x5361 r)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* 8 (* ?x6207 ?x6207 ?x5361 ?x5361 ?x5361)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x5361 ?x5361) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* (- 1) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361)) ?x1504 (* (- 4) (* ?x6207 ?x6207 ?x450 ?x5361 ?x5361 ?x5361)) (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361 r) ?x1016 ?x4068 (* 8 (* r00 ?x450 ?x450 ?x450 ?x5361 ?x5361)) (* (- 8) (* r00 ?x6207 ?x6207 ?x5361 ?x5361)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x5361 ?x5361)) (* 4 (* d00 r00 ?x6207 ?x6207 ?x5361 ?x5361)) ?x353 (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x5361 ?x5361)) ?x4779 (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x5361 ?x5361 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x5361 ?x5361 ?x5361)) ?x3213 (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x5361 ?x5361)))))
 (let ((?x2320 (+ 2 q ?x233 ?x312 d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x674 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2320 ?x2320 ?x2320 r))))
 (let ((?x1022 (+ (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r) (* (- 8) (* ?x450 ?x450 ?x450 ?x2320 ?x2320 ?x2320)) (* 8 (* ?x6108 ?x6108 ?x2320 ?x2320 ?x2320)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320)) ?x674 (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2320 ?x2320 ?x2320)) (* (- 8) (* r00 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x2320 ?x2320) (* 4 (* d00 r00 ?x6108 ?x6108 ?x2320 ?x2320)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x2320 ?x2320)) (* 4 (* ?x450 ?x6108 ?x6108 ?x2320 ?x2320 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 r r)) (* (- 4) (* ?x450 ?x6108 ?x6108 ?x2320 ?x2320 ?x2320)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 ?x2320 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320 ?x2320 ?x2320 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2320 ?x2320)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2320 ?x2320)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x2320 ?x2320)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2320 ?x2320 r)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2320 ?x2320) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2320 ?x2320 ?x2320 r)))))
 (let (($x1514 (or (not (= ?x1022 0)) (not (= ?x2412 0)) (not (= ?x4653 0)) (not (= ?x3831 0)))))
 (let ((?x6029 (* q d d)))
 (let ((?x5172 (* (- 2) (* q d))))
 (let ((?x580 (* 4 (* x d))))
 (let ((?x5543 (* (- 4) (* r d))))
 (let ((?x435 (* r00 d00)))
 (let ((?x436 (* 4 ?x435)))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let (($x761 (and (= (+ ?x5568 ?x300 ?x348 ?x332 ?x398 ?x436 ?x5543 ?x580 ?x5172 ?x6029) 0) $x1514)))
 (let ((?x3883 (* 4 (* d00 r00 (+ ?x233 ?x312 q) (+ ?x233 ?x312 q) q q))))
 (let ((?x2087 (+ ?x233 ?x312 q)))
 (let ((?x4178 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q))))
 (let ((?x3893 (+ (* (- 4) (* ?x450 ?x2087 ?x2087 ?x2087 q q)) (* ?x450 ?x450 ?x2087 ?x2087 q q q) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) ?x4178 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q)) (* (- 8) (* r00 ?x2087 ?x2087 q q)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087) (* 4 (* ?x450 ?x2087 ?x2087 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r r q)) (* (- 4) (* d00 x00 ?x2087 ?x2087 q q)) (* 2 (* d00 q00 ?x2087 ?x2087 q q)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 2) (* ?x450 ?x2087 ?x2087 q q q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* ?x2087 ?x2087 ?x2087 q q)) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* (- 1) (* d00 d00 q00 ?x2087 ?x2087 q q)) ?x3883)))
 (let (($x3823 (not (= ?x3893 0))))
 (let ((?x693 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x1880 (* (- 1) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r))))
 (let ((?x2765 (+ (* (- 4) (* ?x6207 ?x6207 ?x450 ?x693 ?x693 ?x693)) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x693 ?x693) (* (- 8) (* ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 r)) (* (- 1) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x693 ?x693)) ?x1880 (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 8) (* r00 ?x6207 ?x6207 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693) (* 4 (* ?x6207 ?x6207 ?x450 ?x693 ?x693 r)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r r)) (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x693 ?x693)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r) (* (- 2) (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 2) (* ?x6207 ?x6207 ?x6207 ?x450 ?x693 ?x693)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* ?x6207 ?x6207 ?x693 ?x693 ?x693)) (* (- 8) (* ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* (- 1) (* d00 d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* 4 (* d00 r00 ?x6207 ?x6207 ?x693 ?x693)))))
 (let (($x2762 (not (= ?x2765 0))))
 (let ((?x1992 (+ 2 ?x233 ?x312 q d)))
 (let ((?x2810 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r))))
 (let ((?x2587 (+ (* (- 4) (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992) (* (- 8) (* ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) ?x2810 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 8) (* r00 ?x6108 ?x6108 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992) (* 4 (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r r)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 r00 ?x6108 ?x6108 ?x1992 ?x1992)))))
 (let (($x2524 (not (= ?x2587 0))))
 (let ((?x2590 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x2601 (* (- 1) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r))))
 (let ((?x2113 (+ (* (- 4) (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 ?x2590)) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x2590 ?x2590) (* (- 8) (* ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 r)) (* (- 1) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) ?x2601 (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 8) (* r00 ?x6157 ?x6157 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590) (* 4 (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 r)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r r)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 2 (* d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r) (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x2590 ?x2590)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* ?x6157 ?x6157 ?x2590 ?x2590 ?x2590)) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* (- 1) (* d00 d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 4 (* d00 r00 ?x6157 ?x6157 ?x2590 ?x2590)))))
 (let (($x2091 (not (= ?x2113 0))))
 (let ((?x4878 (* 4 (* d00 r00))))
 (let ((?x1032 (+ ?x5568 ?x300 ?x580 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4878)))
 (let (($x797 (= ?x1032 0)))
 (let (($x514 (and $x797 (or $x2091 $x2524 $x2762 $x3823))))
 (rewrite (= $x514 $x761))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x3901 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x2087 (+ ?x233 ?x312 q)))
 (let ((?x450 (+ 2 d)))
 (let ((?x4178 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q))))
 (let ((?x3893 (+ (* (- 4) (* ?x450 ?x2087 ?x2087 ?x2087 q q)) (* ?x450 ?x450 ?x2087 ?x2087 q q q) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) ?x4178 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q)) (* (- 8) (* r00 ?x2087 ?x2087 q q)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087) (* 4 (* ?x450 ?x2087 ?x2087 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r r q)) (* (- 4) (* d00 x00 ?x2087 ?x2087 q q)) (* 2 (* d00 q00 ?x2087 ?x2087 q q)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 2) (* ?x450 ?x2087 ?x2087 q q q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* ?x2087 ?x2087 ?x2087 q q)) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* (- 1) (* d00 d00 q00 ?x2087 ?x2087 q q)) (* 4 (* d00 r00 ?x2087 ?x2087 q q)))))
 (let (($x3823 (not (= ?x3893 0))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x2590 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x2601 (* (- 1) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r))))
 (let ((?x2113 (+ (* (- 4) (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 ?x2590)) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x2590 ?x2590) (* (- 8) (* ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 r)) (* (- 1) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) ?x2601 (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 8) (* r00 ?x6157 ?x6157 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590) (* 4 (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 r)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r r)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 2 (* d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r) (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x2590 ?x2590)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* ?x6157 ?x6157 ?x2590 ?x2590 ?x2590)) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* (- 1) (* d00 d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 4 (* d00 r00 ?x6157 ?x6157 ?x2590 ?x2590)))))
 (let (($x2091 (not (= ?x2113 0))))
 (let ((?x1992 (+ 2 ?x233 ?x312 q d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x2810 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r))))
 (let ((?x2587 (+ (* (- 4) (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992) (* (- 8) (* ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) ?x2810 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 8) (* r00 ?x6108 ?x6108 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992) (* 4 (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r r)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 r00 ?x6108 ?x6108 ?x1992 ?x1992)))))
 (let (($x2524 (not (= ?x2587 0))))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x693 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x1880 (* (- 1) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r))))
 (let ((?x2765 (+ (* (- 4) (* ?x6207 ?x6207 ?x450 ?x693 ?x693 ?x693)) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x693 ?x693) (* (- 8) (* ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 r)) (* (- 1) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x693 ?x693)) ?x1880 (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 8) (* r00 ?x6207 ?x6207 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693) (* 4 (* ?x6207 ?x6207 ?x450 ?x693 ?x693 r)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r r)) (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x693 ?x693)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r) (* (- 2) (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 2) (* ?x6207 ?x6207 ?x6207 ?x450 ?x693 ?x693)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* ?x6207 ?x6207 ?x693 ?x693 ?x693)) (* (- 8) (* ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* (- 1) (* d00 d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* 4 (* d00 r00 ?x6207 ?x6207 ?x693 ?x693)))))
 (let (($x2762 (not (= ?x2765 0))))
 (let ((?x4878 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x580 (* 4 (* x d))))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let ((?x1032 (+ ?x5568 ?x300 ?x580 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4878)))
 (let (($x797 (= ?x1032 0)))
 (and $x797 (or $x2762 $x2524 $x2091 $x3823)))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x638 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x2087 (+ ?x233 ?x312 q)))
 (let ((?x450 (+ 2 d)))
 (let ((?x4178 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q))))
 (let ((?x3893 (+ (* (- 4) (* ?x450 ?x2087 ?x2087 ?x2087 q q)) (* ?x450 ?x450 ?x2087 ?x2087 q q q) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) ?x4178 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q q)) (* (- 8) (* r00 ?x2087 ?x2087 q q)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087) (* 4 (* ?x450 ?x2087 ?x2087 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r r q)) (* (- 4) (* d00 x00 ?x2087 ?x2087 q q)) (* 2 (* d00 q00 ?x2087 ?x2087 q q)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087)) (* (- 2) (* ?x450 ?x2087 ?x2087 q q q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 r q)) (* 8 (* ?x2087 ?x2087 ?x2087 q q)) (* (- 8) (* ?x450 ?x450 ?x450 ?x2087 ?x2087 ?x2087 ?x2087 r q)) (* (- 1) (* d00 d00 q00 ?x2087 ?x2087 q q)) (* 4 (* d00 r00 ?x2087 ?x2087 q q)))))
 (let (($x3823 (not (= ?x3893 0))))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x693 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x1880 (* (- 1) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r))))
 (let ((?x2765 (+ (* (- 4) (* ?x6207 ?x6207 ?x450 ?x693 ?x693 ?x693)) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x693 ?x693) (* (- 8) (* ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 r)) (* (- 1) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x693 ?x693)) ?x1880 (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 8) (* r00 ?x6207 ?x6207 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693) (* 4 (* ?x6207 ?x6207 ?x450 ?x693 ?x693 r)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r r)) (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x693 ?x693)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r) (* (- 2) (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693)) (* (- 2) (* ?x6207 ?x6207 ?x6207 ?x450 ?x693 ?x693)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x693 ?x693)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 r)) (* 8 (* ?x6207 ?x6207 ?x693 ?x693 ?x693)) (* (- 8) (* ?x6207 ?x450 ?x450 ?x450 ?x693 ?x693 ?x693 ?x693 r)) (* (- 1) (* d00 d00 q00 ?x6207 ?x6207 ?x693 ?x693)) (* 4 (* d00 r00 ?x6207 ?x6207 ?x693 ?x693)))))
 (let (($x2762 (not (= ?x2765 0))))
 (let ((?x1992 (+ 2 ?x233 ?x312 q d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x2810 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r))))
 (let ((?x2587 (+ (* (- 4) (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992) (* (- 8) (* ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) ?x2810 (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 8) (* r00 ?x6108 ?x6108 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992) (* 4 (* ?x450 ?x6108 ?x6108 ?x1992 ?x1992 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r r)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x1992 ?x1992 ?x1992)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x1992 ?x1992)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 r)) (* 8 (* ?x6108 ?x6108 ?x1992 ?x1992 ?x1992)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x1992 ?x1992 ?x1992 ?x1992 r)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x1992 ?x1992)) (* 4 (* d00 r00 ?x6108 ?x6108 ?x1992 ?x1992)))))
 (let (($x2524 (not (= ?x2587 0))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x2590 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x2601 (* (- 1) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r))))
 (let ((?x2113 (+ (* (- 4) (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 ?x2590)) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x2590 ?x2590) (* (- 8) (* ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 r)) (* (- 1) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) ?x2601 (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 8) (* r00 ?x6157 ?x6157 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590) (* 4 (* ?x6157 ?x6157 ?x450 ?x2590 ?x2590 r)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r r)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 2 (* d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r) (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x2590 ?x2590)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2590 ?x2590)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 r)) (* 8 (* ?x6157 ?x6157 ?x2590 ?x2590 ?x2590)) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x2590 ?x2590 ?x2590 ?x2590 r)) (* (- 1) (* d00 d00 q00 ?x6157 ?x6157 ?x2590 ?x2590)) (* 4 (* d00 r00 ?x6157 ?x6157 ?x2590 ?x2590)))))
 (let (($x2091 (not (= ?x2113 0))))
 (let ((?x4878 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x580 (* 4 (* x d))))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let ((?x1032 (+ ?x5568 ?x300 ?x580 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4878)))
 (let (($x797 (= ?x1032 0)))
 (let (($x514 (and $x797 (or $x2091 $x2524 $x2762 $x3823))))
 (let (($x3894 (and $x797 (or $x2762 $x2524 $x2091 $x3823))))
 (rewrite (= $x3894 $x514)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x293 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x235 (- (- (+ (- (* 2 r) x) q) (* 2 d)) 4)))
 (let ((?x232 (- q 8)))
 (let ((?x58 (+ d 2)))
 (let ((?x238 (+ (* (- 4) ?x58 ?x232 ?x232 ?x235 ?x235 ?x235) (* ?x58 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x243 (- (- ?x238 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 r))))
 (let ((?x248 (+ (- ?x243 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235) (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 x00))))
 (let ((?x250 (- ?x248 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x252 (+ ?x250 (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x256 (- (- ?x252 (* 8 ?x232 ?x232 ?x235 ?x235 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 r00))))
 (let ((?x259 (+ ?x256 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x235 ?x235) (* 4 ?x58 ?x232 ?x232 ?x235 ?x235 r))))
 (let ((?x262 (- ?x259 (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r r))))
 (let ((?x266 (+ (- ?x262 (* 4 d00 ?x232 ?x232 ?x235 ?x235 x00)) (* 2 d00 ?x232 ?x232 q00 ?x235 ?x235) (* ?x58 ?x58 ?x58 d00 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x268 (- ?x266 (* 2 ?x58 ?x58 ?x58 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x272 (- (+ ?x268 (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 2 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x274 (+ ?x272 (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r x00))))
 (let ((?x278 (- (- ?x274 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r00 r))))
 (let ((?x282 (+ ?x278 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 r00) (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r00 r) (* 8 ?x232 ?x232 ?x235 ?x235 ?x235))))
 (let ((?x286 (- (- ?x282 (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r)) (* d00 d00 ?x232 ?x232 q00 ?x235 ?x235))))
 (let ((?x176 (- (- (+ (- (* 2 r) x) q) d) 2)))
 (let ((?x174 (- q 4)))
 (let ((?x179 (+ (* (- 4) ?x58 ?x174 ?x174 ?x176 ?x176 ?x176) (* ?x58 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x184 (- (- ?x179 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 r))))
 (let ((?x189 (+ (- ?x184 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176) (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 x00))))
 (let ((?x191 (- ?x189 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x193 (+ ?x191 (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x197 (- (- ?x193 (* 8 ?x174 ?x174 ?x176 ?x176 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 r00))))
 (let ((?x200 (+ ?x197 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x176 ?x176) (* 4 ?x58 ?x174 ?x174 ?x176 ?x176 r))))
 (let ((?x203 (- ?x200 (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r r))))
 (let ((?x207 (+ (- ?x203 (* 4 d00 ?x174 ?x174 ?x176 ?x176 x00)) (* 2 d00 ?x174 ?x174 q00 ?x176 ?x176) (* ?x58 ?x58 ?x58 d00 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x209 (- ?x207 (* 2 ?x58 ?x58 ?x58 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x213 (- (+ ?x209 (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 2 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x215 (+ ?x213 (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r x00))))
 (let ((?x219 (- (- ?x215 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r00 r))))
 (let ((?x223 (+ ?x219 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 r00) (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r00 r) (* 8 ?x174 ?x174 ?x176 ?x176 ?x176))))
 (let ((?x227 (- (- ?x223 (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r)) (* d00 d00 ?x174 ?x174 q00 ?x176 ?x176))))
 (let ((?x60 (* 2 r)))
 (let ((?x61 (- ?x60 x)))
 (let ((?x118 (+ ?x61 q)))
 (let ((?x121 (+ (* (- 4) ?x58 q q ?x118 ?x118 ?x118) (* ?x58 ?x58 q q q ?x118 ?x118))))
 (let ((?x126 (- (- ?x121 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 r))))
 (let ((?x131 (+ (- ?x126 (* ?x58 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118)) (* 2 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118) (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 x00))))
 (let ((?x133 (- ?x131 (* ?x58 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x135 (+ ?x133 (* 2 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x139 (- (- ?x135 (* 8 q q ?x118 ?x118 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 r00))))
 (let ((?x142 (+ ?x139 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x118 ?x118) (* 4 ?x58 q q ?x118 ?x118 r))))
 (let ((?x145 (- ?x142 (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r r))))
 (let ((?x149 (+ (- ?x145 (* 4 d00 q q ?x118 ?x118 x00)) (* 2 d00 q q q00 ?x118 ?x118) (* ?x58 ?x58 ?x58 d00 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x151 (- ?x149 (* 2 ?x58 ?x58 ?x58 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x155 (- (+ ?x151 (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 2 ?x58 q q q ?x118 ?x118))))
 (let ((?x157 (+ ?x155 (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r x00))))
 (let ((?x161 (- (- ?x157 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r00 r))))
 (let ((?x165 (+ ?x161 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 r00) (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r00 r) (* 8 q q ?x118 ?x118 ?x118))))
 (let ((?x169 (- (- ?x165 (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r)) (* d00 d00 q q q00 ?x118 ?x118))))
 (let ((?x62 (+ ?x61 q d 2)))
 (let ((?x59 (+ q 4)))
 (let ((?x65 (+ (* (- 4) ?x58 ?x59 ?x59 ?x62 ?x62 ?x62) (* ?x58 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x70 (- (- ?x65 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 r))))
 (let ((?x75 (+ (- ?x70 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62) (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 x00))))
 (let ((?x77 (- ?x75 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x79 (+ ?x77 (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x83 (- (- ?x79 (* 8 ?x59 ?x59 ?x62 ?x62 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 r00))))
 (let ((?x86 (+ ?x83 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x62 ?x62) (* 4 ?x58 ?x59 ?x59 ?x62 ?x62 r))))
 (let ((?x89 (- ?x86 (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r r))))
 (let ((?x93 (+ (- ?x89 (* 4 d00 ?x59 ?x59 ?x62 ?x62 x00)) (* 2 d00 ?x59 ?x59 q00 ?x62 ?x62) (* ?x58 ?x58 ?x58 d00 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x95 (- ?x93 (* 2 ?x58 ?x58 ?x58 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x99 (- (+ ?x95 (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 2 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x101 (+ ?x99 (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r x00))))
 (let ((?x105 (- (- ?x101 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r00 r))))
 (let ((?x109 (+ ?x105 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 r00) (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r00 r) (* 8 ?x59 ?x59 ?x62 ?x62 ?x62))))
 (let ((?x113 (- (- ?x109 (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r)) (* d00 d00 ?x59 ?x59 q00 ?x62 ?x62))))
 (let (($x291 (or (not (= (+ ?x113 (* 4 d00 ?x59 ?x59 ?x62 ?x62 r00)) 0)) (not (= (+ ?x169 (* 4 d00 q q ?x118 ?x118 r00)) 0)) (not (= (+ ?x227 (* 4 d00 ?x174 ?x174 ?x176 ?x176 r00)) 0)) (not (= (+ ?x286 (* 4 d00 ?x232 ?x232 ?x235 ?x235 r00)) 0)))))
 (let ((?x44 (* d d q)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x42 (- (+ (- (* 8 r) (* 8 r00)) (* 4 d x)) (* 4 d00 x00))))
 (let ((?x50 (+ (- (+ (- ?x42 ?x41) ?x44) (* 2 d q)) (* 2 d00 q00))))
 (and (= (+ (- ?x50 (* 4 d r)) (* 4 d00 r00)) 0) $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let (($x1230 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x312 (* (- 1) x)))
 (let ((?x60 (* 2 r)))
 (let ((?x5521 (+ ?x60 ?x312 q)))
 (let ((?x301 (+ 2 d)))
 (let ((?x5691 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q q))))
 (let ((?x2840 (+ (* (- 4) (* ?x301 ?x5521 ?x5521 ?x5521 q q)) (* ?x301 ?x301 ?x5521 ?x5521 q q q) (* (- 8) (* ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 q)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 ?x5521 r q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) ?x5691 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q q)) (* (- 8) (* r00 ?x5521 ?x5521 q q)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521) (* 4 (* ?x301 ?x5521 ?x5521 r q q)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r r q)) (* (- 4) (* d00 x00 ?x5521 ?x5521 q q)) (* 2 (* d00 q00 ?x5521 ?x5521 q q)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521)) (* (- 2) (* ?x301 ?x5521 ?x5521 q q q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* 8 (* ?x5521 ?x5521 ?x5521 q q)) (* (- 8) (* ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 ?x5521 r q)) (* (- 1) (* d00 d00 q00 ?x5521 ?x5521 q q)) (* 4 (* d00 r00 ?x5521 ?x5521 q q)))))
 (let ((?x1223 (* (- 1) d)))
 (let ((?x1430 (+ (- 2) ?x60 ?x312 q ?x1223)))
 (let ((?x1066 (+ (- 4) q)))
 (let ((?x732 (* (- 1) (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r))))
 (let ((?x1866 (+ (* (- 4) (* ?x1066 ?x1066 ?x301 ?x1430 ?x1430 ?x1430)) (* ?x1066 ?x1066 ?x1066 ?x301 ?x301 ?x1430 ?x1430) (* (- 8) (* ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 r)) (* (- 1) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* 2 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* 4 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 ?x1430 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) ?x732 (* 2 (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* (- 8) (* r00 ?x1066 ?x1066 ?x1430 ?x1430)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x1430 ?x1430) (* 4 (* ?x1066 ?x1066 ?x301 ?x1430 ?x1430 r)) (* (- 4) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r r)) (* (- 4) (* d00 x00 ?x1066 ?x1066 ?x1430 ?x1430)) (* 2 (* d00 q00 ?x1066 ?x1066 ?x1430 ?x1430)) (* d00 d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r) (* (- 2) (* d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430)) (* (- 2) (* ?x1066 ?x1066 ?x1066 ?x301 ?x1430 ?x1430)) (* 4 (* d00 x00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* (- 4) (* d00 r00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* 8 (* r00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* 8 (* ?x1066 ?x1066 ?x1430 ?x1430 ?x1430)) (* (- 8) (* ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 ?x1430 r)) (* (- 1) (* d00 d00 q00 ?x1066 ?x1066 ?x1430 ?x1430)) (* 4 (* d00 r00 ?x1066 ?x1066 ?x1430 ?x1430)))))
 (let ((?x3644 (+ 2 ?x60 ?x312 q d)))
 (let ((?x309 (+ 4 q)))
 (let ((?x1121 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x3644 ?x3644 ?x3644 r))))
 (let ((?x2633 (+ (* (- 4) (* ?x301 ?x309 ?x309 ?x3644 ?x3644 ?x3644)) (* ?x301 ?x301 ?x309 ?x309 ?x309 ?x3644 ?x3644) (* (- 8) (* ?x301 ?x301 ?x301 ?x3644 ?x3644 ?x3644)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3644 ?x3644 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 ?x3644 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) ?x1121 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x3644 ?x3644 ?x3644 r)) (* (- 8) (* r00 ?x309 ?x309 ?x3644 ?x3644)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3644 ?x3644) (* 4 (* ?x301 ?x309 ?x309 ?x3644 ?x3644 r)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r r)) (* (- 4) (* d00 x00 ?x309 ?x309 ?x3644 ?x3644)) (* 2 (* d00 q00 ?x309 ?x309 ?x3644 ?x3644)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3644 ?x3644 ?x3644)) (* (- 2) (* ?x301 ?x309 ?x309 ?x309 ?x3644 ?x3644)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* 8 (* ?x309 ?x309 ?x3644 ?x3644 ?x3644)) (* (- 8) (* ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 ?x3644 r)) (* (- 1) (* d00 d00 q00 ?x309 ?x309 ?x3644 ?x3644)) (* 4 (* d00 r00 ?x309 ?x309 ?x3644 ?x3644)))))
 (let ((?x1646 (* (- 2) d)))
 (let ((?x1004 (+ (- 4) ?x60 ?x312 q ?x1646)))
 (let ((?x1554 (+ (- 8) q)))
 (let ((?x2035 (* (- 1) (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r))))
 (let ((?x2242 (+ (* (- 4) (* ?x1554 ?x1554 ?x301 ?x1004 ?x1004 ?x1004)) (* ?x1554 ?x1554 ?x1554 ?x301 ?x301 ?x1004 ?x1004) (* (- 8) (* ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 r)) (* (- 1) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* 2 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* 4 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 ?x1004 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) ?x2035 (* 2 (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* (- 8) (* r00 ?x1554 ?x1554 ?x1004 ?x1004)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x1004 ?x1004) (* 4 (* ?x1554 ?x1554 ?x301 ?x1004 ?x1004 r)) (* (- 4) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r r)) (* (- 4) (* d00 x00 ?x1554 ?x1554 ?x1004 ?x1004)) (* 2 (* d00 q00 ?x1554 ?x1554 ?x1004 ?x1004)) (* d00 d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r) (* (- 2) (* d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004)) (* (- 2) (* ?x1554 ?x1554 ?x1554 ?x301 ?x1004 ?x1004)) (* 4 (* d00 x00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* (- 4) (* d00 r00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* 8 (* r00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* 8 (* ?x1554 ?x1554 ?x1004 ?x1004 ?x1004)) (* (- 8) (* ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 ?x1004 r)) (* (- 1) (* d00 d00 q00 ?x1554 ?x1554 ?x1004 ?x1004)) (* 4 (* d00 r00 ?x1554 ?x1554 ?x1004 ?x1004)))))
 (let (($x559 (or (not (= ?x2242 0)) (not (= ?x2633 0)) (not (= ?x1866 0)) (not (= ?x2840 0)))))
 (let ((?x4878 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x44 (* d d q)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x30 (* 8 r)))
 (let ((?x3244 (+ ?x30 ?x300 (* 4 (* x d)) ?x332 ?x348 ?x44 (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4878)))
 (and (= ?x3244 0) $x559))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x1050 (lambda ((q Int) (r Int) (d Int) (t Int) (x Int) )(let ((?x312 (* (- 1) x)))
 (let ((?x60 (* 2 r)))
 (let ((?x5521 (+ ?x60 ?x312 q)))
 (let ((?x301 (+ 2 d)))
 (let ((?x5691 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q q))))
 (let ((?x2840 (+ (* (- 4) (* ?x301 ?x5521 ?x5521 ?x5521 q q)) (* ?x301 ?x301 ?x5521 ?x5521 q q q) (* (- 8) (* ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 q)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 ?x5521 r q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) ?x5691 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q q)) (* (- 8) (* r00 ?x5521 ?x5521 q q)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521) (* 4 (* ?x301 ?x5521 ?x5521 r q q)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r r q)) (* (- 4) (* d00 x00 ?x5521 ?x5521 q q)) (* 2 (* d00 q00 ?x5521 ?x5521 q q)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521)) (* (- 2) (* ?x301 ?x5521 ?x5521 q q q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x5521 ?x5521)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 r q)) (* 8 (* ?x5521 ?x5521 ?x5521 q q)) (* (- 8) (* ?x301 ?x301 ?x301 ?x5521 ?x5521 ?x5521 ?x5521 r q)) (* (- 1) (* d00 d00 q00 ?x5521 ?x5521 q q)) (* 4 (* d00 r00 ?x5521 ?x5521 q q)))))
 (let ((?x1223 (* (- 1) d)))
 (let ((?x1430 (+ (- 2) ?x60 ?x312 q ?x1223)))
 (let ((?x1066 (+ (- 4) q)))
 (let ((?x732 (* (- 1) (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r))))
 (let ((?x1866 (+ (* (- 4) (* ?x1066 ?x1066 ?x301 ?x1430 ?x1430 ?x1430)) (* ?x1066 ?x1066 ?x1066 ?x301 ?x301 ?x1430 ?x1430) (* (- 8) (* ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 r)) (* (- 1) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* 2 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* 4 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 ?x1430 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) ?x732 (* 2 (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* (- 8) (* r00 ?x1066 ?x1066 ?x1430 ?x1430)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x1430 ?x1430) (* 4 (* ?x1066 ?x1066 ?x301 ?x1430 ?x1430 r)) (* (- 4) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r r)) (* (- 4) (* d00 x00 ?x1066 ?x1066 ?x1430 ?x1430)) (* 2 (* d00 q00 ?x1066 ?x1066 ?x1430 ?x1430)) (* d00 d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r) (* (- 2) (* d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430)) (* (- 2) (* ?x1066 ?x1066 ?x1066 ?x301 ?x1430 ?x1430)) (* 4 (* d00 x00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* (- 4) (* d00 r00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x1430 ?x1430)) (* 8 (* r00 ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 r)) (* 8 (* ?x1066 ?x1066 ?x1430 ?x1430 ?x1430)) (* (- 8) (* ?x1066 ?x301 ?x301 ?x301 ?x1430 ?x1430 ?x1430 ?x1430 r)) (* (- 1) (* d00 d00 q00 ?x1066 ?x1066 ?x1430 ?x1430)) (* 4 (* d00 r00 ?x1066 ?x1066 ?x1430 ?x1430)))))
 (let ((?x3644 (+ 2 ?x60 ?x312 q d)))
 (let ((?x309 (+ 4 q)))
 (let ((?x1121 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x3644 ?x3644 ?x3644 r))))
 (let ((?x2633 (+ (* (- 4) (* ?x301 ?x309 ?x309 ?x3644 ?x3644 ?x3644)) (* ?x301 ?x301 ?x309 ?x309 ?x309 ?x3644 ?x3644) (* (- 8) (* ?x301 ?x301 ?x301 ?x3644 ?x3644 ?x3644)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3644 ?x3644 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 ?x3644 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) ?x1121 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x3644 ?x3644 ?x3644 r)) (* (- 8) (* r00 ?x309 ?x309 ?x3644 ?x3644)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3644 ?x3644) (* 4 (* ?x301 ?x309 ?x309 ?x3644 ?x3644 r)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r r)) (* (- 4) (* d00 x00 ?x309 ?x309 ?x3644 ?x3644)) (* 2 (* d00 q00 ?x309 ?x309 ?x3644 ?x3644)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3644 ?x3644 ?x3644)) (* (- 2) (* ?x301 ?x309 ?x309 ?x309 ?x3644 ?x3644)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3644 ?x3644)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 r)) (* 8 (* ?x309 ?x309 ?x3644 ?x3644 ?x3644)) (* (- 8) (* ?x301 ?x301 ?x301 ?x309 ?x3644 ?x3644 ?x3644 ?x3644 r)) (* (- 1) (* d00 d00 q00 ?x309 ?x309 ?x3644 ?x3644)) (* 4 (* d00 r00 ?x309 ?x309 ?x3644 ?x3644)))))
 (let ((?x1646 (* (- 2) d)))
 (let ((?x1004 (+ (- 4) ?x60 ?x312 q ?x1646)))
 (let ((?x1554 (+ (- 8) q)))
 (let ((?x2035 (* (- 1) (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r))))
 (let ((?x2242 (+ (* (- 4) (* ?x1554 ?x1554 ?x301 ?x1004 ?x1004 ?x1004)) (* ?x1554 ?x1554 ?x1554 ?x301 ?x301 ?x1004 ?x1004) (* (- 8) (* ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 r)) (* (- 1) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* 2 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* 4 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 ?x1004 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) ?x2035 (* 2 (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* (- 8) (* r00 ?x1554 ?x1554 ?x1004 ?x1004)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x1004 ?x1004) (* 4 (* ?x1554 ?x1554 ?x301 ?x1004 ?x1004 r)) (* (- 4) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r r)) (* (- 4) (* d00 x00 ?x1554 ?x1554 ?x1004 ?x1004)) (* 2 (* d00 q00 ?x1554 ?x1554 ?x1004 ?x1004)) (* d00 d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r) (* (- 2) (* d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004)) (* (- 2) (* ?x1554 ?x1554 ?x1554 ?x301 ?x1004 ?x1004)) (* 4 (* d00 x00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* (- 4) (* d00 r00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x1004 ?x1004)) (* 8 (* r00 ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 r)) (* 8 (* ?x1554 ?x1554 ?x1004 ?x1004 ?x1004)) (* (- 8) (* ?x1554 ?x301 ?x301 ?x301 ?x1004 ?x1004 ?x1004 ?x1004 r)) (* (- 1) (* d00 d00 q00 ?x1554 ?x1554 ?x1004 ?x1004)) (* 4 (* d00 r00 ?x1554 ?x1554 ?x1004 ?x1004)))))
 (let (($x559 (or (not (= ?x2242 0)) (not (= ?x2633 0)) (not (= ?x1866 0)) (not (= ?x2840 0)))))
 (let ((?x4878 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x44 (* d d q)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x30 (* 8 r)))
 (let ((?x3244 (+ ?x30 ?x300 (* 4 (* x d)) ?x332 ?x348 ?x44 (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4878)))
 (let (($x702 (and (= ?x3244 0) $x559)))
 (let ((?x235 (- (- (+ (- ?x60 x) q) (* 2 d)) 4)))
 (let ((?x232 (- q 8)))
 (let ((?x58 (+ d 2)))
 (let ((?x238 (+ (* (- 4) ?x58 ?x232 ?x232 ?x235 ?x235 ?x235) (* ?x58 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x243 (- (- ?x238 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 r))))
 (let ((?x248 (+ (- ?x243 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235) (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 x00))))
 (let ((?x250 (- ?x248 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x252 (+ ?x250 (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x256 (- (- ?x252 (* 8 ?x232 ?x232 ?x235 ?x235 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 r00))))
 (let ((?x259 (+ ?x256 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x235 ?x235) (* 4 ?x58 ?x232 ?x232 ?x235 ?x235 r))))
 (let ((?x262 (- ?x259 (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r r))))
 (let ((?x266 (+ (- ?x262 (* 4 d00 ?x232 ?x232 ?x235 ?x235 x00)) (* 2 d00 ?x232 ?x232 q00 ?x235 ?x235) (* ?x58 ?x58 ?x58 d00 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x268 (- ?x266 (* 2 ?x58 ?x58 ?x58 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x272 (- (+ ?x268 (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 2 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x274 (+ ?x272 (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r x00))))
 (let ((?x278 (- (- ?x274 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r00 r))))
 (let ((?x282 (+ ?x278 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 r00) (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r00 r) (* 8 ?x232 ?x232 ?x235 ?x235 ?x235))))
 (let ((?x286 (- (- ?x282 (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r)) (* d00 d00 ?x232 ?x232 q00 ?x235 ?x235))))
 (let ((?x176 (- (- (+ (- ?x60 x) q) d) 2)))
 (let ((?x174 (- q 4)))
 (let ((?x179 (+ (* (- 4) ?x58 ?x174 ?x174 ?x176 ?x176 ?x176) (* ?x58 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x184 (- (- ?x179 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 r))))
 (let ((?x189 (+ (- ?x184 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176) (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 x00))))
 (let ((?x191 (- ?x189 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x193 (+ ?x191 (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x197 (- (- ?x193 (* 8 ?x174 ?x174 ?x176 ?x176 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 r00))))
 (let ((?x200 (+ ?x197 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x176 ?x176) (* 4 ?x58 ?x174 ?x174 ?x176 ?x176 r))))
 (let ((?x203 (- ?x200 (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r r))))
 (let ((?x207 (+ (- ?x203 (* 4 d00 ?x174 ?x174 ?x176 ?x176 x00)) (* 2 d00 ?x174 ?x174 q00 ?x176 ?x176) (* ?x58 ?x58 ?x58 d00 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x209 (- ?x207 (* 2 ?x58 ?x58 ?x58 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x213 (- (+ ?x209 (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 2 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x215 (+ ?x213 (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r x00))))
 (let ((?x219 (- (- ?x215 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r00 r))))
 (let ((?x223 (+ ?x219 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 r00) (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r00 r) (* 8 ?x174 ?x174 ?x176 ?x176 ?x176))))
 (let ((?x227 (- (- ?x223 (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r)) (* d00 d00 ?x174 ?x174 q00 ?x176 ?x176))))
 (let ((?x61 (- ?x60 x)))
 (let ((?x118 (+ ?x61 q)))
 (let ((?x121 (+ (* (- 4) ?x58 q q ?x118 ?x118 ?x118) (* ?x58 ?x58 q q q ?x118 ?x118))))
 (let ((?x126 (- (- ?x121 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 r))))
 (let ((?x131 (+ (- ?x126 (* ?x58 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118)) (* 2 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118) (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 x00))))
 (let ((?x133 (- ?x131 (* ?x58 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x135 (+ ?x133 (* 2 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x139 (- (- ?x135 (* 8 q q ?x118 ?x118 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 r00))))
 (let ((?x142 (+ ?x139 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x118 ?x118) (* 4 ?x58 q q ?x118 ?x118 r))))
 (let ((?x145 (- ?x142 (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r r))))
 (let ((?x149 (+ (- ?x145 (* 4 d00 q q ?x118 ?x118 x00)) (* 2 d00 q q q00 ?x118 ?x118) (* ?x58 ?x58 ?x58 d00 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x151 (- ?x149 (* 2 ?x58 ?x58 ?x58 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x155 (- (+ ?x151 (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 2 ?x58 q q q ?x118 ?x118))))
 (let ((?x157 (+ ?x155 (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r x00))))
 (let ((?x161 (- (- ?x157 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r00 r))))
 (let ((?x165 (+ ?x161 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 r00) (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r00 r) (* 8 q q ?x118 ?x118 ?x118))))
 (let ((?x169 (- (- ?x165 (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r)) (* d00 d00 q q q00 ?x118 ?x118))))
 (let ((?x62 (+ ?x61 q d 2)))
 (let ((?x59 (+ q 4)))
 (let ((?x65 (+ (* (- 4) ?x58 ?x59 ?x59 ?x62 ?x62 ?x62) (* ?x58 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x70 (- (- ?x65 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 r))))
 (let ((?x75 (+ (- ?x70 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62) (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 x00))))
 (let ((?x77 (- ?x75 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x79 (+ ?x77 (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x83 (- (- ?x79 (* 8 ?x59 ?x59 ?x62 ?x62 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 r00))))
 (let ((?x86 (+ ?x83 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x62 ?x62) (* 4 ?x58 ?x59 ?x59 ?x62 ?x62 r))))
 (let ((?x89 (- ?x86 (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r r))))
 (let ((?x93 (+ (- ?x89 (* 4 d00 ?x59 ?x59 ?x62 ?x62 x00)) (* 2 d00 ?x59 ?x59 q00 ?x62 ?x62) (* ?x58 ?x58 ?x58 d00 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x95 (- ?x93 (* 2 ?x58 ?x58 ?x58 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x99 (- (+ ?x95 (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 2 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x101 (+ ?x99 (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r x00))))
 (let ((?x105 (- (- ?x101 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r00 r))))
 (let ((?x109 (+ ?x105 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 r00) (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r00 r) (* 8 ?x59 ?x59 ?x62 ?x62 ?x62))))
 (let ((?x113 (- (- ?x109 (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r)) (* d00 d00 ?x59 ?x59 q00 ?x62 ?x62))))
 (let (($x291 (or (not (= (+ ?x113 (* 4 d00 ?x59 ?x59 ?x62 ?x62 r00)) 0)) (not (= (+ ?x169 (* 4 d00 q q ?x118 ?x118 r00)) 0)) (not (= (+ ?x227 (* 4 d00 ?x174 ?x174 ?x176 ?x176 r00)) 0)) (not (= (+ ?x286 (* 4 d00 ?x232 ?x232 ?x235 ?x235 r00)) 0)))))
 (let ((?x42 (- (+ (- ?x30 (* 8 r00)) (* 4 d x)) (* 4 d00 x00))))
 (let ((?x50 (+ (- (+ (- ?x42 ?x41) ?x44) (* 2 d q)) (* 2 d00 q00))))
 (let (($x292 (and (= (+ (- ?x50 (* 4 d r)) (* 4 d00 r00)) 0) $x291)))
 (rewrite (= $x292 $x702)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x3912 (trans (quant-intro (proof-bind ?x1050) (= $x293 $x1230)) (elim-unused (= $x1230 $x3901)) (= $x293 $x3901))))
 (let ((@x27 (asserted $x293)))
 (let ((@x528 (mp (mp @x27 @x3912 $x3901) (quant-intro (proof-bind ?x638) (= $x3901 $x521)) $x521)))
 (let ((@x572 (mp (mp @x528 (rewrite (= $x521 $x521)) $x521) (quant-intro (proof-bind ?x2679) (= $x521 $x5561)) $x5561)))
 (let ((@x1940 (mp (mp~ @x572 (sk (~ $x5561 $x4152)) $x4152) (rewrite (= $x4152 $x2070)) $x2070)))
 (let ((@x2331 (and-elim @x1940 $x4538)))
 (let ((@x1967 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4538) $x1331)) @x2331 $x1331)))
 (let (($x1892 (>= ?x1527 0)))
 (let ((@x1945 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4538) $x1892)) @x2331 $x1892)))
 (let (($x3820 (not (<= ?x654 0))))
 (let (($x5164 (<= ?x3288 0)))
 (let (($x5333 (>= ?x3288 0)))
 (let ((@x5702 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2565 (not $x5164) (not $x5333))) (lemma ((_ th-lemma arith) (hypothesis (not $x5333)) @x1945 @x1967 false) $x5333) (lemma ((_ th-lemma arith) (hypothesis (not $x5164)) @x1945 @x1967 false) $x5164) $x2565)))
 (let (($x1910 (>= ?x2700 0)))
 (let (($x578 (<= ?x2700 0)))
 (let ((@x4959 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2923 (not $x578) (not $x1910))) (lemma ((_ th-lemma arith) (hypothesis (not $x578)) @x1945 @x1967 false) $x578) (lemma ((_ th-lemma arith) (hypothesis (not $x1910)) @x1945 @x1967 false) $x1910) $x2923)))
 (let (($x5826 (>= ?x3705 0)))
 (let (($x1116 (<= ?x3705 0)))
 (let ((@x2674 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2309 (not $x1116) (not $x5826))) (lemma ((_ th-lemma arith) (hypothesis (not $x1116)) @x1945 @x1967 false) $x1116) (lemma ((_ th-lemma arith) (hypothesis (not $x5826)) @x1945 @x1967 false) $x5826) $x2309)))
 (let ((@x5707 (unit-resolution (unit-resolution (and-elim @x1940 $x2291) @x2674 @x4959 (or $x1001 $x2292)) @x5702 $x2292)))
 (let (($x2469 (>= ?x654 0)))
 (let ((@x2172 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4939 $x3820 (not $x2469))) (lemma ((_ th-lemma arith) (hypothesis (not $x2469)) @x1945 @x1967 false) $x2469) @x5707 $x3820)))
 ((_ th-lemma arith) @x2172 @x1945 @x1967 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        7
 :arith-assert-lower        10
 :arith-assert-upper        11
 :arith-conflicts           8
 :arith-eq-adapter          5
 :arith-gcd-tests           8
 :arith-grobner             8
 :arith-max-min             3344
 :arith-nonlinear-horner    74
 :arith-num-rows            13
 :arith-patches             8
 :arith-patches_succ        8
 :arith-pivots              5
 :arith-tableau-max-columns 235
 :arith-tableau-max-rows    13
 :conflicts                 8
 :decisions                 24
 :del-clause                11
 :final-checks              8
 :max-memory                21.08
 :memory                    19.67
 :mk-bool-var               15
 :mk-clause                 20
 :num-allocs                36951545
 :num-checks                1
 :propagations              36
 :rlimit-count              183538
 :time                      0.15
 :total-time                0.18)
