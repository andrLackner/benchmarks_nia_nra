unsat
((set-logic NRA)
(proof
(let (($x489 (exists ((x Real) (y Real) )(! (let ((?x310 (* y x)))
 (let ((?x431 (* (- 1.0) ?x310)))
 (let ((?x329 (* (/ 1.0 2.0) y)))
 (let ((?x330 (+ (- (/ 1.0 2.0)) ?x329)))
 (let ((?x187 (* ?x330 x)))
 (let ((?x801 (* 2.0 ?x187)))
 (let ((?x316 (+ ?x801 ?x431 x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x686 (+ ?x431 ?x78 z00 x)))
 (let ((?x688 (* ?x330 ?x686 ?x686 ?x686)))
 (let ((?x299 (* ?x330 ?x330 x)))
 (let ((?x305 (* (- 2.0) ?x299)))
 (let ((?x496 (+ ?x305 ?x688)))
 (let ((?x295 (* ?x330 ?x330 x x)))
 (let ((?x296 (* (- 4.0) ?x295)))
 (let ((?x291 (* ?x330 ?x330 ?x330 x x x)))
 (let ((?x292 (* (- 8.0) ?x291)))
 (let ((?x297 (+ ?x292 ?x296)))
 (let ((?x288 (* x x)))
 (let ((?x289 (* (- 4.0) ?x288)))
 (let ((?x169 (* ?x330 x x x)))
 (let ((?x401 (* (- 8.0) ?x169)))
 (let ((?x290 (+ ?x401 ?x289)))
 (let ((?x326 (* ?x290 ?x297 ?x496 ?x316)))
 (let (($x327 (= ?x326 0.0)))
 (not $x327)))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x217 (exists ((x Real) (y Real) )(! false :qid k!28))
 ))
 (let ((?x179 (lambda ((x Real) (y Real) )(let ((?x310 (* y x)))
 (let ((?x431 (* (- 1.0) ?x310)))
 (let ((?x329 (* (/ 1.0 2.0) y)))
 (let ((?x330 (+ (- (/ 1.0 2.0)) ?x329)))
 (let ((?x187 (* ?x330 x)))
 (let ((?x801 (* 2.0 ?x187)))
 (let ((?x316 (+ ?x801 ?x431 x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x686 (+ ?x431 ?x78 z00 x)))
 (let ((?x688 (* ?x330 ?x686 ?x686 ?x686)))
 (let ((?x299 (* ?x330 ?x330 x)))
 (let ((?x305 (* (- 2.0) ?x299)))
 (let ((?x496 (+ ?x305 ?x688)))
 (let ((?x295 (* ?x330 ?x330 x x)))
 (let ((?x296 (* (- 4.0) ?x295)))
 (let ((?x291 (* ?x330 ?x330 ?x330 x x x)))
 (let ((?x292 (* (- 8.0) ?x291)))
 (let ((?x297 (+ ?x292 ?x296)))
 (let ((?x288 (* x x)))
 (let ((?x289 (* (- 4.0) ?x288)))
 (let ((?x169 (* ?x330 x x x)))
 (let ((?x401 (* (- 8.0) ?x169)))
 (let ((?x290 (+ ?x401 ?x289)))
 (let ((?x326 (* ?x290 ?x297 ?x496 ?x316)))
 (let (($x327 (= ?x326 0.0)))
 (let (($x589 (not $x327)))
 (let ((?x841 (* y y x)))
 (let ((?x440 (* (- (/ 1.0 2.0)) ?x841)))
 (let ((?x203 (+ x z00 ?x78 ?x431)))
 (let ((?x178 (* ?x330 ?x203 ?x203 ?x203)))
 (let ((?x847 (* (- (/ 1.0 2.0)) x)))
 (let ((?x151 (+ ?x847 ?x178 ?x310 ?x440)))
 (let ((?x810 (* x x x)))
 (let ((?x791 (* y x x)))
 (let ((?x413 (* 2.0 ?x791)))
 (let ((?x644 (* y y x x)))
 (let ((?x520 (* (- 1.0) ?x644)))
 (let ((?x490 (* y y y x x x)))
 (let ((?x277 (* (- 1.0) ?x490)))
 (let ((?x517 (* (- 1.0) ?x288)))
 (let ((?x134 (* y x x x)))
 (let ((?x787 (* (- 3.0) ?x134)))
 (let ((?x117 (* y y x x x)))
 (let ((?x788 (* 3.0 ?x117)))
 (let ((?x420 (+ ?x788 ?x787 ?x517 ?x277 ?x520 ?x413 ?x810)))
 (let ((?x580 (* 4.0 ?x810)))
 (let ((?x574 (* (- 4.0) ?x134)))
 (let ((?x85 (+ ?x574 ?x289 ?x580)))
 (let ((?x182 (* ?x85 ?x420 ?x151 0.0)))
 (let ((?x239 (+ (* (- 1.0) x) ?x310)))
 (let ((?x446 (+ (* 2.0 ?x847) (* 2.0 (* (/ 1.0 2.0) ?x310)))))
 (let ((@x453 (trans (rewrite (= ?x187 (+ ?x847 (* ?x329 x)))) (rewrite (= (+ ?x847 (* ?x329 x)) (+ ?x847 (* (/ 1.0 2.0) ?x310)))) (= ?x187 (+ ?x847 (* (/ 1.0 2.0) ?x310))))))
 (let ((@x249 (trans (monotonicity @x453 (= ?x801 (* 2.0 (+ ?x847 (* (/ 1.0 2.0) ?x310))))) (rewrite (= (* 2.0 (+ ?x847 (* (/ 1.0 2.0) ?x310))) ?x446)) (= ?x801 ?x446))))
 (let ((@x237 (monotonicity (trans @x249 (rewrite (= ?x446 ?x239)) (= ?x801 ?x239)) (= ?x316 (+ ?x239 ?x431 x)))))
 (let ((?x199 (+ ?x847 ?x310 ?x440)))
 (let ((?x895 (* ?x329 x)))
 (let ((?x897 (* (- (/ 1.0 2.0)) ?x895)))
 (let ((?x82 (* (- 2.0) ?x897)))
 (let ((?x848 (* (/ 1.0 4.0) ?x841)))
 (let ((?x81 (* (- 2.0) ?x848)))
 (let ((?x678 (* (- (/ 1.0 4.0)) ?x310)))
 (let ((?x80 (* (- 2.0) ?x678)))
 (let ((?x669 (* (/ 1.0 4.0) x)))
 (let ((?x77 (* (- 2.0) ?x669)))
 (let ((?x83 (+ ?x77 ?x80 ?x81 ?x82)))
 (let ((@x195 (monotonicity (rewrite (= ?x77 ?x847)) (rewrite (= ?x80 (* (/ 1.0 2.0) ?x310))) (rewrite (= ?x81 ?x440)) (rewrite (= ?x82 (* (/ 1.0 2.0) ?x310))) (= ?x83 (+ ?x847 (* (/ 1.0 2.0) ?x310) ?x440 (* (/ 1.0 2.0) ?x310))))))
 (let ((@x198 (trans @x195 (rewrite (= (+ ?x847 (* (/ 1.0 2.0) ?x310) ?x440 (* (/ 1.0 2.0) ?x310)) ?x199)) (= ?x83 ?x199))))
 (let ((?x284 (+ ?x669 ?x678 ?x848 ?x897)))
 (let ((?x867 (* ?x329 ?x329 x)))
 (let ((?x888 (* ?x329 (- (/ 1.0 2.0)) x)))
 (let ((?x886 (* (- (/ 1.0 2.0)) ?x847)))
 (let ((?x902 (+ ?x886 ?x888 ?x897 ?x867)))
 (let ((@x880 (monotonicity (rewrite (= ?x886 ?x669)) (rewrite (= ?x888 ?x678)) (rewrite (= ?x867 ?x848)) (= ?x902 (+ ?x669 ?x678 ?x897 ?x848)))))
 (let ((@x859 (trans @x880 (rewrite (= (+ ?x669 ?x678 ?x897 ?x848) ?x284)) (= ?x902 ?x284))))
 (let ((@x76 (monotonicity (trans (rewrite (= ?x299 ?x902)) @x859 (= ?x299 ?x284)) (= ?x305 (* (- 2.0) ?x284)))))
 (let ((@x201 (trans (trans @x76 (rewrite (= (* (- 2.0) ?x284) ?x83)) (= ?x305 ?x83)) @x198 (= ?x305 ?x199))))
 (let ((@x144 (trans (monotonicity @x201 (rewrite (= ?x688 ?x178)) (= ?x496 (+ ?x199 ?x178))) (rewrite (= (+ ?x199 ?x178) ?x151)) (= ?x496 ?x151))))
 (let ((?x415 (+ ?x517 ?x520 ?x413)))
 (let ((?x797 (* (- (/ 1.0 4.0)) ?x791)))
 (let ((?x508 (* (- 4.0) ?x797)))
 (let ((?x716 (* (- (/ 1.0 2.0)) (* ?x329 x x))))
 (let ((?x471 (* (- 4.0) ?x716)))
 (let ((?x643 (* (/ 1.0 4.0) ?x644)))
 (let ((?x470 (* (- 4.0) ?x643)))
 (let ((?x706 (* (/ 1.0 4.0) ?x288)))
 (let ((?x459 (* (- 4.0) ?x706)))
 (let ((?x509 (+ ?x459 ?x470 ?x471 ?x508)))
 (let ((@x412 (monotonicity (rewrite (= ?x459 ?x517)) (rewrite (= ?x470 ?x520)) (rewrite (= ?x471 ?x791)) (rewrite (= ?x508 ?x791)) (= ?x509 (+ ?x517 ?x520 ?x791 ?x791)))))
 (let ((@x409 (trans @x412 (rewrite (= (+ ?x517 ?x520 ?x791 ?x791) ?x415)) (= ?x509 ?x415))))
 (let ((?x717 (+ ?x706 ?x643 ?x716 ?x797)))
 (let ((?x718 (* ?x329 ?x329 x x)))
 (let ((?x709 (* ?x329 (- (/ 1.0 2.0)) x x)))
 (let ((?x707 (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) ?x288))))
 (let ((?x697 (+ ?x707 ?x709 ?x716 ?x718)))
 (let ((@x658 (monotonicity (rewrite (= ?x707 ?x706)) (rewrite (= ?x709 ?x797)) (rewrite (= ?x718 ?x643)) (= ?x697 (+ ?x706 ?x797 ?x716 ?x643)))))
 (let ((@x728 (trans @x658 (rewrite (= (+ ?x706 ?x797 ?x716 ?x643) ?x717)) (= ?x697 ?x717))))
 (let ((@x840 (monotonicity (trans (rewrite (= ?x295 ?x697)) @x728 (= ?x295 ?x717)) (= ?x296 (* (- 4.0) ?x717)))))
 (let ((@x400 (trans (trans @x840 (rewrite (= (* (- 4.0) ?x717) ?x509)) (= ?x296 ?x509)) @x409 (= ?x296 ?x415))))
 (let ((?x790 (+ ?x788 ?x787 ?x277 ?x810)))
 (let ((?x131 (* (- (/ 1.0 8.0)) ?x810)))
 (let ((?x736 (* (- 8.0) ?x131)))
 (let ((?x491 (* (/ 1.0 8.0) ?x490)))
 (let ((?x734 (* (- 8.0) ?x491)))
 (let ((?x583 (* (- (/ 1.0 2.0)) (* ?x329 ?x329 x x x))))
 (let ((?x695 (* (- 8.0) ?x583)))
 (let ((?x498 (* (/ 1.0 4.0) ?x134)))
 (let ((?x729 (* (- 8.0) ?x498)))
 (let ((?x501 (* (- (/ 1.0 4.0)) ?x117)))
 (let ((?x727 (* (- 8.0) ?x501)))
 (let ((?x118 (* (- (/ 1.0 2.0)) (* ?x329 (- (/ 1.0 2.0)) x x x))))
 (let ((?x106 (* (- 8.0) ?x118)))
 (let ((?x206 (+ ?x106 ?x727 ?x729 ?x695 ?x734 ?x736)))
 (let ((?x257 (* (- 2.0) ?x134)))
 (let ((?x256 (* 2.0 ?x117)))
 (let ((?x255 (* (- 1.0) ?x134)))
 (let ((?x410 (+ ?x255 ?x256 ?x257 ?x117 ?x277 ?x810)))
 (let ((@x781 (monotonicity (rewrite (= ?x106 ?x255)) (rewrite (= ?x727 ?x256)) (rewrite (= ?x729 ?x257)) (rewrite (= ?x695 ?x117)) (rewrite (= ?x734 ?x277)) (rewrite (= ?x736 ?x810)) (= ?x206 ?x410))))
 (let ((?x503 (+ ?x118 ?x501 ?x498 ?x583 ?x491 ?x131)))
 (let ((?x568 (* ?x329 ?x329 ?x329 x x x)))
 (let ((?x466 (* ?x329 (- (/ 1.0 2.0)) ?x329 x x x)))
 (let ((?x128 (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) (* ?x329 x x x)))))
 (let ((?x125 (* ?x329 ?x329 (- (/ 1.0 2.0)) x x x)))
 (let ((?x474 (* ?x329 (- (/ 1.0 2.0)) (- (/ 1.0 2.0)) x x x)))
 (let ((?x162 (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) ?x810)))))
 (let ((?x578 (+ ?x162 ?x474 ?x118 ?x125 ?x128 ?x466 ?x583 ?x568)))
 (let ((?x484 (* (- (/ 1.0 8.0)) ?x117)))
 (let ((?x159 (* (/ 1.0 8.0) ?x134)))
 (let ((?x499 (+ ?x131 ?x159 ?x118 ?x484 ?x159 ?x484 ?x583 ?x491)))
 (let ((@x495 (monotonicity (rewrite (= ?x162 ?x131)) (rewrite (= ?x474 ?x159)) (rewrite (= ?x125 ?x484)) (rewrite (= ?x128 ?x159)) (rewrite (= ?x466 ?x484)) (rewrite (= ?x568 ?x491)) (= ?x578 ?x499))))
 (let ((@x406 (trans (rewrite (= ?x291 ?x578)) (trans @x495 (rewrite (= ?x499 ?x503)) (= ?x578 ?x503)) (= ?x291 ?x503))))
 (let ((@x216 (trans (monotonicity @x406 (= ?x292 (* (- 8.0) ?x503))) (rewrite (= (* (- 8.0) ?x503) ?x206)) (= ?x292 ?x206))))
 (let ((@x432 (trans @x216 (trans @x781 (rewrite (= ?x410 ?x790)) (= ?x206 ?x790)) (= ?x292 ?x790))))
 (let ((@x881 (trans (monotonicity @x432 @x400 (= ?x297 (+ ?x790 ?x415))) (rewrite (= (+ ?x790 ?x415) ?x420)) (= ?x297 ?x420))))
 (let ((?x550 (+ ?x574 ?x580)))
 (let ((?x808 (+ (* (- 8.0) (* (/ 1.0 2.0) ?x134)) (* (- 8.0) (* (- (/ 1.0 2.0)) ?x810)))))
 (let ((?x108 (* (- (/ 1.0 2.0)) ?x810)))
 (let ((?x265 (* (/ 1.0 2.0) ?x134)))
 (let ((?x354 (+ ?x265 ?x108)))
 (let ((?x348 (* ?x329 x x x)))
 (let ((?x320 (+ ?x108 ?x348)))
 (let ((@x857 (trans (monotonicity (rewrite (= ?x348 ?x265)) (= ?x320 (+ ?x108 ?x265))) (rewrite (= (+ ?x108 ?x265) ?x354)) (= ?x320 ?x354))))
 (let ((@x516 (monotonicity (trans (rewrite (= ?x169 ?x320)) @x857 (= ?x169 ?x354)) (= ?x401 (* (- 8.0) ?x354)))))
 (let ((@x89 (trans (trans @x516 (rewrite (= (* (- 8.0) ?x354) ?x808)) (= ?x401 ?x808)) (rewrite (= ?x808 ?x550)) (= ?x401 ?x550))))
 (let ((@x481 (trans (monotonicity @x89 (= ?x290 (+ ?x550 ?x289))) (rewrite (= (+ ?x550 ?x289) ?x85)) (= ?x290 ?x85))))
 (let ((@x227 (monotonicity @x481 @x881 @x144 (trans @x237 (rewrite (= (+ ?x239 ?x431 x) 0.0)) (= ?x316 0.0)) (= ?x326 ?x182))))
 (let ((@x221 (monotonicity (trans @x227 (rewrite (= ?x182 0.0)) $x327) (= $x327 (= 0.0 0.0)))))
 (let ((@x180 (monotonicity (trans @x221 (rewrite (= (= 0.0 0.0) true)) (= $x327 true)) (= $x589 (not true)))))
 (trans @x180 (rewrite (= (not true) false)) (= $x589 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x767 (trans (quant-intro (proof-bind ?x179) (= $x489 $x217)) (elim-unused (= $x217 false)) (= $x489 false))))
 (let (($x324 (exists ((x Real) (y Real) (z Real) )(! (let ((?x98 (* (- 1.0) z00)))
 (let ((?x84 (* y x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x685 (+ ?x79 ?x84 z ?x98)))
 (let ((?x561 (* (/ 1.0 2.0) (* z z z y))))
 (let ((?x526 (* (- (/ 1.0 2.0)) (* y y x))))
 (let ((?x365 (* (- 1.0) (* y y x x))))
 (let ((?x274 (* (- 1.0) (* y y y x x x))))
 (let ((?x473 (* (+ (* (- 4.0) (* y x x x)) (* (- 4.0) (* x x))) (+ ?x274 ?x365) (+ ?x526 ?x561) ?x685)))
 (let ((?x325 (+ ?x79 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x98)))
 (let ((?x120 (* (/ 1.0 2.0) y)))
 (let ((?x309 (+ (- (/ 1.0 2.0)) ?x120)))
 (let ((?x47 (+ z x)))
 (let ((?x188 (+ (* (- 8.0) (* ?x309 ?x309 ?x309 x x x)) (* (- 4.0) (* ?x309 ?x309 x x)))))
 (let ((?x95 (* (+ (* (- 8.0) (* ?x309 x x x)) (* (- 4.0) (* x x))) ?x188 (+ (* (- 2.0) (* ?x309 ?x309 x)) (* ?x47 ?x47 ?x47 ?x309)) ?x325)))
 (and (= ?x685 0.0) (or (not (= ?x95 0.0)) (not (= ?x473 0.0)))))))))))))))))))) :qid k!28))
 ))
 (let (($x70 (exists ((x Real) (y Real) (z Real) )(! (let ((?x64 (+ (* (- 1.0) 2.0 x (/ y 2.0) (/ y 2.0)) (* (/ y 2.0) z z z))))
 (let ((?x44 (* 2.0 x 2.0 x)))
 (let ((?x61 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x (/ y 2.0)) ?x44)))
 (let ((?x53 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x59 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x53 ?x53 ?x53) (* 2.0 x 2.0 x ?x53 ?x53))))
 (let ((?x65 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x53) z) z00) ?x59 ?x61 ?x64)))
 (let ((?x47 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36) (* 2.0 x 2.0 x ?x36 ?x36))))
 (let ((?x50 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36) ?x44) (+ (* ?x24 2.0 x ?x36 ?x36) (* ?x36 ?x47 ?x47 ?x47)))))
 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x50 0.0)) (not (= ?x65 0.0))))))))))))))) :qid k!28))
 ))
 (let ((?x312 (lambda ((x Real) (y Real) (z Real) )(let ((?x98 (* (- 1.0) z00)))
 (let ((?x84 (* y x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x685 (+ ?x79 ?x84 z ?x98)))
 (let ((?x561 (* (/ 1.0 2.0) (* z z z y))))
 (let ((?x526 (* (- (/ 1.0 2.0)) (* y y x))))
 (let ((?x365 (* (- 1.0) (* y y x x))))
 (let ((?x274 (* (- 1.0) (* y y y x x x))))
 (let ((?x473 (* (+ (* (- 4.0) (* y x x x)) (* (- 4.0) (* x x))) (+ ?x274 ?x365) (+ ?x526 ?x561) ?x685)))
 (let ((?x325 (+ ?x79 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x98)))
 (let ((?x120 (* (/ 1.0 2.0) y)))
 (let ((?x309 (+ (- (/ 1.0 2.0)) ?x120)))
 (let ((?x47 (+ z x)))
 (let ((?x188 (+ (* (- 8.0) (* ?x309 ?x309 ?x309 x x x)) (* (- 4.0) (* ?x309 ?x309 x x)))))
 (let ((?x95 (* (+ (* (- 8.0) (* ?x309 x x x)) (* (- 4.0) (* x x))) ?x188 (+ (* (- 2.0) (* ?x309 ?x309 x)) (* ?x47 ?x47 ?x47 ?x309)) ?x325)))
 (let (($x322 (and (= ?x685 0.0) (or (not (= ?x95 0.0)) (not (= ?x473 0.0))))))
 (let ((?x64 (+ (* (- 1.0) 2.0 x (/ y 2.0) (/ y 2.0)) (* (/ y 2.0) z z z))))
 (let ((?x44 (* 2.0 x 2.0 x)))
 (let ((?x61 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x (/ y 2.0)) ?x44)))
 (let ((?x53 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x59 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x53 ?x53 ?x53) (* 2.0 x 2.0 x ?x53 ?x53))))
 (let ((?x65 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x53) z) z00) ?x59 ?x61 ?x64)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36) (* 2.0 x 2.0 x ?x36 ?x36))))
 (let ((?x50 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36) ?x44) (+ (* ?x24 2.0 x ?x36 ?x36) (* ?x36 ?x47 ?x47 ?x47)))))
 (let (($x69 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x50 0.0)) (not (= ?x65 0.0))))))
 (rewrite (= $x69 $x322)))))))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x514 (mp (mp @x71 (quant-intro (proof-bind ?x312) (= $x70 $x324)) $x324) (rewrite (= $x324 $x489)) $x489)))
 (mp @x514 @x767 false))))))))))))

(:max-memory   17.66
 :memory       17.39
 :num-allocs   63086
 :num-checks   1
 :rlimit-count 1517
 :time         0.00
 :total-time   0.01)
