unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x734 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x639 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 1) (* v!0 v!0)) (* 2 v!0) (* (- 2) u!1) (* (- 4) r!2) ?x734)))
 (let (($x237 (>= ?x639 0)))
 (let (($x418 (= ?x639 0)))
 (let ((?x148 (* (- 1) ?x734)))
 (let ((?x459 (* 4 r!2)))
 (let ((?x490 (* 2 u!1)))
 (let ((?x797 (* (- 2) v!0)))
 (let ((?x163 (* v!0 v!0)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x268 (+ ?x100 ?x116 ?x41 ?x46 ?x192 ?x163 ?x797 ?x490 ?x459 ?x148)))
 (let ((?x812 (* r!2 r!2 r!2)))
 (let ((?x628 (* v!0 v!0 u!1 r!2 r!2 r!2)))
 (let ((?x480 (* (- 1) (* v!0 v!0 v!0))))
 (let ((?x784 (+ (* (- 4) (* v!0 v!0 v!0 u!1)) (* 4 (* v!0 u!1 r!2 r!2 r!2)) (* 3 (* v!0 v!0 v!0 v!0 u!1 r!2)) (* (- 12) (* v!0 u!1 r!2 r!2)) (* (- 3) (* v!0 r!2 r!2)) (* 4 (* u!1 r!2 r!2 r!2)) (* (- 3) (* v!0 v!0 v!0 u!1 r!2 r!2)) (* (- 4) (* v!0 v!0 v!0 v!0 u!1)) (* (- 1) (* v!0 v!0 v!0 v!0 v!0 u!1)) (* (- 12) (* v!0 v!0 u!1 r!2 r!2)) ?x480 (* 3 (* v!0 v!0 r!2)) (* 12 (* v!0 v!0 u!1 r!2)) (* 12 (* v!0 v!0 v!0 u!1 r!2)) ?x628 ?x812)))
 (let ((?x583 (* ?x784 ?x268)))
 (let (($x109 (= ?x583 0)))
 (let (($x787 (not $x109)))
 (let ((?x528 (* u!1 u!1 u!1)))
 (let ((?x121 (+ (* 2 (* v!0 v!0 r!2 r!2 r!2)) (* 6 (* v!0 v!0 u!1 u!1 r!2)) (* 2 (* v!0 v!0 u!1 u!1 u!1)) (* 3 (* u!1 r!2 r!2)) (* 3 (* v!0 v!0 u!1 u!1 u!1 r!2)) (* 3 (* u!1 u!1 r!2)) (* 3 (* v!0 v!0 u!1 u!1 r!2 r!2)) (* v!0 v!0 u!1 u!1 u!1 u!1) (* 6 (* v!0 v!0 u!1 r!2 r!2)) ?x528 ?x628 ?x812)))
 (let ((?x207 (* ?x121 ?x268)))
 (let (($x218 (= ?x207 0)))
 (let (($x118 (or (not $x218) $x787)))
 (let (($x599 (and $x418 $x118)))
 (let ((?x392 (+ ?x459 ?x490 ?x797 ?x100 ?x116 ?x41 ?x148 ?x163 ?x46 ?x192)))
 (let ((?x435 (* r!2 r!2 r!2 u!1 v!0 v!0)))
 (let ((?x633 (+ ?x812 (* (- 3) (* r!2 r!2 v!0)) (* 3 (* r!2 v!0 v!0)) ?x480 ?x435 (* 4 (* r!2 r!2 r!2 u!1)) (* (- 12) (* r!2 r!2 u!1 v!0)) (* 12 (* r!2 u!1 v!0 v!0)) (* (- 4) (* u!1 v!0 v!0 v!0)) (* 4 (* r!2 r!2 r!2 u!1 v!0)) (* (- 12) (* r!2 r!2 u!1 v!0 v!0)) (* 12 (* r!2 u!1 v!0 v!0 v!0)) (* (- 4) (* u!1 v!0 v!0 v!0 v!0)) (* (- 3) (* r!2 r!2 u!1 v!0 v!0 v!0)) (* 3 (* r!2 u!1 v!0 v!0 v!0 v!0)) (* (- 1) (* u!1 v!0 v!0 v!0 v!0 v!0)))))
 (let ((?x544 (+ ?x812 ?x435 (* 6 (* r!2 r!2 u!1 v!0 v!0)) (* 3 (* r!2 r!2 u!1)) (* 3 (* r!2 u!1 u!1)) ?x528 (* 3 (* r!2 r!2 u!1 u!1 v!0 v!0)) (* 3 (* r!2 u!1 u!1 u!1 v!0 v!0)) (* u!1 u!1 u!1 u!1 v!0 v!0) (* 2 (* r!2 r!2 r!2 v!0 v!0)) (* 6 (* r!2 u!1 u!1 v!0 v!0)) (* 2 (* u!1 u!1 u!1 v!0 v!0)))))
 (let (($x296 (and (= ?x392 0) (or (not (= (* ?x544 ?x392) 0)) (not (= (* ?x633 ?x392) 0))))))
 (let (($x737 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x634 (* (- 1) (* u v v v v v))))
 (let ((?x649 (* 3 (* r u v v v v))))
 (let ((?x648 (* (- 3) (* r r u v v v))))
 (let ((?x644 (* 4 (* r r r u v))))
 (let ((?x486 (* (- 4) (* u v v v))))
 (let ((?x643 (* 12 (* r u v v))))
 (let ((?x641 (* (- 12) (* r r u v))))
 (let ((?x424 (* 4 (* r r r u))))
 (let ((?x410 (* r r r u v v)))
 (let ((?x366 (* (- 1) (* v v v))))
 (let ((?x375 (* 3 (* r v v))))
 (let ((?x373 (* (- 3) (* r r v))))
 (let ((?x321 (* r r r)))
 (let ((?x660 (+ ?x321 ?x373 ?x375 ?x366 ?x410 ?x424 ?x641 ?x643 ?x486 ?x644 (* (- 12) (* r r u v v)) (* 12 (* r u v v v)) (* (- 4) (* u v v v v)) ?x648 ?x649 ?x634)))
 (let ((?x808 (* 2 (* u u u v v))))
 (let ((?x765 (* 2 (* r r r v v))))
 (let ((?x758 (* u u u u v v)))
 (let ((?x825 (* 3 (* r u u u v v))))
 (let ((?x824 (* 3 (* r r u u v v))))
 (let ((?x717 (* u u u)))
 (let ((?x733 (* 3 (* r u u))))
 (let ((?x732 (* 3 (* r r u))))
 (let ((?x836 (+ ?x321 ?x410 (* 6 (* r r u v v)) ?x732 ?x733 ?x717 ?x824 ?x825 ?x758 ?x765 (* 6 (* r u u v v)) ?x808)))
 (let (($x203 (= ?x198 0)))
 (and $x203 (or (not (= (* ?x836 ?x198) 0)) (not (= (* ?x660 ?x198) 0))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x692 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x634 (* (- 1) (* u v v v v v))))
 (let ((?x416 (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v) u))))
 (let ((?x649 (* 3 (* r u v v v v))))
 (let ((?x648 (* (- 3) (* r r u v v v))))
 (let ((?x644 (* 4 (* r r r u v))))
 (let ((?x486 (* (- 4) (* u v v v))))
 (let ((?x643 (* 12 (* r u v v))))
 (let ((?x641 (* (- 12) (* r r u v))))
 (let ((?x424 (* 4 (* r r r u))))
 (let ((?x410 (* r r r u v v)))
 (let ((?x366 (* (- 1) (* v v v))))
 (let ((?x375 (* 3 (* r v v))))
 (let ((?x373 (* (- 3) (* r r v))))
 (let ((?x321 (* r r r)))
 (let ((?x211 (+ ?x321 ?x373 ?x375 ?x366 ?x410 ?x424 ?x641 ?x643 ?x486 ?x644 (* (- 6) (* r r u v v)) (* 2 (* v (* (- 1) v) r r u)) (* 6 (* r u v v v)) (* 2 (* v r (* (- 1) v) r u)) (* (- 2) (* u v v v v)) (* 2 (* v (* (- 1) v) (* (- 1) v) r u)) (* 2 (* v r r (* (- 1) v) u)) ?x648 (* 2 (* v (* (- 1) v) r (* (- 1) v) u)) ?x649 (* 2 (* v r (* (- 1) v) (* (- 1) v) u)) ?x416 ?x634)))
 (let ((?x808 (* 2 (* u u u v v))))
 (let ((?x765 (* 2 (* r r r v v))))
 (let ((?x758 (* u u u u v v)))
 (let ((?x825 (* 3 (* r u u u v v))))
 (let ((?x824 (* 3 (* r r u u v v))))
 (let ((?x717 (* u u u)))
 (let ((?x733 (* 3 (* r u u))))
 (let ((?x732 (* 3 (* r r u))))
 (let ((?x553 (+ ?x321 ?x410 (* 2 (* u r u v v)) (* 2 (* r u r v v)) (* 2 (* u u r v v)) (* 2 (* r r u v v)) ?x732 ?x733 ?x717 ?x824 ?x825 ?x758 ?x765 (* 2 (* u r r v v)) (* 2 (* r u u v v)) ?x808)))
 (let (($x203 (= ?x198 0)))
 (and $x203 (or (not (= (* ?x553 ?x198) 0)) (not (= (* ?x211 ?x198) 0)))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x112 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x634 (* (- 1) (* u v v v v v))))
 (let ((?x649 (* 3 (* r u v v v v))))
 (let ((?x648 (* (- 3) (* r r u v v v))))
 (let ((?x644 (* 4 (* r r r u v))))
 (let ((?x486 (* (- 4) (* u v v v))))
 (let ((?x643 (* 12 (* r u v v))))
 (let ((?x641 (* (- 12) (* r r u v))))
 (let ((?x424 (* 4 (* r r r u))))
 (let ((?x410 (* r r r u v v)))
 (let ((?x366 (* (- 1) (* v v v))))
 (let ((?x375 (* 3 (* r v v))))
 (let ((?x373 (* (- 3) (* r r v))))
 (let ((?x321 (* r r r)))
 (let ((?x660 (+ ?x321 ?x373 ?x375 ?x366 ?x410 ?x424 ?x641 ?x643 ?x486 ?x644 (* (- 12) (* r r u v v)) (* 12 (* r u v v v)) (* (- 4) (* u v v v v)) ?x648 ?x649 ?x634)))
 (let ((?x808 (* 2 (* u u u v v))))
 (let ((?x765 (* 2 (* r r r v v))))
 (let ((?x758 (* u u u u v v)))
 (let ((?x825 (* 3 (* r u u u v v))))
 (let ((?x824 (* 3 (* r r u u v v))))
 (let ((?x717 (* u u u)))
 (let ((?x733 (* 3 (* r u u))))
 (let ((?x732 (* 3 (* r r u))))
 (let ((?x836 (+ ?x321 ?x410 (* 6 (* r r u v v)) ?x732 ?x733 ?x717 ?x824 ?x825 ?x758 ?x765 (* 6 (* r u u v v)) ?x808)))
 (let (($x203 (= ?x198 0)))
 (let (($x245 (and $x203 (or (not (= (* ?x836 ?x198) 0)) (not (= (* ?x660 ?x198) 0))))))
 (let ((?x416 (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v) u))))
 (let ((?x211 (+ ?x321 ?x373 ?x375 ?x366 ?x410 ?x424 ?x641 ?x643 ?x486 ?x644 (* (- 6) (* r r u v v)) (* 2 (* v (* (- 1) v) r r u)) (* 6 (* r u v v v)) (* 2 (* v r (* (- 1) v) r u)) (* (- 2) (* u v v v v)) (* 2 (* v (* (- 1) v) (* (- 1) v) r u)) (* 2 (* v r r (* (- 1) v) u)) ?x648 (* 2 (* v (* (- 1) v) r (* (- 1) v) u)) ?x649 (* 2 (* v r (* (- 1) v) (* (- 1) v) u)) ?x416 ?x634)))
 (let ((?x553 (+ ?x321 ?x410 (* 2 (* u r u v v)) (* 2 (* r u r v v)) (* 2 (* u u r v v)) (* 2 (* r r u v v)) ?x732 ?x733 ?x717 ?x824 ?x825 ?x758 ?x765 (* 2 (* u r r v v)) (* 2 (* r u u v v)) ?x808)))
 (let (($x306 (and $x203 (or (not (= (* ?x553 ?x198) 0)) (not (= (* ?x211 ?x198) 0))))))
 (rewrite (= $x306 $x245)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x776 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x595 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x519 (* (- 1) v)))
 (let ((?x521 (+ r ?x519)))
 (let ((?x514 (+ 2 v)))
 (let (($x601 (= (* (+ (* ?x521 ?x521 ?x521) (* ?x514 ?x514 ?x521 ?x521 ?x521 u)) ?x595) 0)))
 (let ((?x45 (* v v)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x653 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x399 (+ 2 u)))
 (let ((?x84 (* ?x71 ?x71 ?x71)))
 (let (($x778 (not (= (* (+ ?x84 (* ?x399 ?x71 ?x71 ?x71 v v)) ?x653) 0))))
 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) (or $x778 (not $x601))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x139 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x634 (* (- 1) (* u v v v v v))))
 (let ((?x416 (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v) u))))
 (let ((?x649 (* 3 (* r u v v v v))))
 (let ((?x648 (* (- 3) (* r r u v v v))))
 (let ((?x644 (* 4 (* r r r u v))))
 (let ((?x486 (* (- 4) (* u v v v))))
 (let ((?x643 (* 12 (* r u v v))))
 (let ((?x641 (* (- 12) (* r r u v))))
 (let ((?x424 (* 4 (* r r r u))))
 (let ((?x410 (* r r r u v v)))
 (let ((?x366 (* (- 1) (* v v v))))
 (let ((?x375 (* 3 (* r v v))))
 (let ((?x373 (* (- 3) (* r r v))))
 (let ((?x321 (* r r r)))
 (let ((?x211 (+ ?x321 ?x373 ?x375 ?x366 ?x410 ?x424 ?x641 ?x643 ?x486 ?x644 (* (- 6) (* r r u v v)) (* 2 (* v (* (- 1) v) r r u)) (* 6 (* r u v v v)) (* 2 (* v r (* (- 1) v) r u)) (* (- 2) (* u v v v v)) (* 2 (* v (* (- 1) v) (* (- 1) v) r u)) (* 2 (* v r r (* (- 1) v) u)) ?x648 (* 2 (* v (* (- 1) v) r (* (- 1) v) u)) ?x649 (* 2 (* v r (* (- 1) v) (* (- 1) v) u)) ?x416 ?x634)))
 (let ((?x808 (* 2 (* u u u v v))))
 (let ((?x765 (* 2 (* r r r v v))))
 (let ((?x758 (* u u u u v v)))
 (let ((?x825 (* 3 (* r u u u v v))))
 (let ((?x824 (* 3 (* r r u u v v))))
 (let ((?x717 (* u u u)))
 (let ((?x733 (* 3 (* r u u))))
 (let ((?x732 (* 3 (* r r u))))
 (let ((?x553 (+ ?x321 ?x410 (* 2 (* u r u v v)) (* 2 (* r u r v v)) (* 2 (* u u r v v)) (* 2 (* r r u v v)) ?x732 ?x733 ?x717 ?x824 ?x825 ?x758 ?x765 (* 2 (* u r r v v)) (* 2 (* r u u v v)) ?x808)))
 (let (($x203 (= ?x198 0)))
 (let (($x306 (and $x203 (or (not (= (* ?x553 ?x198) 0)) (not (= (* ?x211 ?x198) 0))))))
 (let ((?x595 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x519 (* (- 1) v)))
 (let ((?x521 (+ r ?x519)))
 (let ((?x514 (+ 2 v)))
 (let (($x601 (= (* (+ (* ?x521 ?x521 ?x521) (* ?x514 ?x514 ?x521 ?x521 ?x521 u)) ?x595) 0)))
 (let ((?x653 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x399 (+ 2 u)))
 (let ((?x84 (* ?x71 ?x71 ?x71)))
 (let (($x778 (not (= (* (+ ?x84 (* ?x399 ?x71 ?x71 ?x71 v v)) ?x653) 0))))
 (let (($x481 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) (or $x778 (not $x601)))))
 (rewrite (= $x481 $x306)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((r Int) (u Int) (v Int) )(! (let ((?x75 (+ u 2)))
 (let ((?x71 (+ r u)))
 (let ((?x84 (* ?x71 ?x71 ?x71)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 ?x75))))
 (let ((?x87 (* (- (+ (- (+ (- ?x77 ?x38) ?x41) (* ?x75 ?x75)) ?x45 ?x46) ?x48) (+ ?x84 (* ?x71 ?x71 ?x71 ?x75 v v)))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x68 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (+ (* ?x52 ?x52 ?x52) (* ?x52 ?x52 ?x52 u ?x57 ?x57)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x68 0)) (not (= ?x87 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x425 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x595 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x519 (* (- 1) v)))
 (let ((?x521 (+ r ?x519)))
 (let ((?x514 (+ 2 v)))
 (let (($x601 (= (* (+ (* ?x521 ?x521 ?x521) (* ?x514 ?x514 ?x521 ?x521 ?x521 u)) ?x595) 0)))
 (let ((?x45 (* v v)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x653 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x399 (+ 2 u)))
 (let ((?x84 (* ?x71 ?x71 ?x71)))
 (let (($x778 (not (= (* (+ ?x84 (* ?x399 ?x71 ?x71 ?x71 v v)) ?x653) 0))))
 (let (($x481 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) (or $x778 (not $x601)))))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x82 (+ (- (+ (- ?x77 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x87 (* (- ?x82 ?x48) (+ ?x84 (* ?x71 ?x71 ?x71 (+ u 2) v v)))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x68 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (+ (* ?x52 ?x52 ?x52) (* ?x52 ?x52 ?x52 u ?x57 ?x57)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x91 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x68 0)) (not (= ?x87 0))))))
 (rewrite (= $x91 $x481))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x593 (mp (mp @x93 (quant-intro (proof-bind ?x425) (= $x92 $x776)) $x776) (rewrite (= $x776 $x776)) $x776)))
 (let ((@x586 (mp (mp @x593 (quant-intro (proof-bind ?x139) (= $x776 $x692)) $x692) (quant-intro (proof-bind ?x112) (= $x692 $x737)) $x737)))
 (let ((@x768 (mp (mp~ @x586 (sk (~ $x737 $x296)) $x296) (rewrite (= $x296 $x599)) $x599)))
 (let ((@x558 (and-elim @x768 $x418)))
 (let ((@x630 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x418) $x237)) @x558 $x237)))
 (let (($x441 (<= ?x639 0)))
 (let ((@x775 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x418) $x441)) @x558 $x441)))
 (let (($x351 (not (<= ?x583 0))))
 (let (($x627 (>= ?x583 0)))
 (let (($x511 (>= ?x207 0)))
 (let (($x344 (<= ?x207 0)))
 (let ((@x746 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x218 (not $x344) (not $x511))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x344)) @x775 @x630 false) $x344) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x511)) @x775 @x630 false) $x511) $x218)))
 (let ((@x744 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x109 $x351 (not $x627))) (unit-resolution (and-elim @x768 $x118) @x746 $x787) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x627)) @x775 @x630 false) $x627) $x351)))
 ((_ th-lemma arith farkas 1 1 1) @x744 @x775 @x630 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        39
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             304
 :arith-nonlinear-bounds    22
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.65
 :memory                    3.18
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1091042
 :num-checks                1
 :propagations              14
 :rlimit-count              4809
 :time                      0.01
 :total-time                0.01)
