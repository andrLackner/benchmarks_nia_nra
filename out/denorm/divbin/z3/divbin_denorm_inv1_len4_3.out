unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x65 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x65)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x491 (to_real r!1)))
 (let ((?x506 (to_real x!0)))
 (let ((?x411 (to_real b!2)))
 (let ((?x565 (* ?x411 ?x506)))
 (let ((?x137 (+ ?x565 ?x491 ?x156 ?x142)))
 (let (($x333 (= ?x137 0.0)))
 (let (($x437 (not $x333)))
 (let ((?x544 (* 12.0 (* ?x506 ?x506))))
 (let ((?x564 (* ?x411 ?x491)))
 (let ((?x563 (* (- (/ 1.0 2.0)) (* ?x411 ?x411))))
 (let ((?x539 (* (- 1.0) (* ?x491 ?x491))))
 (let ((?x559 (* 8.0 (* ?x506 ?x506 ?x506))))
 (let ((?x538 (* 6.0 ?x506)))
 (let ((?x552 (* (- 1.0) ?x491)))
 (let ((?x622 (* (/ 1.0 2.0) ?x411)))
 (let ((?x185 (+ 1.0 (* (- 2.0) (* ?x491 ?x506)) ?x622 ?x552 ?x538 ?x559 ?x539 ?x563 ?x564 ?x565 ?x544)))
 (let (($x120 (= (* ?x185 (+ ?x142 ?x156 ?x491 ?x565)) 0.0)))
 (let (($x99 (not $x120)))
 (let ((?x355 (+ (* (/ 1.0 4.0) (* ?x65 ?x411 ?x411)) (* ?x151 ?x152 ?x491 ?x491) (* (- 1.0) (* ?x411 ?x491 ?x491 ?x506)) (* 8.0 (* ?x411 ?x506 ?x506 ?x506 ?x506)) (* (- 1.0) (* ?x491 ?x491 ?x491)) (* ?x65 ?x491 ?x491) (* (/ 1.0 4.0) (* ?x151 ?x152 ?x411 ?x411)) (* 8.0 (* ?x491 ?x506 ?x506 ?x506)) (* (- 8.0) (* ?x65 ?x506 ?x506 ?x506)) (* (- 8.0) (* ?x151 ?x152 ?x506 ?x506 ?x506)) (* (- 2.0) (* ?x411 ?x491 ?x506 ?x506)) (* (- 2.0) (* ?x491 ?x491 ?x506)) (* 2.0 (* ?x65 ?x491 ?x506)) (* 2.0 (* ?x151 ?x152 ?x491 ?x506)) (* (- (/ 1.0 4.0)) (* ?x411 ?x411 ?x411 ?x506)) (* (- (/ 1.0 4.0)) (* ?x411 ?x411 ?x491)))))
 (let (($x356 (= ?x355 0.0)))
 (let (($x172 (<= ?x355 0.0)))
 (let ((?x93 (* b00 x00)))
 (let ((?x176 (+ r00 ?x93 (* (- 1) r!1) (* (- 1) (* b!2 x!0)))))
 (let (($x420 (>= ?x176 0)))
 (let (($x320 (= 0 ?x176)))
 (let ((@x518 (symm (commutativity (= $x320 (= ?x176 0))) (= (= ?x176 0) $x320))))
 (let (($x440 (= ?x176 0)))
 (let (($x279 (or (not $x356) $x99)))
 (let (($x556 (and $x440 $x279)))
 (let ((?x568 (+ 1.0 ?x622 ?x538 ?x552 ?x539 ?x563 ?x559 (* (- 2.0) (* ?x506 ?x491)) ?x564 ?x565 ?x544)))
 (let ((?x170 (* ?x491 ?x491 ?x491)))
 (let ((?x283 (+ (* 2.0 (* ?x506 ?x491 ?x491)) (* (- 2.0) (* ?x506 ?x491 ?x65)) (* (- 2.0) (* ?x506 ?x491 ?x151 ?x152)) (* 2.0 (* ?x411 ?x506 ?x506 ?x491)) ?x170 (* (- 1.0) (* ?x491 ?x491 ?x65)) (* (- 1.0) (* ?x491 ?x491 ?x151 ?x152)) (* ?x411 ?x506 ?x491 ?x491) (* (/ 1.0 4.0) (* ?x411 ?x411 ?x491)) (* (- (/ 1.0 4.0)) (* ?x411 ?x411 ?x65)) (* (- (/ 1.0 4.0)) (* ?x411 ?x411 ?x151 ?x152)) (* (/ 1.0 4.0) (* ?x411 ?x411 ?x411 ?x506)) (* (- 8.0) (* ?x506 ?x506 ?x506 ?x491)) (* 8.0 (* ?x506 ?x506 ?x506 ?x65)) (* 8.0 (* ?x506 ?x506 ?x506 ?x151 ?x152)) (* (- 8.0) (* ?x411 ?x506 ?x506 ?x506 ?x506)))))
 (let (($x577 (or (not (= ?x283 0.0)) (not (= (* ?x568 (+ ?x491 ?x142 ?x156 ?x565)) 0.0)))))
 (let (($x578 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x93)) 0) $x577)))
 (let (($x143 (exists ((b Int) (r Int) (x Int) )(! (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x587 (* ?x40 ?x43)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x65 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x65)))
 (let ((?x61 (to_real r)))
 (let ((?x621 (* 12.0 (* ?x43 ?x43))))
 (let ((?x468 (* ?x40 ?x61)))
 (let ((?x307 (* (- 2.0) (* ?x43 ?x61))))
 (let ((?x280 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x229 (* ?x40 ?x40)))
 (let ((?x526 (* (- (/ 1.0 2.0)) ?x229)))
 (let ((?x220 (* (- 1.0) (* ?x61 ?x61))))
 (let ((?x603 (* 6.0 ?x43)))
 (let ((?x324 (+ 1.0 (* (/ 1.0 2.0) ?x40) ?x603 (* (- 1.0) ?x61) ?x220 ?x526 ?x280 ?x307 ?x468 ?x587 ?x621)))
 (let ((?x383 (+ (* 2.0 (* ?x43 ?x61 ?x61)) (* (- 2.0) (* ?x43 ?x61 ?x65)) (* (- 2.0) (* ?x43 ?x61 ?x151 ?x152)) (* 2.0 (* ?x40 ?x43 ?x43 ?x61)) (* ?x61 ?x61 ?x61) (* (- 1.0) (* ?x61 ?x61 ?x65)) (* (- 1.0) (* ?x61 ?x61 ?x151 ?x152)) (* ?x40 ?x43 ?x61 ?x61) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x65)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x151 ?x152)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x61)) (* 8.0 (* ?x43 ?x43 ?x43 ?x65)) (* 8.0 (* ?x43 ?x43 ?x43 ?x151 ?x152)) (* (- 8.0) (* ?x40 ?x43 ?x43 ?x43 ?x43)))))
 (let (($x376 (not (= ?x383 0.0))))
 (let (($x129 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x129 (or $x376 (not (= (* ?x324 (+ ?x61 ?x142 ?x156 ?x587)) 0.0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x146 (exists ((b Int) (r Int) (x Int) )(! (let ((?x65 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x65)))
 (let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x61 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x269 (+ ?x156 ?x61 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x389 (+ 1.0 ?x282)))
 (let ((?x229 (* ?x40 ?x40)))
 (let ((?x248 (* (- (/ 1.0 4.0)) ?x229)))
 (let ((?x101 (+ (* (- 1.0) (* ?x389 (+ ?x61 ?x178))) (* (- 1.0) (* (+ ?x61 ?x178) (+ ?x61 ?x178))) ?x248 (* ?x389 ?x389 ?x389))))
 (let ((?x280 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x220 (* (- 1.0) (* ?x61 ?x61))))
 (let ((?x307 (* (- 2.0) (* ?x43 ?x61))))
 (let (($x540 (= (* (+ ?x307 ?x220 ?x248 ?x280) (+ ?x156 ?x61 ?x142 (* ?x43 ?x40))) 0.0)))
 (let (($x116 (or (not $x540) (not (= (* ?x101 ?x269) 0.0)))))
 (let (($x410 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x410 $x116))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x473 (lambda ((b Int) (r Int) (x Int) )(let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x587 (* ?x40 ?x43)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x65 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x65)))
 (let ((?x61 (to_real r)))
 (let ((?x621 (* 12.0 (* ?x43 ?x43))))
 (let ((?x468 (* ?x40 ?x61)))
 (let ((?x307 (* (- 2.0) (* ?x43 ?x61))))
 (let ((?x280 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x229 (* ?x40 ?x40)))
 (let ((?x526 (* (- (/ 1.0 2.0)) ?x229)))
 (let ((?x220 (* (- 1.0) (* ?x61 ?x61))))
 (let ((?x603 (* 6.0 ?x43)))
 (let ((?x324 (+ 1.0 (* (/ 1.0 2.0) ?x40) ?x603 (* (- 1.0) ?x61) ?x220 ?x526 ?x280 ?x307 ?x468 ?x587 ?x621)))
 (let ((?x383 (+ (* 2.0 (* ?x43 ?x61 ?x61)) (* (- 2.0) (* ?x43 ?x61 ?x65)) (* (- 2.0) (* ?x43 ?x61 ?x151 ?x152)) (* 2.0 (* ?x40 ?x43 ?x43 ?x61)) (* ?x61 ?x61 ?x61) (* (- 1.0) (* ?x61 ?x61 ?x65)) (* (- 1.0) (* ?x61 ?x61 ?x151 ?x152)) (* ?x40 ?x43 ?x61 ?x61) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x65)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x151 ?x152)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x61)) (* 8.0 (* ?x43 ?x43 ?x43 ?x65)) (* 8.0 (* ?x43 ?x43 ?x43 ?x151 ?x152)) (* (- 8.0) (* ?x40 ?x43 ?x43 ?x43 ?x43)))))
 (let (($x376 (not (= ?x383 0.0))))
 (let (($x129 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x461 (and $x129 (or $x376 (not (= (* ?x324 (+ ?x61 ?x142 ?x156 ?x587)) 0.0))))))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x269 (+ ?x156 ?x61 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x389 (+ 1.0 ?x282)))
 (let ((?x248 (* (- (/ 1.0 4.0)) ?x229)))
 (let ((?x101 (+ (* (- 1.0) (* ?x389 (+ ?x61 ?x178))) (* (- 1.0) (* (+ ?x61 ?x178) (+ ?x61 ?x178))) ?x248 (* ?x389 ?x389 ?x389))))
 (let (($x540 (= (* (+ ?x307 ?x220 ?x248 ?x280) (+ ?x156 ?x61 ?x142 (* ?x43 ?x40))) 0.0)))
 (let (($x116 (or (not $x540) (not (= (* ?x101 ?x269) 0.0)))))
 (let (($x410 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x90 (and $x410 $x116)))
 (rewrite (= $x90 $x461))))))))))))))))))))))))))))))))))))
 ))
 (let (($x118 (exists ((b Int) (r Int) (x Int) )(! (let ((?x65 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x65)))
 (let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x61 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x269 (+ ?x156 ?x61 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x389 (+ 1.0 ?x282)))
 (let ((?x229 (* ?x40 ?x40)))
 (let ((?x248 (* (- (/ 1.0 4.0)) ?x229)))
 (let ((?x101 (+ (* (- 1.0) (* ?x389 (+ ?x61 ?x178))) (* (- 1.0) (* (+ ?x61 ?x178) (+ ?x61 ?x178))) ?x248 (* ?x389 ?x389 ?x389))))
 (let ((?x280 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x220 (* (- 1.0) (* ?x61 ?x61))))
 (let ((?x307 (* (- 2.0) (* ?x43 ?x61))))
 (let (($x540 (= (* (+ ?x307 ?x220 ?x248 ?x280) (+ ?x156 ?x61 ?x142 (* ?x43 ?x40))) 0.0)))
 (let (($x116 (or (not $x540) (not (= (* ?x101 ?x269) 0.0)))))
 (let (($x234 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x234 $x116))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x610 (lambda ((b Int) (r Int) (x Int) )(let ((?x65 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x65)))
 (let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x61 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x269 (+ ?x156 ?x61 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x389 (+ 1.0 ?x282)))
 (let ((?x229 (* ?x40 ?x40)))
 (let ((?x248 (* (- (/ 1.0 4.0)) ?x229)))
 (let ((?x101 (+ (* (- 1.0) (* ?x389 (+ ?x61 ?x178))) (* (- 1.0) (* (+ ?x61 ?x178) (+ ?x61 ?x178))) ?x248 (* ?x389 ?x389 ?x389))))
 (let ((?x280 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x220 (* (- 1.0) (* ?x61 ?x61))))
 (let ((?x307 (* (- 2.0) (* ?x43 ?x61))))
 (let (($x540 (= (* (+ ?x307 ?x220 ?x248 ?x280) (+ ?x156 ?x61 ?x142 (* ?x43 ?x40))) 0.0)))
 (let (($x116 (or (not $x540) (not (= (* ?x101 ?x269) 0.0)))))
 (let (($x410 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x90 (and $x410 $x116)))
 (let (($x234 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x560 (and $x234 $x116)))
 (rewrite (= $x560 $x90))))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((b Int) (r Int) (x Int) )(! (let ((?x58 (to_real 0)))
 (let ((?x68 (+ (* 2 x) 1)))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x49 (* ?x42 ?x42)))
 (let ((?x75 (- (* (to_real (- 1)) (- (to_real r) ?x42) (to_real ?x68)) (* (- (to_real r) ?x42) (- (to_real r) ?x42)))))
 (let ((?x65 (to_real r00)))
 (let ((?x66 (- (+ (to_real (* (- 1) b00 x00)) (- (to_real r) ?x42)) ?x65)))
 (let ((?x80 (* (+ ?x66 (* ?x42 (to_real ?x68))) (+ (- ?x75 ?x49) (to_real (* ?x68 ?x68 ?x68))))))
 (let ((?x53 (- (- (to_real (* (- 1) r 2 x)) (to_real (* r r))) ?x49)))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x59 (= (* ?x46 (+ ?x53 (to_real (* 2 x 2 x 2 x)))) ?x58)))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not $x59) (not (= ?x80 ?x58)))))))))))))))))) :qid k!28))
 ))
 (let ((?x150 (lambda ((b Int) (r Int) (x Int) )(let ((?x65 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x65)))
 (let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x61 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x269 (+ ?x156 ?x61 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x389 (+ 1.0 ?x282)))
 (let ((?x229 (* ?x40 ?x40)))
 (let ((?x248 (* (- (/ 1.0 4.0)) ?x229)))
 (let ((?x101 (+ (* (- 1.0) (* ?x389 (+ ?x61 ?x178))) (* (- 1.0) (* (+ ?x61 ?x178) (+ ?x61 ?x178))) ?x248 (* ?x389 ?x389 ?x389))))
 (let ((?x280 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x220 (* (- 1.0) (* ?x61 ?x61))))
 (let ((?x307 (* (- 2.0) (* ?x43 ?x61))))
 (let (($x540 (= (* (+ ?x307 ?x220 ?x248 ?x280) (+ ?x156 ?x61 ?x142 (* ?x43 ?x40))) 0.0)))
 (let (($x116 (or (not $x540) (not (= (* ?x101 ?x269) 0.0)))))
 (let (($x234 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x560 (and $x234 $x116)))
 (let ((?x58 (to_real 0)))
 (let ((?x68 (+ (* 2 x) 1)))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x49 (* ?x42 ?x42)))
 (let ((?x75 (- (* (to_real (- 1)) (- ?x61 ?x42) (to_real ?x68)) (* (- ?x61 ?x42) (- ?x61 ?x42)))))
 (let ((?x71 (+ (- (+ (to_real (* (- 1) b00 x00)) (- ?x61 ?x42)) ?x65) (* ?x42 (to_real ?x68)))))
 (let (($x82 (not (= (* ?x71 (+ (- ?x75 ?x49) (to_real (* ?x68 ?x68 ?x68)))) ?x58))))
 (let ((?x53 (- (- (to_real (* (- 1) r 2 x)) (to_real (* r r))) ?x49)))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x59 (= (* ?x46 (+ ?x53 (to_real (* 2 x 2 x 2 x)))) ?x58)))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x84 (and $x38 (or (not $x59) $x82))))
 (rewrite (= $x84 $x560)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x429 (mp (mp @x86 (quant-intro (proof-bind ?x150) (= $x85 $x118)) $x118) (rewrite (= $x118 $x118)) $x118)))
 (let ((@x455 (mp (mp @x429 (quant-intro (proof-bind ?x610) (= $x118 $x146)) $x146) (quant-intro (proof-bind ?x473) (= $x146 $x143)) $x143)))
 (let ((@x107 (mp (mp~ @x455 (sk (~ $x143 $x578)) $x578) (rewrite (= $x578 $x556)) $x556)))
 (let ((@x454 (mp (and-elim @x107 $x440) @x518 $x320)))
 (let ((@x490 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x320) $x420)) @x454 $x420)))
 (let (($x382 (<= ?x176 0)))
 (let ((@x462 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x320) $x382)) @x454 $x382)))
 (let ((@x477 (unit-resolution ((_ th-lemma arith) (or (not $x382) (not $x420) $x172)) @x462 @x490 (hypothesis (not $x172)) false)))
 (let (($x174 (>= ?x355 0.0)))
 (let ((@x502 (unit-resolution ((_ th-lemma arith) (or (not $x382) (not $x420) $x174)) @x462 @x490 (hypothesis (not $x174)) false)))
 (let ((@x520 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x356 (not $x172) (not $x174))) (lemma @x502 $x174) (or $x356 (not $x172)))))
 (let ((@x522 (unit-resolution (and-elim @x107 $x279) (unit-resolution @x520 (lemma @x477 $x172) $x356) $x99)))
 (let ((@x533 (unit-resolution ((_ th-lemma arith) (or $x437 $x120)) @x522 (hypothesis $x333) false)))
 (let (($x366 (<= ?x137 0.0)))
 (let ((?x88 (to_real ?x93)))
 (let ((?x106 (+ ?x88 ?x156)))
 (let (($x512 (<= ?x106 0.0)))
 (let ((@x493 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x106 0.0)) $x512)) ((_ th-lemma arith) (= ?x106 0.0)) $x512)))
 (let ((?x555 (* b!2 x!0)))
 (let ((?x291 (to_real ?x555)))
 (let ((?x482 (+ (* (- 1.0) ?x565) ?x291)))
 (let (($x398 (>= ?x482 0.0)))
 (let (($x530 (= 0.0 ?x482)))
 (let ((@x216 (symm (commutativity (= $x530 (= ?x482 0.0))) (= (= ?x482 0.0) $x530))))
 (let ((@x595 (unit-resolution (hypothesis (not $x530)) (mp ((_ th-lemma arith) (= ?x482 0.0)) @x216 $x530) false)))
 (let ((@x515 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x530) $x398)) (lemma @x595 $x530) $x398)))
 (let (($x117 (>= ?x137 0.0)))
 (let ((?x157 (+ ?x565 (* (- 1.0) ?x291))))
 (let (($x469 (>= ?x157 0.0)))
 (let ((@x271 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x157 0.0)) $x469)) ((_ th-lemma arith) (= ?x157 0.0)) $x469)))
 (let ((?x97 (+ (* (- 1.0) ?x88) ?x153)))
 (let (($x259 (<= ?x97 0.0)))
 (let ((@x102 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x97 0.0)) $x259)) ((_ th-lemma arith) (= ?x97 0.0)) $x259)))
 (let ((@x171 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x333 (not $x366) (not $x117))) (lemma ((_ th-lemma arith) (hypothesis (not $x117)) @x462 @x102 @x271 false) $x117) (lemma ((_ th-lemma arith) @x515 (hypothesis (not $x366)) @x493 @x490 false) $x366) $x333)))
 (unit-resolution @x171 (lemma @x533 $x437) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      25
 :arith-eq-adapter               32
 :arith-bound-propagations-cheap 39
 :arith-bound-propagations-lp    11
 :arith-conflicts                91
 :arith-diseq                    32
 :arith-fixed-eqs                1
 :arith-gcd-calls                6
 :arith-grobner-calls            5
 :arith-grobner-conflicts        2
 :arith-horner-calls             5
 :arith-lower                    80
 :arith-make-feasible            56
 :arith-max-columns              63
 :arith-max-rows                 18
 :arith-nla-explanations         79
 :arith-nla-lemmas               87
 :arith-patches                  6
 :arith-patches-success          6
 :arith-propagations             39
 :arith-upper                    74
 :conflicts                      12
 :decisions                      77
 :del-clause                     121
 :final-checks                   36
 :max-memory                     4.05
 :memory                         3.14
 :minimized-lits                 1
 :mk-bool-var                    195
 :mk-clause                      182
 :num-allocs                     1620394
 :num-checks                     1
 :propagations                   101
 :rlimit-count                   5440
 :time                           0.01
 :total-time                     0.02)
