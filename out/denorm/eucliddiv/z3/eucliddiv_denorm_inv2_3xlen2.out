unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x72 (* y00 q00)))
 (let ((?x452 (+ r00 ?x72 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x165 (>= ?x452 0)))
 (let (($x451 (= ?x452 0)))
 (let ((?x398 (* y00 y00 y00 y00)))
 (let ((?x632 (* (- 2) ?x398)))
 (let ((?x245 (+ (* (- 1) (* y00 y00 y00 y00 q!2 q!2)) (* (- 2) (* y00 y00 y00 y00 q!2)) (* (- 2) (* y00 y00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 r!1 r!1 q!2 q!2)) (* 2 (* y00 y00 y00 r!1 q!2 q!2)) (* (- 1) (* y00 y00 r!1 r!1)) ?x632 (* 3 (* y00 y00 y00 r!1)) (* 4 (* y00 y00 y00 r!1 q!2)))))
 (let ((?x237 (* (- 1) (* y00 y00 y00))))
 (let ((?x187 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x475 (+ ?x187 ?x237 (* y00 y00 r!1 r!1 r!1) (* (- 3) (* y00 y00 y00 q!2)) (* (- 3) (* y00 y00 y00 q!2 q!2)) (* (- 1) (* y00 y00 y00 q!2 q!2 q!2)) (* (- 3) (* y00 y00 y00 r!1 r!1)) (* 3 (* y00 y00 y00 y00 r!1)) (* y00 y00 r!1) (* 3 (* y00 y00 r!1 q!2)) (* y00 y00 r!1 q!2 q!2 q!2) (* 3 (* y00 y00 r!1 q!2 q!2)))))
 (let ((?x136 (* r!1 r!1)))
 (let ((?x432 (+ ?x136 (* (- 2) (* y00 r!1)) (* y00 y00 q!2) (* (- 2) (* y00 r!1 q!2)) (* r!1 r!1 q!2))))
 (let ((?x235 (* ?x432 ?x475 ?x245 (+ (* (- 1) r00) (* (- 1) ?x72) (* y00 q!2) r!1))))
 (let (($x611 (= ?x235 0)))
 (let (($x215 (not $x611)))
 (let (($x618 (and (= (+ y00 (* (- 1) y!0)) 0) $x451 $x215)))
 (let ((?x82 (* (- 1) ?x72)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x127 (+ r!1 ?x68 (* q!2 y00) ?x82)))
 (let ((?x283 (+ (* (- 1) (* r!1 r!1 y00 y00)) (* (- 2) (* q!2 r!1 r!1 y00 y00)) (* (- 1) (* q!2 q!2 r!1 r!1 y00 y00)) (* 3 (* r!1 y00 y00 y00)) ?x632 (* 4 (* q!2 r!1 y00 y00 y00)) (* 2 (* q!2 q!2 r!1 y00 y00 y00)) (* (- 2) (* q!2 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00)))))
 (let ((?x226 (+ (* r!1 r!1 r!1 y00 y00) (* (- 3) (* r!1 r!1 y00 y00 y00)) (* 3 (* r!1 y00 y00 y00 y00)) ?x187 (* r!1 y00 y00) (* 3 (* q!2 r!1 y00 y00)) (* 3 (* q!2 q!2 r!1 y00 y00)) (* q!2 q!2 q!2 r!1 y00 y00) ?x237 (* (- 3) (* q!2 y00 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00 y00)) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00)))))
 (let ((?x347 (+ ?x136 (* q!2 r!1 r!1) (* (- 2) (* r!1 y00)) (* (- 2) (* q!2 r!1 y00)) (* q!2 y00 y00))))
 (let (($x97 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x127 0) (not (= (* ?x347 ?x226 ?x283 ?x127) 0)))))
 (let (($x116 (exists ((q Int) (r Int) (y Int) )(! (let ((?x72 (* y00 q00)))
 (let ((?x82 (* (- 1) ?x72)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x96 (+ r ?x68 ?x39 ?x82)))
 (let ((?x398 (* y00 y00 y00 y00)))
 (let ((?x632 (* (- 2) ?x398)))
 (let ((?x358 (* (- 1) (* q q r r y00 y00))))
 (let ((?x352 (* (- 1) (* r r y00 y00))))
 (let ((?x633 (+ ?x352 (* (- 2) (* q r r y00 y00)) ?x358 (* 3 (* r y00 y00 y00)) ?x632 (* 4 (* q r y00 y00 y00)) (* 2 (* q q r y00 y00 y00)) (* (- 2) (* q y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00)))))
 (let ((?x237 (* (- 1) (* y00 y00 y00))))
 (let ((?x187 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x277 (+ (* r r r y00 y00) (* (- 3) (* r r y00 y00 y00)) (* 3 (* r y00 y00 y00 y00)) ?x187 (* r y00 y00) (* 3 (* q r y00 y00)) (* 3 (* q q r y00 y00)) (* q q q r y00 y00) ?x237 (* (- 3) (* q y00 y00 y00)) (* (- 3) (* q q y00 y00 y00)) (* (- 1) (* q q q y00 y00 y00)))))
 (let ((?x343 (+ (* r r) (* q r r) (* (- 2) (* r y00)) (* (- 2) (* q r y00)) (* q y00 y00))))
 (let (($x101 (= ?x96 0)))
 (let (($x78 (= (+ y (* (- 1) y00)) 0)))
 (and $x78 $x101 (not (= (* ?x343 ?x277 ?x633 ?x96) 0))))))))))))))))))) :qid k!29))
 ))
 (let (($x174 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x181 (+ r ?x67)))
 (let ((?x198 (+ 1 q)))
 (let ((?x262 (+ (* (- 1) (* y00 y00 ?x198 ?x198 ?x181 ?x181)) (* y00 y00 y00 ?x181))))
 (let ((?x247 (+ (* y00 y00 ?x181 ?x181 ?x181) (* y00 y00 ?x198 ?x198 ?x198 ?x181))))
 (let ((?x259 (* (+ (* ?x198 ?x181 ?x181) (* (- 1) (* y00 y00))) ?x247 ?x262 (+ r ?x67 ?x68 ?x144 (* y00 ?x198)))))
 (let (($x157 (not (= ?x259 0))))
 (let (($x179 (= (+ r ?x68 ?x144 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x179 $x157)))))))))))) :qid k!29))
 ))
 (let ((?x70 (lambda ((q Int) (r Int) (y Int) )(let ((?x72 (* y00 q00)))
 (let ((?x82 (* (- 1) ?x72)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x96 (+ r ?x68 ?x39 ?x82)))
 (let ((?x398 (* y00 y00 y00 y00)))
 (let ((?x632 (* (- 2) ?x398)))
 (let ((?x358 (* (- 1) (* q q r r y00 y00))))
 (let ((?x352 (* (- 1) (* r r y00 y00))))
 (let ((?x633 (+ ?x352 (* (- 2) (* q r r y00 y00)) ?x358 (* 3 (* r y00 y00 y00)) ?x632 (* 4 (* q r y00 y00 y00)) (* 2 (* q q r y00 y00 y00)) (* (- 2) (* q y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00)))))
 (let ((?x237 (* (- 1) (* y00 y00 y00))))
 (let ((?x187 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x277 (+ (* r r r y00 y00) (* (- 3) (* r r y00 y00 y00)) (* 3 (* r y00 y00 y00 y00)) ?x187 (* r y00 y00) (* 3 (* q r y00 y00)) (* 3 (* q q r y00 y00)) (* q q q r y00 y00) ?x237 (* (- 3) (* q y00 y00 y00)) (* (- 3) (* q q y00 y00 y00)) (* (- 1) (* q q q y00 y00 y00)))))
 (let ((?x343 (+ (* r r) (* q r r) (* (- 2) (* r y00)) (* (- 2) (* q r y00)) (* q y00 y00))))
 (let (($x101 (= ?x96 0)))
 (let (($x78 (= (+ y (* (- 1) y00)) 0)))
 (let (($x641 (and $x78 $x101 (not (= (* ?x343 ?x277 ?x633 ?x96) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x181 (+ r ?x67)))
 (let ((?x198 (+ 1 q)))
 (let ((?x262 (+ (* (- 1) (* y00 y00 ?x198 ?x198 ?x181 ?x181)) (* y00 y00 y00 ?x181))))
 (let ((?x247 (+ (* y00 y00 ?x181 ?x181 ?x181) (* y00 y00 ?x198 ?x198 ?x198 ?x181))))
 (let ((?x259 (* (+ (* ?x198 ?x181 ?x181) (* (- 1) (* y00 y00))) ?x247 ?x262 (+ r ?x67 ?x68 ?x144 (* y00 ?x198)))))
 (let (($x157 (not (= ?x259 0))))
 (let (($x179 (= (+ r ?x68 ?x144 (* y00 q)) 0)))
 (let (($x167 (and (= (+ y00 (* (- 1) y)) 0) $x179 $x157)))
 (rewrite (= $x167 $x641)))))))))))))))))))))))))))))))
 ))
 (let (($x158 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x181 (+ r ?x67)))
 (let ((?x198 (+ 1 q)))
 (let ((?x262 (+ (* (- 1) (* y00 y00 ?x198 ?x198 ?x181 ?x181)) (* y00 y00 y00 ?x181))))
 (let ((?x247 (+ (* y00 y00 ?x181 ?x181 ?x181) (* y00 y00 ?x198 ?x198 ?x198 ?x181))))
 (let ((?x259 (* (+ (* ?x198 ?x181 ?x181) (* (- 1) (* y00 y00))) ?x247 ?x262 (+ r ?x67 ?x68 ?x144 (* y00 ?x198)))))
 (let (($x157 (not (= ?x259 0))))
 (let (($x179 (= (+ r ?x68 ?x144 (* y00 q)) 0)))
 (and (= (+ ?x67 y) 0) $x179 $x157)))))))))))) :qid k!29))
 ))
 (let ((?x177 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x181 (+ r ?x67)))
 (let ((?x198 (+ 1 q)))
 (let ((?x262 (+ (* (- 1) (* y00 y00 ?x198 ?x198 ?x181 ?x181)) (* y00 y00 y00 ?x181))))
 (let ((?x247 (+ (* y00 y00 ?x181 ?x181 ?x181) (* y00 y00 ?x198 ?x198 ?x198 ?x181))))
 (let ((?x259 (* (+ (* ?x198 ?x181 ?x181) (* (- 1) (* y00 y00))) ?x247 ?x262 (+ r ?x67 ?x68 ?x144 (* y00 ?x198)))))
 (let (($x157 (not (= ?x259 0))))
 (let (($x179 (= (+ r ?x68 ?x144 (* y00 q)) 0)))
 (let (($x167 (and (= (+ y00 (* (- 1) y)) 0) $x179 $x157)))
 (let (($x176 (and (= (+ ?x67 y) 0) $x179 $x157)))
 (rewrite (= $x176 $x167))))))))))))))))
 ))
 (let (($x62 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x28 (- 1)))
 (let ((?x56 (+ (* ?x28 ?x45 ?x45 ?x42 ?x42 y00 y00) (* ?x42 y00 y00 y00))))
 (let ((?x50 (+ (* ?x42 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x45 ?x42 y00 y00))))
 (let ((?x57 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x50 (- (* ?x45 ?x42 ?x42) (* y00 y00)) ?x56)))
 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x57 0)))))))))) :qid k!29))
 ))
 (let ((?x162 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x144 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x181 (+ r ?x67)))
 (let ((?x198 (+ 1 q)))
 (let ((?x262 (+ (* (- 1) (* y00 y00 ?x198 ?x198 ?x181 ?x181)) (* y00 y00 y00 ?x181))))
 (let ((?x247 (+ (* y00 y00 ?x181 ?x181 ?x181) (* y00 y00 ?x198 ?x198 ?x198 ?x181))))
 (let ((?x259 (* (+ (* ?x198 ?x181 ?x181) (* (- 1) (* y00 y00))) ?x247 ?x262 (+ r ?x67 ?x68 ?x144 (* y00 ?x198)))))
 (let (($x157 (not (= ?x259 0))))
 (let (($x179 (= (+ r ?x68 ?x144 (* y00 q)) 0)))
 (let (($x176 (and (= (+ ?x67 y) 0) $x179 $x157)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x28 (- 1)))
 (let ((?x56 (+ (* ?x28 ?x45 ?x45 ?x42 ?x42 y00 y00) (* ?x42 y00 y00 y00))))
 (let ((?x50 (+ (* ?x42 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x45 ?x42 y00 y00))))
 (let ((?x57 (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x50 (- (* ?x45 ?x42 ?x42) (* y00 y00)) ?x56)))
 (let (($x61 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x57 0))))))
 (rewrite (= $x61 $x176))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x172 (mp (mp @x63 (quant-intro (proof-bind ?x162) (= $x62 $x158)) $x158) (rewrite (= $x158 $x158)) $x158)))
 (let ((@x492 (mp (mp @x172 (quant-intro (proof-bind ?x177) (= $x158 $x174)) $x174) (quant-intro (proof-bind ?x70) (= $x174 $x116)) $x116)))
 (let ((@x510 (mp (mp~ @x492 (sk (~ $x116 $x97)) $x97) (rewrite (= $x97 $x618)) $x618)))
 (let ((@x138 (and-elim @x510 $x451)))
 (let ((@x230 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x451) $x165)) @x138 $x165)))
 (let (($x145 (<= ?x452 0)))
 (let ((@x150 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x451) $x145)) @x138 $x145)))
 (let (($x123 (not (<= ?x235 0))))
 (let (($x248 (>= ?x235 0)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x611 $x123 (not $x248))) (and-elim @x510 $x215) (or $x123 (not $x248)))))
 (let ((@x103 (unit-resolution @x295 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x248)) @x150 @x230 false) $x248) $x123)))
 ((_ th-lemma arith farkas 1 1 1) @x103 @x150 @x230 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             146
 :arith-nonlinear-bounds    10
 :arith-num-rows            6
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    6
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.62
 :memory                    3.14
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1104497
 :num-checks                1
 :propagations              6
 :rlimit-count              2998
 :time                      0.01
 :total-time                0.01)
