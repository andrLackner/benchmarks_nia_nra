unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x620 (+ m!1 (* (- 6) n!0))))
 (let (($x222 (<= ?x620 6)))
 (let (($x216 (= ?x620 6)))
 (let ((?x274 (+ k!2 m!1)))
 (let ((?x91 (+ 6 m!1)))
 (let ((?x492 (+ 1 n!0)))
 (let ((?x270 (+ c!3 k!2)))
 (let ((?x856 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 k!2)))
 (let ((?x648 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 m!1)))
 (let ((?x636 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 n!0)))
 (let ((?x501 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 m!1)))
 (let ((?x475 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 n!0)))
 (let ((?x450 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 k!2)))
 (let ((?x426 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 m!1)))
 (let ((?x422 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 k!2)))
 (let ((?x386 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 n!0 n!0)))
 (let ((?x383 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 n!0 n!0)))
 (let ((?x345 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 n!0 n!0)))
 (let ((?x329 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 n!0)))
 (let ((?x323 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270)))
 (let ((?x320 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274)))
 (let ((?x311 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270 k!2)))
 (let ((?x293 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 m!1)))
 (let ((?x190 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x492 ?x492 ?x91 ?x91 ?x91 ?x270 ?x270)))
 (let ((?x175 (* ?x492 ?x492 ?x492 ?x91 ?x274 ?x274 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 n!0)))
 (let ((?x171 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274 n!0 n!0)))
 (let ((?x160 (* ?x492 ?x492 ?x492 ?x91 ?x91 ?x274 ?x274 ?x270 ?x270 ?x270 ?x492 ?x91 ?x91 ?x91 ?x274 ?x274 ?x274)))
 (let ((?x309 (+ (* 7 ?x160) (* 3 ?x171) (* (- 9) ?x175) (* 7 ?x190) (* (- 1) ?x293) ?x311 (* (- 7) ?x320) (* (- 7) ?x323) (* (- 9) ?x329) (* 3 ?x345) (* (- 3) ?x383) (* (- 3) ?x386) (* (- 1) ?x422) ?x426 (* (- 1) ?x450) (* 9 ?x475) (* (- 1) ?x501) (* 9 ?x636) ?x648 ?x856)))
 (let (($x327 (= ?x309 0)))
 (let (($x331 (not $x327)))
 (let ((?x694 (* (- 3) n!0)))
 (let ((?x256 (* (- 3) (* n!0 n!0))))
 (let ((?x315 (+ k!2 ?x256 ?x694)))
 (let (($x319 (= ?x315 1)))
 (let (($x283 (= (+ (* k!2 n!0) (* (- 3) c!3) (* (- 1) k!2) (* 2 n!0)) (- 1))))
 (let ((?x351 (* (- 9) n!0)))
 (let ((?x116 (* 9 (* c!3 n!0))))
 (let ((?x291 (* 5 k!2)))
 (let ((?x454 (* (- 1) (* k!2 k!2))))
 (let ((?x128 (* 18 c!3)))
 (let (($x236 (and $x216 (= (+ ?x128 ?x454 ?x291 ?x116 ?x351) 4) $x283 $x319 $x331)))
 (let ((?x460 (+ ?x450 (* 7 ?x323) (* (- 7) ?x190) (* 9 ?x329) (* (- 3) ?x345) (* (- 7) ?x160) (* (- 1) ?x426) ?x293 (* (- 9) ?x475) ?x501 (* 3 ?x383) (* 7 ?x320) (* (- 1) ?x856) (* 3 ?x386) (* 9 ?x175) (* (- 1) ?x311) (* (- 9) ?x636) (* (- 3) ?x171) (* (- 1) ?x648) ?x422)))
 (let (($x255 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x647 (and $x216 (= (+ ?x128 ?x291 ?x351 ?x454 ?x116) 4) $x255 (= (+ k!2 ?x694 ?x256) 1) (not (= ?x460 0)))))
 (let (($x294 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x867 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 k)))
 (let ((?x854 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 m)))
 (let ((?x836 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n n)))
 (let ((?x684 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n)))
 (let ((?x660 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 k)))
 (let ((?x645 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n)))
 (let ((?x596 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n n)))
 (let ((?x580 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 k)))
 (let ((?x490 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))
 (let ((?x471 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n n)))
 (let ((?x437 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 m)))
 (let ((?x424 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n)))
 (let ((?x381 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 m)))
 (let ((?x292 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 m)))
 (let ((?x263 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))
 (let ((?x172 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n n)))
 (let ((?x156 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n)))
 (let ((?x127 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75)))
 (let ((?x123 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75)))
 (let ((?x92 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 k)))
 (let ((?x271 (+ ?x92 (* 7 ?x123) (* (- 7) ?x127) (* 9 ?x156) (* (- 3) ?x172) (* (- 7) ?x263) (* (- 1) ?x292) ?x381 (* (- 9) ?x424) ?x437 (* 3 ?x471) (* 7 ?x490) (* (- 1) ?x580) (* 3 ?x596) (* 9 ?x645) (* (- 1) ?x660) (* (- 9) ?x684) (* (- 3) ?x836) (* (- 1) ?x854) ?x867)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= ?x271 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x251 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x305 (* (- 1) k)))
 (let ((?x262 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x305 (* (- 1) m) ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x211 (+ (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 (+ c k) (+ c k)) (* (- 1) (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))))
 (let ((?x75 (+ c k)))
 (let ((?x170 (+ (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75) (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75)))))
 (let (($x299 (not (= (* ?x170 ?x211 ?x262) 0))))
 (let (($x275 (= (+ (* 3 (* n n)) ?x305 ?x65) (- 1))))
 (let (($x573 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x573 $x275 $x299))))))))))))))))))) :qid k!34))
 ))
 (let ((?x223 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x867 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 k)))
 (let ((?x854 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 m)))
 (let ((?x836 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n n)))
 (let ((?x684 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n)))
 (let ((?x660 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 k)))
 (let ((?x645 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n)))
 (let ((?x596 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n n)))
 (let ((?x580 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 k)))
 (let ((?x490 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))
 (let ((?x471 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n n)))
 (let ((?x437 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 m)))
 (let ((?x424 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 n)))
 (let ((?x381 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71 m)))
 (let ((?x292 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 m)))
 (let ((?x263 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))
 (let ((?x172 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n n)))
 (let ((?x156 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 n)))
 (let ((?x127 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75)))
 (let ((?x123 (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75)))
 (let ((?x92 (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75 ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75 k)))
 (let ((?x271 (+ ?x92 (* 7 ?x123) (* (- 7) ?x127) (* 9 ?x156) (* (- 3) ?x172) (* (- 7) ?x263) (* (- 1) ?x292) ?x381 (* (- 9) ?x424) ?x437 (* 3 ?x471) (* 7 ?x490) (* (- 1) ?x580) (* 3 ?x596) (* 9 ?x645) (* (- 1) ?x660) (* (- 9) ?x684) (* (- 3) ?x836) (* (- 1) ?x854) ?x867)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x142 (and $x121 $x205 $x257 $x295 (not (= ?x271 0)))))
 (let ((?x65 (* 3 n)))
 (let ((?x305 (* (- 1) k)))
 (let ((?x211 (+ (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 ?x75 ?x75) (* (- 1) (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))))
 (let ((?x170 (+ (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75) (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75)))))
 (let ((?x98 (* ?x170 ?x211 (+ 4 (* 3 (* ?x303 ?x303)) ?x305 (* (- 1) m) ?x65))))
 (let (($x299 (not (= ?x98 0))))
 (let (($x275 (= (+ (* 3 (* n n)) ?x305 ?x65) (- 1))))
 (let (($x573 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x242 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x573 $x275 $x299)))
 (rewrite (= $x242 $x142)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x301 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x305 (* (- 1) k)))
 (let ((?x262 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x305 (* (- 1) m) ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x211 (+ (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 (+ c k) (+ c k)) (* (- 1) (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))))
 (let ((?x75 (+ c k)))
 (let ((?x170 (+ (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75) (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75)))))
 (let (($x299 (not (= (* ?x170 ?x211 ?x262) 0))))
 (let (($x275 (= (+ (* 3 (* n n)) ?x305 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x109 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x109 (- 4)) (= (+ (* (- 3) c) (* n k) ?x305 (* 2 n)) (- 1)) $x275 $x299)))))))))))))))) :qid k!34))
 ))
 (let ((?x252 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x305 (* (- 1) k)))
 (let ((?x262 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x305 (* (- 1) m) ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x211 (+ (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 (+ c k) (+ c k)) (* (- 1) (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))))
 (let ((?x75 (+ c k)))
 (let ((?x170 (+ (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75) (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75)))))
 (let (($x299 (not (= (* ?x170 ?x211 ?x262) 0))))
 (let (($x275 (= (+ (* 3 (* n n)) ?x305 ?x65) (- 1))))
 (let (($x573 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x242 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x573 $x275 $x299)))
 (let ((?x48 (* 9 n)))
 (let ((?x109 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x302 (and $x121 (= ?x109 (- 4)) (= (+ (* (- 3) c) (* n k) ?x305 (* 2 n)) (- 1)) $x275 $x299)))
 (rewrite (= $x302 $x242)))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x82 (- (* (+ c k) (+ c k) ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68))))
 (let ((?x75 (+ c k)))
 (let ((?x79 (- (* ?x75 ?x71 ?x71 ?x76 ?x68 ?x68 ?x68) (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x79 ?x82)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x286 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x305 (* (- 1) k)))
 (let ((?x262 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x305 (* (- 1) m) ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x211 (+ (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x388 (+ c k) (+ c k)) (* (- 1) (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x71 ?x71)))))
 (let ((?x75 (+ c k)))
 (let ((?x170 (+ (* ?x303 ?x303 ?x303 ?x388 ?x71 ?x71 ?x75) (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75)))))
 (let (($x299 (not (= (* ?x170 ?x211 ?x262) 0))))
 (let (($x275 (= (+ (* 3 (* n n)) ?x305 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x109 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x302 (and $x121 (= ?x109 (- 4)) (= (+ (* (- 3) c) (* n k) ?x305 (* 2 n)) (- 1)) $x275 $x299)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x82 (- (* ?x75 ?x75 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68))))
 (let ((?x79 (- (* ?x75 ?x71 ?x71 ?x76 ?x68 ?x68 ?x68) (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x79 ?x82)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x83 0))))))
 (rewrite (= $x87 $x302)))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x244 (mp (mp @x89 (quant-intro (proof-bind ?x286) (= $x88 $x301)) $x301) (rewrite (= $x301 $x301)) $x301)))
 (let ((@x484 (mp (mp @x244 (quant-intro (proof-bind ?x252) (= $x301 $x251)) $x251) (quant-intro (proof-bind ?x223) (= $x251 $x294)) $x294)))
 (let ((@x317 (mp (mp~ @x484 (sk (~ $x294 $x647)) $x647) (rewrite (= $x647 $x236)) $x236)))
 (let ((@x131 (and-elim @x317 $x216)))
 (let ((@x390 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x216) $x222)) @x131 $x222)))
 (let (($x196 (>= ?x620 6)))
 (let ((@x377 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x216) $x196)) @x131 $x196)))
 (let (($x632 (<= ?x315 1)))
 (let ((@x177 (and-elim @x317 $x319)))
 (let ((@x851 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x319) $x632)) @x177 $x632)))
 (let (($x628 (>= ?x315 1)))
 (let ((@x370 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x319) $x628)) @x177 $x628)))
 (let (($x603 (not (<= ?x309 0))))
 (let (($x630 (>= ?x309 0)))
 (let ((@x638 ((_ th-lemma arith) (hypothesis (not $x630)) @x370 @x851 @x377 @x390 @x377 @x390 false)))
 (let ((@x847 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x327 $x603 (not $x630))) (and-elim @x317 $x331) (or $x603 (not $x630)))))
 ((_ th-lemma arith) (unit-resolution @x847 (lemma @x638 $x630) $x603) @x370 @x851 @x377 @x390 @x377 @x390 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        11
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           7
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             250
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             3
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-row-summations      10
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.98
 :memory                    3.39
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                2307195
 :num-checks                1
 :propagations              10
 :rlimit-count              13144
 :time                      0.03
 :total-time                0.04)
