unsat
((set-logic NRA)
(proof
(let (($x153 (exists ((b Real) (x Real) )(! (let ((?x48 (* 2.0 x)))
 (let ((?x84 (+ 1.0 ?x48)))
 (let ((?x151 (* ?x84 b)))
 (let ((?x154 (* (/ 1.0 2.0) ?x151)))
 (let ((?x140 (* (- (/ 1.0 2.0)) b)))
 (let ((?x176 (* x b)))
 (let ((?x137 (* (- 1.0) ?x176)))
 (let ((?x186 (+ ?x137 ?x140 ?x154)))
 (let ((?x68 (* b00 x00)))
 (let ((?x128 (+ ?x68 r00 ?x137 ?x140)))
 (let ((?x194 (* ?x84 ?x128 ?x128 b)))
 (let ((?x320 (* (/ 1.0 2.0) ?x194)))
 (let ((?x206 (* (/ 1.0 2.0) (* ?x84 ?x84 ?x128 ?x128 ?x128 b))))
 (let ((?x326 (+ ?x206 ?x320)))
 (let ((?x178 (* ?x326 ?x186)))
 (let (($x168 (= ?x178 0.0)))
 (not $x168))))))))))))))))) :qid k!28))
 ))
 (let (($x670 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x671 (lambda ((b Real) (x Real) )(let ((?x48 (* 2.0 x)))
 (let ((?x84 (+ 1.0 ?x48)))
 (let ((?x151 (* ?x84 b)))
 (let ((?x154 (* (/ 1.0 2.0) ?x151)))
 (let ((?x140 (* (- (/ 1.0 2.0)) b)))
 (let ((?x176 (* x b)))
 (let ((?x137 (* (- 1.0) ?x176)))
 (let ((?x186 (+ ?x137 ?x140 ?x154)))
 (let ((?x68 (* b00 x00)))
 (let ((?x128 (+ ?x68 r00 ?x137 ?x140)))
 (let ((?x194 (* ?x84 ?x128 ?x128 b)))
 (let ((?x320 (* (/ 1.0 2.0) ?x194)))
 (let ((?x206 (* (/ 1.0 2.0) (* ?x84 ?x84 ?x128 ?x128 ?x128 b))))
 (let ((?x326 (+ ?x206 ?x320)))
 (let ((?x178 (* ?x326 ?x186)))
 (let (($x168 (= ?x178 0.0)))
 (let (($x169 (not $x168)))
 (let ((?x549 (* x x x b b b)))
 (let ((?x488 (* x x b b b00 x00)))
 (let ((?x491 (* (- 2.0) ?x488)))
 (let ((?x478 (* x b b00 b00 x00 x00)))
 (let ((?x475 (* b b00 b00 x00 x00)))
 (let ((?x594 (* (/ 1.0 2.0) ?x475)))
 (let ((?x455 (* x x b b r00)))
 (let ((?x458 (* (- 2.0) ?x455)))
 (let ((?x445 (* x b b00 x00 r00)))
 (let ((?x446 (* 2.0 ?x445)))
 (let ((?x442 (* b b00 x00 r00)))
 (let ((?x438 (* x b r00 r00)))
 (let ((?x434 (* b r00 r00)))
 (let ((?x589 (* (/ 1.0 2.0) ?x434)))
 (let ((?x422 (* x x b b b)))
 (let ((?x621 (* (/ 3.0 2.0) ?x422)))
 (let ((?x414 (* x b b b00 x00)))
 (let ((?x618 (* (- 2.0) ?x414)))
 (let ((?x404 (* b b b00 x00)))
 (let ((?x407 (* (- (/ 1.0 2.0)) ?x404)))
 (let ((?x394 (* x b b r00)))
 (let ((?x613 (* (- 2.0) ?x394)))
 (let ((?x360 (* b b b)))
 (let ((?x610 (* (/ 1.0 8.0) ?x360)))
 (let ((?x346 (* b b r00)))
 (let ((?x349 (* (- (/ 1.0 2.0)) ?x346)))
 (let ((?x338 (* x b b b)))
 (let ((?x604 (* (/ 3.0 4.0) ?x338)))
 (let ((?x340 (+ ?x140 r00 ?x68 ?x137)))
 (let ((?x222 (* (/ 1.0 2.0) (* ?x84 ?x84 ?x340 ?x340 ?x340 b))))
 (let ((?x633 (+ ?x222 ?x604 ?x349 ?x610 ?x613 ?x407 ?x618 ?x621 ?x589 ?x438 ?x442 ?x446 ?x458 ?x594 ?x478 ?x491 ?x549)))
 (let ((?x656 (* ?x633 0.0)))
 (let ((?x607 (* (/ 1.0 2.0) b)))
 (let ((?x646 (+ ?x607 ?x176)))
 (let ((?x605 (+ ?x607 (* (/ 1.0 2.0) (* 2.0 ?x176)))))
 (let ((@x612 (rewrite (= (+ (* 1.0 b) (* ?x48 b)) (+ b (* 2.0 ?x176))))))
 (let ((@x617 (trans (rewrite (= ?x151 (+ (* 1.0 b) (* ?x48 b)))) @x612 (= ?x151 (+ b (* 2.0 ?x176))))))
 (let ((@x643 (trans (monotonicity @x617 (= ?x154 (* (/ 1.0 2.0) (+ b (* 2.0 ?x176))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x176))) ?x605)) (= ?x154 ?x605))))
 (let ((@x651 (monotonicity (trans @x643 (rewrite (= ?x605 ?x646)) (= ?x154 ?x646)) (= ?x186 (+ ?x137 ?x140 ?x646)))))
 (let ((?x638 (+ ?x604 ?x349 ?x610 ?x613 ?x407 ?x618 ?x621 ?x589 ?x438 ?x442 ?x446 ?x458 ?x594 ?x478 ?x491 ?x549)))
 (let ((?x634 (+ ?x222 ?x638)))
 (let ((?x598 (+ (* (/ 1.0 2.0) (* (/ 3.0 2.0) ?x338)) (* (/ 1.0 2.0) (* (- 1.0) ?x346)) (* (/ 1.0 2.0) (* (/ 1.0 4.0) ?x360)) (* (/ 1.0 2.0) (* (- 4.0) ?x394)) (* (/ 1.0 2.0) (* (- 1.0) ?x404)) (* (/ 1.0 2.0) (* (- 4.0) ?x414)) (* (/ 1.0 2.0) (* 3.0 ?x422)) ?x589 (* (/ 1.0 2.0) (* 2.0 ?x438)) (* (/ 1.0 2.0) (* 2.0 ?x442)) (* (/ 1.0 2.0) (* 4.0 ?x445)) (* (/ 1.0 2.0) (* (- 4.0) ?x455)) ?x594 (* (/ 1.0 2.0) (* 2.0 ?x478)) (* (/ 1.0 2.0) (* (- 4.0) ?x488)) (* (/ 1.0 2.0) (* 2.0 ?x549)))))
 (let ((?x552 (* 2.0 ?x549)))
 (let ((?x571 (* (- 4.0) ?x488)))
 (let ((?x479 (* 2.0 ?x478)))
 (let ((?x570 (* (- 4.0) ?x455)))
 (let ((?x569 (* 4.0 ?x445)))
 (let ((?x567 (* 2.0 ?x442)))
 (let ((?x439 (* 2.0 ?x438)))
 (let ((?x566 (* 3.0 ?x422)))
 (let ((?x564 (* (- 4.0) ?x414)))
 (let ((?x563 (* (- 1.0) ?x404)))
 (let ((?x562 (* (- 4.0) ?x394)))
 (let ((?x336 (* (/ 1.0 4.0) ?x360)))
 (let ((?x560 (* (- 1.0) ?x346)))
 (let ((?x559 (* (/ 3.0 2.0) ?x338)))
 (let ((?x572 (+ ?x559 ?x560 ?x336 ?x562 ?x563 ?x564 ?x566 ?x434 ?x439 ?x567 ?x569 ?x570 ?x475 ?x479 ?x571 ?x552)))
 (let ((?x579 (* (/ 1.0 2.0) ?x572)))
 (let ((?x367 (* ?x48 ?x137 ?x137 b)))
 (let ((?x354 (* ?x137 ?x137 b)))
 (let ((?x361 (* ?x48 ?x68 ?x137 b)))
 (let ((?x359 (* ?x68 ?x137 b)))
 (let ((?x366 (* ?x48 r00 ?x137 b)))
 (let ((?x358 (* r00 ?x137 b)))
 (let ((?x362 (* ?x48 ?x140 ?x137 b)))
 (let ((?x357 (* ?x140 ?x137 b)))
 (let ((?x353 (* ?x48 ?x137 ?x68 b)))
 (let ((?x368 (* ?x137 ?x68 b)))
 (let ((?x369 (* ?x48 ?x68 ?x68 b)))
 (let ((?x370 (* ?x68 ?x68 b)))
 (let ((?x371 (* ?x48 r00 ?x68 b)))
 (let ((?x372 (* r00 ?x68 b)))
 (let ((?x373 (* ?x48 ?x140 ?x68 b)))
 (let ((?x374 (* ?x140 ?x68 b)))
 (let ((?x375 (* ?x48 ?x137 r00 b)))
 (let ((?x376 (* ?x137 r00 b)))
 (let ((?x377 (* ?x48 ?x68 r00 b)))
 (let ((?x335 (* ?x68 r00 b)))
 (let ((?x352 (* ?x48 r00 r00 b)))
 (let ((?x333 (* r00 r00 b)))
 (let ((?x331 (* ?x48 ?x140 r00 b)))
 (let ((?x378 (* ?x140 r00 b)))
 (let ((?x379 (* ?x48 ?x137 ?x140 b)))
 (let ((?x380 (* ?x137 ?x140 b)))
 (let ((?x381 (* ?x48 ?x68 ?x140 b)))
 (let ((?x382 (* ?x68 ?x140 b)))
 (let ((?x383 (* ?x48 r00 ?x140 b)))
 (let ((?x384 (* r00 ?x140 b)))
 (let ((?x385 (* ?x48 ?x140 ?x140 b)))
 (let ((?x386 (* ?x140 ?x140 b)))
 (let ((?x363 (+ ?x386 ?x385 ?x384 ?x383 ?x382 ?x381 ?x380 ?x379 ?x378 ?x331 ?x333 ?x352 ?x335 ?x377 ?x376 ?x375 ?x374 ?x373 ?x372 ?x371 ?x370 ?x369 ?x368 ?x353 ?x357 ?x362 ?x358 ?x366 ?x359 ?x361 ?x354 ?x367)))
 (let ((?x417 (* (- 1.0) ?x414)))
 (let ((?x397 (* (- 1.0) ?x394)))
 (let ((?x214 (* (/ 1.0 2.0) ?x338)))
 (let ((?x554 (+ ?x336 ?x214 ?x349 ?x397 ?x407 ?x417 ?x214 ?x422 ?x349 ?x397 ?x434 ?x439 ?x442 ?x446 ?x397 ?x458 ?x407 ?x417 ?x442 ?x446 ?x475 ?x479 ?x417 ?x491 ?x214 ?x422 ?x397 ?x458 ?x417 ?x491 ?x422 ?x552)))
 (let ((@x551 (trans (rewrite (= ?x367 (* 2.0 (* x x b x b b)))) (rewrite (= (* 2.0 (* x x b x b b)) ?x552)) (= ?x367 ?x552))))
 (let ((@x506 (rewrite (= (* x b x b b) ?x422))))
 (let ((@x544 (trans (rewrite (= ?x354 (* x b x b b))) @x506 (= ?x354 ?x422))))
 (let ((@x538 (trans (rewrite (= ?x361 (* (- 2.0) (* x b00 x00 x b b)))) (rewrite (= (* (- 2.0) (* x b00 x00 x b b)) ?x491)) (= ?x361 ?x491))))
 (let ((@x530 (trans (rewrite (= ?x359 (* (- 1.0) (* b00 x00 x b b)))) (rewrite (= (* (- 1.0) (* b00 x00 x b b)) ?x417)) (= ?x359 ?x417))))
 (let ((@x522 (trans (rewrite (= ?x366 (* (- 2.0) (* x r00 x b b)))) (rewrite (= (* (- 2.0) (* x r00 x b b)) ?x458)) (= ?x366 ?x458))))
 (let ((@x514 (trans (rewrite (= ?x358 (* (- 1.0) (* r00 x b b)))) (rewrite (= (* (- 1.0) (* r00 x b b)) ?x397)) (= ?x358 ?x397))))
 (let ((@x508 (trans (rewrite (= ?x362 (* x b x b b))) @x506 (= ?x362 ?x422))))
 (let ((@x499 (trans (rewrite (= ?x357 (* (/ 1.0 2.0) (* b x b b)))) (rewrite (= (* (/ 1.0 2.0) (* b x b b)) ?x214)) (= ?x357 ?x214))))
 (let ((@x490 (trans (rewrite (= ?x353 (* (- 2.0) (* x x b b00 x00 b)))) (rewrite (= (* (- 2.0) (* x x b b00 x00 b)) ?x491)) (= ?x353 ?x491))))
 (let ((@x468 (trans (rewrite (= ?x373 (* (- 1.0) (* x b b00 x00 b)))) (rewrite (= (* (- 1.0) (* x b b00 x00 b)) ?x417)) (= ?x373 ?x417))))
 (let ((@x457 (trans (rewrite (= ?x375 (* (- 2.0) (* x x b r00 b)))) (rewrite (= (* (- 2.0) (* x x b r00 b)) ?x458)) (= ?x375 ?x458))))
 (let ((@x432 (trans (rewrite (= ?x331 (* (- 1.0) (* x b r00 b)))) (rewrite (= (* (- 1.0) (* x b r00 b)) ?x397)) (= ?x331 ?x397))))
 (let ((@x416 (trans (rewrite (= ?x381 (* (- 1.0) (* x b00 x00 b b)))) (rewrite (= (* (- 1.0) (* x b00 x00 b b)) ?x417)) (= ?x381 ?x417))))
 (let ((@x406 (trans (rewrite (= ?x382 (* (- (/ 1.0 2.0)) (* b00 x00 b b)))) (rewrite (= (* (- (/ 1.0 2.0)) (* b00 x00 b b)) ?x407)) (= ?x382 ?x407))))
 (let ((@x396 (trans (rewrite (= ?x383 (* (- 1.0) (* x r00 b b)))) (rewrite (= (* (- 1.0) (* x r00 b b)) ?x397)) (= ?x383 ?x397))))
 (let ((@x348 (trans (rewrite (= ?x384 (* (- (/ 1.0 2.0)) (* r00 b b)))) (rewrite (= (* (- (/ 1.0 2.0)) (* r00 b b)) ?x349)) (= ?x384 ?x349))))
 (let ((@x557 (monotonicity (rewrite (= ?x386 ?x336)) (rewrite (= ?x385 ?x214)) @x348 @x396 @x406 @x416 (rewrite (= ?x380 ?x214)) (rewrite (= ?x379 ?x422)) (rewrite (= ?x378 ?x349)) @x432 (rewrite (= ?x333 ?x434)) (rewrite (= ?x352 ?x439)) (rewrite (= ?x335 ?x442)) (rewrite (= ?x377 ?x446)) (rewrite (= ?x376 ?x397)) @x457 (rewrite (= ?x374 ?x407)) @x468 (rewrite (= ?x372 ?x442)) (rewrite (= ?x371 ?x446)) (rewrite (= ?x370 ?x475)) (rewrite (= ?x369 ?x479)) (rewrite (= ?x368 ?x417)) @x490 @x499 @x508 @x514 @x522 @x530 @x538 @x544 @x551 (= ?x363 ?x554))))
 (let ((@x217 (rewrite (= ?x128 ?x340))))
 (let ((@x356 (trans (monotonicity @x217 @x217 (= ?x194 (* ?x84 ?x340 ?x340 b))) (rewrite (= (* ?x84 ?x340 ?x340 b) ?x363)) (= ?x194 ?x363))))
 (let ((@x578 (trans @x356 (trans @x557 (rewrite (= ?x554 ?x572)) (= ?x363 ?x572)) (= ?x194 ?x572))))
 (let ((@x602 (trans (monotonicity @x578 (= ?x320 ?x579)) (rewrite (= ?x579 ?x598)) (= ?x320 ?x598))))
 (let ((@x632 (monotonicity (rewrite (= ?x206 ?x222)) (trans @x602 (rewrite (= ?x598 ?x638)) (= ?x320 ?x638)) (= ?x326 ?x634))))
 (let ((@x658 (monotonicity (trans @x632 (rewrite (= ?x634 ?x633)) (= ?x326 ?x633)) (trans @x651 (rewrite (= (+ ?x137 ?x140 ?x646) 0.0)) (= ?x186 0.0)) (= ?x178 ?x656))))
 (let ((@x663 (monotonicity (trans @x658 (rewrite (= ?x656 0.0)) $x168) (= $x168 (= 0.0 0.0)))))
 (let ((@x667 (monotonicity (trans @x663 (rewrite (= (= 0.0 0.0) true)) (= $x168 true)) (= $x169 (not true)))))
 (trans @x667 (rewrite (= (not true) false)) (= $x169 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x678 (trans (quant-intro (proof-bind ?x671) (= $x153 $x670)) (elim-unused (= $x670 false)) (= $x153 false))))
 (let (($x327 (exists ((b Real) (r Real) (x Real) )(! (let ((?x85 (* (- 1.0) r00)))
 (let ((?x118 (* (- (/ 1.0 2.0)) b)))
 (let ((?x68 (* b00 x00)))
 (let ((?x69 (* (- 1.0) ?x68)))
 (let ((?x298 (+ ?x69 r ?x118 ?x85 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x130 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) (+ r ?x118) (+ r ?x118) b))))
 (let ((?x124 (+ r ?x118)))
 (let ((?x48 (* 2.0 x)))
 (let ((?x84 (+ 1.0 ?x48)))
 (let (($x321 (= (* (+ (* (/ 1.0 2.0) (* ?x84 ?x84 ?x124 ?x124 ?x124 b)) ?x130) ?x298) 0.0)))
 (let ((?x96 (* x b)))
 (let ((?x119 (+ ?x69 r ?x85 ?x96)))
 (let ((?x76 (+ (* 2.0 (* x x r r r b)) (* x r r b))))
 (and (= ?x119 0.0) (or (not (= (* ?x76 ?x119) 0.0)) (not $x321)))))))))))))))) :qid k!28))
 ))
 (let (($x60 (exists ((b Real) (r Real) (x Real) )(! (let ((?x48 (* 2.0 x)))
 (let ((?x49 (+ ?x48 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x45 (- r ?x36)))
 (let ((?x55 (* (+ (- (+ (* (- 1.0) b00 x00) ?x45) r00) (* ?x36 ?x49)) (+ (* ?x36 ?x45 ?x45 ?x45 ?x49 ?x49) (* ?x36 ?x45 ?x45 ?x49)))))
 (let ((?x41 (+ (* ?x36 r r r 2.0 x 2.0 x) (* ?x36 r r 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x58 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41) 0.0)) (not (= ?x55 0.0)))))
 (and (= (+ ?x30 (* b x)) 0.0) $x58))))))))) :qid k!28))
 ))
 (let ((?x162 (lambda ((b Real) (r Real) (x Real) )(let ((?x85 (* (- 1.0) r00)))
 (let ((?x118 (* (- (/ 1.0 2.0)) b)))
 (let ((?x68 (* b00 x00)))
 (let ((?x69 (* (- 1.0) ?x68)))
 (let ((?x298 (+ ?x69 r ?x118 ?x85 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x130 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) (+ r ?x118) (+ r ?x118) b))))
 (let ((?x124 (+ r ?x118)))
 (let ((?x48 (* 2.0 x)))
 (let ((?x84 (+ 1.0 ?x48)))
 (let (($x321 (= (* (+ (* (/ 1.0 2.0) (* ?x84 ?x84 ?x124 ?x124 ?x124 b)) ?x130) ?x298) 0.0)))
 (let ((?x96 (* x b)))
 (let ((?x119 (+ ?x69 r ?x85 ?x96)))
 (let ((?x76 (+ (* 2.0 (* x x r r r b)) (* x r r b))))
 (let (($x78 (and (= ?x119 0.0) (or (not (= (* ?x76 ?x119) 0.0)) (not $x321)))))
 (let ((?x49 (+ ?x48 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x45 (- r ?x36)))
 (let ((?x55 (* (+ (- (+ (* (- 1.0) b00 x00) ?x45) r00) (* ?x36 ?x49)) (+ (* ?x36 ?x45 ?x45 ?x45 ?x49 ?x49) (* ?x36 ?x45 ?x45 ?x49)))))
 (let ((?x41 (+ (* ?x36 r r r 2.0 x 2.0 x) (* ?x36 r r 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x58 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41) 0.0)) (not (= ?x55 0.0)))))
 (let (($x59 (and (= (+ ?x30 (* b x)) 0.0) $x58)))
 (rewrite (= $x59 $x78)))))))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x91 (mp (mp @x61 (quant-intro (proof-bind ?x162) (= $x60 $x327)) $x327) (rewrite (= $x327 $x153)) $x153)))
 (mp @x91 @x678 false))))))))))))

(:max-memory   17.57
 :memory       17.33
 :num-allocs   56807
 :num-checks   1
 :rlimit-count 963
 :time         0.00
 :total-time   0.01)
