unsat
((set-logic NIA)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x221 (* y!1 x!2)))
 (let ((?x305 (to_real ?x221)))
 (let ((?x109 (+ ?x305 (* (- 1.0) (* (to_real x!2) (to_real y!1))))))
 (let (($x98 (>= ?x109 0.0)))
 (let (($x108 (= ?x109 0.0)))
 (let ((@x455 (lemma (unit-resolution ((_ th-lemma arith) $x108) (hypothesis (not $x108)) false) $x108)))
 (let ((@x345 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x108) $x98)) @x455 $x98)))
 (let (($x598 (<= ?x109 0.0)))
 (let ((@x500 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x108) $x598)) @x455 $x598)))
 (let ((?x655 (* (- 4.0) (* (to_real x!2) (to_real x!2) (to_real x!2) (to_real y!1)))))
 (let ((?x543 (to_real y!1)))
 (let ((?x531 (to_real x!2)))
 (let ((?x530 (to_real z!0)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x476 (+ (* (/ 1.0 2.0) (* ?x106 ?x110 ?x530 ?x531 ?x543 ?x543)) (* (- (/ 1.0 2.0)) (* ?x530 ?x531 ?x531 ?x543 ?x543 ?x543)) (* (- (/ 1.0 2.0)) (* (to_real z00) ?x530 ?x530 ?x530 ?x531 ?x543 ?x543)) (* (/ 1.0 2.0) (* (to_real z00) ?x530 ?x531 ?x543 ?x543)) (* (/ 1.0 2.0) (* ?x530 ?x530 ?x530 ?x530 ?x531 ?x543 ?x543)) (* (- 4.0) (* ?x530 ?x531 ?x531)) (* 4.0 (* (to_real z00) ?x531 ?x531)) (* (- (/ 1.0 2.0)) (* ?x530 ?x530 ?x531 ?x543 ?x543)) (* 4.0 (* ?x106 ?x110 ?x531 ?x531)) (* (/ 1.0 2.0) (* ?x530 ?x530 ?x530 ?x531 ?x531 ?x543 ?x543 ?x543)) (* (- (/ 1.0 2.0)) (* ?x106 ?x110 ?x530 ?x530 ?x530 ?x531 ?x543 ?x543)) ?x655)))
 (let (($x488 (>= ?x476 0.0)))
 (let (($x374 (not $x488)))
 (let (($x387 (= 0.0 ?x476)))
 (let (($x492 (not $x387)))
 (let ((@x486 (symm (commutativity (= $x387 (= ?x476 0.0))) (= (= ?x476 0.0) $x387))))
 (let (($x135 (= ?x476 0.0)))
 (let (($x443 (not $x135)))
 (let ((?x577 (* ?x531 ?x543)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x705 (* (/ 1.0 2.0) (* ?x531 ?x531 ?x531 ?x531))))
 (let ((?x665 (* (- 1.0) (* ?x531 ?x531 ?x531 ?x531 ?x543))))
 (let ((?x130 (* (- (/ 9.0 2.0)) (* ?x531 ?x531))))
 (let ((?x286 (* (/ 1.0 2.0) (* ?x531 ?x531 ?x531 ?x531 ?x543 ?x543))))
 (let ((?x296 (* (- (/ 1.0 2.0)) (* ?x531 ?x531 ?x543 ?x543))))
 (let ((?x150 (* ?x531 ?x531 ?x543)))
 (let ((?x288 (+ (* (- (/ 1.0 2.0)) (* ?x530 ?x531)) (* ?x530 ?x531 ?x543) (* (/ 3.0 2.0) (* ?x530 ?x531 ?x531 ?x531)) (* (- 1.0) (* ?x530 ?x530 ?x530 ?x531 ?x543)) (* (/ 1.0 2.0) (* ?x530 ?x530 ?x530 ?x531)) (* (/ 3.0 2.0) (* ?x530 ?x531 ?x531 ?x531 ?x543 ?x543)) (* (/ 1.0 2.0) (* ?x530 ?x530 ?x530 ?x531 ?x543 ?x543)) ?x150 (* (- 3.0) (* ?x530 ?x531 ?x531 ?x531 ?x543)) ?x296 (* (- (/ 1.0 2.0)) (* ?x530 ?x531 ?x543 ?x543)) (* (/ 3.0 2.0) (* ?x530 ?x530 ?x531 ?x531)) ?x286 (* (- 3.0) (* ?x530 ?x530 ?x531 ?x531 ?x543)) (* (/ 3.0 2.0) (* ?x530 ?x530 ?x531 ?x531 ?x543 ?x543)) ?x130 ?x665 ?x705)))
 (let (($x311 (= (* ?x288 (+ ?x197 ?x117 ?x530 ?x577)) 0.0)))
 (let ((?x411 (+ ?x577 ?x117 ?x197 ?x530)))
 (let (($x201 (= 0.0 ?x411)))
 (let (($x337 (>= ?x411 0.0)))
 (let ((?x87 (+ ?x111 (* (- 1.0) (to_real (* x00 y00))))))
 (let (($x589 (<= ?x87 0.0)))
 (let (($x90 (= ?x87 0.0)))
 (let ((@x451 ((_ th-lemma arith) $x90)))
 (let ((?x84 (* x00 y00)))
 (let ((?x214 (+ z00 ?x84 (* (- 1) ?x221) (* (- 1) z!0))))
 (let (($x521 (<= ?x214 0)))
 (let (($x136 (= 0 ?x214)))
 (let ((@x140 (symm (commutativity (= $x136 (= ?x214 0))) (= (= ?x214 0) $x136))))
 (let (($x218 (= ?x214 0)))
 (let (($x102 (not $x311)))
 (let (($x416 (or $x443 $x102)))
 (let (($x587 (and $x218 $x416)))
 (let ((?x120 (+ ?x665 (* (- 1.0) (* ?x531 ?x530 ?x530 ?x530 ?x543)) (* (/ 1.0 2.0) (* ?x531 ?x530 ?x530 ?x530)) (* (- 3.0) (* ?x531 ?x531 ?x530 ?x530 ?x543)) (* (/ 3.0 2.0) (* ?x531 ?x531 ?x530 ?x530 ?x543 ?x543)) (* (/ 3.0 2.0) (* ?x531 ?x531 ?x531 ?x530)) ?x130 ?x150 ?x296 (* (- (/ 1.0 2.0)) (* ?x531 ?x530)) (* ?x531 ?x530 ?x543) ?x705 (* (- (/ 1.0 2.0)) (* ?x531 ?x530 ?x543 ?x543)) (* (/ 3.0 2.0) (* ?x531 ?x531 ?x530 ?x530)) ?x286 (* (/ 3.0 2.0) (* ?x531 ?x531 ?x531 ?x530 ?x543 ?x543)) (* (/ 1.0 2.0) (* ?x531 ?x530 ?x530 ?x530 ?x543 ?x543)) (* (- 3.0) (* ?x531 ?x531 ?x531 ?x530 ?x543)))))
 (let ((?x593 (+ (* (/ 1.0 2.0) (* ?x531 ?x530 ?x530 ?x530 ?x530 ?x543 ?x543)) (* (- (/ 1.0 2.0)) (* ?x531 ?x530 ?x530 ?x530 ?x48 ?x543 ?x543)) (* (- (/ 1.0 2.0)) (* ?x531 ?x530 ?x530 ?x530 ?x543 ?x543 ?x106 ?x110)) (* (/ 1.0 2.0) (* ?x531 ?x531 ?x530 ?x530 ?x530 ?x543 ?x543 ?x543)) (* (- 4.0) (* ?x531 ?x531 ?x530)) (* 4.0 (* ?x531 ?x531 ?x48)) (* 4.0 (* ?x531 ?x531 ?x106 ?x110)) ?x655 (* (- (/ 1.0 2.0)) (* ?x531 ?x530 ?x530 ?x543 ?x543)) (* (/ 1.0 2.0) (* ?x531 ?x530 ?x48 ?x543 ?x543)) (* (/ 1.0 2.0) (* ?x531 ?x530 ?x543 ?x543 ?x106 ?x110)) (* (- (/ 1.0 2.0)) (* ?x531 ?x531 ?x530 ?x543 ?x543 ?x543)))))
 (let (($x89 (or (not (= ?x593 0.0)) (not (= (* ?x120 (+ ?x530 ?x197 ?x117 ?x577)) 0.0)))))
 (let (($x82 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x84)) 0) $x89)))
 (let (($x556 (exists ((x Int) (y Int) (z Int) )(! (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x551 (* (- 3.0) (* (to_real x) (to_real x) (to_real x) ?x46 (to_real y)))))
 (let ((?x517 (* (/ 1.0 2.0) (* (to_real x) ?x46 ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x388 (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x62 ?x62))))
 (let ((?x371 (* ?x43 ?x46 ?x62)))
 (let ((?x364 (* (- (/ 1.0 2.0)) (* ?x43 ?x46))))
 (let ((?x360 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x62 ?x62))))
 (let ((?x343 (* ?x43 ?x43 ?x62)))
 (let ((?x335 (* ?x43 ?x43)))
 (let ((?x449 (* (- (/ 9.0 2.0)) ?x335)))
 (let ((?x696 (+ (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x62)) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x46 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46)) (* (- 3.0) (* ?x43 ?x43 ?x46 ?x46 ?x62)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x62 ?x62)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46)) ?x449 ?x343 ?x360 ?x364 ?x371 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43)) ?x388 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x62 ?x62)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x62 ?x62)) ?x517 ?x551)))
 (let ((?x647 (+ (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x46 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x48 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x106 ?x110)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (- 4.0) (* ?x43 ?x43 ?x46)) (* 4.0 (* ?x43 ?x43 ?x48)) (* 4.0 (* ?x43 ?x43 ?x106 ?x110)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x48 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x62 ?x62 ?x106 ?x110)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x62 ?x62 ?x62)))))
 (let (($x313 (not (= ?x647 0.0))))
 (let (($x703 (or $x313 (not (= (* ?x696 (+ ?x46 ?x197 ?x117 (* ?x43 ?x62))) 0.0)))))
 (let (($x112 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x112 $x703)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x132 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x637 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x197)))
 (let ((?x335 (* ?x43 ?x43)))
 (let ((?x198 (* (- 4.0) ?x335)))
 (let ((?x62 (to_real y)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x397 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x209 (+ ?x46 ?x43)))
 (let ((?x415 (+ (* 2.0 (* ?x43 ?x209 ?x209 ?x209 ?x397 ?x397)) (* (- 2.0) (* ?x43 ?x209 ?x397 ?x397)) ?x198)))
 (let ((?x558 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 2.0)) (* ?x46 ?x62 ?x62 ?x43)) ?x198)))
 (let (($x208 (or (not (= (* ?x558 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)) (not (= (* ?x415 ?x637) 0.0)))))
 (let (($x395 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x395 $x208)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x105 (lambda ((x Int) (y Int) (z Int) )(let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x551 (* (- 3.0) (* (to_real x) (to_real x) (to_real x) ?x46 (to_real y)))))
 (let ((?x517 (* (/ 1.0 2.0) (* (to_real x) ?x46 ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x388 (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x62 ?x62))))
 (let ((?x371 (* ?x43 ?x46 ?x62)))
 (let ((?x364 (* (- (/ 1.0 2.0)) (* ?x43 ?x46))))
 (let ((?x360 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x62 ?x62))))
 (let ((?x343 (* ?x43 ?x43 ?x62)))
 (let ((?x335 (* ?x43 ?x43)))
 (let ((?x449 (* (- (/ 9.0 2.0)) ?x335)))
 (let ((?x696 (+ (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x62)) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x46 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46)) (* (- 3.0) (* ?x43 ?x43 ?x46 ?x46 ?x62)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x62 ?x62)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46)) ?x449 ?x343 ?x360 ?x364 ?x371 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43)) ?x388 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x62 ?x62)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x62 ?x62)) ?x517 ?x551)))
 (let ((?x647 (+ (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x46 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x48 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x106 ?x110)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (- 4.0) (* ?x43 ?x43 ?x46)) (* 4.0 (* ?x43 ?x43 ?x48)) (* 4.0 (* ?x43 ?x43 ?x106 ?x110)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x48 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x62 ?x62 ?x106 ?x110)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x62 ?x62 ?x62)))))
 (let (($x313 (not (= ?x647 0.0))))
 (let (($x703 (or $x313 (not (= (* ?x696 (+ ?x46 ?x197 ?x117 (* ?x43 ?x62))) 0.0)))))
 (let (($x112 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x761 (and $x112 $x703)))
 (let ((?x637 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x197)))
 (let ((?x198 (* (- 4.0) ?x335)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x397 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x209 (+ ?x46 ?x43)))
 (let ((?x415 (+ (* 2.0 (* ?x43 ?x209 ?x209 ?x209 ?x397 ?x397)) (* (- 2.0) (* ?x43 ?x209 ?x397 ?x397)) ?x198)))
 (let ((?x558 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 2.0)) (* ?x46 ?x62 ?x62 ?x43)) ?x198)))
 (let (($x208 (or (not (= (* ?x558 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)) (not (= (* ?x415 ?x637) 0.0)))))
 (let (($x395 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x392 (and $x395 $x208)))
 (rewrite (= $x392 $x761)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x618 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x637 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x197)))
 (let ((?x335 (* ?x43 ?x43)))
 (let ((?x198 (* (- 4.0) ?x335)))
 (let ((?x62 (to_real y)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x397 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x209 (+ ?x46 ?x43)))
 (let ((?x415 (+ (* 2.0 (* ?x43 ?x209 ?x209 ?x209 ?x397 ?x397)) (* (- 2.0) (* ?x43 ?x209 ?x397 ?x397)) ?x198)))
 (let ((?x558 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 2.0)) (* ?x46 ?x62 ?x62 ?x43)) ?x198)))
 (let (($x208 (or (not (= (* ?x558 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)) (not (= (* ?x415 ?x637) 0.0)))))
 (let (($x336 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x336 $x208)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x384 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x637 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x197)))
 (let ((?x335 (* ?x43 ?x43)))
 (let ((?x198 (* (- 4.0) ?x335)))
 (let ((?x62 (to_real y)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x397 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x209 (+ ?x46 ?x43)))
 (let ((?x415 (+ (* 2.0 (* ?x43 ?x209 ?x209 ?x209 ?x397 ?x397)) (* (- 2.0) (* ?x43 ?x209 ?x397 ?x397)) ?x198)))
 (let ((?x558 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 2.0)) (* ?x46 ?x62 ?x62 ?x43)) ?x198)))
 (let (($x208 (or (not (= (* ?x558 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)) (not (= (* ?x415 ?x637) 0.0)))))
 (let (($x395 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x392 (and $x395 $x208)))
 (let (($x336 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x172 (and $x336 $x208)))
 (rewrite (= $x172 $x392)))))))))))))))))))))))))
 ))
 (let (($x76 (exists ((x Int) (y Int) (z Int) )(! (let ((?x59 (to_real 0)))
 (let ((?x56 (to_real (* 2 x 2 x))))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x62 (to_real y)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x69 (- (* ?x41 ?x43 ?x63 ?x63 ?x46 ?x46 ?x46) (* ?x41 ?x43 ?x63 ?x63 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51 ?x51) (* ?x41 ?x43 ?x42 ?x42 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x60 (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (- ?x55 ?x56)) ?x59)))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not $x60) (not (= (* ?x66 (- ?x69 ?x56)) ?x59)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x401 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x637 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x197)))
 (let ((?x335 (* ?x43 ?x43)))
 (let ((?x198 (* (- 4.0) ?x335)))
 (let ((?x62 (to_real y)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x397 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x209 (+ ?x46 ?x43)))
 (let ((?x415 (+ (* 2.0 (* ?x43 ?x209 ?x209 ?x209 ?x397 ?x397)) (* (- 2.0) (* ?x43 ?x209 ?x397 ?x397)) ?x198)))
 (let ((?x558 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 2.0)) (* ?x46 ?x62 ?x62 ?x43)) ?x198)))
 (let (($x208 (or (not (= (* ?x558 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)) (not (= (* ?x415 ?x637) 0.0)))))
 (let (($x336 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x172 (and $x336 $x208)))
 (let ((?x59 (to_real 0)))
 (let ((?x56 (to_real (* 2 x 2 x))))
 (let ((?x41 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x69 (- (* ?x41 ?x43 ?x63 ?x63 ?x46 ?x46 ?x46) (* ?x41 ?x43 ?x63 ?x63 ?x46))))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51 ?x51) (* ?x41 ?x43 ?x42 ?x42 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x60 (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (- ?x55 ?x56)) ?x59)))
 (let (($x75 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not $x60) (not (= (* ?x66 (- ?x69 ?x56)) ?x59))))))
 (rewrite (= $x75 $x172))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x77 (asserted $x76)))
 (let ((@x170 (mp (mp @x77 (quant-intro (proof-bind ?x401) (= $x76 $x618)) $x618) (rewrite (= $x618 $x618)) $x618)))
 (let ((@x715 (mp (mp @x170 (quant-intro (proof-bind ?x384) (= $x618 $x132)) $x132) (quant-intro (proof-bind ?x105) (= $x132 $x556)) $x556)))
 (let ((@x332 (mp (mp~ @x715 (sk (~ $x556 $x82)) $x82) (rewrite (= $x82 $x587)) $x587)))
 (let ((@x454 (mp (and-elim @x332 $x218) @x140 $x136)))
 (let ((@x409 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x136) $x521)) @x454 $x521)))
 (let ((@x322 ((_ th-lemma arith) (hypothesis (not $x337)) @x409 (hypothesis $x598) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x90) $x589)) @x451 $x589) false)))
 (let (($x651 (<= ?x411 0.0)))
 (let ((?x468 (+ (* (- 1.0) ?x305) ?x577)))
 (let (($x466 (<= ?x468 0.0)))
 (let (($x97 (= 0.0 ?x468)))
 (let ((@x157 (symm (commutativity (= $x97 (= ?x468 0.0))) (= (= ?x468 0.0) $x97))))
 (let ((@x154 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x97) $x466)) (mp ((_ th-lemma arith) (= ?x468 0.0)) @x157 $x97) $x466)))
 (let (($x386 (>= ?x214 0)))
 (let ((@x453 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x136) $x386)) @x454 $x386)))
 (let (($x207 (>= ?x87 0.0)))
 (let ((@x504 ((_ th-lemma arith) (hypothesis (not $x651)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x90) $x207)) @x451 $x207) @x453 @x154 false)))
 (let ((@x176 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x201 (not $x651) (not $x337))) (lemma @x504 $x651) (unit-resolution (lemma @x322 (or (not $x598) $x337)) @x500 $x337) $x201)))
 (let (($x472 (= ?x411 0.0)))
 (let (($x477 (not $x472)))
 (let ((@x462 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x477 $x311)) (hypothesis $x102) $x477) (symm (hypothesis $x201) $x472) false)))
 (let ((@x478 (unit-resolution (and-elim @x332 $x416) (unit-resolution (lemma @x462 (or (not $x201) $x311)) @x176 $x311) $x443)))
 (let (($x435 (<= ?x476 0.0)))
 (let ((@x359 (unit-resolution ((_ th-lemma arith) (or (not $x521) (not $x386) $x435 (not $x598) (not $x98))) @x409 @x453 (hypothesis (not $x435)) @x500 @x345 false)))
 (let ((@x418 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x387 (not $x435) $x374)) (lemma @x359 $x435) (mp @x478 (monotonicity @x486 (= $x443 $x492)) $x492) $x374)))
 (unit-resolution ((_ th-lemma arith) (or (not $x386) (not $x521) $x488 (not $x98) (not $x598))) @x409 @x453 @x418 @x500 @x345 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      32
 :arith-eq-adapter               40
 :arith-bound-propagations-cheap 33
 :arith-bound-propagations-lp    6
 :arith-conflicts                62
 :arith-diseq                    54
 :arith-gcd-calls                5
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    56
 :arith-make-feasible            57
 :arith-max-columns              68
 :arith-max-rows                 15
 :arith-nla-explanations         69
 :arith-nla-lemmas               60
 :arith-patches                  5
 :arith-patches-success          5
 :arith-propagations             33
 :arith-upper                    51
 :conflicts                      9
 :decisions                      67
 :del-clause                     140
 :final-checks                   28
 :max-memory                     4.31
 :memory                         3.13
 :mk-bool-var                    186
 :mk-clause                      186
 :num-allocs                     2240857
 :num-checks                     1
 :propagations                   89
 :rlimit-count                   5642
 :time                           0.02
 :total-time                     0.02)
