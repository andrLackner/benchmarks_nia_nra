unsat
((set-logic NRA)
(declare-fun a!8 () Real)
(declare-fun y!5 () Real)
(declare-fun b!7 () Real)
(declare-fun d!6 () Real)
(proof
(let ((?x134 (* (- 1.0) (* d00 a!8))))
 (let ((?x120 (* 2.0 (* b00 y!5))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x332 (+ ?x30 ?x86 ?x120 ?x134)))
 (let (($x184 (>= ?x332 0.0)))
 (let (($x619 (= 0.0 ?x332)))
 (let ((@x429 (symm (commutativity (= $x619 (= ?x332 0.0))) (= (= ?x332 0.0) $x619))))
 (let (($x155 (= ?x332 0.0)))
 (let ((?x90 (* d!6 a!8)))
 (let ((?x667 (+ ?x90 (* (- 2.0) (* b!7 y!5)) (* (- 1.0) (* a00 d!6)) (* 2.0 (* y00 b!7)))))
 (let ((?x146 (* d00 b!7)))
 (let ((?x339 (+ ?x146 (* (- 1.0) (* b00 d!6)))))
 (let (($x525 (= ?x339 0.0)))
 (let ((?x783 (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 b!7 b!7))))
 (let ((?x718 (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7))))
 (let ((?x219 (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7))))
 (let ((?x459 (+ (* (/ 3.0 32.0) (* d!6 d!6 d!6 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 8.0) (* a!8 a!8 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 b!7 y!5 y!5 y!5)) (* (/ 3.0 32.0) (* d!6 d!6 d!6 a!8 b!7 b!7 y!5 y!5)) (* (/ 3.0 64.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 y!5)) (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 d!6 a!8 b!7 b!7)) (* (/ 3.0 64.0) (* d!6 d!6 d!6 d!6 a!8 b!7 b!7 y!5)) (* (/ 1.0 8.0) (* b!7 b!7 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 16.0) (* d!6 d!6 a!8 b!7 b!7 y!5 y!5 y!5)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 a!8 b!7 b!7 b!7)) (* (/ 1.0 32.0) (* d!6 d!6 a!8 a!8 b!7 b!7 b!7)) ?x219 (* (/ 1.0 8.0) (* d!6 b!7 b!7 b!7 b!7 b!7 y!5)) (* (/ 1.0 16.0) (* d!6 d!6 a!8 b!7 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* d!6 a!8 b!7 b!7 b!7 b!7 y!5)) (* (/ 1.0 4.0) (* a!8 b!7 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 8.0) (* d!6 a!8 a!8 b!7 b!7 b!7 y!5)) ?x718 ?x783)))
 (let (($x273 (= (* ?x459 (+ ?x30 ?x86 (* (- 1.0) ?x146) ?x120 (* b00 d!6) ?x134)) 0.0)))
 (let (($x258 (not $x273)))
 (let ((?x173 (* (/ 1.0 8.0) (* b00 d!6 d!6 a!8 b!7 b!7 y!5 y!5 y!5 y!5))))
 (let ((?x341 (* (- (/ 1.0 8.0)) (* b00 y00 d!6 d!6 a!8 b!7 b!7 y!5 y!5 y!5))))
 (let ((?x269 (* (- (/ 1.0 16.0)) (* d00 d!6 d!6 a!8 a!8 b!7 b!7 y!5 y!5 y!5))))
 (let ((?x266 (* (/ 1.0 16.0) (* a00 d00 d!6 d!6 a!8 b!7 b!7 y!5 y!5 y!5))))
 (let ((?x490 (+ ?x266 ?x269 ?x341 (* (- (/ 1.0 32.0)) (* b00 d!6 d!6 d!6 a!8 b!7 b!7 b!7 y!5)) (* (- (/ 1.0 8.0)) (* d00 a!8 a!8 a!8 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 64.0) (* d00 d!6 d!6 d!6 a!8 a!8 b!7 b!7 b!7)) (* (/ 1.0 32.0) (* b00 y00 d!6 d!6 d!6 a!8 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* b00 a!8 a!8 b!7 b!7 b!7 y!5 y!5 y!5)) ?x173 (* (/ 1.0 8.0) (* a00 d00 a!8 a!8 b!7 b!7 b!7 y!5 y!5)) (* (- (/ 1.0 4.0)) (* b00 y00 a!8 a!8 b!7 b!7 b!7 y!5 y!5)) (* (- (/ 1.0 64.0)) (* a00 d00 d!6 d!6 d!6 a!8 b!7 b!7 b!7)))))
 (let (($x467 (= ?x490 0.0)))
 (let (($x278 (not $x467)))
 (let (($x387 (or $x278 $x258)))
 (let (($x374 (and $x387 $x155 $x525 (= ?x667 0.0))))
 (let ((?x723 (+ ?x90 (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x83 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x86 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x721 (* d!6 b00)))
 (let ((?x813 (* 2.0 (* y!5 b00))))
 (let ((?x795 (* (- 1.0) (* a!8 d00))))
 (let ((?x784 (+ (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 32.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 32.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 64.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 64.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) ?x718 (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) ?x219 (* (/ 1.0 8.0) (* y!5 y!5 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* y!5 y!5 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* y!5 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* y!5 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* y!5 d!6 b!7 b!7 b!7 a!8 a!8)) ?x783 (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 a!8 a!8)))))
 (let (($x81 (= (* ?x784 (+ ?x30 ?x795 ?x86 ?x813 (* (- 1.0) (* b!7 d00)) ?x721)) 0.0)))
 (let ((?x735 (* (/ 1.0 8.0) (* y!5 y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 b00))))
 (let ((?x737 (* (- (/ 1.0 8.0)) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 b00 y00))))
 (let ((?x710 (* (- (/ 1.0 16.0)) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 d00))))
 (let ((?x744 (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a00 d00))))
 (let ((?x755 (+ ?x744 ?x710 ?x737 ?x735 (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 a00 d00)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 d00)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 b00 y00)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 b00)) (* (/ 1.0 8.0) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8 a00 d00)) (* (- (/ 1.0 8.0)) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8 a!8 d00)) (* (- (/ 1.0 4.0)) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8 b00 y00)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8 b00)))))
 (let (($x103 (and (or (not (= ?x755 0.0)) (not $x81)) $x83 (= (+ (* b!7 d00) (* (- 1.0) ?x721)) 0.0) (= ?x723 0.0))))
 (let (($x548 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x188 (= (+ ?x131 ?x153 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x92 (* 2.0 (* y b00))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x107 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x118 (= (+ ?x30 ?x107 ?x86 ?x92) 0.0)))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let ((?x804 (+ ?x169 ?x207 ?x226 (* (/ 1.0 16.0) (* y y y d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b a)) (* (/ 3.0 64.0) (* y d d d d b b b)) (* (/ 3.0 64.0) (* y d d d d b b a)) (* (/ 1.0 128.0) (* d d d d d b b b)) (* (/ 1.0 128.0) (* d d d d d b b a)) (* (- (/ 1.0 64.0)) (* d d d b b b b)) (* (/ 1.0 8.0) (* y y b b b b b)) (* (/ 1.0 4.0) (* y y b b b b a)) (* (/ 1.0 8.0) (* y d b b b b b)) (* (/ 1.0 4.0) (* y d b b b b a)) (* (/ 1.0 8.0) (* y d b b b a a)) (* (/ 1.0 32.0) (* d d b b b b b)) (* (/ 1.0 16.0) (* d d b b b b a)) (* (/ 1.0 32.0) (* d d b b b a a)))))
 (let ((?x818 (* ?x804 (+ ?x30 ?x107 ?x86 ?x92 (* (- 1.0) (* b d00)) (* d b00)))))
 (let ((?x382 (+ (* (/ 1.0 16.0) (* y y y d d b b a a00 d00)) (* (- (/ 1.0 16.0)) (* y y y d d b b a a d00)) (* (- (/ 1.0 8.0)) (* y y y d d b b a b00 y00)) (* (/ 1.0 8.0) (* y y y y d d b b a b00)) (* (- (/ 1.0 64.0)) (* d d d b b b a a00 d00)) (* (/ 1.0 64.0) (* d d d b b b a a d00)) (* (/ 1.0 32.0) (* d d d b b b a b00 y00)) (* (- (/ 1.0 32.0)) (* y d d d b b b a b00)) (* (/ 1.0 8.0) (* y y b b b a a a00 d00)) (* (- (/ 1.0 8.0)) (* y y b b b a a a d00)) (* (- (/ 1.0 4.0)) (* y y b b b a a b00 y00)) (* (/ 1.0 4.0) (* y y y b b b a a b00)))))
 (let (($x149 (not (= ?x382 0.0))))
 (and (or $x149 (not (= ?x818 0.0))) $x118 $x124 $x188)))))))))))))))))) :qid k!33))
 ))
 (let (($x218 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x669 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x497 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x168 (* 2.0 (* b00 y))))
 (let ((?x30 (* a00 d00)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x114 (+ ?x86 ?x30 ?x168 (* (- 1.0) (* d00 a)))))
 (let (($x446 (= ?x114 0.0)))
 (let ((?x227 (+ ?x86 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x579 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x690 (+ (* (/ 1.0 16.0) (* ?x64 ?x579 ?x579 ?x579 d d b b)) (* (- (/ 1.0 64.0)) (* ?x64 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x579 ?x579 b b b)))))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let (($x479 (or (not (= (* (+ ?x169 ?x207 ?x226) ?x114) 0.0)) (not (= (* ?x690 ?x227) 0.0)))))
 (and $x479 $x446 $x497 $x669))))))))))))))))))) :qid k!33))
 ))
 (let ((?x602 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x188 (= (+ ?x131 ?x153 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x92 (* 2.0 (* y b00))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x107 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x118 (= (+ ?x30 ?x107 ?x86 ?x92) 0.0)))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let ((?x804 (+ ?x169 ?x207 ?x226 (* (/ 1.0 16.0) (* y y y d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b a)) (* (/ 3.0 64.0) (* y d d d d b b b)) (* (/ 3.0 64.0) (* y d d d d b b a)) (* (/ 1.0 128.0) (* d d d d d b b b)) (* (/ 1.0 128.0) (* d d d d d b b a)) (* (- (/ 1.0 64.0)) (* d d d b b b b)) (* (/ 1.0 8.0) (* y y b b b b b)) (* (/ 1.0 4.0) (* y y b b b b a)) (* (/ 1.0 8.0) (* y d b b b b b)) (* (/ 1.0 4.0) (* y d b b b b a)) (* (/ 1.0 8.0) (* y d b b b a a)) (* (/ 1.0 32.0) (* d d b b b b b)) (* (/ 1.0 16.0) (* d d b b b b a)) (* (/ 1.0 32.0) (* d d b b b a a)))))
 (let ((?x818 (* ?x804 (+ ?x30 ?x107 ?x86 ?x92 (* (- 1.0) (* b d00)) (* d b00)))))
 (let ((?x382 (+ (* (/ 1.0 16.0) (* y y y d d b b a a00 d00)) (* (- (/ 1.0 16.0)) (* y y y d d b b a a d00)) (* (- (/ 1.0 8.0)) (* y y y d d b b a b00 y00)) (* (/ 1.0 8.0) (* y y y y d d b b a b00)) (* (- (/ 1.0 64.0)) (* d d d b b b a a00 d00)) (* (/ 1.0 64.0) (* d d d b b b a a d00)) (* (/ 1.0 32.0) (* d d d b b b a b00 y00)) (* (- (/ 1.0 32.0)) (* y d d d b b b a b00)) (* (/ 1.0 8.0) (* y y b b b a a a00 d00)) (* (- (/ 1.0 8.0)) (* y y b b b a a a d00)) (* (- (/ 1.0 4.0)) (* y y b b b a a b00 y00)) (* (/ 1.0 4.0) (* y y y b b b a a b00)))))
 (let (($x149 (not (= ?x382 0.0))))
 (let (($x552 (and (or $x149 (not (= ?x818 0.0))) $x118 $x124 $x188)))
 (let (($x669 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x497 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x168 (* 2.0 (* b00 y))))
 (let ((?x114 (+ ?x86 ?x30 ?x168 (* (- 1.0) (* d00 a)))))
 (let (($x446 (= ?x114 0.0)))
 (let ((?x227 (+ ?x86 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x579 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x690 (+ (* (/ 1.0 16.0) (* ?x64 ?x579 ?x579 ?x579 d d b b)) (* (- (/ 1.0 64.0)) (* ?x64 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x579 ?x579 b b b)))))
 (let (($x479 (or (not (= (* (+ ?x169 ?x207 ?x226) ?x114) 0.0)) (not (= (* ?x690 ?x227) 0.0)))))
 (let (($x216 (and $x479 $x446 $x497 $x669)))
 (rewrite (= $x216 $x552)))))))))))))))))))))))))))))))))
 ))
 (let (($x437 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x227 (+ ?x86 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x579 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x690 (+ (* (/ 1.0 16.0) (* ?x64 ?x579 ?x579 ?x579 d d b b)) (* (- (/ 1.0 64.0)) (* ?x64 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x579 ?x579 b b b)))))
 (let ((?x168 (* 2.0 (* b00 y))))
 (let ((?x114 (+ ?x86 ?x30 ?x168 (* (- 1.0) (* d00 a)))))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let (($x479 (or (not (= (* (+ ?x169 ?x207 ?x226) ?x114) 0.0)) (not (= (* ?x690 ?x227) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x669 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x497 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x446 (= ?x114 0.0)))
 (and $x446 $x497 $x669 $x479))))))))))))))))))) :qid k!33))
 ))
 (let (($x77 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x52 (/ d 2.0)))
 (let ((?x61 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x64 (+ a b)))
 (let ((?x69 (- (* ?x64 ?x51 ?x51 ?x52 ?x52 ?x61 ?x61 ?x61) (* ?x64 ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x72 (* (- (+ ?x27 ?x30 (* 2.0 b00 ?x61)) (* ?x64 d00)) (+ ?x69 (* ?x64 ?x64 ?x51 ?x51 ?x51 ?x61 ?x61)))))
 (let ((?x55 (- (* a ?x51 ?x51 ?x52 ?x52 y y y) (* a ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ ?x27 ?x30 (* 2.0 b00 y)) ?x33)))
 (let (($x59 (= (* ?x34 (+ ?x55 (* a a ?x51 ?x51 ?x51 y y))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x59) (not (= ?x72 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x495 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x227 (+ ?x86 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x579 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x690 (+ (* (/ 1.0 16.0) (* ?x64 ?x579 ?x579 ?x579 d d b b)) (* (- (/ 1.0 64.0)) (* ?x64 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x579 ?x579 b b b)))))
 (let ((?x168 (* 2.0 (* b00 y))))
 (let ((?x114 (+ ?x86 ?x30 ?x168 (* (- 1.0) (* d00 a)))))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let (($x479 (or (not (= (* (+ ?x169 ?x207 ?x226) ?x114) 0.0)) (not (= (* ?x690 ?x227) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x669 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x497 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x446 (= ?x114 0.0)))
 (let (($x260 (and $x446 $x497 $x669 $x479)))
 (let ((?x52 (/ d 2.0)))
 (let ((?x61 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x69 (- (* ?x64 ?x51 ?x51 ?x52 ?x52 ?x61 ?x61 ?x61) (* ?x64 ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x66 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 ?x61)) (* ?x64 d00))))
 (let (($x73 (= (* ?x66 (+ ?x69 (* ?x64 ?x64 ?x51 ?x51 ?x51 ?x61 ?x61))) 0.0)))
 (let ((?x55 (- (* a ?x51 ?x51 ?x52 ?x52 y y y) (* a ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33)))
 (let (($x59 (= (* ?x34 (+ ?x55 (* a a ?x51 ?x51 ?x51 y y))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x76 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x59) (not $x73)))))
 (rewrite (= $x76 $x260)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x78 (asserted $x77)))
 (let ((@x244 (mp (mp @x78 (quant-intro (proof-bind ?x495) (= $x77 $x437)) $x437) (rewrite (= $x437 $x218)) $x218)))
 (let ((@x725 (mp~ (mp @x244 (quant-intro (proof-bind ?x602) (= $x218 $x548)) $x548) (sk (~ $x548 $x103)) $x103)))
 (let ((@x687 (mp @x725 (rewrite (= $x103 $x374)) $x374)))
 (let ((@x318 (mp (and-elim @x687 $x155) @x429 $x619)))
 (let ((@x531 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x619) $x184)) @x318 $x184)))
 (let (($x128 (<= ?x332 0.0)))
 (let ((@x461 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x619) $x128)) @x318 $x128)))
 (let (($x125 (>= ?x490 0.0)))
 (let (($x274 (not $x125)))
 (let (($x523 (<= ?x490 0.0)))
 (let ((@x794 (unit-resolution ((_ th-lemma arith) (or (not $x128) $x523 (not $x184))) (hypothesis (not $x523)) @x461 @x531 false)))
 (let (($x394 (= 0.0 ?x490)))
 (let (($x400 (not $x394)))
 (let ((@x396 (monotonicity (symm (commutativity (= $x394 $x467)) (= $x467 $x394)) (= $x278 $x400))))
 (let ((?x385 (* b00 d!6)))
 (let ((?x166 (* (- 1.0) ?x146)))
 (let ((?x659 (+ ?x166 ?x120 ?x385 ?x134 ?x30 ?x86)))
 (let (($x675 (= ?x659 0.0)))
 (let (($x510 (>= ?x339 0.0)))
 (let (($x524 (= 0.0 ?x339)))
 (let ((@x572 (mp (and-elim @x687 $x525) (symm (commutativity (= $x524 $x525)) (= $x525 $x524)) $x524)))
 (let (($x535 (<= ?x339 0.0)))
 (let ((@x209 ((_ th-lemma arith) @x461 @x531 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x524) $x535)) @x572 $x535) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x524) $x510)) @x572 $x510) (= 0.0 ?x659))))
 (let (($x789 (or (not $x675) $x273)))
 (let ((@x200 (unit-resolution ((_ th-lemma arith) $x789) (hypothesis $x258) (hypothesis $x675) false)))
 (let ((@x752 (unit-resolution (and-elim @x687 $x387) (unit-resolution (lemma @x200 $x789) (symm @x209 $x675) $x273) $x278)))
 (let ((@x314 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x394 (not $x523) $x274)) (mp @x752 @x396 $x400) (or (not $x523) $x274))))
 (unit-resolution ((_ th-lemma arith) (or (not $x128) (not $x184) $x125)) (unit-resolution @x314 (lemma @x794 $x523) $x274) @x461 @x531 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       25
 :arith-eq-adapter                15
 :arith-conflicts                 10
 :arith-diseq                     18
 :arith-grobner-calls             2
 :arith-grobner-conflicts         2
 :arith-horner-calls              2
 :arith-horner-cross-nested-forms 2
 :arith-lower                     19
 :arith-make-feasible             17
 :arith-max-columns               61
 :arith-max-rows                  7
 :arith-nla-explanations          8
 :arith-nla-lemmas                9
 :arith-offset-eqs                3
 :arith-upper                     14
 :conflicts                       5
 :decisions                       19
 :del-clause                      35
 :final-checks                    14
 :max-memory                      18.16
 :memory                          17.35
 :mk-bool-var                     57
 :mk-clause                       53
 :num-allocs                      1097297
 :num-checks                      1
 :propagations                    28
 :rlimit-count                    4821
 :time                            0.01
 :total-time                      0.02)
