unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x70 (* y00 q00)))
 (let ((?x568 (+ r00 ?x70 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x423 (<= ?x568 0)))
 (let (($x889 (= ?x568 0)))
 (let ((?x130 (+ (* 4 (* y00 y00 q00 r!1)) (* y00 y00 y00 q!2 q!2 q!2) (* (- 2) (* y00 y00 r00)) (* 2 (* y00 y00 q00 r!1 q!2 q!2)) (* (- 1) (* r00 r!1 r!1 q!2 q!2)) (* (- 1) (* y00 y00 y00 q00 q!2 q!2)) (* (- 2) (* y00 y00 y00 q00)) (* 2 (* r!1 r!1 r!1)) (* (- 1) (* y00 y00 r00 q!2 q!2)) (* (- 3) (* y00 y00 y00 q00 q!2)) (* 2 (* y00 y00 r!1)) (* (- 4) (* y00 r!1 r!1 q!2)) (* 2 (* y00 y00 y00 q!2)) (* (- 2) (* r00 r!1 r!1)) (* r!1 r!1 r!1 q!2 q!2) (* (- 1) (* y00 q00 r!1 r!1 q!2 q!2)) (* 2 (* y00 r00 r!1 q!2 q!2)) (* (- 3) (* r00 r!1 r!1 q!2)) (* 4 (* y00 r00 r!1)) (* 6 (* y00 r00 r!1 q!2)) (* (- 3) (* y00 y00 r00 q!2)) (* (- 4) (* y00 r!1 r!1)) (* y00 r!1 r!1 q!2 q!2) (* (- 1) (* y00 y00 r!1 q!2)) (* (- 5) (* y00 y00 r!1 q!2 q!2)) (* 3 (* y00 y00 y00 q!2 q!2)) (* (- 2) (* y00 q00 r!1 r!1)) (* (- 3) (* y00 q00 r!1 r!1 q!2)) (* 6 (* y00 y00 q00 r!1 q!2)) (* 3 (* r!1 r!1 r!1 q!2)) (* y00 r!1 r!1 q!2 q!2 q!2) (* (- 2) (* y00 y00 r!1 q!2 q!2 q!2)))))
 (let (($x615 (= ?x130 0)))
 (let (($x137 (not $x615)))
 (let ((?x111 (+ y00 (* (- 1) y!0))))
 (let (($x116 (= ?x111 0)))
 (let (($x439 (and $x116 $x889 $x137)))
 (let ((?x335 (* y00 y00 y00 q00)))
 (let ((?x950 (* 2 ?x335)))
 (let ((?x123 (* y00 y00 r00)))
 (let ((?x715 (* 2 ?x123)))
 (let ((?x351 (+ (* 2 (* r!1 r!1 r00)) (* 3 (* q!2 r!1 r!1 r00)) (* (- 4) (* r!1 y00 r00)) (* (- 6) (* q!2 r!1 y00 r00)) ?x715 (* 3 (* q!2 y00 y00 r00)) (* 4 (* r!1 r!1 y00)) (* 4 (* q!2 r!1 r!1 y00)) (* (- 1) (* q!2 q!2 r!1 r!1 y00)) (* (- 2) (* r!1 y00 y00)) (* q!2 r!1 y00 y00) (* 5 (* q!2 q!2 r!1 y00 y00)) (* (- 2) (* q!2 y00 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00 y00)) (* 2 (* r!1 r!1 y00 q00)) (* 3 (* q!2 r!1 r!1 y00 q00)) (* (- 4) (* r!1 y00 y00 q00)) (* (- 6) (* q!2 r!1 y00 y00 q00)) ?x950 (* 3 (* q!2 y00 y00 y00 q00)) (* (- 2) (* r!1 r!1 r!1)) (* (- 3) (* q!2 r!1 r!1 r!1)) (* (- 1) (* q!2 q!2 q!2 r!1 r!1 y00)) (* 2 (* q!2 q!2 q!2 r!1 y00 y00)) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00)) (* q!2 q!2 r!1 r!1 r00) (* (- 2) (* q!2 q!2 r!1 y00 r00)) (* q!2 q!2 y00 y00 r00) (* (- 1) (* q!2 q!2 r!1 r!1 r!1)) (* q!2 q!2 r!1 r!1 y00 q00) (* (- 2) (* q!2 q!2 r!1 y00 y00 q00)) (* q!2 q!2 y00 y00 y00 q00))))
 (let (($x799 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x70)) 0) (not (= ?x351 0)))))
 (let (($x83 (exists ((q Int) (r Int) (y Int) )(! (let ((?x335 (* y00 y00 y00 q00)))
 (let ((?x950 (* 2 ?x335)))
 (let ((?x123 (* y00 y00 r00)))
 (let ((?x715 (* 2 ?x123)))
 (let ((?x952 (+ (* 2 (* r r r00)) (* 3 (* q r r r00)) (* (- 4) (* r y00 r00)) (* (- 6) (* q r y00 r00)) ?x715 (* 3 (* q y00 y00 r00)) (* 4 (* r r y00)) (* 4 (* q r r y00)) (* (- 1) (* q q r r y00)) (* (- 2) (* r y00 y00)) (* q r y00 y00) (* 5 (* q q r y00 y00)) (* (- 2) (* q y00 y00 y00)) (* (- 3) (* q q y00 y00 y00)) (* 2 (* r r y00 q00)) (* 3 (* q r r y00 q00)) (* (- 4) (* r y00 y00 q00)) (* (- 6) (* q r y00 y00 q00)) ?x950 (* 3 (* q y00 y00 y00 q00)) (* (- 2) (* r r r)) (* (- 3) (* q r r r)) (* (- 1) (* q q q r r y00)) (* 2 (* q q q r y00 y00)) (* (- 1) (* q q q y00 y00 y00)) (* q q r r r00) (* (- 2) (* q q r y00 r00)) (* q q y00 y00 r00) (* (- 1) (* q q r r r)) (* q q r r y00 q00) (* (- 2) (* q q r y00 y00 q00)) (* q q y00 y00 y00 q00))))
 (let (($x100 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x100 (not (= ?x952 0))))))))) :qid k!29))
 ))
 (let (($x182 (exists ((q Int) (r Int) (y Int) )(! (let ((?x68 (* (- 1) y00)))
 (let ((?x810 (+ r ?x68)))
 (let ((?x624 (+ 1 q)))
 (let ((?x395 (+ (* r00 ?x624 ?x810 ?x810) (* (- 1) (* y00 ?x624 ?x624 ?x810 ?x810)) (* q00 y00 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x810 ?x810 ?x810)) (* (- 1) (* y00 ?x624 ?x624 ?x624 ?x810 ?x810)) (* r00 ?x624 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x624 ?x810 ?x810 ?x810)) (* q00 y00 ?x624 ?x624 ?x810 ?x810))))
 (let (($x811 (not (= ?x395 0))))
 (let (($x501 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x501 $x811))))))) :qid k!29))
 ))
 (let ((?x249 (lambda ((q Int) (r Int) (y Int) )(let ((?x335 (* y00 y00 y00 q00)))
 (let ((?x950 (* 2 ?x335)))
 (let ((?x123 (* y00 y00 r00)))
 (let ((?x715 (* 2 ?x123)))
 (let ((?x952 (+ (* 2 (* r r r00)) (* 3 (* q r r r00)) (* (- 4) (* r y00 r00)) (* (- 6) (* q r y00 r00)) ?x715 (* 3 (* q y00 y00 r00)) (* 4 (* r r y00)) (* 4 (* q r r y00)) (* (- 1) (* q q r r y00)) (* (- 2) (* r y00 y00)) (* q r y00 y00) (* 5 (* q q r y00 y00)) (* (- 2) (* q y00 y00 y00)) (* (- 3) (* q q y00 y00 y00)) (* 2 (* r r y00 q00)) (* 3 (* q r r y00 q00)) (* (- 4) (* r y00 y00 q00)) (* (- 6) (* q r y00 y00 q00)) ?x950 (* 3 (* q y00 y00 y00 q00)) (* (- 2) (* r r r)) (* (- 3) (* q r r r)) (* (- 1) (* q q q r r y00)) (* 2 (* q q q r y00 y00)) (* (- 1) (* q q q y00 y00 y00)) (* q q r r r00) (* (- 2) (* q q r y00 r00)) (* q q y00 y00 r00) (* (- 1) (* q q r r r)) (* q q r r y00 q00) (* (- 2) (* q q r y00 y00 q00)) (* q q y00 y00 y00 q00))))
 (let (($x100 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x141 (and (= (+ y (* (- 1) y00)) 0) $x100 (not (= ?x952 0)))))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x810 (+ r ?x68)))
 (let ((?x624 (+ 1 q)))
 (let ((?x395 (+ (* r00 ?x624 ?x810 ?x810) (* (- 1) (* y00 ?x624 ?x624 ?x810 ?x810)) (* q00 y00 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x810 ?x810 ?x810)) (* (- 1) (* y00 ?x624 ?x624 ?x624 ?x810 ?x810)) (* r00 ?x624 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x624 ?x810 ?x810 ?x810)) (* q00 y00 ?x624 ?x624 ?x810 ?x810))))
 (let (($x811 (not (= ?x395 0))))
 (let (($x501 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x410 (and (= (+ y00 (* (- 1) y)) 0) $x501 $x811)))
 (rewrite (= $x410 $x141)))))))))))))))))
 ))
 (let (($x821 (exists ((q Int) (r Int) (y Int) )(! (let ((?x68 (* (- 1) y00)))
 (let ((?x810 (+ r ?x68)))
 (let ((?x624 (+ 1 q)))
 (let ((?x395 (+ (* r00 ?x624 ?x810 ?x810) (* (- 1) (* y00 ?x624 ?x624 ?x810 ?x810)) (* q00 y00 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x810 ?x810 ?x810)) (* (- 1) (* y00 ?x624 ?x624 ?x624 ?x810 ?x810)) (* r00 ?x624 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x624 ?x810 ?x810 ?x810)) (* q00 y00 ?x624 ?x624 ?x810 ?x810))))
 (let (($x811 (not (= ?x395 0))))
 (let (($x501 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ ?x68 y) 0) $x501 $x811))))))) :qid k!29))
 ))
 (let ((?x270 (lambda ((q Int) (r Int) (y Int) )(let ((?x68 (* (- 1) y00)))
 (let ((?x810 (+ r ?x68)))
 (let ((?x624 (+ 1 q)))
 (let ((?x395 (+ (* r00 ?x624 ?x810 ?x810) (* (- 1) (* y00 ?x624 ?x624 ?x810 ?x810)) (* q00 y00 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x810 ?x810 ?x810)) (* (- 1) (* y00 ?x624 ?x624 ?x624 ?x810 ?x810)) (* r00 ?x624 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x624 ?x810 ?x810 ?x810)) (* q00 y00 ?x624 ?x624 ?x810 ?x810))))
 (let (($x811 (not (= ?x395 0))))
 (let (($x501 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x410 (and (= (+ y00 (* (- 1) y)) 0) $x501 $x811)))
 (let (($x495 (and (= (+ ?x68 y) 0) $x501 $x811)))
 (rewrite (= $x495 $x410)))))))))))
 ))
 (let (($x63 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x48 (+ (- (* ?x42 ?x43 ?x43 r00) (* ?x42 ?x42 ?x43 ?x43 y00)) (* ?x42 q00 ?x43 ?x43 y00))))
 (let ((?x52 (- (- ?x48 (* ?x42 ?x43 ?x43 ?x43)) (* ?x42 ?x42 ?x42 ?x43 ?x43 y00))))
 (let ((?x56 (- (+ ?x52 (* ?x42 ?x42 ?x43 ?x43 r00)) (* ?x42 ?x42 ?x43 ?x43 ?x43))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= (+ ?x56 (* ?x42 ?x42 q00 ?x43 ?x43 y00)) 0))))))))) :qid k!29))
 ))
 (let ((?x830 (lambda ((q Int) (r Int) (y Int) )(let ((?x68 (* (- 1) y00)))
 (let ((?x810 (+ r ?x68)))
 (let ((?x624 (+ 1 q)))
 (let ((?x395 (+ (* r00 ?x624 ?x810 ?x810) (* (- 1) (* y00 ?x624 ?x624 ?x810 ?x810)) (* q00 y00 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x810 ?x810 ?x810)) (* (- 1) (* y00 ?x624 ?x624 ?x624 ?x810 ?x810)) (* r00 ?x624 ?x624 ?x810 ?x810) (* (- 1) (* ?x624 ?x624 ?x810 ?x810 ?x810)) (* q00 y00 ?x624 ?x624 ?x810 ?x810))))
 (let (($x811 (not (= ?x395 0))))
 (let (($x501 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x495 (and (= (+ ?x68 y) 0) $x501 $x811)))
 (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x48 (+ (- (* ?x42 ?x43 ?x43 r00) (* ?x42 ?x42 ?x43 ?x43 y00)) (* ?x42 q00 ?x43 ?x43 y00))))
 (let ((?x52 (- (- ?x48 (* ?x42 ?x43 ?x43 ?x43)) (* ?x42 ?x42 ?x42 ?x43 ?x43 y00))))
 (let ((?x56 (- (+ ?x52 (* ?x42 ?x42 ?x43 ?x43 r00)) (* ?x42 ?x42 ?x43 ?x43 ?x43))))
 (let (($x62 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= (+ ?x56 (* ?x42 ?x42 q00 ?x43 ?x43 y00)) 0))))))
 (rewrite (= $x62 $x495))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x306 (mp (mp @x64 (quant-intro (proof-bind ?x830) (= $x63 $x821)) $x821) (rewrite (= $x821 $x821)) $x821)))
 (let ((@x506 (mp (mp @x306 (quant-intro (proof-bind ?x270) (= $x821 $x182)) $x182) (quant-intro (proof-bind ?x249) (= $x182 $x83)) $x83)))
 (let ((@x138 (mp (mp~ @x506 (sk (~ $x83 $x799)) $x799) (rewrite (= $x799 $x439)) $x439)))
 (let ((@x418 (and-elim @x138 $x889)))
 (let ((@x935 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x889) $x423)) @x418 $x423)))
 (let (($x871 (>= ?x568 0)))
 (let ((@x661 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x889) $x871)) @x418 $x871)))
 (let (($x598 (<= ?x111 0)))
 (let ((@x604 (and-elim @x138 $x116)))
 (let ((@x206 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x116) $x598)) @x604 $x598)))
 (let (($x422 (>= ?x111 0)))
 (let ((@x687 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x116) $x422)) @x604 $x422)))
 (let (($x428 (not (<= ?x130 0))))
 (let (($x528 (>= ?x130 0)))
 (let ((@x518 (lemma ((_ th-lemma arith) (hypothesis (not $x528)) @x687 @x206 @x661 @x935 false) $x528)))
 (let ((@x591 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x615 $x428 (not $x528))) (and-elim @x138 $x137) (or $x428 (not $x528)))))
 ((_ th-lemma arith) (unit-resolution @x591 @x518 $x428) @x687 @x206 @x661 @x935 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        4
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-gcd-tests           2
 :arith-grobner             2
 :arith-max-min             156
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-patches             2
 :arith-patches_succ        2
 :arith-pivots              3
 :arith-tableau-max-columns 53
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.70
 :memory                    3.20
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1211306
 :num-checks                1
 :propagations              6
 :rlimit-count              4371
 :time                      0.01
 :total-time                0.01)
