unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x222 (* (- 1) r!1)))
 (let ((?x256 (* 2 x!0)))
 (let ((?x179 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x377 (+ r00 ?x84 ?x100 ?x179 ?x256 ?x222)))
 (let (($x158 (<= ?x377 0)))
 (let (($x369 (= ?x377 0)))
 (let ((?x394 (* (- 5) (* r!1 r!1 r!1))))
 (let ((?x472 (* 2 (* x!0 x!0 x!0))))
 (let ((?x463 (* (- 4) (* r!1 r!1 r!1 r!1))))
 (let ((?x248 (* (- 1) (* r!1 r!1 r!1 r!1 r!1))))
 (let ((?x301 (* (- 2) ?x179)))
 (let ((?x305 (+ 1 (* (- 9) (* x!0 x!0 r!1 r!1)) (* (- 3) (* x!0 x!0 r!1 r!1 r!1)) ?x301 ?x248 (* 3 (* x!0 r!1 r!1 r!1 r!1)) x!0 (* (- 6) (* x!0 x!0 r!1)) (* x!0 x!0 x!0 r!1 r!1) r!1 (* 3 (* x!0 r!1)) (* 9 (* x!0 r!1 r!1)) (* 3 (* x!0 x!0 x!0 r!1)) (* 10 (* x!0 r!1 r!1 r!1)) ?x463 ?x472 ?x394)))
 (let ((?x373 (* ?x305 ?x377)))
 (let (($x398 (= ?x373 0)))
 (let (($x442 (not $x398)))
 (let (($x437 (and $x369 $x442)))
 (let ((?x254 (+ 1 r!1 x!0 ?x301 (* 3 (* r!1 x!0)) (* 9 (* r!1 r!1 x!0)) (* 10 (* r!1 r!1 r!1 x!0)) ?x394 ?x463 ?x472 (* 3 (* r!1 x!0 x!0 x!0)) (* r!1 r!1 x!0 x!0 x!0) ?x248 (* 3 (* r!1 r!1 r!1 r!1 x!0)) (* (- 6) (* r!1 x!0 x!0)) (* (- 9) (* r!1 r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x224 (and (= (+ r!1 (* (- 2) x!0) ?x115 (* (- 1) ?x179) ?x35 ?x36) 0) (not (= (* ?x254 (+ ?x222 ?x256 r00 ?x179 ?x84 ?x100)) 0)))))
 (let (($x151 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x517 (+ 1 r x (* (- 2) ?x30) (* 3 (* r x)) (* 9 (* r r x)) (* 10 (* r r r x)) (* (- 5) (* r r r)) (* (- 4) (* r r r r)) (* 2 (* x x x)) (* 3 (* r x x x)) (* r r x x x) (* (- 1) (* r r r r r)) (* 3 (* r r r r x)) (* (- 6) (* r x x)) (* (- 9) (* r r x x)) (* (- 3) (* r r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (and $x118 (not (= (* ?x517 ?x106) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x320 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x164 (* ?x123 ?x123)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x420 (+ x ?x63)))
 (let ((?x247 (+ (* ?x123 ?x123 ?x123 ?x420) ?x164 (* ?x123 ?x123 ?x420 ?x420 ?x420) (* ?x123 ?x420 ?x420 ?x420))))
 (let (($x253 (= (* ?x247 (+ (- 1) (* (- 3) r) r00 ?x164 ?x32 ?x84 ?x100)) 0)))
 (let (($x140 (not $x253)))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x140))))))))))))))))) :qid k!26))
 ))
 (let ((?x295 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x517 (+ 1 r x (* (- 2) ?x30) (* 3 (* r x)) (* 9 (* r r x)) (* 10 (* r r r x)) (* (- 5) (* r r r)) (* (- 4) (* r r r r)) (* 2 (* x x x)) (* 3 (* r x x x)) (* r r x x x) (* (- 1) (* r r r r r)) (* 3 (* r r r r x)) (* (- 6) (* r x x)) (* (- 9) (* r r x x)) (* (- 3) (* r r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (let (($x113 (and $x118 (not (= (* ?x517 ?x106) 0)))))
 (let ((?x123 (+ 1 r)))
 (let ((?x164 (* ?x123 ?x123)))
 (let ((?x247 (+ (* ?x123 ?x123 ?x123 (+ x ?x63)) ?x164 (* ?x123 ?x123 (+ x ?x63) (+ x ?x63) (+ x ?x63)) (* ?x123 (+ x ?x63) (+ x ?x63) (+ x ?x63)))))
 (let (($x253 (= (* ?x247 (+ (- 1) (* (- 3) r) r00 ?x164 ?x32 ?x84 ?x100)) 0)))
 (let (($x140 (not $x253)))
 (let (($x441 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x140)))
 (rewrite (= $x441 $x113)))))))))))))))))))))))
 ))
 (let (($x124 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x164 (* ?x123 ?x123)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x420 (+ x ?x63)))
 (let ((?x247 (+ (* ?x123 ?x123 ?x123 ?x420) ?x164 (* ?x123 ?x123 ?x420 ?x420 ?x420) (* ?x123 ?x420 ?x420 ?x420))))
 (let (($x253 (= (* ?x247 (+ (- 1) (* (- 3) r) r00 ?x164 ?x32 ?x84 ?x100)) 0)))
 (let (($x140 (not $x253)))
 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) $x140)))))))))))) :qid k!26))
 ))
 (let ((?x440 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x164 (* ?x123 ?x123)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x420 (+ x ?x63)))
 (let ((?x247 (+ (* ?x123 ?x123 ?x123 ?x420) ?x164 (* ?x123 ?x123 ?x420 ?x420 ?x420) (* ?x123 ?x420 ?x420 ?x420))))
 (let (($x253 (= (* ?x247 (+ (- 1) (* (- 3) r) r00 ?x164 ?x32 ?x84 ?x100)) 0)))
 (let (($x140 (not $x253)))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x441 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x140)))
 (let (($x160 (and (= (+ ?x63 r00 ?x30 ?x32 ?x84 ?x100) 0) $x140)))
 (rewrite (= $x160 $x441)))))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41 ?x44) ?x43 (* ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x44 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x53 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) ?x52)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x53 0)))))))))))) :qid k!26))
 ))
 (let ((?x145 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x164 (* ?x123 ?x123)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x420 (+ x ?x63)))
 (let ((?x247 (+ (* ?x123 ?x123 ?x123 ?x420) ?x164 (* ?x123 ?x123 ?x420 ?x420 ?x420) (* ?x123 ?x420 ?x420 ?x420))))
 (let (($x253 (= (* ?x247 (+ (- 1) (* (- 3) r) r00 ?x164 ?x32 ?x84 ?x100)) 0)))
 (let (($x140 (not $x253)))
 (let (($x160 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) $x140)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41 ?x44) ?x43 (* ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x44 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x53 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) ?x52)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 (or (not (= ?x53 0))))))
 (rewrite (= $x57 $x160)))))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x144 (mp (mp @x59 (quant-intro (proof-bind ?x145) (= $x58 $x124)) $x124) (rewrite (= $x124 $x124)) $x124)))
 (let ((@x422 (mp (mp @x144 (quant-intro (proof-bind ?x440) (= $x124 $x320)) $x320) (quant-intro (proof-bind ?x295) (= $x320 $x151)) $x151)))
 (let ((@x372 (mp (mp~ @x422 (sk (~ $x151 $x224)) $x224) (rewrite (= $x224 $x437)) $x437)))
 (let ((@x399 (and-elim @x372 $x369)))
 (let ((@x328 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x369) $x158)) @x399 $x158)))
 (let (($x157 (>= ?x377 0)))
 (let ((@x451 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x369) $x157)) @x399 $x157)))
 (let (($x374 (not (>= ?x373 0))))
 (let (($x138 (<= ?x373 0)))
 (let ((@x153 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x398 (not $x138) $x374)) (and-elim @x372 $x442) (or (not $x138) $x374))))
 (let ((@x90 (unit-resolution @x153 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x138)) @x451 @x328 false) $x138) $x374)))
 ((_ th-lemma arith farkas 1 1 1) @x90 @x451 @x328 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.60
 :memory                    3.11
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1102925
 :num-checks                1
 :propagations              4
 :rlimit-count              1883
 :time                      0.01
 :total-time                0.01)
