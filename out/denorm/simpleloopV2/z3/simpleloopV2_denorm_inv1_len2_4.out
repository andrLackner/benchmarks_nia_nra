unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x366 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x433 (>= ?x366 0)))
 (let (($x468 (= ?x366 0)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x422 (+ ?x61 ?x68 y!0 x!1)))
 (let ((?x511 (* y!0 x!1 x!1)))
 (let ((?x442 (* y!0 y!0 y!0 x!1 x!1)))
 (let ((?x385 (* y!0 y!0)))
 (let ((?x286 (* (- 2) ?x385)))
 (let ((?x260 (* y!0 y!0 y!0)))
 (let ((?x487 (+ y!0 ?x260 (* (- 4) (* y!0 y!0 x!1)) ?x286 ?x442 (* 2 (* y!0 x!1)) (* (- 2) (* y!0 y!0 x!1 x!1)) (* 2 (* y!0 y!0 y!0 x!1)) ?x511)))
 (let ((?x531 (* ?x487 ?x422)))
 (let (($x512 (= ?x531 0)))
 (let (($x530 (not $x512)))
 (let ((?x97 (* 4 ?x385)))
 (let ((?x502 (* (- 4) x!1)))
 (let ((?x170 (* 2 (* x!1 x!1))))
 (let ((?x437 (* 5 y!0)))
 (let ((?x119 (+ 2 ?x437 ?x260 ?x170 ?x502 (* (- 8) (* y!0 y!0 x!1)) ?x97 ?x442 (* (- 10) (* y!0 x!1)) (* 4 (* y!0 y!0 x!1 x!1)) (* (- 2) (* y!0 y!0 y!0 x!1)) (* 5 ?x511))))
 (let ((?x532 (* ?x119 ?x422)))
 (let (($x372 (= ?x532 0)))
 (let (($x310 (or (not $x372) $x530)))
 (let (($x333 (and $x468 $x310)))
 (let ((?x458 (+ x!1 y!0 ?x61 ?x68)))
 (let ((?x426 (* x!1 x!1 y!0)))
 (let ((?x190 (* x!1 x!1 y!0 y!0 y!0)))
 (let ((?x429 (+ y!0 ?x286 ?x260 (* 2 (* x!1 y!0 y!0 y!0)) ?x190 (* 2 (* x!1 y!0)) ?x426 (* (- 4) (* x!1 y!0 y!0)) (* (- 2) (* x!1 x!1 y!0 y!0)))))
 (let ((?x419 (+ 2 ?x502 ?x437 ?x97 ?x260 (* (- 2) (* x!1 y!0 y!0 y!0)) ?x190 ?x170 (* (- 10) (* x!1 y!0)) (* 5 ?x426) (* (- 8) (* x!1 y!0 y!0)) (* 4 (* x!1 x!1 y!0 y!0)))))
 (let (($x88 (and (= ?x458 0) (or (not (= (* ?x419 ?x458) 0)) (not (= (* ?x429 ?x458) 0))))))
 (let (($x467 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x217 (* x x y y)))
 (let ((?x508 (* (- 2) ?x217)))
 (let ((?x213 (* x y y)))
 (let ((?x507 (* (- 4) ?x213)))
 (let ((?x202 (* x x y)))
 (let ((?x198 (* x y)))
 (let ((?x506 (* 2 ?x198)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x436 (* 2 ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x169 (* y y)))
 (let ((?x505 (* (- 2) ?x169)))
 (let (($x327 (= (* (+ y ?x505 ?x176 ?x436 ?x182 ?x506 ?x202 ?x507 ?x508) ?x82) 0)))
 (let ((?x325 (* 4 ?x217)))
 (let ((?x323 (* 5 ?x202)))
 (let ((?x320 (* 2 (* x x))))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x319 (* 4 ?x169)))
 (let ((?x317 (* 5 y)))
 (let ((?x431 (+ 2 (* (- 4) x) ?x317 ?x319 ?x176 ?x254 ?x182 ?x320 (* (- 10) ?x198) ?x323 (* (- 8) ?x213) ?x325)))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or (not (= (* ?x431 ?x82) 0)) (not $x327)))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x463 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x217 (* x x y y)))
 (let ((?x508 (* (- 2) ?x217)))
 (let ((?x198 (* x y)))
 (let ((?x506 (* 2 ?x198)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x436 (* 2 ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x524 (+ y (* (- 1) (* y 1 x)) (* (- 1) (* y y 1 1)) (* (- 1) (* y x 1)) (* (- 1) (* y 1 1)) (* (- 1) (* y y)) ?x176 ?x436 ?x182 ?x506 (* (- 2) (* x y y)) ?x508 (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y y x 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) x x)))))
 (let ((?x325 (* 4 ?x217)))
 (let ((?x202 (* x x y)))
 (let ((?x323 (* 5 ?x202)))
 (let ((?x320 (* 2 (* x x))))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x169 (* y y)))
 (let ((?x319 (* 4 ?x169)))
 (let ((?x317 (* 5 y)))
 (let ((?x326 (+ 2 (* (- 2) x) ?x317 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x319 (* (- 1) (* x 1 y y)) ?x176 ?x254 ?x182 ?x320 (* (- 5) ?x198) ?x323 (* (- 5) (* x y y)) ?x325 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)))))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or (not (= (* ?x326 ?x82) 0)) (not (= (* ?x524 ?x82) 0)))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x493 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x217 (* x x y y)))
 (let ((?x508 (* (- 2) ?x217)))
 (let ((?x213 (* x y y)))
 (let ((?x507 (* (- 4) ?x213)))
 (let ((?x202 (* x x y)))
 (let ((?x198 (* x y)))
 (let ((?x506 (* 2 ?x198)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x436 (* 2 ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x169 (* y y)))
 (let ((?x505 (* (- 2) ?x169)))
 (let (($x327 (= (* (+ y ?x505 ?x176 ?x436 ?x182 ?x506 ?x202 ?x507 ?x508) ?x82) 0)))
 (let ((?x325 (* 4 ?x217)))
 (let ((?x323 (* 5 ?x202)))
 (let ((?x320 (* 2 (* x x))))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x319 (* 4 ?x169)))
 (let ((?x317 (* 5 y)))
 (let ((?x431 (+ 2 (* (- 4) x) ?x317 ?x319 ?x176 ?x254 ?x182 ?x320 (* (- 10) ?x198) ?x323 (* (- 8) ?x213) ?x325)))
 (let (($x87 (= ?x82 0)))
 (let (($x423 (and $x87 (or (not (= (* ?x431 ?x82) 0)) (not $x327)))))
 (let ((?x524 (+ y (* (- 1) (* y 1 x)) (* (- 1) (* y y 1 1)) (* (- 1) (* y x 1)) (* (- 1) (* y 1 1)) (* (- 1) ?x169) ?x176 ?x436 ?x182 ?x506 (* (- 2) ?x213) ?x508 (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y y x 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) x x)))))
 (let ((?x326 (+ 2 (* (- 2) x) ?x317 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x319 (* (- 1) (* x 1 y y)) ?x176 ?x254 ?x182 ?x320 (* (- 5) ?x198) ?x323 (* (- 5) ?x213) ?x325 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)))))
 (let (($x527 (and $x87 (or (not (= (* ?x326 ?x82) 0)) (not (= (* ?x524 ?x82) 0))))))
 (rewrite (= $x527 $x423))))))))))))))))))))))))))))))))
 ))
 (let (($x155 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x288 (+ x ?x61 ?x68 y)))
 (let ((?x374 (+ 1 x)))
 (let ((?x347 (+ (- 1) y)))
 (let (($x387 (= (* (+ (* ?x347 ?x347 ?x347 ?x374 ?x374) (* ?x347 ?x347 ?x374 ?x374)) ?x288) 0)))
 (let ((?x100 (+ 1 y)))
 (let ((?x143 (+ (- 1) x)))
 (let (($x373 (= (* (+ (* ?x143 ?x143 ?x100 ?x100 ?x100) (* ?x143 ?x143 ?x100 ?x100)) ?x288) 0)))
 (and (= ?x288 0) (or (not $x373) (not $x387)))))))))))) :qid k!27))
 ))
 (let ((?x424 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x217 (* x x y y)))
 (let ((?x508 (* (- 2) ?x217)))
 (let ((?x198 (* x y)))
 (let ((?x506 (* 2 ?x198)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x436 (* 2 ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x524 (+ y (* (- 1) (* y 1 x)) (* (- 1) (* y y 1 1)) (* (- 1) (* y x 1)) (* (- 1) (* y 1 1)) (* (- 1) (* y y)) ?x176 ?x436 ?x182 ?x506 (* (- 2) (* x y y)) ?x508 (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y y x 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) x x)))))
 (let ((?x325 (* 4 ?x217)))
 (let ((?x202 (* x x y)))
 (let ((?x323 (* 5 ?x202)))
 (let ((?x320 (* 2 (* x x))))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x169 (* y y)))
 (let ((?x319 (* 4 ?x169)))
 (let ((?x317 (* 5 y)))
 (let ((?x326 (+ 2 (* (- 2) x) ?x317 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x319 (* (- 1) (* x 1 y y)) ?x176 ?x254 ?x182 ?x320 (* (- 5) ?x198) ?x323 (* (- 5) (* x y y)) ?x325 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)))))
 (let (($x87 (= ?x82 0)))
 (let (($x527 (and $x87 (or (not (= (* ?x326 ?x82) 0)) (not (= (* ?x524 ?x82) 0))))))
 (let ((?x288 (+ x ?x61 ?x68 y)))
 (let ((?x374 (+ 1 x)))
 (let ((?x347 (+ (- 1) y)))
 (let (($x387 (= (* (+ (* ?x347 ?x347 ?x347 ?x374 ?x374) (* ?x347 ?x347 ?x374 ?x374)) ?x288) 0)))
 (let ((?x100 (+ 1 y)))
 (let ((?x143 (+ (- 1) x)))
 (let (($x373 (= (* (+ (* ?x143 ?x143 ?x100 ?x100 ?x100) (* ?x143 ?x143 ?x100 ?x100)) ?x288) 0)))
 (let (($x299 (and (= ?x288 0) (or (not $x373) (not $x387)))))
 (rewrite (= $x299 $x527))))))))))))))))))))))))))))))))))
 ))
 (let (($x58 (exists ((x Int) (y Int) )(! (let ((?x48 (- y 1)))
 (let ((?x45 (+ x 1)))
 (let ((?x53 (* (+ (- (- ?x45 y00) x00) ?x48) (+ (* ?x45 ?x45 ?x48 ?x48 ?x48) (* ?x45 ?x45 ?x48 ?x48)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38 ?x38)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0)) (not (= ?x53 0)))))))))) :qid k!27))
 ))
 (let ((?x291 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x288 (+ x ?x61 ?x68 y)))
 (let ((?x374 (+ 1 x)))
 (let ((?x347 (+ (- 1) y)))
 (let (($x387 (= (* (+ (* ?x347 ?x347 ?x347 ?x374 ?x374) (* ?x347 ?x347 ?x374 ?x374)) ?x288) 0)))
 (let ((?x100 (+ 1 y)))
 (let ((?x143 (+ (- 1) x)))
 (let (($x373 (= (* (+ (* ?x143 ?x143 ?x100 ?x100 ?x100) (* ?x143 ?x143 ?x100 ?x100)) ?x288) 0)))
 (let (($x299 (and (= ?x288 0) (or (not $x373) (not $x387)))))
 (let ((?x48 (- y 1)))
 (let ((?x45 (+ x 1)))
 (let ((?x53 (* (+ (- (- ?x45 y00) x00) ?x48) (+ (* ?x45 ?x45 ?x48 ?x48 ?x48) (* ?x45 ?x45 ?x48 ?x48)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38 ?x38)))))
 (let (($x57 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0)) (not (= ?x53 0))))))
 (rewrite (= $x57 $x299))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x294 (mp (mp @x59 (quant-intro (proof-bind ?x291) (= $x58 $x155)) $x155) (rewrite (= $x155 $x155)) $x155)))
 (let ((@x91 (mp (mp @x294 (quant-intro (proof-bind ?x424) (= $x155 $x463)) $x463) (quant-intro (proof-bind ?x493) (= $x463 $x467)) $x467)))
 (let ((@x81 (mp (mp~ @x91 (sk (~ $x467 $x88)) $x88) (rewrite (= $x88 $x333)) $x333)))
 (let ((@x279 (and-elim @x81 $x468)))
 (let ((@x312 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x433)) @x279 $x433)))
 (let (($x263 (<= ?x366 0)))
 (let ((@x516 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x263)) @x279 $x263)))
 (let (($x536 (not (<= ?x531 0))))
 (let (($x72 (>= ?x531 0)))
 (let (($x457 (>= ?x532 0)))
 (let (($x434 (<= ?x532 0)))
 (let ((@x499 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x372 (not $x434) (not $x457))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x434)) @x516 @x312 false) $x434) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x457)) @x516 @x312 false) $x457) $x372)))
 (let ((@x497 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x512 $x536 (not $x72))) (unit-resolution (and-elim @x81 $x310) @x499 $x530) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x72)) @x516 @x312 false) $x72) $x536)))
 ((_ th-lemma arith farkas 1 1 1) @x497 @x516 @x312 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        28
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             120
 :arith-nonlinear-bounds    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.62
 :memory                    3.15
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1097262
 :num-checks                1
 :propagations              14
 :rlimit-count              2683
 :time                      0.01
 :total-time                0.01)
