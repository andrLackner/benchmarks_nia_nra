unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x43 ?x45 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 y00 y00 y00)))
 (let ((?x47 (- ?x44 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (* ?x42 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x51))))))))))))))) :qid k!29))
 ))
 (let (($x254 (= $x53 false)))
 (let (($x247 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x253 (elim-unused (= $x247 false))))
 (let (($x250 (= $x53 $x247)))
 (let ((?x307 (lambda ((q Int) (r Int) (y Int) )(let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x43 ?x45 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 y00 y00 y00)))
 (let ((?x47 (- ?x44 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (* ?x42 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x245 (= $x52 false)))
 (let (($x284 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x82 (= (+ (* (- 1) y00) y) 0)))
 (let (($x301 (and $x82 $x284 false)))
 (let (($x238 (= $x51 false)))
 (let ((@x237 (rewrite (= (or false) false))))
 (let (($x233 (or false)))
 (let (($x234 (= $x51 $x233)))
 (let (($x231 (= $x50 false)))
 (let ((@x230 (rewrite (= (not true) false))))
 (let (($x226 (not true)))
 (let (($x227 (= $x50 $x226)))
 (let (($x224 (= $x49 true)))
 (let ((@x223 (rewrite (= (= 0 0) true))))
 (let (($x219 (= 0 0)))
 (let (($x220 (= $x49 $x219)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x99 (+ r ?x58)))
 (let ((?x77 (+ 1 q)))
 (let ((?x265 (* y00 y00 y00 ?x77 ?x77 ?x77 ?x99)))
 (let ((?x257 (* (- 1) (* y00 y00 y00 ?x77))))
 (let ((?x281 (+ ?x257 (* (- 1) ?x265))))
 (let ((?x289 (* 0 ?x281)))
 (let ((@x79 (rewrite (= ?x43 ?x77))))
 (let ((@x104 (monotonicity @x79 @x79 @x79 (rewrite (= ?x45 ?x99)) (= ?x46 (* ?x77 ?x77 ?x77 ?x99 y00 y00 y00)))))
 (let ((@x272 (trans @x104 (rewrite (= (* ?x77 ?x77 ?x77 ?x99 y00 y00 y00) ?x265)) (= ?x46 ?x265))))
 (let ((@x85 (monotonicity (rewrite (= ?x28 (- 1))) @x79 (= ?x44 (* (- 1) ?x77 y00 y00 y00)))))
 (let ((@x264 (trans @x85 (rewrite (= (* (- 1) ?x77 y00 y00 y00) ?x257)) (= ?x44 ?x257))))
 (let ((@x288 (trans (monotonicity @x264 @x272 (= ?x47 (- ?x257 ?x265))) (rewrite (= (- ?x257 ?x265) ?x281)) (= ?x47 ?x281))))
 (let ((@x74 (trans (monotonicity (rewrite (= ?x30 ?x58)) (= ?x42 (+ ?x58 y00))) (rewrite (= (+ ?x58 y00) 0)) (= ?x42 0))))
 (let ((@x294 (trans (monotonicity @x74 @x288 (= ?x48 ?x289)) (rewrite (= ?x289 0)) $x49)))
 (let ((@x298 (trans (monotonicity (trans (monotonicity @x294 $x220) @x223 $x224) $x227) @x230 $x231)))
 (let ((@x303 (monotonicity (rewrite (= $x33 $x82)) (rewrite (= $x41 $x284)) (trans (monotonicity @x298 $x234) @x237 $x238) (= $x52 $x301))))
 (trans @x303 (rewrite (= $x301 false)) $x245))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (mp @x54 (trans (quant-intro (proof-bind ?x307) $x250) @x253 $x254) false))))))))))

(:max-memory   3.38
 :memory       3.07
 :mk-bool-var  5
 :num-allocs   916736
 :rlimit-count 209
 :time         0.01
 :total-time   0.01)
