unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x496 (to_real b!2)))
 (let ((?x463 (to_real a!3)))
 (let ((?x394 (to_real d!1)))
 (let ((?x69 (to_real a00)))
 (let ((?x504 (to_real y!0)))
 (let ((?x839 (* ?x394 ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x463 ?x496 ?x504 ?x504)))
 (let ((?x837 (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x496 ?x504 ?x504 ?x504)))
 (let ((?x66 (to_real y00)))
 (let ((?x297 (* (- (/ 1.0 16.0)) (* ?x66 ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x496 ?x504 ?x504))))
 (let ((?x714 (* (/ 1.0 32.0) (* ?x69 ?x394 ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x504 ?x504))))
 (let ((?x118 (+ ?x714 (* (/ 1.0 4.0) (* ?x394 ?x394 ?x463 ?x463 ?x496 ?x504 ?x504)) (* (/ 1.0 8.0) (* ?x69 ?x394 ?x394 ?x394 ?x463 ?x463 ?x504)) (* (- (/ 1.0 32.0)) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x496)) ?x297 (* (- (/ 1.0 4.0)) (* ?x66 ?x394 ?x394 ?x463 ?x463 ?x496 ?x504)) (* (- (/ 1.0 8.0)) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x504)) (* (/ 1.0 16.0) ?x837) (* (- (/ 1.0 32.0)) ?x839) (* (/ 1.0 16.0) (* ?x394 ?x394 ?x463 ?x463 ?x496 ?x496 ?x496 ?x504)) (* (- (/ 1.0 16.0)) (* ?x66 ?x394 ?x394 ?x463 ?x463 ?x496 ?x496 ?x496)) (* (/ 1.0 32.0) (* ?x69 ?x394 ?x394 ?x394 ?x463 ?x463 ?x496 ?x496)))))
 (let (($x616 (<= ?x118 0.0)))
 (let (($x256 (not $x616)))
 (let (($x561 (= ?x118 0.0)))
 (let (($x562 (not $x561)))
 (let ((?x951 (* ?x394 ?x463)))
 (let ((?x883 (* (/ 1.0 2.0) ?x951)))
 (let ((?x512 (* ?x69 ?x394)))
 (let ((?x519 (* (- (/ 1.0 2.0)) ?x512)))
 (let ((?x467 (* ?x66 ?x496)))
 (let ((?x364 (* ?x496 ?x504)))
 (let ((?x373 (* (- 1.0) ?x364)))
 (let ((?x946 (* (/ 3.0 16.0) (* ?x394 ?x394 ?x394 ?x463 ?x496 ?x496 ?x496 ?x504 ?x504))))
 (let ((?x366 (* (/ 1.0 16.0) (* ?x394 ?x394 ?x394 ?x496 ?x496 ?x496 ?x496 ?x504 ?x504))))
 (let ((?x920 (* (/ 3.0 16.0) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x496 ?x496 ?x504 ?x504))))
 (let ((?x918 (* (/ 3.0 16.0) (* ?x394 ?x394 ?x394 ?x394 ?x463 ?x463 ?x496 ?x496 ?x504))))
 (let ((?x914 (* (/ 3.0 16.0) (* ?x394 ?x394 ?x394 ?x394 ?x463 ?x496 ?x496 ?x496 ?x504))))
 (let ((?x911 (* (/ 1.0 16.0) (* ?x394 ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x504))))
 (let ((?x902 (* (/ 3.0 64.0) (* ?x394 ?x394 ?x394 ?x394 ?x394 ?x463 ?x463 ?x496 ?x496))))
 (let ((?x908 (* (/ 1.0 64.0) (* ?x394 ?x394 ?x394 ?x394 ?x394 ?x496 ?x496 ?x496 ?x496))))
 (let ((?x905 (* (/ 1.0 64.0) (* ?x394 ?x394 ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496))))
 (let ((?x880 (* (/ 3.0 64.0) (* ?x394 ?x394 ?x394 ?x394 ?x394 ?x463 ?x496 ?x496 ?x496))))
 (let ((?x618 (* (/ 1.0 4.0) (* ?x394 ?x394 ?x496 ?x496 ?x504))))
 (let ((?x894 (* (/ 1.0 4.0) (* ?x394 ?x394 ?x394 ?x463 ?x496))))
 (let ((?x900 (* (/ 1.0 2.0) (* ?x394 ?x394 ?x463 ?x496 ?x504))))
 (let ((?x897 (* (/ 1.0 8.0) (* ?x394 ?x394 ?x394 ?x463 ?x463))))
 (let ((?x879 (* (/ 1.0 8.0) (* ?x394 ?x394 ?x394 ?x496 ?x496))))
 (let ((?x893 (* (/ 1.0 16.0) (* ?x394 ?x394 ?x496 ?x496 ?x496 ?x496))))
 (let ((?x891 (* (/ 1.0 8.0) (* ?x394 ?x394 ?x463 ?x496 ?x496 ?x496))))
 (let ((?x917 (* (/ 1.0 16.0) (* ?x394 ?x394 ?x394 ?x394 ?x496 ?x496 ?x496 ?x496 ?x504))))
 (let ((?x191 (* (/ 1.0 16.0) (* ?x394 ?x394 ?x463 ?x463 ?x496 ?x496))))
 (let ((?x136 (* (/ 1.0 4.0) (* ?x394 ?x394 ?x463 ?x463 ?x504))))
 (let ((?x878 (* (/ 1.0 16.0) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x504 ?x504))))
 (let ((?x834 (+ ?x878 ?x136 ?x191 ?x917 ?x891 ?x893 ?x879 ?x897 ?x900 ?x894 ?x618 ?x880 ?x905 ?x908 ?x902 ?x911 ?x914 ?x918 ?x920 ?x366 ?x946)))
 (let (($x510 (= (* ?x834 (+ ?x373 ?x467 ?x519 ?x883)) 0.0)))
 (let ((?x821 (+ ?x883 ?x373 ?x467 ?x519)))
 (let (($x507 (= 0.0 ?x821)))
 (let (($x870 (>= ?x821 0.0)))
 (let ((?x702 (+ ?x512 (* (- 1.0) (to_real (* a00 d!1))))))
 (let (($x831 (= 0.0 ?x702)))
 (let (($x737 (= ?x702 0.0)))
 (let ((@x509 (lemma (unit-resolution ((_ th-lemma arith) $x737) (hypothesis (not $x737)) false) $x737)))
 (let ((@x526 (unit-resolution (hypothesis (not $x831)) (symm (hypothesis $x737) $x831) false)))
 (let ((@x469 (unit-resolution (lemma @x526 (or (not $x737) $x831)) @x509 $x831)))
 (let (($x279 (>= ?x702 0.0)))
 (let ((@x480 (hypothesis $x831)))
 (let ((@x347 ((_ th-lemma arith triangle-eq) (or (not $x831) $x279))))
 (let (($x147 (<= ?x702 0.0)))
 (let ((@x483 ((_ th-lemma arith triangle-eq) (or (not $x831) $x147))))
 (let ((?x414 (* a00 d!1)))
 (let ((?x943 (+ ?x414 (* 2 (* y!0 b!2)) (* (- 2) (* y00 b!2)) (* (- 1) (* a!3 d!1)))))
 (let (($x600 (>= ?x943 0)))
 (let (($x391 (= 0 ?x943)))
 (let ((@x594 (symm (commutativity (= $x391 (= ?x943 0))) (= (= ?x943 0) $x391))))
 (let (($x944 (= ?x943 0)))
 (let (($x606 (not $x510)))
 (let (($x518 (or $x562 $x606)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x246 (= (+ ?x35 ?x106 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x174 (and $x246 (= (+ (* b00 d!1) (* (- 1) (* d00 b!2))) 0) $x944 $x518)))
 (let ((?x949 (+ ?x191 ?x136 ?x878 ?x891 ?x893 ?x897 ?x894 ?x879 ?x900 ?x618 ?x905 ?x902 ?x880 ?x908 ?x911 ?x918 ?x914 ?x917 ?x920 ?x946 ?x366)))
 (let (($x534 (= (* ?x949 (+ ?x883 ?x373 (* ?x496 ?x66) (* (- (/ 1.0 2.0)) (* ?x394 ?x69)))) 0.0)))
 (let ((?x334 (* (- (/ 1.0 32.0)) (* ?x394 ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x504 ?x504 ?x69))))
 (let ((?x611 (* (/ 1.0 16.0) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x496 ?x504 ?x504 ?x66))))
 (let ((?x341 (+ (* (/ 1.0 32.0) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x496 ?x496)) (* (- (/ 1.0 16.0)) (* ?x394 ?x394 ?x463 ?x463 ?x496 ?x496 ?x496 ?x504)) (* (/ 1.0 16.0) (* ?x394 ?x394 ?x463 ?x463 ?x496 ?x496 ?x496 ?x66)) (* (- (/ 1.0 32.0)) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x496 ?x496 ?x69)) (* (/ 1.0 8.0) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x463 ?x504)) (* (- (/ 1.0 4.0)) (* ?x394 ?x394 ?x463 ?x463 ?x496 ?x504 ?x504)) (* (/ 1.0 4.0) (* ?x394 ?x394 ?x463 ?x463 ?x496 ?x504 ?x66)) (* (- (/ 1.0 8.0)) (* ?x394 ?x394 ?x394 ?x463 ?x463 ?x504 ?x69)) (* (/ 1.0 32.0) ?x839) (* (- (/ 1.0 16.0)) ?x837) ?x611 ?x334)))
 (let ((?x596 (* a!3 d!1)))
 (let ((?x436 (+ ?x596 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x235 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x106 (* 2 (* y!0 b00))) 0)))
 (let (($x540 (and $x235 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x436 0) (or (not (= ?x341 0.0)) (not $x534)))))
 (let (($x701 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x166 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x250 (+ ?x166 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x945 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x942 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x939 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x936 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x938 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) ?x936 ?x939 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x942 ?x945 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x69 (to_real a00)))
 (let ((?x423 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x413 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x66))))
 (let ((?x403 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x393 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63))))
 (let ((?x425 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x69)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x69)) ?x393 ?x403 ?x413 ?x423)))
 (let (($x152 (not (= ?x425 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x173 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x178 (= ?x173 0)))
 (let (($x103 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (and $x138 $x103 $x178 (or $x152 (not (= (* ?x938 ?x250) 0.0))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x760 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x752 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x716 (* ?x66 ?x61)))
 (let ((?x773 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x716 ?x752)))
 (let ((?x63 (to_real y)))
 (let ((?x700 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x782 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x860 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x782 ?x782)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x782 ?x782 ?x700)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x782 ?x782 ?x782 ?x700 ?x700)))))
 (let ((?x811 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x802 (* ?x811 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x716 ?x752))))
 (let (($x833 (or (not (= ?x802 0.0)) (not (= (* ?x860 ?x773) 0.0)))))
 (let ((?x679 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x682 (= ?x679 0)))
 (let ((?x626 (* d00 a)))
 (let ((?x771 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x626)))
 (and (= ?x771 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x682 $x833))))))))))))))))))) :qid k!33))
 ))
 (let ((?x645 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x166 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x250 (+ ?x166 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x945 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x942 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x939 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x936 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x938 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) ?x936 ?x939 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x942 ?x945 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x69 (to_real a00)))
 (let ((?x423 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x413 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x66))))
 (let ((?x403 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x393 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63))))
 (let ((?x425 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x69)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x69)) ?x393 ?x403 ?x413 ?x423)))
 (let (($x152 (not (= ?x425 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x173 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x178 (= ?x173 0)))
 (let (($x103 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (let (($x446 (and $x138 $x103 $x178 (or $x152 (not (= (* ?x938 ?x250) 0.0))))))
 (let ((?x752 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x716 (* ?x66 ?x61)))
 (let ((?x773 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x59 ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x716 ?x752)))
 (let ((?x700 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x782 (+ ?x59 ?x61)))
 (let ((?x860 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x782 ?x782)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x782 ?x782 ?x700)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x782 ?x782 ?x782 ?x700 ?x700)))))
 (let ((?x811 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let (($x652 (not (= (* ?x811 (+ ?x166 (* (- 1.0) (* ?x63 ?x61)) ?x716 ?x752)) 0.0))))
 (let (($x833 (or $x652 (not (= (* ?x860 ?x773) 0.0)))))
 (let ((?x679 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x682 (= ?x679 0)))
 (let ((?x626 (* d00 a)))
 (let (($x755 (= (+ (* 2 ?x105) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x626) 0)))
 (let (($x754 (and $x755 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x682 $x833)))
 (rewrite (= $x754 $x446)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x832 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x752 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x716 (* ?x66 ?x61)))
 (let ((?x773 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x716 ?x752)))
 (let ((?x63 (to_real y)))
 (let ((?x700 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x782 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x860 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x782 ?x782)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x782 ?x782 ?x700)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x782 ?x782 ?x782 ?x700 ?x700)))))
 (let ((?x811 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x802 (* ?x811 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x716 ?x752))))
 (let (($x833 (or (not (= ?x802 0.0)) (not (= (* ?x860 ?x773) 0.0)))))
 (let ((?x679 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x682 (= ?x679 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x637 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x637 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x682 $x833))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x765 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x752 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x716 (* ?x66 ?x61)))
 (let ((?x773 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x716 ?x752)))
 (let ((?x63 (to_real y)))
 (let ((?x700 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x782 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x860 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x782 ?x782)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x782 ?x782 ?x700)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x782 ?x782 ?x782 ?x700 ?x700)))))
 (let ((?x811 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x802 (* ?x811 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x716 ?x752))))
 (let (($x833 (or (not (= ?x802 0.0)) (not (= (* ?x860 ?x773) 0.0)))))
 (let ((?x679 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x682 (= ?x679 0)))
 (let ((?x626 (* d00 a)))
 (let ((?x771 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x626)))
 (let (($x754 (and (= ?x771 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x682 $x833)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x663 (and (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) ?x626)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x682 $x833)))
 (rewrite (= $x663 $x754))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x83 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x81 (to_real (+ a b))))
 (let ((?x91 (+ (* ?x81 ?x81 ?x62 ?x62 ?x58 ?x58) (* ?x81 ?x81 ?x58 ?x58 ?x83) (* ?x81 ?x81 ?x81 ?x62 ?x58 ?x58 ?x58 ?x83 ?x83))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x93 (= (* (- (+ (- (* ?x81 ?x58) (* ?x57 ?x62 ?x83)) ?x67) ?x70) ?x91) ?x77)))
 (let ((?x59 (to_real a)))
 (let ((?x75 (+ (* ?x59 ?x59 ?x62 ?x62 ?x58 ?x58) (* ?x59 ?x59 ?x58 ?x58 ?x63) (* ?x59 ?x59 ?x59 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let (($x78 (= (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x75) ?x77)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x78) (not $x93))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x693 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x752 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x716 (* ?x66 ?x61)))
 (let ((?x773 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x716 ?x752)))
 (let ((?x63 (to_real y)))
 (let ((?x700 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x782 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x860 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x782 ?x782)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x782 ?x782 ?x700)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x782 ?x782 ?x782 ?x700 ?x700)))))
 (let ((?x811 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x802 (* ?x811 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x716 ?x752))))
 (let (($x833 (or (not (= ?x802 0.0)) (not (= (* ?x860 ?x773) 0.0)))))
 (let ((?x679 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x682 (= ?x679 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x637 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x663 (and $x637 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x682 $x833)))
 (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x81 (to_real (+ a b))))
 (let ((?x91 (+ (* ?x81 ?x81 ?x62 ?x62 ?x58 ?x58) (* ?x81 ?x81 ?x58 ?x58 ?x83) (* ?x81 ?x81 ?x81 ?x62 ?x58 ?x58 ?x58 ?x83 ?x83))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x87 (- (+ (- (* ?x81 ?x58) (* ?x57 ?x62 ?x83)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x75 (+ (* ?x59 ?x59 ?x62 ?x62 ?x58 ?x58) (* ?x59 ?x59 ?x58 ?x58 ?x63) (* ?x59 ?x59 ?x59 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x96 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x71 ?x75) ?x77)) (not (= (* ?x87 ?x91) ?x77))))))
 (rewrite (= $x96 $x663)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x680 (mp (mp @x98 (quant-intro (proof-bind ?x693) (= $x97 $x832)) $x832) (rewrite (= $x832 $x832)) $x832)))
 (let ((@x389 (mp (mp @x680 (quant-intro (proof-bind ?x765) (= $x832 $x760)) $x760) (quant-intro (proof-bind ?x645) (= $x760 $x701)) $x701)))
 (let ((@x609 (mp (mp~ @x389 (sk (~ $x701 $x540)) $x540) (rewrite (= $x540 $x174)) $x174)))
 (let ((@x570 (mp (and-elim @x609 $x944) @x594 $x391)))
 (let ((@x601 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x600)) @x570 $x600)))
 (let (($x202 (<= ?x943 0)))
 (let ((@x473 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x202)) @x570 $x202)))
 (let ((@x487 (unit-resolution ((_ th-lemma arith) (or (not $x202) (not $x600) $x870 (not $x279) (not $x147))) @x473 @x601 (hypothesis (not $x870)) (unit-resolution @x483 @x480 $x147) (unit-resolution @x347 @x480 $x279) false)))
 (let (($x185 (<= ?x821 0.0)))
 (let ((@x751 ((_ th-lemma arith) $x737)))
 (let ((@x346 (unit-resolution @x347 (mp @x751 (symm (commutativity (= $x831 $x737)) (= $x737 $x831)) $x831) $x279)))
 (let ((?x706 (+ ?x467 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x608 (<= ?x706 0.0)))
 (let (($x520 (= 0.0 ?x706)))
 (let ((@x401 (symm (commutativity (= $x520 (= ?x706 0.0))) (= (= ?x706 0.0) $x520))))
 (let ((@x804 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x520) $x608)) (mp ((_ th-lemma arith) (= ?x706 0.0)) @x401 $x520) $x608)))
 (let ((?x208 (+ ?x364 (* (- 1.0) (to_real (* y!0 b!2))))))
 (let (($x477 (>= ?x208 0.0)))
 (let ((@x175 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x208 0.0)) $x477)) ((_ th-lemma arith) (= ?x208 0.0)) $x477)))
 (let ((?x252 (+ ?x951 (* (- 1.0) (to_real ?x596)))))
 (let (($x646 (<= ?x252 0.0)))
 (let ((@x356 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x252 0.0)) $x646)) ((_ th-lemma arith) (= ?x252 0.0)) $x646)))
 (let ((@x365 (lemma ((_ th-lemma arith) @x356 @x601 @x175 @x804 (hypothesis (not $x185)) @x346 false) $x185)))
 (let ((@x132 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x507 (not $x185) (not $x870))) @x365 (unit-resolution (lemma @x487 (or (not $x831) $x870)) @x469 $x870) $x507)))
 (let (($x506 (= ?x821 0.0)))
 (let (($x124 (not $x506)))
 (let ((@x145 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x124 $x510)) (hypothesis $x606) $x124) (symm (hypothesis $x507) $x506) false)))
 (let ((@x177 (unit-resolution (and-elim @x609 $x518) (unit-resolution (lemma @x145 (or (not $x507) $x510)) @x132 $x510) $x562)))
 (let (($x612 (>= ?x118 0.0)))
 (let ((@x578 (unit-resolution ((_ th-lemma arith) (or (not $x147) (not $x279) $x612 (not $x600) (not $x202))) @x473 @x601 (hypothesis (not $x612)) (unit-resolution @x483 @x469 $x147) (unit-resolution @x347 @x469 $x279) false)))
 (let ((@x576 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x561 $x256 (not $x612))) (lemma @x578 $x612) @x177 $x256)))
 (unit-resolution ((_ th-lemma arith) (or $x616 (not $x600) (not $x202))) @x473 @x601 @x576 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       57
 :arith-eq-adapter                43
 :arith-bound-propagations-cheap  31
 :arith-bound-propagations-lp     6
 :arith-conflicts                 48
 :arith-diseq                     48
 :arith-gcd-calls                 4
 :arith-grobner-calls             5
 :arith-grobner-conflicts         3
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 13
 :arith-lower                     50
 :arith-make-feasible             47
 :arith-max-columns               91
 :arith-max-rows                  21
 :arith-nla-explanations          121
 :arith-nla-lemmas                47
 :arith-patches                   4
 :arith-patches-success           4
 :arith-propagations              31
 :arith-upper                     54
 :conflicts                       9
 :decisions                       46
 :del-clause                      159
 :final-checks                    35
 :max-memory                      6.49
 :memory                          3.16
 :mk-bool-var                     188
 :mk-clause                       197
 :num-allocs                      33481132
 :num-checks                      1
 :propagations                    93
 :rlimit-count                    6705
 :time                            0.07
 :total-time                      0.07)
