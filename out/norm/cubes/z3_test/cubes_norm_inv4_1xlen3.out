unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x1022 (+ m!1 (* (- 6) n!0))))
 (let (($x401 (<= ?x1022 6)))
 (let (($x1567 (= ?x1022 6)))
 (let ((?x816 (* (- 72) (* k!2 m!1 m!1))))
 (let ((?x415 (* (- 24) (* m!1 m!1 m!1))))
 (let ((?x469 (* (- 9) (* k!2 k!2 m!1 m!1 n!0))))
 (let ((?x894 (* (- 18) (* m!1 m!1 m!1 n!0))))
 (let ((?x467 (+ c!3 k!2)))
 (let ((?x883 (+ k!2 m!1)))
 (let ((?x470 (+ 1 n!0)))
 (let ((?x1056 (* ?x470 ?x470 ?x883 ?x883 ?x467 ?x467 ?x467)))
 (let ((?x1027 (* (- 54) (* k!2 k!2 m!1 n!0))))
 (let ((?x1592 (* 2 (* m!1 m!1 m!1 m!1))))
 (let ((?x462 (+ 6 m!1)))
 (let ((?x560 (* (- 3) (* ?x470 ?x470 ?x462 ?x462 ?x462 ?x883 ?x467 ?x467))))
 (let ((?x882 (* (- 3) (* ?x470 ?x470 ?x470 ?x470 ?x883 ?x467 ?x467 ?x467))))
 (let ((?x874 (* (- 3) (* k!2 k!2 k!2 m!1 n!0))))
 (let ((?x589 (* (- 1) (* ?x470 ?x470 ?x883 ?x467 ?x467 ?x467))))
 (let ((?x885 (* ?x470 ?x462 ?x462 ?x462 ?x883 ?x883 ?x467 ?x467)))
 (let ((?x542 (* (- 3) (* ?x470 ?x470 ?x462 ?x883 ?x883 ?x883))))
 (let ((?x825 (* (- 24) (* k!2 k!2 k!2))))
 (let ((?x572 (* 4 (* k!2 k!2 k!2 m!1 m!1))))
 (let ((?x896 (* (- 54) (* k!2 m!1 m!1 n!0))))
 (let ((?x454 (* 6 (* k!2 k!2 m!1 m!1 m!1))))
 (let ((?x416 (* (- 3) (* ?x470 ?x470 ?x470 ?x462 ?x462 ?x462 ?x883 ?x467 ?x467))))
 (let ((?x475 (* (- 3) (* m!1 m!1 m!1 m!1 n!0))))
 (let ((?x472 (* (- 9) (* k!2 m!1 m!1 m!1 n!0))))
 (let ((?x465 (* (- 3) (* ?x470 ?x470 ?x470 ?x883 ?x467 ?x467 ?x467))))
 (let ((?x1034 (* (- 18) (* k!2 k!2 k!2 n!0))))
 (let ((?x818 (* (- 72) (* k!2 k!2 m!1))))
 (let ((?x555 (* (- 1) (* ?x470 ?x462 ?x462 ?x462 ?x883 ?x467 ?x467))))
 (let ((?x234 (* k!2 k!2 k!2 k!2 m!1)))
 (let ((?x1189 (* 6 (* k!2 k!2 k!2 k!2))))
 (let ((?x453 (* 4 (* k!2 m!1 m!1 m!1 m!1))))
 (let ((?x225 (* m!1 m!1 m!1 m!1 m!1)))
 (let ((?x1009 (+ ?x225 ?x453 ?x1189 ?x234 ?x555 ?x818 ?x1034 ?x465 ?x472 ?x475 ?x416 ?x454 ?x896 ?x572 ?x825 ?x542 ?x885 ?x589 ?x874 ?x882 ?x560 ?x1592 ?x1027 ?x1056 ?x894 ?x469 (* 12 (* k!2 m!1 m!1 m!1)) (* 20 (* k!2 k!2 k!2 m!1)) (* 24 (* k!2 k!2 m!1 m!1)) ?x415 ?x816)))
 (let (($x1227 (= ?x1009 0)))
 (let (($x1148 (not $x1227)))
 (let ((?x406 (* (- 1) k!2)))
 (let ((?x1521 (+ (* 3 (* n!0 n!0)) ?x406 (* 3 n!0))))
 (let (($x239 (= ?x1521 (- 1))))
 (let ((?x455 (* k!2 n!0)))
 (let ((?x404 (+ ?x455 (* (- 3) c!3) ?x406 (* 2 n!0))))
 (let (($x396 (= ?x404 (- 1))))
 (let ((?x1126 (* (- 9) n!0)))
 (let ((?x694 (* (- 1) (* k!2 k!2))))
 (let ((?x498 (* 9 (* c!3 n!0))))
 (let ((?x1125 (* 5 k!2)))
 (let ((?x968 (* 18 c!3)))
 (let ((?x1117 (+ ?x968 ?x1125 ?x498 ?x694 ?x1126)))
 (let (($x538 (= ?x1117 4)))
 (let (($x1167 (and $x1567 $x538 $x396 $x239 $x1148)))
 (let ((?x320 (+ (* 6 (* m!1 k!2 k!2 k!2)) ?x475 ?x472 ?x469 ?x465 (* 6 (* k!2 k!2 m!1 k!2)) (* 6 (* m!1 k!2 m!1 k!2)) ?x542 ?x882 (* 6 (* m!1 m!1 k!2 m!1)) (* 6 (* m!1 k!2 m!1 m!1)) (* 6 (* k!2 m!1 k!2 m!1)) ?x874 ?x894 ?x896 ?x1027 ?x1034 ?x1592 (* (- 6) (* k!2 m!1 m!1 m!1)) (* (- 6) (* k!2 k!2 m!1 m!1)) (* 2 (* k!2 k!2 k!2 m!1)) ?x415 ?x816 ?x818 ?x825 ?x555 ?x560 ?x416 (* 6 (* k!2 m!1 m!1 k!2)) (* 6 (* m!1 m!1 m!1 k!2)) (* 6 (* m!1 m!1 k!2 k!2)) ?x1056 (* 6 (* m!1 k!2 k!2 m!1)) ?x234 ?x572 ?x454 ?x225 ?x453 ?x1189 (* 6 (* k!2 m!1 k!2 k!2)) ?x885 ?x589)))
 (let (($x887 (and $x1567 (= (+ ?x968 ?x1125 ?x1126 ?x694 ?x498) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x455)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x320 0)))))
 (let (($x442 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x1172 (* (- 1) (* ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x315 (+ 6 m)))
 (let ((?x1204 (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x1169 (* m m m m m)))
 (let ((?x1156 (* k k k k m)))
 (let ((?x1141 (* ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x1102 (* (- 3) (* ?x317 ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x961 (* (- 3) (* ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x808 (* (- 1) (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x418 (* (- 3) (* ?x317 ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x391 (* (- 3) (* ?x317 ?x317 ?x315 ?x70 ?x70 ?x70))))
 (let ((?x1180 (* (- 3) (* ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x1598 (+ (* 6 (* m k k k)) (* (- 3) (* m m m m n)) (* (- 9) (* k m m m n)) (* (- 9) (* k k m m n)) ?x1180 (* 6 (* k k m k)) (* 6 (* m k m k)) ?x391 ?x418 (* 6 (* m m k m)) (* 6 (* m k m m)) (* 6 (* k m k m)) (* (- 3) (* k k k m n)) (* (- 18) (* m m m n)) (* (- 54) (* k m m n)) (* (- 54) (* k k m n)) (* (- 18) (* k k k n)) (* 2 (* m m m m)) (* (- 6) (* k m m m)) (* (- 6) (* k k m m)) (* 2 (* k k k m)) (* (- 24) (* m m m)) (* (- 72) (* k m m)) (* (- 72) (* k k m)) (* (- 24) (* k k k)) ?x808 ?x961 ?x1102 (* 6 (* k m m k)) (* 6 (* m m m k)) (* 6 (* m m k k)) ?x1141 (* 6 (* m k k m)) ?x1156 (* 4 (* k k k m m)) (* 6 (* k k m m m)) ?x1169 (* 4 (* k m m m m)) (* 6 (* k k k k)) (* 6 (* k m k k)) ?x1204 ?x1172)))
 (let (($x307 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x269 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x221 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x217 (= ?x221 4)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (and $x133 $x217 $x269 $x307 (not (= ?x1598 0)))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x423 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x1530 (* (- 1) (* (+ 6 m) (+ k m) (+ k m) (+ k m)))))
 (let ((?x70 (+ k m)))
 (let ((?x315 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x1172 (* (- 1) (* ?x317 ?x317 ?x70 (+ c k) (+ c k) (+ c k)))))
 (let ((?x69 (+ c k)))
 (let ((?x1204 (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x1102 (* (- 3) (* ?x317 ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x808 (* (- 1) (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x961 (* (- 3) (* ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x1141 (* ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x1180 (* (- 3) (* ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x391 (* (- 3) (* ?x317 ?x317 ?x315 ?x70 ?x70 ?x70))))
 (let ((?x418 (* (- 3) (* ?x317 ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x1508 (+ ?x418 ?x391 ?x1180 ?x1141 ?x961 ?x808 ?x1102 ?x1204 ?x1172 (* ?x315 ?x70 ?x70 ?x70 ?x70) (* (- 3) (* ?x317 ?x315 ?x70 ?x70 ?x70)) ?x1530)))
 (let (($x429 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x463 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x1014 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (and $x133 (= ?x1014 (- 4)) $x463 $x429 (not (= ?x1508 0)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x693 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x1172 (* (- 1) (* ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x315 (+ 6 m)))
 (let ((?x1204 (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x1169 (* m m m m m)))
 (let ((?x1156 (* k k k k m)))
 (let ((?x1141 (* ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x1102 (* (- 3) (* ?x317 ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x961 (* (- 3) (* ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x808 (* (- 1) (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x418 (* (- 3) (* ?x317 ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x391 (* (- 3) (* ?x317 ?x317 ?x315 ?x70 ?x70 ?x70))))
 (let ((?x1180 (* (- 3) (* ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x1598 (+ (* 6 (* m k k k)) (* (- 3) (* m m m m n)) (* (- 9) (* k m m m n)) (* (- 9) (* k k m m n)) ?x1180 (* 6 (* k k m k)) (* 6 (* m k m k)) ?x391 ?x418 (* 6 (* m m k m)) (* 6 (* m k m m)) (* 6 (* k m k m)) (* (- 3) (* k k k m n)) (* (- 18) (* m m m n)) (* (- 54) (* k m m n)) (* (- 54) (* k k m n)) (* (- 18) (* k k k n)) (* 2 (* m m m m)) (* (- 6) (* k m m m)) (* (- 6) (* k k m m)) (* 2 (* k k k m)) (* (- 24) (* m m m)) (* (- 72) (* k m m)) (* (- 72) (* k k m)) (* (- 24) (* k k k)) ?x808 ?x961 ?x1102 (* 6 (* k m m k)) (* 6 (* m m m k)) (* 6 (* m m k k)) ?x1141 (* 6 (* m k k m)) ?x1156 (* 4 (* k k k m m)) (* 6 (* k k m m m)) ?x1169 (* 4 (* k m m m m)) (* 6 (* k k k k)) (* 6 (* k m k k)) ?x1204 ?x1172)))
 (let (($x307 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x269 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x221 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x217 (= ?x221 4)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (let (($x1481 (and $x133 $x217 $x269 $x307 (not (= ?x1598 0)))))
 (let ((?x1508 (+ ?x418 ?x391 ?x1180 ?x1141 ?x961 ?x808 ?x1102 ?x1204 ?x1172 (* ?x315 ?x70 ?x70 ?x70 ?x70) (* (- 3) (* ?x317 ?x315 ?x70 ?x70 ?x70)) (* (- 1) (* ?x315 ?x70 ?x70 ?x70)))))
 (let (($x429 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x463 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x1014 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x414 (and $x133 (= ?x1014 (- 4)) $x463 $x429 (not (= ?x1508 0)))))
 (rewrite (= $x414 $x1481))))))))))))))))))))))))))))))))))
 ))
 (let (($x100 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x76 (- (* (- 3) ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* 3 ?x70 ?x70 ?x70 ?x73 ?x71 ?x71))))
 (let ((?x79 (+ (- ?x76 (* 3 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x84 (- (- ?x79 (* 3 ?x69 ?x69 ?x70 ?x73 ?x73 ?x73 ?x71 ?x71)) (* ?x69 ?x69 ?x70 ?x73 ?x73 ?x73 ?x71))))
 (let ((?x87 (+ (- ?x84 (* 3 ?x69 ?x69 ?x70 ?x73 ?x73 ?x73 ?x71 ?x71 ?x71)) (* ?x69 ?x69 ?x70 ?x70 ?x73 ?x73 ?x73 ?x71))))
 (let ((?x91 (+ (- ?x87 (* ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x70 ?x70 ?x70 ?x70 ?x73))))
 (let ((?x95 (- (- ?x91 (* 3 ?x70 ?x70 ?x70 ?x73 ?x71)) (* ?x70 ?x70 ?x70 ?x73))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x95 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x419 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x1530 (* (- 1) (* (+ 6 m) (+ k m) (+ k m) (+ k m)))))
 (let ((?x70 (+ k m)))
 (let ((?x315 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x1172 (* (- 1) (* ?x317 ?x317 ?x70 (+ c k) (+ c k) (+ c k)))))
 (let ((?x69 (+ c k)))
 (let ((?x1204 (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x1102 (* (- 3) (* ?x317 ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x808 (* (- 1) (* ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x961 (* (- 3) (* ?x317 ?x317 ?x315 ?x315 ?x315 ?x70 ?x69 ?x69))))
 (let ((?x1141 (* ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x1180 (* (- 3) (* ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x391 (* (- 3) (* ?x317 ?x317 ?x315 ?x70 ?x70 ?x70))))
 (let ((?x418 (* (- 3) (* ?x317 ?x317 ?x317 ?x317 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x1508 (+ ?x418 ?x391 ?x1180 ?x1141 ?x961 ?x808 ?x1102 ?x1204 ?x1172 (* ?x315 ?x70 ?x70 ?x70 ?x70) (* (- 3) (* ?x317 ?x315 ?x70 ?x70 ?x70)) ?x1530)))
 (let (($x429 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x463 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x1014 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (let (($x414 (and $x133 (= ?x1014 (- 4)) $x463 $x429 (not (= ?x1508 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x76 (- (* (- 3) ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* 3 ?x70 ?x70 ?x70 ?x73 ?x71 ?x71))))
 (let ((?x79 (+ (- ?x76 (* 3 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x84 (- (- ?x79 (* 3 ?x69 ?x69 ?x70 ?x73 ?x73 ?x73 ?x71 ?x71)) (* ?x69 ?x69 ?x70 ?x73 ?x73 ?x73 ?x71))))
 (let ((?x87 (+ (- ?x84 (* 3 ?x69 ?x69 ?x70 ?x73 ?x73 ?x73 ?x71 ?x71 ?x71)) (* ?x69 ?x69 ?x70 ?x70 ?x73 ?x73 ?x73 ?x71))))
 (let ((?x91 (+ (- ?x87 (* ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x70 ?x70 ?x70 ?x70 ?x73))))
 (let ((?x95 (- (- ?x91 (* 3 ?x70 ?x70 ?x70 ?x73 ?x71)) (* ?x70 ?x70 ?x70 ?x73))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x99 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x95 0))))))
 (rewrite (= $x99 $x414)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x101 (asserted $x100)))
 (let ((@x705 (mp (mp @x101 (quant-intro (proof-bind ?x419) (= $x100 $x423)) $x423) (rewrite (= $x423 $x423)) $x423)))
 (let ((@x1569 (mp~ (mp @x705 (quant-intro (proof-bind ?x693) (= $x423 $x442)) $x442) (sk (~ $x442 $x887)) $x887)))
 (let ((@x938 (mp @x1569 (rewrite (= $x887 $x1167)) $x1167)))
 (let ((@x1228 (and-elim @x938 $x1567)))
 (let ((@x566 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1567) $x401)) @x1228 $x401)))
 (let (($x389 (>= ?x1022 6)))
 (let ((@x149 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1567) $x389)) @x1228 $x389)))
 (let (($x576 (<= ?x1521 (- 1))))
 (let ((@x394 (and-elim @x938 $x239)))
 (let ((@x1232 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x239) $x576)) @x394 $x576)))
 (let (($x399 (>= ?x1521 (- 1))))
 (let ((@x1106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x239) $x399)) @x394 $x399)))
 (let (($x255 (<= ?x1117 4)))
 (let ((@x402 (and-elim @x938 $x538)))
 (let ((@x936 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x538) $x255)) @x402 $x255)))
 (let (($x574 (>= ?x1117 4)))
 (let ((@x929 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x538) $x574)) @x402 $x574)))
 (let (($x830 (<= ?x404 (- 1))))
 (let ((@x393 (and-elim @x938 $x396)))
 (let ((@x1511 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x396) $x830)) @x393 $x830)))
 (let (($x457 (>= ?x404 (- 1))))
 (let ((@x433 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x396) $x457)) @x393 $x457)))
 (let (($x974 (not (<= ?x1009 0))))
 (let (($x712 (>= ?x1009 0)))
 (let ((@x1165 ((_ th-lemma arith) (hypothesis (not $x712)) @x1106 @x1232 @x433 @x1511 @x1106 @x1232 @x149 @x566 @x1106 @x1232 @x929 @x936 @x1106 @x1232 @x1106 @x1232 @x149 @x566 @x149 @x566 false)))
 (let ((@x1089 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1227 $x974 (not $x712))) (and-elim @x938 $x1148) (or $x974 (not $x712)))))
 ((_ th-lemma arith) (unit-resolution @x1089 (lemma @x1165 $x712) $x974) @x1106 @x1232 @x433 @x1511 @x1106 @x1232 @x149 @x566 @x1106 @x1232 @x929 @x936 @x1106 @x1232 @x1106 @x1232 @x149 @x566 @x149 @x566 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             419
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 67
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                19.80
 :memory                    19.33
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                612707
 :num-checks                1
 :propagations              11
 :rlimit-count              14138
 :time                      0.01
 :total-time                0.03)
