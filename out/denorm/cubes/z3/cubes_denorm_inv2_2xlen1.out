unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x424 (* m!1 m!1)))
 (let ((?x135 (* 2 (* k!2 m!1))))
 (let ((?x360 (* k!2 k!2)))
 (let ((?x175 (* (- 5) m!1)))
 (let ((?x200 (* c!3 n!0)))
 (let ((?x176 (* (- 9) ?x200)))
 (let ((?x249 (* (- 32) k!2)))
 (let ((?x453 (* 9 n!0)))
 (let ((?x157 (* (- 27) c!3)))
 (let ((?x111 (+ 13 ?x157 ?x453 ?x249 (* (- 9) (* n!0 k!2)) ?x176 ?x175 ?x360 ?x135 ?x424)))
 (let (($x1098 (<= ?x111 0)))
 (let ((?x272 (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0)))))
 (let (($x373 (<= ?x272 (- 1))))
 (let (($x268 (= ?x272 (- 1))))
 (let ((?x158 (+ c!3 k!2)))
 (let ((?x168 (+ k!2 m!1)))
 (let ((?x167 (+ 6 m!1)))
 (let ((?x327 (+ 1 n!0)))
 (let ((?x108 (* ?x327 ?x327 ?x167 ?x167 ?x167 ?x168 ?x168 ?x168 ?x158 ?x158 ?x158 ?x111)))
 (let (($x129 (= ?x108 0)))
 (let (($x103 (not $x129)))
 (let ((?x320 (* (- 2) n!0)))
 (let ((?x317 (* 3 c!3)))
 (let ((?x318 (+ ?x317 ?x320 k!2 (* (- 1) (* n!0 k!2)))))
 (let (($x468 (= ?x318 1)))
 (let ((?x418 (* (- 1) ?x360)))
 (let ((?x210 (* 9 ?x200)))
 (let ((?x381 (* 5 k!2)))
 (let ((?x194 (* (- 9) n!0)))
 (let ((?x123 (* 18 c!3)))
 (let ((?x443 (+ ?x123 ?x194 ?x381 ?x210 ?x418)))
 (let (($x222 (= ?x443 4)))
 (let ((?x298 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x299 (= ?x298 (- 6))))
 (let (($x328 (and $x299 $x222 $x468 $x268 $x103)))
 (let ((?x425 (+ 13 ?x157 ?x249 ?x175 ?x453 ?x360 (* (- 9) (* k!2 n!0)) ?x176 ?x135 ?x424)))
 (let (($x420 (= (* ?x327 ?x327 ?x167 ?x167 ?x167 ?x168 ?x168 ?x168 ?x158 ?x158 ?x158 ?x425) 0)))
 (let (($x422 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x123 ?x381 ?x194 ?x418 ?x210) 4) (= (+ ?x317 k!2 ?x320 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x420))))
 (let (($x371 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let (($x107 (= (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x476) 0)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not $x107))))))))))))))))))) :qid k!34))
 ))
 (let (($x174 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let (($x447 (= (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x408) 0)))
 (let (($x300 (not $x447)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x89 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x89 $x289 $x300)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x386 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let (($x107 (= (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x476) 0)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x301 (and $x119 $x203 $x255 $x293 (not $x107))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* ?x336 ?x68)) ?x421 ?x48 ?x78)))
 (let (($x447 (= (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x408) 0)))
 (let (($x300 (not $x447)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x89 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x403 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x89 $x289 $x300)))
 (rewrite (= $x403 $x301)))))))))))))))))))))))))))))
 ))
 (let (($x213 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let (($x447 (= (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x408) 0)))
 (let (($x300 (not $x447)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x212 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x212 $x159 $x289 $x300)))))))))))))))) :qid k!34))
 ))
 (let ((?x201 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let (($x447 (= (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x408) 0)))
 (let (($x300 (not $x447)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x89 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x403 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x89 $x289 $x300)))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x212 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x228 (and $x119 $x212 $x159 $x289 $x300)))
 (rewrite (= $x228 $x403))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x81 (* (+ ?x76 (* 9 ?x70) ?x78) ?x68 ?x72 ?x72 ?x80 ?x68 ?x68 ?x72 ?x80 ?x80 ?x70 ?x70)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x217 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let (($x447 (= (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x408) 0)))
 (let (($x300 (not $x447)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x212 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x228 (and $x119 $x212 $x159 $x289 $x300)))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x81 (* (+ ?x76 (* 9 ?x70) ?x78) ?x68 ?x72 ?x72 ?x80 ?x68 ?x68 ?x72 ?x80 ?x80 ?x70 ?x70)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x228))))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x365 (mp (mp @x87 (quant-intro (proof-bind ?x217) (= $x86 $x213)) $x213) (rewrite (= $x213 $x213)) $x213)))
 (let ((@x120 (mp (mp @x365 (quant-intro (proof-bind ?x201) (= $x213 $x174)) $x174) (quant-intro (proof-bind ?x386) (= $x174 $x371)) $x371)))
 (let ((@x339 (mp (mp~ @x120 (sk (~ $x371 $x422)) $x422) (rewrite (= $x422 $x328)) $x328)))
 (let ((@x225 (and-elim @x339 $x268)))
 (let ((@x459 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x373)) @x225 $x373)))
 (let (($x342 (>= ?x272 (- 1))))
 (let ((@x223 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x342)) @x225 $x342)))
 (let (($x376 (<= ?x443 4)))
 (let ((@x219 (and-elim @x339 $x222)))
 (let ((@x136 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x222) $x376)) @x219 $x376)))
 (let (($x382 (>= ?x443 4)))
 (let ((@x252 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x222) $x382)) @x219 $x382)))
 (let (($x374 (<= ?x318 1)))
 (let ((@x234 (and-elim @x339 $x468)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x374)) @x234 $x374)))
 (let (($x375 (>= ?x318 1)))
 (let ((@x279 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x375)) @x234 $x375)))
 (let (($x377 (<= ?x298 (- 6))))
 (let ((@x112 (and-elim @x339 $x299)))
 (let ((@x248 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x377)) @x112 $x377)))
 (let (($x379 (>= ?x298 (- 6))))
 (let ((@x180 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x379)) @x112 $x379)))
 (let ((@x1088 ((_ th-lemma arith) (hypothesis (not $x1098)) @x180 @x248 @x223 @x459 @x180 @x248 @x279 @x238 @x252 @x136 @x223 @x459 false)))
 (let ((@x1089 (lemma @x1088 $x1098)))
 (let (($x221 (>= ?x111 0)))
 (let ((@x331 ((_ th-lemma arith) (hypothesis (not $x221)) @x180 @x248 @x180 @x248 @x180 @x248 @x223 @x459 @x279 @x238 @x279 @x238 @x180 @x248 @x180 @x248 @x252 @x136 false)))
 (let ((@x332 (lemma @x331 $x221)))
 (let (($x1090 (not (<= ?x108 0))))
 (let (($x368 (>= ?x108 0)))
 (let ((@x1103 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x368)) @x332 (hypothesis $x1098) false) (or (not $x1098) $x368))))
 (let ((@x1104 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x129 $x1090 (not $x368))) (and-elim @x339 $x103) (or $x1090 (not $x368)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x1104 (unit-resolution @x1103 @x1089 $x368) $x1090) @x332 @x1089 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 47
 :arith-assert-diseq        9
 :arith-assert-lower        277
 :arith-assert-upper        271
 :arith-bound-prop          12
 :arith-branch-var          23
 :arith-conflicts           36
 :arith-eq-adapter          11
 :arith-fixed-eqs           59
 :arith-gcd-tests           260
 :arith-gomory-cuts         18
 :arith-grobner             33
 :arith-ineq-splits         23
 :arith-max-min             2021
 :arith-nonlinear-bounds    58
 :arith-nonlinear-horner    356
 :arith-num-rows            15
 :arith-offset-eqs          4
 :arith-patches             54
 :arith-patches_succ        8
 :arith-pivots              476
 :arith-pseudo-nonlinear    37
 :arith-row-summations      3089
 :arith-tableau-max-columns 43
 :arith-tableau-max-rows    15
 :conflicts                 37
 :decisions                 152
 :del-clause                76
 :final-checks              127
 :max-memory                3.82
 :memory                    3.23
 :minimized-lits            4
 :mk-bool-var               232
 :mk-clause                 153
 :num-allocs                2208820
 :num-checks                1
 :propagations              121
 :rlimit-count              135767
 :time                      0.03
 :total-time                0.04)
