unsat
((set-logic NIA)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(proof
(let ((?x252 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x482 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 ?x252 (* (- 2) u!1) (* (- 1) (* v!0 v!0)) (* 2 v!0) (* (- 4) r!2))))
 (let (($x483 (>= ?x482 0)))
 (let (($x791 (= ?x482 0)))
 (let ((?x864 (* 4 r!2)))
 (let ((?x869 (* (- 2) v!0)))
 (let ((?x452 (* v!0 v!0)))
 (let ((?x845 (* 2 u!1)))
 (let ((?x253 (* (- 1) ?x252)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x503 (+ ?x110 ?x126 ?x41 ?x46 ?x202 ?x253 ?x845 ?x452 ?x869 ?x864)))
 (let ((?x618 (* u!1 u!1 v!0)))
 (let ((?x484 (* (- 6) ?x618)))
 (let ((?x487 (* u!1 v!0 v!0 v!0)))
 (let ((?x726 (* (- 5) ?x487)))
 (let ((?x201 (* (- 2) (* u!1 u!1 u!1 v!0))))
 (let ((?x435 (* (- 6) (* v!0 v!0 v!0))))
 (let ((?x193 (* (- 1) (* u!1 u!1 v!0 v!0 v!0))))
 (let ((?x195 (* u!1 v!0)))
 (let ((?x597 (* (- 4) ?x195)))
 (let ((?x114 (* (- 1) (* u!1 v!0 r!2 r!2))))
 (let ((?x797 (+ (* (- 8) (* u!1 v!0 r!2)) ?x114 (* (- 2) (* v!0 r!2 r!2)) ?x597 (* (- 4) (* v!0 r!2)) ?x193 ?x435 ?x201 ?x726 ?x484 (* (- 3) (* u!1 u!1 v!0 r!2)))))
 (let ((?x409 (* ?x797 ?x503)))
 (let (($x527 (= ?x409 0)))
 (let (($x408 (not $x527)))
 (let ((?x616 (* (- 10) ?x618)))
 (let ((?x686 (* (- 2) ?x487)))
 (let ((?x499 (* (- 8) u!1)))
 (let ((?x500 (* (- 8) ?x252)))
 (let ((?x626 (* (- 8) (* u!1 v!0 v!0))))
 (let ((?x568 (* (- 12) ?x195)))
 (let ((?x602 (* (- 5) (* u!1 u!1 v!0 v!0))))
 (let ((?x159 (+ (* 4 (* u!1 v!0 r!2)) ?x114 (* (- 2) (* u!1 r!2 r!2)) ?x602 ?x568 ?x626 (* (- 2) (* u!1 u!1 r!2)) ?x500 ?x499 (* 2 (* u!1 v!0 v!0 r!2)) ?x193 ?x686 ?x616 (* (- 1) (* u!1 u!1 v!0 r!2)))))
 (let ((?x464 (* ?x159 ?x503)))
 (let (($x600 (= ?x464 0)))
 (let (($x162 (or (not $x600) $x408)))
 (let (($x375 (and $x791 $x162)))
 (let ((?x415 (+ ?x864 ?x845 ?x869 ?x110 ?x126 ?x41 ?x253 ?x452 ?x46 ?x202)))
 (let ((?x621 (* (- 1) (* r!2 r!2 u!1 v!0))))
 (let ((?x297 (+ ?x726 (* (- 3) (* r!2 u!1 u!1 v!0)) ?x484 ?x621 (* (- 8) (* r!2 u!1 v!0)) ?x193 ?x435 ?x201 (* (- 4) (* r!2 v!0)) ?x597 (* (- 2) (* r!2 r!2 v!0)))))
 (let ((?x430 (+ ?x499 ?x500 ?x686 (* (- 1) (* r!2 u!1 u!1 v!0)) (* (- 2) (* r!2 u!1 u!1)) ?x616 ?x602 ?x621 (* (- 2) (* r!2 r!2 u!1)) (* 4 (* r!2 u!1 v!0)) ?x626 (* 2 (* r!2 u!1 v!0 v!0)) ?x193 ?x568)))
 (let (($x419 (and (= ?x415 0) (or (not (= (* ?x430 ?x415) 0)) (not (= (* ?x297 ?x415) 0))))))
 (let (($x571 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x603 (* (- 1) (* u u v v v))))
 (let ((?x515 (* (- 1) (* r r u v))))
 (let ((?x868 (+ (* (- 5) (* u v v v)) (* (- 3) (* r u u v)) (* (- 6) (* u u v)) ?x515 (* (- 8) (* r u v)) ?x603 (* (- 6) (* v v v)) (* (- 2) (* u u u v)) (* (- 4) (* r v)) (* (- 4) (* u v)) (* (- 2) (* r r v)))))
 (let ((?x532 (* 2 (* r u v v))))
 (let ((?x451 (* r u v)))
 (let ((?x526 (* 4 ?x451)))
 (let ((?x523 (* (- 2) (* r r u))))
 (let ((?x623 (* (- 5) (* u u v v))))
 (let ((?x374 (* u u v)))
 (let ((?x620 (* (- 10) ?x374)))
 (let ((?x410 (* (- 2) (* r u u))))
 (let ((?x359 (* r u u v)))
 (let ((?x403 (* (- 1) ?x359)))
 (let ((?x347 (* u v v v)))
 (let ((?x528 (* (- 2) ?x347)))
 (let ((?x608 (* (- 8) ?x43)))
 (let ((?x518 (+ (* (- 8) u) ?x608 ?x528 ?x403 ?x410 ?x620 ?x623 ?x515 ?x523 ?x526 (* (- 8) (* u v v)) ?x532 ?x603 (* (- 12) (* u v)))))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or (not (= (* ?x518 ?x208) 0)) (not (= (* ?x868 ?x208) 0))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x563 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x404 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x290 (+ (* (- 1) (* (+ 2 u) v v v)) (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ r u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ 2 u) v v v)))))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x226 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x418 (* (- 1) (* (+ 2 v) (+ 2 v) (+ 2 v) u u))))
 (let ((?x685 (+ r (* (- 1) v))))
 (let ((?x489 (+ 2 v)))
 (let ((?x398 (+ (* (- 1) (* ?x489 ?x489 ?x489 u)) (* (- 1) (* ?x489 ?x685 u u)) (* (- 1) (* ?x489 ?x685 ?x685 u)) ?x418)))
 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x398 ?x226) 0)) (not (= (* ?x290 ?x404) 0))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x369 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x603 (* (- 1) (* u u v v v))))
 (let ((?x515 (* (- 1) (* r r u v))))
 (let ((?x868 (+ (* (- 5) (* u v v v)) (* (- 3) (* r u u v)) (* (- 6) (* u u v)) ?x515 (* (- 8) (* r u v)) ?x603 (* (- 6) (* v v v)) (* (- 2) (* u u u v)) (* (- 4) (* r v)) (* (- 4) (* u v)) (* (- 2) (* r r v)))))
 (let ((?x532 (* 2 (* r u v v))))
 (let ((?x451 (* r u v)))
 (let ((?x526 (* 4 ?x451)))
 (let ((?x523 (* (- 2) (* r r u))))
 (let ((?x623 (* (- 5) (* u u v v))))
 (let ((?x374 (* u u v)))
 (let ((?x620 (* (- 10) ?x374)))
 (let ((?x410 (* (- 2) (* r u u))))
 (let ((?x359 (* r u u v)))
 (let ((?x403 (* (- 1) ?x359)))
 (let ((?x347 (* u v v v)))
 (let ((?x528 (* (- 2) ?x347)))
 (let ((?x608 (* (- 8) ?x43)))
 (let ((?x518 (+ (* (- 8) u) ?x608 ?x528 ?x403 ?x410 ?x620 ?x623 ?x515 ?x523 ?x526 (* (- 8) (* u v v)) ?x532 ?x603 (* (- 12) (* u v)))))
 (let (($x213 (= ?x208 0)))
 (let (($x776 (and $x213 (or (not (= (* ?x518 ?x208) 0)) (not (= (* ?x868 ?x208) 0))))))
 (let ((?x404 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x290 (+ (* (- 1) (* (+ 2 u) v v v)) (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ r u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ 2 u) v v v)))))
 (let ((?x226 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x418 (* (- 1) (* (+ 2 v) (+ 2 v) (+ 2 v) u u))))
 (let ((?x685 (+ r (* (- 1) v))))
 (let ((?x489 (+ 2 v)))
 (let ((?x398 (+ (* (- 1) (* ?x489 ?x489 ?x489 u)) (* (- 1) (* ?x489 ?x685 u u)) (* (- 1) (* ?x489 ?x685 ?x685 u)) ?x418)))
 (let (($x735 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x398 ?x226) 0)) (not (= (* ?x290 ?x404) 0))))))
 (rewrite (= $x735 $x776)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((r Int) (u Int) (v Int) )(! (let ((?x94 (- (* (- 1) (+ u 2) v v v) (* (+ r u) (+ u 2) (+ u 2) v))))
 (let ((?x96 (- (- ?x94 (* (+ r u) (+ r u) (+ u 2) v)) (* (+ u 2) (+ u 2) v v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x88 (+ (- (+ (- ?x83 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x71 (- (* (- 1) u (+ v 2) (+ v 2) (+ v 2)) (* (- r v) u u (+ v 2)))))
 (let ((?x73 (- (- ?x71 (* (- r v) (- r v) u (+ v 2))) (* u u (+ v 2) (+ v 2) (+ v 2)))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x100 (or (not (= (* (- ?x63 ?x48) ?x73) 0)) (not (= (* (- ?x88 ?x48) ?x96) 0)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) $x100)))))))))))))))))) :qid k!28))
 ))
 (let ((?x716 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x404 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x290 (+ (* (- 1) (* (+ 2 u) v v v)) (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ r u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ 2 u) v v v)))))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x226 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x418 (* (- 1) (* (+ 2 v) (+ 2 v) (+ 2 v) u u))))
 (let ((?x685 (+ r (* (- 1) v))))
 (let ((?x489 (+ 2 v)))
 (let ((?x398 (+ (* (- 1) (* ?x489 ?x489 ?x489 u)) (* (- 1) (* ?x489 ?x685 u u)) (* (- 1) (* ?x489 ?x685 ?x685 u)) ?x418)))
 (let (($x735 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x398 ?x226) 0)) (not (= (* ?x290 ?x404) 0))))))
 (let ((?x94 (- (* (- 1) (+ u 2) v v v) (* (+ r u) (+ u 2) (+ u 2) v))))
 (let ((?x96 (- (- ?x94 (* (+ r u) (+ r u) (+ u 2) v)) (* (+ u 2) (+ u 2) v v v))))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x88 (+ (- (+ (- ?x83 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x71 (- (* (- 1) u (+ v 2) (+ v 2) (+ v 2)) (* (- r v) u u (+ v 2)))))
 (let ((?x73 (- (- ?x71 (* (- r v) (- r v) u (+ v 2))) (* u u (+ v 2) (+ v 2) (+ v 2)))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x100 (or (not (= (* (- ?x63 ?x48) ?x73) 0)) (not (= (* (- ?x88 ?x48) ?x96) 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x101 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x100)))
 (rewrite (= $x101 $x735)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x132 (mp (mp @x103 (quant-intro (proof-bind ?x716) (= $x102 $x563)) $x563) (rewrite (= $x563 $x563)) $x563)))
 (let ((@x859 (mp~ (mp @x132 (quant-intro (proof-bind ?x369) (= $x563 $x571)) $x571) (sk (~ $x571 $x419)) $x419)))
 (let ((@x420 (mp @x859 (rewrite (= $x419 $x375)) $x375)))
 (let ((@x638 (and-elim @x420 $x791)))
 (let ((@x165 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x791) $x483)) @x638 $x483)))
 (let (($x396 (<= ?x482 0)))
 (let ((@x862 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x791) $x396)) @x638 $x396)))
 (let (($x786 (not (<= ?x409 0))))
 (let (($x584 (>= ?x409 0)))
 (let (($x446 (>= ?x464 0)))
 (let (($x688 (<= ?x464 0)))
 (let ((@x121 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x600 (not $x688) (not $x446))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x688)) @x862 @x165 false) $x688) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x446)) @x862 @x165 false) $x446) $x600)))
 (let ((@x350 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x527 $x786 (not $x584))) (unit-resolution (and-elim @x420 $x162) @x121 $x408) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x584)) @x862 @x165 false) $x584) $x786)))
 ((_ th-lemma arith farkas 1 1 1) @x350 @x862 @x165 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        36
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             232
 :arith-nonlinear-bounds    19
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 43
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.64
 :memory                    3.14
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1123867
 :num-checks                1
 :propagations              14
 :rlimit-count              4210
 :time                      0.01
 :total-time                0.01)
