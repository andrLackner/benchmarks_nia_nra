unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(proof
(let ((?x405 (* (- 1) k!00)))
 (let ((?x401 (* (- 1) k!10)))
 (let ((?x160 (* v!4 y!2)))
 (let ((?x581 (+ ?x160 ?x401 ?x405 (* x!3 u!5))))
 (let (($x137 (<= ?x581 0)))
 (let (($x689 (= ?x581 0)))
 (let ((?x606 (* y!2 y!2 y!2)))
 (let ((?x313 (* (- 1) (* x!3 x!3 x!3))))
 (let ((?x531 (+ (* (- 3) (* v!4 v!4 y!2 x!3 x!3 u!5 u!5 u!5)) (* (- 3) (* y!2 x!3 x!3 u!5 u!5 u!5 u!5 u!5)) (* 3 (* y!2 y!2 x!3 u!5 u!5 u!5 u!5 u!5)) (* v!4 v!4 x!3 x!3 x!3 u!5 u!5 u!5) (* x!3 x!3 x!3 u!5 u!5 u!5 u!5 u!5) (* (- 2) (* v!4 y!2 y!2 y!2 u!5 u!5 u!5 u!5)) (* 6 (* v!4 y!2 y!2 x!3 u!5 u!5 u!5 u!5)) (* 3 (* v!4 v!4 y!2 y!2 x!3 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5)) (* (- 1) (* v!4 v!4 y!2 y!2 y!2 u!5 u!5 u!5)) (* 3 (* y!2 x!3 x!3)) (* 2 (* v!4 x!3 x!3 x!3 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 x!3)) ?x313 ?x606 (* (- 6) (* v!4 y!2 x!3 x!3 u!5 u!5 u!5 u!5)))))
 (let ((?x535 (* ?x531 ?x581)))
 (let (($x167 (= ?x535 0)))
 (let ((?x193 (* (- 1) (* v!4 v!4 x!3 x!3 x!3 k!00 u!5 u!5 u!5))))
 (let ((?x150 (* (- 3) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!00 u!5))))
 (let ((?x190 (* (- 3) (* v!4 v!4 v!4 x!3 x!3 x!3 k!00 u!5 u!5))))
 (let ((?x194 (* (- 1) (* v!4 v!4 x!3 x!3 x!3 k!10 u!5 u!5 u!5))))
 (let ((?x493 (* x!3 x!3 x!3 k!10)))
 (let ((?x486 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!10)))
 (let ((?x485 (* x!3 x!3 x!3 k!00)))
 (let ((?x189 (* (- 3) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!10 u!5))))
 (let ((?x192 (* (- 3) (* v!4 v!4 v!4 x!3 x!3 x!3 k!10 u!5 u!5))))
 (let ((?x186 (* 3 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 u!5 u!5))))
 (let ((?x185 (* 3 (* v!4 v!4 v!4 v!4 v!4 y!2 x!3 x!3 x!3 u!5))))
 (let ((?x184 (* 3 (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 u!5 u!5 u!5))))
 (let ((?x123 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!00)))
 (let ((?x212 (* 3 (* v!4 v!4 v!4 v!4 y!2 x!3 x!3 x!3 u!5 u!5))))
 (let ((?x197 (+ ?x212 (* (- 1) ?x123) (* v!4 v!4 x!3 x!3 x!3 x!3 u!5 u!5 u!5 u!5) (* (- 1) (* v!4 y!2 x!3 x!3 x!3)) ?x184 ?x185 ?x186 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 u!5) ?x192 ?x189 (* (- 1) (* x!3 x!3 x!3 x!3 u!5)) ?x485 (* (- 1) ?x486) ?x493 (* v!4 v!4 v!4 v!4 v!4 v!4 y!2 x!3 x!3 x!3) (* v!4 v!4 v!4 y!2 x!3 x!3 x!3 u!5 u!5 u!5) ?x194 ?x190 ?x150 ?x193)))
 (let (($x204 (= ?x197 0)))
 (let (($x200 (not $x204)))
 (let (($x255 (or $x200 (not $x167))))
 (let (($x436 (and $x689 $x255)))
 (let ((?x122 (* 3 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 k!00))))
 (let ((?x116 (* 3 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!00))))
 (let ((?x576 (* 3 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 k!10))))
 (let ((?x491 (* 3 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!10))))
 (let ((?x494 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x495 (* (- 1) (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x655 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x497 (* (- 1) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x498 (* (- 3) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x499 (* (- 3) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x134 (* (- 3) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x108 (* (- 3) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x446 (+ (* u!5 x!3 x!3 x!3 x!3) (* v!4 x!3 x!3 x!3 y!2) ?x108 ?x134 ?x499 ?x498 ?x497 ?x655 ?x495 ?x494 (* (- 1) ?x493) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3 k!10) ?x491 ?x576 ?x486 (* (- 1) ?x485) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3 k!00) ?x116 ?x122 ?x123)))
 (let ((?x278 (+ (* u!5 x!3) ?x160 ?x401 ?x405)))
 (let ((?x613 (+ ?x313 (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 x!3) (* 2 (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 x!3)) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3) (* (- 3) (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 6) (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) (* 3 (* u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* 3 (* u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 2) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* 3 (* x!3 x!3 y!2)) (* (- 3) (* x!3 y!2 y!2)) ?x606)))
 (let (($x546 (and (= ?x278 0) (or (not (= (* ?x613 ?x278) 0)) (not (= ?x446 0))))))
 (let (($x518 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x650 (* (- 1) (* u u u v v v x x x y))))
 (let ((?x648 (* (- 1) (* u u u u v v x x x x))))
 (let ((?x647 (* (- 1) (* v v v v v v x x x y))))
 (let ((?x657 (* (- 1) (* u v v v v v x x x x))))
 (let ((?x659 (* (- 3) (* u v v v v v x x x y))))
 (let ((?x664 (* (- 3) (* u u v v v v x x x x))))
 (let ((?x667 (* (- 3) (* u u v v v v x x x y))))
 (let ((?x671 (* (- 3) (* u u u v v v x x x x))))
 (let ((?x553 (* v x x x y)))
 (let ((?x545 (* u x x x x)))
 (let ((?x809 (+ ?x545 ?x553 ?x671 ?x667 ?x664 ?x659 ?x657 ?x647 ?x648 ?x650 (* (- 1) (* x x x k!10)) (* u u u v v x x x k!10) (* 3 (* u v v v v x x x k!10)) (* 3 (* u u v v v x x x k!10)) (* v v v v v x x x k!10) (* (- 1) (* x x x k!00)) (* u u u v v x x x k!00) (* 3 (* u v v v v x x x k!00)) (* 3 (* u u v v v x x x k!00)) (* v v v v v x x x k!00))))
 (let ((?x405 (* (- 1) k!00)))
 (let ((?x401 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x73 (+ ?x33 ?x34 ?x401 ?x405)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x464 (+ ?x455 (* u u u u u x x x) (* 2 (* u u u u v x x x)) (* u u u v v x x x) (* (- 3) (* u u u u u x x y)) (* (- 6) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) (* 3 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 3 (* u u u v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 2) (* u u u u v y y y)) (* (- 1) (* u u u v v y y y)) (* 3 (* x x y)) (* (- 3) (* x y y)) (* y y y))))
 (and (= ?x73 0) (or (not (= (* ?x464 ?x73) 0)) (not (= ?x809 0))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x282 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x401 (* (- 1) k!10)))
 (let ((?x259 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x405 (* (- 1) k!00)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x417 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x101 (+ x (* (- 1) y))))
 (let ((?x219 (* ?x101 u)))
 (let ((?x412 (+ (* ?x44 ?x44 ?x101 ?x101 ?x101 u u u) (* (- 1) (* ?x101 ?x101 ?x101)))))
 (let (($x409 (or (not (= (* ?x412 (+ ?x405 ?x219 ?x45 ?x401)) 0)) (not (= (* ?x417 (+ ?x405 ?x55 ?x259 ?x401)) 0)))))
 (and (= (+ ?x405 (* x u) (* y v) ?x401) 0) $x409))))))))))))))) :qid k!29))
 ))
 (let ((?x119 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x650 (* (- 1) (* u u u v v v x x x y))))
 (let ((?x648 (* (- 1) (* u u u u v v x x x x))))
 (let ((?x647 (* (- 1) (* v v v v v v x x x y))))
 (let ((?x657 (* (- 1) (* u v v v v v x x x x))))
 (let ((?x659 (* (- 3) (* u v v v v v x x x y))))
 (let ((?x664 (* (- 3) (* u u v v v v x x x x))))
 (let ((?x667 (* (- 3) (* u u v v v v x x x y))))
 (let ((?x671 (* (- 3) (* u u u v v v x x x x))))
 (let ((?x553 (* v x x x y)))
 (let ((?x545 (* u x x x x)))
 (let ((?x809 (+ ?x545 ?x553 ?x671 ?x667 ?x664 ?x659 ?x657 ?x647 ?x648 ?x650 (* (- 1) (* x x x k!10)) (* u u u v v x x x k!10) (* 3 (* u v v v v x x x k!10)) (* 3 (* u u v v v x x x k!10)) (* v v v v v x x x k!10) (* (- 1) (* x x x k!00)) (* u u u v v x x x k!00) (* 3 (* u v v v v x x x k!00)) (* 3 (* u u v v v x x x k!00)) (* v v v v v x x x k!00))))
 (let ((?x405 (* (- 1) k!00)))
 (let ((?x401 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x73 (+ ?x33 ?x34 ?x401 ?x405)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x464 (+ ?x455 (* u u u u u x x x) (* 2 (* u u u u v x x x)) (* u u u v v x x x) (* (- 3) (* u u u u u x x y)) (* (- 6) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) (* 3 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 3 (* u u u v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 2) (* u u u u v y y y)) (* (- 1) (* u u u v v y y y)) (* 3 (* x x y)) (* (- 3) (* x y y)) (* y y y))))
 (let (($x697 (and (= ?x73 0) (or (not (= (* ?x464 ?x73) 0)) (not (= ?x809 0))))))
 (let ((?x259 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x417 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x101 (+ x (* (- 1) y))))
 (let ((?x219 (* ?x101 u)))
 (let ((?x412 (+ (* ?x44 ?x44 ?x101 ?x101 ?x101 u u u) (* (- 1) (* ?x101 ?x101 ?x101)))))
 (let (($x409 (or (not (= (* ?x412 (+ ?x405 ?x219 ?x45 ?x401)) 0)) (not (= (* ?x417 (+ ?x405 ?x55 ?x259 ?x401)) 0)))))
 (let (($x277 (and (= (+ ?x405 (* x u) (* y v) ?x401) 0) $x409)))
 (rewrite (= $x277 $x697))))))))))))))))))))))))))))))))))
 ))
 (let (($x549 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x259 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x417 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x101 (+ x (* (- 1) y))))
 (let ((?x219 (* ?x101 u)))
 (let ((?x412 (+ (* ?x44 ?x44 ?x101 ?x101 ?x101 u u u) (* (- 1) (* ?x101 ?x101 ?x101)))))
 (let (($x433 (or (not (= (* ?x412 (+ ?x77 ?x219 ?x45 ?x93)) 0)) (not (= (* ?x417 (+ ?x77 ?x55 ?x259 ?x93)) 0)))))
 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x433)))))))))))))))) :qid k!29))
 ))
 (let ((?x556 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x401 (* (- 1) k!10)))
 (let ((?x259 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x405 (* (- 1) k!00)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x417 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x101 (+ x (* (- 1) y))))
 (let ((?x219 (* ?x101 u)))
 (let ((?x412 (+ (* ?x44 ?x44 ?x101 ?x101 ?x101 u u u) (* (- 1) (* ?x101 ?x101 ?x101)))))
 (let (($x409 (or (not (= (* ?x412 (+ ?x405 ?x219 ?x45 ?x401)) 0)) (not (= (* ?x417 (+ ?x405 ?x55 ?x259 ?x401)) 0)))))
 (let (($x277 (and (= (+ ?x405 (* x u) (* y v) ?x401) 0) $x409)))
 (let ((?x426 (* ?x417 (+ (* (- 1) (* u00 x00)) ?x55 ?x259 (* (- 1) (* v00 y00))))))
 (let ((?x420 (* ?x412 (+ (* (- 1) (* u00 x00)) ?x219 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x79 (* y v)))
 (let ((?x74 (* x u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let (($x82 (and (= (+ ?x77 ?x74 ?x79 ?x93) 0) (or (not (= ?x420 0)) (not (= ?x426 0))))))
 (rewrite (= $x82 $x277))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x61 (* x x x)))
 (let ((?x54 (+ u v)))
 (let ((?x38 (* v00 y00)))
 (let ((?x59 (- (+ (* (- 1) u00 x00) (* ?x54 x) (* v (- y x))) ?x38)))
 (let (($x64 (= (* ?x59 (- (* ?x54 ?x54 ?x54 v v x x x) ?x61)) 0)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) (- (* u u u ?x44 ?x44 ?x42 ?x42 ?x42) (* ?x42 ?x42 ?x42)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x51 0)) (not $x64)))))))))))) :qid k!29))
 ))
 (let ((?x211 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x259 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x417 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x101 (+ x (* (- 1) y))))
 (let ((?x219 (* ?x101 u)))
 (let ((?x412 (+ (* ?x44 ?x44 ?x101 ?x101 ?x101 u u u) (* (- 1) (* ?x101 ?x101 ?x101)))))
 (let (($x433 (or (not (= (* ?x412 (+ ?x77 ?x219 ?x45 ?x93)) 0)) (not (= (* ?x417 (+ ?x77 ?x55 ?x259 ?x93)) 0)))))
 (let (($x82 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x433)))
 (let ((?x63 (* (- (+ (* (- 1) u00 x00) ?x55 (* v (- y x))) ?x38) (- (* ?x54 ?x54 ?x54 v v x x x) ?x61))))
 (let ((?x42 (- x y)))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u ?x42) ?x45) ?x38) (- (* u u u ?x44 ?x44 ?x42 ?x42 ?x42) (* ?x42 ?x42 ?x42)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x67 (and $x41 (or (not (= ?x51 0)) (not (= ?x63 0))))))
 (rewrite (= $x67 $x82))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x100 (mp (mp @x69 (quant-intro (proof-bind ?x211) (= $x68 $x549)) $x549) (rewrite (= $x549 $x549)) $x549)))
 (let ((@x634 (mp (mp @x100 (quant-intro (proof-bind ?x556) (= $x549 $x282)) $x282) (quant-intro (proof-bind ?x119) (= $x282 $x518)) $x518)))
 (let ((@x468 (mp (mp~ @x634 (sk (~ $x518 $x546)) $x546) (rewrite (= $x546 $x436)) $x436)))
 (let ((@x203 (and-elim @x468 $x689)))
 (let ((@x207 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x689) $x137)) @x203 $x137)))
 (let (($x442 (>= ?x581 0)))
 (let ((@x574 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x689) $x442)) @x203 $x442)))
 (let (($x290 (not (<= ?x197 0))))
 (let (($x429 (>= ?x535 0)))
 (let ((@x287 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x429)) @x574 @x207 false) $x429) @x574 @x207 $x167)))
 (let (($x690 (>= ?x197 0)))
 (let ((@x461 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x204 $x290 (not $x690))) (lemma ((_ th-lemma arith) (hypothesis (not $x690)) @x574 @x207 false) $x690) (unit-resolution (and-elim @x468 $x255) @x287 $x200) $x290)))
 ((_ th-lemma arith) @x461 @x574 @x207 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        2
 :arith-assert-lower        10
 :arith-assert-upper        7
 :arith-conflicts           3
 :arith-eq-adapter          3
 :arith-fixed-eqs           1
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             356
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    3
 :conflicts                 3
 :decisions                 2
 :del-clause                3
 :eliminated-applications   2
 :final-checks              4
 :max-memory                19.80
 :memory                    19.15
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                1086428
 :num-checks                1
 :propagations              8
 :rlimit-count              18032
 :time                      0.02
 :total-time                0.03)
