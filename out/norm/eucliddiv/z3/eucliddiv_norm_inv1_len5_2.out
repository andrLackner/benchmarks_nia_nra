unsat
((set-logic NIA)
(proof
(let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x45 y00 y00 y00)))
 (let ((?x46 (* ?x42 ?x42 ?x45 ?x45 ?x45 y00 y00 y00 y00)))
 (let ((?x48 (* ?x42 ?x45 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00)))
 (let ((?x47 (+ ?x43 ?x44 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x51 (+ ?x49 ?x50)))
 (let ((?x52 (- ?x51 y00)))
 (let ((?x53 (+ ?x52 y00 ?x48)))
 (let ((?x54 (- ?x53 ?x46)))
 (let ((?x55 (- ?x54 ?x50)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x58))))))))))))))))))))) :qid k!29))
 ))
 (let (($x316 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x317 (lambda ((q Int) (r Int) (y Int) )(let ((?x45 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x45 y00 y00 y00)))
 (let ((?x46 (* ?x42 ?x42 ?x45 ?x45 ?x45 y00 y00 y00 y00)))
 (let ((?x48 (* ?x42 ?x45 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00)))
 (let ((?x47 (+ ?x43 ?x44 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x51 (+ ?x49 ?x50)))
 (let ((?x52 (- ?x51 y00)))
 (let ((?x53 (+ ?x52 y00 ?x48)))
 (let ((?x54 (- ?x53 ?x46)))
 (let ((?x55 (- ?x54 ?x50)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x59 (and $x33 $x41 $x58)))
 (let (($x211 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x145 (= (+ (* (- 1) y00) y) 0)))
 (let (($x311 (and $x145 $x211 false)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x210 (+ r ?x65)))
 (let ((?x183 (+ 1 q)))
 (let ((?x245 (* y00 y00 y00 ?x183 ?x183 ?x183 ?x210)))
 (let ((?x288 (+ ?x245 (* (- 1) ?x245))))
 (let ((@x213 (rewrite (= ?x45 ?x210))))
 (let ((@x185 (rewrite (= ?x42 ?x183))))
 (let ((@x244 (monotonicity @x185 @x185 @x185 @x213 (= ?x50 (* ?x183 ?x183 ?x183 ?x210 y00 y00 y00)))))
 (let ((@x248 (trans @x244 (rewrite (= (* ?x183 ?x183 ?x183 ?x210 y00 y00 y00) ?x245)) (= ?x50 ?x245))))
 (let ((?x215 (* y00 y00 y00 y00 ?x183 ?x183 ?x210 ?x210 ?x210)))
 (let ((?x270 (+ ?x215 ?x245)))
 (let ((?x276 (+ ?x270 (* (- 1) ?x215))))
 (let ((@x153 (rewrite (= (* ?x183 ?x183 ?x210 ?x210 ?x210 y00 y00 y00 y00) ?x215))))
 (let ((@x219 (monotonicity @x185 @x185 @x213 @x213 @x213 (= ?x46 (* ?x183 ?x183 ?x210 ?x210 ?x210 y00 y00 y00 y00)))))
 (let ((@x220 (trans @x219 @x153 (= ?x46 ?x215))))
 (let ((?x230 (* y00 ?x183 ?x210)))
 (let ((?x235 (* (- 1) ?x230)))
 (let ((?x264 (+ ?x215 ?x235 ?x245 ?x65)))
 (let ((?x268 (+ ?x264 y00 ?x230)))
 (let ((@x233 (trans (monotonicity @x185 @x213 (= ?x48 (* ?x183 ?x210 y00))) (rewrite (= (* ?x183 ?x210 y00) ?x230)) (= ?x48 ?x230))))
 (let ((@x261 (rewrite (= (- (+ ?x215 ?x235 ?x245) y00) (+ (+ ?x215 ?x235 ?x245) ?x65)))))
 (let ((?x190 (* y00 y00 y00 ?x183 ?x183 ?x183)))
 (let ((?x194 (* (- 1) ?x190)))
 (let ((?x221 (+ ?x194 ?x190 ?x215)))
 (let ((@x204 (monotonicity @x185 @x185 @x185 (= ?x44 (* ?x183 ?x183 ?x183 y00 y00 y00)))))
 (let ((@x207 (trans @x204 (rewrite (= (* ?x183 ?x183 ?x183 y00 y00 y00) ?x190)) (= ?x44 ?x190))))
 (let ((@x189 (monotonicity (rewrite (= ?x28 (- 1))) @x185 @x185 @x185 (= ?x43 (* (- 1) ?x183 ?x183 ?x183 y00 y00 y00)))))
 (let ((@x151 (trans @x189 (rewrite (= (* (- 1) ?x183 ?x183 ?x183 y00 y00 y00) ?x194)) (= ?x43 ?x194))))
 (let ((@x154 (trans (monotonicity @x151 @x207 @x220 (= ?x47 ?x221)) (rewrite (= ?x221 ?x215)) (= ?x47 ?x215))))
 (let ((@x241 (trans (monotonicity @x154 @x233 (= ?x49 (- ?x215 ?x230))) (rewrite (= (- ?x215 ?x230) (+ ?x215 ?x235))) (= ?x49 (+ ?x215 ?x235)))))
 (let ((@x256 (trans (monotonicity @x241 @x248 (= ?x51 (+ (+ ?x215 ?x235) ?x245))) (rewrite (= (+ (+ ?x215 ?x235) ?x245) (+ ?x215 ?x235 ?x245))) (= ?x51 (+ ?x215 ?x235 ?x245)))))
 (let ((@x263 (trans (monotonicity @x256 (= ?x52 (- (+ ?x215 ?x235 ?x245) y00))) @x261 (= ?x52 (+ (+ ?x215 ?x235 ?x245) ?x65)))))
 (let ((@x267 (trans @x263 (rewrite (= (+ (+ ?x215 ?x235 ?x245) ?x65) ?x264)) (= ?x52 ?x264))))
 (let ((@x163 (trans (monotonicity @x267 @x233 (= ?x53 ?x268)) (rewrite (= ?x268 ?x270)) (= ?x53 ?x270))))
 (let ((@x280 (trans (monotonicity @x163 @x220 (= ?x54 (- ?x270 ?x215))) (rewrite (= (- ?x270 ?x215) ?x276)) (= ?x54 ?x276))))
 (let ((@x286 (monotonicity (trans @x280 (rewrite (= ?x276 ?x245)) (= ?x54 ?x245)) @x248 (= ?x55 (- ?x245 ?x245)))))
 (let ((@x293 (trans (trans @x286 (rewrite (= (- ?x245 ?x245) ?x288)) (= ?x55 ?x288)) (rewrite (= ?x288 0)) $x56)))
 (let ((@x168 (trans (monotonicity @x293 (= $x56 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x56 true))))
 (let ((@x304 (trans (monotonicity @x168 (= $x57 (not true))) (rewrite (= (not true) false)) (= $x57 false))))
 (let ((@x310 (trans (monotonicity @x304 (= $x58 (or false))) (rewrite (= (or false) false)) (= $x58 false))))
 (let ((@x312 (monotonicity (rewrite (= $x33 $x145)) (rewrite (= $x41 $x211)) @x310 (= $x59 $x311))))
 (trans @x312 (rewrite (= $x311 false)) (= $x59 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x147 (trans (quant-intro (proof-bind ?x317) (= $x60 $x316)) (elim-unused (= $x316 false)) (= $x60 false))))
 (let ((@x61 (asserted $x60)))
 (mp @x61 @x147 false))))))))

(:max-memory   3.43
 :memory       3.12
 :mk-bool-var  5
 :num-allocs   921419
 :rlimit-count 511
 :time         0.01
 :total-time   0.01)
