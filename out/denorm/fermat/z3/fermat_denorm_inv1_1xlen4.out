unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x191 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x736 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 ?x191 (* (- 1) (* v!0 v!0)) (* (- 4) r!2) (* 2 v!0) (* (- 2) u!1))))
 (let (($x667 (>= ?x736 0)))
 (let (($x925 (= ?x736 0)))
 (let ((?x844 (* 2 u!1)))
 (let ((?x189 (* (- 2) v!0)))
 (let ((?x779 (* 4 r!2)))
 (let ((?x390 (* v!0 v!0)))
 (let ((?x185 (* (- 1) ?x191)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x287 (+ ?x110 ?x126 ?x41 ?x46 ?x202 ?x185 ?x390 ?x779 ?x189 ?x844)))
 (let ((?x836 (* (- 6) (* r!2 v!0))))
 (let ((?x757 (* r!2 u!1)))
 (let ((?x581 (* 2 r!2)))
 (let ((?x425 (* (- 1) (* r!2 r!2 v!0 v!0 u!1 u!1 u!1))))
 (let ((?x346 (* (- 1) (* r!2 v!0 u!1 u!1))))
 (let ((?x266 (* (- 8) (* r!2 r!2 v!0 v!0))))
 (let ((?x161 (+ (* (- 2) (* r!2 v!0 v!0 u!1 u!1 u!1 u!1)) (* (- 1) (* v!0 v!0 u!1 u!1 u!1 u!1 u!1)) (* (- 1) (* v!0 u!1 u!1 u!1)) ?x191 (* (- 5) (* v!0 u!1 u!1)) ?x266 (* (- 6) (* r!2 r!2 v!0 v!0 u!1 u!1)) ?x346 (* (- 8) (* v!0 v!0 u!1 u!1)) ?x425 (* (- 24) (* r!2 v!0 v!0 u!1 u!1)) (* (- 12) (* r!2 v!0 v!0 u!1 u!1 u!1)) ?x581 (* (- 12) (* r!2 r!2 v!0 v!0 u!1)) (* (- 6) (* v!0 u!1)) (* (- 12) (* v!0 v!0 u!1 u!1 u!1)) ?x757 ?x836 ?x844 (* (- 16) (* r!2 v!0 v!0 u!1)) (* (- 6) (* v!0 v!0 u!1 u!1 u!1 u!1)) (* (- 5) (* r!2 v!0 u!1)))))
 (let ((?x945 (* ?x161 ?x287)))
 (let (($x345 (= ?x945 0)))
 (let (($x865 (not $x345)))
 (let ((?x873 (* (- 1) ?x757)))
 (let ((?x714 (* (- 4) (* r!2 r!2 u!1 u!1 u!1))))
 (let ((?x664 (* v!0 u!1)))
 (let ((?x356 (* v!0 v!0 u!1 u!1)))
 (let ((?x981 (* (- 2) (* r!2 u!1 u!1))))
 (let ((?x786 (+ ?x981 (* 2 (* v!0 u!1 u!1)) ?x346 ?x356 ?x425 (* 8 (* r!2 v!0 v!0 u!1 u!1 u!1)) (* 2 (* r!2 v!0 v!0 v!0 u!1 u!1 u!1)) (* (- 4) (* r!2 r!2 v!0 u!1 u!1 u!1)) (* 8 (* r!2 v!0 u!1 u!1 u!1)) ?x664 (* (- 1) (* v!0 v!0 v!0 v!0 u!1 u!1 u!1)) ?x714 (* (- 4) (* v!0 v!0 u!1 u!1 u!1)) ?x873 (* (- 4) (* v!0 v!0 v!0 u!1 u!1 u!1)) (* v!0 v!0 u!1) (* (- 1) (* r!2 v!0 u!1)))))
 (let ((?x876 (* ?x786 ?x287)))
 (let (($x934 (= ?x876 0)))
 (let (($x394 (or (not $x934) $x865)))
 (let (($x157 (and $x925 $x394)))
 (let ((?x379 (+ ?x779 ?x844 ?x189 ?x110 ?x126 ?x41 ?x185 ?x390 ?x46 ?x202)))
 (let ((?x300 (* (- 1) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x473 (* (- 1) (* r!2 u!1 u!1 v!0))))
 (let ((?x716 (+ ?x581 ?x844 ?x191 (* (- 5) (* r!2 u!1 v!0)) ?x473 (* (- 5) (* u!1 u!1 v!0)) (* (- 8) (* u!1 u!1 v!0 v!0)) ?x757 (* (- 6) (* u!1 v!0)) ?x300 (* (- 12) (* u!1 u!1 u!1 v!0 v!0)) (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0)) ?x836 (* (- 2) (* r!2 u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0)) ?x266 (* (- 16) (* r!2 u!1 v!0 v!0)) (* (- 12) (* r!2 r!2 u!1 v!0 v!0)) (* (- 24) (* r!2 u!1 u!1 v!0 v!0)) (* (- 6) (* r!2 r!2 u!1 u!1 v!0 v!0)) (* (- 6) (* u!1 u!1 u!1 u!1 v!0 v!0)))))
 (let ((?x252 (* u!1 v!0)))
 (let ((?x246 (* u!1 u!1 v!0 v!0)))
 (let ((?x824 (+ (* u!1 v!0 v!0) (* (- 1) (* r!2 u!1 v!0)) ?x473 ?x981 (* 2 (* u!1 u!1 v!0)) ?x246 ?x873 ?x252 ?x300 ?x714 (* 8 (* r!2 u!1 u!1 u!1 v!0)) (* (- 4) (* u!1 u!1 u!1 v!0 v!0)) (* (- 4) (* r!2 r!2 u!1 u!1 u!1 v!0)) (* 8 (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 4) (* u!1 u!1 u!1 v!0 v!0 v!0)) (* 2 (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0 v!0)))))
 (let (($x399 (and (= ?x379 0) (or (not (= (* ?x824 ?x379) 0)) (not (= (* ?x716 ?x379) 0))))))
 (let (($x280 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x979 (* (- 6) (* u u u u v v))))
 (let ((?x976 (* (- 6) (* r r u u v v))))
 (let ((?x973 (* (- 24) (* r u u v v))))
 (let ((?x969 (* (- 12) (* r r u v v))))
 (let ((?x966 (* (- 16) (* r u v v))))
 (let ((?x962 (* (- 8) (* r r v v))))
 (let ((?x939 (* (- 1) (* u u u u u v v))))
 (let ((?x959 (* (- 2) (* r u u u u v v))))
 (let ((?x711 (* (- 1) (* u u u v))))
 (let ((?x508 (* r u u u v v)))
 (let ((?x956 (* (- 12) ?x508)))
 (let ((?x494 (* u u u v v)))
 (let ((?x953 (* (- 12) ?x494)))
 (let ((?x591 (* (- 1) (* r r u u u v v))))
 (let ((?x422 (* r u)))
 (let ((?x371 (* u u v v)))
 (let ((?x949 (* (- 8) ?x371)))
 (let ((?x366 (* u u v)))
 (let ((?x718 (* (- 5) ?x366)))
 (let ((?x395 (* (- 1) (* r u u v))))
 (let ((?x337 (* r u v)))
 (let ((?x717 (* (- 5) ?x337)))
 (let ((?x747 (* 2 r)))
 (let ((?x206 (+ ?x747 ?x36 ?x43 ?x717 ?x395 ?x718 ?x949 ?x422 (* (- 6) (* u v)) ?x591 ?x953 ?x956 ?x711 (* (- 6) (* r v)) ?x959 ?x939 ?x962 ?x966 ?x969 ?x973 ?x976 ?x979)))
 (let ((?x599 (* (- 1) (* u u u v v v v))))
 (let ((?x622 (* 2 (* r u u u v v v))))
 (let ((?x619 (* (- 4) (* u u u v v v))))
 (let ((?x616 (* 8 ?x508)))
 (let ((?x613 (* (- 4) (* r r u u u v))))
 (let ((?x610 (* (- 4) ?x494)))
 (let ((?x607 (* 8 (* r u u u v))))
 (let ((?x603 (* (- 4) (* r r u u u))))
 (let ((?x429 (* u v)))
 (let ((?x405 (* 2 ?x366)))
 (let ((?x402 (* (- 2) (* r u u))))
 (let ((?x338 (* (- 1) ?x337)))
 (let ((?x862 (+ (* u v v) ?x338 ?x395 ?x402 ?x405 ?x371 (* (- 1) ?x422) ?x429 ?x591 ?x603 ?x607 ?x610 ?x613 ?x616 ?x619 ?x622 ?x599)))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or (not (= (* ?x862 ?x208) 0)) (not (= (* ?x206 ?x208) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x283 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x454 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x623 (+ 2 u)))
 (let ((?x144 (+ (* (- 1) (* ?x623 ?x77 v)) (* (- 1) (* ?x623 ?x623 ?x77 v)) (* ?x623 ?x77) (* (- 1) (* ?x623 ?x623 ?x623 ?x77 ?x77 v v)))))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x303 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x763 (+ r ?x107)))
 (let ((?x593 (+ 2 v)))
 (let ((?x524 (+ (* (- 1) (* ?x593 ?x763 u)) (* (- 1) (* ?x593 ?x763 u u)) (* ?x763 u) (* (- 1) (* ?x593 ?x593 ?x763 ?x763 u u u)))))
 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x524 ?x303) 0)) (not (= (* ?x144 ?x454) 0))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x319 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x979 (* (- 6) (* u u u u v v))))
 (let ((?x976 (* (- 6) (* r r u u v v))))
 (let ((?x973 (* (- 24) (* r u u v v))))
 (let ((?x969 (* (- 12) (* r r u v v))))
 (let ((?x966 (* (- 16) (* r u v v))))
 (let ((?x962 (* (- 8) (* r r v v))))
 (let ((?x939 (* (- 1) (* u u u u u v v))))
 (let ((?x959 (* (- 2) (* r u u u u v v))))
 (let ((?x711 (* (- 1) (* u u u v))))
 (let ((?x508 (* r u u u v v)))
 (let ((?x956 (* (- 12) ?x508)))
 (let ((?x494 (* u u u v v)))
 (let ((?x953 (* (- 12) ?x494)))
 (let ((?x591 (* (- 1) (* r r u u u v v))))
 (let ((?x422 (* r u)))
 (let ((?x371 (* u u v v)))
 (let ((?x949 (* (- 8) ?x371)))
 (let ((?x366 (* u u v)))
 (let ((?x718 (* (- 5) ?x366)))
 (let ((?x395 (* (- 1) (* r u u v))))
 (let ((?x337 (* r u v)))
 (let ((?x717 (* (- 5) ?x337)))
 (let ((?x747 (* 2 r)))
 (let ((?x206 (+ ?x747 ?x36 ?x43 ?x717 ?x395 ?x718 ?x949 ?x422 (* (- 6) (* u v)) ?x591 ?x953 ?x956 ?x711 (* (- 6) (* r v)) ?x959 ?x939 ?x962 ?x966 ?x969 ?x973 ?x976 ?x979)))
 (let ((?x599 (* (- 1) (* u u u v v v v))))
 (let ((?x622 (* 2 (* r u u u v v v))))
 (let ((?x619 (* (- 4) (* u u u v v v))))
 (let ((?x616 (* 8 ?x508)))
 (let ((?x613 (* (- 4) (* r r u u u v))))
 (let ((?x610 (* (- 4) ?x494)))
 (let ((?x607 (* 8 (* r u u u v))))
 (let ((?x603 (* (- 4) (* r r u u u))))
 (let ((?x429 (* u v)))
 (let ((?x405 (* 2 ?x366)))
 (let ((?x402 (* (- 2) (* r u u))))
 (let ((?x338 (* (- 1) ?x337)))
 (let ((?x862 (+ (* u v v) ?x338 ?x395 ?x402 ?x405 ?x371 (* (- 1) ?x422) ?x429 ?x591 ?x603 ?x607 ?x610 ?x613 ?x616 ?x619 ?x622 ?x599)))
 (let (($x213 (= ?x208 0)))
 (let (($x1007 (and $x213 (or (not (= (* ?x862 ?x208) 0)) (not (= (* ?x206 ?x208) 0))))))
 (let ((?x454 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x623 (+ 2 u)))
 (let ((?x144 (+ (* (- 1) (* ?x623 ?x77 v)) (* (- 1) (* ?x623 ?x623 ?x77 v)) (* ?x623 ?x77) (* (- 1) (* ?x623 ?x623 ?x623 ?x77 ?x77 v v)))))
 (let ((?x303 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x763 (+ r ?x107)))
 (let ((?x593 (+ 2 v)))
 (let ((?x524 (+ (* (- 1) (* ?x593 ?x763 u)) (* (- 1) (* ?x593 ?x763 u u)) (* ?x763 u) (* (- 1) (* ?x593 ?x593 ?x763 ?x763 u u u)))))
 (let (($x734 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x524 ?x303) 0)) (not (= (* ?x144 ?x454) 0))))))
 (rewrite (= $x734 $x1007)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((r Int) (u Int) (v Int) )(! (let ((?x81 (+ u 2)))
 (let ((?x77 (+ r u)))
 (let ((?x94 (+ (- (* (- 1) ?x77 ?x81 v) (* ?x77 ?x81 ?x81 v)) (* ?x77 ?x81))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) (- ?x94 (* ?x77 ?x77 ?x81 ?x81 ?x81 v v)))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* (- 1) ?x52 u ?x57) (* ?x52 u u ?x57)) (* ?x52 u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x74 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- ?x71 (* ?x52 ?x52 u u u ?x57 ?x57)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x74 0)) (not (= ?x97 0)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x692 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x454 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x623 (+ 2 u)))
 (let ((?x144 (+ (* (- 1) (* ?x623 ?x77 v)) (* (- 1) (* ?x623 ?x623 ?x77 v)) (* ?x623 ?x77) (* (- 1) (* ?x623 ?x623 ?x623 ?x77 ?x77 v v)))))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x303 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x763 (+ r ?x107)))
 (let ((?x593 (+ 2 v)))
 (let ((?x524 (+ (* (- 1) (* ?x593 ?x763 u)) (* (- 1) (* ?x593 ?x763 u u)) (* ?x763 u) (* (- 1) (* ?x593 ?x593 ?x763 ?x763 u u u)))))
 (let (($x734 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x524 ?x303) 0)) (not (= (* ?x144 ?x454) 0))))))
 (let ((?x81 (+ u 2)))
 (let ((?x94 (+ (- (* (- 1) ?x77 ?x81 v) (* ?x77 ?x81 ?x81 v)) (* ?x77 ?x81))))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) (- ?x94 (* ?x77 ?x77 ?x81 ?x81 ?x81 v v)))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* (- 1) ?x52 u ?x57) (* ?x52 u u ?x57)) (* ?x52 u))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x74 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- ?x71 (* ?x52 ?x52 u u u ?x57 ?x57)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x101 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x74 0)) (not (= ?x97 0))))))
 (rewrite (= $x101 $x734)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x299 (mp (mp @x103 (quant-intro (proof-bind ?x692) (= $x102 $x283)) $x283) (rewrite (= $x283 $x283)) $x283)))
 (let ((@x286 (mp~ (mp @x299 (quant-intro (proof-bind ?x319) (= $x283 $x280)) $x280) (sk (~ $x280 $x399)) $x399)))
 (let ((@x444 (mp @x286 (rewrite (= $x399 $x157)) $x157)))
 (let ((@x582 (and-elim @x444 $x925)))
 (let ((@x759 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x925) $x667)) @x582 $x667)))
 (let (($x964 (<= ?x736 0)))
 (let ((@x426 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x925) $x964)) @x582 $x964)))
 (let (($x608 (not (<= ?x945 0))))
 (let (($x768 (>= ?x945 0)))
 (let (($x419 (>= ?x876 0)))
 (let (($x743 (<= ?x876 0)))
 (let ((@x788 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x934 (not $x743) (not $x419))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x743)) @x426 @x759 false) $x743) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x419)) @x426 @x759 false) $x419) $x934)))
 (let ((@x585 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x345 $x608 (not $x768))) (unit-resolution (and-elim @x444 $x394) @x788 $x865) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x768)) @x426 @x759 false) $x768) $x608)))
 ((_ th-lemma arith farkas 1 1 1) @x585 @x426 @x759 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        49
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             320
 :arith-nonlinear-bounds    32
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.69
 :memory                    3.20
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1207769
 :num-checks                1
 :propagations              14
 :rlimit-count              5170
 :time                      0.01
 :total-time                0.01)
