unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x645 (+ (* (- 1.0) (to_real (* b00 x00))) ?x146)))
 (let (($x663 (>= ?x645 0.0)))
 (let (($x646 (= 0.0 ?x645)))
 (let ((@x222 (symm (commutativity (= $x646 (= ?x645 0.0))) (= (= ?x645 0.0) $x646))))
 (let ((@x494 (mp ((_ th-lemma arith) (= ?x645 0.0)) @x222 $x646)))
 (let ((@x781 (lemma (unit-resolution (hypothesis (not $x646)) @x494 false) $x646)))
 (let ((@x500 ((_ th-lemma arith triangle-eq) (or (not $x646) $x663))))
 (let (($x314 (<= ?x645 0.0)))
 (let ((@x778 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x646) $x314)) @x781 $x314)))
 (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x136 (to_real r!1)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x226 (to_real b!2)))
 (let ((?x225 (to_real x!0)))
 (let ((?x416 (* ?x225 ?x226)))
 (let ((?x696 (+ ?x416 ?x149 ?x136 ?x135)))
 (let (($x701 (>= ?x696 0.0)))
 (let ((?x724 (+ ?x416 (* (- 1.0) (to_real (* x!0 b!2))))))
 (let (($x497 (>= ?x724 0.0)))
 (let (($x85 (= 0.0 ?x724)))
 (let ((@x762 (symm (commutativity (= $x85 (= ?x724 0.0))) (= (= ?x724 0.0) $x85))))
 (let ((@x575 (mp ((_ th-lemma arith) (= ?x724 0.0)) @x762 $x85)))
 (let ((?x86 (* b00 x00)))
 (let ((?x699 (+ r00 ?x86 (* (- 1) r!1) (* (- 1) (* x!0 b!2)))))
 (let (($x681 (<= ?x699 0)))
 (let (($x244 (= 0 ?x699)))
 (let ((@x269 (symm (commutativity (= $x244 (= ?x699 0))) (= (= ?x699 0) $x244))))
 (let (($x702 (= ?x699 0)))
 (let ((?x465 (* (- (/ 1.0 32.0)) (* ?x226 ?x226 ?x226 ?x226 ?x226))))
 (let ((?x350 (* (/ 1.0 8.0) (* ?x226 ?x226 ?x226 ?x226))))
 (let ((?x221 (+ ?x350 (* (/ 1.0 4.0) (* ?x136 ?x225 ?x226 ?x226 ?x226 ?x226)) (* (/ 1.0 2.0) (* ?x225 ?x226 ?x226 ?x226 ?x226)) (* ?x136 ?x136 ?x225 ?x226 ?x226) (* (- (/ 3.0 8.0)) (* ?x136 ?x226 ?x226 ?x226)) (* (- (/ 3.0 2.0)) (* ?x136 ?x225 ?x225 ?x226 ?x226 ?x226)) (* (- (/ 1.0 4.0)) (* ?x136 ?x136 ?x225 ?x226 ?x226 ?x226)) (* (/ 1.0 4.0) (* ?x136 ?x136 ?x226 ?x226)) (* (- (/ 3.0 2.0)) (* ?x136 ?x225 ?x226 ?x226 ?x226)) (* (- (/ 1.0 8.0)) (* ?x136 ?x136 ?x226 ?x226 ?x226)) (* (/ 1.0 8.0) (* ?x136 ?x226 ?x226 ?x226 ?x226)) (* (/ 1.0 2.0) (* ?x225 ?x225 ?x226 ?x226 ?x226 ?x226)) ?x465 (* ?x136 ?x136 ?x225 ?x225 ?x226 ?x226) (* (- (/ 1.0 16.0)) (* ?x225 ?x226 ?x226 ?x226 ?x226 ?x226)))))
 (let (($x424 (= (* ?x221 (+ ?x135 ?x136 ?x149 ?x416)) 0.0)))
 (let (($x656 (not $x424)))
 (let ((?x757 (+ (* ?x61 ?x136 ?x136 ?x225 ?x225 ?x226 ?x226) (* ?x136 ?x136 ?x144 ?x145 ?x225 ?x225 ?x226 ?x226) (* (/ 1.0 2.0) (* ?x136 ?x136 ?x225 ?x225 ?x226 ?x226 ?x226)) (* (- (/ 1.0 2.0)) (* ?x61 ?x136 ?x225 ?x225 ?x226 ?x226 ?x226)) (* (- (/ 1.0 2.0)) (* ?x136 ?x144 ?x145 ?x225 ?x225 ?x226 ?x226 ?x226)) (* (/ 1.0 4.0) (* ?x136 ?x136 ?x136 ?x225 ?x226 ?x226 ?x226)) (* (/ 1.0 2.0) (* ?x136 ?x225 ?x225 ?x225 ?x226 ?x226 ?x226 ?x226)) (* (- (/ 1.0 4.0)) (* ?x61 ?x136 ?x136 ?x225 ?x226 ?x226 ?x226)) (* (- (/ 1.0 4.0)) (* ?x136 ?x136 ?x144 ?x145 ?x225 ?x226 ?x226 ?x226)) (* (/ 1.0 4.0) (* ?x136 ?x136 ?x225 ?x225 ?x226 ?x226 ?x226 ?x226)) (* (- 1.0) (* ?x136 ?x136 ?x136 ?x225 ?x225 ?x226 ?x226)) (* (- 1.0) (* ?x136 ?x136 ?x225 ?x225 ?x225 ?x226 ?x226 ?x226)))))
 (let (($x288 (= ?x757 0.0)))
 (let (($x710 (not $x288)))
 (let (($x176 (or $x710 $x656)))
 (let (($x501 (and $x702 $x176)))
 (let ((?x95 (+ (* (- (/ 3.0 2.0)) (* ?x226 ?x226 ?x226 ?x225 ?x225 ?x136)) (* (- (/ 1.0 4.0)) (* ?x226 ?x226 ?x226 ?x225 ?x136 ?x136)) (* ?x226 ?x226 ?x225 ?x225 ?x136 ?x136) ?x465 (* (/ 1.0 8.0) (* ?x226 ?x226 ?x226 ?x226 ?x136)) (* (- (/ 1.0 8.0)) (* ?x226 ?x226 ?x226 ?x136 ?x136)) (* (- (/ 1.0 16.0)) (* ?x226 ?x226 ?x226 ?x226 ?x226 ?x225)) (* (/ 1.0 4.0) (* ?x226 ?x226 ?x226 ?x226 ?x225 ?x136)) ?x350 (* (- (/ 3.0 8.0)) (* ?x226 ?x226 ?x226 ?x136)) (* (/ 1.0 4.0) (* ?x226 ?x226 ?x136 ?x136)) (* (/ 1.0 2.0) (* ?x226 ?x226 ?x226 ?x226 ?x225)) (* (- (/ 3.0 2.0)) (* ?x226 ?x226 ?x226 ?x225 ?x136)) (* ?x226 ?x226 ?x225 ?x136 ?x136) (* (/ 1.0 2.0) (* ?x226 ?x226 ?x226 ?x226 ?x225 ?x225)))))
 (let ((?x603 (+ (* (/ 1.0 2.0) (* ?x226 ?x226 ?x226 ?x225 ?x225 ?x136 ?x136)) (* (- (/ 1.0 2.0)) (* ?x226 ?x226 ?x226 ?x225 ?x225 ?x136 ?x61)) (* (- (/ 1.0 2.0)) (* ?x226 ?x226 ?x226 ?x225 ?x225 ?x136 ?x144 ?x145)) (* (/ 1.0 2.0) (* ?x226 ?x226 ?x226 ?x226 ?x225 ?x225 ?x225 ?x136)) (* (/ 1.0 4.0) (* ?x226 ?x226 ?x226 ?x225 ?x136 ?x136 ?x136)) (* (- (/ 1.0 4.0)) (* ?x226 ?x226 ?x226 ?x225 ?x136 ?x136 ?x61)) (* (- (/ 1.0 4.0)) (* ?x226 ?x226 ?x226 ?x225 ?x136 ?x136 ?x144 ?x145)) (* (/ 1.0 4.0) (* ?x226 ?x226 ?x226 ?x226 ?x225 ?x225 ?x136 ?x136)) (* (- 1.0) (* ?x226 ?x226 ?x225 ?x225 ?x136 ?x136 ?x136)) (* ?x226 ?x226 ?x225 ?x225 ?x136 ?x136 ?x61) (* ?x226 ?x226 ?x225 ?x225 ?x136 ?x136 ?x144 ?x145) (* (- 1.0) (* ?x226 ?x226 ?x226 ?x225 ?x225 ?x225 ?x136 ?x136)))))
 (let (($x674 (or (not (= ?x603 0.0)) (not (= (* ?x95 (+ ?x136 ?x135 ?x149 (* ?x226 ?x225))) 0.0)))))
 (let (($x675 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x86)) 0) $x674)))
 (let (($x627 (exists ((b Int) (r Int) (x Int) )(! (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x48 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x785 (+ (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48) (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x48)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x48)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48)) (* ?x40 ?x40 ?x43 ?x48 ?x48) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)))))
 (let ((?x309 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x61)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x144 ?x145)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48 ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48 ?x144 ?x145)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x61) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x144 ?x145) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)))))
 (let (($x285 (not (= ?x309 0.0))))
 (let (($x188 (or $x285 (not (= (* ?x785 (+ ?x48 ?x135 ?x149 (* ?x40 ?x43))) 0.0)))))
 (let (($x122 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x122 $x188))))))))))))))) :qid k!28))
 ))
 (let (($x338 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x170 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x464 (+ ?x149 ?x48 ?x170 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x576 (+ ?x48 ?x170)))
 (let ((?x43 (to_real x)))
 (let ((?x256 (* 2.0 ?x43)))
 (let ((?x305 (+ 1.0 ?x256)))
 (let ((?x717 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x576 ?x576)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x305 ?x305 ?x576 ?x576)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x305 ?x576)))))
 (let ((?x629 (+ (* (- (/ 1.0 4.0)) (* ?x43 ?x48 ?x48 ?x40 ?x40 ?x40)) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x48 ?x40 ?x40 ?x40)))))
 (let (($x120 (or (not (= (* ?x629 (+ ?x149 ?x48 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x717 ?x464) 0.0)))))
 (let (($x733 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x733 $x120))))))))))))))))))) :qid k!28))
 ))
 (let ((?x628 (lambda ((b Int) (r Int) (x Int) )(let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x48 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x785 (+ (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48) (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x48)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x48)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48)) (* ?x40 ?x40 ?x43 ?x48 ?x48) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)))))
 (let ((?x309 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x61)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x144 ?x145)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48 ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48 ?x144 ?x145)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x61) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x144 ?x145) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)))))
 (let (($x285 (not (= ?x309 0.0))))
 (let (($x188 (or $x285 (not (= (* ?x785 (+ ?x48 ?x135 ?x149 (* ?x40 ?x43))) 0.0)))))
 (let (($x122 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x106 (and $x122 $x188)))
 (let ((?x170 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x464 (+ ?x149 ?x48 ?x170 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x576 (+ ?x48 ?x170)))
 (let ((?x256 (* 2.0 ?x43)))
 (let ((?x305 (+ 1.0 ?x256)))
 (let ((?x717 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x576 ?x576)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x305 ?x305 ?x576 ?x576)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x305 ?x576)))))
 (let ((?x629 (+ (* (- (/ 1.0 4.0)) (* ?x43 ?x48 ?x48 ?x40 ?x40 ?x40)) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x48 ?x40 ?x40 ?x40)))))
 (let (($x120 (or (not (= (* ?x629 (+ ?x149 ?x48 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x717 ?x464) 0.0)))))
 (let (($x733 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x679 (and $x733 $x120)))
 (rewrite (= $x679 $x106))))))))))))))))))))))))))))
 ))
 (let (($x153 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x170 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x464 (+ ?x149 ?x48 ?x170 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x576 (+ ?x48 ?x170)))
 (let ((?x43 (to_real x)))
 (let ((?x256 (* 2.0 ?x43)))
 (let ((?x305 (+ 1.0 ?x256)))
 (let ((?x717 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x576 ?x576)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x305 ?x305 ?x576 ?x576)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x305 ?x576)))))
 (let ((?x629 (+ (* (- (/ 1.0 4.0)) (* ?x43 ?x48 ?x48 ?x40 ?x40 ?x40)) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x48 ?x40 ?x40 ?x40)))))
 (let (($x120 (or (not (= (* ?x629 (+ ?x149 ?x48 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x717 ?x464) 0.0)))))
 (let (($x522 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x522 $x120))))))))))))))))))) :qid k!28))
 ))
 (let ((?x729 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x170 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x464 (+ ?x149 ?x48 ?x170 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x576 (+ ?x48 ?x170)))
 (let ((?x43 (to_real x)))
 (let ((?x256 (* 2.0 ?x43)))
 (let ((?x305 (+ 1.0 ?x256)))
 (let ((?x717 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x576 ?x576)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x305 ?x305 ?x576 ?x576)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x305 ?x576)))))
 (let ((?x629 (+ (* (- (/ 1.0 4.0)) (* ?x43 ?x48 ?x48 ?x40 ?x40 ?x40)) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x48 ?x40 ?x40 ?x40)))))
 (let (($x120 (or (not (= (* ?x629 (+ ?x149 ?x48 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x717 ?x464) 0.0)))))
 (let (($x733 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x679 (and $x733 $x120)))
 (let (($x522 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x264 (and $x522 $x120)))
 (rewrite (= $x264 $x679))))))))))))))))))))))))
 ))
 (let (($x78 (exists ((b Int) (r Int) (x Int) )(! (let ((?x55 (to_real 0)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x48 (to_real r)))
 (let ((?x58 (- ?x48 ?x42)))
 (let ((?x70 (+ (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x58 ?x58 ?x65) (* ?x42 ?x42 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) (to_real r00)) (* ?x42 ?x65))))
 (let ((?x51 (+ (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x48 ?x48 ?x41 (to_real x)) (* ?x42 ?x42 ?x48 ?x48 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x53 (- ?x51 (* ?x42 ?x42 ?x42 ?x48 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x76 (or (not (= (* ?x46 ?x53) ?x55)) (not (= (* ?x67 (- ?x70 (* ?x42 ?x42 ?x42 ?x58 ?x65 ?x65))) ?x55)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 $x76))))))))))))))) :qid k!28))
 ))
 (let ((?x530 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x170 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x464 (+ ?x149 ?x48 ?x170 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x576 (+ ?x48 ?x170)))
 (let ((?x43 (to_real x)))
 (let ((?x256 (* 2.0 ?x43)))
 (let ((?x305 (+ 1.0 ?x256)))
 (let ((?x717 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x576 ?x576)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x305 ?x305 ?x576 ?x576)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x305 ?x305 ?x576)))))
 (let ((?x629 (+ (* (- (/ 1.0 4.0)) (* ?x43 ?x48 ?x48 ?x40 ?x40 ?x40)) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x48 ?x40 ?x40 ?x40)))))
 (let (($x120 (or (not (= (* ?x629 (+ ?x149 ?x48 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x717 ?x464) 0.0)))))
 (let (($x522 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x264 (and $x522 $x120)))
 (let ((?x55 (to_real 0)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x58 (- ?x48 ?x42)))
 (let ((?x70 (+ (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x58 ?x58 ?x65) (* ?x42 ?x42 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) ?x61) (* ?x42 ?x65))))
 (let ((?x51 (+ (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x48 ?x48 ?x41 ?x43) (* ?x42 ?x42 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x56 (= (* ?x46 (- ?x51 (* ?x42 ?x42 ?x42 ?x48 ?x41 ?x43 ?x41 ?x43))) ?x55)))
 (let (($x76 (or (not $x56) (not (= (* ?x67 (- ?x70 (* ?x42 ?x42 ?x42 ?x58 ?x65 ?x65))) ?x55)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x77 (and $x38 $x76)))
 (rewrite (= $x77 $x264)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x79 (asserted $x78)))
 (let ((@x321 (mp (mp @x79 (quant-intro (proof-bind ?x530) (= $x78 $x153)) $x153) (rewrite (= $x153 $x153)) $x153)))
 (let ((@x638 (mp (mp @x321 (quant-intro (proof-bind ?x729) (= $x153 $x338)) $x338) (quant-intro (proof-bind ?x628) (= $x338 $x627)) $x627)))
 (let ((@x636 (mp (mp~ @x638 (sk (~ $x627 $x675)) $x675) (rewrite (= $x675 $x501)) $x501)))
 (let ((@x356 (mp (and-elim @x636 $x702) @x269 $x244)))
 (let ((@x659 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x244) $x681)) @x356 $x681)))
 (let ((@x239 ((_ th-lemma arith) @x659 (hypothesis (not $x701)) (hypothesis $x314) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x85) $x497)) @x575 $x497) false)))
 (let ((@x779 (unit-resolution (lemma @x239 (or (not $x314) $x701)) @x778 $x701)))
 (let (($x700 (<= ?x696 0.0)))
 (let (($x683 (>= ?x699 0)))
 (let ((@x744 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x244) $x683)) @x356 $x683)))
 (let (($x81 (<= ?x724 0.0)))
 (let ((@x498 ((_ th-lemma arith) (hypothesis (not $x700)) (unit-resolution @x500 @x494 $x663) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x85) $x81)) @x575 $x81) @x744 false)))
 (let ((@x591 (lemma @x498 $x700)))
 (let (($x686 (<= ?x757 0.0)))
 (let (($x431 (not $x686)))
 (let (($x685 (= 0.0 ?x757)))
 (let (($x524 (not $x685)))
 (let ((@x551 (monotonicity (symm (commutativity (= $x685 $x288)) (= $x288 $x685)) (= $x710 $x524))))
 (let (($x706 (= 0.0 ?x696)))
 (let ((@x740 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x706 (not $x700) (not $x701))) @x591 @x779 $x706)))
 (let (($x704 (= ?x696 0.0)))
 (let (($x434 (not $x704)))
 (let ((@x218 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x434 $x424)) (hypothesis $x656) $x434) (symm (hypothesis $x706) $x704) false)))
 (let ((@x450 (unit-resolution (and-elim @x636 $x176) (unit-resolution (lemma @x218 (or (not $x706) $x424)) @x740 $x424) $x710)))
 (let (($x238 (>= ?x757 0.0)))
 (let ((@x600 (unit-resolution ((_ th-lemma arith) (or $x238 (not $x681) (not $x683))) @x659 @x744 (hypothesis (not $x238)) false)))
 (let ((@x618 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x685 $x431 (not $x238))) (lemma @x600 $x238) (mp @x450 @x551 $x524) $x431)))
 (unit-resolution ((_ th-lemma arith) (or (not $x701) (not $x700) $x686 (not $x663) (not $x314))) @x618 @x591 @x779 @x778 (unit-resolution @x500 @x781 $x663) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      32
 :arith-eq-adapter               42
 :arith-bound-propagations-cheap 27
 :arith-bound-propagations-lp    2
 :arith-conflicts                75
 :arith-diseq                    37
 :arith-gcd-calls                6
 :arith-grobner-calls            5
 :arith-grobner-conflicts        2
 :arith-horner-calls             5
 :arith-lower                    60
 :arith-make-feasible            61
 :arith-max-columns              65
 :arith-max-rows                 15
 :arith-nla-explanations         73
 :arith-nla-lemmas               73
 :arith-patches                  6
 :arith-patches-success          6
 :arith-propagations             27
 :arith-upper                    59
 :conflicts                      9
 :decisions                      73
 :del-clause                     113
 :final-checks                   35
 :max-memory                     4.22
 :memory                         3.16
 :mk-bool-var                    196
 :mk-clause                      157
 :num-allocs                     3222238
 :num-checks                     1
 :propagations                   74
 :rlimit-count                   5685
 :time                           0.02
 :total-time                     0.02)
