unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x297 (* (- 1) x!1)))
 (let ((?x406 (* (- 1) y!0)))
 (let ((?x645 (+ y00 x00 ?x406 ?x297)))
 (let (($x381 (>= ?x645 0)))
 (let (($x646 (= ?x645 0)))
 (let ((?x387 (* (- 1) (* y!0 y!0))))
 (let ((?x224 (* (- 1) (* y!0 x!1 x!1 x!1))))
 (let ((?x259 (* x!1 x!1 x!1)))
 (let ((?x359 (* (- 1) (* y!0 y!0 x!1 x!1))))
 (let ((?x87 (* x!1 x!1)))
 (let ((?x316 (+ (- 3) ?x87 ?x359 ?x259 y!0 ?x297 (* 3 (* y!0 x!1)) ?x224 (* (- 2) (* y!0 y!0 x!1)) ?x387)))
 (let ((?x78 (* (- 1) x00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x534 (+ ?x71 ?x78 y!0 x!1)))
 (let ((?x471 (* ?x534 ?x316)))
 (let (($x198 (= ?x471 0)))
 (let (($x440 (not $x198)))
 (let ((?x388 (* (- 3) x!1)))
 (let ((?x319 (* (- 1) ?x259)))
 (let ((?x123 (* 3 ?x87)))
 (let ((?x404 (+ (- 1) ?x123 ?x359 ?x319 ?x406 ?x388 (* (- 1) (* y!0 x!1)) (* 2 (* y!0 x!1 x!1)) ?x224 (* 2 (* y!0 y!0 x!1)) ?x387)))
 (let ((?x233 (* ?x534 ?x404)))
 (let (($x642 (= ?x233 0)))
 (let (($x392 (or (not $x642) $x440)))
 (let (($x231 (and $x646 $x392)))
 (let ((?x504 (* (- 1) (* x!1 x!1 y!0 y!0))))
 (let ((?x225 (* (- 1) (* x!1 x!1 x!1 y!0))))
 (let ((?x239 (+ (- 3) ?x297 y!0 (* 3 (* x!1 y!0)) ?x87 ?x225 ?x259 ?x387 (* (- 2) (* x!1 y!0 y!0)) ?x504)))
 (let ((?x292 (+ x!1 y!0 ?x71 ?x78)))
 (let ((?x531 (+ (- 1) ?x388 ?x406 (* (- 1) (* x!1 y!0)) (* 2 (* x!1 x!1 y!0)) ?x123 ?x225 ?x319 ?x387 (* 2 (* x!1 y!0 y!0)) ?x504)))
 (let (($x500 (and (= ?x292 0) (or (not (= (* ?x292 ?x531) 0)) (not (= (* ?x292 ?x239) 0))))))
 (let (($x221 (exists ((x Int) (y Int) )(! (let ((?x438 (* (- 1) (* x x y y))))
 (let ((?x378 (* x y y)))
 (let ((?x413 (* (- 2) ?x378)))
 (let ((?x375 (* (- 1) (* y y))))
 (let ((?x249 (* x x x)))
 (let ((?x295 (* (- 1) (* x x x y))))
 (let ((?x188 (* x x)))
 (let ((?x175 (* x y)))
 (let ((?x546 (* 3 ?x175)))
 (let ((?x78 (* (- 1) x00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x92 (+ x y ?x71 ?x78)))
 (let ((?x664 (* ?x92 (+ (- 3) (* (- 1) x) y ?x546 ?x188 ?x295 ?x249 ?x375 ?x413 ?x438))))
 (let (($x665 (not (= ?x664 0))))
 (let ((?x458 (* 2 ?x378)))
 (let ((?x296 (* (- 1) ?x249)))
 (let ((?x324 (* 3 ?x188)))
 (let ((?x412 (* 2 (* x x y))))
 (let ((?x176 (* (- 1) ?x175)))
 (let ((?x145 (* (- 1) y)))
 (let ((?x229 (+ (- 1) (* (- 3) x) ?x145 ?x176 ?x412 ?x324 ?x295 ?x296 ?x375 ?x458 ?x438)))
 (let (($x97 (= ?x92 0)))
 (and $x97 (or (not (= (* ?x92 ?x229) 0)) $x665)))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x566 (exists ((x Int) (y Int) )(! (let ((?x438 (* (- 1) (* x x y y))))
 (let ((?x378 (* x y y)))
 (let ((?x413 (* (- 2) ?x378)))
 (let ((?x375 (* (- 1) (* y y))))
 (let ((?x249 (* x x x)))
 (let ((?x295 (* (- 1) (* x x x y))))
 (let ((?x188 (* x x)))
 (let ((?x175 (* x y)))
 (let ((?x546 (* 3 ?x175)))
 (let ((?x171 (* (- 1) (* x 1))))
 (let ((?x78 (* (- 1) x00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x92 (+ x y ?x71 ?x78)))
 (let (($x244 (= (* ?x92 (+ (- 3) y ?x171 ?x546 ?x188 ?x295 ?x249 ?x375 ?x413 ?x438)) 0)))
 (let ((?x458 (* 2 ?x378)))
 (let ((?x296 (* (- 1) ?x249)))
 (let ((?x324 (* 3 ?x188)))
 (let ((?x412 (* 2 (* x x y))))
 (let ((?x176 (* (- 1) ?x175)))
 (let ((?x145 (* (- 1) y)))
 (let ((?x475 (+ (- 1) (* (- 2) x) ?x145 ?x171 ?x176 ?x412 ?x324 ?x295 ?x296 ?x375 ?x458 ?x438)))
 (let (($x483 (not (= (* ?x92 ?x475) 0))))
 (let (($x97 (= ?x92 0)))
 (and $x97 (or $x483 (not $x244)))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x293 (lambda ((x Int) (y Int) )(let ((?x438 (* (- 1) (* x x y y))))
 (let ((?x378 (* x y y)))
 (let ((?x413 (* (- 2) ?x378)))
 (let ((?x375 (* (- 1) (* y y))))
 (let ((?x249 (* x x x)))
 (let ((?x295 (* (- 1) (* x x x y))))
 (let ((?x188 (* x x)))
 (let ((?x175 (* x y)))
 (let ((?x546 (* 3 ?x175)))
 (let ((?x78 (* (- 1) x00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x92 (+ x y ?x71 ?x78)))
 (let ((?x664 (* ?x92 (+ (- 3) (* (- 1) x) y ?x546 ?x188 ?x295 ?x249 ?x375 ?x413 ?x438))))
 (let (($x665 (not (= ?x664 0))))
 (let ((?x458 (* 2 ?x378)))
 (let ((?x296 (* (- 1) ?x249)))
 (let ((?x324 (* 3 ?x188)))
 (let ((?x412 (* 2 (* x x y))))
 (let ((?x176 (* (- 1) ?x175)))
 (let ((?x145 (* (- 1) y)))
 (let ((?x229 (+ (- 1) (* (- 3) x) ?x145 ?x176 ?x412 ?x324 ?x295 ?x296 ?x375 ?x458 ?x438)))
 (let (($x97 (= ?x92 0)))
 (let (($x519 (and $x97 (or (not (= (* ?x92 ?x229) 0)) $x665))))
 (let ((?x171 (* (- 1) (* x 1))))
 (let (($x244 (= (* ?x92 (+ (- 3) y ?x171 ?x546 ?x188 ?x295 ?x249 ?x375 ?x413 ?x438)) 0)))
 (let ((?x475 (+ (- 1) (* (- 2) x) ?x145 ?x171 ?x176 ?x412 ?x324 ?x295 ?x296 ?x375 ?x458 ?x438)))
 (let (($x483 (not (= (* ?x92 ?x475) 0))))
 (let (($x433 (and $x97 (or $x483 (not $x244)))))
 (rewrite (= $x433 $x519)))))))))))))))))))))))))))))))
 ))
 (let (($x271 (exists ((x Int) (y Int) )(! (let ((?x315 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x350 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x145 (* (- 1) y)))
 (let ((?x320 (+ (- 2) ?x145 (* (+ (- 1) y) (+ 1 x) (+ 1 x)) ?x350 ?x315)))
 (let ((?x78 (* (- 1) x00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x658 (+ x ?x71 ?x78 y)))
 (let ((?x261 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x251 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x227 (+ (- 2) ?x145 (* (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x251 ?x261)))
 (and (= ?x658 0) (or (not (= (* ?x658 ?x227) 0)) (not (= (* ?x658 ?x320) 0)))))))))))))) :qid k!27))
 ))
 (let ((?x401 (lambda ((x Int) (y Int) )(let ((?x438 (* (- 1) (* x x y y))))
 (let ((?x378 (* x y y)))
 (let ((?x413 (* (- 2) ?x378)))
 (let ((?x375 (* (- 1) (* y y))))
 (let ((?x249 (* x x x)))
 (let ((?x295 (* (- 1) (* x x x y))))
 (let ((?x188 (* x x)))
 (let ((?x175 (* x y)))
 (let ((?x546 (* 3 ?x175)))
 (let ((?x171 (* (- 1) (* x 1))))
 (let ((?x78 (* (- 1) x00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x92 (+ x y ?x71 ?x78)))
 (let (($x244 (= (* ?x92 (+ (- 3) y ?x171 ?x546 ?x188 ?x295 ?x249 ?x375 ?x413 ?x438)) 0)))
 (let ((?x458 (* 2 ?x378)))
 (let ((?x296 (* (- 1) ?x249)))
 (let ((?x324 (* 3 ?x188)))
 (let ((?x412 (* 2 (* x x y))))
 (let ((?x176 (* (- 1) ?x175)))
 (let ((?x145 (* (- 1) y)))
 (let ((?x475 (+ (- 1) (* (- 2) x) ?x145 ?x171 ?x176 ?x412 ?x324 ?x295 ?x296 ?x375 ?x458 ?x438)))
 (let (($x483 (not (= (* ?x92 ?x475) 0))))
 (let (($x97 (= ?x92 0)))
 (let (($x433 (and $x97 (or $x483 (not $x244)))))
 (let ((?x315 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x350 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x320 (+ (- 2) ?x145 (* (+ (- 1) y) (+ 1 x) (+ 1 x)) ?x350 ?x315)))
 (let ((?x658 (+ x ?x71 ?x78 y)))
 (let ((?x261 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x251 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x227 (+ (- 2) ?x145 (* (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x251 ?x261)))
 (let (($x366 (and (= ?x658 0) (or (not (= (* ?x658 ?x227) 0)) (not (= (* ?x658 ?x320) 0))))))
 (rewrite (= $x366 $x433)))))))))))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((x Int) (y Int) )(! (let ((?x58 (+ (- (- (- 1) y) 1) (* (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x61 (- ?x58 (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x62 (- ?x61 (* (+ x 1) (+ x 1) (- y 1) (- y 1)))))
 (let (($x64 (= (* (+ (- (- (+ x 1) y00) x00) (- y 1)) ?x62) 0)))
 (let ((?x42 (+ (- (- 1) (+ y 1)) (* (- x 1) (- x 1) (+ y 1)))))
 (let ((?x45 (- ?x42 (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x46 (- ?x45 (* (- x 1) (- x 1) (+ y 1) (+ y 1)))))
 (let (($x48 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x46) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x48) (not $x64))))))))))) :qid k!27))
 ))
 (let ((?x377 (lambda ((x Int) (y Int) )(let ((?x315 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x350 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x145 (* (- 1) y)))
 (let ((?x320 (+ (- 2) ?x145 (* (+ (- 1) y) (+ 1 x) (+ 1 x)) ?x350 ?x315)))
 (let ((?x78 (* (- 1) x00)))
 (let ((?x71 (* (- 1) y00)))
 (let ((?x658 (+ x ?x71 ?x78 y)))
 (let ((?x261 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x251 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x227 (+ (- 2) ?x145 (* (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x251 ?x261)))
 (let (($x366 (and (= ?x658 0) (or (not (= (* ?x658 ?x227) 0)) (not (= (* ?x658 ?x320) 0))))))
 (let ((?x58 (+ (- (- (- 1) y) 1) (* (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x61 (- ?x58 (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x62 (- ?x61 (* (+ x 1) (+ x 1) (- y 1) (- y 1)))))
 (let (($x64 (= (* (+ (- (- (+ x 1) y00) x00) (- y 1)) ?x62) 0)))
 (let ((?x42 (+ (- (- 1) (+ y 1)) (* (- x 1) (- x 1) (+ y 1)))))
 (let ((?x45 (- ?x42 (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x46 (- ?x45 (* (- x 1) (- x 1) (+ y 1) (+ y 1)))))
 (let (($x48 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x46) 0)))
 (let (($x67 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x48) (not $x64)))))
 (rewrite (= $x67 $x366)))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x220 (mp (mp @x69 (quant-intro (proof-bind ?x377) (= $x68 $x271)) $x271) (rewrite (= $x271 $x271)) $x271)))
 (let ((@x530 (mp (mp @x220 (quant-intro (proof-bind ?x401) (= $x271 $x566)) $x566) (quant-intro (proof-bind ?x293) (= $x566 $x221)) $x221)))
 (let ((@x462 (mp (mp~ @x530 (sk (~ $x221 $x500)) $x500) (rewrite (= $x500 $x231)) $x231)))
 (let ((@x376 (and-elim @x462 $x646)))
 (let ((@x660 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x646) $x381)) @x376 $x381)))
 (let (($x358 (<= ?x645 0)))
 (let ((@x535 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x646) $x358)) @x376 $x358)))
 (let (($x393 (not (<= ?x471 0))))
 (let (($x636 (>= ?x471 0)))
 (let (($x408 (>= ?x233 0)))
 (let (($x357 (<= ?x233 0)))
 (let ((@x417 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x642 (not $x357) (not $x408))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x357)) @x535 @x660 false) $x357) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x408)) @x535 @x660 false) $x408) $x642)))
 (let ((@x416 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x198 $x393 (not $x636))) (unit-resolution (and-elim @x462 $x392) @x417 $x440) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x636)) @x535 @x660 false) $x636) $x393)))
 ((_ th-lemma arith farkas 1 1 1) @x416 @x535 @x660 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             112
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.63
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1128733
 :num-checks                1
 :propagations              14
 :rlimit-count              2779
 :time                      0.01
 :total-time                0.01)
