unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x342 (* (- 3) c!3)))
 (let ((?x368 (* k!2 n!0)))
 (let ((?x313 (* 2 n!0)))
 (let ((?x300 (* (- 3) k!2)))
 (let ((?x502 (+ 3 ?x300 ?x313 ?x368 (* n!0 m!1) ?x342)))
 (let (($x842 (<= ?x502 0)))
 (let ((?x387 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x534 (<= ?x387 1)))
 (let (($x158 (= ?x387 1)))
 (let ((?x493 (+ k!2 c!3)))
 (let ((?x362 (+ k!2 m!1)))
 (let ((?x386 (+ 6 m!1)))
 (let ((?x507 (* ?x386 ?x386 ?x386 ?x386 ?x362 ?x362 ?x362 ?x362 ?x362 ?x362 ?x362 ?x362 ?x493 ?x493 ?x493 ?x493 ?x493 ?x493 ?x502)))
 (let (($x495 (= ?x507 0)))
 (let (($x505 (not $x495)))
 (let ((?x349 (* 3 c!3)))
 (let ((?x397 (* (- 1) ?x368)))
 (let ((?x623 (* (- 2) n!0)))
 (let ((?x486 (+ k!2 ?x623 ?x397 ?x349)))
 (let (($x485 (= ?x486 1)))
 (let ((?x200 (* 18 c!3)))
 (let ((?x356 (* (- 1) (* k!2 k!2))))
 (let ((?x467 (* (- 9) n!0)))
 (let ((?x189 (* 5 k!2)))
 (let ((?x491 (+ ?x189 ?x467 ?x356 (* 9 (* n!0 c!3)) ?x200)))
 (let (($x499 (= ?x491 4)))
 (let ((?x475 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x479 (= ?x475 (- 6))))
 (let (($x496 (and $x479 $x499 $x485 $x158 $x505)))
 (let ((?x384 (+ c!3 k!2)))
 (let ((?x344 (* ?x386 ?x386 ?x386 ?x386 ?x362 ?x362 ?x362 ?x362 ?x362 ?x362 ?x362 ?x362 ?x384 ?x384 ?x384 ?x384 ?x384 ?x384 (+ 3 ?x342 ?x300 ?x313 ?x368 (* m!1 n!0)))))
 (let (($x466 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x200 ?x189 ?x467 ?x356 (* 9 (* c!3 n!0))) 4) (= (+ ?x349 k!2 ?x623 ?x397) 1) $x158 (not (= ?x344 0)))))
 (let (($x198 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x403 (+ 3 ?x215 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x169 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x403)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x202 (= (+ ?x40 ?x44 ?x204 ?x205 (* 9 (* c n))) 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 $x202 $x254 $x292 (not (= ?x169 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x139 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x152 (not (= ?x624 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x185 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x185 $x143 $x152))))))))))))))))) :qid k!34))
 ))
 (let ((?x630 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x403 (+ 3 ?x215 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x169 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x403)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x202 (= (+ ?x40 ?x44 ?x204 ?x205 (* 9 (* c n))) 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x364 (and $x118 $x202 $x254 $x292 (not (= ?x169 0)))))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) ?x71) (* (- 1) m) ?x59)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x152 (not (= ?x624 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x185 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x194 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x185 $x143 $x152)))
 (rewrite (= $x194 $x364)))))))))))))))))))))))))))
 ))
 (let (($x153 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x152 (not (= ?x624 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= ?x329 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 $x152)))))))))))))) :qid k!34))
 ))
 (let ((?x138 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x152 (not (= ?x624 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x185 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x194 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x185 $x143 $x152)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x176 (and $x118 (= ?x329 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 $x152)))
 (rewrite (= $x176 $x194)))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x78 (- 1)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let ((?x80 (* ?x77 ?x78 ?x68 ?x71 ?x78 ?x68 ?x68 ?x68 ?x71 ?x79 ?x79 ?x79 ?x68 ?x68 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x79)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x80 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x167 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x152 (not (= ?x624 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x176 (and $x118 (= ?x329 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 $x152)))
 (let ((?x79 (+ m 6)))
 (let ((?x78 (- 1)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let ((?x80 (* ?x77 ?x78 ?x68 ?x71 ?x78 ?x68 ?x68 ?x68 ?x71 ?x79 ?x79 ?x79 ?x68 ?x68 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x79)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x80 0))))))
 (rewrite (= $x84 $x176))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x396 (mp (mp @x86 (quant-intro (proof-bind ?x167) (= $x85 $x153)) $x153) (rewrite (= $x153 $x153)) $x153)))
 (let ((@x188 (mp (mp @x396 (quant-intro (proof-bind ?x138) (= $x153 $x139)) $x139) (quant-intro (proof-bind ?x630) (= $x139 $x198)) $x198)))
 (let ((@x421 (mp (mp~ @x188 (sk (~ $x198 $x466)) $x466) (rewrite (= $x466 $x496)) $x496)))
 (let ((@x497 (and-elim @x421 $x158)))
 (let ((@x546 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x534)) @x497 $x534)))
 (let (($x531 (>= ?x387 1)))
 (let ((@x564 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x531)) @x497 $x531)))
 (let (($x529 (<= ?x475 (- 6))))
 (let ((@x498 (and-elim @x421 $x479)))
 (let ((@x346 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x479) $x529)) @x498 $x529)))
 (let (($x526 (>= ?x475 (- 6))))
 (let ((@x116 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x479) $x526)) @x498 $x526)))
 (let (($x530 (<= ?x486 1)))
 (let ((@x492 (and-elim @x421 $x485)))
 (let ((@x559 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x530)) @x492 $x530)))
 (let (($x536 (>= ?x486 1)))
 (let ((@x391 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x536)) @x492 $x536)))
 (let (($x528 (<= ?x491 4)))
 (let ((@x488 (and-elim @x421 $x499)))
 (let ((@x173 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x499) $x528)) @x488 $x528)))
 (let (($x532 (>= ?x491 4)))
 (let ((@x538 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x499) $x532)) @x488 $x532)))
 (let (($x861 (not $x842)))
 (let ((@x862 (hypothesis $x861)))
 (let ((@x966 ((_ th-lemma arith) @x862 @x538 @x173 @x538 @x173 @x564 @x546 @x538 @x173 @x538 @x173 @x391 @x559 @x564 @x546 @x391 @x559 @x564 @x546 @x116 @x346 @x564 @x546 false)))
 (let (($x841 (>= ?x502 0)))
 (let ((@x840 ((_ th-lemma arith) (hypothesis (not $x841)) @x116 @x346 @x391 @x559 @x564 @x546 false)))
 (let ((@x860 (lemma @x840 $x841)))
 (let (($x967 (not (<= ?x507 0))))
 (let (($x541 (>= ?x507 0)))
 (let (($x857 (= ?x502 0)))
 (let (($x664 (not $x857)))
 (let (($x99 (not $x541)))
 (let ((@x120 (hypothesis $x99)))
 (let ((@x939 ((_ th-lemma arith farkas 1 1 1) @x120 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x664 $x841)) (hypothesis $x857) $x841) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x664 $x842)) (hypothesis $x857) $x842) false)))
 (let (($x755 (>= ?x493 0)))
 (let (($x759 (not $x755)))
 (let (($x414 (<= ?x493 0)))
 (let (($x453 (>= m!1 0)))
 (let (($x454 (<= k!2 2)))
 (let (($x455 (not $x454)))
 (let (($x360 (<= k!2 1)))
 (let (($x95 (not $x360)))
 (let (($x388 (not $x414)))
 (let ((@x124 (hypothesis $x388)))
 (let ((?x487 (* n!0 c!3)))
 (let (($x537 (>= ?x487 1)))
 (let (($x540 (>= n!0 0)))
 (let (($x552 (not $x537)))
 (let ((@x550 (hypothesis $x552)))
 (let (($x551 (>= n!0 (- 1))))
 (let (($x566 (not $x551)))
 (let ((@x547 (hypothesis $x566)))
 (let ((@x394 (lemma ((_ th-lemma arith) @x547 @x564 @x559 @x550 @x538 @x564 @x547 @x547 false) (or $x551 $x537))))
 (let ((@x553 (hypothesis (not $x540))))
 (let ((@x556 (hypothesis $x551)))
 (let ((@x561 ((_ th-lemma arith farkas 4 6 6 6 6 2 1 3 3 3 1 1) @x556 @x556 @x553 @x556 @x553 @x564 @x559 @x550 @x556 @x553 @x556 @x553 false)))
 (let ((@x392 (unit-resolution (lemma @x561 (or $x566 $x540 $x537)) (unit-resolution @x394 @x550 $x551) @x550 $x540)))
 (let ((@x401 (lemma ((_ th-lemma arith farkas 13/9 1/9 16/3 2 1) @x564 @x538 @x392 (hypothesis $x414) @x550 false) (or $x388 $x537))))
 (let ((@x269 ((_ th-lemma arith) @x120 (unit-resolution @x401 @x550 $x388) @x346 @x392 @x346 @x564 @x392 @x391 @x559 @x116 @x346 @x116 @x346 @x564 @x546 false)))
 (let ((@x251 (unit-resolution (lemma @x269 (or $x537 $x541)) @x120 $x537)))
 (let ((?x352 (* n!0 n!0)))
 (let (($x576 (>= ?x352 1)))
 (let (($x355 (>= k!2 0)))
 (let ((@x125 (hypothesis (not $x355))))
 (let ((@x261 (hypothesis $x537)))
 (let ((@x260 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) @x261 @x564 @x125 @x125 @x124 false) (or $x355 $x552 $x414))))
 (let ((@x242 (unit-resolution @x260 @x124 @x251 $x355)))
 (let (($x133 (not $x576)))
 (let ((@x408 (hypothesis $x133)))
 (let ((@x248 ((_ th-lemma arith) @x120 @x124 @x346 @x546 @x408 @x242 @x346 @x564 @x546 @x408 @x242 @x116 @x346 @x391 @x559 @x564 @x546 false)))
 (let ((@x291 (unit-resolution (lemma @x248 (or $x576 $x541 $x414)) @x124 @x120 $x576)))
 (let ((@x130 (hypothesis $x360)))
 (let ((@x409 (hypothesis $x576)))
 (let ((@x318 ((_ th-lemma arith gomory-cut 1/2 1) @x564 (unit-resolution @x260 @x124 @x261 $x355) (>= (+ k!2 (* (- 1) n!0) (* (- 1) ?x352)) 1))))
 (let ((@x110 ((_ th-lemma arith farkas 3/16 9/16 1/16 1/16 1/16 1/16 1/16 1/16 1/16 9/16 9/8 1) @x564 @x261 @x318 @x546 @x130 @x318 @x546 @x130 @x173 @x409 @x124 @x130 false)))
 (let ((@x693 (unit-resolution (lemma @x110 (or $x95 $x552 $x133 $x414)) @x291 @x251 @x124 $x95)))
 (let ((@x351 (hypothesis $x454)))
 (let ((@x450 (lemma ((_ th-lemma arith farkas 1 -4/3 -4 -3 10/3 1 1) @x559 @x564 @x409 @x124 @x351 (hypothesis $x95) @x351 false) (or $x455 $x133 $x414 $x360))))
 (let ((@x689 (unit-resolution @x450 @x291 @x124 @x693 $x455)))
 (let (($x381 (>= ?x368 (- 3))))
 (let (($x651 (not $x453)))
 (let (($x452 (= m!1 0)))
 (let (($x523 (not $x452)))
 (let (($x644 (not $x381)))
 (let ((@x645 (hypothesis $x644)))
 (let (($x451 (<= m!1 0)))
 (let ((@x524 (hypothesis $x452)))
 (let ((@x518 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x523 $x451)) @x524 $x451)))
 (let ((@x646 ((_ th-lemma arith farkas -1/3 -1/8 -1/8 1/12 1/4 3/8 -1/6 -1/6 1 1 1 1) @x546 @x645 @x559 @x564 @x409 @x124 @x518 @x346 @x518 @x346 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x523 $x453)) @x524 $x453) @x116 false)))
 (let ((@x382 (unit-resolution (lemma @x646 (or $x523 $x381 $x133 $x414)) @x645 @x409 @x124 $x523)))
 (let ((@x514 (hypothesis $x455)))
 (let (($x519 (not $x451)))
 (let ((@x443 (hypothesis $x519)))
 (let ((@x440 ((_ th-lemma arith farkas -1/6 -1/6 1 1 1 1 1 1 1 1 1 1 1) @x443 @x116 @x564 @x409 @x514 @x538 @x645 @x559 @x124 @x645 @x559 @x564 @x409 false)))
 (let ((@x379 (unit-resolution (lemma @x440 (or $x451 $x133 $x454 $x381 $x414)) @x645 @x514 @x409 @x124 $x451)))
 (let ((@x336 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x452 $x519 $x651)) @x379 @x382 $x651)))
 (let ((@x383 ((_ th-lemma arith) @x645 @x559 @x346 @x124 @x336 @x336 @x346 @x336 @x346 @x559 @x124 false)))
 (let ((@x706 (unit-resolution (lemma @x383 (or $x381 $x414 $x454 $x133)) @x124 @x689 @x291 $x381)))
 (let ((@x699 (lemma ((_ th-lemma arith farkas 1 1 1 1) (hypothesis $x381) @x514 (hypothesis $x651) @x346 false) (or $x453 $x644 $x454))))
 (let ((@x690 ((_ th-lemma arith) @x120 @x124 @x443 @x689 @x443 @x116 @x346 @x391 @x559 @x564 @x546 false)))
 (let ((@x708 (unit-resolution (lemma @x690 (or $x451 $x541 $x414)) @x124 @x120 $x451)))
 (let ((@x709 ((_ th-lemma arith farkas 1/3 -1/3 -1/6 -1/6 1 1 1 1) @x689 @x546 @x708 @x346 @x708 @x346 (unit-resolution @x699 @x706 @x689 $x453) @x116 false)))
 (let ((@x758 ((_ th-lemma arith farkas 1 1 1) @x120 (hypothesis $x755) (unit-resolution (lemma @x709 (or $x414 $x541)) @x120 $x414) false)))
 (let ((@x936 ((_ th-lemma arith farkas 1 1 1) @x120 (unit-resolution (lemma @x758 (or $x759 $x541)) @x120 $x759) @x862 false)))
 (let ((@x946 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x857 $x861 (not $x841))) @x860 (or $x857 $x861))))
 (let ((@x947 (unit-resolution @x946 (unit-resolution (lemma @x936 (or $x842 $x541)) @x120 $x842) (unit-resolution (lemma @x939 (or $x664 $x541)) @x120 $x664) false)))
 (let ((@x971 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x495 $x967 $x99)) (and-elim @x421 $x505) (or $x967 $x99))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x971 (lemma @x947 $x541) $x967) @x860 (lemma @x966 $x842) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 32
 :arith-assert-diseq        19
 :arith-assert-lower        252
 :arith-assert-upper        180
 :arith-bound-prop          4
 :arith-branch-var          16
 :arith-conflicts           32
 :arith-eq-adapter          18
 :arith-fixed-eqs           43
 :arith-gcd-tests           107
 :arith-gomory-cuts         9
 :arith-grobner             28
 :arith-ineq-splits         16
 :arith-max-min             1548
 :arith-nonlinear-bounds    85
 :arith-nonlinear-horner    242
 :arith-num-rows            11
 :arith-offset-eqs          2
 :arith-patches             36
 :arith-patches_succ        4
 :arith-pivots              351
 :arith-pseudo-nonlinear    31
 :arith-row-summations      1504
 :arith-tableau-max-columns 38
 :arith-tableau-max-rows    11
 :conflicts                 34
 :decisions                 114
 :del-clause                59
 :final-checks              102
 :max-memory                3.74
 :memory                    3.23
 :minimized-lits            8
 :mk-bool-var               173
 :mk-clause                 118
 :num-allocs                1841850
 :num-checks                1
 :propagations              132
 :rlimit-count              82269
 :time                      0.03
 :total-time                0.03)
