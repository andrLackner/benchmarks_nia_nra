unsat
((set-logic NIA)
(declare-fun r!2 () Int)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x109 (* (- 2) u!1)))
 (let ((?x326 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x320 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) (* (- 1) (* v!0 v!0)) ?x326 ?x109 (* (- 4) r!2))))
 (let (($x431 (>= ?x320 0)))
 (let (($x485 (= ?x320 0)))
 (let ((?x119 (* 4 r!2)))
 (let ((?x585 (* 2 u!1)))
 (let ((?x487 (* (- 1) ?x326)))
 (let ((?x243 (* v!0 v!0)))
 (let ((?x435 (* (- 2) v!0)))
 (let ((?x199 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x123 (* (- 2) u00)))
 (let ((?x107 (* (- 4) r00)))
 (let ((?x531 (+ ?x107 ?x123 ?x41 ?x46 ?x199 ?x435 ?x243 ?x487 ?x585 ?x119)))
 (let ((?x569 (* v!0 v!0 r!2)))
 (let ((?x239 (* (- 1) v!0)))
 (let ((?x593 (+ ?x239 r!2)))
 (let ((?x167 (+ 2 v!0)))
 (let ((?x315 (* u!1 u!1 u!1 r!2)))
 (let ((?x162 (* (- 4) ?x243)))
 (let ((?x182 (* (- 4) v!0)))
 (let ((?x115 (* (- 1) (* v!0 v!0 v!0))))
 (let ((?x299 (+ ?x115 (* 4 (* v!0 r!2)) (* (- 1) (* v!0 u!1 u!1 u!1)) ?x182 ?x162 ?x315 ?x109 ?x119 (* (- 1) (* ?x167 ?x167 ?x167 ?x593 ?x593 ?x593)) ?x569)))
 (let ((?x302 (* ?x299 ?x531)))
 (let (($x133 (= ?x302 0)))
 (let (($x161 (not $x133)))
 (let ((?x221 (* 8 r!2)))
 (let ((?x539 (* 6 u!1)))
 (let ((?x608 (* 6 (* u!1 u!1 u!1))))
 (let ((?x440 (* 12 ?x326)))
 (let ((?x276 (* u!1 u!1 u!1 u!1)))
 (let ((?x218 (+ (- 4) ?x276 (* (- 1) (* v!0 v!0 v!0 u!1 u!1 u!1)) ?x315 ?x440 ?x608 ?x539 (* 6 (* u!1 u!1 r!2)) (* (- 3) (* v!0 v!0 v!0 u!1 u!1 r!2)) ?x221 (* 12 (* u!1 r!2)) (* v!0 v!0 u!1) (* (- 3) (* v!0 v!0 v!0 u!1 r!2 r!2)) (* (- 1) (* v!0 v!0 v!0 r!2 r!2 r!2)) ?x569)))
 (let ((?x473 (* ?x218 ?x531)))
 (let (($x275 (= ?x473 0)))
 (let (($x176 (or (not $x275) $x161)))
 (let (($x342 (and $x485 $x176)))
 (let ((?x395 (+ ?x119 ?x585 ?x435 ?x107 ?x123 ?x41 ?x487 ?x243 ?x46 ?x199)))
 (let ((?x478 (* r!2 u!1 u!1 u!1)))
 (let ((?x330 (* r!2 v!0 v!0)))
 (let ((?x240 (* (- 1) (* ?x167 ?x167 ?x167 (+ r!2 ?x239) (+ r!2 ?x239) (+ r!2 ?x239)))))
 (let ((?x419 (+ ?x119 ?x109 ?x182 ?x162 ?x240 (* 4 (* r!2 v!0)) ?x330 (* (- 1) (* u!1 u!1 u!1 v!0)) ?x478 ?x115)))
 (let ((?x407 (+ (- 4) ?x221 ?x539 ?x440 ?x330 ?x478 (* (- 1) (* r!2 r!2 r!2 v!0 v!0 v!0)) (* (- 3) (* r!2 r!2 u!1 v!0 v!0 v!0)) (* (- 3) (* r!2 u!1 u!1 v!0 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0)) ?x276 (* 12 (* r!2 u!1)) (* 6 (* r!2 u!1 u!1)) ?x608 (* u!1 v!0 v!0))))
 (let (($x513 (and (= ?x395 0) (or (not (= (* ?x407 ?x395) 0)) (not (= (* ?x419 ?x395) 0))))))
 (let (($x294 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x199 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x177 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x123 (* (- 2) u00)))
 (let ((?x107 (* (- 4) r00)))
 (let ((?x153 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x205 (+ ?x28 ?x36 ?x153 ?x107 ?x123 ?x41 ?x177 ?x45 ?x46 ?x199)))
 (let ((?x398 (* (- 1) (* v v v))))
 (let ((?x381 (* r u u u)))
 (let ((?x373 (* (- 1) (* u u u v))))
 (let ((?x351 (* r v v)))
 (let ((?x404 (* 4 (* r v))))
 (let ((?x104 (* (- 1) v)))
 (let ((?x105 (+ r ?x104)))
 (let ((?x217 (+ 2 v)))
 (let ((?x203 (* (- 1) (* ?x217 ?x217 ?x217 ?x105 ?x105 ?x105))))
 (let ((?x405 (* (- 4) ?x45)))
 (let ((?x136 (* (- 4) v)))
 (let ((?x327 (* (- 2) u)))
 (let (($x475 (= (* (+ ?x28 ?x327 ?x136 ?x405 ?x203 ?x404 ?x351 ?x373 ?x381 ?x398) ?x205) 0)))
 (let ((?x612 (* u v v)))
 (let ((?x604 (* 6 (* u u u))))
 (let ((?x603 (* 6 (* r u u))))
 (let ((?x553 (* u u u u)))
 (let ((?x514 (* (- 1) (* u u u v v v))))
 (let ((?x522 (* (- 3) (* r u u v v v))))
 (let ((?x519 (* (- 3) (* r r u v v v))))
 (let ((?x511 (* (- 1) (* r r r v v v))))
 (let ((?x202 (* 6 u)))
 (let ((?x560 (* 8 r)))
 (let ((?x619 (+ (- 4) ?x560 ?x202 (* 12 ?x43) ?x351 ?x381 ?x511 ?x519 ?x522 ?x514 ?x553 (* 12 (* r u)) ?x603 ?x604 ?x612)))
 (let (($x210 (= ?x205 0)))
 (and $x210 (or (not (= (* ?x619 ?x205) 0)) (not $x475))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x483 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x199 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x177 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x123 (* (- 2) u00)))
 (let ((?x107 (* (- 4) r00)))
 (let ((?x153 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x205 (+ ?x28 ?x36 ?x153 ?x107 ?x123 ?x41 ?x177 ?x45 ?x46 ?x199)))
 (let ((?x398 (* (- 1) (* v v v))))
 (let ((?x381 (* r u u u)))
 (let ((?x373 (* (- 1) (* u u u v))))
 (let ((?x351 (* r v v)))
 (let ((?x404 (* 4 (* r v))))
 (let ((?x104 (* (- 1) v)))
 (let ((?x105 (+ r ?x104)))
 (let ((?x217 (+ 2 v)))
 (let ((?x203 (* (- 1) (* ?x217 ?x217 ?x217 ?x105 ?x105 ?x105))))
 (let ((?x136 (* (- 4) v)))
 (let ((?x327 (* (- 2) u)))
 (let ((?x411 (+ ?x28 ?x327 ?x136 (* (- 2) ?x45) ?x203 ?x404 ?x351 ?x373 ?x381 ?x398 (* 2 (* v ?x104)))))
 (let ((?x612 (* u v v)))
 (let ((?x604 (* 6 (* u u u))))
 (let ((?x603 (* 6 (* r u u))))
 (let ((?x553 (* u u u u)))
 (let ((?x514 (* (- 1) (* u u u v v v))))
 (let ((?x522 (* (- 3) (* r u u v v v))))
 (let ((?x519 (* (- 3) (* r r u v v v))))
 (let ((?x511 (* (- 1) (* r r r v v v))))
 (let ((?x202 (* 6 u)))
 (let ((?x560 (* 8 r)))
 (let ((?x148 (+ (- 4) ?x560 ?x202 (* 8 ?x43) (* 2 (* u 2 r)) ?x351 (* 2 (* u 2 u)) ?x381 ?x511 ?x519 ?x522 ?x514 ?x553 (* 8 (* r u)) ?x603 ?x604 ?x612)))
 (let (($x210 (= ?x205 0)))
 (and $x210 (or (not (= (* ?x148 ?x205) 0)) (not (= (* ?x411 ?x205) 0))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x164 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x199 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x177 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x123 (* (- 2) u00)))
 (let ((?x107 (* (- 4) r00)))
 (let ((?x153 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x205 (+ ?x28 ?x36 ?x153 ?x107 ?x123 ?x41 ?x177 ?x45 ?x46 ?x199)))
 (let ((?x398 (* (- 1) (* v v v))))
 (let ((?x381 (* r u u u)))
 (let ((?x373 (* (- 1) (* u u u v))))
 (let ((?x351 (* r v v)))
 (let ((?x404 (* 4 (* r v))))
 (let ((?x104 (* (- 1) v)))
 (let ((?x105 (+ r ?x104)))
 (let ((?x217 (+ 2 v)))
 (let ((?x203 (* (- 1) (* ?x217 ?x217 ?x217 ?x105 ?x105 ?x105))))
 (let ((?x405 (* (- 4) ?x45)))
 (let ((?x136 (* (- 4) v)))
 (let ((?x327 (* (- 2) u)))
 (let (($x475 (= (* (+ ?x28 ?x327 ?x136 ?x405 ?x203 ?x404 ?x351 ?x373 ?x381 ?x398) ?x205) 0)))
 (let ((?x612 (* u v v)))
 (let ((?x604 (* 6 (* u u u))))
 (let ((?x603 (* 6 (* r u u))))
 (let ((?x553 (* u u u u)))
 (let ((?x514 (* (- 1) (* u u u v v v))))
 (let ((?x522 (* (- 3) (* r u u v v v))))
 (let ((?x519 (* (- 3) (* r r u v v v))))
 (let ((?x511 (* (- 1) (* r r r v v v))))
 (let ((?x202 (* 6 u)))
 (let ((?x560 (* 8 r)))
 (let ((?x619 (+ (- 4) ?x560 ?x202 (* 12 ?x43) ?x351 ?x381 ?x511 ?x519 ?x522 ?x514 ?x553 (* 12 (* r u)) ?x603 ?x604 ?x612)))
 (let (($x210 (= ?x205 0)))
 (let (($x195 (and $x210 (or (not (= (* ?x619 ?x205) 0)) (not $x475)))))
 (let ((?x411 (+ ?x28 ?x327 ?x136 (* (- 2) ?x45) ?x203 ?x404 ?x351 ?x373 ?x381 ?x398 (* 2 (* v ?x104)))))
 (let ((?x148 (+ (- 4) ?x560 ?x202 (* 8 ?x43) (* 2 (* u 2 r)) ?x351 (* 2 (* u 2 u)) ?x381 ?x511 ?x519 ?x522 ?x514 ?x553 (* 8 (* r u)) ?x603 ?x604 ?x612)))
 (let (($x333 (and $x210 (or (not (= (* ?x148 ?x205) 0)) (not (= (* ?x411 ?x205) 0))))))
 (rewrite (= $x333 $x195)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x380 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x199 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x153 (* (- 2) v)))
 (let ((?x123 (* (- 2) u00)))
 (let ((?x107 (* (- 4) r00)))
 (let ((?x202 (* 6 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x337 (+ 4 ?x28 ?x202 ?x107 ?x123 ?x153 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x199)))
 (let ((?x75 (+ r u)))
 (let ((?x92 (* ?x75 v v)))
 (let ((?x327 (* (- 2) u)))
 (let ((?x185 (+ (- 4) ?x327 (* (- 1) (* ?x75 ?x75 ?x75 v v v)) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75) ?x92)))
 (let ((?x43 (* u u)))
 (let ((?x177 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x607 (+ (- 4) ?x28 (* (- 6) v) ?x107 ?x123 ?x36 ?x41 ?x177 (* (+ 2 v) (+ 2 v)) ?x46 ?x199)))
 (let ((?x104 (* (- 1) v)))
 (let ((?x105 (+ r ?x104)))
 (let ((?x217 (+ 2 v)))
 (let ((?x203 (* (- 1) (* ?x217 ?x217 ?x217 ?x105 ?x105 ?x105))))
 (let (($x356 (= (* (+ ?x327 ?x203 (* ?x105 u u u) (* ?x217 ?x217 ?x105)) ?x607) 0)))
 (and (= (+ ?x28 ?x107 ?x123 ?x36 ?x153 ?x41 ?x177 ?x45 ?x46 ?x199) 0) (or (not $x356) (not (= (* ?x185 ?x337) 0)))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x108 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x199 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x177 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x123 (* (- 2) u00)))
 (let ((?x107 (* (- 4) r00)))
 (let ((?x153 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x205 (+ ?x28 ?x36 ?x153 ?x107 ?x123 ?x41 ?x177 ?x45 ?x46 ?x199)))
 (let ((?x398 (* (- 1) (* v v v))))
 (let ((?x381 (* r u u u)))
 (let ((?x373 (* (- 1) (* u u u v))))
 (let ((?x351 (* r v v)))
 (let ((?x404 (* 4 (* r v))))
 (let ((?x104 (* (- 1) v)))
 (let ((?x105 (+ r ?x104)))
 (let ((?x217 (+ 2 v)))
 (let ((?x203 (* (- 1) (* ?x217 ?x217 ?x217 ?x105 ?x105 ?x105))))
 (let ((?x136 (* (- 4) v)))
 (let ((?x327 (* (- 2) u)))
 (let ((?x411 (+ ?x28 ?x327 ?x136 (* (- 2) ?x45) ?x203 ?x404 ?x351 ?x373 ?x381 ?x398 (* 2 (* v ?x104)))))
 (let ((?x612 (* u v v)))
 (let ((?x604 (* 6 (* u u u))))
 (let ((?x603 (* 6 (* r u u))))
 (let ((?x553 (* u u u u)))
 (let ((?x514 (* (- 1) (* u u u v v v))))
 (let ((?x522 (* (- 3) (* r u u v v v))))
 (let ((?x519 (* (- 3) (* r r u v v v))))
 (let ((?x511 (* (- 1) (* r r r v v v))))
 (let ((?x202 (* 6 u)))
 (let ((?x560 (* 8 r)))
 (let ((?x148 (+ (- 4) ?x560 ?x202 (* 8 ?x43) (* 2 (* u 2 r)) ?x351 (* 2 (* u 2 u)) ?x381 ?x511 ?x519 ?x522 ?x514 ?x553 (* 8 (* r u)) ?x603 ?x604 ?x612)))
 (let (($x210 (= ?x205 0)))
 (let (($x333 (and $x210 (or (not (= (* ?x148 ?x205) 0)) (not (= (* ?x411 ?x205) 0))))))
 (let ((?x337 (+ 4 ?x28 ?x202 ?x107 ?x123 ?x153 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x199)))
 (let ((?x75 (+ r u)))
 (let ((?x92 (* ?x75 v v)))
 (let ((?x185 (+ (- 4) ?x327 (* (- 1) (* ?x75 ?x75 ?x75 v v v)) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75) ?x92)))
 (let ((?x607 (+ (- 4) ?x28 (* (- 6) v) ?x107 ?x123 ?x36 ?x41 ?x177 (* ?x217 ?x217) ?x46 ?x199)))
 (let (($x356 (= (* (+ ?x327 ?x203 (* ?x105 u u u) (* ?x217 ?x217 ?x105)) ?x607) 0)))
 (let (($x493 (and (= (+ ?x28 ?x107 ?x123 ?x36 ?x153 ?x41 ?x177 ?x45 ?x46 ?x199) 0) (or (not $x356) (not (= (* ?x185 ?x337) 0))))))
 (rewrite (= $x493 $x333))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x99 (exists ((r Int) (u Int) (v Int) )(! (let ((?x75 (+ r u)))
 (let ((?x92 (* ?x75 v v)))
 (let ((?x93 (+ (- (* (- 2) (+ u 2)) (* ?x75 ?x75 ?x75 v v v)) (* ?x75 (+ u 2) (+ u 2) (+ u 2)) ?x92)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x86 (+ (- (+ (- ?x81 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* (- 2) u) (* ?x52 ?x52 ?x52 ?x57 ?x57 ?x57)) (* ?x52 u u u) (* ?x52 ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= (* (- ?x86 ?x48) ?x93) 0)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x365 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x199 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x153 (* (- 2) v)))
 (let ((?x123 (* (- 2) u00)))
 (let ((?x107 (* (- 4) r00)))
 (let ((?x202 (* 6 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x337 (+ 4 ?x28 ?x202 ?x107 ?x123 ?x153 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x199)))
 (let ((?x75 (+ r u)))
 (let ((?x92 (* ?x75 v v)))
 (let ((?x327 (* (- 2) u)))
 (let ((?x185 (+ (- 4) ?x327 (* (- 1) (* ?x75 ?x75 ?x75 v v v)) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75) ?x92)))
 (let ((?x43 (* u u)))
 (let ((?x177 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x607 (+ (- 4) ?x28 (* (- 6) v) ?x107 ?x123 ?x36 ?x41 ?x177 (* (+ 2 v) (+ 2 v)) ?x46 ?x199)))
 (let ((?x104 (* (- 1) v)))
 (let ((?x105 (+ r ?x104)))
 (let ((?x217 (+ 2 v)))
 (let ((?x203 (* (- 1) (* ?x217 ?x217 ?x217 ?x105 ?x105 ?x105))))
 (let (($x356 (= (* (+ ?x327 ?x203 (* ?x105 u u u) (* ?x217 ?x217 ?x105)) ?x607) 0)))
 (let (($x493 (and (= (+ ?x28 ?x107 ?x123 ?x36 ?x153 ?x41 ?x177 ?x45 ?x46 ?x199) 0) (or (not $x356) (not (= (* ?x185 ?x337) 0))))))
 (let ((?x93 (+ (- (* (- 2) (+ u 2)) (* ?x75 ?x75 ?x75 v v v)) (* ?x75 (+ u 2) (+ u 2) (+ u 2)) ?x92)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x86 (+ (- (+ (- ?x81 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* (- 2) u) (* ?x52 ?x52 ?x52 ?x57 ?x57 ?x57)) (* ?x52 u u u) (* ?x52 ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x98 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= (* (- ?x86 ?x48) ?x93) 0))))))
 (rewrite (= $x98 $x493)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x597 (mp (mp @x100 (quant-intro (proof-bind ?x365) (= $x99 $x380)) $x380) (rewrite (= $x380 $x380)) $x380)))
 (let ((@x438 (mp (mp @x597 (quant-intro (proof-bind ?x108) (= $x380 $x483)) $x483) (quant-intro (proof-bind ?x164) (= $x483 $x294)) $x294)))
 (let ((@x297 (mp (mp~ @x438 (sk (~ $x294 $x513)) $x513) (rewrite (= $x513 $x342)) $x342)))
 (let ((@x289 (and-elim @x297 $x485)))
 (let ((@x194 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x431)) @x289 $x431)))
 (let (($x437 (<= ?x320 0)))
 (let ((@x165 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x437)) @x289 $x437)))
 (let (($x363 (not (<= ?x302 0))))
 (let (($x173 (>= ?x302 0)))
 (let (($x460 (>= ?x473 0)))
 (let (($x467 (<= ?x473 0)))
 (let ((@x520 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x275 (not $x467) (not $x460))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x467)) @x165 @x194 false) $x467) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x460)) @x165 @x194 false) $x460) $x275)))
 (let ((@x335 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x133 $x363 (not $x173))) (unit-resolution (and-elim @x297 $x176) @x520 $x161) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x173)) @x165 @x194 false) $x173) $x363)))
 ((_ th-lemma arith farkas 1 1 1) @x335 @x165 @x194 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        36
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             240
 :arith-nonlinear-bounds    19
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 42
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.62
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1089732
 :num-checks                1
 :propagations              14
 :rlimit-count              4015
 :time                      0.01
 :total-time                0.01)
