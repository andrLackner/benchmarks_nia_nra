unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x350 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x74 (>= ?x350 0)))
 (let (($x56 (= ?x350 0)))
 (let ((?x263 (* 2 (* x!1 x!1 x!1))))
 (let ((?x458 (* x!1 x!1 x!1 y!0 y!0)))
 (let ((?x435 (* (- 3) (* x!1 x!1 y!0 y!0))))
 (let ((?x291 (* (- 1) (* x!1 y!0 y!0 y!0))))
 (let ((?x440 (* y!0 y!0 y!0)))
 (let ((?x451 (* 2 (* y!0 y!0))))
 (let ((?x183 (* 3 (* x!1 x!1 x!1 y!0))))
 (let ((?x231 (+ (- 1) (* (- 9) (* x!1 x!1 y!0)) (* 5 x!1) ?x183 ?x451 (* 6 (* x!1 y!0)) ?x440 ?x291 ?x435 ?x458 (* (- 6) (* x!1 x!1)) ?x263)))
 (let ((?x125 (* ?x231 (+ (* (- 1) y00) (* (- 1) x00) x!1 y!0))))
 (let (($x58 (= ?x125 0)))
 (let (($x235 (not $x58)))
 (let (($x61 (and $x56 $x235)))
 (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x309 (+ x!1 y!0 ?x52 ?x59)))
 (let ((?x265 (+ (- 1) (* 3 x!1) (* (- 1) (* x!1 (- 1) 1 1)) (* (- 1) (* x!1 x!1 1 1)) (* (- 1) (* x!1 (- 1) y!0 1)) (* (- 1) (* x!1 x!1 y!0 1)) (* (- 1) (* x!1 (- 1) 1 y!0)) (* (- 1) (* x!1 x!1 1 y!0)) ?x451 (* (- 1) (* x!1 (- 1) y!0 y!0)) (* (- 1) (* x!1 y!0 y!0)) ?x435 ?x458 (* (- 4) (* x!1 x!1)) ?x263 (* 3 (* x!1 y!0)) (* (- 7) (* x!1 x!1 y!0)) ?x183 (* (- 1) (* x!1 (- 1) 1)) (* (- 1) (* x!1 x!1 1)) (* (- 1) (* x!1 (- 1) y!0)) ?x440 ?x291)))
 (let (($x294 (and (= ?x309 0) (not (= (* ?x265 ?x309) 0)))))
 (let (($x401 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x456 (+ (- 1) (* 3 x) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) (* 2 (* y y)) (* (- 1) (* x (- 1) y y)) (* (- 1) (* x y y)) (* (- 3) (* x x y y)) (* x x x y y) (* (- 4) (* x x)) (* 2 (* x x x)) (* 3 (* x y)) (* (- 7) (* x x y)) (* 3 (* x x x y)) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) (* y y y) (* (- 1) (* x y y y)))))
 (let (($x78 (= ?x73 0)))
 (and $x78 (not (= (* ?x456 ?x73) 0)))))))) :qid k!26))
 ))
 (let (($x196 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x129 (+ x ?x52 ?x59 y)))
 (let ((?x226 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x218 (+ 1 y)))
 (let ((?x126 (+ (- 1) x)))
 (let ((?x234 (* (+ (* ?x126 ?x126 ?x126 ?x218 ?x218) (* ?x126 ?x126 ?x126 ?x218) ?x226) ?x129)))
 (and (= ?x129 0) (not (= ?x234 0)))))))))) :qid k!26))
 ))
 (let ((?x393 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x456 (+ (- 1) (* 3 x) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) (* 2 (* y y)) (* (- 1) (* x (- 1) y y)) (* (- 1) (* x y y)) (* (- 3) (* x x y y)) (* x x x y y) (* (- 4) (* x x)) (* 2 (* x x x)) (* 3 (* x y)) (* (- 7) (* x x y)) (* 3 (* x x x y)) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) (* y y y) (* (- 1) (* x y y y)))))
 (let (($x78 (= ?x73 0)))
 (let (($x216 (and $x78 (not (= (* ?x456 ?x73) 0)))))
 (let ((?x129 (+ x ?x52 ?x59 y)))
 (let ((?x226 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x218 (+ 1 y)))
 (let ((?x126 (+ (- 1) x)))
 (let ((?x234 (* (+ (* ?x126 ?x126 ?x126 ?x218 ?x218) (* ?x126 ?x126 ?x126 ?x218) ?x226) ?x129)))
 (let (($x206 (and (= ?x129 0) (not (= ?x234 0)))))
 (rewrite (= $x206 $x216)))))))))))))))
 ))
 (let (($x49 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (+ (* ?x34 ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38)) (* ?x34 ?x38 ?x38 ?x38))))
 (let (($x47 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x47))))) :qid k!26))
 ))
 (let ((?x198 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x129 (+ x ?x52 ?x59 y)))
 (let ((?x226 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x218 (+ 1 y)))
 (let ((?x126 (+ (- 1) x)))
 (let ((?x234 (* (+ (* ?x126 ?x126 ?x126 ?x218 ?x218) (* ?x126 ?x126 ?x126 ?x218) ?x226) ?x129)))
 (let (($x206 (and (= ?x129 0) (not (= ?x234 0)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (+ (* ?x34 ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38)) (* ?x34 ?x38 ?x38 ?x38))))
 (let (($x47 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)))))
 (let (($x48 (and (= (+ (- (- x y00) x00) y) 0) $x47)))
 (rewrite (= $x48 $x206))))))))))))))))
 ))
 (let ((@x50 (asserted $x49)))
 (let ((@x211 (mp (mp @x50 (quant-intro (proof-bind ?x198) (= $x49 $x196)) $x196) (rewrite (= $x196 $x196)) $x196)))
 (let ((@x270 (mp~ (mp @x211 (quant-intro (proof-bind ?x393) (= $x196 $x401)) $x401) (sk (~ $x401 $x294)) $x294)))
 (let ((@x255 (mp @x270 (rewrite (= $x294 $x61)) $x61)))
 (let ((@x63 (and-elim @x255 $x56)))
 (let ((@x68 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x56) $x74)) @x63 $x74)))
 (let (($x75 (<= ?x350 0)))
 (let ((@x355 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x56) $x75)) @x63 $x75)))
 (let (($x87 (not (>= ?x125 0))))
 (let (($x174 (<= ?x125 0)))
 (let ((@x389 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x58 (not $x174) $x87)) (and-elim @x255 $x235) (or (not $x174) $x87))))
 (let ((@x390 (unit-resolution @x389 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x174)) @x355 @x68 false) $x174) $x87)))
 ((_ th-lemma arith farkas 1 1 1) @x390 @x355 @x68 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             58
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 26
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                19.52
 :memory                    19.19
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                416787
 :num-checks                1
 :propagations              4
 :rlimit-count              1593
 :time                      0.01
 :total-time                0.02)
