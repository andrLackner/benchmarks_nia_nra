unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x333 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x185 (>= ?x333 (- 6))))
 (let (($x94 (= ?x333 (- 6))))
 (let ((?x513 (+ k!2 c!3)))
 (let ((?x572 (+ m!1 k!2)))
 (let ((?x113 (+ 6 m!1)))
 (let ((?x114 (+ 1 n!0)))
 (let ((?x248 (* n!0 n!0)))
 (let ((?x279 (* 216 ?x248)))
 (let ((?x317 (* 108 m!1)))
 (let ((?x364 (* 432 n!0)))
 (let ((?x193 (* m!1 m!1 m!1)))
 (let ((?x174 (* 18 (* m!1 m!1))))
 (let ((?x210 (+ 216 ?x174 ?x193 ?x364 (* 108 (* n!0 n!0 m!1)) ?x317 ?x279 (* n!0 n!0 m!1 m!1 m!1) (* 18 (* n!0 n!0 m!1 m!1)) (* 216 (* n!0 m!1)) (* 36 (* n!0 m!1 m!1)) (* 2 (* n!0 m!1 m!1 m!1)) (* ?x114 ?x114 ?x114 ?x113 ?x572 ?x572 ?x572 ?x513 ?x513) (* (- 1) (* ?x114 ?x113 ?x113 ?x572 ?x572 ?x513)))))
 (let ((?x216 (* (+ (- 6) (* (- 6) n!0) m!1) ?x210)))
 (let (($x580 (= ?x216 0)))
 (let (($x218 (not $x580)))
 (let (($x120 (= (+ (* 2 n!0) (* n!0 k!2) (* (- 1) k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x647 (* 18 c!3)))
 (let ((?x555 (* 5 k!2)))
 (let ((?x622 (* (- 1) (* k!2 k!2))))
 (let ((?x558 (* (- 9) n!0)))
 (let (($x222 (and $x94 (= (+ (* 9 (* n!0 c!3)) ?x558 ?x622 ?x555 ?x647) 4) $x120 (= (+ (* 3 n!0) (* 3 ?x248) (* (- 1) k!2)) (- 1)) $x218)))
 (let ((?x629 (* (- 1) (* ?x114 ?x113 ?x113 (+ k!2 m!1) (+ k!2 m!1) (+ c!3 k!2)))))
 (let ((?x586 (+ c!3 k!2)))
 (let ((?x167 (+ k!2 m!1)))
 (let ((?x561 (+ 216 ?x317 ?x364 (* ?x114 ?x114 ?x114 ?x113 ?x167 ?x167 ?x167 ?x586 ?x586) ?x629 ?x279 (* 108 (* m!1 n!0 n!0)) (* 18 (* m!1 m!1 n!0 n!0)) (* m!1 m!1 m!1 n!0 n!0) ?x174 ?x193 (* 216 (* m!1 n!0)) (* 36 (* m!1 m!1 n!0)) (* 2 (* m!1 m!1 m!1 n!0)))))
 (let (($x233 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x563 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x647 ?x555 ?x558 ?x622 (* 9 (* c!3 n!0))) 4) $x233 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x248)) 1) (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x561) 0)))))
 (let (($x261 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x641 (* 2 (* m m m n))))
 (let ((?x593 (* m m n)))
 (let ((?x548 (* 36 ?x593)))
 (let ((?x589 (* m n)))
 (let ((?x611 (* 216 ?x589)))
 (let ((?x583 (* m m m)))
 (let ((?x575 (* m m)))
 (let ((?x613 (* 18 ?x575)))
 (let ((?x562 (* m m m n n)))
 (let ((?x643 (* 18 (* m m n n))))
 (let ((?x556 (* m n n)))
 (let ((?x612 (* 108 ?x556)))
 (let ((?x272 (* n n)))
 (let ((?x616 (* 216 ?x272)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x636 (* 432 n)))
 (let ((?x499 (+ 216 (* 108 m) ?x636 ?x155 ?x271 ?x616 ?x612 ?x643 ?x562 ?x613 ?x583 ?x611 ?x548 ?x641)))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x272)) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x211 (= (+ ?x40 ?x44 ?x213 ?x214 (* 9 (* c n))) 4)))
 (let (($x127 (= (+ m ?x110) 6)))
 (and $x127 $x211 $x263 $x301 (not (= (* ?x116 ?x499) 0)))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x520 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x641 (* 2 (* m m m n))))
 (let ((?x593 (* m m n)))
 (let ((?x548 (* 36 ?x593)))
 (let ((?x589 (* m n)))
 (let ((?x611 (* 216 ?x589)))
 (let ((?x583 (* m m m)))
 (let ((?x575 (* m m)))
 (let ((?x613 (* 18 ?x575)))
 (let ((?x562 (* m m m n n)))
 (let ((?x643 (* 18 (* m m n n))))
 (let ((?x556 (* m n n)))
 (let ((?x612 (* 108 ?x556)))
 (let ((?x272 (* n n)))
 (let ((?x616 (* 216 ?x272)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x636 (* 432 n)))
 (let ((?x632 (* 72 m)))
 (let ((?x565 (+ 216 ?x632 ?x636 (* 6 (* m 6)) ?x155 ?x271 ?x616 ?x612 ?x643 ?x562 ?x613 ?x583 ?x611 ?x548 ?x641)))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x272)) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x211 (= (+ ?x40 ?x44 ?x213 ?x214 (* 9 (* c n))) 4)))
 (let (($x127 (= (+ m ?x110) 6)))
 (and $x127 $x211 $x263 $x301 (not (= (* ?x116 ?x565) 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x253 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x641 (* 2 (* m m m n))))
 (let ((?x593 (* m m n)))
 (let ((?x548 (* 36 ?x593)))
 (let ((?x589 (* m n)))
 (let ((?x611 (* 216 ?x589)))
 (let ((?x583 (* m m m)))
 (let ((?x575 (* m m)))
 (let ((?x613 (* 18 ?x575)))
 (let ((?x562 (* m m m n n)))
 (let ((?x643 (* 18 (* m m n n))))
 (let ((?x556 (* m n n)))
 (let ((?x612 (* 108 ?x556)))
 (let ((?x272 (* n n)))
 (let ((?x616 (* 216 ?x272)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x636 (* 432 n)))
 (let ((?x499 (+ 216 (* 108 m) ?x636 ?x155 ?x271 ?x616 ?x612 ?x643 ?x562 ?x613 ?x583 ?x611 ?x548 ?x641)))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x272)) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x211 (= (+ ?x40 ?x44 ?x213 ?x214 (* 9 (* c n))) 4)))
 (let (($x127 (= (+ m ?x110) 6)))
 (let (($x245 (and $x127 $x211 $x263 $x301 (not (= (* ?x116 ?x499) 0)))))
 (let ((?x632 (* 72 m)))
 (let ((?x565 (+ 216 ?x632 ?x636 (* 6 (* m 6)) ?x155 ?x271 ?x616 ?x612 ?x643 ?x562 ?x613 ?x583 ?x611 ?x548 ?x641)))
 (let (($x577 (and $x127 $x211 $x263 $x301 (not (= (* ?x116 ?x565) 0)))))
 (rewrite (= $x577 $x245))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x236 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x498 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x127 (= (+ m ?x110) 6)))
 (and $x127 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x213 ?x214) 4) $x239 $x498 $x154)))))))))))))))))) :qid k!34))
 ))
 (let ((?x522 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x641 (* 2 (* m m m n))))
 (let ((?x593 (* m m n)))
 (let ((?x548 (* 36 ?x593)))
 (let ((?x589 (* m n)))
 (let ((?x611 (* 216 ?x589)))
 (let ((?x583 (* m m m)))
 (let ((?x575 (* m m)))
 (let ((?x613 (* 18 ?x575)))
 (let ((?x562 (* m m m n n)))
 (let ((?x643 (* 18 (* m m n n))))
 (let ((?x556 (* m n n)))
 (let ((?x612 (* 108 ?x556)))
 (let ((?x272 (* n n)))
 (let ((?x616 (* 216 ?x272)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x636 (* 432 n)))
 (let ((?x632 (* 72 m)))
 (let ((?x565 (+ 216 ?x632 ?x636 (* 6 (* m 6)) ?x155 ?x271 ?x616 ?x612 ?x643 ?x562 ?x613 ?x583 ?x611 ?x548 ?x641)))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x272)) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x211 (= (+ ?x40 ?x44 ?x213 ?x214 (* 9 (* c n))) 4)))
 (let (($x127 (= (+ m ?x110) 6)))
 (let (($x577 (and $x127 $x211 $x263 $x301 (not (= (* ?x116 ?x565) 0)))))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x498 (= (+ (* 3 ?x272) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x228 (and $x127 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x213 ?x214) 4) $x239 $x498 $x154)))
 (rewrite (= $x228 $x577))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x159 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x498 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x286 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x549 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x127 (= (+ m ?x110) 6)))
 (and $x127 (= ?x549 (- 4)) $x286 $x498 $x154)))))))))))))))) :qid k!34))
 ))
 (let ((?x243 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x498 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x214 (* (- 1) ?x49)))
 (let ((?x213 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x127 (= (+ m ?x110) 6)))
 (let (($x228 (and $x127 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x213 ?x214) 4) $x239 $x498 $x154)))
 (let (($x286 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x549 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x290 (and $x127 (= ?x549 (- 4)) $x286 $x498 $x154)))
 (rewrite (= $x290 $x228)))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x79 (+ (* (- 1) ?x73 ?x74 ?x74 ?x75 ?x75 ?x69) (* ?x75 ?x75 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x74 ?x75 ?x69 ?x69 ?x69))))
 (let (($x81 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x79) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x81)))))))))))))))) :qid k!34))
 ))
 (let ((?x278 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x498 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x286 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x549 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x127 (= (+ m ?x110) 6)))
 (let (($x290 (and $x127 (= ?x549 (- 4)) $x286 $x498 $x154)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x79 (+ (* (- 1) ?x73 ?x74 ?x74 ?x75 ?x75 ?x69) (* ?x75 ?x75 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x74 ?x75 ?x69 ?x69 ?x69))))
 (let (($x81 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x79) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x81)))))
 (rewrite (= $x84 $x290)))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x235 (mp (mp @x86 (quant-intro (proof-bind ?x278) (= $x85 $x159)) $x159) (rewrite (= $x159 $x159)) $x159)))
 (let ((@x581 (mp (mp @x235 (quant-intro (proof-bind ?x243) (= $x159 $x236)) $x236) (quant-intro (proof-bind ?x522) (= $x236 $x520)) $x520)))
 (let ((@x538 (mp~ (mp @x581 (quant-intro (proof-bind ?x253) (= $x520 $x261)) $x261) (sk (~ $x261 $x563)) $x563)))
 (let ((@x184 (mp @x538 (rewrite (= $x563 $x222)) $x222)))
 (let ((@x541 (and-elim @x184 $x94)))
 (let ((@x148 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x185)) @x541 $x185)))
 (let (($x98 (<= ?x333 (- 6))))
 (let ((@x176 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x98)) @x541 $x98)))
 (let (($x179 (not (<= ?x216 0))))
 (let (($x107 (>= ?x216 0)))
 (let ((@x269 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x580 $x179 (not $x107))) (and-elim @x184 $x218) (or $x179 (not $x107)))))
 (let ((@x145 (unit-resolution @x269 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x107)) @x176 @x148 false) $x107) $x179)))
 ((_ th-lemma arith farkas 1 1 1) @x145 @x176 @x148 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             144
 :arith-nonlinear-bounds    9
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      10
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.64
 :memory                    3.16
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1147958
 :num-checks                1
 :propagations              11
 :rlimit-count              3400
 :time                      0.01
 :total-time                0.02)
