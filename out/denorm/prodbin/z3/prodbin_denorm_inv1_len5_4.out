unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(proof
(let ((?x1193 (to_real z!0)))
 (let ((?x1173 (to_real y!1)))
 (let ((?x1146 (to_real x!2)))
 (let ((?x1467 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1193 ?x1193)))
 (let ((?x1339 (* ?x1146 ?x1146 ?x1146)))
 (let ((?x1035 (* ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)))
 (let ((?x931 (* (- (/ 1.0 2.0)) ?x1035)))
 (let ((?x662 (+ (* (/ 1.0 2.0) ?x1146) (* (/ 1.0 2.0) ?x1193) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1173)) (* (- 1.0) (* ?x1146 ?x1173 ?x1193 ?x1193 ?x1193)) (* (- 8.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1146)) (* (- (/ 3.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193 ?x1193)) (* (- 3.0) (* ?x1146 ?x1146 ?x1146 ?x1173)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)) (* (/ 9.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146)) (* (- 8.0) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193)) (* (- 1.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173)) (* (- 3.0) (* ?x1146 ?x1146 ?x1173 ?x1193 ?x1193)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193)) (* (- (/ 3.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1173)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1193 ?x1193)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146)) (* (/ 1.0 2.0) (* ?x1146 ?x1193 ?x1193 ?x1193)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173)) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1193)) (* (- 24.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1193)) ?x931 (* (- 24.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193 ?x1193)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1193)) (* (- (/ 3.0 2.0)) (* ?x1146 ?x1146 ?x1173 ?x1193 ?x1193 ?x1193)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173)) (* (/ 9.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1193)) (* (- (/ 1.0 2.0)) (* ?x1173 ?x1193)) (* (- (/ 9.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1193)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193)) (* (- 3.0) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1193)) (* (/ 1.0 2.0) (* ?x1146 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)) (* 3.0 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173)) ?x1339 (* (- (/ 3.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193)) (* (- 1.0) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173)) (* (- (/ 9.0 2.0)) ?x1467))))
 (let (($x962 (<= ?x662 0.0)))
 (let (($x1285 (not $x962)))
 (let ((?x135 (* (/ 9.0 2.0) ?x1467)))
 (let ((?x1361 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173)))
 (let ((?x1350 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193)))
 (let ((?x320 (* (/ 3.0 2.0) ?x1350)))
 (let ((?x1256 (* (- 1.0) ?x1339)))
 (let ((?x1337 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173)))
 (let ((?x1258 (* (- 3.0) ?x1337)))
 (let ((?x1327 (* ?x1146 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)))
 (let ((?x1204 (* (- (/ 1.0 2.0)) ?x1327)))
 (let ((?x1281 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1193)))
 (let ((?x845 (* 3.0 ?x1281)))
 (let ((?x1266 (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193)))
 (let ((?x1302 (* (- (/ 3.0 2.0)) ?x1266)))
 (let ((?x1202 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1193)))
 (let ((?x224 (* (/ 9.0 2.0) ?x1202)))
 (let ((?x1201 (* ?x1173 ?x1193)))
 (let ((?x1192 (* (/ 1.0 2.0) ?x1201)))
 (let ((?x1176 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1193)))
 (let ((?x611 (* (- (/ 9.0 2.0)) ?x1176)))
 (let ((?x1134 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173)))
 (let ((?x1005 (* (- (/ 1.0 2.0)) ?x1134)))
 (let ((?x1123 (* ?x1146 ?x1146 ?x1173 ?x1193 ?x1193 ?x1193)))
 (let ((?x984 (* (/ 3.0 2.0) ?x1123)))
 (let ((?x1062 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1193)))
 (let ((?x187 (* (- (/ 3.0 2.0)) ?x1062)))
 (let ((?x1041 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193 ?x1193)))
 (let ((?x1043 (* 24.0 ?x1041)))
 (let ((?x993 (* (/ 1.0 2.0) ?x1035)))
 (let ((?x988 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1193)))
 (let ((?x1341 (* 24.0 ?x988)))
 (let ((?x986 (* ?x1146 ?x1146 ?x1146 ?x1193)))
 (let ((?x783 (* (- (/ 3.0 2.0)) ?x986)))
 (let ((?x914 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173)))
 (let ((?x637 (* (/ 1.0 2.0) ?x914)))
 (let ((?x890 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173)))
 (let ((?x918 (* (- (/ 3.0 2.0)) ?x890)))
 (let ((?x883 (* ?x1146 ?x1193 ?x1193 ?x1193)))
 (let ((?x861 (* (- (/ 1.0 2.0)) ?x883)))
 (let ((?x864 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146)))
 (let ((?x889 (* (- (/ 1.0 2.0)) ?x864)))
 (let ((?x859 (* ?x1146 ?x1146 ?x1193 ?x1193)))
 (let ((?x860 (* (- (/ 3.0 2.0)) ?x859)))
 (let ((?x853 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1173)))
 (let ((?x632 (* (/ 3.0 2.0) ?x853)))
 (let ((?x850 (* ?x1146 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193)))
 (let ((?x669 (* (- (/ 3.0 2.0)) ?x850)))
 (let ((?x844 (* ?x1146 ?x1146 ?x1173 ?x1193 ?x1193)))
 (let ((?x1113 (* 3.0 ?x844)))
 (let ((?x789 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173)))
 (let ((?x737 (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193)))
 (let ((?x701 (* 8.0 ?x737)))
 (let ((?x707 (* ?x1146 ?x1146 ?x1146 ?x1146)))
 (let ((?x702 (* (- (/ 1.0 2.0)) ?x707)))
 (let ((?x677 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193)))
 (let ((?x675 (* (- (/ 3.0 2.0)) ?x677)))
 (let ((?x667 (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193)))
 (let ((?x671 (* (- (/ 1.0 2.0)) ?x667)))
 (let ((?x579 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193)))
 (let ((?x1165 (* (- (/ 9.0 2.0)) ?x579)))
 (let ((?x575 (* ?x1146 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)))
 (let ((?x987 (* (- (/ 3.0 2.0)) ?x575)))
 (let ((?x485 (* ?x1146 ?x1146 ?x1146 ?x1173)))
 (let ((?x1338 (* 3.0 ?x485)))
 (let ((?x214 (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193 ?x1193)))
 (let ((?x1028 (* (/ 3.0 2.0) ?x214)))
 (let ((?x191 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1146 ?x1146)))
 (let ((?x193 (* 8.0 ?x191)))
 (let ((?x1506 (* ?x1146 ?x1173 ?x1193 ?x1193 ?x1193)))
 (let ((?x1172 (* ?x1146 ?x1173)))
 (let ((?x888 (* (/ 1.0 2.0) ?x1172)))
 (let ((?x713 (* (- (/ 1.0 2.0)) ?x1193)))
 (let ((?x781 (* (- (/ 1.0 2.0)) ?x1146)))
 (let ((?x963 (+ ?x781 ?x713 ?x888 ?x1506 ?x193 ?x1028 ?x1338 ?x987 ?x1165 ?x671 ?x675 ?x702 ?x701 ?x789 ?x1113 ?x669 ?x632 ?x860 ?x889 ?x861 ?x918 ?x637 ?x783 ?x1341 ?x993 ?x1043 ?x187 ?x984 ?x1005 ?x611 ?x1192 ?x224 ?x1302 ?x845 ?x1204 ?x1258 ?x1256 ?x320 ?x1361 ?x135)))
 (let (($x1086 (>= ?x963 0.0)))
 (let (($x974 (not $x1086)))
 (let (($x645 (<= ?x963 0.0)))
 (let (($x1291 (>= ?x662 0.0)))
 (let (($x945 (not $x1291)))
 (let ((@x540 (hypothesis $x945)))
 (let ((?x48 (to_real z00)))
 (let ((?x151 (* (- 1.0) ?x1172)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x1280 (+ ?x116 (* (- 1.0) ?x1193) ?x151 ?x48)))
 (let (($x965 (>= ?x1280 0.0)))
 (let ((?x1032 (+ ?x151 (to_real (* x!2 y!1)))))
 (let (($x923 (>= ?x1032 0.0)))
 (let (($x1012 (= 0.0 ?x1032)))
 (let ((@x942 (symm (commutativity (= $x1012 (= ?x1032 0.0))) (= (= ?x1032 0.0) $x1012))))
 (let ((@x1279 (unit-resolution (hypothesis (not $x1012)) (mp ((_ th-lemma arith) (= ?x1032 0.0)) @x942 $x1012) false)))
 (let ((@x1282 (lemma @x1279 $x1012)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x638 (+ (to_real (* x00 y00)) ?x122)))
 (let (($x653 (<= ?x638 0.0)))
 (let (($x1010 (= 0.0 ?x638)))
 (let (($x1448 (= ?x638 0.0)))
 (let ((@x1020 (lemma (unit-resolution ((_ th-lemma arith) $x1448) (hypothesis (not $x1448)) false) $x1448)))
 (let ((@x991 (unit-resolution (hypothesis (not $x1010)) (symm (hypothesis $x1448) $x1010) false)))
 (let ((@x1092 (unit-resolution (lemma @x991 (or (not $x1448) $x1010)) @x1020 $x1010)))
 (let ((@x1080 ((_ th-lemma arith triangle-eq) (or (not $x1010) $x653))))
 (let ((?x89 (* x00 y00)))
 (let ((?x1479 (+ z00 ?x89 (* (- 1) z!0) (* (- 1) (* x!2 y!1)))))
 (let (($x1063 (>= ?x1479 0)))
 (let (($x995 (= 0 ?x1479)))
 (let ((@x661 (symm (commutativity (= $x995 (= ?x1479 0))) (= (= ?x1479 0) $x995))))
 (let (($x1480 (= ?x1479 0)))
 (let ((?x1442 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1173)))
 (let ((?x1053 (+ (* (/ 1.0 2.0) (* ?x1146 ?x1173 ?x1173 ?x1193)) (* (- (/ 1.0 2.0)) (* ?x48 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)) (* (- (/ 1.0 2.0)) (* ?x111 ?x115 ?x1173 ?x1193)) (* (- (/ 1.0 2.0)) (* ?x111 ?x115 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)) (* (- 8.0) (* ?x48 ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193)) (* (- 1.0) (* ?x48 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173)) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193) (* 8.0 (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1173 ?x1193 ?x1193 ?x1193)) (* (- 8.0) (* ?x111 ?x115 ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193)) (* (- 1.0) (* ?x111 ?x115 ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193 ?x1193)) ?x931 (* (- (/ 1.0 2.0)) (* ?x48 ?x1173 ?x1193)) (* (/ 1.0 2.0) (* ?x1173 ?x1193 ?x1193)) (* 8.0 (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1193)) ?x1442 (* (- (/ 1.0 2.0)) (* ?x1146 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193 ?x1193)) (* (/ 1.0 2.0) (* ?x48 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)) (* (/ 1.0 2.0) (* ?x111 ?x115 ?x1146 ?x1173 ?x1173 ?x1193 ?x1193 ?x1193)))))
 (let (($x1057 (= ?x1053 0.0)))
 (let ((?x922 (+ ?x193 ?x1028 ?x1338 ?x987 ?x1165 ?x671 ?x675 ?x702 ?x701 ?x789 ?x1113 ?x669 ?x632 ?x860 ?x889 ?x861 ?x918 ?x637 ?x783 ?x1341 ?x993 ?x1043 ?x187 ?x984 ?x1005 ?x781 ?x888 ?x611 ?x713 ?x1192 ?x224 ?x1302 ?x845 ?x1204 ?x1258 ?x1256 ?x320 ?x1361 ?x135 ?x1506)))
 (let ((?x652 (* (+ (* (- 1.0) ?x48) ?x122 ?x1172 ?x1193) ?x922)))
 (let (($x854 (= ?x652 0.0)))
 (let (($x1001 (not $x854)))
 (let (($x1164 (or $x1001 (not $x1057))))
 (let (($x1343 (and $x1480 $x1164)))
 (let ((?x1031 (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173 ?x1173))))
 (let ((?x1465 (+ ?x1031 (* (/ 1.0 2.0) (* ?x1146 ?x1193 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173)) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1193 ?x1193 ?x1193 ?x48 ?x1173 ?x1173)) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x1193 ?x1193 ?x1173)) (* (/ 1.0 2.0) (* ?x1193 ?x48 ?x1173)) (* (/ 1.0 2.0) (* ?x1193 ?x1173 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1193 ?x1173 ?x1173)) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173 ?x1173)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x48 ?x1173 ?x1173 ?x1173)) (* (/ 1.0 2.0) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173 ?x1173 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173 ?x1173 ?x1173)) (* (- 8.0) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1193)) (* 8.0 (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x48)) (* 8.0 (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x111 ?x115)) (* (- 8.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1173)) (* (- 1.0) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1173 ?x1173 ?x1173)) (* ?x1146 ?x1146 ?x1146 ?x48 ?x1173 ?x1173 ?x1173) (* ?x1146 ?x1146 ?x1146 ?x1173 ?x1173 ?x1173 ?x111 ?x115) (* (- 1.0) ?x1442))))
 (let ((?x475 (+ ?x781 ?x713 ?x702 ?x789 ?x1005 ?x783 (* 3.0 (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1173)) (* (- (/ 3.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1173 ?x1173)) ?x860 (* 3.0 (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1173)) (* (- (/ 3.0 2.0)) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1173 ?x1173)) ?x861 (* ?x1146 ?x1193 ?x1193 ?x1193 ?x1173) (* (- (/ 1.0 2.0)) (* ?x1146 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173)) (* (/ 1.0 2.0) (* ?x1193 ?x1173)) ?x888 ?x889 ?x632 ?x918 ?x637 ?x675 (* (/ 9.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193 ?x1173)) (* (- (/ 9.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193 ?x1173 ?x1173)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1146 ?x1193 ?x1173 ?x1173 ?x1173)) ?x1302 (* (/ 9.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1173)) (* (- (/ 9.0 2.0)) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1173 ?x1173)) (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1146 ?x1193 ?x1193 ?x1173 ?x1173 ?x1173)) ?x671 (* (/ 3.0 2.0) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1173)) (* (- (/ 3.0 2.0)) (* ?x1146 ?x1146 ?x1193 ?x1193 ?x1193 ?x1173 ?x1173)) ?x1031 ?x1043 ?x701 ?x1341 ?x193 ?x1256 ?x1338 ?x1258 ?x1361)))
 (let (($x1468 (or (not (= (* (+ ?x1193 (* (- 1.0) ?x48) ?x122 ?x1172) ?x475) 0.0)) (not (= ?x1465 0.0)))))
 (let (($x1463 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x89)) 0) $x1468)))
 (let (($x711 (exists ((x Int) (y Int) (z Int) )(! (let ((?x64 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x1528 (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real x00) (to_real y00)))))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x1523 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x64 ?x64 ?x64))))
 (let ((?x1156 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64))))
 (let ((?x1532 (+ ?x1156 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x64)) (* (/ 1.0 2.0) (* ?x46 (to_real z00) ?x64)) (* (/ 1.0 2.0) (* ?x46 ?x64 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64)) ?x1523 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00))) ?x1528 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x64)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x64 ?x64 ?x64)) (* ?x43 ?x43 ?x43 (to_real z00) ?x64 ?x64 ?x64) (* ?x43 ?x43 ?x43 ?x64 ?x64 ?x64 ?x111 ?x115) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x64 ?x64 ?x64 ?x64)))))
 (let (($x1538 (not (= ?x1532 0.0))))
 (let ((?x543 (* (/ 1.0 2.0) (* ?x46 ?x64))))
 (let ((?x1317 (+ (* (- (/ 1.0 2.0)) ?x43) (* (- (/ 1.0 2.0)) ?x46) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43)) (* ?x43 ?x43 ?x43 ?x43 ?x64) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46)) (* 3.0 (* ?x43 ?x43 ?x46 ?x46 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46)) (* ?x43 ?x46 ?x46 ?x46 ?x64) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) ?x543 (* (/ 1.0 2.0) (* ?x43 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64 ?x64)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46)) (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64)) (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64 ?x64)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64)) (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) ?x1156 (* 24.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* 24.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* (- 1.0) (* ?x43 ?x43 ?x43)) (* 3.0 (* ?x43 ?x43 ?x43 ?x64)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x64 ?x64)) (* ?x43 ?x43 ?x43 ?x64 ?x64 ?x64))))
 (let ((?x548 (* ?x43 ?x64)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let (($x117 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x117 (or (not (= (* (+ ?x46 ?x202 ?x122 ?x548) ?x1317) 0.0)) $x1538)))))))))))))))))))) :qid k!28))
 ))
 (let (($x605 (exists ((x Int) (y Int) (z Int) )(! (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x777 (* 8.0 (* (to_real z) (to_real z) (to_real z) ?x43 ?x43 ?x43))))
 (let ((?x46 (to_real z)))
 (let ((?x543 (* (/ 1.0 2.0) (* ?x46 ?x64))))
 (let ((?x616 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x43)) ?x543 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x43 ?x43)) ?x777 (* ?x64 ?x64 ?x64 ?x43 ?x43 ?x43))))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x523 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x735 (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) (+ ?x46 ?x43) (+ ?x46 ?x43)))))
 (let ((?x733 (+ ?x46 ?x43)))
 (let ((?x743 (+ (* (- 2.0) (* ?x43 ?x733 ?x733 ?x733 ?x523 ?x523)) (* ?x733 ?x523) (* 4.0 (* ?x43 ?x43 ?x733 ?x733 ?x733 ?x523 ?x523 ?x523)) ?x735 (* 8.0 (* ?x43 ?x43 ?x43 ?x523 ?x523 ?x523)))))
 (let (($x530 (= (* (+ ?x122 (* 2.0 (* ?x43 ?x523)) ?x46 ?x43 ?x202) ?x743) 0.0)))
 (let (($x794 (or (not $x530) (not (= (* (+ ?x122 (* ?x64 ?x43) ?x46 ?x202) ?x616) 0.0)))))
 (let (($x689 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x689 $x794))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1210 (lambda ((x Int) (y Int) (z Int) )(let ((?x64 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x1528 (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real x00) (to_real y00)))))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x1523 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x64 ?x64 ?x64))))
 (let ((?x1156 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64))))
 (let ((?x1532 (+ ?x1156 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x64)) (* (/ 1.0 2.0) (* ?x46 (to_real z00) ?x64)) (* (/ 1.0 2.0) (* ?x46 ?x64 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64)) ?x1523 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x111 ?x115)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00))) ?x1528 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x64)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x64 ?x64 ?x64)) (* ?x43 ?x43 ?x43 (to_real z00) ?x64 ?x64 ?x64) (* ?x43 ?x43 ?x43 ?x64 ?x64 ?x64 ?x111 ?x115) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x64 ?x64 ?x64 ?x64)))))
 (let (($x1538 (not (= ?x1532 0.0))))
 (let ((?x543 (* (/ 1.0 2.0) (* ?x46 ?x64))))
 (let ((?x1317 (+ (* (- (/ 1.0 2.0)) ?x43) (* (- (/ 1.0 2.0)) ?x46) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43)) (* ?x43 ?x43 ?x43 ?x43 ?x64) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46)) (* 3.0 (* ?x43 ?x43 ?x46 ?x46 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46)) (* ?x43 ?x46 ?x46 ?x46 ?x64) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) ?x543 (* (/ 1.0 2.0) (* ?x43 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64 ?x64)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46)) (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64)) (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64 ?x64)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64 ?x64 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64)) (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) ?x1156 (* 24.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* 24.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* (- 1.0) (* ?x43 ?x43 ?x43)) (* 3.0 (* ?x43 ?x43 ?x43 ?x64)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x64 ?x64)) (* ?x43 ?x43 ?x43 ?x64 ?x64 ?x64))))
 (let ((?x548 (* ?x43 ?x64)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let (($x117 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x871 (and $x117 (or (not (= (* (+ ?x46 ?x202 ?x122 ?x548) ?x1317) 0.0)) $x1538))))
 (let ((?x616 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x43)) ?x543 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x43 ?x43)) (* 8.0 (* ?x46 ?x46 ?x46 ?x43 ?x43 ?x43)) (* ?x64 ?x64 ?x64 ?x43 ?x43 ?x43))))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x523 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x735 (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) (+ ?x46 ?x43) (+ ?x46 ?x43)))))
 (let ((?x733 (+ ?x46 ?x43)))
 (let ((?x743 (+ (* (- 2.0) (* ?x43 ?x733 ?x733 ?x733 ?x523 ?x523)) (* ?x733 ?x523) (* 4.0 (* ?x43 ?x43 ?x733 ?x733 ?x733 ?x523 ?x523 ?x523)) ?x735 (* 8.0 (* ?x43 ?x43 ?x43 ?x523 ?x523 ?x523)))))
 (let (($x530 (= (* (+ ?x122 (* 2.0 (* ?x43 ?x523)) ?x46 ?x43 ?x202) ?x743) 0.0)))
 (let (($x794 (or (not $x530) (not (= (* (+ ?x122 (* ?x64 ?x43) ?x46 ?x202) ?x616) 0.0)))))
 (let (($x689 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x300 (and $x689 $x794)))
 (rewrite (= $x300 $x871))))))))))))))))))))))))))))))))
 ))
 (let (($x608 (exists ((x Int) (y Int) (z Int) )(! (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x777 (* 8.0 (* (to_real z) (to_real z) (to_real z) ?x43 ?x43 ?x43))))
 (let ((?x46 (to_real z)))
 (let ((?x543 (* (/ 1.0 2.0) (* ?x46 ?x64))))
 (let ((?x616 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x43)) ?x543 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x43 ?x43)) ?x777 (* ?x64 ?x64 ?x64 ?x43 ?x43 ?x43))))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x523 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x735 (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) (+ ?x46 ?x43) (+ ?x46 ?x43)))))
 (let ((?x733 (+ ?x46 ?x43)))
 (let ((?x743 (+ (* (- 2.0) (* ?x43 ?x733 ?x733 ?x733 ?x523 ?x523)) (* ?x733 ?x523) (* 4.0 (* ?x43 ?x43 ?x733 ?x733 ?x733 ?x523 ?x523 ?x523)) ?x735 (* 8.0 (* ?x43 ?x43 ?x43 ?x523 ?x523 ?x523)))))
 (let (($x530 (= (* (+ ?x122 (* 2.0 (* ?x43 ?x523)) ?x46 ?x43 ?x202) ?x743) 0.0)))
 (let (($x794 (or (not $x530) (not (= (* (+ ?x122 (* ?x64 ?x43) ?x46 ?x202) ?x616) 0.0)))))
 (let (($x1133 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x1133 $x794))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x739 (lambda ((x Int) (y Int) (z Int) )(let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x777 (* 8.0 (* (to_real z) (to_real z) (to_real z) ?x43 ?x43 ?x43))))
 (let ((?x46 (to_real z)))
 (let ((?x543 (* (/ 1.0 2.0) (* ?x46 ?x64))))
 (let ((?x616 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x43)) ?x543 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x43 ?x43)) ?x777 (* ?x64 ?x64 ?x64 ?x43 ?x43 ?x43))))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x523 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x735 (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) (+ ?x46 ?x43) (+ ?x46 ?x43)))))
 (let ((?x733 (+ ?x46 ?x43)))
 (let ((?x743 (+ (* (- 2.0) (* ?x43 ?x733 ?x733 ?x733 ?x523 ?x523)) (* ?x733 ?x523) (* 4.0 (* ?x43 ?x43 ?x733 ?x733 ?x733 ?x523 ?x523 ?x523)) ?x735 (* 8.0 (* ?x43 ?x43 ?x43 ?x523 ?x523 ?x523)))))
 (let (($x530 (= (* (+ ?x122 (* 2.0 (* ?x43 ?x523)) ?x46 ?x43 ?x202) ?x743) 0.0)))
 (let (($x794 (or (not $x530) (not (= (* (+ ?x122 (* ?x64 ?x43) ?x46 ?x202) ?x616) 0.0)))))
 (let (($x689 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x300 (and $x689 $x794)))
 (let (($x1133 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x742 (and $x1133 $x794)))
 (rewrite (= $x742 $x300))))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((x Int) (y Int) (z Int) )(! (let ((?x61 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x64 (to_real y)))
 (let ((?x65 (/ ?x64 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x75 (+ (* (to_real (- 1)) ?x41 ?x43 ?x65 ?x65 ?x46 ?x46 ?x46) (* ?x65 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x65 ?x65 ?x65 ?x46 ?x46 ?x46) (to_real (* 2 x 2 x 2 x z z z)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x65 ?x65 ?x65))))
 (let ((?x48 (to_real z00)))
 (let ((?x68 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x65) ?x46) ?x48)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x59 (+ (* (to_real (- 1)) ?x41 ?x43 ?x42 ?x42 ?x52 ?x52 ?x52) (* ?x42 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52) (to_real (* 2 x 2 x 2 x ?x50 ?x50 ?x50)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x63 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x59) ?x61))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x63 (not (= (* ?x68 ?x75) ?x61))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x526 (lambda ((x Int) (y Int) (z Int) )(let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x777 (* 8.0 (* (to_real z) (to_real z) (to_real z) ?x43 ?x43 ?x43))))
 (let ((?x46 (to_real z)))
 (let ((?x543 (* (/ 1.0 2.0) (* ?x46 ?x64))))
 (let ((?x616 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x43)) ?x543 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64 ?x64 ?x64 ?x43 ?x43)) ?x777 (* ?x64 ?x64 ?x64 ?x43 ?x43 ?x43))))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x523 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x735 (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) (+ ?x46 ?x43) (+ ?x46 ?x43)))))
 (let ((?x733 (+ ?x46 ?x43)))
 (let ((?x743 (+ (* (- 2.0) (* ?x43 ?x733 ?x733 ?x733 ?x523 ?x523)) (* ?x733 ?x523) (* 4.0 (* ?x43 ?x43 ?x733 ?x733 ?x733 ?x523 ?x523 ?x523)) ?x735 (* 8.0 (* ?x43 ?x43 ?x43 ?x523 ?x523 ?x523)))))
 (let (($x530 (= (* (+ ?x122 (* 2.0 (* ?x43 ?x523)) ?x46 ?x43 ?x202) ?x743) 0.0)))
 (let (($x794 (or (not $x530) (not (= (* (+ ?x122 (* ?x64 ?x43) ?x46 ?x202) ?x616) 0.0)))))
 (let (($x1133 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x742 (and $x1133 $x794)))
 (let ((?x61 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x65 (/ ?x64 ?x41)))
 (let ((?x75 (+ (* (to_real (- 1)) ?x41 ?x43 ?x65 ?x65 ?x46 ?x46 ?x46) (* ?x65 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x65 ?x65 ?x65 ?x46 ?x46 ?x46) (to_real (* 2 x 2 x 2 x z z z)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x65 ?x65 ?x65))))
 (let ((?x68 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x65) ?x46) ?x48)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x59 (+ (* (to_real (- 1)) ?x41 ?x43 ?x42 ?x42 ?x52 ?x52 ?x52) (* ?x42 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52) (to_real (* 2 x 2 x 2 x ?x50 ?x50 ?x50)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x63 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x59) ?x61))))
 (let (($x80 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x63 (not (= (* ?x68 ?x75) ?x61))))))
 (rewrite (= $x80 $x742))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x740 (mp (mp @x82 (quant-intro (proof-bind ?x526) (= $x81 $x608)) $x608) (rewrite (= $x608 $x608)) $x608)))
 (let ((@x722 (mp (mp @x740 (quant-intro (proof-bind ?x739) (= $x608 $x605)) $x605) (quant-intro (proof-bind ?x1210) (= $x605 $x711)) $x711)))
 (let ((@x1015 (mp (mp~ @x722 (sk (~ $x711 $x1463)) $x1463) (rewrite (= $x1463 $x1343)) $x1343)))
 (let ((@x933 (mp (and-elim @x1015 $x1480) @x661 $x995)))
 (let ((@x1075 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x995) $x1063)) @x933 $x1063)))
 (let ((@x1095 ((_ th-lemma arith) (hypothesis (not $x965)) @x1075 (unit-resolution @x1080 @x1092 $x653) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1012) $x923)) @x1282 $x923) false)))
 (let ((@x1096 (lemma @x1095 $x965)))
 (let (($x1120 (<= ?x652 0.0)))
 (let (($x279 (not $x1120)))
 (let (($x958 (>= ?x652 0.0)))
 (let (($x1284 (not $x958)))
 (let ((@x1262 (hypothesis $x1284)))
 (let ((@x1290 (unit-resolution ((_ th-lemma arith) (or (not $x965) $x962 $x958)) @x1262 (hypothesis $x1285) @x1096 false)))
 (let ((@x1107 ((_ th-lemma arith) (or $x1285 $x1086))))
 (let ((@x971 (unit-resolution @x1107 (unit-resolution (lemma @x1290 (or $x962 $x958)) @x1262 $x962) $x1086)))
 (let (($x1220 (<= ?x1280 0.0)))
 (let (($x650 (<= ?x1479 0)))
 (let ((@x935 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x995) $x650)) @x933 $x650)))
 (let (($x1006 (>= ?x638 0.0)))
 (let ((@x1232 ((_ th-lemma arith triangle-eq) (or (not $x1010) $x1006))))
 (let (($x1004 (<= ?x1032 0.0)))
 (let ((@x558 (unit-resolution ((_ th-lemma arith) (or (not $x650) (not $x1004) (not $x1006) $x1220)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1012) $x1004)) @x1282 $x1004) (unit-resolution @x1232 @x1092 $x1006) @x935 $x1220)))
 (let ((@x948 (unit-resolution ((_ th-lemma arith) (or (not $x1220) $x1291 $x958)) @x1262 @x558 @x540 false)))
 (let ((@x947 (lemma ((_ th-lemma arith) (hypothesis (not $x645)) (hypothesis $x1291) false) (or $x945 $x645))))
 (let ((@x1160 (unit-resolution @x947 (unit-resolution (lemma @x948 (or $x1291 $x958)) @x1262 $x1291) $x645)))
 (let (($x949 (= ?x963 0.0)))
 (let (($x1084 (not $x949)))
 (let (($x1175 (= 0.0 ?x1053)))
 (let (($x822 (<= ?x1053 0.0)))
 (let ((@x1273 (unit-resolution ((_ th-lemma arith) (or (not $x650) (not $x1063) $x822)) @x935 @x1075 (hypothesis (not $x822)) false)))
 (let (($x1446 (>= ?x1053 0.0)))
 (let ((@x1269 (unit-resolution ((_ th-lemma arith) (or (not $x650) (not $x1063) (not $x1006) $x1446 (not $x653))) @x935 @x1075 (hypothesis (not $x1446)) (unit-resolution @x1080 (hypothesis $x1010) $x653) (unit-resolution @x1232 (hypothesis $x1010) $x1006) false)))
 (let ((@x1098 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1175 (not $x822) (not $x1446))) (unit-resolution (lemma @x1269 (or (not $x1010) $x1446)) @x1092 $x1446) (or $x1175 (not $x822)))))
 (let ((@x969 (mp (unit-resolution @x1098 (lemma @x1273 $x822) $x1175) (commutativity (= $x1175 $x1057)) $x1057)))
 (let ((@x1102 (unit-resolution (and-elim @x1015 $x1164) @x969 $x1001)))
 (let ((@x970 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x1084 $x854)) @x1102 $x1084) (symm (hypothesis (= 0.0 ?x963)) $x949) false)))
 (let ((@x1386 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x963) (not $x645) $x974)) (lemma @x970 (not (= 0.0 ?x963))) (or (not $x645) $x974))))
 (let (($x599 (= 0.0 ?x652)))
 (let (($x1398 (not $x599)))
 (let ((@x1405 (monotonicity (symm (commutativity (= $x599 $x854)) (= $x854 $x599)) (= $x1001 $x1398))))
 (let ((@x1407 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x599 $x279 $x1284)) (mp @x1102 @x1405 $x1398) (or $x279 $x1284))))
 (let ((@x1228 (unit-resolution @x1407 (lemma (unit-resolution @x1386 @x1160 @x971 false) $x958) $x279)))
 (let ((@x647 (unit-resolution ((_ th-lemma arith) (or (not $x965) $x1291 $x1120)) @x1228 @x1096 @x540 false)))
 (let ((@x225 (unit-resolution @x1386 (unit-resolution @x947 (lemma @x647 $x1291) $x645) $x974)))
 (unit-resolution ((_ th-lemma arith) (or (not $x1220) $x962 $x1120)) @x1228 @x558 (unit-resolution @x1107 @x225 $x1285) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      45
 :arith-eq-adapter               34
 :arith-bound-propagations-cheap 51
 :arith-bound-propagations-lp    5
 :arith-conflicts                126
 :arith-diseq                    43
 :arith-fixed-eqs                1
 :arith-gcd-calls                7
 :arith-grobner-calls            7
 :arith-grobner-conflicts        2
 :arith-horner-calls             7
 :arith-lower                    91
 :arith-make-feasible            61
 :arith-max-columns              96
 :arith-max-rows                 17
 :arith-nla-explanations         73
 :arith-nla-lemmas               124
 :arith-patches                  7
 :arith-patches-success          7
 :arith-propagations             51
 :arith-upper                    97
 :conflicts                      15
 :decisions                      174
 :del-clause                     131
 :final-checks                   50
 :max-memory                     4.72
 :memory                         3.28
 :mk-bool-var                    287
 :mk-clause                      201
 :num-allocs                     11403611
 :num-checks                     1
 :propagations                   191
 :rlimit-count                   10010
 :time                           0.04
 :total-time                     0.05)
