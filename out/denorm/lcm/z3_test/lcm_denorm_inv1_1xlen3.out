unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x834 (+ k!00 k!10 (* (- 1) (* v!4 y!2)) (* (- 1) (* x!3 u!5)))))
 (let (($x710 (>= ?x834 0)))
 (let (($x842 (= ?x834 0)))
 (let ((?x679 (* x!3 u!5)))
 (let ((?x602 (* v!4 y!2)))
 (let ((?x222 (* (- 1) k!10)))
 (let ((?x332 (* (- 1) k!00)))
 (let ((?x900 (+ ?x332 ?x222 ?x602 ?x679)))
 (let ((?x905 (* v!4 v!4 v!4 v!4 v!4)))
 (let ((?x725 (* v!4 v!4 v!4 y!2)))
 (let ((?x716 (* v!4 v!4 u!5 u!5 u!5)))
 (let ((?x705 (* (- 1) (* x!3 x!3 v!4 v!4 v!4 u!5 u!5 u!5 y!2))))
 (let ((?x777 (+ ?x705 (* (- 3) (* x!3 x!3 v!4 v!4 v!4 v!4 v!4 u!5 y!2)) (* (- 1) (* x!3 v!4 v!4 v!4)) ?x716 (* 3 (* v!4 v!4 v!4 u!5 u!5)) ?x725 (* 3 (* v!4 v!4 v!4 v!4 u!5)) (* x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5 u!5) (* 3 (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 u!5)) (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4) (* 3 (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5 u!5)) (* (- 1) (* x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4 y!2)) (* (- 3) (* x!3 x!3 v!4 v!4 v!4 v!4 u!5 u!5 y!2)) ?x905)))
 (let ((?x698 (* ?x777 ?x900)))
 (let (($x655 (= ?x698 0)))
 (let (($x767 (not $x655)))
 (let ((?x734 (* u!5 u!5 u!5 u!5 u!5)))
 (let ((?x623 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2))))
 (let ((?x612 (* u!5 u!5 u!5 y!2)))
 (let ((?x760 (+ ?x612 ?x623 ?x705 (* 3 (* v!4 v!4 u!5 y!2)) (* 3 (* v!4 u!5 u!5 y!2)) (* (- 1) (* v!4 v!4 v!4 u!5 u!5 u!5 y!2 y!2 y!2)) (* 2 (* v!4 u!5 u!5 u!5 u!5)) ?x716 (* 6 (* x!3 v!4 u!5 u!5 u!5 u!5 u!5 y!2 y!2)) (* 2 (* x!3 v!4 v!4 v!4 u!5 u!5 u!5 y!2 y!2)) ?x725 (* 2 (* x!3 u!5 u!5 u!5 u!5 u!5 u!5 y!2 y!2)) (* (- 3) (* v!4 u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2)) ?x734 (* (- 3) (* v!4 v!4 u!5 u!5 u!5 u!5 y!2 y!2 y!2)) (* 6 (* x!3 v!4 v!4 u!5 u!5 u!5 u!5 y!2 y!2)) (* (- 1) (* x!3 x!3 u!5 u!5 u!5 u!5 u!5 u!5 y!2)) (* (- 3) (* x!3 x!3 v!4 u!5 u!5 u!5 u!5 u!5 y!2)) (* (- 3) (* x!3 x!3 v!4 v!4 u!5 u!5 u!5 u!5 y!2)))))
 (let ((?x761 (* ?x760 ?x900)))
 (let (($x850 (= ?x761 0)))
 (let (($x715 (or (not $x850) $x767)))
 (let (($x750 (and $x842 $x715)))
 (let ((?x588 (+ (* u!5 x!3) ?x602 ?x332 ?x222)))
 (let ((?x628 (* u!5 u!5 u!5 v!4 v!4)))
 (let ((?x611 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x909 (+ ?x611 ?x725 ?x628 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 1) (* v!4 v!4 v!4 x!3)) (* 3 (* u!5 u!5 v!4 v!4 v!4)) (* 3 (* u!5 v!4 v!4 v!4 v!4)) ?x905 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3) (* 3 (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* 3 (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x640 (+ (* 6 (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 u!5 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) ?x611 ?x612 (* 3 (* u!5 u!5 v!4 y!2)) (* 3 (* u!5 v!4 v!4 y!2)) ?x725 ?x734 (* 2 (* u!5 u!5 u!5 u!5 v!4)) ?x628 (* 2 (* u!5 u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* 2 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2)) ?x623 (* (- 3) (* u!5 u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2)))))
 (let (($x519 (and (= ?x588 0) (or (not (= (* ?x640 ?x588) 0)) (not (= (* ?x909 ?x588) 0))))))
 (let (($x706 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x222 (* (- 1) k!10)))
 (let ((?x332 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x228 (+ ?x33 ?x34 ?x332 ?x222)))
 (let ((?x349 (* v v v v v)))
 (let ((?x365 (* 3 (* u v v v v))))
 (let ((?x364 (* 3 (* u u v v v))))
 (let ((?x330 (* (- 1) (* v v v x))))
 (let ((?x291 (* (- 1) (* v v v v v v x x y))))
 (let ((?x259 (* u u u v v)))
 (let ((?x226 (* v v v y)))
 (let ((?x162 (* (- 1) (* u u u v v v x x y))))
 (let ((?x885 (+ ?x162 ?x226 ?x259 ?x291 (* (- 3) (* u v v v v v x x y)) (* (- 3) (* u u v v v v x x y)) ?x330 ?x364 ?x365 ?x349 (* u u u v v v x x x) (* 3 (* u u v v v v x x x)) (* 3 (* u v v v v v x x x)) (* v v v v v v x x x))))
 (let ((?x271 (* 2 (* u u u u v))))
 (let ((?x256 (* u u u u u)))
 (let ((?x245 (* 3 (* u v v y))))
 (let ((?x244 (* 3 (* u u v y))))
 (let ((?x219 (* u u u y)))
 (let ((?x148 (* (- 1) (* u u u u u u x x y))))
 (let ((?x647 (+ (* 6 (* u u u u v v x y y)) ?x148 (* (- 3) (* u u u u u v x x y)) (* (- 3) (* u u u u v v x x y)) ?x162 ?x219 ?x244 ?x245 ?x226 ?x256 ?x271 ?x259 (* 2 (* u u u u u u x y y)) (* 6 (* u u u u u v x y y)) (* 2 (* u u u v v v x y y)) (* (- 1) (* u u u u u u y y y)) (* (- 3) (* u u u u u v y y y)) (* (- 3) (* u u u u v v y y y)) (* (- 1) (* u u u v v v y y y)))))
 (and (= ?x228 0) (or (not (= (* ?x647 ?x228) 0)) (not (= (* ?x885 ?x228) 0))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x315 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x222 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x211 (+ y ?x215)))
 (let ((?x80 (* ?x211 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x332 (* (- 1) k!00)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x112 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x211 x x v v v)) (* ?x211 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x124 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x86 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x339 (or (not (= (* ?x86 (+ ?x332 ?x124 ?x45 ?x222)) 0)) (not (= (* ?x112 (+ ?x332 ?x56 ?x80 ?x222)) 0)))))
 (and (= (+ ?x332 (* x u) (* y v) ?x222) 0) $x339)))))))))))))))))) :qid k!29))
 ))
 (let ((?x680 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x222 (* (- 1) k!10)))
 (let ((?x332 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x228 (+ ?x33 ?x34 ?x332 ?x222)))
 (let ((?x349 (* v v v v v)))
 (let ((?x365 (* 3 (* u v v v v))))
 (let ((?x364 (* 3 (* u u v v v))))
 (let ((?x330 (* (- 1) (* v v v x))))
 (let ((?x291 (* (- 1) (* v v v v v v x x y))))
 (let ((?x259 (* u u u v v)))
 (let ((?x226 (* v v v y)))
 (let ((?x162 (* (- 1) (* u u u v v v x x y))))
 (let ((?x885 (+ ?x162 ?x226 ?x259 ?x291 (* (- 3) (* u v v v v v x x y)) (* (- 3) (* u u v v v v x x y)) ?x330 ?x364 ?x365 ?x349 (* u u u v v v x x x) (* 3 (* u u v v v v x x x)) (* 3 (* u v v v v v x x x)) (* v v v v v v x x x))))
 (let ((?x271 (* 2 (* u u u u v))))
 (let ((?x256 (* u u u u u)))
 (let ((?x245 (* 3 (* u v v y))))
 (let ((?x244 (* 3 (* u u v y))))
 (let ((?x219 (* u u u y)))
 (let ((?x148 (* (- 1) (* u u u u u u x x y))))
 (let ((?x647 (+ (* 6 (* u u u u v v x y y)) ?x148 (* (- 3) (* u u u u u v x x y)) (* (- 3) (* u u u u v v x x y)) ?x162 ?x219 ?x244 ?x245 ?x226 ?x256 ?x271 ?x259 (* 2 (* u u u u u u x y y)) (* 6 (* u u u u u v x y y)) (* 2 (* u u u v v v x y y)) (* (- 1) (* u u u u u u y y y)) (* (- 3) (* u u u u u v y y y)) (* (- 3) (* u u u u v v y y y)) (* (- 1) (* u u u v v v y y y)))))
 (let (($x945 (and (= ?x228 0) (or (not (= (* ?x647 ?x228) 0)) (not (= (* ?x885 ?x228) 0))))))
 (let ((?x215 (* (- 1) x)))
 (let ((?x211 (+ y ?x215)))
 (let ((?x80 (* ?x211 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x112 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x211 x x v v v)) (* ?x211 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x124 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x86 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x339 (or (not (= (* ?x86 (+ ?x332 ?x124 ?x45 ?x222)) 0)) (not (= (* ?x112 (+ ?x332 ?x56 ?x80 ?x222)) 0)))))
 (let (($x229 (and (= (+ ?x332 (* x u) (* y v) ?x222) 0) $x339)))
 (rewrite (= $x229 $x945)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x338 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x211 (+ y ?x215)))
 (let ((?x80 (* ?x211 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x112 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x211 x x v v v)) (* ?x211 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x124 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x86 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x334 (or (not (= (* ?x86 (+ ?x79 ?x124 ?x45 ?x95)) 0)) (not (= (* ?x112 (+ ?x79 ?x56 ?x80 ?x95)) 0)))))
 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x334))))))))))))))))))) :qid k!29))
 ))
 (let ((?x317 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x222 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x211 (+ y ?x215)))
 (let ((?x80 (* ?x211 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x332 (* (- 1) k!00)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x112 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x211 x x v v v)) (* ?x211 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x124 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x86 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x339 (or (not (= (* ?x86 (+ ?x332 ?x124 ?x45 ?x222)) 0)) (not (= (* ?x112 (+ ?x332 ?x56 ?x80 ?x222)) 0)))))
 (let (($x229 (and (= (+ ?x332 (* x u) (* y v) ?x222) 0) $x339)))
 (let ((?x290 (* ?x112 (+ (* (- 1) (* u00 x00)) ?x56 ?x80 (* (- 1) (* v00 y00))))))
 (let ((?x281 (* ?x86 (+ (* (- 1) (* u00 x00)) ?x124 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x227 (* y v)))
 (let ((?x224 (* x u)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let (($x261 (and (= (+ ?x79 ?x224 ?x227 ?x95) 0) (or (not (= ?x281 0)) (not (= ?x290 0))))))
 (rewrite (= $x261 $x229)))))))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x55 (+ u v)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x57 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x64 (+ (* ?x29 ?x55 ?x55 ?x55 v v v x x ?x57) (* v v v ?x57) ?x63)))
 (let ((?x38 (* v00 y00)))
 (let ((?x65 (* (- (+ (* ?x29 u00 x00) (* ?x55 x) (* v ?x57)) ?x38) ?x64)))
 (let ((?x44 (+ v u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x42 (- x y)))
 (let ((?x51 (+ (* ?x29 u u u ?x44 ?x44 ?x44 ?x42 ?x42 y) ?x49 (* u u u ?x44 ?x44))))
 (let ((?x52 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x51)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x52 0)) (not (= ?x65 0))))))))))))))))) :qid k!29))
 ))
 (let ((?x77 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x211 (+ y ?x215)))
 (let ((?x80 (* ?x211 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x112 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x211 x x v v v)) (* ?x211 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x124 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x86 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x334 (or (not (= (* ?x86 (+ ?x79 ?x124 ?x45 ?x95)) 0)) (not (= (* ?x112 (+ ?x79 ?x56 ?x80 ?x95)) 0)))))
 (let (($x261 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x334)))
 (let ((?x57 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x64 (+ (* ?x29 ?x55 ?x55 ?x55 v v v x x ?x57) (* v v v ?x57) ?x63)))
 (let (($x66 (= (* (- (+ (* ?x29 u00 x00) ?x56 (* v ?x57)) ?x38) ?x64) 0)))
 (let ((?x42 (- x y)))
 (let ((?x51 (+ (* ?x29 u u u ?x44 ?x44 ?x44 ?x42 ?x42 y) ?x49 (* u u u ?x44 ?x44))))
 (let (($x53 (= (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x51) 0)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x69 (and $x41 (or (not $x53) (not $x66)))))
 (rewrite (= $x69 $x261)))))))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x220 (mp (mp @x71 (quant-intro (proof-bind ?x77) (= $x70 $x338)) $x338) (rewrite (= $x338 $x338)) $x338)))
 (let ((@x656 (mp (mp @x220 (quant-intro (proof-bind ?x317) (= $x338 $x315)) $x315) (quant-intro (proof-bind ?x680) (= $x315 $x706)) $x706)))
 (let ((@x783 (mp (mp~ @x656 (sk (~ $x706 $x519)) $x519) (rewrite (= $x519 $x750)) $x750)))
 (let ((@x660 (and-elim @x783 $x842)))
 (let ((@x493 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x842) $x710)) @x660 $x710)))
 (let (($x708 (<= ?x834 0)))
 (let ((@x121 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x842) $x708)) @x660 $x708)))
 (let (($x403 (not (<= ?x698 0))))
 (let (($x894 (>= ?x698 0)))
 (let (($x721 (>= ?x761 0)))
 (let (($x704 (<= ?x761 0)))
 (let ((@x410 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x850 (not $x704) (not $x721))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x704)) @x121 @x493 false) $x704) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x721)) @x121 @x493 false) $x721) $x850)))
 (let ((@x433 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x655 $x403 (not $x894))) (unit-resolution (and-elim @x783 $x715) @x410 $x767) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x894)) @x121 @x493 false) $x894) $x403)))
 ((_ th-lemma arith farkas 1 1 1) @x433 @x121 @x493 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             320
 :arith-nonlinear-horner    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                35.24
 :memory                    19.14
 :mk-bool-var               21
 :mk-clause                 28
 :num-allocs                22325152026753.00
 :num-checks                1
 :propagations              14
 :rlimit-count              102831498
 :time                      113.97
 :total-time                113.96)
