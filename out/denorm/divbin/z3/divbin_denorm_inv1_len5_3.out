unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x741 (* 4.0 (* (to_real x!0) (to_real x!0) (to_real r!1) (to_real r!1)))))
 (let ((?x417 (to_real r!1)))
 (let ((?x405 (to_real b!2)))
 (let ((?x342 (to_real x!0)))
 (let ((?x809 (* ?x342 ?x342 ?x405 ?x405 ?x417)))
 (let ((?x816 (* (- (/ 1.0 8.0)) (* ?x405 ?x405 ?x405 ?x417 ?x417))))
 (let ((?x576 (* (/ 1.0 2.0) (* ?x405 ?x417))))
 (let ((?x264 (* 4.0 (* (to_real b00) (to_real x00) ?x342 ?x342 ?x417 ?x417 ?x417))))
 (let ((?x355 (* (- 4.0) (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x417))))
 (let ((?x839 (+ (* 4.0 (* (to_real r00) ?x342 ?x342 ?x417 ?x417 ?x417)) ?x355 ?x264 (* ?x342 ?x342 ?x342 ?x405 ?x405 ?x405) (* (- 1.0) (* (to_real b00) (to_real x00) ?x342 ?x342 ?x405 ?x405)) ?x576 (* (- 4.0) (* ?x342 ?x342 ?x342 ?x405 ?x417 ?x417 ?x417)) (* (- 4.0) (* (to_real b00) (to_real x00) ?x342 ?x342 ?x417)) (* (- 1.0) (* (to_real r00) ?x342 ?x342 ?x405 ?x405)) (* (/ 1.0 8.0) (* (to_real r00) ?x405 ?x405 ?x405 ?x417)) (* (- (/ 1.0 2.0)) (* (to_real r00) ?x405)) (* (/ 1.0 2.0) (* ?x342 ?x405 ?x405)) ?x816 (* 4.0 (* ?x342 ?x342 ?x342 ?x405 ?x417)) (* (- 4.0) (* (to_real r00) ?x342 ?x342 ?x417)) ?x809 (* (/ 1.0 8.0) (* (to_real b00) (to_real x00) ?x405 ?x405 ?x405 ?x417)) (* (- (/ 1.0 8.0)) (* ?x342 ?x405 ?x405 ?x405 ?x405 ?x417)) ?x741 (* (- (/ 1.0 2.0)) (* (to_real b00) (to_real x00) ?x405)))))
 (let (($x782 (<= ?x839 0.0)))
 (let (($x222 (not $x782)))
 (let (($x314 (>= ?x839 0.0)))
 (let ((?x93 (* b00 x00)))
 (let ((?x358 (+ r00 ?x93 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x311 (>= ?x358 0)))
 (let (($x263 (= 0 ?x358)))
 (let ((@x784 (symm (commutativity (= $x263 (= ?x358 0))) (= (= ?x358 0) $x263))))
 (let (($x954 (= ?x358 0)))
 (let ((?x740 (* ?x342 ?x405)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x66 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x66)))
 (let ((?x100 (* 4.0 (* ?x342 ?x417 ?x417 ?x417))))
 (let ((?x588 (* (- (/ 1.0 8.0)) (* ?x405 ?x405 ?x405))))
 (let ((?x694 (* ?x417 ?x417 ?x417)))
 (let ((?x689 (* (- (/ 3.0 2.0)) (* ?x405 ?x417 ?x417))))
 (let ((?x688 (* (/ 3.0 4.0) (* ?x405 ?x405 ?x417))))
 (let ((?x738 (* (- 1.0) ?x417)))
 (let ((?x325 (* (- (/ 1.0 4.0)) (* ?x405 ?x405))))
 (let ((?x323 (* (- 4.0) (* ?x342 ?x342 ?x417))))
 (let ((?x517 (* (- (/ 1.0 16.0)) (* ?x405 ?x405 ?x405 ?x405))))
 (let ((?x783 (* (/ 1.0 8.0) (* ?x405 ?x405 ?x405 ?x417))))
 (let ((?x322 (* 4.0 (* ?x342 ?x342 ?x417 ?x417 ?x417))))
 (let ((?x108 (* (- 4.0) (* ?x342 ?x417))))
 (let ((?x777 (+ (* 2.0 (* ?x342 ?x342 ?x405)) ?x108 (* (- (/ 1.0 2.0)) (* ?x342 ?x405 ?x405 ?x405)) (* (- (/ 1.0 2.0)) (* ?x342 ?x342 ?x405 ?x405 ?x405)) ?x322 ?x783 ?x517 ?x323 (* (- 1.0) (* ?x342 ?x342 ?x405 ?x405)) (* (- 6.0) (* ?x342 ?x405 ?x417 ?x417)) ?x325 ?x738 (* 3.0 (* ?x342 ?x405 ?x405 ?x417)) (* (- 1.0) (* ?x342 ?x405 ?x405)) ?x688 (* (- 6.0) (* ?x342 ?x342 ?x405 ?x417 ?x417)) ?x689 ?x694 (* 2.0 ?x740) (* 3.0 ?x809) ?x588 ?x100)))
 (let (($x762 (= (* ?x777 (+ ?x142 ?x156 ?x417 ?x740)) 0.0)))
 (let (($x610 (not $x762)))
 (let (($x732 (= ?x839 0.0)))
 (let (($x308 (not $x732)))
 (let (($x150 (or $x308 $x610)))
 (let (($x693 (and $x954 $x150)))
 (let ((?x112 (+ ?x738 (* 2.0 (* ?x405 ?x342)) (* (- 1.0) (* ?x405 ?x405 ?x342 ?x342)) ?x783 ?x322 ?x323 (* (- 1.0) (* ?x405 ?x405 ?x342)) (* 3.0 (* ?x405 ?x405 ?x342 ?x342 ?x417)) ?x325 ?x517 ?x588 ?x688 ?x689 ?x694 (* (- (/ 1.0 2.0)) (* ?x405 ?x405 ?x405 ?x342)) (* 3.0 (* ?x405 ?x405 ?x342 ?x417)) (* (- 6.0) (* ?x405 ?x342 ?x417 ?x417)) ?x100 (* (- (/ 1.0 2.0)) (* ?x405 ?x405 ?x405 ?x342 ?x342)) (* (- 6.0) (* ?x405 ?x342 ?x342 ?x417 ?x417)) ?x108 (* 2.0 (* ?x405 ?x342 ?x342)))))
 (let ((?x102 (* ?x405 ?x405 ?x342 ?x342 ?x417)))
 (let ((?x494 (+ ?x576 (* (- (/ 1.0 2.0)) (* ?x405 ?x66)) (* (- (/ 1.0 2.0)) (* ?x405 ?x151 ?x152)) (* (/ 1.0 2.0) (* ?x405 ?x405 ?x342)) ?x102 (* (- 1.0) (* ?x405 ?x405 ?x342 ?x342 ?x66)) (* (- 1.0) (* ?x405 ?x405 ?x342 ?x342 ?x151 ?x152)) (* ?x405 ?x405 ?x405 ?x342 ?x342 ?x342) ?x816 (* (/ 1.0 8.0) (* ?x405 ?x405 ?x405 ?x417 ?x66)) (* (/ 1.0 8.0) (* ?x405 ?x405 ?x405 ?x417 ?x151 ?x152)) (* (- (/ 1.0 8.0)) (* ?x405 ?x405 ?x405 ?x405 ?x342 ?x417)) ?x355 (* 4.0 (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x66)) (* 4.0 (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x151 ?x152)) (* (- 4.0) (* ?x405 ?x342 ?x342 ?x342 ?x417 ?x417 ?x417)) ?x741 (* (- 4.0) (* ?x342 ?x342 ?x417 ?x66)) (* (- 4.0) (* ?x342 ?x342 ?x417 ?x151 ?x152)) (* 4.0 (* ?x405 ?x342 ?x342 ?x342 ?x417)))))
 (let (($x116 (or (not (= ?x494 0.0)) (not (= (* ?x112 (+ ?x417 ?x142 ?x156 (* ?x405 ?x342))) 0.0)))))
 (let (($x117 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x93)) 0) $x116)))
 (let (($x226 (exists ((b Int) (r Int) (x Int) )(! (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* ?x40 ?x43)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x66 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x66)))
 (let ((?x51 (to_real r)))
 (let ((?x291 (* (- 4.0) (* ?x43 ?x43 ?x51))))
 (let ((?x250 (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51))))
 (let ((?x957 (+ (* (- 1.0) ?x51) (* 2.0 ?x171) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x51)) ?x250 ?x291 (* (- 1.0) (* ?x40 ?x40 ?x43)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x51)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x51)) (* (- (/ 3.0 2.0)) (* ?x40 ?x51 ?x51)) (* ?x51 ?x51 ?x51) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43)) (* 3.0 (* ?x40 ?x40 ?x43 ?x51)) (* (- 6.0) (* ?x40 ?x43 ?x51 ?x51)) (* 4.0 (* ?x43 ?x51 ?x51 ?x51)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- 6.0) (* ?x40 ?x43 ?x43 ?x51 ?x51)) (* (- 4.0) (* ?x43 ?x51)) (* 2.0 (* ?x40 ?x43 ?x43)))))
 (let ((?x376 (* ?x40 ?x40 ?x43 ?x43 ?x51)))
 (let ((?x454 (+ (* (/ 1.0 2.0) (* ?x40 ?x51)) (* (- (/ 1.0 2.0)) (* ?x40 ?x66)) (* (- (/ 1.0 2.0)) (* ?x40 ?x151 ?x152)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43)) ?x376 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x66)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x151 ?x152)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x51 ?x51)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x51 ?x66)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x51 ?x151 ?x152)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x51)) (* (- 4.0) (* ?x43 ?x43 ?x51 ?x51 ?x51 ?x51)) (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51 ?x66)) (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51 ?x151 ?x152)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x51 ?x51 ?x51)) (* 4.0 (* ?x43 ?x43 ?x51 ?x51)) (* (- 4.0) (* ?x43 ?x43 ?x51 ?x66)) (* (- 4.0) (* ?x43 ?x43 ?x51 ?x151 ?x152)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x51)))))
 (let (($x431 (not (= ?x454 0.0))))
 (let (($x129 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x129 (or $x431 (not (= (* ?x957 (+ ?x51 ?x142 ?x156 ?x171)) 0.0))))))))))))))))))))) :qid k!28))
 ))
 (let (($x710 (exists ((b Int) (r Int) (x Int) )(! (let ((?x66 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x66)))
 (let ((?x40 (to_real b)))
 (let ((?x192 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x51 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x345 (+ ?x156 ?x51 ?x192 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x457 (+ ?x51 ?x192)))
 (let ((?x43 (to_real x)))
 (let ((?x262 (* 2.0 ?x43)))
 (let ((?x818 (+ 1.0 ?x262)))
 (let ((?x530 (+ ?x192 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x818 ?x818)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x457)) (* ?x818 ?x818 ?x457 ?x457 ?x457) (* (- 1.0) (* ?x818 ?x818 ?x457)))))
 (let ((?x291 (* (- 4.0) (* ?x43 ?x43 ?x51))))
 (let ((?x250 (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51))))
 (let ((?x301 (+ ?x192 (* (- 1.0) (* ?x43 ?x43 ?x40 ?x40)) (* (/ 1.0 8.0) (* ?x51 ?x40 ?x40 ?x40)) ?x250 ?x291)))
 (let (($x551 (or (not (= (* (+ ?x156 ?x51 ?x142 (* ?x43 ?x40)) ?x301) 0.0)) (not (= (* ?x530 ?x345) 0.0)))))
 (let (($x410 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x410 $x551))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x193 (lambda ((b Int) (r Int) (x Int) )(let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x171 (* ?x40 ?x43)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x66 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x66)))
 (let ((?x51 (to_real r)))
 (let ((?x291 (* (- 4.0) (* ?x43 ?x43 ?x51))))
 (let ((?x250 (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51))))
 (let ((?x957 (+ (* (- 1.0) ?x51) (* 2.0 ?x171) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x51)) ?x250 ?x291 (* (- 1.0) (* ?x40 ?x40 ?x43)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x51)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x51)) (* (- (/ 3.0 2.0)) (* ?x40 ?x51 ?x51)) (* ?x51 ?x51 ?x51) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43)) (* 3.0 (* ?x40 ?x40 ?x43 ?x51)) (* (- 6.0) (* ?x40 ?x43 ?x51 ?x51)) (* 4.0 (* ?x43 ?x51 ?x51 ?x51)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- 6.0) (* ?x40 ?x43 ?x43 ?x51 ?x51)) (* (- 4.0) (* ?x43 ?x51)) (* 2.0 (* ?x40 ?x43 ?x43)))))
 (let ((?x376 (* ?x40 ?x40 ?x43 ?x43 ?x51)))
 (let ((?x454 (+ (* (/ 1.0 2.0) (* ?x40 ?x51)) (* (- (/ 1.0 2.0)) (* ?x40 ?x66)) (* (- (/ 1.0 2.0)) (* ?x40 ?x151 ?x152)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43)) ?x376 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x66)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x151 ?x152)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x51 ?x51)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x51 ?x66)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x51 ?x151 ?x152)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x51)) (* (- 4.0) (* ?x43 ?x43 ?x51 ?x51 ?x51 ?x51)) (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51 ?x66)) (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51 ?x151 ?x152)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x51 ?x51 ?x51)) (* 4.0 (* ?x43 ?x43 ?x51 ?x51)) (* (- 4.0) (* ?x43 ?x43 ?x51 ?x66)) (* (- 4.0) (* ?x43 ?x43 ?x51 ?x151 ?x152)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x51)))))
 (let (($x431 (not (= ?x454 0.0))))
 (let (($x129 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x593 (and $x129 (or $x431 (not (= (* ?x957 (+ ?x51 ?x142 ?x156 ?x171)) 0.0))))))
 (let ((?x192 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x345 (+ ?x156 ?x51 ?x192 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x457 (+ ?x51 ?x192)))
 (let ((?x262 (* 2.0 ?x43)))
 (let ((?x818 (+ 1.0 ?x262)))
 (let ((?x530 (+ ?x192 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x818 ?x818)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x457)) (* ?x818 ?x818 ?x457 ?x457 ?x457) (* (- 1.0) (* ?x818 ?x818 ?x457)))))
 (let ((?x301 (+ ?x192 (* (- 1.0) (* ?x43 ?x43 ?x40 ?x40)) (* (/ 1.0 8.0) (* ?x51 ?x40 ?x40 ?x40)) ?x250 ?x291)))
 (let (($x551 (or (not (= (* (+ ?x156 ?x51 ?x142 (* ?x43 ?x40)) ?x301) 0.0)) (not (= (* ?x530 ?x345) 0.0)))))
 (let (($x410 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x805 (and $x410 $x551)))
 (rewrite (= $x805 $x593)))))))))))))))))))))))))))))))
 ))
 (let (($x553 (exists ((b Int) (r Int) (x Int) )(! (let ((?x66 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x66)))
 (let ((?x40 (to_real b)))
 (let ((?x192 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x51 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x345 (+ ?x156 ?x51 ?x192 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x457 (+ ?x51 ?x192)))
 (let ((?x43 (to_real x)))
 (let ((?x262 (* 2.0 ?x43)))
 (let ((?x818 (+ 1.0 ?x262)))
 (let ((?x530 (+ ?x192 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x818 ?x818)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x457)) (* ?x818 ?x818 ?x457 ?x457 ?x457) (* (- 1.0) (* ?x818 ?x818 ?x457)))))
 (let ((?x291 (* (- 4.0) (* ?x43 ?x43 ?x51))))
 (let ((?x250 (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51))))
 (let ((?x301 (+ ?x192 (* (- 1.0) (* ?x43 ?x43 ?x40 ?x40)) (* (/ 1.0 8.0) (* ?x51 ?x40 ?x40 ?x40)) ?x250 ?x291)))
 (let (($x551 (or (not (= (* (+ ?x156 ?x51 ?x142 (* ?x43 ?x40)) ?x301) 0.0)) (not (= (* ?x530 ?x345) 0.0)))))
 (let (($x647 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x647 $x551))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x537 (lambda ((b Int) (r Int) (x Int) )(let ((?x66 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x66)))
 (let ((?x40 (to_real b)))
 (let ((?x192 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x51 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x345 (+ ?x156 ?x51 ?x192 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x457 (+ ?x51 ?x192)))
 (let ((?x43 (to_real x)))
 (let ((?x262 (* 2.0 ?x43)))
 (let ((?x818 (+ 1.0 ?x262)))
 (let ((?x530 (+ ?x192 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x818 ?x818)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x457)) (* ?x818 ?x818 ?x457 ?x457 ?x457) (* (- 1.0) (* ?x818 ?x818 ?x457)))))
 (let ((?x291 (* (- 4.0) (* ?x43 ?x43 ?x51))))
 (let ((?x250 (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51))))
 (let ((?x301 (+ ?x192 (* (- 1.0) (* ?x43 ?x43 ?x40 ?x40)) (* (/ 1.0 8.0) (* ?x51 ?x40 ?x40 ?x40)) ?x250 ?x291)))
 (let (($x551 (or (not (= (* (+ ?x156 ?x51 ?x142 (* ?x43 ?x40)) ?x301) 0.0)) (not (= (* ?x530 ?x345) 0.0)))))
 (let (($x410 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x805 (and $x410 $x551)))
 (let (($x647 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x188 (and $x647 $x551)))
 (rewrite (= $x188 $x805))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((b Int) (r Int) (x Int) )(! (let ((?x60 (to_real 0)))
 (let ((?x70 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x51 (to_real r)))
 (let ((?x63 (- ?x51 ?x42)))
 (let ((?x77 (+ (- (* (to_real (- 1)) ?x42) (* ?x42 ?x42 ?x70 ?x70)) (* ?x42 ?x42 ?x42 ?x63) (* ?x63 ?x63 ?x63 ?x70 ?x70))))
 (let ((?x72 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x63) (to_real r00)) (* ?x42 ?x70))))
 (let ((?x48 (* (to_real (- 1)) ?x42)))
 (let ((?x55 (+ (- ?x48 (* ?x42 ?x42 ?x41 (to_real x) ?x41 (to_real x))) (* ?x42 ?x42 ?x42 ?x51) (to_real (* r r r 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x62 (not (= (* ?x46 (- ?x55 (to_real (* r 2 x 2 x)))) ?x60))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or $x62 (not (= (* ?x72 (- ?x77 (* ?x63 ?x70 ?x70))) ?x60)))))))))))))))))) :qid k!28))
 ))
 (let ((?x196 (lambda ((b Int) (r Int) (x Int) )(let ((?x66 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x66)))
 (let ((?x40 (to_real b)))
 (let ((?x192 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x51 (to_real r)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x345 (+ ?x156 ?x51 ?x192 ?x142 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x457 (+ ?x51 ?x192)))
 (let ((?x43 (to_real x)))
 (let ((?x262 (* 2.0 ?x43)))
 (let ((?x818 (+ 1.0 ?x262)))
 (let ((?x530 (+ ?x192 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x818 ?x818)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x457)) (* ?x818 ?x818 ?x457 ?x457 ?x457) (* (- 1.0) (* ?x818 ?x818 ?x457)))))
 (let ((?x291 (* (- 4.0) (* ?x43 ?x43 ?x51))))
 (let ((?x250 (* 4.0 (* ?x43 ?x43 ?x51 ?x51 ?x51))))
 (let ((?x301 (+ ?x192 (* (- 1.0) (* ?x43 ?x43 ?x40 ?x40)) (* (/ 1.0 8.0) (* ?x51 ?x40 ?x40 ?x40)) ?x250 ?x291)))
 (let (($x551 (or (not (= (* (+ ?x156 ?x51 ?x142 (* ?x43 ?x40)) ?x301) 0.0)) (not (= (* ?x530 ?x345) 0.0)))))
 (let (($x647 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x188 (and $x647 $x551)))
 (let ((?x60 (to_real 0)))
 (let ((?x70 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x63 (- ?x51 ?x42)))
 (let ((?x77 (+ (- (* (to_real (- 1)) ?x42) (* ?x42 ?x42 ?x70 ?x70)) (* ?x42 ?x42 ?x42 ?x63) (* ?x63 ?x63 ?x63 ?x70 ?x70))))
 (let ((?x72 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x63) ?x66) (* ?x42 ?x70))))
 (let ((?x55 (+ (- (* (to_real (- 1)) ?x42) (* ?x42 ?x42 ?x41 ?x43 ?x41 ?x43)) (* ?x42 ?x42 ?x42 ?x51) (to_real (* r r r 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x62 (not (= (* ?x46 (- ?x55 (to_real (* r 2 x 2 x)))) ?x60))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x84 (and $x38 (or $x62 (not (= (* ?x72 (- ?x77 (* ?x63 ?x70 ?x70))) ?x60))))))
 (rewrite (= $x84 $x188))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x243 (mp (mp @x86 (quant-intro (proof-bind ?x196) (= $x85 $x553)) $x553) (rewrite (= $x553 $x553)) $x553)))
 (let ((@x332 (mp (mp @x243 (quant-intro (proof-bind ?x537) (= $x553 $x710)) $x710) (quant-intro (proof-bind ?x193) (= $x710 $x226)) $x226)))
 (let ((@x728 (mp (mp~ @x332 (sk (~ $x226 $x117)) $x117) (rewrite (= $x117 $x693)) $x693)))
 (let ((@x343 (mp (and-elim @x728 $x954) @x784 $x263)))
 (let ((@x415 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x263) $x311)) @x343 $x311)))
 (let (($x90 (<= ?x358 0)))
 (let ((@x707 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x263) $x90)) @x343 $x90)))
 (let ((@x838 (unit-resolution ((_ th-lemma arith) (or $x314 (not $x311) (not $x90))) @x707 @x415 (hypothesis (not $x314)) false)))
 (let (($x315 (= 0.0 ?x839)))
 (let (($x144 (not $x315)))
 (let ((@x157 (monotonicity (symm (commutativity (= $x315 $x732)) (= $x732 $x315)) (= $x308 $x144))))
 (let ((?x334 (+ ?x740 ?x156 ?x142 ?x417)))
 (let (($x628 (= ?x334 0.0)))
 (let (($x338 (>= ?x334 0.0)))
 (let ((?x269 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x740)))
 (let (($x456 (= ?x269 0.0)))
 (let ((@x620 (lemma (unit-resolution ((_ th-lemma arith) $x456) (hypothesis (not $x456)) false) $x456)))
 (let ((?x673 (+ ?x153 (* (- 1.0) (to_real ?x93)))))
 (let (($x252 (= 0.0 ?x673)))
 (let ((@x692 (symm (commutativity (= $x252 (= ?x673 0.0))) (= (= ?x673 0.0) $x252))))
 (let ((@x614 (mp ((_ th-lemma arith) (= ?x673 0.0)) @x692 $x252)))
 (let (($x670 (<= ?x673 0.0)))
 (let (($x162 (not $x670)))
 (let (($x671 (>= ?x269 0.0)))
 (let ((@x617 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x671)) (hypothesis $x456) $x671)))
 (let ((@x726 (unit-resolution ((_ th-lemma arith) (or $x338 (not $x671) (not $x90) $x162)) @x617 (hypothesis (not $x338)) @x707 $x162)))
 (let ((@x735 (lemma (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x252) $x670)) @x726 @x614 false) (or (not $x456) $x338))))
 (let (($x966 (<= ?x334 0.0)))
 (let (($x246 (<= ?x269 0.0)))
 (let ((@x230 ((_ th-lemma arith) $x456)))
 (let (($x96 (>= ?x673 0.0)))
 (let ((@x685 ((_ th-lemma arith) (hypothesis (not $x966)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x252) $x96)) @x614 $x96) @x415 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x246)) @x230 $x246) false)))
 (let ((@x621 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x628 (not $x966) (not $x338))) (lemma @x685 $x966) (unit-resolution @x735 @x620 $x338) $x628)))
 (let (($x394 (or (not $x628) $x762)))
 (let ((@x825 (unit-resolution ((_ th-lemma arith) $x394) (hypothesis $x610) (hypothesis $x628) false)))
 (let ((@x352 (unit-resolution (and-elim @x728 $x150) (unit-resolution (lemma @x825 $x394) @x621 $x762) $x308)))
 (let ((@x897 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x315 $x222 (not $x314))) (mp @x352 @x157 $x144) (or $x222 (not $x314)))))
 (unit-resolution ((_ th-lemma arith) (or $x782 (not $x311) (not $x90))) @x707 @x415 (unit-resolution @x897 (lemma @x838 $x314) $x222) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      24
 :arith-eq-adapter               45
 :arith-bound-propagations-cheap 41
 :arith-bound-propagations-lp    18
 :arith-conflicts                82
 :arith-diseq                    43
 :arith-gcd-calls                4
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    76
 :arith-make-feasible            71
 :arith-max-columns              78
 :arith-max-rows                 17
 :arith-nla-explanations         68
 :arith-nla-lemmas               81
 :arith-patches                  4
 :arith-patches-success          4
 :arith-propagations             41
 :arith-upper                    68
 :conflicts                      10
 :decisions                      107
 :del-clause                     139
 :final-checks                   28
 :max-memory                     4.63
 :memory                         3.18
 :mk-bool-var                    226
 :mk-clause                      204
 :num-allocs                     2651069
 :num-checks                     1
 :propagations                   105
 :rlimit-count                   7101
 :time                           0.02
 :total-time                     0.03)
