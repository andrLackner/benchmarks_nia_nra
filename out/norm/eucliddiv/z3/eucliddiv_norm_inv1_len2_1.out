unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 y00 y00 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x43 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x47 (- ?x46 ?x44)))
 (let ((?x48 (+ ?x47 ?x45)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x51))))))))))))) :qid k!29))
 ))
 (let (($x236 (= $x53 false)))
 (let (($x229 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x235 (elim-unused (= $x229 false))))
 (let (($x232 (= $x53 $x229)))
 (let ((?x301 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 y00 y00 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x43 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x47 (- ?x46 ?x44)))
 (let ((?x48 (+ ?x47 ?x45)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x227 (= $x52 false)))
 (let (($x266 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x78 (= (+ (* (- 1) y00) y) 0)))
 (let (($x295 (and $x78 $x266 false)))
 (let (($x220 (= $x51 false)))
 (let ((@x219 (rewrite (= (or false) false))))
 (let (($x215 (or false)))
 (let (($x216 (= $x51 $x215)))
 (let (($x213 (= $x50 false)))
 (let ((@x212 (rewrite (= (not true) false))))
 (let (($x208 (not true)))
 (let (($x209 (= $x50 $x208)))
 (let (($x206 (= $x49 true)))
 (let ((@x205 (rewrite (= (= 0 0) true))))
 (let (($x201 (= 0 0)))
 (let (($x202 (= $x49 $x201)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x64 (+ r ?x58)))
 (let ((?x246 (* y00 y00 y00 ?x64 ?x64)))
 (let ((?x260 (* (- 1) ?x246)))
 (let ((?x283 (+ ?x260 ?x246)))
 (let ((@x66 (rewrite (= ?x43 ?x64))))
 (let ((@x101 (monotonicity @x66 @x66 (= ?x45 (* ?x64 ?x64 y00 y00 y00)))))
 (let ((@x253 (trans @x101 (rewrite (= (* ?x64 ?x64 y00 y00 y00) ?x246)) (= ?x45 ?x246))))
 (let ((?x56 (+ 1 q)))
 (let ((?x239 (* y00 ?x56 ?x64)))
 (let ((?x262 (+ ?x239 ?x260)))
 (let ((?x274 (+ ?x262 (* (- 1) ?x239))))
 (let ((@x74 (monotonicity (rewrite (= ?x42 ?x56)) @x66 (= ?x44 (* ?x56 ?x64 y00)))))
 (let ((@x243 (trans @x74 (rewrite (= (* ?x56 ?x64 y00) ?x239)) (= ?x44 ?x239))))
 (let ((@x268 (trans (monotonicity @x243 @x253 (= ?x46 (- ?x239 ?x246))) (rewrite (= (- ?x239 ?x246) ?x262)) (= ?x46 ?x262))))
 (let ((@x278 (trans (monotonicity @x268 @x243 (= ?x47 (- ?x262 ?x239))) (rewrite (= (- ?x262 ?x239) ?x274)) (= ?x47 ?x274))))
 (let ((@x285 (monotonicity (trans @x278 (rewrite (= ?x274 ?x260)) (= ?x47 ?x260)) @x253 (= ?x48 ?x283))))
 (let ((@x290 (trans (monotonicity (trans @x285 (rewrite (= ?x283 0)) $x49) $x202) @x205 $x206)))
 (let ((@x294 (trans (monotonicity (trans (monotonicity @x290 $x209) @x212 $x213) $x216) @x219 $x220)))
 (let ((@x297 (monotonicity (rewrite (= $x33 $x78)) (rewrite (= $x41 $x266)) @x294 (= $x52 $x295))))
 (trans @x297 (rewrite (= $x295 false)) $x227)))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (mp @x54 (trans (quant-intro (proof-bind ?x301) $x232) @x235 $x236) false))))))))))

(:max-memory   3.33
 :memory       3.03
 :mk-bool-var  5
 :num-allocs   898796
 :rlimit-count 191
 :time         0.01
 :total-time   0.01)
