unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x384 (to_real a!3)))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x107 (to_real d!1)))
 (let ((?x162 (* (/ 1.0 8.0) (* ?x107 ?x107 ?x179 (to_real y!0) ?x384 ?x384 (to_real b!2)))))
 (let ((?x218 (* (- (/ 1.0 8.0)) (* ?x107 ?x107 ?x178 ?x179 (to_real y!0) ?x384 (to_real b!2)))))
 (let ((?x417 (to_real b!2)))
 (let ((?x363 (to_real y!0)))
 (let ((?x75 (to_real b00)))
 (let ((?x234 (+ (* (/ 1.0 4.0) (* ?x75 ?x107 ?x107 (to_real y00) ?x363 ?x384 ?x417)) (* (- (/ 1.0 2.0)) (* ?x107 ?x178 ?x179 ?x363)) (* (- (/ 1.0 4.0)) (* ?x107 ?x107 ?x179 ?x384 ?x384 ?x384)) (* (- (/ 1.0 2.0)) (* ?x75 ?x107 ?x107 (to_real y00) ?x384 ?x384)) (* (/ 1.0 2.0) (* ?x75 ?x107 ?x107 ?x363 ?x384 ?x384)) (* (- (/ 1.0 4.0)) (* ?x75 ?x107 ?x107 ?x363 ?x363 ?x384 ?x417)) ?x218 ?x162 (* (/ 1.0 2.0) (* ?x107 ?x179 ?x363 ?x384)) (* ?x75 ?x107 (to_real y00) ?x363) (* (- 1.0) (* ?x75 ?x107 ?x363 ?x363)) (* (/ 1.0 4.0) (* ?x107 ?x107 ?x178 ?x179 ?x384 ?x384)))))
 (let (($x554 (<= ?x234 0.0)))
 (let (($x423 (not $x554)))
 (let (($x226 (= ?x234 0.0)))
 (let (($x211 (not $x226)))
 (let ((?x500 (* ?x179 ?x417)))
 (let ((?x339 (* (- 1.0) ?x500)))
 (let ((?x445 (* ?x75 ?x107)))
 (let ((?x430 (* ?x75 ?x363)))
 (let ((?x289 (* 2.0 ?x430)))
 (let ((?x328 (* ?x179 ?x384)))
 (let ((?x336 (* (- 1.0) ?x328)))
 (let ((?x213 (to_real y00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x535 (* (- (/ 1.0 16.0)) (* ?x107 ?x107 ?x107 ?x417 ?x417))))
 (let ((?x631 (* (- (/ 1.0 4.0)) (* ?x107 ?x107))))
 (let ((?x622 (* (- (/ 1.0 16.0)) (* ?x107 ?x107 ?x107 ?x384 ?x417))))
 (let ((?x615 (* (/ 1.0 4.0) (* ?x107 ?x107 ?x417 ?x417))))
 (let ((?x568 (* (- (/ 1.0 8.0)) (* ?x107 ?x107 ?x363 ?x384 ?x417))))
 (let ((?x551 (* (/ 1.0 2.0) (* ?x107 ?x107 ?x384 ?x417))))
 (let ((?x541 (* (- (/ 1.0 8.0)) (* ?x107 ?x107 ?x363 ?x417 ?x417))))
 (let ((?x307 (* (- (/ 1.0 2.0)) (* ?x107 ?x363))))
 (let ((?x310 (* (/ 1.0 4.0) (* ?x107 ?x107 ?x384 ?x384))))
 (let ((?x443 (* (+ ?x310 ?x307 ?x541 ?x551 ?x568 ?x615 ?x622 ?x631 ?x535) (+ ?x180 ?x217 ?x336 ?x289 ?x445 ?x339))))
 (let (($x337 (= ?x443 0.0)))
 (let ((?x224 (+ ?x339 ?x180 ?x217 ?x336 ?x289 ?x445)))
 (let (($x510 (= ?x224 0.0)))
 (let (($x619 (>= ?x224 0.0)))
 (let ((?x129 (+ ?x430 (* (- 1.0) (to_real (* b00 y!0))))))
 (let (($x652 (>= ?x129 0.0)))
 (let (($x132 (= ?x129 0.0)))
 (let ((@x207 ((_ th-lemma arith) $x132)))
 (let ((@x605 ((_ th-lemma arith triangle-eq) (or (not $x132) $x652))))
 (let ((?x419 (+ (* (- 1.0) (to_real (* b00 d!1))) ?x445)))
 (let (($x130 (>= ?x419 0.0)))
 (let (($x181 (= ?x419 0.0)))
 (let ((@x603 ((_ th-lemma arith) $x181)))
 (let ((@x473 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x181) $x130)) @x603 $x130)))
 (let ((?x484 (* b00 d!1)))
 (let ((?x527 (+ ?x484 (* (- 1) (* d00 b!2)))))
 (let (($x118 (>= ?x527 0)))
 (let (($x405 (= 0 ?x527)))
 (let ((@x581 (symm (commutativity (= $x405 (= ?x527 0))) (= (= ?x527 0) $x405))))
 (let (($x377 (= ?x527 0)))
 (let (($x481 (not $x337)))
 (let (($x501 (or $x211 $x481)))
 (let ((?x598 (+ (* 2 (* b!2 y!0)) (* a00 d!1) (* (- 1) (* a!3 d!1)) (* (- 2) (* y00 b!2)))))
 (let (($x600 (= ?x598 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let ((?x490 (+ ?x35 ?x104 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x428 (= ?x490 0)))
 (let (($x215 (and $x428 $x377 $x600 $x501)))
 (let ((?x573 (+ ?x180 (* (- 1.0) (* ?x384 ?x179)) ?x217 (* (- 1.0) (* ?x417 ?x179)) (* ?x107 ?x75) (* 2.0 (* ?x363 ?x75)))))
 (let (($x438 (= (* (+ ?x307 ?x310 ?x568 ?x631 ?x551 ?x615 ?x622 ?x535 ?x541) ?x573) 0.0)))
 (let ((?x254 (+ (* (/ 1.0 2.0) (* ?x107 ?x363 ?x178 ?x179)) (* (- (/ 1.0 2.0)) (* ?x107 ?x363 ?x384 ?x179)) (* (- 1.0) (* ?x107 ?x363 ?x75 ?x213)) (* ?x107 ?x363 ?x363 ?x75) (* (- (/ 1.0 4.0)) (* ?x107 ?x107 ?x384 ?x384 ?x178 ?x179)) (* (/ 1.0 4.0) (* ?x107 ?x107 ?x384 ?x384 ?x384 ?x179)) (* (/ 1.0 2.0) (* ?x107 ?x107 ?x384 ?x384 ?x75 ?x213)) (* (- (/ 1.0 2.0)) (* ?x107 ?x107 ?x363 ?x384 ?x384 ?x75)) (* (/ 1.0 8.0) (* ?x107 ?x107 ?x363 ?x384 ?x417 ?x178 ?x179)) (* (- (/ 1.0 8.0)) (* ?x107 ?x107 ?x363 ?x384 ?x384 ?x417 ?x179)) (* (- (/ 1.0 4.0)) (* ?x107 ?x107 ?x363 ?x384 ?x417 ?x75 ?x213)) (* (/ 1.0 4.0) (* ?x107 ?x107 ?x363 ?x363 ?x384 ?x417 ?x75)))))
 (let ((?x429 (* a!3 d!1)))
 (let ((?x666 (+ ?x429 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x633 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x104 (* 2 (* y!0 b00))) 0)))
 (let (($x436 (and $x633 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x666 0) (or (not (= ?x254 0.0)) (not $x438)))))
 (let (($x184 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x440 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x198 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x137 (+ ?x180 ?x198 ?x217 ?x440 (* (to_real d) ?x75) (* 2.0 (* (to_real y) ?x75)))))
 (let ((?x65 (to_real b)))
 (let ((?x60 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a)))))
 (let ((?x653 (+ (* (- (/ 1.0 2.0)) (* ?x56 ?x60)) ?x262 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 (to_real a) ?x65)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56)) (* (/ 1.0 2.0) (* ?x56 ?x56 (to_real a) ?x65)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x65 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x65 ?x65)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x65 ?x65)))))
 (let ((?x390 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 (to_real a) (to_real a) ?x65 ?x179))))
 (let ((?x400 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x179))))
 (let ((?x394 (+ (* (/ 1.0 2.0) (* ?x56 ?x60 ?x178 ?x179)) (* (- (/ 1.0 2.0)) (* ?x56 ?x60 (to_real a) ?x179)) (* (- 1.0) (* ?x56 ?x60 ?x75 ?x213)) (* ?x56 ?x60 ?x60 ?x75) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x178 ?x179)) ?x400 (* (/ 1.0 2.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x75 ?x213)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x60 (to_real a) (to_real a) ?x75)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x60 (to_real a) ?x65 ?x178 ?x179)) ?x390 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x60 (to_real a) ?x65 ?x75 ?x213)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x60 (to_real a) ?x65 ?x75)))))
 (let (($x371 (not (= ?x394 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x200 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x205 (= ?x200 0)))
 (let (($x146 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (and $x136 $x146 $x205 (or $x371 (not (= (* ?x653 ?x137) 0.0))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x111 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x365 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x489 (+ ?x217 ?x180 ?x365 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x233 (* (/ 1.0 2.0) ?x56)))
 (let ((?x60 (to_real y)))
 (let ((?x122 (+ ?x60 ?x233)))
 (let ((?x65 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x252 (+ ?x62 ?x65)))
 (let ((?x607 (+ (* (- (/ 1.0 2.0)) (* ?x56 ?x122)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x252 ?x252)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x65 ?x252 ?x122)))))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x62 ?x62))))
 (let ((?x469 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) ?x262 (* (- (/ 1.0 8.0)) (* ?x60 ?x56 ?x56 ?x65 ?x62)))))
 (let ((?x479 (* ?x469 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x60)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x268 (or (not (= ?x479 0.0)) (not (= (* ?x607 ?x489) 0.0)))))
 (let ((?x506 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x543 (= ?x506 0)))
 (let ((?x346 (* d00 a)))
 (let ((?x173 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x346)))
 (and (= ?x173 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x543 $x268)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x102 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x440 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x198 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x137 (+ ?x180 ?x198 ?x217 ?x440 (* (to_real d) ?x75) (* 2.0 (* (to_real y) ?x75)))))
 (let ((?x65 (to_real b)))
 (let ((?x60 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a)))))
 (let ((?x653 (+ (* (- (/ 1.0 2.0)) (* ?x56 ?x60)) ?x262 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 (to_real a) ?x65)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56)) (* (/ 1.0 2.0) (* ?x56 ?x56 (to_real a) ?x65)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x65 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x65 ?x65)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x65 ?x65)))))
 (let ((?x390 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 (to_real a) (to_real a) ?x65 ?x179))))
 (let ((?x400 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x179))))
 (let ((?x394 (+ (* (/ 1.0 2.0) (* ?x56 ?x60 ?x178 ?x179)) (* (- (/ 1.0 2.0)) (* ?x56 ?x60 (to_real a) ?x179)) (* (- 1.0) (* ?x56 ?x60 ?x75 ?x213)) (* ?x56 ?x60 ?x60 ?x75) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x178 ?x179)) ?x400 (* (/ 1.0 2.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x75 ?x213)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x60 (to_real a) (to_real a) ?x75)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x60 (to_real a) ?x65 ?x178 ?x179)) ?x390 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x60 (to_real a) ?x65 ?x75 ?x213)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x60 (to_real a) ?x65 ?x75)))))
 (let (($x371 (not (= ?x394 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x200 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x205 (= ?x200 0)))
 (let (($x146 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (let (($x560 (and $x136 $x146 $x205 (or $x371 (not (= (* ?x653 ?x137) 0.0))))))
 (let ((?x489 (+ ?x217 ?x180 (* 2.0 (* ?x75 (+ ?x60 (* (/ 1.0 2.0) ?x56)))) (* (- 1.0) (* ?x179 (+ (to_real a) ?x65))))))
 (let ((?x602 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x65 (+ (to_real a) ?x65) (+ ?x60 (* (/ 1.0 2.0) ?x56))))))
 (let ((?x585 (* (/ 1.0 4.0) (* ?x56 ?x56 (+ (to_real a) ?x65) (+ (to_real a) ?x65)))))
 (let ((?x235 (* (+ (* (- (/ 1.0 2.0)) (* ?x56 (+ ?x60 (* (/ 1.0 2.0) ?x56)))) ?x585 ?x602) ?x489)))
 (let ((?x278 (* 2.0 (* ?x75 ?x60))))
 (let ((?x469 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) ?x262 (* (- (/ 1.0 8.0)) (* ?x60 ?x56 ?x56 ?x65 (to_real a))))))
 (let (($x485 (= (* ?x469 (+ ?x217 ?x180 ?x278 (* (- 1.0) (* ?x179 (to_real a))))) 0.0)))
 (let (($x268 (or (not $x485) (not (= ?x235 0.0)))))
 (let ((?x506 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x543 (= ?x506 0)))
 (let ((?x346 (* d00 a)))
 (let (($x204 (= (+ (* 2 ?x103) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x346) 0)))
 (let (($x511 (and $x204 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x543 $x268)))
 (rewrite (= $x511 $x560))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x240 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x365 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x489 (+ ?x217 ?x180 ?x365 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x233 (* (/ 1.0 2.0) ?x56)))
 (let ((?x60 (to_real y)))
 (let ((?x122 (+ ?x60 ?x233)))
 (let ((?x65 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x252 (+ ?x62 ?x65)))
 (let ((?x607 (+ (* (- (/ 1.0 2.0)) (* ?x56 ?x122)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x252 ?x252)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x65 ?x252 ?x122)))))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x62 ?x62))))
 (let ((?x469 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) ?x262 (* (- (/ 1.0 8.0)) (* ?x60 ?x56 ?x56 ?x65 ?x62)))))
 (let ((?x479 (* ?x469 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x60)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x268 (or (not (= ?x479 0.0)) (not (= (* ?x607 ?x489) 0.0)))))
 (let ((?x506 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x543 (= ?x506 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x638 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x638 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x543 $x268)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x121 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x365 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x489 (+ ?x217 ?x180 ?x365 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x233 (* (/ 1.0 2.0) ?x56)))
 (let ((?x60 (to_real y)))
 (let ((?x122 (+ ?x60 ?x233)))
 (let ((?x65 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x252 (+ ?x62 ?x65)))
 (let ((?x607 (+ (* (- (/ 1.0 2.0)) (* ?x56 ?x122)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x252 ?x252)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x65 ?x252 ?x122)))))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x62 ?x62))))
 (let ((?x469 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) ?x262 (* (- (/ 1.0 8.0)) (* ?x60 ?x56 ?x56 ?x65 ?x62)))))
 (let ((?x479 (* ?x469 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x60)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x268 (or (not (= ?x479 0.0)) (not (= (* ?x607 ?x489) 0.0)))))
 (let ((?x506 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x543 (= ?x506 0)))
 (let ((?x346 (* d00 a)))
 (let ((?x173 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x346)))
 (let (($x511 (and (= ?x173 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x543 $x268)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x425 (and (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) ?x346)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x543 $x268)))
 (rewrite (= $x425 $x511)))))))))))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x71 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x60 (to_real y)))
 (let ((?x74 (+ ?x60 ?x58)))
 (let ((?x65 (to_real b)))
 (let ((?x66 (/ ?x65 ?x57)))
 (let ((?x80 (+ a b)))
 (let ((?x85 (to_real ?x80)))
 (let ((?x89 (- (+ (* (to_real (- 1)) ?x58 ?x74) (* ?x85 ?x85 ?x58 ?x58)) (* ?x85 ?x66 ?x58 ?x58 ?x74))))
 (let ((?x35 (* a00 d00)))
 (let ((?x78 (to_real ?x35)))
 (let ((?x79 (+ (to_real (* (- 2) b00 y00)) ?x78 (* ?x57 (to_real b00) ?x74))))
 (let ((?x64 (+ (* (to_real (- 1)) ?x58 ?x60) (* (to_real a) (to_real a) ?x58 ?x58))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x72 (= (* (to_real ?x39) (- ?x64 (* (to_real a) ?x66 ?x58 ?x58 ?x60))) ?x71)))
 (let (($x93 (or (not $x72) (not (= (* (- ?x79 (to_real (* ?x80 d00))) ?x89) ?x71)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x93)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x358 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x365 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x489 (+ ?x217 ?x180 ?x365 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x233 (* (/ 1.0 2.0) ?x56)))
 (let ((?x60 (to_real y)))
 (let ((?x122 (+ ?x60 ?x233)))
 (let ((?x65 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x252 (+ ?x62 ?x65)))
 (let ((?x607 (+ (* (- (/ 1.0 2.0)) (* ?x56 ?x122)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x252 ?x252)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x65 ?x252 ?x122)))))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x62 ?x62))))
 (let ((?x469 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) ?x262 (* (- (/ 1.0 8.0)) (* ?x60 ?x56 ?x56 ?x65 ?x62)))))
 (let ((?x479 (* ?x469 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x60)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x268 (or (not (= ?x479 0.0)) (not (= (* ?x607 ?x489) 0.0)))))
 (let ((?x506 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x543 (= ?x506 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x638 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x425 (and $x638 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x543 $x268)))
 (let ((?x71 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x74 (+ ?x60 ?x58)))
 (let ((?x66 (/ ?x65 ?x57)))
 (let ((?x80 (+ a b)))
 (let ((?x85 (to_real ?x80)))
 (let ((?x89 (- (+ (* (to_real (- 1)) ?x58 ?x74) (* ?x85 ?x85 ?x58 ?x58)) (* ?x85 ?x66 ?x58 ?x58 ?x74))))
 (let ((?x78 (to_real ?x35)))
 (let ((?x83 (- (+ (to_real (* (- 2) b00 y00)) ?x78 (* ?x57 ?x75 ?x74)) (to_real (* ?x80 d00)))))
 (let ((?x68 (- (+ (* (to_real (- 1)) ?x58 ?x60) (* ?x62 ?x62 ?x58 ?x58)) (* ?x62 ?x66 ?x58 ?x58 ?x60))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x93 (or (not (= (* (to_real ?x39) ?x68) ?x71)) (not (= (* ?x83 ?x89) ?x71)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x94 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x93)))
 (rewrite (= $x94 $x425))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x195 (mp (mp @x96 (quant-intro (proof-bind ?x358) (= $x95 $x240)) $x240) (rewrite (= $x240 $x240)) $x240)))
 (let ((@x567 (mp (mp @x195 (quant-intro (proof-bind ?x121) (= $x240 $x111)) $x111) (quant-intro (proof-bind ?x102) (= $x111 $x184)) $x184)))
 (let ((@x449 (mp (mp~ @x567 (sk (~ $x184 $x436)) $x436) (rewrite (= $x436 $x215)) $x215)))
 (let ((@x281 (mp (and-elim @x449 $x377) @x581 $x405)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x118)) @x281 $x118)))
 (let ((?x416 (+ ?x180 (* (- 1.0) (to_real ?x35)))))
 (let (($x209 (>= ?x416 0.0)))
 (let ((@x141 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x416 0.0)) $x209)) ((_ th-lemma arith) (= ?x416 0.0)) $x209)))
 (let (($x98 (>= ?x490 0)))
 (let (($x645 (= 0 ?x490)))
 (let ((@x463 (mp (and-elim @x449 $x428) (symm (commutativity (= $x645 $x428)) (= $x428 $x645)) $x645)))
 (let ((@x512 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x645) $x98)) @x463 $x98)))
 (let ((?x292 (+ ?x500 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x239 (<= ?x292 0.0)))
 (let ((@x547 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x292 0.0)) $x239)) ((_ th-lemma arith) (= ?x292 0.0)) $x239)))
 (let ((?x212 (+ ?x214 (* (- 1.0) (to_real ?x103)))))
 (let (($x290 (<= ?x212 0.0)))
 (let (($x447 (= ?x212 0.0)))
 (let ((@x552 ((_ th-lemma arith) $x447)))
 (let ((@x476 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x447) $x290)) @x552 $x290)))
 (let ((?x379 (+ ?x328 (* (- 1.0) (to_real (* d00 a!3))))))
 (let (($x528 (<= ?x379 0.0)))
 (let ((@x597 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x379 0.0)) $x528)) ((_ th-lemma arith) (= ?x379 0.0)) $x528)))
 (let ((@x348 ((_ th-lemma arith) @x597 @x476 @x547 @x512 @x141 @x274 (hypothesis (not $x619)) @x473 (unit-resolution @x605 @x207 $x652) false)))
 (let ((@x354 (lemma @x348 $x619)))
 (let (($x480 (<= ?x224 0.0)))
 (let ((@x557 (lemma (unit-resolution @x207 (hypothesis (not $x132)) false) $x132)))
 (let (($x196 (>= ?x212 0.0)))
 (let (($x158 (<= ?x419 0.0)))
 (let (($x493 (<= ?x129 0.0)))
 (let ((@x296 (hypothesis $x132)))
 (let ((@x378 ((_ th-lemma arith triangle-eq) (or (not $x132) $x493))))
 (let (($x133 (<= ?x527 0)))
 (let ((@x293 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x133)) @x281 $x133)))
 (let (($x656 (<= ?x490 0)))
 (let ((@x451 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x645) $x656)) @x463 $x656)))
 (let (($x138 (not $x118)))
 (let (($x343 (not $x133)))
 (let (($x221 (not $x656)))
 (let (($x238 (not $x493)))
 (let (($x237 (not $x652)))
 (let (($x236 (not $x98)))
 (let (($x442 (or $x236 $x237 $x238 $x480 $x221 (not $x130) (not $x158) $x343 (not $x290) $x138 (not $x196))))
 (let ((@x311 (unit-resolution ((_ th-lemma arith) $x442) @x451 @x512 @x293 @x274 (hypothesis (not $x480)) (unit-resolution @x378 @x296 $x493) (unit-resolution @x605 @x296 $x652) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x181) $x158)) @x603 $x158) @x473 @x476 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x447) $x196)) @x552 $x196) false)))
 (let ((@x355 (unit-resolution (lemma @x311 (or (not $x132) $x480)) @x557 $x480)))
 (let ((@x314 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x510 (not $x480) (not $x619))) @x355 @x354 $x510)))
 (let (($x508 (or (not $x510) $x337)))
 (let ((@x561 (unit-resolution ((_ th-lemma arith) $x508) (hypothesis $x481) (hypothesis $x510) false)))
 (let ((@x374 (unit-resolution (and-elim @x449 $x501) (unit-resolution (lemma @x561 $x508) @x314 $x337) $x211)))
 (let (($x549 (>= ?x234 0.0)))
 (let (($x486 (>= ?x598 0)))
 (let (($x123 (= 0 ?x598)))
 (let ((@x160 (mp (and-elim @x449 $x600) (symm (commutativity (= $x123 $x600)) (= $x600 $x123)) $x123)))
 (let ((@x171 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x123) $x486)) @x160 $x486)))
 (let (($x127 (<= ?x598 0)))
 (let ((@x161 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x123) $x127)) @x160 $x127)))
 (let (($x634 (not $x127)))
 (let (($x628 (not $x486)))
 (let (($x294 (not $x480)))
 (let (($x471 (not $x619)))
 (let ((@x271 (unit-resolution ((_ th-lemma arith) (or $x221 $x471 $x294 $x236 $x549 $x628 $x237 $x634 $x238)) @x451 @x512 @x161 @x171 (hypothesis (not $x549)) @x355 @x354 (unit-resolution @x378 @x557 $x493) (unit-resolution @x605 @x557 $x652) false)))
 (let ((@x360 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x226 $x423 (not $x549))) (lemma @x271 $x549) @x374 $x423)))
 (unit-resolution ((_ th-lemma arith) (or $x554 $x628 $x634 $x138 $x343)) @x293 @x274 @x161 @x171 @x360 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       32
 :arith-eq-adapter                42
 :arith-bound-propagations-cheap  22
 :arith-bound-propagations-lp     3
 :arith-conflicts                 46
 :arith-diseq                     24
 :arith-gcd-calls                 5
 :arith-grobner-calls             6
 :arith-grobner-conflicts         3
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 21
 :arith-lower                     52
 :arith-make-feasible             45
 :arith-max-columns               91
 :arith-max-rows                  27
 :arith-nla-explanations          147
 :arith-nla-lemmas                44
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              22
 :arith-upper                     46
 :conflicts                       8
 :decisions                       37
 :del-clause                      144
 :final-checks                    42
 :max-memory                      4.72
 :memory                          3.12
 :mk-bool-var                     150
 :mk-clause                       179
 :num-allocs                      2687360
 :num-checks                      1
 :propagations                    81
 :rlimit-count                    5649
 :time                            0.02
 :total-time                      0.03)
