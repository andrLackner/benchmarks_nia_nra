unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x433 (to_real y!0)))
 (let ((?x432 (to_real a!3)))
 (let ((?x418 (to_real d!1)))
 (let ((?x250 (to_real b!2)))
 (let ((?x73 (to_real b00)))
 (let ((?x487 (* (/ 1.0 8.0) (* ?x73 ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433 ?x433 ?x433))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x891 (* (/ 1.0 16.0) (* ?x173 ?x174 ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433 ?x433))))
 (let ((?x521 (* (- (/ 1.0 16.0)) (* ?x174 ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x432 ?x433 ?x433 ?x433))))
 (let ((?x208 (to_real y00)))
 (let ((?x875 (* (- (/ 1.0 8.0)) (* ?x73 ?x208 ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433 ?x433))))
 (let ((?x869 (+ (* (/ 1.0 4.0) (* ?x173 ?x174 ?x250 ?x250 ?x432 ?x432 ?x433 ?x433)) (* (- (/ 1.0 4.0)) (* ?x174 ?x250 ?x250 ?x432 ?x432 ?x432 ?x433 ?x433)) (* (- (/ 1.0 2.0)) (* ?x73 ?x208 ?x250 ?x250 ?x432 ?x432 ?x433 ?x433)) ?x875 (* (- (/ 1.0 8.0)) (* ?x73 ?x208 ?x250 ?x418 ?x418 ?x418 ?x432 ?x432)) (* (/ 1.0 2.0) (* ?x73 ?x250 ?x250 ?x432 ?x432 ?x433 ?x433 ?x433)) (* (- (/ 1.0 16.0)) (* ?x174 ?x250 ?x418 ?x418 ?x418 ?x432 ?x432 ?x432)) (* (/ 1.0 16.0) (* ?x173 ?x174 ?x250 ?x418 ?x418 ?x418 ?x432 ?x432)) ?x521 ?x891 (* (/ 1.0 8.0) (* ?x73 ?x250 ?x418 ?x418 ?x418 ?x432 ?x432 ?x433)) ?x487)))
 (let (($x995 (>= ?x869 0.0)))
 (let (($x813 (not $x995)))
 (let (($x938 (= 0.0 ?x869)))
 (let (($x473 (not $x938)))
 (let ((@x681 (symm (commutativity (= $x938 (= ?x869 0.0))) (= (= ?x869 0.0) $x938))))
 (let (($x973 (= ?x869 0.0)))
 (let (($x791 (not $x973)))
 (let ((?x591 (* ?x73 ?x418)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x825 (+ ?x175 ?x212 (* (- 1.0) (* ?x174 ?x432)) (* (- 1.0) (* ?x174 ?x250)) ?x591 (* 2.0 (* ?x73 ?x433)))))
 (let ((?x917 (* (/ 1.0 16.0) (* ?x250 ?x250 ?x250 ?x418 ?x418 ?x418))))
 (let ((?x800 (* (/ 1.0 8.0) (* ?x250 ?x250 ?x418 ?x418 ?x418 ?x432))))
 (let ((?x270 (* (/ 1.0 16.0) (* ?x250 ?x250 ?x250 ?x250 ?x418 ?x418 ?x433 ?x433 ?x433))))
 (let ((?x437 (* (/ 3.0 32.0) (* ?x250 ?x250 ?x250 ?x250 ?x418 ?x418 ?x418 ?x433 ?x433))))
 (let ((?x423 (* (/ 1.0 16.0) (* ?x250 ?x250 ?x250 ?x250 ?x418 ?x418))))
 (let ((?x382 (* (/ 1.0 16.0) (* ?x250 ?x250 ?x418 ?x418 ?x432 ?x432))))
 (let ((?x427 (* (/ 1.0 8.0) (* ?x250 ?x250 ?x250 ?x418 ?x418 ?x432))))
 (let ((?x425 (* (/ 1.0 8.0) (* ?x250 ?x250 ?x250 ?x418 ?x418 ?x432 ?x433 ?x433 ?x433))))
 (let ((?x421 (* (/ 3.0 32.0) (* ?x250 ?x250 ?x418 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433))))
 (let ((?x419 (* (/ 3.0 16.0) (* ?x250 ?x250 ?x250 ?x418 ?x418 ?x418 ?x432 ?x433 ?x433))))
 (let ((?x345 (* (/ 1.0 4.0) (* ?x250 ?x250 ?x418 ?x432 ?x432 ?x433))))
 (let ((?x712 (* (/ 1.0 2.0) (* ?x250 ?x250 ?x250 ?x418 ?x432 ?x433))))
 (let ((?x479 (* (/ 3.0 64.0) (* ?x250 ?x250 ?x250 ?x250 ?x418 ?x418 ?x418 ?x418 ?x433))))
 (let ((?x241 (* (/ 1.0 64.0) (* ?x250 ?x250 ?x250 ?x418 ?x418 ?x418 ?x418 ?x418 ?x432))))
 (let ((?x354 (* (/ 1.0 2.0) (* ?x250 ?x250 ?x250 ?x432 ?x433 ?x433))))
 (let ((?x373 (* (/ 1.0 4.0) (* ?x250 ?x250 ?x250 ?x250 ?x418 ?x433))))
 (let ((?x343 (* (/ 3.0 64.0) (* ?x250 ?x250 ?x418 ?x418 ?x418 ?x418 ?x432 ?x432 ?x433))))
 (let ((?x412 (* (/ 1.0 4.0) (* ?x250 ?x250 ?x250 ?x250 ?x433 ?x433))))
 (let ((?x334 (* (/ 3.0 32.0) (* ?x250 ?x250 ?x250 ?x418 ?x418 ?x418 ?x418 ?x432 ?x433))))
 (let ((?x286 (* (/ 1.0 16.0) (* ?x250 ?x418 ?x418 ?x418 ?x432 ?x432))))
 (let ((?x267 (* (/ 1.0 16.0) (* ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433 ?x433))))
 (let ((?x263 (* (/ 1.0 4.0) (* ?x250 ?x250 ?x432 ?x432 ?x433 ?x433))))
 (let ((?x363 (* (/ 1.0 128.0) (* ?x250 ?x250 ?x250 ?x250 ?x418 ?x418 ?x418 ?x418 ?x418))))
 (let ((?x372 (* (/ 1.0 128.0) (* ?x250 ?x250 ?x418 ?x418 ?x418 ?x418 ?x418 ?x432 ?x432))))
 (let ((?x881 (+ ?x372 ?x363 ?x263 ?x267 ?x286 ?x334 ?x412 ?x343 ?x373 ?x354 ?x241 ?x479 ?x712 ?x345 ?x419 ?x421 ?x425 ?x427 ?x382 ?x423 ?x437 ?x270 ?x800 ?x917)))
 (let ((?x896 (* ?x881 ?x825)))
 (let (($x657 (= ?x896 0.0)))
 (let (($x996 (= 0.0 ?x896)))
 (let (($x998 (>= ?x896 0.0)))
 (let ((?x709 (+ ?x427 ?x382 ?x423 ?x437 ?x270 ?x800 ?x917 ?x372 ?x363 ?x263 ?x267 ?x286 ?x334 ?x412 ?x343 ?x373 ?x354 ?x241 ?x479 ?x712 ?x345 ?x419 ?x421 ?x425)))
 (let (($x708 (<= ?x709 0.0)))
 (let (($x608 (not $x998)))
 (let ((@x600 (hypothesis $x608)))
 (let (($x946 (>= ?x825 0.0)))
 (let ((?x330 (+ ?x175 (* (- 1.0) (to_real (* a00 d00))))))
 (let (($x987 (>= ?x330 0.0)))
 (let (($x670 (= ?x330 0.0)))
 (let ((@x484 (lemma (unit-resolution ((_ th-lemma arith) $x670) (hypothesis (not $x670)) false) $x670)))
 (let ((?x959 (+ (* (- 1.0) (to_real (* b00 d!1))) ?x591)))
 (let (($x809 (>= ?x959 0.0)))
 (let (($x976 (= 0.0 ?x959)))
 (let ((@x762 (symm (commutativity (= $x976 (= ?x959 0.0))) (= (= ?x959 0.0) $x976))))
 (let ((@x803 (mp ((_ th-lemma arith) (= ?x959 0.0)) @x762 $x976)))
 (let ((?x309 (* ?x174 ?x250)))
 (let ((?x984 (+ ?x309 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x870 (<= ?x984 0.0)))
 (let (($x986 (= 0.0 ?x984)))
 (let ((@x99 (symm (commutativity (= $x986 (= ?x984 0.0))) (= (= ?x984 0.0) $x986))))
 (let ((@x893 (mp ((_ th-lemma arith) (= ?x984 0.0)) @x99 $x986)))
 (let ((?x505 (+ ?x209 (* (- 1.0) (to_real (* b00 y00))))))
 (let (($x583 (<= ?x505 0.0)))
 (let (($x812 (= 0.0 ?x505)))
 (let ((@x854 (symm (commutativity (= $x812 (= ?x505 0.0))) (= (= ?x505 0.0) $x812))))
 (let ((@x849 (mp ((_ th-lemma arith) (= ?x505 0.0)) @x854 $x812)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let ((?x35 (* a00 d00)))
 (let ((?x191 (+ ?x35 ?x101 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x944 (>= ?x191 0)))
 (let (($x771 (= 0 ?x191)))
 (let ((@x792 (symm (commutativity (= $x771 (= ?x191 0))) (= (= ?x191 0) $x771))))
 (let (($x939 (= ?x191 0)))
 (let (($x738 (or $x791 (not $x657))))
 (let ((?x637 (+ (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)) (* a00 d!1) (* (- 1) (* d!1 a!3)))))
 (let (($x642 (= ?x637 0)))
 (let ((?x182 (* b00 d!1)))
 (let ((?x982 (+ ?x182 (* (- 1) (* d00 b!2)))))
 (let (($x983 (= ?x982 0)))
 (let (($x818 (and $x939 $x983 $x642 $x738)))
 (let ((?x920 (+ ?x175 (* (- 1.0) (* ?x432 ?x174)) ?x212 (* (- 1.0) (* ?x250 ?x174)) (* 2.0 (* ?x433 ?x73)) (* ?x418 ?x73))))
 (let ((?x710 (+ ?x267 ?x263 ?x286 ?x270 ?x363 ?x241 ?x372 ?x479 ?x334 ?x343 ?x437 ?x419 ?x421 ?x425 ?x412 ?x423 ?x427 ?x382 ?x373 ?x712 ?x345 ?x354 ?x917 ?x800)))
 (let ((?x125 (* (/ 1.0 8.0) (* ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433 ?x433 ?x433 ?x73))))
 (let ((?x597 (* (- (/ 1.0 8.0)) (* ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433 ?x433 ?x73 ?x208))))
 (let ((?x500 (* (- (/ 1.0 16.0)) (* ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x432 ?x433 ?x433 ?x433 ?x174))))
 (let ((?x460 (* (/ 1.0 16.0) (* ?x250 ?x250 ?x418 ?x418 ?x432 ?x432 ?x433 ?x433 ?x433 ?x173 ?x174))))
 (let ((?x233 (+ ?x460 ?x500 ?x597 ?x125 (* (/ 1.0 4.0) (* ?x250 ?x250 ?x432 ?x432 ?x433 ?x433 ?x173 ?x174)) (* (- (/ 1.0 4.0)) (* ?x250 ?x250 ?x432 ?x432 ?x432 ?x433 ?x433 ?x174)) (* (- (/ 1.0 2.0)) (* ?x250 ?x250 ?x432 ?x432 ?x433 ?x433 ?x73 ?x208)) (* (/ 1.0 2.0) (* ?x250 ?x250 ?x432 ?x432 ?x433 ?x433 ?x433 ?x73)) (* (/ 1.0 16.0) (* ?x250 ?x418 ?x418 ?x418 ?x432 ?x432 ?x173 ?x174)) (* (- (/ 1.0 16.0)) (* ?x250 ?x418 ?x418 ?x418 ?x432 ?x432 ?x432 ?x174)) (* (- (/ 1.0 8.0)) (* ?x250 ?x418 ?x418 ?x418 ?x432 ?x432 ?x73 ?x208)) (* (/ 1.0 8.0) (* ?x250 ?x418 ?x418 ?x418 ?x432 ?x432 ?x433 ?x73)))))
 (let ((?x435 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x692 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x101 (* 2 (* y!0 b00))) 0)))
 (let (($x478 (and $x692 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x435 0) (or (not (= ?x233 0.0)) (not (= (* ?x710 ?x920) 0.0))))))
 (let (($x534 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x417 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x193 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x1012 (+ ?x175 ?x193 ?x212 ?x417 (* 2.0 (* (to_real y) ?x73)) (* (to_real d) ?x73))))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real y)))
 (let ((?x999 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x62)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x62)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)))))
 (let ((?x319 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x308 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x73 ?x208))))
 (let ((?x297 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x62 ?x174))))
 (let ((?x285 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x173 ?x174))))
 (let ((?x403 (+ ?x285 ?x297 ?x308 ?x319 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62 ?x173 ?x174)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x62 ?x62 ?x174)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62 ?x73 ?x208)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62 ?x62 ?x73)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x173 ?x174)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x174)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x73 ?x208)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x73)))))
 (let (($x154 (not (= ?x403 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x195 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x200 (= ?x195 0)))
 (let (($x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let ((?x35 (* a00 d00)))
 (let (($x133 (= (+ ?x35 (* (- 1) (* a d00)) ?x101 (* 2 (* y b00))) 0)))
 (and $x133 $x139 $x200 (or $x154 (not (= (* ?x999 ?x1012) 0.0))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x834 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x963 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x310 (+ ?x212 ?x175 ?x963 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x832 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x231 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x969 (+ ?x62 ?x231)))
 (let ((?x120 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x832 ?x832 ?x969 ?x969 ?x969)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x832 ?x832 ?x969 ?x969)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x832 ?x832)))))
 (let ((?x967 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x61 ?x61)))))
 (let ((?x961 (* ?x967 (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x62)) (* (- 1.0) (* ?x174 ?x61))))))
 (let (($x662 (or (not (= ?x961 0.0)) (not (= (* ?x120 ?x310) 0.0)))))
 (let ((?x405 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x814 (= ?x405 0)))
 (let ((?x718 (* d00 a)))
 (let ((?x123 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x718)))
 (and (= ?x123 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x814 $x662))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x788 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x417 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x193 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x1012 (+ ?x175 ?x193 ?x212 ?x417 (* 2.0 (* (to_real y) ?x73)) (* (to_real d) ?x73))))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real y)))
 (let ((?x999 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x62)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x62)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)))))
 (let ((?x319 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x308 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x73 ?x208))))
 (let ((?x297 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x62 ?x174))))
 (let ((?x285 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x173 ?x174))))
 (let ((?x403 (+ ?x285 ?x297 ?x308 ?x319 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62 ?x173 ?x174)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x62 ?x62 ?x174)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62 ?x73 ?x208)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x61 ?x61 ?x62 ?x62 ?x62 ?x73)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x173 ?x174)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x174)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x73 ?x208)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x73)))))
 (let (($x154 (not (= ?x403 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x195 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x200 (= ?x195 0)))
 (let (($x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let ((?x35 (* a00 d00)))
 (let (($x133 (= (+ ?x35 (* (- 1) (* a d00)) ?x101 (* 2 (* y b00))) 0)))
 (let (($x1038 (and $x133 $x139 $x200 (or $x154 (not (= (* ?x999 ?x1012) 0.0))))))
 (let ((?x310 (+ ?x212 ?x175 (* 2.0 (* ?x73 (+ ?x62 (* (/ 1.0 2.0) ?x59)))) (* (- 1.0) (* ?x174 (+ ?x61 ?x56))))))
 (let ((?x231 (* (/ 1.0 2.0) ?x59)))
 (let ((?x969 (+ ?x62 ?x231)))
 (let ((?x832 (+ ?x61 ?x56)))
 (let ((?x120 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x832 ?x832 ?x969 ?x969 ?x969)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x832 ?x832 ?x969 ?x969)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x832 ?x832)))))
 (let ((?x967 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x61 ?x61)))))
 (let ((?x961 (* ?x967 (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x62)) (* (- 1.0) (* ?x174 ?x61))))))
 (let (($x662 (or (not (= ?x961 0.0)) (not (= (* ?x120 ?x310) 0.0)))))
 (let ((?x405 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x814 (= ?x405 0)))
 (let ((?x718 (* d00 a)))
 (let (($x248 (= (+ (* 2 ?x100) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x718) 0)))
 (let (($x254 (and $x248 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x814 $x662)))
 (rewrite (= $x254 $x1038))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x863 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x963 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x310 (+ ?x212 ?x175 ?x963 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x832 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x231 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x969 (+ ?x62 ?x231)))
 (let ((?x120 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x832 ?x832 ?x969 ?x969 ?x969)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x832 ?x832 ?x969 ?x969)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x832 ?x832)))))
 (let ((?x967 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x61 ?x61)))))
 (let ((?x961 (* ?x967 (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x62)) (* (- 1.0) (* ?x174 ?x61))))))
 (let (($x662 (or (not (= ?x961 0.0)) (not (= (* ?x120 ?x310) 0.0)))))
 (let ((?x405 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x814 (= ?x405 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let (($x575 (= (+ ?x101 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x575 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x814 $x662))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x108 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x963 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x310 (+ ?x212 ?x175 ?x963 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x832 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x231 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x969 (+ ?x62 ?x231)))
 (let ((?x120 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x832 ?x832 ?x969 ?x969 ?x969)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x832 ?x832 ?x969 ?x969)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x832 ?x832)))))
 (let ((?x967 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x61 ?x61)))))
 (let ((?x961 (* ?x967 (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x62)) (* (- 1.0) (* ?x174 ?x61))))))
 (let (($x662 (or (not (= ?x961 0.0)) (not (= (* ?x120 ?x310) 0.0)))))
 (let ((?x405 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x814 (= ?x405 0)))
 (let ((?x718 (* d00 a)))
 (let ((?x123 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x718)))
 (let (($x254 (and (= ?x123 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x814 $x662)))
 (let ((?x35 (* a00 d00)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let (($x323 (and (= (+ ?x101 ?x35 (* 2 (* b00 y)) (* (- 1) ?x718)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x814 $x662)))
 (rewrite (= $x323 $x254))))))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x78 (+ a b)))
 (let ((?x82 (to_real ?x78)))
 (let ((?x62 (to_real y)))
 (let ((?x72 (+ ?x62 ?x60)))
 (let ((?x86 (+ (* ?x82 ?x82 ?x58 ?x58 ?x60 ?x60 ?x72 ?x72 ?x72) (* ?x82 ?x82 ?x58 ?x58 ?x72 ?x72) (* ?x82 ?x82 ?x58 ?x60 ?x60 ?x60))))
 (let ((?x35 (* a00 d00)))
 (let ((?x76 (to_real ?x35)))
 (let ((?x77 (+ (to_real (* (- 2) b00 y00)) ?x76 (* ?x57 (to_real b00) ?x72))))
 (let ((?x66 (+ (* (to_real a) (to_real a) ?x58 ?x58 ?x60 ?x60 ?x62 ?x62 ?x62) (* (to_real a) (to_real a) ?x58 ?x58 ?x62 ?x62) (* (to_real a) (to_real a) ?x58 ?x60 ?x60 ?x60))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x90 (or (not (= (* (to_real ?x39) ?x66) ?x69)) (not (= (* (- ?x77 (to_real (* ?x78 d00))) ?x86) ?x69)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x90))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x962 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x963 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x310 (+ ?x212 ?x175 ?x963 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x832 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x231 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x969 (+ ?x62 ?x231)))
 (let ((?x120 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x832 ?x832 ?x969 ?x969 ?x969)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x832 ?x832 ?x969 ?x969)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x832 ?x832)))))
 (let ((?x967 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x61 ?x61)))))
 (let ((?x961 (* ?x967 (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x62)) (* (- 1.0) (* ?x174 ?x61))))))
 (let (($x662 (or (not (= ?x961 0.0)) (not (= (* ?x120 ?x310) 0.0)))))
 (let ((?x405 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x814 (= ?x405 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x100 (* b00 y00)))
 (let ((?x101 (* (- 2) ?x100)))
 (let (($x575 (= (+ ?x101 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x323 (and $x575 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x814 $x662)))
 (let ((?x69 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x78 (+ a b)))
 (let ((?x82 (to_real ?x78)))
 (let ((?x72 (+ ?x62 ?x60)))
 (let ((?x86 (+ (* ?x82 ?x82 ?x58 ?x58 ?x60 ?x60 ?x72 ?x72 ?x72) (* ?x82 ?x82 ?x58 ?x58 ?x72 ?x72) (* ?x82 ?x82 ?x58 ?x60 ?x60 ?x60))))
 (let ((?x76 (to_real ?x35)))
 (let ((?x81 (- (+ (to_real (* (- 2) b00 y00)) ?x76 (* ?x57 ?x73 ?x72)) (to_real (* ?x78 d00)))))
 (let ((?x66 (+ (* ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x62 ?x62 ?x62) (* ?x61 ?x61 ?x58 ?x58 ?x62 ?x62) (* ?x61 ?x61 ?x58 ?x60 ?x60 ?x60))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x90 (or (not (= (* (to_real ?x39) ?x66) ?x69)) (not (= (* ?x81 ?x86) ?x69)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x91 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x90)))
 (rewrite (= $x91 $x323)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x196 (mp (mp @x93 (quant-intro (proof-bind ?x962) (= $x92 $x863)) $x863) (rewrite (= $x863 $x863)) $x863)))
 (let ((@x132 (mp (mp @x196 (quant-intro (proof-bind ?x108) (= $x863 $x834)) $x834) (quant-intro (proof-bind ?x788) (= $x834 $x534)) $x534)))
 (let ((@x699 (mp (mp~ @x132 (sk (~ $x534 $x478)) $x478) (rewrite (= $x478 $x818)) $x818)))
 (let ((@x871 (mp (and-elim @x699 $x939) @x792 $x771)))
 (let ((?x664 (* ?x73 ?x433)))
 (let ((?x210 (+ (* (- 1.0) (to_real (* b00 y!0))) ?x664)))
 (let (($x650 (>= ?x210 0.0)))
 (let (($x707 (= ?x210 0.0)))
 (let ((@x131 ((_ th-lemma arith) $x707)))
 (let ((?x299 (* ?x174 ?x432)))
 (let ((?x663 (+ ?x299 (* (- 1.0) (to_real (* d00 a!3))))))
 (let (($x652 (<= ?x663 0.0)))
 (let (($x524 (= 0.0 ?x663)))
 (let ((@x872 (symm (commutativity (= $x524 (= ?x663 0.0))) (= (= ?x663 0.0) $x524))))
 (let ((@x878 (mp ((_ th-lemma arith) (= ?x663 0.0)) @x872 $x524)))
 (let (($x952 (>= ?x982 0)))
 (let (($x936 (= 0 ?x982)))
 (let ((@x836 (mp (and-elim @x699 $x983) (symm (commutativity (= $x936 $x983)) (= $x983 $x936)) $x936)))
 (let ((@x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x936) $x952)) @x836 $x952)))
 (let ((@x266 ((_ th-lemma arith) @x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x524) $x652)) @x878 $x652) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x707) $x650)) @x131 $x650) (hypothesis (not $x946)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x771) $x944)) @x871 $x944) (hypothesis $x987) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x812) $x583)) @x849 $x583) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x986) $x870)) @x893 $x870) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x976) $x809)) @x803 $x809) false)))
 (let ((@x105 (unit-resolution (lemma @x266 (or (not $x987) $x946)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x670) $x987)) @x484 $x987) $x946)))
 (let ((@x607 (unit-resolution ((_ th-lemma arith) (or $x708 $x998 (not $x946))) @x600 @x105 (hypothesis (not $x708)) false)))
 (let (($x781 (<= ?x825 0.0)))
 (let (($x977 (<= ?x959 0.0)))
 (let (($x947 (<= ?x210 0.0)))
 (let (($x953 (<= ?x982 0)))
 (let ((@x725 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x936) $x953)) @x836 $x953)))
 (let (($x722 (>= ?x505 0.0)))
 (let (($x672 (<= ?x330 0.0)))
 (let ((@x850 ((_ th-lemma arith) $x670)))
 (let (($x943 (<= ?x191 0)))
 (let (($x841 (>= ?x663 0.0)))
 (let (($x958 (>= ?x984 0.0)))
 (let ((@x255 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x986) $x958)) @x893 $x958) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x524) $x841)) @x878 $x841) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x771) $x943)) @x871 $x943) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x670) $x672)) @x850 $x672) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x812) $x722)) @x849 $x722) @x725 (hypothesis (not $x781)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x707) $x947)) @x131 $x947) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x976) $x977)) @x803 $x977) false)))
 (let ((@x900 (lemma @x255 $x781)))
 (let ((@x627 (unit-resolution ((_ th-lemma arith) (or (not $x708) (not $x946) $x998 (not $x781))) @x600 @x900 @x105 (unit-resolution (lemma @x607 (or $x708 $x998)) @x600 $x708) false)))
 (let (($x997 (<= ?x896 0.0)))
 (let (($x502 (>= ?x709 0.0)))
 (let (($x527 (not $x997)))
 (let ((@x536 (hypothesis $x527)))
 (let ((@x548 (unit-resolution ((_ th-lemma arith) (or $x502 $x997 (not $x946))) @x536 @x105 (hypothesis (not $x502)) false)))
 (let ((@x455 (unit-resolution ((_ th-lemma arith) (or (not $x502) (not $x946) $x997 (not $x781))) @x536 @x900 @x105 (unit-resolution (lemma @x548 (or $x502 $x997)) @x536 $x502) false)))
 (let ((@x824 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x996 $x527 $x608)) (lemma @x455 $x997) (or $x996 $x608))))
 (let ((@x666 (mp (unit-resolution @x824 (lemma @x627 $x998) $x996) (commutativity (= $x996 $x657)) $x657)))
 (let ((@x260 (mp (unit-resolution (and-elim @x699 $x738) @x666 $x791) (monotonicity @x681 (= $x791 $x473)) $x473)))
 (let (($x780 (<= ?x869 0.0)))
 (let (($x942 (>= ?x637 0)))
 (let (($x766 (= 0 ?x637)))
 (let ((@x557 (mp (and-elim @x699 $x642) (symm (commutativity (= $x766 $x642)) (= $x642 $x766)) $x766)))
 (let ((@x568 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x766) $x942)) @x557 $x942)))
 (let (($x950 (<= ?x637 0)))
 (let ((@x559 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x766) $x950)) @x557 $x950)))
 (let ((@x566 (unit-resolution ((_ th-lemma arith) (or $x780 (not $x952) (not $x953) (not $x942) (not $x950))) @x725 @x169 @x559 @x568 (hypothesis (not $x780)) false)))
 (let ((@x380 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x938 (not $x780) $x813)) (lemma @x566 $x780) (or $x938 $x813))))
 (unit-resolution ((_ th-lemma arith) (or $x995 (not $x942) (not $x950) (not $x952) (not $x953))) @x725 @x169 @x559 @x568 (unit-resolution @x380 @x260 $x813) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       70
 :arith-eq-adapter                69
 :arith-bound-propagations-cheap  39
 :arith-bound-propagations-lp     9
 :arith-conflicts                 105
 :arith-diseq                     60
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 5
 :arith-grobner-calls             8
 :arith-grobner-conflicts         2
 :arith-horner-calls              8
 :arith-horner-cross-nested-forms 18
 :arith-lower                     85
 :arith-make-feasible             91
 :arith-max-columns               106
 :arith-max-rows                  27
 :arith-nla-explanations          138
 :arith-nla-lemmas                103
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              39
 :arith-upper                     81
 :conflicts                       11
 :decisions                       116
 :del-clause                      200
 :final-checks                    56
 :max-memory                      6.57
 :memory                          3.18
 :minimized-lits                  2
 :mk-bool-var                     323
 :mk-clause                       284
 :num-allocs                      36362354
 :num-checks                      1
 :propagations                    131
 :rlimit-count                    8649
 :time                            0.07
 :total-time                      0.08)
