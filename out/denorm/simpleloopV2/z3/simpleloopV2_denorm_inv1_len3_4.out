unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x591 (* (- 1) y!0)))
 (let ((?x427 (* (- 1) x!1)))
 (let ((?x746 (+ y00 x00 ?x427 ?x591)))
 (let (($x420 (>= ?x746 0)))
 (let (($x748 (= ?x746 0)))
 (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x549 (+ ?x66 ?x73 x!1 y!0)))
 (let ((?x608 (* x!1 x!1)))
 (let ((?x82 (* 4 ?x608)))
 (let ((?x598 (* x!1 y!0 y!0 y!0)))
 (let ((?x590 (* (- 2) ?x598)))
 (let ((?x597 (* x!1 y!0)))
 (let ((?x594 (* (- 9) ?x597)))
 (let ((?x606 (* (- 6) (* x!1 x!1 y!0))))
 (let ((?x588 (* x!1 x!1 y!0 y!0)))
 (let ((?x589 (* 3 ?x588)))
 (let ((?x571 (* (- 1) (* x!1 x!1 y!0 y!0 y!0))))
 (let ((?x610 (* 6 (* x!1 y!0 y!0))))
 (let ((?x458 (* (- 1) (* x!1 x!1 x!1 y!0))))
 (let ((?x455 (* x!1 x!1 x!1)))
 (let ((?x72 (* 5 x!1)))
 (let ((?x273 (* (+ 1 ?x72 ?x455 ?x458 ?x610 ?x571 ?x589 ?x606 ?x594 ?x590 ?x591 ?x82) ?x549)))
 (let (($x371 (= ?x273 0)))
 (let (($x196 (not $x371)))
 (let ((?x457 (* 2 ?x608)))
 (let ((?x582 (* 2 ?x598)))
 (let ((?x90 (* 3 ?x597)))
 (let ((?x426 (* (- 3) ?x588)))
 (let ((?x605 (* (- 1) ?x455)))
 (let ((?x521 (* (+ 1 ?x427 ?x605 ?x458 ?x610 ?x571 ?x426 ?x90 ?x582 y!0 ?x457) ?x549)))
 (let (($x222 (= ?x521 0)))
 (let (($x262 (or (not $x222) $x196)))
 (let (($x379 (and $x748 $x262)))
 (let ((?x453 (+ x!1 y!0 ?x66 ?x73)))
 (let ((?x544 (* (+ 1 ?x72 ?x591 ?x589 ?x590 ?x571 ?x594 ?x610 ?x606 ?x458 ?x82 ?x455) ?x453)))
 (let ((?x593 (* (+ 1 ?x427 y!0 ?x426 ?x582 ?x571 ?x90 ?x610 ?x458 ?x457 ?x605) ?x453)))
 (let (($x546 (and (= ?x453 0) (or (not (= ?x593 0)) (not (= ?x544 0))))))
 (let (($x602 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x323 (* x x x)))
 (let ((?x315 (* x x)))
 (let ((?x887 (* 4 ?x315)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x303 (* x x y)))
 (let ((?x886 (* (- 6) ?x303)))
 (let ((?x243 (* x y y)))
 (let ((?x404 (* 6 ?x243)))
 (let ((?x234 (* x y)))
 (let ((?x885 (* (- 9) ?x234)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x217 (* x y y y)))
 (let ((?x202 (* (- 2) ?x217)))
 (let ((?x157 (* x x y y)))
 (let ((?x253 (* 3 ?x157)))
 (let ((?x231 (* (- 1) y)))
 (let ((?x883 (* 5 x)))
 (let ((?x414 (* (+ 1 ?x883 ?x231 ?x253 ?x202 ?x221 ?x885 ?x404 ?x886 ?x368 ?x887 ?x323) ?x87)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x630 (+ 1 (* (- 1) x) y (* (- 3) ?x157) (* 2 ?x217) ?x221 (* 3 ?x234) ?x404 ?x368 (* 2 ?x315) ?x370)))
 (let (($x636 (not (= (* ?x630 ?x87) 0))))
 (let (($x92 (= ?x87 0)))
 (and $x92 (or $x636 (not (= ?x414 0))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x680 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x477 (* (- 1) (* y (- 1)))))
 (let ((?x323 (* x x x)))
 (let ((?x315 (* x x)))
 (let ((?x887 (* 4 ?x315)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x303 (* x x y)))
 (let ((?x886 (* (- 6) ?x303)))
 (let ((?x243 (* x y y)))
 (let ((?x404 (* 6 ?x243)))
 (let ((?x234 (* x y)))
 (let ((?x885 (* (- 9) ?x234)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x217 (* x y y y)))
 (let ((?x202 (* (- 2) ?x217)))
 (let ((?x157 (* x x y y)))
 (let ((?x253 (* 3 ?x157)))
 (let ((?x883 (* 5 x)))
 (let ((?x888 (+ 1 ?x883 (* (- 2) y) ?x253 ?x202 ?x221 ?x885 ?x404 ?x886 ?x368 ?x887 ?x323 ?x477)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x630 (+ 1 (* (- 1) x) y (* (- 3) ?x157) (* 2 ?x217) ?x221 (* 3 ?x234) ?x404 ?x368 (* 2 ?x315) ?x370)))
 (let (($x636 (not (= (* ?x630 ?x87) 0))))
 (let (($x92 (= ?x87 0)))
 (and $x92 (or $x636 (not (= (* ?x888 ?x87) 0))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x601 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x323 (* x x x)))
 (let ((?x315 (* x x)))
 (let ((?x887 (* 4 ?x315)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x303 (* x x y)))
 (let ((?x886 (* (- 6) ?x303)))
 (let ((?x243 (* x y y)))
 (let ((?x404 (* 6 ?x243)))
 (let ((?x234 (* x y)))
 (let ((?x885 (* (- 9) ?x234)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x217 (* x y y y)))
 (let ((?x202 (* (- 2) ?x217)))
 (let ((?x157 (* x x y y)))
 (let ((?x253 (* 3 ?x157)))
 (let ((?x231 (* (- 1) y)))
 (let ((?x883 (* 5 x)))
 (let ((?x414 (* (+ 1 ?x883 ?x231 ?x253 ?x202 ?x221 ?x885 ?x404 ?x886 ?x368 ?x887 ?x323) ?x87)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x630 (+ 1 (* (- 1) x) y (* (- 3) ?x157) (* 2 ?x217) ?x221 (* 3 ?x234) ?x404 ?x368 (* 2 ?x315) ?x370)))
 (let (($x636 (not (= (* ?x630 ?x87) 0))))
 (let (($x92 (= ?x87 0)))
 (let (($x417 (and $x92 (or $x636 (not (= ?x414 0))))))
 (let ((?x477 (* (- 1) (* y (- 1)))))
 (let ((?x888 (+ 1 ?x883 (* (- 2) y) ?x253 ?x202 ?x221 ?x885 ?x404 ?x886 ?x368 ?x887 ?x323 ?x477)))
 (let (($x914 (and $x92 (or $x636 (not (= (* ?x888 ?x87) 0))))))
 (rewrite (= $x914 $x417))))))))))))))))))))))))))))))))
 ))
 (let (($x319 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x318 (+ x ?x66 ?x73 y)))
 (let ((?x185 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x170 (+ 1 x)))
 (let ((?x229 (+ (- 1) y)))
 (let ((?x207 (* (+ (* (- 1) (* ?x229 ?x229 ?x229 ?x170 ?x170)) ?x185 (* ?x229 ?x229 ?x229)) ?x318)))
 (let ((?x230 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x345 (+ 1 y)))
 (let ((?x313 (+ (- 1) x)))
 (let ((?x164 (* (+ (* (- 1) (* ?x313 ?x313 ?x345 ?x345 ?x345)) ?x230 (* ?x345 ?x345 ?x345)) ?x318)))
 (and (= ?x318 0) (or (not (= ?x164 0)) (not (= ?x207 0))))))))))))))) :qid k!27))
 ))
 (let ((?x682 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x477 (* (- 1) (* y (- 1)))))
 (let ((?x323 (* x x x)))
 (let ((?x315 (* x x)))
 (let ((?x887 (* 4 ?x315)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x303 (* x x y)))
 (let ((?x886 (* (- 6) ?x303)))
 (let ((?x243 (* x y y)))
 (let ((?x404 (* 6 ?x243)))
 (let ((?x234 (* x y)))
 (let ((?x885 (* (- 9) ?x234)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x217 (* x y y y)))
 (let ((?x202 (* (- 2) ?x217)))
 (let ((?x157 (* x x y y)))
 (let ((?x253 (* 3 ?x157)))
 (let ((?x883 (* 5 x)))
 (let ((?x888 (+ 1 ?x883 (* (- 2) y) ?x253 ?x202 ?x221 ?x885 ?x404 ?x886 ?x368 ?x887 ?x323 ?x477)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x630 (+ 1 (* (- 1) x) y (* (- 3) ?x157) (* 2 ?x217) ?x221 (* 3 ?x234) ?x404 ?x368 (* 2 ?x315) ?x370)))
 (let (($x636 (not (= (* ?x630 ?x87) 0))))
 (let (($x92 (= ?x87 0)))
 (let (($x914 (and $x92 (or $x636 (not (= (* ?x888 ?x87) 0))))))
 (let ((?x318 (+ x ?x66 ?x73 y)))
 (let ((?x185 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x170 (+ 1 x)))
 (let ((?x229 (+ (- 1) y)))
 (let ((?x207 (* (+ (* (- 1) (* ?x229 ?x229 ?x229 ?x170 ?x170)) ?x185 (* ?x229 ?x229 ?x229)) ?x318)))
 (let ((?x230 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x345 (+ 1 y)))
 (let ((?x313 (+ (- 1) x)))
 (let ((?x164 (* (+ (* (- 1) (* ?x313 ?x313 ?x345 ?x345 ?x345)) ?x230 (* ?x345 ?x345 ?x345)) ?x318)))
 (let (($x334 (and (= ?x318 0) (or (not (= ?x164 0)) (not (= ?x207 0))))))
 (rewrite (= $x334 $x914)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x63 (exists ((x Int) (y Int) )(! (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x57 (+ (- (* ?x38 ?x48 ?x48 ?x51 ?x51 ?x51) (* ?x48 ?x48 ?x48 ?x51)) (* ?x51 ?x51 ?x51))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (+ (- (* ?x38 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39)) (* ?x39 ?x39 ?x39))))
 (let (($x61 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x44) 0)) (not (= (* (+ (- (- ?x48 y00) x00) ?x51) ?x57) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x61))))))))) :qid k!27))
 ))
 (let ((?x324 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x318 (+ x ?x66 ?x73 y)))
 (let ((?x185 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x170 (+ 1 x)))
 (let ((?x229 (+ (- 1) y)))
 (let ((?x207 (* (+ (* (- 1) (* ?x229 ?x229 ?x229 ?x170 ?x170)) ?x185 (* ?x229 ?x229 ?x229)) ?x318)))
 (let ((?x230 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x345 (+ 1 y)))
 (let ((?x313 (+ (- 1) x)))
 (let ((?x164 (* (+ (* (- 1) (* ?x313 ?x313 ?x345 ?x345 ?x345)) ?x230 (* ?x345 ?x345 ?x345)) ?x318)))
 (let (($x334 (and (= ?x318 0) (or (not (= ?x164 0)) (not (= ?x207 0))))))
 (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x57 (+ (- (* ?x38 ?x48 ?x48 ?x51 ?x51 ?x51) (* ?x48 ?x48 ?x48 ?x51)) (* ?x51 ?x51 ?x51))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (+ (- (* ?x38 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39)) (* ?x39 ?x39 ?x39))))
 (let (($x61 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x44) 0)) (not (= (* (+ (- (- ?x48 y00) x00) ?x51) ?x57) 0)))))
 (let (($x62 (and (= (+ (- (- x y00) x00) y) 0) $x61)))
 (rewrite (= $x62 $x334))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x326 (mp (mp @x64 (quant-intro (proof-bind ?x324) (= $x63 $x319)) $x319) (rewrite (= $x319 $x319)) $x319)))
 (let ((@x428 (mp (mp @x326 (quant-intro (proof-bind ?x682) (= $x319 $x680)) $x680) (quant-intro (proof-bind ?x601) (= $x680 $x602)) $x602)))
 (let ((@x378 (mp (mp~ @x428 (sk (~ $x602 $x546)) $x546) (rewrite (= $x546 $x379)) $x379)))
 (let ((@x375 (and-elim @x378 $x748)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x748) $x420)) @x375 $x420)))
 (let (($x349 (<= ?x746 0)))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x748) $x349)) @x375 $x349)))
 (let (($x252 (not (<= ?x273 0))))
 (let (($x733 (>= ?x273 0)))
 (let (($x743 (>= ?x521 0)))
 (let (($x107 (<= ?x521 0)))
 (let ((@x282 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x222 (not $x107) (not $x743))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x107)) @x394 @x274 false) $x107) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x743)) @x394 @x274 false) $x743) $x222)))
 (let ((@x383 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x371 $x252 (not $x733))) (unit-resolution (and-elim @x378 $x262) @x282 $x196) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x733)) @x394 @x274 false) $x733) $x252)))
 ((_ th-lemma arith farkas 1 1 1) @x383 @x394 @x274 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             120
 :arith-nonlinear-bounds    8
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.67
 :memory                    3.20
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1128926
 :num-checks                1
 :propagations              14
 :rlimit-count              2963
 :time                      0.01
 :total-time                0.01)
