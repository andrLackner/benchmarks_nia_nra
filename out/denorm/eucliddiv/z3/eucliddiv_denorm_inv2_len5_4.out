unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x68 (* y00 q00)))
 (let ((?x345 (+ r00 ?x68 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x226 (>= ?x345 0)))
 (let (($x346 (= ?x345 0)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x241 (+ ?x63 r!1)))
 (let ((?x281 (+ 1 q!2)))
 (let ((?x264 (* (- 1) (* y00 y00 y00))))
 (let ((?x193 (* y00 y00 y00 y00)))
 (let ((?x240 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x158 (+ y00 (* y00 y00 q!2 r!1 r!1) (* y00 y00 r!1 r!1) ?x240 ?x193 (* y00 y00 y00 y00 q!2) (* (- 2) (* y00 y00 y00 q!2 r!1)) (* (- 2) (* y00 y00 y00 r!1)) (* y00 y00 r!1) ?x264 (* 2 (* y00 y00 y00 y00 q!2 r!1)) (* (- 1) (* y00 y00 y00 y00 y00 q!2)) (* (- 1) (* y00 y00 y00 r!1 r!1)) (* (- 1) (* y00 y00 y00 q!2 r!1 r!1)) (* ?x281 ?x281 ?x281 ?x241 ?x241 ?x241) (* 2 (* y00 y00 y00 y00 r!1)))))
 (let ((?x121 (* (+ (* (- 1) r00) (* (- 1) ?x68) (* y00 q!2) r!1) ?x158)))
 (let (($x354 (= ?x121 0)))
 (let (($x120 (not $x354)))
 (let (($x356 (and (= (+ y00 (* (- 1) y!0)) 0) $x346 $x120)))
 (let ((?x310 (+ y00 (* 2 (* q!2 r!1 y00 y00 y00 y00)) ?x240 (* (- 1) (* q!2 y00 y00 y00 y00 y00)) (* (- 1) (* r!1 r!1 y00 y00 y00)) (* (- 1) (* q!2 r!1 r!1 y00 y00 y00)) (* r!1 r!1 y00 y00) (* q!2 r!1 r!1 y00 y00) (* (- 2) (* r!1 y00 y00 y00)) (* (- 2) (* q!2 r!1 y00 y00 y00)) ?x193 (* q!2 y00 y00 y00 y00) (* ?x281 ?x281 ?x281 (+ r!1 ?x63) (+ r!1 ?x63) (+ r!1 ?x63)) (* 2 (* r!1 y00 y00 y00 y00)) ?x264 (* r!1 y00 y00))))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x70 (+ r!1 ?x64 (* q!2 y00) ?x78)))
 (let (($x316 (and (= (+ y!0 ?x63) 0) (= ?x70 0) (not (= (* ?x70 ?x310) 0)))))
 (let (($x66 (exists ((q Int) (r Int) (y Int) )(! (let ((?x272 (* r y00 y00)))
 (let ((?x264 (* (- 1) (* y00 y00 y00))))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x65 (+ r ?x63)))
 (let ((?x111 (+ 1 q)))
 (let ((?x212 (* ?x111 ?x111 ?x111 ?x65 ?x65 ?x65)))
 (let ((?x196 (* q y00 y00 y00 y00)))
 (let ((?x193 (* y00 y00 y00 y00)))
 (let ((?x204 (* (- 2) (* q r y00 y00 y00))))
 (let ((?x203 (* (- 2) (* r y00 y00 y00))))
 (let ((?x163 (* q r r y00 y00)))
 (let ((?x162 (* r r y00 y00)))
 (let ((?x141 (* (- 1) (* q r r y00 y00 y00))))
 (let ((?x139 (* (- 1) (* r r y00 y00 y00))))
 (let ((?x240 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x397 (+ y00 (* 2 (* q r y00 y00 y00 y00)) ?x240 (* (- 1) (* q y00 y00 y00 y00 y00)) ?x139 ?x141 ?x162 ?x163 ?x203 ?x204 ?x193 ?x196 ?x212 (* 2 (* r y00 y00 y00 y00)) ?x264 ?x272)))
 (let ((?x68 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x92 (+ r ?x64 ?x39 ?x78)))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y ?x63) 0)))
 (and $x74 $x97 (not (= (* ?x92 ?x397) 0)))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x168 (exists ((q Int) (r Int) (y Int) )(! (let ((?x63 (* (- 1) y00)))
 (let ((?x65 (+ r ?x63)))
 (let ((?x111 (+ 1 q)))
 (let ((?x212 (* ?x111 ?x111 ?x111 ?x65 ?x65 ?x65)))
 (let ((?x267 (+ (* (- 1) (* y00 y00 y00 ?x111 ?x65 ?x65)) (* y00 y00 ?x111 ?x65 ?x65) ?x212 y00 (* y00 y00 ?x65))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let (($x213 (not (= (* (+ r ?x63 ?x64 ?x179 (* y00 ?x111)) ?x267) 0))))
 (let (($x199 (= (+ r ?x64 ?x179 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x199 $x213))))))))))) :qid k!29))
 ))
 (let ((?x91 (lambda ((q Int) (r Int) (y Int) )(let ((?x272 (* r y00 y00)))
 (let ((?x264 (* (- 1) (* y00 y00 y00))))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x65 (+ r ?x63)))
 (let ((?x111 (+ 1 q)))
 (let ((?x212 (* ?x111 ?x111 ?x111 ?x65 ?x65 ?x65)))
 (let ((?x196 (* q y00 y00 y00 y00)))
 (let ((?x193 (* y00 y00 y00 y00)))
 (let ((?x204 (* (- 2) (* q r y00 y00 y00))))
 (let ((?x203 (* (- 2) (* r y00 y00 y00))))
 (let ((?x163 (* q r r y00 y00)))
 (let ((?x162 (* r r y00 y00)))
 (let ((?x141 (* (- 1) (* q r r y00 y00 y00))))
 (let ((?x139 (* (- 1) (* r r y00 y00 y00))))
 (let ((?x240 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x397 (+ y00 (* 2 (* q r y00 y00 y00 y00)) ?x240 (* (- 1) (* q y00 y00 y00 y00 y00)) ?x139 ?x141 ?x162 ?x163 ?x203 ?x204 ?x193 ?x196 ?x212 (* 2 (* r y00 y00 y00 y00)) ?x264 ?x272)))
 (let ((?x68 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x92 (+ r ?x64 ?x39 ?x78)))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y ?x63) 0)))
 (let (($x100 (and $x74 $x97 (not (= (* ?x92 ?x397) 0)))))
 (let ((?x267 (+ (* (- 1) (* y00 y00 y00 ?x111 ?x65 ?x65)) (* y00 y00 ?x111 ?x65 ?x65) ?x212 y00 (* y00 y00 ?x65))))
 (let ((?x210 (* (+ r ?x63 ?x64 (* (- 1) (* q00 y00)) (* y00 ?x111)) ?x267)))
 (let (($x213 (not (= ?x210 0))))
 (let (($x199 (= (+ r ?x64 (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x200 (and (= (+ y00 (* (- 1) y)) 0) $x199 $x213)))
 (rewrite (= $x200 $x100))))))))))))))))))))))))))))))))
 ))
 (let (($x274 (exists ((q Int) (r Int) (y Int) )(! (let ((?x63 (* (- 1) y00)))
 (let ((?x65 (+ r ?x63)))
 (let ((?x111 (+ 1 q)))
 (let ((?x212 (* ?x111 ?x111 ?x111 ?x65 ?x65 ?x65)))
 (let ((?x267 (+ (* (- 1) (* y00 y00 y00 ?x111 ?x65 ?x65)) (* y00 y00 ?x111 ?x65 ?x65) ?x212 y00 (* y00 y00 ?x65))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let (($x213 (not (= (* (+ r ?x63 ?x64 ?x179 (* y00 ?x111)) ?x267) 0))))
 (let (($x199 (= (+ r ?x64 ?x179 (* y00 q)) 0)))
 (and (= (+ ?x63 y) 0) $x199 $x213))))))))))) :qid k!29))
 ))
 (let ((?x166 (lambda ((q Int) (r Int) (y Int) )(let ((?x63 (* (- 1) y00)))
 (let ((?x65 (+ r ?x63)))
 (let ((?x111 (+ 1 q)))
 (let ((?x212 (* ?x111 ?x111 ?x111 ?x65 ?x65 ?x65)))
 (let ((?x267 (+ (* (- 1) (* y00 y00 y00 ?x111 ?x65 ?x65)) (* y00 y00 ?x111 ?x65 ?x65) ?x212 y00 (* y00 y00 ?x65))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let (($x213 (not (= (* (+ r ?x63 ?x64 ?x179 (* y00 ?x111)) ?x267) 0))))
 (let (($x199 (= (+ r ?x64 ?x179 (* y00 q)) 0)))
 (let (($x200 (and (= (+ y00 (* (- 1) y)) 0) $x199 $x213)))
 (let (($x194 (and (= (+ ?x63 y) 0) $x199 $x213)))
 (rewrite (= $x194 $x200)))))))))))))))
 ))
 (let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (+ (* (- 1) ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x45 ?x42 ?x42 ?x42) y00 (* ?x42 y00 y00))))
 (let (($x54 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x52) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x54))))))) :qid k!29))
 ))
 (let ((?x165 (lambda ((q Int) (r Int) (y Int) )(let ((?x63 (* (- 1) y00)))
 (let ((?x65 (+ r ?x63)))
 (let ((?x111 (+ 1 q)))
 (let ((?x212 (* ?x111 ?x111 ?x111 ?x65 ?x65 ?x65)))
 (let ((?x267 (+ (* (- 1) (* y00 y00 y00 ?x111 ?x65 ?x65)) (* y00 y00 ?x111 ?x65 ?x65) ?x212 y00 (* y00 y00 ?x65))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let (($x213 (not (= (* (+ r ?x63 ?x64 ?x179 (* y00 ?x111)) ?x267) 0))))
 (let (($x199 (= (+ r ?x64 ?x179 (* y00 q)) 0)))
 (let (($x194 (and (= (+ ?x63 y) 0) $x199 $x213)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (+ (* (- 1) ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x45 ?x42 ?x42 ?x42) y00 (* ?x42 y00 y00))))
 (let (($x55 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x52) 0))))
 (let (($x57 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x55))))
 (rewrite (= $x57 $x194)))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x188 (mp (mp @x59 (quant-intro (proof-bind ?x165) (= $x58 $x274)) $x274) (rewrite (= $x274 $x274)) $x274)))
 (let ((@x306 (mp (mp @x188 (quant-intro (proof-bind ?x166) (= $x274 $x168)) $x168) (quant-intro (proof-bind ?x91) (= $x168 $x66)) $x66)))
 (let ((@x259 (mp (mp~ @x306 (sk (~ $x66 $x316)) $x316) (rewrite (= $x316 $x356)) $x356)))
 (let ((@x341 (and-elim @x259 $x346)))
 (let ((@x122 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x346) $x226)) @x341 $x226)))
 (let (($x223 (<= ?x345 0)))
 (let ((@x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x346) $x223)) @x341 $x223)))
 (let (($x250 (not (<= ?x121 0))))
 (let (($x222 (>= ?x121 0)))
 (let ((@x288 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x354 $x250 (not $x222))) (and-elim @x259 $x120) (or $x250 (not $x222)))))
 (let ((@x131 (unit-resolution @x288 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x222)) @x275 @x122 false) $x222) $x250)))
 ((_ th-lemma arith farkas 1 1 1) @x131 @x275 @x122 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             102
 :arith-nonlinear-bounds    4
 :arith-num-rows            6
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      3
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    6
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.56
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1082354
 :num-checks                1
 :propagations              6
 :rlimit-count              2076
 :time                      0.01
 :total-time                0.01)
