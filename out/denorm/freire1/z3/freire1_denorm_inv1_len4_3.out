unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x285 (* (- 1) r!1)))
 (let ((?x131 (* r!1 r!1)))
 (let ((?x305 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x264 (+ r00 ?x85 ?x101 ?x305 ?x131 ?x285)))
 (let (($x298 (<= ?x264 0)))
 (let (($x260 (= ?x264 0)))
 (let ((?x130 (* (- 2) r!1)))
 (let ((?x232 (* (- 1) (* x!0 x!0))))
 (let ((?x152 (* (- 1) ?x131)))
 (let ((?x82 (* (+ (- 1) (* x!0 r!1) ?x152 ?x232 ?x130) ?x264)))
 (let (($x327 (= ?x82 0)))
 (let (($x160 (not $x327)))
 (let (($x164 (and $x260 $x160)))
 (let ((?x309 (* (+ (- 1) ?x130 ?x152 (* r!1 x!0) ?x232) (+ ?x285 ?x305 r00 ?x131 ?x85 ?x101))))
 (let (($x126 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x152 (* 2 x00) ?x36) 0)))
 (let (($x176 (and $x126 (not (= ?x309 0)))))
 (let (($x328 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x325 (* (- 1) (* x x))))
 (let ((?x220 (* r x)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x186 (* (- 2) r)))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (and $x119 (not (= (* (+ (- 1) ?x186 ?x117 ?x220 ?x325) ?x107) 0))))))))))))))) :qid k!26))
 ))
 (let (($x143 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x139 (+ 1 r)))
 (let ((?x163 (* ?x139 ?x139)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x257 (+ (* (- 1) (* ?x139 (+ x ?x64))) (* (- 1) ?x163) x ?x64 (* (- 1) (* (+ x ?x64) (+ x ?x64))))))
 (let (($x225 (= (* ?x257 (+ (- 1) (* (- 3) r) r00 ?x163 ?x32 ?x85 ?x101)) 0)))
 (let (($x138 (not $x225)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x138)))))))))))))))) :qid k!26))
 ))
 (let ((?x324 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x325 (* (- 1) (* x x))))
 (let ((?x220 (* r x)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x186 (* (- 2) r)))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (let (($x114 (and $x119 (not (= (* (+ (- 1) ?x186 ?x117 ?x220 ?x325) ?x107) 0)))))
 (let ((?x139 (+ 1 r)))
 (let ((?x163 (* ?x139 ?x139)))
 (let ((?x257 (+ (* (- 1) (* ?x139 (+ x ?x64))) (* (- 1) ?x163) x ?x64 (* (- 1) (* (+ x ?x64) (+ x ?x64))))))
 (let (($x225 (= (* ?x257 (+ (- 1) (* (- 3) r) r00 ?x163 ?x32 ?x85 ?x101)) 0)))
 (let (($x138 (not $x225)))
 (let (($x343 (= (+ r (* (- 1) r00) ?x117 (* (- 2) x) (* 2 x00) ?x36) 0)))
 (let (($x125 (and $x343 $x138)))
 (rewrite (= $x125 $x114)))))))))))))))))))))))
 ))
 (let (($x141 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x139 (+ 1 r)))
 (let ((?x163 (* ?x139 ?x139)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x257 (+ (* (- 1) (* ?x139 (+ x ?x64))) (* (- 1) ?x163) x ?x64 (* (- 1) (* (+ x ?x64) (+ x ?x64))))))
 (let (($x225 (= (* ?x257 (+ (- 1) (* (- 3) r) r00 ?x163 ?x32 ?x85 ?x101)) 0)))
 (let (($x138 (not $x225)))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x138))))))))))) :qid k!26))
 ))
 (let ((?x162 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x139 (+ 1 r)))
 (let ((?x163 (* ?x139 ?x139)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x257 (+ (* (- 1) (* ?x139 (+ x ?x64))) (* (- 1) ?x163) x ?x64 (* (- 1) (* (+ x ?x64) (+ x ?x64))))))
 (let (($x225 (= (* ?x257 (+ (- 1) (* (- 3) r) r00 ?x163 ?x32 ?x85 ?x101)) 0)))
 (let (($x138 (not $x225)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x125 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x138)))
 (let (($x159 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) $x138)))
 (rewrite (= $x159 $x125))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x54 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) (- (+ (- (* (- 1) ?x41 ?x44) ?x43) ?x44) (* ?x44 ?x44)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x54 0))))))))))) :qid k!26))
 ))
 (let ((?x144 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x139 (+ 1 r)))
 (let ((?x163 (* ?x139 ?x139)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x257 (+ (* (- 1) (* ?x139 (+ x ?x64))) (* (- 1) ?x163) x ?x64 (* (- 1) (* (+ x ?x64) (+ x ?x64))))))
 (let (($x225 (= (* ?x257 (+ (- 1) (* (- 3) r) r00 ?x163 ?x32 ?x85 ?x101)) 0)))
 (let (($x138 (not $x225)))
 (let (($x159 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x138)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x35 (* 2 x00)))
 (let ((?x54 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) (- (+ (- (* (- 1) ?x41 ?x44) ?x43) ?x44) (* ?x44 ?x44)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= ?x54 0))))))
 (rewrite (= $x58 $x159)))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x340 (mp (mp @x60 (quant-intro (proof-bind ?x144) (= $x59 $x141)) $x141) (rewrite (= $x141 $x141)) $x141)))
 (let ((@x314 (mp (mp @x340 (quant-intro (proof-bind ?x162) (= $x141 $x143)) $x143) (quant-intro (proof-bind ?x324) (= $x143 $x328)) $x328)))
 (let ((@x303 (mp (mp~ @x314 (sk (~ $x328 $x176)) $x176) (rewrite (= $x176 $x164)) $x164)))
 (let ((@x269 (and-elim @x303 $x260)))
 (let ((@x266 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x260) $x298)) @x269 $x298)))
 (let (($x299 (>= ?x264 0)))
 (let ((@x86 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x260) $x299)) @x269 $x299)))
 (let (($x254 (not (>= ?x82 0))))
 (let (($x301 (<= ?x82 0)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x327 (not $x301) $x254)) (and-elim @x303 $x160) (or (not $x301) $x254))))
 (let ((@x296 (unit-resolution @x297 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x301)) @x86 @x266 false) $x301) $x254)))
 ((_ th-lemma arith farkas 1 1 1) @x296 @x86 @x266 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.45
 :memory                    3.04
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1051908
 :num-checks                1
 :propagations              4
 :rlimit-count              1109
 :time                      0.01
 :total-time                0.01)
