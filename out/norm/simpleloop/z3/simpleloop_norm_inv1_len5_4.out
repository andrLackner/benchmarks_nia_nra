unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x995 (* (- 1) x!1)))
 (let ((?x980 (* (- 1) y!0)))
 (let ((?x996 (+ y00 x00 ?x980 ?x995)))
 (let (($x1101 (<= ?x996 0)))
 (let (($x962 (= ?x996 0)))
 (let ((?x662 (+ y00 x00 (* (- 1) (* y!0 y!0 y!0 x!1 x!1)) (* (- 1) (* y!0 x!1 x!1 x!1)) ?x980 ?x995 (* (- 3) (* y00 y!0)) (* (- 4) (* x00 x!1)) (* (- 1) (* x00 y!0 x!1)) (* x00 y!0 y!0 y!0 x!1) (* x00 y!0 x!1 x!1) (* y00 y!0 x!1 x!1) (* (- 5) (* x00 y!0 y!0)) (* 2 (* x00 x!1 x!1)) (* (- 4) (* y00 x!1)) (* 2 (* x00 y!0 y!0 x!1)) (* (- 3) (* x00 y!0)) (* (- 2) (* x00 y!0 y!0 y!0)) (* (- 2) (* x!1 x!1 x!1)) (* 2 (* y!0 y!0 y!0 y!0)) (* 2 (* y00 x!1 x!1)) (* (- 5) (* y00 y!0 y!0)) (* (- 1) (* y00 y!0 x!1)) (* 7 (* y!0 x!1)) (* (- 1) (* y!0 x!1 x!1)) (* 6 (* y!0 y!0 x!1)) (* (- 3) (* y!0 y!0 x!1 x!1)) (* (- 2) (* y00 y!0 y!0 y!0)) (* y00 y!0 y!0 y!0 x!1) (* 2 (* y00 y!0 y!0 x!1)) (* 4 (* x!1 x!1)) (* 3 (* y!0 y!0)) (* 5 (* y!0 y!0 y!0)) (* (- 1) (* y!0 y!0 y!0 y!0 x!1)))))
 (let (($x603 (= ?x662 0)))
 (let (($x1265 (not $x603)))
 (let (($x1002 (and $x962 $x1265)))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x1096 (+ x!1 y!0 ?x74 ?x81 (* 3 (* y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y00)) (* 4 (* x!1 y00)) (* 4 (* x!1 x00)) (* x!1 y!0 x00) (* (- 2) (* x!1 y!0 y!0 x00)) (* (- 1) (* x!1 y!0 y!0 y!0 x00)) (* 3 (* y!0 x00)) (* 5 (* y!0 y!0 x00)) (* 2 (* y!0 y!0 y!0 x00)) (* (- 2) (* x!1 x!1 x00)) (* (- 1) (* x!1 x!1 y!0 x00)) (* (- 2) (* x!1 x!1 y00)) (* (- 3) (* y!0 y!0)) (* (- 5) (* y!0 y!0 y!0)) (* x!1 x!1 y!0 y!0 y!0) (* (- 4) (* x!1 x!1)) (* (- 7) (* x!1 y!0)) (* x!1 x!1 y!0) (* (- 6) (* x!1 y!0 y!0)) (* 3 (* x!1 x!1 y!0 y!0)) (* 5 (* y!0 y!0 y00)) (* 2 (* y!0 y!0 y!0 y00)) (* (- 1) (* x!1 y!0 y!0 y!0 y00)) (* (- 2) (* x!1 y!0 y!0 y00)) (* x!1 y!0 y00) (* 2 (* x!1 x!1 x!1)) (* (- 2) (* y!0 y!0 y!0 y!0)) (* x!1 y!0 y!0 y!0 y!0) (* x!1 x!1 x!1 y!0))))
 (let (($x1092 (and (= (+ x!1 y!0 ?x74 ?x81) 0) (not (= ?x1096 0)))))
 (let (($x1616 (exists ((x Int) (y Int) )(! (let ((?x1378 (* x x x y)))
 (let ((?x1199 (* x y y y y)))
 (let ((?x1432 (* (- 2) (* y y y y))))
 (let ((?x1431 (* 2 (* x x x))))
 (let ((?x1430 (* (- 2) (* x y y y00))))
 (let ((?x810 (* (- 1) (* x y y y y00))))
 (let ((?x1429 (* 2 (* y y y y00))))
 (let ((?x1428 (* 5 (* y y y00))))
 (let ((?x720 (* 3 (* x x y y))))
 (let ((?x672 (* x x y)))
 (let ((?x652 (* x x y y y)))
 (let ((?x447 (* (- 1) (* x x y x00))))
 (let ((?x527 (* (- 2) (* x x x00))))
 (let ((?x1424 (* 2 (* y y y x00))))
 (let ((?x306 (* (- 1) (* x y y y x00))))
 (let ((?x374 (* (- 2) (* x y y x00))))
 (let ((?x181 (* x y x00)))
 (let ((?x526 (* 4 (* x x00))))
 (let ((?x130 (* (- 1) (* x x y y00))))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x1609 (+ x y ?x74 ?x81 (* 3 (* y y00)) ?x130 (* 4 (* x y00)) ?x526 ?x181 ?x374 ?x306 (* 3 (* y x00)) (* 5 (* y y x00)) ?x1424 ?x527 ?x447 (* (- 2) (* x x y00)) (* (- 3) (* y y)) (* (- 5) (* y y y)) ?x652 (* (- 4) (* x x)) (* (- 7) (* x y)) ?x672 (* (- 6) (* x y y)) ?x720 ?x1428 ?x1429 ?x810 ?x1430 (* x y y00) ?x1431 ?x1432 ?x1199 ?x1378)))
 (let (($x100 (= (+ x y ?x74 ?x81) 0)))
 (and $x100 (not (= ?x1609 0)))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x471 (exists ((x Int) (y Int) )(! (let ((?x751 (+ 1 y)))
 (let ((?x820 (+ (- 1) x)))
 (let ((?x650 (* ?x820 ?x820 ?x820 ?x751)))
 (let ((?x474 (* ?x751 ?x751 ?x751 ?x751)))
 (let ((?x1372 (* y00 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x1316 (* y00 ?x820 ?x820)))
 (let ((?x1301 (* x00 ?x820 ?x820)))
 (let ((?x375 (* x00 ?x820 ?x820 ?x751)))
 (let ((?x834 (* x00 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x828 (* y00 ?x820 ?x820 ?x751)))
 (let ((?x465 (+ ?x828 (* (- 1) (* x00 ?x820 ?x751 ?x751)) ?x834 ?x375 ?x1301 ?x1316 (* (- 1) (* ?x820 ?x820 ?x751 ?x751 ?x751)) ?x1372 (* (- 1) (* ?x820 ?x820 ?x820)) (* 2 (* ?x820 ?x751 ?x751 ?x751)) ?x474 (* (- 1) (* y00 ?x820 ?x751 ?x751)) (* (- 1) (* ?x820 ?x751 ?x751 ?x751 ?x751)) (* (- 1) (* y00 ?x751 ?x751 ?x751)) (* (- 1) (* x00 ?x751 ?x751 ?x751)) (* (- 1) (* ?x820 ?x820 ?x751)) (* (- 1) ?x650))))
 (let (($x824 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x824 (not (= ?x465 0))))))))))))))) :qid k!26))
 ))
 (let ((?x1618 (lambda ((x Int) (y Int) )(let ((?x1378 (* x x x y)))
 (let ((?x1199 (* x y y y y)))
 (let ((?x1432 (* (- 2) (* y y y y))))
 (let ((?x1431 (* 2 (* x x x))))
 (let ((?x1430 (* (- 2) (* x y y y00))))
 (let ((?x810 (* (- 1) (* x y y y y00))))
 (let ((?x1429 (* 2 (* y y y y00))))
 (let ((?x1428 (* 5 (* y y y00))))
 (let ((?x720 (* 3 (* x x y y))))
 (let ((?x672 (* x x y)))
 (let ((?x652 (* x x y y y)))
 (let ((?x447 (* (- 1) (* x x y x00))))
 (let ((?x527 (* (- 2) (* x x x00))))
 (let ((?x1424 (* 2 (* y y y x00))))
 (let ((?x306 (* (- 1) (* x y y y x00))))
 (let ((?x374 (* (- 2) (* x y y x00))))
 (let ((?x181 (* x y x00)))
 (let ((?x526 (* 4 (* x x00))))
 (let ((?x130 (* (- 1) (* x x y y00))))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x1609 (+ x y ?x74 ?x81 (* 3 (* y y00)) ?x130 (* 4 (* x y00)) ?x526 ?x181 ?x374 ?x306 (* 3 (* y x00)) (* 5 (* y y x00)) ?x1424 ?x527 ?x447 (* (- 2) (* x x y00)) (* (- 3) (* y y)) (* (- 5) (* y y y)) ?x652 (* (- 4) (* x x)) (* (- 7) (* x y)) ?x672 (* (- 6) (* x y y)) ?x720 ?x1428 ?x1429 ?x810 ?x1430 (* x y y00) ?x1431 ?x1432 ?x1199 ?x1378)))
 (let (($x100 (= (+ x y ?x74 ?x81) 0)))
 (let (($x436 (and $x100 (not (= ?x1609 0)))))
 (let ((?x751 (+ 1 y)))
 (let ((?x820 (+ (- 1) x)))
 (let ((?x650 (* ?x820 ?x820 ?x820 ?x751)))
 (let ((?x474 (* ?x751 ?x751 ?x751 ?x751)))
 (let ((?x1372 (* y00 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x1316 (* y00 ?x820 ?x820)))
 (let ((?x1301 (* x00 ?x820 ?x820)))
 (let ((?x375 (* x00 ?x820 ?x820 ?x751)))
 (let ((?x834 (* x00 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x828 (* y00 ?x820 ?x820 ?x751)))
 (let ((?x465 (+ ?x828 (* (- 1) (* x00 ?x820 ?x751 ?x751)) ?x834 ?x375 ?x1301 ?x1316 (* (- 1) (* ?x820 ?x820 ?x751 ?x751 ?x751)) ?x1372 (* (- 1) (* ?x820 ?x820 ?x820)) (* 2 (* ?x820 ?x751 ?x751 ?x751)) ?x474 (* (- 1) (* y00 ?x820 ?x751 ?x751)) (* (- 1) (* ?x820 ?x751 ?x751 ?x751 ?x751)) (* (- 1) (* y00 ?x751 ?x751 ?x751)) (* (- 1) (* x00 ?x751 ?x751 ?x751)) (* (- 1) (* ?x820 ?x820 ?x751)) (* (- 1) ?x650))))
 (let (($x824 (= (+ x ?x74 ?x81 y) 0)))
 (let (($x468 (and $x824 (not (= ?x465 0)))))
 (rewrite (= $x468 $x436))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x839 (exists ((x Int) (y Int) )(! (let ((?x751 (+ 1 y)))
 (let ((?x820 (+ (- 1) x)))
 (let ((?x650 (* ?x820 ?x820 ?x820 ?x751)))
 (let ((?x110 (* ?x820 ?x820 ?x751)))
 (let ((?x200 (* x00 ?x751 ?x751 ?x751)))
 (let ((?x194 (* y00 ?x751 ?x751 ?x751)))
 (let ((?x189 (* ?x820 ?x751 ?x751 ?x751 ?x751)))
 (let ((?x185 (* y00 ?x820 ?x751 ?x751)))
 (let ((?x625 (* ?x820 ?x820 ?x820)))
 (let ((?x1367 (* ?x820 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x833 (* x00 ?x820 ?x751 ?x751)))
 (let ((?x597 (+ (* (- 1) (* y00 ?x820 ?x820 ?x751)) ?x833 (* (- 1) (* x00 ?x820 ?x751 ?x751 ?x751)) (* (- 1) (* x00 ?x820 ?x820 ?x751)) (* (- 1) (* x00 ?x820 ?x820)) (* (- 1) (* y00 ?x820 ?x820)) ?x1367 (* (- 1) (* y00 ?x820 ?x751 ?x751 ?x751)) ?x625 (* (- 2) (* ?x820 ?x751 ?x751 ?x751)) (* (- 1) (* ?x751 ?x751 ?x751 ?x751)) ?x185 ?x189 ?x194 ?x200 ?x110 ?x650)))
 (let (($x824 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x824 (not (= ?x597 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x1370 (lambda ((x Int) (y Int) )(let ((?x751 (+ 1 y)))
 (let ((?x820 (+ (- 1) x)))
 (let ((?x650 (* ?x820 ?x820 ?x820 ?x751)))
 (let ((?x474 (* ?x751 ?x751 ?x751 ?x751)))
 (let ((?x1372 (* y00 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x1316 (* y00 ?x820 ?x820)))
 (let ((?x1301 (* x00 ?x820 ?x820)))
 (let ((?x375 (* x00 ?x820 ?x820 ?x751)))
 (let ((?x834 (* x00 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x828 (* y00 ?x820 ?x820 ?x751)))
 (let ((?x465 (+ ?x828 (* (- 1) (* x00 ?x820 ?x751 ?x751)) ?x834 ?x375 ?x1301 ?x1316 (* (- 1) (* ?x820 ?x820 ?x751 ?x751 ?x751)) ?x1372 (* (- 1) (* ?x820 ?x820 ?x820)) (* 2 (* ?x820 ?x751 ?x751 ?x751)) ?x474 (* (- 1) (* y00 ?x820 ?x751 ?x751)) (* (- 1) (* ?x820 ?x751 ?x751 ?x751 ?x751)) (* (- 1) (* y00 ?x751 ?x751 ?x751)) (* (- 1) (* x00 ?x751 ?x751 ?x751)) (* (- 1) (* ?x820 ?x820 ?x751)) (* (- 1) ?x650))))
 (let (($x824 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x468 (and $x824 (not (= ?x465 0)))))
 (let ((?x110 (* ?x820 ?x820 ?x751)))
 (let ((?x200 (* x00 ?x751 ?x751 ?x751)))
 (let ((?x194 (* y00 ?x751 ?x751 ?x751)))
 (let ((?x189 (* ?x820 ?x751 ?x751 ?x751 ?x751)))
 (let ((?x185 (* y00 ?x820 ?x751 ?x751)))
 (let ((?x625 (* ?x820 ?x820 ?x820)))
 (let ((?x1367 (* ?x820 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x833 (* x00 ?x820 ?x751 ?x751)))
 (let ((?x597 (+ (* (- 1) ?x828) ?x833 (* (- 1) ?x834) (* (- 1) ?x375) (* (- 1) ?x1301) (* (- 1) ?x1316) ?x1367 (* (- 1) ?x1372) ?x625 (* (- 2) (* ?x820 ?x751 ?x751 ?x751)) (* (- 1) ?x474) ?x185 ?x189 ?x194 ?x200 ?x110 ?x650)))
 (let (($x547 (and $x824 (not (= ?x597 0)))))
 (rewrite (= $x547 $x468))))))))))))))))))))))))))
 ))
 (let (($x71 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x44 (- (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 x00 ?x36 ?x36)) (* ?x35 x00 ?x36 ?x36 ?x36))))
 (let ((?x47 (- (- (- ?x44 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 x00)) (* ?x35 ?x35 y00))))
 (let ((?x51 (- (+ ?x47 (* ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36 y00))))
 (let ((?x58 (- (+ ?x51 (* 0 ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x35 ?x35)) (* 2 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x66 (+ (- ?x58 (* ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 y00) (* ?x35 ?x36 ?x36 ?x36 ?x36) (* ?x36 ?x36 ?x36 y00) (* x00 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x66 0))))))))))) :qid k!26))
 ))
 (let ((?x811 (lambda ((x Int) (y Int) )(let ((?x751 (+ 1 y)))
 (let ((?x820 (+ (- 1) x)))
 (let ((?x650 (* ?x820 ?x820 ?x820 ?x751)))
 (let ((?x110 (* ?x820 ?x820 ?x751)))
 (let ((?x200 (* x00 ?x751 ?x751 ?x751)))
 (let ((?x194 (* y00 ?x751 ?x751 ?x751)))
 (let ((?x189 (* ?x820 ?x751 ?x751 ?x751 ?x751)))
 (let ((?x185 (* y00 ?x820 ?x751 ?x751)))
 (let ((?x625 (* ?x820 ?x820 ?x820)))
 (let ((?x1367 (* ?x820 ?x820 ?x751 ?x751 ?x751)))
 (let ((?x833 (* x00 ?x820 ?x751 ?x751)))
 (let ((?x597 (+ (* (- 1) (* y00 ?x820 ?x820 ?x751)) ?x833 (* (- 1) (* x00 ?x820 ?x751 ?x751 ?x751)) (* (- 1) (* x00 ?x820 ?x820 ?x751)) (* (- 1) (* x00 ?x820 ?x820)) (* (- 1) (* y00 ?x820 ?x820)) ?x1367 (* (- 1) (* y00 ?x820 ?x751 ?x751 ?x751)) ?x625 (* (- 2) (* ?x820 ?x751 ?x751 ?x751)) (* (- 1) (* ?x751 ?x751 ?x751 ?x751)) ?x185 ?x189 ?x194 ?x200 ?x110 ?x650)))
 (let (($x824 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x547 (and $x824 (not (= ?x597 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x44 (- (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 x00 ?x36 ?x36)) (* ?x35 x00 ?x36 ?x36 ?x36))))
 (let ((?x47 (- (- (- ?x44 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 x00)) (* ?x35 ?x35 y00))))
 (let ((?x51 (- (+ ?x47 (* ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36 y00))))
 (let ((?x58 (- (+ ?x51 (* 0 ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x35 ?x35)) (* 2 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x66 (+ (- ?x58 (* ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 y00) (* ?x35 ?x36 ?x36 ?x36 ?x36) (* ?x36 ?x36 ?x36 y00) (* x00 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35 ?x36))))
 (let (($x70 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x66 0))))))
 (rewrite (= $x70 $x547)))))))))))))))))))))))))
 ))
 (let ((@x72 (asserted $x71)))
 (let ((@x163 (mp (mp @x72 (quant-intro (proof-bind ?x811) (= $x71 $x839)) $x839) (rewrite (= $x839 $x839)) $x839)))
 (let ((@x1198 (mp (mp @x163 (quant-intro (proof-bind ?x1370) (= $x839 $x471)) $x471) (quant-intro (proof-bind ?x1618) (= $x471 $x1616)) $x1616)))
 (let ((@x1266 (mp (mp~ @x1198 (sk (~ $x1616 $x1092)) $x1092) (rewrite (= $x1092 $x1002)) $x1002)))
 (let ((@x386 (and-elim @x1266 $x962)))
 (let ((@x1339 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x962) $x1101)) @x386 $x1101)))
 (let (($x1105 (>= ?x996 0)))
 (let ((@x87 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x962) $x1105)) @x386 $x1105)))
 (let (($x1325 (not (>= ?x662 0))))
 (let (($x1106 (<= ?x662 0)))
 (let ((@x966 (lemma ((_ th-lemma arith) (hypothesis (not $x1106)) @x87 @x1339 @x87 @x1339 false) $x1106)))
 (let ((@x974 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x603 (not $x1106) $x1325)) (and-elim @x1266 $x1265) (or (not $x1106) $x1325))))
 ((_ th-lemma arith) (unit-resolution @x974 @x966 $x1325) @x87 @x1339 @x87 @x1339 false)))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           3
 :arith-grobner             2
 :arith-max-min             265
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             3
 :arith-patches_succ        3
 :arith-pivots              3
 :arith-row-summations      1
 :arith-tableau-max-columns 48
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.80
 :memory                    3.31
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1266154
 :num-checks                1
 :propagations              4
 :rlimit-count              4600
 :time                      0.01
 :total-time                0.01)
