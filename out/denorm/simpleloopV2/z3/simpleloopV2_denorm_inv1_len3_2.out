unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x235 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x359 (>= ?x235 0)))
 (let (($x233 (= ?x235 0)))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x362 (+ ?x65 ?x72 x!1 y!0)))
 (let ((?x270 (* 3 y!0)))
 (let ((?x524 (* 7 (* x!1 x!1 y!0))))
 (let ((?x579 (* (- 3) (* x!1 y!0 y!0))))
 (let ((?x314 (* x!1 x!1 x!1 y!0)))
 (let ((?x339 (* (- 2) ?x314)))
 (let ((?x90 (* (- 5) x!1)))
 (let ((?x67 (* (- 1) (* x!1 x!1 x!1 y!0 y!0))))
 (let ((?x254 (* x!1 y!0)))
 (let ((?x168 (* (- 8) ?x254)))
 (let ((?x206 (* y!0 y!0)))
 (let ((?x113 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x101 (+ 1 y!0)))
 (let ((?x100 (+ (- 1) x!1)))
 (let ((?x95 (* (- 1) (* ?x100 ?x100 ?x100 ?x101 ?x101 ?x101))))
 (let ((?x155 (* x!1 x!1)))
 (let ((?x205 (* 4 ?x155)))
 (let ((?x114 (* x!1 x!1 y!0 y!0)))
 (let ((?x593 (* 3 ?x114)))
 (let ((?x89 (+ 2 ?x593 ?x205 ?x95 ?x113 ?x206 ?x168 ?x67 ?x90 ?x339 ?x579 ?x524 ?x270)))
 (let ((?x149 (* ?x89 ?x362)))
 (let (($x290 (= ?x149 0)))
 (let (($x293 (not $x290)))
 (let ((?x216 (+ 1 x!1)))
 (let ((?x448 (+ (- 1) y!0)))
 (let ((?x68 (* (- 1) (* ?x448 ?x448 ?x448 ?x216 ?x216 ?x216))))
 (let ((?x442 (* 2 ?x314)))
 (let ((?x212 (* 8 ?x254)))
 (let ((?x358 (* (- 1) ?x206)))
 (let ((?x595 (* (- 4) ?x155)))
 (let ((?x76 (* (- 3) ?x114)))
 (let ((?x330 (+ (- 2) ?x76 ?x595 ?x113 ?x358 ?x212 ?x67 ?x90 ?x442 ?x579 ?x524 ?x270 ?x68)))
 (let ((?x236 (* ?x330 ?x362)))
 (let (($x97 (= ?x236 0)))
 (let (($x342 (or (not $x97) $x293)))
 (let (($x385 (and $x233 $x342)))
 (let ((?x609 (+ x!1 y!0 ?x65 ?x72)))
 (let ((?x77 (+ (- 2) ?x90 ?x270 ?x212 ?x524 ?x595 ?x442 ?x68 ?x113 ?x67 ?x76 ?x579 ?x358)))
 (let ((?x75 (+ 2 ?x90 ?x270 ?x168 ?x524 ?x205 ?x95 ?x339 ?x113 ?x67 ?x593 ?x579 ?x206)))
 (let (($x594 (and (= ?x609 0) (or (not (= (* ?x75 ?x609) 0)) (not (= (* ?x77 ?x609) 0))))))
 (let (($x306 (exists ((x Int) (y Int) )(! (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let ((?x229 (* y y)))
 (let ((?x226 (* (- 1) ?x229)))
 (let ((?x410 (* (- 3) (* x y y))))
 (let ((?x215 (* x x y y)))
 (let ((?x320 (* (- 3) ?x215)))
 (let ((?x345 (* (- 1) (* x x x y y))))
 (let ((?x344 (* (- 1) (* x x x))))
 (let ((?x129 (+ 1 x)))
 (let ((?x434 (+ (- 1) y)))
 (let ((?x187 (* (- 1) (* ?x434 ?x434 ?x434 ?x129 ?x129 ?x129))))
 (let ((?x184 (* x x x y)))
 (let ((?x317 (* 2 ?x184)))
 (let ((?x152 (* x x)))
 (let ((?x600 (* (- 4) ?x152)))
 (let ((?x426 (* 7 (* x x y))))
 (let ((?x139 (* x y)))
 (let ((?x599 (* 8 ?x139)))
 (let ((?x422 (* 3 y)))
 (let ((?x602 (* (- 5) x)))
 (let ((?x147 (+ (- 2) ?x602 ?x422 ?x599 ?x426 ?x600 ?x317 ?x187 ?x344 ?x345 ?x320 ?x410 ?x226)))
 (let ((?x379 (* 3 ?x215)))
 (let ((?x375 (* (- 2) ?x184)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125))))
 (let ((?x427 (* 4 ?x152)))
 (let ((?x424 (* (- 8) ?x139)))
 (let ((?x369 (+ 2 ?x602 ?x422 ?x424 ?x426 ?x427 ?x286 ?x375 ?x344 ?x345 ?x379 ?x410 ?x229)))
 (let (($x91 (= ?x86 0)))
 (and $x91 (or (not (= (* ?x369 ?x86) 0)) (not (= (* ?x147 ?x86) 0)))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x126 (exists ((x Int) (y Int) )(! (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let ((?x229 (* y y)))
 (let ((?x226 (* (- 1) ?x229)))
 (let ((?x410 (* (- 3) (* x y y))))
 (let ((?x215 (* x x y y)))
 (let ((?x320 (* (- 3) ?x215)))
 (let ((?x345 (* (- 1) (* x x x y y))))
 (let ((?x344 (* (- 1) (* x x x))))
 (let ((?x129 (+ 1 x)))
 (let ((?x434 (+ (- 1) y)))
 (let ((?x187 (* (- 1) (* ?x434 ?x434 ?x434 ?x129 ?x129 ?x129))))
 (let ((?x184 (* x x x y)))
 (let ((?x317 (* 2 ?x184)))
 (let ((?x152 (* x x)))
 (let ((?x600 (* (- 4) ?x152)))
 (let ((?x426 (* 7 (* x x y))))
 (let ((?x139 (* x y)))
 (let ((?x599 (* 8 ?x139)))
 (let ((?x134 (* (- 1) (* x 1))))
 (let ((?x422 (* 3 y)))
 (let ((?x421 (* (- 4) x)))
 (let ((?x655 (+ (- 2) ?x421 ?x422 ?x134 ?x599 ?x426 ?x600 ?x317 ?x187 ?x344 ?x345 ?x320 ?x410 ?x226)))
 (let ((?x379 (* 3 ?x215)))
 (let ((?x375 (* (- 2) ?x184)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125))))
 (let ((?x427 (* 4 ?x152)))
 (let ((?x424 (* (- 8) ?x139)))
 (let ((?x428 (+ 2 ?x421 ?x422 ?x134 ?x424 ?x426 ?x427 ?x286 ?x375 ?x344 ?x345 ?x379 ?x410 ?x229)))
 (let (($x91 (= ?x86 0)))
 (and $x91 (or (not (= (* ?x428 ?x86) 0)) (not (= (* ?x655 ?x86) 0))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x374 (lambda ((x Int) (y Int) )(let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let ((?x229 (* y y)))
 (let ((?x226 (* (- 1) ?x229)))
 (let ((?x410 (* (- 3) (* x y y))))
 (let ((?x215 (* x x y y)))
 (let ((?x320 (* (- 3) ?x215)))
 (let ((?x345 (* (- 1) (* x x x y y))))
 (let ((?x344 (* (- 1) (* x x x))))
 (let ((?x129 (+ 1 x)))
 (let ((?x434 (+ (- 1) y)))
 (let ((?x187 (* (- 1) (* ?x434 ?x434 ?x434 ?x129 ?x129 ?x129))))
 (let ((?x184 (* x x x y)))
 (let ((?x317 (* 2 ?x184)))
 (let ((?x152 (* x x)))
 (let ((?x600 (* (- 4) ?x152)))
 (let ((?x426 (* 7 (* x x y))))
 (let ((?x139 (* x y)))
 (let ((?x599 (* 8 ?x139)))
 (let ((?x422 (* 3 y)))
 (let ((?x602 (* (- 5) x)))
 (let ((?x147 (+ (- 2) ?x602 ?x422 ?x599 ?x426 ?x600 ?x317 ?x187 ?x344 ?x345 ?x320 ?x410 ?x226)))
 (let ((?x379 (* 3 ?x215)))
 (let ((?x375 (* (- 2) ?x184)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125))))
 (let ((?x427 (* 4 ?x152)))
 (let ((?x424 (* (- 8) ?x139)))
 (let ((?x369 (+ 2 ?x602 ?x422 ?x424 ?x426 ?x427 ?x286 ?x375 ?x344 ?x345 ?x379 ?x410 ?x229)))
 (let (($x91 (= ?x86 0)))
 (let (($x592 (and $x91 (or (not (= (* ?x369 ?x86) 0)) (not (= (* ?x147 ?x86) 0))))))
 (let ((?x134 (* (- 1) (* x 1))))
 (let ((?x421 (* (- 4) x)))
 (let ((?x655 (+ (- 2) ?x421 ?x422 ?x134 ?x599 ?x426 ?x600 ?x317 ?x187 ?x344 ?x345 ?x320 ?x410 ?x226)))
 (let ((?x428 (+ 2 ?x421 ?x422 ?x134 ?x424 ?x426 ?x427 ?x286 ?x375 ?x344 ?x345 ?x379 ?x410 ?x229)))
 (let (($x509 (and $x91 (or (not (= (* ?x428 ?x86) 0)) (not (= (* ?x655 ?x86) 0))))))
 (rewrite (= $x509 $x592)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x363 (exists ((x Int) (y Int) )(! (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x590 (+ x ?x65 ?x72 y)))
 (let ((?x129 (+ 1 x)))
 (let ((?x434 (+ (- 1) y)))
 (let ((?x187 (* (- 1) (* ?x434 ?x434 ?x434 ?x129 ?x129 ?x129))))
 (let ((?x225 (* (+ (* ?x434 ?x129 ?x129) ?x187 (* (- 1) (* ?x434 ?x434 ?x129 ?x129 ?x129))) ?x590)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125))))
 (let ((?x199 (* (+ (* ?x81 ?x81 ?x125) ?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125))) ?x590)))
 (and (= ?x590 0) (or (not (= ?x199 0)) (not (= ?x225 0))))))))))))))) :qid k!27))
 ))
 (let ((?x183 (lambda ((x Int) (y Int) )(let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let ((?x229 (* y y)))
 (let ((?x226 (* (- 1) ?x229)))
 (let ((?x410 (* (- 3) (* x y y))))
 (let ((?x215 (* x x y y)))
 (let ((?x320 (* (- 3) ?x215)))
 (let ((?x345 (* (- 1) (* x x x y y))))
 (let ((?x344 (* (- 1) (* x x x))))
 (let ((?x129 (+ 1 x)))
 (let ((?x434 (+ (- 1) y)))
 (let ((?x187 (* (- 1) (* ?x434 ?x434 ?x434 ?x129 ?x129 ?x129))))
 (let ((?x184 (* x x x y)))
 (let ((?x317 (* 2 ?x184)))
 (let ((?x152 (* x x)))
 (let ((?x600 (* (- 4) ?x152)))
 (let ((?x426 (* 7 (* x x y))))
 (let ((?x139 (* x y)))
 (let ((?x599 (* 8 ?x139)))
 (let ((?x134 (* (- 1) (* x 1))))
 (let ((?x422 (* 3 y)))
 (let ((?x421 (* (- 4) x)))
 (let ((?x655 (+ (- 2) ?x421 ?x422 ?x134 ?x599 ?x426 ?x600 ?x317 ?x187 ?x344 ?x345 ?x320 ?x410 ?x226)))
 (let ((?x379 (* 3 ?x215)))
 (let ((?x375 (* (- 2) ?x184)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125))))
 (let ((?x427 (* 4 ?x152)))
 (let ((?x424 (* (- 8) ?x139)))
 (let ((?x428 (+ 2 ?x421 ?x422 ?x134 ?x424 ?x426 ?x427 ?x286 ?x375 ?x344 ?x345 ?x379 ?x410 ?x229)))
 (let (($x91 (= ?x86 0)))
 (let (($x509 (and $x91 (or (not (= (* ?x428 ?x86) 0)) (not (= (* ?x655 ?x86) 0))))))
 (let ((?x590 (+ x ?x65 ?x72 y)))
 (let ((?x225 (* (+ (* ?x434 ?x129 ?x129) ?x187 (* (- 1) (* ?x434 ?x434 ?x129 ?x129 ?x129))) ?x590)))
 (let ((?x199 (* (+ (* ?x81 ?x81 ?x125) ?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125))) ?x590)))
 (let (($x98 (and (= ?x590 0) (or (not (= ?x199 0)) (not (= ?x225 0))))))
 (rewrite (= $x98 $x509)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((x Int) (y Int) )(! (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x56 (- (- (* ?x47 ?x47 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50)) (* ?x47 ?x47 ?x47 ?x50 ?x50))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (- (* ?x34 ?x34 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38)) (* ?x34 ?x34 ?x34 ?x38 ?x38))))
 (let (($x60 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x56) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x60)))))))) :qid k!27))
 ))
 (let ((?x613 (lambda ((x Int) (y Int) )(let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x590 (+ x ?x65 ?x72 y)))
 (let ((?x129 (+ 1 x)))
 (let ((?x434 (+ (- 1) y)))
 (let ((?x187 (* (- 1) (* ?x434 ?x434 ?x434 ?x129 ?x129 ?x129))))
 (let ((?x225 (* (+ (* ?x434 ?x129 ?x129) ?x187 (* (- 1) (* ?x434 ?x434 ?x129 ?x129 ?x129))) ?x590)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125))))
 (let ((?x199 (* (+ (* ?x81 ?x81 ?x125) ?x286 (* (- 1) (* ?x81 ?x81 ?x81 ?x125 ?x125))) ?x590)))
 (let (($x98 (and (= ?x590 0) (or (not (= ?x199 0)) (not (= ?x225 0))))))
 (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x56 (- (- (* ?x47 ?x47 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50)) (* ?x47 ?x47 ?x47 ?x50 ?x50))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (- (* ?x34 ?x34 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38)) (* ?x34 ?x34 ?x34 ?x38 ?x38))))
 (let (($x60 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x56) 0)))))
 (let (($x61 (and (= (+ (- (- x y00) x00) y) 0) $x60)))
 (rewrite (= $x61 $x98)))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x334 (mp (mp @x63 (quant-intro (proof-bind ?x613) (= $x62 $x363)) $x363) (rewrite (= $x363 $x363)) $x363)))
 (let ((@x525 (mp (mp @x334 (quant-intro (proof-bind ?x183) (= $x363 $x126)) $x126) (quant-intro (proof-bind ?x374) (= $x126 $x306)) $x306)))
 (let ((@x266 (mp (mp~ @x525 (sk (~ $x306 $x594)) $x594) (rewrite (= $x594 $x385)) $x385)))
 (let ((@x303 (and-elim @x266 $x233)))
 (let ((@x584 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x233) $x359)) @x303 $x359)))
 (let (($x367 (<= ?x235 0)))
 (let ((@x82 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x233) $x367)) @x303 $x367)))
 (let (($x238 (not (<= ?x149 0))))
 (let (($x341 (>= ?x149 0)))
 (let (($x366 (>= ?x236 0)))
 (let (($x371 (<= ?x236 0)))
 (let ((@x449 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x97 (not $x371) (not $x366))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x371)) @x82 @x584 false) $x371) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x366)) @x82 @x584 false) $x366) $x97)))
 (let ((@x285 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x290 $x238 (not $x341))) (unit-resolution (and-elim @x266 $x342) @x449 $x293) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x341)) @x82 @x584 false) $x341) $x238)))
 ((_ th-lemma arith farkas 1 1 1) @x285 @x82 @x584 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             168
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.66
 :memory                    3.17
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1212454
 :num-checks                1
 :propagations              14
 :rlimit-count              3165
 :time                      0.01
 :total-time                0.02)
