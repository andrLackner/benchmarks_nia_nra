unsat
((set-logic NIA)
(proof
(let (($x50 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (+ q 1)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (* ?x42 ?x43 ?x44 ?x44 ?x44 y00 ?x28 ?x44 ?x43 ?x43 ?x43 ?x44 ?x44 y00 y00 y00 ?x28 ?x44 ?x44 ?x44 y00 y00)))
 (let (($x46 (= ?x45 0)))
 (let (($x47 (not $x46)))
 (let (($x48 (or $x47)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x48)))))))))))) :qid k!29))
 ))
 (let (($x128 (= $x50 false)))
 (let (($x121 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x127 (elim-unused (= $x121 false))))
 (let (($x124 (= $x50 $x121)))
 (let ((?x139 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (+ q 1)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x45 (* ?x42 ?x43 ?x44 ?x44 ?x44 y00 ?x28 ?x44 ?x43 ?x43 ?x43 ?x44 ?x44 y00 y00 y00 ?x28 ?x44 ?x44 ?x44 y00 y00)))
 (let (($x46 (= ?x45 0)))
 (let (($x47 (not $x46)))
 (let (($x48 (or $x47)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x49 (and $x33 $x41 $x48)))
 (let (($x119 (= $x49 false)))
 (let (($x158 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x79 (= (+ (* (- 1) y00) y) 0)))
 (let (($x80 (and $x79 $x158 false)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x77 (+ r ?x55)))
 (let ((?x74 (+ 1 q)))
 (let ((?x83 (* 0 ?x74 ?x77 ?x77 ?x77 y00 (- 1) ?x77 ?x74 ?x74 ?x74 ?x77 ?x77 y00 y00 y00 (- 1) ?x77 ?x77 ?x77 y00 y00)))
 (let ((@x82 (rewrite (= ?x44 ?x77))))
 (let ((@x54 (rewrite (= ?x28 (- 1)))))
 (let ((@x76 (rewrite (= ?x43 ?x74))))
 (let ((@x71 (trans (monotonicity (rewrite (= ?x30 ?x55)) (= ?x42 (+ ?x55 y00))) (rewrite (= (+ ?x55 y00) 0)) (= ?x42 0))))
 (let ((@x85 (monotonicity @x71 @x76 @x82 @x82 @x82 @x54 @x82 @x76 @x76 @x76 @x82 @x82 @x54 @x82 @x82 @x82 (= ?x45 ?x83))))
 (let ((@x95 (monotonicity (trans @x85 (rewrite (= ?x83 0)) $x46) (= $x46 (= 0 0)))))
 (let ((@x102 (monotonicity (trans @x95 (rewrite (= (= 0 0) true)) (= $x46 true)) (= $x47 (not true)))))
 (let ((@x109 (monotonicity (trans @x102 (rewrite (= (not true) false)) (= $x47 false)) (= $x48 (or false)))))
 (let ((@x113 (trans @x109 (rewrite (= (or false) false)) (= $x48 false))))
 (let ((@x133 (monotonicity (rewrite (= $x33 $x79)) (rewrite (= $x41 $x158)) @x113 (= $x49 $x80))))
 (trans @x133 (rewrite (= $x80 false)) $x119))))))))))))))))))))))))))))))))
 ))
 (let ((@x51 (asserted $x50)))
 (mp @x51 (trans (quant-intro (proof-bind ?x139) $x124) @x127 $x128) false))))))))))

(:max-memory   19.04
 :memory       19.04
 :num-allocs   237360
 :rlimit-count 102
 :time         0.00
 :total-time   0.02)
