unsat
((set-logic NIA)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x593 (to_real x!2)))
 (let ((?x568 (to_real y!1)))
 (let ((?x319 (* ?x568 ?x593)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x705 (to_real z!0)))
 (let ((?x571 (+ ?x705 ?x122 ?x319 ?x202)))
 (let (($x674 (>= ?x571 0.0)))
 (let ((?x169 (+ (* (- 1.0) (to_real (* x00 y00))) ?x116)))
 (let (($x96 (<= ?x169 0.0)))
 (let (($x561 (= ?x169 0.0)))
 (let ((@x92 ((_ th-lemma arith) $x561)))
 (let ((?x84 (+ (* (- 1.0) (to_real (* x!2 y!1))) ?x319)))
 (let (($x243 (>= ?x84 0.0)))
 (let (($x190 (= ?x84 0.0)))
 (let ((@x698 ((_ th-lemma arith) $x190)))
 (let ((?x89 (* x00 y00)))
 (let ((?x660 (+ z00 ?x89 (* (- 1) z!0) (* (- 1) (* x!2 y!1)))))
 (let (($x581 (<= ?x660 0)))
 (let (($x121 (= 0 ?x660)))
 (let ((@x223 (symm (commutativity (= $x121 (= ?x660 0))) (= (= ?x660 0) $x121))))
 (let (($x101 (= ?x660 0)))
 (let ((?x682 (* (- 4.0) (* ?x593 ?x593 ?x593 ?x593 ?x705))))
 (let ((?x688 (* (- 2.0) (* ?x593 ?x593 ?x593 ?x593 ?x593))))
 (let ((?x711 (* 4.0 (* ?x593 ?x593 ?x705))))
 (let ((?x715 (* (- 8.0) (* ?x593 ?x593 ?x593 ?x705))))
 (let ((?x713 (* (- 8.0) (* ?x593 ?x593 ?x593 ?x593))))
 (let ((?x589 (* 4.0 (* ?x593 ?x593 ?x593))))
 (let ((?x498 (* ?x593 ?x593 ?x593 ?x705 ?x705)))
 (let ((?x500 (* (- 2.0) ?x498)))
 (let ((?x241 (+ (* (- 2.0) (* ?x568 ?x568 ?x593 ?x593 ?x593 ?x593 ?x593)) (* 8.0 (* ?x568 ?x593 ?x593 ?x593 ?x593 ?x705)) (* 4.0 (* ?x568 ?x593 ?x593 ?x593 ?x705 ?x705)) ?x500 ?x589 ?x713 ?x715 ?x711 (* (- 2.0) (* ?x568 ?x568 ?x593 ?x593 ?x593 ?x705 ?x705)) ?x688 (* (- 4.0) (* ?x568 ?x568 ?x593 ?x593 ?x593 ?x593 ?x705)) (* 4.0 (* ?x568 ?x593 ?x593 ?x593 ?x593 ?x593)) ?x682)))
 (let (($x666 (= (* ?x241 (+ ?x202 ?x122 ?x319 ?x705)) 0.0)))
 (let (($x617 (not $x666)))
 (let ((?x579 (+ (* 8.0 (* ?x111 ?x115 ?x593 ?x593 ?x593 ?x705)) (* (- 8.0) (* ?x568 ?x593 ?x593 ?x593 ?x593 ?x705)) (* 8.0 (* ?x48 ?x593 ?x593 ?x593 ?x705)) (* (- 4.0) (* ?x111 ?x115 ?x593 ?x593 ?x705)) (* 2.0 (* ?x111 ?x115 ?x568 ?x568 ?x593 ?x593 ?x593 ?x705 ?x705)) (* 2.0 (* ?x48 ?x568 ?x568 ?x593 ?x593 ?x593 ?x705 ?x705)) (* (- 4.0) (* ?x48 ?x593 ?x593 ?x705)) (* (- 2.0) (* ?x568 ?x568 ?x568 ?x593 ?x593 ?x593 ?x593 ?x705 ?x705)) (* (- 8.0) ?x498) (* 4.0 (* ?x568 ?x593 ?x593 ?x593 ?x705)) (* (- 2.0) (* ?x568 ?x568 ?x593 ?x593 ?x593 ?x705 ?x705 ?x705)) (* 4.0 (* ?x593 ?x593 ?x705 ?x705)))))
 (let (($x600 (= ?x579 0.0)))
 (let (($x607 (not $x600)))
 (let (($x88 (or $x607 $x617)))
 (let (($x246 (and $x101 $x88)))
 (let ((?x619 (* 8.0 (* ?x593 ?x593 ?x593 ?x593 ?x705 ?x568))))
 (let ((?x395 (+ ?x619 (* 8.0 ?x498) (* 2.0 (* ?x593 ?x593 ?x593 ?x705 ?x705 ?x705 ?x568 ?x568)) (* (- 2.0) (* ?x593 ?x593 ?x593 ?x705 ?x705 ?x48 ?x568 ?x568)) (* (- 2.0) (* ?x593 ?x593 ?x593 ?x705 ?x705 ?x568 ?x568 ?x111 ?x115)) (* 2.0 (* ?x593 ?x593 ?x593 ?x593 ?x705 ?x705 ?x568 ?x568 ?x568)) (* (- 4.0) (* ?x593 ?x593 ?x705 ?x705)) (* 4.0 (* ?x593 ?x593 ?x705 ?x48)) (* 4.0 (* ?x593 ?x593 ?x705 ?x111 ?x115)) (* (- 4.0) (* ?x593 ?x593 ?x593 ?x705 ?x568)) (* (- 8.0) (* ?x593 ?x593 ?x593 ?x705 ?x48)) (* (- 8.0) (* ?x593 ?x593 ?x593 ?x705 ?x111 ?x115)))))
 (let ((?x560 (+ ?x688 (* 4.0 (* ?x593 ?x593 ?x593 ?x593 ?x593 ?x568)) (* (- 2.0) (* ?x593 ?x593 ?x593 ?x593 ?x593 ?x568 ?x568)) ?x682 ?x619 (* (- 4.0) (* ?x593 ?x593 ?x593 ?x593 ?x705 ?x568 ?x568)) ?x500 (* 4.0 (* ?x593 ?x593 ?x593 ?x705 ?x705 ?x568)) (* (- 2.0) (* ?x593 ?x593 ?x593 ?x705 ?x705 ?x568 ?x568)) ?x589 ?x711 ?x713 ?x715)))
 (let (($x690 (or (not (= (* ?x560 (+ ?x705 ?x202 ?x122 (* ?x593 ?x568))) 0.0)) (not (= ?x395 0.0)))))
 (let (($x284 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x89)) 0) $x690)))
 (let (($x641 (exists ((x Int) (y Int) (z Int) )(! (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x419 (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64))))
 (let ((?x736 (+ ?x419 (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 (to_real z00) ?x64 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x111 ?x115)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x46 (to_real z00))) (* 4.0 (* ?x43 ?x43 ?x46 ?x111 ?x115)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 (to_real z00))) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 ?x111 ?x115)))))
 (let (($x742 (not (= ?x736 0.0))))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x569 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64 ?x64)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x46)) ?x419 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64)) (* 4.0 (* ?x43 ?x43 ?x43)) (* 4.0 (* ?x43 ?x43 ?x46)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)))))
 (let (($x94 (or (not (= (* ?x569 (+ ?x46 ?x202 ?x122 (* ?x43 ?x64))) 0.0)) $x742)))
 (let (($x117 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x117 $x94)))))))))))))))) :qid k!28))
 ))
 (let (($x639 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x714 (+ (* (- 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43 ?x43 ?x43)) (* 4.0 (* ?x46 ?x43 ?x43)) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let ((?x361 (+ ?x122 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x64)))) ?x46 ?x43 ?x202)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x455 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x661 (+ ?x46 ?x43)))
 (let ((?x634 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661 ?x661 ?x455 ?x455)) (* 4.0 (* ?x43 ?x43 ?x661)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661)))))
 (let (($x511 (or (not (= (* ?x634 ?x361) 0.0)) (not (= (* ?x714 (+ ?x122 (* ?x64 ?x43) ?x46 ?x202)) 0.0)))))
 (let (($x626 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x626 $x511)))))))))))))))))) :qid k!28))
 ))
 (let ((?x392 (lambda ((x Int) (y Int) (z Int) )(let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x419 (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64))))
 (let ((?x736 (+ ?x419 (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 (to_real z00) ?x64 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x111 ?x115)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x46 (to_real z00))) (* 4.0 (* ?x43 ?x43 ?x46 ?x111 ?x115)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 (to_real z00))) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 ?x111 ?x115)))))
 (let (($x742 (not (= ?x736 0.0))))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x569 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x64 ?x64)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x46)) ?x419 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x64 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x64 ?x64)) (* 4.0 (* ?x43 ?x43 ?x43)) (* 4.0 (* ?x43 ?x43 ?x46)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)))))
 (let (($x94 (or (not (= (* ?x569 (+ ?x46 ?x202 ?x122 (* ?x43 ?x64))) 0.0)) $x742)))
 (let (($x117 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x699 (and $x117 $x94)))
 (let ((?x714 (+ (* (- 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43 ?x43 ?x43)) (* 4.0 (* ?x46 ?x43 ?x43)) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let ((?x361 (+ ?x122 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x64)))) ?x46 ?x43 ?x202)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x455 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x661 (+ ?x46 ?x43)))
 (let ((?x634 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661 ?x661 ?x455 ?x455)) (* 4.0 (* ?x43 ?x43 ?x661)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661)))))
 (let (($x511 (or (not (= (* ?x634 ?x361) 0.0)) (not (= (* ?x714 (+ ?x122 (* ?x64 ?x43) ?x46 ?x202)) 0.0)))))
 (let (($x626 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x486 (and $x626 $x511)))
 (rewrite (= $x486 $x699))))))))))))))))))))))))))))
 ))
 (let (($x495 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x714 (+ (* (- 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43 ?x43 ?x43)) (* 4.0 (* ?x46 ?x43 ?x43)) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let ((?x361 (+ ?x122 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x64)))) ?x46 ?x43 ?x202)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x455 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x661 (+ ?x46 ?x43)))
 (let ((?x634 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661 ?x661 ?x455 ?x455)) (* 4.0 (* ?x43 ?x43 ?x661)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661)))))
 (let (($x511 (or (not (= (* ?x634 ?x361) 0.0)) (not (= (* ?x714 (+ ?x122 (* ?x64 ?x43) ?x46 ?x202)) 0.0)))))
 (let (($x566 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x566 $x511)))))))))))))))))) :qid k!28))
 ))
 (let ((?x665 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x714 (+ (* (- 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43 ?x43 ?x43)) (* 4.0 (* ?x46 ?x43 ?x43)) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let ((?x361 (+ ?x122 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x64)))) ?x46 ?x43 ?x202)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x455 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x661 (+ ?x46 ?x43)))
 (let ((?x634 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661 ?x661 ?x455 ?x455)) (* 4.0 (* ?x43 ?x43 ?x661)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661)))))
 (let (($x511 (or (not (= (* ?x634 ?x361) 0.0)) (not (= (* ?x714 (+ ?x122 (* ?x64 ?x43) ?x46 ?x202)) 0.0)))))
 (let (($x626 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x486 (and $x626 $x511)))
 (let (($x566 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x103 (and $x566 $x511)))
 (rewrite (= $x103 $x486)))))))))))))))))))))))
 ))
 (let (($x81 (exists ((x Int) (y Int) (z Int) )(! (let ((?x61 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x64 (to_real y)))
 (let ((?x65 (/ ?x64 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x28 (- 1)))
 (let ((?x51 (to_real ?x28)))
 (let ((?x72 (+ (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x65 ?x65 ?x46 ?x46) (to_real (* 2 x 2 x z)))))
 (let ((?x48 (to_real z00)))
 (let ((?x76 (* (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x65) ?x46) ?x48) (- ?x72 (to_real (* 2 x 2 x 2 x z))))))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x56 (+ (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x52 ?x52) (to_real (* 2 x 2 x ?x50)))))
 (let ((?x49 (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48)))
 (let ((?x60 (* ?x49 (- ?x56 (to_real (* 2 x 2 x 2 x ?x50))))))
 (and (= (- (+ (* ?x28 x00 y00) (* x y) z) z00) 0) (or (not (= ?x60 ?x61)) (not (= ?x76 ?x61))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x692 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x202 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x115 (to_real y00)))
 (let ((?x111 (to_real x00)))
 (let ((?x116 (* ?x111 ?x115)))
 (let ((?x122 (* (- 1.0) ?x116)))
 (let ((?x43 (to_real x)))
 (let ((?x64 (to_real y)))
 (let ((?x714 (+ (* (- 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43 ?x43 ?x43)) (* 4.0 (* ?x46 ?x43 ?x43)) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let ((?x361 (+ ?x122 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x64)))) ?x46 ?x43 ?x202)))
 (let ((?x167 (* (/ 1.0 2.0) ?x64)))
 (let ((?x455 (+ (- (/ 1.0 2.0)) ?x167)))
 (let ((?x661 (+ ?x46 ?x43)))
 (let ((?x634 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661 ?x661 ?x455 ?x455)) (* 4.0 (* ?x43 ?x43 ?x661)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x661)))))
 (let (($x511 (or (not (= (* ?x634 ?x361) 0.0)) (not (= (* ?x714 (+ ?x122 (* ?x64 ?x43) ?x46 ?x202)) 0.0)))))
 (let (($x566 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x103 (and $x566 $x511)))
 (let ((?x61 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x65 (/ ?x64 ?x41)))
 (let ((?x28 (- 1)))
 (let ((?x51 (to_real ?x28)))
 (let ((?x72 (+ (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x65 ?x65 ?x46 ?x46) (to_real (* 2 x 2 x z)))))
 (let ((?x76 (* (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x65) ?x46) ?x48) (- ?x72 (to_real (* 2 x 2 x 2 x z))))))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x56 (+ (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x52 ?x52) (to_real (* 2 x 2 x ?x50)))))
 (let ((?x49 (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48)))
 (let ((?x60 (* ?x49 (- ?x56 (to_real (* 2 x 2 x 2 x ?x50))))))
 (let (($x80 (and (= (- (+ (* ?x28 x00 y00) (* x y) z) z00) 0) (or (not (= ?x60 ?x61)) (not (= ?x76 ?x61))))))
 (rewrite (= $x80 $x103)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x483 (mp (mp @x82 (quant-intro (proof-bind ?x692) (= $x81 $x495)) $x495) (rewrite (= $x495 $x495)) $x495)))
 (let ((@x672 (mp (mp @x483 (quant-intro (proof-bind ?x665) (= $x495 $x639)) $x639) (quant-intro (proof-bind ?x392) (= $x639 $x641)) $x641)))
 (let ((@x556 (mp (mp~ @x672 (sk (~ $x641 $x284)) $x284) (rewrite (= $x284 $x246)) $x246)))
 (let ((@x677 (mp (and-elim @x556 $x101) @x223 $x121)))
 (let ((@x652 ((_ th-lemma arith) (hypothesis (not $x674)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x121) $x581)) @x677 $x581) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x190) $x243)) @x698 $x243) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x561) $x96)) @x92 $x96) false)))
 (let ((@x413 (lemma @x652 $x674)))
 (let (($x506 (<= ?x571 0.0)))
 (let (($x95 (>= ?x169 0.0)))
 (let (($x242 (<= ?x84 0.0)))
 (let (($x583 (>= ?x660 0)))
 (let ((@x605 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x121) $x583)) @x677 $x583) (hypothesis (not $x506)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x190) $x242)) @x698 $x242) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x561) $x95)) @x92 $x95) false)))
 (let ((@x681 (lemma @x605 $x506)))
 (let (($x501 (>= ?x579 0.0)))
 (let (($x226 (not $x501)))
 (let (($x689 (= 0.0 ?x579)))
 (let (($x273 (not $x689)))
 (let ((@x269 (monotonicity (symm (commutativity (= $x689 $x600)) (= $x600 $x689)) (= $x607 $x273))))
 (let (($x484 (= ?x571 0.0)))
 (let (($x508 (= 0.0 ?x571)))
 (let ((@x673 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x508 (not $x506) (not $x674))) @x681 @x413 $x508)))
 (let (($x685 (not $x484)))
 (let ((@x609 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x685 $x666)) (hypothesis $x617) $x685) (symm @x673 $x484) false)))
 (let ((@x272 (mp (unit-resolution (and-elim @x556 $x88) (lemma @x609 $x666) $x607) @x269 $x273)))
 (let (($x706 (<= ?x579 0.0)))
 (let ((@x703 (unit-resolution ((_ th-lemma arith) (or (not $x506) (not $x674) $x706)) (hypothesis (not $x706)) @x681 @x413 false)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x689 (not $x706) $x226)) (lemma @x703 $x706) @x272 $x226)))
 (unit-resolution ((_ th-lemma arith) (or $x501 (not $x674) (not $x506))) @x274 @x681 @x413 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      18
 :arith-eq-adapter               17
 :arith-bound-propagations-cheap 18
 :arith-bound-propagations-lp    4
 :arith-conflicts                28
 :arith-diseq                    20
 :arith-fixed-eqs                1
 :arith-gcd-calls                6
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    31
 :arith-make-feasible            35
 :arith-max-columns              61
 :arith-max-rows                 15
 :arith-nla-explanations         56
 :arith-nla-lemmas               25
 :arith-patches                  6
 :arith-patches-success          6
 :arith-propagations             18
 :arith-upper                    33
 :conflicts                      7
 :decisions                      37
 :del-clause                     73
 :final-checks                   28
 :max-memory                     4.16
 :memory                         3.15
 :mk-bool-var                    99
 :mk-clause                      95
 :num-allocs                     2619556
 :num-checks                     1
 :propagations                   42
 :rlimit-count                   4613
 :time                           0.01
 :total-time                     0.02)
