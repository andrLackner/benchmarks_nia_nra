unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun v!4 () Int)
(declare-fun x!3 () Int)
(declare-fun y!2 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x616 (* (- 1) (* y!2 y!2 y!2 v!4))))
 (let ((?x666 (* (- 1) (* x!3 u!5 u!5))))
 (let ((?x432 (* x!3 x!3 v!4 u!5 u!5)))
 (let ((?x98 (* (- 1) (* x!3 x!3 y!2 v!4 v!4 v!4 u!5 u!5))))
 (let ((?x95 (* x!3 x!3 x!3 y!2 v!4)))
 (let ((?x724 (+ ?x95 (* (- 2) (* x!3 x!3 y!2 v!4 v!4 v!4 v!4 u!5)) ?x98 ?x432 (* (- 1) (* x!3 x!3 y!2 v!4 v!4 v!4 v!4 v!4)) (* 2 (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5)) (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4) (* x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5) (* (- 3) (* x!3 x!3 y!2 v!4)) (* 3 (* x!3 y!2 y!2 v!4)) (* (- 1) (* x!3 x!3 x!3 x!3 v!4)) ?x666 ?x616 (* 2 (* x!3 x!3 v!4 v!4 u!5)) (* x!3 x!3 v!4 v!4 v!4) (* (- 1) (* x!3 v!4 v!4)) (* x!3 x!3 x!3 v!4) (* (- 2) (* x!3 v!4 u!5)))))
 (let ((?x632 (* (- 1) k!10)))
 (let ((?x579 (* (- 1) k!00)))
 (let ((?x447 (+ (* y!2 v!4) ?x579 (* x!3 u!5) ?x632)))
 (let (($x542 (= (* ?x447 ?x724) 0)))
 (let (($x96 (<= ?x447 0)))
 (let (($x518 (= ?x447 0)))
 (let ((?x289 (+ (* 3 (* x!3 y!2 y!2 y!2 u!5)) ?x95 (* (- 3) (* y!2 y!2 y!2 v!4 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 v!4 v!4 u!5 u!5 u!5)) (* x!3 x!3 u!5 u!5 u!5) (* (- 1) (* y!2 y!2 y!2 y!2 v!4)) (* (- 3) (* x!3 x!3 y!2 y!2 v!4)) (* (- 2) (* x!3 y!2 v!4 u!5 u!5)) (* y!2 y!2 u!5 u!5 u!5) (* (- 2) (* x!3 y!2 u!5 u!5 u!5)) (* y!2 y!2 v!4 u!5 u!5) (* y!2 u!5 u!5) (* (- 1) (* y!2 y!2 y!2 u!5)) (* (- 1) (* y!2 y!2 y!2 v!4 v!4 v!4 u!5 u!5)) (* 6 (* x!3 y!2 y!2 v!4 v!4 u!5 u!5 u!5)) ?x98 ?x432 (* 2 (* x!3 y!2 y!2 v!4 v!4 v!4 u!5 u!5)) (* x!3 x!3 x!3 y!2 u!5) (* (- 3) (* x!3 x!3 y!2 y!2 u!5)) (* (- 3) (* x!3 x!3 y!2 v!4 u!5 u!5 u!5 u!5)) ?x666 ?x616 (* 3 (* x!3 y!2 y!2 y!2 v!4)) (* (- 1) (* x!3 x!3 y!2 u!5 u!5 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* x!3 x!3 y!2 v!4 v!4 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 y!2 u!5)) (* 2 (* x!3 y!2 y!2 u!5 u!5 u!5 u!5 u!5)) (* 6 (* x!3 y!2 y!2 v!4 u!5 u!5 u!5 u!5)))))
 (let ((?x347 (* ?x447 ?x289)))
 (let (($x536 (= ?x347 0)))
 (let (($x541 (or (not $x542) (not $x536))))
 (let (($x389 (and $x518 $x541)))
 (let ((?x775 (* (- 1) (* v!4 y!2 y!2 y!2))))
 (let ((?x682 (* (- 1) (* u!5 u!5 x!3))))
 (let ((?x930 (* u!5 u!5 v!4 x!3 x!3)))
 (let ((?x931 (* (- 1) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x812 (* v!4 x!3 x!3 x!3 y!2)))
 (let ((?x277 (+ (* u!5 x!3 x!3 x!3 y!2) ?x812 (* (- 3) (* u!5 x!3 x!3 y!2 y!2)) (* (- 3) (* v!4 x!3 x!3 y!2 y!2)) (* 3 (* u!5 x!3 y!2 y!2 y!2)) (* 3 (* v!4 x!3 y!2 y!2 y!2)) (* (- 1) (* u!5 y!2 y!2 y!2 y!2)) (* (- 1) (* v!4 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) ?x931 (* 2 (* u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) (* 2 (* u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2)) (* u!5 u!5 u!5 x!3 x!3) ?x930 (* (- 2) (* u!5 u!5 u!5 x!3 y!2)) (* (- 2) (* u!5 u!5 v!4 x!3 y!2)) (* u!5 u!5 u!5 y!2 y!2) (* u!5 u!5 v!4 y!2 y!2) ?x682 (* u!5 u!5 y!2) (* (- 1) (* u!5 y!2 y!2 y!2)) ?x775)))
 (let ((?x113 (+ (* u!5 x!3) (* v!4 y!2) ?x579 ?x632)))
 (let ((?x290 (+ (* (- 2) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3) (* 2 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3) ?x812 ?x931 ?x930 ?x682 (* (- 1) (* v!4 x!3 x!3 x!3 x!3)) ?x775 (* 2 (* u!5 v!4 v!4 x!3 x!3)) (* v!4 v!4 v!4 x!3 x!3) (* (- 2) (* u!5 v!4 x!3)) (* (- 1) (* v!4 v!4 x!3)) (* v!4 x!3 x!3 x!3) (* (- 3) (* v!4 x!3 x!3 y!2)) (* 3 (* v!4 x!3 y!2 y!2)))))
 (let (($x376 (and (= ?x113 0) (or (not (= (* ?x113 ?x290) 0)) (not (= (* ?x113 ?x277) 0))))))
 (let (($x97 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x677 (* (- 1) (* v y y y))))
 (let ((?x637 (* (- 1) (* u u x))))
 (let ((?x548 (* u u v x x)))
 (let ((?x508 (* (- 1) (* u u v v v x x y))))
 (let ((?x158 (* v x x x y)))
 (let ((?x684 (+ (* u x x x y) ?x158 (* (- 3) (* u x x y y)) (* (- 3) (* v x x y y)) (* 3 (* u x y y y)) (* 3 (* v x y y y)) (* (- 1) (* u y y y y)) (* (- 1) (* v y y y y)) (* (- 1) (* u u u u u x x y)) (* (- 3) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) ?x508 (* 2 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 6 (* u u u v v x y y)) (* 2 (* u u v v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 3) (* u u u u v y y y)) (* (- 3) (* u u u v v y y y)) (* (- 1) (* u u v v v y y y)) (* u u u x x) ?x548 (* (- 2) (* u u u x y)) (* (- 2) (* u u v x y)) (* u u u y y) (* u u v y y) ?x637 (* u u y) (* (- 1) (* u y y y)) ?x677)))
 (let ((?x632 (* (- 1) k!10)))
 (let ((?x579 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x244 (+ ?x33 ?x34 ?x579 ?x632)))
 (let ((?x902 (+ (* (- 2) (* u v v v v x x y)) (* (- 1) (* v v v v v x x y)) (* u u v v v x x x) (* 2 (* u v v v v x x x)) (* v v v v v x x x) ?x158 ?x508 ?x548 ?x637 (* (- 1) (* v x x x x)) ?x677 (* 2 (* u v v x x)) (* v v v x x) (* (- 2) (* u v x)) (* (- 1) (* v v x)) (* v x x x) (* (- 3) (* v x x y)) (* 3 (* v x y y)))))
 (and (= ?x244 0) (or (not (= (* ?x244 ?x902) 0)) (not (= (* ?x244 ?x684) 0)))))))))))))))) :qid k!29))
 ))
 (let (($x647 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x650 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x483 (+ (* ?x44 ?x650 ?x650 ?x650 y) (* (- 1) (* ?x44 ?x44 ?x44 ?x650 ?x650 y u u)) (* ?x44 ?x650 ?x650 u u) (* (- 1) (* ?x650 u u)) (* (- 1) (* ?x44 y y y)))))
 (let ((?x632 (* (- 1) k!10)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x496 (* ?x650 u)))
 (let ((?x579 (* (- 1) k!00)))
 (let ((?x138 (+ y (* (- 1) x))))
 (let ((?x205 (* (- 1) (* (+ u v) (+ u v) ?x138 x x v v v))))
 (let ((?x572 (+ (* ?x138 x x x v) ?x205 (* (+ u v) (+ u v) x x v) (* (- 1) (* (+ u v) (+ u v) x)) (* (- 1) (* ?x138 ?x138 ?x138 v)))))
 (let (($x653 (= (* (+ ?x579 (* (+ u v) x) (* ?x138 v) ?x632) ?x572) 0)))
 (let (($x558 (or (not $x653) (not (= (* (+ ?x579 ?x496 ?x45 ?x632) ?x483) 0)))))
 (let ((?x141 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x141 0) $x558)))))))))))))) :qid k!29))
 ))
 (let ((?x705 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x677 (* (- 1) (* v y y y))))
 (let ((?x637 (* (- 1) (* u u x))))
 (let ((?x548 (* u u v x x)))
 (let ((?x508 (* (- 1) (* u u v v v x x y))))
 (let ((?x158 (* v x x x y)))
 (let ((?x684 (+ (* u x x x y) ?x158 (* (- 3) (* u x x y y)) (* (- 3) (* v x x y y)) (* 3 (* u x y y y)) (* 3 (* v x y y y)) (* (- 1) (* u y y y y)) (* (- 1) (* v y y y y)) (* (- 1) (* u u u u u x x y)) (* (- 3) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) ?x508 (* 2 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 6 (* u u u v v x y y)) (* 2 (* u u v v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 3) (* u u u u v y y y)) (* (- 3) (* u u u v v y y y)) (* (- 1) (* u u v v v y y y)) (* u u u x x) ?x548 (* (- 2) (* u u u x y)) (* (- 2) (* u u v x y)) (* u u u y y) (* u u v y y) ?x637 (* u u y) (* (- 1) (* u y y y)) ?x677)))
 (let ((?x632 (* (- 1) k!10)))
 (let ((?x579 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x244 (+ ?x33 ?x34 ?x579 ?x632)))
 (let ((?x902 (+ (* (- 2) (* u v v v v x x y)) (* (- 1) (* v v v v v x x y)) (* u u v v v x x x) (* 2 (* u v v v v x x x)) (* v v v v v x x x) ?x158 ?x508 ?x548 ?x637 (* (- 1) (* v x x x x)) ?x677 (* 2 (* u v v x x)) (* v v v x x) (* (- 2) (* u v x)) (* (- 1) (* v v x)) (* v x x x) (* (- 3) (* v x x y)) (* 3 (* v x y y)))))
 (let (($x1173 (and (= ?x244 0) (or (not (= (* ?x244 ?x902) 0)) (not (= (* ?x244 ?x684) 0))))))
 (let ((?x650 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x483 (+ (* ?x44 ?x650 ?x650 ?x650 y) (* (- 1) (* ?x44 ?x44 ?x44 ?x650 ?x650 y u u)) (* ?x44 ?x650 ?x650 u u) (* (- 1) (* ?x650 u u)) (* (- 1) (* ?x44 y y y)))))
 (let ((?x138 (+ y (* (- 1) x))))
 (let ((?x205 (* (- 1) (* (+ u v) (+ u v) ?x138 x x v v v))))
 (let ((?x572 (+ (* ?x138 x x x v) ?x205 (* (+ u v) (+ u v) x x v) (* (- 1) (* (+ u v) (+ u v) x)) (* (- 1) (* ?x138 ?x138 ?x138 v)))))
 (let (($x653 (= (* (+ ?x579 (* (+ u v) x) (* ?x138 v) ?x632) ?x572) 0)))
 (let (($x558 (or (not $x653) (not (= (* (+ ?x579 (* ?x650 u) (* ?x44 y) ?x632) ?x483) 0)))))
 (let ((?x141 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x651 (and (= ?x141 0) $x558)))
 (rewrite (= $x651 $x1173))))))))))))))))))))))))))
 ))
 (let (($x212 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x650 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x483 (+ (* ?x44 ?x650 ?x650 ?x650 y) (* (- 1) (* ?x44 ?x44 ?x44 ?x650 ?x650 y u u)) (* ?x44 ?x650 ?x650 u u) (* (- 1) (* ?x650 u u)) (* (- 1) (* ?x44 y y y)))))
 (let ((?x632 (* (- 1) k!10)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x496 (* ?x650 u)))
 (let ((?x579 (* (- 1) k!00)))
 (let ((?x138 (+ y (* (- 1) x))))
 (let ((?x205 (* (- 1) (* (+ u v) (+ u v) ?x138 x x v v v))))
 (let ((?x572 (+ (* ?x138 x x x v) ?x205 (* (+ u v) (+ u v) x x v) (* (- 1) (* (+ u v) (+ u v) x)) (* (- 1) (* ?x138 ?x138 ?x138 v)))))
 (let (($x653 (= (* (+ ?x579 (* (+ u v) x) (* ?x138 v) ?x632) ?x572) 0)))
 (let (($x558 (or (not $x653) (not (= (* (+ ?x579 ?x496 ?x45 ?x632) ?x483) 0)))))
 (and (= (+ ?x579 (* x u) (* y v) ?x632) 0) $x558))))))))))))) :qid k!29))
 ))
 (let ((?x515 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x650 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x483 (+ (* ?x44 ?x650 ?x650 ?x650 y) (* (- 1) (* ?x44 ?x44 ?x44 ?x650 ?x650 y u u)) (* ?x44 ?x650 ?x650 u u) (* (- 1) (* ?x650 u u)) (* (- 1) (* ?x44 y y y)))))
 (let ((?x632 (* (- 1) k!10)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x496 (* ?x650 u)))
 (let ((?x579 (* (- 1) k!00)))
 (let ((?x138 (+ y (* (- 1) x))))
 (let ((?x205 (* (- 1) (* (+ u v) (+ u v) ?x138 x x v v v))))
 (let ((?x572 (+ (* ?x138 x x x v) ?x205 (* (+ u v) (+ u v) x x v) (* (- 1) (* (+ u v) (+ u v) x)) (* (- 1) (* ?x138 ?x138 ?x138 v)))))
 (let (($x653 (= (* (+ ?x579 (* (+ u v) x) (* ?x138 v) ?x632) ?x572) 0)))
 (let (($x558 (or (not $x653) (not (= (* (+ ?x579 ?x496 ?x45 ?x632) ?x483) 0)))))
 (let ((?x141 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x651 (and (= ?x141 0) $x558)))
 (let (($x528 (and (= (+ ?x579 (* x u) (* y v) ?x632) 0) $x558)))
 (rewrite (= $x528 $x651))))))))))))))))))
 ))
 (let (($x514 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x650 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x483 (+ (* ?x44 ?x650 ?x650 ?x650 y) (* (- 1) (* ?x44 ?x44 ?x44 ?x650 ?x650 y u u)) (* ?x44 ?x650 ?x650 u u) (* (- 1) (* ?x650 u u)) (* (- 1) (* ?x44 y y y)))))
 (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x496 (* ?x650 u)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let ((?x138 (+ y (* (- 1) x))))
 (let ((?x205 (* (- 1) (* (+ u v) (+ u v) ?x138 x x v v v))))
 (let ((?x572 (+ (* ?x138 x x x v) ?x205 (* (+ u v) (+ u v) x x v) (* (- 1) (* (+ u v) (+ u v) x)) (* (- 1) (* ?x138 ?x138 ?x138 v)))))
 (let (($x707 (= (* (+ ?x89 (* (+ u v) x) (* ?x138 v) ?x105) ?x572) 0)))
 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) (or (not $x707) (not (= (* (+ ?x89 ?x496 ?x45 ?x105) ?x483) 0)))))))))))))))) :qid k!29))
 ))
 (let ((?x153 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x650 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x483 (+ (* ?x44 ?x650 ?x650 ?x650 y) (* (- 1) (* ?x44 ?x44 ?x44 ?x650 ?x650 y u u)) (* ?x44 ?x650 ?x650 u u) (* (- 1) (* ?x650 u u)) (* (- 1) (* ?x44 y y y)))))
 (let ((?x632 (* (- 1) k!10)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x496 (* ?x650 u)))
 (let ((?x579 (* (- 1) k!00)))
 (let ((?x138 (+ y (* (- 1) x))))
 (let ((?x205 (* (- 1) (* (+ u v) (+ u v) ?x138 x x v v v))))
 (let ((?x572 (+ (* ?x138 x x x v) ?x205 (* (+ u v) (+ u v) x x v) (* (- 1) (* (+ u v) (+ u v) x)) (* (- 1) (* ?x138 ?x138 ?x138 v)))))
 (let (($x653 (= (* (+ ?x579 (* (+ u v) x) (* ?x138 v) ?x632) ?x572) 0)))
 (let (($x558 (or (not $x653) (not (= (* (+ ?x579 ?x496 ?x45 ?x632) ?x483) 0)))))
 (let (($x528 (and (= (+ ?x579 (* x u) (* y v) ?x632) 0) $x558)))
 (let ((?x486 (* (+ (* (- 1) (* u00 x00)) ?x496 ?x45 (* (- 1) (* v00 y00))) ?x483)))
 (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x143 (* ?x138 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let (($x237 (or (not (= (* (+ ?x89 ?x61 ?x143 ?x105) ?x572) 0)) (not (= ?x486 0)))))
 (let (($x808 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) $x237)))
 (rewrite (= $x808 $x528)))))))))))))))))))))))))
 ))
 (let (($x80 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x60 (+ u v)))
 (let ((?x71 (* ?x60 ?x60 x)))
 (let ((?x68 (- (* v x x x (- y x)) (* ?x60 ?x60 v v v x x (- y x)))))
 (let ((?x74 (- (- (+ ?x68 (* ?x60 ?x60 v x x)) ?x71) (* v (- y x) (- y x) (- y x)))))
 (let ((?x38 (* v00 y00)))
 (let ((?x65 (- (+ (* (- 1) u00 x00) (* ?x60 x) (* v (- y x))) ?x38)))
 (let ((?x44 (+ v u)))
 (let ((?x54 (* ?x44 y y y)))
 (let ((?x50 (- (* ?x44 (- x y) (- x y) (- x y) y) (* u u ?x44 ?x44 ?x44 (- x y) (- x y) y))))
 (let ((?x55 (- (+ ?x50 (* u u ?x44 (- x y) (- x y))) (* u u (- x y)))))
 (let ((?x47 (- (+ (* (- 1) u00 x00) (* u (- x y)) (* ?x44 y)) ?x38)))
 (let (($x78 (or (not (= (* ?x47 (- ?x55 ?x54)) 0)) (not (= (* ?x65 ?x74) 0)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 $x78)))))))))))))) :qid k!29))
 ))
 (let ((?x139 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x650 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x483 (+ (* ?x44 ?x650 ?x650 ?x650 y) (* (- 1) (* ?x44 ?x44 ?x44 ?x650 ?x650 y u u)) (* ?x44 ?x650 ?x650 u u) (* (- 1) (* ?x650 u u)) (* (- 1) (* ?x44 y y y)))))
 (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x496 (* ?x650 u)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let ((?x138 (+ y (* (- 1) x))))
 (let ((?x205 (* (- 1) (* (+ u v) (+ u v) ?x138 x x v v v))))
 (let ((?x572 (+ (* ?x138 x x x v) ?x205 (* (+ u v) (+ u v) x x v) (* (- 1) (* (+ u v) (+ u v) x)) (* (- 1) (* ?x138 ?x138 ?x138 v)))))
 (let (($x707 (= (* (+ ?x89 (* (+ u v) x) (* ?x138 v) ?x105) ?x572) 0)))
 (let (($x808 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) (or (not $x707) (not (= (* (+ ?x89 ?x496 ?x45 ?x105) ?x483) 0))))))
 (let ((?x60 (+ u v)))
 (let ((?x71 (* ?x60 ?x60 x)))
 (let ((?x68 (- (* v x x x (- y x)) (* ?x60 ?x60 v v v x x (- y x)))))
 (let ((?x74 (- (- (+ ?x68 (* ?x60 ?x60 v x x)) ?x71) (* v (- y x) (- y x) (- y x)))))
 (let ((?x65 (- (+ (* (- 1) u00 x00) (* ?x60 x) (* v (- y x))) ?x38)))
 (let ((?x54 (* ?x44 y y y)))
 (let ((?x50 (- (* ?x44 (- x y) (- x y) (- x y) y) (* u u ?x44 ?x44 ?x44 (- x y) (- x y) y))))
 (let ((?x55 (- (+ ?x50 (* u u ?x44 (- x y) (- x y))) (* u u (- x y)))))
 (let ((?x57 (* (- (+ (* (- 1) u00 x00) (* u (- x y)) ?x45) ?x38) (- ?x55 ?x54))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x79 (and $x41 (or (not (= ?x57 0)) (not (= (* ?x65 ?x74) 0))))))
 (rewrite (= $x79 $x808)))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x185 (mp (mp @x81 (quant-intro (proof-bind ?x139) (= $x80 $x514)) $x514) (rewrite (= $x514 $x514)) $x514)))
 (let ((@x506 (mp (mp @x185 (quant-intro (proof-bind ?x153) (= $x514 $x212)) $x212) (quant-intro (proof-bind ?x515) (= $x212 $x647)) $x647)))
 (let ((@x369 (mp~ (mp @x506 (quant-intro (proof-bind ?x705) (= $x647 $x97)) $x97) (sk (~ $x97 $x376)) $x376)))
 (let ((@x615 (mp @x369 (rewrite (= $x376 $x389)) $x389)))
 (let ((@x752 (and-elim @x615 $x518)))
 (let ((@x352 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x96)) @x752 $x96)))
 (let (($x634 (>= ?x447 0)))
 (let ((@x345 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x634)) @x752 $x634)))
 (let (($x430 (>= ?x347 0)))
 (let ((@x669 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x430)) @x345 @x352 false) $x430) @x345 @x352 $x536)))
 (unit-resolution (and-elim @x615 $x541) @x669 ((_ th-lemma arith eq-propagate 0 0 0 0) @x345 @x352 @x345 @x352 $x542) false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        6
 :arith-conflicts           1
 :arith-eq-adapter          3
 :arith-fixed-eqs           3
 :arith-num-rows            3
 :arith-pseudo-nonlinear    4
 :arith-tableau-max-columns 62
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                3
 :eliminated-applications   2
 :max-memory                3.69
 :memory                    3.21
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1092274
 :num-checks                1
 :propagations              6
 :rlimit-count              4267
 :time                      0.01
 :total-time                0.01)
