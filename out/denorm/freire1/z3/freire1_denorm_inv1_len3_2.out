unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x251 (* r!1 r!1)))
 (let ((?x87 (* 2 x!0)))
 (let ((?x89 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x72 (+ r00 ?x85 ?x101 ?x89 ?x87 ?x251)))
 (let (($x299 (<= ?x72 0)))
 (let (($x73 (= ?x72 0)))
 (let ((?x314 (* (- 1) (* r!1 r!1 x!0 x!0))))
 (let ((?x349 (* (- 2) (* r!1 x!0 x!0))))
 (let ((?x421 (* (- 1) (* x!0 x!0))))
 (let ((?x301 (* (- 1) (* r!1 r!1 r!1))))
 (let ((?x190 (* r!1 x!0)))
 (let ((?x161 (* 2 (* r!1 r!1 r!1 x!0))))
 (let ((?x156 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x275 (* 3 (* r!1 r!1 x!0))))
 (let ((?x340 (* (+ ?x275 ?x156 ?x161 ?x190 ?x301 ?x421 ?x349 ?x314) ?x72)))
 (let (($x109 (= ?x340 0)))
 (let (($x341 (not $x109)))
 (let (($x257 (and $x73 $x341)))
 (let ((?x291 (* (+ ?x190 ?x275 ?x301 ?x421 ?x349 ?x314 ?x156 ?x161) (+ ?x89 ?x87 r00 ?x251 ?x85 ?x101))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x365 (and (= (+ r!1 (* (- 2) x!0) ?x116 (* (- 1) ?x251) ?x35 ?x36) 0) (not (= ?x291 0)))))
 (let (($x368 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x420 (+ (* r x) (* 3 (* r r x)) (* (- 1) (* r r r)) (* (- 1) (* x x)) (* (- 2) (* r x x)) (* (- 1) (* r r x x)) (* (- 1) (* r r r r)) (* 2 (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let ((?x115 (* (- 2) x)))
 (let (($x119 (= (+ r ?x115 ?x116 ?x117 ?x35 ?x36) 0)))
 (and $x119 (not (= (* ?x420 ?x107) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x102 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x173 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x218 (+ x ?x64)))
 (let ((?x361 (+ 1 r)))
 (let ((?x414 (+ (* ?x361 ?x218) (* (- 1) (* ?x361 ?x361 ?x218)) (* (- 1) (* ?x361 ?x361 ?x218 ?x218)))))
 (let (($x360 (not (= (* ?x414 ?x173) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x360)))))))))))))))) :qid k!26))
 ))
 (let ((?x283 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x420 (+ (* r x) (* 3 (* r r x)) (* (- 1) (* r r r)) (* (- 1) (* x x)) (* (- 2) (* r x x)) (* (- 1) (* r r x x)) (* (- 1) (* r r r r)) (* 2 (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let ((?x115 (* (- 2) x)))
 (let (($x119 (= (+ r ?x115 ?x116 ?x117 ?x35 ?x36) 0)))
 (let (($x81 (and $x119 (not (= (* ?x420 ?x107) 0)))))
 (let ((?x173 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x405 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x ?x64) (+ x ?x64)))))
 (let ((?x414 (+ (* (+ 1 r) (+ x ?x64)) (* (- 1) (* (+ 1 r) (+ 1 r) (+ x ?x64))) ?x405)))
 (let (($x360 (not (= (* ?x414 ?x173) 0))))
 (let (($x264 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x360)))
 (rewrite (= $x264 $x81))))))))))))))))))))))
 ))
 (let (($x367 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x173 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x218 (+ x ?x64)))
 (let ((?x361 (+ 1 r)))
 (let ((?x414 (+ (* ?x361 ?x218) (* (- 1) (* ?x361 ?x361 ?x218)) (* (- 1) (* ?x361 ?x361 ?x218 ?x218)))))
 (let (($x360 (not (= (* ?x414 ?x173) 0))))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x360))))))))))) :qid k!26))
 ))
 (let ((?x346 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x173 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x218 (+ x ?x64)))
 (let ((?x361 (+ 1 r)))
 (let ((?x414 (+ (* ?x361 ?x218) (* (- 1) (* ?x361 ?x361 ?x218)) (* (- 1) (* ?x361 ?x361 ?x218 ?x218)))))
 (let (($x360 (not (= (* ?x414 ?x173) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x264 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x360)))
 (let (($x259 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) $x360)))
 (rewrite (= $x259 $x264))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x52 (- (* (+ r 1) (- x r)) (* (+ r 1) (+ r 1) (- x r)))))
 (let ((?x53 (- ?x52 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x53) 0)))))))))) :qid k!26))
 ))
 (let ((?x227 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x173 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x218 (+ x ?x64)))
 (let ((?x361 (+ 1 r)))
 (let ((?x414 (+ (* ?x361 ?x218) (* (- 1) (* ?x361 ?x361 ?x218)) (* (- 1) (* ?x361 ?x361 ?x218 ?x218)))))
 (let (($x360 (not (= (* ?x414 ?x173) 0))))
 (let (($x259 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x360)))
 (let ((?x52 (- (* (+ r 1) (- x r)) (* (+ r 1) (+ r 1) (- x r)))))
 (let ((?x53 (- ?x52 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x53) 0))))))
 (rewrite (= $x58 $x259))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x216 (mp (mp @x60 (quant-intro (proof-bind ?x227) (= $x59 $x367)) $x367) (rewrite (= $x367 $x367)) $x367)))
 (let ((@x214 (mp (mp @x216 (quant-intro (proof-bind ?x346) (= $x367 $x102)) $x102) (quant-intro (proof-bind ?x283) (= $x102 $x368)) $x368)))
 (let ((@x400 (mp (mp~ @x214 (sk (~ $x368 $x365)) $x365) (rewrite (= $x365 $x257)) $x257)))
 (let ((@x258 (and-elim @x400 $x73)))
 (let ((@x256 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x73) $x299)) @x258 $x299)))
 (let (($x300 (>= ?x72 0)))
 (let ((@x342 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x73) $x300)) @x258 $x300)))
 (let (($x380 (not (>= ?x340 0))))
 (let (($x302 (<= ?x340 0)))
 (let ((@x294 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x109 (not $x302) $x380)) (and-elim @x400 $x341) (or (not $x302) $x380))))
 (let ((@x285 (unit-resolution @x294 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x302)) @x342 @x256 false) $x302) $x380)))
 ((_ th-lemma arith farkas 1 1 1) @x285 @x342 @x256 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1051374
 :num-checks                1
 :propagations              4
 :rlimit-count              1513
 :time                      0.01
 :total-time                0.01)
