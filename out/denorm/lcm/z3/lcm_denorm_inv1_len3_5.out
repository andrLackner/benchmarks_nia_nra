unsat
((set-logic NIA)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x767 (+ k!00 k!10 (* (- 1) (* u!5 x!3)) (* (- 1) (* v!4 y!2)))))
 (let (($x342 (>= ?x767 0)))
 (let (($x856 (= ?x767 0)))
 (let ((?x672 (* v!4 y!2)))
 (let ((?x639 (* u!5 x!3)))
 (let ((?x461 (* (- 1) k!10)))
 (let ((?x259 (* (- 1) k!00)))
 (let ((?x848 (+ ?x259 ?x461 ?x639 ?x672)))
 (let ((?x888 (* (- 1) (* v!4 v!4 u!5 u!5 y!2 y!2 x!3 x!3))))
 (let ((?x765 (* (- 1) (* v!4 v!4 v!4 x!3 x!3))))
 (let ((?x828 (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x817 (* (- 1) (* v!4 v!4 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x802 (* (- 1) (* u!5 u!5 u!5 x!3 x!3))))
 (let ((?x768 (* v!4 u!5 y!2 y!2 y!2 x!3 x!3)))
 (let ((?x318 (+ (* (- 3) (* v!4 u!5 u!5 x!3 x!3)) (* (- 2) (* v!4 v!4 v!4 u!5 y!2 y!2 x!3 x!3)) (* 2 (* v!4 v!4 v!4 v!4 y!2 x!3 x!3 x!3)) ?x768 (* 3 (* v!4 u!5 y!2 x!3 x!3 x!3 x!3)) ?x802 ?x817 ?x828 ?x765 (* v!4 v!4 y!2 y!2 y!2 x!3 x!3) (* 3 (* v!4 v!4 y!2 x!3 x!3 x!3 x!3)) (* (- 1) (* v!4 u!5 x!3 x!3 x!3 x!3 x!3)) ?x888 (* (- 3) (* v!4 u!5 y!2 y!2 x!3 x!3 x!3)) (* (- 3) (* v!4 v!4 y!2 y!2 x!3 x!3 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 y!2 y!2 x!3 x!3)) (* (- 1) (* v!4 v!4 u!5 u!5 x!3 x!3 x!3 x!3)) (* (- 2) (* v!4 v!4 v!4 u!5 x!3 x!3 x!3 x!3)) (* (- 3) (* v!4 v!4 u!5 x!3 x!3)) (* 2 (* v!4 v!4 u!5 u!5 y!2 x!3 x!3 x!3)) (* 4 (* v!4 v!4 v!4 u!5 y!2 x!3 x!3 x!3)))))
 (let ((?x452 (* ?x318 ?x848)))
 (let (($x769 (= ?x452 0)))
 (let (($x454 (not $x769)))
 (let ((?x761 (* (- 1) (* u!5 u!5 u!5 y!2 y!2))))
 (let ((?x797 (* (- 1) (* u!5 u!5 u!5 u!5 y!2 y!2 y!2 y!2))))
 (let ((?x781 (* u!5 u!5 y!2 y!2 y!2 y!2 y!2)))
 (let ((?x927 (+ (* 2 (* u!5 u!5 u!5 y!2 x!3)) ?x768 (* (- 2) (* v!4 u!5 u!5 u!5 y!2 y!2 x!3 x!3)) ?x781 ?x797 ?x802 ?x761 (* u!5 u!5 y!2 y!2 y!2 x!3 x!3) (* (- 2) (* u!5 u!5 y!2 y!2 y!2 y!2 x!3)) (* (- 2) (* v!4 u!5 y!2 y!2 y!2 y!2 x!3)) (* v!4 u!5 y!2 y!2 y!2 y!2 y!2) (* (- 1) (* u!5 u!5 u!5 u!5 y!2 y!2 x!3 x!3)) ?x888 (* 2 (* u!5 u!5 u!5 u!5 y!2 y!2 y!2 x!3)) (* 4 (* v!4 u!5 u!5 u!5 y!2 y!2 y!2 x!3)) (* 2 (* v!4 v!4 u!5 u!5 y!2 y!2 y!2 x!3)) (* (- 2) (* v!4 u!5 u!5 u!5 y!2 y!2 y!2 y!2)) (* (- 1) (* v!4 v!4 u!5 u!5 y!2 y!2 y!2 y!2)))))
 (let ((?x931 (* ?x927 ?x848)))
 (let (($x861 (= ?x931 0)))
 (let (($x869 (or (not $x861) $x454)))
 (let (($x987 (and $x856 $x869)))
 (let ((?x681 (+ ?x639 ?x672 ?x259 ?x461)))
 (let ((?x787 (* (- 1) (* u!5 u!5 v!4 v!4 x!3 x!3 y!2 y!2))))
 (let ((?x796 (* u!5 v!4 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x840 (+ (* v!4 v!4 x!3 x!3 y!2 y!2 y!2) (* (- 1) (* u!5 v!4 x!3 x!3 x!3 x!3 x!3)) ?x796 ?x787 ?x802 (* 3 (* v!4 v!4 x!3 x!3 x!3 x!3 y!2)) (* 3 (* u!5 v!4 x!3 x!3 x!3 x!3 y!2)) ?x817 (* (- 3) (* u!5 v!4 x!3 x!3 x!3 y!2 y!2)) (* (- 3) (* v!4 v!4 x!3 x!3 x!3 y!2 y!2)) (* (- 2) (* u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 v!4 v!4 x!3 x!3 x!3 x!3)) (* (- 2) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3)) ?x828 (* 2 (* u!5 u!5 v!4 v!4 x!3 x!3 x!3 y!2)) (* 4 (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2)) (* 2 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 v!4 x!3 x!3)) (* (- 3) (* u!5 v!4 v!4 x!3 x!3)) ?x765)))
 (let ((?x806 (+ (* u!5 u!5 x!3 x!3 y!2 y!2 y!2) ?x796 (* (- 2) (* u!5 u!5 x!3 y!2 y!2 y!2 y!2)) (* (- 2) (* u!5 v!4 x!3 y!2 y!2 y!2 y!2)) ?x781 (* u!5 v!4 y!2 y!2 y!2 y!2 y!2) (* (- 1) (* u!5 u!5 u!5 u!5 x!3 x!3 y!2 y!2)) (* (- 2) (* u!5 u!5 u!5 v!4 x!3 x!3 y!2 y!2)) ?x787 (* 2 (* u!5 u!5 u!5 u!5 x!3 y!2 y!2 y!2)) (* 4 (* u!5 u!5 u!5 v!4 x!3 y!2 y!2 y!2)) (* 2 (* u!5 u!5 v!4 v!4 x!3 y!2 y!2 y!2)) ?x797 (* (- 2) (* u!5 u!5 u!5 v!4 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 v!4 v!4 y!2 y!2 y!2 y!2)) ?x802 (* 2 (* u!5 u!5 u!5 x!3 y!2)) ?x761)))
 (let (($x849 (and (= ?x681 0) (or (not (= (* ?x806 ?x681) 0)) (not (= (* ?x840 ?x681) 0))))))
 (let (($x250 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x461 (* (- 1) k!10)))
 (let ((?x259 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x192 (+ ?x33 ?x34 ?x259 ?x461)))
 (let ((?x405 (* (- 1) (* u u u x x))))
 (let ((?x327 (* (- 1) (* u u v v x x y y))))
 (let ((?x150 (* u v x x y y y)))
 (let ((?x728 (+ (* v v x x y y y) (* (- 1) (* u v x x x x x)) ?x150 ?x327 ?x405 (* 3 (* v v x x x x y)) (* 3 (* u v x x x x y)) (* (- 1) (* v v x x x x x)) (* (- 3) (* u v x x x y y)) (* (- 3) (* v v x x x y y)) (* (- 2) (* u v v v x x y y)) (* (- 1) (* v v v v x x y y)) (* (- 1) (* u u v v x x x x)) (* (- 2) (* u v v v x x x x)) (* (- 1) (* v v v v x x x x)) (* 2 (* u u v v x x x y)) (* 4 (* u v v v x x x y)) (* 2 (* v v v v x x x y)) (* (- 3) (* u u v x x)) (* (- 3) (* u v v x x)) (* (- 1) (* v v v x x)))))
 (let ((?x420 (+ (* u u x x y y y) ?x150 (* (- 2) (* u u x y y y y)) (* (- 2) (* u v x y y y y)) (* u u y y y y y) (* u v y y y y y) (* (- 1) (* u u u u x x y y)) (* (- 2) (* u u u v x x y y)) ?x327 (* 2 (* u u u u x y y y)) (* 4 (* u u u v x y y y)) (* 2 (* u u v v x y y y)) (* (- 1) (* u u u u y y y y)) (* (- 2) (* u u u v y y y y)) (* (- 1) (* u u v v y y y y)) ?x405 (* 2 (* u u u x y)) (* (- 1) (* u u u y y)))))
 (and (= ?x192 0) (or (not (= (* ?x420 ?x192) 0)) (not (= (* ?x728 ?x192) 0)))))))))))))) :qid k!29))
 ))
 (let (($x675 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x461 (* (- 1) k!10)))
 (let ((?x241 (+ y (* (- 1) x))))
 (let ((?x692 (* ?x241 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x259 (* (- 1) k!00)))
 (let ((?x236 (+ (* ?x56 ?x241 ?x241 ?x241 x x v) (* (- 1) (* ?x56 ?x56 ?x241 ?x241 x x v v)) (* (- 1) (* ?x56 ?x56 ?x56 x x)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x369 (+ x (* (- 1) y))))
 (let ((?x683 (* ?x369 u)))
 (let ((?x194 (+ (* ?x44 ?x369 ?x369 y y y u) (* (- 1) (* ?x44 ?x44 ?x369 ?x369 y y u u)) (* (- 1) (* ?x369 ?x369 u u u)))))
 (let (($x699 (or (not (= (* ?x194 (+ ?x259 ?x683 ?x45 ?x461)) 0)) (not (= (* ?x236 (+ ?x259 ?x57 ?x692 ?x461)) 0)))))
 (let ((?x174 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x174 0) $x699))))))))))))))) :qid k!29))
 ))
 (let ((?x198 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x461 (* (- 1) k!10)))
 (let ((?x259 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x192 (+ ?x33 ?x34 ?x259 ?x461)))
 (let ((?x405 (* (- 1) (* u u u x x))))
 (let ((?x327 (* (- 1) (* u u v v x x y y))))
 (let ((?x150 (* u v x x y y y)))
 (let ((?x728 (+ (* v v x x y y y) (* (- 1) (* u v x x x x x)) ?x150 ?x327 ?x405 (* 3 (* v v x x x x y)) (* 3 (* u v x x x x y)) (* (- 1) (* v v x x x x x)) (* (- 3) (* u v x x x y y)) (* (- 3) (* v v x x x y y)) (* (- 2) (* u v v v x x y y)) (* (- 1) (* v v v v x x y y)) (* (- 1) (* u u v v x x x x)) (* (- 2) (* u v v v x x x x)) (* (- 1) (* v v v v x x x x)) (* 2 (* u u v v x x x y)) (* 4 (* u v v v x x x y)) (* 2 (* v v v v x x x y)) (* (- 3) (* u u v x x)) (* (- 3) (* u v v x x)) (* (- 1) (* v v v x x)))))
 (let ((?x420 (+ (* u u x x y y y) ?x150 (* (- 2) (* u u x y y y y)) (* (- 2) (* u v x y y y y)) (* u u y y y y y) (* u v y y y y y) (* (- 1) (* u u u u x x y y)) (* (- 2) (* u u u v x x y y)) ?x327 (* 2 (* u u u u x y y y)) (* 4 (* u u u v x y y y)) (* 2 (* u u v v x y y y)) (* (- 1) (* u u u u y y y y)) (* (- 2) (* u u u v y y y y)) (* (- 1) (* u u v v y y y y)) ?x405 (* 2 (* u u u x y)) (* (- 1) (* u u u y y)))))
 (let (($x1019 (and (= ?x192 0) (or (not (= (* ?x420 ?x192) 0)) (not (= (* ?x728 ?x192) 0))))))
 (let ((?x241 (+ y (* (- 1) x))))
 (let ((?x692 (* ?x241 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x236 (+ (* ?x56 ?x241 ?x241 ?x241 x x v) (* (- 1) (* ?x56 ?x56 ?x241 ?x241 x x v v)) (* (- 1) (* ?x56 ?x56 ?x56 x x)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x369 (+ x (* (- 1) y))))
 (let ((?x683 (* ?x369 u)))
 (let ((?x194 (+ (* ?x44 ?x369 ?x369 y y y u) (* (- 1) (* ?x44 ?x44 ?x369 ?x369 y y u u)) (* (- 1) (* ?x369 ?x369 u u u)))))
 (let (($x699 (or (not (= (* ?x194 (+ ?x259 ?x683 ?x45 ?x461)) 0)) (not (= (* ?x236 (+ ?x259 ?x57 ?x692 ?x461)) 0)))))
 (let ((?x174 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x685 (and (= ?x174 0) $x699)))
 (rewrite (= $x685 $x1019)))))))))))))))))))))))))))
 ))
 (let (($x169 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x461 (* (- 1) k!10)))
 (let ((?x241 (+ y (* (- 1) x))))
 (let ((?x692 (* ?x241 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x259 (* (- 1) k!00)))
 (let ((?x236 (+ (* ?x56 ?x241 ?x241 ?x241 x x v) (* (- 1) (* ?x56 ?x56 ?x241 ?x241 x x v v)) (* (- 1) (* ?x56 ?x56 ?x56 x x)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x369 (+ x (* (- 1) y))))
 (let ((?x683 (* ?x369 u)))
 (let ((?x194 (+ (* ?x44 ?x369 ?x369 y y y u) (* (- 1) (* ?x44 ?x44 ?x369 ?x369 y y u u)) (* (- 1) (* ?x369 ?x369 u u u)))))
 (let (($x699 (or (not (= (* ?x194 (+ ?x259 ?x683 ?x45 ?x461)) 0)) (not (= (* ?x236 (+ ?x259 ?x57 ?x692 ?x461)) 0)))))
 (and (= (+ ?x259 (* x u) (* y v) ?x461) 0) $x699)))))))))))))) :qid k!29))
 ))
 (let ((?x359 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x461 (* (- 1) k!10)))
 (let ((?x241 (+ y (* (- 1) x))))
 (let ((?x692 (* ?x241 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x259 (* (- 1) k!00)))
 (let ((?x236 (+ (* ?x56 ?x241 ?x241 ?x241 x x v) (* (- 1) (* ?x56 ?x56 ?x241 ?x241 x x v v)) (* (- 1) (* ?x56 ?x56 ?x56 x x)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x369 (+ x (* (- 1) y))))
 (let ((?x683 (* ?x369 u)))
 (let ((?x194 (+ (* ?x44 ?x369 ?x369 y y y u) (* (- 1) (* ?x44 ?x44 ?x369 ?x369 y y u u)) (* (- 1) (* ?x369 ?x369 u u u)))))
 (let (($x699 (or (not (= (* ?x194 (+ ?x259 ?x683 ?x45 ?x461)) 0)) (not (= (* ?x236 (+ ?x259 ?x57 ?x692 ?x461)) 0)))))
 (let ((?x174 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x685 (and (= ?x174 0) $x699)))
 (let (($x164 (and (= (+ ?x259 (* x u) (* y v) ?x461) 0) $x699)))
 (rewrite (= $x164 $x685)))))))))))))))))))
 ))
 (let (($x215 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x241 (+ y (* (- 1) x))))
 (let ((?x692 (* ?x241 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x236 (+ (* ?x56 ?x241 ?x241 ?x241 x x v) (* (- 1) (* ?x56 ?x56 ?x241 ?x241 x x v v)) (* (- 1) (* ?x56 ?x56 ?x56 x x)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x369 (+ x (* (- 1) y))))
 (let ((?x683 (* ?x369 u)))
 (let ((?x194 (+ (* ?x44 ?x369 ?x369 y y y u) (* (- 1) (* ?x44 ?x44 ?x369 ?x369 y y u u)) (* (- 1) (* ?x369 ?x369 u u u)))))
 (let (($x255 (or (not (= (* ?x194 (+ ?x81 ?x683 ?x45 ?x97)) 0)) (not (= (* ?x236 (+ ?x81 ?x57 ?x692 ?x97)) 0)))))
 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x255))))))))))))))) :qid k!29))
 ))
 (let ((?x162 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x461 (* (- 1) k!10)))
 (let ((?x241 (+ y (* (- 1) x))))
 (let ((?x692 (* ?x241 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x259 (* (- 1) k!00)))
 (let ((?x236 (+ (* ?x56 ?x241 ?x241 ?x241 x x v) (* (- 1) (* ?x56 ?x56 ?x241 ?x241 x x v v)) (* (- 1) (* ?x56 ?x56 ?x56 x x)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x369 (+ x (* (- 1) y))))
 (let ((?x683 (* ?x369 u)))
 (let ((?x194 (+ (* ?x44 ?x369 ?x369 y y y u) (* (- 1) (* ?x44 ?x44 ?x369 ?x369 y y u u)) (* (- 1) (* ?x369 ?x369 u u u)))))
 (let (($x699 (or (not (= (* ?x194 (+ ?x259 ?x683 ?x45 ?x461)) 0)) (not (= (* ?x236 (+ ?x259 ?x57 ?x692 ?x461)) 0)))))
 (let (($x164 (and (= (+ ?x259 (* x u) (* y v) ?x461) 0) $x699)))
 (let ((?x251 (* ?x236 (+ (* (- 1) (* u00 x00)) ?x57 ?x692 (* (- 1) (* v00 y00))))))
 (let ((?x230 (* ?x194 (+ (* (- 1) (* u00 x00)) ?x683 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x358 (* y v)))
 (let ((?x355 (* x u)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let (($x86 (and (= (+ ?x81 ?x355 ?x358 ?x97) 0) (or (not (= ?x230 0)) (not (= ?x251 0))))))
 (rewrite (= $x86 $x164)))))))))))))))))))))))))
 ))
 (let (($x72 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x56 (+ u v)))
 (let ((?x64 (* ?x56 ?x56 ?x56 x x)))
 (let ((?x65 (- (* ?x56 v x x (- y x) (- y x) (- y x)) (* ?x56 ?x56 v v x x (- y x) (- y x)))))
 (let ((?x38 (* v00 y00)))
 (let ((?x61 (- (+ (* (- 1) u00 x00) (* ?x56 x) (* v (- y x))) ?x38)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x51 (- (* u ?x44 ?x42 ?x42 y y y) (* u u ?x44 ?x44 ?x42 ?x42 y y))))
 (let ((?x53 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) (- ?x51 (* u u u ?x42 ?x42)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x53 0)) (not (= (* ?x61 (- ?x65 ?x64)) 0)))))))))))))) :qid k!29))
 ))
 (let ((?x689 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x241 (+ y (* (- 1) x))))
 (let ((?x692 (* ?x241 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x236 (+ (* ?x56 ?x241 ?x241 ?x241 x x v) (* (- 1) (* ?x56 ?x56 ?x241 ?x241 x x v v)) (* (- 1) (* ?x56 ?x56 ?x56 x x)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x369 (+ x (* (- 1) y))))
 (let ((?x683 (* ?x369 u)))
 (let ((?x194 (+ (* ?x44 ?x369 ?x369 y y y u) (* (- 1) (* ?x44 ?x44 ?x369 ?x369 y y u u)) (* (- 1) (* ?x369 ?x369 u u u)))))
 (let (($x255 (or (not (= (* ?x194 (+ ?x81 ?x683 ?x45 ?x97)) 0)) (not (= (* ?x236 (+ ?x81 ?x57 ?x692 ?x97)) 0)))))
 (let (($x86 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x255)))
 (let ((?x64 (* ?x56 ?x56 ?x56 x x)))
 (let ((?x65 (- (* ?x56 v x x (- y x) (- y x) (- y x)) (* ?x56 ?x56 v v x x (- y x) (- y x)))))
 (let ((?x67 (* (- (+ (* (- 1) u00 x00) ?x57 (* v (- y x))) ?x38) (- ?x65 ?x64))))
 (let ((?x51 (- (* u ?x44 (- x y) (- x y) y y y) (* u u ?x44 ?x44 (- x y) (- x y) y y))))
 (let ((?x53 (* (- (+ (* (- 1) u00 x00) (* u (- x y)) ?x45) ?x38) (- ?x51 (* u u u (- x y) (- x y))))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x71 (and $x41 (or (not (= ?x53 0)) (not (= ?x67 0))))))
 (rewrite (= $x71 $x86)))))))))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x695 (mp (mp @x73 (quant-intro (proof-bind ?x689) (= $x72 $x215)) $x215) (rewrite (= $x215 $x215)) $x215)))
 (let ((@x212 (mp (mp @x695 (quant-intro (proof-bind ?x162) (= $x215 $x169)) $x169) (quant-intro (proof-bind ?x359) (= $x169 $x675)) $x675)))
 (let ((@x766 (mp~ (mp @x212 (quant-intro (proof-bind ?x198) (= $x675 $x250)) $x250) (sk (~ $x250 $x849)) $x849)))
 (let ((@x883 (mp @x766 (rewrite (= $x849 $x987)) $x987)))
 (let ((@x992 (and-elim @x883 $x856)))
 (let ((@x863 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x856) $x342)) @x992 $x342)))
 (let (($x884 (<= ?x767 0)))
 (let ((@x280 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x856) $x884)) @x992 $x884)))
 (let (($x737 (not (<= ?x452 0))))
 (let (($x851 (>= ?x452 0)))
 (let (($x866 (>= ?x931 0)))
 (let (($x864 (<= ?x931 0)))
 (let ((@x983 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x861 (not $x864) (not $x866))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x864)) @x280 @x863 false) $x864) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x866)) @x280 @x863 false) $x866) $x861)))
 (let ((@x315 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x769 $x737 (not $x851))) (unit-resolution (and-elim @x883 $x869) @x983 $x454) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x851)) @x280 @x863 false) $x851) $x737)))
 ((_ th-lemma arith farkas 1 1 1) @x315 @x280 @x863 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        42
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             368
 :arith-nonlinear-bounds    25
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 56
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.64
 :memory                    3.18
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1093665
 :num-checks                1
 :propagations              14
 :rlimit-count              4810
 :time                      0.01
 :total-time                0.01)
