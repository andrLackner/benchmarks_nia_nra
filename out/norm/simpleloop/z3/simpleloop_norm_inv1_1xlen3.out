unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x348 (* (- 1) x!1)))
 (let ((?x364 (* (- 1) y!0)))
 (let ((?x129 (+ y00 x00 ?x364 ?x348)))
 (let (($x127 (<= ?x129 0)))
 (let (($x114 (= ?x129 0)))
 (let ((?x124 (* x!1 x!1 x!1 x!1)))
 (let ((?x97 (* y!0 y!0 y!0 y!0)))
 (let ((?x555 (+ y00 x00 (* (- 1) (* x00 x!1 x!1 x!1)) ?x97 (* y00 y!0 x!1 x!1) ?x124 (* (- 2) (* y00 y!0 x!1)) (* (- 5) (* y00 x!1)) (* (- 5) (* x00 x!1)) (* 5 (* x!1 x!1)) (* 7 (* y!0 x!1)) (* (- 2) (* y!0 x!1 x!1)) ?x364 (* (- 3) (* y00 y!0 y!0)) (* (- 2) (* y00 y!0)) (* 3 (* y!0 y!0 y!0)) (* (- 4) (* x!1 x!1 x!1)) (* 4 (* x00 x!1 x!1)) (* y!0 y!0 y!0 x!1) (* 2 (* y!0 y!0)) ?x348 (* (- 3) (* x00 y!0 y!0)) (* 5 (* y!0 y!0 x!1)) (* (- 1) (* x00 y!0 y!0 y!0)) (* (- 1) (* y00 y!0 y!0 y!0)) (* (- 2) (* x00 y!0)) (* (- 2) (* x00 y!0 x!1)) (* x00 y!0 x!1 x!1) (* (- 1) (* y00 x!1 x!1 x!1)) (* 4 (* y00 x!1 x!1)) (* (- 1) (* y!0 y!0 x!1 x!1)))))
 (let (($x556 (= ?x555 0)))
 (let (($x590 (not $x556)))
 (let (($x132 (and $x114 $x590)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x102 (+ x!1 y!0 ?x61 ?x68 (* 2 (* y!0 y00)) (* 2 (* x!1 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y00)) (* 5 (* x!1 y00)) (* 5 (* x!1 x00)) (* (- 4) (* x!1 x!1 x00)) (* x!1 x!1 x!1 x00) (* 3 (* y!0 y!0 y00)) (* y!0 y!0 y!0 y00) (* 2 (* y!0 x00)) (* 2 (* x!1 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 x00)) (* (- 4) (* x!1 x!1 y00)) (* x!1 x!1 x!1 y00) (* 3 (* y!0 y!0 x00)) (* y!0 y!0 y!0 x00) (* (- 2) (* y!0 y!0)) (* (- 5) (* x!1 y!0 y!0)) (* x!1 x!1 y!0 y!0) (* (- 5) (* x!1 x!1)) (* (- 7) (* x!1 y!0)) (* 2 (* x!1 x!1 y!0)) (* (- 3) (* y!0 y!0 y!0)) (* (- 1) (* x!1 y!0 y!0 y!0)) (* (- 1) ?x97) (* 4 (* x!1 x!1 x!1)) (* (- 1) ?x124))))
 (let (($x362 (and (= (+ x!1 y!0 ?x61 ?x68) 0) (not (= ?x102 0)))))
 (let (($x369 (exists ((x Int) (y Int) )(! (let ((?x777 (* x x x x)))
 (let ((?x833 (* (- 1) ?x777)))
 (let ((?x775 (* x x x)))
 (let ((?x849 (* 4 ?x775)))
 (let ((?x667 (* y y y y)))
 (let ((?x725 (* (- 1) ?x667)))
 (let ((?x552 (* x y y y)))
 (let ((?x606 (* (- 1) ?x552)))
 (let ((?x550 (* y y y)))
 (let ((?x741 (* (- 3) ?x550)))
 (let ((?x497 (* x x y)))
 (let ((?x515 (* 2 ?x497)))
 (let ((?x488 (* x x)))
 (let ((?x868 (* (- 5) ?x488)))
 (let ((?x477 (* x x y y)))
 (let ((?x475 (* x y y)))
 (let ((?x648 (* (- 5) ?x475)))
 (let ((?x471 (* y y)))
 (let ((?x731 (* (- 2) ?x471)))
 (let ((?x425 (* y y y x00)))
 (let ((?x408 (* y y x00)))
 (let ((?x432 (* 3 ?x408)))
 (let ((?x351 (* x x x y00)))
 (let ((?x275 (* x x y x00)))
 (let ((?x303 (* (- 1) ?x275)))
 (let ((?x270 (* x y x00)))
 (let ((?x309 (* 2 ?x270)))
 (let ((?x263 (* y x00)))
 (let ((?x528 (* 2 ?x263)))
 (let ((?x195 (* y y y y00)))
 (let ((?x194 (* y y y00)))
 (let ((?x216 (* 3 ?x194)))
 (let ((?x157 (* x x x x00)))
 (let ((?x155 (* x x x00)))
 (let ((?x329 (* (- 4) ?x155)))
 (let ((?x116 (* x x y y00)))
 (let ((?x117 (* (- 1) ?x116)))
 (let ((?x107 (* y y00)))
 (let ((?x227 (* 2 ?x107)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x163 (+ x y ?x61 ?x68 ?x227 (* 2 (* x y y00)) ?x117 (* 5 (* x y00)) (* 5 (* x x00)) ?x329 ?x157 ?x216 ?x195 ?x528 ?x309 ?x303 (* (- 4) (* x x y00)) ?x351 ?x432 ?x425 ?x731 ?x648 ?x477 ?x868 (* (- 7) (* x y)) ?x515 ?x741 ?x606 ?x725 ?x849 ?x833)))
 (let (($x87 (= (+ x y ?x61 ?x68) 0)))
 (and $x87 (not (= ?x163 0)))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x228 (exists ((x Int) (y Int) )(! (let ((?x777 (* x x x x)))
 (let ((?x667 (* y y y y)))
 (let ((?x552 (* x y y y)))
 (let ((?x275 (* x x y x00)))
 (let ((?x116 (* x x y y00)))
 (let ((?x913 (+ y y00 x00 (* (- 2) (* y y00)) (* (- 2) (* x y y00)) ?x116 (* (- 5) (* x y00)) (* (- 1) (* y 1 1)) (* (- 5) (* x x00)) (* 4 (* x x x00)) (* (- 1) (* x x x x00)) (* (- 1) (* y y 1)) (* (- 1) (* y 1 y)) (* (- 3) (* y y y00)) (* (- 1) (* y y y y00)) (* (- 2) (* y x00)) (* (- 2) (* x y x00)) ?x275 (* 4 (* x x y00)) (* (- 1) (* x x x y00)) (* (- 1) (* y 1)) (* (- 3) (* y y x00)) (* (- 1) (* y y y x00)) (* 4 (* y y)) (* 5 (* x y y)) (* (- 1) (* x x y y)) (* 3 (* x x)) (* 7 (* x y)) (* (- 2) (* x x y)) (* 3 (* y y y)) ?x552 (* (- 1) (* x (- 1) (- 1))) ?x667 (* (- 1) (* x x (- 1))) (* (- 1) (* x (- 1) x)) (* (- 4) (* x x x)) ?x777)))
 (let (($x87 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x87 (not (= ?x913 0)))))))))) :qid k!26))
 ))
 (let ((?x341 (lambda ((x Int) (y Int) )(let ((?x777 (* x x x x)))
 (let ((?x833 (* (- 1) ?x777)))
 (let ((?x775 (* x x x)))
 (let ((?x849 (* 4 ?x775)))
 (let ((?x667 (* y y y y)))
 (let ((?x725 (* (- 1) ?x667)))
 (let ((?x552 (* x y y y)))
 (let ((?x606 (* (- 1) ?x552)))
 (let ((?x550 (* y y y)))
 (let ((?x741 (* (- 3) ?x550)))
 (let ((?x497 (* x x y)))
 (let ((?x515 (* 2 ?x497)))
 (let ((?x488 (* x x)))
 (let ((?x868 (* (- 5) ?x488)))
 (let ((?x477 (* x x y y)))
 (let ((?x475 (* x y y)))
 (let ((?x648 (* (- 5) ?x475)))
 (let ((?x471 (* y y)))
 (let ((?x731 (* (- 2) ?x471)))
 (let ((?x425 (* y y y x00)))
 (let ((?x408 (* y y x00)))
 (let ((?x432 (* 3 ?x408)))
 (let ((?x351 (* x x x y00)))
 (let ((?x275 (* x x y x00)))
 (let ((?x303 (* (- 1) ?x275)))
 (let ((?x270 (* x y x00)))
 (let ((?x309 (* 2 ?x270)))
 (let ((?x263 (* y x00)))
 (let ((?x528 (* 2 ?x263)))
 (let ((?x195 (* y y y y00)))
 (let ((?x194 (* y y y00)))
 (let ((?x216 (* 3 ?x194)))
 (let ((?x157 (* x x x x00)))
 (let ((?x155 (* x x x00)))
 (let ((?x329 (* (- 4) ?x155)))
 (let ((?x116 (* x x y y00)))
 (let ((?x117 (* (- 1) ?x116)))
 (let ((?x107 (* y y00)))
 (let ((?x227 (* 2 ?x107)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x163 (+ x y ?x61 ?x68 ?x227 (* 2 (* x y y00)) ?x117 (* 5 (* x y00)) (* 5 (* x x00)) ?x329 ?x157 ?x216 ?x195 ?x528 ?x309 ?x303 (* (- 4) (* x x y00)) ?x351 ?x432 ?x425 ?x731 ?x648 ?x477 ?x868 (* (- 7) (* x y)) ?x515 ?x741 ?x606 ?x725 ?x849 ?x833)))
 (let (($x87 (= (+ x y ?x61 ?x68) 0)))
 (let (($x567 (and $x87 (not (= ?x163 0)))))
 (let ((?x913 (+ y y00 x00 (* (- 2) ?x107) (* (- 2) (* x y y00)) ?x116 (* (- 5) (* x y00)) (* (- 1) (* y 1 1)) (* (- 5) (* x x00)) (* 4 ?x155) (* (- 1) ?x157) (* (- 1) (* y y 1)) (* (- 1) (* y 1 y)) (* (- 3) ?x194) (* (- 1) ?x195) (* (- 2) ?x263) (* (- 2) ?x270) ?x275 (* 4 (* x x y00)) (* (- 1) ?x351) (* (- 1) (* y 1)) (* (- 3) ?x408) (* (- 1) ?x425) (* 4 ?x471) (* 5 ?x475) (* (- 1) ?x477) (* 3 ?x488) (* 7 (* x y)) (* (- 2) ?x497) (* 3 ?x550) ?x552 (* (- 1) (* x (- 1) (- 1))) ?x667 (* (- 1) (* x x (- 1))) (* (- 1) (* x (- 1) x)) (* (- 4) ?x775) ?x777)))
 (let (($x919 (and $x87 (not (= ?x913 0)))))
 (rewrite (= $x919 $x567)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x457 (exists ((x Int) (y Int) )(! (let ((?x492 (+ (- 1) x)))
 (let ((?x65 (* ?x492 ?x492 ?x492 ?x492)))
 (let ((?x500 (+ 1 y)))
 (let ((?x435 (* ?x500 ?x500 ?x500 ?x500)))
 (let ((?x419 (* ?x492 ?x500 ?x500 ?x500)))
 (let ((?x519 (* x00 ?x492 ?x492 ?x500)))
 (let ((?x505 (* y00 ?x492 ?x492 ?x500)))
 (let ((?x810 (+ ?x505 (* (- 1) (* x00 ?x492 ?x492 ?x492)) (* (- 1) (* y00 ?x500 ?x500 ?x500)) ?x519 (* (- 1) (* y00 ?x492 ?x492 ?x492)) (* (- 1) (* x00 ?x500 ?x500 ?x500)) (* (- 1) (* ?x492 ?x492 ?x500 ?x500)) ?x419 ?x435 ?x65)))
 (let (($x465 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x465 (not (= ?x810 0)))))))))))) :qid k!26))
 ))
 (let ((?x152 (lambda ((x Int) (y Int) )(let ((?x777 (* x x x x)))
 (let ((?x667 (* y y y y)))
 (let ((?x552 (* x y y y)))
 (let ((?x275 (* x x y x00)))
 (let ((?x116 (* x x y y00)))
 (let ((?x913 (+ y y00 x00 (* (- 2) (* y y00)) (* (- 2) (* x y y00)) ?x116 (* (- 5) (* x y00)) (* (- 1) (* y 1 1)) (* (- 5) (* x x00)) (* 4 (* x x x00)) (* (- 1) (* x x x x00)) (* (- 1) (* y y 1)) (* (- 1) (* y 1 y)) (* (- 3) (* y y y00)) (* (- 1) (* y y y y00)) (* (- 2) (* y x00)) (* (- 2) (* x y x00)) ?x275 (* 4 (* x x y00)) (* (- 1) (* x x x y00)) (* (- 1) (* y 1)) (* (- 3) (* y y x00)) (* (- 1) (* y y y x00)) (* 4 (* y y)) (* 5 (* x y y)) (* (- 1) (* x x y y)) (* 3 (* x x)) (* 7 (* x y)) (* (- 2) (* x x y)) (* 3 (* y y y)) ?x552 (* (- 1) (* x (- 1) (- 1))) ?x667 (* (- 1) (* x x (- 1))) (* (- 1) (* x (- 1) x)) (* (- 4) (* x x x)) ?x777)))
 (let (($x87 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x919 (and $x87 (not (= ?x913 0)))))
 (let ((?x492 (+ (- 1) x)))
 (let ((?x65 (* ?x492 ?x492 ?x492 ?x492)))
 (let ((?x500 (+ 1 y)))
 (let ((?x435 (* ?x500 ?x500 ?x500 ?x500)))
 (let ((?x419 (* ?x492 ?x500 ?x500 ?x500)))
 (let ((?x519 (* x00 ?x492 ?x492 ?x500)))
 (let ((?x505 (* y00 ?x492 ?x492 ?x500)))
 (let ((?x810 (+ ?x505 (* (- 1) (* x00 ?x492 ?x492 ?x492)) (* (- 1) (* y00 ?x500 ?x500 ?x500)) ?x519 (* (- 1) (* y00 ?x492 ?x492 ?x492)) (* (- 1) (* x00 ?x500 ?x500 ?x500)) (* (- 1) (* ?x492 ?x492 ?x500 ?x500)) ?x419 ?x435 ?x65)))
 (let (($x465 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x513 (and $x465 (not (= ?x810 0)))))
 (rewrite (= $x513 $x919)))))))))))))))))))))
 ))
 (let (($x243 (exists ((x Int) (y Int) )(! (let ((?x492 (+ (- 1) x)))
 (let ((?x65 (* ?x492 ?x492 ?x492 ?x492)))
 (let ((?x500 (+ 1 y)))
 (let ((?x435 (* ?x500 ?x500 ?x500 ?x500)))
 (let ((?x410 (* ?x492 ?x492 ?x500 ?x500)))
 (let ((?x384 (* x00 ?x500 ?x500 ?x500)))
 (let ((?x398 (* y00 ?x492 ?x492 ?x492)))
 (let ((?x518 (* y00 ?x500 ?x500 ?x500)))
 (let ((?x478 (* x00 ?x492 ?x492 ?x492)))
 (let ((?x837 (+ (* (- 1) (* y00 ?x492 ?x492 ?x500)) ?x478 ?x518 (* (- 1) (* x00 ?x492 ?x492 ?x500)) ?x398 ?x384 ?x410 (* (- 1) (* ?x492 ?x500 ?x500 ?x500)) (* (- 1) ?x435) (* (- 1) ?x65))))
 (let (($x465 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x465 (not (= ?x837 0)))))))))))))) :qid k!26))
 ))
 (let ((?x389 (lambda ((x Int) (y Int) )(let ((?x492 (+ (- 1) x)))
 (let ((?x65 (* ?x492 ?x492 ?x492 ?x492)))
 (let ((?x500 (+ 1 y)))
 (let ((?x435 (* ?x500 ?x500 ?x500 ?x500)))
 (let ((?x419 (* ?x492 ?x500 ?x500 ?x500)))
 (let ((?x519 (* x00 ?x492 ?x492 ?x500)))
 (let ((?x505 (* y00 ?x492 ?x492 ?x500)))
 (let ((?x810 (+ ?x505 (* (- 1) (* x00 ?x492 ?x492 ?x492)) (* (- 1) (* y00 ?x500 ?x500 ?x500)) ?x519 (* (- 1) (* y00 ?x492 ?x492 ?x492)) (* (- 1) (* x00 ?x500 ?x500 ?x500)) (* (- 1) (* ?x492 ?x492 ?x500 ?x500)) ?x419 ?x435 ?x65)))
 (let (($x465 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x513 (and $x465 (not (= ?x810 0)))))
 (let ((?x410 (* ?x492 ?x492 ?x500 ?x500)))
 (let ((?x384 (* x00 ?x500 ?x500 ?x500)))
 (let ((?x398 (* y00 ?x492 ?x492 ?x492)))
 (let ((?x518 (* y00 ?x500 ?x500 ?x500)))
 (let ((?x478 (* x00 ?x492 ?x492 ?x492)))
 (let ((?x837 (+ (* (- 1) ?x505) ?x478 ?x518 (* (- 1) ?x519) ?x398 ?x384 ?x410 (* (- 1) ?x419) (* (- 1) ?x435) (* (- 1) ?x65))))
 (let (($x476 (and $x465 (not (= ?x837 0)))))
 (rewrite (= $x476 $x513))))))))))))))))))))
 ))
 (let (($x58 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00) (* ?x36 ?x36 ?x36 y00))))
 (let ((?x47 (+ (- ?x40 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 ?x35 y00) (* x00 ?x36 ?x36 ?x36) (* 0 ?x35 ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x36 ?x36))))
 (let ((?x53 (- (- (- ?x47 (* ?x35 ?x36 ?x36 ?x36)) (* ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x53 0))))))))) :qid k!26))
 ))
 (let ((?x514 (lambda ((x Int) (y Int) )(let ((?x492 (+ (- 1) x)))
 (let ((?x65 (* ?x492 ?x492 ?x492 ?x492)))
 (let ((?x500 (+ 1 y)))
 (let ((?x435 (* ?x500 ?x500 ?x500 ?x500)))
 (let ((?x410 (* ?x492 ?x492 ?x500 ?x500)))
 (let ((?x384 (* x00 ?x500 ?x500 ?x500)))
 (let ((?x398 (* y00 ?x492 ?x492 ?x492)))
 (let ((?x518 (* y00 ?x500 ?x500 ?x500)))
 (let ((?x478 (* x00 ?x492 ?x492 ?x492)))
 (let ((?x837 (+ (* (- 1) (* y00 ?x492 ?x492 ?x500)) ?x478 ?x518 (* (- 1) (* x00 ?x492 ?x492 ?x500)) ?x398 ?x384 ?x410 (* (- 1) (* ?x492 ?x500 ?x500 ?x500)) (* (- 1) ?x435) (* (- 1) ?x65))))
 (let (($x465 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x476 (and $x465 (not (= ?x837 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00) (* ?x36 ?x36 ?x36 y00))))
 (let ((?x47 (+ (- ?x40 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 ?x35 y00) (* x00 ?x36 ?x36 ?x36) (* 0 ?x35 ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x36 ?x36))))
 (let ((?x53 (- (- (- ?x47 (* ?x35 ?x36 ?x36 ?x36)) (* ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35))))
 (let (($x57 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x53 0))))))
 (rewrite (= $x57 $x476)))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x839 (mp (mp @x59 (quant-intro (proof-bind ?x514) (= $x58 $x243)) $x243) (rewrite (= $x243 $x243)) $x243)))
 (let ((@x99 (mp (mp @x839 (quant-intro (proof-bind ?x389) (= $x243 $x457)) $x457) (quant-intro (proof-bind ?x152) (= $x457 $x228)) $x228)))
 (let ((@x126 (mp~ (mp @x99 (quant-intro (proof-bind ?x341) (= $x228 $x369)) $x369) (sk (~ $x369 $x362)) $x362)))
 (let ((@x591 (mp @x126 (rewrite (= $x362 $x132)) $x132)))
 (let ((@x595 (and-elim @x591 $x114)))
 (let ((@x380 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x114) $x127)) @x595 $x127)))
 (let (($x109 (>= ?x129 0)))
 (let ((@x377 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x114) $x109)) @x595 $x109)))
 (let (($x438 (not (>= ?x555 0))))
 (let (($x363 (<= ?x555 0)))
 (let ((@x394 (lemma ((_ th-lemma arith) (hypothesis (not $x363)) @x377 @x380 @x377 @x380 false) $x363)))
 (let ((@x442 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x556 (not $x363) $x438)) (and-elim @x591 $x590) (or (not $x363) $x438))))
 ((_ th-lemma arith) (unit-resolution @x442 @x394 $x438) @x377 @x380 @x377 @x380 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             238
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.66
 :memory                    3.19
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1114654
 :num-checks                1
 :propagations              4
 :rlimit-count              3884
 :time                      0.01
 :total-time                0.02)
