unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x709 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x195 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) (* (- 4) r!2) (* (- 1) (* v!0 v!0)) ?x709 (* 2 v!0))))
 (let (($x1029 (>= ?x195 0)))
 (let (($x185 (= ?x195 0)))
 (let ((?x265 (* (- 2) v!0)))
 (let ((?x312 (* (- 1) ?x709)))
 (let ((?x314 (* v!0 v!0)))
 (let ((?x1001 (* 4 r!2)))
 (let ((?x342 (* 2 u!1)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x1117 (+ ?x106 ?x122 ?x41 ?x46 ?x198 ?x342 ?x1001 ?x314 ?x312 ?x265)))
 (let ((?x397 (* (- 1) (* u!1 v!0 v!0 v!0))))
 (let ((?x456 (* 12 (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x133 (* (- 8) (* r!2 r!2))))
 (let ((?x134 (* (- 6) (* u!1 u!1 u!1 u!1))))
 (let ((?x379 (* 8 (* u!1 u!1 v!0 v!0 v!0))))
 (let ((?x979 (* u!1 u!1 u!1 u!1 u!1 v!0 v!0 v!0)))
 (let ((?x740 (* 6 (* u!1 u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x893 (* (- 1) (* r!2 v!0 v!0 v!0))))
 (let ((?x188 (* (- 8) ?x709)))
 (let ((?x731 (* 8 (* r!2 r!2 v!0 v!0 v!0))))
 (let ((?x144 (* (- 12) (* u!1 u!1 u!1))))
 (let ((?x264 (* (- 1) (* u!1 u!1 u!1 u!1 u!1))))
 (let ((?x227 (* u!1 u!1 u!1 r!2 r!2 v!0 v!0 v!0)))
 (let ((?x1099 (+ (* 2 (* u!1 u!1 u!1 u!1 r!2 v!0 v!0 v!0)) (* (- 12) (* u!1 u!1 u!1 r!2)) (* (- 1) (* u!1 u!1 u!1 r!2 r!2)) ?x227 ?x264 (* 12 (* u!1 u!1 u!1 r!2 v!0 v!0 v!0)) ?x314 ?x144 ?x731 (* (- 16) (* u!1 r!2)) ?x188 ?x893 ?x740 (* 6 (* u!1 u!1 r!2 r!2 v!0 v!0 v!0)) (* (- 6) (* u!1 u!1 r!2 r!2)) (* (- 24) (* u!1 u!1 r!2)) (* (- 2) (* u!1 u!1 u!1 u!1 r!2)) ?x979 ?x379 ?x134 ?x133 ?x456 (* 12 (* u!1 r!2 r!2 v!0 v!0 v!0)) (* 24 (* u!1 u!1 r!2 v!0 v!0 v!0)) ?x397 (* 16 (* u!1 r!2 v!0 v!0 v!0)) (* (- 12) (* u!1 r!2 r!2)))))
 (let ((?x1101 (* ?x1099 ?x1117)))
 (let (($x506 (= ?x1101 0)))
 (let (($x1102 (not $x506)))
 (let ((?x1144 (* 6 (* v!0 v!0 v!0))))
 (let ((?x716 (* 6 (* u!1 u!1 u!1 v!0 v!0 v!0 v!0))))
 (let ((?x866 (* v!0 v!0 v!0 v!0)))
 (let ((?x120 (* 12 v!0)))
 (let ((?x341 (* (- 6) (* r!2 v!0 v!0))))
 (let ((?x211 (* 13 ?x314)))
 (let ((?x982 (* (- 8) r!2)))
 (let ((?x263 (* (- 12) (* r!2 v!0))))
 (let ((?x859 (* 7 (* u!1 u!1 u!1 v!0 v!0))))
 (let ((?x200 (* u!1 u!1 u!1 v!0 v!0 v!0 v!0 v!0)))
 (let ((?x239 (+ 4 ?x200 ?x859 (* 7 (* u!1 u!1 u!1 r!2 r!2)) ?x227 ?x263 ?x982 (* (- 12) (* u!1 u!1 u!1 r!2 v!0 v!0 v!0)) (* (- 14) (* u!1 u!1 u!1 r!2 v!0)) (* (- 24) (* u!1 u!1 u!1 r!2 v!0 v!0)) (* 12 (* u!1 u!1 u!1 r!2 r!2 v!0)) ?x211 (* (- 2) (* u!1 u!1 u!1 r!2 v!0 v!0 v!0 v!0)) (* 6 (* u!1 u!1 u!1 r!2 r!2 v!0 v!0)) ?x341 ?x893 ?x120 ?x866 ?x716 ?x456 ?x1144)))
 (let ((?x887 (* ?x239 ?x1117)))
 (let (($x226 (= ?x887 0)))
 (let (($x182 (or (not $x226) $x1102)))
 (let (($x1040 (and $x185 $x182)))
 (let ((?x998 (+ ?x1001 ?x342 ?x265 ?x106 ?x122 ?x41 ?x312 ?x314 ?x46 ?x198)))
 (let ((?x186 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0 v!0)))
 (let ((?x287 (+ ?x188 ?x314 ?x133 ?x134 ?x144 (* (- 1) (* r!2 r!2 u!1 u!1 u!1)) ?x186 ?x456 (* 12 (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 12) (* r!2 r!2 u!1)) ?x893 (* (- 6) (* r!2 r!2 u!1 u!1)) (* (- 24) (* r!2 u!1 u!1)) (* (- 12) (* r!2 u!1 u!1 u!1)) (* (- 2) (* r!2 u!1 u!1 u!1 u!1)) ?x264 (* 2 (* r!2 u!1 u!1 u!1 u!1 v!0 v!0 v!0)) ?x979 ?x731 (* 16 (* r!2 u!1 v!0 v!0 v!0)) ?x379 (* 12 (* r!2 r!2 u!1 v!0 v!0 v!0)) (* 24 (* r!2 u!1 u!1 v!0 v!0 v!0)) (* 6 (* r!2 r!2 u!1 u!1 v!0 v!0 v!0)) ?x740 (* (- 16) (* r!2 u!1)) ?x397)))
 (let ((?x174 (+ 4 ?x982 ?x120 ?x211 (* 7 (* r!2 r!2 u!1 u!1 u!1)) ?x186 (* (- 14) (* r!2 u!1 u!1 u!1 v!0)) ?x859 (* 12 (* r!2 r!2 u!1 u!1 u!1 v!0)) (* (- 24) (* r!2 u!1 u!1 u!1 v!0 v!0)) ?x456 (* 6 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) ?x716 (* (- 2) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0 v!0)) ?x200 ?x893 ?x263 ?x341 ?x1144 ?x866)))
 (let (($x552 (and (= ?x998 0) (or (not (= (* ?x174 ?x998) 0)) (not (= (* ?x287 ?x998) 0))))))
 (let (($x238 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x1002 (* (- 1) (* u v v v))))
 (let ((?x320 (* (- 16) (* r u))))
 (let ((?x972 (* 6 (* u u u u v v v))))
 (let ((?x970 (* 6 (* r r u u v v v))))
 (let ((?x891 (* r u u v v v)))
 (let ((?x969 (* 24 ?x891)))
 (let ((?x883 (* r r u v v v)))
 (let ((?x967 (* 12 ?x883)))
 (let ((?x880 (* 8 (* u u v v v))))
 (let ((?x966 (* 16 (* r u v v v))))
 (let ((?x864 (* 8 (* r r v v v))))
 (let ((?x857 (* u u u u u v v v)))
 (let ((?x973 (* 2 (* r u u u u v v v))))
 (let ((?x813 (* (- 1) (* u u u u u))))
 (let ((?x810 (* r u u u u)))
 (let ((?x315 (* (- 2) ?x810)))
 (let ((?x271 (* (- 12) (* r u u u))))
 (let ((?x736 (* (- 24) (* r u u))))
 (let ((?x232 (* (- 6) (* r r u u))))
 (let ((?x679 (* (- 1) (* r v v v))))
 (let ((?x737 (* (- 12) (* r r u))))
 (let ((?x469 (* r u u u v v v)))
 (let ((?x971 (* 12 ?x469)))
 (let ((?x441 (* u u u v v v)))
 (let ((?x564 (* 12 ?x441)))
 (let ((?x373 (* r r u u u v v v)))
 (let ((?x329 (* r r u u u)))
 (let ((?x330 (* (- 1) ?x329)))
 (let ((?x735 (* (- 12) (* u u u))))
 (let ((?x111 (* (- 6) (* u u u u))))
 (let ((?x665 (* (- 8) (* r r))))
 (let ((?x608 (* (- 8) ?x43)))
 (let ((?x738 (+ ?x608 ?x45 ?x665 ?x111 ?x735 ?x330 ?x373 ?x564 ?x971 ?x737 ?x679 ?x232 ?x736 ?x271 ?x315 ?x813 ?x973 ?x857 ?x864 ?x966 ?x880 ?x967 ?x969 ?x970 ?x972 ?x320 ?x1002)))
 (let ((?x649 (* v v v v)))
 (let ((?x702 (* 6 (* v v v))))
 (let ((?x699 (* (- 6) (* r v v))))
 (let ((?x696 (* (- 12) (* r v))))
 (let ((?x550 (* u u u v v v v v)))
 (let ((?x570 (* (- 2) (* r u u u v v v v))))
 (let ((?x487 (* u u u v v v v)))
 (let ((?x569 (* 6 ?x487)))
 (let ((?x568 (* (- 12) ?x469)))
 (let ((?x566 (* 6 (* r r u u u v v))))
 (let ((?x423 (* r u u u v v)))
 (let ((?x563 (* (- 24) ?x423)))
 (let ((?x414 (* r r u u u v)))
 (let ((?x561 (* 12 ?x414)))
 (let ((?x409 (* u u u v v)))
 (let ((?x708 (* 7 ?x409)))
 (let ((?x391 (* r u u u v)))
 (let ((?x707 (* (- 14) ?x391)))
 (let ((?x582 (* 7 ?x329)))
 (let ((?x698 (* 13 ?x45)))
 (let ((?x701 (* 12 v)))
 (let ((?x687 (* (- 8) r)))
 (let ((?x1074 (+ 4 ?x687 ?x701 ?x698 ?x582 ?x373 ?x707 ?x708 ?x561 ?x563 ?x564 ?x566 ?x568 ?x569 ?x570 ?x550 ?x679 ?x696 ?x699 ?x702 ?x649)))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x1074 ?x204) 0)) (not (= (* ?x738 ?x204) 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x614 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x1002 (* (- 1) (* u v v v))))
 (let ((?x320 (* (- 16) (* r u))))
 (let ((?x972 (* 6 (* u u u u v v v))))
 (let ((?x970 (* 6 (* r r u u v v v))))
 (let ((?x880 (* 8 (* u u v v v))))
 (let ((?x966 (* 16 (* r u v v v))))
 (let ((?x864 (* 8 (* r r v v v))))
 (let ((?x857 (* u u u u u v v v)))
 (let ((?x973 (* 2 (* r u u u u v v v))))
 (let ((?x813 (* (- 1) (* u u u u u))))
 (let ((?x810 (* r u u u u)))
 (let ((?x315 (* (- 2) ?x810)))
 (let ((?x271 (* (- 12) (* r u u u))))
 (let ((?x736 (* (- 24) (* r u u))))
 (let ((?x232 (* (- 6) (* r r u u))))
 (let ((?x679 (* (- 1) (* r v v v))))
 (let ((?x737 (* (- 12) (* r r u))))
 (let ((?x469 (* r u u u v v v)))
 (let ((?x971 (* 12 ?x469)))
 (let ((?x441 (* u u u v v v)))
 (let ((?x916 (* 8 ?x441)))
 (let ((?x373 (* r r u u u v v v)))
 (let ((?x329 (* r r u u u)))
 (let ((?x330 (* (- 1) ?x329)))
 (let ((?x735 (* (- 12) (* u u u))))
 (let ((?x111 (* (- 6) (* u u u u))))
 (let ((?x665 (* (- 8) (* r r))))
 (let ((?x608 (* (- 8) ?x43)))
 (let ((?x1201 (+ ?x608 ?x45 ?x665 ?x111 ?x735 ?x330 ?x373 ?x916 ?x971 ?x737 ?x679 ?x232 ?x736 ?x271 ?x315 ?x813 ?x973 ?x857 ?x864 ?x966 ?x880 (* 8 (* r r u v v v)) (* 16 (* r u u v v v)) ?x970 ?x972 ?x320 ?x1002 (* 2 (* u 2 r r v v v)) (* 2 (* u 2 u r v v v)) (* 2 (* u 2 r u v v v)) (* 2 (* u 2 u u v v v)))))
 (let ((?x649 (* v v v v)))
 (let ((?x702 (* 6 (* v v v))))
 (let ((?x699 (* (- 6) (* r v v))))
 (let ((?x696 (* (- 12) (* r v))))
 (let ((?x550 (* u u u v v v v v)))
 (let ((?x570 (* (- 2) (* r u u u v v v v))))
 (let ((?x566 (* 6 (* r r u u u v v))))
 (let ((?x409 (* u u u v v)))
 (let ((?x708 (* 7 ?x409)))
 (let ((?x403 (* 2 (* v v (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x391 (* r u u u v)))
 (let ((?x707 (* (- 14) ?x391)))
 (let ((?x582 (* 7 ?x329)))
 (let ((?x266 (* 2 (* v 2 (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x698 (* 13 ?x45)))
 (let ((?x701 (* 12 v)))
 (let ((?x687 (* (- 8) r)))
 (let ((?x710 (+ 4 ?x687 ?x701 ?x698 (* 2 (* v v r (* (- 1) v) u u u)) (* 2 (* v 2 r (* (- 1) v) u u u)) (* 2 (* v 2 r r u u u)) ?x266 ?x582 ?x373 ?x707 ?x403 ?x708 (* 8 (* r r u u u v)) (* (- 16) (* r u u u v v)) (* 2 (* v 2 (* (- 1) v) r u u u)) ?x916 ?x566 (* (- 8) ?x469) (* 4 (* u u u v v v v)) (* 2 (* v v (* (- 1) v) r u u u)) ?x570 ?x550 ?x679 ?x696 ?x699 ?x702 ?x649)))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x710 ?x204) 0)) (not (= (* ?x1201 ?x204) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x273 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x1002 (* (- 1) (* u v v v))))
 (let ((?x320 (* (- 16) (* r u))))
 (let ((?x972 (* 6 (* u u u u v v v))))
 (let ((?x970 (* 6 (* r r u u v v v))))
 (let ((?x891 (* r u u v v v)))
 (let ((?x969 (* 24 ?x891)))
 (let ((?x883 (* r r u v v v)))
 (let ((?x967 (* 12 ?x883)))
 (let ((?x880 (* 8 (* u u v v v))))
 (let ((?x966 (* 16 (* r u v v v))))
 (let ((?x864 (* 8 (* r r v v v))))
 (let ((?x857 (* u u u u u v v v)))
 (let ((?x973 (* 2 (* r u u u u v v v))))
 (let ((?x813 (* (- 1) (* u u u u u))))
 (let ((?x810 (* r u u u u)))
 (let ((?x315 (* (- 2) ?x810)))
 (let ((?x271 (* (- 12) (* r u u u))))
 (let ((?x736 (* (- 24) (* r u u))))
 (let ((?x232 (* (- 6) (* r r u u))))
 (let ((?x679 (* (- 1) (* r v v v))))
 (let ((?x737 (* (- 12) (* r r u))))
 (let ((?x469 (* r u u u v v v)))
 (let ((?x971 (* 12 ?x469)))
 (let ((?x441 (* u u u v v v)))
 (let ((?x564 (* 12 ?x441)))
 (let ((?x373 (* r r u u u v v v)))
 (let ((?x329 (* r r u u u)))
 (let ((?x330 (* (- 1) ?x329)))
 (let ((?x735 (* (- 12) (* u u u))))
 (let ((?x111 (* (- 6) (* u u u u))))
 (let ((?x665 (* (- 8) (* r r))))
 (let ((?x608 (* (- 8) ?x43)))
 (let ((?x738 (+ ?x608 ?x45 ?x665 ?x111 ?x735 ?x330 ?x373 ?x564 ?x971 ?x737 ?x679 ?x232 ?x736 ?x271 ?x315 ?x813 ?x973 ?x857 ?x864 ?x966 ?x880 ?x967 ?x969 ?x970 ?x972 ?x320 ?x1002)))
 (let ((?x649 (* v v v v)))
 (let ((?x702 (* 6 (* v v v))))
 (let ((?x699 (* (- 6) (* r v v))))
 (let ((?x696 (* (- 12) (* r v))))
 (let ((?x550 (* u u u v v v v v)))
 (let ((?x570 (* (- 2) (* r u u u v v v v))))
 (let ((?x487 (* u u u v v v v)))
 (let ((?x569 (* 6 ?x487)))
 (let ((?x568 (* (- 12) ?x469)))
 (let ((?x566 (* 6 (* r r u u u v v))))
 (let ((?x423 (* r u u u v v)))
 (let ((?x563 (* (- 24) ?x423)))
 (let ((?x414 (* r r u u u v)))
 (let ((?x561 (* 12 ?x414)))
 (let ((?x409 (* u u u v v)))
 (let ((?x708 (* 7 ?x409)))
 (let ((?x391 (* r u u u v)))
 (let ((?x707 (* (- 14) ?x391)))
 (let ((?x582 (* 7 ?x329)))
 (let ((?x698 (* 13 ?x45)))
 (let ((?x701 (* 12 v)))
 (let ((?x687 (* (- 8) r)))
 (let ((?x1074 (+ 4 ?x687 ?x701 ?x698 ?x582 ?x373 ?x707 ?x708 ?x561 ?x563 ?x564 ?x566 ?x568 ?x569 ?x570 ?x550 ?x679 ?x696 ?x699 ?x702 ?x649)))
 (let (($x209 (= ?x204 0)))
 (let (($x1106 (and $x209 (or (not (= (* ?x1074 ?x204) 0)) (not (= (* ?x738 ?x204) 0))))))
 (let ((?x916 (* 8 ?x441)))
 (let ((?x1201 (+ ?x608 ?x45 ?x665 ?x111 ?x735 ?x330 ?x373 ?x916 ?x971 ?x737 ?x679 ?x232 ?x736 ?x271 ?x315 ?x813 ?x973 ?x857 ?x864 ?x966 ?x880 (* 8 ?x883) (* 16 ?x891) ?x970 ?x972 ?x320 ?x1002 (* 2 (* u 2 r r v v v)) (* 2 (* u 2 u r v v v)) (* 2 (* u 2 r u v v v)) (* 2 (* u 2 u u v v v)))))
 (let ((?x403 (* 2 (* v v (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x266 (* 2 (* v 2 (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x710 (+ 4 ?x687 ?x701 ?x698 (* 2 (* v v r (* (- 1) v) u u u)) (* 2 (* v 2 r (* (- 1) v) u u u)) (* 2 (* v 2 r r u u u)) ?x266 ?x582 ?x373 ?x707 ?x403 ?x708 (* 8 ?x414) (* (- 16) ?x423) (* 2 (* v 2 (* (- 1) v) r u u u)) ?x916 ?x566 (* (- 8) ?x469) (* 4 ?x487) (* 2 (* v v (* (- 1) v) r u u u)) ?x570 ?x550 ?x679 ?x696 ?x699 ?x702 ?x649)))
 (let (($x1230 (and $x209 (or (not (= (* ?x710 ?x204) 0)) (not (= (* ?x1201 ?x204) 0))))))
 (rewrite (= $x1230 $x1106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1008 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x509 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x297 (+ 2 u)))
 (let ((?x515 (+ (* (- 1) (* ?x297 ?x297 ?x297 ?x75 ?x75)) ?x45 (* ?x297 ?x297 ?x297 ?x75 ?x75 v v v) (* (- 1) (* ?x75 v v v)))))
 (let ((?x395 (+ 2 v)))
 (let ((?x417 (* ?x395 ?x395)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x442 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 ?x417 ?x46 ?x198)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x1003 (+ r ?x103)))
 (let ((?x476 (+ (* (- 1) (* ?x1003 ?x1003 u u u)) ?x417 (* ?x395 ?x395 ?x395 ?x1003 ?x1003 u u u) (* (- 1) (* ?x395 ?x395 ?x395 ?x1003)))))
 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x476 ?x442) 0)) (not (= (* ?x515 ?x509) 0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x156 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x1002 (* (- 1) (* u v v v))))
 (let ((?x320 (* (- 16) (* r u))))
 (let ((?x972 (* 6 (* u u u u v v v))))
 (let ((?x970 (* 6 (* r r u u v v v))))
 (let ((?x880 (* 8 (* u u v v v))))
 (let ((?x966 (* 16 (* r u v v v))))
 (let ((?x864 (* 8 (* r r v v v))))
 (let ((?x857 (* u u u u u v v v)))
 (let ((?x973 (* 2 (* r u u u u v v v))))
 (let ((?x813 (* (- 1) (* u u u u u))))
 (let ((?x810 (* r u u u u)))
 (let ((?x315 (* (- 2) ?x810)))
 (let ((?x271 (* (- 12) (* r u u u))))
 (let ((?x736 (* (- 24) (* r u u))))
 (let ((?x232 (* (- 6) (* r r u u))))
 (let ((?x679 (* (- 1) (* r v v v))))
 (let ((?x737 (* (- 12) (* r r u))))
 (let ((?x469 (* r u u u v v v)))
 (let ((?x971 (* 12 ?x469)))
 (let ((?x441 (* u u u v v v)))
 (let ((?x916 (* 8 ?x441)))
 (let ((?x373 (* r r u u u v v v)))
 (let ((?x329 (* r r u u u)))
 (let ((?x330 (* (- 1) ?x329)))
 (let ((?x735 (* (- 12) (* u u u))))
 (let ((?x111 (* (- 6) (* u u u u))))
 (let ((?x665 (* (- 8) (* r r))))
 (let ((?x608 (* (- 8) ?x43)))
 (let ((?x1201 (+ ?x608 ?x45 ?x665 ?x111 ?x735 ?x330 ?x373 ?x916 ?x971 ?x737 ?x679 ?x232 ?x736 ?x271 ?x315 ?x813 ?x973 ?x857 ?x864 ?x966 ?x880 (* 8 (* r r u v v v)) (* 16 (* r u u v v v)) ?x970 ?x972 ?x320 ?x1002 (* 2 (* u 2 r r v v v)) (* 2 (* u 2 u r v v v)) (* 2 (* u 2 r u v v v)) (* 2 (* u 2 u u v v v)))))
 (let ((?x649 (* v v v v)))
 (let ((?x702 (* 6 (* v v v))))
 (let ((?x699 (* (- 6) (* r v v))))
 (let ((?x696 (* (- 12) (* r v))))
 (let ((?x550 (* u u u v v v v v)))
 (let ((?x570 (* (- 2) (* r u u u v v v v))))
 (let ((?x566 (* 6 (* r r u u u v v))))
 (let ((?x409 (* u u u v v)))
 (let ((?x708 (* 7 ?x409)))
 (let ((?x403 (* 2 (* v v (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x391 (* r u u u v)))
 (let ((?x707 (* (- 14) ?x391)))
 (let ((?x582 (* 7 ?x329)))
 (let ((?x266 (* 2 (* v 2 (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x698 (* 13 ?x45)))
 (let ((?x701 (* 12 v)))
 (let ((?x687 (* (- 8) r)))
 (let ((?x710 (+ 4 ?x687 ?x701 ?x698 (* 2 (* v v r (* (- 1) v) u u u)) (* 2 (* v 2 r (* (- 1) v) u u u)) (* 2 (* v 2 r r u u u)) ?x266 ?x582 ?x373 ?x707 ?x403 ?x708 (* 8 (* r r u u u v)) (* (- 16) (* r u u u v v)) (* 2 (* v 2 (* (- 1) v) r u u u)) ?x916 ?x566 (* (- 8) ?x469) (* 4 (* u u u v v v v)) (* 2 (* v v (* (- 1) v) r u u u)) ?x570 ?x550 ?x679 ?x696 ?x699 ?x702 ?x649)))
 (let (($x209 (= ?x204 0)))
 (let (($x1230 (and $x209 (or (not (= (* ?x710 ?x204) 0)) (not (= (* ?x1201 ?x204) 0))))))
 (let ((?x509 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x297 (+ 2 u)))
 (let ((?x515 (+ (* (- 1) (* ?x297 ?x297 ?x297 ?x75 ?x75)) ?x45 (* ?x297 ?x297 ?x297 ?x75 ?x75 v v v) (* (- 1) (* ?x75 v v v)))))
 (let ((?x395 (+ 2 v)))
 (let ((?x417 (* ?x395 ?x395)))
 (let ((?x442 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 ?x417 ?x46 ?x198)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x1003 (+ r ?x103)))
 (let ((?x476 (+ (* (- 1) (* ?x1003 ?x1003 u u u)) ?x417 (* ?x395 ?x395 ?x395 ?x1003 ?x1003 u u u) (* (- 1) (* ?x395 ?x395 ?x395 ?x1003)))))
 (let (($x251 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x476 ?x442) 0)) (not (= (* ?x515 ?x509) 0))))))
 (rewrite (= $x251 $x1230))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((r Int) (u Int) (v Int) )(! (let ((?x75 (+ r u)))
 (let ((?x91 (* ?x75 v v v)))
 (let ((?x79 (+ u 2)))
 (let ((?x45 (* v v)))
 (let ((?x90 (+ (* (- 1) ?x75 ?x75 ?x79 ?x79 ?x79) ?x45 (* ?x75 ?x75 ?x79 ?x79 ?x79 v v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) (- ?x90 ?x91))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x62 (* ?x57 ?x57)))
 (let ((?x69 (+ (* (- 1) ?x52 ?x52 u u u) ?x62 (* ?x52 ?x52 u u u ?x57 ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x72 (* (- (+ (- (+ ?x59 ?x41) ?x43) ?x62 ?x46) ?x48) (- ?x69 (* ?x52 ?x57 ?x57 ?x57)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x72 0)) (not (= ?x93 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x472 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x509 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x297 (+ 2 u)))
 (let ((?x515 (+ (* (- 1) (* ?x297 ?x297 ?x297 ?x75 ?x75)) ?x45 (* ?x297 ?x297 ?x297 ?x75 ?x75 v v v) (* (- 1) (* ?x75 v v v)))))
 (let ((?x395 (+ 2 v)))
 (let ((?x417 (* ?x395 ?x395)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x442 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 ?x417 ?x46 ?x198)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x1003 (+ r ?x103)))
 (let ((?x476 (+ (* (- 1) (* ?x1003 ?x1003 u u u)) ?x417 (* ?x395 ?x395 ?x395 ?x1003 ?x1003 u u u) (* (- 1) (* ?x395 ?x395 ?x395 ?x1003)))))
 (let (($x251 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x476 ?x442) 0)) (not (= (* ?x515 ?x509) 0))))))
 (let ((?x91 (* ?x75 v v v)))
 (let ((?x79 (+ u 2)))
 (let ((?x90 (+ (* (- 1) ?x75 ?x75 ?x79 ?x79 ?x79) ?x45 (* ?x75 ?x75 ?x79 ?x79 ?x79 v v v))))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) (- ?x90 ?x91))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x62 (* ?x57 ?x57)))
 (let ((?x69 (+ (* (- 1) ?x52 ?x52 u u u) ?x62 (* ?x52 ?x52 u u u ?x57 ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x72 (* (- (+ (- (+ ?x59 ?x41) ?x43) ?x62 ?x46) ?x48) (- ?x69 (* ?x52 ?x57 ?x57 ?x57)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x97 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x72 0)) (not (= ?x93 0))))))
 (rewrite (= $x97 $x251))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x433 (mp (mp @x99 (quant-intro (proof-bind ?x472) (= $x98 $x1008)) $x1008) (rewrite (= $x1008 $x1008)) $x1008)))
 (let ((@x107 (mp (mp @x433 (quant-intro (proof-bind ?x156) (= $x1008 $x614)) $x614) (quant-intro (proof-bind ?x273) (= $x614 $x238)) $x238)))
 (let ((@x729 (mp (mp~ @x107 (sk (~ $x238 $x552)) $x552) (rewrite (= $x552 $x1040)) $x1040)))
 (let ((@x820 (and-elim @x729 $x185)))
 (let ((@x242 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x185) $x1029)) @x820 $x1029)))
 (let (($x1119 (<= ?x195 0)))
 (let ((@x1086 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x185) $x1119)) @x820 $x1119)))
 (let (($x746 (not (<= ?x1101 0))))
 (let (($x1005 (>= ?x1101 0)))
 (let (($x224 (>= ?x887 0)))
 (let (($x221 (<= ?x887 0)))
 (let ((@x1094 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x226 (not $x221) (not $x224))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x221)) @x1086 @x242 false) $x221) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x224)) @x1086 @x242 false) $x224) $x226)))
 (let ((@x1097 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x506 $x746 (not $x1005))) (unit-resolution (and-elim @x729 $x182) @x1094 $x1102) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1005)) @x1086 @x242 false) $x1005) $x746)))
 ((_ th-lemma arith farkas 1 1 1) @x1097 @x1086 @x242 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        48
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             400
 :arith-nonlinear-bounds    31
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 71
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.78
 :memory                    3.22
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1244676
 :num-checks                1
 :propagations              14
 :rlimit-count              6373
 :time                      0.01
 :total-time                0.01)
