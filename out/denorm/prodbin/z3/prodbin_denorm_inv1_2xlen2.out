unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun z!4 () Real)
(declare-fun x!6 () Real)
(proof
(let ((?x1268 (* z00 x!6 x!6 x!6 z!4 z!4 z!4 y!5 y!5 y!5 y!5)))
 (let ((?x857 (* (- 4.0) (* z00 x!6 x!6 x!6 x!6 z!4 z!4 z!4 y!5 y!5))))
 (let ((?x853 (* x00 y00 x!6 x!6 x!6 x!6 z!4 z!4 z!4 y!5 y!5)))
 (let ((?x814 (* x00 y00 x!6 x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5 y!5)))
 (let ((?x806 (* z00 x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5)))
 (let ((?x794 (* x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5)))
 (let ((?x788 (* x!6 x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 y!5)))
 (let ((?x785 (* x00 y00 x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5)))
 (let ((?x782 (* z00 x!6 x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5 y!5)))
 (let ((?x774 (* x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 y!5 y!5 y!5)))
 (let ((?x769 (* x!6 x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 z!4 y!5 y!5 y!5)))
 (let ((?x850 (* 4.0 (* x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5))))
 (let ((?x759 (* x!6 x!6 x!6 x!6 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5)))
 (let ((?x622 (* x00 y00 x!6 x!6 x!6 z!4 z!4 z!4 y!5 y!5 y!5 y!5)))
 (let ((?x450 (* x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5)))
 (let ((?x247 (* x!6 x!6 x!6 x!6 x!6 x!6 x!6 z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5)))
 (let ((?x863 (+ (* 8.0 ?x247) (* (- 1.0) ?x450) (* (/ 1.0 2.0) ?x622) (* (- (/ 1.0 2.0)) ?x759) ?x850 (* 8.0 ?x769) (* 4.0 ?x774) (* (- 8.0) ?x782) ?x785 (* (- 1.0) ?x788) (* (- (/ 1.0 2.0)) ?x794) ?x806 (* (- 8.0) ?x814) (* (- 4.0) ?x853) ?x857 (* (/ 1.0 2.0) ?x1268))))
 (let (($x771 (>= ?x863 0.0)))
 (let (($x901 (not $x771)))
 (let (($x941 (= 0.0 ?x863)))
 (let (($x763 (not $x941)))
 (let ((@x902 (symm (commutativity (= $x941 (= ?x863 0.0))) (= (= ?x863 0.0) $x941))))
 (let (($x867 (= ?x863 0.0)))
 (let (($x869 (not $x867)))
 (let ((?x792 (* x!6 y!5)))
 (let ((?x71 (* x00 y00)))
 (let ((?x72 (* (- 1.0) ?x71)))
 (let ((?x91 (* (- 1.0) z00)))
 (let ((?x966 (* (/ 1.0 2.0) (* x!6 x!6 x!6 x!6 x!6))))
 (let ((?x895 (* (- 4.0) (* x!6 x!6 x!6 x!6 x!6 x!6))))
 (let ((?x684 (+ (* (- (/ 9.0 2.0)) (* x!6 x!6 x!6 x!6 z!4 y!5)) (* 4.0 (* x!6 x!6 x!6 x!6 x!6 x!6 y!5)) (* (/ 3.0 2.0) (* x!6 x!6 x!6 x!6 x!6 y!5 y!5)) (* 12.0 (* x!6 x!6 x!6 x!6 x!6 z!4 y!5)) (* (- 4.0) (* x!6 x!6 x!6 z!4 z!4 z!4)) (* 12.0 (* x!6 x!6 x!6 x!6 z!4 z!4 y!5)) (* (- (/ 1.0 2.0)) (* x!6 x!6 x!6 x!6 x!6 y!5 y!5 y!5)) (* (- 12.0) (* x!6 x!6 x!6 x!6 z!4 z!4)) (* (- 12.0) (* x!6 x!6 x!6 x!6 x!6 z!4)) (* (/ 3.0 2.0) (* x!6 x!6 x!6 z!4 z!4)) (* 4.0 (* x!6 x!6 x!6 z!4 z!4 z!4 y!5)) (* (- (/ 3.0 2.0)) (* x!6 x!6 z!4 z!4 z!4 y!5)) (* (- (/ 1.0 2.0)) (* x!6 x!6 z!4 z!4 z!4 y!5 y!5 y!5)) (* (/ 3.0 2.0) (* x!6 x!6 z!4 z!4 z!4 y!5 y!5)) (* (/ 1.0 2.0) (* x!6 x!6 z!4 z!4 z!4)) (* (/ 9.0 2.0) (* x!6 x!6 x!6 z!4 z!4 y!5 y!5)) (* (- (/ 9.0 2.0)) (* x!6 x!6 x!6 z!4 z!4 y!5)) (* (- (/ 3.0 2.0)) (* x!6 x!6 x!6 z!4 z!4 y!5 y!5 y!5)) (* (/ 3.0 2.0) (* x!6 x!6 x!6 x!6 z!4)) (* (/ 9.0 2.0) (* x!6 x!6 x!6 x!6 z!4 y!5 y!5)) ?x895 (* (- (/ 3.0 2.0)) (* x!6 x!6 x!6 x!6 x!6 y!5)) ?x966 (* (- (/ 3.0 2.0)) (* x!6 x!6 x!6 x!6 z!4 y!5 y!5 y!5)))))
 (let ((?x1103 (* (- 2.0) (* x!6 x!6 x!6 x!6))))
 (let ((?x1091 (* (- 1.0) ?x792)))
 (let ((?x325 (+ x!6 (* (- 2.0) (* x!6 x!6 x!6 z!4 y!5 y!5)) ?x1091 (* 4.0 (* x!6 x!6 x!6 z!4 y!5)) (* (- 2.0) (* x!6 x!6 x!6 z!4)) (* 4.0 (* x!6 x!6 x!6 x!6 y!5)) ?x1103 (* (- 2.0) (* x!6 x!6 x!6 x!6 y!5 y!5)))))
 (let (($x781 (= (* ?x325 ?x684 (+ ?x91 ?x72 z!4 ?x792)) 0.0)))
 (let ((?x851 (+ ?x72 z!4 ?x792 ?x91)))
 (let (($x994 (= ?x851 0.0)))
 (let ((?x294 (+ z00 ?x71 (* (- 1.0) z!4) ?x1091)))
 (let (($x301 (= ?x294 0.0)))
 (let (($x881 (not $x781)))
 (let (($x818 (or $x869 $x881)))
 (let (($x947 (and $x301 $x818)))
 (let ((?x1077 (* y!5 x!6)))
 (let ((?x615 (+ z!4 ?x91 ?x72 ?x1077)))
 (let ((?x911 (+ (* (/ 1.0 2.0) (* z!4 z!4 z!4 x!6 x!6)) (* (- (/ 3.0 2.0)) (* z!4 z!4 z!4 y!5 x!6 x!6)) (* (/ 3.0 2.0) (* z!4 z!4 z!4 y!5 y!5 x!6 x!6)) (* (- (/ 1.0 2.0)) (* z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6)) (* (/ 3.0 2.0) (* z!4 z!4 x!6 x!6 x!6)) (* (- (/ 9.0 2.0)) (* z!4 z!4 y!5 x!6 x!6 x!6)) (* (/ 9.0 2.0) (* z!4 z!4 y!5 y!5 x!6 x!6 x!6)) (* (- (/ 3.0 2.0)) (* z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6)) (* (/ 3.0 2.0) (* z!4 x!6 x!6 x!6 x!6)) (* (- (/ 9.0 2.0)) (* z!4 y!5 x!6 x!6 x!6 x!6)) (* (/ 9.0 2.0) (* z!4 y!5 y!5 x!6 x!6 x!6 x!6)) (* (- (/ 3.0 2.0)) (* z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6)) ?x966 (* (- (/ 3.0 2.0)) (* y!5 x!6 x!6 x!6 x!6 x!6)) (* (/ 3.0 2.0) (* y!5 y!5 x!6 x!6 x!6 x!6 x!6)) (* (- (/ 1.0 2.0)) (* y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)) (* (- 4.0) (* z!4 z!4 z!4 x!6 x!6 x!6)) (* 4.0 (* z!4 z!4 z!4 y!5 x!6 x!6 x!6)) (* (- 12.0) (* z!4 z!4 x!6 x!6 x!6 x!6)) (* 12.0 (* z!4 z!4 y!5 x!6 x!6 x!6 x!6)) (* (- 12.0) (* z!4 x!6 x!6 x!6 x!6 x!6)) (* 12.0 (* z!4 y!5 x!6 x!6 x!6 x!6 x!6)) ?x895 (* 4.0 (* y!5 x!6 x!6 x!6 x!6 x!6 x!6)))))
 (let ((?x148 (+ x!6 (* (- 1.0) ?x1077) (* (- 2.0) (* z!4 x!6 x!6 x!6)) (* 4.0 (* z!4 y!5 x!6 x!6 x!6)) (* (- 2.0) (* z!4 y!5 y!5 x!6 x!6 x!6)) ?x1103 (* 4.0 (* y!5 x!6 x!6 x!6 x!6)) (* (- 2.0) (* y!5 y!5 x!6 x!6 x!6 x!6)))))
 (let ((?x546 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x540 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x121 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 z00)))
 (let ((?x242 (* z!4 z!4 z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x253 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x273 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x277 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 z00)))
 (let ((?x174 (* z!4 z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x631 (* z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x626 (* z!4 z!4 z!4 y!5 y!5 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x85 (* 4.0 (* z!4 z!4 z!4 y!5 y!5 x!6 x!6 x!6 x!6 z00))))
 (let ((?x323 (* (- 4.0) (* z!4 z!4 z!4 z!4 y!5 y!5 x!6 x!6 x!6 x!6))))
 (let ((?x332 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6)))
 (let ((?x815 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x00 y00)))
 (let ((?x824 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 z00)))
 (let ((?x766 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6)))
 (let ((?x634 (+ (* (/ 1.0 2.0) ?x766) (* (- (/ 1.0 2.0)) ?x824) (* (- (/ 1.0 2.0)) ?x815) (* (/ 1.0 2.0) ?x332) ?x323 ?x85 (* 4.0 ?x626) (* (- 4.0) ?x631) ?x174 (* (- 1.0) ?x277) (* (- 1.0) ?x273) ?x253 (* (- 8.0) ?x242) (* 8.0 ?x121) (* 8.0 ?x540) (* (- 8.0) ?x546))))
 (let (($x710 (and (= ?x615 0.0) (or (not (= ?x634 0.0)) (not (= (* ?x148 ?x911 ?x615) 0.0))))))
 (let (($x96 (exists ((x Real) (y Real) (z Real) )(! (let ((?x77 (* y x)))
 (let ((?x71 (* x00 y00)))
 (let ((?x72 (* (- 1.0) ?x71)))
 (let ((?x91 (* (- 1.0) z00)))
 (let ((?x97 (+ z ?x91 ?x72 ?x77)))
 (let ((?x925 (* 4.0 (* z z z y x x x))))
 (let ((?x708 (* (- (/ 1.0 2.0)) (* z z z y y y x x))))
 (let ((?x938 (+ (* (/ 1.0 2.0) (* z z z x x)) (* (- (/ 3.0 2.0)) (* z z z y x x)) (* (/ 3.0 2.0) (* z z z y y x x)) ?x708 (* (/ 3.0 2.0) (* z z x x x)) (* (- (/ 9.0 2.0)) (* z z y x x x)) (* (/ 9.0 2.0) (* z z y y x x x)) (* (- (/ 3.0 2.0)) (* z z y y y x x x)) (* (/ 3.0 2.0) (* z x x x x)) (* (- (/ 9.0 2.0)) (* z y x x x x)) (* (/ 9.0 2.0) (* z y y x x x x)) (* (- (/ 3.0 2.0)) (* z y y y x x x x)) (* (/ 1.0 2.0) (* x x x x x)) (* (- (/ 3.0 2.0)) (* y x x x x x)) (* (/ 3.0 2.0) (* y y x x x x x)) (* (- (/ 1.0 2.0)) (* y y y x x x x x)) (* (- 4.0) (* z z z x x x)) ?x925 (* (- 12.0) (* z z x x x x)) (* 12.0 (* z z y x x x x)) (* (- 12.0) (* z x x x x x)) (* 12.0 (* z y x x x x x)) (* (- 4.0) (* x x x x x x)) (* 4.0 (* y x x x x x x)))))
 (let ((?x1065 (* (- 2.0) (* z y y x x x))))
 (let ((?x1093 (* (- 1.0) ?x77)))
 (let ((?x1087 (+ x ?x1093 (* (- 2.0) (* z x x x)) (* 4.0 (* z y x x x)) ?x1065 (* (- 2.0) (* x x x x)) (* 4.0 (* y x x x x)) (* (- 2.0) (* y y x x x x)))))
 (let ((?x1294 (* z z z z y y y y x x x x x x x)))
 (let ((?x1284 (* z z z z y y y x x x x x x x00 y00)))
 (let ((?x1274 (* z z z z y y y x x x x x x z00)))
 (let ((?x1264 (* z z z z z y y y x x x x x x)))
 (let ((?x1255 (* z z z z y y y y y y x x x x x x)))
 (let ((?x1246 (* z z z z y y y y y x x x x x x00 y00)))
 (let ((?x1236 (* z z z z y y y y y x x x x x z00)))
 (let ((?x1227 (* z z z z z y y y y y x x x x x)))
 (let ((?x1221 (* (- 4.0) (* z z z y y y x x x x x))))
 (let ((?x1211 (* 4.0 (* z z z y y x x x x x00 y00))))
 (let ((?x1181 (* (/ 1.0 2.0) (* z z z y y y y y x x x x))))
 (let ((?x1171 (* (- (/ 1.0 2.0)) (* z z z y y y y x x x x00 y00))))
 (let ((?x1161 (* (- (/ 1.0 2.0)) (* z z z y y y y x x x z00))))
 (let ((?x1151 (* (/ 1.0 2.0) (* z z z z y y y y x x x))))
 (let ((?x1299 (+ ?x1151 ?x1161 ?x1171 ?x1181 (* (- 4.0) (* z z z z y y x x x x)) (* 4.0 (* z z z y y x x x x z00)) ?x1211 ?x1221 ?x1227 (* (- 1.0) ?x1236) (* (- 1.0) ?x1246) ?x1255 (* (- 8.0) ?x1264) (* 8.0 ?x1274) (* 8.0 ?x1284) (* (- 8.0) ?x1294))))
 (let (($x1060 (not (= ?x1299 0.0))))
 (let (($x102 (= ?x97 0.0)))
 (and $x102 (or $x1060 (not (= (* ?x1087 ?x938 ?x97) 0.0)))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x816 (exists ((x Real) (y Real) (z Real) )(! (let ((?x91 (* (- 1.0) z00)))
 (let ((?x71 (* x00 y00)))
 (let ((?x72 (* (- 1.0) ?x71)))
 (let ((?x844 (+ ?x72 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x91)))
 (let ((?x113 (* (/ 1.0 2.0) y)))
 (let ((?x948 (+ (- (/ 1.0 2.0)) ?x113)))
 (let ((?x40 (+ z x)))
 (let ((?x756 (+ (* (- 4.0) (* ?x40 ?x40 ?x40 ?x948 ?x948 ?x948 x x)) (* 8.0 (* ?x40 ?x40 ?x40 ?x948 x x x)))))
 (let ((?x772 (+ (* (- 8.0) (* ?x40 ?x948 ?x948 x x x)) (* (- 2.0) (* ?x948 x)))))
 (let ((?x77 (* y x)))
 (let ((?x589 (+ ?x72 ?x77 z ?x91)))
 (let ((?x925 (* 4.0 (* z z z y x x x))))
 (let ((?x708 (* (- (/ 1.0 2.0)) (* z z z y y y x x))))
 (let ((?x822 (* (+ (* (- 2.0) (* z y y x x x)) (* (- 1.0) ?x77)) (+ ?x708 ?x925) ?x589)))
 (and (= ?x589 0.0) (or (not (= ?x822 0.0)) (not (= (* ?x772 ?x756 ?x844) 0.0)))))))))))))))))) :qid k!28))
 ))
 (let ((?x70 (lambda ((x Real) (y Real) (z Real) )(let ((?x77 (* y x)))
 (let ((?x71 (* x00 y00)))
 (let ((?x72 (* (- 1.0) ?x71)))
 (let ((?x91 (* (- 1.0) z00)))
 (let ((?x97 (+ z ?x91 ?x72 ?x77)))
 (let ((?x925 (* 4.0 (* z z z y x x x))))
 (let ((?x708 (* (- (/ 1.0 2.0)) (* z z z y y y x x))))
 (let ((?x938 (+ (* (/ 1.0 2.0) (* z z z x x)) (* (- (/ 3.0 2.0)) (* z z z y x x)) (* (/ 3.0 2.0) (* z z z y y x x)) ?x708 (* (/ 3.0 2.0) (* z z x x x)) (* (- (/ 9.0 2.0)) (* z z y x x x)) (* (/ 9.0 2.0) (* z z y y x x x)) (* (- (/ 3.0 2.0)) (* z z y y y x x x)) (* (/ 3.0 2.0) (* z x x x x)) (* (- (/ 9.0 2.0)) (* z y x x x x)) (* (/ 9.0 2.0) (* z y y x x x x)) (* (- (/ 3.0 2.0)) (* z y y y x x x x)) (* (/ 1.0 2.0) (* x x x x x)) (* (- (/ 3.0 2.0)) (* y x x x x x)) (* (/ 3.0 2.0) (* y y x x x x x)) (* (- (/ 1.0 2.0)) (* y y y x x x x x)) (* (- 4.0) (* z z z x x x)) ?x925 (* (- 12.0) (* z z x x x x)) (* 12.0 (* z z y x x x x)) (* (- 12.0) (* z x x x x x)) (* 12.0 (* z y x x x x x)) (* (- 4.0) (* x x x x x x)) (* 4.0 (* y x x x x x x)))))
 (let ((?x1065 (* (- 2.0) (* z y y x x x))))
 (let ((?x1093 (* (- 1.0) ?x77)))
 (let ((?x1087 (+ x ?x1093 (* (- 2.0) (* z x x x)) (* 4.0 (* z y x x x)) ?x1065 (* (- 2.0) (* x x x x)) (* 4.0 (* y x x x x)) (* (- 2.0) (* y y x x x x)))))
 (let ((?x1294 (* z z z z y y y y x x x x x x x)))
 (let ((?x1284 (* z z z z y y y x x x x x x x00 y00)))
 (let ((?x1274 (* z z z z y y y x x x x x x z00)))
 (let ((?x1264 (* z z z z z y y y x x x x x x)))
 (let ((?x1255 (* z z z z y y y y y y x x x x x x)))
 (let ((?x1246 (* z z z z y y y y y x x x x x x00 y00)))
 (let ((?x1236 (* z z z z y y y y y x x x x x z00)))
 (let ((?x1227 (* z z z z z y y y y y x x x x x)))
 (let ((?x1221 (* (- 4.0) (* z z z y y y x x x x x))))
 (let ((?x1211 (* 4.0 (* z z z y y x x x x x00 y00))))
 (let ((?x1181 (* (/ 1.0 2.0) (* z z z y y y y y x x x x))))
 (let ((?x1171 (* (- (/ 1.0 2.0)) (* z z z y y y y x x x x00 y00))))
 (let ((?x1161 (* (- (/ 1.0 2.0)) (* z z z y y y y x x x z00))))
 (let ((?x1151 (* (/ 1.0 2.0) (* z z z z y y y y x x x))))
 (let ((?x1299 (+ ?x1151 ?x1161 ?x1171 ?x1181 (* (- 4.0) (* z z z z y y x x x x)) (* 4.0 (* z z z y y x x x x z00)) ?x1211 ?x1221 ?x1227 (* (- 1.0) ?x1236) (* (- 1.0) ?x1246) ?x1255 (* (- 8.0) ?x1264) (* 8.0 ?x1274) (* 8.0 ?x1284) (* (- 8.0) ?x1294))))
 (let (($x1060 (not (= ?x1299 0.0))))
 (let (($x102 (= ?x97 0.0)))
 (let (($x1134 (and $x102 (or $x1060 (not (= (* ?x1087 ?x938 ?x97) 0.0))))))
 (let ((?x844 (+ ?x72 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x91)))
 (let ((?x113 (* (/ 1.0 2.0) y)))
 (let ((?x948 (+ (- (/ 1.0 2.0)) ?x113)))
 (let ((?x40 (+ z x)))
 (let ((?x756 (+ (* (- 4.0) (* ?x40 ?x40 ?x40 ?x948 ?x948 ?x948 x x)) (* 8.0 (* ?x40 ?x40 ?x40 ?x948 x x x)))))
 (let ((?x772 (+ (* (- 8.0) (* ?x40 ?x948 ?x948 x x x)) (* (- 2.0) (* ?x948 x)))))
 (let (($x713 (not (= (* (+ ?x1065 ?x1093) (+ ?x708 ?x925) (+ ?x72 ?x77 z ?x91)) 0.0))))
 (let (($x724 (and (= (+ ?x72 ?x77 z ?x91) 0.0) (or $x713 (not (= (* ?x772 ?x756 ?x844) 0.0))))))
 (rewrite (= $x724 $x1134))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x63 (exists ((x Real) (y Real) (z Real) )(! (let ((?x49 (/ y 2.0)))
 (let ((?x50 (* 2.0 x ?x49)))
 (let ((?x57 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x ?x49 ?x49 z) ?x50)))
 (let ((?x24 (- 1.0)))
 (let ((?x55 (+ (* ?x24 2.0 x 2.0 x ?x49 ?x49 ?x49 z z z) (* 2.0 x 2.0 x 2.0 x ?x49 z z z))))
 (let (($x59 (= (* (- (+ (* ?x24 x00 y00) ?x50 z) z00) ?x55 ?x57) 0.0)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x37 (* 2.0 x ?x36)))
 (let ((?x40 (+ z x)))
 (let ((?x45 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x40) ?x37)))
 (let ((?x43 (+ (* ?x24 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x40 ?x40 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40 ?x40 ?x40))))
 (let (($x47 (= (* (- (+ (* ?x24 x00 y00) ?x37 z x) z00) ?x43 ?x45) 0.0)))
 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not $x47) (not $x59))))))))))))))) :qid k!28))
 ))
 (let ((?x817 (lambda ((x Real) (y Real) (z Real) )(let ((?x91 (* (- 1.0) z00)))
 (let ((?x71 (* x00 y00)))
 (let ((?x72 (* (- 1.0) ?x71)))
 (let ((?x844 (+ ?x72 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x91)))
 (let ((?x113 (* (/ 1.0 2.0) y)))
 (let ((?x948 (+ (- (/ 1.0 2.0)) ?x113)))
 (let ((?x40 (+ z x)))
 (let ((?x756 (+ (* (- 4.0) (* ?x40 ?x40 ?x40 ?x948 ?x948 ?x948 x x)) (* 8.0 (* ?x40 ?x40 ?x40 ?x948 x x x)))))
 (let ((?x772 (+ (* (- 8.0) (* ?x40 ?x948 ?x948 x x x)) (* (- 2.0) (* ?x948 x)))))
 (let ((?x77 (* y x)))
 (let ((?x589 (+ ?x72 ?x77 z ?x91)))
 (let ((?x925 (* 4.0 (* z z z y x x x))))
 (let ((?x708 (* (- (/ 1.0 2.0)) (* z z z y y y x x))))
 (let ((?x822 (* (+ (* (- 2.0) (* z y y x x x)) (* (- 1.0) ?x77)) (+ ?x708 ?x925) ?x589)))
 (let (($x724 (and (= ?x589 0.0) (or (not (= ?x822 0.0)) (not (= (* ?x772 ?x756 ?x844) 0.0))))))
 (let ((?x49 (/ y 2.0)))
 (let ((?x50 (* 2.0 x ?x49)))
 (let ((?x57 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x ?x49 ?x49 z) ?x50)))
 (let ((?x24 (- 1.0)))
 (let ((?x55 (+ (* ?x24 2.0 x 2.0 x ?x49 ?x49 ?x49 z z z) (* 2.0 x 2.0 x 2.0 x ?x49 z z z))))
 (let (($x59 (= (* (- (+ (* ?x24 x00 y00) ?x50 z) z00) ?x55 ?x57) 0.0)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x37 (* 2.0 x ?x36)))
 (let ((?x45 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x40) ?x37)))
 (let ((?x43 (+ (* ?x24 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x40 ?x40 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40 ?x40 ?x40))))
 (let (($x47 (= (* (- (+ (* ?x24 x00 y00) ?x37 z x) z00) ?x43 ?x45) 0.0)))
 (let (($x62 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not $x47) (not $x59)))))
 (rewrite (= $x62 $x724))))))))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x261 (mp (mp @x64 (quant-intro (proof-bind ?x817) (= $x63 $x816)) $x816) (quant-intro (proof-bind ?x70) (= $x816 $x96)) $x96)))
 (let ((@x829 (mp (mp~ @x261 (sk (~ $x96 $x710)) $x710) (rewrite (= $x710 $x947)) $x947)))
 (let ((@x838 (and-elim @x829 $x301)))
 (let (($x727 (<= ?x294 0.0)))
 (let (($x807 (= 0.0 ?x294)))
 (let ((@x870 (mp @x838 (symm (commutativity (= $x807 $x301)) (= $x301 $x807)) $x807)))
 (let ((@x225 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x807) $x727)) @x870 $x727)))
 (let (($x805 (>= ?x294 0.0)))
 (let ((@x875 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x807) $x805)) @x870 $x805)))
 (let (($x236 (<= ?x851 0.0)))
 (let (($x865 (>= ?x851 0.0)))
 (let ((@x610 ((_ th-lemma arith) (lemma ((_ th-lemma arith) (hypothesis (not $x865)) @x225 false) $x865) (lemma ((_ th-lemma arith) @x875 (hypothesis (not $x236)) false) $x236) @x875 @x225 (= ?x294 ?x851))))
 (let (($x579 (or (not $x994) $x781)))
 (let ((@x606 (unit-resolution ((_ th-lemma arith) $x579) (hypothesis $x881) (hypothesis $x994) false)))
 (let ((@x906 (unit-resolution (lemma @x606 $x579) (trans* (symm @x610 (= ?x851 ?x294)) @x838 $x994) $x781)))
 (let ((@x903 (mp (unit-resolution (and-elim @x829 $x818) @x906 $x869) (monotonicity @x902 (= $x869 $x763)) $x763)))
 (let (($x768 (<= ?x863 0.0)))
 (let ((@x319 (unit-resolution ((_ th-lemma arith) (or (not $x727) (not $x805) $x768)) @x225 @x875 (hypothesis (not $x768)) false)))
 (let ((@x892 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x941 (not $x768) $x901)) (lemma @x319 $x768) @x903 $x901)))
 (unit-resolution ((_ th-lemma arith) (or (not $x727) (not $x805) $x771)) @x225 @x875 @x892 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      16
 :arith-eq-adapter               16
 :arith-bound-propagations-cheap 13
 :arith-conflicts                14
 :arith-diseq                    25
 :arith-fixed-eqs                1
 :arith-grobner-calls            2
 :arith-grobner-conflicts        2
 :arith-horner-calls             2
 :arith-lower                    22
 :arith-make-feasible            19
 :arith-max-columns              65
 :arith-max-rows                 6
 :arith-nla-explanations         6
 :arith-nla-lemmas               12
 :arith-propagations             13
 :arith-upper                    13
 :conflicts                      6
 :decisions                      24
 :del-clause                     10
 :final-checks                   14
 :max-memory                     2.32
 :memory                         1.16
 :mk-bool-var                    58
 :mk-clause                      63
 :num-allocs                     47749815
 :num-checks                     1
 :propagations                   30
 :rlimit-count                   5853
 :time                           0.20
 :total-time                     0.21)
