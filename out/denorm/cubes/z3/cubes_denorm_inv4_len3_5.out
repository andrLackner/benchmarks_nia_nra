unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x432 (* (- 1) k!2)))
 (let ((?x180 (* n!0 n!0)))
 (let ((?x481 (* 3 ?x180)))
 (let ((?x309 (+ ?x481 (* 3 n!0) ?x432)))
 (let (($x510 (<= ?x309 (- 1))))
 (let (($x434 (= ?x309 (- 1))))
 (let ((?x173 (* (- 1) (* c!3 m!1 m!1))))
 (let ((?x428 (* k!2 k!2)))
 (let ((?x285 (* (- 6) ?x428)))
 (let ((?x129 (* (- 6) (* c!3 m!1))))
 (let ((?x172 (* (- 6) (* c!3 k!2))))
 (let ((?x117 (* (- 1) (* c!3 c!3 c!3 m!1))))
 (let ((?x93 (* (- 3) (* c!3 c!3 k!2 k!2))))
 (let ((?x291 (+ c!3 k!2)))
 (let ((?x264 (+ m!1 k!2)))
 (let ((?x116 (* (- 1) (* k!2 k!2 k!2 k!2))))
 (let ((?x147 (* (- 3) (* c!3 k!2 k!2 k!2))))
 (let ((?x92 (* (- 1) (* c!3 c!3 c!3 k!2))))
 (let ((?x126 (+ ?x92 ?x147 ?x116 (* ?x264 ?x264 ?x264 ?x291 ?x291 ?x291) ?x93 ?x117 (* (- 1) (* m!1 m!1 k!2)) (* (- 3) (* c!3 m!1 k!2 k!2)) (* (- 1) (* n!0 m!1 k!2 k!2)) ?x172 (* (- 6) (* n!0 m!1 k!2)) ?x129 (* (- 6) (* n!0 k!2 k!2)) (* (- 1) (* m!1 k!2 k!2)) (* (- 6) (* c!3 n!0 k!2)) (* (- 6) (* c!3 n!0 m!1)) (* (- 1) (* c!3 m!1 k!2)) ?x285 (* (- 1) (* c!3 n!0 m!1 m!1)) (* (- 1) (* c!3 n!0 m!1 k!2)) ?x173 (* (- 3) (* c!3 c!3 m!1 k!2)) (* (- 1) (* m!1 k!2 k!2 k!2)) (* (- 1) (* n!0 m!1 m!1 k!2)) (* (- 6) (* m!1 k!2)))))
 (let ((?x276 (* ?x126 (+ 7 ?x481 (* 9 n!0) (* (- 1) m!1) ?x432))))
 (let (($x457 (= ?x276 0)))
 (let (($x283 (not $x457)))
 (let (($x515 (= (+ (* 3 c!3) (* (- 2) n!0) (* (- 1) (* n!0 k!2)) k!2) 1)))
 (let ((?x456 (* 5 k!2)))
 (let ((?x459 (* (- 1) ?x428)))
 (let ((?x359 (* (- 9) n!0)))
 (let ((?x213 (* 9 (* c!3 n!0))))
 (let ((?x231 (* 18 c!3)))
 (let ((?x451 (* (- 1) m!1)))
 (let ((?x553 (+ (* 6 n!0) ?x451)))
 (let (($x546 (= ?x553 (- 6))))
 (let (($x269 (and $x546 (= (+ ?x231 ?x213 ?x359 ?x459 ?x456) 4) $x515 $x434 $x283)))
 (let ((?x125 (+ ?x285 (* (+ k!2 m!1) (+ k!2 m!1) (+ k!2 m!1) ?x291 ?x291 ?x291) ?x172 ?x173 (* (- 6) (* k!2 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1)) (* (- 6) (* k!2 k!2 n!0)) (* (- 6) (* c!3 k!2 n!0)) (* (- 1) (* k!2 k!2 m!1)) (* (- 6) (* c!3 m!1 n!0)) (* (- 1) (* c!3 k!2 m!1)) (* (- 6) (* k!2 m!1)) ?x129 (* (- 1) (* c!3 k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 m!1 n!0)) (* (- 1) (* c!3 m!1 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1 n!0)) ?x92 ?x93 ?x147 ?x116 ?x117 (* (- 3) (* c!3 c!3 k!2 m!1)) (* (- 3) (* c!3 k!2 k!2 m!1)) (* (- 1) (* k!2 k!2 k!2 m!1)))))
 (let (($x151 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x520 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x231 ?x456 ?x359 ?x459 ?x213) 4) $x151 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x180)) 1) (not (= (* ?x125 (+ 7 ?x432 ?x451 (* 9 n!0) ?x481)) 0)))))
 (let (($x221 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x498 (* (- 1) (* k k k m))))
 (let ((?x511 (* (- 3) (* c k k m))))
 (let ((?x508 (* (- 3) (* c c k m))))
 (let ((?x495 (* (- 1) (* c c c m))))
 (let ((?x494 (* (- 1) (* k k k k))))
 (let ((?x505 (* (- 3) (* c k k k))))
 (let ((?x502 (* (- 3) (* c c k k))))
 (let ((?x491 (* (- 1) (* c c c k))))
 (let ((?x427 (* (- 1) (* k m m n))))
 (let ((?x425 (* (- 1) (* c m m n))))
 (let ((?x423 (* (- 1) (* k k m n))))
 (let ((?x421 (* (- 1) (* c k m n))))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x98 (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76)))
 (let ((?x541 (+ (* (- 6) (* k k)) ?x98 (* (- 6) (* c k)) (* (- 1) (* c m m)) (* (- 6) (* k m n)) (* (- 1) (* k m m)) (* (- 6) (* k k n)) (* (- 6) (* c k n)) (* (- 1) (* k k m)) (* (- 6) (* c m n)) (* (- 1) (* c k m)) (* (- 6) (* k m)) (* (- 6) (* c m)) ?x421 ?x423 ?x425 ?x427 ?x491 ?x502 ?x505 ?x494 ?x495 ?x508 ?x511 ?x498)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) ?x266)) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= (* ?x541 (+ 7 ?x235 ?x351 ?x48 ?x267)) 0))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x150 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x170 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x98 (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76)))
 (let ((?x118 (+ (* (- 1) (* (+ 1 n) (+ 6 m) ?x71 ?x76)) (* (- 1) (* ?x71 ?x76 ?x76 ?x76)) ?x98)))
 (let (($x248 (not (= (* ?x118 ?x170) 0))))
 (let (($x223 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x135 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x135 $x223 $x248)))))))))))))))))) :qid k!34))
 ))
 (let ((?x224 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x498 (* (- 1) (* k k k m))))
 (let ((?x511 (* (- 3) (* c k k m))))
 (let ((?x508 (* (- 3) (* c c k m))))
 (let ((?x495 (* (- 1) (* c c c m))))
 (let ((?x494 (* (- 1) (* k k k k))))
 (let ((?x505 (* (- 3) (* c k k k))))
 (let ((?x502 (* (- 3) (* c c k k))))
 (let ((?x491 (* (- 1) (* c c c k))))
 (let ((?x427 (* (- 1) (* k m m n))))
 (let ((?x425 (* (- 1) (* c m m n))))
 (let ((?x423 (* (- 1) (* k k m n))))
 (let ((?x421 (* (- 1) (* c k m n))))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x98 (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76)))
 (let ((?x541 (+ (* (- 6) (* k k)) ?x98 (* (- 6) (* c k)) (* (- 1) (* c m m)) (* (- 6) (* k m n)) (* (- 1) (* k m m)) (* (- 6) (* k k n)) (* (- 6) (* c k n)) (* (- 1) (* k k m)) (* (- 6) (* c m n)) (* (- 1) (* c k m)) (* (- 6) (* k m)) (* (- 6) (* c m)) ?x421 ?x423 ?x425 ?x427 ?x491 ?x502 ?x505 ?x494 ?x495 ?x508 ?x511 ?x498)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) ?x266)) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x570 (and $x121 $x205 $x257 $x295 (not (= (* ?x541 (+ 7 ?x235 ?x351 ?x48 ?x267)) 0)))))
 (let ((?x65 (* 3 n)))
 (let ((?x170 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x118 (+ (* (- 1) (* (+ 1 n) (+ 6 m) ?x71 ?x76)) (* (- 1) (* ?x71 ?x76 ?x76 ?x76)) ?x98)))
 (let (($x248 (not (= (* ?x118 ?x170) 0))))
 (let (($x223 (= (+ ?x267 ?x235 ?x65) (- 1))))
 (let (($x135 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x155 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x135 $x223 $x248)))
 (rewrite (= $x155 $x570)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x250 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x170 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x98 (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76)))
 (let ((?x118 (+ (* (- 1) (* (+ 1 n) (+ 6 m) ?x71 ?x76)) (* (- 1) (* ?x71 ?x76 ?x76 ?x76)) ?x98)))
 (let (($x248 (not (= (* ?x118 ?x170) 0))))
 (let (($x223 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x355 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x223 $x248))))))))))))))) :qid k!34))
 ))
 (let ((?x329 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x170 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x98 (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76)))
 (let ((?x118 (+ (* (- 1) (* (+ 1 n) (+ 6 m) ?x71 ?x76)) (* (- 1) (* ?x71 ?x76 ?x76 ?x76)) ?x98)))
 (let (($x248 (not (= (* ?x118 ?x170) 0))))
 (let (($x223 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x135 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x155 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x135 $x223 $x248)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x251 (and $x121 (= ?x355 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x223 $x248)))
 (rewrite (= $x251 $x155))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x81 (* ?x76 ?x76 ?x76 ?x71 ?x71 ?x71)))
 (let ((?x80 (- (* (- 1) ?x76 ?x71 (+ m 6) (+ n 1)) (* ?x76 ?x76 ?x76 ?x71))))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x74 (+ ?x80 ?x81)) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x234 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x170 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x98 (* ?x71 ?x71 ?x71 ?x76 ?x76 ?x76)))
 (let ((?x118 (+ (* (- 1) (* (+ 1 n) (+ 6 m) ?x71 ?x76)) (* (- 1) (* ?x71 ?x76 ?x76 ?x76)) ?x98)))
 (let (($x248 (not (= (* ?x118 ?x170) 0))))
 (let (($x223 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x251 (and $x121 (= ?x355 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x223 $x248)))
 (let ((?x81 (* ?x76 ?x76 ?x76 ?x71 ?x71 ?x71)))
 (let ((?x80 (- (* (- 1) ?x76 ?x71 (+ m 6) (+ n 1)) (* ?x76 ?x76 ?x76 ?x71))))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= (* ?x74 (+ ?x80 ?x81)) 0))))))
 (rewrite (= $x87 $x251))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x214 (mp (mp @x89 (quant-intro (proof-bind ?x234) (= $x88 $x250)) $x250) (rewrite (= $x250 $x250)) $x250)))
 (let ((@x252 (mp (mp @x214 (quant-intro (proof-bind ?x329) (= $x250 $x150)) $x150) (quant-intro (proof-bind ?x224) (= $x150 $x221)) $x221)))
 (let ((@x330 (mp (mp~ @x252 (sk (~ $x221 $x520)) $x520) (rewrite (= $x520 $x269)) $x269)))
 (let ((@x563 (and-elim @x330 $x434)))
 (let ((@x127 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x510)) @x563 $x510)))
 (let (($x165 (<= ?x553 (- 6))))
 (let ((@x279 (and-elim @x330 $x546)))
 (let ((@x327 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x546) $x165)) @x279 $x165)))
 (let (($x100 (>= ?x309 (- 1))))
 (let ((@x345 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x100)) @x563 $x100)))
 (let (($x163 (>= ?x553 (- 6))))
 (let ((@x138 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x546) $x163)) @x279 $x163)))
 (let (($x372 (not (<= ?x276 0))))
 (let (($x187 (>= ?x276 0)))
 (let ((@x315 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x187)) @x138 @x345 @x327 @x127 false) $x187)))
 (let ((@x287 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x457 $x372 (not $x187))) (and-elim @x330 $x283) (or $x372 (not $x187)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x287 @x315 $x372) @x138 @x345 @x327 @x127 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        18
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             143
 :arith-nonlinear-bounds    18
 :arith-num-rows            8
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      4
 :arith-tableau-max-columns 53
 :arith-tableau-max-rows    8
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.60
 :memory                    3.12
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1092322
 :num-checks                1
 :propagations              10
 :rlimit-count              3711
 :time                      0.01
 :total-time                0.01)
