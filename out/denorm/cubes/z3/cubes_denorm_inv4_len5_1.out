unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x135 (* (- 3) n!0)))
 (let ((?x278 (* n!0 n!0)))
 (let ((?x285 (* (- 3) ?x278)))
 (let ((?x526 (+ k!2 ?x285 ?x135)))
 (let (($x256 (>= ?x526 1)))
 (let (($x144 (= ?x526 1)))
 (let ((?x324 (* (- 1) (* c!3 m!1))))
 (let ((?x559 (* (- 3) (* c!3 c!3 k!2 n!0))))
 (let ((?x482 (* (- 1) (* c!3 c!3 c!3))))
 (let ((?x562 (* (- 1) (* c!3 c!3 c!3 n!0))))
 (let ((?x431 (+ c!3 k!2)))
 (let ((?x99 (+ k!2 m!1)))
 (let ((?x430 (+ 6 m!1)))
 (let ((?x418 (+ 1 n!0)))
 (let ((?x495 (* ?x418 ?x418 ?x430 ?x99 ?x99 ?x431)))
 (let ((?x493 (* (- 3) (* c!3 k!2 k!2))))
 (let ((?x555 (* (- 1) (* k!2 k!2 k!2 n!0))))
 (let ((?x234 (* (- 1) (* c!3 k!2))))
 (let ((?x566 (* (- 1) (* ?x418 ?x430 ?x430 ?x431 ?x431 ?x431))))
 (let ((?x411 (* ?x418 ?x418 ?x418 ?x430 ?x99 ?x431 ?x431 ?x431)))
 (let ((?x392 (* (- 1) (* k!2 k!2))))
 (let ((?x327 (* (- 3) (* c!3 c!3 k!2))))
 (let ((?x535 (* (- 1) (* k!2 m!1))))
 (let ((?x318 (* (- 3) (* c!3 k!2 k!2 n!0))))
 (let ((?x357 (* (- 1) (* k!2 k!2 k!2))))
 (let ((?x328 (+ ?x357 ?x318 ?x535 ?x327 ?x392 ?x411 ?x566 ?x234 ?x555 ?x493 ?x495 ?x562 ?x482 ?x559 ?x324)))
 (let ((?x408 (* 9 n!0)))
 (let ((?x410 (* 3 ?x278)))
 (let ((?x98 (* (- 1) m!1)))
 (let ((?x280 (* (- 1) k!2)))
 (let ((?x564 (* (+ 7 ?x280 ?x98 ?x410 ?x408) ?x328)))
 (let (($x329 (= ?x564 0)))
 (let (($x158 (not $x329)))
 (let (($x517 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x371 (* 9 (* c!3 n!0))))
 (let ((?x464 (* (- 9) n!0)))
 (let ((?x379 (* 5 k!2)))
 (let ((?x516 (* 18 c!3)))
 (let ((?x276 (+ m!1 (* (- 6) n!0))))
 (let (($x177 (= ?x276 6)))
 (let (($x540 (and $x177 (= (+ ?x516 ?x379 ?x392 ?x464 ?x371) 4) $x517 $x144 $x158)))
 (let ((?x217 (+ ?x392 ?x495 ?x411 ?x566 ?x327 ?x482 ?x555 ?x318 ?x559 ?x562 ?x535 ?x324 ?x234 ?x493 ?x357)))
 (let (($x224 (and $x177 (= (+ ?x516 ?x379 ?x464 ?x392 ?x371) 4) $x517 (= (+ k!2 ?x135 ?x285) 1) (not (= (* (+ 7 ?x280 ?x98 ?x408 ?x410) ?x217) 0)))))
 (let (($x281 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x547 (* (- 1) (* k k k))))
 (let ((?x560 (* (- 3) (* c k k))))
 (let ((?x407 (* (- 1) (* c k))))
 (let ((?x406 (* (- 1) (* c m))))
 (let ((?x405 (* (- 1) (* k m))))
 (let ((?x545 (* (- 1) (* c c c n))))
 (let ((?x557 (* (- 3) (* c c k n))))
 (let ((?x554 (* (- 3) (* c k k n))))
 (let ((?x542 (* (- 1) (* k k k n))))
 (let ((?x541 (* (- 1) (* c c c))))
 (let ((?x551 (* (- 3) (* c c k))))
 (let ((?x75 (+ c k)))
 (let ((?x391 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x258 (* (- 1) (* ?x306 ?x391 ?x391 ?x75 ?x75 ?x75))))
 (let ((?x71 (+ k m)))
 (let ((?x240 (* ?x306 ?x306 ?x306 ?x391 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x207 (* ?x306 ?x306 ?x391 ?x71 ?x71 ?x75)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x175 (+ ?x211 ?x207 ?x240 ?x258 ?x551 ?x541 ?x542 ?x554 ?x557 ?x545 ?x405 ?x406 ?x407 ?x560 ?x547)))
 (let ((?x269 (* n n)))
 (let ((?x270 (* 3 ?x269)))
 (let ((?x48 (* 9 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) ?x269)) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* (+ 7 ?x238 ?x354 ?x48 ?x270) ?x175) 0)))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x305 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x207 (* ?x306 ?x306 ?x391 ?x71 ?x71 ?x75)))
 (let ((?x258 (* (- 1) (* ?x306 ?x391 ?x391 ?x75 ?x75 ?x75))))
 (let ((?x240 (* ?x306 ?x306 ?x306 ?x391 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x95 (+ ?x240 ?x258 (* (- 1) (* ?x71 ?x75)) (* (- 1) (* ?x306 ?x75 ?x75 ?x75)) ?x207)))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x236 (= (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) ?x95) 0)))
 (let (($x118 (not $x236)))
 (let (($x317 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let (($x454 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x454 $x317 $x118)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x286 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x547 (* (- 1) (* k k k))))
 (let ((?x560 (* (- 3) (* c k k))))
 (let ((?x407 (* (- 1) (* c k))))
 (let ((?x406 (* (- 1) (* c m))))
 (let ((?x405 (* (- 1) (* k m))))
 (let ((?x545 (* (- 1) (* c c c n))))
 (let ((?x557 (* (- 3) (* c c k n))))
 (let ((?x554 (* (- 3) (* c k k n))))
 (let ((?x542 (* (- 1) (* k k k n))))
 (let ((?x541 (* (- 1) (* c c c))))
 (let ((?x551 (* (- 3) (* c c k))))
 (let ((?x75 (+ c k)))
 (let ((?x391 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x258 (* (- 1) (* ?x306 ?x391 ?x391 ?x75 ?x75 ?x75))))
 (let ((?x71 (+ k m)))
 (let ((?x240 (* ?x306 ?x306 ?x306 ?x391 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x207 (* ?x306 ?x306 ?x391 ?x71 ?x71 ?x75)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x175 (+ ?x211 ?x207 ?x240 ?x258 ?x551 ?x541 ?x542 ?x554 ?x557 ?x545 ?x405 ?x406 ?x407 ?x560 ?x547)))
 (let ((?x269 (* n n)))
 (let ((?x270 (* 3 ?x269)))
 (let ((?x48 (* 9 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) ?x269)) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x248 (and $x124 $x208 $x260 $x298 (not (= (* (+ 7 ?x238 ?x354 ?x48 ?x270) ?x175) 0)))))
 (let ((?x95 (+ ?x240 ?x258 (* (- 1) (* ?x71 ?x75)) (* (- 1) (* ?x306 ?x75 ?x75 ?x75)) ?x207)))
 (let ((?x105 (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 (* 3 n)) ?x95)))
 (let (($x118 (not (= ?x105 0))))
 (let (($x317 (= (+ ?x270 ?x238 (* 3 n)) (- 1))))
 (let (($x454 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x527 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x454 $x317 $x118)))
 (rewrite (= $x527 $x248)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x120 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x207 (* ?x306 ?x306 ?x391 ?x71 ?x71 ?x75)))
 (let ((?x258 (* (- 1) (* ?x306 ?x391 ?x391 ?x75 ?x75 ?x75))))
 (let ((?x240 (* ?x306 ?x306 ?x306 ?x391 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x95 (+ ?x240 ?x258 (* (- 1) (* ?x71 ?x75)) (* (- 1) (* ?x306 ?x75 ?x75 ?x75)) ?x207)))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x236 (= (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) ?x95) 0)))
 (let (($x118 (not $x236)))
 (let (($x317 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x457 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x457 (- 4)) (= (+ (* (- 3) c) (* n k) ?x238 (* 2 n)) (- 1)) $x317 $x118))))))))))))))))))) :qid k!34))
 ))
 (let ((?x218 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x207 (* ?x306 ?x306 ?x391 ?x71 ?x71 ?x75)))
 (let ((?x258 (* (- 1) (* ?x306 ?x391 ?x391 ?x75 ?x75 ?x75))))
 (let ((?x240 (* ?x306 ?x306 ?x306 ?x391 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x95 (+ ?x240 ?x258 (* (- 1) (* ?x71 ?x75)) (* (- 1) (* ?x306 ?x75 ?x75 ?x75)) ?x207)))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x236 (= (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) ?x95) 0)))
 (let (($x118 (not $x236)))
 (let (($x317 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let (($x454 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x527 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x454 $x317 $x118)))
 (let ((?x48 (* 9 n)))
 (let ((?x457 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x252 (and $x124 (= ?x457 (- 4)) (= (+ (* (- 3) c) (* n k) ?x238 (* 2 n)) (- 1)) $x317 $x118)))
 (rewrite (= $x252 $x527))))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x81 (- (* ?x75 ?x75 ?x75 ?x71 ?x76 ?x68 ?x68 ?x68) (* ?x75 ?x75 ?x75 ?x76 ?x76 ?x68))))
 (let ((?x85 (+ (- (- ?x81 (* ?x75 ?x71)) (* ?x75 ?x75 ?x75 ?x68)) (* ?x75 ?x71 ?x71 ?x76 ?x68 ?x68))))
 (let (($x87 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x85) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x87))))))))))))))))) :qid k!34))
 ))
 (let ((?x243 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x391 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x207 (* ?x306 ?x306 ?x391 ?x71 ?x71 ?x75)))
 (let ((?x258 (* (- 1) (* ?x306 ?x391 ?x391 ?x75 ?x75 ?x75))))
 (let ((?x240 (* ?x306 ?x306 ?x306 ?x391 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x95 (+ ?x240 ?x258 (* (- 1) (* ?x71 ?x75)) (* (- 1) (* ?x306 ?x75 ?x75 ?x75)) ?x207)))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x236 (= (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) ?x95) 0)))
 (let (($x118 (not $x236)))
 (let (($x317 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x457 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x252 (and $x124 (= ?x457 (- 4)) (= (+ (* (- 3) c) (* n k) ?x238 (* 2 n)) (- 1)) $x317 $x118)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x81 (- (* ?x75 ?x75 ?x75 ?x71 ?x76 ?x68 ?x68 ?x68) (* ?x75 ?x75 ?x75 ?x76 ?x76 ?x68))))
 (let ((?x85 (+ (- (- ?x81 (* ?x75 ?x71)) (* ?x75 ?x75 ?x75 ?x68)) (* ?x75 ?x71 ?x71 ?x76 ?x68 ?x68))))
 (let (($x87 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x85) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x87)))))
 (rewrite (= $x90 $x252))))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x294 (mp (mp @x92 (quant-intro (proof-bind ?x243) (= $x91 $x120)) $x120) (rewrite (= $x120 $x120)) $x120)))
 (let ((@x287 (mp (mp @x294 (quant-intro (proof-bind ?x218) (= $x120 $x305)) $x305) (quant-intro (proof-bind ?x286) (= $x305 $x281)) $x281)))
 (let ((@x364 (mp (mp~ @x287 (sk (~ $x281 $x224)) $x224) (rewrite (= $x224 $x540)) $x540)))
 (let ((@x481 (and-elim @x364 $x144)))
 (let ((@x265 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x144) $x256)) @x481 $x256)))
 (let (($x221 (>= ?x276 6)))
 (let ((@x174 (and-elim @x364 $x177)))
 (let ((@x132 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x221)) @x174 $x221)))
 (let (($x188 (<= ?x526 1)))
 (let ((@x453 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x144) $x188)) @x481 $x188)))
 (let (($x266 (<= ?x276 6)))
 (let ((@x245 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x266)) @x174 $x266)))
 (let (($x247 (not (<= ?x564 0))))
 (let (($x518 (>= ?x564 0)))
 (let ((@x361 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x518)) @x245 @x453 @x132 @x265 false) $x518)))
 (let ((@x187 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x329 $x247 (not $x518))) (and-elim @x364 $x158) (or $x247 (not $x518)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x187 @x361 $x247) @x245 @x453 @x132 @x265 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        18
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             111
 :arith-nonlinear-bounds    10
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      5
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.63
 :memory                    3.12
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1138391
 :num-checks                1
 :propagations              10
 :rlimit-count              3020
 :time                      0.01
 :total-time                0.01)
