unsat
((set-logic NIA)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(proof
(let ((?x604 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x335 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) (* (- 2) u!1) ?x604 (* (- 1) (* v!0 v!0)) (* (- 4) r!2))))
 (let (($x433 (>= ?x335 0)))
 (let (($x454 (= ?x335 0)))
 (let ((?x616 (* 4 r!2)))
 (let ((?x737 (* v!0 v!0)))
 (let ((?x617 (* (- 1) ?x604)))
 (let ((?x140 (* 2 u!1)))
 (let ((?x460 (* (- 2) v!0)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x557 (+ ?x100 ?x116 ?x41 ?x46 ?x192 ?x460 ?x140 ?x617 ?x737 ?x616)))
 (let ((?x504 (+ u!1 r!2)))
 (let ((?x380 (+ 2 u!1)))
 (let ((?x480 (* ?x380 ?x504 ?x504 ?x504 ?x557 v!0 v!0)))
 (let (($x472 (= ?x480 0)))
 (let (($x477 (not $x472)))
 (let ((?x501 (* (- 1) v!0)))
 (let ((?x404 (+ ?x501 r!2)))
 (let ((?x503 (+ 2 v!0)))
 (let ((?x411 (* ?x503 ?x503 ?x404 ?x404 ?x404 ?x557 u!1)))
 (let (($x566 (= ?x411 0)))
 (let (($x332 (or (not $x566) $x477)))
 (let (($x432 (and $x454 $x332)))
 (let ((?x421 (+ ?x616 ?x140 ?x460 ?x100 ?x116 ?x41 ?x617 ?x737 ?x46 ?x192)))
 (let ((?x387 (+ r!2 u!1)))
 (let ((?x580 (+ r!2 ?x501)))
 (let (($x367 (or (not (= (* ?x503 ?x503 ?x580 ?x580 ?x580 ?x421 u!1) 0)) (not (= (* ?x380 ?x387 ?x387 ?x387 ?x421 v!0 v!0) 0)))))
 (let (($x561 (and (= ?x421 0) $x367)))
 (let (($x464 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x471 (+ 2 u)))
 (let ((?x463 (+ r (* (- 1) v))))
 (let ((?x339 (+ 2 v)))
 (let (($x340 (or (not (= (* ?x339 ?x339 ?x463 ?x463 ?x463 ?x198 u) 0)) (not (= (* ?x471 ?x71 ?x71 ?x71 ?x198 v v) 0)))))
 (let (($x203 (= ?x198 0)))
 (and $x203 $x340)))))))))))))))))))) :qid k!28))
 ))
 (let (($x366 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x591 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x471 (+ 2 u)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x532 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x463 (+ r (* (- 1) v))))
 (let ((?x339 (+ 2 v)))
 (let (($x739 (or (not (= (* ?x339 ?x339 ?x463 ?x463 ?x463 ?x532 u) 0)) (not (= (* ?x471 ?x71 ?x71 ?x71 ?x591 v v) 0)))))
 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x739)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x560 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x471 (+ 2 u)))
 (let ((?x463 (+ r (* (- 1) v))))
 (let ((?x339 (+ 2 v)))
 (let (($x340 (or (not (= (* ?x339 ?x339 ?x463 ?x463 ?x463 ?x198 u) 0)) (not (= (* ?x471 ?x71 ?x71 ?x71 ?x198 v v) 0)))))
 (let (($x203 (= ?x198 0)))
 (let (($x331 (and $x203 $x340)))
 (let ((?x591 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* ?x471 ?x471)) ?x45 ?x46 ?x192)))
 (let ((?x532 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* ?x339 ?x339) ?x46 ?x192)))
 (let (($x739 (or (not (= (* ?x339 ?x339 ?x463 ?x463 ?x463 ?x532 u) 0)) (not (= (* ?x471 ?x71 ?x71 ?x71 ?x591 v v) 0)))))
 (let (($x257 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x739)))
 (rewrite (= $x257 $x331)))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((r Int) (u Int) (v Int) )(! (let ((?x75 (+ u 2)))
 (let ((?x71 (+ r u)))
 (let ((?x86 (- (* 0 ?x71 ?x75 ?x75 ?x75 v v) (* ?x71 ?x71 ?x71 ?x75 v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 ?x75))))
 (let ((?x87 (* (- (+ (- (+ (- ?x77 ?x38) ?x41) (* ?x75 ?x75)) ?x45 ?x46) ?x48) ?x86)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x67 (- (* 0 ?x52 u u u ?x57 ?x57) (* ?x52 ?x52 ?x52 u ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x69 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x67) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x69) (not (= ?x87 0)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x374 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x591 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x471 (+ 2 u)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x532 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x463 (+ r (* (- 1) v))))
 (let ((?x339 (+ 2 v)))
 (let (($x739 (or (not (= (* ?x339 ?x339 ?x463 ?x463 ?x463 ?x532 u) 0)) (not (= (* ?x471 ?x71 ?x71 ?x71 ?x591 v v) 0)))))
 (let (($x257 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x739)))
 (let ((?x75 (+ u 2)))
 (let ((?x86 (- (* 0 ?x71 ?x75 ?x75 ?x75 v v) (* ?x71 ?x71 ?x71 ?x75 v v))))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 ?x75))))
 (let ((?x87 (* (- (+ (- (+ (- ?x77 ?x38) ?x41) (* ?x75 ?x75)) ?x45 ?x46) ?x48) ?x86)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x67 (- (* 0 ?x52 u u u ?x57 ?x57) (* ?x52 ?x52 ?x52 u ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x69 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x67) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x91 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x69) (not (= ?x87 0))))))
 (rewrite (= $x91 $x257)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x534 (mp (mp @x93 (quant-intro (proof-bind ?x374) (= $x92 $x366)) $x366) (rewrite (= $x366 $x366)) $x366)))
 (let ((@x436 (mp~ (mp @x534 (quant-intro (proof-bind ?x560) (= $x366 $x464)) $x464) (sk (~ $x464 $x561)) $x561)))
 (let ((@x346 (mp @x436 (rewrite (= $x561 $x432)) $x432)))
 (let ((@x478 (and-elim @x346 $x454)))
 (let ((@x372 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x454) $x433)) @x478 $x433)))
 (let (($x508 (<= ?x335 0)))
 (let ((@x422 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x454) $x508)) @x478 $x508)))
 (let (($x381 (not (<= ?x480 0))))
 (let (($x514 (>= ?x480 0)))
 (let (($x337 (>= ?x411 0)))
 (let (($x512 (<= ?x411 0)))
 (let ((@x577 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x566 (not $x512) (not $x337))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x512)) @x422 @x372 false) $x512) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x337)) @x422 @x372 false) $x337) $x566)))
 (let ((@x389 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x472 $x381 (not $x514))) (unit-resolution (and-elim @x346 $x332) @x577 $x477) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x514)) @x422 @x372 false) $x514) $x381)))
 ((_ th-lemma arith farkas 1 1 1) @x389 @x422 @x372 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        33
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             112
 :arith-nonlinear-bounds    16
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.64
 :memory                    3.14
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1111745
 :num-checks                1
 :propagations              14
 :rlimit-count              2500
 :time                      0.01
 :total-time                0.01)
