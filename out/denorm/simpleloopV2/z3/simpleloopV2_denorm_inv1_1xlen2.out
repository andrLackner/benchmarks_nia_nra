unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x310 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x261 (<= ?x310 0)))
 (let (($x311 (= ?x310 0)))
 (let ((?x120 (* (- 1) (* y!0 y!0 x!1))))
 (let ((?x183 (* y!0 y!0 y!0)))
 (let ((?x168 (* (- 1) ?x183)))
 (let ((?x153 (* x00 y!0 y!0)))
 (let ((?x123 (* y00 y!0 y!0)))
 (let ((?x247 (+ (* 2 y00) (* 2 x00) ?x123 ?x153 ?x168 (* (- 2) y!0) (* (- 2) x!1) ?x120 (* (- 3) (* y!0 y!0)) (* 3 (* x00 y!0)) (* (- 3) (* y!0 x!1)) (* 3 (* y00 y!0)))))
 (let (($x295 (= ?x247 0)))
 (let (($x102 (not $x295)))
 (let ((?x312 (* y!0 x!1)))
 (let ((?x235 (* y!0 y!0)))
 (let ((?x75 (+ ?x123 ?x153 ?x168 ?x120 ?x235 (* (- 1) (* x00 y!0)) ?x312 (* (- 1) (* y00 y!0)))))
 (let (($x208 (= ?x75 0)))
 (let (($x142 (or (not $x208) $x102)))
 (let (($x108 (and $x311 $x142)))
 (let ((?x241 (* x!1 y!0 y!0)))
 (let ((?x191 (* (- 2) x00)))
 (let ((?x188 (* (- 2) y00)))
 (let ((?x299 (+ (* 2 x!1) (* 2 y!0) ?x188 ?x191 (* 3 ?x235) (* 3 (* x!1 y!0)) (* (- 3) (* y!0 y00)) (* (- 3) (* y!0 x00)) ?x241 ?x183 (* (- 1) (* y!0 y!0 y00)) (* (- 1) (* y!0 y!0 x00)))))
 (let ((?x193 (* y!0 y!0 x00)))
 (let ((?x192 (* y!0 y!0 y00)))
 (let ((?x173 (* x!1 y!0)))
 (let ((?x304 (+ ?x235 ?x173 (* (- 1) (* y!0 y00)) (* (- 1) (* y!0 x00)) (* (- 1) ?x241) ?x168 ?x192 ?x193)))
 (let (($x303 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x304 0)) (not (= ?x299 0))))))
 (let (($x109 (exists ((x Int) (y Int) )(! (let ((?x225 (* y y y)))
 (let ((?x221 (* x y y)))
 (let ((?x191 (* (- 2) x00)))
 (let ((?x188 (* (- 2) y00)))
 (let ((?x239 (+ (* 2 x) (* 2 y) ?x188 ?x191 (* 3 (* y y)) (* 3 (* x y)) (* (- 3) (* y y00)) (* (- 3) (* y x00)) ?x221 ?x225 (* (- 1) (* y y y00)) (* (- 1) (* y y x00)))))
 (let (($x63 (not (= ?x239 0))))
 (let ((?x232 (* y y x00)))
 (let ((?x228 (* y y y00)))
 (let ((?x194 (* x y)))
 (let ((?x128 (* y y)))
 (let ((?x325 (+ ?x128 ?x194 (* (- 1) (* y y00)) (* (- 1) (* y x00)) (* (- 1) ?x221) (* (- 1) ?x225) ?x228 ?x232)))
 (let (($x331 (not (= ?x325 0))))
 (let (($x85 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x85 (or $x331 $x63))))))))))))))) :qid k!27))
 ))
 (let (($x137 (exists ((x Int) (y Int) )(! (let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x223 (+ x ?x59 ?x66 y)))
 (let (($x98 (= (* (+ 1 y (* (+ 1 y) (+ 1 y))) ?x223) 0)))
 (let (($x250 (= (* (+ (- 1) y (* (+ (- 1) y) (+ (- 1) y))) ?x223) 0)))
 (and (= ?x223 0) (or (not $x250) (not $x98)))))))) :qid k!27))
 ))
 (let ((?x244 (lambda ((x Int) (y Int) )(let ((?x225 (* y y y)))
 (let ((?x221 (* x y y)))
 (let ((?x191 (* (- 2) x00)))
 (let ((?x188 (* (- 2) y00)))
 (let ((?x239 (+ (* 2 x) (* 2 y) ?x188 ?x191 (* 3 (* y y)) (* 3 (* x y)) (* (- 3) (* y y00)) (* (- 3) (* y x00)) ?x221 ?x225 (* (- 1) (* y y y00)) (* (- 1) (* y y x00)))))
 (let (($x63 (not (= ?x239 0))))
 (let ((?x232 (* y y x00)))
 (let ((?x228 (* y y y00)))
 (let ((?x194 (* x y)))
 (let ((?x128 (* y y)))
 (let ((?x325 (+ ?x128 ?x194 (* (- 1) (* y y00)) (* (- 1) (* y x00)) (* (- 1) ?x221) (* (- 1) ?x225) ?x228 ?x232)))
 (let (($x331 (not (= ?x325 0))))
 (let (($x85 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x227 (and $x85 (or $x331 $x63))))
 (let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x223 (+ x ?x59 ?x66 y)))
 (let (($x98 (= (* (+ 1 y (* (+ 1 y) (+ 1 y))) ?x223) 0)))
 (let (($x250 (= (* (+ (- 1) y (* (+ (- 1) y) (+ (- 1) y))) ?x223) 0)))
 (let (($x171 (and (= ?x223 0) (or (not $x250) (not $x98)))))
 (rewrite (= $x171 $x227)))))))))))))))))))))))
 ))
 (let (($x56 (exists ((x Int) (y Int) )(! (let ((?x51 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (+ (- y 1) (* (- y 1) (- y 1))))))
 (let ((?x41 (* (+ (- (- (- x 1) y00) x00) y 1) (+ y 1 (* (+ y 1) (+ y 1))))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x41 0)) (not (= ?x51 0)))))) :qid k!27))
 ))
 (let ((?x165 (lambda ((x Int) (y Int) )(let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x223 (+ x ?x59 ?x66 y)))
 (let (($x98 (= (* (+ 1 y (* (+ 1 y) (+ 1 y))) ?x223) 0)))
 (let (($x250 (= (* (+ (- 1) y (* (+ (- 1) y) (+ (- 1) y))) ?x223) 0)))
 (let (($x171 (and (= ?x223 0) (or (not $x250) (not $x98)))))
 (let ((?x51 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (+ (- y 1) (* (- y 1) (- y 1))))))
 (let ((?x41 (* (+ (- (- (- x 1) y00) x00) y 1) (+ y 1 (* (+ y 1) (+ y 1))))))
 (let (($x55 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x41 0)) (not (= ?x51 0))))))
 (rewrite (= $x55 $x171))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x170 (mp (mp @x57 (quant-intro (proof-bind ?x165) (= $x56 $x137)) $x137) (rewrite (= $x137 $x137)) $x137)))
 (let ((@x307 (mp~ (mp @x170 (quant-intro (proof-bind ?x244) (= $x137 $x109)) $x109) (sk (~ $x109 $x303)) $x303)))
 (let ((@x148 (mp @x307 (rewrite (= $x303 $x108)) $x108)))
 (let ((@x211 (and-elim @x148 $x311)))
 (let ((@x146 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x311) $x261)) @x211 $x261)))
 (let (($x151 (>= ?x310 0)))
 (let ((@x212 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x311) $x151)) @x211 $x151)))
 (let (($x119 (<= ?x75 0)))
 (let ((@x147 ((_ th-lemma arith) (hypothesis (not $x119)) @x212 @x146 @x212 @x146 @x212 @x146 false)))
 (let ((@x149 (lemma @x147 $x119)))
 (let (($x230 (>= ?x75 0)))
 (let ((@x185 ((_ th-lemma arith) (hypothesis (not $x230)) @x212 @x146 @x212 @x146 @x212 @x146 false)))
 (let ((@x157 (lemma @x185 $x230)))
 (let (($x172 (not (<= ?x247 0))))
 (let (($x115 (>= ?x247 0)))
 (let ((@x126 (lemma ((_ th-lemma arith) (hypothesis (not $x115)) @x212 @x146 @x212 @x146 false) $x115)))
 (let ((@x283 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x208 (not $x119) (not $x230))) @x149 @x157 $x208)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x295 $x172 (not $x115))) (unit-resolution (and-elim @x148 $x142) @x283 $x102) @x126 $x172)))
 ((_ th-lemma arith) @x297 @x212 @x146 @x157 @x149 @x212 @x146 false)))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        11
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           12
 :arith-grobner             4
 :arith-max-min             188
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             6
 :arith-patches_succ        6
 :arith-pivots              3
 :arith-row-summations      4
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                3.57
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1091821
 :num-checks                1
 :propagations              14
 :rlimit-count              2426
 :time                      0.01
 :total-time                0.01)
