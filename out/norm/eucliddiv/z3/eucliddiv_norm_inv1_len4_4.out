unsat
((set-logic NIA)
(proof
(let (($x57 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x46 (+ q 1)))
 (let ((?x48 (* ?x46 ?x46 ?x46 ?x44 y00 y00 y00)))
 (let ((?x47 (* ?x46 ?x46 ?x46 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x51 (* 2 ?x44 y00)))
 (let ((?x43 (- 2)))
 (let ((?x45 (* ?x43 ?x44 y00)))
 (let ((?x49 (- ?x45 ?x47)))
 (let ((?x50 (- ?x49 ?x48)))
 (let ((?x52 (+ ?x50 ?x51 ?x47 ?x48)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x55)))))))))))))))) :qid k!29))
 ))
 (let (($x665 (= $x57 false)))
 (let (($x658 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x664 (elim-unused (= $x658 false))))
 (let (($x661 (= $x57 $x658)))
 (let ((?x742 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x46 (+ q 1)))
 (let ((?x48 (* ?x46 ?x46 ?x46 ?x44 y00 y00 y00)))
 (let ((?x47 (* ?x46 ?x46 ?x46 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x51 (* 2 ?x44 y00)))
 (let ((?x43 (- 2)))
 (let ((?x45 (* ?x43 ?x44 y00)))
 (let ((?x49 (- ?x45 ?x47)))
 (let ((?x50 (- ?x49 ?x48)))
 (let ((?x52 (+ ?x50 ?x51 ?x47 ?x48)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x56 (and $x33 $x41 $x55)))
 (let (($x656 (= $x56 false)))
 (let (($x695 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x82 (= (+ (* (- 1) y00) y) 0)))
 (let (($x736 (and $x82 $x695 false)))
 (let (($x649 (= $x55 false)))
 (let ((@x648 (rewrite (= (or false) false))))
 (let (($x644 (or false)))
 (let (($x645 (= $x55 $x644)))
 (let (($x642 (= $x54 false)))
 (let ((@x641 (rewrite (= (not true) false))))
 (let (($x637 (not true)))
 (let (($x638 (= $x54 $x637)))
 (let (($x635 (= $x53 true)))
 (let ((@x634 (rewrite (= (= 0 0) true))))
 (let (($x630 (= 0 0)))
 (let (($x631 (= $x53 $x630)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x68 (+ r ?x62)))
 (let ((?x92 (+ 1 q)))
 (let ((?x700 (* y00 y00 y00 ?x92 ?x92 ?x92 ?x68)))
 (let ((?x676 (* y00 y00 ?x92 ?x92 ?x92 ?x68 ?x68 ?x68)))
 (let ((?x668 (* y00 ?x68)))
 (let ((?x719 (* 2 ?x668)))
 (let ((?x708 (* (- 1) ?x700)))
 (let ((?x691 (* (- 1) ?x676)))
 (let ((?x83 (* (- 2) ?x668)))
 (let ((?x714 (+ ?x83 ?x691 ?x708)))
 (let ((?x724 (+ ?x714 ?x719 ?x676 ?x700)))
 (let ((@x70 (rewrite (= ?x44 ?x68))))
 (let ((@x96 (rewrite (= ?x46 ?x92))))
 (let ((@x497 (monotonicity @x96 @x96 @x96 @x70 (= ?x48 (* ?x92 ?x92 ?x92 ?x68 y00 y00 y00)))))
 (let ((@x704 (trans @x497 (rewrite (= (* ?x92 ?x92 ?x92 ?x68 y00 y00 y00) ?x700)) (= ?x48 ?x700))))
 (let ((@x100 (monotonicity @x96 @x96 @x96 @x70 @x70 @x70 (= ?x47 (* ?x92 ?x92 ?x92 ?x68 ?x68 ?x68 y00 y00)))))
 (let ((@x683 (trans @x100 (rewrite (= (* ?x92 ?x92 ?x92 ?x68 ?x68 ?x68 y00 y00) ?x676)) (= ?x47 ?x676))))
 (let ((@x616 (monotonicity @x70 (= ?x51 (* 2 ?x68 y00)))))
 (let ((@x78 (monotonicity (rewrite (= ?x43 (- 2))) @x70 (= ?x45 (* (- 2) ?x68 y00)))))
 (let ((@x689 (monotonicity (trans @x78 (rewrite (= (* (- 2) ?x68 y00) ?x83)) (= ?x45 ?x83)) @x683 (= ?x49 (- ?x83 ?x676)))))
 (let ((@x699 (trans @x689 (rewrite (= (- ?x83 ?x676) (+ ?x83 ?x691))) (= ?x49 (+ ?x83 ?x691)))))
 (let ((@x713 (trans (monotonicity @x699 @x704 (= ?x50 (- (+ ?x83 ?x691) ?x700))) (rewrite (= (- (+ ?x83 ?x691) ?x700) (+ (+ ?x83 ?x691) ?x708))) (= ?x50 (+ (+ ?x83 ?x691) ?x708)))))
 (let ((@x718 (trans @x713 (rewrite (= (+ (+ ?x83 ?x691) ?x708) ?x714)) (= ?x50 ?x714))))
 (let ((@x726 (monotonicity @x718 (trans @x616 (rewrite (= (* 2 ?x68 y00) ?x719)) (= ?x51 ?x719)) @x683 @x704 (= ?x52 ?x724))))
 (let ((@x731 (trans (monotonicity (trans @x726 (rewrite (= ?x724 0)) $x53) $x631) @x634 $x635)))
 (let ((@x735 (trans (monotonicity (trans (monotonicity @x731 $x638) @x641 $x642) $x645) @x648 $x649)))
 (let ((@x738 (monotonicity (rewrite (= $x33 $x82)) (rewrite (= $x41 $x695)) @x735 (= $x56 $x736))))
 (trans @x738 (rewrite (= $x736 false)) $x656))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (mp @x58 (trans (quant-intro (proof-bind ?x742) $x661) @x664 $x665) false))))))))))

(:max-memory   3.43
 :memory       3.12
 :mk-bool-var  5
 :num-allocs   921331
 :rlimit-count 525
 :time         0.01
 :total-time   0.01)
