unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x355 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x379 (>= ?x355 1)))
 (let (($x308 (= ?x355 1)))
 (let ((?x548 (* (- 1) (* k!2 k!2 m!1))))
 (let ((?x312 (* (- 1) (* k!2 k!2 k!2))))
 (let ((?x372 (* k!2 k!2)))
 (let ((?x133 (+ k!2 m!1)))
 (let ((?x227 (+ 6 m!1)))
 (let ((?x137 (+ 1 n!0)))
 (let ((?x329 (* ?x137 ?x137 ?x137 ?x227 ?x133 ?x133)))
 (let ((?x256 (+ k!2 c!3)))
 (let ((?x246 (* k!2 m!1)))
 (let ((?x539 (+ (* k!2 c!3) (* (- 1) (* ?x137 ?x227 ?x227 ?x133 ?x256 ?x256 ?x256)) (* (- 2) (* k!2 m!1 c!3)) (* (- 1) (* m!1 c!3 c!3)) ?x246 (* (- 2) (* k!2 k!2 c!3)) (* m!1 c!3) (* (- 1) (* ?x137 ?x137 ?x227 ?x227 ?x133 ?x133 ?x133 ?x256 ?x256 ?x256)) (* (- 1) (* k!2 c!3 c!3)) ?x329 ?x372 ?x312 ?x548)))
 (let ((?x283 (* (- 1) m!1)))
 (let ((?x171 (* n!0 n!0)))
 (let ((?x273 (* 3 ?x171)))
 (let ((?x470 (* 9 n!0)))
 (let ((?x282 (* (- 1) k!2)))
 (let ((?x614 (* (+ 7 ?x282 ?x470 ?x273 ?x283) ?x539)))
 (let (($x134 (= ?x614 0)))
 (let (($x608 (not $x134)))
 (let (($x361 (= (+ k!2 (* (- 1) (* k!2 n!0)) (* (- 2) n!0) (* 3 c!3)) 1)))
 (let ((?x140 (* 18 c!3)))
 (let ((?x563 (* (- 1) ?x372)))
 (let ((?x152 (* (- 9) n!0)))
 (let ((?x161 (* 5 k!2)))
 (let ((?x186 (+ (* 6 n!0) ?x283)))
 (let (($x178 (= ?x186 (- 6))))
 (let (($x327 (and $x178 (= (+ ?x161 ?x152 (* 9 (* n!0 c!3)) ?x563 ?x140) 4) $x361 $x308 $x608)))
 (let ((?x332 (+ c!3 k!2)))
 (let ((?x584 (+ ?x372 ?x329 (* (- 1) (* ?x137 ?x137 ?x227 ?x227 ?x133 ?x133 ?x133 ?x332 ?x332 ?x332)) (* c!3 k!2) (* c!3 m!1) ?x246 (* (- 1) (* c!3 c!3 k!2)) (* (- 2) (* c!3 k!2 k!2)) (* (- 1) (* c!3 c!3 m!1)) ?x312 (* (- 2) (* c!3 k!2 m!1)) ?x548 (* (- 1) (* ?x137 ?x227 ?x227 ?x133 ?x332 ?x332 ?x332)))))
 (let (($x348 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x175 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x140 ?x161 ?x152 ?x563 (* 9 (* c!3 n!0))) 4) $x348 $x308 (not (= (* (+ 7 ?x282 ?x283 ?x470 ?x273) ?x584) 0)))))
 (let (($x136 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x612 (* (- 1) (* ?x306 ?x393 ?x393 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x620 (* (- 1) (* k k m))))
 (let ((?x551 (* (- 2) (* c k m))))
 (let ((?x618 (* (- 1) (* k k k))))
 (let ((?x615 (* (- 1) (* c c m))))
 (let ((?x556 (* (- 2) (* c k k))))
 (let ((?x613 (* (- 1) (* c c k))))
 (let ((?x562 (* k m)))
 (let ((?x559 (* c m)))
 (let ((?x398 (* c k)))
 (let ((?x104 (* (- 1) (* ?x306 ?x306 ?x393 ?x393 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* ?x306 ?x306 ?x306 ?x393 ?x71 ?x71)))
 (let ((?x49 (* k k)))
 (let ((?x159 (+ ?x49 ?x102 ?x104 ?x398 ?x559 ?x562 ?x613 ?x556 ?x615 ?x618 ?x551 ?x620 ?x612)))
 (let ((?x269 (* n n)))
 (let ((?x270 (* 3 ?x269)))
 (let ((?x48 (* 9 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) ?x269)) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* (+ 7 ?x238 ?x354 ?x48 ?x270) ?x159) 0)))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x95 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x612 (* (- 1) (* ?x306 ?x393 ?x393 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* ?x306 ?x306 ?x306 ?x393 ?x71 ?x71)))
 (let ((?x104 (* (- 1) (* ?x306 ?x306 ?x393 ?x393 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x472 (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) (+ ?x104 ?x102 (* ?x71 ?x76) (* (- 1) (* ?x71 ?x76 ?x76)) ?x612))))
 (let (($x471 (not (= ?x472 0))))
 (let (($x247 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let (($x475 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x475 $x247 $x471))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x268 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x612 (* (- 1) (* ?x306 ?x393 ?x393 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x620 (* (- 1) (* k k m))))
 (let ((?x551 (* (- 2) (* c k m))))
 (let ((?x618 (* (- 1) (* k k k))))
 (let ((?x615 (* (- 1) (* c c m))))
 (let ((?x556 (* (- 2) (* c k k))))
 (let ((?x613 (* (- 1) (* c c k))))
 (let ((?x562 (* k m)))
 (let ((?x559 (* c m)))
 (let ((?x398 (* c k)))
 (let ((?x104 (* (- 1) (* ?x306 ?x306 ?x393 ?x393 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* ?x306 ?x306 ?x306 ?x393 ?x71 ?x71)))
 (let ((?x49 (* k k)))
 (let ((?x159 (+ ?x49 ?x102 ?x104 ?x398 ?x559 ?x562 ?x613 ?x556 ?x615 ?x618 ?x551 ?x620 ?x612)))
 (let ((?x269 (* n n)))
 (let ((?x270 (* 3 ?x269)))
 (let ((?x48 (* 9 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) ?x269)) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x271 (and $x124 $x208 $x260 $x298 (not (= (* (+ 7 ?x238 ?x354 ?x48 ?x270) ?x159) 0)))))
 (let ((?x472 (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 (* 3 n)) (+ ?x104 ?x102 (* ?x71 ?x76) (* (- 1) (* ?x71 ?x76 ?x76)) ?x612))))
 (let (($x471 (not (= ?x472 0))))
 (let (($x247 (= (+ ?x270 ?x238 (* 3 n)) (- 1))))
 (let (($x475 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x465 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x475 $x247 $x471)))
 (rewrite (= $x465 $x271))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x478 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x612 (* (- 1) (* ?x306 ?x393 ?x393 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* ?x306 ?x306 ?x306 ?x393 ?x71 ?x71)))
 (let ((?x104 (* (- 1) (* ?x306 ?x306 ?x393 ?x393 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x472 (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) (+ ?x104 ?x102 (* ?x71 ?x76) (* (- 1) (* ?x71 ?x76 ?x76)) ?x612))))
 (let (($x471 (not (= ?x472 0))))
 (let (($x247 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x541 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x541 (- 4)) (= (+ (* (- 3) c) (* n k) ?x238 (* 2 n)) (- 1)) $x247 $x471)))))))))))))))))) :qid k!34))
 ))
 (let ((?x611 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x612 (* (- 1) (* ?x306 ?x393 ?x393 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* ?x306 ?x306 ?x306 ?x393 ?x71 ?x71)))
 (let ((?x104 (* (- 1) (* ?x306 ?x306 ?x393 ?x393 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x472 (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) (+ ?x104 ?x102 (* ?x71 ?x76) (* (- 1) (* ?x71 ?x76 ?x76)) ?x612))))
 (let (($x471 (not (= ?x472 0))))
 (let (($x247 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let (($x475 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x465 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x475 $x247 $x471)))
 (let ((?x48 (* 9 n)))
 (let ((?x541 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x213 (and $x124 (= ?x541 (- 4)) (= (+ (* (- 3) c) (* n k) ?x238 (* 2 n)) (- 1)) $x247 $x471)))
 (rewrite (= $x213 $x465)))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x81 (+ (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x77 ?x68 ?x68) (* ?x71 ?x71 ?x77 ?x68 ?x68 ?x68) (* ?x76 ?x71))))
 (let ((?x85 (- (- ?x81 (* ?x76 ?x76 ?x71)) (* ?x76 ?x76 ?x76 ?x71 ?x77 ?x77 ?x68))))
 (let (($x87 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x85) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x87))))))))))))))))) :qid k!34))
 ))
 (let ((?x101 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x306 (+ 1 n)))
 (let ((?x612 (* (- 1) (* ?x306 ?x393 ?x393 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* ?x306 ?x306 ?x306 ?x393 ?x71 ?x71)))
 (let ((?x104 (* (- 1) (* ?x306 ?x306 ?x393 ?x393 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x65 (* 3 n)))
 (let ((?x354 (* (- 1) m)))
 (let ((?x238 (* (- 1) k)))
 (let ((?x472 (* (+ 4 (* 3 (* ?x306 ?x306)) ?x238 ?x354 ?x65) (+ ?x104 ?x102 (* ?x71 ?x76) (* (- 1) (* ?x71 ?x76 ?x76)) ?x612))))
 (let (($x471 (not (= ?x472 0))))
 (let (($x247 (= (+ (* 3 (* n n)) ?x238 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x541 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x213 (and $x124 (= ?x541 (- 4)) (= (+ (* (- 3) c) (* n k) ?x238 (* 2 n)) (- 1)) $x247 $x471)))
 (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x81 (+ (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x77 ?x68 ?x68) (* ?x71 ?x71 ?x77 ?x68 ?x68 ?x68) (* ?x76 ?x71))))
 (let ((?x85 (- (- ?x81 (* ?x76 ?x76 ?x71)) (* ?x76 ?x76 ?x76 ?x71 ?x77 ?x77 ?x68))))
 (let (($x87 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x85) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x87)))))
 (rewrite (= $x90 $x213)))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x94 (mp (mp @x92 (quant-intro (proof-bind ?x101) (= $x91 $x478)) $x478) (rewrite (= $x478 $x478)) $x478)))
 (let ((@x265 (mp (mp @x94 (quant-intro (proof-bind ?x611) (= $x478 $x95)) $x95) (quant-intro (proof-bind ?x268) (= $x95 $x136)) $x136)))
 (let ((@x289 (mp (mp~ @x265 (sk (~ $x136 $x175)) $x175) (rewrite (= $x175 $x327)) $x327)))
 (let ((@x197 (and-elim @x289 $x308)))
 (let ((@x334 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x379)) @x197 $x379)))
 (let (($x565 (<= ?x186 (- 6))))
 (let ((@x326 (and-elim @x289 $x178)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x565)) @x326 $x565)))
 (let (($x371 (<= ?x355 1)))
 (let ((@x305 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x371)) @x197 $x371)))
 (let (($x167 (>= ?x186 (- 6))))
 (let ((@x293 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x167)) @x326 $x167)))
 (let (($x222 (not (<= ?x614 0))))
 (let (($x597 (>= ?x614 0)))
 (let ((@x297 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x597)) @x293 @x305 @x114 @x334 false) $x597)))
 (let ((@x395 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x134 $x222 (not $x597))) (and-elim @x289 $x608) (or $x222 (not $x597)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x395 @x297 $x222) @x293 @x305 @x114 @x334 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        20
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             103
 :arith-nonlinear-bounds    10
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      5
 :arith-tableau-max-columns 43
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.63
 :memory                    3.12
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1148859
 :num-checks                1
 :propagations              10
 :rlimit-count              2836
 :time                      0.01
 :total-time                0.01)
