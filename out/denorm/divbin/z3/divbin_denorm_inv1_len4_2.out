unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x971 (to_real b!2)))
 (let ((?x394 (to_real r!1)))
 (let ((?x217 (to_real x!0)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x876 (* 2.0 (* ?x217 ?x394 ?x394))))
 (let ((?x786 (* ?x217 ?x394)))
 (let ((?x92 (* 2.0 ?x786)))
 (let ((?x857 (+ ?x92 (* 2.0 (* ?x217 ?x217 ?x971)) (* 2.0 (* ?x217 ?x217 ?x394 ?x971)) (* 2.0 (* ?x217 ?x217 ?x217 ?x394 ?x394 ?x394 ?x971 ?x971)) (* 2.0 (* ?x217 ?x217 ?x217 ?x217 ?x394 ?x394 ?x971 ?x971 ?x971)) ?x876 (* (- 2.0) (* (to_real r00) ?x217)) (* (- 2.0) (* (to_real r00) ?x217 ?x394)) (* (- 2.0) (* ?x148 ?x149 ?x217 ?x394)) (* (- 2.0) (* (to_real r00) ?x217 ?x217 ?x217 ?x394 ?x394 ?x971 ?x971)) (* (- 2.0) (* ?x148 ?x149 ?x217 ?x217 ?x217 ?x394 ?x394 ?x971 ?x971)) (* ?x217 ?x217 ?x394 ?x394 ?x394 ?x394 ?x971 ?x971) (* (- 1.0) (* (to_real r00) ?x217 ?x217 ?x394 ?x394 ?x394 ?x971 ?x971)) (* (- 1.0) (* ?x148 ?x149 ?x217 ?x217 ?x394 ?x394 ?x394 ?x971 ?x971)) (* ?x217 ?x217 ?x217 ?x394 ?x394 ?x394 ?x971 ?x971 ?x971) (* (- 2.0) (* ?x148 ?x149 ?x217)))))
 (let (($x943 (>= ?x857 0.0)))
 (let (($x1007 (not $x943)))
 (let (($x941 (<= ?x857 0.0)))
 (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x1024 (* ?x217 ?x971)))
 (let ((?x947 (+ ?x1024 ?x394 ?x153 ?x139)))
 (let (($x960 (>= ?x947 0.0)))
 (let ((?x935 (* x!0 b!2)))
 (let ((?x1059 (to_real ?x935)))
 (let ((?x561 (+ (* (- 1.0) ?x1024) ?x1059)))
 (let (($x502 (<= ?x561 0.0)))
 (let (($x557 (= 0.0 ?x561)))
 (let ((@x722 (symm (commutativity (= $x557 (= ?x561 0.0))) (= (= ?x561 0.0) $x557))))
 (let ((@x575 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x502)) (mp ((_ th-lemma arith) (= ?x561 0.0)) @x722 $x557) $x502)))
 (let ((?x1050 (+ (* (- 1.0) (to_real (* b00 x00))) ?x150)))
 (let (($x1082 (<= ?x1050 0.0)))
 (let (($x333 (= 0.0 ?x1050)))
 (let ((@x739 (symm (commutativity (= $x333 (= ?x1050 0.0))) (= (= ?x1050 0.0) $x333))))
 (let ((@x567 (unit-resolution (hypothesis (not $x333)) (mp ((_ th-lemma arith) (= ?x1050 0.0)) @x739 $x333) false)))
 (let ((@x565 (lemma @x567 $x333)))
 (let ((@x580 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x333) $x1082)) @x565 $x1082)))
 (let ((?x90 (* b00 x00)))
 (let ((?x953 (+ r00 ?x90 (* (- 1) r!1) (* (- 1) ?x935))))
 (let (($x330 (<= ?x953 0)))
 (let (($x1030 (= 0 ?x953)))
 (let ((@x564 (symm (commutativity (= $x1030 (= ?x953 0))) (= (= ?x953 0) $x1030))))
 (let (($x846 (= ?x953 0)))
 (let ((?x873 (* (/ 1.0 2.0) ?x971)))
 (let ((?x838 (* (/ 1.0 32.0) (* ?x971 ?x971 ?x971 ?x971 ?x971))))
 (let ((?x872 (* (- (/ 1.0 16.0)) (* ?x971 ?x971 ?x971 ?x971))))
 (let ((?x383 (* (- 2.0) ?x786)))
 (let ((?x883 (* (- 1.0) ?x394)))
 (let ((?x874 (* (- 2.0) ?x217)))
 (let ((?x147 (+ (- 1.0) ?x874 ?x883 (* 2.0 (* ?x217 ?x217 ?x217 ?x394 ?x971 ?x971 ?x971)) ?x383 (* (- (/ 3.0 8.0)) (* ?x217 ?x971 ?x971 ?x971 ?x971)) (* (- (/ 3.0 2.0)) (* ?x217 ?x394 ?x394 ?x971 ?x971)) (* (- (/ 1.0 2.0)) (* ?x217 ?x217 ?x217 ?x971 ?x971 ?x971 ?x971)) ?x872 ?x838 ?x873 (* (/ 1.0 4.0) (* ?x394 ?x971 ?x971 ?x971)) (* (- (/ 1.0 4.0)) (* ?x394 ?x394 ?x971 ?x971)) (* (/ 3.0 2.0) (* ?x217 ?x394 ?x971 ?x971 ?x971)) (* (- (/ 3.0 4.0)) (* ?x217 ?x217 ?x971 ?x971 ?x971 ?x971)) (* 3.0 (* ?x217 ?x217 ?x394 ?x971 ?x971 ?x971)) (* (- 3.0) (* ?x217 ?x217 ?x394 ?x394 ?x971 ?x971)) (* (- 2.0) (* ?x217 ?x217 ?x217 ?x394 ?x394 ?x971 ?x971)) (* (- 1.0) (* ?x217 ?x217 ?x394 ?x394 ?x394 ?x971 ?x971)) ?x1024 (* (- (/ 3.0 16.0)) (* ?x394 ?x971 ?x971 ?x971 ?x971)) (* (/ 3.0 8.0) (* ?x394 ?x394 ?x971 ?x971 ?x971)) (* (- (/ 1.0 4.0)) (* ?x394 ?x394 ?x394 ?x971 ?x971)) (* (/ 1.0 8.0) (* ?x217 ?x971 ?x971 ?x971 ?x971 ?x971)) (* (/ 3.0 2.0) (* ?x217 ?x394 ?x394 ?x971 ?x971 ?x971)) (* (- (/ 3.0 4.0)) (* ?x217 ?x394 ?x971 ?x971 ?x971 ?x971)) (* (- 1.0) (* ?x217 ?x394 ?x394 ?x394 ?x971 ?x971)) (* (/ 1.0 8.0) (* ?x217 ?x217 ?x971 ?x971 ?x971 ?x971 ?x971)) (* (- (/ 3.0 4.0)) (* ?x217 ?x217 ?x394 ?x971 ?x971 ?x971 ?x971)) (* (/ 3.0 2.0) (* ?x217 ?x217 ?x394 ?x394 ?x971 ?x971 ?x971)))))
 (let (($x87 (= (* ?x147 (+ ?x139 ?x153 ?x394 ?x1024)) 0.0)))
 (let (($x569 (not $x87)))
 (let (($x1016 (= ?x857 0.0)))
 (let (($x968 (not $x1016)))
 (let (($x276 (or $x968 $x569)))
 (let (($x735 (and $x846 $x276)))
 (let ((?x900 (* ?x971 ?x217)))
 (let ((?x937 (+ (- 1.0) ?x873 ?x874 ?x883 ?x383 (* (- 2.0) (* ?x971 ?x971 ?x217 ?x217 ?x217 ?x394 ?x394)) (* (- 1.0) (* ?x971 ?x971 ?x217 ?x217 ?x394 ?x394 ?x394)) ?x872 (* (/ 1.0 4.0) (* ?x971 ?x971 ?x971 ?x394)) (* (- (/ 1.0 4.0)) (* ?x971 ?x971 ?x394 ?x394)) (* (- (/ 3.0 8.0)) (* ?x971 ?x971 ?x971 ?x971 ?x217)) (* (/ 3.0 2.0) (* ?x971 ?x971 ?x971 ?x217 ?x394)) (* (- (/ 3.0 2.0)) (* ?x971 ?x971 ?x217 ?x394 ?x394)) (* (- (/ 3.0 4.0)) (* ?x971 ?x971 ?x971 ?x971 ?x217 ?x217)) (* 3.0 (* ?x971 ?x971 ?x971 ?x217 ?x217 ?x394)) (* (- 3.0) (* ?x971 ?x971 ?x217 ?x217 ?x394 ?x394)) (* (- (/ 1.0 2.0)) (* ?x971 ?x971 ?x971 ?x971 ?x217 ?x217 ?x217)) (* 2.0 (* ?x971 ?x971 ?x971 ?x217 ?x217 ?x217 ?x394)) ?x900 ?x838 (* (- (/ 3.0 16.0)) (* ?x971 ?x971 ?x971 ?x971 ?x394)) (* (/ 3.0 8.0) (* ?x971 ?x971 ?x971 ?x394 ?x394)) (* (- (/ 1.0 4.0)) (* ?x971 ?x971 ?x394 ?x394 ?x394)) (* (/ 1.0 8.0) (* ?x971 ?x971 ?x971 ?x971 ?x971 ?x217)) (* (- (/ 3.0 4.0)) (* ?x971 ?x971 ?x971 ?x971 ?x217 ?x394)) (* (/ 3.0 2.0) (* ?x971 ?x971 ?x971 ?x217 ?x394 ?x394)) (* (- 1.0) (* ?x971 ?x971 ?x217 ?x394 ?x394 ?x394)) (* (/ 1.0 8.0) (* ?x971 ?x971 ?x971 ?x971 ?x971 ?x217 ?x217)) (* (- (/ 3.0 4.0)) (* ?x971 ?x971 ?x971 ?x971 ?x217 ?x217 ?x394)) (* (/ 3.0 2.0) (* ?x971 ?x971 ?x971 ?x217 ?x217 ?x394 ?x394)))))
 (let ((?x1032 (+ ?x92 (* (- 2.0) (* ?x217 ?x64)) (* (- 2.0) (* ?x217 ?x148 ?x149)) (* 2.0 (* ?x971 ?x217 ?x217)) ?x876 (* (- 2.0) (* ?x217 ?x394 ?x64)) (* (- 2.0) (* ?x217 ?x394 ?x148 ?x149)) (* 2.0 (* ?x971 ?x217 ?x217 ?x394)) (* 2.0 (* ?x971 ?x971 ?x217 ?x217 ?x217 ?x394 ?x394 ?x394)) (* (- 2.0) (* ?x971 ?x971 ?x217 ?x217 ?x217 ?x394 ?x394 ?x64)) (* (- 2.0) (* ?x971 ?x971 ?x217 ?x217 ?x217 ?x394 ?x394 ?x148 ?x149)) (* 2.0 (* ?x971 ?x971 ?x971 ?x217 ?x217 ?x217 ?x217 ?x394 ?x394)) (* ?x971 ?x971 ?x217 ?x217 ?x394 ?x394 ?x394 ?x394) (* (- 1.0) (* ?x971 ?x971 ?x217 ?x217 ?x394 ?x394 ?x394 ?x64)) (* (- 1.0) (* ?x971 ?x971 ?x217 ?x217 ?x394 ?x394 ?x394 ?x148 ?x149)) (* ?x971 ?x971 ?x971 ?x217 ?x217 ?x217 ?x394 ?x394 ?x394))))
 (let (($x1105 (or (not (= ?x1032 0.0)) (not (= (* ?x937 (+ ?x394 ?x139 ?x153 ?x900)) 0.0)))))
 (let (($x933 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x90)) 0) $x1105)))
 (let (($x615 (exists ((b Int) (r Int) (x Int) )(! (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x740 (* ?x40 ?x43)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x49 (to_real r)))
 (let ((?x1181 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x49 ?x49))))
 (let ((?x1178 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x49))))
 (let ((?x1175 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x1110 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x49 ?x49 ?x49))))
 (let ((?x1172 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x49 ?x49))))
 (let ((?x1169 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x49))))
 (let ((?x1166 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43))))
 (let ((?x1162 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x49 ?x49 ?x49))))
 (let ((?x1159 (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x49 ?x49))))
 (let ((?x1156 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x49))))
 (let ((?x1152 (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x828 (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x49))))
 (let ((?x825 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43))))
 (let ((?x822 (* (- 3.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49))))
 (let ((?x819 (* 3.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x49))))
 (let ((?x816 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x812 (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x43 ?x49 ?x49))))
 (let ((?x809 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x49))))
 (let ((?x806 (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43))))
 (let ((?x802 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x49 ?x49))))
 (let ((?x799 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x49))))
 (let ((?x796 (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40))))
 (let ((?x294 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49))))
 (let ((?x265 (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49))))
 (let ((?x207 (* ?x43 ?x49)))
 (let ((?x512 (* (- 2.0) ?x207)))
 (let ((?x228 (* (- 2.0) ?x43)))
 (let ((?x249 (+ (- 1.0) (* (/ 1.0 2.0) ?x40) ?x228 (* (- 1.0) ?x49) ?x512 ?x265 ?x294 ?x796 ?x799 ?x802 ?x806 ?x809 ?x812 ?x816 ?x819 ?x822 ?x825 ?x828 ?x740 ?x1152 ?x1156 ?x1159 ?x1162 ?x1166 ?x1169 ?x1172 ?x1110 ?x1175 ?x1178 ?x1181)))
 (let ((?x419 (+ (* 2.0 ?x207) (* (- 2.0) (* ?x43 ?x64)) (* (- 2.0) (* ?x43 ?x148 ?x149)) (* 2.0 (* ?x40 ?x43 ?x43)) (* 2.0 (* ?x43 ?x49 ?x49)) (* (- 2.0) (* ?x43 ?x49 ?x64)) (* (- 2.0) (* ?x43 ?x49 ?x148 ?x149)) (* 2.0 (* ?x40 ?x43 ?x43 ?x49)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x49)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x64)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x148 ?x149)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x49 ?x49)) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49 ?x49) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49 ?x64)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49 ?x148 ?x149)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x49))))
 (let (($x396 (not (= ?x419 0.0))))
 (let (($x126 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x126 (or $x396 (not (= (* ?x249 (+ ?x49 ?x139 ?x153 ?x740)) 0.0))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x1054 (exists ((b Int) (r Int) (x Int) )(! (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x175 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x49 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x678 (+ ?x153 ?x49 ?x175 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x592 (+ ?x49 ?x175)))
 (let ((?x43 (to_real x)))
 (let ((?x203 (* 2.0 ?x43)))
 (let ((?x651 (+ 1.0 ?x203)))
 (let ((?x228 (* (- 2.0) ?x43)))
 (let ((?x945 (+ (- 1.0) (* (- 1.0) (* ?x651 ?x592)) ?x228 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x651 ?x592 ?x592)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x592 ?x592 ?x592)))))
 (let ((?x207 (* ?x43 ?x49)))
 (let ((?x512 (* (- 2.0) ?x207)))
 (let ((?x695 (+ ?x512 ?x228 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x49 ?x49 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x49 ?x49 ?x49 ?x40 ?x40)))))
 (let (($x930 (or (not (= (* ?x695 (+ ?x153 ?x49 ?x139 (* ?x43 ?x40))) 0.0)) (not (= (* ?x945 ?x678) 0.0)))))
 (let (($x442 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x442 $x930)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x423 (lambda ((b Int) (r Int) (x Int) )(let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x740 (* ?x40 ?x43)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x49 (to_real r)))
 (let ((?x1181 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x49 ?x49))))
 (let ((?x1178 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x49))))
 (let ((?x1175 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x1110 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x49 ?x49 ?x49))))
 (let ((?x1172 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x49 ?x49))))
 (let ((?x1169 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x49))))
 (let ((?x1166 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43))))
 (let ((?x1162 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x49 ?x49 ?x49))))
 (let ((?x1159 (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x49 ?x49))))
 (let ((?x1156 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x49))))
 (let ((?x1152 (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x828 (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x49))))
 (let ((?x825 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43))))
 (let ((?x822 (* (- 3.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49))))
 (let ((?x819 (* 3.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x49))))
 (let ((?x816 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x812 (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x43 ?x49 ?x49))))
 (let ((?x809 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x49))))
 (let ((?x806 (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43))))
 (let ((?x802 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x49 ?x49))))
 (let ((?x799 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x49))))
 (let ((?x796 (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40))))
 (let ((?x294 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49))))
 (let ((?x265 (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49))))
 (let ((?x207 (* ?x43 ?x49)))
 (let ((?x512 (* (- 2.0) ?x207)))
 (let ((?x228 (* (- 2.0) ?x43)))
 (let ((?x249 (+ (- 1.0) (* (/ 1.0 2.0) ?x40) ?x228 (* (- 1.0) ?x49) ?x512 ?x265 ?x294 ?x796 ?x799 ?x802 ?x806 ?x809 ?x812 ?x816 ?x819 ?x822 ?x825 ?x828 ?x740 ?x1152 ?x1156 ?x1159 ?x1162 ?x1166 ?x1169 ?x1172 ?x1110 ?x1175 ?x1178 ?x1181)))
 (let ((?x419 (+ (* 2.0 ?x207) (* (- 2.0) (* ?x43 ?x64)) (* (- 2.0) (* ?x43 ?x148 ?x149)) (* 2.0 (* ?x40 ?x43 ?x43)) (* 2.0 (* ?x43 ?x49 ?x49)) (* (- 2.0) (* ?x43 ?x49 ?x64)) (* (- 2.0) (* ?x43 ?x49 ?x148 ?x149)) (* 2.0 (* ?x40 ?x43 ?x43 ?x49)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x49)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x64)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x148 ?x149)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x49 ?x49)) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49 ?x49) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49 ?x64)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x49 ?x49 ?x49 ?x148 ?x149)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x49 ?x49 ?x49))))
 (let (($x396 (not (= ?x419 0.0))))
 (let (($x126 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x164 (and $x126 (or $x396 (not (= (* ?x249 (+ ?x49 ?x139 ?x153 ?x740)) 0.0))))))
 (let ((?x175 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x678 (+ ?x153 ?x49 ?x175 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x592 (+ ?x49 ?x175)))
 (let ((?x203 (* 2.0 ?x43)))
 (let ((?x651 (+ 1.0 ?x203)))
 (let ((?x945 (+ (- 1.0) (* (- 1.0) (* ?x651 ?x592)) ?x228 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x651 ?x592 ?x592)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x592 ?x592 ?x592)))))
 (let ((?x695 (+ ?x512 ?x228 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x49 ?x49 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x49 ?x49 ?x49 ?x40 ?x40)))))
 (let (($x930 (or (not (= (* ?x695 (+ ?x153 ?x49 ?x139 (* ?x43 ?x40))) 0.0)) (not (= (* ?x945 ?x678) 0.0)))))
 (let (($x442 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x1048 (and $x442 $x930)))
 (rewrite (= $x1048 $x164)))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1113 (exists ((b Int) (r Int) (x Int) )(! (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x175 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x49 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x678 (+ ?x153 ?x49 ?x175 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x592 (+ ?x49 ?x175)))
 (let ((?x43 (to_real x)))
 (let ((?x203 (* 2.0 ?x43)))
 (let ((?x651 (+ 1.0 ?x203)))
 (let ((?x228 (* (- 2.0) ?x43)))
 (let ((?x945 (+ (- 1.0) (* (- 1.0) (* ?x651 ?x592)) ?x228 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x651 ?x592 ?x592)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x592 ?x592 ?x592)))))
 (let ((?x207 (* ?x43 ?x49)))
 (let ((?x512 (* (- 2.0) ?x207)))
 (let ((?x695 (+ ?x512 ?x228 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x49 ?x49 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x49 ?x49 ?x49 ?x40 ?x40)))))
 (let (($x930 (or (not (= (* ?x695 (+ ?x153 ?x49 ?x139 (* ?x43 ?x40))) 0.0)) (not (= (* ?x945 ?x678) 0.0)))))
 (let (($x551 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x551 $x930)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x433 (lambda ((b Int) (r Int) (x Int) )(let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x175 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x49 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x678 (+ ?x153 ?x49 ?x175 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x592 (+ ?x49 ?x175)))
 (let ((?x43 (to_real x)))
 (let ((?x203 (* 2.0 ?x43)))
 (let ((?x651 (+ 1.0 ?x203)))
 (let ((?x228 (* (- 2.0) ?x43)))
 (let ((?x945 (+ (- 1.0) (* (- 1.0) (* ?x651 ?x592)) ?x228 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x651 ?x592 ?x592)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x592 ?x592 ?x592)))))
 (let ((?x207 (* ?x43 ?x49)))
 (let ((?x512 (* (- 2.0) ?x207)))
 (let ((?x695 (+ ?x512 ?x228 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x49 ?x49 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x49 ?x49 ?x49 ?x40 ?x40)))))
 (let (($x930 (or (not (= (* ?x695 (+ ?x153 ?x49 ?x139 (* ?x43 ?x40))) 0.0)) (not (= (* ?x945 ?x678) 0.0)))))
 (let (($x442 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x1048 (and $x442 $x930)))
 (let (($x551 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x717 (and $x551 $x930)))
 (rewrite (= $x717 $x1048)))))))))))))))))))))))))))
 ))
 (let (($x82 (exists ((b Int) (r Int) (x Int) )(! (let ((?x58 (to_real 0)))
 (let ((?x67 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x49 (to_real r)))
 (let ((?x61 (- ?x49 ?x42)))
 (let ((?x75 (- (- (* (to_real (- 1)) ?x61 ?x67) ?x67) (* ?x42 ?x42 ?x61 ?x61 ?x67 ?x67 ?x67))))
 (let ((?x69 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x61) (to_real r00)) (* ?x42 ?x67))))
 (let (($x79 (not (= (* ?x69 (- ?x75 (* ?x42 ?x42 ?x61 ?x61 ?x61 ?x67 ?x67))) ?x58))))
 (let ((?x43 (to_real x)))
 (let ((?x55 (- (- (to_real (* (- 1) r 2 x)) (to_real (* 2 x))) (* ?x42 ?x42 ?x49 ?x49 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x59 (= (* ?x46 (- ?x55 (* ?x42 ?x42 ?x49 ?x49 ?x49 ?x41 ?x43 ?x41 ?x43))) ?x58)))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not $x59) $x79))))))))))))))))) :qid k!28))
 ))
 (let ((?x554 (lambda ((b Int) (r Int) (x Int) )(let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x175 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x49 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x678 (+ ?x153 ?x49 ?x175 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x592 (+ ?x49 ?x175)))
 (let ((?x43 (to_real x)))
 (let ((?x203 (* 2.0 ?x43)))
 (let ((?x651 (+ 1.0 ?x203)))
 (let ((?x228 (* (- 2.0) ?x43)))
 (let ((?x945 (+ (- 1.0) (* (- 1.0) (* ?x651 ?x592)) ?x228 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x651 ?x592 ?x592)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x651 ?x651 ?x592 ?x592 ?x592)))))
 (let ((?x207 (* ?x43 ?x49)))
 (let ((?x512 (* (- 2.0) ?x207)))
 (let ((?x695 (+ ?x512 ?x228 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x49 ?x49 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x49 ?x49 ?x49 ?x40 ?x40)))))
 (let (($x930 (or (not (= (* ?x695 (+ ?x153 ?x49 ?x139 (* ?x43 ?x40))) 0.0)) (not (= (* ?x945 ?x678) 0.0)))))
 (let (($x551 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x717 (and $x551 $x930)))
 (let ((?x58 (to_real 0)))
 (let ((?x67 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x61 (- ?x49 ?x42)))
 (let ((?x75 (- (- (* (to_real (- 1)) ?x61 ?x67) ?x67) (* ?x42 ?x42 ?x61 ?x61 ?x67 ?x67 ?x67))))
 (let ((?x69 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x61) ?x64) (* ?x42 ?x67))))
 (let (($x79 (not (= (* ?x69 (- ?x75 (* ?x42 ?x42 ?x61 ?x61 ?x61 ?x67 ?x67))) ?x58))))
 (let ((?x55 (- (- (to_real (* (- 1) r 2 x)) (to_real (* 2 x))) (* ?x42 ?x42 ?x49 ?x49 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x59 (= (* ?x46 (- ?x55 (* ?x42 ?x42 ?x49 ?x49 ?x49 ?x41 ?x43 ?x41 ?x43))) ?x58)))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x81 (and $x38 (or (not $x59) $x79))))
 (rewrite (= $x81 $x717))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x83 (asserted $x82)))
 (let ((@x724 (mp (mp @x83 (quant-intro (proof-bind ?x554) (= $x82 $x1113)) $x1113) (rewrite (= $x1113 $x1113)) $x1113)))
 (let ((@x376 (mp (mp @x724 (quant-intro (proof-bind ?x433) (= $x1113 $x1054)) $x1054) (quant-intro (proof-bind ?x423) (= $x1054 $x615)) $x615)))
 (let ((@x744 (mp (mp~ @x376 (sk (~ $x615 $x933)) $x933) (rewrite (= $x933 $x735)) $x735)))
 (let ((@x619 (mp (and-elim @x744 $x846) @x564 $x1030)))
 (let ((@x540 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1030) $x330)) @x619 $x330)))
 (let ((@x1038 (lemma ((_ th-lemma arith) @x540 (hypothesis (not $x960)) @x580 @x575 false) $x960)))
 (let (($x949 (<= ?x947 0.0)))
 (let (($x863 (>= ?x1050 0.0)))
 (let ((@x589 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x333) $x863)) @x565 $x863)))
 (let ((?x349 (+ ?x1024 (* (- 1.0) ?x1059))))
 (let (($x475 (<= ?x349 0.0)))
 (let ((@x1073 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x349 0.0)) $x475)) ((_ th-lemma arith) (= ?x349 0.0)) $x475)))
 (let (($x940 (>= ?x953 0)))
 (let ((@x638 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1030) $x940)) @x619 $x940)))
 (let ((@x633 (lemma ((_ th-lemma arith) @x638 (hypothesis (not $x949)) (hypothesis $x863) @x1073 false) (or (not $x863) $x949))))
 (let ((@x746 (unit-resolution @x633 @x589 $x949)))
 (let ((@x671 (unit-resolution ((_ th-lemma arith) (or (not $x960) (not $x949) $x941 (not $x1082) (not $x863))) (hypothesis (not $x941)) @x589 @x746 @x580 @x1038 false)))
 (let (($x1144 (= 0.0 ?x857)))
 (let (($x654 (not $x1144)))
 (let ((@x536 (monotonicity (symm (commutativity (= $x1144 $x1016)) (= $x1016 $x1144)) (= $x968 $x654))))
 (let (($x577 (= 0.0 ?x947)))
 (let ((@x113 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x577 (not $x949) (not $x960))) @x746 @x1038 $x577)))
 (let (($x748 (= ?x947 0.0)))
 (let (($x681 (not $x748)))
 (let ((@x665 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x681 $x87)) (hypothesis $x569) $x681) (symm (hypothesis $x577) $x748) false)))
 (let ((@x1053 (unit-resolution (and-elim @x744 $x276) (unit-resolution (lemma @x665 (or (not $x577) $x87)) @x113 $x87) $x968)))
 (let ((@x538 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1144 (not $x941) $x1007)) (mp @x1053 @x536 $x654) (or (not $x941) $x1007))))
 (unit-resolution ((_ th-lemma arith) (or $x943 (not $x330) (not $x940))) @x540 @x638 (unit-resolution @x538 (lemma @x671 $x941) $x1007) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      23
 :arith-eq-adapter               30
 :arith-bound-propagations-cheap 17
 :arith-bound-propagations-lp    3
 :arith-conflicts                63
 :arith-diseq                    18
 :arith-gcd-calls                3
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    40
 :arith-make-feasible            41
 :arith-max-columns              79
 :arith-max-rows                 16
 :arith-nla-explanations         60
 :arith-nla-lemmas               61
 :arith-patches                  3
 :arith-patches-success          3
 :arith-propagations             17
 :arith-upper                    34
 :conflicts                      10
 :decisions                      49
 :del-clause                     89
 :final-checks                   28
 :max-memory                     5.69
 :memory                         3.22
 :mk-bool-var                    158
 :mk-clause                      112
 :num-allocs                     7197255
 :num-checks                     1
 :propagations                   41
 :rlimit-count                   6583
 :time                           0.04
 :total-time                     0.05)
