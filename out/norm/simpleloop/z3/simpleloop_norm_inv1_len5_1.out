unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x750 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x1043 (<= ?x750 0)))
 (let (($x753 (= ?x750 0)))
 (let ((?x1280 (* y!0 y!0 y!0)))
 (let ((?x539 (* 4 (* x!1 x!1))))
 (let ((?x534 (* 2 (* y!0 y!0))))
 (let ((?x99 (* x!1 x!1 x!1 x!1)))
 (let ((?x96 (* (- 3) (* x!1 x!1 x!1))))
 (let ((?x88 (+ 1 y!0)))
 (let ((?x81 (+ (- 1) x!1)))
 (let ((?x93 (* ?x81 ?x81 ?x81 ?x81 ?x88 ?x88 ?x88)))
 (let ((?x92 (* ?x81 ?x81 ?x81 ?x88 ?x88 ?x88 ?x88)))
 (let ((?x1400 (+ y00 x00 ?x92 ?x93 ?x96 ?x99 (* (- 12) (* y00 y!0 x!1)) (* (- 3) (* y00 y!0 y!0 x!1 x!1 x!1)) ?x534 ?x539 (* 3 (* x00 y!0 y!0 y!0 x!1 x!1)) (* 3 (* y!0 y!0 y!0 x!1)) (* 6 (* x00 x!1 x!1)) (* (- 12) (* y00 y!0 y!0 x!1)) ?x1280 (* y!0 x!1 x!1 x!1) (* y!0 y!0 y!0 x!1 x!1) (* (- 7) (* y00 x!1)) (* (- 4) (* x00 y!0 y!0 y!0 x!1)) (* (- 1) (* x00 y!0 y!0 y!0 x!1 x!1 x!1)) (* (- 2) (* y00 x!1 x!1 x!1)) (* (- 12) (* x00 y!0 y!0 x!1)) (* 6 (* y00 x!1 x!1)) (* 2 (* x00 y!0 y!0)) (* 9 (* x00 y!0 y!0 x!1 x!1)) (* (- 3) (* x00 y!0 y!0 x!1 x!1 x!1)) (* x00 y!0 y!0 y!0) (* 3 (* y!0 y!0 x!1 x!1)) (* (- 4) (* y00 y!0 y!0 y!0 x!1)) (* (- 3) (* y00 y!0 x!1 x!1 x!1)) (* 3 (* y00 y!0 y!0 y!0 x!1 x!1)) (* 6 (* y!0 x!1)) (* 4 (* y!0 y!0 x!1)) (* 2 (* y00 y!0 y!0)) (* y00 y!0) (* 9 (* y00 y!0 y!0 x!1 x!1)) (* y00 y!0 y!0 y!0) (* (- 2) (* x00 x!1 x!1 x!1)) (* x00 y!0) (* (- 12) (* x00 y!0 x!1)) (* 9 (* y00 y!0 x!1 x!1)) (* (- 1) (* y00 y!0 y!0 y!0 x!1 x!1 x!1)) (* (- 7) (* x00 x!1)) (* (- 3) (* x00 y!0 x!1 x!1 x!1)) (* 9 (* x00 y!0 x!1 x!1)) (* y!0 y!0 y!0 y!0 x!1))))
 (let (($x626 (= ?x1400 0)))
 (let (($x2030 (not $x626)))
 (let (($x1403 (and $x753 $x2030)))
 (let ((?x1288 (+ y00 x00 (* (- 7) (* x!1 x00)) (* 6 (* x!1 x!1 x00)) (* (- 2) (* x!1 x!1 x!1 x00)) (* y!0 x00) (* (- 12) (* x!1 y!0 x00)) (* 9 (* x!1 x!1 y!0 x00)) (* (- 3) (* x!1 x!1 x!1 y!0 x00)) (* 2 (* y!0 y!0 x00)) (* (- 12) (* x!1 y!0 y!0 x00)) (* 9 (* x!1 x!1 y!0 y!0 x00)) (* (- 3) (* x!1 x!1 x!1 y!0 y!0 x00)) (* y!0 y!0 y!0 x00) (* (- 4) (* x!1 y!0 y!0 y!0 x00)) (* 3 (* x!1 x!1 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y!0 x00)) (* (- 7) (* x!1 y00)) (* 6 (* x!1 x!1 y00)) (* (- 2) (* x!1 x!1 x!1 y00)) ?x534 ?x1280 (* 3 (* x!1 y!0 y!0 y!0)) (* x!1 x!1 y!0 y!0 y!0) ?x539 (* 6 (* x!1 y!0)) (* 4 (* x!1 y!0 y!0)) (* 3 (* x!1 x!1 y!0 y!0)) (* y!0 y00) (* 2 (* y!0 y!0 y00)) (* y!0 y!0 y!0 y00) (* (- 4) (* x!1 y!0 y!0 y!0 y00)) (* (- 12) (* x!1 y!0 y00)) (* (- 12) (* x!1 y!0 y!0 y00)) ?x92 ?x93 ?x96 ?x99 (* x!1 y!0 y!0 y!0 y!0) (* 3 (* x!1 x!1 y!0 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y!0 y00)) (* 9 (* x!1 x!1 y!0 y00)) (* (- 3) (* x!1 x!1 x!1 y!0 y00)) (* 9 (* x!1 x!1 y!0 y!0 y00)) (* (- 3) (* x!1 x!1 x!1 y!0 y!0 y00)) (* x!1 x!1 x!1 y!0))))
 (let (($x1289 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x1288 0)))))
 (let (($x2254 (exists ((x Int) (y Int) )(! (let ((?x2146 (* x x x y)))
 (let ((?x2086 (* (- 3) (* x x x y y y00))))
 (let ((?x2096 (* 9 (* x x y y y00))))
 (let ((?x2080 (* (- 3) (* x x x y y00))))
 (let ((?x2095 (* 9 (* x x y y00))))
 (let ((?x2018 (* (- 1) (* x x x y y y y00))))
 (let ((?x2074 (* 3 (* x x y y y y00))))
 (let ((?x1456 (* x y y y y)))
 (let ((?x1371 (* x x x x)))
 (let ((?x2194 (* (- 3) (* x x x))))
 (let ((?x154 (+ 1 y)))
 (let ((?x94 (+ (- 1) x)))
 (let ((?x1217 (* ?x94 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1215 (* ?x94 ?x94 ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x2113 (* (- 12) (* x y y y00))))
 (let ((?x2112 (* (- 12) (* x y y00))))
 (let ((?x2111 (* (- 4) (* x y y y y00))))
 (let ((?x1111 (* y y y y00)))
 (let ((?x1570 (* 2 (* y y y00))))
 (let ((?x1102 (* y y00)))
 (let ((?x1070 (* 3 (* x x y y))))
 (let ((?x1002 (* x x y y y)))
 (let ((?x1511 (* 3 (* x y y y))))
 (let ((?x996 (* y y y)))
 (let ((?x2110 (* (- 2) (* x x x y00))))
 (let ((?x2109 (* 6 (* x x y00))))
 (let ((?x2108 (* (- 7) (* x y00))))
 (let ((?x579 (* (- 1) (* x x x y y y x00))))
 (let ((?x690 (* 3 (* x x y y y x00))))
 (let ((?x846 (* (- 4) (* x y y y x00))))
 (let ((?x483 (* y y y x00)))
 (let ((?x682 (* (- 3) (* x x x y y x00))))
 (let ((?x703 (* 9 (* x x y y x00))))
 (let ((?x843 (* (- 12) (* x y y x00))))
 (let ((?x1764 (* 2 (* y y x00))))
 (let ((?x670 (* (- 3) (* x x x y x00))))
 (let ((?x701 (* 9 (* x x y x00))))
 (let ((?x841 (* (- 12) (* x y x00))))
 (let ((?x301 (* y x00)))
 (let ((?x720 (* (- 2) (* x x x x00))))
 (let ((?x2247 (+ y00 x00 (* (- 7) (* x x00)) (* 6 (* x x x00)) ?x720 ?x301 ?x841 ?x701 ?x670 ?x1764 ?x843 ?x703 ?x682 ?x483 ?x846 ?x690 ?x579 ?x2108 ?x2109 ?x2110 (* 2 (* y y)) ?x996 ?x1511 ?x1002 (* 4 (* x x)) (* 6 (* x y)) (* 4 (* x y y)) ?x1070 ?x1102 ?x1570 ?x1111 ?x2111 ?x2112 ?x2113 ?x1215 ?x1217 ?x2194 ?x1371 ?x1456 ?x2074 ?x2018 ?x2095 ?x2080 ?x2096 ?x2086 ?x2146)))
 (let (($x102 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x102 (not (= ?x2247 0))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1090 (exists ((x Int) (y Int) )(! (let ((?x154 (+ 1 y)))
 (let ((?x94 (+ (- 1) x)))
 (let ((?x1721 (* ?x94 ?x94 ?x94 ?x154)))
 (let ((?x1708 (* y00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1979 (* x00 ?x154 ?x154 ?x154)))
 (let ((?x1844 (* x00 ?x154 ?x154)))
 (let ((?x1790 (* y00 ?x154 ?x154 ?x154)))
 (let ((?x1853 (* y00 ?x154 ?x154)))
 (let ((?x1827 (* y00 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1810 (* y00 ?x94 ?x94 ?x94)))
 (let ((?x1898 (* x00 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1793 (* x00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1880 (* x00 ?x94 ?x94 ?x94)))
 (let ((?x1895 (+ ?x1880 ?x1793 ?x1898 ?x1810 (* (- 1) (* ?x94 ?x94 ?x154 ?x154 ?x154)) ?x1827 (* (- 1) (* ?x94 ?x94 ?x94 ?x154 ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* ?x154 ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x94 ?x94 ?x94)) (* (- 1) (* ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154 ?x154 ?x154)) ?x1853 ?x1790 ?x1844 ?x1979 ?x1708 (* (- 1) ?x1721))))
 (let (($x1093 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x1093 (not (= ?x1895 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x2256 (lambda ((x Int) (y Int) )(let ((?x2146 (* x x x y)))
 (let ((?x2086 (* (- 3) (* x x x y y y00))))
 (let ((?x2096 (* 9 (* x x y y y00))))
 (let ((?x2080 (* (- 3) (* x x x y y00))))
 (let ((?x2095 (* 9 (* x x y y00))))
 (let ((?x2018 (* (- 1) (* x x x y y y y00))))
 (let ((?x2074 (* 3 (* x x y y y y00))))
 (let ((?x1456 (* x y y y y)))
 (let ((?x1371 (* x x x x)))
 (let ((?x2194 (* (- 3) (* x x x))))
 (let ((?x154 (+ 1 y)))
 (let ((?x94 (+ (- 1) x)))
 (let ((?x1217 (* ?x94 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1215 (* ?x94 ?x94 ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x2113 (* (- 12) (* x y y y00))))
 (let ((?x2112 (* (- 12) (* x y y00))))
 (let ((?x2111 (* (- 4) (* x y y y y00))))
 (let ((?x1111 (* y y y y00)))
 (let ((?x1570 (* 2 (* y y y00))))
 (let ((?x1102 (* y y00)))
 (let ((?x1070 (* 3 (* x x y y))))
 (let ((?x1002 (* x x y y y)))
 (let ((?x1511 (* 3 (* x y y y))))
 (let ((?x996 (* y y y)))
 (let ((?x2110 (* (- 2) (* x x x y00))))
 (let ((?x2109 (* 6 (* x x y00))))
 (let ((?x2108 (* (- 7) (* x y00))))
 (let ((?x579 (* (- 1) (* x x x y y y x00))))
 (let ((?x690 (* 3 (* x x y y y x00))))
 (let ((?x846 (* (- 4) (* x y y y x00))))
 (let ((?x483 (* y y y x00)))
 (let ((?x682 (* (- 3) (* x x x y y x00))))
 (let ((?x703 (* 9 (* x x y y x00))))
 (let ((?x843 (* (- 12) (* x y y x00))))
 (let ((?x1764 (* 2 (* y y x00))))
 (let ((?x670 (* (- 3) (* x x x y x00))))
 (let ((?x701 (* 9 (* x x y x00))))
 (let ((?x841 (* (- 12) (* x y x00))))
 (let ((?x301 (* y x00)))
 (let ((?x720 (* (- 2) (* x x x x00))))
 (let ((?x2247 (+ y00 x00 (* (- 7) (* x x00)) (* 6 (* x x x00)) ?x720 ?x301 ?x841 ?x701 ?x670 ?x1764 ?x843 ?x703 ?x682 ?x483 ?x846 ?x690 ?x579 ?x2108 ?x2109 ?x2110 (* 2 (* y y)) ?x996 ?x1511 ?x1002 (* 4 (* x x)) (* 6 (* x y)) (* 4 (* x y y)) ?x1070 ?x1102 ?x1570 ?x1111 ?x2111 ?x2112 ?x2113 ?x1215 ?x1217 ?x2194 ?x1371 ?x1456 ?x2074 ?x2018 ?x2095 ?x2080 ?x2096 ?x2086 ?x2146)))
 (let (($x102 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x466 (and $x102 (not (= ?x2247 0)))))
 (let ((?x1708 (* y00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1979 (* x00 ?x154 ?x154 ?x154)))
 (let ((?x1844 (* x00 ?x154 ?x154)))
 (let ((?x1790 (* y00 ?x154 ?x154 ?x154)))
 (let ((?x1853 (* y00 ?x154 ?x154)))
 (let ((?x1827 (* y00 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1810 (* y00 ?x94 ?x94 ?x94)))
 (let ((?x1898 (* x00 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1793 (* x00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1880 (* x00 ?x94 ?x94 ?x94)))
 (let ((?x1895 (+ ?x1880 ?x1793 ?x1898 ?x1810 (* (- 1) (* ?x94 ?x94 ?x154 ?x154 ?x154)) ?x1827 (* (- 1) ?x1215) (* (- 1) ?x1217) (* (- 1) (* ?x94 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* ?x154 ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x94 ?x94 ?x94)) (* (- 1) (* ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154 ?x154 ?x154)) ?x1853 ?x1790 ?x1844 ?x1979 ?x1708 (* (- 1) (* ?x94 ?x94 ?x94 ?x154)))))
 (let (($x1093 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1815 (and $x1093 (not (= ?x1895 0)))))
 (rewrite (= $x1815 $x466)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1775 (exists ((x Int) (y Int) )(! (let ((?x154 (+ 1 y)))
 (let ((?x94 (+ (- 1) x)))
 (let ((?x1721 (* ?x94 ?x94 ?x94 ?x154)))
 (let ((?x1950 (* ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1948 (* ?x154 ?x154 ?x154)))
 (let ((?x1946 (* ?x94 ?x94 ?x94 ?x94)))
 (let ((?x1945 (* ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1943 (* ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1941 (* ?x94 ?x154 ?x154)))
 (let ((?x1217 (* ?x94 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1215 (* ?x94 ?x94 ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1820 (* ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x250 (+ (* (- 1) (* x00 ?x94 ?x94 ?x94)) (* (- 1) (* x00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* x00 ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* y00 ?x94 ?x94 ?x94)) ?x1820 (* (- 1) (* y00 ?x94 ?x154 ?x154 ?x154)) ?x1215 ?x1217 ?x1941 ?x1943 ?x1945 ?x1946 ?x1948 ?x1950 (* (- 1) (* y00 ?x154 ?x154)) (* (- 1) (* y00 ?x154 ?x154 ?x154)) (* (- 1) (* x00 ?x154 ?x154)) (* (- 1) (* x00 ?x154 ?x154 ?x154)) (* (- 1) (* y00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)) ?x1721)))
 (let (($x1093 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x1093 (not (= ?x250 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x1833 (lambda ((x Int) (y Int) )(let ((?x154 (+ 1 y)))
 (let ((?x94 (+ (- 1) x)))
 (let ((?x1721 (* ?x94 ?x94 ?x94 ?x154)))
 (let ((?x1708 (* y00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1979 (* x00 ?x154 ?x154 ?x154)))
 (let ((?x1844 (* x00 ?x154 ?x154)))
 (let ((?x1790 (* y00 ?x154 ?x154 ?x154)))
 (let ((?x1853 (* y00 ?x154 ?x154)))
 (let ((?x1827 (* y00 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1810 (* y00 ?x94 ?x94 ?x94)))
 (let ((?x1898 (* x00 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1793 (* x00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1880 (* x00 ?x94 ?x94 ?x94)))
 (let ((?x1895 (+ ?x1880 ?x1793 ?x1898 ?x1810 (* (- 1) (* ?x94 ?x94 ?x154 ?x154 ?x154)) ?x1827 (* (- 1) (* ?x94 ?x94 ?x94 ?x154 ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* ?x154 ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x94 ?x94 ?x94)) (* (- 1) (* ?x154 ?x154 ?x154)) (* (- 1) (* ?x94 ?x154 ?x154 ?x154 ?x154)) ?x1853 ?x1790 ?x1844 ?x1979 ?x1708 (* (- 1) ?x1721))))
 (let (($x1093 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1815 (and $x1093 (not (= ?x1895 0)))))
 (let ((?x1950 (* ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1948 (* ?x154 ?x154 ?x154)))
 (let ((?x1946 (* ?x94 ?x94 ?x94 ?x94)))
 (let ((?x1945 (* ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1943 (* ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1941 (* ?x94 ?x154 ?x154)))
 (let ((?x1217 (* ?x94 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1215 (* ?x94 ?x94 ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1820 (* ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x250 (+ (* (- 1) ?x1880) (* (- 1) ?x1793) (* (- 1) ?x1898) (* (- 1) ?x1810) ?x1820 (* (- 1) ?x1827) ?x1215 ?x1217 ?x1941 ?x1943 ?x1945 ?x1946 ?x1948 ?x1950 (* (- 1) ?x1853) (* (- 1) ?x1790) (* (- 1) ?x1844) (* (- 1) ?x1979) (* (- 1) ?x1708) ?x1721)))
 (let (($x1791 (and $x1093 (not (= ?x250 0)))))
 (rewrite (= $x1791 $x1815))))))))))))))))))))))))))))))
 ))
 (let (($x73 (exists ((x Int) (y Int) )(! (let ((?x37 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (* (- 1) ?x35 ?x35 ?x35 x00) (* ?x35 ?x35 ?x35 x00 ?x37 ?x37 ?x37))))
 (let ((?x43 (- (- ?x41 (* ?x35 x00 ?x37 ?x37 ?x37)) (* ?x35 ?x35 ?x35 y00))))
 (let ((?x47 (- (+ ?x43 (* ?x35 ?x35 ?x37 ?x37 ?x37)) (* ?x35 ?x37 ?x37 ?x37 y00))))
 (let ((?x56 (+ ?x47 (* ?x35 ?x35 ?x35 ?x37 ?x37 ?x37 ?x37) (* ?x35 ?x35 ?x35 ?x35 ?x37 ?x37 ?x37) (* ?x35 ?x37 ?x37) (* ?x35 ?x37 ?x37 ?x37) (* ?x37 ?x37 ?x37 ?x37) (* ?x35 ?x35 ?x35 ?x35) (* ?x37 ?x37 ?x37) (* ?x35 ?x37 ?x37 ?x37 ?x37))))
 (let ((?x64 (- (- (- ?x56 (* ?x37 ?x37 y00)) (* ?x37 ?x37 ?x37 y00)) (* x00 ?x37 ?x37))))
 (let ((?x66 (- (- ?x64 (* x00 ?x37 ?x37 ?x37)) (* ?x35 ?x35 ?x35 ?x37 ?x37 ?x37 y00))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x66 (* ?x35 ?x35 ?x35 ?x37)) 0)))))))))))) :qid k!26))
 ))
 (let ((?x1158 (lambda ((x Int) (y Int) )(let ((?x154 (+ 1 y)))
 (let ((?x94 (+ (- 1) x)))
 (let ((?x1721 (* ?x94 ?x94 ?x94 ?x154)))
 (let ((?x1950 (* ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1948 (* ?x154 ?x154 ?x154)))
 (let ((?x1946 (* ?x94 ?x94 ?x94 ?x94)))
 (let ((?x1945 (* ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1943 (* ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1941 (* ?x94 ?x154 ?x154)))
 (let ((?x1217 (* ?x94 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x1215 (* ?x94 ?x94 ?x94 ?x154 ?x154 ?x154 ?x154)))
 (let ((?x1820 (* ?x94 ?x94 ?x154 ?x154 ?x154)))
 (let ((?x250 (+ (* (- 1) (* x00 ?x94 ?x94 ?x94)) (* (- 1) (* x00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* x00 ?x94 ?x154 ?x154 ?x154)) (* (- 1) (* y00 ?x94 ?x94 ?x94)) ?x1820 (* (- 1) (* y00 ?x94 ?x154 ?x154 ?x154)) ?x1215 ?x1217 ?x1941 ?x1943 ?x1945 ?x1946 ?x1948 ?x1950 (* (- 1) (* y00 ?x154 ?x154)) (* (- 1) (* y00 ?x154 ?x154 ?x154)) (* (- 1) (* x00 ?x154 ?x154)) (* (- 1) (* x00 ?x154 ?x154 ?x154)) (* (- 1) (* y00 ?x94 ?x94 ?x94 ?x154 ?x154 ?x154)) ?x1721)))
 (let (($x1093 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1791 (and $x1093 (not (= ?x250 0)))))
 (let ((?x37 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (* (- 1) ?x35 ?x35 ?x35 x00) (* ?x35 ?x35 ?x35 x00 ?x37 ?x37 ?x37))))
 (let ((?x43 (- (- ?x41 (* ?x35 x00 ?x37 ?x37 ?x37)) (* ?x35 ?x35 ?x35 y00))))
 (let ((?x47 (- (+ ?x43 (* ?x35 ?x35 ?x37 ?x37 ?x37)) (* ?x35 ?x37 ?x37 ?x37 y00))))
 (let ((?x56 (+ ?x47 (* ?x35 ?x35 ?x35 ?x37 ?x37 ?x37 ?x37) (* ?x35 ?x35 ?x35 ?x35 ?x37 ?x37 ?x37) (* ?x35 ?x37 ?x37) (* ?x35 ?x37 ?x37 ?x37) (* ?x37 ?x37 ?x37 ?x37) (* ?x35 ?x35 ?x35 ?x35) (* ?x37 ?x37 ?x37) (* ?x35 ?x37 ?x37 ?x37 ?x37))))
 (let ((?x64 (- (- (- ?x56 (* ?x37 ?x37 y00)) (* ?x37 ?x37 ?x37 y00)) (* x00 ?x37 ?x37))))
 (let ((?x66 (- (- ?x64 (* x00 ?x37 ?x37 ?x37)) (* ?x35 ?x35 ?x35 ?x37 ?x37 ?x37 y00))))
 (let (($x72 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x66 (* ?x35 ?x35 ?x35 ?x37)) 0))))))
 (rewrite (= $x72 $x1791)))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x1937 (mp (mp @x74 (quant-intro (proof-bind ?x1158) (= $x73 $x1775)) $x1775) (rewrite (= $x1775 $x1775)) $x1775)))
 (let ((@x666 (mp (mp @x1937 (quant-intro (proof-bind ?x1833) (= $x1775 $x1090)) $x1090) (quant-intro (proof-bind ?x2256) (= $x1090 $x2254)) $x2254)))
 (let ((@x2035 (mp (mp~ @x666 (sk (~ $x2254 $x1289)) $x1289) (rewrite (= $x1289 $x1403)) $x1403)))
 (let ((@x2000 (and-elim @x2035 $x753)))
 (let ((@x743 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x753) $x1043)) @x2000 $x1043)))
 (let (($x419 (>= ?x750 0)))
 (let ((@x1052 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x753) $x419)) @x2000 $x419)))
 (let (($x790 (not (>= ?x1400 0))))
 (let (($x1046 (<= ?x1400 0)))
 (let ((@x988 (lemma ((_ th-lemma arith) (hypothesis (not $x1046)) @x1052 @x743 @x1052 @x743 false) $x1046)))
 (let ((@x1509 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x626 (not $x1046) $x790)) (and-elim @x2035 $x2030) (or (not $x1046) $x790))))
 ((_ th-lemma arith) (unit-resolution @x1509 @x988 $x790) @x1052 @x743 @x1052 @x743 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             392
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 65
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.85
 :memory                    3.36
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1360637
 :num-checks                1
 :propagations              4
 :rlimit-count              7452
 :time                      0.01
 :total-time                0.02)
