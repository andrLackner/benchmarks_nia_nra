unsat
((set-logic NIA)
(declare-fun x!2 () Int)
(declare-fun z!0 () Int)
(declare-fun y!1 () Int)
(proof
(let ((?x234 (to_real x!2)))
 (let ((?x233 (to_real z!0)))
 (let ((?x222 (to_real y!1)))
 (let ((?x415 (* 4.0 (* (to_real x00) (to_real y00) ?x233 ?x233 ?x233 ?x234 ?x234))))
 (let ((?x187 (+ (* 4.0 (* (to_real z00) ?x233 ?x233 ?x233 ?x234 ?x234)) (* (- 4.0) (* ?x233 ?x233 ?x233 ?x233 ?x234 ?x234)) ?x415 (* (/ 1.0 2.0) (* ?x222 ?x233 ?x233 ?x233 ?x233)) (* (- (/ 1.0 2.0)) (* (to_real z00) ?x222 ?x233 ?x233 ?x233)) (* (- (/ 1.0 2.0)) (* (to_real x00) (to_real y00) ?x222 ?x233 ?x233 ?x233)) (* (- 4.0) (* ?x222 ?x233 ?x233 ?x233 ?x234 ?x234 ?x234)) (* (/ 1.0 2.0) (* ?x222 ?x222 ?x233 ?x233 ?x233 ?x234)))))
 (let (($x336 (>= ?x187 0.0)))
 (let (($x198 (not $x336)))
 (let (($x103 (<= ?x187 0.0)))
 (let ((?x82 (* x00 y00)))
 (let ((?x321 (+ z00 ?x82 (* (- 1) (* x!2 y!1)) (* (- 1) z!0))))
 (let (($x319 (>= ?x321 0)))
 (let (($x334 (= 0 ?x321)))
 (let ((@x217 (symm (commutativity (= $x334 (= ?x321 0))) (= (= ?x321 0) $x334))))
 (let (($x117 (= ?x321 0)))
 (let ((?x316 (* ?x222 ?x234)))
 (let ((?x108 (to_real y00)))
 (let ((?x104 (to_real x00)))
 (let ((?x109 (* ?x104 ?x108)))
 (let ((?x115 (* (- 1.0) ?x109)))
 (let ((?x48 (to_real z00)))
 (let ((?x195 (* (- 1.0) ?x48)))
 (let ((?x478 (* (- 4.0) (* ?x234 ?x234 ?x234 ?x234 ?x234))))
 (let ((?x326 (* (- (/ 1.0 2.0)) (* ?x233 ?x233 ?x233))))
 (let ((?x454 (* (- (/ 1.0 2.0)) (* ?x234 ?x234 ?x234))))
 (let ((?x329 (+ (* (/ 3.0 2.0) (* ?x222 ?x233 ?x233 ?x234)) (* (- (/ 3.0 2.0)) (* ?x233 ?x234 ?x234)) (* (- 12.0) (* ?x233 ?x234 ?x234 ?x234 ?x234)) (* (/ 3.0 2.0) (* ?x222 ?x233 ?x234 ?x234)) (* (/ 1.0 2.0) (* ?x222 ?x234 ?x234 ?x234)) (* (- (/ 3.0 2.0)) (* ?x233 ?x233 ?x234)) (* (- 12.0) (* ?x233 ?x233 ?x234 ?x234 ?x234)) (* (/ 1.0 2.0) (* ?x222 ?x233 ?x233 ?x233)) ?x454 ?x326 (* (- 4.0) (* ?x233 ?x233 ?x233 ?x234 ?x234)) ?x478)))
 (let (($x317 (= (* ?x329 (+ ?x195 ?x115 ?x233 ?x316)) 0.0)))
 (let (($x145 (not $x317)))
 (let (($x211 (= ?x187 0.0)))
 (let (($x84 (not $x211)))
 (let (($x243 (or $x84 $x145)))
 (let (($x369 (and $x117 $x243)))
 (let ((?x494 (+ ?x454 ?x478 (* (- 12.0) (* ?x234 ?x234 ?x234 ?x234 ?x233)) (* (- 12.0) (* ?x234 ?x234 ?x234 ?x233 ?x233)) (* (- 4.0) (* ?x234 ?x234 ?x233 ?x233 ?x233)) (* (- (/ 3.0 2.0)) (* ?x234 ?x234 ?x233)) (* (- (/ 3.0 2.0)) (* ?x234 ?x233 ?x233)) ?x326 (* (/ 1.0 2.0) (* ?x234 ?x234 ?x234 ?x222)) (* (/ 3.0 2.0) (* ?x234 ?x234 ?x233 ?x222)) (* (/ 3.0 2.0) (* ?x234 ?x233 ?x233 ?x222)) (* (/ 1.0 2.0) (* ?x233 ?x233 ?x233 ?x222)))))
 (let ((?x165 (+ (* 4.0 (* ?x234 ?x234 ?x233 ?x233 ?x233 ?x48)) (* (- 4.0) (* ?x234 ?x234 ?x233 ?x233 ?x233 ?x233)) (* 4.0 (* ?x234 ?x234 ?x233 ?x233 ?x233 ?x104 ?x108)) (* (- 4.0) (* ?x234 ?x234 ?x234 ?x233 ?x233 ?x233 ?x222)) (* (/ 1.0 2.0) (* ?x233 ?x233 ?x233 ?x233 ?x222)) (* (- (/ 1.0 2.0)) (* ?x233 ?x233 ?x233 ?x48 ?x222)) (* (- (/ 1.0 2.0)) (* ?x233 ?x233 ?x233 ?x222 ?x104 ?x108)) (* (/ 1.0 2.0) (* ?x234 ?x233 ?x233 ?x233 ?x222 ?x222)))))
 (let (($x123 (or (not (= ?x165 0.0)) (not (= (* ?x494 (+ ?x233 ?x195 ?x115 (* ?x234 ?x222))) 0.0)))))
 (let (($x124 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x82)) 0) $x123)))
 (let (($x483 (exists ((x Int) (y Int) (z Int) )(! (let ((?x108 (to_real y00)))
 (let ((?x104 (to_real x00)))
 (let ((?x109 (* ?x104 ?x108)))
 (let ((?x115 (* (- 1.0) ?x109)))
 (let ((?x48 (to_real z00)))
 (let ((?x195 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x383 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 (to_real y)))))
 (let ((?x391 (* (/ 3.0 2.0) (* (to_real x) ?x46 ?x46 (to_real y)))))
 (let ((?x390 (* (/ 3.0 2.0) (* (to_real x) (to_real x) ?x46 (to_real y)))))
 (let ((?x363 (* (/ 1.0 2.0) (* (to_real x) (to_real x) (to_real x) (to_real y)))))
 (let ((?x355 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46))))
 (let ((?x330 (* (- 4.0) (* (to_real x) (to_real x) ?x46 ?x46 ?x46))))
 (let ((?x318 (* (- 12.0) (* (to_real x) (to_real x) (to_real x) ?x46 ?x46))))
 (let ((?x308 (* (- 12.0) (* (to_real x) (to_real x) (to_real x) (to_real x) ?x46))))
 (let ((?x43 (to_real x)))
 (let ((?x296 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x294 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43))))
 (let ((?x121 (+ ?x294 ?x296 ?x308 ?x318 ?x330 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46)) (* (- (/ 3.0 2.0)) (* ?x43 ?x46 ?x46)) ?x355 ?x363 ?x390 ?x391 ?x383)))
 (let (($x356 (not (= (* ?x121 (+ ?x46 ?x195 ?x115 (* ?x43 (to_real y)))) 0.0))))
 (let ((?x491 (+ (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x48)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x104 ?x108)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real y))) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x46 (to_real y))) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x48 (to_real y))) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 (to_real y) ?x104 ?x108)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 (to_real y) (to_real y))))))
 (let (($x281 (not (= ?x491 0.0))))
 (let (($x110 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x110 (or $x281 $x356))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x492 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x195 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x108 (to_real y00)))
 (let ((?x104 (to_real x00)))
 (let ((?x109 (* ?x104 ?x108)))
 (let ((?x115 (* (- 1.0) ?x109)))
 (let ((?x383 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 (to_real y)))))
 (let ((?x181 (* (+ (* (- 4.0) (* ?x46 ?x46 ?x46 (to_real x) (to_real x))) ?x383) (+ ?x115 (* (to_real y) (to_real x)) ?x46 ?x195))))
 (let ((?x43 (to_real x)))
 (let ((?x200 (+ ?x115 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x195)))
 (let ((?x60 (to_real y)))
 (let ((?x160 (* (/ 1.0 2.0) ?x60)))
 (let ((?x245 (+ (- (/ 1.0 2.0)) ?x160)))
 (let ((?x460 (+ ?x46 ?x43)))
 (let ((?x486 (+ (* (- 4.0) (* ?x43 ?x43 ?x460 ?x460 ?x460)) (* ?x460 ?x460 ?x460 ?x245))))
 (let (($x458 (or (not (= (* ?x486 ?x200) 0.0)) (not (= ?x181 0.0)))))
 (let (($x237 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x237 $x458))))))))))))))))))) :qid k!28))
 ))
 (let ((?x480 (lambda ((x Int) (y Int) (z Int) )(let ((?x108 (to_real y00)))
 (let ((?x104 (to_real x00)))
 (let ((?x109 (* ?x104 ?x108)))
 (let ((?x115 (* (- 1.0) ?x109)))
 (let ((?x48 (to_real z00)))
 (let ((?x195 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x383 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 (to_real y)))))
 (let ((?x391 (* (/ 3.0 2.0) (* (to_real x) ?x46 ?x46 (to_real y)))))
 (let ((?x390 (* (/ 3.0 2.0) (* (to_real x) (to_real x) ?x46 (to_real y)))))
 (let ((?x363 (* (/ 1.0 2.0) (* (to_real x) (to_real x) (to_real x) (to_real y)))))
 (let ((?x355 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46))))
 (let ((?x330 (* (- 4.0) (* (to_real x) (to_real x) ?x46 ?x46 ?x46))))
 (let ((?x318 (* (- 12.0) (* (to_real x) (to_real x) (to_real x) ?x46 ?x46))))
 (let ((?x308 (* (- 12.0) (* (to_real x) (to_real x) (to_real x) (to_real x) ?x46))))
 (let ((?x43 (to_real x)))
 (let ((?x296 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x294 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43))))
 (let ((?x121 (+ ?x294 ?x296 ?x308 ?x318 ?x330 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46)) (* (- (/ 3.0 2.0)) (* ?x43 ?x46 ?x46)) ?x355 ?x363 ?x390 ?x391 ?x383)))
 (let (($x356 (not (= (* ?x121 (+ ?x46 ?x195 ?x115 (* ?x43 (to_real y)))) 0.0))))
 (let ((?x491 (+ (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x48)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x104 ?x108)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real y))) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x46 (to_real y))) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x48 (to_real y))) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 (to_real y) ?x104 ?x108)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 (to_real y) (to_real y))))))
 (let (($x281 (not (= ?x491 0.0))))
 (let (($x110 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x341 (and $x110 (or $x281 $x356))))
 (let ((?x181 (* (+ (* (- 4.0) (* ?x46 ?x46 ?x46 ?x43 ?x43)) ?x383) (+ ?x115 (* (to_real y) ?x43) ?x46 ?x195))))
 (let ((?x200 (+ ?x115 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x195)))
 (let ((?x60 (to_real y)))
 (let ((?x160 (* (/ 1.0 2.0) ?x60)))
 (let ((?x245 (+ (- (/ 1.0 2.0)) ?x160)))
 (let ((?x460 (+ ?x46 ?x43)))
 (let ((?x486 (+ (* (- 4.0) (* ?x43 ?x43 ?x460 ?x460 ?x460)) (* ?x460 ?x460 ?x460 ?x245))))
 (let (($x458 (or (not (= (* ?x486 ?x200) 0.0)) (not (= ?x181 0.0)))))
 (let (($x237 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x255 (and $x237 $x458)))
 (rewrite (= $x255 $x341)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x199 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x195 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x108 (to_real y00)))
 (let ((?x104 (to_real x00)))
 (let ((?x109 (* ?x104 ?x108)))
 (let ((?x115 (* (- 1.0) ?x109)))
 (let ((?x383 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 (to_real y)))))
 (let ((?x181 (* (+ (* (- 4.0) (* ?x46 ?x46 ?x46 (to_real x) (to_real x))) ?x383) (+ ?x115 (* (to_real y) (to_real x)) ?x46 ?x195))))
 (let ((?x43 (to_real x)))
 (let ((?x200 (+ ?x115 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x195)))
 (let ((?x60 (to_real y)))
 (let ((?x160 (* (/ 1.0 2.0) ?x60)))
 (let ((?x245 (+ (- (/ 1.0 2.0)) ?x160)))
 (let ((?x460 (+ ?x46 ?x43)))
 (let ((?x486 (+ (* (- 4.0) (* ?x43 ?x43 ?x460 ?x460 ?x460)) (* ?x460 ?x460 ?x460 ?x245))))
 (let (($x458 (or (not (= (* ?x486 ?x200) 0.0)) (not (= ?x181 0.0)))))
 (let (($x285 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x285 $x458))))))))))))))))))) :qid k!28))
 ))
 (let ((?x292 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x195 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x108 (to_real y00)))
 (let ((?x104 (to_real x00)))
 (let ((?x109 (* ?x104 ?x108)))
 (let ((?x115 (* (- 1.0) ?x109)))
 (let ((?x383 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 (to_real y)))))
 (let ((?x181 (* (+ (* (- 4.0) (* ?x46 ?x46 ?x46 (to_real x) (to_real x))) ?x383) (+ ?x115 (* (to_real y) (to_real x)) ?x46 ?x195))))
 (let ((?x43 (to_real x)))
 (let ((?x200 (+ ?x115 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x195)))
 (let ((?x60 (to_real y)))
 (let ((?x160 (* (/ 1.0 2.0) ?x60)))
 (let ((?x245 (+ (- (/ 1.0 2.0)) ?x160)))
 (let ((?x460 (+ ?x46 ?x43)))
 (let ((?x486 (+ (* (- 4.0) (* ?x43 ?x43 ?x460 ?x460 ?x460)) (* ?x460 ?x460 ?x460 ?x245))))
 (let (($x458 (or (not (= (* ?x486 ?x200) 0.0)) (not (= ?x181 0.0)))))
 (let (($x237 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x255 (and $x237 $x458)))
 (let (($x285 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x456 (and $x285 $x458)))
 (rewrite (= $x456 $x255))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((x Int) (y Int) (z Int) )(! (let ((?x57 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x60 (to_real y)))
 (let ((?x61 (/ ?x60 ?x41)))
 (let ((?x68 (+ (to_real (* (- 1) 2 x 2 x z z z)) (* ?x61 ?x46 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x70 (= (* (- (+ ?x45 (* ?x41 (to_real x) ?x61) ?x46) ?x48) ?x68) ?x57)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (+ (to_real (* ?x28 2 x 2 x ?x50 ?x50 ?x50)) (* ?x42 ?x52 ?x52 ?x52))))
 (let ((?x56 (* (- (+ ?x45 (* ?x41 (to_real x) ?x42) ?x46 (to_real x)) ?x48) ?x55)))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x56 ?x57)) (not $x70))))))))))))))))))) :qid k!28))
 ))
 (let ((?x214 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x195 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x108 (to_real y00)))
 (let ((?x104 (to_real x00)))
 (let ((?x109 (* ?x104 ?x108)))
 (let ((?x115 (* (- 1.0) ?x109)))
 (let ((?x383 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 (to_real y)))))
 (let ((?x181 (* (+ (* (- 4.0) (* ?x46 ?x46 ?x46 (to_real x) (to_real x))) ?x383) (+ ?x115 (* (to_real y) (to_real x)) ?x46 ?x195))))
 (let ((?x43 (to_real x)))
 (let ((?x200 (+ ?x115 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x195)))
 (let ((?x60 (to_real y)))
 (let ((?x160 (* (/ 1.0 2.0) ?x60)))
 (let ((?x245 (+ (- (/ 1.0 2.0)) ?x160)))
 (let ((?x460 (+ ?x46 ?x43)))
 (let ((?x486 (+ (* (- 4.0) (* ?x43 ?x43 ?x460 ?x460 ?x460)) (* ?x460 ?x460 ?x460 ?x245))))
 (let (($x458 (or (not (= (* ?x486 ?x200) 0.0)) (not (= ?x181 0.0)))))
 (let (($x285 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x456 (and $x285 $x458)))
 (let ((?x57 (to_real 0)))
 (let ((?x68 (+ (to_real (* (- 1) 2 x 2 x z z z)) (* (/ ?x60 (to_real 2)) ?x46 ?x46 ?x46))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x64 (- (+ ?x45 (* (to_real 2) ?x43 (/ ?x60 (to_real 2))) ?x46) ?x48)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (+ (to_real (* ?x28 2 x 2 x ?x50 ?x50 ?x50)) (* ?x42 ?x52 ?x52 ?x52))))
 (let (($x59 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x55) ?x57))))
 (let (($x73 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x59 (not (= (* ?x64 ?x68) ?x57))))))
 (rewrite (= $x73 $x456)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x484 (mp (mp @x75 (quant-intro (proof-bind ?x214) (= $x74 $x199)) $x199) (rewrite (= $x199 $x199)) $x199)))
 (let ((@x162 (mp (mp @x484 (quant-intro (proof-bind ?x292) (= $x199 $x492)) $x492) (quant-intro (proof-bind ?x480) (= $x492 $x483)) $x483)))
 (let ((@x254 (mp (mp~ @x162 (sk (~ $x483 $x124)) $x124) (rewrite (= $x124 $x369)) $x369)))
 (let ((@x367 (mp (and-elim @x254 $x117) @x217 $x334)))
 (let ((@x139 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x334) $x319)) @x367 $x319)))
 (let (($x304 (<= ?x321 0)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x334) $x304)) @x367 $x304)))
 (let ((@x208 (unit-resolution ((_ th-lemma arith) (or $x103 (not $x319) (not $x304))) @x238 @x139 (hypothesis (not $x103)) false)))
 (let ((?x300 (+ ?x316 ?x115 ?x233 ?x195)))
 (let (($x386 (= 0.0 ?x300)))
 (let (($x95 (>= ?x300 0.0)))
 (let ((?x471 (to_real ?x82)))
 (let ((?x375 (+ ?x115 ?x471)))
 (let (($x467 (>= ?x375 0.0)))
 (let (($x377 (= 0.0 ?x375)))
 (let ((@x322 (symm (commutativity (= $x377 (= ?x375 0.0))) (= (= ?x375 0.0) $x377))))
 (let ((@x374 (unit-resolution (hypothesis (not $x377)) (mp ((_ th-lemma arith) (= ?x375 0.0)) @x322 $x377) false)))
 (let ((@x218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x377) $x467)) (lemma @x374 $x377) $x467)))
 (let ((?x380 (+ (* (- 1.0) (to_real (* x!2 y!1))) ?x316)))
 (let (($x469 (>= ?x380 0.0)))
 (let (($x434 (= 0.0 ?x380)))
 (let ((@x157 (symm (commutativity (= $x434 (= ?x380 0.0))) (= (= ?x380 0.0) $x434))))
 (let ((@x155 (mp ((_ th-lemma arith) (= ?x380 0.0)) @x157 $x434)))
 (let ((@x246 ((_ th-lemma arith) @x238 (hypothesis (not $x95)) (hypothesis $x467) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x469)) @x155 $x469) false)))
 (let (($x271 (<= ?x300 0.0)))
 (let ((?x297 (+ ?x109 (* (- 1.0) ?x471))))
 (let (($x384 (>= ?x297 0.0)))
 (let (($x133 (= 0.0 ?x297)))
 (let ((@x106 (symm (commutativity (= $x133 (= ?x297 0.0))) (= (= ?x297 0.0) $x133))))
 (let ((@x404 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x133) $x384)) (mp ((_ th-lemma arith) (= ?x297 0.0)) @x106 $x133) $x384)))
 (let (($x470 (<= ?x380 0.0)))
 (let ((@x150 ((_ th-lemma arith) (hypothesis (not $x271)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x470)) @x155 $x470) @x139 @x404 false)))
 (let ((@x396 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x386 (not $x271) (not $x95))) (lemma @x150 $x271) (unit-resolution (lemma @x246 (or (not $x467) $x95)) @x218 $x95) $x386)))
 (let (($x387 (= ?x300 0.0)))
 (let (($x111 (not $x387)))
 (let ((@x401 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x111 $x317)) (hypothesis $x145) $x111) (symm (hypothesis $x386) $x387) false)))
 (let ((@x197 (unit-resolution (and-elim @x254 $x243) (unit-resolution (lemma @x401 (or (not $x386) $x317)) @x396 $x317) $x84)))
 (let ((@x500 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x211 (not $x103) $x198)) @x197 (lemma @x208 $x103) $x198)))
 (unit-resolution ((_ th-lemma arith) (or (not $x319) $x336 (not $x304))) @x238 @x139 @x500 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      30
 :arith-eq-adapter               29
 :arith-bound-propagations-cheap 17
 :arith-bound-propagations-lp    4
 :arith-conflicts                20
 :arith-diseq                    26
 :arith-gcd-calls                3
 :arith-grobner-calls            3
 :arith-grobner-conflicts        2
 :arith-horner-calls             3
 :arith-lower                    24
 :arith-make-feasible            29
 :arith-max-columns              58
 :arith-max-rows                 15
 :arith-nla-explanations         54
 :arith-nla-lemmas               18
 :arith-patches                  3
 :arith-patches-success          3
 :arith-propagations             17
 :arith-upper                    31
 :conflicts                      7
 :decisions                      30
 :del-clause                     66
 :final-checks                   21
 :max-memory                     4.02
 :memory                         3.10
 :mk-bool-var                    102
 :mk-clause                      117
 :num-allocs                     1663000
 :num-checks                     1
 :propagations                   53
 :rlimit-count                   3950
 :time                           0.01
 :total-time                     0.02)
