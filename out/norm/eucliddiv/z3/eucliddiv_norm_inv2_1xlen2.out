unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x47 (* 0 ?x42 ?x42 r00 y00)))
 (let ((?x46 (* 0 q00 ?x42 ?x42 y00 y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* 0 ?x44 ?x42 ?x42 y00 y00)))
 (let ((?x43 (* 0 ?x42 ?x42 ?x42 y00)))
 (let ((?x48 (+ ?x43 ?x45 ?x46 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x51))))))))))))) :qid k!29))
 ))
 (let (($x148 (= $x53 false)))
 (let (($x141 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x147 (elim-unused (= $x141 false))))
 (let (($x144 (= $x53 $x141)))
 (let ((?x159 (lambda ((q Int) (r Int) (y Int) )(let ((?x42 (- r y00)))
 (let ((?x47 (* 0 ?x42 ?x42 r00 y00)))
 (let ((?x46 (* 0 q00 ?x42 ?x42 y00 y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* 0 ?x44 ?x42 ?x42 y00 y00)))
 (let ((?x43 (* 0 ?x42 ?x42 ?x42 y00)))
 (let ((?x48 (+ ?x43 ?x45 ?x46 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x139 (= $x52 false)))
 (let (($x178 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x78 (= (+ (* (- 1) y00) y) 0)))
 (let (($x151 (and $x78 $x178 false)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x56 (+ r ?x58)))
 (let ((?x100 (* 0 ?x56 ?x56 r00 y00)))
 (let ((@x63 (rewrite (= ?x42 ?x56))))
 (let ((@x106 (trans (monotonicity @x63 @x63 (= ?x47 ?x100)) (rewrite (= ?x100 0)) (= ?x47 0))))
 (let ((@x95 (monotonicity @x63 @x63 (= ?x46 (* 0 q00 ?x56 ?x56 y00 y00)))))
 (let ((@x99 (trans @x95 (rewrite (= (* 0 q00 ?x56 ?x56 y00 y00) 0)) (= ?x46 0))))
 (let ((@x84 (monotonicity (rewrite (= ?x44 (+ 1 q))) @x63 @x63 (= ?x45 (* 0 (+ 1 q) ?x56 ?x56 y00 y00)))))
 (let ((@x89 (trans @x84 (rewrite (= (* 0 (+ 1 q) ?x56 ?x56 y00 y00) 0)) (= ?x45 0))))
 (let ((@x66 (monotonicity @x63 @x63 @x63 (= ?x43 (* 0 ?x56 ?x56 ?x56 y00)))))
 (let ((@x75 (trans @x66 (rewrite (= (* 0 ?x56 ?x56 ?x56 y00) 0)) (= ?x43 0))))
 (let ((@x109 (monotonicity @x75 @x89 @x99 @x106 (= ?x48 (+ 0 0 0 0)))))
 (let ((@x115 (monotonicity (trans @x109 (rewrite (= (+ 0 0 0 0) 0)) $x49) (= $x49 (= 0 0)))))
 (let ((@x122 (monotonicity (trans @x115 (rewrite (= (= 0 0) true)) (= $x49 true)) (= $x50 (not true)))))
 (let ((@x129 (monotonicity (trans @x122 (rewrite (= (not true) false)) (= $x50 false)) (= $x51 (or false)))))
 (let ((@x133 (trans @x129 (rewrite (= (or false) false)) (= $x51 false))))
 (let ((@x153 (monotonicity (rewrite (= $x33 $x78)) (rewrite (= $x41 $x178)) @x133 (= $x52 $x151))))
 (trans @x153 (rewrite (= $x151 false)) $x139))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (mp @x54 (trans (quant-intro (proof-bind ?x159) $x144) @x147 $x148) false))))))))))

(:max-memory   3.32
 :memory       3.01
 :mk-bool-var  5
 :num-allocs   898156
 :rlimit-count 113
 :time         0.01
 :total-time   0.01)
