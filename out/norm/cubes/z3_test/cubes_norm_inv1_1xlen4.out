unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x536 (* (- 1) k!2)))
 (let ((?x351 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x536)))
 (let (($x549 (<= ?x351 (- 1))))
 (let (($x354 (= ?x351 (- 1))))
 (let ((?x110 (+ c!3 k!2)))
 (let ((?x119 (+ m!1 k!2)))
 (let ((?x487 (+ 6 m!1)))
 (let ((?x476 (+ 1 n!0)))
 (let ((?x280 (* 6 (* c!3 k!2))))
 (let ((?x277 (* k!2 k!2)))
 (let ((?x107 (* 6 ?x277)))
 (let ((?x289 (+ (* 6 (* n!0 c!3 k!2)) (* (- 6) (* ?x476 ?x476 ?x476 ?x119 ?x119 ?x119 ?x110 ?x110)) (* (- 1) (* m!1 k!2 k!2)) (* (- 1) (* m!1 m!1 c!3)) (* (- 1) (* m!1 m!1 k!2)) (* (- 1) (* m!1 c!3 k!2)) ?x107 ?x280 (* (- 6) (* ?x476 ?x476 ?x476 ?x476 ?x119 ?x119 ?x119 ?x110 ?x110)) (* (- 1) (* ?x476 ?x487 ?x487 ?x487 ?x487 ?x119 ?x110 ?x110 ?x110)) (* 6 (* ?x476 ?x476 ?x487 ?x487 ?x487 ?x119 ?x110 ?x110 ?x110)) (* ?x476 ?x476 ?x476 ?x487 ?x119 ?x119 ?x119 ?x110 ?x110) (* 6 (* m!1 k!2)) (* (- 6) (* ?x476 ?x476 ?x119 ?x119 ?x119 ?x110 ?x110 ?x110)) (* 6 (* m!1 c!3)) (* ?x476 ?x476 ?x487 ?x119 ?x119 ?x119 ?x110 ?x110 ?x110) (* (- 6) (* ?x476 ?x476 ?x476 ?x119 ?x119 ?x119 ?x110 ?x110 ?x110)) (* 6 (* n!0 k!2 k!2)) (* 6 (* n!0 m!1 c!3)) (* 6 (* ?x476 ?x487 ?x487 ?x487 ?x119 ?x110 ?x110 ?x110)) (* 6 (* n!0 m!1 k!2)))))
 (let (($x585 (= ?x289 0)))
 (let (($x664 (not $x585)))
 (let ((?x434 (+ (* 2 n!0) (* (- 3) c!3) (* n!0 k!2) ?x536)))
 (let (($x358 (= ?x434 (- 1))))
 (let ((?x340 (+ (* 9 n!0) ?x277 (* (- 18) c!3) (* (- 5) k!2) (* (- 9) (* n!0 c!3)))))
 (let (($x373 (= ?x340 (- 4))))
 (let ((?x193 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x319 (= ?x193 (- 6))))
 (let (($x492 (and $x319 $x373 $x358 $x354 $x664)))
 (let ((?x123 (+ k!2 m!1)))
 (let ((?x507 (+ ?x107 (* 6 (* k!2 m!1)) (* 6 (* ?x476 ?x487 ?x487 ?x487 ?x123 ?x110 ?x110 ?x110)) (* 6 (* c!3 m!1)) (* (- 6) (* ?x476 ?x476 ?x476 ?x476 ?x123 ?x123 ?x123 ?x110 ?x110)) (* 6 (* ?x476 ?x476 ?x487 ?x487 ?x487 ?x123 ?x110 ?x110 ?x110)) (* (- 6) (* ?x476 ?x476 ?x476 ?x123 ?x123 ?x123 ?x110 ?x110)) (* (- 1) (* ?x476 ?x487 ?x487 ?x487 ?x487 ?x123 ?x110 ?x110 ?x110)) ?x280 (* 6 (* c!3 k!2 n!0)) (* 6 (* k!2 k!2 n!0)) (* 6 (* c!3 m!1 n!0)) (* 6 (* k!2 m!1 n!0)) (* ?x476 ?x476 ?x476 ?x487 ?x123 ?x123 ?x123 ?x110 ?x110) (* ?x476 ?x476 ?x487 ?x123 ?x123 ?x123 ?x110 ?x110 ?x110) (* (- 1) (* c!3 k!2 m!1)) (* (- 1) (* c!3 m!1 m!1)) (* (- 1) (* k!2 k!2 m!1)) (* (- 1) (* k!2 m!1 m!1)) (* (- 6) (* ?x476 ?x476 ?x476 ?x123 ?x123 ?x123 ?x110 ?x110 ?x110)) (* (- 6) (* ?x476 ?x476 ?x123 ?x123 ?x123 ?x110 ?x110 ?x110)))))
 (let (($x208 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x307 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x277) (* 9 (* c!3 n!0)))))
 (let (($x283 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x307 4) $x208 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x507 0)))))
 (let (($x328 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x523 (* (- 1) (* k m m))))
 (let ((?x324 (* (- 1) (* k k m))))
 (let ((?x321 (* (- 1) (* c m m))))
 (let ((?x326 (* (- 1) (* c k m))))
 (let ((?x311 (+ 6 m)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x391 (* 6 (* k m n))))
 (let ((?x389 (* 6 (* c m n))))
 (let ((?x387 (* 6 (* k k n))))
 (let ((?x385 (* 6 (* c k n))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x111 (+ (* 6 (* k k)) (* 6 (* k m)) ?x177 (* 6 (* c m)) ?x105 ?x227 ?x259 ?x142 (* 6 (* c k)) ?x385 ?x387 ?x389 ?x391 ?x410 ?x427 ?x326 ?x321 ?x324 ?x523 ?x514 ?x371)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x217 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x213 (= ?x217 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 $x213 $x265 $x303 (not (= ?x111 0)))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x223 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x287 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 (= ?x287 (- 4)) $x191 $x297 (not (= ?x435 0))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x558 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x523 (* (- 1) (* k m m))))
 (let ((?x324 (* (- 1) (* k k m))))
 (let ((?x321 (* (- 1) (* c m m))))
 (let ((?x326 (* (- 1) (* c k m))))
 (let ((?x311 (+ 6 m)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x391 (* 6 (* k m n))))
 (let ((?x389 (* 6 (* c m n))))
 (let ((?x387 (* 6 (* k k n))))
 (let ((?x385 (* 6 (* c k n))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x111 (+ (* 6 (* k k)) (* 6 (* k m)) ?x177 (* 6 (* c m)) ?x105 ?x227 ?x259 ?x142 (* 6 (* c k)) ?x385 ?x387 ?x389 ?x391 ?x410 ?x427 ?x326 ?x321 ?x324 ?x523 ?x514 ?x371)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x217 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x213 (= ?x217 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x461 (and $x129 $x213 $x265 $x303 (not (= ?x111 0)))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x287 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x238 (and $x129 (= ?x287 (- 4)) $x191 $x297 (not (= ?x435 0)))))
 (rewrite (= $x238 $x461))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x75 (- (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x75 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x84 (- (- ?x78 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x70))))
 (let ((?x86 (- (- ?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71))))
 (let ((?x91 (+ ?x86 (* 6 ?x68 ?x69 ?x71) (* 6 ?x68 ?x69) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x91 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x231 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x287 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x238 (and $x129 (= ?x287 (- 4)) $x191 $x297 (not (= ?x435 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x75 (- (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x75 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x84 (- (- ?x78 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x70))))
 (let ((?x86 (- (- ?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71))))
 (let ((?x91 (+ ?x86 (* 6 ?x68 ?x69 ?x71) (* 6 ?x68 ?x69) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x95 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x91 0))))))
 (rewrite (= $x95 $x238)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x535 (mp (mp @x97 (quant-intro (proof-bind ?x231) (= $x96 $x223)) $x223) (rewrite (= $x223 $x223)) $x223)))
 (let ((@x343 (mp~ (mp @x535 (quant-intro (proof-bind ?x558) (= $x223 $x328)) $x328) (sk (~ $x328 $x283)) $x283)))
 (let ((@x575 (mp @x343 (rewrite (= $x283 $x492)) $x492)))
 (let ((@x561 (and-elim @x575 $x354)))
 (let ((@x468 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x354) $x549)) @x561 $x549)))
 (let (($x450 (>= ?x351 (- 1))))
 (let ((@x210 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x354) $x450)) @x561 $x450)))
 (let (($x390 (<= ?x434 (- 1))))
 (let ((@x472 (and-elim @x575 $x358)))
 (let ((@x564 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x358) $x390)) @x472 $x390)))
 (let (($x240 (>= ?x434 (- 1))))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x358) $x240)) @x472 $x240)))
 (let (($x401 (<= ?x340 (- 4))))
 (let ((@x369 (and-elim @x575 $x373)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x373) $x401)) @x369 $x401)))
 (let (($x248 (>= ?x340 (- 4))))
 (let ((@x167 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x373) $x248)) @x369 $x248)))
 (let (($x681 (<= ?x193 (- 6))))
 (let ((@x471 (and-elim @x575 $x319)))
 (let ((@x115 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x319) $x681)) @x471 $x681)))
 (let (($x104 (>= ?x193 (- 6))))
 (let ((@x499 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x319) $x104)) @x471 $x104)))
 (let (($x198 (not (>= ?x289 0))))
 (let (($x232 (<= ?x289 0)))
 (let ((@x247 (lemma ((_ th-lemma arith) (hypothesis (not $x232)) @x499 @x115 @x499 @x115 false) $x232)))
 (let ((@x202 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x585 (not $x232) $x198)) (and-elim @x575 $x664) (or (not $x232) $x198))))
 ((_ th-lemma arith) (unit-resolution @x202 @x247 $x198) @x499 @x115 @x210 @x468 @x499 @x115 @x210 @x468 @x295 @x564 @x210 @x468 @x295 @x564 @x167 @x332 @x167 @x332 @x295 @x564 @x210 @x468 @x295 @x564 @x210 @x468 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        19
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           10
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             245
 :arith-nonlinear-bounds    7
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              9
 :arith-row-summations      11
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 9
 :del-clause                16
 :final-checks              8
 :max-memory                19.62
 :memory                    19.12
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                520844
 :num-checks                1
 :propagations              12
 :rlimit-count              5770
 :time                      0.01
 :total-time                0.02)
