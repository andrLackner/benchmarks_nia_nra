unsat
((set-logic NIA)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!00 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun k!10 () Int)
(proof
(let ((?x155 (+ k!10 (* (- 1) (* u!5 x!3)) k!00 (* (- 1) (* y!2 v!4)))))
 (let (($x151 (>= ?x155 0)))
 (let (($x157 (= ?x155 0)))
 (let ((?x147 (* y!2 v!4)))
 (let ((?x65 (* (- 1) k!00)))
 (let ((?x101 (* u!5 x!3)))
 (let ((?x121 (* (- 1) k!10)))
 (let ((?x156 (+ ?x121 ?x101 ?x65 ?x147)))
 (let ((?x400 (* (- 1) x!3)))
 (let ((?x311 (+ y!2 ?x400)))
 (let ((?x404 (+ u!5 v!4)))
 (let ((?x307 (* ?x404 ?x404 ?x404 ?x404 ?x311 ?x311 ?x311 ?x311 ?x311 ?x311 ?x311 ?x156 v!4 v!4 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let (($x305 (= ?x307 0)))
 (let (($x306 (not $x305)))
 (let ((?x165 (* ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x156 y!2 y!2 y!2 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5)))
 (let (($x172 (= ?x165 0)))
 (let (($x319 (or (not $x172) $x306)))
 (let (($x320 (and $x157 $x319)))
 (let ((?x413 (+ ?x101 (* v!4 y!2) ?x121 ?x65)))
 (let ((?x399 (+ ?x400 y!2)))
 (let ((?x398 (* ?x404 ?x404 ?x404 ?x404 ?x399 ?x399 ?x399 ?x399 ?x399 ?x399 ?x399 ?x413 v!4 v!4 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let ((?x403 (* ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x413 y!2 y!2 y!2 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5)))
 (let (($x390 (and (= ?x413 0) (or (not (= ?x403 0)) (not (= ?x398 0))))))
 (let (($x111 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x65 (* (- 1) k!00)))
 (let ((?x121 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x359 (+ ?x33 ?x34 ?x121 ?x65)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x91 (+ ?x83 y)))
 (let ((?x51 (+ u v)))
 (let ((?x388 (* ?x51 ?x51 ?x51 ?x51 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x359 v v v v v v v v)))
 (let ((?x173 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x359 y y y y y y y u u u u)))
 (and (= ?x359 0) (or (not (= ?x173 0)) (not (= ?x388 0)))))))))))))) :qid k!29))
 ))
 (let (($x105 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x121 (* (- 1) k!10)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x117 (+ y ?x83)))
 (let ((?x85 (* ?x117 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x65 (* (- 1) k!00)))
 (let ((?x80 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ ?x65 ?x52 ?x85 ?x121) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (+ x (* (- 1) y)) u)))
 (let ((?x102 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x65 ?x84 ?x45 ?x121) y y y y y y y u u u u)))
 (let (($x89 (or (not (= ?x102 0)) (not (= ?x80 0)))))
 (let ((?x138 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x138 0) $x89))))))))))))))) :qid k!29))
 ))
 (let ((?x112 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x65 (* (- 1) k!00)))
 (let ((?x121 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x359 (+ ?x33 ?x34 ?x121 ?x65)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x91 (+ ?x83 y)))
 (let ((?x51 (+ u v)))
 (let ((?x388 (* ?x51 ?x51 ?x51 ?x51 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x359 v v v v v v v v)))
 (let ((?x173 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x359 y y y y y y y u u u u)))
 (let (($x451 (and (= ?x359 0) (or (not (= ?x173 0)) (not (= ?x388 0))))))
 (let ((?x117 (+ y ?x83)))
 (let ((?x80 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ ?x65 (* ?x51 x) (* ?x117 v) ?x121) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (+ x (* (- 1) y)) u)))
 (let ((?x102 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x65 ?x84 ?x45 ?x121) y y y y y y y u u u u)))
 (let (($x89 (or (not (= ?x102 0)) (not (= ?x80 0)))))
 (let ((?x138 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x75 (and (= ?x138 0) $x89)))
 (rewrite (= $x75 $x451)))))))))))))))))))))))
 ))
 (let (($x79 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x121 (* (- 1) k!10)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x117 (+ y ?x83)))
 (let ((?x85 (* ?x117 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x65 (* (- 1) k!00)))
 (let ((?x80 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ ?x65 ?x52 ?x85 ?x121) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (+ x (* (- 1) y)) u)))
 (let ((?x102 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x65 ?x84 ?x45 ?x121) y y y y y y y u u u u)))
 (let (($x89 (or (not (= ?x102 0)) (not (= ?x80 0)))))
 (and (= (+ ?x65 (* x u) (* y v) ?x121) 0) $x89)))))))))))))) :qid k!29))
 ))
 (let ((?x338 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x121 (* (- 1) k!10)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x117 (+ y ?x83)))
 (let ((?x85 (* ?x117 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x65 (* (- 1) k!00)))
 (let ((?x80 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ ?x65 ?x52 ?x85 ?x121) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (+ x (* (- 1) y)) u)))
 (let ((?x102 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x65 ?x84 ?x45 ?x121) y y y y y y y u u u u)))
 (let (($x89 (or (not (= ?x102 0)) (not (= ?x80 0)))))
 (let ((?x138 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x75 (and (= ?x138 0) $x89)))
 (let (($x108 (and (= (+ ?x65 (* x u) (* y v) ?x121) 0) $x89)))
 (rewrite (= $x108 $x75)))))))))))))))))))
 ))
 (let (($x88 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x117 (+ y ?x83)))
 (let ((?x85 (* ?x117 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x341 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ ?x71 ?x52 ?x85 ?x87) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (+ x (* (- 1) y)) u)))
 (let ((?x109 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x71 ?x84 ?x45 ?x87) y y y y y y y u u u u)))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x109 0)) (not (= ?x341 0))))))))))))))))) :qid k!29))
 ))
 (let ((?x123 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x121 (* (- 1) k!10)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x117 (+ y ?x83)))
 (let ((?x85 (* ?x117 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x65 (* (- 1) k!00)))
 (let ((?x80 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ ?x65 ?x52 ?x85 ?x121) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (+ x (* (- 1) y)) u)))
 (let ((?x102 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x65 ?x84 ?x45 ?x121) y y y y y y y u u u u)))
 (let (($x89 (or (not (= ?x102 0)) (not (= ?x80 0)))))
 (let (($x108 (and (= (+ ?x65 (* x u) (* y v) ?x121) 0) $x89)))
 (let ((?x341 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ (* (- 1) (* u00 x00)) ?x52 ?x85 (* (- 1) (* v00 y00))) v v v v v v v v)))
 (let ((?x109 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ (* (- 1) (* u00 x00)) ?x84 ?x45 (* (- 1) (* v00 y00))) y y y y y y y u u u u)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x114 (* y v)))
 (let ((?x113 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x362 (and (= (+ ?x71 ?x113 ?x114 ?x87) 0) (or (not (= ?x109 0)) (not (= ?x341 0))))))
 (rewrite (= $x362 $x108)))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x51 (+ u v)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) (* ?x51 x) (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v v v ?x53 ?x53 ?x53 ?x51 v v ?x53 ?x53 ?x53 ?x51 v v v ?x53)))
 (let ((?x44 (+ v u)))
 (let ((?x47 (- (+ (* ?x29 u00 x00) (* u (- x y)) (* ?x44 y)) ?x38)))
 (let ((?x48 (* ?x47 ?x29 u u ?x44 ?x44 ?x44 y y y u ?x44 ?x44 y y y u ?x44 ?x44 ?x44 y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))))))))) :qid k!29))
 ))
 (let ((?x132 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x117 (+ y ?x83)))
 (let ((?x85 (* ?x117 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x341 (* ?x51 ?x51 ?x51 ?x51 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 ?x117 (+ ?x71 ?x52 ?x85 ?x87) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (+ x (* (- 1) y)) u)))
 (let ((?x109 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x71 ?x84 ?x45 ?x87) y y y y y y y u u u u)))
 (let (($x362 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x109 0)) (not (= ?x341 0))))))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v v v ?x53 ?x53 ?x53 ?x51 v v ?x53 ?x53 ?x53 ?x51 v v v ?x53)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u (- x y)) ?x45) ?x38) ?x29 u u ?x44 ?x44 ?x44 y y y u ?x44 ?x44 y y y u ?x44 ?x44 ?x44 y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x362)))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x66 (mp (mp @x63 (quant-intro (proof-bind ?x132) (= $x62 $x88)) $x88) (rewrite (= $x88 $x88)) $x88)))
 (let ((@x67 (mp (mp @x66 (quant-intro (proof-bind ?x123) (= $x88 $x79)) $x79) (quant-intro (proof-bind ?x338) (= $x79 $x105)) $x105)))
 (let ((@x347 (mp~ (mp @x67 (quant-intro (proof-bind ?x112) (= $x105 $x111)) $x111) (sk (~ $x111 $x390)) $x390)))
 (let ((@x317 (mp @x347 (rewrite (= $x390 $x320)) $x320)))
 (let ((@x315 (and-elim @x317 $x157)))
 (let ((@x159 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x157) $x151)) @x315 $x151)))
 (let (($x150 (<= ?x155 0)))
 (let ((@x312 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x157) $x150)) @x315 $x150)))
 (let (($x409 (not (<= ?x307 0))))
 (let (($x161 (>= ?x307 0)))
 (let (($x350 (>= ?x165 0)))
 (let (($x153 (<= ?x165 0)))
 (let ((@x340 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x172 (not $x153) (not $x350))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x153)) @x312 @x159 false) $x153) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x350)) @x312 @x159 false) $x350) $x172)))
 (let ((@x333 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x305 $x409 (not $x161))) (unit-resolution (and-elim @x317 $x319) @x340 $x306) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x161)) @x312 @x159 false) $x161) $x409)))
 ((_ th-lemma arith farkas 1 1 1) @x333 @x312 @x159 false))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             80
 :arith-nonlinear-horner    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 15
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.52
 :memory                    3.12
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                1079098
 :num-checks                1
 :propagations              14
 :rlimit-count              1532
 :time                      0.01
 :total-time                0.02)
