unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x93 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x197 (>= ?x93 (- 6))))
 (let (($x198 (= ?x93 (- 6))))
 (let ((?x402 (+ k!2 c!3)))
 (let ((?x404 (+ m!1 k!2)))
 (let ((?x235 (+ 6 m!1)))
 (let ((?x87 (+ 1 n!0)))
 (let ((?x236 (* 18 n!0)))
 (let ((?x249 (* n!0 n!0)))
 (let ((?x146 (* 18 ?x249)))
 (let ((?x141 (* 6 (* n!0 n!0 n!0))))
 (let ((?x323 (+ 6 ?x141 (* 3 (* n!0 n!0 m!1)) ?x146 ?x236 m!1 (* n!0 n!0 n!0 m!1) (* 3 (* n!0 m!1)) (* ?x87 ?x87 ?x87 ?x235 ?x404 ?x404 ?x402 ?x402 ?x402))))
 (let ((?x310 (* ?x323 (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x126 (= ?x310 0)))
 (let (($x309 (not $x126)))
 (let (($x289 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 1) k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x259 (* k!2 k!2)))
 (let ((?x273 (+ (* 9 n!0) (* (- 5) k!2) ?x259 (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x311 (and $x198 (= ?x273 (- 4)) $x289 (= (+ (* 3 ?x249) (* 3 n!0) (* (- 1) k!2)) (- 1)) $x309)))
 (let ((?x242 (+ c!3 k!2)))
 (let ((?x148 (+ k!2 m!1)))
 (let ((?x162 (+ 6 m!1 ?x236 (* ?x87 ?x87 ?x87 ?x235 ?x148 ?x148 ?x242 ?x242 ?x242) ?x146 (* 3 (* m!1 n!0 n!0)) (* 3 (* m!1 n!0)) (* m!1 n!0 n!0 n!0) ?x141)))
 (let (($x427 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x107 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x259) (* 9 (* c!3 n!0)))))
 (let (($x340 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x107 4) $x427 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x249)) 1) (not (= (* ?x162 (+ (- 6) m!1 (* (- 6) n!0))) 0)))))
 (let (($x334 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x430 (* 6 (* n n n))))
 (let ((?x429 (* m n n n)))
 (let ((?x400 (* 3 (* m n))))
 (let ((?x399 (* 3 (* m n n))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x128 (* ?x314 ?x314 ?x314 ?x358 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x251 (+ 6 m (* 18 n) ?x128 (* 18 (* n n)) ?x399 ?x400 ?x429 ?x430)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x251 ?x114) 0)))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x119 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x128 (* ?x314 ?x314 ?x314 ?x358 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let (($x140 (not (= (* (+ ?x128 (* ?x314 ?x314 ?x314 ?x358)) ?x114) 0))))
 (let (($x133 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x210 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x210 $x133 $x140))))))))))))))))) :qid k!34))
 ))
 (let ((?x352 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x430 (* 6 (* n n n))))
 (let ((?x429 (* m n n n)))
 (let ((?x400 (* 3 (* m n))))
 (let ((?x399 (* 3 (* m n n))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x128 (* ?x314 ?x314 ?x314 ?x358 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x251 (+ 6 m (* 18 n) ?x128 (* 18 (* n n)) ?x399 ?x400 ?x429 ?x430)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x266 (and $x125 $x209 $x261 $x299 (not (= (* ?x251 ?x114) 0)))))
 (let (($x140 (not (= (* (+ ?x128 (* ?x314 ?x314 ?x314 ?x358)) ?x114) 0))))
 (let (($x133 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x210 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x208 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x210 $x133 $x140)))
 (rewrite (= $x208 $x266)))))))))))))))))))))))))))))
 ))
 (let (($x143 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x128 (* ?x314 ?x314 ?x314 ?x358 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let (($x140 (not (= (* (+ ?x128 (* ?x314 ?x314 ?x314 ?x358)) ?x114) 0))))
 (let (($x133 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x359 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 (= ?x359 (- 4)) $x227 $x133 $x140))))))))))))))) :qid k!34))
 ))
 (let ((?x142 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x128 (* ?x314 ?x314 ?x314 ?x358 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let (($x140 (not (= (* (+ ?x128 (* ?x314 ?x314 ?x314 ?x358)) ?x114) 0))))
 (let (($x133 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x210 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x208 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x210 $x133 $x140)))
 (let (($x227 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x359 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x159 (and $x125 (= ?x359 (- 4)) $x227 $x133 $x140)))
 (rewrite (= $x159 $x208))))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x72 (+ c k)))
 (let ((?x77 (+ (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69) (* ?x74 ?x69 ?x69 ?x69))))
 (let (($x79 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x79)))))))))))))))) :qid k!34))
 ))
 (let ((?x150 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x128 (* ?x314 ?x314 ?x314 ?x358 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let (($x140 (not (= (* (+ ?x128 (* ?x314 ?x314 ?x314 ?x358)) ?x114) 0))))
 (let (($x133 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x359 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x159 (and $x125 (= ?x359 (- 4)) $x227 $x133 $x140)))
 (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x77 (+ (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69) (* ?x74 ?x69 ?x69 ?x69))))
 (let (($x79 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x79)))))
 (rewrite (= $x82 $x159))))))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x207 (mp (mp @x84 (quant-intro (proof-bind ?x150) (= $x83 $x143)) $x143) (rewrite (= $x143 $x143)) $x143)))
 (let ((@x190 (mp (mp @x207 (quant-intro (proof-bind ?x142) (= $x143 $x119)) $x119) (quant-intro (proof-bind ?x352) (= $x119 $x334)) $x334)))
 (let ((@x406 (mp (mp~ @x190 (sk (~ $x334 $x340)) $x340) (rewrite (= $x340 $x311)) $x311)))
 (let ((@x338 (and-elim @x406 $x198)))
 (let ((@x196 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x198) $x197)) @x338 $x197)))
 (let (($x199 (<= ?x93 (- 6))))
 (let ((@x109 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x198) $x199)) @x338 $x199)))
 (let (($x173 (not (>= ?x310 0))))
 (let (($x121 (<= ?x310 0)))
 (let ((@x231 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x126 (not $x121) $x173)) (and-elim @x406 $x309) (or (not $x121) $x173))))
 (let ((@x135 (unit-resolution @x231 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x121)) @x109 @x196 false) $x121) $x173)))
 ((_ th-lemma arith farkas 1 1 1) @x135 @x109 @x196 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        23
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             147
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    20
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      24
 :arith-tableau-max-columns 36
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.69
 :memory                    3.12
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                4769009
 :num-checks                1
 :propagations              12
 :rlimit-count              52662
 :time                      0.05
 :total-time                0.05)
