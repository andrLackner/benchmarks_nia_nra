unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x275 (* r!1 r!1)))
 (let ((?x90 (* 2 x!0)))
 (let ((?x240 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x254 (+ r00 ?x85 ?x101 ?x240 ?x90 ?x275)))
 (let (($x156 (<= ?x254 0)))
 (let (($x258 (= ?x254 0)))
 (let ((?x223 (* (- 1) ?x275)))
 (let ((?x304 (* (- 1) (* r!1 r!1 r!1))))
 (let ((?x303 (* (- 1) (* r!1 x!0 x!0))))
 (let ((?x308 (* 2 (* r!1 x!0))))
 (let ((?x239 (* 2 (* r!1 r!1 x!0))))
 (let ((?x224 (* (- 1) x!0)))
 (let ((?x78 (+ ?x240 x!0)))
 (let ((?x242 (+ 1 r!1)))
 (let ((?x86 (* ?x242 ?x242 ?x242 ?x78 ?x78 ?x78)))
 (let ((?x325 (* (- 1) (* x!0 x!0))))
 (let ((?x229 (* (+ ?x325 ?x86 r!1 ?x224 ?x239 ?x308 ?x303 ?x304 ?x223) ?x254)))
 (let (($x98 (= ?x229 0)))
 (let (($x236 (not $x98)))
 (let (($x290 (and $x258 $x236)))
 (let ((?x89 (* (+ r!1 ?x224 ?x223 ?x86 ?x239 ?x308 ?x304 ?x303 ?x325) (+ ?x240 ?x90 r00 ?x275 ?x85 ?x101))))
 (let (($x248 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x223 (* 2 x00) ?x36) 0)))
 (let (($x169 (and $x248 (not (= ?x89 0)))))
 (let (($x109 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x172 (+ ?x64 x)))
 (let ((?x124 (+ 1 r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x321 (+ r ?x215 ?x117 (* ?x124 ?x124 ?x124 ?x172 ?x172 ?x172) (* 2 (* r r x)) (* 2 (* r x)) (* (- 1) (* r r r)) (* (- 1) (* r x x)) (* (- 1) (* x x)))))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (and $x119 (not (= (* ?x321 ?x107) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x70 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x235 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x68 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x64 (* (- 1) r)))
 (let ((?x226 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x215 (* (- 1) x)))
 (let (($x104 (= (* (+ ?x215 r (* ?x124 ?x124 ?x124 ?x226 ?x226 ?x226) ?x68) ?x235) 0)))
 (let (($x139 (not $x104)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x139)))))))))))))))))) :qid k!26))
 ))
 (let ((?x231 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x172 (+ ?x64 x)))
 (let ((?x124 (+ 1 r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x321 (+ r ?x215 ?x117 (* ?x124 ?x124 ?x124 ?x172 ?x172 ?x172) (* 2 (* r r x)) (* 2 (* r x)) (* (- 1) (* r r r)) (* (- 1) (* r x x)) (* (- 1) (* x x)))))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (let (($x154 (and $x119 (not (= (* ?x321 ?x107) 0)))))
 (let ((?x75 (+ ?x215 r (* ?x124 ?x124 ?x124 (+ x ?x64) (+ x ?x64) (+ x ?x64)) (* (- 1) (* ?x124 (+ x ?x64) (+ x ?x64))))))
 (let ((?x97 (* ?x75 (+ (- 1) (* (- 3) r) r00 (* ?x124 ?x124) ?x32 ?x85 ?x101))))
 (let (($x139 (not (= ?x97 0))))
 (let (($x186 (= (+ r (* (- 1) r00) ?x117 (* (- 2) x) (* 2 x00) ?x36) 0)))
 (let (($x190 (and $x186 $x139)))
 (rewrite (= $x190 $x154))))))))))))))))))))))
 ))
 (let (($x232 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x235 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x68 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x64 (* (- 1) r)))
 (let ((?x226 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x215 (* (- 1) x)))
 (let (($x104 (= (* (+ ?x215 r (* ?x124 ?x124 ?x124 ?x226 ?x226 ?x226) ?x68) ?x235) 0)))
 (let (($x139 (not $x104)))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x139))))))))))))) :qid k!26))
 ))
 (let ((?x79 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x235 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x68 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x64 (* (- 1) r)))
 (let ((?x226 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x215 (* (- 1) x)))
 (let (($x104 (= (* (+ ?x215 r (* ?x124 ?x124 ?x124 ?x226 ?x226 ?x226) ?x68) ?x235) 0)))
 (let (($x139 (not $x104)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x190 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x139)))
 (let (($x181 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) $x139)))
 (rewrite (= $x181 $x190))))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x53 (- (+ (* (- 1) ?x44) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44)) (* ?x41 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* ?x48 ?x53) 0))))))))))) :qid k!26))
 ))
 (let ((?x260 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x235 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x68 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x64 (* (- 1) r)))
 (let ((?x226 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x215 (* (- 1) x)))
 (let (($x104 (= (* (+ ?x215 r (* ?x124 ?x124 ?x124 ?x226 ?x226 ?x226) ?x68) ?x235) 0)))
 (let (($x139 (not $x104)))
 (let (($x181 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x139)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x53 (- (+ (* (- 1) ?x44) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44)) (* ?x41 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= (* ?x48 ?x53) 0))))))
 (rewrite (= $x58 $x181)))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x318 (mp (mp @x60 (quant-intro (proof-bind ?x260) (= $x59 $x232)) $x232) (rewrite (= $x232 $x232)) $x232)))
 (let ((@x279 (mp (mp @x318 (quant-intro (proof-bind ?x79) (= $x232 $x70)) $x70) (quant-intro (proof-bind ?x231) (= $x70 $x109)) $x109)))
 (let ((@x286 (mp (mp~ @x279 (sk (~ $x109 $x169)) $x169) (rewrite (= $x169 $x290)) $x290)))
 (let ((@x270 (and-elim @x286 $x258)))
 (let ((@x159 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x258) $x156)) @x270 $x156)))
 (let (($x125 (>= ?x254 0)))
 (let ((@x230 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x258) $x125)) @x270 $x125)))
 (let (($x153 (not (>= ?x229 0))))
 (let (($x146 (<= ?x229 0)))
 (let ((@x62 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x98 (not $x146) $x153)) (and-elim @x286 $x236) (or (not $x146) $x153))))
 (let ((@x63 (unit-resolution @x62 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x146)) @x230 @x159 false) $x146) $x153)))
 ((_ th-lemma arith farkas 1 1 1) @x63 @x230 @x159 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            4
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.45
 :memory                    3.05
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1030298
 :num-checks                1
 :propagations              4
 :rlimit-count              1327
 :time                      0.01
 :total-time                0.01)
