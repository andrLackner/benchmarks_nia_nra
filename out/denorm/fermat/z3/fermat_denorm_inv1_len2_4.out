unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x624 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x475 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) (* (- 4) r!2) (* (- 1) (* v!0 v!0)) (* 2 v!0) ?x624)))
 (let (($x422 (>= ?x475 0)))
 (let (($x342 (= ?x475 0)))
 (let ((?x455 (* (- 1) ?x624)))
 (let ((?x436 (* (- 2) v!0)))
 (let ((?x380 (* v!0 v!0)))
 (let ((?x390 (* 4 r!2)))
 (let ((?x447 (* 2 u!1)))
 (let ((?x190 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x114 (* (- 2) u00)))
 (let ((?x98 (* (- 4) r00)))
 (let ((?x425 (+ ?x98 ?x114 ?x41 ?x46 ?x190 ?x447 ?x390 ?x380 ?x436 ?x455)))
 (let ((?x333 (* (- 3) (* r!2 r!2 v!0 v!0 v!0))))
 (let ((?x330 (* 12 (* r!2 v!0 v!0))))
 (let ((?x609 (* (- 12) (* r!2 r!2 v!0 v!0))))
 (let ((?x427 (* 12 (* r!2 v!0 v!0 v!0))))
 (let ((?x606 (* r!2 r!2 r!2 v!0 v!0)))
 (let ((?x619 (* (- 4) (* v!0 v!0 v!0 v!0))))
 (let ((?x632 (* 4 (* r!2 r!2 r!2 v!0))))
 (let ((?x419 (* 4 v!0)))
 (let ((?x625 (* 4 (* r!2 r!2 r!2))))
 (let ((?x93 (* 3 (* r!2 v!0 v!0 v!0 v!0))))
 (let ((?x182 (* (- 4) (* v!0 v!0 v!0))))
 (let ((?x469 (* (- 12) (* r!2 r!2 v!0))))
 (let ((?x372 (* (- 1) (* v!0 v!0 v!0 v!0 v!0))))
 (let ((?x462 (+ 4 ?x372 ?x469 ?x182 ?x93 ?x380 ?x625 ?x419 ?x632 ?x619 ?x606 ?x427 ?x609 ?x330 ?x333)))
 (let ((?x463 (* ?x462 ?x425)))
 (let (($x434 (= ?x463 0)))
 (let (($x329 (not $x434)))
 (let ((?x370 (* u!1 u!1 u!1 v!0 v!0)))
 (let ((?x337 (+ ?x370 ?x380 (* 3 (* u!1 r!2 r!2 v!0 v!0)) (* 3 (* u!1 u!1 r!2 v!0 v!0)) ?x606)))
 (let ((?x344 (* ?x337 ?x425)))
 (let (($x339 (= ?x344 0)))
 (let (($x395 (or (not $x339) $x329)))
 (let (($x486 (and $x342 $x395)))
 (let ((?x258 (+ ?x390 ?x447 ?x436 ?x98 ?x114 ?x41 ?x455 ?x380 ?x46 ?x190)))
 (let ((?x322 (+ 4 ?x419 ?x380 ?x606 ?x625 ?x469 ?x330 ?x182 ?x632 ?x609 ?x427 ?x619 ?x333 ?x93 ?x372)))
 (let ((?x377 (+ ?x380 ?x606 (* 3 (* r!2 r!2 u!1 v!0 v!0)) (* 3 (* r!2 u!1 u!1 v!0 v!0)) ?x370)))
 (let (($x440 (and (= ?x258 0) (or (not (= (* ?x377 ?x258) 0)) (not (= (* ?x322 ?x258) 0))))))
 (let (($x394 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x190 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x168 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x114 (* (- 2) u00)))
 (let ((?x98 (* (- 4) r00)))
 (let ((?x144 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x196 (+ ?x28 ?x36 ?x144 ?x98 ?x114 ?x41 ?x168 ?x45 ?x46 ?x190)))
 (let ((?x508 (* (- 1) (* v v v v v))))
 (let ((?x525 (* 3 (* r v v v v))))
 (let ((?x523 (* (- 3) (* r r v v v))))
 (let ((?x518 (* 4 (* r r r v))))
 (let ((?x401 (* (- 4) (* v v v))))
 (let ((?x517 (* 12 (* r v v))))
 (let ((?x515 (* (- 12) (* r r v))))
 (let ((?x357 (* 4 (* r r r))))
 (let ((?x343 (* r r r v v)))
 (let ((?x292 (* 4 v)))
 (let ((?x536 (+ 4 ?x292 ?x45 ?x343 ?x357 ?x515 ?x517 ?x401 ?x518 (* (- 12) (* r r v v)) (* 12 (* r v v v)) (* (- 4) (* v v v v)) ?x523 ?x525 ?x508)))
 (let ((?x638 (+ ?x45 ?x343 (* 3 (* r r u v v)) (* 3 (* r u u v v)) (* u u u v v))))
 (let (($x398 (not (= (* ?x638 ?x196) 0))))
 (let (($x201 (= ?x196 0)))
 (and $x201 (or $x398 (not (= (* ?x536 ?x196) 0))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x169 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x190 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x168 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x114 (* (- 2) u00)))
 (let ((?x98 (* (- 4) r00)))
 (let ((?x144 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x196 (+ ?x28 ?x36 ?x144 ?x98 ?x114 ?x41 ?x168 ?x45 ?x46 ?x190)))
 (let ((?x508 (* (- 1) (* v v v v v))))
 (let ((?x525 (* 3 (* r v v v v))))
 (let ((?x523 (* (- 3) (* r r v v v))))
 (let ((?x518 (* 4 (* r r r v))))
 (let ((?x401 (* (- 4) (* v v v))))
 (let ((?x517 (* 12 (* r v v))))
 (let ((?x515 (* (- 12) (* r r v))))
 (let ((?x357 (* 4 (* r r r))))
 (let ((?x343 (* r r r v v)))
 (let ((?x292 (* 4 v)))
 (let ((?x121 (+ 4 ?x292 ?x45 (* 2 (* v r r (* (- 1) v))) ?x343 (* 2 (* v r (* (- 1) v) (* (- 1) v))) ?x357 ?x515 (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v))) (* 2 (* v (* (- 1) v) r (* (- 1) v))) ?x517 ?x401 ?x518 (* (- 6) (* r r v v)) (* 2 (* v (* (- 1) v) (* (- 1) v) r)) (* 6 (* r v v v)) (* 2 (* v r (* (- 1) v) r)) (* (- 2) (* v v v v)) ?x523 ?x525 ?x508 (* 2 (* v (* (- 1) v) r r)))))
 (let ((?x638 (+ ?x45 ?x343 (* 3 (* r r u v v)) (* 3 (* r u u v v)) (* u u u v v))))
 (let (($x398 (not (= (* ?x638 ?x196) 0))))
 (let (($x201 (= ?x196 0)))
 (and $x201 (or $x398 (not (= (* ?x121 ?x196) 0))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x209 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x190 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x168 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x114 (* (- 2) u00)))
 (let ((?x98 (* (- 4) r00)))
 (let ((?x144 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x196 (+ ?x28 ?x36 ?x144 ?x98 ?x114 ?x41 ?x168 ?x45 ?x46 ?x190)))
 (let ((?x508 (* (- 1) (* v v v v v))))
 (let ((?x525 (* 3 (* r v v v v))))
 (let ((?x523 (* (- 3) (* r r v v v))))
 (let ((?x518 (* 4 (* r r r v))))
 (let ((?x401 (* (- 4) (* v v v))))
 (let ((?x517 (* 12 (* r v v))))
 (let ((?x515 (* (- 12) (* r r v))))
 (let ((?x357 (* 4 (* r r r))))
 (let ((?x343 (* r r r v v)))
 (let ((?x292 (* 4 v)))
 (let ((?x536 (+ 4 ?x292 ?x45 ?x343 ?x357 ?x515 ?x517 ?x401 ?x518 (* (- 12) (* r r v v)) (* 12 (* r v v v)) (* (- 4) (* v v v v)) ?x523 ?x525 ?x508)))
 (let ((?x638 (+ ?x45 ?x343 (* 3 (* r r u v v)) (* 3 (* r u u v v)) (* u u u v v))))
 (let (($x398 (not (= (* ?x638 ?x196) 0))))
 (let (($x201 (= ?x196 0)))
 (let (($x478 (and $x201 (or $x398 (not (= (* ?x536 ?x196) 0))))))
 (let ((?x121 (+ 4 ?x292 ?x45 (* 2 (* v r r (* (- 1) v))) ?x343 (* 2 (* v r (* (- 1) v) (* (- 1) v))) ?x357 ?x515 (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v))) (* 2 (* v (* (- 1) v) r (* (- 1) v))) ?x517 ?x401 ?x518 (* (- 6) (* r r v v)) (* 2 (* v (* (- 1) v) (* (- 1) v) r)) (* 6 (* r v v v)) (* 2 (* v r (* (- 1) v) r)) (* (- 2) (* v v v v)) ?x523 ?x525 ?x508 (* 2 (* v (* (- 1) v) r r)))))
 (let (($x250 (and $x201 (or $x398 (not (= (* ?x121 ?x196) 0))))))
 (rewrite (= $x250 $x478)))))))))))))))))))))))))))))))))
 ))
 (let (($x285 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x190 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x163 (+ 2 v)))
 (let ((?x423 (* ?x163 ?x163)))
 (let ((?x43 (* u u)))
 (let ((?x168 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x114 (* (- 2) u00)))
 (let ((?x98 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x444 (+ (- 4) ?x28 (* (- 6) v) ?x98 ?x114 ?x36 ?x41 ?x168 ?x423 ?x46 ?x190)))
 (let ((?x127 (* (- 1) v)))
 (let ((?x131 (+ r ?x127)))
 (let ((?x45 (* v v)))
 (let ((?x144 (* (- 2) v)))
 (let ((?x484 (+ 4 ?x28 (* 6 u) ?x98 ?x114 ?x144 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x190)))
 (let ((?x84 (+ ?x45 (* (+ r u) (+ r u) (+ r u) v v))))
 (let (($x272 (or (not (= (* ?x84 ?x484) 0)) (not (= (* (+ ?x423 (* ?x163 ?x163 ?x131 ?x131 ?x131)) ?x444) 0)))))
 (and (= (+ ?x28 ?x98 ?x114 ?x36 ?x144 ?x41 ?x168 ?x45 ?x46 ?x190) 0) $x272))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x176 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x190 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x168 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x114 (* (- 2) u00)))
 (let ((?x98 (* (- 4) r00)))
 (let ((?x144 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x196 (+ ?x28 ?x36 ?x144 ?x98 ?x114 ?x41 ?x168 ?x45 ?x46 ?x190)))
 (let ((?x508 (* (- 1) (* v v v v v))))
 (let ((?x525 (* 3 (* r v v v v))))
 (let ((?x523 (* (- 3) (* r r v v v))))
 (let ((?x518 (* 4 (* r r r v))))
 (let ((?x401 (* (- 4) (* v v v))))
 (let ((?x517 (* 12 (* r v v))))
 (let ((?x515 (* (- 12) (* r r v))))
 (let ((?x357 (* 4 (* r r r))))
 (let ((?x343 (* r r r v v)))
 (let ((?x292 (* 4 v)))
 (let ((?x121 (+ 4 ?x292 ?x45 (* 2 (* v r r (* (- 1) v))) ?x343 (* 2 (* v r (* (- 1) v) (* (- 1) v))) ?x357 ?x515 (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v))) (* 2 (* v (* (- 1) v) r (* (- 1) v))) ?x517 ?x401 ?x518 (* (- 6) (* r r v v)) (* 2 (* v (* (- 1) v) (* (- 1) v) r)) (* 6 (* r v v v)) (* 2 (* v r (* (- 1) v) r)) (* (- 2) (* v v v v)) ?x523 ?x525 ?x508 (* 2 (* v (* (- 1) v) r r)))))
 (let ((?x638 (+ ?x45 ?x343 (* 3 (* r r u v v)) (* 3 (* r u u v v)) (* u u u v v))))
 (let (($x398 (not (= (* ?x638 ?x196) 0))))
 (let (($x201 (= ?x196 0)))
 (let (($x250 (and $x201 (or $x398 (not (= (* ?x121 ?x196) 0))))))
 (let ((?x163 (+ 2 v)))
 (let ((?x423 (* ?x163 ?x163)))
 (let ((?x444 (+ (- 4) ?x28 (* (- 6) v) ?x98 ?x114 ?x36 ?x41 ?x168 ?x423 ?x46 ?x190)))
 (let ((?x127 (* (- 1) v)))
 (let ((?x131 (+ r ?x127)))
 (let ((?x484 (+ 4 ?x28 (* 6 u) ?x98 ?x114 ?x144 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x190)))
 (let ((?x84 (+ ?x45 (* (+ r u) (+ r u) (+ r u) v v))))
 (let (($x272 (or (not (= (* ?x84 ?x484) 0)) (not (= (* (+ ?x423 (* ?x163 ?x163 ?x131 ?x131 ?x131)) ?x444) 0)))))
 (let (($x615 (and (= (+ ?x28 ?x98 ?x114 ?x36 ?x144 ?x41 ?x168 ?x45 ?x46 ?x190) 0) $x272)))
 (rewrite (= $x615 $x250))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((r Int) (u Int) (v Int) )(! (let ((?x45 (* v v)))
 (let ((?x84 (+ ?x45 (* (+ r u) (+ r u) (+ r u) v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x81 (+ (- (+ (- ?x76 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x62 (* ?x57 ?x57)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) ?x62 ?x46) ?x48) (+ ?x62 (* ?x52 ?x52 ?x52 ?x57 ?x57)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= (* (- ?x81 ?x48) ?x84) 0)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x105 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x190 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x163 (+ 2 v)))
 (let ((?x423 (* ?x163 ?x163)))
 (let ((?x43 (* u u)))
 (let ((?x168 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x114 (* (- 2) u00)))
 (let ((?x98 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x444 (+ (- 4) ?x28 (* (- 6) v) ?x98 ?x114 ?x36 ?x41 ?x168 ?x423 ?x46 ?x190)))
 (let ((?x127 (* (- 1) v)))
 (let ((?x131 (+ r ?x127)))
 (let ((?x45 (* v v)))
 (let ((?x144 (* (- 2) v)))
 (let ((?x484 (+ 4 ?x28 (* 6 u) ?x98 ?x114 ?x144 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x190)))
 (let ((?x84 (+ ?x45 (* (+ r u) (+ r u) (+ r u) v v))))
 (let (($x272 (or (not (= (* ?x84 ?x484) 0)) (not (= (* (+ ?x423 (* ?x163 ?x163 ?x131 ?x131 ?x131)) ?x444) 0)))))
 (let (($x615 (and (= (+ ?x28 ?x98 ?x114 ?x36 ?x144 ?x41 ?x168 ?x45 ?x46 ?x190) 0) $x272)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x81 (+ (- (+ (- ?x76 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x62 (* ?x57 ?x57)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) ?x62 ?x46) ?x48) (+ ?x62 (* ?x52 ?x52 ?x52 ?x57 ?x57)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x89 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= (* (- ?x81 ?x48) ?x84) 0))))))
 (rewrite (= $x89 $x615))))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x442 (mp (mp @x91 (quant-intro (proof-bind ?x105) (= $x90 $x285)) $x285) (rewrite (= $x285 $x285)) $x285)))
 (let ((@x470 (mp (mp @x442 (quant-intro (proof-bind ?x176) (= $x285 $x169)) $x169) (quant-intro (proof-bind ?x209) (= $x169 $x394)) $x394)))
 (let ((@x488 (mp (mp~ @x470 (sk (~ $x394 $x440)) $x440) (rewrite (= $x440 $x486)) $x486)))
 (let ((@x490 (and-elim @x488 $x342)))
 (let ((@x498 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x342) $x422)) @x490 $x422)))
 (let (($x426 (<= ?x475 0)))
 (let ((@x495 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x342) $x426)) @x490 $x426)))
 (let (($x483 (not (<= ?x463 0))))
 (let (($x341 (>= ?x463 0)))
 (let (($x432 (>= ?x344 0)))
 (let (($x431 (<= ?x344 0)))
 (let ((@x510 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x339 (not $x431) (not $x432))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x431)) @x495 @x498 false) $x431) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x432)) @x495 @x498 false) $x432) $x339)))
 (let ((@x511 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x434 $x483 (not $x341))) (unit-resolution (and-elim @x488 $x395) @x510 $x329) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x341)) @x495 @x498 false) $x341) $x483)))
 ((_ th-lemma arith farkas 1 1 1) @x511 @x495 @x498 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        41
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             224
 :arith-nonlinear-bounds    24
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 40
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.62
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1088826
 :num-checks                1
 :propagations              14
 :rlimit-count              3769
 :time                      0.01
 :total-time                0.01)
