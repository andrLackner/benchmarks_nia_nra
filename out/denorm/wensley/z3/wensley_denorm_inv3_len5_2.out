unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x1645 (to_real b!2)))
 (let ((?x66 (to_real y00)))
 (let ((?x1618 (* ?x66 ?x1645)))
 (let ((?x1647 (to_real y!0)))
 (let ((?x1458 (* ?x1645 ?x1647)))
 (let ((?x1460 (* (- 1.0) ?x1458)))
 (let ((?x1390 (to_real d!1)))
 (let ((?x69 (to_real a00)))
 (let ((?x1228 (* ?x69 ?x1390)))
 (let ((?x1218 (* (- (/ 1.0 2.0)) ?x1228)))
 (let ((?x1386 (to_real a!3)))
 (let ((?x1746 (* ?x1386 ?x1390)))
 (let ((?x1739 (* (/ 1.0 2.0) ?x1746)))
 (let ((?x533 (+ ?x1739 ?x1218 ?x1460 ?x1618)))
 (let (($x228 (>= ?x533 0.0)))
 (let ((?x255 (+ (* (- 1.0) (to_real (* y00 b!2))) ?x1618)))
 (let (($x245 (>= ?x255 0.0)))
 (let (($x254 (= ?x255 0.0)))
 (let ((@x1421 (lemma (unit-resolution ((_ th-lemma arith) $x254) (hypothesis (not $x254)) false) $x254)))
 (let ((@x1573 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x254) $x245)) @x1421 $x245)))
 (let ((?x1292 (+ ?x1746 (* (- 1.0) (to_real (* d!1 a!3))))))
 (let (($x1306 (>= ?x1292 0.0)))
 (let (($x1300 (= 0.0 ?x1292)))
 (let ((@x1334 (symm (commutativity (= $x1300 (= ?x1292 0.0))) (= (= ?x1292 0.0) $x1300))))
 (let ((@x1366 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1300) $x1306)) (mp ((_ th-lemma arith) (= ?x1292 0.0)) @x1334 $x1300) $x1306)))
 (let ((?x256 (+ ?x1228 (* (- 1.0) (to_real (* a00 d!1))))))
 (let (($x1798 (<= ?x256 0.0)))
 (let (($x554 (= ?x256 0.0)))
 (let ((@x1364 ((_ th-lemma arith) $x554)))
 (let ((@x1372 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x554) $x1798)) @x1364 $x1798)))
 (let ((?x218 (+ ?x1458 (* (- 1.0) (to_real (* y!0 b!2))))))
 (let (($x1175 (<= ?x218 0.0)))
 (let ((@x1383 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x218 0.0)) $x1175)) ((_ th-lemma arith) (= ?x218 0.0)) $x1175)))
 (let ((?x304 (* a00 d!1)))
 (let ((?x551 (+ ?x304 (* (- 1) (* d!1 a!3)) (* 2 (* y!0 b!2)) (* (- 2) (* y00 b!2)))))
 (let (($x1350 (<= ?x551 0)))
 (let (($x1352 (= 0 ?x551)))
 (let ((@x1411 (symm (commutativity (= $x1352 (= ?x551 0))) (= (= ?x551 0) $x1352))))
 (let (($x531 (= ?x551 0)))
 (let ((?x1800 (* (/ 9.0 32.0) (* ?x1386 ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1363 (* (/ 1.0 64.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645))))
 (let ((?x1380 (* (/ 3.0 32.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1502 (* (- (/ 1.0 4.0)) (* ?x1390 ?x1390 ?x1645 ?x1645 ?x1645))))
 (let ((?x1226 (* (/ 3.0 32.0) (* ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1671 (* (/ 3.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1661 (* (/ 1.0 8.0) (* ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1813 (* (- 1.0) ?x1645)))
 (let ((?x1802 (* (/ 1.0 2.0) (* ?x1390 ?x1645))))
 (let ((?x1422 (* (- (/ 3.0 4.0)) (* ?x1386 ?x1390 ?x1390 ?x1645 ?x1645))))
 (let ((?x1414 (* (- (/ 3.0 4.0)) (* ?x1386 ?x1386 ?x1390 ?x1390 ?x1645))))
 (let ((?x1410 (* (/ 9.0 16.0) (* ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1427 (* (- 1.0) ?x1386)))
 (let ((?x1407 (* (/ 9.0 16.0) (* ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1396 (* (/ 3.0 16.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1824 (* (/ 9.0 32.0) (* ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1388 (* (/ 9.0 32.0) (* ?x1386 ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1375 (* (/ 3.0 64.0) (* ?x1386 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645))))
 (let ((?x1367 (* (/ 3.0 64.0) (* ?x1386 ?x1386 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645))))
 (let ((?x1327 (* (/ 9.0 32.0) (* ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1361 (* (/ 3.0 16.0) (* ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1353 (* (/ 3.0 16.0) (* ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1311 (* (/ 3.0 32.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1569 (* (/ 3.0 16.0) (* ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1317 (* (/ 9.0 64.0) (* ?x1386 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1305 (* (/ 9.0 64.0) (* ?x1386 ?x1386 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1297 (* (/ 3.0 64.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647))))
 (let ((?x1291 (* (/ 3.0 128.0) (* ?x1386 ?x1390 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645))))
 (let ((?x1878 (* (/ 1.0 128.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645))))
 (let ((?x1287 (* (/ 3.0 128.0) (* ?x1386 ?x1386 ?x1390 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645))))
 (let ((?x1275 (* (- (/ 1.0 4.0)) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1390))))
 (let ((?x1269 (* (/ 1.0 16.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x747 (* (/ 3.0 8.0) (* ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1076 (* (/ 1.0 16.0) (* ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1085 (* (/ 3.0 8.0) (* ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x799 (* (/ 1.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645))))
 (let ((?x759 (* (/ 1.0 8.0) (* ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x167 (* (/ 3.0 32.0) (* ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647))))
 (let ((?x1818 (* (/ 1.0 128.0) (* ?x1390 ?x1390 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645))))
 (let ((?x1426 (+ ?x1818 ?x167 ?x759 ?x799 ?x1085 ?x1076 ?x747 ?x1269 ?x1275 ?x1287 ?x1878 ?x1291 ?x1297 ?x1305 ?x1317 ?x1569 ?x1311 ?x1353 ?x1361 ?x1327 ?x1367 ?x1375 ?x1388 ?x1824 ?x1396 ?x1407 ?x1427 ?x1410 ?x1414 ?x1422 ?x1802 ?x1813 ?x1661 ?x1671 ?x1226 ?x1739 ?x1502 ?x1380 ?x1363 ?x1800)))
 (let ((?x1436 (* (+ ?x1218 ?x1460 ?x1618 ?x1739) ?x1426)))
 (let (($x555 (= ?x1436 0.0)))
 (let (($x1430 (not $x555)))
 (let ((?x1470 (* ?x1386 ?x1645 ?x1647)))
 (let ((?x1338 (* (/ 1.0 8.0) (* ?x66 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1346 (* (- (/ 1.0 16.0)) (* ?x69 ?x1386 ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1343 (* (/ 1.0 16.0) (* ?x1386 ?x1386 ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1337 (* (- (/ 1.0 32.0)) (* ?x69 ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1335 (* (/ 1.0 16.0) (* ?x66 ?x1386 ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1333 (* (- (/ 1.0 16.0)) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647 ?x1647))))
 (let ((?x855 (* ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647 ?x1647)))
 (let ((?x1332 (* (/ 1.0 32.0) (* ?x1386 ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1347 (+ ?x1332 (* (- (/ 1.0 8.0)) ?x855) (* (- (/ 1.0 4.0)) (* ?x69 ?x1386 ?x1390 ?x1390)) (* (/ 1.0 2.0) (* ?x66 ?x1386 ?x1390 ?x1645)) (* (- (/ 1.0 2.0)) (* ?x1386 ?x1390 ?x1645 ?x1647)) ?x1333 ?x1335 ?x1337 ?x1343 ?x1346 ?x1338 (* (/ 1.0 4.0) (* ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1645 ?x1647)) (* (- (/ 1.0 8.0)) (* ?x1386 ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1390)) (* (- (/ 1.0 4.0)) (* ?x66 ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1645)) (* (/ 1.0 8.0) (* ?x69 ?x1386 ?x1386 ?x1386 ?x1390 ?x1390 ?x1390)) ?x1470 (* (- (/ 1.0 2.0)) (* ?x1386 ?x1386 ?x1390)) (* (- 1.0) (* ?x66 ?x1386 ?x1645)) (* (/ 1.0 2.0) (* ?x69 ?x1386 ?x1390)) (* (/ 1.0 4.0) (* ?x1386 ?x1386 ?x1390 ?x1390)))))
 (let (($x1348 (= ?x1347 0.0)))
 (let (($x1274 (or (not $x1348) $x1430)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x465 (= (+ ?x35 ?x112 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x1473 (and $x465 (= (+ (* b00 d!1) (* (- 1) (* d00 b!2))) 0) $x531 $x1274)))
 (let ((?x1461 (* (/ 1.0 2.0) (* ?x1390 ?x1386))))
 (let ((?x1831 (+ ?x1427 ?x1813 ?x1461 ?x1802 (* (/ 1.0 16.0) (* ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647)) ?x1661 (* (- (/ 1.0 4.0)) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1386)) (* (/ 1.0 128.0) (* ?x1390 ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645)) (* (/ 3.0 128.0) (* ?x1390 ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645)) (* (/ 3.0 128.0) (* ?x1390 ?x1390 ?x1390 ?x1390 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645)) ?x1818 (* (/ 3.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647)) (* (/ 9.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647)) (* (/ 9.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647)) ?x1671 (* (/ 3.0 32.0) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647)) (* (/ 9.0 32.0) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647)) (* (/ 9.0 32.0) (* ?x1390 ?x1390 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647)) ?x167 (* (/ 3.0 16.0) (* ?x1390 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647)) (* (/ 3.0 16.0) (* ?x1390 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647)) ?x1076 ?x1085 ?x747 ?x759 (* (/ 1.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645)) (* (/ 3.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645)) (* (/ 3.0 64.0) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645)) ?x799 (* (/ 3.0 32.0) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647)) (* (/ 9.0 32.0) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647)) (* (/ 9.0 32.0) (* ?x1390 ?x1390 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647)) ?x1226 (* (/ 3.0 16.0) (* ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647)) (* (/ 9.0 16.0) (* ?x1390 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647)) (* (/ 9.0 16.0) (* ?x1390 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647)) ?x1569 (* (- (/ 3.0 4.0)) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1645)) (* (- (/ 3.0 4.0)) (* ?x1390 ?x1390 ?x1386 ?x1645 ?x1645)) ?x1502)))
 (let (($x1435 (= (* (+ ?x1461 ?x1460 (* ?x1645 ?x66) (* (- (/ 1.0 2.0)) (* ?x1390 ?x69))) ?x1831) 0.0)))
 (let ((?x705 (* (/ 1.0 16.0) (* ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647 ?x69))))
 (let ((?x1747 (* (- (/ 1.0 8.0)) (* ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647 ?x66))))
 (let ((?x846 (* (- (/ 1.0 16.0)) (* ?x1390 ?x1386 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x1592 (* (/ 1.0 32.0) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647 ?x69))))
 (let ((?x1581 (* (- (/ 1.0 16.0)) (* ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647 ?x66))))
 (let ((?x836 (* (/ 1.0 16.0) (* ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647 ?x1647))))
 (let ((?x758 (* (- (/ 1.0 32.0)) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1386 ?x1645 ?x1645 ?x1645 ?x1647 ?x1647 ?x1647))))
 (let ((?x636 (+ (* (/ 1.0 2.0) (* ?x1390 ?x1386 ?x1386)) (* (- 1.0) ?x1470) (* ?x1386 ?x1645 ?x66) (* (- (/ 1.0 2.0)) (* ?x1390 ?x1386 ?x69)) (* (- (/ 1.0 4.0)) (* ?x1390 ?x1390 ?x1386 ?x1386)) (* (/ 1.0 2.0) (* ?x1390 ?x1386 ?x1645 ?x1647)) (* (- (/ 1.0 2.0)) (* ?x1390 ?x1386 ?x1645 ?x66)) (* (/ 1.0 4.0) (* ?x1390 ?x1390 ?x1386 ?x69)) ?x758 ?x836 ?x1581 ?x1592 ?x846 (* (/ 1.0 8.0) ?x855) ?x1747 ?x705 (* (/ 1.0 8.0) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1386)) (* (- (/ 1.0 4.0)) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x1647)) (* (/ 1.0 4.0) (* ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x1645 ?x66)) (* (- (/ 1.0 8.0)) (* ?x1390 ?x1390 ?x1390 ?x1386 ?x1386 ?x1386 ?x69)))))
 (let ((?x748 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x688 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x112 (* 2 (* y!0 b00))) 0)))
 (let (($x1441 (and $x688 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x748 0) (or (not (= ?x636 0.0)) (not $x1435)))))
 (let (($x408 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1874 (* (/ 3.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 (to_real y) (to_real y)))))
 (let ((?x63 (to_real y)))
 (let ((?x59 (to_real a)))
 (let ((?x342 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59))))
 (let ((?x174 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x586 (* (- 1.0) ?x61)))
 (let ((?x279 (* (- 1.0) ?x59)))
 (let ((?x1952 (+ ?x279 ?x586 ?x174 (* (/ 1.0 2.0) (* ?x56 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x342 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1874 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61)) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x258 (+ ?x174 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x518 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x516 (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x515 (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x529 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x528 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69))))
 (let ((?x526 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x525 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x539 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x509 (+ (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59)) (* (- 1.0) (* ?x59 ?x61 ?x63)) (* ?x59 ?x61 ?x66) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x61 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x61 ?x66)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x69)) ?x539 ?x525 ?x526 ?x528 ?x529 ?x515 ?x516 ?x518 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x181 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x144 (= (+ ?x35 (* (- 1) (* a d00)) ?x112 (* 2 (* y b00))) 0)))
 (and $x144 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x181 0) (or (not (= ?x509 0.0)) (not (= (* ?x258 ?x1952) 0.0)))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x322 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x130 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x1886 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x1709 (* (/ 1.0 2.0) (* ?x56 ?x130))))
 (let ((?x586 (* (- 1.0) ?x61)))
 (let ((?x279 (* (- 1.0) ?x59)))
 (let ((?x345 (+ ?x279 ?x586 (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) ?x1709 (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x130 ?x130 ?x130)))))
 (let ((?x1196 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1910 (* ?x66 ?x61)))
 (let (($x1475 (not (= (* (+ ?x1709 (* (- 1.0) (* ?x61 ?x1886)) ?x1910 ?x1196) ?x345) 0.0))))
 (let ((?x342 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59))))
 (let ((?x174 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x691 (+ ?x279 (* (/ 1.0 16.0) (* ?x63 ?x63 ?x63 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x174 (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x342)))
 (let (($x1714 (not (= (* (+ ?x174 (* (- 1.0) (* ?x63 ?x61)) ?x1910 ?x1196) ?x691) 0.0))))
 (let (($x1612 (or $x1714 $x1475)))
 (let ((?x318 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x327 (= ?x318 0)))
 (let ((?x1917 (* d00 a)))
 (let ((?x1193 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1917)))
 (and (= ?x1193 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x327 $x1612)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x247 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1874 (* (/ 3.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 (to_real y) (to_real y)))))
 (let ((?x63 (to_real y)))
 (let ((?x59 (to_real a)))
 (let ((?x342 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59))))
 (let ((?x174 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x586 (* (- 1.0) ?x61)))
 (let ((?x279 (* (- 1.0) ?x59)))
 (let ((?x1952 (+ ?x279 ?x586 ?x174 (* (/ 1.0 2.0) (* ?x56 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x342 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 9.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1874 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61)) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x258 (+ ?x174 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x518 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x516 (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x515 (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x529 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x528 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69))))
 (let ((?x526 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x525 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x539 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x509 (+ (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59)) (* (- 1.0) (* ?x59 ?x61 ?x63)) (* ?x59 ?x61 ?x66) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x61 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x61 ?x66)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x69)) ?x539 ?x525 ?x526 ?x528 ?x529 ?x515 ?x516 ?x518 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x181 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x144 (= (+ ?x35 (* (- 1) (* a d00)) ?x112 (* 2 (* y b00))) 0)))
 (let (($x1978 (and $x144 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x181 0) (or (not (= ?x509 0.0)) (not (= (* ?x258 ?x1952) 0.0))))))
 (let ((?x1886 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x130 (+ ?x59 ?x61)))
 (let ((?x1709 (* (/ 1.0 2.0) (* ?x56 ?x130))))
 (let ((?x345 (+ ?x279 ?x586 (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) ?x1709 (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x130 ?x130 ?x130)))))
 (let ((?x1196 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x1910 (* ?x66 ?x61)))
 (let (($x1475 (not (= (* (+ ?x1709 (* (- 1.0) (* ?x61 ?x1886)) ?x1910 ?x1196) ?x345) 0.0))))
 (let ((?x691 (+ ?x279 (* (/ 1.0 16.0) (* ?x63 ?x63 ?x63 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x174 (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x342)))
 (let (($x1714 (not (= (* (+ ?x174 (* (- 1.0) (* ?x63 ?x61)) ?x1910 ?x1196) ?x691) 0.0))))
 (let (($x1612 (or $x1714 $x1475)))
 (let ((?x318 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x327 (= ?x318 0)))
 (let ((?x1917 (* d00 a)))
 (let (($x1198 (= (+ (* 2 ?x111) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x1917) 0)))
 (let (($x1168 (and $x1198 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x327 $x1612)))
 (rewrite (= $x1168 $x1978)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1015 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x130 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x1886 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x1709 (* (/ 1.0 2.0) (* ?x56 ?x130))))
 (let ((?x586 (* (- 1.0) ?x61)))
 (let ((?x279 (* (- 1.0) ?x59)))
 (let ((?x345 (+ ?x279 ?x586 (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) ?x1709 (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x130 ?x130 ?x130)))))
 (let ((?x1196 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1910 (* ?x66 ?x61)))
 (let (($x1475 (not (= (* (+ ?x1709 (* (- 1.0) (* ?x61 ?x1886)) ?x1910 ?x1196) ?x345) 0.0))))
 (let ((?x342 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59))))
 (let ((?x174 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x691 (+ ?x279 (* (/ 1.0 16.0) (* ?x63 ?x63 ?x63 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x174 (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x342)))
 (let (($x1714 (not (= (* (+ ?x174 (* (- 1.0) (* ?x63 ?x61)) ?x1910 ?x1196) ?x691) 0.0))))
 (let (($x1612 (or $x1714 $x1475)))
 (let ((?x318 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x327 (= ?x318 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x263 (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x263 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x327 $x1612)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1173 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x130 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x1886 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x1709 (* (/ 1.0 2.0) (* ?x56 ?x130))))
 (let ((?x586 (* (- 1.0) ?x61)))
 (let ((?x279 (* (- 1.0) ?x59)))
 (let ((?x345 (+ ?x279 ?x586 (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) ?x1709 (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x130 ?x130 ?x130)))))
 (let ((?x1196 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1910 (* ?x66 ?x61)))
 (let (($x1475 (not (= (* (+ ?x1709 (* (- 1.0) (* ?x61 ?x1886)) ?x1910 ?x1196) ?x345) 0.0))))
 (let ((?x342 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59))))
 (let ((?x174 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x691 (+ ?x279 (* (/ 1.0 16.0) (* ?x63 ?x63 ?x63 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x174 (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x342)))
 (let (($x1714 (not (= (* (+ ?x174 (* (- 1.0) (* ?x63 ?x61)) ?x1910 ?x1196) ?x691) 0.0))))
 (let (($x1612 (or $x1714 $x1475)))
 (let ((?x318 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x327 (= ?x318 0)))
 (let ((?x1917 (* d00 a)))
 (let ((?x1193 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1917)))
 (let (($x1168 (and (= ?x1193 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x327 $x1612)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x1482 (and (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) ?x1917)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x327 $x1612)))
 (rewrite (= $x1482 $x1168)))))))))))))))))))))))))))))))
 ))
 (let (($x103 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (+ a b)))
 (let ((?x84 (to_real ?x83)))
 (let ((?x63 (to_real y)))
 (let ((?x86 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x85 (* ?x84 ?x58)))
 (let ((?x95 (+ (to_real (* (- 1) ?x83)) (* ?x84 ?x84 ?x84 ?x62 ?x62 ?x62 ?x58 ?x86 ?x86 ?x86) ?x85 (* ?x84 ?x84 ?x84 ?x62 ?x62 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x90 (- (+ (- ?x85 (* ?x57 ?x62 ?x86)) (* ?x57 ?x62 (to_real y00))) ?x70)))
 (let ((?x59 (to_real a)))
 (let ((?x60 (* ?x59 ?x58)))
 (let ((?x76 (+ (to_real (* (- 1) a)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x63 ?x63 ?x63) ?x60 (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x71 (- (+ (- ?x60 (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 (to_real y00))) ?x70)))
 (let (($x101 (or (not (= (* ?x71 (- ?x76 (* ?x59 ?x59 ?x59 ?x58 ?x58))) ?x80)) (not (= (* ?x90 (- ?x95 (* ?x84 ?x84 ?x84 ?x58 ?x58))) ?x80)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x101))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1555 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x130 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x1886 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x1709 (* (/ 1.0 2.0) (* ?x56 ?x130))))
 (let ((?x586 (* (- 1.0) ?x61)))
 (let ((?x279 (* (- 1.0) ?x59)))
 (let ((?x345 (+ ?x279 ?x586 (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) ?x1709 (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x130 ?x130 ?x130 ?x1886 ?x1886 ?x1886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x130 ?x130 ?x130)))))
 (let ((?x1196 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1910 (* ?x66 ?x61)))
 (let (($x1475 (not (= (* (+ ?x1709 (* (- 1.0) (* ?x61 ?x1886)) ?x1910 ?x1196) ?x345) 0.0))))
 (let ((?x342 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59))))
 (let ((?x174 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x691 (+ ?x279 (* (/ 1.0 16.0) (* ?x63 ?x63 ?x63 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x174 (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x342)))
 (let (($x1714 (not (= (* (+ ?x174 (* (- 1.0) (* ?x63 ?x61)) ?x1910 ?x1196) ?x691) 0.0))))
 (let (($x1612 (or $x1714 $x1475)))
 (let ((?x318 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x327 (= ?x318 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x263 (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x1482 (and $x263 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x327 $x1612)))
 (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (+ a b)))
 (let ((?x84 (to_real ?x83)))
 (let ((?x86 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x85 (* ?x84 ?x58)))
 (let ((?x95 (+ (to_real (* (- 1) ?x83)) (* ?x84 ?x84 ?x84 ?x62 ?x62 ?x62 ?x58 ?x86 ?x86 ?x86) ?x85 (* ?x84 ?x84 ?x84 ?x62 ?x62 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x98 (* (- (+ (- ?x85 (* ?x57 ?x62 ?x86)) (* ?x57 ?x62 ?x66)) ?x70) (- ?x95 (* ?x84 ?x84 ?x84 ?x58 ?x58)))))
 (let ((?x60 (* ?x59 ?x58)))
 (let ((?x76 (+ (to_real (* (- 1) a)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x63 ?x63 ?x63) ?x60 (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x79 (* (- (+ (- ?x60 (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70) (- ?x76 (* ?x59 ?x59 ?x59 ?x58 ?x58)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x102 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x79 ?x80)) (not (= ?x98 ?x80))))))
 (rewrite (= $x102 $x1482)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x104 (asserted $x103)))
 (let ((@x395 (mp (mp @x104 (quant-intro (proof-bind ?x1555) (= $x103 $x1015)) $x1015) (rewrite (= $x1015 $x1015)) $x1015)))
 (let ((@x1604 (mp (mp @x395 (quant-intro (proof-bind ?x1173) (= $x1015 $x322)) $x322) (quant-intro (proof-bind ?x247) (= $x322 $x408)) $x408)))
 (let ((@x1277 (mp (mp~ @x1604 (sk (~ $x408 $x1441)) $x1441) (rewrite (= $x1441 $x1473)) $x1473)))
 (let ((@x1418 (mp (and-elim @x1277 $x531) @x1411 $x1352)))
 (let ((@x1417 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1352) $x1350)) @x1418 $x1350)))
 (let ((@x1424 ((_ th-lemma arith) @x1417 @x1383 @x1372 @x1366 (hypothesis (not $x228)) (hypothesis $x245) false)))
 (let ((@x357 (unit-resolution (lemma @x1424 (or (not $x245) $x228)) @x1573 $x228)))
 (let ((?x231 (+ ?x747 ?x1269 ?x1275 ?x1287 ?x1878 ?x1291 ?x1297 ?x1305 ?x1317 ?x1569 ?x1311 ?x1353 ?x1361 ?x1327 ?x1367 ?x1375 ?x1388 ?x1824 ?x1396 ?x1407 ?x1427 ?x1410 ?x1414 ?x1422 ?x1802 ?x1813 ?x1661 ?x1671 ?x1226 ?x1502 ?x1380 ?x1363 ?x1739 ?x1800 ?x1818 ?x167 ?x759 ?x799 ?x1085 ?x1076)))
 (let (($x524 (>= ?x231 0.0)))
 (let (($x1635 (not $x524)))
 (let (($x246 (= ?x231 0.0)))
 (let (($x1643 (not $x246)))
 (let (($x952 (= 0.0 ?x1347)))
 (let (($x663 (<= ?x1347 0.0)))
 (let ((?x579 (to_real ?x304)))
 (let ((?x1465 (+ (* (- 1.0) ?x1228) ?x579)))
 (let (($x1480 (<= ?x1465 0.0)))
 (let (($x553 (= 0.0 ?x1465)))
 (let ((@x1455 (symm (commutativity (= $x553 (= ?x1465 0.0))) (= (= ?x1465 0.0) $x553))))
 (let ((@x1450 (unit-resolution (hypothesis (not $x553)) (mp ((_ th-lemma arith) (= ?x1465 0.0)) @x1455 $x553) false)))
 (let ((@x1445 (lemma @x1450 $x553)))
 (let ((@x1527 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x553) $x1480)) @x1445 $x1480)))
 (let (($x1481 (>= ?x1465 0.0)))
 (let ((@x1525 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x553) $x1481)) @x1445 $x1481)))
 (let (($x1357 (>= ?x551 0)))
 (let ((@x452 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1352) $x1357)) @x1418 $x1357)))
 (let ((@x1528 (unit-resolution ((_ th-lemma arith) (or (not $x1350) (not $x1357) $x663 (not $x1480) (not $x1481))) @x1417 @x452 (hypothesis (not $x663)) @x1525 @x1527 false)))
 (let (($x153 (>= ?x1347 0.0)))
 (let ((?x988 (* d!1 a!3)))
 (let ((?x1289 (to_real ?x988)))
 (let ((?x242 (+ (* (- 1.0) ?x1746) ?x1289)))
 (let (($x1439 (= ?x242 0.0)))
 (let ((@x1215 (lemma (unit-resolution ((_ th-lemma arith) $x1439) (hypothesis (not $x1439)) false) $x1439)))
 (let (($x1822 (>= ?x256 0.0)))
 (let (($x1442 (>= ?x242 0.0)))
 (let ((@x1496 (hypothesis $x1439)))
 (let (($x1438 (<= ?x242 0.0)))
 (let (($x446 (not $x1357)))
 (let (($x1483 (not $x1350)))
 (let ((@x1498 ((_ th-lemma arith) (or $x1483 $x446 (not $x1442) (not $x1438) $x153 (not $x1798) (not $x1822)))))
 (let ((@x1513 (unit-resolution @x1498 @x1417 @x452 (hypothesis (not $x153)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1439) $x1438)) @x1496 $x1438) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1439) $x1442)) @x1496 $x1442) @x1372 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x554) $x1822)) @x1364 $x1822) false)))
 (let ((@x558 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x952 (not $x663) (not $x153))) (unit-resolution (lemma @x1513 (or (not $x1439) $x153)) @x1215 $x153) (or $x952 (not $x663)))))
 (let ((@x1673 (mp (unit-resolution @x558 (lemma @x1528 $x663) $x952) (commutativity (= $x952 $x1348)) $x1348)))
 (let ((@x501 (unit-resolution (and-elim @x1277 $x1274) @x1673 $x1430)))
 (let ((@x1679 (unit-resolution ((_ th-lemma arith) (or $x1643 $x555)) @x501 (hypothesis $x246) false)))
 (let ((@x1682 (lemma @x1679 $x1643)))
 (let (($x522 (<= ?x231 0.0)))
 (let (($x1539 (<= ?x533 0.0)))
 (let (($x1724 (<= ?x255 0.0)))
 (let ((@x1567 ((_ th-lemma arith) (or (not $x1724) (not $x1481) $x1539 $x446 $x1483 (not $x1480) (not $x245)))))
 (let ((@x1598 (unit-resolution @x1567 @x1417 @x452 @x1573 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x254) $x1724)) @x1421 $x1724) @x1525 @x1527 (hypothesis (not $x1539)) false)))
 (let ((@x1599 (lemma @x1598 $x1539)))
 (let (($x495 (not $x522)))
 (let ((@x1564 (hypothesis $x495)))
 (let (($x954 (<= ?x1436 0.0)))
 (let (($x565 (not $x954)))
 (let (($x724 (>= ?x1436 0.0)))
 (let (($x1556 (not $x724)))
 (let ((@x1558 (hypothesis $x1556)))
 (let ((@x1606 (unit-resolution ((_ th-lemma arith) (or (not $x228) $x522 $x724)) @x1558 @x1564 @x357 false)))
 (let ((@x1632 (unit-resolution ((_ th-lemma arith) (or (not $x1539) $x524 $x724)) @x1558 (hypothesis $x1635) @x1599 false)))
 (let ((@x1538 ((_ th-lemma arith triangle-eq) (or $x246 $x495 $x1635))))
 (let ((@x1541 (unit-resolution @x1538 (unit-resolution (lemma @x1632 (or $x524 $x724)) @x1558 $x524) (unit-resolution (lemma @x1606 (or $x522 $x724)) @x1558 $x522) @x1682 false)))
 (let (($x1362 (= 0.0 ?x1436)))
 (let (($x1695 (not $x1362)))
 (let ((@x1700 (monotonicity (symm (commutativity (= $x1362 $x555)) (= $x555 $x1362)) (= $x1430 $x1695))))
 (let ((@x1696 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1362 $x565 $x1556)) (mp @x501 @x1700 $x1695) (or $x565 $x1556))))
 (let ((@x1697 (unit-resolution @x1696 (lemma @x1541 $x724) $x565)))
 (let ((@x340 (unit-resolution ((_ th-lemma arith) (or (not $x1539) $x522 $x954)) @x1697 @x1564 @x1599 false)))
 (unit-resolution ((_ th-lemma arith) (or (not $x228) $x524 $x954)) @x1697 (unit-resolution @x1538 (lemma @x340 $x522) @x1682 $x1635) @x357 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       56
 :arith-eq-adapter                81
 :arith-bound-propagations-cheap  58
 :arith-bound-propagations-lp     10
 :arith-conflicts                 157
 :arith-diseq                     61
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 6
 :arith-grobner-calls             7
 :arith-grobner-conflicts         3
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 22
 :arith-lower                     86
 :arith-make-feasible             87
 :arith-max-columns               118
 :arith-max-rows                  24
 :arith-nla-explanations          137
 :arith-nla-lemmas                156
 :arith-patches                   6
 :arith-patches-success           6
 :arith-propagations              58
 :arith-upper                     93
 :conflicts                       16
 :decisions                       197
 :del-clause                      289
 :final-checks                    50
 :max-memory                      7.80
 :memory                          3.32
 :mk-bool-var                     410
 :mk-clause                       353
 :num-allocs                      425708440
 :num-checks                      1
 :propagations                    211
 :rlimit-count                    12123
 :time                            0.27
 :total-time                      0.27)
