unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x690 (to_real b!2)))
 (let ((?x681 (to_real d!1)))
 (let ((?x675 (to_real y!0)))
 (let ((?x66 (to_real d00)))
 (let ((?x684 (to_real a!3)))
 (let ((?x61 (to_real b00)))
 (let ((?x559 (* (- (/ 1.0 4.0)) (* ?x61 ?x675 ?x675 ?x675 ?x681 ?x681))))
 (let ((?x558 (* (/ 1.0 8.0) (* ?x66 ?x675 ?x681 ?x681 ?x684 ?x690))))
 (let ((?x557 (* (- (/ 1.0 8.0)) (* ?x61 ?x675 ?x681 ?x681 ?x681 ?x684))))
 (let ((?x556 (* (/ 1.0 4.0) (* ?x66 ?x675 ?x675 ?x675 ?x681 ?x690))))
 (let ((?x555 (* (- (/ 1.0 32.0)) (* ?x61 ?x681 ?x681 ?x681 ?x681 ?x684 ?x684 ?x684 ?x690))))
 (let ((?x258 (* (/ 1.0 32.0) (* ?x66 ?x681 ?x681 ?x681 ?x684 ?x684 ?x684 ?x690 ?x690))))
 (let ((?x368 (+ (* (/ 3.0 16.0) (* ?x66 ?x675 ?x681 ?x681 ?x681 ?x690)) (* (/ 1.0 32.0) (* ?x66 ?x681 ?x681 ?x681 ?x681 ?x690)) (* (- (/ 3.0 8.0)) (* ?x61 ?x675 ?x675 ?x681 ?x681 ?x681)) (* (/ 1.0 16.0) (* ?x66 ?x681 ?x681 ?x681 ?x684 ?x690)) ?x258 (* (/ 3.0 32.0) (* ?x66 ?x681 ?x681 ?x681 ?x684 ?x684 ?x690 ?x690 ?x690)) (* (- (/ 3.0 32.0)) (* ?x61 ?x681 ?x681 ?x681 ?x681 ?x684 ?x684 ?x690 ?x690)) (* (/ 1.0 16.0) (* ?x66 ?x681 ?x681 ?x681 ?x690 ?x690)) ?x555 ?x556 (* (- (/ 1.0 16.0)) (* ?x61 ?x681 ?x681 ?x681 ?x681 ?x684)) ?x557 ?x558 (* (/ 1.0 8.0) (* ?x66 ?x675 ?x681 ?x681 ?x690 ?x690)) ?x559 (* (/ 3.0 32.0) (* ?x66 ?x681 ?x681 ?x681 ?x684 ?x690 ?x690 ?x690 ?x690)) (* (- (/ 1.0 32.0)) (* ?x61 ?x681 ?x681 ?x681 ?x681 ?x681)) (* (/ 1.0 32.0) (* ?x66 ?x681 ?x681 ?x681 ?x690 ?x690 ?x690 ?x690 ?x690)) (* (- (/ 3.0 16.0)) (* ?x61 ?x675 ?x681 ?x681 ?x681 ?x681)) (* (- (/ 1.0 8.0)) (* ?x61 ?x675 ?x681 ?x681 ?x681 ?x690)) (* (- (/ 1.0 32.0)) (* ?x61 ?x681 ?x681 ?x681 ?x681 ?x690 ?x690 ?x690 ?x690)) (* (- (/ 3.0 32.0)) (* ?x61 ?x681 ?x681 ?x681 ?x681 ?x684 ?x690 ?x690 ?x690)) (* (- (/ 1.0 16.0)) (* ?x61 ?x681 ?x681 ?x681 ?x681 ?x690)) (* (/ 3.0 8.0) (* ?x66 ?x675 ?x675 ?x681 ?x681 ?x690)))))
 (let (($x399 (>= ?x368 0.0)))
 (let ((?x268 (+ (* d00 b!2) (* (- 1) (* b00 d!1)))))
 (let (($x220 (>= ?x268 0)))
 (let (($x384 (= 0 ?x268)))
 (let ((@x340 (symm (commutativity (= $x384 (= ?x268 0))) (= (= ?x268 0) $x384))))
 (let (($x298 (= ?x268 0)))
 (let ((?x560 (+ ?x258 ?x555 ?x556 ?x557 ?x558 ?x559)))
 (let (($x564 (= ?x560 0.0)))
 (let (($x570 (not $x564)))
 (let (($x725 (or $x570 (not (= ?x368 0.0)))))
 (let ((?x305 (+ (* d!1 a!3) (* (- 2) (* y!0 b!2)) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let (($x244 (= ?x305 0)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let ((?x284 (+ ?x35 ?x107 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3)))))
 (let (($x297 (= ?x284 0)))
 (let (($x372 (and $x297 $x298 $x244 $x725)))
 (let ((?x700 (* (- (/ 1.0 4.0)) (* ?x681 ?x675 ?x675 ?x675 ?x690 ?x66))))
 (let ((?x698 (* (/ 1.0 32.0) (* ?x681 ?x681 ?x681 ?x681 ?x684 ?x684 ?x684 ?x61 ?x690))))
 (let ((?x696 (* (- (/ 1.0 8.0)) (* ?x681 ?x681 ?x684 ?x675 ?x690 ?x66))))
 (let ((?x693 (* (- (/ 1.0 32.0)) (* ?x681 ?x681 ?x681 ?x684 ?x684 ?x684 ?x690 ?x690 ?x66))))
 (let ((?x687 (* (/ 1.0 8.0) (* ?x681 ?x681 ?x681 ?x684 ?x61 ?x675))))
 (let ((?x683 (* (/ 1.0 4.0) (* ?x681 ?x681 ?x61 ?x675 ?x675 ?x675))))
 (let ((?x249 (+ ?x683 ?x687 ?x693 ?x696 (* (/ 1.0 16.0) (* ?x681 ?x681 ?x681 ?x681 ?x684 ?x61)) (* (/ 1.0 16.0) (* ?x681 ?x681 ?x681 ?x681 ?x61 ?x690)) ?x698 (* (/ 1.0 8.0) (* ?x681 ?x681 ?x681 ?x61 ?x675 ?x690)) ?x700 (* (- (/ 3.0 32.0)) (* ?x681 ?x681 ?x681 ?x684 ?x684 ?x690 ?x690 ?x690 ?x66)) (* (- (/ 3.0 32.0)) (* ?x681 ?x681 ?x681 ?x684 ?x690 ?x690 ?x690 ?x690 ?x66)) (* (- (/ 1.0 32.0)) (* ?x681 ?x681 ?x681 ?x690 ?x690 ?x690 ?x690 ?x690 ?x66)) (* (/ 1.0 32.0) (* ?x681 ?x681 ?x681 ?x681 ?x681 ?x61)) (* (/ 3.0 16.0) (* ?x681 ?x681 ?x681 ?x681 ?x61 ?x675)) (* (/ 3.0 8.0) (* ?x681 ?x681 ?x681 ?x61 ?x675 ?x675)) (* (- (/ 1.0 16.0)) (* ?x681 ?x681 ?x681 ?x684 ?x690 ?x66)) (* (- (/ 1.0 16.0)) (* ?x681 ?x681 ?x681 ?x690 ?x690 ?x66)) (* (- (/ 1.0 8.0)) (* ?x681 ?x681 ?x675 ?x690 ?x690 ?x66)) (* (/ 3.0 32.0) (* ?x681 ?x681 ?x681 ?x681 ?x684 ?x684 ?x61 ?x690 ?x690)) (* (/ 3.0 32.0) (* ?x681 ?x681 ?x681 ?x681 ?x684 ?x61 ?x690 ?x690 ?x690)) (* (/ 1.0 32.0) (* ?x681 ?x681 ?x681 ?x681 ?x61 ?x690 ?x690 ?x690 ?x690)) (* (- (/ 1.0 32.0)) (* ?x681 ?x681 ?x681 ?x681 ?x690 ?x66)) (* (- (/ 3.0 16.0)) (* ?x681 ?x681 ?x681 ?x675 ?x690 ?x66)) (* (- (/ 3.0 8.0)) (* ?x681 ?x681 ?x675 ?x675 ?x690 ?x66)))))
 (let (($x246 (or (not (= (+ ?x683 ?x687 ?x693 ?x696 ?x698 ?x700) 0.0)) (not (= ?x249 0.0)))))
 (let ((?x677 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x527 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x107 (* 2 (* y!0 b00))) 0)))
 (let (($x248 (and $x527 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x677 0) $x246)))
 (let (($x185 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x66 (to_real d00)))
 (let ((?x64 (to_real b)))
 (let ((?x62 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x714 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 (to_real b00) ?x64 ?x64 ?x64 ?x64))))
 (let ((?x61 (to_real b00)))
 (let ((?x60 (to_real a)))
 (let ((?x331 (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x62 ?x62 ?x64 ?x66))))
 (let ((?x273 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x61 ?x64))))
 (let ((?x330 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x62 ?x64 ?x66))))
 (let ((?x329 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x64 ?x64 ?x66))))
 (let ((?x328 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x61 ?x62))))
 (let ((?x174 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x62 ?x62 ?x62))))
 (let ((?x902 (+ ?x174 ?x328 ?x329 ?x330 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x64)) ?x273 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x64)) ?x331 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x64 ?x64 ?x66)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x64 ?x64)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x64 ?x64 ?x64)) ?x714 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x64 ?x66)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x64 ?x66)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x66)))))
 (let (($x179 (or (not (= (+ ?x174 ?x328 ?x329 ?x330 ?x273 ?x331) 0.0)) (not (= ?x902 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x176 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x139 (= (+ ?x35 (* (- 1) (* a d00)) ?x107 (* 2 (* y b00))) 0)))
 (and $x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x176 0) $x179)))))))))))))))))))))) :qid k!33))
 ))
 (let (($x464 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x62 (to_real y)))
 (let ((?x441 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x584 (* ?x66 ?x56 ?x64 ?x441 ?x441 ?x441)))
 (let ((?x60 (to_real a)))
 (let ((?x825 (+ ?x60 ?x64)))
 (let ((?x61 (to_real b00)))
 (let ((?x848 (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x825 ?x825 ?x825)))
 (let ((?x648 (+ (* (/ 1.0 8.0) (* ?x61 ?x56 ?x56 ?x56 ?x825 ?x441)) (* (- (/ 1.0 32.0)) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x825 ?x825 ?x825)) (* (/ 1.0 4.0) (* ?x61 ?x56 ?x56 ?x441 ?x441 ?x441)) (* (- (/ 1.0 8.0)) (* ?x66 ?x56 ?x56 ?x64 ?x825 ?x441)) (* (/ 1.0 32.0) ?x848) (* (- (/ 1.0 4.0)) ?x584))))
 (let ((?x639 (+ (* (/ 1.0 8.0) (* ?x61 ?x62 ?x56 ?x56 ?x56 ?x60)) (* (- (/ 1.0 32.0)) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x61 ?x62 ?x62 ?x62 ?x56 ?x56)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x60)) (* (/ 1.0 32.0) (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x66 ?x62 ?x62 ?x62 ?x56 ?x64)))))
 (let ((?x484 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x487 (= ?x484 0)))
 (let ((?x250 (* d00 a)))
 (let ((?x583 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x250)))
 (and (= ?x583 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x487 (or (not (= ?x639 0.0)) (not (= ?x648 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x175 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x66 (to_real d00)))
 (let ((?x64 (to_real b)))
 (let ((?x62 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x714 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 (to_real b00) ?x64 ?x64 ?x64 ?x64))))
 (let ((?x61 (to_real b00)))
 (let ((?x60 (to_real a)))
 (let ((?x331 (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x62 ?x62 ?x64 ?x66))))
 (let ((?x273 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x61 ?x64))))
 (let ((?x330 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x62 ?x64 ?x66))))
 (let ((?x329 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x64 ?x64 ?x66))))
 (let ((?x328 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x61 ?x62))))
 (let ((?x174 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x62 ?x62 ?x62))))
 (let ((?x902 (+ ?x174 ?x328 ?x329 ?x330 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x64)) ?x273 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x64)) ?x331 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x64 ?x64 ?x66)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x64 ?x64)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x64 ?x64 ?x64)) ?x714 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x64 ?x66)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x64 ?x66)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x66)))))
 (let (($x179 (or (not (= (+ ?x174 ?x328 ?x329 ?x330 ?x273 ?x331) 0.0)) (not (= ?x902 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x176 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x139 (= (+ ?x35 (* (- 1) (* a d00)) ?x107 (* 2 (* y b00))) 0)))
 (let (($x909 (and $x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x176 0) $x179)))
 (let ((?x441 (+ ?x62 (* (/ 1.0 2.0) ?x56))))
 (let ((?x584 (* ?x66 ?x56 ?x64 ?x441 ?x441 ?x441)))
 (let ((?x825 (+ ?x60 ?x64)))
 (let ((?x848 (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x825 ?x825 ?x825)))
 (let ((?x648 (+ (* (/ 1.0 8.0) (* ?x61 ?x56 ?x56 ?x56 ?x825 ?x441)) (* (- (/ 1.0 32.0)) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x825 ?x825 ?x825)) (* (/ 1.0 4.0) (* ?x61 ?x56 ?x56 ?x441 ?x441 ?x441)) (* (- (/ 1.0 8.0)) (* ?x66 ?x56 ?x56 ?x64 ?x825 ?x441)) (* (/ 1.0 32.0) ?x848) (* (- (/ 1.0 4.0)) ?x584))))
 (let ((?x639 (+ (* (/ 1.0 8.0) (* ?x61 ?x62 ?x56 ?x56 ?x56 ?x60)) (* (- (/ 1.0 32.0)) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x61 ?x62 ?x62 ?x62 ?x56 ?x56)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x60)) (* (/ 1.0 32.0) (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x66 ?x62 ?x62 ?x62 ?x56 ?x64)))))
 (let ((?x484 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x487 (= ?x484 0)))
 (let ((?x250 (* d00 a)))
 (let (($x468 (= (+ (* 2 ?x106) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x250) 0)))
 (let (($x436 (and $x468 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x487 (or (not (= ?x639 0.0)) (not (= ?x648 0.0))))))
 (rewrite (= $x436 $x909))))))))))))))))))))))))))))))))))))
 ))
 (let (($x262 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x62 (to_real y)))
 (let ((?x441 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x584 (* ?x66 ?x56 ?x64 ?x441 ?x441 ?x441)))
 (let ((?x60 (to_real a)))
 (let ((?x825 (+ ?x60 ?x64)))
 (let ((?x61 (to_real b00)))
 (let ((?x848 (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x825 ?x825 ?x825)))
 (let ((?x647 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x56 ?x56 ?x56 ?x825 ?x441)) (* (/ 1.0 32.0) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x825 ?x825 ?x825)) (* (- (/ 1.0 4.0)) (* ?x61 ?x56 ?x56 ?x441 ?x441 ?x441)) (* (/ 1.0 8.0) (* ?x66 ?x56 ?x56 ?x64 ?x825 ?x441)) (* (- (/ 1.0 32.0)) ?x848) (* (/ 1.0 4.0) ?x584))))
 (let ((?x816 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x62 ?x56 ?x56 ?x56 ?x60)) (* (/ 1.0 32.0) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x62 ?x62 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x60)) (* (- (/ 1.0 32.0)) (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x66 ?x62 ?x62 ?x62 ?x56 ?x64)))))
 (let ((?x484 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x487 (= ?x484 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x651 (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x651 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x487 (or (not (= ?x816 0.0)) (not (= ?x647 0.0)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x343 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x62 (to_real y)))
 (let ((?x441 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x584 (* ?x66 ?x56 ?x64 ?x441 ?x441 ?x441)))
 (let ((?x60 (to_real a)))
 (let ((?x825 (+ ?x60 ?x64)))
 (let ((?x61 (to_real b00)))
 (let ((?x848 (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x825 ?x825 ?x825)))
 (let ((?x648 (+ (* (/ 1.0 8.0) (* ?x61 ?x56 ?x56 ?x56 ?x825 ?x441)) (* (- (/ 1.0 32.0)) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x825 ?x825 ?x825)) (* (/ 1.0 4.0) (* ?x61 ?x56 ?x56 ?x441 ?x441 ?x441)) (* (- (/ 1.0 8.0)) (* ?x66 ?x56 ?x56 ?x64 ?x825 ?x441)) (* (/ 1.0 32.0) ?x848) (* (- (/ 1.0 4.0)) ?x584))))
 (let ((?x639 (+ (* (/ 1.0 8.0) (* ?x61 ?x62 ?x56 ?x56 ?x56 ?x60)) (* (- (/ 1.0 32.0)) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x61 ?x62 ?x62 ?x62 ?x56 ?x56)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x60)) (* (/ 1.0 32.0) (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x66 ?x62 ?x62 ?x62 ?x56 ?x64)))))
 (let ((?x484 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x487 (= ?x484 0)))
 (let ((?x250 (* d00 a)))
 (let ((?x583 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x250)))
 (let (($x436 (and (= ?x583 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x487 (or (not (= ?x639 0.0)) (not (= ?x648 0.0))))))
 (let ((?x647 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x56 ?x56 ?x56 ?x825 ?x441)) (* (/ 1.0 32.0) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x825 ?x825 ?x825)) (* (- (/ 1.0 4.0)) (* ?x61 ?x56 ?x56 ?x441 ?x441 ?x441)) (* (/ 1.0 8.0) (* ?x66 ?x56 ?x56 ?x64 ?x825 ?x441)) (* (- (/ 1.0 32.0)) ?x848) (* (/ 1.0 4.0) ?x584))))
 (let ((?x816 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x62 ?x56 ?x56 ?x56 ?x60)) (* (/ 1.0 32.0) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x62 ?x62 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x60)) (* (- (/ 1.0 32.0)) (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x66 ?x62 ?x62 ?x62 ?x56 ?x64)))))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x316 (and (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) ?x250)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x487 (or (not (= ?x816 0.0)) (not (= ?x647 0.0))))))
 (rewrite (= $x316 $x436))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x62 (to_real y)))
 (let ((?x81 (+ ?x62 ?x58)))
 (let ((?x66 (to_real d00)))
 (let ((?x64 (to_real b)))
 (let ((?x65 (/ ?x64 ?x57)))
 (let ((?x61 (to_real b00)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x85 (+ (* (to_real (- 1)) ?x82 ?x61 ?x58 ?x58 ?x58 ?x81) (* ?x82 ?x82 ?x82 ?x65 ?x65 ?x58 ?x58 ?x58 ?x66))))
 (let ((?x89 (+ (- ?x85 (* ?x61 ?x58 ?x58 ?x81 ?x81 ?x81)) (* ?x82 ?x65 ?x58 ?x58 ?x66 ?x81))))
 (let ((?x93 (+ (- ?x89 (* ?x82 ?x82 ?x82 ?x65 ?x61 ?x58 ?x58 ?x58 ?x58)) (* ?x65 ?x58 ?x66 ?x81 ?x81 ?x81))))
 (let ((?x60 (to_real a)))
 (let ((?x68 (+ (* (to_real (- 1)) ?x60 ?x61 ?x58 ?x58 ?x58 ?x62) (* ?x60 ?x60 ?x60 ?x65 ?x65 ?x58 ?x58 ?x58 ?x66))))
 (let ((?x72 (+ (- ?x68 (* ?x61 ?x58 ?x58 ?x62 ?x62 ?x62)) (* ?x60 ?x65 ?x58 ?x58 ?x66 ?x62))))
 (let ((?x76 (+ (- ?x72 (* ?x60 ?x60 ?x60 ?x65 ?x61 ?x58 ?x58 ?x58 ?x58)) (* ?x65 ?x58 ?x66 ?x62 ?x62 ?x62))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x76 ?x77)) (not (= ?x93 ?x77)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x592 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x62 (to_real y)))
 (let ((?x441 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x584 (* ?x66 ?x56 ?x64 ?x441 ?x441 ?x441)))
 (let ((?x60 (to_real a)))
 (let ((?x825 (+ ?x60 ?x64)))
 (let ((?x61 (to_real b00)))
 (let ((?x848 (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x825 ?x825 ?x825)))
 (let ((?x647 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x56 ?x56 ?x56 ?x825 ?x441)) (* (/ 1.0 32.0) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x825 ?x825 ?x825)) (* (- (/ 1.0 4.0)) (* ?x61 ?x56 ?x56 ?x441 ?x441 ?x441)) (* (/ 1.0 8.0) (* ?x66 ?x56 ?x56 ?x64 ?x825 ?x441)) (* (- (/ 1.0 32.0)) ?x848) (* (/ 1.0 4.0) ?x584))))
 (let ((?x816 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x62 ?x56 ?x56 ?x56 ?x60)) (* (/ 1.0 32.0) (* ?x66 ?x56 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x62 ?x62 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x60)) (* (- (/ 1.0 32.0)) (* ?x61 ?x56 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x66 ?x62 ?x62 ?x62 ?x56 ?x64)))))
 (let ((?x484 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x487 (= ?x484 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x651 (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x316 (and $x651 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x487 (or (not (= ?x816 0.0)) (not (= ?x647 0.0))))))
 (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x81 (+ ?x62 ?x58)))
 (let ((?x65 (/ ?x64 ?x57)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x85 (+ (* (to_real (- 1)) ?x82 ?x61 ?x58 ?x58 ?x58 ?x81) (* ?x82 ?x82 ?x82 ?x65 ?x65 ?x58 ?x58 ?x58 ?x66))))
 (let ((?x89 (+ (- ?x85 (* ?x61 ?x58 ?x58 ?x81 ?x81 ?x81)) (* ?x82 ?x65 ?x58 ?x58 ?x66 ?x81))))
 (let ((?x93 (+ (- ?x89 (* ?x82 ?x82 ?x82 ?x65 ?x61 ?x58 ?x58 ?x58 ?x58)) (* ?x65 ?x58 ?x66 ?x81 ?x81 ?x81))))
 (let ((?x68 (+ (* (to_real (- 1)) ?x60 ?x61 ?x58 ?x58 ?x58 ?x62) (* ?x60 ?x60 ?x60 ?x65 ?x65 ?x58 ?x58 ?x58 ?x66))))
 (let ((?x72 (+ (- ?x68 (* ?x61 ?x58 ?x58 ?x62 ?x62 ?x62)) (* ?x60 ?x65 ?x58 ?x58 ?x66 ?x62))))
 (let ((?x76 (+ (- ?x72 (* ?x60 ?x60 ?x60 ?x65 ?x61 ?x58 ?x58 ?x58 ?x58)) (* ?x65 ?x58 ?x66 ?x62 ?x62 ?x62))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x97 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x76 ?x77)) (not (= ?x93 ?x77))))))
 (rewrite (= $x97 $x316)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x852 (mp (mp @x99 (quant-intro (proof-bind ?x592) (= $x98 $x262)) $x262) (rewrite (= $x262 $x262)) $x262)))
 (let ((@x679 (mp (mp @x852 (quant-intro (proof-bind ?x343) (= $x262 $x464)) $x464) (quant-intro (proof-bind ?x175) (= $x464 $x185)) $x185)))
 (let ((@x411 (mp (mp~ @x679 (sk (~ $x185 $x248)) $x248) (rewrite (= $x248 $x372)) $x372)))
 (let ((@x265 (mp (and-elim @x411 $x298) @x340 $x384)))
 (let ((@x187 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x220)) @x265 $x220)))
 (let (($x306 (<= ?x268 0)))
 (let ((@x276 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x306)) @x265 $x306)))
 (let ((@x227 (unit-resolution ((_ th-lemma arith) (or $x399 (not $x220) (not $x306))) @x276 @x187 (hypothesis (not $x399)) false)))
 (let ((@x229 (lemma @x227 $x399)))
 (let (($x402 (<= ?x368 0.0)))
 (let (($x729 (>= ?x305 0)))
 (let (($x618 (= 0 ?x305)))
 (let ((@x813 (mp (and-elim @x411 $x244) (symm (commutativity (= $x618 $x244)) (= $x244 $x618)) $x618)))
 (let ((@x827 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x618) $x729)) @x813 $x729)))
 (let (($x716 (<= ?x305 0)))
 (let ((@x820 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x618) $x716)) @x813 $x716)))
 (let ((@x860 (unit-resolution ((_ th-lemma arith) (or $x402 (not $x729) (not $x716) (not $x220) (not $x306))) @x276 @x187 @x820 @x827 (hypothesis (not $x402)) false)))
 (let ((@x878 (lemma @x860 $x402)))
 (let (($x310 (<= ?x560 0.0)))
 (let (($x178 (not $x310)))
 (let (($x367 (>= ?x560 0.0)))
 (let (($x374 (>= ?x284 0)))
 (let (($x355 (= 0 ?x284)))
 (let ((@x640 (mp (and-elim @x411 $x297) (symm (commutativity (= $x355 $x297)) (= $x297 $x355)) $x355)))
 (let (($x206 (<= ?x284 0)))
 (let (($x562 (not $x306)))
 (let (($x561 (not $x220)))
 (let (($x610 (not $x716)))
 (let (($x513 (not $x729)))
 (let (($x189 (not $x399)))
 (let (($x831 (not $x402)))
 (let ((@x376 ((_ th-lemma arith) (or $x831 $x189 $x367 $x513 $x610 $x561 $x562 (not $x374) (not $x206)))))
 (let ((@x512 (unit-resolution @x376 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x355) $x206)) @x640 $x206) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x355) $x374)) @x640 $x374) @x276 @x187 @x820 @x827 (hypothesis (not $x367)) @x878 @x229 false)))
 (let (($x309 (= 0.0 ?x560)))
 (let (($x783 (not $x309)))
 (let ((@x790 (monotonicity (symm (commutativity (= $x309 $x564)) (= $x564 $x309)) (= $x570 $x783))))
 (let (($x364 (= ?x368 0.0)))
 (let (($x304 (= 0.0 ?x368)))
 (let ((@x429 (unit-resolution (unit-resolution ((_ th-lemma arith triangle-eq) (or $x304 $x831 $x189)) @x229 (or $x304 $x831)) @x878 $x304)))
 (let ((@x489 (unit-resolution (and-elim @x411 $x725) (mp @x429 (commutativity (= $x304 $x364)) $x364) $x570)))
 (let ((@x633 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x309 $x178 (not $x367))) (mp @x489 @x790 $x783) (or $x178 (not $x367)))))
 (unit-resolution ((_ th-lemma arith) (or $x831 $x189 $x310 $x561 $x562)) @x276 @x187 (unit-resolution @x633 (lemma @x512 $x367) $x178) @x878 @x229 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       77
 :arith-eq-adapter                102
 :arith-bound-propagations-cheap  81
 :arith-bound-propagations-lp     18
 :arith-conflicts                 137
 :arith-diseq                     82
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 10
 :arith-grobner-calls             7
 :arith-grobner-conflicts         4
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 38
 :arith-lower                     124
 :arith-make-feasible             98
 :arith-max-columns               77
 :arith-max-rows                  25
 :arith-nla-explanations          118
 :arith-nla-lemmas                134
 :arith-patches                   10
 :arith-patches-success           10
 :arith-propagations              81
 :arith-upper                     118
 :conflicts                       13
 :decisions                       202
 :del-clause                      374
 :final-checks                    49
 :max-memory                      5.08
 :memory                          3.17
 :mk-bool-var                     572
 :mk-clause                       551
 :num-allocs                      11026013
 :num-checks                      1
 :propagations                    242
 :rlimit-count                    8459
 :time                            0.04
 :total-time                      0.05)
