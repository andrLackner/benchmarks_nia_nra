unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x815 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x524 (>= ?x815 0)))
 (let (($x816 (= ?x815 0)))
 (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x808 (+ ?x66 ?x73 y!0 x!1)))
 (let ((?x796 (* x!1 x!1)))
 (let ((?x804 (* 3 ?x796)))
 (let ((?x789 (* y!0 y!0)))
 (let ((?x802 (* (- 3) ?x789)))
 (let ((?x528 (* (- 3) x!1)))
 (let ((?x777 (* x!1 x!1 x!1)))
 (let ((?x783 (* (- 1) ?x777)))
 (let ((?x594 (* (- 1) (* y!0 y!0 y!0))))
 (let ((?x801 (* (- 2) y!0)))
 (let ((?x136 (* 6 (* y!0 y!0 x!1))))
 (let ((?x343 (* (- 1) (* y!0 x!1 x!1 x!1))))
 (let ((?x337 (* (- 1) (* y!0 y!0 y!0 x!1 x!1))))
 (let ((?x237 (+ 1 ?x337 (* (- 3) (* y!0 y!0 x!1 x!1)) ?x343 ?x136 (* 2 (* y!0 y!0 y!0 x!1)) (* 3 (* y!0 x!1)) ?x801 ?x594 ?x783 ?x528 ?x802 ?x804)))
 (let ((?x178 (* ?x237 ?x808)))
 (let (($x349 (= ?x178 0)))
 (let (($x361 (not $x349)))
 (let ((?x440 (* 5 ?x796)))
 (let ((?x790 (* 3 ?x789)))
 (let ((?x769 (* 7 x!1)))
 (let ((?x771 (* (- 4) y!0)))
 (let ((?x156 (+ 3 (* (- 6) (* y!0 x!1 x!1)) ?x337 (* 3 (* y!0 y!0 x!1 x!1)) ?x343 ?x136 (* (- 2) (* y!0 y!0 y!0 x!1)) (* (- 9) (* y!0 x!1)) ?x771 ?x594 ?x777 ?x769 ?x790 ?x440)))
 (let ((?x238 (* ?x156 ?x808)))
 (let (($x842 (= ?x238 0)))
 (let (($x140 (or (not $x842) $x361)))
 (let (($x159 (and $x816 $x140)))
 (let ((?x770 (+ x!1 y!0 ?x66 ?x73)))
 (let ((?x795 (* (- 1) (* x!1 x!1 x!1 y!0))))
 (let ((?x775 (* 6 (* x!1 y!0 y!0))))
 (let ((?x336 (* (- 1) (* x!1 x!1 y!0 y!0 y!0))))
 (let ((?x806 (+ 1 ?x528 ?x801 ?x802 ?x594 (* 2 (* x!1 y!0 y!0 y!0)) ?x336 (* 3 (* x!1 y!0)) ?x775 ?x795 ?x804 ?x783 (* (- 3) (* x!1 x!1 y!0 y!0)))))
 (let ((?x798 (+ 3 ?x769 ?x771 ?x790 ?x594 (* (- 2) (* x!1 y!0 y!0 y!0)) ?x336 (* (- 9) (* x!1 y!0)) ?x775 (* (- 6) (* x!1 x!1 y!0)) ?x795 ?x440 ?x777 (* 3 (* x!1 x!1 y!0 y!0)))))
 (let (($x779 (and (= ?x770 0) (or (not (= (* ?x798 ?x770) 0)) (not (= (* ?x806 ?x770) 0))))))
 (let (($x675 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x323 (* x x x)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x243 (* x y y)))
 (let ((?x562 (* 6 ?x243)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x212 (* (- 1) (* y y y))))
 (let ((?x200 (* y y)))
 (let ((?x269 (* (- 3) ?x200)))
 (let ((?x413 (* (- 2) y)))
 (let ((?x879 (+ 1 (* (- 3) x) ?x413 ?x269 ?x212 (* 2 (* x y y y)) ?x221 (* 3 (* x y)) ?x562 ?x368 (* 3 (* x x)) ?x370 (* (- 3) (* x x y y)))))
 (let ((?x656 (+ 3 (* 7 x) (* (- 4) y) (* 3 ?x200) ?x212 (* (- 2) (* x y y y)) ?x221 (* (- 9) (* x y)) ?x562 (* (- 6) (* x x y)) ?x368 (* 5 (* x x)) ?x323 (* 3 (* x x y y)))))
 (let (($x92 (= ?x87 0)))
 (and $x92 (or (not (= (* ?x656 ?x87) 0)) (not (= (* ?x879 ?x87) 0)))))))))))))))))))) :qid k!27))
 ))
 (let (($x511 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x600 (+ x ?x66 ?x73 y)))
 (let ((?x306 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x328 (+ 1 y)))
 (let ((?x586 (+ (- 1) x)))
 (let ((?x142 (* (+ (* (- 1) (* ?x586 ?x586 ?x328 ?x328 ?x328)) ?x306 (* ?x586 ?x586)) ?x600)))
 (let ((?x163 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x148 (+ 1 x)))
 (let ((?x298 (+ (- 1) y)))
 (let ((?x246 (* (+ (* (- 1) (* ?x298 ?x298 ?x298 ?x148 ?x148)) ?x163 (* ?x148 ?x148)) ?x600)))
 (and (= ?x600 0) (or (not (= ?x246 0)) (not (= ?x142 0))))))))))))))) :qid k!27))
 ))
 (let ((?x375 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x323 (* x x x)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x243 (* x y y)))
 (let ((?x562 (* 6 ?x243)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x212 (* (- 1) (* y y y))))
 (let ((?x200 (* y y)))
 (let ((?x269 (* (- 3) ?x200)))
 (let ((?x413 (* (- 2) y)))
 (let ((?x879 (+ 1 (* (- 3) x) ?x413 ?x269 ?x212 (* 2 (* x y y y)) ?x221 (* 3 (* x y)) ?x562 ?x368 (* 3 (* x x)) ?x370 (* (- 3) (* x x y y)))))
 (let ((?x656 (+ 3 (* 7 x) (* (- 4) y) (* 3 ?x200) ?x212 (* (- 2) (* x y y y)) ?x221 (* (- 9) (* x y)) ?x562 (* (- 6) (* x x y)) ?x368 (* 5 (* x x)) ?x323 (* 3 (* x x y y)))))
 (let (($x92 (= ?x87 0)))
 (let (($x727 (and $x92 (or (not (= (* ?x656 ?x87) 0)) (not (= (* ?x879 ?x87) 0))))))
 (let ((?x600 (+ x ?x66 ?x73 y)))
 (let ((?x306 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x328 (+ 1 y)))
 (let ((?x586 (+ (- 1) x)))
 (let ((?x142 (* (+ (* (- 1) (* ?x586 ?x586 ?x328 ?x328 ?x328)) ?x306 (* ?x586 ?x586)) ?x600)))
 (let ((?x163 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x148 (+ 1 x)))
 (let ((?x298 (+ (- 1) y)))
 (let ((?x246 (* (+ (* (- 1) (* ?x298 ?x298 ?x298 ?x148 ?x148)) ?x163 (* ?x148 ?x148)) ?x600)))
 (let (($x290 (and (= ?x600 0) (or (not (= ?x246 0)) (not (= ?x142 0))))))
 (rewrite (= $x290 $x727))))))))))))))))))))))))))))))
 ))
 (let (($x63 (exists ((x Int) (y Int) )(! (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x57 (+ (- (* ?x38 ?x48 ?x48 ?x51 ?x51 ?x51) (* ?x48 ?x48 ?x48 ?x51)) (* ?x48 ?x48))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (+ (- (* ?x38 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39)) (* ?x34 ?x34))))
 (let (($x61 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x44) 0)) (not (= (* (+ (- (- ?x48 y00) x00) ?x51) ?x57) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x61))))))))) :qid k!27))
 ))
 (let ((?x591 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x600 (+ x ?x66 ?x73 y)))
 (let ((?x306 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x328 (+ 1 y)))
 (let ((?x586 (+ (- 1) x)))
 (let ((?x142 (* (+ (* (- 1) (* ?x586 ?x586 ?x328 ?x328 ?x328)) ?x306 (* ?x586 ?x586)) ?x600)))
 (let ((?x163 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x148 (+ 1 x)))
 (let ((?x298 (+ (- 1) y)))
 (let ((?x246 (* (+ (* (- 1) (* ?x298 ?x298 ?x298 ?x148 ?x148)) ?x163 (* ?x148 ?x148)) ?x600)))
 (let (($x290 (and (= ?x600 0) (or (not (= ?x246 0)) (not (= ?x142 0))))))
 (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x57 (+ (- (* ?x38 ?x48 ?x48 ?x51 ?x51 ?x51) (* ?x48 ?x48 ?x48 ?x51)) (* ?x48 ?x48))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (+ (- (* ?x38 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39)) (* ?x34 ?x34))))
 (let (($x61 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x44) 0)) (not (= (* (+ (- (- ?x48 y00) x00) ?x51) ?x57) 0)))))
 (let (($x62 (and (= (+ (- (- x y00) x00) y) 0) $x61)))
 (rewrite (= $x62 $x290))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x299 (mp (mp @x64 (quant-intro (proof-bind ?x591) (= $x63 $x511)) $x511) (rewrite (= $x511 $x511)) $x511)))
 (let ((@x807 (mp~ (mp @x299 (quant-intro (proof-bind ?x375) (= $x511 $x675)) $x675) (sk (~ $x675 $x779)) $x779)))
 (let ((@x585 (mp @x807 (rewrite (= $x779 $x159)) $x159)))
 (let ((@x338 (and-elim @x585 $x816)))
 (let ((@x400 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x816) $x524)) @x338 $x524)))
 (let (($x540 (<= ?x815 0)))
 (let ((@x153 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x816) $x540)) @x338 $x540)))
 (let (($x181 (not (<= ?x178 0))))
 (let (($x345 (>= ?x178 0)))
 (let (($x407 (>= ?x238 0)))
 (let (($x809 (<= ?x238 0)))
 (let ((@x186 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x842 (not $x809) (not $x407))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x809)) @x153 @x400 false) $x809) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x407)) @x153 @x400 false) $x407) $x842)))
 (let ((@x184 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x349 $x181 (not $x345))) (unit-resolution (and-elim @x585 $x140) @x186 $x361) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x345)) @x153 @x400 false) $x345) $x181)))
 ((_ th-lemma arith farkas 1 1 1) @x184 @x153 @x400 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             136
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 33
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.67
 :memory                    3.20
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1126616
 :num-checks                1
 :propagations              14
 :rlimit-count              2930
 :time                      0.01
 :total-time                0.01)
