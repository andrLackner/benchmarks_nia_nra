unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x293 (* (- 1) k!2)))
 (let ((?x249 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x293)))
 (let (($x377 (<= ?x249 (- 1))))
 (let (($x250 (= ?x249 (- 1))))
 (let ((?x333 (* (- 3) k!2)))
 (let ((?x275 (* (- 3) c!3)))
 (let ((?x287 (* 2 n!0)))
 (let ((?x152 (* n!0 k!2)))
 (let ((?x180 (+ 3 ?x152 (* n!0 m!1) ?x287 ?x275 ?x333)))
 (let ((?x321 (+ m!1 k!2)))
 (let ((?x371 (+ 6 m!1)))
 (let ((?x117 (+ 1 n!0)))
 (let ((?x151 (* (- 12) m!1)))
 (let ((?x195 (* (- 1) (* m!1 m!1))))
 (let ((?x243 (+ (- 36) ?x195 ?x151 (* ?x117 ?x117 ?x117 ?x371 ?x371 ?x371 ?x321 ?x321))))
 (let ((?x186 (* ?x243 ?x180)))
 (let (($x403 (= ?x186 0)))
 (let (($x137 (not $x403)))
 (let ((?x299 (+ ?x152 ?x287 ?x275 ?x293)))
 (let (($x294 (= ?x299 (- 1))))
 (let ((?x529 (* 5 k!2)))
 (let ((?x136 (* (- 1) (* k!2 k!2))))
 (let ((?x527 (* 18 c!3)))
 (let ((?x449 (* (- 9) n!0)))
 (let ((?x155 (+ (* 9 (* n!0 c!3)) ?x449 ?x527 ?x136 ?x529)))
 (let (($x223 (= ?x155 4)))
 (let ((?x334 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x126 (= ?x334 (- 6))))
 (let (($x401 (and $x126 $x223 $x294 $x250 $x137)))
 (let ((?x196 (+ (- 36) ?x151 (* ?x117 ?x117 ?x117 ?x371 ?x371 ?x371 (+ k!2 m!1) (+ k!2 m!1)) ?x195)))
 (let (($x286 (= (* ?x196 (+ 3 ?x275 ?x333 ?x287 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let (($x308 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x429 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x527 ?x529 ?x449 ?x136 (* 9 (* c!3 n!0))) 4) $x308 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x286))))
 (let (($x239 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x406 (+ 3 ?x218 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x426 (* (- 1) (* m m))))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x398 (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= (* (+ (- 36) (* (- 12) m) ?x398 ?x426) ?x406) 0))))))))))))))))))))) :qid k!34))
 ))
 (let (($x310 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x362 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x398 (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71)))
 (let (($x130 (not (= (* (+ (* (- 1) (* ?x413 ?x413)) ?x398) ?x362) 0))))
 (let (($x263 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x100 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x100 $x263 $x130))))))))))))))))) :qid k!34))
 ))
 (let ((?x177 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x406 (+ 3 ?x218 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x426 (* (- 1) (* m m))))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x398 (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x276 (and $x121 $x205 $x257 $x295 (not (= (* (+ (- 36) (* (- 12) m) ?x398 ?x426) ?x406) 0)))))
 (let ((?x402 (* (+ (* (- 1) (* ?x413 ?x413)) ?x398) (+ 3 ?x218 (* (- 4) k) (* ?x338 ?x71) (* (- 1) m) ?x59))))
 (let (($x130 (not (= ?x402 0))))
 (let (($x263 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x100 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x169 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x100 $x263 $x130)))
 (rewrite (= $x169 $x276)))))))))))))))))))))))))))
 ))
 (let (($x133 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x362 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x398 (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71)))
 (let (($x130 (not (= (* (+ (* (- 1) (* ?x413 ?x413)) ?x398) ?x362) 0))))
 (let (($x263 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x316 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x316 (- 4)) (= (+ ?x218 (* n k) (* (- 1) k) ?x59) (- 1)) $x263 $x130)))))))))))))) :qid k!34))
 ))
 (let ((?x141 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x362 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x398 (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71)))
 (let (($x130 (not (= (* (+ (* (- 1) (* ?x413 ?x413)) ?x398) ?x362) 0))))
 (let (($x263 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x100 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x169 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x100 $x263 $x130)))
 (let ((?x48 (* 9 n)))
 (let ((?x316 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x149 (and $x121 (= ?x316 (- 4)) (= (+ ?x218 (* n k) (* (- 1) k) ?x59) (- 1)) $x263 $x130)))
 (rewrite (= $x149 $x169)))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x82 (+ (* (- 1) ?x79 ?x79) (* ?x71 ?x71 ?x79 ?x79 ?x79 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x82) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x135 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x362 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x398 (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71)))
 (let (($x130 (not (= (* (+ (* (- 1) (* ?x413 ?x413)) ?x398) ?x362) 0))))
 (let (($x263 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x316 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x149 (and $x121 (= ?x316 (- 4)) (= (+ ?x218 (* n k) (* (- 1) k) ?x59) (- 1)) $x263 $x130)))
 (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x82 (+ (* (- 1) ?x79 ?x79) (* ?x71 ?x71 ?x79 ?x79 ?x79 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x82) 0))))))
 (rewrite (= $x87 $x149))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x337 (mp (mp @x89 (quant-intro (proof-bind ?x135) (= $x88 $x133)) $x133) (rewrite (= $x133 $x133)) $x133)))
 (let ((@x128 (mp (mp @x337 (quant-intro (proof-bind ?x141) (= $x133 $x310)) $x310) (quant-intro (proof-bind ?x177) (= $x310 $x239)) $x239)))
 (let ((@x379 (mp (mp~ @x128 (sk (~ $x239 $x429)) $x429) (rewrite (= $x429 $x401)) $x401)))
 (let ((@x237 (and-elim @x379 $x250)))
 (let ((@x357 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x377)) @x237 $x377)))
 (let (($x439 (>= ?x249 (- 1))))
 (let ((@x355 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x439)) @x237 $x439)))
 (let (($x370 (<= ?x299 (- 1))))
 (let ((@x234 (and-elim @x379 $x294)))
 (let ((@x364 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x370)) @x234 $x370)))
 (let (($x378 (>= ?x299 (- 1))))
 (let ((@x408 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x378)) @x234 $x378)))
 (let (($x414 (<= ?x334 (- 6))))
 (let ((@x181 (and-elim @x379 $x126)))
 (let ((@x399 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x126) $x414)) @x181 $x414)))
 (let (($x415 (>= ?x334 (- 6))))
 (let ((@x367 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x126) $x415)) @x181 $x415)))
 (let (($x284 (>= ?x243 0)))
 (let (($x1088 (>= ?x180 0)))
 (let ((@x1176 ((_ th-lemma arith) (hypothesis (not $x1088)) @x367 @x399 @x408 @x364 @x355 @x357 false)))
 (let ((@x1072 (lemma @x1176 $x1088)))
 (let ((@x502 (hypothesis (not $x284))))
 (let (($x850 (not (<= ?x186 0))))
 (let (($x427 (>= ?x186 0)))
 (let (($x663 (<= ?x180 0)))
 (let (($x503 (not $x427)))
 (let ((@x504 (hypothesis $x503)))
 (let (($x326 (<= ?x155 4)))
 (let ((@x233 (and-elim @x379 $x223)))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x223) $x326)) @x233 $x326)))
 (let (($x325 (>= ?x155 4)))
 (let ((@x521 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x223) $x325)) @x233 $x325)))
 (let ((@x505 ((_ th-lemma arith) @x504 @x502 @x367 @x399 @x367 @x399 @x521 @x394 @x521 @x394 @x521 @x394 @x408 @x364 @x355 @x357 @x408 @x364 @x367 @x399 @x355 @x357 @x367 @x399 @x408 @x364 @x355 @x357 false)))
 (let ((@x873 ((_ th-lemma arith farkas 1 1 1) @x504 (unit-resolution (lemma @x505 (or $x284 $x427)) @x504 $x284) (hypothesis (not $x663)) false)))
 (let ((@x1161 ((_ th-lemma arith farkas 1 1 1) @x504 (hypothesis $x1088) (unit-resolution (lemma @x873 (or $x663 $x427)) @x504 $x663) false)))
 (let ((@x676 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x403 $x850 $x503)) (and-elim @x379 $x137) (or $x850 $x503))))
 (let ((@x679 (unit-resolution @x676 (unit-resolution (lemma @x1161 (or (not $x1088) $x427)) @x1072 $x427) $x850)))
 (let ((@x1223 ((_ th-lemma arith farkas 1 1 1) @x679 (lemma ((_ th-lemma arith farkas 1 1 1) @x679 @x502 @x1072 false) $x284) (hypothesis (<= ?x243 0)) false)))
 ((_ th-lemma arith) @x679 (lemma @x1223 (not (<= ?x243 0))) @x367 @x399 @x408 @x364 @x355 @x357 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 60
 :arith-assert-diseq        14
 :arith-assert-lower        447
 :arith-assert-upper        338
 :arith-bound-prop          8
 :arith-branch-var          29
 :arith-conflicts           42
 :arith-eq-adapter          16
 :arith-fixed-eqs           82
 :arith-gcd-tests           181
 :arith-gomory-cuts         23
 :arith-grobner             41
 :arith-ineq-splits         29
 :arith-max-min             2644
 :arith-nonlinear-bounds    92
 :arith-nonlinear-horner    456
 :arith-num-rows            15
 :arith-offset-eqs          2
 :arith-patches             62
 :arith-patches_succ        4
 :arith-pivots              995
 :arith-pseudo-nonlinear    74
 :arith-row-summations      5593
 :arith-tableau-max-columns 43
 :arith-tableau-max-rows    15
 :conflicts                 46
 :decisions                 198
 :del-clause                91
 :final-checks              157
 :max-memory                3.97
 :memory                    3.20
 :minimized-lits            14
 :mk-bool-var               255
 :mk-clause                 168
 :num-allocs                77443353
 :num-checks                1
 :propagations              167
 :rlimit-count              964012
 :time                      0.53
 :total-time                0.53)
