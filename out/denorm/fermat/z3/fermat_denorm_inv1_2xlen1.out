unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x315 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x125 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 1) (* v!0 v!0)) (* (- 2) u!1) (* (- 4) r!2) ?x315 (* 2 v!0))))
 (let (($x225 (>= ?x125 0)))
 (let (($x309 (= ?x125 0)))
 (let ((?x139 (* (- 2) v!0)))
 (let ((?x146 (* (- 1) ?x315)))
 (let ((?x165 (* 4 r!2)))
 (let ((?x144 (* 2 u!1)))
 (let ((?x162 (* v!0 v!0)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x264 (+ ?x96 ?x112 ?x41 ?x46 ?x188 ?x162 ?x144 ?x165 ?x146 ?x139)))
 (let ((?x475 (+ u!1 r!2)))
 (let ((?x148 (+ 2 u!1)))
 (let ((?x478 (* ?x148 ?x475 ?x475 ?x475 ?x475 ?x475 ?x264 v!0 v!0 v!0 v!0)))
 (let (($x483 (= ?x478 0)))
 (let (($x481 (not $x483)))
 (let ((?x150 (+ r!2 (* (- 1) v!0))))
 (let ((?x137 (+ 2 v!0)))
 (let ((?x404 (* ?x137 ?x137 ?x137 ?x137 ?x150 ?x150 ?x150 ?x150 ?x150 ?x264 u!1)))
 (let (($x113 (= ?x404 0)))
 (let (($x250 (or (not $x113) $x481)))
 (let (($x246 (and $x309 $x250)))
 (let ((?x149 (+ ?x165 ?x144 ?x139 ?x96 ?x112 ?x41 ?x146 ?x162 ?x46 ?x188)))
 (let ((?x294 (+ r!2 u!1)))
 (let (($x190 (= (* ?x148 ?x294 ?x294 ?x294 ?x294 ?x294 ?x149 v!0 v!0 v!0 v!0) 0)))
 (let (($x247 (= (* ?x137 ?x137 ?x137 ?x137 ?x150 ?x150 ?x150 ?x150 ?x150 ?x149 u!1) 0)))
 (let (($x244 (and (= ?x149 0) (or (not $x247) (not $x190)))))
 (let (($x385 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x262 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v) 0)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x101 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u) 0)))
 (let (($x199 (= ?x194 0)))
 (and $x199 (or (not $x101) (not $x262))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x201 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x418 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x374 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x418 v v v v) 0)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x259 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u) 0)))
 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not $x259) (not $x374))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x386 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x262 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v) 0)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x101 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u) 0)))
 (let (($x199 (= ?x194 0)))
 (let (($x233 (and $x199 (or (not $x101) (not $x262)))))
 (let ((?x418 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* ?x217 ?x217)) ?x45 ?x46 ?x188)))
 (let (($x374 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x418 v v v v) 0)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* ?x206 ?x206) ?x46 ?x188)))
 (let (($x259 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u) 0)))
 (let (($x366 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not $x259) (not $x374)))))
 (rewrite (= $x366 $x233)))))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((r Int) (u Int) (v Int) )(! (let ((?x74 (+ u 2)))
 (let ((?x70 (+ r u)))
 (let ((?x66 (- 1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x70 ?x70 ?x70 v v ?x66 ?x70 ?x70 ?x74 v v)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x52 ?x52 ?x52 ?x57 ?x57 ?x66 ?x52 ?x52 u ?x57 ?x57)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x204 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x418 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x374 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x418 v v v v) 0)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x259 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u) 0)))
 (let (($x366 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not $x259) (not $x374)))))
 (let ((?x74 (+ u 2)))
 (let ((?x66 (- 1)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x70 ?x70 ?x70 v v ?x66 ?x70 ?x70 ?x74 v v)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x52 ?x52 ?x52 ?x57 ?x57 ?x66 ?x52 ?x52 u ?x57 ?x57)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x87 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))
 (rewrite (= $x87 $x366)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x200 (mp (mp @x89 (quant-intro (proof-bind ?x204) (= $x88 $x201)) $x201) (rewrite (= $x201 $x201)) $x201)))
 (let ((@x292 (mp~ (mp @x200 (quant-intro (proof-bind ?x386) (= $x201 $x385)) $x385) (sk (~ $x385 $x244)) $x244)))
 (let ((@x476 (mp @x292 (rewrite (= $x244 $x246)) $x246)))
 (let ((@x479 (and-elim @x476 $x309)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x225)) @x479 $x225)))
 (let (($x123 (<= ?x125 0)))
 (let ((@x269 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x123)) @x479 $x123)))
 (let (($x415 (not (<= ?x478 0))))
 (let (($x240 (>= ?x478 0)))
 (let (($x134 (>= ?x404 0)))
 (let (($x207 (<= ?x404 0)))
 (let ((@x168 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x113 (not $x207) (not $x134))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x207)) @x269 @x295 false) $x207) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x134)) @x269 @x295 false) $x134) $x113)))
 (let ((@x408 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x483 $x415 (not $x240))) (unit-resolution (and-elim @x476 $x250) @x168 $x481) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x240)) @x269 @x295 false) $x240) $x415)))
 ((_ th-lemma arith farkas 1 1 1) @x408 @x269 @x295 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        33
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             112
 :arith-nonlinear-bounds    16
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.59
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1107366
 :num-checks                1
 :propagations              14
 :rlimit-count              2156
 :time                      0.01
 :total-time                0.01)
