unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1419 (to_real d!1)))
 (let ((?x64 (to_real b00)))
 (let ((?x711 (* ?x64 ?x1419)))
 (let ((?x1242 (+ ?x711 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x142 (<= ?x1242 0.0)))
 (let (($x1670 (= 0.0 ?x1242)))
 (let ((@x1313 (symm (commutativity (= $x1670 (= ?x1242 0.0))) (= (= ?x1242 0.0) $x1670))))
 (let ((@x1328 (unit-resolution (hypothesis (not $x1670)) (mp ((_ th-lemma arith) (= ?x1242 0.0)) @x1313 $x1670) false)))
 (let ((@x1331 (lemma @x1328 $x1670)))
 (let ((@x1692 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1670) $x142)) @x1331 $x142)))
 (let (($x1549 (>= ?x1242 0.0)))
 (let ((@x810 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1670) $x1549)) @x1331 $x1549)))
 (let ((?x1421 (to_real a!3)))
 (let ((?x1005 (to_real b!2)))
 (let ((?x662 (to_real y!0)))
 (let ((?x60 (to_real d00)))
 (let ((?x545 (+ (* (/ 1.0 16.0) (* ?x60 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1421 ?x1421 ?x1421)) (* (/ 1.0 4.0) (* ?x60 ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1421 ?x1421 ?x1421)) (* (- (/ 1.0 16.0)) (* ?x64 ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421)) (* (/ 1.0 32.0) (* ?x64 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419)) (* (- (/ 1.0 4.0)) (* ?x64 ?x662 ?x662 ?x662 ?x1005 ?x1419 ?x1421 ?x1421 ?x1421)) (* (/ 1.0 64.0) (* ?x60 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421)) (* (- (/ 1.0 64.0)) (* ?x64 ?x662 ?x662 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x1421)) (* (- (/ 1.0 32.0)) (* ?x60 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419)) (* (- (/ 1.0 16.0)) (* ?x64 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421 ?x1421)) (* (/ 1.0 16.0) (* ?x60 ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421)))))
 (let (($x1030 (>= ?x545 0.0)))
 (let (($x820 (not $x1030)))
 (let (($x513 (<= ?x545 0.0)))
 (let ((?x572 (* ?x60 ?x1005)))
 (let ((?x1544 (+ (* (- 1.0) (to_real (* d00 b!2))) ?x572)))
 (let (($x1269 (<= ?x1544 0.0)))
 (let (($x1243 (= 0.0 ?x1544)))
 (let ((@x1253 (symm (commutativity (= $x1243 (= ?x1544 0.0))) (= (= ?x1544 0.0) $x1243))))
 (let ((@x1278 (mp ((_ th-lemma arith) (= ?x1544 0.0)) @x1253 $x1243)))
 (let ((@x1733 (lemma (unit-resolution (hypothesis (not $x1243)) @x1278 false) $x1243)))
 (let ((@x1282 ((_ th-lemma arith triangle-eq) (or (not $x1243) $x1269))))
 (let (($x1070 (>= ?x1544 0.0)))
 (let ((@x139 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1243) $x1070)) @x1733 $x1070)))
 (let ((?x753 (* (- 2) (* b!2 y!0))))
 (let ((?x1161 (* a!3 d!1)))
 (let ((?x350 (+ (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) ?x1161 ?x753)))
 (let (($x841 (>= ?x350 0)))
 (let (($x488 (= 0 ?x350)))
 (let ((@x893 (symm (commutativity (= $x488 (= ?x350 0))) (= (= ?x350 0) $x488))))
 (let (($x166 (= ?x350 0)))
 (let ((?x1926 (* ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1421)))
 (let ((?x1330 (* (- (/ 3.0 2.0)) ?x1926)))
 (let ((?x1839 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1421 ?x1421)))
 (let ((?x1558 (* (- (/ 3.0 8.0)) ?x1839)))
 (let ((?x1693 (* ?x662 ?x662 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421)))
 (let ((?x692 (* (- (/ 9.0 4.0)) ?x1693)))
 (let ((?x1656 (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x1421 ?x1421)))
 (let ((?x1658 (* (- (/ 1.0 64.0)) ?x1656)))
 (let ((?x1647 (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421 ?x1421)))
 (let ((?x1649 (* (- (/ 3.0 16.0)) ?x1647)))
 (let ((?x1642 (* ?x662 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x1421)))
 (let ((?x1650 (* (- (/ 1.0 32.0)) ?x1642)))
 (let ((?x1641 (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421)))
 (let ((?x1643 (* (- (/ 3.0 16.0)) ?x1641)))
 (let ((?x1635 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419)))
 (let ((?x1645 (* (- (/ 1.0 32.0)) ?x1635)))
 (let ((?x1629 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419)))
 (let ((?x1639 (* (- (/ 1.0 32.0)) ?x1629)))
 (let ((?x1624 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419)))
 (let ((?x1637 (* (/ 1.0 16.0) ?x1624)))
 (let ((?x1564 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1421 ?x1421 ?x1421)))
 (let ((?x279 (* (- (/ 1.0 8.0)) ?x1564)))
 (let ((?x1454 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421)))
 (let ((?x435 (* (- (/ 9.0 4.0)) ?x1454)))
 (let ((?x1347 (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x1421)))
 (let ((?x1344 (* (- (/ 1.0 32.0)) ?x1347)))
 (let ((?x1297 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419)))
 (let ((?x812 (* (- (/ 3.0 4.0)) ?x1297)))
 (let ((?x1295 (* ?x662 ?x662 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421)))
 (let ((?x1288 (* (- (/ 3.0 16.0)) ?x1295)))
 (let ((?x1293 (* ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005)))
 (let ((?x640 (* (- (/ 1.0 2.0)) ?x1293)))
 (let ((?x1289 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419)))
 (let ((?x1142 (* (- (/ 3.0 8.0)) ?x1289)))
 (let ((?x1283 (* ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1421 ?x1421)))
 (let ((?x267 (* (- (/ 3.0 2.0)) ?x1283)))
 (let ((?x1200 (* ?x1005 ?x1419 ?x1419 ?x1419 ?x1421 ?x1421 ?x1421)))
 (let ((?x1202 (* (- (/ 1.0 16.0)) ?x1200)))
 (let ((?x1094 (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419)))
 (let ((?x1095 (* (/ 1.0 64.0) ?x1094)))
 (let ((?x1091 (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421 ?x1421)))
 (let ((?x1504 (* (- (/ 1.0 32.0)) ?x1091)))
 (let ((?x1088 (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421)))
 (let ((?x1063 (* (- (/ 3.0 32.0)) ?x1088)))
 (let ((?x1087 (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421)))
 (let ((?x1062 (* (- (/ 3.0 32.0)) ?x1087)))
 (let ((?x1032 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419)))
 (let ((?x1296 (* (- (/ 3.0 16.0)) ?x1032)))
 (let ((?x1018 (* ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421)))
 (let ((?x1004 (* (- (/ 1.0 8.0)) ?x1018)))
 (let ((?x946 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419)))
 (let ((?x356 (* (/ 1.0 16.0) ?x946)))
 (let ((?x916 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421)))
 (let ((?x1292 (* (- (/ 3.0 8.0)) ?x916)))
 (let ((?x909 (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419)))
 (let ((?x1254 (* (- (/ 1.0 64.0)) ?x909)))
 (let ((?x895 (* ?x662 ?x662 ?x662 ?x1005 ?x1421 ?x1421 ?x1421)))
 (let ((?x1291 (* (- (/ 1.0 2.0)) ?x895)))
 (let ((?x884 (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x1419 ?x1421)))
 (let ((?x1694 (* (- (/ 1.0 128.0)) ?x884)))
 (let ((?x876 (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x1419)))
 (let ((?x716 (* (- (/ 1.0 128.0)) ?x876)))
 (let ((?x845 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419)))
 (let ((?x1038 (* (- (/ 3.0 32.0)) ?x845)))
 (let ((?x768 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421)))
 (let ((?x1255 (* (- (/ 9.0 8.0)) ?x768)))
 (let ((?x756 (* ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421)))
 (let ((?x1902 (* (- (/ 1.0 4.0)) ?x756)))
 (let ((?x749 (* ?x662 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421 ?x1421)))
 (let ((?x1678 (* (- (/ 3.0 8.0)) ?x749)))
 (let ((?x738 (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419)))
 (let ((?x1060 (* (- (/ 1.0 32.0)) ?x738)))
 (let ((?x709 (* ?x662 ?x662 ?x1005 ?x1419 ?x1421 ?x1421 ?x1421)))
 (let ((?x1264 (* (- (/ 3.0 4.0)) ?x709)))
 (let ((?x646 (* ?x662 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421)))
 (let ((?x1448 (* (- (/ 9.0 8.0)) ?x646)))
 (let ((?x615 (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419)))
 (let ((?x586 (* (- (/ 1.0 16.0)) ?x615)))
 (let ((?x571 (* ?x662 ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419)))
 (let ((?x429 (* (- (/ 1.0 8.0)) ?x571)))
 (let ((?x512 (* ?x662 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421 ?x1421)))
 (let ((?x721 (* (- (/ 3.0 32.0)) ?x512)))
 (let ((?x489 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421)))
 (let ((?x516 (* (- (/ 3.0 16.0)) ?x489)))
 (let ((?x361 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421)))
 (let ((?x328 (* (- (/ 3.0 8.0)) ?x361)))
 (let ((?x337 (* ?x662 ?x662 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421)))
 (let ((?x486 (* (- (/ 1.0 32.0)) ?x337)))
 (let ((?x330 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1421)))
 (let ((?x1627 (* (- (/ 3.0 8.0)) ?x330)))
 (let ((?x327 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421 ?x1421)))
 (let ((?x1560 (* (- (/ 1.0 8.0)) ?x327)))
 (let ((?x323 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421)))
 (let ((?x332 (* (- (/ 3.0 8.0)) ?x323)))
 (let ((?x225 (* ?x662 ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005)))
 (let ((?x316 (* (- (/ 1.0 8.0)) ?x225)))
 (let ((?x136 (* ?x662 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419)))
 (let ((?x214 (* (- (/ 1.0 8.0)) ?x136)))
 (let ((?x1657 (+ ?x214 ?x316 ?x332 ?x1560 ?x1627 ?x486 ?x328 ?x516 ?x721 ?x429 ?x586 ?x1448 ?x1264 ?x1060 ?x1678 ?x1902 ?x1255 ?x1038 ?x716 ?x1694 ?x1291 ?x1254 ?x1292 ?x356 ?x1004 ?x1296 ?x1062 ?x1063 ?x1504 ?x1095 ?x1202 ?x267 ?x1142 ?x640 ?x1288 ?x812 ?x1344 ?x435 ?x279 ?x1637 ?x1639 ?x1645 ?x1643 ?x1650 ?x1649 ?x1658 ?x692 ?x1558 ?x1330)))
 (let ((?x1660 (* (+ (* (- (/ 1.0 2.0)) ?x572) (* (/ 1.0 2.0) ?x711)) ?x1657)))
 (let (($x885 (= ?x1660 0.0)))
 (let (($x1661 (not $x885)))
 (let (($x422 (= ?x545 0.0)))
 (let (($x259 (not $x422)))
 (let (($x1006 (or $x259 $x1661)))
 (let ((?x222 (* d00 b!2)))
 (let ((?x852 (+ ?x222 (* (- 1) (* b00 d!1)))))
 (let (($x585 (= ?x852 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let ((?x578 (+ ?x35 ?x108 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3)))))
 (let (($x790 (= ?x578 0)))
 (let (($x1268 (and $x790 $x585 $x166 $x1006)))
 (let ((?x1884 (+ (* (- (/ 1.0 8.0)) (* ?x1005 ?x1005 ?x1419 ?x1421 ?x1421 ?x662 ?x662 ?x662)) (* (- (/ 1.0 2.0)) (* ?x1005 ?x1421 ?x1421 ?x1421 ?x662 ?x662 ?x662)) (* (- (/ 1.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1421 ?x1421 ?x1421 ?x662 ?x662)) (* (/ 1.0 16.0) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x662 ?x662)) (* (- (/ 1.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x662 ?x662 ?x662)) ?x1254 (* (- (/ 1.0 32.0)) (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421 ?x662 ?x662)) ?x1344 (* (- (/ 3.0 16.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421 ?x662)) (* (- (/ 3.0 32.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x662)) ?x1658 (* (- (/ 3.0 32.0)) (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1421 ?x1421 ?x662)) (* (- (/ 3.0 16.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x662 ?x662)) (* (- (/ 3.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x662 ?x662)) (* (- (/ 3.0 16.0)) (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421 ?x662 ?x662)) (* (- (/ 1.0 4.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x662 ?x662 ?x662)) (* (- (/ 1.0 2.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x662 ?x662 ?x662)) ?x586 ?x1643 ?x1649 ?x1202 (* (- (/ 3.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x662)) (* (- (/ 9.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x662)) (* (- (/ 9.0 8.0)) (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1421 ?x1421 ?x662)) (* (- (/ 3.0 8.0)) (* ?x1005 ?x1419 ?x1419 ?x1421 ?x1421 ?x1421 ?x662)) (* (- (/ 3.0 4.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x662 ?x662)) (* (- (/ 9.0 4.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x662 ?x662)) (* (- (/ 9.0 4.0)) (* ?x1005 ?x1005 ?x1419 ?x1421 ?x1421 ?x662 ?x662)) (* (- (/ 3.0 4.0)) (* ?x1005 ?x1419 ?x1421 ?x1421 ?x1421 ?x662 ?x662)) (* (- (/ 3.0 2.0)) (* ?x1005 ?x1005 ?x1005 ?x1421 ?x662 ?x662 ?x662)) (* (- (/ 3.0 2.0)) (* ?x1005 ?x1005 ?x1421 ?x1421 ?x662 ?x662 ?x662)) (* (- (/ 1.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x662 ?x662)) ?x1060 ?x1062 ?x1063 ?x1504 (* (- (/ 1.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x662)) (* (- (/ 3.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x662)) (* (- (/ 3.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421 ?x662)) (* (- (/ 1.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1421 ?x1421 ?x1421 ?x662)) (* (- (/ 3.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1005 ?x1421 ?x662 ?x662)) (* (- (/ 3.0 8.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x1421 ?x1421 ?x662 ?x662)) ?x1095 (* (/ 1.0 16.0) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x662)) (* (- (/ 1.0 32.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x662 ?x662)) ?x716 ?x1694 (* (- (/ 1.0 32.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x662)) (* (- (/ 1.0 32.0)) (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x1421 ?x662)))))
 (let (($x340 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x1005 ?x60)) (* (/ 1.0 2.0) (* ?x1419 ?x64))) ?x1884) 0.0)))
 (let ((?x1631 (+ (* (/ 1.0 16.0) (* ?x1005 ?x1005 ?x1005 ?x60 ?x1419 ?x1421 ?x1421 ?x662 ?x662 ?x662)) (* (- (/ 1.0 16.0)) (* ?x1005 ?x1005 ?x1419 ?x1419 ?x64 ?x1421 ?x1421 ?x662 ?x662 ?x662)) (* (/ 1.0 4.0) (* ?x1005 ?x1005 ?x60 ?x1421 ?x1421 ?x1421 ?x662 ?x662 ?x662)) (* (- (/ 1.0 4.0)) (* ?x1005 ?x1419 ?x64 ?x1421 ?x1421 ?x1421 ?x662 ?x662 ?x662)) (* (/ 1.0 16.0) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x60 ?x1421 ?x1421 ?x1421 ?x662 ?x662)) (* (- (/ 1.0 16.0)) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x64 ?x1421 ?x1421 ?x1421 ?x662 ?x662)) (* (- (/ 1.0 32.0)) (* ?x1005 ?x1005 ?x1005 ?x1005 ?x60 ?x1419 ?x662 ?x662)) (* (/ 1.0 32.0) (* ?x1005 ?x1005 ?x1005 ?x1419 ?x1419 ?x64 ?x662 ?x662)) (* (/ 1.0 64.0) (* ?x1005 ?x1005 ?x1005 ?x60 ?x1419 ?x1419 ?x1419 ?x1421 ?x662 ?x662)) (* (- (/ 1.0 64.0)) (* ?x1005 ?x1005 ?x1419 ?x1419 ?x1419 ?x1419 ?x64 ?x1421 ?x662 ?x662)))))
 (let (($x1009 (= (+ ?x1161 ?x753 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x280 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x108 (* 2 (* y!0 b00))) 0)))
 (let (($x620 (and $x280 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x1009 (or (not (= ?x1631 0.0)) (not $x340)))))
 (let (($x231 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x1919 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 2.0)) (* ?x56 ?x67 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x56 ?x56 ?x68 ?x68 ?x68)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x68)) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (- (/ 9.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 9.0 4.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 3.0 4.0)) (* ?x56 ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x56 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x67 ?x68 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)))))
 (let ((?x206 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x455 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68))))
 (let ((?x444 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x62 ?x67 ?x68 ?x68))))
 (let ((?x413 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x403 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x393 (* (- (/ 1.0 4.0)) (* ?x56 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x382 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x371 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x360 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x457 (+ ?x360 ?x371 ?x382 ?x393 ?x403 ?x413 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x68 ?x68)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 (to_real b00) ?x68 ?x68)) ?x444 ?x455)))
 (let ((?x48 (* a d)))
 (let ((?x177 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (and $x140 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x177 0) (or (not (= ?x457 0.0)) (not (= (* ?x206 ?x1919) 0.0))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x1199 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x187 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x294 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x621 (+ (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 2.0)) (* ?x56 ?x294 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x294 ?x294 ?x294 ?x187 ?x187)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x187 ?x187)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x294 ?x187 ?x187)))))
 (let ((?x296 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x538 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x68 ?x68 ?x68 ?x56 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x303 (or (not (= (* ?x296 ?x538) 0.0)) (not (= (* ?x296 ?x621) 0.0)))))
 (let ((?x247 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x255 (= ?x247 0)))
 (let ((?x551 (* d00 a)))
 (let ((?x522 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x551)))
 (and (= ?x522 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x255 $x303))))))))))))))) :qid k!33))
 ))
 (let ((?x618 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x1919 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 2.0)) (* ?x56 ?x67 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x56 ?x56 ?x68 ?x68 ?x68)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x68)) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (- (/ 9.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 9.0 4.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 3.0 4.0)) (* ?x56 ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x56 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x67 ?x68 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)))))
 (let ((?x206 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x455 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68))))
 (let ((?x444 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x62 ?x67 ?x68 ?x68))))
 (let ((?x413 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x403 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x393 (* (- (/ 1.0 4.0)) (* ?x56 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x382 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x371 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x360 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x457 (+ ?x360 ?x371 ?x382 ?x393 ?x403 ?x413 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x68 ?x68)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 (to_real b00) ?x68 ?x68)) ?x444 ?x455)))
 (let ((?x48 (* a d)))
 (let ((?x177 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (let (($x1944 (and $x140 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x177 0) (or (not (= ?x457 0.0)) (not (= (* ?x206 ?x1919) 0.0))))))
 (let ((?x187 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x294 (+ ?x67 ?x56)))
 (let ((?x621 (+ (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 2.0)) (* ?x56 ?x294 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x294 ?x294 ?x294 ?x187 ?x187)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x187 ?x187)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x294 ?x187 ?x187)))))
 (let ((?x296 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x538 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x68 ?x68 ?x68 ?x56 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x303 (or (not (= (* ?x296 ?x538) 0.0)) (not (= (* ?x296 ?x621) 0.0)))))
 (let ((?x247 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x255 (= ?x247 0)))
 (let ((?x551 (* d00 a)))
 (let (($x521 (= (+ (* 2 ?x107) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x551) 0)))
 (let (($x295 (and $x521 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x255 $x303)))
 (rewrite (= $x295 $x1944))))))))))))))))))))))))))))))))))))
 ))
 (let (($x318 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x187 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x294 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x621 (+ (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 2.0)) (* ?x56 ?x294 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x294 ?x294 ?x294 ?x187 ?x187)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x187 ?x187)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x294 ?x187 ?x187)))))
 (let ((?x296 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x538 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x68 ?x68 ?x68 ?x56 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x303 (or (not (= (* ?x296 ?x538) 0.0)) (not (= (* ?x296 ?x621) 0.0)))))
 (let ((?x247 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x255 (= ?x247 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x1133 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x1133 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x255 $x303))))))))))))))))) :qid k!33))
 ))
 (let ((?x249 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x187 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x294 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x621 (+ (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 2.0)) (* ?x56 ?x294 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x294 ?x294 ?x294 ?x187 ?x187)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x187 ?x187)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x294 ?x187 ?x187)))))
 (let ((?x296 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x538 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x68 ?x68 ?x68 ?x56 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x303 (or (not (= (* ?x296 ?x538) 0.0)) (not (= (* ?x296 ?x621) 0.0)))))
 (let ((?x247 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x255 (= ?x247 0)))
 (let ((?x551 (* d00 a)))
 (let ((?x522 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x551)))
 (let (($x295 (and (= ?x522 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x255 $x303)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x632 (and (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) ?x551)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x255 $x303)))
 (rewrite (= $x632 $x295))))))))))))))))))))))
 ))
 (let (($x99 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x68 (to_real y)))
 (let ((?x83 (+ ?x68 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x88 (- (* (to_real (- 1)) ?x84 ?x84 ?x58 ?x58 ?x63 ?x83 ?x83 ?x83) (* ?x84 ?x84 ?x84 ?x58 ?x83 ?x83 ?x83))))
 (let ((?x91 (+ (- ?x88 (* ?x84 ?x84 ?x84 ?x58 ?x58 ?x58 ?x83 ?x83)) (* ?x58 ?x58 ?x58 ?x63 ?x83 ?x83))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let (($x95 (= (* ?x66 (- ?x91 (* ?x84 ?x58 ?x58 ?x63 ?x63 ?x63 ?x83 ?x83))) ?x79)))
 (let ((?x67 (to_real a)))
 (let ((?x72 (- (* (to_real (- 1)) ?x67 ?x67 ?x58 ?x58 ?x63 ?x68 ?x68 ?x68) (* ?x67 ?x67 ?x67 ?x58 ?x68 ?x68 ?x68))))
 (let ((?x75 (+ (- ?x72 (* ?x67 ?x67 ?x67 ?x58 ?x58 ?x58 ?x68 ?x68)) (* ?x58 ?x58 ?x58 ?x63 ?x68 ?x68))))
 (let (($x80 (= (* ?x66 (- ?x75 (* ?x67 ?x58 ?x58 ?x63 ?x63 ?x63 ?x68 ?x68))) ?x79)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x80) (not $x95)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x314 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x187 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x294 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x621 (+ (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 2.0)) (* ?x56 ?x294 ?x294 ?x294 ?x187 ?x187 ?x187)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x294 ?x294 ?x294 ?x187 ?x187)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x187 ?x187)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x294 ?x187 ?x187)))))
 (let ((?x296 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x538 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x68 ?x68 ?x68 ?x56 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x303 (or (not (= (* ?x296 ?x538) 0.0)) (not (= (* ?x296 ?x621) 0.0)))))
 (let ((?x247 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x255 (= ?x247 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x1133 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x632 (and $x1133 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x255 $x303)))
 (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x83 (+ ?x68 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x88 (- (* (to_real (- 1)) ?x84 ?x84 ?x58 ?x58 ?x63 ?x83 ?x83 ?x83) (* ?x84 ?x84 ?x84 ?x58 ?x83 ?x83 ?x83))))
 (let ((?x91 (+ (- ?x88 (* ?x84 ?x84 ?x84 ?x58 ?x58 ?x58 ?x83 ?x83)) (* ?x58 ?x58 ?x58 ?x63 ?x83 ?x83))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let (($x95 (= (* ?x66 (- ?x91 (* ?x84 ?x58 ?x58 ?x63 ?x63 ?x63 ?x83 ?x83))) ?x79)))
 (let ((?x72 (- (* (to_real (- 1)) ?x67 ?x67 ?x58 ?x58 ?x63 ?x68 ?x68 ?x68) (* ?x67 ?x67 ?x67 ?x58 ?x68 ?x68 ?x68))))
 (let ((?x75 (+ (- ?x72 (* ?x67 ?x67 ?x67 ?x58 ?x58 ?x58 ?x68 ?x68)) (* ?x58 ?x58 ?x58 ?x63 ?x68 ?x68))))
 (let (($x80 (= (* ?x66 (- ?x75 (* ?x67 ?x58 ?x58 ?x63 ?x63 ?x63 ?x68 ?x68))) ?x79)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x98 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x80) (not $x95)))))
 (rewrite (= $x98 $x632))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x604 (mp (mp @x100 (quant-intro (proof-bind ?x314) (= $x99 $x318)) $x318) (rewrite (= $x318 $x318)) $x318)))
 (let ((@x1016 (mp (mp @x604 (quant-intro (proof-bind ?x249) (= $x318 $x1199)) $x1199) (quant-intro (proof-bind ?x618) (= $x1199 $x231)) $x231)))
 (let ((@x1850 (mp (mp~ @x1016 (sk (~ $x231 $x620)) $x620) (rewrite (= $x620 $x1268)) $x1268)))
 (let ((@x894 (mp (and-elim @x1850 $x166) @x893 $x488)))
 (let (($x836 (<= ?x350 0)))
 (let (($x466 (>= ?x852 0)))
 (let (($x654 (= 0 ?x852)))
 (let ((@x1250 (mp (and-elim @x1850 $x585) (symm (commutativity (= $x654 $x585)) (= $x585 $x654)) $x654)))
 (let ((@x1664 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x654) $x466)) @x1250 $x466)))
 (let (($x319 (<= ?x852 0)))
 (let ((@x1251 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x654) $x319)) @x1250 $x319)))
 (let (($x780 (>= ?x578 0)))
 (let (($x1247 (= 0 ?x578)))
 (let ((@x881 (mp (and-elim @x1850 $x790) (symm (commutativity (= $x1247 $x790)) (= $x790 $x1247)) $x1247)))
 (let (($x1685 (<= ?x578 0)))
 (let (($x856 (not $x466)))
 (let (($x1588 (not $x319)))
 (let (($x1699 (not $x1070)))
 (let (($x850 (or $x513 $x1699 $x1588 (not $x841) (not $x1269) (not $x836) (not $x780) (not $x1685) $x856)))
 (let ((@x905 (unit-resolution ((_ th-lemma arith) $x850) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1247) $x1685)) @x881 $x1685) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1247) $x780)) @x881 $x780) @x1251 @x1664 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x488) $x836)) @x894 $x836) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x488) $x841)) @x894 $x841) (hypothesis (not $x513)) @x139 (unit-resolution @x1282 @x1733 $x1269) false)))
 (let (($x493 (= 0.0 ?x545)))
 (let (($x1592 (not $x493)))
 (let ((@x923 (monotonicity (symm (commutativity (= $x493 $x422)) (= $x422 $x493)) (= $x259 $x1592))))
 (let ((?x1541 (+ (* (/ 1.0 128.0) ?x876) (* (/ 1.0 128.0) ?x884) (* (/ 1.0 2.0) ?x895) (* (/ 1.0 64.0) ?x909) (* (/ 3.0 8.0) ?x916) (* (- (/ 1.0 16.0)) ?x946) (* (/ 1.0 8.0) ?x1018) (* (/ 3.0 16.0) ?x1032) (* (/ 3.0 32.0) ?x1087) (* (/ 3.0 32.0) ?x1088) (* (/ 1.0 32.0) ?x1091) (* (- (/ 1.0 64.0)) ?x1094) (* (/ 1.0 16.0) ?x1200) (* (/ 3.0 2.0) ?x1283) (* (/ 3.0 8.0) ?x1289) (* (/ 1.0 2.0) ?x1293) (* (/ 3.0 16.0) ?x1295) (* (/ 3.0 4.0) ?x1297) (* (/ 1.0 32.0) ?x1347) (* (/ 9.0 4.0) ?x1454) (* (/ 1.0 8.0) ?x1564) (* (- (/ 1.0 16.0)) ?x1624) (* (/ 1.0 32.0) ?x1629) (* (/ 1.0 32.0) ?x1635) (* (/ 3.0 16.0) ?x1641) (* (/ 1.0 32.0) ?x1642) (* (/ 3.0 16.0) ?x1647) (* (/ 1.0 64.0) ?x1656) (* (/ 9.0 4.0) ?x1693) (* (/ 3.0 8.0) ?x1839) (* (/ 3.0 2.0) ?x1926) (* (/ 1.0 8.0) ?x136) (* (/ 1.0 8.0) ?x225) (* (/ 3.0 8.0) ?x323) (* (/ 1.0 8.0) ?x327) (* (/ 3.0 8.0) ?x330) (* (/ 1.0 32.0) ?x337) (* (/ 3.0 8.0) ?x361) (* (/ 3.0 16.0) ?x489) (* (/ 3.0 32.0) ?x512) (* (/ 1.0 8.0) ?x571) (* (/ 1.0 16.0) ?x615) (* (/ 9.0 8.0) ?x646) (* (/ 3.0 4.0) ?x709) (* (/ 1.0 32.0) ?x738) (* (/ 3.0 8.0) ?x749) (* (/ 1.0 4.0) ?x756) (* (/ 9.0 8.0) ?x768) (* (/ 3.0 32.0) ?x845))))
 (let (($x638 (<= ?x1541 0.0)))
 (let (($x126 (not $x638)))
 (let ((?x134 (+ ?x716 ?x1694 ?x1291 ?x1254 ?x1292 ?x356 ?x1004 ?x1296 ?x1062 ?x1063 ?x1504 ?x1095 ?x1202 ?x267 ?x1142 ?x640 ?x1288 ?x812 ?x1344 ?x435 ?x279 ?x1637 ?x1639 ?x1645 ?x1643 ?x1650 ?x1649 ?x1658 ?x692 ?x1558 ?x1330 ?x214 ?x316 ?x332 ?x1560 ?x1627 ?x486 ?x328 ?x516 ?x721 ?x429 ?x586 ?x1448 ?x1264 ?x1060 ?x1678 ?x1902 ?x1255 ?x1038)))
 (let (($x145 (>= ?x134 0.0)))
 (let (($x772 (not $x145)))
 (let (($x1569 (= ?x134 0.0)))
 (let (($x1724 (not $x1569)))
 (let ((@x1722 (hypothesis $x1661)))
 (let (($x1725 (or $x1724 $x885)))
 (let ((@x1175 (lemma (unit-resolution ((_ th-lemma arith) $x1725) @x1722 (hypothesis $x1569) false) $x1725)))
 (let (($x144 (<= ?x134 0.0)))
 (let (($x1679 (>= ?x1541 0.0)))
 (let (($x720 (<= ?x1660 0.0)))
 (let (($x833 (not $x720)))
 (let (($x919 (>= ?x1660 0.0)))
 (let ((@x1730 (commutativity (= (= 0.0 ?x1660) $x885))))
 (let (($x1041 (= 0.0 ?x1660)))
 (let (($x159 (not $x1041)))
 (let (($x1334 (not $x919)))
 (let ((@x816 (hypothesis $x1334)))
 (let ((@x1674 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x159 $x919)) @x816 $x159) (monotonicity @x1730 (= $x159 $x1661)) $x1661)))
 (let ((?x1813 (* (- (/ 1.0 2.0)) ?x572)))
 (let ((?x822 (* (/ 1.0 2.0) ?x711)))
 (let ((?x1256 (+ ?x822 ?x1813)))
 (let (($x315 (<= ?x1256 0.0)))
 (let ((@x1574 (lemma ((_ th-lemma arith) (hypothesis (not $x315)) @x1692 @x1664 (hypothesis $x1070) false) (or $x1699 $x315))))
 (let ((@x150 (unit-resolution @x1574 @x139 $x315)))
 (let ((@x1580 (unit-resolution ((_ th-lemma arith) (or (not $x315) $x638 $x919)) @x816 (hypothesis $x126) @x150 false)))
 (let ((@x1577 ((_ th-lemma arith) (or $x126 $x145))))
 (let ((@x779 (unit-resolution @x1577 (unit-resolution (lemma @x1580 (or $x638 $x919)) @x816 $x638) $x145)))
 (let (($x1303 (>= ?x1256 0.0)))
 (let ((@x1294 ((_ th-lemma arith) (unit-resolution @x1282 @x1278 $x1269) @x1251 (hypothesis (not $x1303)) (hypothesis $x1549) false)))
 (let ((@x846 (unit-resolution (lemma @x1294 (or (not $x1549) $x1303)) @x810 $x1303)))
 (let (($x1572 (not $x1679)))
 (let ((@x798 (hypothesis $x1572)))
 (let ((@x853 (unit-resolution ((_ th-lemma arith) (or (not $x1303) $x1679 $x919)) @x816 @x798 @x846 false)))
 (let ((@x775 ((_ th-lemma arith) (or $x144 $x1572))))
 (let ((@x776 (unit-resolution @x775 (unit-resolution (lemma @x853 (or $x1679 $x919)) @x816 $x1679) $x144)))
 (let ((@x687 ((_ th-lemma arith triangle-eq) (or $x1569 (not $x144) $x772))))
 (let ((@x786 (unit-resolution @x1175 (unit-resolution @x687 @x776 @x779 $x1569) @x1674 false)))
 (let ((@x859 (mp @x1722 (monotonicity (symm @x1730 (= $x885 $x1041)) (= $x1661 $x159)) $x159)))
 (let ((@x865 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1041 $x833 $x1334)) @x859 (lemma @x786 $x919) $x833)))
 (let ((@x834 (unit-resolution ((_ th-lemma arith) (or (not $x315) $x1679 $x720)) (hypothesis $x833) @x798 @x150 false)))
 (let ((@x871 (unit-resolution @x775 (unit-resolution (lemma @x834 (or $x1679 $x720)) @x865 $x1679) $x144)))
 (let ((@x868 (unit-resolution @x1577 (unit-resolution @x687 @x871 (unit-resolution @x1175 @x1722 $x1724) $x772) $x126)))
 (let ((@x872 (unit-resolution ((_ th-lemma arith) (or (not $x1303) $x638 $x720)) @x865 @x846 @x868 false)))
 (let ((@x1593 (mp (unit-resolution (and-elim @x1850 $x1006) (lemma @x872 $x885) $x259) @x923 $x1592)))
 (let ((@x931 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x493 (not $x513) $x820)) @x1593 (or (not $x513) $x820))))
 (unit-resolution ((_ th-lemma arith) (or $x1030 (not $x142) (not $x1549) $x856 $x1588)) @x1251 @x1664 (unit-resolution @x931 (lemma @x905 $x513) $x820) @x810 @x1692 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       52
 :arith-eq-adapter                51
 :arith-bound-propagations-cheap  46
 :arith-bound-propagations-lp     8
 :arith-conflicts                 141
 :arith-diseq                     50
 :arith-gcd-calls                 7
 :arith-grobner-calls             7
 :arith-grobner-conflicts         2
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 16
 :arith-lower                     100
 :arith-make-feasible             90
 :arith-max-columns               111
 :arith-max-rows                  19
 :arith-nla-explanations          75
 :arith-nla-lemmas                138
 :arith-patches                   7
 :arith-patches-success           7
 :arith-propagations              46
 :arith-upper                     84
 :conflicts                       15
 :decisions                       166
 :del-clause                      209
 :final-checks                    49
 :max-memory                      7.87
 :memory                          3.30
 :mk-bool-var                     349
 :mk-clause                       282
 :num-allocs                      107160826
 :num-checks                      1
 :propagations                    161
 :rlimit-count                    11779
 :time                            0.16
 :total-time                      0.17)
