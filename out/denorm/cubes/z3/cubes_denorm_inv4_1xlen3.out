unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x574 (* n!0 n!0)))
 (let ((?x313 (* 3 ?x574)))
 (let ((?x164 (* (- 1) k!2)))
 (let ((?x137 (+ (* 3 n!0) ?x164 ?x313)))
 (let (($x485 (<= ?x137 (- 1))))
 (let (($x138 (= ?x137 (- 1))))
 (let ((?x168 (+ k!2 c!3)))
 (let ((?x242 (+ 6 m!1)))
 (let ((?x243 (+ 1 n!0)))
 (let ((?x214 (* 12 (* m!1 m!1))))
 (let ((?x231 (* 12 (* m!1 m!1 n!0))))
 (let ((?x298 (* m!1 m!1 m!1 n!0)))
 (let ((?x284 (* k!2 k!2)))
 (let ((?x545 (* 216 ?x284)))
 (let ((?x246 (* 36 k!2)))
 (let ((?x533 (* 36 m!1)))
 (let ((?x532 (* 36 (* m!1 n!0))))
 (let ((?x218 (* m!1 m!1 m!1)))
 (let ((?x477 (+ (* m!1 m!1 n!0 k!2) (* 12 (* m!1 n!0 k!2)) (* 109 (* m!1 m!1 k!2)) (* 36 (* n!0 k!2)) (* 228 (* m!1 k!2)) ?x218 (* 18 (* m!1 m!1 m!1 c!3)) ?x532 (* m!1 m!1 m!1 m!1 k!2) ?x533 ?x246 (* 216 (* k!2 c!3)) ?x545 ?x298 (* 216 (* m!1 c!3)) ?x231 (* 108 (* m!1 k!2 k!2)) (* 108 (* m!1 m!1 c!3)) (* 18 (* m!1 m!1 k!2 c!3)) (* 18 (* m!1 m!1 m!1 k!2)) (* 18 (* m!1 m!1 k!2 k!2)) (* 108 (* m!1 k!2 c!3)) ?x214 (* m!1 m!1 m!1 k!2 c!3) (* m!1 m!1 m!1 k!2 k!2) (* m!1 m!1 m!1 m!1 c!3) (* ?x243 ?x243 ?x243 ?x242 ?x242 ?x242 (+ m!1 k!2) ?x168 ?x168 ?x168))))
 (let ((?x589 (* ?x477 (+ 7 (* (- 1) m!1) (* 9 n!0) ?x164 ?x313))))
 (let (($x501 (= ?x589 0)))
 (let (($x505 (not $x501)))
 (let ((?x321 (* 9 n!0)))
 (let ((?x184 (+ ?x321 (* (- 5) k!2) (* (- 9) (* n!0 c!3)) ?x284 (* (- 18) c!3))))
 (let ((?x388 (+ m!1 (* (- 6) n!0))))
 (let (($x245 (= ?x388 6)))
 (let (($x583 (and $x245 (= ?x184 (- 4)) (= (+ (* n!0 k!2) (* 2 n!0) ?x164 (* (- 3) c!3)) (- 1)) $x138 $x505)))
 (let ((?x547 (+ c!3 k!2)))
 (let ((?x312 (+ ?x246 ?x533 ?x545 (* 36 (* k!2 n!0)) (* ?x243 ?x243 ?x243 ?x242 ?x242 ?x242 (+ k!2 m!1) ?x547 ?x547 ?x547) ?x231 (* 12 (* k!2 m!1 n!0)) ?x532 ?x218 (* 109 (* k!2 m!1 m!1)) ?x214 (* 228 (* k!2 m!1)) ?x298 (* k!2 m!1 m!1 n!0) (* c!3 k!2 m!1 m!1 m!1) (* k!2 k!2 m!1 m!1 m!1) (* c!3 m!1 m!1 m!1 m!1) (* k!2 m!1 m!1 m!1 m!1) (* 216 (* c!3 k!2)) (* 216 (* c!3 m!1)) (* 108 (* c!3 k!2 m!1)) (* 108 (* k!2 k!2 m!1)) (* 108 (* c!3 m!1 m!1)) (* 18 (* c!3 k!2 m!1 m!1)) (* 18 (* k!2 k!2 m!1 m!1)) (* 18 (* c!3 m!1 m!1 m!1)) (* 18 (* k!2 m!1 m!1 m!1)))))
 (let (($x544 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x236 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x284) (* 9 (* c!3 n!0)))))
 (let (($x273 (and $x245 (= ?x236 4) $x544 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x574)) 1) (not (= (* ?x312 (+ 7 ?x164 (* (- 1) m!1) ?x321 ?x313)) 0)))))
 (let (($x359 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x340 (+ 7 ?x233 ?x349 ?x48 ?x265)))
 (let ((?x604 (* 18 (* k m m m))))
 (let ((?x603 (* 18 (* c m m m))))
 (let ((?x602 (* 18 (* k k m m))))
 (let ((?x601 (* 18 (* c k m m))))
 (let ((?x538 (* c m m)))
 (let ((?x599 (* 108 ?x538)))
 (let ((?x534 (* k k m)))
 (let ((?x598 (* 108 ?x534)))
 (let ((?x530 (* c k m)))
 (let ((?x597 (* 108 ?x530)))
 (let ((?x524 (* 216 (* c m))))
 (let ((?x517 (* 216 (* c k))))
 (let ((?x509 (* k m m m m)))
 (let ((?x508 (* c m m m m)))
 (let ((?x507 (* k k m m m)))
 (let ((?x506 (* c k m m m)))
 (let ((?x475 (* k m m n)))
 (let ((?x474 (* m m m n)))
 (let ((?x618 (* 228 (* k m))))
 (let ((?x419 (* 12 (* m m))))
 (let ((?x449 (* k m m)))
 (let ((?x616 (* 109 ?x449)))
 (let ((?x446 (* m m m)))
 (let ((?x439 (* 36 (* m n))))
 (let ((?x418 (* 12 (* k m n))))
 (let ((?x417 (* 12 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x443 (* 36 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x520 (* 216 ?x49)))
 (let ((?x464 (* 36 m)))
 (let ((?x467 (* 36 k)))
 (let ((?x279 (+ ?x467 ?x464 ?x520 ?x443 ?x328 ?x417 ?x418 ?x439 ?x446 ?x616 ?x419 ?x618 ?x474 ?x475 ?x506 ?x507 ?x508 ?x509 ?x517 ?x524 ?x597 ?x598 ?x599 ?x601 ?x602 ?x603 ?x604)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* ?x279 ?x340) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x398 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x340 (+ 7 ?x233 ?x349 ?x48 ?x265)))
 (let ((?x604 (* 18 (* k m m m))))
 (let ((?x603 (* 18 (* c m m m))))
 (let ((?x602 (* 18 (* k k m m))))
 (let ((?x601 (* 18 (* c k m m))))
 (let ((?x524 (* 216 (* c m))))
 (let ((?x517 (* 216 (* c k))))
 (let ((?x509 (* k m m m m)))
 (let ((?x508 (* c m m m m)))
 (let ((?x507 (* k k m m m)))
 (let ((?x506 (* c k m m m)))
 (let ((?x475 (* k m m n)))
 (let ((?x474 (* m m m n)))
 (let ((?x618 (* 228 (* k m))))
 (let ((?x419 (* 12 (* m m))))
 (let ((?x446 (* m m m)))
 (let ((?x439 (* 36 (* m n))))
 (let ((?x418 (* 12 (* k m n))))
 (let ((?x417 (* 12 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x443 (* 36 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x520 (* 216 ?x49)))
 (let ((?x464 (* 36 m)))
 (let ((?x467 (* 36 k)))
 (let ((?x95 (+ ?x467 ?x464 ?x520 ?x443 (* 6 (* m 6 k c)) ?x328 (* 6 (* m 6 k k)) ?x417 ?x418 ?x439 ?x446 (* 73 (* k m m)) ?x419 ?x618 ?x474 ?x475 ?x506 ?x507 ?x508 ?x509 ?x517 ?x524 (* 72 (* c k m)) (* 72 (* k k m)) (* 72 (* c m m)) (* 6 (* m 6 m k)) ?x601 ?x602 ?x603 ?x604 (* 6 (* m 6 m c)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* ?x95 ?x340) 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x579 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x340 (+ 7 ?x233 ?x349 ?x48 ?x265)))
 (let ((?x604 (* 18 (* k m m m))))
 (let ((?x603 (* 18 (* c m m m))))
 (let ((?x602 (* 18 (* k k m m))))
 (let ((?x601 (* 18 (* c k m m))))
 (let ((?x538 (* c m m)))
 (let ((?x599 (* 108 ?x538)))
 (let ((?x534 (* k k m)))
 (let ((?x598 (* 108 ?x534)))
 (let ((?x530 (* c k m)))
 (let ((?x597 (* 108 ?x530)))
 (let ((?x524 (* 216 (* c m))))
 (let ((?x517 (* 216 (* c k))))
 (let ((?x509 (* k m m m m)))
 (let ((?x508 (* c m m m m)))
 (let ((?x507 (* k k m m m)))
 (let ((?x506 (* c k m m m)))
 (let ((?x475 (* k m m n)))
 (let ((?x474 (* m m m n)))
 (let ((?x618 (* 228 (* k m))))
 (let ((?x419 (* 12 (* m m))))
 (let ((?x449 (* k m m)))
 (let ((?x616 (* 109 ?x449)))
 (let ((?x446 (* m m m)))
 (let ((?x439 (* 36 (* m n))))
 (let ((?x418 (* 12 (* k m n))))
 (let ((?x417 (* 12 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x443 (* 36 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x520 (* 216 ?x49)))
 (let ((?x464 (* 36 m)))
 (let ((?x467 (* 36 k)))
 (let ((?x279 (+ ?x467 ?x464 ?x520 ?x443 ?x328 ?x417 ?x418 ?x439 ?x446 ?x616 ?x419 ?x618 ?x474 ?x475 ?x506 ?x507 ?x508 ?x509 ?x517 ?x524 ?x597 ?x598 ?x599 ?x601 ?x602 ?x603 ?x604)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x422 (and $x119 $x203 $x255 $x293 (not (= (* ?x279 ?x340) 0)))))
 (let ((?x95 (+ ?x467 ?x464 ?x520 ?x443 (* 6 (* m 6 k c)) ?x328 (* 6 (* m 6 k k)) ?x417 ?x418 ?x439 ?x446 (* 73 ?x449) ?x419 ?x618 ?x474 ?x475 ?x506 ?x507 ?x508 ?x509 ?x517 ?x524 (* 72 ?x530) (* 72 ?x534) (* 72 ?x538) (* 6 (* m 6 m k)) ?x601 ?x602 ?x603 ?x604 (* 6 (* m 6 m c)))))
 (let (($x120 (and $x119 $x203 $x255 $x293 (not (= (* ?x95 ?x340) 0)))))
 (rewrite (= $x120 $x422))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x307 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x275 (* (+ ?x328 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) ?x320)))
 (let (($x414 (not (= ?x275 0))))
 (let (($x433 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let (($x528 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x528 $x433 $x414)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x580 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x340 (+ 7 ?x233 ?x349 ?x48 ?x265)))
 (let ((?x604 (* 18 (* k m m m))))
 (let ((?x603 (* 18 (* c m m m))))
 (let ((?x602 (* 18 (* k k m m))))
 (let ((?x601 (* 18 (* c k m m))))
 (let ((?x524 (* 216 (* c m))))
 (let ((?x517 (* 216 (* c k))))
 (let ((?x509 (* k m m m m)))
 (let ((?x508 (* c m m m m)))
 (let ((?x507 (* k k m m m)))
 (let ((?x506 (* c k m m m)))
 (let ((?x475 (* k m m n)))
 (let ((?x474 (* m m m n)))
 (let ((?x618 (* 228 (* k m))))
 (let ((?x419 (* 12 (* m m))))
 (let ((?x446 (* m m m)))
 (let ((?x439 (* 36 (* m n))))
 (let ((?x418 (* 12 (* k m n))))
 (let ((?x417 (* 12 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x443 (* 36 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x520 (* 216 ?x49)))
 (let ((?x464 (* 36 m)))
 (let ((?x467 (* 36 k)))
 (let ((?x95 (+ ?x467 ?x464 ?x520 ?x443 (* 6 (* m 6 k c)) ?x328 (* 6 (* m 6 k k)) ?x417 ?x418 ?x439 ?x446 (* 73 (* k m m)) ?x419 ?x618 ?x474 ?x475 ?x506 ?x507 ?x508 ?x509 ?x517 ?x524 (* 72 (* c k m)) (* 72 (* k k m)) (* 72 (* c m m)) (* 6 (* m 6 m k)) ?x601 ?x602 ?x603 ?x604 (* 6 (* m 6 m c)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x120 (and $x119 $x203 $x255 $x293 (not (= (* ?x95 ?x340) 0)))))
 (let ((?x275 (* (+ ?x328 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) (+ 4 (* 3 (* ?x301 ?x301)) ?x233 ?x349 (* 3 n)))))
 (let (($x414 (not (= ?x275 0))))
 (let (($x433 (= (+ ?x265 ?x233 (* 3 n)) (- 1))))
 (let (($x528 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x590 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x528 $x433 $x414)))
 (rewrite (= $x590 $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x412 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x275 (* (+ ?x328 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) ?x320)))
 (let (($x414 (not (= ?x275 0))))
 (let (($x433 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x575 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x575 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x433 $x414))))))))))))))))) :qid k!34))
 ))
 (let ((?x308 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x275 (* (+ ?x328 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) ?x320)))
 (let (($x414 (not (= ?x275 0))))
 (let (($x433 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let (($x528 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x590 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x528 $x433 $x414)))
 (let ((?x48 (* 9 n)))
 (let ((?x575 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x335 (and $x119 (= ?x575 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x433 $x414)))
 (rewrite (= $x335 $x590))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x68 (+ n 1)))
 (let ((?x80 (+ (* ?x75 ?x75 ?x75 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x71 ?x76 ?x76 ?x68) (* ?x75 ?x71 ?x76 ?x76 ?x76))))
 (let (($x82 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82)))))))))))))))) :qid k!34))
 ))
 (let ((?x426 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x328 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x275 (* (+ ?x328 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) ?x320)))
 (let (($x414 (not (= ?x275 0))))
 (let (($x433 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x575 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x335 (and $x119 (= ?x575 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x433 $x414)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x80 (+ (* ?x75 ?x75 ?x75 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x71 ?x76 ?x76 ?x68) (* ?x75 ?x71 ?x76 ?x76 ?x76))))
 (let (($x82 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x82)))))
 (rewrite (= $x85 $x335)))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x354 (mp (mp @x87 (quant-intro (proof-bind ?x426) (= $x86 $x412)) $x412) (rewrite (= $x412 $x412)) $x412)))
 (let ((@x423 (mp (mp @x354 (quant-intro (proof-bind ?x308) (= $x412 $x307)) $x307) (quant-intro (proof-bind ?x580) (= $x307 $x398)) $x398)))
 (let ((@x276 (mp~ (mp @x423 (quant-intro (proof-bind ?x579) (= $x398 $x359)) $x359) (sk (~ $x359 $x273)) $x273)))
 (let ((@x202 (mp @x276 (rewrite (= $x273 $x583)) $x583)))
 (let ((@x551 (and-elim @x202 $x138)))
 (let ((@x201 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x138) $x485)) @x551 $x485)))
 (let (($x453 (>= ?x388 6)))
 (let ((@x568 (and-elim @x202 $x245)))
 (let ((@x200 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x245) $x453)) @x568 $x453)))
 (let (($x110 (>= ?x137 (- 1))))
 (let ((@x606 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x138) $x110)) @x551 $x110)))
 (let (($x409 (<= ?x388 6)))
 (let ((@x504 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x245) $x409)) @x568 $x409)))
 (let (($x442 (not (<= ?x589 0))))
 (let (($x607 (>= ?x589 0)))
 (let ((@x478 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x607)) @x504 @x606 @x200 @x201 false) $x607)))
 (let ((@x429 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x501 $x442 (not $x607))) (and-elim @x202 $x505) (or $x442 (not $x607)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x429 @x478 $x442) @x504 @x606 @x200 @x201 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        23
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             147
 :arith-nonlinear-bounds    21
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      7
 :arith-tableau-max-columns 61
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.64
 :memory                    3.15
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1120078
 :num-checks                1
 :propagations              10
 :rlimit-count              4307
 :time                      0.01
 :total-time                0.02)
