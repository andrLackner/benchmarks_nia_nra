unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x321 (* (- 1) k!2)))
 (let ((?x161 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x321)))
 (let (($x810 (<= ?x161 (- 1))))
 (let (($x731 (= ?x161 (- 1))))
 (let ((?x562 (+ k!2 c!3)))
 (let ((?x159 (+ m!1 k!2)))
 (let ((?x114 (+ 6 m!1)))
 (let ((?x483 (+ 1 n!0)))
 (let ((?x278 (* (- 9) (* ?x483 ?x483 ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x562 ?x562 ?x562))))
 (let ((?x206 (+ (* 9 (* ?x483 ?x483 ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x562 ?x562)) (* (- 5) (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x159 ?x562 ?x562)) (* (- 18) (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x562 ?x562 ?x562)) (* 5 (* ?x483 ?x114 ?x114 ?x159 ?x159 ?x159 ?x562)) (* (- 4) (* ?x483 ?x114 ?x114 ?x159 ?x159 ?x562)) ?x278 (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x159 ?x159 ?x562 ?x562) (* 18 (* ?x483 ?x114 ?x114 ?x159 ?x159 ?x562 ?x562)) (* (- 1) (* ?x483 ?x114 ?x114 ?x159 ?x159 ?x159 ?x159 ?x562)) (* 9 (* ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x562 ?x562)) (* 4 (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x562 ?x562)) (* (- 9) (* ?x483 ?x483 ?x114 ?x114 ?x159 ?x159 ?x562)))))
 (let (($x207 (= ?x206 0)))
 (let (($x163 (not $x207)))
 (let ((?x349 (+ (* n!0 k!2) (* 2 n!0) ?x321 (* (- 3) c!3))))
 (let (($x176 (= ?x349 (- 1))))
 (let ((?x361 (* 18 c!3)))
 (let ((?x360 (* 5 k!2)))
 (let ((?x358 (* (- 9) n!0)))
 (let ((?x335 (* (- 1) (* k!2 k!2))))
 (let ((?x734 (+ (* 9 (* n!0 c!3)) ?x335 ?x358 ?x360 ?x361)))
 (let (($x545 (= ?x734 4)))
 (let ((?x196 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x340 (= ?x196 (- 6))))
 (let (($x566 (and $x340 $x545 $x176 $x731 $x163)))
 (let ((?x708 (+ c!3 k!2)))
 (let ((?x174 (+ k!2 m!1)))
 (let ((?x264 (* (- 1) (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x174 ?x174 ?x708 ?x708))))
 (let ((?x245 (* 9 (* ?x483 ?x483 ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x708 ?x708 ?x708))))
 (let ((?x266 (+ (* 9 (* ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x708)) (* (- 4) (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x708 ?x708)) (* (- 9) (* ?x483 ?x483 ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x708 ?x708)) (* (- 5) (* ?x483 ?x114 ?x114 ?x174 ?x174 ?x174 ?x708)) (* 4 (* ?x483 ?x114 ?x114 ?x174 ?x174 ?x708)) ?x245 (* (- 9) (* ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x708 ?x708)) (* (- 18) (* ?x483 ?x114 ?x114 ?x174 ?x174 ?x708 ?x708)) (* 5 (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x174 ?x708 ?x708)) (* 18 (* ?x483 ?x483 ?x483 ?x114 ?x114 ?x174 ?x174 ?x708 ?x708 ?x708)) ?x264 (* ?x483 ?x114 ?x114 ?x174 ?x174 ?x174 ?x174 ?x708))))
 (let (($x714 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x265 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x361 ?x360 ?x358 ?x335 (* 9 (* c!3 n!0))) 4) $x714 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x266 0)))))
 (let (($x276 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x695 (* (- 1) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x724 (* 18 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x681 (* 5 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x536 (* (- 18) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x555 (* (- 9) (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x613 (* 9 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x327 (* 4 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let ((?x345 (* (- 5) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69))))
 (let ((?x221 (* (- 9) (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x180 (* (- 4) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x109 (* 9 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let (($x312 (= (+ ?x109 ?x180 ?x221 ?x345 ?x327 ?x613 ?x555 ?x536 ?x681 ?x724 ?x695 ?x763) 0)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x220 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x216 (= ?x220 4)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 $x216 $x268 $x306 (not $x312)))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x158 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x536 (* (- 18) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x681 (* 5 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x695 (* (- 1) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x724 (* 18 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x613 (* 9 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x555 (* (- 9) (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x327 (* 4 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let ((?x345 (* (- 5) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69))))
 (let ((?x109 (* 9 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let ((?x221 (* (- 9) (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x180 (* (- 4) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let (($x776 (= (+ ?x180 ?x221 ?x109 ?x345 ?x327 ?x555 ?x613 ?x724 ?x695 ?x681 ?x536 ?x763) 0)))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x417 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 (= ?x417 (- 4)) $x239 $x145 (not $x776))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x248 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x695 (* (- 1) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x724 (* 18 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x681 (* 5 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x536 (* (- 18) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x555 (* (- 9) (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x613 (* 9 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x327 (* 4 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let ((?x345 (* (- 5) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69))))
 (let ((?x221 (* (- 9) (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x180 (* (- 4) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x109 (* 9 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let (($x312 (= (+ ?x109 ?x180 ?x221 ?x345 ?x327 ?x613 ?x555 ?x536 ?x681 ?x724 ?x695 ?x763) 0)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x220 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x216 (= ?x220 4)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x305 (and $x132 $x216 $x268 $x306 (not $x312))))
 (let (($x776 (= (+ ?x180 ?x221 ?x109 ?x345 ?x327 ?x555 ?x613 ?x724 ?x695 ?x681 ?x536 ?x763) 0)))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x417 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x187 (and $x132 (= ?x417 (- 4)) $x239 $x145 (not $x776))))
 (rewrite (= $x187 $x305)))))))))))))))))))))))))))))))))))
 ))
 (let (($x99 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x75 (- (* (- 4) ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x79 (- (+ ?x75 (* 9 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72)) (* 5 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x83 (- (+ ?x79 (* 4 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x86 (+ ?x83 (* 9 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72) (* 18 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x88 (- ?x86 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x90 (+ ?x88 (* 5 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x94 (+ (- ?x90 (* 18 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x94 0)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x166 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x536 (* (- 18) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x681 (* 5 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x695 (* (- 1) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x724 (* 18 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x613 (* 9 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x555 (* (- 9) (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x327 (* 4 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let ((?x345 (* (- 5) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69))))
 (let ((?x109 (* 9 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69))))
 (let ((?x221 (* (- 9) (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x180 (* (- 4) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69))))
 (let (($x776 (= (+ ?x180 ?x221 ?x109 ?x345 ?x327 ?x555 ?x613 ?x724 ?x695 ?x681 ?x536 ?x763) 0)))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x417 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x187 (and $x132 (= ?x417 (- 4)) $x239 $x145 (not $x776))))
 (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x75 (- (* (- 4) ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x79 (- (+ ?x75 (* 9 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72)) (* 5 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x83 (- (+ ?x79 (* 4 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x86 (+ ?x83 (* 9 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72) (* 18 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x88 (- ?x86 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x90 (+ ?x88 (* 5 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x94 (+ (- ?x90 (* 18 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x98 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x94 0))))))
 (rewrite (= $x98 $x187))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x112 (mp (mp @x100 (quant-intro (proof-bind ?x166) (= $x99 $x158)) $x158) (rewrite (= $x158 $x158)) $x158)))
 (let ((@x283 (mp~ (mp @x112 (quant-intro (proof-bind ?x248) (= $x158 $x276)) $x276) (sk (~ $x276 $x265)) $x265)))
 (let ((@x152 (mp @x283 (rewrite (= $x265 $x566)) $x566)))
 (let ((@x233 (and-elim @x152 $x731)))
 (let ((@x172 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x731) $x810)) @x233 $x810)))
 (let (($x217 (>= ?x161 (- 1))))
 (let ((@x550 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x731) $x217)) @x233 $x217)))
 (let (($x328 (<= ?x196 (- 6))))
 (let ((@x558 (and-elim @x152 $x340)))
 (let ((@x147 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x340) $x328)) @x558 $x328)))
 (let (($x121 (>= ?x196 (- 6))))
 (let ((@x648 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x340) $x121)) @x558 $x121)))
 (let (($x183 (<= ?x734 4)))
 (let ((@x179 (and-elim @x152 $x545)))
 (let ((@x621 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x545) $x183)) @x179 $x183)))
 (let (($x423 (>= ?x734 4)))
 (let ((@x119 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x545) $x423)) @x179 $x423)))
 (let (($x189 (<= ?x349 (- 1))))
 (let ((@x178 (and-elim @x152 $x176)))
 (let ((@x135 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x189)) @x178 $x189)))
 (let (($x181 (>= ?x349 (- 1))))
 (let ((@x560 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x181)) @x178 $x181)))
 (let (($x650 (not (<= ?x206 0))))
 (let (($x184 (>= ?x206 0)))
 (let ((@x805 ((_ th-lemma arith) (hypothesis (not $x184)) @x550 @x172 @x560 @x135 @x550 @x172 @x119 @x621 @x550 @x172 @x648 @x147 @x550 @x172 @x648 @x147 @x550 @x172 false)))
 (let ((@x687 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x207 $x650 (not $x184))) (and-elim @x152 $x163) (or $x650 (not $x184)))))
 ((_ th-lemma arith) (unit-resolution @x687 (lemma @x805 $x184) $x650) @x550 @x172 @x560 @x135 @x550 @x172 @x119 @x621 @x550 @x172 @x648 @x147 @x550 @x172 @x648 @x147 @x550 @x172 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           1
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             221
 :arith-nonlinear-bounds    9
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             1
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                19.72
 :memory                    19.15
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                915125
 :num-checks                1
 :propagations              11
 :rlimit-count              26965
 :time                      0.02
 :total-time                0.04)
