unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x231 (* r!1 r!1)))
 (let ((?x80 (* (- 1) r!1)))
 (let ((?x271 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x144 (+ r00 ?x82 ?x98 ?x271 ?x80 ?x231)))
 (let (($x221 (<= ?x144 0)))
 (let (($x135 (= ?x144 0)))
 (let ((?x64 (* (- 3) ?x231)))
 (let ((?x62 (* (- 2) r!1)))
 (let ((?x78 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x73 (* (- 3) (* r!1 r!1 r!1))))
 (let ((?x236 (+ ?x73 ?x78 ?x271 ?x62 (* 3 (* x!0 r!1)) (* x!0 r!1 r!1 r!1) ?x64 (* 3 (* x!0 r!1 r!1)))))
 (let ((?x215 (* ?x236 ?x144)))
 (let (($x250 (= ?x215 0)))
 (let (($x243 (not $x250)))
 (let (($x241 (and $x135 $x243)))
 (let ((?x79 (+ ?x62 ?x271 ?x64 (* 3 (* r!1 x!0)) (* 3 (* r!1 r!1 x!0)) (* r!1 r!1 r!1 x!0) ?x73 ?x78)))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 1) r00)))
 (let (($x142 (and (= (+ r!1 (* (- 2) x!0) ?x113 (* (- 1) ?x231) ?x35 ?x36) 0) (not (= (* ?x79 (+ ?x80 ?x271 r00 ?x231 ?x82 ?x98)) 0)))))
 (let (($x156 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x104 (+ ?x61 ?x32 r00 ?x30 ?x82 ?x98)))
 (let ((?x281 (+ (* (- 2) r) ?x32 (* (- 3) ?x30) (* 3 (* r x)) (* 3 (* r r x)) (* r r r x) (* (- 3) (* r r r)) (* (- 1) (* r r r r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (let ((?x112 (* (- 2) x)))
 (let (($x116 (= (+ r ?x112 ?x113 ?x114 ?x35 ?x36) 0)))
 (and $x116 (not (= (* ?x281 ?x104) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x149 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x224 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x275 (+ (* (+ 1 r) (+ 1 r) (+ 1 r) (+ x ?x61)) x ?x61)))
 (let (($x138 (not (= (* ?x275 ?x224) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x138)))))))))))))) :qid k!26))
 ))
 (let ((?x59 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x104 (+ ?x61 ?x32 r00 ?x30 ?x82 ?x98)))
 (let ((?x281 (+ (* (- 2) r) ?x32 (* (- 3) ?x30) (* 3 (* r x)) (* 3 (* r r x)) (* r r r x) (* (- 3) (* r r r)) (* (- 1) (* r r r r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (let ((?x112 (* (- 2) x)))
 (let (($x116 (= (+ r ?x112 ?x113 ?x114 ?x35 ?x36) 0)))
 (let (($x230 (and $x116 (not (= (* ?x281 ?x104) 0)))))
 (let ((?x224 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x275 (+ (* (+ 1 r) (+ 1 r) (+ 1 r) (+ x ?x61)) x ?x61)))
 (let (($x138 (not (= (* ?x275 ?x224) 0))))
 (let (($x67 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x138)))
 (rewrite (= $x67 $x230)))))))))))))))))))))
 ))
 (let (($x166 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x224 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x275 (+ (* (+ 1 r) (+ 1 r) (+ 1 r) (+ x ?x61)) x ?x61)))
 (let (($x138 (not (= (* ?x275 ?x224) 0))))
 (and (= (+ ?x61 r00 (* r r) ?x32 ?x82 ?x98) 0) $x138))))))))) :qid k!26))
 ))
 (let ((?x162 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x224 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x275 (+ (* (+ 1 r) (+ 1 r) (+ 1 r) (+ x ?x61)) x ?x61)))
 (let (($x138 (not (= (* ?x275 ?x224) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (let (($x67 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x138)))
 (let (($x106 (and (= (+ ?x61 r00 ?x30 ?x32 ?x82 ?x98) 0) $x138)))
 (rewrite (= $x106 $x67))))))))))))))))))
 ))
 (let (($x56 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 ?x44))))
 (let ((?x51 (* (- (- ?x46 ?x35) ?x36) (+ (* (+ r 1) (+ r 1) (+ r 1) ?x44) ?x44))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x51 0)))))))))) :qid k!26))
 ))
 (let ((?x173 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x224 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x275 (+ (* (+ 1 r) (+ 1 r) (+ 1 r) (+ x ?x61)) x ?x61)))
 (let (($x138 (not (= (* ?x275 ?x224) 0))))
 (let (($x106 (and (= (+ ?x61 r00 (* r r) ?x32 ?x82 ?x98) 0) $x138)))
 (let ((?x44 (- x r)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 ?x44))))
 (let ((?x51 (* (- (- ?x46 ?x35) ?x36) (+ (* (+ r 1) (+ r 1) (+ r 1) ?x44) ?x44))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x55 (and $x40 (or (not (= ?x51 0))))))
 (rewrite (= $x55 $x106))))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x172 (mp (mp @x57 (quant-intro (proof-bind ?x173) (= $x56 $x166)) $x166) (rewrite (= $x166 $x166)) $x166)))
 (let ((@x139 (mp (mp @x172 (quant-intro (proof-bind ?x162) (= $x166 $x149)) $x149) (quant-intro (proof-bind ?x59) (= $x149 $x156)) $x156)))
 (let ((@x257 (mp (mp~ @x139 (sk (~ $x156 $x142)) $x142) (rewrite (= $x142 $x241)) $x241)))
 (let ((@x211 (and-elim @x257 $x135)))
 (let ((@x233 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x135) $x221)) @x211 $x221)))
 (let (($x216 (>= ?x144 0)))
 (let ((@x163 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x135) $x216)) @x211 $x216)))
 (let (($x167 (not (>= ?x215 0))))
 (let (($x240 (<= ?x215 0)))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x250 (not $x240) $x167)) (and-elim @x257 $x243) (or (not $x240) $x167))))
 (let ((@x254 (unit-resolution @x255 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x240)) @x163 @x233 false) $x240) $x167)))
 ((_ th-lemma arith farkas 1 1 1) @x254 @x163 @x233 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 19
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1067864
 :num-checks                1
 :propagations              4
 :rlimit-count              1177
 :time                      0.01
 :total-time                0.01)
