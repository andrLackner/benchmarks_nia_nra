unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x401 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x632 (<= ?x401 (- 6))))
 (let (($x393 (= ?x401 (- 6))))
 (let ((?x800 (+ c!3 k!2)))
 (let ((?x126 (+ k!2 m!1)))
 (let ((?x123 (+ 6 m!1)))
 (let ((?x776 (+ 1 n!0)))
 (let ((?x787 (* ?x776 ?x776 ?x123 ?x123 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800 ?x800)))
 (let ((?x772 (* ?x776 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800)))
 (let ((?x767 (* ?x776 ?x123 ?x123 ?x123 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800 ?x800)))
 (let ((?x741 (* ?x123 ?x123 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800)))
 (let ((?x655 (* ?x776 ?x123 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800)))
 (let ((?x576 (* ?x776 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800)))
 (let ((?x572 (* ?x123 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800)))
 (let ((?x563 (* ?x776 ?x776 ?x776 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800 ?x800)))
 (let ((?x255 (* ?x776 ?x776 ?x123 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800 ?x800)))
 (let ((?x253 (* ?x776 ?x123 ?x123 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800 ?x800)))
 (let ((?x109 (* ?x776 ?x776 ?x123 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800 ?x800)))
 (let ((?x107 (* ?x776 ?x776 ?x123 ?x123 ?x123 ?x126 ?x126 ?x126 ?x126 ?x126 ?x800 ?x800)))
 (let ((?x503 (+ (* 6 ?x107) (* 6 ?x109) (* 6 ?x253) (* (- 1) ?x255) (* 6 ?x563) (* 6 ?x572) (* 6 ?x576) (* 6 ?x655) (* (- 1) ?x741) (* (- 1) ?x767) (* (- 1) ?x772) (* 6 ?x787))))
 (let (($x237 (= ?x503 0)))
 (let (($x246 (not $x237)))
 (let (($x675 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x128 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 3) c!3) (* (- 1) k!2)) (- 1))))
 (let ((?x616 (* (- 1) (* k!2 k!2))))
 (let ((?x127 (* 5 k!2)))
 (let ((?x579 (* 18 c!3)))
 (let ((?x396 (* (- 9) n!0)))
 (let (($x791 (and $x393 (= (+ (* 9 (* n!0 c!3)) ?x396 ?x579 ?x127 ?x616) 4) $x128 $x675 $x246)))
 (let ((?x564 (+ ?x767 ?x772 (* (- 6) ?x787) (* (- 6) ?x655) ?x741 (* (- 6) ?x572) (* (- 6) ?x109) (* (- 6) ?x576) (* (- 6) ?x563) (* (- 6) ?x107) ?x255 (* (- 6) ?x253))))
 (let (($x338 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x624 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x579 ?x127 ?x396 ?x616 (* 9 (* c!3 n!0))) 4) $x338 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x564 0)))))
 (let (($x559 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x790 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x658 (* (- 6) ?x790)))
 (let ((?x669 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x615 (* (- 6) (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x541 (* ?x318 ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x433 (* (- 6) ?x541)))
 (let ((?x410 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x449 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x516 (* (- 6) ?x449)))
 (let ((?x274 (* (- 6) (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x256 (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x244 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x209 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x104 (* (- 6) ?x209)))
 (let ((?x167 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x158 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let (($x292 (= (+ ?x158 ?x167 ?x104 ?x244 ?x256 ?x274 ?x516 ?x410 ?x433 ?x615 ?x669 ?x658) 0)))
 (let (($x307 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x269 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x221 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x217 (= ?x221 4)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (and $x133 $x217 $x269 $x307 (not $x292)))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x264 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x669 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x449 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x516 (* (- 6) ?x449)))
 (let ((?x541 (* ?x318 ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x433 (* (- 6) ?x541)))
 (let ((?x790 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x658 (* (- 6) ?x790)))
 (let ((?x615 (* (- 6) (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x410 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x209 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x104 (* (- 6) ?x209)))
 (let ((?x167 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x158 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x274 (* (- 6) (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x256 (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x244 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let (($x696 (= (+ ?x244 ?x256 ?x274 ?x158 ?x167 ?x104 ?x410 ?x615 ?x658 ?x433 ?x516 ?x669) 0)))
 (let (($x313 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x202 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x286 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (and $x133 (= ?x286 (- 4)) $x202 $x313 (not $x696))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x575 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x790 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x658 (* (- 6) ?x790)))
 (let ((?x669 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x615 (* (- 6) (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x541 (* ?x318 ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x433 (* (- 6) ?x541)))
 (let ((?x410 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x449 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x516 (* (- 6) ?x449)))
 (let ((?x274 (* (- 6) (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x256 (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x244 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x209 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x104 (* (- 6) ?x209)))
 (let ((?x167 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x158 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let (($x292 (= (+ ?x158 ?x167 ?x104 ?x244 ?x256 ?x274 ?x516 ?x410 ?x433 ?x615 ?x669 ?x658) 0)))
 (let (($x307 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x269 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x221 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x217 (= ?x221 4)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (let (($x496 (and $x133 $x217 $x269 $x307 (not $x292))))
 (let (($x696 (= (+ ?x244 ?x256 ?x274 ?x158 ?x167 ?x104 ?x410 ?x615 ?x658 ?x433 ?x516 ?x669) 0)))
 (let (($x313 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x202 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x286 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x242 (and $x133 (= ?x286 (- 4)) $x202 $x313 (not $x696))))
 (rewrite (= $x242 $x496)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x92 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x85 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x83 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x82 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x80 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x77 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x29 (- 6)))
 (let ((?x72 (* ?x29 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x74 (+ ?x72 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x76 (- ?x74 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x79 (+ ?x76 ?x77 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x87 (- (- ?x79 ?x80) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let (($x96 (or (not (= (+ (- (- (- (- ?x87 ?x82) ?x83) ?x84) ?x85) ?x92) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* ?x29 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x96)))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x252 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x669 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x449 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x516 (* (- 6) ?x449)))
 (let ((?x541 (* ?x318 ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x433 (* (- 6) ?x541)))
 (let ((?x790 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x658 (* (- 6) ?x790)))
 (let ((?x615 (* (- 6) (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x410 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x209 (* ?x318 ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x104 (* (- 6) ?x209)))
 (let ((?x167 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x158 (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x274 (* (- 6) (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x256 (* ?x315 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x244 (* (- 6) (* ?x318 ?x315 ?x315 ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let (($x696 (= (+ ?x244 ?x256 ?x274 ?x158 ?x167 ?x104 ?x410 ?x615 ?x658 ?x433 ?x516 ?x669) 0)))
 (let (($x313 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x202 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x286 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (let (($x242 (and $x133 (= ?x286 (- 4)) $x202 $x313 (not $x696))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x92 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x85 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x83 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x82 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x80 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71)))
 (let ((?x77 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x29 (- 6)))
 (let ((?x72 (* ?x29 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x71)))
 (let ((?x74 (+ ?x72 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x76 (- ?x74 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x79 (+ ?x76 ?x77 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x87 (- (- ?x79 ?x80) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let (($x96 (or (not (= (+ (- (- (- (- ?x87 ?x82) ?x83) ?x84) ?x85) ?x92) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x97 (and (= (- (+ (* ?x29 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x96)))
 (rewrite (= $x97 $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x118 (mp (mp @x99 (quant-intro (proof-bind ?x252) (= $x98 $x264)) $x264) (rewrite (= $x264 $x264)) $x264)))
 (let ((@x618 (mp~ (mp @x118 (quant-intro (proof-bind ?x575) (= $x264 $x559)) $x559) (sk (~ $x559 $x624)) $x624)))
 (let ((@x501 (mp @x618 (rewrite (= $x624 $x791)) $x791)))
 (let ((@x196 (and-elim @x501 $x393)))
 (let ((@x661 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x393) $x632)) @x196 $x632)))
 (let (($x625 (>= ?x401 (- 6))))
 (let ((@x268 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x393) $x625)) @x196 $x625)))
 (let (($x390 (not (<= ?x503 0))))
 (let (($x317 (>= ?x503 0)))
 (let ((@x547 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x237 $x390 (not $x317))) (and-elim @x501 $x246) (or $x390 (not $x317)))))
 (let ((@x165 (unit-resolution @x547 (lemma ((_ th-lemma arith) (hypothesis (not $x317)) @x268 @x661 false) $x317) $x390)))
 ((_ th-lemma arith) @x165 @x268 @x661 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             223
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 41
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                19.68
 :memory                    19.18
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                556712
 :num-checks                1
 :propagations              11
 :rlimit-count              4323
 :time                      0.01
 :total-time                0.03)
