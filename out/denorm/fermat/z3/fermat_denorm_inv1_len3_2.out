unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x663 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x496 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 4) r!2) (* (- 2) u!1) (* (- 1) (* v!0 v!0)) (* 2 v!0) ?x663)))
 (let (($x350 (>= ?x496 0)))
 (let (($x798 (= ?x496 0)))
 (let ((?x588 (* (- 1) ?x663)))
 (let ((?x212 (* (- 2) v!0)))
 (let ((?x432 (* v!0 v!0)))
 (let ((?x215 (* 2 u!1)))
 (let ((?x795 (* 4 r!2)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x352 (+ ?x106 ?x122 ?x41 ?x46 ?x198 ?x795 ?x215 ?x432 ?x212 ?x588)))
 (let ((?x222 (* 6 (* r!2 r!2 u!1 u!1))))
 (let ((?x718 (* r!2 u!1 u!1 u!1)))
 (let ((?x707 (* 12 ?x718)))
 (let ((?x717 (* 6 (* u!1 u!1 u!1 u!1))))
 (let ((?x758 (* 11 (* u!1 u!1 u!1))))
 (let ((?x298 (* 6 ?x663)))
 (let ((?x593 (* r!2 u!1 v!0)))
 (let ((?x574 (* (- 12) ?x593)))
 (let ((?x575 (* r!2 r!2 u!1 u!1 u!1)))
 (let ((?x541 (* u!1 u!1 u!1 v!0)))
 (let ((?x391 (* (- 6) ?x541)))
 (let ((?x223 (* (- 1) (* u!1 u!1 u!1 u!1 v!0))))
 (let ((?x586 (* 2 (* r!2 u!1 u!1 u!1 u!1))))
 (let ((?x364 (* (- 12) (* u!1 u!1 v!0))))
 (let ((?x286 (* 12 (* r!2 u!1))))
 (let ((?x382 (* (- 8) (* r!2 v!0))))
 (let ((?x292 (* 6 (* r!2 r!2))))
 (let ((?x264 (* u!1 u!1 u!1 u!1 u!1)))
 (let ((?x102 (* (- 8) (* u!1 v!0))))
 (let ((?x705 (* 22 (* r!2 u!1 u!1))))
 (let ((?x277 (* (- 6) (* r!2 u!1 u!1 v!0))))
 (let ((?x116 (* r!2 u!1 u!1 u!1 v!0)))
 (let ((?x583 (* (- 1) ?x116)))
 (let ((?x110 (* r!2 r!2 u!1)))
 (let ((?x538 (* 11 ?x110)))
 (let ((?x560 (+ ?x538 ?x583 ?x277 ?x705 ?x102 ?x264 ?x292 ?x382 ?x286 ?x364 ?x586 ?x223 ?x391 ?x575 ?x574 ?x298 ?x758 ?x717 ?x707 ?x222)))
 (let ((?x600 (* ?x560 ?x352)))
 (let (($x653 (= ?x600 0)))
 (let (($x611 (not $x653)))
 (let ((?x710 (* 2 (* u!1 u!1 u!1 v!0 v!0))))
 (let ((?x747 (* (- 2) ?x718)))
 (let ((?x473 (* 2 ?x593)))
 (let ((?x477 (* 2 ?x541)))
 (let ((?x244 (* (- 1) (* u!1 v!0 v!0))))
 (let ((?x759 (* (- 3) ?x116)))
 (let ((?x472 (* (- 1) ?x110)))
 (let ((?x195 (* (+ ?x472 ?x759 ?x244 ?x477 ?x575 ?x473 ?x747 ?x710) ?x352)))
 (let (($x211 (= ?x195 0)))
 (let (($x295 (or (not $x211) $x611)))
 (let (($x201 (and $x798 $x295)))
 (let ((?x240 (+ ?x795 ?x215 ?x212 ?x106 ?x122 ?x41 ?x588 ?x432 ?x46 ?x198)))
 (let (($x720 (not (= (* (+ ?x759 ?x575 ?x710 ?x472 ?x473 ?x477 ?x244 ?x747) ?x240) 0))))
 (let ((?x702 (+ ?x298 ?x277 ?x382 ?x364 ?x583 ?x575 ?x102 ?x538 ?x574 ?x391 ?x223 ?x586 ?x264 ?x292 ?x286 ?x705 ?x758 ?x222 ?x707 ?x717)))
 (let (($x394 (and (= ?x240 0) (or (not (= (* ?x702 ?x240) 0)) $x720))))
 (let (($x476 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x447 (* (- 1) (* u v v))))
 (let ((?x405 (* r u v)))
 (let ((?x451 (* 2 ?x405)))
 (let ((?x396 (* r r u)))
 (let ((?x445 (* (- 1) ?x396)))
 (let ((?x345 (* r r u u u)))
 (let ((?x333 (* r u u u v)))
 (let ((?x387 (* (- 3) ?x333)))
 (let ((?x313 (+ ?x387 ?x345 (* 2 (* u u u v v)) ?x445 ?x451 (* 2 (* u u u v)) ?x447 (* (- 2) (* r u u u)))))
 (let (($x808 (not (= (* ?x313 ?x204) 0))))
 (let ((?x691 (* 6 (* u u u u))))
 (let ((?x635 (* r u u u)))
 (let ((?x690 (* 12 ?x635)))
 (let ((?x689 (* 6 (* r r u u))))
 (let ((?x613 (* u u u)))
 (let ((?x788 (* 11 ?x613)))
 (let ((?x605 (* r u u)))
 (let ((?x787 (* 22 ?x605)))
 (let ((?x785 (* 12 (* r u))))
 (let ((?x783 (* 6 (* r r))))
 (let ((?x572 (* u u u u u)))
 (let ((?x692 (* 2 (* r u u u u))))
 (let ((?x529 (* (- 1) (* u u u u v))))
 (let ((?x406 (* u u u v)))
 (let ((?x266 (* (- 6) ?x406)))
 (let ((?x149 (* (- 12) ?x405)))
 (let ((?x771 (* 11 ?x396)))
 (let ((?x612 (* (- 8) (* u v))))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x768 (* (- 12) (* u u v))))
 (let ((?x369 (* (- 8) (* r v))))
 (let ((?x251 (* (- 6) (* r u u v))))
 (let ((?x774 (* 6 ?x43)))
 (let ((?x700 (+ ?x774 ?x251 ?x369 ?x768 ?x334 ?x345 ?x612 ?x771 ?x149 ?x266 ?x529 ?x692 ?x572 ?x783 ?x785 ?x787 ?x788 ?x689 ?x690 ?x691)))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x700 ?x204) 0)) $x808)))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x757 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x447 (* (- 1) (* u v v))))
 (let ((?x405 (* r u v)))
 (let ((?x451 (* 2 ?x405)))
 (let ((?x396 (* r r u)))
 (let ((?x445 (* (- 1) ?x396)))
 (let ((?x345 (* r r u u u)))
 (let ((?x333 (* r u u u v)))
 (let ((?x387 (* (- 3) ?x333)))
 (let ((?x313 (+ ?x387 ?x345 (* 2 (* u u u v v)) ?x445 ?x451 (* 2 (* u u u v)) ?x447 (* (- 2) (* r u u u)))))
 (let (($x808 (not (= (* ?x313 ?x204) 0))))
 (let ((?x691 (* 6 (* u u u u))))
 (let ((?x635 (* r u u u)))
 (let ((?x690 (* 12 ?x635)))
 (let ((?x689 (* 6 (* r r u u))))
 (let ((?x785 (* 12 (* r u))))
 (let ((?x783 (* 6 (* r r))))
 (let ((?x572 (* u u u u u)))
 (let ((?x692 (* 2 (* r u u u u))))
 (let ((?x529 (* (- 1) (* u u u u v))))
 (let ((?x406 (* u u u v)))
 (let ((?x266 (* (- 6) ?x406)))
 (let ((?x149 (* (- 12) ?x405)))
 (let ((?x612 (* (- 8) (* u v))))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x768 (* (- 12) (* u u v))))
 (let ((?x369 (* (- 8) (* r v))))
 (let ((?x251 (* (- 6) (* r u u v))))
 (let ((?x774 (* 6 ?x43)))
 (let ((?x715 (+ ?x774 (* 2 (* u 2 u u)) ?x251 ?x369 ?x768 ?x334 ?x345 ?x612 (* 7 ?x396) ?x149 ?x266 (* 2 (* u 2 r u)) ?x529 ?x692 ?x572 ?x783 ?x785 (* 14 (* r u u)) (* 2 (* u 2 r r)) (* 7 (* u u u)) ?x689 ?x690 ?x691 (* 2 (* u 2 u r)))))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x715 ?x204) 0)) $x808))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x385 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x447 (* (- 1) (* u v v))))
 (let ((?x405 (* r u v)))
 (let ((?x451 (* 2 ?x405)))
 (let ((?x396 (* r r u)))
 (let ((?x445 (* (- 1) ?x396)))
 (let ((?x345 (* r r u u u)))
 (let ((?x333 (* r u u u v)))
 (let ((?x387 (* (- 3) ?x333)))
 (let ((?x313 (+ ?x387 ?x345 (* 2 (* u u u v v)) ?x445 ?x451 (* 2 (* u u u v)) ?x447 (* (- 2) (* r u u u)))))
 (let (($x808 (not (= (* ?x313 ?x204) 0))))
 (let ((?x691 (* 6 (* u u u u))))
 (let ((?x635 (* r u u u)))
 (let ((?x690 (* 12 ?x635)))
 (let ((?x689 (* 6 (* r r u u))))
 (let ((?x613 (* u u u)))
 (let ((?x788 (* 11 ?x613)))
 (let ((?x605 (* r u u)))
 (let ((?x787 (* 22 ?x605)))
 (let ((?x785 (* 12 (* r u))))
 (let ((?x783 (* 6 (* r r))))
 (let ((?x572 (* u u u u u)))
 (let ((?x692 (* 2 (* r u u u u))))
 (let ((?x529 (* (- 1) (* u u u u v))))
 (let ((?x406 (* u u u v)))
 (let ((?x266 (* (- 6) ?x406)))
 (let ((?x149 (* (- 12) ?x405)))
 (let ((?x771 (* 11 ?x396)))
 (let ((?x612 (* (- 8) (* u v))))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x768 (* (- 12) (* u u v))))
 (let ((?x369 (* (- 8) (* r v))))
 (let ((?x251 (* (- 6) (* r u u v))))
 (let ((?x774 (* 6 ?x43)))
 (let ((?x700 (+ ?x774 ?x251 ?x369 ?x768 ?x334 ?x345 ?x612 ?x771 ?x149 ?x266 ?x529 ?x692 ?x572 ?x783 ?x785 ?x787 ?x788 ?x689 ?x690 ?x691)))
 (let (($x209 (= ?x204 0)))
 (let (($x109 (and $x209 (or (not (= (* ?x700 ?x204) 0)) $x808))))
 (let ((?x715 (+ ?x774 (* 2 (* u 2 u u)) ?x251 ?x369 ?x768 ?x334 ?x345 ?x612 (* 7 ?x396) ?x149 ?x266 (* 2 (* u 2 r u)) ?x529 ?x692 ?x572 ?x783 ?x785 (* 14 ?x605) (* 2 (* u 2 r r)) (* 7 ?x613) ?x689 ?x690 ?x691 (* 2 (* u 2 u r)))))
 (let (($x812 (and $x209 (or (not (= (* ?x715 ?x204) 0)) $x808))))
 (rewrite (= $x812 $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x255 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x140 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x773 (* (- 1) (* (+ 2 v) (+ r (* (- 1) v)) u u u))))
 (let ((?x591 (+ ?x773 (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u u u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x45 (* v v)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x553 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x132 (+ 2 u)))
 (let ((?x650 (+ (* (- 1) (* ?x132 ?x132 ?x132 ?x75 v)) (* ?x132 ?x132 ?x132 ?x75 ?x75) (* (- 1) (* ?x132 ?x75 ?x75)))))
 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x650 ?x553) 0)) (not (= (* ?x591 ?x140) 0))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x112 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x447 (* (- 1) (* u v v))))
 (let ((?x405 (* r u v)))
 (let ((?x451 (* 2 ?x405)))
 (let ((?x396 (* r r u)))
 (let ((?x445 (* (- 1) ?x396)))
 (let ((?x345 (* r r u u u)))
 (let ((?x333 (* r u u u v)))
 (let ((?x387 (* (- 3) ?x333)))
 (let ((?x313 (+ ?x387 ?x345 (* 2 (* u u u v v)) ?x445 ?x451 (* 2 (* u u u v)) ?x447 (* (- 2) (* r u u u)))))
 (let (($x808 (not (= (* ?x313 ?x204) 0))))
 (let ((?x691 (* 6 (* u u u u))))
 (let ((?x635 (* r u u u)))
 (let ((?x690 (* 12 ?x635)))
 (let ((?x689 (* 6 (* r r u u))))
 (let ((?x785 (* 12 (* r u))))
 (let ((?x783 (* 6 (* r r))))
 (let ((?x572 (* u u u u u)))
 (let ((?x692 (* 2 (* r u u u u))))
 (let ((?x529 (* (- 1) (* u u u u v))))
 (let ((?x406 (* u u u v)))
 (let ((?x266 (* (- 6) ?x406)))
 (let ((?x149 (* (- 12) ?x405)))
 (let ((?x612 (* (- 8) (* u v))))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x768 (* (- 12) (* u u v))))
 (let ((?x369 (* (- 8) (* r v))))
 (let ((?x251 (* (- 6) (* r u u v))))
 (let ((?x774 (* 6 ?x43)))
 (let ((?x715 (+ ?x774 (* 2 (* u 2 u u)) ?x251 ?x369 ?x768 ?x334 ?x345 ?x612 (* 7 ?x396) ?x149 ?x266 (* 2 (* u 2 r u)) ?x529 ?x692 ?x572 ?x783 ?x785 (* 14 (* r u u)) (* 2 (* u 2 r r)) (* 7 (* u u u)) ?x689 ?x690 ?x691 (* 2 (* u 2 u r)))))
 (let (($x209 (= ?x204 0)))
 (let (($x812 (and $x209 (or (not (= (* ?x715 ?x204) 0)) $x808))))
 (let ((?x140 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x773 (* (- 1) (* (+ 2 v) (+ r (* (- 1) v)) u u u))))
 (let ((?x591 (+ ?x773 (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u u u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x553 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x132 (+ 2 u)))
 (let ((?x650 (+ (* (- 1) (* ?x132 ?x132 ?x132 ?x75 v)) (* ?x132 ?x132 ?x132 ?x75 ?x75) (* (- 1) (* ?x132 ?x75 ?x75)))))
 (let (($x365 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x650 ?x553) 0)) (not (= (* ?x591 ?x140) 0))))))
 (rewrite (= $x365 $x812)))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((r Int) (u Int) (v Int) )(! (let ((?x79 (+ u 2)))
 (let ((?x75 (+ r u)))
 (let ((?x90 (+ (* (- 1) ?x75 ?x79 ?x79 ?x79 v) (* ?x75 ?x75 ?x79 ?x79 ?x79))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) (- ?x90 (* ?x75 ?x75 ?x79)))))
 (let ((?x69 (+ (* (- 1) (- r v) u u u (+ v 2)) (* (- r v) (- r v) u u u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x73 (= (* (- ?x63 ?x48) (- ?x69 (* (- r v) (- r v) u))) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x242 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x140 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x773 (* (- 1) (* (+ 2 v) (+ r (* (- 1) v)) u u u))))
 (let ((?x591 (+ ?x773 (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u u u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x45 (* v v)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x553 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x132 (+ 2 u)))
 (let ((?x650 (+ (* (- 1) (* ?x132 ?x132 ?x132 ?x75 v)) (* ?x132 ?x132 ?x132 ?x75 ?x75) (* (- 1) (* ?x132 ?x75 ?x75)))))
 (let (($x365 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x650 ?x553) 0)) (not (= (* ?x591 ?x140) 0))))))
 (let ((?x79 (+ u 2)))
 (let ((?x66 (- 1)))
 (let ((?x92 (- (+ (* ?x66 ?x75 ?x79 ?x79 ?x79 v) (* ?x75 ?x75 ?x79 ?x79 ?x79)) (* ?x75 ?x75 ?x79))))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) ?x92)))
 (let ((?x69 (+ (* ?x66 (- r v) u u u (+ v 2)) (* (- r v) (- r v) u u u))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x73 (= (* (- ?x63 ?x48) (- ?x69 (* (- r v) (- r v) u))) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x97 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0))))))
 (rewrite (= $x97 $x365)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x745 (mp (mp @x99 (quant-intro (proof-bind ?x242) (= $x98 $x255)) $x255) (rewrite (= $x255 $x255)) $x255)))
 (let ((@x354 (mp (mp @x745 (quant-intro (proof-bind ?x112) (= $x255 $x757)) $x757) (quant-intro (proof-bind ?x385) (= $x757 $x476)) $x476)))
 (let ((@x196 (mp (mp~ @x354 (sk (~ $x476 $x394)) $x394) (rewrite (= $x394 $x201)) $x201)))
 (let ((@x778 (and-elim @x196 $x798)))
 (let ((@x342 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x798) $x350)) @x778 $x350)))
 (let (($x351 (<= ?x496 0)))
 (let ((@x676 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x798) $x351)) @x778 $x351)))
 (let (($x115 (not (<= ?x600 0))))
 (let (($x228 (>= ?x600 0)))
 (let (($x607 (>= ?x195 0)))
 (let (($x769 (<= ?x195 0)))
 (let ((@x124 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x211 (not $x769) (not $x607))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x769)) @x676 @x342 false) $x769) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x607)) @x676 @x342 false) $x607) $x211)))
 (let ((@x362 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x653 $x115 (not $x228))) (unit-resolution (and-elim @x196 $x295) @x124 $x611) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x228)) @x676 @x342 false) $x228) $x115)))
 ((_ th-lemma arith farkas 1 1 1) @x362 @x676 @x342 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        45
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             272
 :arith-nonlinear-bounds    28
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.64
 :memory                    3.16
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1181245
 :num-checks                1
 :propagations              14
 :rlimit-count              4695
 :time                      0.01
 :total-time                0.01)
