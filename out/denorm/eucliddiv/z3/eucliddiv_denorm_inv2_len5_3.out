unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x71 (* y00 q00)))
 (let ((?x82 (+ r00 ?x71 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x252 (>= ?x82 0)))
 (let (($x87 (= ?x82 0)))
 (let ((?x244 (* y00 y00 y00)))
 (let ((?x124 (* 4 ?x244)))
 (let ((?x259 (* (- 2) (* r!1 r!1 r!1))))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x435 (+ ?x66 (* 6 (* y00 r!1 r!1)) (* y00 y00 y00 q!2 q!2) (* 3 (* y00 r!1 r!1 q!2 q!2)) (* (- 1) (* r!1 r!1 r!1 q!2 q!2)) ?x259 ?x124 (* (- 7) (* y00 y00 r!1)) (* 9 (* y00 r!1 r!1 q!2)) (* (- 10) (* y00 y00 r!1 q!2)) (* 5 (* y00 y00 y00 q!2)) (* (- 3) (* y00 y00 r!1 q!2 q!2)) (* (- 3) (* r!1 r!1 r!1 q!2)))))
 (let ((?x443 (* (+ (* (- 1) r00) (* (- 1) ?x71) (* y00 q!2) r!1) ?x435)))
 (let (($x313 (= ?x443 0)))
 (let (($x444 (not $x313)))
 (let (($x347 (and (= (+ y00 (* (- 1) y!0)) 0) $x87 $x444)))
 (let ((?x131 (+ ?x66 (* (- 7) (* r!1 y00 y00)) (* (- 10) (* q!2 r!1 y00 y00)) ?x259 (* (- 3) (* q!2 r!1 r!1 r!1)) (* 6 (* r!1 r!1 y00)) (* 9 (* q!2 r!1 r!1 y00)) ?x124 (* 5 (* q!2 y00 y00 y00)) (* (- 1) (* q!2 q!2 r!1 r!1 r!1)) (* 3 (* q!2 q!2 r!1 r!1 y00)) (* (- 3) (* q!2 q!2 r!1 y00 y00)) (* q!2 q!2 y00 y00 y00))))
 (let ((?x81 (* (- 1) ?x71)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x242 (+ r!1 ?x67 (* q!2 y00) ?x81)))
 (let (($x290 (and (= (+ y!0 ?x66) 0) (= ?x242 0) (not (= (* ?x242 ?x131) 0)))))
 (let (($x159 (exists ((q Int) (r Int) (y Int) )(! (let ((?x427 (* q q y00 y00 y00)))
 (let ((?x490 (* (- 3) (* q q r y00 y00))))
 (let ((?x487 (* 3 (* q q r r y00))))
 (let ((?x463 (* (- 1) (* q q r r r))))
 (let ((?x244 (* y00 y00 y00)))
 (let ((?x124 (* 4 ?x244)))
 (let ((?x474 (* 9 (* q r r y00))))
 (let ((?x477 (* 6 (* r r y00))))
 (let ((?x476 (* (- 3) (* q r r r))))
 (let ((?x482 (* (- 2) (* r r r))))
 (let ((?x481 (* (- 10) (* q r y00 y00))))
 (let ((?x485 (* (- 7) (* r y00 y00))))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x113 (+ ?x66 ?x485 ?x481 ?x482 ?x476 ?x477 ?x474 ?x124 (* 5 (* q y00 y00 y00)) ?x463 ?x487 ?x490 ?x427)))
 (let ((?x71 (* y00 q00)))
 (let ((?x81 (* (- 1) ?x71)))
 (let ((?x39 (* q y00)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x95 (+ r ?x67 ?x39 ?x81)))
 (let (($x100 (= ?x95 0)))
 (let (($x77 (= (+ y ?x66) 0)))
 (and $x77 $x100 (not (= (* ?x95 ?x113) 0)))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x386 (exists ((q Int) (r Int) (y Int) )(! (let ((?x66 (* (- 1) y00)))
 (let ((?x161 (+ r ?x66)))
 (let ((?x183 (+ 1 q)))
 (let ((?x410 (+ (* (- 1) (* y00 y00 ?x183 ?x161)) (* (- 1) (* ?x183 ?x161 ?x161 ?x161)) (* y00 y00 y00 ?x183) ?x66 (* (- 1) (* ?x183 ?x183 ?x161 ?x161 ?x161)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let (($x168 (not (= (* (+ r ?x66 ?x67 ?x179 (* y00 ?x183)) ?x410) 0))))
 (let (($x240 (= (+ r ?x67 ?x179 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x240 $x168)))))))))) :qid k!29))
 ))
 (let ((?x181 (lambda ((q Int) (r Int) (y Int) )(let ((?x427 (* q q y00 y00 y00)))
 (let ((?x490 (* (- 3) (* q q r y00 y00))))
 (let ((?x487 (* 3 (* q q r r y00))))
 (let ((?x463 (* (- 1) (* q q r r r))))
 (let ((?x244 (* y00 y00 y00)))
 (let ((?x124 (* 4 ?x244)))
 (let ((?x474 (* 9 (* q r r y00))))
 (let ((?x477 (* 6 (* r r y00))))
 (let ((?x476 (* (- 3) (* q r r r))))
 (let ((?x482 (* (- 2) (* r r r))))
 (let ((?x481 (* (- 10) (* q r y00 y00))))
 (let ((?x485 (* (- 7) (* r y00 y00))))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x113 (+ ?x66 ?x485 ?x481 ?x482 ?x476 ?x477 ?x474 ?x124 (* 5 (* q y00 y00 y00)) ?x463 ?x487 ?x490 ?x427)))
 (let ((?x71 (* y00 q00)))
 (let ((?x81 (* (- 1) ?x71)))
 (let ((?x39 (* q y00)))
 (let ((?x67 (* (- 1) r00)))
 (let ((?x95 (+ r ?x67 ?x39 ?x81)))
 (let (($x100 (= ?x95 0)))
 (let (($x77 (= (+ y ?x66) 0)))
 (let (($x221 (and $x77 $x100 (not (= (* ?x95 ?x113) 0)))))
 (let ((?x161 (+ r ?x66)))
 (let ((?x183 (+ 1 q)))
 (let ((?x410 (+ (* (- 1) (* y00 y00 ?x183 ?x161)) (* (- 1) (* ?x183 ?x161 ?x161 ?x161)) (* y00 y00 y00 ?x183) ?x66 (* (- 1) (* ?x183 ?x183 ?x161 ?x161 ?x161)))))
 (let ((?x413 (* (+ r ?x66 ?x67 (* (- 1) (* q00 y00)) (* y00 ?x183)) ?x410)))
 (let (($x168 (not (= ?x413 0))))
 (let (($x240 (= (+ r ?x67 (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x198 (and (= (+ y00 (* (- 1) y)) 0) $x240 $x168)))
 (rewrite (= $x198 $x221))))))))))))))))))))))))))))))))
 ))
 (let (($x235 (exists ((q Int) (r Int) (y Int) )(! (let ((?x66 (* (- 1) y00)))
 (let ((?x161 (+ r ?x66)))
 (let ((?x183 (+ 1 q)))
 (let ((?x410 (+ (* (- 1) (* y00 y00 ?x183 ?x161)) (* (- 1) (* ?x183 ?x161 ?x161 ?x161)) (* y00 y00 y00 ?x183) ?x66 (* (- 1) (* ?x183 ?x183 ?x161 ?x161 ?x161)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let (($x168 (not (= (* (+ r ?x66 ?x67 ?x179 (* y00 ?x183)) ?x410) 0))))
 (let (($x240 (= (+ r ?x67 ?x179 (* y00 q)) 0)))
 (and (= (+ ?x66 y) 0) $x240 $x168)))))))))) :qid k!29))
 ))
 (let ((?x391 (lambda ((q Int) (r Int) (y Int) )(let ((?x66 (* (- 1) y00)))
 (let ((?x161 (+ r ?x66)))
 (let ((?x183 (+ 1 q)))
 (let ((?x410 (+ (* (- 1) (* y00 y00 ?x183 ?x161)) (* (- 1) (* ?x183 ?x161 ?x161 ?x161)) (* y00 y00 y00 ?x183) ?x66 (* (- 1) (* ?x183 ?x183 ?x161 ?x161 ?x161)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let (($x168 (not (= (* (+ r ?x66 ?x67 ?x179 (* y00 ?x183)) ?x410) 0))))
 (let (($x240 (= (+ r ?x67 ?x179 (* y00 q)) 0)))
 (let (($x198 (and (= (+ y00 (* (- 1) y)) 0) $x240 $x168)))
 (let (($x205 (and (= (+ ?x66 y) 0) $x240 $x168)))
 (rewrite (= $x205 $x198))))))))))))))
 ))
 (let (($x61 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (+ (- (* (- 1) ?x45 ?x42 y00 y00) (* ?x45 ?x42 ?x42 ?x42)) (* ?x45 y00 y00 y00))))
 (let ((?x56 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) (- (- ?x52 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x56 0)))))))) :qid k!29))
 ))
 (let ((?x385 (lambda ((q Int) (r Int) (y Int) )(let ((?x66 (* (- 1) y00)))
 (let ((?x161 (+ r ?x66)))
 (let ((?x183 (+ 1 q)))
 (let ((?x410 (+ (* (- 1) (* y00 y00 ?x183 ?x161)) (* (- 1) (* ?x183 ?x161 ?x161 ?x161)) (* y00 y00 y00 ?x183) ?x66 (* (- 1) (* ?x183 ?x183 ?x161 ?x161 ?x161)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x67 (* (- 1) r00)))
 (let (($x168 (not (= (* (+ r ?x66 ?x67 ?x179 (* y00 ?x183)) ?x410) 0))))
 (let (($x240 (= (+ r ?x67 ?x179 (* y00 q)) 0)))
 (let (($x205 (and (= (+ ?x66 y) 0) $x240 $x168)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (+ (- (* (- 1) ?x45 ?x42 y00 y00) (* ?x45 ?x42 ?x42 ?x42)) (* ?x45 y00 y00 y00))))
 (let ((?x56 (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) (- (- ?x52 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42)))))
 (let (($x60 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x56 0))))))
 (rewrite (= $x60 $x205))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x115 (mp (mp @x62 (quant-intro (proof-bind ?x385) (= $x61 $x235)) $x235) (rewrite (= $x235 $x235)) $x235)))
 (let ((@x309 (mp (mp @x115 (quant-intro (proof-bind ?x391) (= $x235 $x386)) $x386) (quant-intro (proof-bind ?x181) (= $x386 $x159)) $x159)))
 (let ((@x185 (mp (mp~ @x309 (sk (~ $x159 $x290)) $x290) (rewrite (= $x290 $x347)) $x347)))
 (let ((@x245 (and-elim @x185 $x87)))
 (let ((@x442 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x87) $x252)) @x245 $x252)))
 (let (($x234 (<= ?x82 0)))
 (let ((@x447 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x87) $x234)) @x245 $x234)))
 (let (($x120 (not (<= ?x443 0))))
 (let (($x349 (>= ?x443 0)))
 (let ((@x445 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x313 $x120 (not $x349))) (and-elim @x185 $x444) (or $x120 (not $x349)))))
 (let ((@x472 (unit-resolution @x445 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x349)) @x447 @x442 false) $x349) $x120)))
 ((_ th-lemma arith farkas 1 1 1) @x472 @x447 @x442 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        8
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             82
 :arith-nonlinear-horner    6
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                14
 :final-checks              2
 :max-memory                3.59
 :memory                    3.10
 :mk-bool-var               21
 :mk-clause                 18
 :num-allocs                1120844
 :num-checks                1
 :propagations              6
 :rlimit-count              2616
 :time                      0.01
 :total-time                0.01)
