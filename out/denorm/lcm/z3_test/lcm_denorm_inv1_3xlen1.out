unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun y!2 () Int)
(declare-fun x!3 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(declare-fun v!4 () Int)
(proof
(let ((?x69 (* (- 1) k!00)))
 (let ((?x89 (* (- 1) k!10)))
 (let ((?x67 (* v!4 y!2)))
 (let ((?x142 (+ ?x67 ?x89 ?x69 (* x!3 u!5))))
 (let ((?x372 (+ v!4 u!5)))
 (let ((?x368 (* ?x372 ?x372 ?x372 ?x372 ?x372 ?x372 ?x372 ?x372 ?x142 y!2 y!2 y!2 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5)))
 (let (($x324 (= ?x368 0)))
 (let (($x370 (<= ?x142 0)))
 (let (($x381 (= ?x142 0)))
 (let ((?x365 (+ (* (- 1) x!3) y!2)))
 (let ((?x293 (* ?x372 ?x372 ?x372 ?x372 ?x365 ?x365 ?x365 ?x365 ?x365 ?x365 ?x365 ?x142 v!4 v!4 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let (($x292 (= ?x293 0)))
 (let (($x298 (or (not $x324) (not $x292))))
 (let (($x299 (and $x381 $x298)))
 (let ((?x141 (+ (* u!5 x!3) ?x67 ?x89 ?x69)))
 (let ((?x343 (+ u!5 v!4)))
 (let ((?x361 (* ?x343 ?x343 ?x343 ?x343 ?x365 ?x365 ?x365 ?x365 ?x365 ?x365 ?x365 ?x141 v!4 v!4 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let ((?x339 (* ?x343 ?x343 ?x343 ?x343 ?x343 ?x343 ?x343 ?x343 ?x141 y!2 y!2 y!2 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5)))
 (let (($x347 (and (= ?x141 0) (or (not (= ?x339 0)) (not (= ?x361 0))))))
 (let (($x318 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x69 (* (- 1) k!00)))
 (let ((?x89 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x131 (+ ?x33 ?x34 ?x89 ?x69)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x91 (+ ?x83 y)))
 (let ((?x51 (+ u v)))
 (let ((?x314 (* ?x51 ?x51 ?x51 ?x51 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x131 v v v v v v v v)))
 (let ((?x349 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x131 y y y y y y y u u u u)))
 (and (= ?x131 0) (or (not (= ?x349 0)) (not (= ?x314 0)))))))))))))) :qid k!29))
 ))
 (let (($x140 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x89 (* (- 1) k!10)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x104 (+ y ?x83)))
 (let ((?x127 (* ?x104 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x69 (* (- 1) k!00)))
 (let ((?x338 (* ?x51 ?x51 ?x51 ?x51 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 (+ ?x69 ?x52 ?x127 ?x89) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x126 (* (+ x (* (- 1) y)) u)))
 (let ((?x106 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x69 ?x126 ?x45 ?x89) y y y y y y y u u u u)))
 (and (= (+ ?x69 (* x u) (* y v) ?x89) 0) (or (not (= ?x106 0)) (not (= ?x338 0)))))))))))))))) :qid k!29))
 ))
 (let ((?x316 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x69 (* (- 1) k!00)))
 (let ((?x89 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x131 (+ ?x33 ?x34 ?x89 ?x69)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x91 (+ ?x83 y)))
 (let ((?x51 (+ u v)))
 (let ((?x314 (* ?x51 ?x51 ?x51 ?x51 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x91 ?x131 v v v v v v v v)))
 (let ((?x349 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x131 y y y y y y y u u u u)))
 (let (($x419 (and (= ?x131 0) (or (not (= ?x349 0)) (not (= ?x314 0))))))
 (let ((?x104 (+ y ?x83)))
 (let ((?x338 (* ?x51 ?x51 ?x51 ?x51 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 (+ ?x69 (* ?x51 x) (* ?x104 v) ?x89) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x126 (* (+ x (* (- 1) y)) u)))
 (let ((?x106 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x69 ?x126 ?x45 ?x89) y y y y y y y u u u u)))
 (let (($x77 (and (= (+ ?x69 (* x u) (* y v) ?x89) 0) (or (not (= ?x106 0)) (not (= ?x338 0))))))
 (rewrite (= $x77 $x419)))))))))))))))))))))
 ))
 (let (($x103 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x104 (+ y ?x83)))
 (let ((?x127 (* ?x104 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x341 (* ?x51 ?x51 ?x51 ?x51 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 (+ ?x71 ?x52 ?x127 ?x87) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x126 (* (+ x (* (- 1) y)) u)))
 (let ((?x109 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x71 ?x126 ?x45 ?x87) y y y y y y y u u u u)))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x109 0)) (not (= ?x341 0))))))))))))))))) :qid k!29))
 ))
 (let ((?x129 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x89 (* (- 1) k!10)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x104 (+ y ?x83)))
 (let ((?x127 (* ?x104 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x69 (* (- 1) k!00)))
 (let ((?x338 (* ?x51 ?x51 ?x51 ?x51 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 (+ ?x69 ?x52 ?x127 ?x89) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x126 (* (+ x (* (- 1) y)) u)))
 (let ((?x106 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x69 ?x126 ?x45 ?x89) y y y y y y y u u u u)))
 (let (($x77 (and (= (+ ?x69 (* x u) (* y v) ?x89) 0) (or (not (= ?x106 0)) (not (= ?x338 0))))))
 (let ((?x341 (* ?x51 ?x51 ?x51 ?x51 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 (+ (* (- 1) (* u00 x00)) ?x52 ?x127 (* (- 1) (* v00 y00))) v v v v v v v v)))
 (let ((?x109 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ (* (- 1) (* u00 x00)) ?x126 ?x45 (* (- 1) (* v00 y00))) y y y y y y y u u u u)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x75 (* y v)))
 (let ((?x72 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x362 (and (= (+ ?x71 ?x72 ?x75 ?x87) 0) (or (not (= ?x109 0)) (not (= ?x341 0))))))
 (rewrite (= $x362 $x77))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x51 (+ u v)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) (* ?x51 x) (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v v v ?x53 ?x53 ?x53 ?x51 v v ?x53 ?x53 ?x53 ?x51 v v v ?x53)))
 (let ((?x44 (+ v u)))
 (let ((?x47 (- (+ (* ?x29 u00 x00) (* u (- x y)) (* ?x44 y)) ?x38)))
 (let ((?x48 (* ?x47 ?x29 u u ?x44 ?x44 ?x44 y y y u ?x44 ?x44 y y y u ?x44 ?x44 ?x44 y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))))))))) :qid k!29))
 ))
 (let ((?x123 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x83 (* (- 1) x)))
 (let ((?x104 (+ y ?x83)))
 (let ((?x127 (* ?x104 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x341 (* ?x51 ?x51 ?x51 ?x51 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 ?x104 (+ ?x71 ?x52 ?x127 ?x87) v v v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x126 (* (+ x (* (- 1) y)) u)))
 (let ((?x109 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 (+ ?x71 ?x126 ?x45 ?x87) y y y y y y y u u u u)))
 (let (($x362 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x109 0)) (not (= ?x341 0))))))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v v v ?x53 ?x53 ?x53 ?x51 v v ?x53 ?x53 ?x53 ?x51 v v v ?x53)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u (- x y)) ?x45) ?x38) ?x29 u u ?x44 ?x44 ?x44 y y y u ?x44 ?x44 y y y u ?x44 ?x44 ?x44 y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x362)))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x116 (mp (mp @x63 (quant-intro (proof-bind ?x123) (= $x62 $x103)) $x103) (rewrite (= $x103 $x103)) $x103)))
 (let ((@x132 (mp (mp @x116 (quant-intro (proof-bind ?x129) (= $x103 $x140)) $x140) (quant-intro (proof-bind ?x316) (= $x140 $x318)) $x318)))
 (let ((@x296 (mp (mp~ @x132 (sk (~ $x318 $x347)) $x347) (rewrite (= $x347 $x299)) $x299)))
 (let ((@x113 (and-elim @x296 $x381)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x381) $x370)) @x113 $x370)))
 (let (($x369 (>= ?x142 0)))
 (let ((@x125 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x381) $x369)) @x113 $x369)))
 (let (($x134 (>= ?x293 0)))
 (let ((@x384 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x134)) @x125 @x371 false) $x134) @x125 @x371 $x292)))
 (unit-resolution (and-elim @x296 $x298) @x384 ((_ th-lemma arith eq-propagate 0 0 0 0) @x125 @x371 @x125 @x371 $x324) false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        6
 :arith-conflicts           1
 :arith-eq-adapter          3
 :arith-fixed-eqs           3
 :arith-num-rows            3
 :arith-pseudo-nonlinear    4
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                3
 :eliminated-applications   2
 :max-memory                19.59
 :memory                    19.18
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                474512
 :num-checks                1
 :propagations              6
 :rlimit-count              901
 :time                      0.01
 :total-time                0.02)
