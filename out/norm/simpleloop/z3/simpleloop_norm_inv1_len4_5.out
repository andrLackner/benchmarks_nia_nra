unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x561 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x674 (<= ?x561 0)))
 (let (($x567 (= ?x561 0)))
 (let ((?x1181 (+ 1 y!0)))
 (let ((?x1180 (+ (- 1) x!1)))
 (let ((?x1183 (* (- 1) (* ?x1180 ?x1180 ?x1180 ?x1181 ?x1181 ?x1181))))
 (let ((?x1185 (* (- 1) (* ?x1180 ?x1180 ?x1181 ?x1181 ?x1181 ?x1181))))
 (let ((?x463 (* (- 1) (* y!0 y!0 y!0 y!0))))
 (let ((?x234 (* (- 2) (* y!0 y!0))))
 (let ((?x282 (* (- 1) (* x!1 x!1))))
 (let ((?x713 (* (- 3) (* y!0 y!0 y!0))))
 (let ((?x608 (+ (* x00 x!1 x!1) (* 2 (* y00 y!0 y!0 y!0)) (* 2 (* y!0 x!1 x!1)) (* (- 1) (* y!0 y!0 x!1)) (* 3 (* y!0 y!0 x!1 x!1)) (* (- 3) (* y!0 x!1)) (* y00 y!0 y!0 y!0 x!1 x!1) (* 3 (* y00 y!0 x!1 x!1)) (* y00 x!1 x!1) (* 6 (* y00 y!0 y!0)) ?x713 (* (- 3) (* y00 y!0 y!0 y!0 x!1)) (* (- 8) (* y00 y!0 x!1)) ?x282 ?x234 (* (- 8) (* x00 y!0 x!1)) (* (- 9) (* x00 y!0 y!0 x!1)) (* (- 3) (* x00 y!0 y!0 y!0 x!1)) ?x463 y!0 x!1 (* 5 (* x00 y!0)) (* 6 (* x00 y!0 y!0)) (* 2 (* x00 y!0 y!0 y!0)) (* y!0 y!0 y!0 x!1 x!1) (* 2 (* y!0 y!0 y!0 x!1)) (* x00 y!0 y!0 y!0 x!1 x!1) (* 3 (* x00 y!0 y!0 x!1 x!1)) (* 3 (* x00 y!0 x!1 x!1)) (* 3 (* y00 y!0 y!0 x!1 x!1)) (* (- 1) (* x00 x!1)) (* 5 (* y00 y!0)) (* (- 9) (* y00 y!0 y!0 x!1)) (* (- 1) (* y00 x!1)) ?x1185 ?x1183 (* y!0 y!0 y!0 y!0 x!1))))
 (let (($x612 (= ?x608 0)))
 (let (($x306 (not $x612)))
 (let (($x609 (and $x567 $x306)))
 (let ((?x472 (+ x!1 y!0 (* (- 8) (* x!1 y!0 x00)) (* (- 9) (* x!1 y!0 y!0 x00)) (* (- 3) (* x!1 y!0 y!0 y!0 x00)) (* 5 (* y!0 x00)) (* 6 (* y!0 y!0 x00)) ?x713 (* 2 (* y!0 y!0 y!0 x00)) ?x234 (* 2 (* x!1 y!0 y!0 y!0)) (* x!1 x!1 y!0 y!0 y!0) ?x282 (* 2 (* x!1 x!1 y!0)) (* (- 1) (* x!1 y!0 y!0)) (* 3 (* x!1 x!1 y!0 y!0)) (* (- 3) (* x!1 y!0)) (* 5 (* y!0 y00)) (* 6 (* y!0 y!0 y00)) (* 2 (* y!0 y!0 y!0 y00)) (* (- 3) (* x!1 y!0 y!0 y!0 y00)) (* (- 8) (* x!1 y!0 y00)) (* (- 9) (* x!1 y!0 y!0 y00)) (* (- 1) (* x!1 y00)) ?x1185 ?x1183 (* x!1 x!1 y!0 y!0 y!0 y00) (* x!1 x!1 y00) (* 3 (* x!1 x!1 y!0 y00)) (* 3 (* x!1 x!1 y!0 y!0 y00)) (* (- 1) (* x!1 x00)) ?x463 (* x!1 y!0 y!0 y!0 y!0) (* x!1 x!1 x00) (* 3 (* x!1 x!1 y!0 x00)) (* 3 (* x!1 x!1 y!0 y!0 x00)) (* x!1 x!1 y!0 y!0 y!0 x00))))
 (let (($x469 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x472 0)))))
 (let (($x294 (exists ((x Int) (y Int) )(! (let ((?x1111 (* x x y y y x00)))
 (let ((?x1118 (* 3 (* x x y y x00))))
 (let ((?x1117 (* 3 (* x x y x00))))
 (let ((?x1038 (* x x x00)))
 (let ((?x939 (* x y y y y)))
 (let ((?x938 (* (- 1) (* y y y y))))
 (let ((?x496 (* (- 1) (* x x00))))
 (let ((?x805 (* 3 (* x x y y y00))))
 (let ((?x804 (* 3 (* x x y y00))))
 (let ((?x768 (* x x y00)))
 (let ((?x758 (* x x y y y y00)))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x598 (* (- 1) ?x659)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x670 (* (- 1) ?x587)))
 (let ((?x682 (* (- 1) (* x y00))))
 (let ((?x498 (* x y y y00)))
 (let ((?x1533 (* (- 9) ?x498)))
 (let ((?x493 (* x y y00)))
 (let ((?x1532 (* (- 8) ?x493)))
 (let ((?x822 (* (- 3) (* x y y y y00))))
 (let ((?x821 (* 2 (* y y y y00))))
 (let ((?x820 (* 6 (* y y y00))))
 (let ((?x818 (* 5 (* y y00))))
 (let ((?x911 (* (- 3) (* x y))))
 (let ((?x433 (* 3 (* x x y y))))
 (let ((?x396 (* x y y)))
 (let ((?x1105 (* (- 1) ?x396)))
 (let ((?x1207 (* 2 (* x x y))))
 (let ((?x712 (* (- 1) (* x x))))
 (let ((?x367 (* x x y y y)))
 (let ((?x1137 (* 2 (* x y y y))))
 (let ((?x354 (* y y)))
 (let ((?x1531 (* (- 2) ?x354)))
 (let ((?x1136 (* 2 (* y y y x00))))
 (let ((?x1530 (* (- 3) (* y y y))))
 (let ((?x1135 (* 6 (* y y x00))))
 (let ((?x244 (* y x00)))
 (let ((?x1529 (* 5 ?x244)))
 (let ((?x1133 (* (- 3) (* x y y y x00))))
 (let ((?x182 (* x y y x00)))
 (let ((?x1528 (* (- 9) ?x182)))
 (let ((?x170 (* x y x00)))
 (let ((?x1526 (* (- 8) ?x170)))
 (let ((?x288 (+ x y ?x1526 ?x1528 ?x1133 ?x1529 ?x1135 ?x1530 ?x1136 ?x1531 ?x1137 ?x367 ?x712 ?x1207 ?x1105 ?x433 ?x911 ?x818 ?x820 ?x821 ?x822 ?x1532 ?x1533 ?x682 ?x670 ?x598 ?x758 ?x768 ?x804 ?x805 ?x496 ?x938 ?x939 ?x1038 ?x1117 ?x1118 ?x1111)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x97 (not (= ?x288 0))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1541 (exists ((x Int) (y Int) )(! (let ((?x1111 (* x x y y y x00)))
 (let ((?x1118 (* 3 (* x x y y x00))))
 (let ((?x1117 (* 3 (* x x y x00))))
 (let ((?x1038 (* x x x00)))
 (let ((?x939 (* x y y y y)))
 (let ((?x938 (* (- 1) (* y y y y))))
 (let ((?x496 (* (- 1) (* x x00))))
 (let ((?x805 (* 3 (* x x y y y00))))
 (let ((?x804 (* 3 (* x x y y00))))
 (let ((?x768 (* x x y00)))
 (let ((?x758 (* x x y y y y00)))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x598 (* (- 1) ?x659)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x670 (* (- 1) ?x587)))
 (let ((?x682 (* (- 1) (* x y00))))
 (let ((?x498 (* x y y y00)))
 (let ((?x1533 (* (- 9) ?x498)))
 (let ((?x493 (* x y y00)))
 (let ((?x1532 (* (- 8) ?x493)))
 (let ((?x822 (* (- 3) (* x y y y y00))))
 (let ((?x821 (* 2 (* y y y y00))))
 (let ((?x820 (* 6 (* y y y00))))
 (let ((?x818 (* 5 (* y y00))))
 (let ((?x911 (* (- 3) (* x y))))
 (let ((?x433 (* 3 (* x x y y))))
 (let ((?x396 (* x y y)))
 (let ((?x1105 (* (- 1) ?x396)))
 (let ((?x1207 (* 2 (* x x y))))
 (let ((?x712 (* (- 1) (* x x))))
 (let ((?x367 (* x x y y y)))
 (let ((?x1137 (* 2 (* x y y y))))
 (let ((?x354 (* y y)))
 (let ((?x1531 (* (- 2) ?x354)))
 (let ((?x326 (* y 1)))
 (let ((?x1136 (* 2 (* y y y x00))))
 (let ((?x1530 (* (- 3) (* y y y))))
 (let ((?x1135 (* 6 (* y y x00))))
 (let ((?x244 (* y x00)))
 (let ((?x1529 (* 5 ?x244)))
 (let ((?x1133 (* (- 3) (* x y y y x00))))
 (let ((?x182 (* x y y x00)))
 (let ((?x1528 (* (- 9) ?x182)))
 (let ((?x170 (* x y x00)))
 (let ((?x1526 (* (- 8) ?x170)))
 (let ((?x107 (* x 1)))
 (let ((?x1534 (+ ?x107 ?x1526 ?x1528 ?x1133 ?x1529 ?x1135 ?x1530 ?x1136 ?x326 ?x1531 ?x1137 ?x367 ?x712 ?x1207 ?x1105 ?x433 ?x911 ?x818 ?x820 ?x821 ?x822 ?x1532 ?x1533 ?x682 ?x670 ?x598 ?x758 ?x768 ?x804 ?x805 ?x496 ?x938 ?x939 ?x1038 ?x1117 ?x1118 ?x1111)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x97 (not (= ?x1534 0))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x289 (lambda ((x Int) (y Int) )(let ((?x1111 (* x x y y y x00)))
 (let ((?x1118 (* 3 (* x x y y x00))))
 (let ((?x1117 (* 3 (* x x y x00))))
 (let ((?x1038 (* x x x00)))
 (let ((?x939 (* x y y y y)))
 (let ((?x938 (* (- 1) (* y y y y))))
 (let ((?x496 (* (- 1) (* x x00))))
 (let ((?x805 (* 3 (* x x y y y00))))
 (let ((?x804 (* 3 (* x x y y00))))
 (let ((?x768 (* x x y00)))
 (let ((?x758 (* x x y y y y00)))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x598 (* (- 1) ?x659)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x670 (* (- 1) ?x587)))
 (let ((?x682 (* (- 1) (* x y00))))
 (let ((?x498 (* x y y y00)))
 (let ((?x1533 (* (- 9) ?x498)))
 (let ((?x493 (* x y y00)))
 (let ((?x1532 (* (- 8) ?x493)))
 (let ((?x822 (* (- 3) (* x y y y y00))))
 (let ((?x821 (* 2 (* y y y y00))))
 (let ((?x820 (* 6 (* y y y00))))
 (let ((?x818 (* 5 (* y y00))))
 (let ((?x911 (* (- 3) (* x y))))
 (let ((?x433 (* 3 (* x x y y))))
 (let ((?x396 (* x y y)))
 (let ((?x1105 (* (- 1) ?x396)))
 (let ((?x1207 (* 2 (* x x y))))
 (let ((?x712 (* (- 1) (* x x))))
 (let ((?x367 (* x x y y y)))
 (let ((?x1137 (* 2 (* x y y y))))
 (let ((?x354 (* y y)))
 (let ((?x1531 (* (- 2) ?x354)))
 (let ((?x1136 (* 2 (* y y y x00))))
 (let ((?x1530 (* (- 3) (* y y y))))
 (let ((?x1135 (* 6 (* y y x00))))
 (let ((?x244 (* y x00)))
 (let ((?x1529 (* 5 ?x244)))
 (let ((?x1133 (* (- 3) (* x y y y x00))))
 (let ((?x182 (* x y y x00)))
 (let ((?x1528 (* (- 9) ?x182)))
 (let ((?x170 (* x y x00)))
 (let ((?x1526 (* (- 8) ?x170)))
 (let ((?x288 (+ x y ?x1526 ?x1528 ?x1133 ?x1529 ?x1135 ?x1530 ?x1136 ?x1531 ?x1137 ?x367 ?x712 ?x1207 ?x1105 ?x433 ?x911 ?x818 ?x820 ?x821 ?x822 ?x1532 ?x1533 ?x682 ?x670 ?x598 ?x758 ?x768 ?x804 ?x805 ?x496 ?x938 ?x939 ?x1038 ?x1117 ?x1118 ?x1111)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x508 (and $x97 (not (= ?x288 0)))))
 (let ((?x326 (* y 1)))
 (let ((?x107 (* x 1)))
 (let ((?x1534 (+ ?x107 ?x1526 ?x1528 ?x1133 ?x1529 ?x1135 ?x1530 ?x1136 ?x326 ?x1531 ?x1137 ?x367 ?x712 ?x1207 ?x1105 ?x433 ?x911 ?x818 ?x820 ?x821 ?x822 ?x1532 ?x1533 ?x682 ?x670 ?x598 ?x758 ?x768 ?x804 ?x805 ?x496 ?x938 ?x939 ?x1038 ?x1117 ?x1118 ?x1111)))
 (let (($x919 (and $x97 (not (= ?x1534 0)))))
 (rewrite (= $x919 $x508))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x884 (exists ((x Int) (y Int) )(! (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1101 (* ?x89 ?x89 ?x99)))
 (let ((?x1066 (* ?x89 ?x99 ?x99)))
 (let ((?x1010 (* ?x89 ?x89)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x899 (* y00 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x879 (* x00 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x874 (* ?x89 ?x99)))
 (let ((?x562 (+ ?x874 ?x879 (* (- 1) (* ?x89 ?x89 ?x99 ?x99 ?x99)) ?x899 ?x587 ?x659 (* (- 1) (* y00 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x99)) ?x1010 (* (- 1) (* y00 ?x89 ?x89 ?x99 ?x99 ?x99)) ?x1066 (* (- 1) (* ?x89 ?x99 ?x99 ?x99 ?x99)) (* (- 1) (* x00 ?x89)) (* (- 1) (* y00 ?x89)) (* (- 1) (* x00 ?x89 ?x89 ?x99 ?x99 ?x99)) ?x1101)))
 (let (($x867 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x867 (not (= ?x562 0))))))))))))))) :qid k!26))
 ))
 (let ((?x1543 (lambda ((x Int) (y Int) )(let ((?x1111 (* x x y y y x00)))
 (let ((?x1118 (* 3 (* x x y y x00))))
 (let ((?x1117 (* 3 (* x x y x00))))
 (let ((?x1038 (* x x x00)))
 (let ((?x939 (* x y y y y)))
 (let ((?x938 (* (- 1) (* y y y y))))
 (let ((?x496 (* (- 1) (* x x00))))
 (let ((?x805 (* 3 (* x x y y y00))))
 (let ((?x804 (* 3 (* x x y y00))))
 (let ((?x768 (* x x y00)))
 (let ((?x758 (* x x y y y y00)))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x598 (* (- 1) ?x659)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x670 (* (- 1) ?x587)))
 (let ((?x682 (* (- 1) (* x y00))))
 (let ((?x498 (* x y y y00)))
 (let ((?x1533 (* (- 9) ?x498)))
 (let ((?x493 (* x y y00)))
 (let ((?x1532 (* (- 8) ?x493)))
 (let ((?x822 (* (- 3) (* x y y y y00))))
 (let ((?x821 (* 2 (* y y y y00))))
 (let ((?x820 (* 6 (* y y y00))))
 (let ((?x818 (* 5 (* y y00))))
 (let ((?x911 (* (- 3) (* x y))))
 (let ((?x433 (* 3 (* x x y y))))
 (let ((?x396 (* x y y)))
 (let ((?x1105 (* (- 1) ?x396)))
 (let ((?x1207 (* 2 (* x x y))))
 (let ((?x712 (* (- 1) (* x x))))
 (let ((?x367 (* x x y y y)))
 (let ((?x1137 (* 2 (* x y y y))))
 (let ((?x354 (* y y)))
 (let ((?x1531 (* (- 2) ?x354)))
 (let ((?x326 (* y 1)))
 (let ((?x1136 (* 2 (* y y y x00))))
 (let ((?x1530 (* (- 3) (* y y y))))
 (let ((?x1135 (* 6 (* y y x00))))
 (let ((?x244 (* y x00)))
 (let ((?x1529 (* 5 ?x244)))
 (let ((?x1133 (* (- 3) (* x y y y x00))))
 (let ((?x182 (* x y y x00)))
 (let ((?x1528 (* (- 9) ?x182)))
 (let ((?x170 (* x y x00)))
 (let ((?x1526 (* (- 8) ?x170)))
 (let ((?x107 (* x 1)))
 (let ((?x1534 (+ ?x107 ?x1526 ?x1528 ?x1133 ?x1529 ?x1135 ?x1530 ?x1136 ?x326 ?x1531 ?x1137 ?x367 ?x712 ?x1207 ?x1105 ?x433 ?x911 ?x818 ?x820 ?x821 ?x822 ?x1532 ?x1533 ?x682 ?x670 ?x598 ?x758 ?x768 ?x804 ?x805 ?x496 ?x938 ?x939 ?x1038 ?x1117 ?x1118 ?x1111)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x919 (and $x97 (not (= ?x1534 0)))))
 (let ((?x1101 (* ?x89 ?x89 ?x99)))
 (let ((?x1066 (* ?x89 ?x99 ?x99)))
 (let ((?x1010 (* ?x89 ?x89)))
 (let ((?x899 (* y00 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x879 (* x00 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x874 (* ?x89 ?x99)))
 (let ((?x562 (+ ?x874 ?x879 (* (- 1) (* ?x89 ?x89 ?x99 ?x99 ?x99)) ?x899 ?x587 ?x659 (* (- 1) (* y00 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x99)) ?x1010 (* (- 1) (* y00 ?x89 ?x89 ?x99 ?x99 ?x99)) ?x1066 (* (- 1) (* ?x89 ?x99 ?x99 ?x99 ?x99)) (* (- 1) (* x00 ?x89)) (* (- 1) (* y00 ?x89)) (* (- 1) (* x00 ?x89 ?x89 ?x99 ?x99 ?x99)) ?x1101)))
 (let (($x867 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x109 (and $x867 (not (= ?x562 0)))))
 (rewrite (= $x109 $x919)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x450 (exists ((x Int) (y Int) )(! (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x153 (* x00 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1090 (* y00 ?x89)))
 (let ((?x151 (* x00 ?x89)))
 (let ((?x1021 (* ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x1015 (* y00 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x232 (* x00 ?x89 ?x99)))
 (let ((?x1054 (* y00 ?x89 ?x99)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x598 (* (- 1) ?x659)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x670 (* (- 1) ?x587)))
 (let ((?x889 (* ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x279 (+ (* (- 1) (* ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x99 ?x99 ?x99)) ?x889 (* (- 1) (* y00 ?x89 ?x99 ?x99 ?x99)) ?x670 ?x598 ?x1054 ?x232 (* (- 1) (* ?x89 ?x89)) ?x1015 (* (- 1) (* ?x89 ?x99 ?x99)) ?x1021 ?x151 ?x1090 ?x153 (* (- 1) (* ?x89 ?x89 ?x99)))))
 (let (($x867 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x867 (not (= ?x279 0))))))))))))))))))) :qid k!26))
 ))
 (let ((?x885 (lambda ((x Int) (y Int) )(let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1101 (* ?x89 ?x89 ?x99)))
 (let ((?x1066 (* ?x89 ?x99 ?x99)))
 (let ((?x1010 (* ?x89 ?x89)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x899 (* y00 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x879 (* x00 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x874 (* ?x89 ?x99)))
 (let ((?x562 (+ ?x874 ?x879 (* (- 1) (* ?x89 ?x89 ?x99 ?x99 ?x99)) ?x899 ?x587 ?x659 (* (- 1) (* y00 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x99)) ?x1010 (* (- 1) (* y00 ?x89 ?x89 ?x99 ?x99 ?x99)) ?x1066 (* (- 1) (* ?x89 ?x99 ?x99 ?x99 ?x99)) (* (- 1) (* x00 ?x89)) (* (- 1) (* y00 ?x89)) (* (- 1) (* x00 ?x89 ?x89 ?x99 ?x99 ?x99)) ?x1101)))
 (let (($x867 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x109 (and $x867 (not (= ?x562 0)))))
 (let ((?x153 (* x00 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1090 (* y00 ?x89)))
 (let ((?x151 (* x00 ?x89)))
 (let ((?x1021 (* ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x1015 (* y00 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x232 (* x00 ?x89 ?x99)))
 (let ((?x1054 (* y00 ?x89 ?x99)))
 (let ((?x598 (* (- 1) ?x659)))
 (let ((?x670 (* (- 1) ?x587)))
 (let ((?x889 (* ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x279 (+ (* (- 1) ?x874) (* (- 1) ?x879) ?x889 (* (- 1) ?x899) ?x670 ?x598 ?x1054 ?x232 (* (- 1) ?x1010) ?x1015 (* (- 1) ?x1066) ?x1021 ?x151 ?x1090 ?x153 (* (- 1) ?x1101))))
 (let (($x120 (and $x867 (not (= ?x279 0)))))
 (rewrite (= $x120 $x109))))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (+ (- (* (- 1) ?x35 ?x36) (* ?x35 x00 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x46 (- (- ?x41 (* ?x35 ?x36 ?x36 ?x36 y00)) (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x50 (+ (- ?x46 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x36 y00) (* ?x35 x00 ?x36))))
 (let ((?x56 (- (+ (- ?x50 (* ?x35 ?x35)) (* ?x35 ?x35 ?x36 ?x36 ?x36 y00)) (* ?x35 ?x36 ?x36))))
 (let ((?x61 (+ ?x56 (* ?x35 ?x36 ?x36 ?x36 ?x36) (* ?x35 x00) (* ?x35 y00) (* ?x35 ?x35 x00 ?x36 ?x36 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x61 (* ?x35 ?x35 ?x36)) 0))))))))))) :qid k!26))
 ))
 (let ((?x356 (lambda ((x Int) (y Int) )(let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x153 (* x00 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1090 (* y00 ?x89)))
 (let ((?x151 (* x00 ?x89)))
 (let ((?x1021 (* ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x1015 (* y00 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x232 (* x00 ?x89 ?x99)))
 (let ((?x1054 (* y00 ?x89 ?x99)))
 (let ((?x659 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x598 (* (- 1) ?x659)))
 (let ((?x587 (* ?x89 ?x89 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x670 (* (- 1) ?x587)))
 (let ((?x889 (* ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x279 (+ (* (- 1) (* ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x99 ?x99 ?x99)) ?x889 (* (- 1) (* y00 ?x89 ?x99 ?x99 ?x99)) ?x670 ?x598 ?x1054 ?x232 (* (- 1) (* ?x89 ?x89)) ?x1015 (* (- 1) (* ?x89 ?x99 ?x99)) ?x1021 ?x151 ?x1090 ?x153 (* (- 1) (* ?x89 ?x89 ?x99)))))
 (let (($x867 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x120 (and $x867 (not (= ?x279 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (+ (- (* (- 1) ?x35 ?x36) (* ?x35 x00 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x46 (- (- ?x41 (* ?x35 ?x36 ?x36 ?x36 y00)) (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x50 (+ (- ?x46 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x36 y00) (* ?x35 x00 ?x36))))
 (let ((?x56 (- (+ (- ?x50 (* ?x35 ?x35)) (* ?x35 ?x35 ?x36 ?x36 ?x36 y00)) (* ?x35 ?x36 ?x36))))
 (let ((?x61 (+ ?x56 (* ?x35 ?x36 ?x36 ?x36 ?x36) (* ?x35 x00) (* ?x35 y00) (* ?x35 ?x35 x00 ?x36 ?x36 ?x36))))
 (let (($x67 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x61 (* ?x35 ?x35 ?x36)) 0))))))
 (rewrite (= $x67 $x120))))))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x1075 (mp (mp @x69 (quant-intro (proof-bind ?x356) (= $x68 $x450)) $x450) (rewrite (= $x450 $x450)) $x450)))
 (let ((@x1098 (mp (mp @x1075 (quant-intro (proof-bind ?x885) (= $x450 $x884)) $x884) (quant-intro (proof-bind ?x1543) (= $x884 $x1541)) $x1541)))
 (let ((@x481 (mp~ (mp @x1098 (quant-intro (proof-bind ?x289) (= $x1541 $x294)) $x294) (sk (~ $x294 $x469)) $x469)))
 (let ((@x619 (mp @x481 (rewrite (= $x469 $x609)) $x609)))
 (let ((@x622 (and-elim @x619 $x567)))
 (let ((@x1344 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x567) $x674)) @x622 $x674)))
 (let (($x590 (>= ?x561 0)))
 (let ((@x197 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x567) $x590)) @x622 $x590)))
 (let (($x594 (not (>= ?x608 0))))
 (let (($x676 (<= ?x608 0)))
 (let ((@x1352 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x612 (not $x676) $x594)) (and-elim @x619 $x306) (or (not $x676) $x594))))
 (let ((@x1083 (unit-resolution @x1352 (lemma ((_ th-lemma arith) (hypothesis (not $x676)) @x197 @x1344 false) $x676) $x594)))
 ((_ th-lemma arith) @x1083 @x197 @x1344 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             318
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 54
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.78
 :memory                    3.27
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1328697
 :num-checks                1
 :propagations              4
 :rlimit-count              5938
 :time                      0.01
 :total-time                0.02)
