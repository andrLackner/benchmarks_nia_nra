unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x42 ?x42 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x45 (* ?x43 y00 y00 y00)))
 (let ((?x46 (+ ?x44 ?x45)))
 (let ((?x47 (- ?x46 ?x45)))
 (let ((?x48 (- ?x47 ?x44)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x51))))))))))))) :qid k!29))
 ))
 (let (($x370 (= $x53 false)))
 (let (($x363 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x369 (elim-unused (= $x363 false))))
 (let (($x366 (= $x53 $x363)))
 (let ((?x435 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x42 ?x42 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x45 (* ?x43 y00 y00 y00)))
 (let ((?x46 (+ ?x44 ?x45)))
 (let ((?x47 (- ?x46 ?x45)))
 (let ((?x48 (- ?x47 ?x44)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x361 (= $x52 false)))
 (let (($x400 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x78 (= (+ (* (- 1) y00) y) 0)))
 (let (($x429 (and $x78 $x400 false)))
 (let (($x354 (= $x51 false)))
 (let ((@x353 (rewrite (= (or false) false))))
 (let (($x349 (or false)))
 (let (($x350 (= $x51 $x349)))
 (let (($x347 (= $x50 false)))
 (let ((@x346 (rewrite (= (not true) false))))
 (let (($x342 (not true)))
 (let (($x343 (= $x50 $x342)))
 (let (($x314 (= $x49 true)))
 (let ((@x313 (rewrite (= (= 0 0) true))))
 (let (($x320 (= 0 0)))
 (let (($x321 (= $x49 $x320)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x64 (+ r ?x58)))
 (let ((?x56 (+ 1 q)))
 (let ((?x373 (* y00 y00 y00 y00 ?x56 ?x56 ?x56 ?x64 ?x64)))
 (let ((?x415 (+ ?x373 (* (- 1) ?x373))))
 (let ((@x375 (rewrite (= (* ?x56 ?x56 ?x56 ?x64 ?x64 y00 y00 y00 y00) ?x373))))
 (let ((@x66 (rewrite (= ?x43 ?x64))))
 (let ((@x63 (rewrite (= ?x42 ?x56))))
 (let ((@x74 (monotonicity @x63 @x63 @x63 @x66 @x66 (= ?x44 (* ?x56 ?x56 ?x56 ?x64 ?x64 y00 y00 y00 y00)))))
 (let ((?x380 (* y00 y00 y00 ?x64)))
 (let ((?x388 (+ ?x373 ?x380)))
 (let ((?x399 (+ ?x388 (* (- 1) ?x380))))
 (let ((@x236 (monotonicity @x66 (= ?x45 (* ?x64 y00 y00 y00)))))
 (let ((@x387 (trans @x236 (rewrite (= (* ?x64 y00 y00 y00) ?x380)) (= ?x45 ?x380))))
 (let ((@x406 (trans (monotonicity (rewrite (= ?x46 ?x388)) @x387 (= ?x47 (- ?x388 ?x380))) (rewrite (= (- ?x388 ?x380) ?x399)) (= ?x47 ?x399))))
 (let ((@x413 (monotonicity (trans @x406 (rewrite (= ?x399 ?x373)) (= ?x47 ?x373)) (trans @x74 @x375 (= ?x44 ?x373)) (= ?x48 (- ?x373 ?x373)))))
 (let ((@x422 (trans (trans @x413 (rewrite (= (- ?x373 ?x373) ?x415)) (= ?x48 ?x415)) (rewrite (= ?x415 0)) $x49)))
 (let ((@x426 (trans (monotonicity (trans (monotonicity @x422 $x321) @x313 $x314) $x343) @x346 $x347)))
 (let ((@x431 (monotonicity (rewrite (= $x33 $x78)) (rewrite (= $x41 $x400)) (trans (monotonicity @x426 $x350) @x353 $x354) (= $x52 $x429))))
 (trans @x431 (rewrite (= $x429 false)) $x361))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (mp @x54 (trans (quant-intro (proof-bind ?x435) $x366) @x369 $x370) false))))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   917972
 :rlimit-count 303
 :time         0.01
 :total-time   0.01)
