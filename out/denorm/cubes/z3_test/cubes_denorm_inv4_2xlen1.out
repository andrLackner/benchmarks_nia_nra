unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x315 (* (- 1) k!2)))
 (let ((?x88 (* n!0 n!0)))
 (let ((?x309 (* 3 ?x88)))
 (let ((?x191 (+ ?x309 ?x315 (* 3 n!0))))
 (let (($x119 (<= ?x191 (- 1))))
 (let (($x366 (= ?x191 (- 1))))
 (let ((?x121 (+ k!2 c!3)))
 (let ((?x176 (+ k!2 m!1)))
 (let ((?x94 (+ 6 m!1)))
 (let ((?x93 (+ 1 n!0)))
 (let ((?x572 (* ?x93 ?x93 ?x93 ?x93 ?x93 ?x94 ?x94 ?x94 ?x94 ?x176 ?x176 ?x121 ?x121 ?x121 (+ 7 ?x309 ?x315 (* 9 n!0) (* (- 1) m!1)))))
 (let (($x569 (= ?x572 0)))
 (let (($x396 (not $x569)))
 (let (($x393 (= (+ k!2 (* (- 1) (* k!2 n!0)) (* (- 2) n!0) (* 3 c!3)) 1)))
 (let ((?x111 (* 18 c!3)))
 (let ((?x357 (* (- 9) n!0)))
 (let ((?x175 (* (- 1) (* k!2 k!2))))
 (let ((?x341 (* 5 k!2)))
 (let ((?x316 (* (- 1) m!1)))
 (let ((?x305 (+ (* 6 n!0) ?x316)))
 (let (($x285 (= ?x305 (- 6))))
 (let (($x571 (and $x285 (= (+ ?x341 ?x175 ?x357 ?x111 (* 9 (* n!0 c!3))) 4) $x393 $x366 $x396)))
 (let ((?x186 (+ c!3 k!2)))
 (let ((?x318 (* ?x93 ?x93 ?x93 ?x93 ?x93 ?x94 ?x94 ?x94 ?x94 ?x176 ?x176 ?x186 ?x186 ?x186 (+ 7 ?x315 ?x316 (* 9 n!0) ?x309))))
 (let (($x367 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x339 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x111 ?x341 ?x357 ?x175 (* 9 (* c!3 n!0))) 4) $x367 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x88)) 1) (not (= ?x318 0)))))
 (let (($x558 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x125 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x204 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x200 (= ?x204 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 $x200 $x252 $x290 (not (= ?x125 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x563 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 ?x359)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1)) (not (= ?x387 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x161 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x125 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x204 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x200 (= ?x204 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x113 (and $x116 $x200 $x252 $x290 (not (= ?x125 0)))))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 (+ 4 (* 3 (* ?x298 ?x298)) ?x230 ?x346 (* 3 n)))))
 (let ((?x49 (* k k)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x207 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) (= (+ ?x262 ?x230 (* 3 n)) (- 1)) (not (= ?x387 0)))))
 (rewrite (= $x207 $x113)))))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x75 ?x75 ?x75 ?x71 ?x76 ?x68 ?x68 (- 1) ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x78 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x560 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 ?x359)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x207 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1)) (not (= ?x387 0)))))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x75 ?x75 ?x75 ?x71 ?x76 ?x68 ?x68 (- 1) ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x78 0))))))
 (rewrite (= $x82 $x207)))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x284 (mp (mp @x84 (quant-intro (proof-bind ?x560) (= $x83 $x563)) $x563) (rewrite (= $x563 $x563)) $x563)))
 (let ((@x103 (mp~ (mp @x284 (quant-intro (proof-bind ?x161) (= $x563 $x558)) $x558) (sk (~ $x558 $x339)) $x339)))
 (let ((@x550 (mp @x103 (rewrite (= $x339 $x571)) $x571)))
 (let ((@x155 (and-elim @x550 $x366)))
 (let ((@x324 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x366) $x119)) @x155 $x119)))
 (let (($x337 (<= ?x305 (- 6))))
 (let ((@x551 (and-elim @x550 $x285)))
 (let ((@x320 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x285) $x337)) @x551 $x337)))
 (let (($x118 (>= ?x191 (- 1))))
 (let ((@x127 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x366) $x118)) @x155 $x118)))
 (let (($x336 (>= ?x305 (- 6))))
 (let ((@x182 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x285) $x336)) @x551 $x336)))
 (let (($x312 (not (<= ?x572 0))))
 (let (($x363 (>= ?x572 0)))
 (let ((@x353 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x363)) @x182 @x127 @x320 @x324 false) $x363)))
 (let ((@x348 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x569 $x312 (not $x363))) (and-elim @x550 $x396) (or $x312 (not $x363)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x348 @x353 $x312) @x182 @x127 @x320 @x324 false)))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                19.58
 :memory                    19.12
 :mk-bool-var               28
 :mk-clause                 24
 :num-allocs                484140
 :num-checks                1
 :propagations              12
 :rlimit-count              3245
 :time                      0.01
 :total-time                0.02)
