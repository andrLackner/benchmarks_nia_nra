unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x445 (* n!0 n!0)))
 (let ((?x224 (* 3 ?x445)))
 (let ((?x212 (* (- 1) k!2)))
 (let ((?x514 (+ (* 3 n!0) ?x212 ?x224)))
 (let (($x467 (<= ?x514 (- 1))))
 (let (($x478 (= ?x514 (- 1))))
 (let ((?x350 (+ k!2 c!3)))
 (let ((?x486 (+ k!2 m!1)))
 (let ((?x138 (+ 1 n!0)))
 (let ((?x297 (* (- 1) (* k!2 k!2 k!2 m!1 m!1))))
 (let ((?x268 (* (- 12) (* k!2 k!2 k!2 m!1))))
 (let ((?x418 (* (- 12) (* k!2 k!2 m!1 m!1))))
 (let ((?x130 (* (- 36) (* k!2 k!2 m!1))))
 (let ((?x290 (* (- 1) (* k!2 k!2 m!1 m!1 m!1))))
 (let ((?x277 (* (- 36) (* k!2 k!2 k!2))))
 (let ((?x526 (+ ?x277 ?x290 ?x130 ?x418 ?x268 (* (- 2) (* k!2 m!1 m!1 m!1 c!3)) ?x297 (* (- 24) (* k!2 k!2 m!1 c!3)) (* (- 12) (* m!1 m!1 c!3 c!3)) (* (- 24) (* k!2 m!1 m!1 c!3)) (* (- 12) (* k!2 m!1 c!3 c!3)) (* (- 72) (* k!2 m!1 c!3)) (* (- 1) (* k!2 m!1 m!1 c!3 c!3)) (* (- 36) (* k!2 c!3 c!3)) (* (- 72) (* k!2 k!2 c!3)) (* ?x138 ?x138 ?x486 ?x486 ?x350 ?x350 ?x350) (* (- 36) (* m!1 c!3 c!3)) (* (- 1) (* m!1 m!1 m!1 c!3 c!3)) (* (- 2) (* k!2 k!2 m!1 m!1 c!3)))))
 (let ((?x373 (* ?x526 (+ 7 (* 9 n!0) ?x212 ?x224 (* (- 1) m!1)))))
 (let (($x576 (= ?x373 0)))
 (let (($x402 (not $x576)))
 (let ((?x420 (* (- 1) (* k!2 k!2))))
 (let ((?x536 (* 18 c!3)))
 (let ((?x552 (* 5 k!2)))
 (let ((?x619 (* (- 9) n!0)))
 (let ((?x327 (* (- 1) m!1)))
 (let ((?x321 (+ (* 6 n!0) ?x327)))
 (let (($x250 (= ?x321 (- 6))))
 (let (($x582 (and $x250 (= (+ (* 9 (* n!0 c!3)) ?x619 ?x552 ?x536 ?x420) 4) (= (+ (* n!0 k!2) (* 2 n!0) ?x212 (* (- 3) c!3)) (- 1)) $x478 $x402)))
 (let ((?x109 (+ c!3 k!2)))
 (let ((?x419 (+ (* ?x138 ?x138 ?x486 ?x486 ?x109 ?x109 ?x109) (* (- 36) (* c!3 c!3 m!1)) ?x277 (* (- 72) (* c!3 k!2 k!2)) (* (- 36) (* c!3 c!3 k!2)) ?x290 (* (- 2) (* c!3 k!2 m!1 m!1 m!1)) (* (- 1) (* c!3 c!3 m!1 m!1 m!1)) ?x297 (* (- 2) (* c!3 k!2 k!2 m!1 m!1)) (* (- 1) (* c!3 c!3 k!2 m!1 m!1)) (* (- 72) (* c!3 k!2 m!1)) ?x130 (* (- 12) (* c!3 c!3 k!2 m!1)) (* (- 24) (* c!3 k!2 k!2 m!1)) ?x268 (* (- 12) (* c!3 c!3 m!1 m!1)) (* (- 24) (* c!3 k!2 m!1 m!1)) ?x418)))
 (let (($x446 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x511 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x536 ?x552 ?x619 ?x420 (* 9 (* c!3 n!0))) 4) $x446 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x445)) 1) (not (= (* ?x419 (+ 7 ?x212 ?x327 (* 9 n!0) ?x224)) 0)))))
 (let (($x544 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x263 (* n n)))
 (let ((?x264 (* 3 ?x263)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x574 (* (- 12) (* k k m m))))
 (let ((?x577 (* (- 24) (* c k m m))))
 (let ((?x580 (* (- 12) (* c c m m))))
 (let ((?x583 (* (- 12) (* k k k m))))
 (let ((?x586 (* (- 24) (* c k k m))))
 (let ((?x590 (* (- 12) (* c c k m))))
 (let ((?x594 (* (- 36) (* k k m))))
 (let ((?x597 (* (- 72) (* c k m))))
 (let ((?x629 (* (- 1) (* c c k m m))))
 (let ((?x600 (* (- 2) (* c k k m m))))
 (let ((?x631 (* (- 1) (* k k k m m))))
 (let ((?x632 (* (- 1) (* c c m m m))))
 (let ((?x603 (* (- 2) (* c k m m m))))
 (let ((?x634 (* (- 1) (* k k m m m))))
 (let ((?x606 (* (- 36) (* c c k))))
 (let ((?x609 (* (- 72) (* c k k))))
 (let ((?x613 (* (- 36) (* k k k))))
 (let ((?x616 (* (- 36) (* c c m))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x300 (+ 1 n)))
 (let ((?x306 (* ?x300 ?x300 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x262 (+ ?x306 ?x616 ?x613 ?x609 ?x606 ?x634 ?x603 ?x632 ?x631 ?x600 ?x629 ?x597 ?x594 ?x590 ?x586 ?x583 ?x580 ?x577 ?x574)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) ?x263)) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x202 (= (+ ?x40 ?x44 ?x204 ?x205 (* 9 (* c n))) 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 $x202 $x254 $x292 (not (= (* ?x262 (+ 7 ?x232 ?x348 ?x48 ?x264)) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x342 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x353 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x300 (+ 1 n)))
 (let ((?x306 (* ?x300 ?x300 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x553 (not (= (* (+ ?x306 (* (- 1) (* ?x311 ?x311 ?x71 ?x75 ?x75))) ?x353) 0))))
 (let (($x430 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let (($x550 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x550 $x430 $x553))))))))))))))))))) :qid k!34))
 ))
 (let ((?x405 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x263 (* n n)))
 (let ((?x264 (* 3 ?x263)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x574 (* (- 12) (* k k m m))))
 (let ((?x577 (* (- 24) (* c k m m))))
 (let ((?x580 (* (- 12) (* c c m m))))
 (let ((?x583 (* (- 12) (* k k k m))))
 (let ((?x586 (* (- 24) (* c k k m))))
 (let ((?x590 (* (- 12) (* c c k m))))
 (let ((?x594 (* (- 36) (* k k m))))
 (let ((?x597 (* (- 72) (* c k m))))
 (let ((?x629 (* (- 1) (* c c k m m))))
 (let ((?x600 (* (- 2) (* c k k m m))))
 (let ((?x631 (* (- 1) (* k k k m m))))
 (let ((?x632 (* (- 1) (* c c m m m))))
 (let ((?x603 (* (- 2) (* c k m m m))))
 (let ((?x634 (* (- 1) (* k k m m m))))
 (let ((?x606 (* (- 36) (* c c k))))
 (let ((?x609 (* (- 72) (* c k k))))
 (let ((?x613 (* (- 36) (* k k k))))
 (let ((?x616 (* (- 36) (* c c m))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x300 (+ 1 n)))
 (let ((?x306 (* ?x300 ?x300 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x262 (+ ?x306 ?x616 ?x613 ?x609 ?x606 ?x634 ?x603 ?x632 ?x631 ?x600 ?x629 ?x597 ?x594 ?x590 ?x586 ?x583 ?x580 ?x577 ?x574)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) ?x263)) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x202 (= (+ ?x40 ?x44 ?x204 ?x205 (* 9 (* c n))) 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x246 (and $x118 $x202 $x254 $x292 (not (= (* ?x262 (+ 7 ?x232 ?x348 ?x48 ?x264)) 0)))))
 (let ((?x141 (+ ?x306 (* (- 1) (* (+ 6 m) (+ 6 m) ?x71 ?x75 ?x75)))))
 (let ((?x266 (* ?x141 (+ 4 (* 3 (* ?x300 ?x300)) ?x232 ?x348 (* 3 n)))))
 (let (($x553 (not (= ?x266 0))))
 (let (($x430 (= (+ ?x264 ?x232 (* 3 n)) (- 1))))
 (let (($x550 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x462 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x550 $x430 $x553)))
 (rewrite (= $x462 $x246)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x555 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x353 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x300 (+ 1 n)))
 (let ((?x306 (* ?x300 ?x300 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x553 (not (= (* (+ ?x306 (* (- 1) (* ?x311 ?x311 ?x71 ?x75 ?x75))) ?x353) 0))))
 (let (($x430 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x334 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= ?x334 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) $x430 $x553)))))))))))))))) :qid k!34))
 ))
 (let ((?x349 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x353 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x300 (+ 1 n)))
 (let ((?x306 (* ?x300 ?x300 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x553 (not (= (* (+ ?x306 (* (- 1) (* ?x311 ?x311 ?x71 ?x75 ?x75))) ?x353) 0))))
 (let (($x430 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let (($x550 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x462 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x550 $x430 $x553)))
 (let ((?x48 (* 9 n)))
 (let ((?x334 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x556 (and $x118 (= ?x334 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) $x430 $x553)))
 (rewrite (= $x556 $x462)))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x79 (- (* ?x75 ?x75 ?x75 ?x71 ?x71 (+ n 1) (+ n 1)) (* ?x75 ?x75 ?x71 ?x77 ?x77))))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x74 ?x79) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x533 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x353 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x300 (+ 1 n)))
 (let ((?x306 (* ?x300 ?x300 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x553 (not (= (* (+ ?x306 (* (- 1) (* ?x311 ?x311 ?x71 ?x75 ?x75))) ?x353) 0))))
 (let (($x430 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x334 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x556 (and $x118 (= ?x334 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) $x430 $x553)))
 (let ((?x79 (- (* ?x75 ?x75 ?x75 ?x71 ?x71 (+ n 1) (+ n 1)) (* ?x75 ?x75 ?x71 (+ m 6) (+ m 6)))))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= (* ?x74 ?x79) 0))))))
 (rewrite (= $x84 $x556))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x158 (mp (mp @x86 (quant-intro (proof-bind ?x533) (= $x85 $x555)) $x555) (rewrite (= $x555 $x555)) $x555)))
 (let ((@x376 (mp (mp @x158 (quant-intro (proof-bind ?x349) (= $x555 $x342)) $x342) (quant-intro (proof-bind ?x405) (= $x342 $x544)) $x544)))
 (let ((@x476 (mp (mp~ @x376 (sk (~ $x544 $x511)) $x511) (rewrite (= $x511 $x582)) $x582)))
 (let ((@x457 (and-elim @x476 $x478)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x478) $x467)) @x457 $x467)))
 (let (($x491 (<= ?x321 (- 6))))
 (let ((@x635 (and-elim @x476 $x250)))
 (let ((@x438 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x491)) @x635 $x491)))
 (let (($x449 (>= ?x514 (- 1))))
 (let ((@x93 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x478) $x449)) @x457 $x449)))
 (let (($x512 (>= ?x321 (- 6))))
 (let ((@x111 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x512)) @x635 $x512)))
 (let (($x244 (not (<= ?x373 0))))
 (let (($x530 (>= ?x373 0)))
 (let ((@x251 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x530)) @x111 @x93 @x438 @x301 false) $x530)))
 (let ((@x172 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x576 $x244 (not $x530))) (and-elim @x476 $x402) (or $x244 (not $x530)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x172 @x251 $x244) @x111 @x93 @x438 @x301 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             192
 :arith-nonlinear-bounds    9
 :arith-num-rows            9
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      7
 :arith-tableau-max-columns 54
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.62
 :memory                    3.13
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1145312
 :num-checks                1
 :propagations              11
 :rlimit-count              3651
 :time                      0.01
 :total-time                0.01)
