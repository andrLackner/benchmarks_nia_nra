unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x135 (* (- 6) n!0)))
 (let ((?x134 (+ m!1 ?x135)))
 (let (($x260 (<= ?x134 6)))
 (let (($x287 (= ?x134 6)))
 (let ((?x350 (+ (- 6) m!1 ?x135)))
 (let ((?x163 (* k!2 k!2 k!2 k!2)))
 (let ((?x285 (+ k!2 c!3)))
 (let ((?x113 (+ m!1 k!2)))
 (let ((?x256 (+ 6 m!1)))
 (let ((?x258 (+ 1 n!0)))
 (let ((?x119 (+ (* 2 (* m!1 m!1 k!2 c!3)) (* 2 (* k!2 k!2 k!2 c!3)) (* (- 1) (* ?x258 ?x258 ?x256 ?x256 ?x113 ?x113 ?x285 ?x285)) (* m!1 m!1 k!2 k!2) ?x163 (* 4 (* m!1 k!2 k!2 c!3)) (* m!1 m!1 c!3 c!3) (* k!2 k!2 c!3 c!3) (* 2 (* m!1 k!2 k!2 k!2)) (* 2 (* m!1 k!2 c!3 c!3)))))
 (let ((?x219 (* ?x119 ?x350)))
 (let (($x169 (= ?x219 0)))
 (let (($x229 (not $x169)))
 (let (($x110 (= (+ k!2 (* (- 1) (* k!2 n!0)) (* (- 2) n!0) (* 3 c!3)) 1)))
 (let ((?x299 (* (- 1) (* k!2 k!2))))
 (let ((?x133 (* 18 c!3)))
 (let ((?x283 (* (- 9) n!0)))
 (let ((?x138 (* 5 k!2)))
 (let (($x89 (and $x287 (= (+ ?x138 (* 9 (* n!0 c!3)) ?x283 ?x133 ?x299) 4) $x110 (= (+ k!2 (* (- 3) (* n!0 n!0)) (* (- 3) n!0)) 1) $x229)))
 (let ((?x257 (+ c!3 k!2)))
 (let ((?x501 (+ k!2 m!1)))
 (let ((?x153 (+ (* (- 1) (* ?x258 ?x258 ?x256 ?x256 ?x501 ?x501 ?x257 ?x257)) (* c!3 c!3 k!2 k!2) (* 2 (* c!3 k!2 k!2 k!2)) (* 2 (* c!3 k!2 m!1 m!1)) (* k!2 k!2 m!1 m!1) (* c!3 c!3 m!1 m!1) (* 4 (* c!3 k!2 k!2 m!1)) (* 2 (* k!2 k!2 k!2 m!1)) (* 2 (* c!3 c!3 k!2 m!1)) ?x163)))
 (let (($x270 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x342 (and $x287 (= (+ ?x133 ?x138 ?x283 ?x299 (* 9 (* c!3 n!0))) 4) $x270 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x153 ?x350) 0)))))
 (let (($x543 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x548 (* k k k k)))
 (let ((?x514 (* 2 (* c c k m))))
 (let ((?x512 (* 2 (* k k k m))))
 (let ((?x511 (* 4 (* c k k m))))
 (let ((?x537 (* c c m m)))
 (let ((?x536 (* k k m m)))
 (let ((?x509 (* 2 (* c k m m))))
 (let ((?x513 (* 2 (* c k k k))))
 (let ((?x359 (* c c k k)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x319 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let (($x140 (= (* (+ ?x319 ?x359 ?x513 ?x509 ?x536 ?x537 ?x511 ?x512 ?x514 ?x548) ?x115) 0)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 $x210 $x262 $x300 (not $x140)))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x114 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x319 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let (($x158 (not (= (* (+ ?x319 (* ?x74 ?x74 ?x73 ?x73)) ?x115) 0))))
 (let (($x151 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x101 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x101 $x151 $x158))))))))))))))))) :qid k!34))
 ))
 (let ((?x523 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x548 (* k k k k)))
 (let ((?x514 (* 2 (* c c k m))))
 (let ((?x512 (* 2 (* k k k m))))
 (let ((?x511 (* 4 (* c k k m))))
 (let ((?x537 (* c c m m)))
 (let ((?x536 (* k k m m)))
 (let ((?x509 (* 2 (* c k m m))))
 (let ((?x513 (* 2 (* c k k k))))
 (let ((?x359 (* c c k k)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x319 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let (($x140 (= (* (+ ?x319 ?x359 ?x513 ?x509 ?x536 ?x537 ?x511 ?x512 ?x514 ?x548) ?x115) 0)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x139 (and $x126 $x210 $x262 $x300 (not $x140))))
 (let (($x158 (not (= (* (+ ?x319 (* ?x74 ?x74 ?x73 ?x73)) ?x115) 0))))
 (let (($x151 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x101 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x100 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x101 $x151 $x158)))
 (rewrite (= $x100 $x139))))))))))))))))))))))))))))))))))
 ))
 (let (($x159 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x319 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let (($x158 (not (= (* (+ ?x319 (* ?x74 ?x74 ?x73 ?x73)) ?x115) 0))))
 (let (($x151 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x238 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x147 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 (= ?x147 (- 4)) $x238 $x151 $x158))))))))))))))) :qid k!34))
 ))
 (let ((?x532 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x319 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let (($x158 (not (= (* (+ ?x319 (* ?x74 ?x74 ?x73 ?x73)) ?x115) 0))))
 (let (($x151 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x101 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x100 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x101 $x151 $x158)))
 (let (($x238 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x147 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x182 (and $x126 (= ?x147 (- 4)) $x238 $x151 $x158)))
 (rewrite (= $x182 $x100))))))))))))))))))))))))
 ))
 (let (($x84 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x78 (+ (* (- 1) ?x73 ?x73 ?x74 ?x74 ?x75 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74))))
 (let (($x80 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x78) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x80)))))))))))))))) :qid k!34))
 ))
 (let ((?x161 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x319 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let (($x158 (not (= (* (+ ?x319 (* ?x74 ?x74 ?x73 ?x73)) ?x115) 0))))
 (let (($x151 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x238 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x147 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x182 (and $x126 (= ?x147 (- 4)) $x238 $x151 $x158)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x78 (+ (* (- 1) ?x73 ?x73 ?x74 ?x74 ?x75 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74))))
 (let (($x80 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x78) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x83 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x80)))))
 (rewrite (= $x83 $x182))))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x98 (mp (mp @x85 (quant-intro (proof-bind ?x161) (= $x84 $x159)) $x159) (rewrite (= $x159 $x159)) $x159)))
 (let ((@x525 (mp (mp @x98 (quant-intro (proof-bind ?x532) (= $x159 $x114)) $x114) (quant-intro (proof-bind ?x523) (= $x114 $x543)) $x543)))
 (let ((@x221 (mp (mp~ @x525 (sk (~ $x543 $x342)) $x342) (rewrite (= $x342 $x89)) $x89)))
 (let ((@x330 (and-elim @x221 $x287)))
 (let ((@x349 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x287) $x260)) @x330 $x260)))
 (let (($x351 (>= ?x134 6)))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x287) $x351)) @x330 $x351)))
 (let (($x188 (not (<= ?x219 0))))
 (let (($x186 (>= ?x219 0)))
 (let ((@x544 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x169 $x188 (not $x186))) (and-elim @x221 $x229) (or $x188 (not $x186)))))
 (let ((@x522 (unit-resolution @x544 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x186)) @x177 @x349 false) $x186) $x188)))
 ((_ th-lemma arith farkas 1 1 1) @x522 @x177 @x349 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        26
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             144
 :arith-nonlinear-bounds    18
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      7
 :arith-tableau-max-columns 41
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.59
 :memory                    3.10
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1117868
 :num-checks                1
 :propagations              11
 :rlimit-count              2605
 :time                      0.01
 :total-time                0.01)
