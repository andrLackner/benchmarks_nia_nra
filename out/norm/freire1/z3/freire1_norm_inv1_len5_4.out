unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x475 (* (- 1) r!1)))
 (let ((?x259 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x809 (* (- 1) ?x36)))
 (let ((?x792 (* (- 2) x00)))
 (let ((?x512 (+ r00 ?x792 ?x809 ?x259 ?x475 (* 2 x!0))))
 (let (($x609 (<= ?x512 0)))
 (let (($x465 (= ?x512 0)))
 (let ((?x341 (+ 1 r!1)))
 (let ((?x556 (* ?x341 ?x341 ?x341 ?x341 ?x341 (+ ?x475 x!0))))
 (let ((?x432 (+ (* 3 (* r00 r!1 r!1)) (* 18 (* r!1 r!1 x!0)) (* 8 (* r!1 x!0)) (* 5 (* r!1 r!1 r!1 r!1 x!0)) (* (- 12) (* r!1 r!1 r!1)) (* (- 2) (* x!0 x!0)) (* r00 r!1 r!1 r!1 r!1) (* 3 (* r00 r!1 r!1 r!1)) (* r00 r!1) (* 16 (* r!1 r!1 r!1 x!0)) (* (- 6) ?x259) ?x475 (* (- 10) (* r!1 r!1 r!1 r!1)) (* (- 3) (* r!1 r!1 r!1 r!1 r!1)) (* (- 6) (* r!1 x!0 x!0)) (* (- 6) (* r!1 r!1 x!0 x!0)) (* (- 2) (* r!1 r!1 r!1 x!0 x!0)) (* (- 1) (* r00 r!1 r!1 r!1 x!0)) (* 6 (* x00 r!1 r!1 x!0)) (* (- 1) (* r00 r00 r!1)) (* (- 1) (* r00 r00 r!1 r!1 r!1 r!1)) (* 3 (* r00 r00 r!1 x!0)) (* 2 (* x00 x!0)) (* (- 3) (* r00 r00 r!1 r!1)) (* (- 3) (* r00 r00 r!1 r!1 r!1)) (* r00 r00 x!0) (* 3 (* r00 r00 r!1 r!1 x!0)) (* r00 r00 r!1 r!1 r!1 x!0) (* 6 (* x00 r!1 x!0)) (* (- 1) ?x556) (* (- 3) (* r00 r!1 r!1 x!0)) (* (- 3) (* r00 r!1 x!0)) (* (- 1) (* r00 x!0)) x!0 (* (- 6) (* x00 r!1 r!1)) (* (- 6) (* x00 r!1 r!1 r!1)) (* (- 2) (* x00 r!1 r!1 r!1 r!1)) (* (- 2) (* x00 r!1)) (* 2 (* x00 r!1 r!1 r!1 x!0)))))
 (let (($x436 (= ?x432 0)))
 (let (($x893 (not $x436)))
 (let (($x520 (and $x465 $x893)))
 (let ((?x499 (+ r!1 (* (- 1) x!0) (* 6 ?x259) (* (- 8) (* r!1 x!0)) (* (- 18) (* r!1 r!1 x!0)) (* (- 16) (* r!1 r!1 r!1 x!0)) (* (- 5) (* r!1 r!1 r!1 r!1 x!0)) (* 12 (* r!1 r!1 r!1)) (* 10 (* r!1 r!1 r!1 r!1)) (* 3 (* r!1 r!1 r!1 r!1 r!1)) (* 2 (* x!0 x!0)) (* 6 (* r!1 x!0 x!0)) (* 6 (* r!1 r!1 x!0 x!0)) (* 2 (* r!1 r!1 r!1 x!0 x!0)) (* r!1 r00 r00) (* 3 (* r!1 r!1 r00 r00)) (* 3 (* r!1 r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* (- 3) (* r!1 x!0 r00 r00)) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* (- 1) (* r!1 r!1 r!1 x!0 r00 r00)) (* (- 2) (* x!0 x00)) (* (- 6) (* r!1 x!0 x00)) (* (- 6) (* r!1 r!1 x!0 x00)) (* (- 2) (* r!1 r!1 r!1 x!0 x00)) (* 2 (* r!1 x00)) (* 6 (* r!1 r!1 x00)) (* 6 (* r!1 r!1 r!1 x00)) (* 2 (* r!1 r!1 r!1 r!1 x00)) ?x556 (* (- 1) (* r!1 r00)) (* (- 3) (* r!1 r!1 r00)) (* (- 3) (* r!1 r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r00)) (* x!0 r00) (* 3 (* r!1 x!0 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* r!1 r!1 r!1 x!0 r00))))
 (let ((?x35 (* 2 x00)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x497 (and (= (+ r!1 (* (- 2) x!0) ?x125 (* (- 1) ?x259) ?x35 ?x36) 0) (not (= ?x499 0)))))
 (let (($x1020 (exists ((r Int) (x Int) )(! (let ((?x865 (* r r r x r00)))
 (let ((?x874 (* 3 (* r r x r00))))
 (let ((?x873 (* 3 (* r x r00))))
 (let ((?x839 (* x r00)))
 (let ((?x837 (* (- 1) (* r r r r r00))))
 (let ((?x872 (* (- 3) (* r r r r00))))
 (let ((?x871 (* (- 3) (* r r r00))))
 (let ((?x791 (* (- 1) (* r r00))))
 (let ((?x133 (+ 1 r)))
 (let ((?x757 (* ?x133 ?x133 ?x133 ?x133 ?x133 (+ (* (- 1) r) x))))
 (let ((?x710 (* 2 (* r r r r x00))))
 (let ((?x737 (* 6 (* r r r x00))))
 (let ((?x736 (* 6 (* r r x00))))
 (let ((?x690 (* 2 (* r x00))))
 (let ((?x730 (* (- 2) (* r r r x x00))))
 (let ((?x739 (* (- 6) (* r r x x00))))
 (let ((?x738 (* (- 6) (* r x x00))))
 (let ((?x713 (* (- 2) (* x x00))))
 (let ((?x598 (* (- 1) (* r r r x r00 r00))))
 (let ((?x615 (* (- 3) (* r r x r00 r00))))
 (let ((?x612 (* (- 3) (* r x r00 r00))))
 (let ((?x595 (* (- 1) (* x r00 r00))))
 (let ((?x532 (* r r r r r00 r00)))
 (let ((?x607 (* 3 (* r r r r00 r00))))
 (let ((?x604 (* 3 (* r r r00 r00))))
 (let ((?x486 (* r r00 r00)))
 (let ((?x423 (* 2 (* r r r x x))))
 (let ((?x409 (* 2 (* x x))))
 (let ((?x304 (* (- 1) x)))
 (let ((?x1013 (+ r ?x304 (* 6 (* r r)) (* (- 8) (* r x)) (* (- 18) (* r r x)) (* (- 16) (* r r r x)) (* (- 5) (* r r r r x)) (* 12 (* r r r)) (* 10 (* r r r r)) (* 3 (* r r r r r)) ?x409 (* 6 (* r x x)) (* 6 (* r r x x)) ?x423 ?x486 ?x604 ?x607 ?x532 ?x595 ?x612 ?x615 ?x598 ?x713 ?x738 ?x739 ?x730 ?x690 ?x736 ?x737 ?x710 ?x757 ?x791 ?x871 ?x872 ?x837 ?x839 ?x873 ?x874 ?x865)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (and $x128 (not (= ?x1013 0)))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x803 (exists ((r Int) (x Int) )(! (let ((?x75 (* (- 1) r)))
 (let ((?x805 (+ x ?x75)))
 (let ((?x133 (+ 1 r)))
 (let ((?x714 (* r00 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x118 (* r00 r00 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x833 (* ?x133 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x796 (+ ?x833 (* (- 2) (* ?x133 ?x133 ?x133 ?x805 ?x805)) ?x118 (* 2 (* x00 ?x133 ?x133 ?x133 ?x805)) (* (- 1) (* ?x133 ?x133 ?x133 ?x133 ?x133 ?x805)) (* (- 1) ?x714))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) (not (= ?x796 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x1022 (lambda ((r Int) (x Int) )(let ((?x865 (* r r r x r00)))
 (let ((?x874 (* 3 (* r r x r00))))
 (let ((?x873 (* 3 (* r x r00))))
 (let ((?x839 (* x r00)))
 (let ((?x837 (* (- 1) (* r r r r r00))))
 (let ((?x872 (* (- 3) (* r r r r00))))
 (let ((?x871 (* (- 3) (* r r r00))))
 (let ((?x791 (* (- 1) (* r r00))))
 (let ((?x133 (+ 1 r)))
 (let ((?x757 (* ?x133 ?x133 ?x133 ?x133 ?x133 (+ (* (- 1) r) x))))
 (let ((?x710 (* 2 (* r r r r x00))))
 (let ((?x737 (* 6 (* r r r x00))))
 (let ((?x736 (* 6 (* r r x00))))
 (let ((?x690 (* 2 (* r x00))))
 (let ((?x730 (* (- 2) (* r r r x x00))))
 (let ((?x739 (* (- 6) (* r r x x00))))
 (let ((?x738 (* (- 6) (* r x x00))))
 (let ((?x713 (* (- 2) (* x x00))))
 (let ((?x598 (* (- 1) (* r r r x r00 r00))))
 (let ((?x615 (* (- 3) (* r r x r00 r00))))
 (let ((?x612 (* (- 3) (* r x r00 r00))))
 (let ((?x595 (* (- 1) (* x r00 r00))))
 (let ((?x532 (* r r r r r00 r00)))
 (let ((?x607 (* 3 (* r r r r00 r00))))
 (let ((?x604 (* 3 (* r r r00 r00))))
 (let ((?x486 (* r r00 r00)))
 (let ((?x423 (* 2 (* r r r x x))))
 (let ((?x409 (* 2 (* x x))))
 (let ((?x304 (* (- 1) x)))
 (let ((?x1013 (+ r ?x304 (* 6 (* r r)) (* (- 8) (* r x)) (* (- 18) (* r r x)) (* (- 16) (* r r r x)) (* (- 5) (* r r r r x)) (* 12 (* r r r)) (* 10 (* r r r r)) (* 3 (* r r r r r)) ?x409 (* 6 (* r x x)) (* 6 (* r r x x)) ?x423 ?x486 ?x604 ?x607 ?x532 ?x595 ?x612 ?x615 ?x598 ?x713 ?x738 ?x739 ?x730 ?x690 ?x736 ?x737 ?x710 ?x757 ?x791 ?x871 ?x872 ?x837 ?x839 ?x873 ?x874 ?x865)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (let (($x184 (and $x128 (not (= ?x1013 0)))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x805 (+ x ?x75)))
 (let ((?x118 (* r00 r00 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x833 (* ?x133 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x796 (+ ?x833 (* (- 2) (* ?x133 ?x133 ?x133 ?x805 ?x805)) ?x118 (* 2 (* x00 ?x133 ?x133 ?x133 ?x805)) (* (- 1) (* ?x133 ?x133 ?x133 ?x133 ?x133 ?x805)) (* (- 1) (* r00 ?x133 ?x133 ?x133 ?x805)))))
 (let (($x797 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) (not (= ?x796 0)))))
 (rewrite (= $x797 $x184)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x772 (exists ((r Int) (x Int) )(! (let ((?x75 (* (- 1) r)))
 (let ((?x805 (+ x ?x75)))
 (let ((?x133 (+ 1 r)))
 (let ((?x714 (* r00 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x705 (* ?x133 ?x133 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x741 (+ (* (- 1) (* ?x133 ?x133 ?x133 ?x133 ?x805)) (* 2 (* ?x133 ?x133 ?x133 ?x805 ?x805)) (* (- 1) (* r00 r00 ?x133 ?x133 ?x133 ?x805)) (* (- 2) (* x00 ?x133 ?x133 ?x133 ?x805)) ?x705 ?x714)))
 (let ((?x36 (* r00 r00)))
 (let ((?x809 (* (- 1) ?x36)))
 (let ((?x792 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x75 r00 ?x30 ?x32 ?x792 ?x809) 0) (not (= ?x741 0)))))))))))))) :qid k!26))
 ))
 (let ((?x846 (lambda ((r Int) (x Int) )(let ((?x75 (* (- 1) r)))
 (let ((?x805 (+ x ?x75)))
 (let ((?x133 (+ 1 r)))
 (let ((?x714 (* r00 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x118 (* r00 r00 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x833 (* ?x133 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x796 (+ ?x833 (* (- 2) (* ?x133 ?x133 ?x133 ?x805 ?x805)) ?x118 (* 2 (* x00 ?x133 ?x133 ?x133 ?x805)) (* (- 1) (* ?x133 ?x133 ?x133 ?x133 ?x133 ?x805)) (* (- 1) ?x714))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x797 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) (not (= ?x796 0)))))
 (let ((?x705 (* ?x133 ?x133 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x741 (+ (* (- 1) ?x833) (* 2 (* ?x133 ?x133 ?x133 ?x805 ?x805)) (* (- 1) ?x118) (* (- 2) (* x00 ?x133 ?x133 ?x133 ?x805)) ?x705 ?x714)))
 (let (($x820 (= (+ ?x75 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x808 (and $x820 (not (= ?x741 0)))))
 (rewrite (= $x808 $x797)))))))))))))))))))))
 ))
 (let (($x70 (exists ((r Int) (x Int) )(! (let ((?x43 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x46 (+ (* 0 ?x41 ?x41 r00) (* 0 ?x41 r00 ?x43) (* 0 ?x41 ?x41 ?x41 ?x43))))
 (let ((?x56 (+ (- ?x46 (* ?x41 ?x41 ?x41 ?x41 ?x43)) (* 0 ?x41 ?x41 ?x41) (* 0 ?x41 ?x41 ?x43) (* 0 ?x41 ?x41 ?x41 ?x41) (* 2 ?x41 ?x41 ?x41 ?x43 ?x43) (* 0 ?x41 ?x43 x00) (* 0 ?x41 r00 r00 ?x43) (* 0 ?x41 ?x43 ?x43))))
 (let ((?x60 (- (- ?x56 (* ?x41 ?x41 ?x41 r00 r00 ?x43)) (* 2 ?x41 ?x41 ?x41 ?x43 x00))))
 (let ((?x65 (+ ?x60 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x43) (* ?x41 ?x41 ?x41 r00 ?x43) (* 0 ?x41 ?x41 x00) (* 0 ?x41 ?x41 r00 r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x65 0))))))))))))) :qid k!26))
 ))
 (let ((?x765 (lambda ((r Int) (x Int) )(let ((?x75 (* (- 1) r)))
 (let ((?x805 (+ x ?x75)))
 (let ((?x133 (+ 1 r)))
 (let ((?x714 (* r00 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x705 (* ?x133 ?x133 ?x133 ?x133 ?x133 ?x805)))
 (let ((?x741 (+ (* (- 1) (* ?x133 ?x133 ?x133 ?x133 ?x805)) (* 2 (* ?x133 ?x133 ?x133 ?x805 ?x805)) (* (- 1) (* r00 r00 ?x133 ?x133 ?x133 ?x805)) (* (- 2) (* x00 ?x133 ?x133 ?x133 ?x805)) ?x705 ?x714)))
 (let ((?x36 (* r00 r00)))
 (let ((?x809 (* (- 1) ?x36)))
 (let ((?x792 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x808 (and (= (+ ?x75 r00 ?x30 ?x32 ?x792 ?x809) 0) (not (= ?x741 0)))))
 (let ((?x43 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x46 (+ (* 0 ?x41 ?x41 r00) (* 0 ?x41 r00 ?x43) (* 0 ?x41 ?x41 ?x41 ?x43))))
 (let ((?x56 (+ (- ?x46 (* ?x41 ?x41 ?x41 ?x41 ?x43)) (* 0 ?x41 ?x41 ?x41) (* 0 ?x41 ?x41 ?x43) (* 0 ?x41 ?x41 ?x41 ?x41) (* 2 ?x41 ?x41 ?x41 ?x43 ?x43) (* 0 ?x41 ?x43 x00) (* 0 ?x41 r00 r00 ?x43) (* 0 ?x41 ?x43 ?x43))))
 (let ((?x60 (- (- ?x56 (* ?x41 ?x41 ?x41 r00 r00 ?x43)) (* 2 ?x41 ?x41 ?x41 ?x43 x00))))
 (let ((?x65 (+ ?x60 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x43) (* ?x41 ?x41 ?x41 r00 ?x43) (* 0 ?x41 ?x41 x00) (* 0 ?x41 ?x41 r00 r00))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x69 (and (= ?x38 0) (or (not (= ?x65 0))))))
 (rewrite (= $x69 $x808)))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x858 (mp (mp @x71 (quant-intro (proof-bind ?x765) (= $x70 $x772)) $x772) (rewrite (= $x772 $x772)) $x772)))
 (let ((@x857 (mp (mp @x858 (quant-intro (proof-bind ?x846) (= $x772 $x803)) $x803) (quant-intro (proof-bind ?x1022) (= $x803 $x1020)) $x1020)))
 (let ((@x895 (mp (mp~ @x857 (sk (~ $x1020 $x497)) $x497) (rewrite (= $x497 $x520)) $x520)))
 (let ((@x154 (and-elim @x895 $x465)))
 (let ((@x531 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x465) $x609)) @x154 $x609)))
 (let (($x606 (>= ?x512 0)))
 (let ((@x585 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x465) $x606)) @x154 $x606)))
 (let (($x753 (not (>= ?x432 0))))
 (let (($x175 (<= ?x432 0)))
 (let ((@x749 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x436 (not $x175) $x753)) (and-elim @x895 $x893) (or (not $x175) $x753))))
 (let ((@x748 (unit-resolution @x749 (lemma ((_ th-lemma arith) (hypothesis (not $x175)) @x585 @x531 false) $x175) $x753)))
 ((_ th-lemma arith) @x748 @x585 @x531 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             338
 :arith-nonlinear-bounds    14
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 61
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.63
 :memory                    3.15
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1306419
 :num-checks                1
 :propagations              4
 :rlimit-count              7113
 :time                      0.01
 :total-time                0.02)
