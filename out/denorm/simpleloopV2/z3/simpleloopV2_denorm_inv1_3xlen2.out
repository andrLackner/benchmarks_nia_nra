unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x526 (* (- 1) y!0)))
 (let ((?x427 (+ y00 x00 ?x526 (* (- 1) x!1))))
 (let (($x497 (>= ?x427 0)))
 (let (($x507 (= ?x427 0)))
 (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x395 (+ ?x72 ?x79 y!0 x!1)))
 (let ((?x496 (* (- 1) (* y!0 y!0 x!1 x!1))))
 (let ((?x547 (* (- 1) (* y!0 y!0))))
 (let ((?x399 (* 2 x!1)))
 (let ((?x282 (* x!1 x!1)))
 (let ((?x544 (* (- 1) ?x282)))
 (let ((?x135 (* y!0 x!1)))
 (let ((?x593 (* 4 ?x135)))
 (let ((?x402 (+ ?x593 (* (- 2) (* y!0 x!1 x!1)) ?x526 ?x544 ?x399 ?x547 (* 2 (* y!0 y!0 x!1)) ?x496)))
 (let ((?x539 (* x!1 x!1 x!1)))
 (let ((?x269 (* 3 x!1)))
 (let ((?x411 (* (- 3) ?x282)))
 (let ((?x286 (* (- 2) y!0)))
 (let ((?x263 (* y!0 x!1 x!1 x!1)))
 (let ((?x264 (* 3 ?x135)))
 (let ((?x355 (+ (- 2) ?x264 (* (- 3) (* y!0 x!1 x!1)) ?x263 ?x286 ?x411 ?x269 ?x539)))
 (let ((?x473 (* (+ (- 2) ?x135 ?x526 ?x544 ?x269) ?x355 ?x402 ?x395)))
 (let (($x566 (= ?x473 0)))
 (let (($x227 (not $x566)))
 (let ((?x419 (* (- 2) x!1)))
 (let ((?x423 (* 3 y!0)))
 (let ((?x114 (+ (- 2) ?x593 (* 2 (* y!0 x!1 x!1)) ?x423 ?x544 ?x419 ?x547 (* (- 2) (* y!0 y!0 x!1)) ?x496)))
 (let ((?x415 (* (- 1) ?x539)))
 (let ((?x275 (* (- 3) x!1)))
 (let ((?x116 (* (+ (- 2) ?x135 y!0 ?x544 ?x275) (+ ?x264 (* 3 (* y!0 x!1 x!1)) ?x263 ?x411 ?x275 ?x415) ?x114 ?x395)))
 (let (($x494 (= ?x116 0)))
 (let (($x581 (or (not $x494) $x227)))
 (let (($x594 (and $x507 $x581)))
 (let ((?x394 (+ x!1 y!0 ?x72 ?x79)))
 (let ((?x528 (* (- 1) (* x!1 x!1 y!0 y!0))))
 (let ((?x542 (* x!1 y!0)))
 (let ((?x360 (* 4 ?x542)))
 (let ((?x273 (+ ?x399 ?x526 ?x360 ?x544 ?x547 (* 2 (* x!1 y!0 y!0)) ?x528 (* (- 2) (* x!1 x!1 y!0)))))
 (let ((?x159 (* x!1 x!1 x!1 y!0)))
 (let ((?x347 (* 3 ?x542)))
 (let ((?x315 (+ (- 2) ?x269 ?x286 ?x347 ?x411 (* (- 3) (* x!1 x!1 y!0)) ?x159 ?x539)))
 (let ((?x359 (+ (- 2) ?x419 ?x423 ?x360 ?x544 ?x547 (* (- 2) (* x!1 y!0 y!0)) ?x528 (* 2 (* x!1 x!1 y!0)))))
 (let ((?x509 (* (+ (- 2) ?x275 y!0 ?x542 ?x544) (+ ?x275 ?x347 ?x411 (* 3 (* x!1 x!1 y!0)) ?x159 ?x415) ?x359 ?x394)))
 (let (($x375 (or (not (= ?x509 0)) (not (= (* (+ (- 2) ?x269 ?x526 ?x542 ?x544) ?x315 ?x273 ?x394) 0)))))
 (let (($x373 (and (= ?x394 0) $x375)))
 (let (($x279 (exists ((x Int) (y Int) )(! (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x93 (+ x y ?x72 ?x79)))
 (let ((?x302 (* (- 1) (* x x y y))))
 (let ((?x237 (* (- 1) (* y y))))
 (let ((?x157 (* x x)))
 (let ((?x189 (* (- 1) ?x157)))
 (let ((?x140 (* x y)))
 (let ((?x331 (* 4 ?x140)))
 (let ((?x139 (* (- 1) y)))
 (let ((?x194 (* 2 x)))
 (let ((?x342 (+ ?x194 ?x139 ?x331 ?x189 ?x237 (* 2 (* x y y)) ?x302 (* (- 2) (* x x y)))))
 (let ((?x404 (* x x x)))
 (let ((?x388 (* x x x y)))
 (let ((?x259 (* x x y)))
 (let ((?x422 (* (- 3) ?x259)))
 (let ((?x603 (* (- 3) ?x157)))
 (let ((?x604 (* 3 ?x140)))
 (let ((?x309 (* (- 2) y)))
 (let ((?x204 (* 3 x)))
 (let ((?x205 (+ (- 2) ?x204 ?x139 ?x140 ?x189)))
 (let (($x292 (= (* ?x205 (+ (- 2) ?x204 ?x309 ?x604 ?x603 ?x422 ?x388 ?x404) ?x342 ?x93) 0)))
 (let ((?x534 (+ (- 2) (* (- 2) x) (* 3 y) ?x331 ?x189 ?x237 (* (- 2) (* x y y)) ?x302 (* 2 ?x259))))
 (let ((?x591 (* (- 1) ?x404)))
 (let ((?x605 (* 3 ?x259)))
 (let ((?x463 (* (- 3) x)))
 (let ((?x616 (+ ?x463 ?x604 ?x603 ?x605 ?x388 ?x591)))
 (let ((?x462 (+ (- 2) ?x463 y ?x140 ?x189)))
 (let (($x98 (= ?x93 0)))
 (and $x98 (or (not (= (* ?x462 ?x616 ?x534 ?x93) 0)) (not $x292)))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x196 (exists ((x Int) (y Int) )(! (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x93 (+ x y ?x72 ?x79)))
 (let ((?x302 (* (- 1) (* x x y y))))
 (let ((?x237 (* (- 1) (* y y))))
 (let ((?x157 (* x x)))
 (let ((?x189 (* (- 1) ?x157)))
 (let ((?x140 (* x y)))
 (let ((?x331 (* 4 ?x140)))
 (let ((?x534 (+ (- 2) (* (- 2) x) (* 3 y) ?x331 ?x189 ?x237 (* (- 2) (* x y y)) ?x302 (* 2 (* x x y)))))
 (let ((?x404 (* x x x)))
 (let ((?x591 (* (- 1) ?x404)))
 (let ((?x388 (* x x x y)))
 (let ((?x377 (* (- 1) (* x x 1))))
 (let ((?x259 (* x x y)))
 (let ((?x605 (* 3 ?x259)))
 (let ((?x604 (* 3 ?x140)))
 (let ((?x488 (+ (* (- 1) x) ?x604 ?x189 ?x605 (* (- 1) (* x 1)) (* (- 1) (* x 1 x)) ?x377 ?x388 ?x591 (* (- 1) (* x 1 1)))))
 (let ((?x463 (* (- 3) x)))
 (let ((?x462 (+ (- 2) ?x463 y ?x140 ?x189)))
 (let ((?x139 (* (- 1) y)))
 (let ((?x194 (* 2 x)))
 (let ((?x342 (+ ?x194 ?x139 ?x331 ?x189 ?x237 (* 2 (* x y y)) ?x302 (* (- 2) ?x259))))
 (let ((?x422 (* (- 3) ?x259)))
 (let ((?x309 (* (- 2) y)))
 (let ((?x433 (+ (- 2) ?x194 ?x309 (* 2 ?x140) (* (- 2) ?x157) ?x422 (* (- 1) (* x (- 1) 1)) ?x377 (* (- 1) (* x (- 1) y)) ?x388 ?x404)))
 (let ((?x204 (* 3 x)))
 (let ((?x205 (+ (- 2) ?x204 ?x139 ?x140 ?x189)))
 (let (($x505 (or (not (= (* ?x205 ?x433 ?x342 ?x93) 0)) (not (= (* ?x462 ?x488 ?x534 ?x93) 0)))))
 (let (($x98 (= ?x93 0)))
 (and $x98 $x505))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x316 (lambda ((x Int) (y Int) )(let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x93 (+ x y ?x72 ?x79)))
 (let ((?x302 (* (- 1) (* x x y y))))
 (let ((?x237 (* (- 1) (* y y))))
 (let ((?x157 (* x x)))
 (let ((?x189 (* (- 1) ?x157)))
 (let ((?x140 (* x y)))
 (let ((?x331 (* 4 ?x140)))
 (let ((?x139 (* (- 1) y)))
 (let ((?x194 (* 2 x)))
 (let ((?x342 (+ ?x194 ?x139 ?x331 ?x189 ?x237 (* 2 (* x y y)) ?x302 (* (- 2) (* x x y)))))
 (let ((?x404 (* x x x)))
 (let ((?x388 (* x x x y)))
 (let ((?x259 (* x x y)))
 (let ((?x422 (* (- 3) ?x259)))
 (let ((?x603 (* (- 3) ?x157)))
 (let ((?x604 (* 3 ?x140)))
 (let ((?x309 (* (- 2) y)))
 (let ((?x204 (* 3 x)))
 (let ((?x205 (+ (- 2) ?x204 ?x139 ?x140 ?x189)))
 (let (($x292 (= (* ?x205 (+ (- 2) ?x204 ?x309 ?x604 ?x603 ?x422 ?x388 ?x404) ?x342 ?x93) 0)))
 (let ((?x534 (+ (- 2) (* (- 2) x) (* 3 y) ?x331 ?x189 ?x237 (* (- 2) (* x y y)) ?x302 (* 2 ?x259))))
 (let ((?x591 (* (- 1) ?x404)))
 (let ((?x605 (* 3 ?x259)))
 (let ((?x463 (* (- 3) x)))
 (let ((?x616 (+ ?x463 ?x604 ?x603 ?x605 ?x388 ?x591)))
 (let ((?x462 (+ (- 2) ?x463 y ?x140 ?x189)))
 (let (($x98 (= ?x93 0)))
 (let (($x267 (and $x98 (or (not (= (* ?x462 ?x616 ?x534 ?x93) 0)) (not $x292)))))
 (let ((?x377 (* (- 1) (* x x 1))))
 (let ((?x488 (+ (* (- 1) x) ?x604 ?x189 ?x605 (* (- 1) (* x 1)) (* (- 1) (* x 1 x)) ?x377 ?x388 ?x591 (* (- 1) (* x 1 1)))))
 (let ((?x433 (+ (- 2) ?x194 ?x309 (* 2 ?x140) (* (- 2) ?x157) ?x422 (* (- 1) (* x (- 1) 1)) ?x377 (* (- 1) (* x (- 1) y)) ?x388 ?x404)))
 (let (($x505 (or (not (= (* ?x205 ?x433 ?x342 ?x93) 0)) (not (= (* ?x462 ?x488 ?x534 ?x93) 0)))))
 (let (($x514 (and $x98 $x505)))
 (rewrite (= $x514 $x267))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((x Int) (y Int) )(! (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x460 (+ x ?x72 ?x79 y)))
 (let ((?x381 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x139 (* (- 1) y)))
 (let ((?x543 (+ 1 ?x139 (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x396 (+ (* (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ 1 x) (+ 1 x))))))
 (let ((?x257 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x367 (+ (- 1) ?x139 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x250 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x155 (or (not (= (* ?x250 ?x367 (+ 1 y ?x257) ?x460) 0)) (not (= (* ?x396 ?x543 (+ (- 1) y ?x381) ?x460) 0)))))
 (and (= ?x460 0) $x155)))))))))))) :qid k!27))
 ))
 (let ((?x585 (lambda ((x Int) (y Int) )(let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x93 (+ x y ?x72 ?x79)))
 (let ((?x302 (* (- 1) (* x x y y))))
 (let ((?x237 (* (- 1) (* y y))))
 (let ((?x157 (* x x)))
 (let ((?x189 (* (- 1) ?x157)))
 (let ((?x140 (* x y)))
 (let ((?x331 (* 4 ?x140)))
 (let ((?x534 (+ (- 2) (* (- 2) x) (* 3 y) ?x331 ?x189 ?x237 (* (- 2) (* x y y)) ?x302 (* 2 (* x x y)))))
 (let ((?x404 (* x x x)))
 (let ((?x591 (* (- 1) ?x404)))
 (let ((?x388 (* x x x y)))
 (let ((?x377 (* (- 1) (* x x 1))))
 (let ((?x259 (* x x y)))
 (let ((?x605 (* 3 ?x259)))
 (let ((?x604 (* 3 ?x140)))
 (let ((?x488 (+ (* (- 1) x) ?x604 ?x189 ?x605 (* (- 1) (* x 1)) (* (- 1) (* x 1 x)) ?x377 ?x388 ?x591 (* (- 1) (* x 1 1)))))
 (let ((?x463 (* (- 3) x)))
 (let ((?x462 (+ (- 2) ?x463 y ?x140 ?x189)))
 (let ((?x139 (* (- 1) y)))
 (let ((?x194 (* 2 x)))
 (let ((?x342 (+ ?x194 ?x139 ?x331 ?x189 ?x237 (* 2 (* x y y)) ?x302 (* (- 2) ?x259))))
 (let ((?x422 (* (- 3) ?x259)))
 (let ((?x309 (* (- 2) y)))
 (let ((?x433 (+ (- 2) ?x194 ?x309 (* 2 ?x140) (* (- 2) ?x157) ?x422 (* (- 1) (* x (- 1) 1)) ?x377 (* (- 1) (* x (- 1) y)) ?x388 ?x404)))
 (let ((?x204 (* 3 x)))
 (let ((?x205 (+ (- 2) ?x204 ?x139 ?x140 ?x189)))
 (let (($x505 (or (not (= (* ?x205 ?x433 ?x342 ?x93) 0)) (not (= (* ?x462 ?x488 ?x534 ?x93) 0)))))
 (let (($x98 (= ?x93 0)))
 (let (($x514 (and $x98 $x505)))
 (let ((?x460 (+ x ?x72 ?x79 y)))
 (let ((?x381 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x543 (+ 1 ?x139 (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x396 (+ (* (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ 1 x) (+ 1 x))))))
 (let ((?x257 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x367 (+ (- 1) ?x139 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x250 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x155 (or (not (= (* ?x250 ?x367 (+ 1 y ?x257) ?x460) 0)) (not (= (* ?x396 ?x543 (+ (- 1) y ?x381) ?x460) 0)))))
 (let (($x233 (and (= ?x460 0) $x155)))
 (rewrite (= $x233 $x514)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x69 (exists ((x Int) (y Int) )(! (let ((?x63 (+ (* (- 1) (- y 1)) (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x54 (- y 1)))
 (let ((?x64 (* (+ (- (- (+ x 1) y00) x00) ?x54) (- (* (+ x 1) ?x54) (* (+ x 1) (+ x 1))) (- ?x54 (* (+ x 1) (+ x 1) ?x54 ?x54)) ?x63)))
 (let ((?x47 (+ (* (- 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x38 (+ y 1)))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) (- (* (- x 1) ?x38) (* (- x 1) (- x 1))) (- ?x38 (* (- x 1) (- x 1) ?x38 ?x38)) ?x47)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)) (not (= ?x64 0)))))))))) :qid k!27))
 ))
 (let ((?x310 (lambda ((x Int) (y Int) )(let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x460 (+ x ?x72 ?x79 y)))
 (let ((?x381 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x139 (* (- 1) y)))
 (let ((?x543 (+ 1 ?x139 (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x396 (+ (* (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ 1 x) (+ 1 x))))))
 (let ((?x257 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x367 (+ (- 1) ?x139 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x250 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x155 (or (not (= (* ?x250 ?x367 (+ 1 y ?x257) ?x460) 0)) (not (= (* ?x396 ?x543 (+ (- 1) y ?x381) ?x460) 0)))))
 (let (($x233 (and (= ?x460 0) $x155)))
 (let ((?x63 (+ (* (- 1) (- y 1)) (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x54 (- y 1)))
 (let ((?x64 (* (+ (- (- (+ x 1) y00) x00) ?x54) (- (* (+ x 1) ?x54) (* (+ x 1) (+ x 1))) (- ?x54 (* (+ x 1) (+ x 1) ?x54 ?x54)) ?x63)))
 (let ((?x47 (+ (* (- 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x38 (+ y 1)))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) (- (* (- x 1) ?x38) (* (- x 1) (- x 1))) (- ?x38 (* (- x 1) (- x 1) ?x38 ?x38)) ?x47)))
 (let (($x68 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)) (not (= ?x64 0))))))
 (rewrite (= $x68 $x233))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x313 (mp (mp @x70 (quant-intro (proof-bind ?x310) (= $x69 $x81)) $x81) (rewrite (= $x81 $x81)) $x81)))
 (let ((@x546 (mp (mp @x313 (quant-intro (proof-bind ?x585) (= $x81 $x196)) $x196) (quant-intro (proof-bind ?x316) (= $x196 $x279)) $x279)))
 (let ((@x117 (mp (mp~ @x546 (sk (~ $x279 $x373)) $x373) (rewrite (= $x373 $x594)) $x594)))
 (let ((@x231 (and-elim @x117 $x507)))
 (let ((@x192 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x507) $x497)) @x231 $x497)))
 (let (($x111 (<= ?x427 0)))
 (let ((@x378 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x507) $x111)) @x231 $x111)))
 (let (($x265 (not (<= ?x473 0))))
 (let (($x289 (>= ?x473 0)))
 (let (($x572 (>= ?x116 0)))
 (let (($x353 (<= ?x116 0)))
 (let ((@x530 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x494 (not $x353) (not $x572))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x353)) @x378 @x192 false) $x353) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x572)) @x378 @x192 false) $x572) $x494)))
 (let ((@x472 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x566 $x265 (not $x289))) (unit-resolution (and-elim @x117 $x581) @x530 $x227) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x289)) @x378 @x192 false) $x289) $x265)))
 ((_ th-lemma arith farkas 1 1 1) @x472 @x378 @x192 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             144
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.64
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1141186
 :num-checks                1
 :propagations              14
 :rlimit-count              3185
 :time                      0.01
 :total-time                0.02)
