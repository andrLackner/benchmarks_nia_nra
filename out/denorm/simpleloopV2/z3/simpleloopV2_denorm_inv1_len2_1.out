unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x126 (* (- 1) y!0)))
 (let ((?x222 (+ y00 x00 (* (- 1) x!1) ?x126)))
 (let (($x240 (>= ?x222 0)))
 (let (($x243 (= ?x222 0)))
 (let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x120 (+ ?x59 ?x66 x!1 y!0)))
 (let ((?x248 (* x!1 x!1 y!0 y!0)))
 (let ((?x219 (* 3 y!0)))
 (let ((?x128 (* (- 2) x!1)))
 (let ((?x258 (* (- 4) (* x!1 y!0))))
 (let ((?x165 (* x!1 x!1 y!0)))
 (let ((?x263 (* 2 ?x165)))
 (let ((?x164 (* x!1 y!0 y!0)))
 (let ((?x260 (* (- 2) ?x164)))
 (let ((?x158 (* x!1 x!1)))
 (let ((?x148 (* y!0 y!0)))
 (let ((?x114 (* (+ 2 ?x148 ?x158 ?x260 ?x263 ?x258 ?x128 ?x219 ?x248) ?x120)))
 (let (($x69 (= ?x114 0)))
 (let (($x115 (not $x69)))
 (let ((?x125 (* 2 x!1)))
 (let ((?x133 (* (- 2) ?x165)))
 (let ((?x166 (* 2 ?x164)))
 (let ((?x264 (* (+ ?x148 ?x158 ?x166 ?x133 ?x258 ?x125 ?x126 ?x248) ?x120)))
 (let (($x233 (= ?x264 0)))
 (let (($x238 (or (not $x233) $x115)))
 (let (($x68 (and $x243 $x238)))
 (let ((?x175 (+ x!1 y!0 ?x59 ?x66)))
 (let (($x127 (= (* (+ 2 ?x128 ?x219 ?x148 ?x260 ?x248 ?x158 ?x258 ?x263) ?x175) 0)))
 (let (($x246 (not (= (* (+ ?x125 ?x126 ?x148 ?x166 ?x248 ?x158 ?x258 ?x133) ?x175) 0))))
 (let (($x138 (and (= ?x175 0) (or $x246 (not $x127)))))
 (let (($x151 (exists ((x Int) (y Int) )(! (let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x80 (+ x y ?x59 ?x66)))
 (let ((?x172 (* x x y)))
 (let ((?x192 (* 2 ?x172)))
 (let ((?x168 (* x y)))
 (let ((?x276 (* (- 4) ?x168)))
 (let ((?x163 (* x x)))
 (let ((?x152 (* x x y y)))
 (let ((?x150 (* x y y)))
 (let ((?x193 (* (- 2) ?x150)))
 (let ((?x146 (* y y)))
 (let ((?x205 (* 3 y)))
 (let ((?x147 (* (+ 2 (* (- 2) x) ?x205 ?x146 ?x193 ?x152 ?x163 ?x276 ?x192) ?x80)))
 (let ((?x277 (* (- 2) ?x172)))
 (let ((?x278 (* 2 ?x150)))
 (let ((?x273 (* 2 x)))
 (let ((?x289 (+ ?x273 (* (- 1) y) ?x146 ?x278 ?x152 ?x163 ?x276 ?x277)))
 (let (($x85 (= ?x80 0)))
 (and $x85 (or (not (= (* ?x289 ?x80) 0)) (not (= ?x147 0))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x213 (exists ((x Int) (y Int) )(! (let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x80 (+ x y ?x59 ?x66)))
 (let ((?x172 (* x x y)))
 (let ((?x192 (* 2 ?x172)))
 (let ((?x168 (* x y)))
 (let ((?x191 (* (- 2) ?x168)))
 (let ((?x163 (* x x)))
 (let ((?x152 (* x x y y)))
 (let ((?x150 (* x y y)))
 (let ((?x193 (* (- 2) ?x150)))
 (let ((?x146 (* y y)))
 (let ((?x205 (* 3 y)))
 (let ((?x206 (+ 2 (* (- 1) x) ?x205 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x146 ?x193 ?x152 ?x163 ?x191 ?x192)))
 (let ((?x277 (* (- 2) ?x172)))
 (let ((?x278 (* 2 ?x150)))
 (let ((?x273 (* 2 x)))
 (let ((?x83 (+ ?x273 (* (- 1) (* y 1 x)) ?x146 ?x278 ?x152 ?x163 ?x191 ?x277 (* (- 1) (* y 1 1)) (* (- 1) (* y x 1)))))
 (let (($x85 (= ?x80 0)))
 (and $x85 (or (not (= (* ?x83 ?x80) 0)) (not (= (* ?x206 ?x80) 0))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x167 (lambda ((x Int) (y Int) )(let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x80 (+ x y ?x59 ?x66)))
 (let ((?x172 (* x x y)))
 (let ((?x192 (* 2 ?x172)))
 (let ((?x168 (* x y)))
 (let ((?x276 (* (- 4) ?x168)))
 (let ((?x163 (* x x)))
 (let ((?x152 (* x x y y)))
 (let ((?x150 (* x y y)))
 (let ((?x193 (* (- 2) ?x150)))
 (let ((?x146 (* y y)))
 (let ((?x205 (* 3 y)))
 (let ((?x147 (* (+ 2 (* (- 2) x) ?x205 ?x146 ?x193 ?x152 ?x163 ?x276 ?x192) ?x80)))
 (let ((?x277 (* (- 2) ?x172)))
 (let ((?x278 (* 2 ?x150)))
 (let ((?x273 (* 2 x)))
 (let ((?x289 (+ ?x273 (* (- 1) y) ?x146 ?x278 ?x152 ?x163 ?x276 ?x277)))
 (let (($x85 (= ?x80 0)))
 (let (($x176 (and $x85 (or (not (= (* ?x289 ?x80) 0)) (not (= ?x147 0))))))
 (let ((?x191 (* (- 2) ?x168)))
 (let ((?x206 (+ 2 (* (- 1) x) ?x205 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x146 ?x193 ?x152 ?x163 ?x191 ?x192)))
 (let ((?x83 (+ ?x273 (* (- 1) (* y 1 x)) ?x146 ?x278 ?x152 ?x163 ?x191 ?x277 (* (- 1) (* y 1 1)) (* (- 1) (* y x 1)))))
 (let (($x91 (and $x85 (or (not (= (* ?x83 ?x80) 0)) (not (= (* ?x206 ?x80) 0))))))
 (rewrite (= $x91 $x176)))))))))))))))))))))))))))
 ))
 (let (($x139 (exists ((x Int) (y Int) )(! (let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x171 (+ x ?x59 ?x66 y)))
 (let ((?x61 (+ (- 1) y (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x251 (+ 1 y (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (and (= ?x171 0) (or (not (= (* ?x251 ?x171) 0)) (not (= (* ?x61 ?x171) 0))))))))) :qid k!27))
 ))
 (let ((?x250 (lambda ((x Int) (y Int) )(let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x80 (+ x y ?x59 ?x66)))
 (let ((?x172 (* x x y)))
 (let ((?x192 (* 2 ?x172)))
 (let ((?x168 (* x y)))
 (let ((?x191 (* (- 2) ?x168)))
 (let ((?x163 (* x x)))
 (let ((?x152 (* x x y y)))
 (let ((?x150 (* x y y)))
 (let ((?x193 (* (- 2) ?x150)))
 (let ((?x146 (* y y)))
 (let ((?x205 (* 3 y)))
 (let ((?x206 (+ 2 (* (- 1) x) ?x205 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x146 ?x193 ?x152 ?x163 ?x191 ?x192)))
 (let ((?x277 (* (- 2) ?x172)))
 (let ((?x278 (* 2 ?x150)))
 (let ((?x273 (* 2 x)))
 (let ((?x83 (+ ?x273 (* (- 1) (* y 1 x)) ?x146 ?x278 ?x152 ?x163 ?x191 ?x277 (* (- 1) (* y 1 1)) (* (- 1) (* y x 1)))))
 (let (($x85 (= ?x80 0)))
 (let (($x91 (and $x85 (or (not (= (* ?x83 ?x80) 0)) (not (= (* ?x206 ?x80) 0))))))
 (let ((?x171 (+ x ?x59 ?x66 y)))
 (let ((?x61 (+ (- 1) y (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x251 (+ 1 y (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let (($x187 (and (= ?x171 0) (or (not (= (* ?x251 ?x171) 0)) (not (= (* ?x61 ?x171) 0))))))
 (rewrite (= $x187 $x91)))))))))))))))))))))))))))
 ))
 (let (($x56 (exists ((x Int) (y Int) )(! (let ((?x47 (- y 1)))
 (let ((?x51 (* (+ (- (- (+ x 1) y00) x00) ?x47) (+ ?x47 (* (+ x 1) (+ x 1) ?x47 ?x47)))))
 (let ((?x40 (+ y 1 (* (- x 1) (- x 1) (+ y 1) (+ y 1)))))
 (let (($x42 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x40) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x42) (not (= ?x51 0)))))))) :qid k!27))
 ))
 (let ((?x177 (lambda ((x Int) (y Int) )(let ((?x66 (* (- 1) x00)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x171 (+ x ?x59 ?x66 y)))
 (let ((?x61 (+ (- 1) y (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x251 (+ 1 y (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let (($x187 (and (= ?x171 0) (or (not (= (* ?x251 ?x171) 0)) (not (= (* ?x61 ?x171) 0))))))
 (let ((?x47 (- y 1)))
 (let ((?x51 (* (+ (- (- (+ x 1) y00) x00) ?x47) (+ ?x47 (* (+ x 1) (+ x 1) ?x47 ?x47)))))
 (let ((?x40 (+ y 1 (* (- x 1) (- x 1) (+ y 1) (+ y 1)))))
 (let (($x42 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x40) 0)))
 (let (($x55 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x42) (not (= ?x51 0))))))
 (rewrite (= $x55 $x187))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x180 (mp (mp @x57 (quant-intro (proof-bind ?x177) (= $x56 $x139)) $x139) (rewrite (= $x139 $x139)) $x139)))
 (let ((@x185 (mp (mp @x180 (quant-intro (proof-bind ?x250) (= $x139 $x213)) $x213) (quant-intro (proof-bind ?x167) (= $x213 $x151)) $x151)))
 (let ((@x77 (mp (mp~ @x185 (sk (~ $x151 $x138)) $x138) (rewrite (= $x138 $x68)) $x68)))
 (let ((@x71 (and-elim @x77 $x243)))
 (let ((@x107 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x243) $x240)) @x71 $x240)))
 (let (($x170 (<= ?x222 0)))
 (let ((@x154 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x243) $x170)) @x71 $x170)))
 (let (($x79 (not (<= ?x114 0))))
 (let (($x70 (>= ?x114 0)))
 (let (($x113 (>= ?x264 0)))
 (let (($x208 (<= ?x264 0)))
 (let ((@x200 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x233 (not $x208) (not $x113))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x208)) @x154 @x107 false) $x208) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x113)) @x154 @x107 false) $x113) $x233)))
 (let ((@x282 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x69 $x79 (not $x70))) (unit-resolution (and-elim @x77 $x238) @x200 $x115) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x70)) @x154 @x107 false) $x70) $x79)))
 ((_ th-lemma arith farkas 1 1 1) @x282 @x154 @x107 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             96
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.57
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1106077
 :num-checks                1
 :propagations              14
 :rlimit-count              1977
 :time                      0.01
 :total-time                0.01)
