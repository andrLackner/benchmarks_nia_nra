unsat
((set-logic NIA)
(proof
(let (($x66 (exists ((x Int) (y Int) (z Int) )(! (let ((?x51 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x56 (to_real y)))
 (let ((?x57 (/ ?x56 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x48 (to_real z00)))
 (let ((?x58 (* ?x41 ?x43 ?x57)))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x59 (+ ?x45 ?x58 ?x46)))
 (let ((?x60 (- ?x59 ?x48)))
 (let ((?x61 (* ?x60 ?x51 ?x41 ?x43 ?x41 ?x43 ?x57 ?x46 ?x46 ?x46)))
 (let (($x62 (= ?x61 ?x51)))
 (let (($x63 (not $x62)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x39 (- y 1)))
 (let ((?x40 (to_real ?x39)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x44 (* ?x41 ?x43 ?x42)))
 (let ((?x47 (+ ?x45 ?x44 ?x46 ?x43)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x53 (* ?x49 ?x51 ?x41 ?x43 ?x41 ?x43 ?x42 ?x52 ?x52 ?x52)))
 (let (($x54 (= ?x53 ?x51)))
 (let (($x55 (not $x54)))
 (let (($x64 (or $x55 $x63)))
 (let (($x37 (= (- (+ ?x31 (* x y) z) z00) 0)))
 (and $x37 $x64)))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x305 (= $x66 false)))
 (let (($x298 (exists ((x Int) (y Int) (z Int) )(! false :qid k!28))
 ))
 (let ((@x304 (elim-unused (= $x298 false))))
 (let (($x301 (= $x66 $x298)))
 (let ((?x389 (lambda ((x Int) (y Int) (z Int) )(let ((?x51 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x56 (to_real y)))
 (let ((?x57 (/ ?x56 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x48 (to_real z00)))
 (let ((?x58 (* ?x41 ?x43 ?x57)))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x59 (+ ?x45 ?x58 ?x46)))
 (let ((?x60 (- ?x59 ?x48)))
 (let ((?x61 (* ?x60 ?x51 ?x41 ?x43 ?x41 ?x43 ?x57 ?x46 ?x46 ?x46)))
 (let (($x62 (= ?x61 ?x51)))
 (let (($x63 (not $x62)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x39 (- y 1)))
 (let ((?x40 (to_real ?x39)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x44 (* ?x41 ?x43 ?x42)))
 (let ((?x47 (+ ?x45 ?x44 ?x46 ?x43)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x53 (* ?x49 ?x51 ?x41 ?x43 ?x41 ?x43 ?x42 ?x52 ?x52 ?x52)))
 (let (($x54 (= ?x53 ?x51)))
 (let (($x55 (not $x54)))
 (let (($x64 (or $x55 $x63)))
 (let (($x37 (= (- (+ ?x31 (* x y) z) z00) 0)))
 (let (($x65 (and $x37 $x64)))
 (let (($x296 (= $x65 false)))
 (let (($x321 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x383 (and $x321 false)))
 (let (($x289 (= $x64 false)))
 (let ((@x288 (rewrite (= (or false false) false))))
 (let (($x284 (or false false)))
 (let (($x285 (= $x64 $x284)))
 (let (($x282 (= $x63 false)))
 (let ((@x230 (rewrite (= (not true) false))))
 (let (($x226 (not true)))
 (let (($x280 (= $x63 $x226)))
 (let (($x278 (= $x62 true)))
 (let ((@x223 (rewrite (= (= 0.0 0.0) true))))
 (let (($x219 (= 0.0 0.0)))
 (let (($x276 (= $x62 $x219)))
 (let ((@x200 (rewrite (= ?x51 0.0))))
 (let (($x274 (= ?x61 0.0)))
 (let ((?x152 (* (/ 1.0 2.0) ?x56)))
 (let ((?x187 (* (- 1.0) ?x48)))
 (let ((?x350 (* ?x56 ?x43)))
 (let ((?x107 (* (- 1.0) (* (to_real x00) (to_real y00)))))
 (let ((?x366 (+ ?x107 ?x350 ?x46 ?x187)))
 (let ((?x371 (* ?x366 0.0 2.0 ?x43 2.0 ?x43 ?x152 ?x46 ?x46 ?x46)))
 (let ((@x239 (trans (monotonicity (rewrite (= ?x41 2.0)) (= ?x57 (/ ?x56 2.0))) (rewrite (= (/ ?x56 2.0) ?x152)) (= ?x57 ?x152))))
 (let ((@x109 (rewrite (= ?x41 2.0))))
 (let ((@x363 (rewrite (= (- (+ ?x107 ?x350 ?x46) ?x48) (+ (+ ?x107 ?x350 ?x46) ?x187)))))
 (let ((@x360 (monotonicity (rewrite (= ?x59 (+ ?x107 ?x350 ?x46))) (= ?x60 (- (+ ?x107 ?x350 ?x46) ?x48)))))
 (let ((@x370 (trans (trans @x360 @x363 (= ?x60 (+ (+ ?x107 ?x350 ?x46) ?x187))) (rewrite (= (+ (+ ?x107 ?x350 ?x46) ?x187) ?x366)) (= ?x60 ?x366))))
 (let ((@x376 (trans (monotonicity @x370 @x200 @x109 @x109 @x239 (= ?x61 ?x371)) (rewrite (= ?x371 0.0)) $x274)))
 (let ((@x380 (trans (monotonicity (trans (monotonicity @x376 @x200 $x276) @x223 $x278) $x280) @x230 $x282)))
 (let (($x231 (= $x55 false)))
 (let (($x227 (= $x55 $x226)))
 (let (($x224 (= $x54 true)))
 (let (($x220 (= $x54 $x219)))
 (let (($x217 (= ?x53 0.0)))
 (let ((?x337 (+ ?x46 ?x43)))
 (let ((?x159 (+ (- (/ 1.0 2.0)) ?x152)))
 (let ((?x309 (* 2.0 (* ?x43 ?x159))))
 (let ((?x332 (+ ?x107 ?x309 ?x46 ?x43 ?x187)))
 (let ((?x340 (* ?x332 0.0 2.0 ?x43 2.0 ?x43 ?x159 ?x337 ?x337 ?x337)))
 (let ((@x339 (rewrite (= ?x52 ?x337))))
 (let ((@x158 (trans (rewrite (= (* (/ 1.0 2.0) (+ (- 1.0) ?x56)) (+ (* (/ 1.0 2.0) (- 1.0)) ?x152))) (rewrite (= (+ (* (/ 1.0 2.0) (- 1.0)) ?x152) ?x159)) (= (* (/ 1.0 2.0) (+ (- 1.0) ?x56)) ?x159))))
 (let ((@x119 (monotonicity (rewrite (= (* (- 1) 1) (- 1))) (= (+ y (* (- 1) 1)) (+ y (- 1))))))
 (let ((@x124 (trans @x119 (rewrite (= (+ y (- 1)) (+ (- 1) y))) (= (+ y (* (- 1) 1)) (+ (- 1) y)))))
 (let ((@x126 (trans (rewrite (= ?x39 (+ y (* (- 1) 1)))) @x124 (= ?x39 (+ (- 1) y)))))
 (let ((@x134 (trans (monotonicity @x126 (= ?x40 (to_real (+ (- 1) y)))) (rewrite (= (to_real (+ (- 1) y)) (+ (to_real (- 1)) ?x56))) (= ?x40 (+ (to_real (- 1)) ?x56)))))
 (let ((@x141 (trans @x134 (rewrite (= (+ (to_real (- 1)) ?x56) (+ (- 1.0) ?x56))) (= ?x40 (+ (- 1.0) ?x56)))))
 (let ((@x150 (trans (monotonicity @x141 @x109 (= ?x42 (/ (+ (- 1.0) ?x56) 2.0))) (rewrite (= (/ (+ (- 1.0) ?x56) 2.0) (* (/ 1.0 2.0) (+ (- 1.0) ?x56)))) (= ?x42 (* (/ 1.0 2.0) (+ (- 1.0) ?x56))))))
 (let ((@x163 (trans @x150 @x158 (= ?x42 ?x159))))
 (let ((?x315 (+ ?x107 ?x309 ?x46 ?x43)))
 (let ((?x327 (+ ?x315 ?x187)))
 (let ((?x320 (- ?x315 ?x48)))
 (let ((@x331 (trans (monotonicity (rewrite (= ?x47 ?x315)) (= ?x49 ?x320)) (rewrite (= ?x320 ?x327)) (= ?x49 ?x327))))
 (let ((@x342 (monotonicity (trans @x331 (rewrite (= ?x327 ?x332)) (= ?x49 ?x332)) @x200 @x109 @x109 @x163 @x339 @x339 @x339 (= ?x53 ?x340))))
 (let ((@x347 (trans (monotonicity (trans @x342 (rewrite (= ?x340 0.0)) $x217) @x200 $x220) @x223 $x224)))
 (let ((@x382 (trans (monotonicity (trans (monotonicity @x347 $x227) @x230 $x231) @x380 $x285) @x288 $x289)))
 (trans (monotonicity (rewrite (= $x37 $x321)) @x382 (= $x65 $x383)) (rewrite (= $x383 false)) $x296))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (mp @x67 (trans (quant-intro (proof-bind ?x389) $x301) @x304 $x305) false))))))))))

(:max-memory   3.36
 :memory       3.05
 :mk-bool-var  5
 :num-allocs   899885
 :rlimit-count 241
 :time         0.01
 :total-time   0.01)
