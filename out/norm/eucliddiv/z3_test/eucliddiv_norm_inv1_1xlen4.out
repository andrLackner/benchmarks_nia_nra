unsat
((set-logic NIA)
(proof
(let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x48 (* ?x42 ?x44 y00)))
 (let ((?x45 (* ?x42 ?x44 y00 y00 y00)))
 (let ((?x43 (* ?x42 ?x42 y00 y00)))
 (let ((?x46 (+ ?x43 ?x45)))
 (let ((?x47 (- ?x46 ?x43)))
 (let ((?x49 (+ ?x47 ?x48)))
 (let ((?x51 (- ?x49 ?x45)))
 (let ((?x52 (- ?x51 ?x50)))
 (let ((?x53 (- ?x52 ?x48)))
 (let ((?x54 (+ ?x53 ?x50)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x57))))))))))))))))))) :qid k!29))
 ))
 (let (($x378 (= $x59 false)))
 (let (($x371 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x377 (elim-unused (= $x371 false))))
 (let (($x374 (= $x59 $x371)))
 (let ((?x485 (lambda ((q Int) (r Int) (y Int) )(let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x48 (* ?x42 ?x44 y00)))
 (let ((?x45 (* ?x42 ?x44 y00 y00 y00)))
 (let ((?x43 (* ?x42 ?x42 y00 y00)))
 (let ((?x46 (+ ?x43 ?x45)))
 (let ((?x47 (- ?x46 ?x43)))
 (let ((?x49 (+ ?x47 ?x48)))
 (let ((?x51 (- ?x49 ?x45)))
 (let ((?x52 (- ?x51 ?x50)))
 (let ((?x53 (- ?x52 ?x48)))
 (let ((?x54 (+ ?x53 ?x50)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x58 (and $x33 $x41 $x57)))
 (let (($x369 (= $x58 false)))
 (let (($x408 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x84 (= (+ (* (- 1) y00) y) 0)))
 (let (($x479 (and $x84 $x408 false)))
 (let (($x362 (= $x57 false)))
 (let ((@x361 (rewrite (= (or false) false))))
 (let (($x357 (or false)))
 (let (($x358 (= $x57 $x357)))
 (let (($x355 (= $x56 false)))
 (let ((@x354 (rewrite (= (not true) false))))
 (let (($x350 (not true)))
 (let (($x351 (= $x56 $x350)))
 (let (($x348 (= $x55 true)))
 (let ((@x347 (rewrite (= (= 0 0) true))))
 (let (($x343 (= 0 0)))
 (let (($x344 (= $x55 $x343)))
 (let ((?x62 (+ 1 q)))
 (let ((?x440 (* y00 ?x62 ?x62 ?x62)))
 (let ((?x448 (* (- 1) ?x440)))
 (let ((?x467 (+ ?x448 ?x440)))
 (let ((@x69 (rewrite (= ?x42 ?x62))))
 (let ((@x238 (monotonicity @x69 @x69 @x69 (= ?x50 (* ?x62 ?x62 ?x62 y00)))))
 (let ((@x444 (trans @x238 (rewrite (= (* ?x62 ?x62 ?x62 y00) ?x440)) (= ?x50 ?x440))))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x108 (+ r ?x64)))
 (let ((?x419 (* y00 ?x62 ?x108)))
 (let ((?x449 (+ ?x419 ?x448)))
 (let ((?x458 (+ ?x449 (* (- 1) ?x419))))
 (let ((@x110 (rewrite (= ?x44 ?x108))))
 (let ((@x173 (monotonicity @x69 @x110 (= ?x48 (* ?x62 ?x108 y00)))))
 (let ((?x388 (* y00 y00 y00 ?x62 ?x108)))
 (let ((?x424 (+ ?x388 ?x419)))
 (let ((?x431 (+ ?x424 (* (- 1) ?x388))))
 (let ((@x113 (monotonicity @x69 @x110 (= ?x45 (* ?x62 ?x108 y00 y00 y00)))))
 (let ((@x395 (trans @x113 (rewrite (= (* ?x62 ?x108 y00 y00 y00) ?x388)) (= ?x45 ?x388))))
 (let ((@x435 (trans (monotonicity (rewrite (= ?x49 ?x424)) @x395 (= ?x51 (- ?x424 ?x388))) (rewrite (= (- ?x424 ?x388) ?x431)) (= ?x51 ?x431))))
 (let ((@x447 (monotonicity (trans @x435 (rewrite (= ?x431 ?x419)) (= ?x51 ?x419)) @x444 (= ?x52 (- ?x419 ?x440)))))
 (let ((@x456 (monotonicity (trans @x447 (rewrite (= (- ?x419 ?x440) ?x449)) (= ?x52 ?x449)) (trans @x173 (rewrite (= (* ?x62 ?x108 y00) ?x419)) (= ?x48 ?x419)) (= ?x53 (- ?x449 ?x419)))))
 (let ((@x466 (trans (trans @x456 (rewrite (= (- ?x449 ?x419) ?x458)) (= ?x53 ?x458)) (rewrite (= ?x458 ?x448)) (= ?x53 ?x448))))
 (let ((@x472 (trans (monotonicity @x466 @x444 (= ?x54 ?x467)) (rewrite (= ?x467 0)) $x55)))
 (let ((@x476 (trans (monotonicity (trans (monotonicity @x472 $x344) @x347 $x348) $x351) @x354 $x355)))
 (let ((@x481 (monotonicity (rewrite (= $x33 $x84)) (rewrite (= $x41 $x408)) (trans (monotonicity @x476 $x358) @x361 $x362) (= $x58 $x479))))
 (trans @x481 (rewrite (= $x479 false)) $x369)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (mp @x60 (trans (quant-intro (proof-bind ?x485) $x374) @x377 $x378) false))))))))))

(:max-memory   19.04
 :memory       19.04
 :num-allocs   237394
 :rlimit-count 286
 :time         0.00
 :total-time   0.02)
