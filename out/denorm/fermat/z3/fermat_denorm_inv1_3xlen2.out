unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(declare-fun u!1 () Int)
(proof
(let ((?x1003 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x1609 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) ?x1003 (* (- 1) (* v!0 v!0)) (* (- 4) r!2) (* 2 v!0))))
 (let (($x190 (>= ?x1609 0)))
 (let (($x1573 (= ?x1609 0)))
 (let ((?x1037 (* (- 2) v!0)))
 (let ((?x1002 (* 4 r!2)))
 (let ((?x1035 (* v!0 v!0)))
 (let ((?x324 (* (- 1) ?x1003)))
 (let ((?x1036 (* 2 u!1)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x1602 (+ ?x112 ?x128 ?x41 ?x46 ?x204 ?x1036 ?x324 ?x1035 ?x1002 ?x1037)))
 (let ((?x1647 (* u!1 r!2)))
 (let ((?x1650 (* 4 ?x1647)))
 (let ((?x1616 (* u!1 u!1 r!2)))
 (let ((?x1584 (* u!1 u!1 u!1)))
 (let ((?x1593 (* 4 ?x1003)))
 (let ((?x1590 (* 3 u!1)))
 (let ((?x743 (* (- 1) (* u!1 r!2 r!2))))
 (let ((?x1645 (* u!1 r!2 v!0 v!0)))
 (let ((?x1588 (* (- 2) (* r!2 r!2))))
 (let ((?x1586 (* (- 1) ?x1584)))
 (let ((?x1568 (* 2 (* r!2 v!0 v!0))))
 (let ((?x1566 (* u!1 u!1 v!0 v!0)))
 (let ((?x1585 (* (- 2) ?x1003)))
 (let ((?x995 (* u!1 v!0 v!0)))
 (let ((?x1565 (* 2 ?x995)))
 (let ((?x614 (+ ?x1565 ?x1585 ?x1566 ?x1568 ?x1586 ?x1588 (* (- 2) ?x1616) ?x1645 (* (- 4) ?x1647) ?x743)))
 (let ((?x1578 (* (- 1) (* u!1 u!1 u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x121 (* (- 6) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x1290 (* (- 8) (* r!2 r!2 r!2 v!0 v!0))))
 (let ((?x1425 (* (- 12) (* u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x1312 (* (- 1) (* u!1 u!1 u!1 r!2 r!2 r!2 v!0 v!0))))
 (let ((?x1296 (* (- 8) (* u!1 u!1 u!1 v!0 v!0))))
 (let ((?x424 (* (- 1) (* v!0 v!0 v!0))))
 (let ((?x999 (+ (* (- 18) (* u!1 u!1 u!1 r!2 r!2 v!0 v!0)) ?x424 (* (- 36) (* u!1 u!1 r!2 r!2 v!0 v!0)) ?x1296 (* (- 18) (* u!1 u!1 u!1 u!1 r!2 v!0 v!0)) ?x1312 ?x1425 (* (- 24) (* u!1 u!1 r!2 v!0 v!0)) ?x1290 (* (- 36) (* u!1 u!1 u!1 r!2 v!0 v!0)) ?x121 (* (- 6) (* u!1 u!1 r!2 r!2 r!2 v!0 v!0)) ?x1578 (* (- 12) (* u!1 r!2 r!2 r!2 v!0 v!0)) (* (- 3) (* u!1 u!1 u!1 u!1 r!2 r!2 v!0 v!0)) (* (- 3) (* u!1 u!1 u!1 u!1 u!1 r!2 v!0 v!0)) (* (- 24) (* u!1 r!2 r!2 v!0 v!0)))))
 (let ((?x1390 (* ?x999 ?x614 (+ (- 2) ?x1590 ?x1593 ?x1002 ?x1584 ?x1616 ?x1650) ?x1602)))
 (let (($x1396 (= ?x1390 0)))
 (let (($x1389 (not $x1396)))
 (let ((?x321 (* (- 5) ?x995)))
 (let ((?x1005 (* (- 1) (* u!1 v!0 v!0 v!0))))
 (let ((?x326 (* (- 4) (* u!1 v!0))))
 (let ((?x327 (* 4 (* u!1 u!1 u!1 v!0 v!0 v!0 v!0))))
 (let ((?x1215 (* (- 12) v!0)))
 (let ((?x459 (* (- 6) ?x1035)))
 (let ((?x761 (* u!1 u!1 u!1 v!0 v!0 v!0 v!0 v!0)))
 (let ((?x1047 (* 4 (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x1639 (+ (- 8) (* (- 4) (* u!1 u!1 u!1 r!2 r!2 r!2)) (* 12 (* u!1 u!1 u!1 r!2 r!2 v!0 v!0)) (* (- 4) (* u!1 u!1 u!1 r!2 r!2 r!2 v!0)) ?x424 ?x1047 (* (- 12) (* u!1 u!1 u!1 r!2 v!0 v!0 v!0)) ?x1312 ?x761 (* 3 (* u!1 u!1 u!1 r!2 r!2 v!0 v!0 v!0)) (* 12 (* u!1 u!1 u!1 r!2 r!2 v!0)) ?x459 ?x1215 ?x327 (* (- 12) (* u!1 u!1 u!1 r!2 v!0 v!0)) (* (- 3) (* u!1 u!1 u!1 r!2 v!0 v!0 v!0 v!0)))))
 (let ((?x1378 (* (+ (* (- 1) (* u!1 u!1 v!0)) (* (- 1) u!1) ?x1616) ?x1639 (+ ?x326 ?x1005 ?x321 ?x1645 ?x1650 (* 6 (* u!1 r!2 v!0)) ?x743) ?x1602)))
 (let (($x1436 (= ?x1378 0)))
 (let (($x1393 (or (not $x1436) $x1389)))
 (let (($x1178 (and $x1573 $x1393)))
 (let ((?x1017 (+ ?x1002 ?x1036 ?x1037 ?x112 ?x128 ?x41 ?x324 ?x1035 ?x46 ?x204)))
 (let ((?x655 (* r!2 u!1)))
 (let ((?x122 (* 4 ?x655)))
 (let ((?x1030 (* r!2 u!1 u!1)))
 (let ((?x454 (* (- 1) (* r!2 r!2 u!1))))
 (let ((?x697 (* r!2 u!1 v!0 v!0)))
 (let ((?x1589 (+ ?x1585 (* (- 2) ?x1030) ?x697 (* (- 4) ?x655) ?x1565 ?x454 ?x1586 ?x1566 ?x1568 ?x1588)))
 (let ((?x1315 (* (- 1) (* r!2 r!2 r!2 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x1583 (+ ?x424 (* (- 18) (* r!2 u!1 u!1 u!1 u!1 v!0 v!0)) ?x1296 (* (- 6) (* r!2 r!2 r!2 u!1 u!1 v!0 v!0)) ?x1290 (* (- 24) (* r!2 u!1 u!1 v!0 v!0)) (* (- 18) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)) ?x1425 ?x121 ?x1315 (* (- 36) (* r!2 r!2 u!1 u!1 v!0 v!0)) (* (- 12) (* r!2 r!2 r!2 u!1 v!0 v!0)) (* (- 36) (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 3) (* r!2 r!2 u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 3) (* r!2 u!1 u!1 u!1 u!1 u!1 v!0 v!0)) ?x1578 (* (- 24) (* r!2 r!2 u!1 v!0 v!0)))))
 (let (($x1592 (= (* ?x1583 ?x1589 (+ (- 2) ?x1002 ?x1590 ?x1593 ?x1030 ?x122 ?x1584) ?x1017) 0)))
 (let ((?x699 (+ (- 8) ?x1215 ?x459 ?x424 (* 12 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)) ?x1315 (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 4) (* r!2 r!2 r!2 u!1 u!1 u!1)) (* 3 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* 12 (* r!2 r!2 u!1 u!1 u!1 v!0)) (* (- 4) (* r!2 r!2 r!2 u!1 u!1 u!1 v!0)) (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 3) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0 v!0)) ?x1047 ?x327 ?x761)))
 (let ((?x659 (* (+ (* (- 1) u!1) ?x1030 (* (- 1) (* u!1 u!1 v!0))) ?x699 (+ ?x697 ?x122 ?x326 (* 6 (* r!2 u!1 v!0)) ?x321 ?x1005 ?x454) ?x1017)))
 (let (($x1596 (and (= ?x1017 0) (or (not (= ?x659 0)) (not $x1592)))))
 (let (($x1417 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x701 (* u u u)))
 (let ((?x377 (* r u)))
 (let ((?x378 (* 4 ?x377)))
 (let ((?x333 (* r u u)))
 (let ((?x727 (+ (- 2) ?x28 (* 3 u) (* 4 ?x43) ?x333 ?x378 ?x701)))
 (let ((?x479 (* (- 1) (* r r u))))
 (let ((?x370 (* r u v v)))
 (let ((?x820 (+ (* (- 2) ?x43) (* (- 2) ?x333) ?x370 (* (- 4) ?x377) (* 2 (* u v v)) ?x479 (* (- 1) ?x701) (* u u v v) (* 2 (* r v v)) (* (- 2) (* r r)))))
 (let ((?x962 (* (- 1) (* u u u u u u v v))))
 (let ((?x556 (* (- 1) (* r r r u u u v v))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x217 (+ ?x626 (* (- 18) (* r u u u u v v)) (* (- 8) (* u u u v v)) (* (- 6) (* r r r u u v v)) (* (- 8) (* r r r v v)) (* (- 24) (* r u u v v)) (* (- 18) (* r r u u u v v)) (* (- 12) (* u u u u v v)) (* (- 6) (* u u u u u v v)) ?x556 (* (- 36) (* r r u u v v)) (* (- 12) (* r r r u v v)) (* (- 36) (* r u u u v v)) (* (- 3) (* r r u u u u v v)) (* (- 3) (* r u u u u u v v)) ?x962 (* (- 24) (* r r u v v)))))
 (let (($x1138 (not (= (* ?x217 ?x820 ?x727 ?x210) 0))))
 (let ((?x412 (* (- 1) (* u v v v))))
 (let ((?x492 (* 6 (* r u v))))
 (let ((?x388 (* (- 4) (* u v))))
 (let ((?x495 (+ ?x370 ?x378 ?x388 ?x492 (* (- 5) (* u v v)) ?x412 ?x479)))
 (let ((?x637 (* (- 6) ?x45)))
 (let ((?x646 (* (- 12) v)))
 (let ((?x1556 (+ (- 8) ?x646 ?x637 ?x626 (* 12 (* r r u u u v v)) ?x556 (* (- 12) (* r u u u v v)) (* (- 4) (* r r r u u u)) (* 3 (* r r u u u v v v)) (* 12 (* r r u u u v)) (* (- 4) (* r r r u u u v)) (* (- 12) (* r u u u v v v)) (* (- 3) (* r u u u v v v v)) (* 4 (* u u u v v v)) (* 4 (* u u u v v v v)) (* u u u v v v v v))))
 (let ((?x350 (* (- 1) u)))
 (let ((?x356 (+ ?x350 ?x333 (* (- 1) (* u u v)))))
 (let (($x215 (= ?x210 0)))
 (and $x215 (or (not (= (* ?x356 ?x1556 ?x495 ?x210) 0)) $x1138))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x1695 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x479 (* (- 1) (* r r u))))
 (let ((?x412 (* (- 1) (* u v v v))))
 (let ((?x492 (* 6 (* r u v))))
 (let ((?x388 (* (- 4) (* u v))))
 (let ((?x377 (* r u)))
 (let ((?x378 (* 4 ?x377)))
 (let ((?x370 (* r u v v)))
 (let ((?x1676 (+ ?x370 ?x378 ?x388 ?x492 (* (- 3) (* u v v)) ?x412 ?x479 (* 2 (* v (* (- 1) v) u)))))
 (let ((?x556 (* (- 1) (* r r r u u u v v))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x637 (* (- 6) ?x45)))
 (let ((?x646 (* (- 12) v)))
 (let ((?x1556 (+ (- 8) ?x646 ?x637 ?x626 (* 12 (* r r u u u v v)) ?x556 (* (- 12) (* r u u u v v)) (* (- 4) (* r r r u u u)) (* 3 (* r r u u u v v v)) (* 12 (* r r u u u v)) (* (- 4) (* r r r u u u v)) (* (- 12) (* r u u u v v v)) (* (- 3) (* r u u u v v v v)) (* 4 (* u u u v v v)) (* 4 (* u u u v v v v)) (* u u u v v v v v))))
 (let ((?x333 (* r u u)))
 (let ((?x350 (* (- 1) u)))
 (let ((?x356 (+ ?x350 ?x333 (* (- 1) (* u u v)))))
 (let ((?x701 (* u u u)))
 (let ((?x727 (+ (- 2) ?x28 (* 3 u) (* 4 ?x43) ?x333 ?x378 ?x701)))
 (let ((?x820 (+ (* (- 2) ?x43) (* (- 2) ?x333) ?x370 (* (- 4) ?x377) (* 2 (* u v v)) ?x479 (* (- 1) ?x701) (* u u v v) (* 2 (* r v v)) (* (- 2) (* r r)))))
 (let ((?x962 (* (- 1) (* u u u u u u v v))))
 (let ((?x217 (+ ?x626 (* (- 18) (* r u u u u v v)) (* (- 8) (* u u u v v)) (* (- 6) (* r r r u u v v)) (* (- 8) (* r r r v v)) (* (- 24) (* r u u v v)) (* (- 18) (* r r u u u v v)) (* (- 12) (* u u u u v v)) (* (- 6) (* u u u u u v v)) ?x556 (* (- 36) (* r r u u v v)) (* (- 12) (* r r r u v v)) (* (- 36) (* r u u u v v)) (* (- 3) (* r r u u u u v v)) (* (- 3) (* r u u u u u v v)) ?x962 (* (- 24) (* r r u v v)))))
 (let (($x1138 (not (= (* ?x217 ?x820 ?x727 ?x210) 0))))
 (let (($x215 (= ?x210 0)))
 (and $x215 (or $x1138 (not (= (* ?x356 ?x1556 ?x1676 ?x210) 0))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1038 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x701 (* u u u)))
 (let ((?x377 (* r u)))
 (let ((?x378 (* 4 ?x377)))
 (let ((?x333 (* r u u)))
 (let ((?x727 (+ (- 2) ?x28 (* 3 u) (* 4 ?x43) ?x333 ?x378 ?x701)))
 (let ((?x479 (* (- 1) (* r r u))))
 (let ((?x370 (* r u v v)))
 (let ((?x820 (+ (* (- 2) ?x43) (* (- 2) ?x333) ?x370 (* (- 4) ?x377) (* 2 (* u v v)) ?x479 (* (- 1) ?x701) (* u u v v) (* 2 (* r v v)) (* (- 2) (* r r)))))
 (let ((?x962 (* (- 1) (* u u u u u u v v))))
 (let ((?x556 (* (- 1) (* r r r u u u v v))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x217 (+ ?x626 (* (- 18) (* r u u u u v v)) (* (- 8) (* u u u v v)) (* (- 6) (* r r r u u v v)) (* (- 8) (* r r r v v)) (* (- 24) (* r u u v v)) (* (- 18) (* r r u u u v v)) (* (- 12) (* u u u u v v)) (* (- 6) (* u u u u u v v)) ?x556 (* (- 36) (* r r u u v v)) (* (- 12) (* r r r u v v)) (* (- 36) (* r u u u v v)) (* (- 3) (* r r u u u u v v)) (* (- 3) (* r u u u u u v v)) ?x962 (* (- 24) (* r r u v v)))))
 (let (($x1138 (not (= (* ?x217 ?x820 ?x727 ?x210) 0))))
 (let ((?x412 (* (- 1) (* u v v v))))
 (let ((?x492 (* 6 (* r u v))))
 (let ((?x388 (* (- 4) (* u v))))
 (let ((?x495 (+ ?x370 ?x378 ?x388 ?x492 (* (- 5) (* u v v)) ?x412 ?x479)))
 (let ((?x637 (* (- 6) ?x45)))
 (let ((?x646 (* (- 12) v)))
 (let ((?x1556 (+ (- 8) ?x646 ?x637 ?x626 (* 12 (* r r u u u v v)) ?x556 (* (- 12) (* r u u u v v)) (* (- 4) (* r r r u u u)) (* 3 (* r r u u u v v v)) (* 12 (* r r u u u v)) (* (- 4) (* r r r u u u v)) (* (- 12) (* r u u u v v v)) (* (- 3) (* r u u u v v v v)) (* 4 (* u u u v v v)) (* 4 (* u u u v v v v)) (* u u u v v v v v))))
 (let ((?x350 (* (- 1) u)))
 (let ((?x356 (+ ?x350 ?x333 (* (- 1) (* u u v)))))
 (let (($x215 (= ?x210 0)))
 (let (($x1034 (and $x215 (or (not (= (* ?x356 ?x1556 ?x495 ?x210) 0)) $x1138))))
 (let ((?x1676 (+ ?x370 ?x378 ?x388 ?x492 (* (- 3) (* u v v)) ?x412 ?x479 (* 2 (* v (* (- 1) v) u)))))
 (let (($x1746 (and $x215 (or $x1138 (not (= (* ?x356 ?x1556 ?x1676 ?x210) 0))))))
 (rewrite (= $x1746 $x1034)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x688 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x299 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x441 (+ (* (+ 2 v) (+ 2 v) (+ r (* (- 1) v)) u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x109 (* (- 1) v)))
 (let ((?x403 (+ r ?x109)))
 (let ((?x423 (+ 2 v)))
 (let ((?x464 (+ (* (- 1) (* ?x423 ?x423 ?x403 ?x403 ?x403 u u u)) (* (- 1) (* ?x423 ?x423 ?x423)))))
 (let (($x968 (not (= (* (+ (* ?x403 u u) (* (- 1) u)) ?x464 ?x441 ?x299) 0))))
 (let ((?x45 (* v v)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x169 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x350 (* (- 1) u)))
 (let ((?x230 (+ (* (+ 2 u) (+ r u) v v) (* (- 1) (* (+ 2 u) (+ r u) (+ r u))))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x78 (+ r u)))
 (let ((?x149 (+ 2 u)))
 (let ((?x176 (* (+ (* (- 1) (* ?x149 ?x149 ?x149 ?x78 ?x78 ?x78 v v)) ?x626) ?x230 (+ (- 2) (* ?x149 ?x149 ?x78) ?x350) ?x169)))
 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) (or (not (= ?x176 0)) $x968))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1697 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x479 (* (- 1) (* r r u))))
 (let ((?x412 (* (- 1) (* u v v v))))
 (let ((?x492 (* 6 (* r u v))))
 (let ((?x388 (* (- 4) (* u v))))
 (let ((?x377 (* r u)))
 (let ((?x378 (* 4 ?x377)))
 (let ((?x370 (* r u v v)))
 (let ((?x1676 (+ ?x370 ?x378 ?x388 ?x492 (* (- 3) (* u v v)) ?x412 ?x479 (* 2 (* v (* (- 1) v) u)))))
 (let ((?x556 (* (- 1) (* r r r u u u v v))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x637 (* (- 6) ?x45)))
 (let ((?x646 (* (- 12) v)))
 (let ((?x1556 (+ (- 8) ?x646 ?x637 ?x626 (* 12 (* r r u u u v v)) ?x556 (* (- 12) (* r u u u v v)) (* (- 4) (* r r r u u u)) (* 3 (* r r u u u v v v)) (* 12 (* r r u u u v)) (* (- 4) (* r r r u u u v)) (* (- 12) (* r u u u v v v)) (* (- 3) (* r u u u v v v v)) (* 4 (* u u u v v v)) (* 4 (* u u u v v v v)) (* u u u v v v v v))))
 (let ((?x333 (* r u u)))
 (let ((?x350 (* (- 1) u)))
 (let ((?x356 (+ ?x350 ?x333 (* (- 1) (* u u v)))))
 (let ((?x701 (* u u u)))
 (let ((?x727 (+ (- 2) ?x28 (* 3 u) (* 4 ?x43) ?x333 ?x378 ?x701)))
 (let ((?x820 (+ (* (- 2) ?x43) (* (- 2) ?x333) ?x370 (* (- 4) ?x377) (* 2 (* u v v)) ?x479 (* (- 1) ?x701) (* u u v v) (* 2 (* r v v)) (* (- 2) (* r r)))))
 (let ((?x962 (* (- 1) (* u u u u u u v v))))
 (let ((?x217 (+ ?x626 (* (- 18) (* r u u u u v v)) (* (- 8) (* u u u v v)) (* (- 6) (* r r r u u v v)) (* (- 8) (* r r r v v)) (* (- 24) (* r u u v v)) (* (- 18) (* r r u u u v v)) (* (- 12) (* u u u u v v)) (* (- 6) (* u u u u u v v)) ?x556 (* (- 36) (* r r u u v v)) (* (- 12) (* r r r u v v)) (* (- 36) (* r u u u v v)) (* (- 3) (* r r u u u u v v)) (* (- 3) (* r u u u u u v v)) ?x962 (* (- 24) (* r r u v v)))))
 (let (($x1138 (not (= (* ?x217 ?x820 ?x727 ?x210) 0))))
 (let (($x215 (= ?x210 0)))
 (let (($x1746 (and $x215 (or $x1138 (not (= (* ?x356 ?x1556 ?x1676 ?x210) 0))))))
 (let ((?x299 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x441 (+ (* (+ 2 v) (+ 2 v) (+ r (* (- 1) v)) u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x109 (* (- 1) v)))
 (let ((?x403 (+ r ?x109)))
 (let ((?x423 (+ 2 v)))
 (let ((?x464 (+ (* (- 1) (* ?x423 ?x423 ?x403 ?x403 ?x403 u u u)) (* (- 1) (* ?x423 ?x423 ?x423)))))
 (let ((?x169 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x230 (+ (* (+ 2 u) (+ r u) v v) (* (- 1) (* (+ 2 u) (+ r u) (+ r u))))))
 (let ((?x78 (+ r u)))
 (let ((?x149 (+ 2 u)))
 (let ((?x176 (* (+ (* (- 1) (* ?x149 ?x149 ?x149 ?x78 ?x78 ?x78 v v)) ?x626) ?x230 (+ (- 2) (* ?x149 ?x149 ?x78) ?x350) ?x169)))
 (let (($x636 (or (not (= ?x176 0)) (not (= (* (+ (* ?x403 u u) ?x350) ?x464 ?x441 ?x299) 0)))))
 (let (($x389 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) $x636)))
 (rewrite (= $x389 $x1746))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((r Int) (u Int) (v Int) )(! (let ((?x97 (* v v v)))
 (let ((?x82 (+ u 2)))
 (let ((?x78 (+ r u)))
 (let ((?x71 (- 1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x84 (+ (- (- (* 4 ?x78) (* 4 r00)) (* 2 u00)) (* 2 ?x82))))
 (let ((?x99 (* (- (+ (- (+ (- ?x84 ?x38) ?x41) (* ?x82 ?x82)) ?x45 ?x46) ?x48) (- (* ?x78 ?x82 ?x82) ?x82) (- (* ?x78 ?x82 v v) (* ?x78 ?x78 ?x82)) (- (* ?x71 ?x78 ?x78 ?x78 ?x82 ?x82 ?x82 v v) ?x97))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x74 (- (* ?x71 ?x52 ?x52 ?x52 u u u ?x57 ?x57) (* ?x57 ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x75 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- (* ?x52 u u) u) (- (* ?x52 u ?x57 ?x57) (* ?x52 ?x52 u)) ?x74)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x75 0)) (not (= ?x99 0))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x174 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x299 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x441 (+ (* (+ 2 v) (+ 2 v) (+ r (* (- 1) v)) u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x109 (* (- 1) v)))
 (let ((?x403 (+ r ?x109)))
 (let ((?x423 (+ 2 v)))
 (let ((?x464 (+ (* (- 1) (* ?x423 ?x423 ?x403 ?x403 ?x403 u u u)) (* (- 1) (* ?x423 ?x423 ?x423)))))
 (let (($x968 (not (= (* (+ (* ?x403 u u) (* (- 1) u)) ?x464 ?x441 ?x299) 0))))
 (let ((?x45 (* v v)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x169 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x350 (* (- 1) u)))
 (let ((?x230 (+ (* (+ 2 u) (+ r u) v v) (* (- 1) (* (+ 2 u) (+ r u) (+ r u))))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x78 (+ r u)))
 (let ((?x149 (+ 2 u)))
 (let ((?x176 (* (+ (* (- 1) (* ?x149 ?x149 ?x149 ?x78 ?x78 ?x78 v v)) ?x626) ?x230 (+ (- 2) (* ?x149 ?x149 ?x78) ?x350) ?x169)))
 (let (($x389 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) (or (not (= ?x176 0)) $x968))))
 (let ((?x82 (+ u 2)))
 (let ((?x71 (- 1)))
 (let ((?x38 (* 2 v)))
 (let ((?x84 (+ (- (- (* 4 ?x78) (* 4 r00)) (* 2 u00)) (* 2 ?x82))))
 (let ((?x99 (* (- (+ (- (+ (- ?x84 ?x38) ?x41) (* ?x82 ?x82)) ?x45 ?x46) ?x48) (- (* ?x78 ?x82 ?x82) ?x82) (- (* ?x78 ?x82 v v) (* ?x78 ?x78 ?x82)) (- (* ?x71 ?x78 ?x78 ?x78 ?x82 ?x82 ?x82 v v) ?x97))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x74 (- (* ?x71 ?x52 ?x52 ?x52 u u u ?x57 ?x57) (* ?x57 ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x75 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- (* ?x52 u u) u) (- (* ?x52 u ?x57 ?x57) (* ?x52 ?x52 u)) ?x74)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x103 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x75 0)) (not (= ?x99 0))))))
 (rewrite (= $x103 $x389)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x301 (mp (mp @x105 (quant-intro (proof-bind ?x174) (= $x104 $x688)) $x688) (rewrite (= $x688 $x688)) $x688)))
 (let ((@x1045 (mp (mp @x301 (quant-intro (proof-bind ?x1697) (= $x688 $x1695)) $x1695) (quant-intro (proof-bind ?x1038) (= $x1695 $x1417)) $x1417)))
 (let ((@x1265 (mp (mp~ @x1045 (sk (~ $x1417 $x1596)) $x1596) (rewrite (= $x1596 $x1178)) $x1178)))
 (let ((@x604 (and-elim @x1265 $x1573)))
 (let ((@x1646 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1573) $x190)) @x604 $x190)))
 (let (($x1314 (<= ?x1609 0)))
 (let ((@x1651 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1573) $x1314)) @x604 $x1314)))
 (let (($x1407 (not (<= ?x1390 0))))
 (let (($x189 (>= ?x1390 0)))
 (let (($x1618 (>= ?x1378 0)))
 (let (($x1617 (<= ?x1378 0)))
 (let ((@x1358 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1436 (not $x1617) (not $x1618))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1617)) @x1651 @x1646 false) $x1617) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1618)) @x1651 @x1646 false) $x1618) $x1436)))
 (let ((@x1400 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1396 $x1407 (not $x189))) (unit-resolution (and-elim @x1265 $x1393) @x1358 $x1389) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x189)) @x1651 @x1646 false) $x189) $x1407)))
 ((_ th-lemma arith farkas 1 1 1) @x1400 @x1651 @x1646 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        57
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             448
 :arith-nonlinear-bounds    40
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 75
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.83
 :memory                    3.27
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1220763
 :num-checks                1
 :propagations              14
 :rlimit-count              7217
 :time                      0.01
 :total-time                0.02)
