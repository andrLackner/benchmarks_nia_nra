unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x460 (* r!1 r!1)))
 (let ((?x342 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x284 (* (- 1) ?x36)))
 (let ((?x338 (* (- 2) x00)))
 (let ((?x175 (+ r00 ?x338 ?x284 (* 2 x!0) ?x342 ?x460)))
 (let (($x438 (<= ?x175 0)))
 (let (($x454 (= ?x175 0)))
 (let ((?x150 (+ x!0 ?x342)))
 (let ((?x357 (+ 1 r!1)))
 (let ((?x417 (+ (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150) (* (- 3) (* ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150)) (* 2 (* ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150)) (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150) (* r00 r00 ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150) (* r00 r00 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150) (* 2 (* x00 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150)) (* r00 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150) (* (- 1) (* r00 r00 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150)) (* 2 (* ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150 ?x150 ?x150)) (* (- 1) (* r00 r00 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150 ?x150)) (* (- 1) (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150)) (* (- 1) (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150)) (* (- 1) (* r00 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150)) (* ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150) (* (- 2) (* x00 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150)) (* ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150 ?x150) (* r00 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150 ?x150) (* (- 1) (* r00 ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150)) (* (- 2) (* x00 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150 ?x150)) (* (- 3) (* ?x357 ?x357 ?x357 ?x150 ?x150 ?x150 ?x150 ?x150 ?x150)) (* 2 (* x00 ?x357 ?x357 ?x357 ?x357 ?x150 ?x150 ?x150)))))
 (let (($x414 (= ?x417 0)))
 (let (($x490 (not $x414)))
 (let (($x433 (and $x454 $x490)))
 (let ((?x173 (+ ?x342 x!0)))
 (let ((?x345 (+ (* r00 r00 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173 ?x173) (* 3 (* ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173 ?x173)) (* r00 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173) (* (- 1) (* r00 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173)) (* r00 r00 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173) (* (- 1) (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173)) (* (- 1) (* ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173)) (* (- 2) (* x00 ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173)) (* (- 1) (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173)) (* r00 ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173) (* 2 (* x00 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173 ?x173)) (* (- 2) (* ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173)) (* 3 (* ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173)) (* (- 2) (* x00 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173)) (* (- 1) (* r00 r00 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173)) (* 2 (* x00 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173)) (* (- 1) (* ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173 ?x173)) (* (- 2) (* ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173 ?x173 ?x173)) (* (- 1) (* r00 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173 ?x173)) (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173) (* ?x357 ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173 ?x173 ?x173) (* (- 1) (* r00 r00 ?x357 ?x357 ?x357 ?x357 ?x173 ?x173 ?x173)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x141 (* (- 1) r00)))
 (let (($x138 (and (= (+ r!1 (* (- 2) x!0) ?x141 (* (- 1) ?x460) ?x35 ?x36) 0) (not (= ?x345 0)))))
 (let (($x95 (exists ((r Int) (x Int) )(! (let ((?x91 (* (- 1) r)))
 (let ((?x155 (+ ?x91 x)))
 (let ((?x149 (+ 1 r)))
 (let ((?x525 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)))
 (let ((?x483 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)))
 (let ((?x448 (* (- 2) (* ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x258 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x276 (* (- 2) (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x467 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155))))
 (let ((?x287 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x498 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x164 (+ (* r00 r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155) (* 3 (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155) ?x498 ?x287 (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)) ?x467 (* r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155) (* 2 (* x00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) ?x276 (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* 2 (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x258 ?x448 (* (- 1) (* r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) ?x483 ?x525 (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x141 (* (- 1) r00)))
 (let (($x144 (= (+ r (* (- 2) x) ?x141 (* (- 1) (* r r)) ?x35 ?x36) 0)))
 (and $x144 (not (= ?x164 0))))))))))))))))))) :qid k!26))
 ))
 (let (($x463 (exists ((r Int) (x Int) )(! (let ((?x91 (* (- 1) r)))
 (let ((?x330 (+ x ?x91)))
 (let ((?x149 (+ 1 r)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* 2 (* x00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* 3 (* ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330) (* r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330) (* r00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330) (* r00 r00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* r00 r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330))))
 (let ((?x36 (* r00 r00)))
 (let ((?x284 (* (- 1) ?x36)))
 (let ((?x338 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x91 r00 ?x30 ?x32 ?x338 ?x284) 0) (not (= ?x547 0)))))))))))) :qid k!26))
 ))
 (let ((?x340 (lambda ((r Int) (x Int) )(let ((?x91 (* (- 1) r)))
 (let ((?x155 (+ ?x91 x)))
 (let ((?x149 (+ 1 r)))
 (let ((?x525 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)))
 (let ((?x483 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)))
 (let ((?x448 (* (- 2) (* ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x258 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x276 (* (- 2) (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x467 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155))))
 (let ((?x287 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x498 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x164 (+ (* r00 r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155) (* 3 (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155) ?x498 ?x287 (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)) ?x467 (* r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155) (* 2 (* x00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) ?x276 (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* 2 (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x258 ?x448 (* (- 1) (* r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) ?x483 ?x525 (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x141 (* (- 1) r00)))
 (let (($x144 (= (+ r (* (- 2) x) ?x141 (* (- 1) (* r r)) ?x35 ?x36) 0)))
 (let (($x128 (and $x144 (not (= ?x164 0)))))
 (let ((?x330 (+ x ?x91)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* 2 (* x00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* 3 (* ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330) (* r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330) (* r00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330) (* r00 r00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* r00 r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330))))
 (let ((?x284 (* (- 1) ?x36)))
 (let ((?x338 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x171 (and (= (+ ?x91 r00 ?x30 ?x32 ?x338 ?x284) 0) (not (= ?x547 0)))))
 (rewrite (= $x171 $x128)))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x47 (- (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 x00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x49 (- (- ?x47 (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* 2 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00))))
 (let ((?x56 (- (+ ?x49 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (- ?x56 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x64 (+ (- ?x58 (* ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 3 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42) (* 3 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x70 (- (- ?x64 (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x72 (- (- ?x70 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x77 (+ ?x72 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42) (* ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x81 (+ (- ?x77 (* ?x41 ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x81 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x127 (lambda ((r Int) (x Int) )(let ((?x91 (* (- 1) r)))
 (let ((?x330 (+ x ?x91)))
 (let ((?x149 (+ 1 r)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* 2 (* x00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 2) (* ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* 3 (* ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330) (* r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330) (* r00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330) (* r00 r00 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330 ?x330 ?x330) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330)) (* r00 r00 ?x149 ?x149 ?x149 ?x330 ?x330 ?x330 ?x330))))
 (let ((?x36 (* r00 r00)))
 (let ((?x284 (* (- 1) ?x36)))
 (let ((?x338 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x171 (and (= (+ ?x91 r00 ?x30 ?x32 ?x338 ?x284) 0) (not (= ?x547 0)))))
 (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x47 (- (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 x00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x49 (- (- ?x47 (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* 2 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00))))
 (let ((?x56 (- (+ ?x49 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (- ?x56 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x64 (+ (- ?x58 (* ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 3 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42) (* 3 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x70 (- (- ?x64 (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x72 (- (- ?x70 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x77 (+ ?x72 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42) (* ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x81 (+ (- ?x77 (* ?x41 ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x85 (and (= ?x38 0) (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x171))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x229 (mp (mp @x87 (quant-intro (proof-bind ?x127) (= $x86 $x463)) $x463) (rewrite (= $x463 $x463)) $x463)))
 (let ((@x135 (mp~ (mp @x229 (quant-intro (proof-bind ?x340) (= $x463 $x95)) $x95) (sk (~ $x95 $x138)) $x138)))
 (let ((@x114 (mp @x135 (rewrite (= $x138 $x433)) $x433)))
 (let ((@x325 (and-elim @x114 $x454)))
 (let ((@x358 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x454) $x438)) @x325 $x438)))
 (let (($x315 (>= ?x175 0)))
 (let ((@x107 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x454) $x315)) @x325 $x315)))
 (let (($x106 (not (>= ?x417 0))))
 (let (($x139 (<= ?x417 0)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x414 (not $x139) $x106)) (and-elim @x114 $x490) (or (not $x139) $x106))))
 (let ((@x310 (unit-resolution @x332 (lemma ((_ th-lemma arith) (hypothesis (not $x139)) @x107 @x358 false) $x139) $x106)))
 ((_ th-lemma arith) @x310 @x107 @x358 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             222
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 38
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.73
 :memory                    19.15
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                671900
 :num-checks                1
 :propagations              4
 :rlimit-count              9158
 :time                      0.01
 :total-time                0.03)
