unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x698 (* b!2 x!0)))
 (let ((?x553 (to_real ?x698)))
 (let ((?x278 (+ ?x553 (* (- 1.0) (* (to_real b!2) (to_real x!0))))))
 (let (($x689 (<= ?x278 0.0)))
 (let (($x849 (= ?x278 0.0)))
 (let ((@x856 (lemma (unit-resolution ((_ th-lemma arith) $x849) (hypothesis (not $x849)) false) $x849)))
 (let ((@x693 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x849) $x689)) @x856 $x689)))
 (let (($x268 (>= ?x278 0.0)))
 (let ((@x87 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x849) $x268)) @x856 $x268)))
 (let ((?x729 (to_real x!0)))
 (let ((?x690 (to_real r!1)))
 (let ((?x59 (to_real r00)))
 (let ((?x241 (to_real b!2)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x156 (+ (* 4.0 (* ?x140 ?x141 ?x690 ?x690 ?x690 ?x729 ?x729)) (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x690 ?x690 ?x690 ?x729 ?x729)) (* (- (/ 1.0 2.0)) (* ?x59 ?x241 ?x241 ?x241 ?x690 ?x690 ?x729 ?x729)) (* (- (/ 1.0 2.0)) (* ?x140 ?x141 ?x241 ?x241 ?x241 ?x690 ?x690 ?x729 ?x729)) (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x241 ?x690 ?x690 ?x729 ?x729 ?x729)) (* (- 4.0) (* ?x241 ?x690 ?x690 ?x690 ?x729 ?x729 ?x729)) (* (- 4.0) (* ?x690 ?x690 ?x690 ?x690 ?x729 ?x729)) (* 4.0 (* ?x59 ?x690 ?x690 ?x690 ?x729 ?x729)))))
 (let (($x629 (>= ?x156 0.0)))
 (let (($x444 (not $x629)))
 (let (($x628 (<= ?x156 0.0)))
 (let ((?x82 (* b00 x00)))
 (let ((?x169 (+ r00 ?x82 (* (- 1) ?x698) (* (- 1) r!1))))
 (let (($x233 (>= ?x169 0)))
 (let (($x620 (= 0 ?x169)))
 (let ((@x601 (symm (commutativity (= $x620 (= ?x169 0))) (= (= ?x169 0) $x620))))
 (let (($x170 (= ?x169 0)))
 (let ((?x379 (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x729))))
 (let ((?x754 (* (/ 1.0 8.0) (* ?x241 ?x241 ?x241))))
 (let ((?x795 (* (- 1.0) (* ?x690 ?x690 ?x690))))
 (let ((?x766 (* (/ 3.0 2.0) (* ?x241 ?x690 ?x690))))
 (let ((?x791 (* (- (/ 3.0 4.0)) (* ?x241 ?x241 ?x690))))
 (let ((?x210 (* (/ 1.0 8.0) (* ?x241 ?x241 ?x241 ?x241 ?x241 ?x729 ?x729))))
 (let ((?x744 (* (/ 1.0 8.0) (* ?x241 ?x241 ?x241 ?x690 ?x690))))
 (let ((?x708 (* (- (/ 1.0 8.0)) (* ?x241 ?x241 ?x241 ?x241 ?x690))))
 (let ((?x700 (* (/ 1.0 32.0) (* ?x241 ?x241 ?x241 ?x241 ?x241))))
 (let ((?x159 (* (/ 1.0 8.0) (* ?x241 ?x241 ?x241 ?x241 ?x241 ?x729))))
 (let ((?x237 (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x729 ?x729))))
 (let ((?x579 (+ ?x237 (* (- 3.0) (* ?x241 ?x241 ?x690 ?x729)) (* 6.0 (* ?x241 ?x690 ?x690 ?x729)) ?x159 (* (- (/ 1.0 2.0)) (* ?x241 ?x241 ?x241 ?x241 ?x690 ?x729 ?x729)) (* (- 3.0) (* ?x241 ?x241 ?x690 ?x729 ?x729)) (* (- 4.0) (* ?x690 ?x690 ?x690 ?x729)) (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x690 ?x690 ?x729 ?x729)) (* (- 4.0) (* ?x690 ?x690 ?x690 ?x729 ?x729)) (* 6.0 (* ?x241 ?x690 ?x690 ?x729 ?x729)) (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x690 ?x690 ?x729)) ?x700 ?x708 ?x744 ?x210 (* (- (/ 1.0 2.0)) (* ?x241 ?x241 ?x241 ?x241 ?x690 ?x729)) ?x791 ?x766 ?x795 ?x754 ?x379)))
 (let ((?x591 (* ?x579 (+ (* (- 1.0) ?x59) (* (- 1.0) (* ?x140 ?x141)) (* ?x241 ?x729) ?x690))))
 (let (($x630 (= ?x591 0.0)))
 (let (($x593 (not $x630)))
 (let (($x501 (= ?x156 0.0)))
 (let (($x307 (not $x501)))
 (let (($x588 (or $x307 $x593)))
 (let (($x608 (and $x170 $x588)))
 (let ((?x244 (+ (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x729 ?x729 ?x690 ?x690)) (* (- 4.0) (* ?x729 ?x729 ?x690 ?x690 ?x690)) ?x700 ?x708 ?x744 ?x159 (* (- (/ 1.0 2.0)) (* ?x241 ?x241 ?x241 ?x241 ?x729 ?x690)) (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x729 ?x690 ?x690)) ?x210 (* (- (/ 1.0 2.0)) (* ?x241 ?x241 ?x241 ?x241 ?x729 ?x729 ?x690)) ?x754 ?x791 ?x766 ?x795 ?x379 (* (- 3.0) (* ?x241 ?x241 ?x729 ?x690)) (* 6.0 (* ?x241 ?x729 ?x690 ?x690)) (* (- 4.0) (* ?x729 ?x690 ?x690 ?x690)) ?x237 (* (- 3.0) (* ?x241 ?x241 ?x729 ?x729 ?x690)) (* 6.0 (* ?x241 ?x729 ?x729 ?x690 ?x690)))))
 (let ((?x302 (* ?x244 (+ ?x690 (* (- 1.0) ?x59) (* (- 1.0) (* ?x140 ?x141)) (* ?x241 ?x729)))))
 (let ((?x735 (+ (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x729 ?x729 ?x690 ?x690 ?x690)) (* (- (/ 1.0 2.0)) (* ?x241 ?x241 ?x241 ?x729 ?x729 ?x690 ?x690 ?x59)) (* (- (/ 1.0 2.0)) (* ?x241 ?x241 ?x241 ?x729 ?x729 ?x690 ?x690 ?x140 ?x141)) (* (/ 1.0 2.0) (* ?x241 ?x241 ?x241 ?x241 ?x729 ?x729 ?x729 ?x690 ?x690)) (* (- 4.0) (* ?x729 ?x729 ?x690 ?x690 ?x690 ?x690)) (* 4.0 (* ?x729 ?x729 ?x690 ?x690 ?x690 ?x59)) (* 4.0 (* ?x729 ?x729 ?x690 ?x690 ?x690 ?x140 ?x141)) (* (- 4.0) (* ?x241 ?x729 ?x729 ?x729 ?x690 ?x690 ?x690)))))
 (let (($x288 (and (= (+ r!1 (* (- 1) r00) ?x698 (* (- 1) ?x82)) 0) (or (not (= ?x735 0.0)) (not (= ?x302 0.0))))))
 (let (($x428 (exists ((b Int) (r Int) (x Int) )(! (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x47 (to_real r)))
 (let ((?x829 (* (- 3.0) (* (to_real b) (to_real b) (to_real x) (to_real x) ?x47))))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x223 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x828 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) ?x223 (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x47)) (* (/ 3.0 2.0) (* ?x40 ?x47 ?x47)) (* (- 1.0) (* ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43)) (* (- 3.0) (* ?x40 ?x40 ?x43 ?x47)) (* 6.0 (* ?x40 ?x43 ?x47 ?x47)) (* (- 4.0) (* ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43)) ?x829 (* 6.0 (* ?x40 ?x43 ?x43 ?x47 ?x47)))))
 (let ((?x320 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x59)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x140 ?x141)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x59)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x140 ?x141)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)))))
 (let (($x110 (not (= ?x320 0.0))))
 (let (($x219 (or $x110 (not (= (* ?x828 (+ ?x47 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x118 $x219))))))))))))))))) :qid k!28))
 ))
 (let (($x472 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x793 (+ ?x145 ?x47 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x426 (+ ?x47 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x787 (+ 1.0 ?x282)))
 (let ((?x798 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x787 ?x787 ?x426 ?x426)) (* (- 1.0) (* ?x787 ?x787 ?x426 ?x426 ?x426)))))
 (let ((?x223 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x227 (* (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) ?x223) (+ ?x145 ?x47 ?x131 (* ?x43 ?x40)))))
 (let (($x342 (or (not (= ?x227 0.0)) (not (= (* ?x798 ?x793) 0.0)))))
 (let (($x400 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x400 $x342)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x360 (lambda ((b Int) (r Int) (x Int) )(let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x47 (to_real r)))
 (let ((?x829 (* (- 3.0) (* (to_real b) (to_real b) (to_real x) (to_real x) ?x47))))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x223 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x828 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) ?x223 (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x47)) (* (/ 3.0 2.0) (* ?x40 ?x47 ?x47)) (* (- 1.0) (* ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43)) (* (- 3.0) (* ?x40 ?x40 ?x43 ?x47)) (* 6.0 (* ?x40 ?x43 ?x47 ?x47)) (* (- 4.0) (* ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43)) ?x829 (* 6.0 (* ?x40 ?x43 ?x43 ?x47 ?x47)))))
 (let ((?x320 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x59)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x140 ?x141)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x59)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x140 ?x141)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)))))
 (let (($x110 (not (= ?x320 0.0))))
 (let (($x219 (or $x110 (not (= (* ?x828 (+ ?x47 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x548 (and $x118 $x219)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x793 (+ ?x145 ?x47 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x426 (+ ?x47 ?x167)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x787 (+ 1.0 ?x282)))
 (let ((?x798 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x787 ?x787 ?x426 ?x426)) (* (- 1.0) (* ?x787 ?x787 ?x426 ?x426 ?x426)))))
 (let ((?x227 (* (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) ?x223) (+ ?x145 ?x47 ?x131 (* ?x43 ?x40)))))
 (let (($x342 (or (not (= ?x227 0.0)) (not (= (* ?x798 ?x793) 0.0)))))
 (let (($x400 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x404 (and $x400 $x342)))
 (rewrite (= $x404 $x548))))))))))))))))))))))))))))))
 ))
 (let (($x367 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x793 (+ ?x145 ?x47 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x426 (+ ?x47 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x787 (+ 1.0 ?x282)))
 (let ((?x798 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x787 ?x787 ?x426 ?x426)) (* (- 1.0) (* ?x787 ?x787 ?x426 ?x426 ?x426)))))
 (let ((?x223 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x227 (* (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) ?x223) (+ ?x145 ?x47 ?x131 (* ?x43 ?x40)))))
 (let (($x342 (or (not (= ?x227 0.0)) (not (= (* ?x798 ?x793) 0.0)))))
 (let (($x384 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x384 $x342)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x355 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x793 (+ ?x145 ?x47 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x426 (+ ?x47 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x787 (+ 1.0 ?x282)))
 (let ((?x798 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x787 ?x787 ?x426 ?x426)) (* (- 1.0) (* ?x787 ?x787 ?x426 ?x426 ?x426)))))
 (let ((?x223 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x227 (* (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) ?x223) (+ ?x145 ?x47 ?x131 (* ?x43 ?x40)))))
 (let (($x342 (or (not (= ?x227 0.0)) (not (= (* ?x798 ?x793) 0.0)))))
 (let (($x400 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x404 (and $x400 $x342)))
 (let (($x384 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x786 (and $x384 $x342)))
 (rewrite (= $x786 $x404)))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((b Int) (r Int) (x Int) )(! (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x47 (to_real r)))
 (let ((?x56 (- ?x47 ?x42)))
 (let ((?x68 (- (* ?x42 ?x42 ?x42 ?x56 ?x56 ?x63 ?x63) (* ?x56 ?x56 ?x56 ?x63 ?x63))))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) (to_real r00)) (* ?x42 ?x63))))
 (let ((?x51 (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x41 (to_real x) ?x41 (to_real x)) (to_real (* r r r 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= (* ?x65 ?x68) ?x53)))))))))))))))) :qid k!28))
 ))
 (let ((?x353 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x793 (+ ?x145 ?x47 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x426 (+ ?x47 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x282 (* 2.0 ?x43)))
 (let ((?x787 (+ 1.0 ?x282)))
 (let ((?x798 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x787 ?x787 ?x426 ?x426)) (* (- 1.0) (* ?x787 ?x787 ?x426 ?x426 ?x426)))))
 (let ((?x223 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x227 (* (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) ?x223) (+ ?x145 ?x47 ?x131 (* ?x43 ?x40)))))
 (let (($x342 (or (not (= ?x227 0.0)) (not (= (* ?x798 ?x793) 0.0)))))
 (let (($x384 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x786 (and $x384 $x342)))
 (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x56 (- ?x47 ?x42)))
 (let ((?x68 (- (* ?x42 ?x42 ?x42 ?x56 ?x56 ?x63 ?x63) (* ?x56 ?x56 ?x56 ?x63 ?x63))))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) ?x59) (* ?x42 ?x63))))
 (let ((?x51 (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43) (to_real (* r r r 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x73 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= (* ?x65 ?x68) ?x53))))))
 (rewrite (= $x73 $x786))))))))))))))))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x461 (mp (mp @x75 (quant-intro (proof-bind ?x353) (= $x74 $x367)) $x367) (rewrite (= $x367 $x367)) $x367)))
 (let ((@x773 (mp (mp @x461 (quant-intro (proof-bind ?x355) (= $x367 $x472)) $x472) (quant-intro (proof-bind ?x360) (= $x472 $x428)) $x428)))
 (let ((@x800 (mp (mp~ @x773 (sk (~ $x428 $x288)) $x288) (rewrite (= $x288 $x608)) $x608)))
 (let ((@x522 (mp (and-elim @x800 $x170) @x601 $x620)))
 (let ((@x610 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x620) $x233)) @x522 $x233)))
 (let (($x622 (<= ?x169 0)))
 (let ((@x618 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x620) $x622)) @x522 $x622)))
 (let ((@x694 (unit-resolution ((_ th-lemma arith) (or (not $x622) $x628 (not $x233) (not $x689) (not $x268))) @x618 @x610 (hypothesis (not $x628)) @x87 @x693 false)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x319 (* ?x241 ?x729)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x640 (+ ?x145 ?x319 ?x690 ?x131)))
 (let (($x155 (= 0.0 ?x640)))
 (let (($x506 (>= ?x640 0.0)))
 (let ((?x580 (+ ?x142 (* (- 1.0) (to_real ?x82)))))
 (let (($x578 (<= ?x580 0.0)))
 (let (($x582 (= 0.0 ?x580)))
 (let ((@x585 (symm (commutativity (= $x582 (= ?x580 0.0))) (= (= ?x580 0.0) $x582))))
 (let ((@x586 (mp ((_ th-lemma arith) (= ?x580 0.0)) @x585 $x582)))
 (let ((?x297 (+ (* (- 1.0) ?x553) ?x319)))
 (let (($x574 (>= ?x297 0.0)))
 (let (($x567 (= ?x297 0.0)))
 (let ((@x597 ((_ th-lemma arith) $x567)))
 (let ((@x627 ((_ th-lemma arith) (hypothesis (not $x506)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x567) $x574)) @x597 $x574) @x618 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x582) $x578)) @x586 $x578) false)))
 (let (($x126 (<= ?x640 0.0)))
 (let (($x497 (>= ?x580 0.0)))
 (let (($x569 (<= ?x297 0.0)))
 (let ((@x592 ((_ th-lemma arith) (hypothesis (not $x126)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x567) $x569)) @x597 $x569) @x610 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x582) $x497)) @x586 $x497) false)))
 (let ((@x79 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x155 (not $x126) (not $x506))) (lemma @x592 $x126) (lemma @x627 $x506) $x155)))
 (let (($x127 (= ?x640 0.0)))
 (let (($x633 (not $x127)))
 (let ((@x642 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x633 $x630)) (hypothesis $x593) $x633) (symm (hypothesis $x155) $x127) false)))
 (let ((@x722 (unit-resolution (and-elim @x800 $x588) (unit-resolution (lemma @x642 (or (not $x155) $x630)) @x79 $x630) $x307)))
 (let ((@x662 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x501 (not $x628) $x444)) @x722 (or (not $x628) $x444))))
 (unit-resolution ((_ th-lemma arith) (or (not $x622) $x629 (not $x233) (not $x689) (not $x268))) @x618 @x610 (unit-resolution @x662 (lemma @x694 $x628) $x444) @x87 @x693 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       169
 :arith-eq-adapter                264
 :arith-bound-propagations-cheap  162
 :arith-bound-propagations-lp     44
 :arith-branch                    5
 :arith-conflicts                 269
 :arith-cube-calls                1
 :arith-diseq                     305
 :arith-gcd-calls                 12
 :arith-grobner-calls             8
 :arith-grobner-conflicts         3
 :arith-horner-calls              8
 :arith-horner-cross-nested-forms 12
 :arith-lower                     182
 :arith-make-feasible             149
 :arith-max-columns               119
 :arith-max-rows                  67
 :arith-nla-explanations          341
 :arith-nla-lemmas                263
 :arith-patches                   12
 :arith-patches-success           7
 :arith-propagations              162
 :arith-upper                     219
 :conflicts                       17
 :decisions                       637
 :del-clause                      955
 :final-checks                    64
 :max-memory                      7.94
 :memory                          3.18
 :mk-bool-var                     1339
 :mk-clause                       1304
 :num-allocs                      120282179
 :num-checks                      1
 :propagations                    764
 :rlimit-count                    15321
 :time                            0.35
 :total-time                      0.35)
