unsat
((set-logic NRA)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(declare-fun a!8 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x165 (+ (* 2.0 (* b!7 y!5)) (* (- 1.0) (* a!8 d!6)) (* (- 2.0) (* y00 b!7)) (* a00 d!6))))
 (let (($x115 (>= ?x165 0.0)))
 (let (($x112 (= 0.0 ?x165)))
 (let ((@x388 (symm (commutativity (= $x112 (= ?x165 0.0))) (= (= ?x165 0.0) $x112))))
 (let (($x166 (= ?x165 0.0)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x266 (= (+ ?x30 ?x84 (* (- 1.0) (* d00 a!8)) (* 2.0 (* b00 y!5))) 0.0)))
 (let ((?x154 (* (- (/ 1.0 2.0)) (* a00 a!8 d!6 d!6 b!7 b!7))))
 (let ((?x215 (* (- 1.0) (* a!8 d!6 b!7 b!7 b!7 y!5))))
 (let ((?x198 (* y00 a!8 d!6 b!7 b!7 b!7)))
 (let ((?x395 (* (/ 1.0 2.0) (* a!8 a!8 d!6 d!6 b!7 b!7))))
 (let ((?x257 (+ (* y00 d!6 b!7 b!7 b!7 b!7) ?x395 (* (/ 1.0 2.0) (* a!8 d!6 d!6 b!7 b!7 b!7)) ?x198 ?x215 ?x154 (* (- (/ 1.0 2.0)) (* a00 d!6 d!6 b!7 b!7 b!7)) (* (- 1.0) (* d!6 b!7 b!7 b!7 b!7 y!5)))))
 (let (($x398 (= ?x257 0.0)))
 (let ((?x203 (+ ?x395 ?x198 ?x215 ?x154)))
 (let (($x412 (= ?x203 0.0)))
 (let (($x219 (not $x412)))
 (let (($x254 (or $x219 (not $x398))))
 (let (($x380 (and $x254 $x266 (= (+ (* d00 b!7) (* (- 1.0) (* b00 d!6))) 0.0) $x166)))
 (let ((?x138 (+ (* d!6 a!8) (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x404 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x84 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x151 (* (- (/ 1.0 2.0)) (* d!6 d!6 b!7 b!7 a!8 a00))))
 (let ((?x315 (* d!6 b!7 b!7 b!7 a!8 y00)))
 (let ((?x237 (* (- 1.0) (* y!5 d!6 b!7 b!7 b!7 a!8))))
 (let ((?x169 (* (/ 1.0 2.0) (* d!6 d!6 b!7 b!7 a!8 a!8))))
 (let ((?x246 (+ ?x169 ?x237 ?x315 ?x151 (* (/ 1.0 2.0) (* d!6 d!6 b!7 b!7 b!7 a!8)) (* (- 1.0) (* y!5 d!6 b!7 b!7 b!7 b!7)) (* d!6 b!7 b!7 b!7 b!7 y00) (* (- (/ 1.0 2.0)) (* d!6 d!6 b!7 b!7 b!7 a00)))))
 (let (($x382 (and (or (not (= (+ ?x169 ?x237 ?x315 ?x151) 0.0)) (not (= ?x246 0.0))) $x404 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x138 0.0))))
 (let (($x191 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let (($x161 (= (+ ?x101 ?x126 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x116 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x84 (* 2.0 (* y b00))) 0.0)))
 (let ((?x373 (* d b b b b y00)))
 (let ((?x255 (* d d b b a a00)))
 (let ((?x397 (* (- (/ 1.0 2.0)) ?x255)))
 (let ((?x252 (* d b b b a y00)))
 (let ((?x248 (* y d b b b a)))
 (let ((?x118 (* (- 1.0) ?x248)))
 (let ((?x244 (* d d b b a a)))
 (let ((?x391 (* (/ 1.0 2.0) ?x244)))
 (let ((?x265 (+ ?x391 ?x118 ?x252 ?x397 (* (/ 1.0 2.0) (* d d b b b a)) (* (- 1.0) (* y d b b b b)) ?x373 (* (- (/ 1.0 2.0)) (* d d b b b a00)))))
 (and (or (not (= (+ ?x391 ?x118 ?x252 ?x397) 0.0)) (not (= ?x265 0.0))) $x116 $x87 $x161)))))))))))))))))) :qid k!33))
 ))
 (let (($x296 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let (($x305 (= (+ ?x101 ?x126 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x159 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let (($x128 (= (+ ?x84 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x415 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x320 (* y00 b)))
 (let ((?x424 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x320 ?x415)))
 (let ((?x63 (+ a b)))
 (let ((?x406 (* (+ (* (/ 1.0 2.0) ?x101) (* (- 1.0) ?x107) ?x320 ?x415) d b b a)))
 (let (($x79 (or (not (= ?x406 0.0)) (not (= (* ?x63 ?x424 d b b) 0.0)))))
 (and $x79 $x128 $x159 $x305)))))))))))))))) :qid k!33))
 ))
 (let ((?x383 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let (($x161 (= (+ ?x101 ?x126 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x116 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x84 (* 2.0 (* y b00))) 0.0)))
 (let ((?x373 (* d b b b b y00)))
 (let ((?x255 (* d d b b a a00)))
 (let ((?x397 (* (- (/ 1.0 2.0)) ?x255)))
 (let ((?x252 (* d b b b a y00)))
 (let ((?x248 (* y d b b b a)))
 (let ((?x118 (* (- 1.0) ?x248)))
 (let ((?x244 (* d d b b a a)))
 (let ((?x391 (* (/ 1.0 2.0) ?x244)))
 (let ((?x265 (+ ?x391 ?x118 ?x252 ?x397 (* (/ 1.0 2.0) (* d d b b b a)) (* (- 1.0) (* y d b b b b)) ?x373 (* (- (/ 1.0 2.0)) (* d d b b b a00)))))
 (let (($x207 (and (or (not (= (+ ?x391 ?x118 ?x252 ?x397) 0.0)) (not (= ?x265 0.0))) $x116 $x87 $x161)))
 (let (($x305 (= (+ ?x101 ?x126 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x159 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x128 (= (+ ?x84 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x415 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x320 (* y00 b)))
 (let ((?x424 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x320 ?x415)))
 (let ((?x63 (+ a b)))
 (let ((?x406 (* (+ (* (/ 1.0 2.0) ?x101) (* (- 1.0) ?x107) ?x320 ?x415) d b b a)))
 (let (($x79 (or (not (= ?x406 0.0)) (not (= (* ?x63 ?x424 d b b) 0.0)))))
 (let (($x303 (and $x79 $x128 $x159 $x305)))
 (rewrite (= $x303 $x207))))))))))))))))))))))))))))))))
 ))
 (let (($x202 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x415 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x320 (* y00 b)))
 (let ((?x424 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x320 ?x415)))
 (let ((?x63 (+ a b)))
 (let ((?x406 (* (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x320 ?x415) d b b a)))
 (let (($x79 (or (not (= ?x406 0.0)) (not (= (* ?x63 ?x424 d b b) 0.0)))))
 (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let (($x305 (= (+ ?x101 ?x126 (* 2.0 ?x320) (* (- 1.0) ?x48)) 0.0)))
 (let (($x159 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let (($x128 (= (+ ?x84 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x128 $x159 $x305 $x79)))))))))))))))) :qid k!33))
 ))
 (let (($x75 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x63 (+ a b)))
 (let ((?x38 (- 1.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x70 (* (- (+ (- (* ?x63 ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58) ?x38 ?x63 ?x53 ?x53 ?x51)))
 (let ((?x60 (* (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) ?x38 a ?x53 ?x53 ?x51)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= ?x60 0.0)) (not (= ?x70 0.0))))))))))))))))) :qid k!33))
 ))
 (let ((?x318 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x415 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x320 (* y00 b)))
 (let ((?x424 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x320 ?x415)))
 (let ((?x63 (+ a b)))
 (let ((?x406 (* (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x320 ?x415) d b b a)))
 (let (($x79 (or (not (= ?x406 0.0)) (not (= (* ?x63 ?x424 d b b) 0.0)))))
 (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let (($x305 (= (+ ?x101 ?x126 (* 2.0 ?x320) (* (- 1.0) ?x48)) 0.0)))
 (let (($x159 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let (($x128 (= (+ ?x84 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x186 (and $x128 $x159 $x305 $x79)))
 (let ((?x51 (/ d 2.0)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x38 (- 1.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x70 (* (- (+ (- (* ?x63 ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58) ?x38 ?x63 ?x53 ?x53 ?x51)))
 (let ((?x60 (* (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) ?x38 a ?x53 ?x53 ?x51)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x74 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= ?x60 0.0)) (not (= ?x70 0.0))))))
 (rewrite (= $x74 $x186))))))))))))))))))))))))))))))
 ))
 (let ((@x76 (asserted $x75)))
 (let ((@x247 (mp (mp @x76 (quant-intro (proof-bind ?x318) (= $x75 $x202)) $x202) (rewrite (= $x202 $x296)) $x296)))
 (let ((@x182 (mp~ (mp @x247 (quant-intro (proof-bind ?x383) (= $x296 $x191)) $x191) (sk (~ $x191 $x382)) $x382)))
 (let ((@x263 (mp @x182 (rewrite (= $x382 $x380)) $x380)))
 (let ((@x389 (mp (and-elim @x263 $x166) @x388 $x112)))
 (let ((@x400 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x112) $x115)) @x389 $x115)))
 (let (($x426 (<= ?x165 0.0)))
 (let ((@x390 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x112) $x426)) @x389 $x426)))
 (let (($x157 (<= ?x203 0.0)))
 (let (($x498 (not $x157)))
 (let (($x416 (>= ?x203 0.0)))
 (let ((@x444 (unit-resolution ((_ th-lemma arith) (or (not $x426) (not $x115) $x416)) (hypothesis (not $x416)) @x390 @x400 false)))
 (let (($x403 (= 0.0 ?x203)))
 (let (($x514 (not $x403)))
 (let ((@x516 (monotonicity (symm (commutativity (= $x403 $x412)) (= $x412 $x403)) (= $x219 $x514))))
 (let (($x208 (= 0.0 ?x257)))
 (let (($x196 (<= ?x257 0.0)))
 (let ((@x229 (unit-resolution ((_ th-lemma arith) (or (not $x426) (not $x115) $x196)) (hypothesis (not $x196)) @x390 @x400 false)))
 (let (($x217 (>= ?x257 0.0)))
 (let ((@x251 (unit-resolution ((_ th-lemma arith) (or (not $x426) (not $x115) $x217)) (hypothesis (not $x217)) @x390 @x400 false)))
 (let ((@x504 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x208 (not $x196) (not $x217))) (lemma @x251 $x217) (or $x208 (not $x196)))))
 (let ((@x508 (mp (unit-resolution @x504 (lemma @x229 $x196) $x208) (commutativity (= $x208 $x398)) $x398)))
 (let ((@x519 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x403 $x498 (not $x416))) (mp (unit-resolution (and-elim @x263 $x254) @x508 $x219) @x516 $x514) (or $x498 (not $x416)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x426) $x157 (not $x115))) (unit-resolution @x519 (lemma @x444 $x416) $x498) @x390 @x400 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       28
 :arith-eq-adapter                21
 :arith-conflicts                 87
 :arith-diseq                     44
 :arith-grobner-calls             4
 :arith-grobner-conflicts         4
 :arith-horner-calls              5
 :arith-horner-conflicts          1
 :arith-horner-cross-nested-forms 8
 :arith-lower                     99
 :arith-make-feasible             107
 :arith-max-columns               45
 :arith-max-rows                  14
 :arith-nla-explanations          129
 :arith-nla-lemmas                86
 :arith-nra-calls                 1
 :arith-offset-eqs                1
 :arith-upper                     73
 :conflicts                       15
 :decisions                       105
 :del-clause                      104
 :final-checks                    77
 :max-memory                      18.27
 :memory                          17.34
 :mk-bool-var                     196
 :mk-clause                       134
 :num-allocs                      3598334
 :num-checks                      1
 :propagations                    74
 :rlimit-count                    5544
 :time                            0.07
 :total-time                      0.08)
