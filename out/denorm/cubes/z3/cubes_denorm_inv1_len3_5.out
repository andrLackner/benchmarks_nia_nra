unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x92 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x241 (>= ?x92 (- 6))))
 (let (($x93 (= ?x92 (- 6))))
 (let ((?x286 (* 11 (* c!3 c!3 m!1))))
 (let ((?x540 (* 30 (* c!3 c!3))))
 (let ((?x277 (* 11 (* k!2 k!2 m!1))))
 (let ((?x501 (* k!2 k!2 m!1 m!1)))
 (let ((?x436 (* k!2 k!2)))
 (let ((?x531 (* 30 ?x436)))
 (let ((?x429 (+ 6 m!1)))
 (let ((?x430 (+ 1 n!0)))
 (let ((?x536 (* (- 1) (* ?x430 ?x430 ?x430 ?x429 ?x429 (+ k!2 m!1)))))
 (let ((?x274 (* c!3 c!3 m!1 m!1)))
 (let ((?x231 (+ (* n!0 k!2 k!2 m!1 m!1) (* 2 (* n!0 k!2 c!3 m!1 m!1)) (* n!0 c!3 c!3 m!1 m!1) (* 11 (* n!0 k!2 k!2 m!1)) (* 11 (* n!0 c!3 c!3 m!1)) (* 30 (* n!0 c!3 c!3)) (* 2 (* k!2 c!3 m!1 m!1)) (* 22 (* k!2 c!3 m!1)) (* 60 (* k!2 c!3)) ?x274 (* 30 (* n!0 k!2 k!2)) ?x536 (* 60 (* n!0 k!2 c!3)) ?x531 (* 22 (* n!0 k!2 c!3 m!1)) ?x501 ?x277 ?x540 ?x286)))
 (let ((?x249 (* (+ (- 6) (* (- 6) n!0) m!1) ?x231)))
 (let (($x486 (= ?x249 0)))
 (let (($x248 (not $x486)))
 (let (($x116 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x168 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 1) k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x350 (+ (* 9 n!0) (* (- 5) k!2) ?x436 (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let (($x154 (and $x93 (= ?x350 (- 4)) $x168 $x116 $x248)))
 (let ((?x433 (+ ?x531 ?x536 (* 11 (* c!3 c!3 m!1 n!0)) (* 22 (* c!3 k!2 m!1 n!0)) (* 11 (* k!2 k!2 m!1 n!0)) (* c!3 c!3 m!1 m!1 n!0) (* 2 (* c!3 k!2 m!1 m!1 n!0)) (* k!2 k!2 m!1 m!1 n!0) ?x540 (* 60 (* c!3 k!2)) ?x286 (* 22 (* c!3 k!2 m!1)) ?x277 ?x274 (* 2 (* c!3 k!2 m!1 m!1)) ?x501 (* 30 (* c!3 c!3 n!0)) (* 60 (* c!3 k!2 n!0)) (* 30 (* k!2 k!2 n!0)))))
 (let (($x196 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x398 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x436) (* 9 (* c!3 n!0)))))
 (let (($x524 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x398 4) $x196 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x433) 0)))))
 (let (($x97 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x509 (* k k m m)))
 (let ((?x572 (* 2 (* c k m m))))
 (let ((?x496 (* c c m m)))
 (let ((?x440 (* k k m m n)))
 (let ((?x577 (* 2 (* c k m m n))))
 (let ((?x437 (* c c m m n)))
 (let ((?x592 (* 11 (* k k m n))))
 (let ((?x589 (* 11 (* c c m n))))
 (let ((?x78 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x293 (* (- 1) (* ?x317 ?x317 ?x317 ?x363 ?x363 ?x78))))
 (let ((?x612 (+ (* 30 (* k k)) ?x293 ?x589 (* 22 (* c k m n)) ?x592 ?x437 ?x577 ?x440 (* 30 (* c c)) (* 60 (* c k)) (* 11 (* c c m)) (* 22 (* c k m)) (* 11 (* k k m)) ?x496 ?x572 ?x509 (* 30 (* c c n)) (* 60 (* c k n)) (* 30 (* k k n)))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x612) 0))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x334 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x78 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x293 (* (- 1) (* ?x317 ?x317 ?x317 ?x363 ?x363 ?x78))))
 (let ((?x232 (+ (* (- 1) (* ?x317 ?x363 (+ c k) (+ c k))) (* ?x317 ?x363 ?x363 (+ c k) (+ c k)) ?x293)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x240 (not (= (* ?x117 ?x232) 0))))
 (let (($x346 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x279 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x279 $x346 $x240))))))))))))))))) :qid k!34))
 ))
 (let ((?x91 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x509 (* k k m m)))
 (let ((?x572 (* 2 (* c k m m))))
 (let ((?x496 (* c c m m)))
 (let ((?x440 (* k k m m n)))
 (let ((?x577 (* 2 (* c k m m n))))
 (let ((?x437 (* c c m m n)))
 (let ((?x592 (* 11 (* k k m n))))
 (let ((?x589 (* 11 (* c c m n))))
 (let ((?x78 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x293 (* (- 1) (* ?x317 ?x317 ?x317 ?x363 ?x363 ?x78))))
 (let ((?x612 (+ (* 30 (* k k)) ?x293 ?x589 (* 22 (* c k m n)) ?x592 ?x437 ?x577 ?x440 (* 30 (* c c)) (* 60 (* c k)) (* 11 (* c c m)) (* 22 (* c k m)) (* 11 (* k k m)) ?x496 ?x572 ?x509 (* 30 (* c c n)) (* 60 (* c k n)) (* 30 (* k k n)))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x243 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x612) 0)))))
 (let ((?x232 (+ (* (- 1) (* ?x317 ?x363 (+ c k) (+ c k))) (* ?x317 ?x363 ?x363 (+ c k) (+ c k)) ?x293)))
 (let (($x240 (not (= (* ?x117 ?x232) 0))))
 (let (($x346 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x279 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x533 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x279 $x346 $x240)))
 (rewrite (= $x533 $x243)))))))))))))))))))))))))))))))))
 ))
 (let (($x244 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x78 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x293 (* (- 1) (* ?x317 ?x317 ?x317 ?x363 ?x363 ?x78))))
 (let ((?x232 (+ (* (- 1) (* ?x317 ?x363 (+ c k) (+ c k))) (* ?x317 ?x363 ?x363 (+ c k) (+ c k)) ?x293)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x240 (not (= (* ?x117 ?x232) 0))))
 (let (($x346 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x434 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x491 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= ?x491 (- 4)) $x434 $x346 $x240))))))))))))))) :qid k!34))
 ))
 (let ((?x402 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x78 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x293 (* (- 1) (* ?x317 ?x317 ?x317 ?x363 ?x363 ?x78))))
 (let ((?x232 (+ (* (- 1) (* ?x317 ?x363 (+ c k) (+ c k))) (* ?x317 ?x363 ?x363 (+ c k) (+ c k)) ?x293)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x240 (not (= (* ?x117 ?x232) 0))))
 (let (($x346 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x279 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x533 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x279 $x346 $x240)))
 (let (($x434 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x491 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x289 (and $x128 (= ?x491 (- 4)) $x434 $x346 $x240)))
 (rewrite (= $x289 $x533))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x78 (+ k m)))
 (let ((?x77 (+ (* (- 1) (+ c k) (+ c k) ?x74 ?x69) (* (+ c k) (+ c k) ?x74 ?x74 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x77 (* ?x78 ?x74 ?x74 ?x69 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x309 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x78 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x293 (* (- 1) (* ?x317 ?x317 ?x317 ?x363 ?x363 ?x78))))
 (let ((?x232 (+ (* (- 1) (* ?x317 ?x363 (+ c k) (+ c k))) (* ?x317 ?x363 ?x363 (+ c k) (+ c k)) ?x293)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x240 (not (= (* ?x117 ?x232) 0))))
 (let (($x346 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x434 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x491 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x289 (and $x128 (= ?x491 (- 4)) $x434 $x346 $x240)))
 (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x77 (+ (* (- 1) (+ c k) (+ c k) ?x74 ?x69) (* (+ c k) (+ c k) ?x74 ?x74 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x77 (* ?x78 ?x74 ?x74 ?x69 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x289))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x332 (mp (mp @x87 (quant-intro (proof-bind ?x309) (= $x86 $x244)) $x244) (rewrite (= $x244 $x244)) $x244)))
 (let ((@x459 (mp (mp @x332 (quant-intro (proof-bind ?x402) (= $x244 $x334)) $x334) (quant-intro (proof-bind ?x91) (= $x334 $x97)) $x97)))
 (let ((@x200 (mp (mp~ @x459 (sk (~ $x97 $x524)) $x524) (rewrite (= $x524 $x154)) $x154)))
 (let ((@x141 (and-elim @x200 $x93)))
 (let ((@x94 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x93) $x241)) @x141 $x241)))
 (let (($x481 (<= ?x92 (- 6))))
 (let ((@x510 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x93) $x481)) @x141 $x481)))
 (let (($x508 (not (<= ?x249 0))))
 (let (($x272 (>= ?x249 0)))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x486 $x508 (not $x272))) (and-elim @x200 $x248) (or $x508 (not $x272)))))
 (let ((@x236 (unit-resolution @x394 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x272)) @x510 @x94 false) $x272) $x508)))
 ((_ th-lemma arith farkas 1 1 1) @x236 @x510 @x94 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        28
 :arith-assert-upper        31
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           5
 :arith-ineq-splits         1
 :arith-max-min             180
 :arith-nonlinear-bounds    35
 :arith-num-rows            9
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      4
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 8
 :del-clause                16
 :final-checks              5
 :max-memory                3.61
 :memory                    3.14
 :mk-bool-var               26
 :mk-clause                 17
 :num-allocs                1122283
 :num-checks                1
 :propagations              10
 :rlimit-count              3587
 :time                      0.01
 :total-time                0.01)
