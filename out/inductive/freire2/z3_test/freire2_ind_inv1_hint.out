unsat
((set-logic NIA)
(declare-fun i!1 () Int)
(declare-fun i!0 () Int)
(proof
(let ((?x236 (inv i!1)))
 (let (($x2947 (<= ?x236 0)))
 (let (($x237 (= ?x236 0)))
 (let (($x238 (not $x237)))
 (let ((?x233 (+ 1 i!1)))
 (let ((?x234 (inv ?x233)))
 (let (($x235 (= ?x234 0)))
 (let (($x231 (>= i!1 0)))
 (let (($x232 (not $x231)))
 (let (($x239 (or $x232 $x235 $x238)))
 (let (($x240 (not $x239)))
 (let (($x710 (forall ((i Int) )(! (let ((?x58 (inv i)))
 (let (($x123 (= ?x58 0)))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (or $x129 $x123))))) :pattern ( (inv i) ) :qid k!63))
 ))
 (let (($x2804 (not $x710)))
 (let (($x217 (= (inv i!0) 0)))
 (let (($x180 (>= i!0 0)))
 (let (($x181 (not $x180)))
 (let (($x219 (or $x181 $x217)))
 (let (($x221 (not $x219)))
 (let (($x146 (forall ((i Int) )(! (let ((?x58 (inv i)))
 (let (($x123 (= ?x58 0)))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (or $x129 $x123))))) :qid k!63))
 ))
 (let (($x158 (not $x146)))
 (let ((@x195 (rewrite (= $x158 $x158))))
 (let (($x71 (forall ((i Int) )(! (let ((?x58 (inv i)))
 (let (($x123 (= ?x58 0)))
 (let (($x40 (>= i 0)))
 (=> $x40 $x123)))) :qid k!63))
 ))
 (let (($x77 (not $x71)))
 (let ((@x152 (mp (asserted $x77) (rewrite (= $x77 $x158)) $x158)))
 (let ((@x222 (mp~ (mp (mp (mp (mp @x152 @x195 $x158) @x195 $x158) @x195 $x158) @x195 $x158) (sk (~ $x158 $x221)) $x221)))
 (let (($x2809 (or $x2804 $x181 $x217)))
 (let ((@x2834 (mp ((_ quant-inst i!0) (or $x2804 $x219)) (rewrite (= (or $x2804 $x219) $x2809)) $x2809)))
 (let ((@x3750 (unit-resolution @x2834 (not-or-elim @x222 $x180) (not-or-elim @x222 (not $x217)) (hypothesis $x710) false)))
 (let ((?x153 (inv 0)))
 (let (($x154 (= ?x153 0)))
 (let (($x874 (not (= (+ (s 0) (* 6 (r 0)) (* (- 1) (s 1))) (- 3)))))
 (let (($x863 (not (= (+ (x 0) (* (- 1) (s 0)) (* (- 1) (x 1))) 0))))
 (let (($x224 (not $x154)))
 (let (($x903 (or $x224 $x863 $x874 (not (= (+ (r 0) (* (- 1) (r 1))) (- 1))))))
 (let (($x908 (not $x903)))
 (let (($x702 (forall ((i Int) )(! (let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let (($x167 (= (+ ?x28 ?x76 (* (- 1) (inv i)) ?x127 ?x151) 0)))
 (let (($x100 (= (+ ?x45 (* 6 (r i)) (* (- 1) (s (+ 1 i)))) (- 3))))
 (let (($x272 (or (not (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)) (not $x100) (not (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))) (not $x167))))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (or $x129 (not $x272)))))))))))))) :pattern ( (x i) ) :pattern ( (s i) ) :pattern ( (r i) ) :pattern ( (inv i) ) :qid k!51))
 ))
 (let (($x278 (forall ((i Int) )(! (let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let (($x167 (= (+ ?x28 ?x76 (* (- 1) (inv i)) ?x127 ?x151) 0)))
 (let (($x100 (= (+ ?x45 (* 6 (r i)) (* (- 1) (s (+ 1 i)))) (- 3))))
 (let (($x272 (or (not (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)) (not $x100) (not (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))) (not $x167))))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (or $x129 (not $x272)))))))))))))) :qid k!51))
 ))
 (let ((?x705 (lambda ((i Int) )(let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let (($x167 (= (+ ?x28 ?x76 (* (- 1) (inv i)) ?x127 ?x151) 0)))
 (let (($x100 (= (+ ?x45 (* 6 (r i)) (* (- 1) (s (+ 1 i)))) (- 3))))
 (let (($x272 (or (not (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)) (not $x100) (not (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))) (not $x167))))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (let (($x276 (or $x129 (not $x272))))
 (refl (= $x276 $x276))))))))))))))))
 ))
 (let (($x136 (forall ((i Int) )(! (let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let (($x167 (= (+ ?x28 ?x76 (* (- 1) (inv i)) ?x127 ?x151) 0)))
 (let (($x116 (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x100 (= (+ ?x45 (* 6 (r i)) (* (- 1) (s (+ 1 i)))) (- 3))))
 (let (($x83 (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x174 (and $x83 $x100 $x116 $x167)))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (or $x129 $x174))))))))))))))) :qid k!51))
 ))
 (let ((?x280 (lambda ((i Int) )(let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let (($x167 (= (+ ?x28 ?x76 (* (- 1) (inv i)) ?x127 ?x151) 0)))
 (let (($x100 (= (+ ?x45 (* 6 (r i)) (* (- 1) (s (+ 1 i)))) (- 3))))
 (let (($x272 (or (not (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)) (not $x100) (not (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))) (not $x167))))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (let (($x276 (or $x129 (not $x272))))
 (let (($x116 (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x83 (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x174 (and $x83 $x100 $x116 $x167)))
 (let (($x130 (or $x129 $x174)))
 (rewrite (= $x130 $x276))))))))))))))))))))
 ))
 (let ((?x184 (lambda ((i Int) )(let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let (($x167 (= (+ ?x28 ?x76 (* (- 1) (inv i)) ?x127 ?x151) 0)))
 (let (($x116 (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x100 (= (+ ?x45 (* 6 (r i)) (* (- 1) (s (+ 1 i)))) (- 3))))
 (let (($x83 (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x174 (and $x83 $x100 $x116 $x167)))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (let (($x130 (or $x129 $x174)))
 (refl (~ $x130 $x130))))))))))))))))))
 ))
 (let (($x96 (forall ((i Int) )(! (let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let ((?x58 (inv i)))
 (let (($x78 (and (= (x (+ 1 i)) (+ (x i) ?x76)) (= (s (+ 1 i)) (+ 3 ?x45 (* 6 (r i)))) (= (r (+ 1 i)) (+ 1 (r i))) (= ?x58 (+ ?x28 ?x76 ?x127 ?x151)))))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (or $x129 $x78)))))))))))) :qid k!51))
 ))
 (let ((?x201 (lambda ((i Int) )(let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let (($x167 (= (+ ?x28 ?x76 (* (- 1) (inv i)) ?x127 ?x151) 0)))
 (let (($x116 (= (+ (r i) (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x100 (= (+ ?x45 (* 6 (r i)) (* (- 1) (s (+ 1 i)))) (- 3))))
 (let (($x83 (= (+ (x i) ?x76 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x174 (and $x83 $x100 $x116 $x167)))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (let (($x130 (or $x129 $x174)))
 (let (($x78 (and (= (x (+ 1 i)) (+ (x i) ?x76)) (= (s (+ 1 i)) (+ 3 ?x45 (* 6 (r i)))) (= (r (+ 1 i)) (+ 1 (r i))) (= (inv i) (+ ?x28 ?x76 ?x127 ?x151)))))
 (let (($x84 (or $x129 $x78)))
 (rewrite (= $x84 $x130))))))))))))))))))))
 ))
 (let (($x67 (forall ((i Int) )(! (let ((?x63 (- (+ (- (s 0) (s i)) (* 3 (r i) (r i))) (* 3 (r 0) (r 0)))))
 (let ((?x58 (inv i)))
 (let (($x65 (and (= (x (+ i 1)) (- (x i) (s i))) (= (s (+ i 1)) (+ (s i) (* 6 (r i)) 3)) (= (r (+ i 1)) (+ (r i) 1)) (= ?x58 ?x63))))
 (let (($x40 (>= i 0)))
 (=> $x40 $x65))))) :qid k!51))
 ))
 (let ((?x87 (lambda ((i Int) )(let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x127 (* 3 (* (r i) (r i)))))
 (let ((?x45 (s i)))
 (let ((?x76 (* (- 1) ?x45)))
 (let ((?x28 (s 0)))
 (let ((?x58 (inv i)))
 (let (($x78 (and (= (x (+ 1 i)) (+ (x i) ?x76)) (= (s (+ 1 i)) (+ 3 ?x45 (* 6 (r i)))) (= (r (+ 1 i)) (+ 1 (r i))) (= ?x58 (+ ?x28 ?x76 ?x127 ?x151)))))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (let (($x84 (or $x129 $x78)))
 (let ((?x63 (- (+ (- ?x28 ?x45) (* 3 (r i) (r i))) (* 3 ?x31 ?x31))))
 (let (($x65 (and (= (x (+ i 1)) (- (x i) ?x45)) (= (s (+ i 1)) (+ ?x45 (* 6 (r i)) 3)) (= (r (+ i 1)) (+ (r i) 1)) (= ?x58 ?x63))))
 (let (($x66 (=> $x40 $x65)))
 (trans (monotonicity (rewrite (= $x65 $x78)) (= $x66 (=> $x40 $x78))) (rewrite (= (=> $x40 $x78) $x84)) (= $x66 $x84))))))))))))))))))
 ))
 (let ((@x68 (asserted $x67)))
 (let ((@x122 (mp (mp @x68 (quant-intro (proof-bind ?x87) (= $x67 $x96)) $x96) (rewrite (= $x96 $x96)) $x96)))
 (let ((@x211 (mp~ (mp @x122 (quant-intro (proof-bind ?x201) (= $x96 $x136)) $x136) (nnf-pos (proof-bind ?x184) (~ $x136 $x136)) $x136)))
 (let ((@x709 (mp (mp @x211 (quant-intro (proof-bind ?x280) (= $x136 $x278)) $x278) (quant-intro (proof-bind ?x705) (= $x278 $x702)) $x702)))
 (let (($x789 (not $x702)))
 (let (($x900 (or $x789 $x908)))
 (let ((?x31 (r 0)))
 (let ((?x138 (* ?x31 ?x31)))
 (let ((?x151 (* (- 3) ?x138)))
 (let ((?x28 (s 0)))
 (let ((?x819 (* (- 1) ?x28)))
 (let (($x831 (not (= (+ ?x28 (* 6 ?x31) (* (- 1) (s (+ 1 0)))) (- 3)))))
 (let (($x842 (or (not (= (+ (x 0) ?x819 (* (- 1) (x (+ 1 0)))) 0)) $x831 (not (= (+ ?x31 (* (- 1) (r (+ 1 0)))) (- 1))) (not (= (+ ?x28 ?x819 (* (- 1) ?x153) (* 3 ?x138) ?x151) 0)))))
 (let (($x843 (not $x842)))
 (let (($x817 (>= 0 0)))
 (let (($x818 (not $x817)))
 (let (($x844 (or $x818 $x843)))
 (let (($x899 (or $x789 $x844)))
 (let (($x902 (= $x899 $x900)))
 (let ((@x853 (trans (monotonicity (rewrite (= $x817 true)) (= $x818 (not true))) (rewrite (= (not true) false)) (= $x818 false))))
 (let ((@x876 (monotonicity @x853 (rewrite (= $x843 $x908)) (= $x844 (or false $x908)))))
 (let ((@x904 (monotonicity (trans @x876 (rewrite (= (or false $x908) $x908)) (= $x844 $x908)) $x902)))
 (let ((@x7468 (unit-resolution (mp ((_ quant-inst 0) $x899) (trans @x904 (rewrite (= $x900 $x900)) $x902) $x900) @x709 $x908)))
 (let (($x721 (or $x224 $x240 $x710)))
 (let (($x717 (or $x710 $x224 $x240)))
 (let (($x722 (= $x717 $x721)))
 (let ((@x726 (trans (monotonicity (rewrite (= $x240 $x240)) (= $x717 $x717)) (rewrite $x722) $x722)))
 (let (($x265 (or $x146 $x224 $x240)))
 (let (($x244 (or $x224 $x240)))
 (let (($x253 (or $x244 $x146)))
 (let (($x266 (= $x253 $x265)))
 (let ((@x264 (monotonicity (monotonicity (rewrite (= $x240 $x240)) (= $x244 $x244)) (= $x253 $x253))))
 (let (($x91 (forall ((i Int) )(! (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (or $x129 (= (inv (+ 1 i)) 0) (not (= (inv i) 0))))) :qid k!81))
 ))
 (let (($x149 (and $x154 $x91)))
 (let (($x111 (not $x149)))
 (let (($x112 (or $x111 $x146)))
 (let ((?x249 (lambda ((i Int) )(let ((?x58 (inv i)))
 (let (($x123 (= ?x58 0)))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (let (($x145 (or $x129 $x123)))
 (refl (~ $x145 $x145))))))))
 ))
 (let ((@x246 (nnf-neg (refl (~ $x224 $x224)) (sk (~ (not $x91) $x240)) (~ $x111 $x244))))
 (let ((@x255 (monotonicity @x246 (nnf-pos (proof-bind ?x249) (~ $x146 $x146)) (~ $x112 $x253))))
 (let (($x197 (= $x112 $x112)))
 (let ((@x198 (monotonicity (monotonicity (rewrite (= $x149 $x149)) (= $x111 $x111)) $x197)))
 (let (($x143 (forall ((i Int) )(! (let (($x40 (>= i 0)))
 (=> (and $x40 (= (inv i) 0)) (= (inv (+ i 1)) 0))) :qid k!81))
 ))
 (let (($x144 (and $x154 $x143)))
 (let (($x147 (=> $x144 $x71)))
 (let ((?x163 (lambda ((i Int) )(let ((?x58 (inv i)))
 (let (($x123 (= ?x58 0)))
 (let (($x40 (>= i 0)))
 (let (($x129 (not $x40)))
 (let (($x145 (or $x129 $x123)))
 (let (($x70 (=> $x40 $x123)))
 (rewrite (= $x70 $x145)))))))))
 ))
 (let ((@x173 (quant-intro (proof-bind ?x163) (= $x71 $x146))))
 (let ((@x120 (trans (monotonicity (rewrite (= $x144 $x149)) @x173 (= $x147 (=> $x149 $x146))) (rewrite (= (=> $x149 $x146) $x112)) (= $x147 $x112))))
 (let ((@x121 (mp (asserted $x147) @x120 $x112)))
 (let ((@x214 (mp (mp (mp (mp @x121 @x198 $x112) (rewrite $x197) $x112) @x198 $x112) @x198 $x112)))
 (let ((@x719 (mp (mp (mp~ @x214 @x255 $x253) (trans @x264 (rewrite $x266) $x266) $x265) (rewrite (= $x265 $x717)) $x717)))
 (let ((@x7471 (unit-resolution (mp @x719 @x726 $x721) (unit-resolution (def-axiom (or $x903 $x154)) @x7468 $x154) (or $x240 $x710))))
 (let ((@x7472 (unit-resolution @x7471 (lemma @x3750 $x2804) $x240)))
 (let ((@x7545 (unit-resolution (def-axiom (or $x239 $x237)) @x7472 $x237)))
 (let ((@x7546 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x238 $x2947)) @x7545 $x2947)))
 (let (($x2948 (>= ?x236 0)))
 (let ((@x7549 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x238 $x2948)) @x7545 $x2948)))
 (let ((?x2759 (* 3 (* (r ?x233) (r ?x233)))))
 (let ((?x2737 (s ?x233)))
 (let ((?x2738 (* (- 1) ?x2737)))
 (let ((?x2757 (* (- 1) ?x234)))
 (let ((?x2805 (+ ?x28 ?x151 ?x2757 ?x2738 ?x2759)))
 (let (($x2829 (<= ?x2805 0)))
 (let (($x2811 (= ?x2805 0)))
 (let (($x2790 (= (+ ?x2737 (* 6 (r ?x233)) (* (- 1) (s (+ 2 i!1)))) (- 3))))
 (let (($x2784 (not $x2811)))
 (let (($x2817 (or $x2784 (not (= (+ (r ?x233) (* (- 1) (r (+ 2 i!1)))) (- 1))) (not $x2790) (not (= (+ (x ?x233) ?x2738 (* (- 1) (x (+ 2 i!1)))) 0)))))
 (let (($x2911 (not $x2817)))
 (let (($x2766 (>= i!1 (- 1))))
 (let ((@x7473 (unit-resolution (def-axiom (or $x239 $x231)) @x7472 $x231)))
 (let (($x2769 (not $x2766)))
 (let (($x2915 (or $x789 $x2769 $x2911)))
 (let (($x2751 (not (= (+ ?x2737 (* 6 (r ?x233)) (* (- 1) (s (+ 1 ?x233)))) (- 3)))))
 (let (($x2763 (or (not (= (+ (x ?x233) ?x2738 (* (- 1) (x (+ 1 ?x233)))) 0)) $x2751 (not (= (+ (r ?x233) (* (- 1) (r (+ 1 ?x233)))) (- 1))) (not (= (+ ?x28 ?x2738 ?x2757 ?x2759 ?x151) 0)))))
 (let (($x2765 (or (not (>= ?x233 0)) (not $x2763))))
 (let (($x2939 (or $x789 $x2765)))
 (let ((@x2797 (monotonicity (rewrite (= $x2765 (or $x2769 $x2911))) (= $x2939 (or $x789 (or $x2769 $x2911))))))
 (let ((@x2938 (trans @x2797 (rewrite (= (or $x789 (or $x2769 $x2911)) $x2915)) (= $x2939 $x2915))))
 (let ((@x7493 (unit-resolution (mp ((_ quant-inst (+ 1 i!1)) $x2939) @x2938 $x2915) @x709 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x2766 $x232)) @x7473 $x2766) $x2911)))
 (let ((@x4534 (unit-resolution (def-axiom (or $x2817 $x2811)) @x7493 $x2811)))
 (let ((@x4535 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2784 $x2829)) @x4534 $x2829)))
 (let (($x2830 (>= ?x2805 0)))
 (let ((@x4538 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2784 $x2830)) @x4534 $x2830)))
 (let ((?x2859 (* 3 (* (r i!1) (r i!1)))))
 (let ((?x2842 (s i!1)))
 (let ((?x2843 (* (- 1) ?x2842)))
 (let ((?x2857 (* (- 1) ?x236)))
 (let ((?x2913 (+ ?x28 ?x151 ?x2857 ?x2843 ?x2859)))
 (let (($x2935 (<= ?x2913 0)))
 (let (($x2917 (= ?x2913 0)))
 (let (($x3053 (not $x2917)))
 (let ((?x2745 (r ?x233)))
 (let ((?x2905 (+ ?x2745 (* (- 1) (r i!1)))))
 (let (($x2906 (= ?x2905 1)))
 (let (($x2925 (not $x2906)))
 (let ((?x2889 (+ ?x2737 ?x2843 (* (- 6) (r i!1)))))
 (let (($x2890 (= ?x2889 3)))
 (let (($x2922 (not $x2890)))
 (let (($x3047 (or (not (= (+ (x ?x233) (* (- 1) (x i!1)) ?x2842) 0)) $x2922 $x2925 $x3053)))
 (let (($x3038 (not $x3047)))
 (let (($x3009 (or $x789 $x232 $x3038)))
 (let (($x2863 (or (not (= (+ (x i!1) ?x2843 (* (- 1) (x ?x233))) 0)) (not (= (+ ?x2842 (* 6 (r i!1)) ?x2738) (- 3))) (not (= (+ (r i!1) (* (- 1) ?x2745)) (- 1))) (not (= (+ ?x28 ?x2843 ?x2857 ?x2859 ?x151) 0)))))
 (let (($x2865 (or $x232 (not $x2863))))
 (let (($x3000 (or $x789 $x2865)))
 (let ((@x3046 (monotonicity (rewrite (= $x2865 (or $x232 $x3038))) (= $x3000 (or $x789 (or $x232 $x3038))))))
 (let ((@x3051 (trans @x3046 (rewrite (= (or $x789 (or $x232 $x3038)) $x3009)) (= $x3000 $x3009))))
 (let ((@x7537 (unit-resolution (mp ((_ quant-inst i!1) $x3000) @x3051 $x3009) @x709 @x7473 $x3038)))
 (let ((@x7552 (unit-resolution (def-axiom (or $x3047 $x2917)) @x7537 $x2917)))
 (let ((@x7553 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3053 $x2935)) @x7552 $x2935)))
 (let (($x2936 (>= ?x2913 0)))
 (let ((@x7556 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3053 $x2936)) @x7552 $x2936)))
 (let (($x2931 (<= ?x2889 3)))
 (let ((@x7559 (unit-resolution (def-axiom (or $x3047 $x2890)) @x7537 $x2890)))
 (let ((@x7560 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2922 $x2931)) @x7559 $x2931)))
 (let (($x2932 (>= ?x2889 3)))
 (let ((@x7563 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2922 $x2932)) @x7559 $x2932)))
 (let (($x2933 (<= ?x2905 1)))
 (let ((@x7538 (unit-resolution (def-axiom (or $x3047 $x2906)) @x7537 $x2906)))
 (let ((@x7539 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2925 $x2933)) @x7538 $x2933)))
 (let (($x2934 (>= ?x2905 1)))
 (let ((@x7542 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2925 $x2934)) @x7538 $x2934)))
 (let (($x4539 (not (>= ?x234 0))))
 (let (($x2949 (<= ?x234 0)))
 (let (($x4583 (or $x2949 (not $x2934) (not $x2933) (not $x2932) (not $x2931) (not $x2936) (not $x2935) (not $x2830) (not $x2829) (not $x2948) (not $x2947))))
 (let ((@x4566 (hypothesis $x2933)))
 (let ((@x4567 (hypothesis $x2934)))
 (let ((@x4572 ((_ th-lemma arith) (hypothesis (not $x2949)) @x4567 @x4566 (hypothesis $x2932) (hypothesis $x2931) @x4567 @x4566 (hypothesis $x2936) (hypothesis $x2935) (hypothesis $x2830) (hypothesis $x2829) (hypothesis $x2948) (hypothesis $x2947) false)))
 (let ((@x4546 (unit-resolution (lemma @x4572 $x4583) @x7539 @x7546 @x7563 @x7560 @x7556 @x7553 @x4538 @x4535 @x7549 @x7542 $x2949)))
 (let ((@x4545 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x235 (not $x2949) $x4539)) (unit-resolution (def-axiom (or $x239 (not $x235))) @x7472 (not $x235)) (or (not $x2949) $x4539))))
 ((_ th-lemma arith) (unit-resolution @x4545 @x4546 $x4539) @x7563 @x7560 @x7556 @x7553 @x7542 @x7539 @x4538 @x4535 @x7549 @x7546 @x7563 @x7560 @x7556 @x7553 @x4538 @x4535 @x7549 @x7546 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                   660
 :arith-assert-diseq          4
 :arith-assert-lower          574
 :arith-assert-upper          524
 :arith-assume-eqs            10
 :arith-branch-var            3
 :arith-conflicts             4
 :arith-eq-adapter            452
 :arith-fixed-eqs             64
 :arith-gcd-tests             165
 :arith-grobner               3
 :arith-ineq-splits           3
 :arith-max-min               1047
 :arith-nonlinear-bounds      161
 :arith-nonlinear-horner      166
 :arith-num-rows              344
 :arith-offset-eqs            58
 :arith-patches               6
 :arith-patches_succ          1
 :arith-pivots                659
 :arith-row-summations        3100
 :arith-tableau-max-columns   679
 :arith-tableau-max-rows      344
 :conflicts                   5
 :decisions                   31
 :del-clause                  1842
 :eliminated-vars             3
 :final-checks                39
 :interface-eqs               10
 :lazy-quant-instantiations   51
 :max-generation              20
 :max-memory                  23.03
 :max-missed-qa-cost          15.00
 :memory                      19.62
 :min-missed-qa-cost          15.00
 :missed-quant-instantiations 15
 :mk-bool-var                 1523
 :mk-clause                   2101
 :num-allocs                  5350017
 :num-checks                  1
 :propagations                1134
 :quant-instantiations        108
 :rlimit-count                270191
 :time                        0.04
 :total-time                  0.06)
