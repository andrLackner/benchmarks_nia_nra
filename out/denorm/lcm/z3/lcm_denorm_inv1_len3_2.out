unsat
((set-logic NIA)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(proof
(let ((?x293 (+ k!10 k!00 (* (- 1) (* x!3 u!5)) (* (- 1) (* y!2 v!4)))))
 (let (($x928 (>= ?x293 0)))
 (let (($x297 (= ?x293 0)))
 (let ((?x1142 (* y!2 v!4)))
 (let ((?x1126 (* x!3 u!5)))
 (let ((?x423 (* (- 1) k!00)))
 (let ((?x575 (* (- 1) k!10)))
 (let ((?x1145 (+ ?x575 ?x423 ?x1126 ?x1142)))
 (let ((?x904 (* x!3 x!3 y!2 v!4 u!5 u!5)))
 (let ((?x878 (* (- 1) (* y!2 y!2 y!2 v!4 v!4 v!4 u!5 u!5))))
 (let ((?x1016 (+ (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4) (* x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5) (* (- 1) (* x!3 y!2 y!2 v!4 u!5 u!5)) ?x878 (* (- 2) (* y!2 y!2 y!2 v!4 v!4 v!4 v!4 u!5)) ?x904 (* 2 (* x!3 x!3 y!2 v!4 v!4 u!5)) (* (- 1) (* y!2 y!2 y!2 v!4 v!4 v!4 v!4 v!4)) (* x!3 x!3 y!2 v!4 v!4 v!4) (* (- 6) (* x!3 x!3 y!2 v!4 v!4 v!4 v!4 u!5)) (* (- 3) (* x!3 x!3 y!2 v!4 v!4 v!4 u!5 u!5)) (* 2 (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5)) (* (- 1) (* x!3 y!2 y!2 v!4 v!4 v!4)) (* (- 2) (* x!3 y!2 y!2 v!4 v!4 u!5)) (* (- 3) (* x!3 x!3 y!2 v!4 v!4 v!4 v!4 v!4)) (* 3 (* x!3 y!2 y!2 v!4 v!4 v!4 u!5 u!5)) (* 6 (* x!3 y!2 y!2 v!4 v!4 v!4 v!4 u!5)) (* 3 (* x!3 y!2 y!2 v!4 v!4 v!4 v!4 v!4)))))
 (let ((?x974 (* ?x1016 ?x1145)))
 (let (($x906 (= ?x974 0)))
 (let (($x1021 (not $x906)))
 (let ((?x875 (* x!3 y!2 y!2 v!4 u!5 u!5)))
 (let ((?x872 (+ ?x875 ?x878 (* (- 1) (* y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 v!4 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 v!4 v!4 u!5 u!5 u!5)) (* (- 1) (* x!3 x!3 y!2 u!5 u!5 u!5)) (* (- 1) ?x904) (* x!3 y!2 y!2 u!5 u!5 u!5))))
 (let ((?x936 (* ?x872 ?x1145)))
 (let (($x895 (= ?x936 0)))
 (let (($x905 (or (not $x895) $x1021)))
 (let (($x1040 (and $x297 $x905)))
 (let ((?x893 (+ (* u!5 x!3) (* v!4 y!2) ?x575 ?x423)))
 (let ((?x969 (* u!5 u!5 v!4 x!3 x!3 y!2)))
 (let ((?x954 (* (- 1) (* u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2))))
 (let ((?x1117 (+ ?x954 ?x969 (* (- 1) (* u!5 u!5 v!4 x!3 y!2 y!2)) (* (- 2) (* u!5 v!4 v!4 v!4 v!4 y!2 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 y!2 y!2 y!2)) (* 2 (* u!5 v!4 v!4 x!3 x!3 y!2)) (* v!4 v!4 v!4 x!3 x!3 y!2) (* (- 2) (* u!5 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 x!3 y!2 y!2)) (* 2 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 6) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 3) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* 3 (* u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2)) (* 6 (* u!5 v!4 v!4 v!4 v!4 x!3 y!2 y!2)) (* 3 (* v!4 v!4 v!4 v!4 v!4 x!3 y!2 y!2)))))
 (let ((?x916 (* u!5 u!5 v!4 x!3 y!2 y!2)))
 (let ((?x918 (+ (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) ?x954 (* (- 1) (* u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 1) ?x969) (* u!5 u!5 u!5 x!3 y!2 y!2) ?x916)))
 (let (($x666 (and (= ?x893 0) (or (not (= (* ?x918 ?x893) 0)) (not (= (* ?x1117 ?x893) 0))))))
 (let (($x489 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x423 (* (- 1) k!00)))
 (let ((?x575 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x206 (+ ?x33 ?x34 ?x575 ?x423)))
 (let ((?x558 (* (- 1) (* v v v x y y))))
 (let ((?x574 (* (- 2) (* u v v x y y))))
 (let ((?x372 (* v v v x x y)))
 (let ((?x404 (* 2 (* u v v x x y))))
 (let ((?x352 (* (- 1) (* v v v v v y y y))))
 (let ((?x200 (* u u v x y y)))
 (let ((?x203 (* (- 1) ?x200)))
 (let ((?x174 (* u u v x x y)))
 (let ((?x164 (* (- 1) (* u u v v v y y y))))
 (let ((?x1119 (+ ?x164 ?x174 ?x203 (* (- 2) (* u v v v v y y y)) ?x352 ?x404 ?x372 ?x574 ?x558 (* 2 (* u v v v v x x x)) (* u u v v v x x x) (* v v v v v x x x) (* (- 3) (* u u v v v x x y)) (* (- 6) (* u v v v v x x y)) (* (- 3) (* v v v v v x x y)) (* 3 (* u u v v v x y y)) (* 6 (* u v v v v x y y)) (* 3 (* v v v v v x y y)))))
 (let ((?x190 (* u u u x y y)))
 (let ((?x239 (* (- 1) ?x174)))
 (let ((?x238 (* (- 1) (* u u u x x y))))
 (let ((?x150 (* (- 1) (* u u u u u y y y))))
 (let ((?x79 (+ ?x150 (* (- 3) (* u u u u v y y y)) (* (- 3) (* u u u v v y y y)) ?x164 ?x238 ?x239 ?x190 ?x200)))
 (and (= ?x206 0) (or (not (= (* ?x79 ?x206) 0)) (not (= (* ?x1119 ?x206) 0)))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x570 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x575 (* (- 1) k!10)))
 (let ((?x169 (* (- 1) x)))
 (let ((?x255 (+ y ?x169)))
 (let ((?x569 (* ?x255 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x423 (* (- 1) k!00)))
 (let ((?x112 (+ (* (- 1) (* ?x56 ?x56 ?x255 ?x255 ?x255 v v v)) (* (- 1) (* ?x56 ?x56 ?x255 x x v)) (* (- 1) (* ?x56 ?x56 ?x255 ?x255 x v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x534 (+ x (* (- 1) y))))
 (let ((?x554 (* ?x534 u)))
 (let ((?x482 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x44 ?x534 ?x534 y u u)) (* (- 1) (* ?x44 ?x534 y y u u)))))
 (let (($x231 (or (not (= (* ?x482 (+ ?x423 ?x554 ?x45 ?x575)) 0)) (not (= (* ?x112 (+ ?x423 ?x57 ?x569 ?x575)) 0)))))
 (let ((?x537 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x537 0) $x231)))))))))))))))) :qid k!29))
 ))
 (let ((?x439 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x423 (* (- 1) k!00)))
 (let ((?x575 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x206 (+ ?x33 ?x34 ?x575 ?x423)))
 (let ((?x558 (* (- 1) (* v v v x y y))))
 (let ((?x574 (* (- 2) (* u v v x y y))))
 (let ((?x372 (* v v v x x y)))
 (let ((?x404 (* 2 (* u v v x x y))))
 (let ((?x352 (* (- 1) (* v v v v v y y y))))
 (let ((?x200 (* u u v x y y)))
 (let ((?x203 (* (- 1) ?x200)))
 (let ((?x174 (* u u v x x y)))
 (let ((?x164 (* (- 1) (* u u v v v y y y))))
 (let ((?x1119 (+ ?x164 ?x174 ?x203 (* (- 2) (* u v v v v y y y)) ?x352 ?x404 ?x372 ?x574 ?x558 (* 2 (* u v v v v x x x)) (* u u v v v x x x) (* v v v v v x x x) (* (- 3) (* u u v v v x x y)) (* (- 6) (* u v v v v x x y)) (* (- 3) (* v v v v v x x y)) (* 3 (* u u v v v x y y)) (* 6 (* u v v v v x y y)) (* 3 (* v v v v v x y y)))))
 (let ((?x190 (* u u u x y y)))
 (let ((?x239 (* (- 1) ?x174)))
 (let ((?x238 (* (- 1) (* u u u x x y))))
 (let ((?x150 (* (- 1) (* u u u u u y y y))))
 (let ((?x79 (+ ?x150 (* (- 3) (* u u u u v y y y)) (* (- 3) (* u u u v v y y y)) ?x164 ?x238 ?x239 ?x190 ?x200)))
 (let (($x1183 (and (= ?x206 0) (or (not (= (* ?x79 ?x206) 0)) (not (= (* ?x1119 ?x206) 0))))))
 (let ((?x169 (* (- 1) x)))
 (let ((?x255 (+ y ?x169)))
 (let ((?x569 (* ?x255 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x112 (+ (* (- 1) (* ?x56 ?x56 ?x255 ?x255 ?x255 v v v)) (* (- 1) (* ?x56 ?x56 ?x255 x x v)) (* (- 1) (* ?x56 ?x56 ?x255 ?x255 x v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x534 (+ x (* (- 1) y))))
 (let ((?x554 (* ?x534 u)))
 (let ((?x482 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x44 ?x534 ?x534 y u u)) (* (- 1) (* ?x44 ?x534 y y u u)))))
 (let (($x231 (or (not (= (* ?x482 (+ ?x423 ?x554 ?x45 ?x575)) 0)) (not (= (* ?x112 (+ ?x423 ?x57 ?x569 ?x575)) 0)))))
 (let ((?x537 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x557 (and (= ?x537 0) $x231)))
 (rewrite (= $x557 $x1183))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x213 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x575 (* (- 1) k!10)))
 (let ((?x169 (* (- 1) x)))
 (let ((?x255 (+ y ?x169)))
 (let ((?x569 (* ?x255 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x423 (* (- 1) k!00)))
 (let ((?x112 (+ (* (- 1) (* ?x56 ?x56 ?x255 ?x255 ?x255 v v v)) (* (- 1) (* ?x56 ?x56 ?x255 x x v)) (* (- 1) (* ?x56 ?x56 ?x255 ?x255 x v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x534 (+ x (* (- 1) y))))
 (let ((?x554 (* ?x534 u)))
 (let ((?x482 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x44 ?x534 ?x534 y u u)) (* (- 1) (* ?x44 ?x534 y y u u)))))
 (let (($x231 (or (not (= (* ?x482 (+ ?x423 ?x554 ?x45 ?x575)) 0)) (not (= (* ?x112 (+ ?x423 ?x57 ?x569 ?x575)) 0)))))
 (and (= (+ ?x423 (* x u) (* y v) ?x575) 0) $x231))))))))))))))) :qid k!29))
 ))
 (let ((?x559 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x575 (* (- 1) k!10)))
 (let ((?x169 (* (- 1) x)))
 (let ((?x255 (+ y ?x169)))
 (let ((?x569 (* ?x255 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x423 (* (- 1) k!00)))
 (let ((?x112 (+ (* (- 1) (* ?x56 ?x56 ?x255 ?x255 ?x255 v v v)) (* (- 1) (* ?x56 ?x56 ?x255 x x v)) (* (- 1) (* ?x56 ?x56 ?x255 ?x255 x v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x534 (+ x (* (- 1) y))))
 (let ((?x554 (* ?x534 u)))
 (let ((?x482 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x44 ?x534 ?x534 y u u)) (* (- 1) (* ?x44 ?x534 y y u u)))))
 (let (($x231 (or (not (= (* ?x482 (+ ?x423 ?x554 ?x45 ?x575)) 0)) (not (= (* ?x112 (+ ?x423 ?x57 ?x569 ?x575)) 0)))))
 (let ((?x537 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x557 (and (= ?x537 0) $x231)))
 (let (($x521 (and (= (+ ?x423 (* x u) (* y v) ?x575) 0) $x231)))
 (rewrite (= $x521 $x557))))))))))))))))))))
 ))
 (let (($x262 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x169 (* (- 1) x)))
 (let ((?x255 (+ y ?x169)))
 (let ((?x569 (* ?x255 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x112 (+ (* (- 1) (* ?x56 ?x56 ?x255 ?x255 ?x255 v v v)) (* (- 1) (* ?x56 ?x56 ?x255 x x v)) (* (- 1) (* ?x56 ?x56 ?x255 ?x255 x v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x534 (+ x (* (- 1) y))))
 (let ((?x554 (* ?x534 u)))
 (let ((?x482 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x44 ?x534 ?x534 y u u)) (* (- 1) (* ?x44 ?x534 y y u u)))))
 (let (($x260 (or (not (= (* ?x482 (+ ?x81 ?x554 ?x45 ?x97)) 0)) (not (= (* ?x112 (+ ?x81 ?x57 ?x569 ?x97)) 0)))))
 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x260)))))))))))))))) :qid k!29))
 ))
 (let ((?x533 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x575 (* (- 1) k!10)))
 (let ((?x169 (* (- 1) x)))
 (let ((?x255 (+ y ?x169)))
 (let ((?x569 (* ?x255 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x423 (* (- 1) k!00)))
 (let ((?x112 (+ (* (- 1) (* ?x56 ?x56 ?x255 ?x255 ?x255 v v v)) (* (- 1) (* ?x56 ?x56 ?x255 x x v)) (* (- 1) (* ?x56 ?x56 ?x255 ?x255 x v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x534 (+ x (* (- 1) y))))
 (let ((?x554 (* ?x534 u)))
 (let ((?x482 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x44 ?x534 ?x534 y u u)) (* (- 1) (* ?x44 ?x534 y y u u)))))
 (let (($x231 (or (not (= (* ?x482 (+ ?x423 ?x554 ?x45 ?x575)) 0)) (not (= (* ?x112 (+ ?x423 ?x57 ?x569 ?x575)) 0)))))
 (let (($x521 (and (= (+ ?x423 (* x u) (* y v) ?x575) 0) $x231)))
 (let ((?x253 (* ?x112 (+ (* (- 1) (* u00 x00)) ?x57 ?x569 (* (- 1) (* v00 y00))))))
 (let ((?x220 (* ?x482 (+ (* (- 1) (* u00 x00)) ?x554 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x434 (* y v)))
 (let ((?x425 (* x u)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let (($x210 (and (= (+ ?x81 ?x425 ?x434 ?x97) 0) (or (not (= ?x220 0)) (not (= ?x253 0))))))
 (rewrite (= $x210 $x521))))))))))))))))))))))))))
 ))
 (let (($x72 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x58 (- y x)))
 (let ((?x56 (+ u v)))
 (let ((?x65 (- (* (- 1) ?x56 ?x56 v v v ?x58 ?x58 ?x58) (* ?x56 ?x56 v x x ?x58))))
 (let ((?x38 (* v00 y00)))
 (let ((?x67 (* (- (+ (* (- 1) u00 x00) (* ?x56 x) (* v ?x58)) ?x38) (- ?x65 (* ?x56 ?x56 v x ?x58 ?x58)))))
 (let ((?x44 (+ v u)))
 (let ((?x29 (- 1)))
 (let ((?x51 (- (* ?x29 u u ?x44 ?x44 ?x44 y y y) (* u u ?x44 (- x y) (- x y) y))))
 (let ((?x47 (- (+ (* ?x29 u00 x00) (* u (- x y)) (* ?x44 y)) ?x38)))
 (let (($x54 (= (* ?x47 (- ?x51 (* u u ?x44 (- x y) y y))) 0)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not $x54) (not (= ?x67 0))))))))))))))) :qid k!29))
 ))
 (let ((?x561 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x169 (* (- 1) x)))
 (let ((?x255 (+ y ?x169)))
 (let ((?x569 (* ?x255 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x112 (+ (* (- 1) (* ?x56 ?x56 ?x255 ?x255 ?x255 v v v)) (* (- 1) (* ?x56 ?x56 ?x255 x x v)) (* (- 1) (* ?x56 ?x56 ?x255 ?x255 x v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x534 (+ x (* (- 1) y))))
 (let ((?x554 (* ?x534 u)))
 (let ((?x482 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x44 ?x534 ?x534 y u u)) (* (- 1) (* ?x44 ?x534 y y u u)))))
 (let (($x260 (or (not (= (* ?x482 (+ ?x81 ?x554 ?x45 ?x97)) 0)) (not (= (* ?x112 (+ ?x81 ?x57 ?x569 ?x97)) 0)))))
 (let (($x210 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x260)))
 (let ((?x58 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x65 (- (* ?x29 ?x56 ?x56 v v v ?x58 ?x58 ?x58) (* ?x56 ?x56 v x x ?x58))))
 (let ((?x67 (* (- (+ (* ?x29 u00 x00) ?x57 (* v ?x58)) ?x38) (- ?x65 (* ?x56 ?x56 v x ?x58 ?x58)))))
 (let ((?x51 (- (* ?x29 u u ?x44 ?x44 ?x44 y y y) (* u u ?x44 (- x y) (- x y) y))))
 (let ((?x53 (* (- (+ (* ?x29 u00 x00) (* u (- x y)) ?x45) ?x38) (- ?x51 (* u u ?x44 (- x y) y y)))))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x71 (and $x41 (or (not (= ?x53 0)) (not (= ?x67 0))))))
 (rewrite (= $x71 $x210)))))))))))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x572 (mp (mp @x73 (quant-intro (proof-bind ?x561) (= $x72 $x262)) $x262) (rewrite (= $x262 $x262)) $x262)))
 (let ((@x274 (mp (mp @x572 (quant-intro (proof-bind ?x533) (= $x262 $x213)) $x213) (quant-intro (proof-bind ?x559) (= $x213 $x570)) $x570)))
 (let ((@x1134 (mp~ (mp @x274 (quant-intro (proof-bind ?x439) (= $x570 $x489)) $x489) (sk (~ $x489 $x666)) $x666)))
 (let ((@x923 (mp @x1134 (rewrite (= $x666 $x1040)) $x1040)))
 (let ((@x931 (and-elim @x923 $x297)))
 (let ((@x975 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x297) $x928)) @x931 $x928)))
 (let (($x926 (<= ?x293 0)))
 (let ((@x1068 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x297) $x926)) @x931 $x926)))
 (let (($x1061 (not (<= ?x974 0))))
 (let (($x553 (>= ?x974 0)))
 (let (($x1141 (>= ?x936 0)))
 (let (($x1140 (<= ?x936 0)))
 (let ((@x996 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x895 (not $x1140) (not $x1141))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1140)) @x1068 @x975 false) $x1140) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1141)) @x1068 @x975 false) $x1141) $x895)))
 (let ((@x1083 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x906 $x1061 (not $x553))) (unit-resolution (and-elim @x923 $x905) @x996 $x1021) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x553)) @x1068 @x975 false) $x553) $x1061)))
 ((_ th-lemma arith farkas 1 1 1) @x1083 @x1068 @x975 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             264
 :arith-nonlinear-horner    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                8.00
 :memory                    3.21
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                5478191292.00
 :num-checks                1
 :propagations              14
 :rlimit-count              5210916
 :time                      3.15
 :total-time                3.16)
