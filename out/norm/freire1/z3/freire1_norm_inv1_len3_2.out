unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x356 (* r!1 r!1)))
 (let ((?x1129 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x853 (* (- 1) ?x36)))
 (let ((?x975 (* (- 2) x00)))
 (let ((?x794 (+ r00 ?x975 ?x853 ?x1129 (* 2 x!0) ?x356)))
 (let (($x765 (<= ?x794 0)))
 (let (($x592 (= ?x794 0)))
 (let ((?x1089 (+ ?x1129 x!0)))
 (let ((?x1088 (+ 1 r!1)))
 (let ((?x1131 (* ?x1088 ?x1088 ?x1088 ?x1088 ?x1089 ?x1089)))
 (let ((?x454 (* (- 1) (* ?x1088 ?x1088 ?x1088 ?x1088 ?x1088 ?x1089 ?x1089))))
 (let ((?x817 (* (- 2) (* ?x1088 ?x1088 ?x1088 ?x1089 ?x1089 ?x1089))))
 (let ((?x648 (+ (* 2 (* x00 x!0 x!0)) (* 6 (* x00 r!1 x!0 x!0)) ?x817 ?x454 (* 3 (* r00 r00 r!1 r!1 r!1 r!1)) (* r00 r00 r!1 r!1 r!1 x!0 x!0) (* (- 4) (* x00 r!1 r!1 r!1 r!1 x!0)) (* (- 12) (* x00 r!1 r!1 r!1 x!0)) (* (- 4) (* x00 r!1 x!0)) (* (- 12) (* x00 r!1 r!1 x!0)) (* 2 (* x00 r!1 r!1 r!1 r!1 r!1)) (* 6 (* x00 r!1 r!1 r!1 r!1)) (* 6 (* x00 r!1 r!1 r!1)) (* 3 (* r00 r00 r!1 r!1 x!0 x!0)) (* 3 (* r00 r00 r!1 x!0 x!0)) (* 6 (* r00 r!1 r!1 r!1 x!0)) (* 6 (* r00 r!1 r!1 x!0)) (* 2 (* r00 r!1 x!0)) (* (- 1) (* r00 r!1 r!1 r!1 r!1 r!1)) (* (- 3) (* r00 r!1 r!1 r!1 r!1)) (* (- 3) (* r00 r!1 r!1 r!1)) (* (- 1) (* r00 r!1 r!1)) (* (- 1) (* r00 r!1 r!1 r!1 x!0 x!0)) (* (- 3) (* r00 r!1 x!0 x!0)) (* (- 3) (* r00 r!1 r!1 x!0 x!0)) (* 2 (* r00 r!1 r!1 r!1 r!1 x!0)) (* (- 1) (* r00 x!0 x!0)) (* r00 r00 x!0 x!0) (* (- 2) (* r00 r00 r!1 r!1 r!1 r!1 x!0)) (* (- 6) (* r00 r00 r!1 r!1 r!1 x!0)) (* (- 6) (* r00 r00 r!1 r!1 x!0)) (* (- 2) (* r00 r00 r!1 x!0)) (* r00 r00 r!1 r!1 r!1 r!1 r!1) (* r00 r00 r!1 r!1) (* 3 (* r00 r00 r!1 r!1 r!1)) (* 2 (* x00 r!1 r!1)) (* 6 (* x00 r!1 r!1 x!0 x!0)) (* 2 (* x00 r!1 r!1 r!1 x!0 x!0)) ?x1131)))
 (let (($x656 (= ?x648 0)))
 (let (($x948 (not $x656)))
 (let (($x657 (and $x592 $x948)))
 (let ((?x328 (+ (* 2 (* x!0 x!0 x00)) (* 6 (* r!1 x!0 x!0 x00)) (* 6 (* r!1 r!1 x!0 x!0 x00)) (* 2 (* r!1 r!1 r!1 x!0 x!0 x00)) (* 2 (* r!1 r!1 x00)) (* 6 (* r!1 r!1 r!1 x00)) (* 6 (* r!1 r!1 r!1 r!1 x00)) (* 2 (* r!1 r!1 r!1 r!1 r!1 x00)) (* (- 4) (* r!1 x!0 x00)) (* (- 12) (* r!1 r!1 x!0 x00)) (* (- 12) (* r!1 r!1 r!1 x!0 x00)) (* (- 4) (* r!1 r!1 r!1 r!1 x!0 x00)) ?x1131 (* (- 1) (* r!1 r!1 r00)) (* (- 3) (* r!1 r!1 r!1 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r00)) (* 2 (* r!1 x!0 r00)) (* 6 (* r!1 r!1 x!0 r00)) (* 6 (* r!1 r!1 r!1 x!0 r00)) ?x817 (* 2 (* r!1 r!1 r!1 r!1 x!0 r00)) (* (- 1) (* x!0 x!0 r00)) (* (- 3) (* r!1 x!0 x!0 r00)) (* (- 3) (* r!1 r!1 x!0 x!0 r00)) (* (- 1) (* r!1 r!1 r!1 x!0 x!0 r00)) ?x454 (* 3 (* r!1 r!1 r!1 r00 r00)) (* r!1 r!1 r00 r00) (* 3 (* r!1 r!1 r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r!1 r!1 r00 r00) (* (- 2) (* r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 x!0 r00 r00)) (* (- 2) (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* x!0 x!0 r00 r00) (* 3 (* r!1 x!0 x!0 r00 r00)) (* 3 (* r!1 r!1 x!0 x!0 r00 r00)) (* r!1 r!1 r!1 x!0 x!0 r00 r00))))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x719 (and (= (+ r!1 (* (- 2) x!0) ?x120 (* (- 1) ?x356) ?x35 ?x36) 0) (not (= ?x328 0)))))
 (let (($x528 (exists ((r Int) (x Int) )(! (let ((?x1057 (* r r r x x r00 r00)))
 (let ((?x1070 (* 3 (* r r x x r00 r00))))
 (let ((?x1069 (* 3 (* r x x r00 r00))))
 (let ((?x1031 (* x x r00 r00)))
 (let ((?x1068 (* (- 2) (* r r r r x r00 r00))))
 (let ((?x1067 (* (- 6) (* r r r x r00 r00))))
 (let ((?x1066 (* (- 6) (* r r x r00 r00))))
 (let ((?x1065 (* (- 2) (* r x r00 r00))))
 (let ((?x923 (* r r r r r r00 r00)))
 (let ((?x1064 (* 3 (* r r r r r00 r00))))
 (let ((?x851 (* r r r00 r00)))
 (let ((?x1063 (* 3 (* r r r r00 r00))))
 (let ((?x70 (* (- 1) r)))
 (let ((?x141 (+ ?x70 x)))
 (let ((?x128 (+ 1 r)))
 (let ((?x1239 (* (- 1) (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x141 ?x141))))
 (let ((?x1238 (* (- 1) (* r r r x x r00))))
 (let ((?x1237 (* (- 3) (* r r x x r00))))
 (let ((?x1236 (* (- 3) (* r x x r00))))
 (let ((?x1235 (* (- 1) (* x x r00))))
 (let ((?x1234 (* 2 (* r r r r x r00))))
 (let ((?x1233 (* 6 (* r r r x r00))))
 (let ((?x1232 (* 6 (* r r x r00))))
 (let ((?x1231 (* 2 (* r x r00))))
 (let ((?x1230 (* (- 1) (* r r r r r r00))))
 (let ((?x1229 (* (- 3) (* r r r r r00))))
 (let ((?x1228 (* (- 3) (* r r r r00))))
 (let ((?x1227 (* (- 1) (* r r r00))))
 (let ((?x573 (* ?x128 ?x128 ?x128 ?x128 ?x141 ?x141)))
 (let ((?x1162 (* (- 4) (* r r r r x x00))))
 (let ((?x1161 (* (- 12) (* r r r x x00))))
 (let ((?x1160 (* (- 12) (* r r x x00))))
 (let ((?x1158 (* (- 4) (* r x x00))))
 (let ((?x1156 (* 2 (* r r r r r x00))))
 (let ((?x1155 (* 6 (* r r r r x00))))
 (let ((?x1154 (* 6 (* r r r x00))))
 (let ((?x1153 (* 2 (* r r x00))))
 (let ((?x212 (* 2 (* r r r x x x00))))
 (let ((?x1152 (* 6 (* r r x x x00))))
 (let ((?x1151 (* 6 (* r x x x00))))
 (let ((?x198 (* 2 (* x x x00))))
 (let ((?x117 (+ ?x198 ?x1151 ?x1152 ?x212 ?x1153 ?x1154 ?x1155 ?x1156 ?x1158 ?x1160 ?x1161 ?x1162 ?x573 ?x1227 ?x1228 ?x1229 ?x1230 ?x1231 ?x1232 ?x1233 (* (- 2) (* ?x128 ?x128 ?x128 ?x141 ?x141 ?x141)) ?x1234 ?x1235 ?x1236 ?x1237 ?x1238 ?x1239 ?x1063 ?x851 ?x1064 ?x923 ?x1065 ?x1066 ?x1067 ?x1068 ?x1031 ?x1069 ?x1070 ?x1057)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (let ((?x119 (* (- 2) x)))
 (let (($x123 (= (+ r ?x119 ?x120 ?x121 ?x35 ?x36) 0)))
 (and $x123 (not (= ?x117 0)))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x875 (exists ((r Int) (x Int) )(! (let ((?x70 (* (- 1) r)))
 (let ((?x861 (+ x ?x70)))
 (let ((?x128 (+ 1 r)))
 (let ((?x989 (* r00 r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x951 (* ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x105 (+ (* 2 (* x00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* (- 2) (* ?x128 ?x128 ?x128 ?x861 ?x861 ?x861)) ?x951 (* (- 1) (* r00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* (- 1) (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)) ?x989)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (and (= (+ r ?x120 ?x121 ?x119 ?x35 ?x36) 0) (not (= ?x105 0))))))))))))))) :qid k!26))
 ))
 (let ((?x550 (lambda ((r Int) (x Int) )(let ((?x1057 (* r r r x x r00 r00)))
 (let ((?x1070 (* 3 (* r r x x r00 r00))))
 (let ((?x1069 (* 3 (* r x x r00 r00))))
 (let ((?x1031 (* x x r00 r00)))
 (let ((?x1068 (* (- 2) (* r r r r x r00 r00))))
 (let ((?x1067 (* (- 6) (* r r r x r00 r00))))
 (let ((?x1066 (* (- 6) (* r r x r00 r00))))
 (let ((?x1065 (* (- 2) (* r x r00 r00))))
 (let ((?x923 (* r r r r r r00 r00)))
 (let ((?x1064 (* 3 (* r r r r r00 r00))))
 (let ((?x851 (* r r r00 r00)))
 (let ((?x1063 (* 3 (* r r r r00 r00))))
 (let ((?x70 (* (- 1) r)))
 (let ((?x141 (+ ?x70 x)))
 (let ((?x128 (+ 1 r)))
 (let ((?x1239 (* (- 1) (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x141 ?x141))))
 (let ((?x1238 (* (- 1) (* r r r x x r00))))
 (let ((?x1237 (* (- 3) (* r r x x r00))))
 (let ((?x1236 (* (- 3) (* r x x r00))))
 (let ((?x1235 (* (- 1) (* x x r00))))
 (let ((?x1234 (* 2 (* r r r r x r00))))
 (let ((?x1233 (* 6 (* r r r x r00))))
 (let ((?x1232 (* 6 (* r r x r00))))
 (let ((?x1231 (* 2 (* r x r00))))
 (let ((?x1230 (* (- 1) (* r r r r r r00))))
 (let ((?x1229 (* (- 3) (* r r r r r00))))
 (let ((?x1228 (* (- 3) (* r r r r00))))
 (let ((?x1227 (* (- 1) (* r r r00))))
 (let ((?x573 (* ?x128 ?x128 ?x128 ?x128 ?x141 ?x141)))
 (let ((?x1162 (* (- 4) (* r r r r x x00))))
 (let ((?x1161 (* (- 12) (* r r r x x00))))
 (let ((?x1160 (* (- 12) (* r r x x00))))
 (let ((?x1158 (* (- 4) (* r x x00))))
 (let ((?x1156 (* 2 (* r r r r r x00))))
 (let ((?x1155 (* 6 (* r r r r x00))))
 (let ((?x1154 (* 6 (* r r r x00))))
 (let ((?x1153 (* 2 (* r r x00))))
 (let ((?x212 (* 2 (* r r r x x x00))))
 (let ((?x1152 (* 6 (* r r x x x00))))
 (let ((?x1151 (* 6 (* r x x x00))))
 (let ((?x198 (* 2 (* x x x00))))
 (let ((?x117 (+ ?x198 ?x1151 ?x1152 ?x212 ?x1153 ?x1154 ?x1155 ?x1156 ?x1158 ?x1160 ?x1161 ?x1162 ?x573 ?x1227 ?x1228 ?x1229 ?x1230 ?x1231 ?x1232 ?x1233 (* (- 2) (* ?x128 ?x128 ?x128 ?x141 ?x141 ?x141)) ?x1234 ?x1235 ?x1236 ?x1237 ?x1238 ?x1239 ?x1063 ?x851 ?x1064 ?x923 ?x1065 ?x1066 ?x1067 ?x1068 ?x1031 ?x1069 ?x1070 ?x1057)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (let ((?x119 (* (- 2) x)))
 (let (($x123 (= (+ r ?x119 ?x120 ?x121 ?x35 ?x36) 0)))
 (let (($x148 (and $x123 (not (= ?x117 0)))))
 (let ((?x861 (+ x ?x70)))
 (let ((?x989 (* r00 r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x951 (* ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x105 (+ (* 2 (* x00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* (- 2) (* ?x128 ?x128 ?x128 ?x861 ?x861 ?x861)) ?x951 (* (- 1) (* r00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* (- 1) (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)) ?x989)))
 (let (($x106 (and (= (+ r ?x120 ?x121 ?x119 ?x35 ?x36) 0) (not (= ?x105 0)))))
 (rewrite (= $x106 $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1113 (exists ((r Int) (x Int) )(! (let ((?x70 (* (- 1) r)))
 (let ((?x861 (+ x ?x70)))
 (let ((?x128 (+ 1 r)))
 (let ((?x989 (* r00 r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x973 (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x969 (* r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x1003 (+ (* (- 2) (* x00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* 2 (* ?x128 ?x128 ?x128 ?x861 ?x861 ?x861)) (* (- 1) (* ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)) ?x969 ?x973 (* (- 1) ?x989))))
 (let ((?x36 (* r00 r00)))
 (let ((?x853 (* (- 1) ?x36)))
 (let ((?x975 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x70 r00 ?x30 ?x32 ?x975 ?x853) 0) (not (= ?x1003 0))))))))))))))) :qid k!26))
 ))
 (let ((?x872 (lambda ((r Int) (x Int) )(let ((?x70 (* (- 1) r)))
 (let ((?x861 (+ x ?x70)))
 (let ((?x128 (+ 1 r)))
 (let ((?x989 (* r00 r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x951 (* ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x105 (+ (* 2 (* x00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* (- 2) (* ?x128 ?x128 ?x128 ?x861 ?x861 ?x861)) ?x951 (* (- 1) (* r00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* (- 1) (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)) ?x989)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x121 (* (- 1) ?x30)))
 (let ((?x120 (* (- 1) r00)))
 (let (($x106 (and (= (+ r ?x120 ?x121 ?x119 ?x35 ?x36) 0) (not (= ?x105 0)))))
 (let ((?x973 (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x969 (* r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x1003 (+ (* (- 2) (* x00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* 2 (* ?x128 ?x128 ?x128 ?x861 ?x861 ?x861)) (* (- 1) ?x951) ?x969 ?x973 (* (- 1) ?x989))))
 (let (($x841 (= (+ ?x70 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x854 (and $x841 (not (= ?x1003 0)))))
 (rewrite (= $x854 $x106)))))))))))))))))))))
 ))
 (let (($x65 (exists ((r Int) (x Int) )(! (let ((?x43 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (- (* 0 ?x41 ?x41 r00) (* 2 ?x41 ?x41 ?x41 ?x43 ?x43 x00))))
 (let ((?x50 (+ ?x45 (* 0 ?x41 ?x41 ?x41) (* 0 ?x41 ?x41 ?x43) (* 2 ?x41 ?x41 ?x41 ?x43 ?x43 ?x43) (* 0 ?x41 ?x41 ?x41 ?x41))))
 (let ((?x55 (+ (- ?x50 (* ?x41 ?x41 ?x41 ?x41 ?x43 ?x43)) (* ?x41 ?x41 ?x41 r00 ?x43 ?x43) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x43 ?x43))))
 (let ((?x60 (+ (- ?x55 (* ?x41 ?x41 ?x41 r00 r00 ?x43 ?x43)) (* 0 ?x41 ?x41 x00) (* 0 ?x41 ?x41 r00 r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x60 0))))))))))))) :qid k!26))
 ))
 (let ((?x578 (lambda ((r Int) (x Int) )(let ((?x70 (* (- 1) r)))
 (let ((?x861 (+ x ?x70)))
 (let ((?x128 (+ 1 r)))
 (let ((?x989 (* r00 r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x973 (* ?x128 ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x969 (* r00 ?x128 ?x128 ?x128 ?x861 ?x861)))
 (let ((?x1003 (+ (* (- 2) (* x00 ?x128 ?x128 ?x128 ?x861 ?x861)) (* 2 (* ?x128 ?x128 ?x128 ?x861 ?x861 ?x861)) (* (- 1) (* ?x128 ?x128 ?x128 ?x128 ?x861 ?x861)) ?x969 ?x973 (* (- 1) ?x989))))
 (let ((?x36 (* r00 r00)))
 (let ((?x853 (* (- 1) ?x36)))
 (let ((?x975 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x854 (and (= (+ ?x70 r00 ?x30 ?x32 ?x975 ?x853) 0) (not (= ?x1003 0)))))
 (let ((?x43 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (- (* 0 ?x41 ?x41 r00) (* 2 ?x41 ?x41 ?x41 ?x43 ?x43 x00))))
 (let ((?x50 (+ ?x45 (* 0 ?x41 ?x41 ?x41) (* 0 ?x41 ?x41 ?x43) (* 2 ?x41 ?x41 ?x41 ?x43 ?x43 ?x43) (* 0 ?x41 ?x41 ?x41 ?x41))))
 (let ((?x55 (+ (- ?x50 (* ?x41 ?x41 ?x41 ?x41 ?x43 ?x43)) (* ?x41 ?x41 ?x41 r00 ?x43 ?x43) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x43 ?x43))))
 (let ((?x60 (+ (- ?x55 (* ?x41 ?x41 ?x41 r00 r00 ?x43 ?x43)) (* 0 ?x41 ?x41 x00) (* 0 ?x41 ?x41 r00 r00))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x64 (and (= ?x38 0) (or (not (= ?x60 0))))))
 (rewrite (= $x64 $x854))))))))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x981 (mp (mp @x66 (quant-intro (proof-bind ?x578) (= $x65 $x1113)) $x1113) (rewrite (= $x1113 $x1113)) $x1113)))
 (let ((@x339 (mp (mp @x981 (quant-intro (proof-bind ?x872) (= $x1113 $x875)) $x875) (quant-intro (proof-bind ?x550) (= $x875 $x528)) $x528)))
 (let ((@x576 (mp (mp~ @x339 (sk (~ $x528 $x719)) $x719) (rewrite (= $x719 $x657)) $x657)))
 (let ((@x704 (and-elim @x576 $x592)))
 (let ((@x747 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x592) $x765)) @x704 $x765)))
 (let (($x766 (>= ?x794 0)))
 (let ((@x667 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x592) $x766)) @x704 $x766)))
 (let (($x720 (not (>= ?x648 0))))
 (let (($x768 (<= ?x648 0)))
 (let ((@x663 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x656 (not $x768) $x720)) (and-elim @x576 $x948) (or (not $x768) $x720))))
 (let ((@x782 (unit-resolution @x663 (lemma ((_ th-lemma arith) (hypothesis (not $x768)) @x667 @x747 false) $x768) $x720)))
 ((_ th-lemma arith) @x782 @x667 @x747 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             362
 :arith-nonlinear-bounds    14
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-tableau-max-columns 60
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.65
 :memory                    3.14
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1277050
 :num-checks                1
 :propagations              4
 :rlimit-count              6049
 :time                      0.01
 :total-time                0.02)
