unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x90 (* r!1 r!1)))
 (let ((?x84 (* (- 1) r!1)))
 (let ((?x146 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x156 (+ r00 ?x80 ?x96 ?x146 ?x84 ?x90)))
 (let (($x289 (<= ?x156 0)))
 (let (($x268 (= ?x156 0)))
 (let ((?x273 (+ x!0 ?x84)))
 (let ((?x115 (+ 1 r!1)))
 (let ((?x278 (* ?x115 ?x115 ?x115 ?x115 ?x273 ?x273 ?x273 ?x273 ?x273 ?x273 ?x156)))
 (let (($x276 (= ?x278 0)))
 (let (($x279 (not $x276)))
 (let (($x277 (and $x268 $x279)))
 (let ((?x145 (+ ?x84 x!0)))
 (let ((?x92 (* ?x115 ?x115 ?x115 ?x115 ?x145 ?x145 ?x145 ?x145 ?x145 ?x145 (+ ?x84 ?x146 r00 ?x90 ?x80 ?x96))))
 (let ((?x35 (* 2 x00)))
 (let ((?x111 (* (- 1) r00)))
 (let (($x98 (and (= (+ r!1 (* (- 2) x!0) ?x111 (* (- 1) ?x90) ?x35 ?x36) 0) (not (= ?x92 0)))))
 (let (($x168 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x102 (+ ?x59 ?x32 r00 ?x30 ?x80 ?x96)))
 (let ((?x167 (+ ?x59 x)))
 (let ((?x119 (+ 1 r)))
 (let (($x85 (= (* ?x119 ?x119 ?x119 ?x119 ?x167 ?x167 ?x167 ?x167 ?x167 ?x167 ?x102) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let (($x114 (= (+ r ?x110 ?x111 ?x112 ?x35 ?x36) 0)))
 (and $x114 (not $x85))))))))))))))))) :qid k!26))
 ))
 (let (($x161 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x144 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x152 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x183 (= (* ?x119 ?x119 ?x119 ?x119 ?x152 ?x152 ?x152 ?x152 ?x152 ?x152 ?x144) 0)))
 (let (($x134 (not $x183)))
 (let ((?x35 (* 2 x00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x134)))))))))))))))) :qid k!26))
 ))
 (let ((?x169 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x102 (+ ?x59 ?x32 r00 ?x30 ?x80 ?x96)))
 (let ((?x167 (+ ?x59 x)))
 (let ((?x119 (+ 1 r)))
 (let (($x85 (= (* ?x119 ?x119 ?x119 ?x119 ?x167 ?x167 ?x167 ?x167 ?x167 ?x167 ?x102) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let (($x114 (= (+ r ?x110 ?x111 ?x112 ?x35 ?x36) 0)))
 (let (($x87 (and $x114 (not $x85))))
 (let ((?x152 (+ x ?x59)))
 (let ((?x177 (* ?x119 ?x119 ?x119 ?x119 ?x152 ?x152 ?x152 ?x152 ?x152 ?x152 (+ (- 1) (* (- 3) r) r00 (* ?x119 ?x119) ?x32 ?x80 ?x96))))
 (let (($x134 (not (= ?x177 0))))
 (let (($x140 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x134)))
 (rewrite (= $x140 $x87)))))))))))))))))))))))
 ))
 (let (($x86 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x144 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x152 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x183 (= (* ?x119 ?x119 ?x119 ?x119 ?x152 ?x152 ?x152 ?x152 ?x152 ?x152 ?x144) 0)))
 (let (($x134 (not $x183)))
 (and (= (+ ?x59 r00 (* r r) ?x32 ?x80 ?x96) 0) $x134))))))))))) :qid k!26))
 ))
 (let ((?x187 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x144 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x152 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x183 (= (* ?x119 ?x119 ?x119 ?x119 ?x152 ?x152 ?x152 ?x152 ?x152 ?x152 ?x144) 0)))
 (let (($x134 (not $x183)))
 (let ((?x35 (* 2 x00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (let (($x140 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x134)))
 (let (($x120 (and (= (+ ?x59 r00 ?x30 ?x32 ?x80 ?x96) 0) $x134)))
 (rewrite (= $x120 $x140))))))))))))))))))))
 ))
 (let (($x54 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x50 (= (* ?x48 ?x41 ?x41 ?x41 ?x44 ?x44 ?x44 ?x41 ?x44 ?x44 ?x44) 0)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not $x50)))))))))) :qid k!26))
 ))
 (let ((?x73 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x144 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x152 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x183 (= (* ?x119 ?x119 ?x119 ?x119 ?x152 ?x152 ?x152 ?x152 ?x152 ?x152 ?x144) 0)))
 (let (($x134 (not $x183)))
 (let (($x120 (and (= (+ ?x59 r00 (* r r) ?x32 ?x80 ?x96) 0) $x134)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x50 (= (* ?x48 ?x41 ?x41 ?x41 ?x44 ?x44 ?x44 ?x41 ?x44 ?x44 ?x44) 0)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x53 (and $x40 (or (not $x50)))))
 (rewrite (= $x53 $x120)))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x171 (mp (mp @x55 (quant-intro (proof-bind ?x73) (= $x54 $x86)) $x86) (rewrite (= $x86 $x86)) $x86)))
 (let ((@x65 (mp (mp @x171 (quant-intro (proof-bind ?x187) (= $x86 $x161)) $x161) (quant-intro (proof-bind ?x169) (= $x161 $x168)) $x168)))
 (let ((@x253 (mp (mp~ @x65 (sk (~ $x168 $x98)) $x98) (rewrite (= $x98 $x277)) $x277)))
 (let ((@x255 (and-elim @x253 $x268)))
 (let ((@x298 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x289)) @x255 $x289)))
 (let (($x290 (>= ?x156 0)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x290)) @x255 $x290)))
 (let (($x306 (not (>= ?x278 0))))
 (let (($x291 (<= ?x278 0)))
 (let ((@x310 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x276 (not $x291) $x306)) (and-elim @x253 $x279) (or (not $x291) $x306))))
 (let ((@x311 (unit-resolution @x310 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x291)) @x301 @x298 false) $x291) $x306)))
 ((_ th-lemma arith farkas 1 1 1) @x311 @x301 @x298 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            3
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1048341
 :num-checks                1
 :propagations              4
 :rlimit-count              815
 :time                      0.01
 :total-time                0.01)
