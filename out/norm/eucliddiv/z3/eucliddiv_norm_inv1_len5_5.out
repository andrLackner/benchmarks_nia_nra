unsat
((set-logic NIA)
(proof
(let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x46 (* y00 y00 y00)))
 (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x48 (* ?x42 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x44 (* ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x49 (+ ?x44 ?x45 ?x46 ?x47 ?x48)))
 (let ((?x50 (- ?x49 ?x44)))
 (let ((?x51 (- ?x50 ?x45)))
 (let ((?x52 (- ?x51 ?x48)))
 (let ((?x53 (- ?x52 ?x47)))
 (let ((?x54 (- ?x53 ?x46)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x57))))))))))))))))))) :qid k!29))
 ))
 (let (($x845 (= $x59 false)))
 (let (($x838 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x844 (elim-unused (= $x838 false))))
 (let (($x841 (= $x59 $x838)))
 (let ((?x946 (lambda ((q Int) (r Int) (y Int) )(let ((?x46 (* y00 y00 y00)))
 (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x48 (* ?x42 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x44 (* ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x49 (+ ?x44 ?x45 ?x46 ?x47 ?x48)))
 (let ((?x50 (- ?x49 ?x44)))
 (let ((?x51 (- ?x50 ?x45)))
 (let ((?x52 (- ?x51 ?x48)))
 (let ((?x53 (- ?x52 ?x47)))
 (let ((?x54 (- ?x53 ?x46)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x58 (and $x33 $x41 $x57)))
 (let (($x836 (= $x58 false)))
 (let (($x869 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x770 (= (+ (* (- 1) y00) y) 0)))
 (let (($x940 (and $x770 $x869 false)))
 (let (($x829 (= $x57 false)))
 (let ((@x828 (rewrite (= (or false) false))))
 (let (($x824 (or false)))
 (let (($x825 (= $x57 $x824)))
 (let (($x822 (= $x56 false)))
 (let ((@x821 (rewrite (= (not true) false))))
 (let (($x817 (not true)))
 (let (($x818 (= $x56 $x817)))
 (let (($x815 (= $x55 true)))
 (let ((@x814 (rewrite (= (= 0 0) true))))
 (let (($x810 (= 0 0)))
 (let (($x811 (= $x55 $x810)))
 (let ((@x776 (rewrite (= (+ ?x46 (* (- 1) ?x46)) 0))))
 (let ((?x785 (+ ?x46 (* (- 1) ?x46))))
 (let (($x778 (= ?x54 ?x785)))
 (let ((@x782 (rewrite (= (- ?x46 ?x46) ?x785))))
 (let ((?x791 (- ?x46 ?x46)))
 (let (($x787 (= ?x54 ?x791)))
 (let (($x794 (= ?x53 ?x46)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x70 (+ r ?x64)))
 (let ((?x62 (+ 1 q)))
 (let ((?x857 (* y00 y00 ?x62 ?x62 ?x62 ?x70 ?x70 ?x70)))
 (let ((?x914 (+ ?x46 ?x857)))
 (let ((?x923 (+ ?x914 (* (- 1) ?x857))))
 (let ((@x72 (rewrite (= ?x43 ?x70))))
 (let ((@x69 (rewrite (= ?x42 ?x62))))
 (let ((@x266 (monotonicity @x69 @x69 @x69 @x72 @x72 @x72 (= ?x47 (* ?x62 ?x62 ?x62 ?x70 ?x70 ?x70 y00 y00)))))
 (let ((@x865 (trans @x266 (rewrite (= (* ?x62 ?x62 ?x62 ?x70 ?x70 ?x70 y00 y00) ?x857)) (= ?x47 ?x857))))
 (let ((?x866 (* y00 y00 y00 y00 ?x62 ?x70 ?x70)))
 (let ((?x900 (+ ?x46 ?x857 ?x866)))
 (let ((?x909 (+ ?x900 (* (- 1) ?x866))))
 (let ((@x571 (monotonicity @x69 @x72 @x72 (= ?x48 (* ?x62 ?x70 ?x70 y00 y00 y00 y00)))))
 (let ((@x873 (trans @x571 (rewrite (= (* ?x62 ?x70 ?x70 y00 y00 y00 y00) ?x866)) (= ?x48 ?x866))))
 (let ((?x849 (* y00 y00 ?x70 ?x70 ?x70)))
 (let ((?x886 (+ ?x849 ?x46 ?x857 ?x866)))
 (let ((?x895 (+ ?x886 (* (- 1) ?x849))))
 (let ((@x203 (monotonicity @x72 @x72 @x72 (= ?x45 (* ?x70 ?x70 ?x70 y00 y00)))))
 (let ((@x856 (trans @x203 (rewrite (= (* ?x70 ?x70 ?x70 y00 y00) ?x849)) (= ?x45 ?x849))))
 (let ((?x83 (* y00 y00 y00 y00 ?x62 ?x70 ?x70 ?x70)))
 (let ((?x874 (+ ?x83 ?x849 ?x46 ?x857 ?x866)))
 (let ((?x881 (+ ?x874 (* (- 1) ?x83))))
 (let ((@x80 (monotonicity @x69 @x72 @x72 @x72 (= ?x44 (* ?x62 ?x70 ?x70 ?x70 y00 y00 y00 y00)))))
 (let ((@x769 (trans @x80 (rewrite (= (* ?x62 ?x70 ?x70 ?x70 y00 y00 y00 y00) ?x83)) (= ?x44 ?x83))))
 (let ((@x885 (trans (monotonicity (rewrite (= ?x49 ?x874)) @x769 (= ?x50 (- ?x874 ?x83))) (rewrite (= (- ?x874 ?x83) ?x881)) (= ?x50 ?x881))))
 (let ((@x893 (monotonicity (trans @x885 (rewrite (= ?x881 ?x886)) (= ?x50 ?x886)) @x856 (= ?x51 (- ?x886 ?x849)))))
 (let ((@x904 (trans (trans @x893 (rewrite (= (- ?x886 ?x849) ?x895)) (= ?x51 ?x895)) (rewrite (= ?x895 ?x900)) (= ?x51 ?x900))))
 (let ((@x913 (trans (monotonicity @x904 @x873 (= ?x52 (- ?x900 ?x866))) (rewrite (= (- ?x900 ?x866) ?x909)) (= ?x52 ?x909))))
 (let ((@x921 (monotonicity (trans @x913 (rewrite (= ?x909 ?x914)) (= ?x52 ?x914)) @x865 (= ?x53 (- ?x914 ?x857)))))
 (let ((@x930 (trans (trans @x921 (rewrite (= (- ?x914 ?x857) ?x923)) (= ?x53 ?x923)) (rewrite (= ?x923 ?x46)) $x794)))
 (let ((@x934 (monotonicity (trans (trans (monotonicity @x930 $x787) @x782 $x778) @x776 $x55) $x811)))
 (let ((@x938 (monotonicity (trans (monotonicity (trans @x934 @x814 $x815) $x818) @x821 $x822) $x825)))
 (let ((@x942 (monotonicity (rewrite (= $x33 $x770)) (rewrite (= $x41 $x869)) (trans @x938 @x828 $x829) (= $x58 $x940))))
 (trans @x942 (rewrite (= $x940 false)) $x836))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (mp @x60 (trans (quant-intro (proof-bind ?x946) $x841) @x844 $x845) false))))))))))

(:max-memory   3.43
 :memory       3.14
 :mk-bool-var  5
 :num-allocs   899155
 :rlimit-count 673
 :time         0.01
 :total-time   0.01)
