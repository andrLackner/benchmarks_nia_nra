unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x477 (* (- 6) n!0)))
 (let ((?x510 (+ m!1 ?x477)))
 (let (($x171 (<= ?x510 6)))
 (let (($x511 (= ?x510 6)))
 (let ((?x538 (+ (- 6) m!1 ?x477)))
 (let ((?x522 (+ c!3 k!2)))
 (let ((?x144 (+ m!1 k!2)))
 (let ((?x485 (+ 6 m!1)))
 (let ((?x521 (+ 1 n!0)))
 (let ((?x686 (+ (* (- 1) (* ?x521 ?x485 ?x485 ?x485 ?x144 ?x144 ?x144)) (* ?x521 ?x485 ?x144 ?x144 ?x522 ?x522))))
 (let ((?x695 (* c!3 c!3 c!3)))
 (let ((?x694 (* k!2 k!2 k!2 n!0 n!0)))
 (let ((?x602 (* 216 (* c!3 c!3))))
 (let ((?x519 (* 6 (* c!3 k!2 k!2 n!0))))
 (let ((?x482 (* 2 (* c!3 c!3 c!3 n!0))))
 (let ((?x513 (* k!2 k!2 k!2)))
 (let ((?x481 (* 3 (* c!3 k!2 k!2))))
 (let ((?x499 (* k!2 k!2)))
 (let ((?x640 (* 216 ?x499)))
 (let ((?x516 (* 6 (* c!3 c!3 k!2 n!0))))
 (let ((?x282 (* 3 (* c!3 c!3 k!2 n!0 n!0))))
 (let ((?x395 (* 3 (* c!3 c!3 k!2))))
 (let ((?x480 (* 2 (* k!2 k!2 k!2 n!0))))
 (let ((?x346 (* c!3 c!3 m!1 m!1 m!1)))
 (let ((?x220 (* 3 (* c!3 k!2 k!2 n!0 n!0))))
 (let ((?x242 (* c!3 c!3 c!3 n!0 n!0)))
 (let ((?x635 (* 432 (* c!3 k!2))))
 (let ((?x707 (* 18 (* c!3 c!3 m!1 m!1))))
 (let ((?x693 (+ ?x707 ?x635 (* 108 (* m!1 k!2 k!2)) ?x242 ?x220 (* 2 (* c!3 m!1 m!1 m!1 k!2)) (* 216 (* c!3 m!1 k!2)) ?x346 ?x480 ?x395 ?x282 ?x516 ?x640 (* m!1 m!1 m!1 k!2 k!2) (* 36 (* c!3 m!1 m!1 k!2)) (* 18 (* m!1 m!1 k!2 k!2)) ?x481 ?x513 ?x482 ?x519 (* 108 (* c!3 c!3 m!1)) ?x602 ?x694 ?x695)))
 (let ((?x559 (* ?x693 ?x686 ?x538)))
 (let (($x92 (= ?x559 0)))
 (let (($x651 (not $x92)))
 (let (($x492 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x187 (* (- 1) ?x499)))
 (let ((?x536 (* (- 9) n!0)))
 (let ((?x502 (* 9 (* c!3 n!0))))
 (let ((?x535 (* 5 k!2)))
 (let ((?x488 (* 18 c!3)))
 (let (($x363 (and $x511 (= (+ ?x488 ?x535 ?x502 ?x536 ?x187) 4) $x492 (= (+ k!2 (* (- 3) (* n!0 n!0)) (* (- 3) n!0)) 1) $x651)))
 (let ((?x388 (+ k!2 m!1)))
 (let ((?x537 (+ (* ?x521 ?x485 ?x388 ?x388 ?x522 ?x522) (* (- 1) (* ?x521 ?x485 ?x485 ?x485 ?x388 ?x388 ?x388)))))
 (let ((?x520 (+ ?x640 (* 6 (* m!1 6 k!2 k!2)) (* 6 (* m!1 6 c!3 c!3)) ?x635 ?x602 (* k!2 k!2 m!1 m!1 m!1) (* 2 (* c!3 k!2 m!1 m!1 m!1)) ?x346 (* 72 (* c!3 c!3 m!1)) (* 144 (* c!3 k!2 m!1)) (* 72 (* k!2 k!2 m!1)) ?x707 (* 36 (* c!3 k!2 m!1 m!1)) (* 18 (* k!2 k!2 m!1 m!1)) ?x242 ?x282 ?x220 ?x694 ?x695 (* 6 (* m!1 6 c!3 k!2)) ?x395 ?x481 ?x513 ?x482 (* 6 (* m!1 6 k!2 c!3)) ?x516 ?x519 ?x480)))
 (let (($x399 (and $x511 (= (+ ?x488 ?x535 ?x536 ?x187 ?x502) 4) $x492 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x520 ?x537 ?x538) 0)))))
 (let (($x237 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let ((?x73 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x483 (+ (* ?x317 ?x361 ?x73 ?x73 (+ c k) (+ c k)) (* (- 1) (* ?x317 ?x361 ?x361 ?x361 ?x73 ?x73 ?x73)))))
 (let ((?x702 (* 2 (* k k k n))))
 (let ((?x701 (* 6 (* c k k n))))
 (let ((?x700 (* 6 (* c c k n))))
 (let ((?x699 (* 2 (* c c c n))))
 (let ((?x619 (* k k k)))
 (let ((?x698 (* 3 (* c k k))))
 (let ((?x697 (* 3 (* c c k))))
 (let ((?x582 (* c c c)))
 (let ((?x576 (* k k k n n)))
 (let ((?x704 (* 3 (* c k k n n))))
 (let ((?x703 (* 3 (* c c k n n))))
 (let ((?x569 (* c c c n n)))
 (let ((?x533 (* 18 (* k k m m))))
 (let ((?x532 (* 36 (* c k m m))))
 (let ((?x531 (* 18 (* c c m m))))
 (let ((?x392 (* c c m m m)))
 (let ((?x534 (* 2 (* c k m m m))))
 (let ((?x389 (* k k m m m)))
 (let ((?x381 (* 216 (* c c))))
 (let ((?x526 (* 432 (* c k))))
 (let ((?x49 (* k k)))
 (let ((?x428 (* 216 ?x49)))
 (let ((?x308 (+ ?x428 (* 6 (* m 6 k k)) (* 6 (* m 6 c c)) ?x526 ?x381 ?x389 ?x534 ?x392 (* 72 (* c c m)) (* 144 (* c k m)) (* 72 (* k k m)) ?x531 ?x532 ?x533 ?x569 ?x703 ?x704 ?x576 ?x582 (* 6 (* m 6 c k)) ?x697 ?x698 ?x619 ?x699 (* 6 (* m 6 k c)) ?x700 ?x701 ?x702)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x216 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x212 (= ?x216 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x308 ?x483 ?x117) 0))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x112 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let ((?x73 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x483 (+ (* ?x317 ?x361 ?x73 ?x73 (+ c k) (+ c k)) (* (- 1) (* ?x317 ?x361 ?x361 ?x361 ?x73 ?x73 ?x73)))))
 (let ((?x501 (+ (* ?x361 ?x361 ?x361 (+ c k) (+ c k)) (* ?x317 ?x317 (+ c k) (+ c k) (+ c k)))))
 (let (($x170 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x94 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x670 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= ?x670 (- 4)) $x94 $x170 (not (= (* ?x501 ?x483 ?x117) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x397 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let ((?x73 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x483 (+ (* ?x317 ?x361 ?x73 ?x73 (+ c k) (+ c k)) (* (- 1) (* ?x317 ?x361 ?x361 ?x361 ?x73 ?x73 ?x73)))))
 (let ((?x702 (* 2 (* k k k n))))
 (let ((?x701 (* 6 (* c k k n))))
 (let ((?x700 (* 6 (* c c k n))))
 (let ((?x699 (* 2 (* c c c n))))
 (let ((?x619 (* k k k)))
 (let ((?x698 (* 3 (* c k k))))
 (let ((?x697 (* 3 (* c c k))))
 (let ((?x582 (* c c c)))
 (let ((?x576 (* k k k n n)))
 (let ((?x704 (* 3 (* c k k n n))))
 (let ((?x703 (* 3 (* c c k n n))))
 (let ((?x569 (* c c c n n)))
 (let ((?x533 (* 18 (* k k m m))))
 (let ((?x532 (* 36 (* c k m m))))
 (let ((?x531 (* 18 (* c c m m))))
 (let ((?x392 (* c c m m m)))
 (let ((?x534 (* 2 (* c k m m m))))
 (let ((?x389 (* k k m m m)))
 (let ((?x381 (* 216 (* c c))))
 (let ((?x526 (* 432 (* c k))))
 (let ((?x49 (* k k)))
 (let ((?x428 (* 216 ?x49)))
 (let ((?x308 (+ ?x428 (* 6 (* m 6 k k)) (* 6 (* m 6 c c)) ?x526 ?x381 ?x389 ?x534 ?x392 (* 72 (* c c m)) (* 144 (* c k m)) (* 72 (* k k m)) ?x531 ?x532 ?x533 ?x569 ?x703 ?x704 ?x576 ?x582 (* 6 (* m 6 c k)) ?x697 ?x698 ?x619 ?x699 (* 6 (* m 6 k c)) ?x700 ?x701 ?x702)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x216 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x212 (= ?x216 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x351 (and $x128 $x212 $x264 $x302 (not (= (* ?x308 ?x483 ?x117) 0)))))
 (let ((?x501 (+ (* ?x361 ?x361 ?x361 (+ c k) (+ c k)) (* ?x317 ?x317 (+ c k) (+ c k) (+ c k)))))
 (let (($x170 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x94 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x670 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x419 (and $x128 (= ?x670 (- 4)) $x94 $x170 (not (= (* ?x501 ?x483 ?x117) 0)))))
 (rewrite (= $x419 $x351))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x72 (+ c k)))
 (let ((?x80 (+ (* ?x72 ?x72 (+ m 6) (+ m 6) (+ m 6)) (* ?x72 ?x72 ?x72 ?x69 ?x69))))
 (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x77 (- (* ?x72 ?x72 ?x73 ?x73 ?x74 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77 ?x80)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x243 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let ((?x73 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x483 (+ (* ?x317 ?x361 ?x73 ?x73 (+ c k) (+ c k)) (* (- 1) (* ?x317 ?x361 ?x361 ?x361 ?x73 ?x73 ?x73)))))
 (let ((?x501 (+ (* ?x361 ?x361 ?x361 (+ c k) (+ c k)) (* ?x317 ?x317 (+ c k) (+ c k) (+ c k)))))
 (let (($x170 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x94 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x670 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x419 (and $x128 (= ?x670 (- 4)) $x94 $x170 (not (= (* ?x501 ?x483 ?x117) 0)))))
 (let ((?x69 (+ n 1)))
 (let ((?x72 (+ c k)))
 (let ((?x80 (+ (* ?x72 ?x72 (+ m 6) (+ m 6) (+ m 6)) (* ?x72 ?x72 ?x72 ?x69 ?x69))))
 (let ((?x74 (+ m 6)))
 (let ((?x77 (- (* ?x72 ?x72 ?x73 ?x73 ?x74 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77 ?x80)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x419)))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x454 (mp (mp @x87 (quant-intro (proof-bind ?x243) (= $x86 $x112)) $x112) (rewrite (= $x112 $x112)) $x112)))
 (let ((@x503 (mp~ (mp @x454 (quant-intro (proof-bind ?x397) (= $x112 $x237)) $x237) (sk (~ $x237 $x399)) $x399)))
 (let ((@x612 (mp @x503 (rewrite (= $x399 $x363)) $x363)))
 (let ((@x370 (and-elim @x612 $x511)))
 (let ((@x298 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x511) $x171)) @x370 $x171)))
 (let (($x353 (>= ?x510 6)))
 (let ((@x504 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x511) $x353)) @x370 $x353)))
 (let (($x280 (not (<= ?x559 0))))
 (let (($x332 (>= ?x559 0)))
 (let ((@x193 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x92 $x280 (not $x332))) (and-elim @x612 $x651) (or $x280 (not $x332)))))
 (let ((@x444 (unit-resolution @x193 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x332)) @x504 @x298 false) $x332) $x280)))
 ((_ th-lemma arith farkas 1 1 1) @x444 @x504 @x298 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        23
 :arith-assert-upper        24
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             159
 :arith-nonlinear-bounds    21
 :arith-num-rows            11
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      4
 :arith-tableau-max-columns 61
 :arith-tableau-max-rows    11
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                19.58
 :memory                    19.11
 :mk-bool-var               18
 :mk-clause                 16
 :num-allocs                479606
 :num-checks                1
 :propagations              10
 :rlimit-count              3314
 :time                      0.01
 :total-time                0.02)
