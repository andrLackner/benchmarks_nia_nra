unsat
((set-logic NIA)
(proof
(let (($x57 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (+ q 1)))
 (let ((?x48 (* ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x46 (- r y00)))
 (let ((?x47 (* ?x43 ?x46 ?x46 ?x46 y00 y00 y00)))
 (let ((?x45 (* ?x43 ?x43)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00 y00 y00)))
 (let ((?x49 (- ?x44 ?x45)))
 (let ((?x50 (- ?x49 ?x47)))
 (let ((?x51 (- ?x50 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x52 (* ?x42 ?x51)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x55))))))))))))))))))) :qid k!29))
 ))
 (let (($x437 (= $x57 false)))
 (let (($x430 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x436 (elim-unused (= $x430 false))))
 (let (($x433 (= $x57 $x430)))
 (let ((?x524 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (+ q 1)))
 (let ((?x48 (* ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x46 (- r y00)))
 (let ((?x47 (* ?x43 ?x46 ?x46 ?x46 y00 y00 y00)))
 (let ((?x45 (* ?x43 ?x43)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00 y00 y00)))
 (let ((?x49 (- ?x44 ?x45)))
 (let ((?x50 (- ?x49 ?x47)))
 (let ((?x51 (- ?x50 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x52 (* ?x42 ?x51)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x56 (and $x33 $x41 $x55)))
 (let (($x428 (= $x56 false)))
 (let (($x467 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x86 (= (+ (* (- 1) y00) y) 0)))
 (let (($x518 (and $x86 $x467 false)))
 (let (($x421 (= $x55 false)))
 (let ((@x420 (rewrite (= (or false) false))))
 (let (($x416 (or false)))
 (let (($x417 (= $x55 $x416)))
 (let (($x414 (= $x54 false)))
 (let ((@x413 (rewrite (= (not true) false))))
 (let (($x409 (not true)))
 (let (($x410 (= $x54 $x409)))
 (let (($x407 (= $x53 true)))
 (let ((@x406 (rewrite (= (= 0 0) true))))
 (let (($x402 (= 0 0)))
 (let (($x403 (= $x53 $x402)))
 (let ((?x81 (+ 1 q)))
 (let ((?x487 (* y00 y00 ?x81 ?x81 ?x81)))
 (let ((?x495 (* (- 1) ?x487)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x169 (+ r ?x62)))
 (let ((?x465 (* y00 y00 y00 ?x81 ?x169 ?x169 ?x169)))
 (let ((?x476 (* (- 1) ?x465)))
 (let ((?x107 (* ?x81 ?x81)))
 (let ((?x455 (* (- 1) ?x107)))
 (let ((?x440 (* (- 1) (* y00 y00 y00 ?x81 ?x81))))
 (let ((?x501 (+ ?x440 ?x455 ?x476 ?x495)))
 (let ((?x506 (* 0 ?x501)))
 (let ((@x498 (rewrite (= (- (+ ?x440 ?x455 ?x476) ?x487) (+ (+ ?x440 ?x455 ?x476) ?x495)))))
 (let ((@x83 (rewrite (= ?x43 ?x81))))
 (let ((@x329 (monotonicity @x83 @x83 @x83 (= ?x48 (* ?x81 ?x81 ?x81 y00 y00)))))
 (let ((@x491 (trans @x329 (rewrite (= (* ?x81 ?x81 ?x81 y00 y00) ?x487)) (= ?x48 ?x487))))
 (let ((@x171 (rewrite (= ?x46 ?x169))))
 (let ((@x174 (monotonicity @x83 @x171 @x171 @x171 (= ?x47 (* ?x81 ?x169 ?x169 ?x169 y00 y00 y00)))))
 (let ((@x472 (trans @x174 (rewrite (= (* ?x81 ?x169 ?x169 ?x169 y00 y00 y00) ?x465)) (= ?x47 ?x465))))
 (let ((@x89 (monotonicity (rewrite (= ?x28 (- 1))) @x83 @x83 (= ?x44 (* (- 1) ?x81 ?x81 y00 y00 y00)))))
 (let ((@x447 (trans @x89 (rewrite (= (* (- 1) ?x81 ?x81 y00 y00 y00) ?x440)) (= ?x44 ?x440))))
 (let ((@x464 (trans (monotonicity @x447 (rewrite (= ?x45 ?x107)) (= ?x49 (- ?x440 ?x107))) (rewrite (= (- ?x440 ?x107) (+ ?x440 ?x455))) (= ?x49 (+ ?x440 ?x455)))))
 (let ((@x481 (trans (monotonicity @x464 @x472 (= ?x50 (- (+ ?x440 ?x455) ?x465))) (rewrite (= (- (+ ?x440 ?x455) ?x465) (+ (+ ?x440 ?x455) ?x476))) (= ?x50 (+ (+ ?x440 ?x455) ?x476)))))
 (let ((@x486 (trans @x481 (rewrite (= (+ (+ ?x440 ?x455) ?x476) (+ ?x440 ?x455 ?x476))) (= ?x50 (+ ?x440 ?x455 ?x476)))))
 (let ((@x500 (trans (monotonicity @x486 @x491 (= ?x51 (- (+ ?x440 ?x455 ?x476) ?x487))) @x498 (= ?x51 (+ (+ ?x440 ?x455 ?x476) ?x495)))))
 (let ((@x505 (trans @x500 (rewrite (= (+ (+ ?x440 ?x455 ?x476) ?x495) ?x501)) (= ?x51 ?x501))))
 (let ((@x78 (trans (monotonicity (rewrite (= ?x30 ?x62)) (= ?x42 (+ ?x62 y00))) (rewrite (= (+ ?x62 y00) 0)) (= ?x42 0))))
 (let ((@x511 (trans (monotonicity @x78 @x505 (= ?x52 ?x506)) (rewrite (= ?x506 0)) $x53)))
 (let ((@x515 (trans (monotonicity (trans (monotonicity @x511 $x403) @x406 $x407) $x410) @x413 $x414)))
 (let ((@x520 (monotonicity (rewrite (= $x33 $x86)) (rewrite (= $x41 $x467)) (trans (monotonicity @x515 $x417) @x420 $x421) (= $x56 $x518))))
 (trans @x520 (rewrite (= $x518 false)) $x428)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (mp @x58 (trans (quant-intro (proof-bind ?x524) $x433) @x436 $x437) false))))))))))

(:max-memory   19.04
 :memory       19.04
 :num-allocs   237388
 :rlimit-count 330
 :time         0.00
 :total-time   0.02)
