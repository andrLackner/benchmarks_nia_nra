unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x372 (* 2 n!0)))
 (let ((?x178 (* (- 3) c!3)))
 (let ((?x297 (* (- 1) k!2)))
 (let ((?x307 (* k!2 n!0)))
 (let ((?x362 (+ ?x307 ?x297 ?x178 ?x372)))
 (let (($x155 (<= ?x362 (- 1))))
 (let (($x352 (= ?x362 (- 1))))
 (let ((?x179 (* (- 3) k!2)))
 (let ((?x328 (* m!1 n!0)))
 (let ((?x392 (+ 3 ?x307 ?x328 ?x179 ?x178 ?x372)))
 (let ((?x399 (+ k!2 c!3)))
 (let ((?x244 (+ k!2 m!1)))
 (let ((?x387 (+ 6 m!1)))
 (let ((?x386 (+ 1 n!0)))
 (let ((?x360 (* ?x386 ?x386 ?x386 ?x386 ?x387 ?x387 ?x387 ?x387 ?x387 ?x387 ?x244 ?x244 ?x244 ?x244 ?x244 ?x244 ?x399 ?x392)))
 (let (($x391 (= ?x360 0)))
 (let (($x359 (not $x391)))
 (let ((?x414 (+ (* 3 (* n!0 n!0)) ?x297 (* 3 n!0))))
 (let (($x406 (= ?x414 (- 1))))
 (let ((?x92 (* (- 9) n!0)))
 (let ((?x198 (* 18 c!3)))
 (let ((?x322 (* 5 k!2)))
 (let ((?x107 (* (- 1) (* k!2 k!2))))
 (let ((?x108 (* c!3 n!0)))
 (let ((?x102 (* 9 ?x108)))
 (let ((?x265 (+ ?x102 ?x107 ?x322 ?x198 ?x92)))
 (let (($x268 (= ?x265 4)))
 (let ((?x194 (+ m!1 (* (- 6) n!0))))
 (let (($x195 (= ?x194 6)))
 (let (($x388 (and $x195 $x268 $x352 $x406 $x359)))
 (let ((?x172 (* ?x386 ?x386 ?x386 ?x386 ?x387 ?x387 ?x387 ?x387 ?x387 ?x387 ?x244 ?x244 ?x244 ?x244 ?x244 ?x244 (+ c!3 k!2) (+ 3 ?x178 ?x179 ?x372 ?x307 ?x328))))
 (let (($x183 (and $x195 (= (+ ?x198 ?x322 ?x92 ?x107 ?x102) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x307)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x172 0)))))
 (let (($x420 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x403 (+ 3 ?x215 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x335 (+ 1 n)))
 (let ((?x232 (* ?x335 ?x335 ?x335 ?x335 ?x410 ?x410 ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x403)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x206 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x202 (= ?x206 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 $x202 $x254 $x292 (not (= ?x232 0))))))))))))))))))) :qid k!34))
 ))
 (let (($x166 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x335 (+ 1 n)))
 (let ((?x614 (* ?x335 ?x335 ?x335 ?x335 ?x410 ?x410 ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x419)))
 (let (($x144 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x128 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= ?x128 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x144 (not (= ?x614 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x219 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x403 (+ 3 ?x215 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x335 (+ 1 n)))
 (let ((?x232 (* ?x335 ?x335 ?x335 ?x335 ?x410 ?x410 ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x403)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x206 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x202 (= ?x206 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x619 (and $x118 $x202 $x254 $x292 (not (= ?x232 0)))))
 (let ((?x614 (* ?x335 ?x335 ?x335 ?x335 ?x410 ?x410 ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 (+ 3 ?x215 (* (- 4) k) (* ?x335 ?x71) (* (- 1) m) ?x59))))
 (let (($x144 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x128 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x189 (and $x118 (= ?x128 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x144 (not (= ?x614 0)))))
 (rewrite (= $x189 $x619))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x78 (- 1)))
 (let ((?x68 (+ c k)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x80 (* ?x77 ?x78 ?x71 ?x71 ?x71 ?x79 ?x79 ?x79 ?x68 ?x72 ?x72 ?x78 ?x71 ?x71 ?x71 ?x79 ?x79 ?x79 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x80 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x168 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x335 (+ 1 n)))
 (let ((?x614 (* ?x335 ?x335 ?x335 ?x335 ?x410 ?x410 ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x419)))
 (let (($x144 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x128 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x189 (and $x118 (= ?x128 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x144 (not (= ?x614 0)))))
 (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x78 (- 1)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x80 (* ?x77 ?x78 ?x71 ?x71 ?x71 ?x79 ?x79 ?x79 ?x68 ?x72 ?x72 ?x78 ?x71 ?x71 ?x71 ?x79 ?x79 ?x79 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x80 0))))))
 (rewrite (= $x84 $x189)))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x311 (mp (mp @x86 (quant-intro (proof-bind ?x168) (= $x85 $x166)) $x166) (rewrite (= $x166 $x166)) $x166)))
 (let ((@x365 (mp~ (mp @x311 (quant-intro (proof-bind ?x219) (= $x166 $x420)) $x420) (sk (~ $x420 $x183)) $x183)))
 (let ((@x601 (mp @x365 (rewrite (= $x183 $x388)) $x388)))
 (let ((@x221 (and-elim @x601 $x352)))
 (let ((@x127 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x352) $x155)) @x221 $x155)))
 (let (($x148 (>= ?x362 (- 1))))
 (let ((@x243 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x352) $x148)) @x221 $x148)))
 (let (($x412 (<= ?x414 (- 1))))
 (let ((@x358 (and-elim @x601 $x406)))
 (let ((@x139 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x406) $x412)) @x358 $x412)))
 (let (($x411 (>= ?x414 (- 1))))
 (let ((@x274 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x406) $x411)) @x358 $x411)))
 (let (($x90 (<= ?x194 6)))
 (let ((@x355 (and-elim @x601 $x195)))
 (let ((@x251 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x195) $x90)) @x355 $x90)))
 (let (($x149 (>= ?x194 6)))
 (let ((@x281 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x195) $x149)) @x355 $x149)))
 (let (($x962 (<= ?x392 0)))
 (let (($x157 (<= ?x265 4)))
 (let ((@x357 (and-elim @x601 $x268)))
 (let ((@x481 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x157)) @x357 $x157)))
 (let (($x156 (>= ?x265 4)))
 (let ((@x508 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x156)) @x357 $x156)))
 (let ((@x1006 ((_ th-lemma arith) (hypothesis (not $x962)) @x281 @x251 @x508 @x481 @x243 @x127 @x508 @x481 @x274 @x139 @x243 @x127 false)))
 (let (($x951 (not (<= ?x360 0))))
 (let (($x336 (>= ?x360 0)))
 (let (($x378 (<= ?x386 0)))
 (let (($x324 (not $x336)))
 (let ((@x308 (hypothesis $x324)))
 (let (($x458 (<= ?x386 1)))
 (let (($x653 (not $x458)))
 (let ((@x493 (hypothesis $x653)))
 (let ((?x266 (* n!0 n!0)))
 (let (($x342 (>= ?x266 0)))
 (let ((@x210 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x342)) false) $x342)))
 (let ((@x489 ((_ th-lemma arith) @x308 @x493 @x139 @x210 @x127 @x281 @x493 @x139 @x493 @x281 @x493 @x281 @x251 @x281 @x251 @x274 @x139 @x274 @x139 @x274 @x139 @x243 @x127 @x274 @x139 false)))
 (let ((@x464 (hypothesis (not $x378))))
 (let (($x484 (<= ?x244 7)))
 (let (($x453 (not $x484)))
 (let ((@x455 (hypothesis $x484)))
 (let ((@x454 ((_ th-lemma arith farkas -1 -1 -1 -4/3 4 4 4 4 4 -1 2/3 -2/3 1 1 1 1 1 1 1 1 1 1 1 1) @x281 @x464 @x464 @x274 @x464 @x455 @x281 @x139 @x210 @x243 @x455 @x281 @x308 @x139 @x210 @x464 @x127 @x281 @x464 @x139 @x210 @x464 @x281 @x464 false)))
 (let ((@x442 (hypothesis $x458)))
 (let ((@x656 (lemma ((_ th-lemma arith farkas 1/3 -1/3 1/3 -3 1 1) (hypothesis $x453) @x251 @x274 @x442 @x464 @x442 false) (or $x653 $x484 $x378))))
 (let ((@x690 (unit-resolution @x656 (unit-resolution (lemma @x454 (or $x453 $x378 $x336)) @x464 @x308 $x453) @x464 (unit-resolution (lemma @x489 (or $x458 $x336)) @x308 $x458) false)))
 (let (($x377 (>= ?x386 0)))
 (let (($x203 (<= ?x399 1)))
 (let (($x477 (not $x203)))
 (let (($x554 (<= ?x399 0)))
 (let (($x496 (not $x554)))
 (let (($x146 (>= ?x399 0)))
 (let (($x390 (<= ?x386 (- 2))))
 (let ((@x299 (hypothesis (not $x377))))
 (let ((@x415 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) @x308 @x281 (hypothesis (not $x390)) @x251 @x299 false) (or $x390 $x336 $x377))))
 (let ((@x549 (unit-resolution @x415 @x299 @x308 $x390)))
 (let (($x375 (<= ?x244 0)))
 (let (($x126 (not $x375)))
 (let (($x367 (= ?x244 0)))
 (let (($x188 (not $x367)))
 (let (($x374 (>= ?x244 0)))
 (let ((@x366 (hypothesis $x367)))
 (let ((@x321 ((_ th-lemma arith farkas 1 1 1) @x308 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x188 $x374)) @x366 $x374) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x188 $x375)) @x366 $x375) false)))
 (let (($x213 (>= (+ ?x266 ?x297 (* (- 3) n!0)) 5)))
 (let (($x290 (not $x213)))
 (let ((@x381 (hypothesis $x213)))
 (let ((@x288 (lemma ((_ th-lemma arith) @x299 @x139 @x381 @x139 @x381 @x299 @x139 @x381 false) (or $x290 $x377))))
 (let ((@x309 (lemma ((_ th-lemma arith farkas 3/2 -1/2 -1 1) (hypothesis $x290) @x274 @x281 (hypothesis (not $x374)) false) (or $x374 $x213))))
 (let ((@x487 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x367 $x126 (not $x374))) (unit-resolution @x309 (unit-resolution @x288 @x299 $x290) $x374) (unit-resolution (lemma @x321 (or $x188 $x336)) @x308 $x188) $x126)))
 (let ((@x262 (hypothesis $x390)))
 (let ((@x125 (hypothesis $x126)))
 (let ((@x121 ((_ th-lemma arith) @x308 (hypothesis (not $x146)) @x125 @x262 @x262 @x251 @x281 @x251 @x243 @x127 @x274 @x139 false)))
 (let ((@x490 (unit-resolution (lemma @x121 (or $x146 $x336 $x375 (not $x390))) @x487 @x308 @x549 $x146)))
 (let ((@x494 (lemma ((_ th-lemma arith farkas 1 1 1) @x308 (hypothesis $x146) (hypothesis $x554) false) (or $x496 $x336 (not $x146)))))
 (let (($x550 (>= (+ (* 3 ?x108) k!2 (* 4 c!3) (* (- 2) n!0)) 176)))
 (let (($x380 (<= k!2 19)))
 (let (($x300 (not $x380)))
 (let (($x400 (>= ?x266 10)))
 (let (($x124 (not $x400)))
 (let ((@x123 (hypothesis $x124)))
 (let ((@x242 ((_ th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1 1 1 1) @x308 @x251 @x262 @x243 @x123 @x274 @x251 @x262 @x281 @x123 @x274 @x125 @x127 @x139 false)))
 (let ((@x473 (unit-resolution (lemma @x242 (or (not $x390) $x336 $x400 $x375)) @x549 @x308 @x487 $x400)))
 (let ((@x623 (hypothesis $x380)))
 (let ((@x625 (hypothesis $x400)))
 (let ((@x163 (lemma ((_ th-lemma arith farkas 3 1 6 6 6 2 1) @x623 @x251 @x625 @x139 @x623 @x139 @x125 false) (or $x300 $x124 $x375))))
 (let ((@x472 (unit-resolution @x163 @x473 @x487 $x300)))
 (let (($x220 (>= ?x386 (- 2))))
 (let (($x596 (not $x220)))
 (let ((@x595 (lemma ((_ th-lemma arith farkas 1 1 1) @x625 @x262 (hypothesis $x220) false) (or $x596 $x124 (not $x390)))))
 (let ((@x470 (unit-resolution @x595 @x473 @x549 $x596)))
 (let ((@x499 (hypothesis $x203)))
 (let ((@x485 (hypothesis $x496)))
 (let ((@x480 (hypothesis $x550)))
 (let ((@x479 ((_ th-lemma arith) (hypothesis $x596) @x480 @x480 @x508 @x481 @x281 @x251 @x508 @x481 @x485 @x499 @x281 @x251 @x243 @x127 @x281 @x251 @x508 @x481 @x485 @x499 @x508 @x481 @x485 @x499 @x274 @x139 @x485 @x499 @x281 @x251 @x508 @x481 @x485 @x499 @x281 @x251 @x508 @x481 @x485 @x499 @x281 @x251 false)))
 (let ((@x469 (unit-resolution (lemma @x479 (or $x477 $x220 (not $x550) $x554)) @x470 ((_ th-lemma arith gomory-cut -1 -1 1 -1/2 1/2 1/2) @x472 @x549 @x243 @x470 @x472 @x508 $x550) (unit-resolution @x494 @x490 @x308 $x496) $x477)))
 (let ((@x714 (unit-resolution (lemma ((_ th-lemma arith) @x472 @x470 @x470 @x469 @x243 false) (or $x377 $x336)) @x308 $x377)))
 (let ((@x713 ((_ th-lemma arith farkas 1 1 1) @x308 @x714 (unit-resolution (lemma @x690 (or $x378 $x336)) @x308 $x378) false)))
 (let ((@x955 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x391 $x951 $x324)) (and-elim @x601 $x359) (or $x951 $x324))))
 (let ((@x1524 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x955 (lemma @x713 $x336) $x951) (hypothesis (>= ?x392 0)) (lemma @x1006 $x962) false)))
 ((_ th-lemma arith) (lemma @x1524 (not (>= ?x392 0))) @x243 @x127 @x281 @x251 @x274 @x139 @x243 @x127 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 47
 :arith-assert-diseq        19
 :arith-assert-lower        585
 :arith-assert-upper        530
 :arith-bound-prop          7
 :arith-branch-var          46
 :arith-conflicts           54
 :arith-eq-adapter          15
 :arith-fixed-eqs           86
 :arith-gcd-tests           476
 :arith-gomory-cuts         30
 :arith-grobner             69
 :arith-ineq-splits         46
 :arith-max-min             3654
 :arith-nonlinear-bounds    107
 :arith-nonlinear-horner    746
 :arith-num-rows            16
 :arith-patches             95
 :arith-patches_succ        4
 :arith-pivots              1084
 :arith-pseudo-nonlinear    83
 :arith-row-summations      6913
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    16
 :conflicts                 59
 :decisions                 250
 :del-clause                94
 :final-checks              249
 :max-memory                19.89
 :memory                    19.27
 :minimized-lits            4
 :mk-bool-var               302
 :mk-clause                 217
 :num-allocs                2153050
 :num-checks                1
 :propagations              257
 :rlimit-count              470096
 :time                      0.10
 :total-time                0.11)
