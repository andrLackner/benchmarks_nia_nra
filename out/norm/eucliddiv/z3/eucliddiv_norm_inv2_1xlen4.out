unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x83 (* y00 q00)))
 (let ((?x1230 (+ r00 ?x83 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x485 (<= ?x1230 0)))
 (let (($x1231 (= ?x1230 0)))
 (let ((?x358 (* y00 y00 y00 y00 q00)))
 (let ((?x300 (* y00 y00 y00 r00)))
 (let ((?x604 (+ (* 2 (* y00 y00 y00 q!2 r!1 r!1 r!1)) (* (- 1) (* y00 y00 y00 q!2 q!2 r!1 r!1 r!1)) (* 3 (* y00 y00 y00 y00 r00 q!2 r!1)) (* (- 3) (* y00 y00 y00 y00 r!1 r!1)) (* (- 1) (* y00 y00 y00 y00 y00 r00)) (* 3 (* y00 y00 y00 y00 q!2 q!2 r!1 r!1)) (* (- 2) (* y00 y00 y00 y00 y00 q!2 r!1)) ?x300 (* y00 y00 y00 y00 y00 r!1) (* (- 3) (* y00 y00 y00 y00 y00 q!2 q!2 r!1)) (* y00 y00 y00 y00 y00 y00 q!2) (* y00 y00 y00 y00 y00 y00 q!2 q!2) (* (- 1) (* y00 y00 r00 q!2 r!1)) ?x358 (* (- 1) (* y00 y00 r!1 r!1 r!1 r!1)) (* (- 1) (* y00 y00 y00 y00 y00 r00 q!2)) (* (- 1) (* y00 y00 q!2 r!1 r!1 r!1 r!1)) (* y00 y00 y00 q00 q!2 r!1 r!1 r!1) (* (- 3) (* y00 y00 y00 y00 q00 r!1 r!1)) (* (- 3) (* y00 y00 y00 y00 q00 q!2 r!1 r!1)) (* (- 2) (* y00 y00 r00 r!1)) (* 2 (* y00 y00 r!1 r!1)) (* (- 2) (* y00 y00 y00 q00 r!1)) (* 3 (* y00 y00 y00 y00 y00 q00 q!2 r!1)) (* (- 1) (* y00 y00 y00 y00 y00 y00 q00 q!2)) (* (- 1) (* y00 y00 y00 q00 q!2 r!1)) (* y00 y00 r00 q!2 r!1 r!1 r!1) (* y00 y00 r00 r!1 r!1 r!1) (* (- 3) (* y00 y00 y00 r00 q!2 r!1 r!1)) (* 3 (* y00 y00 y00 y00 r00 r!1)) (* (- 3) (* y00 y00 y00 r00 r!1 r!1)) (* y00 y00 q!2 r!1 r!1) (* (- 1) (* y00 y00 y00 r!1)) (* 2 (* y00 y00 y00 q!2 r!1)) (* 3 (* y00 y00 y00 r!1 r!1 r!1)) (* y00 y00 y00 q00 r!1 r!1 r!1) (* 3 (* y00 y00 y00 y00 y00 q00 r!1)) (* y00 y00 y00 q!2 q!2 r!1) (* (- 1) (* y00 y00 y00 y00 q!2)) (* (- 1) (* y00 y00 y00 y00 y00 y00 q00)))))
 (let (($x605 (= ?x604 0)))
 (let (($x768 (not $x605)))
 (let ((?x657 (+ y00 (* (- 1) y!0))))
 (let (($x651 (= ?x657 0)))
 (let (($x970 (and $x651 $x1231 $x768)))
 (let ((?x1408 (* y00 y00 y00 y00 y00 y00 q00)))
 (let ((?x374 (* (- 1) ?x358)))
 (let ((?x301 (* (- 1) ?x300)))
 (let ((?x247 (* y00 y00 y00 y00 y00 r00)))
 (let ((?x137 (+ (* r!1 y00 y00 y00) (* (- 2) (* q!2 r!1 y00 y00 y00)) (* q!2 y00 y00 y00 y00) (* (- 1) (* r!1 r!1 r!1 y00 y00 r00)) (* (- 1) (* q!2 r!1 r!1 r!1 y00 y00 r00)) (* 3 (* r!1 r!1 y00 y00 y00 r00)) (* 3 (* q!2 r!1 r!1 y00 y00 y00 r00)) (* (- 3) (* r!1 y00 y00 y00 y00 r00)) (* (- 3) (* q!2 r!1 y00 y00 y00 y00 r00)) ?x247 (* q!2 y00 y00 y00 y00 y00 r00) (* 2 (* r!1 y00 y00 r00)) ?x301 ?x374 (* (- 2) (* r!1 r!1 y00 y00)) (* 2 (* r!1 y00 y00 y00 q00)) (* q!2 r!1 y00 y00 y00 q00) (* (- 3) (* r!1 r!1 r!1 y00 y00 y00)) (* (- 2) (* q!2 r!1 r!1 r!1 y00 y00 y00)) (* q!2 q!2 r!1 r!1 r!1 y00 y00 y00) (* 3 (* r!1 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 r!1 r!1 y00 y00 y00 y00)) (* (- 1) (* r!1 y00 y00 y00 y00 y00)) (* 2 (* q!2 r!1 y00 y00 y00 y00 y00)) (* 3 (* q!2 q!2 r!1 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 y00 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 y00 y00)) (* q!2 r!1 y00 y00 r00) (* (- 1) (* q!2 r!1 r!1 y00 y00)) (* (- 1) (* q!2 q!2 r!1 y00 y00 y00)) (* r!1 r!1 r!1 r!1 y00 y00) (* q!2 r!1 r!1 r!1 r!1 y00 y00) (* (- 1) (* r!1 r!1 r!1 y00 y00 y00 q00)) (* (- 1) (* q!2 r!1 r!1 r!1 y00 y00 y00 q00)) (* 3 (* r!1 r!1 y00 y00 y00 y00 q00)) (* 3 (* q!2 r!1 r!1 y00 y00 y00 y00 q00)) (* (- 3) (* r!1 y00 y00 y00 y00 y00 q00)) (* (- 3) (* q!2 r!1 y00 y00 y00 y00 y00 q00)) ?x1408 (* q!2 y00 y00 y00 y00 y00 y00 q00))))
 (let (($x234 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x83)) 0) (not (= ?x137 0)))))
 (let (($x1475 (exists ((q Int) (r Int) (y Int) )(! (let ((?x1408 (* y00 y00 y00 y00 y00 y00 q00)))
 (let ((?x358 (* y00 y00 y00 y00 q00)))
 (let ((?x374 (* (- 1) ?x358)))
 (let ((?x300 (* y00 y00 y00 r00)))
 (let ((?x301 (* (- 1) ?x300)))
 (let ((?x247 (* y00 y00 y00 y00 y00 r00)))
 (let ((?x1468 (+ (* r y00 y00 y00) (* (- 2) (* q r y00 y00 y00)) (* q y00 y00 y00 y00) (* (- 1) (* r r r y00 y00 r00)) (* (- 1) (* q r r r y00 y00 r00)) (* 3 (* r r y00 y00 y00 r00)) (* 3 (* q r r y00 y00 y00 r00)) (* (- 3) (* r y00 y00 y00 y00 r00)) (* (- 3) (* q r y00 y00 y00 y00 r00)) ?x247 (* q y00 y00 y00 y00 y00 r00) (* 2 (* r y00 y00 r00)) ?x301 ?x374 (* (- 2) (* r r y00 y00)) (* 2 (* r y00 y00 y00 q00)) (* q r y00 y00 y00 q00) (* (- 3) (* r r r y00 y00 y00)) (* (- 2) (* q r r r y00 y00 y00)) (* q q r r r y00 y00 y00) (* 3 (* r r y00 y00 y00 y00)) (* (- 3) (* q q r r y00 y00 y00 y00)) (* (- 1) (* r y00 y00 y00 y00 y00)) (* 2 (* q r y00 y00 y00 y00 y00)) (* 3 (* q q r y00 y00 y00 y00 y00)) (* (- 1) (* q y00 y00 y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00 y00 y00)) (* q r y00 y00 r00) (* (- 1) (* q r r y00 y00)) (* (- 1) (* q q r y00 y00 y00)) (* r r r r y00 y00) (* q r r r r y00 y00) (* (- 1) (* r r r y00 y00 y00 q00)) (* (- 1) (* q r r r y00 y00 y00 q00)) (* 3 (* r r y00 y00 y00 y00 q00)) (* 3 (* q r r y00 y00 y00 y00 q00)) (* (- 3) (* r y00 y00 y00 y00 y00 q00)) (* (- 3) (* q r y00 y00 y00 y00 y00 q00)) ?x1408 (* q y00 y00 y00 y00 y00 y00 q00))))
 (let (($x113 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x113 (not (= ?x1468 0))))))))))) :qid k!29))
 ))
 (let (($x452 (exists ((q Int) (r Int) (y Int) )(! (let ((?x81 (* (- 1) y00)))
 (let ((?x432 (+ r ?x81)))
 (let ((?x407 (+ 1 q)))
 (let ((?x829 (+ (* 2 (* y00 y00 y00 ?x407 ?x432)) (* r00 y00 y00 ?x407 ?x432 ?x432 ?x432) (* (- 1) (* r00 y00 y00 ?x432)) (* (- 1) (* q00 y00 y00 y00 y00 ?x407)) (* (- 1) (* r00 y00 y00 y00 ?x407)) (* y00 y00 ?x432 ?x432) (* y00 y00 y00 y00 ?x407 ?x407) (* (- 1) (* q00 y00 y00 y00 ?x407 ?x432)) (* (- 1) (* y00 y00 y00 ?x407 ?x407 ?x432 ?x432 ?x432)) (* (- 1) (* r00 y00 y00 ?x407 ?x432)) (* (- 1) (* q00 y00 y00 y00 ?x432)) (* y00 y00 ?x407 ?x432 ?x432) (* y00 y00 y00 ?x407 ?x407 ?x432) (* (- 1) (* y00 y00 ?x407 ?x432 ?x432 ?x432 ?x432)) (* q00 y00 y00 y00 ?x407 ?x432 ?x432 ?x432))))
 (let (($x112 (not (= ?x829 0))))
 (let (($x316 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x316 $x112))))))) :qid k!29))
 ))
 (let ((?x524 (lambda ((q Int) (r Int) (y Int) )(let ((?x1408 (* y00 y00 y00 y00 y00 y00 q00)))
 (let ((?x358 (* y00 y00 y00 y00 q00)))
 (let ((?x374 (* (- 1) ?x358)))
 (let ((?x300 (* y00 y00 y00 r00)))
 (let ((?x301 (* (- 1) ?x300)))
 (let ((?x247 (* y00 y00 y00 y00 y00 r00)))
 (let ((?x1468 (+ (* r y00 y00 y00) (* (- 2) (* q r y00 y00 y00)) (* q y00 y00 y00 y00) (* (- 1) (* r r r y00 y00 r00)) (* (- 1) (* q r r r y00 y00 r00)) (* 3 (* r r y00 y00 y00 r00)) (* 3 (* q r r y00 y00 y00 r00)) (* (- 3) (* r y00 y00 y00 y00 r00)) (* (- 3) (* q r y00 y00 y00 y00 r00)) ?x247 (* q y00 y00 y00 y00 y00 r00) (* 2 (* r y00 y00 r00)) ?x301 ?x374 (* (- 2) (* r r y00 y00)) (* 2 (* r y00 y00 y00 q00)) (* q r y00 y00 y00 q00) (* (- 3) (* r r r y00 y00 y00)) (* (- 2) (* q r r r y00 y00 y00)) (* q q r r r y00 y00 y00) (* 3 (* r r y00 y00 y00 y00)) (* (- 3) (* q q r r y00 y00 y00 y00)) (* (- 1) (* r y00 y00 y00 y00 y00)) (* 2 (* q r y00 y00 y00 y00 y00)) (* 3 (* q q r y00 y00 y00 y00 y00)) (* (- 1) (* q y00 y00 y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00 y00 y00)) (* q r y00 y00 r00) (* (- 1) (* q r r y00 y00)) (* (- 1) (* q q r y00 y00 y00)) (* r r r r y00 y00) (* q r r r r y00 y00) (* (- 1) (* r r r y00 y00 y00 q00)) (* (- 1) (* q r r r y00 y00 y00 q00)) (* 3 (* r r y00 y00 y00 y00 q00)) (* 3 (* q r r y00 y00 y00 y00 q00)) (* (- 3) (* r y00 y00 y00 y00 y00 q00)) (* (- 3) (* q r y00 y00 y00 y00 y00 q00)) ?x1408 (* q y00 y00 y00 y00 y00 y00 q00))))
 (let (($x113 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x277 (and (= (+ y (* (- 1) y00)) 0) $x113 (not (= ?x1468 0)))))
 (let ((?x81 (* (- 1) y00)))
 (let ((?x432 (+ r ?x81)))
 (let ((?x407 (+ 1 q)))
 (let ((?x829 (+ (* 2 (* y00 y00 y00 ?x407 ?x432)) (* r00 y00 y00 ?x407 ?x432 ?x432 ?x432) (* (- 1) (* r00 y00 y00 ?x432)) (* (- 1) (* q00 y00 y00 y00 y00 ?x407)) (* (- 1) (* r00 y00 y00 y00 ?x407)) (* y00 y00 ?x432 ?x432) (* y00 y00 y00 y00 ?x407 ?x407) (* (- 1) (* q00 y00 y00 y00 ?x407 ?x432)) (* (- 1) (* y00 y00 y00 ?x407 ?x407 ?x432 ?x432 ?x432)) (* (- 1) (* r00 y00 y00 ?x407 ?x432)) (* (- 1) (* q00 y00 y00 y00 ?x432)) (* y00 y00 ?x407 ?x432 ?x432) (* y00 y00 y00 ?x407 ?x407 ?x432) (* (- 1) (* y00 y00 ?x407 ?x432 ?x432 ?x432 ?x432)) (* q00 y00 y00 y00 ?x407 ?x432 ?x432 ?x432))))
 (let (($x112 (not (= ?x829 0))))
 (let (($x316 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x434 (and (= (+ y00 (* (- 1) y)) 0) $x316 $x112)))
 (rewrite (= $x434 $x277)))))))))))))))))))
 ))
 (let (($x267 (exists ((q Int) (r Int) (y Int) )(! (let ((?x81 (* (- 1) y00)))
 (let ((?x432 (+ r ?x81)))
 (let ((?x407 (+ 1 q)))
 (let ((?x829 (+ (* 2 (* y00 y00 y00 ?x407 ?x432)) (* r00 y00 y00 ?x407 ?x432 ?x432 ?x432) (* (- 1) (* r00 y00 y00 ?x432)) (* (- 1) (* q00 y00 y00 y00 y00 ?x407)) (* (- 1) (* r00 y00 y00 y00 ?x407)) (* y00 y00 ?x432 ?x432) (* y00 y00 y00 y00 ?x407 ?x407) (* (- 1) (* q00 y00 y00 y00 ?x407 ?x432)) (* (- 1) (* y00 y00 y00 ?x407 ?x407 ?x432 ?x432 ?x432)) (* (- 1) (* r00 y00 y00 ?x407 ?x432)) (* (- 1) (* q00 y00 y00 y00 ?x432)) (* y00 y00 ?x407 ?x432 ?x432) (* y00 y00 y00 ?x407 ?x407 ?x432) (* (- 1) (* y00 y00 ?x407 ?x432 ?x432 ?x432 ?x432)) (* q00 y00 y00 y00 ?x407 ?x432 ?x432 ?x432))))
 (let (($x112 (not (= ?x829 0))))
 (let (($x316 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ ?x81 y) 0) $x316 $x112))))))) :qid k!29))
 ))
 (let ((?x443 (lambda ((q Int) (r Int) (y Int) )(let ((?x81 (* (- 1) y00)))
 (let ((?x432 (+ r ?x81)))
 (let ((?x407 (+ 1 q)))
 (let ((?x829 (+ (* 2 (* y00 y00 y00 ?x407 ?x432)) (* r00 y00 y00 ?x407 ?x432 ?x432 ?x432) (* (- 1) (* r00 y00 y00 ?x432)) (* (- 1) (* q00 y00 y00 y00 y00 ?x407)) (* (- 1) (* r00 y00 y00 y00 ?x407)) (* y00 y00 ?x432 ?x432) (* y00 y00 y00 y00 ?x407 ?x407) (* (- 1) (* q00 y00 y00 y00 ?x407 ?x432)) (* (- 1) (* y00 y00 y00 ?x407 ?x407 ?x432 ?x432 ?x432)) (* (- 1) (* r00 y00 y00 ?x407 ?x432)) (* (- 1) (* q00 y00 y00 y00 ?x432)) (* y00 y00 ?x407 ?x432 ?x432) (* y00 y00 y00 ?x407 ?x407 ?x432) (* (- 1) (* y00 y00 ?x407 ?x432 ?x432 ?x432 ?x432)) (* q00 y00 y00 y00 ?x407 ?x432 ?x432 ?x432))))
 (let (($x112 (not (= ?x829 0))))
 (let (($x316 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x434 (and (= (+ y00 (* (- 1) y)) 0) $x316 $x112)))
 (let (($x119 (and (= (+ ?x81 y) 0) $x316 $x112)))
 (rewrite (= $x119 $x434)))))))))))
 ))
 (let (($x76 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x43 y00 y00 y00)))
 (let ((?x48 (- (+ ?x44 (* ?x42 ?x43 ?x43 ?x43 r00 y00 y00)) (* ?x43 r00 y00 y00))))
 (let ((?x53 (- (- (+ ?x48 ?x44) (* ?x42 q00 y00 y00 y00 y00)) (* ?x42 r00 y00 y00 y00))))
 (let ((?x56 (+ ?x53 (* ?x43 ?x43 y00 y00) (* ?x42 ?x42 y00 y00 y00 y00))))
 (let ((?x62 (- (- ?x56 (* ?x42 q00 ?x43 y00 y00 y00)) (* ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00))))
 (let ((?x64 (- (- ?x62 (* ?x42 ?x43 r00 y00 y00)) (* q00 ?x43 y00 y00 y00))))
 (let ((?x67 (+ ?x64 (* ?x42 ?x43 ?x43 y00 y00) (* ?x42 ?x42 ?x43 y00 y00 y00))))
 (let ((?x71 (+ (- ?x67 (* ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00)) (* ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x71 0)))))))))))))) :qid k!29))
 ))
 (let ((?x304 (lambda ((q Int) (r Int) (y Int) )(let ((?x81 (* (- 1) y00)))
 (let ((?x432 (+ r ?x81)))
 (let ((?x407 (+ 1 q)))
 (let ((?x829 (+ (* 2 (* y00 y00 y00 ?x407 ?x432)) (* r00 y00 y00 ?x407 ?x432 ?x432 ?x432) (* (- 1) (* r00 y00 y00 ?x432)) (* (- 1) (* q00 y00 y00 y00 y00 ?x407)) (* (- 1) (* r00 y00 y00 y00 ?x407)) (* y00 y00 ?x432 ?x432) (* y00 y00 y00 y00 ?x407 ?x407) (* (- 1) (* q00 y00 y00 y00 ?x407 ?x432)) (* (- 1) (* y00 y00 y00 ?x407 ?x407 ?x432 ?x432 ?x432)) (* (- 1) (* r00 y00 y00 ?x407 ?x432)) (* (- 1) (* q00 y00 y00 y00 ?x432)) (* y00 y00 ?x407 ?x432 ?x432) (* y00 y00 y00 ?x407 ?x407 ?x432) (* (- 1) (* y00 y00 ?x407 ?x432 ?x432 ?x432 ?x432)) (* q00 y00 y00 y00 ?x407 ?x432 ?x432 ?x432))))
 (let (($x112 (not (= ?x829 0))))
 (let (($x316 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x119 (and (= (+ ?x81 y) 0) $x316 $x112)))
 (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x44 (* ?x42 ?x43 y00 y00 y00)))
 (let ((?x48 (- (+ ?x44 (* ?x42 ?x43 ?x43 ?x43 r00 y00 y00)) (* ?x43 r00 y00 y00))))
 (let ((?x53 (- (- (+ ?x48 ?x44) (* ?x42 q00 y00 y00 y00 y00)) (* ?x42 r00 y00 y00 y00))))
 (let ((?x56 (+ ?x53 (* ?x43 ?x43 y00 y00) (* ?x42 ?x42 y00 y00 y00 y00))))
 (let ((?x62 (- (- ?x56 (* ?x42 q00 ?x43 y00 y00 y00)) (* ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00))))
 (let ((?x64 (- (- ?x62 (* ?x42 ?x43 r00 y00 y00)) (* q00 ?x43 y00 y00 y00))))
 (let ((?x67 (+ ?x64 (* ?x42 ?x43 ?x43 y00 y00) (* ?x42 ?x42 ?x43 y00 y00 y00))))
 (let ((?x71 (+ (- ?x67 (* ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00)) (* ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00))))
 (let (($x75 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x71 0))))))
 (rewrite (= $x75 $x119)))))))))))))))))))))
 ))
 (let ((@x77 (asserted $x76)))
 (let ((@x809 (mp (mp @x77 (quant-intro (proof-bind ?x304) (= $x76 $x267)) $x267) (rewrite (= $x267 $x267)) $x267)))
 (let ((@x841 (mp (mp @x809 (quant-intro (proof-bind ?x443) (= $x267 $x452)) $x452) (quant-intro (proof-bind ?x524) (= $x452 $x1475)) $x1475)))
 (let ((@x769 (mp (mp~ @x841 (sk (~ $x1475 $x234)) $x234) (rewrite (= $x234 $x970)) $x970)))
 (let ((@x1264 (and-elim @x769 $x1231)))
 (let ((@x409 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1231) $x485)) @x1264 $x485)))
 (let (($x1538 (>= ?x1230 0)))
 (let ((@x362 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1231) $x1538)) @x1264 $x1538)))
 (let (($x480 (<= ?x657 0)))
 (let ((@x773 (and-elim @x769 $x651)))
 (let ((@x775 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x651) $x480)) @x773 $x480)))
 (let (($x483 (>= ?x657 0)))
 (let ((@x1321 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x651) $x483)) @x773 $x483)))
 (let (($x306 (not (<= ?x604 0))))
 (let (($x1498 (>= ?x604 0)))
 (let ((@x413 (lemma ((_ th-lemma arith) (hypothesis (not $x1498)) @x1321 @x775 @x362 @x409 false) $x1498)))
 (let ((@x823 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x605 $x306 (not $x1498))) (and-elim @x769 $x768) (or $x306 (not $x1498)))))
 ((_ th-lemma arith) (unit-resolution @x823 @x413 $x306) @x1321 @x775 @x362 @x409 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        14
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-grobner             2
 :arith-max-min             366
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-pivots              3
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              4
 :max-memory                3.74
 :memory                    3.25
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1203178
 :num-checks                1
 :propagations              6
 :rlimit-count              5917
 :time                      0.01
 :total-time                0.02)
