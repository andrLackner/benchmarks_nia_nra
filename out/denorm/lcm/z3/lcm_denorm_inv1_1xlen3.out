unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x930 (+ k!00 k!10 (* (- 1) (* y!2 v!4)) (* (- 1) (* x!3 u!5)))))
 (let (($x733 (>= ?x930 0)))
 (let (($x938 (= ?x930 0)))
 (let ((?x519 (* x!3 u!5)))
 (let ((?x401 (* y!2 v!4)))
 (let ((?x236 (* (- 1) k!10)))
 (let ((?x247 (* (- 1) k!00)))
 (let ((?x529 (+ ?x247 ?x236 ?x401 ?x519)))
 (let ((?x780 (* v!4 v!4 u!5 u!5 u!5)))
 (let ((?x770 (* y!2 v!4 v!4 v!4)))
 (let ((?x763 (* (- 1) (* y!2 v!4 v!4 v!4 x!3 x!3 u!5 u!5 u!5))))
 (let ((?x578 (* v!4 v!4 v!4 v!4 v!4)))
 (let ((?x593 (* (- 1) (* v!4 v!4 v!4 x!3))))
 (let ((?x522 (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)))
 (let ((?x817 (+ ?x522 ?x593 ?x578 (* (- 3) (* y!2 v!4 v!4 v!4 v!4 x!3 x!3 u!5 u!5)) (* (- 1) (* y!2 v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3)) ?x763 (* (- 3) (* y!2 v!4 v!4 v!4 v!4 v!4 x!3 x!3 u!5)) (* 3 (* v!4 v!4 v!4 u!5 u!5)) ?x770 (* 3 (* v!4 v!4 v!4 v!4 u!5)) ?x780 (* v!4 v!4 v!4 x!3 x!3 x!3 u!5 u!5 u!5) (* 3 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 u!5 u!5)) (* 3 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 u!5)))))
 (let ((?x835 (* ?x817 ?x529)))
 (let (($x756 (= ?x835 0)))
 (let (($x830 (not $x756)))
 (let ((?x878 (* u!5 u!5 u!5 u!5 u!5)))
 (let ((?x814 (+ (* (- 3) (* y!2 y!2 y!2 v!4 u!5 u!5 u!5 u!5 u!5)) (* 6 (* y!2 y!2 v!4 x!3 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 v!4 v!4 x!3 x!3 u!5 u!5 u!5 u!5)) ?x763 (* y!2 u!5 u!5 u!5) (* 3 (* y!2 v!4 u!5 u!5)) (* 3 (* y!2 v!4 v!4 u!5)) ?x770 (* 2 (* v!4 u!5 u!5 u!5 u!5)) ?x780 (* 6 (* y!2 y!2 v!4 v!4 x!3 u!5 u!5 u!5 u!5)) (* 2 (* y!2 y!2 v!4 v!4 v!4 x!3 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 v!4 v!4 u!5 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 v!4 v!4 v!4 u!5 u!5 u!5)) ?x878 (* 2 (* y!2 y!2 x!3 u!5 u!5 u!5 u!5 u!5 u!5)) (* (- 1) (* y!2 x!3 x!3 u!5 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 v!4 x!3 x!3 u!5 u!5 u!5 u!5 u!5)))))
 (let ((?x726 (* ?x814 ?x529)))
 (let (($x742 (= ?x726 0)))
 (let (($x735 (or (not $x742) $x830)))
 (let (($x798 (and $x938 $x735)))
 (let ((?x833 (+ (* u!5 x!3) (* v!4 y!2) ?x247 ?x236)))
 (let ((?x880 (* u!5 u!5 u!5 v!4 v!4)))
 (let ((?x877 (* v!4 v!4 v!4 y!2)))
 (let ((?x873 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x525 (+ ?x873 ?x877 ?x880 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) ?x593 (* 3 (* u!5 u!5 v!4 v!4 v!4)) (* 3 (* u!5 v!4 v!4 v!4 v!4)) ?x578 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3) (* 3 (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* 3 (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) ?x522)))
 (let ((?x571 (+ (* 2 (* u!5 u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 u!5 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) ?x873 (* u!5 u!5 u!5 y!2) (* 3 (* u!5 u!5 v!4 y!2)) (* 3 (* u!5 v!4 v!4 y!2)) ?x877 ?x878 (* 2 (* u!5 u!5 u!5 u!5 v!4)) ?x880 (* 6 (* u!5 u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) (* 2 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2)))))
 (let (($x766 (and (= ?x833 0) (or (not (= (* ?x571 ?x833) 0)) (not (= (* ?x525 ?x833) 0))))))
 (let (($x340 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x236 (* (- 1) k!10)))
 (let ((?x247 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x267 (+ ?x33 ?x34 ?x247 ?x236)))
 (let ((?x349 (* v v v v v)))
 (let ((?x365 (* 3 (* u v v v v))))
 (let ((?x364 (* 3 (* u u v v v))))
 (let ((?x330 (* (- 1) (* v v v x))))
 (let ((?x291 (* (- 1) (* v v v v v v x x y))))
 (let ((?x259 (* u u u v v)))
 (let ((?x226 (* v v v y)))
 (let ((?x162 (* (- 1) (* u u u v v v x x y))))
 (let ((?x917 (+ ?x162 ?x226 ?x259 ?x291 (* (- 3) (* u v v v v v x x y)) (* (- 3) (* u u v v v v x x y)) ?x330 ?x364 ?x365 ?x349 (* u u u v v v x x x) (* 3 (* u u v v v v x x x)) (* 3 (* u v v v v v x x x)) (* v v v v v v x x x))))
 (let ((?x271 (* 2 (* u u u u v))))
 (let ((?x256 (* u u u u u)))
 (let ((?x245 (* 3 (* u v v y))))
 (let ((?x244 (* 3 (* u u v y))))
 (let ((?x219 (* u u u y)))
 (let ((?x148 (* (- 1) (* u u u u u u x x y))))
 (let ((?x679 (+ (* 2 (* u u u u u u x y y)) ?x148 (* (- 3) (* u u u u u v x x y)) (* (- 3) (* u u u u v v x x y)) ?x162 ?x219 ?x244 ?x245 ?x226 ?x256 ?x271 ?x259 (* 6 (* u u u u u v x y y)) (* 6 (* u u u u v v x y y)) (* 2 (* u u u v v v x y y)) (* (- 1) (* u u u u u u y y y)) (* (- 3) (* u u u u u v y y y)) (* (- 3) (* u u u u v v y y y)) (* (- 1) (* u u u v v v y y y)))))
 (and (= ?x267 0) (or (not (= (* ?x679 ?x267) 0)) (not (= (* ?x917 ?x267) 0))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x221 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x236 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x354 (+ y ?x215)))
 (let ((?x285 (* ?x354 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x247 (* (- 1) k!00)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x229 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x354 x x v v v)) (* ?x354 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x255 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x343 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x361 (or (not (= (* ?x343 (+ ?x247 ?x255 ?x45 ?x236)) 0)) (not (= (* ?x229 (+ ?x247 ?x56 ?x285 ?x236)) 0)))))
 (let ((?x249 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x249 0) $x361))))))))))))))))))) :qid k!29))
 ))
 (let ((?x336 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x236 (* (- 1) k!10)))
 (let ((?x247 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x267 (+ ?x33 ?x34 ?x247 ?x236)))
 (let ((?x349 (* v v v v v)))
 (let ((?x365 (* 3 (* u v v v v))))
 (let ((?x364 (* 3 (* u u v v v))))
 (let ((?x330 (* (- 1) (* v v v x))))
 (let ((?x291 (* (- 1) (* v v v v v v x x y))))
 (let ((?x259 (* u u u v v)))
 (let ((?x226 (* v v v y)))
 (let ((?x162 (* (- 1) (* u u u v v v x x y))))
 (let ((?x917 (+ ?x162 ?x226 ?x259 ?x291 (* (- 3) (* u v v v v v x x y)) (* (- 3) (* u u v v v v x x y)) ?x330 ?x364 ?x365 ?x349 (* u u u v v v x x x) (* 3 (* u u v v v v x x x)) (* 3 (* u v v v v v x x x)) (* v v v v v v x x x))))
 (let ((?x271 (* 2 (* u u u u v))))
 (let ((?x256 (* u u u u u)))
 (let ((?x245 (* 3 (* u v v y))))
 (let ((?x244 (* 3 (* u u v y))))
 (let ((?x219 (* u u u y)))
 (let ((?x148 (* (- 1) (* u u u u u u x x y))))
 (let ((?x679 (+ (* 2 (* u u u u u u x y y)) ?x148 (* (- 3) (* u u u u u v x x y)) (* (- 3) (* u u u u v v x x y)) ?x162 ?x219 ?x244 ?x245 ?x226 ?x256 ?x271 ?x259 (* 6 (* u u u u u v x y y)) (* 6 (* u u u u v v x y y)) (* 2 (* u u u v v v x y y)) (* (- 1) (* u u u u u u y y y)) (* (- 3) (* u u u u u v y y y)) (* (- 3) (* u u u u v v y y y)) (* (- 1) (* u u u v v v y y y)))))
 (let (($x977 (and (= ?x267 0) (or (not (= (* ?x679 ?x267) 0)) (not (= (* ?x917 ?x267) 0))))))
 (let ((?x215 (* (- 1) x)))
 (let ((?x354 (+ y ?x215)))
 (let ((?x285 (* ?x354 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x229 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x354 x x v v v)) (* ?x354 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x255 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x343 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x361 (or (not (= (* ?x343 (+ ?x247 ?x255 ?x45 ?x236)) 0)) (not (= (* ?x229 (+ ?x247 ?x56 ?x285 ?x236)) 0)))))
 (let ((?x249 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x145 (and (= ?x249 0) $x361)))
 (rewrite (= $x145 $x977))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x370 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x236 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x354 (+ y ?x215)))
 (let ((?x285 (* ?x354 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x247 (* (- 1) k!00)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x229 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x354 x x v v v)) (* ?x354 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x255 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x343 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x361 (or (not (= (* ?x343 (+ ?x247 ?x255 ?x45 ?x236)) 0)) (not (= (* ?x229 (+ ?x247 ?x56 ?x285 ?x236)) 0)))))
 (and (= (+ ?x247 (* x u) (* y v) ?x236) 0) $x361)))))))))))))))))) :qid k!29))
 ))
 (let ((?x230 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x236 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x354 (+ y ?x215)))
 (let ((?x285 (* ?x354 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x247 (* (- 1) k!00)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x229 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x354 x x v v v)) (* ?x354 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x255 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x343 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x361 (or (not (= (* ?x343 (+ ?x247 ?x255 ?x45 ?x236)) 0)) (not (= (* ?x229 (+ ?x247 ?x56 ?x285 ?x236)) 0)))))
 (let ((?x249 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x145 (and (= ?x249 0) $x361)))
 (let (($x367 (and (= (+ ?x247 (* x u) (* y v) ?x236) 0) $x361)))
 (rewrite (= $x367 $x145)))))))))))))))))))))))
 ))
 (let (($x350 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x354 (+ y ?x215)))
 (let ((?x285 (* ?x354 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x229 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x354 x x v v v)) (* ?x354 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x255 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x343 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x358 (or (not (= (* ?x343 (+ ?x79 ?x255 ?x45 ?x95)) 0)) (not (= (* ?x229 (+ ?x79 ?x56 ?x285 ?x95)) 0)))))
 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x358))))))))))))))))))) :qid k!29))
 ))
 (let ((?x228 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x236 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x354 (+ y ?x215)))
 (let ((?x285 (* ?x354 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x247 (* (- 1) k!00)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x229 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x354 x x v v v)) (* ?x354 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x255 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x343 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x361 (or (not (= (* ?x343 (+ ?x247 ?x255 ?x45 ?x236)) 0)) (not (= (* ?x229 (+ ?x247 ?x56 ?x285 ?x236)) 0)))))
 (let (($x367 (and (= (+ ?x247 (* x u) (* y v) ?x236) 0) $x361)))
 (let ((?x369 (* ?x229 (+ (* (- 1) (* u00 x00)) ?x56 ?x285 (* (- 1) (* v00 y00))))))
 (let ((?x331 (* ?x343 (+ (* (- 1) (* u00 x00)) ?x255 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x227 (* y v)))
 (let ((?x224 (* x u)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let (($x323 (and (= (+ ?x79 ?x224 ?x227 ?x95) 0) (or (not (= ?x331 0)) (not (= ?x369 0))))))
 (rewrite (= $x323 $x367)))))))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x55 (+ u v)))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x57 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x64 (+ (* ?x29 ?x55 ?x55 ?x55 v v v x x ?x57) (* v v v ?x57) ?x63)))
 (let ((?x38 (* v00 y00)))
 (let ((?x65 (* (- (+ (* ?x29 u00 x00) (* ?x55 x) (* v ?x57)) ?x38) ?x64)))
 (let ((?x44 (+ v u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x42 (- x y)))
 (let ((?x51 (+ (* ?x29 u u u ?x44 ?x44 ?x44 ?x42 ?x42 y) ?x49 (* u u u ?x44 ?x44))))
 (let ((?x52 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x51)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x52 0)) (not (= ?x65 0))))))))))))))))) :qid k!29))
 ))
 (let ((?x284 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x215 (* (- 1) x)))
 (let ((?x354 (+ y ?x215)))
 (let ((?x285 (* ?x354 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x63 (* ?x55 ?x55 ?x55 v v)))
 (let ((?x229 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x354 x x v v v)) (* ?x354 v v v) ?x63)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x246 (+ x ?x84)))
 (let ((?x255 (* ?x246 u)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y)))
 (let ((?x343 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x246 ?x246 y u u u)) ?x49 (* ?x44 ?x44 u u u))))
 (let (($x358 (or (not (= (* ?x343 (+ ?x79 ?x255 ?x45 ?x95)) 0)) (not (= (* ?x229 (+ ?x79 ?x56 ?x285 ?x95)) 0)))))
 (let (($x323 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x358)))
 (let ((?x57 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x64 (+ (* ?x29 ?x55 ?x55 ?x55 v v v x x ?x57) (* v v v ?x57) ?x63)))
 (let (($x66 (= (* (- (+ (* ?x29 u00 x00) ?x56 (* v ?x57)) ?x38) ?x64) 0)))
 (let ((?x42 (- x y)))
 (let ((?x51 (+ (* ?x29 u u u ?x44 ?x44 ?x44 ?x42 ?x42 y) ?x49 (* u u u ?x44 ?x44))))
 (let (($x53 (= (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x51) 0)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x69 (and $x41 (or (not $x53) (not $x66)))))
 (rewrite (= $x69 $x323)))))))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x315 (mp (mp @x71 (quant-intro (proof-bind ?x284) (= $x70 $x350)) $x350) (rewrite (= $x350 $x350)) $x350)))
 (let ((@x220 (mp (mp @x315 (quant-intro (proof-bind ?x228) (= $x350 $x370)) $x370) (quant-intro (proof-bind ?x230) (= $x370 $x221)) $x221)))
 (let ((@x518 (mp~ (mp @x220 (quant-intro (proof-bind ?x336) (= $x221 $x340)) $x340) (sk (~ $x340 $x766)) $x766)))
 (let ((@x839 (mp @x518 (rewrite (= $x766 $x798)) $x798)))
 (let ((@x753 (and-elim @x839 $x938)))
 (let ((@x890 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x938) $x733)) @x753 $x733)))
 (let (($x776 (<= ?x930 0)))
 (let ((@x893 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x938) $x776)) @x753 $x776)))
 (let (($x957 (not (<= ?x835 0))))
 (let (($x782 (>= ?x835 0)))
 (let (($x734 (>= ?x726 0)))
 (let (($x764 (<= ?x726 0)))
 (let ((@x724 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x742 (not $x764) (not $x734))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x764)) @x893 @x890 false) $x764) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x734)) @x893 @x890 false) $x734) $x742)))
 (let ((@x466 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x756 $x957 (not $x782))) (unit-resolution (and-elim @x839 $x735) @x724 $x830) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x782)) @x893 @x890 false) $x782) $x957)))
 ((_ th-lemma arith farkas 1 1 1) @x466 @x893 @x890 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             320
 :arith-nonlinear-horner    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                8.40
 :memory                    3.18
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                34208974278.00
 :num-checks                1
 :propagations              14
 :rlimit-count              6622170
 :time                      4.49
 :total-time                4.50)
