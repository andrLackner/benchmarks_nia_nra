unsat
((set-logic NIA)
(proof
(let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x46 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x49 (* ?x43 ?x43 ?x43 ?x46 y00 y00 y00)))
 (let ((?x48 (* ?x43 ?x43 ?x43 ?x46 y00)))
 (let ((?x47 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43)))
 (let ((?x50 (- ?x44 ?x45)))
 (let ((?x51 (- ?x50 ?x47)))
 (let ((?x52 (- ?x51 ?x48)))
 (let ((?x53 (- ?x52 ?x49)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x54 (* ?x42 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x57))))))))))))))))))))) :qid k!29))
 ))
 (let (($x474 (= $x59 false)))
 (let (($x467 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x473 (elim-unused (= $x467 false))))
 (let (($x470 (= $x59 $x467)))
 (let ((?x578 (lambda ((q Int) (r Int) (y Int) )(let ((?x46 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x49 (* ?x43 ?x43 ?x43 ?x46 y00 y00 y00)))
 (let ((?x48 (* ?x43 ?x43 ?x43 ?x46 y00)))
 (let ((?x47 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43)))
 (let ((?x50 (- ?x44 ?x45)))
 (let ((?x51 (- ?x50 ?x47)))
 (let ((?x52 (- ?x51 ?x48)))
 (let ((?x53 (- ?x52 ?x49)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x54 (* ?x42 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x58 (and $x33 $x41 $x57)))
 (let (($x465 (= $x58 false)))
 (let (($x504 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x88 (= (+ (* (- 1) y00) y) 0)))
 (let (($x572 (and $x88 $x504 false)))
 (let (($x458 (= $x57 false)))
 (let ((@x457 (rewrite (= (or false) false))))
 (let (($x453 (or false)))
 (let (($x454 (= $x57 $x453)))
 (let (($x451 (= $x56 false)))
 (let ((@x450 (rewrite (= (not true) false))))
 (let (($x446 (not true)))
 (let (($x447 (= $x56 $x446)))
 (let (($x444 (= $x55 true)))
 (let ((@x443 (rewrite (= (= 0 0) true))))
 (let (($x439 (= 0 0)))
 (let (($x440 (= $x55 $x439)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x195 (+ r ?x64)))
 (let ((?x83 (+ 1 q)))
 (let ((?x541 (* y00 y00 y00 ?x83 ?x83 ?x83 ?x195)))
 (let ((?x549 (* (- 1) ?x541)))
 (let ((?x522 (* y00 ?x83 ?x83 ?x83 ?x195)))
 (let ((?x530 (* (- 1) ?x522)))
 (let ((?x198 (* ?x83 ?x83 ?x83 ?x195 ?x195 ?x195)))
 (let ((?x258 (* (- 1) ?x198)))
 (let ((?x485 (* y00 ?x83 ?x83 ?x83)))
 (let ((?x500 (* (- 1) ?x485)))
 (let ((?x477 (* (- 1) (* ?x83 ?x83))))
 (let ((?x555 (+ ?x477 ?x500 ?x258 ?x530 ?x549)))
 (let ((?x560 (* 0 ?x555)))
 (let ((?x536 (+ ?x477 ?x500 ?x258 ?x530)))
 (let ((?x550 (+ ?x536 ?x549)))
 (let ((?x546 (- ?x536 ?x541)))
 (let ((@x197 (rewrite (= ?x46 ?x195))))
 (let ((@x85 (rewrite (= ?x43 ?x83))))
 (let ((@x326 (monotonicity @x85 @x85 @x85 @x197 (= ?x49 (* ?x83 ?x83 ?x83 ?x195 y00 y00 y00)))))
 (let ((@x545 (trans @x326 (rewrite (= (* ?x83 ?x83 ?x83 ?x195 y00 y00 y00) ?x541)) (= ?x49 ?x541))))
 (let ((@x533 (rewrite (= (- (+ ?x477 ?x500 ?x258) ?x522) (+ (+ ?x477 ?x500 ?x258) ?x530)))))
 (let ((@x245 (monotonicity @x85 @x85 @x85 @x197 (= ?x48 (* ?x83 ?x83 ?x83 ?x195 y00)))))
 (let ((@x526 (trans @x245 (rewrite (= (* ?x83 ?x83 ?x83 ?x195 y00) ?x522)) (= ?x48 ?x522))))
 (let ((@x261 (rewrite (= ?x47 ?x198))))
 (let ((@x126 (monotonicity @x85 @x85 @x85 (= ?x45 (* ?x83 ?x83 ?x83 y00)))))
 (let ((@x492 (trans @x126 (rewrite (= (* ?x83 ?x83 ?x83 y00) ?x485)) (= ?x45 ?x485))))
 (let ((@x91 (monotonicity (rewrite (= ?x28 (- 1))) @x85 @x85 (= ?x44 (* (- 1) ?x83 ?x83)))))
 (let ((@x498 (monotonicity (trans @x91 (rewrite (= (* (- 1) ?x83 ?x83) ?x477)) (= ?x44 ?x477)) @x492 (= ?x50 (- ?x477 ?x485)))))
 (let ((@x508 (trans @x498 (rewrite (= (- ?x477 ?x485) (+ ?x477 ?x500))) (= ?x50 (+ ?x477 ?x500)))))
 (let ((@x516 (trans (monotonicity @x508 @x261 (= ?x51 (- (+ ?x477 ?x500) ?x198))) (rewrite (= (- (+ ?x477 ?x500) ?x198) (+ (+ ?x477 ?x500) ?x258))) (= ?x51 (+ (+ ?x477 ?x500) ?x258)))))
 (let ((@x521 (trans @x516 (rewrite (= (+ (+ ?x477 ?x500) ?x258) (+ ?x477 ?x500 ?x258))) (= ?x51 (+ ?x477 ?x500 ?x258)))))
 (let ((@x535 (trans (monotonicity @x521 @x526 (= ?x52 (- (+ ?x477 ?x500 ?x258) ?x522))) @x533 (= ?x52 (+ (+ ?x477 ?x500 ?x258) ?x530)))))
 (let ((@x540 (trans @x535 (rewrite (= (+ (+ ?x477 ?x500 ?x258) ?x530) ?x536)) (= ?x52 ?x536))))
 (let ((@x554 (trans (monotonicity @x540 @x545 (= ?x53 ?x546)) (rewrite (= ?x546 ?x550)) (= ?x53 ?x550))))
 (let ((@x80 (trans (monotonicity (rewrite (= ?x30 ?x64)) (= ?x42 (+ ?x64 y00))) (rewrite (= (+ ?x64 y00) 0)) (= ?x42 0))))
 (let ((@x562 (monotonicity @x80 (trans @x554 (rewrite (= ?x550 ?x555)) (= ?x53 ?x555)) (= ?x54 ?x560))))
 (let ((@x567 (trans (monotonicity (trans @x562 (rewrite (= ?x560 0)) $x55) $x440) @x443 $x444)))
 (let ((@x571 (trans (monotonicity (trans (monotonicity @x567 $x447) @x450 $x451) $x454) @x457 $x458)))
 (let ((@x574 (monotonicity (rewrite (= $x33 $x88)) (rewrite (= $x41 $x504)) @x571 (= $x58 $x572))))
 (trans @x574 (rewrite (= $x572 false)) $x465)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (mp @x60 (trans (quant-intro (proof-bind ?x578) $x470) @x473 $x474) false))))))))))

(:max-memory   3.40
 :memory       3.10
 :mk-bool-var  5
 :num-allocs   919269
 :rlimit-count 383
 :time         0.01
 :total-time   0.01)
