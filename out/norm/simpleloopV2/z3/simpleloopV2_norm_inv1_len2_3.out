unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x183 (* (- 1) y!0)))
 (let ((?x869 (* (- 1) x!1)))
 (let ((?x872 (+ y00 x00 ?x869 ?x183)))
 (let (($x875 (<= ?x872 0)))
 (let (($x1271 (= ?x872 0)))
 (let ((?x490 (* (- 6) (* x00 x!1 x!1 y!0))))
 (let ((?x299 (* (- 2) (* x00 y!0))))
 (let ((?x1136 (* y00 x!1 x!1 x!1)))
 (let ((?x1124 (* 2 (* y00 x!1))))
 (let ((?x1122 (* y00 x!1 x!1 x!1 y!0 y!0)))
 (let ((?x1153 (* (- 6) (* y00 x!1 x!1 y!0))))
 (let ((?x890 (* x00 x!1 x!1 x!1 y!0 y!0)))
 (let ((?x889 (* 3 (* x00 x!1 y!0 y!0))))
 (let ((?x880 (* x00 y!0 y!0)))
 (let ((?x722 (+ 1 x!1)))
 (let ((?x770 (+ (- 1) y!0)))
 (let ((?x723 (* (- 1) (* ?x770 ?x770 ?x722 ?x722 ?x722 ?x722))))
 (let ((?x752 (* (- 1) (* ?x770 ?x770 ?x770 ?x722 ?x722 ?x722))))
 (let ((?x750 (* x!1 x!1)))
 (let ((?x651 (* y00 y!0 y!0)))
 (let ((?x605 (* 3 (* y00 x!1 y!0 y!0))))
 (let ((?x656 (* (- 2) (* y00 y!0))))
 (let ((?x298 (* x00 x!1 x!1 x!1)))
 (let ((?x848 (* 2 (* x00 x!1))))
 (let ((?x120 (* x!1 y!0)))
 (let ((?x666 (+ ?x120 ?x848 ?x298 (* 3 (* y00 x!1 x!1 y!0 y!0)) ?x656 ?x605 ?x651 ?x750 ?x752 ?x723 x!1 (* (- 6) (* x00 x!1 y!0)) y!0 (* 3 (* x00 x!1 x!1)) (* (- 2) (* x00 x!1 x!1 x!1 y!0)) ?x880 ?x889 (* 3 (* x00 x!1 x!1 y!0 y!0)) ?x890 (* (- 2) (* y00 x!1 x!1 x!1 y!0)) ?x1153 ?x1122 ?x1124 (* 3 (* y00 x!1 x!1)) ?x1136 (* (- 6) (* y00 x!1 y!0)) ?x299 ?x490)))
 (let (($x526 (= ?x666 0)))
 (let (($x873 (not $x526)))
 (let ((?x744 (+ 1 y!0)))
 (let ((?x741 (+ (- 1) x!1)))
 (let ((?x853 (* ?x741 ?x741 ?x741 ?x744 ?x744 ?x744)))
 (let ((?x671 (+ ?x120 ?x848 ?x298 (* (- 3) (* y00 x!1 x!1 y!0 y!0)) ?x656 ?x605 (* (- 1) ?x651) (* (- 1) (* ?x741 ?x741 ?x741 ?x741 ?x744 ?x744)) ?x750 ?x869 (* 6 (* x00 x!1 y!0)) (* (- 1) ?x853) ?x183 (* (- 3) (* x00 x!1 x!1)) (* 2 (* x00 x!1 x!1 x!1 y!0)) (* (- 1) ?x880) ?x889 (* (- 3) (* x00 x!1 x!1 y!0 y!0)) ?x890 (* 2 (* y00 x!1 x!1 x!1 y!0)) ?x1153 ?x1122 ?x1124 (* (- 3) (* y00 x!1 x!1)) ?x1136 (* 6 (* y00 x!1 y!0)) ?x299 ?x490)))
 (let (($x675 (= ?x671 0)))
 (let (($x876 (or (not $x675) $x873)))
 (let (($x1123 (and $x1271 $x876)))
 (let ((?x771 (* y!0 y!0 y00)))
 (let ((?x247 (* 3 (* x!1 x!1 y!0 y!0 y00))))
 (let ((?x382 (* 3 (* x!1 x!1 y00))))
 (let ((?x719 (* (- 6) (* x!1 y!0 y00))))
 (let ((?x782 (* (- 2) (* x!1 x!1 x!1 y!0 y00))))
 (let ((?x727 (* ?x741 ?x741 ?x741 ?x741 ?x744 ?x744)))
 (let ((?x781 (* 3 (* x!1 x!1 y!0 y!0 x00))))
 (let ((?x226 (* y!0 y!0 x00)))
 (let ((?x816 (* (- 2) (* x!1 x!1 x!1 y!0 x00))))
 (let ((?x808 (* (- 6) (* x!1 y!0 x00))))
 (let ((?x815 (* 3 (* x!1 x!1 x00))))
 (let ((?x730 (+ x!1 y!0 (* (- 1) ?x120) (* (- 2) (* x!1 x00)) ?x815 (* (- 1) (* x!1 x!1 x!1 x00)) (* 2 (* y!0 x00)) ?x808 (* 6 (* x!1 x!1 y!0 x00)) ?x816 ?x226 (* (- 3) (* x!1 y!0 y!0 x00)) ?x781 (* (- 1) (* x!1 x!1 x!1 y!0 y!0 x00)) ?x727 ?x782 (* 6 (* x!1 x!1 y!0 y00)) ?x719 (* (- 1) (* x!1 x!1 x!1 y00)) ?x382 (* (- 2) (* x!1 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y00)) ?x247 (* (- 3) (* x!1 y!0 y!0 y00)) ?x771 (* 2 (* y!0 y00)) ?x853 (* (- 1) ?x750))))
 (let ((?x386 (* x!1 x!1 x!1 y!0 y!0 y00)))
 (let ((?x774 (* x!1 x!1 x!1 y00)))
 (let ((?x777 (* x!1 x!1 x!1 y!0 y!0 x00)))
 (let ((?x713 (* x!1 x!1 x!1 x00)))
 (let ((?x756 (+ x!1 y!0 ?x120 (* 2 (* x!1 x00)) ?x815 ?x713 (* (- 2) (* y!0 x00)) ?x808 (* (- 6) (* x!1 x!1 y!0 x00)) ?x816 ?x226 (* 3 (* x!1 y!0 y!0 x00)) ?x781 ?x777 ?x782 (* (- 6) (* x!1 x!1 y!0 y00)) ?x719 ?x774 ?x382 (* 2 (* x!1 y00)) ?x386 ?x247 (* 3 (* x!1 y!0 y!0 y00)) ?x771 (* (- 2) (* y!0 y00)) ?x752 ?x723 ?x750)))
 (let (($x857 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x756 0)) (not (= ?x730 0))))))
 (let (($x794 (exists ((x Int) (y Int) )(! (let ((?x835 (* x x)))
 (let ((?x802 (* (- 1) ?x835)))
 (let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x731 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x549 (* y y00)))
 (let ((?x680 (* 2 ?x549)))
 (let ((?x533 (* y y y00)))
 (let ((?x525 (* x y y y00)))
 (let ((?x697 (* (- 3) ?x525)))
 (let ((?x663 (* 3 (* x x y y y00))))
 (let ((?x516 (* x x x y y y00)))
 (let ((?x632 (* (- 1) ?x516)))
 (let ((?x509 (* x y00)))
 (let ((?x660 (* (- 2) ?x509)))
 (let ((?x695 (* 3 (* x x y00))))
 (let ((?x498 (* x x x y00)))
 (let ((?x629 (* (- 1) ?x498)))
 (let ((?x694 (* (- 6) (* x y y00))))
 (let ((?x489 (* x x y y00)))
 (let ((?x693 (* 6 ?x489)))
 (let ((?x648 (* (- 2) (* x x x y y00))))
 (let ((?x465 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x318 (* x x x y y x00)))
 (let ((?x371 (* (- 1) ?x318)))
 (let ((?x435 (* 3 (* x x y y x00))))
 (let ((?x297 (* x y y x00)))
 (let ((?x447 (* (- 3) ?x297)))
 (let ((?x289 (* y y x00)))
 (let ((?x426 (* (- 2) (* x x x y x00))))
 (let ((?x241 (* x x y x00)))
 (let ((?x446 (* 6 ?x241)))
 (let ((?x444 (* (- 6) (* x y x00))))
 (let ((?x223 (* y x00)))
 (let ((?x417 (* 2 ?x223)))
 (let ((?x216 (* x x x x00)))
 (let ((?x363 (* (- 1) ?x216)))
 (let ((?x442 (* 3 (* x x x00))))
 (let ((?x205 (* x x00)))
 (let ((?x411 (* (- 2) ?x205)))
 (let ((?x114 (* x y)))
 (let ((?x115 (* (- 1) ?x114)))
 (let ((?x1249 (+ x y ?x115 ?x411 ?x442 ?x363 ?x417 ?x444 ?x446 ?x426 ?x289 ?x447 ?x435 ?x371 ?x465 ?x648 ?x693 ?x694 ?x629 ?x695 ?x660 ?x632 ?x663 ?x697 ?x533 ?x680 ?x731 ?x802)))
 (let ((?x783 (+ 1 x)))
 (let ((?x136 (+ (- 1) y)))
 (let ((?x784 (* ?x136 ?x136 ?x783 ?x783 ?x783 ?x783)))
 (let ((?x720 (* (- 1) ?x784)))
 (let ((?x739 (* ?x136 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x759 (* (- 1) ?x739)))
 (let ((?x603 (* (- 2) ?x549)))
 (let ((?x1043 (* 3 ?x525)))
 (let ((?x601 (* 2 ?x509)))
 (let ((?x1042 (* (- 6) ?x489)))
 (let ((?x896 (* 3 ?x297)))
 (let ((?x895 (* (- 6) ?x241)))
 (let ((?x328 (* (- 2) ?x223)))
 (let ((?x325 (* 2 ?x205)))
 (let ((?x230 (+ x y ?x114 ?x325 ?x442 ?x216 ?x328 ?x444 ?x895 ?x426 ?x289 ?x896 ?x435 ?x318 ?x648 ?x1042 ?x694 ?x498 ?x695 ?x601 ?x516 ?x663 ?x1043 ?x533 ?x603 ?x759 ?x720 ?x835)))
 (let (($x100 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x100 (or (not (= ?x230 0)) (not (= ?x1249 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x865 (exists ((x Int) (y Int) )(! (let ((?x92 (+ (- 1) x)))
 (let ((?x244 (* ?x92 ?x92)))
 (let ((?x102 (+ 1 y)))
 (let ((?x731 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x623 (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x942 (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x915 (* ?x92 ?x102)))
 (let ((?x859 (+ ?x915 ?x942 (* (- 1) (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x623 (* (- 1) (* x00 ?x92)) (* (- 1) (* y00 ?x92)) (* (- 1) ?x731) ?x244)))
 (let ((?x783 (+ 1 x)))
 (let ((?x854 (* ?x783 ?x783)))
 (let ((?x136 (+ (- 1) y)))
 (let ((?x739 (* ?x136 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x759 (* (- 1) ?x739)))
 (let ((?x773 (* y00 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x784 (* ?x136 ?x136 ?x783 ?x783 ?x783 ?x783)))
 (let ((?x720 (* (- 1) ?x784)))
 (let ((?x621 (* x00 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x137 (* ?x136 ?x783)))
 (let ((?x336 (+ ?x137 ?x621 ?x720 ?x773 (* (- 1) (* x00 ?x783)) (* (- 1) (* y00 ?x783)) ?x759 ?x854)))
 (let (($x576 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x576 (or (not (= ?x336 0)) (not (= ?x859 0)))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x349 (lambda ((x Int) (y Int) )(let ((?x835 (* x x)))
 (let ((?x802 (* (- 1) ?x835)))
 (let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x731 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x549 (* y y00)))
 (let ((?x680 (* 2 ?x549)))
 (let ((?x533 (* y y y00)))
 (let ((?x525 (* x y y y00)))
 (let ((?x697 (* (- 3) ?x525)))
 (let ((?x663 (* 3 (* x x y y y00))))
 (let ((?x516 (* x x x y y y00)))
 (let ((?x632 (* (- 1) ?x516)))
 (let ((?x509 (* x y00)))
 (let ((?x660 (* (- 2) ?x509)))
 (let ((?x695 (* 3 (* x x y00))))
 (let ((?x498 (* x x x y00)))
 (let ((?x629 (* (- 1) ?x498)))
 (let ((?x694 (* (- 6) (* x y y00))))
 (let ((?x489 (* x x y y00)))
 (let ((?x693 (* 6 ?x489)))
 (let ((?x648 (* (- 2) (* x x x y y00))))
 (let ((?x465 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x318 (* x x x y y x00)))
 (let ((?x371 (* (- 1) ?x318)))
 (let ((?x435 (* 3 (* x x y y x00))))
 (let ((?x297 (* x y y x00)))
 (let ((?x447 (* (- 3) ?x297)))
 (let ((?x289 (* y y x00)))
 (let ((?x426 (* (- 2) (* x x x y x00))))
 (let ((?x241 (* x x y x00)))
 (let ((?x446 (* 6 ?x241)))
 (let ((?x444 (* (- 6) (* x y x00))))
 (let ((?x223 (* y x00)))
 (let ((?x417 (* 2 ?x223)))
 (let ((?x216 (* x x x x00)))
 (let ((?x363 (* (- 1) ?x216)))
 (let ((?x442 (* 3 (* x x x00))))
 (let ((?x205 (* x x00)))
 (let ((?x411 (* (- 2) ?x205)))
 (let ((?x114 (* x y)))
 (let ((?x115 (* (- 1) ?x114)))
 (let ((?x1249 (+ x y ?x115 ?x411 ?x442 ?x363 ?x417 ?x444 ?x446 ?x426 ?x289 ?x447 ?x435 ?x371 ?x465 ?x648 ?x693 ?x694 ?x629 ?x695 ?x660 ?x632 ?x663 ?x697 ?x533 ?x680 ?x731 ?x802)))
 (let ((?x783 (+ 1 x)))
 (let ((?x136 (+ (- 1) y)))
 (let ((?x784 (* ?x136 ?x136 ?x783 ?x783 ?x783 ?x783)))
 (let ((?x720 (* (- 1) ?x784)))
 (let ((?x739 (* ?x136 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x759 (* (- 1) ?x739)))
 (let ((?x603 (* (- 2) ?x549)))
 (let ((?x1043 (* 3 ?x525)))
 (let ((?x601 (* 2 ?x509)))
 (let ((?x1042 (* (- 6) ?x489)))
 (let ((?x896 (* 3 ?x297)))
 (let ((?x895 (* (- 6) ?x241)))
 (let ((?x328 (* (- 2) ?x223)))
 (let ((?x325 (* 2 ?x205)))
 (let ((?x230 (+ x y ?x114 ?x325 ?x442 ?x216 ?x328 ?x444 ?x895 ?x426 ?x289 ?x896 ?x435 ?x318 ?x648 ?x1042 ?x694 ?x498 ?x695 ?x601 ?x516 ?x663 ?x1043 ?x533 ?x603 ?x759 ?x720 ?x835)))
 (let (($x100 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1058 (and $x100 (or (not (= ?x230 0)) (not (= ?x1249 0))))))
 (let ((?x244 (* ?x92 ?x92)))
 (let ((?x623 (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x942 (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x915 (* ?x92 ?x102)))
 (let ((?x859 (+ ?x915 ?x942 (* (- 1) ?x465) ?x623 (* (- 1) (* x00 ?x92)) (* (- 1) (* y00 ?x92)) (* (- 1) ?x731) ?x244)))
 (let ((?x854 (* ?x783 ?x783)))
 (let ((?x773 (* y00 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x621 (* x00 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x137 (* ?x136 ?x783)))
 (let ((?x336 (+ ?x137 ?x621 ?x720 ?x773 (* (- 1) (* x00 ?x783)) (* (- 1) (* y00 ?x783)) ?x759 ?x854)))
 (let (($x576 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x364 (and $x576 (or (not (= ?x336 0)) (not (= ?x859 0))))))
 (rewrite (= $x364 $x1058)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x914 (exists ((x Int) (y Int) )(! (let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x731 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x385 (* y00 ?x92)))
 (let ((?x229 (* x00 ?x92)))
 (let ((?x465 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x757 (+ (* (- 1) (* ?x92 ?x102)) (* (- 1) (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x465 (* (- 1) (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x229 ?x385 ?x731 (* (- 1) (* ?x92 ?x92)))))
 (let ((?x783 (+ 1 x)))
 (let ((?x136 (+ (- 1) y)))
 (let ((?x739 (* ?x136 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x745 (* y00 ?x783)))
 (let ((?x255 (* x00 ?x783)))
 (let ((?x784 (* ?x136 ?x136 ?x783 ?x783 ?x783 ?x783)))
 (let ((?x863 (+ (* (- 1) (* ?x136 ?x783)) (* (- 1) (* x00 ?x136 ?x136 ?x783 ?x783 ?x783)) ?x784 (* (- 1) (* y00 ?x136 ?x136 ?x783 ?x783 ?x783)) ?x255 ?x745 ?x739 (* (- 1) (* ?x783 ?x783)))))
 (let (($x576 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x576 (or (not (= ?x863 0)) (not (= ?x757 0))))))))))))))))))) :qid k!27))
 ))
 (let ((?x191 (lambda ((x Int) (y Int) )(let ((?x92 (+ (- 1) x)))
 (let ((?x244 (* ?x92 ?x92)))
 (let ((?x102 (+ 1 y)))
 (let ((?x731 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x623 (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x942 (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x915 (* ?x92 ?x102)))
 (let ((?x859 (+ ?x915 ?x942 (* (- 1) (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x623 (* (- 1) (* x00 ?x92)) (* (- 1) (* y00 ?x92)) (* (- 1) ?x731) ?x244)))
 (let ((?x783 (+ 1 x)))
 (let ((?x854 (* ?x783 ?x783)))
 (let ((?x136 (+ (- 1) y)))
 (let ((?x739 (* ?x136 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x759 (* (- 1) ?x739)))
 (let ((?x773 (* y00 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x784 (* ?x136 ?x136 ?x783 ?x783 ?x783 ?x783)))
 (let ((?x720 (* (- 1) ?x784)))
 (let ((?x621 (* x00 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x137 (* ?x136 ?x783)))
 (let ((?x336 (+ ?x137 ?x621 ?x720 ?x773 (* (- 1) (* x00 ?x783)) (* (- 1) (* y00 ?x783)) ?x759 ?x854)))
 (let (($x576 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x364 (and $x576 (or (not (= ?x336 0)) (not (= ?x859 0))))))
 (let ((?x385 (* y00 ?x92)))
 (let ((?x229 (* x00 ?x92)))
 (let ((?x465 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x757 (+ (* (- 1) ?x915) (* (- 1) ?x942) ?x465 (* (- 1) ?x623) ?x229 ?x385 ?x731 (* (- 1) ?x244))))
 (let ((?x745 (* y00 ?x783)))
 (let ((?x255 (* x00 ?x783)))
 (let ((?x863 (+ (* (- 1) ?x137) (* (- 1) ?x621) ?x784 (* (- 1) ?x773) ?x255 ?x745 ?x739 (* (- 1) ?x854))))
 (let (($x834 (and $x576 (or (not (= ?x863 0)) (not (= ?x757 0))))))
 (rewrite (= $x834 $x364))))))))))))))))))))))))))))))))
 ))
 (let (($x71 (exists ((x Int) (y Int) )(! (let ((?x53 (- y 1)))
 (let ((?x52 (+ x 1)))
 (let ((?x58 (+ (- (* (- 1) ?x52 ?x53) (* ?x52 ?x52 ?x52 x00 ?x53 ?x53)) (* ?x52 ?x52 ?x52 ?x52 ?x53 ?x53))))
 (let ((?x64 (+ (- ?x58 (* ?x52 ?x52 ?x52 ?x53 ?x53 y00)) (* ?x52 x00) (* ?x52 y00) (* ?x52 ?x52 ?x52 ?x53 ?x53 ?x53))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (+ (- (* (- 1) ?x35 ?x36) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x47 (+ (- ?x41 (* ?x35 ?x35 ?x35 ?x36 ?x36 y00)) (* ?x35 x00) (* ?x35 y00) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let (($x69 (or (not (= (- ?x47 (* ?x35 ?x35)) 0)) (not (= (- ?x64 (* ?x52 ?x52)) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x69)))))))))) :qid k!27))
 ))
 (let ((?x917 (lambda ((x Int) (y Int) )(let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x731 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x385 (* y00 ?x92)))
 (let ((?x229 (* x00 ?x92)))
 (let ((?x465 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x757 (+ (* (- 1) (* ?x92 ?x102)) (* (- 1) (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x465 (* (- 1) (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x229 ?x385 ?x731 (* (- 1) (* ?x92 ?x92)))))
 (let ((?x783 (+ 1 x)))
 (let ((?x136 (+ (- 1) y)))
 (let ((?x739 (* ?x136 ?x136 ?x136 ?x783 ?x783 ?x783)))
 (let ((?x745 (* y00 ?x783)))
 (let ((?x255 (* x00 ?x783)))
 (let ((?x784 (* ?x136 ?x136 ?x783 ?x783 ?x783 ?x783)))
 (let ((?x863 (+ (* (- 1) (* ?x136 ?x783)) (* (- 1) (* x00 ?x136 ?x136 ?x783 ?x783 ?x783)) ?x784 (* (- 1) (* y00 ?x136 ?x136 ?x783 ?x783 ?x783)) ?x255 ?x745 ?x739 (* (- 1) (* ?x783 ?x783)))))
 (let (($x576 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x834 (and $x576 (or (not (= ?x863 0)) (not (= ?x757 0))))))
 (let ((?x53 (- y 1)))
 (let ((?x52 (+ x 1)))
 (let ((?x58 (+ (- (* (- 1) ?x52 ?x53) (* ?x52 ?x52 ?x52 x00 ?x53 ?x53)) (* ?x52 ?x52 ?x52 ?x52 ?x53 ?x53))))
 (let ((?x64 (+ (- ?x58 (* ?x52 ?x52 ?x52 ?x53 ?x53 y00)) (* ?x52 x00) (* ?x52 y00) (* ?x52 ?x52 ?x52 ?x53 ?x53 ?x53))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (+ (- (* (- 1) ?x35 ?x36) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x47 (+ (- ?x41 (* ?x35 ?x35 ?x35 ?x36 ?x36 y00)) (* ?x35 x00) (* ?x35 y00) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let (($x69 (or (not (= (- ?x47 (* ?x35 ?x35)) 0)) (not (= (- ?x64 (* ?x52 ?x52)) 0)))))
 (let (($x70 (and (= (+ (- (- x y00) x00) y) 0) $x69)))
 (rewrite (= $x70 $x834)))))))))))))))))))))))))))))
 ))
 (let ((@x72 (asserted $x71)))
 (let ((@x779 (mp (mp @x72 (quant-intro (proof-bind ?x917) (= $x71 $x914)) $x914) (rewrite (= $x914 $x914)) $x914)))
 (let ((@x1279 (mp (mp @x779 (quant-intro (proof-bind ?x191) (= $x914 $x865)) $x865) (quant-intro (proof-bind ?x349) (= $x865 $x794)) $x794)))
 (let ((@x918 (mp (mp~ @x1279 (sk (~ $x794 $x857)) $x857) (rewrite (= $x857 $x1123)) $x1123)))
 (let ((@x1274 (and-elim @x918 $x1271)))
 (let ((@x269 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1271) $x875)) @x1274 $x875)))
 (let (($x1272 (>= ?x872 0)))
 (let ((@x637 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1271) $x1272)) @x1274 $x1272)))
 (let (($x604 (<= ?x671 0)))
 (let ((@x77 (lemma ((_ th-lemma arith) (hypothesis (not $x604)) @x637 @x269 false) $x604)))
 (let (($x653 (>= ?x671 0)))
 (let ((@x1277 (lemma ((_ th-lemma arith) (hypothesis (not $x653)) @x637 @x269 false) $x653)))
 (let (($x602 (not (<= ?x666 0))))
 (let (($x844 (>= ?x666 0)))
 (let ((@x215 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x675 (not $x604) (not $x653))) @x77 @x1277 $x675)))
 (let ((@x900 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x526 $x602 (not $x844))) (unit-resolution (and-elim @x918 $x876) @x215 $x873) (lemma ((_ th-lemma arith) (hypothesis (not $x844)) @x637 @x269 false) $x844) $x602)))
 ((_ th-lemma arith) @x900 @x1277 @x77 @x637 @x269 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        18
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-grobner             4
 :arith-max-min             565
 :arith-nonlinear-bounds    11
 :arith-nonlinear-horner    25
 :arith-num-rows            7
 :arith-pivots              4
 :arith-row-summations      1
 :arith-tableau-max-columns 48
 :arith-tableau-max-rows    7
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                3.71
 :memory                    3.20
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1514860
 :num-checks                1
 :propagations              14
 :rlimit-count              8855
 :time                      0.01
 :total-time                0.02)
