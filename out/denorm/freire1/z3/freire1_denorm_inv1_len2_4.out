unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x228 (* (- 1) r!1)))
 (let ((?x219 (* 2 x!0)))
 (let ((?x85 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x225 (+ r00 ?x82 ?x98 ?x85 ?x219 ?x228)))
 (let (($x263 (<= ?x225 0)))
 (let (($x212 (= ?x225 0)))
 (let ((?x87 (* (- 1) (* r!1 r!1 r!1))))
 (let ((?x277 (* (- 1) (* x!0 x!0))))
 (let ((?x227 (* (- 1) ?x85)))
 (let ((?x155 (+ (- 1) ?x227 (* 2 (* x!0 r!1 r!1)) ?x228 (* 2 (* x!0 r!1)) ?x277 ?x87 (* (- 1) (* x!0 x!0 r!1)))))
 (let ((?x163 (* ?x155 ?x225)))
 (let (($x150 (= ?x163 0)))
 (let (($x223 (not $x150)))
 (let (($x160 (and $x212 $x223)))
 (let ((?x216 (+ (- 1) ?x228 ?x227 ?x277 (* (- 1) (* r!1 x!0 x!0)) ?x87 (* 2 (* r!1 x!0)) (* 2 (* r!1 r!1 x!0)))))
 (let (($x91 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x227 (* 2 x00) ?x36) 0)))
 (let (($x239 (and $x91 (not (= (* ?x216 (+ ?x228 ?x219 r00 ?x85 ?x82 ?x98)) 0)))))
 (let (($x256 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x104 (+ ?x61 ?x32 r00 ?x30 ?x82 ?x98)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x292 (+ (- 1) ?x61 ?x114 (* (- 1) (* x x)) (* (- 1) (* r x x)) (* (- 1) (* r r r)) (* 2 (* r x)) (* 2 (* r r x)))))
 (let (($x116 (= (+ r (* (- 2) x) (* (- 1) r00) ?x114 (* 2 x00) ?x36) 0)))
 (and $x116 (not (= (* ?x292 ?x104) 0))))))))))))) :qid k!26))
 ))
 (let (($x60 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x215 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x260 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x61 (* (- 1) r)))
 (let (($x289 (not (= (* (+ (- 1) ?x61 ?x260) ?x215) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x289)))))))))))))) :qid k!26))
 ))
 (let ((?x126 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x104 (+ ?x61 ?x32 r00 ?x30 ?x82 ?x98)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x292 (+ (- 1) ?x61 ?x114 (* (- 1) (* x x)) (* (- 1) (* r x x)) (* (- 1) (* r r r)) (* 2 (* r x)) (* 2 (* r r x)))))
 (let (($x116 (= (+ r (* (- 2) x) (* (- 1) r00) ?x114 (* 2 x00) ?x36) 0)))
 (let (($x153 (and $x116 (not (= (* ?x292 ?x104) 0)))))
 (let ((?x215 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x142 (+ (- 1) ?x61 (* (- 1) (* (+ 1 r) (+ x ?x61) (+ x ?x61))))))
 (let (($x289 (not (= (* ?x142 ?x215) 0))))
 (let (($x187 (= (+ r (* (- 1) r00) ?x114 (* (- 2) x) (* 2 x00) ?x36) 0)))
 (let (($x67 (and $x187 $x289)))
 (rewrite (= $x67 $x153)))))))))))))))))))
 ))
 (let (($x269 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x215 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x260 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x61 (* (- 1) r)))
 (let (($x289 (not (= (* (+ (- 1) ?x61 ?x260) ?x215) 0))))
 (and (= (+ ?x61 r00 (* r r) ?x32 ?x82 ?x98) 0) $x289))))))))) :qid k!26))
 ))
 (let ((?x127 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x215 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x260 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x61 (* (- 1) r)))
 (let (($x289 (not (= (* (+ (- 1) ?x61 ?x260) ?x215) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (let (($x67 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x289)))
 (let (($x249 (and (= (+ ?x61 r00 ?x30 ?x32 ?x82 ?x98) 0) $x289)))
 (rewrite (= $x249 $x67))))))))))))))))))
 ))
 (let (($x56 (exists ((r Int) (x Int) )(! (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ ?x42 r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35) ?x36)))
 (let (($x53 (not (= (* ?x48 (- ?x42 (* ?x41 (- x r) (- x r)))) 0))))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or $x53)))))))))) :qid k!26))
 ))
 (let ((?x294 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x215 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x260 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x61 (* (- 1) r)))
 (let (($x289 (not (= (* (+ (- 1) ?x61 ?x260) ?x215) 0))))
 (let (($x249 (and (= (+ ?x61 r00 (* r r) ?x32 ?x82 ?x98) 0) $x289)))
 (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ ?x42 r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35) ?x36)))
 (let (($x53 (not (= (* ?x48 (- ?x42 (* ?x41 (- x r) (- x r)))) 0))))
 (let (($x40 (= (- (- (+ (* ?x27 r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x55 (and $x40 (or $x53))))
 (rewrite (= $x55 $x249))))))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x177 (mp (mp @x57 (quant-intro (proof-bind ?x294) (= $x56 $x269)) $x269) (rewrite (= $x269 $x269)) $x269)))
 (let ((@x261 (mp (mp @x177 (quant-intro (proof-bind ?x127) (= $x269 $x60)) $x60) (quant-intro (proof-bind ?x126) (= $x60 $x256)) $x256)))
 (let ((@x84 (mp (mp~ @x261 (sk (~ $x256 $x239)) $x239) (rewrite (= $x239 $x160)) $x160)))
 (let ((@x168 (and-elim @x84 $x212)))
 (let ((@x154 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x212) $x263)) @x168 $x263)))
 (let (($x159 (>= ?x225 0)))
 (let ((@x288 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x212) $x159)) @x168 $x159)))
 (let (($x128 (not (>= ?x163 0))))
 (let (($x158 (<= ?x163 0)))
 (let ((@x75 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x150 (not $x158) $x128)) (and-elim @x84 $x223) (or (not $x158) $x128))))
 (let ((@x230 (unit-resolution @x75 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x158)) @x288 @x154 false) $x158) $x128)))
 ((_ th-lemma arith farkas 1 1 1) @x230 @x288 @x154 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 17
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.46
 :memory                    3.05
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1028054
 :num-checks                1
 :propagations              4
 :rlimit-count              1215
 :time                      0.01
 :total-time                0.01)
