unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x522 (* (- 6) n!0)))
 (let ((?x521 (+ m!1 ?x522)))
 (let (($x334 (<= ?x521 6)))
 (let (($x459 (= ?x521 6)))
 (let ((?x209 (* (- 1) (* k!2 k!2 k!2 k!2 k!2))))
 (let ((?x645 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x171 (+ m!1 k!2)))
 (let ((?x301 (+ 6 m!1)))
 (let ((?x208 (+ 1 n!0)))
 (let ((?x350 (+ (* (- 1) (* k!2 k!2 c!3 c!3 c!3)) (* (- 1) (* m!1 m!1 c!3 c!3)) (* (- 12) (* m!1 k!2 c!3)) (* ?x208 ?x208 ?x208 ?x301 ?x301 ?x171 ?x171 ?x171) (* (- 1) (* m!1 k!2 c!3 c!3)) (* (- 6) (* m!1 k!2 k!2 k!2 c!3)) (* (- 6) (* m!1 k!2 k!2)) (* (- 2) (* m!1 m!1 k!2 c!3)) ?x645 (* (- 2) (* m!1 k!2 k!2 c!3)) (* (- 12) (* k!2 k!2 c!3)) (* (- 6) (* m!1 c!3 c!3)) (* (- 1) (* m!1 m!1 k!2 k!2)) (* (- 3) (* k!2 k!2 k!2 c!3 c!3)) (* (- 6) (* k!2 c!3 c!3)) (* (- 1) (* m!1 k!2 k!2 k!2)) (* (- 6) (* m!1 k!2 k!2 c!3 c!3)) (* (- 3) (* m!1 m!1 k!2 k!2 c!3)) (* (- 3) (* m!1 m!1 k!2 c!3 c!3)) (* (- 1) (* m!1 m!1 c!3 c!3 c!3)) (* (- 2) (* m!1 k!2 k!2 k!2 k!2)) ?x209 (* (- 3) (* k!2 k!2 k!2 k!2 c!3)) (* (- 2) (* m!1 k!2 c!3 c!3 c!3)) (* (- 1) (* m!1 m!1 k!2 k!2 k!2)))))
 (let ((?x93 (+ (- 6) m!1 ?x522)))
 (let ((?x198 (* ?x93 ?x350)))
 (let (($x191 (= ?x198 0)))
 (let (($x144 (not $x191)))
 (let (($x311 (= (+ (* k!2 n!0) (* (- 1) k!2) (* (- 3) c!3) (* 2 n!0)) (- 1))))
 (let ((?x487 (* (- 9) n!0)))
 (let ((?x465 (* 18 c!3)))
 (let ((?x488 (* 5 k!2)))
 (let ((?x136 (* (- 1) (* k!2 k!2))))
 (let ((?x253 (* 9 (* c!3 n!0))))
 (let (($x344 (and $x459 (= (+ ?x253 ?x136 ?x488 ?x465 ?x487) 4) $x311 (= (+ k!2 (* (- 3) (* n!0 n!0)) (* (- 3) n!0)) 1) $x144)))
 (let ((?x306 (+ k!2 m!1)))
 (let ((?x99 (+ (* ?x208 ?x208 ?x208 ?x301 ?x301 ?x306 ?x306 ?x306) (* (- 1) (* c!3 c!3 c!3 k!2 k!2)) (* (- 3) (* c!3 c!3 k!2 k!2 k!2)) (* (- 3) (* c!3 k!2 k!2 k!2 k!2)) ?x209 (* (- 2) (* c!3 c!3 c!3 k!2 m!1)) (* (- 6) (* c!3 c!3 k!2 k!2 m!1)) (* (- 6) (* c!3 k!2 k!2 k!2 m!1)) (* (- 2) (* k!2 k!2 k!2 k!2 m!1)) (* (- 1) (* c!3 c!3 c!3 m!1 m!1)) (* (- 3) (* c!3 c!3 k!2 m!1 m!1)) (* (- 3) (* c!3 k!2 k!2 m!1 m!1)) (* (- 1) (* k!2 k!2 k!2 m!1 m!1)) (* (- 1) (* c!3 c!3 k!2 m!1)) (* (- 2) (* c!3 k!2 k!2 m!1)) (* (- 1) (* k!2 k!2 k!2 m!1)) (* (- 1) (* c!3 c!3 m!1 m!1)) (* (- 2) (* c!3 k!2 m!1 m!1)) (* (- 1) (* k!2 k!2 m!1 m!1)) (* (- 6) (* c!3 c!3 k!2)) (* (- 12) (* c!3 k!2 k!2)) ?x645 (* (- 6) (* c!3 c!3 m!1)) (* (- 12) (* c!3 k!2 m!1)) (* (- 6) (* k!2 k!2 m!1)))))
 (let (($x648 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x219 (and $x459 (= (+ ?x465 ?x488 ?x487 ?x136 ?x253) 4) $x648 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x93 ?x99) 0)))))
 (let (($x481 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x567 (* (- 6) (* k k m))))
 (let ((?x564 (* (- 12) (* c k m))))
 (let ((?x561 (* (- 6) (* c c m))))
 (let ((?x558 (* (- 6) (* k k k))))
 (let ((?x555 (* (- 12) (* c k k))))
 (let ((?x551 (* (- 6) (* c c k))))
 (let ((?x535 (* (- 1) (* k k m m))))
 (let ((?x548 (* (- 2) (* c k m m))))
 (let ((?x533 (* (- 1) (* c c m m))))
 (let ((?x532 (* (- 1) (* k k k m))))
 (let ((?x545 (* (- 2) (* c k k m))))
 (let ((?x530 (* (- 1) (* c c k m))))
 (let ((?x429 (* (- 1) (* k k k m m))))
 (let ((?x415 (* (- 1) (* c c c m m))))
 (let ((?x381 (* (- 1) (* k k k k k))))
 (let ((?x367 (* (- 1) (* c c c k k))))
 (let ((?x74 (+ k m)))
 (let ((?x435 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x210 (* ?x317 ?x317 ?x317 ?x435 ?x435 ?x74 ?x74 ?x74)))
 (let ((?x663 (+ ?x210 ?x367 (* (- 3) (* c c k k k)) (* (- 3) (* c k k k k)) ?x381 (* (- 2) (* c c c k m)) (* (- 6) (* c c k k m)) (* (- 6) (* c k k k m)) (* (- 2) (* k k k k m)) ?x415 (* (- 3) (* c c k m m)) (* (- 3) (* c k k m m)) ?x429 ?x530 ?x545 ?x532 ?x533 ?x548 ?x535 ?x551 ?x555 ?x558 ?x561 ?x564 ?x567)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x663) 0))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x259 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ k m)))
 (let ((?x435 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x210 (* ?x317 ?x317 ?x317 ?x435 ?x435 ?x74 ?x74 ?x74)))
 (let ((?x100 (+ (* (- 1) (* ?x74 ?x74 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x435 ?x74 (+ c k) (+ c k))) ?x210)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x110 (not (= (* ?x117 ?x100) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x241 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x241 $x294 $x110))))))))))))))))) :qid k!34))
 ))
 (let ((?x445 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x567 (* (- 6) (* k k m))))
 (let ((?x564 (* (- 12) (* c k m))))
 (let ((?x561 (* (- 6) (* c c m))))
 (let ((?x558 (* (- 6) (* k k k))))
 (let ((?x555 (* (- 12) (* c k k))))
 (let ((?x551 (* (- 6) (* c c k))))
 (let ((?x535 (* (- 1) (* k k m m))))
 (let ((?x548 (* (- 2) (* c k m m))))
 (let ((?x533 (* (- 1) (* c c m m))))
 (let ((?x532 (* (- 1) (* k k k m))))
 (let ((?x545 (* (- 2) (* c k k m))))
 (let ((?x530 (* (- 1) (* c c k m))))
 (let ((?x429 (* (- 1) (* k k k m m))))
 (let ((?x415 (* (- 1) (* c c c m m))))
 (let ((?x381 (* (- 1) (* k k k k k))))
 (let ((?x367 (* (- 1) (* c c c k k))))
 (let ((?x74 (+ k m)))
 (let ((?x435 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x210 (* ?x317 ?x317 ?x317 ?x435 ?x435 ?x74 ?x74 ?x74)))
 (let ((?x663 (+ ?x210 ?x367 (* (- 3) (* c c k k k)) (* (- 3) (* c k k k k)) ?x381 (* (- 2) (* c c c k m)) (* (- 6) (* c c k k m)) (* (- 6) (* c k k k m)) (* (- 2) (* k k k k m)) ?x415 (* (- 3) (* c c k m m)) (* (- 3) (* c k k m m)) ?x429 ?x530 ?x545 ?x532 ?x533 ?x548 ?x535 ?x551 ?x555 ?x558 ?x561 ?x564 ?x567)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x512 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x663) 0)))))
 (let ((?x100 (+ (* (- 1) (* ?x74 ?x74 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x435 ?x74 (+ c k) (+ c k))) ?x210)))
 (let (($x110 (not (= (* ?x117 ?x100) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x241 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x140 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x241 $x294 $x110)))
 (rewrite (= $x140 $x512)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x123 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ k m)))
 (let ((?x435 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x210 (* ?x317 ?x317 ?x317 ?x435 ?x435 ?x74 ?x74 ?x74)))
 (let ((?x100 (+ (* (- 1) (* ?x74 ?x74 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x435 ?x74 (+ c k) (+ c k))) ?x210)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x110 (not (= (* ?x117 ?x100) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x537 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= ?x537 (- 4)) $x159 $x294 $x110))))))))))))))) :qid k!34))
 ))
 (let ((?x269 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x74 (+ k m)))
 (let ((?x435 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x210 (* ?x317 ?x317 ?x317 ?x435 ?x435 ?x74 ?x74 ?x74)))
 (let ((?x100 (+ (* (- 1) (* ?x74 ?x74 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x435 ?x74 (+ c k) (+ c k))) ?x210)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x110 (not (= (* ?x117 ?x100) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x241 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x140 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x241 $x294 $x110)))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x537 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x177 (and $x128 (= ?x537 (- 4)) $x159 $x294 $x110)))
 (rewrite (= $x177 $x140))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x78 (- (* (- 1) (+ c k) (+ c k) (+ c k) ?x74 ?x74) (* (+ c k) (+ c k) ?x74 ?x76))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ ?x78 (* ?x74 ?x74 ?x74 ?x76 ?x76 ?x69 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x154 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x74 (+ k m)))
 (let ((?x435 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x210 (* ?x317 ?x317 ?x317 ?x435 ?x435 ?x74 ?x74 ?x74)))
 (let ((?x100 (+ (* (- 1) (* ?x74 ?x74 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x435 ?x74 (+ c k) (+ c k))) ?x210)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x110 (not (= (* ?x117 ?x100) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x537 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x177 (and $x128 (= ?x537 (- 4)) $x159 $x294 $x110)))
 (let ((?x69 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x78 (- (* (- 1) (+ c k) (+ c k) (+ c k) ?x74 ?x74) (* (+ c k) (+ c k) ?x74 ?x76))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ ?x78 (* ?x74 ?x74 ?x74 ?x76 ?x76 ?x69 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x177))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x258 (mp (mp @x87 (quant-intro (proof-bind ?x154) (= $x86 $x123)) $x123) (rewrite (= $x123 $x123)) $x123)))
 (let ((@x501 (mp (mp @x258 (quant-intro (proof-bind ?x269) (= $x123 $x259)) $x259) (quant-intro (proof-bind ?x445) (= $x259 $x481)) $x481)))
 (let ((@x278 (mp (mp~ @x501 (sk (~ $x481 $x219)) $x219) (rewrite (= $x219 $x344)) $x344)))
 (let ((@x525 (and-elim @x278 $x459)))
 (let ((@x279 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x459) $x334)) @x525 $x334)))
 (let (($x174 (>= ?x521 6)))
 (let ((@x139 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x459) $x174)) @x525 $x174)))
 (let (($x431 (not (<= ?x198 0))))
 (let (($x160 (>= ?x198 0)))
 (let ((@x197 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x191 $x431 (not $x160))) (and-elim @x278 $x144) (or $x431 (not $x160)))))
 (let ((@x352 (unit-resolution @x197 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x160)) @x139 @x279 false) $x160) $x431)))
 ((_ th-lemma arith farkas 1 1 1) @x352 @x139 @x279 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             228
 :arith-nonlinear-bounds    9
 :arith-num-rows            9
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      6
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.63
 :memory                    3.15
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1094540
 :num-checks                1
 :propagations              11
 :rlimit-count              3919
 :time                      0.01
 :total-time                0.01)
