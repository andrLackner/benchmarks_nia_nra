unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x1228 (* (- 1) r!1)))
 (let ((?x188 (* 2 x!0)))
 (let ((?x216 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x1446 (* (- 2) x00)))
 (let ((?x286 (+ r00 ?x1446 ?x223 ?x216 ?x188 ?x1228)))
 (let (($x822 (<= ?x286 0)))
 (let (($x287 (= ?x286 0)))
 (let ((?x1118 (+ x!0 ?x1228)))
 (let ((?x1227 (+ 1 r!1)))
 (let ((?x413 (* r!1 r!1 r!1)))
 (let ((?x409 (* r!1 r!1 r!1 r!1)))
 (let ((?x217 (* (- 1) ?x216)))
 (let ((?x2171 (+ r00 ?x1446 ?x223 ?x217 ?x188 ?x1228 (* 2 (* x!0 x!0 r!1 r!1)) (* (- 2) (* r00 r00 r!1)) ?x409 ?x413 (* (- 1) (* r00 r00 x!0 x!0 x!0)) (* (- 4) (* r00 r00 x!0 r!1 r!1)) (* r00 r00 r!1 r!1 r!1 r!1 r!1) (* 2 (* r00 r00 r!1 r!1 r!1 r!1)) (* (- 1) (* r00 r00 x!0 x!0 x!0 r!1 r!1)) (* (- 2) (* r00 r00 x!0 x!0 x!0 r!1)) (* 4 (* r00 x!0 r!1 r!1)) (* 6 (* r00 x!0 r!1 r!1 r!1)) (* 3 (* r00 x!0 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 x!0 r!1)) (* (- 8) (* x00 x!0 r!1 r!1)) (* (- 1) (* r00 r!1 r!1 r!1)) (* 3 (* r00 r00 x!0 x!0 r!1 r!1 r!1)) (* (- 2) (* r00 r!1 r!1 r!1 r!1)) (* (- 1) (* r00 r!1 r!1 r!1 r!1 r!1)) (* 2 (* r00 r!1)) (* 2 (* ?x1227 ?x1227 ?x1118 ?x1118 ?x1118 ?x1118)) (* r00 r!1 r!1) (* r00 r00 r!1 r!1 r!1) (* (- 4) (* x00 x!0 x!0 x!0 r!1)) (* 2 (* r00 x!0 r!1)) (* ?x1227 ?x1227 ?x1227 ?x1227 ?x1118 ?x1118 ?x1118) (* (- 1) (* ?x1227 ?x1227 ?x1227 ?x1118 ?x1118 ?x1118)) (* (- 3) (* r00 x!0 x!0 r!1 r!1 r!1)) (* r00 x!0 x!0 x!0 r!1 r!1) (* (- 6) (* r00 r00 x!0 r!1 r!1 r!1)) (* 6 (* x00 x!0 x!0 r!1)) (* 6 (* r00 r00 x!0 x!0 r!1 r!1)) (* (- 2) (* x00 x!0 x!0 x!0 r!1 r!1)) (* 6 (* x00 x!0 x!0 r!1 r!1 r!1)) (* 3 (* r00 r00 x!0 x!0 r!1)) (* (- 1) (* r00 r00 x!0)) (* 12 (* x00 x!0 x!0 r!1 r!1)) (* x!0 r!1 r!1) (* x!0 r!1 r!1 r!1) (* 2 (* x!0 x!0)) (* (- 6) (* r00 x!0 x!0 r!1 r!1)) (* (- 2) (* x00 x!0 x!0 x!0)) (* (- 6) (* x00 x!0 r!1 r!1 r!1 r!1)) (* (- 12) (* x00 x!0 r!1 r!1 r!1)) (* (- 3) (* r00 r00 x!0 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 r!1)) (* (- 2) (* x00 r!1 r!1)) (* (- 2) (* r00 r00 x!0 r!1)) (* (- 1) (* r00 r00 r!1 r!1)) (* 2 (* x00 r!1 r!1 r!1 r!1 r!1)) (* r00 x!0) (* 4 (* x!0 x!0 r!1)) (* (- 2) (* x00 x!0)) (* 2 (* x00 r!1 r!1 r!1)) (* 4 (* x00 r!1 r!1 r!1 r!1)) (* x!0 r!1 r!1 r!1 r!1) (* 3 (* x!0 r!1)) (* 2 (* r00 x!0 x!0 x!0 r!1)) (* (- 3) (* r00 x!0 x!0 r!1)) (* r00 x!0 x!0 x!0))))
 (let (($x2172 (= ?x2171 0)))
 (let (($x2177 (not $x2172)))
 (let (($x113 (and $x287 $x2177)))
 (let ((?x942 (+ ?x1228 x!0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x131 (* (- 1) r00)))
 (let ((?x179 (* (- 2) x!0)))
 (let ((?x267 (+ r!1 ?x179 ?x131 ?x216 ?x35 ?x36 (* 2 (* x!0 x00)) (* 4 (* r!1 x!0 x00)) (* 8 (* r!1 r!1 x!0 x00)) (* r!1 r!1 r!1 r00) (* 2 (* r!1 r!1 r!1 r!1 r00)) (* r!1 r!1 r!1 r!1 r!1 r00) (* (- 4) (* r!1 r!1 x!0 r00)) (* (- 6) (* r!1 r!1 r!1 x!0 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0 r00)) (* 3 (* r!1 x!0 x!0 r00)) (* 6 (* r!1 r!1 x!0 x!0 r00)) (* 3 (* r!1 r!1 r!1 x!0 x!0 r00)) (* (- 1) (* x!0 x!0 x!0 r00)) (* (- 2) (* r!1 x!0 x!0 x!0 r00)) (* (- 1) (* r!1 r!1 x!0 x!0 x!0 r00)) (* (- 2) (* r!1 r!1 r!1 x00)) (* (- 3) (* r!1 x!0)) (* (- 1) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r!1 x!0)) (* (- 1) ?x413) (* (- 1) ?x409) (* (- 1) (* r!1 r!1 r!1 r!1 x!0)) (* (- 2) (* r!1 r00)) (* (- 1) (* r!1 r!1 r00)) (* (- 2) (* ?x1227 ?x1227 ?x942 ?x942 ?x942 ?x942)) (* (- 1) (* r!1 r!1 r!1 r00 r00)) (* (- 2) (* r!1 r!1 r!1 r!1 r00 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r00 r00)) (* 4 (* r!1 r!1 x!0 r00 r00)) (* 6 (* r!1 r!1 r!1 x!0 r00 r00)) (* 3 (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 3) (* r!1 x!0 x!0 r00 r00)) (* (- 6) (* r!1 r!1 x!0 x!0 r00 r00)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0 r00 r00)) (* x!0 x!0 x!0 r00 r00) (* 2 (* r!1 x!0 x!0 x!0 r00 r00)) (* r!1 r!1 x!0 x!0 x!0 r00 r00) (* ?x1227 ?x1227 ?x1227 ?x942 ?x942 ?x942) (* (- 1) (* ?x1227 ?x1227 ?x1227 ?x1227 ?x942 ?x942 ?x942)) (* r!1 r!1 r00 r00) (* 2 (* r!1 r00 r00)) (* (- 2) (* r!1 r!1 x!0 x!0)) (* (- 4) (* r!1 x!0 x!0)) (* (- 2) (* x!0 x!0)) (* (- 1) (* x!0 r00)) (* (- 2) (* r!1 x!0 r00)) (* 2 (* x!0 x!0 x!0 x00)) (* 4 (* r!1 x!0 x!0 x!0 x00)) (* 2 (* r!1 r!1 x!0 x!0 x!0 x00)) (* (- 4) (* r!1 r!1 r!1 r!1 x00)) (* (- 2) (* r!1 r!1 r!1 r!1 r!1 x00)) (* 12 (* r!1 r!1 r!1 x!0 x00)) (* 6 (* r!1 r!1 r!1 r!1 x!0 x00)) (* (- 6) (* r!1 x!0 x!0 x00)) (* (- 12) (* r!1 r!1 x!0 x!0 x00)) (* (- 6) (* r!1 r!1 r!1 x!0 x!0 x00)) (* x!0 r00 r00) (* 2 (* r!1 x!0 r00 r00)) (* 4 (* r!1 x00)) (* 2 (* r!1 r!1 x00)))))
 (let (($x186 (and (= (+ r!1 ?x179 ?x131 ?x217 ?x35 ?x36) 0) (not (= ?x267 0)))))
 (let (($x1860 (exists ((r Int) (x Int) )(! (let ((?x1872 (* 2 (* r x r00 r00))))
 (let ((?x1855 (* x r00 r00)))
 (let ((?x2130 (* (- 6) (* r r r x x x00))))
 (let ((?x2129 (* (- 12) (* r r x x x00))))
 (let ((?x2128 (* (- 6) (* r x x x00))))
 (let ((?x2127 (* 6 (* r r r r x x00))))
 (let ((?x2126 (* 12 (* r r r x x00))))
 (let ((?x2125 (* (- 2) (* r r r r r x00))))
 (let ((?x2124 (* (- 4) (* r r r r x00))))
 (let ((?x1565 (* 2 (* r r x x x x00))))
 (let ((?x2123 (* 4 (* r x x x x00))))
 (let ((?x1559 (* 2 (* x x x x00))))
 (let ((?x2122 (* (- 2) (* r x r00))))
 (let ((?x2121 (* (- 1) (* x r00))))
 (let ((?x2108 (* (- 2) (* x x))))
 (let ((?x2105 (* (- 2) (* r r x x))))
 (let ((?x2104 (* 2 (* r r00 r00))))
 (let ((?x1310 (* r r r00 r00)))
 (let ((?x81 (* (- 1) r)))
 (let ((?x147 (+ ?x81 x)))
 (let ((?x141 (+ 1 r)))
 (let ((?x2103 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x147 ?x147 ?x147))))
 (let ((?x1094 (* ?x141 ?x141 ?x141 ?x147 ?x147 ?x147)))
 (let ((?x1041 (* r r x x x r00 r00)))
 (let ((?x1054 (* 2 (* r x x x r00 r00))))
 (let ((?x1030 (* x x x r00 r00)))
 (let ((?x1053 (* (- 3) (* r r r x x r00 r00))))
 (let ((?x1052 (* (- 6) (* r r x x r00 r00))))
 (let ((?x1051 (* (- 3) (* r x x r00 r00))))
 (let ((?x1050 (* 3 (* r r r r x r00 r00))))
 (let ((?x1049 (* 6 (* r r r x r00 r00))))
 (let ((?x2102 (* 4 (* r r x r00 r00))))
 (let ((?x860 (* (- 1) (* r r r r r r00 r00))))
 (let ((?x1047 (* (- 2) (* r r r r r00 r00))))
 (let ((?x836 (* (- 1) (* r r r r00 r00))))
 (let ((?x1450 (* (- 1) (* r r r00))))
 (let ((?x2101 (* (- 2) (* r r00))))
 (let ((?x2036 (* (- 1) (* r r r r x))))
 (let ((?x2031 (* (- 1) (* r r x x x r00))))
 (let ((?x2030 (* (- 2) (* r x x x r00))))
 (let ((?x2029 (* (- 1) (* x x x r00))))
 (let ((?x2028 (* 3 (* r r r x x r00))))
 (let ((?x2027 (* 6 (* r r x x r00))))
 (let ((?x2026 (* 3 (* r x x r00))))
 (let ((?x2025 (* (- 3) (* r r r r x r00))))
 (let ((?x2024 (* (- 6) (* r r r x r00))))
 (let ((?x2023 (* (- 4) (* r r x r00))))
 (let ((?x244 (* r r r r r r00)))
 (let ((?x2022 (* 2 (* r r r r r00))))
 (let ((?x220 (* r r r r00)))
 (let ((?x2021 (* 8 (* r r x x00))))
 (let ((?x2017 (* 2 (* x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x131 (* (- 1) r00)))
 (let ((?x130 (* (- 2) x)))
 (let ((?x2203 (+ r ?x130 ?x131 ?x30 ?x35 ?x36 ?x2017 (* 4 (* r x x00)) ?x2021 ?x220 ?x2022 ?x244 ?x2023 ?x2024 ?x2025 ?x2026 ?x2027 ?x2028 ?x2029 ?x2030 ?x2031 (* (- 2) (* r r r x00)) (* (- 3) (* r x)) (* (- 1) (* r r x)) (* (- 1) (* r r r x)) (* (- 1) (* r r r)) (* (- 1) (* r r r r)) ?x2036 ?x2101 ?x1450 (* (- 2) (* ?x141 ?x141 ?x147 ?x147 ?x147 ?x147)) ?x836 ?x1047 ?x860 ?x2102 ?x1049 ?x1050 ?x1051 ?x1052 ?x1053 ?x1030 ?x1054 ?x1041 ?x1094 ?x2103 ?x1310 ?x2104 ?x2105 (* (- 4) (* r x x)) ?x2108 ?x2121 ?x2122 ?x1559 ?x2123 ?x1565 ?x2124 ?x2125 ?x2126 ?x2127 ?x2128 ?x2129 ?x2130 ?x1855 ?x1872 (* 4 (* r x00)) (* 2 (* r r x00)))))
 (let (($x134 (= (+ r ?x130 ?x131 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x134 (not (= ?x2203 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1732 (exists ((r Int) (x Int) )(! (let ((?x81 (* (- 1) r)))
 (let ((?x1438 (+ x ?x81)))
 (let ((?x141 (+ 1 r)))
 (let ((?x481 (* r00 r00 ?x141 ?x141 ?x1438)))
 (let ((?x1207 (* r00 r00 ?x141 ?x141 ?x141)))
 (let ((?x1815 (* ?x141 ?x141 ?x141 ?x141)))
 (let ((?x1474 (* ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x947 (* r00 r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x1826 (+ (* 2 (* x00 ?x141 ?x141 ?x1438)) (* (- 1) (* r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x1438)) (* (- 2) (* ?x141 ?x141 ?x1438 ?x1438 ?x1438 ?x1438)) (* (- 1) (* r00 ?x141 ?x141 ?x141)) ?x947 ?x1474 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x141)) ?x1815 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 2) (* ?x141 ?x141 ?x1438 ?x1438)) ?x1207 (* (- 1) (* r00 ?x141 ?x141 ?x1438)) (* 2 (* x00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) ?x481 (* 2 (* x00 ?x141 ?x141 ?x141)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x130 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x132 (* (- 1) ?x30)))
 (let ((?x131 (* (- 1) r00)))
 (and (= (+ r ?x131 ?x132 ?x130 ?x35 ?x36) 0) (not (= ?x1826 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x1868 (lambda ((r Int) (x Int) )(let ((?x1872 (* 2 (* r x r00 r00))))
 (let ((?x1855 (* x r00 r00)))
 (let ((?x2130 (* (- 6) (* r r r x x x00))))
 (let ((?x2129 (* (- 12) (* r r x x x00))))
 (let ((?x2128 (* (- 6) (* r x x x00))))
 (let ((?x2127 (* 6 (* r r r r x x00))))
 (let ((?x2126 (* 12 (* r r r x x00))))
 (let ((?x2125 (* (- 2) (* r r r r r x00))))
 (let ((?x2124 (* (- 4) (* r r r r x00))))
 (let ((?x1565 (* 2 (* r r x x x x00))))
 (let ((?x2123 (* 4 (* r x x x x00))))
 (let ((?x1559 (* 2 (* x x x x00))))
 (let ((?x2122 (* (- 2) (* r x r00))))
 (let ((?x2121 (* (- 1) (* x r00))))
 (let ((?x2108 (* (- 2) (* x x))))
 (let ((?x2105 (* (- 2) (* r r x x))))
 (let ((?x2104 (* 2 (* r r00 r00))))
 (let ((?x1310 (* r r r00 r00)))
 (let ((?x81 (* (- 1) r)))
 (let ((?x147 (+ ?x81 x)))
 (let ((?x141 (+ 1 r)))
 (let ((?x2103 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x147 ?x147 ?x147))))
 (let ((?x1094 (* ?x141 ?x141 ?x141 ?x147 ?x147 ?x147)))
 (let ((?x1041 (* r r x x x r00 r00)))
 (let ((?x1054 (* 2 (* r x x x r00 r00))))
 (let ((?x1030 (* x x x r00 r00)))
 (let ((?x1053 (* (- 3) (* r r r x x r00 r00))))
 (let ((?x1052 (* (- 6) (* r r x x r00 r00))))
 (let ((?x1051 (* (- 3) (* r x x r00 r00))))
 (let ((?x1050 (* 3 (* r r r r x r00 r00))))
 (let ((?x1049 (* 6 (* r r r x r00 r00))))
 (let ((?x2102 (* 4 (* r r x r00 r00))))
 (let ((?x860 (* (- 1) (* r r r r r r00 r00))))
 (let ((?x1047 (* (- 2) (* r r r r r00 r00))))
 (let ((?x836 (* (- 1) (* r r r r00 r00))))
 (let ((?x1450 (* (- 1) (* r r r00))))
 (let ((?x2101 (* (- 2) (* r r00))))
 (let ((?x2036 (* (- 1) (* r r r r x))))
 (let ((?x2031 (* (- 1) (* r r x x x r00))))
 (let ((?x2030 (* (- 2) (* r x x x r00))))
 (let ((?x2029 (* (- 1) (* x x x r00))))
 (let ((?x2028 (* 3 (* r r r x x r00))))
 (let ((?x2027 (* 6 (* r r x x r00))))
 (let ((?x2026 (* 3 (* r x x r00))))
 (let ((?x2025 (* (- 3) (* r r r r x r00))))
 (let ((?x2024 (* (- 6) (* r r r x r00))))
 (let ((?x2023 (* (- 4) (* r r x r00))))
 (let ((?x244 (* r r r r r r00)))
 (let ((?x2022 (* 2 (* r r r r r00))))
 (let ((?x220 (* r r r r00)))
 (let ((?x2021 (* 8 (* r r x x00))))
 (let ((?x2017 (* 2 (* x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x131 (* (- 1) r00)))
 (let ((?x130 (* (- 2) x)))
 (let ((?x2203 (+ r ?x130 ?x131 ?x30 ?x35 ?x36 ?x2017 (* 4 (* r x x00)) ?x2021 ?x220 ?x2022 ?x244 ?x2023 ?x2024 ?x2025 ?x2026 ?x2027 ?x2028 ?x2029 ?x2030 ?x2031 (* (- 2) (* r r r x00)) (* (- 3) (* r x)) (* (- 1) (* r r x)) (* (- 1) (* r r r x)) (* (- 1) (* r r r)) (* (- 1) (* r r r r)) ?x2036 ?x2101 ?x1450 (* (- 2) (* ?x141 ?x141 ?x147 ?x147 ?x147 ?x147)) ?x836 ?x1047 ?x860 ?x2102 ?x1049 ?x1050 ?x1051 ?x1052 ?x1053 ?x1030 ?x1054 ?x1041 ?x1094 ?x2103 ?x1310 ?x2104 ?x2105 (* (- 4) (* r x x)) ?x2108 ?x2121 ?x2122 ?x1559 ?x2123 ?x1565 ?x2124 ?x2125 ?x2126 ?x2127 ?x2128 ?x2129 ?x2130 ?x1855 ?x1872 (* 4 (* r x00)) (* 2 (* r r x00)))))
 (let (($x134 (= (+ r ?x130 ?x131 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x2209 (and $x134 (not (= ?x2203 0)))))
 (let ((?x1438 (+ x ?x81)))
 (let ((?x481 (* r00 r00 ?x141 ?x141 ?x1438)))
 (let ((?x1207 (* r00 r00 ?x141 ?x141 ?x141)))
 (let ((?x1815 (* ?x141 ?x141 ?x141 ?x141)))
 (let ((?x1474 (* ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x947 (* r00 r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x1826 (+ (* 2 (* x00 ?x141 ?x141 ?x1438)) (* (- 1) (* r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x1438)) (* (- 2) (* ?x141 ?x141 ?x1438 ?x1438 ?x1438 ?x1438)) (* (- 1) (* r00 ?x141 ?x141 ?x141)) ?x947 ?x1474 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x141)) ?x1815 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 2) (* ?x141 ?x141 ?x1438 ?x1438)) ?x1207 (* (- 1) (* r00 ?x141 ?x141 ?x1438)) (* 2 (* x00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) ?x481 (* 2 (* x00 ?x141 ?x141 ?x141)))))
 (let (($x469 (and (= (+ r ?x131 (* (- 1) ?x30) ?x130 ?x35 ?x36) 0) (not (= ?x1826 0)))))
 (rewrite (= $x469 $x2209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1829 (exists ((r Int) (x Int) )(! (let ((?x81 (* (- 1) r)))
 (let ((?x1438 (+ x ?x81)))
 (let ((?x141 (+ 1 r)))
 (let ((?x481 (* r00 r00 ?x141 ?x141 ?x1438)))
 (let ((?x1199 (* r00 ?x141 ?x141 ?x1438)))
 (let ((?x1818 (* ?x141 ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x1831 (* ?x141 ?x141 ?x141 ?x141 ?x141)))
 (let ((?x1024 (* r00 ?x141 ?x141 ?x141)))
 (let ((?x1477 (* ?x141 ?x141 ?x141 ?x141 ?x1438)))
 (let ((?x1476 (* ?x141 ?x141 ?x141 ?x1438)))
 (let ((?x1468 (* r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x533 (+ (* (- 2) (* x00 ?x141 ?x141 ?x1438)) ?x1468 ?x1476 ?x1477 (* 2 (* ?x141 ?x141 ?x1438 ?x1438 ?x1438 ?x1438)) ?x1024 (* (- 1) (* r00 r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) ?x1831 (* (- 1) (* ?x141 ?x141 ?x141 ?x141)) ?x1818 (* 2 (* ?x141 ?x141 ?x1438 ?x1438)) (* (- 1) (* r00 r00 ?x141 ?x141 ?x141)) ?x1199 (* (- 2) (* x00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) ?x481) (* (- 2) (* x00 ?x141 ?x141 ?x141)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x1446 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x81 r00 ?x30 ?x32 ?x1446 ?x223) 0) (not (= ?x533 0)))))))))))))))))))) :qid k!26))
 ))
 (let ((?x1447 (lambda ((r Int) (x Int) )(let ((?x81 (* (- 1) r)))
 (let ((?x1438 (+ x ?x81)))
 (let ((?x141 (+ 1 r)))
 (let ((?x481 (* r00 r00 ?x141 ?x141 ?x1438)))
 (let ((?x1207 (* r00 r00 ?x141 ?x141 ?x141)))
 (let ((?x1815 (* ?x141 ?x141 ?x141 ?x141)))
 (let ((?x1474 (* ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x947 (* r00 r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x1826 (+ (* 2 (* x00 ?x141 ?x141 ?x1438)) (* (- 1) (* r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x1438)) (* (- 2) (* ?x141 ?x141 ?x1438 ?x1438 ?x1438 ?x1438)) (* (- 1) (* r00 ?x141 ?x141 ?x141)) ?x947 ?x1474 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x141)) ?x1815 (* (- 1) (* ?x141 ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 2) (* ?x141 ?x141 ?x1438 ?x1438)) ?x1207 (* (- 1) (* r00 ?x141 ?x141 ?x1438)) (* 2 (* x00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) ?x481 (* 2 (* x00 ?x141 ?x141 ?x141)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x130 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x132 (* (- 1) ?x30)))
 (let ((?x131 (* (- 1) r00)))
 (let (($x469 (and (= (+ r ?x131 ?x132 ?x130 ?x35 ?x36) 0) (not (= ?x1826 0)))))
 (let ((?x1199 (* r00 ?x141 ?x141 ?x1438)))
 (let ((?x1818 (* ?x141 ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x1831 (* ?x141 ?x141 ?x141 ?x141 ?x141)))
 (let ((?x1024 (* r00 ?x141 ?x141 ?x141)))
 (let ((?x1477 (* ?x141 ?x141 ?x141 ?x141 ?x1438)))
 (let ((?x1476 (* ?x141 ?x141 ?x141 ?x1438)))
 (let ((?x1468 (* r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x533 (+ (* (- 2) (* x00 ?x141 ?x141 ?x1438)) ?x1468 ?x1476 ?x1477 (* 2 (* ?x141 ?x141 ?x1438 ?x1438 ?x1438 ?x1438)) ?x1024 (* (- 1) ?x947) (* (- 1) ?x1474) ?x1831 (* (- 1) ?x1815) ?x1818 (* 2 (* ?x141 ?x141 ?x1438 ?x1438)) (* (- 1) ?x1207) ?x1199 (* (- 2) (* x00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) ?x481) (* (- 2) (* x00 ?x141 ?x141 ?x141)))))
 (let (($x1469 (= (+ ?x81 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x1480 (and $x1469 (not (= ?x533 0)))))
 (rewrite (= $x1480 $x469)))))))))))))))))))))))))))))
 ))
 (let (($x76 (exists ((r Int) (x Int) )(! (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x50 (+ (* (- 2) ?x42 ?x42 ?x43 x00) (* ?x42 ?x42 r00 ?x43 ?x43 ?x43) (* ?x42 ?x42 ?x42 ?x43) (* ?x42 ?x42 ?x42 ?x42 ?x43) (* 2 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43) (* ?x42 ?x42 ?x42 r00))))
 (let ((?x54 (- (- ?x50 (* ?x42 ?x42 r00 r00 ?x43 ?x43 ?x43)) (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43))))
 (let ((?x61 (+ (- (+ ?x54 (* ?x42 ?x42 ?x42 ?x42 ?x42)) (* ?x42 ?x42 ?x42 ?x42)) (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43) (* 2 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x65 (+ (- ?x61 (* ?x42 ?x42 ?x42 r00 r00)) (* ?x42 ?x42 r00 ?x43))))
 (let ((?x70 (- (- ?x65 (* 2 ?x42 ?x42 ?x43 ?x43 ?x43 x00)) (* ?x42 ?x42 r00 r00 ?x43))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (- ?x70 (* 2 ?x42 ?x42 ?x42 x00)) 0)))))))))))))) :qid k!26))
 ))
 (let ((?x498 (lambda ((r Int) (x Int) )(let ((?x81 (* (- 1) r)))
 (let ((?x1438 (+ x ?x81)))
 (let ((?x141 (+ 1 r)))
 (let ((?x481 (* r00 r00 ?x141 ?x141 ?x1438)))
 (let ((?x1199 (* r00 ?x141 ?x141 ?x1438)))
 (let ((?x1818 (* ?x141 ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x1831 (* ?x141 ?x141 ?x141 ?x141 ?x141)))
 (let ((?x1024 (* r00 ?x141 ?x141 ?x141)))
 (let ((?x1477 (* ?x141 ?x141 ?x141 ?x141 ?x1438)))
 (let ((?x1476 (* ?x141 ?x141 ?x141 ?x1438)))
 (let ((?x1468 (* r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)))
 (let ((?x533 (+ (* (- 2) (* x00 ?x141 ?x141 ?x1438)) ?x1468 ?x1476 ?x1477 (* 2 (* ?x141 ?x141 ?x1438 ?x1438 ?x1438 ?x1438)) ?x1024 (* (- 1) (* r00 r00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) (* ?x141 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) ?x1831 (* (- 1) (* ?x141 ?x141 ?x141 ?x141)) ?x1818 (* 2 (* ?x141 ?x141 ?x1438 ?x1438)) (* (- 1) (* r00 r00 ?x141 ?x141 ?x141)) ?x1199 (* (- 2) (* x00 ?x141 ?x141 ?x1438 ?x1438 ?x1438)) (* (- 1) ?x481) (* (- 2) (* x00 ?x141 ?x141 ?x141)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x223 (* (- 1) ?x36)))
 (let ((?x1446 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x1480 (and (= (+ ?x81 r00 ?x30 ?x32 ?x1446 ?x223) 0) (not (= ?x533 0)))))
 (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x50 (+ (* (- 2) ?x42 ?x42 ?x43 x00) (* ?x42 ?x42 r00 ?x43 ?x43 ?x43) (* ?x42 ?x42 ?x42 ?x43) (* ?x42 ?x42 ?x42 ?x42 ?x43) (* 2 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43) (* ?x42 ?x42 ?x42 r00))))
 (let ((?x54 (- (- ?x50 (* ?x42 ?x42 r00 r00 ?x43 ?x43 ?x43)) (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43))))
 (let ((?x61 (+ (- (+ ?x54 (* ?x42 ?x42 ?x42 ?x42 ?x42)) (* ?x42 ?x42 ?x42 ?x42)) (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43) (* 2 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x65 (+ (- ?x61 (* ?x42 ?x42 ?x42 r00 r00)) (* ?x42 ?x42 r00 ?x43))))
 (let ((?x70 (- (- ?x65 (* 2 ?x42 ?x42 ?x43 ?x43 ?x43 x00)) (* ?x42 ?x42 r00 r00 ?x43))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x75 (and (= ?x38 0) (or (not (= (- ?x70 (* 2 ?x42 ?x42 ?x42 x00)) 0))))))
 (rewrite (= $x75 $x1480))))))))))))))))))))))))))))))
 ))
 (let ((@x77 (asserted $x76)))
 (let ((@x564 (mp (mp @x77 (quant-intro (proof-bind ?x498) (= $x76 $x1829)) $x1829) (rewrite (= $x1829 $x1829)) $x1829)))
 (let ((@x1996 (mp (mp @x564 (quant-intro (proof-bind ?x1447) (= $x1829 $x1732)) $x1732) (quant-intro (proof-bind ?x1868) (= $x1732 $x1860)) $x1860)))
 (let ((@x2178 (mp (mp~ @x1996 (sk (~ $x1860 $x186)) $x186) (rewrite (= $x186 $x113)) $x113)))
 (let ((@x2180 (and-elim @x2178 $x287)))
 (let ((@x771 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x287) $x822)) @x2180 $x822)))
 (let (($x737 (>= ?x286 0)))
 (let ((@x1596 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x287) $x737)) @x2180 $x737)))
 (let (($x1153 (not (>= ?x2171 0))))
 (let (($x1698 (<= ?x2171 0)))
 (let ((@x1901 (lemma ((_ th-lemma arith) (hypothesis (not $x1698)) @x1596 @x771 @x1596 @x771 false) $x1698)))
 (let ((@x1956 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2172 (not $x1698) $x1153)) (and-elim @x2178 $x2177) (or (not $x1698) $x1153))))
 ((_ th-lemma arith) (unit-resolution @x1956 @x1901 $x1153) @x1596 @x771 @x1596 @x771 false))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        21
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             526
 :arith-nonlinear-bounds    18
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 84
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.91
 :memory                    3.32
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1476340
 :num-checks                1
 :propagations              4
 :rlimit-count              9840
 :time                      0.01
 :total-time                0.02)
