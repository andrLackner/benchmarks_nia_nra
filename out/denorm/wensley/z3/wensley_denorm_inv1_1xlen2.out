unsat
((set-logic NRA)
(declare-fun b!7 () Real)
(declare-fun d!6 () Real)
(declare-fun y!5 () Real)
(declare-fun a!8 () Real)
(proof
(let ((?x541 (* b00 y00 y!5 y!5 d!6 d!6 a!8 a!8 a!8 b!7 b!7)))
 (let ((?x538 (* d00 y!5 y!5 d!6 d!6 a!8 a!8 a!8 a!8 b!7 b!7)))
 (let ((?x533 (* a00 d00 y!5 y!5 d!6 d!6 a!8 a!8 a!8 b!7 b!7)))
 (let ((?x91 (* b00 y!5 y!5 y!5 d!6 d!6 a!8 a!8 a!8 b!7 b!7)))
 (let ((?x429 (+ (* (/ 1.0 8.0) ?x91) (* (- (/ 1.0 16.0)) (* b00 y00 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 32.0) (* a00 d00 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 16.0) ?x533) (* (- (/ 1.0 16.0)) ?x538) (* (- (/ 1.0 8.0)) ?x541) (* (- (/ 1.0 32.0)) (* d00 y!5 d!6 d!6 a!8 b!7 b!7 b!7)) (* (/ 1.0 16.0) (* b00 y!5 y!5 d!6 d!6 b!7 b!7 b!7)))))
 (let (($x269 (>= ?x429 0.0)))
 (let (($x579 (not $x269)))
 (let (($x229 (= 0.0 ?x429)))
 (let (($x575 (not $x229)))
 (let ((@x573 (symm (commutativity (= $x229 (= ?x429 0.0))) (= (= ?x429 0.0) $x229))))
 (let (($x360 (= ?x429 0.0)))
 (let (($x85 (not $x360)))
 (let ((?x570 (* 2.0 (* b00 y!5))))
 (let ((?x401 (* (- 1.0) (* d00 a!8))))
 (let ((?x523 (* b00 d!6)))
 (let ((?x395 (* d00 b!7)))
 (let ((?x393 (* (- 1.0) ?x395)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x674 (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7))))
 (let ((?x558 (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7))))
 (let ((?x512 (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 b!7 b!7))))
 (let ((?x532 (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 b!7 b!7 b!7))))
 (let ((?x140 (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7))))
 (let ((?x379 (+ ?x140 (* (- (/ 3.0 64.0)) (* d!6 d!6 d!6 d!6 a!8 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 64.0)) (* d!6 d!6 d!6 d!6 a!8 a!8 b!7 b!7 b!7)) (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 a!8 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 a!8 a!8 a!8 b!7 b!7)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 d!6 a!8 a!8 a!8 b!7 b!7)) (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 a!8 a!8 b!7 b!7 b!7)) ?x532 ?x512 ?x558 (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 d!6 a!8 b!7 b!7 b!7 b!7)) ?x674 (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 a!8 a!8 a!8 b!7 b!7)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 d!6 a!8 a!8 b!7 b!7 b!7)))))
 (let (($x394 (= (* ?x379 (+ ?x30 ?x82 ?x393 ?x523 ?x401 ?x570)) 0.0)))
 (let ((?x426 (+ ?x30 ?x393 ?x82 ?x401 ?x570 ?x523)))
 (let (($x432 (= ?x426 0.0)))
 (let ((?x257 (+ (* a00 d!6) (* (- 2.0) (* y00 b!7)) (* 2.0 (* y!5 b!7)) (* (- 1.0) (* d!6 a!8)))))
 (let (($x215 (= ?x257 0.0)))
 (let (($x407 (not $x394)))
 (let (($x388 (or $x85 $x407)))
 (let ((?x334 (+ ?x395 (* (- 1.0) ?x523))))
 (let (($x669 (= ?x334 0.0)))
 (let ((?x515 (+ ?x30 ?x82 ?x401 ?x570)))
 (let (($x420 (= ?x515 0.0)))
 (let (($x458 (and $x420 $x669 $x215 $x388)))
 (let ((?x455 (* d!6 b00)))
 (let ((?x478 (* 2.0 (* y!5 b00))))
 (let ((?x484 (* (- 1.0) (* a!8 d00))))
 (let ((?x297 (+ (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8)) ?x532 ?x512 (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) ?x558 (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8 a!8 a!8)) ?x140 (* (- (/ 3.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 a!8 a!8 a!8)) ?x674)))
 (let (($x248 (= (* ?x297 (+ ?x30 ?x484 ?x82 ?x478 (* (- 1.0) (* b!7 d00)) ?x455)) 0.0)))
 (let ((?x470 (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 b00)))
 (let ((?x692 (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 b00 y00)))
 (let ((?x690 (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a!8 d00)))
 (let ((?x634 (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a00 d00)))
 (let ((?x465 (+ (* (/ 1.0 16.0) ?x634) (* (- (/ 1.0 16.0)) ?x690) (* (- (/ 1.0 8.0)) ?x692) (* (/ 1.0 8.0) ?x470) (* (/ 1.0 32.0) (* y!5 d!6 d!6 b!7 b!7 b!7 a00 d00)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 a!8 d00)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 b00 y00)) (* (/ 1.0 16.0) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 b00)))))
 (let ((?x618 (* d!6 a!8)))
 (let ((?x637 (+ ?x618 (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x288 (and (= (+ ?x30 ?x484 ?x82 ?x478) 0.0) (= (+ (* b!7 d00) (* (- 1.0) ?x455)) 0.0) (= ?x637 0.0) (or (not (= ?x465 0.0)) (not $x248)))))
 (let (($x232 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x128 (* d b00)))
 (let ((?x122 (* b d00)))
 (let ((?x123 (* (- 1.0) ?x122)))
 (let ((?x88 (* 2.0 (* y b00))))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x103 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let ((?x715 (+ ?x167 ?x205 (* (- (/ 1.0 16.0)) (* y y d d b b b b b)) (* (- (/ 3.0 16.0)) (* y y d d b b b b a)) (* (- (/ 3.0 16.0)) (* y y d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b b b b)) (* (- (/ 3.0 16.0)) (* y d d d b b b b a)) (* (- (/ 3.0 16.0)) (* y d d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d d b b b b b)) (* (- (/ 3.0 64.0)) (* d d d d b b b b a)) (* (- (/ 3.0 64.0)) (* d d d d b b b a a)) (* (- (/ 1.0 64.0)) (* d d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d b b b)))))
 (let ((?x282 (* (/ 1.0 8.0) (* y y y d d b b a a a b00))))
 (let ((?x296 (* (- (/ 1.0 8.0)) (* y y d d b b a a a b00 y00))))
 (let ((?x295 (* (- (/ 1.0 16.0)) (* y y d d b b a a a a d00))))
 (let ((?x293 (* (/ 1.0 16.0) (* y y d d b b a a a a00 d00))))
 (let ((?x273 (+ ?x293 ?x295 ?x296 ?x282 (* (/ 1.0 32.0) (* y d d b b b a00 d00)) (* (- (/ 1.0 32.0)) (* y d d b b b a d00)) (* (- (/ 1.0 16.0)) (* y d d b b b b00 y00)) (* (/ 1.0 16.0) (* y y d d b b b b00)))))
 (let (($x266 (not (= ?x273 0.0))))
 (let (($x236 (or $x266 (not (= (* ?x715 (+ ?x30 ?x103 ?x82 ?x88 ?x123 ?x128)) 0.0)))))
 (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x186 (= (+ ?x135 ?x151 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ ?x122 (* (- 1.0) ?x128)) 0.0)))
 (let (($x114 (= (+ ?x30 ?x103 ?x82 ?x88) 0.0)))
 (and $x114 $x124 $x186 $x236)))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x345 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x430 (+ ?x82 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x142 (* (/ 1.0 2.0) d)))
 (let ((?x311 (+ y ?x142)))
 (let ((?x62 (+ a b)))
 (let ((?x331 (+ (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x311 ?x311 d d b b)) (* (- (/ 1.0 32.0)) (* ?x311 d d b b b)))))
 (let ((?x165 (* 2.0 (* b00 y))))
 (let ((?x89 (+ ?x82 ?x30 ?x165 (* (- 1.0) (* d00 a)))))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let (($x343 (or (not (= (* (+ ?x167 ?x205) ?x89) 0.0)) (not (= (* ?x331 ?x430) 0.0)))))
 (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x270 (= (+ ?x135 ?x151 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (and (= ?x89 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x270 $x343)))))))))))))))) :qid k!33))
 ))
 (let ((?x312 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x128 (* d b00)))
 (let ((?x122 (* b d00)))
 (let ((?x123 (* (- 1.0) ?x122)))
 (let ((?x88 (* 2.0 (* y b00))))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x103 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let ((?x715 (+ ?x167 ?x205 (* (- (/ 1.0 16.0)) (* y y d d b b b b b)) (* (- (/ 3.0 16.0)) (* y y d d b b b b a)) (* (- (/ 3.0 16.0)) (* y y d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b b b b)) (* (- (/ 3.0 16.0)) (* y d d d b b b b a)) (* (- (/ 3.0 16.0)) (* y d d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d d b b b b b)) (* (- (/ 3.0 64.0)) (* d d d d b b b b a)) (* (- (/ 3.0 64.0)) (* d d d d b b b a a)) (* (- (/ 1.0 64.0)) (* d d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d b b b)))))
 (let ((?x282 (* (/ 1.0 8.0) (* y y y d d b b a a a b00))))
 (let ((?x296 (* (- (/ 1.0 8.0)) (* y y d d b b a a a b00 y00))))
 (let ((?x295 (* (- (/ 1.0 16.0)) (* y y d d b b a a a a d00))))
 (let ((?x293 (* (/ 1.0 16.0) (* y y d d b b a a a a00 d00))))
 (let ((?x273 (+ ?x293 ?x295 ?x296 ?x282 (* (/ 1.0 32.0) (* y d d b b b a00 d00)) (* (- (/ 1.0 32.0)) (* y d d b b b a d00)) (* (- (/ 1.0 16.0)) (* y d d b b b b00 y00)) (* (/ 1.0 16.0) (* y y d d b b b b00)))))
 (let (($x266 (not (= ?x273 0.0))))
 (let (($x236 (or $x266 (not (= (* ?x715 (+ ?x30 ?x103 ?x82 ?x88 ?x123 ?x128)) 0.0)))))
 (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x186 (= (+ ?x135 ?x151 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ ?x122 (* (- 1.0) ?x128)) 0.0)))
 (let (($x114 (= (+ ?x30 ?x103 ?x82 ?x88) 0.0)))
 (let (($x320 (and $x114 $x124 $x186 $x236)))
 (let ((?x430 (+ ?x82 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x142 (* (/ 1.0 2.0) d)))
 (let ((?x311 (+ y ?x142)))
 (let ((?x62 (+ a b)))
 (let ((?x331 (+ (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x311 ?x311 d d b b)) (* (- (/ 1.0 32.0)) (* ?x311 d d b b b)))))
 (let ((?x165 (* 2.0 (* b00 y))))
 (let ((?x89 (+ ?x82 ?x30 ?x165 (* (- 1.0) (* d00 a)))))
 (let (($x343 (or (not (= (* (+ ?x167 ?x205) ?x89) 0.0)) (not (= (* ?x331 ?x430) 0.0)))))
 (let (($x270 (= (+ ?x135 ?x151 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x178 (and (= ?x89 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x270 $x343)))
 (rewrite (= $x178 $x320)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x73 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x52 (/ d 2.0)))
 (let ((?x59 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x62 (+ a b)))
 (let ((?x38 (- 1.0)))
 (let ((?x67 (- (* ?x38 ?x62 ?x62 ?x62 ?x51 ?x51 ?x52 ?x52 ?x59 ?x59) (* ?x51 ?x51 ?x51 ?x52 ?x52 ?x59))))
 (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let (($x69 (= (* (- (+ ?x27 ?x30 (* 2.0 b00 ?x59)) (* ?x62 d00)) ?x67) 0.0)))
 (let ((?x55 (- (* ?x38 a a a ?x51 ?x51 ?x52 ?x52 y y) (* ?x51 ?x51 ?x51 ?x52 ?x52 y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ ?x27 ?x30 (* 2.0 b00 y)) ?x33)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and (= ?x34 0.0) (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x34 ?x55) 0.0)) (not $x69))))))))))))))))) :qid k!33))
 ))
 (let ((?x153 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x430 (+ ?x82 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x142 (* (/ 1.0 2.0) d)))
 (let ((?x311 (+ y ?x142)))
 (let ((?x62 (+ a b)))
 (let ((?x331 (+ (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x311 ?x311 d d b b)) (* (- (/ 1.0 32.0)) (* ?x311 d d b b b)))))
 (let ((?x165 (* 2.0 (* b00 y))))
 (let ((?x89 (+ ?x82 ?x30 ?x165 (* (- 1.0) (* d00 a)))))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let (($x343 (or (not (= (* (+ ?x167 ?x205) ?x89) 0.0)) (not (= (* ?x331 ?x430) 0.0)))))
 (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x270 (= (+ ?x135 ?x151 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x178 (and (= ?x89 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x270 $x343)))
 (let ((?x52 (/ d 2.0)))
 (let ((?x59 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x67 (- (* (- 1.0) ?x62 ?x62 ?x62 ?x51 ?x51 ?x52 ?x52 ?x59 ?x59) (* ?x51 ?x51 ?x51 ?x52 ?x52 ?x59))))
 (let ((?x64 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 ?x59)) (* ?x62 d00))))
 (let ((?x55 (- (* (- 1.0) a a a ?x51 ?x51 ?x52 ?x52 y y) (* ?x51 ?x51 ?x51 ?x52 ?x52 y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x72 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x34 ?x55) 0.0)) (not (= (* ?x64 ?x67) 0.0))))))
 (rewrite (= $x72 $x178))))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x414 (mp (mp @x74 (quant-intro (proof-bind ?x153) (= $x73 $x345)) $x345) (quant-intro (proof-bind ?x312) (= $x345 $x232)) $x232)))
 (let ((@x389 (mp (mp~ @x414 (sk (~ $x232 $x288)) $x288) (rewrite (= $x288 $x458)) $x458)))
 (let ((@x413 (and-elim @x389 $x215)))
 (let (($x280 (<= ?x257 0.0)))
 (let (($x528 (= 0.0 ?x257)))
 (let ((@x441 (mp @x413 (symm (commutativity (= $x528 $x215)) (= $x215 $x528)) $x528)))
 (let ((@x164 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x528) $x280)) @x441 $x280)))
 (let (($x265 (>= ?x257 0.0)))
 (let ((@x434 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x528) $x265)) @x441 $x265)))
 (let (($x443 (<= ?x426 0.0)))
 (let (($x578 (<= ?x515 0.0)))
 (let (($x406 (= 0.0 ?x515)))
 (let ((@x396 (mp (and-elim @x389 $x420) (symm (commutativity (= $x406 $x420)) (= $x420 $x406)) $x406)))
 (let ((@x399 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x406) $x578)) @x396 $x578)))
 (let (($x513 (>= ?x334 0.0)))
 (let (($x572 (= 0.0 ?x334)))
 (let ((@x356 (mp (and-elim @x389 $x669) (symm (commutativity (= $x572 $x669)) (= $x669 $x572)) $x572)))
 (let ((@x308 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x572) $x513)) @x356 $x513)))
 (let (($x677 (>= ?x426 0.0)))
 (let (($x404 (>= ?x515 0.0)))
 (let ((@x428 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x406) $x404)) @x396 $x404)))
 (let (($x580 (<= ?x334 0.0)))
 (let ((@x302 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x572) $x580)) @x356 $x580)))
 (let ((@x663 ((_ th-lemma arith) (lemma ((_ th-lemma arith) (hypothesis (not $x677)) @x302 @x428 false) $x677) (lemma ((_ th-lemma arith) @x308 @x399 (hypothesis (not $x443)) false) $x443) @x434 @x164 (= ?x257 ?x426))))
 (let (($x377 (or (not $x432) $x394)))
 (let ((@x391 (unit-resolution ((_ th-lemma arith) $x377) (hypothesis $x407) (hypothesis $x432) false)))
 (let ((@x574 (unit-resolution (lemma @x391 $x377) (trans* (symm @x663 (= ?x426 ?x257)) @x413 $x432) $x394)))
 (let ((@x582 (mp (unit-resolution (and-elim @x389 $x388) @x574 $x85) (monotonicity @x573 (= $x85 $x575)) $x575)))
 (let (($x374 (<= ?x429 0.0)))
 (let ((@x422 (unit-resolution ((_ th-lemma arith) (or (not $x404) (not $x578) $x374)) @x399 @x428 (hypothesis (not $x374)) false)))
 (let ((@x591 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x229 (not $x374) $x579)) (lemma @x422 $x374) @x582 $x579)))
 (unit-resolution ((_ th-lemma arith) (or (not $x280) (not $x265) (not $x580) (not $x513) $x269)) @x302 @x308 @x164 @x434 @x591 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       22
 :arith-eq-adapter                16
 :arith-bound-propagations-cheap  11
 :arith-conflicts                 36
 :arith-diseq                     23
 :arith-fixed-eqs                 1
 :arith-grobner-calls             3
 :arith-grobner-conflicts         2
 :arith-horner-calls              3
 :arith-horner-cross-nested-forms 6
 :arith-lower                     37
 :arith-make-feasible             22
 :arith-max-columns               52
 :arith-max-rows                  7
 :arith-nla-explanations          8
 :arith-nla-lemmas                34
 :arith-propagations              11
 :arith-upper                     22
 :conflicts                       6
 :decisions                       24
 :del-clause                      18
 :final-checks                    21
 :max-memory                      2.13
 :memory                          1.10
 :mk-bool-var                     84
 :mk-clause                       64
 :num-allocs                      2607710
 :num-checks                      1
 :propagations                    30
 :rlimit-count                    4524
 :time                            0.02
 :total-time                      0.02)
