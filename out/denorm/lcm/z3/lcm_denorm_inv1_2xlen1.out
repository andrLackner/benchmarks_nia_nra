unsat
((set-logic NIA)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(proof
(let ((?x468 (* (- 1) k!00)))
 (let ((?x347 (* (- 1) k!10)))
 (let ((?x255 (* u!5 x!3)))
 (let ((?x390 (+ ?x255 (* y!2 v!4) ?x347 ?x468)))
 (let (($x485 (<= ?x390 0)))
 (let (($x387 (= ?x390 0)))
 (let ((?x234 (* (- 1) (* y!2 y!2 y!2 v!4 v!4 v!4 v!4 v!4 x!3 x!3))))
 (let ((?x235 (* (- 2) (* y!2 u!5 k!00 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x277 (* (- 2) (* y!2 k!00 v!4 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x356 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3)))
 (let ((?x301 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3)))
 (let ((?x142 (* (- 1) (* y!2 y!2 y!2 u!5 v!4 v!4 v!4 v!4 x!3 x!3))))
 (let ((?x141 (* 2 (* y!2 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x137 (* (- 2) (* y!2 k!10 v!4 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x101 (* (- 1) (* y!2 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x99 (* (- 2) (* y!2 u!5 k!10 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x397 (* 2 (* y!2 y!2 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x398 (* (- 1) (* y!2 y!2 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x233 (+ (* y!2 y!2 u!5 k!10 v!4 v!4 v!4 x!3 x!3) (* y!2 y!2 k!10 v!4 v!4 v!4 v!4 x!3 x!3) (* y!2 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3) ?x398 ?x397 ?x99 (* y!2 y!2 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3) ?x101 (* u!5 k!10 v!4 v!4 v!4 x!3 x!3 x!3 x!3) (* k!10 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3) ?x137 ?x141 ?x142 (* (- 1) ?x301) (* (- 1) ?x356) (* y!2 y!2 k!00 v!4 v!4 v!4 v!4 x!3 x!3) (* y!2 y!2 u!5 k!00 v!4 v!4 v!4 x!3 x!3) ?x277 (* u!5 k!00 v!4 v!4 v!4 x!3 x!3 x!3 x!3) (* k!00 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3) ?x235 ?x234)))
 (let (($x231 (= ?x233 0)))
 (let (($x276 (not $x231)))
 (let ((?x253 (* (- 1) y!2)))
 (let ((?x388 (+ ?x253 x!3)))
 (let ((?x256 (+ u!5 v!4)))
 (let (($x396 (= (* ?x256 ?x256 ?x256 ?x388 ?x388 ?x390 y!2 y!2 u!5) 0)))
 (let (($x112 (or (not $x396) $x276)))
 (let (($x219 (and $x387 $x112)))
 (let ((?x379 (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!00))))
 (let ((?x377 (* (- 1) (* u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!00))))
 (let ((?x299 (* 2 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!00))))
 (let ((?x372 (* (- 1) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!00))))
 (let ((?x374 (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!00))))
 (let ((?x370 (* 2 (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!00))))
 (let ((?x363 (* (- 2) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2))))
 (let ((?x366 (* (- 1) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2))))
 (let ((?x359 (* (- 2) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2))))
 (let ((?x146 (* (- 1) (* u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!10))))
 (let ((?x362 (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!10))))
 (let ((?x238 (* (- 1) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2))))
 (let ((?x241 (* 2 (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!10))))
 (let ((?x302 (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!10))))
 (let ((?x245 (* (- 1) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!10))))
 (let ((?x247 (* 2 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!10))))
 (let ((?x380 (+ ?x247 ?x245 ?x302 ?x241 ?x238 ?x356 ?x362 ?x146 ?x301 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2) ?x359 ?x366 ?x363 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 y!2) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 y!2) ?x370 ?x374 ?x372 ?x299 ?x377 ?x379)))
 (let ((?x305 (+ ?x255 (* v!4 y!2) ?x347 ?x468)))
 (let ((?x252 (+ x!3 ?x253)))
 (let (($x384 (or (not (= (* ?x256 ?x256 ?x256 ?x252 ?x252 ?x305 y!2 y!2 u!5) 0)) (not (= ?x380 0)))))
 (let (($x297 (and (= ?x305 0) $x384)))
 (let (($x437 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x422 (* v v v v v x x y y y)))
 (let ((?x409 (* u v v v v x x y y y)))
 (let ((?x406 (* u u v v v x x x y y)))
 (let ((?x250 (* v v v v v x x x x y)))
 (let ((?x242 (* u v v v v x x x x x)))
 (let ((?x174 (* u u v v v x x x x x)))
 (let ((?x577 (+ (* 2 (* v v v v x x x y k!10)) (* (- 1) (* u v v v x x x x k!10)) (* (- 1) (* v v v v x x x x k!10)) (* 2 (* u v v v x x x y k!10)) (* (- 1) (* u v v v v x x x x y)) ?x174 (* (- 1) (* v v v v x x y y k!10)) (* (- 1) (* u v v v x x y y k!10)) ?x242 ?x250 (* (- 2) (* u u v v v x x x x y)) (* (- 1) (* u v v v v x x x y y)) (* (- 2) (* v v v v v x x x y y)) ?x406 ?x409 ?x422 (* 2 (* u v v v x x x y k!00)) (* (- 1) (* v v v v x x x x k!00)) (* (- 1) (* u v v v x x x x k!00)) (* 2 (* v v v v x x x y k!00)) (* (- 1) (* u v v v x x y y k!00)) (* (- 1) (* v v v v x x y y k!00)))))
 (let ((?x468 (* (- 1) k!00)))
 (let ((?x347 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x197 (+ ?x33 ?x34 ?x347 ?x468)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x51 (+ u v)))
 (let (($x585 (or (not (= (* ?x51 ?x51 ?x51 ?x77 ?x77 ?x197 y y u) 0)) (not (= ?x577 0)))))
 (and (= ?x197 0) $x585)))))))))))))))) :qid k!29))
 ))
 (let (($x118 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x347 (* (- 1) k!10)))
 (let ((?x317 (+ y (* (- 1) x))))
 (let ((?x282 (* ?x317 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x468 (* (- 1) k!00)))
 (let ((?x430 (* ?x51 ?x317 ?x317 (+ ?x468 ?x52 ?x282 ?x347) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x319 (* ?x77 u)))
 (let ((?x439 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x468 ?x319 ?x45 ?x347) y y u)))
 (let (($x126 (or (not (= ?x439 0)) (not (= ?x430 0)))))
 (let ((?x177 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x177 0) $x126))))))))))))))) :qid k!29))
 ))
 (let ((?x464 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x422 (* v v v v v x x y y y)))
 (let ((?x409 (* u v v v v x x y y y)))
 (let ((?x406 (* u u v v v x x x y y)))
 (let ((?x250 (* v v v v v x x x x y)))
 (let ((?x242 (* u v v v v x x x x x)))
 (let ((?x174 (* u u v v v x x x x x)))
 (let ((?x577 (+ (* 2 (* v v v v x x x y k!10)) (* (- 1) (* u v v v x x x x k!10)) (* (- 1) (* v v v v x x x x k!10)) (* 2 (* u v v v x x x y k!10)) (* (- 1) (* u v v v v x x x x y)) ?x174 (* (- 1) (* v v v v x x y y k!10)) (* (- 1) (* u v v v x x y y k!10)) ?x242 ?x250 (* (- 2) (* u u v v v x x x x y)) (* (- 1) (* u v v v v x x x y y)) (* (- 2) (* v v v v v x x x y y)) ?x406 ?x409 ?x422 (* 2 (* u v v v x x x y k!00)) (* (- 1) (* v v v v x x x x k!00)) (* (- 1) (* u v v v x x x x k!00)) (* 2 (* v v v v x x x y k!00)) (* (- 1) (* u v v v x x y y k!00)) (* (- 1) (* v v v v x x y y k!00)))))
 (let ((?x468 (* (- 1) k!00)))
 (let ((?x347 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x197 (+ ?x33 ?x34 ?x347 ?x468)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x51 (+ u v)))
 (let (($x585 (or (not (= (* ?x51 ?x51 ?x51 ?x77 ?x77 ?x197 y y u) 0)) (not (= ?x577 0)))))
 (let (($x315 (and (= ?x197 0) $x585)))
 (let ((?x317 (+ y (* (- 1) x))))
 (let ((?x430 (* ?x51 ?x317 ?x317 (+ ?x468 (* ?x51 x) (* ?x317 v) ?x347) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x439 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x468 (* ?x77 u) (* ?x44 y) ?x347) y y u)))
 (let (($x126 (or (not (= ?x439 0)) (not (= ?x430 0)))))
 (let ((?x177 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x307 (and (= ?x177 0) $x126)))
 (rewrite (= $x307 $x315))))))))))))))))))))))))))
 ))
 (let (($x475 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x347 (* (- 1) k!10)))
 (let ((?x317 (+ y (* (- 1) x))))
 (let ((?x282 (* ?x317 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x468 (* (- 1) k!00)))
 (let ((?x430 (* ?x51 ?x317 ?x317 (+ ?x468 ?x52 ?x282 ?x347) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x319 (* ?x77 u)))
 (let ((?x439 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x468 ?x319 ?x45 ?x347) y y u)))
 (let (($x126 (or (not (= ?x439 0)) (not (= ?x430 0)))))
 (and (= (+ ?x468 (* x u) (* y v) ?x347) 0) $x126)))))))))))))) :qid k!29))
 ))
 (let ((?x308 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x347 (* (- 1) k!10)))
 (let ((?x317 (+ y (* (- 1) x))))
 (let ((?x282 (* ?x317 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x468 (* (- 1) k!00)))
 (let ((?x430 (* ?x51 ?x317 ?x317 (+ ?x468 ?x52 ?x282 ?x347) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x319 (* ?x77 u)))
 (let ((?x439 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x468 ?x319 ?x45 ?x347) y y u)))
 (let (($x126 (or (not (= ?x439 0)) (not (= ?x430 0)))))
 (let ((?x177 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x307 (and (= ?x177 0) $x126)))
 (let (($x129 (and (= (+ ?x468 (* x u) (* y v) ?x347) 0) $x126)))
 (rewrite (= $x129 $x307)))))))))))))))))))
 ))
 (let (($x440 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x317 (+ y (* (- 1) x))))
 (let ((?x282 (* ?x317 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x210 (* ?x51 ?x317 ?x317 (+ ?x71 ?x52 ?x282 ?x87) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x319 (* ?x77 u)))
 (let ((?x466 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x71 ?x319 ?x45 ?x87) y y u)))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x466 0)) (not (= ?x210 0))))))))))))))))) :qid k!29))
 ))
 (let ((?x206 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x347 (* (- 1) k!10)))
 (let ((?x317 (+ y (* (- 1) x))))
 (let ((?x282 (* ?x317 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x468 (* (- 1) k!00)))
 (let ((?x430 (* ?x51 ?x317 ?x317 (+ ?x468 ?x52 ?x282 ?x347) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x319 (* ?x77 u)))
 (let ((?x439 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x468 ?x319 ?x45 ?x347) y y u)))
 (let (($x126 (or (not (= ?x439 0)) (not (= ?x430 0)))))
 (let (($x129 (and (= (+ ?x468 (* x u) (* y v) ?x347) 0) $x126)))
 (let ((?x210 (* ?x51 ?x317 ?x317 (+ (* (- 1) (* u00 x00)) ?x52 ?x282 (* (- 1) (* v00 y00))) x x v v v)))
 (let ((?x466 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ (* (- 1) (* u00 x00)) ?x319 ?x45 (* (- 1) (* v00 y00))) y y u)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x133 (* y v)))
 (let ((?x130 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x195 (and (= (+ ?x71 ?x130 ?x133 ?x87) 0) (or (not (= ?x466 0)) (not (= ?x210 0))))))
 (rewrite (= $x195 $x129)))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x51 (+ u v)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) (* ?x51 x) (* v ?x53)) ?x38) ?x29 ?x51 v x x v v ?x53 ?x53)))
 (let ((?x44 (+ v u)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x29 u ?x44 ?x42 ?x42 ?x44 ?x44 y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))))))))) :qid k!29))
 ))
 (let ((?x327 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x317 (+ y (* (- 1) x))))
 (let ((?x282 (* ?x317 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x210 (* ?x51 ?x317 ?x317 (+ ?x71 ?x52 ?x282 ?x87) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x319 (* ?x77 u)))
 (let ((?x466 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x71 ?x319 ?x45 ?x87) y y u)))
 (let (($x195 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x466 0)) (not (= ?x210 0))))))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 ?x51 v x x v v ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x29 u ?x44 ?x42 ?x42 ?x44 ?x44 y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x195))))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x460 (mp (mp @x63 (quant-intro (proof-bind ?x327) (= $x62 $x440)) $x440) (rewrite (= $x440 $x440)) $x440)))
 (let ((@x328 (mp (mp @x460 (quant-intro (proof-bind ?x206) (= $x440 $x475)) $x475) (quant-intro (proof-bind ?x308) (= $x475 $x118)) $x118)))
 (let ((@x296 (mp~ (mp @x328 (quant-intro (proof-bind ?x464) (= $x118 $x437)) $x437) (sk (~ $x437 $x297)) $x297)))
 (let ((@x512 (mp @x296 (rewrite (= $x297 $x219)) $x219)))
 (let ((@x94 (and-elim @x512 $x387)))
 (let ((@x150 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x485)) @x94 $x485)))
 (let (($x493 (>= ?x390 0)))
 (let ((@x337 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x493)) @x94 $x493)))
 (let (($x332 (not (<= ?x233 0))))
 (let (($x271 (>= ?x233 0)))
 (let ((@x334 (unit-resolution (and-elim @x512 $x112) ((_ th-lemma arith eq-propagate 0 0 0 0) @x337 @x150 @x337 @x150 $x396) $x276)))
 (let ((@x326 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x231 $x332 (not $x271))) @x334 (lemma ((_ th-lemma arith) (hypothesis (not $x271)) @x337 @x150 false) $x271) $x332)))
 ((_ th-lemma arith) @x326 @x337 @x150 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        2
 :arith-assert-lower        7
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             128
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 39
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                3
 :eliminated-applications   2
 :final-checks              2
 :max-memory                3.61
 :memory                    3.11
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1176185
 :num-checks                1
 :propagations              10
 :rlimit-count              3172
 :time                      0.01
 :total-time                0.01)
