unsat
((set-logic NIA)
(proof
(let (($x54 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x46 (+ ?x42 r00 ?x43 ?x45)))
 (let ((?x47 (- ?x46 ?x35)))
 (let ((?x48 (- ?x47 ?x36)))
 (let ((?x49 (* ?x48 0 ?x41 ?x41 ?x44 ?x44)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let ((?x28 (* ?x27 r)))
 (let ((?x33 (+ ?x28 r00 ?x30 ?x32)))
 (let ((?x37 (- ?x33 ?x35)))
 (let ((?x38 (- ?x37 ?x36)))
 (let (($x40 (= ?x38 0)))
 (and $x40 $x52))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x247 (= $x54 false)))
 (let (($x240 (exists ((r Int) (x Int) )(! false :qid k!26))
 ))
 (let ((@x246 (elim-unused (= $x240 false))))
 (let (($x243 (= $x54 $x240)))
 (let ((?x360 (lambda ((r Int) (x Int) )(let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x46 (+ ?x42 r00 ?x43 ?x45)))
 (let ((?x47 (- ?x46 ?x35)))
 (let ((?x48 (- ?x47 ?x36)))
 (let ((?x49 (* ?x48 0 ?x41 ?x41 ?x44 ?x44)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let ((?x28 (* ?x27 r)))
 (let ((?x33 (+ ?x28 r00 ?x30 ?x32)))
 (let ((?x37 (- ?x33 ?x35)))
 (let ((?x38 (- ?x37 ?x36)))
 (let (($x40 (= ?x38 0)))
 (let (($x53 (and $x40 $x52)))
 (let (($x238 (= $x53 false)))
 (let (($x282 (= (+ (* (- 1) r) r00 ?x30 ?x32 (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x354 (and $x282 false)))
 (let (($x231 (= $x52 false)))
 (let ((@x230 (rewrite (= (or false) false))))
 (let (($x226 (or false)))
 (let (($x227 (= $x52 $x226)))
 (let (($x224 (= $x51 false)))
 (let ((@x223 (rewrite (= (not true) false))))
 (let (($x219 (not true)))
 (let (($x220 (= $x51 $x219)))
 (let (($x217 (= $x50 true)))
 (let ((@x216 (rewrite (= (= 0 0) true))))
 (let (($x212 (= 0 0)))
 (let (($x213 (= $x50 $x212)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x164 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x135 (* ?x119 ?x119)))
 (let ((?x305 (* (- 3) r)))
 (let ((?x337 (+ (- 1) ?x305 r00 ?x135 ?x32 ?x80 ?x96)))
 (let ((?x342 (* ?x337 0 ?x119 ?x119 ?x164 ?x164)))
 (let ((@x166 (rewrite (= ?x44 ?x164))))
 (let ((@x121 (rewrite (= ?x41 ?x119))))
 (let ((?x322 (+ (- 1) ?x305 r00 ?x135 ?x32 ?x80)))
 (let ((?x332 (+ ?x322 ?x96)))
 (let ((?x329 (- ?x322 ?x36)))
 (let ((?x306 (+ (- 1) ?x305 r00 ?x135 ?x32)))
 (let ((?x319 (+ ?x306 ?x80)))
 (let ((?x73 (* (- 1) ?x35)))
 (let ((?x314 (+ ?x306 ?x73)))
 (let ((@x82 (rewrite (= ?x73 ?x80))))
 (let ((@x326 (trans (monotonicity @x82 (= ?x314 ?x319)) (rewrite (= ?x319 ?x322)) (= ?x314 ?x322))))
 (let ((@x308 (rewrite (= (+ (+ (- 1) ?x59) r00 ?x135 (+ ?x32 (* (- 2) r))) ?x306))))
 (let ((@x293 (trans (monotonicity @x166 (= ?x45 (* 2 ?x164))) (rewrite (= (* 2 ?x164) (+ ?x32 (* 2 ?x59)))) (= ?x45 (+ ?x32 (* 2 ?x59))))))
 (let ((@x300 (trans @x293 (rewrite (= (+ ?x32 (* 2 ?x59)) (+ ?x32 (* (- 2) r)))) (= ?x45 (+ ?x32 (* (- 2) r))))))
 (let ((@x130 (trans (monotonicity (rewrite (= ?x27 (- 1))) @x121 (= ?x42 (* (- 1) ?x119))) (rewrite (= (* (- 1) ?x119) (+ (* (- 1) 1) ?x59))) (= ?x42 (+ (* (- 1) 1) ?x59)))))
 (let ((@x132 (trans @x130 (rewrite (= (+ (* (- 1) 1) ?x59) (+ (- 1) ?x59))) (= ?x42 (+ (- 1) ?x59)))))
 (let ((@x303 (monotonicity @x132 (rewrite (= ?x43 ?x135)) @x300 (= ?x46 (+ (+ (- 1) ?x59) r00 ?x135 (+ ?x32 (* (- 2) r)))))))
 (let ((@x313 (monotonicity (trans @x303 @x308 (= ?x46 ?x306)) (= ?x47 (- ?x306 ?x35)))))
 (let ((@x328 (trans (trans @x313 (rewrite (= (- ?x306 ?x35) ?x314)) (= ?x47 ?x314)) @x326 (= ?x47 ?x322))))
 (let ((@x336 (trans (monotonicity @x328 (= ?x48 ?x329)) (rewrite (= ?x329 ?x332)) (= ?x48 ?x332))))
 (let ((@x344 (monotonicity (trans @x336 (rewrite (= ?x332 ?x337)) (= ?x48 ?x337)) @x121 @x121 @x166 @x166 (= ?x49 ?x342))))
 (let ((@x349 (trans (monotonicity (trans @x344 (rewrite (= ?x342 0)) $x50) $x213) @x216 $x217)))
 (let ((@x353 (trans (monotonicity (trans (monotonicity @x349 $x220) @x223 $x224) $x227) @x230 $x231)))
 (trans (monotonicity (rewrite (= $x40 $x282)) @x353 (= $x53 $x354)) (rewrite (= $x354 false)) $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (mp @x55 (trans (quant-intro (proof-bind ?x360) $x243) @x246 $x247) false))))))))))

(:max-memory   3.34
 :memory       3.03
 :mk-bool-var  5
 :num-allocs   898807
 :rlimit-count 165
 :time         0.01
 :total-time   0.01)
