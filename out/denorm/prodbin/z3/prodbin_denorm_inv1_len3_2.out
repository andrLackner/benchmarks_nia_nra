unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(proof
(let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x366 (to_real z!0)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x359 (to_real y!1)))
 (let ((?x344 (to_real x!2)))
 (let ((?x420 (* ?x344 ?x359)))
 (let ((?x126 (+ ?x420 ?x116 ?x366 ?x196)))
 (let (($x527 (= ?x126 0.0)))
 (let (($x528 (not $x527)))
 (let ((?x205 (* (/ 1.0 4.0) (* ?x366 ?x366))))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x420)))
 (let ((?x365 (* (/ 1.0 2.0) ?x366)))
 (let ((?x368 (* (/ 1.0 4.0) (* ?x344 ?x344 ?x359 ?x359))))
 (let ((?x363 (* (/ 1.0 2.0) ?x344)))
 (let ((?x265 (* (- (/ 1.0 2.0)) (* ?x344 ?x344 ?x359))))
 (let ((?x162 (* (/ 1.0 2.0) (* ?x344 ?x366))))
 (let ((?x388 (* (- (/ 1.0 2.0)) (* ?x359 ?x366 ?x366))))
 (let ((?x239 (* (/ 1.0 4.0) (* ?x344 ?x344))))
 (let ((?x127 (+ (- 1.0) ?x239 (* (/ 1.0 2.0) (* ?x344 ?x359 ?x359 ?x366)) ?x388 ?x162 ?x265 (* (/ 1.0 4.0) (* ?x359 ?x359 ?x366 ?x366)) ?x363 ?x368 ?x365 ?x172 (* (- (/ 1.0 2.0)) (* ?x359 ?x366)) (* (- 1.0) (* ?x344 ?x359 ?x366)) ?x205)))
 (let (($x122 (= (* ?x127 (+ ?x196 ?x116 ?x366 ?x420)) 0.0)))
 (let (($x199 (not $x122)))
 (let ((?x143 (+ ?x48 ?x110 (* (- (/ 1.0 2.0)) (* ?x344 ?x359 ?x359 ?x366)) ?x388 (* (/ 1.0 4.0) (* ?x344 ?x359 ?x359 ?x359 ?x366 ?x366)) (* (/ 1.0 2.0) (* ?x48 ?x359 ?x366)) (* (- 1.0) ?x366) (* (/ 1.0 2.0) (* ?x105 ?x109 ?x359 ?x366)) (* (- 1.0) ?x420) (* (- (/ 1.0 4.0)) (* ?x105 ?x109 ?x359 ?x359 ?x366 ?x366)) (* (/ 1.0 4.0) (* ?x359 ?x359 ?x366 ?x366 ?x366)) (* (- (/ 1.0 4.0)) (* ?x48 ?x359 ?x359 ?x366 ?x366)))))
 (let (($x148 (= ?x143 0.0)))
 (let (($x380 (<= ?x143 0.0)))
 (let ((?x83 (* x00 y00)))
 (let ((?x215 (+ z00 ?x83 (* (- 1) z!0) (* (- 1) (* y!1 x!2)))))
 (let (($x374 (>= ?x215 0)))
 (let (($x94 (= 0 ?x215)))
 (let ((@x170 (symm (commutativity (= $x94 (= ?x215 0))) (= (= ?x215 0) $x94))))
 (let (($x314 (= ?x215 0)))
 (let (($x121 (or (not $x148) $x199)))
 (let (($x354 (and $x314 $x121)))
 (let ((?x164 (* (/ 1.0 2.0) (* ?x344 ?x366 ?x359 ?x359))))
 (let ((?x349 (+ ?x366 ?x196 ?x116 ?x420 ?x164 (* (/ 1.0 2.0) (* ?x366 ?x366 ?x359)) (* (- (/ 1.0 2.0)) (* ?x366 ?x48 ?x359)) (* (- (/ 1.0 2.0)) (* ?x366 ?x359 ?x105 ?x109)) (* (- (/ 1.0 4.0)) (* ?x366 ?x366 ?x366 ?x359 ?x359)) (* (/ 1.0 4.0) (* ?x366 ?x366 ?x48 ?x359 ?x359)) (* (/ 1.0 4.0) (* ?x366 ?x366 ?x359 ?x359 ?x105 ?x109)) (* (- (/ 1.0 4.0)) (* ?x344 ?x366 ?x366 ?x359 ?x359 ?x359)))))
 (let ((?x389 (+ (- 1.0) ?x363 ?x365 ?x172 (* (- (/ 1.0 2.0)) (* ?x366 ?x359)) ?x239 ?x162 ?x205 ?x265 ?x368 (* (- 1.0) (* ?x344 ?x366 ?x359)) ?x164 (* (- (/ 1.0 2.0)) (* ?x366 ?x366 ?x359)) (* (/ 1.0 4.0) (* ?x366 ?x366 ?x359 ?x359)))))
 (let (($x300 (or (not (= (* ?x389 (+ ?x366 ?x196 ?x116 ?x420)) 0.0)) (not (= ?x349 0.0)))))
 (let (($x216 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x83)) 0) $x300)))
 (let (($x171 (exists ((x Int) (y Int) (z Int) )(! (let ((?x61 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x424 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x61 ?x61))))
 (let ((?x234 (* ?x43 ?x61)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x575 (+ ?x46 ?x196 ?x116 ?x234 ?x424 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x61)) (* (- (/ 1.0 2.0)) (* ?x46 ?x48 ?x61)) (* (- (/ 1.0 2.0)) (* ?x46 ?x61 ?x105 ?x109)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x48 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x61 ?x61 ?x105 ?x109)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x61 ?x61 ?x61)))))
 (let (($x581 (not (= ?x575 0.0))))
 (let ((?x416 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x61 ?x61))))
 (let ((?x345 (* (/ 1.0 4.0) (* ?x43 ?x43 ?x61 ?x61))))
 (let ((?x395 (* (/ 1.0 4.0) (* ?x46 ?x46))))
 (let ((?x422 (* (/ 1.0 2.0) (* ?x43 ?x46))))
 (let ((?x324 (* (/ 1.0 4.0) (* ?x43 ?x43))))
 (let ((?x277 (* (- (/ 1.0 2.0)) (* ?x46 ?x61))))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x234)))
 (let ((?x271 (* (/ 1.0 2.0) ?x46)))
 (let ((?x268 (* (/ 1.0 2.0) ?x43)))
 (let ((?x350 (+ (- 1.0) ?x268 ?x271 ?x274 ?x277 ?x324 ?x422 ?x395 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x61)) ?x345 (* (- 1.0) (* ?x43 ?x46 ?x61)) ?x424 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x61)) ?x416)))
 (let (($x111 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x111 (or (not (= (* ?x350 (+ ?x46 ?x196 ?x116 ?x234)) 0.0)) $x581)))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x534 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x416 (* (/ 1.0 4.0) (* ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x277 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x291 (* (+ (- 1.0) ?x277 ?x416) (+ ?x116 (* (to_real y) (to_real x)) ?x46 ?x196))))
 (let ((?x43 (to_real x)))
 (let ((?x209 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x196)))
 (let ((?x61 (to_real y)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x436 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x225 (+ ?x46 ?x43)))
 (let ((?x486 (* (+ (- 1.0) (* (- 1.0) (* ?x225 ?x436)) (* ?x225 ?x225 ?x436 ?x436)) ?x209)))
 (let (($x329 (or (not (= ?x486 0.0)) (not (= ?x291 0.0)))))
 (let (($x237 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x237 $x329)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x133 (lambda ((x Int) (y Int) (z Int) )(let ((?x61 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x424 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x61 ?x61))))
 (let ((?x234 (* ?x43 ?x61)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x575 (+ ?x46 ?x196 ?x116 ?x234 ?x424 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x61)) (* (- (/ 1.0 2.0)) (* ?x46 ?x48 ?x61)) (* (- (/ 1.0 2.0)) (* ?x46 ?x61 ?x105 ?x109)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x48 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x61 ?x61 ?x105 ?x109)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x61 ?x61 ?x61)))))
 (let (($x581 (not (= ?x575 0.0))))
 (let ((?x416 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x61 ?x61))))
 (let ((?x345 (* (/ 1.0 4.0) (* ?x43 ?x43 ?x61 ?x61))))
 (let ((?x395 (* (/ 1.0 4.0) (* ?x46 ?x46))))
 (let ((?x422 (* (/ 1.0 2.0) (* ?x43 ?x46))))
 (let ((?x324 (* (/ 1.0 4.0) (* ?x43 ?x43))))
 (let ((?x277 (* (- (/ 1.0 2.0)) (* ?x46 ?x61))))
 (let ((?x274 (* (- (/ 1.0 2.0)) ?x234)))
 (let ((?x271 (* (/ 1.0 2.0) ?x46)))
 (let ((?x268 (* (/ 1.0 2.0) ?x43)))
 (let ((?x350 (+ (- 1.0) ?x268 ?x271 ?x274 ?x277 ?x324 ?x422 ?x395 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x61)) ?x345 (* (- 1.0) (* ?x43 ?x46 ?x61)) ?x424 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x61)) ?x416)))
 (let (($x111 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x377 (and $x111 (or (not (= (* ?x350 (+ ?x46 ?x196 ?x116 ?x234)) 0.0)) $x581))))
 (let (($x327 (= (* (+ (- 1.0) ?x277 ?x416) (+ ?x116 (* ?x61 ?x43) ?x46 ?x196)) 0.0)))
 (let ((?x209 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x61)))) ?x46 ?x43 ?x196)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x436 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x225 (+ ?x46 ?x43)))
 (let ((?x486 (* (+ (- 1.0) (* (- 1.0) (* ?x225 ?x436)) (* ?x225 ?x225 ?x436 ?x436)) ?x209)))
 (let (($x329 (or (not (= ?x486 0.0)) (not $x327))))
 (let (($x237 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x131 (and $x237 $x329)))
 (rewrite (= $x131 $x377)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x208 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x416 (* (/ 1.0 4.0) (* ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x277 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x291 (* (+ (- 1.0) ?x277 ?x416) (+ ?x116 (* (to_real y) (to_real x)) ?x46 ?x196))))
 (let ((?x43 (to_real x)))
 (let ((?x209 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x196)))
 (let ((?x61 (to_real y)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x436 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x225 (+ ?x46 ?x43)))
 (let ((?x486 (* (+ (- 1.0) (* (- 1.0) (* ?x225 ?x436)) (* ?x225 ?x225 ?x436 ?x436)) ?x209)))
 (let (($x329 (or (not (= ?x486 0.0)) (not (= ?x291 0.0)))))
 (let (($x166 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x166 $x329)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x146 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x416 (* (/ 1.0 4.0) (* ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x277 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x291 (* (+ (- 1.0) ?x277 ?x416) (+ ?x116 (* (to_real y) (to_real x)) ?x46 ?x196))))
 (let ((?x43 (to_real x)))
 (let ((?x209 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x196)))
 (let ((?x61 (to_real y)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x436 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x225 (+ ?x46 ?x43)))
 (let ((?x486 (* (+ (- 1.0) (* (- 1.0) (* ?x225 ?x436)) (* ?x225 ?x225 ?x436 ?x436)) ?x209)))
 (let (($x329 (or (not (= ?x486 0.0)) (not (= ?x291 0.0)))))
 (let (($x237 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x131 (and $x237 $x329)))
 (let (($x166 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x246 (and $x166 $x329)))
 (rewrite (= $x246 $x131)))))))))))))))))))))))))
 ))
 (let (($x75 (exists ((x Int) (y Int) (z Int) )(! (let ((?x58 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x61 (to_real y)))
 (let ((?x62 (/ ?x61 ?x41)))
 (let ((?x48 (to_real z00)))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x70 (* (- (+ ?x45 (* ?x41 (to_real x) ?x62) ?x46) ?x48) (+ (- (to_real ?x28) (* ?x62 ?x46)) (* ?x62 ?x62 ?x46 ?x46)))))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (* (- (+ ?x45 (* ?x41 (to_real x) ?x42) ?x46 (to_real x)) ?x48) (+ (- (to_real ?x28) (* ?x42 ?x51)) (* ?x42 ?x42 ?x51 ?x51)))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x57 ?x58)) (not (= ?x70 ?x58))))))))))))))))) :qid k!28))
 ))
 (let ((?x337 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x416 (* (/ 1.0 4.0) (* ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x277 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x291 (* (+ (- 1.0) ?x277 ?x416) (+ ?x116 (* (to_real y) (to_real x)) ?x46 ?x196))))
 (let ((?x43 (to_real x)))
 (let ((?x209 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x196)))
 (let ((?x61 (to_real y)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x436 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x225 (+ ?x46 ?x43)))
 (let ((?x486 (* (+ (- 1.0) (* (- 1.0) (* ?x225 ?x436)) (* ?x225 ?x225 ?x436 ?x436)) ?x209)))
 (let (($x329 (or (not (= ?x486 0.0)) (not (= ?x291 0.0)))))
 (let (($x166 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x246 (and $x166 $x329)))
 (let ((?x58 (to_real 0)))
 (let ((?x69 (+ (- (to_real (- 1)) (* (/ ?x61 (to_real 2)) ?x46)) (* (/ ?x61 (to_real 2)) (/ ?x61 (to_real 2)) ?x46 ?x46))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x65 (- (+ ?x45 (* (to_real 2) ?x43 (/ ?x61 (to_real 2))) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (+ (- (to_real ?x28) (* ?x42 ?x51)) (* ?x42 ?x42 ?x51 ?x51)))))
 (let (($x74 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x57 ?x58)) (not (= (* ?x65 ?x69) ?x58))))))
 (rewrite (= $x74 $x246))))))))))))))))))))))))))))))))))
 ))
 (let ((@x76 (asserted $x75)))
 (let ((@x242 (mp (mp @x76 (quant-intro (proof-bind ?x337) (= $x75 $x208)) $x208) (rewrite (= $x208 $x208)) $x208)))
 (let ((@x155 (mp (mp @x242 (quant-intro (proof-bind ?x146) (= $x208 $x534)) $x534) (quant-intro (proof-bind ?x133) (= $x534 $x171)) $x171)))
 (let ((@x417 (mp (mp~ @x155 (sk (~ $x171 $x216)) $x216) (rewrite (= $x216 $x354)) $x354)))
 (let ((@x502 (mp (and-elim @x417 $x314) @x170 $x94)))
 (let ((@x369 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x374)) @x502 $x374)))
 (let (($x305 (<= ?x215 0)))
 (let ((@x325 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x305)) @x502 $x305)))
 (let ((@x525 (unit-resolution ((_ th-lemma arith) (or $x380 (not $x374) (not $x305))) @x325 @x369 (hypothesis (not $x380)) false)))
 (let (($x158 (>= ?x143 0.0)))
 (let ((@x333 (unit-resolution ((_ th-lemma arith) (or $x158 (not $x374) (not $x305))) @x325 @x369 (hypothesis (not $x158)) false)))
 (let ((@x540 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x148 (not $x380) (not $x158))) (lemma @x333 $x158) (or $x148 (not $x380)))))
 (let ((@x473 (unit-resolution (and-elim @x417 $x121) (unit-resolution @x540 (lemma @x525 $x380) $x148) $x199)))
 (let ((@x548 (unit-resolution ((_ th-lemma arith) (or $x528 $x122)) @x473 (hypothesis $x527) false)))
 (let (($x296 (>= ?x126 0.0)))
 (let ((?x542 (+ (* (- 1.0) (to_real ?x83)) ?x110)))
 (let (($x214 (<= ?x542 0.0)))
 (let (($x317 (= 0.0 ?x542)))
 (let ((@x244 (symm (commutativity (= $x317 (= ?x542 0.0))) (= (= ?x542 0.0) $x317))))
 (let ((@x197 (mp ((_ th-lemma arith) (= ?x542 0.0)) @x244 $x317)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x317) $x214)) (lemma (unit-resolution (hypothesis (not $x317)) @x197 false) $x317) $x214)))
 (let ((?x401 (+ ?x420 (* (- 1.0) (to_real (* y!1 x!2))))))
 (let (($x442 (>= ?x401 0.0)))
 (let (($x397 (= 0.0 ?x401)))
 (let ((@x98 (symm (commutativity (= $x397 (= ?x401 0.0))) (= (= ?x401 0.0) $x397))))
 (let ((@x95 (mp ((_ th-lemma arith) (= ?x401 0.0)) @x98 $x397)))
 (let ((@x484 ((_ th-lemma arith) (hypothesis (not $x296)) @x325 (hypothesis $x214) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x397) $x442)) @x95 $x442) false)))
 (let (($x175 (<= ?x126 0.0)))
 (let (($x313 (<= ?x401 0.0)))
 (let (($x543 (>= ?x542 0.0)))
 (let ((@x378 ((_ th-lemma arith) (hypothesis (not $x175)) @x369 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x317) $x543)) @x197 $x543) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x397) $x313)) @x95 $x313) false)))
 (let ((@x386 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x527 (not $x175) (not $x296))) (lemma @x378 $x175) (unit-resolution (lemma @x484 (or (not $x214) $x296)) @x152 $x296) $x527)))
 (unit-resolution @x386 (lemma @x548 $x528) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      45
 :arith-eq-adapter               37
 :arith-bound-propagations-cheap 31
 :arith-bound-propagations-lp    3
 :arith-conflicts                81
 :arith-diseq                    29
 :arith-fixed-eqs                1
 :arith-gcd-calls                7
 :arith-grobner-calls            5
 :arith-grobner-conflicts        2
 :arith-horner-calls             5
 :arith-lower                    64
 :arith-make-feasible            49
 :arith-max-columns              56
 :arith-max-rows                 17
 :arith-nla-explanations         71
 :arith-nla-lemmas               77
 :arith-patches                  7
 :arith-patches-success          7
 :arith-propagations             31
 :arith-upper                    54
 :conflicts                      12
 :decisions                      62
 :del-clause                     136
 :final-checks                   38
 :max-memory                     4.00
 :memory                         3.12
 :mk-bool-var                    205
 :mk-clause                      183
 :num-allocs                     1624132
 :num-checks                     1
 :propagations                   83
 :rlimit-count                   4802
 :time                           0.01
 :total-time                     0.02)
