unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1389 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x617 (<= ?x1389 0)))
 (let (($x219 (= ?x1389 0)))
 (let ((?x680 (* 6 (* y00 y!0 y!0))))
 (let ((?x1385 (* y!0 y!0 y!0 y!0)))
 (let ((?x792 (* (- 1) ?x1385)))
 (let ((?x679 (* (- 1) (* y!0 y!0 x!1))))
 (let ((?x1348 (* y00 y!0 y!0 y!0 x!1 x!1)))
 (let ((?x1363 (* (- 2) (* y00 y!0 y!0 y!0 x!1))))
 (let ((?x934 (* 3 (* y00 y!0 y!0 x!1 x!1))))
 (let ((?x1235 (* y!0 x!1 x!1)))
 (let ((?x148 (* (- 8) (* x00 y!0 x!1))))
 (let ((?x1479 (* 6 (* x00 y!0 y!0))))
 (let ((?x1466 (* 2 (* x00 x!1 x!1))))
 (let ((?x1037 (* x!1 x!1 x!1)))
 (let ((?x1415 (* (- 1) ?x1037)))
 (let ((?x1086 (+ 1 y!0)))
 (let ((?x347 (+ (- 1) x!1)))
 (let ((?x1033 (* ?x347 ?x347 ?x1086 ?x1086 ?x1086 ?x1086)))
 (let ((?x1022 (* x!1 x!1)))
 (let ((?x947 (* 2 ?x1022)))
 (let ((?x721 (* 2 (* y00 x!1 x!1))))
 (let ((?x693 (* y!0 y!0 y!0)))
 (let ((?x648 (* (- 3) ?x693)))
 (let ((?x1158 (* (- 2) (* x00 y!0 y!0 y!0 x!1))))
 (let ((?x495 (* x00 y!0 y!0 y!0 x!1 x!1)))
 (let ((?x1077 (* (- 8) (* y00 y!0 x!1))))
 (let ((?x419 (* y!0 y!0)))
 (let ((?x1378 (* (- 4) ?x419)))
 (let ((?x1156 (* 3 (* x00 y!0 y!0 x!1 x!1))))
 (let ((?x287 (* (- 2) x!1)))
 (let ((?x1067 (* (- 2) y!0)))
 (let ((?x479 (* 3 x00)))
 (let ((?x1066 (* 3 y00)))
 (let ((?x178 (+ ?x1066 ?x479 ?x1067 (* (- 4) (* y00 x!1)) (* 2 (* y00 y!0 y!0 y!0)) (* (- 4) (* x00 x!1)) (* 4 (* x00 y!0 x!1 x!1)) ?x287 (* (- 6) (* x00 y!0 y!0 x!1)) ?x1156 ?x1378 ?x1077 ?x495 ?x1158 ?x648 ?x721 (* (- 1) (* ?x347 ?x347 ?x347 ?x1086 ?x1086 ?x1086)) (* 7 (* y00 y!0)) ?x947 (* (- 1) ?x1033) ?x1415 ?x1466 ?x1479 ?x148 (* 2 (* x00 y!0 y!0 y!0)) (* (- 2) (* y!0 x!1)) (* (- 6) (* y00 y!0 y!0 x!1)) (* (- 1) (* y!0 x!1 x!1 x!1)) ?x1235 (* 4 (* y00 y!0 x!1 x!1)) ?x934 ?x1363 ?x1348 (* (- 1) (* y!0 y!0 x!1 x!1)) ?x679 ?x792 ?x680 (* (- 1) (* y!0 y!0 y!0 x!1)) (* 7 (* x00 y!0)))))
 (let (($x112 (= ?x178 0)))
 (let (($x968 (not $x112)))
 (let ((?x1700 (* y!0 y!0 y!0 x!1)))
 (let ((?x1350 (* y!0 y!0 x!1 x!1)))
 (let ((?x1234 (* y!0 x!1 x!1 x!1)))
 (let ((?x1036 (* (- 2) ?x1022)))
 (let ((?x375 (+ 1 x!1)))
 (let ((?x275 (+ (- 1) y!0)))
 (let ((?x670 (* ?x275 ?x275 ?x275 ?x375 ?x375 ?x375)))
 (let ((?x598 (* ?x275 ?x275 ?x275 ?x275 ?x375 ?x375)))
 (let ((?x420 (* 4 ?x419)))
 (let ((?x1307 (+ ?x1066 ?x479 ?x1067 (* 4 (* y00 x!1)) (* (- 2) (* y00 y!0 y!0 y!0)) (* 4 (* x00 x!1)) (* (- 4) (* x00 y!0 x!1 x!1)) ?x287 (* 6 (* x00 y!0 y!0 x!1)) ?x1156 ?x420 ?x1077 (* (- 1) ?x495) ?x598 ?x1158 ?x670 ?x648 ?x721 (* (- 7) (* y00 y!0)) ?x1036 ?x1415 ?x1466 ?x1479 ?x148 (* (- 2) (* x00 y!0 y!0 y!0)) (* 2 (* y!0 x!1)) (* 6 (* y00 y!0 y!0 x!1)) ?x1234 ?x1235 (* (- 4) (* y00 y!0 x!1 x!1)) ?x934 ?x1363 (* (- 1) ?x1348) ?x1350 ?x679 ?x1385 ?x680 ?x1700 (* (- 7) (* x00 y!0)))))
 (let (($x901 (= ?x1307 0)))
 (let (($x1525 (or (not $x901) $x968)))
 (let (($x916 (and $x219 $x1525)))
 (let ((?x1383 (* 3 ?x693)))
 (let ((?x1707 (* (- 3) (* x!1 x!1 y!0 y!0 y00))))
 (let ((?x503 (* x!1 x!1 y!0 y!0 y!0 y00)))
 (let ((?x506 (* 2 (* x!1 y!0 y!0 y!0 y00))))
 (let ((?x1271 (* x!1 y!0 y!0)))
 (let ((?x1021 (* (- 1) (* x!1 x!1 y!0))))
 (let ((?x125 (* x!1 x!1 y!0 y!0 y!0 x00)))
 (let ((?x1020 (* 2 (* x!1 y!0 y!0 y!0 x00))))
 (let ((?x1811 (* (- 3) (* x!1 x!1 y!0 y!0 x00))))
 (let ((?x1816 (* (- 6) (* y!0 y!0 x00))))
 (let ((?x611 (* 8 (* x!1 y!0 x00))))
 (let ((?x1806 (* (- 2) (* x!1 x!1 x00))))
 (let ((?x1798 (* (- 6) (* y!0 y!0 y00))))
 (let ((?x1723 (* (- 2) (* x!1 x!1 y00))))
 (let ((?x1072 (* 8 (* x!1 y!0 y00))))
 (let ((?x1162 (* (- 3) x00)))
 (let ((?x1161 (* (- 3) y00)))
 (let ((?x109 (* 2 y!0)))
 (let ((?x107 (* 2 x!1)))
 (let ((?x553 (+ ?x107 ?x109 ?x1161 ?x1162 (* 7 (* y!0 y00)) ?x1072 (* 4 (* x!1 x!1 y!0 y00)) (* (- 4) (* x!1 y00)) ?x1723 ?x1798 (* 2 (* y!0 y!0 y!0 y00)) (* (- 4) (* x!1 x00)) ?x1806 (* 7 (* y!0 x00)) ?x611 (* 4 (* x!1 x!1 y!0 x00)) ?x1816 (* 2 (* y!0 y!0 y!0 x00)) (* (- 6) (* x!1 y!0 y!0 x00)) ?x1811 ?x1020 ?x125 ?x1021 (* (- 2) (* x!1 y!0)) (* (- 1) (* x!1 x!1 x!1 y!0)) ?x947 ?x1037 (* (- 1) ?x598) (* (- 1) ?x670) ?x1378 ?x1271 (* (- 1) (* x!1 x!1 y!0 y!0)) ?x506 ?x503 (* (- 6) (* x!1 y!0 y!0 y00)) ?x1707 ?x1383 (* (- 1) (* x!1 y!0 y!0 y!0)) ?x792)))
 (let ((?x1118 (* x!1 y!0 y!0 y!0)))
 (let ((?x1272 (* x!1 x!1 y!0 y!0)))
 (let ((?x969 (* ?x347 ?x347 ?x347 ?x1086 ?x1086 ?x1086)))
 (let ((?x965 (* x!1 x!1 x!1 y!0)))
 (let ((?x1376 (+ ?x107 ?x109 ?x1161 ?x1162 (* (- 7) (* y!0 y00)) ?x1072 (* (- 4) (* x!1 x!1 y!0 y00)) (* 4 (* x!1 y00)) ?x1723 ?x1798 (* (- 2) (* y!0 y!0 y!0 y00)) (* 4 (* x!1 x00)) ?x1806 (* (- 7) (* y!0 x00)) ?x611 (* (- 4) (* x!1 x!1 y!0 x00)) ?x1816 (* (- 2) (* y!0 y!0 y!0 x00)) (* 6 (* x!1 y!0 y!0 x00)) ?x1811 ?x1020 (* (- 1) ?x125) ?x1033 ?x1021 (* 2 (* x!1 y!0)) ?x965 ?x1036 ?x1037 ?x969 ?x420 ?x1271 ?x1272 ?x506 (* (- 1) ?x503) (* 6 (* x!1 y!0 y!0 y00)) ?x1707 ?x1383 ?x1118 ?x1385)))
 (let (($x665 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x1376 0)) (not (= ?x553 0))))))
 (let (($x2120 (exists ((x Int) (y Int) )(! (let ((?x1075 (* y y y y)))
 (let ((?x1132 (* (- 1) ?x1075)))
 (let ((?x974 (* x y y y)))
 (let ((?x1025 (* (- 1) ?x974)))
 (let ((?x1188 (* 3 (* y y y))))
 (let ((?x1187 (* (- 3) (* x x y y y00))))
 (let ((?x898 (* x y y y00)))
 (let ((?x1618 (* (- 6) ?x898)))
 (let ((?x874 (* x x y y y y00)))
 (let ((?x1184 (* 2 (* x y y y y00))))
 (let ((?x726 (* x x y y)))
 (let ((?x784 (* (- 1) ?x726)))
 (let ((?x724 (* x y y)))
 (let ((?x720 (* y y)))
 (let ((?x1139 (* (- 4) ?x720)))
 (let ((?x117 (+ 1 x)))
 (let ((?x164 (+ (- 1) y)))
 (let ((?x504 (* (- 1) (* ?x164 ?x164 ?x164 ?x117 ?x117 ?x117))))
 (let ((?x607 (* (- 1) (* ?x164 ?x164 ?x164 ?x164 ?x117 ?x117))))
 (let ((?x559 (* x x x)))
 (let ((?x552 (* x x)))
 (let ((?x667 (* 2 ?x552)))
 (let ((?x540 (* x x x y)))
 (let ((?x602 (* (- 1) ?x540)))
 (let ((?x538 (* x y)))
 (let ((?x664 (* (- 2) ?x538)))
 (let ((?x542 (* (- 1) (* x x y))))
 (let ((?x477 (* x x y y y x00)))
 (let ((?x1181 (* 2 (* x y y y x00))))
 (let ((?x1180 (* (- 3) (* x x y y x00))))
 (let ((?x416 (* x y y x00)))
 (let ((?x1329 (* (- 6) ?x416)))
 (let ((?x307 (* y y y x00)))
 (let ((?x514 (* 2 ?x307)))
 (let ((?x1177 (* (- 6) (* y y x00))))
 (let ((?x246 (* x x y x00)))
 (let ((?x511 (* 4 ?x246)))
 (let ((?x241 (* x y x00)))
 (let ((?x1343 (* 8 ?x241)))
 (let ((?x234 (* y x00)))
 (let ((?x508 (* 7 ?x234)))
 (let ((?x1173 (* (- 2) (* x x x00))))
 (let ((?x225 (* x x00)))
 (let ((?x1341 (* (- 4) ?x225)))
 (let ((?x172 (* y y y y00)))
 (let ((?x950 (* 2 ?x172)))
 (let ((?x1170 (* (- 6) (* y y y00))))
 (let ((?x1169 (* (- 2) (* x x y00))))
 (let ((?x141 (* x y00)))
 (let ((?x1631 (* (- 4) ?x141)))
 (let ((?x133 (* x x y y00)))
 (let ((?x946 (* 4 ?x133)))
 (let ((?x131 (* x y y00)))
 (let ((?x1630 (* 8 ?x131)))
 (let ((?x1162 (* (- 3) x00)))
 (let ((?x1161 (* (- 3) y00)))
 (let ((?x757 (* 2 y)))
 (let ((?x573 (* 2 x)))
 (let ((?x2112 (+ ?x573 ?x757 ?x1161 ?x1162 (* 7 (* y y00)) ?x1630 ?x946 ?x1631 ?x1169 ?x1170 ?x950 ?x1341 ?x1173 ?x508 ?x1343 ?x511 ?x1177 ?x514 ?x1329 ?x1180 ?x1181 ?x477 ?x542 ?x664 ?x602 ?x667 ?x559 ?x607 ?x504 ?x1139 ?x724 ?x784 ?x1184 ?x874 ?x1618 ?x1187 ?x1188 ?x1025 ?x1132)))
 (let ((?x1185 (* (- 1) ?x874)))
 (let ((?x1183 (* 4 ?x720)))
 (let ((?x111 (+ 1 y)))
 (let ((?x103 (+ (- 1) x)))
 (let ((?x614 (* ?x103 ?x103 ?x103 ?x111 ?x111 ?x111)))
 (let ((?x577 (* (- 2) ?x552)))
 (let ((?x578 (* 2 ?x538)))
 (let ((?x520 (* ?x103 ?x103 ?x111 ?x111 ?x111 ?x111)))
 (let ((?x1182 (* (- 1) ?x477)))
 (let ((?x1178 (* (- 2) ?x307)))
 (let ((?x1176 (* (- 4) ?x246)))
 (let ((?x1174 (* (- 7) ?x234)))
 (let ((?x1171 (* (- 2) ?x172)))
 (let ((?x1167 (* (- 4) ?x133)))
 (let ((?x127 (* y y00)))
 (let ((?x1164 (* (- 7) ?x127)))
 (let ((?x1048 (+ ?x573 ?x757 ?x1161 ?x1162 ?x1164 ?x1630 ?x1167 (* 4 ?x141) ?x1169 ?x1170 ?x1171 (* 4 ?x225) ?x1173 ?x1174 ?x1343 ?x1176 ?x1177 ?x1178 (* 6 ?x416) ?x1180 ?x1181 ?x1182 ?x520 ?x542 ?x578 ?x540 ?x577 ?x559 ?x614 ?x1183 ?x724 ?x726 ?x1184 ?x1185 (* 6 ?x898) ?x1187 ?x1188 ?x974 ?x1075)))
 (let (($x113 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x113 (or (not (= ?x1048 0)) (not (= ?x2112 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x597 (exists ((x Int) (y Int) )(! (let ((?x132 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ (- 1) y)))))
 (let ((?x1696 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x117 (+ 1 x)))
 (let ((?x164 (+ (- 1) y)))
 (let ((?x504 (* (- 1) (* ?x164 ?x164 ?x164 ?x117 ?x117 ?x117))))
 (let ((?x607 (* (- 1) (* ?x164 ?x164 ?x164 ?x164 ?x117 ?x117))))
 (let ((?x1080 (+ (* y00 ?x164 ?x117 ?x117) (* y00 ?x164 ?x164 ?x164) (* x00 ?x164 ?x117 ?x117) (* x00 ?x164 ?x164 ?x164) (* x00 ?x164 ?x164 ?x164 ?x117 ?x117) ?x607 ?x504 (* (- 1) (* ?x164 ?x117 ?x117 ?x117)) (* (- 1) (* ?x164 ?x164 ?x117 ?x117)) (* y00 ?x164 ?x164 ?x164 ?x117 ?x117) ?x1696 ?x132)))
 (let ((?x690 (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x335 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x111 (+ 1 y)))
 (let ((?x103 (+ (- 1) x)))
 (let ((?x1016 (+ (* y00 ?x103 ?x103 ?x111) (* y00 ?x111 ?x111 ?x111) (* x00 ?x103 ?x103 ?x111) (* x00 ?x111 ?x111 ?x111) (* x00 ?x103 ?x103 ?x111 ?x111 ?x111) (* (- 1) (* ?x103 ?x103 ?x111 ?x111 ?x111 ?x111)) (* (- 1) (* ?x103 ?x103 ?x103 ?x111 ?x111 ?x111)) (* (- 1) (* ?x103 ?x103 ?x103 ?x111)) (* (- 1) (* ?x103 ?x103 ?x111 ?x111)) (* y00 ?x103 ?x103 ?x111 ?x111 ?x111) ?x335 ?x690)))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (or (not (= ?x1016 0)) (not (= ?x1080 0)))))))))))))))) :qid k!27))
 ))
 (let ((?x990 (lambda ((x Int) (y Int) )(let ((?x1075 (* y y y y)))
 (let ((?x1132 (* (- 1) ?x1075)))
 (let ((?x974 (* x y y y)))
 (let ((?x1025 (* (- 1) ?x974)))
 (let ((?x1188 (* 3 (* y y y))))
 (let ((?x1187 (* (- 3) (* x x y y y00))))
 (let ((?x898 (* x y y y00)))
 (let ((?x1618 (* (- 6) ?x898)))
 (let ((?x874 (* x x y y y y00)))
 (let ((?x1184 (* 2 (* x y y y y00))))
 (let ((?x726 (* x x y y)))
 (let ((?x784 (* (- 1) ?x726)))
 (let ((?x724 (* x y y)))
 (let ((?x720 (* y y)))
 (let ((?x1139 (* (- 4) ?x720)))
 (let ((?x117 (+ 1 x)))
 (let ((?x164 (+ (- 1) y)))
 (let ((?x504 (* (- 1) (* ?x164 ?x164 ?x164 ?x117 ?x117 ?x117))))
 (let ((?x607 (* (- 1) (* ?x164 ?x164 ?x164 ?x164 ?x117 ?x117))))
 (let ((?x559 (* x x x)))
 (let ((?x552 (* x x)))
 (let ((?x667 (* 2 ?x552)))
 (let ((?x540 (* x x x y)))
 (let ((?x602 (* (- 1) ?x540)))
 (let ((?x538 (* x y)))
 (let ((?x664 (* (- 2) ?x538)))
 (let ((?x542 (* (- 1) (* x x y))))
 (let ((?x477 (* x x y y y x00)))
 (let ((?x1181 (* 2 (* x y y y x00))))
 (let ((?x1180 (* (- 3) (* x x y y x00))))
 (let ((?x416 (* x y y x00)))
 (let ((?x1329 (* (- 6) ?x416)))
 (let ((?x307 (* y y y x00)))
 (let ((?x514 (* 2 ?x307)))
 (let ((?x1177 (* (- 6) (* y y x00))))
 (let ((?x246 (* x x y x00)))
 (let ((?x511 (* 4 ?x246)))
 (let ((?x241 (* x y x00)))
 (let ((?x1343 (* 8 ?x241)))
 (let ((?x234 (* y x00)))
 (let ((?x508 (* 7 ?x234)))
 (let ((?x1173 (* (- 2) (* x x x00))))
 (let ((?x225 (* x x00)))
 (let ((?x1341 (* (- 4) ?x225)))
 (let ((?x172 (* y y y y00)))
 (let ((?x950 (* 2 ?x172)))
 (let ((?x1170 (* (- 6) (* y y y00))))
 (let ((?x1169 (* (- 2) (* x x y00))))
 (let ((?x141 (* x y00)))
 (let ((?x1631 (* (- 4) ?x141)))
 (let ((?x133 (* x x y y00)))
 (let ((?x946 (* 4 ?x133)))
 (let ((?x131 (* x y y00)))
 (let ((?x1630 (* 8 ?x131)))
 (let ((?x1162 (* (- 3) x00)))
 (let ((?x1161 (* (- 3) y00)))
 (let ((?x757 (* 2 y)))
 (let ((?x573 (* 2 x)))
 (let ((?x2112 (+ ?x573 ?x757 ?x1161 ?x1162 (* 7 (* y y00)) ?x1630 ?x946 ?x1631 ?x1169 ?x1170 ?x950 ?x1341 ?x1173 ?x508 ?x1343 ?x511 ?x1177 ?x514 ?x1329 ?x1180 ?x1181 ?x477 ?x542 ?x664 ?x602 ?x667 ?x559 ?x607 ?x504 ?x1139 ?x724 ?x784 ?x1184 ?x874 ?x1618 ?x1187 ?x1188 ?x1025 ?x1132)))
 (let ((?x1185 (* (- 1) ?x874)))
 (let ((?x1183 (* 4 ?x720)))
 (let ((?x111 (+ 1 y)))
 (let ((?x103 (+ (- 1) x)))
 (let ((?x614 (* ?x103 ?x103 ?x103 ?x111 ?x111 ?x111)))
 (let ((?x577 (* (- 2) ?x552)))
 (let ((?x578 (* 2 ?x538)))
 (let ((?x520 (* ?x103 ?x103 ?x111 ?x111 ?x111 ?x111)))
 (let ((?x1182 (* (- 1) ?x477)))
 (let ((?x1178 (* (- 2) ?x307)))
 (let ((?x1176 (* (- 4) ?x246)))
 (let ((?x1174 (* (- 7) ?x234)))
 (let ((?x1171 (* (- 2) ?x172)))
 (let ((?x1167 (* (- 4) ?x133)))
 (let ((?x127 (* y y00)))
 (let ((?x1164 (* (- 7) ?x127)))
 (let ((?x1048 (+ ?x573 ?x757 ?x1161 ?x1162 ?x1164 ?x1630 ?x1167 (* 4 ?x141) ?x1169 ?x1170 ?x1171 (* 4 ?x225) ?x1173 ?x1174 ?x1343 ?x1176 ?x1177 ?x1178 (* 6 ?x416) ?x1180 ?x1181 ?x1182 ?x520 ?x542 ?x578 ?x540 ?x577 ?x559 ?x614 ?x1183 ?x724 ?x726 ?x1184 ?x1185 (* 6 ?x898) ?x1187 ?x1188 ?x974 ?x1075)))
 (let (($x113 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x262 (and $x113 (or (not (= ?x1048 0)) (not (= ?x2112 0))))))
 (let ((?x1080 (+ (* y00 ?x164 ?x117 ?x117) (* y00 ?x164 ?x164 ?x164) (* x00 ?x164 ?x117 ?x117) (* x00 ?x164 ?x164 ?x164) (* x00 ?x164 ?x164 ?x164 ?x117 ?x117) ?x607 ?x504 (* (- 1) (* ?x164 ?x117 ?x117 ?x117)) (* (- 1) (* ?x164 ?x164 ?x117 ?x117)) (* y00 ?x164 ?x164 ?x164 ?x117 ?x117) (* (- 1) (* ?x164 ?x164 ?x164 ?x117)) (* (- 1) (* ?x164 ?x164 ?x164 ?x164)))))
 (let ((?x1016 (+ (* y00 ?x103 ?x103 ?x111) (* y00 ?x111 ?x111 ?x111) (* x00 ?x103 ?x103 ?x111) (* x00 ?x111 ?x111 ?x111) (* x00 ?x103 ?x103 ?x111 ?x111 ?x111) (* (- 1) ?x520) (* (- 1) ?x614) (* (- 1) (* ?x103 ?x103 ?x103 ?x111)) (* (- 1) (* ?x103 ?x103 ?x111 ?x111)) (* y00 ?x103 ?x103 ?x111 ?x111 ?x111) (* (- 1) (* ?x103 ?x111 ?x111 ?x111)) (* (- 1) (* ?x111 ?x111 ?x111 ?x111)))))
 (let (($x682 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (or (not (= ?x1016 0)) (not (= ?x1080 0))))))
 (rewrite (= $x682 $x262))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x84 (exists ((x Int) (y Int) )(! (let ((?x59 (- y 1)))
 (let ((?x58 (+ x 1)))
 (let ((?x65 (+ (* ?x58 ?x58 ?x59 y00) (* ?x59 ?x59 ?x59 y00) (* ?x58 ?x58 x00 ?x59) (* x00 ?x59 ?x59 ?x59) (* ?x58 ?x58 x00 ?x59 ?x59 ?x59))))
 (let ((?x71 (- (- ?x65 (* ?x58 ?x58 ?x59 ?x59 ?x59 ?x59)) (* ?x58 ?x58 ?x58 ?x59 ?x59 ?x59))))
 (let ((?x75 (+ (- (- ?x71 (* ?x58 ?x58 ?x58 ?x59)) (* ?x58 ?x58 ?x59 ?x59)) (* ?x58 ?x58 ?x59 ?x59 ?x59 y00))))
 (let (($x80 (= (- (- ?x75 (* ?x58 ?x59 ?x59 ?x59)) (* ?x59 ?x59 ?x59 ?x59)) 0)))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (+ (* ?x34 ?x34 ?x35 y00) (* ?x35 ?x35 ?x35 y00) (* ?x34 ?x34 x00 ?x35) (* x00 ?x35 ?x35 ?x35) (* ?x34 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x47 (- (- ?x41 (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x51 (+ (- (- ?x47 (* ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x34 ?x35 ?x35)) (* ?x34 ?x34 ?x35 ?x35 ?x35 y00))))
 (let (($x56 (= (- (- ?x51 (* ?x34 ?x35 ?x35 ?x35)) (* ?x35 ?x35 ?x35 ?x35)) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x56) (not $x80))))))))))))))) :qid k!27))
 ))
 (let ((?x526 (lambda ((x Int) (y Int) )(let ((?x132 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ (- 1) y)))))
 (let ((?x1696 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x117 (+ 1 x)))
 (let ((?x164 (+ (- 1) y)))
 (let ((?x504 (* (- 1) (* ?x164 ?x164 ?x164 ?x117 ?x117 ?x117))))
 (let ((?x607 (* (- 1) (* ?x164 ?x164 ?x164 ?x164 ?x117 ?x117))))
 (let ((?x1080 (+ (* y00 ?x164 ?x117 ?x117) (* y00 ?x164 ?x164 ?x164) (* x00 ?x164 ?x117 ?x117) (* x00 ?x164 ?x164 ?x164) (* x00 ?x164 ?x164 ?x164 ?x117 ?x117) ?x607 ?x504 (* (- 1) (* ?x164 ?x117 ?x117 ?x117)) (* (- 1) (* ?x164 ?x164 ?x117 ?x117)) (* y00 ?x164 ?x164 ?x164 ?x117 ?x117) ?x1696 ?x132)))
 (let ((?x690 (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x335 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x111 (+ 1 y)))
 (let ((?x103 (+ (- 1) x)))
 (let ((?x1016 (+ (* y00 ?x103 ?x103 ?x111) (* y00 ?x111 ?x111 ?x111) (* x00 ?x103 ?x103 ?x111) (* x00 ?x111 ?x111 ?x111) (* x00 ?x103 ?x103 ?x111 ?x111 ?x111) (* (- 1) (* ?x103 ?x103 ?x111 ?x111 ?x111 ?x111)) (* (- 1) (* ?x103 ?x103 ?x103 ?x111 ?x111 ?x111)) (* (- 1) (* ?x103 ?x103 ?x103 ?x111)) (* (- 1) (* ?x103 ?x103 ?x111 ?x111)) (* y00 ?x103 ?x103 ?x111 ?x111 ?x111) ?x335 ?x690)))
 (let (($x682 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (or (not (= ?x1016 0)) (not (= ?x1080 0))))))
 (let ((?x59 (- y 1)))
 (let ((?x58 (+ x 1)))
 (let ((?x65 (+ (* ?x58 ?x58 ?x59 y00) (* ?x59 ?x59 ?x59 y00) (* ?x58 ?x58 x00 ?x59) (* x00 ?x59 ?x59 ?x59) (* ?x58 ?x58 x00 ?x59 ?x59 ?x59))))
 (let ((?x71 (- (- ?x65 (* ?x58 ?x58 ?x59 ?x59 ?x59 ?x59)) (* ?x58 ?x58 ?x58 ?x59 ?x59 ?x59))))
 (let ((?x75 (+ (- (- ?x71 (* ?x58 ?x58 ?x58 ?x59)) (* ?x58 ?x58 ?x59 ?x59)) (* ?x58 ?x58 ?x59 ?x59 ?x59 y00))))
 (let (($x80 (= (- (- ?x75 (* ?x58 ?x59 ?x59 ?x59)) (* ?x59 ?x59 ?x59 ?x59)) 0)))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (+ (* ?x34 ?x34 ?x35 y00) (* ?x35 ?x35 ?x35 y00) (* ?x34 ?x34 x00 ?x35) (* x00 ?x35 ?x35 ?x35) (* ?x34 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x47 (- (- ?x41 (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x51 (+ (- (- ?x47 (* ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x34 ?x35 ?x35)) (* ?x34 ?x34 ?x35 ?x35 ?x35 y00))))
 (let (($x56 (= (- (- ?x51 (* ?x34 ?x35 ?x35 ?x35)) (* ?x35 ?x35 ?x35 ?x35)) 0)))
 (let (($x83 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x56) (not $x80)))))
 (rewrite (= $x83 $x682)))))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x192 (mp (mp @x85 (quant-intro (proof-bind ?x526) (= $x84 $x597)) $x597) (rewrite (= $x597 $x597)) $x597)))
 (let ((@x1001 (mp~ (mp @x192 (quant-intro (proof-bind ?x990) (= $x597 $x2120)) $x2120) (sk (~ $x2120 $x665)) $x665)))
 (let ((@x1112 (mp @x1001 (rewrite (= $x665 $x916)) $x916)))
 (let ((@x1152 (and-elim @x1112 $x219)))
 (let ((@x882 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x219) $x617)) @x1152 $x617)))
 (let (($x376 (>= ?x1389 0)))
 (let ((@x691 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x219) $x376)) @x1152 $x376)))
 (let (($x906 (not (<= ?x178 0))))
 (let (($x1018 (>= ?x178 0)))
 (let ((@x1092 ((_ th-lemma arith) (hypothesis (not $x1018)) @x691 @x882 @x691 @x882 @x691 @x882 false)))
 (let (($x1759 (>= ?x1307 0)))
 (let ((@x1346 ((_ th-lemma arith) (hypothesis (not $x1759)) @x691 @x882 @x691 @x882 @x691 @x882 @x691 @x882 false)))
 (let (($x167 (<= ?x1307 0)))
 (let ((@x1377 ((_ th-lemma arith) (hypothesis (not $x167)) @x691 @x882 @x691 @x882 @x691 @x882 @x691 @x882 false)))
 (let ((@x834 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x901 (not $x167) (not $x1759))) (lemma @x1377 $x167) (lemma @x1346 $x1759) $x901)))
 (let ((@x1000 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x112 $x906 (not $x1018))) (unit-resolution (and-elim @x1112 $x1525) @x834 $x968) (lemma @x1092 $x1018) $x906)))
 ((_ th-lemma arith) @x1000 @x691 @x882 @x691 @x882 @x691 @x882 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        30
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-grobner             4
 :arith-max-min             697
 :arith-nonlinear-bounds    23
 :arith-nonlinear-horner    25
 :arith-num-rows            7
 :arith-pivots              4
 :arith-row-summations      6
 :arith-tableau-max-columns 62
 :arith-tableau-max-rows    7
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                19.83
 :memory                    19.23
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                831963
 :num-checks                1
 :propagations              14
 :rlimit-count              20240
 :time                      0.02
 :total-time                0.04)
