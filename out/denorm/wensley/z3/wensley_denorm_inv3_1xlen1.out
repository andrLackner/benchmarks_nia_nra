unsat
((set-logic NRA)
(declare-fun b!7 () Real)
(declare-fun a!8 () Real)
(declare-fun d!6 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x393 (* y00 d!6 a!8 b!7 b!7 b!7)))
 (let ((?x110 (+ (* (/ 1.0 2.0) (* d!6 d!6 a!8 b!7 b!7 b!7)) (* (- 1.0) (* d!6 y!5 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 2.0)) (* a00 d!6 d!6 a!8 b!7 b!7)) (* y00 d!6 b!7 b!7 b!7 b!7) (* (/ 1.0 2.0) (* d!6 d!6 a!8 a!8 b!7 b!7)) (* (- 1.0) (* d!6 y!5 a!8 b!7 b!7 b!7)) (* (- (/ 1.0 2.0)) (* a00 d!6 d!6 b!7 b!7 b!7)) ?x393)))
 (let (($x257 (>= ?x110 0.0)))
 (let ((?x211 (* d!6 a!8)))
 (let ((?x361 (* (- 2.0) (* y!5 b!7))))
 (let ((?x224 (+ (* 2.0 (* y00 b!7)) (* (- 1.0) (* a00 d!6)) ?x361 ?x211)))
 (let (($x423 (>= ?x224 0.0)))
 (let (($x176 (= 0.0 ?x224)))
 (let ((@x237 (symm (commutativity (= $x176 (= ?x224 0.0))) (= (= ?x224 0.0) $x176))))
 (let (($x106 (= ?x224 0.0)))
 (let ((?x217 (* d!6 y!5 a!8 b!7 b!7 b!7)))
 (let ((?x184 (+ (* (/ 1.0 2.0) (* a00 d!6 d!6 a!8 b!7 b!7)) (* (- (/ 1.0 2.0)) (* d!6 d!6 a!8 a!8 b!7 b!7)) ?x217 (* (- 1.0) ?x393))))
 (let (($x143 (= ?x184 0.0)))
 (let (($x359 (not $x143)))
 (let (($x392 (or $x359 (not (= ?x110 0.0)))))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x384 (= (+ ?x30 ?x84 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let (($x298 (and $x384 (= (+ (* b00 d!6) (* (- 1.0) (* d00 b!7))) 0.0) $x106 $x392)))
 (let ((?x121 (* (- (/ 1.0 2.0)) (* d!6 d!6 b!7 b!7 a!8 a00))))
 (let ((?x219 (* d!6 b!7 b!7 b!7 a!8 y00)))
 (let ((?x362 (* (- 1.0) (* y!5 d!6 b!7 b!7 b!7 a!8))))
 (let ((?x249 (* (/ 1.0 2.0) (* d!6 d!6 b!7 b!7 a!8 a!8))))
 (let ((?x209 (+ ?x249 ?x362 ?x219 ?x121 (* (/ 1.0 2.0) (* d!6 d!6 b!7 b!7 b!7 a!8)) (* (- 1.0) (* y!5 d!6 b!7 b!7 b!7 b!7)) (* d!6 b!7 b!7 b!7 b!7 y00) (* (- (/ 1.0 2.0)) (* d!6 d!6 b!7 b!7 b!7 a00)))))
 (let (($x419 (= (+ ?x211 ?x361 (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00))) 0.0)))
 (let (($x232 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x84 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x191 (and $x232 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) $x419 (or (not (= (+ ?x249 ?x362 ?x219 ?x121) 0.0)) (not (= ?x209 0.0))))))
 (let (($x95 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x373 (* d b b b b y00)))
 (let ((?x255 (* d d b b a a00)))
 (let ((?x319 (* (- (/ 1.0 2.0)) ?x255)))
 (let ((?x252 (* d b b b a y00)))
 (let ((?x248 (* y d b b b a)))
 (let ((?x127 (* (- 1.0) ?x248)))
 (let ((?x244 (* d d b b a a)))
 (let ((?x152 (* (/ 1.0 2.0) ?x244)))
 (let ((?x180 (+ ?x152 ?x127 ?x252 ?x319 (* (/ 1.0 2.0) (* d d b b b a)) (* (- 1.0) (* y d b b b b)) ?x373 (* (- (/ 1.0 2.0)) (* d d b b b a00)))))
 (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let (($x161 (= (+ ?x101 ?x126 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x116 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x84 (* 2.0 (* y b00))) 0.0)))
 (and $x116 $x87 $x161 (or (not (= (+ ?x152 ?x127 ?x252 ?x319) 0.0)) (not (= ?x180 0.0))))))))))))))))))))) :qid k!33))
 ))
 (let (($x245 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x371 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x281 (* y00 b)))
 (let ((?x406 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x281 ?x371)))
 (let ((?x63 (+ a b)))
 (let ((?x397 (* (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x281 ?x371) d b b a)))
 (let (($x168 (or (not (= ?x397 0.0)) (not (= (* ?x63 ?x406 d b b) 0.0)))))
 (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let (($x169 (= (+ ?x84 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x169 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x101 ?x126 (* 2.0 ?x281) (* (- 1.0) ?x48)) 0.0) $x168)))))))))))))) :qid k!33))
 ))
 (let ((?x269 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x373 (* d b b b b y00)))
 (let ((?x255 (* d d b b a a00)))
 (let ((?x319 (* (- (/ 1.0 2.0)) ?x255)))
 (let ((?x252 (* d b b b a y00)))
 (let ((?x248 (* y d b b b a)))
 (let ((?x127 (* (- 1.0) ?x248)))
 (let ((?x244 (* d d b b a a)))
 (let ((?x152 (* (/ 1.0 2.0) ?x244)))
 (let ((?x180 (+ ?x152 ?x127 ?x252 ?x319 (* (/ 1.0 2.0) (* d d b b b a)) (* (- 1.0) (* y d b b b b)) ?x373 (* (- (/ 1.0 2.0)) (* d d b b b a00)))))
 (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let (($x161 (= (+ ?x101 ?x126 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x116 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x84 (* 2.0 (* y b00))) 0.0)))
 (let (($x409 (and $x116 $x87 $x161 (or (not (= (+ ?x152 ?x127 ?x252 ?x319) 0.0)) (not (= ?x180 0.0))))))
 (let ((?x48 (* a00 d)))
 (let ((?x371 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x281 (* y00 b)))
 (let ((?x406 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x281 ?x371)))
 (let ((?x63 (+ a b)))
 (let ((?x397 (* (+ (* (/ 1.0 2.0) ?x101) (* (- 1.0) ?x107) ?x281 ?x371) d b b a)))
 (let (($x168 (or (not (= ?x397 0.0)) (not (= (* ?x63 ?x406 d b b) 0.0)))))
 (let (($x169 (= (+ ?x84 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x278 (and $x169 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x101 ?x126 (* 2.0 ?x281) (* (- 1.0) ?x48)) 0.0) $x168)))
 (rewrite (= $x278 $x409))))))))))))))))))))))))))))))
 ))
 (let (($x75 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x63 (+ a b)))
 (let ((?x38 (- 1.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x70 (* (- (+ (- (* ?x63 ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58) ?x38 ?x63 ?x53 ?x53 ?x51)))
 (let ((?x60 (* (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) ?x38 a ?x53 ?x53 ?x51)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= ?x60 0.0)) (not (= ?x70 0.0))))))))))))))))) :qid k!33))
 ))
 (let ((?x263 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x371 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x281 (* y00 b)))
 (let ((?x406 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x281 ?x371)))
 (let ((?x63 (+ a b)))
 (let ((?x397 (* (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x281 ?x371) d b b a)))
 (let (($x168 (or (not (= ?x397 0.0)) (not (= (* ?x63 ?x406 d b b) 0.0)))))
 (let ((?x107 (* y b)))
 (let ((?x126 (* (- 2.0) ?x107)))
 (let ((?x101 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x84 (* (- 2.0) (* b00 y00))))
 (let (($x169 (= (+ ?x84 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x278 (and $x169 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x101 ?x126 (* 2.0 ?x281) (* (- 1.0) ?x48)) 0.0) $x168)))
 (let ((?x51 (/ d 2.0)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x38 (- 1.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x70 (* (- (+ (- (* ?x63 ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58) ?x38 ?x63 ?x53 ?x53 ?x51)))
 (let ((?x60 (* (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) ?x38 a ?x53 ?x53 ?x51)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x74 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= ?x60 0.0)) (not (= ?x70 0.0))))))
 (rewrite (= $x74 $x278))))))))))))))))))))))))))))
 ))
 (let ((@x76 (asserted $x75)))
 (let ((@x128 (mp (mp @x76 (quant-intro (proof-bind ?x263) (= $x75 $x245)) $x245) (quant-intro (proof-bind ?x269) (= $x245 $x95)) $x95)))
 (let ((@x330 (mp (mp~ @x128 (sk (~ $x95 $x191)) $x191) (rewrite (= $x191 $x298)) $x298)))
 (let ((@x238 (mp (and-elim @x330 $x106) @x237 $x176)))
 (let ((@x353 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x423)) @x238 $x423)))
 (let (($x179 (<= ?x224 0.0)))
 (let ((@x239 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x179)) @x238 $x179)))
 (let ((@x428 (unit-resolution ((_ th-lemma arith) (or (not $x179) (not $x423) $x257)) @x239 @x353 (hypothesis (not $x257)) false)))
 (let ((@x300 (lemma @x428 $x257)))
 (let (($x387 (<= ?x110 0.0)))
 (let ((@x225 (unit-resolution ((_ th-lemma arith) (or (not $x179) (not $x423) $x387)) @x239 @x353 (hypothesis (not $x387)) false)))
 (let ((@x227 (lemma @x225 $x387)))
 (let (($x411 (>= ?x184 0.0)))
 (let (($x296 (not $x411)))
 (let (($x424 (= 0.0 ?x184)))
 (let (($x418 (not $x424)))
 (let ((@x435 (monotonicity (symm (commutativity (= $x424 $x143)) (= $x143 $x424)) (= $x359 $x418))))
 (let (($x382 (= ?x110 0.0)))
 (let (($x380 (= 0.0 ?x110)))
 (let ((@x333 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x380 (not $x387) (not $x257))) @x300 (or $x380 (not $x387)))))
 (let ((@x355 (mp (unit-resolution @x333 @x227 $x380) (commutativity (= $x380 $x382)) $x382)))
 (let (($x243 (<= ?x184 0.0)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith) (or (not $x179) (not $x423) $x243)) @x239 @x353 (hypothesis (not $x243)) false)))
 (let ((@x437 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x424 (not $x243) $x296)) (lemma @x274 $x243) (mp (unit-resolution (and-elim @x330 $x392) @x355 $x359) @x435 $x418) $x296)))
 (unit-resolution ((_ th-lemma arith) (or (not $x179) (not $x423) (not $x387) (not $x257) $x411)) @x239 @x353 @x437 @x227 @x300 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       25
 :arith-eq-adapter                31
 :arith-bound-propagations-cheap  32
 :arith-conflicts                 59
 :arith-diseq                     30
 :arith-grobner-calls             5
 :arith-grobner-conflicts         4
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 37
 :arith-lower                     44
 :arith-make-feasible             38
 :arith-max-columns               36
 :arith-max-rows                  6
 :arith-nla-explanations          31
 :arith-nla-lemmas                59
 :arith-propagations              32
 :arith-upper                     44
 :conflicts                       8
 :decisions                       71
 :del-clause                      89
 :final-checks                    35
 :max-memory                      1.64
 :memory                          1.02
 :mk-bool-var                     155
 :mk-clause                       138
 :num-allocs                      208876
 :num-checks                      1
 :propagations                    70
 :rlimit-count                    4033
 :time                            0.01
 :total-time                      0.01)
