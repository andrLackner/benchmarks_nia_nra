unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1113 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x811 (<= ?x1113 0)))
 (let (($x1173 (= ?x1113 0)))
 (let ((?x570 (* 3 (* x00 x!1 x!1))))
 (let ((?x285 (* 3 (* y00 x!1 x!1))))
 (let ((?x729 (* (- 1) (* y00 y!0 x!1 x!1 x!1))))
 (let ((?x1178 (* y00 y!0)))
 (let ((?x1154 (* x!1 x!1 x!1)))
 (let ((?x295 (* (- 3) ?x1154)))
 (let ((?x132 (* (- 3) (* y00 y!0 x!1))))
 (let ((?x1103 (* y!0 y!0)))
 (let ((?x238 (* (- 1) ?x1103)))
 (let ((?x695 (* 3 (* y!0 y!0 x!1))))
 (let ((?x1015 (* y!0 x!1 x!1 x!1 x!1)))
 (let ((?x978 (* x!1 x!1)))
 (let ((?x1104 (* 3 ?x978)))
 (let ((?x261 (* (- 2) x!1)))
 (let ((?x260 (* (- 2) y!0)))
 (let ((?x400 (* (- 3) (* x00 y!0 x!1))))
 (let ((?x779 (* x00 y!0)))
 (let ((?x691 (* x!1 x!1 x!1 x!1)))
 (let ((?x226 (* y!0 y!0 x!1 x!1 x!1)))
 (let ((?x788 (* (- 1) (* x00 y!0 x!1 x!1 x!1))))
 (let ((?x399 (* 2 x00)))
 (let ((?x398 (* 2 y00)))
 (let ((?x862 (+ ?x398 ?x399 ?x788 (* 2 (* y!0 x!1)) ?x226 ?x691 ?x779 (* (- 3) (* y!0 y!0 x!1 x!1)) ?x400 (* 3 (* x00 y!0 x!1 x!1)) (* (- 1) (* y00 x!1 x!1 x!1)) (* (- 3) (* y00 x!1)) ?x260 ?x261 ?x1104 ?x1015 (* (- 2) (* y!0 x!1 x!1 x!1)) ?x695 ?x238 ?x132 ?x295 ?x1178 (* 3 (* y00 y!0 x!1 x!1)) ?x729 ?x285 (* (- 3) (* x00 x!1)) ?x570 (* (- 1) (* x00 x!1 x!1 x!1)))))
 (let (($x134 (= ?x862 0)))
 (let (($x455 (not $x134)))
 (let ((?x1203 (* x00 x!1 x!1 x!1)))
 (let ((?x1162 (* (- 3) ?x978)))
 (let ((?x902 (* y00 x!1 x!1 x!1)))
 (let ((?x892 (* (- 1) ?x691)))
 (let ((?x626 (+ ?x398 ?x399 ?x788 (* (- 2) (* y!0 x!1)) ?x226 ?x892 (* (- 1) ?x779) (* 3 (* y!0 y!0 x!1 x!1)) ?x400 (* (- 3) (* x00 y!0 x!1 x!1)) ?x902 (* 3 (* y00 x!1)) ?x260 ?x261 ?x1162 ?x1015 (* 2 (* y!0 x!1 x!1 x!1)) ?x695 ?x1103 ?x132 ?x295 (* (- 1) ?x1178) (* (- 3) (* y00 y!0 x!1 x!1)) ?x729 ?x285 (* 3 (* x00 x!1)) ?x570 ?x1203)))
 (let (($x854 (= ?x626 0)))
 (let (($x1138 (or (not $x854) $x455)))
 (let (($x1134 (and $x1173 $x1138)))
 (let ((?x1159 (* (- 1) (* x!1 x!1 x!1 x!1 y!0))))
 (let ((?x1155 (* 3 ?x1154)))
 (let ((?x1153 (* (- 1) (* x!1 x!1 x!1 y!0 y!0))))
 (let ((?x1151 (* (- 3) (* x!1 y!0 y!0))))
 (let ((?x810 (* x!1 x!1 x!1 y!0 x00)))
 (let ((?x247 (* 3 (* x!1 y!0 x00))))
 (let ((?x881 (* x!1 x!1 x!1 x00)))
 (let ((?x880 (* (- 3) (* x!1 x!1 x00))))
 (let ((?x983 (* x!1 x!1 x!1 y00)))
 (let ((?x975 (* (- 3) (* x!1 x!1 y00))))
 (let ((?x870 (* x!1 x!1 x!1 y!0 y00)))
 (let ((?x653 (* 3 (* x!1 y!0 y00))))
 (let ((?x310 (* (- 2) x00)))
 (let ((?x296 (* (- 2) y00)))
 (let ((?x1116 (* 2 y!0)))
 (let ((?x546 (* 2 x!1)))
 (let ((?x929 (+ ?x546 ?x1116 ?x296 ?x310 (* (- 1) (* y!0 y00)) ?x653 (* (- 3) (* x!1 x!1 y!0 y00)) ?x870 (* 3 (* x!1 y00)) ?x975 ?x983 (* 3 (* x!1 x00)) ?x880 ?x881 (* (- 1) (* y!0 x00)) ?x247 (* (- 3) (* x!1 x!1 y!0 x00)) ?x810 ?x1103 ?x1151 (* 3 (* x!1 x!1 y!0 y!0)) ?x1153 ?x1162 ?x1155 (* (- 2) (* x!1 y!0)) (* 2 (* x!1 x!1 x!1 y!0)) ?x1159 ?x892)))
 (let ((?x356 (* y!0 x00)))
 (let ((?x414 (* y!0 y00)))
 (let ((?x699 (+ ?x546 ?x1116 ?x296 ?x310 ?x414 ?x653 (* 3 (* x!1 x!1 y!0 y00)) ?x870 (* (- 3) (* x!1 y00)) ?x975 (* (- 1) ?x983) (* (- 3) (* x!1 x00)) ?x880 (* (- 1) ?x881) ?x356 ?x247 (* 3 (* x!1 x!1 y!0 x00)) ?x810 ?x238 ?x1151 (* (- 3) (* x!1 x!1 y!0 y!0)) ?x1153 ?x1104 ?x1155 (* 2 (* x!1 y!0)) (* (- 2) (* x!1 x!1 x!1 y!0)) ?x1159 ?x691)))
 (let (($x896 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x699 0)) (not (= ?x929 0))))))
 (let (($x466 (exists ((x Int) (y Int) )(! (let ((?x652 (* x x x x)))
 (let ((?x714 (* (- 1) ?x652)))
 (let ((?x713 (* (- 1) (* x x x x y))))
 (let ((?x421 (* x x x y)))
 (let ((?x456 (* 2 ?x421)))
 (let ((?x410 (* x y)))
 (let ((?x767 (* (- 2) ?x410)))
 (let ((?x724 (* 3 (* x x x))))
 (let ((?x396 (* x x)))
 (let ((?x766 (* (- 3) ?x396)))
 (let ((?x487 (* (- 1) (* x x x y y))))
 (let ((?x384 (* x x y y)))
 (let ((?x526 (* 3 ?x384)))
 (let ((?x550 (* (- 3) (* x y y))))
 (let ((?x372 (* y y)))
 (let ((?x263 (* x x x y x00)))
 (let ((?x249 (* x x y x00)))
 (let ((?x272 (* (- 3) ?x249)))
 (let ((?x242 (* x y x00)))
 (let ((?x829 (* 3 ?x242)))
 (let ((?x234 (* y x00)))
 (let ((?x237 (* (- 1) ?x234)))
 (let ((?x229 (* x x x x00)))
 (let ((?x221 (* x x x00)))
 (let ((?x828 (* (- 3) ?x221)))
 (let ((?x148 (* x x x y00)))
 (let ((?x140 (* x x y00)))
 (let ((?x473 (* (- 3) ?x140)))
 (let ((?x129 (* x x x y y00)))
 (let ((?x127 (* x x y y00)))
 (let ((?x170 (* (- 3) ?x127)))
 (let ((?x123 (* x y y00)))
 (let ((?x474 (* 3 ?x123)))
 (let ((?x115 (* y y00)))
 (let ((?x116 (* (- 1) ?x115)))
 (let ((?x310 (* (- 2) x00)))
 (let ((?x296 (* (- 2) y00)))
 (let ((?x501 (* 2 y)))
 (let ((?x449 (* 2 x)))
 (let ((?x342 (+ ?x449 ?x501 ?x296 ?x310 ?x116 ?x474 ?x170 ?x129 (* 3 (* x y00)) ?x473 ?x148 (* 3 (* x x00)) ?x828 ?x229 ?x237 ?x829 ?x272 ?x263 ?x372 ?x550 ?x526 ?x487 ?x766 ?x724 ?x767 ?x456 ?x713 ?x714)))
 (let ((?x1128 (+ ?x449 ?x501 ?x296 ?x310 ?x115 ?x474 (* 3 ?x127) ?x129 (* (- 3) (* x y00)) ?x473 (* (- 1) ?x148) (* (- 3) (* x x00)) ?x828 (* (- 1) ?x229) ?x234 ?x829 (* 3 ?x249) ?x263 (* (- 1) ?x372) ?x550 (* (- 3) ?x384) ?x487 (* 3 ?x396) ?x724 (* 2 ?x410) (* (- 2) ?x421) ?x713 ?x652)))
 (let (($x279 (not (= ?x1128 0))))
 (let (($x93 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x93 (or $x279 (not (= ?x342 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x293 (exists ((x Int) (y Int) )(! (let ((?x1129 (+ 1 x)))
 (let ((?x569 (+ (- 1) y)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x739 (+ (* y00 ?x569 ?x1129 ?x1129 ?x1129) (* x00 ?x569 ?x1129 ?x1129 ?x1129) x ?x67 ?x74 y (* (- 1) (* ?x569 ?x569 ?x1129 ?x1129 ?x1129)) (* (- 1) (* ?x569 ?x1129 ?x1129 ?x1129 ?x1129)))))
 (let ((?x325 (+ 1 y)))
 (let ((?x287 (+ (- 1) x)))
 (let ((?x999 (+ (* y00 ?x287 ?x287 ?x287 ?x325) (* x00 ?x287 ?x287 ?x287 ?x325) x ?x67 ?x74 y (* (- 1) (* ?x287 ?x287 ?x287 ?x325 ?x325)) (* (- 1) (* ?x287 ?x287 ?x287 ?x287 ?x325)))))
 (and (= (+ x ?x67 ?x74 y) 0) (or (not (= ?x999 0)) (not (= ?x739 0)))))))))))) :qid k!27))
 ))
 (let ((?x722 (lambda ((x Int) (y Int) )(let ((?x652 (* x x x x)))
 (let ((?x714 (* (- 1) ?x652)))
 (let ((?x713 (* (- 1) (* x x x x y))))
 (let ((?x421 (* x x x y)))
 (let ((?x456 (* 2 ?x421)))
 (let ((?x410 (* x y)))
 (let ((?x767 (* (- 2) ?x410)))
 (let ((?x724 (* 3 (* x x x))))
 (let ((?x396 (* x x)))
 (let ((?x766 (* (- 3) ?x396)))
 (let ((?x487 (* (- 1) (* x x x y y))))
 (let ((?x384 (* x x y y)))
 (let ((?x526 (* 3 ?x384)))
 (let ((?x550 (* (- 3) (* x y y))))
 (let ((?x372 (* y y)))
 (let ((?x263 (* x x x y x00)))
 (let ((?x249 (* x x y x00)))
 (let ((?x272 (* (- 3) ?x249)))
 (let ((?x242 (* x y x00)))
 (let ((?x829 (* 3 ?x242)))
 (let ((?x234 (* y x00)))
 (let ((?x237 (* (- 1) ?x234)))
 (let ((?x229 (* x x x x00)))
 (let ((?x221 (* x x x00)))
 (let ((?x828 (* (- 3) ?x221)))
 (let ((?x148 (* x x x y00)))
 (let ((?x140 (* x x y00)))
 (let ((?x473 (* (- 3) ?x140)))
 (let ((?x129 (* x x x y y00)))
 (let ((?x127 (* x x y y00)))
 (let ((?x170 (* (- 3) ?x127)))
 (let ((?x123 (* x y y00)))
 (let ((?x474 (* 3 ?x123)))
 (let ((?x115 (* y y00)))
 (let ((?x116 (* (- 1) ?x115)))
 (let ((?x310 (* (- 2) x00)))
 (let ((?x296 (* (- 2) y00)))
 (let ((?x501 (* 2 y)))
 (let ((?x449 (* 2 x)))
 (let ((?x342 (+ ?x449 ?x501 ?x296 ?x310 ?x116 ?x474 ?x170 ?x129 (* 3 (* x y00)) ?x473 ?x148 (* 3 (* x x00)) ?x828 ?x229 ?x237 ?x829 ?x272 ?x263 ?x372 ?x550 ?x526 ?x487 ?x766 ?x724 ?x767 ?x456 ?x713 ?x714)))
 (let ((?x1128 (+ ?x449 ?x501 ?x296 ?x310 ?x115 ?x474 (* 3 ?x127) ?x129 (* (- 3) (* x y00)) ?x473 (* (- 1) ?x148) (* (- 3) (* x x00)) ?x828 (* (- 1) ?x229) ?x234 ?x829 (* 3 ?x249) ?x263 (* (- 1) ?x372) ?x550 (* (- 3) ?x384) ?x487 (* 3 ?x396) ?x724 (* 2 ?x410) (* (- 2) ?x421) ?x713 ?x652)))
 (let (($x279 (not (= ?x1128 0))))
 (let (($x93 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x958 (and $x93 (or $x279 (not (= ?x342 0))))))
 (let ((?x1129 (+ 1 x)))
 (let ((?x569 (+ (- 1) y)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x739 (+ (* y00 ?x569 ?x1129 ?x1129 ?x1129) (* x00 ?x569 ?x1129 ?x1129 ?x1129) x ?x67 ?x74 y (* (- 1) (* ?x569 ?x569 ?x1129 ?x1129 ?x1129)) (* (- 1) (* ?x569 ?x1129 ?x1129 ?x1129 ?x1129)))))
 (let ((?x325 (+ 1 y)))
 (let ((?x287 (+ (- 1) x)))
 (let ((?x999 (+ (* y00 ?x287 ?x287 ?x287 ?x325) (* x00 ?x287 ?x287 ?x287 ?x325) x ?x67 ?x74 y (* (- 1) (* ?x287 ?x287 ?x287 ?x325 ?x325)) (* (- 1) (* ?x287 ?x287 ?x287 ?x287 ?x325)))))
 (let (($x875 (and (= (+ x ?x67 ?x74 y) 0) (or (not (= ?x999 0)) (not (= ?x739 0))))))
 (rewrite (= $x875 $x958))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x64 (exists ((x Int) (y Int) )(! (let ((?x49 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x52 (+ (* ?x48 ?x48 ?x48 ?x49 y00) (* ?x48 ?x48 ?x48 x00 ?x49) x 1)))
 (let ((?x59 (- (- (+ (- (- ?x52 y00) x00) ?x49) (* ?x48 ?x48 ?x48 ?x49 ?x49)) (* ?x48 ?x48 ?x48 ?x48 ?x49))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x38 (+ (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35) ?x34)))
 (let ((?x44 (- (+ (- (- ?x38 y00) x00) y 1) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let (($x62 (or (not (= (- ?x44 (* ?x34 ?x34 ?x34 ?x34 ?x35)) 0)) (not (= ?x59 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x62)))))))))) :qid k!27))
 ))
 (let ((?x294 (lambda ((x Int) (y Int) )(let ((?x1129 (+ 1 x)))
 (let ((?x569 (+ (- 1) y)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x739 (+ (* y00 ?x569 ?x1129 ?x1129 ?x1129) (* x00 ?x569 ?x1129 ?x1129 ?x1129) x ?x67 ?x74 y (* (- 1) (* ?x569 ?x569 ?x1129 ?x1129 ?x1129)) (* (- 1) (* ?x569 ?x1129 ?x1129 ?x1129 ?x1129)))))
 (let ((?x325 (+ 1 y)))
 (let ((?x287 (+ (- 1) x)))
 (let ((?x999 (+ (* y00 ?x287 ?x287 ?x287 ?x325) (* x00 ?x287 ?x287 ?x287 ?x325) x ?x67 ?x74 y (* (- 1) (* ?x287 ?x287 ?x287 ?x325 ?x325)) (* (- 1) (* ?x287 ?x287 ?x287 ?x287 ?x325)))))
 (let (($x875 (and (= (+ x ?x67 ?x74 y) 0) (or (not (= ?x999 0)) (not (= ?x739 0))))))
 (let ((?x49 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x52 (+ (* ?x48 ?x48 ?x48 ?x49 y00) (* ?x48 ?x48 ?x48 x00 ?x49) x 1)))
 (let ((?x59 (- (- (+ (- (- ?x52 y00) x00) ?x49) (* ?x48 ?x48 ?x48 ?x49 ?x49)) (* ?x48 ?x48 ?x48 ?x48 ?x49))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x38 (+ (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35) ?x34)))
 (let ((?x44 (- (+ (- (- ?x38 y00) x00) y 1) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let (($x62 (or (not (= (- ?x44 (* ?x34 ?x34 ?x34 ?x34 ?x35)) 0)) (not (= ?x59 0)))))
 (let (($x63 (and (= (+ (- (- x y00) x00) y) 0) $x62)))
 (rewrite (= $x63 $x875))))))))))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x453 (mp (mp @x65 (quant-intro (proof-bind ?x294) (= $x64 $x293)) $x293) (rewrite (= $x293 $x293)) $x293)))
 (let ((@x301 (mp~ (mp @x453 (quant-intro (proof-bind ?x722) (= $x293 $x466)) $x466) (sk (~ $x466 $x896)) $x896)))
 (let ((@x1185 (mp @x301 (rewrite (= $x896 $x1134)) $x1134)))
 (let ((@x1189 (and-elim @x1185 $x1173)))
 (let ((@x1120 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1173) $x811)) @x1189 $x811)))
 (let (($x812 (>= ?x1113 0)))
 (let ((@x1145 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1173) $x812)) @x1189 $x812)))
 (let (($x251 (<= ?x626 0)))
 (let ((@x820 (lemma ((_ th-lemma arith) (hypothesis (not $x251)) @x1145 @x1120 @x1145 @x1120 false) $x251)))
 (let (($x833 (>= ?x626 0)))
 (let ((@x698 (lemma ((_ th-lemma arith) (hypothesis (not $x833)) @x1145 @x1120 @x1145 @x1120 false) $x833)))
 (let (($x818 (not (<= ?x862 0))))
 (let (($x822 (>= ?x862 0)))
 (let ((@x1200 (lemma ((_ th-lemma arith) (hypothesis (not $x822)) @x1145 @x1120 @x1145 @x1120 false) $x822)))
 (let ((@x942 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x854 (not $x251) (not $x833))) @x820 @x698 $x854)))
 (let ((@x1199 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x134 $x818 (not $x822))) (unit-resolution (and-elim @x1185 $x1138) @x942 $x455) @x1200 $x818)))
 ((_ th-lemma arith) @x1199 @x698 @x820 @x1145 @x1120 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        23
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           5
 :arith-grobner             4
 :arith-max-min             432
 :arith-nonlinear-bounds    16
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             3
 :arith-patches_succ        3
 :arith-pivots              4
 :arith-row-summations      3
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                3.72
 :memory                    3.25
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1243406
 :num-checks                1
 :propagations              14
 :rlimit-count              5280
 :time                      0.01
 :total-time                0.02)
