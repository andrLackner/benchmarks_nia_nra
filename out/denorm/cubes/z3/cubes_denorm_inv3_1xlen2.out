unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x355 (* k!2 k!2)))
 (let ((?x297 (* c!3 c!3)))
 (let ((?x515 (+ k!2 c!3)))
 (let ((?x417 (+ k!2 m!1)))
 (let ((?x441 (+ 1 n!0)))
 (let ((?x176 (* k!2 k!2 n!0)))
 (let ((?x433 (+ ?x176 (* n!0 c!3 c!3) (* ?x441 ?x441 ?x417 ?x515 ?x515 ?x515) ?x297 ?x355 (* 2 (* k!2 c!3)) (* 2 (* k!2 n!0 c!3)))))
 (let (($x306 (<= ?x433 0)))
 (let ((?x116 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x322 (<= ?x116 (- 1))))
 (let (($x117 (= ?x116 (- 1))))
 (let ((?x318 (* k!2 n!0)))
 (let ((?x390 (* (- 3) c!3)))
 (let ((?x124 (* 2 n!0)))
 (let ((?x145 (* (- 3) k!2)))
 (let ((?x274 (* ?x433 (+ 3 ?x145 ?x124 ?x390 ?x318 (* n!0 m!1)))))
 (let (($x289 (= ?x274 0)))
 (let (($x273 (not $x289)))
 (let ((?x139 (* (- 1) ?x318)))
 (let ((?x103 (* 3 c!3)))
 (let ((?x319 (* (- 2) n!0)))
 (let ((?x231 (+ k!2 ?x319 ?x103 ?x139)))
 (let (($x236 (= ?x231 1)))
 (let ((?x186 (* (- 1) ?x355)))
 (let ((?x227 (* 18 c!3)))
 (let ((?x381 (* (- 9) n!0)))
 (let ((?x154 (* 5 k!2)))
 (let ((?x226 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x224 (= ?x226 (- 6))))
 (let (($x288 (and $x224 (= (+ ?x154 ?x381 ?x227 ?x186 (* 9 (* n!0 c!3))) 4) $x236 $x117 $x273)))
 (let ((?x223 (+ ?x355 (* ?x441 ?x441 ?x417 (+ c!3 k!2) (+ c!3 k!2) (+ c!3 k!2)) (* c!3 c!3 n!0) (* 2 (* c!3 k!2 n!0)) ?x176 ?x297 (* 2 (* c!3 k!2)))))
 (let (($x338 (not (= (* ?x223 (+ 3 ?x390 ?x145 ?x124 ?x318 (* m!1 n!0))) 0))))
 (let (($x368 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x227 ?x154 ?x381 ?x186 (* 9 (* c!3 n!0))) 4) (= (+ ?x103 k!2 ?x319 ?x139) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) $x338)))
 (let (($x172 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x404 (+ 3 ?x216 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x445 (* 2 (* c k))))
 (let ((?x425 (* c c)))
 (let ((?x419 (* k k n)))
 (let ((?x446 (* 2 (* c k n))))
 (let ((?x416 (* c c n)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let ((?x49 (* k k)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* (+ ?x49 ?x369 ?x416 ?x446 ?x419 ?x425 ?x445) ?x404) 0))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x173 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x347 (+ 3 ?x216 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let (($x253 (not (= (* (+ (* ?x336 ?x68 ?x68) ?x369) ?x347) 0))))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x452 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x452 $x246 $x253))))))))))))))))) :qid k!34))
 ))
 (let ((?x188 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x404 (+ 3 ?x216 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x445 (* 2 (* c k))))
 (let ((?x425 (* c c)))
 (let ((?x419 (* k k n)))
 (let ((?x446 (* 2 (* c k n))))
 (let ((?x416 (* c c n)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let ((?x49 (* k k)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x299 (and $x119 $x203 $x255 $x293 (not (= (* (+ ?x49 ?x369 ?x416 ?x446 ?x419 ?x425 ?x445) ?x404) 0)))))
 (let ((?x371 (* (+ (* ?x336 ?x68 ?x68) ?x369) (+ 3 ?x216 (* (- 4) k) (* ?x336 ?x71) (* (- 1) m) ?x59))))
 (let (($x253 (not (= ?x371 0))))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x452 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x305 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x452 $x246 $x253)))
 (rewrite (= $x305 $x299)))))))))))))))))))))))))))))))
 ))
 (let (($x254 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x347 (+ 3 ?x216 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let (($x253 (not (= (* (+ (* ?x336 ?x68 ?x68) ?x369) ?x347) 0))))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x164 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x164 (- 4)) (= (+ ?x216 (* n k) (* (- 1) k) ?x59) (- 1)) $x246 $x253)))))))))))))) :qid k!34))
 ))
 (let ((?x334 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x347 (+ 3 ?x216 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let (($x253 (not (= (* (+ (* ?x336 ?x68 ?x68) ?x369) ?x347) 0))))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x452 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x305 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x452 $x246 $x253)))
 (let ((?x48 (* 9 n)))
 (let ((?x164 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (and $x119 (= ?x164 (- 4)) (= (+ ?x216 (* n k) (* (- 1) k) ?x59) (- 1)) $x246 $x253)))
 (rewrite (= $x128 $x305)))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x82 (= (* ?x77 (+ (* ?x68 ?x68 ?x72) (* ?x68 ?x68 ?x68 ?x71 ?x72 ?x72))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82))))))))))))))) :qid k!34))
 ))
 (let ((?x261 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x347 (+ 3 ?x216 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let (($x253 (not (= (* (+ (* ?x336 ?x68 ?x68) ?x369) ?x347) 0))))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x164 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x128 (and $x119 (= ?x164 (- 4)) (= (+ ?x216 (* n k) (* (- 1) k) ?x59) (- 1)) $x246 $x253)))
 (let ((?x80 (+ (* ?x68 ?x68 (+ n 1)) (* ?x68 ?x68 ?x68 ?x71 (+ n 1) (+ n 1)))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x80) 0))))))
 (rewrite (= $x85 $x128))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x129 (mp (mp @x87 (quant-intro (proof-bind ?x261) (= $x86 $x254)) $x254) (rewrite (= $x254 $x254)) $x254)))
 (let ((@x324 (mp (mp @x129 (quant-intro (proof-bind ?x334) (= $x254 $x173)) $x173) (quant-intro (proof-bind ?x188) (= $x173 $x172)) $x172)))
 (let ((@x301 (mp (mp~ @x324 (sk (~ $x172 $x368)) $x368) (rewrite (= $x368 $x288)) $x288)))
 (let ((@x263 (and-elim @x301 $x117)))
 (let ((@x280 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x117) $x322)) @x263 $x322)))
 (let (($x325 (>= ?x116 (- 1))))
 (let ((@x112 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x117) $x325)) @x263 $x325)))
 (let (($x427 (<= ?x226 (- 6))))
 (let ((@x283 (and-elim @x301 $x224)))
 (let ((@x140 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x224) $x427)) @x283 $x427)))
 (let (($x270 (>= ?x226 (- 6))))
 (let ((@x278 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x224) $x270)) @x283 $x270)))
 (let (($x317 (<= ?x231 1)))
 (let ((@x237 (and-elim @x301 $x236)))
 (let ((@x219 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x236) $x317)) @x237 $x317)))
 (let (($x321 (>= ?x231 1)))
 (let ((@x202 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x236) $x321)) @x237 $x321)))
 (let (($x512 (not $x306)))
 (let ((@x99 (hypothesis $x512)))
 (let (($x513 (not (<= ?x274 0))))
 (let (($x328 (>= ?x274 0)))
 (let (($x307 (>= ?x433 0)))
 (let (($x413 (not $x307)))
 (let (($x303 (= ?x433 0)))
 (let (($x311 (not $x303)))
 (let (($x233 (not $x328)))
 (let ((@x240 (hypothesis $x233)))
 (let ((@x349 ((_ th-lemma arith farkas 1 1 1) @x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x311 $x307)) (hypothesis $x303) $x307) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x311 $x306)) (hypothesis $x303) $x306) false)))
 (let ((@x435 ((_ th-lemma arith) @x240 @x99 @x112 @x280 @x112 @x280 @x202 @x219 @x112 @x280 @x278 @x140 @x112 @x280 false)))
 (let ((@x351 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x303 $x512 $x413)) (unit-resolution (lemma @x435 (or $x306 $x328)) @x240 $x306) (unit-resolution (lemma @x349 (or $x311 $x328)) @x240 $x311) $x413)))
 (let ((@x210 ((_ th-lemma arith) @x240 @x351 @x112 @x280 @x112 @x280 @x112 @x280 @x278 @x140 @x202 @x219 @x112 @x280 @x278 @x140 @x112 @x280 false)))
 (let ((@x364 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x289 $x513 $x233)) (and-elim @x301 $x273) (or $x513 $x233))))
 (let ((@x144 (unit-resolution @x364 (lemma @x210 $x328) $x513)))
 (let ((@x208 ((_ th-lemma arith) @x144 @x99 @x112 @x280 @x202 @x219 @x112 @x280 @x112 @x280 @x278 @x140 @x278 @x140 @x112 @x280 false)))
 (let ((@x393 ((_ th-lemma arith) @x144 (hypothesis $x413) @x112 @x280 @x202 @x219 @x112 @x280 @x112 @x280 @x278 @x140 @x278 @x140 @x112 @x280 false)))
 ((_ th-lemma arith farkas 1 1 1) @x144 (lemma @x393 $x307) (lemma @x208 $x306) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 34
 :arith-assert-diseq        6
 :arith-assert-lower        124
 :arith-assert-upper        93
 :arith-bound-prop          1
 :arith-branch-var          4
 :arith-conflicts           14
 :arith-eq-adapter          11
 :arith-fixed-eqs           46
 :arith-gcd-tests           22
 :arith-gomory-cuts         1
 :arith-grobner             10
 :arith-ineq-splits         4
 :arith-max-min             781
 :arith-nonlinear-bounds    53
 :arith-nonlinear-horner    96
 :arith-num-rows            12
 :arith-offset-eqs          1
 :arith-patches             7
 :arith-pivots              41
 :arith-pseudo-nonlinear    32
 :arith-row-summations      167
 :arith-tableau-max-columns 42
 :arith-tableau-max-rows    12
 :conflicts                 14
 :decisions                 42
 :del-clause                43
 :final-checks              30
 :max-memory                3.67
 :memory                    3.13
 :minimized-lits            3
 :mk-bool-var               73
 :mk-clause                 57
 :num-allocs                2055578
 :num-checks                1
 :propagations              42
 :rlimit-count              43608
 :time                      0.02
 :total-time                0.03)
