unsat
((set-logic NRA)
(declare-fun b!6 () Real)
(declare-fun r!5 () Real)
(declare-fun x!4 () Real)
(proof
(let ((?x659 (* (- (/ 1.0 2.0)) (* x!4 x!4 x!4 r!5 b!6 b!6 b!6 b!6))))
 (let ((?x451 (* (/ 1.0 2.0) (* x!4 x!4 x!4 b!6 b!6 b!6 b!6))))
 (let ((?x448 (* x!4 x!4 r!5 r!5 r!5 b!6 b!6)))
 (let ((?x380 (* x!4 x!4 r!5 b!6 b!6 b!6)))
 (let ((?x331 (* (/ 1.0 2.0) ?x380)))
 (let ((?x281 (* (- (/ 1.0 2.0)) (* x!4 x!4 r!5 r!5 b!6 b!6 b!6))))
 (let ((?x271 (* x!4 x!4 b!6 b!6)))
 (let ((?x251 (* x!4 x!4 x!4 r!5 r!5 b!6 b!6 b!6)))
 (let ((?x168 (* x!4 r!5 b!6)))
 (let ((?x343 (+ ?x168 (* (/ 1.0 2.0) (* b00 x00 x!4 x!4 r!5 b!6 b!6 b!6)) (* (/ 1.0 2.0) (* r00 x!4 x!4 r!5 b!6 b!6 b!6)) ?x251 (* (- 1.0) (* b00 x00 x!4 b!6)) ?x271 (* (- 1.0) (* r00 x!4 b!6)) ?x281 (* (- (/ 1.0 2.0)) (* b00 x00 x!4 x!4 b!6 b!6 b!6)) (* (- (/ 1.0 2.0)) (* r00 x!4 x!4 b!6 b!6 b!6)) ?x331 ?x448 ?x451 ?x659 (* (- 1.0) (* b00 x00 x!4 x!4 r!5 r!5 b!6 b!6)) (* (- 1.0) (* r00 x!4 x!4 r!5 r!5 b!6 b!6)))))
 (let (($x363 (>= ?x343 0.0)))
 (let (($x124 (not $x363)))
 (let (($x226 (= 0.0 ?x343)))
 (let (($x122 (not $x226)))
 (let ((@x522 (symm (commutativity (= $x226 (= ?x343 0.0))) (= (= ?x343 0.0) $x226))))
 (let (($x247 (= ?x343 0.0)))
 (let (($x834 (not $x247)))
 (let ((?x549 (* x!4 b!6)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x91 (* (- 1.0) r00)))
 (let ((?x76 (* (/ 3.0 8.0) (* r!5 b!6 b!6 b!6))))
 (let ((?x255 (* (- 1.0) (* x!4 r!5 r!5 b!6 b!6))))
 (let ((?x683 (* (- (/ 1.0 4.0)) (* r!5 r!5 b!6 b!6))))
 (let ((?x591 (* (- (/ 1.0 8.0)) (* b!6 b!6 b!6))))
 (let ((?x608 (* (- 1.0) (* x!4 x!4 r!5 r!5 b!6 b!6))))
 (let ((?x664 (* (- (/ 1.0 2.0)) (* x!4 x!4 b!6 b!6 b!6))))
 (let ((?x727 (* (- (/ 1.0 8.0)) (* b!6 b!6 b!6 b!6))))
 (let ((?x647 (* (- (/ 1.0 2.0)) b!6)))
 (let ((?x680 (* (- (/ 1.0 2.0)) (* x!4 b!6 b!6 b!6))))
 (let ((?x663 (* (- 1.0) ?x549)))
 (let ((?x609 (* (/ 3.0 2.0) ?x380)))
 (let ((?x295 (* (- (/ 1.0 2.0)) (* x!4 b!6 b!6 b!6 b!6))))
 (let ((?x293 (* (/ 3.0 2.0) (* x!4 r!5 b!6 b!6 b!6))))
 (let ((?x72 (* (- (/ 1.0 2.0)) (* x!4 x!4 b!6 b!6 b!6 b!6))))
 (let ((?x250 (+ ?x72 ?x293 ?x295 ?x609 ?x663 ?x680 ?x647 ?x727 ?x664 ?x608 ?x591 ?x683 ?x255 ?x76)))
 (let (($x252 (= (* ?x250 (+ ?x91 ?x75 r!5 ?x549)) 0.0)))
 (let ((?x239 (+ ?x75 r!5 ?x549 ?x91)))
 (let (($x216 (= ?x239 0.0)))
 (let ((?x829 (+ r00 ?x74 (* (- 1.0) r!5) ?x663)))
 (let (($x490 (= ?x829 0.0)))
 (let (($x155 (not $x252)))
 (let (($x852 (or $x834 $x155)))
 (let (($x261 (and $x490 $x852)))
 (let ((?x547 (+ r!5 ?x91 ?x75 ?x549)))
 (let ((?x73 (+ ?x647 ?x663 ?x664 ?x608 ?x609 ?x591 ?x680 ?x683 ?x76 ?x727 ?x255 ?x293 ?x295 ?x72)))
 (let ((?x645 (+ ?x331 ?x168 (* (- 1.0) (* x!4 b!6 r00)) (* (- 1.0) (* x!4 b!6 b00 x00)) ?x271 (* (- (/ 1.0 2.0)) (* x!4 x!4 b!6 b!6 b!6 r00)) (* (- (/ 1.0 2.0)) (* x!4 x!4 b!6 b!6 b!6 b00 x00)) ?x451 ?x448 (* (- 1.0) (* x!4 x!4 r!5 r!5 b!6 b!6 r00)) (* (- 1.0) (* x!4 x!4 r!5 r!5 b!6 b!6 b00 x00)) ?x251 ?x281 (* (/ 1.0 2.0) (* x!4 x!4 r!5 b!6 b!6 b!6 r00)) (* (/ 1.0 2.0) (* x!4 x!4 r!5 b!6 b!6 b!6 b00 x00)) ?x659)))
 (let (($x273 (and (= ?x547 0.0) (or (not (= ?x645 0.0)) (not (= (* ?x73 ?x547) 0.0))))))
 (let (($x693 (exists ((b Real) (r Real) (x Real) )(! (let ((?x102 (* x b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x91 (* (- 1.0) r00)))
 (let ((?x108 (+ r ?x91 ?x75 ?x102)))
 (let ((?x175 (* (- 1.0) (* x x r r b b))))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* x x b b b))))
 (let ((?x148 (* (- 1.0) ?x102)))
 (let ((?x131 (* (- (/ 1.0 2.0)) b)))
 (let ((?x859 (+ ?x131 ?x148 ?x142 ?x175 (* (/ 3.0 2.0) (* x x r b b b)) (* (- (/ 1.0 8.0)) (* b b b)) (* (- (/ 1.0 2.0)) (* x b b b)) (* (- (/ 1.0 4.0)) (* r r b b)) (* (/ 3.0 8.0) (* r b b b)) (* (- (/ 1.0 8.0)) (* b b b b)) (* (- 1.0) (* x r r b b)) (* (/ 3.0 2.0) (* x r b b b)) (* (- (/ 1.0 2.0)) (* x b b b b)) (* (- (/ 1.0 2.0)) (* x x b b b b)))))
 (let ((?x195 (* x x r b b b)))
 (let ((?x198 (* (/ 1.0 2.0) ?x195)))
 (let ((?x408 (+ ?x198 (* x r b) (* (- 1.0) (* x b r00)) (* (- 1.0) (* x b b00 x00)) (* x x b b) (* (- (/ 1.0 2.0)) (* x x b b b r00)) (* (- (/ 1.0 2.0)) (* x x b b b b00 x00)) (* (/ 1.0 2.0) (* x x x b b b b)) (* x x r r r b b) (* (- 1.0) (* x x r r b b r00)) (* (- 1.0) (* x x r r b b b00 x00)) (* x x x r r b b b) (* (- (/ 1.0 2.0)) (* x x r r b b b)) (* (/ 1.0 2.0) (* x x r b b b r00)) (* (/ 1.0 2.0) (* x x r b b b b00 x00)) (* (- (/ 1.0 2.0)) (* x x x r b b b b)))))
 (let (($x414 (not (= ?x408 0.0))))
 (let (($x113 (= ?x108 0.0)))
 (and $x113 (or $x414 (not (= (* ?x859 ?x108) 0.0))))))))))))))))))) :qid k!28))
 ))
 (let (($x418 (exists ((b Real) (r Real) (x Real) )(! (let ((?x91 (* (- 1.0) r00)))
 (let ((?x131 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x651 (+ ?x75 r ?x131 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x236 (+ r ?x131)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x274 (+ 1.0 ?x51)))
 (let ((?x387 (+ (* (- (/ 1.0 8.0)) (* ?x274 ?x274 b b b)) (* (- (/ 1.0 2.0)) (* ?x274 b)) (* (- (/ 1.0 4.0)) (* ?x274 ?x274 ?x236 ?x236 b b)) (* (/ 1.0 8.0) (* ?x274 ?x274 ?x236 b b b)))))
 (let ((?x195 (* x x r b b b)))
 (let ((?x198 (* (/ 1.0 2.0) ?x195)))
 (let ((?x175 (* (- 1.0) (* x x r r b b))))
 (let ((?x102 (* x b)))
 (let ((?x148 (* (- 1.0) ?x102)))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* x x b b b))))
 (let ((?x809 (+ ?x75 r ?x91 ?x102)))
 (let (($x412 (or (not (= (* ?x809 (+ ?x142 ?x148 ?x175 ?x198)) 0.0)) (not (= (* ?x387 ?x651) 0.0)))))
 (and (= ?x809 0.0) $x412)))))))))))))))))) :qid k!28))
 ))
 (let ((?x697 (lambda ((b Real) (r Real) (x Real) )(let ((?x102 (* x b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x91 (* (- 1.0) r00)))
 (let ((?x108 (+ r ?x91 ?x75 ?x102)))
 (let ((?x175 (* (- 1.0) (* x x r r b b))))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* x x b b b))))
 (let ((?x148 (* (- 1.0) ?x102)))
 (let ((?x131 (* (- (/ 1.0 2.0)) b)))
 (let ((?x859 (+ ?x131 ?x148 ?x142 ?x175 (* (/ 3.0 2.0) (* x x r b b b)) (* (- (/ 1.0 8.0)) (* b b b)) (* (- (/ 1.0 2.0)) (* x b b b)) (* (- (/ 1.0 4.0)) (* r r b b)) (* (/ 3.0 8.0) (* r b b b)) (* (- (/ 1.0 8.0)) (* b b b b)) (* (- 1.0) (* x r r b b)) (* (/ 3.0 2.0) (* x r b b b)) (* (- (/ 1.0 2.0)) (* x b b b b)) (* (- (/ 1.0 2.0)) (* x x b b b b)))))
 (let ((?x195 (* x x r b b b)))
 (let ((?x198 (* (/ 1.0 2.0) ?x195)))
 (let ((?x408 (+ ?x198 (* x r b) (* (- 1.0) (* x b r00)) (* (- 1.0) (* x b b00 x00)) (* x x b b) (* (- (/ 1.0 2.0)) (* x x b b b r00)) (* (- (/ 1.0 2.0)) (* x x b b b b00 x00)) (* (/ 1.0 2.0) (* x x x b b b b)) (* x x r r r b b) (* (- 1.0) (* x x r r b b r00)) (* (- 1.0) (* x x r r b b b00 x00)) (* x x x r r b b b) (* (- (/ 1.0 2.0)) (* x x r r b b b)) (* (/ 1.0 2.0) (* x x r b b b r00)) (* (/ 1.0 2.0) (* x x r b b b b00 x00)) (* (- (/ 1.0 2.0)) (* x x x r b b b b)))))
 (let (($x414 (not (= ?x408 0.0))))
 (let (($x113 (= ?x108 0.0)))
 (let (($x769 (and $x113 (or $x414 (not (= (* ?x859 ?x108) 0.0))))))
 (let ((?x651 (+ ?x75 r ?x131 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x236 (+ r ?x131)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x274 (+ 1.0 ?x51)))
 (let ((?x387 (+ (* (- (/ 1.0 8.0)) (* ?x274 ?x274 b b b)) (* (- (/ 1.0 2.0)) (* ?x274 b)) (* (- (/ 1.0 4.0)) (* ?x274 ?x274 ?x236 ?x236 b b)) (* (/ 1.0 8.0) (* ?x274 ?x274 ?x236 b b b)))))
 (let (($x297 (not (= (* (+ ?x75 r ?x91 ?x102) (+ ?x142 ?x148 ?x175 ?x198)) 0.0))))
 (let (($x238 (and (= (+ ?x75 r ?x91 ?x102) 0.0) (or $x297 (not (= (* ?x387 ?x651) 0.0))))))
 (rewrite (= $x238 $x769))))))))))))))))))))))))))
 ))
 (let (($x66 (exists ((b Real) (r Real) (x Real) )(! (let ((?x51 (* 2.0 x)))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x58 (- (- (* (- 1.0) ?x36 ?x36 ?x36 ?x52 ?x52) (* ?x36 ?x52)) (* ?x36 ?x36 ?x48 ?x48 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ ?x58 (* ?x36 ?x36 ?x36 ?x48 ?x52 ?x52)))))
 (let ((?x37 (* ?x36 2.0 x)))
 (let ((?x42 (- (- (* (- 1.0) ?x36 ?x36 ?x36 2.0 x 2.0 x) ?x37) (* ?x36 ?x36 r r 2.0 x 2.0 x))))
 (let ((?x45 (* (+ (- (+ (* (- 1.0) b00 x00) r) r00) ?x37) (+ ?x42 (* ?x36 ?x36 ?x36 r 2.0 x 2.0 x)))))
 (let (($x34 (= (+ (- (+ (* (- 1.0) b00 x00) r) r00) (* b x)) 0.0)))
 (and $x34 (or (not (= ?x45 0.0)) (not (= ?x61 0.0)))))))))))))) :qid k!28))
 ))
 (let ((?x245 (lambda ((b Real) (r Real) (x Real) )(let ((?x91 (* (- 1.0) r00)))
 (let ((?x131 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x651 (+ ?x75 r ?x131 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x236 (+ r ?x131)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x274 (+ 1.0 ?x51)))
 (let ((?x387 (+ (* (- (/ 1.0 8.0)) (* ?x274 ?x274 b b b)) (* (- (/ 1.0 2.0)) (* ?x274 b)) (* (- (/ 1.0 4.0)) (* ?x274 ?x274 ?x236 ?x236 b b)) (* (/ 1.0 8.0) (* ?x274 ?x274 ?x236 b b b)))))
 (let ((?x195 (* x x r b b b)))
 (let ((?x198 (* (/ 1.0 2.0) ?x195)))
 (let ((?x175 (* (- 1.0) (* x x r r b b))))
 (let ((?x102 (* x b)))
 (let ((?x148 (* (- 1.0) ?x102)))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* x x b b b))))
 (let ((?x809 (+ ?x75 r ?x91 ?x102)))
 (let (($x412 (or (not (= (* ?x809 (+ ?x142 ?x148 ?x175 ?x198)) 0.0)) (not (= (* ?x387 ?x651) 0.0)))))
 (let (($x238 (and (= ?x809 0.0) $x412)))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x58 (- (- (* (- 1.0) ?x36 ?x36 ?x36 ?x52 ?x52) (* ?x36 ?x52)) (* ?x36 ?x36 ?x48 ?x48 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ ?x58 (* ?x36 ?x36 ?x36 ?x48 ?x52 ?x52)))))
 (let ((?x37 (* ?x36 2.0 x)))
 (let ((?x42 (- (- (* (- 1.0) ?x36 ?x36 ?x36 2.0 x 2.0 x) ?x37) (* ?x36 ?x36 r r 2.0 x 2.0 x))))
 (let ((?x45 (* (+ (- (+ (* (- 1.0) b00 x00) r) r00) ?x37) (+ ?x42 (* ?x36 ?x36 ?x36 r 2.0 x 2.0 x)))))
 (let (($x34 (= (+ (- (+ (* (- 1.0) b00 x00) r) r00) (* b x)) 0.0)))
 (let (($x65 (and $x34 (or (not (= ?x45 0.0)) (not (= ?x61 0.0))))))
 (rewrite (= $x65 $x238)))))))))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x132 (mp (mp @x67 (quant-intro (proof-bind ?x245) (= $x66 $x418)) $x418) (quant-intro (proof-bind ?x697) (= $x418 $x693)) $x693)))
 (let ((@x215 (mp (mp~ @x132 (sk (~ $x693 $x273)) $x273) (rewrite (= $x273 $x261)) $x261)))
 (let ((@x253 (and-elim @x215 $x490)))
 (let (($x277 (<= ?x829 0.0)))
 (let (($x308 (= 0.0 ?x829)))
 (let ((@x162 (mp @x253 (symm (commutativity (= $x308 $x490)) (= $x490 $x308)) $x308)))
 (let ((@x294 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x277)) @x162 $x277)))
 (let (($x830 (>= ?x829 0.0)))
 (let ((@x284 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x830)) @x162 $x830)))
 (let (($x346 (<= ?x239 0.0)))
 (let (($x265 (>= ?x239 0.0)))
 (let ((@x304 ((_ th-lemma arith) (lemma ((_ th-lemma arith) (hypothesis (not $x265)) @x294 false) $x265) (lemma ((_ th-lemma arith) @x284 (hypothesis (not $x346)) false) $x346) @x284 @x294 (= ?x239 ?x829))))
 (let (($x299 (or (not $x216) $x252)))
 (let ((@x812 (unit-resolution ((_ th-lemma arith) $x299) (hypothesis $x155) (hypothesis $x216) false)))
 (let ((@x141 (unit-resolution (and-elim @x215 $x852) (unit-resolution (lemma @x812 $x299) (trans* @x304 @x253 $x216) $x252) $x834)))
 (let (($x149 (<= ?x343 0.0)))
 (let ((@x322 (unit-resolution ((_ th-lemma arith) (or (not $x277) (not $x830) $x149)) @x294 @x284 (hypothesis (not $x149)) false)))
 (let ((@x126 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x226 (not $x149) $x124)) (lemma @x322 $x149) (mp @x141 (monotonicity @x522 (= $x834 $x122)) $x122) $x124)))
 (unit-resolution ((_ th-lemma arith) (or (not $x277) (not $x830) $x363)) @x294 @x284 @x126 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      16
 :arith-eq-adapter               15
 :arith-bound-propagations-cheap 13
 :arith-conflicts                19
 :arith-diseq                    24
 :arith-fixed-eqs                1
 :arith-grobner-calls            2
 :arith-grobner-conflicts        2
 :arith-horner-calls             2
 :arith-lower                    24
 :arith-make-feasible            18
 :arith-max-columns              45
 :arith-max-rows                 5
 :arith-nla-explanations         6
 :arith-nla-lemmas               17
 :arith-propagations             13
 :arith-upper                    16
 :conflicts                      6
 :decisions                      24
 :del-clause                     10
 :final-checks                   14
 :max-memory                     1.85
 :memory                         1.11
 :mk-bool-var                    62
 :mk-clause                      65
 :num-allocs                     290590
 :num-checks                     1
 :propagations                   31
 :rlimit-count                   3871
 :time                           0.01
 :total-time                     0.01)
