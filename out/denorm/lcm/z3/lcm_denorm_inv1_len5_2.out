unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x428 (+ k!00 k!10 (* (- 1) (* y!2 v!4)) (* (- 1) (* x!3 u!5)))))
 (let (($x416 (>= ?x428 0)))
 (let (($x431 (= ?x428 0)))
 (let ((?x403 (* x!3 u!5)))
 (let ((?x395 (* y!2 v!4)))
 (let ((?x342 (* (- 1) k!10)))
 (let ((?x257 (* (- 1) k!00)))
 (let ((?x415 (+ ?x257 ?x342 ?x395 ?x403)))
 (let ((?x438 (* y!2 x!3 v!4 v!4)))
 (let ((?x285 (* y!2 y!2 x!3 v!4 v!4 v!4)))
 (let ((?x459 (+ (- 1) (* (- 1) (* y!2 y!2 y!2 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 v!4 v!4 v!4)) (* (- 3) (* y!2 y!2 y!2 v!4 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 v!4 v!4 u!5)) (* 3 (* y!2 y!2 x!3 v!4 v!4 u!5)) (* 3 (* y!2 y!2 x!3 v!4 u!5 u!5)) ?x285 (* y!2 x!3 u!5 u!5) (* 2 (* y!2 x!3 v!4 u!5)) ?x438 (* (- 1) (* y!2 y!2 u!5 u!5)) (* (- 2) (* y!2 y!2 v!4 u!5)) (* (- 1) (* y!2 y!2 v!4 v!4)) (* y!2 y!2 x!3 u!5 u!5 u!5))))
 (let ((?x466 (* ?x459 ?x415)))
 (let (($x435 (= ?x466 0)))
 (let (($x467 (not $x435)))
 (let ((?x87 (+ (- 1) (* (- 2) (* y!2 x!3 x!3 v!4 v!4 v!4)) ?x285 (* (- 1) (* x!3 x!3 v!4 v!4)) ?x438 (* x!3 x!3 x!3 v!4 v!4 v!4))))
 (let ((?x110 (* ?x87 ?x415)))
 (let (($x452 (= ?x110 0)))
 (let (($x201 (or (not $x452) $x467)))
 (let (($x174 (and $x431 $x201)))
 (let ((?x509 (+ (* u!5 x!3) (* v!4 y!2) ?x257 ?x342)))
 (let ((?x473 (* v!4 v!4 v!4 x!3 y!2 y!2)))
 (let ((?x487 (* v!4 v!4 x!3 y!2)))
 (let ((?x407 (+ (- 1) (* (- 1) (* v!4 v!4 x!3 x!3)) ?x487 ?x473 (* v!4 v!4 v!4 x!3 x!3 x!3) (* (- 2) (* v!4 v!4 v!4 x!3 x!3 y!2)))))
 (let ((?x384 (+ (- 1) (* u!5 u!5 x!3 y!2) (* 2 (* u!5 v!4 x!3 y!2)) ?x487 (* (- 1) (* u!5 u!5 y!2 y!2)) (* (- 2) (* u!5 v!4 y!2 y!2)) (* (- 1) (* v!4 v!4 y!2 y!2)) (* u!5 u!5 u!5 x!3 y!2 y!2) (* 3 (* u!5 u!5 v!4 x!3 y!2 y!2)) (* 3 (* u!5 v!4 v!4 x!3 y!2 y!2)) ?x473 (* (- 1) (* u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 y!2 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 y!2 y!2 y!2)))))
 (let (($x398 (and (= ?x509 0) (or (not (= (* ?x384 ?x509) 0)) (not (= (* ?x407 ?x509) 0))))))
 (let (($x208 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x342 (* (- 1) k!10)))
 (let ((?x257 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x217 (+ ?x33 ?x34 ?x257 ?x342)))
 (let ((?x213 (* v v v x y y)))
 (let ((?x150 (* v v x y)))
 (let ((?x355 (+ (- 1) (* (- 1) (* v v x x)) ?x150 ?x213 (* v v v x x x) (* (- 2) (* v v v x x y)))))
 (let ((?x302 (+ (- 1) (* u u x y) (* 2 (* u v x y)) ?x150 (* (- 1) (* u u y y)) (* (- 2) (* u v y y)) (* (- 1) (* v v y y)) (* u u u x y y) (* 3 (* u u v x y y)) (* 3 (* u v v x y y)) ?x213 (* (- 1) (* u u u y y y)) (* (- 3) (* u u v y y y)) (* (- 3) (* u v v y y y)) (* (- 1) (* v v v y y y)))))
 (and (= ?x217 0) (or (not (= (* ?x302 ?x217) 0)) (not (= (* ?x355 ?x217) 0))))))))))))) :qid k!29))
 ))
 (let (($x303 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x342 (* (- 1) k!10)))
 (let ((?x237 (+ y (* (- 1) x))))
 (let ((?x309 (* ?x237 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x257 (* (- 1) k!00)))
 (let ((?x247 (+ (- 1) (* ?x237 x v v) (* ?x237 ?x237 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x336 (+ x (* (- 1) y))))
 (let ((?x338 (* ?x336 u)))
 (let ((?x197 (+ (- 1) (* ?x44 ?x44 ?x336 y) (* ?x44 ?x44 ?x44 ?x336 y y))))
 (let (($x86 (or (not (= (* ?x197 (+ ?x257 ?x338 ?x45 ?x342)) 0)) (not (= (* ?x247 (+ ?x257 ?x56 ?x309 ?x342)) 0)))))
 (let ((?x320 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x320 0) $x86))))))))))))))) :qid k!29))
 ))
 (let ((?x229 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x342 (* (- 1) k!10)))
 (let ((?x257 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x217 (+ ?x33 ?x34 ?x257 ?x342)))
 (let ((?x213 (* v v v x y y)))
 (let ((?x150 (* v v x y)))
 (let ((?x355 (+ (- 1) (* (- 1) (* v v x x)) ?x150 ?x213 (* v v v x x x) (* (- 2) (* v v v x x y)))))
 (let ((?x302 (+ (- 1) (* u u x y) (* 2 (* u v x y)) ?x150 (* (- 1) (* u u y y)) (* (- 2) (* u v y y)) (* (- 1) (* v v y y)) (* u u u x y y) (* 3 (* u u v x y y)) (* 3 (* u v v x y y)) ?x213 (* (- 1) (* u u u y y y)) (* (- 3) (* u u v y y y)) (* (- 3) (* u v v y y y)) (* (- 1) (* v v v y y y)))))
 (let (($x508 (and (= ?x217 0) (or (not (= (* ?x302 ?x217) 0)) (not (= (* ?x355 ?x217) 0))))))
 (let ((?x237 (+ y (* (- 1) x))))
 (let ((?x309 (* ?x237 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x247 (+ (- 1) (* ?x237 x v v) (* ?x237 ?x237 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x336 (+ x (* (- 1) y))))
 (let ((?x338 (* ?x336 u)))
 (let ((?x197 (+ (- 1) (* ?x44 ?x44 ?x336 y) (* ?x44 ?x44 ?x44 ?x336 y y))))
 (let (($x86 (or (not (= (* ?x197 (+ ?x257 ?x338 ?x45 ?x342)) 0)) (not (= (* ?x247 (+ ?x257 ?x56 ?x309 ?x342)) 0)))))
 (let ((?x320 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x310 (and (= ?x320 0) $x86)))
 (rewrite (= $x310 $x508))))))))))))))))))))))))))
 ))
 (let (($x205 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x342 (* (- 1) k!10)))
 (let ((?x237 (+ y (* (- 1) x))))
 (let ((?x309 (* ?x237 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x257 (* (- 1) k!00)))
 (let ((?x247 (+ (- 1) (* ?x237 x v v) (* ?x237 ?x237 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x336 (+ x (* (- 1) y))))
 (let ((?x338 (* ?x336 u)))
 (let ((?x197 (+ (- 1) (* ?x44 ?x44 ?x336 y) (* ?x44 ?x44 ?x44 ?x336 y y))))
 (let (($x86 (or (not (= (* ?x197 (+ ?x257 ?x338 ?x45 ?x342)) 0)) (not (= (* ?x247 (+ ?x257 ?x56 ?x309 ?x342)) 0)))))
 (and (= (+ ?x257 (* x u) (* y v) ?x342) 0) $x86)))))))))))))) :qid k!29))
 ))
 (let ((?x264 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x342 (* (- 1) k!10)))
 (let ((?x237 (+ y (* (- 1) x))))
 (let ((?x309 (* ?x237 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x257 (* (- 1) k!00)))
 (let ((?x247 (+ (- 1) (* ?x237 x v v) (* ?x237 ?x237 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x336 (+ x (* (- 1) y))))
 (let ((?x338 (* ?x336 u)))
 (let ((?x197 (+ (- 1) (* ?x44 ?x44 ?x336 y) (* ?x44 ?x44 ?x44 ?x336 y y))))
 (let (($x86 (or (not (= (* ?x197 (+ ?x257 ?x338 ?x45 ?x342)) 0)) (not (= (* ?x247 (+ ?x257 ?x56 ?x309 ?x342)) 0)))))
 (let ((?x320 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x310 (and (= ?x320 0) $x86)))
 (let (($x301 (and (= (+ ?x257 (* x u) (* y v) ?x342) 0) $x86)))
 (rewrite (= $x301 $x310)))))))))))))))))))
 ))
 (let (($x262 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x237 (+ y (* (- 1) x))))
 (let ((?x309 (* ?x237 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x247 (+ (- 1) (* ?x237 x v v) (* ?x237 ?x237 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x336 (+ x (* (- 1) y))))
 (let ((?x338 (* ?x336 u)))
 (let ((?x197 (+ (- 1) (* ?x44 ?x44 ?x336 y) (* ?x44 ?x44 ?x44 ?x336 y y))))
 (let (($x265 (or (not (= (* ?x197 (+ ?x79 ?x338 ?x45 ?x95)) 0)) (not (= (* ?x247 (+ ?x79 ?x56 ?x309 ?x95)) 0)))))
 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x265))))))))))))))) :qid k!29))
 ))
 (let ((?x91 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x342 (* (- 1) k!10)))
 (let ((?x237 (+ y (* (- 1) x))))
 (let ((?x309 (* ?x237 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x257 (* (- 1) k!00)))
 (let ((?x247 (+ (- 1) (* ?x237 x v v) (* ?x237 ?x237 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x336 (+ x (* (- 1) y))))
 (let ((?x338 (* ?x336 u)))
 (let ((?x197 (+ (- 1) (* ?x44 ?x44 ?x336 y) (* ?x44 ?x44 ?x44 ?x336 y y))))
 (let (($x86 (or (not (= (* ?x197 (+ ?x257 ?x338 ?x45 ?x342)) 0)) (not (= (* ?x247 (+ ?x257 ?x56 ?x309 ?x342)) 0)))))
 (let (($x301 (and (= (+ ?x257 (* x u) (* y v) ?x342) 0) $x86)))
 (let ((?x254 (* ?x247 (+ (* (- 1) (* u00 x00)) ?x56 ?x309 (* (- 1) (* v00 y00))))))
 (let ((?x230 (* ?x197 (+ (* (- 1) (* u00 x00)) ?x338 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x312 (* y v)))
 (let ((?x159 (* x u)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let (($x306 (and (= (+ ?x79 ?x159 ?x312 ?x95) 0) (or (not (= ?x230 0)) (not (= ?x254 0))))))
 (rewrite (= $x306 $x301)))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x29 (- 1)))
 (let ((?x64 (+ ?x29 (* v v x (- y x)) (* 0 (+ u v) v v x) (* v v v x (- y x) (- y x)))))
 (let ((?x38 (* v00 y00)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x32 (* ?x29 u00 x00)))
 (let (($x67 (not (= (* (- (+ ?x32 ?x56 (* v (- y x))) ?x38) ?x64) 0))))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x51 (+ ?x29 (* ?x44 ?x44 ?x42 y) (* 0 u ?x44 ?x44 ?x42) (* ?x44 ?x44 ?x44 ?x42 y y))))
 (let (($x54 (not (= (* (- (+ ?x32 (* u ?x42) (* ?x44 y)) ?x38) ?x51) 0))))
 (and (= (- (+ ?x32 (* u x) (* v y)) ?x38) 0) (or $x54 $x67))))))))))))) :qid k!29))
 ))
 (let ((?x348 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x237 (+ y (* (- 1) x))))
 (let ((?x309 (* ?x237 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x247 (+ (- 1) (* ?x237 x v v) (* ?x237 ?x237 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x336 (+ x (* (- 1) y))))
 (let ((?x338 (* ?x336 u)))
 (let ((?x197 (+ (- 1) (* ?x44 ?x44 ?x336 y) (* ?x44 ?x44 ?x44 ?x336 y y))))
 (let (($x265 (or (not (= (* ?x197 (+ ?x79 ?x338 ?x45 ?x95)) 0)) (not (= (* ?x247 (+ ?x79 ?x56 ?x309 ?x95)) 0)))))
 (let (($x306 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x265)))
 (let ((?x29 (- 1)))
 (let ((?x64 (+ ?x29 (* v v x (- y x)) (* 0 ?x55 v v x) (* v v v x (- y x) (- y x)))))
 (let ((?x65 (* (- (+ (* ?x29 u00 x00) ?x56 (* v (- y x))) ?x38) ?x64)))
 (let ((?x51 (+ ?x29 (* ?x44 ?x44 (- x y) y) (* 0 u ?x44 ?x44 (- x y)) (* ?x44 ?x44 ?x44 (- x y) y y))))
 (let ((?x52 (* (- (+ (* ?x29 u00 x00) (* u (- x y)) ?x45) ?x38) ?x51)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x69 (and $x41 (or (not (= ?x52 0)) (not (= ?x65 0))))))
 (rewrite (= $x69 $x306)))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x298 (mp (mp @x71 (quant-intro (proof-bind ?x348) (= $x70 $x262)) $x262) (rewrite (= $x262 $x262)) $x262)))
 (let ((@x199 (mp (mp @x298 (quant-intro (proof-bind ?x91) (= $x262 $x205)) $x205) (quant-intro (proof-bind ?x264) (= $x205 $x303)) $x303)))
 (let ((@x400 (mp~ (mp @x199 (quant-intro (proof-bind ?x229) (= $x303 $x208)) $x208) (sk (~ $x208 $x398)) $x398)))
 (let ((@x160 (mp @x400 (rewrite (= $x398 $x174)) $x174)))
 (let ((@x448 (and-elim @x160 $x431)))
 (let ((@x442 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x431) $x416)) @x448 $x416)))
 (let (($x417 (<= ?x428 0)))
 (let ((@x402 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x431) $x417)) @x448 $x417)))
 (let (($x434 (not (<= ?x466 0))))
 (let (($x294 (>= ?x466 0)))
 (let (($x419 (>= ?x110 0)))
 (let (($x420 (<= ?x110 0)))
 (let ((@x281 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x452 (not $x420) (not $x419))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x420)) @x402 @x442 false) $x420) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x419)) @x402 @x442 false) $x419) $x452)))
 (let ((@x222 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x435 $x434 (not $x294))) (unit-resolution (and-elim @x160 $x201) @x281 $x467) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x294)) @x402 @x442 false) $x294) $x434)))
 ((_ th-lemma arith farkas 1 1 1) @x222 @x402 @x442 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        28
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             216
 :arith-nonlinear-bounds    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 36
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.48
 :memory                    3.07
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1057914
 :num-checks                1
 :propagations              14
 :rlimit-count              2802
 :time                      0.01
 :total-time                0.01)
