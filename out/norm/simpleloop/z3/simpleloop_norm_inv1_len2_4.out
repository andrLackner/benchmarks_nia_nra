unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x892 (* (- 1) x!1)))
 (let ((?x935 (* (- 1) y!0)))
 (let ((?x940 (+ y00 x00 ?x935 ?x892)))
 (let (($x1006 (<= ?x940 0)))
 (let (($x939 (= ?x940 0)))
 (let ((?x762 (+ 1 y!0)))
 (let ((?x767 (+ (- 1) x!1)))
 (let ((?x924 (* ?x767 ?x767 ?x767 ?x762 ?x762 ?x762)))
 (let ((?x1056 (+ (* 2 y00) (* 2 x00) (* (- 4) (* y00 x!1)) (* 4 (* y00 y!0 y!0 x!1 x!1)) (* y00 y!0 y!0 y!0 x!1 x!1) (* (- 2) (* y00 y!0 y!0 y!0 x!1)) (* y00 y!0 y!0 y!0) (* (- 10) (* x00 y!0 x!1)) (* 2 (* x00 x!1 x!1)) (* 5 (* x00 y!0 x!1 x!1)) (* 4 (* x00 y!0 y!0)) (* 4 (* x00 y!0 y!0 x!1 x!1)) (* 3 (* y!0 y!0 x!1)) (* 5 (* x00 y!0)) (* x00 y!0 y!0 y!0 x!1 x!1) (* x00 y!0 y!0 y!0) (* (- 2) (* x00 y!0 y!0 y!0 x!1)) (* 2 (* y00 x!1 x!1)) (* (- 1) (* y!0 y!0 y!0 x!1 x!1)) (* (- 10) (* y00 y!0 x!1)) (* 5 (* y00 y!0 x!1 x!1)) (* 2 (* y!0 y!0 y!0 x!1)) (* (- 2) (* y!0 y!0)) (* (- 8) (* x00 y!0 y!0 x!1)) (* 2 (* x!1 x!1)) (* 3 (* y!0 x!1 x!1)) (* (- 1) (* ?x767 ?x767 ?x762 ?x762 ?x762 ?x762)) (* (- 4) (* x00 x!1)) (* (- 1) (* y!0 y!0 y!0)) ?x935 (* (- 1) (* x!1 x!1 x!1)) ?x892 (* (- 1) ?x924) (* 5 (* y00 y!0)) (* 4 (* y00 y!0 y!0)) (* (- 8) (* y00 y!0 y!0 x!1)) (* (- 2) (* y!0 x!1 x!1 x!1)) (* (- 1) (* y!0 y!0 x!1 x!1 x!1)))))
 (let (($x985 (= ?x1056 0)))
 (let (($x988 (not $x985)))
 (let (($x923 (and $x939 $x988)))
 (let ((?x888 (* x!1 x!1 x!1)))
 (let ((?x773 (* ?x767 ?x767 ?x762 ?x762 ?x762 ?x762)))
 (let ((?x856 (* y!0 y!0 y!0)))
 (let ((?x1092 (* (- 2) x00)))
 (let ((?x1091 (* (- 2) y00)))
 (let ((?x890 (+ x!1 y!0 ?x1091 ?x1092 (* (- 5) (* y!0 y00)) (* (- 4) (* y!0 y!0 y00)) (* 8 (* x!1 y!0 y!0 y00)) (* (- 4) (* x!1 x!1 y!0 y!0 y00)) (* 4 (* x!1 y00)) (* (- 2) (* x!1 x!1 y00)) (* 10 (* x!1 y!0 y00)) (* (- 5) (* x!1 x!1 y!0 y00)) (* 2 (* y!0 y!0)) ?x856 (* (- 2) (* x!1 y!0 y!0 y!0)) (* x!1 x!1 y!0 y!0 y!0) (* (- 2) (* x!1 x!1)) (* (- 3) (* x!1 x!1 y!0)) (* (- 3) (* x!1 y!0 y!0)) (* 4 (* x!1 x00)) (* (- 2) (* x!1 x!1 x00)) (* (- 5) (* y!0 x00)) (* 10 (* x!1 y!0 x00)) (* (- 5) (* x!1 x!1 y!0 x00)) (* (- 4) (* y!0 y!0 x00)) (* 8 (* x!1 y!0 y!0 x00)) (* (- 4) (* x!1 x!1 y!0 y!0 x00)) (* (- 1) (* y!0 y!0 y!0 x00)) (* 2 (* x!1 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0 x00)) ?x773 ?x924 (* x!1 x!1 x!1 y!0 y!0) ?x888 (* 2 (* x!1 x!1 x!1 y!0)) (* (- 1) (* y!0 y!0 y!0 y00)) (* 2 (* x!1 y!0 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0 y00)))))
 (let (($x790 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x890 0)))))
 (let (($x1242 (exists ((x Int) (y Int) )(! (let ((?x1114 (* (- 1) (* x x y y y y00))))
 (let ((?x1113 (* 2 (* x y y y y00))))
 (let ((?x1005 (* (- 1) (* y y y y00))))
 (let ((?x860 (* 2 (* x x x y))))
 (let ((?x812 (* x x x)))
 (let ((?x796 (* x x x y y)))
 (let ((?x82 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x683 (* ?x74 ?x74 ?x74 ?x82 ?x82 ?x82)))
 (let ((?x611 (* ?x74 ?x74 ?x82 ?x82 ?x82 ?x82)))
 (let ((?x1112 (* (- 1) (* x x y y y x00))))
 (let ((?x1111 (* 2 (* x y y y x00))))
 (let ((?x1110 (* (- 1) (* y y y x00))))
 (let ((?x1109 (* (- 4) (* x x y y x00))))
 (let ((?x1107 (* (- 4) (* y y x00))))
 (let ((?x1106 (* (- 5) (* x x y x00))))
 (let ((?x1104 (* (- 5) (* y x00))))
 (let ((?x1103 (* (- 2) (* x x x00))))
 (let ((?x295 (* (- 3) (* x y y))))
 (let ((?x362 (* (- 3) (* x x y))))
 (let ((?x855 (* (- 2) (* x x))))
 (let ((?x226 (* x x y y y)))
 (let ((?x297 (* (- 2) (* x y y y))))
 (let ((?x220 (* y y y)))
 (let ((?x1101 (* 2 (* y y))))
 (let ((?x1100 (* (- 5) (* x x y y00))))
 (let ((?x1098 (* (- 2) (* x x y00))))
 (let ((?x1096 (* (- 4) (* x x y y y00))))
 (let ((?x1094 (* (- 4) (* y y y00))))
 (let ((?x1093 (* (- 5) (* y y00))))
 (let ((?x1092 (* (- 2) x00)))
 (let ((?x1091 (* (- 2) y00)))
 (let ((?x1235 (+ x y ?x1091 ?x1092 ?x1093 ?x1094 (* 8 (* x y y y00)) ?x1096 (* 4 (* x y00)) ?x1098 (* 10 (* x y y00)) ?x1100 ?x1101 ?x220 ?x297 ?x226 ?x855 ?x362 ?x295 (* 4 (* x x00)) ?x1103 ?x1104 (* 10 (* x y x00)) ?x1106 ?x1107 (* 8 (* x y y x00)) ?x1109 ?x1110 ?x1111 ?x1112 ?x611 ?x683 ?x796 ?x812 ?x860 ?x1005 ?x1113 ?x1114)))
 (let (($x84 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x84 (not (= ?x1235 0))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x909 (exists ((x Int) (y Int) )(! (let ((?x82 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x204 (+ (* y00 ?x74 ?x74 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x82 ?x82 ?x82)) (* x00 ?x74 ?x74 ?x82 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x82 ?x82 ?x82 ?x82)) (* (- 1) (* ?x74 ?x74 ?x74 ?x82 ?x82 ?x82)) (* x00 ?x74 ?x74 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x74 ?x82 ?x82)) (* y00 ?x74 ?x74 ?x82 ?x82 ?x82))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x204 0)))))) :qid k!26))
 ))
 (let ((?x1244 (lambda ((x Int) (y Int) )(let ((?x1114 (* (- 1) (* x x y y y y00))))
 (let ((?x1113 (* 2 (* x y y y y00))))
 (let ((?x1005 (* (- 1) (* y y y y00))))
 (let ((?x860 (* 2 (* x x x y))))
 (let ((?x812 (* x x x)))
 (let ((?x796 (* x x x y y)))
 (let ((?x82 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x683 (* ?x74 ?x74 ?x74 ?x82 ?x82 ?x82)))
 (let ((?x611 (* ?x74 ?x74 ?x82 ?x82 ?x82 ?x82)))
 (let ((?x1112 (* (- 1) (* x x y y y x00))))
 (let ((?x1111 (* 2 (* x y y y x00))))
 (let ((?x1110 (* (- 1) (* y y y x00))))
 (let ((?x1109 (* (- 4) (* x x y y x00))))
 (let ((?x1107 (* (- 4) (* y y x00))))
 (let ((?x1106 (* (- 5) (* x x y x00))))
 (let ((?x1104 (* (- 5) (* y x00))))
 (let ((?x1103 (* (- 2) (* x x x00))))
 (let ((?x295 (* (- 3) (* x y y))))
 (let ((?x362 (* (- 3) (* x x y))))
 (let ((?x855 (* (- 2) (* x x))))
 (let ((?x226 (* x x y y y)))
 (let ((?x297 (* (- 2) (* x y y y))))
 (let ((?x220 (* y y y)))
 (let ((?x1101 (* 2 (* y y))))
 (let ((?x1100 (* (- 5) (* x x y y00))))
 (let ((?x1098 (* (- 2) (* x x y00))))
 (let ((?x1096 (* (- 4) (* x x y y y00))))
 (let ((?x1094 (* (- 4) (* y y y00))))
 (let ((?x1093 (* (- 5) (* y y00))))
 (let ((?x1092 (* (- 2) x00)))
 (let ((?x1091 (* (- 2) y00)))
 (let ((?x1235 (+ x y ?x1091 ?x1092 ?x1093 ?x1094 (* 8 (* x y y y00)) ?x1096 (* 4 (* x y00)) ?x1098 (* 10 (* x y y00)) ?x1100 ?x1101 ?x220 ?x297 ?x226 ?x855 ?x362 ?x295 (* 4 (* x x00)) ?x1103 ?x1104 (* 10 (* x y x00)) ?x1106 ?x1107 (* 8 (* x y y x00)) ?x1109 ?x1110 ?x1111 ?x1112 ?x611 ?x683 ?x796 ?x812 ?x860 ?x1005 ?x1113 ?x1114)))
 (let (($x84 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x901 (and $x84 (not (= ?x1235 0)))))
 (let ((?x204 (+ (* y00 ?x74 ?x74 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x82 ?x82 ?x82)) (* x00 ?x74 ?x74 ?x82 ?x82 ?x82) (* (- 1) ?x611) (* (- 1) ?x683) (* x00 ?x74 ?x74 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x74 ?x82 ?x82)) (* y00 ?x74 ?x74 ?x82 ?x82 ?x82))))
 (let (($x861 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x204 0)))))
 (rewrite (= $x861 $x901))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x55 (exists ((x Int) (y Int) )(! (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (+ (- (* ?x34 ?x34 ?x35 ?x35 y00) (* ?x34 ?x34 ?x35 ?x35 ?x35)) (* ?x34 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x44 (- (- ?x40 (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x48 (- (+ ?x44 (* ?x34 ?x34 x00 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x48 (* ?x34 ?x34 ?x35 ?x35 ?x35 y00)) 0))))))))) :qid k!26))
 ))
 (let ((?x911 (lambda ((x Int) (y Int) )(let ((?x82 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x204 (+ (* y00 ?x74 ?x74 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x82 ?x82 ?x82)) (* x00 ?x74 ?x74 ?x82 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x82 ?x82 ?x82 ?x82)) (* (- 1) (* ?x74 ?x74 ?x74 ?x82 ?x82 ?x82)) (* x00 ?x74 ?x74 ?x82 ?x82) (* (- 1) (* ?x74 ?x74 ?x74 ?x82 ?x82)) (* y00 ?x74 ?x74 ?x82 ?x82 ?x82))))
 (let (($x861 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x204 0)))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (+ (- (* ?x34 ?x34 ?x35 ?x35 y00) (* ?x34 ?x34 ?x35 ?x35 ?x35)) (* ?x34 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x44 (- (- ?x40 (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x48 (- (+ ?x44 (* ?x34 ?x34 x00 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let (($x54 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x48 (* ?x34 ?x34 ?x35 ?x35 ?x35 y00)) 0))))))
 (rewrite (= $x54 $x861)))))))))))))
 ))
 (let ((@x56 (asserted $x55)))
 (let ((@x183 (mp (mp @x56 (quant-intro (proof-bind ?x911) (= $x55 $x909)) $x909) (rewrite (= $x909 $x909)) $x909)))
 (let ((@x932 (mp~ (mp @x183 (quant-intro (proof-bind ?x1244) (= $x909 $x1242)) $x1242) (sk (~ $x1242 $x790)) $x790)))
 (let ((@x1057 (mp @x932 (rewrite (= $x790 $x923)) $x923)))
 (let ((@x1034 (and-elim @x1057 $x939)))
 (let ((@x210 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x939) $x1006)) @x1034 $x1006)))
 (let (($x1049 (>= ?x940 0)))
 (let ((@x780 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x939) $x1049)) @x1034 $x1049)))
 (let (($x950 (not (>= ?x1056 0))))
 (let (($x1045 (<= ?x1056 0)))
 (let ((@x271 (lemma ((_ th-lemma arith) (hypothesis (not $x1045)) @x780 @x210 @x780 @x210 false) $x1045)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x985 (not $x1045) $x950)) (and-elim @x1057 $x988) (or (not $x1045) $x950))))
 ((_ th-lemma arith) (unit-resolution @x114 @x271 $x950) @x780 @x210 @x780 @x210 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             314
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 53
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.71
 :memory                    3.21
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1300569
 :num-checks                1
 :propagations              4
 :rlimit-count              5246
 :time                      0.01
 :total-time                0.02)
