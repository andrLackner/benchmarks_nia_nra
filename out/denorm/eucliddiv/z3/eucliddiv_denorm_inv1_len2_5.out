unsat
((set-logic NIA)
(proof
(let (($x52 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x44 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x46 (+ ?x44 ?x45)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x47 (* ?x42 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let (($x49 (not $x48)))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x50))))))))))))) :qid k!29))
 ))
 (let (($x261 (= $x52 false)))
 (let (($x254 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x260 (elim-unused (= $x254 false))))
 (let (($x257 (= $x52 $x254)))
 (let ((?x307 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x44 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x46 (+ ?x44 ?x45)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x47 (* ?x42 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let (($x49 (not $x48)))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x51 (and $x33 $x41 $x50)))
 (let (($x252 (= $x51 false)))
 (let (($x291 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x79 (= (+ (* (- 1) y00) y) 0)))
 (let (($x301 (and $x79 $x291 false)))
 (let (($x245 (= $x50 false)))
 (let ((@x244 (rewrite (= (or false) false))))
 (let (($x240 (or false)))
 (let (($x241 (= $x50 $x240)))
 (let (($x238 (= $x49 false)))
 (let ((@x237 (rewrite (= (not true) false))))
 (let (($x233 (not true)))
 (let (($x234 (= $x49 $x233)))
 (let (($x231 (= $x48 true)))
 (let ((@x230 (rewrite (= (= 0 0) true))))
 (let (($x226 (= 0 0)))
 (let (($x227 (= $x48 $x226)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x74 (+ r ?x57)))
 (let ((?x279 (+ (* y00 ?x74 ?x74 ?x74) (* y00 y00 y00 ?x74 ?x74 ?x74))))
 (let ((?x284 (* 0 ?x279)))
 (let ((@x71 (trans (monotonicity (rewrite (= ?x30 ?x57)) (= ?x42 (+ ?x57 y00))) (rewrite (= (+ ?x57 y00) 0)) (= ?x42 0))))
 (let ((@x293 (trans (monotonicity @x71 (rewrite (= ?x46 ?x279)) (= ?x47 ?x284)) (rewrite (= ?x284 0)) $x48)))
 (let ((@x298 (trans (monotonicity (trans (monotonicity @x293 $x227) @x230 $x231) $x234) @x237 $x238)))
 (let ((@x303 (monotonicity (rewrite (= $x33 $x79)) (rewrite (= $x41 $x291)) (trans (monotonicity @x298 $x241) @x244 $x245) (= $x51 $x301))))
 (trans @x303 (rewrite (= $x301 false)) $x252)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (mp @x53 (trans (quant-intro (proof-bind ?x307) $x257) @x260 $x261) false))))))))))

(:max-memory   3.34
 :memory       3.04
 :mk-bool-var  5
 :num-allocs   898488
 :rlimit-count 181
 :time         0.01
 :total-time   0.01)
