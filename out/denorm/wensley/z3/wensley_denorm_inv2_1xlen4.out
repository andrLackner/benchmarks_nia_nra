unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun b!7 () Real)
(declare-fun a!8 () Real)
(declare-fun d!6 () Real)
(proof
(let ((?x564 (* (- (/ 1.0 128.0)) (* b00 d!6 d!6 d!6 d!6 a!8 b!7 b!7 b!7 y!5))))
 (let ((?x472 (* (/ 1.0 128.0) (* d00 d!6 d!6 d!6 a!8 b!7 b!7 b!7 b!7 y!5))))
 (let ((?x199 (+ (* (/ 1.0 16.0) (* d00 d!6 a!8 a!8 a!8 b!7 b!7 b!7)) (* (- (/ 1.0 16.0)) (* b00 d!6 d!6 a!8 a!8 a!8 b!7 b!7)) (* (- (/ 1.0 16.0)) (* d00 d!6 a!8 a!8 b!7 b!7 b!7 y!5)) (* (/ 1.0 16.0) (* b00 d!6 d!6 a!8 a!8 b!7 b!7 y!5)) (* (/ 1.0 16.0) (* b00 d!6 b!7 b!7 b!7 y!5)) ?x472 (* (- (/ 1.0 16.0)) (* d00 b!7 b!7 b!7 b!7 y!5)) ?x564)))
 (let (($x596 (<= ?x199 0.0)))
 (let (($x145 (not $x596)))
 (let (($x364 (>= ?x199 0.0)))
 (let ((?x363 (* d00 b!7)))
 (let ((?x616 (+ ?x363 (* (- 1.0) (* b00 d!6)))))
 (let (($x482 (>= ?x616 0.0)))
 (let (($x365 (= 0.0 ?x616)))
 (let ((@x244 (symm (commutativity (= $x365 (= ?x616 0.0))) (= (= ?x616 0.0) $x365))))
 (let (($x488 (= ?x616 0.0)))
 (let ((?x410 (* (/ 1.0 64.0) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7 y!5))))
 (let ((?x389 (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 a!8 b!7 b!7 b!7))))
 (let ((?x612 (* (- (/ 1.0 16.0)) (* d!6 d!6 a!8 a!8 b!7 b!7))))
 (let ((?x506 (* (/ 3.0 8.0) (* d!6 a!8 a!8 b!7 b!7 b!7))))
 (let ((?x563 (* (- (/ 1.0 8.0)) (* d!6 a!8 a!8 b!7 b!7 y!5))))
 (let ((?x157 (* (/ 1.0 8.0) (* d!6 a!8 a!8 a!8 b!7 b!7))))
 (let ((?x529 (* (- (/ 1.0 16.0)) (* d!6 b!7 b!7 b!7))))
 (let ((?x351 (* (- (/ 1.0 8.0)) (* d!6 b!7 b!7 b!7 b!7 y!5))))
 (let ((?x459 (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7))))
 (let ((?x387 (* (/ 1.0 8.0) (* d!6 b!7 b!7 b!7 b!7 b!7))))
 (let ((?x626 (* (- (/ 1.0 4.0)) (* d!6 a!8 b!7 b!7 b!7 y!5))))
 (let ((?x562 (* (/ 3.0 8.0) (* d!6 a!8 b!7 b!7 b!7 b!7))))
 (let ((?x337 (* (- (/ 1.0 16.0)) (* d!6 d!6 b!7 b!7 b!7 b!7))))
 (let ((?x217 (* (/ 1.0 64.0) (* d!6 d!6 d!6 a!8 b!7 b!7 b!7 y!5))))
 (let ((?x285 (* (- (/ 1.0 8.0)) (* b!7 b!7 b!7 y!5))))
 (let ((?x427 (* (- (/ 1.0 8.0)) (* d!6 d!6 a!8 b!7 b!7 b!7))))
 (let ((?x231 (+ ?x427 ?x285 ?x217 ?x337 ?x562 ?x626 ?x387 ?x459 ?x351 ?x529 ?x157 ?x563 ?x506 ?x612 ?x389 ?x410)))
 (let ((?x445 (* (+ (* (- (/ 1.0 2.0)) ?x363) (* (/ 1.0 2.0) (* b00 d!6))) ?x231)))
 (let (($x544 (= ?x445 0.0)))
 (let (($x507 (not $x544)))
 (let (($x514 (= ?x199 0.0)))
 (let (($x213 (not $x514)))
 (let (($x560 (or $x213 $x507)))
 (let ((?x370 (* d!6 a!8)))
 (let ((?x513 (+ ?x370 (* (- 1.0) (* a00 d!6)) (* 2.0 (* y00 b!7)) (* (- 2.0) (* b!7 y!5)))))
 (let ((?x89 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x152 (= (+ ?x30 ?x89 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let (($x615 (and $x152 $x488 (= ?x513 0.0) $x560)))
 (let ((?x197 (+ (* (/ 1.0 8.0) (* d!6 b!7 b!7 a!8 a!8 a!8)) (* (- (/ 1.0 8.0)) (* y!5 d!6 b!7 b!7 a!8 a!8)) ?x387 (* (/ 3.0 8.0) (* d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 3.0 8.0) (* d!6 b!7 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 8.0)) (* y!5 b!7 b!7 b!7)) (* (/ 1.0 64.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 1.0 8.0)) (* y!5 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 4.0)) (* y!5 d!6 b!7 b!7 b!7 a!8)) ?x337 (* (- (/ 1.0 8.0)) (* d!6 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 1.0 16.0)) (* d!6 d!6 b!7 b!7 a!8 a!8)) ?x529 (* (/ 1.0 64.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7)) ?x459 (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8)))))
 (let (($x366 (= (* (+ (* (- (/ 1.0 2.0)) (* b!7 d00)) (* (/ 1.0 2.0) (* d!6 b00))) ?x197) 0.0)))
 (let ((?x510 (* (- (/ 1.0 128.0)) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 b00))))
 (let ((?x146 (* (/ 1.0 128.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 d00))))
 (let ((?x550 (+ (* (/ 1.0 16.0) (* d!6 b!7 b!7 b!7 a!8 a!8 a!8 d00)) (* (- (/ 1.0 16.0)) (* d!6 d!6 b!7 b!7 a!8 a!8 a!8 b00)) (* (- (/ 1.0 16.0)) (* y!5 d!6 b!7 b!7 b!7 a!8 a!8 d00)) (* (/ 1.0 16.0) (* y!5 d!6 d!6 b!7 b!7 a!8 a!8 b00)) (* (- (/ 1.0 16.0)) (* y!5 b!7 b!7 b!7 b!7 d00)) (* (/ 1.0 16.0) (* y!5 d!6 b!7 b!7 b!7 b00)) ?x146 ?x510)))
 (let ((?x182 (+ ?x370 (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x423 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x89 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x623 (and $x423 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x182 0.0) (or (not (= ?x550 0.0)) (not $x366)))))
 (let (($x129 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x251 (* (/ 1.0 64.0) (* y d d d b b b a))))
 (let ((?x225 (* (- (/ 1.0 8.0)) (* y b b b))))
 (let ((?x195 (* (- (/ 1.0 8.0)) (* y d b b a a))))
 (let ((?x130 (* (/ 1.0 8.0) (* d b b a a a))))
 (let ((?x642 (+ ?x130 ?x195 (* (/ 1.0 8.0) (* d b b b b b)) (* (/ 3.0 8.0) (* d b b b b a)) (* (/ 3.0 8.0) (* d b b b a a)) ?x225 ?x251 (* (- (/ 1.0 8.0)) (* y d b b b b)) (* (- (/ 1.0 4.0)) (* y d b b b a)) (* (- (/ 1.0 16.0)) (* d d b b b b)) (* (- (/ 1.0 8.0)) (* d d b b b a)) (* (- (/ 1.0 16.0)) (* d d b b a a)) (* (- (/ 1.0 16.0)) (* d b b b)) (* (/ 1.0 64.0) (* y d d d b b b b)) (* (/ 1.0 128.0) (* d d d d b b b b)) (* (/ 1.0 128.0) (* d d d d b b b a)))))
 (let (($x151 (= (* (+ (* (- (/ 1.0 2.0)) (* b d00)) (* (/ 1.0 2.0) (* d b00))) ?x642) 0.0)))
 (let ((?x323 (+ (* (/ 1.0 16.0) (* d b b b a a a d00)) (* (- (/ 1.0 16.0)) (* d d b b a a a b00)) (* (- (/ 1.0 16.0)) (* y d b b b a a d00)) (* (/ 1.0 16.0) (* y d d b b a a b00)) (* (- (/ 1.0 16.0)) (* y b b b b d00)) (* (/ 1.0 16.0) (* y d b b b b00)) (* (/ 1.0 128.0) (* y d d d b b b b a d00)) (* (- (/ 1.0 128.0)) (* y d d d d b b b a b00)))))
 (let ((?x131 (* (- 2.0) (* y b))))
 (let ((?x106 (* d a)))
 (let (($x166 (= (+ ?x106 ?x131 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x89 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x121 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x89 (* 2.0 (* y b00))) 0.0)))
 (and $x121 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x166 (or (not (= ?x323 0.0)) (not $x151)))))))))))))))) :qid k!33))
 ))
 (let (($x209 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x440 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x492 (+ (* (/ 1.0 8.0) (* ?x66 ?x66 ?x66 d b b)) (* (- (/ 1.0 8.0)) (* ?x66 ?x66 ?x440 d b b)) (* (- (/ 1.0 8.0)) (* ?x440 b b b)) (* (/ 1.0 64.0) (* ?x66 ?x440 d d d b b b)))))
 (let ((?x355 (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d)))))
 (let ((?x251 (* (/ 1.0 64.0) (* y d d d b b b a))))
 (let ((?x225 (* (- (/ 1.0 8.0)) (* y b b b))))
 (let ((?x195 (* (- (/ 1.0 8.0)) (* y d b b a a))))
 (let ((?x130 (* (/ 1.0 8.0) (* d b b a a a))))
 (let (($x343 (or (not (= (* ?x355 (+ ?x130 ?x195 ?x225 ?x251)) 0.0)) (not (= (* ?x355 ?x492) 0.0)))))
 (let ((?x131 (* (- 2.0) (* y b))))
 (let ((?x106 (* d a)))
 (let (($x338 (= (+ ?x106 ?x131 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x89 (* (- 2.0) (* b00 y00))))
 (let (($x200 (= (+ ?x89 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x200 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x338 $x343)))))))))))))))) :qid k!33))
 ))
 (let ((?x208 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x251 (* (/ 1.0 64.0) (* y d d d b b b a))))
 (let ((?x225 (* (- (/ 1.0 8.0)) (* y b b b))))
 (let ((?x195 (* (- (/ 1.0 8.0)) (* y d b b a a))))
 (let ((?x130 (* (/ 1.0 8.0) (* d b b a a a))))
 (let ((?x642 (+ ?x130 ?x195 (* (/ 1.0 8.0) (* d b b b b b)) (* (/ 3.0 8.0) (* d b b b b a)) (* (/ 3.0 8.0) (* d b b b a a)) ?x225 ?x251 (* (- (/ 1.0 8.0)) (* y d b b b b)) (* (- (/ 1.0 4.0)) (* y d b b b a)) (* (- (/ 1.0 16.0)) (* d d b b b b)) (* (- (/ 1.0 8.0)) (* d d b b b a)) (* (- (/ 1.0 16.0)) (* d d b b a a)) (* (- (/ 1.0 16.0)) (* d b b b)) (* (/ 1.0 64.0) (* y d d d b b b b)) (* (/ 1.0 128.0) (* d d d d b b b b)) (* (/ 1.0 128.0) (* d d d d b b b a)))))
 (let (($x151 (= (* (+ (* (- (/ 1.0 2.0)) (* b d00)) (* (/ 1.0 2.0) (* d b00))) ?x642) 0.0)))
 (let ((?x323 (+ (* (/ 1.0 16.0) (* d b b b a a a d00)) (* (- (/ 1.0 16.0)) (* d d b b a a a b00)) (* (- (/ 1.0 16.0)) (* y d b b b a a d00)) (* (/ 1.0 16.0) (* y d d b b a a b00)) (* (- (/ 1.0 16.0)) (* y b b b b d00)) (* (/ 1.0 16.0) (* y d b b b b00)) (* (/ 1.0 128.0) (* y d d d b b b b a d00)) (* (- (/ 1.0 128.0)) (* y d d d d b b b a b00)))))
 (let ((?x131 (* (- 2.0) (* y b))))
 (let ((?x106 (* d a)))
 (let (($x166 (= (+ ?x106 ?x131 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x89 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x121 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x89 (* 2.0 (* y b00))) 0.0)))
 (let (($x662 (and $x121 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x166 (or (not (= ?x323 0.0)) (not $x151)))))
 (let ((?x440 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x492 (+ (* (/ 1.0 8.0) (* ?x66 ?x66 ?x66 d b b)) (* (- (/ 1.0 8.0)) (* ?x66 ?x66 ?x440 d b b)) (* (- (/ 1.0 8.0)) (* ?x440 b b b)) (* (/ 1.0 64.0) (* ?x66 ?x440 d d d b b b)))))
 (let ((?x355 (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d)))))
 (let (($x343 (or (not (= (* ?x355 (+ ?x130 ?x195 ?x225 ?x251)) 0.0)) (not (= (* ?x355 ?x492) 0.0)))))
 (let (($x338 (= (+ ?x106 ?x131 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x200 (= (+ ?x89 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x484 (and $x200 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x338 $x343)))
 (rewrite (= $x484 $x662)))))))))))))))))))))))))
 ))
 (let (($x80 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x53 (/ d 2.0)))
 (let ((?x68 (+ y ?x53)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x66 (+ a b)))
 (let ((?x71 (- (* ?x66 ?x66 ?x66 ?x51 ?x51 ?x53) (* ?x66 ?x66 ?x51 ?x51 ?x53 ?x68))))
 (let ((?x74 (+ (- ?x71 (* ?x51 ?x51 ?x51 ?x68)) (* ?x66 ?x51 ?x51 ?x51 ?x53 ?x53 ?x53 ?x68))))
 (let ((?x55 (+ (* (- 1.0) ?x51 d00) (* b00 ?x53))))
 (let ((?x59 (- (* a a a ?x51 ?x51 ?x53) (* a a ?x51 ?x51 ?x53 y))))
 (let ((?x62 (+ (- ?x59 (* ?x51 ?x51 ?x51 y)) (* a ?x51 ?x51 ?x51 ?x53 ?x53 ?x53 y))))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x55 ?x62) 0.0)) (not (= (* ?x55 ?x74) 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x221 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x440 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x492 (+ (* (/ 1.0 8.0) (* ?x66 ?x66 ?x66 d b b)) (* (- (/ 1.0 8.0)) (* ?x66 ?x66 ?x440 d b b)) (* (- (/ 1.0 8.0)) (* ?x440 b b b)) (* (/ 1.0 64.0) (* ?x66 ?x440 d d d b b b)))))
 (let ((?x355 (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d)))))
 (let ((?x251 (* (/ 1.0 64.0) (* y d d d b b b a))))
 (let ((?x225 (* (- (/ 1.0 8.0)) (* y b b b))))
 (let ((?x195 (* (- (/ 1.0 8.0)) (* y d b b a a))))
 (let ((?x130 (* (/ 1.0 8.0) (* d b b a a a))))
 (let (($x343 (or (not (= (* ?x355 (+ ?x130 ?x195 ?x225 ?x251)) 0.0)) (not (= (* ?x355 ?x492) 0.0)))))
 (let ((?x131 (* (- 2.0) (* y b))))
 (let ((?x106 (* d a)))
 (let (($x338 (= (+ ?x106 ?x131 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x89 (* (- 2.0) (* b00 y00))))
 (let (($x200 (= (+ ?x89 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x484 (and $x200 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x338 $x343)))
 (let ((?x53 (/ d 2.0)))
 (let ((?x68 (+ y ?x53)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x71 (- (* ?x66 ?x66 ?x66 ?x51 ?x51 ?x53) (* ?x66 ?x66 ?x51 ?x51 ?x53 ?x68))))
 (let ((?x74 (+ (- ?x71 (* ?x51 ?x51 ?x51 ?x68)) (* ?x66 ?x51 ?x51 ?x51 ?x53 ?x53 ?x53 ?x68))))
 (let ((?x55 (+ (* (- 1.0) ?x51 d00) (* b00 ?x53))))
 (let ((?x59 (- (* a a a ?x51 ?x51 ?x53) (* a a ?x51 ?x51 ?x53 y))))
 (let ((?x62 (+ (- ?x59 (* ?x51 ?x51 ?x51 y)) (* a ?x51 ?x51 ?x51 ?x53 ?x53 ?x53 y))))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x79 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x55 ?x62) 0.0)) (not (= (* ?x55 ?x74) 0.0))))))
 (rewrite (= $x79 $x484))))))))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x218 (mp (mp @x81 (quant-intro (proof-bind ?x221) (= $x80 $x209)) $x209) (quant-intro (proof-bind ?x208) (= $x209 $x129)) $x129)))
 (let ((@x554 (mp (mp~ @x218 (sk (~ $x129 $x623)) $x623) (rewrite (= $x623 $x615)) $x615)))
 (let ((@x156 (mp (and-elim @x554 $x488) @x244 $x365)))
 (let ((@x256 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x365) $x482)) @x156 $x482)))
 (let (($x113 (<= ?x616 0.0)))
 (let ((@x534 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x365) $x113)) @x156 $x113)))
 (let ((@x271 (unit-resolution ((_ th-lemma arith) (or (not $x113) (not $x482) $x364)) @x534 @x256 (hypothesis (not $x364)) false)))
 (let (($x508 (= 0.0 ?x199)))
 (let (($x103 (not $x508)))
 (let ((@x99 (monotonicity (symm (commutativity (= $x508 $x514)) (= $x514 $x508)) (= $x213 $x103))))
 (let ((?x604 (+ (* (/ 1.0 2.0) ?x363) (* (- (/ 1.0 2.0)) (* b00 d!6)))))
 (let (($x249 (<= ?x604 0.0)))
 (let ((@x531 (lemma ((_ th-lemma arith) (hypothesis (not $x249)) @x534 false) $x249)))
 (let ((?x627 (+ ?x410 ?x427 ?x285 ?x217 ?x337 ?x562 ?x626 ?x387 ?x459 ?x351 ?x529 ?x157 ?x563 ?x506 ?x612 ?x389)))
 (let (($x402 (>= ?x627 0.0)))
 (let (($x396 (not $x402)))
 (let (($x429 (= 0.0 ?x627)))
 (let (($x147 (not $x429)))
 (let ((@x444 (hypothesis $x507)))
 (let (($x426 (= ?x627 0.0)))
 (let (($x437 (not $x426)))
 (let ((@x383 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x437 $x544)) @x444 $x437) (symm (hypothesis $x429) $x426) false)))
 (let ((@x380 (lemma @x383 (or $x147 $x544))))
 (let (($x610 (<= ?x627 0.0)))
 (let (($x243 (<= ?x445 0.0)))
 (let (($x617 (not $x243)))
 (let (($x391 (>= ?x445 0.0)))
 (let ((@x408 (commutativity (= (= 0.0 ?x445) $x544))))
 (let (($x471 (= 0.0 ?x445)))
 (let (($x607 (not $x471)))
 (let (($x530 (not $x391)))
 (let ((@x528 (hypothesis $x530)))
 (let ((@x579 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x607 $x391)) @x528 $x607) (monotonicity @x408 (= $x607 $x507)) $x507)))
 (let (($x523 (>= ?x604 0.0)))
 (let ((@x393 (lemma ((_ th-lemma arith) @x256 (hypothesis (not $x523)) false) $x523)))
 (let ((@x401 (unit-resolution ((_ th-lemma arith) (or (not $x523) $x402 $x391)) @x528 (hypothesis $x396) @x393 false)))
 (let (($x455 (not $x610)))
 (let ((@x524 (hypothesis $x455)))
 (let ((@x518 (unit-resolution ((_ th-lemma arith) (or (not $x249) $x610 $x391)) @x528 @x524 @x531 false)))
 (let ((@x591 ((_ th-lemma arith triangle-eq) (or $x429 $x455 $x396))))
 (let ((@x597 (unit-resolution @x591 (unit-resolution (lemma @x518 (or $x610 $x391)) @x528 $x610) (unit-resolution (lemma @x401 (or $x402 $x391)) @x528 $x402) $x429)))
 (let ((@x299 (mp @x444 (monotonicity (symm @x408 (= $x544 $x471)) (= $x507 $x607)) $x607)))
 (let ((@x293 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x471 $x617 $x530)) @x299 (lemma (unit-resolution @x380 @x597 @x579 false) $x391) $x617)))
 (let ((@x573 (unit-resolution ((_ th-lemma arith) (or (not $x523) $x610 $x243)) (hypothesis $x617) @x524 @x393 false)))
 (let ((@x431 (unit-resolution @x591 (unit-resolution (lemma @x573 (or $x610 $x243)) @x293 $x610) (unit-resolution @x380 @x444 $x147) $x396)))
 (let ((@x433 (unit-resolution ((_ th-lemma arith) (or (not $x249) $x402 $x243)) @x293 @x431 @x531 false)))
 (let ((@x100 (mp (unit-resolution (and-elim @x554 $x560) (lemma @x433 $x544) $x213) @x99 $x103)))
 (let ((@x93 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x508 $x145 (not $x364))) @x100 (or $x145 (not $x364)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x113) (not $x482) $x596)) @x534 @x256 (unit-resolution @x93 (lemma @x271 $x364) $x145) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       31
 :arith-eq-adapter                31
 :arith-bound-propagations-cheap  24
 :arith-conflicts                 41
 :arith-diseq                     41
 :arith-fixed-eqs                 1
 :arith-grobner-calls             4
 :arith-grobner-conflicts         2
 :arith-horner-calls              4
 :arith-horner-cross-nested-forms 2
 :arith-lower                     36
 :arith-make-feasible             30
 :arith-max-columns               55
 :arith-max-rows                  8
 :arith-nla-explanations          7
 :arith-nla-lemmas                39
 :arith-propagations              24
 :arith-upper                     27
 :conflicts                       11
 :decisions                       46
 :del-clause                      100
 :final-checks                    28
 :max-memory                      1.79
 :memory                          1.08
 :mk-bool-var                     138
 :mk-clause                       142
 :num-allocs                      601765
 :num-checks                      1
 :propagations                    51
 :rlimit-count                    5088
 :time                            0.01
 :total-time                      0.01)
