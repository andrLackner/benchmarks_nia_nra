unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x649 (* (- 1) r!1)))
 (let ((?x667 (* (- 1) (* y00 q!2))))
 (let ((?x81 (* y00 q00)))
 (let ((?x657 (+ r00 ?x81 ?x667 ?x649)))
 (let (($x581 (<= ?x657 0)))
 (let (($x659 (= ?x657 0)))
 (let ((?x189 (* r!1 r!1 r!1)))
 (let ((?x531 (+ r00 ?x81 ?x189 (* (- 1) (* y00 y00 y00 q00)) ?x667 (* (- 1) (* y00 q00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 r00 r!1 r!1)) (* 2 (* y00 y00 q00 r!1 q!2)) ?x649 (* (- 1) (* y00 q00 r!1 r!1)) (* y00 y00 y00 r00 r!1) (* y00 y00 y00 r!1 r!1 q!2) (* 2 (* y00 r00 r!1)) (* y00 y00 r!1) (* (- 1) (* y00 y00 r!1 q!2)) (* y00 y00 y00 q!2) (* (- 1) (* y00 y00 y00 r!1 r!1)) (* (- 1) (* y00 y00 y00 y00 r!1 q!2)) (* y00 y00 r!1 r!1 r!1) (* (- 1) (* y00 y00 y00 q00 r!1 r!1)) (* y00 y00 y00 y00 q00 r!1) (* (- 1) (* r00 r!1 r!1)) (* (- 1) (* r00 r!1 r!1 q!2)) (* 2 (* y00 r00 r!1 q!2)) (* (- 1) (* y00 y00 r00 q!2)) (* y00 r!1 r!1 q!2 q!2) (* (- 2) (* y00 y00 r!1 q!2 q!2)) (* y00 y00 y00 q!2 q!2) (* r!1 r!1 r!1 q!2) (* (- 2) (* y00 r!1 r!1)) (* (- 1) (* y00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 r00)) (* 2 (* y00 y00 q00 r!1)) (* (- 1) (* y00 y00 y00 q00 q!2)))))
 (let (($x964 (= ?x531 0)))
 (let (($x976 (not $x964)))
 (let ((?x376 (+ y00 (* (- 1) y!0))))
 (let (($x377 (= ?x376 0)))
 (let (($x293 (and $x377 $x659 $x976)))
 (let ((?x802 (* y00 y00 r00)))
 (let ((?x210 (* y00 y00 y00 q00)))
 (let ((?x92 (* (- 1) ?x81)))
 (let ((?x119 (* q!2 y00)))
 (let ((?x80 (* (- 1) r00)))
 (let ((?x638 (+ r!1 ?x80 ?x119 ?x92 (* r!1 r!1 y00 y00 r00) (* (- 1) (* r!1 y00 y00 y00 r00)) (* r!1 r!1 y00 q00) (* q!2 r!1 r!1 y00 q00) (* (- 2) (* r!1 y00 y00 q00)) (* (- 2) (* q!2 r!1 y00 y00 q00)) ?x210 (* q!2 y00 y00 y00 q00) (* (- 1) ?x189) (* (- 1) (* q!2 r!1 r!1 r!1)) (* 2 (* r!1 r!1 y00)) (* q!2 r!1 r!1 y00) (* (- 1) (* r!1 y00 y00)) (* q!2 r!1 y00 y00) (* (- 1) (* q!2 y00 y00 y00)) (* r!1 r!1 y00 y00 y00) (* q!2 r!1 y00 y00 y00 y00) (* (- 1) (* r!1 r!1 r!1 y00 y00)) (* (- 1) (* q!2 r!1 r!1 y00 y00 y00)) (* r!1 r!1 y00 y00 y00 q00) (* (- 1) (* r!1 y00 y00 y00 y00 q00)) (* r!1 r!1 r00) (* q!2 r!1 r!1 r00) (* (- 2) (* r!1 y00 r00)) (* (- 2) (* q!2 r!1 y00 r00)) ?x802 (* q!2 y00 y00 r00) (* (- 1) (* q!2 q!2 r!1 r!1 y00)) (* 2 (* q!2 q!2 r!1 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00)))))
 (let (($x237 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 ?x80 ?x119 ?x92) 0) (not (= ?x638 0)))))
 (let (($x90 (exists ((q Int) (r Int) (y Int) )(! (let ((?x802 (* y00 y00 r00)))
 (let ((?x210 (* y00 y00 y00 q00)))
 (let ((?x81 (* y00 q00)))
 (let ((?x92 (* (- 1) ?x81)))
 (let ((?x39 (* q y00)))
 (let ((?x80 (* (- 1) r00)))
 (let ((?x1009 (+ r ?x80 ?x39 ?x92 (* r r y00 y00 r00) (* (- 1) (* r y00 y00 y00 r00)) (* r r y00 q00) (* q r r y00 q00) (* (- 2) (* r y00 y00 q00)) (* (- 2) (* q r y00 y00 q00)) ?x210 (* q y00 y00 y00 q00) (* (- 1) (* r r r)) (* (- 1) (* q r r r)) (* 2 (* r r y00)) (* q r r y00) (* (- 1) (* r y00 y00)) (* q r y00 y00) (* (- 1) (* q y00 y00 y00)) (* r r y00 y00 y00) (* q r y00 y00 y00 y00) (* (- 1) (* r r r y00 y00)) (* (- 1) (* q r r y00 y00 y00)) (* r r y00 y00 y00 q00) (* (- 1) (* r y00 y00 y00 y00 q00)) (* r r r00) (* q r r r00) (* (- 2) (* r y00 r00)) (* (- 2) (* q r y00 r00)) ?x802 (* q y00 y00 r00) (* (- 1) (* q q r r y00)) (* 2 (* q q r y00 y00)) (* (- 1) (* q q y00 y00 y00)))))
 (and (= (+ y (* (- 1) y00)) 0) (= (+ r ?x80 ?x39 ?x92) 0) (not (= ?x1009 0)))))))))) :qid k!29))
 ))
 (let (($x281 (exists ((q Int) (r Int) (y Int) )(! (let ((?x80 (* (- 1) r00)))
 (let ((?x79 (* (- 1) y00)))
 (let ((?x698 (+ r ?x79)))
 (let ((?x268 (+ 1 q)))
 (let ((?x36 (* q00 y00)))
 (let ((?x752 (* (- 1) ?x36)))
 (let ((?x697 (+ (* r00 y00 y00 ?x698 ?x698) (* q00 y00 ?x268 ?x698 ?x698) (* (- 1) (* ?x268 ?x698 ?x698 ?x698)) (* r00 y00 y00 y00 ?x698) (* (- 1) (* y00 y00 y00 ?x698 ?x698)) ?x752 (* (- 1) (* y00 y00 y00 y00 ?x268 ?x698)) (* (- 1) (* y00 y00 ?x698 ?x698 ?x698)) (* (- 1) (* y00 y00 y00 ?x268 ?x698 ?x698)) (* q00 y00 y00 y00 ?x698 ?x698) (* r00 ?x268 ?x698 ?x698) (* (- 1) (* y00 ?x268 ?x268 ?x698 ?x698)) r ?x79 (* q00 y00 y00 y00 y00 ?x698) ?x80 (* y00 ?x268))))
 (let (($x737 (not (= ?x697 0))))
 (let (($x720 (= (+ r ?x80 ?x752 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x720 $x737)))))))))) :qid k!29))
 ))
 (let ((?x282 (lambda ((q Int) (r Int) (y Int) )(let ((?x802 (* y00 y00 r00)))
 (let ((?x210 (* y00 y00 y00 q00)))
 (let ((?x81 (* y00 q00)))
 (let ((?x92 (* (- 1) ?x81)))
 (let ((?x39 (* q y00)))
 (let ((?x80 (* (- 1) r00)))
 (let ((?x1009 (+ r ?x80 ?x39 ?x92 (* r r y00 y00 r00) (* (- 1) (* r y00 y00 y00 r00)) (* r r y00 q00) (* q r r y00 q00) (* (- 2) (* r y00 y00 q00)) (* (- 2) (* q r y00 y00 q00)) ?x210 (* q y00 y00 y00 q00) (* (- 1) (* r r r)) (* (- 1) (* q r r r)) (* 2 (* r r y00)) (* q r r y00) (* (- 1) (* r y00 y00)) (* q r y00 y00) (* (- 1) (* q y00 y00 y00)) (* r r y00 y00 y00) (* q r y00 y00 y00 y00) (* (- 1) (* r r r y00 y00)) (* (- 1) (* q r r y00 y00 y00)) (* r r y00 y00 y00 q00) (* (- 1) (* r y00 y00 y00 y00 q00)) (* r r r00) (* q r r r00) (* (- 2) (* r y00 r00)) (* (- 2) (* q r y00 r00)) ?x802 (* q y00 y00 r00) (* (- 1) (* q q r r y00)) (* 2 (* q q r y00 y00)) (* (- 1) (* q q y00 y00 y00)))))
 (let (($x145 (and (= (+ y (* (- 1) y00)) 0) (= (+ r ?x80 ?x39 ?x92) 0) (not (= ?x1009 0)))))
 (let ((?x79 (* (- 1) y00)))
 (let ((?x698 (+ r ?x79)))
 (let ((?x268 (+ 1 q)))
 (let ((?x36 (* q00 y00)))
 (let ((?x752 (* (- 1) ?x36)))
 (let ((?x697 (+ (* r00 y00 y00 ?x698 ?x698) (* q00 y00 ?x268 ?x698 ?x698) (* (- 1) (* ?x268 ?x698 ?x698 ?x698)) (* r00 y00 y00 y00 ?x698) (* (- 1) (* y00 y00 y00 ?x698 ?x698)) ?x752 (* (- 1) (* y00 y00 y00 y00 ?x268 ?x698)) (* (- 1) (* y00 y00 ?x698 ?x698 ?x698)) (* (- 1) (* y00 y00 y00 ?x268 ?x698 ?x698)) (* q00 y00 y00 y00 ?x698 ?x698) (* r00 ?x268 ?x698 ?x698) (* (- 1) (* y00 ?x268 ?x268 ?x698 ?x698)) r ?x79 (* q00 y00 y00 y00 y00 ?x698) ?x80 (* y00 ?x268))))
 (let (($x737 (not (= ?x697 0))))
 (let (($x720 (= (+ r ?x80 ?x752 (* y00 q)) 0)))
 (let (($x635 (and (= (+ y00 (* (- 1) y)) 0) $x720 $x737)))
 (rewrite (= $x635 $x145))))))))))))))))))))
 ))
 (let (($x743 (exists ((q Int) (r Int) (y Int) )(! (let ((?x80 (* (- 1) r00)))
 (let ((?x79 (* (- 1) y00)))
 (let ((?x698 (+ r ?x79)))
 (let ((?x268 (+ 1 q)))
 (let ((?x36 (* q00 y00)))
 (let ((?x752 (* (- 1) ?x36)))
 (let ((?x697 (+ (* r00 y00 y00 ?x698 ?x698) (* q00 y00 ?x268 ?x698 ?x698) (* (- 1) (* ?x268 ?x698 ?x698 ?x698)) (* r00 y00 y00 y00 ?x698) (* (- 1) (* y00 y00 y00 ?x698 ?x698)) ?x752 (* (- 1) (* y00 y00 y00 y00 ?x268 ?x698)) (* (- 1) (* y00 y00 ?x698 ?x698 ?x698)) (* (- 1) (* y00 y00 y00 ?x268 ?x698 ?x698)) (* q00 y00 y00 y00 ?x698 ?x698) (* r00 ?x268 ?x698 ?x698) (* (- 1) (* y00 ?x268 ?x268 ?x698 ?x698)) r ?x79 (* q00 y00 y00 y00 y00 ?x698) ?x80 (* y00 ?x268))))
 (let (($x737 (not (= ?x697 0))))
 (let (($x720 (= (+ r ?x80 ?x752 (* y00 q)) 0)))
 (and (= (+ ?x79 y) 0) $x720 $x737)))))))))) :qid k!29))
 ))
 (let ((?x747 (lambda ((q Int) (r Int) (y Int) )(let ((?x80 (* (- 1) r00)))
 (let ((?x79 (* (- 1) y00)))
 (let ((?x698 (+ r ?x79)))
 (let ((?x268 (+ 1 q)))
 (let ((?x36 (* q00 y00)))
 (let ((?x752 (* (- 1) ?x36)))
 (let ((?x697 (+ (* r00 y00 y00 ?x698 ?x698) (* q00 y00 ?x268 ?x698 ?x698) (* (- 1) (* ?x268 ?x698 ?x698 ?x698)) (* r00 y00 y00 y00 ?x698) (* (- 1) (* y00 y00 y00 ?x698 ?x698)) ?x752 (* (- 1) (* y00 y00 y00 y00 ?x268 ?x698)) (* (- 1) (* y00 y00 ?x698 ?x698 ?x698)) (* (- 1) (* y00 y00 y00 ?x268 ?x698 ?x698)) (* q00 y00 y00 y00 ?x698 ?x698) (* r00 ?x268 ?x698 ?x698) (* (- 1) (* y00 ?x268 ?x268 ?x698 ?x698)) r ?x79 (* q00 y00 y00 y00 y00 ?x698) ?x80 (* y00 ?x268))))
 (let (($x737 (not (= ?x697 0))))
 (let (($x720 (= (+ r ?x80 ?x752 (* y00 q)) 0)))
 (let (($x635 (and (= (+ y00 (* (- 1) y)) 0) $x720 $x737)))
 (let (($x966 (and (= (+ ?x79 y) 0) $x720 $x737)))
 (rewrite (= $x966 $x635))))))))))))))
 ))
 (let (($x74 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x36 (* q00 y00)))
 (let ((?x46 (+ (* ?x42 ?x42 r00 y00 y00) (* (+ q 1) q00 ?x42 ?x42 y00))))
 (let ((?x50 (+ (- ?x46 (* (+ q 1) ?x42 ?x42 ?x42)) (* ?x42 r00 y00 y00 y00))))
 (let ((?x57 (- (- (- ?x50 (* ?x42 ?x42 y00 y00 y00)) ?x36) (* (+ q 1) ?x42 y00 y00 y00 y00))))
 (let ((?x59 (- (- ?x57 (* ?x42 ?x42 ?x42 y00 y00)) (* (+ q 1) ?x42 ?x42 y00 y00 y00))))
 (let ((?x62 (+ ?x59 (* q00 ?x42 ?x42 y00 y00 y00) (* (+ q 1) ?x42 ?x42 r00))))
 (let ((?x66 (+ (- ?x62 (* (+ q 1) (+ q 1) ?x42 ?x42 y00)) ?x42 (* q00 ?x42 y00 y00 y00 y00))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= (+ (- ?x66 r00) (* (+ q 1) y00)) 0)))))))))))) :qid k!29))
 ))
 (let ((?x732 (lambda ((q Int) (r Int) (y Int) )(let ((?x80 (* (- 1) r00)))
 (let ((?x79 (* (- 1) y00)))
 (let ((?x698 (+ r ?x79)))
 (let ((?x268 (+ 1 q)))
 (let ((?x36 (* q00 y00)))
 (let ((?x752 (* (- 1) ?x36)))
 (let ((?x697 (+ (* r00 y00 y00 ?x698 ?x698) (* q00 y00 ?x268 ?x698 ?x698) (* (- 1) (* ?x268 ?x698 ?x698 ?x698)) (* r00 y00 y00 y00 ?x698) (* (- 1) (* y00 y00 y00 ?x698 ?x698)) ?x752 (* (- 1) (* y00 y00 y00 y00 ?x268 ?x698)) (* (- 1) (* y00 y00 ?x698 ?x698 ?x698)) (* (- 1) (* y00 y00 y00 ?x268 ?x698 ?x698)) (* q00 y00 y00 y00 ?x698 ?x698) (* r00 ?x268 ?x698 ?x698) (* (- 1) (* y00 ?x268 ?x268 ?x698 ?x698)) r ?x79 (* q00 y00 y00 y00 y00 ?x698) ?x80 (* y00 ?x268))))
 (let (($x737 (not (= ?x697 0))))
 (let (($x720 (= (+ r ?x80 ?x752 (* y00 q)) 0)))
 (let (($x966 (and (= (+ ?x79 y) 0) $x720 $x737)))
 (let ((?x42 (- r y00)))
 (let ((?x46 (+ (* ?x42 ?x42 r00 y00 y00) (* (+ q 1) q00 ?x42 ?x42 y00))))
 (let ((?x50 (+ (- ?x46 (* (+ q 1) ?x42 ?x42 ?x42)) (* ?x42 r00 y00 y00 y00))))
 (let ((?x57 (- (- (- ?x50 (* ?x42 ?x42 y00 y00 y00)) ?x36) (* (+ q 1) ?x42 y00 y00 y00 y00))))
 (let ((?x59 (- (- ?x57 (* ?x42 ?x42 ?x42 y00 y00)) (* (+ q 1) ?x42 ?x42 y00 y00 y00))))
 (let ((?x62 (+ ?x59 (* q00 ?x42 ?x42 y00 y00 y00) (* (+ q 1) ?x42 ?x42 r00))))
 (let ((?x66 (+ (- ?x62 (* (+ q 1) (+ q 1) ?x42 ?x42 y00)) ?x42 (* q00 ?x42 y00 y00 y00 y00))))
 (let (($x73 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= (+ (- ?x66 r00) (* (+ q 1) y00)) 0))))))
 (rewrite (= $x73 $x966)))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x903 (mp (mp @x75 (quant-intro (proof-bind ?x732) (= $x74 $x743)) $x743) (rewrite (= $x743 $x743)) $x743)))
 (let ((@x1023 (mp (mp @x903 (quant-intro (proof-bind ?x747) (= $x743 $x281)) $x281) (quant-intro (proof-bind ?x282) (= $x281 $x90)) $x90)))
 (let ((@x977 (mp (mp~ @x1023 (sk (~ $x90 $x237)) $x237) (rewrite (= $x237 $x293)) $x293)))
 (let ((@x220 (and-elim @x977 $x659)))
 (let ((@x689 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x659) $x581)) @x220 $x581)))
 (let (($x585 (>= ?x657 0)))
 (let ((@x613 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x659) $x585)) @x220 $x585)))
 (let (($x396 (<= ?x376 0)))
 (let ((@x978 (and-elim @x977 $x377)))
 (let ((@x524 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x377) $x396)) @x978 $x396)))
 (let (($x219 (>= ?x376 0)))
 (let ((@x769 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x377) $x219)) @x978 $x219)))
 (let (($x980 (not (<= ?x531 0))))
 (let (($x458 (>= ?x531 0)))
 (let ((@x499 ((_ th-lemma arith) (hypothesis (not $x458)) @x613 @x689 @x769 @x524 @x613 @x689 false)))
 (let ((@x768 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x964 $x980 (not $x458))) (and-elim @x977 $x976) (or $x980 (not $x458)))))
 ((_ th-lemma arith) (unit-resolution @x768 (lemma @x499 $x458) $x980) @x613 @x689 @x769 @x524 @x613 @x689 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        4
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-grobner             2
 :arith-max-min             148
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-pivots              3
 :arith-row-summations      1
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.71
 :memory                    3.20
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1224175
 :num-checks                1
 :propagations              6
 :rlimit-count              4069
 :time                      0.01
 :total-time                0.01)
