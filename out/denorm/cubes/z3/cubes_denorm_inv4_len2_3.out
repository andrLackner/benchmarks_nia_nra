unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x457 (* n!0 n!0)))
 (let ((?x476 (* 3 ?x457)))
 (let ((?x157 (* (- 1) k!2)))
 (let ((?x235 (+ (* 3 n!0) ?x157 ?x476)))
 (let (($x286 (<= ?x235 (- 1))))
 (let (($x237 (= ?x235 (- 1))))
 (let ((?x572 (* (- 36) c!3)))
 (let ((?x520 (* (- 42) k!2)))
 (let ((?x573 (* (- 6) m!1)))
 (let ((?x110 (* (- 1) (* m!1 m!1))))
 (let ((?x511 (+ ?x110 (* (- 6) (* n!0 n!0 n!0 m!1)) (* (- 3) (* n!0 m!1 m!1)) (* (- 18) (* n!0 n!0 k!2)) (* (- 18) (* n!0 n!0 m!1)) (* (- 3) (* n!0 n!0 m!1 k!2)) (* (- 3) (* n!0 n!0 m!1 m!1)) (* (- 12) (* m!1 c!3)) (* (- 6) (* n!0 n!0 n!0 k!2)) (* (- 1) (* m!1 m!1 k!2)) (* (- 1) (* n!0 n!0 n!0 m!1 k!2)) (* (- 1) (* n!0 n!0 n!0 m!1 m!1)) (* (- 13) (* m!1 k!2)) (* (- 18) (* n!0 m!1)) (* (- 18) (* n!0 k!2)) ?x573 ?x520 ?x572 (* (- 1) (* m!1 m!1 c!3)) (* (- 3) (* n!0 m!1 k!2)))))
 (let ((?x410 (* ?x511 (+ 7 (* 9 n!0) (* (- 1) m!1) ?x157 ?x476))))
 (let (($x266 (= ?x410 0)))
 (let (($x489 (not $x266)))
 (let ((?x356 (* k!2 k!2)))
 (let ((?x473 (* 9 n!0)))
 (let ((?x412 (+ ?x473 (* (- 5) k!2) (* (- 18) c!3) ?x356 (* (- 9) (* n!0 c!3)))))
 (let ((?x150 (* (- 1) m!1)))
 (let ((?x377 (+ (* 6 n!0) ?x150)))
 (let (($x189 (= ?x377 (- 6))))
 (let (($x268 (and $x189 (= ?x412 (- 4)) (= (+ (* n!0 k!2) (* 2 n!0) ?x157 (* (- 3) c!3)) (- 1)) $x237 $x489)))
 (let ((?x181 (+ ?x572 ?x520 ?x573 (* (- 18) (* k!2 n!0)) (* (- 1) (* c!3 m!1 m!1)) (* (- 1) (* k!2 m!1 m!1)) (* (- 1) (* k!2 m!1 n!0 n!0 n!0)) (* (- 1) (* m!1 m!1 n!0 n!0 n!0)) (* (- 13) (* k!2 m!1)) ?x110 (* (- 18) (* m!1 n!0)) (* (- 3) (* k!2 m!1 n!0)) (* (- 3) (* m!1 m!1 n!0)) (* (- 18) (* k!2 n!0 n!0)) (* (- 18) (* m!1 n!0 n!0)) (* (- 3) (* k!2 m!1 n!0 n!0)) (* (- 3) (* m!1 m!1 n!0 n!0)) (* (- 12) (* c!3 m!1)) (* (- 6) (* k!2 n!0 n!0 n!0)) (* (- 6) (* m!1 n!0 n!0 n!0)))))
 (let (($x545 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x524 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x356) (* 9 (* c!3 n!0)))))
 (let (($x178 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x524 4) $x545 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x457)) 1) (not (= (* ?x181 (+ 7 ?x157 ?x150 ?x473 ?x476)) 0)))))
 (let (($x107 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x613 (* (- 6) (* m n n n))))
 (let ((?x610 (* (- 6) (* k n n n))))
 (let ((?x607 (* (- 3) (* m m n n))))
 (let ((?x604 (* (- 3) (* k m n n))))
 (let ((?x601 (* (- 18) (* m n n))))
 (let ((?x598 (* (- 18) (* k n n))))
 (let ((?x595 (* (- 3) (* m m n))))
 (let ((?x592 (* (- 3) (* k m n))))
 (let ((?x589 (* (- 18) (* m n))))
 (let ((?x567 (* (- 1) (* m m))))
 (let ((?x565 (* (- 1) (* m m n n n))))
 (let ((?x564 (* (- 1) (* k m n n n))))
 (let ((?x409 (* (- 1) (* k m m))))
 (let ((?x407 (* (- 1) (* c m m))))
 (let ((?x55 (* k n)))
 (let ((?x586 (* (- 18) ?x55)))
 (let ((?x583 (* (- 6) m)))
 (let ((?x96 (+ (* (- 36) c) (* (- 42) k) ?x583 ?x586 ?x407 ?x409 ?x564 ?x565 (* (- 13) (* k m)) ?x567 ?x589 ?x592 ?x595 ?x598 ?x601 ?x604 ?x607 (* (- 12) (* c m)) ?x610 ?x613)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* ?x96 (+ 7 ?x233 ?x349 ?x48 ?x265)) 0))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x104 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x140 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x271 (+ 6 m)))
 (let ((?x525 (+ 1 n)))
 (let ((?x300 (+ (* (- 1) (* ?x271 ?x271 (+ c k))) (* (- 1) (* ?x525 ?x525 ?x525 ?x271 ?x71)))))
 (let (($x548 (not (= (* ?x300 ?x140) 0))))
 (let (($x444 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let (($x106 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x106 $x444 $x548)))))))))))))))))) :qid k!34))
 ))
 (let ((?x418 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x613 (* (- 6) (* m n n n))))
 (let ((?x610 (* (- 6) (* k n n n))))
 (let ((?x607 (* (- 3) (* m m n n))))
 (let ((?x604 (* (- 3) (* k m n n))))
 (let ((?x601 (* (- 18) (* m n n))))
 (let ((?x598 (* (- 18) (* k n n))))
 (let ((?x595 (* (- 3) (* m m n))))
 (let ((?x592 (* (- 3) (* k m n))))
 (let ((?x589 (* (- 18) (* m n))))
 (let ((?x567 (* (- 1) (* m m))))
 (let ((?x565 (* (- 1) (* m m n n n))))
 (let ((?x564 (* (- 1) (* k m n n n))))
 (let ((?x409 (* (- 1) (* k m m))))
 (let ((?x407 (* (- 1) (* c m m))))
 (let ((?x55 (* k n)))
 (let ((?x586 (* (- 18) ?x55)))
 (let ((?x583 (* (- 6) m)))
 (let ((?x96 (+ (* (- 36) c) (* (- 42) k) ?x583 ?x586 ?x407 ?x409 ?x564 ?x565 (* (- 13) (* k m)) ?x567 ?x589 ?x592 ?x595 ?x598 ?x601 ?x604 ?x607 (* (- 12) (* c m)) ?x610 ?x613)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x202 (and $x119 $x203 $x255 $x293 (not (= (* ?x96 (+ 7 ?x233 ?x349 ?x48 ?x265)) 0)))))
 (let ((?x65 (* 3 n)))
 (let ((?x140 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x271 (+ 6 m)))
 (let ((?x525 (+ 1 n)))
 (let ((?x300 (+ (* (- 1) (* ?x271 ?x271 (+ c k))) (* (- 1) (* ?x525 ?x525 ?x525 ?x271 ?x71)))))
 (let (($x548 (not (= (* ?x300 ?x140) 0))))
 (let (($x444 (= (+ ?x265 ?x233 ?x65) (- 1))))
 (let (($x106 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x471 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x106 $x444 $x548)))
 (rewrite (= $x471 $x202))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x343 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x140 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x271 (+ 6 m)))
 (let ((?x525 (+ 1 n)))
 (let ((?x300 (+ (* (- 1) (* ?x271 ?x271 (+ c k))) (* (- 1) (* ?x525 ?x525 ?x525 ?x271 ?x71)))))
 (let (($x548 (not (= (* ?x300 ?x140) 0))))
 (let (($x444 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x160 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x160 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x444 $x548))))))))))))))) :qid k!34))
 ))
 (let ((?x94 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x140 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x271 (+ 6 m)))
 (let ((?x525 (+ 1 n)))
 (let ((?x300 (+ (* (- 1) (* ?x271 ?x271 (+ c k))) (* (- 1) (* ?x525 ?x525 ?x525 ?x271 ?x71)))))
 (let (($x548 (not (= (* ?x300 ?x140) 0))))
 (let (($x444 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let (($x106 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x471 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x106 $x444 $x548)))
 (let ((?x48 (* 9 n)))
 (let ((?x160 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x350 (and $x119 (= ?x160 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x444 $x548)))
 (rewrite (= $x350 $x471))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x80 (- (* (- 1) (+ c k) ?x77 ?x77) (* ?x71 ?x77 ?x68 ?x68 ?x68))))
 (let (($x82 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82))))))))))))))) :qid k!34))
 ))
 (let ((?x447 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x140 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x271 (+ 6 m)))
 (let ((?x525 (+ 1 n)))
 (let ((?x300 (+ (* (- 1) (* ?x271 ?x271 (+ c k))) (* (- 1) (* ?x525 ?x525 ?x525 ?x271 ?x71)))))
 (let (($x548 (not (= (* ?x300 ?x140) 0))))
 (let (($x444 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x160 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x350 (and $x119 (= ?x160 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x444 $x548)))
 (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x80 (- (* (- 1) (+ c k) ?x77 ?x77) (* ?x71 ?x77 ?x68 ?x68 ?x68))))
 (let (($x82 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x82)))))
 (rewrite (= $x85 $x350)))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x320 (mp (mp @x87 (quant-intro (proof-bind ?x447) (= $x86 $x343)) $x343) (rewrite (= $x343 $x343)) $x343)))
 (let ((@x308 (mp (mp @x320 (quant-intro (proof-bind ?x94) (= $x343 $x104)) $x104) (quant-intro (proof-bind ?x418) (= $x104 $x107)) $x107)))
 (let ((@x546 (mp (mp~ @x308 (sk (~ $x107 $x178)) $x178) (rewrite (= $x178 $x268)) $x268)))
 (let ((@x430 (and-elim @x546 $x237)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x237) $x286)) @x430 $x286)))
 (let (($x292 (<= ?x377 (- 6))))
 (let ((@x249 (and-elim @x546 $x189)))
 (let ((@x270 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x292)) @x249 $x292)))
 (let (($x285 (>= ?x235 (- 1))))
 (let ((@x223 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x237) $x285)) @x430 $x285)))
 (let (($x291 (>= ?x377 (- 6))))
 (let ((@x426 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x291)) @x249 $x291)))
 (let (($x311 (not (<= ?x410 0))))
 (let (($x283 (>= ?x410 0)))
 (let ((@x540 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x283)) @x426 @x223 @x270 @x238 false) $x283)))
 (let ((@x427 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x266 $x311 (not $x283))) (and-elim @x546 $x489) (or $x311 (not $x283)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x427 @x540 $x311) @x426 @x223 @x270 @x238 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        20
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             103
 :arith-nonlinear-bounds    21
 :arith-num-rows            6
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      4
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    6
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.61
 :memory                    3.14
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1094120
 :num-checks                1
 :propagations              10
 :rlimit-count              3417
 :time                      0.01
 :total-time                0.01)
