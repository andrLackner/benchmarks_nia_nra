unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x308 (* (- 1) (* k!2 m!1 m!1))))
 (let ((?x671 (* k!2 n!0)))
 (let ((?x185 (* (- 72) ?x671)))
 (let ((?x607 (* (- 12) (* m!1 m!1 n!0 n!0))))
 (let ((?x187 (* (- 24) (* m!1 m!1 n!0))))
 (let ((?x184 (* (- 36) m!1)))
 (let ((?x191 (* (- 36) (* k!2 n!0 n!0))))
 (let ((?x457 (* (- 1) (* m!1 m!1 m!1))))
 (let ((?x384 (* (- 36) k!2)))
 (let ((?x768 (* (- 1) (* m!1 m!1 m!1 n!0 n!0))))
 (let ((?x158 (* (- 1) (* c!3 c!3 c!3 m!1 m!1))))
 (let ((?x151 (* (- 2) (* k!2 k!2 k!2 k!2 m!1))))
 (let ((?x195 (* m!1 m!1)))
 (let ((?x681 (* (- 12) ?x195)))
 (let ((?x97 (* (- 12) (* k!2 m!1 n!0 n!0))))
 (let ((?x660 (* (- 36) (* m!1 n!0 n!0))))
 (let ((?x190 (* (- 2) (* m!1 m!1 m!1 n!0))))
 (let ((?x585 (* (- 2) (* k!2 m!1 m!1 n!0))))
 (let ((?x675 (* (- 24) (* k!2 m!1 n!0))))
 (let ((?x646 (* (- 72) (* m!1 n!0))))
 (let ((?x212 (* (- 1) (* k!2 m!1 m!1 n!0 n!0))))
 (let ((?x199 (* (- 1) (* k!2 k!2 k!2 k!2 k!2))))
 (let ((?x208 (* (- 1) (* k!2 k!2 k!2 m!1 m!1))))
 (let ((?x108 (* k!2 m!1)))
 (let ((?x690 (* (- 12) ?x108)))
 (let ((?x430 (+ ?x690 ?x208 ?x199 ?x212 ?x646 ?x675 ?x585 ?x190 ?x660 ?x97 ?x681 ?x151 ?x158 ?x768 (* (- 2) (* k!2 c!3 c!3 c!3 m!1)) ?x384 ?x457 ?x191 ?x184 (* (- 3) (* k!2 k!2 k!2 c!3 c!3)) (* (- 3) (* k!2 k!2 c!3 m!1 m!1)) ?x187 ?x607 ?x185 (* (- 3) (* k!2 k!2 k!2 k!2 c!3)) (* (- 6) (* k!2 k!2 k!2 c!3 m!1)) (* (- 1) (* k!2 k!2 c!3 c!3 c!3)) (* (- 6) (* k!2 k!2 c!3 c!3 m!1)) (* (- 3) (* k!2 c!3 c!3 m!1 m!1)) ?x308)))
 (let (($x2512 (<= ?x430 0)))
 (let ((?x733 (* (- 1) ?x671)))
 (let ((?x722 (* (- 2) n!0)))
 (let ((?x309 (* 3 c!3)))
 (let ((?x223 (+ k!2 ?x309 ?x722 ?x733)))
 (let (($x373 (<= ?x223 1)))
 (let (($x164 (= ?x223 1)))
 (let ((?x788 (* k!2 k!2)))
 (let ((?x738 (* (- 9) ?x671)))
 (let ((?x559 (* 9 n!0)))
 (let ((?x243 (* (- 5) m!1)))
 (let ((?x431 (* (- 27) c!3)))
 (let ((?x238 (* (- 32) k!2)))
 (let ((?x140 (* c!3 n!0)))
 (let ((?x777 (* (- 9) ?x140)))
 (let ((?x560 (* 2 ?x108)))
 (let ((?x437 (* ?x430 (+ 13 ?x560 ?x777 ?x195 ?x238 ?x431 ?x243 ?x559 ?x738 ?x788))))
 (let (($x439 (= ?x437 0)))
 (let (($x440 (not $x439)))
 (let ((?x436 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x370 (= ?x436 (- 1))))
 (let ((?x340 (* (- 1) ?x788)))
 (let ((?x692 (* (- 9) n!0)))
 (let ((?x654 (* 18 c!3)))
 (let ((?x655 (* 5 k!2)))
 (let ((?x177 (* 9 ?x140)))
 (let ((?x323 (+ ?x177 ?x655 ?x654 ?x692 ?x340)))
 (let (($x409 (= ?x323 4)))
 (let ((?x139 (+ m!1 (* (- 6) n!0))))
 (let (($x337 (= ?x139 6)))
 (let (($x237 (and $x337 $x409 $x164 $x370 $x440)))
 (let ((?x608 (+ ?x384 ?x184 ?x185 ?x690 ?x681 (* (- 1) (* c!3 c!3 c!3 k!2 k!2)) (* (- 3) (* c!3 c!3 k!2 k!2 k!2)) (* (- 3) (* c!3 k!2 k!2 k!2 k!2)) ?x199 (* (- 2) (* c!3 c!3 c!3 k!2 m!1)) (* (- 6) (* c!3 c!3 k!2 k!2 m!1)) (* (- 6) (* c!3 k!2 k!2 k!2 m!1)) ?x151 ?x158 (* (- 3) (* c!3 c!3 k!2 m!1 m!1)) (* (- 3) (* c!3 k!2 k!2 m!1 m!1)) ?x208 ?x212 ?x768 ?x308 ?x457 ?x646 ?x675 ?x187 ?x585 ?x190 ?x191 ?x660 ?x97 ?x607)))
 (let (($x561 (= (* ?x608 (+ 13 ?x431 ?x238 ?x243 ?x559 ?x788 ?x738 ?x777 ?x560 ?x195)) 0)))
 (let (($x226 (and $x337 (= (+ ?x654 ?x655 ?x692 ?x340 ?x177) 4) (= (+ ?x309 k!2 ?x722 ?x733) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x561))))
 (let (($x652 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x459 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x480 (+ 13 (* (- 27) c) (* (- 32) k) ?x425 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x459)))
 (let ((?x782 (* (- 12) (* m m n n))))
 (let ((?x779 (* (- 12) (* k m n n))))
 (let ((?x776 (* (- 36) (* m n n))))
 (let ((?x773 (* (- 36) (* k n n))))
 (let ((?x770 (* (- 2) (* m m m n))))
 (let ((?x767 (* (- 2) (* k m m n))))
 (let ((?x764 (* (- 24) (* m m n))))
 (let ((?x761 (* (- 24) (* k m n))))
 (let ((?x757 (* (- 72) (* m n))))
 (let ((?x726 (* (- 1) (* m m m))))
 (let ((?x725 (* (- 1) (* k m m))))
 (let ((?x724 (* (- 1) (* m m m n n))))
 (let ((?x723 (* (- 1) (* k m m n n))))
 (let ((?x553 (* (- 1) (* k k k m m))))
 (let ((?x539 (* (- 1) (* c c c m m))))
 (let ((?x505 (* (- 1) (* k k k k k))))
 (let ((?x491 (* (- 1) (* c c c k k))))
 (let ((?x754 (* (- 12) ?x459)))
 (let ((?x458 (* k m)))
 (let ((?x751 (* (- 12) ?x458)))
 (let ((?x55 (* k n)))
 (let ((?x747 (* (- 72) ?x55)))
 (let ((?x743 (* (- 36) m)))
 (let ((?x740 (* (- 36) k)))
 (let ((?x711 (+ ?x740 ?x743 ?x747 ?x751 ?x754 ?x491 (* (- 3) (* c c k k k)) (* (- 3) (* c k k k k)) ?x505 (* (- 2) (* c c c k m)) (* (- 6) (* c c k k m)) (* (- 6) (* c k k k m)) (* (- 2) (* k k k k m)) ?x539 (* (- 3) (* c c k m m)) (* (- 3) (* c k k m m)) ?x553 ?x723 ?x724 ?x725 ?x726 ?x757 ?x761 ?x764 ?x767 ?x770 ?x773 ?x776 ?x779 ?x782)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x711 ?x480) 0))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x393 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x327 (* (- 18) c)))
 (let ((?x594 (+ 13 ?x327 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x275 (+ 6 m)))
 (let ((?x566 (+ 1 n)))
 (let ((?x291 (+ (* (- 1) (* ?x72 ?x72 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x566 ?x566 ?x275 ?x275 ?x72)))))
 (let (($x244 (not (= (* ?x291 ?x594) 0))))
 (let (($x471 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x312 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x312 $x471 $x244))))))))))))))))))) :qid k!34))
 ))
 (let ((?x631 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x459 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x480 (+ 13 (* (- 27) c) (* (- 32) k) ?x425 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x459)))
 (let ((?x782 (* (- 12) (* m m n n))))
 (let ((?x779 (* (- 12) (* k m n n))))
 (let ((?x776 (* (- 36) (* m n n))))
 (let ((?x773 (* (- 36) (* k n n))))
 (let ((?x770 (* (- 2) (* m m m n))))
 (let ((?x767 (* (- 2) (* k m m n))))
 (let ((?x764 (* (- 24) (* m m n))))
 (let ((?x761 (* (- 24) (* k m n))))
 (let ((?x757 (* (- 72) (* m n))))
 (let ((?x726 (* (- 1) (* m m m))))
 (let ((?x725 (* (- 1) (* k m m))))
 (let ((?x724 (* (- 1) (* m m m n n))))
 (let ((?x723 (* (- 1) (* k m m n n))))
 (let ((?x553 (* (- 1) (* k k k m m))))
 (let ((?x539 (* (- 1) (* c c c m m))))
 (let ((?x505 (* (- 1) (* k k k k k))))
 (let ((?x491 (* (- 1) (* c c c k k))))
 (let ((?x754 (* (- 12) ?x459)))
 (let ((?x458 (* k m)))
 (let ((?x751 (* (- 12) ?x458)))
 (let ((?x55 (* k n)))
 (let ((?x747 (* (- 72) ?x55)))
 (let ((?x743 (* (- 36) m)))
 (let ((?x740 (* (- 36) k)))
 (let ((?x711 (+ ?x740 ?x743 ?x747 ?x751 ?x754 ?x491 (* (- 3) (* c c k k k)) (* (- 3) (* c k k k k)) ?x505 (* (- 2) (* c c c k m)) (* (- 6) (* c c k k m)) (* (- 6) (* c k k k m)) (* (- 2) (* k k k k m)) ?x539 (* (- 3) (* c c k m m)) (* (- 3) (* c k k m m)) ?x553 ?x723 ?x724 ?x725 ?x726 ?x757 ?x761 ?x764 ?x767 ?x770 ?x773 ?x776 ?x779 ?x782)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x125 (and $x123 $x207 $x259 $x297 (not (= (* ?x711 ?x480) 0)))))
 (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x327 (* (- 18) c)))
 (let ((?x594 (+ 13 ?x327 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x275 (+ 6 m)))
 (let ((?x566 (+ 1 n)))
 (let ((?x291 (+ (* (- 1) (* ?x72 ?x72 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x566 ?x566 ?x275 ?x275 ?x72)))))
 (let (($x244 (not (= (* ?x291 ?x594) 0))))
 (let (($x471 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x312 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x656 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x312 $x471 $x244)))
 (rewrite (= $x656 $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x245 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x327 (* (- 18) c)))
 (let ((?x594 (+ 13 ?x327 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x275 (+ 6 m)))
 (let ((?x566 (+ 1 n)))
 (let ((?x291 (+ (* (- 1) (* ?x72 ?x72 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x566 ?x566 ?x275 ?x275 ?x72)))))
 (let (($x244 (not (= (* ?x291 ?x594) 0))))
 (let (($x471 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x143 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x153 (= (+ ?x327 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x153 $x143 $x471 $x244))))))))))))))) :qid k!34))
 ))
 (let ((?x394 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x327 (* (- 18) c)))
 (let ((?x594 (+ 13 ?x327 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x275 (+ 6 m)))
 (let ((?x566 (+ 1 n)))
 (let ((?x291 (+ (* (- 1) (* ?x72 ?x72 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x566 ?x566 ?x275 ?x275 ?x72)))))
 (let (($x244 (not (= (* ?x291 ?x594) 0))))
 (let (($x471 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x312 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x656 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x312 $x471 $x244)))
 (let (($x143 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x153 (= (+ ?x327 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x781 (and $x123 $x153 $x143 $x471 $x244)))
 (rewrite (= $x781 $x656)))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x82 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x84 (- (* (- 1) (+ c k) (+ c k) (+ c k) ?x72 ?x72) (* ?x72 ?x82 ?x82 ?x70 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x75 (- (- (* 4 1) (* 18 (+ c k))) (* 9 (+ c k) ?x70))))
 (let (($x87 (not (= (* (+ (- ?x75 (* 5 ?x72)) (* 9 ?x70) ?x78) ?x84) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x87)))))))))))))))) :qid k!34))
 ))
 (let ((?x712 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x327 (* (- 18) c)))
 (let ((?x594 (+ 13 ?x327 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x275 (+ 6 m)))
 (let ((?x566 (+ 1 n)))
 (let ((?x291 (+ (* (- 1) (* ?x72 ?x72 (+ c k) (+ c k) (+ c k))) (* (- 1) (* ?x566 ?x566 ?x275 ?x275 ?x72)))))
 (let (($x244 (not (= (* ?x291 ?x594) 0))))
 (let (($x471 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x143 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x153 (= (+ ?x327 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x781 (and $x123 $x153 $x143 $x471 $x244)))
 (let ((?x70 (+ n 1)))
 (let ((?x82 (+ m 6)))
 (let ((?x84 (- (* (- 1) (+ c k) (+ c k) (+ c k) ?x72 ?x72) (* ?x72 ?x82 ?x82 ?x70 ?x70))))
 (let ((?x75 (- (- (* 4 1) (* 18 (+ c k))) (* 9 (+ c k) ?x70))))
 (let (($x87 (not (= (* (+ (- ?x75 (* 5 ?x72)) (* 9 ?x70) ?x78) ?x84) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x87))))
 (rewrite (= $x89 $x781))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x680 (mp (mp @x91 (quant-intro (proof-bind ?x712) (= $x90 $x245)) $x245) (rewrite (= $x245 $x245)) $x245)))
 (let ((@x429 (mp (mp @x680 (quant-intro (proof-bind ?x394) (= $x245 $x393)) $x393) (quant-intro (proof-bind ?x631) (= $x393 $x652)) $x652)))
 (let ((@x786 (mp (mp~ @x429 (sk (~ $x652 $x226)) $x226) (rewrite (= $x226 $x237)) $x237)))
 (let ((@x154 (and-elim @x786 $x164)))
 (let ((@x395 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x373)) @x154 $x373)))
 (let (($x115 (>= ?x223 1)))
 (let ((@x438 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x115)) @x154 $x115)))
 (let (($x326 (<= ?x323 4)))
 (let ((@x224 (and-elim @x786 $x409)))
 (let ((@x381 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x409) $x326)) @x224 $x326)))
 (let (($x574 (>= ?x323 4)))
 (let ((@x281 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x409) $x574)) @x224 $x574)))
 (let (($x575 (<= ?x139 6)))
 (let ((@x696 (and-elim @x786 $x337)))
 (let ((@x218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x337) $x575)) @x696 $x575)))
 (let (($x329 (>= ?x139 6)))
 (let ((@x235 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x337) $x329)) @x696 $x329)))
 (let (($x620 (<= ?x436 (- 1))))
 (let ((@x348 (and-elim @x786 $x370)))
 (let ((@x231 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x370) $x620)) @x348 $x620)))
 (let (($x699 (>= ?x436 (- 1))))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x370) $x699)) @x348 $x699)))
 (let ((@x2475 (hypothesis (not $x2512))))
 (let (($x2398 (not (>= ?x437 0))))
 (let (($x730 (<= ?x437 0)))
 (let (($x240 (not $x730)))
 (let ((@x241 (hypothesis $x240)))
 (let ((@x2634 ((_ th-lemma arith) @x241 @x2475 @x438 @x395 @x281 @x381 @x332 @x231 @x438 @x395 @x281 @x381 @x235 @x218 @x281 @x381 @x438 @x395 @x281 @x381 @x235 @x218 @x438 @x395 false)))
 (let (($x2522 (>= ?x430 0)))
 (let ((@x2624 (hypothesis (not $x2522))))
 (let ((@x2493 ((_ th-lemma arith) @x241 @x2624 @x438 @x395 @x332 @x231 @x235 @x218 @x235 @x218 @x438 @x395 @x281 @x381 false)))
 (let ((@x2473 ((_ th-lemma arith farkas 1 1 1) @x241 (unit-resolution (lemma @x2493 (or $x2522 $x730)) @x241 $x2522) (unit-resolution (lemma @x2634 (or $x2512 $x730)) @x241 $x2512) false)))
 (let ((@x606 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x439 $x240 $x2398)) (and-elim @x786 $x440) (or $x240 $x2398))))
 (let ((@x466 (unit-resolution @x606 (lemma @x2473 $x730) $x2398)))
 (let ((@x2603 ((_ th-lemma arith) @x466 @x2475 @x281 @x381 @x438 @x395 @x235 @x218 @x332 @x231 @x332 @x231 @x281 @x381 @x281 @x381 @x235 @x218 @x281 @x381 @x438 @x395 false)))
 (let ((@x2656 ((_ th-lemma arith) @x466 @x2624 @x281 @x381 @x281 @x381 @x438 @x395 @x281 @x381 @x235 @x218 @x332 @x231 @x281 @x381 @x235 @x218 @x281 @x381 @x438 @x395 false)))
 ((_ th-lemma arith farkas 1 1 1) @x466 (lemma @x2656 $x2522) (lemma @x2603 $x2512) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 515
 :arith-assert-diseq        24
 :arith-assert-lower        3643
 :arith-assert-upper        2391
 :arith-bound-prop          28
 :arith-branch-var          78
 :arith-conflicts           97
 :arith-eq-adapter          25
 :arith-fixed-eqs           608
 :arith-gcd-tests           1057
 :arith-gomory-cuts         60
 :arith-grobner             135
 :arith-ineq-splits         78
 :arith-max-min             16845
 :arith-nonlinear-bounds    1242
 :arith-nonlinear-horner    1246
 :arith-num-rows            30
 :arith-offset-eqs          55
 :arith-patches             170
 :arith-patches_succ        14
 :arith-pivots              2724
 :arith-pseudo-nonlinear    639
 :arith-row-summations      23116
 :arith-tableau-max-columns 103
 :arith-tableau-max-rows    30
 :conflicts                 108
 :decisions                 681
 :del-clause                441
 :final-checks              470
 :max-memory                4.87
 :memory                    3.38
 :minimized-lits            18
 :mk-bool-var               750
 :mk-clause                 710
 :num-allocs                2592952657
 :num-checks                1
 :propagations              1146
 :restarts                  1
 :rlimit-count              5629601
 :time                      6.08
 :total-time                6.07)
