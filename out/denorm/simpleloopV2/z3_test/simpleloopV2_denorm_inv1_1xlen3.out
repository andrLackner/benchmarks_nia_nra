unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x707 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x748 (>= ?x707 0)))
 (let (($x517 (= ?x707 0)))
 (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x846 (+ ?x66 ?x73 y!0 x!1)))
 (let ((?x385 (* (- 1) (* y!0 y!0 y!0 x!1 x!1))))
 (let ((?x272 (* (- 1) (* y!0 y!0 y!0))))
 (let ((?x822 (* y!0 y!0)))
 (let ((?x835 (* 3 ?x822)))
 (let ((?x618 (* x!1 x!1 x!1)))
 (let ((?x561 (* 6 (* y!0 y!0 x!1))))
 (let ((?x764 (* 7 x!1)))
 (let ((?x824 (* (- 4) y!0)))
 (let ((?x544 (* (- 1) (* y!0 x!1 x!1 x!1))))
 (let ((?x374 (* x!1 x!1)))
 (let ((?x838 (* 5 ?x374)))
 (let ((?x235 (+ 3 (* (- 6) (* y!0 x!1 x!1)) (* 3 (* y!0 y!0 x!1 x!1)) ?x838 ?x544 ?x824 ?x764 ?x561 (* (- 9) (* y!0 x!1)) ?x618 (* (- 2) (* y!0 y!0 y!0 x!1)) ?x835 ?x272 ?x385)))
 (let ((?x151 (* ?x235 ?x846)))
 (let (($x587 (= ?x151 0)))
 (let (($x148 (not $x587)))
 (let ((?x831 (* (- 3) ?x822)))
 (let ((?x608 (* (- 1) ?x618)))
 (let ((?x281 (* (- 3) x!1)))
 (let ((?x282 (* (- 2) y!0)))
 (let ((?x375 (* 3 ?x374)))
 (let ((?x559 (+ 1 (* (- 3) (* y!0 y!0 x!1 x!1)) ?x375 ?x544 ?x282 ?x281 ?x561 (* 3 (* y!0 x!1)) ?x608 (* 2 (* y!0 y!0 y!0 x!1)) ?x831 ?x272 ?x385)))
 (let ((?x550 (* ?x559 ?x846)))
 (let (($x229 (= ?x550 0)))
 (let (($x543 (or (not $x229) $x148)))
 (let (($x179 (and $x517 $x543)))
 (let ((?x588 (+ x!1 y!0 ?x66 ?x73)))
 (let ((?x607 (* (- 1) (* x!1 x!1 x!1 y!0))))
 (let ((?x613 (* 6 (* x!1 y!0 y!0))))
 (let ((?x594 (* (- 1) (* x!1 x!1 y!0 y!0 y!0))))
 (let ((?x620 (+ 3 ?x764 ?x824 ?x835 ?x272 (* (- 2) (* x!1 y!0 y!0 y!0)) ?x594 (* 3 (* x!1 x!1 y!0 y!0)) (* (- 9) (* x!1 y!0)) ?x613 (* (- 6) (* x!1 x!1 y!0)) ?x607 ?x838 ?x618)))
 (let ((?x418 (+ 1 ?x281 ?x282 ?x831 ?x272 (* 2 (* x!1 y!0 y!0 y!0)) ?x594 (* (- 3) (* x!1 x!1 y!0 y!0)) (* 3 (* x!1 y!0)) ?x613 ?x607 ?x375 ?x608)))
 (let (($x842 (and (= ?x588 0) (or (not (= (* ?x418 ?x588) 0)) (not (= (* ?x620 ?x588) 0))))))
 (let (($x673 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x323 (* x x x)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x243 (* x y y)))
 (let ((?x292 (* 6 ?x243)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x212 (* (- 1) (* y y y))))
 (let ((?x879 (+ 3 (* 7 x) (* (- 4) y) (* 3 (* y y)) ?x212 (* (- 2) (* x y y y)) ?x221 (* 3 (* x x y y)) (* (- 9) (* x y)) ?x292 (* (- 6) (* x x y)) ?x368 (* 5 (* x x)) ?x323)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x200 (* y y)))
 (let ((?x269 (* (- 3) ?x200)))
 (let ((?x413 (* (- 2) y)))
 (let ((?x76 (+ 1 (* (- 3) x) ?x413 ?x269 ?x212 (* 2 (* x y y y)) ?x221 (* (- 3) (* x x y y)) (* 3 (* x y)) ?x292 ?x368 (* 3 (* x x)) ?x370)))
 (let (($x92 (= ?x87 0)))
 (and $x92 (or (not (= (* ?x76 ?x87) 0)) (not (= (* ?x879 ?x87) 0)))))))))))))))))))) :qid k!27))
 ))
 (let (($x527 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x545 (+ x ?x66 ?x73 y)))
 (let ((?x181 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x240 (+ 1 x)))
 (let ((?x228 (+ (- 1) y)))
 (let ((?x254 (* (+ (* (- 1) (* ?x228 ?x228 ?x228 ?x240 ?x240)) ?x181 (* ?x240 ?x240)) ?x545)))
 (let ((?x140 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x585 (+ 1 y)))
 (let ((?x424 (+ (- 1) x)))
 (let ((?x237 (* (+ (* (- 1) (* ?x424 ?x424 ?x585 ?x585 ?x585)) ?x140 (* ?x424 ?x424)) ?x545)))
 (and (= ?x545 0) (or (not (= ?x237 0)) (not (= ?x254 0))))))))))))))) :qid k!27))
 ))
 (let ((?x675 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x323 (* x x x)))
 (let ((?x368 (* (- 1) (* x x x y))))
 (let ((?x243 (* x y y)))
 (let ((?x292 (* 6 ?x243)))
 (let ((?x221 (* (- 1) (* x x y y y))))
 (let ((?x212 (* (- 1) (* y y y))))
 (let ((?x879 (+ 3 (* 7 x) (* (- 4) y) (* 3 (* y y)) ?x212 (* (- 2) (* x y y y)) ?x221 (* 3 (* x x y y)) (* (- 9) (* x y)) ?x292 (* (- 6) (* x x y)) ?x368 (* 5 (* x x)) ?x323)))
 (let ((?x370 (* (- 1) ?x323)))
 (let ((?x200 (* y y)))
 (let ((?x269 (* (- 3) ?x200)))
 (let ((?x413 (* (- 2) y)))
 (let ((?x76 (+ 1 (* (- 3) x) ?x413 ?x269 ?x212 (* 2 (* x y y y)) ?x221 (* (- 3) (* x x y y)) (* 3 (* x y)) ?x292 ?x368 (* 3 (* x x)) ?x370)))
 (let (($x92 (= ?x87 0)))
 (let (($x905 (and $x92 (or (not (= (* ?x76 ?x87) 0)) (not (= (* ?x879 ?x87) 0))))))
 (let ((?x545 (+ x ?x66 ?x73 y)))
 (let ((?x181 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x240 (+ 1 x)))
 (let ((?x228 (+ (- 1) y)))
 (let ((?x254 (* (+ (* (- 1) (* ?x228 ?x228 ?x228 ?x240 ?x240)) ?x181 (* ?x240 ?x240)) ?x545)))
 (let ((?x140 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x585 (+ 1 y)))
 (let ((?x424 (+ (- 1) x)))
 (let ((?x237 (* (+ (* (- 1) (* ?x424 ?x424 ?x585 ?x585 ?x585)) ?x140 (* ?x424 ?x424)) ?x545)))
 (let (($x400 (and (= ?x545 0) (or (not (= ?x237 0)) (not (= ?x254 0))))))
 (rewrite (= $x400 $x905))))))))))))))))))))))))))))))
 ))
 (let (($x63 (exists ((x Int) (y Int) )(! (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x57 (+ (- (* ?x38 ?x48 ?x48 ?x51 ?x51 ?x51) (* ?x48 ?x48 ?x48 ?x51)) (* ?x48 ?x48))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (+ (- (* ?x38 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39)) (* ?x34 ?x34))))
 (let (($x61 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x44) 0)) (not (= (* (+ (- (- ?x48 y00) x00) ?x51) ?x57) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x61))))))))) :qid k!27))
 ))
 (let ((?x184 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x545 (+ x ?x66 ?x73 y)))
 (let ((?x181 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x240 (+ 1 x)))
 (let ((?x228 (+ (- 1) y)))
 (let ((?x254 (* (+ (* (- 1) (* ?x228 ?x228 ?x228 ?x240 ?x240)) ?x181 (* ?x240 ?x240)) ?x545)))
 (let ((?x140 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x585 (+ 1 y)))
 (let ((?x424 (+ (- 1) x)))
 (let ((?x237 (* (+ (* (- 1) (* ?x424 ?x424 ?x585 ?x585 ?x585)) ?x140 (* ?x424 ?x424)) ?x545)))
 (let (($x400 (and (= ?x545 0) (or (not (= ?x237 0)) (not (= ?x254 0))))))
 (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x57 (+ (- (* ?x38 ?x48 ?x48 ?x51 ?x51 ?x51) (* ?x48 ?x48 ?x48 ?x51)) (* ?x48 ?x48))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (+ (- (* ?x38 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39)) (* ?x34 ?x34))))
 (let (($x61 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x44) 0)) (not (= (* (+ (- (- ?x48 y00) x00) ?x51) ?x57) 0)))))
 (let (($x62 (and (= (+ (- (- x y00) x00) y) 0) $x61)))
 (rewrite (= $x62 $x400))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x536 (mp (mp @x64 (quant-intro (proof-bind ?x184) (= $x63 $x527)) $x527) (rewrite (= $x527 $x527)) $x527)))
 (let ((@x845 (mp~ (mp @x536 (quant-intro (proof-bind ?x675) (= $x527 $x673)) $x673) (sk (~ $x673 $x842)) $x842)))
 (let ((@x555 (mp @x845 (rewrite (= $x842 $x179)) $x179)))
 (let ((@x145 (and-elim @x555 $x517)))
 (let ((@x558 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x517) $x748)) @x145 $x748)))
 (let (($x746 (<= ?x707 0)))
 (let ((@x530 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x517) $x746)) @x145 $x746)))
 (let (($x541 (not (<= ?x151 0))))
 (let (($x431 (>= ?x151 0)))
 (let (($x529 (>= ?x550 0)))
 (let (($x847 (<= ?x550 0)))
 (let ((@x563 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x229 (not $x847) (not $x529))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x847)) @x530 @x558 false) $x847) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x529)) @x530 @x558 false) $x529) $x229)))
 (let ((@x244 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x587 $x541 (not $x431))) (unit-resolution (and-elim @x555 $x543) @x563 $x148) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x431)) @x530 @x558 false) $x431) $x541)))
 ((_ th-lemma arith farkas 1 1 1) @x244 @x530 @x558 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             136
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 33
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.63
 :memory                    19.17
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                476527
 :num-checks                1
 :propagations              14
 :rlimit-count              2689
 :time                      0.01
 :total-time                0.02)
