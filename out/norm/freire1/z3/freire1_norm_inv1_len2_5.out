unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x915 (* r!1 r!1)))
 (let ((?x865 (* (- 1) r!1)))
 (let ((?x864 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x785 (* (- 1) ?x36)))
 (let ((?x764 (* (- 2) x00)))
 (let ((?x867 (+ r00 ?x764 ?x785 ?x864 ?x865 ?x915)))
 (let (($x836 (<= ?x867 0)))
 (let (($x862 (= ?x867 0)))
 (let ((?x916 (* (- 1) ?x915)))
 (let ((?x294 (* r!1 r!1 r!1 r!1)))
 (let ((?x190 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x140 (+ r00 ?x764 ?x785 (* 2 (* r00 r!1 r!1)) ?x190 (* (- 2) (* x!0 x!0)) (* r00 r00 x!0 r!1 r!1) (* (- 2) (* x00 r!1 r!1 r!1)) ?x294 (* (- 1) (* r00 x!0)) (* r00 r!1 r!1 r!1) (* r00 r00 x!0) (* 2 (* r00 r00 x!0 r!1)) (* (- 1) (* r00 r00 r!1 r!1 r!1)) (* (- 2) (* r00 x!0 r!1)) (* (- 1) (* r00 x!0 r!1 r!1)) (* (- 4) (* x00 r!1 r!1)) (* 2 (* x00 x!0 r!1 r!1)) (* 2 (* x00 x!0)) (* 4 (* x00 x!0 r!1)) (* (- 2) (* r00 r00 r!1)) (* (- 4) (* x00 r!1)) (* 5 (* x!0 r!1)) (* 5 (* x!0 r!1 r!1)) (* x!0 r!1 r!1 r!1) (* 2 (* r00 r!1)) (* (- 1) (* x!0 r!1 r!1 r!1 r!1)) (* (- 4) (* x!0 x!0 r!1)) (* (- 2) (* x!0 x!0 r!1 r!1)) (* (- 2) (* r00 r00 r!1 r!1)) ?x864 ?x865 ?x916)))
 (let (($x543 (= ?x140 0)))
 (let (($x101 (not $x543)))
 (let (($x871 (and $x862 $x101)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x914 (* (- 2) x!0)))
 (let ((?x284 (+ r!1 ?x914 ?x124 ?x915 ?x35 ?x36 (* (- 2) (* x!0 x00)) (* (- 4) (* r!1 x!0 x00)) (* (- 2) (* r!1 r!1 x!0 x00)) (* 2 (* r!1 r00 r00)) (* 4 (* r!1 x00)) (* (- 5) (* r!1 x!0)) (* (- 5) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r!1 x!0)) (* (- 1) ?x294) (* (- 2) (* r!1 r00)) (* r!1 r!1 r!1 r!1 x!0) (* (- 1) ?x190) (* 2 (* x!0 x!0)) (* 4 (* r!1 x!0 x!0)) (* 2 (* r!1 r!1 x!0 x!0)) (* 2 (* r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* (- 2) (* r!1 x!0 r00 r00)) (* (- 1) (* r!1 r!1 x!0 r00 r00)) (* 2 (* r!1 r!1 r!1 x00)) (* (- 2) (* r!1 r!1 r00)) (* 4 (* r!1 r!1 x00)) (* (- 1) (* r!1 r!1 r!1 r00)) (* x!0 r00) (* 2 (* r!1 x!0 r00)) (* r!1 r!1 x!0 r00))))
 (let (($x835 (and (= (+ r!1 ?x914 ?x124 ?x916 ?x35 ?x36) 0) (not (= ?x284 0)))))
 (let (($x962 (exists ((r Int) (x Int) )(! (let ((?x802 (* r r x r00)))
 (let ((?x809 (* 2 (* r x r00))))
 (let ((?x791 (* x r00)))
 (let ((?x789 (* (- 1) (* r r r r00))))
 (let ((?x808 (* (- 2) (* r r r00))))
 (let ((?x722 (* (- 1) (* r r x r00 r00))))
 (let ((?x733 (* (- 2) (* r x r00 r00))))
 (let ((?x720 (* (- 1) (* x r00 r00))))
 (let ((?x677 (* r r r r00 r00)))
 (let ((?x728 (* 2 (* r r r00 r00))))
 (let ((?x620 (* 2 (* r r x x))))
 (let ((?x614 (* 2 (* x x))))
 (let ((?x389 (* (- 1) (* r r r r r))))
 (let ((?x368 (* r r r r x)))
 (let ((?x820 (* (- 2) (* r r00))))
 (let ((?x730 (* 2 (* r r00 r00))))
 (let ((?x163 (* (- 2) (* r r x x00))))
 (let ((?x157 (* (- 2) (* x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x955 (+ r ?x123 ?x124 ?x30 ?x35 ?x36 ?x157 (* (- 4) (* r x x00)) ?x163 ?x730 (* 4 (* r x00)) (* (- 5) (* r x)) (* (- 5) (* r r x)) (* (- 1) (* r r r x)) (* (- 1) (* r r r r)) ?x820 ?x368 ?x389 ?x614 (* 4 (* r x x)) ?x620 ?x728 ?x677 ?x720 ?x733 ?x722 (* 2 (* r r r x00)) ?x808 (* 4 (* r r x00)) ?x789 ?x791 ?x809 ?x802)))
 (let (($x127 (= (+ r ?x123 ?x124 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x127 (not (= ?x955 0)))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x780 (exists ((r Int) (x Int) )(! (let ((?x74 (* (- 1) r)))
 (let ((?x763 (+ x ?x74)))
 (let ((?x776 (+ 1 r)))
 (let ((?x307 (* r00 ?x776 ?x776 ?x763)))
 (let ((?x109 (* r00 r00 ?x776 ?x776 ?x763)))
 (let ((?x283 (* ?x776 ?x776 ?x776)))
 (let ((?x792 (* r00 ?x776)))
 (let ((?x755 (* ?x776 ?x776 ?x776 ?x763)))
 (let ((?x773 (+ (* 2 (* x00 ?x776 ?x776 ?x763)) (* (- 1) (* r00 r00 ?x776)) (* (- 2) (* x00 ?x776)) ?x755 ?x792 (* (- 1) (* ?x776 ?x776 ?x776 ?x776 ?x763)) ?x283 (* 2 (* ?x776 ?x763)) (* (- 1) (* ?x776 ?x776)) (* (- 2) (* ?x776 ?x776 ?x763 ?x763)) ?x109 (* (- 1) ?x307))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (and (= (+ r ?x124 ?x125 ?x123 ?x35 ?x36) 0) (not (= ?x773 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x964 (lambda ((r Int) (x Int) )(let ((?x802 (* r r x r00)))
 (let ((?x809 (* 2 (* r x r00))))
 (let ((?x791 (* x r00)))
 (let ((?x789 (* (- 1) (* r r r r00))))
 (let ((?x808 (* (- 2) (* r r r00))))
 (let ((?x722 (* (- 1) (* r r x r00 r00))))
 (let ((?x733 (* (- 2) (* r x r00 r00))))
 (let ((?x720 (* (- 1) (* x r00 r00))))
 (let ((?x677 (* r r r r00 r00)))
 (let ((?x728 (* 2 (* r r r00 r00))))
 (let ((?x620 (* 2 (* r r x x))))
 (let ((?x614 (* 2 (* x x))))
 (let ((?x389 (* (- 1) (* r r r r r))))
 (let ((?x368 (* r r r r x)))
 (let ((?x820 (* (- 2) (* r r00))))
 (let ((?x730 (* 2 (* r r00 r00))))
 (let ((?x163 (* (- 2) (* r r x x00))))
 (let ((?x157 (* (- 2) (* x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x955 (+ r ?x123 ?x124 ?x30 ?x35 ?x36 ?x157 (* (- 4) (* r x x00)) ?x163 ?x730 (* 4 (* r x00)) (* (- 5) (* r x)) (* (- 5) (* r r x)) (* (- 1) (* r r r x)) (* (- 1) (* r r r r)) ?x820 ?x368 ?x389 ?x614 (* 4 (* r x x)) ?x620 ?x728 ?x677 ?x720 ?x733 ?x722 (* 2 (* r r r x00)) ?x808 (* 4 (* r r x00)) ?x789 ?x791 ?x809 ?x802)))
 (let (($x127 (= (+ r ?x123 ?x124 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x687 (and $x127 (not (= ?x955 0)))))
 (let ((?x74 (* (- 1) r)))
 (let ((?x763 (+ x ?x74)))
 (let ((?x776 (+ 1 r)))
 (let ((?x307 (* r00 ?x776 ?x776 ?x763)))
 (let ((?x109 (* r00 r00 ?x776 ?x776 ?x763)))
 (let ((?x283 (* ?x776 ?x776 ?x776)))
 (let ((?x792 (* r00 ?x776)))
 (let ((?x755 (* ?x776 ?x776 ?x776 ?x763)))
 (let ((?x773 (+ (* 2 (* x00 ?x776 ?x776 ?x763)) (* (- 1) (* r00 r00 ?x776)) (* (- 2) (* x00 ?x776)) ?x755 ?x792 (* (- 1) (* ?x776 ?x776 ?x776 ?x776 ?x763)) ?x283 (* 2 (* ?x776 ?x763)) (* (- 1) (* ?x776 ?x776)) (* (- 2) (* ?x776 ?x776 ?x763 ?x763)) ?x109 (* (- 1) ?x307))))
 (let (($x749 (and (= (+ r ?x124 (* (- 1) ?x30) ?x123 ?x35 ?x36) 0) (not (= ?x773 0)))))
 (rewrite (= $x749 $x687)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x700 (exists ((r Int) (x Int) )(! (let ((?x74 (* (- 1) r)))
 (let ((?x763 (+ x ?x74)))
 (let ((?x776 (+ 1 r)))
 (let ((?x307 (* r00 ?x776 ?x776 ?x763)))
 (let ((?x686 (* ?x776 ?x776)))
 (let ((?x712 (* ?x776 ?x776 ?x776 ?x776 ?x763)))
 (let ((?x799 (* r00 r00 ?x776)))
 (let ((?x300 (+ (* (- 2) (* x00 ?x776 ?x776 ?x763)) ?x799 (* 2 (* x00 ?x776)) (* (- 1) (* ?x776 ?x776 ?x776 ?x763)) (* (- 1) (* r00 ?x776)) ?x712 (* (- 1) (* ?x776 ?x776 ?x776)) (* (- 2) (* ?x776 ?x763)) ?x686 (* 2 (* ?x776 ?x776 ?x763 ?x763)) (* (- 1) (* r00 r00 ?x776 ?x776 ?x763)) ?x307)))
 (let ((?x36 (* r00 r00)))
 (let ((?x785 (* (- 1) ?x36)))
 (let ((?x764 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x74 r00 ?x30 ?x32 ?x764 ?x785) 0) (not (= ?x300 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x766 (lambda ((r Int) (x Int) )(let ((?x74 (* (- 1) r)))
 (let ((?x763 (+ x ?x74)))
 (let ((?x776 (+ 1 r)))
 (let ((?x307 (* r00 ?x776 ?x776 ?x763)))
 (let ((?x109 (* r00 r00 ?x776 ?x776 ?x763)))
 (let ((?x283 (* ?x776 ?x776 ?x776)))
 (let ((?x792 (* r00 ?x776)))
 (let ((?x755 (* ?x776 ?x776 ?x776 ?x763)))
 (let ((?x773 (+ (* 2 (* x00 ?x776 ?x776 ?x763)) (* (- 1) (* r00 r00 ?x776)) (* (- 2) (* x00 ?x776)) ?x755 ?x792 (* (- 1) (* ?x776 ?x776 ?x776 ?x776 ?x763)) ?x283 (* 2 (* ?x776 ?x763)) (* (- 1) (* ?x776 ?x776)) (* (- 2) (* ?x776 ?x776 ?x763 ?x763)) ?x109 (* (- 1) ?x307))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (let (($x749 (and (= (+ r ?x124 ?x125 ?x123 ?x35 ?x36) 0) (not (= ?x773 0)))))
 (let ((?x686 (* ?x776 ?x776)))
 (let ((?x712 (* ?x776 ?x776 ?x776 ?x776 ?x763)))
 (let ((?x799 (* r00 r00 ?x776)))
 (let ((?x300 (+ (* (- 2) (* x00 ?x776 ?x776 ?x763)) ?x799 (* 2 (* x00 ?x776)) (* (- 1) ?x755) (* (- 1) ?x792) ?x712 (* (- 1) ?x283) (* (- 2) (* ?x776 ?x763)) ?x686 (* 2 (* ?x776 ?x776 ?x763 ?x763)) (* (- 1) ?x109) ?x307)))
 (let (($x796 (= (+ ?x74 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x795 (and $x796 (not (= ?x300 0)))))
 (rewrite (= $x795 $x749)))))))))))))))))))))))))
 ))
 (let (($x69 (exists ((r Int) (x Int) )(! (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x47 (+ (* (- 2) ?x42 ?x42 ?x43 x00) (* ?x42 r00 r00) (* 2 ?x42 x00))))
 (let ((?x53 (+ (- (- ?x47 (* ?x42 ?x42 ?x42 ?x43)) (* ?x42 r00)) (* ?x42 ?x42 ?x42 ?x42 ?x43))))
 (let ((?x60 (+ (- (- ?x53 (* ?x42 ?x42 ?x42)) (* 2 ?x42 ?x43)) (* ?x42 ?x42) (* 2 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x64 (+ (- ?x60 (* ?x42 ?x42 r00 r00 ?x43)) (* ?x42 ?x42 r00 ?x43))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x64 0))))))))))))) :qid k!26))
 ))
 (let ((?x811 (lambda ((r Int) (x Int) )(let ((?x74 (* (- 1) r)))
 (let ((?x763 (+ x ?x74)))
 (let ((?x776 (+ 1 r)))
 (let ((?x307 (* r00 ?x776 ?x776 ?x763)))
 (let ((?x686 (* ?x776 ?x776)))
 (let ((?x712 (* ?x776 ?x776 ?x776 ?x776 ?x763)))
 (let ((?x799 (* r00 r00 ?x776)))
 (let ((?x300 (+ (* (- 2) (* x00 ?x776 ?x776 ?x763)) ?x799 (* 2 (* x00 ?x776)) (* (- 1) (* ?x776 ?x776 ?x776 ?x763)) (* (- 1) (* r00 ?x776)) ?x712 (* (- 1) (* ?x776 ?x776 ?x776)) (* (- 2) (* ?x776 ?x763)) ?x686 (* 2 (* ?x776 ?x776 ?x763 ?x763)) (* (- 1) (* r00 r00 ?x776 ?x776 ?x763)) ?x307)))
 (let ((?x36 (* r00 r00)))
 (let ((?x785 (* (- 1) ?x36)))
 (let ((?x764 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x795 (and (= (+ ?x74 r00 ?x30 ?x32 ?x764 ?x785) 0) (not (= ?x300 0)))))
 (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x47 (+ (* (- 2) ?x42 ?x42 ?x43 x00) (* ?x42 r00 r00) (* 2 ?x42 x00))))
 (let ((?x53 (+ (- (- ?x47 (* ?x42 ?x42 ?x42 ?x43)) (* ?x42 r00)) (* ?x42 ?x42 ?x42 ?x42 ?x43))))
 (let ((?x60 (+ (- (- ?x53 (* ?x42 ?x42 ?x42)) (* 2 ?x42 ?x43)) (* ?x42 ?x42) (* 2 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x64 (+ (- ?x60 (* ?x42 ?x42 r00 r00 ?x43)) (* ?x42 ?x42 r00 ?x43))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x68 (and (= ?x38 0) (or (not (= ?x64 0))))))
 (rewrite (= $x68 $x795)))))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x751 (mp (mp @x70 (quant-intro (proof-bind ?x811) (= $x69 $x700)) $x700) (rewrite (= $x700 $x700)) $x700)))
 (let ((@x853 (mp (mp @x751 (quant-intro (proof-bind ?x766) (= $x700 $x780)) $x780) (quant-intro (proof-bind ?x964) (= $x780 $x962)) $x962)))
 (let ((@x182 (mp (mp~ @x853 (sk (~ $x962 $x835)) $x835) (rewrite (= $x835 $x871)) $x871)))
 (let ((@x103 (and-elim @x182 $x862)))
 (let ((@x339 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x862) $x836)) @x103 $x836)))
 (let (($x858 (>= ?x867 0)))
 (let ((@x541 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x862) $x858)) @x103 $x858)))
 (let (($x876 (not (>= ?x140 0))))
 (let (($x859 (<= ?x140 0)))
 (let ((@x889 (lemma ((_ th-lemma arith) (hypothesis (not $x859)) @x541 @x339 @x541 @x339 false) $x859)))
 (let ((@x898 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x543 (not $x859) $x876)) (and-elim @x182 $x101) (or (not $x859) $x876))))
 ((_ th-lemma arith) (unit-resolution @x898 @x889 $x876) @x541 @x339 @x541 @x339 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             252
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 42
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.69
 :memory                    3.19
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1214734
 :num-checks                1
 :propagations              4
 :rlimit-count              3861
 :time                      0.01
 :total-time                0.01)
