unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x427 (to_real d!1)))
 (let ((?x69 (to_real a00)))
 (let ((?x183 (* ?x69 ?x427)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x183)))
 (let ((?x525 (to_real y!0)))
 (let ((?x429 (to_real b!2)))
 (let ((?x176 (* ?x429 ?x525)))
 (let ((?x451 (* (- 1.0) ?x176)))
 (let ((?x66 (to_real y00)))
 (let ((?x393 (* ?x66 ?x429)))
 (let ((?x428 (to_real a!3)))
 (let ((?x361 (* ?x427 ?x428)))
 (let ((?x175 (* (/ 1.0 2.0) ?x361)))
 (let ((?x248 (+ ?x175 ?x393 ?x451 ?x178)))
 (let (($x195 (>= ?x248 0.0)))
 (let ((?x452 (+ ?x361 (* (- 1.0) (to_real (* a!3 d!1))))))
 (let (($x271 (>= ?x452 0.0)))
 (let (($x265 (= 0.0 ?x452)))
 (let ((@x332 (symm (commutativity (= $x265 (= ?x452 0.0))) (= (= ?x452 0.0) $x265))))
 (let (($x266 (= ?x452 0.0)))
 (let ((@x338 ((_ th-lemma arith) $x266)))
 (let ((@x154 ((_ th-lemma arith triangle-eq) (or (not $x265) $x271))))
 (let ((?x254 (+ (* (- 1.0) (to_real (* a00 d!1))) ?x183)))
 (let (($x329 (<= ?x254 0.0)))
 (let ((@x193 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x254 0.0)) $x329)) ((_ th-lemma arith) (= ?x254 0.0)) $x329)))
 (let ((?x249 (+ ?x176 (* (- 1.0) (to_real (* b!2 y!0))))))
 (let (($x252 (<= ?x249 0.0)))
 (let ((@x510 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x249 0.0)) $x252)) ((_ th-lemma arith) (= ?x249 0.0)) $x252)))
 (let ((?x243 (+ (* (- 1.0) (to_real (* y00 b!2))) ?x393)))
 (let (($x503 (>= ?x243 0.0)))
 (let ((@x234 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x243 0.0)) $x503)) ((_ th-lemma arith) (= ?x243 0.0)) $x503)))
 (let ((?x342 (* b!2 y!0)))
 (let ((?x722 (* (- 2) ?x342)))
 (let ((?x226 (* a!3 d!1)))
 (let ((?x372 (+ ?x226 (* (- 1) (* a00 d!1)) ?x722 (* 2 (* y00 b!2)))))
 (let (($x130 (>= ?x372 0)))
 (let (($x502 (= 0 ?x372)))
 (let ((@x374 (symm (commutativity (= $x502 (= ?x372 0))) (= (= ?x372 0) $x502))))
 (let (($x390 (= ?x372 0)))
 (let ((?x276 (* (- (/ 1.0 256.0)) (* ?x427 ?x427 ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429))))
 (let ((?x257 (* (- (/ 1.0 256.0)) (* ?x427 ?x427 ?x427 ?x427 ?x427 ?x429 ?x429 ?x429 ?x429 ?x429))))
 (let ((?x728 (* (- (/ 1.0 16.0)) (* ?x427 ?x427 ?x427 ?x429 ?x429 ?x525))))
 (let ((?x721 (* (- (/ 1.0 64.0)) (* ?x427 ?x427 ?x427 ?x427 ?x429 ?x429))))
 (let ((?x709 (* (- (/ 1.0 64.0)) (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x677 (* (- (/ 1.0 16.0)) (* ?x427 ?x427 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x289 (* (- (/ 1.0 64.0)) (* ?x427 ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429 ?x525))))
 (let ((?x309 (* (- (/ 1.0 32.0)) (* ?x427 ?x427 ?x427 ?x428 ?x429 ?x429 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x235 (* (- (/ 1.0 64.0)) (* ?x427 ?x427 ?x427 ?x429 ?x429 ?x429 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x406 (* (- (/ 1.0 64.0)) (* ?x427 ?x427 ?x427 ?x427 ?x429 ?x429 ?x429 ?x429 ?x429 ?x525))))
 (let ((?x305 (* (- (/ 1.0 32.0)) (* ?x427 ?x427 ?x427 ?x427 ?x428 ?x429 ?x429 ?x429 ?x429 ?x525))))
 (let ((?x290 (* (- (/ 1.0 128.0)) (* ?x427 ?x427 ?x427 ?x427 ?x427 ?x428 ?x429 ?x429 ?x429 ?x429))))
 (let ((?x145 (* (+ ?x290 ?x305 ?x406 ?x235 ?x309 ?x289 ?x677 ?x709 ?x721 ?x728 ?x257 ?x276) (+ ?x451 ?x178 ?x175 ?x393))))
 (let (($x129 (= ?x145 0.0)))
 (let (($x152 (not $x129)))
 (let ((?x685 (* (- (/ 1.0 64.0)) (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429 ?x429 ?x525 ?x525 ?x525))))
 (let ((?x683 (* (/ 1.0 128.0) (* ?x427 ?x427 ?x427 ?x427 ?x428 ?x428 ?x428 ?x429 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x526 (* (/ 1.0 32.0) (* ?x427 ?x427 ?x427 ?x428 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x548 (* (- (/ 1.0 16.0)) (* ?x427 ?x427 ?x429 ?x429 ?x429 ?x525 ?x525 ?x525))))
 (let ((?x171 (* (- (/ 1.0 128.0)) (* ?x69 ?x427 ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x203 (* (/ 1.0 64.0) (* ?x66 ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429 ?x429 ?x525 ?x525))))
 (let ((?x184 (+ (* (/ 1.0 16.0) (* ?x66 ?x427 ?x427 ?x429 ?x429 ?x429 ?x525 ?x525)) ?x203 ?x171 (* (- (/ 1.0 32.0)) (* ?x69 ?x427 ?x427 ?x427 ?x429 ?x429 ?x525 ?x525)) ?x548 ?x526 ?x683 ?x685)))
 (let (($x204 (= ?x184 0.0)))
 (let (($x392 (not $x204)))
 (let (($x501 (or $x392 $x152)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let (($x405 (= (+ ?x35 ?x105 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x504 (and $x405 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x390 $x501)))
 (let ((?x411 (* (+ ?x677 ?x709 ?x721 ?x728 ?x276 ?x290 ?x257 ?x289 ?x305 ?x406 ?x309 ?x235) (+ ?x175 ?x451 (* ?x429 ?x66) (* (- (/ 1.0 2.0)) (* ?x427 ?x69))))))
 (let ((?x542 (* (- (/ 1.0 128.0)) (* ?x427 ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429 ?x525 ?x525 ?x69))))
 (let ((?x569 (* (/ 1.0 64.0) (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x429 ?x429 ?x429 ?x429 ?x525 ?x525 ?x66))))
 (let ((?x653 (+ ?x526 ?x548 (* (/ 1.0 16.0) (* ?x427 ?x427 ?x429 ?x429 ?x429 ?x525 ?x525 ?x66)) (* (- (/ 1.0 32.0)) (* ?x427 ?x427 ?x427 ?x429 ?x429 ?x525 ?x525 ?x69)) ?x683 ?x685 ?x569 ?x542)))
 (let (($x419 (= (+ ?x226 ?x722 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x119 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x105 (* 2 (* y!0 b00))) 0)))
 (let (($x618 (and $x119 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x419 (or (not (= ?x653 0.0)) (not (= ?x411 0.0))))))
 (let (($x536 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x167 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x251 (+ ?x167 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x750 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x744 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x749 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 1.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) ?x744 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x750 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x69 (to_real a00)))
 (let ((?x379 (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x378 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66))))
 (let ((?x376 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x375 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x364 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x69)) ?x375 ?x376 ?x378 ?x379)))
 (let (($x356 (not (= ?x364 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x174 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x179 (= ?x174 0)))
 (let (($x108 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let (($x137 (= (+ ?x35 (* (- 1) (* a d00)) ?x105 (* 2 (* y b00))) 0)))
 (and $x137 $x108 $x179 (or $x356 (not (= (* ?x749 ?x251) 0.0))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x673 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x666 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x635 (* ?x66 ?x61)))
 (let ((?x752 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x635 ?x666)))
 (let ((?x63 (to_real y)))
 (let ((?x623 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x326 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x481 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x623 ?x623)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x326 ?x326 ?x623 ?x623)))))
 (let ((?x190 (+ (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let ((?x303 (* ?x190 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x635 ?x666))))
 (let (($x489 (or (not (= ?x303 0.0)) (not (= (* ?x481 ?x752) 0.0)))))
 (let ((?x598 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x607 (= ?x598 0)))
 (let ((?x657 (* d00 a)))
 (let ((?x688 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x657)))
 (and (= ?x688 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x607 $x489))))))))))))))))))) :qid k!33))
 ))
 (let ((?x605 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x167 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x251 (+ ?x167 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x750 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x744 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x749 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 1.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) ?x744 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x750 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x69 (to_real a00)))
 (let ((?x379 (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x378 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66))))
 (let ((?x376 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x375 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x364 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x69)) ?x375 ?x376 ?x378 ?x379)))
 (let (($x356 (not (= ?x364 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x174 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x179 (= ?x174 0)))
 (let (($x108 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let (($x137 (= (+ ?x35 (* (- 1) (* a d00)) ?x105 (* 2 (* y b00))) 0)))
 (let (($x705 (and $x137 $x108 $x179 (or $x356 (not (= (* ?x749 ?x251) 0.0))))))
 (let ((?x666 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x635 (* ?x66 ?x61)))
 (let ((?x752 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x59 ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x635 ?x666)))
 (let ((?x623 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x326 (+ ?x59 ?x61)))
 (let ((?x481 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x623 ?x623)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x326 ?x326 ?x623 ?x623)))))
 (let ((?x190 (+ (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let (($x577 (not (= (* ?x190 (+ ?x167 (* (- 1.0) (* ?x63 ?x61)) ?x635 ?x666)) 0.0))))
 (let (($x489 (or $x577 (not (= (* ?x481 ?x752) 0.0)))))
 (let ((?x598 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x607 (= ?x598 0)))
 (let ((?x657 (* d00 a)))
 (let (($x546 (= (+ (* 2 ?x104) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x657) 0)))
 (let (($x669 (and $x546 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x607 $x489)))
 (rewrite (= $x669 $x705)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x493 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x666 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x635 (* ?x66 ?x61)))
 (let ((?x752 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x635 ?x666)))
 (let ((?x63 (to_real y)))
 (let ((?x623 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x326 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x481 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x623 ?x623)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x326 ?x326 ?x623 ?x623)))))
 (let ((?x190 (+ (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let ((?x303 (* ?x190 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x635 ?x666))))
 (let (($x489 (or (not (= ?x303 0.0)) (not (= (* ?x481 ?x752) 0.0)))))
 (let ((?x598 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x607 (= ?x598 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x554 (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x554 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x607 $x489))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x675 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x666 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x635 (* ?x66 ?x61)))
 (let ((?x752 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x635 ?x666)))
 (let ((?x63 (to_real y)))
 (let ((?x623 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x326 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x481 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x623 ?x623)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x326 ?x326 ?x623 ?x623)))))
 (let ((?x190 (+ (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let ((?x303 (* ?x190 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x635 ?x666))))
 (let (($x489 (or (not (= ?x303 0.0)) (not (= (* ?x481 ?x752) 0.0)))))
 (let ((?x598 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x607 (= ?x598 0)))
 (let ((?x657 (* d00 a)))
 (let ((?x688 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x657)))
 (let (($x669 (and (= ?x688 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x607 $x489)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x535 (and (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) ?x657)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x607 $x489)))
 (rewrite (= $x535 $x669))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x83 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x81 (to_real (+ a b))))
 (let ((?x90 (- (* (to_real (- 1)) ?x62 ?x62 ?x58 ?x58 ?x83 ?x83) (* ?x81 ?x81 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x83 ?x83))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x92 (= (* (- (+ (- (* ?x81 ?x58) (* ?x57 ?x62 ?x83)) ?x67) ?x70) ?x90) ?x77)))
 (let ((?x59 (to_real a)))
 (let ((?x75 (- (* (to_real (- 1)) ?x62 ?x62 ?x58 ?x58 ?x63 ?x63) (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let (($x78 (= (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x75) ?x77)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x78) (not $x92))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x609 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x666 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x635 (* ?x66 ?x61)))
 (let ((?x752 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x635 ?x666)))
 (let ((?x63 (to_real y)))
 (let ((?x623 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x326 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x481 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x623 ?x623)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x326 ?x326 ?x623 ?x623)))))
 (let ((?x190 (+ (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let ((?x303 (* ?x190 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x635 ?x666))))
 (let (($x489 (or (not (= ?x303 0.0)) (not (= (* ?x481 ?x752) 0.0)))))
 (let ((?x598 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x607 (= ?x598 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x554 (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x535 (and $x554 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x607 $x489)))
 (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x81 (to_real (+ a b))))
 (let ((?x90 (- (* (to_real (- 1)) ?x62 ?x62 ?x58 ?x58 ?x83 ?x83) (* ?x81 ?x81 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x83 ?x83))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x87 (- (+ (- (* ?x81 ?x58) (* ?x57 ?x62 ?x83)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x75 (- (* (to_real (- 1)) ?x62 ?x62 ?x58 ?x58 ?x63 ?x63) (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x95 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x71 ?x75) ?x77)) (not (= (* ?x87 ?x90) ?x77))))))
 (rewrite (= $x95 $x535)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x599 (mp (mp @x97 (quant-intro (proof-bind ?x609) (= $x96 $x493)) $x493) (rewrite (= $x493 $x493)) $x493)))
 (let ((@x545 (mp (mp @x599 (quant-intro (proof-bind ?x675) (= $x493 $x673)) $x673) (quant-intro (proof-bind ?x605) (= $x673 $x536)) $x536)))
 (let ((@x208 (mp (mp~ @x545 (sk (~ $x536 $x618)) $x618) (rewrite (= $x618 $x504)) $x504)))
 (let ((@x380 (mp (and-elim @x208 $x390) @x374 $x502)))
 (let ((@x381 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x502) $x130)) @x380 $x130)))
 (let ((@x299 ((_ th-lemma arith) @x381 @x234 @x510 @x193 (hypothesis (not $x195)) (unit-resolution @x154 (mp @x338 @x332 $x265) $x271) false)))
 (let ((@x222 (lemma @x299 $x195)))
 (let (($x238 (<= ?x248 0.0)))
 (let ((@x471 (unit-resolution (hypothesis (not $x265)) (symm (hypothesis $x266) $x265) false)))
 (let ((@x337 (unit-resolution (lemma @x471 (or (not $x266) $x265)) (lemma (unit-resolution @x338 (hypothesis (not $x266)) false) $x266) $x265)))
 (let (($x464 (<= ?x452 0.0)))
 (let ((@x566 (hypothesis $x265)))
 (let ((@x568 ((_ th-lemma arith triangle-eq) (or (not $x265) $x464))))
 (let (($x211 (<= ?x372 0)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith) (or (not $x211) (not $x130) $x238 (not $x271) (not $x464))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x502) $x211)) @x380 $x211) @x381 (hypothesis (not $x238)) (unit-resolution @x568 @x566 $x464) (unit-resolution @x154 @x566 $x271) false)))
 (let ((@x358 (unit-resolution (lemma @x296 (or (not $x265) $x238)) @x337 $x238)))
 (let (($x131 (<= ?x184 0.0)))
 (let (($x620 (not $x131)))
 (let (($x228 (= ?x248 0.0)))
 (let ((@x645 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x228 (not $x238) (not $x195))) @x358 @x222 $x228)))
 (let (($x531 (or (not $x228) $x129)))
 (let ((@x217 (unit-resolution ((_ th-lemma arith) $x531) (hypothesis $x152) (hypothesis $x228) false)))
 (let ((@x611 (unit-resolution (and-elim @x208 $x501) (unit-resolution (lemma @x217 $x531) @x645 $x129) $x392)))
 (let (($x209 (>= ?x184 0.0)))
 (let ((@x573 (unit-resolution ((_ th-lemma arith) (or (not $x238) (not $x195) $x209 (not $x271) (not $x464))) (hypothesis (not $x209)) @x358 @x222 (unit-resolution @x568 @x337 $x464) (unit-resolution @x154 @x337 $x271) false)))
 (let ((@x593 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x204 $x620 (not $x209))) (lemma @x573 $x209) @x611 $x620)))
 (unit-resolution ((_ th-lemma arith) (or (not $x238) (not $x195) $x131)) @x593 @x358 @x222 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       39
 :arith-eq-adapter                42
 :arith-bound-propagations-cheap  29
 :arith-bound-propagations-lp     2
 :arith-conflicts                 70
 :arith-diseq                     31
 :arith-gcd-calls                 6
 :arith-grobner-calls             6
 :arith-grobner-conflicts         3
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 14
 :arith-lower                     69
 :arith-make-feasible             53
 :arith-max-columns               78
 :arith-max-rows                  21
 :arith-nla-explanations          121
 :arith-nla-lemmas                68
 :arith-patches                   6
 :arith-patches-success           6
 :arith-propagations              29
 :arith-upper                     43
 :conflicts                       12
 :decisions                       52
 :del-clause                      153
 :final-checks                    42
 :max-memory                      5.36
 :memory                          3.15
 :mk-bool-var                     190
 :mk-clause                       183
 :num-allocs                      42042890
 :num-checks                      1
 :propagations                    78
 :rlimit-count                    5779
 :time                            0.07
 :total-time                      0.08)
