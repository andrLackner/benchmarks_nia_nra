unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(proof
(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x1201 (to_real z!0)))
 (let ((?x1207 (to_real x!2)))
 (let ((?x1203 (to_real y!1)))
 (let ((?x895 (* ?x1203 ?x1207)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x1074 (+ ?x114 ?x895 ?x1201 ?x194)))
 (let (($x1062 (>= ?x1074 0.0)))
 (let ((?x847 (+ ?x108 (* (- 1.0) (to_real (* x00 y00))))))
 (let (($x751 (<= ?x847 0.0)))
 (let (($x726 (= 0.0 ?x847)))
 (let ((@x880 (symm (commutativity (= $x726 (= ?x847 0.0))) (= (= ?x847 0.0) $x726))))
 (let ((@x691 (mp ((_ th-lemma arith) (= ?x847 0.0)) @x880 $x726)))
 (let ((?x903 (+ (* (- 1.0) (to_real (* y!1 x!2))) ?x895)))
 (let (($x1105 (>= ?x903 0.0)))
 (let (($x813 (= 0.0 ?x903)))
 (let ((@x91 (symm (commutativity (= $x813 (= ?x903 0.0))) (= (= ?x903 0.0) $x813))))
 (let ((@x862 (mp ((_ th-lemma arith) (= ?x903 0.0)) @x91 $x813)))
 (let ((?x81 (* x00 y00)))
 (let ((?x1108 (+ z00 ?x81 (* (- 1) (* y!1 x!2)) (* (- 1) z!0))))
 (let (($x729 (<= ?x1108 0)))
 (let (($x1075 (= 0 ?x1108)))
 (let ((@x809 (symm (commutativity (= $x1075 (= ?x1108 0))) (= (= ?x1108 0) $x1075))))
 (let (($x1092 (= ?x1108 0)))
 (let ((?x738 (* (/ 1.0 2.0) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1207))))
 (let ((?x733 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x1203))))
 (let ((?x521 (+ ?x1201 ?x1207)))
 (let ((?x901 (+ (* (/ 9.0 2.0) (* ?x1201 ?x1203 ?x1203 ?x1207 ?x1207 ?x1207 ?x1207)) (* (- 1.0) (* ?x521 ?x521 ?x521 ?x733 ?x733 ?x733)) (* (- (/ 3.0 2.0)) (* ?x1201 ?x1203 ?x1203 ?x1203 ?x1207 ?x1207 ?x1207 ?x1207)) (* (- (/ 3.0 2.0)) (* ?x1201 ?x1201 ?x1201 ?x1203 ?x1207 ?x1207)) (* (/ 3.0 2.0) (* ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1207 ?x1207)) (* (- (/ 1.0 2.0)) (* ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1207 ?x1207)) (* (- (/ 3.0 2.0)) (* ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1207 ?x1207 ?x1207)) (* (/ 1.0 2.0) (* ?x1201 ?x1201 ?x1201 ?x1207 ?x1207)) (* (/ 9.0 2.0) (* ?x1201 ?x1201 ?x1203 ?x1203 ?x1207 ?x1207 ?x1207)) (* (- (/ 9.0 2.0)) (* ?x1201 ?x1203 ?x1207 ?x1207 ?x1207 ?x1207)) (* (- (/ 9.0 2.0)) (* ?x1201 ?x1201 ?x1203 ?x1207 ?x1207 ?x1207)) (* (/ 3.0 2.0) (* ?x1201 ?x1201 ?x1207 ?x1207 ?x1207)) (* (/ 3.0 2.0) (* ?x1203 ?x1203 ?x1207 ?x1207 ?x1207 ?x1207 ?x1207)) (* (- (/ 3.0 2.0)) (* ?x1203 ?x1207 ?x1207 ?x1207 ?x1207 ?x1207)) (* (- (/ 1.0 2.0)) (* ?x1203 ?x1203 ?x1203 ?x1207 ?x1207 ?x1207 ?x1207 ?x1207)) (* (/ 3.0 2.0) (* ?x1201 ?x1207 ?x1207 ?x1207 ?x1207)) ?x738)))
 (let (($x898 (= (* ?x901 (+ ?x194 ?x114 ?x895 ?x1201)) 0.0)))
 (let (($x885 (not $x898)))
 (let ((?x717 (* (/ 1.0 8.0) (* ?x1201 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203))))
 (let ((?x535 (+ (* (/ 1.0 2.0) (* ?x1201 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1207 ?x1207)) (* (/ 1.0 2.0) (* ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1203 ?x1207 ?x1207 ?x1207)) (* (- (/ 1.0 2.0)) (* ?x48 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1207 ?x1207)) (* (- (/ 1.0 2.0)) (* ?x103 ?x107 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1207 ?x1207)) (* (- (/ 1.0 8.0)) (* ?x48 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203)) (* (/ 1.0 8.0) (* ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1203 ?x1207)) ?x717 (* (- (/ 1.0 8.0)) (* ?x103 ?x107 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203)))))
 (let (($x570 (= ?x535 0.0)))
 (let (($x693 (not $x570)))
 (let (($x1294 (or $x693 $x885)))
 (let (($x577 (and $x1092 $x1294)))
 (let ((?x1129 (+ (* (/ 1.0 2.0) (* ?x1207 ?x1207 ?x1201 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203)) (* (- (/ 1.0 2.0)) (* ?x1207 ?x1207 ?x1201 ?x1201 ?x1201 ?x48 ?x1203 ?x1203 ?x1203)) (* (- (/ 1.0 2.0)) (* ?x1207 ?x1207 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x103 ?x107)) (* (/ 1.0 2.0) (* ?x1207 ?x1207 ?x1207 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1203)) ?x717 (* (- (/ 1.0 8.0)) (* ?x1201 ?x1201 ?x1201 ?x48 ?x1203 ?x1203 ?x1203)) (* (- (/ 1.0 8.0)) (* ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x103 ?x107)) (* (/ 1.0 8.0) (* ?x1207 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203 ?x1203)))))
 (let ((?x1132 (* (- 1.0) (* (+ ?x1207 ?x1201) (+ ?x1207 ?x1201) (+ ?x1207 ?x1201) ?x733 ?x733 ?x733))))
 (let ((?x1133 (+ ?x738 (* (- (/ 3.0 2.0)) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1207 ?x1203)) (* (/ 3.0 2.0) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1207 ?x1203 ?x1203)) (* (- (/ 1.0 2.0)) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1207 ?x1203 ?x1203 ?x1203)) (* (/ 3.0 2.0) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1201)) (* (- (/ 9.0 2.0)) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1201 ?x1203)) (* (/ 9.0 2.0) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1201 ?x1203 ?x1203)) (* (- (/ 3.0 2.0)) (* ?x1207 ?x1207 ?x1207 ?x1207 ?x1201 ?x1203 ?x1203 ?x1203)) (* (/ 3.0 2.0) (* ?x1207 ?x1207 ?x1207 ?x1201 ?x1201)) (* (- (/ 9.0 2.0)) (* ?x1207 ?x1207 ?x1207 ?x1201 ?x1201 ?x1203)) (* (/ 9.0 2.0) (* ?x1207 ?x1207 ?x1207 ?x1201 ?x1201 ?x1203 ?x1203)) (* (- (/ 3.0 2.0)) (* ?x1207 ?x1207 ?x1207 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203)) (* (/ 1.0 2.0) (* ?x1207 ?x1207 ?x1201 ?x1201 ?x1201)) (* (- (/ 3.0 2.0)) (* ?x1207 ?x1207 ?x1201 ?x1201 ?x1201 ?x1203)) (* (/ 3.0 2.0) (* ?x1207 ?x1207 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203)) (* (- (/ 1.0 2.0)) (* ?x1207 ?x1207 ?x1201 ?x1201 ?x1201 ?x1203 ?x1203 ?x1203)) ?x1132)))
 (let (($x725 (or (not (= (* ?x1133 (+ ?x1201 ?x194 ?x114 (* ?x1207 ?x1203))) 0.0)) (not (= ?x1129 0.0)))))
 (let (($x1099 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x81)) 0) $x725)))
 (let (($x748 (exists ((x Int) (y Int) (z Int) )(! (let ((?x60 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x1372 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 (to_real x00) (to_real y00)))))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x1381 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x60 ?x60 ?x60))))
 (let ((?x1365 (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) ?x1381 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x103 ?x107)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 (to_real z00) ?x60 ?x60 ?x60)) ?x1372 (* (/ 1.0 8.0) (* ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x60)))))
 (let (($x1345 (not (= ?x1365 0.0))))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x750 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x838 (+ ?x43 ?x46)))
 (let ((?x1277 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x1274 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60))))
 (let ((?x1271 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60))))
 (let ((?x1268 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46))))
 (let ((?x1265 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x1262 (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60))))
 (let ((?x1259 (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60))))
 (let ((?x1256 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x1253 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x1250 (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60))))
 (let ((?x1247 (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60))))
 (let ((?x1244 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x1241 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60 ?x60))))
 (let ((?x1238 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60))))
 (let ((?x1235 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60))))
 (let ((?x1231 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x1143 (+ ?x1231 ?x1235 ?x1238 ?x1241 ?x1244 ?x1247 ?x1250 ?x1253 ?x1256 ?x1259 ?x1262 ?x1265 ?x1268 ?x1271 ?x1274 ?x1277 (* (- 1.0) (* ?x838 ?x838 ?x838 ?x750 ?x750 ?x750)))))
 (let (($x1134 (or (not (= (* ?x1143 (+ ?x46 ?x194 ?x114 (* ?x43 ?x60))) 0.0)) $x1345)))
 (let (($x109 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x109 $x1134)))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x773 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x43 (to_real x)))
 (let ((?x60 (to_real y)))
 (let ((?x856 (+ (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43)))))
 (let ((?x673 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60)))) ?x46 ?x43 ?x194)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x750 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x771 (+ ?x46 ?x43)))
 (let ((?x680 (+ (* (- 1.0) (* ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)) (* (- 4.0) (* ?x43 ?x43 ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)))))
 (let (($x864 (or (not (= (* ?x680 ?x673) 0.0)) (not (= (* ?x856 (+ ?x114 (* ?x60 ?x43) ?x46 ?x194)) 0.0)))))
 (let (($x675 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x675 $x864)))))))))))))))))) :qid k!28))
 ))
 (let ((?x745 (lambda ((x Int) (y Int) (z Int) )(let ((?x60 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x1372 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 (to_real x00) (to_real y00)))))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x1381 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x60 ?x60 ?x60))))
 (let ((?x1365 (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) ?x1381 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x103 ?x107)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 (to_real z00) ?x60 ?x60 ?x60)) ?x1372 (* (/ 1.0 8.0) (* ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x60)))))
 (let (($x1345 (not (= ?x1365 0.0))))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x750 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x838 (+ ?x43 ?x46)))
 (let ((?x1277 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x1274 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60))))
 (let ((?x1271 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x60))))
 (let ((?x1268 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x46))))
 (let ((?x1265 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x1262 (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60))))
 (let ((?x1259 (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60))))
 (let ((?x1256 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x1253 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x1250 (* (/ 9.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60))))
 (let ((?x1247 (* (- (/ 9.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60))))
 (let ((?x1244 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x1241 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60 ?x60))))
 (let ((?x1238 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60))))
 (let ((?x1235 (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60))))
 (let ((?x1231 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x1143 (+ ?x1231 ?x1235 ?x1238 ?x1241 ?x1244 ?x1247 ?x1250 ?x1253 ?x1256 ?x1259 ?x1262 ?x1265 ?x1268 ?x1271 ?x1274 ?x1277 (* (- 1.0) (* ?x838 ?x838 ?x838 ?x750 ?x750 ?x750)))))
 (let (($x1134 (or (not (= (* ?x1143 (+ ?x46 ?x194 ?x114 (* ?x43 ?x60))) 0.0)) $x1345)))
 (let (($x109 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x1150 (and $x109 $x1134)))
 (let ((?x856 (+ (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43)))))
 (let ((?x771 (+ ?x46 ?x43)))
 (let ((?x680 (+ (* (- 1.0) (* ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)) (* (- 4.0) (* ?x43 ?x43 ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)))))
 (let (($x826 (= (* ?x680 (+ ?x114 (* 2.0 (* ?x43 ?x750)) ?x46 ?x43 ?x194)) 0.0)))
 (let (($x864 (or (not $x826) (not (= (* ?x856 (+ ?x114 (* ?x60 ?x43) ?x46 ?x194)) 0.0)))))
 (let (($x675 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x740 (and $x675 $x864)))
 (rewrite (= $x740 $x1150))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x760 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x43 (to_real x)))
 (let ((?x60 (to_real y)))
 (let ((?x856 (+ (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43)))))
 (let ((?x673 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60)))) ?x46 ?x43 ?x194)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x750 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x771 (+ ?x46 ?x43)))
 (let ((?x680 (+ (* (- 1.0) (* ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)) (* (- 4.0) (* ?x43 ?x43 ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)))))
 (let (($x864 (or (not (= (* ?x680 ?x673) 0.0)) (not (= (* ?x856 (+ ?x114 (* ?x60 ?x43) ?x46 ?x194)) 0.0)))))
 (let (($x897 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x897 $x864)))))))))))))))))) :qid k!28))
 ))
 (let ((?x784 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x43 (to_real x)))
 (let ((?x60 (to_real y)))
 (let ((?x856 (+ (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43)))))
 (let ((?x673 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60)))) ?x46 ?x43 ?x194)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x750 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x771 (+ ?x46 ?x43)))
 (let ((?x680 (+ (* (- 1.0) (* ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)) (* (- 4.0) (* ?x43 ?x43 ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)))))
 (let (($x864 (or (not (= (* ?x680 ?x673) 0.0)) (not (= (* ?x856 (+ ?x114 (* ?x60 ?x43) ?x46 ?x194)) 0.0)))))
 (let (($x675 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x740 (and $x675 $x864)))
 (let (($x897 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x778 (and $x897 $x864)))
 (rewrite (= $x778 $x740)))))))))))))))))))))))
 ))
 (let (($x73 (exists ((x Int) (y Int) (z Int) )(! (let ((?x57 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x60 (to_real y)))
 (let ((?x61 (/ ?x60 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x67 (- (* (to_real (- 1)) ?x61 ?x61 ?x61 ?x46 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x61 ?x61 ?x61 ?x46 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x64 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x61) ?x46) ?x48)))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x52 ?x52 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x59 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x55) ?x57))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x59 (not (= (* ?x64 ?x67) ?x57)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x752 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x43 (to_real x)))
 (let ((?x60 (to_real y)))
 (let ((?x856 (+ (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43)))))
 (let ((?x673 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60)))) ?x46 ?x43 ?x194)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x750 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x771 (+ ?x46 ?x43)))
 (let ((?x680 (+ (* (- 1.0) (* ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)) (* (- 4.0) (* ?x43 ?x43 ?x771 ?x771 ?x771 ?x750 ?x750 ?x750)))))
 (let (($x864 (or (not (= (* ?x680 ?x673) 0.0)) (not (= (* ?x856 (+ ?x114 (* ?x60 ?x43) ?x46 ?x194)) 0.0)))))
 (let (($x897 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x778 (and $x897 $x864)))
 (let ((?x57 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x61 (/ ?x60 ?x41)))
 (let ((?x67 (- (* (to_real (- 1)) ?x61 ?x61 ?x61 ?x46 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x61 ?x61 ?x61 ?x46 ?x46 ?x46))))
 (let ((?x64 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x61) ?x46) ?x48)))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x52 ?x52 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x59 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x55) ?x57))))
 (let (($x72 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x59 (not (= (* ?x64 ?x67) ?x57))))))
 (rewrite (= $x72 $x778))))))))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x774 (mp (mp @x74 (quant-intro (proof-bind ?x752) (= $x73 $x760)) $x760) (rewrite (= $x760 $x760)) $x760)))
 (let ((@x681 (mp (mp @x774 (quant-intro (proof-bind ?x784) (= $x760 $x773)) $x773) (quant-intro (proof-bind ?x745) (= $x773 $x748)) $x748)))
 (let ((@x142 (mp (mp~ @x681 (sk (~ $x748 $x1099)) $x1099) (rewrite (= $x1099 $x577)) $x577)))
 (let ((@x902 (mp (and-elim @x142 $x1092) @x809 $x1075)))
 (let ((@x837 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1075) $x729)) @x902 $x729) (hypothesis (not $x1062)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x813) $x1105)) @x862 $x1105) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x751)) @x691 $x751) false)))
 (let ((@x842 (lemma @x837 $x1062)))
 (let (($x685 (<= ?x1074 0.0)))
 (let (($x1090 (>= ?x1108 0)))
 (let (($x798 (>= ?x847 0.0)))
 (let (($x808 (<= ?x903 0.0)))
 (let ((@x899 ((_ th-lemma arith) (hypothesis (not $x685)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x813) $x808)) @x862 $x808) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x798)) @x691 $x798) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1075) $x1090)) @x902 $x1090) false)))
 (let ((@x878 (lemma @x899 $x685)))
 (let (($x1083 (>= ?x535 0.0)))
 (let (($x967 (not $x1083)))
 (let (($x1084 (<= ?x535 0.0)))
 (let ((@x959 (unit-resolution ((_ th-lemma arith) (or (not $x685) (not $x1062) $x1084)) (hypothesis (not $x1084)) @x878 @x842 false)))
 (let (($x1102 (= 0.0 ?x535)))
 (let (($x974 (not $x1102)))
 (let ((@x848 (monotonicity (symm (commutativity (= $x1102 $x570)) (= $x570 $x1102)) (= $x693 $x974))))
 (let (($x852 (= 0.0 ?x1074)))
 (let ((@x153 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x852 (not $x685) (not $x1062))) @x878 @x842 $x852)))
 (let (($x867 (= ?x1074 0.0)))
 (let (($x835 (not $x867)))
 (let ((@x905 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x835 $x898)) (hypothesis $x885) $x835) (symm (hypothesis $x852) $x867) false)))
 (let ((@x971 (unit-resolution (and-elim @x142 $x1294) (unit-resolution (lemma @x905 (or (not $x852) $x898)) @x153 $x898) $x693)))
 (let ((@x977 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1102 (not $x1084) $x967)) (mp @x971 @x848 $x974) (or (not $x1084) $x967))))
 (unit-resolution ((_ th-lemma arith) (or (not $x1062) $x1083 (not $x685))) (unit-resolution @x977 (lemma @x959 $x1084) $x967) @x878 @x842 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      38
 :arith-eq-adapter               27
 :arith-bound-propagations-cheap 14
 :arith-bound-propagations-lp    2
 :arith-branch                   1
 :arith-conflicts                54
 :arith-diseq                    21
 :arith-gcd-calls                4
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    44
 :arith-make-feasible            46
 :arith-max-columns              69
 :arith-max-rows                 21
 :arith-nla-explanations         69
 :arith-nla-lemmas               50
 :arith-patches                  4
 :arith-patches-success          3
 :arith-propagations             14
 :arith-upper                    36
 :conflicts                      10
 :decisions                      42
 :del-clause                     76
 :final-checks                   29
 :max-memory                     5.73
 :memory                         3.22
 :mk-bool-var                    144
 :mk-clause                      113
 :num-allocs                     6227665
 :num-checks                     1
 :propagations                   53
 :rlimit-count                   5500
 :time                           0.03
 :total-time                     0.04)
