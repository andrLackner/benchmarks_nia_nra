unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x337 (* (- 18) (* m!1 m!1 n!0))))
 (let ((?x533 (* (- 1) (* c!3 k!2))))
 (let ((?x490 (* (- 216) n!0)))
 (let ((?x547 (* (- 108) m!1)))
 (let ((?x504 (* m!1 m!1)))
 (let ((?x544 (* (- 18) ?x504)))
 (let ((?x548 (+ c!3 k!2)))
 (let ((?x523 (+ m!1 k!2)))
 (let ((?x168 (+ 6 m!1)))
 (let ((?x550 (+ 1 n!0)))
 (let ((?x398 (* (- 108) (* m!1 n!0))))
 (let ((?x165 (* (- 1) (* m!1 m!1 m!1))))
 (let ((?x719 (* (- 1) (* m!1 m!1 m!1 n!0))))
 (let ((?x100 (* k!2 k!2)))
 (let ((?x576 (* (- 1) ?x100)))
 (let ((?x711 (+ (- 216) ?x576 (* (- 1) (* m!1 n!0 c!3)) (* (- 1) (* n!0 k!2 k!2)) (* (- 1) (* m!1 c!3)) (* (- 1) (* m!1 n!0 k!2)) ?x719 ?x165 ?x398 (* (- 1) (* m!1 k!2)) (* (- 1) (* ?x550 ?x168 ?x168 ?x168 ?x523 ?x523 ?x523 ?x548 ?x548 ?x548)) ?x544 ?x547 ?x490 ?x533 ?x337 (* (- 1) (* n!0 c!3 k!2)))))
 (let (($x932 (<= ?x711 0)))
 (let ((?x466 (* (- 1) k!2)))
 (let ((?x227 (* n!0 k!2)))
 (let ((?x462 (+ ?x227 (* 2 n!0) (* (- 3) c!3) ?x466)))
 (let (($x590 (<= ?x462 (- 1))))
 (let (($x726 (= ?x462 (- 1))))
 (let ((?x394 (* (- 32) k!2)))
 (let ((?x118 (* (- 9) (* n!0 c!3))))
 (let ((?x526 (* (- 27) c!3)))
 (let ((?x617 (* 9 n!0)))
 (let ((?x393 (* (- 5) m!1)))
 (let ((?x390 (+ 13 ?x100 (* (- 9) ?x227) (* 2 (* m!1 k!2)) ?x504 ?x393 ?x617 ?x526 ?x118 ?x394)))
 (let ((?x155 (* ?x711 ?x390)))
 (let (($x164 (= ?x155 0)))
 (let (($x702 (not $x164)))
 (let ((?x496 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x466)))
 (let (($x527 (= ?x496 (- 1))))
 (let ((?x367 (+ ?x100 ?x617 (* (- 18) c!3) ?x118 (* (- 5) k!2))))
 (let (($x391 (= ?x367 (- 4))))
 (let ((?x595 (+ m!1 (* (- 6) n!0))))
 (let (($x509 (= ?x595 6)))
 (let (($x376 (and $x509 $x391 $x726 $x527 $x702)))
 (let ((?x385 (+ 13 ?x526 ?x394 ?x393 ?x617 ?x100 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x504)))
 (let ((?x142 (+ k!2 m!1)))
 (let ((?x395 (+ (- 216) ?x547 ?x490 ?x576 (* (- 1) (* ?x550 ?x168 ?x168 ?x168 ?x142 ?x142 ?x142 ?x548 ?x548 ?x548)) (* (- 1) (* k!2 m!1)) ?x544 ?x337 ?x719 ?x165 (* (- 1) (* c!3 m!1)) ?x533 (* (- 1) (* k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 n!0)) (* (- 1) (* c!3 m!1 n!0)) (* (- 1) (* c!3 k!2 n!0)) ?x398)))
 (let (($x522 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x512 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) ?x576 (* 9 (* c!3 n!0)))))
 (let (($x558 (and $x509 (= ?x512 4) $x522 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x395 ?x385) 0)))))
 (let (($x374 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x609 (* (- 108) (* m n))))
 (let ((?x752 (* (- 1) (* c k n))))
 (let ((?x755 (* (- 1) (* c m n))))
 (let ((?x754 (* (- 1) (* k k n))))
 (let ((?x757 (* (- 1) (* k m n))))
 (let ((?x756 (* (- 1) (* c k))))
 (let ((?x759 (* (- 1) (* c m))))
 (let ((?x565 (* (- 1) (* m m m))))
 (let ((?x568 (* (- 1) (* m m m n))))
 (let ((?x587 (* (- 18) (* m m n))))
 (let ((?x612 (* (- 18) ?x461)))
 (let ((?x460 (* k m)))
 (let ((?x758 (* (- 1) ?x460)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x705 (* (- 1) (* ?x342 ?x489 ?x489 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x584 (* (- 216) n)))
 (let ((?x607 (* (- 108) m)))
 (let ((?x540 (+ (- 216) ?x607 ?x584 ?x212 ?x705 ?x758 ?x612 ?x587 ?x568 ?x565 ?x759 ?x756 ?x757 ?x754 ?x755 ?x752 ?x609)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x540 ?x482) 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x615 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x529 (* (- 18) c)))
 (let ((?x691 (+ 13 ?x529 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x224 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) (+ 6 m)))))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x705 (* (- 1) (* ?x342 ?x489 ?x489 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x599 (not (= (* (+ ?x705 (* (- 1) (* ?x342 ?x72 ?x68)) ?x224) ?x691) 0))))
 (let (($x589 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x358 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x358 $x589 $x599))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x514 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x609 (* (- 108) (* m n))))
 (let ((?x752 (* (- 1) (* c k n))))
 (let ((?x755 (* (- 1) (* c m n))))
 (let ((?x754 (* (- 1) (* k k n))))
 (let ((?x757 (* (- 1) (* k m n))))
 (let ((?x756 (* (- 1) (* c k))))
 (let ((?x759 (* (- 1) (* c m))))
 (let ((?x565 (* (- 1) (* m m m))))
 (let ((?x568 (* (- 1) (* m m m n))))
 (let ((?x587 (* (- 18) (* m m n))))
 (let ((?x612 (* (- 18) ?x461)))
 (let ((?x460 (* k m)))
 (let ((?x758 (* (- 1) ?x460)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x705 (* (- 1) (* ?x342 ?x489 ?x489 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x584 (* (- 216) n)))
 (let ((?x607 (* (- 108) m)))
 (let ((?x540 (+ (- 216) ?x607 ?x584 ?x212 ?x705 ?x758 ?x612 ?x587 ?x568 ?x565 ?x759 ?x756 ?x757 ?x754 ?x755 ?x752 ?x609)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x185 (and $x125 $x209 $x261 $x299 (not (= (* ?x540 ?x482) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x529 (* (- 18) c)))
 (let ((?x691 (+ 13 ?x529 (* (- 23) k) (* (- 9) (* ?x342 ?x68)) ?x427 ?x48 ?x78)))
 (let ((?x234 (+ ?x705 (* (- 1) (* ?x342 ?x72 ?x68)) (* (- 1) (* ?x342 ?x489 ?x489 ?x489)))))
 (let (($x599 (not (= (* ?x234 ?x691) 0))))
 (let (($x589 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x358 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x693 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x358 $x589 $x599)))
 (rewrite (= $x693 $x185))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x604 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x529 (* (- 18) c)))
 (let ((?x691 (+ 13 ?x529 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x224 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) (+ 6 m)))))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x705 (* (- 1) (* ?x342 ?x489 ?x489 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x599 (not (= (* (+ ?x705 (* (- 1) (* ?x342 ?x72 ?x68)) ?x224) ?x691) 0))))
 (let (($x589 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x469 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x99 (= (+ ?x529 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x99 $x469 $x589 $x599))))))))))))))))) :qid k!34))
 ))
 (let ((?x620 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x529 (* (- 18) c)))
 (let ((?x691 (+ 13 ?x529 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x224 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) (+ 6 m)))))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x705 (* (- 1) (* ?x342 ?x489 ?x489 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x599 (not (= (* (+ ?x705 (* (- 1) (* ?x342 ?x72 ?x68)) ?x224) ?x691) 0))))
 (let (($x589 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x358 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x693 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x358 $x589 $x599)))
 (let (($x469 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x99 (= (+ ?x529 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x613 (and $x125 $x99 $x469 $x589 $x599)))
 (rewrite (= $x613 $x693)))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x85 (- (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70) (* ?x68 ?x72 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x88 (= (* (+ ?x76 (* 9 ?x70) ?x78) (- ?x85 (* ?x81 ?x81 ?x81 ?x70))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x88)))))))))))))))))) :qid k!34))
 ))
 (let ((?x606 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x529 (* (- 18) c)))
 (let ((?x691 (+ 13 ?x529 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x224 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) (+ 6 m)))))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x705 (* (- 1) (* ?x342 ?x489 ?x489 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x599 (not (= (* (+ ?x705 (* (- 1) (* ?x342 ?x72 ?x68)) ?x224) ?x691) 0))))
 (let (($x589 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x469 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x99 (= (+ ?x529 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x613 (and $x125 $x99 $x469 $x589 $x599)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x85 (- (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70) (* ?x68 ?x72 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x88 (= (* (+ ?x76 (* 9 ?x70) ?x78) (- ?x85 (* ?x81 ?x81 ?x81 ?x70))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x88)))))
 (rewrite (= $x91 $x613))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x696 (mp (mp @x93 (quant-intro (proof-bind ?x606) (= $x92 $x604)) $x604) (rewrite (= $x604 $x604)) $x604)))
 (let ((@x619 (mp (mp @x696 (quant-intro (proof-bind ?x620) (= $x604 $x615)) $x615) (quant-intro (proof-bind ?x514) (= $x615 $x374)) $x374)))
 (let ((@x567 (mp (mp~ @x619 (sk (~ $x374 $x558)) $x558) (rewrite (= $x558 $x376)) $x376)))
 (let ((@x723 (and-elim @x567 $x726)))
 (let ((@x687 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x590)) @x723 $x590)))
 (let (($x116 (>= ?x462 (- 1))))
 (let ((@x742 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x116)) @x723 $x116)))
 (let (($x588 (<= ?x367 (- 4))))
 (let ((@x505 (and-elim @x567 $x391)))
 (let ((@x456 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x588)) @x505 $x588)))
 (let (($x591 (>= ?x367 (- 4))))
 (let ((@x388 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x591)) @x505 $x591)))
 (let (($x585 (<= ?x595 6)))
 (let ((@x382 (and-elim @x567 $x509)))
 (let ((@x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x509) $x585)) @x382 $x585)))
 (let (($x579 (>= ?x595 6)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x509) $x579)) @x382 $x579)))
 (let (($x333 (<= ?x496 (- 1))))
 (let ((@x730 (and-elim @x567 $x527)))
 (let ((@x581 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x527) $x333)) @x730 $x333)))
 (let (($x596 (>= ?x496 (- 1))))
 (let ((@x167 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x527) $x596)) @x730 $x596)))
 (let (($x871 (not (<= ?x155 0))))
 (let (($x117 (>= ?x155 0)))
 (let (($x964 (not $x932)))
 (let (($x381 (not $x117)))
 (let ((@x387 (hypothesis $x381)))
 (let (($x341 (>= ?x711 0)))
 (let ((@x647 (hypothesis (not $x341))))
 (let ((@x562 ((_ th-lemma arith) @x387 @x647 @x167 @x581 @x167 @x581 @x388 @x456 @x167 @x581 @x388 @x456 @x388 @x456 @x167 @x581 @x742 @x687 @x388 @x456 @x167 @x581 @x388 @x456 @x295 @x275 @x295 @x275 @x167 @x581 @x388 @x456 @x742 @x687 false)))
 (let ((@x927 ((_ th-lemma arith farkas 1 1 1) @x387 (unit-resolution (lemma @x562 (or $x341 $x117)) @x387 $x341) (hypothesis $x932) false)))
 (let ((@x962 ((_ th-lemma arith) @x387 (unit-resolution (lemma @x927 (or $x964 $x117)) @x387 $x964) @x167 @x581 @x295 @x275 @x167 @x581 @x295 @x275 @x388 @x456 @x742 @x687 false)))
 (let ((@x943 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x164 $x871 $x381)) (and-elim @x567 $x702) (or $x871 $x381))))
 (let ((@x791 (unit-resolution @x943 (lemma @x962 $x117) $x871)))
 (let ((@x1137 ((_ th-lemma arith) @x791 (hypothesis $x964) @x742 @x687 @x167 @x581 @x167 @x581 @x742 @x687 @x167 @x581 @x167 @x581 @x167 @x581 @x295 @x275 @x742 @x687 @x295 @x275 @x295 @x275 @x742 @x687 @x388 @x456 @x742 @x687 false)))
 (let ((@x1110 ((_ th-lemma arith) @x791 @x647 @x742 @x687 @x167 @x581 @x742 @x687 @x167 @x581 @x742 @x687 @x167 @x581 @x167 @x581 @x167 @x581 @x295 @x275 @x295 @x275 @x742 @x687 @x388 @x456 @x742 @x687 false)))
 ((_ th-lemma arith farkas 1 1 1) @x791 (lemma @x1110 $x341) (lemma @x1137 $x932) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 206
 :arith-assert-diseq        18
 :arith-assert-lower        1104
 :arith-assert-upper        647
 :arith-bound-prop          7
 :arith-branch-var          22
 :arith-conflicts           48
 :arith-eq-adapter          23
 :arith-fixed-eqs           291
 :arith-gcd-tests           189
 :arith-gomory-cuts         13
 :arith-grobner             68
 :arith-ineq-splits         22
 :arith-max-min             6144
 :arith-nonlinear-bounds    336
 :arith-nonlinear-horner    739
 :arith-num-rows            20
 :arith-offset-eqs          16
 :arith-patches             57
 :arith-patches_succ        13
 :arith-pivots              515
 :arith-pseudo-nonlinear    306
 :arith-row-summations      2672
 :arith-tableau-max-columns 64
 :arith-tableau-max-rows    20
 :conflicts                 50
 :decisions                 252
 :del-clause                82
 :final-checks              188
 :max-memory                4.03
 :memory                    3.22
 :minimized-lits            12
 :mk-bool-var               252
 :mk-clause                 173
 :num-allocs                32885200
 :num-checks                1
 :propagations              183
 :rlimit-count              886214
 :time                      0.29
 :total-time                0.30)
