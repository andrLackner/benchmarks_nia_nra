unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x86 (* (- 1) y!0)))
 (let ((?x149 (+ y00 x00 ?x86 (* (- 1) x!1))))
 (let (($x311 (>= ?x149 0)))
 (let (($x411 (= ?x149 0)))
 (let ((?x186 (* 3 (* y!0 y!0 x!1))))
 (let ((?x338 (* y!0 y!0 x!1 x!1 x!1)))
 (let ((?x302 (* x!1 x!1 x!1)))
 (let ((?x162 (+ 1 x!1)))
 (let ((?x165 (+ (- 1) y!0)))
 (let ((?x301 (* ?x165 ?x165 ?x165 ?x162 ?x162 ?x162)))
 (let ((?x292 (* x!1 x!1)))
 (let ((?x222 (* 3 ?x292)))
 (let ((?x378 (* (- 6) (* y!0 x!1 x!1))))
 (let ((?x159 (* y!0 y!0)))
 (let ((?x211 (* 2 x!1)))
 (let ((?x406 (+ (- 1) ?x86 (* (- 2) (* y!0 x!1 x!1 x!1)) ?x211 ?x159 (* 3 (* y!0 y!0 x!1 x!1)) ?x378 ?x222 ?x301 ?x302 ?x338 ?x186 (* (- 5) (* y!0 x!1)))))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x68 (+ ?x64 ?x71 y!0 x!1)))
 (let ((?x368 (* ?x68 ?x406)))
 (let (($x109 (= ?x368 0)))
 (let (($x391 (not $x109)))
 (let ((?x168 (* (- 3) ?x292)))
 (let ((?x220 (+ 1 y!0)))
 (let ((?x155 (+ (- 1) x!1)))
 (let ((?x199 (* ?x155 ?x155 ?x155 ?x220 ?x220 ?x220)))
 (let ((?x141 (* (- 1) ?x159)))
 (let ((?x218 (* 4 x!1)))
 (let ((?x158 (* (- 3) y!0)))
 (let ((?x366 (+ (- 3) ?x158 (* 2 (* y!0 x!1 x!1 x!1)) ?x218 ?x141 (* (- 3) (* y!0 y!0 x!1 x!1)) ?x199 ?x378 ?x168 ?x302 ?x338 ?x186 (* 7 (* y!0 x!1)))))
 (let ((?x399 (* ?x68 ?x366)))
 (let (($x386 (= ?x399 0)))
 (let (($x256 (or (not $x386) $x391)))
 (let (($x269 (and $x411 $x256)))
 (let ((?x214 (* 3 (* x!1 y!0 y!0))))
 (let ((?x289 (* x!1 x!1 x!1 y!0 y!0)))
 (let ((?x150 (* (- 6) (* x!1 x!1 y!0))))
 (let ((?x288 (+ (- 1) ?x211 ?x86 (* (- 5) (* x!1 y!0)) (* (- 2) (* x!1 x!1 x!1 y!0)) ?x150 ?x302 ?x222 (* 3 (* x!1 x!1 y!0 y!0)) ?x289 ?x214 ?x159 ?x301)))
 (let ((?x154 (+ x!1 y!0 ?x64 ?x71)))
 (let ((?x226 (+ (- 3) ?x218 ?x158 (* 7 (* x!1 y!0)) ?x199 (* 2 (* x!1 x!1 x!1 y!0)) ?x150 ?x302 ?x168 (* (- 3) (* x!1 x!1 y!0 y!0)) ?x289 ?x214 ?x141)))
 (let (($x173 (and (= ?x154 0) (or (not (= (* ?x154 ?x226) 0)) (not (= (* ?x154 ?x288) 0))))))
 (let (($x354 (exists ((x Int) (y Int) )(! (let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x409 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x215 (* y y)))
 (let ((?x207 (* x y y)))
 (let ((?x426 (* 3 ?x207)))
 (let ((?x203 (* x x x y y)))
 (let ((?x201 (* x x y y)))
 (let ((?x427 (* 3 ?x201)))
 (let ((?x190 (* x x)))
 (let ((?x421 (* 3 ?x190)))
 (let ((?x184 (* x x x)))
 (let ((?x175 (* x x y)))
 (let ((?x424 (* (- 6) ?x175)))
 (let ((?x169 (* x x x y)))
 (let ((?x425 (* (- 2) ?x169)))
 (let ((?x134 (* x y)))
 (let ((?x439 (* (- 5) ?x134)))
 (let ((?x133 (* (- 1) y)))
 (let ((?x272 (* 2 x)))
 (let ((?x300 (+ (- 1) ?x272 ?x133 ?x439 ?x425 ?x424 ?x184 ?x421 ?x427 ?x203 ?x426 ?x215 ?x409)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x85 (+ x y ?x64 ?x71)))
 (let ((?x213 (* (- 1) ?x215)))
 (let ((?x283 (* (- 3) ?x201)))
 (let ((?x280 (* 2 ?x169)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x296 (* (- 3) y)))
 (let ((?x161 (+ (- 3) (* 4 x) ?x296 (* 7 ?x134) ?x144 ?x280 ?x424 ?x184 (* (- 3) ?x190) ?x283 ?x203 ?x426 ?x213)))
 (let (($x90 (= ?x85 0)))
 (and $x90 (or (not (= (* ?x85 ?x161) 0)) (not (= (* ?x85 ?x300) 0))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x393 (exists ((x Int) (y Int) )(! (let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x409 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x215 (* y y)))
 (let ((?x207 (* x y y)))
 (let ((?x426 (* 3 ?x207)))
 (let ((?x203 (* x x x y y)))
 (let ((?x201 (* x x y y)))
 (let ((?x427 (* 3 ?x201)))
 (let ((?x190 (* x x)))
 (let ((?x421 (* 3 ?x190)))
 (let ((?x184 (* x x x)))
 (let ((?x169 (* x x x y)))
 (let ((?x425 (* (- 2) ?x169)))
 (let ((?x272 (* 2 x)))
 (let ((?x458 (+ (- 1) ?x272 (* (- 1) (* y 1 x x)) (* (- 1) (* y x 1 x)) (* (- 1) (* y 1 1 x)) (* (- 1) (* y x x 1)) (* (- 1) (* y 1 1 1)) (* (- 2) (* x y)) (* (- 1) (* y 1 x 1)) ?x425 (* (- 3) (* x x y)) ?x184 ?x421 ?x427 ?x203 ?x426 ?x215 (* (- 1) (* y x 1 1)) ?x409)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x85 (+ x y ?x64 ?x71)))
 (let ((?x213 (* (- 1) ?x215)))
 (let ((?x283 (* (- 3) ?x201)))
 (let ((?x280 (* 2 ?x169)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x296 (* (- 3) y)))
 (let ((?x299 (+ (- 3) (* 3 x) ?x296 (* 5 (* x y)) ?x144 ?x280 (* (- 4) (* x x y)) ?x184 (* (- 2) ?x190) ?x283 ?x203 (* 2 ?x207) (* (- 1) (* x (- 1) y y)) ?x213 (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)))))
 (let (($x305 (not (= (* ?x85 ?x299) 0))))
 (let (($x90 (= ?x85 0)))
 (and $x90 (or $x305 (not (= (* ?x85 ?x458) 0))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x384 (lambda ((x Int) (y Int) )(let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x409 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x215 (* y y)))
 (let ((?x207 (* x y y)))
 (let ((?x426 (* 3 ?x207)))
 (let ((?x203 (* x x x y y)))
 (let ((?x201 (* x x y y)))
 (let ((?x427 (* 3 ?x201)))
 (let ((?x190 (* x x)))
 (let ((?x421 (* 3 ?x190)))
 (let ((?x184 (* x x x)))
 (let ((?x175 (* x x y)))
 (let ((?x424 (* (- 6) ?x175)))
 (let ((?x169 (* x x x y)))
 (let ((?x425 (* (- 2) ?x169)))
 (let ((?x134 (* x y)))
 (let ((?x439 (* (- 5) ?x134)))
 (let ((?x133 (* (- 1) y)))
 (let ((?x272 (* 2 x)))
 (let ((?x300 (+ (- 1) ?x272 ?x133 ?x439 ?x425 ?x424 ?x184 ?x421 ?x427 ?x203 ?x426 ?x215 ?x409)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x85 (+ x y ?x64 ?x71)))
 (let ((?x213 (* (- 1) ?x215)))
 (let ((?x283 (* (- 3) ?x201)))
 (let ((?x280 (* 2 ?x169)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x296 (* (- 3) y)))
 (let ((?x161 (+ (- 3) (* 4 x) ?x296 (* 7 ?x134) ?x144 ?x280 ?x424 ?x184 (* (- 3) ?x190) ?x283 ?x203 ?x426 ?x213)))
 (let (($x90 (= ?x85 0)))
 (let (($x263 (and $x90 (or (not (= (* ?x85 ?x161) 0)) (not (= (* ?x85 ?x300) 0))))))
 (let ((?x458 (+ (- 1) ?x272 (* (- 1) (* y 1 x x)) (* (- 1) (* y x 1 x)) (* (- 1) (* y 1 1 x)) (* (- 1) (* y x x 1)) (* (- 1) (* y 1 1 1)) (* (- 2) ?x134) (* (- 1) (* y 1 x 1)) ?x425 (* (- 3) ?x175) ?x184 ?x421 ?x427 ?x203 ?x426 ?x215 (* (- 1) (* y x 1 1)) ?x409)))
 (let ((?x299 (+ (- 3) (* 3 x) ?x296 (* 5 ?x134) ?x144 ?x280 (* (- 4) ?x175) ?x184 (* (- 2) ?x190) ?x283 ?x203 (* 2 ?x207) (* (- 1) (* x (- 1) y y)) ?x213 (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)))))
 (let (($x305 (not (= (* ?x85 ?x299) 0))))
 (let (($x462 (and $x90 (or $x305 (not (= (* ?x85 ?x458) 0))))))
 (rewrite (= $x462 $x263)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x372 (exists ((x Int) (y Int) )(! (let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x409 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x70 (+ x ?x64 ?x71 y)))
 (let (($x418 (= (* ?x70 (+ (- 1) (* ?x105 ?x130) ?x409 (* ?x105 ?x105 ?x130 ?x130 ?x130))) 0)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let (($x387 (= (* ?x70 (+ (- 1) (* ?x80 ?x126) ?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126))) 0)))
 (and (= ?x70 0) (or (not $x387) (not $x418)))))))))))))) :qid k!27))
 ))
 (let ((?x308 (lambda ((x Int) (y Int) )(let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x409 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x215 (* y y)))
 (let ((?x207 (* x y y)))
 (let ((?x426 (* 3 ?x207)))
 (let ((?x203 (* x x x y y)))
 (let ((?x201 (* x x y y)))
 (let ((?x427 (* 3 ?x201)))
 (let ((?x190 (* x x)))
 (let ((?x421 (* 3 ?x190)))
 (let ((?x184 (* x x x)))
 (let ((?x169 (* x x x y)))
 (let ((?x425 (* (- 2) ?x169)))
 (let ((?x272 (* 2 x)))
 (let ((?x458 (+ (- 1) ?x272 (* (- 1) (* y 1 x x)) (* (- 1) (* y x 1 x)) (* (- 1) (* y 1 1 x)) (* (- 1) (* y x x 1)) (* (- 1) (* y 1 1 1)) (* (- 2) (* x y)) (* (- 1) (* y 1 x 1)) ?x425 (* (- 3) (* x x y)) ?x184 ?x421 ?x427 ?x203 ?x426 ?x215 (* (- 1) (* y x 1 1)) ?x409)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x85 (+ x y ?x64 ?x71)))
 (let ((?x213 (* (- 1) ?x215)))
 (let ((?x283 (* (- 3) ?x201)))
 (let ((?x280 (* 2 ?x169)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x296 (* (- 3) y)))
 (let ((?x299 (+ (- 3) (* 3 x) ?x296 (* 5 (* x y)) ?x144 ?x280 (* (- 4) (* x x y)) ?x184 (* (- 2) ?x190) ?x283 ?x203 (* 2 ?x207) (* (- 1) (* x (- 1) y y)) ?x213 (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)))))
 (let (($x305 (not (= (* ?x85 ?x299) 0))))
 (let (($x90 (= ?x85 0)))
 (let (($x462 (and $x90 (or $x305 (not (= (* ?x85 ?x458) 0))))))
 (let ((?x70 (+ x ?x64 ?x71 y)))
 (let (($x418 (= (* ?x70 (+ (- 1) (* ?x105 ?x130) ?x409 (* ?x105 ?x105 ?x130 ?x130 ?x130))) 0)))
 (let (($x387 (= (* ?x70 (+ (- 1) (* ?x80 ?x126) ?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126))) 0)))
 (let (($x349 (and (= ?x70 0) (or (not $x387) (not $x418)))))
 (rewrite (= $x349 $x462)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x61 (exists ((x Int) (y Int) )(! (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x55 (+ ?x38 (* ?x47 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (+ ?x38 (* ?x34 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39))))
 (let (($x59 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x55) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x59))))))))) :qid k!27))
 ))
 (let ((?x103 (lambda ((x Int) (y Int) )(let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x409 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x70 (+ x ?x64 ?x71 y)))
 (let (($x418 (= (* ?x70 (+ (- 1) (* ?x105 ?x130) ?x409 (* ?x105 ?x105 ?x130 ?x130 ?x130))) 0)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let (($x387 (= (* ?x70 (+ (- 1) (* ?x80 ?x126) ?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126))) 0)))
 (let (($x349 (and (= ?x70 0) (or (not $x387) (not $x418)))))
 (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x55 (+ ?x38 (* ?x47 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (+ ?x38 (* ?x34 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39))))
 (let (($x59 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x55) 0)))))
 (let (($x60 (and (= (+ (- (- x y00) x00) y) 0) $x59)))
 (rewrite (= $x60 $x349))))))))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x115 (mp (mp @x62 (quant-intro (proof-bind ?x103) (= $x61 $x372)) $x372) (rewrite (= $x372 $x372)) $x372)))
 (let ((@x136 (mp (mp @x115 (quant-intro (proof-bind ?x308) (= $x372 $x393)) $x393) (quant-intro (proof-bind ?x384) (= $x393 $x354)) $x354)))
 (let ((@x251 (mp (mp~ @x136 (sk (~ $x354 $x173)) $x173) (rewrite (= $x173 $x269)) $x269)))
 (let ((@x365 (and-elim @x251 $x411)))
 (let ((@x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x411) $x311)) @x365 $x311)))
 (let (($x388 (<= ?x149 0)))
 (let ((@x195 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x411) $x388)) @x365 $x388)))
 (let (($x396 (not (<= ?x368 0))))
 (let (($x253 (>= ?x368 0)))
 (let (($x441 (>= ?x399 0)))
 (let (($x436 (<= ?x399 0)))
 (let ((@x351 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x386 (not $x436) (not $x441))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x436)) @x195 @x330 false) $x436) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x441)) @x195 @x330 false) $x441) $x386)))
 (let ((@x431 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x109 $x396 (not $x253))) (unit-resolution (and-elim @x251 $x256) @x351 $x391) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x253)) @x195 @x330 false) $x253) $x396)))
 ((_ th-lemma arith farkas 1 1 1) @x431 @x195 @x330 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             168
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.60
 :memory                    3.10
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1201584
 :num-checks                1
 :propagations              14
 :rlimit-count              2867
 :time                      0.01
 :total-time                0.01)
