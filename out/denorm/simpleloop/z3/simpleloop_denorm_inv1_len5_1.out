unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x348 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x420 (>= ?x348 0)))
 (let (($x379 (= ?x348 0)))
 (let ((?x485 (* 2 (* x!1 x!1 x!1 y!0))))
 (let ((?x198 (* (- 3) (* x!1 x!1))))
 (let ((?x224 (* (- 1) (* x!1 x!1 y!0 y!0 y!0))))
 (let ((?x466 (* x!1 x!1 x!1)))
 (let ((?x460 (* x!1 x!1 x!1 y!0 y!0)))
 (let ((?x486 (* (- 9) (* x!1 x!1 y!0))))
 (let ((?x232 (* (- 10) y!0)))
 (let ((?x434 (* (- 6) (* x!1 x!1 y!0 y!0))))
 (let ((?x137 (* 3 x!1)))
 (let ((?x316 (* 12 (* x!1 y!0))))
 (let ((?x203 (* (- 8) (* y!0 y!0))))
 (let ((?x418 (* 2 (* x!1 y!0 y!0 y!0))))
 (let ((?x538 (* (- 2) (* y!0 y!0 y!0))))
 (let ((?x143 (* 9 (* x!1 y!0 y!0))))
 (let ((?x347 (+ (- 3) ?x143 ?x538 ?x418 ?x203 ?x316 ?x137 ?x434 ?x232 ?x486 ?x460 ?x466 ?x224 ?x198 ?x485)))
 (let ((?x371 (* (+ (* (- 1) y00) (* (- 1) x00) x!1 y!0) ?x347)))
 (let (($x346 (= ?x371 0)))
 (let (($x368 (not $x346)))
 (let (($x294 (and $x379 $x368)))
 (let ((?x488 (+ (- 3) ?x137 ?x232 ?x203 ?x538 ?x418 ?x224 ?x316 ?x143 ?x434 ?x460 ?x198 ?x466 ?x486 ?x485)))
 (let ((?x64 (* (- 1) x00)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x318 (+ x!1 y!0 ?x57 ?x64)))
 (let (($x516 (and (= ?x318 0) (not (= (* ?x318 ?x488) 0)))))
 (let (($x419 (exists ((x Int) (y Int) )(! (let ((?x376 (* 2 (* x x x y))))
 (let ((?x330 (* x x x)))
 (let ((?x314 (* x x x y y)))
 (let ((?x312 (* x x y y)))
 (let ((?x115 (* (- 6) ?x312)))
 (let ((?x212 (* (- 1) (* x x y y y))))
 (let ((?x208 (* x y y y)))
 (let ((?x513 (* 2 ?x208)))
 (let ((?x544 (* (- 2) (* y y y))))
 (let ((?x543 (* (- 8) (* y y))))
 (let ((?x541 (* (- 10) y)))
 (let ((?x448 (+ (- 3) (* 3 x) ?x541 ?x543 ?x544 ?x513 ?x212 (* 12 (* x y)) (* 9 (* x y y)) ?x115 ?x314 (* (- 3) (* x x)) ?x330 (* (- 9) (* x x y)) ?x376)))
 (let ((?x64 (* (- 1) x00)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x78 (+ x y ?x57 ?x64)))
 (let (($x83 (= ?x78 0)))
 (and $x83 (not (= (* ?x78 ?x448) 0))))))))))))))))))) :qid k!26))
 ))
 (let (($x584 (exists ((x Int) (y Int) )(! (let ((?x376 (* 2 (* x x x y))))
 (let ((?x330 (* x x x)))
 (let ((?x314 (* x x x y y)))
 (let ((?x312 (* x x y y)))
 (let ((?x115 (* (- 6) ?x312)))
 (let ((?x307 (* (- 1) (* x (- 1) y y))))
 (let ((?x303 (* (- 1) (* x x 1 y))))
 (let ((?x296 (* (- 1) (* x (- 1) 1 y))))
 (let ((?x292 (* (- 1) (* x x y 1))))
 (let ((?x285 (* (- 1) (* x (- 1) y 1))))
 (let ((?x281 (* (- 1) (* x x 1 1))))
 (let ((?x274 (* (- 1) (* x (- 1) 1 1))))
 (let ((?x212 (* (- 1) (* x x y y y))))
 (let ((?x208 (* x y y y)))
 (let ((?x513 (* 2 ?x208)))
 (let ((?x544 (* (- 2) (* y y y))))
 (let ((?x543 (* (- 8) (* y y))))
 (let ((?x541 (* (- 10) y)))
 (let ((?x573 (+ (- 3) (* 2 x) ?x541 ?x543 ?x544 ?x513 ?x212 (* 10 (* x y)) (* 8 (* x y y)) ?x274 ?x281 ?x285 ?x292 ?x296 ?x303 ?x307 ?x115 ?x314 (* (- 2) (* x x)) ?x330 (* (- 7) (* x x y)) ?x376)))
 (let ((?x64 (* (- 1) x00)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x78 (+ x y ?x57 ?x64)))
 (let (($x83 (= ?x78 0)))
 (and $x83 (not (= (* ?x78 ?x573) 0)))))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x525 (lambda ((x Int) (y Int) )(let ((?x376 (* 2 (* x x x y))))
 (let ((?x330 (* x x x)))
 (let ((?x314 (* x x x y y)))
 (let ((?x312 (* x x y y)))
 (let ((?x115 (* (- 6) ?x312)))
 (let ((?x212 (* (- 1) (* x x y y y))))
 (let ((?x208 (* x y y y)))
 (let ((?x513 (* 2 ?x208)))
 (let ((?x544 (* (- 2) (* y y y))))
 (let ((?x543 (* (- 8) (* y y))))
 (let ((?x541 (* (- 10) y)))
 (let ((?x448 (+ (- 3) (* 3 x) ?x541 ?x543 ?x544 ?x513 ?x212 (* 12 (* x y)) (* 9 (* x y y)) ?x115 ?x314 (* (- 3) (* x x)) ?x330 (* (- 9) (* x x y)) ?x376)))
 (let ((?x64 (* (- 1) x00)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x78 (+ x y ?x57 ?x64)))
 (let (($x83 (= ?x78 0)))
 (let (($x86 (and $x83 (not (= (* ?x78 ?x448) 0)))))
 (let ((?x307 (* (- 1) (* x (- 1) y y))))
 (let ((?x303 (* (- 1) (* x x 1 y))))
 (let ((?x296 (* (- 1) (* x (- 1) 1 y))))
 (let ((?x292 (* (- 1) (* x x y 1))))
 (let ((?x285 (* (- 1) (* x (- 1) y 1))))
 (let ((?x281 (* (- 1) (* x x 1 1))))
 (let ((?x274 (* (- 1) (* x (- 1) 1 1))))
 (let ((?x573 (+ (- 3) (* 2 x) ?x541 ?x543 ?x544 ?x513 ?x212 (* 10 (* x y)) (* 8 (* x y y)) ?x274 ?x281 ?x285 ?x292 ?x296 ?x303 ?x307 ?x115 ?x314 (* (- 2) (* x x)) ?x330 (* (- 7) (* x x y)) ?x376)))
 (let (($x246 (and $x83 (not (= (* ?x78 ?x573) 0)))))
 (rewrite (= $x246 $x86)))))))))))))))))))))))))))))
 ))
 (let (($x59 (exists ((x Int) (y Int) )(! (let ((?x166 (+ 1 y)))
 (let ((?x421 (+ (- 1) x)))
 (let ((?x260 (+ (* (- 1) (* ?x421 ?x421 ?x166 ?x166 ?x166)) (* ?x421 ?x421 ?x421 ?x166 ?x166) (* (- 1) (* ?x166 ?x166)) (* ?x421 ?x421) (* (- 1) (* ?x166 ?x166 ?x166)))))
 (let ((?x64 (* (- 1) x00)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x126 (+ x ?x57 ?x64 y)))
 (and (= ?x126 0) (not (= (* ?x126 ?x260) 0))))))))) :qid k!26))
 ))
 (let ((?x522 (lambda ((x Int) (y Int) )(let ((?x376 (* 2 (* x x x y))))
 (let ((?x330 (* x x x)))
 (let ((?x314 (* x x x y y)))
 (let ((?x312 (* x x y y)))
 (let ((?x115 (* (- 6) ?x312)))
 (let ((?x307 (* (- 1) (* x (- 1) y y))))
 (let ((?x303 (* (- 1) (* x x 1 y))))
 (let ((?x296 (* (- 1) (* x (- 1) 1 y))))
 (let ((?x292 (* (- 1) (* x x y 1))))
 (let ((?x285 (* (- 1) (* x (- 1) y 1))))
 (let ((?x281 (* (- 1) (* x x 1 1))))
 (let ((?x274 (* (- 1) (* x (- 1) 1 1))))
 (let ((?x212 (* (- 1) (* x x y y y))))
 (let ((?x208 (* x y y y)))
 (let ((?x513 (* 2 ?x208)))
 (let ((?x544 (* (- 2) (* y y y))))
 (let ((?x543 (* (- 8) (* y y))))
 (let ((?x541 (* (- 10) y)))
 (let ((?x573 (+ (- 3) (* 2 x) ?x541 ?x543 ?x544 ?x513 ?x212 (* 10 (* x y)) (* 8 (* x y y)) ?x274 ?x281 ?x285 ?x292 ?x296 ?x303 ?x307 ?x115 ?x314 (* (- 2) (* x x)) ?x330 (* (- 7) (* x x y)) ?x376)))
 (let ((?x64 (* (- 1) x00)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x78 (+ x y ?x57 ?x64)))
 (let (($x83 (= ?x78 0)))
 (let (($x246 (and $x83 (not (= (* ?x78 ?x573) 0)))))
 (let ((?x166 (+ 1 y)))
 (let ((?x421 (+ (- 1) x)))
 (let ((?x260 (+ (* (- 1) (* ?x421 ?x421 ?x166 ?x166 ?x166)) (* ?x421 ?x421 ?x421 ?x166 ?x166) (* (- 1) (* ?x166 ?x166)) (* ?x421 ?x421) (* (- 1) (* ?x166 ?x166 ?x166)))))
 (let ((?x126 (+ x ?x57 ?x64 y)))
 (let (($x239 (and (= ?x126 0) (not (= (* ?x126 ?x260) 0)))))
 (rewrite (= $x239 $x246))))))))))))))))))))))))))))))))
 ))
 (let (($x54 (exists ((x Int) (y Int) )(! (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39))))
 (let ((?x49 (* (+ (- (- ?x34 y00) x00) y 1) (- (+ (- ?x42 (* ?x39 ?x39)) (* ?x34 ?x34)) (* ?x39 ?x39 ?x39)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0)))))))) :qid k!26))
 ))
 (let ((?x164 (lambda ((x Int) (y Int) )(let ((?x166 (+ 1 y)))
 (let ((?x421 (+ (- 1) x)))
 (let ((?x260 (+ (* (- 1) (* ?x421 ?x421 ?x166 ?x166 ?x166)) (* ?x421 ?x421 ?x421 ?x166 ?x166) (* (- 1) (* ?x166 ?x166)) (* ?x421 ?x421) (* (- 1) (* ?x166 ?x166 ?x166)))))
 (let ((?x64 (* (- 1) x00)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x126 (+ x ?x57 ?x64 y)))
 (let (($x239 (and (= ?x126 0) (not (= (* ?x126 ?x260) 0)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39))))
 (let ((?x49 (* (+ (- (- ?x34 y00) x00) y 1) (- (+ (- ?x42 (* ?x39 ?x39)) (* ?x34 ?x34)) (* ?x39 ?x39 ?x39)))))
 (let (($x53 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0))))))
 (rewrite (= $x53 $x239)))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x261 (mp (mp @x55 (quant-intro (proof-bind ?x164) (= $x54 $x59)) $x59) (rewrite (= $x59 $x59)) $x59)))
 (let ((@x473 (mp (mp @x261 (quant-intro (proof-bind ?x522) (= $x59 $x584)) $x584) (quant-intro (proof-bind ?x525) (= $x584 $x419)) $x419)))
 (let ((@x351 (mp (mp~ @x473 (sk (~ $x419 $x516)) $x516) (rewrite (= $x516 $x294)) $x294)))
 (let ((@x300 (and-elim @x351 $x379)))
 (let ((@x299 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x379) $x420)) @x300 $x420)))
 (let (($x293 (<= ?x348 0)))
 (let ((@x345 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x379) $x293)) @x300 $x293)))
 (let (($x483 (not (>= ?x371 0))))
 (let (($x349 (<= ?x371 0)))
 (let ((@x315 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x346 (not $x349) $x483)) (and-elim @x351 $x368) (or (not $x349) $x483))))
 (let ((@x364 (unit-resolution @x315 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x349)) @x345 @x299 false) $x349) $x483)))
 ((_ th-lemma arith farkas 1 1 1) @x364 @x345 @x299 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             66
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.61
 :memory                    3.14
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1122008
 :num-checks                1
 :propagations              4
 :rlimit-count              2160
 :time                      0.01
 :total-time                0.01)
