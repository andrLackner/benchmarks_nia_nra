unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x248 (* (- 1) k!2)))
 (let ((?x233 (* n!0 n!0)))
 (let ((?x168 (* 3 ?x233)))
 (let ((?x188 (+ ?x168 (* 3 n!0) ?x248)))
 (let (($x328 (<= ?x188 (- 1))))
 (let (($x186 (= ?x188 (- 1))))
 (let ((?x139 (* (- 1) (* m!1 m!1))))
 (let ((?x133 (+ k!2 c!3)))
 (let ((?x134 (+ m!1 k!2)))
 (let ((?x256 (+ 6 m!1)))
 (let ((?x153 (+ 1 n!0)))
 (let ((?x232 (* (- 12) m!1)))
 (let ((?x95 (+ (- 36) ?x232 (* (- 1) (* ?x153 ?x153 ?x153 ?x256 ?x134 ?x134 ?x134 ?x133)) (* (- 1) (* ?x256 ?x256 ?x134 ?x133 ?x133 ?x133)) ?x139)))
 (let ((?x391 (* ?x95 (+ 7 (* (- 1) m!1) ?x168 (* 9 n!0) ?x248))))
 (let (($x96 (= ?x391 0)))
 (let (($x362 (not $x96)))
 (let ((?x250 (* k!2 k!2)))
 (let ((?x160 (* 9 n!0)))
 (let ((?x192 (+ ?x160 ?x250 (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let ((?x180 (+ m!1 (* (- 6) n!0))))
 (let (($x341 (= ?x180 6)))
 (let (($x392 (and $x341 (= ?x192 (- 4)) (= (+ (* n!0 k!2) (* 2 n!0) ?x248 (* (- 3) c!3)) (- 1)) $x186 $x362)))
 (let ((?x262 (+ c!3 k!2)))
 (let ((?x254 (+ k!2 m!1)))
 (let ((?x240 (+ (- 36) ?x232 (* (- 1) (* ?x256 ?x256 ?x254 ?x262 ?x262 ?x262)) ?x139 (* (- 1) (* ?x153 ?x153 ?x153 ?x256 ?x254 ?x254 ?x254 ?x262)))))
 (let (($x237 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x246 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x250) (* 9 (* c!3 n!0)))))
 (let (($x360 (and $x341 (= ?x246 4) $x237 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x233)) 1) (not (= (* ?x240 (+ 7 ?x248 (* (- 1) m!1) ?x160 ?x168)) 0)))))
 (let (($x274 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x443 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x71 ?x71 ?x71 ?x78))))
 (let ((?x403 (* (- 1) (* m m))))
 (let ((?x340 (* (- 1) (* ?x390 ?x390 ?x71 ?x78 ?x78 ?x78))))
 (let ((?x263 (* (+ (- 36) (* (- 12) m) ?x340 ?x403 ?x443) (+ 7 ?x235 ?x351 ?x48 ?x267))))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) ?x266)) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= ?x263 0))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x417 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x115 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x340 (* (- 1) (* ?x390 ?x390 ?x71 ?x78 ?x78 ?x78))))
 (let ((?x303 (+ 1 n)))
 (let ((?x443 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x71 ?x71 ?x71 ?x78))))
 (let (($x170 (not (= (* (+ (* (- 1) (* ?x390 ?x390)) ?x443 ?x340) ?x115) 0))))
 (let (($x130 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x422 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x422 $x130 $x170)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x444 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x443 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x71 ?x71 ?x71 ?x78))))
 (let ((?x403 (* (- 1) (* m m))))
 (let ((?x340 (* (- 1) (* ?x390 ?x390 ?x71 ?x78 ?x78 ?x78))))
 (let ((?x263 (* (+ (- 36) (* (- 12) m) ?x340 ?x403 ?x443) (+ 7 ?x235 ?x351 ?x48 ?x267))))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) ?x266)) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x279 (and $x121 $x205 $x257 $x295 (not (= ?x263 0)))))
 (let ((?x370 (* (+ (* (- 1) (* ?x390 ?x390)) ?x443 ?x340) (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)))))
 (let (($x170 (not (= ?x370 0))))
 (let (($x130 (= (+ ?x267 ?x235 (* 3 n)) (- 1))))
 (let (($x422 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x268 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x422 $x130 $x170)))
 (rewrite (= $x268 $x279)))))))))))))))))))))))))))))))
 ))
 (let (($x172 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x115 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x340 (* (- 1) (* ?x390 ?x390 ?x71 ?x78 ?x78 ?x78))))
 (let ((?x303 (+ 1 n)))
 (let ((?x443 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x71 ?x71 ?x71 ?x78))))
 (let (($x170 (not (= (* (+ (* (- 1) (* ?x390 ?x390)) ?x443 ?x340) ?x115) 0))))
 (let (($x130 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x314 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x314 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x130 $x170))))))))))))))))) :qid k!34))
 ))
 (let ((?x419 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x115 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x340 (* (- 1) (* ?x390 ?x390 ?x71 ?x78 ?x78 ?x78))))
 (let ((?x303 (+ 1 n)))
 (let ((?x443 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x71 ?x71 ?x71 ?x78))))
 (let (($x170 (not (= (* (+ (* (- 1) (* ?x390 ?x390)) ?x443 ?x340) ?x115) 0))))
 (let (($x130 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x422 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x268 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x422 $x130 $x170)))
 (let ((?x48 (* 9 n)))
 (let ((?x314 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x173 (and $x121 (= ?x314 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x130 $x170)))
 (rewrite (= $x173 $x268))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x78 (+ c k)))
 (let ((?x68 (+ n 1)))
 (let ((?x81 (- (* (- 1) ?x76 ?x76) (* ?x78 ?x71 ?x71 ?x71 ?x76 ?x68 ?x68 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x81 (* ?x78 ?x78 ?x78 ?x71 ?x76 ?x76)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x147 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x115 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x340 (* (- 1) (* ?x390 ?x390 ?x71 ?x78 ?x78 ?x78))))
 (let ((?x303 (+ 1 n)))
 (let ((?x443 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x71 ?x71 ?x71 ?x78))))
 (let (($x170 (not (= (* (+ (* (- 1) (* ?x390 ?x390)) ?x443 ?x340) ?x115) 0))))
 (let (($x130 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x314 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x173 (and $x121 (= ?x314 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x130 $x170)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x81 (- (* (- 1) ?x76 ?x76) (* ?x78 ?x71 ?x71 ?x71 ?x76 ?x68 ?x68 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x81 (* ?x78 ?x78 ?x78 ?x71 ?x76 ?x76)))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x83 0))))))
 (rewrite (= $x87 $x173)))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x206 (mp (mp @x89 (quant-intro (proof-bind ?x147) (= $x88 $x172)) $x172) (rewrite (= $x172 $x172)) $x172)))
 (let ((@x151 (mp (mp @x206 (quant-intro (proof-bind ?x419) (= $x172 $x417)) $x417) (quant-intro (proof-bind ?x444) (= $x417 $x274)) $x274)))
 (let ((@x376 (mp (mp~ @x151 (sk (~ $x274 $x360)) $x360) (rewrite (= $x360 $x392)) $x392)))
 (let ((@x142 (and-elim @x376 $x186)))
 (let ((@x161 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x186) $x328)) @x142 $x328)))
 (let (($x183 (>= ?x180 6)))
 (let ((@x213 (and-elim @x376 $x341)))
 (let ((@x282 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x341) $x183)) @x213 $x183)))
 (let (($x136 (>= ?x188 (- 1))))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x186) $x136)) @x142 $x136)))
 (let (($x128 (<= ?x180 6)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x341) $x128)) @x213 $x128)))
 (let (($x397 (not (>= ?x391 0))))
 (let (($x396 (<= ?x391 0)))
 (let ((@x131 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x396)) @x331 @x277 @x282 @x161 false) $x396)))
 (let ((@x221 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x96 (not $x396) $x397)) (and-elim @x376 $x362) (or (not $x396) $x397))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x221 @x131 $x397) @x331 @x277 @x282 @x161 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        23
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-ineq-splits         2
 :arith-max-min             131
 :arith-nonlinear-bounds    6
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      21
 :arith-tableau-max-columns 36
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                16
 :final-checks              7
 :max-memory                3.58
 :memory                    3.08
 :mk-bool-var               28
 :mk-clause                 16
 :num-allocs                1140016
 :num-checks                1
 :propagations              12
 :rlimit-count              2970
 :time                      0.01
 :total-time                0.01)
