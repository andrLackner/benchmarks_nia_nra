unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x306 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x413 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) ?x306 (* (- 4) r!2) (* (- 2) u!1) (* (- 1) (* v!0 v!0)))))
 (let (($x160 (>= ?x413 0)))
 (let (($x420 (= ?x413 0)))
 (let ((?x430 (* v!0 v!0)))
 (let ((?x316 (* 2 u!1)))
 (let ((?x435 (* 4 r!2)))
 (let ((?x140 (* (- 1) ?x306)))
 (let ((?x312 (* (- 2) v!0)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x169 (+ ?x96 ?x112 ?x41 ?x46 ?x188 ?x312 ?x140 ?x435 ?x316 ?x430)))
 (let ((?x139 (+ r!2 u!1)))
 (let ((?x321 (+ 2 u!1)))
 (let ((?x472 (* ?x321 ?x139 ?x139 ?x139 ?x139 ?x139 ?x169 v!0 v!0 v!0 v!0)))
 (let (($x474 (= ?x472 0)))
 (let (($x477 (not $x474)))
 (let ((?x164 (* (- 1) v!0)))
 (let ((?x305 (+ ?x164 r!2)))
 (let ((?x285 (+ 2 v!0)))
 (let ((?x311 (* ?x285 ?x285 ?x285 ?x285 ?x305 ?x305 ?x305 ?x305 ?x305 ?x169 u!1)))
 (let (($x273 (= ?x311 0)))
 (let (($x423 (or (not $x273) $x477)))
 (let (($x265 (and $x420 $x423)))
 (let ((?x409 (+ ?x435 ?x316 ?x312 ?x96 ?x112 ?x41 ?x140 ?x430 ?x46 ?x188)))
 (let (($x171 (= (* ?x321 ?x139 ?x139 ?x139 ?x139 ?x139 ?x409 v!0 v!0 v!0 v!0) 0)))
 (let ((?x294 (+ r!2 ?x164)))
 (let (($x295 (= (* ?x285 ?x285 ?x285 ?x285 ?x294 ?x294 ?x294 ?x294 ?x294 ?x409 u!1) 0)))
 (let (($x431 (and (= ?x409 0) (or (not $x295) (not $x171)))))
 (let (($x385 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x227 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v) 0)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x302 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u) 0)))
 (let (($x199 (= ?x194 0)))
 (and $x199 (or (not $x302) (not $x227))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x262 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x418 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x374 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x418 v v v v) 0)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x259 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u) 0)))
 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not $x259) (not $x374))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x386 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x227 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v) 0)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x302 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u) 0)))
 (let (($x199 (= ?x194 0)))
 (let (($x167 (and $x199 (or (not $x302) (not $x227)))))
 (let ((?x418 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* ?x217 ?x217)) ?x45 ?x46 ?x188)))
 (let (($x374 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x418 v v v v) 0)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* ?x206 ?x206) ?x46 ?x188)))
 (let (($x259 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u) 0)))
 (let (($x366 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not $x259) (not $x374)))))
 (rewrite (= $x366 $x167)))))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((r Int) (u Int) (v Int) )(! (let ((?x74 (+ u 2)))
 (let ((?x70 (+ r u)))
 (let ((?x66 (- 1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x70 ?x70 ?x70 v v ?x66 ?x70 ?x70 ?x74 v v)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x52 ?x52 ?x52 ?x57 ?x57 ?x66 ?x52 ?x52 u ?x57 ?x57)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x414 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x418 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let (($x374 (= (* ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x418 v v v v) 0)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let (($x259 (= (* ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u) 0)))
 (let (($x366 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not $x259) (not $x374)))))
 (let ((?x74 (+ u 2)))
 (let ((?x66 (- 1)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x70 ?x70 ?x70 v v ?x66 ?x70 ?x70 ?x74 v v)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x52 ?x52 ?x52 ?x57 ?x57 ?x66 ?x52 ?x52 u ?x57 ?x57)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x87 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))
 (rewrite (= $x87 $x366)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x101 (mp (mp @x89 (quant-intro (proof-bind ?x414) (= $x88 $x262)) $x262) (rewrite (= $x262 $x262)) $x262)))
 (let ((@x240 (mp~ (mp @x101 (quant-intro (proof-bind ?x386) (= $x262 $x385)) $x385) (sk (~ $x385 $x431)) $x431)))
 (let ((@x473 (mp @x240 (rewrite (= $x431 $x265)) $x265)))
 (let ((@x476 (and-elim @x473 $x420)))
 (let ((@x375 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x420) $x160)) @x476 $x160)))
 (let (($x406 (<= ?x413 0)))
 (let ((@x179 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x420) $x406)) @x476 $x406)))
 (let (($x208 (not (<= ?x472 0))))
 (let (($x256 (>= ?x472 0)))
 (let (($x281 (>= ?x311 0)))
 (let (($x324 (<= ?x311 0)))
 (let ((@x147 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x273 (not $x324) (not $x281))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x324)) @x179 @x375 false) $x324) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x281)) @x179 @x375 false) $x281) $x273)))
 (let ((@x315 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x474 $x208 (not $x256))) (unit-resolution (and-elim @x473 $x423) @x147 $x477) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x256)) @x179 @x375 false) $x256) $x208)))
 ((_ th-lemma arith farkas 1 1 1) @x315 @x179 @x375 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        33
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             112
 :arith-nonlinear-bounds    16
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.57
 :memory                    19.07
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                508549
 :num-checks                1
 :propagations              14
 :rlimit-count              1971
 :time                      0.01
 :total-time                0.02)
