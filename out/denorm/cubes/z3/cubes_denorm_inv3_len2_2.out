unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x325 (* (- 1) (* k!2 k!2 m!1 m!1 m!1))))
 (let ((?x323 (* (- 6) (* k!2 k!2 k!2 k!2))))
 (let ((?x242 (* (- 6) (* k!2 k!2 m!1 m!1))))
 (let ((?x588 (* (- 12) (* k!2 k!2 k!2 m!1))))
 (let ((?x555 (* (- 2) (* k!2 k!2 k!2 m!1 m!1))))
 (let ((?x609 (* (- 1) (* k!2 k!2 k!2 k!2 m!1))))
 (let ((?x837 (+ k!2 c!3)))
 (let ((?x678 (+ k!2 m!1)))
 (let ((?x339 (+ 6 m!1)))
 (let ((?x601 (+ 1 n!0)))
 (let ((?x542 (* (- 1) (* ?x601 ?x601 ?x601 ?x339 ?x339 ?x339 ?x678 ?x678 ?x678 ?x837 ?x837 ?x837))))
 (let ((?x377 (+ (* (- 24) (* k!2 k!2 m!1 c!3)) (* (- 6) (* m!1 m!1 c!3 c!3)) (* (- 2) (* k!2 m!1 m!1 m!1 c!3)) (* (- 4) (* k!2 k!2 m!1 m!1 c!3)) (* (- 1) (* m!1 m!1 m!1 c!3 c!3)) (* (- 2) (* k!2 m!1 m!1 c!3 c!3)) (* (- 6) (* k!2 k!2 c!3 c!3)) ?x542 (* (- 12) (* k!2 k!2 k!2 c!3)) (* (- 12) (* k!2 m!1 c!3 c!3)) (* (- 1) (* k!2 k!2 m!1 c!3 c!3)) (* (- 2) (* k!2 k!2 k!2 m!1 c!3)) ?x609 ?x555 (* (- 12) (* k!2 m!1 m!1 c!3)) ?x588 ?x242 ?x323 ?x325)))
 (let (($x554 (<= ?x377 0)))
 (let ((?x193 (* (- 1) k!2)))
 (let ((?x521 (+ (* 3 n!0) ?x193 (* 3 (* n!0 n!0)))))
 (let (($x611 (<= ?x521 (- 1))))
 (let (($x855 (= ?x521 (- 1))))
 (let ((?x676 (* (- 3) c!3)))
 (let ((?x574 (* n!0 k!2)))
 (let ((?x612 (* (- 3) k!2)))
 (let ((?x581 (* 2 n!0)))
 (let ((?x556 (* ?x377 (+ 3 ?x581 ?x612 (* n!0 m!1) ?x574 ?x676))))
 (let (($x159 (= ?x556 0)))
 (let (($x559 (not $x159)))
 (let ((?x194 (+ ?x581 ?x193 ?x574 ?x676)))
 (let (($x195 (= ?x194 (- 1))))
 (let ((?x627 (* k!2 k!2)))
 (let ((?x155 (+ (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) ?x627 (* (- 18) c!3))))
 (let (($x176 (= ?x155 (- 4))))
 (let ((?x316 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x317 (= ?x316 (- 6))))
 (let (($x653 (and $x317 $x176 $x195 $x855 $x559)))
 (let ((?x629 (+ c!3 k!2)))
 (let ((?x636 (* (- 1) (* ?x601 ?x601 ?x601 ?x339 ?x339 ?x339 ?x678 ?x678 ?x678 ?x629 ?x629 ?x629))))
 (let ((?x805 (+ ?x636 ?x242 (* (- 12) (* c!3 k!2 m!1 m!1)) (* (- 6) (* c!3 c!3 m!1 m!1)) ?x588 (* (- 24) (* c!3 k!2 k!2 m!1)) (* (- 12) (* c!3 c!3 k!2 m!1)) ?x323 (* (- 12) (* c!3 k!2 k!2 k!2)) (* (- 6) (* c!3 c!3 k!2 k!2)) ?x325 (* (- 2) (* c!3 k!2 m!1 m!1 m!1)) ?x555 (* (- 1) (* c!3 c!3 m!1 m!1 m!1)) (* (- 4) (* c!3 k!2 k!2 m!1 m!1)) (* (- 2) (* c!3 c!3 k!2 m!1 m!1)) ?x609 (* (- 2) (* c!3 k!2 k!2 k!2 m!1)) (* (- 1) (* c!3 c!3 k!2 k!2 m!1)))))
 (let (($x222 (= (* ?x805 (+ 3 ?x676 ?x612 ?x581 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let (($x663 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x649 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x627) (* 9 (* c!3 n!0)))))
 (let (($x243 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x649 4) $x663 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x222))))
 (let (($x634 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x406 (+ 3 ?x218 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x839 (* (- 1) (* c c k k m))))
 (let ((?x793 (* (- 2) (* c k k k m))))
 (let ((?x841 (* (- 1) (* k k k k m))))
 (let ((?x794 (* (- 2) (* c c k m m))))
 (let ((?x799 (* (- 4) (* c k k m m))))
 (let ((?x842 (* (- 1) (* c c m m m))))
 (let ((?x803 (* (- 2) (* k k k m m))))
 (let ((?x804 (* (- 2) (* c k m m m))))
 (let ((?x847 (* (- 1) (* k k m m m))))
 (let ((?x809 (* (- 6) (* c c k k))))
 (let ((?x810 (* (- 12) (* c k k k))))
 (let ((?x815 (* (- 6) (* k k k k))))
 (let ((?x816 (* (- 12) (* c c k m))))
 (let ((?x821 (* (- 24) (* c k k m))))
 (let ((?x825 (* (- 12) (* k k k m))))
 (let ((?x826 (* (- 6) (* c c m m))))
 (let ((?x831 (* (- 12) (* c k m m))))
 (let ((?x835 (* (- 6) (* k k m m))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x286 (* (- 1) (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x140 (+ ?x286 ?x835 ?x831 ?x826 ?x825 ?x821 ?x816 ?x815 ?x810 ?x809 ?x847 ?x804 ?x803 ?x842 ?x799 ?x794 ?x841 ?x793 ?x839)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= (* ?x140 ?x406) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x144 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x273 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x286 (* (- 1) (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68))))
 (let (($x671 (not (= (* (+ ?x286 (* (- 1) (* ?x413 ?x71 ?x71 ?x68 ?x68))) ?x273) 0))))
 (let (($x608 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x189 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x189 $x608 $x671)))))))))))))))))) :qid k!34))
 ))
 (let ((?x278 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x406 (+ 3 ?x218 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x839 (* (- 1) (* c c k k m))))
 (let ((?x793 (* (- 2) (* c k k k m))))
 (let ((?x841 (* (- 1) (* k k k k m))))
 (let ((?x794 (* (- 2) (* c c k m m))))
 (let ((?x799 (* (- 4) (* c k k m m))))
 (let ((?x842 (* (- 1) (* c c m m m))))
 (let ((?x803 (* (- 2) (* k k k m m))))
 (let ((?x804 (* (- 2) (* c k m m m))))
 (let ((?x847 (* (- 1) (* k k m m m))))
 (let ((?x809 (* (- 6) (* c c k k))))
 (let ((?x810 (* (- 12) (* c k k k))))
 (let ((?x815 (* (- 6) (* k k k k))))
 (let ((?x816 (* (- 12) (* c c k m))))
 (let ((?x821 (* (- 24) (* c k k m))))
 (let ((?x825 (* (- 12) (* k k k m))))
 (let ((?x826 (* (- 6) (* c c m m))))
 (let ((?x831 (* (- 12) (* c k m m))))
 (let ((?x835 (* (- 6) (* k k m m))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x286 (* (- 1) (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x140 (+ ?x286 ?x835 ?x831 ?x826 ?x825 ?x821 ?x816 ?x815 ?x810 ?x809 ?x847 ?x804 ?x803 ?x842 ?x799 ?x794 ?x841 ?x793 ?x839)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x169 (and $x121 $x205 $x257 $x295 (not (= (* ?x140 ?x406) 0)))))
 (let ((?x233 (* (+ ?x286 (* (- 1) (* ?x413 ?x71 ?x71 ?x68 ?x68))) (+ 3 ?x218 (* (- 4) k) (* ?x338 ?x71) (* (- 1) m) ?x59))))
 (let (($x671 (not (= ?x233 0))))
 (let (($x608 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x189 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x606 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x189 $x608 $x671)))
 (rewrite (= $x606 $x169))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x596 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x273 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x286 (* (- 1) (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68))))
 (let (($x671 (not (= (* (+ ?x286 (* (- 1) (* ?x413 ?x71 ?x71 ?x68 ?x68))) ?x273) 0))))
 (let (($x608 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x274 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x274 (- 4)) (= (+ ?x218 (* n k) (* (- 1) k) ?x59) (- 1)) $x608 $x671))))))))))))))) :qid k!34))
 ))
 (let ((?x645 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x273 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x286 (* (- 1) (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68))))
 (let (($x671 (not (= (* (+ ?x286 (* (- 1) (* ?x413 ?x71 ?x71 ?x68 ?x68))) ?x273) 0))))
 (let (($x608 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x189 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x606 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x189 $x608 $x671)))
 (let ((?x48 (* 9 n)))
 (let ((?x274 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x586 (and $x121 (= ?x274 (- 4)) (= (+ ?x218 (* n k) (* (- 1) k) ?x59) (- 1)) $x608 $x671)))
 (rewrite (= $x586 $x606))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ n 1)))
 (let ((?x80 (* (- 1) ?x68 ?x68 ?x68 ?x71 ?x71 ?x71 ?x79 ?x79 ?x79 ?x72 ?x72 ?x72)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x86 (or (not (= (* ?x77 (- ?x80 (* ?x68 ?x68 ?x71 ?x71 ?x79))) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x86))))))))))))))) :qid k!34))
 ))
 (let ((?x591 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x218 (* (- 3) c)))
 (let ((?x273 (+ 3 ?x218 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x286 (* (- 1) (* ?x338 ?x338 ?x338 ?x413 ?x413 ?x413 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68))))
 (let (($x671 (not (= (* (+ ?x286 (* (- 1) (* ?x413 ?x71 ?x71 ?x68 ?x68))) ?x273) 0))))
 (let (($x608 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x274 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x586 (and $x121 (= ?x274 (- 4)) (= (+ ?x218 (* n k) (* (- 1) k) ?x59) (- 1)) $x608 $x671)))
 (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x80 (* (- 1) ?x68 ?x68 ?x68 ?x71 ?x71 ?x71 ?x79 ?x79 ?x79 ?x72 ?x72 ?x72)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x86 (or (not (= (* ?x77 (- ?x80 (* ?x68 ?x68 ?x71 ?x71 ?x79))) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x86)))
 (rewrite (= $x87 $x586))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x165 (mp (mp @x89 (quant-intro (proof-bind ?x591) (= $x88 $x596)) $x596) (rewrite (= $x596 $x596)) $x596)))
 (let ((@x332 (mp (mp @x165 (quant-intro (proof-bind ?x645) (= $x596 $x144)) $x144) (quant-intro (proof-bind ?x278) (= $x144 $x634)) $x634)))
 (let ((@x361 (mp (mp~ @x332 (sk (~ $x634 $x243)) $x243) (rewrite (= $x243 $x653)) $x653)))
 (let ((@x254 (and-elim @x361 $x855)))
 (let ((@x403 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x855) $x611)) @x254 $x611)))
 (let (($x838 (>= ?x521 (- 1))))
 (let ((@x276 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x855) $x838)) @x254 $x838)))
 (let (($x105 (<= ?x316 (- 6))))
 (let ((@x546 (and-elim @x361 $x317)))
 (let ((@x179 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x317) $x105)) @x546 $x105)))
 (let (($x583 (>= ?x316 (- 6))))
 (let ((@x171 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x317) $x583)) @x546 $x583)))
 (let (($x836 (<= ?x194 (- 1))))
 (let ((@x238 (and-elim @x361 $x195)))
 (let ((@x283 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x195) $x836)) @x238 $x836)))
 (let (($x791 (>= ?x194 (- 1))))
 (let ((@x552 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x195) $x791)) @x238 $x791)))
 (let (($x106 (<= ?x155 (- 4))))
 (let ((@x249 (and-elim @x361 $x176)))
 (let ((@x379 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x106)) @x249 $x106)))
 (let (($x111 (>= ?x155 (- 4))))
 (let ((@x142 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x111)) @x249 $x111)))
 (let (($x3265 (not (<= ?x556 0))))
 (let (($x571 (>= ?x556 0)))
 (let (($x239 (not $x554)))
 (let (($x234 (not $x571)))
 (let ((@x666 (hypothesis $x234)))
 (let (($x138 (>= ?x377 0)))
 (let (($x790 (not $x138)))
 (let ((@x3199 (hypothesis $x790)))
 (let ((@x3140 ((_ th-lemma arith) @x666 @x3199 @x171 @x179 @x171 @x179 @x171 @x179 @x276 @x403 @x171 @x179 @x552 @x283 @x171 @x179 @x171 @x179 @x552 @x283 @x171 @x179 @x142 @x379 @x276 @x403 false)))
 (let ((@x360 (lemma ((_ th-lemma arith farkas 1 1 1) @x666 (hypothesis $x138) (hypothesis $x554) false) (or $x790 $x571 $x239))))
 (let ((@x3233 (unit-resolution @x360 (unit-resolution (lemma @x3140 (or $x138 $x571)) @x666 $x138) @x666 $x239)))
 (let ((@x3196 ((_ th-lemma arith) @x666 @x3233 @x276 @x403 @x171 @x179 @x171 @x179 @x276 @x403 @x276 @x403 @x171 @x179 @x276 @x403 @x171 @x179 @x276 @x403 @x276 @x403 @x171 @x179 @x276 @x403 @x171 @x179 @x171 @x179 @x552 @x283 @x171 @x179 @x142 @x379 @x171 @x179 @x142 @x379 @x276 @x403 @x552 @x283 @x276 @x403 false)))
 (let ((@x3225 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x159 $x3265 $x234)) (and-elim @x361 $x559) (or $x3265 $x234))))
 (let ((@x3205 (unit-resolution @x3225 (lemma @x3196 $x571) $x3265)))
 (let ((@x3210 ((_ th-lemma arith) @x3205 (hypothesis $x239) @x171 @x179 @x171 @x179 @x171 @x179 @x276 @x403 @x171 @x179 @x552 @x283 @x171 @x179 @x142 @x379 @x552 @x283 @x171 @x179 @x171 @x179 @x276 @x403 false)))
 (let ((@x3240 ((_ th-lemma arith) @x3205 @x3199 @x171 @x179 @x171 @x179 @x171 @x179 @x171 @x179 @x552 @x283 @x171 @x179 @x171 @x179 @x276 @x403 false)))
 ((_ th-lemma arith farkas 1 1 1) @x3205 (lemma @x3240 $x138) (lemma @x3210 $x554) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 260
 :arith-assert-diseq        78
 :arith-assert-lower        2370
 :arith-assert-upper        2364
 :arith-bound-prop          67
 :arith-branch-var          79
 :arith-conflicts           101
 :arith-eq-adapter          29
 :arith-fixed-eqs           295
 :arith-gcd-tests           1672
 :arith-gomory-cuts         68
 :arith-grobner             135
 :arith-ineq-splits         79
 :arith-max-min             15013
 :arith-nonlinear-bounds    517
 :arith-nonlinear-horner    2020
 :arith-num-rows            26
 :arith-offset-eqs          14
 :arith-patches             188
 :arith-patches_succ        31
 :arith-pivots              4010
 :arith-pseudo-nonlinear    523
 :arith-row-summations      45668
 :arith-tableau-max-columns 89
 :arith-tableau-max-rows    26
 :conflicts                 114
 :decisions                 1025
 :del-clause                339
 :final-checks              467
 :max-memory                9.32
 :memory                    3.51
 :minimized-lits            8
 :mk-bool-var               809
 :mk-clause                 665
 :num-allocs                812656413755.00
 :num-checks                1
 :propagations              1409
 :restarts                  1
 :rlimit-count              17932915
 :time                      27.22
 :total-time                27.11)
