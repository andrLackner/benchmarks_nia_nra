unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x136 (* (- 6) n!0)))
 (let ((?x326 (+ m!1 ?x136)))
 (let (($x468 (<= ?x326 6)))
 (let (($x312 (= ?x326 6)))
 (let ((?x714 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x719 (* (- 6) (* k!2 k!2 k!2 n!0))))
 (let ((?x588 (* k!2 k!2 n!0)))
 (let ((?x229 (+ k!2 c!3)))
 (let ((?x489 (+ m!1 k!2)))
 (let ((?x717 (+ 6 m!1)))
 (let ((?x292 (* k!2 k!2)))
 (let ((?x549 (+ (* k!2 c!3) (* (- 2) (* m!1 m!1 k!2 c!3 n!0)) (* (- 6) (* m!1 c!3 c!3 n!0)) (* (- 2) (* m!1 k!2 k!2 c!3 n!0)) (* (- 1) (* m!1 m!1 c!3 c!3)) (* m!1 c!3) (* m!1 c!3 n!0) (* (- 6) (* k!2 c!3 c!3 n!0)) (* (- 6) (* m!1 k!2 k!2 n!0)) (* (- 1) (* m!1 m!1 k!2 k!2 n!0)) (* (- 12) (* k!2 k!2 c!3)) (* (- 12) (* m!1 k!2 c!3)) (* (- 6) (* m!1 c!3 c!3)) (* (- 12) (* k!2 k!2 c!3 n!0)) (* (- 2) (* m!1 k!2 k!2 c!3)) (* (+ 1 n!0) ?x717 ?x717 ?x717 ?x489 ?x489 ?x229 ?x229) (* (- 1) (* m!1 k!2 k!2 k!2)) (* (- 1) (* m!1 m!1 k!2 k!2)) (* (- 12) (* m!1 k!2 c!3 n!0)) (* (- 1) (* m!1 k!2 k!2 k!2 n!0)) ?x292 (* (- 2) (* m!1 m!1 k!2 c!3)) (* ?x717 ?x717 ?x489 ?x489 ?x229 ?x229 ?x229) (* (- 6) (* m!1 k!2 k!2)) (* (- 1) (* m!1 k!2 c!3 c!3)) (* m!1 k!2 n!0) (* m!1 k!2) (* (- 1) (* m!1 m!1 c!3 c!3 n!0)) (* (- 6) (* k!2 c!3 c!3)) (* k!2 c!3 n!0) (* (- 1) (* m!1 k!2 c!3 c!3 n!0)) ?x588 ?x719 ?x714)))
 (let ((?x581 (+ (- 6) m!1 ?x136)))
 (let ((?x526 (* ?x581 ?x549)))
 (let (($x291 (= ?x526 0)))
 (let (($x525 (not $x291)))
 (let (($x576 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1)))
 (let (($x290 (= (+ k!2 (* 3 c!3) (* (- 1) (* k!2 n!0)) (* (- 2) n!0)) 1)))
 (let ((?x246 (* (- 9) n!0)))
 (let ((?x256 (* (- 1) ?x292)))
 (let ((?x556 (* 9 (* c!3 n!0))))
 (let ((?x314 (* 18 c!3)))
 (let ((?x245 (* 5 k!2)))
 (let (($x160 (and $x312 (= (+ ?x245 ?x314 ?x556 ?x256 ?x246) 4) $x290 $x576 $x525)))
 (let ((?x715 (+ c!3 k!2)))
 (let ((?x728 (+ k!2 m!1)))
 (let ((?x711 (+ 1 n!0)))
 (let ((?x191 (+ ?x292 (* (- 1) (* k!2 k!2 k!2 m!1)) (* (- 1) (* k!2 k!2 m!1 m!1)) (* (- 6) (* c!3 c!3 m!1 n!0)) (* (- 1) (* c!3 c!3 m!1 m!1)) (* (- 6) (* c!3 c!3 k!2 n!0)) (* (- 6) (* k!2 k!2 m!1 n!0)) (* (- 12) (* c!3 k!2 m!1 n!0)) (* (- 2) (* c!3 k!2 m!1 m!1)) (* (- 1) (* c!3 c!3 k!2 m!1)) (* (- 12) (* c!3 k!2 k!2 n!0)) ?x719 (* (- 2) (* c!3 k!2 k!2 m!1)) (* ?x717 ?x717 ?x728 ?x728 ?x715 ?x715 ?x715) ?x714 (* ?x711 ?x717 ?x717 ?x717 ?x728 ?x728 ?x715 ?x715) (* (- 1) (* c!3 c!3 k!2 m!1 n!0)) (* (- 2) (* c!3 k!2 k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 k!2 m!1 n!0)) (* (- 1) (* c!3 c!3 m!1 m!1 n!0)) (* (- 2) (* c!3 k!2 m!1 m!1 n!0)) (* (- 1) (* k!2 k!2 m!1 m!1 n!0)) (* (- 12) (* c!3 k!2 k!2)) (* (- 12) (* c!3 k!2 m!1)) (* k!2 m!1) (* c!3 m!1) (* c!3 k!2) (* k!2 m!1 n!0) (* c!3 m!1 n!0) ?x588 (* c!3 k!2 n!0) (* (- 6) (* c!3 c!3 k!2)) (* (- 6) (* k!2 k!2 m!1)) (* (- 6) (* c!3 c!3 m!1)))))
 (let (($x466 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x274 (and $x312 (= (+ ?x314 ?x245 ?x246 ?x256 ?x556) 4) $x466 $x576 (not (= (* ?x581 ?x191) 0)))))
 (let (($x612 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x504 (* c k n)))
 (let ((?x503 (* k k n)))
 (let ((?x502 (* c m n)))
 (let ((?x501 (* k m n)))
 (let ((?x495 (* c k)))
 (let ((?x490 (* c m)))
 (let ((?x487 (* k m)))
 (let ((?x432 (* (- 1) (* k k m m n))))
 (let ((?x426 (* (- 1) (* c c m m n))))
 (let ((?x424 (* (- 1) (* k k k m n))))
 (let ((?x418 (* (- 1) (* c c k m n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x752 (+ ?x49 (* (- 1) (* k k k m)) (* (- 1) (* k k m m)) (* (- 6) (* c c m n)) (* (- 1) (* c c m m)) (* (- 6) (* c c k n)) (* (- 6) (* k k m n)) (* (- 12) (* c k m n)) (* (- 2) (* c k m m)) (* (- 1) (* c c k m)) (* (- 12) (* c k k n)) (* (- 6) (* k k k n)) (* (- 2) (* c k k m)) ?x321 (* (- 6) (* k k k)) ?x359 ?x418 (* (- 2) (* c k k m n)) ?x424 ?x426 (* (- 2) (* c k m m n)) ?x432 (* (- 12) (* c k k)) (* (- 12) (* c k m)) ?x487 ?x490 ?x495 ?x501 ?x502 ?x503 ?x504 (* (- 6) (* c c k)) (* (- 6) (* k k m)) (* (- 6) (* c c m)))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x216 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x212 (= ?x216 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x752) 0))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x551 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x253 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x151 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= ?x151 (- 4)) $x253 $x163 (not (= (* ?x117 ?x533) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x225 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x504 (* c k n)))
 (let ((?x503 (* k k n)))
 (let ((?x502 (* c m n)))
 (let ((?x501 (* k m n)))
 (let ((?x495 (* c k)))
 (let ((?x490 (* c m)))
 (let ((?x487 (* k m)))
 (let ((?x432 (* (- 1) (* k k m m n))))
 (let ((?x426 (* (- 1) (* c c m m n))))
 (let ((?x424 (* (- 1) (* k k k m n))))
 (let ((?x418 (* (- 1) (* c c k m n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x752 (+ ?x49 (* (- 1) (* k k k m)) (* (- 1) (* k k m m)) (* (- 6) (* c c m n)) (* (- 1) (* c c m m)) (* (- 6) (* c c k n)) (* (- 6) (* k k m n)) (* (- 12) (* c k m n)) (* (- 2) (* c k m m)) (* (- 1) (* c c k m)) (* (- 12) (* c k k n)) (* (- 6) (* k k k n)) (* (- 2) (* c k k m)) ?x321 (* (- 6) (* k k k)) ?x359 ?x418 (* (- 2) (* c k k m n)) ?x424 ?x426 (* (- 2) (* c k m m n)) ?x432 (* (- 12) (* c k k)) (* (- 12) (* c k m)) ?x487 ?x490 ?x495 ?x501 ?x502 ?x503 ?x504 (* (- 6) (* c c k)) (* (- 6) (* k k m)) (* (- 6) (* c c m)))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x216 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x212 (= ?x216 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x277 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x752) 0)))))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x253 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x151 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x203 (and $x128 (= ?x151 (- 4)) $x253 $x163 (not (= (* ?x117 ?x533) 0)))))
 (rewrite (= $x203 $x277))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x80 (+ (* (- 1) ?x73 ?x73 ?x74 ?x75 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x75 ?x75) (* ?x73 ?x74 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x75 ?x75 ?x75 ?x69))))
 (let (($x82 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82)))))))))))))))) :qid k!34))
 ))
 (let ((?x184 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x253 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x151 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x203 (and $x128 (= ?x151 (- 4)) $x253 $x163 (not (= (* ?x117 ?x533) 0)))))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x80 (+ (* (- 1) ?x73 ?x73 ?x74 ?x75 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x75 ?x75) (* ?x73 ?x74 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x75 ?x75 ?x75 ?x69))))
 (let (($x82 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82)))))
 (rewrite (= $x85 $x203)))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x355 (mp (mp @x87 (quant-intro (proof-bind ?x184) (= $x86 $x551)) $x551) (rewrite (= $x551 $x551)) $x551)))
 (let ((@x199 (mp~ (mp @x355 (quant-intro (proof-bind ?x225) (= $x551 $x612)) $x612) (sk (~ $x612 $x274)) $x274)))
 (let ((@x455 (mp @x199 (rewrite (= $x274 $x160)) $x160)))
 (let ((@x178 (and-elim @x455 $x312)))
 (let ((@x110 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x312) $x468)) @x178 $x468)))
 (let (($x301 (>= ?x326 6)))
 (let ((@x566 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x312) $x301)) @x178 $x301)))
 (let (($x467 (not (<= ?x526 0))))
 (let (($x161 (>= ?x526 0)))
 (let ((@x564 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x291 $x467 (not $x161))) (and-elim @x455 $x525) (or $x467 (not $x161)))))
 (let ((@x572 (unit-resolution @x564 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x161)) @x566 @x110 false) $x161) $x467)))
 ((_ th-lemma arith farkas 1 1 1) @x572 @x566 @x110 false))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        26
 :arith-assert-upper        26
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             187
 :arith-nonlinear-bounds    26
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      4
 :arith-tableau-max-columns 64
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                19.56
 :memory                    19.12
 :mk-bool-var               18
 :mk-clause                 16
 :num-allocs                479450
 :num-checks                1
 :propagations              10
 :rlimit-count              3658
 :time                      0.01
 :total-time                0.02)
