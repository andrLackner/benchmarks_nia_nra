unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x741 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x549 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) (* (- 4) r!2) (* (- 1) (* v!0 v!0)) (* (- 2) u!1) ?x741)))
 (let (($x426 (>= ?x549 0)))
 (let (($x185 (= ?x549 0)))
 (let ((?x786 (* (- 1) ?x741)))
 (let ((?x605 (* 2 u!1)))
 (let ((?x588 (* v!0 v!0)))
 (let ((?x538 (* 4 r!2)))
 (let ((?x836 (* (- 2) v!0)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x179 (+ ?x110 ?x126 ?x41 ?x46 ?x202 ?x836 ?x538 ?x588 ?x605 ?x786)))
 (let ((?x774 (* (- 1) (* v!0 r!2 u!1 u!1 u!1))))
 (let ((?x421 (* (- 8) ?x588)))
 (let ((?x465 (* (- 1) (* v!0 r!2 r!2 u!1))))
 (let ((?x127 (+ r!2 u!1)))
 (let ((?x667 (+ 2 u!1)))
 (let ((?x371 (* ?x667 ?x667 ?x667 ?x127 ?x127 ?x127)))
 (let ((?x316 (+ (* (- 12) (* v!0 v!0 u!1)) (* (- 8) (* v!0 r!2)) (* (- 7) (* v!0 u!1 u!1 u!1)) (* (- 1) (* v!0 v!0 u!1 u!1 u!1)) ?x371 ?x465 ?x421 (* (- 6) (* v!0 v!0 u!1 u!1)) (* (- 8) (* v!0 r!2 u!1 u!1)) (* (- 2) (* v!0 r!2 r!2)) (* (- 1) (* v!0 u!1 u!1 u!1 u!1)) (* (- 16) (* v!0 r!2 u!1)) ?x774 (* (- 8) (* v!0 u!1)) (* (- 14) (* v!0 u!1 u!1)))))
 (let ((?x243 (* ?x316 ?x179)))
 (let (($x355 (= ?x243 0)))
 (let (($x729 (not $x355)))
 (let ((?x260 (* (- 4) (* u!1 u!1 u!1))))
 (let ((?x263 (* r!2 r!2 r!2 u!1 u!1 u!1)))
 (let ((?x589 (* (- 2) (* r!2 r!2 u!1))))
 (let ((?x375 (* (- 2) (* r!2 u!1 u!1 u!1))))
 (let ((?x841 (+ (* (- 2) (* v!0 v!0 u!1)) (* (- 2) (* v!0 u!1 u!1 u!1)) (* 3 (* v!0 v!0 r!2 u!1 u!1 u!1)) ?x375 ?x589 ?x263 (* (- 3) (* v!0 r!2 r!2 u!1 u!1 u!1)) ?x465 (* (- 1) (* v!0 v!0 v!0 u!1 u!1 u!1)) (* (- 1) (* v!0 v!0 v!0 u!1)) ?x260 (* 2 (* v!0 v!0 r!2 u!1)) (* 4 (* v!0 r!2 u!1)) ?x774)))
 (let ((?x433 (* ?x841 ?x179)))
 (let (($x382 (= ?x433 0)))
 (let (($x448 (or (not $x382) $x729)))
 (let (($x805 (and $x185 $x448)))
 (let ((?x606 (+ ?x538 ?x605 ?x836 ?x110 ?x126 ?x41 ?x786 ?x588 ?x46 ?x202)))
 (let ((?x240 (* (- 1) (* r!2 r!2 u!1 v!0))))
 (let ((?x607 (* (- 1) (* r!2 u!1 u!1 u!1 v!0))))
 (let ((?x328 (+ ?x421 (* (- 8) (* r!2 v!0)) ?x371 ?x607 ?x240 (* (- 16) (* r!2 u!1 v!0)) (* (- 12) (* u!1 v!0 v!0)) (* (- 8) (* u!1 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0 v!0)) (* (- 7) (* u!1 u!1 u!1 v!0)) (* (- 1) (* u!1 u!1 u!1 u!1 v!0)) (* (- 8) (* r!2 u!1 u!1 v!0)) (* (- 2) (* r!2 r!2 v!0)) (* (- 14) (* u!1 u!1 v!0)) (* (- 6) (* u!1 u!1 v!0 v!0)))))
 (let ((?x227 (+ ?x607 ?x240 ?x589 (* 4 (* r!2 u!1 v!0)) (* (- 2) (* u!1 v!0 v!0)) (* 2 (* r!2 u!1 v!0 v!0)) (* (- 1) (* u!1 v!0 v!0 v!0)) ?x260 (* (- 2) (* u!1 u!1 u!1 v!0)) ?x263 (* (- 3) (* r!2 r!2 u!1 u!1 u!1 v!0)) (* 3 (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0)) ?x375)))
 (let (($x314 (and (= ?x606 0) (or (not (= (* ?x227 ?x606) 0)) (not (= (* ?x328 ?x606) 0))))))
 (let (($x640 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x823 (* (- 6) (* u u v v))))
 (let ((?x740 (* (- 2) (* r r v))))
 (let ((?x661 (* (- 1) (* u u u u v))))
 (let ((?x505 (* (- 1) (* u u u v v))))
 (let ((?x388 (* u v v)))
 (let ((?x830 (* (- 12) ?x388)))
 (let ((?x435 (* (- 1) (* r r u v))))
 (let ((?x338 (* (- 1) (* r u u u v))))
 (let ((?x77 (+ r u)))
 (let ((?x527 (+ 2 u)))
 (let ((?x310 (* ?x527 ?x527 ?x527 ?x77 ?x77 ?x77)))
 (let ((?x814 (* (- 8) ?x45)))
 (let ((?x894 (+ ?x814 (* (- 8) (* r v)) ?x310 ?x338 ?x435 (* (- 16) (* r u v)) ?x830 (* (- 8) (* u v)) ?x505 (* (- 7) (* u u u v)) ?x661 (* (- 8) (* r u u v)) ?x740 (* (- 14) (* u u v)) ?x823)))
 (let ((?x593 (* (- 1) (* u u u v v v))))
 (let ((?x602 (* 3 (* r u u u v v))))
 (let ((?x600 (* (- 3) (* r r u u u v))))
 (let ((?x531 (* r r r u u u)))
 (let ((?x511 (* (- 4) (* u u u))))
 (let ((?x440 (* (- 1) (* u v v v))))
 (let ((?x453 (* 2 (* r u v v))))
 (let ((?x450 (* (- 2) ?x388)))
 (let ((?x370 (* r u v)))
 (let ((?x447 (* 4 ?x370)))
 (let ((?x444 (* (- 2) (* r r u))))
 (let ((?x295 (+ ?x338 ?x435 ?x444 ?x447 ?x450 ?x453 ?x440 ?x511 (* (- 2) (* u u u v)) ?x531 ?x600 ?x602 ?x593 (* (- 2) (* r u u u)))))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or (not (= (* ?x295 ?x208) 0)) (not (= (* ?x894 ?x208) 0))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x687 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x828 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x527 (+ 2 u)))
 (let ((?x310 (* ?x527 ?x527 ?x527 ?x77 ?x77 ?x77)))
 (let ((?x315 (+ (* (- 1) (* ?x527 ?x527 ?x527 ?x77 v)) (* (- 1) (* ?x527 ?x77 ?x77 v)) (* (- 1) (* ?x527 ?x527 ?x527 v v)) ?x310)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x135 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x669 (+ r ?x107)))
 (let ((?x832 (+ (* (- 1) (* (+ 2 v) ?x669 u u u)) (* (- 1) (* (+ 2 v) ?x669 ?x669 u)) (* (- 1) (* (+ 2 v) (+ 2 v) u u u)) (* ?x669 ?x669 ?x669 u u u))))
 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x832 ?x135) 0)) (not (= (* ?x315 ?x828) 0))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x620 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x823 (* (- 6) (* u u v v))))
 (let ((?x740 (* (- 2) (* r r v))))
 (let ((?x661 (* (- 1) (* u u u u v))))
 (let ((?x505 (* (- 1) (* u u u v v))))
 (let ((?x388 (* u v v)))
 (let ((?x830 (* (- 12) ?x388)))
 (let ((?x435 (* (- 1) (* r r u v))))
 (let ((?x338 (* (- 1) (* r u u u v))))
 (let ((?x77 (+ r u)))
 (let ((?x527 (+ 2 u)))
 (let ((?x310 (* ?x527 ?x527 ?x527 ?x77 ?x77 ?x77)))
 (let ((?x814 (* (- 8) ?x45)))
 (let ((?x894 (+ ?x814 (* (- 8) (* r v)) ?x310 ?x338 ?x435 (* (- 16) (* r u v)) ?x830 (* (- 8) (* u v)) ?x505 (* (- 7) (* u u u v)) ?x661 (* (- 8) (* r u u v)) ?x740 (* (- 14) (* u u v)) ?x823)))
 (let ((?x593 (* (- 1) (* u u u v v v))))
 (let ((?x602 (* 3 (* r u u u v v))))
 (let ((?x600 (* (- 3) (* r r u u u v))))
 (let ((?x531 (* r r r u u u)))
 (let ((?x511 (* (- 4) (* u u u))))
 (let ((?x440 (* (- 1) (* u v v v))))
 (let ((?x453 (* 2 (* r u v v))))
 (let ((?x450 (* (- 2) ?x388)))
 (let ((?x370 (* r u v)))
 (let ((?x447 (* 4 ?x370)))
 (let ((?x444 (* (- 2) (* r r u))))
 (let ((?x295 (+ ?x338 ?x435 ?x444 ?x447 ?x450 ?x453 ?x440 ?x511 (* (- 2) (* u u u v)) ?x531 ?x600 ?x602 ?x593 (* (- 2) (* r u u u)))))
 (let (($x213 (= ?x208 0)))
 (let (($x117 (and $x213 (or (not (= (* ?x295 ?x208) 0)) (not (= (* ?x894 ?x208) 0))))))
 (let ((?x828 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* ?x527 ?x527)) ?x45 ?x46 ?x202)))
 (let ((?x315 (+ (* (- 1) (* ?x527 ?x527 ?x527 ?x77 v)) (* (- 1) (* ?x527 ?x77 ?x77 v)) (* (- 1) (* ?x527 ?x527 ?x527 v v)) ?x310)))
 (let ((?x135 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x669 (+ r ?x107)))
 (let ((?x832 (+ (* (- 1) (* (+ 2 v) ?x669 u u u)) (* (- 1) (* (+ 2 v) ?x669 ?x669 u)) (* (- 1) (* (+ 2 v) (+ 2 v) u u u)) (* ?x669 ?x669 ?x669 u u u))))
 (let (($x285 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x832 ?x135) 0)) (not (= (* ?x315 ?x828) 0))))))
 (rewrite (= $x285 $x117))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((r Int) (u Int) (v Int) )(! (let ((?x81 (+ u 2)))
 (let ((?x77 (+ r u)))
 (let ((?x94 (- (- (* (- 1) ?x77 ?x81 ?x81 ?x81 v) (* ?x77 ?x77 ?x81 v)) (* ?x81 ?x81 ?x81 v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) (+ ?x94 (* ?x77 ?x77 ?x77 ?x81 ?x81 ?x81)))))
 (let ((?x70 (- (* (- 1) (- r v) u u u (+ v 2)) (* (- r v) (- r v) u (+ v 2)))))
 (let ((?x73 (+ (- ?x70 (* u u u (+ v 2) (+ v 2))) (* (- r v) (- r v) (- r v) u u u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= (* (- ?x63 ?x48) ?x73) 0)) (not (= ?x97 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x731 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x828 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x527 (+ 2 u)))
 (let ((?x310 (* ?x527 ?x527 ?x527 ?x77 ?x77 ?x77)))
 (let ((?x315 (+ (* (- 1) (* ?x527 ?x527 ?x527 ?x77 v)) (* (- 1) (* ?x527 ?x77 ?x77 v)) (* (- 1) (* ?x527 ?x527 ?x527 v v)) ?x310)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x135 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x669 (+ r ?x107)))
 (let ((?x832 (+ (* (- 1) (* (+ 2 v) ?x669 u u u)) (* (- 1) (* (+ 2 v) ?x669 ?x669 u)) (* (- 1) (* (+ 2 v) (+ 2 v) u u u)) (* ?x669 ?x669 ?x669 u u u))))
 (let (($x285 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x832 ?x135) 0)) (not (= (* ?x315 ?x828) 0))))))
 (let ((?x81 (+ u 2)))
 (let ((?x66 (- 1)))
 (let ((?x94 (- (- (* ?x66 ?x77 ?x81 ?x81 ?x81 v) (* ?x77 ?x77 ?x81 v)) (* ?x81 ?x81 ?x81 v v))))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) (+ ?x94 (* ?x77 ?x77 ?x77 ?x81 ?x81 ?x81)))))
 (let ((?x70 (- (* ?x66 (- r v) u u u (+ v 2)) (* (- r v) (- r v) u (+ v 2)))))
 (let ((?x73 (+ (- ?x70 (* u u u (+ v 2) (+ v 2))) (* (- r v) (- r v) (- r v) u u u))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x101 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= (* (- ?x63 ?x48) ?x73) 0)) (not (= ?x97 0))))))
 (rewrite (= $x101 $x285)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x130 (mp (mp @x103 (quant-intro (proof-bind ?x731) (= $x102 $x687)) $x687) (rewrite (= $x687 $x687)) $x687)))
 (let ((@x286 (mp~ (mp @x130 (quant-intro (proof-bind ?x620) (= $x687 $x640)) $x640) (sk (~ $x640 $x314)) $x314)))
 (let ((@x764 (mp @x286 (rewrite (= $x314 $x805)) $x805)))
 (let ((@x780 (and-elim @x764 $x185)))
 (let ((@x305 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x185) $x426)) @x780 $x426)))
 (let (($x718 (<= ?x549 0)))
 (let ((@x508 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x185) $x718)) @x780 $x718)))
 (let (($x685 (not (<= ?x243 0))))
 (let (($x842 (>= ?x243 0)))
 (let (($x840 (>= ?x433 0)))
 (let (($x839 (<= ?x433 0)))
 (let ((@x683 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x382 (not $x839) (not $x840))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x839)) @x508 @x305 false) $x839) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x840)) @x508 @x305 false) $x840) $x382)))
 (let ((@x684 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x355 $x685 (not $x842))) (unit-resolution (and-elim @x764 $x448) @x683 $x729) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x842)) @x508 @x305 false) $x842) $x685)))
 ((_ th-lemma arith farkas 1 1 1) @x684 @x508 @x305 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        37
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             304
 :arith-nonlinear-bounds    20
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 54
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.66
 :memory                    3.18
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1127329
 :num-checks                1
 :propagations              14
 :rlimit-count              4636
 :time                      0.01
 :total-time                0.01)
