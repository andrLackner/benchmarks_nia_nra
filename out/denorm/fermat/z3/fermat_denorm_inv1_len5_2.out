unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x1378 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x621 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 1) (* v!0 v!0)) (* (- 2) u!1) (* 2 v!0) (* (- 4) r!2) ?x1378)))
 (let (($x1334 (>= ?x621 0)))
 (let (($x300 (= ?x621 0)))
 (let ((?x502 (* (- 1) ?x1378)))
 (let ((?x1306 (* 4 r!2)))
 (let ((?x1429 (* (- 2) v!0)))
 (let ((?x496 (* 2 u!1)))
 (let ((?x607 (* v!0 v!0)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x134 (+ ?x112 ?x128 ?x41 ?x46 ?x204 ?x607 ?x496 ?x1429 ?x1306 ?x502)))
 (let ((?x1390 (* v!0 v!0 v!0 r!2)))
 (let ((?x1308 (* v!0 v!0 v!0)))
 (let ((?x1291 (* (- 7) ?x1308)))
 (let ((?x494 (* 8 r!2)))
 (let ((?x243 (* (- 20) v!0)))
 (let ((?x997 (* 6 (* u!1 u!1 v!0 v!0 v!0 v!0 v!0))))
 (let ((?x461 (* 12 (* u!1 u!1 v!0 v!0 v!0 v!0))))
 (let ((?x652 (* (- 1) (* u!1 v!0 v!0))))
 (let ((?x586 (* (- 18) ?x607)))
 (let ((?x525 (* 8 (* u!1 u!1 v!0 v!0 v!0))))
 (let ((?x1403 (* (- 1) (* u!1 r!2 r!2))))
 (let ((?x432 (* (- 1) (* u!1 v!0))))
 (let ((?x414 (* u!1 u!1 v!0 v!0 v!0 v!0 v!0 v!0)))
 (let ((?x270 (* u!1 r!2)))
 (let ((?x344 (* (- 1) (* v!0 v!0 v!0 v!0))))
 (let ((?x273 (* (- 1) (* u!1 u!1 v!0 v!0 v!0 r!2 r!2 r!2))))
 (let ((?x909 (+ (- 8) (* 36 (* u!1 u!1 v!0 v!0 r!2 r!2)) ?x273 ?x344 (* 3 (* u!1 u!1 v!0 v!0 v!0 v!0 r!2 r!2)) (* (- 3) (* u!1 u!1 v!0 v!0 v!0 v!0 v!0 r!2)) (* 24 (* u!1 u!1 v!0 r!2 r!2)) ?x270 (* (- 24) (* u!1 u!1 v!0 v!0 r!2)) (* (- 12) (* u!1 u!1 v!0 r!2 r!2 r!2)) ?x414 (* (- 18) (* u!1 u!1 v!0 v!0 v!0 v!0 r!2)) ?x432 ?x1403 (* 2 (* u!1 v!0 r!2)) ?x525 ?x586 ?x652 ?x461 ?x997 ?x243 ?x494 ?x1291 (* (- 36) (* u!1 u!1 v!0 v!0 v!0 r!2)) (* (- 6) (* u!1 u!1 v!0 v!0 r!2 r!2 r!2)) (* 18 (* u!1 u!1 v!0 v!0 v!0 r!2 r!2)) ?x1390 (* 6 (* v!0 v!0 r!2)) (* (- 8) (* u!1 u!1 r!2 r!2 r!2)) (* 12 (* v!0 r!2)))))
 (let ((?x872 (* ?x909 ?x134)))
 (let (($x1337 (= ?x872 0)))
 (let (($x928 (not $x1337)))
 (let ((?x115 (* (- 4) (* u!1 u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x1038 (* (- 1) ?x1308)))
 (let ((?x1194 (* u!1 v!0 v!0 v!0)))
 (let ((?x135 (* (- 1) (* u!1 u!1 u!1))))
 (let ((?x152 (* 2 r!2)))
 (let ((?x114 (* (- 1) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x616 (* (- 4) (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x109 (* (- 2) (* r!2 r!2))))
 (let ((?x941 (+ ?x109 ?x273 (* (- 3) (* u!1 u!1 u!1 v!0 v!0 v!0 r!2 r!2)) (* (- 3) (* u!1 u!1 u!1 u!1 v!0 v!0 v!0 r!2)) (* (- 12) (* u!1 v!0 v!0 v!0 r!2 r!2)) (* (- 3) ?x270) ?x1403 ?x496 ?x616 ?x114 ?x152 (* (- 4) (* v!0 v!0 v!0 r!2 r!2 r!2)) ?x135 ?x1194 ?x1038 (* (- 12) (* u!1 u!1 v!0 v!0 v!0 r!2)) (* (- 12) (* u!1 u!1 v!0 v!0 v!0 r!2 r!2)) ?x502 (* (- 4) (* u!1 v!0 v!0 v!0 r!2 r!2 r!2)) ?x1390 (* (- 12) (* u!1 u!1 u!1 v!0 v!0 v!0 r!2)) (* (- 2) (* u!1 u!1 r!2)) ?x115)))
 (let ((?x936 (* ?x941 ?x134)))
 (let (($x911 (= ?x936 0)))
 (let (($x1365 (or (not $x911) $x928)))
 (let (($x1408 (and $x300 $x1365)))
 (let ((?x659 (+ ?x1306 ?x496 ?x1429 ?x112 ?x128 ?x41 ?x502 ?x607 ?x46 ?x204)))
 (let ((?x1443 (* r!2 v!0 v!0 v!0)))
 (let ((?x384 (* (- 1) (* r!2 r!2 u!1))))
 (let ((?x113 (* (- 1) (* r!2 r!2 r!2 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x133 (+ ?x152 ?x496 ?x502 ?x1038 (* (- 3) (* r!2 u!1)) ?x113 (* (- 12) (* r!2 u!1 u!1 v!0 v!0 v!0)) (* (- 12) (* r!2 r!2 u!1 u!1 v!0 v!0 v!0)) ?x384 ?x1443 (* (- 3) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 3) (* r!2 u!1 u!1 u!1 u!1 v!0 v!0 v!0)) ?x114 (* (- 4) (* r!2 r!2 r!2 v!0 v!0 v!0)) (* (- 12) (* r!2 r!2 u!1 v!0 v!0 v!0)) ?x616 (* (- 4) (* r!2 r!2 r!2 u!1 v!0 v!0 v!0)) (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) ?x115 (* (- 2) (* r!2 u!1 u!1)) ?x135 ?x109 ?x1194)))
 (let ((?x356 (* r!2 u!1)))
 (let ((?x1002 (+ (- 8) ?x494 ?x243 ?x586 ?x1291 ?x356 ?x432 ?x113 (* (- 8) (* r!2 r!2 r!2 u!1 u!1)) (* 24 (* r!2 r!2 u!1 u!1 v!0)) (* (- 24) (* r!2 u!1 u!1 v!0 v!0)) ?x525 (* (- 12) (* r!2 r!2 r!2 u!1 u!1 v!0)) (* 36 (* r!2 r!2 u!1 u!1 v!0 v!0)) (* (- 36) (* r!2 u!1 u!1 v!0 v!0 v!0)) ?x461 (* (- 6) (* r!2 r!2 r!2 u!1 u!1 v!0 v!0)) (* 18 (* r!2 r!2 u!1 u!1 v!0 v!0 v!0)) (* (- 18) (* r!2 u!1 u!1 v!0 v!0 v!0 v!0)) ?x997 (* 3 (* r!2 r!2 u!1 u!1 v!0 v!0 v!0 v!0)) (* (- 3) (* r!2 u!1 u!1 v!0 v!0 v!0 v!0 v!0)) ?x414 ?x384 (* 2 (* r!2 u!1 v!0)) ?x652 ?x1443 (* 12 (* r!2 v!0)) (* 6 (* r!2 v!0 v!0)) ?x344)))
 (let (($x121 (and (= ?x659 0) (or (not (= (* ?x1002 ?x659) 0)) (not (= (* ?x133 ?x659) 0))))))
 (let (($x246 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x1057 (* r v v v)))
 (let ((?x1018 (* (- 1) (* r r u))))
 (let ((?x833 (* (- 1) (* r r r u u v v v))))
 (let ((?x92 (* v v v)))
 (let ((?x930 (* (- 1) ?x92)))
 (let ((?x1477 (+ (* 2 r) ?x36 ?x182 ?x930 (* (- 3) (* r u)) ?x833 (* (- 12) (* r u u v v v)) (* (- 12) (* r r u u v v v)) ?x1018 ?x1057 (* (- 3) (* r r u u u v v v)) (* (- 3) (* r u u u u v v v)) (* (- 1) (* u u u u u v v v)) (* (- 4) (* r r r v v v)) (* (- 12) (* r r u v v v)) (* (- 4) (* u u u v v v)) (* (- 4) (* r r r u v v v)) (* (- 12) (* r u u u v v v)) (* (- 4) (* u u u u v v v)) (* (- 2) (* r u u)) (* (- 1) (* u u u)) (* (- 2) (* r r)) (* u v v v))))
 (let (($x1500 (not (= (* ?x1477 ?x210) 0))))
 (let ((?x1100 (* (- 1) (* v v v v))))
 (let ((?x1108 (* 6 (* r v v))))
 (let ((?x1020 (* (- 1) (* u v v))))
 (let ((?x1024 (* 2 (* r u v))))
 (let ((?x785 (* u u v v v v v v)))
 (let ((?x891 (* (- 3) (* r u u v v v v v))))
 (let ((?x888 (* 3 (* r r u u v v v v))))
 (let ((?x885 (* 6 (* u u v v v v v))))
 (let ((?x882 (* (- 18) (* r u u v v v v))))
 (let ((?x591 (* r r u u v v v)))
 (let ((?x879 (* 18 ?x591)))
 (let ((?x876 (* (- 6) (* r r r u u v v))))
 (let ((?x873 (* 12 (* u u v v v v))))
 (let ((?x513 (* r u u v v v)))
 (let ((?x870 (* (- 36) ?x513)))
 (let ((?x867 (* 36 (* r r u u v v))))
 (let ((?x864 (* (- 12) (* r r r u u v))))
 (let ((?x861 (* 8 (* u u v v v))))
 (let ((?x858 (* (- 24) (* r u u v v))))
 (let ((?x855 (* 24 (* r r u u v))))
 (let ((?x852 (* (- 8) (* r r r u u))))
 (let ((?x341 (* (- 1) (* u v))))
 (let ((?x333 (* r u)))
 (let ((?x1121 (* (- 20) v)))
 (let ((?x1064 (* 8 r)))
 (let ((?x1125 (+ (- 8) ?x1064 ?x1121 (* (- 18) ?x45) (* (- 7) ?x92) ?x333 ?x341 ?x833 ?x852 ?x855 ?x858 ?x861 ?x864 ?x867 ?x870 ?x873 ?x876 ?x879 ?x882 ?x885 ?x888 ?x891 ?x785 ?x1018 ?x1024 ?x1020 ?x1057 (* 12 (* r v)) ?x1108 ?x1100)))
 (let (($x215 (= ?x210 0)))
 (and $x215 (or (not (= (* ?x1125 ?x210) 0)) $x1500))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x1304 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x1057 (* r v v v)))
 (let ((?x1018 (* (- 1) (* r r u))))
 (let ((?x833 (* (- 1) (* r r r u u v v v))))
 (let ((?x92 (* v v v)))
 (let ((?x930 (* (- 1) ?x92)))
 (let ((?x1477 (+ (* 2 r) ?x36 ?x182 ?x930 (* (- 3) (* r u)) ?x833 (* (- 12) (* r u u v v v)) (* (- 12) (* r r u u v v v)) ?x1018 ?x1057 (* (- 3) (* r r u u u v v v)) (* (- 3) (* r u u u u v v v)) (* (- 1) (* u u u u u v v v)) (* (- 4) (* r r r v v v)) (* (- 12) (* r r u v v v)) (* (- 4) (* u u u v v v)) (* (- 4) (* r r r u v v v)) (* (- 12) (* r u u u v v v)) (* (- 4) (* u u u u v v v)) (* (- 2) (* r u u)) (* (- 1) (* u u u)) (* (- 2) (* r r)) (* u v v v))))
 (let (($x1500 (not (= (* ?x1477 ?x210) 0))))
 (let ((?x1100 (* (- 1) (* v v v v))))
 (let ((?x1108 (* 6 (* r v v))))
 (let ((?x1020 (* (- 1) (* u v v))))
 (let ((?x1024 (* 2 (* r u v))))
 (let ((?x785 (* u u v v v v v v)))
 (let ((?x891 (* (- 3) (* r u u v v v v v))))
 (let ((?x888 (* 3 (* r r u u v v v v))))
 (let ((?x885 (* 6 (* u u v v v v v))))
 (let ((?x882 (* (- 18) (* r u u v v v v))))
 (let ((?x591 (* r r u u v v v)))
 (let ((?x879 (* 18 ?x591)))
 (let ((?x876 (* (- 6) (* r r r u u v v))))
 (let ((?x873 (* 12 (* u u v v v v))))
 (let ((?x513 (* r u u v v v)))
 (let ((?x870 (* (- 36) ?x513)))
 (let ((?x867 (* 36 (* r r u u v v))))
 (let ((?x864 (* (- 12) (* r r r u u v))))
 (let ((?x861 (* 8 (* u u v v v))))
 (let ((?x858 (* (- 24) (* r u u v v))))
 (let ((?x855 (* 24 (* r r u u v))))
 (let ((?x852 (* (- 8) (* r r r u u))))
 (let ((?x341 (* (- 1) (* u v))))
 (let ((?x333 (* r u)))
 (let ((?x1121 (* (- 20) v)))
 (let ((?x1064 (* 8 r)))
 (let ((?x1260 (+ (- 8) ?x1064 ?x1121 (* (- 14) ?x45) (* (- 5) ?x92) (* 2 (* v 2 (* (- 1) v))) ?x333 ?x341 ?x833 ?x852 ?x855 ?x858 ?x861 ?x864 ?x867 ?x870 ?x873 ?x876 ?x879 ?x882 ?x885 ?x888 ?x891 ?x785 (* 2 (* v 2 r)) (* 2 (* v v (* (- 1) v))) ?x1018 ?x1024 ?x1020 ?x1057 (* 8 (* r v)) ?x1108 ?x1100)))
 (let (($x215 (= ?x210 0)))
 (and $x215 (or (not (= (* ?x1260 ?x210) 0)) $x1500))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x162 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x1057 (* r v v v)))
 (let ((?x1018 (* (- 1) (* r r u))))
 (let ((?x833 (* (- 1) (* r r r u u v v v))))
 (let ((?x92 (* v v v)))
 (let ((?x930 (* (- 1) ?x92)))
 (let ((?x1477 (+ (* 2 r) ?x36 ?x182 ?x930 (* (- 3) (* r u)) ?x833 (* (- 12) (* r u u v v v)) (* (- 12) (* r r u u v v v)) ?x1018 ?x1057 (* (- 3) (* r r u u u v v v)) (* (- 3) (* r u u u u v v v)) (* (- 1) (* u u u u u v v v)) (* (- 4) (* r r r v v v)) (* (- 12) (* r r u v v v)) (* (- 4) (* u u u v v v)) (* (- 4) (* r r r u v v v)) (* (- 12) (* r u u u v v v)) (* (- 4) (* u u u u v v v)) (* (- 2) (* r u u)) (* (- 1) (* u u u)) (* (- 2) (* r r)) (* u v v v))))
 (let (($x1500 (not (= (* ?x1477 ?x210) 0))))
 (let ((?x1100 (* (- 1) (* v v v v))))
 (let ((?x1108 (* 6 (* r v v))))
 (let ((?x1020 (* (- 1) (* u v v))))
 (let ((?x1024 (* 2 (* r u v))))
 (let ((?x785 (* u u v v v v v v)))
 (let ((?x891 (* (- 3) (* r u u v v v v v))))
 (let ((?x888 (* 3 (* r r u u v v v v))))
 (let ((?x885 (* 6 (* u u v v v v v))))
 (let ((?x882 (* (- 18) (* r u u v v v v))))
 (let ((?x591 (* r r u u v v v)))
 (let ((?x879 (* 18 ?x591)))
 (let ((?x876 (* (- 6) (* r r r u u v v))))
 (let ((?x873 (* 12 (* u u v v v v))))
 (let ((?x513 (* r u u v v v)))
 (let ((?x870 (* (- 36) ?x513)))
 (let ((?x867 (* 36 (* r r u u v v))))
 (let ((?x864 (* (- 12) (* r r r u u v))))
 (let ((?x861 (* 8 (* u u v v v))))
 (let ((?x858 (* (- 24) (* r u u v v))))
 (let ((?x855 (* 24 (* r r u u v))))
 (let ((?x852 (* (- 8) (* r r r u u))))
 (let ((?x341 (* (- 1) (* u v))))
 (let ((?x333 (* r u)))
 (let ((?x1121 (* (- 20) v)))
 (let ((?x1064 (* 8 r)))
 (let ((?x1125 (+ (- 8) ?x1064 ?x1121 (* (- 18) ?x45) (* (- 7) ?x92) ?x333 ?x341 ?x833 ?x852 ?x855 ?x858 ?x861 ?x864 ?x867 ?x870 ?x873 ?x876 ?x879 ?x882 ?x885 ?x888 ?x891 ?x785 ?x1018 ?x1024 ?x1020 ?x1057 (* 12 (* r v)) ?x1108 ?x1100)))
 (let (($x215 (= ?x210 0)))
 (let (($x385 (and $x215 (or (not (= (* ?x1125 ?x210) 0)) $x1500))))
 (let ((?x1260 (+ (- 8) ?x1064 ?x1121 (* (- 14) ?x45) (* (- 5) ?x92) (* 2 (* v 2 (* (- 1) v))) ?x333 ?x341 ?x833 ?x852 ?x855 ?x858 ?x861 ?x864 ?x867 ?x870 ?x873 ?x876 ?x879 ?x882 ?x885 ?x888 ?x891 ?x785 (* 2 (* v 2 r)) (* 2 (* v v (* (- 1) v))) ?x1018 ?x1024 ?x1020 ?x1057 (* 8 (* r v)) ?x1108 ?x1100)))
 (let (($x291 (and $x215 (or (not (= (* ?x1260 ?x210) 0)) $x1500))))
 (rewrite (= $x291 $x385)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1444 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x459 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x77 (+ r u)))
 (let ((?x97 (* ?x77 v v v)))
 (let ((?x92 (* v v v)))
 (let ((?x930 (* (- 1) ?x92)))
 (let ((?x1419 (* (- 1) (* (+ 2 u) (+ 2 u) ?x77 ?x77 ?x77 v v v))))
 (let ((?x890 (+ (* (+ 2 u) ?x77) ?x1419 ?x930 (* (- 1) (* (+ 2 u) ?x77 ?x77)) ?x97)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x1314 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x1416 (* (- 1) v)))
 (let ((?x1424 (+ r ?x1416)))
 (let ((?x183 (+ 2 v)))
 (let ((?x475 (+ (* ?x1424 u) (* (- 1) (* ?x183 ?x183 ?x183 ?x1424 ?x1424 ?x1424 u u)) (* (- 1) (* ?x183 ?x183 ?x183)) (* (- 1) (* ?x1424 ?x1424 u)) (* ?x183 ?x183 ?x183 ?x1424))))
 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) (or (not (= (* ?x475 ?x1314) 0)) (not (= (* ?x890 ?x459) 0)))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1282 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x1057 (* r v v v)))
 (let ((?x1018 (* (- 1) (* r r u))))
 (let ((?x833 (* (- 1) (* r r r u u v v v))))
 (let ((?x92 (* v v v)))
 (let ((?x930 (* (- 1) ?x92)))
 (let ((?x1477 (+ (* 2 r) ?x36 ?x182 ?x930 (* (- 3) (* r u)) ?x833 (* (- 12) (* r u u v v v)) (* (- 12) (* r r u u v v v)) ?x1018 ?x1057 (* (- 3) (* r r u u u v v v)) (* (- 3) (* r u u u u v v v)) (* (- 1) (* u u u u u v v v)) (* (- 4) (* r r r v v v)) (* (- 12) (* r r u v v v)) (* (- 4) (* u u u v v v)) (* (- 4) (* r r r u v v v)) (* (- 12) (* r u u u v v v)) (* (- 4) (* u u u u v v v)) (* (- 2) (* r u u)) (* (- 1) (* u u u)) (* (- 2) (* r r)) (* u v v v))))
 (let (($x1500 (not (= (* ?x1477 ?x210) 0))))
 (let ((?x1100 (* (- 1) (* v v v v))))
 (let ((?x1108 (* 6 (* r v v))))
 (let ((?x1020 (* (- 1) (* u v v))))
 (let ((?x1024 (* 2 (* r u v))))
 (let ((?x785 (* u u v v v v v v)))
 (let ((?x891 (* (- 3) (* r u u v v v v v))))
 (let ((?x888 (* 3 (* r r u u v v v v))))
 (let ((?x885 (* 6 (* u u v v v v v))))
 (let ((?x882 (* (- 18) (* r u u v v v v))))
 (let ((?x591 (* r r u u v v v)))
 (let ((?x879 (* 18 ?x591)))
 (let ((?x876 (* (- 6) (* r r r u u v v))))
 (let ((?x873 (* 12 (* u u v v v v))))
 (let ((?x513 (* r u u v v v)))
 (let ((?x870 (* (- 36) ?x513)))
 (let ((?x867 (* 36 (* r r u u v v))))
 (let ((?x864 (* (- 12) (* r r r u u v))))
 (let ((?x861 (* 8 (* u u v v v))))
 (let ((?x858 (* (- 24) (* r u u v v))))
 (let ((?x855 (* 24 (* r r u u v))))
 (let ((?x852 (* (- 8) (* r r r u u))))
 (let ((?x341 (* (- 1) (* u v))))
 (let ((?x333 (* r u)))
 (let ((?x1121 (* (- 20) v)))
 (let ((?x1064 (* 8 r)))
 (let ((?x1260 (+ (- 8) ?x1064 ?x1121 (* (- 14) ?x45) (* (- 5) ?x92) (* 2 (* v 2 (* (- 1) v))) ?x333 ?x341 ?x833 ?x852 ?x855 ?x858 ?x861 ?x864 ?x867 ?x870 ?x873 ?x876 ?x879 ?x882 ?x885 ?x888 ?x891 ?x785 (* 2 (* v 2 r)) (* 2 (* v v (* (- 1) v))) ?x1018 ?x1024 ?x1020 ?x1057 (* 8 (* r v)) ?x1108 ?x1100)))
 (let (($x215 (= ?x210 0)))
 (let (($x291 (and $x215 (or (not (= (* ?x1260 ?x210) 0)) $x1500))))
 (let ((?x459 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x77 (+ r u)))
 (let ((?x97 (* ?x77 v v v)))
 (let ((?x1419 (* (- 1) (* (+ 2 u) (+ 2 u) ?x77 ?x77 ?x77 v v v))))
 (let ((?x890 (+ (* (+ 2 u) ?x77) ?x1419 ?x930 (* (- 1) (* (+ 2 u) ?x77 ?x77)) ?x97)))
 (let ((?x1314 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x1416 (* (- 1) v)))
 (let ((?x1424 (+ r ?x1416)))
 (let ((?x183 (+ 2 v)))
 (let ((?x475 (+ (* ?x1424 u) (* (- 1) (* ?x183 ?x183 ?x183 ?x1424 ?x1424 ?x1424 u u)) (* (- 1) (* ?x183 ?x183 ?x183)) (* (- 1) (* ?x1424 ?x1424 u)) (* ?x183 ?x183 ?x183 ?x1424))))
 (let (($x1196 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) (or (not (= (* ?x475 ?x1314) 0)) (not (= (* ?x890 ?x459) 0))))))
 (rewrite (= $x1196 $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((r Int) (u Int) (v Int) )(! (let ((?x77 (+ r u)))
 (let ((?x97 (* ?x77 v v v)))
 (let ((?x92 (* v v v)))
 (let ((?x94 (- (* ?x77 (+ u 2)) (* ?x77 ?x77 ?x77 (+ u 2) (+ u 2) v v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x88 (+ (- (+ (- ?x83 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x99 (* (- ?x88 ?x48) (+ (- (- ?x94 ?x92) (* ?x77 ?x77 (+ u 2))) ?x97))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x70 (- (- (* ?x52 u) (* ?x52 ?x52 ?x52 u u ?x57 ?x57 ?x57)) (* ?x57 ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x74 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (+ (- ?x70 (* ?x52 ?x52 u)) (* ?x52 ?x57 ?x57 ?x57)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x74 0)) (not (= ?x99 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1453 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x459 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x77 (+ r u)))
 (let ((?x97 (* ?x77 v v v)))
 (let ((?x92 (* v v v)))
 (let ((?x930 (* (- 1) ?x92)))
 (let ((?x1419 (* (- 1) (* (+ 2 u) (+ 2 u) ?x77 ?x77 ?x77 v v v))))
 (let ((?x890 (+ (* (+ 2 u) ?x77) ?x1419 ?x930 (* (- 1) (* (+ 2 u) ?x77 ?x77)) ?x97)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x1314 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x1416 (* (- 1) v)))
 (let ((?x1424 (+ r ?x1416)))
 (let ((?x183 (+ 2 v)))
 (let ((?x475 (+ (* ?x1424 u) (* (- 1) (* ?x183 ?x183 ?x183 ?x1424 ?x1424 ?x1424 u u)) (* (- 1) (* ?x183 ?x183 ?x183)) (* (- 1) (* ?x1424 ?x1424 u)) (* ?x183 ?x183 ?x183 ?x1424))))
 (let (($x1196 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) (or (not (= (* ?x475 ?x1314) 0)) (not (= (* ?x890 ?x459) 0))))))
 (let ((?x94 (- (* ?x77 (+ u 2)) (* ?x77 ?x77 ?x77 (+ u 2) (+ u 2) v v v))))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x88 (+ (- (+ (- ?x83 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x99 (* (- ?x88 ?x48) (+ (- (- ?x94 ?x92) (* ?x77 ?x77 (+ u 2))) ?x97))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x70 (- (- (* ?x52 u) (* ?x52 ?x52 ?x52 u u ?x57 ?x57 ?x57)) (* ?x57 ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x74 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (+ (- ?x70 (* ?x52 ?x52 u)) (* ?x52 ?x57 ?x57 ?x57)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x103 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x74 0)) (not (= ?x99 0))))))
 (rewrite (= $x103 $x1196))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x1313 (mp (mp @x105 (quant-intro (proof-bind ?x1453) (= $x104 $x1444)) $x1444) (rewrite (= $x1444 $x1444)) $x1444)))
 (let ((@x148 (mp (mp @x1313 (quant-intro (proof-bind ?x1282) (= $x1444 $x1304)) $x1304) (quant-intro (proof-bind ?x162) (= $x1304 $x246)) $x246)))
 (let ((@x952 (mp (mp~ @x148 (sk (~ $x246 $x121)) $x121) (rewrite (= $x121 $x1408)) $x1408)))
 (let ((@x1341 (and-elim @x952 $x300)))
 (let ((@x1367 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x300) $x1334)) @x1341 $x1334)))
 (let (($x276 (<= ?x621 0)))
 (let ((@x1364 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x300) $x276)) @x1341 $x276)))
 (let (($x241 (not (<= ?x872 0))))
 (let (($x268 (>= ?x872 0)))
 (let (($x987 (>= ?x936 0)))
 (let (($x1465 (<= ?x936 0)))
 (let ((@x929 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x911 (not $x1465) (not $x987))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1465)) @x1364 @x1367 false) $x1465) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x987)) @x1364 @x1367 false) $x987) $x911)))
 (let ((@x946 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1337 $x241 (not $x268))) (unit-resolution (and-elim @x952 $x1365) @x929 $x928) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x268)) @x1364 @x1367 false) $x268) $x241)))
 ((_ th-lemma arith farkas 1 1 1) @x946 @x1364 @x1367 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        56
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             416
 :arith-nonlinear-bounds    39
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 76
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.78
 :memory                    3.29
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1220738
 :num-checks                1
 :propagations              14
 :rlimit-count              7249
 :time                      0.01
 :total-time                0.02)
