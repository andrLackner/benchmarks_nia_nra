unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1475 (* y00 x!1 x!1)))
 (let ((?x1472 (* y00 x!1)))
 (let ((?x1470 (* y00 y!0 y!0 x!1 x!1)))
 (let ((?x1466 (* y00 y!0 y!0 x!1)))
 (let ((?x1369 (* x!1 x!1 x!1)))
 (let ((?x1370 (* (- 1) ?x1369)))
 (let ((?x1332 (* x!1 x!1)))
 (let ((?x1331 (* (- 1) ?x1332)))
 (let ((?x1303 (* x00 y!0 y!0 x!1 x!1)))
 (let ((?x110 (* (- 1) (* y!0 y!0 y!0 x!1 x!1))))
 (let ((?x736 (* x00 x!1)))
 (let ((?x733 (* y!0 y!0 x!1 x!1)))
 (let ((?x731 (* y!0 x!1 x!1)))
 (let ((?x703 (* (- 1) (* y!0 x!1))))
 (let ((?x589 (* (- 1) (* y!0 y!0 x!1 x!1 x!1))))
 (let ((?x708 (* x00 y!0 y!0 x!1)))
 (let ((?x683 (* x00 x!1 x!1)))
 (let ((?x601 (+ ?x683 (* 2 (* y!0 y!0 x!1)) (* (- 2) (* x00 y!0 x!1)) ?x708 ?x589 ?x703 ?x731 ?x733 ?x736 (* 2 (* y!0 x!1 x!1 x!1)) (* (- 2) (* x00 y!0 x!1 x!1)) ?x110 ?x1303 ?x1331 ?x1370 ?x1466 ?x1470 ?x1472 ?x1475 (* (- 2) (* y00 y!0 x!1)) (* (- 2) (* y00 y!0 x!1 x!1)) (* (- 1) (* y!0 y!0 y!0 x!1)))))
 (let (($x1091 (<= ?x601 0)))
 (let ((?x423 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x741 (<= ?x423 0)))
 (let (($x430 (= ?x423 0)))
 (let ((?x1153 (+ (* 2 y00) (* 2 x00) (* (- 2) y!0) (* 4 (* x00 y!0)) ?x683 (* 4 (* y!0 y!0 x!1)) (* (- 6) (* x00 y!0 x!1)) (* (- 3) ?x708) ?x589 ?x703 (* 2 (* y00 y!0 y!0)) (* 5 ?x731) ?x733 (* (- 3) ?x736) (* (- 2) (* y!0 x!1 x!1 x!1)) (* 2 (* x00 y!0 y!0)) (* 2 (* x00 y!0 x!1 x!1)) ?x110 (* (- 2) x!1) ?x1303 (* 3 ?x1332) ?x1370 (* (- 4) (* y!0 y!0)) (* (- 2) (* y!0 y!0 y!0)) (* (- 3) ?x1466) ?x1470 (* (- 3) ?x1472) ?x1475 (* (- 6) (* y00 y!0 x!1)) (* 2 (* y00 y!0 x!1 x!1)) (* 3 (* y!0 y!0 y!0 x!1)) (* 4 (* y00 y!0)))))
 (let (($x1156 (= ?x1153 0)))
 (let (($x522 (not $x1156)))
 (let (($x701 (or (not (= ?x601 0)) $x522)))
 (let (($x536 (and $x430 $x701)))
 (let ((?x1372 (* 2 (* x!1 x!1 x!1 y!0))))
 (let ((?x86 (* x!1 x!1 x!1 y!0 y!0)))
 (let ((?x1366 (* (- 2) (* x!1 x!1 y!0 x00))))
 (let ((?x1345 (* x!1 y!0)))
 (let ((?x209 (* x!1 x!1 y!0 y!0 y!0)))
 (let ((?x1379 (* (- 2) (* x!1 x!1 y!0 y00))))
 (let ((?x944 (* (- 2) x00)))
 (let ((?x943 (* (- 2) y00)))
 (let ((?x1446 (+ (* 2 x!1) (* 2 y!0) ?x943 ?x944 (* (- 4) (* y!0 x00)) (* (- 2) (* y!0 y!0 x00)) (* (- 4) (* y!0 y00)) (* (- 2) (* y!0 y!0 y00)) (* 3 (* x!1 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y!0 y00)) (* 3 (* x!1 y00)) (* (- 1) (* x!1 x!1 y00)) (* 6 (* x!1 y!0 y00)) ?x1379 (* 4 (* y!0 y!0)) (* 2 (* y!0 y!0 y!0)) (* (- 3) (* x!1 y!0 y!0 y!0)) ?x209 (* (- 3) ?x1332) ?x1345 (* (- 5) (* x!1 x!1 y!0)) (* (- 4) (* x!1 y!0 y!0)) (* (- 1) (* x!1 x!1 y!0 y!0)) (* 3 (* x!1 x00)) (* (- 1) (* x!1 x!1 x00)) (* 6 (* x!1 y!0 x00)) ?x1366 (* 3 (* x!1 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 y!0 x00)) ?x86 ?x1369 ?x1372)))
 (let ((?x1015 (* x!1 x!1 y!0 y!0 x00)))
 (let ((?x972 (* x!1 y!0 y!0 x00)))
 (let ((?x1365 (* x!1 x!1 x00)))
 (let ((?x1351 (* x!1 x00)))
 (let ((?x1353 (* x!1 x!1 y!0 y!0)))
 (let ((?x1346 (* x!1 x!1 y!0)))
 (let ((?x1350 (* x!1 x!1 y00)))
 (let ((?x1344 (* x!1 y00)))
 (let ((?x1363 (* x!1 x!1 y!0 y!0 y00)))
 (let ((?x1362 (* x!1 y!0 y!0 y00)))
 (let ((?x1374 (+ ?x1362 ?x1363 ?x1344 ?x1350 (* (- 2) (* x!1 y!0 y00)) ?x1379 (* (- 1) (* x!1 y!0 y!0 y!0)) (* (- 1) ?x209) ?x1331 (* (- 1) ?x1345) ?x1346 (* 2 (* x!1 y!0 y!0)) ?x1353 ?x1351 ?x1365 (* (- 2) (* x!1 y!0 x00)) ?x1366 ?x972 ?x1015 (* (- 1) ?x86) ?x1370 ?x1372)))
 (let (($x1451 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x1374 0)) (not (= ?x1446 0))))))
 (let (($x1447 (exists ((x Int) (y Int) )(! (let ((?x649 (* x x x y)))
 (let ((?x682 (* 2 ?x649)))
 (let ((?x634 (* x x x)))
 (let ((?x618 (* x x x y y)))
 (let ((?x539 (* x x y y x00)))
 (let ((?x969 (* (- 1) ?x539)))
 (let ((?x534 (* x y y x00)))
 (let ((?x1761 (* 3 ?x534)))
 (let ((?x519 (* x x y x00)))
 (let ((?x967 (* (- 2) ?x519)))
 (let ((?x510 (* x y x00)))
 (let ((?x1760 (* 6 ?x510)))
 (let ((?x503 (* x x x00)))
 (let ((?x965 (* (- 1) ?x503)))
 (let ((?x499 (* x x00)))
 (let ((?x1759 (* 3 ?x499)))
 (let ((?x349 (* x x y y)))
 (let ((?x617 (* (- 1) ?x349)))
 (let ((?x345 (* x y y)))
 (let ((?x964 (* (- 4) ?x345)))
 (let ((?x334 (* x x y)))
 (let ((?x963 (* (- 5) ?x334)))
 (let ((?x330 (* x y)))
 (let ((?x325 (* x x)))
 (let ((?x961 (* (- 3) ?x325)))
 (let ((?x314 (* x x y y y)))
 (let ((?x312 (* x y y y)))
 (let ((?x960 (* (- 3) ?x312)))
 (let ((?x959 (* 2 (* y y y))))
 (let ((?x301 (* y y)))
 (let ((?x1764 (* 4 ?x301)))
 (let ((?x220 (* x x y y00)))
 (let ((?x957 (* (- 2) ?x220)))
 (let ((?x216 (* x y y00)))
 (let ((?x1763 (* 6 ?x216)))
 (let ((?x211 (* x x y00)))
 (let ((?x955 (* (- 1) ?x211)))
 (let ((?x207 (* x y00)))
 (let ((?x1762 (* 3 ?x207)))
 (let ((?x199 (* x x y y y00)))
 (let ((?x953 (* (- 1) ?x199)))
 (let ((?x197 (* x y y y00)))
 (let ((?x952 (* 3 ?x197)))
 (let ((?x951 (* (- 2) (* y y y00))))
 (let ((?x950 (* (- 4) (* y y00))))
 (let ((?x152 (* y y x00)))
 (let ((?x949 (* (- 2) ?x152)))
 (let ((?x141 (* y x00)))
 (let ((?x948 (* (- 4) ?x141)))
 (let ((?x944 (* (- 2) x00)))
 (let ((?x943 (* (- 2) y00)))
 (let ((?x201 (* 2 y)))
 (let ((?x810 (* 2 x)))
 (let ((?x1439 (+ ?x810 ?x201 ?x943 ?x944 ?x948 ?x949 ?x950 ?x951 ?x952 ?x953 ?x1762 ?x955 ?x1763 ?x957 ?x1764 ?x959 ?x960 ?x314 ?x961 ?x330 ?x963 ?x964 ?x617 ?x1759 ?x965 ?x1760 ?x967 ?x1761 ?x969 ?x618 ?x634 ?x682)))
 (let ((?x1227 (* (- 1) ?x634)))
 (let ((?x768 (* (- 1) ?x618)))
 (let ((?x399 (* (- 2) ?x510)))
 (let ((?x331 (* (- 1) ?x330)))
 (let ((?x562 (* (- 1) ?x325)))
 (let ((?x762 (* (- 1) ?x314)))
 (let ((?x787 (* (- 1) ?x312)))
 (let ((?x749 (* (- 2) ?x216)))
 (let ((?x1427 (+ ?x197 ?x199 ?x207 ?x211 ?x749 ?x957 ?x787 ?x762 ?x562 ?x331 ?x334 (* 2 ?x345) ?x349 ?x499 ?x503 ?x399 ?x967 ?x534 ?x539 ?x768 ?x1227 ?x682)))
 (let (($x102 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x102 (or (not (= ?x1427 0)) (not (= ?x1439 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x1773 (exists ((x Int) (y Int) )(! (let ((?x649 (* x x x y)))
 (let ((?x682 (* 2 ?x649)))
 (let ((?x634 (* x x x)))
 (let ((?x618 (* x x x y y)))
 (let ((?x539 (* x x y y x00)))
 (let ((?x969 (* (- 1) ?x539)))
 (let ((?x534 (* x y y x00)))
 (let ((?x1761 (* 3 ?x534)))
 (let ((?x519 (* x x y x00)))
 (let ((?x967 (* (- 2) ?x519)))
 (let ((?x510 (* x y x00)))
 (let ((?x1760 (* 6 ?x510)))
 (let ((?x503 (* x x x00)))
 (let ((?x965 (* (- 1) ?x503)))
 (let ((?x499 (* x x00)))
 (let ((?x1759 (* 3 ?x499)))
 (let ((?x349 (* x x y y)))
 (let ((?x617 (* (- 1) ?x349)))
 (let ((?x345 (* x y y)))
 (let ((?x738 (* (- 2) ?x345)))
 (let ((?x314 (* x x y y y)))
 (let ((?x312 (* x y y y)))
 (let ((?x960 (* (- 3) ?x312)))
 (let ((?x959 (* 2 (* y y y))))
 (let ((?x301 (* y y)))
 (let ((?x1764 (* 4 ?x301)))
 (let ((?x220 (* x x y y00)))
 (let ((?x957 (* (- 2) ?x220)))
 (let ((?x216 (* x y y00)))
 (let ((?x1763 (* 6 ?x216)))
 (let ((?x211 (* x x y00)))
 (let ((?x955 (* (- 1) ?x211)))
 (let ((?x207 (* x y00)))
 (let ((?x1762 (* 3 ?x207)))
 (let ((?x199 (* x x y y y00)))
 (let ((?x953 (* (- 1) ?x199)))
 (let ((?x197 (* x y y y00)))
 (let ((?x952 (* 3 ?x197)))
 (let ((?x951 (* (- 2) (* y y y00))))
 (let ((?x950 (* (- 4) (* y y00))))
 (let ((?x152 (* y y x00)))
 (let ((?x949 (* (- 2) ?x152)))
 (let ((?x141 (* y x00)))
 (let ((?x948 (* (- 4) ?x141)))
 (let ((?x944 (* (- 2) x00)))
 (let ((?x943 (* (- 2) y00)))
 (let ((?x201 (* 2 y)))
 (let ((?x810 (* 2 x)))
 (let ((?x1765 (+ ?x810 ?x201 ?x943 ?x944 ?x948 ?x949 ?x950 ?x951 ?x952 ?x953 ?x1762 ?x955 ?x1763 ?x957 (* (- 1) (* x y y 1)) ?x1764 ?x959 ?x960 ?x314 (* (- 2) (* x x)) (* 2 (* x y)) (* (- 3) (* x x y)) ?x738 ?x617 (* (- 1) (* x 1 1 y)) ?x1759 ?x965 ?x1760 ?x967 ?x1761 ?x969 ?x618 ?x634 ?x682 (* (- 1) (* x y 1 y)) (* (- 1) (* x 1 y y)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) y y)))))
 (let ((?x1227 (* (- 1) ?x634)))
 (let ((?x768 (* (- 1) ?x618)))
 (let ((?x399 (* (- 2) ?x510)))
 (let ((?x334 (* x x y)))
 (let ((?x642 (* (- 1) ?x334)))
 (let ((?x325 (* x x)))
 (let ((?x562 (* (- 1) ?x325)))
 (let ((?x762 (* (- 1) ?x314)))
 (let ((?x787 (* (- 1) ?x312)))
 (let ((?x749 (* (- 2) ?x216)))
 (let ((?x769 (+ (* y y 1 1) (* y (- 1) x 1) (* y y x 1) (* y (- 1) 1 x) (* y (- 1) x x) ?x197 ?x199 ?x207 ?x211 ?x749 ?x957 (* (- 1) ?x301) (* y 1 x x) ?x787 ?x762 ?x562 (* (- 2) (* x y)) ?x642 ?x349 ?x499 ?x503 ?x399 ?x967 ?x534 ?x539 (* y y 1 x) ?x768 ?x1227 ?x682 (* y (- 1) 1 1) (* y x x 1) (* y x 1 1) (* y 1 1 1) (* y 1 x 1) (* y 1 1 x) (* y x 1 x))))
 (let (($x102 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x102 (or (not (= ?x769 0)) (not (= ?x1765 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x173 (lambda ((x Int) (y Int) )(let ((?x649 (* x x x y)))
 (let ((?x682 (* 2 ?x649)))
 (let ((?x634 (* x x x)))
 (let ((?x618 (* x x x y y)))
 (let ((?x539 (* x x y y x00)))
 (let ((?x969 (* (- 1) ?x539)))
 (let ((?x534 (* x y y x00)))
 (let ((?x1761 (* 3 ?x534)))
 (let ((?x519 (* x x y x00)))
 (let ((?x967 (* (- 2) ?x519)))
 (let ((?x510 (* x y x00)))
 (let ((?x1760 (* 6 ?x510)))
 (let ((?x503 (* x x x00)))
 (let ((?x965 (* (- 1) ?x503)))
 (let ((?x499 (* x x00)))
 (let ((?x1759 (* 3 ?x499)))
 (let ((?x349 (* x x y y)))
 (let ((?x617 (* (- 1) ?x349)))
 (let ((?x345 (* x y y)))
 (let ((?x964 (* (- 4) ?x345)))
 (let ((?x334 (* x x y)))
 (let ((?x963 (* (- 5) ?x334)))
 (let ((?x330 (* x y)))
 (let ((?x325 (* x x)))
 (let ((?x961 (* (- 3) ?x325)))
 (let ((?x314 (* x x y y y)))
 (let ((?x312 (* x y y y)))
 (let ((?x960 (* (- 3) ?x312)))
 (let ((?x959 (* 2 (* y y y))))
 (let ((?x301 (* y y)))
 (let ((?x1764 (* 4 ?x301)))
 (let ((?x220 (* x x y y00)))
 (let ((?x957 (* (- 2) ?x220)))
 (let ((?x216 (* x y y00)))
 (let ((?x1763 (* 6 ?x216)))
 (let ((?x211 (* x x y00)))
 (let ((?x955 (* (- 1) ?x211)))
 (let ((?x207 (* x y00)))
 (let ((?x1762 (* 3 ?x207)))
 (let ((?x199 (* x x y y y00)))
 (let ((?x953 (* (- 1) ?x199)))
 (let ((?x197 (* x y y y00)))
 (let ((?x952 (* 3 ?x197)))
 (let ((?x951 (* (- 2) (* y y y00))))
 (let ((?x950 (* (- 4) (* y y00))))
 (let ((?x152 (* y y x00)))
 (let ((?x949 (* (- 2) ?x152)))
 (let ((?x141 (* y x00)))
 (let ((?x948 (* (- 4) ?x141)))
 (let ((?x944 (* (- 2) x00)))
 (let ((?x943 (* (- 2) y00)))
 (let ((?x201 (* 2 y)))
 (let ((?x810 (* 2 x)))
 (let ((?x1439 (+ ?x810 ?x201 ?x943 ?x944 ?x948 ?x949 ?x950 ?x951 ?x952 ?x953 ?x1762 ?x955 ?x1763 ?x957 ?x1764 ?x959 ?x960 ?x314 ?x961 ?x330 ?x963 ?x964 ?x617 ?x1759 ?x965 ?x1760 ?x967 ?x1761 ?x969 ?x618 ?x634 ?x682)))
 (let ((?x1227 (* (- 1) ?x634)))
 (let ((?x768 (* (- 1) ?x618)))
 (let ((?x399 (* (- 2) ?x510)))
 (let ((?x331 (* (- 1) ?x330)))
 (let ((?x562 (* (- 1) ?x325)))
 (let ((?x762 (* (- 1) ?x314)))
 (let ((?x787 (* (- 1) ?x312)))
 (let ((?x749 (* (- 2) ?x216)))
 (let ((?x1427 (+ ?x197 ?x199 ?x207 ?x211 ?x749 ?x957 ?x787 ?x762 ?x562 ?x331 ?x334 (* 2 ?x345) ?x349 ?x499 ?x503 ?x399 ?x967 ?x534 ?x539 ?x768 ?x1227 ?x682)))
 (let (($x102 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x513 (and $x102 (or (not (= ?x1427 0)) (not (= ?x1439 0))))))
 (let ((?x738 (* (- 2) ?x345)))
 (let ((?x1765 (+ ?x810 ?x201 ?x943 ?x944 ?x948 ?x949 ?x950 ?x951 ?x952 ?x953 ?x1762 ?x955 ?x1763 ?x957 (* (- 1) (* x y y 1)) ?x1764 ?x959 ?x960 ?x314 (* (- 2) ?x325) (* 2 ?x330) (* (- 3) ?x334) ?x738 ?x617 (* (- 1) (* x 1 1 y)) ?x1759 ?x965 ?x1760 ?x967 ?x1761 ?x969 ?x618 ?x634 ?x682 (* (- 1) (* x y 1 y)) (* (- 1) (* x 1 y y)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) y y)))))
 (let ((?x642 (* (- 1) ?x334)))
 (let ((?x769 (+ (* y y 1 1) (* y (- 1) x 1) (* y y x 1) (* y (- 1) 1 x) (* y (- 1) x x) ?x197 ?x199 ?x207 ?x211 ?x749 ?x957 (* (- 1) ?x301) (* y 1 x x) ?x787 ?x762 ?x562 (* (- 2) ?x330) ?x642 ?x349 ?x499 ?x503 ?x399 ?x967 ?x534 ?x539 (* y y 1 x) ?x768 ?x1227 ?x682 (* y (- 1) 1 1) (* y x x 1) (* y x 1 1) (* y 1 1 1) (* y 1 x 1) (* y 1 1 x) (* y x 1 x))))
 (let (($x1402 (and $x102 (or (not (= ?x769 0)) (not (= ?x1765 0))))))
 (rewrite (= $x1402 $x513)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x433 (exists ((x Int) (y Int) )(! (let ((?x431 (+ 1 y)))
 (let ((?x427 (+ (- 1) x)))
 (let ((?x319 (* y00 ?x427 ?x431 ?x431)))
 (let ((?x417 (* ?x427 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x299 (* ?x427 ?x427 ?x431 ?x431 ?x431)))
 (let ((?x291 (* x00 ?x427 ?x431 ?x431)))
 (let ((?x882 (+ ?x291 (* (- 1) (* y00 ?x427 ?x427 ?x431 ?x431)) ?x299 (* (- 1) (* x00 ?x427 ?x427 ?x431 ?x431)) ?x417 (* (- 1) (* ?x427 ?x427 ?x431 ?x431)) (* (- 1) (* ?x427 ?x431 ?x431 ?x431)) ?x319)))
 (let ((?x722 (+ 1 x)))
 (let ((?x435 (+ (- 1) y)))
 (let ((?x805 (* y00 ?x435 ?x435 ?x722)))
 (let ((?x700 (* ?x435 ?x435 ?x722 ?x722 ?x722)))
 (let ((?x384 (* ?x435 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x448 (* x00 ?x435 ?x435 ?x722)))
 (let ((?x407 (+ ?x448 (* (- 1) (* y00 ?x435 ?x435 ?x722 ?x722)) ?x384 (* (- 1) (* x00 ?x435 ?x435 ?x722 ?x722)) ?x700 (* (- 1) (* ?x435 ?x435 ?x722 ?x722)) (* (- 1) (* ?x435 ?x435 ?x435 ?x722)) ?x805)))
 (let (($x278 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x278 (or (not (= ?x407 0)) (not (= ?x882 0))))))))))))))))))) :qid k!27))
 ))
 (let ((?x1412 (lambda ((x Int) (y Int) )(let ((?x649 (* x x x y)))
 (let ((?x682 (* 2 ?x649)))
 (let ((?x634 (* x x x)))
 (let ((?x618 (* x x x y y)))
 (let ((?x539 (* x x y y x00)))
 (let ((?x969 (* (- 1) ?x539)))
 (let ((?x534 (* x y y x00)))
 (let ((?x1761 (* 3 ?x534)))
 (let ((?x519 (* x x y x00)))
 (let ((?x967 (* (- 2) ?x519)))
 (let ((?x510 (* x y x00)))
 (let ((?x1760 (* 6 ?x510)))
 (let ((?x503 (* x x x00)))
 (let ((?x965 (* (- 1) ?x503)))
 (let ((?x499 (* x x00)))
 (let ((?x1759 (* 3 ?x499)))
 (let ((?x349 (* x x y y)))
 (let ((?x617 (* (- 1) ?x349)))
 (let ((?x345 (* x y y)))
 (let ((?x738 (* (- 2) ?x345)))
 (let ((?x314 (* x x y y y)))
 (let ((?x312 (* x y y y)))
 (let ((?x960 (* (- 3) ?x312)))
 (let ((?x959 (* 2 (* y y y))))
 (let ((?x301 (* y y)))
 (let ((?x1764 (* 4 ?x301)))
 (let ((?x220 (* x x y y00)))
 (let ((?x957 (* (- 2) ?x220)))
 (let ((?x216 (* x y y00)))
 (let ((?x1763 (* 6 ?x216)))
 (let ((?x211 (* x x y00)))
 (let ((?x955 (* (- 1) ?x211)))
 (let ((?x207 (* x y00)))
 (let ((?x1762 (* 3 ?x207)))
 (let ((?x199 (* x x y y y00)))
 (let ((?x953 (* (- 1) ?x199)))
 (let ((?x197 (* x y y y00)))
 (let ((?x952 (* 3 ?x197)))
 (let ((?x951 (* (- 2) (* y y y00))))
 (let ((?x950 (* (- 4) (* y y00))))
 (let ((?x152 (* y y x00)))
 (let ((?x949 (* (- 2) ?x152)))
 (let ((?x141 (* y x00)))
 (let ((?x948 (* (- 4) ?x141)))
 (let ((?x944 (* (- 2) x00)))
 (let ((?x943 (* (- 2) y00)))
 (let ((?x201 (* 2 y)))
 (let ((?x810 (* 2 x)))
 (let ((?x1765 (+ ?x810 ?x201 ?x943 ?x944 ?x948 ?x949 ?x950 ?x951 ?x952 ?x953 ?x1762 ?x955 ?x1763 ?x957 (* (- 1) (* x y y 1)) ?x1764 ?x959 ?x960 ?x314 (* (- 2) (* x x)) (* 2 (* x y)) (* (- 3) (* x x y)) ?x738 ?x617 (* (- 1) (* x 1 1 y)) ?x1759 ?x965 ?x1760 ?x967 ?x1761 ?x969 ?x618 ?x634 ?x682 (* (- 1) (* x y 1 y)) (* (- 1) (* x 1 y y)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) y y)))))
 (let ((?x1227 (* (- 1) ?x634)))
 (let ((?x768 (* (- 1) ?x618)))
 (let ((?x399 (* (- 2) ?x510)))
 (let ((?x334 (* x x y)))
 (let ((?x642 (* (- 1) ?x334)))
 (let ((?x325 (* x x)))
 (let ((?x562 (* (- 1) ?x325)))
 (let ((?x762 (* (- 1) ?x314)))
 (let ((?x787 (* (- 1) ?x312)))
 (let ((?x749 (* (- 2) ?x216)))
 (let ((?x769 (+ (* y y 1 1) (* y (- 1) x 1) (* y y x 1) (* y (- 1) 1 x) (* y (- 1) x x) ?x197 ?x199 ?x207 ?x211 ?x749 ?x957 (* (- 1) ?x301) (* y 1 x x) ?x787 ?x762 ?x562 (* (- 2) (* x y)) ?x642 ?x349 ?x499 ?x503 ?x399 ?x967 ?x534 ?x539 (* y y 1 x) ?x768 ?x1227 ?x682 (* y (- 1) 1 1) (* y x x 1) (* y x 1 1) (* y 1 1 1) (* y 1 x 1) (* y 1 1 x) (* y x 1 x))))
 (let (($x102 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1402 (and $x102 (or (not (= ?x769 0)) (not (= ?x1765 0))))))
 (let ((?x431 (+ 1 y)))
 (let ((?x427 (+ (- 1) x)))
 (let ((?x319 (* y00 ?x427 ?x431 ?x431)))
 (let ((?x417 (* ?x427 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x299 (* ?x427 ?x427 ?x431 ?x431 ?x431)))
 (let ((?x291 (* x00 ?x427 ?x431 ?x431)))
 (let ((?x882 (+ ?x291 (* (- 1) (* y00 ?x427 ?x427 ?x431 ?x431)) ?x299 (* (- 1) (* x00 ?x427 ?x427 ?x431 ?x431)) ?x417 (* (- 1) (* ?x427 ?x427 ?x431 ?x431)) (* (- 1) (* ?x427 ?x431 ?x431 ?x431)) ?x319)))
 (let ((?x722 (+ 1 x)))
 (let ((?x435 (+ (- 1) y)))
 (let ((?x805 (* y00 ?x435 ?x435 ?x722)))
 (let ((?x700 (* ?x435 ?x435 ?x722 ?x722 ?x722)))
 (let ((?x384 (* ?x435 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x448 (* x00 ?x435 ?x435 ?x722)))
 (let ((?x407 (+ ?x448 (* (- 1) (* y00 ?x435 ?x435 ?x722 ?x722)) ?x384 (* (- 1) (* x00 ?x435 ?x435 ?x722 ?x722)) ?x700 (* (- 1) (* ?x435 ?x435 ?x722 ?x722)) (* (- 1) (* ?x435 ?x435 ?x435 ?x722)) ?x805)))
 (let (($x278 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x408 (and $x278 (or (not (= ?x407 0)) (not (= ?x882 0))))))
 (rewrite (= $x408 $x1402)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x411 (exists ((x Int) (y Int) )(! (let ((?x722 (+ 1 x)))
 (let ((?x435 (+ (- 1) y)))
 (let ((?x940 (* ?x435 ?x435 ?x435 ?x722)))
 (let ((?x1087 (* ?x435 ?x435 ?x722 ?x722)))
 (let ((?x257 (* x00 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x454 (* y00 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x580 (+ (* (- 1) (* x00 ?x435 ?x435 ?x722)) ?x454 (* (- 1) (* ?x435 ?x435 ?x435 ?x722 ?x722)) ?x257 (* (- 1) (* ?x435 ?x435 ?x722 ?x722 ?x722)) ?x1087 ?x940 (* (- 1) (* y00 ?x435 ?x435 ?x722)))))
 (let ((?x431 (+ 1 y)))
 (let ((?x427 (+ (- 1) x)))
 (let ((?x466 (* ?x427 ?x431 ?x431 ?x431)))
 (let ((?x464 (* ?x427 ?x427 ?x431 ?x431)))
 (let ((?x445 (* x00 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x438 (* y00 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x802 (+ (* (- 1) (* x00 ?x427 ?x431 ?x431)) ?x438 (* (- 1) (* ?x427 ?x427 ?x431 ?x431 ?x431)) ?x445 (* (- 1) (* ?x427 ?x427 ?x427 ?x431 ?x431)) ?x464 ?x466 (* (- 1) (* y00 ?x427 ?x431 ?x431)))))
 (let (($x278 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x278 (or (not (= ?x802 0)) (not (= ?x580 0))))))))))))))))))) :qid k!27))
 ))
 (let ((?x409 (lambda ((x Int) (y Int) )(let ((?x431 (+ 1 y)))
 (let ((?x427 (+ (- 1) x)))
 (let ((?x319 (* y00 ?x427 ?x431 ?x431)))
 (let ((?x417 (* ?x427 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x299 (* ?x427 ?x427 ?x431 ?x431 ?x431)))
 (let ((?x291 (* x00 ?x427 ?x431 ?x431)))
 (let ((?x882 (+ ?x291 (* (- 1) (* y00 ?x427 ?x427 ?x431 ?x431)) ?x299 (* (- 1) (* x00 ?x427 ?x427 ?x431 ?x431)) ?x417 (* (- 1) (* ?x427 ?x427 ?x431 ?x431)) (* (- 1) (* ?x427 ?x431 ?x431 ?x431)) ?x319)))
 (let ((?x722 (+ 1 x)))
 (let ((?x435 (+ (- 1) y)))
 (let ((?x805 (* y00 ?x435 ?x435 ?x722)))
 (let ((?x700 (* ?x435 ?x435 ?x722 ?x722 ?x722)))
 (let ((?x384 (* ?x435 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x448 (* x00 ?x435 ?x435 ?x722)))
 (let ((?x407 (+ ?x448 (* (- 1) (* y00 ?x435 ?x435 ?x722 ?x722)) ?x384 (* (- 1) (* x00 ?x435 ?x435 ?x722 ?x722)) ?x700 (* (- 1) (* ?x435 ?x435 ?x722 ?x722)) (* (- 1) (* ?x435 ?x435 ?x435 ?x722)) ?x805)))
 (let (($x278 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x408 (and $x278 (or (not (= ?x407 0)) (not (= ?x882 0))))))
 (let ((?x940 (* ?x435 ?x435 ?x435 ?x722)))
 (let ((?x1087 (* ?x435 ?x435 ?x722 ?x722)))
 (let ((?x257 (* x00 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x454 (* y00 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x580 (+ (* (- 1) ?x448) ?x454 (* (- 1) ?x384) ?x257 (* (- 1) ?x700) ?x1087 ?x940 (* (- 1) ?x805))))
 (let ((?x466 (* ?x427 ?x431 ?x431 ?x431)))
 (let ((?x464 (* ?x427 ?x427 ?x431 ?x431)))
 (let ((?x445 (* x00 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x438 (* y00 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x802 (+ (* (- 1) ?x291) ?x438 (* (- 1) ?x299) ?x445 (* (- 1) ?x417) ?x464 ?x466 (* (- 1) ?x319))))
 (let (($x309 (and $x278 (or (not (= ?x802 0)) (not (= ?x580 0))))))
 (rewrite (= $x309 $x408))))))))))))))))))))))))))))))
 ))
 (let (($x73 (exists ((x Int) (y Int) )(! (let ((?x54 (- y 1)))
 (let ((?x53 (+ x 1)))
 (let ((?x57 (+ (* (- 1) ?x53 x00 ?x54 ?x54) (* ?x53 ?x53 ?x54 ?x54 y00))))
 (let ((?x61 (+ (- ?x57 (* ?x53 ?x53 ?x54 ?x54 ?x54)) (* ?x53 ?x53 x00 ?x54 ?x54))))
 (let ((?x66 (+ (- ?x61 (* ?x53 ?x53 ?x53 ?x54 ?x54)) (* ?x53 ?x53 ?x54 ?x54) (* ?x53 ?x54 ?x54 ?x54))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x39 (+ (* (- 1) ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x36 ?x36 y00))))
 (let ((?x43 (+ (- ?x39 (* ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x48 (+ (- ?x43 (* ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36))))
 (let (($x71 (or (not (= (- ?x48 (* ?x35 ?x36 ?x36 y00)) 0)) (not (= (- ?x66 (* ?x53 ?x54 ?x54 y00)) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x71)))))))))))) :qid k!27))
 ))
 (let ((?x382 (lambda ((x Int) (y Int) )(let ((?x722 (+ 1 x)))
 (let ((?x435 (+ (- 1) y)))
 (let ((?x940 (* ?x435 ?x435 ?x435 ?x722)))
 (let ((?x1087 (* ?x435 ?x435 ?x722 ?x722)))
 (let ((?x257 (* x00 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x454 (* y00 ?x435 ?x435 ?x722 ?x722)))
 (let ((?x580 (+ (* (- 1) (* x00 ?x435 ?x435 ?x722)) ?x454 (* (- 1) (* ?x435 ?x435 ?x435 ?x722 ?x722)) ?x257 (* (- 1) (* ?x435 ?x435 ?x722 ?x722 ?x722)) ?x1087 ?x940 (* (- 1) (* y00 ?x435 ?x435 ?x722)))))
 (let ((?x431 (+ 1 y)))
 (let ((?x427 (+ (- 1) x)))
 (let ((?x466 (* ?x427 ?x431 ?x431 ?x431)))
 (let ((?x464 (* ?x427 ?x427 ?x431 ?x431)))
 (let ((?x445 (* x00 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x438 (* y00 ?x427 ?x427 ?x431 ?x431)))
 (let ((?x802 (+ (* (- 1) (* x00 ?x427 ?x431 ?x431)) ?x438 (* (- 1) (* ?x427 ?x427 ?x431 ?x431 ?x431)) ?x445 (* (- 1) (* ?x427 ?x427 ?x427 ?x431 ?x431)) ?x464 ?x466 (* (- 1) (* y00 ?x427 ?x431 ?x431)))))
 (let (($x278 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x309 (and $x278 (or (not (= ?x802 0)) (not (= ?x580 0))))))
 (let ((?x54 (- y 1)))
 (let ((?x53 (+ x 1)))
 (let ((?x57 (+ (* (- 1) ?x53 x00 ?x54 ?x54) (* ?x53 ?x53 ?x54 ?x54 y00))))
 (let ((?x61 (+ (- ?x57 (* ?x53 ?x53 ?x54 ?x54 ?x54)) (* ?x53 ?x53 x00 ?x54 ?x54))))
 (let ((?x66 (+ (- ?x61 (* ?x53 ?x53 ?x53 ?x54 ?x54)) (* ?x53 ?x53 ?x54 ?x54) (* ?x53 ?x54 ?x54 ?x54))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x39 (+ (* (- 1) ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x36 ?x36 y00))))
 (let ((?x43 (+ (- ?x39 (* ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x48 (+ (- ?x43 (* ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36))))
 (let (($x71 (or (not (= (- ?x48 (* ?x35 ?x36 ?x36 y00)) 0)) (not (= (- ?x66 (* ?x53 ?x54 ?x54 y00)) 0)))))
 (let (($x72 (and (= (+ (- (- x y00) x00) y) 0) $x71)))
 (rewrite (= $x72 $x309)))))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x413 (mp (mp @x74 (quant-intro (proof-bind ?x382) (= $x73 $x411)) $x411) (rewrite (= $x411 $x411)) $x411)))
 (let ((@x1612 (mp (mp @x413 (quant-intro (proof-bind ?x409) (= $x411 $x433)) $x433) (quant-intro (proof-bind ?x1412) (= $x433 $x1773)) $x1773)))
 (let ((@x1454 (mp~ (mp @x1612 (quant-intro (proof-bind ?x173) (= $x1773 $x1447)) $x1447) (sk (~ $x1447 $x1451)) $x1451)))
 (let ((@x1306 (mp @x1454 (rewrite (= $x1451 $x536)) $x536)))
 (let ((@x732 (and-elim @x1306 $x430)))
 (let ((@x1152 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x430) $x741)) @x732 $x741)))
 (let (($x679 (>= ?x423 0)))
 (let ((@x1664 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x430) $x679)) @x732 $x679)))
 (let ((@x398 (lemma ((_ th-lemma arith) (hypothesis (not $x1091)) @x1664 @x1152 false) $x1091)))
 (let (($x1073 (>= ?x601 0)))
 (let ((@x577 (lemma ((_ th-lemma arith) (hypothesis (not $x1073)) @x1664 @x1152 false) $x1073)))
 (let (($x693 (not (<= ?x1153 0))))
 (let (($x677 (>= ?x1153 0)))
 (let ((@x611 (lemma ((_ th-lemma arith) (hypothesis (not $x677)) @x1664 @x1152 @x1664 @x1152 false) $x677)))
 (let (($x713 (= ?x601 0)))
 (let ((@x825 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x713 (not $x1091) (not $x1073))) @x398 @x577 $x713)))
 (let ((@x698 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1156 $x693 (not $x677))) (unit-resolution (and-elim @x1306 $x701) @x825 $x522) @x611 $x693)))
 ((_ th-lemma arith) @x698 @x1664 @x1152 @x1664 @x1152 @x577 @x398 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        19
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           4
 :arith-grobner             4
 :arith-max-min             500
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              3
 :arith-row-summations      2
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                3.79
 :memory                    3.31
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1346197
 :num-checks                1
 :propagations              14
 :rlimit-count              6813
 :time                      0.01
 :total-time                0.02)
