unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!10 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x774 (+ k!00 (* (- 1) (* y!2 v!4)) k!10 (* (- 1) (* x!3 u!5)))))
 (let (($x729 (>= ?x774 0)))
 (let (($x773 (= ?x774 0)))
 (let ((?x848 (* x!3 u!5)))
 (let ((?x103 (* (- 1) k!10)))
 (let ((?x426 (* y!2 v!4)))
 (let ((?x555 (* (- 1) k!00)))
 (let ((?x678 (+ ?x555 ?x426 ?x103 ?x848)))
 (let ((?x806 (* (- 1) (* y!2 y!2 x!3 v!4 v!4 v!4 u!5 u!5 u!5))))
 (let ((?x521 (* y!2 y!2 y!2 x!3 v!4 v!4 v!4 u!5)))
 (let ((?x144 (+ ?x521 (* 3 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4)) (* (- 3) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4)) (* (- 1) (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4)) (* 6 (* y!2 x!3 x!3 v!4 v!4 v!4 v!4 v!4 u!5)) (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 u!5)) (* y!2 y!2 y!2 x!3 v!4 v!4 v!4 v!4) (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4)) (* 3 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 u!5)) ?x806 (* (- 3) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 u!5)) (* (- 3) (* y!2 y!2 x!3 v!4 v!4 v!4 v!4 u!5 u!5)) (* (- 3) (* y!2 y!2 x!3 v!4 v!4 v!4 v!4 v!4 u!5)) (* (- 1) (* y!2 y!2 x!3 v!4 v!4 v!4 v!4 v!4 v!4)) (* (- 1) (* x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5 u!5)) (* 6 (* y!2 x!3 x!3 v!4 v!4 v!4 v!4 u!5 u!5)) (* 2 (* y!2 x!3 x!3 v!4 v!4 v!4 u!5 u!5 u!5)) (* (- 3) (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 u!5)) (* (- 3) (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5 u!5)) (* 2 (* y!2 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4)))))
 (let ((?x886 (* ?x144 ?x678)))
 (let (($x523 (= ?x886 0)))
 (let (($x888 (not $x523)))
 (let ((?x825 (+ (* y!2 y!2 y!2 x!3 u!5 u!5 u!5 u!5) ?x521 (* 3 (* y!2 y!2 y!2 x!3 v!4 v!4 u!5 u!5)) (* 3 (* y!2 y!2 y!2 x!3 v!4 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 y!2 v!4 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 y!2 v!4 v!4 u!5 u!5)) (* (- 1) (* y!2 y!2 y!2 y!2 v!4 v!4 v!4 u!5)) (* (- 1) (* y!2 y!2 x!3 u!5 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 x!3 v!4 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 x!3 v!4 v!4 u!5 u!5 u!5 u!5)) ?x806 (* y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5 u!5) (* 3 (* y!2 y!2 y!2 v!4 v!4 u!5 u!5 u!5 u!5)) (* y!2 y!2 y!2 v!4 v!4 v!4 u!5 u!5 u!5) (* 3 (* y!2 y!2 y!2 v!4 u!5 u!5 u!5 u!5 u!5)))))
 (let ((?x833 (* ?x825 ?x678)))
 (let (($x767 (= ?x833 0)))
 (let (($x786 (or (not $x767) $x888)))
 (let (($x910 (and $x773 $x786)))
 (let ((?x305 (+ (* u!5 x!3) (* v!4 y!2) ?x555 ?x103)))
 (let ((?x741 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2))))
 (let ((?x525 (* u!5 v!4 v!4 v!4 x!3 y!2 y!2 y!2)))
 (let ((?x780 (+ ?x525 ?x741 (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3)) (* (- 1) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3)) (* v!4 v!4 v!4 v!4 x!3 y!2 y!2 y!2) (* 3 (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2)) (* 3 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2)) (* (- 3) (* u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2)) (* (- 3) (* v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2)) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3)) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* (- 3) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* 2 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2)) (* 6 (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* 6 (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* 2 (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)))))
 (let ((?x395 (+ (* u!5 u!5 u!5 u!5 x!3 y!2 y!2 y!2) (* 3 (* u!5 u!5 u!5 v!4 x!3 y!2 y!2 y!2)) (* 3 (* u!5 u!5 v!4 v!4 x!3 y!2 y!2 y!2)) ?x525 (* (- 1) (* u!5 u!5 u!5 u!5 y!2 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 y!2 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 v!4 v!4 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 v!4 v!4 v!4 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) ?x741 (* u!5 u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2) (* 3 (* u!5 u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* 3 (* u!5 u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* u!5 u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2))))
 (let (($x889 (and (= ?x305 0) (or (not (= (* ?x395 ?x305) 0)) (not (= (* ?x780 ?x305) 0))))))
 (let (($x192 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x103 (* (- 1) k!10)))
 (let ((?x555 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x160 (+ ?x33 ?x34 ?x555 ?x103)))
 (let ((?x344 (* (- 1) (* u u u v v v x y y))))
 (let ((?x152 (* u v v v x y y y)))
 (let ((?x746 (+ ?x152 ?x344 (* (- 1) (* v v v v x x x x)) (* (- 1) (* u v v v x x x x)) (* v v v v x y y y) (* 3 (* u v v v x x x y)) (* 3 (* v v v v x x x y)) (* (- 3) (* u v v v x x y y)) (* (- 3) (* v v v v x x y y)) (* (- 3) (* u u v v v v x y y)) (* (- 3) (* u v v v v v x y y)) (* (- 1) (* v v v v v v x y y)) (* (- 1) (* u u u v v v x x x)) (* (- 3) (* u u v v v v x x x)) (* (- 3) (* u v v v v v x x x)) (* (- 1) (* v v v v v v x x x)) (* 2 (* u u u v v v x x y)) (* 6 (* u u v v v v x x y)) (* 6 (* u v v v v v x x y)) (* 2 (* v v v v v v x x y)))))
 (let ((?x362 (+ (* u u u u x y y y) (* 3 (* u u u v x y y y)) (* 3 (* u u v v x y y y)) ?x152 (* (- 1) (* u u u u y y y y)) (* (- 3) (* u u u v y y y y)) (* (- 3) (* u u v v y y y y)) (* (- 1) (* u v v v y y y y)) (* (- 1) (* u u u u u u x y y)) (* (- 3) (* u u u u u v x y y)) (* (- 3) (* u u u u v v x y y)) ?x344 (* u u u u u u y y y) (* 3 (* u u u u u v y y y)) (* 3 (* u u u u v v y y y)) (* u u u v v v y y y))))
 (and (= ?x160 0) (or (not (= (* ?x362 ?x160) 0)) (not (= (* ?x746 ?x160) 0))))))))))))) :qid k!29))
 ))
 (let (($x177 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x103 (* (- 1) k!10)))
 (let ((?x205 (+ y (* (- 1) x))))
 (let ((?x147 (* ?x205 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x555 (* (- 1) k!00)))
 (let ((?x208 (+ (* ?x54 ?x205 ?x205 ?x205 x v v v) (* (- 1) (* ?x54 ?x54 ?x54 ?x205 ?x205 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x353 (+ x (* (- 1) y))))
 (let ((?x92 (* ?x353 u)))
 (let ((?x191 (+ (* ?x44 ?x44 ?x44 ?x353 y y y u) (* (- 1) (* ?x44 ?x44 ?x44 ?x353 y y u u u)))))
 (let (($x183 (or (not (= (* ?x191 (+ ?x555 ?x92 ?x45 ?x103)) 0)) (not (= (* ?x208 (+ ?x555 ?x55 ?x147 ?x103)) 0)))))
 (let ((?x89 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x89 0) $x183))))))))))))))) :qid k!29))
 ))
 (let ((?x193 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x103 (* (- 1) k!10)))
 (let ((?x555 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x160 (+ ?x33 ?x34 ?x555 ?x103)))
 (let ((?x344 (* (- 1) (* u u u v v v x y y))))
 (let ((?x152 (* u v v v x y y y)))
 (let ((?x746 (+ ?x152 ?x344 (* (- 1) (* v v v v x x x x)) (* (- 1) (* u v v v x x x x)) (* v v v v x y y y) (* 3 (* u v v v x x x y)) (* 3 (* v v v v x x x y)) (* (- 3) (* u v v v x x y y)) (* (- 3) (* v v v v x x y y)) (* (- 3) (* u u v v v v x y y)) (* (- 3) (* u v v v v v x y y)) (* (- 1) (* v v v v v v x y y)) (* (- 1) (* u u u v v v x x x)) (* (- 3) (* u u v v v v x x x)) (* (- 3) (* u v v v v v x x x)) (* (- 1) (* v v v v v v x x x)) (* 2 (* u u u v v v x x y)) (* 6 (* u u v v v v x x y)) (* 6 (* u v v v v v x x y)) (* 2 (* v v v v v v x x y)))))
 (let ((?x362 (+ (* u u u u x y y y) (* 3 (* u u u v x y y y)) (* 3 (* u u v v x y y y)) ?x152 (* (- 1) (* u u u u y y y y)) (* (- 3) (* u u u v y y y y)) (* (- 3) (* u u v v y y y y)) (* (- 1) (* u v v v y y y y)) (* (- 1) (* u u u u u u x y y)) (* (- 3) (* u u u u u v x y y)) (* (- 3) (* u u u u v v x y y)) ?x344 (* u u u u u u y y y) (* 3 (* u u u u u v y y y)) (* 3 (* u u u u v v y y y)) (* u u u v v v y y y))))
 (let (($x1056 (and (= ?x160 0) (or (not (= (* ?x362 ?x160) 0)) (not (= (* ?x746 ?x160) 0))))))
 (let ((?x205 (+ y (* (- 1) x))))
 (let ((?x147 (* ?x205 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x208 (+ (* ?x54 ?x205 ?x205 ?x205 x v v v) (* (- 1) (* ?x54 ?x54 ?x54 ?x205 ?x205 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x353 (+ x (* (- 1) y))))
 (let ((?x92 (* ?x353 u)))
 (let ((?x191 (+ (* ?x44 ?x44 ?x44 ?x353 y y y u) (* (- 1) (* ?x44 ?x44 ?x44 ?x353 y y u u u)))))
 (let (($x183 (or (not (= (* ?x191 (+ ?x555 ?x92 ?x45 ?x103)) 0)) (not (= (* ?x208 (+ ?x555 ?x55 ?x147 ?x103)) 0)))))
 (let ((?x89 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x332 (and (= ?x89 0) $x183)))
 (rewrite (= $x332 $x1056))))))))))))))))))))))))))
 ))
 (let (($x340 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x103 (* (- 1) k!10)))
 (let ((?x205 (+ y (* (- 1) x))))
 (let ((?x147 (* ?x205 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x555 (* (- 1) k!00)))
 (let ((?x208 (+ (* ?x54 ?x205 ?x205 ?x205 x v v v) (* (- 1) (* ?x54 ?x54 ?x54 ?x205 ?x205 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x353 (+ x (* (- 1) y))))
 (let ((?x92 (* ?x353 u)))
 (let ((?x191 (+ (* ?x44 ?x44 ?x44 ?x353 y y y u) (* (- 1) (* ?x44 ?x44 ?x44 ?x353 y y u u u)))))
 (let (($x183 (or (not (= (* ?x191 (+ ?x555 ?x92 ?x45 ?x103)) 0)) (not (= (* ?x208 (+ ?x555 ?x55 ?x147 ?x103)) 0)))))
 (and (= (+ ?x555 (* x u) (* y v) ?x103) 0) $x183)))))))))))))) :qid k!29))
 ))
 (let ((?x82 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x103 (* (- 1) k!10)))
 (let ((?x205 (+ y (* (- 1) x))))
 (let ((?x147 (* ?x205 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x555 (* (- 1) k!00)))
 (let ((?x208 (+ (* ?x54 ?x205 ?x205 ?x205 x v v v) (* (- 1) (* ?x54 ?x54 ?x54 ?x205 ?x205 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x353 (+ x (* (- 1) y))))
 (let ((?x92 (* ?x353 u)))
 (let ((?x191 (+ (* ?x44 ?x44 ?x44 ?x353 y y y u) (* (- 1) (* ?x44 ?x44 ?x44 ?x353 y y u u u)))))
 (let (($x183 (or (not (= (* ?x191 (+ ?x555 ?x92 ?x45 ?x103)) 0)) (not (= (* ?x208 (+ ?x555 ?x55 ?x147 ?x103)) 0)))))
 (let ((?x89 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x332 (and (= ?x89 0) $x183)))
 (let (($x171 (and (= (+ ?x555 (* x u) (* y v) ?x103) 0) $x183)))
 (rewrite (= $x171 $x332)))))))))))))))))))
 ))
 (let (($x223 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x205 (+ y (* (- 1) x))))
 (let ((?x147 (* ?x205 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x208 (+ (* ?x54 ?x205 ?x205 ?x205 x v v v) (* (- 1) (* ?x54 ?x54 ?x54 ?x205 ?x205 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x353 (+ x (* (- 1) y))))
 (let ((?x92 (* ?x353 u)))
 (let ((?x191 (+ (* ?x44 ?x44 ?x44 ?x353 y y y u) (* (- 1) (* ?x44 ?x44 ?x44 ?x353 y y u u u)))))
 (let (($x161 (or (not (= (* ?x191 (+ ?x77 ?x92 ?x45 ?x93)) 0)) (not (= (* ?x208 (+ ?x77 ?x55 ?x147 ?x93)) 0)))))
 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x161))))))))))))))) :qid k!29))
 ))
 (let ((?x354 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x103 (* (- 1) k!10)))
 (let ((?x205 (+ y (* (- 1) x))))
 (let ((?x147 (* ?x205 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x555 (* (- 1) k!00)))
 (let ((?x208 (+ (* ?x54 ?x205 ?x205 ?x205 x v v v) (* (- 1) (* ?x54 ?x54 ?x54 ?x205 ?x205 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x353 (+ x (* (- 1) y))))
 (let ((?x92 (* ?x353 u)))
 (let ((?x191 (+ (* ?x44 ?x44 ?x44 ?x353 y y y u) (* (- 1) (* ?x44 ?x44 ?x44 ?x353 y y u u u)))))
 (let (($x183 (or (not (= (* ?x191 (+ ?x555 ?x92 ?x45 ?x103)) 0)) (not (= (* ?x208 (+ ?x555 ?x55 ?x147 ?x103)) 0)))))
 (let (($x171 (and (= (+ ?x555 (* x u) (* y v) ?x103) 0) $x183)))
 (let ((?x159 (* ?x208 (+ (* (- 1) (* u00 x00)) ?x55 ?x147 (* (- 1) (* v00 y00))))))
 (let ((?x198 (* ?x191 (+ (* (- 1) (* u00 x00)) ?x92 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x652 (* y v)))
 (let ((?x410 (* x u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let (($x154 (and (= (+ ?x77 ?x410 ?x652 ?x93) 0) (or (not (= ?x198 0)) (not (= ?x159 0))))))
 (rewrite (= $x154 $x171)))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x56 (- y x)))
 (let ((?x54 (+ u v)))
 (let ((?x62 (- (* ?x54 v v v x ?x56 ?x56 ?x56) (* ?x54 ?x54 ?x54 v v v x ?x56 ?x56))))
 (let ((?x38 (* v00 y00)))
 (let ((?x63 (* (- (+ (* (- 1) u00 x00) (* ?x54 x) (* v ?x56)) ?x38) ?x62)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x50 (- (* u ?x44 ?x44 ?x44 ?x42 y y y) (* u u u ?x44 ?x44 ?x44 ?x42 y y))))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x50)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x51 0)) (not (= ?x63 0)))))))))))))) :qid k!29))
 ))
 (let ((?x662 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x205 (+ y (* (- 1) x))))
 (let ((?x147 (* ?x205 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x208 (+ (* ?x54 ?x205 ?x205 ?x205 x v v v) (* (- 1) (* ?x54 ?x54 ?x54 ?x205 ?x205 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x353 (+ x (* (- 1) y))))
 (let ((?x92 (* ?x353 u)))
 (let ((?x191 (+ (* ?x44 ?x44 ?x44 ?x353 y y y u) (* (- 1) (* ?x44 ?x44 ?x44 ?x353 y y u u u)))))
 (let (($x161 (or (not (= (* ?x191 (+ ?x77 ?x92 ?x45 ?x93)) 0)) (not (= (* ?x208 (+ ?x77 ?x55 ?x147 ?x93)) 0)))))
 (let (($x154 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x161)))
 (let ((?x56 (- y x)))
 (let ((?x62 (- (* ?x54 v v v x ?x56 ?x56 ?x56) (* ?x54 ?x54 ?x54 v v v x ?x56 ?x56))))
 (let (($x64 (= (* (- (+ (* (- 1) u00 x00) ?x55 (* v ?x56)) ?x38) ?x62) 0)))
 (let ((?x50 (- (* u ?x44 ?x44 ?x44 (- x y) y y y) (* u u u ?x44 ?x44 ?x44 (- x y) y y))))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u (- x y)) ?x45) ?x38) ?x50)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x67 (and $x41 (or (not (= ?x51 0)) (not $x64)))))
 (rewrite (= $x67 $x154)))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x170 (mp (mp @x69 (quant-intro (proof-bind ?x662) (= $x68 $x223)) $x223) (rewrite (= $x223 $x223)) $x223)))
 (let ((@x653 (mp (mp @x170 (quant-intro (proof-bind ?x354) (= $x223 $x340)) $x340) (quant-intro (proof-bind ?x82) (= $x340 $x177)) $x177)))
 (let ((@x846 (mp~ (mp @x653 (quant-intro (proof-bind ?x193) (= $x177 $x192)) $x192) (sk (~ $x192 $x889)) $x889)))
 (let ((@x793 (mp @x846 (rewrite (= $x889 $x910)) $x910)))
 (let ((@x791 (and-elim @x793 $x773)))
 (let ((@x486 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x773) $x729)) @x791 $x729)))
 (let (($x759 (<= ?x774 0)))
 (let ((@x811 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x773) $x759)) @x791 $x759)))
 (let (($x817 (not (<= ?x886 0))))
 (let (($x392 (>= ?x886 0)))
 (let (($x855 (>= ?x833 0)))
 (let (($x853 (<= ?x833 0)))
 (let ((@x835 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x767 (not $x853) (not $x855))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x853)) @x811 @x486 false) $x853) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x855)) @x811 @x486 false) $x855) $x767)))
 (let ((@x856 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x523 $x817 (not $x392))) (unit-resolution (and-elim @x793 $x786) @x835 $x888) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x392)) @x811 @x486 false) $x392) $x817)))
 ((_ th-lemma arith farkas 1 1 1) @x856 @x811 @x486 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        31
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             352
 :arith-nonlinear-bounds    14
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 53
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.65
 :memory                    3.21
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1093241
 :num-checks                1
 :propagations              14
 :rlimit-count              4658
 :time                      0.01
 :total-time                0.01)
