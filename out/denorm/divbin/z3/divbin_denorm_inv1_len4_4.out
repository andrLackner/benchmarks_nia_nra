unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x148 (to_real x00)))
 (let ((?x147 (to_real b00)))
 (let ((?x149 (* ?x147 ?x148)))
 (let ((?x1230 (+ (* (- 1.0) (to_real (* b00 x00))) ?x149)))
 (let (($x576 (<= ?x1230 0.0)))
 (let (($x1150 (= 0.0 ?x1230)))
 (let ((@x1246 (symm (commutativity (= $x1150 (= ?x1230 0.0))) (= (= ?x1230 0.0) $x1150))))
 (let ((@x1152 (mp ((_ th-lemma arith) (= ?x1230 0.0)) @x1246 $x1150)))
 (let ((@x1302 (lemma (unit-resolution (hypothesis (not $x1150)) @x1152 false) $x1150)))
 (let ((@x230 ((_ th-lemma arith triangle-eq) (or (not $x1150) $x576))))
 (let (($x1151 (>= ?x1230 0.0)))
 (let ((@x1131 ((_ th-lemma arith triangle-eq) (or (not $x1150) $x1151))))
 (let ((?x62 (to_real r00)))
 (let ((?x138 (* (- 1.0) ?x62)))
 (let ((?x584 (to_real b!2)))
 (let ((?x583 (to_real x!0)))
 (let ((?x755 (* ?x583 ?x584)))
 (let ((?x152 (* (- 1.0) ?x149)))
 (let ((?x1259 (to_real r!1)))
 (let ((?x658 (+ ?x1259 ?x152 ?x755 ?x138)))
 (let (($x666 (>= ?x658 0.0)))
 (let ((?x1189 (+ (* (- 1.0) (to_real (* x!0 b!2))) ?x755)))
 (let (($x1225 (>= ?x1189 0.0)))
 (let (($x1295 (= 0.0 ?x1189)))
 (let ((@x1264 (symm (commutativity (= $x1295 (= ?x1189 0.0))) (= (= ?x1189 0.0) $x1295))))
 (let ((@x1266 (mp ((_ th-lemma arith) (= ?x1189 0.0)) @x1264 $x1295)))
 (let ((?x89 (* b00 x00)))
 (let ((?x581 (+ r00 ?x89 (* (- 1) r!1) (* (- 1) (* x!0 b!2)))))
 (let (($x1207 (<= ?x581 0)))
 (let (($x1211 (= 0 ?x581)))
 (let ((@x1286 (symm (commutativity (= $x1211 (= ?x581 0))) (= (= ?x581 0) $x1211))))
 (let (($x589 (= ?x581 0)))
 (let ((?x599 (* (- (/ 3.0 8.0)) (* ?x584 ?x584 ?x584 ?x1259))))
 (let ((?x880 (* (/ 7.0 8.0) (* ?x584 ?x584 ?x584 ?x1259 ?x1259))))
 (let ((?x611 (* (/ 3.0 32.0) (* ?x584 ?x584 ?x584 ?x584 ?x584))))
 (let ((?x297 (* (/ 1.0 16.0) (* ?x584 ?x584 ?x584 ?x584))))
 (let ((?x966 (* (- (/ 1.0 2.0)) (* ?x584 ?x584 ?x1259 ?x1259 ?x1259))))
 (let ((?x419 (* (- (/ 1.0 2.0)) (* ?x584 ?x584 ?x584 ?x584 ?x1259))))
 (let ((?x1074 (* (/ 3.0 4.0) (* ?x584 ?x584 ?x1259 ?x1259))))
 (let ((?x1356 (* (- (/ 1.0 2.0)) (* ?x584 ?x1259 ?x1259 ?x1259))))
 (let ((?x758 (+ ?x1356 ?x1074 ?x419 (* 3.0 (* ?x583 ?x584 ?x584 ?x1259 ?x1259)) (* (- 1.0) (* ?x583 ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) ?x966 ?x297 ?x611 (* 3.0 (* ?x583 ?x583 ?x584 ?x584 ?x1259 ?x1259)) (* (/ 1.0 8.0) (* ?x583 ?x583 ?x584 ?x584 ?x584 ?x584 ?x584)) (* (- (/ 3.0 2.0)) (* ?x583 ?x584 ?x584 ?x584 ?x1259)) ?x880 (* (- (/ 11.0 8.0)) (* ?x583 ?x584 ?x584 ?x584 ?x584 ?x1259)) (* (/ 1.0 4.0) (* ?x583 ?x584 ?x584 ?x584 ?x584 ?x584)) (* (/ 3.0 2.0) (* ?x583 ?x583 ?x584 ?x584 ?x584 ?x1259 ?x1259)) (* (- 2.0) (* ?x583 ?x584 ?x1259 ?x1259 ?x1259)) (* (- (/ 3.0 4.0)) (* ?x583 ?x583 ?x584 ?x584 ?x584 ?x584 ?x1259)) (* (- 2.0) (* ?x583 ?x583 ?x584 ?x1259 ?x1259 ?x1259)) (* (/ 1.0 4.0) (* ?x583 ?x584 ?x584 ?x584 ?x584)) (* (/ 1.0 4.0) (* ?x583 ?x583 ?x584 ?x584 ?x584 ?x584)) (* (- (/ 3.0 2.0)) (* ?x583 ?x583 ?x584 ?x584 ?x584 ?x1259)) (* (/ 5.0 2.0) (* ?x583 ?x584 ?x584 ?x584 ?x1259 ?x1259)) (* (- (/ 3.0 2.0)) (* ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) ?x599)))
 (let (($x742 (= (* ?x758 (+ ?x138 ?x152 ?x755 ?x1259)) 0.0)))
 (let (($x1297 (not $x742)))
 (let ((?x1247 (+ (* (/ 1.0 2.0) (* ?x147 ?x148 ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) (* (- (/ 1.0 2.0)) (* ?x583 ?x583 ?x584 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) (* (- 2.0) (* ?x583 ?x583 ?x584 ?x1259 ?x1259 ?x1259 ?x1259)) (* (/ 1.0 2.0) (* ?x62 ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) (* (- 1.0) (* ?x583 ?x583 ?x583 ?x584 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) (* (- (/ 1.0 4.0)) (* ?x147 ?x148 ?x583 ?x584 ?x584 ?x584 ?x1259 ?x1259)) (* 2.0 (* ?x62 ?x583 ?x583 ?x584 ?x1259 ?x1259 ?x1259)) (* (/ 1.0 4.0) (* ?x583 ?x584 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) (* (- (/ 1.0 4.0)) (* ?x62 ?x583 ?x584 ?x584 ?x584 ?x1259 ?x1259)) (* (/ 1.0 4.0) (* ?x583 ?x583 ?x584 ?x584 ?x584 ?x584 ?x1259 ?x1259)) (* (- (/ 1.0 2.0)) (* ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259 ?x1259)) (* 2.0 (* ?x147 ?x148 ?x583 ?x583 ?x584 ?x1259 ?x1259 ?x1259)) (* (- 2.0) (* ?x583 ?x583 ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259)) (* (- 1.0) (* ?x583 ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259 ?x1259)) (* ?x62 ?x583 ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259) (* ?x147 ?x148 ?x583 ?x583 ?x584 ?x584 ?x1259 ?x1259 ?x1259))))
 (let (($x1253 (= ?x1247 0.0)))
 (let (($x1218 (not $x1253)))
 (let (($x1287 (or $x1218 $x1297)))
 (let (($x1192 (and $x589 $x1287)))
 (let ((?x1141 (+ (* (/ 5.0 2.0) (* ?x584 ?x584 ?x584 ?x583 ?x1259 ?x1259)) (* (- (/ 3.0 2.0)) (* ?x584 ?x584 ?x583 ?x1259 ?x1259 ?x1259)) (* (- 2.0) (* ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259)) (* (- 1.0) (* ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259)) (* (- (/ 11.0 8.0)) (* ?x584 ?x584 ?x584 ?x584 ?x583 ?x1259)) ?x880 (* (/ 1.0 4.0) (* ?x584 ?x584 ?x584 ?x584 ?x584 ?x583)) ?x419 ?x611 ?x966 ?x297 ?x599 ?x1074 ?x1356 (* (/ 1.0 4.0) (* ?x584 ?x584 ?x584 ?x584 ?x583)) (* (- (/ 3.0 2.0)) (* ?x584 ?x584 ?x584 ?x583 ?x1259)) (* 3.0 (* ?x584 ?x584 ?x583 ?x1259 ?x1259)) (* (- 2.0) (* ?x584 ?x583 ?x1259 ?x1259 ?x1259)) (* (/ 1.0 4.0) (* ?x584 ?x584 ?x584 ?x584 ?x583 ?x583)) (* (- (/ 3.0 2.0)) (* ?x584 ?x584 ?x584 ?x583 ?x583 ?x1259)) (* 3.0 (* ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259)) (* (/ 1.0 8.0) (* ?x584 ?x584 ?x584 ?x584 ?x584 ?x583 ?x583)) (* (- (/ 3.0 4.0)) (* ?x584 ?x584 ?x584 ?x584 ?x583 ?x583 ?x1259)) (* (/ 3.0 2.0) (* ?x584 ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259)))))
 (let ((?x492 (+ (* (/ 1.0 4.0) (* ?x584 ?x584 ?x584 ?x583 ?x1259 ?x1259 ?x1259)) (* (- (/ 1.0 4.0)) (* ?x584 ?x584 ?x584 ?x583 ?x1259 ?x1259 ?x62)) (* (- (/ 1.0 4.0)) (* ?x584 ?x584 ?x584 ?x583 ?x1259 ?x1259 ?x147 ?x148)) (* (/ 1.0 4.0) (* ?x584 ?x584 ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259)) (* (- (/ 1.0 2.0)) (* ?x584 ?x584 ?x583 ?x1259 ?x1259 ?x1259 ?x1259)) (* (/ 1.0 2.0) (* ?x584 ?x584 ?x583 ?x1259 ?x1259 ?x1259 ?x62)) (* (/ 1.0 2.0) (* ?x584 ?x584 ?x583 ?x1259 ?x1259 ?x1259 ?x147 ?x148)) (* (- (/ 1.0 2.0)) (* ?x584 ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259)) (* (- 2.0) (* ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259 ?x1259)) (* 2.0 (* ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259 ?x62)) (* 2.0 (* ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259 ?x147 ?x148)) (* (- 2.0) (* ?x584 ?x584 ?x583 ?x583 ?x583 ?x1259 ?x1259 ?x1259)) (* (- 1.0) (* ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259 ?x1259)) (* ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259 ?x62) (* ?x584 ?x584 ?x583 ?x583 ?x1259 ?x1259 ?x1259 ?x147 ?x148) (* (- 1.0) (* ?x584 ?x584 ?x584 ?x583 ?x583 ?x583 ?x1259 ?x1259 ?x1259)))))
 (let (($x641 (or (not (= ?x492 0.0)) (not (= (* ?x1141 (+ ?x1259 ?x138 ?x152 (* ?x584 ?x583))) 0.0)))))
 (let (($x1176 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x89)) 0) $x641)))
 (let (($x389 (exists ((b Int) (r Int) (x Int) )(! (let ((?x148 (to_real x00)))
 (let ((?x147 (to_real b00)))
 (let ((?x149 (* ?x147 ?x148)))
 (let ((?x152 (* (- 1.0) ?x149)))
 (let ((?x62 (to_real r00)))
 (let ((?x138 (* (- 1.0) ?x62)))
 (let ((?x47 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x1412 (+ (* (/ 5.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 11.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 7.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47)) (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)))))
 (let ((?x472 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x62)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x147 ?x148)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x62)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x147 ?x148)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x62)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x147 ?x148)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x62) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x147 ?x148) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)))))
 (let (($x117 (not (= ?x472 0.0))))
 (let (($x544 (or $x117 (not (= (* ?x1412 (+ ?x47 ?x138 ?x152 (* ?x40 ?x43))) 0.0)))))
 (let (($x125 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x125 $x544))))))))))))))) :qid k!28))
 ))
 (let (($x650 (exists ((b Int) (r Int) (x Int) )(! (let ((?x62 (to_real r00)))
 (let ((?x138 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x148 (to_real x00)))
 (let ((?x147 (to_real b00)))
 (let ((?x149 (* ?x147 ?x148)))
 (let ((?x152 (* (- 1.0) ?x149)))
 (let ((?x831 (+ ?x152 ?x47 ?x174 ?x138 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x751 (+ ?x47 ?x174)))
 (let ((?x43 (to_real x)))
 (let ((?x267 (* 2.0 ?x43)))
 (let ((?x793 (+ 1.0 ?x267)))
 (let ((?x245 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x793 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 2.0)) (* ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)))))
 (let ((?x1352 (+ (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x276 (or (not (= (* (+ ?x152 ?x47 ?x138 (* ?x43 ?x40)) ?x1352) 0.0)) (not (= (* ?x245 ?x831) 0.0)))))
 (let (($x527 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x527 $x276))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1068 (lambda ((b Int) (r Int) (x Int) )(let ((?x148 (to_real x00)))
 (let ((?x147 (to_real b00)))
 (let ((?x149 (* ?x147 ?x148)))
 (let ((?x152 (* (- 1.0) ?x149)))
 (let ((?x62 (to_real r00)))
 (let ((?x138 (* (- 1.0) ?x62)))
 (let ((?x47 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x1412 (+ (* (/ 5.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 11.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 7.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47)) (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)))))
 (let ((?x472 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x62)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x147 ?x148)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x62)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x147 ?x148)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x62)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x147 ?x148)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x62) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x147 ?x148) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)))))
 (let (($x117 (not (= ?x472 0.0))))
 (let (($x544 (or $x117 (not (= (* ?x1412 (+ ?x47 ?x138 ?x152 (* ?x40 ?x43))) 0.0)))))
 (let (($x125 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x1390 (and $x125 $x544)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x831 (+ ?x152 ?x47 ?x174 ?x138 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x751 (+ ?x47 ?x174)))
 (let ((?x267 (* 2.0 ?x43)))
 (let ((?x793 (+ 1.0 ?x267)))
 (let ((?x245 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x793 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 2.0)) (* ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)))))
 (let ((?x1352 (+ (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x276 (or (not (= (* (+ ?x152 ?x47 ?x138 (* ?x43 ?x40)) ?x1352) 0.0)) (not (= (* ?x245 ?x831) 0.0)))))
 (let (($x527 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x794 (and $x527 $x276)))
 (rewrite (= $x794 $x1390))))))))))))))))))))))))))))
 ))
 (let (($x412 (exists ((b Int) (r Int) (x Int) )(! (let ((?x62 (to_real r00)))
 (let ((?x138 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x148 (to_real x00)))
 (let ((?x147 (to_real b00)))
 (let ((?x149 (* ?x147 ?x148)))
 (let ((?x152 (* (- 1.0) ?x149)))
 (let ((?x831 (+ ?x152 ?x47 ?x174 ?x138 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x751 (+ ?x47 ?x174)))
 (let ((?x43 (to_real x)))
 (let ((?x267 (* 2.0 ?x43)))
 (let ((?x793 (+ 1.0 ?x267)))
 (let ((?x245 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x793 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 2.0)) (* ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)))))
 (let ((?x1352 (+ (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x276 (or (not (= (* (+ ?x152 ?x47 ?x138 (* ?x43 ?x40)) ?x1352) 0.0)) (not (= (* ?x245 ?x831) 0.0)))))
 (let (($x788 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x788 $x276))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1353 (lambda ((b Int) (r Int) (x Int) )(let ((?x62 (to_real r00)))
 (let ((?x138 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x148 (to_real x00)))
 (let ((?x147 (to_real b00)))
 (let ((?x149 (* ?x147 ?x148)))
 (let ((?x152 (* (- 1.0) ?x149)))
 (let ((?x831 (+ ?x152 ?x47 ?x174 ?x138 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x751 (+ ?x47 ?x174)))
 (let ((?x43 (to_real x)))
 (let ((?x267 (* 2.0 ?x43)))
 (let ((?x793 (+ 1.0 ?x267)))
 (let ((?x245 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x793 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 2.0)) (* ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)))))
 (let ((?x1352 (+ (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x276 (or (not (= (* (+ ?x152 ?x47 ?x138 (* ?x43 ?x40)) ?x1352) 0.0)) (not (= (* ?x245 ?x831) 0.0)))))
 (let (($x527 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x794 (and $x527 $x276)))
 (let (($x788 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x1290 (and $x788 $x276)))
 (rewrite (= $x1290 $x794))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((b Int) (r Int) (x Int) )(! (let ((?x56 (to_real 0)))
 (let ((?x66 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x47 (to_real r)))
 (let ((?x59 (- ?x47 ?x42)))
 (let ((?x73 (- (* ?x42 ?x42 ?x42 ?x59 ?x59 ?x66) (* ?x42 ?x42 ?x59 ?x59 ?x59 ?x66))))
 (let ((?x75 (- (- ?x73 (* ?x42 ?x59 ?x59 ?x59 ?x66 ?x66)) (* ?x42 ?x42 ?x59 ?x59 ?x59 ?x66 ?x66))))
 (let ((?x68 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x59) (to_real r00)) (* ?x42 ?x66))))
 (let ((?x52 (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x41 (to_real x)) (* ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 (to_real x)))))
 (let ((?x53 (- ?x52 (* ?x42 ?x47 ?x47 ?x47 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x54 (- ?x53 (* ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x54) ?x56)) (not (= (* ?x68 ?x75) ?x56))))))))))))))))))) :qid k!28))
 ))
 (let ((?x438 (lambda ((b Int) (r Int) (x Int) )(let ((?x62 (to_real r00)))
 (let ((?x138 (* (- 1.0) ?x62)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x148 (to_real x00)))
 (let ((?x147 (to_real b00)))
 (let ((?x149 (* ?x147 ?x148)))
 (let ((?x152 (* (- 1.0) ?x149)))
 (let ((?x831 (+ ?x152 ?x47 ?x174 ?x138 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x751 (+ ?x47 ?x174)))
 (let ((?x43 (to_real x)))
 (let ((?x267 (* 2.0 ?x43)))
 (let ((?x793 (+ 1.0 ?x267)))
 (let ((?x245 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x793 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 2.0)) (* ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x793 ?x793 ?x751 ?x751 ?x751)))))
 (let ((?x1352 (+ (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x276 (or (not (= (* (+ ?x152 ?x47 ?x138 (* ?x43 ?x40)) ?x1352) 0.0)) (not (= (* ?x245 ?x831) 0.0)))))
 (let (($x788 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x1290 (and $x788 $x276)))
 (let ((?x56 (to_real 0)))
 (let ((?x66 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x59 (- ?x47 ?x42)))
 (let ((?x73 (- (* ?x42 ?x42 ?x42 ?x59 ?x59 ?x66) (* ?x42 ?x42 ?x59 ?x59 ?x59 ?x66))))
 (let ((?x75 (- (- ?x73 (* ?x42 ?x59 ?x59 ?x59 ?x66 ?x66)) (* ?x42 ?x42 ?x59 ?x59 ?x59 ?x66 ?x66))))
 (let ((?x68 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x59) ?x62) (* ?x42 ?x66))))
 (let ((?x52 (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x41 ?x43) (* ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 ?x43))))
 (let ((?x54 (- (- ?x52 (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43)) (* ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x80 (and $x38 (or (not (= (* ?x46 ?x54) ?x56)) (not (= (* ?x68 ?x75) ?x56))))))
 (rewrite (= $x80 $x1290)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x322 (mp (mp @x82 (quant-intro (proof-bind ?x438) (= $x81 $x412)) $x412) (rewrite (= $x412 $x412)) $x412)))
 (let ((@x1332 (mp (mp @x322 (quant-intro (proof-bind ?x1353) (= $x412 $x650)) $x650) (quant-intro (proof-bind ?x1068) (= $x650 $x389)) $x389)))
 (let ((@x678 (mp (mp~ @x1332 (sk (~ $x389 $x1176)) $x1176) (rewrite (= $x1176 $x1192)) $x1192)))
 (let ((@x1188 (mp (and-elim @x678 $x589) @x1286 $x1211)))
 (let ((@x1308 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1211) $x1207)) @x1188 $x1207)))
 (let ((@x1305 ((_ th-lemma arith) (hypothesis (not $x666)) @x1308 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1295) $x1225)) @x1266 $x1225) (unit-resolution @x230 @x1152 $x576) false)))
 (let ((@x1161 (lemma @x1305 $x666)))
 (let (($x1175 (<= ?x658 0.0)))
 (let (($x1147 (<= ?x1189 0.0)))
 (let (($x1208 (>= ?x581 0)))
 (let ((@x1138 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1211) $x1208)) @x1188 $x1208)))
 (let ((@x1320 ((_ th-lemma arith) @x1138 (hypothesis (not $x1175)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1295) $x1147)) @x1266 $x1147) (unit-resolution @x1131 @x1152 $x1151) false)))
 (let ((@x1319 (lemma @x1320 $x1175)))
 (let (($x1210 (<= ?x1247 0.0)))
 (let (($x638 (not $x1210)))
 (let (($x1212 (>= ?x1247 0.0)))
 (let ((@x594 (unit-resolution ((_ th-lemma arith) (or $x1212 (not $x1208) (not $x1207))) @x1308 @x1138 (hypothesis (not $x1212)) false)))
 (let (($x1177 (= 0.0 ?x1247)))
 (let (($x1249 (not $x1177)))
 (let ((@x947 (monotonicity (symm (commutativity (= $x1177 $x1253)) (= $x1253 $x1177)) (= $x1218 $x1249))))
 (let (($x1322 (= ?x658 0.0)))
 (let (($x1323 (= 0.0 ?x658)))
 (let ((@x146 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1323 (not $x1175) (not $x666))) @x1319 @x1161 $x1323)))
 (let (($x428 (not $x1322)))
 (let ((@x356 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x428 $x742)) (hypothesis $x1297) $x428) (symm @x146 $x1322) false)))
 (let ((@x959 (mp (unit-resolution (and-elim @x678 $x1287) (lemma @x356 $x742) $x1218) @x947 $x1249)))
 (let ((@x878 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1177 $x638 (not $x1212))) @x959 (or $x638 (not $x1212)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x576) (not $x1151) $x1210 (not $x1175) (not $x666))) (unit-resolution @x878 (lemma @x594 $x1212) $x638) @x1319 @x1161 (unit-resolution @x1131 @x1302 $x1151) (unit-resolution @x230 @x1302 $x576) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      44
 :arith-eq-adapter               28
 :arith-bound-propagations-cheap 16
 :arith-bound-propagations-lp    2
 :arith-conflicts                44
 :arith-diseq                    31
 :arith-fixed-eqs                1
 :arith-gcd-calls                3
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    34
 :arith-make-feasible            30
 :arith-max-columns              78
 :arith-max-rows                 15
 :arith-nla-explanations         76
 :arith-nla-lemmas               41
 :arith-patches                  3
 :arith-patches-success          3
 :arith-propagations             16
 :arith-upper                    30
 :conflicts                      9
 :decisions                      44
 :del-clause                     105
 :final-checks                   28
 :max-memory                     6.09
 :memory                         3.25
 :mk-bool-var                    141
 :mk-clause                      130
 :num-allocs                     7052601
 :num-checks                     1
 :propagations                   59
 :rlimit-count                   6641
 :time                           0.04
 :total-time                     0.05)
