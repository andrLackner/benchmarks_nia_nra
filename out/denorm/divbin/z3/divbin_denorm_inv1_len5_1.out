unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x66 (to_real r00)))
 (let ((?x154 (to_real x00)))
 (let ((?x153 (to_real b00)))
 (let ((?x155 (* ?x153 ?x154)))
 (let ((?x1257 (+ ?x155 (* (- 1.0) (* (to_real x!0) (to_real b!2))) (* (- 1.0) (to_real r!1)) ?x66)))
 (let (($x814 (>= ?x1257 0.0)))
 (let ((?x95 (* b00 x00)))
 (let ((?x1063 (to_real ?x95)))
 (let ((?x158 (* (- 1.0) ?x155)))
 (let ((?x645 (+ ?x158 ?x1063)))
 (let (($x665 (<= ?x645 0.0)))
 (let (($x658 (= 0.0 ?x645)))
 (let ((@x826 (symm (commutativity (= $x658 (= ?x645 0.0))) (= (= ?x645 0.0) $x658))))
 (let ((@x842 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x658) $x665)) (mp ((_ th-lemma arith) (= ?x645 0.0)) @x826 $x658) $x665)))
 (let ((?x397 (+ r00 ?x95 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x904 (>= ?x397 0)))
 (let (($x1131 (= 0 ?x397)))
 (let ((@x821 (symm (commutativity (= $x1131 (= ?x397 0))) (= (= ?x397 0) $x1131))))
 (let (($x950 (= ?x397 0)))
 (let ((?x632 (to_real b!2)))
 (let ((?x631 (to_real x!0)))
 (let ((?x1265 (* ?x631 ?x632 ?x632 ?x632 ?x632)))
 (let ((?x395 (* (- (/ 1.0 4.0)) ?x1265)))
 (let ((?x1217 (to_real r!1)))
 (let ((?x1264 (* ?x631 ?x632 ?x632 ?x632 ?x1217)))
 (let ((?x1246 (* ?x631 ?x631 ?x632 ?x632 ?x1217 ?x1217)))
 (let ((?x203 (* (- 1.0) ?x1246)))
 (let ((?x1240 (* ?x631 ?x631 ?x631 ?x632 ?x1217 ?x1217)))
 (let ((?x731 (* (- 4.0) ?x1240)))
 (let ((?x1214 (* ?x631 ?x631 ?x632 ?x632 ?x1217)))
 (let ((?x1261 (* 3.0 ?x1214)))
 (let ((?x1161 (* ?x632 ?x632 ?x1217)))
 (let ((?x1171 (* (- (/ 1.0 2.0)) ?x1161)))
 (let ((?x1123 (* ?x631 ?x631 ?x632 ?x632 ?x632)))
 (let ((?x1227 (* (- (/ 1.0 2.0)) ?x1123)))
 (let ((?x1121 (* ?x631 ?x631 ?x631 ?x632 ?x632 ?x1217)))
 (let ((?x1249 (* 2.0 ?x1121)))
 (let ((?x1100 (* ?x631 ?x632 ?x632 ?x632)))
 (let ((?x1248 (* (- (/ 1.0 2.0)) ?x1100)))
 (let ((?x754 (* ?x632 ?x1217 ?x1217)))
 (let ((?x637 (* ?x1217 ?x1217 ?x1217)))
 (let ((?x638 (* (- 1.0) ?x637)))
 (let ((?x593 (* ?x631 ?x631 ?x632 ?x1217 ?x1217)))
 (let ((?x591 (* (- 6.0) ?x593)))
 (let ((?x424 (* ?x631 ?x632 ?x632 ?x1217 ?x1217)))
 (let ((?x1139 (* (- 1.0) ?x424)))
 (let ((?x422 (* ?x631 ?x631 ?x632 ?x632 ?x632 ?x1217)))
 (let ((?x403 (* ?x632 ?x632 ?x1217 ?x1217)))
 (let ((?x410 (* (- (/ 1.0 4.0)) ?x403)))
 (let ((?x401 (* ?x632 ?x632 ?x632 ?x1217)))
 (let ((?x159 (* (/ 1.0 4.0) ?x401)))
 (let ((?x368 (* ?x631 ?x631 ?x632 ?x632 ?x632 ?x632)))
 (let ((?x1153 (* (- (/ 1.0 4.0)) ?x368)))
 (let ((?x291 (* ?x632 ?x632 ?x632 ?x632)))
 (let ((?x146 (* (- (/ 1.0 16.0)) ?x291)))
 (let ((?x290 (* ?x631 ?x632 ?x1217 ?x1217)))
 (let ((?x1268 (* (- 3.0) ?x290)))
 (let ((?x228 (* ?x631 ?x632 ?x632 ?x1217)))
 (let ((?x1311 (* (/ 3.0 2.0) ?x228)))
 (let ((?x908 (+ ?x1311 ?x1268 ?x146 ?x1153 ?x159 ?x410 ?x422 ?x1139 ?x591 ?x638 ?x754 ?x1248 ?x1249 ?x1227 ?x1171 ?x1261 ?x731 ?x203 ?x1264 ?x395)))
 (let ((?x913 (* (+ (* (- 1.0) ?x66) ?x158 (* ?x631 ?x632) ?x1217) ?x908)))
 (let (($x597 (= ?x913 0.0)))
 (let (($x996 (not $x597)))
 (let ((?x1001 (+ (* 2.0 (* ?x66 ?x631 ?x631 ?x631 ?x632 ?x632 ?x1217)) (* 2.0 (* ?x153 ?x154 ?x631 ?x631 ?x631 ?x632 ?x632 ?x1217)) (* (- (/ 1.0 2.0)) ?x422) (* (- 2.0) (* ?x631 ?x631 ?x631 ?x631 ?x632 ?x632 ?x632 ?x1217)) (* ?x153 ?x154 ?x631 ?x631 ?x632 ?x632 ?x1217 ?x1217) (* (- 1.0) (* ?x631 ?x631 ?x631 ?x632 ?x632 ?x632 ?x1217 ?x1217)) (* ?x66 ?x631 ?x631 ?x632 ?x632 ?x1217 ?x1217) (* (- 4.0) (* ?x631 ?x631 ?x631 ?x631 ?x632 ?x632 ?x1217 ?x1217)) (* (- 1.0) (* ?x631 ?x632 ?x1217 ?x1217 ?x1217)) (* (- 1.0) (* ?x1217 ?x1217 ?x1217 ?x1217)) (* (/ 1.0 2.0) (* ?x153 ?x154 ?x631 ?x631 ?x632 ?x632 ?x632)) (* (- (/ 1.0 2.0)) (* ?x631 ?x631 ?x631 ?x632 ?x632 ?x632 ?x632)) (* ?x66 ?x1217 ?x1217 ?x1217) (* (- 4.0) (* ?x631 ?x631 ?x631 ?x632 ?x1217 ?x1217 ?x1217)) (* 4.0 (* ?x66 ?x631 ?x631 ?x631 ?x632 ?x1217 ?x1217)) (* ?x153 ?x154 ?x1217 ?x1217 ?x1217) (* (/ 1.0 2.0) (* ?x66 ?x631 ?x631 ?x632 ?x632 ?x632)) (* (- 2.0) (* ?x631 ?x631 ?x631 ?x632 ?x632 ?x1217 ?x1217)) (* 4.0 (* ?x153 ?x154 ?x631 ?x631 ?x631 ?x632 ?x1217 ?x1217)) (* (- 1.0) (* ?x631 ?x631 ?x632 ?x632 ?x1217 ?x1217 ?x1217)))))
 (let (($x1025 (= ?x1001 0.0)))
 (let (($x1210 (or (not $x1025) $x996)))
 (let (($x653 (and $x950 $x1210)))
 (let ((?x980 (* ?x632 ?x632 ?x632 ?x631 ?x631 ?x1217)))
 (let ((?x331 (+ (* 2.0 (* ?x632 ?x632 ?x631 ?x631 ?x631 ?x1217)) (* (- (/ 1.0 2.0)) (* ?x632 ?x632 ?x632 ?x631 ?x631)) ?x638 (* (- 4.0) (* ?x632 ?x631 ?x631 ?x631 ?x1217 ?x1217)) (* (- 1.0) (* ?x632 ?x632 ?x631 ?x631 ?x1217 ?x1217)) ?x980 (* (/ 3.0 2.0) (* ?x632 ?x632 ?x631 ?x1217)) ?x1171 (* (- (/ 1.0 2.0)) (* ?x632 ?x632 ?x632 ?x631)) (* 3.0 (* ?x632 ?x632 ?x631 ?x631 ?x1217)) ?x754 (* (- 3.0) (* ?x632 ?x631 ?x1217 ?x1217)) (* (- 6.0) (* ?x632 ?x631 ?x631 ?x1217 ?x1217)) ?x146 ?x159 ?x410 (* (- (/ 1.0 4.0)) (* ?x632 ?x632 ?x632 ?x632 ?x631)) (* ?x632 ?x632 ?x632 ?x631 ?x1217) (* (- 1.0) (* ?x632 ?x632 ?x631 ?x1217 ?x1217)) (* (- (/ 1.0 4.0)) (* ?x632 ?x632 ?x632 ?x632 ?x631 ?x631)))))
 (let (($x801 (not (= (* (+ ?x1217 (* (- 1.0) ?x66) ?x158 (* ?x632 ?x631)) ?x331) 0.0))))
 (let ((?x734 (* ?x1217 ?x1217 ?x1217 ?x1217)))
 (let ((?x802 (+ (* 2.0 (* ?x632 ?x632 ?x631 ?x631 ?x631 ?x1217 ?x1217)) (* (- 2.0) (* ?x632 ?x632 ?x631 ?x631 ?x631 ?x1217 ?x66)) (* (- 2.0) (* ?x632 ?x632 ?x631 ?x631 ?x631 ?x1217 ?x153 ?x154)) (* 2.0 (* ?x632 ?x632 ?x632 ?x631 ?x631 ?x631 ?x631 ?x1217)) (* (/ 1.0 2.0) ?x980) (* (- (/ 1.0 2.0)) (* ?x632 ?x632 ?x632 ?x631 ?x631 ?x66)) (* (- (/ 1.0 2.0)) (* ?x632 ?x632 ?x632 ?x631 ?x631 ?x153 ?x154)) (* (/ 1.0 2.0) (* ?x632 ?x632 ?x632 ?x632 ?x631 ?x631 ?x631)) ?x734 (* (- 1.0) (* ?x1217 ?x1217 ?x1217 ?x66)) (* (- 1.0) (* ?x1217 ?x1217 ?x1217 ?x153 ?x154)) (* ?x632 ?x631 ?x1217 ?x1217 ?x1217) (* 4.0 (* ?x632 ?x631 ?x631 ?x631 ?x1217 ?x1217 ?x1217)) (* (- 4.0) (* ?x632 ?x631 ?x631 ?x631 ?x1217 ?x1217 ?x66)) (* (- 4.0) (* ?x632 ?x631 ?x631 ?x631 ?x1217 ?x1217 ?x153 ?x154)) (* 4.0 (* ?x632 ?x632 ?x631 ?x631 ?x631 ?x631 ?x1217 ?x1217)) (* ?x632 ?x632 ?x631 ?x631 ?x1217 ?x1217 ?x1217) (* (- 1.0) (* ?x632 ?x632 ?x631 ?x631 ?x1217 ?x1217 ?x66)) (* (- 1.0) (* ?x632 ?x632 ?x631 ?x631 ?x1217 ?x1217 ?x153 ?x154)) (* ?x632 ?x632 ?x632 ?x631 ?x631 ?x631 ?x1217 ?x1217))))
 (let (($x1239 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x95)) 0) (or (not (= ?x802 0.0)) $x801))))
 (let (($x1166 (exists ((b Int) (r Int) (x Int) )(! (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x48 (to_real r)))
 (let ((?x386 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)))
 (let ((?x237 (* (- 1.0) (* ?x48 ?x48 ?x48))))
 (let ((?x1304 (+ (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43)) ?x237 (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) ?x386 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x48)) (* ?x40 ?x48 ?x48) (* (- 3.0) (* ?x40 ?x43 ?x48 ?x48)) (* (- 6.0) (* ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* ?x40 ?x40 ?x40 ?x43 ?x48) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)))))
 (let ((?x154 (to_real x00)))
 (let ((?x153 (to_real b00)))
 (let ((?x155 (* ?x153 ?x154)))
 (let ((?x158 (* (- 1.0) ?x155)))
 (let ((?x66 (to_real r00)))
 (let ((?x144 (* (- 1.0) ?x66)))
 (let ((?x458 (+ (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x66)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x153 ?x154)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x48)) (* (/ 1.0 2.0) ?x386) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x66)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x153 ?x154)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) (* ?x48 ?x48 ?x48 ?x48) (* (- 1.0) (* ?x48 ?x48 ?x48 ?x66)) (* (- 1.0) (* ?x48 ?x48 ?x48 ?x153 ?x154)) (* ?x40 ?x43 ?x48 ?x48 ?x48) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x66)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x153 ?x154)) (* 4.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x66)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x153 ?x154)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48))))
 (let (($x451 (not (= ?x458 0.0))))
 (let (($x528 (or $x451 (not (= (* (+ ?x48 ?x144 ?x158 (* ?x40 ?x43)) ?x1304) 0.0)))))
 (let (($x131 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x131 $x528))))))))))))))))) :qid k!28))
 ))
 (let (($x1169 (exists ((b Int) (r Int) (x Int) )(! (let ((?x40 (to_real b)))
 (let ((?x179 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x1245 (+ ?x48 ?x179)))
 (let ((?x43 (to_real x)))
 (let ((?x265 (* 2.0 ?x43)))
 (let ((?x377 (+ 1.0 ?x265)))
 (let ((?x1286 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x377 ?x1245)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x377 ?x377)) (* (- 1.0) (* ?x1245 ?x1245 ?x1245)) (* (- (/ 1.0 2.0)) (* ?x40 ?x377 ?x377 ?x377 ?x1245 ?x1245)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x1245 ?x1245)))))
 (let ((?x66 (to_real r00)))
 (let ((?x144 (* (- 1.0) ?x66)))
 (let ((?x154 (to_real x00)))
 (let ((?x153 (to_real b00)))
 (let ((?x155 (* ?x153 ?x154)))
 (let ((?x158 (* (- 1.0) ?x155)))
 (let (($x1182 (= (* (+ ?x158 ?x48 ?x179 ?x144 (* (/ 1.0 2.0) (* ?x40 ?x377))) ?x1286) 0.0)))
 (let ((?x237 (* (- 1.0) (* ?x48 ?x48 ?x48))))
 (let ((?x374 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x40 ?x40 ?x40)) ?x237 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x1187 (or (not (= (* (+ ?x158 ?x48 ?x144 (* ?x43 ?x40)) ?x374) 0.0)) (not $x1182))))
 (let (($x1172 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x1172 $x1187)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1160 (lambda ((b Int) (r Int) (x Int) )(let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x48 (to_real r)))
 (let ((?x386 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)))
 (let ((?x237 (* (- 1.0) (* ?x48 ?x48 ?x48))))
 (let ((?x1304 (+ (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43)) ?x237 (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) ?x386 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x48)) (* ?x40 ?x48 ?x48) (* (- 3.0) (* ?x40 ?x43 ?x48 ?x48)) (* (- 6.0) (* ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* ?x40 ?x40 ?x40 ?x43 ?x48) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)))))
 (let ((?x154 (to_real x00)))
 (let ((?x153 (to_real b00)))
 (let ((?x155 (* ?x153 ?x154)))
 (let ((?x158 (* (- 1.0) ?x155)))
 (let ((?x66 (to_real r00)))
 (let ((?x144 (* (- 1.0) ?x66)))
 (let ((?x458 (+ (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x66)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x153 ?x154)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x48)) (* (/ 1.0 2.0) ?x386) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x66)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x153 ?x154)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) (* ?x48 ?x48 ?x48 ?x48) (* (- 1.0) (* ?x48 ?x48 ?x48 ?x66)) (* (- 1.0) (* ?x48 ?x48 ?x48 ?x153 ?x154)) (* ?x40 ?x43 ?x48 ?x48 ?x48) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x66)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x153 ?x154)) (* 4.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x66)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x153 ?x154)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48))))
 (let (($x451 (not (= ?x458 0.0))))
 (let (($x528 (or $x451 (not (= (* (+ ?x48 ?x144 ?x158 (* ?x40 ?x43)) ?x1304) 0.0)))))
 (let (($x131 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x726 (and $x131 $x528)))
 (let ((?x179 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x1245 (+ ?x48 ?x179)))
 (let ((?x265 (* 2.0 ?x43)))
 (let ((?x377 (+ 1.0 ?x265)))
 (let ((?x1286 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x377 ?x1245)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x377 ?x377)) (* (- 1.0) (* ?x1245 ?x1245 ?x1245)) (* (- (/ 1.0 2.0)) (* ?x40 ?x377 ?x377 ?x377 ?x1245 ?x1245)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x1245 ?x1245)))))
 (let (($x1182 (= (* (+ ?x158 ?x48 ?x179 ?x144 (* (/ 1.0 2.0) (* ?x40 ?x377))) ?x1286) 0.0)))
 (let ((?x374 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x40 ?x40 ?x40)) ?x237 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x1187 (or (not (= (* (+ ?x158 ?x48 ?x144 (* ?x43 ?x40)) ?x374) 0.0)) (not $x1182))))
 (let (($x1172 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x547 (and $x1172 $x1187)))
 (rewrite (= $x547 $x726))))))))))))))))))))))))))))))
 ))
 (let (($x1194 (exists ((b Int) (r Int) (x Int) )(! (let ((?x40 (to_real b)))
 (let ((?x179 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x1245 (+ ?x48 ?x179)))
 (let ((?x43 (to_real x)))
 (let ((?x265 (* 2.0 ?x43)))
 (let ((?x377 (+ 1.0 ?x265)))
 (let ((?x1286 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x377 ?x1245)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x377 ?x377)) (* (- 1.0) (* ?x1245 ?x1245 ?x1245)) (* (- (/ 1.0 2.0)) (* ?x40 ?x377 ?x377 ?x377 ?x1245 ?x1245)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x1245 ?x1245)))))
 (let ((?x66 (to_real r00)))
 (let ((?x144 (* (- 1.0) ?x66)))
 (let ((?x154 (to_real x00)))
 (let ((?x153 (to_real b00)))
 (let ((?x155 (* ?x153 ?x154)))
 (let ((?x158 (* (- 1.0) ?x155)))
 (let (($x1182 (= (* (+ ?x158 ?x48 ?x179 ?x144 (* (/ 1.0 2.0) (* ?x40 ?x377))) ?x1286) 0.0)))
 (let ((?x237 (* (- 1.0) (* ?x48 ?x48 ?x48))))
 (let ((?x374 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x40 ?x40 ?x40)) ?x237 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x1187 (or (not (= (* (+ ?x158 ?x48 ?x144 (* ?x43 ?x40)) ?x374) 0.0)) (not $x1182))))
 (let (($x1145 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x1145 $x1187)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1231 (lambda ((b Int) (r Int) (x Int) )(let ((?x40 (to_real b)))
 (let ((?x179 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x1245 (+ ?x48 ?x179)))
 (let ((?x43 (to_real x)))
 (let ((?x265 (* 2.0 ?x43)))
 (let ((?x377 (+ 1.0 ?x265)))
 (let ((?x1286 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x377 ?x1245)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x377 ?x377)) (* (- 1.0) (* ?x1245 ?x1245 ?x1245)) (* (- (/ 1.0 2.0)) (* ?x40 ?x377 ?x377 ?x377 ?x1245 ?x1245)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x1245 ?x1245)))))
 (let ((?x66 (to_real r00)))
 (let ((?x144 (* (- 1.0) ?x66)))
 (let ((?x154 (to_real x00)))
 (let ((?x153 (to_real b00)))
 (let ((?x155 (* ?x153 ?x154)))
 (let ((?x158 (* (- 1.0) ?x155)))
 (let (($x1182 (= (* (+ ?x158 ?x48 ?x179 ?x144 (* (/ 1.0 2.0) (* ?x40 ?x377))) ?x1286) 0.0)))
 (let ((?x237 (* (- 1.0) (* ?x48 ?x48 ?x48))))
 (let ((?x374 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x40 ?x40 ?x40)) ?x237 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x1187 (or (not (= (* (+ ?x158 ?x48 ?x144 (* ?x43 ?x40)) ?x374) 0.0)) (not $x1182))))
 (let (($x1172 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x547 (and $x1172 $x1187)))
 (let (($x1145 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x1305 (and $x1145 $x1187)))
 (rewrite (= $x1305 $x547)))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((b Int) (r Int) (x Int) )(! (let ((?x60 (to_real 0)))
 (let ((?x70 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x48 (to_real r)))
 (let ((?x63 (- ?x48 ?x42)))
 (let ((?x78 (- (* (to_real (- 1)) ?x42 ?x42 ?x63 ?x70 ?x70 ?x70) (* ?x42 ?x42 ?x42 ?x70 ?x70))))
 (let ((?x81 (- (- (- ?x78 (* ?x63 ?x63 ?x63)) (* ?x42 ?x63 ?x63 ?x70 ?x70 ?x70)) (* ?x42 ?x42 ?x63 ?x63 ?x70 ?x70))))
 (let ((?x72 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x63) (to_real r00)) (* ?x42 ?x70))))
 (let ((?x43 (to_real x)))
 (let ((?x28 (- 1)))
 (let ((?x47 (to_real ?x28)))
 (let ((?x54 (- (* ?x47 ?x42 ?x42 ?x48 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x42 ?x42 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x57 (- (- ?x54 (to_real (* r r r))) (* ?x42 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x61 (= (* ?x46 (- ?x57 (* ?x42 ?x42 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43))) ?x60)))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not $x61) (not (= (* ?x72 ?x81) ?x60)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1196 (lambda ((b Int) (r Int) (x Int) )(let ((?x40 (to_real b)))
 (let ((?x179 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x1245 (+ ?x48 ?x179)))
 (let ((?x43 (to_real x)))
 (let ((?x265 (* 2.0 ?x43)))
 (let ((?x377 (+ 1.0 ?x265)))
 (let ((?x1286 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x377 ?x1245)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x377 ?x377)) (* (- 1.0) (* ?x1245 ?x1245 ?x1245)) (* (- (/ 1.0 2.0)) (* ?x40 ?x377 ?x377 ?x377 ?x1245 ?x1245)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x377 ?x377 ?x1245 ?x1245)))))
 (let ((?x66 (to_real r00)))
 (let ((?x144 (* (- 1.0) ?x66)))
 (let ((?x154 (to_real x00)))
 (let ((?x153 (to_real b00)))
 (let ((?x155 (* ?x153 ?x154)))
 (let ((?x158 (* (- 1.0) ?x155)))
 (let (($x1182 (= (* (+ ?x158 ?x48 ?x179 ?x144 (* (/ 1.0 2.0) (* ?x40 ?x377))) ?x1286) 0.0)))
 (let ((?x237 (* (- 1.0) (* ?x48 ?x48 ?x48))))
 (let ((?x374 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x40 ?x40 ?x40)) ?x237 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40)) (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x1187 (or (not (= (* (+ ?x158 ?x48 ?x144 (* ?x43 ?x40)) ?x374) 0.0)) (not $x1182))))
 (let (($x1145 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x1305 (and $x1145 $x1187)))
 (let ((?x60 (to_real 0)))
 (let ((?x70 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x63 (- ?x48 ?x42)))
 (let ((?x78 (- (* (to_real (- 1)) ?x42 ?x42 ?x63 ?x70 ?x70 ?x70) (* ?x42 ?x42 ?x42 ?x70 ?x70))))
 (let ((?x81 (- (- (- ?x78 (* ?x63 ?x63 ?x63)) (* ?x42 ?x63 ?x63 ?x70 ?x70 ?x70)) (* ?x42 ?x42 ?x63 ?x63 ?x70 ?x70))))
 (let ((?x72 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x63) ?x66) (* ?x42 ?x70))))
 (let ((?x28 (- 1)))
 (let ((?x47 (to_real ?x28)))
 (let ((?x54 (- (* ?x47 ?x42 ?x42 ?x48 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x42 ?x42 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x57 (- (- ?x54 (to_real (* r r r))) (* ?x42 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x61 (= (* ?x46 (- ?x57 (* ?x42 ?x42 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43))) ?x60)))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (let (($x86 (and $x38 (or (not $x61) (not (= (* ?x72 ?x81) ?x60))))))
 (rewrite (= $x86 $x1305)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x364 (mp (mp @x88 (quant-intro (proof-bind ?x1196) (= $x87 $x1194)) $x1194) (rewrite (= $x1194 $x1194)) $x1194)))
 (let ((@x974 (mp (mp @x364 (quant-intro (proof-bind ?x1231) (= $x1194 $x1169)) $x1169) (quant-intro (proof-bind ?x1160) (= $x1169 $x1166)) $x1166)))
 (let ((@x724 (mp (mp~ @x974 (sk (~ $x1166 $x1239)) $x1239) (rewrite (= $x1239 $x653)) $x653)))
 (let ((@x553 (mp (and-elim @x724 $x950) @x821 $x1131)))
 (let ((@x845 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1131) $x904)) @x553 $x904)))
 (let ((?x407 (* ?x631 ?x632)))
 (let ((?x651 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x407)))
 (let (($x598 (<= ?x651 0.0)))
 (let (($x644 (= 0.0 ?x651)))
 (let ((@x1280 (symm (commutativity (= $x644 (= ?x651 0.0))) (= (= ?x651 0.0) $x644))))
 (let ((@x1283 (unit-resolution (hypothesis (not $x644)) (mp ((_ th-lemma arith) (= ?x651 0.0)) @x1280 $x644) false)))
 (let ((@x1284 (lemma @x1283 $x644)))
 (let ((@x640 ((_ th-lemma arith) (hypothesis (not $x814)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x644) $x598)) @x1284 $x598) @x845 @x842 false)))
 (let ((@x642 (lemma @x640 $x814)))
 (let ((?x1011 (+ (* (/ 1.0 4.0) ?x1265) (* (- (/ 3.0 2.0)) ?x228) (* 3.0 ?x290) (* (/ 1.0 16.0) ?x291) (* (/ 1.0 4.0) ?x368) (* (- (/ 1.0 4.0)) ?x401) (* (/ 1.0 4.0) ?x403) ?x424 (* 6.0 ?x593) ?x637 (* (- 1.0) ?x754) (* (- 1.0) ?x422) (* (/ 1.0 2.0) ?x1100) (* (- 2.0) ?x1121) (* (/ 1.0 2.0) ?x1161) (* (- 3.0) ?x1214) (* 4.0 ?x1240) ?x1246 (* (- 1.0) ?x1264) (* (/ 1.0 2.0) ?x1123))))
 (let (($x419 (>= ?x1011 0.0)))
 (let (($x417 (not $x419)))
 (let ((?x1028 (+ ?x395 ?x1311 ?x1268 ?x146 ?x1153 ?x159 ?x410 ?x1139 ?x591 ?x638 ?x754 ?x422 ?x1248 ?x1249 ?x1171 ?x1261 ?x731 ?x203 ?x1264 ?x1227)))
 (let (($x1215 (<= ?x1028 0.0)))
 (let (($x216 (not $x1215)))
 (let (($x1042 (= ?x1028 0.0)))
 (let (($x166 (not $x1042)))
 (let (($x542 (= 0.0 ?x1001)))
 (let (($x524 (>= ?x1001 0.0)))
 (let (($x1134 (<= ?x397 0)))
 (let ((@x554 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1131) $x1134)) @x553 $x1134)))
 (let ((@x560 (unit-resolution ((_ th-lemma arith) (or $x524 (not $x904) (not $x1134))) @x554 @x845 (hypothesis (not $x524)) false)))
 (let (($x545 (<= ?x1001 0.0)))
 (let ((@x1076 (unit-resolution ((_ th-lemma arith) (or $x545 (not $x904) (not $x1134))) @x554 @x845 (hypothesis (not $x545)) false)))
 (let ((@x483 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x542 (not $x545) (not $x524))) (lemma @x1076 $x545) (lemma @x560 $x524) $x542)))
 (let ((@x400 (unit-resolution (and-elim @x724 $x1210) (mp @x483 (commutativity (= $x542 $x1025)) $x1025) $x996)))
 (let ((@x169 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x166 $x597)) @x400 $x166) (symm (hypothesis (= 0.0 ?x1028)) $x1042) false)))
 (let (($x1218 (>= ?x1028 0.0)))
 (let (($x140 (<= ?x1011 0.0)))
 (let (($x332 (not $x140)))
 (let ((@x595 (hypothesis $x332)))
 (let (($x538 (<= ?x1257 0.0)))
 (let (($x448 (>= ?x651 0.0)))
 (let ((?x1061 (+ ?x155 (* (- 1.0) ?x1063))))
 (let (($x916 (<= ?x1061 0.0)))
 (let (($x1045 (= 0.0 ?x1061)))
 (let ((@x1030 (symm (commutativity (= $x1045 (= ?x1061 0.0))) (= (= ?x1061 0.0) $x1045))))
 (let ((@x579 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1045) $x916)) (mp ((_ th-lemma arith) (= ?x1061 0.0)) @x1030 $x1045) $x916)))
 (let ((@x1138 (lemma ((_ th-lemma arith) (hypothesis (not $x538)) (hypothesis $x448) @x554 @x579 false) (or (not $x448) $x538))))
 (let ((@x1126 (unit-resolution @x1138 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x644) $x448)) @x1284 $x448) $x538)))
 (let (($x991 (<= ?x913 0.0)))
 (let (($x485 (not $x991)))
 (let (($x1242 (>= ?x913 0.0)))
 (let (($x1310 (not $x1242)))
 (let ((@x432 (hypothesis $x1310)))
 (let ((@x1066 (unit-resolution ((_ th-lemma arith) (or (not $x814) $x140 $x1242)) @x432 @x642 @x595 false)))
 (let (($x345 (= 0.0 ?x913)))
 (let (($x402 (not $x345)))
 (let ((@x431 (monotonicity (symm (commutativity (= $x345 $x597)) (= $x597 $x345)) (= $x996 $x402))))
 (let ((@x456 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x345 $x485 $x1310)) (mp @x400 @x431 $x402) (or $x485 $x1310))))
 (let ((@x138 (unit-resolution @x456 (unit-resolution (lemma @x1066 (or $x1242 $x140)) @x595 $x1242) $x485)))
 (let ((@x145 (unit-resolution ((_ th-lemma arith) (or (not $x538) $x140 $x991)) @x138 @x1126 @x595 false)))
 (let ((@x334 (lemma ((_ th-lemma arith) (hypothesis (not $x1218)) (hypothesis $x140) false) (or $x332 $x1218))))
 (let ((@x457 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x1028) $x216 (not $x1218))) (unit-resolution @x334 (lemma @x145 $x140) $x1218) (or (= 0.0 ?x1028) $x216))))
 (let ((@x1111 (unit-resolution ((_ th-lemma arith) (or $x1215 $x417)) (unit-resolution @x457 (lemma @x169 (not (= 0.0 ?x1028))) $x216) $x417)))
 (let ((@x935 (unit-resolution ((_ th-lemma arith) (or (not $x538) $x419 $x1242)) @x432 (hypothesis $x417) @x1126 false)))
 (let ((@x357 (unit-resolution @x456 (unit-resolution (lemma @x935 (or $x419 $x1242)) @x1111 $x1242) $x485)))
 (unit-resolution ((_ th-lemma arith) (or (not $x814) $x419 $x991)) @x357 @x1111 @x642 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      43
 :arith-eq-adapter               50
 :arith-bound-propagations-cheap 55
 :arith-bound-propagations-lp    8
 :arith-conflicts                143
 :arith-diseq                    69
 :arith-gcd-calls                10
 :arith-grobner-calls            6
 :arith-grobner-conflicts        2
 :arith-horner-calls             6
 :arith-lower                    126
 :arith-make-feasible            79
 :arith-max-columns              79
 :arith-max-rows                 17
 :arith-nla-explanations         67
 :arith-nla-lemmas               139
 :arith-patches                  10
 :arith-patches-success          10
 :arith-propagations             55
 :arith-upper                    78
 :conflicts                      15
 :decisions                      191
 :del-clause                     153
 :final-checks                   45
 :max-memory                     4.49
 :memory                         3.23
 :minimized-lits                 1
 :mk-bool-var                    307
 :mk-clause                      230
 :num-allocs                     4775557
 :num-checks                     1
 :propagations                   197
 :rlimit-count                   9042
 :time                           0.03
 :total-time                     0.04)
