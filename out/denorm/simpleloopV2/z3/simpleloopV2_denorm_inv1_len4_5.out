unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x456 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x284 (<= ?x456 0)))
 (let (($x433 (= ?x456 0)))
 (let ((?x343 (* y!0 y!0)))
 (let ((?x461 (* 2 ?x343)))
 (let ((?x183 (* (- 1) (* y!0 y!0 x!1))))
 (let ((?x247 (* (- 2) x!1)))
 (let ((?x482 (* 5 y!0)))
 (let ((?x429 (* (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1) (+ 4 ?x482 ?x247 ?x183 ?x461 (* (- 3) (* y!0 x!1))))))
 (let (($x379 (= ?x429 0)))
 (let ((?x502 (* y!0 x!1)))
 (let ((?x142 (+ (* 2 y00) (* 2 x00) (* y!0 y!0 x!1 x!1) (* (- 2) y!0) ?x247 (* (- 1) (* y00 y!0)) ?x183 (* (- 1) (* x00 y!0 y!0 x!1)) (* y00 y!0 x!1) (* x00 y!0 x!1) ?x343 (* (- 1) (* x00 y!0)) (* y!0 y!0 y!0 x!1) (* (- 1) (* y00 y!0 y!0 x!1)) ?x502 (* (- 1) (* y!0 x!1 x!1)))))
 (let (($x153 (= ?x142 0)))
 (let (($x119 (not $x153)))
 (let (($x87 (or $x119 (not $x379))))
 (let (($x154 (and $x433 $x87)))
 (let ((?x486 (+ 4 ?x247 ?x482 (* (- 3) (* x!1 y!0)) ?x461 (* (- 1) (* x!1 y!0 y!0)))))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x131 (+ x!1 y!0 ?x67 ?x74)))
 (let ((?x276 (* x!1 y!0 y!0)))
 (let ((?x448 (* (- 2) x00)))
 (let ((?x445 (* (- 2) y00)))
 (let ((?x479 (+ (* 2 x!1) (* 2 y!0) ?x445 ?x448 (* (- 1) (* x!1 y!0)) (* (- 1) ?x343) ?x276 (* y!0 y00) (* y!0 x00) (* x!1 x!1 y!0) (* (- 1) (* x!1 y!0 y00)) (* (- 1) (* x!1 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 y!0)) (* (- 1) (* x!1 y!0 y!0 y!0)) (* x!1 y!0 y!0 y00) (* x!1 y!0 y!0 x00))))
 (let (($x460 (and (= ?x131 0) (or (not (= ?x479 0)) (not (= (* ?x131 ?x486) 0))))))
 (let (($x332 (exists ((x Int) (y Int) )(! (let ((?x302 (+ 4 (* (- 2) x) (* 5 y) (* (- 3) (* x y)) (* 2 (* y y)) (* (- 1) (* x y y)))))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x88 (+ x y ?x67 ?x74)))
 (let ((?x227 (* x y y)))
 (let ((?x448 (* (- 2) x00)))
 (let ((?x445 (* (- 2) y00)))
 (let ((?x517 (+ (* 2 x) (* 2 y) ?x445 ?x448 (* (- 1) (* x y)) (* (- 1) (* y y)) ?x227 (* y y00) (* y x00) (* x x y) (* (- 1) (* x y y00)) (* (- 1) (* x y x00)) (* (- 1) (* x x y y)) (* (- 1) (* x y y y)) (* x y y y00) (* x y y x00))))
 (and (= ?x88 0) (or (not (= ?x517 0)) (not (= (* ?x88 ?x302) 0)))))))))))) :qid k!27))
 ))
 (let (($x208 (exists ((x Int) (y Int) )(! (let ((?x420 (+ 1 (* (- 1) (* (+ (- 1) y) (+ 1 x))) (* (+ (- 1) y) (+ (- 1) y)) (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x))))))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x156 (+ x ?x67 ?x74 y)))
 (let ((?x463 (+ 1 (* (- 1) (* (+ (- 1) x) (+ 1 y))) (* (+ 1 y) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (and (= ?x156 0) (or (not (= (* ?x156 ?x463) 0)) (not (= (* ?x156 ?x420) 0))))))))) :qid k!27))
 ))
 (let ((?x453 (lambda ((x Int) (y Int) )(let ((?x302 (+ 4 (* (- 2) x) (* 5 y) (* (- 3) (* x y)) (* 2 (* y y)) (* (- 1) (* x y y)))))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x88 (+ x y ?x67 ?x74)))
 (let ((?x227 (* x y y)))
 (let ((?x448 (* (- 2) x00)))
 (let ((?x445 (* (- 2) y00)))
 (let ((?x517 (+ (* 2 x) (* 2 y) ?x445 ?x448 (* (- 1) (* x y)) (* (- 1) (* y y)) ?x227 (* y y00) (* y x00) (* x x y) (* (- 1) (* x y y00)) (* (- 1) (* x y x00)) (* (- 1) (* x x y y)) (* (- 1) (* x y y y)) (* x y y y00) (* x y y x00))))
 (let (($x178 (and (= ?x88 0) (or (not (= ?x517 0)) (not (= (* ?x88 ?x302) 0))))))
 (let ((?x420 (+ 1 (* (- 1) (* (+ (- 1) y) (+ 1 x))) (* (+ (- 1) y) (+ (- 1) y)) (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x))))))
 (let ((?x156 (+ x ?x67 ?x74 y)))
 (let ((?x463 (+ 1 (* (- 1) (* (+ (- 1) x) (+ 1 y))) (* (+ 1 y) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let (($x116 (and (= ?x156 0) (or (not (= (* ?x156 ?x463) 0)) (not (= (* ?x156 ?x420) 0))))))
 (rewrite (= $x116 $x178))))))))))))))))
 ))
 (let (($x64 (exists ((x Int) (y Int) )(! (let ((?x56 (+ (- 1 (* (+ x 1) (- y 1))) (* (- y 1) (- y 1)))))
 (let ((?x59 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (- ?x56 (* (+ x 1) (- y 1) (- y 1))))))
 (let ((?x42 (+ (- 1 (* (- x 1) (+ y 1))) (* (+ y 1) (+ y 1)))))
 (let ((?x45 (* (+ (- (- (- x 1) y00) x00) y 1) (- ?x42 (* (- x 1) (+ y 1) (+ y 1))))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x45 0)) (not (= ?x59 0)))))))) :qid k!27))
 ))
 (let ((?x211 (lambda ((x Int) (y Int) )(let ((?x420 (+ 1 (* (- 1) (* (+ (- 1) y) (+ 1 x))) (* (+ (- 1) y) (+ (- 1) y)) (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x))))))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x156 (+ x ?x67 ?x74 y)))
 (let ((?x463 (+ 1 (* (- 1) (* (+ (- 1) x) (+ 1 y))) (* (+ 1 y) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let (($x116 (and (= ?x156 0) (or (not (= (* ?x156 ?x463) 0)) (not (= (* ?x156 ?x420) 0))))))
 (let ((?x56 (+ (- 1 (* (+ x 1) (- y 1))) (* (- y 1) (- y 1)))))
 (let ((?x59 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (- ?x56 (* (+ x 1) (- y 1) (- y 1))))))
 (let ((?x42 (+ (- 1 (* (- x 1) (+ y 1))) (* (+ y 1) (+ y 1)))))
 (let ((?x45 (* (+ (- (- (- x 1) y00) x00) y 1) (- ?x42 (* (- x 1) (+ y 1) (+ y 1))))))
 (let (($x63 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x45 0)) (not (= ?x59 0))))))
 (rewrite (= $x63 $x116))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x371 (mp (mp @x65 (quant-intro (proof-bind ?x211) (= $x64 $x208)) $x208) (rewrite (= $x208 $x208)) $x208)))
 (let ((@x488 (mp~ (mp @x371 (quant-intro (proof-bind ?x453) (= $x208 $x332)) $x332) (sk (~ $x332 $x460)) $x460)))
 (let ((@x449 (mp @x488 (rewrite (= $x460 $x154)) $x154)))
 (let ((@x90 (and-elim @x449 $x433)))
 (let ((@x498 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x433) $x284)) @x90 $x284)))
 (let (($x428 (>= ?x456 0)))
 (let ((@x499 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x433) $x428)) @x90 $x428)))
 (let (($x469 (not (<= ?x142 0))))
 (let (($x467 (>= ?x429 0)))
 (let (($x95 (<= ?x429 0)))
 (let ((@x419 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x379 (not $x95) (not $x467))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x95)) @x498 @x499 false) $x95) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x467)) @x498 @x499 false) $x467) $x379)))
 (let (($x454 (>= ?x142 0)))
 (let ((@x472 (lemma ((_ th-lemma arith) (hypothesis (not $x454)) @x499 @x498 @x499 @x498 false) $x454)))
 (let ((@x391 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x153 $x469 (not $x454))) @x472 (unit-resolution (and-elim @x449 $x87) @x419 $x119) $x469)))
 ((_ th-lemma arith) @x391 @x499 @x498 @x499 @x498 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        4
 :arith-assert-lower        20
 :arith-assert-upper        15
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           4
 :arith-grobner             2
 :arith-max-min             210
 :arith-nonlinear-bounds    7
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-pseudo-nonlinear    4
 :arith-row-summations      2
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 5
 :del-clause                3
 :final-checks              6
 :max-memory                3.58
 :memory                    3.10
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1121164
 :num-checks                1
 :propagations              13
 :rlimit-count              2804
 :time                      0.01
 :total-time                0.01)
