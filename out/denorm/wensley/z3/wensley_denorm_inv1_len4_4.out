unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x1088 (to_real a!3)))
 (let ((?x181 (to_real d00)))
 (let ((?x660 (* ?x181 ?x1088)))
 (let ((?x738 (to_real b!2)))
 (let ((?x1126 (* ?x181 ?x738)))
 (let ((?x962 (+ ?x1126 (* (- 1.0) (* (to_real a00) ?x181)) (* 2.0 (* (to_real b00) (to_real y00))) ?x660 (* (- 1.0) (* (to_real b00) (to_real d!1))) (* (- 2.0) (* (to_real b00) (to_real y!0))))))
 (let (($x1319 (<= ?x962 0.0)))
 (let ((?x775 (to_real y!0)))
 (let ((?x76 (to_real b00)))
 (let ((?x684 (* ?x76 ?x775)))
 (let ((?x201 (+ (* (- 1.0) (to_real (* b00 y!0))) ?x684)))
 (let (($x391 (>= ?x201 0.0)))
 (let (($x805 (= ?x201 0.0)))
 (let ((@x493 (lemma (unit-resolution ((_ th-lemma arith) $x805) (hypothesis (not $x805)) false) $x805)))
 (let ((?x183 (to_real d!1)))
 (let ((?x667 (* ?x76 ?x183)))
 (let ((?x411 (+ (* (- 1.0) (to_real (* b00 d!1))) ?x667)))
 (let (($x806 (>= ?x411 0.0)))
 (let (($x556 (= ?x411 0.0)))
 (let ((@x359 ((_ th-lemma arith) $x556)))
 (let ((?x215 (to_real y00)))
 (let ((?x216 (* ?x76 ?x215)))
 (let ((?x120 (+ (* (- 1.0) (to_real (* b00 y00))) ?x216)))
 (let (($x666 (<= ?x120 0.0)))
 (let (($x665 (= ?x120 0.0)))
 (let ((@x692 ((_ th-lemma arith) $x665)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let ((?x952 (+ ?x35 ?x106 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x619 (>= ?x952 0)))
 (let (($x620 (= 0 ?x952)))
 (let ((@x334 (symm (commutativity (= $x620 (= ?x952 0))) (= (= ?x952 0) $x620))))
 (let (($x584 (= ?x952 0)))
 (let ((?x1119 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x775 ?x1088 ?x1088)))
 (let ((?x734 (* (- (/ 3.0 32.0)) ?x1119)))
 (let ((?x1033 (* ?x738 ?x738 ?x738)))
 (let ((?x238 (* (/ 1.0 4.0) ?x1033)))
 (let ((?x859 (* ?x738 ?x738 ?x775 ?x1088)))
 (let ((?x824 (* ?x183 ?x738 ?x738 ?x1088)))
 (let ((?x107 (* (/ 1.0 2.0) ?x824)))
 (let ((?x804 (* ?x738 ?x738 ?x738 ?x738 ?x738 ?x775 ?x775)))
 (let ((?x102 (* (- (/ 1.0 4.0)) ?x804)))
 (let ((?x786 (* ?x183 ?x183 ?x738 ?x738 ?x738 ?x738 ?x1088)))
 (let ((?x401 (* (- (/ 3.0 16.0)) ?x786)))
 (let ((?x785 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x1088 ?x1088)))
 (let ((?x707 (* (- (/ 1.0 64.0)) ?x785)))
 (let ((?x779 (* ?x183 ?x183 ?x738 ?x738 ?x1088 ?x1088 ?x1088)))
 (let ((?x799 (* (- (/ 1.0 16.0)) ?x779)))
 (let ((?x772 (* ?x183 ?x183 ?x183 ?x738 ?x738 ?x775 ?x775 ?x775)))
 (let ((?x529 (* (- (/ 1.0 8.0)) ?x772)))
 (let ((?x739 (* ?x183 ?x183 ?x183 ?x183 ?x738 ?x738 ?x775 ?x775)))
 (let ((?x546 (* (- (/ 3.0 16.0)) ?x739)))
 (let ((?x733 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x738 ?x738 ?x775)))
 (let ((?x741 (* (- (/ 3.0 32.0)) ?x733)))
 (let ((?x729 (* ?x183 ?x183 ?x183 ?x183 ?x775 ?x775 ?x1088 ?x1088)))
 (let ((?x525 (* (- (/ 3.0 16.0)) ?x729)))
 (let ((?x728 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x738 ?x775 ?x1088)))
 (let ((?x737 (* (- (/ 3.0 16.0)) ?x728)))
 (let ((?x714 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x738 ?x1088)))
 (let ((?x721 (* (- (/ 1.0 32.0)) ?x714)))
 (let ((?x705 (* ?x738 ?x775 ?x1088 ?x1088)))
 (let ((?x722 (* (/ 1.0 2.0) ?x705)))
 (let ((?x700 (* ?x738 ?x738 ?x1088)))
 (let ((?x520 (* (/ 1.0 4.0) ?x700)))
 (let ((?x699 (* ?x738 ?x738 ?x775 ?x775 ?x1088 ?x1088 ?x1088)))
 (let ((?x519 (* (- (/ 1.0 4.0)) ?x699)))
 (let ((?x697 (* ?x183 ?x183 ?x183 ?x775 ?x775 ?x775 ?x1088 ?x1088)))
 (let ((?x708 (* (- (/ 1.0 8.0)) ?x697)))
 (let ((?x578 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x738 ?x738)))
 (let ((?x1292 (* (- (/ 1.0 64.0)) ?x578)))
 (let ((?x564 (* ?x738 ?x738 ?x738 ?x775)))
 (let ((?x566 (* (/ 1.0 2.0) ?x564)))
 (let ((?x557 (* ?x183 ?x738 ?x1088 ?x1088)))
 (let ((?x101 (* (/ 1.0 4.0) ?x557)))
 (let ((?x549 (* ?x183 ?x738 ?x738 ?x775 ?x1088 ?x1088 ?x1088)))
 (let ((?x385 (* (- (/ 1.0 4.0)) ?x549)))
 (let ((?x545 (* ?x183 ?x183 ?x183 ?x738 ?x775 ?x775 ?x775 ?x1088)))
 (let ((?x780 (* (- (/ 1.0 4.0)) ?x545)))
 (let ((?x531 (* ?x738 ?x738 ?x738 ?x738 ?x775 ?x775 ?x1088)))
 (let ((?x822 (* (- (/ 3.0 4.0)) ?x531)))
 (let ((?x530 (* ?x183 ?x183 ?x738 ?x738 ?x738 ?x1088 ?x1088)))
 (let ((?x203 (* (- (/ 3.0 16.0)) ?x530)))
 (let ((?x522 (* ?x183 ?x183 ?x183 ?x183 ?x738 ?x775 ?x775 ?x1088)))
 (let ((?x771 (* (- (/ 3.0 8.0)) ?x522)))
 (let ((?x394 (* ?x738 ?x738 ?x738 ?x775 ?x775 ?x1088 ?x1088)))
 (let ((?x409 (* (- (/ 3.0 4.0)) ?x394)))
 (let ((?x393 (* ?x183 ?x738 ?x738 ?x738 ?x775 ?x1088 ?x1088)))
 (let ((?x555 (* (- (/ 3.0 4.0)) ?x393)))
 (let ((?x243 (* ?x183 ?x738 ?x738 ?x738)))
 (let ((?x284 (* (/ 1.0 4.0) ?x243)))
 (let ((?x206 (* ?x183 ?x738 ?x738 ?x738 ?x738 ?x738 ?x775)))
 (let ((?x412 (* (- (/ 1.0 4.0)) ?x206)))
 (let ((?x188 (* ?x183 ?x738 ?x738 ?x738 ?x738 ?x775 ?x1088)))
 (let ((?x405 (* (- (/ 3.0 4.0)) ?x188)))
 (let ((?x140 (* ?x183 ?x183 ?x738 ?x738 ?x738 ?x738 ?x738)))
 (let ((?x568 (* (- (/ 1.0 16.0)) ?x140)))
 (let ((?x116 (+ ?x568 ?x405 ?x412 ?x284 ?x555 ?x409 ?x771 ?x203 ?x822 ?x780 ?x385 ?x101 ?x566 ?x1292 ?x708 ?x519 ?x520 ?x722 ?x721 ?x737 ?x525 ?x741 ?x546 ?x529 ?x799 ?x707 ?x401 ?x102 ?x107 ?x859 ?x238 ?x734)))
 (let ((?x219 (* (- 2.0) ?x216)))
 (let ((?x180 (to_real a00)))
 (let ((?x182 (* ?x180 ?x181)))
 (let ((?x573 (* (+ ?x182 ?x219 (* (- 1.0) ?x660) ?x667 (* 2.0 ?x684) (* (- 1.0) ?x1126)) ?x116)))
 (let (($x710 (= ?x573 0.0)))
 (let (($x121 (not $x710)))
 (let ((?x763 (+ (* (/ 1.0 4.0) (* ?x76 ?x183 ?x183 ?x183 ?x215 ?x775 ?x775 ?x775 ?x1088 ?x1088)) (* (- (/ 1.0 4.0)) (* ?x181 ?x738 ?x738 ?x1088 ?x1088)) (* (/ 1.0 2.0) (* ?x76 ?x738 ?x738 ?x775 ?x1088)) (* ?x76 ?x738 ?x775 ?x775 ?x1088 ?x1088) (* (- (/ 1.0 8.0)) (* ?x180 ?x181 ?x183 ?x183 ?x183 ?x775 ?x775 ?x775 ?x1088 ?x1088)) (* (- (/ 1.0 4.0)) (* ?x76 ?x183 ?x183 ?x183 ?x775 ?x775 ?x775 ?x775 ?x1088 ?x1088)) (* (/ 1.0 8.0) (* ?x181 ?x183 ?x183 ?x183 ?x775 ?x775 ?x775 ?x1088 ?x1088 ?x1088)) (* (- (/ 1.0 4.0)) (* ?x180 ?x181 ?x738 ?x738 ?x775 ?x775 ?x1088 ?x1088 ?x1088)) (* (/ 1.0 2.0) (* ?x76 ?x215 ?x738 ?x738 ?x775 ?x775 ?x1088 ?x1088 ?x1088)) (* (- (/ 1.0 2.0)) (* ?x76 ?x738 ?x738 ?x775 ?x775 ?x775 ?x1088 ?x1088 ?x1088)) (* (/ 1.0 4.0) (* ?x180 ?x181 ?x738 ?x738 ?x1088)) (* (/ 1.0 2.0) (* ?x180 ?x181 ?x738 ?x775 ?x1088 ?x1088)) (* (- (/ 1.0 2.0)) (* ?x181 ?x738 ?x775 ?x1088 ?x1088 ?x1088)) (* (- 1.0) (* ?x76 ?x215 ?x738 ?x775 ?x1088 ?x1088)) (* (- (/ 1.0 2.0)) (* ?x76 ?x215 ?x738 ?x738 ?x1088)) (* (/ 1.0 4.0) (* ?x181 ?x738 ?x738 ?x775 ?x775 ?x1088 ?x1088 ?x1088 ?x1088)))))
 (let (($x526 (= ?x763 0.0)))
 (let (($x1122 (or (not $x526) $x121)))
 (let ((?x646 (+ (* 2 (* y!0 b!2)) (* (- 1) (* d!1 a!3)) (* (- 2) (* y00 b!2)) (* a00 d!1))))
 (let ((?x230 (* b00 d!1)))
 (let ((?x600 (+ ?x230 (* (- 1) (* d00 b!2)))))
 (let (($x601 (= ?x600 0)))
 (let (($x1328 (and $x584 $x601 (= ?x646 0) $x1122)))
 (let ((?x496 (+ (* (- (/ 1.0 8.0)) (* ?x183 ?x183 ?x183 ?x1088 ?x1088 ?x775 ?x775 ?x775)) (* (- (/ 1.0 4.0)) (* ?x1088 ?x1088 ?x1088 ?x775 ?x775 ?x738 ?x738)) (* (/ 1.0 4.0) (* ?x1088 ?x738 ?x738)) (* (/ 1.0 2.0) (* ?x1088 ?x1088 ?x775 ?x738)) ?x707 (* (- (/ 1.0 32.0)) (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x1088 ?x738)) ?x1292 (* (- (/ 3.0 32.0)) (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x1088 ?x1088 ?x775)) (* (- (/ 3.0 16.0)) (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x1088 ?x775 ?x738)) (* (- (/ 3.0 32.0)) (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x775 ?x738 ?x738)) (* (- (/ 3.0 16.0)) (* ?x183 ?x183 ?x183 ?x183 ?x1088 ?x1088 ?x775 ?x775)) (* (- (/ 3.0 8.0)) (* ?x183 ?x183 ?x183 ?x183 ?x1088 ?x775 ?x775 ?x738)) (* (- (/ 3.0 16.0)) (* ?x183 ?x183 ?x183 ?x183 ?x775 ?x775 ?x738 ?x738)) (* (- (/ 1.0 4.0)) (* ?x183 ?x183 ?x183 ?x1088 ?x775 ?x775 ?x775 ?x738)) (* (- (/ 1.0 8.0)) (* ?x183 ?x183 ?x183 ?x775 ?x775 ?x775 ?x738 ?x738)) (* (- (/ 1.0 16.0)) (* ?x183 ?x183 ?x1088 ?x1088 ?x1088 ?x738 ?x738)) (* (- (/ 3.0 16.0)) (* ?x183 ?x183 ?x1088 ?x1088 ?x738 ?x738 ?x738)) (* (- (/ 3.0 16.0)) (* ?x183 ?x183 ?x1088 ?x738 ?x738 ?x738 ?x738)) ?x568 (* (- (/ 1.0 4.0)) (* ?x183 ?x1088 ?x1088 ?x1088 ?x775 ?x738 ?x738)) (* (- (/ 3.0 4.0)) (* ?x183 ?x1088 ?x1088 ?x775 ?x738 ?x738 ?x738)) (* (- (/ 3.0 4.0)) (* ?x183 ?x1088 ?x775 ?x738 ?x738 ?x738 ?x738)) (* (- (/ 1.0 4.0)) (* ?x183 ?x775 ?x738 ?x738 ?x738 ?x738 ?x738)) (* (- (/ 3.0 4.0)) (* ?x1088 ?x1088 ?x775 ?x775 ?x738 ?x738 ?x738)) (* (- (/ 3.0 4.0)) (* ?x1088 ?x775 ?x775 ?x738 ?x738 ?x738 ?x738)) (* (- (/ 1.0 4.0)) (* ?x775 ?x775 ?x738 ?x738 ?x738 ?x738 ?x738)) ?x238 (* (/ 1.0 4.0) (* ?x183 ?x1088 ?x1088 ?x738)) (* (/ 1.0 2.0) (* ?x183 ?x1088 ?x738 ?x738)) ?x284 (* ?x1088 ?x775 ?x738 ?x738) (* (/ 1.0 2.0) (* ?x775 ?x738 ?x738 ?x738)))))
 (let ((?x169 (+ ?x182 (* (- 1.0) (* ?x1088 ?x181)) ?x219 (* (- 1.0) (* ?x738 ?x181)) (* ?x183 ?x76) (* 2.0 (* ?x775 ?x76)))))
 (let ((?x725 (+ (* (/ 1.0 8.0) (* ?x183 ?x183 ?x183 ?x1088 ?x1088 ?x775 ?x775 ?x775 ?x180 ?x181)) (* (- (/ 1.0 8.0)) (* ?x183 ?x183 ?x183 ?x1088 ?x1088 ?x1088 ?x775 ?x775 ?x775 ?x181)) (* (- (/ 1.0 4.0)) (* ?x183 ?x183 ?x183 ?x1088 ?x1088 ?x775 ?x775 ?x775 ?x76 ?x215)) (* (/ 1.0 4.0) (* ?x183 ?x183 ?x183 ?x1088 ?x1088 ?x775 ?x775 ?x775 ?x775 ?x76)) (* (/ 1.0 4.0) (* ?x1088 ?x1088 ?x1088 ?x775 ?x775 ?x738 ?x738 ?x180 ?x181)) (* (- (/ 1.0 4.0)) (* ?x1088 ?x1088 ?x1088 ?x1088 ?x775 ?x775 ?x738 ?x738 ?x181)) (* (- (/ 1.0 2.0)) (* ?x1088 ?x1088 ?x1088 ?x775 ?x775 ?x738 ?x738 ?x76 ?x215)) (* (/ 1.0 2.0) (* ?x1088 ?x1088 ?x1088 ?x775 ?x775 ?x775 ?x738 ?x738 ?x76)) (* (- (/ 1.0 4.0)) (* ?x1088 ?x738 ?x738 ?x180 ?x181)) (* (/ 1.0 4.0) (* ?x1088 ?x1088 ?x738 ?x738 ?x181)) (* (/ 1.0 2.0) (* ?x1088 ?x738 ?x738 ?x76 ?x215)) (* (- (/ 1.0 2.0)) (* ?x1088 ?x775 ?x738 ?x738 ?x76)) (* (- (/ 1.0 2.0)) (* ?x1088 ?x1088 ?x775 ?x738 ?x180 ?x181)) (* (/ 1.0 2.0) (* ?x1088 ?x1088 ?x1088 ?x775 ?x738 ?x181)) (* ?x1088 ?x1088 ?x775 ?x738 ?x76 ?x215) (* (- 1.0) (* ?x1088 ?x1088 ?x775 ?x775 ?x738 ?x76)))))
 (let ((?x257 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x305 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x106 (* 2 (* y!0 b00))) 0)))
 (let (($x1083 (and $x305 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x257 0) (or (not (= ?x725 0.0)) (not (= (* ?x169 ?x496) 0.0))))))
 (let (($x1140 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x1330 (* (/ 1.0 2.0) (* (to_real y) (to_real b) (to_real b) (to_real b)))))
 (let ((?x1339 (* (/ 1.0 4.0) (* (to_real d) (to_real b) (to_real b) (to_real b)))))
 (let ((?x1282 (* (/ 1.0 2.0) (* (to_real d) (to_real a) (to_real b) (to_real b)))))
 (let ((?x1336 (* (/ 1.0 4.0) (* (to_real d) (to_real a) (to_real a) (to_real b)))))
 (let ((?x63 (to_real b)))
 (let ((?x61 (to_real y)))
 (let ((?x1220 (* (- (/ 3.0 4.0)) (* (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1214 (* (- (/ 3.0 4.0)) (* (to_real d) (to_real a) ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x1211 (* (- (/ 3.0 4.0)) (* (to_real d) (to_real a) (to_real a) ?x61 ?x63 ?x63 ?x63))))
 (let ((?x60 (to_real a)))
 (let ((?x56 (to_real d)))
 (let ((?x1348 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x60 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x60 ?x60 ?x61 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x60)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x61 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x60 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x63 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x60 ?x63 ?x63 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x60 ?x60 ?x61 ?x63 ?x63)) ?x1211 ?x1214 (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x63 ?x63 ?x63 ?x63 ?x63)) ?x1220 (* (- (/ 3.0 4.0)) (* ?x60 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x63 ?x63 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63)) ?x1336 ?x1282 ?x1339 (* ?x60 ?x61 ?x63 ?x63) ?x1330)))
 (let ((?x351 (* (- 1.0) (* ?x63 (to_real d00)))))
 (let ((?x215 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x216 (* ?x76 ?x215)))
 (let ((?x219 (* (- 2.0) ?x216)))
 (let ((?x200 (* (- 1.0) (* ?x60 (to_real d00)))))
 (let ((?x181 (to_real d00)))
 (let ((?x180 (to_real a00)))
 (let ((?x182 (* ?x180 ?x181)))
 (let ((?x838 (* (+ ?x182 ?x200 ?x219 ?x351 (* ?x56 ?x76) (* 2.0 (* ?x61 ?x76))) ?x1348)))
 (let ((?x461 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61 ?x180 ?x181)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x61 ?x61 ?x61 ?x181)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61 ?x76 ?x215)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61 ?x61 ?x76)) (* (/ 1.0 4.0) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63 ?x180 ?x181)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63 ?x181)) (* (- (/ 1.0 2.0)) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63 ?x76 ?x215)) (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x61 ?x63 ?x63 ?x76)) (* (- (/ 1.0 4.0)) (* ?x60 ?x63 ?x63 ?x180 ?x181)) (* (/ 1.0 4.0) (* ?x60 ?x60 ?x63 ?x63 ?x181)) (* (/ 1.0 2.0) (* ?x60 ?x63 ?x63 ?x76 ?x215)) (* (- (/ 1.0 2.0)) (* ?x60 ?x61 ?x63 ?x63 ?x76)) (* (- (/ 1.0 2.0)) (* ?x60 ?x60 ?x61 ?x63 ?x180 ?x181)) (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x61 ?x63 ?x181)) (* ?x60 ?x60 ?x61 ?x63 ?x76 ?x215) (* (- 1.0) (* ?x60 ?x60 ?x61 ?x61 ?x63 ?x76)))))
 (let (($x438 (not (= ?x461 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x202 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x207 (= ?x202 0)))
 (let (($x148 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (and $x138 $x148 $x207 (or $x438 (not (= ?x838 0.0)))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x241 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x56)))
 (let ((?x61 (to_real y)))
 (let ((?x1184 (+ ?x61 ?x235)))
 (let ((?x63 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x926 (+ ?x60 ?x63)))
 (let ((?x641 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x926 ?x926 ?x1184 ?x1184 ?x1184)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x926 ?x926 ?x926 ?x1184 ?x1184)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x926)) (* (/ 1.0 2.0) (* ?x63 ?x926 ?x926 ?x1184)))))
 (let ((?x181 (to_real d00)))
 (let ((?x180 (to_real a00)))
 (let ((?x182 (* ?x180 ?x181)))
 (let ((?x215 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x216 (* ?x76 ?x215)))
 (let ((?x219 (* (- 2.0) ?x216)))
 (let ((?x384 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x1184)) (* (- 1.0) (* ?x181 ?x926))) ?x641)))
 (let ((?x1259 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x56 ?x56 ?x56 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x63 ?x63 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x60)) (* (/ 1.0 2.0) (* ?x61 ?x63 ?x60 ?x60)))))
 (let ((?x1264 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x61)) (* (- 1.0) (* ?x181 ?x60))) ?x1259)))
 (let (($x1258 (or (not (= ?x1264 0.0)) (not (= ?x384 0.0)))))
 (let ((?x240 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x247 (= ?x240 0)))
 (let ((?x559 (* d00 a)))
 (let ((?x1288 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x559)))
 (and (= ?x1288 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x247 $x1258)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x483 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x1330 (* (/ 1.0 2.0) (* (to_real y) (to_real b) (to_real b) (to_real b)))))
 (let ((?x1339 (* (/ 1.0 4.0) (* (to_real d) (to_real b) (to_real b) (to_real b)))))
 (let ((?x1282 (* (/ 1.0 2.0) (* (to_real d) (to_real a) (to_real b) (to_real b)))))
 (let ((?x1336 (* (/ 1.0 4.0) (* (to_real d) (to_real a) (to_real a) (to_real b)))))
 (let ((?x63 (to_real b)))
 (let ((?x61 (to_real y)))
 (let ((?x1220 (* (- (/ 3.0 4.0)) (* (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1214 (* (- (/ 3.0 4.0)) (* (to_real d) (to_real a) ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x1211 (* (- (/ 3.0 4.0)) (* (to_real d) (to_real a) (to_real a) ?x61 ?x63 ?x63 ?x63))))
 (let ((?x60 (to_real a)))
 (let ((?x56 (to_real d)))
 (let ((?x1348 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x60 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x60 ?x60 ?x61 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x60)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x61 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x60 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x63 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x60 ?x63 ?x63 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x60 ?x60 ?x61 ?x63 ?x63)) ?x1211 ?x1214 (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x63 ?x63 ?x63 ?x63 ?x63)) ?x1220 (* (- (/ 3.0 4.0)) (* ?x60 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x63 ?x63 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63)) ?x1336 ?x1282 ?x1339 (* ?x60 ?x61 ?x63 ?x63) ?x1330)))
 (let ((?x351 (* (- 1.0) (* ?x63 (to_real d00)))))
 (let ((?x215 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x216 (* ?x76 ?x215)))
 (let ((?x219 (* (- 2.0) ?x216)))
 (let ((?x200 (* (- 1.0) (* ?x60 (to_real d00)))))
 (let ((?x181 (to_real d00)))
 (let ((?x180 (to_real a00)))
 (let ((?x182 (* ?x180 ?x181)))
 (let ((?x838 (* (+ ?x182 ?x200 ?x219 ?x351 (* ?x56 ?x76) (* 2.0 (* ?x61 ?x76))) ?x1348)))
 (let ((?x461 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61 ?x180 ?x181)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x61 ?x61 ?x61 ?x181)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61 ?x76 ?x215)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x61 ?x61 ?x61 ?x76)) (* (/ 1.0 4.0) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63 ?x180 ?x181)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63 ?x181)) (* (- (/ 1.0 2.0)) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x63 ?x63 ?x76 ?x215)) (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x61 ?x61 ?x61 ?x63 ?x63 ?x76)) (* (- (/ 1.0 4.0)) (* ?x60 ?x63 ?x63 ?x180 ?x181)) (* (/ 1.0 4.0) (* ?x60 ?x60 ?x63 ?x63 ?x181)) (* (/ 1.0 2.0) (* ?x60 ?x63 ?x63 ?x76 ?x215)) (* (- (/ 1.0 2.0)) (* ?x60 ?x61 ?x63 ?x63 ?x76)) (* (- (/ 1.0 2.0)) (* ?x60 ?x60 ?x61 ?x63 ?x180 ?x181)) (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x61 ?x63 ?x181)) (* ?x60 ?x60 ?x61 ?x63 ?x76 ?x215) (* (- 1.0) (* ?x60 ?x60 ?x61 ?x61 ?x63 ?x76)))))
 (let (($x438 (not (= ?x461 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x202 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x207 (= ?x202 0)))
 (let (($x148 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (let (($x1162 (and $x138 $x148 $x207 (or $x438 (not (= ?x838 0.0))))))
 (let ((?x1347 (* (/ 1.0 2.0) (* ?x63 (+ ?x60 ?x63) (+ ?x60 ?x63) (+ ?x61 (* (/ 1.0 2.0) ?x56))))))
 (let ((?x235 (* (/ 1.0 2.0) ?x56)))
 (let ((?x1184 (+ ?x61 ?x235)))
 (let ((?x926 (+ ?x60 ?x63)))
 (let ((?x641 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x926 ?x926 ?x1184 ?x1184 ?x1184)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x926 ?x926 ?x926 ?x1184 ?x1184)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x926)) ?x1347)))
 (let ((?x384 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x1184)) (* (- 1.0) (* ?x181 ?x926))) ?x641)))
 (let ((?x1259 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x56 ?x56 ?x56 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x63 ?x63 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x60)) (* (/ 1.0 2.0) (* ?x61 ?x63 ?x60 ?x60)))))
 (let ((?x1264 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x61)) (* (- 1.0) (* ?x181 ?x60))) ?x1259)))
 (let (($x1258 (or (not (= ?x1264 0.0)) (not (= ?x384 0.0)))))
 (let ((?x240 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x247 (= ?x240 0)))
 (let ((?x559 (* d00 a)))
 (let (($x1183 (= (+ (* 2 ?x105) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x559) 0)))
 (let (($x297 (and $x1183 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x247 $x1258)))
 (rewrite (= $x297 $x1162))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1262 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x56)))
 (let ((?x61 (to_real y)))
 (let ((?x1184 (+ ?x61 ?x235)))
 (let ((?x63 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x926 (+ ?x60 ?x63)))
 (let ((?x641 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x926 ?x926 ?x1184 ?x1184 ?x1184)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x926 ?x926 ?x926 ?x1184 ?x1184)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x926)) (* (/ 1.0 2.0) (* ?x63 ?x926 ?x926 ?x1184)))))
 (let ((?x181 (to_real d00)))
 (let ((?x180 (to_real a00)))
 (let ((?x182 (* ?x180 ?x181)))
 (let ((?x215 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x216 (* ?x76 ?x215)))
 (let ((?x219 (* (- 2.0) ?x216)))
 (let ((?x384 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x1184)) (* (- 1.0) (* ?x181 ?x926))) ?x641)))
 (let ((?x1259 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x56 ?x56 ?x56 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x63 ?x63 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x60)) (* (/ 1.0 2.0) (* ?x61 ?x63 ?x60 ?x60)))))
 (let ((?x1264 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x61)) (* (- 1.0) (* ?x181 ?x60))) ?x1259)))
 (let (($x1258 (or (not (= ?x1264 0.0)) (not (= ?x384 0.0)))))
 (let ((?x240 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x247 (= ?x240 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x963 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x963 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x247 $x1258)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1276 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x56)))
 (let ((?x61 (to_real y)))
 (let ((?x1184 (+ ?x61 ?x235)))
 (let ((?x63 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x926 (+ ?x60 ?x63)))
 (let ((?x641 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x926 ?x926 ?x1184 ?x1184 ?x1184)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x926 ?x926 ?x926 ?x1184 ?x1184)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x926)) (* (/ 1.0 2.0) (* ?x63 ?x926 ?x926 ?x1184)))))
 (let ((?x181 (to_real d00)))
 (let ((?x180 (to_real a00)))
 (let ((?x182 (* ?x180 ?x181)))
 (let ((?x215 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x216 (* ?x76 ?x215)))
 (let ((?x219 (* (- 2.0) ?x216)))
 (let ((?x384 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x1184)) (* (- 1.0) (* ?x181 ?x926))) ?x641)))
 (let ((?x1259 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x56 ?x56 ?x56 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x63 ?x63 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x60)) (* (/ 1.0 2.0) (* ?x61 ?x63 ?x60 ?x60)))))
 (let ((?x1264 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x61)) (* (- 1.0) (* ?x181 ?x60))) ?x1259)))
 (let (($x1258 (or (not (= ?x1264 0.0)) (not (= ?x384 0.0)))))
 (let ((?x240 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x247 (= ?x240 0)))
 (let ((?x559 (* d00 a)))
 (let ((?x1288 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x559)))
 (let (($x297 (and (= ?x1288 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x247 $x1258)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x229 (and (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) ?x559)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x247 $x1258)))
 (rewrite (= $x229 $x297)))))))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x61 (to_real y)))
 (let ((?x75 (+ ?x61 ?x58)))
 (let ((?x63 (to_real b)))
 (let ((?x64 (/ ?x63 ?x57)))
 (let ((?x81 (+ a b)))
 (let ((?x85 (to_real ?x81)))
 (let ((?x88 (- (* (to_real (- 1)) ?x85 ?x85 ?x58 ?x58 ?x58 ?x75 ?x75 ?x75) (* ?x85 ?x85 ?x85 ?x64 ?x64 ?x75 ?x75))))
 (let ((?x35 (* a00 d00)))
 (let ((?x79 (to_real ?x35)))
 (let ((?x80 (+ (to_real (* (- 2) b00 y00)) ?x79 (* ?x57 (to_real b00) ?x75))))
 (let ((?x92 (* (- ?x80 (to_real (* ?x81 d00))) (+ ?x88 (* ?x85 ?x64 ?x64) (* ?x85 ?x85 ?x64 ?x75)))))
 (let ((?x60 (to_real a)))
 (let ((?x43 (- 1)))
 (let ((?x59 (to_real ?x43)))
 (let ((?x66 (- (* ?x59 ?x60 ?x60 ?x58 ?x58 ?x58 ?x61 ?x61 ?x61) (* ?x60 ?x60 ?x60 ?x64 ?x64 ?x61 ?x61))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let ((?x71 (* (to_real ?x39) (+ ?x66 (* ?x60 ?x64 ?x64) (* ?x60 ?x60 ?x64 ?x61)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x71 ?x72)) (not (= ?x92 ?x72)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1272 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x56)))
 (let ((?x61 (to_real y)))
 (let ((?x1184 (+ ?x61 ?x235)))
 (let ((?x63 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x926 (+ ?x60 ?x63)))
 (let ((?x641 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x926 ?x926 ?x1184 ?x1184 ?x1184)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x926 ?x926 ?x926 ?x1184 ?x1184)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x926)) (* (/ 1.0 2.0) (* ?x63 ?x926 ?x926 ?x1184)))))
 (let ((?x181 (to_real d00)))
 (let ((?x180 (to_real a00)))
 (let ((?x182 (* ?x180 ?x181)))
 (let ((?x215 (to_real y00)))
 (let ((?x76 (to_real b00)))
 (let ((?x216 (* ?x76 ?x215)))
 (let ((?x219 (* (- 2.0) ?x216)))
 (let ((?x384 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x1184)) (* (- 1.0) (* ?x181 ?x926))) ?x641)))
 (let ((?x1259 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x56 ?x56 ?x56 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x63 ?x63 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x60)) (* (/ 1.0 2.0) (* ?x61 ?x63 ?x60 ?x60)))))
 (let ((?x1264 (* (+ ?x219 ?x182 (* 2.0 (* ?x76 ?x61)) (* (- 1.0) (* ?x181 ?x60))) ?x1259)))
 (let (($x1258 (or (not (= ?x1264 0.0)) (not (= ?x384 0.0)))))
 (let ((?x240 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x247 (= ?x240 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x963 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x229 (and $x963 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x247 $x1258)))
 (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x75 (+ ?x61 ?x58)))
 (let ((?x64 (/ ?x63 ?x57)))
 (let ((?x81 (+ a b)))
 (let ((?x85 (to_real ?x81)))
 (let ((?x88 (- (* (to_real (- 1)) ?x85 ?x85 ?x58 ?x58 ?x58 ?x75 ?x75 ?x75) (* ?x85 ?x85 ?x85 ?x64 ?x64 ?x75 ?x75))))
 (let ((?x79 (to_real ?x35)))
 (let ((?x84 (- (+ (to_real (* (- 2) b00 y00)) ?x79 (* ?x57 ?x76 ?x75)) (to_real (* ?x81 d00)))))
 (let (($x93 (= (* ?x84 (+ ?x88 (* ?x85 ?x64 ?x64) (* ?x85 ?x85 ?x64 ?x75))) ?x72)))
 (let ((?x66 (- (* (to_real (- 1)) ?x60 ?x60 ?x58 ?x58 ?x58 ?x61 ?x61 ?x61) (* ?x60 ?x60 ?x60 ?x64 ?x64 ?x61 ?x61))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let ((?x71 (* (to_real ?x39) (+ ?x66 (* ?x60 ?x64 ?x64) (* ?x60 ?x60 ?x64 ?x61)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x96 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x71 ?x72)) (not $x93)))))
 (rewrite (= $x96 $x229)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x649 (mp (mp @x98 (quant-intro (proof-bind ?x1272) (= $x97 $x1262)) $x1262) (rewrite (= $x1262 $x1262)) $x1262)))
 (let ((@x1046 (mp (mp @x649 (quant-intro (proof-bind ?x1276) (= $x1262 $x241)) $x241) (quant-intro (proof-bind ?x483) (= $x241 $x1140)) $x1140)))
 (let ((@x715 (mp (mp~ @x1046 (sk (~ $x1140 $x1083)) $x1083) (rewrite (= $x1083 $x1328)) $x1328)))
 (let ((@x333 (mp (and-elim @x715 $x584) @x334 $x620)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x620) $x619)) @x333 $x619)))
 (let ((?x110 (+ ?x182 (* (- 1.0) (to_real ?x35)))))
 (let (($x117 (>= ?x110 0.0)))
 (let (($x113 (= ?x110 0.0)))
 (let ((@x137 ((_ th-lemma arith) $x113)))
 (let ((?x109 (+ ?x1126 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x108 (<= ?x109 0.0)))
 (let (($x389 (= ?x109 0.0)))
 (let ((@x129 ((_ th-lemma arith) $x389)))
 (let (($x627 (>= ?x600 0)))
 (let (($x1127 (= 0 ?x600)))
 (let ((@x1176 (mp (and-elim @x715 $x601) (symm (commutativity (= $x1127 $x601)) (= $x601 $x1127)) $x1127)))
 (let ((?x100 (+ (* (- 1.0) (to_real (* d00 a!3))) ?x660)))
 (let (($x558 (<= ?x100 0.0)))
 (let (($x858 (= ?x100 0.0)))
 (let ((@x258 ((_ th-lemma arith) $x858)))
 (let ((@x296 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x858) $x558)) @x258 $x558) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1127) $x627)) @x1176 $x627) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x389) $x108)) @x129 $x108) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x117)) @x137 $x117) @x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x665) $x666)) @x692 $x666) (hypothesis (not $x1319)) (hypothesis $x391) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x556) $x806)) @x359 $x806) false)))
 (let ((@x1096 (unit-resolution (lemma @x296 (or (not $x391) $x1319)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x805) $x391)) @x493 $x391) $x1319)))
 (let ((?x197 (+ (* (/ 3.0 8.0) ?x522) (* (/ 3.0 16.0) ?x530) (* (/ 3.0 4.0) ?x531) (* (/ 1.0 4.0) ?x545) (* (/ 1.0 4.0) ?x549) (* (- (/ 1.0 4.0)) ?x557) (* (- (/ 1.0 2.0)) ?x564) (* (/ 1.0 64.0) ?x578) (* (/ 1.0 8.0) ?x697) (* (/ 1.0 4.0) ?x699) (* (- (/ 1.0 4.0)) ?x700) (* (- (/ 1.0 2.0)) ?x705) (* (/ 1.0 32.0) ?x714) (* (/ 3.0 16.0) ?x728) (* (/ 3.0 16.0) ?x729) (* (/ 3.0 32.0) ?x733) (* (/ 3.0 16.0) ?x739) (* (/ 1.0 8.0) ?x772) (* (/ 1.0 16.0) ?x779) (* (/ 1.0 64.0) ?x785) (* (/ 3.0 16.0) ?x786) (* (/ 1.0 4.0) ?x804) (* (- (/ 1.0 2.0)) ?x824) (* (- 1.0) ?x859) (* (- (/ 1.0 4.0)) ?x1033) (* (/ 3.0 32.0) ?x1119) (* (/ 1.0 16.0) ?x140) (* (/ 3.0 4.0) ?x188) (* (/ 1.0 4.0) ?x206) (* (- (/ 1.0 4.0)) ?x243) (* (/ 3.0 4.0) ?x393) (* (/ 3.0 4.0) ?x394))))
 (let (($x204 (>= ?x197 0.0)))
 (let (($x444 (not $x204)))
 (let ((?x370 (+ ?x771 ?x203 ?x822 ?x780 ?x385 ?x101 ?x566 ?x1292 ?x708 ?x519 ?x520 ?x722 ?x721 ?x737 ?x525 ?x741 ?x546 ?x529 ?x799 ?x707 ?x401 ?x102 ?x107 ?x859 ?x238 ?x734 ?x568 ?x405 ?x412 ?x284 ?x555 ?x409)))
 (let (($x355 (<= ?x370 0.0)))
 (let (($x998 (not $x355)))
 (let (($x654 (>= ?x370 0.0)))
 (let (($x1026 (<= ?x197 0.0)))
 (let (($x883 (not $x1026)))
 (let ((@x1110 (hypothesis $x883)))
 (let (($x392 (>= ?x962 0.0)))
 (let (($x193 (>= ?x100 0.0)))
 (let ((@x1072 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x858) $x193)) (lemma (unit-resolution @x258 (hypothesis (not $x858)) false) $x858) $x193)))
 (let (($x220 (<= ?x110 0.0)))
 (let (($x436 (>= ?x120 0.0)))
 (let (($x366 (<= ?x952 0)))
 (let ((@x1224 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x620) $x366)) @x333 $x366)))
 (let (($x367 (<= ?x600 0)))
 (let (($x657 (<= ?x411 0.0)))
 (let (($x656 (>= ?x109 0.0)))
 (let (($x643 (<= ?x201 0.0)))
 (let ((@x1306 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x805) $x643)) @x493 $x643) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x389) $x656)) @x129 $x656) (hypothesis (not $x392)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x556) $x657)) @x359 $x657) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1127) $x367)) @x1176 $x367) @x1224 (hypothesis $x193) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x665) $x436)) @x692 $x436) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x220)) @x137 $x220) false)))
 (let ((@x1287 (unit-resolution (lemma @x1306 (or (not $x193) $x392)) @x1072 $x392)))
 (let (($x1128 (>= ?x573 0.0)))
 (let (($x982 (not $x1128)))
 (let (($x630 (<= ?x573 0.0)))
 (let (($x629 (= 0.0 ?x573)))
 (let ((@x1180 (symm (commutativity (= $x629 $x710)) (= $x710 $x629))))
 (let (($x1022 (= ?x370 0.0)))
 (let (($x244 (not $x630)))
 (let ((@x255 (hypothesis $x244)))
 (let ((@x1098 (unit-resolution ((_ th-lemma arith) (or (not $x1319) $x1026 $x630)) @x255 @x1096 @x1110 false)))
 (let ((@x1108 (lemma ((_ th-lemma arith) (hypothesis $x1026) (hypothesis (not $x654)) false) (or $x883 $x654))))
 (let ((@x913 (unit-resolution @x1108 (unit-resolution (lemma @x1098 (or $x1026 $x630)) @x255 $x1026) $x654)))
 (let ((@x1294 (unit-resolution ((_ th-lemma arith) (or (not $x392) $x204 $x630)) @x255 (hypothesis $x444) @x1287 false)))
 (let ((@x1278 ((_ th-lemma arith) (or $x355 $x444))))
 (let ((@x910 (unit-resolution @x1278 (unit-resolution (lemma @x1294 (or $x204 $x630)) @x255 $x204) $x355)))
 (let ((@x246 ((_ th-lemma arith triangle-eq) (or $x1022 $x998 (not $x654)))))
 (let (($x1113 (not $x1022)))
 (let (($x536 (or $x1113 $x710)))
 (let ((@x343 (unit-resolution ((_ th-lemma arith) $x536) (hypothesis $x121) (hypothesis $x1022) false)))
 (let ((@x344 (lemma @x343 $x536)))
 (let ((@x1018 (mp (unit-resolution @x344 (unit-resolution @x246 @x910 @x913 $x1022) $x710) @x1180 $x629)))
 (let ((@x345 (unit-resolution (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x629) $x630)) @x255 (not $x629)) @x1018 false)))
 (let (($x1023 (not $x629)))
 (let (($x621 (= 0.0 ?x763)))
 (let (($x369 (<= ?x763 0.0)))
 (let ((@x1291 (unit-resolution ((_ th-lemma arith) (or (not $x619) $x369 (not $x366))) @x1224 @x332 (hypothesis (not $x369)) false)))
 (let (($x637 (>= ?x763 0.0)))
 (let ((@x986 (unit-resolution ((_ th-lemma arith) (or $x637 (not $x619) (not $x366))) @x1224 @x332 (hypothesis (not $x637)) false)))
 (let ((@x618 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x621 (not $x369) (not $x637))) (lemma @x986 $x637) (or $x621 (not $x369)))))
 (let ((@x625 (mp (unit-resolution @x618 (lemma @x1291 $x369) $x621) (commutativity (= $x621 $x526)) $x526)))
 (let ((@x678 (unit-resolution (and-elim @x715 $x1122) @x625 $x121)))
 (let ((@x353 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x629 $x244 $x982)) (mp @x678 (monotonicity @x1180 (= $x121 $x1023)) $x1023) (lemma @x345 $x630) $x982)))
 (let ((@x354 (unit-resolution ((_ th-lemma arith) (or (not $x392) $x1026 $x1128)) @x353 @x1287 @x1110 false)))
 (let ((@x1233 (unit-resolution @x246 (unit-resolution @x344 @x678 $x1113) (or $x998 (not $x654)))))
 (let ((@x1044 (unit-resolution @x1233 (unit-resolution @x1108 (lemma @x354 $x1026) $x654) $x998)))
 (unit-resolution ((_ th-lemma arith) (or (not $x1319) $x204 $x1128)) @x353 (unit-resolution @x1278 @x1044 $x444) @x1096 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       83
 :arith-eq-adapter                97
 :arith-bound-propagations-cheap  70
 :arith-bound-propagations-lp     24
 :arith-branch                    3
 :arith-conflicts                 276
 :arith-cube-calls                1
 :arith-diseq                     82
 :arith-gcd-calls                 13
 :arith-grobner-calls             11
 :arith-grobner-conflicts         2
 :arith-hnf-calls                 1
 :arith-horner-calls              13
 :arith-horner-cross-nested-forms 56
 :arith-lower                     161
 :arith-make-feasible             141
 :arith-max-columns               122
 :arith-max-rows                  31
 :arith-nla-explanations          210
 :arith-nla-lemmas                272
 :arith-patches                   13
 :arith-patches-success           10
 :arith-propagations              70
 :arith-upper                     182
 :conflicts                       25
 :decisions                       248
 :del-clause                      371
 :final-checks                    96
 :max-memory                      7.54
 :memory                          3.25
 :minimized-lits                  2
 :mk-bool-var                     596
 :mk-clause                       483
 :num-allocs                      174184605
 :num-checks                      1
 :propagations                    288
 :rlimit-count                    13056
 :time                            0.30
 :total-time                      0.30)
