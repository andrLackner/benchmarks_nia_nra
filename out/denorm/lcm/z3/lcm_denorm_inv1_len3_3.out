unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(proof
(let ((?x407 (* (- 1) k!00)))
 (let ((?x576 (* (- 1) k!10)))
 (let ((?x915 (+ (* y!2 v!4) ?x576 ?x407 (* x!3 u!5))))
 (let ((?x951 (* x!3 u!5 y!2 y!2 y!2 v!4 v!4 v!4)))
 (let ((?x899 (* x!3 x!3 x!3 u!5 u!5 u!5 v!4 v!4)))
 (let ((?x888 (* (- 1) (* u!5 u!5 u!5 u!5 y!2 y!2 y!2 y!2))))
 (let ((?x872 (* x!3 y!2 v!4 v!4 v!4)))
 (let ((?x737 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2))))
 (let ((?x412 (* (- 1) (* u!5 u!5 u!5 y!2 y!2))))
 (let ((?x976 (+ ?x412 ?x737 (* x!3 x!3 x!3 u!5 u!5 u!5 u!5 u!5) (* 2 (* x!3 x!3 x!3 u!5 u!5 u!5 u!5 v!4)) (* (- 6) (* x!3 x!3 u!5 u!5 u!5 u!5 y!2 v!4)) (* (- 3) (* u!5 u!5 y!2 y!2 y!2 y!2 v!4 v!4)) (* 3 (* x!3 u!5 u!5 y!2 v!4)) (* x!3 u!5 u!5 u!5 y!2) (* 3 (* x!3 u!5 y!2 v!4 v!4)) ?x872 (* (- 3) (* u!5 u!5 y!2 y!2 v!4)) (* (- 3) (* u!5 y!2 y!2 v!4 v!4)) (* (- 1) (* y!2 y!2 v!4 v!4 v!4)) ?x888 ?x899 (* (- 3) (* x!3 x!3 u!5 u!5 u!5 u!5 u!5 y!2)) (* (- 3) (* x!3 x!3 u!5 u!5 u!5 y!2 v!4 v!4)) (* 3 (* x!3 u!5 u!5 u!5 u!5 u!5 y!2 y!2)) (* 6 (* x!3 u!5 u!5 u!5 u!5 y!2 y!2 v!4)) (* 3 (* x!3 u!5 u!5 u!5 y!2 y!2 v!4 v!4)) (* (- 2) (* u!5 u!5 u!5 u!5 y!2 y!2 y!2 v!4)) (* (- 1) (* u!5 u!5 u!5 y!2 y!2 y!2 v!4 v!4)) (* x!3 u!5 u!5 u!5 u!5 y!2 y!2 y!2) (* 3 (* x!3 u!5 u!5 u!5 y!2 y!2 y!2 v!4)) (* 3 (* x!3 u!5 u!5 y!2 y!2 y!2 v!4 v!4)) ?x951 (* (- 3) (* u!5 u!5 u!5 y!2 y!2 y!2 y!2 v!4)) (* (- 1) (* u!5 y!2 y!2 y!2 y!2 v!4 v!4 v!4)))))
 (let (($x867 (= (* ?x976 ?x915) 0)))
 (let (($x900 (<= ?x915 0)))
 (let (($x865 (= ?x915 0)))
 (let ((?x977 (+ (* (- 1) (* x!3 x!3 v!4 v!4 v!4)) (* 3 (* x!3 x!3 x!3 u!5 v!4 v!4 v!4 v!4)) (* (- 3) (* x!3 x!3 y!2 y!2 v!4 v!4 v!4 v!4)) ?x872 (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4) (* 3 (* x!3 x!3 x!3 u!5 u!5 v!4 v!4 v!4)) (* x!3 y!2 y!2 y!2 v!4 v!4 v!4 v!4) ?x899 (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4)) (* 3 (* x!3 x!3 x!3 u!5 y!2 v!4 v!4 v!4)) (* (- 1) (* x!3 x!3 x!3 x!3 u!5 v!4 v!4 v!4)) (* 3 (* x!3 x!3 x!3 y!2 v!4 v!4 v!4 v!4)) (* (- 3) (* x!3 x!3 u!5 y!2 y!2 v!4 v!4 v!4)) ?x951)))
 (let ((?x789 (* ?x977 ?x915)))
 (let (($x884 (= ?x789 0)))
 (let (($x890 (or (not $x867) (not $x884))))
 (let (($x902 (and $x865 $x890)))
 (let ((?x242 (+ (* u!5 x!3) (* v!4 y!2) ?x576 ?x407)))
 (let ((?x114 (* u!5 v!4 v!4 v!4 x!3 y!2 y!2 y!2)))
 (let ((?x478 (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3)))
 (let ((?x263 (* v!4 v!4 v!4 x!3 y!2)))
 (let ((?x226 (+ (* (- 1) (* v!4 v!4 v!4 x!3 x!3)) ?x263 ?x478 ?x114 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3) (* 3 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* 3 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3)) (* v!4 v!4 v!4 v!4 x!3 y!2 y!2 y!2) (* (- 1) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3)) (* 3 (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2)) (* 3 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2)) (* (- 3) (* u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2)) (* (- 3) (* v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2)))))
 (let ((?x935 (+ (* u!5 u!5 u!5 x!3 y!2) (* 3 (* u!5 u!5 v!4 x!3 y!2)) (* 3 (* u!5 v!4 v!4 x!3 y!2)) ?x263 ?x412 (* (- 3) (* u!5 u!5 v!4 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 y!2 y!2)) (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 x!3) (* 2 (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 x!3)) ?x478 (* (- 3) (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 6) (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) (* 3 (* u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* 3 (* u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) ?x737 (* (- 2) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* u!5 u!5 u!5 u!5 x!3 y!2 y!2 y!2) (* 3 (* u!5 u!5 u!5 v!4 x!3 y!2 y!2 y!2)) (* 3 (* u!5 u!5 v!4 v!4 x!3 y!2 y!2 y!2)) ?x114 ?x888 (* (- 3) (* u!5 u!5 u!5 v!4 y!2 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 v!4 v!4 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 v!4 v!4 v!4 y!2 y!2 y!2 y!2)))))
 (let (($x444 (and (= ?x242 0) (or (not (= (* ?x935 ?x242) 0)) (not (= (* ?x226 ?x242) 0))))))
 (let (($x527 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x407 (* (- 1) k!00)))
 (let ((?x576 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x540 (+ ?x33 ?x34 ?x576 ?x407)))
 (let ((?x490 (* u v v v x y y y)))
 (let ((?x246 (* u u u v v x x x)))
 (let ((?x154 (* v v v x y)))
 (let ((?x738 (+ (* (- 1) (* v v v x x)) ?x154 ?x246 ?x490 (* v v v v v x x x) (* 3 (* u v v v v x x x)) (* 3 (* u u v v v x x x)) (* v v v v x y y y) (* (- 1) (* u v v v x x x x)) (* (- 1) (* v v v v x x x x)) (* 3 (* u v v v x x x y)) (* 3 (* v v v v x x x y)) (* (- 3) (* u v v v x x y y)) (* (- 3) (* v v v v x x y y)))))
 (let ((?x577 (+ (* u u u x y) (* 3 (* u u v x y)) (* 3 (* u v v x y)) ?x154 (* (- 1) (* u u u y y)) (* (- 3) (* u u v y y)) (* (- 3) (* u v v y y)) (* (- 1) (* v v v y y)) (* u u u u u x x x) (* 2 (* u u u u v x x x)) ?x246 (* (- 3) (* u u u u u x x y)) (* (- 6) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) (* 3 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 3 (* u u u v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 2) (* u u u u v y y y)) (* (- 1) (* u u u v v y y y)) (* u u u u x y y y) (* 3 (* u u u v x y y y)) (* 3 (* u u v v x y y y)) ?x490 (* (- 1) (* u u u u y y y y)) (* (- 3) (* u u u v y y y y)) (* (- 3) (* u u v v y y y y)) (* (- 1) (* u v v v y y y y)))))
 (and (= ?x540 0) (or (not (= (* ?x577 ?x540) 0)) (not (= (* ?x738 ?x540) 0)))))))))))))) :qid k!29))
 ))
 (let (($x485 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x576 (* (- 1) k!10)))
 (let ((?x308 (+ y (* (- 1) x))))
 (let ((?x84 (* ?x308 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x407 (* (- 1) k!00)))
 (let ((?x528 (+ (* ?x308 x v v v) (* ?x55 ?x55 ?x55 x x x v v) (* ?x55 ?x308 ?x308 ?x308 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x299 (+ x (* (- 1) y))))
 (let ((?x573 (* ?x299 u)))
 (let ((?x488 (+ (* ?x44 ?x44 ?x44 ?x299 y) (* ?x44 ?x44 ?x299 ?x299 ?x299 u u u) (* ?x44 ?x44 ?x44 ?x299 y y y u))))
 (let (($x534 (or (not (= (* ?x488 (+ ?x407 ?x573 ?x45 ?x576)) 0)) (not (= (* ?x528 (+ ?x407 ?x56 ?x84 ?x576)) 0)))))
 (let ((?x572 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x572 0) $x534))))))))))))))) :qid k!29))
 ))
 (let ((?x518 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x407 (* (- 1) k!00)))
 (let ((?x576 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x540 (+ ?x33 ?x34 ?x576 ?x407)))
 (let ((?x490 (* u v v v x y y y)))
 (let ((?x246 (* u u u v v x x x)))
 (let ((?x154 (* v v v x y)))
 (let ((?x738 (+ (* (- 1) (* v v v x x)) ?x154 ?x246 ?x490 (* v v v v v x x x) (* 3 (* u v v v v x x x)) (* 3 (* u u v v v x x x)) (* v v v v x y y y) (* (- 1) (* u v v v x x x x)) (* (- 1) (* v v v v x x x x)) (* 3 (* u v v v x x x y)) (* 3 (* v v v v x x x y)) (* (- 3) (* u v v v x x y y)) (* (- 3) (* v v v v x x y y)))))
 (let ((?x577 (+ (* u u u x y) (* 3 (* u u v x y)) (* 3 (* u v v x y)) ?x154 (* (- 1) (* u u u y y)) (* (- 3) (* u u v y y)) (* (- 3) (* u v v y y)) (* (- 1) (* v v v y y)) (* u u u u u x x x) (* 2 (* u u u u v x x x)) ?x246 (* (- 3) (* u u u u u x x y)) (* (- 6) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) (* 3 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 3 (* u u u v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 2) (* u u u u v y y y)) (* (- 1) (* u u u v v y y y)) (* u u u u x y y y) (* 3 (* u u u v x y y y)) (* 3 (* u u v v x y y y)) ?x490 (* (- 1) (* u u u u y y y y)) (* (- 3) (* u u u v y y y y)) (* (- 3) (* u u v v y y y y)) (* (- 1) (* u v v v y y y y)))))
 (let (($x1046 (and (= ?x540 0) (or (not (= (* ?x577 ?x540) 0)) (not (= (* ?x738 ?x540) 0))))))
 (let ((?x308 (+ y (* (- 1) x))))
 (let ((?x84 (* ?x308 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x528 (+ (* ?x308 x v v v) (* ?x55 ?x55 ?x55 x x x v v) (* ?x55 ?x308 ?x308 ?x308 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x299 (+ x (* (- 1) y))))
 (let ((?x573 (* ?x299 u)))
 (let ((?x488 (+ (* ?x44 ?x44 ?x44 ?x299 y) (* ?x44 ?x44 ?x299 ?x299 ?x299 u u u) (* ?x44 ?x44 ?x44 ?x299 y y y u))))
 (let (($x534 (or (not (= (* ?x488 (+ ?x407 ?x573 ?x45 ?x576)) 0)) (not (= (* ?x528 (+ ?x407 ?x56 ?x84 ?x576)) 0)))))
 (let ((?x572 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x411 (and (= ?x572 0) $x534)))
 (rewrite (= $x411 $x1046)))))))))))))))))))))))))))
 ))
 (let (($x318 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x576 (* (- 1) k!10)))
 (let ((?x308 (+ y (* (- 1) x))))
 (let ((?x84 (* ?x308 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x407 (* (- 1) k!00)))
 (let ((?x528 (+ (* ?x308 x v v v) (* ?x55 ?x55 ?x55 x x x v v) (* ?x55 ?x308 ?x308 ?x308 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x299 (+ x (* (- 1) y))))
 (let ((?x573 (* ?x299 u)))
 (let ((?x488 (+ (* ?x44 ?x44 ?x44 ?x299 y) (* ?x44 ?x44 ?x299 ?x299 ?x299 u u u) (* ?x44 ?x44 ?x44 ?x299 y y y u))))
 (let (($x534 (or (not (= (* ?x488 (+ ?x407 ?x573 ?x45 ?x576)) 0)) (not (= (* ?x528 (+ ?x407 ?x56 ?x84 ?x576)) 0)))))
 (and (= (+ ?x407 (* x u) (* y v) ?x576) 0) $x534)))))))))))))) :qid k!29))
 ))
 (let ((?x659 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x576 (* (- 1) k!10)))
 (let ((?x308 (+ y (* (- 1) x))))
 (let ((?x84 (* ?x308 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x407 (* (- 1) k!00)))
 (let ((?x528 (+ (* ?x308 x v v v) (* ?x55 ?x55 ?x55 x x x v v) (* ?x55 ?x308 ?x308 ?x308 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x299 (+ x (* (- 1) y))))
 (let ((?x573 (* ?x299 u)))
 (let ((?x488 (+ (* ?x44 ?x44 ?x44 ?x299 y) (* ?x44 ?x44 ?x299 ?x299 ?x299 u u u) (* ?x44 ?x44 ?x44 ?x299 y y y u))))
 (let (($x534 (or (not (= (* ?x488 (+ ?x407 ?x573 ?x45 ?x576)) 0)) (not (= (* ?x528 (+ ?x407 ?x56 ?x84 ?x576)) 0)))))
 (let ((?x572 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x411 (and (= ?x572 0) $x534)))
 (let (($x504 (and (= (+ ?x407 (* x u) (* y v) ?x576) 0) $x534)))
 (rewrite (= $x504 $x411)))))))))))))))))))
 ))
 (let (($x328 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x308 (+ y (* (- 1) x))))
 (let ((?x84 (* ?x308 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x528 (+ (* ?x308 x v v v) (* ?x55 ?x55 ?x55 x x x v v) (* ?x55 ?x308 ?x308 ?x308 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x299 (+ x (* (- 1) y))))
 (let ((?x573 (* ?x299 u)))
 (let ((?x488 (+ (* ?x44 ?x44 ?x44 ?x299 y) (* ?x44 ?x44 ?x299 ?x299 ?x299 u u u) (* ?x44 ?x44 ?x44 ?x299 y y y u))))
 (let (($x484 (or (not (= (* ?x488 (+ ?x79 ?x573 ?x45 ?x95)) 0)) (not (= (* ?x528 (+ ?x79 ?x56 ?x84 ?x95)) 0)))))
 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x484))))))))))))))) :qid k!29))
 ))
 (let ((?x707 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x576 (* (- 1) k!10)))
 (let ((?x308 (+ y (* (- 1) x))))
 (let ((?x84 (* ?x308 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x407 (* (- 1) k!00)))
 (let ((?x528 (+ (* ?x308 x v v v) (* ?x55 ?x55 ?x55 x x x v v) (* ?x55 ?x308 ?x308 ?x308 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x299 (+ x (* (- 1) y))))
 (let ((?x573 (* ?x299 u)))
 (let ((?x488 (+ (* ?x44 ?x44 ?x44 ?x299 y) (* ?x44 ?x44 ?x299 ?x299 ?x299 u u u) (* ?x44 ?x44 ?x44 ?x299 y y y u))))
 (let (($x534 (or (not (= (* ?x488 (+ ?x407 ?x573 ?x45 ?x576)) 0)) (not (= (* ?x528 (+ ?x407 ?x56 ?x84 ?x576)) 0)))))
 (let (($x504 (and (= (+ ?x407 (* x u) (* y v) ?x576) 0) $x534)))
 (let ((?x522 (* ?x528 (+ (* (- 1) (* u00 x00)) ?x56 ?x84 (* (- 1) (* v00 y00))))))
 (let ((?x507 (* ?x488 (+ (* (- 1) (* u00 x00)) ?x573 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x684 (* y v)))
 (let ((?x660 (* x u)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let (($x486 (and (= (+ ?x79 ?x660 ?x684 ?x95) 0) (or (not (= ?x507 0)) (not (= ?x522 0))))))
 (rewrite (= $x486 $x504)))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x57 (- y x)))
 (let ((?x55 (+ u v)))
 (let ((?x64 (+ (* v v v x ?x57) (* ?x55 ?x55 ?x55 v v x x x) (* ?x55 v v v x ?x57 ?x57 ?x57))))
 (let ((?x38 (* v00 y00)))
 (let ((?x65 (* (- (+ (* (- 1) u00 x00) (* ?x55 x) (* v ?x57)) ?x38) ?x64)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x51 (+ (* ?x44 ?x44 ?x44 ?x42 y) (* u u u ?x44 ?x44 ?x42 ?x42 ?x42) (* u ?x44 ?x44 ?x44 ?x42 y y y))))
 (let ((?x52 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x51)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x52 0)) (not (= ?x65 0)))))))))))))) :qid k!29))
 ))
 (let ((?x89 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x308 (+ y (* (- 1) x))))
 (let ((?x84 (* ?x308 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x528 (+ (* ?x308 x v v v) (* ?x55 ?x55 ?x55 x x x v v) (* ?x55 ?x308 ?x308 ?x308 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x299 (+ x (* (- 1) y))))
 (let ((?x573 (* ?x299 u)))
 (let ((?x488 (+ (* ?x44 ?x44 ?x44 ?x299 y) (* ?x44 ?x44 ?x299 ?x299 ?x299 u u u) (* ?x44 ?x44 ?x44 ?x299 y y y u))))
 (let (($x484 (or (not (= (* ?x488 (+ ?x79 ?x573 ?x45 ?x95)) 0)) (not (= (* ?x528 (+ ?x79 ?x56 ?x84 ?x95)) 0)))))
 (let (($x486 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x484)))
 (let ((?x57 (- y x)))
 (let ((?x64 (+ (* v v v x ?x57) (* ?x55 ?x55 ?x55 v v x x x) (* ?x55 v v v x ?x57 ?x57 ?x57))))
 (let (($x66 (= (* (- (+ (* (- 1) u00 x00) ?x56 (* v ?x57)) ?x38) ?x64) 0)))
 (let ((?x42 (- x y)))
 (let ((?x51 (+ (* ?x44 ?x44 ?x44 ?x42 y) (* u u u ?x44 ?x44 ?x42 ?x42 ?x42) (* u ?x44 ?x44 ?x44 ?x42 y y y))))
 (let (($x53 (= (* (- (+ (* (- 1) u00 x00) (* u ?x42) ?x45) ?x38) ?x51) 0)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x69 (and $x41 (or (not $x53) (not $x66)))))
 (rewrite (= $x69 $x486))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x317 (mp (mp @x71 (quant-intro (proof-bind ?x89) (= $x70 $x328)) $x328) (rewrite (= $x328 $x328)) $x328)))
 (let ((@x578 (mp (mp @x317 (quant-intro (proof-bind ?x707) (= $x328 $x318)) $x318) (quant-intro (proof-bind ?x659) (= $x318 $x485)) $x485)))
 (let ((@x952 (mp~ (mp @x578 (quant-intro (proof-bind ?x518) (= $x485 $x527)) $x527) (sk (~ $x527 $x444)) $x444)))
 (let ((@x824 (mp @x952 (rewrite (= $x444 $x902)) $x902)))
 (let ((@x843 (and-elim @x824 $x865)))
 (let ((@x863 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x865) $x900)) @x843 $x900)))
 (let (($x903 (>= ?x915 0)))
 (let ((@x877 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x865) $x903)) @x843 $x903)))
 (let (($x244 (>= ?x789 0)))
 (let ((@x904 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x244)) @x877 @x863 false) $x244) @x877 @x863 $x884)))
 (unit-resolution (and-elim @x824 $x890) @x904 ((_ th-lemma arith eq-propagate 0 0 0 0) @x877 @x863 @x877 @x863 $x867) false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        6
 :arith-conflicts           1
 :arith-eq-adapter          3
 :arith-fixed-eqs           3
 :arith-num-rows            3
 :arith-pseudo-nonlinear    4
 :arith-tableau-max-columns 59
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                3
 :eliminated-applications   2
 :max-memory                3.63
 :memory                    3.19
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1082955
 :num-checks                1
 :propagations              6
 :rlimit-count              3691
 :time                      0.01
 :total-time                0.01)
