unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(proof
(let ((?x433 (to_real z!0)))
 (let ((?x428 (to_real x!2)))
 (let ((?x427 (to_real y!1)))
 (let ((?x414 (* ?x427 ?x427 ?x428 ?x428 ?x433)))
 (let ((?x877 (+ (* (/ 1.0 4.0) (* ?x427 ?x427 ?x427 ?x428 ?x433 ?x433)) (* 2.0 (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x428)) (* 6.0 (* ?x428 ?x428 ?x428 ?x428 ?x433 ?x433)) (* 2.0 (* ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)) (* (/ 1.0 4.0) (* ?x428 ?x428 ?x433)) (* (- 2.0) (* ?x428 ?x428 ?x428)) (* 6.0 (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x433)) (* (- (/ 3.0 4.0)) (* ?x427 ?x428 ?x433 ?x433)) (* (/ 1.0 4.0) (* ?x427 ?x427 ?x433 ?x433 ?x433)) (* (- (/ 1.0 2.0)) (* ?x427 ?x433 ?x433 ?x433)) (* 6.0 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x428 ?x433 ?x433)) (* 2.0 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)) (* (/ 1.0 4.0) (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x428)) (* (/ 3.0 2.0) (* ?x427 ?x427 ?x428 ?x428 ?x428)) (* (/ 1.0 4.0) (* ?x427 ?x428 ?x428 ?x428)) (* (- 12.0) (* ?x427 ?x428 ?x428 ?x428 ?x428 ?x433 ?x433)) (* (/ 1.0 2.0) (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x433)) (* 2.0 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x428)) (* (- 12.0) (* ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x433)) (* (- 4.0) (* ?x427 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)) (* (/ 1.0 2.0) (* ?x428 ?x433 ?x433)) (* 6.0 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x433)) (* (/ 1.0 4.0) (* ?x433 ?x433 ?x433)) (* (- 4.0) (* ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x428)) (* (- (/ 3.0 4.0)) ?x414))))
 (let (($x1125 (<= ?x877 0.0)))
 (let ((?x1151 (* (/ 3.0 4.0) ?x414)))
 (let ((?x409 (* ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x428)))
 (let ((?x303 (* 4.0 ?x409)))
 (let ((?x309 (* ?x433 ?x433 ?x433)))
 (let ((?x245 (* (- (/ 1.0 4.0)) ?x309)))
 (let ((?x286 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x433)))
 (let ((?x1713 (* (- 6.0) ?x286)))
 (let ((?x266 (* ?x428 ?x433 ?x433)))
 (let ((?x454 (* (- (/ 1.0 2.0)) ?x266)))
 (let ((?x260 (* ?x427 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)))
 (let ((?x1478 (* 4.0 ?x260)))
 (let ((?x231 (* ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x433)))
 (let ((?x1711 (* 12.0 ?x231)))
 (let ((?x230 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x428 ?x428 ?x428)))
 (let ((?x410 (* (- 2.0) ?x230)))
 (let ((?x207 (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x433)))
 (let ((?x1156 (* (- (/ 1.0 2.0)) ?x207)))
 (let ((?x1704 (* ?x427 ?x428 ?x428 ?x428 ?x428 ?x433 ?x433)))
 (let ((?x1113 (* 12.0 ?x1704)))
 (let ((?x1560 (* ?x427 ?x428 ?x428 ?x428)))
 (let ((?x214 (* (- (/ 1.0 4.0)) ?x1560)))
 (let ((?x1555 (* ?x427 ?x427 ?x428 ?x428 ?x428)))
 (let ((?x198 (* (- (/ 3.0 2.0)) ?x1555)))
 (let ((?x1477 (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x428)))
 (let ((?x1557 (* (- (/ 1.0 4.0)) ?x1477)))
 (let ((?x1291 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)))
 (let ((?x1007 (* (- 2.0) ?x1291)))
 (let ((?x1261 (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x428 ?x433 ?x433)))
 (let ((?x1365 (* (- 6.0) ?x1261)))
 (let ((?x1159 (* ?x427 ?x433 ?x433 ?x433)))
 (let ((?x1163 (* (/ 1.0 2.0) ?x1159)))
 (let ((?x1158 (* ?x427 ?x427 ?x433 ?x433 ?x433)))
 (let ((?x1169 (* (- (/ 1.0 4.0)) ?x1158)))
 (let ((?x1096 (* ?x427 ?x428 ?x433 ?x433)))
 (let ((?x1157 (* (/ 3.0 4.0) ?x1096)))
 (let ((?x839 (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x433)))
 (let ((?x616 (* (- 6.0) ?x839)))
 (let ((?x451 (* ?x428 ?x428 ?x428)))
 (let ((?x450 (* 2.0 ?x451)))
 (let ((?x442 (* ?x428 ?x428 ?x433)))
 (let ((?x391 (* (- (/ 1.0 4.0)) ?x442)))
 (let ((?x438 (* ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)))
 (let ((?x264 (* (- 2.0) ?x438)))
 (let ((?x436 (* ?x428 ?x428 ?x428 ?x428 ?x433 ?x433)))
 (let ((?x435 (* (- 6.0) ?x436)))
 (let ((?x421 (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x428)))
 (let ((?x425 (* (- 2.0) ?x421)))
 (let ((?x416 (* ?x427 ?x427 ?x427 ?x428 ?x433 ?x433)))
 (let ((?x1160 (* (- (/ 1.0 4.0)) ?x416)))
 (let ((?x228 (+ ?x1160 ?x425 ?x435 ?x264 ?x391 ?x450 ?x616 ?x1157 ?x1169 ?x1163 ?x1365 ?x1007 ?x1557 ?x198 ?x214 ?x1113 ?x1156 ?x410 ?x1711 ?x1478 ?x454 ?x1713 ?x245 ?x303 ?x1151)))
 (let (($x705 (>= ?x228 0.0)))
 (let (($x323 (not $x705)))
 (let (($x322 (= ?x228 0.0)))
 (let (($x248 (not $x322)))
 (let ((?x1101 (+ ?x1156 ?x410 ?x1711 ?x1478 ?x454 ?x1713 ?x245 ?x303 ?x1151 ?x1160 ?x425 ?x435 ?x264 ?x391 ?x450 ?x616 ?x1157 ?x1169 ?x1163 ?x1365 ?x1007 ?x1557 ?x198 ?x214 ?x1113)))
 (let ((?x408 (* ?x427 ?x428)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x694 (* (+ ?x206 ?x126 ?x408 ?x433) ?x1101)))
 (let (($x288 (= ?x694 0.0)))
 (let (($x689 (not $x288)))
 (let ((?x1038 (+ (* 2.0 (* ?x115 ?x119 ?x427 ?x427 ?x428 ?x428 ?x428)) (* (- 2.0) (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433 ?x433)) (* 4.0 (* ?x115 ?x119 ?x427 ?x428 ?x428 ?x428)) (* (- (/ 1.0 2.0)) (* ?x427 ?x427 ?x427 ?x428 ?x433 ?x433 ?x433)) (* (- 2.0) (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x433)) (* (/ 1.0 4.0) (* ?x48 ?x427 ?x427 ?x427 ?x428 ?x433 ?x433)) (* (/ 1.0 4.0) (* ?x115 ?x119 ?x427 ?x427 ?x433 ?x433 ?x433)) (* (- 4.0) (* ?x427 ?x427 ?x428 ?x428 ?x428 ?x428)) (* (/ 1.0 4.0) (* ?x48 ?x427 ?x427 ?x433 ?x433 ?x433)) (* (- 2.0) (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)) (* (- 4.0) (* ?x427 ?x428 ?x428 ?x428 ?x433)) (* (- 2.0) (* ?x427 ?x427 ?x427 ?x428 ?x428 ?x428 ?x428)) (* 4.0 (* ?x48 ?x427 ?x428 ?x428 ?x428)) (* (- (/ 1.0 4.0)) (* ?x427 ?x427 ?x427 ?x427 ?x428 ?x428 ?x433 ?x433)) (* (- (/ 1.0 4.0)) (* ?x427 ?x427 ?x433 ?x433 ?x433 ?x433)) (* (/ 1.0 4.0) (* ?x115 ?x119 ?x427 ?x427 ?x427 ?x428 ?x433 ?x433)) (* 2.0 (* ?x48 ?x427 ?x427 ?x428 ?x428 ?x428)) (* 2.0 (* ?x115 ?x119 ?x427 ?x427 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)) (* 2.0 (* ?x48 ?x427 ?x427 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433)))))
 (let (($x1056 (= ?x1038 0.0)))
 (let (($x499 (= 0.0 ?x1038)))
 (let (($x274 (<= ?x1038 0.0)))
 (let ((?x666 (+ ?x126 (to_real (* x00 y00)))))
 (let (($x1166 (>= ?x666 0.0)))
 (let (($x384 (= 0.0 ?x666)))
 (let ((@x1189 (symm (commutativity (= $x384 (= ?x666 0.0))) (= (= ?x666 0.0) $x384))))
 (let ((@x1219 (unit-resolution (hypothesis (not $x384)) (mp ((_ th-lemma arith) (= ?x666 0.0)) @x1189 $x384) false)))
 (let ((@x1215 (lemma @x1219 $x384)))
 (let ((@x393 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x1166)) @x1215 $x1166)))
 (let (($x370 (<= ?x666 0.0)))
 (let ((@x1016 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x370)) @x1215 $x370)))
 (let ((?x93 (* x00 y00)))
 (let ((?x518 (+ z00 ?x93 (* (- 1) (* x!2 y!1)) (* (- 1) z!0))))
 (let (($x1218 (>= ?x518 0)))
 (let (($x209 (= 0 ?x518)))
 (let ((@x1024 (symm (commutativity (= $x209 (= ?x518 0))) (= (= ?x518 0) $x209))))
 (let (($x407 (= ?x518 0)))
 (let (($x1217 (or $x689 (not $x1056))))
 (let (($x1556 (and $x407 $x1217)))
 (let ((?x259 (+ (* 2.0 (* ?x428 ?x428 ?x428 ?x433 ?x433 ?x433 ?x433 ?x427 ?x427)) (* (- 2.0) (* ?x428 ?x428 ?x428 ?x433 ?x433 ?x433 ?x48 ?x427 ?x427)) (* (- 2.0) (* ?x428 ?x428 ?x428 ?x433 ?x433 ?x433 ?x427 ?x427 ?x115 ?x119)) (* 2.0 (* ?x428 ?x428 ?x428 ?x428 ?x433 ?x433 ?x433 ?x427 ?x427 ?x427)) (* 2.0 (* ?x428 ?x428 ?x428 ?x433 ?x427 ?x427)) (* (- 2.0) (* ?x428 ?x428 ?x428 ?x48 ?x427 ?x427)) (* (- 2.0) (* ?x428 ?x428 ?x428 ?x427 ?x427 ?x115 ?x119)) (* 2.0 (* ?x428 ?x428 ?x428 ?x428 ?x427 ?x427 ?x427)) (* 4.0 (* ?x428 ?x428 ?x428 ?x433 ?x427)) (* (- 4.0) (* ?x428 ?x428 ?x428 ?x48 ?x427)) (* (- 4.0) (* ?x428 ?x428 ?x428 ?x427 ?x115 ?x119)) (* 4.0 (* ?x428 ?x428 ?x428 ?x428 ?x427 ?x427)) (* (/ 1.0 2.0) (* ?x428 ?x433 ?x433 ?x433 ?x427 ?x427 ?x427)) (* (- (/ 1.0 4.0)) (* ?x428 ?x433 ?x433 ?x48 ?x427 ?x427 ?x427)) (* (- (/ 1.0 4.0)) (* ?x428 ?x433 ?x433 ?x427 ?x427 ?x427 ?x115 ?x119)) (* (/ 1.0 4.0) (* ?x428 ?x428 ?x433 ?x433 ?x427 ?x427 ?x427 ?x427)) (* (/ 1.0 4.0) (* ?x433 ?x433 ?x433 ?x433 ?x427 ?x427)) (* (- (/ 1.0 4.0)) (* ?x433 ?x433 ?x433 ?x48 ?x427 ?x427)) (* (- (/ 1.0 4.0)) (* ?x433 ?x433 ?x433 ?x427 ?x427 ?x115 ?x119)))))
 (let ((?x461 (+ ?x425 (* 4.0 (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x428 ?x427)) (* (- 2.0) (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x428 ?x427 ?x427)) ?x616 (* 12.0 (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x433 ?x427)) (* (- 6.0) (* ?x428 ?x428 ?x428 ?x428 ?x428 ?x433 ?x427 ?x427)) ?x435 (* 12.0 (* ?x428 ?x428 ?x428 ?x428 ?x433 ?x433 ?x427)) (* (- 6.0) (* ?x428 ?x428 ?x428 ?x428 ?x433 ?x433 ?x427 ?x427)) ?x264 (* 4.0 (* ?x428 ?x428 ?x428 ?x433 ?x433 ?x433 ?x427)) (* (- 2.0) (* ?x428 ?x428 ?x428 ?x433 ?x433 ?x433 ?x427 ?x427)) ?x391 (* (- (/ 1.0 4.0)) (* ?x428 ?x428 ?x428 ?x427 ?x427 ?x427)) (* (- (/ 3.0 2.0)) (* ?x428 ?x428 ?x428 ?x427 ?x427)) (* (- (/ 1.0 4.0)) (* ?x428 ?x428 ?x428 ?x427)) ?x450 (* (/ 3.0 4.0) (* ?x428 ?x428 ?x433 ?x427 ?x427)) (* (- (/ 1.0 2.0)) (* ?x428 ?x428 ?x433 ?x427 ?x427 ?x427)) ?x454 (* (/ 3.0 4.0) (* ?x428 ?x433 ?x433 ?x427)) (* (- (/ 1.0 4.0)) (* ?x428 ?x433 ?x433 ?x427 ?x427 ?x427)) ?x245 (* (/ 1.0 2.0) (* ?x433 ?x433 ?x433 ?x427)) (* (- (/ 1.0 4.0)) (* ?x433 ?x433 ?x433 ?x427 ?x427)))))
 (let (($x498 (or (not (= (* (+ ?x433 ?x206 ?x126 (* ?x428 ?x427)) ?x461) 0.0)) (not (= ?x259 0.0)))))
 (let (($x302 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x93)) 0) $x498)))
 (let (($x603 (exists ((x Int) (y Int) (z Int) )(! (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x66 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x1814 (* (/ 1.0 4.0) (* (to_real x) (to_real x) ?x46 ?x46 ?x66 ?x66 ?x66 ?x66))))
 (let ((?x1812 (* (- (/ 1.0 4.0)) (* (to_real x) ?x46 ?x46 (to_real z00) ?x66 ?x66 ?x66))))
 (let ((?x43 (to_real x)))
 (let ((?x1800 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x66 ?x66))))
 (let ((?x1818 (+ (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x66 ?x66)) ?x1800 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66 ?x66 ?x115 ?x119)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66 ?x66 ?x66)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x66 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 (to_real z00) ?x66 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x66 ?x66 ?x115 ?x119)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x66 ?x66 ?x66)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x66)) (* (- 4.0) (* ?x43 ?x43 ?x43 (to_real z00) ?x66)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x66 ?x115 ?x119)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x66 ?x66)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x66 ?x66 ?x66)) ?x1812 (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x66 ?x66 ?x66 ?x115 ?x119)) ?x1814 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x46 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 (to_real z00) ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66 ?x115 ?x119)))))
 (let (($x1824 (not (= ?x1818 0.0))))
 (let ((?x1476 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66))))
 (let ((?x1497 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x66 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x66 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x66 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x46)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x43 ?x66 ?x66 ?x66)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x43 ?x66)) (* 2.0 (* ?x43 ?x43 ?x43)) (* (/ 3.0 4.0) (* ?x43 ?x43 ?x46 ?x66 ?x66)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x66 ?x66 ?x66)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46)) (* (/ 3.0 4.0) (* ?x43 ?x46 ?x46 ?x66)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x66 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x66)) ?x1476)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let (($x1036 (or (not (= (* (+ ?x46 ?x206 ?x126 (* ?x43 ?x66)) ?x1497) 0.0)) $x1824)))
 (let (($x121 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x121 $x1036))))))))))))))))))) :qid k!28))
 ))
 (let (($x868 (exists ((x Int) (y Int) (z Int) )(! (let ((?x66 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x1476 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66))))
 (let ((?x43 (to_real x)))
 (let ((?x1046 (+ (* (- 2.0) (* ?x46 ?x46 ?x46 ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x66 ?x66 ?x66 ?x43)) (* (- 2.0) (* ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- 4.0) (* ?x66 ?x43 ?x43 ?x43)) ?x1476)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x66)))
 (let ((?x660 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x761 (+ ?x46 ?x43)))
 (let ((?x847 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x761 ?x761 ?x761 ?x660 ?x660)) (* (- 2.0) (* ?x43 ?x761 ?x761 ?x660 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660)) (* (- 1.0) (* ?x761 ?x761 ?x761 ?x660 ?x660)))))
 (let (($x769 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x660)) ?x46 ?x43 ?x206) ?x847) 0.0)))
 (let (($x797 (or (not $x769) (not (= (* (+ ?x126 (* ?x66 ?x43) ?x46 ?x206) ?x1046) 0.0)))))
 (let (($x762 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x762 $x797))))))))))))))))))) :qid k!28))
 ))
 (let ((?x693 (lambda ((x Int) (y Int) (z Int) )(let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x66 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x1814 (* (/ 1.0 4.0) (* (to_real x) (to_real x) ?x46 ?x46 ?x66 ?x66 ?x66 ?x66))))
 (let ((?x1812 (* (- (/ 1.0 4.0)) (* (to_real x) ?x46 ?x46 (to_real z00) ?x66 ?x66 ?x66))))
 (let ((?x43 (to_real x)))
 (let ((?x1800 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x66 ?x66))))
 (let ((?x1818 (+ (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x66 ?x66)) ?x1800 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66 ?x66 ?x115 ?x119)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66 ?x66 ?x66)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x66 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 (to_real z00) ?x66 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x66 ?x66 ?x115 ?x119)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x66 ?x66 ?x66)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x66)) (* (- 4.0) (* ?x43 ?x43 ?x43 (to_real z00) ?x66)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x66 ?x115 ?x119)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x66 ?x66)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x66 ?x66 ?x66)) ?x1812 (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x66 ?x66 ?x66 ?x115 ?x119)) ?x1814 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x46 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 (to_real z00) ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66 ?x115 ?x119)))))
 (let (($x1824 (not (= ?x1818 0.0))))
 (let ((?x1476 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66))))
 (let ((?x1497 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x66 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x66 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x66)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x66 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x46)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x43 ?x66 ?x66 ?x66)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x43 ?x66)) (* 2.0 (* ?x43 ?x43 ?x43)) (* (/ 3.0 4.0) (* ?x43 ?x43 ?x46 ?x66 ?x66)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x66 ?x66 ?x66)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46)) (* (/ 3.0 4.0) (* ?x43 ?x46 ?x46 ?x66)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x66 ?x66 ?x66)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x66)) ?x1476)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let (($x1036 (or (not (= (* (+ ?x46 ?x206 ?x126 (* ?x43 ?x66)) ?x1497) 0.0)) $x1824)))
 (let (($x121 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x781 (and $x121 $x1036)))
 (let ((?x1046 (+ (* (- 2.0) (* ?x46 ?x46 ?x46 ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x66 ?x66 ?x66 ?x43)) (* (- 2.0) (* ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- 4.0) (* ?x66 ?x43 ?x43 ?x43)) ?x1476)))
 (let ((?x171 (* (/ 1.0 2.0) ?x66)))
 (let ((?x660 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x761 (+ ?x46 ?x43)))
 (let ((?x847 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x761 ?x761 ?x761 ?x660 ?x660)) (* (- 2.0) (* ?x43 ?x761 ?x761 ?x660 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660)) (* (- 1.0) (* ?x761 ?x761 ?x761 ?x660 ?x660)))))
 (let (($x769 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x660)) ?x46 ?x43 ?x206) ?x847) 0.0)))
 (let (($x797 (or (not $x769) (not (= (* (+ ?x126 (* ?x66 ?x43) ?x46 ?x206) ?x1046) 0.0)))))
 (let (($x762 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x667 (and $x762 $x797)))
 (rewrite (= $x667 $x781)))))))))))))))))))))))))))))))
 ))
 (let (($x850 (exists ((x Int) (y Int) (z Int) )(! (let ((?x66 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x1476 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66))))
 (let ((?x43 (to_real x)))
 (let ((?x1046 (+ (* (- 2.0) (* ?x46 ?x46 ?x46 ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x66 ?x66 ?x66 ?x43)) (* (- 2.0) (* ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- 4.0) (* ?x66 ?x43 ?x43 ?x43)) ?x1476)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x66)))
 (let ((?x660 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x761 (+ ?x46 ?x43)))
 (let ((?x847 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x761 ?x761 ?x761 ?x660 ?x660)) (* (- 2.0) (* ?x43 ?x761 ?x761 ?x660 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660)) (* (- 1.0) (* ?x761 ?x761 ?x761 ?x660 ?x660)))))
 (let (($x769 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x660)) ?x46 ?x43 ?x206) ?x847) 0.0)))
 (let (($x797 (or (not $x769) (not (= (* (+ ?x126 (* ?x66 ?x43) ?x46 ?x206) ?x1046) 0.0)))))
 (let (($x553 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x553 $x797))))))))))))))))))) :qid k!28))
 ))
 (let ((?x545 (lambda ((x Int) (y Int) (z Int) )(let ((?x66 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x1476 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66))))
 (let ((?x43 (to_real x)))
 (let ((?x1046 (+ (* (- 2.0) (* ?x46 ?x46 ?x46 ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x66 ?x66 ?x66 ?x43)) (* (- 2.0) (* ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- 4.0) (* ?x66 ?x43 ?x43 ?x43)) ?x1476)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x66)))
 (let ((?x660 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x761 (+ ?x46 ?x43)))
 (let ((?x847 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x761 ?x761 ?x761 ?x660 ?x660)) (* (- 2.0) (* ?x43 ?x761 ?x761 ?x660 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660)) (* (- 1.0) (* ?x761 ?x761 ?x761 ?x660 ?x660)))))
 (let (($x769 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x660)) ?x46 ?x43 ?x206) ?x847) 0.0)))
 (let (($x797 (or (not $x769) (not (= (* (+ ?x126 (* ?x66 ?x43) ?x46 ?x206) ?x1046) 0.0)))))
 (let (($x762 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x667 (and $x762 $x797)))
 (let (($x553 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x812 (and $x553 $x797)))
 (rewrite (= $x812 $x667))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((x Int) (y Int) (z Int) )(! (let ((?x63 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x66 (to_real y)))
 (let ((?x67 (/ ?x66 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x28 (- 1)))
 (let ((?x51 (to_real ?x28)))
 (let ((?x76 (- (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x67 ?x67 ?x46 ?x46 ?x46) (* ?x41 ?x43 ?x67 ?x67 ?x67 ?x46 ?x46))))
 (let ((?x78 (- (- ?x76 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x67 ?x67)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x67))))
 (let ((?x48 (to_real z00)))
 (let ((?x80 (* (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x67) ?x46) ?x48) (- ?x78 (* ?x67 ?x67 ?x46 ?x46 ?x46)))))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x58 (- (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x52 ?x52 ?x52) (* ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52))))
 (let ((?x60 (- (- ?x58 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42))))
 (let ((?x49 (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48)))
 (let (($x83 (or (not (= (* ?x49 (- ?x60 (* ?x42 ?x42 ?x52 ?x52 ?x52))) ?x63)) (not (= ?x80 ?x63)))))
 (and (= (- (+ (* ?x28 x00 y00) (* x y) z) z00) 0) $x83))))))))))))))))))) :qid k!28))
 ))
 (let ((?x770 (lambda ((x Int) (y Int) (z Int) )(let ((?x66 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x1476 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x66 ?x66))))
 (let ((?x43 (to_real x)))
 (let ((?x1046 (+ (* (- 2.0) (* ?x46 ?x46 ?x46 ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x66 ?x66 ?x66 ?x43)) (* (- 2.0) (* ?x66 ?x66 ?x43 ?x43 ?x43)) (* (- 4.0) (* ?x66 ?x43 ?x43 ?x43)) ?x1476)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x66)))
 (let ((?x660 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x761 (+ ?x46 ?x43)))
 (let ((?x847 (+ (* (- 8.0) (* ?x43 ?x43 ?x43 ?x761 ?x761 ?x761 ?x660 ?x660)) (* (- 2.0) (* ?x43 ?x761 ?x761 ?x660 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660 ?x660)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x660)) (* (- 1.0) (* ?x761 ?x761 ?x761 ?x660 ?x660)))))
 (let (($x769 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x660)) ?x46 ?x43 ?x206) ?x847) 0.0)))
 (let (($x797 (or (not $x769) (not (= (* (+ ?x126 (* ?x66 ?x43) ?x46 ?x206) ?x1046) 0.0)))))
 (let (($x553 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x812 (and $x553 $x797)))
 (let ((?x63 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x67 (/ ?x66 ?x41)))
 (let ((?x28 (- 1)))
 (let ((?x51 (to_real ?x28)))
 (let ((?x76 (- (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x67 ?x67 ?x46 ?x46 ?x46) (* ?x41 ?x43 ?x67 ?x67 ?x67 ?x46 ?x46))))
 (let ((?x78 (- (- ?x76 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x67 ?x67)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x67))))
 (let ((?x80 (* (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x67) ?x46) ?x48) (- ?x78 (* ?x67 ?x67 ?x46 ?x46 ?x46)))))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x58 (- (* ?x51 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x52 ?x52 ?x52) (* ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52))))
 (let ((?x60 (- (- ?x58 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42))))
 (let ((?x49 (- (+ (to_real (* ?x28 x00 y00)) (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48)))
 (let (($x83 (or (not (= (* ?x49 (- ?x60 (* ?x42 ?x42 ?x52 ?x52 ?x52))) ?x63)) (not (= ?x80 ?x63)))))
 (let (($x84 (and (= (- (+ (* ?x28 x00 y00) (* x y) z) z00) 0) $x83)))
 (rewrite (= $x84 $x812)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x780 (mp (mp @x86 (quant-intro (proof-bind ?x770) (= $x85 $x850)) $x850) (rewrite (= $x850 $x850)) $x850)))
 (let ((@x699 (mp (mp @x780 (quant-intro (proof-bind ?x545) (= $x850 $x868)) $x868) (quant-intro (proof-bind ?x693) (= $x868 $x603)) $x603)))
 (let ((@x1272 (mp (mp~ @x699 (sk (~ $x603 $x302)) $x302) (rewrite (= $x302 $x1556)) $x1556)))
 (let ((@x1304 (mp (and-elim @x1272 $x407) @x1024 $x209)))
 (let ((@x1088 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x209) $x1218)) @x1304 $x1218)))
 (let (($x1126 (<= ?x518 0)))
 (let ((@x1310 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x209) $x1126)) @x1304 $x1126)))
 (let ((@x377 (unit-resolution ((_ th-lemma arith) (or $x274 (not $x1218) (not $x1166) (not $x1126) (not $x370))) @x1310 @x1088 (hypothesis (not $x274)) @x1016 @x393 false)))
 (let (($x502 (>= ?x1038 0.0)))
 (let ((?x717 (* (- 1.0) ?x408)))
 (let ((?x561 (+ (to_real (* x!2 y!1)) ?x717)))
 (let (($x1274 (= 0.0 ?x561)))
 (let (($x505 (= ?x561 0.0)))
 (let ((@x1100 (lemma (unit-resolution ((_ th-lemma arith) $x505) (hypothesis (not $x505)) false) $x505)))
 (let ((@x1155 (unit-resolution (hypothesis (not $x1274)) (symm (hypothesis $x505) $x1274) false)))
 (let ((@x418 (unit-resolution (lemma @x1155 (or (not $x505) $x1274)) @x1100 $x1274)))
 (let (($x656 (>= ?x561 0.0)))
 (let ((@x776 (hypothesis $x1274)))
 (let ((@x535 ((_ th-lemma arith triangle-eq) (or (not $x1274) $x656))))
 (let (($x733 (<= ?x561 0.0)))
 (let ((@x893 ((_ th-lemma arith triangle-eq) (or (not $x1274) $x733))))
 (let ((@x515 (unit-resolution ((_ th-lemma arith) (or (not $x1218) (not $x1126) $x502 (not $x733) (not $x656))) @x1310 @x1088 (hypothesis (not $x502)) (unit-resolution @x893 @x776 $x733) (unit-resolution @x535 @x776 $x656) false)))
 (let ((@x1132 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x499 (not $x274) (not $x502))) (unit-resolution (lemma @x515 (or (not $x1274) $x502)) @x418 $x502) (or $x499 (not $x274)))))
 (let ((@x1282 (mp (unit-resolution @x1132 (lemma @x377 $x274) $x499) (commutativity (= $x499 $x1056)) $x1056)))
 (let ((@x1279 (unit-resolution (and-elim @x1272 $x1217) @x1282 $x689)))
 (let ((@x1277 (unit-resolution ((_ th-lemma arith) (or $x248 $x288)) @x1279 (hypothesis $x322) false)))
 (let ((@x333 (lemma @x1277 $x248)))
 (let (($x707 (<= ?x228 0.0)))
 (let (($x883 (>= ?x877 0.0)))
 (let (($x297 (not $x883)))
 (let ((@x1247 (hypothesis $x297)))
 (let ((?x1400 (+ ?x120 (* (- 1.0) ?x433) ?x48 ?x717)))
 (let (($x1114 (<= ?x1400 0.0)))
 (let ((@x1237 ((_ th-lemma arith) (hypothesis (not $x1114)) (unit-resolution @x893 @x418 $x733) @x1310 @x393 false)))
 (let ((@x1122 (lemma @x1237 $x1114)))
 (let (($x1550 (>= ?x694 0.0)))
 (let (($x1290 (not $x1550)))
 (let (($x1320 (<= ?x694 0.0)))
 (let (($x1109 (not $x1320)))
 (let ((@x1241 (hypothesis $x1109)))
 (let (($x236 (>= ?x1400 0.0)))
 (let ((@x420 ((_ th-lemma arith) (unit-resolution @x535 @x418 $x656) @x1088 (hypothesis (not $x236)) (hypothesis $x370) false)))
 (let ((@x1244 (unit-resolution (lemma @x420 (or (not $x370) $x236)) @x1016 $x236)))
 (let ((@x1245 (unit-resolution ((_ th-lemma arith) (or (not $x236) $x883 $x1320)) @x1241 @x1244 @x1247 false)))
 (let (($x1231 (not $x707)))
 (let ((@x1128 ((_ th-lemma arith) (hypothesis $x323) (unit-resolution ((_ th-lemma arith) (or (not $x1114) $x1125 $x1320)) @x1241 @x1122 $x1125) false)))
 (let ((@x1283 ((_ th-lemma arith triangle-eq) (or $x322 $x1231 $x323))))
 (let ((@x1286 (unit-resolution @x1283 (unit-resolution (lemma @x1128 (or $x705 $x1320)) @x1241 $x705) @x333 $x1231)))
 (let ((@x1196 (lemma ((_ th-lemma arith) (hypothesis $x1231) (hypothesis $x883) false) (or $x297 $x707))))
 (let ((@x1287 (unit-resolution @x1196 @x1286 (unit-resolution (lemma @x1245 (or $x883 $x1320)) @x1241 $x883) false)))
 (let (($x1300 (= 0.0 ?x694)))
 (let (($x1294 (not $x1300)))
 (let ((@x336 (monotonicity (symm (commutativity (= $x1300 $x288)) (= $x288 $x1300)) (= $x689 $x1294))))
 (let ((@x348 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1300 $x1109 $x1290)) (mp @x1279 @x336 $x1294) (or $x1109 $x1290))))
 (let ((@x1306 (unit-resolution @x348 (lemma @x1287 $x1320) $x1290)))
 (let ((@x1308 (unit-resolution ((_ th-lemma arith) (or (not $x1114) $x883 $x1550)) @x1306 @x1122 @x1247 false)))
 (let ((@x350 (unit-resolution @x1283 (unit-resolution @x1196 (lemma @x1308 $x883) $x707) @x333 $x323)))
 (unit-resolution ((_ th-lemma arith) (or (not $x236) $x1125 $x1550)) @x1306 @x1244 (lemma ((_ th-lemma arith) @x350 (hypothesis $x1125) false) (not $x1125)) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      55
 :arith-eq-adapter               66
 :arith-bound-propagations-cheap 77
 :arith-bound-propagations-lp    10
 :arith-conflicts                213
 :arith-diseq                    66
 :arith-gcd-calls                11
 :arith-grobner-calls            10
 :arith-grobner-conflicts        2
 :arith-horner-calls             10
 :arith-lower                    132
 :arith-make-feasible            120
 :arith-max-columns              85
 :arith-max-rows                 18
 :arith-nla-explanations         96
 :arith-nla-lemmas               207
 :arith-patches                  11
 :arith-patches-success          11
 :arith-propagations             77
 :arith-upper                    147
 :conflicts                      23
 :decisions                      414
 :del-clause                     266
 :final-checks                   70
 :max-memory                     4.68
 :memory                         3.28
 :mk-bool-var                    484
 :mk-clause                      368
 :num-allocs                     14306635
 :num-checks                     1
 :propagations                   416
 :rlimit-count                   13192
 :time                           0.05
 :total-time                     0.06)
