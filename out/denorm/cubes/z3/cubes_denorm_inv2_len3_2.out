unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x185 (* 6 (* c!3 k!2))))
 (let ((?x424 (* k!2 k!2)))
 (let ((?x457 (* 6 ?x424)))
 (let ((?x280 (+ c!3 k!2)))
 (let ((?x111 (+ 6 m!1)))
 (let ((?x99 (+ 1 n!0)))
 (let ((?x614 (+ (- 1) (* m!1 m!1 k!2) (* 6 (* m!1 c!3)) (* m!1 k!2 k!2) (* m!1 m!1 c!3) (* (- 1) (* ?x99 ?x99 ?x99 ?x111 (+ m!1 k!2) ?x280 ?x280 ?x280)) (* 6 (* m!1 k!2)) (* m!1 c!3 k!2) ?x457 ?x185)))
 (let (($x1067 (<= ?x614 0)))
 (let ((?x458 (* n!0 k!2)))
 (let ((?x225 (* (- 1) k!2)))
 (let ((?x227 (+ (* 2 n!0) (* (- 3) c!3) ?x225 ?x458)))
 (let (($x191 (<= ?x227 (- 1))))
 (let (($x154 (= ?x227 (- 1))))
 (let ((?x287 (* (- 9) (* n!0 c!3))))
 (let ((?x322 (* m!1 m!1)))
 (let ((?x396 (* (- 32) k!2)))
 (let ((?x285 (* (- 27) c!3)))
 (let ((?x392 (* (- 5) m!1)))
 (let ((?x405 (* 9 n!0)))
 (let ((?x213 (+ 13 ?x405 ?x392 ?x285 ?x396 ?x322 ?x287 (* 2 (* m!1 k!2)) ?x424 (* (- 9) ?x458))))
 (let ((?x158 (* ?x614 ?x213)))
 (let (($x120 (= ?x158 0)))
 (let (($x157 (not $x120)))
 (let ((?x376 (+ (* 3 n!0) ?x225 (* 3 (* n!0 n!0)))))
 (let (($x378 (= ?x376 (- 1))))
 (let ((?x288 (+ ?x405 (* (- 18) c!3) (* (- 5) k!2) ?x287 ?x424)))
 (let (($x289 (= ?x288 (- 4))))
 (let ((?x324 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x325 (= ?x324 (- 6))))
 (let (($x105 (and $x325 $x289 $x154 $x378 $x157)))
 (let ((?x172 (+ 13 ?x285 ?x396 ?x392 ?x405 ?x424 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x322)))
 (let ((?x404 (+ (- 1) ?x457 (* 6 (* k!2 m!1)) (* c!3 k!2 m!1) (* k!2 k!2 m!1) (* c!3 m!1 m!1) (* k!2 m!1 m!1) ?x185 (* 6 (* c!3 m!1)) (* (- 1) (* ?x99 ?x99 ?x99 ?x111 (+ k!2 m!1) ?x280 ?x280 ?x280)))))
 (let (($x304 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x468 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x424) (* 9 (* c!3 n!0)))))
 (let (($x265 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x468 4) $x304 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x404 ?x172) 0)))))
 (let (($x406 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x481 (+ 13 (* (- 27) c) (* (- 32) k) ?x426 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x515 (* 6 (* c m))))
 (let ((?x508 (* 6 (* c k))))
 (let ((?x501 (* k m m)))
 (let ((?x500 (* c m m)))
 (let ((?x499 (* k k m)))
 (let ((?x498 (* c k m)))
 (let ((?x459 (* k m)))
 (let ((?x518 (* 6 ?x459)))
 (let ((?x511 (* 6 ?x49)))
 (let (($x203 (= (* (+ (- 1) ?x511 ?x518 ?x498 ?x499 ?x500 ?x501 ?x508 ?x515 ?x610) ?x481) 0)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not $x203))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x179 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x481 (+ 13 (* (- 27) c) (* (- 32) k) ?x426 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x501 (* k m m)))
 (let ((?x500 (* c m m)))
 (let ((?x499 (* k k m)))
 (let ((?x498 (* c k m)))
 (let ((?x511 (* 6 ?x49)))
 (let ((?x168 (+ (- 1) ?x511 (* 6 (* k c)) (* 6 (* m c)) (* 6 (* m k)) ?x498 ?x499 ?x500 ?x501 ?x610)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* ?x168 ?x481) 0)))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x357 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x481 (+ 13 (* (- 27) c) (* (- 32) k) ?x426 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x515 (* 6 (* c m))))
 (let ((?x508 (* 6 (* c k))))
 (let ((?x501 (* k m m)))
 (let ((?x500 (* c m m)))
 (let ((?x499 (* k k m)))
 (let ((?x498 (* c k m)))
 (let ((?x459 (* k m)))
 (let ((?x518 (* 6 ?x459)))
 (let ((?x511 (* 6 ?x49)))
 (let (($x203 (= (* (+ (- 1) ?x511 ?x518 ?x498 ?x499 ?x500 ?x501 ?x508 ?x515 ?x610) ?x481) 0)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x350 (and $x124 $x208 $x260 $x298 (not $x203))))
 (let ((?x168 (+ (- 1) ?x511 (* 6 (* k c)) (* 6 (* m c)) (* 6 (* m k)) ?x498 ?x499 ?x500 ?x501 ?x610)))
 (let (($x398 (and $x124 $x208 $x260 $x298 (not (= (* ?x168 ?x481) 0)))))
 (rewrite (= $x398 $x350)))))))))))))))))))))))))))))))))
 ))
 (let (($x217 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x121 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let (($x274 (not (= (* (+ (- 1) (* ?x488 ?x72 ?x68) ?x610) ?x121) 0))))
 (let (($x135 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x173 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x173 $x135 $x274)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x293 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x481 (+ 13 (* (- 27) c) (* (- 32) k) ?x426 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x501 (* k m m)))
 (let ((?x500 (* c m m)))
 (let ((?x499 (* k k m)))
 (let ((?x498 (* c k m)))
 (let ((?x511 (* 6 ?x49)))
 (let ((?x168 (+ (- 1) ?x511 (* 6 (* k c)) (* 6 (* m c)) (* 6 (* m k)) ?x498 ?x499 ?x500 ?x501 ?x610)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x398 (and $x124 $x208 $x260 $x298 (not (= (* ?x168 ?x481) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x121 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* ?x341 ?x68)) ?x426 ?x48 ?x78)))
 (let (($x274 (not (= (* (+ (- 1) (* ?x488 ?x72 ?x68) ?x610) ?x121) 0))))
 (let (($x135 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x173 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x181 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x173 $x135 $x274)))
 (rewrite (= $x181 $x398))))))))))))))))))))))))))))))))))
 ))
 (let (($x276 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x121 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let (($x274 (not (= (* (+ (- 1) (* ?x488 ?x72 ?x68) ?x610) ?x121) 0))))
 (let (($x135 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x386 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x519 (= (+ ?x98 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x519 $x386 $x135 $x274)))))))))))))))) :qid k!34))
 ))
 (let ((?x534 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x121 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let (($x274 (not (= (* (+ (- 1) (* ?x488 ?x72 ?x68) ?x610) ?x121) 0))))
 (let (($x135 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x173 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x181 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x173 $x135 $x274)))
 (let (($x386 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x519 (= (+ ?x98 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x286 (and $x124 $x519 $x386 $x135 $x274)))
 (rewrite (= $x286 $x181))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x85 (- (+ (- 1) (* ?x68 ?x72 ?x81)) (* ?x68 ?x68 ?x68 ?x72 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x85) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x272 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x121 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x610 (* (- 1) (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68 ?x68))))
 (let (($x274 (not (= (* (+ (- 1) (* ?x488 ?x72 ?x68) ?x610) ?x121) 0))))
 (let (($x135 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x386 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x519 (= (+ ?x98 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x286 (and $x124 $x519 $x386 $x135 $x274)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x85 (- (+ (- 1) (* ?x68 ?x72 ?x81)) (* ?x68 ?x68 ?x68 ?x72 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x85) 0))))))
 (rewrite (= $x90 $x286))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x102 (mp (mp @x92 (quant-intro (proof-bind ?x272) (= $x91 $x276)) $x276) (rewrite (= $x276 $x276)) $x276)))
 (let ((@x112 (mp (mp @x102 (quant-intro (proof-bind ?x534) (= $x276 $x217)) $x217) (quant-intro (proof-bind ?x293) (= $x217 $x179)) $x179)))
 (let ((@x218 (mp~ (mp @x112 (quant-intro (proof-bind ?x357) (= $x179 $x406)) $x406) (sk (~ $x406 $x265)) $x265)))
 (let ((@x229 (mp @x218 (rewrite (= $x265 $x105)) $x105)))
 (let ((@x348 (and-elim @x229 $x154)))
 (let ((@x439 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x191)) @x348 $x191)))
 (let (($x192 (>= ?x227 (- 1))))
 (let ((@x201 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x192)) @x348 $x192)))
 (let (($x187 (<= ?x288 (- 4))))
 (let ((@x347 (and-elim @x229 $x289)))
 (let ((@x245 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x289) $x187)) @x347 $x187)))
 (let (($x178 (>= ?x288 (- 4))))
 (let ((@x410 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x289) $x178)) @x347 $x178)))
 (let (($x389 (<= ?x324 (- 6))))
 (let ((@x95 (and-elim @x229 $x325)))
 (let ((@x431 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x389)) @x95 $x389)))
 (let (($x186 (>= ?x324 (- 6))))
 (let ((@x150 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x186)) @x95 $x186)))
 (let (($x108 (<= ?x376 (- 1))))
 (let ((@x349 (and-elim @x229 $x378)))
 (let ((@x119 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x378) $x108)) @x349 $x108)))
 (let (($x109 (>= ?x376 (- 1))))
 (let ((@x231 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x378) $x109)) @x349 $x109)))
 (let (($x1176 (not $x1067)))
 (let ((@x1251 (hypothesis $x1176)))
 (let (($x1023 (not (<= ?x158 0))))
 (let (($x115 (>= ?x158 0)))
 (let (($x1068 (>= ?x614 0)))
 (let (($x1258 (not $x1068)))
 (let (($x1066 (= ?x614 0)))
 (let (($x1096 (not $x1066)))
 (let (($x409 (not $x115)))
 (let ((@x167 (hypothesis $x409)))
 (let ((@x1144 ((_ th-lemma arith farkas 1 1 1) @x167 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1096 $x1068)) (hypothesis $x1066) $x1068) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1096 $x1067)) (hypothesis $x1066) $x1067) false)))
 (let ((@x1243 ((_ th-lemma arith) @x167 @x1251 @x231 @x119 @x231 @x119 @x150 @x431 @x231 @x119 @x201 @x439 @x231 @x119 @x231 @x119 @x150 @x431 @x410 @x245 @x201 @x439 false)))
 (let ((@x1261 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1066 $x1176 $x1258)) (unit-resolution (lemma @x1243 (or $x1067 $x115)) @x167 $x1067) (unit-resolution (lemma @x1144 (or $x1096 $x115)) @x167 $x1096) $x1258)))
 (let ((@x1242 ((_ th-lemma arith) @x167 @x1261 @x150 @x431 @x231 @x119 @x410 @x245 @x231 @x119 @x231 @x119 @x410 @x245 @x231 @x119 @x410 @x245 @x201 @x439 @x231 @x119 @x150 @x431 @x410 @x245 @x201 @x439 false)))
 (let ((@x1274 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x120 $x1023 $x409)) (and-elim @x229 $x157) (or $x1023 $x409))))
 (let ((@x1271 (unit-resolution @x1274 (lemma @x1242 $x115) $x1023)))
 (let ((@x1262 ((_ th-lemma arith) @x1271 @x1251 @x150 @x431 @x231 @x119 @x231 @x119 @x150 @x431 @x410 @x245 @x201 @x439 false)))
 (let ((@x1250 ((_ th-lemma arith) @x1271 (hypothesis $x1258) @x150 @x431 @x231 @x119 @x231 @x119 @x150 @x431 @x410 @x245 @x201 @x439 false)))
 ((_ th-lemma arith farkas 1 1 1) @x1271 (lemma @x1250 $x1068) (lemma @x1262 $x1067) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 87
 :arith-assert-diseq        11
 :arith-assert-lower        478
 :arith-assert-upper        404
 :arith-bound-prop          9
 :arith-branch-var          22
 :arith-conflicts           36
 :arith-eq-adapter          15
 :arith-fixed-eqs           121
 :arith-gcd-tests           183
 :arith-gomory-cuts         15
 :arith-grobner             48
 :arith-ineq-splits         22
 :arith-max-min             3994
 :arith-nonlinear-bounds    158
 :arith-nonlinear-horner    594
 :arith-num-rows            18
 :arith-offset-eqs          7
 :arith-patches             49
 :arith-patches_succ        5
 :arith-pivots              1077
 :arith-pseudo-nonlinear    87
 :arith-row-summations      8401
 :arith-tableau-max-columns 60
 :arith-tableau-max-rows    18
 :conflicts                 38
 :decisions                 132
 :del-clause                96
 :final-checks              153
 :max-memory                4.47
 :memory                    3.27
 :minimized-lits            13
 :mk-bool-var               226
 :mk-clause                 173
 :num-allocs                408859979
 :num-checks                1
 :propagations              184
 :rlimit-count              1728717
 :time                      1.58
 :total-time                1.59)
