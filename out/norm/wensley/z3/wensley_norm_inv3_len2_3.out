unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x1839 (to_real y!0)))
 (let ((?x1837 (to_real a!3)))
 (let ((?x1836 (to_real d!1)))
 (let ((?x1835 (to_real b!2)))
 (let ((?x66 (to_real y00)))
 (let ((?x2043 (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839)))
 (let ((?x1419 (* (- (/ 1.0 16.0)) ?x2043)))
 (let ((?x2031 (* (/ 1.0 32.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837))))
 (let ((?x359 (* (- (/ 9.0 8.0)) (* (to_real a00) ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1839 ?x1839))))
 (let ((?x1702 (+ (* (/ 1.0 2.0) ?x1836) ?x1839)))
 (let ((?x1029 (+ ?x1835 ?x1837)))
 (let ((?x2018 (* (- (/ 1.0 2.0)) (* ?x1835 ?x1835 ?x1029 ?x1029 ?x1029 ?x1702 ?x1702 ?x1702 ?x1702))))
 (let ((?x1700 (* (- (/ 3.0 8.0)) (* (to_real a00) ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1839 ?x1839))))
 (let ((?x1838 (* ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1837)))
 (let ((?x1255 (* (/ 1.0 32.0) ?x1838)))
 (let ((?x1164 (* (- (/ 1.0 4.0)) (* (to_real a00) ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1839 ?x1839 ?x1839))))
 (let ((?x383 (* (- (/ 9.0 8.0)) (* (to_real a00) ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1839 ?x1839))))
 (let ((?x728 (* (- (/ 9.0 16.0)) (* (to_real a00) ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1839))))
 (let ((?x1170 (* (- (/ 3.0 8.0)) (* (to_real a00) ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839))))
 (let ((?x1461 (* (- (/ 3.0 16.0)) (* (to_real a00) ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837))))
 (let ((?x1339 (* (/ 3.0 32.0) (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837))))
 (let ((?x1328 (* (/ 3.0 32.0) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837))))
 (let ((?x1246 (* (- (/ 3.0 16.0)) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1839))))
 (let ((?x1158 (* (- (/ 3.0 4.0)) (* (to_real a00) ?x1835 ?x1835 ?x1836 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839))))
 (let ((?x1219 (* (- (/ 9.0 16.0)) (* (to_real a00) ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1839))))
 (let ((?x1678 (* (- (/ 3.0 16.0)) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1839))))
 (let ((?x933 (* (/ 1.0 4.0) (* ?x1836 ?x1835 ?x1029 ?x1029 ?x1029 ?x1029 ?x1702 ?x1702 ?x1702))))
 (let ((?x1163 (* (- (/ 3.0 4.0)) (* (to_real a00) ?x1835 ?x1835 ?x1835 ?x1836 ?x1837 ?x1839 ?x1839 ?x1839))))
 (let ((?x1503 (* (- (/ 3.0 16.0)) (* (to_real a00) ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839))))
 (let ((?x940 (* (- (/ 1.0 16.0)) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1839))))
 (let ((?x71 (to_real a00)))
 (let ((?x509 (* ?x71 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837)))
 (let ((?x1120 (+ (* (/ 3.0 4.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1839 ?x1839)) (* (/ 9.0 4.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1836 ?x1837 ?x1837 ?x1839 ?x1839)) (* (- (/ 3.0 16.0)) (* ?x71 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837)) (* (/ 3.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839)) (* (/ 9.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1839)) (* (- (/ 1.0 16.0)) (* ?x71 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836)) (* (- (/ 1.0 4.0)) (* ?x71 ?x1835 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839)) (* (/ 9.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1839)) (* (/ 3.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1839)) (* (- (/ 3.0 16.0)) (* ?x71 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1839)) (* (/ 3.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837)) (* (/ 3.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837)) (* (- (/ 1.0 16.0)) ?x509) (* (/ 1.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837)) ?x940 ?x1503 ?x1163 ?x933 ?x1678 ?x1219 ?x1158 (* (/ 1.0 2.0) (* ?x66 ?x1835 ?x1835 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839)) ?x1246 ?x1328 ?x1339 ?x1461 (* (/ 9.0 4.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1837 ?x1839 ?x1839)) ?x1170 (* (/ 1.0 2.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1839 ?x1839 ?x1839)) (* (/ 1.0 8.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836)) (* (/ 3.0 2.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839)) ?x728 ?x383 ?x1164 ?x1255 ?x1700 ?x2018 ?x359 ?x2031 ?x1419 (* (/ 3.0 2.0) (* ?x66 ?x1835 ?x1835 ?x1835 ?x1835 ?x1837 ?x1839 ?x1839 ?x1839)) (* (/ 3.0 4.0) (* ?x66 ?x1835 ?x1835 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839)))))
 (let (($x1763 (>= ?x1120 0.0)))
 (let ((?x1041 (+ (* d!1 a!3) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) (* (- 2) (* y!0 b!2)))))
 (let (($x1766 (>= ?x1041 0)))
 (let (($x1261 (= 0 ?x1041)))
 (let ((@x1117 (symm (commutativity (= $x1261 (= ?x1041 0))) (= (= ?x1041 0) $x1261))))
 (let (($x826 (= ?x1041 0)))
 (let ((?x850 (+ (* (/ 1.0 4.0) (* ?x71 ?x1835 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839)) (* (/ 1.0 32.0) ?x509) (* (- (/ 1.0 16.0)) (* ?x66 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837)) (* (- (/ 1.0 4.0)) (* ?x1835 ?x1836 ?x1837 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839)) (* (- (/ 1.0 2.0)) (* ?x66 ?x1835 ?x1835 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839)) (* (- (/ 1.0 32.0)) ?x1838) (* (/ 1.0 2.0) (* ?x1835 ?x1835 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839 ?x1839)) (* (/ 1.0 16.0) ?x2043))))
 (let (($x881 (= ?x850 0.0)))
 (let (($x1427 (not $x881)))
 (let (($x1150 (or $x1427 (not (= ?x1120 0.0)))))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x1166 (= (+ ?x35 ?x112 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x1268 (and $x1166 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x826 $x1150)))
 (let ((?x1741 (* (- (/ 1.0 4.0)) (* ?x1835 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839 ?x71))))
 (let ((?x1090 (* (/ 1.0 2.0) (* ?x1835 ?x1835 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839 ?x66))))
 (let ((?x1736 (+ ?x1255 ?x1090 ?x2031 ?x1328 ?x1339 ?x1419 ?x1741 (* (- (/ 1.0 16.0)) (* ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x71)) (* (/ 1.0 8.0) (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x66)) (* (/ 1.0 2.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1839 ?x1839 ?x1839 ?x66)) (* (/ 1.0 8.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x66)) (* (/ 3.0 8.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x66)) (* (/ 3.0 8.0) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x66)) ?x2018 (* (/ 3.0 8.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1839 ?x66)) (* (/ 9.0 8.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1839 ?x66)) (* (/ 9.0 8.0) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1839 ?x66)) (* (/ 3.0 8.0) (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x66)) (* (/ 3.0 4.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1839 ?x1839 ?x66)) (* (/ 9.0 4.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1837 ?x1839 ?x1839 ?x66)) (* (/ 9.0 4.0) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1837 ?x1837 ?x1839 ?x1839 ?x66)) (* (/ 3.0 4.0) (* ?x1835 ?x1835 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x66)) (* (/ 3.0 2.0) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1837 ?x1839 ?x1839 ?x1839 ?x66)) (* (/ 3.0 2.0) (* ?x1835 ?x1835 ?x1835 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839 ?x66)) ?x1246 ?x933 ?x940 ?x1678 (* (- (/ 1.0 16.0)) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x71)) (* (- (/ 3.0 16.0)) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x71)) (* (- (/ 3.0 16.0)) (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x71)) (* (- (/ 3.0 16.0)) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1839 ?x71)) (* (- (/ 9.0 16.0)) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1839 ?x71)) (* (- (/ 9.0 16.0)) (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1839 ?x71)) (* (- (/ 3.0 16.0)) (* ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x71)) (* (- (/ 3.0 8.0)) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1839 ?x1839 ?x71)) (* (- (/ 9.0 8.0)) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1839 ?x1839 ?x71)) (* (- (/ 9.0 8.0)) (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1839 ?x1839 ?x71)) (* (- (/ 3.0 8.0)) (* ?x1835 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x71)) (* (- (/ 1.0 4.0)) (* ?x1835 ?x1835 ?x1835 ?x1835 ?x1836 ?x1839 ?x1839 ?x1839 ?x71)) (* (- (/ 3.0 4.0)) (* ?x1835 ?x1835 ?x1835 ?x1836 ?x1837 ?x1839 ?x1839 ?x1839 ?x71)) (* (- (/ 3.0 4.0)) (* ?x1835 ?x1835 ?x1836 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839 ?x71)))))
 (let ((?x2019 (+ ?x1255 (* (- (/ 1.0 2.0)) (* ?x1835 ?x1835 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839 ?x1839)) ?x1090 (* (/ 1.0 4.0) (* ?x1835 ?x1836 ?x1837 ?x1837 ?x1837 ?x1837 ?x1839 ?x1839 ?x1839)) ?x1419 ?x1741 (* (- (/ 1.0 32.0)) (* ?x1835 ?x1836 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x71)) (* (/ 1.0 16.0) (* ?x1835 ?x1835 ?x1836 ?x1836 ?x1836 ?x1837 ?x1837 ?x1837 ?x66)))))
 (let ((?x1833 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x1812 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x112 (* 2 (* y!0 b00))) 0)))
 (let (($x1744 (and $x1812 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x1833 0) (or (not (= ?x2019 0.0)) (not (= ?x1736 0.0))))))
 (let (($x1087 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x71 (to_real a00)))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x1952 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x1949 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x1945 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x1942 (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x71))))
 (let ((?x1939 (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x71))))
 (let ((?x1936 (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x71))))
 (let ((?x1932 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x71))))
 (let ((?x1928 (* (- (/ 3.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x71))))
 (let ((?x1925 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x71))))
 (let ((?x1922 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x71))))
 (let ((?x1918 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x71))))
 (let ((?x2026 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x71))))
 (let ((?x2025 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x71))))
 (let ((?x2024 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x71))))
 (let ((?x1245 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63))))
 (let ((?x1242 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63))))
 (let ((?x161 (* (/ 1.0 2.0) ?x59)))
 (let ((?x385 (+ ?x161 ?x63)))
 (let ((?x177 (+ ?x56 ?x61)))
 (let ((?x1239 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63))))
 (let ((?x1067 (* (/ 3.0 2.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x1064 (* (/ 3.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x1061 (* (/ 3.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x1058 (* (/ 9.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x1055 (* (/ 9.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x1052 (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 (to_real y00)))))
 (let ((?x1049 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 (to_real y00)))))
 (let ((?x1046 (* (/ 9.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 (to_real y00)))))
 (let ((?x1043 (* (/ 9.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 (to_real y00)))))
 (let ((?x1039 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 (to_real y00)))))
 (let ((?x982 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 (to_real y00)))))
 (let ((?x981 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 (to_real y00)))))
 (let ((?x484 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 (to_real y00)))))
 (let ((?x1009 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x66 (to_real y00)))
 (let ((?x387 (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x66)))
 (let ((?x568 (* (/ 1.0 8.0) ?x387)))
 (let ((?x349 (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x71)))
 (let ((?x2023 (* (- (/ 1.0 16.0)) ?x349)))
 (let ((?x327 (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x289 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1236 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61))))
 (let ((?x1199 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61))))
 (let ((?x1241 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61))))
 (let ((?x236 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x189 (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x2078 (+ ?x189 ?x236 ?x1241 ?x1199 ?x1236 ?x289 ?x327 ?x2023 ?x568 ?x1009 ?x484 ?x981 ?x982 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x177 ?x177 ?x177 ?x385 ?x385 ?x385 ?x385)) ?x1039 ?x1043 ?x1046 ?x1049 ?x1052 ?x1055 ?x1058 ?x1061 ?x1064 ?x1067 ?x1239 (* (/ 1.0 4.0) (* ?x59 ?x56 ?x177 ?x177 ?x177 ?x177 ?x385 ?x385 ?x385)) ?x1242 ?x1245 ?x2024 ?x2025 ?x2026 ?x1918 ?x1922 ?x1925 ?x1928 ?x1932 ?x1936 ?x1939 ?x1942 ?x1945 ?x1949 ?x1952)))
 (let ((?x396 (+ ?x189 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x236 (* (/ 1.0 4.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x289 ?x327 (* (- (/ 1.0 32.0)) ?x349) (* (/ 1.0 16.0) ?x387))))
 (let (($x168 (not (= ?x396 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x179 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x184 (= ?x179 0)))
 (let (($x109 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x144 (= (+ ?x35 (* (- 1) (* a d00)) ?x112 (* 2 (* y b00))) 0)))
 (and $x144 $x109 $x184 (or $x168 (not (= ?x2078 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x251 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x452 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x66 (to_real y00)))
 (let ((?x552 (* (- (/ 1.0 32.0)) (* (to_real a00) ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452))))
 (let ((?x161 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x322 (+ ?x63 ?x161)))
 (let ((?x71 (to_real a00)))
 (let ((?x593 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452 ?x452)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322 ?x322)) (* (/ 1.0 2.0) (* ?x66 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (/ 1.0 4.0) (* ?x59 ?x56 ?x452 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322)) (* (- (/ 1.0 4.0)) (* ?x71 ?x59 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) ?x552 (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452)))))
 (let ((?x444 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x66 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x71 ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x71 ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let (($x596 (or (not (= ?x444 0.0)) (not (= ?x593 0.0)))))
 (let ((?x269 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x275 (= ?x269 0)))
 (let ((?x496 (* d00 a)))
 (let ((?x488 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x496)))
 (and (= ?x488 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x275 $x596)))))))))))))))))) :qid k!33))
 ))
 (let ((?x213 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x71 (to_real a00)))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x1952 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x1949 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x1945 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x1942 (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x71))))
 (let ((?x1939 (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x71))))
 (let ((?x1936 (* (- (/ 9.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x71))))
 (let ((?x1932 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x71))))
 (let ((?x1928 (* (- (/ 3.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x71))))
 (let ((?x1925 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x71))))
 (let ((?x1922 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x71))))
 (let ((?x1918 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x71))))
 (let ((?x2026 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x71))))
 (let ((?x2025 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x71))))
 (let ((?x2024 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x71))))
 (let ((?x1245 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63))))
 (let ((?x1242 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63))))
 (let ((?x161 (* (/ 1.0 2.0) ?x59)))
 (let ((?x385 (+ ?x161 ?x63)))
 (let ((?x177 (+ ?x56 ?x61)))
 (let ((?x1239 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63))))
 (let ((?x1067 (* (/ 3.0 2.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x1064 (* (/ 3.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x1061 (* (/ 3.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x1058 (* (/ 9.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x1055 (* (/ 9.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x1052 (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 (to_real y00)))))
 (let ((?x1049 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 (to_real y00)))))
 (let ((?x1046 (* (/ 9.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 (to_real y00)))))
 (let ((?x1043 (* (/ 9.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 (to_real y00)))))
 (let ((?x1039 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 (to_real y00)))))
 (let ((?x982 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 (to_real y00)))))
 (let ((?x981 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 (to_real y00)))))
 (let ((?x484 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 (to_real y00)))))
 (let ((?x1009 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x66 (to_real y00)))
 (let ((?x387 (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x66)))
 (let ((?x568 (* (/ 1.0 8.0) ?x387)))
 (let ((?x349 (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x71)))
 (let ((?x2023 (* (- (/ 1.0 16.0)) ?x349)))
 (let ((?x327 (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x71))))
 (let ((?x289 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1236 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61))))
 (let ((?x1199 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61))))
 (let ((?x1241 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61))))
 (let ((?x236 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x189 (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x2078 (+ ?x189 ?x236 ?x1241 ?x1199 ?x1236 ?x289 ?x327 ?x2023 ?x568 ?x1009 ?x484 ?x981 ?x982 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x177 ?x177 ?x177 ?x385 ?x385 ?x385 ?x385)) ?x1039 ?x1043 ?x1046 ?x1049 ?x1052 ?x1055 ?x1058 ?x1061 ?x1064 ?x1067 ?x1239 (* (/ 1.0 4.0) (* ?x59 ?x56 ?x177 ?x177 ?x177 ?x177 ?x385 ?x385 ?x385)) ?x1242 ?x1245 ?x2024 ?x2025 ?x2026 ?x1918 ?x1922 ?x1925 ?x1928 ?x1932 ?x1936 ?x1939 ?x1942 ?x1945 ?x1949 ?x1952)))
 (let ((?x396 (+ ?x189 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x236 (* (/ 1.0 4.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x289 ?x327 (* (- (/ 1.0 32.0)) ?x349) (* (/ 1.0 16.0) ?x387))))
 (let (($x168 (not (= ?x396 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x179 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x184 (= ?x179 0)))
 (let (($x109 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x144 (= (+ ?x35 (* (- 1) (* a d00)) ?x112 (* 2 (* y b00))) 0)))
 (let (($x901 (and $x144 $x109 $x184 (or $x168 (not (= ?x2078 0.0))))))
 (let ((?x452 (+ ?x61 ?x56)))
 (let ((?x322 (+ ?x63 ?x161)))
 (let ((?x593 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452 ?x452)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322 ?x322)) (* (/ 1.0 2.0) (* ?x66 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (/ 1.0 4.0) (* ?x59 ?x56 ?x452 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322)) (* (- (/ 1.0 4.0)) (* ?x71 ?x59 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (- (/ 1.0 32.0)) (* ?x71 ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452)) (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452)))))
 (let ((?x444 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x66 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x71 ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x71 ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let (($x596 (or (not (= ?x444 0.0)) (not (= ?x593 0.0)))))
 (let ((?x269 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x275 (= ?x269 0)))
 (let ((?x496 (* d00 a)))
 (let (($x245 (= (+ (* 2 ?x111) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x496) 0)))
 (let (($x905 (and $x245 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x275 $x596)))
 (rewrite (= $x905 $x901))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x601 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x452 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x66 (to_real y00)))
 (let ((?x552 (* (- (/ 1.0 32.0)) (* (to_real a00) ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452))))
 (let ((?x161 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x322 (+ ?x63 ?x161)))
 (let ((?x71 (to_real a00)))
 (let ((?x593 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452 ?x452)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322 ?x322)) (* (/ 1.0 2.0) (* ?x66 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (/ 1.0 4.0) (* ?x59 ?x56 ?x452 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322)) (* (- (/ 1.0 4.0)) (* ?x71 ?x59 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) ?x552 (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452)))))
 (let ((?x444 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x66 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x71 ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x71 ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let (($x596 (or (not (= ?x444 0.0)) (not (= ?x593 0.0)))))
 (let ((?x269 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x275 (= ?x269 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x1107 (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x1107 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x275 $x596)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x683 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x452 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x66 (to_real y00)))
 (let ((?x552 (* (- (/ 1.0 32.0)) (* (to_real a00) ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452))))
 (let ((?x161 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x322 (+ ?x63 ?x161)))
 (let ((?x71 (to_real a00)))
 (let ((?x593 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452 ?x452)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322 ?x322)) (* (/ 1.0 2.0) (* ?x66 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (/ 1.0 4.0) (* ?x59 ?x56 ?x452 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322)) (* (- (/ 1.0 4.0)) (* ?x71 ?x59 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) ?x552 (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452)))))
 (let ((?x444 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x66 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x71 ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x71 ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let (($x596 (or (not (= ?x444 0.0)) (not (= ?x593 0.0)))))
 (let ((?x269 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x275 (= ?x269 0)))
 (let ((?x496 (* d00 a)))
 (let ((?x488 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x496)))
 (let (($x905 (and (= ?x488 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x275 $x596)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x263 (and (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) ?x496)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x275 $x596)))
 (rewrite (= $x263 $x905)))))))))))))))))))))))))
 ))
 (let (($x103 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x79 (to_real 0)))
 (let ((?x66 (to_real y00)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (to_real (+ a b))))
 (let ((?x63 (to_real y)))
 (let ((?x85 (+ ?x63 ?x60)))
 (let ((?x71 (to_real a00)))
 (let ((?x87 (- (* ?x83 ?x83 ?x83 ?x83 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x85 ?x85 ?x85 ?x85))))
 (let ((?x90 (+ ?x87 (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x85 ?x85 ?x85 ?x66) (* ?x83 ?x83 ?x83 ?x83 ?x58 ?x60 ?x85 ?x85 ?x85))))
 (let ((?x95 (- (- ?x90 (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x60 ?x60 ?x60 ?x85)) (* ?x83 ?x83 ?x83 ?x71 ?x58 ?x60 ?x85 ?x85 ?x85))))
 (let ((?x98 (+ (- ?x95 (* ?x83 ?x83 ?x83 ?x71 ?x58 ?x60 ?x60 ?x60 ?x60)) (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x60 ?x60 ?x60 ?x66))))
 (let ((?x61 (to_real a)))
 (let ((?x65 (- (* ?x61 ?x61 ?x61 ?x61 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x69 (+ ?x65 (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x63 ?x63 ?x63 ?x66) (* ?x61 ?x61 ?x61 ?x61 ?x58 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x75 (- (- ?x69 (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63)) (* ?x61 ?x61 ?x61 ?x71 ?x58 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x78 (+ (- ?x75 (* ?x61 ?x61 ?x61 ?x71 ?x58 ?x60 ?x60 ?x60 ?x60)) (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x60 ?x66))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x78 ?x79)) (not (= ?x98 ?x79)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x287 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x452 (+ ?x61 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x66 (to_real y00)))
 (let ((?x552 (* (- (/ 1.0 32.0)) (* (to_real a00) ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452))))
 (let ((?x161 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x322 (+ ?x63 ?x161)))
 (let ((?x71 (to_real a00)))
 (let ((?x593 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x452 ?x452 ?x452 ?x452)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322 ?x322)) (* (/ 1.0 2.0) (* ?x66 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (/ 1.0 4.0) (* ?x59 ?x56 ?x452 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452 ?x322)) (* (- (/ 1.0 4.0)) (* ?x71 ?x59 ?x56 ?x452 ?x452 ?x452 ?x322 ?x322 ?x322)) ?x552 (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x452 ?x452 ?x452)))))
 (let ((?x444 (+ (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x66 ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x71 ?x63 ?x63 ?x63 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x71 ?x59 ?x59 ?x59 ?x59 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x66 ?x59 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let (($x596 (or (not (= ?x444 0.0)) (not (= ?x593 0.0)))))
 (let ((?x269 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x275 (= ?x269 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x1107 (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x263 (and $x1107 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x275 $x596)))
 (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (to_real (+ a b))))
 (let ((?x85 (+ ?x63 ?x60)))
 (let ((?x87 (- (* ?x83 ?x83 ?x83 ?x83 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x85 ?x85 ?x85 ?x85))))
 (let ((?x90 (+ ?x87 (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x85 ?x85 ?x85 ?x66) (* ?x83 ?x83 ?x83 ?x83 ?x58 ?x60 ?x85 ?x85 ?x85))))
 (let ((?x95 (- (- ?x90 (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x60 ?x60 ?x60 ?x85)) (* ?x83 ?x83 ?x83 ?x71 ?x58 ?x60 ?x85 ?x85 ?x85))))
 (let ((?x98 (+ (- ?x95 (* ?x83 ?x83 ?x83 ?x71 ?x58 ?x60 ?x60 ?x60 ?x60)) (* ?x57 ?x83 ?x83 ?x83 ?x58 ?x58 ?x60 ?x60 ?x60 ?x66))))
 (let ((?x65 (- (* ?x61 ?x61 ?x61 ?x61 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x69 (+ ?x65 (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x63 ?x63 ?x63 ?x66) (* ?x61 ?x61 ?x61 ?x61 ?x58 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x75 (- (- ?x69 (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63)) (* ?x61 ?x61 ?x61 ?x71 ?x58 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x78 (+ (- ?x75 (* ?x61 ?x61 ?x61 ?x71 ?x58 ?x60 ?x60 ?x60 ?x60)) (* ?x57 ?x61 ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x60 ?x66))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x102 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x78 ?x79)) (not (= ?x98 ?x79))))))
 (rewrite (= $x102 $x263))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x104 (asserted $x103)))
 (let ((@x529 (mp (mp @x104 (quant-intro (proof-bind ?x287) (= $x103 $x601)) $x601) (rewrite (= $x601 $x601)) $x601)))
 (let ((@x1784 (mp (mp @x529 (quant-intro (proof-bind ?x683) (= $x601 $x251)) $x251) (quant-intro (proof-bind ?x213) (= $x251 $x1087)) $x1087)))
 (let ((@x2047 (mp (mp~ @x1784 (sk (~ $x1087 $x1744)) $x1744) (rewrite (= $x1744 $x1268)) $x1268)))
 (let ((@x1118 (mp (and-elim @x2047 $x826) @x1117 $x1261)))
 (let ((@x1157 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1261) $x1766)) @x1118 $x1766)))
 (let (($x1266 (<= ?x1041 0)))
 (let ((@x1155 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1261) $x1266)) @x1118 $x1266)))
 (let ((@x2050 (unit-resolution ((_ th-lemma arith) (or $x1763 (not $x1766) (not $x1266))) @x1155 @x1157 (hypothesis (not $x1763)) false)))
 (let ((@x1151 (lemma @x2050 $x1763)))
 (let (($x1761 (<= ?x1120 0.0)))
 (let ((@x810 (unit-resolution ((_ th-lemma arith) (or $x1761 (not $x1766) (not $x1266))) @x1155 @x1157 (hypothesis (not $x1761)) false)))
 (let ((@x558 (lemma @x810 $x1761)))
 (let (($x1502 (>= ?x850 0.0)))
 (let (($x991 (not $x1502)))
 (let (($x716 (<= ?x850 0.0)))
 (let ((@x1124 (unit-resolution ((_ th-lemma arith) (or (not $x1761) (not $x1763) $x716 (not $x1766) (not $x1266))) @x1155 @x1157 (hypothesis (not $x716)) @x558 @x1151 false)))
 (let (($x849 (= 0.0 ?x850)))
 (let (($x761 (not $x849)))
 (let ((@x1504 (monotonicity (symm (commutativity (= $x849 $x881)) (= $x881 $x849)) (= $x1427 $x761))))
 (let (($x1121 (= ?x1120 0.0)))
 (let (($x1536 (= 0.0 ?x1120)))
 (let ((@x840 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1536 (not $x1761) (not $x1763))) @x1151 (or $x1536 (not $x1761)))))
 (let ((@x644 (mp (unit-resolution @x840 @x558 $x1536) (commutativity (= $x1536 $x1121)) $x1121)))
 (let ((@x174 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x849 (not $x716) $x991)) (mp (unit-resolution (and-elim @x2047 $x1150) @x644 $x1427) @x1504 $x761) (or (not $x716) $x991))))
 (unit-resolution ((_ th-lemma arith) (or (not $x1761) (not $x1763) $x1502 (not $x1766) (not $x1266))) @x1155 @x1157 (unit-resolution @x174 (lemma @x1124 $x716) $x991) @x558 @x1151 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       44
 :arith-eq-adapter                69
 :arith-bound-propagations-cheap  57
 :arith-bound-propagations-lp     11
 :arith-branch                    1
 :arith-conflicts                 185
 :arith-cube-calls                1
 :arith-diseq                     55
 :arith-gcd-calls                 12
 :arith-gomory-cuts               1
 :arith-grobner-calls             6
 :arith-grobner-conflicts         4
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 17
 :arith-lower                     110
 :arith-make-feasible             107
 :arith-max-columns               88
 :arith-max-rows                  16
 :arith-nla-explanations          87
 :arith-nla-lemmas                179
 :arith-patches                   12
 :arith-patches-success           10
 :arith-propagations              57
 :arith-upper                     136
 :conflicts                       18
 :decisions                       213
 :del-clause                      257
 :final-checks                    45
 :max-memory                      9.34
 :memory                          3.33
 :mk-bool-var                     440
 :mk-clause                       359
 :num-allocs                      73671011
 :num-checks                      1
 :propagations                    188
 :rlimit-count                    11796
 :time                            0.13
 :total-time                      0.14)
