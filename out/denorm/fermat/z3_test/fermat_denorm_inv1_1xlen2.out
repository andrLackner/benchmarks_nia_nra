unsat
((set-logic NIA)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(proof
(let ((?x296 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x388 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) ?x296 (* (- 2) u!1) (* (- 1) (* v!0 v!0)) (* (- 4) r!2))))
 (let (($x405 (>= ?x388 0)))
 (let (($x491 (= ?x388 0)))
 (let ((?x295 (* 4 r!2)))
 (let ((?x349 (* v!0 v!0)))
 (let ((?x346 (* 2 u!1)))
 (let ((?x343 (* (- 1) ?x296)))
 (let ((?x348 (* (- 2) v!0)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x576 (+ ?x100 ?x116 ?x41 ?x46 ?x192 ?x348 ?x343 ?x346 ?x349 ?x295)))
 (let ((?x249 (* 2 (* v!0 v!0 v!0))))
 (let ((?x538 (* 2 (* r!2 r!2))))
 (let ((?x326 (* (- 1) (* r!2 r!2 r!2))))
 (let ((?x594 (+ (* 2 ?x349) ?x326 (* (- 5) (* v!0 v!0 r!2)) (* 4 (* v!0 r!2 r!2)) (* (- 4) (* v!0 r!2)) ?x538 ?x249)))
 (let ((?x95 (* ?x594 ?x576)))
 (let (($x395 (= ?x95 0)))
 (let (($x397 (not $x395)))
 (let ((?x520 (* (- 1) (* u!1 u!1 u!1))))
 (let ((?x399 (* v!0 r!2 r!2)))
 (let ((?x467 (+ (* 2 (* v!0 u!1 r!2)) (* (- 3) (* u!1 r!2 r!2)) ?x326 (* (- 3) (* u!1 u!1 r!2)) (* v!0 u!1 u!1) ?x399 ?x520)))
 (let ((?x453 (* ?x467 ?x576)))
 (let (($x379 (= ?x453 0)))
 (let (($x452 (or (not $x379) $x397)))
 (let (($x422 (and $x491 $x452)))
 (let ((?x324 (+ ?x295 ?x346 ?x348 ?x100 ?x116 ?x41 ?x343 ?x349 ?x46 ?x192)))
 (let ((?x498 (+ (* 4 (* r!2 r!2 v!0)) ?x538 (* (- 5) (* r!2 v!0 v!0)) ?x249 ?x326 (* 2 (* (* (- 1) v!0) (* (- 1) v!0))) (* 2 (* (* (- 1) v!0) r!2)) (* 2 (* r!2 (* (- 1) v!0))))))
 (let ((?x354 (* r!2 r!2 v!0)))
 (let ((?x524 (+ ?x354 ?x326 (* 2 (* r!2 u!1 v!0)) (* u!1 u!1 v!0) (* (- 3) (* r!2 r!2 u!1)) (* (- 3) (* r!2 u!1 u!1)) ?x520)))
 (let (($x158 (and (= ?x324 0) (or (not (= (* ?x524 ?x324) 0)) (not (= (* ?x498 ?x324) 0))))))
 (let (($x163 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x448 (* (- 1) (* r r r))))
 (let ((?x465 (* 2 (* v v v))))
 (let ((?x464 (* (- 5) (* r v v))))
 (let ((?x335 (* 2 (* r r))))
 (let ((?x325 (* r r v)))
 (let ((?x454 (* 4 ?x325)))
 (let ((?x460 (+ ?x454 ?x335 ?x464 ?x465 ?x448 (* 2 (* (* (- 1) v) (* (- 1) v))) (* 2 (* (* (- 1) v) r)) (* 2 (* r (* (- 1) v))))))
 (let ((?x591 (+ ?x325 ?x448 (* 2 (* r u v)) (* u u v) (* (- 3) (* r r u)) (* (- 3) (* r u u)) (* (- 1) (* u u u)))))
 (let (($x203 (= ?x198 0)))
 (and $x203 (or (not (= (* ?x591 ?x198) 0)) (not (= (* ?x460 ?x198) 0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x480 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x294 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x236 (* (- 1) v)))
 (let ((?x492 (+ r ?x236)))
 (let ((?x487 (* (+ (* (+ 2 v) ?x492 ?x492) (* (- 1) (* ?x492 ?x492 ?x492))) ?x118)))
 (let (($x183 (or (not (= ?x487 0)) (not (= (* (+ ?x84 (* (- 1) (* ?x71 ?x71 ?x71))) ?x294) 0)))))
 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x183))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x287 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x448 (* (- 1) (* r r r))))
 (let ((?x465 (* 2 (* v v v))))
 (let ((?x464 (* (- 5) (* r v v))))
 (let ((?x335 (* 2 (* r r))))
 (let ((?x325 (* r r v)))
 (let ((?x454 (* 4 ?x325)))
 (let ((?x460 (+ ?x454 ?x335 ?x464 ?x465 ?x448 (* 2 (* (* (- 1) v) (* (- 1) v))) (* 2 (* (* (- 1) v) r)) (* 2 (* r (* (- 1) v))))))
 (let ((?x591 (+ ?x325 ?x448 (* 2 (* r u v)) (* u u v) (* (- 3) (* r r u)) (* (- 3) (* r u u)) (* (- 1) (* u u u)))))
 (let (($x203 (= ?x198 0)))
 (let (($x281 (and $x203 (or (not (= (* ?x591 ?x198) 0)) (not (= (* ?x460 ?x198) 0))))))
 (let ((?x294 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x118 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x236 (* (- 1) v)))
 (let ((?x492 (+ r ?x236)))
 (let ((?x487 (* (+ (* (+ 2 v) ?x492 ?x492) (* (- 1) (* ?x492 ?x492 ?x492))) ?x118)))
 (let (($x183 (or (not (= ?x487 0)) (not (= (* (+ ?x84 (* (- 1) (* ?x71 ?x71 ?x71))) ?x294) 0)))))
 (let (($x434 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x183)))
 (rewrite (= $x434 $x281)))))))))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((r Int) (u Int) (v Int) )(! (let ((?x71 (+ r u)))
 (let ((?x85 (* ?x71 ?x71 ?x71)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x82 (+ (- (+ (- ?x77 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x67 (- (* (- r v) (- r v) (+ v 2)) (* (- r v) (- r v) (- r v)))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x90 (or (not (= (* (- ?x63 ?x48) ?x67) 0)) (not (= (* (- ?x82 ?x48) (- ?x84 ?x85)) 0)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) $x90)))))))))))))))))) :qid k!28))
 ))
 (let ((?x481 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x294 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x84 (* ?x71 ?x71 v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x236 (* (- 1) v)))
 (let ((?x492 (+ r ?x236)))
 (let ((?x487 (* (+ (* (+ 2 v) ?x492 ?x492) (* (- 1) (* ?x492 ?x492 ?x492))) ?x118)))
 (let (($x183 (or (not (= ?x487 0)) (not (= (* (+ ?x84 (* (- 1) (* ?x71 ?x71 ?x71))) ?x294) 0)))))
 (let (($x434 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x183)))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x82 (+ (- (+ (- ?x77 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x67 (- (* (- r v) (- r v) (+ v 2)) (* (- r v) (- r v) (- r v)))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x90 (or (not (= (* (- ?x63 ?x48) ?x67) 0)) (not (= (* (- ?x82 ?x48) (- ?x84 (* ?x71 ?x71 ?x71))) 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x91 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x90)))
 (rewrite (= $x91 $x434)))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x403 (mp (mp @x93 (quant-intro (proof-bind ?x481) (= $x92 $x480)) $x480) (rewrite (= $x480 $x480)) $x480)))
 (let ((@x400 (mp~ (mp @x403 (quant-intro (proof-bind ?x287) (= $x480 $x163)) $x163) (sk (~ $x163 $x158)) $x158)))
 (let ((@x426 (mp @x400 (rewrite (= $x158 $x422)) $x422)))
 (let ((@x356 (and-elim @x426 $x491)))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x491) $x405)) @x356 $x405)))
 (let (($x402 (<= ?x388 0)))
 (let ((@x457 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x491) $x402)) @x356 $x402)))
 (let (($x560 (not (<= ?x95 0))))
 (let (($x384 (>= ?x95 0)))
 (let (($x553 (>= ?x453 0)))
 (let (($x413 (<= ?x453 0)))
 (let ((@x554 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x379 (not $x413) (not $x553))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x413)) @x457 @x177 false) $x413) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x553)) @x457 @x177 false) $x553) $x379)))
 (let ((@x117 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x395 $x560 (not $x384))) (unit-resolution (and-elim @x426 $x452) @x554 $x397) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x384)) @x457 @x177 false) $x384) $x560)))
 ((_ th-lemma arith farkas 1 1 1) @x117 @x457 @x177 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        37
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             192
 :arith-nonlinear-bounds    20
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.57
 :memory                    19.06
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                509695
 :num-checks                1
 :propagations              14
 :rlimit-count              2927
 :time                      0.01
 :total-time                0.02)
