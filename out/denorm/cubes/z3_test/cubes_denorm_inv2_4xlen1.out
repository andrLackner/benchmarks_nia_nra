unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x292 (* m!1 m!1)))
 (let ((?x226 (* (- 27) c!3)))
 (let ((?x469 (* (- 9) (* n!0 c!3))))
 (let ((?x175 (* k!2 k!2)))
 (let ((?x338 (* (- 32) k!2)))
 (let ((?x339 (* (- 5) m!1)))
 (let ((?x367 (* 9 n!0)))
 (let ((?x495 (+ 13 ?x367 ?x339 ?x338 ?x175 ?x469 ?x226 ?x292 (* (- 9) (* n!0 k!2)) (* 2 (* m!1 k!2)))))
 (let (($x1948 (<= ?x495 0)))
 (let ((?x386 (+ ?x367 (* (- 5) k!2) ?x175 ?x469 (* (- 18) c!3))))
 (let (($x217 (<= ?x386 (- 4))))
 (let (($x379 (= ?x386 (- 4))))
 (let ((?x776 (+ k!2 c!3)))
 (let ((?x773 (+ m!1 k!2)))
 (let ((?x125 (+ 6 m!1)))
 (let ((?x402 (+ 1 n!0)))
 (let ((?x487 (* ?x402 ?x402 ?x402 ?x402 ?x402 ?x402 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x773 ?x773 ?x773 ?x773 ?x773 ?x773 ?x773 ?x773 ?x776 ?x776 ?x776 ?x776 ?x776 ?x495)))
 (let (($x780 (= ?x487 0)))
 (let (($x479 (not $x780)))
 (let ((?x751 (* (- 1) k!2)))
 (let ((?x767 (+ (* 3 n!0) ?x751 (* 3 (* n!0 n!0)))))
 (let (($x768 (= ?x767 (- 1))))
 (let ((?x321 (* n!0 k!2)))
 (let ((?x753 (+ (* 2 n!0) ?x751 (* (- 3) c!3) ?x321)))
 (let (($x754 (= ?x753 (- 1))))
 (let ((?x92 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x97 (= ?x92 (- 6))))
 (let (($x783 (and $x97 $x379 $x754 $x768 $x479)))
 (let ((?x227 (+ 13 ?x226 ?x338 ?x339 ?x367 ?x175 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x292)))
 (let ((?x140 (+ c!3 k!2)))
 (let ((?x126 (+ k!2 m!1)))
 (let ((?x228 (* ?x402 ?x402 ?x402 ?x402 ?x402 ?x402 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x126 ?x126 ?x126 ?x126 ?x126 ?x126 ?x126 ?x126 ?x140 ?x140 ?x140 ?x140 ?x140 ?x227)))
 (let (($x414 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x385 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x175) (* 9 (* c!3 n!0)))))
 (let (($x100 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x385 4) $x414 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x228 0)))))
 (let (($x734 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x422 (* (- 5) m)))
 (let ((?x477 (+ 13 (* (- 27) c) (* (- 32) k) ?x422 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x482 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x330 (* ?x337 ?x337 ?x337 ?x337 ?x337 ?x337 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x68 ?x477)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x208 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x204 (= ?x208 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x204 $x256 $x294 (not (= ?x330 0))))))))))))))))))) :qid k!34))
 ))
 (let (($x481 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x422 (* (- 5) m)))
 (let ((?x346 (* (- 18) c)))
 (let ((?x366 (+ 13 ?x346 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x422 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x482 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x446 (* ?x337 ?x337 ?x337 ?x337 ?x337 ?x337 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x68 ?x366)))
 (let (($x287 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x111 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x331 (= (+ ?x346 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x331 $x111 $x287 (not (= ?x446 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x435 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x422 (* (- 5) m)))
 (let ((?x477 (+ 13 (* (- 27) c) (* (- 32) k) ?x422 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x482 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x330 (* ?x337 ?x337 ?x337 ?x337 ?x337 ?x337 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x68 ?x477)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x208 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x204 (= ?x208 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x450 (and $x120 $x204 $x256 $x294 (not (= ?x330 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x346 (* (- 18) c)))
 (let ((?x366 (+ 13 ?x346 (* (- 23) k) (* (- 9) (* ?x337 ?x68)) ?x422 ?x48 ?x78)))
 (let ((?x446 (* ?x337 ?x337 ?x337 ?x337 ?x337 ?x337 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x68 ?x366)))
 (let (($x287 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x111 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x331 (= (+ ?x346 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x224 (and $x120 $x331 $x111 $x287 (not (= ?x446 0)))))
 (rewrite (= $x224 $x450))))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x81 (- 1)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x82 (* (+ ?x76 (* 9 ?x70) ?x78) ?x72 ?x72 ?x72 ?x80 ?x80 ?x81 ?x68 ?x72 ?x80 ?x80 ?x70 ?x70 ?x70 ?x81 ?x68 ?x68 ?x68 ?x72 ?x80 ?x80 ?x81 ?x68 ?x72 ?x72 ?x72 ?x80 ?x70 ?x70 ?x70)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x488 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x422 (* (- 5) m)))
 (let ((?x346 (* (- 18) c)))
 (let ((?x366 (+ 13 ?x346 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x422 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x482 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x446 (* ?x337 ?x337 ?x337 ?x337 ?x337 ?x337 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x482 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x68 ?x366)))
 (let (($x287 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x111 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x331 (= (+ ?x346 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x224 (and $x120 $x331 $x111 $x287 (not (= ?x446 0)))))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x81 (- 1)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x82 (* (+ ?x76 (* 9 ?x70) ?x78) ?x72 ?x72 ?x72 ?x80 ?x80 ?x81 ?x68 ?x72 ?x80 ?x80 ?x70 ?x70 ?x70 ?x81 ?x68 ?x68 ?x68 ?x72 ?x80 ?x80 ?x81 ?x68 ?x72 ?x72 ?x72 ?x80 ?x70 ?x70 ?x70)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x224))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x484 (mp (mp @x88 (quant-intro (proof-bind ?x488) (= $x87 $x481)) $x481) (rewrite (= $x481 $x481)) $x481)))
 (let ((@x192 (mp~ (mp @x484 (quant-intro (proof-bind ?x435) (= $x481 $x734)) $x734) (sk (~ $x734 $x100)) $x100)))
 (let ((@x669 (mp @x192 (rewrite (= $x100 $x783)) $x783)))
 (let ((@x759 (and-elim @x669 $x379)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x379) $x217)) @x759 $x217)))
 (let (($x99 (>= ?x386 (- 4))))
 (let ((@x215 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x379) $x99)) @x759 $x99)))
 (let (($x159 (<= ?x753 (- 1))))
 (let ((@x761 (and-elim @x669 $x754)))
 (let ((@x236 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x754) $x159)) @x761 $x159)))
 (let (($x158 (>= ?x753 (- 1))))
 (let ((@x267 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x754) $x158)) @x761 $x158)))
 (let (($x221 (<= ?x92 (- 6))))
 (let ((@x792 (and-elim @x669 $x97)))
 (let ((@x460 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x97) $x221)) @x792 $x221)))
 (let (($x220 (>= ?x92 (- 6))))
 (let ((@x186 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x97) $x220)) @x792 $x220)))
 (let (($x406 (<= ?x767 (- 1))))
 (let ((@x760 (and-elim @x669 $x768)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x768) $x406)) @x760 $x406)))
 (let (($x398 (>= ?x767 (- 1))))
 (let ((@x319 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x768) $x398)) @x760 $x398)))
 (let ((@x2107 ((_ th-lemma arith) (hypothesis (not $x1948)) @x186 @x460 @x319 @x250 @x319 @x250 @x186 @x460 @x267 @x236 @x215 @x277 false)))
 (let ((@x2031 (lemma @x2107 $x1948)))
 (let (($x620 (>= ?x495 0)))
 (let ((@x624 ((_ th-lemma arith) (hypothesis (not $x620)) @x186 @x460 @x319 @x250 @x319 @x250 @x186 @x460 @x319 @x250 @x267 @x236 @x215 @x277 @x267 @x236 false)))
 (let ((@x737 (lemma @x624 $x620)))
 (let (($x185 (not (>= ?x487 0))))
 (let (($x483 (<= ?x487 0)))
 (let ((@x2019 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x780 (not $x483) $x185)) (and-elim @x669 $x479) (or (not $x483) $x185))))
 (let ((@x2101 (unit-resolution @x2019 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x483)) @x737 @x2031 false) $x483) $x185)))
 ((_ th-lemma arith farkas 1 1 1) @x2101 @x737 @x2031 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 147
 :arith-assert-diseq        33
 :arith-assert-lower        1306
 :arith-assert-upper        1019
 :arith-bound-prop          58
 :arith-branch-var          38
 :arith-conflicts           103
 :arith-eq-adapter          22
 :arith-fixed-eqs           226
 :arith-gcd-tests           728
 :arith-gomory-cuts         30
 :arith-grobner             131
 :arith-ineq-splits         38
 :arith-max-min             6851
 :arith-nonlinear-bounds    150
 :arith-nonlinear-horner    1427
 :arith-num-rows            18
 :arith-offset-eqs          4
 :arith-patches             123
 :arith-patches_succ        48
 :arith-pivots              4400
 :arith-pseudo-nonlinear    224
 :arith-row-summations      34819
 :arith-tableau-max-columns 54
 :arith-tableau-max-rows    18
 :conflicts                 107
 :decisions                 267
 :del-clause                122
 :final-checks              361
 :max-memory                20.15
 :memory                    19.33
 :minimized-lits            58
 :mk-bool-var               466
 :mk-clause                 464
 :num-allocs                5091020
 :num-checks                1
 :propagations              447
 :restarts                  1
 :rlimit-count              1732785
 :time                      0.23
 :total-time                0.25)
