unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x350 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x153 (>= ?x350 0)))
 (let (($x138 (= ?x350 0)))
 (let ((?x172 (* 7 x!1)))
 (let ((?x215 (* (- 5) (* x!1 x!1))))
 (let ((?x124 (* y!0 y!0)))
 (let ((?x123 (* x!1 x!1 x!1)))
 (let ((?x364 (+ (- 3) ?x123 ?x124 ?x215 ?x172 (* y!0 x!1 x!1 x!1) (* (- 4) (* y!0 x!1 x!1)) (* (- 1) (* y!0 y!0 x!1)) (* 3 (* y!0 x!1)))))
 (let ((?x374 (* (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1) ?x364)))
 (let (($x394 (= ?x374 0)))
 (let (($x370 (not $x394)))
 (let (($x262 (and $x138 $x370)))
 (let ((?x390 (+ (- 3) ?x172 (* 3 (* x!1 y!0)) (* (- 4) (* x!1 x!1 y!0)) ?x215 (* x!1 x!1 x!1 y!0) ?x123 ?x124 (* (- 1) (* x!1 y!0 y!0)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x64 (+ x!1 y!0 ?x55 ?x62)))
 (let (($x238 (and (= ?x64 0) (not (= (* ?x64 ?x390) 0)))))
 (let (($x146 (exists ((x Int) (y Int) )(! (let ((?x389 (* (- 1) (* x y y))))
 (let ((?x349 (* y y)))
 (let ((?x239 (* x x x)))
 (let ((?x225 (* x x x y)))
 (let ((?x274 (* (- 4) (* x x y))))
 (let ((?x216 (+ (- 3) (* 7 x) (* 3 (* x y)) ?x274 (* (- 5) (* x x)) ?x225 ?x239 ?x349 ?x389)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (and $x81 (not (= (* ?x76 ?x216) 0))))))))))))) :qid k!26))
 ))
 (let (($x445 (exists ((x Int) (y Int) )(! (let ((?x389 (* (- 1) (* x y y))))
 (let ((?x349 (* y y)))
 (let ((?x239 (* x x x)))
 (let ((?x225 (* x x x y)))
 (let ((?x274 (* (- 4) (* x x y))))
 (let ((?x415 (+ (- 3) (* 6 x) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) (* 2 (* x y)) ?x274 (* (- 4) (* x x)) ?x225 ?x239 ?x349 ?x389)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (and $x81 (not (= (* ?x76 ?x415) 0))))))))))))) :qid k!26))
 ))
 (let ((?x121 (lambda ((x Int) (y Int) )(let ((?x389 (* (- 1) (* x y y))))
 (let ((?x349 (* y y)))
 (let ((?x239 (* x x x)))
 (let ((?x225 (* x x x y)))
 (let ((?x274 (* (- 4) (* x x y))))
 (let ((?x216 (+ (- 3) (* 7 x) (* 3 (* x y)) ?x274 (* (- 5) (* x x)) ?x225 ?x239 ?x349 ?x389)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (let (($x205 (and $x81 (not (= (* ?x76 ?x216) 0)))))
 (let ((?x415 (+ (- 3) (* 6 x) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) (* 2 (* x y)) ?x274 (* (- 4) (* x x)) ?x225 ?x239 ?x349 ?x389)))
 (let (($x161 (and $x81 (not (= (* ?x76 ?x415) 0)))))
 (rewrite (= $x161 $x205))))))))))))))))
 ))
 (let (($x298 (exists ((x Int) (y Int) )(! (let ((?x203 (+ (- 1) x (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x397 (+ x ?x55 ?x62 y)))
 (and (= ?x397 0) (not (= (* ?x397 ?x203) 0))))))) :qid k!26))
 ))
 (let ((?x84 (lambda ((x Int) (y Int) )(let ((?x389 (* (- 1) (* x y y))))
 (let ((?x349 (* y y)))
 (let ((?x239 (* x x x)))
 (let ((?x225 (* x x x y)))
 (let ((?x274 (* (- 4) (* x x y))))
 (let ((?x415 (+ (- 3) (* 6 x) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) (* 2 (* x y)) ?x274 (* (- 4) (* x x)) ?x225 ?x239 ?x349 ?x389)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (let (($x161 (and $x81 (not (= (* ?x76 ?x415) 0)))))
 (let ((?x203 (+ (- 1) x (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let ((?x397 (+ x ?x55 ?x62 y)))
 (let (($x226 (and (= ?x397 0) (not (= (* ?x397 ?x203) 0)))))
 (rewrite (= $x226 $x161)))))))))))))))))
 ))
 (let (($x52 (exists ((x Int) (y Int) )(! (let ((?x34 (- x 1)))
 (let ((?x42 (+ (- ?x34 (* ?x34 ?x34 (+ y 1))) (* ?x34 ?x34 ?x34 (+ y 1)))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x34 ?x34)) (* ?x34 (+ y 1) (+ y 1))))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0))))))) :qid k!26))
 ))
 (let ((?x222 (lambda ((x Int) (y Int) )(let ((?x203 (+ (- 1) x (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x397 (+ x ?x55 ?x62 y)))
 (let (($x226 (and (= ?x397 0) (not (= (* ?x397 ?x203) 0)))))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (- ?x34 (* ?x34 ?x34 (+ y 1))) (* ?x34 ?x34 ?x34 (+ y 1)))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x34 ?x34)) (* ?x34 (+ y 1) (+ y 1))))))
 (let (($x51 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0))))))
 (rewrite (= $x51 $x226))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (let ((@x197 (mp (mp @x53 (quant-intro (proof-bind ?x222) (= $x52 $x298)) $x298) (rewrite (= $x298 $x298)) $x298)))
 (let ((@x213 (mp (mp @x197 (quant-intro (proof-bind ?x84) (= $x298 $x445)) $x445) (quant-intro (proof-bind ?x121) (= $x445 $x146)) $x146)))
 (let ((@x393 (mp (mp~ @x213 (sk (~ $x146 $x238)) $x238) (rewrite (= $x238 $x262)) $x262)))
 (let ((@x343 (and-elim @x393 $x138)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x138) $x153)) @x343 $x153)))
 (let (($x232 (<= ?x350 0)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x138) $x232)) @x343 $x232)))
 (let (($x141 (not (>= ?x374 0))))
 (let (($x365 (<= ?x374 0)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x394 (not $x365) $x141)) (and-elim @x393 $x370) (or (not $x365) $x141))))
 (let ((@x292 (unit-resolution @x152 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x365)) @x296 @x332 false) $x365) $x141)))
 ((_ th-lemma arith farkas 1 1 1) @x292 @x296 @x332 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             46
 :arith-nonlinear-bounds    4
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.48
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1055784
 :num-checks                1
 :propagations              4
 :rlimit-count              1578
 :time                      0.01
 :total-time                0.01)
