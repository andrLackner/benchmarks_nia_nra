unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun b!7 () Real)
(declare-fun a!8 () Real)
(declare-fun d!6 () Real)
(proof
(let ((?x375 (* (- (/ 1.0 8.0)) (* b00 a!8 b!7 b!7 d!6 d!6 y!5 y!5 y!5 y!5))))
 (let ((?x236 (* (/ 1.0 8.0) (* b00 y00 a!8 b!7 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x162 (* (/ 1.0 16.0) (* d00 a!8 a!8 b!7 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x349 (* (- (/ 1.0 16.0)) (* a00 d00 a!8 b!7 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x356 (+ (* (/ 1.0 4.0) (* b00 y00 a!8 a!8 b!7 b!7 b!7 y!5 y!5)) ?x349 ?x162 ?x236 ?x375 (* (/ 1.0 64.0) (* a00 d00 a!8 b!7 b!7 b!7 d!6 d!6 d!6)) (* (- (/ 1.0 64.0)) (* d00 a!8 a!8 b!7 b!7 b!7 d!6 d!6 d!6)) (* (- (/ 1.0 32.0)) (* b00 y00 a!8 b!7 b!7 b!7 d!6 d!6 d!6)) (* (/ 1.0 32.0) (* b00 a!8 b!7 b!7 b!7 d!6 d!6 d!6 y!5)) (* (- (/ 1.0 8.0)) (* a00 d00 a!8 a!8 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 8.0) (* d00 a!8 a!8 a!8 b!7 b!7 b!7 y!5 y!5)) (* (- (/ 1.0 4.0)) (* b00 a!8 a!8 b!7 b!7 b!7 y!5 y!5 y!5)))))
 (let (($x317 (>= ?x356 0.0)))
 (let (($x112 (not $x317)))
 (let (($x697 (= 0.0 ?x356)))
 (let (($x448 (not $x697)))
 (let ((@x716 (symm (commutativity (= $x697 (= ?x356 0.0))) (= (= ?x356 0.0) $x697))))
 (let (($x357 (= ?x356 0.0)))
 (let (($x394 (not $x357)))
 (let ((?x685 (* b00 d!6)))
 (let ((?x684 (* 2.0 (* b00 y!5))))
 (let ((?x674 (* (- 1.0) (* d00 a!8))))
 (let ((?x565 (* d00 b!7)))
 (let ((?x435 (* (- 1.0) ?x565)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x302 (+ (* (/ 1.0 16.0) (* a!8 b!7 b!7 b!7 b!7 d!6 d!6)) (* (/ 1.0 32.0) (* b!7 b!7 b!7 b!7 b!7 d!6 d!6)) (* (/ 1.0 8.0) (* b!7 b!7 b!7 b!7 b!7 d!6 y!5)) (* (/ 1.0 4.0) (* a!8 b!7 b!7 b!7 b!7 d!6 y!5)) (* (/ 1.0 32.0) (* a!8 a!8 b!7 b!7 b!7 d!6 d!6)) (* (/ 1.0 8.0) (* a!8 a!8 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 4.0) (* a!8 b!7 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 16.0) (* a!8 b!7 b!7 d!6 d!6 y!5 y!5 y!5)) (* (- (/ 1.0 64.0)) (* a!8 b!7 b!7 b!7 d!6 d!6 d!6)) (* (/ 1.0 16.0) (* b!7 b!7 b!7 d!6 d!6 y!5 y!5 y!5)) (* (/ 3.0 32.0) (* b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5)) (* (/ 3.0 32.0) (* a!8 b!7 b!7 d!6 d!6 d!6 y!5 y!5)) (* (/ 3.0 64.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5)) (* (/ 3.0 64.0) (* a!8 b!7 b!7 d!6 d!6 d!6 d!6 y!5)) (* (/ 1.0 128.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6)) (* (/ 1.0 128.0) (* a!8 b!7 b!7 d!6 d!6 d!6 d!6 d!6)) (* (/ 1.0 8.0) (* b!7 b!7 b!7 b!7 b!7 y!5 y!5)) (* (/ 1.0 8.0) (* a!8 a!8 b!7 b!7 b!7 d!6 y!5)) (* (- (/ 1.0 64.0)) (* b!7 b!7 b!7 b!7 d!6 d!6 d!6)))))
 (let (($x397 (= (* ?x302 (+ ?x30 ?x86 ?x435 ?x674 ?x684 ?x685)) 0.0)))
 (let ((?x722 (+ ?x30 ?x435 ?x86 ?x674 ?x684 ?x685)))
 (let (($x723 (= ?x722 0.0)))
 (let ((?x719 (+ (* 2.0 (* y00 b!7)) (* a!8 d!6) (* (- 1.0) (* a00 d!6)) (* (- 2.0) (* b!7 y!5)))))
 (let (($x725 (= ?x719 0.0)))
 (let (($x291 (not $x397)))
 (let (($x444 (or $x394 $x291)))
 (let ((?x567 (+ ?x565 (* (- 1.0) ?x685))))
 (let (($x689 (= ?x567 0.0)))
 (let ((?x419 (+ ?x30 ?x86 ?x674 ?x684)))
 (let (($x692 (= ?x419 0.0)))
 (let (($x295 (and $x692 $x689 $x725 $x444)))
 (let ((?x524 (* d!6 b00)))
 (let ((?x602 (* 2.0 (* y!5 b00))))
 (let ((?x624 (* (- 1.0) (* a!8 d00))))
 (let ((?x654 (+ (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 32.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 32.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 64.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 64.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7)) (* (/ 1.0 8.0) (* y!5 y!5 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* y!5 y!5 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* y!5 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* y!5 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* y!5 d!6 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 a!8 a!8)))))
 (let (($x657 (= (* ?x654 (+ ?x30 ?x624 ?x86 ?x602 (* (- 1.0) (* b!7 d00)) ?x524)) 0.0)))
 (let ((?x750 (* (/ 1.0 8.0) (* y!5 y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 b00))))
 (let ((?x675 (* (- (/ 1.0 8.0)) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 b00 y00))))
 (let ((?x671 (* (- (/ 1.0 16.0)) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 d00))))
 (let ((?x664 (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a00 d00))))
 (let ((?x721 (+ ?x664 ?x671 ?x675 ?x750 (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 a00 d00)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 d00)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 b00 y00)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 b00)) (* (/ 1.0 8.0) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8 a00 d00)) (* (- (/ 1.0 8.0)) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8 a!8 d00)) (* (- (/ 1.0 4.0)) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8 b00 y00)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8 b00)))))
 (let ((?x632 (+ (* d!6 a!8) (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x662 (and (= (+ ?x30 ?x624 ?x86 ?x602) 0.0) (= (+ (* b!7 d00) (* (- 1.0) ?x524)) 0.0) (= ?x632 0.0) (or (not (= ?x721 0.0)) (not $x657)))))
 (let (($x129 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x132 (* d b00)))
 (let ((?x126 (* b d00)))
 (let ((?x127 (* (- 1.0) ?x126)))
 (let ((?x92 (* 2.0 (* y b00))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x107 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let ((?x804 (+ ?x169 ?x207 ?x226 (* (/ 1.0 16.0) (* y y y d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b a)) (* (/ 3.0 64.0) (* y d d d d b b b)) (* (/ 3.0 64.0) (* y d d d d b b a)) (* (/ 1.0 128.0) (* d d d d d b b b)) (* (/ 1.0 128.0) (* d d d d d b b a)) (* (- (/ 1.0 64.0)) (* d d d b b b b)) (* (/ 1.0 8.0) (* y y b b b b b)) (* (/ 1.0 4.0) (* y y b b b b a)) (* (/ 1.0 8.0) (* y d b b b b b)) (* (/ 1.0 4.0) (* y d b b b b a)) (* (/ 1.0 8.0) (* y d b b b a a)) (* (/ 1.0 32.0) (* d d b b b b b)) (* (/ 1.0 16.0) (* d d b b b b a)) (* (/ 1.0 32.0) (* d d b b b a a)))))
 (let ((?x382 (+ (* (/ 1.0 16.0) (* y y y d d b b a a00 d00)) (* (- (/ 1.0 16.0)) (* y y y d d b b a a d00)) (* (- (/ 1.0 8.0)) (* y y y d d b b a b00 y00)) (* (/ 1.0 8.0) (* y y y y d d b b a b00)) (* (- (/ 1.0 64.0)) (* d d d b b b a a00 d00)) (* (/ 1.0 64.0) (* d d d b b b a a d00)) (* (/ 1.0 32.0) (* d d d b b b a b00 y00)) (* (- (/ 1.0 32.0)) (* y d d d b b b a b00)) (* (/ 1.0 8.0) (* y y b b b a a a00 d00)) (* (- (/ 1.0 8.0)) (* y y b b b a a a d00)) (* (- (/ 1.0 4.0)) (* y y b b b a a b00 y00)) (* (/ 1.0 4.0) (* y y y b b b a a b00)))))
 (let (($x149 (not (= ?x382 0.0))))
 (let (($x237 (or $x149 (not (= (* ?x804 (+ ?x30 ?x107 ?x86 ?x92 ?x127 ?x132)) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x188 (= (+ ?x131 ?x153 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ ?x126 (* (- 1.0) ?x132)) 0.0)))
 (let (($x118 (= (+ ?x30 ?x107 ?x86 ?x92) 0.0)))
 (and $x118 $x124 $x188 $x237))))))))))))))))))))) :qid k!33))
 ))
 (let (($x644 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x371 (+ ?x86 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x577 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x794 (+ (* (/ 1.0 16.0) (* ?x64 ?x577 ?x577 ?x577 d d b b)) (* (- (/ 1.0 64.0)) (* ?x64 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x577 ?x577 b b b)))))
 (let ((?x168 (* 2.0 (* b00 y))))
 (let ((?x104 (+ ?x86 ?x30 ?x168 (* (- 1.0) (* d00 a)))))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let (($x642 (or (not (= (* (+ ?x169 ?x207 ?x226) ?x104) 0.0)) (not (= (* ?x794 ?x371) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x753 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (and (= ?x104 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x753 $x642))))))))))))))))) :qid k!33))
 ))
 (let ((?x119 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x132 (* d b00)))
 (let ((?x126 (* b d00)))
 (let ((?x127 (* (- 1.0) ?x126)))
 (let ((?x92 (* 2.0 (* y b00))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x107 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let ((?x804 (+ ?x169 ?x207 ?x226 (* (/ 1.0 16.0) (* y y y d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b b)) (* (/ 3.0 32.0) (* y y d d d b b a)) (* (/ 3.0 64.0) (* y d d d d b b b)) (* (/ 3.0 64.0) (* y d d d d b b a)) (* (/ 1.0 128.0) (* d d d d d b b b)) (* (/ 1.0 128.0) (* d d d d d b b a)) (* (- (/ 1.0 64.0)) (* d d d b b b b)) (* (/ 1.0 8.0) (* y y b b b b b)) (* (/ 1.0 4.0) (* y y b b b b a)) (* (/ 1.0 8.0) (* y d b b b b b)) (* (/ 1.0 4.0) (* y d b b b b a)) (* (/ 1.0 8.0) (* y d b b b a a)) (* (/ 1.0 32.0) (* d d b b b b b)) (* (/ 1.0 16.0) (* d d b b b b a)) (* (/ 1.0 32.0) (* d d b b b a a)))))
 (let ((?x382 (+ (* (/ 1.0 16.0) (* y y y d d b b a a00 d00)) (* (- (/ 1.0 16.0)) (* y y y d d b b a a d00)) (* (- (/ 1.0 8.0)) (* y y y d d b b a b00 y00)) (* (/ 1.0 8.0) (* y y y y d d b b a b00)) (* (- (/ 1.0 64.0)) (* d d d b b b a a00 d00)) (* (/ 1.0 64.0) (* d d d b b b a a d00)) (* (/ 1.0 32.0) (* d d d b b b a b00 y00)) (* (- (/ 1.0 32.0)) (* y d d d b b b a b00)) (* (/ 1.0 8.0) (* y y b b b a a a00 d00)) (* (- (/ 1.0 8.0)) (* y y b b b a a a d00)) (* (- (/ 1.0 4.0)) (* y y b b b a a b00 y00)) (* (/ 1.0 4.0) (* y y y b b b a a b00)))))
 (let (($x149 (not (= ?x382 0.0))))
 (let (($x237 (or $x149 (not (= (* ?x804 (+ ?x30 ?x107 ?x86 ?x92 ?x127 ?x132)) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x188 (= (+ ?x131 ?x153 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ ?x126 (* (- 1.0) ?x132)) 0.0)))
 (let (($x118 (= (+ ?x30 ?x107 ?x86 ?x92) 0.0)))
 (let (($x253 (and $x118 $x124 $x188 $x237)))
 (let ((?x371 (+ ?x86 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x577 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x794 (+ (* (/ 1.0 16.0) (* ?x64 ?x577 ?x577 ?x577 d d b b)) (* (- (/ 1.0 64.0)) (* ?x64 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x577 ?x577 b b b)))))
 (let ((?x168 (* 2.0 (* b00 y))))
 (let ((?x104 (+ ?x86 ?x30 ?x168 (* (- 1.0) (* d00 a)))))
 (let (($x642 (or (not (= (* (+ ?x169 ?x207 ?x226) ?x104) 0.0)) (not (= (* ?x794 ?x371) 0.0)))))
 (let (($x753 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x384 (and (= ?x104 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x753 $x642)))
 (rewrite (= $x384 $x253))))))))))))))))))))))))))))))))))
 ))
 (let (($x77 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x52 (/ d 2.0)))
 (let ((?x61 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x64 (+ a b)))
 (let ((?x69 (- (* ?x64 ?x51 ?x51 ?x52 ?x52 ?x61 ?x61 ?x61) (* ?x64 ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x72 (* (- (+ ?x27 ?x30 (* 2.0 b00 ?x61)) (* ?x64 d00)) (+ ?x69 (* ?x64 ?x64 ?x51 ?x51 ?x51 ?x61 ?x61)))))
 (let ((?x55 (- (* a ?x51 ?x51 ?x52 ?x52 y y y) (* a ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ ?x27 ?x30 (* 2.0 b00 y)) ?x33)))
 (let (($x59 (= (* ?x34 (+ ?x55 (* a a ?x51 ?x51 ?x51 y y))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x59) (not (= ?x72 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x240 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x371 (+ ?x86 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x577 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x794 (+ (* (/ 1.0 16.0) (* ?x64 ?x577 ?x577 ?x577 d d b b)) (* (- (/ 1.0 64.0)) (* ?x64 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x577 ?x577 b b b)))))
 (let ((?x168 (* 2.0 (* b00 y))))
 (let ((?x104 (+ ?x86 ?x30 ?x168 (* (- 1.0) (* d00 a)))))
 (let ((?x226 (* (/ 1.0 8.0) (* y y b b b a a))))
 (let ((?x207 (* (- (/ 1.0 64.0)) (* d d d b b b a))))
 (let ((?x169 (* (/ 1.0 16.0) (* y y y d d b b a))))
 (let (($x642 (or (not (= (* (+ ?x169 ?x207 ?x226) ?x104) 0.0)) (not (= (* ?x794 ?x371) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x753 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x384 (and (= ?x104 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x753 $x642)))
 (let ((?x52 (/ d 2.0)))
 (let ((?x61 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x69 (- (* ?x64 ?x51 ?x51 ?x52 ?x52 ?x61 ?x61 ?x61) (* ?x64 ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x66 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 ?x61)) (* ?x64 d00))))
 (let (($x73 (= (* ?x66 (+ ?x69 (* ?x64 ?x64 ?x51 ?x51 ?x51 ?x61 ?x61))) 0.0)))
 (let ((?x55 (- (* a ?x51 ?x51 ?x52 ?x52 y y y) (* a ?x51 ?x51 ?x51 ?x52 ?x52 ?x52))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33)))
 (let (($x59 (= (* ?x34 (+ ?x55 (* a a ?x51 ?x51 ?x51 y y))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x76 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x59) (not $x73)))))
 (rewrite (= $x76 $x384)))))))))))))))))))))))))))))))))
 ))
 (let ((@x78 (asserted $x77)))
 (let ((@x139 (mp (mp @x78 (quant-intro (proof-bind ?x240) (= $x77 $x644)) $x644) (quant-intro (proof-bind ?x119) (= $x644 $x129)) $x129)))
 (let ((@x445 (mp (mp~ @x139 (sk (~ $x129 $x662)) $x662) (rewrite (= $x662 $x295)) $x295)))
 (let ((@x729 (and-elim @x445 $x725)))
 (let (($x686 (<= ?x719 0.0)))
 (let (($x690 (= 0.0 ?x719)))
 (let ((@x475 (mp @x729 (symm (commutativity (= $x690 $x725)) (= $x725 $x690)) $x690)))
 (let ((@x473 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x690) $x686)) @x475 $x686)))
 (let (($x701 (>= ?x719 0.0)))
 (let ((@x467 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x690) $x701)) @x475 $x701)))
 (let (($x735 (<= ?x722 0.0)))
 (let (($x678 (<= ?x419 0.0)))
 (let (($x682 (= 0.0 ?x419)))
 (let ((@x506 (mp (and-elim @x445 $x692) (symm (commutativity (= $x682 $x692)) (= $x692 $x682)) $x682)))
 (let ((@x781 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x682) $x678)) @x506 $x678)))
 (let (($x681 (>= ?x567 0.0)))
 (let (($x677 (= 0.0 ?x567)))
 (let ((@x791 (mp (and-elim @x445 $x689) (symm (commutativity (= $x677 $x689)) (= $x689 $x677)) $x677)))
 (let ((@x88 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x677) $x681)) @x791 $x681)))
 (let (($x741 (>= ?x722 0.0)))
 (let (($x680 (>= ?x419 0.0)))
 (let ((@x387 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x682) $x680)) @x506 $x680)))
 (let (($x688 (<= ?x567 0.0)))
 (let ((@x390 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x677) $x688)) @x791 $x688)))
 (let ((@x461 ((_ th-lemma arith) (lemma ((_ th-lemma arith) (hypothesis (not $x741)) @x390 @x387 false) $x741) (lemma ((_ th-lemma arith) @x88 @x781 (hypothesis (not $x735)) false) $x735) @x467 @x473 (= ?x719 ?x722))))
 (let (($x312 (or (not $x723) $x397)))
 (let ((@x443 (unit-resolution ((_ th-lemma arith) $x312) (hypothesis $x291) (hypothesis $x723) false)))
 (let ((@x277 (unit-resolution (lemma @x443 $x312) (trans* (symm @x461 (= ?x722 ?x719)) @x729 $x723) $x397)))
 (let ((@x560 (mp (unit-resolution (and-elim @x445 $x444) @x277 $x394) (monotonicity @x716 (= $x394 $x448)) $x448)))
 (let (($x691 (<= ?x356 0.0)))
 (let ((@x490 (unit-resolution ((_ th-lemma arith) (or (not $x680) (not $x678) $x691)) @x781 @x387 (hypothesis (not $x691)) false)))
 (let ((@x246 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x697 (not $x691) $x112)) (lemma @x490 $x691) @x560 $x112)))
 (unit-resolution ((_ th-lemma arith) (or (not $x686) (not $x701) (not $x688) (not $x681) $x317)) @x390 @x88 @x473 @x467 @x246 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       23
 :arith-eq-adapter                17
 :arith-bound-propagations-cheap  15
 :arith-conflicts                 53
 :arith-diseq                     25
 :arith-fixed-eqs                 1
 :arith-grobner-calls             3
 :arith-grobner-conflicts         2
 :arith-horner-calls              3
 :arith-horner-cross-nested-forms 6
 :arith-lower                     33
 :arith-make-feasible             25
 :arith-max-columns               61
 :arith-max-rows                  7
 :arith-nla-explanations          11
 :arith-nla-lemmas                50
 :arith-propagations              15
 :arith-upper                     37
 :conflicts                       8
 :decisions                       29
 :del-clause                      21
 :final-checks                    21
 :max-memory                      2.07
 :memory                          1.15
 :mk-bool-var                     107
 :mk-clause                       78
 :num-allocs                      1746569
 :num-checks                      1
 :propagations                    34
 :rlimit-count                    5397
 :time                            0.01
 :total-time                      0.02)
