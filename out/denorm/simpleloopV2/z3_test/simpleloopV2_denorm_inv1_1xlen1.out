unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x260 (* (- 1) y!0)))
 (let ((?x259 (* (- 1) x!1)))
 (let ((?x262 (+ y00 x00 ?x259 ?x260)))
 (let (($x275 (<= ?x262 0)))
 (let (($x263 (= ?x262 0)))
 (let ((?x279 (* x!1 y!0 y!0)))
 (let ((?x123 (* (- 1) ?x279)))
 (let ((?x240 (* y!0 y!0 y!0)))
 (let ((?x171 (* (- 1) ?x240)))
 (let ((?x161 (* y!0 y!0)))
 (let ((?x139 (* 2 ?x161)))
 (let ((?x152 (* y00 y!0 y!0)))
 (let ((?x127 (* x!1 y!0)))
 (let ((?x158 (* 2 ?x127)))
 (let ((?x57 (* x00 y!0 y!0)))
 (let ((?x69 (+ y00 x00 ?x57 ?x259 ?x158 ?x152 ?x139 ?x171 (* (- 2) (* y00 y!0)) ?x260 ?x123 (* (- 2) (* x00 y!0)))))
 (let (($x70 (= ?x69 0)))
 (let ((?x140 (* (- 2) ?x161)))
 (let ((?x119 (* (- 2) ?x127)))
 (let ((?x129 (+ y00 x00 ?x57 ?x259 ?x119 ?x152 ?x140 ?x171 (* 2 (* y00 y!0)) ?x260 ?x123 (* 2 (* x00 y!0)))))
 (let (($x146 (= ?x129 0)))
 (let (($x178 (not $x146)))
 (let (($x242 (or $x178 (not $x70))))
 (let (($x65 (and $x263 $x242)))
 (let ((?x217 (* (- 1) (* y!0 y!0 x00))))
 (let ((?x216 (* (- 1) (* y!0 y!0 y00))))
 (let ((?x194 (* y!0 x00)))
 (let ((?x218 (* y!0 y00)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x157 (+ x!1 y!0 ?x55 ?x62 ?x279 ?x240 ?x119 ?x140 ?x218 ?x194 ?x216 ?x217 (* (- 1) (* y!0 ?x55)) (* (- 1) (* y!0 ?x62)))))
 (let ((?x61 (+ x!1 y!0 ?x55 ?x62 ?x279 ?x240 ?x158 ?x139 (* (- 2) ?x218) (* (- 2) ?x194) ?x216 ?x217)))
 (let (($x135 (and (= (+ x!1 y!0 ?x55 ?x62) 0) (or (not (= ?x61 0)) (not (= ?x157 0))))))
 (let (($x137 (exists ((x Int) (y Int) )(! (let ((?x193 (* (- 1) (* y y x00))))
 (let ((?x189 (* (- 1) (* y y y00))))
 (let ((?x170 (* y x00)))
 (let ((?x160 (* y y00)))
 (let ((?x153 (* y y)))
 (let ((?x289 (* (- 2) ?x153)))
 (let ((?x150 (* x y)))
 (let ((?x288 (* (- 2) ?x150)))
 (let ((?x134 (* y y y)))
 (let ((?x133 (* x y y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x131 (+ x y ?x55 ?x62 ?x133 ?x134 ?x288 ?x289 ?x160 ?x170 ?x189 ?x193 (* (- 1) (* y ?x55)) (* (- 1) (* y ?x62)))))
 (let ((?x205 (+ x y ?x55 ?x62 ?x133 ?x134 (* 2 ?x150) (* 2 ?x153) (* (- 2) ?x160) (* (- 2) ?x170) ?x189 ?x193)))
 (let (($x59 (not (= ?x205 0))))
 (let (($x81 (= (+ x y ?x55 ?x62) 0)))
 (and $x81 (or $x59 (not (= ?x131 0)))))))))))))))))))) :qid k!27))
 ))
 (let (($x138 (exists ((x Int) (y Int) )(! (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x163 (+ x ?x55 ?x62 y)))
 (let ((?x283 (+ (- 1) y)))
 (let (($x143 (or (not (= (* (+ 1 y) (+ 1 y) ?x163) 0)) (not (= (* ?x283 ?x283 ?x163) 0)))))
 (and (= ?x163 0) $x143)))))) :qid k!27))
 ))
 (let ((?x149 (lambda ((x Int) (y Int) )(let ((?x193 (* (- 1) (* y y x00))))
 (let ((?x189 (* (- 1) (* y y y00))))
 (let ((?x170 (* y x00)))
 (let ((?x160 (* y y00)))
 (let ((?x153 (* y y)))
 (let ((?x289 (* (- 2) ?x153)))
 (let ((?x150 (* x y)))
 (let ((?x288 (* (- 2) ?x150)))
 (let ((?x134 (* y y y)))
 (let ((?x133 (* x y y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x131 (+ x y ?x55 ?x62 ?x133 ?x134 ?x288 ?x289 ?x160 ?x170 ?x189 ?x193 (* (- 1) (* y ?x55)) (* (- 1) (* y ?x62)))))
 (let ((?x205 (+ x y ?x55 ?x62 ?x133 ?x134 (* 2 ?x150) (* 2 ?x153) (* (- 2) ?x160) (* (- 2) ?x170) ?x189 ?x193)))
 (let (($x59 (not (= ?x205 0))))
 (let (($x81 (= (+ x y ?x55 ?x62) 0)))
 (let (($x94 (and $x81 (or $x59 (not (= ?x131 0))))))
 (let (($x142 (= (* (+ (- 1) y) (+ (- 1) y) (+ x ?x55 ?x62 y)) 0)))
 (let (($x281 (= (* (+ 1 y) (+ 1 y) (+ x ?x55 ?x62 y)) 0)))
 (let (($x233 (and (= (+ x ?x55 ?x62 y) 0) (or (not $x281) (not $x142)))))
 (rewrite (= $x233 $x94)))))))))))))))))))))))
 ))
 (let (($x52 (exists ((x Int) (y Int) )(! (let ((?x45 (- y 1)))
 (let (($x48 (= (* (+ (- (- (+ x 1) y00) x00) ?x45) ?x45 ?x45) 0)))
 (let ((?x38 (+ y 1)))
 (let (($x40 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x38 ?x38) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x40) (not $x48))))))) :qid k!27))
 ))
 (let ((?x166 (lambda ((x Int) (y Int) )(let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x163 (+ x ?x55 ?x62 y)))
 (let ((?x283 (+ (- 1) y)))
 (let (($x143 (or (not (= (* (+ 1 y) (+ 1 y) ?x163) 0)) (not (= (* ?x283 ?x283 ?x163) 0)))))
 (let (($x233 (and (= ?x163 0) $x143)))
 (let ((?x45 (- y 1)))
 (let (($x48 (= (* (+ (- (- (+ x 1) y00) x00) ?x45) ?x45 ?x45) 0)))
 (let ((?x38 (+ y 1)))
 (let (($x40 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x38 ?x38) 0)))
 (let (($x51 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x40) (not $x48)))))
 (rewrite (= $x51 $x233))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (let ((@x256 (mp (mp @x53 (quant-intro (proof-bind ?x166) (= $x52 $x138)) $x138) (rewrite (= $x138 $x138)) $x138)))
 (let ((@x136 (mp~ (mp @x256 (quant-intro (proof-bind ?x149) (= $x138 $x137)) $x137) (sk (~ $x137 $x135)) $x135)))
 (let ((@x286 (mp @x136 (rewrite (= $x135 $x65)) $x65)))
 (let ((@x162 (and-elim @x286 $x263)))
 (let ((@x126 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x263) $x275)) @x162 $x275)))
 (let (($x282 (>= ?x262 0)))
 (let ((@x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x263) $x282)) @x162 $x282)))
 (let (($x121 (<= ?x69 0)))
 (let ((@x287 (lemma ((_ th-lemma arith) (hypothesis (not $x121)) @x169 @x126 @x169 @x126 false) $x121)))
 (let (($x177 (>= ?x69 0)))
 (let ((@x174 (lemma ((_ th-lemma arith) (hypothesis (not $x177)) @x169 @x126 @x169 @x126 false) $x177)))
 (let (($x125 (not (<= ?x129 0))))
 (let ((@x183 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x70 (not $x121) (not $x177))) @x287 @x174 $x70)))
 (let (($x154 (>= ?x129 0)))
 (let ((@x175 (lemma ((_ th-lemma arith) (hypothesis (not $x154)) @x174 @x287 @x169 @x126 false) $x154)))
 (let ((@x184 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x146 $x125 (not $x154))) @x175 (unit-resolution (and-elim @x286 $x242) @x183 $x178) $x125)))
 ((_ th-lemma arith) @x184 @x174 @x287 @x169 @x126 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        4
 :arith-assert-lower        9
 :arith-assert-upper        8
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           10
 :arith-grobner             4
 :arith-max-min             188
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             6
 :arith-patches_succ        6
 :arith-pivots              3
 :arith-row-summations      3
 :arith-tableau-max-columns 19
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 5
 :del-clause                3
 :final-checks              8
 :max-memory                19.53
 :memory                    19.15
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                450986
 :num-checks                1
 :propagations              13
 :rlimit-count              2074
 :time                      0.01
 :total-time                0.02)
