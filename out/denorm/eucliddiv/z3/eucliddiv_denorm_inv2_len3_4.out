unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x68 (* y00 q00)))
 (let ((?x358 (+ r00 ?x68 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x327 (>= ?x358 0)))
 (let (($x359 (= ?x358 0)))
 (let ((?x193 (* (- 1) (* q!2 r!1 r!1))))
 (let ((?x444 (* (- 1) (* r!1 r!1))))
 (let ((?x295 (* (- 1) (* y00 y00 y00))))
 (let ((?x220 (* (- 1) (* y00 y00))))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x195 (+ ?x63 (* (- 3) (* y00 q!2)) (* 2 (* y00 y00 q!2 r!1)) (* 2 (* y00 r!1)) ?x220 (* (- 1) (* y00 y00 y00 q!2)) (* 2 (* y00 q!2 r!1)) ?x295 (* 2 (* y00 y00 r!1)) ?x444 (* (- 3) (* y00 q!2 q!2)) (* (- 1) (* y00 q!2 q!2 q!2)) (* (- 1) (* y00 y00 q!2)) (* (- 1) (* y00 r!1 r!1)) (* (- 1) (* y00 q!2 r!1 r!1)) ?x193)))
 (let ((?x204 (* ?x195 (+ (* (- 1) r00) (* (- 1) ?x68) (* y00 q!2) r!1))))
 (let (($x365 (= ?x204 0)))
 (let (($x267 (not $x365)))
 (let (($x367 (and (= (+ y00 (* (- 1) y!0)) 0) $x359 $x267)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x397 (* q!2 y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x398 (+ r!1 ?x64 ?x397 ?x78)))
 (let ((?x338 (+ ?x63 (* (- 3) ?x397) ?x444 ?x193 (* (- 3) (* q!2 q!2 y00)) (* (- 1) (* q!2 q!2 q!2 y00)) ?x220 (* (- 1) (* q!2 y00 y00)) (* (- 1) (* r!1 r!1 y00)) (* (- 1) (* q!2 r!1 r!1 y00)) (* 2 (* r!1 y00 y00)) (* 2 (* r!1 y00)) (* 2 (* q!2 r!1 y00 y00)) ?x295 (* (- 1) (* q!2 y00 y00 y00)) (* 2 (* q!2 r!1 y00)))))
 (let (($x335 (and (= (+ y!0 ?x63) 0) (= ?x398 0) (not (= (* ?x338 ?x398) 0)))))
 (let (($x67 (exists ((q Int) (r Int) (y Int) )(! (let ((?x68 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x92 (+ r ?x64 ?x39 ?x78)))
 (let ((?x296 (* (- 1) (* q y00 y00 y00))))
 (let ((?x295 (* (- 1) (* y00 y00 y00))))
 (let ((?x304 (* 2 (* q r y00 y00))))
 (let ((?x301 (* 2 (* r y00 y00))))
 (let ((?x292 (* (- 1) (* q r r y00))))
 (let ((?x291 (* (- 1) (* r r y00))))
 (let ((?x220 (* (- 1) (* y00 y00))))
 (let ((?x207 (* (- 1) (* q q q y00))))
 (let ((?x215 (* (- 3) (* q q y00))))
 (let ((?x141 (* (- 1) (* q r r))))
 (let ((?x139 (* (- 1) (* r r))))
 (let ((?x212 (* (- 3) ?x39)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x401 (+ ?x63 ?x212 ?x139 ?x141 ?x215 ?x207 ?x220 (* (- 1) (* q y00 y00)) ?x291 ?x292 ?x301 (* 2 (* r y00)) ?x304 ?x295 ?x296 (* 2 (* q r y00)))))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y ?x63) 0)))
 (and $x74 $x97 (not (= (* ?x401 ?x92) 0)))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x86 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x308 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x236 (+ (* (- 1) (* (+ 1 q) (+ r ?x63) (+ r ?x63))) (* (- 1) (* y00 (+ 1 q) (+ 1 q) (+ 1 q))) (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63))))))
 (let (($x269 (= (* ?x236 (+ r ?x63 ?x64 ?x308 (* y00 (+ 1 q)))) 0)))
 (let (($x297 (not $x269)))
 (let (($x126 (= (+ r ?x64 ?x308 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x126 $x297))))))))) :qid k!29))
 ))
 (let ((?x108 (lambda ((q Int) (r Int) (y Int) )(let ((?x68 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x92 (+ r ?x64 ?x39 ?x78)))
 (let ((?x296 (* (- 1) (* q y00 y00 y00))))
 (let ((?x295 (* (- 1) (* y00 y00 y00))))
 (let ((?x304 (* 2 (* q r y00 y00))))
 (let ((?x301 (* 2 (* r y00 y00))))
 (let ((?x292 (* (- 1) (* q r r y00))))
 (let ((?x291 (* (- 1) (* r r y00))))
 (let ((?x220 (* (- 1) (* y00 y00))))
 (let ((?x207 (* (- 1) (* q q q y00))))
 (let ((?x215 (* (- 3) (* q q y00))))
 (let ((?x141 (* (- 1) (* q r r))))
 (let ((?x139 (* (- 1) (* r r))))
 (let ((?x212 (* (- 3) ?x39)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x401 (+ ?x63 ?x212 ?x139 ?x141 ?x215 ?x207 ?x220 (* (- 1) (* q y00 y00)) ?x291 ?x292 ?x301 (* 2 (* r y00)) ?x304 ?x295 ?x296 (* 2 (* q r y00)))))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y ?x63) 0)))
 (let (($x409 (and $x74 $x97 (not (= (* ?x401 ?x92) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x308 (* (- 1) ?x36)))
 (let ((?x236 (+ (* (- 1) (* (+ 1 q) (+ r ?x63) (+ r ?x63))) (* (- 1) (* y00 (+ 1 q) (+ 1 q) (+ 1 q))) (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63))))))
 (let (($x269 (= (* ?x236 (+ r ?x63 ?x64 ?x308 (* y00 (+ 1 q)))) 0)))
 (let (($x297 (not $x269)))
 (let (($x126 (= (+ r ?x64 ?x308 (* y00 q)) 0)))
 (let (($x258 (and (= (+ y00 (* (- 1) y)) 0) $x126 $x297)))
 (rewrite (= $x258 $x409))))))))))))))))))))))))))))))))
 ))
 (let (($x307 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x308 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x236 (+ (* (- 1) (* (+ 1 q) (+ r ?x63) (+ r ?x63))) (* (- 1) (* y00 (+ 1 q) (+ 1 q) (+ 1 q))) (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63))))))
 (let (($x269 (= (* ?x236 (+ r ?x63 ?x64 ?x308 (* y00 (+ 1 q)))) 0)))
 (let (($x297 (not $x269)))
 (let (($x126 (= (+ r ?x64 ?x308 (* y00 q)) 0)))
 (and (= (+ ?x63 y) 0) $x126 $x297))))))))) :qid k!29))
 ))
 (let ((?x216 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x308 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x236 (+ (* (- 1) (* (+ 1 q) (+ r ?x63) (+ r ?x63))) (* (- 1) (* y00 (+ 1 q) (+ 1 q) (+ 1 q))) (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63))))))
 (let (($x269 (= (* ?x236 (+ r ?x63 ?x64 ?x308 (* y00 (+ 1 q)))) 0)))
 (let (($x297 (not $x269)))
 (let (($x126 (= (+ r ?x64 ?x308 (* y00 q)) 0)))
 (let (($x258 (and (= (+ y00 (* (- 1) y)) 0) $x126 $x297)))
 (let (($x174 (and (= (+ ?x63 y) 0) $x126 $x297)))
 (rewrite (= $x174 $x258)))))))))))))
 ))
 (let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x51 (- (* (- 1) (+ q 1) (- r y00) (- r y00)) (* (+ q 1) (+ q 1) (+ q 1) y00))))
 (let ((?x47 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (let ((?x53 (* ?x47 (- ?x51 (* (+ q 1) (- r y00) (- r y00) y00)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x53 0))))))) :qid k!29))
 ))
 (let ((?x249 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x308 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x236 (+ (* (- 1) (* (+ 1 q) (+ r ?x63) (+ r ?x63))) (* (- 1) (* y00 (+ 1 q) (+ 1 q) (+ 1 q))) (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63))))))
 (let (($x269 (= (* ?x236 (+ r ?x63 ?x64 ?x308 (* y00 (+ 1 q)))) 0)))
 (let (($x297 (not $x269)))
 (let (($x126 (= (+ r ?x64 ?x308 (* y00 q)) 0)))
 (let (($x174 (and (= (+ ?x63 y) 0) $x126 $x297)))
 (let ((?x51 (- (* (- 1) (+ q 1) (- r y00) (- r y00)) (* (+ q 1) (+ q 1) (+ q 1) y00))))
 (let ((?x53 (* (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00)) (- ?x51 (* (+ q 1) (- r y00) (- r y00) y00)))))
 (let (($x57 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x53 0))))))
 (rewrite (= $x57 $x174)))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x84 (mp (mp @x59 (quant-intro (proof-bind ?x249) (= $x58 $x307)) $x307) (rewrite (= $x307 $x307)) $x307)))
 (let ((@x192 (mp (mp @x84 (quant-intro (proof-bind ?x216) (= $x307 $x86)) $x86) (quant-intro (proof-bind ?x108) (= $x86 $x67)) $x67)))
 (let ((@x290 (mp (mp~ @x192 (sk (~ $x67 $x335)) $x335) (rewrite (= $x335 $x367)) $x367)))
 (let ((@x355 (and-elim @x290 $x359)))
 (let ((@x357 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x359) $x327)) @x355 $x327)))
 (let (($x326 (<= ?x358 0)))
 (let ((@x351 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x359) $x326)) @x355 $x326)))
 (let (($x347 (not (<= ?x204 0))))
 (let (($x331 (>= ?x204 0)))
 (let ((@x342 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x365 $x347 (not $x331))) (and-elim @x290 $x267) (or $x347 (not $x331)))))
 (let ((@x130 (unit-resolution @x342 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x331)) @x351 @x357 false) $x331) $x347)))
 ((_ th-lemma arith farkas 1 1 1) @x130 @x351 @x357 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             90
 :arith-nonlinear-bounds    4
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.56
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1101161
 :num-checks                1
 :propagations              6
 :rlimit-count              2228
 :time                      0.01
 :total-time                0.01)
