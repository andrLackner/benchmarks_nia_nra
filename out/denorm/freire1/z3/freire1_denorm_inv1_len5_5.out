unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x503 (* r!1 r!1)))
 (let ((?x292 (* 2 x!0)))
 (let ((?x286 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x424 (+ r00 ?x86 ?x102 ?x286 ?x292 ?x503)))
 (let (($x125 (<= ?x424 0)))
 (let (($x405 (= ?x424 0)))
 (let ((?x131 (* (- 1) (* r!1 r!1 r!1 r!1 r!1))))
 (let ((?x536 (* (- 3) (* r!1 r!1 r!1 r!1))))
 (let ((?x505 (* (- 1) ?x503)))
 (let ((?x480 (* r!1 r!1 x!0 x!0 x!0)))
 (let ((?x271 (* 3 (* r!1 r!1 r!1 r!1 x!0))))
 (let ((?x285 (* (- 1) (* x!0 x!0))))
 (let ((?x498 (* (- 9) (* r!1 r!1 x!0 x!0))))
 (let ((?x289 (* (- 3) (* r!1 r!1 r!1 x!0 x!0))))
 (let ((?x282 (* 9 (* r!1 r!1 r!1 x!0))))
 (let ((?x302 (* 2 (* r!1 x!0))))
 (let ((?x283 (* (- 7) (* r!1 x!0 x!0))))
 (let ((?x193 (* 8 (* r!1 r!1 x!0))))
 (let ((?x177 (* 3 (* r!1 x!0 x!0 x!0))))
 (let ((?x280 (* (- 3) (* r!1 r!1 r!1))))
 (let ((?x171 (* 2 (* x!0 x!0 x!0))))
 (let ((?x254 (+ ?x171 ?x280 ?x177 ?x193 ?x283 ?x302 ?x282 ?x289 ?x498 ?x285 ?x271 ?x480 ?x505 ?x536 ?x131)))
 (let ((?x80 (* ?x254 ?x424)))
 (let (($x87 (= ?x80 0)))
 (let (($x90 (not $x87)))
 (let (($x88 (and $x405 $x90)))
 (let ((?x236 (+ ?x505 ?x171 ?x177 ?x480 ?x280 ?x536 ?x131 ?x193 ?x282 ?x271 ?x283 ?x498 ?x289 ?x285 ?x302)))
 (let (($x425 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x505 (* 2 x00) ?x36) 0)))
 (let (($x360 (and $x425 (not (= (* ?x236 (+ ?x286 ?x292 r00 ?x503 ?x86 ?x102)) 0)))))
 (let (($x495 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x549 (+ ?x118 (* 2 (* x x x)) (* 3 (* r x x x)) (* r r x x x) (* (- 3) (* r r r)) (* (- 3) (* r r r r)) (* (- 1) (* r r r r r)) (* 8 (* r r x)) (* 9 (* r r r x)) (* 3 (* r r r r x)) (* (- 7) (* r x x)) (* (- 9) (* r r x x)) (* (- 3) (* r r r x x)) (* (- 1) (* x x)) (* 2 (* r x)))))
 (let (($x120 (= (+ r (* (- 2) x) (* (- 1) r00) ?x118 (* 2 x00) ?x36) 0)))
 (and $x120 (not (= (* ?x549 ?x108) 0))))))))))))) :qid k!26))
 ))
 (let (($x542 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x497 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x226 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x65 (* (- 1) r)))
 (let ((?x538 (+ x ?x65)))
 (let ((?x240 (+ 1 r)))
 (let ((?x291 (* (+ (* ?x240 ?x240 ?x538 ?x538 ?x538) (* ?x240 ?x538 ?x538 ?x538) ?x226) ?x497)))
 (let (($x142 (not (= ?x291 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x142))))))))))))))))) :qid k!26))
 ))
 (let ((?x384 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x549 (+ ?x118 (* 2 (* x x x)) (* 3 (* r x x x)) (* r r x x x) (* (- 3) (* r r r)) (* (- 3) (* r r r r)) (* (- 1) (* r r r r r)) (* 8 (* r r x)) (* 9 (* r r r x)) (* 3 (* r r r r x)) (* (- 7) (* r x x)) (* (- 9) (* r r x x)) (* (- 3) (* r r r x x)) (* (- 1) (* x x)) (* 2 (* r x)))))
 (let (($x120 (= (+ r (* (- 2) x) (* (- 1) r00) ?x118 (* 2 x00) ?x36) 0)))
 (let (($x81 (and $x120 (not (= (* ?x549 ?x108) 0)))))
 (let ((?x497 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x538 (+ x ?x65)))
 (let ((?x240 (+ 1 r)))
 (let ((?x279 (+ (* ?x240 ?x240 ?x538 ?x538 ?x538) (* ?x240 ?x538 ?x538 ?x538) (* (- 1) (* ?x240 ?x538 ?x538)))))
 (let (($x142 (not (= (* ?x279 ?x497) 0))))
 (let (($x531 (= (+ r (* (- 1) r00) ?x118 (* (- 2) x) (* 2 x00) ?x36) 0)))
 (let (($x533 (and $x531 $x142)))
 (rewrite (= $x533 $x81)))))))))))))))))))))
 ))
 (let (($x364 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x497 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x226 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x65 (* (- 1) r)))
 (let ((?x538 (+ x ?x65)))
 (let ((?x240 (+ 1 r)))
 (let ((?x291 (* (+ (* ?x240 ?x240 ?x538 ?x538 ?x538) (* ?x240 ?x538 ?x538 ?x538) ?x226) ?x497)))
 (let (($x142 (not (= ?x291 0))))
 (and (= (+ ?x65 r00 (* r r) ?x32 ?x86 ?x102) 0) $x142)))))))))))) :qid k!26))
 ))
 (let ((?x375 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x497 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x226 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x65 (* (- 1) r)))
 (let ((?x538 (+ x ?x65)))
 (let ((?x240 (+ 1 r)))
 (let ((?x291 (* (+ (* ?x240 ?x240 ?x538 ?x538 ?x538) (* ?x240 ?x538 ?x538 ?x538) ?x226) ?x497)))
 (let (($x142 (not (= ?x291 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x533 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x142)))
 (let (($x528 (and (= (+ ?x65 r00 ?x30 ?x32 ?x86 ?x102) 0) $x142)))
 (rewrite (= $x528 $x533)))))))))))))))))))))
 ))
 (let (($x60 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x52 (+ (* 0 ?x44) (* ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x44 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* ?x48 (- ?x52 (* ?x41 ?x44 ?x44))) 0))))))))))) :qid k!26))
 ))
 (let ((?x109 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x497 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x226 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x65 (* (- 1) r)))
 (let ((?x538 (+ x ?x65)))
 (let ((?x240 (+ 1 r)))
 (let ((?x291 (* (+ (* ?x240 ?x240 ?x538 ?x538 ?x538) (* ?x240 ?x538 ?x538 ?x538) ?x226) ?x497)))
 (let (($x142 (not (= ?x291 0))))
 (let (($x528 (and (= (+ ?x65 r00 (* r r) ?x32 ?x86 ?x102) 0) $x142)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x52 (+ (* 0 ?x44) (* ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x44 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x59 (and $x40 (or (not (= (* ?x48 (- ?x52 (* ?x41 ?x44 ?x44))) 0))))))
 (rewrite (= $x59 $x528))))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x103 (mp (mp @x61 (quant-intro (proof-bind ?x109) (= $x60 $x364)) $x364) (rewrite (= $x364 $x364)) $x364)))
 (let ((@x437 (mp (mp @x103 (quant-intro (proof-bind ?x375) (= $x364 $x542)) $x542) (quant-intro (proof-bind ?x384) (= $x542 $x495)) $x495)))
 (let ((@x377 (mp (mp~ @x437 (sk (~ $x495 $x360)) $x360) (rewrite (= $x360 $x88)) $x88)))
 (let ((@x89 (and-elim @x377 $x405)))
 (let ((@x147 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x125)) @x89 $x125)))
 (let (($x126 (>= ?x424 0)))
 (let ((@x175 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x126)) @x89 $x126)))
 (let (($x404 (not (>= ?x80 0))))
 (let (($x127 (<= ?x80 0)))
 (let ((@x408 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x87 (not $x127) $x404)) (and-elim @x377 $x90) (or (not $x127) $x404))))
 (let ((@x96 (unit-resolution @x408 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x127)) @x175 @x147 false) $x127) $x404)))
 ((_ th-lemma arith farkas 1 1 1) @x96 @x175 @x147 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 32
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.58
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1105212
 :num-checks                1
 :propagations              4
 :rlimit-count              1907
 :time                      0.01
 :total-time                0.01)
