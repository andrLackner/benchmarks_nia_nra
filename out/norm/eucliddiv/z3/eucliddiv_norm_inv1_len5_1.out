unsat
((set-logic NIA)
(proof
(let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x45 y00 y00 y00 y00)))
 (let ((?x46 (* 2 ?x42 ?x45 ?x45 ?x45 y00 y00 y00)))
 (let ((?x43 (* ?x42 ?x42 ?x42 y00 y00 y00)))
 (let ((?x47 (+ ?x43 ?x46)))
 (let ((?x48 (- ?x47 ?x43)))
 (let ((?x49 (- ?x48 ?x46)))
 (let ((?x51 (+ ?x49 y00 ?x50)))
 (let ((?x52 (- ?x51 y00)))
 (let ((?x53 (- ?x52 ?x50)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x56))))))))))))))))) :qid k!29))
 ))
 (let (($x414 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x415 (lambda ((q Int) (r Int) (y Int) )(let ((?x45 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x45 y00 y00 y00 y00)))
 (let ((?x46 (* 2 ?x42 ?x45 ?x45 ?x45 y00 y00 y00)))
 (let ((?x43 (* ?x42 ?x42 ?x42 y00 y00 y00)))
 (let ((?x47 (+ ?x43 ?x46)))
 (let ((?x48 (- ?x47 ?x43)))
 (let ((?x49 (- ?x48 ?x46)))
 (let ((?x51 (+ ?x49 y00 ?x50)))
 (let ((?x52 (- ?x51 y00)))
 (let ((?x53 (- ?x52 ?x50)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x57 (and $x33 $x41 $x56)))
 (let (($x71 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x255 (= (+ (* (- 1) y00) y) 0)))
 (let (($x407 (and $x255 $x71 false)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x182 (+ r ?x63)))
 (let ((?x61 (+ 1 q)))
 (let ((?x141 (* y00 y00 y00 y00 ?x61 ?x61 ?x61 ?x182)))
 (let ((?x385 (+ ?x141 (* (- 1) ?x141))))
 (let ((@x189 (rewrite (= ?x45 ?x182))))
 (let ((@x68 (rewrite (= ?x42 ?x61))))
 (let ((@x139 (monotonicity @x68 @x68 @x68 @x189 (= ?x50 (* ?x61 ?x61 ?x61 ?x182 y00 y00 y00 y00)))))
 (let ((@x149 (trans @x139 (rewrite (= (* ?x61 ?x61 ?x61 ?x182 y00 y00 y00 y00) ?x141)) (= ?x50 ?x141))))
 (let ((?x70 (* y00 y00 y00 ?x61 ?x182 ?x182 ?x182)))
 (let ((?x79 (* 2 ?x70)))
 (let ((?x117 (* (- 1) ?x79)))
 (let ((?x393 (+ ?x79 ?x117)))
 (let ((@x124 (monotonicity (rewrite (= ?x117 (* (- 2) ?x70))) (= ?x393 (+ ?x79 (* (- 2) ?x70))))))
 (let ((@x129 (trans @x124 (rewrite (= (+ ?x79 (* (- 2) ?x70)) 0)) (= ?x393 0))))
 (let ((@x69 (monotonicity @x68 @x189 @x189 @x189 (= ?x46 (* 2 ?x61 ?x182 ?x182 ?x182 y00 y00 y00)))))
 (let ((@x91 (trans @x69 (rewrite (= (* 2 ?x61 ?x182 ?x182 ?x182 y00 y00 y00) ?x79)) (= ?x46 ?x79))))
 (let ((?x318 (* y00 y00 y00 ?x61 ?x61 ?x61)))
 (let ((?x92 (+ ?x318 ?x79)))
 (let ((?x102 (+ ?x92 (* (- 1) ?x318))))
 (let ((@x265 (monotonicity @x68 @x68 @x68 (= ?x43 (* ?x61 ?x61 ?x61 y00 y00 y00)))))
 (let ((@x110 (trans @x265 (rewrite (= (* ?x61 ?x61 ?x61 y00 y00 y00) ?x318)) (= ?x43 ?x318))))
 (let ((@x106 (trans (monotonicity (rewrite (= ?x47 ?x92)) @x110 (= ?x48 (- ?x92 ?x318))) (rewrite (= (- ?x92 ?x318) ?x102)) (= ?x48 ?x102))))
 (let ((@x116 (monotonicity (trans @x106 (rewrite (= ?x102 ?x79)) (= ?x48 ?x79)) @x91 (= ?x49 (- ?x79 ?x79)))))
 (let ((@x133 (trans (trans @x116 (rewrite (= (- ?x79 ?x79) ?x393)) (= ?x49 ?x393)) @x129 (= ?x49 0))))
 (let ((@x160 (trans (monotonicity @x133 @x149 (= ?x51 (+ 0 y00 ?x141))) (rewrite (= (+ 0 y00 ?x141) (+ y00 ?x141))) (= ?x51 (+ y00 ?x141)))))
 (let ((@x360 (trans (monotonicity @x160 (= ?x52 (- (+ y00 ?x141) y00))) (rewrite (= (- (+ y00 ?x141) y00) (+ (+ y00 ?x141) ?x63))) (= ?x52 (+ (+ y00 ?x141) ?x63)))))
 (let ((@x381 (trans @x360 (rewrite (= (+ (+ y00 ?x141) ?x63) ?x141)) (= ?x52 ?x141))))
 (let ((@x389 (trans (monotonicity @x381 @x149 (= ?x53 (- ?x141 ?x141))) (rewrite (= (- ?x141 ?x141) ?x385)) (= ?x53 ?x385))))
 (let ((@x395 (monotonicity (trans @x389 (rewrite (= ?x385 0)) $x54) (= $x54 (= 0 0)))))
 (let ((@x400 (monotonicity (trans @x395 (rewrite (= (= 0 0) true)) (= $x54 true)) (= $x55 (not true)))))
 (let ((@x405 (monotonicity (trans @x400 (rewrite (= (not true) false)) (= $x55 false)) (= $x56 (or false)))))
 (let ((@x409 (monotonicity (rewrite (= $x33 $x255)) (rewrite (= $x41 $x71)) (trans @x405 (rewrite (= (or false) false)) (= $x56 false)) (= $x57 $x407))))
 (trans @x409 (rewrite (= $x407 false)) (= $x57 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x232 (trans (quant-intro (proof-bind ?x415) (= $x58 $x414)) (elim-unused (= $x414 false)) (= $x58 false))))
 (let ((@x59 (asserted $x58)))
 (mp @x59 @x232 false))))))))

(:max-memory   3.40
 :memory       3.09
 :mk-bool-var  5
 :num-allocs   920886
 :rlimit-count 419
 :time         0.01
 :total-time   0.01)
