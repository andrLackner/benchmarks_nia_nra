unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x484 (* (- 6) (* c!3 m!1))))
 (let ((?x483 (* (- 1) (* k!2 k!2))))
 (let ((?x452 (* (- 1) (* c!3 m!1 m!1 n!0))))
 (let ((?x405 (* (- 6) (* k!2 m!1))))
 (let ((?x463 (* c!3 c!3 m!1)))
 (let ((?x292 (* (- 6) (* k!2 m!1 n!0))))
 (let ((?x498 (* 5 (* c!3 c!3))))
 (let ((?x622 (* (- 1) (* k!2 k!2 m!1 n!0))))
 (let ((?x170 (* (- 1) (* c!3 m!1 m!1))))
 (let ((?x362 (+ k!2 c!3)))
 (let ((?x592 (+ 6 m!1)))
 (let ((?x279 (+ 1 n!0)))
 (let ((?x295 (* (- 1) (* k!2 m!1 m!1))))
 (let ((?x461 (* (- 6) (* c!3 m!1 n!0))))
 (let ((?x277 (* (- 6) (* k!2 k!2 n!0))))
 (let ((?x425 (* (- 1) (* k!2 m!1 m!1 n!0))))
 (let ((?x556 (+ (* ?x279 ?x592 ?x592 (+ k!2 m!1) (+ k!2 m!1) ?x362) (* 4 (* k!2 c!3)) ?x425 ?x277 ?x461 ?x295 (* (- 1) (* ?x279 ?x279 ?x279 ?x592 ?x362 ?x362)) (* (- 1) (* k!2 c!3 m!1 n!0)) ?x170 ?x622 ?x498 ?x292 ?x463 ?x405 ?x452 (* (- 6) (* k!2 c!3 n!0)) (* k!2 c!3 m!1) ?x483 ?x484)))
 (let (($x752 (<= ?x556 0)))
 (let ((?x105 (* (- 1) k!2)))
 (let ((?x534 (+ (* 3 (* n!0 n!0)) ?x105 (* 3 n!0))))
 (let (($x149 (<= ?x534 (- 1))))
 (let (($x218 (= ?x534 (- 1))))
 (let ((?x164 (* 2 n!0)))
 (let ((?x464 (* (- 3) c!3)))
 (let ((?x345 (* (- 3) k!2)))
 (let ((?x540 (* m!1 n!0)))
 (let ((?x189 (* k!2 n!0)))
 (let ((?x708 (* ?x556 (+ 3 ?x189 ?x540 ?x345 ?x464 ?x164))))
 (let (($x468 (= ?x708 0)))
 (let (($x510 (not $x468)))
 (let ((?x101 (+ ?x189 ?x105 ?x464 ?x164)))
 (let (($x523 (= ?x101 (- 1))))
 (let ((?x626 (* (- 9) n!0)))
 (let ((?x524 (* 18 c!3)))
 (let ((?x536 (* 5 k!2)))
 (let ((?x157 (* 9 (* c!3 n!0))))
 (let ((?x544 (+ m!1 (* (- 6) n!0))))
 (let (($x100 (= ?x544 6)))
 (let (($x474 (and $x100 (= (+ ?x157 ?x536 ?x524 ?x483 ?x626) 4) $x523 $x218 $x510)))
 (let ((?x276 (+ ?x483 (* (- 1) (* ?x279 ?x279 ?x279 ?x592 (+ c!3 k!2) (+ c!3 k!2))) (* ?x279 ?x592 ?x592 (+ k!2 m!1) (+ k!2 m!1) (+ c!3 k!2)) ?x498 (* (- 1) (* c!3 k!2 m!1 n!0)) ?x622 ?x452 ?x425 ?x484 ?x405 (* c!3 k!2 m!1) (* 4 (* c!3 k!2)) ?x170 ?x295 (* (- 6) (* c!3 k!2 n!0)) ?x277 ?x461 ?x292 ?x463)))
 (let (($x296 (and $x100 (= (+ ?x524 ?x536 ?x626 ?x483 ?x157) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x189)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x276 (+ 3 ?x464 ?x345 ?x164 ?x189 ?x540)) 0)))))
 (let (($x166 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x411 (+ 3 ?x223 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x609 (* c c m)))
 (let ((?x596 (* (- 6) (* k m n))))
 (let ((?x593 (* (- 6) (* c m n))))
 (let ((?x590 (* (- 6) (* k k n))))
 (let ((?x587 (* (- 6) (* c k n))))
 (let ((?x567 (* (- 1) (* k m m))))
 (let ((?x566 (* (- 1) (* c m m))))
 (let ((?x480 (* c k)))
 (let ((?x649 (* 4 ?x480)))
 (let ((?x453 (* c k m)))
 (let ((?x581 (* (- 6) (* k m))))
 (let ((?x578 (* (- 6) (* c m))))
 (let ((?x560 (* (- 1) (* k m m n))))
 (let ((?x559 (* (- 1) (* c m m n))))
 (let ((?x558 (* (- 1) (* k k m n))))
 (let ((?x557 (* (- 1) (* c k m n))))
 (let ((?x648 (* 5 (* c c))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x606 (+ ?x213 ?x181 ?x306 ?x648 ?x557 ?x558 ?x559 ?x560 ?x578 ?x581 ?x453 ?x649 ?x566 ?x567 ?x587 ?x590 ?x593 ?x596 ?x609)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x210 $x262 $x300 (not (= (* ?x606 ?x411) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x500 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x411 (+ 3 ?x223 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x609 (* c c m)))
 (let ((?x596 (* (- 6) (* k m n))))
 (let ((?x593 (* (- 6) (* c m n))))
 (let ((?x590 (* (- 6) (* k k n))))
 (let ((?x587 (* (- 6) (* c k n))))
 (let ((?x567 (* (- 1) (* k m m))))
 (let ((?x566 (* (- 1) (* c m m))))
 (let ((?x453 (* c k m)))
 (let ((?x581 (* (- 6) (* k m))))
 (let ((?x578 (* (- 6) (* c m))))
 (let ((?x560 (* (- 1) (* k m m n))))
 (let ((?x559 (* (- 1) (* c m m n))))
 (let ((?x558 (* (- 1) (* k k m n))))
 (let ((?x557 (* (- 1) (* c k m n))))
 (let ((?x648 (* 5 (* c c))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x220 (+ ?x213 ?x181 (* 6 (* k c)) ?x306 ?x648 ?x557 ?x558 ?x559 ?x560 ?x578 ?x581 ?x453 (* (- 2) (* c k)) ?x566 ?x567 ?x587 ?x590 ?x593 ?x596 ?x609)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x210 $x262 $x300 (not (= (* ?x220 ?x411) 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x520 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x411 (+ 3 ?x223 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x609 (* c c m)))
 (let ((?x596 (* (- 6) (* k m n))))
 (let ((?x593 (* (- 6) (* c m n))))
 (let ((?x590 (* (- 6) (* k k n))))
 (let ((?x587 (* (- 6) (* c k n))))
 (let ((?x567 (* (- 1) (* k m m))))
 (let ((?x566 (* (- 1) (* c m m))))
 (let ((?x480 (* c k)))
 (let ((?x649 (* 4 ?x480)))
 (let ((?x453 (* c k m)))
 (let ((?x581 (* (- 6) (* k m))))
 (let ((?x578 (* (- 6) (* c m))))
 (let ((?x560 (* (- 1) (* k m m n))))
 (let ((?x559 (* (- 1) (* c m m n))))
 (let ((?x558 (* (- 1) (* k k m n))))
 (let ((?x557 (* (- 1) (* c k m n))))
 (let ((?x648 (* 5 (* c c))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x606 (+ ?x213 ?x181 ?x306 ?x648 ?x557 ?x558 ?x559 ?x560 ?x578 ?x581 ?x453 ?x649 ?x566 ?x567 ?x587 ?x590 ?x593 ?x596 ?x609)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x187 (and $x126 $x210 $x262 $x300 (not (= (* ?x606 ?x411) 0)))))
 (let ((?x220 (+ ?x213 ?x181 (* 6 (* k c)) ?x306 ?x648 ?x557 ?x558 ?x559 ?x560 ?x578 ?x581 ?x453 (* (- 2) ?x480) ?x566 ?x567 ?x587 ?x590 ?x593 ?x596 ?x609)))
 (let (($x289 (and $x126 $x210 $x262 $x300 (not (= (* ?x220 ?x411) 0)))))
 (rewrite (= $x289 $x187)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x507 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x293 (+ 3 ?x223 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x71 (+ k m)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x199 (+ ?x306 (* (- 1) (* ?x68 ?x68)) (* (- 1) (* ?x343 ?x416 ?x71 ?x68)) (* ?x416 ?x68 ?x68) ?x181)))
 (let (($x324 (not (= (* ?x199 ?x293) 0))))
 (let (($x469 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x169 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x169 $x469 $x324)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x272 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x411 (+ 3 ?x223 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x609 (* c c m)))
 (let ((?x596 (* (- 6) (* k m n))))
 (let ((?x593 (* (- 6) (* c m n))))
 (let ((?x590 (* (- 6) (* k k n))))
 (let ((?x587 (* (- 6) (* c k n))))
 (let ((?x567 (* (- 1) (* k m m))))
 (let ((?x566 (* (- 1) (* c m m))))
 (let ((?x453 (* c k m)))
 (let ((?x581 (* (- 6) (* k m))))
 (let ((?x578 (* (- 6) (* c m))))
 (let ((?x560 (* (- 1) (* k m m n))))
 (let ((?x559 (* (- 1) (* c m m n))))
 (let ((?x558 (* (- 1) (* k k m n))))
 (let ((?x557 (* (- 1) (* c k m n))))
 (let ((?x648 (* 5 (* c c))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x220 (+ ?x213 ?x181 (* 6 (* k c)) ?x306 ?x648 ?x557 ?x558 ?x559 ?x560 ?x578 ?x581 ?x453 (* (- 2) (* c k)) ?x566 ?x567 ?x587 ?x590 ?x593 ?x596 ?x609)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x289 (and $x126 $x210 $x262 $x300 (not (= (* ?x220 ?x411) 0)))))
 (let ((?x199 (+ ?x306 (* (- 1) (* ?x68 ?x68)) (* (- 1) (* ?x343 ?x416 ?x71 ?x68)) (* ?x416 ?x68 ?x68) ?x181)))
 (let ((?x207 (* ?x199 (+ 3 ?x223 (* (- 4) k) (* ?x343 ?x71) (* (- 1) m) ?x59))))
 (let (($x324 (not (= ?x207 0))))
 (let (($x469 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x169 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x273 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x169 $x469 $x324)))
 (rewrite (= $x273 $x289)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x328 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x293 (+ 3 ?x223 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x71 (+ k m)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x199 (+ ?x306 (* (- 1) (* ?x68 ?x68)) (* (- 1) (* ?x343 ?x416 ?x71 ?x68)) (* ?x416 ?x68 ?x68) ?x181)))
 (let (($x324 (not (= (* ?x199 ?x293) 0))))
 (let (($x469 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x118 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 (= ?x118 (- 4)) (= (+ ?x223 (* n k) (* (- 1) k) ?x59) (- 1)) $x469 $x324))))))))))))))))) :qid k!34))
 ))
 (let ((?x505 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x293 (+ 3 ?x223 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x71 (+ k m)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x199 (+ ?x306 (* (- 1) (* ?x68 ?x68)) (* (- 1) (* ?x343 ?x416 ?x71 ?x68)) (* ?x416 ?x68 ?x68) ?x181)))
 (let (($x324 (not (= (* ?x199 ?x293) 0))))
 (let (($x469 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x169 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x273 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x169 $x469 $x324)))
 (let ((?x48 (* 9 n)))
 (let ((?x118 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x339 (and $x126 (= ?x118 (- 4)) (= (+ ?x223 (* n k) (* (- 1) k) ?x59) (- 1)) $x469 $x324)))
 (rewrite (= $x339 $x273))))))))))))))))))))))))))
 ))
 (let (($x93 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x80 (* ?x68 ?x68)))
 (let ((?x83 (- (- (* ?x68 (+ k m) (+ k m) ?x78 ?x78 ?x72) ?x80) (* ?x68 (+ k m) ?x78 ?x72))))
 (let ((?x71 (+ k m)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x88 (* ?x77 (- (+ ?x83 (* ?x68 ?x68 ?x78)) (* ?x68 ?x68 ?x78 ?x72 ?x72 ?x72)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x88 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x316 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x223 (* (- 3) c)))
 (let ((?x293 (+ 3 ?x223 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x416 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x181 (* (- 1) (* ?x343 ?x343 ?x343 ?x416 ?x68 ?x68))))
 (let ((?x71 (+ k m)))
 (let ((?x306 (* ?x343 ?x416 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x199 (+ ?x306 (* (- 1) (* ?x68 ?x68)) (* (- 1) (* ?x343 ?x416 ?x71 ?x68)) (* ?x416 ?x68 ?x68) ?x181)))
 (let (($x324 (not (= (* ?x199 ?x293) 0))))
 (let (($x469 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x118 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x339 (and $x126 (= ?x118 (- 4)) (= (+ ?x223 (* n k) (* (- 1) k) ?x59) (- 1)) $x469 $x324)))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x83 (- (- (* ?x68 ?x71 ?x71 ?x78 ?x78 ?x72) (* ?x68 ?x68)) (* ?x68 ?x71 ?x78 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x88 (* ?x77 (- (+ ?x83 (* ?x68 ?x68 ?x78)) (* ?x68 ?x68 ?x78 ?x72 ?x72 ?x72)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x92 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x88 0))))))
 (rewrite (= $x92 $x339))))))))))))))))))))))))))))))
 ))
 (let ((@x94 (asserted $x93)))
 (let ((@x278 (mp (mp @x94 (quant-intro (proof-bind ?x316) (= $x93 $x328)) $x328) (rewrite (= $x328 $x328)) $x328)))
 (let ((@x229 (mp (mp @x278 (quant-intro (proof-bind ?x505) (= $x328 $x507)) $x507) (quant-intro (proof-bind ?x272) (= $x507 $x500)) $x500)))
 (let ((@x528 (mp~ (mp @x229 (quant-intro (proof-bind ?x520) (= $x500 $x166)) $x166) (sk (~ $x166 $x296)) $x296)))
 (let ((@x249 (mp @x528 (rewrite (= $x296 $x474)) $x474)))
 (let ((@x418 (and-elim @x249 $x218)))
 (let ((@x247 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x149)) @x418 $x149)))
 (let (($x136 (>= ?x534 (- 1))))
 (let ((@x454 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x136)) @x418 $x136)))
 (let (($x539 (<= ?x101 (- 1))))
 (let ((@x286 (and-elim @x249 $x523)))
 (let ((@x636 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x523) $x539)) @x286 $x539)))
 (let (($x408 (>= ?x101 (- 1))))
 (let ((@x267 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x523) $x408)) @x286 $x408)))
 (let (($x496 (<= ?x544 6)))
 (let ((@x476 (and-elim @x249 $x100)))
 (let ((@x618 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x496)) @x476 $x496)))
 (let (($x494 (>= ?x544 6)))
 (let ((@x168 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x494)) @x476 $x494)))
 (let (($x767 (not $x752)))
 (let ((@x757 (hypothesis $x767)))
 (let (($x803 (not (<= ?x708 0))))
 (let (($x479 (>= ?x708 0)))
 (let (($x746 (>= ?x556 0)))
 (let (($x768 (not $x746)))
 (let (($x742 (= ?x556 0)))
 (let (($x740 (not $x742)))
 (let (($x305 (not $x479)))
 (let ((@x629 (hypothesis $x305)))
 (let ((@x758 ((_ th-lemma arith farkas 1 1 1) @x629 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x740 $x746)) (hypothesis $x742) $x746) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x740 $x752)) (hypothesis $x742) $x752) false)))
 (let ((@x771 (lemma ((_ th-lemma arith) @x629 @x757 @x168 @x618 @x267 @x636 @x454 @x247 false) (or $x752 $x479))))
 (let ((@x781 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x742 $x767 $x768)) (unit-resolution @x771 @x629 $x752) (unit-resolution (lemma @x758 (or $x740 $x479)) @x629 $x740) $x768)))
 (let ((@x766 (lemma ((_ th-lemma arith) @x629 @x781 @x168 @x618 @x267 @x636 @x454 @x247 false) $x479)))
 (let ((@x737 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x468 $x803 $x305)) (and-elim @x249 $x510) (or $x803 $x305))))
 (let ((@x792 (unit-resolution @x737 @x766 $x803)))
 (let ((@x801 (lemma ((_ th-lemma arith) @x792 @x757 @x168 @x618 @x267 @x636 @x454 @x247 false) $x752)))
 (let ((@x677 ((_ th-lemma arith) @x792 (hypothesis $x768) @x168 @x618 @x267 @x636 @x454 @x247 false)))
 ((_ th-lemma arith farkas 1 1 1) @x792 (lemma @x677 $x746) @x801 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 113
 :arith-assert-diseq        8
 :arith-assert-lower        436
 :arith-assert-upper        289
 :arith-bound-prop          2
 :arith-branch-var          9
 :arith-conflicts           24
 :arith-eq-adapter          16
 :arith-fixed-eqs           136
 :arith-gcd-tests           61
 :arith-gomory-cuts         6
 :arith-grobner             25
 :arith-ineq-splits         9
 :arith-max-min             3029
 :arith-nonlinear-bounds    184
 :arith-nonlinear-horner    297
 :arith-num-rows            21
 :arith-offset-eqs          11
 :arith-patches             21
 :arith-patches_succ        3
 :arith-pivots              243
 :arith-pseudo-nonlinear    130
 :arith-row-summations      996
 :arith-tableau-max-columns 67
 :arith-tableau-max-rows    21
 :conflicts                 25
 :decisions                 78
 :del-clause                76
 :final-checks              72
 :max-memory                4.12
 :memory                    3.19
 :minimized-lits            4
 :mk-bool-var               139
 :mk-clause                 111
 :num-allocs                35746928
 :num-checks                1
 :propagations              78
 :rlimit-count              263931
 :time                      0.36
 :total-time                0.36)
