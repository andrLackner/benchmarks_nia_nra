unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x627 (+ m!1 (* (- 6) n!0))))
 (let (($x159 (<= ?x627 6)))
 (let (($x608 (= ?x627 6)))
 (let ((?x305 (+ c!3 k!2)))
 (let ((?x391 (+ m!1 k!2)))
 (let ((?x533 (+ 6 m!1)))
 (let ((?x616 (+ 1 n!0)))
 (let ((?x185 (+ (* 6 (* ?x533 ?x533 ?x533 ?x391 ?x305 ?x305 ?x305)) (* ?x616 ?x616 ?x533 ?x533 ?x533 ?x391 ?x391 ?x391 ?x305 ?x305) (* 6 (* ?x616 ?x616 ?x616 ?x533 ?x533 ?x533 ?x391 ?x391 ?x305 ?x305)) (* (- 1) (* ?x616 ?x616 ?x533 ?x533 ?x533 ?x533 ?x391 ?x391 ?x305 ?x305)) (* (- 6) (* ?x616 ?x616 ?x533 ?x533 ?x391 ?x391 ?x391 ?x305 ?x305)) (* (- 6) (* ?x616 ?x616 ?x616 ?x533 ?x533 ?x391 ?x391 ?x391 ?x305 ?x305)) (* 6 (* ?x616 ?x616 ?x533 ?x533 ?x533 ?x391 ?x391 ?x305 ?x305)) (* 6 (* ?x616 ?x533 ?x533 ?x533 ?x391 ?x305 ?x305 ?x305)) (* (- 1) (* ?x533 ?x533 ?x533 ?x533 ?x391 ?x305 ?x305 ?x305)))))
 (let (($x129 (= ?x185 0)))
 (let (($x435 (not $x129)))
 (let (($x344 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1)))
 (let (($x420 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x201 (* (- 1) (* k!2 k!2))))
 (let ((?x539 (* (- 9) n!0)))
 (let ((?x537 (* 5 k!2)))
 (let ((?x532 (* 18 c!3)))
 (let ((?x214 (* 9 (* c!3 n!0))))
 (let (($x273 (and $x608 (= (+ ?x214 ?x532 ?x537 ?x539 ?x201) 4) $x420 $x344 $x435)))
 (let ((?x287 (+ k!2 m!1)))
 (let ((?x324 (+ (* 6 (* ?x616 ?x616 ?x616 ?x533 ?x533 ?x533 ?x287 ?x287 ?x305 ?x305)) (* (- 1) (* ?x533 ?x533 ?x533 ?x533 ?x287 ?x305 ?x305 ?x305)) (* 6 (* ?x616 ?x616 ?x533 ?x533 ?x533 ?x287 ?x287 ?x305 ?x305)) (* 6 (* ?x533 ?x533 ?x533 ?x287 ?x305 ?x305 ?x305)) (* (- 1) (* ?x616 ?x616 ?x533 ?x533 ?x533 ?x533 ?x287 ?x287 ?x305 ?x305)) (* (- 6) (* ?x616 ?x616 ?x616 ?x533 ?x533 ?x287 ?x287 ?x287 ?x305 ?x305)) (* (- 6) (* ?x616 ?x616 ?x533 ?x533 ?x287 ?x287 ?x287 ?x305 ?x305)) (* 6 (* ?x616 ?x533 ?x533 ?x533 ?x287 ?x305 ?x305 ?x305)) (* ?x616 ?x616 ?x533 ?x533 ?x533 ?x287 ?x287 ?x287 ?x305 ?x305))))
 (let (($x284 (and $x608 (= (+ ?x532 ?x537 ?x539 ?x201 ?x214) 4) $x420 $x344 (not (= ?x324 0)))))
 (let (($x178 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x508 (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x186 (+ (* 6 (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x306 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x311 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) ?x508)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x212 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x208 (= ?x212 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= ?x186 0)))))))))))))))) :qid k!34))
 ))
 (let (($x175 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x336 (* ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x311 (+ 1 n)))
 (let ((?x352 (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x176 (* ?x306 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x535 (+ ?x176 (* (- 6) (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x352 (* (- 6) ?x336))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x242 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x418 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x418 (- 4)) $x242 $x153 (not (= ?x535 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x395 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x508 (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x186 (+ (* 6 (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x306 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x311 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) ?x508)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x212 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x208 (= ?x212 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x280 (and $x124 $x208 $x260 $x298 (not (= ?x186 0)))))
 (let ((?x352 (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x176 (* ?x306 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x535 (+ ?x176 (* (- 6) (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x508) (* 6 (* ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x352 (* (- 6) (* ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x242 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x418 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x199 (and $x124 (= ?x418 (- 4)) $x242 $x153 (not (= ?x535 0)))))
 (rewrite (= $x199 $x280))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ n 1)))
 (let ((?x77 (- (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72))))
 (let ((?x78 (- ?x77 (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72 ?x72))))
 (let ((?x80 (- (- ?x78 (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x72)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72))))
 (let ((?x84 (+ ?x80 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72 ?x72) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72 ?x72 ?x72) (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x72 ?x72))))
 (let (($x88 (not (= (- ?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x88)))))))))))))))))) :qid k!34))
 ))
 (let ((?x180 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x336 (* ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x311 (+ 1 n)))
 (let ((?x352 (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x176 (* ?x306 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x535 (+ ?x176 (* (- 6) (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x311 ?x306 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x311 ?x311 ?x306 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x311 ?x311 ?x311 ?x306 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x352 (* (- 6) ?x336))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x242 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x418 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x199 (and $x124 (= ?x418 (- 4)) $x242 $x153 (not (= ?x535 0)))))
 (let ((?x70 (+ m 6)))
 (let ((?x72 (+ n 1)))
 (let ((?x77 (- (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72))))
 (let ((?x78 (- ?x77 (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72 ?x72))))
 (let ((?x80 (- (- ?x78 (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x72)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72))))
 (let ((?x84 (+ ?x80 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72 ?x72) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72 ?x72 ?x72) (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x72 ?x72))))
 (let (($x88 (not (= (- ?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x88))))
 (rewrite (= $x90 $x199)))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x271 (mp (mp @x92 (quant-intro (proof-bind ?x180) (= $x91 $x175)) $x175) (rewrite (= $x175 $x175)) $x175)))
 (let ((@x117 (mp~ (mp @x271 (quant-intro (proof-bind ?x395) (= $x175 $x178)) $x178) (sk (~ $x178 $x284)) $x284)))
 (let ((@x112 (mp @x117 (rewrite (= $x284 $x273)) $x273)))
 (let ((@x96 (and-elim @x112 $x608)))
 (let ((@x194 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x608) $x159)) @x96 $x159)))
 (let (($x554 (>= ?x627 6)))
 (let ((@x548 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x608) $x554)) @x96 $x554)))
 (let (($x255 (not (<= ?x185 0))))
 (let (($x222 (>= ?x185 0)))
 (let ((@x161 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x129 $x255 (not $x222))) (and-elim @x112 $x435) (or $x255 (not $x222)))))
 (let ((@x225 (unit-resolution @x161 (lemma ((_ th-lemma arith) (hypothesis (not $x222)) @x548 @x194 false) $x222) $x255)))
 ((_ th-lemma arith) @x225 @x548 @x194 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             193
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 38
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                19.60
 :memory                    19.09
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                523476
 :num-checks                1
 :propagations              11
 :rlimit-count              4162
 :time                      0.01
 :total-time                0.02)
