unsat
((set-logic NIA)
(proof
(let (($x73 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x71 (or $x70)))
 (let ((?x61 (* 3 n)))
 (let ((?x59 (* 3 n n)))
 (let ((?x60 (- ?x59 k)))
 (let ((?x62 (+ ?x60 ?x61)))
 (let (($x63 (= ?x62 0)))
 (let ((?x56 (* 2 n)))
 (let ((?x52 (* k n)))
 (let ((?x53 (+ (* (- 3) c) ?x52)))
 (let ((?x54 (- ?x53 k)))
 (let ((?x57 (+ ?x54 ?x56)))
 (let (($x58 (= ?x57 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x39 (* 9 c n)))
 (let ((?x37 (* 18 c)))
 (let ((?x42 (- 4 ?x37)))
 (let ((?x43 (- ?x42 ?x39)))
 (let ((?x44 (- ?x43 ?x41)))
 (let ((?x47 (+ ?x44 ?x45 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let ((?x31 (* 6 n)))
 (let ((?x29 (- 6)))
 (let ((?x30 (+ ?x29 m)))
 (let ((?x32 (- ?x30 ?x31)))
 (let (($x34 (= ?x32 0)))
 (and $x34 $x48 $x58 $x63 $x71))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x295 (= $x73 false)))
 (let (($x285 (exists ((c Int) (k Int) (m Int) (n Int) )(! false :qid k!33))
 ))
 (let ((@x294 (elim-unused (= $x285 false))))
 (let (($x288 (= $x73 $x285)))
 (let ((?x405 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x70 (not (= (- (+ (- 6) m 6) (* 6 (+ n 1))) 0))))
 (let (($x71 (or $x70)))
 (let ((?x61 (* 3 n)))
 (let ((?x59 (* 3 n n)))
 (let ((?x60 (- ?x59 k)))
 (let ((?x62 (+ ?x60 ?x61)))
 (let (($x63 (= ?x62 0)))
 (let ((?x56 (* 2 n)))
 (let ((?x52 (* k n)))
 (let ((?x53 (+ (* (- 3) c) ?x52)))
 (let ((?x54 (- ?x53 k)))
 (let ((?x57 (+ ?x54 ?x56)))
 (let (($x58 (= ?x57 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x39 (* 9 c n)))
 (let ((?x37 (* 18 c)))
 (let ((?x42 (- 4 ?x37)))
 (let ((?x43 (- ?x42 ?x39)))
 (let ((?x44 (- ?x43 ?x41)))
 (let ((?x47 (+ ?x44 ?x45 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let ((?x31 (* 6 n)))
 (let ((?x29 (- 6)))
 (let ((?x30 (+ ?x29 m)))
 (let ((?x32 (- ?x30 ?x31)))
 (let (($x34 (= ?x32 0)))
 (let (($x72 (and $x34 $x48 $x58 $x63 $x71)))
 (let (($x281 (= $x72 false)))
 (let (($x108 (= (+ m (* (- 6) n)) 6)))
 (let (($x324 (not $x108)))
 (let (($x396 (= (+ (* 3 (* n n)) (* (- 1) k) ?x61) 0)))
 (let (($x385 (= (+ (* (- 3) c) (* n k) (* (- 1) k) ?x56) 0)))
 (let ((?x161 (* (- 5) k)))
 (let ((?x309 (* n c)))
 (let ((?x315 (* (- 9) ?x309)))
 (let ((?x118 (* (- 18) c)))
 (let (($x353 (= (+ ?x118 ?x315 ?x161 ?x45 ?x46) (- 4))))
 (let (($x398 (and $x108 $x353 $x385 $x396 $x324)))
 (let ((@x275 (trans (monotonicity (rewrite (= $x70 $x324)) (= $x71 (or $x324))) (rewrite (= (or $x324) $x324)) (= $x71 $x324))))
 (let ((?x343 (+ 4 ?x118 ?x315 ?x161 ?x45 ?x46)))
 (let ((?x333 (+ 4 ?x118 ?x315 ?x161)))
 (let ((?x340 (+ ?x333 ?x45 ?x46)))
 (let ((?x283 (+ 4 ?x118 ?x315)))
 (let ((?x330 (+ ?x283 ?x161)))
 (let ((?x154 (* (- 1) ?x41)))
 (let ((?x322 (+ ?x283 ?x154)))
 (let ((@x163 (rewrite (= ?x154 ?x161))))
 (let ((@x337 (trans (monotonicity @x163 (= ?x322 ?x330)) (rewrite (= ?x330 ?x333)) (= ?x322 ?x333))))
 (let ((?x121 (+ 4 ?x118)))
 (let ((?x76 (+ ?x121 ?x315)))
 (let ((?x311 (* 9 ?x309)))
 (let ((?x307 (* (- 1) ?x311)))
 (let ((?x297 (+ ?x121 ?x307)))
 (let ((@x300 (trans (monotonicity (rewrite (= ?x307 ?x315)) (= ?x297 ?x76)) (rewrite (= ?x76 ?x283)) (= ?x297 ?x283))))
 (let ((@x120 (trans (rewrite (= ?x42 (+ 4 (* (- 1) ?x37)))) (rewrite (= (+ 4 (* (- 1) ?x37)) ?x121)) (= ?x42 ?x121))))
 (let ((@x314 (trans (monotonicity @x120 (rewrite (= ?x39 ?x311)) (= ?x43 (- ?x121 ?x311))) (rewrite (= (- ?x121 ?x311) ?x297)) (= ?x43 ?x297))))
 (let ((@x321 (monotonicity (trans @x314 @x300 (= ?x43 ?x283)) (= ?x44 (- ?x283 ?x41)))))
 (let ((@x339 (trans (trans @x321 (rewrite (= (- ?x283 ?x41) ?x322)) (= ?x44 ?x322)) @x337 (= ?x44 ?x333))))
 (let ((@x347 (trans (monotonicity @x339 (= ?x47 ?x340)) (rewrite (= ?x340 ?x343)) (= ?x47 ?x343))))
 (let ((@x357 (trans (monotonicity @x347 (= $x48 (= ?x343 0))) (rewrite (= (= ?x343 0) $x353)) (= $x48 $x353))))
 (let ((?x91 (* (- 6) n)))
 (let ((?x97 (+ (- 6) m ?x91)))
 (let ((?x85 (* (- 1) ?x31)))
 (let ((?x78 (+ (- 6) m)))
 (let ((?x86 (+ ?x78 ?x85)))
 (let ((@x101 (trans (monotonicity (rewrite (= ?x85 ?x91)) (= ?x86 (+ ?x78 ?x91))) (rewrite (= (+ ?x78 ?x91) ?x97)) (= ?x86 ?x97))))
 (let ((@x90 (trans (monotonicity (rewrite (= ?x30 ?x78)) (= ?x32 (- ?x78 ?x31))) (rewrite (= (- ?x78 ?x31) ?x86)) (= ?x32 ?x86))))
 (let ((@x106 (monotonicity (trans @x90 @x101 (= ?x32 ?x97)) (= $x34 (= ?x97 0)))))
 (let ((@x112 (trans @x106 (rewrite (= (= ?x97 0) $x108)) (= $x34 $x108))))
 (let ((@x401 (monotonicity @x112 @x357 (rewrite (= $x58 $x385)) (rewrite (= $x63 $x396)) @x275 (= $x72 $x398))))
 (trans @x401 (rewrite (= $x398 false)) $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (mp @x74 (trans (quant-intro (proof-bind ?x405) $x288) @x294 $x295) false))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  5
 :num-allocs   903005
 :rlimit-count 251
 :time         0.01
 :total-time   0.01)
