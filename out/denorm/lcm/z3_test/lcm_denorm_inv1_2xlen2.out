unsat
((set-logic NIA)
(declare-fun k!00 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(declare-fun k!10 () Int)
(proof
(let ((?x409 (+ k!10 (* (- 1) (* v!4 y!2)) (* (- 1) (* x!3 u!5)) k!00)))
 (let (($x297 (>= ?x409 0)))
 (let (($x349 (= ?x409 0)))
 (let ((?x415 (* (- 1) k!00)))
 (let ((?x620 (* x!3 u!5)))
 (let ((?x354 (* v!4 y!2)))
 (let ((?x845 (* (- 1) k!10)))
 (let ((?x1033 (+ ?x845 ?x354 ?x620 ?x415)))
 (let ((?x1008 (* (- 1) (* x!3 x!3 x!3 v!4 v!4 v!4 y!2 y!2 y!2))))
 (let ((?x319 (* x!3 u!5 u!5 u!5 v!4 v!4 y!2)))
 (let ((?x202 (+ (* (- 1) (* x!3 x!3 v!4 v!4 v!4 v!4 v!4)) (* 3 (* x!3 u!5 u!5 v!4 v!4 v!4 y!2)) (* 3 (* x!3 u!5 v!4 v!4 v!4 v!4 y!2)) (* x!3 v!4 v!4 v!4 v!4 v!4 y!2) ?x319 (* 3 (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 y!2 y!2)) (* (- 3) (* x!3 x!3 x!3 x!3 x!3 v!4 v!4 v!4 y!2)) (* x!3 x!3 x!3 x!3 x!3 x!3 v!4 v!4 v!4) (* (- 1) (* x!3 x!3 u!5 u!5 u!5 v!4 v!4)) (* (- 3) (* x!3 x!3 u!5 v!4 v!4 v!4 v!4)) (* (- 3) (* x!3 x!3 u!5 u!5 v!4 v!4 v!4)) ?x1008)))
 (let ((?x1063 (* (- 1) (* v!4 y!2 y!2))))
 (let ((?x859 (* (- 1) (* u!5 y!2 y!2))))
 (let ((?x287 (* x!3 x!3 v!4 y!2)))
 (let ((?x561 (+ ?x287 (* (- 1) (* x!3 x!3 v!4)) (* (- 1) (* x!3 x!3 u!5)) ?x859 (* (- 1) (* x!3 x!3 x!3 v!4)) (* 2 (* x!3 u!5 y!2)) (* 2 (* x!3 v!4 y!2)) ?x1063)))
 (let ((?x198 (* ?x561 ?x202 ?x1033)))
 (let (($x401 (= ?x198 0)))
 (let (($x806 (not $x401)))
 (let ((?x247 (* 3 (* u!5 v!4 v!4 y!2 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x1182 (* 3 (* u!5 u!5 v!4 y!2 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x1175 (* u!5 u!5 u!5 y!2 y!2 y!2 y!2 y!2 y!2)))
 (let ((?x760 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2))))
 (let ((?x761 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2))))
 (let ((?x754 (* (- 2) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2))))
 (let ((?x544 (* v!4 v!4 v!4 y!2 y!2 y!2 y!2 y!2 y!2)))
 (let ((?x562 (+ ?x319 (* (- 1) (* x!3 x!3 x!3 u!5 u!5 u!5 y!2 y!2 y!2)) (* (- 3) (* x!3 x!3 x!3 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 3) (* x!3 x!3 x!3 u!5 v!4 v!4 y!2 y!2 y!2)) ?x544 ?x754 ?x761 ?x760 (* x!3 u!5 u!5 u!5 u!5 u!5 y!2) (* 2 (* x!3 u!5 u!5 u!5 u!5 v!4 y!2)) (* (- 3) (* x!3 u!5 u!5 u!5 y!2 y!2 y!2 y!2 y!2)) ?x1008 (* 3 (* x!3 x!3 u!5 u!5 u!5 y!2 y!2 y!2 y!2)) (* 9 (* x!3 x!3 u!5 u!5 v!4 y!2 y!2 y!2 y!2)) (* 9 (* x!3 x!3 u!5 v!4 v!4 y!2 y!2 y!2 y!2)) (* 3 (* x!3 x!3 v!4 v!4 v!4 y!2 y!2 y!2 y!2)) (* (- 9) (* x!3 u!5 u!5 v!4 y!2 y!2 y!2 y!2 y!2)) (* (- 9) (* x!3 u!5 v!4 v!4 y!2 y!2 y!2 y!2 y!2)) (* (- 3) (* x!3 v!4 v!4 v!4 y!2 y!2 y!2 y!2 y!2)) ?x1175 ?x1182 ?x247)))
 (let ((?x865 (* u!5 y!2 y!2 y!2)))
 (let ((?x817 (* v!4 y!2 y!2 y!2)))
 (let ((?x991 (+ ?x287 (* x!3 x!3 u!5 y!2) (* (- 2) (* x!3 u!5 y!2 y!2)) (* (- 2) (* x!3 v!4 y!2 y!2)) ?x817 ?x859 ?x865)))
 (let ((?x148 (* ?x991 ?x562 ?x1033)))
 (let (($x996 (= ?x148 0)))
 (let (($x464 (or (not $x996) $x806)))
 (let (($x699 (and $x349 $x464)))
 (let ((?x355 (+ (* u!5 x!3) ?x354 ?x845 ?x415)))
 (let ((?x846 (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2 y!2))))
 (let ((?x756 (* u!5 u!5 u!5 v!4 v!4 x!3 y!2)))
 (let ((?x314 (+ (* 3 (* u!5 u!5 v!4 v!4 v!4 x!3 y!2)) (* 3 (* u!5 v!4 v!4 v!4 v!4 x!3 y!2)) (* v!4 v!4 v!4 v!4 v!4 x!3 y!2) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3)) ?x756 ?x846 (* (- 3) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3)) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3)) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3 x!3) (* (- 3) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3 y!2)) (* 3 (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2 y!2)))))
 (let ((?x860 (* v!4 x!3 x!3 y!2)))
 (let ((?x1254 (+ ?x859 ?x860 (* (- 1) (* v!4 x!3 x!3 x!3)) ?x1063 (* (- 1) (* u!5 x!3 x!3)) (* (- 1) (* v!4 x!3 x!3)) (* 2 (* u!5 x!3 y!2)) (* 2 (* v!4 x!3 y!2)))))
 (let ((?x549 (+ (* u!5 u!5 u!5 u!5 u!5 x!3 y!2) (* 2 (* u!5 u!5 u!5 u!5 v!4 x!3 y!2)) ?x756 ?x761 ?x754 ?x760 (* (- 1) (* u!5 u!5 u!5 x!3 x!3 x!3 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 v!4 x!3 x!3 x!3 y!2 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 x!3 x!3 x!3 y!2 y!2 y!2)) ?x846 (* 3 (* u!5 u!5 u!5 x!3 x!3 y!2 y!2 y!2 y!2)) (* 9 (* u!5 u!5 v!4 x!3 x!3 y!2 y!2 y!2 y!2)) (* 9 (* u!5 v!4 v!4 x!3 x!3 y!2 y!2 y!2 y!2)) (* 3 (* v!4 v!4 v!4 x!3 x!3 y!2 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 x!3 y!2 y!2 y!2 y!2 y!2)) (* (- 9) (* u!5 u!5 v!4 x!3 y!2 y!2 y!2 y!2 y!2)) (* (- 9) (* u!5 v!4 v!4 x!3 y!2 y!2 y!2 y!2 y!2)) (* (- 3) (* v!4 v!4 v!4 x!3 y!2 y!2 y!2 y!2 y!2)) ?x1175 ?x1182 ?x247 ?x544)))
 (let ((?x872 (+ ?x859 ?x860 (* u!5 x!3 x!3 y!2) (* (- 2) (* u!5 x!3 y!2 y!2)) (* (- 2) (* v!4 x!3 y!2 y!2)) ?x865 ?x817)))
 (let (($x791 (or (not (= (* ?x872 ?x549 ?x355) 0)) (not (= (* ?x1254 ?x314 ?x355) 0)))))
 (let (($x792 (and (= ?x355 0) $x791)))
 (let (($x1267 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x415 (* (- 1) k!00)))
 (let ((?x845 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x856 (+ ?x33 ?x34 ?x845 ?x415)))
 (let ((?x694 (* (- 1) (* v v v x x x y y y))))
 (let ((?x154 (* u u u v v x y)))
 (let ((?x963 (+ (* 3 (* u u v v v x y)) (* 3 (* u v v v v x y)) (* v v v v v x y) (* (- 1) (* u u u v v x x)) ?x154 ?x694 (* (- 3) (* u v v v v x x)) (* (- 3) (* u u v v v x x)) (* (- 1) (* v v v v v x x)) (* v v v x x x x x x) (* (- 3) (* v v v x x x x x y)) (* 3 (* v v v x x x x y y)))))
 (let ((?x726 (* v x x y)))
 (let ((?x52 (* u y y)))
 (let ((?x798 (* (- 1) ?x52)))
 (let ((?x1086 (+ ?x798 ?x726 (* (- 1) (* v x x x)) (* (- 1) (* v y y)) (* (- 1) (* u x x)) (* (- 1) (* v x x)) (* 2 (* u x y)) (* 2 (* v x y)))))
 (let ((?x744 (+ (* u u u u u x y) (* 2 (* u u u u v x y)) ?x154 (* (- 1) (* u u u u u y y)) (* (- 2) (* u u u u v y y)) (* (- 1) (* u u u v v y y)) (* (- 1) (* u u u x x x y y y)) (* (- 3) (* u u v x x x y y y)) (* (- 3) (* u v v x x x y y y)) ?x694 (* 3 (* u u u x x y y y y)) (* 9 (* u u v x x y y y y)) (* 9 (* u v v x x y y y y)) (* 3 (* v v v x x y y y y)) (* (- 3) (* u u u x y y y y y)) (* (- 9) (* u u v x y y y y y)) (* (- 9) (* u v v x y y y y y)) (* (- 3) (* v v v x y y y y y)) (* u u u y y y y y y) (* 3 (* u u v y y y y y y)) (* 3 (* u v v y y y y y y)) (* v v v y y y y y y))))
 (let ((?x804 (+ ?x798 ?x726 (* u x x y) (* (- 2) (* u x y y)) (* (- 2) (* v x y y)) (* u y y y) (* v y y y))))
 (let (($x1265 (or (not (= (* ?x804 ?x744 ?x856) 0)) (not (= (* ?x1086 ?x963 ?x856) 0)))))
 (and (= ?x856 0) $x1265)))))))))))))))) :qid k!29))
 ))
 (let (($x87 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x845 (* (- 1) k!10)))
 (let ((?x864 (+ y (* (- 1) x))))
 (let ((?x123 (* ?x864 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x415 (* (- 1) k!00)))
 (let ((?x861 (+ (* ?x57 ?x57 ?x57 ?x864 x v v) (* (- 1) (* ?x864 ?x864 ?x864 x x x v v v)))))
 (let ((?x758 (+ (* ?x864 x x v) (* (- 1) (* ?x57 ?x864 ?x864)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x913 (+ x (* (- 1) y))))
 (let ((?x100 (* ?x913 u)))
 (let ((?x818 (+ (* ?x44 ?x44 ?x913 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x913 ?x913 ?x913 y y y)))))
 (let ((?x850 (+ (* ?x44 ?x913 ?x913 y) (* (- 1) (* y y u)))))
 (let (($x852 (or (not (= (* ?x850 ?x818 (+ ?x415 ?x100 ?x45 ?x845)) 0)) (not (= (* ?x758 ?x861 (+ ?x415 ?x58 ?x123 ?x845)) 0)))))
 (and (= (+ ?x415 (* x u) (* y v) ?x845) 0) $x852)))))))))))))))) :qid k!29))
 ))
 (let ((?x1269 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x415 (* (- 1) k!00)))
 (let ((?x845 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x856 (+ ?x33 ?x34 ?x845 ?x415)))
 (let ((?x694 (* (- 1) (* v v v x x x y y y))))
 (let ((?x154 (* u u u v v x y)))
 (let ((?x963 (+ (* 3 (* u u v v v x y)) (* 3 (* u v v v v x y)) (* v v v v v x y) (* (- 1) (* u u u v v x x)) ?x154 ?x694 (* (- 3) (* u v v v v x x)) (* (- 3) (* u u v v v x x)) (* (- 1) (* v v v v v x x)) (* v v v x x x x x x) (* (- 3) (* v v v x x x x x y)) (* 3 (* v v v x x x x y y)))))
 (let ((?x726 (* v x x y)))
 (let ((?x52 (* u y y)))
 (let ((?x798 (* (- 1) ?x52)))
 (let ((?x1086 (+ ?x798 ?x726 (* (- 1) (* v x x x)) (* (- 1) (* v y y)) (* (- 1) (* u x x)) (* (- 1) (* v x x)) (* 2 (* u x y)) (* 2 (* v x y)))))
 (let ((?x744 (+ (* u u u u u x y) (* 2 (* u u u u v x y)) ?x154 (* (- 1) (* u u u u u y y)) (* (- 2) (* u u u u v y y)) (* (- 1) (* u u u v v y y)) (* (- 1) (* u u u x x x y y y)) (* (- 3) (* u u v x x x y y y)) (* (- 3) (* u v v x x x y y y)) ?x694 (* 3 (* u u u x x y y y y)) (* 9 (* u u v x x y y y y)) (* 9 (* u v v x x y y y y)) (* 3 (* v v v x x y y y y)) (* (- 3) (* u u u x y y y y y)) (* (- 9) (* u u v x y y y y y)) (* (- 9) (* u v v x y y y y y)) (* (- 3) (* v v v x y y y y y)) (* u u u y y y y y y) (* 3 (* u u v y y y y y y)) (* 3 (* u v v y y y y y y)) (* v v v y y y y y y))))
 (let ((?x804 (+ ?x798 ?x726 (* u x x y) (* (- 2) (* u x y y)) (* (- 2) (* v x y y)) (* u y y y) (* v y y y))))
 (let (($x1265 (or (not (= (* ?x804 ?x744 ?x856) 0)) (not (= (* ?x1086 ?x963 ?x856) 0)))))
 (let (($x1304 (and (= ?x856 0) $x1265)))
 (let ((?x864 (+ y (* (- 1) x))))
 (let ((?x123 (* ?x864 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x861 (+ (* ?x57 ?x57 ?x57 ?x864 x v v) (* (- 1) (* ?x864 ?x864 ?x864 x x x v v v)))))
 (let ((?x758 (+ (* ?x864 x x v) (* (- 1) (* ?x57 ?x864 ?x864)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x913 (+ x (* (- 1) y))))
 (let ((?x100 (* ?x913 u)))
 (let ((?x818 (+ (* ?x44 ?x44 ?x913 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x913 ?x913 ?x913 y y y)))))
 (let ((?x850 (+ (* ?x44 ?x913 ?x913 y) (* (- 1) (* y y u)))))
 (let (($x852 (or (not (= (* ?x850 ?x818 (+ ?x415 ?x100 ?x45 ?x845)) 0)) (not (= (* ?x758 ?x861 (+ ?x415 ?x58 ?x123 ?x845)) 0)))))
 (let (($x79 (and (= (+ ?x415 (* x u) (* y v) ?x845) 0) $x852)))
 (rewrite (= $x79 $x1304)))))))))))))))))))))))))))))))))
 ))
 (let (($x775 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x99 (* (- 1) ?x38)))
 (let ((?x864 (+ y (* (- 1) x))))
 (let ((?x123 (* ?x864 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x83 (* (- 1) (* u00 x00))))
 (let ((?x861 (+ (* ?x57 ?x57 ?x57 ?x864 x v v) (* (- 1) (* ?x864 ?x864 ?x864 x x x v v v)))))
 (let ((?x758 (+ (* ?x864 x x v) (* (- 1) (* ?x57 ?x864 ?x864)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x913 (+ x (* (- 1) y))))
 (let ((?x100 (* ?x913 u)))
 (let ((?x818 (+ (* ?x44 ?x44 ?x913 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x913 ?x913 ?x913 y y y)))))
 (let ((?x850 (+ (* ?x44 ?x913 ?x913 y) (* (- 1) (* y y u)))))
 (let (($x774 (or (not (= (* ?x850 ?x818 (+ ?x83 ?x100 ?x45 ?x99)) 0)) (not (= (* ?x758 ?x861 (+ ?x83 ?x58 ?x123 ?x99)) 0)))))
 (and (= (+ ?x83 (* x u) (* y v) ?x99) 0) $x774))))))))))))))))) :qid k!29))
 ))
 (let ((?x836 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x845 (* (- 1) k!10)))
 (let ((?x864 (+ y (* (- 1) x))))
 (let ((?x123 (* ?x864 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x415 (* (- 1) k!00)))
 (let ((?x861 (+ (* ?x57 ?x57 ?x57 ?x864 x v v) (* (- 1) (* ?x864 ?x864 ?x864 x x x v v v)))))
 (let ((?x758 (+ (* ?x864 x x v) (* (- 1) (* ?x57 ?x864 ?x864)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x913 (+ x (* (- 1) y))))
 (let ((?x100 (* ?x913 u)))
 (let ((?x818 (+ (* ?x44 ?x44 ?x913 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x913 ?x913 ?x913 y y y)))))
 (let ((?x850 (+ (* ?x44 ?x913 ?x913 y) (* (- 1) (* y y u)))))
 (let (($x852 (or (not (= (* ?x850 ?x818 (+ ?x415 ?x100 ?x45 ?x845)) 0)) (not (= (* ?x758 ?x861 (+ ?x415 ?x58 ?x123 ?x845)) 0)))))
 (let (($x79 (and (= (+ ?x415 (* x u) (* y v) ?x845) 0) $x852)))
 (let ((?x771 (* ?x758 ?x861 (+ (* (- 1) (* u00 x00)) ?x58 ?x123 (* (- 1) (* v00 y00))))))
 (let ((?x134 (* ?x850 ?x818 (+ (* (- 1) (* u00 x00)) ?x100 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x99 (* (- 1) ?x38)))
 (let ((?x85 (* y v)))
 (let ((?x80 (* x u)))
 (let ((?x83 (* (- 1) (* u00 x00))))
 (let (($x826 (and (= (+ ?x83 ?x80 ?x85 ?x99) 0) (or (not (= ?x134 0)) (not (= ?x771 0))))))
 (rewrite (= $x826 $x79)))))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x68 (- (* v x x (- y x)) (* (+ u v) (- y x) (- y x)))))
 (let ((?x59 (- y x)))
 (let ((?x65 (- (* (+ u v) (+ u v) (+ u v) v v x ?x59) (* v v v x x x ?x59 ?x59 ?x59))))
 (let ((?x38 (* v00 y00)))
 (let ((?x62 (- (+ (* (- 1) u00 x00) (* (+ u v) x) (* v ?x59)) ?x38)))
 (let ((?x52 (* u y y)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x50 (- (* u u u ?x44 ?x44 ?x42 y) (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y y y))))
 (let ((?x54 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x50 (- (* ?x44 ?x42 ?x42 y) ?x52))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x54 0)) (not (= (* ?x62 ?x65 ?x68) 0))))))))))))))) :qid k!29))
 ))
 (let ((?x712 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x99 (* (- 1) ?x38)))
 (let ((?x864 (+ y (* (- 1) x))))
 (let ((?x123 (* ?x864 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x83 (* (- 1) (* u00 x00))))
 (let ((?x861 (+ (* ?x57 ?x57 ?x57 ?x864 x v v) (* (- 1) (* ?x864 ?x864 ?x864 x x x v v v)))))
 (let ((?x758 (+ (* ?x864 x x v) (* (- 1) (* ?x57 ?x864 ?x864)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x913 (+ x (* (- 1) y))))
 (let ((?x100 (* ?x913 u)))
 (let ((?x818 (+ (* ?x44 ?x44 ?x913 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x913 ?x913 ?x913 y y y)))))
 (let ((?x850 (+ (* ?x44 ?x913 ?x913 y) (* (- 1) (* y y u)))))
 (let (($x774 (or (not (= (* ?x850 ?x818 (+ ?x83 ?x100 ?x45 ?x99)) 0)) (not (= (* ?x758 ?x861 (+ ?x83 ?x58 ?x123 ?x99)) 0)))))
 (let (($x826 (and (= (+ ?x83 (* x u) (* y v) ?x99) 0) $x774)))
 (let ((?x68 (- (* v x x (- y x)) (* ?x57 (- y x) (- y x)))))
 (let ((?x59 (- y x)))
 (let ((?x65 (- (* ?x57 ?x57 ?x57 v v x ?x59) (* v v v x x x ?x59 ?x59 ?x59))))
 (let ((?x69 (* (- (+ (* (- 1) u00 x00) ?x58 (* v ?x59)) ?x38) ?x65 ?x68)))
 (let ((?x42 (- x y)))
 (let ((?x50 (- (* u u u ?x44 ?x44 ?x42 y) (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y y y))))
 (let ((?x54 (* (- (+ (* (- 1) u00 x00) (* u ?x42) ?x45) ?x38) ?x50 (- (* ?x44 ?x42 ?x42 y) (* u y y)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x73 (and $x41 (or (not (= ?x54 0)) (not (= ?x69 0))))))
 (rewrite (= $x73 $x826)))))))))))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x841 (mp (mp @x75 (quant-intro (proof-bind ?x712) (= $x74 $x775)) $x775) (rewrite (= $x775 $x775)) $x775)))
 (let ((@x267 (mp (mp @x841 (quant-intro (proof-bind ?x836) (= $x775 $x87)) $x87) (quant-intro (proof-bind ?x1269) (= $x87 $x1267)) $x1267)))
 (let ((@x458 (mp (mp~ @x267 (sk (~ $x1267 $x792)) $x792) (rewrite (= $x792 $x699)) $x699)))
 (let ((@x461 (and-elim @x458 $x349)))
 (let ((@x201 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x349) $x297)) @x461 $x297)))
 (let (($x324 (<= ?x409 0)))
 (let ((@x1056 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x349) $x324)) @x461 $x324)))
 (let (($x274 (not (<= ?x198 0))))
 (let (($x1023 (>= ?x198 0)))
 (let (($x315 (>= ?x148 0)))
 (let (($x399 (<= ?x148 0)))
 (let ((@x668 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x996 (not $x399) (not $x315))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x399)) @x1056 @x201 false) $x399) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x315)) @x1056 @x201 false) $x315) $x996)))
 (let ((@x526 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x401 $x274 (not $x1023))) (unit-resolution (and-elim @x458 $x464) @x668 $x806) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1023)) @x1056 @x201 false) $x1023) $x274)))
 ((_ th-lemma arith farkas 1 1 1) @x526 @x1056 @x201 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             456
 :arith-nonlinear-horner    18
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 68
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                118.93
 :memory                    19.20
 :mk-bool-var               21
 :mk-clause                 28
 :num-allocs                5827220799156.00
 :num-checks                1
 :propagations              14
 :rlimit-count              79488801
 :time                      43.07
 :total-time                43.08)
