unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x367 (* k!2 n!0)))
 (let ((?x355 (* (- 3) c!3)))
 (let ((?x165 (* 2 n!0)))
 (let ((?x408 (* (- 3) k!2)))
 (let ((?x286 (+ 3 (* n!0 m!1) ?x408 ?x165 ?x355 ?x367)))
 (let (($x446 (<= ?x286 0)))
 (let ((?x390 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x126 (<= ?x390 1)))
 (let (($x158 (= ?x390 1)))
 (let ((?x228 (+ k!2 c!3)))
 (let ((?x353 (+ k!2 m!1)))
 (let ((?x352 (+ 6 m!1)))
 (let ((?x343 (+ 1 n!0)))
 (let ((?x283 (* ?x343 ?x343 ?x352 ?x352 ?x353 ?x353 ?x353 ?x228 ?x228 ?x286)))
 (let (($x224 (= ?x283 0)))
 (let (($x282 (not $x224)))
 (let ((?x368 (* (- 1) ?x367)))
 (let ((?x517 (* 3 c!3)))
 (let ((?x389 (* (- 2) n!0)))
 (let ((?x230 (+ k!2 ?x389 ?x517 ?x368)))
 (let (($x241 (= ?x230 1)))
 (let ((?x260 (* (- 1) (* k!2 k!2))))
 (let ((?x199 (* 18 c!3)))
 (let ((?x170 (* (- 9) n!0)))
 (let ((?x206 (* 5 k!2)))
 (let ((?x102 (* (- 1) m!1)))
 (let ((?x101 (+ (* 6 n!0) ?x102)))
 (let (($x316 (= ?x101 (- 6))))
 (let (($x216 (and $x316 (= (+ (* 9 (* n!0 c!3)) ?x206 ?x170 ?x199 ?x260) 4) $x241 $x158 $x282)))
 (let ((?x159 (+ c!3 k!2)))
 (let ((?x193 (* ?x343 ?x343 ?x352 ?x352 ?x353 ?x353 ?x353 ?x159 ?x159 (+ 3 ?x355 ?x408 ?x165 ?x367 (* m!1 n!0)))))
 (let (($x375 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x199 ?x206 ?x170 ?x260 (* 9 (* c!3 n!0))) 4) (= (+ ?x517 k!2 ?x389 ?x368) 1) $x158 (not (= ?x193 0)))))
 (let (($x200 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x402 (+ 3 ?x214 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x198 (not (= (* ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x71 ?x68 ?x68 ?x402) 0))))
 (let (($x291 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x253 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x201 (= (+ ?x40 ?x44 ?x203 ?x204 (* 9 (* c n))) 4)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 $x201 $x253 $x291 $x198))))))))))))))))))) :qid k!34))
 ))
 (let (($x528 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x203 ?x204) 4) $x186 $x145 $x166))))))))))))))))) :qid k!34))
 ))
 (let ((?x354 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x402 (+ 3 ?x214 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x198 (not (= (* ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x71 ?x68 ?x68 ?x402) 0))))
 (let (($x291 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x253 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x201 (= (+ ?x40 ?x44 ?x203 ?x204 (* 9 (* c n))) 4)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x369 (and $x117 $x201 $x253 $x291 $x198)))
 (let ((?x511 (* ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x71 ?x68 ?x68 (+ 3 ?x214 (* (- 4) k) (* ?x334 ?x71) (* (- 1) m) ?x59))))
 (let (($x166 (not (= ?x511 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x140 (and $x117 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x203 ?x204) 4) $x186 $x145 $x166)))
 (rewrite (= $x140 $x369)))))))))))))))))))))))))))
 ))
 (let (($x167 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 (= ?x329 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))))))))))))) :qid k!34))
 ))
 (let ((?x527 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x140 (and $x117 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x203 ?x204) 4) $x186 $x145 $x166)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x190 (and $x117 (= ?x329 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))
 (rewrite (= $x190 $x140)))))))))))))))))))))))
 ))
 (let (($x84 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x81 (not (= (* ?x77 ?x71 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x81))))))))))))))) :qid k!34))
 ))
 (let ((?x169 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x190 (and $x117 (= ?x329 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x81 (not (= (* ?x77 ?x71 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x83 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x81))))
 (rewrite (= $x83 $x190))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x401 (mp (mp @x85 (quant-intro (proof-bind ?x169) (= $x84 $x167)) $x167) (rewrite (= $x167 $x167)) $x167)))
 (let ((@x388 (mp (mp @x401 (quant-intro (proof-bind ?x527) (= $x167 $x528)) $x528) (quant-intro (proof-bind ?x354) (= $x528 $x200)) $x200)))
 (let ((@x94 (mp (mp~ @x388 (sk (~ $x200 $x375)) $x375) (rewrite (= $x375 $x216)) $x216)))
 (let ((@x219 (and-elim @x94 $x158)))
 (let ((@x700 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x126)) @x219 $x126)))
 (let (($x123 (>= ?x390 1)))
 (let ((@x208 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x123)) @x219 $x123)))
 (let (($x125 (<= ?x230 1)))
 (let ((@x225 (and-elim @x94 $x241)))
 (let ((@x453 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x241) $x125)) @x225 $x125)))
 (let (($x129 (>= ?x230 1)))
 (let ((@x881 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x241) $x129)) @x225 $x129)))
 (let (($x132 (<= ?x101 (- 6))))
 (let ((@x295 (and-elim @x94 $x316)))
 (let ((@x157 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x316) $x132)) @x295 $x132)))
 (let (($x131 (>= ?x101 (- 6))))
 (let ((@x309 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x316) $x131)) @x295 $x131)))
 (let ((@x915 ((_ th-lemma arith) (hypothesis (not $x446)) @x309 @x157 @x208 @x700 @x881 @x453 @x208 @x700 false)))
 (let (($x877 (>= ?x286 0)))
 (let ((@x821 ((_ th-lemma arith) (hypothesis (not $x877)) @x309 @x157 @x309 @x157 @x881 @x453 @x208 @x700 @x309 @x157 false)))
 (let ((@x887 (lemma @x821 $x877)))
 (let (($x960 (not (<= ?x283 0))))
 (let (($x258 (>= ?x283 0)))
 (let (($x723 (>= ?x228 0)))
 (let (($x893 (not $x723)))
 (let (($x721 (= ?x228 0)))
 (let (($x729 (not $x721)))
 (let (($x382 (not $x258)))
 (let ((@x380 (hypothesis $x382)))
 (let (($x722 (<= ?x228 0)))
 (let ((@x728 (hypothesis $x721)))
 (let ((@x736 ((_ th-lemma arith farkas 1 1 1) @x380 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x729 $x723)) @x728 $x723) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x729 $x722)) @x728 $x722) false)))
 (let (($x188 (<= ?x353 0)))
 (let (($x349 (not $x188)))
 (let (($x269 (>= ?x353 0)))
 (let (($x246 (<= ?x343 0)))
 (let (($x89 (not $x269)))
 (let ((@x99 (hypothesis $x89)))
 (let ((?x391 (* n!0 n!0)))
 (let (($x250 (>= ?x391 0)))
 (let ((@x725 ((_ th-lemma arith farkas 1/3 3 1/3 1/3 1) @x208 (hypothesis (not $x246)) (hypothesis $x188) @x157 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x250)) false) $x250) false)))
 (let ((@x742 (unit-resolution (lemma @x725 (or $x246 $x349)) (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x269 $x188)) @x99 $x188) $x246)))
 (let (($x98 (>= ?x343 0)))
 (let (($x150 (>= (+ (* 4 n!0) ?x102) 8)))
 (let (($x272 (not $x150)))
 (let ((@x323 (hypothesis $x150)))
 (let ((@x146 (lemma ((_ th-lemma arith) @x157 @x323 @x157 @x157 @x323 @x208 @x99 false) (or $x272 $x269))))
 (let (($x108 (>= n!0 (- 3))))
 (let (($x163 (not $x108)))
 (let ((@x156 (hypothesis (not $x98))))
 (let ((@x161 (hypothesis $x108)))
 (let ((@x162 ((_ th-lemma arith farkas 1 9 3 3 3 3 3 3 3 3 3 3 1 1) @x157 @x161 @x161 @x99 @x157 @x156 @x208 @x161 @x99 @x157 @x156 @x208 @x208 @x99 false)))
 (let ((@x267 ((_ th-lemma arith farkas 3 1 1 -9/2 9/2 1) (unit-resolution (lemma @x162 (or $x163 $x269 $x98)) @x99 @x156 $x163) @x208 @x157 (unit-resolution @x146 @x99 $x272) @x309 @x99 false)))
 (let ((@x744 ((_ th-lemma arith farkas 1 1 1) @x380 (unit-resolution (lemma @x267 (or $x269 $x98)) @x99 $x98) @x742 false)))
 (let (($x189 (= ?x353 0)))
 (let (($x276 (not $x189)))
 (let ((@x336 ((_ th-lemma arith farkas 1 1 1) @x380 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x276 $x269)) (hypothesis $x189) $x269) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x276 $x188)) (hypothesis $x189) $x188) false)))
 (let ((@x888 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x189 $x349 $x89)) (unit-resolution (lemma @x336 (or $x276 $x258)) @x380 $x276) (unit-resolution (lemma @x744 (or $x269 $x258)) @x380 $x269) $x349)))
 (let ((@x890 (lemma ((_ th-lemma arith farkas 1 1 1 1) @x380 @x887 @x888 (hypothesis (not $x722)) false) (or $x722 $x258))))
 (let ((@x896 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x721 (not $x722) $x893)) (unit-resolution @x890 @x380 $x722) (unit-resolution (lemma @x736 (or $x729 $x258)) @x380 $x729) $x893)))
 (let ((@x966 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x224 $x960 $x382)) (and-elim @x94 $x282) (or $x960 $x382))))
 (let ((@x967 (unit-resolution @x966 (lemma ((_ th-lemma arith farkas 1 1 1 1) @x380 @x887 @x888 @x896 false) $x258) $x960)))
 ((_ th-lemma arith farkas 1 1 1) @x967 @x887 (lemma @x915 $x446) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 40
 :arith-assert-diseq        16
 :arith-assert-lower        218
 :arith-assert-upper        202
 :arith-bound-prop          13
 :arith-branch-var          18
 :arith-conflicts           33
 :arith-eq-adapter          18
 :arith-fixed-eqs           56
 :arith-gcd-tests           156
 :arith-gomory-cuts         14
 :arith-grobner             25
 :arith-ineq-splits         18
 :arith-max-min             1432
 :arith-nonlinear-bounds    46
 :arith-nonlinear-horner    261
 :arith-num-rows            15
 :arith-offset-eqs          4
 :arith-patches             37
 :arith-patches_succ        2
 :arith-pivots              359
 :arith-pseudo-nonlinear    31
 :arith-row-summations      2087
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    15
 :conflicts                 33
 :decisions                 125
 :del-clause                61
 :final-checks              96
 :max-memory                3.80
 :memory                    3.23
 :minimized-lits            7
 :mk-bool-var               167
 :mk-clause                 135
 :num-allocs                2023689
 :num-checks                1
 :propagations              91
 :rlimit-count              106763
 :time                      0.03
 :total-time                0.03)
