unsat
((set-logic NIA)
(proof
(let (($x126 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x191 (+ (* (- 1) (* (+ q (* (- 1) p)) r)) (* (+ s (* (- 1) r)) p) ?x129 ?x41)))
 (let (($x231 (not (= ?x191 0))))
 (let ((?x197 (+ (* (- 1) (* (+ r (* (- 1) s)) q)) (* (+ p (* (- 1) q)) s) ?x129 ?x41)))
 (let (($x290 (not (= ?x197 0))))
 (let (($x132 (or $x290 $x231)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x343 (* (- 1) ?x69)))
 (let ((?x291 (* a00 s00 p)))
 (let ((?x363 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x261 (* (- 1) (* p00 s00 a))))
 (let ((?x259 (* (- 1) (* b00 r00 p))))
 (let ((?x263 (+ ?x259 ?x261 ?x65 ?x363 ?x291 ?x343)))
 (let (($x308 (= ?x263 0)))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let ((?x332 (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59)))
 (let (($x311 (= ?x332 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x295 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x304 (= ?x295 0)))
 (let (($x267 (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0)))
 (and $x267 $x304 $x311 $x308 $x224 $x132))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x315 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! false :qid k!38))
 ))
 (let ((?x321 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x191 (+ (* (- 1) (* (+ q (* (- 1) p)) r)) (* (+ s (* (- 1) r)) p) ?x129 ?x41)))
 (let (($x231 (not (= ?x191 0))))
 (let ((?x197 (+ (* (- 1) (* (+ r (* (- 1) s)) q)) (* (+ p (* (- 1) q)) s) ?x129 ?x41)))
 (let (($x290 (not (= ?x197 0))))
 (let (($x132 (or $x290 $x231)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x343 (* (- 1) ?x69)))
 (let ((?x291 (* a00 s00 p)))
 (let ((?x363 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x261 (* (- 1) (* p00 s00 a))))
 (let ((?x259 (* (- 1) (* b00 r00 p))))
 (let ((?x263 (+ ?x259 ?x261 ?x65 ?x363 ?x291 ?x343)))
 (let (($x308 (= ?x263 0)))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let ((?x332 (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59)))
 (let (($x311 (= ?x332 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x295 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x304 (= ?x295 0)))
 (let (($x267 (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0)))
 (let (($x238 (and $x267 $x304 $x311 $x308 $x224 $x132)))
 (let (($x148 (= (+ (* p s) ?x129 ?x41 (* (- 1) (* q r))) 0)))
 (let (($x257 (not $x148)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x300 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x305 (= ?x300 0)))
 (let ((?x213 (* r q00 a00)))
 (let ((?x179 (* p r00 b00)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x236 (+ ?x63 (* (- 1) (* a q00 r00)) ?x179 (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) ?x213)))
 (let (($x237 (= ?x236 0)))
 (let ((?x125 (* p00 b00)))
 (let ((?x116 (* a q)))
 (let (($x171 (= (+ ?x116 (* (- 1) (* q00 a00)) ?x125 (* (- 1) (* p b))) 0)))
 (let ((?x49 (* a s)))
 (let ((?x145 (+ ?x49 (* (- 1) (* b r)) (* (- 1) (* s00 a00)) (* r00 b00))))
 (let (($x153 (= ?x145 0)))
 (let (($x152 (and $x148 $x153 $x171 $x237 $x305 $x257)))
 (let ((@x309 (monotonicity (rewrite (= $x290 $x257)) (rewrite (= $x231 $x257)) (= $x132 (or $x257 $x257)))))
 (let ((?x223 (* (- 1) ?x213)))
 (let ((?x202 (* p s00 a00)))
 (let ((?x199 (* r p00 b00)))
 (let ((?x219 (* (- 1) ?x179)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x271 (* (- 1) ?x63)))
 (let ((?x349 (+ ?x271 ?x66 ?x219 ?x199 ?x202 ?x223)))
 (let (($x318 (= ?x349 0)))
 (let ((@x265 (monotonicity (rewrite (= ?x259 ?x219)) (rewrite (= ?x261 ?x271)) (rewrite (= ?x65 ?x199)) (rewrite (= ?x363 ?x66)) (rewrite (= ?x291 ?x202)) (rewrite (= ?x343 ?x223)) (= ?x263 (+ ?x219 ?x271 ?x199 ?x66 ?x202 ?x223)))))
 (let ((@x316 (trans @x265 (rewrite (= (+ ?x219 ?x271 ?x199 ?x66 ?x202 ?x223) ?x349)) (= ?x263 ?x349))))
 (let ((@x201 (trans (monotonicity @x316 (= $x308 $x318)) (rewrite (= $x318 $x237)) (= $x308 $x237))))
 (let ((?x150 (* p b)))
 (let ((?x124 (* q00 a00)))
 (let ((?x283 (+ (* (- 1) ?x116) ?x124 (* (- 1) ?x125) ?x150)))
 (let (($x107 (= ?x283 0)))
 (let ((@x270 (trans (monotonicity (rewrite (= ?x332 ?x283)) (= $x311 $x107)) (rewrite (= $x107 $x171)) (= $x311 $x171))))
 (let ((@x157 (monotonicity (rewrite (= $x267 $x148)) (rewrite (= $x304 $x153)) @x270 @x201 (rewrite (= $x224 $x305)) (trans @x309 (rewrite (= (or $x257 $x257) $x257)) (= $x132 $x257)) (= $x238 $x152))))
 (trans @x157 (rewrite (= $x152 false)) (= $x238 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x350 (trans (quant-intro (proof-bind ?x321) (= $x126 $x315)) (elim-unused (= $x315 false)) (= $x126 false))))
 (let (($x104 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x98 (- (+ (* (- 1) (- q p) r) (* p (- s r))) ?x37)))
 (let ((?x89 (- (+ (* (- 1) q (- r s)) (* (- p q) s)) ?x37)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* (- 1) a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) ?x49 ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (and $x44 $x53 (= ?x60 0) (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= (+ ?x89 ?x41) 0)) (not (= (+ ?x98 ?x41) 0))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x204 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x191 (+ (* (- 1) (* (+ q (* (- 1) p)) r)) (* (+ s (* (- 1) r)) p) ?x129 ?x41)))
 (let (($x231 (not (= ?x191 0))))
 (let ((?x197 (+ (* (- 1) (* (+ r (* (- 1) s)) q)) (* (+ p (* (- 1) q)) s) ?x129 ?x41)))
 (let (($x290 (not (= ?x197 0))))
 (let (($x132 (or $x290 $x231)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x343 (* (- 1) ?x69)))
 (let ((?x291 (* a00 s00 p)))
 (let ((?x363 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x261 (* (- 1) (* p00 s00 a))))
 (let ((?x259 (* (- 1) (* b00 r00 p))))
 (let ((?x263 (+ ?x259 ?x261 ?x65 ?x363 ?x291 ?x343)))
 (let (($x308 (= ?x263 0)))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let ((?x332 (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59)))
 (let (($x311 (= ?x332 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x295 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x304 (= ?x295 0)))
 (let (($x267 (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0)))
 (let (($x238 (and $x267 $x304 $x311 $x308 $x224 $x132)))
 (let ((?x98 (- (+ (* (- 1) (- q p) r) (* p (- s r))) ?x37)))
 (let ((?x89 (- (+ (* (- 1) q (- r s)) (* (- p q) s)) ?x37)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) ?x55) (* b00 p00)) ?x59) 0)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (let (($x103 (and $x44 $x53 $x61 (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= (+ ?x89 ?x41) 0)) (not (= (+ ?x98 ?x41) 0))))))
 (rewrite (= $x103 $x238)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x196 (mp (mp @x105 (quant-intro (proof-bind ?x204) (= $x104 $x126)) $x126) (rewrite (= $x126 $x126)) $x126)))
 (mp @x196 @x350 false)))))))))))

(:max-memory   19.34
 :memory       19.06
 :num-allocs   340116
 :num-checks   1
 :rlimit-count 899
 :time         0.01
 :total-time   0.02)
