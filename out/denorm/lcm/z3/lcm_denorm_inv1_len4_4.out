unsat
((set-logic NIA)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x814 (+ k!00 k!10 (* (- 1) (* x!3 u!5)) (* (- 1) (* y!2 v!4)))))
 (let (($x871 (>= ?x814 0)))
 (let (($x816 (= ?x814 0)))
 (let ((?x806 (* y!2 v!4 v!4 v!4 u!5)))
 (let ((?x609 (* y!2 x!3 x!3 v!4 u!5 u!5 u!5)))
 (let ((?x600 (* y!2 y!2 x!3 x!3 x!3 u!5 u!5 u!5)))
 (let ((?x593 (* y!2 v!4 u!5 u!5)))
 (let ((?x607 (+ (* y!2 v!4 v!4 v!4) (* x!3 x!3 x!3 x!3 x!3 v!4 v!4 v!4) (* 3 (* x!3 x!3 x!3 x!3 x!3 v!4 v!4 u!5)) (* (- 1) (* x!3 v!4 u!5 u!5)) (* y!2 x!3 x!3 v!4 v!4 v!4 v!4) (* (- 1) (* x!3 x!3 x!3 v!4 u!5 u!5 u!5)) (* (- 1) (* x!3 v!4 v!4 v!4 u!5)) (* (- 3) (* x!3 x!3 x!3 v!4 v!4 v!4 u!5)) (* (- 1) (* x!3 x!3 x!3 v!4 v!4 v!4 v!4)) (* (- 1) (* x!3 v!4 v!4 v!4 v!4)) (* 3 (* y!2 x!3 x!3 v!4 v!4 u!5 u!5)) (* 3 (* y!2 x!3 x!3 v!4 v!4 v!4 u!5)) (* (- 3) (* x!3 x!3 x!3 v!4 v!4 u!5 u!5)) (* 3 (* y!2 y!2 x!3 x!3 x!3 v!4 u!5 u!5)) (* 2 (* y!2 v!4 v!4 u!5)) ?x593 ?x600 ?x609 (* y!2 v!4 v!4 v!4 v!4) (* x!3 x!3 x!3 x!3 x!3 u!5 u!5 u!5) (* 3 (* x!3 x!3 x!3 x!3 x!3 v!4 u!5 u!5)) (* (- 2) (* x!3 v!4 v!4 u!5)) (* (- 1) (* x!3 v!4 v!4 v!4)) ?x806 (* (- 2) (* y!2 x!3 x!3 x!3 x!3 v!4 v!4 v!4)) (* 3 (* y!2 y!2 x!3 x!3 x!3 v!4 v!4 u!5)) (* y!2 y!2 x!3 x!3 x!3 v!4 v!4 v!4) (* (- 6) (* y!2 x!3 x!3 x!3 x!3 v!4 v!4 u!5)) (* (- 6) (* y!2 x!3 x!3 x!3 x!3 v!4 u!5 u!5)) (* (- 2) (* y!2 x!3 x!3 x!3 x!3 u!5 u!5 u!5)))))
 (let ((?x1003 (* y!2 v!4)))
 (let ((?x1001 (* x!3 u!5)))
 (let ((?x500 (* (- 1) k!10)))
 (let ((?x322 (* (- 1) k!00)))
 (let ((?x1007 (+ ?x322 ?x500 ?x1001 ?x1003)))
 (let ((?x629 (* ?x1007 ?x607)))
 (let (($x242 (= ?x629 0)))
 (let (($x630 (not $x242)))
 (let ((?x882 (+ (* (- 1) (* y!2 y!2 y!2 y!2 y!2 u!5 u!5 u!5)) (* y!2 u!5 u!5 u!5 u!5) (* y!2 u!5 u!5 u!5) ?x593 ?x600 ?x609 (* y!2 y!2 y!2 u!5 u!5 u!5 u!5) (* 3 (* y!2 v!4 v!4 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 x!3 x!3 u!5 u!5 u!5)) (* 3 (* y!2 y!2 y!2 y!2 x!3 u!5 u!5 u!5)) (* 3 (* y!2 v!4 u!5 u!5 u!5)) ?x806 (* (- 2) (* y!2 y!2 x!3 u!5 u!5 u!5 u!5)) (* (- 2) (* y!2 y!2 x!3 v!4 u!5 u!5 u!5)) (* y!2 y!2 y!2 v!4 u!5 u!5 u!5) (* y!2 x!3 x!3 u!5 u!5 u!5 u!5))))
 (let ((?x864 (* ?x1007 ?x882)))
 (let (($x356 (= ?x864 0)))
 (let (($x107 (or (not $x356) $x630)))
 (let (($x328 (and $x816 $x107)))
 (let ((?x949 (* u!5 u!5 u!5 v!4 x!3 x!3 y!2)))
 (let ((?x944 (* u!5 v!4 v!4 v!4 y!2)))
 (let ((?x933 (* u!5 u!5 u!5 x!3 x!3 x!3 y!2 y!2)))
 (let ((?x931 (* u!5 u!5 v!4 y!2)))
 (let ((?x995 (+ (* 2 (* u!5 v!4 v!4 y!2)) (* v!4 v!4 v!4 y!2) (* (- 1) (* u!5 u!5 v!4 x!3)) ?x931 ?x933 ?x944 ?x949 (* (- 1) (* v!4 v!4 v!4 x!3)) (* (- 2) (* u!5 v!4 v!4 x!3)) (* 3 (* u!5 u!5 v!4 x!3 x!3 x!3 y!2 y!2)) (* 3 (* u!5 v!4 v!4 x!3 x!3 x!3 y!2 y!2)) (* v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2) (* u!5 u!5 u!5 x!3 x!3 x!3 x!3 x!3) (* 3 (* u!5 u!5 v!4 x!3 x!3 x!3 x!3 x!3)) (* 3 (* u!5 v!4 v!4 x!3 x!3 x!3 x!3 x!3)) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3) (* (- 2) (* u!5 u!5 u!5 x!3 x!3 x!3 x!3 y!2)) (* (- 6) (* u!5 u!5 v!4 x!3 x!3 x!3 x!3 y!2)) (* (- 6) (* u!5 v!4 v!4 x!3 x!3 x!3 x!3 y!2)) (* (- 2) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2)) (* v!4 v!4 v!4 v!4 y!2) (* (- 1) (* u!5 v!4 v!4 v!4 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 x!3)) (* 3 (* u!5 u!5 v!4 v!4 x!3 x!3 y!2)) (* 3 (* u!5 v!4 v!4 v!4 x!3 x!3 y!2)) (* v!4 v!4 v!4 v!4 x!3 x!3 y!2) (* (- 1) (* u!5 u!5 u!5 v!4 x!3 x!3 x!3)) (* (- 3) (* u!5 u!5 v!4 v!4 x!3 x!3 x!3)) (* (- 3) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3)))))
 (let ((?x928 (+ (* u!5 x!3) (* v!4 y!2) ?x322 ?x500)))
 (let ((?x952 (+ (* u!5 u!5 u!5 y!2) ?x931 ?x933 (* (- 3) (* u!5 u!5 u!5 x!3 x!3 y!2 y!2 y!2)) (* 3 (* u!5 u!5 u!5 x!3 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 y!2 y!2 y!2 y!2 y!2)) (* u!5 u!5 u!5 u!5 y!2) (* 3 (* u!5 u!5 u!5 v!4 y!2)) (* 3 (* u!5 u!5 v!4 v!4 y!2)) ?x944 (* u!5 u!5 u!5 u!5 x!3 x!3 y!2) ?x949 (* (- 2) (* u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* (- 2) (* u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* u!5 u!5 u!5 u!5 y!2 y!2 y!2) (* u!5 u!5 u!5 v!4 y!2 y!2 y!2))))
 (let (($x998 (and (= ?x928 0) (or (not (= (* ?x928 ?x952) 0)) (not (= (* ?x928 ?x995) 0))))))
 (let (($x521 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x267 (* u u u v x x y)))
 (let ((?x237 (* u v v v y)))
 (let ((?x159 (* u u u x x x y y)))
 (let ((?x150 (* u u v y)))
 (let ((?x704 (+ (* 2 (* u v v y)) (* v v v y) (* (- 1) (* u u v x)) ?x150 ?x159 ?x237 ?x267 (* (- 1) (* v v v x)) (* (- 2) (* u v v x)) (* 3 (* u u v x x x y y)) (* 3 (* u v v x x x y y)) (* v v v x x x y y) (* u u u x x x x x) (* 3 (* u u v x x x x x)) (* 3 (* u v v x x x x x)) (* v v v x x x x x) (* (- 2) (* u u u x x x x y)) (* (- 6) (* u u v x x x x y)) (* (- 6) (* u v v x x x x y)) (* (- 2) (* v v v x x x x y)) (* v v v v y) (* (- 1) (* u v v v x)) (* (- 1) (* v v v v x)) (* 3 (* u u v v x x y)) (* 3 (* u v v v x x y)) (* v v v v x x y) (* (- 1) (* u u u v x x x)) (* (- 3) (* u u v v x x x)) (* (- 3) (* u v v v x x x)) (* (- 1) (* v v v v x x x)))))
 (let ((?x500 (* (- 1) k!10)))
 (let ((?x322 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x509 (+ ?x33 ?x34 ?x322 ?x500)))
 (let ((?x325 (+ (* u u u y) ?x150 ?x159 (* (- 3) (* u u u x x y y y)) (* 3 (* u u u x y y y y)) (* (- 1) (* u u u y y y y y)) (* u u u u y) (* 3 (* u u u v y)) (* 3 (* u u v v y)) ?x237 (* u u u u x x y) ?x267 (* (- 2) (* u u u u x y y)) (* (- 2) (* u u u v x y y)) (* u u u u y y y) (* u u u v y y y))))
 (and (= ?x509 0) (or (not (= (* ?x509 ?x325) 0)) (not (= (* ?x509 ?x704) 0))))))))))))))) :qid k!29))
 ))
 (let (($x220 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x181 (+ y (* (- 1) x))))
 (let ((?x56 (+ u v)))
 (let ((?x223 (+ (* ?x56 ?x56 ?x181 v) (* ?x56 ?x56 ?x56 ?x181 ?x181 x x x) (* ?x56 ?x181 v v v) (* ?x56 ?x56 ?x56 ?x181 x x v))))
 (let ((?x500 (* (- 1) k!10)))
 (let ((?x277 (* ?x181 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x322 (* (- 1) k!00)))
 (let ((?x502 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x191 (+ (* ?x44 y u u) (* ?x502 ?x502 ?x502 y y u u u) (* ?x44 ?x44 ?x44 y u) (* ?x44 ?x502 ?x502 y u u u))))
 (let (($x276 (or (not (= (* (+ ?x322 (* ?x502 u) (* ?x44 y) ?x500) ?x191) 0)) (not (= (* (+ ?x322 ?x57 ?x277 ?x500) ?x223) 0)))))
 (let ((?x182 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x182 0) $x276))))))))))))) :qid k!29))
 ))
 (let ((?x206 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x267 (* u u u v x x y)))
 (let ((?x237 (* u v v v y)))
 (let ((?x159 (* u u u x x x y y)))
 (let ((?x150 (* u u v y)))
 (let ((?x704 (+ (* 2 (* u v v y)) (* v v v y) (* (- 1) (* u u v x)) ?x150 ?x159 ?x237 ?x267 (* (- 1) (* v v v x)) (* (- 2) (* u v v x)) (* 3 (* u u v x x x y y)) (* 3 (* u v v x x x y y)) (* v v v x x x y y) (* u u u x x x x x) (* 3 (* u u v x x x x x)) (* 3 (* u v v x x x x x)) (* v v v x x x x x) (* (- 2) (* u u u x x x x y)) (* (- 6) (* u u v x x x x y)) (* (- 6) (* u v v x x x x y)) (* (- 2) (* v v v x x x x y)) (* v v v v y) (* (- 1) (* u v v v x)) (* (- 1) (* v v v v x)) (* 3 (* u u v v x x y)) (* 3 (* u v v v x x y)) (* v v v v x x y) (* (- 1) (* u u u v x x x)) (* (- 3) (* u u v v x x x)) (* (- 3) (* u v v v x x x)) (* (- 1) (* v v v v x x x)))))
 (let ((?x500 (* (- 1) k!10)))
 (let ((?x322 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x509 (+ ?x33 ?x34 ?x322 ?x500)))
 (let ((?x325 (+ (* u u u y) ?x150 ?x159 (* (- 3) (* u u u x x y y y)) (* 3 (* u u u x y y y y)) (* (- 1) (* u u u y y y y y)) (* u u u u y) (* 3 (* u u u v y)) (* 3 (* u u v v y)) ?x237 (* u u u u x x y) ?x267 (* (- 2) (* u u u u x y y)) (* (- 2) (* u u u v x y y)) (* u u u u y y y) (* u u u v y y y))))
 (let (($x1046 (and (= ?x509 0) (or (not (= (* ?x509 ?x325) 0)) (not (= (* ?x509 ?x704) 0))))))
 (let ((?x181 (+ y (* (- 1) x))))
 (let ((?x56 (+ u v)))
 (let ((?x223 (+ (* ?x56 ?x56 ?x181 v) (* ?x56 ?x56 ?x56 ?x181 ?x181 x x x) (* ?x56 ?x181 v v v) (* ?x56 ?x56 ?x56 ?x181 x x v))))
 (let ((?x502 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x191 (+ (* ?x44 y u u) (* ?x502 ?x502 ?x502 y y u u u) (* ?x44 ?x44 ?x44 y u) (* ?x44 ?x502 ?x502 y u u u))))
 (let (($x276 (or (not (= (* (+ ?x322 (* ?x502 u) (* ?x44 y) ?x500) ?x191) 0)) (not (= (* (+ ?x322 (* ?x56 x) (* ?x181 v) ?x500) ?x223) 0)))))
 (let ((?x182 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x221 (and (= ?x182 0) $x276)))
 (rewrite (= $x221 $x1046))))))))))))))))))))))))
 ))
 (let (($x213 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x181 (+ y (* (- 1) x))))
 (let ((?x56 (+ u v)))
 (let ((?x223 (+ (* ?x56 ?x56 ?x181 v) (* ?x56 ?x56 ?x56 ?x181 ?x181 x x x) (* ?x56 ?x181 v v v) (* ?x56 ?x56 ?x56 ?x181 x x v))))
 (let ((?x500 (* (- 1) k!10)))
 (let ((?x277 (* ?x181 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x322 (* (- 1) k!00)))
 (let ((?x502 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x191 (+ (* ?x44 y u u) (* ?x502 ?x502 ?x502 y y u u u) (* ?x44 ?x44 ?x44 y u) (* ?x44 ?x502 ?x502 y u u u))))
 (let (($x276 (or (not (= (* (+ ?x322 (* ?x502 u) (* ?x44 y) ?x500) ?x191) 0)) (not (= (* (+ ?x322 ?x57 ?x277 ?x500) ?x223) 0)))))
 (and (= (+ ?x322 (* x u) (* y v) ?x500) 0) $x276)))))))))))) :qid k!29))
 ))
 (let ((?x189 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x181 (+ y (* (- 1) x))))
 (let ((?x56 (+ u v)))
 (let ((?x223 (+ (* ?x56 ?x56 ?x181 v) (* ?x56 ?x56 ?x56 ?x181 ?x181 x x x) (* ?x56 ?x181 v v v) (* ?x56 ?x56 ?x56 ?x181 x x v))))
 (let ((?x500 (* (- 1) k!10)))
 (let ((?x277 (* ?x181 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x322 (* (- 1) k!00)))
 (let ((?x502 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x191 (+ (* ?x44 y u u) (* ?x502 ?x502 ?x502 y y u u u) (* ?x44 ?x44 ?x44 y u) (* ?x44 ?x502 ?x502 y u u u))))
 (let (($x276 (or (not (= (* (+ ?x322 (* ?x502 u) (* ?x44 y) ?x500) ?x191) 0)) (not (= (* (+ ?x322 ?x57 ?x277 ?x500) ?x223) 0)))))
 (let ((?x182 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x221 (and (= ?x182 0) $x276)))
 (let (($x432 (and (= (+ ?x322 (* x u) (* y v) ?x500) 0) $x276)))
 (rewrite (= $x432 $x221)))))))))))))))))
 ))
 (let (($x186 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x181 (+ y (* (- 1) x))))
 (let ((?x56 (+ u v)))
 (let ((?x223 (+ (* ?x56 ?x56 ?x181 v) (* ?x56 ?x56 ?x56 ?x181 ?x181 x x x) (* ?x56 ?x181 v v v) (* ?x56 ?x56 ?x56 ?x181 x x v))))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x277 (* ?x181 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x502 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x191 (+ (* ?x44 y u u) (* ?x502 ?x502 ?x502 y y u u u) (* ?x44 ?x44 ?x44 y u) (* ?x44 ?x502 ?x502 y u u u))))
 (let (($x485 (or (not (= (* (+ ?x81 (* ?x502 u) (* ?x44 y) ?x97) ?x191) 0)) (not (= (* (+ ?x81 ?x57 ?x277 ?x97) ?x223) 0)))))
 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x485))))))))))))) :qid k!29))
 ))
 (let ((?x263 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x181 (+ y (* (- 1) x))))
 (let ((?x56 (+ u v)))
 (let ((?x223 (+ (* ?x56 ?x56 ?x181 v) (* ?x56 ?x56 ?x56 ?x181 ?x181 x x x) (* ?x56 ?x181 v v v) (* ?x56 ?x56 ?x56 ?x181 x x v))))
 (let ((?x500 (* (- 1) k!10)))
 (let ((?x277 (* ?x181 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x322 (* (- 1) k!00)))
 (let ((?x502 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x191 (+ (* ?x44 y u u) (* ?x502 ?x502 ?x502 y y u u u) (* ?x44 ?x44 ?x44 y u) (* ?x44 ?x502 ?x502 y u u u))))
 (let (($x276 (or (not (= (* (+ ?x322 (* ?x502 u) (* ?x44 y) ?x500) ?x191) 0)) (not (= (* (+ ?x322 ?x57 ?x277 ?x500) ?x223) 0)))))
 (let (($x432 (and (= (+ ?x322 (* x u) (* y v) ?x500) 0) $x276)))
 (let ((?x212 (* (+ (* (- 1) (* u00 x00)) ?x57 ?x277 (* (- 1) (* v00 y00))) ?x223)))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x229 (* ?x502 u)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let (($x485 (or (not (= (* (+ ?x81 ?x229 ?x45 ?x97) ?x191) 0)) (not (= ?x212 0)))))
 (let (($x87 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x485)))
 (rewrite (= $x87 $x432)))))))))))))))))))))))
 ))
 (let (($x72 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x58 (- y x)))
 (let ((?x56 (+ u v)))
 (let ((?x66 (+ (* ?x56 ?x56 v ?x58) (* ?x56 ?x56 ?x56 x x x ?x58 ?x58) (* ?x56 v v v ?x58) (* ?x56 ?x56 ?x56 v x x ?x58))))
 (let ((?x38 (* v00 y00)))
 (let ((?x67 (* (- (+ (* (- 1) u00 x00) (* ?x56 x) (* v ?x58)) ?x38) ?x66)))
 (let ((?x42 (- x y)))
 (let ((?x52 (+ (* u u (+ v u) y) (* u u u ?x42 ?x42 ?x42 y y) (* u (+ v u) (+ v u) (+ v u) y) (* u u u (+ v u) ?x42 ?x42 y))))
 (let ((?x47 (- (+ (* (- 1) u00 x00) (* u ?x42) (* (+ v u) y)) ?x38)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= (* ?x47 ?x52) 0)) (not (= ?x67 0))))))))))))) :qid k!29))
 ))
 (let ((?x523 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x181 (+ y (* (- 1) x))))
 (let ((?x56 (+ u v)))
 (let ((?x223 (+ (* ?x56 ?x56 ?x181 v) (* ?x56 ?x56 ?x56 ?x181 ?x181 x x x) (* ?x56 ?x181 v v v) (* ?x56 ?x56 ?x56 ?x181 x x v))))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x277 (* ?x181 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x502 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x191 (+ (* ?x44 y u u) (* ?x502 ?x502 ?x502 y y u u u) (* ?x44 ?x44 ?x44 y u) (* ?x44 ?x502 ?x502 y u u u))))
 (let (($x485 (or (not (= (* (+ ?x81 (* ?x502 u) (* ?x44 y) ?x97) ?x191) 0)) (not (= (* (+ ?x81 ?x57 ?x277 ?x97) ?x223) 0)))))
 (let (($x87 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x485)))
 (let ((?x66 (+ (* ?x56 ?x56 v (- y x)) (* ?x56 ?x56 ?x56 x x x (- y x) (- y x)) (* ?x56 v v v (- y x)) (* ?x56 ?x56 ?x56 v x x (- y x)))))
 (let ((?x67 (* (- (+ (* (- 1) u00 x00) ?x57 (* v (- y x))) ?x38) ?x66)))
 (let ((?x42 (- x y)))
 (let ((?x52 (+ (* u u ?x44 y) (* u u u ?x42 ?x42 ?x42 y y) (* u ?x44 ?x44 ?x44 y) (* u u u ?x44 ?x42 ?x42 y))))
 (let ((?x53 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x52)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x71 (and $x41 (or (not (= ?x53 0)) (not (= ?x67 0))))))
 (rewrite (= $x71 $x87)))))))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x147 (mp (mp @x73 (quant-intro (proof-bind ?x523) (= $x72 $x186)) $x186) (rewrite (= $x186 $x186)) $x186)))
 (let ((@x162 (mp (mp @x147 (quant-intro (proof-bind ?x263) (= $x186 $x213)) $x213) (quant-intro (proof-bind ?x189) (= $x213 $x220)) $x220)))
 (let ((@x1000 (mp~ (mp @x162 (quant-intro (proof-bind ?x206) (= $x220 $x521)) $x521) (sk (~ $x521 $x998)) $x998)))
 (let ((@x799 (mp @x1000 (rewrite (= $x998 $x328)) $x328)))
 (let ((@x608 (and-elim @x799 $x816)))
 (let ((@x532 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x816) $x871)) @x608 $x871)))
 (let (($x725 (<= ?x814 0)))
 (let ((@x534 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x816) $x725)) @x608 $x725)))
 (let (($x113 (not (<= ?x629 0))))
 (let (($x717 (>= ?x629 0)))
 (let (($x599 (>= ?x864 0)))
 (let (($x597 (<= ?x864 0)))
 (let ((@x627 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x356 (not $x597) (not $x599))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x597)) @x534 @x532 false) $x597) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x599)) @x534 @x532 false) $x599) $x356)))
 (let ((@x886 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x242 $x113 (not $x717))) (unit-resolution (and-elim @x799 $x107) @x627 $x630) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x717)) @x534 @x532 false) $x717) $x113)))
 ((_ th-lemma arith farkas 1 1 1) @x886 @x534 @x532 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             416
 :arith-nonlinear-horner    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 62
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                19.42
 :memory                    3.16
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                6694540556278.00
 :num-checks                1
 :propagations              14
 :rlimit-count              40393881
 :time                      41.84
 :total-time                41.84)
