unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x508 (* (- 1) k!2)))
 (let ((?x164 (* n!0 n!0)))
 (let ((?x324 (* 3 ?x164)))
 (let ((?x186 (+ ?x324 (* 3 n!0) ?x508)))
 (let (($x413 (<= ?x186 (- 1))))
 (let (($x184 (= ?x186 (- 1))))
 (let ((?x497 (* 3 (* m!1 m!1 n!0 n!0))))
 (let ((?x449 (* 6 (* m!1 n!0 n!0 n!0))))
 (let ((?x178 (* 6 k!2)))
 (let ((?x404 (* m!1 m!1 n!0 n!0 n!0)))
 (let ((?x349 (* 18 (* m!1 n!0 n!0))))
 (let ((?x285 (* 6 m!1)))
 (let ((?x125 (* 3 (* m!1 m!1 n!0))))
 (let ((?x150 (* m!1 m!1)))
 (let ((?x146 (* 18 (* m!1 n!0))))
 (let ((?x280 (+ c!3 k!2)))
 (let ((?x172 (+ m!1 k!2)))
 (let ((?x281 (+ 6 m!1)))
 (let ((?x137 (+ (* ?x281 ?x172 ?x172 ?x172 ?x280 ?x280 ?x280) ?x146 ?x150 (* m!1 k!2) (* m!1 n!0 n!0 n!0 k!2) (* 6 (* n!0 n!0 n!0 k!2)) ?x125 (* 18 (* n!0 k!2)) ?x285 (* 3 (* m!1 n!0 k!2)) (* 3 (* m!1 n!0 n!0 k!2)) (* 18 (* n!0 n!0 k!2)) ?x349 ?x404 ?x178 ?x449 ?x497)))
 (let ((?x97 (* ?x137 (+ 7 ?x324 (* (- 1) m!1) (* 9 n!0) ?x508))))
 (let (($x131 (= ?x97 0)))
 (let (($x215 (not $x131)))
 (let ((?x323 (* 9 n!0)))
 (let ((?x124 (* k!2 k!2)))
 (let ((?x350 (+ ?x124 (* (- 9) (* c!3 n!0)) (* (- 18) c!3) ?x323 (* (- 5) k!2))))
 (let ((?x259 (+ m!1 (* (- 6) n!0))))
 (let (($x253 (= ?x259 6)))
 (let (($x123 (and $x253 (= ?x350 (- 4)) (= (+ (* n!0 k!2) (* (- 3) c!3) (* 2 n!0) ?x508) (- 1)) $x184 $x215)))
 (let ((?x277 (+ k!2 m!1)))
 (let ((?x394 (+ ?x178 ?x285 (* 18 (* k!2 n!0)) (* ?x281 ?x277 ?x277 ?x277 ?x280 ?x280 ?x280) ?x125 (* 3 (* k!2 m!1 n!0)) ?x146 ?x150 (* k!2 m!1) ?x404 (* k!2 m!1 n!0 n!0 n!0) (* 18 (* k!2 n!0 n!0)) ?x349 (* 3 (* k!2 m!1 n!0 n!0)) ?x497 (* 6 (* k!2 n!0 n!0 n!0)) ?x449)))
 (let (($x265 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x234 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x124) (* 9 (* c!3 n!0)))))
 (let (($x318 (and $x253 (= ?x234 4) $x265 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x164)) 1) (not (= (* ?x394 (+ 7 ?x508 (* (- 1) m!1) ?x323 ?x324)) 0)))))
 (let (($x419 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x263 (* n n)))
 (let ((?x264 (* 3 ?x263)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x507 (* 6 (* m n n n))))
 (let ((?x503 (* 6 (* k n n n))))
 (let ((?x520 (* 3 (* m m n n))))
 (let ((?x519 (* 3 (* k m n n))))
 (let ((?x518 (* 18 (* m n n))))
 (let ((?x517 (* 18 (* k n n))))
 (let ((?x428 (* k m n n n)))
 (let ((?x427 (* m m n n n)))
 (let ((?x415 (* k m)))
 (let ((?x412 (* m m)))
 (let ((?x514 (* 18 (* m n))))
 (let ((?x515 (* 3 (* k m n))))
 (let ((?x516 (* 3 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x513 (* 18 ?x55)))
 (let ((?x418 (* 6 m)))
 (let ((?x421 (* 6 k)))
 (let ((?x409 (+ ?x421 ?x418 ?x513 ?x243 ?x516 ?x515 ?x514 ?x412 ?x415 ?x427 ?x428 ?x517 ?x518 ?x519 ?x520 ?x503 ?x507)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) ?x263)) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x202 (= (+ ?x40 ?x44 ?x204 ?x205 (* 9 (* c n))) 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 $x202 $x254 $x292 (not (= (* ?x409 (+ 7 ?x232 ?x348 ?x48 ?x264)) 0))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x163 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x327 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x266 (not (= (* (+ ?x243 (* ?x327 ?x327 ?x327 ?x385 ?x71)) ?x229) 0))))
 (let (($x322 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let (($x159 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x159 $x322 $x266))))))))))))))))))) :qid k!34))
 ))
 (let ((?x476 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x263 (* n n)))
 (let ((?x264 (* 3 ?x263)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x507 (* 6 (* m n n n))))
 (let ((?x503 (* 6 (* k n n n))))
 (let ((?x520 (* 3 (* m m n n))))
 (let ((?x519 (* 3 (* k m n n))))
 (let ((?x518 (* 18 (* m n n))))
 (let ((?x517 (* 18 (* k n n))))
 (let ((?x428 (* k m n n n)))
 (let ((?x427 (* m m n n n)))
 (let ((?x415 (* k m)))
 (let ((?x412 (* m m)))
 (let ((?x514 (* 18 (* m n))))
 (let ((?x515 (* 3 (* k m n))))
 (let ((?x516 (* 3 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x513 (* 18 ?x55)))
 (let ((?x418 (* 6 m)))
 (let ((?x421 (* 6 k)))
 (let ((?x409 (+ ?x421 ?x418 ?x513 ?x243 ?x516 ?x515 ?x514 ?x412 ?x415 ?x427 ?x428 ?x517 ?x518 ?x519 ?x520 ?x503 ?x507)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) ?x263)) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x202 (= (+ ?x40 ?x44 ?x204 ?x205 (* 9 (* c n))) 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x220 (and $x118 $x202 $x254 $x292 (not (= (* ?x409 (+ 7 ?x232 ?x348 ?x48 ?x264)) 0)))))
 (let ((?x65 (* 3 n)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x261 (+ ?x243 (* (+ 1 n) (+ 1 n) (+ 1 n) ?x385 ?x71))))
 (let (($x266 (not (= (* ?x261 ?x229) 0))))
 (let (($x322 (= (+ ?x264 ?x232 ?x65) (- 1))))
 (let (($x159 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x486 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x159 $x322 $x266)))
 (rewrite (= $x486 $x220)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x272 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x327 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x266 (not (= (* (+ ?x243 (* ?x327 ?x327 ?x327 ?x385 ?x71)) ?x229) 0))))
 (let (($x322 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x445 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= ?x445 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) $x322 $x266)))))))))))))))) :qid k!34))
 ))
 (let ((?x458 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x327 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x266 (not (= (* (+ ?x243 (* ?x327 ?x327 ?x327 ?x385 ?x71)) ?x229) 0))))
 (let (($x322 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let (($x159 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x205 (* (- 1) ?x49)))
 (let ((?x204 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x486 (and $x118 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x204 ?x205) 4) $x159 $x322 $x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x445 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x273 (and $x118 (= ?x445 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) $x322 $x266)))
 (rewrite (= $x273 $x486)))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x79 (+ (* (+ c k) (+ c k) (+ c k) ?x71 ?x71 ?x71 ?x76) (* ?x71 ?x76 ?x68 ?x68 ?x68))))
 (let (($x81 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x79) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x81))))))))))))))) :qid k!34))
 ))
 (let ((?x139 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x327 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let (($x266 (not (= (* (+ ?x243 (* ?x327 ?x327 ?x327 ?x385 ?x71)) ?x229) 0))))
 (let (($x322 (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x445 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x273 (and $x118 (= ?x445 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) $x322 $x266)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x79 (+ (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x76) (* ?x71 ?x76 ?x68 ?x68 ?x68))))
 (let (($x81 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x79) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x81)))))
 (rewrite (= $x84 $x273))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x298 (mp (mp @x86 (quant-intro (proof-bind ?x139) (= $x85 $x272)) $x272) (rewrite (= $x272 $x272)) $x272)))
 (let ((@x212 (mp (mp @x298 (quant-intro (proof-bind ?x458) (= $x272 $x163)) $x163) (quant-intro (proof-bind ?x476) (= $x163 $x419)) $x419)))
 (let ((@x479 (mp (mp~ @x212 (sk (~ $x419 $x318)) $x318) (rewrite (= $x318 $x123)) $x123)))
 (let ((@x355 (and-elim @x479 $x184)))
 (let ((@x485 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x413)) @x355 $x413)))
 (let (($x488 (>= ?x259 6)))
 (let ((@x286 (and-elim @x479 $x253)))
 (let ((@x373 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x253) $x488)) @x286 $x488)))
 (let (($x456 (>= ?x186 (- 1))))
 (let ((@x442 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x456)) @x355 $x456)))
 (let (($x448 (<= ?x259 6)))
 (let ((@x441 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x253) $x448)) @x286 $x448)))
 (let (($x466 (not (<= ?x97 0))))
 (let (($x414 (>= ?x97 0)))
 (let ((@x473 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x414)) @x441 @x442 @x373 @x485 false) $x414)))
 (let ((@x465 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x131 $x466 (not $x414))) (and-elim @x479 $x215) (or $x466 (not $x414)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x465 @x473 $x466) @x441 @x442 @x373 @x485 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        1
 :arith-assert-lower        29
 :arith-assert-upper        37
 :arith-branch-var          2
 :arith-conflicts           5
 :arith-eq-adapter          5
 :arith-fixed-eqs           2
 :arith-gcd-tests           10
 :arith-ineq-splits         2
 :arith-max-min             260
 :arith-nonlinear-bounds    24
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              8
 :arith-pseudo-nonlinear    5
 :arith-row-summations      26
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    9
 :conflicts                 5
 :decisions                 12
 :del-clause                17
 :final-checks              9
 :max-memory                3.58
 :memory                    3.09
 :mk-bool-var               30
 :mk-clause                 17
 :num-allocs                1145910
 :num-checks                1
 :propagations              12
 :rlimit-count              4029
 :time                      0.01
 :total-time                0.01)
