unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x48 (+ ?x46 ?x47 ?x45)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x51)))))))))))))) :qid k!29))
 ))
 (let (($x81 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x267 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x48 (+ ?x46 ?x47 ?x45)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x151 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x68 (= (+ (* (- 1) y00) y) 0)))
 (let (($x229 (and $x68 $x151 false)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x128 (+ r ?x58)))
 (let ((?x153 (* y00 ?x128 ?x128 ?x128)))
 (let ((?x125 (+ 1 q)))
 (let ((?x137 (* y00 y00 ?x125 ?x125 ?x128 ?x128)))
 (let ((?x138 (* (- 1) ?x137)))
 (let ((?x163 (+ ?x138 (* (- 1) ?x153))))
 (let ((?x178 (+ ?x163 ?x137 ?x153)))
 (let ((@x132 (rewrite (= ?x43 ?x128))))
 (let ((@x158 (trans (monotonicity @x132 @x132 @x132 (= ?x45 (* ?x128 ?x128 ?x128 y00))) (rewrite (= (* ?x128 ?x128 ?x128 y00) ?x153)) (= ?x45 ?x153))))
 (let ((@x127 (rewrite (= ?x42 ?x125))))
 (let ((@x172 (monotonicity @x127 @x127 @x132 @x132 (= ?x47 (* ?x125 ?x125 ?x128 ?x128 y00 y00)))))
 (let ((@x177 (trans @x172 (rewrite (= (* ?x125 ?x125 ?x128 ?x128 y00 y00) ?x137)) (= ?x47 ?x137))))
 (let ((@x135 (monotonicity (rewrite (= ?x28 (- 1))) @x127 @x127 @x132 @x132 (= ?x44 (* (- 1) ?x125 ?x125 ?x128 ?x128 y00 y00)))))
 (let ((@x144 (trans @x135 (rewrite (= (* (- 1) ?x125 ?x125 ?x128 ?x128 y00 y00) ?x138)) (= ?x44 ?x138))))
 (let ((@x169 (trans (monotonicity @x144 @x158 (= ?x46 (- ?x138 ?x153))) (rewrite (= (- ?x138 ?x153) ?x163)) (= ?x46 ?x163))))
 (let ((@x183 (trans (monotonicity @x169 @x177 @x158 (= ?x48 ?x178)) (rewrite (= ?x178 0)) $x49)))
 (let ((@x242 (trans (monotonicity @x183 (= $x49 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x49 true))))
 (let ((@x256 (trans (monotonicity @x242 (= $x50 (not true))) (rewrite (= (not true) false)) (= $x50 false))))
 (let ((@x65 (trans (monotonicity @x256 (= $x51 (or false))) (rewrite (= (or false) false)) (= $x51 false))))
 (let ((@x257 (monotonicity (rewrite (= $x33 $x68)) (rewrite (= $x41 $x151)) @x65 (= $x52 $x229))))
 (trans @x257 (rewrite (= $x229 false)) (= $x52 false)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x272 (trans (quant-intro (proof-bind ?x267) (= $x53 $x81)) (elim-unused (= $x81 false)) (= $x53 false))))
 (let ((@x54 (asserted $x53)))
 (mp @x54 @x272 false))))))))

(:max-memory   3.40
 :memory       3.09
 :mk-bool-var  5
 :num-allocs   919184
 :rlimit-count 265
 :time         0.01
 :total-time   0.01)
