unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x760 (* n!0 k!2)))
 (let ((?x789 (* (- 1) k!2)))
 (let ((?x337 (+ (* 2 n!0) (* (- 3) c!3) ?x789 ?x760)))
 (let (($x534 (<= ?x337 (- 1))))
 (let (($x231 (= ?x337 (- 1))))
 (let ((?x740 (+ c!3 k!2)))
 (let ((?x544 (+ m!1 k!2)))
 (let ((?x717 (+ 6 m!1)))
 (let ((?x219 (+ 1 n!0)))
 (let ((?x694 (* k!2 k!2)))
 (let ((?x665 (* c!3 k!2)))
 (let ((?x546 (* (- 3) (* ?x219 ?x219 ?x219 ?x219 ?x717 ?x544 ?x544 ?x544 ?x740 ?x740 ?x740))))
 (let ((?x787 (+ (* ?x219 ?x219 ?x717 ?x544 ?x544 ?x740 ?x740) (* n!0 k!2 k!2) (* m!1 n!0 c!3) (* n!0 c!3 k!2) (* 3 (* ?x219 ?x219 ?x219 ?x219 ?x717 ?x544 ?x544 ?x740 ?x740)) (* (- 1) (* ?x219 ?x219 ?x717 ?x544 ?x544 ?x544 ?x740 ?x740 ?x740)) (* ?x219 ?x219 ?x717 ?x544 ?x544 ?x544 ?x544 ?x740 ?x740 ?x740) (* 3 (* ?x219 ?x219 ?x219 ?x717 ?x544 ?x544 ?x740 ?x740)) (* m!1 k!2) (* m!1 n!0 k!2) (* (- 3) (* n!0 n!0 n!0 k!2)) (* ?x219 ?x219 ?x717 ?x717 ?x717 ?x544 ?x544 ?x740) ?x546 (* (- 1) (* ?x219 ?x219 ?x717 ?x717 ?x717 ?x544 ?x544 ?x544 ?x740)) (* (- 12) (* n!0 n!0 c!3)) (* 3 (* ?x219 ?x219 ?x219 ?x717 ?x717 ?x717 ?x544 ?x544 ?x740)) (* (- 16) (* n!0 c!3)) (* (- 3) (* n!0 n!0 n!0 c!3)) (* m!1 c!3) (* 3 (* ?x219 ?x219 ?x219 ?x219 ?x717 ?x717 ?x717 ?x544 ?x544 ?x740)) (* (- 1) (* ?x219 ?x219 ?x717 ?x544 ?x544 ?x544 ?x740 ?x740)) ?x665 ?x694 (* (- 12) (* n!0 n!0 k!2)) (* (- 7) c!3) (* (- 7) k!2) (* (- 16) ?x760) (* (- 3) (* ?x219 ?x219 ?x219 ?x717 ?x544 ?x544 ?x544 ?x740 ?x740 ?x740)))))
 (let (($x574 (= ?x787 0)))
 (let (($x780 (not $x574)))
 (let ((?x445 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x789)))
 (let (($x127 (= ?x445 (- 1))))
 (let ((?x693 (* 5 k!2)))
 (let ((?x153 (* 18 c!3)))
 (let ((?x790 (* (- 9) n!0)))
 (let ((?x584 (* (- 1) ?x694)))
 (let ((?x359 (+ (* 9 (* n!0 c!3)) ?x584 ?x790 ?x153 ?x693)))
 (let (($x330 (= ?x359 4)))
 (let ((?x714 (+ m!1 (* (- 6) n!0))))
 (let (($x658 (= ?x714 6)))
 (let (($x563 (and $x658 $x330 $x231 $x127 $x780)))
 (let ((?x716 (+ k!2 m!1)))
 (let ((?x982 (* 3 (* ?x219 ?x219 ?x219 ?x219 ?x717 ?x716 ?x716 ?x716 ?x740 ?x740 ?x740))))
 (let ((?x203 (+ (* 7 c!3) (* 7 k!2) ?x584 (* 16 (* k!2 n!0)) (* 3 (* ?x219 ?x219 ?x219 ?x717 ?x716 ?x716 ?x716 ?x740 ?x740 ?x740)) (* 16 (* c!3 n!0)) (* ?x219 ?x219 ?x717 ?x717 ?x717 ?x716 ?x716 ?x716 ?x740) (* ?x219 ?x219 ?x717 ?x716 ?x716 ?x716 ?x740 ?x740 ?x740) (* ?x219 ?x219 ?x717 ?x716 ?x716 ?x716 ?x740 ?x740) (* (- 3) (* ?x219 ?x219 ?x219 ?x717 ?x716 ?x716 ?x740 ?x740)) ?x982 (* (- 1) (* ?x219 ?x219 ?x717 ?x716 ?x716 ?x716 ?x716 ?x740 ?x740 ?x740)) (* (- 1) (* ?x219 ?x219 ?x717 ?x716 ?x716 ?x740 ?x740)) (* (- 1) (* k!2 m!1)) (* 12 (* c!3 n!0 n!0)) (* (- 3) (* ?x219 ?x219 ?x219 ?x717 ?x717 ?x717 ?x716 ?x716 ?x740)) (* 12 (* k!2 n!0 n!0)) (* (- 1) (* ?x219 ?x219 ?x717 ?x717 ?x717 ?x716 ?x716 ?x740)) (* 3 (* k!2 n!0 n!0 n!0)) (* 3 (* c!3 n!0 n!0 n!0)) (* (- 1) (* c!3 m!1)) (* (- 1) ?x665) (* (- 1) (* k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 n!0)) (* (- 1) (* c!3 m!1 n!0)) (* (- 1) (* c!3 k!2 n!0)) (* (- 3) (* ?x219 ?x219 ?x219 ?x219 ?x717 ?x716 ?x716 ?x740 ?x740)) (* (- 3) (* ?x219 ?x219 ?x219 ?x219 ?x717 ?x717 ?x717 ?x716 ?x716 ?x740)))))
 (let (($x334 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x465 (and $x658 (= (+ ?x153 ?x693 ?x790 ?x584 (* 9 (* c!3 n!0))) 4) $x334 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x203 0)))))
 (let (($x725 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x781 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x891 (* (- 1) (* c k n))))
 (let ((?x898 (* (- 1) (* c m n))))
 (let ((?x893 (* (- 1) (* k k n))))
 (let ((?x900 (* (- 1) (* k m n))))
 (let ((?x895 (* (- 1) (* c k))))
 (let ((?x902 (* (- 1) (* c m))))
 (let ((?x466 (* 3 (* c n n n))))
 (let ((?x464 (* 3 (* k n n n))))
 (let ((?x897 (* 12 (* k n n))))
 (let ((?x904 (* 12 (* c n n))))
 (let ((?x901 (* (- 1) (* k m))))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x253 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x206 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x159 (* c n)))
 (let ((?x903 (* 16 ?x159)))
 (let ((?x55 (* k n)))
 (let ((?x914 (* 16 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x224 (* (- 1) ?x49)))
 (let ((?x916 (* 7 k)))
 (let ((?x911 (* 7 c)))
 (let ((?x724 (+ ?x911 ?x916 ?x224 ?x914 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x903 ?x206 ?x210 ?x253 (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) ?x901 ?x904 (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) ?x897 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) ?x464 ?x466 ?x902 ?x895 ?x900 ?x893 ?x898 ?x891 (* (- 3) (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* (- 3) ?x781))))
 (let (($x311 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x273 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x221 (= (+ ?x40 ?x44 (* (- 9) n) ?x224 (* 9 ?x159)) 4)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (and $x137 $x221 $x273 $x311 (not (= ?x724 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x494 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x426 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x384 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x386 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x386 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x384 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)) ?x426 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x514 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x833 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x568 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (and $x137 (= ?x568 (- 4)) $x833 $x514 (not (= ?x228 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x571 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x781 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x891 (* (- 1) (* c k n))))
 (let ((?x898 (* (- 1) (* c m n))))
 (let ((?x893 (* (- 1) (* k k n))))
 (let ((?x900 (* (- 1) (* k m n))))
 (let ((?x895 (* (- 1) (* c k))))
 (let ((?x902 (* (- 1) (* c m))))
 (let ((?x466 (* 3 (* c n n n))))
 (let ((?x464 (* 3 (* k n n n))))
 (let ((?x897 (* 12 (* k n n))))
 (let ((?x904 (* 12 (* c n n))))
 (let ((?x901 (* (- 1) (* k m))))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x253 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x206 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x159 (* c n)))
 (let ((?x903 (* 16 ?x159)))
 (let ((?x55 (* k n)))
 (let ((?x914 (* 16 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x224 (* (- 1) ?x49)))
 (let ((?x916 (* 7 k)))
 (let ((?x911 (* 7 c)))
 (let ((?x724 (+ ?x911 ?x916 ?x224 ?x914 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x903 ?x206 ?x210 ?x253 (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) ?x901 ?x904 (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) ?x897 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) ?x464 ?x466 ?x902 ?x895 ?x900 ?x893 ?x898 ?x891 (* (- 3) (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* (- 3) ?x781))))
 (let (($x311 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x273 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x221 (= (+ ?x40 ?x44 (* (- 9) n) ?x224 (* 9 ?x159)) 4)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (let (($x235 (and $x137 $x221 $x273 $x311 (not (= ?x724 0)))))
 (let ((?x426 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x384 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x386 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x386 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x384 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) ?x206) ?x426 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 ?x781) (* (- 3) ?x299) (* (- 1) ?x253) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x514 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x833 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x568 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x587 (and $x137 (= ?x568 (- 4)) $x833 $x514 (not (= ?x228 0)))))
 (rewrite (= $x587 $x235))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x76 (+ (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x69 ?x71))))
 (let ((?x80 (+ (- ?x76 (* ?x68 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x84 (- (- ?x80 (* 3 ?x68 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x87 (+ ?x84 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x91 (+ (- ?x87 (* 3 ?x68 ?x71 ?x71)) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x96 (- ?x91 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x98 (- (- ?x96 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x100 (= (- ?x98 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x100)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x112 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x426 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x384 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x386 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x386 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x384 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)) ?x426 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x514 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x833 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x568 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (let (($x587 (and $x137 (= ?x568 (- 4)) $x833 $x514 (not (= ?x228 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x76 (+ (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x69 ?x71))))
 (let ((?x80 (+ (- ?x76 (* ?x68 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x84 (- (- ?x80 (* 3 ?x68 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x87 (+ ?x84 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x91 (+ (- ?x87 (* 3 ?x68 ?x71 ?x71)) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x96 (- ?x91 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x98 (- (- ?x96 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x100 (= (- ?x98 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x103 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x100)))))
 (rewrite (= $x103 $x587))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x271 (mp (mp @x105 (quant-intro (proof-bind ?x112) (= $x104 $x494)) $x494) (rewrite (= $x494 $x494)) $x494)))
 (let ((@x482 (mp~ (mp @x271 (quant-intro (proof-bind ?x571) (= $x494 $x725)) $x725) (sk (~ $x725 $x465)) $x465)))
 (let ((@x707 (mp @x482 (rewrite (= $x465 $x563)) $x563)))
 (let ((@x577 (and-elim @x707 $x231)))
 (let ((@x363 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x231) $x534)) @x577 $x534)))
 (let (($x488 (>= ?x337 (- 1))))
 (let ((@x533 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x231) $x488)) @x577 $x488)))
 (let (($x474 (<= ?x359 4)))
 (let ((@x333 (and-elim @x707 $x330)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x330) $x474)) @x333 $x474)))
 (let (($x552 (>= ?x359 4)))
 (let ((@x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x330) $x552)) @x333 $x552)))
 (let (($x492 (<= ?x445 (- 1))))
 (let ((@x575 (and-elim @x707 $x127)))
 (let ((@x389 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x127) $x492)) @x575 $x492)))
 (let (($x186 (>= ?x445 (- 1))))
 (let ((@x366 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x127) $x186)) @x575 $x186)))
 (let (($x371 (<= ?x714 6)))
 (let ((@x530 (and-elim @x707 $x658)))
 (let ((@x393 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x658) $x371)) @x530 $x371)))
 (let (($x440 (>= ?x714 6)))
 (let ((@x396 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x658) $x440)) @x530 $x440)))
 (let (($x189 (not (<= ?x787 0))))
 (let (($x564 (>= ?x787 0)))
 (let ((@x395 ((_ th-lemma arith) (hypothesis (not $x564)) @x396 @x393 @x366 @x389 @x533 @x363 @x366 @x389 @x240 @x238 @x366 @x389 @x366 @x389 @x396 @x393 @x366 @x389 @x396 @x393 @x366 @x389 @x240 @x238 @x533 @x363 false)))
 (let ((@x734 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x574 $x189 (not $x564))) (and-elim @x707 $x780) (or $x189 (not $x564)))))
 ((_ th-lemma arith) (unit-resolution @x734 (lemma @x395 $x564) $x189) @x396 @x393 @x366 @x389 @x533 @x363 @x366 @x389 @x240 @x238 @x366 @x389 @x366 @x389 @x396 @x393 @x366 @x389 @x396 @x393 @x366 @x389 @x240 @x238 @x533 @x363 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           1
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             345
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             1
 :arith-pivots              6
 :arith-row-summations      9
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                19.81
 :memory                    19.23
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                742177
 :num-checks                1
 :propagations              11
 :rlimit-count              17066
 :time                      0.02
 :total-time                0.03)
