unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x573 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x215 (>= ?x573 (- 6))))
 (let (($x575 (= ?x573 (- 6))))
 (let ((?x596 (+ k!2 c!3)))
 (let ((?x360 (+ k!2 m!1)))
 (let ((?x359 (+ 6 m!1)))
 (let ((?x355 (+ 1 n!0)))
 (let ((?x335 (* ?x355 ?x355 ?x359 ?x359 ?x359 ?x359 ?x360 ?x360 ?x360 ?x360 ?x360 ?x596 ?x596 ?x596 ?x596 ?x596 ?x596 (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x599 (= ?x335 0)))
 (let (($x328 (not $x599)))
 (let (($x342 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1)))
 (let (($x582 (= (+ k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0)) (* 3 c!3)) 1)))
 (let ((?x324 (* (- 1) (* k!2 k!2))))
 (let ((?x225 (* 18 c!3)))
 (let ((?x120 (* (- 9) n!0)))
 (let ((?x119 (* 5 k!2)))
 (let (($x337 (and $x575 (= (+ ?x119 ?x120 ?x225 ?x324 (* 9 (* n!0 c!3))) 4) $x582 $x342 $x328)))
 (let ((?x366 (+ c!3 k!2)))
 (let ((?x610 (* ?x355 ?x355 ?x359 ?x359 ?x359 ?x359 ?x360 ?x360 ?x360 ?x360 ?x360 ?x366 ?x366 ?x366 ?x366 ?x366 ?x366 (+ (- 6) m!1 (* (- 6) n!0)))))
 (let (($x611 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x368 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x225 ?x119 ?x120 ?x324 (* 9 (* c!3 n!0))) 4) $x611 $x342 (not (= ?x610 0)))))
 (let (($x593 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 $x207 $x259 $x297 $x572)))))))))))))))) :qid k!34))
 ))
 (let (($x570 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x572))))))))))))))) :qid k!34))
 ))
 (let ((?x585 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x558 (and $x123 $x207 $x259 $x297 $x572)))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x572)))
 (rewrite (= $x105 $x558)))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x72 (+ c k)))
 (let ((?x69 (+ n 1)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 (- 1) ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x569 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x572)))
 (let ((?x74 (+ m 6)))
 (let ((?x69 (+ n 1)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 (- 1) ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x80 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0))))))
 (rewrite (= $x80 $x105)))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x350 (mp (mp @x82 (quant-intro (proof-bind ?x569) (= $x81 $x570)) $x570) (rewrite (= $x570 $x570)) $x570)))
 (let ((@x369 (mp~ (mp @x350 (quant-intro (proof-bind ?x585) (= $x570 $x593)) $x593) (sk (~ $x593 $x368)) $x368)))
 (let ((@x522 (mp @x369 (rewrite (= $x368 $x337)) $x337)))
 (let ((@x525 (and-elim @x522 $x575)))
 (let ((@x182 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x575) $x215)) @x525 $x215)))
 (let (($x169 (<= ?x573 (- 6))))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x575) $x169)) @x525 $x169)))
 (let (($x189 (not (<= ?x335 0))))
 (let (($x153 (>= ?x335 0)))
 (let ((@x107 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x599 $x189 (not $x153))) (and-elim @x522 $x328) (or $x189 (not $x153)))))
 (let ((@x108 (unit-resolution @x107 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x153)) @x177 @x182 false) $x153) $x189)))
 ((_ th-lemma arith farkas 1 1 1) @x108 @x177 @x182 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      19
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                19.60
 :memory                    19.13
 :mk-bool-var               28
 :mk-clause                 24
 :num-allocs                488629
 :num-checks                1
 :propagations              12
 :rlimit-count              4000
 :time                      0.01
 :total-time                0.02)
