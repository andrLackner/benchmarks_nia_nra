unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x382 (* k!2 k!2)))
 (let ((?x234 (+ (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) ?x382 (* (- 9) (* n!0 c!3)))))
 (let (($x299 (<= ?x234 (- 4))))
 (let (($x230 (= ?x234 (- 4))))
 (let ((?x592 (+ m!1 k!2)))
 (let ((?x398 (+ 6 m!1)))
 (let ((?x458 (+ 1 n!0)))
 (let ((?x529 (+ k!2 c!3)))
 (let ((?x160 (+ (* ?x458 ?x458 ?x398 ?x398 ?x592 ?x592 ?x592 ?x592 ?x529 ?x529) (* (- 2) (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x592 ?x592)) (* (- 3) (* ?x458 ?x398 ?x398 ?x592 ?x592 ?x592 ?x529 ?x529 ?x529)) (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x592 ?x529) (* ?x458 ?x398 ?x398 ?x398 ?x592 ?x592 ?x592) (* 3 (* ?x458 ?x398 ?x398 ?x398 ?x592 ?x592 ?x529)) (* (- 2) (* ?x458 ?x458 ?x458 ?x398 ?x398 ?x398 ?x529)) (* (- 1) (* ?x458 ?x458 ?x458 ?x398 ?x398 ?x398 ?x592 ?x529)) (* ?x458 ?x398 ?x398 ?x592 ?x592 ?x592 ?x529 ?x529) (* (- 1) (* ?x458 ?x398 ?x398 ?x592 ?x592 ?x592 ?x592 ?x529 ?x529)) (* (- 1) (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x592 ?x592 ?x592)) (* (- 1) (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x529)) (* 3 (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x529 ?x529)) (* 2 (* ?x458 ?x458 ?x398 ?x398 ?x592 ?x592 ?x592 ?x529 ?x529)) (* (- 1) (* ?x458 ?x398 ?x398 ?x398 ?x592 ?x592)))))
 (let (($x495 (= ?x160 0)))
 (let (($x390 (not $x495)))
 (let ((?x260 (* (- 1) k!2)))
 (let ((?x277 (+ (* 3 n!0) ?x260 (* 3 (* n!0 n!0)))))
 (let (($x238 (= ?x277 (- 1))))
 (let ((?x253 (+ (* 2 n!0) ?x260 (* (- 3) c!3) (* n!0 k!2))))
 (let (($x149 (= ?x253 (- 1))))
 (let ((?x295 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x395 (= ?x295 (- 6))))
 (let (($x348 (and $x395 $x230 $x149 $x238 $x390)))
 (let ((?x256 (* (- 1) (* ?x458 ?x458 ?x398 ?x398 ?x398 (+ k!2 m!1) (+ c!3 k!2)))))
 (let ((?x289 (+ c!3 k!2)))
 (let ((?x623 (+ k!2 m!1)))
 (let ((?x498 (+ (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x289) (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x623 ?x623 ?x623) (* (- 1) (* ?x458 ?x398 ?x398 ?x398 ?x623 ?x623 ?x623)) (* (- 3) (* ?x458 ?x398 ?x398 ?x398 ?x623 ?x623 ?x289)) (* ?x458 ?x398 ?x398 ?x623 ?x623 ?x623 ?x623 ?x289 ?x289) (* (- 1) (* ?x458 ?x398 ?x398 ?x623 ?x623 ?x623 ?x289 ?x289)) (* 2 (* ?x458 ?x458 ?x458 ?x398 ?x398 ?x398 ?x289)) (* 3 (* ?x458 ?x398 ?x398 ?x623 ?x623 ?x623 ?x289 ?x289 ?x289)) (* (- 1) (* ?x458 ?x458 ?x398 ?x398 ?x623 ?x623 ?x623 ?x623 ?x289 ?x289)) (* (- 3) (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x289 ?x289)) (* 2 (* ?x458 ?x458 ?x398 ?x398 ?x398 ?x623 ?x623)) (* ?x458 ?x458 ?x458 ?x398 ?x398 ?x398 ?x623 ?x289) (* ?x458 ?x398 ?x398 ?x398 ?x623 ?x623) (* (- 2) (* ?x458 ?x458 ?x398 ?x398 ?x623 ?x623 ?x623 ?x289 ?x289)) ?x256)))
 (let (($x461 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x404 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x382) (* 9 (* c!3 n!0)))))
 (let (($x257 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x404 4) $x461 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x498 0)))))
 (let (($x140 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x437 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69))))
 (let ((?x518 (* (- 2) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x510 (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70)))
 (let ((?x503 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69)))
 (let ((?x355 (* 2 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70))))
 (let ((?x373 (* (- 3) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69))))
 (let ((?x464 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x474 (* 3 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x217 (* 2 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69))))
 (let ((?x191 (* (- 1) (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x208 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x187 (* (- 3) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x69))))
 (let ((?x107 (* (- 1) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70))))
 (let ((?x117 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70)))
 (let ((?x116 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69)))
 (let ((?x228 (+ ?x116 ?x117 ?x107 ?x187 ?x208 ?x191 ?x217 ?x474 ?x464 ?x373 ?x355 ?x503 ?x510 ?x518 ?x437)))
 (let (($x309 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x271 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x223 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x219 (= ?x223 4)))
 (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (and $x135 $x219 $x271 $x309 (not (= ?x228 0)))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x138 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x510 (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70)))
 (let ((?x69 (+ c k)))
 (let ((?x503 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69)))
 (let ((?x464 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x437 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69))))
 (let ((?x518 (* (- 2) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x355 (* 2 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70))))
 (let ((?x373 (* (- 3) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69))))
 (let ((?x474 (* 3 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x191 (* (- 1) (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x107 (* (- 1) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70))))
 (let ((?x116 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69)))
 (let ((?x117 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70)))
 (let ((?x217 (* 2 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69))))
 (let ((?x208 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x187 (* (- 3) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x69))))
 (let ((?x532 (+ ?x187 ?x208 ?x217 ?x117 ?x116 ?x107 ?x191 ?x474 ?x373 ?x355 ?x518 ?x437 ?x464 ?x503 ?x510)))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x245 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x202 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (and $x135 (= ?x202 (- 4)) $x245 $x153 (not (= ?x532 0))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x151 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x437 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69))))
 (let ((?x518 (* (- 2) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x510 (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70)))
 (let ((?x503 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69)))
 (let ((?x355 (* 2 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70))))
 (let ((?x373 (* (- 3) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69))))
 (let ((?x464 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x474 (* 3 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x217 (* 2 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69))))
 (let ((?x191 (* (- 1) (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x208 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x187 (* (- 3) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x69))))
 (let ((?x107 (* (- 1) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70))))
 (let ((?x117 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70)))
 (let ((?x116 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69)))
 (let ((?x228 (+ ?x116 ?x117 ?x107 ?x187 ?x208 ?x191 ?x217 ?x474 ?x464 ?x373 ?x355 ?x503 ?x510 ?x518 ?x437)))
 (let (($x309 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x271 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x223 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x219 (= ?x223 4)))
 (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x235 (and $x135 $x219 $x271 $x309 (not (= ?x228 0)))))
 (let ((?x532 (+ ?x187 ?x208 ?x217 ?x117 ?x116 ?x107 ?x191 ?x474 ?x373 ?x355 ?x518 ?x437 ?x464 ?x503 ?x510)))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x245 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x202 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x115 (and $x135 (= ?x202 (- 4)) $x245 $x153 (not (= ?x532 0)))))
 (rewrite (= $x115 $x235))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x78 (+ (* (- 3) ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72) (* 2 ?x69 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72) (* ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72) (* ?x69 ?x71 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x82 (- (- ?x78 (* ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x86 (- (+ ?x82 (* 3 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72)) (* 3 ?x69 ?x69 ?x71 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x92 (- (+ ?x86 (* 2 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* 2 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x94 (- (- ?x92 (* ?x69 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x97 (+ ?x94 (* ?x69 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72) (* ?x70 ?x70 ?x71 ?x71 ?x71 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x97 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x113 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x70 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x510 (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70)))
 (let ((?x69 (+ c k)))
 (let ((?x503 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69)))
 (let ((?x464 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x437 (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x69))))
 (let ((?x518 (* (- 2) (* ?x322 ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x355 (* 2 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70))))
 (let ((?x373 (* (- 3) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69))))
 (let ((?x474 (* 3 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69))))
 (let ((?x191 (* (- 1) (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x69 ?x69))))
 (let ((?x107 (* (- 1) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70))))
 (let ((?x116 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69)))
 (let ((?x117 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x70)))
 (let ((?x217 (* 2 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69))))
 (let ((?x208 (* ?x322 ?x319 ?x319 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x187 (* (- 3) (* ?x322 ?x319 ?x319 ?x319 ?x70 ?x70 ?x69))))
 (let ((?x532 (+ ?x187 ?x208 ?x217 ?x117 ?x116 ?x107 ?x191 ?x474 ?x373 ?x355 ?x518 ?x437 ?x464 ?x503 ?x510)))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x245 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x202 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x135 (= (+ m (* (- 6) n)) 6)))
 (let (($x115 (and $x135 (= ?x202 (- 4)) $x245 $x153 (not (= ?x532 0)))))
 (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x78 (+ (* (- 3) ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72) (* 2 ?x69 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72) (* ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72) (* ?x69 ?x71 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x82 (- (- ?x78 (* ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x86 (- (+ ?x82 (* 3 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72)) (* 3 ?x69 ?x69 ?x71 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x92 (- (+ ?x86 (* 2 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* 2 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x94 (- (- ?x92 (* ?x69 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x97 (+ ?x94 (* ?x69 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72) (* ?x70 ?x70 ?x71 ?x71 ?x71 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x101 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x97 0))))))
 (rewrite (= $x101 $x115))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x399 (mp (mp @x103 (quant-intro (proof-bind ?x113) (= $x102 $x138)) $x138) (rewrite (= $x138 $x138)) $x138)))
 (let ((@x388 (mp~ (mp @x399 (quant-intro (proof-bind ?x151) (= $x138 $x140)) $x140) (sk (~ $x140 $x257)) $x257)))
 (let ((@x460 (mp @x388 (rewrite (= $x257 $x348)) $x348)))
 (let ((@x276 (and-elim @x460 $x230)))
 (let ((@x459 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x299)) @x276 $x299)))
 (let (($x200 (>= ?x234 (- 4))))
 (let ((@x595 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x200)) @x276 $x200)))
 (let (($x617 (<= ?x253 (- 1))))
 (let ((@x265 (and-elim @x460 $x149)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x149) $x617)) @x265 $x617)))
 (let (($x573 (>= ?x253 (- 1))))
 (let ((@x246 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x149) $x573)) @x265 $x573)))
 (let (($x314 (<= ?x277 (- 1))))
 (let ((@x278 (and-elim @x460 $x238)))
 (let ((@x130 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x238) $x314)) @x278 $x314)))
 (let (($x397 (>= ?x277 (- 1))))
 (let ((@x198 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x238) $x397)) @x278 $x397)))
 (let (($x205 (<= ?x295 (- 6))))
 (let ((@x429 (and-elim @x460 $x395)))
 (let ((@x604 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x395) $x205)) @x429 $x205)))
 (let (($x178 (>= ?x295 (- 6))))
 (let ((@x243 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x395) $x178)) @x429 $x178)))
 (let (($x457 (not (<= ?x160 0))))
 (let (($x137 (>= ?x160 0)))
 (let ((@x519 ((_ th-lemma arith) (hypothesis (not $x137)) @x198 @x130 @x243 @x604 @x198 @x130 @x198 @x130 @x246 @x448 @x198 @x130 @x246 @x448 @x243 @x604 @x198 @x130 @x246 @x448 @x595 @x459 false)))
 (let ((@x316 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x495 $x457 (not $x137))) (and-elim @x460 $x390) (or $x457 (not $x137)))))
 ((_ th-lemma arith) (unit-resolution @x316 (lemma @x519 $x137) $x457) @x198 @x130 @x243 @x604 @x198 @x130 @x198 @x130 @x246 @x448 @x198 @x130 @x246 @x448 @x243 @x604 @x198 @x130 @x246 @x448 @x595 @x459 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        20
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           7
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             188
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             2
 :arith-pivots              9
 :arith-row-summations      10
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 15
 :del-clause                16
 :final-checks              6
 :max-memory                19.63
 :memory                    19.14
 :mk-bool-var               29
 :mk-clause                 16
 :num-allocs                576934
 :num-checks                1
 :propagations              10
 :rlimit-count              10179
 :time                      0.01
 :total-time                0.03)
