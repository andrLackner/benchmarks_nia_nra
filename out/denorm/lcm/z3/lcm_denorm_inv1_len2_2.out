unsat
((set-logic NIA)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x1042 (+ k!00 k!10 (* (- 1) (* x!3 u!5)) (* (- 1) (* y!2 v!4)))))
 (let (($x1085 (>= ?x1042 0)))
 (let (($x1043 (= ?x1042 0)))
 (let ((?x1030 (* y!2 v!4)))
 (let ((?x1025 (* x!3 u!5)))
 (let ((?x480 (* (- 1) k!10)))
 (let ((?x399 (* (- 1) k!00)))
 (let ((?x1033 (+ ?x399 ?x480 ?x1025 ?x1030)))
 (let ((?x329 (* 3 (* y!2 y!2 y!2 x!3 v!4 u!5 u!5 u!5 u!5 u!5))))
 (let ((?x862 (* (- 1) (* y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5 u!5))))
 (let ((?x760 (* 3 (* y!2 y!2 y!2 x!3 v!4 v!4 u!5 u!5 u!5 u!5))))
 (let ((?x1047 (* y!2 y!2 y!2 x!3 v!4 v!4 v!4 u!5 u!5 u!5)))
 (let ((?x94 (* (- 1) (* y!2 y!2 y!2 y!2 v!4 v!4 v!4 u!5 u!5 u!5))))
 (let ((?x531 (* (- 3) (* y!2 y!2 y!2 y!2 v!4 u!5 u!5 u!5 u!5 u!5))))
 (let ((?x935 (* (- 3) (* y!2 y!2 y!2 y!2 v!4 v!4 u!5 u!5 u!5 u!5))))
 (let ((?x1012 (* (- 1) y!2)))
 (let ((?x806 (+ ?x1012 x!3)))
 (let ((?x931 (+ v!4 u!5)))
 (let ((?x968 (+ (* (- 1) (* ?x931 ?x931 ?x931 ?x806 ?x806 ?x806)) ?x935 ?x531 ?x94 ?x1047 (* y!2 y!2 y!2 x!3 u!5 u!5 u!5 u!5 u!5 u!5) ?x760 ?x862 ?x329)))
 (let ((?x1082 (* ?x968 ?x1033)))
 (let (($x1059 (= ?x1082 0)))
 (let (($x1079 (not $x1059)))
 (let ((?x1060 (* 3 (* y!2 y!2 y!2 x!3 v!4 v!4 v!4 v!4 v!4 u!5))))
 (let ((?x1055 (* 3 (* y!2 y!2 y!2 x!3 v!4 v!4 v!4 v!4 u!5 u!5))))
 (let ((?x807 (* (- 3) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4))))
 (let ((?x75 (* (- 9) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4 v!4 u!5))))
 (let ((?x934 (* (- 3) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 u!5 u!5 u!5))))
 (let ((?x800 (* (- 9) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4 u!5 u!5))))
 (let ((?x930 (* 3 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4))))
 (let ((?x845 (* 3 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5 u!5))))
 (let ((?x761 (* (- 3) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 u!5))))
 (let ((?x341 (* (- 3) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5 u!5))))
 (let ((?x332 (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5 u!5))))
 (let ((?x521 (* 9 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 u!5))))
 (let ((?x646 (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4))))
 (let ((?x913 (* 9 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5 u!5))))
 (let ((?x376 (+ ?x913 ?x646 ?x521 ?x332 ?x341 ?x761 ?x845 ?x930 ?x800 ?x934 ?x75 ?x807 (* y!2 y!2 y!2 x!3 v!4 v!4 v!4 v!4 v!4 v!4) (* (- 1) (* x!3 x!3 x!3 v!4 v!4 v!4)) ?x1047 ?x1055 ?x1060)))
 (let ((?x838 (* ?x376 ?x1033)))
 (let (($x1051 (= ?x838 0)))
 (let (($x1057 (or (not $x1051) $x1079)))
 (let (($x812 (and $x1043 $x1057)))
 (let ((?x645 (+ (* u!5 x!3) (* v!4 y!2) ?x399 ?x480)))
 (let ((?x954 (+ x!3 ?x1012)))
 (let ((?x1011 (+ u!5 v!4)))
 (let ((?x1015 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2 y!2))))
 (let ((?x1010 (* (- 3) (* u!5 u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2 y!2))))
 (let ((?x1008 (* (- 3) (* u!5 u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2 y!2))))
 (let ((?x955 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2 y!2))))
 (let ((?x964 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2 y!2)))
 (let ((?x1002 (* 3 (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2 y!2))))
 (let ((?x1005 (* 3 (* u!5 u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2 y!2))))
 (let ((?x1017 (+ (* u!5 u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2 y!2) ?x1005 ?x1002 ?x964 ?x955 ?x1008 ?x1010 ?x1015 (* (- 1) (* ?x1011 ?x1011 ?x1011 ?x954 ?x954 ?x954)))))
 (let ((?x995 (* (- 3) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2))))
 (let ((?x998 (* (- 9) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2))))
 (let ((?x993 (* (- 9) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2))))
 (let ((?x991 (* (- 3) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2))))
 (let ((?x957 (* 3 (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x988 (* 9 (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x987 (* 9 (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x959 (* 3 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x984 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x983 (* (- 3) (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x961 (* (- 3) (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x980 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x978 (* 3 (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 y!2 y!2 y!2))))
 (let ((?x977 (* 3 (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 y!2 y!2 y!2))))
 (let ((?x956 (+ (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3)) ?x964 ?x977 ?x978 (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 y!2 y!2 y!2) ?x980 ?x961 ?x983 ?x984 ?x959 ?x987 ?x988 ?x957 ?x991 ?x993 ?x998 ?x995)))
 (let (($x1019 (and (= ?x645 0) (or (not (= (* ?x956 ?x645) 0)) (not (= (* ?x1017 ?x645) 0))))))
 (let (($x1101 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x480 (* (- 1) k!10)))
 (let ((?x399 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x546 (+ ?x33 ?x34 ?x399 ?x480)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x54 (+ u v)))
 (let ((?x355 (* (- 1) (* u u u v v v y y y y))))
 (let ((?x366 (* (- 3) (* u u u u v v y y y y))))
 (let ((?x365 (* (- 3) (* u u u u u v y y y y))))
 (let ((?x311 (* (- 1) (* u u u u u u y y y y))))
 (let ((?x288 (* u u u v v v x y y y)))
 (let ((?x363 (* 3 (* u u u u v v x y y y))))
 (let ((?x362 (* 3 (* u u u u u v x y y y))))
 (let ((?x281 (* u u u u u u x y y y)))
 (let ((?x1069 (+ ?x281 ?x362 ?x363 ?x288 ?x311 ?x365 ?x366 ?x355 (* (- 1) (* ?x54 ?x54 ?x54 ?x468 ?x468 ?x468)))))
 (let ((?x160 (* (- 1) (* v v v x x x))))
 (let ((?x870 (+ ?x160 ?x288 (* 3 (* u u v v v v x y y y)) (* 3 (* u v v v v v x y y y)) (* v v v v v v x y y y) (* (- 1) (* u u u v v v x x x x)) (* (- 3) (* u u v v v v x x x x)) (* (- 3) (* u v v v v v x x x x)) (* (- 1) (* v v v v v v x x x x)) (* 3 (* u u u v v v x x x y)) (* 9 (* u u v v v v x x x y)) (* 9 (* u v v v v v x x x y)) (* 3 (* v v v v v v x x x y)) (* (- 3) (* u u u v v v x x y y)) (* (- 9) (* u u v v v v x x y y)) (* (- 9) (* u v v v v v x x y y)) (* (- 3) (* v v v v v v x x y y)))))
 (and (= ?x546 0) (or (not (= (* ?x870 ?x546) 0)) (not (= (* ?x1069 ?x546) 0))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x498 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x480 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x479 (* ?x468 u)))
 (let ((?x399 (* (- 1) k!00)))
 (let ((?x512 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x468 ?x468 ?x468)) (* ?x44 ?x44 ?x44 ?x468 y y y u u u))))
 (let (($x530 (not (= (* ?x512 (+ ?x399 ?x479 ?x45 ?x480)) 0))))
 (let ((?x393 (+ y (* (- 1) x))))
 (let ((?x487 (* ?x393 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x388 (+ (* (- 1) (* x x x v v v)) (* ?x54 ?x54 ?x54 ?x393 ?x393 ?x393 x v v v))))
 (let (($x491 (not (= (* ?x388 (+ ?x399 ?x55 ?x487 ?x480)) 0))))
 (let ((?x472 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x472 0) (or $x491 $x530)))))))))))))))))) :qid k!29))
 ))
 (let ((?x1103 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x480 (* (- 1) k!10)))
 (let ((?x399 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x546 (+ ?x33 ?x34 ?x399 ?x480)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x54 (+ u v)))
 (let ((?x355 (* (- 1) (* u u u v v v y y y y))))
 (let ((?x366 (* (- 3) (* u u u u v v y y y y))))
 (let ((?x365 (* (- 3) (* u u u u u v y y y y))))
 (let ((?x311 (* (- 1) (* u u u u u u y y y y))))
 (let ((?x288 (* u u u v v v x y y y)))
 (let ((?x363 (* 3 (* u u u u v v x y y y))))
 (let ((?x362 (* 3 (* u u u u u v x y y y))))
 (let ((?x281 (* u u u u u u x y y y)))
 (let ((?x1069 (+ ?x281 ?x362 ?x363 ?x288 ?x311 ?x365 ?x366 ?x355 (* (- 1) (* ?x54 ?x54 ?x54 ?x468 ?x468 ?x468)))))
 (let ((?x160 (* (- 1) (* v v v x x x))))
 (let ((?x870 (+ ?x160 ?x288 (* 3 (* u u v v v v x y y y)) (* 3 (* u v v v v v x y y y)) (* v v v v v v x y y y) (* (- 1) (* u u u v v v x x x x)) (* (- 3) (* u u v v v v x x x x)) (* (- 3) (* u v v v v v x x x x)) (* (- 1) (* v v v v v v x x x x)) (* 3 (* u u u v v v x x x y)) (* 9 (* u u v v v v x x x y)) (* 9 (* u v v v v v x x x y)) (* 3 (* v v v v v v x x x y)) (* (- 3) (* u u u v v v x x y y)) (* (- 9) (* u u v v v v x x y y)) (* (- 9) (* u v v v v v x x y y)) (* (- 3) (* v v v v v v x x y y)))))
 (let (($x1100 (and (= ?x546 0) (or (not (= (* ?x870 ?x546) 0)) (not (= (* ?x1069 ?x546) 0))))))
 (let ((?x44 (+ v u)))
 (let ((?x512 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x468 ?x468 ?x468)) (* ?x44 ?x44 ?x44 ?x468 y y y u u u))))
 (let (($x530 (not (= (* ?x512 (+ ?x399 (* ?x468 u) (* ?x44 y) ?x480)) 0))))
 (let ((?x393 (+ y (* (- 1) x))))
 (let ((?x388 (+ (* (- 1) (* x x x v v v)) (* ?x54 ?x54 ?x54 ?x393 ?x393 ?x393 x v v v))))
 (let (($x491 (not (= (* ?x388 (+ ?x399 (* ?x54 x) (* ?x393 v) ?x480)) 0))))
 (let ((?x472 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x471 (and (= ?x472 0) (or $x491 $x530))))
 (rewrite (= $x471 $x1100)))))))))))))))))))))))))))))))
 ))
 (let (($x397 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x480 (* (- 1) k!10)))
 (let ((?x393 (+ y (* (- 1) x))))
 (let ((?x487 (* ?x393 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x399 (* (- 1) k!00)))
 (let ((?x388 (+ (* (- 1) (* x x x v v v)) (* ?x54 ?x54 ?x54 ?x393 ?x393 ?x393 x v v v))))
 (let (($x491 (not (= (* ?x388 (+ ?x399 ?x55 ?x487 ?x480)) 0))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x479 (* ?x468 u)))
 (let ((?x512 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x468 ?x468 ?x468)) (* ?x44 ?x44 ?x44 ?x468 y y y u u u))))
 (let (($x530 (not (= (* ?x512 (+ ?x399 ?x479 ?x45 ?x480)) 0))))
 (and (= (+ ?x399 (* x u) (* y v) ?x480) 0) (or $x530 $x491))))))))))))))))) :qid k!29))
 ))
 (let ((?x469 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x480 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x479 (* ?x468 u)))
 (let ((?x399 (* (- 1) k!00)))
 (let ((?x512 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x468 ?x468 ?x468)) (* ?x44 ?x44 ?x44 ?x468 y y y u u u))))
 (let (($x530 (not (= (* ?x512 (+ ?x399 ?x479 ?x45 ?x480)) 0))))
 (let ((?x393 (+ y (* (- 1) x))))
 (let ((?x487 (* ?x393 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x388 (+ (* (- 1) (* x x x v v v)) (* ?x54 ?x54 ?x54 ?x393 ?x393 ?x393 x v v v))))
 (let (($x491 (not (= (* ?x388 (+ ?x399 ?x55 ?x487 ?x480)) 0))))
 (let ((?x472 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x471 (and (= ?x472 0) (or $x491 $x530))))
 (let (($x493 (and (= (+ ?x399 (* x u) (* y v) ?x480) 0) (or $x530 $x491))))
 (rewrite (= $x493 $x471)))))))))))))))))))))
 ))
 (let (($x395 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x393 (+ y (* (- 1) x))))
 (let ((?x487 (* ?x393 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x388 (+ (* (- 1) (* x x x v v v)) (* ?x54 ?x54 ?x54 ?x393 ?x393 ?x393 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x479 (* ?x468 u)))
 (let ((?x512 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x468 ?x468 ?x468)) (* ?x44 ?x44 ?x44 ?x468 y y y u u u))))
 (let (($x515 (or (not (= (* ?x512 (+ ?x77 ?x479 ?x45 ?x93)) 0)) (not (= (* ?x388 (+ ?x77 ?x55 ?x487 ?x93)) 0)))))
 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x515)))))))))))))))) :qid k!29))
 ))
 (let ((?x396 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x480 (* (- 1) k!10)))
 (let ((?x393 (+ y (* (- 1) x))))
 (let ((?x487 (* ?x393 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x399 (* (- 1) k!00)))
 (let ((?x388 (+ (* (- 1) (* x x x v v v)) (* ?x54 ?x54 ?x54 ?x393 ?x393 ?x393 x v v v))))
 (let (($x491 (not (= (* ?x388 (+ ?x399 ?x55 ?x487 ?x480)) 0))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x479 (* ?x468 u)))
 (let ((?x512 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x468 ?x468 ?x468)) (* ?x44 ?x44 ?x44 ?x468 y y y u u u))))
 (let (($x530 (not (= (* ?x512 (+ ?x399 ?x479 ?x45 ?x480)) 0))))
 (let (($x493 (and (= (+ ?x399 (* x u) (* y v) ?x480) 0) (or $x530 $x491))))
 (let ((?x526 (* ?x388 (+ (* (- 1) (* u00 x00)) ?x55 ?x487 (* (- 1) (* v00 y00))))))
 (let ((?x507 (* ?x512 (+ (* (- 1) (* u00 x00)) ?x479 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x466 (* y v)))
 (let ((?x463 (* x u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let (($x390 (and (= (+ ?x77 ?x463 ?x466 ?x93) 0) (or (not (= ?x507 0)) (not (= ?x526 0))))))
 (rewrite (= $x390 $x493)))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x56 (- y x)))
 (let ((?x54 (+ u v)))
 (let ((?x62 (+ (* (- 1) v v v x x x) (* ?x54 ?x54 ?x54 v v v x ?x56 ?x56 ?x56))))
 (let ((?x38 (* v00 y00)))
 (let ((?x63 (* (- (+ (* (- 1) u00 x00) (* ?x54 x) (* v ?x56)) ?x38) ?x62)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x50 (+ (* (- 1) ?x44 ?x44 ?x44 ?x42 ?x42 ?x42) (* u u u ?x44 ?x44 ?x44 ?x42 y y y))))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x50)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x51 0)) (not (= ?x63 0)))))))))))))) :qid k!29))
 ))
 (let ((?x474 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x393 (+ y (* (- 1) x))))
 (let ((?x487 (* ?x393 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x388 (+ (* (- 1) (* x x x v v v)) (* ?x54 ?x54 ?x54 ?x393 ?x393 ?x393 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x82 (* (- 1) y)))
 (let ((?x468 (+ x ?x82)))
 (let ((?x479 (* ?x468 u)))
 (let ((?x512 (+ (* (- 1) (* ?x44 ?x44 ?x44 ?x468 ?x468 ?x468)) (* ?x44 ?x44 ?x44 ?x468 y y y u u u))))
 (let (($x515 (or (not (= (* ?x512 (+ ?x77 ?x479 ?x45 ?x93)) 0)) (not (= (* ?x388 (+ ?x77 ?x55 ?x487 ?x93)) 0)))))
 (let (($x390 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x515)))
 (let ((?x56 (- y x)))
 (let ((?x62 (+ (* (- 1) v v v x x x) (* ?x54 ?x54 ?x54 v v v x ?x56 ?x56 ?x56))))
 (let (($x64 (= (* (- (+ (* (- 1) u00 x00) ?x55 (* v ?x56)) ?x38) ?x62) 0)))
 (let ((?x42 (- x y)))
 (let ((?x29 (- 1)))
 (let ((?x50 (+ (* ?x29 ?x44 ?x44 ?x44 ?x42 ?x42 ?x42) (* u u u ?x44 ?x44 ?x44 ?x42 y y y))))
 (let (($x52 (= (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x50) 0)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x67 (and $x41 (or (not $x52) (not $x64)))))
 (rewrite (= $x67 $x390))))))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x481 (mp (mp @x69 (quant-intro (proof-bind ?x474) (= $x68 $x395)) $x395) (rewrite (= $x395 $x395)) $x395)))
 (let ((@x527 (mp (mp @x481 (quant-intro (proof-bind ?x396) (= $x395 $x397)) $x397) (quant-intro (proof-bind ?x469) (= $x397 $x498)) $x498)))
 (let ((@x1023 (mp~ (mp @x527 (quant-intro (proof-bind ?x1103) (= $x498 $x1101)) $x1101) (sk (~ $x1101 $x1019)) $x1019)))
 (let ((@x767 (mp @x1023 (rewrite (= $x1019 $x812)) $x812)))
 (let ((@x653 (and-elim @x767 $x1043)))
 (let ((@x140 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1043) $x1085)) @x653 $x1085)))
 (let (($x1080 (<= ?x1042 0)))
 (let ((@x726 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1043) $x1080)) @x653 $x1080)))
 (let (($x814 (not (<= ?x1082 0))))
 (let (($x818 (>= ?x1082 0)))
 (let (($x1077 (>= ?x838 0)))
 (let (($x1083 (<= ?x838 0)))
 (let ((@x929 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1051 (not $x1083) (not $x1077))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1083)) @x726 @x140 false) $x1083) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1077)) @x726 @x140 false) $x1077) $x1051)))
 (let ((@x920 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1059 $x814 (not $x818))) (unit-resolution (and-elim @x767 $x1057) @x929 $x1079) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x818)) @x726 @x140 false) $x818) $x814)))
 ((_ th-lemma arith farkas 1 1 1) @x920 @x726 @x140 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        37
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             296
 :arith-nonlinear-bounds    20
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.65
 :memory                    3.19
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1096057
 :num-checks                1
 :propagations              14
 :rlimit-count              4206
 :time                      0.01
 :total-time                0.01)
