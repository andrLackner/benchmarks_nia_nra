unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x581 (* k!2 k!2)))
 (let ((?x541 (* m!1 m!1)))
 (let ((?x559 (* (- 32) k!2)))
 (let ((?x561 (* (- 5) m!1)))
 (let ((?x284 (* (- 27) c!3)))
 (let ((?x274 (* 9 n!0)))
 (let ((?x333 (+ 13 (* (- 9) (* n!0 c!3)) ?x274 ?x284 ?x561 ?x559 (* (- 9) (* n!0 k!2)) (* 2 (* m!1 k!2)) ?x541 ?x581)))
 (let (($x364 (<= ?x333 0)))
 (let ((?x596 (* (- 1) k!2)))
 (let ((?x410 (+ (* 3 n!0) ?x596 (* 3 (* n!0 n!0)))))
 (let (($x492 (<= ?x410 (- 1))))
 (let (($x178 (= ?x410 (- 1))))
 (let ((?x382 (* 6 (* k!2 k!2 k!2))))
 (let ((?x628 (+ c!3 k!2)))
 (let ((?x652 (+ 6 m!1)))
 (let ((?x651 (+ 1 n!0)))
 (let ((?x649 (* ?x651 ?x651 ?x652 ?x652 ?x628 ?x628)))
 (let ((?x627 (* m!1 m!1 m!1 m!1)))
 (let ((?x236 (* 5 (* m!1 m!1 m!1))))
 (let ((?x523 (* (- 12) ?x541)))
 (let ((?x638 (* (- 36) k!2)))
 (let ((?x583 (* (- 36) m!1)))
 (let ((?x192 (+ (* 3 (* m!1 m!1 k!2 k!2)) (* 17 (* m!1 m!1 k!2)) (* 3 (* m!1 m!1 m!1 k!2)) ?x583 (* m!1 k!2 k!2 k!2) ?x638 (* 18 (* m!1 k!2 k!2)) (* ?x651 ?x651 (+ m!1 k!2) (+ m!1 k!2) ?x628 ?x628) (* (- 12) (* m!1 k!2)) ?x523 ?x236 ?x627 ?x649 ?x382)))
 (let ((?x449 (* ?x192 ?x333)))
 (let (($x429 (= ?x449 0)))
 (let (($x456 (not $x429)))
 (let ((?x471 (* n!0 k!2)))
 (let ((?x606 (+ (* 2 n!0) (* (- 3) c!3) ?x596 ?x471)))
 (let (($x605 (= ?x606 (- 1))))
 (let ((?x466 (* (- 1) ?x581)))
 (let ((?x225 (* 5 k!2)))
 (let ((?x566 (* 18 c!3)))
 (let ((?x392 (* (- 9) n!0)))
 (let ((?x607 (+ (* 9 (* n!0 c!3)) ?x392 ?x566 ?x225 ?x466)))
 (let (($x584 (= ?x607 4)))
 (let ((?x110 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x100 (= ?x110 (- 6))))
 (let (($x320 (and $x100 $x584 $x605 $x178 $x456)))
 (let ((?x376 (+ 13 ?x284 ?x559 ?x561 ?x274 ?x581 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x541)))
 (let ((?x557 (+ ?x638 ?x583 ?x649 (* ?x651 ?x651 (+ k!2 m!1) (+ k!2 m!1) ?x628 ?x628) (* (- 12) (* k!2 m!1)) ?x523 ?x236 (* 17 (* k!2 m!1 m!1)) (* 18 (* k!2 k!2 m!1)) ?x382 ?x627 (* 3 (* k!2 m!1 m!1 m!1)) (* 3 (* k!2 k!2 m!1 m!1)) (* k!2 k!2 k!2 m!1))))
 (let (($x549 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x611 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x566 ?x225 ?x392 ?x466 (* 9 (* c!3 n!0))) 4) $x549 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x557 ?x376) 0)))))
 (let (($x135 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x630 (* k k k m)))
 (let ((?x664 (* 3 (* k k m m))))
 (let ((?x665 (* 3 (* k m m m))))
 (let ((?x623 (* m m m m)))
 (let ((?x616 (* 6 (* k k k))))
 (let ((?x609 (* k k m)))
 (let ((?x662 (* 18 ?x609)))
 (let ((?x538 (* k m m)))
 (let ((?x678 (* 17 ?x538)))
 (let ((?x676 (* 5 (* m m m))))
 (let ((?x588 (* (- 12) ?x461)))
 (let ((?x460 (* k m)))
 (let ((?x591 (* (- 12) ?x460)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x489 (+ 6 m)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x595 (* (- 36) m)))
 (let ((?x598 (* (- 36) k)))
 (let ((?x521 (+ ?x598 ?x595 ?x248 ?x295 ?x591 ?x588 ?x676 ?x678 ?x662 ?x616 ?x623 ?x665 ?x664 ?x630)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x521 ?x482) 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x406 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x630 (* k k k m)))
 (let ((?x664 (* 3 (* k k m m))))
 (let ((?x665 (* 3 (* k m m m))))
 (let ((?x623 (* m m m m)))
 (let ((?x616 (* 6 (* k k k))))
 (let ((?x676 (* 5 (* m m m))))
 (let ((?x588 (* (- 12) ?x461)))
 (let ((?x460 (* k m)))
 (let ((?x591 (* (- 12) ?x460)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x489 (+ 6 m)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x595 (* (- 36) m)))
 (let ((?x598 (* (- 36) k)))
 (let ((?x117 (+ ?x598 ?x595 (* 6 (* k m k)) ?x248 ?x295 (* 6 (* m k k)) ?x591 ?x588 ?x676 (* 5 (* k m m)) (* 6 (* m k m)) (* 6 (* k k m)) ?x616 ?x623 ?x665 ?x664 ?x630 (* 6 (* m m k)))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x117 ?x482) 0)))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x540 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x630 (* k k k m)))
 (let ((?x664 (* 3 (* k k m m))))
 (let ((?x665 (* 3 (* k m m m))))
 (let ((?x623 (* m m m m)))
 (let ((?x616 (* 6 (* k k k))))
 (let ((?x609 (* k k m)))
 (let ((?x662 (* 18 ?x609)))
 (let ((?x538 (* k m m)))
 (let ((?x678 (* 17 ?x538)))
 (let ((?x676 (* 5 (* m m m))))
 (let ((?x588 (* (- 12) ?x461)))
 (let ((?x460 (* k m)))
 (let ((?x591 (* (- 12) ?x460)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x489 (+ 6 m)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x595 (* (- 36) m)))
 (let ((?x598 (* (- 36) k)))
 (let ((?x521 (+ ?x598 ?x595 ?x248 ?x295 ?x591 ?x588 ?x676 ?x678 ?x662 ?x616 ?x623 ?x665 ?x664 ?x630)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x430 (and $x125 $x209 $x261 $x299 (not (= (* ?x521 ?x482) 0)))))
 (let ((?x117 (+ ?x598 ?x595 (* 6 (* k m k)) ?x248 ?x295 (* 6 (* m k k)) ?x591 ?x588 ?x676 (* 5 ?x538) (* 6 (* m k m)) (* 6 ?x609) ?x616 ?x623 ?x665 ?x664 ?x630 (* 6 (* m m k)))))
 (let (($x305 (and $x125 $x209 $x261 $x299 (not (= (* ?x117 ?x482) 0)))))
 (rewrite (= $x305 $x430)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x548 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x417 (* (- 18) c)))
 (let ((?x288 (+ 13 ?x417 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x143 (* (+ ?x295 (* (- 1) (* ?x489 ?x489 ?x72)) ?x248 (* ?x489 ?x72 ?x72 ?x72)) ?x288)))
 (let (($x632 (not (= ?x143 0))))
 (let (($x569 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x398 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x398 $x569 $x632)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x658 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x630 (* k k k m)))
 (let ((?x664 (* 3 (* k k m m))))
 (let ((?x665 (* 3 (* k m m m))))
 (let ((?x623 (* m m m m)))
 (let ((?x616 (* 6 (* k k k))))
 (let ((?x676 (* 5 (* m m m))))
 (let ((?x588 (* (- 12) ?x461)))
 (let ((?x460 (* k m)))
 (let ((?x591 (* (- 12) ?x460)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x489 (+ 6 m)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x595 (* (- 36) m)))
 (let ((?x598 (* (- 36) k)))
 (let ((?x117 (+ ?x598 ?x595 (* 6 (* k m k)) ?x248 ?x295 (* 6 (* m k k)) ?x591 ?x588 ?x676 (* 5 (* k m m)) (* 6 (* m k m)) (* 6 (* k k m)) ?x616 ?x623 ?x665 ?x664 ?x630 (* 6 (* m m k)))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x305 (and $x125 $x209 $x261 $x299 (not (= (* ?x117 ?x482) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x417 (* (- 18) c)))
 (let ((?x288 (+ 13 ?x417 (* (- 23) k) (* (- 9) (* ?x342 ?x68)) ?x427 ?x48 ?x78)))
 (let ((?x143 (* (+ ?x295 (* (- 1) (* ?x489 ?x489 ?x72)) ?x248 (* ?x489 ?x72 ?x72 ?x72)) ?x288)))
 (let (($x632 (not (= ?x143 0))))
 (let (($x569 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x398 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x282 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x398 $x569 $x632)))
 (rewrite (= $x282 $x305)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x645 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x417 (* (- 18) c)))
 (let ((?x288 (+ 13 ?x417 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x143 (* (+ ?x295 (* (- 1) (* ?x489 ?x489 ?x72)) ?x248 (* ?x489 ?x72 ?x72 ?x72)) ?x288)))
 (let (($x632 (not (= ?x143 0))))
 (let (($x569 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x587 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x315 (= (+ ?x417 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x315 $x587 $x569 $x632)))))))))))))))))) :qid k!34))
 ))
 (let ((?x543 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x417 (* (- 18) c)))
 (let ((?x288 (+ 13 ?x417 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x143 (* (+ ?x295 (* (- 1) (* ?x489 ?x489 ?x72)) ?x248 (* ?x489 ?x72 ?x72 ?x72)) ?x288)))
 (let (($x632 (not (= ?x143 0))))
 (let (($x569 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x398 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x282 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x398 $x569 $x632)))
 (let (($x587 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x315 (= (+ ?x417 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x653 (and $x125 $x315 $x587 $x569 $x632)))
 (rewrite (= $x653 $x282))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (- (* ?x68 ?x68 (+ k m) (+ k m) ?x70 ?x70) (* (+ k m) ?x81 ?x81))))
 (let ((?x86 (+ ?x83 (* ?x68 ?x68 ?x81 ?x81 ?x70 ?x70) (* (+ k m) (+ k m) (+ k m) ?x81))))
 (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x86) 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x631 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x417 (* (- 18) c)))
 (let ((?x288 (+ 13 ?x417 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x248 (* ?x342 ?x342 ?x489 ?x489 ?x68 ?x68)))
 (let ((?x295 (* ?x342 ?x342 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x143 (* (+ ?x295 (* (- 1) (* ?x489 ?x489 ?x72)) ?x248 (* ?x489 ?x72 ?x72 ?x72)) ?x288)))
 (let (($x632 (not (= ?x143 0))))
 (let (($x569 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x587 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x315 (= (+ ?x417 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x653 (and $x125 $x315 $x587 $x569 $x632)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x86 (+ (- (* ?x68 ?x68 ?x72 ?x72 ?x70 ?x70) (* ?x72 ?x81 ?x81)) (* ?x68 ?x68 ?x81 ?x81 ?x70 ?x70) (* ?x72 ?x72 ?x72 ?x81))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x86) 0))))))
 (rewrite (= $x91 $x653))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x280 (mp (mp @x93 (quant-intro (proof-bind ?x631) (= $x92 $x645)) $x645) (rewrite (= $x645 $x645)) $x645)))
 (let ((@x418 (mp (mp @x280 (quant-intro (proof-bind ?x543) (= $x645 $x548)) $x548) (quant-intro (proof-bind ?x658) (= $x548 $x406)) $x406)))
 (let ((@x597 (mp~ (mp @x418 (quant-intro (proof-bind ?x540) (= $x406 $x135)) $x135) (sk (~ $x135 $x611)) $x611)))
 (let ((@x343 (mp @x597 (rewrite (= $x611 $x320)) $x320)))
 (let ((@x608 (and-elim @x343 $x178)))
 (let ((@x187 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x492)) @x608 $x492)))
 (let (($x491 (>= ?x410 (- 1))))
 (let ((@x311 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x491)) @x608 $x491)))
 (let (($x329 (<= ?x110 (- 6))))
 (let ((@x326 (and-elim @x343 $x100)))
 (let ((@x680 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x329)) @x326 $x329)))
 (let (($x331 (>= ?x110 (- 6))))
 (let ((@x683 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x331)) @x326 $x331)))
 (let (($x334 (<= ?x607 4)))
 (let ((@x648 (and-elim @x343 $x584)))
 (let ((@x639 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x584) $x334)) @x648 $x334)))
 (let (($x321 (>= ?x607 4)))
 (let ((@x619 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x584) $x321)) @x648 $x321)))
 (let (($x145 (<= ?x606 (- 1))))
 (let ((@x498 (and-elim @x343 $x605)))
 (let ((@x189 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x605) $x145)) @x498 $x145)))
 (let (($x615 (>= ?x606 (- 1))))
 (let ((@x672 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x605) $x615)) @x498 $x615)))
 (let ((@x447 ((_ th-lemma arith) (hypothesis (not $x364)) @x311 @x187 @x311 @x187 @x683 @x680 @x311 @x187 @x672 @x189 @x683 @x680 @x311 @x187 @x619 @x639 @x683 @x680 @x311 @x187 false)))
 (let ((@x499 (lemma @x447 $x364)))
 (let (($x744 (>= ?x333 0)))
 (let ((@x727 ((_ th-lemma arith) (hypothesis (not $x744)) @x683 @x680 @x311 @x187 @x683 @x680 @x619 @x639 @x672 @x189 @x672 @x189 @x311 @x187 @x619 @x639 @x683 @x680 @x311 @x187 false)))
 (let ((@x798 (lemma @x727 $x744)))
 (let (($x794 (not (<= ?x449 0))))
 (let (($x304 (>= ?x449 0)))
 (let ((@x753 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x304)) (hypothesis $x744) @x499 false) (or (not $x744) $x304))))
 (let ((@x802 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x429 $x794 (not $x304))) (and-elim @x343 $x456) (or $x794 (not $x304)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x802 (unit-resolution @x753 @x798 $x304) $x794) @x798 @x499 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 21
 :arith-assert-diseq        18
 :arith-assert-lower        188
 :arith-assert-upper        107
 :arith-bound-prop          4
 :arith-branch-var          10
 :arith-conflicts           14
 :arith-eq-adapter          16
 :arith-fixed-eqs           21
 :arith-gcd-tests           56
 :arith-gomory-cuts         3
 :arith-grobner             20
 :arith-ineq-splits         10
 :arith-max-min             1693
 :arith-nonlinear-bounds    90
 :arith-nonlinear-horner    211
 :arith-num-rows            14
 :arith-offset-eqs          3
 :arith-patches             22
 :arith-patches_succ        2
 :arith-pivots              343
 :arith-pseudo-nonlinear    8
 :arith-row-summations      2226
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    14
 :conflicts                 14
 :decisions                 49
 :del-clause                53
 :final-checks              59
 :max-memory                3.90
 :memory                    3.19
 :minimized-lits            2
 :mk-bool-var               102
 :mk-clause                 75
 :num-allocs                7292260
 :num-checks                1
 :propagations              63
 :rlimit-count              213608
 :time                      0.08
 :total-time                0.09)
