unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x392 (+ (* (/ 1.0 2.0) (* (to_real d00) (to_real b!2))) (* (- (/ 1.0 2.0)) (* (to_real b00) (to_real d!1))))))
 (let (($x362 (>= ?x392 0.0)))
 (let ((?x346 (* d00 b!2)))
 (let ((?x396 (to_real ?x346)))
 (let ((?x574 (+ ?x396 (* (- 1.0) (* (to_real d00) (to_real b!2))))))
 (let (($x646 (<= ?x574 0.0)))
 (let (($x670 (= 0.0 ?x574)))
 (let ((@x652 (symm (commutativity (= $x670 (= ?x574 0.0))) (= (= ?x574 0.0) $x670))))
 (let ((@x584 (unit-resolution (hypothesis (not $x670)) (mp ((_ th-lemma arith) (= ?x574 0.0)) @x652 $x670) false)))
 (let ((@x617 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x670) $x646)) (lemma @x584 $x670) $x646)))
 (let ((?x807 (to_real d!1)))
 (let ((?x64 (to_real b00)))
 (let ((?x381 (* ?x64 ?x807)))
 (let ((?x645 (+ ?x381 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x658 (<= ?x645 0.0)))
 (let (($x139 (= 0.0 ?x645)))
 (let ((@x254 (symm (commutativity (= $x139 (= ?x645 0.0))) (= (= ?x645 0.0) $x139))))
 (let ((@x504 (unit-resolution (hypothesis (not $x139)) (mp ((_ th-lemma arith) (= ?x645 0.0)) @x254 $x139) false)))
 (let ((@x661 (lemma @x504 $x139)))
 (let ((@x515 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x139) $x658)) @x661 $x658)))
 (let ((?x348 (+ ?x346 (* (- 1) (* b00 d!1)))))
 (let (($x194 (>= ?x348 0)))
 (let (($x596 (= 0 ?x348)))
 (let ((@x482 (symm (commutativity (= $x596 (= ?x348 0))) (= (= ?x348 0) $x596))))
 (let (($x374 (= ?x348 0)))
 (let ((?x127 (* (/ 1.0 8.0) (* (to_real b!2) (to_real b!2) (to_real b!2) ?x807 ?x807 ?x807))))
 (let ((?x321 (* (- (/ 1.0 4.0)) (* (to_real b!2) ?x807))))
 (let ((?x525 (* (- (/ 3.0 16.0)) (* (to_real a!3) (to_real y!0) ?x807 ?x807 ?x807 ?x807))))
 (let ((?x806 (to_real y!0)))
 (let ((?x705 (to_real b!2)))
 (let ((?x480 (to_real a!3)))
 (let ((?x642 (* (/ 3.0 2.0) (* ?x480 ?x480 ?x705 ?x806 ?x806 ?x807))))
 (let ((?x577 (* (/ 1.0 2.0) (* ?x480 ?x480 ?x480 ?x806 ?x807 ?x807))))
 (let ((?x578 (* (/ 3.0 2.0) (* ?x480 ?x480 ?x705 ?x806 ?x807 ?x807))))
 (let ((?x570 (* (/ 1.0 2.0) (* ?x705 ?x705 ?x705 ?x806 ?x807 ?x807))))
 (let ((?x748 (* (/ 3.0 2.0) (* ?x480 ?x705 ?x705 ?x806 ?x807 ?x807))))
 (let ((?x440 (* (- (/ 1.0 4.0)) (* ?x705 ?x806 ?x806 ?x806 ?x807 ?x807))))
 (let ((?x421 (* (- (/ 1.0 32.0)) (* ?x705 ?x807 ?x807 ?x807 ?x807 ?x807))))
 (let ((?x231 (* (/ 1.0 2.0) (* ?x480 ?x480 ?x480 ?x806 ?x806 ?x807))))
 (let ((?x562 (* (/ 3.0 8.0) (* ?x480 ?x480 ?x705 ?x807 ?x807 ?x807))))
 (let ((?x354 (* (/ 3.0 8.0) (* ?x480 ?x705 ?x705 ?x807 ?x807 ?x807))))
 (let ((?x546 (* (- (/ 3.0 8.0)) (* ?x480 ?x806 ?x806 ?x807 ?x807 ?x807))))
 (let ((?x488 (* (- (/ 3.0 16.0)) (* ?x705 ?x806 ?x807 ?x807 ?x807 ?x807))))
 (let ((?x563 (* (/ 1.0 8.0) (* ?x480 ?x480 ?x480 ?x807 ?x807 ?x807))))
 (let ((?x598 (* (- (/ 1.0 32.0)) (* ?x480 ?x807 ?x807 ?x807 ?x807 ?x807))))
 (let ((?x412 (* (- (/ 1.0 4.0)) (* ?x480 ?x806 ?x806 ?x806 ?x807 ?x807))))
 (let ((?x609 (* (/ 3.0 2.0) (* ?x480 ?x705 ?x705 ?x806 ?x806 ?x807))))
 (let ((?x549 (* (/ 1.0 2.0) (* ?x705 ?x705 ?x705 ?x806 ?x806 ?x807))))
 (let ((?x532 (* (- (/ 3.0 8.0)) (* ?x705 ?x806 ?x806 ?x807 ?x807 ?x807))))
 (let ((?x242 (+ ?x532 ?x549 ?x609 ?x412 ?x598 ?x563 ?x488 ?x546 ?x354 ?x562 ?x231 ?x421 ?x440 ?x748 ?x570 ?x578 ?x577 ?x642 ?x525 ?x321 ?x127)))
 (let ((?x470 (* (+ (* (/ 1.0 2.0) ?x381) (* (- (/ 1.0 2.0)) (* (to_real d00) ?x705))) ?x242)))
 (let (($x414 (= ?x470 0.0)))
 (let (($x472 (not $x414)))
 (let ((?x679 (+ (* (/ 1.0 8.0) (* ?x64 ?x705 ?x807 ?x807)) (* (- (/ 1.0 8.0)) (* (to_real d00) ?x480 ?x705 ?x806 ?x806 ?x806 ?x807 ?x807)) (* (- (/ 1.0 8.0)) (* (to_real d00) ?x705 ?x705 ?x807)) (* (/ 1.0 8.0) (* ?x64 ?x480 ?x806 ?x806 ?x806 ?x807 ?x807 ?x807)) (* (/ 1.0 4.0) (* (to_real d00) ?x480 ?x480 ?x480 ?x705 ?x806 ?x806 ?x807)) (* (- (/ 1.0 4.0)) (* ?x64 ?x480 ?x480 ?x480 ?x806 ?x806 ?x807 ?x807)))))
 (let (($x684 (= ?x679 0.0)))
 (let (($x427 (or (not $x684) $x472)))
 (let ((?x380 (+ (* d!1 a!3) (* (- 2) (* y!0 b!2)) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x370 (= (+ ?x35 ?x99 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x711 (and $x370 $x374 (= ?x380 0) $x427)))
 (let ((?x328 (+ (* (- (/ 1.0 4.0)) (* ?x807 ?x807 ?x480 ?x806 ?x806 ?x806)) ?x321 (* (/ 1.0 2.0) (* ?x807 ?x480 ?x480 ?x480 ?x806 ?x806)) (* (- (/ 1.0 4.0)) (* ?x705 ?x807 ?x807 ?x806 ?x806 ?x806)) (* (- (/ 1.0 32.0)) (* ?x807 ?x807 ?x807 ?x807 ?x807 ?x480)) ?x421 (* (- (/ 3.0 16.0)) (* ?x705 ?x807 ?x807 ?x807 ?x807 ?x806)) (* (- (/ 3.0 16.0)) (* ?x807 ?x807 ?x807 ?x807 ?x480 ?x806)) (* (- (/ 3.0 8.0)) (* ?x705 ?x807 ?x807 ?x807 ?x806 ?x806)) (* (- (/ 3.0 8.0)) (* ?x807 ?x807 ?x807 ?x480 ?x806 ?x806)) (* (/ 1.0 2.0) (* ?x705 ?x705 ?x705 ?x807 ?x806 ?x806)) ?x127 (* (/ 3.0 8.0) (* ?x705 ?x705 ?x807 ?x807 ?x807 ?x480)) (* (/ 3.0 8.0) (* ?x705 ?x807 ?x807 ?x807 ?x480 ?x480)) (* (/ 1.0 8.0) (* ?x807 ?x807 ?x807 ?x480 ?x480 ?x480)) (* (/ 1.0 2.0) (* ?x705 ?x705 ?x705 ?x807 ?x807 ?x806)) (* (/ 3.0 2.0) (* ?x705 ?x705 ?x807 ?x807 ?x480 ?x806)) (* (/ 3.0 2.0) (* ?x705 ?x807 ?x807 ?x480 ?x480 ?x806)) (* (/ 1.0 2.0) (* ?x807 ?x807 ?x480 ?x480 ?x480 ?x806)) (* (/ 3.0 2.0) (* ?x705 ?x705 ?x807 ?x480 ?x806 ?x806)) (* (/ 3.0 2.0) (* ?x705 ?x807 ?x480 ?x480 ?x806 ?x806)))))
 (let ((?x323 (* (+ (* (- (/ 1.0 2.0)) (* ?x705 (to_real d00))) (* (/ 1.0 2.0) (* ?x807 ?x64))) ?x328)))
 (let ((?x746 (+ (* (/ 1.0 8.0) (* ?x705 (to_real d00) ?x807 ?x807 ?x480 ?x806 ?x806 ?x806)) (* (- (/ 1.0 8.0)) (* ?x807 ?x807 ?x807 ?x64 ?x480 ?x806 ?x806 ?x806)) (* (/ 1.0 8.0) (* ?x705 ?x705 (to_real d00) ?x807)) (* (- (/ 1.0 8.0)) (* ?x705 ?x807 ?x807 ?x64)) (* (- (/ 1.0 4.0)) (* ?x705 (to_real d00) ?x807 ?x480 ?x480 ?x480 ?x806 ?x806)) (* (/ 1.0 4.0) (* ?x807 ?x807 ?x64 ?x480 ?x480 ?x480 ?x806 ?x806)))))
 (let ((?x479 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x407 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x99 (* 2 (* y!0 b00))) 0)))
 (let (($x144 (and $x407 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x479 0) (or (not (= ?x746 0.0)) (not (= ?x323 0.0))))))
 (let (($x232 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x783 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62)) (* (/ 1.0 2.0) (* ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 3.0 16.0)) (* ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 3.0 8.0)) (* ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (/ 3.0 8.0) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (/ 1.0 2.0) (* ?x62 ?x62 ?x67 ?x67 ?x67 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x62 ?x67 ?x68 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x62 ?x67 ?x67 ?x68 ?x68)))))
 (let ((?x197 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x312 (+ (* (/ 1.0 8.0) (* ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 (to_real d00) ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 (to_real b00))) (* (- (/ 1.0 4.0)) (* ?x56 (to_real d00) ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 4.0) (* ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x68 ?x68)))))
 (let ((?x48 (* a d)))
 (let ((?x168 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (and $x131 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x168 0) (or (not (= ?x312 0.0)) (not (= (* ?x197 ?x783) 0.0))))))))))))))))) :qid k!33))
 ))
 (let (($x741 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x175 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x536 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x420 (* (- (/ 1.0 4.0)) (* ?x62 ?x56))))
 (let ((?x344 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x536 ?x175 ?x175 ?x175)) ?x420 (* (/ 1.0 2.0) (* ?x62 ?x536 ?x536 ?x536 ?x175 ?x175)))))
 (let ((?x651 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x249 (+ (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x67)) ?x420 (* (/ 1.0 2.0) (* ?x68 ?x68 ?x62 ?x67 ?x67 ?x67)))))
 (let (($x433 (or (not (= (* ?x651 ?x249) 0.0)) (not (= (* ?x651 ?x344) 0.0)))))
 (let ((?x202 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x209 (= ?x202 0)))
 (let ((?x335 (* d00 a)))
 (let ((?x468 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x335)))
 (and (= ?x468 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x209 $x433)))))))))))))))) :qid k!33))
 ))
 (let ((?x743 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x783 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62)) (* (/ 1.0 2.0) (* ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 3.0 16.0)) (* ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 3.0 8.0)) (* ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (/ 3.0 8.0) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (/ 1.0 2.0) (* ?x62 ?x62 ?x67 ?x67 ?x67 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x62 ?x67 ?x68 ?x68)) (* (/ 3.0 2.0) (* ?x56 ?x62 ?x67 ?x67 ?x68 ?x68)))))
 (let ((?x197 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x312 (+ (* (/ 1.0 8.0) (* ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 (to_real d00) ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 (to_real b00))) (* (- (/ 1.0 4.0)) (* ?x56 (to_real d00) ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 4.0) (* ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x68 ?x68)))))
 (let ((?x48 (* a d)))
 (let ((?x168 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (let (($x809 (and $x131 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x168 0) (or (not (= ?x312 0.0)) (not (= (* ?x197 ?x783) 0.0))))))
 (let ((?x175 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x536 (+ ?x67 ?x56)))
 (let ((?x420 (* (- (/ 1.0 4.0)) (* ?x62 ?x56))))
 (let ((?x344 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x536 ?x175 ?x175 ?x175)) ?x420 (* (/ 1.0 2.0) (* ?x62 ?x536 ?x536 ?x536 ?x175 ?x175)))))
 (let ((?x651 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x249 (+ (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x67)) ?x420 (* (/ 1.0 2.0) (* ?x68 ?x68 ?x62 ?x67 ?x67 ?x67)))))
 (let (($x433 (or (not (= (* ?x651 ?x249) 0.0)) (not (= (* ?x651 ?x344) 0.0)))))
 (let ((?x202 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x209 (= ?x202 0)))
 (let ((?x335 (* d00 a)))
 (let (($x416 (= (+ (* 2 ?x98) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x335) 0)))
 (let (($x146 (and $x416 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x209 $x433)))
 (rewrite (= $x146 $x809)))))))))))))))))))))))))))))
 ))
 (let (($x436 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x175 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x536 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x420 (* (- (/ 1.0 4.0)) (* ?x62 ?x56))))
 (let ((?x344 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x536 ?x175 ?x175 ?x175)) ?x420 (* (/ 1.0 2.0) (* ?x62 ?x536 ?x536 ?x536 ?x175 ?x175)))))
 (let ((?x651 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x249 (+ (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x67)) ?x420 (* (/ 1.0 2.0) (* ?x68 ?x68 ?x62 ?x67 ?x67 ?x67)))))
 (let (($x433 (or (not (= (* ?x651 ?x249) 0.0)) (not (= (* ?x651 ?x344) 0.0)))))
 (let ((?x202 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x209 (= ?x202 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x605 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x605 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x209 $x433)))))))))))))))))) :qid k!33))
 ))
 (let ((?x203 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x175 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x536 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x420 (* (- (/ 1.0 4.0)) (* ?x62 ?x56))))
 (let ((?x344 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x536 ?x175 ?x175 ?x175)) ?x420 (* (/ 1.0 2.0) (* ?x62 ?x536 ?x536 ?x536 ?x175 ?x175)))))
 (let ((?x651 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x249 (+ (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x67)) ?x420 (* (/ 1.0 2.0) (* ?x68 ?x68 ?x62 ?x67 ?x67 ?x67)))))
 (let (($x433 (or (not (= (* ?x651 ?x249) 0.0)) (not (= (* ?x651 ?x344) 0.0)))))
 (let ((?x202 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x209 (= ?x202 0)))
 (let ((?x335 (* d00 a)))
 (let ((?x468 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x335)))
 (let (($x146 (and (= ?x468 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x209 $x433)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x356 (and (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) ?x335)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x209 $x433)))
 (rewrite (= $x356 $x146)))))))))))))))))))))))
 ))
 (let (($x90 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x68 (to_real y)))
 (let ((?x79 (+ ?x68 ?x63)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x70 (* ?x58 ?x63)))
 (let ((?x84 (+ (- (* (to_real (- 1)) ?x80 ?x63 ?x63 ?x79 ?x79 ?x79) ?x70) (* ?x80 ?x80 ?x80 ?x63 ?x79 ?x79))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x71 (- (* (to_real (- 1)) (to_real a) ?x63 ?x63 ?x68 ?x68 ?x68) ?x70)))
 (let ((?x73 (+ ?x71 (* (to_real a) (to_real a) (to_real a) ?x63 ?x68 ?x68))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x73) ?x75)) (not (= (* ?x66 ?x84) ?x75)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x438 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x175 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x536 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x420 (* (- (/ 1.0 4.0)) (* ?x62 ?x56))))
 (let ((?x344 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x536 ?x175 ?x175 ?x175)) ?x420 (* (/ 1.0 2.0) (* ?x62 ?x536 ?x536 ?x536 ?x175 ?x175)))))
 (let ((?x651 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x249 (+ (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x67)) ?x420 (* (/ 1.0 2.0) (* ?x68 ?x68 ?x62 ?x67 ?x67 ?x67)))))
 (let (($x433 (or (not (= (* ?x651 ?x249) 0.0)) (not (= (* ?x651 ?x344) 0.0)))))
 (let ((?x202 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x209 (= ?x202 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x605 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x356 (and $x605 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x209 $x433)))
 (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x79 (+ ?x68 ?x63)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x70 (* ?x58 ?x63)))
 (let ((?x84 (+ (- (* (to_real (- 1)) ?x80 ?x63 ?x63 ?x79 ?x79 ?x79) ?x70) (* ?x80 ?x80 ?x80 ?x63 ?x79 ?x79))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x73 (+ (- (* (to_real (- 1)) ?x67 ?x63 ?x63 ?x68 ?x68 ?x68) ?x70) (* ?x67 ?x67 ?x67 ?x63 ?x68 ?x68))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x89 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x73) ?x75)) (not (= (* ?x66 ?x84) ?x75))))))
 (rewrite (= $x89 $x356))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x415 (mp (mp @x91 (quant-intro (proof-bind ?x438) (= $x90 $x436)) $x436) (rewrite (= $x436 $x436)) $x436)))
 (let ((@x128 (mp (mp @x415 (quant-intro (proof-bind ?x203) (= $x436 $x741)) $x741) (quant-intro (proof-bind ?x743) (= $x741 $x232)) $x232)))
 (let ((@x430 (mp (mp~ @x128 (sk (~ $x232 $x144)) $x144) (rewrite (= $x144 $x711)) $x711)))
 (let ((@x287 (mp (and-elim @x430 $x374) @x482 $x596)))
 (let ((@x730 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x596) $x194)) @x287 $x194)))
 (let ((?x556 (+ ?x127 ?x532 ?x549 ?x609 ?x412 ?x598 ?x563 ?x488 ?x546 ?x354 ?x562 ?x231 ?x421 ?x440 ?x748 ?x570 ?x578 ?x577 ?x642 ?x525 ?x321)))
 (let (($x564 (>= ?x556 0.0)))
 (let (($x691 (not $x564)))
 (let (($x561 (<= ?x556 0.0)))
 (let (($x638 (<= ?x392 0.0)))
 (let (($x230 (>= ?x645 0.0)))
 (let (($x428 (<= ?x348 0)))
 (let ((@x278 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x596) $x428)) @x287 $x428)))
 (let ((?x60 (to_real d00)))
 (let ((?x384 (* ?x60 ?x705)))
 (let ((?x403 (+ (* (- 1.0) ?x396) ?x384)))
 (let (($x398 (<= ?x403 0.0)))
 (let (($x228 (= 0.0 ?x403)))
 (let ((@x226 (symm (commutativity (= $x228 (= ?x403 0.0))) (= (= ?x403 0.0) $x228))))
 (let ((@x668 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x228) $x398)) (mp ((_ th-lemma arith) (= ?x403 0.0)) @x226 $x228) $x398)))
 (let ((@x716 (lemma ((_ th-lemma arith) @x668 @x278 (hypothesis (not $x638)) (hypothesis $x230) false) (or (not $x230) $x638))))
 (let ((@x643 (unit-resolution @x716 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x139) $x230)) @x661 $x230) $x638)))
 (let (($x518 (not $x561)))
 (let ((@x613 (hypothesis $x518)))
 (let (($x794 (>= ?x470 0.0)))
 (let (($x309 (not $x794)))
 (let (($x539 (<= ?x470 0.0)))
 (let (($x685 (not $x539)))
 (let ((@x694 (hypothesis $x685)))
 (let ((@x593 (unit-resolution ((_ th-lemma arith) (or (not $x638) $x564 $x539)) @x694 (hypothesis $x691) @x643 false)))
 (let (($x517 (not $x362)))
 (let ((@x736 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith) (or $x517 $x561 $x539)) @x694 @x613 $x517) (hypothesis $x646) @x515 @x730 false)))
 (let ((@x277 (unit-resolution (lemma @x736 (or (not $x646) $x539 $x561)) @x617 (or $x539 $x561))))
 (let (($x713 (= ?x556 0.0)))
 (let (($x185 (not $x713)))
 (let (($x489 (= 0.0 ?x679)))
 (let (($x529 (<= ?x679 0.0)))
 (let ((@x614 (unit-resolution ((_ th-lemma arith) (or $x529 (not $x428) (not $x194))) @x278 @x730 (hypothesis (not $x529)) false)))
 (let (($x490 (>= ?x679 0.0)))
 (let ((@x199 (unit-resolution ((_ th-lemma arith) (or $x490 (not $x194) (not $x428))) @x278 @x730 (hypothesis (not $x490)) false)))
 (let ((@x303 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x489 (not $x529) (not $x490))) (lemma @x199 $x490) (or $x489 (not $x529)))))
 (let ((@x311 (mp (unit-resolution @x303 (lemma @x614 $x529) $x489) (commutativity (= $x489 $x684)) $x684)))
 (let ((@x313 (unit-resolution (and-elim @x430 $x427) @x311 $x472)))
 (let ((@x290 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x185 $x414)) @x313 $x185) (symm (hypothesis (= 0.0 ?x556)) $x713) false)))
 (let ((@x316 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x556) $x518 $x691)) (lemma @x290 (not (= 0.0 ?x556))) (or $x518 $x691))))
 (let ((@x122 (unit-resolution @x316 (unit-resolution @x277 @x694 $x561) (unit-resolution (lemma @x593 (or $x564 $x539)) @x694 $x564) false)))
 (let (($x541 (= 0.0 ?x470)))
 (let (($x750 (not $x541)))
 (let ((@x751 (monotonicity (symm (commutativity (= $x541 $x414)) (= $x414 $x541)) (= $x472 $x750))))
 (let ((@x767 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x541 $x685 $x309)) (mp @x313 @x751 $x750) (or $x685 $x309))))
 (let ((@x791 (unit-resolution @x767 (lemma @x122 $x539) $x309)))
 (let ((@x792 (unit-resolution ((_ th-lemma arith) (or (not $x638) $x561 $x794)) @x791 @x613 @x643 false)))
 (unit-resolution ((_ th-lemma arith) (or $x517 $x564 $x794)) @x791 (unit-resolution @x316 (lemma @x792 $x561) $x691) (lemma ((_ th-lemma arith) (hypothesis $x517) @x730 @x515 @x617 false) $x362) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       49
 :arith-eq-adapter                49
 :arith-bound-propagations-cheap  34
 :arith-bound-propagations-lp     6
 :arith-conflicts                 82
 :arith-diseq                     46
 :arith-gcd-calls                 5
 :arith-grobner-calls             5
 :arith-grobner-conflicts         2
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 12
 :arith-lower                     64
 :arith-make-feasible             56
 :arith-max-columns               78
 :arith-max-rows                  18
 :arith-nla-explanations          74
 :arith-nla-lemmas                79
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              34
 :arith-upper                     64
 :conflicts                       14
 :decisions                       132
 :del-clause                      119
 :final-checks                    35
 :max-memory                      5.33
 :memory                          3.17
 :mk-bool-var                     234
 :mk-clause                       173
 :num-allocs                      5009234
 :num-checks                      1
 :propagations                    129
 :rlimit-count                    7340
 :time                            0.04
 :total-time                      0.05)
