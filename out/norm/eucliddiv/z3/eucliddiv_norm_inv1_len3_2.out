unsat
((set-logic NIA)
(proof
(let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x44 y00)))
 (let ((?x47 (* ?x42 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x48 (* ?x42 ?x42 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x48)))
 (let ((?x50 (- ?x49 ?x47)))
 (let ((?x51 (+ ?x50 ?x45)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x54))))))))))))))))) :qid k!29))
 ))
 (let (($x329 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x371 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x44 y00)))
 (let ((?x47 (* ?x42 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x48 (* ?x42 ?x42 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x48)))
 (let ((?x50 (- ?x49 ?x47)))
 (let ((?x51 (+ ?x50 ?x45)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x55 (and $x33 $x41 $x54)))
 (let (($x117 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x307 (= (+ (* (- 1) y00) y) 0)))
 (let (($x246 (and $x307 $x117 false)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x110 (+ r ?x61)))
 (let ((?x344 (+ 1 q)))
 (let ((?x119 (* y00 ?x344 ?x344 ?x344 ?x110)))
 (let ((?x128 (* (- 1) ?x119)))
 (let ((?x172 (+ ?x128 ?x119)))
 (let ((@x113 (rewrite (= ?x44 ?x110))))
 (let ((@x279 (rewrite (= ?x42 ?x344))))
 (let ((@x116 (monotonicity @x279 @x279 @x279 @x113 (= ?x45 (* ?x344 ?x344 ?x344 ?x110 y00)))))
 (let ((@x124 (trans @x116 (rewrite (= (* ?x344 ?x344 ?x344 ?x110 y00) ?x119)) (= ?x45 ?x119))))
 (let ((?x137 (* y00 y00 ?x344 ?x110 ?x110 ?x110)))
 (let ((?x152 (+ ?x128 ?x137)))
 (let ((?x162 (+ ?x152 (* (- 1) ?x137))))
 (let ((@x136 (monotonicity @x279 @x113 @x113 @x113 (= ?x47 (* ?x344 ?x110 ?x110 ?x110 y00 y00)))))
 (let ((@x141 (trans @x136 (rewrite (= (* ?x344 ?x110 ?x110 ?x110 y00 y00) ?x137)) (= ?x47 ?x137))))
 (let ((?x349 (* y00 ?x344 ?x344)))
 (let ((?x350 (* (- 1) ?x349)))
 (let ((?x129 (+ ?x350 ?x128)))
 (let ((?x149 (+ ?x129 ?x137 ?x349)))
 (let ((@x148 (trans (monotonicity @x279 @x279 (= ?x48 (* ?x344 ?x344 y00))) (rewrite (= (* ?x344 ?x344 y00) ?x349)) (= ?x48 ?x349))))
 (let ((@x348 (monotonicity (rewrite (= ?x28 (- 1))) @x279 @x279 (= ?x43 (* (- 1) ?x344 ?x344 y00)))))
 (let ((@x109 (trans @x348 (rewrite (= (* (- 1) ?x344 ?x344 y00) ?x350)) (= ?x43 ?x350))))
 (let ((@x133 (trans (monotonicity @x109 @x124 (= ?x46 (- ?x350 ?x119))) (rewrite (= (- ?x350 ?x119) ?x129)) (= ?x46 ?x129))))
 (let ((@x157 (trans (monotonicity @x133 @x141 @x148 (= ?x49 ?x149)) (rewrite (= ?x149 ?x152)) (= ?x49 ?x152))))
 (let ((@x166 (trans (monotonicity @x157 @x141 (= ?x50 (- ?x152 ?x137))) (rewrite (= (- ?x152 ?x137) ?x162)) (= ?x50 ?x162))))
 (let ((@x174 (monotonicity (trans @x166 (rewrite (= ?x162 ?x128)) (= ?x50 ?x128)) @x124 (= ?x51 ?x172))))
 (let ((@x180 (monotonicity (trans @x174 (rewrite (= ?x172 0)) $x52) (= $x52 (= 0 0)))))
 (let ((@x211 (monotonicity (trans @x180 (rewrite (= (= 0 0) true)) (= $x52 true)) (= $x53 (not true)))))
 (let ((@x258 (monotonicity (trans @x211 (rewrite (= (not true) false)) (= $x53 false)) (= $x54 (or false)))))
 (let ((@x326 (monotonicity (rewrite (= $x33 $x307)) (rewrite (= $x41 $x117)) (trans @x258 (rewrite (= (or false) false)) (= $x54 false)) (= $x55 $x246))))
 (trans @x326 (rewrite (= $x246 false)) (= $x55 false)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x383 (trans (quant-intro (proof-bind ?x371) (= $x56 $x329)) (elim-unused (= $x329 false)) (= $x56 false))))
 (let ((@x57 (asserted $x56)))
 (mp @x57 @x383 false))))))))

(:max-memory   3.41
 :memory       3.10
 :mk-bool-var  5
 :num-allocs   918552
 :rlimit-count 357
 :time         0.01
 :total-time   0.01)
