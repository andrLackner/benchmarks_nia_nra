unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x280 (* d!1 a!3)))
 (let ((?x336 (to_real ?x280)))
 (let ((?x177 (+ (* (- 1.0) (* (to_real d!1) (to_real a!3))) ?x336)))
 (let (($x651 (<= ?x177 0.0)))
 (let (($x526 (= ?x177 0.0)))
 (let ((@x497 (lemma (unit-resolution ((_ th-lemma arith) $x526) (hypothesis (not $x526)) false) $x526)))
 (let ((@x390 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x526) $x651)) @x497 $x651)))
 (let (($x534 (>= ?x177 0.0)))
 (let ((@x540 ((_ th-lemma arith triangle-eq) (or (not $x526) $x534))))
 (let ((@x130 (unit-resolution @x540 @x497 $x534)))
 (let ((?x626 (to_real y!0)))
 (let ((?x604 (to_real a!3)))
 (let ((?x602 (to_real d!1)))
 (let ((?x611 (* ?x602 ?x602 ?x602 ?x604 ?x604 ?x626)))
 (let ((?x609 (to_real b!2)))
 (let ((?x582 (* ?x602 ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x604 ?x609 ?x609 ?x626)))
 (let ((?x321 (* ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x609 ?x609 ?x609 ?x626 ?x626)))
 (let ((?x69 (to_real a00)))
 (let ((?x238 (* (- (/ 1.0 64.0)) (* ?x69 ?x602 ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x609 ?x609 ?x626))))
 (let ((?x66 (to_real y00)))
 (let ((?x151 (* (/ 1.0 32.0) (* ?x66 ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x609 ?x609 ?x609 ?x626))))
 (let ((?x685 (+ (* (/ 1.0 16.0) (* ?x602 ?x604 ?x604 ?x609 ?x609 ?x609)) (* (- (/ 1.0 4.0)) (* ?x66 ?x602 ?x602 ?x604 ?x609 ?x626)) (* (/ 1.0 8.0) (* ?x69 ?x602 ?x602 ?x602 ?x604 ?x626)) ?x151 (* (/ 1.0 8.0) (* ?x66 ?x604 ?x609 ?x609 ?x609 ?x609)) ?x238 (* (- (/ 1.0 16.0)) (* ?x69 ?x602 ?x604 ?x609 ?x609 ?x609)) (* (- (/ 1.0 32.0)) ?x321) (* (- (/ 1.0 8.0)) (* ?x604 ?x609 ?x609 ?x609 ?x609 ?x626)) (* (/ 1.0 4.0) (* ?x602 ?x602 ?x604 ?x609 ?x626 ?x626)) (* (/ 1.0 64.0) ?x582) (* (- (/ 1.0 8.0)) ?x611))))
 (let (($x157 (<= ?x685 0.0)))
 (let (($x377 (not $x157)))
 (let (($x193 (>= ?x685 0.0)))
 (let ((?x209 (* a00 d!1)))
 (let ((?x421 (to_real ?x209)))
 (let ((?x362 (+ (* (- 1.0) (* ?x69 ?x602)) ?x421)))
 (let (($x673 (= ?x362 0.0)))
 (let (($x303 (<= ?x362 0.0)))
 (let ((?x472 (* ?x609 ?x626)))
 (let ((?x420 (+ ?x472 (* (- 1.0) (to_real (* b!2 y!0))))))
 (let (($x194 (<= ?x420 0.0)))
 (let (($x212 (= ?x420 0.0)))
 (let ((@x679 (lemma (unit-resolution ((_ th-lemma arith) $x212) (hypothesis (not $x212)) false) $x212)))
 (let ((@x712 ((_ th-lemma arith triangle-eq) (or (not $x212) $x194))))
 (let (($x707 (>= ?x420 0.0)))
 (let ((@x283 ((_ th-lemma arith triangle-eq) (or (not $x212) $x707))))
 (let ((?x282 (* ?x602 ?x604)))
 (let ((?x315 (* (/ 1.0 2.0) ?x282)))
 (let ((?x250 (* ?x69 ?x602)))
 (let ((?x453 (* (- (/ 1.0 2.0)) ?x250)))
 (let ((?x211 (* ?x66 ?x609)))
 (let ((?x635 (* (- 1.0) ?x472)))
 (let ((?x205 (+ ?x635 ?x211 ?x453 ?x315)))
 (let (($x670 (>= ?x205 0.0)))
 (let ((?x454 (+ ?x282 (* (- 1.0) ?x336))))
 (let (($x467 (>= ?x454 0.0)))
 (let (($x448 (= ?x454 0.0)))
 (let ((@x202 ((_ th-lemma arith) $x448)))
 (let ((@x477 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x448) $x467)) @x202 $x467)))
 (let ((?x686 (+ ?x250 (* (- 1.0) ?x421))))
 (let (($x217 (<= ?x686 0.0)))
 (let (($x218 (= 0.0 ?x686)))
 (let ((@x360 (symm (commutativity (= $x218 (= ?x686 0.0))) (= (= ?x686 0.0) $x218))))
 (let ((@x379 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x217)) (mp ((_ th-lemma arith) (= ?x686 0.0)) @x360 $x218) $x217)))
 (let ((?x764 (+ ?x211 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x430 (>= ?x764 0.0)))
 (let (($x756 (= 0.0 ?x764)))
 (let ((@x652 (symm (commutativity (= $x756 (= ?x764 0.0))) (= (= ?x764 0.0) $x756))))
 (let ((@x564 (mp ((_ th-lemma arith) (= ?x764 0.0)) @x652 $x756)))
 (let ((@x676 ((_ th-lemma arith) $x212)))
 (let ((@x630 (unit-resolution @x712 @x676 $x194)))
 (let ((?x722 (* b!2 y!0)))
 (let ((?x725 (* (- 2) ?x722)))
 (let ((?x123 (+ (* 2 (* y00 b!2)) (* (- 1) ?x209) ?x280 ?x725)))
 (let (($x791 (>= ?x123 0)))
 (let (($x358 (= 0 ?x123)))
 (let ((@x231 (symm (commutativity (= $x358 (= ?x123 0))) (= (= ?x123 0) $x358))))
 (let (($x255 (= ?x123 0)))
 (let ((?x225 (* (- (/ 1.0 32.0)) (* ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x609 ?x609 ?x626))))
 (let ((?x658 (* (- (/ 3.0 32.0)) (* ?x602 ?x602 ?x602 ?x604 ?x609 ?x609 ?x609 ?x609 ?x626))))
 (let ((?x589 (* (- (/ 1.0 64.0)) (* ?x602 ?x602 ?x602 ?x602 ?x609 ?x609 ?x609 ?x609 ?x609))))
 (let ((?x581 (* (- (/ 3.0 64.0)) (* ?x602 ?x602 ?x602 ?x602 ?x604 ?x604 ?x609 ?x609 ?x609))))
 (let ((?x622 (* (- (/ 1.0 64.0)) (* ?x602 ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x609 ?x609))))
 (let ((?x298 (* (- (/ 1.0 8.0)) (* ?x609 ?x609 ?x609 ?x609))))
 (let ((?x566 (* (- (/ 3.0 32.0)) (* ?x602 ?x602 ?x602 ?x604 ?x604 ?x609 ?x609 ?x609 ?x626))))
 (let ((?x653 (* (- (/ 3.0 64.0)) (* ?x602 ?x602 ?x602 ?x602 ?x604 ?x609 ?x609 ?x609 ?x609))))
 (let ((?x573 (* (/ 1.0 4.0) (* ?x602 ?x602 ?x609 ?x626))))
 (let ((?x142 (* (/ 1.0 8.0) (* ?x602 ?x602 ?x602 ?x609))))
 (let ((?x495 (* (/ 1.0 8.0) (* ?x602 ?x602 ?x602 ?x604))))
 (let ((?x309 (* (/ 1.0 4.0) (* ?x602 ?x602 ?x604 ?x626))))
 (let ((?x284 (* (- (/ 1.0 32.0)) (* ?x602 ?x602 ?x602 ?x609 ?x609 ?x609 ?x609 ?x609 ?x626))))
 (let ((?x795 (* (- (/ 1.0 8.0)) (* ?x604 ?x609 ?x609 ?x609))))
 (let ((?x288 (+ ?x795 ?x284 ?x309 ?x495 ?x142 ?x573 ?x653 ?x566 ?x298 ?x622 ?x581 ?x589 ?x658 ?x225)))
 (let (($x422 (= (* ?x288 (+ ?x211 ?x453 ?x315 ?x635)) 0.0)))
 (let (($x450 (not $x422)))
 (let (($x159 (= ?x685 0.0)))
 (let (($x700 (not $x159)))
 (let (($x249 (or $x700 $x450)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x662 (= (+ ?x35 ?x108 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3))) 0)))
 (let (($x767 (and $x662 (= (+ (* b00 d!1) (* (- 1) (* d00 b!2))) 0) $x255 $x249)))
 (let ((?x591 (+ ?x309 ?x225 ?x795 ?x495 ?x142 ?x573 ?x622 ?x581 ?x653 ?x589 ?x566 ?x658 ?x284 ?x298)))
 (let (($x643 (= (* ?x591 (+ ?x315 ?x635 (* ?x609 ?x66) (* (- (/ 1.0 2.0)) (* ?x602 ?x69)))) 0.0)))
 (let ((?x568 (* (/ 1.0 64.0) (* ?x602 ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x609 ?x609 ?x626 ?x69))))
 (let ((?x350 (* (- (/ 1.0 32.0)) (* ?x602 ?x602 ?x602 ?x604 ?x604 ?x604 ?x609 ?x609 ?x609 ?x626 ?x66))))
 (let ((?x506 (+ (* (/ 1.0 8.0) ?x611) (* (- (/ 1.0 4.0)) (* ?x602 ?x602 ?x604 ?x609 ?x626 ?x626)) (* (/ 1.0 4.0) (* ?x602 ?x602 ?x604 ?x609 ?x626 ?x66)) (* (- (/ 1.0 8.0)) (* ?x602 ?x602 ?x602 ?x604 ?x626 ?x69)) (* (- (/ 1.0 64.0)) ?x582) (* (/ 1.0 32.0) ?x321) ?x350 ?x568 (* (- (/ 1.0 16.0)) (* ?x602 ?x604 ?x604 ?x609 ?x609 ?x609)) (* (/ 1.0 8.0) (* ?x604 ?x609 ?x609 ?x609 ?x609 ?x626)) (* (- (/ 1.0 8.0)) (* ?x604 ?x609 ?x609 ?x609 ?x609 ?x66)) (* (/ 1.0 16.0) (* ?x602 ?x604 ?x609 ?x609 ?x609 ?x69)))))
 (let ((?x610 (+ (* a!3 d!1) ?x725 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x240 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x108 (* 2 (* y!0 b00))) 0)))
 (let (($x644 (and $x240 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x610 0) (or (not (= ?x506 0.0)) (not $x643)))))
 (let (($x663 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x168 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x252 (+ ?x168 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x790 (* (- (/ 1.0 8.0)) (* (to_real b) (to_real b) (to_real b) (to_real b)))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x746 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x743 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x736 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61))))
 (let ((?x733 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61))))
 (let ((?x59 (to_real a)))
 (let ((?x799 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) ?x733 ?x736 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) ?x743 ?x746 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x790)))
 (let ((?x69 (to_real a00)))
 (let ((?x440 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x429 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x66))))
 (let ((?x419 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x409 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63))))
 (let ((?x478 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x63 ?x69)) ?x409 ?x419 ?x429 ?x440 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x66)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x69)))))
 (let (($x154 (not (= ?x478 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x175 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x180 (= ?x175 0)))
 (let (($x105 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (and $x140 $x105 $x180 (or $x154 (not (= (* ?x799 ?x252) 0.0)))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x441 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x669 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x278 (* ?x66 ?x61)))
 (let ((?x510 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x278 ?x669)))
 (let ((?x63 (to_real y)))
 (let ((?x627 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x798 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x132 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 ?x798 ?x627)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x798 ?x798 ?x798 ?x627)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x798)))))
 (let ((?x372 (+ (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x793 (* ?x372 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x278 ?x669))))
 (let (($x179 (or (not (= ?x793 0.0)) (not (= (* ?x132 ?x510) 0.0)))))
 (let ((?x605 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x612 (= ?x605 0)))
 (let ((?x343 (* d00 a)))
 (let ((?x485 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x343)))
 (and (= ?x485 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x612 $x179))))))))))))))))))) :qid k!33))
 ))
 (let ((?x518 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x168 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x252 (+ ?x168 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x790 (* (- (/ 1.0 8.0)) (* (to_real b) (to_real b) (to_real b) (to_real b)))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x746 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x743 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x736 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61))))
 (let ((?x733 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61))))
 (let ((?x59 (to_real a)))
 (let ((?x799 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) ?x733 ?x736 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) ?x743 ?x746 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x790)))
 (let ((?x69 (to_real a00)))
 (let ((?x440 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x429 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x66))))
 (let ((?x419 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x409 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63))))
 (let ((?x478 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x63 ?x69)) ?x409 ?x419 ?x429 ?x440 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x66)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x69)))))
 (let (($x154 (not (= ?x478 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x175 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x180 (= ?x175 0)))
 (let (($x105 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (let (($x537 (and $x140 $x105 $x180 (or $x154 (not (= (* ?x799 ?x252) 0.0))))))
 (let ((?x669 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x278 (* ?x66 ?x61)))
 (let ((?x510 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x59 ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x278 ?x669)))
 (let ((?x627 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x798 (+ ?x59 ?x61)))
 (let ((?x132 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 ?x798 ?x627)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x798 ?x798 ?x798 ?x627)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x798)))))
 (let ((?x372 (+ (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x59)))))
 (let (($x576 (not (= (* ?x372 (+ ?x168 (* (- 1.0) (* ?x63 ?x61)) ?x278 ?x669)) 0.0))))
 (let (($x179 (or $x576 (not (= (* ?x132 ?x510) 0.0)))))
 (let ((?x605 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x612 (= ?x605 0)))
 (let ((?x343 (* d00 a)))
 (let (($x335 (= (+ (* 2 ?x107) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x343) 0)))
 (let (($x144 (and $x335 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x612 $x179)))
 (rewrite (= $x144 $x537))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x184 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x669 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x278 (* ?x66 ?x61)))
 (let ((?x510 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x278 ?x669)))
 (let ((?x63 (to_real y)))
 (let ((?x627 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x798 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x132 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 ?x798 ?x627)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x798 ?x798 ?x798 ?x627)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x798)))))
 (let ((?x372 (+ (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x793 (* ?x372 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x278 ?x669))))
 (let (($x179 (or (not (= ?x793 0.0)) (not (= (* ?x132 ?x510) 0.0)))))
 (let ((?x605 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x612 (= ?x605 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x354 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x354 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x612 $x179))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x792 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x669 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x278 (* ?x66 ?x61)))
 (let ((?x510 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x278 ?x669)))
 (let ((?x63 (to_real y)))
 (let ((?x627 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x798 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x132 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 ?x798 ?x627)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x798 ?x798 ?x798 ?x627)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x798)))))
 (let ((?x372 (+ (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x793 (* ?x372 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x278 ?x669))))
 (let (($x179 (or (not (= ?x793 0.0)) (not (= (* ?x132 ?x510) 0.0)))))
 (let ((?x605 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x612 (= ?x605 0)))
 (let ((?x343 (* d00 a)))
 (let ((?x485 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x343)))
 (let (($x144 (and (= ?x485 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x612 $x179)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x590 (and (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) ?x343)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x612 $x179)))
 (rewrite (= $x590 $x144))))))))))))))))))))))))))
 ))
 (let (($x99 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x78 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x84 (+ ?x63 ?x58)))
 (let ((?x92 (- (* ?x82 ?x58 ?x58 ?x84) (* ?x82 ?x82 ?x82 ?x62 ?x62 ?x58 ?x58 ?x58 ?x84))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x94 (* (- (+ (- (* ?x82 ?x58) (* ?x57 ?x62 ?x84)) ?x67) ?x70) (- ?x92 (* ?x82 ?x62 ?x62 ?x62)))))
 (let ((?x59 (to_real a)))
 (let ((?x75 (- (* ?x59 ?x58 ?x58 ?x63) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x58 ?x58 ?x58 ?x63))))
 (let ((?x77 (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) (- ?x75 (* ?x59 ?x62 ?x62 ?x62)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x77 ?x78)) (not (= ?x94 ?x78)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x616 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x669 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x278 (* ?x66 ?x61)))
 (let ((?x510 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x278 ?x669)))
 (let ((?x63 (to_real y)))
 (let ((?x627 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x798 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x132 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 ?x798 ?x627)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x798 ?x798 ?x798 ?x627)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x798)))))
 (let ((?x372 (+ (* (/ 1.0 4.0) (* ?x63 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x793 (* ?x372 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x278 ?x669))))
 (let (($x179 (or (not (= ?x793 0.0)) (not (= (* ?x132 ?x510) 0.0)))))
 (let ((?x605 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x612 (= ?x605 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x354 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x590 (and $x354 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x612 $x179)))
 (let ((?x78 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (+ ?x63 ?x58)))
 (let ((?x92 (- (* ?x82 ?x58 ?x58 ?x84) (* ?x82 ?x82 ?x82 ?x62 ?x62 ?x58 ?x58 ?x58 ?x84))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x88 (- (+ (- (* ?x82 ?x58) (* ?x57 ?x62 ?x84)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x75 (- (* ?x59 ?x58 ?x58 ?x63) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x58 ?x58 ?x58 ?x63))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let (($x97 (or (not (= (* ?x71 (- ?x75 (* ?x59 ?x62 ?x62 ?x62))) ?x78)) (not (= (* ?x88 (- ?x92 (* ?x82 ?x62 ?x62 ?x62))) ?x78)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x98 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x97)))
 (rewrite (= $x98 $x590))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x213 (mp (mp @x100 (quant-intro (proof-bind ?x616) (= $x99 $x184)) $x184) (rewrite (= $x184 $x184)) $x184)))
 (let ((@x332 (mp (mp @x213 (quant-intro (proof-bind ?x792) (= $x184 $x441)) $x441) (quant-intro (proof-bind ?x518) (= $x441 $x663)) $x663)))
 (let ((@x134 (mp (mp~ @x332 (sk (~ $x663 $x644)) $x644) (rewrite (= $x644 $x767)) $x767)))
 (let ((@x232 (mp (and-elim @x134 $x255) @x231 $x358)))
 (let ((@x338 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x358) $x791)) @x232 $x791)))
 (let ((@x464 ((_ th-lemma arith) @x338 @x630 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x756) $x430)) @x564 $x430) @x379 (hypothesis (not $x670)) @x477 false)))
 (let ((@x339 (lemma @x464 $x670)))
 (let (($x174 (<= ?x205 0.0)))
 (let (($x156 (<= ?x454 0.0)))
 (let (($x458 (<= ?x123 0)))
 (let ((@x435 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x358) $x458)) @x232 $x458)))
 (let ((@x412 (unit-resolution ((_ th-lemma arith) (or (not $x458) (not $x791) $x174 (not $x156) (not $x467))) @x435 @x338 (hypothesis (not $x174)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x448) $x156)) @x202 $x156) @x477 false)))
 (let ((@x457 (lemma @x412 $x174)))
 (let (($x227 (not $x534)))
 (let (($x766 (not $x458)))
 (let (($x768 (not $x670)))
 (let (($x436 (not $x174)))
 (let (($x432 (not $x791)))
 (let (($x317 (not $x651)))
 (let (($x788 (not $x194)))
 (let (($x286 (not $x707)))
 (let ((@x399 (unit-resolution ((_ th-lemma arith) (or $x286 $x788 $x317 $x432 $x436 $x768 $x766 $x227 $x303)) @x435 @x338 @x457 @x339 (hypothesis (not $x303)) (unit-resolution @x283 @x679 $x707) @x130 @x390 (unit-resolution @x712 @x679 $x194) false)))
 (let (($x748 (>= ?x362 0.0)))
 (let (($x490 (<= ?x764 0.0)))
 (let (($x228 (not $x490)))
 (let ((@x587 (unit-resolution @x283 @x676 $x707)))
 (let ((@x307 (unit-resolution ((_ th-lemma arith) (or $x286 $x748 $x768 $x227 $x766 $x228)) (hypothesis (not $x748)) @x339 @x587 @x435 (unit-resolution @x540 ((_ th-lemma arith) $x526) $x534) $x228)))
 (let ((@x548 (lemma (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x756) $x490)) @x307 @x564 false) $x748)))
 (let ((@x738 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x673 (not $x303) (not $x748))) @x548 (or $x673 (not $x303)))))
 (let ((@x504 (hypothesis $x673)))
 (let ((@x596 (unit-resolution ((_ th-lemma arith) (or $x436 $x286 (not $x303) (not $x748) $x193 $x768 $x788)) (hypothesis (not $x193)) @x457 @x339 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x673) $x303)) @x504 $x303) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x673) $x748)) @x504 $x748) @x630 @x587 false)))
 (let ((@x460 (unit-resolution (lemma @x596 (or (not $x673) $x193)) (unit-resolution @x738 (lemma @x399 $x303) $x673) $x193)))
 (let (($x337 (= 0.0 ?x685)))
 (let (($x143 (not $x337)))
 (let ((@x115 (monotonicity (symm (commutativity (= $x337 $x159)) (= $x159 $x337)) (= $x700 $x143))))
 (let (($x459 (= ?x205 0.0)))
 (let (($x468 (or (not $x459) $x422)))
 (let ((@x750 (unit-resolution ((_ th-lemma arith) $x468) (hypothesis $x450) (hypothesis $x459) false)))
 (let ((@x522 (unit-resolution (lemma @x750 $x468) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x459 $x436 $x768)) @x457 @x339 $x459) $x422)))
 (let ((@x106 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x337 $x377 (not $x193))) (mp (unit-resolution (and-elim @x134 $x249) @x522 $x700) @x115 $x143) (or $x377 (not $x193)))))
 (unit-resolution ((_ th-lemma arith) (or $x766 $x432 $x227 $x157 $x317)) @x435 @x338 (unit-resolution @x106 @x460 $x377) @x130 @x390 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       46
 :arith-eq-adapter                48
 :arith-bound-propagations-cheap  26
 :arith-bound-propagations-lp     20
 :arith-conflicts                 60
 :arith-diseq                     31
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 8
 :arith-grobner-calls             6
 :arith-grobner-conflicts         4
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 11
 :arith-lower                     57
 :arith-make-feasible             50
 :arith-max-columns               86
 :arith-max-rows                  23
 :arith-nla-explanations          173
 :arith-nla-lemmas                59
 :arith-patches                   8
 :arith-patches-success           8
 :arith-propagations              26
 :arith-upper                     51
 :conflicts                       11
 :decisions                       53
 :del-clause                      129
 :final-checks                    42
 :max-memory                      5.10
 :memory                          3.16
 :mk-bool-var                     188
 :mk-clause                       185
 :num-allocs                      15785408
 :num-checks                      1
 :propagations                    97
 :rlimit-count                    6387
 :time                            0.05
 :total-time                      0.05)
