unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x321 (* (- 1) r!1)))
 (let ((?x234 (* 2 x!0)))
 (let ((?x80 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x288 (* (- 1) ?x36)))
 (let ((?x265 (* (- 2) x00)))
 (let ((?x247 (+ r00 ?x265 ?x288 ?x80 ?x234 ?x321)))
 (let (($x316 (<= ?x247 0)))
 (let (($x235 (= ?x247 0)))
 (let ((?x305 (* r!1 r!1 r!1 r!1)))
 (let ((?x226 (* r!1 r!1 r!1)))
 (let ((?x276 (* (- 1) ?x80)))
 (let ((?x254 (+ r00 ?x265 ?x288 ?x276 ?x234 (* 4 (* x!0 r!1)) (* (- 2) (* x00 r!1 r!1)) ?x321 ?x226 (* r00 r!1 r!1) ?x305 (* 2 (* r00 r!1)) (* (- 4) (* x00 r!1)) (* (- 2) (* r00 r00 r!1)) (* 2 (* x!0 r!1 r!1)) (* (- 1) (* r00 r00 r!1 r!1)))))
 (let (($x255 (= ?x254 0)))
 (let (($x290 (not $x255)))
 (let (($x250 (and $x235 $x290)))
 (let ((?x35 (* 2 x00)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x275 (* (- 2) x!0)))
 (let ((?x244 (+ r!1 ?x275 ?x111 ?x80 ?x35 ?x36 (* (- 4) (* r!1 x!0)) (* (- 2) (* r!1 r00)) (* (- 1) ?x226) (* 4 (* r!1 x00)) (* 2 (* r!1 r00 r00)) (* (- 2) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r00)) (* (- 1) ?x305) (* 2 (* r!1 r!1 x00)) (* r!1 r!1 r00 r00))))
 (let (($x187 (and (= (+ r!1 ?x275 ?x111 ?x276 ?x35 ?x36) 0) (not (= ?x244 0)))))
 (let (($x123 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x406 (+ r ?x110 ?x111 ?x30 ?x35 ?x36 (* (- 4) (* r x)) (* (- 2) (* r r00)) (* (- 1) (* r r r)) (* 4 (* r x00)) (* 2 (* r r00 r00)) (* (- 2) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00))))
 (and (= (+ r ?x110 ?x111 (* (- 1) ?x30) ?x35 ?x36) 0) (not (= ?x406 0))))))))) :qid k!26))
 ))
 (let (($x238 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x288 (* (- 1) ?x36)))
 (let ((?x265 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x307 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x265 ?x288)))
 (let ((?x104 (+ 1 r)))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x265 ?x288) 0) (not (= (* ?x104 ?x104 ?x307) 0))))))))) :qid k!26))
 ))
 (let ((?x366 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x406 (+ r ?x110 ?x111 ?x30 ?x35 ?x36 (* (- 4) (* r x)) (* (- 2) (* r r00)) (* (- 1) (* r r r)) (* 4 (* r x00)) (* 2 (* r r00 r00)) (* (- 2) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00))))
 (let (($x132 (and (= (+ r ?x110 ?x111 (* (- 1) ?x30) ?x35 ?x36) 0) (not (= ?x406 0)))))
 (let ((?x288 (* (- 1) ?x36)))
 (let ((?x265 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x307 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x265 ?x288)))
 (let ((?x104 (+ 1 r)))
 (let (($x136 (and (= (+ (* (- 1) r) r00 ?x30 ?x32 ?x265 ?x288) 0) (not (= (* ?x104 ?x104 ?x307) 0)))))
 (rewrite (= $x136 $x132))))))))))))))))
 ))
 (let (($x54 (exists ((r Int) (x Int) )(! (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (- (+ (* ?x27 ?x41) r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35)))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- ?x47 ?x36) ?x27 ?x41 ?x41) 0)))))))))) :qid k!26))
 ))
 (let ((?x336 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x288 (* (- 1) ?x36)))
 (let ((?x265 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x307 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x265 ?x288)))
 (let ((?x104 (+ 1 r)))
 (let (($x136 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x265 ?x288) 0) (not (= (* ?x104 ?x104 ?x307) 0)))))
 (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (- (+ (* ?x27 ?x41) r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35)))
 (let (($x40 (= (- (- (+ (* ?x27 r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x53 (and $x40 (or (not (= (* (- ?x47 ?x36) ?x27 ?x41 ?x41) 0))))))
 (rewrite (= $x53 $x136))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x231 (mp (mp @x55 (quant-intro (proof-bind ?x336) (= $x54 $x238)) $x238) (rewrite (= $x238 $x238)) $x238)))
 (let ((@x245 (mp~ (mp @x231 (quant-intro (proof-bind ?x366) (= $x238 $x123)) $x123) (sk (~ $x123 $x187)) $x187)))
 (let ((@x314 (mp @x245 (rewrite (= $x187 $x250)) $x250)))
 (let ((@x97 (and-elim @x314 $x235)))
 (let ((@x65 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x316)) @x97 $x316)))
 (let (($x217 (>= ?x247 0)))
 (let ((@x85 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x217)) @x97 $x217)))
 (let (($x73 (not (>= ?x254 0))))
 (let (($x233 (<= ?x254 0)))
 (let ((@x218 (lemma ((_ th-lemma arith) (hypothesis (not $x233)) @x85 @x65 @x85 @x65 false) $x233)))
 (let ((@x287 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x255 (not $x233) $x73)) (and-elim @x314 $x290) (or (not $x233) $x73))))
 ((_ th-lemma arith) (unit-resolution @x287 @x218 $x73) @x85 @x65 @x85 @x65 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             120
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              3
 :arith-row-summations      1
 :arith-tableau-max-columns 24
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.57
 :memory                    19.15
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                477248
 :num-checks                1
 :propagations              4
 :rlimit-count              1748
 :time                      0.01
 :total-time                0.02)
