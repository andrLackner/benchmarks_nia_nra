unsat
((set-logic NRA)
(declare-fun a!8 () Real)
(declare-fun y!5 () Real)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(proof
(let ((?x892 (* a00 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 y!5 a!8)))
 (let ((?x882 (* y00 b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 a!8)))
 (let ((?x876 (* b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 y!5 a!8)))
 (let ((?x371 (* b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 y!5 a!8 a!8)))
 (let ((?x267 (+ (* (/ 1.0 32.0) (* y00 b!7 b!7 b!7 d!6 d!6 d!6 a!8 a!8)) (* (- (/ 1.0 32.0)) (* b!7 b!7 b!7 d!6 d!6 d!6 y!5 a!8 a!8)) (* (/ 1.0 4.0) (* y00 b!7 b!7 b!7 y!5 y!5 a!8 a!8 a!8)) (* (/ 1.0 64.0) (* b!7 b!7 d!6 d!6 d!6 d!6 a!8 a!8 a!8)) (* (- (/ 1.0 64.0)) (* a00 b!7 b!7 d!6 d!6 d!6 d!6 a!8 a!8)) (* (/ 1.0 64.0) ?x371) (* (/ 1.0 2.0) (* b!7 d!6 y!5 y!5 y!5)) (* (- (/ 1.0 4.0)) (* d!6 d!6 y!5 y!5 a!8)) (* (- (/ 1.0 4.0)) (* b!7 b!7 b!7 y!5 y!5 y!5 a!8 a!8 a!8)) (* (- (/ 1.0 2.0)) (* y00 b!7 d!6 y!5 y!5)) (* (- (/ 1.0 32.0)) ?x876) (* (- (/ 1.0 8.0)) (* a00 b!7 b!7 d!6 y!5 y!5 a!8 a!8 a!8)) (* (/ 1.0 32.0) ?x882) (* (- (/ 1.0 64.0)) ?x892) (* (/ 1.0 4.0) (* a00 d!6 d!6 y!5 y!5)) (* (/ 1.0 8.0) (* b!7 b!7 d!6 y!5 y!5 a!8 a!8 a!8 a!8)))))
 (let (($x151 (<= ?x267 0.0)))
 (let (($x357 (not $x151)))
 (let (($x193 (>= ?x267 0.0)))
 (let ((?x192 (* d!6 a!8)))
 (let ((?x553 (+ ?x192 (* 2.0 (* y00 b!7)) (* (- 2.0) (* b!7 y!5)) (* (- 1.0) (* a00 d!6)))))
 (let (($x377 (>= ?x553 0.0)))
 (let (($x654 (= 0.0 ?x553)))
 (let ((@x207 (symm (commutativity (= $x654 (= ?x553 0.0))) (= (= ?x553 0.0) $x654))))
 (let (($x417 (= ?x553 0.0)))
 (let ((?x279 (* (/ 1.0 4.0) (* b!7 b!7 d!6 y!5 a!8 a!8 a!8))))
 (let ((?x349 (* (/ 1.0 16.0) (* b!7 b!7 b!7 b!7 b!7 d!6 d!6))))
 (let ((?x427 (* (/ 3.0 4.0) (* b!7 b!7 b!7 d!6 y!5 a!8 a!8))))
 (let ((?x433 (* (/ 3.0 4.0) (* b!7 b!7 b!7 b!7 d!6 y!5 a!8))))
 (let ((?x900 (* (/ 1.0 4.0) (* b!7 b!7 b!7 b!7 b!7 d!6 y!5))))
 (let ((?x902 (* (/ 3.0 4.0) (* b!7 b!7 b!7 y!5 y!5 a!8 a!8))))
 (let ((?x137 (* (- (/ 1.0 2.0)) (* d!6 y!5 y!5))))
 (let ((?x897 (* (/ 3.0 4.0) (* b!7 b!7 b!7 b!7 y!5 y!5 a!8))))
 (let ((?x636 (* (- (/ 1.0 8.0)) (* d!6 d!6 d!6))))
 (let ((?x90 (* (/ 3.0 128.0) (* b!7 b!7 d!6 d!6 d!6 d!6 d!6 y!5 a!8))))
 (let ((?x186 (* (/ 1.0 16.0) (* b!7 b!7 d!6 d!6 a!8 a!8 a!8))))
 (let ((?x321 (* (/ 1.0 4.0) (* b!7 b!7 y!5 y!5 a!8 a!8 a!8))))
 (let ((?x562 (* (/ 1.0 256.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 d!6))))
 (let ((?x887 (* (/ 1.0 4.0) (* b!7 b!7 b!7 b!7 b!7 y!5 y!5))))
 (let ((?x879 (* (- (/ 1.0 2.0)) (* d!6 d!6 y!5))))
 (let ((?x373 (* (/ 1.0 32.0) (* b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 a!8))))
 (let ((?x455 (* (/ 3.0 16.0) (* b!7 b!7 b!7 b!7 d!6 d!6 a!8))))
 (let ((?x394 (* (/ 1.0 32.0) (* b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x122 (* (/ 1.0 16.0) (* b!7 b!7 b!7 d!6 d!6 d!6 a!8))))
 (let ((?x185 (* (/ 1.0 32.0) (* b!7 b!7 b!7 b!7 d!6 d!6 d!6))))
 (let ((?x393 (* (/ 3.0 16.0) (* b!7 b!7 b!7 d!6 d!6 a!8 a!8))))
 (let ((?x531 (* (/ 3.0 128.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 y!5))))
 (let ((?x478 (* (/ 3.0 64.0) (* b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 a!8))))
 (let ((?x343 (* (/ 3.0 64.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5))))
 (let ((?x153 (* (/ 1.0 32.0) (* b!7 b!7 d!6 d!6 d!6 a!8 a!8))))
 (let ((?x826 (* (/ 1.0 256.0) (* b!7 b!7 d!6 d!6 d!6 d!6 d!6 d!6 a!8))))
 (let ((?x637 (+ ?x826 ?x153 ?x343 ?x478 ?x531 ?x393 ?x185 ?x122 ?x394 ?x455 ?x373 ?x879 ?x887 ?x562 ?x321 ?x186 ?x90 ?x636 ?x897 ?x137 ?x902 ?x900 ?x433 ?x427 ?x349 ?x279)))
 (let ((?x211 (* y00 b!7)))
 (let ((?x620 (* (/ 1.0 2.0) ?x192)))
 (let ((?x142 (* (+ ?x620 ?x211 (* (- 1.0) (* b!7 y!5)) (* (- (/ 1.0 2.0)) (* a00 d!6))) ?x637)))
 (let (($x312 (= ?x142 0.0)))
 (let (($x972 (not $x312)))
 (let (($x270 (= ?x267 0.0)))
 (let (($x276 (not $x270)))
 (let (($x319 (or $x276 $x972)))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x328 (= (+ ?x30 ?x94 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let (($x950 (and $x328 (= (+ (* d00 b!7) (* (- 1.0) (* b00 d!6))) 0.0) $x417 $x319)))
 (let ((?x120 (+ (* (- (/ 1.0 2.0)) (* y!5 y!5 d!6)) (* (/ 1.0 4.0) (* y!5 y!5 b!7 b!7 a!8 a!8 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 b!7 b!7 a!8 a!8)) (* (/ 1.0 32.0) (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (- (/ 1.0 2.0)) (* y!5 d!6 d!6)) ?x636 (* (/ 1.0 4.0) (* y!5 y!5 b!7 b!7 b!7 b!7 b!7)) (* (/ 3.0 4.0) (* y!5 y!5 b!7 b!7 b!7 b!7 a!8)) (* (/ 3.0 4.0) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 4.0) (* y!5 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 3.0 4.0) (* y!5 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 3.0 4.0) (* y!5 d!6 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 4.0) (* y!5 d!6 b!7 b!7 a!8 a!8 a!8)) (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 3.0 16.0) (* d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 3.0 16.0) (* d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 a!8 a!8 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7)) (* (/ 1.0 16.0) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8)) (* (/ 1.0 32.0) (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 64.0) (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 64.0) (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 128.0) (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 128.0) (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 256.0) (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 256.0) (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8)))))
 (let ((?x162 (* b!7 y00)))
 (let ((?x200 (* (+ ?x620 (* (- 1.0) (* y!5 b!7)) ?x162 (* (- (/ 1.0 2.0)) (* d!6 a00))) ?x120)))
 (let ((?x736 (* y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8 a00)))
 (let ((?x228 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 y00)))
 (let ((?x831 (* y!5 y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8)))
 (let ((?x906 (* y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8 a!8)))
 (let ((?x752 (+ (* (/ 1.0 4.0) (* y!5 y!5 d!6 d!6 a!8)) (* (- (/ 1.0 2.0)) (* y!5 y!5 y!5 d!6 b!7)) (* (/ 1.0 2.0) (* y!5 y!5 d!6 b!7 y00)) (* (- (/ 1.0 4.0)) (* y!5 y!5 d!6 d!6 a00)) (* (- (/ 1.0 8.0)) (* y!5 y!5 d!6 b!7 b!7 a!8 a!8 a!8 a!8)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8 a!8)) (* (- (/ 1.0 4.0)) (* y!5 y!5 b!7 b!7 b!7 a!8 a!8 a!8 y00)) (* (/ 1.0 8.0) (* y!5 y!5 d!6 b!7 b!7 a!8 a!8 a!8 a00)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 a!8 a!8 a!8)) (* (/ 1.0 32.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 y00)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 b!7 b!7 a!8 a!8 a00)) (* (- (/ 1.0 64.0)) ?x906) (* (/ 1.0 32.0) ?x831) (* (- (/ 1.0 32.0)) ?x228) (* (/ 1.0 64.0) ?x736))))
 (let ((?x1067 (+ ?x192 (* (- 2.0) (* y!5 b!7)) (* 2.0 ?x162) (* (- 1.0) (* d!6 a00)))))
 (let (($x530 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x94 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x687 (and $x530 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x1067 0.0) (or (not (= ?x752 0.0)) (not (= ?x200 0.0))))))
 (let (($x479 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x296 (* (/ 1.0 32.0) (* y y y d d d b b a))))
 (let ((?x281 (* (/ 1.0 32.0) (* d d d b b a a))))
 (let ((?x265 (* (/ 1.0 4.0) (* y y b b a a a))))
 (let ((?x249 (* (- (/ 1.0 2.0)) (* y y d))))
 (let ((?x1115 (+ ?x249 ?x265 ?x281 ?x296 (* (- (/ 1.0 2.0)) (* y d d)) (* (- (/ 1.0 8.0)) (* d d d)) (* (/ 1.0 4.0) (* y y b b b b b)) (* (/ 3.0 4.0) (* y y b b b b a)) (* (/ 3.0 4.0) (* y y b b b a a)) (* (/ 1.0 4.0) (* y d b b b b b)) (* (/ 3.0 4.0) (* y d b b b b a)) (* (/ 3.0 4.0) (* y d b b b a a)) (* (/ 1.0 4.0) (* y d b b a a a)) (* (/ 1.0 16.0) (* d d b b b b b)) (* (/ 3.0 16.0) (* d d b b b b a)) (* (/ 3.0 16.0) (* d d b b b a a)) (* (/ 1.0 16.0) (* d d b b a a a)) (* (/ 1.0 32.0) (* d d d b b b b)) (* (/ 1.0 16.0) (* d d d b b b a)) (* (/ 1.0 32.0) (* y y y d d d b b b)) (* (/ 3.0 64.0) (* y y d d d d b b b)) (* (/ 3.0 64.0) (* y y d d d d b b a)) (* (/ 3.0 128.0) (* y d d d d d b b b)) (* (/ 3.0 128.0) (* y d d d d d b b a)) (* (/ 1.0 256.0) (* d d d d d d b b b)) (* (/ 1.0 256.0) (* d d d d d d b b a)))))
 (let ((?x141 (* b y00)))
 (let ((?x117 (* y b)))
 (let ((?x178 (* (- 1.0) ?x117)))
 (let ((?x111 (* d a)))
 (let ((?x145 (* (/ 1.0 2.0) ?x111)))
 (let (($x1130 (not (= (* (+ ?x145 ?x178 ?x141 (* (- (/ 1.0 2.0)) (* d a00))) ?x1115) 0.0))))
 (let ((?x397 (* (/ 1.0 64.0) (* y y y d d d d b b a a00))))
 (let ((?x412 (* (- (/ 1.0 32.0)) (* y y y d d d b b b a y00))))
 (let ((?x411 (* (/ 1.0 32.0) (* y y y y d d d b b b a))))
 (let ((?x409 (* (- (/ 1.0 64.0)) (* y y y d d d d b b a a))))
 (let ((?x398 (+ (* (/ 1.0 4.0) (* y y d d a)) (* (- (/ 1.0 2.0)) (* y y y d b)) (* (/ 1.0 2.0) (* y y d b y00)) (* (- (/ 1.0 4.0)) (* y y d d a00)) (* (- (/ 1.0 8.0)) (* y y d b b a a a a)) (* (/ 1.0 4.0) (* y y y b b b a a a)) (* (- (/ 1.0 4.0)) (* y y b b b a a a y00)) (* (/ 1.0 8.0) (* y y d b b a a a a00)) (* (- (/ 1.0 64.0)) (* d d d d b b a a a)) (* (/ 1.0 32.0) (* y d d d b b b a a)) (* (- (/ 1.0 32.0)) (* d d d b b b a a y00)) (* (/ 1.0 64.0) (* d d d d b b a a a00)) ?x409 ?x411 ?x412 ?x397)))
 (let (($x171 (= (+ ?x111 (* (- 2.0) ?x117) (* 2.0 ?x141) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x126 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x94 (* 2.0 (* y b00))) 0.0)))
 (and $x126 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x171 (or (not (= ?x398 0.0)) $x1130)))))))))))))))))))))) :qid k!33))
 ))
 (let (($x567 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x800 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x645 (+ (* (- (/ 1.0 2.0)) (* ?x800 ?x800 d)) (* (/ 1.0 4.0) (* ?x68 ?x68 ?x68 ?x800 ?x800 b b)) (* (/ 1.0 32.0) (* ?x68 ?x68 d d d b b)) (* (/ 1.0 32.0) (* ?x68 ?x800 ?x800 ?x800 d d d b b)))))
 (let ((?x48 (* a00 d)))
 (let ((?x738 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x303 (* y00 b)))
 (let ((?x628 (* (+ (* (/ 1.0 2.0) (* ?x68 d)) (* (- 1.0) (* ?x800 b)) ?x303 ?x738) ?x645)))
 (let ((?x296 (* (/ 1.0 32.0) (* y y y d d d b b a))))
 (let ((?x281 (* (/ 1.0 32.0) (* d d d b b a a))))
 (let ((?x265 (* (/ 1.0 4.0) (* y y b b a a a))))
 (let ((?x249 (* (- (/ 1.0 2.0)) (* y y d))))
 (let ((?x583 (* (+ ?x249 ?x265 ?x281 ?x296) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x303 ?x738))))
 (let ((?x117 (* y b)))
 (let ((?x136 (* (- 2.0) ?x117)))
 (let ((?x111 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let (($x212 (= (+ ?x94 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x212 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x111 ?x136 (* 2.0 ?x303) (* (- 1.0) ?x48)) 0.0) (or (not (= ?x583 0.0)) (not (= ?x628 0.0)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x714 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x296 (* (/ 1.0 32.0) (* y y y d d d b b a))))
 (let ((?x281 (* (/ 1.0 32.0) (* d d d b b a a))))
 (let ((?x265 (* (/ 1.0 4.0) (* y y b b a a a))))
 (let ((?x249 (* (- (/ 1.0 2.0)) (* y y d))))
 (let ((?x1115 (+ ?x249 ?x265 ?x281 ?x296 (* (- (/ 1.0 2.0)) (* y d d)) (* (- (/ 1.0 8.0)) (* d d d)) (* (/ 1.0 4.0) (* y y b b b b b)) (* (/ 3.0 4.0) (* y y b b b b a)) (* (/ 3.0 4.0) (* y y b b b a a)) (* (/ 1.0 4.0) (* y d b b b b b)) (* (/ 3.0 4.0) (* y d b b b b a)) (* (/ 3.0 4.0) (* y d b b b a a)) (* (/ 1.0 4.0) (* y d b b a a a)) (* (/ 1.0 16.0) (* d d b b b b b)) (* (/ 3.0 16.0) (* d d b b b b a)) (* (/ 3.0 16.0) (* d d b b b a a)) (* (/ 1.0 16.0) (* d d b b a a a)) (* (/ 1.0 32.0) (* d d d b b b b)) (* (/ 1.0 16.0) (* d d d b b b a)) (* (/ 1.0 32.0) (* y y y d d d b b b)) (* (/ 3.0 64.0) (* y y d d d d b b b)) (* (/ 3.0 64.0) (* y y d d d d b b a)) (* (/ 3.0 128.0) (* y d d d d d b b b)) (* (/ 3.0 128.0) (* y d d d d d b b a)) (* (/ 1.0 256.0) (* d d d d d d b b b)) (* (/ 1.0 256.0) (* d d d d d d b b a)))))
 (let ((?x141 (* b y00)))
 (let ((?x117 (* y b)))
 (let ((?x178 (* (- 1.0) ?x117)))
 (let ((?x111 (* d a)))
 (let ((?x145 (* (/ 1.0 2.0) ?x111)))
 (let (($x1130 (not (= (* (+ ?x145 ?x178 ?x141 (* (- (/ 1.0 2.0)) (* d a00))) ?x1115) 0.0))))
 (let ((?x397 (* (/ 1.0 64.0) (* y y y d d d d b b a a00))))
 (let ((?x412 (* (- (/ 1.0 32.0)) (* y y y d d d b b b a y00))))
 (let ((?x411 (* (/ 1.0 32.0) (* y y y y d d d b b b a))))
 (let ((?x409 (* (- (/ 1.0 64.0)) (* y y y d d d d b b a a))))
 (let ((?x398 (+ (* (/ 1.0 4.0) (* y y d d a)) (* (- (/ 1.0 2.0)) (* y y y d b)) (* (/ 1.0 2.0) (* y y d b y00)) (* (- (/ 1.0 4.0)) (* y y d d a00)) (* (- (/ 1.0 8.0)) (* y y d b b a a a a)) (* (/ 1.0 4.0) (* y y y b b b a a a)) (* (- (/ 1.0 4.0)) (* y y b b b a a a y00)) (* (/ 1.0 8.0) (* y y d b b a a a a00)) (* (- (/ 1.0 64.0)) (* d d d d b b a a a)) (* (/ 1.0 32.0) (* y d d d b b b a a)) (* (- (/ 1.0 32.0)) (* d d d b b b a a y00)) (* (/ 1.0 64.0) (* d d d d b b a a a00)) ?x409 ?x411 ?x412 ?x397)))
 (let (($x171 (= (+ ?x111 (* (- 2.0) ?x117) (* 2.0 ?x141) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x126 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x94 (* 2.0 (* y b00))) 0.0)))
 (let (($x1136 (and $x126 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x171 (or (not (= ?x398 0.0)) $x1130))))
 (let ((?x800 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x645 (+ (* (- (/ 1.0 2.0)) (* ?x800 ?x800 d)) (* (/ 1.0 4.0) (* ?x68 ?x68 ?x68 ?x800 ?x800 b b)) (* (/ 1.0 32.0) (* ?x68 ?x68 d d d b b)) (* (/ 1.0 32.0) (* ?x68 ?x800 ?x800 ?x800 d d d b b)))))
 (let ((?x48 (* a00 d)))
 (let ((?x738 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x303 (* y00 b)))
 (let ((?x628 (* (+ (* (/ 1.0 2.0) (* ?x68 d)) (* (- 1.0) (* ?x800 b)) ?x303 ?x738) ?x645)))
 (let (($x209 (not (= (* (+ ?x249 ?x265 ?x281 ?x296) (+ ?x145 ?x178 ?x303 ?x738)) 0.0))))
 (let (($x212 (= (+ ?x94 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x641 (and $x212 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x111 (* (- 2.0) ?x117) (* 2.0 ?x303) (* (- 1.0) ?x48)) 0.0) (or $x209 (not (= ?x628 0.0))))))
 (rewrite (= $x641 $x1136))))))))))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x70 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x68 (+ a b)))
 (let ((?x79 (+ (* (- 1.0) ?x51 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x53 ?x53 ?x70 ?x70) (* ?x68 ?x68 ?x53 ?x53 ?x51 ?x51 ?x51) (* ?x68 ?x53 ?x53 ?x51 ?x51 ?x51 ?x70 ?x70 ?x70))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x74 (- (+ (- (* ?x68 ?x51) (* 2.0 ?x53 ?x70)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x64 (+ (* (- 1.0) ?x51 y y) (* a a a ?x53 ?x53 y y) (* a a ?x53 ?x53 ?x51 ?x51 ?x51) (* a ?x53 ?x53 ?x51 ?x51 ?x51 y y y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x64) 0.0)) (not (= (* ?x74 ?x79) 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x326 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x800 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x645 (+ (* (- (/ 1.0 2.0)) (* ?x800 ?x800 d)) (* (/ 1.0 4.0) (* ?x68 ?x68 ?x68 ?x800 ?x800 b b)) (* (/ 1.0 32.0) (* ?x68 ?x68 d d d b b)) (* (/ 1.0 32.0) (* ?x68 ?x800 ?x800 ?x800 d d d b b)))))
 (let ((?x48 (* a00 d)))
 (let ((?x738 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x303 (* y00 b)))
 (let ((?x628 (* (+ (* (/ 1.0 2.0) (* ?x68 d)) (* (- 1.0) (* ?x800 b)) ?x303 ?x738) ?x645)))
 (let ((?x296 (* (/ 1.0 32.0) (* y y y d d d b b a))))
 (let ((?x281 (* (/ 1.0 32.0) (* d d d b b a a))))
 (let ((?x265 (* (/ 1.0 4.0) (* y y b b a a a))))
 (let ((?x249 (* (- (/ 1.0 2.0)) (* y y d))))
 (let ((?x583 (* (+ ?x249 ?x265 ?x281 ?x296) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x303 ?x738))))
 (let ((?x117 (* y b)))
 (let ((?x136 (* (- 2.0) ?x117)))
 (let ((?x111 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let (($x212 (= (+ ?x94 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x641 (and $x212 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x111 ?x136 (* 2.0 ?x303) (* (- 1.0) ?x48)) 0.0) (or (not (= ?x583 0.0)) (not (= ?x628 0.0))))))
 (let ((?x51 (/ d 2.0)))
 (let ((?x70 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x79 (+ (* (- 1.0) ?x51 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x53 ?x53 ?x70 ?x70) (* ?x68 ?x68 ?x53 ?x53 ?x51 ?x51 ?x51) (* ?x68 ?x53 ?x53 ?x51 ?x51 ?x51 ?x70 ?x70 ?x70))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x74 (- (+ (- (* ?x68 ?x51) (* 2.0 ?x53 ?x70)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x64 (+ (* (- 1.0) ?x51 y y) (* a a a ?x53 ?x53 y y) (* a a ?x53 ?x53 ?x51 ?x51 ?x51) (* a ?x53 ?x53 ?x51 ?x51 ?x51 y y y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x84 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x64) 0.0)) (not (= (* ?x74 ?x79) 0.0))))))
 (rewrite (= $x84 $x641))))))))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x340 (mp (mp @x86 (quant-intro (proof-bind ?x326) (= $x85 $x567)) $x567) (quant-intro (proof-bind ?x714) (= $x567 $x479)) $x479)))
 (let ((@x342 (mp (mp~ @x340 (sk (~ $x479 $x687)) $x687) (rewrite (= $x687 $x950)) $x950)))
 (let ((@x341 (mp (and-elim @x342 $x417) @x207 $x654)))
 (let ((@x396 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x654) $x377)) @x341 $x377)))
 (let (($x331 (<= ?x553 0.0)))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x654) $x331)) @x341 $x331)))
 (let ((@x1047 (unit-resolution ((_ th-lemma arith) (or (not $x331) (not $x377) $x193)) @x255 @x396 (hypothesis (not $x193)) false)))
 (let (($x277 (= 0.0 ?x267)))
 (let (($x554 (not $x277)))
 (let ((@x1075 (monotonicity (symm (commutativity (= $x277 $x270)) (= $x270 $x277)) (= $x276 $x554))))
 (let ((?x311 (* b!7 y!5)))
 (let ((?x434 (+ (* (/ 1.0 2.0) (* a00 d!6)) (* (- (/ 1.0 2.0)) ?x192) (* (- 1.0) ?x211) ?x311)))
 (let (($x275 (<= ?x434 0.0)))
 (let ((@x532 (lemma ((_ th-lemma arith) (hypothesis (not $x275)) @x396 false) $x275)))
 (let ((?x898 (+ ?x902 ?x900 ?x433 ?x427 ?x349 ?x279 ?x826 ?x153 ?x343 ?x478 ?x531 ?x393 ?x185 ?x122 ?x394 ?x455 ?x373 ?x879 ?x887 ?x562 ?x321 ?x186 ?x90 ?x636 ?x897 ?x137)))
 (let (($x908 (>= ?x898 0.0)))
 (let (($x245 (not $x908)))
 (let (($x907 (= 0.0 ?x898)))
 (let (($x333 (not $x907)))
 (let ((@x383 (hypothesis $x972)))
 (let (($x196 (= ?x898 0.0)))
 (let (($x392 (not $x196)))
 (let ((@x849 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x392 $x312)) @x383 $x392) (symm (hypothesis $x907) $x196) false)))
 (let ((@x948 (lemma @x849 (or $x333 $x312))))
 (let (($x147 (<= ?x898 0.0)))
 (let (($x195 (<= ?x142 0.0)))
 (let (($x655 (not $x195)))
 (let (($x886 (>= ?x142 0.0)))
 (let ((@x446 (commutativity (= (= 0.0 ?x142) $x312))))
 (let (($x878 (= 0.0 ?x142)))
 (let (($x451 (not $x878)))
 (let (($x105 (not $x886)))
 (let ((@x98 (hypothesis $x105)))
 (let ((@x372 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x451 $x886)) @x98 $x451) (monotonicity @x446 (= $x451 $x972)) $x972)))
 (let (($x833 (>= ?x434 0.0)))
 (let ((@x551 (lemma ((_ th-lemma arith) @x255 (hypothesis (not $x833)) false) $x833)))
 (let ((@x248 (unit-resolution ((_ th-lemma arith) (or (not $x833) $x908 $x886)) @x98 (hypothesis $x245) @x551 false)))
 (let (($x210 (not $x147)))
 (let ((@x307 (hypothesis $x210)))
 (let ((@x1127 (unit-resolution ((_ th-lemma arith) (or (not $x275) $x147 $x886)) @x98 @x307 @x532 false)))
 (let ((@x113 ((_ th-lemma arith triangle-eq) (or $x907 $x210 $x245))))
 (let ((@x1065 (unit-resolution @x113 (unit-resolution (lemma @x1127 (or $x147 $x886)) @x98 $x147) (unit-resolution (lemma @x248 (or $x908 $x886)) @x98 $x908) $x907)))
 (let ((@x175 (mp @x383 (monotonicity (symm @x446 (= $x312 $x878)) (= $x972 $x451)) $x451)))
 (let ((@x689 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x878 $x655 $x105)) @x175 (lemma (unit-resolution @x948 @x1065 @x372 false) $x886) $x655)))
 (let ((@x577 (unit-resolution ((_ th-lemma arith) (or (not $x833) $x147 $x195)) (hypothesis $x655) @x307 @x551 false)))
 (let ((@x528 (unit-resolution @x113 (unit-resolution (lemma @x577 (or $x147 $x195)) @x689 $x147) (unit-resolution @x948 @x383 $x333) $x245)))
 (let ((@x581 (unit-resolution ((_ th-lemma arith) (or (not $x275) $x908 $x195)) @x689 @x528 @x532 false)))
 (let ((@x215 (mp (unit-resolution (and-elim @x342 $x319) (lemma @x581 $x312) $x276) @x1075 $x554)))
 (let ((@x706 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x277 $x357 (not $x193))) @x215 (or $x357 (not $x193)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x331) (not $x377) $x151)) @x255 @x396 (unit-resolution @x706 (lemma @x1047 $x193) $x357) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      34
 :arith-eq-adapter               38
 :arith-bound-propagations-cheap 26
 :arith-conflicts                42
 :arith-diseq                    45
 :arith-fixed-eqs                1
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    36
 :arith-make-feasible            35
 :arith-max-columns              73
 :arith-max-rows                 8
 :arith-nla-explanations         12
 :arith-nla-lemmas               40
 :arith-propagations             26
 :arith-upper                    37
 :conflicts                      11
 :decisions                      55
 :del-clause                     124
 :final-checks                   28
 :max-memory                     1.96
 :memory                         1.13
 :mk-bool-var                    156
 :mk-clause                      160
 :num-allocs                     2128527
 :num-checks                     1
 :propagations                   56
 :rlimit-count                   7026
 :time                           0.02
 :total-time                     0.02)
