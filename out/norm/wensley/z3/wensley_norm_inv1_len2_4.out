unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1360 (to_real d!1)))
 (let ((?x850 (to_real a!3)))
 (let ((?x809 (to_real b!2)))
 (let ((?x62 (to_real d00)))
 (let ((?x871 (to_real y!0)))
 (let ((?x64 (to_real b00)))
 (let ((?x312 (* (/ 1.0 2.0) (* ?x64 (to_real y00) ?x850 ?x850 ?x850 ?x1360 ?x1360))))
 (let ((?x1146 (* (- (/ 1.0 2.0)) (* ?x64 ?x850 ?x850 ?x850 ?x871 ?x1360 ?x1360))))
 (let ((?x318 (* (/ 1.0 8.0) (* ?x62 ?x850 ?x871 ?x871 ?x871 ?x1360 ?x1360 ?x1360))))
 (let ((?x311 (* (- (/ 1.0 8.0)) (* (to_real a00) ?x62 ?x871 ?x871 ?x871 ?x1360 ?x1360 ?x1360))))
 (let ((?x310 (* (/ 1.0 4.0) (* ?x64 (to_real y00) ?x871 ?x871 ?x871 ?x1360 ?x1360 ?x1360))))
 (let ((?x308 (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x850 ?x850 ?x850 ?x1360 ?x1360))))
 (let ((?x168 (* (- (/ 1.0 4.0)) (* ?x64 ?x871 ?x871 ?x871 ?x871 ?x1360 ?x1360 ?x1360))))
 (let ((?x1451 (* (/ 1.0 4.0) (* ?x62 ?x850 ?x850 ?x850 ?x850 ?x1360 ?x1360))))
 (let ((?x340 (+ (* (/ 1.0 4.0) (* ?x62 ?x809 ?x809 ?x809 ?x809 ?x1360 ?x1360)) (* (- (/ 1.0 2.0)) (* ?x64 ?x871 ?x871 ?x871 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 4.0)) (* ?x64 ?x809 ?x850 ?x850 ?x1360 ?x1360 ?x1360)) ?x1451 (* (/ 3.0 16.0) (* ?x62 ?x809 ?x871 ?x871 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 1.0 4.0)) (* ?x64 ?x850 ?x850 ?x850 ?x1360 ?x1360 ?x1360)) ?x168 (* (- (/ 3.0 2.0)) (* ?x64 ?x809 ?x809 ?x850 ?x871 ?x1360 ?x1360)) (* (/ 1.0 8.0) (* ?x62 ?x809 ?x871 ?x871 ?x871 ?x1360 ?x1360 ?x1360)) (* (/ 1.0 64.0) (* ?x62 ?x850 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) (* (/ 1.0 32.0) (* ?x64 (to_real y00) ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) ?x308 ?x310 (* (/ 3.0 32.0) (* ?x62 ?x850 ?x871 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 1.0 64.0)) (* (to_real a00) ?x62 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 16.0)) (* (to_real a00) ?x62 ?x871 ?x871 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 32.0)) (* (to_real a00) ?x62 ?x871 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) (* (/ 3.0 16.0) (* ?x64 (to_real y00) ?x871 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) (* (/ 1.0 64.0) (* ?x62 ?x809 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) ?x311 (* (/ 3.0 32.0) (* ?x62 ?x809 ?x871 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) (* (/ 3.0 16.0) (* ?x62 ?x850 ?x871 ?x871 ?x1360 ?x1360 ?x1360 ?x1360)) ?x318 (* (/ 3.0 8.0) (* ?x64 (to_real y00) ?x871 ?x871 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 4.0)) (* (to_real a00) ?x62 ?x809 ?x850 ?x850 ?x1360 ?x1360)) (* (- (/ 1.0 2.0)) (* ?x64 ?x809 ?x809 ?x809 ?x871 ?x1360 ?x1360)) (* (/ 1.0 2.0) (* ?x64 (to_real y00) ?x809 ?x809 ?x809 ?x1360 ?x1360)) (* (- (/ 3.0 4.0)) (* ?x64 ?x809 ?x809 ?x850 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 4.0)) (* (to_real a00) ?x62 ?x809 ?x809 ?x850 ?x1360 ?x1360)) (* (- (/ 1.0 4.0)) (* ?x64 ?x809 ?x809 ?x809 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 2.0)) (* ?x64 ?x809 ?x850 ?x850 ?x871 ?x1360 ?x1360)) (* (/ 3.0 2.0) (* ?x64 (to_real y00) ?x809 ?x850 ?x850 ?x1360 ?x1360)) (* (/ 3.0 2.0) (* ?x64 (to_real y00) ?x809 ?x809 ?x850 ?x1360 ?x1360)) (* (- (/ 1.0 64.0)) (* ?x64 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) ?x1146 (* (- (/ 1.0 8.0)) (* ?x64 ?x871 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) ?x312 (* (- (/ 3.0 8.0)) (* ?x64 ?x871 ?x871 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x809 ?x809 ?x809 ?x1360 ?x1360)) (* ?x62 ?x809 ?x850 ?x850 ?x850 ?x1360 ?x1360) (* (/ 3.0 2.0) (* ?x62 ?x809 ?x809 ?x850 ?x850 ?x1360 ?x1360)) (* ?x62 ?x809 ?x809 ?x809 ?x850 ?x1360 ?x1360))))
 (let (($x1077 (>= ?x340 0.0)))
 (let ((?x925 (* a!3 d!1)))
 (let ((?x154 (+ (* 2 (* y00 b!2)) (* (- 2) (* y!0 b!2)) ?x925 (* (- 1) (* a00 d!1)))))
 (let (($x1196 (>= ?x154 0)))
 (let (($x421 (= 0 ?x154)))
 (let ((@x738 (symm (commutativity (= $x421 (= ?x154 0))) (= (= ?x154 0) $x421))))
 (let (($x1078 (= ?x154 0)))
 (let ((?x316 (+ ?x1451 ?x168 ?x308 ?x310 ?x311 ?x318 ?x1146 ?x312)))
 (let (($x368 (= ?x316 0.0)))
 (let (($x1168 (not $x368)))
 (let (($x153 (or $x1168 (not (= ?x340 0.0)))))
 (let ((?x1129 (+ (* d00 b!2) (* (- 1) (* b00 d!1)))))
 (let (($x370 (= ?x1129 0)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let ((?x35 (* a00 d00)))
 (let ((?x371 (+ ?x35 ?x113 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3)))))
 (let (($x507 (= ?x371 0)))
 (let (($x346 (and $x507 $x370 $x1078 $x153)))
 (let ((?x639 (* (- (/ 1.0 8.0)) (* ?x1360 ?x1360 ?x1360 ?x850 ?x62 ?x871 ?x871 ?x871))))
 (let ((?x625 (* (- (/ 1.0 4.0)) (* ?x1360 ?x1360 ?x1360 ?x64 ?x871 ?x871 ?x871 (to_real y00)))))
 (let ((?x612 (* (/ 1.0 8.0) (* ?x1360 ?x1360 ?x1360 (to_real a00) ?x62 ?x871 ?x871 ?x871))))
 (let ((?x626 (* (- (/ 1.0 4.0)) (* ?x1360 ?x1360 ?x850 ?x850 ?x850 ?x850 ?x62))))
 (let ((?x607 (* (/ 1.0 4.0) (* ?x1360 ?x1360 ?x1360 ?x64 ?x871 ?x871 ?x871 ?x871))))
 (let ((?x580 (* (- (/ 1.0 2.0)) (* ?x1360 ?x1360 ?x850 ?x850 ?x850 ?x64 (to_real y00)))))
 (let ((?x1317 (* (/ 1.0 2.0) (* ?x1360 ?x1360 ?x850 ?x850 ?x850 ?x64 ?x871))))
 (let ((?x317 (* (/ 1.0 4.0) (* ?x1360 ?x1360 ?x850 ?x850 ?x850 (to_real a00) ?x62))))
 (let ((?x572 (+ ?x317 ?x1317 (* (/ 3.0 4.0) (* ?x1360 ?x1360 ?x850 ?x850 (to_real a00) ?x62 ?x809)) (* (/ 3.0 4.0) (* ?x1360 ?x1360 ?x850 (to_real a00) ?x62 ?x809 ?x809)) ?x580 (* (/ 1.0 4.0) (* ?x1360 ?x1360 (to_real a00) ?x62 ?x809 ?x809 ?x809)) ?x607 ?x626 ?x612 ?x625 ?x639 (* (/ 1.0 4.0) (* ?x1360 ?x1360 ?x1360 ?x850 ?x850 ?x850 ?x64)) (* (/ 3.0 4.0) (* ?x1360 ?x1360 ?x1360 ?x850 ?x850 ?x64 ?x809)) (* (/ 3.0 4.0) (* ?x1360 ?x1360 ?x1360 ?x850 ?x64 ?x809 ?x809)) (* (/ 1.0 4.0) (* ?x1360 ?x1360 ?x1360 ?x64 ?x809 ?x809 ?x809)) (* (/ 3.0 2.0) (* ?x1360 ?x1360 ?x850 ?x850 ?x64 ?x871 ?x809)) (* (/ 3.0 2.0) (* ?x1360 ?x1360 ?x850 ?x64 ?x871 ?x809 ?x809)) (* (/ 1.0 2.0) (* ?x1360 ?x1360 ?x64 ?x871 ?x809 ?x809 ?x809)) (* (- (/ 3.0 2.0)) (* ?x1360 ?x1360 ?x850 ?x850 ?x64 (to_real y00) ?x809)) (* (- (/ 3.0 2.0)) (* ?x1360 ?x1360 ?x850 ?x64 (to_real y00) ?x809 ?x809)) (* (- (/ 1.0 2.0)) (* ?x1360 ?x1360 ?x64 (to_real y00) ?x809 ?x809 ?x809)) (* (/ 1.0 64.0) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x64)) (* (/ 1.0 8.0) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x64 ?x871)) (* (/ 3.0 8.0) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x64 ?x871 ?x871)) (* (/ 1.0 2.0) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x64 ?x871 ?x871 ?x871)) (* (- 1.0) (* ?x1360 ?x1360 ?x850 ?x850 ?x850 ?x62 ?x809)) (* (- (/ 3.0 2.0)) (* ?x1360 ?x1360 ?x850 ?x850 ?x62 ?x809 ?x809)) (* (- 1.0) (* ?x1360 ?x1360 ?x850 ?x62 ?x809 ?x809 ?x809)) (* (- (/ 1.0 4.0)) (* ?x1360 ?x1360 ?x62 ?x809 ?x809 ?x809 ?x809)) (* (/ 1.0 64.0) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 (to_real a00) ?x62)) (* (/ 3.0 32.0) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 (to_real a00) ?x62 ?x871)) (* (/ 3.0 16.0) (* ?x1360 ?x1360 ?x1360 ?x1360 (to_real a00) ?x62 ?x871 ?x871)) (* (- (/ 1.0 32.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x64 (to_real y00))) (* (- (/ 3.0 16.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x64 ?x871 (to_real y00))) (* (- (/ 3.0 8.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x64 ?x871 ?x871 (to_real y00))) (* (- (/ 1.0 64.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x850 ?x62)) (* (- (/ 1.0 64.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x62 ?x809)) (* (- (/ 3.0 32.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x850 ?x62 ?x871)) (* (- (/ 3.0 32.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x62 ?x871 ?x809)) (* (- (/ 3.0 16.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x850 ?x62 ?x871 ?x871)) (* (- (/ 3.0 16.0)) (* ?x1360 ?x1360 ?x1360 ?x1360 ?x62 ?x871 ?x871 ?x809)) (* (- (/ 1.0 8.0)) (* ?x1360 ?x1360 ?x1360 ?x62 ?x871 ?x871 ?x871 ?x809)))))
 (let (($x578 (or (not (= (+ ?x317 ?x1317 ?x580 ?x607 ?x626 ?x612 ?x625 ?x639) 0.0)) (not (= ?x572 0.0)))))
 (let ((?x434 (+ ?x925 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x1174 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x113 (* 2 (* y!0 b00))) 0)))
 (let (($x1115 (and $x1174 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x434 0) $x578)))
 (let (($x181 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x171 (to_real b)))
 (let ((?x65 (to_real y)))
 (let ((?x62 (to_real d00)))
 (let ((?x56 (to_real d)))
 (let ((?x1476 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real b00) ?x65 ?x65 (to_real y00)))))
 (let ((?x1475 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real b00) ?x65 (to_real y00)))))
 (let ((?x1474 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 (to_real b00) (to_real y00)))))
 (let ((?x1470 (* (- (/ 3.0 2.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x62 ?x171 ?x171))))
 (let ((?x1469 (* (- 1.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x62 ?x171))))
 (let ((?x1468 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 (to_real b00) (to_real y00) ?x171 ?x171 ?x171))))
 (let ((?x68 (to_real y00)))
 (let ((?x64 (to_real b00)))
 (let ((?x60 (to_real a)))
 (let ((?x397 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x396 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x64 ?x65 ?x65 ?x65 ?x68))))
 (let ((?x323 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a00) ?x62 ?x65 ?x65 ?x65))))
 (let ((?x395 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x64 ?x65 ?x65 ?x65 ?x65))))
 (let ((?x394 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x64 ?x68))))
 (let ((?x207 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x64 ?x65))))
 (let ((?x393 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x60 ?x60 (to_real a00) ?x62))))
 (let ((?x1484 (+ ?x393 ?x207 (* (/ 3.0 4.0) (* ?x56 ?x56 ?x60 ?x60 (to_real a00) ?x62 ?x171)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x60 (to_real a00) ?x62 ?x171 ?x171)) ?x394 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a00) ?x62 ?x171 ?x171 ?x171)) ?x262 ?x395 ?x323 ?x396 ?x397 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x64)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x64 ?x171)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x171 ?x171)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x64 ?x171 ?x171 ?x171)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x60 ?x60 ?x64 ?x65 ?x171)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x60 ?x64 ?x65 ?x171 ?x171)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x64 ?x65 ?x171 ?x171 ?x171)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x60 ?x60 ?x64 ?x68 ?x171)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x60 ?x64 ?x68 ?x171 ?x171)) ?x1468 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x64 ?x65)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x64 ?x65 ?x65)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x64 ?x65 ?x65 ?x65)) ?x1469 ?x1470 (* (- 1.0) (* ?x56 ?x56 ?x60 ?x62 ?x171 ?x171 ?x171)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62 ?x171 ?x171 ?x171 ?x171)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 (to_real a00) ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real a00) ?x62 ?x65)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a00) ?x62 ?x65 ?x65)) ?x1474 ?x1475 ?x1476 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x171)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x65)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x65 ?x171)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x65 ?x65)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x65 ?x65 ?x171)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x65 ?x65 ?x65 ?x171)))))
 (let (($x180 (or (not (= (+ ?x393 ?x207 ?x394 ?x262 ?x395 ?x323 ?x396 ?x397) 0.0)) (not (= ?x1484 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x182 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let ((?x35 (* a00 d00)))
 (let (($x145 (= (+ ?x35 (* (- 1) (* a d00)) ?x113 (* 2 (* y b00))) 0)))
 (and $x145 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x182 0) $x180)))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x1343 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x65 (to_real y)))
 (let ((?x573 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x171 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x1414 (+ ?x60 ?x171)))
 (let ((?x56 (to_real d)))
 (let ((?x62 (to_real d00)))
 (let ((?x905 (* ?x62 ?x56 ?x56 ?x56 ?x1414 ?x573 ?x573 ?x573)))
 (let ((?x68 (to_real y00)))
 (let ((?x64 (to_real b00)))
 (let ((?x1130 (* ?x64 ?x68 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)))
 (let ((?x1331 (+ (* (/ 1.0 4.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 2.0) (* ?x64 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x573)) (* (- (/ 1.0 2.0)) (* ?x64 ?x68 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 4.0) (* ?x64 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573 ?x573)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 8.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)) (* (- (/ 1.0 4.0)) ?x1130) (* (- (/ 1.0 8.0)) ?x905))))
 (let ((?x1291 (+ (* (/ 1.0 4.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 2.0) (* ?x64 ?x65 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x64 ?x68 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x64 ?x65 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x56 ?x60 ?x60 ?x60 ?x60)) (* (/ 1.0 8.0) (* (to_real a00) ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x64 ?x68 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 8.0)) (* ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56 ?x60)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x598 (= ?x592 0)))
 (let ((?x485 (* d00 a)))
 (let ((?x822 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x485)))
 (and (= ?x822 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x598 (or (not (= ?x1291 0.0)) (not (= ?x1331 0.0))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x258 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x171 (to_real b)))
 (let ((?x65 (to_real y)))
 (let ((?x62 (to_real d00)))
 (let ((?x56 (to_real d)))
 (let ((?x1476 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real b00) ?x65 ?x65 (to_real y00)))))
 (let ((?x1475 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real b00) ?x65 (to_real y00)))))
 (let ((?x1474 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 (to_real b00) (to_real y00)))))
 (let ((?x1470 (* (- (/ 3.0 2.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x62 ?x171 ?x171))))
 (let ((?x1469 (* (- 1.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x62 ?x171))))
 (let ((?x1468 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 (to_real b00) (to_real y00) ?x171 ?x171 ?x171))))
 (let ((?x68 (to_real y00)))
 (let ((?x64 (to_real b00)))
 (let ((?x60 (to_real a)))
 (let ((?x397 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x396 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x64 ?x65 ?x65 ?x65 ?x68))))
 (let ((?x323 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a00) ?x62 ?x65 ?x65 ?x65))))
 (let ((?x395 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x262 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x64 ?x65 ?x65 ?x65 ?x65))))
 (let ((?x394 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x64 ?x68))))
 (let ((?x207 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x64 ?x65))))
 (let ((?x393 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x60 ?x60 (to_real a00) ?x62))))
 (let ((?x1484 (+ ?x393 ?x207 (* (/ 3.0 4.0) (* ?x56 ?x56 ?x60 ?x60 (to_real a00) ?x62 ?x171)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x60 (to_real a00) ?x62 ?x171 ?x171)) ?x394 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a00) ?x62 ?x171 ?x171 ?x171)) ?x262 ?x395 ?x323 ?x396 ?x397 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x64)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x64 ?x171)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x171 ?x171)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x64 ?x171 ?x171 ?x171)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x60 ?x60 ?x64 ?x65 ?x171)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x60 ?x64 ?x65 ?x171 ?x171)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x64 ?x65 ?x171 ?x171 ?x171)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x60 ?x60 ?x64 ?x68 ?x171)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x60 ?x64 ?x68 ?x171 ?x171)) ?x1468 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x64 ?x65)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x64 ?x65 ?x65)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x64 ?x65 ?x65 ?x65)) ?x1469 ?x1470 (* (- 1.0) (* ?x56 ?x56 ?x60 ?x62 ?x171 ?x171 ?x171)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62 ?x171 ?x171 ?x171 ?x171)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 (to_real a00) ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real a00) ?x62 ?x65)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a00) ?x62 ?x65 ?x65)) ?x1474 ?x1475 ?x1476 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x171)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x65)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x65 ?x171)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x65 ?x65)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x65 ?x65 ?x171)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x65 ?x65 ?x65 ?x171)))))
 (let (($x180 (or (not (= (+ ?x393 ?x207 ?x394 ?x262 ?x395 ?x323 ?x396 ?x397) 0.0)) (not (= ?x1484 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x182 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let ((?x35 (* a00 d00)))
 (let (($x145 (= (+ ?x35 (* (- 1) (* a d00)) ?x113 (* 2 (* y b00))) 0)))
 (let (($x1491 (and $x145 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x182 0) $x180)))
 (let ((?x573 (+ ?x65 (* (/ 1.0 2.0) ?x56))))
 (let ((?x1414 (+ ?x60 ?x171)))
 (let ((?x905 (* ?x62 ?x56 ?x56 ?x56 ?x1414 ?x573 ?x573 ?x573)))
 (let ((?x1331 (+ (* (/ 1.0 4.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 2.0) (* ?x64 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x573)) (* (- (/ 1.0 2.0)) (* ?x64 ?x68 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 4.0) (* ?x64 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573 ?x573)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 8.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)) (* (- (/ 1.0 4.0)) (* ?x64 ?x68 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)) (* (- (/ 1.0 8.0)) ?x905))))
 (let ((?x1291 (+ (* (/ 1.0 4.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 2.0) (* ?x64 ?x65 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x64 ?x68 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x64 ?x65 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x56 ?x60 ?x60 ?x60 ?x60)) (* (/ 1.0 8.0) (* (to_real a00) ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x64 ?x68 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 8.0)) (* ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56 ?x60)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x598 (= ?x592 0)))
 (let ((?x485 (* d00 a)))
 (let (($x594 (= (+ (* 2 ?x112) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x485) 0)))
 (let (($x504 (and $x594 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x598 (or (not (= ?x1291 0.0)) (not (= ?x1331 0.0))))))
 (rewrite (= $x504 $x1491)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x892 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x65 (to_real y)))
 (let ((?x573 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x171 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x1414 (+ ?x60 ?x171)))
 (let ((?x56 (to_real d)))
 (let ((?x62 (to_real d00)))
 (let ((?x905 (* ?x62 ?x56 ?x56 ?x56 ?x1414 ?x573 ?x573 ?x573)))
 (let ((?x68 (to_real y00)))
 (let ((?x64 (to_real b00)))
 (let ((?x1130 (* ?x64 ?x68 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)))
 (let ((?x913 (+ (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 2.0)) (* ?x64 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x573)) (* (/ 1.0 2.0) (* ?x64 ?x68 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 4.0)) (* ?x64 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573 ?x573)) (* (/ 1.0 4.0) (* ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)) (* (/ 1.0 4.0) ?x1130) (* (/ 1.0 8.0) ?x905))))
 (let ((?x1277 (+ (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x64 ?x65 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 2.0) (* ?x64 ?x68 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x64 ?x65 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x62 ?x56 ?x56 ?x60 ?x60 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x64 ?x68 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56 ?x60)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x598 (= ?x592 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let (($x530 (= (+ ?x113 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x530 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x598 (or (not (= ?x1277 0.0)) (not (= ?x913 0.0))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1224 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x65 (to_real y)))
 (let ((?x573 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x171 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x1414 (+ ?x60 ?x171)))
 (let ((?x56 (to_real d)))
 (let ((?x62 (to_real d00)))
 (let ((?x905 (* ?x62 ?x56 ?x56 ?x56 ?x1414 ?x573 ?x573 ?x573)))
 (let ((?x68 (to_real y00)))
 (let ((?x64 (to_real b00)))
 (let ((?x1130 (* ?x64 ?x68 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)))
 (let ((?x1331 (+ (* (/ 1.0 4.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 2.0) (* ?x64 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x573)) (* (- (/ 1.0 2.0)) (* ?x64 ?x68 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 4.0) (* ?x64 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573 ?x573)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x1414)) (* (/ 1.0 8.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)) (* (- (/ 1.0 4.0)) ?x1130) (* (- (/ 1.0 8.0)) ?x905))))
 (let ((?x1291 (+ (* (/ 1.0 4.0) (* (to_real a00) ?x62 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 2.0) (* ?x64 ?x65 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x64 ?x68 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x64 ?x65 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x56 ?x60 ?x60 ?x60 ?x60)) (* (/ 1.0 8.0) (* (to_real a00) ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x64 ?x68 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (- (/ 1.0 8.0)) (* ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56 ?x60)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x598 (= ?x592 0)))
 (let ((?x485 (* d00 a)))
 (let ((?x822 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x485)))
 (let (($x504 (and (= ?x822 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x598 (or (not (= ?x1291 0.0)) (not (= ?x1331 0.0))))))
 (let ((?x913 (+ (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 2.0)) (* ?x64 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x573)) (* (/ 1.0 2.0) (* ?x64 ?x68 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 4.0)) (* ?x64 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573 ?x573)) (* (/ 1.0 4.0) (* ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)) (* (/ 1.0 4.0) ?x1130) (* (/ 1.0 8.0) ?x905))))
 (let ((?x1277 (+ (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x64 ?x65 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 2.0) (* ?x64 ?x68 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x64 ?x65 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x62 ?x56 ?x56 ?x60 ?x60 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x64 ?x68 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56 ?x60)))))
 (let ((?x35 (* a00 d00)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let (($x588 (and (= (+ ?x113 ?x35 (* 2 (* b00 y)) (* (- 1) ?x485)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x598 (or (not (= ?x1277 0.0)) (not (= ?x913 0.0))))))
 (rewrite (= $x588 $x504)))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x65 (to_real y)))
 (let ((?x86 (+ ?x65 ?x58)))
 (let ((?x62 (to_real d00)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x68 (to_real y00)))
 (let ((?x64 (to_real b00)))
 (let ((?x61 (to_real a00)))
 (let ((?x43 (- 1)))
 (let ((?x59 (to_real ?x43)))
 (let ((?x88 (- (* ?x59 ?x84 ?x84 ?x84 ?x61 ?x58 ?x58 ?x62) (* ?x57 ?x84 ?x84 ?x84 ?x64 ?x58 ?x58 ?x86))))
 (let ((?x92 (- (+ ?x88 (* ?x57 ?x84 ?x84 ?x84 ?x64 ?x58 ?x58 ?x68)) (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x86 ?x86 ?x86 ?x86))))
 (let ((?x96 (- (+ ?x92 (* ?x84 ?x84 ?x84 ?x84 ?x58 ?x58 ?x62)) (* ?x61 ?x58 ?x58 ?x58 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x99 (+ ?x96 (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x86 ?x86 ?x86 ?x68) (* ?x84 ?x58 ?x58 ?x58 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x60 (to_real a)))
 (let ((?x67 (- (* ?x59 ?x60 ?x60 ?x60 ?x61 ?x58 ?x58 ?x62) (* ?x57 ?x60 ?x60 ?x60 ?x64 ?x58 ?x58 ?x65))))
 (let ((?x72 (- (+ ?x67 (* ?x57 ?x60 ?x60 ?x60 ?x64 ?x58 ?x58 ?x68)) (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x65 ?x65 ?x65 ?x65))))
 (let ((?x76 (- (+ ?x72 (* ?x60 ?x60 ?x60 ?x60 ?x58 ?x58 ?x62)) (* ?x61 ?x58 ?x58 ?x58 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x79 (+ ?x76 (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x65 ?x65 ?x65 ?x68) (* ?x60 ?x58 ?x58 ?x58 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x79 ?x80)) (not (= ?x99 ?x80)))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x606 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x65 (to_real y)))
 (let ((?x573 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x171 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x1414 (+ ?x60 ?x171)))
 (let ((?x56 (to_real d)))
 (let ((?x62 (to_real d00)))
 (let ((?x905 (* ?x62 ?x56 ?x56 ?x56 ?x1414 ?x573 ?x573 ?x573)))
 (let ((?x68 (to_real y00)))
 (let ((?x64 (to_real b00)))
 (let ((?x1130 (* ?x64 ?x68 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)))
 (let ((?x913 (+ (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 2.0)) (* ?x64 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x573)) (* (/ 1.0 2.0) (* ?x64 ?x68 ?x56 ?x56 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 4.0)) (* ?x64 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573 ?x573)) (* (/ 1.0 4.0) (* ?x62 ?x56 ?x56 ?x1414 ?x1414 ?x1414 ?x1414)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x56 ?x573 ?x573 ?x573)) (* (/ 1.0 4.0) ?x1130) (* (/ 1.0 8.0) ?x905))))
 (let ((?x1277 (+ (* (- (/ 1.0 4.0)) (* (to_real a00) ?x62 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 2.0)) (* ?x64 ?x65 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (/ 1.0 2.0) (* ?x64 ?x68 ?x56 ?x56 ?x60 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x64 ?x65 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x62 ?x56 ?x56 ?x60 ?x60 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x64 ?x68 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x65 ?x65 ?x65 ?x56 ?x56 ?x56 ?x60)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x598 (= ?x592 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let (($x530 (= (+ ?x113 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x588 (and $x530 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x598 (or (not (= ?x1277 0.0)) (not (= ?x913 0.0))))))
 (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x86 (+ ?x65 ?x58)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x61 (to_real a00)))
 (let ((?x43 (- 1)))
 (let ((?x59 (to_real ?x43)))
 (let ((?x88 (- (* ?x59 ?x84 ?x84 ?x84 ?x61 ?x58 ?x58 ?x62) (* ?x57 ?x84 ?x84 ?x84 ?x64 ?x58 ?x58 ?x86))))
 (let ((?x92 (- (+ ?x88 (* ?x57 ?x84 ?x84 ?x84 ?x64 ?x58 ?x58 ?x68)) (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x86 ?x86 ?x86 ?x86))))
 (let ((?x96 (- (+ ?x92 (* ?x84 ?x84 ?x84 ?x84 ?x58 ?x58 ?x62)) (* ?x61 ?x58 ?x58 ?x58 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x99 (+ ?x96 (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x86 ?x86 ?x86 ?x68) (* ?x84 ?x58 ?x58 ?x58 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x67 (- (* ?x59 ?x60 ?x60 ?x60 ?x61 ?x58 ?x58 ?x62) (* ?x57 ?x60 ?x60 ?x60 ?x64 ?x58 ?x58 ?x65))))
 (let ((?x72 (- (+ ?x67 (* ?x57 ?x60 ?x60 ?x60 ?x64 ?x58 ?x58 ?x68)) (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x65 ?x65 ?x65 ?x65))))
 (let ((?x76 (- (+ ?x72 (* ?x60 ?x60 ?x60 ?x60 ?x58 ?x58 ?x62)) (* ?x61 ?x58 ?x58 ?x58 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x79 (+ ?x76 (* ?x57 ?x64 ?x58 ?x58 ?x58 ?x65 ?x65 ?x65 ?x68) (* ?x60 ?x58 ?x58 ?x58 ?x62 ?x65 ?x65 ?x65))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x103 (and $x41 (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x79 ?x80)) (not (= ?x99 ?x80))))))
 (rewrite (= $x103 $x588))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x229 (mp (mp @x105 (quant-intro (proof-bind ?x606) (= $x104 $x892)) $x892) (rewrite (= $x892 $x892)) $x892)))
 (let ((@x1395 (mp (mp @x229 (quant-intro (proof-bind ?x1224) (= $x892 $x1343)) $x1343) (quant-intro (proof-bind ?x258) (= $x1343 $x181)) $x181)))
 (let ((@x1218 (mp (mp~ @x1395 (sk (~ $x181 $x1115)) $x1115) (rewrite (= $x1115 $x346)) $x346)))
 (let ((@x745 (mp (and-elim @x1218 $x1078) @x738 $x421)))
 (let ((@x313 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x421) $x1196)) @x745 $x1196)))
 (let (($x432 (<= ?x154 0)))
 (let ((@x747 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x421) $x432)) @x745 $x432)))
 (let (($x300 (>= ?x1129 0)))
 (let (($x1209 (= 0 ?x1129)))
 (let ((@x1039 (mp (and-elim @x1218 $x370) (symm (commutativity (= $x1209 $x370)) (= $x370 $x1209)) $x1209)))
 (let ((@x1041 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1209) $x300)) @x1039 $x300)))
 (let (($x1211 (<= ?x1129 0)))
 (let ((@x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1209) $x1211)) @x1039 $x1211)))
 (let (($x1102 (>= ?x371 0)))
 (let (($x1083 (= 0 ?x371)))
 (let ((@x856 (mp (and-elim @x1218 $x507) (symm (commutativity (= $x1083 $x507)) (= $x507 $x1083)) $x1083)))
 (let (($x1071 (<= ?x371 0)))
 (let (($x156 (not $x432)))
 (let (($x1221 (not $x1196)))
 (let (($x1153 (not $x1211)))
 (let (($x1219 (not $x300)))
 (let ((@x1024 (unit-resolution ((_ th-lemma arith) (or $x1077 $x1219 $x1153 (not $x1071) (not $x1102) $x1221 $x156)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1083) $x1071)) @x856 $x1071) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1083) $x1102)) @x856 $x1102) @x306 @x1041 @x747 @x313 (hypothesis (not $x1077)) false)))
 (let ((@x252 (lemma @x1024 $x1077)))
 (let (($x169 (<= ?x340 0.0)))
 (let ((@x1182 (unit-resolution ((_ th-lemma arith) (or $x1219 $x169 $x1153 $x1221 $x156)) @x306 @x1041 @x747 @x313 (hypothesis (not $x169)) false)))
 (let ((@x1194 (lemma @x1182 $x169)))
 (let (($x350 (<= ?x316 0.0)))
 (let (($x630 (not $x350)))
 (let (($x354 (>= ?x316 0.0)))
 (let ((@x539 (unit-resolution ((_ th-lemma arith) (or (not $x169) (not $x1077) $x354 $x1221 $x156 $x1219 $x1153)) @x306 @x1041 @x747 @x313 (hypothesis (not $x354)) @x1194 @x252 false)))
 (let (($x342 (= ?x340 0.0)))
 (let ((@x481 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x342 (not $x169) (not $x1077))) @x252 (or $x342 (not $x169)))))
 (let ((@x1020 (unit-resolution (and-elim @x1218 $x153) (unit-resolution @x481 @x1194 $x342) $x1168)))
 (let ((@x939 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x368 $x630 (not $x354))) @x1020 (or $x630 (not $x354)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x169) (not $x1077) $x350 $x1219 $x1153 $x1221 $x156)) @x306 @x1041 @x747 @x313 (unit-resolution @x939 (lemma @x539 $x354) $x630) @x1194 @x252 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       35
 :arith-eq-adapter                41
 :arith-bound-propagations-cheap  81
 :arith-bound-propagations-lp     13
 :arith-conflicts                 170
 :arith-diseq                     62
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 11
 :arith-grobner-calls             7
 :arith-grobner-conflicts         5
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 24
 :arith-lower                     142
 :arith-make-feasible             112
 :arith-max-columns               85
 :arith-max-rows                  13
 :arith-nla-explanations          158
 :arith-nla-lemmas                169
 :arith-patches                   11
 :arith-patches-success           11
 :arith-propagations              81
 :arith-upper                     111
 :conflicts                       15
 :decisions                       201
 :del-clause                      159
 :final-checks                    49
 :max-memory                      5.04
 :memory                          3.27
 :mk-bool-var                     361
 :mk-clause                       288
 :num-allocs                      15346157
 :num-checks                      1
 :propagations                    170
 :rlimit-count                    10393
 :time                            0.05
 :total-time                      0.06)
