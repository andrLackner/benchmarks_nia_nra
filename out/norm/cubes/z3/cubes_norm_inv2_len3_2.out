unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x704 (* (- 1) k!2)))
 (let ((?x703 (+ (* 3 n!0) ?x704 (* 3 (* n!0 n!0)))))
 (let (($x1667 (<= ?x703 (- 1))))
 (let (($x653 (= ?x703 (- 1))))
 (let ((?x201 (+ k!2 c!3)))
 (let ((?x607 (+ k!2 m!1)))
 (let ((?x866 (+ 6 m!1)))
 (let ((?x818 (+ 1 n!0)))
 (let ((?x594 (* (- 4) (* k!2 m!1 m!1 m!1 m!1))))
 (let ((?x1759 (* 162 c!3)))
 (let ((?x807 (* (- 1) (* m!1 m!1 m!1))))
 (let ((?x814 (* k!2 k!2)))
 (let ((?x762 (* (- 870) ?x814)))
 (let ((?x751 (* (- 1) (* m!1 m!1))))
 (let ((?x674 (* (- 72) (* k!2 k!2 m!1 m!1))))
 (let ((?x747 (* (- 844) (* k!2 m!1))))
 (let ((?x499 (* 17 m!1)))
 (let ((?x871 (* 192 k!2)))
 (let ((?x702 (* (- 434) (* k!2 m!1 m!1))))
 (let ((?x605 (* (- 433) (* k!2 k!2 m!1))))
 (let ((?x1617 (* (- 4) (* k!2 k!2 m!1 m!1 m!1))))
 (let ((?x469 (* (- 72) (* k!2 m!1 m!1 m!1))))
 (let ((?x815 (* (- 54) n!0)))
 (let ((?x1709 (+ (* ?x818 ?x818 ?x866 ?x866 ?x607 ?x607 ?x201 ?x201 ?x201) ?x815 ?x469 (* (- 1) (* ?x866 ?x866 ?x866 ?x607 ?x607 ?x607 ?x201)) (* 9 (* n!0 m!1 c!3)) (* (- 432) (* k!2 m!1 c!3)) (* (- 864) (* k!2 c!3)) (* 18 (* ?x866 ?x866 ?x866 ?x607 ?x201 ?x201)) (* (- 9) (* n!0 m!1)) ?x1617 (* (- 432) (* m!1 m!1 c!3)) (* 5 (* ?x866 ?x866 ?x866 ?x607 ?x607 ?x201)) (* (- 72) (* k!2 m!1 m!1 c!3)) ?x605 ?x702 ?x871 ?x499 (* (- 837) (* m!1 c!3)) (* (- 9) (* ?x818 ?x866 ?x866 ?x866 ?x607 ?x201)) ?x747 ?x674 ?x751 ?x762 (* 54 (* n!0 c!3)) ?x807 ?x1759 (* 4 (* ?x818 ?x818 ?x866 ?x866 ?x201 ?x201 ?x201)) ?x594 (* 54 (* n!0 k!2)) (* (- 9) (* ?x818 ?x818 ?x818 ?x866 ?x866 ?x201 ?x201 ?x201 ?x201)) (* (- 18) (* ?x818 ?x818 ?x866 ?x866 ?x201 ?x201 ?x201 ?x201)) (* (- 4) (* m!1 m!1 m!1 m!1 c!3)) (* 9 (* ?x818 ?x866 ?x866 ?x866 ?x607 ?x201 ?x201)) (* 9 (* ?x818 ?x818 ?x818 ?x866 ?x866 ?x201 ?x201 ?x201)) (* (- 5) (* ?x818 ?x818 ?x866 ?x866 ?x607 ?x201 ?x201 ?x201)) (* (- 4) (* k!2 m!1 m!1 m!1 c!3)) (* (- 72) (* m!1 m!1 m!1 c!3)) (* 9 (* n!0 k!2 m!1)))))
 (let (($x1691 (= ?x1709 78)))
 (let (($x200 (not $x1691)))
 (let ((?x893 (* n!0 k!2)))
 (let ((?x915 (+ (* 2 n!0) ?x704 (* (- 3) c!3) ?x893)))
 (let (($x433 (= ?x915 (- 1))))
 (let ((?x882 (+ (* 9 n!0) (* (- 5) k!2) ?x814 (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x881 (= ?x882 (- 4))))
 (let ((?x865 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x202 (= ?x865 (- 6))))
 (let (($x1687 (and $x202 $x881 $x433 $x653 $x200)))
 (let ((?x617 (+ c!3 k!2)))
 (let ((?x1557 (+ ?x1759 ?x871 ?x499 ?x815 ?x762 (* 54 (* k!2 n!0)) (* (- 9) (* ?x818 ?x818 ?x818 ?x866 ?x866 ?x617 ?x617 ?x617 ?x617)) (* 54 (* c!3 n!0)) (* (- 9) (* m!1 n!0)) ?x751 ?x747 (* (- 432) (* c!3 k!2 m!1)) ?x605 (* (- 1) (* ?x866 ?x866 ?x866 ?x607 ?x607 ?x607 ?x617)) (* (- 432) (* c!3 m!1 m!1)) ?x702 (* (- 72) (* c!3 k!2 m!1 m!1)) (* 5 (* ?x866 ?x866 ?x866 ?x607 ?x607 ?x617)) ?x674 (* (- 864) (* c!3 k!2)) (* (- 72) (* c!3 m!1 m!1 m!1)) ?x469 (* (- 4) (* c!3 k!2 m!1 m!1 m!1)) ?x1617 (* 9 (* ?x818 ?x866 ?x866 ?x866 ?x607 ?x617 ?x617)) (* (- 4) (* c!3 m!1 m!1 m!1 m!1)) ?x594 (* 18 (* ?x866 ?x866 ?x866 ?x607 ?x617 ?x617)) (* 4 (* ?x818 ?x818 ?x866 ?x866 ?x617 ?x617 ?x617)) (* 9 (* ?x818 ?x818 ?x818 ?x866 ?x866 ?x617 ?x617 ?x617)) (* 9 (* c!3 m!1 n!0)) (* 9 (* k!2 m!1 n!0)) (* (- 9) (* ?x818 ?x866 ?x866 ?x866 ?x607 ?x617)) (* (- 837) (* c!3 m!1)) (* (- 18) (* ?x818 ?x818 ?x866 ?x866 ?x617 ?x617 ?x617 ?x617)) (* (- 5) (* ?x818 ?x818 ?x866 ?x866 ?x607 ?x617 ?x617 ?x617)) (* ?x818 ?x818 ?x866 ?x866 ?x607 ?x607 ?x617 ?x617 ?x617) ?x807)))
 (let (($x846 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x753 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x814) (* 9 (* c!3 n!0)))))
 (let (($x822 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x753 4) $x846 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x1557 78)))))
 (let (($x808 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x2159 (* (- 1) (* m m m))))
 (let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1104 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1279 (* (- 5) ?x1104)))
 (let ((?x1017 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1032 (* (- 18) ?x1017)))
 (let ((?x981 (* c m)))
 (let ((?x1364 (* (- 837) ?x981)))
 (let ((?x975 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)))
 (let ((?x1278 (* (- 9) ?x975)))
 (let ((?x948 (* 9 (* k m n))))
 (let ((?x946 (* 9 (* c m n))))
 (let ((?x923 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1031 (* 9 ?x923)))
 (let ((?x898 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1362 (* 4 ?x898)))
 (let ((?x867 (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1361 (* 18 ?x867)))
 (let ((?x790 (* k m m m m)))
 (let ((?x1360 (* (- 4) ?x790)))
 (let ((?x786 (* c m m m m)))
 (let ((?x1277 (* (- 4) ?x786)))
 (let ((?x780 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1038 (* 9 ?x780)))
 (let ((?x776 (* k k m m m)))
 (let ((?x1359 (* (- 4) ?x776)))
 (let ((?x766 (* c k m m m)))
 (let ((?x1358 (* (- 4) ?x766)))
 (let ((?x730 (* k m m m)))
 (let ((?x1276 (* (- 72) ?x730)))
 (let ((?x726 (* c m m m)))
 (let ((?x1037 (* (- 72) ?x726)))
 (let ((?x1356 (* (- 864) (* c k))))
 (let ((?x716 (* k k m m)))
 (let ((?x1354 (* (- 72) ?x716)))
 (let ((?x707 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)))
 (let ((?x1275 (* 5 ?x707)))
 (let ((?x706 (* c k m m)))
 (let ((?x1044 (* (- 72) ?x706)))
 (let ((?x689 (* k m m)))
 (let ((?x1352 (* (- 434) ?x689)))
 (let ((?x685 (* c m m)))
 (let ((?x1043 (* (- 432) ?x685)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1349 (* (- 1) ?x678)))
 (let ((?x675 (* k k m)))
 (let ((?x1348 (* (- 433) ?x675)))
 (let ((?x665 (* c k m)))
 (let ((?x1273 (* (- 432) ?x665)))
 (let ((?x1995 (* (- 1) (* m m))))
 (let ((?x1993 (* (- 9) (* m n))))
 (let ((?x162 (* c n)))
 (let ((?x1991 (* 54 ?x162)))
 (let ((?x129 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1272 (* (- 9) ?x129)))
 (let ((?x55 (* k n)))
 (let ((?x2031 (* 54 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x1049 (* (- 870) ?x49)))
 (let ((?x2029 (* (- 54) n)))
 (let ((?x1342 (* 17 m)))
 (let ((?x2022 (* 192 k)))
 (let ((?x2020 (* 162 c)))
 (let ((?x658 (+ ?x2020 ?x2022 ?x1342 ?x2029 ?x1049 ?x2031 ?x1272 ?x1991 ?x1993 ?x1995 (* (- 844) (* k m)) ?x1273 ?x1348 ?x1349 ?x1043 ?x1352 ?x1044 ?x1275 ?x1354 ?x1356 ?x1037 ?x1276 ?x1358 ?x1359 ?x1038 ?x1277 ?x1360 ?x1361 ?x1362 ?x1031 ?x946 ?x948 ?x1278 ?x1364 ?x1032 ?x1279 ?x1603 ?x2159)))
 (let (($x314 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x276 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x224 (= (+ ?x40 ?x44 ?x226 ?x227 (* 9 ?x162)) 4)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (and $x140 $x224 $x276 $x314 (not (= ?x658 78))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x917 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x2159 (* (- 1) (* m m m))))
 (let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1104 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1279 (* (- 5) ?x1104)))
 (let ((?x1017 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1032 (* (- 18) ?x1017)))
 (let ((?x981 (* c m)))
 (let ((?x1364 (* (- 837) ?x981)))
 (let ((?x975 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)))
 (let ((?x1278 (* (- 9) ?x975)))
 (let ((?x948 (* 9 (* k m n))))
 (let ((?x946 (* 9 (* c m n))))
 (let ((?x923 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1031 (* 9 ?x923)))
 (let ((?x898 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1362 (* 4 ?x898)))
 (let ((?x867 (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1361 (* 18 ?x867)))
 (let ((?x790 (* k m m m m)))
 (let ((?x1360 (* (- 4) ?x790)))
 (let ((?x786 (* c m m m m)))
 (let ((?x1277 (* (- 4) ?x786)))
 (let ((?x780 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1038 (* 9 ?x780)))
 (let ((?x776 (* k k m m m)))
 (let ((?x1359 (* (- 4) ?x776)))
 (let ((?x766 (* c k m m m)))
 (let ((?x1358 (* (- 4) ?x766)))
 (let ((?x730 (* k m m m)))
 (let ((?x1276 (* (- 72) ?x730)))
 (let ((?x726 (* c m m m)))
 (let ((?x1037 (* (- 72) ?x726)))
 (let ((?x1356 (* (- 864) (* c k))))
 (let ((?x716 (* k k m m)))
 (let ((?x1354 (* (- 72) ?x716)))
 (let ((?x707 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)))
 (let ((?x1275 (* 5 ?x707)))
 (let ((?x706 (* c k m m)))
 (let ((?x1044 (* (- 72) ?x706)))
 (let ((?x689 (* k m m)))
 (let ((?x1352 (* (- 434) ?x689)))
 (let ((?x685 (* c m m)))
 (let ((?x1043 (* (- 432) ?x685)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1349 (* (- 1) ?x678)))
 (let ((?x675 (* k k m)))
 (let ((?x1348 (* (- 433) ?x675)))
 (let ((?x665 (* c k m)))
 (let ((?x1273 (* (- 432) ?x665)))
 (let ((?x1995 (* (- 1) (* m m))))
 (let ((?x1993 (* (- 9) (* m n))))
 (let ((?x162 (* c n)))
 (let ((?x1991 (* 54 ?x162)))
 (let ((?x129 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1272 (* (- 9) ?x129)))
 (let ((?x55 (* k n)))
 (let ((?x2031 (* 54 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x1049 (* (- 870) ?x49)))
 (let ((?x2029 (* (- 54) n)))
 (let ((?x1342 (* 17 m)))
 (let ((?x2022 (* 192 k)))
 (let ((?x2020 (* 162 c)))
 (let ((?x1365 (+ ?x2020 ?x2022 ?x1342 ?x2029 ?x1049 ?x2031 ?x1272 ?x1991 ?x1993 ?x1995 (* (- 838) (* k m)) (* (- 6) (* m k)) ?x1273 ?x1348 ?x1349 ?x1043 ?x1352 ?x1044 ?x1275 ?x1354 ?x1356 ?x1037 ?x1276 ?x1358 ?x1359 ?x1038 ?x1277 ?x1360 ?x1361 ?x1362 ?x1031 ?x946 ?x948 ?x1278 ?x1364 ?x1032 ?x1279 ?x1603 ?x2159)))
 (let (($x314 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x276 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x224 (= (+ ?x40 ?x44 ?x226 ?x227 (* 9 ?x162)) 4)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (and $x140 $x224 $x276 $x314 (not (= ?x1365 78))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x840 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x2159 (* (- 1) (* m m m))))
 (let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1104 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1279 (* (- 5) ?x1104)))
 (let ((?x1017 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1032 (* (- 18) ?x1017)))
 (let ((?x981 (* c m)))
 (let ((?x1364 (* (- 837) ?x981)))
 (let ((?x975 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)))
 (let ((?x1278 (* (- 9) ?x975)))
 (let ((?x948 (* 9 (* k m n))))
 (let ((?x946 (* 9 (* c m n))))
 (let ((?x923 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1031 (* 9 ?x923)))
 (let ((?x898 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1362 (* 4 ?x898)))
 (let ((?x867 (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1361 (* 18 ?x867)))
 (let ((?x790 (* k m m m m)))
 (let ((?x1360 (* (- 4) ?x790)))
 (let ((?x786 (* c m m m m)))
 (let ((?x1277 (* (- 4) ?x786)))
 (let ((?x780 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1038 (* 9 ?x780)))
 (let ((?x776 (* k k m m m)))
 (let ((?x1359 (* (- 4) ?x776)))
 (let ((?x766 (* c k m m m)))
 (let ((?x1358 (* (- 4) ?x766)))
 (let ((?x730 (* k m m m)))
 (let ((?x1276 (* (- 72) ?x730)))
 (let ((?x726 (* c m m m)))
 (let ((?x1037 (* (- 72) ?x726)))
 (let ((?x1356 (* (- 864) (* c k))))
 (let ((?x716 (* k k m m)))
 (let ((?x1354 (* (- 72) ?x716)))
 (let ((?x707 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)))
 (let ((?x1275 (* 5 ?x707)))
 (let ((?x706 (* c k m m)))
 (let ((?x1044 (* (- 72) ?x706)))
 (let ((?x689 (* k m m)))
 (let ((?x1352 (* (- 434) ?x689)))
 (let ((?x685 (* c m m)))
 (let ((?x1043 (* (- 432) ?x685)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1349 (* (- 1) ?x678)))
 (let ((?x675 (* k k m)))
 (let ((?x1348 (* (- 433) ?x675)))
 (let ((?x665 (* c k m)))
 (let ((?x1273 (* (- 432) ?x665)))
 (let ((?x1995 (* (- 1) (* m m))))
 (let ((?x1993 (* (- 9) (* m n))))
 (let ((?x162 (* c n)))
 (let ((?x1991 (* 54 ?x162)))
 (let ((?x129 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1272 (* (- 9) ?x129)))
 (let ((?x55 (* k n)))
 (let ((?x2031 (* 54 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x1049 (* (- 870) ?x49)))
 (let ((?x2029 (* (- 54) n)))
 (let ((?x1342 (* 17 m)))
 (let ((?x2022 (* 192 k)))
 (let ((?x2020 (* 162 c)))
 (let ((?x658 (+ ?x2020 ?x2022 ?x1342 ?x2029 ?x1049 ?x2031 ?x1272 ?x1991 ?x1993 ?x1995 (* (- 844) (* k m)) ?x1273 ?x1348 ?x1349 ?x1043 ?x1352 ?x1044 ?x1275 ?x1354 ?x1356 ?x1037 ?x1276 ?x1358 ?x1359 ?x1038 ?x1277 ?x1360 ?x1361 ?x1362 ?x1031 ?x946 ?x948 ?x1278 ?x1364 ?x1032 ?x1279 ?x1603 ?x2159)))
 (let (($x314 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x276 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x224 (= (+ ?x40 ?x44 ?x226 ?x227 (* 9 ?x162)) 4)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (let (($x817 (and $x140 $x224 $x276 $x314 (not (= ?x658 78)))))
 (let ((?x1365 (+ ?x2020 ?x2022 ?x1342 ?x2029 ?x1049 ?x2031 ?x1272 ?x1991 ?x1993 ?x1995 (* (- 838) (* k m)) (* (- 6) (* m k)) ?x1273 ?x1348 ?x1349 ?x1043 ?x1352 ?x1044 ?x1275 ?x1354 ?x1356 ?x1037 ?x1276 ?x1358 ?x1359 ?x1038 ?x1277 ?x1360 ?x1361 ?x1362 ?x1031 ?x946 ?x948 ?x1278 ?x1364 ?x1032 ?x1279 ?x1603 ?x2159)))
 (let (($x337 (and $x140 $x224 $x276 $x314 (not (= ?x1365 78)))))
 (rewrite (= $x337 $x817))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x207 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1657 (+ (* 9 (* ?x325 ?x322)) ?x678 (* (- 5) (* ?x322 ?x72)) (* (- 5) (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)) (* (- 9) (* ?x325 ?x322 ?x71)) (* (- 9) (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 18) (* ?x322 ?x71)) (* 4 m) (* (- 18) (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 4) (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* (- 9) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)) (* 18 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 5 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)) (* (- 1) ?x1603) (* ?x322 ?x72 ?x72) (* 4 (* ?x322 ?x322 ?x322 ?x72 ?x71)))))
 (let (($x1683 (not (= ?x1657 (- 24)))))
 (let (($x650 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x381 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (and $x140 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x226 ?x227) 4) $x381 $x650 $x1683))))))))))))))))) :qid k!34))
 ))
 (let ((?x891 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x2159 (* (- 1) (* m m m))))
 (let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1104 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x1279 (* (- 5) ?x1104)))
 (let ((?x1017 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1032 (* (- 18) ?x1017)))
 (let ((?x981 (* c m)))
 (let ((?x1364 (* (- 837) ?x981)))
 (let ((?x975 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)))
 (let ((?x1278 (* (- 9) ?x975)))
 (let ((?x948 (* 9 (* k m n))))
 (let ((?x946 (* 9 (* c m n))))
 (let ((?x923 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1031 (* 9 ?x923)))
 (let ((?x898 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)))
 (let ((?x1362 (* 4 ?x898)))
 (let ((?x867 (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1361 (* 18 ?x867)))
 (let ((?x790 (* k m m m m)))
 (let ((?x1360 (* (- 4) ?x790)))
 (let ((?x786 (* c m m m m)))
 (let ((?x1277 (* (- 4) ?x786)))
 (let ((?x780 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)))
 (let ((?x1038 (* 9 ?x780)))
 (let ((?x776 (* k k m m m)))
 (let ((?x1359 (* (- 4) ?x776)))
 (let ((?x766 (* c k m m m)))
 (let ((?x1358 (* (- 4) ?x766)))
 (let ((?x730 (* k m m m)))
 (let ((?x1276 (* (- 72) ?x730)))
 (let ((?x726 (* c m m m)))
 (let ((?x1037 (* (- 72) ?x726)))
 (let ((?x1356 (* (- 864) (* c k))))
 (let ((?x716 (* k k m m)))
 (let ((?x1354 (* (- 72) ?x716)))
 (let ((?x707 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)))
 (let ((?x1275 (* 5 ?x707)))
 (let ((?x706 (* c k m m)))
 (let ((?x1044 (* (- 72) ?x706)))
 (let ((?x689 (* k m m)))
 (let ((?x1352 (* (- 434) ?x689)))
 (let ((?x685 (* c m m)))
 (let ((?x1043 (* (- 432) ?x685)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1349 (* (- 1) ?x678)))
 (let ((?x675 (* k k m)))
 (let ((?x1348 (* (- 433) ?x675)))
 (let ((?x665 (* c k m)))
 (let ((?x1273 (* (- 432) ?x665)))
 (let ((?x1995 (* (- 1) (* m m))))
 (let ((?x1993 (* (- 9) (* m n))))
 (let ((?x162 (* c n)))
 (let ((?x1991 (* 54 ?x162)))
 (let ((?x129 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x1272 (* (- 9) ?x129)))
 (let ((?x55 (* k n)))
 (let ((?x2031 (* 54 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x1049 (* (- 870) ?x49)))
 (let ((?x2029 (* (- 54) n)))
 (let ((?x1342 (* 17 m)))
 (let ((?x2022 (* 192 k)))
 (let ((?x2020 (* 162 c)))
 (let ((?x1365 (+ ?x2020 ?x2022 ?x1342 ?x2029 ?x1049 ?x2031 ?x1272 ?x1991 ?x1993 ?x1995 (* (- 838) (* k m)) (* (- 6) (* m k)) ?x1273 ?x1348 ?x1349 ?x1043 ?x1352 ?x1044 ?x1275 ?x1354 ?x1356 ?x1037 ?x1276 ?x1358 ?x1359 ?x1038 ?x1277 ?x1360 ?x1361 ?x1362 ?x1031 ?x946 ?x948 ?x1278 ?x1364 ?x1032 ?x1279 ?x1603 ?x2159)))
 (let (($x314 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x276 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x224 (= (+ ?x40 ?x44 ?x226 ?x227 (* 9 ?x162)) 4)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (let (($x337 (and $x140 $x224 $x276 $x314 (not (= ?x1365 78)))))
 (let ((?x1657 (+ (* 9 (* ?x325 ?x322)) ?x678 (* (- 5) (* ?x322 ?x72)) (* (- 5) ?x707) (* (- 9) (* ?x325 ?x322 ?x71)) (* (- 9) ?x780) (* (- 18) (* ?x322 ?x71)) (* 4 m) (* (- 18) ?x867) (* (- 4) ?x898) (* (- 9) ?x923) (* 9 ?x975) (* 18 ?x1017) (* 9 ?x129) (* 5 ?x1104) (* (- 1) ?x1603) (* ?x322 ?x72 ?x72) (* 4 (* ?x322 ?x322 ?x322 ?x72 ?x71)))))
 (let (($x1683 (not (= ?x1657 (- 24)))))
 (let (($x650 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x381 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x183 (and $x140 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x226 ?x227) 4) $x381 $x650 $x1683)))
 (rewrite (= $x183 $x337)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1685 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1657 (+ (* 9 (* ?x325 ?x322)) ?x678 (* (- 5) (* ?x322 ?x72)) (* (- 5) (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)) (* (- 9) (* ?x325 ?x322 ?x71)) (* (- 9) (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 18) (* ?x322 ?x71)) (* 4 m) (* (- 18) (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 4) (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* (- 9) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)) (* 18 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 5 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)) (* (- 1) ?x1603) (* ?x322 ?x72 ?x72) (* 4 (* ?x322 ?x322 ?x322 ?x72 ?x71)))))
 (let (($x1683 (not (= ?x1657 (- 24)))))
 (let (($x650 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x616 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x543 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (and $x140 (= ?x543 (- 4)) $x616 $x650 $x1683))))))))))))))) :qid k!34))
 ))
 (let ((?x208 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1657 (+ (* 9 (* ?x325 ?x322)) ?x678 (* (- 5) (* ?x322 ?x72)) (* (- 5) (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)) (* (- 9) (* ?x325 ?x322 ?x71)) (* (- 9) (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 18) (* ?x322 ?x71)) (* 4 m) (* (- 18) (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 4) (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* (- 9) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)) (* 18 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 5 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)) (* (- 1) ?x1603) (* ?x322 ?x72 ?x72) (* 4 (* ?x322 ?x322 ?x322 ?x72 ?x71)))))
 (let (($x1683 (not (= ?x1657 (- 24)))))
 (let (($x650 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x381 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (let (($x183 (and $x140 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x226 ?x227) 4) $x381 $x650 $x1683)))
 (let (($x616 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x543 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x664 (and $x140 (= ?x543 (- 4)) $x616 $x650 $x1683)))
 (rewrite (= $x664 $x183))))))))))))))))))))))))
 ))
 (let (($x107 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x71 (+ c k)))
 (let ((?x69 (+ n 1)))
 (let ((?x80 (- (+ (* 9 ?x68 ?x69) (* ?x71 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)) (* 5 ?x72 ?x68))))
 (let ((?x82 (- (- ?x80 (* 5 ?x71 ?x72 ?x72 ?x68 ?x68 ?x68)) (* 9 ?x71 ?x68 ?x69))))
 (let ((?x84 (- (- ?x82 (* 9 ?x71 ?x71 ?x72 ?x68 ?x68 ?x68 ?x69)) (* 18 ?x71 ?x68))))
 (let ((?x90 (- (+ ?x84 (* 4 ?x68)) (* 18 ?x71 ?x71 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x92 (- (- ?x90 (* 4 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69)) (* 9 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69 ?x69))))
 (let ((?x97 (+ ?x92 (* 9 ?x71 ?x72 ?x68 ?x68 ?x68 ?x69) (* 18 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69) (* 9 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69 ?x69) (* 5 ?x71 ?x71 ?x71 ?x72 ?x68 ?x68 ?x69 ?x69))))
 (let ((?x102 (+ (- ?x97 (* ?x71 ?x71 ?x71 ?x72 ?x72 ?x68 ?x68 ?x69 ?x69)) (* ?x72 ?x72 ?x68) (* 4 ?x71 ?x72 ?x68 ?x68 ?x68))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x102 0)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x1689 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x71 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x1603 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x72 ?x71 ?x71 ?x71)))
 (let ((?x678 (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x72 ?x71)))
 (let ((?x1657 (+ (* 9 (* ?x325 ?x322)) ?x678 (* (- 5) (* ?x322 ?x72)) (* (- 5) (* ?x322 ?x322 ?x322 ?x72 ?x72 ?x71)) (* (- 9) (* ?x325 ?x322 ?x71)) (* (- 9) (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 18) (* ?x322 ?x71)) (* 4 m) (* (- 18) (* ?x322 ?x322 ?x322 ?x72 ?x71 ?x71)) (* (- 4) (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* (- 9) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x322 ?x322 ?x322 ?x72 ?x71)) (* 18 (* ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 9 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x71 ?x71 ?x71 ?x71)) (* 5 (* ?x325 ?x325 ?x322 ?x322 ?x72 ?x71 ?x71 ?x71)) (* (- 1) ?x1603) (* ?x322 ?x72 ?x72) (* 4 (* ?x322 ?x322 ?x322 ?x72 ?x71)))))
 (let (($x1683 (not (= ?x1657 (- 24)))))
 (let (($x650 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x616 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x543 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (let (($x664 (and $x140 (= ?x543 (- 4)) $x616 $x650 $x1683)))
 (let ((?x69 (+ n 1)))
 (let ((?x68 (+ m 6)))
 (let ((?x80 (- (+ (* 9 ?x68 ?x69) (* ?x71 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)) (* 5 ?x72 ?x68))))
 (let ((?x82 (- (- ?x80 (* 5 ?x71 ?x72 ?x72 ?x68 ?x68 ?x68)) (* 9 ?x71 ?x68 ?x69))))
 (let ((?x84 (- (- ?x82 (* 9 ?x71 ?x71 ?x72 ?x68 ?x68 ?x68 ?x69)) (* 18 ?x71 ?x68))))
 (let ((?x90 (- (+ ?x84 (* 4 ?x68)) (* 18 ?x71 ?x71 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x92 (- (- ?x90 (* 4 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69)) (* 9 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69 ?x69))))
 (let ((?x97 (+ ?x92 (* 9 ?x71 ?x72 ?x68 ?x68 ?x68 ?x69) (* 18 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69) (* 9 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x69 ?x69 ?x69) (* 5 ?x71 ?x71 ?x71 ?x72 ?x68 ?x68 ?x69 ?x69))))
 (let ((?x102 (+ (- ?x97 (* ?x71 ?x71 ?x71 ?x72 ?x72 ?x68 ?x68 ?x69 ?x69)) (* ?x72 ?x72 ?x68) (* 4 ?x71 ?x72 ?x68 ?x68 ?x68))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x106 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x102 0))))))
 (rewrite (= $x106 $x664)))))))))))))))))))))))))))))))))
 ))
 (let ((@x108 (asserted $x107)))
 (let ((@x157 (mp (mp @x108 (quant-intro (proof-bind ?x1689) (= $x107 $x1685)) $x1685) (rewrite (= $x1685 $x1685)) $x1685)))
 (let ((@x745 (mp (mp @x157 (quant-intro (proof-bind ?x208) (= $x1685 $x207)) $x207) (quant-intro (proof-bind ?x891) (= $x207 $x917)) $x917)))
 (let ((@x770 (mp~ (mp @x745 (quant-intro (proof-bind ?x840) (= $x917 $x808)) $x808) (sk (~ $x808 $x822)) $x822)))
 (let ((@x194 (mp @x770 (rewrite (= $x822 $x1687)) $x1687)))
 (let ((@x709 (and-elim @x194 $x653)))
 (let ((@x599 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x653) $x1667)) @x709 $x1667)))
 (let (($x894 (>= ?x703 (- 1))))
 (let ((@x458 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x653) $x894)) @x709 $x894)))
 (let (($x646 (<= ?x882 (- 4))))
 (let ((@x922 (and-elim @x194 $x881)))
 (let ((@x204 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x881) $x646)) @x922 $x646)))
 (let (($x449 (>= ?x882 (- 4))))
 (let ((@x1100 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x881) $x449)) @x922 $x449)))
 (let (($x527 (<= ?x865 (- 6))))
 (let ((@x505 (and-elim @x194 $x202)))
 (let ((@x1703 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x202) $x527)) @x505 $x527)))
 (let (($x1337 (>= ?x865 (- 6))))
 (let ((@x645 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x202) $x1337)) @x505 $x1337)))
 (let (($x1653 (<= ?x915 (- 1))))
 (let ((@x925 (and-elim @x194 $x433)))
 (let ((@x1697 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x433) $x1653)) @x925 $x1653)))
 (let (($x1368 (>= ?x915 (- 1))))
 (let ((@x1695 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x433) $x1368)) @x925 $x1368)))
 (let (($x608 (not (<= ?x1709 78))))
 (let (($x119 (>= ?x1709 78)))
 (let ((@x779 ((_ th-lemma arith) (hypothesis (not $x119)) @x645 @x1703 @x458 @x599 @x458 @x599 @x1695 @x1697 @x458 @x599 @x1695 @x1697 @x1100 @x204 @x1695 @x1697 @x458 @x599 @x645 @x1703 @x645 @x1703 @x458 @x599 @x1695 @x1697 @x645 @x1703 @x1100 @x204 @x458 @x599 false)))
 (let ((@x710 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1691 $x608 (not $x119))) (and-elim @x194 $x200) (or $x608 (not $x119)))))
 ((_ th-lemma arith) (unit-resolution @x710 (lemma @x779 $x119) $x608) @x645 @x1703 @x458 @x599 @x458 @x599 @x1695 @x1697 @x458 @x599 @x1695 @x1697 @x1100 @x204 @x1695 @x1697 @x458 @x599 @x645 @x1703 @x645 @x1703 @x458 @x599 @x1695 @x1697 @x645 @x1703 @x1100 @x204 @x458 @x599 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        48
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           10
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             467
 :arith-nonlinear-bounds    11
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             6
 :arith-patches_succ        3
 :arith-pivots              8
 :arith-row-summations      19
 :arith-tableau-max-columns 76
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 38
 :del-clause                16
 :final-checks              9
 :max-memory                3.93
 :memory                    3.34
 :mk-bool-var               58
 :mk-clause                 16
 :num-allocs                1754395
 :num-checks                1
 :propagations              12
 :rlimit-count              16754
 :time                      0.02
 :total-time                0.02)
