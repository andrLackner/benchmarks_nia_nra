unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x61 (* (- 1) x!1)))
 (let ((?x743 (* (- 1) y!0)))
 (let ((?x660 (+ y00 x00 ?x743 ?x61)))
 (let (($x760 (<= ?x660 0)))
 (let (($x383 (= ?x660 0)))
 (let ((?x785 (+ 1 y!0)))
 (let ((?x772 (+ (- 1) x!1)))
 (let ((?x775 (* ?x772 ?x772 ?x772 ?x785 ?x785 ?x785)))
 (let ((?x903 (+ (* 2 y00) (* 2 x00) (* (- 4) (* y00 x!1)) (* y!0 x!1 x!1) (* x00 y!0 y!0 y!0) (* (- 6) (* x00 y!0 y!0 x!1)) (* (- 6) (* y00 y!0 y!0 x!1)) (* y00 y!0 y!0 y!0 x!1 x!1) (* (- 2) (* x00 y!0 y!0 y!0 x!1)) (* 4 (* y00 y!0 x!1 x!1)) (* 4 (* y00 y!0)) (* 2 (* y00 x!1 x!1)) (* (- 4) (* x00 x!1)) (* (- 1) (* y!0 y!0 x!1 x!1)) ?x743 (* y!0 x!1) (* 2 (* y!0 y!0 x!1)) (* y00 y!0 y!0 y!0) (* (- 2) (* y00 y!0 y!0 y!0 x!1)) (* 3 (* y00 y!0 y!0)) (* (- 1) (* y!0 x!1 x!1 x!1)) (* x00 y!0 y!0 y!0 x!1 x!1) (* 3 (* y00 y!0 y!0 x!1 x!1)) (* 3 (* x00 y!0 y!0 x!1 x!1)) (* (- 8) (* y00 y!0 x!1)) (* 4 (* x00 y!0)) (* 3 (* x00 y!0 y!0)) (* 2 (* x00 x!1 x!1)) (* 4 (* x00 y!0 x!1 x!1)) (* (- 8) (* x00 y!0 x!1)) ?x61 (* (- 1) (* y!0 y!0)) (* (- 1) (* ?x772 ?x772 ?x785 ?x785 ?x785 ?x785)) (* (- 1) (* x!1 x!1 x!1)) (* (- 1) ?x775) (* 2 (* x!1 x!1)))))
 (let (($x904 (= ?x903 0)))
 (let (($x802 (not $x904)))
 (let (($x674 (and $x383 $x802)))
 (let ((?x722 (* y!0 y!0)))
 (let ((?x736 (* x!1 x!1 x!1)))
 (let ((?x733 (* ?x772 ?x772 ?x785 ?x785 ?x785 ?x785)))
 (let ((?x850 (* (- 2) x00)))
 (let ((?x849 (* (- 2) y00)))
 (let ((?x721 (+ x!1 y!0 ?x849 ?x850 (* (- 4) (* y!0 y00)) (* 8 (* x!1 y!0 y00)) (* (- 4) (* x!1 x!1 y!0 y00)) (* 4 (* x!1 y00)) (* (- 2) (* x!1 x!1 y00)) (* 4 (* x!1 x00)) (* (- 2) (* x!1 x!1 x00)) (* (- 4) (* y!0 x00)) (* 8 (* x!1 y!0 x00)) (* (- 4) (* x!1 x!1 y!0 x00)) (* (- 3) (* y!0 y!0 x00)) (* 6 (* x!1 y!0 y!0 x00)) (* (- 3) (* x!1 x!1 y!0 y!0 x00)) (* (- 1) (* y!0 y!0 y!0 x00)) (* 2 (* x!1 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0 x00)) ?x733 (* (- 1) (* x!1 x!1 y!0)) (* (- 1) (* x!1 y!0)) (* x!1 x!1 x!1 y!0) (* (- 2) (* x!1 x!1)) ?x736 ?x775 ?x722 (* (- 2) (* x!1 y!0 y!0)) (* x!1 x!1 y!0 y!0) (* (- 3) (* y!0 y!0 y00)) (* (- 1) (* y!0 y!0 y!0 y00)) (* 2 (* x!1 y!0 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0 y00)) (* 6 (* x!1 y!0 y!0 y00)) (* (- 3) (* x!1 x!1 y!0 y!0 y00)))))
 (let (($x99 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x721 0)))))
 (let (($x978 (exists ((x Int) (y Int) )(! (let ((?x873 (* (- 3) (* x x y y y00))))
 (let ((?x871 (* (- 1) (* x x y y y y00))))
 (let ((?x870 (* 2 (* x y y y y00))))
 (let ((?x759 (* (- 1) (* y y y y00))))
 (let ((?x869 (* (- 3) (* y y y00))))
 (let ((?x610 (* x x y y)))
 (let ((?x643 (* (- 2) (* x y y))))
 (let ((?x604 (* y y)))
 (let ((?x81 (+ 1 y)))
 (let ((?x73 (+ (- 1) x)))
 (let ((?x498 (* ?x73 ?x73 ?x73 ?x81 ?x81 ?x81)))
 (let ((?x443 (* x x x)))
 (let ((?x461 (* (- 2) (* x x))))
 (let ((?x424 (* x x x y)))
 (let ((?x423 (* (- 1) (* x y))))
 (let ((?x426 (* (- 1) (* x x y))))
 (let ((?x404 (* ?x73 ?x73 ?x81 ?x81 ?x81 ?x81)))
 (let ((?x868 (* (- 1) (* x x y y y x00))))
 (let ((?x867 (* 2 (* x y y y x00))))
 (let ((?x866 (* (- 1) (* y y y x00))))
 (let ((?x865 (* (- 3) (* x x y y x00))))
 (let ((?x863 (* (- 3) (* y y x00))))
 (let ((?x862 (* (- 4) (* x x y x00))))
 (let ((?x860 (* (- 4) (* y x00))))
 (let ((?x859 (* (- 2) (* x x x00))))
 (let ((?x857 (* (- 2) (* x x y00))))
 (let ((?x855 (* (- 4) (* x x y y00))))
 (let ((?x852 (* (- 4) (* y y00))))
 (let ((?x850 (* (- 2) x00)))
 (let ((?x849 (* (- 2) y00)))
 (let ((?x971 (+ x y ?x849 ?x850 ?x852 (* 8 (* x y y00)) ?x855 (* 4 (* x y00)) ?x857 (* 4 (* x x00)) ?x859 ?x860 (* 8 (* x y x00)) ?x862 ?x863 (* 6 (* x y y x00)) ?x865 ?x866 ?x867 ?x868 ?x404 ?x426 ?x423 ?x424 ?x461 ?x443 ?x498 ?x604 ?x643 ?x610 ?x869 ?x759 ?x870 ?x871 (* 6 (* x y y y00)) ?x873)))
 (let (($x83 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x83 (not (= ?x971 0))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x486 (exists ((x Int) (y Int) )(! (let ((?x81 (+ 1 y)))
 (let ((?x73 (+ (- 1) x)))
 (let ((?x617 (+ (* y00 ?x73 ?x73 ?x81) (* x00 ?x73 ?x73 ?x81) (* x00 ?x73 ?x73 ?x81 ?x81 ?x81) (* (- 1) (* ?x73 ?x73 ?x81 ?x81 ?x81 ?x81)) (* (- 1) (* ?x73 ?x73 ?x73 ?x81 ?x81 ?x81)) (* (- 1) (* ?x73 ?x73 ?x73 ?x81)) (* (- 1) (* ?x73 ?x73 ?x81 ?x81)) (* y00 ?x73 ?x73 ?x81 ?x81 ?x81))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x617 0)))))) :qid k!26))
 ))
 (let ((?x980 (lambda ((x Int) (y Int) )(let ((?x873 (* (- 3) (* x x y y y00))))
 (let ((?x871 (* (- 1) (* x x y y y y00))))
 (let ((?x870 (* 2 (* x y y y y00))))
 (let ((?x759 (* (- 1) (* y y y y00))))
 (let ((?x869 (* (- 3) (* y y y00))))
 (let ((?x610 (* x x y y)))
 (let ((?x643 (* (- 2) (* x y y))))
 (let ((?x604 (* y y)))
 (let ((?x81 (+ 1 y)))
 (let ((?x73 (+ (- 1) x)))
 (let ((?x498 (* ?x73 ?x73 ?x73 ?x81 ?x81 ?x81)))
 (let ((?x443 (* x x x)))
 (let ((?x461 (* (- 2) (* x x))))
 (let ((?x424 (* x x x y)))
 (let ((?x423 (* (- 1) (* x y))))
 (let ((?x426 (* (- 1) (* x x y))))
 (let ((?x404 (* ?x73 ?x73 ?x81 ?x81 ?x81 ?x81)))
 (let ((?x868 (* (- 1) (* x x y y y x00))))
 (let ((?x867 (* 2 (* x y y y x00))))
 (let ((?x866 (* (- 1) (* y y y x00))))
 (let ((?x865 (* (- 3) (* x x y y x00))))
 (let ((?x863 (* (- 3) (* y y x00))))
 (let ((?x862 (* (- 4) (* x x y x00))))
 (let ((?x860 (* (- 4) (* y x00))))
 (let ((?x859 (* (- 2) (* x x x00))))
 (let ((?x857 (* (- 2) (* x x y00))))
 (let ((?x855 (* (- 4) (* x x y y00))))
 (let ((?x852 (* (- 4) (* y y00))))
 (let ((?x850 (* (- 2) x00)))
 (let ((?x849 (* (- 2) y00)))
 (let ((?x971 (+ x y ?x849 ?x850 ?x852 (* 8 (* x y y00)) ?x855 (* 4 (* x y00)) ?x857 (* 4 (* x x00)) ?x859 ?x860 (* 8 (* x y x00)) ?x862 ?x863 (* 6 (* x y y x00)) ?x865 ?x866 ?x867 ?x868 ?x404 ?x426 ?x423 ?x424 ?x461 ?x443 ?x498 ?x604 ?x643 ?x610 ?x869 ?x759 ?x870 ?x871 (* 6 (* x y y y00)) ?x873)))
 (let (($x83 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x481 (and $x83 (not (= ?x971 0)))))
 (let ((?x617 (+ (* y00 ?x73 ?x73 ?x81) (* x00 ?x73 ?x73 ?x81) (* x00 ?x73 ?x73 ?x81 ?x81 ?x81) (* (- 1) ?x404) (* (- 1) ?x498) (* (- 1) (* ?x73 ?x73 ?x73 ?x81)) (* (- 1) (* ?x73 ?x73 ?x81 ?x81)) (* y00 ?x73 ?x73 ?x81 ?x81 ?x81))))
 (let (($x416 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x617 0)))))
 (rewrite (= $x416 $x481))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x54 (exists ((x Int) (y Int) )(! (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x39 (+ (* ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 x00 ?x35) (* ?x34 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x45 (- (- ?x39 (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x49 (+ (- (- ?x45 (* ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x34 ?x35 ?x35)) (* ?x34 ?x34 ?x35 ?x35 ?x35 y00))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0))))))))) :qid k!26))
 ))
 (let ((?x465 (lambda ((x Int) (y Int) )(let ((?x81 (+ 1 y)))
 (let ((?x73 (+ (- 1) x)))
 (let ((?x617 (+ (* y00 ?x73 ?x73 ?x81) (* x00 ?x73 ?x73 ?x81) (* x00 ?x73 ?x73 ?x81 ?x81 ?x81) (* (- 1) (* ?x73 ?x73 ?x81 ?x81 ?x81 ?x81)) (* (- 1) (* ?x73 ?x73 ?x73 ?x81 ?x81 ?x81)) (* (- 1) (* ?x73 ?x73 ?x73 ?x81)) (* (- 1) (* ?x73 ?x73 ?x81 ?x81)) (* y00 ?x73 ?x73 ?x81 ?x81 ?x81))))
 (let (($x416 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x617 0)))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x39 (+ (* ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 x00 ?x35) (* ?x34 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x45 (- (- ?x39 (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x49 (+ (- (- ?x45 (* ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x34 ?x35 ?x35)) (* ?x34 ?x34 ?x35 ?x35 ?x35 y00))))
 (let (($x53 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0))))))
 (rewrite (= $x53 $x416)))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x568 (mp (mp @x55 (quant-intro (proof-bind ?x465) (= $x54 $x486)) $x486) (rewrite (= $x486 $x486)) $x486)))
 (let ((@x700 (mp~ (mp @x568 (quant-intro (proof-bind ?x980) (= $x486 $x978)) $x978) (sk (~ $x978 $x99)) $x99)))
 (let ((@x761 (mp @x700 (rewrite (= $x99 $x674)) $x674)))
 (let ((@x717 (and-elim @x761 $x383)))
 (let ((@x632 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x383) $x760)) @x717 $x760)))
 (let (($x606 (>= ?x660 0)))
 (let ((@x813 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x383) $x606)) @x717 $x606)))
 (let (($x368 (not (>= ?x903 0))))
 (let (($x470 (<= ?x903 0)))
 (let ((@x585 (lemma ((_ th-lemma arith) (hypothesis (not $x470)) @x813 @x632 @x813 @x632 false) $x470)))
 (let ((@x211 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x904 (not $x470) $x368)) (and-elim @x761 $x802) (or (not $x470) $x368))))
 ((_ th-lemma arith) (unit-resolution @x211 @x585 $x368) @x813 @x632 @x813 @x632 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             296
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              3
 :arith-row-summations      1
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.65
 :memory                    3.18
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1237499
 :num-checks                1
 :propagations              4
 :rlimit-count              4509
 :time                      0.01
 :total-time                0.01)
