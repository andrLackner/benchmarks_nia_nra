unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x276 (* (- 1) r!1)))
 (let ((?x68 (* y00 q00)))
 (let ((?x224 (+ r00 ?x68 ?x276 (* (- 1) (* y00 q!2)))))
 (let (($x512 (>= ?x224 0)))
 (let (($x211 (= ?x224 0)))
 (let ((?x580 (+ y00 ?x276 (* (- 3) (* y00 y00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 r!1 r!1 q!2 q!2 q!2)) (* (- 2) (* r!1 q!2)) (* (- 1) (* r!1 q!2 q!2)) (* (- 3) (* y00 y00 r!1 r!1 q!2 q!2)) (* y00 q!2 q!2) (* 2 (* y00 q!2)) (* y00 y00 y00 r!1) (* y00 y00 y00 r!1 q!2 q!2 q!2) (* (- 1) (* y00 y00 r!1 r!1)) (* 3 (* y00 y00 y00 r!1 q!2)) (* 3 (* y00 y00 y00 r!1 q!2 q!2)))))
 (let ((?x585 (* ?x580 (+ (* (- 1) r00) (* (- 1) ?x68) r!1 (* y00 q!2)))))
 (let (($x564 (= ?x585 0)))
 (let (($x538 (not $x564)))
 (let (($x106 (and (= (+ y00 (* (- 1) y!0)) 0) $x211 $x538)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x499 (* q!2 y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x71 (+ r!1 ?x64 ?x499 ?x78)))
 (let ((?x494 (+ ?x276 y00 (* 2 ?x499) (* (- 1) (* r!1 r!1 y00 y00)) (* (- 3) (* q!2 r!1 r!1 y00 y00)) (* (- 3) (* q!2 q!2 r!1 r!1 y00 y00)) (* (- 1) (* q!2 q!2 q!2 r!1 r!1 y00 y00)) (* (- 2) (* q!2 r!1)) (* (- 1) (* q!2 q!2 r!1)) (* q!2 q!2 y00) (* r!1 y00 y00 y00) (* 3 (* q!2 r!1 y00 y00 y00)) (* 3 (* q!2 q!2 r!1 y00 y00 y00)) (* q!2 q!2 q!2 r!1 y00 y00 y00))))
 (let (($x507 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x71 0) (not (= (* ?x494 ?x71) 0)))))
 (let (($x304 (exists ((q Int) (r Int) (y Int) )(! (let ((?x68 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x92 (+ r ?x64 ?x39 ?x78)))
 (let ((?x297 (* q q q r y00 y00 y00)))
 (let ((?x290 (* r y00 y00 y00)))
 (let ((?x234 (* q q y00)))
 (let ((?x265 (* (- 1) (* q q r))))
 (let ((?x275 (* (- 2) (* q r))))
 (let ((?x153 (* (- 1) (* q q q r r y00 y00))))
 (let ((?x139 (* (- 1) (* r r y00 y00))))
 (let ((?x272 (* 2 ?x39)))
 (let ((?x261 (* (- 1) r)))
 (let ((?x677 (+ ?x261 y00 ?x272 ?x139 (* (- 3) (* q r r y00 y00)) (* (- 3) (* q q r r y00 y00)) ?x153 ?x275 ?x265 ?x234 ?x290 (* 3 (* q r y00 y00 y00)) (* 3 (* q q r y00 y00 y00)) ?x297)))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y (* (- 1) y00)) 0)))
 (and $x74 $x97 (not (= (* ?x677 ?x92) 0)))))))))))))))))))) :qid k!29))
 ))
 (let (($x301 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x316 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x292 (+ r ?x63)))
 (let ((?x347 (+ 1 q)))
 (let ((?x238 (+ (* (- 1) (* y00 y00 ?x347 ?x347 ?x347 ?x292 ?x292)) (* (- 1) (* ?x347 ?x347 ?x292)) (* (- 1) (* y00 y00 y00 ?x347 ?x347 ?x347 ?x292)))))
 (let (($x293 (not (= (* ?x238 (+ r ?x63 ?x64 ?x316 (* y00 ?x347))) 0))))
 (let (($x303 (= (+ r ?x64 ?x316 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x303 $x293)))))))))) :qid k!29))
 ))
 (let ((?x291 (lambda ((q Int) (r Int) (y Int) )(let ((?x68 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x68)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x92 (+ r ?x64 ?x39 ?x78)))
 (let ((?x297 (* q q q r y00 y00 y00)))
 (let ((?x290 (* r y00 y00 y00)))
 (let ((?x234 (* q q y00)))
 (let ((?x265 (* (- 1) (* q q r))))
 (let ((?x275 (* (- 2) (* q r))))
 (let ((?x153 (* (- 1) (* q q q r r y00 y00))))
 (let ((?x139 (* (- 1) (* r r y00 y00))))
 (let ((?x272 (* 2 ?x39)))
 (let ((?x261 (* (- 1) r)))
 (let ((?x677 (+ ?x261 y00 ?x272 ?x139 (* (- 3) (* q r r y00 y00)) (* (- 3) (* q q r r y00 y00)) ?x153 ?x275 ?x265 ?x234 ?x290 (* 3 (* q r y00 y00 y00)) (* 3 (* q q r y00 y00 y00)) ?x297)))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y (* (- 1) y00)) 0)))
 (let (($x686 (and $x74 $x97 (not (= (* ?x677 ?x92) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x316 (* (- 1) ?x36)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x292 (+ r ?x63)))
 (let ((?x347 (+ 1 q)))
 (let ((?x238 (+ (* (- 1) (* y00 y00 ?x347 ?x347 ?x347 ?x292 ?x292)) (* (- 1) (* ?x347 ?x347 ?x292)) (* (- 1) (* y00 y00 y00 ?x347 ?x347 ?x347 ?x292)))))
 (let (($x293 (not (= (* ?x238 (+ r ?x63 ?x64 ?x316 (* y00 ?x347))) 0))))
 (let (($x303 (= (+ r ?x64 ?x316 (* y00 q)) 0)))
 (let (($x295 (and (= (+ y00 (* (- 1) y)) 0) $x303 $x293)))
 (rewrite (= $x295 $x686))))))))))))))))))))))))))))))
 ))
 (let (($x315 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x316 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x292 (+ r ?x63)))
 (let ((?x347 (+ 1 q)))
 (let ((?x238 (+ (* (- 1) (* y00 y00 ?x347 ?x347 ?x347 ?x292 ?x292)) (* (- 1) (* ?x347 ?x347 ?x292)) (* (- 1) (* y00 y00 y00 ?x347 ?x347 ?x347 ?x292)))))
 (let (($x293 (not (= (* ?x238 (+ r ?x63 ?x64 ?x316 (* y00 ?x347))) 0))))
 (let (($x303 (= (+ r ?x64 ?x316 (* y00 q)) 0)))
 (and (= (+ ?x63 y) 0) $x303 $x293)))))))))) :qid k!29))
 ))
 (let ((?x330 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x316 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x292 (+ r ?x63)))
 (let ((?x347 (+ 1 q)))
 (let ((?x238 (+ (* (- 1) (* y00 y00 ?x347 ?x347 ?x347 ?x292 ?x292)) (* (- 1) (* ?x347 ?x347 ?x292)) (* (- 1) (* y00 y00 y00 ?x347 ?x347 ?x347 ?x292)))))
 (let (($x293 (not (= (* ?x238 (+ r ?x63 ?x64 ?x316 (* y00 ?x347))) 0))))
 (let (($x303 (= (+ r ?x64 ?x316 (* y00 q)) 0)))
 (let (($x295 (and (= (+ y00 (* (- 1) y)) 0) $x303 $x293)))
 (let (($x302 (and (= (+ ?x63 y) 0) $x303 $x293)))
 (rewrite (= $x302 $x295))))))))))))))
 ))
 (let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x51 (- (* (- 1) ?x45 ?x45 ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x42))))
 (let ((?x53 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) (- ?x51 (* ?x45 ?x45 ?x45 ?x42 y00 y00 y00)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x53 0)))))))) :qid k!29))
 ))
 (let ((?x298 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x316 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x292 (+ r ?x63)))
 (let ((?x347 (+ 1 q)))
 (let ((?x238 (+ (* (- 1) (* y00 y00 ?x347 ?x347 ?x347 ?x292 ?x292)) (* (- 1) (* ?x347 ?x347 ?x292)) (* (- 1) (* y00 y00 y00 ?x347 ?x347 ?x347 ?x292)))))
 (let (($x293 (not (= (* ?x238 (+ r ?x63 ?x64 ?x316 (* y00 ?x347))) 0))))
 (let (($x303 (= (+ r ?x64 ?x316 (* y00 q)) 0)))
 (let (($x302 (and (= (+ ?x63 y) 0) $x303 $x293)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x51 (- (* (- 1) ?x45 ?x45 ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x42))))
 (let ((?x53 (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) (- ?x51 (* ?x45 ?x45 ?x45 ?x42 y00 y00 y00)))))
 (let (($x57 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x53 0))))))
 (rewrite (= $x57 $x302))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x318 (mp (mp @x59 (quant-intro (proof-bind ?x298) (= $x58 $x315)) $x315) (rewrite (= $x315 $x315)) $x315)))
 (let ((@x392 (mp (mp @x318 (quant-intro (proof-bind ?x330) (= $x315 $x301)) $x301) (quant-intro (proof-bind ?x291) (= $x301 $x304)) $x304)))
 (let ((@x604 (mp (mp~ @x392 (sk (~ $x304 $x507)) $x507) (rewrite (= $x507 $x106)) $x106)))
 (let ((@x644 (and-elim @x604 $x211)))
 (let ((@x693 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x211) $x512)) @x644 $x512)))
 (let (($x513 (<= ?x224 0)))
 (let ((@x637 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x211) $x513)) @x644 $x513)))
 (let (($x523 (not (<= ?x585 0))))
 (let (($x492 (>= ?x585 0)))
 (let ((@x520 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x564 $x523 (not $x492))) (and-elim @x604 $x538) (or $x523 (not $x492)))))
 (let ((@x462 (unit-resolution @x520 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x492)) @x637 @x693 false) $x492) $x523)))
 ((_ th-lemma arith farkas 1 1 1) @x462 @x637 @x693 false))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             78
 :arith-nonlinear-bounds    4
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.61
 :memory                    3.14
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1108473
 :num-checks                1
 :propagations              6
 :rlimit-count              2238
 :time                      0.01
 :total-time                0.01)
