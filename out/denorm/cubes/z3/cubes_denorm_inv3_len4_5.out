unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x204 (* (- 1) k!2)))
 (let ((?x195 (+ (* 3 (* n!0 n!0)) ?x204 (* 3 n!0))))
 (let (($x322 (<= ?x195 (- 1))))
 (let (($x511 (= ?x195 (- 1))))
 (let ((?x171 (* (- 3) c!3)))
 (let ((?x313 (* m!1 n!0)))
 (let ((?x507 (* 2 n!0)))
 (let ((?x155 (* (- 3) k!2)))
 (let ((?x137 (* k!2 n!0)))
 (let ((?x386 (+ 3 ?x137 ?x155 ?x507 ?x313 ?x171)))
 (let ((?x274 (+ k!2 c!3)))
 (let ((?x199 (+ m!1 k!2)))
 (let ((?x146 (+ 6 m!1)))
 (let ((?x509 (+ 1 n!0)))
 (let ((?x344 (+ (* (- 1) (* ?x509 ?x509 ?x146 ?x146 ?x146 ?x274 ?x274)) (* ?x509 ?x146 ?x146 ?x146 ?x199 ?x199 ?x274 ?x274) (* (- 1) (* ?x509 ?x509 ?x509 ?x146 ?x146 ?x199 ?x199 ?x274 ?x274)) (* (- 1) (* ?x146 ?x146 ?x146 ?x199 ?x199 ?x274)))))
 (let ((?x95 (* ?x344 ?x386)))
 (let (($x381 (= ?x95 0)))
 (let (($x325 (not $x381)))
 (let ((?x210 (+ ?x137 ?x204 ?x507 ?x171)))
 (let (($x275 (= ?x210 (- 1))))
 (let ((?x183 (* 18 c!3)))
 (let ((?x282 (* (- 9) n!0)))
 (let ((?x377 (* 5 k!2)))
 (let ((?x132 (* (- 1) (* k!2 k!2))))
 (let ((?x252 (+ m!1 (* (- 6) n!0))))
 (let (($x127 (= ?x252 6)))
 (let (($x390 (and $x127 (= (+ (* 9 (* n!0 c!3)) ?x132 ?x377 ?x282 ?x183) 4) $x275 $x511 $x325)))
 (let ((?x312 (* (- 1) (* ?x509 ?x509 ?x146 ?x146 ?x146 (+ c!3 k!2) (+ c!3 k!2)))))
 (let ((?x508 (+ c!3 k!2)))
 (let ((?x135 (+ k!2 m!1)))
 (let ((?x170 (+ (* (- 1) (* ?x509 ?x509 ?x509 ?x146 ?x146 ?x135 ?x135 ?x508 ?x508)) (* (- 1) (* ?x146 ?x146 ?x146 ?x135 ?x135 ?x508)) (* ?x509 ?x146 ?x146 ?x146 ?x135 ?x135 ?x508 ?x508) ?x312)))
 (let (($x351 (and $x127 (= (+ ?x183 ?x377 ?x282 ?x132 (* 9 (* c!3 n!0))) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x137)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x170 (+ 3 ?x171 ?x155 ?x507 ?x137 ?x313)) 0)))))
 (let (($x397 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x222 (* (- 3) c)))
 (let ((?x410 (+ 3 ?x222 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x417 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x497 (* (- 1) (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x68 ?x68))))
 (let ((?x71 (+ k m)))
 (let ((?x428 (* ?x342 ?x417 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68)))
 (let ((?x414 (* (- 1) (* ?x417 ?x417 ?x417 ?x71 ?x71 ?x68))))
 (let ((?x393 (* (- 1) (* ?x342 ?x342 ?x342 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* (+ ?x393 ?x414 ?x428 ?x497) ?x410) 0)))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x358 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x222 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x222 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x417 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x428 (* ?x342 ?x417 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68)))
 (let ((?x497 (* (- 1) (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x68 ?x68))))
 (let ((?x414 (* (- 1) (* ?x417 ?x417 ?x417 ?x71 ?x71 ?x68))))
 (let ((?x393 (* (- 1) (* ?x342 ?x342 ?x342 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68))))
 (let (($x157 (not (= (* (+ ?x393 ?x414 ?x497 ?x428) ?x367) 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x191 $x143 $x157))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x248 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x222 (* (- 3) c)))
 (let ((?x410 (+ 3 ?x222 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x417 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x497 (* (- 1) (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x68 ?x68))))
 (let ((?x71 (+ k m)))
 (let ((?x428 (* ?x342 ?x417 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68)))
 (let ((?x414 (* (- 1) (* ?x417 ?x417 ?x417 ?x71 ?x71 ?x68))))
 (let ((?x393 (* (- 1) (* ?x342 ?x342 ?x342 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x133 (and $x125 $x209 $x261 $x299 (not (= (* (+ ?x393 ?x414 ?x428 ?x497) ?x410) 0)))))
 (let ((?x444 (* (+ ?x393 ?x414 ?x497 ?x428) (+ 3 ?x222 (* (- 4) k) (* ?x342 ?x71) (* (- 1) m) ?x59))))
 (let (($x157 (not (= ?x444 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x503 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x191 $x143 $x157)))
 (rewrite (= $x503 $x133))))))))))))))))))))))))))))))
 ))
 (let (($x158 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x222 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x222 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x417 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x428 (* ?x342 ?x417 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68)))
 (let ((?x497 (* (- 1) (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x68 ?x68))))
 (let ((?x414 (* (- 1) (* ?x417 ?x417 ?x417 ?x71 ?x71 ?x68))))
 (let ((?x393 (* (- 1) (* ?x342 ?x342 ?x342 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68))))
 (let (($x157 (not (= (* (+ ?x393 ?x414 ?x497 ?x428) ?x367) 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x331 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= ?x331 (- 4)) (= (+ ?x222 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 $x157)))))))))))))))))) :qid k!34))
 ))
 (let ((?x359 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x222 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x222 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x417 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x428 (* ?x342 ?x417 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68)))
 (let ((?x497 (* (- 1) (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x68 ?x68))))
 (let ((?x414 (* (- 1) (* ?x417 ?x417 ?x417 ?x71 ?x71 ?x68))))
 (let ((?x393 (* (- 1) (* ?x342 ?x342 ?x342 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68))))
 (let (($x157 (not (= (* (+ ?x393 ?x414 ?x497 ?x428) ?x367) 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x503 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x191 $x143 $x157)))
 (let ((?x48 (* 9 n)))
 (let ((?x331 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x181 (and $x125 (= ?x331 (- 4)) (= (+ ?x222 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 $x157)))
 (rewrite (= $x181 $x503)))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (- (* (- 1) ?x68 ?x68 ?x71 ?x71 ?x79 ?x79 ?x72 ?x72 ?x72) (* ?x68 ?x71 ?x71 ?x79 ?x79 ?x79))))
 (let ((?x86 (+ (- ?x83 (* ?x68 ?x68 ?x79 ?x79 ?x79 ?x72 ?x72)) (* ?x68 ?x68 ?x71 ?x71 ?x79 ?x79 ?x79 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x86) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x160 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x222 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x222 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x417 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x428 (* ?x342 ?x417 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68)))
 (let ((?x497 (* (- 1) (* ?x342 ?x342 ?x417 ?x417 ?x417 ?x68 ?x68))))
 (let ((?x414 (* (- 1) (* ?x417 ?x417 ?x417 ?x71 ?x71 ?x68))))
 (let ((?x393 (* (- 1) (* ?x342 ?x342 ?x342 ?x417 ?x417 ?x71 ?x71 ?x68 ?x68))))
 (let (($x157 (not (= (* (+ ?x393 ?x414 ?x497 ?x428) ?x367) 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x331 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x181 (and $x125 (= ?x331 (- 4)) (= (+ ?x222 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 $x157)))
 (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x83 (- (* (- 1) ?x68 ?x68 ?x71 ?x71 ?x79 ?x79 ?x72 ?x72 ?x72) (* ?x68 ?x71 ?x71 ?x79 ?x79 ?x79))))
 (let ((?x86 (+ (- ?x83 (* ?x68 ?x68 ?x79 ?x79 ?x79 ?x72 ?x72)) (* ?x68 ?x68 ?x71 ?x71 ?x79 ?x79 ?x79 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x86) 0))))))
 (rewrite (= $x91 $x181)))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x345 (mp (mp @x93 (quant-intro (proof-bind ?x160) (= $x92 $x158)) $x158) (rewrite (= $x158 $x158)) $x158)))
 (let ((@x202 (mp (mp @x345 (quant-intro (proof-bind ?x359) (= $x158 $x358)) $x358) (quant-intro (proof-bind ?x248) (= $x358 $x397)) $x397)))
 (let ((@x237 (mp (mp~ @x202 (sk (~ $x397 $x351)) $x351) (rewrite (= $x351 $x390)) $x390)))
 (let ((@x283 (and-elim @x237 $x511)))
 (let ((@x328 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x511) $x322)) @x283 $x322)))
 (let (($x197 (>= ?x195 (- 1))))
 (let ((@x229 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x511) $x197)) @x283 $x197)))
 (let (($x293 (<= ?x252 6)))
 (let ((@x106 (and-elim @x237 $x127)))
 (let ((@x111 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x127) $x293)) @x106 $x293)))
 (let (($x380 (>= ?x252 6)))
 (let ((@x123 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x127) $x380)) @x106 $x380)))
 (let (($x303 (<= ?x210 (- 1))))
 (let ((@x96 (and-elim @x237 $x275)))
 (let ((@x190 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x275) $x303)) @x96 $x303)))
 (let (($x566 (>= ?x210 (- 1))))
 (let ((@x327 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x275) $x566)) @x96 $x566)))
 (let (($x482 (>= ?x386 0)))
 (let ((@x1043 ((_ th-lemma arith) (hypothesis (not $x482)) @x123 @x111 @x327 @x190 @x229 @x328 false)))
 (let (($x1067 (not (<= ?x95 0))))
 (let (($x251 (>= ?x95 0)))
 (let (($x1034 (>= ?x344 0)))
 (let (($x865 (not $x1034)))
 (let (($x295 (not $x251)))
 (let ((@x110 (hypothesis $x295)))
 (let (($x477 (<= ?x344 0)))
 (let ((@x419 ((_ th-lemma arith) @x110 (hypothesis (not $x477)) @x327 @x190 @x327 @x190 @x327 @x190 @x123 @x111 @x327 @x190 @x229 @x328 false)))
 (let ((@x1038 ((_ th-lemma arith farkas 1 1 1) @x110 (hypothesis $x1034) (unit-resolution (lemma @x419 (or $x477 $x251)) @x110 $x477) false)))
 (let ((@x1029 ((_ th-lemma arith) @x110 (unit-resolution (lemma @x1038 (or $x865 $x251)) @x110 $x865) @x123 @x111 @x327 @x190 @x229 @x328 false)))
 (let ((@x1070 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x381 $x1067 $x295)) (and-elim @x237 $x325) (or $x1067 $x295))))
 (let ((@x1129 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x1070 (lemma @x1029 $x251) $x1067) (lemma @x1043 $x482) (hypothesis (<= ?x386 0)) false)))
 ((_ th-lemma arith) (lemma @x1129 (not (<= ?x386 0))) @x229 @x328 @x229 @x328 @x327 @x190 @x229 @x328 @x123 @x111 @x229 @x328 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 118
 :arith-assert-diseq        16
 :arith-assert-lower        1117
 :arith-assert-upper        427
 :arith-bound-prop          105
 :arith-branch-var          23
 :arith-conflicts           53
 :arith-eq-adapter          17
 :arith-fixed-eqs           132
 :arith-gcd-tests           313
 :arith-gomory-cuts         13
 :arith-grobner             129
 :arith-ineq-splits         23
 :arith-max-min             8205
 :arith-nonlinear-bounds    107
 :arith-nonlinear-horner    1533
 :arith-num-rows            19
 :arith-offset-eqs          6
 :arith-patches             54
 :arith-patches_succ        9
 :arith-pivots              3565
 :arith-pseudo-nonlinear    110
 :arith-row-summations      25464
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    19
 :conflicts                 55
 :decisions                 380
 :del-clause                249
 :final-checks              307
 :max-memory                4.20
 :memory                    3.24
 :minimized-lits            24
 :mk-bool-var               557
 :mk-clause                 493
 :num-allocs                78090300
 :num-checks                1
 :propagations              951
 :rlimit-count              2745295
 :time                      0.77
 :total-time                0.78)
