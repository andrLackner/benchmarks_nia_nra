unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x167 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x127 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 ?x167 (* (- 1) (* v!0 v!0)) (* (- 4) r!2) (* (- 2) u!1) (* 2 v!0))))
 (let (($x103 (>= ?x127 0)))
 (let (($x157 (= ?x127 0)))
 (let ((?x166 (* (- 2) v!0)))
 (let ((?x175 (* 2 u!1)))
 (let ((?x439 (* 4 r!2)))
 (let ((?x233 (* v!0 v!0)))
 (let ((?x249 (* (- 1) ?x167)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x186 (+ ?x102 ?x118 ?x41 ?x46 ?x194 ?x249 ?x233 ?x439 ?x175 ?x166)))
 (let ((?x273 (* (- 4) (* u!1 v!0))))
 (let ((?x384 (* (- 4) (* r!2 u!1 v!0))))
 (let ((?x382 (* u!1 u!1 v!0)))
 (let ((?x161 (* (- 4) ?x382)))
 (let ((?x192 (* (- 1) (* u!1 u!1 u!1))))
 (let ((?x456 (* (- 1) (* u!1 u!1 u!1 v!0))))
 (let ((?x165 (* (- 4) (* r!2 v!0))))
 (let ((?x381 (* (- 12) u!1)))
 (let ((?x287 (* (- 6) ?x167)))
 (let ((?x170 (* (- 1) (* r!2 u!1 u!1 v!0))))
 (let ((?x300 (* (+ (- 8) ?x170 ?x287 ?x381 ?x165 ?x456 ?x192 ?x161 ?x384 ?x273) ?x186)))
 (let (($x298 (= ?x300 0)))
 (let (($x301 (not $x298)))
 (let ((?x201 (* (- 2) (* r!2 u!1 u!1))))
 (let ((?x466 (* u!1 u!1 v!0 v!0)))
 (let ((?x465 (* 2 ?x382)))
 (let ((?x274 (* (+ ?x170 ?x192 ?x465 ?x466 ?x201) ?x186)))
 (let (($x105 (= ?x274 0)))
 (let (($x255 (or (not $x105) $x301)))
 (let (($x164 (and $x157 $x255)))
 (let ((?x318 (+ ?x439 ?x175 ?x166 ?x102 ?x118 ?x41 ?x249 ?x233 ?x46 ?x194)))
 (let (($x212 (= (* (+ (- 8) ?x381 ?x287 ?x192 ?x161 ?x384 ?x273 ?x165 ?x170 ?x456) ?x318) 0)))
 (let (($x109 (or (not $x212) (not (= (* (+ ?x192 ?x465 ?x170 ?x466 ?x201) ?x318) 0)))))
 (let (($x181 (and (= ?x318 0) $x109)))
 (let (($x487 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x330 (* (- 1) (* r u u v))))
 (let ((?x68 (* u u u)))
 (let ((?x341 (* (- 1) ?x68)))
 (let ((?x493 (+ ?x341 (* 2 (* u u v)) ?x330 (* u u v v) (* (- 2) (* r u u)))))
 (let ((?x423 (* (- 1) (* u u u v))))
 (let ((?x494 (* (- 6) ?x43)))
 (let ((?x503 (* (- 12) u)))
 (let ((?x163 (+ (- 8) ?x503 ?x494 ?x341 (* (- 4) (* u u v)) (* (- 4) (* r u v)) (* (- 4) (* u v)) (* (- 4) (* r v)) ?x330 ?x423)))
 (let (($x205 (= ?x200 0)))
 (and $x205 (or (not (= (* ?x163 ?x200) 0)) (not (= (* ?x493 ?x200) 0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x111 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x490 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x68 (* u u u)))
 (let ((?x341 (* (- 1) ?x68)))
 (let ((?x508 (+ (* (- 1) (* (+ 2 v) (+ r (* (- 1) v)) u u)) ?x341)))
 (let ((?x45 (* v v)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x340 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x446 (+ (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u))))))
 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= (* ?x446 ?x340) 0)) (not (= (* ?x508 ?x490) 0)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x458 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x330 (* (- 1) (* r u u v))))
 (let ((?x68 (* u u u)))
 (let ((?x341 (* (- 1) ?x68)))
 (let ((?x493 (+ ?x341 (* 2 (* u u v)) ?x330 (* u u v v) (* (- 2) (* r u u)))))
 (let ((?x423 (* (- 1) (* u u u v))))
 (let ((?x494 (* (- 6) ?x43)))
 (let ((?x503 (* (- 12) u)))
 (let ((?x163 (+ (- 8) ?x503 ?x494 ?x341 (* (- 4) (* u u v)) (* (- 4) (* r u v)) (* (- 4) (* u v)) (* (- 4) (* r v)) ?x330 ?x423)))
 (let (($x205 (= ?x200 0)))
 (let (($x349 (and $x205 (or (not (= (* ?x163 ?x200) 0)) (not (= (* ?x493 ?x200) 0))))))
 (let ((?x490 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x508 (+ (* (- 1) (* (+ 2 v) (+ r (* (- 1) v)) u u)) ?x341)))
 (let ((?x340 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x446 (+ (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u))))))
 (let (($x169 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= (* ?x446 ?x340) 0)) (not (= (* ?x508 ?x490) 0))))))
 (rewrite (= $x169 $x349)))))))))))))))))))))))))))))))
 ))
 (let (($x94 (exists ((r Int) (u Int) (v Int) )(! (let ((?x88 (- (* (- 1) (+ r u) (+ u 2) (+ u 2) v) (* (+ u 2) (+ u 2) (+ u 2)))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x68 (* u u u)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x70 (* (- ?x63 ?x48) (- (* (- 1) (- r v) u u (+ v 2)) ?x68))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x70 0)) (not (= (* (- ?x84 ?x48) ?x88) 0))))))))))))))))))) :qid k!28))
 ))
 (let ((?x171 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x490 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x68 (* u u u)))
 (let ((?x341 (* (- 1) ?x68)))
 (let ((?x508 (+ (* (- 1) (* (+ 2 v) (+ r (* (- 1) v)) u u)) ?x341)))
 (let ((?x45 (* v v)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x340 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x446 (+ (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u) v)) (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u))))))
 (let (($x169 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= (* ?x446 ?x340) 0)) (not (= (* ?x508 ?x490) 0))))))
 (let ((?x88 (- (* (- 1) (+ r u) (+ u 2) (+ u 2) v) (* (+ u 2) (+ u 2) (+ u 2)))))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x70 (* (- ?x63 ?x48) (- (* (- 1) (- r v) u u (+ v 2)) ?x68))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x93 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x70 0)) (not (= (* (- ?x84 ?x48) ?x88) 0))))))
 (rewrite (= $x93 $x169)))))))))))))))))))))))))))))))
 ))
 (let ((@x95 (asserted $x94)))
 (let ((@x491 (mp (mp @x95 (quant-intro (proof-bind ?x171) (= $x94 $x111)) $x111) (rewrite (= $x111 $x111)) $x111)))
 (let ((@x315 (mp~ (mp @x491 (quant-intro (proof-bind ?x458) (= $x111 $x487)) $x487) (sk (~ $x487 $x181)) $x181)))
 (let ((@x128 (mp @x315 (rewrite (= $x181 $x164)) $x164)))
 (let ((@x355 (and-elim @x128 $x157)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x157) $x103)) @x355 $x103)))
 (let (($x380 (<= ?x127 0)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x157) $x380)) @x355 $x380)))
 (let (($x442 (not (<= ?x300 0))))
 (let (($x121 (>= ?x300 0)))
 (let (($x316 (>= ?x274 0)))
 (let (($x159 (<= ?x274 0)))
 (let ((@x160 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x105 (not $x159) (not $x316))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x159)) @x295 @x114 false) $x159) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x316)) @x295 @x114 false) $x316) $x105)))
 (let ((@x365 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x298 $x442 (not $x121))) (unit-resolution (and-elim @x128 $x255) @x160 $x301) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x121)) @x295 @x114 false) $x121) $x442)))
 ((_ th-lemma arith farkas 1 1 1) @x365 @x295 @x114 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        36
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             176
 :arith-nonlinear-bounds    19
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 33
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.58
 :memory                    3.08
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1114402
 :num-checks                1
 :propagations              14
 :rlimit-count              3016
 :time                      0.01
 :total-time                0.02)
