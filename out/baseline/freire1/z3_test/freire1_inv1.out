unsat
((set-logic NIA)
(proof
(let (($x195 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x95 (* (- 1) ?x36)))
 (let ((?x79 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x262 (+ (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x79 ?x95)))
 (let (($x268 (not (= ?x262 1))))
 (let ((?x30 (* r r)))
 (let ((?x58 (* (- 1) r)))
 (let ((?x135 (+ ?x58 r00 ?x30 ?x32 ?x79 ?x95)))
 (let (($x180 (= ?x135 0)))
 (and $x180 $x268))))))))))) :qid k!25))
 ))
 (let (($x144 (exists ((r Int) (x Int) )(! false :qid k!25))
 ))
 (let ((@x169 (elim-unused (= $x144 false))))
 (let ((?x243 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x95 (* (- 1) ?x36)))
 (let ((?x79 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x262 (+ (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x79 ?x95)))
 (let (($x268 (not (= ?x262 1))))
 (let ((?x30 (* r r)))
 (let ((?x58 (* (- 1) r)))
 (let ((?x135 (+ ?x58 r00 ?x30 ?x32 ?x79 ?x95)))
 (let (($x180 (= ?x135 0)))
 (let (($x189 (and $x180 $x268)))
 (let ((?x35 (* 2 x00)))
 (let (($x113 (= (+ r (* (- 2) x) (* (- 1) r00) (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x209 (not $x113)))
 (let (($x130 (and $x113 $x209)))
 (let ((@x137 (rewrite (= $x130 false))))
 (let ((@x115 (rewrite (= (= (+ ?x58 ?x32 r00 ?x30 ?x79 ?x95) 0) $x113))))
 (let ((@x148 (monotonicity (rewrite (= ?x135 (+ ?x58 ?x32 r00 ?x30 ?x79 ?x95))) (= $x180 (= (+ ?x58 ?x32 r00 ?x30 ?x79 ?x95) 0)))))
 (let ((@x156 (monotonicity (trans @x148 @x115 (= $x180 $x113)) (rewrite (= $x268 $x209)) (= $x189 $x130))))
 (trans @x156 @x137 (= $x189 false))))))))))))))))))))))
 ))
 (let ((@x216 (trans (quant-intro (proof-bind ?x243) (= $x195 $x144)) @x169 (= $x195 false))))
 (let (($x53 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x50 (not (= (- (- ?x46 ?x35) ?x36) 0))))
 (let (($x51 (or $x50)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let ((?x27 (- 1)))
 (let ((?x28 (* ?x27 r)))
 (let ((?x33 (+ ?x28 r00 ?x30 ?x32)))
 (let ((?x37 (- ?x33 ?x35)))
 (let ((?x38 (- ?x37 ?x36)))
 (let (($x40 (= ?x38 0)))
 (and $x40 $x51)))))))))))))) :qid k!25))
 ))
 (let ((?x198 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x95 (* (- 1) ?x36)))
 (let ((?x79 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x262 (+ (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x79 ?x95)))
 (let (($x268 (not (= ?x262 1))))
 (let ((?x30 (* r r)))
 (let ((?x58 (* (- 1) r)))
 (let ((?x135 (+ ?x58 r00 ?x30 ?x32 ?x79 ?x95)))
 (let (($x180 (= ?x135 0)))
 (let (($x189 (and $x180 $x268)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x50 (not (= (- (- ?x46 ?x35) ?x36) 0))))
 (let (($x51 (or $x50)))
 (let ((?x27 (- 1)))
 (let ((?x28 (* ?x27 r)))
 (let ((?x33 (+ ?x28 r00 ?x30 ?x32)))
 (let ((?x37 (- ?x33 ?x35)))
 (let ((?x38 (- ?x37 ?x36)))
 (let (($x40 (= ?x38 0)))
 (let (($x52 (and $x40 $x51)))
 (rewrite (= $x52 $x189)))))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x255 (mp (mp @x54 (quant-intro (proof-bind ?x198) (= $x53 $x195)) $x195) (rewrite (= $x195 $x195)) $x195)))
 (mp @x255 @x216 false))))))))))))

(:max-memory   19.33
 :memory       19.05
 :num-allocs   341493
 :num-checks   1
 :rlimit-count 337
 :time         0.01
 :total-time   0.02)
