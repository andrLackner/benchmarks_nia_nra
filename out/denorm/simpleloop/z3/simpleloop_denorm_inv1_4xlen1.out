unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x305 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x290 (>= ?x305 0)))
 (let (($x309 (= ?x305 0)))
 (let ((?x61 (+ 1 y!0)))
 (let ((?x325 (+ (- 1) x!1)))
 (let ((?x299 (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x325 ?x61 ?x61 ?x61 ?x61 ?x61 (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x298 (= ?x299 0)))
 (let (($x301 (not $x298)))
 (let (($x365 (and $x309 $x301)))
 (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x324 (+ x!1 y!0 ?x48 ?x55)))
 (let (($x319 (= (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x325 ?x61 ?x61 ?x61 ?x61 ?x61 ?x324) 0)))
 (let (($x320 (and (= ?x324 0) (not $x319))))
 (let (($x329 (exists ((x Int) (y Int) )(! (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x69 (+ x y ?x48 ?x55)))
 (let ((?x108 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let (($x102 (= (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x64 ?x108 ?x108 ?x108 ?x108 ?x108 ?x69) 0)))
 (let (($x74 (= ?x69 0)))
 (and $x74 (not $x102))))))))) :qid k!26))
 ))
 (let (($x70 (exists ((x Int) (y Int) )(! (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x68 (+ x ?x48 ?x55 y)))
 (let ((?x108 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let (($x222 (= (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x64 ?x108 ?x108 ?x108 ?x108 ?x108 ?x68) 0)))
 (and (= ?x68 0) (not $x222)))))))) :qid k!26))
 ))
 (let ((?x328 (lambda ((x Int) (y Int) )(let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x69 (+ x y ?x48 ?x55)))
 (let ((?x108 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let (($x102 (= (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x64 ?x108 ?x108 ?x108 ?x108 ?x108 ?x69) 0)))
 (let (($x74 (= ?x69 0)))
 (let (($x330 (and $x74 (not $x102))))
 (let ((?x68 (+ x ?x48 ?x55 y)))
 (let (($x222 (= (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x64 ?x108 ?x108 ?x108 ?x108 ?x108 ?x68) 0)))
 (let (($x77 (and (= ?x68 0) (not $x222))))
 (rewrite (= $x77 $x330))))))))))))))
 ))
 (let (($x45 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x39 (- 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x34 ?x34 ?x34 ?x38 ?x38 ?x38 ?x39 ?x34 ?x34 ?x38 ?x39 ?x34 ?x38)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)))))))) :qid k!26))
 ))
 (let ((?x78 (lambda ((x Int) (y Int) )(let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x68 (+ x ?x48 ?x55 y)))
 (let ((?x108 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let (($x222 (= (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x64 ?x108 ?x108 ?x108 ?x108 ?x108 ?x68) 0)))
 (let (($x77 (and (= ?x68 0) (not $x222))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x39 (- 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x34 ?x34 ?x34 ?x38 ?x38 ?x38 ?x39 ?x34 ?x34 ?x38 ?x39 ?x34 ?x38)))
 (let (($x44 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0))))))
 (rewrite (= $x44 $x77)))))))))))))))
 ))
 (let ((@x46 (asserted $x45)))
 (let ((@x83 (mp (mp @x46 (quant-intro (proof-bind ?x78) (= $x45 $x70)) $x70) (rewrite (= $x70 $x70)) $x70)))
 (let ((@x314 (mp~ (mp @x83 (quant-intro (proof-bind ?x328) (= $x70 $x329)) $x329) (sk (~ $x329 $x320)) $x320)))
 (let ((@x364 (mp @x314 (rewrite (= $x320 $x365)) $x365)))
 (let ((@x363 (and-elim @x364 $x309)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x290)) @x363 $x290)))
 (let (($x281 (<= ?x305 0)))
 (let ((@x280 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x281)) @x363 $x281)))
 (let (($x275 (not (>= ?x299 0))))
 (let (($x295 (<= ?x299 0)))
 (let ((@x265 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x298 (not $x295) $x275)) (and-elim @x364 $x301) (or (not $x295) $x275))))
 (let ((@x266 (unit-resolution @x265 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x295)) @x280 @x277 false) $x295) $x275)))
 ((_ th-lemma arith farkas 1 1 1) @x266 @x280 @x277 false))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        7
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          4
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             14
 :arith-nonlinear-horner    6
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 11
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                11
 :final-checks              2
 :max-memory                3.56
 :memory                    3.12
 :mk-bool-var               18
 :mk-clause                 15
 :num-allocs                1165000
 :num-checks                1
 :propagations              4
 :rlimit-count              739
 :time                      0.01
 :total-time                0.01)
