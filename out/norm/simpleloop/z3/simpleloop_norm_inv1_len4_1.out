unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x327 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x1427 (<= ?x327 0)))
 (let (($x1488 (= ?x327 0)))
 (let ((?x1429 (* x!1 x!1 x!1 x!1)))
 (let ((?x192 (* y!0 y!0 y!0 y!0)))
 (let ((?x191 (* (- 2) (* x!1 x!1 x!1))))
 (let ((?x179 (* x!1 x!1)))
 (let ((?x142 (* 3 (* y!0 y!0))))
 (let ((?x177 (* 4 (* y!0 y!0 y!0))))
 (let ((?x806 (+ ?x177 ?x142 ?x179 ?x191 ?x192 (* (- 1) (* y!0 y!0 y!0 x!1)) (* y!0 y!0 y!0 x!1 x!1) (* (- 3) (* y!0 y!0 x!1 x!1)) (* 4 (* y!0 x!1)) (* (- 3) (* y00 y!0)) (* (- 3) (* y!0 x!1 x!1)) (* 3 (* y!0 y!0 x!1)) (* (- 4) (* y00 y!0 y!0)) (* (- 1) (* y00 x!1)) (* (- 1) (* y00 y!0 y!0 x!1 x!1)) (* 2 (* y00 x!1 x!1)) (* (- 1) (* y00 y!0 y!0 y!0)) (* (- 3) (* x00 y!0)) (* y00 y!0 x!1) (* 2 (* x00 y!0 y!0 x!1)) (* (- 1) (* x00 y!0 x!1 x!1 x!1)) (* (- 1) (* y00 y!0 x!1 x!1 x!1)) (* (- 1) (* y00 x!1 x!1 x!1)) (* (- 1) (* x00 x!1)) (* 2 (* x00 x!1 x!1)) (* x00 y!0 x!1 x!1) (* (- 4) (* x00 y!0 y!0)) (* (- 1) (* x00 y!0 y!0 y!0)) (* (- 1) (* x00 y!0 y!0 x!1 x!1)) (* y!0 x!1 x!1 x!1 x!1) (* (- 1) (* x00 x!1 x!1 x!1)) (* 2 (* y!0 y!0 x!1 x!1 x!1)) (* 2 (* y00 y!0 y!0 x!1)) ?x1429 (* x00 y!0 x!1) (* y00 y!0 x!1 x!1))))
 (let (($x223 (= ?x806 0)))
 (let (($x666 (not $x223)))
 (let (($x284 (and $x1488 $x666)))
 (let ((?x1493 (+ (* 4 (* x!1 y!0)) (* (- 3) (* y!0 y00)) (* (- 4) (* y!0 y!0 y00)) (* 2 (* x!1 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y!0 y00)) (* (- 1) (* x!1 y00)) (* 2 (* x!1 x!1 y00)) (* x!1 x!1 y!0 y00) ?x142 ?x177 (* (- 1) (* x!1 y!0 y!0 y!0)) (* x!1 x!1 y!0 y!0 y!0) ?x179 (* (- 3) (* x!1 x!1 y!0)) (* 3 (* x!1 y!0 y!0)) (* (- 3) (* x!1 x!1 y!0 y!0)) (* 2 (* x!1 x!1 x!1 y!0 y!0)) ?x191 ?x192 (* x!1 y!0 x00) (* (- 1) (* y!0 y!0 y!0 y00)) (* (- 3) (* y!0 x00)) (* (- 1) (* x!1 x!1 x!1 y!0 y00)) (* (- 1) (* x!1 x!1 x!1 y00)) (* (- 1) (* x!1 x00)) (* 2 (* x!1 x!1 x00)) (* (- 1) (* x!1 x!1 x!1 x00)) (* x!1 x!1 y!0 x00) (* (- 1) (* x!1 x!1 x!1 y!0 x00)) (* (- 4) (* y!0 y!0 x00)) (* x!1 y!0 y00) (* (- 1) (* y!0 y!0 y!0 x00)) (* 2 (* x!1 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 y!0 x00)) (* x!1 x!1 x!1 x!1 y!0) ?x1429)))
 (let (($x1483 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x1493 0)))))
 (let (($x1300 (exists ((x Int) (y Int) )(! (let ((?x1460 (* x x x x)))
 (let ((?x1431 (* x x x x y)))
 (let ((?x1592 (* (- 1) (* x x y y x00))))
 (let ((?x1591 (* 2 (* x y y x00))))
 (let ((?x1590 (* (- 1) (* y y y x00))))
 (let ((?x1589 (* (- 4) (* y y x00))))
 (let ((?x1588 (* (- 1) (* x x x y x00))))
 (let ((?x1132 (* x x y x00)))
 (let ((?x1587 (* (- 1) (* x x x x00))))
 (let ((?x1305 (* (- 1) (* x x00))))
 (let ((?x1586 (* (- 1) (* x x x y00))))
 (let ((?x1585 (* (- 1) (* x x x y y00))))
 (let ((?x1584 (* (- 3) (* y x00))))
 (let ((?x1583 (* (- 1) (* y y y y00))))
 (let ((?x841 (* y y y y)))
 (let ((?x647 (* (- 2) (* x x x))))
 (let ((?x514 (* 2 (* x x x y y))))
 (let ((?x403 (* (- 3) (* x x y y))))
 (let ((?x400 (* 3 (* x y y))))
 (let ((?x397 (* (- 3) (* x x y))))
 (let ((?x273 (* x x)))
 (let ((?x262 (* x x y y y)))
 (let ((?x261 (* (- 1) (* x y y y))))
 (let ((?x871 (* 4 (* y y y))))
 (let ((?x329 (* 3 (* y y))))
 (let ((?x168 (* x x y y00)))
 (let ((?x156 (* (- 1) (* x y00))))
 (let ((?x1582 (* (- 1) (* x x y y y00))))
 (let ((?x1581 (* 2 (* x y y y00))))
 (let ((?x1580 (* (- 4) (* y y y00))))
 (let ((?x1579 (* (- 3) (* y y00))))
 (let ((?x1553 (* 4 (* x y))))
 (let ((?x1254 (+ ?x1553 ?x1579 ?x1580 ?x1581 ?x1582 ?x156 (* 2 (* x x y00)) ?x168 ?x329 ?x871 ?x261 ?x262 ?x273 ?x397 ?x400 ?x403 ?x514 ?x647 ?x841 (* x y x00) ?x1583 ?x1584 ?x1585 ?x1586 ?x1305 (* 2 (* x x x00)) ?x1587 ?x1132 ?x1588 ?x1589 (* x y y00) ?x1590 ?x1591 ?x1592 ?x1431 ?x1460)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x97 (not (= ?x1254 0))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1206 (exists ((x Int) (y Int) )(! (let ((?x1169 (+ 1 y)))
 (let ((?x1118 (+ (- 1) x)))
 (let ((?x1507 (+ (* ?x1118 ?x1169) (* y00 ?x1118 ?x1118 ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1118 ?x1169 ?x1169 ?x1169)) (* (- 2) (* ?x1118 ?x1118 ?x1118 ?x1169 ?x1169)) (* ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1169 ?x1169 ?x1169)) (* (- 1) (* ?x1169 ?x1169 ?x1169 ?x1169)) (* y00 ?x1169 ?x1169 ?x1169) (* (- 1) (* x00 ?x1169)) (* y00 ?x1118 ?x1118 ?x1118 ?x1169) (* x00 ?x1118 ?x1118 ?x1118 ?x1169) (* x00 ?x1169 ?x1169 ?x1169) (* (- 1) (* y00 ?x1169)) (* x00 ?x1118 ?x1118 ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1118 ?x1118 ?x1118 ?x1169)))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1507 0)))))) :qid k!26))
 ))
 (let ((?x1302 (lambda ((x Int) (y Int) )(let ((?x1460 (* x x x x)))
 (let ((?x1431 (* x x x x y)))
 (let ((?x1592 (* (- 1) (* x x y y x00))))
 (let ((?x1591 (* 2 (* x y y x00))))
 (let ((?x1590 (* (- 1) (* y y y x00))))
 (let ((?x1589 (* (- 4) (* y y x00))))
 (let ((?x1588 (* (- 1) (* x x x y x00))))
 (let ((?x1132 (* x x y x00)))
 (let ((?x1587 (* (- 1) (* x x x x00))))
 (let ((?x1305 (* (- 1) (* x x00))))
 (let ((?x1586 (* (- 1) (* x x x y00))))
 (let ((?x1585 (* (- 1) (* x x x y y00))))
 (let ((?x1584 (* (- 3) (* y x00))))
 (let ((?x1583 (* (- 1) (* y y y y00))))
 (let ((?x841 (* y y y y)))
 (let ((?x647 (* (- 2) (* x x x))))
 (let ((?x514 (* 2 (* x x x y y))))
 (let ((?x403 (* (- 3) (* x x y y))))
 (let ((?x400 (* 3 (* x y y))))
 (let ((?x397 (* (- 3) (* x x y))))
 (let ((?x273 (* x x)))
 (let ((?x262 (* x x y y y)))
 (let ((?x261 (* (- 1) (* x y y y))))
 (let ((?x871 (* 4 (* y y y))))
 (let ((?x329 (* 3 (* y y))))
 (let ((?x168 (* x x y y00)))
 (let ((?x156 (* (- 1) (* x y00))))
 (let ((?x1582 (* (- 1) (* x x y y y00))))
 (let ((?x1581 (* 2 (* x y y y00))))
 (let ((?x1580 (* (- 4) (* y y y00))))
 (let ((?x1579 (* (- 3) (* y y00))))
 (let ((?x1553 (* 4 (* x y))))
 (let ((?x1254 (+ ?x1553 ?x1579 ?x1580 ?x1581 ?x1582 ?x156 (* 2 (* x x y00)) ?x168 ?x329 ?x871 ?x261 ?x262 ?x273 ?x397 ?x400 ?x403 ?x514 ?x647 ?x841 (* x y x00) ?x1583 ?x1584 ?x1585 ?x1586 ?x1305 (* 2 (* x x x00)) ?x1587 ?x1132 ?x1588 ?x1589 (* x y y00) ?x1590 ?x1591 ?x1592 ?x1431 ?x1460)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x638 (and $x97 (not (= ?x1254 0)))))
 (let ((?x1169 (+ 1 y)))
 (let ((?x1118 (+ (- 1) x)))
 (let ((?x1507 (+ (* ?x1118 ?x1169) (* y00 ?x1118 ?x1118 ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1118 ?x1169 ?x1169 ?x1169)) (* (- 2) (* ?x1118 ?x1118 ?x1118 ?x1169 ?x1169)) (* ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1169 ?x1169 ?x1169)) (* (- 1) (* ?x1169 ?x1169 ?x1169 ?x1169)) (* y00 ?x1169 ?x1169 ?x1169) (* (- 1) (* x00 ?x1169)) (* y00 ?x1118 ?x1118 ?x1118 ?x1169) (* x00 ?x1118 ?x1118 ?x1118 ?x1169) (* x00 ?x1169 ?x1169 ?x1169) (* (- 1) (* y00 ?x1169)) (* x00 ?x1118 ?x1118 ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1118 ?x1118 ?x1118 ?x1169)))))
 (let (($x1205 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1507 0)))))
 (rewrite (= $x1205 $x638))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((x Int) (y Int) )(! (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (- (+ (* ?x34 ?x35) (* ?x34 ?x34 ?x35 ?x35 y00)) (* ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x48 (- (+ (- ?x42 (* 2 ?x34 ?x34 ?x34 ?x35 ?x35)) (* ?x35 ?x35)) (* ?x34 ?x35 ?x35 ?x35))))
 (let ((?x53 (- (+ (- ?x48 (* ?x35 ?x35 ?x35 ?x35)) (* ?x35 ?x35 ?x35 y00)) (* x00 ?x35))))
 (let ((?x57 (+ ?x53 (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35) (* x00 ?x35 ?x35 ?x35))))
 (let ((?x63 (- (+ (- ?x57 (* ?x35 y00)) (* ?x34 ?x34 x00 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x34 ?x35))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x63 0))))))))))) :qid k!26))
 ))
 (let ((?x1171 (lambda ((x Int) (y Int) )(let ((?x1169 (+ 1 y)))
 (let ((?x1118 (+ (- 1) x)))
 (let ((?x1507 (+ (* ?x1118 ?x1169) (* y00 ?x1118 ?x1118 ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1118 ?x1169 ?x1169 ?x1169)) (* (- 2) (* ?x1118 ?x1118 ?x1118 ?x1169 ?x1169)) (* ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1169 ?x1169 ?x1169)) (* (- 1) (* ?x1169 ?x1169 ?x1169 ?x1169)) (* y00 ?x1169 ?x1169 ?x1169) (* (- 1) (* x00 ?x1169)) (* y00 ?x1118 ?x1118 ?x1118 ?x1169) (* x00 ?x1118 ?x1118 ?x1118 ?x1169) (* x00 ?x1169 ?x1169 ?x1169) (* (- 1) (* y00 ?x1169)) (* x00 ?x1118 ?x1118 ?x1169 ?x1169) (* (- 1) (* ?x1118 ?x1118 ?x1118 ?x1118 ?x1169)))))
 (let (($x1205 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1507 0)))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (- (+ (* ?x34 ?x35) (* ?x34 ?x34 ?x35 ?x35 y00)) (* ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x48 (- (+ (- ?x42 (* 2 ?x34 ?x34 ?x34 ?x35 ?x35)) (* ?x35 ?x35)) (* ?x34 ?x35 ?x35 ?x35))))
 (let ((?x53 (- (+ (- ?x48 (* ?x35 ?x35 ?x35 ?x35)) (* ?x35 ?x35 ?x35 y00)) (* x00 ?x35))))
 (let ((?x57 (+ ?x53 (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35) (* x00 ?x35 ?x35 ?x35))))
 (let ((?x63 (- (+ (- ?x57 (* ?x35 y00)) (* ?x34 ?x34 x00 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x34 ?x35))))
 (let (($x67 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x63 0))))))
 (rewrite (= $x67 $x1205)))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x662 (mp (mp @x69 (quant-intro (proof-bind ?x1171) (= $x68 $x1206)) $x1206) (rewrite (= $x1206 $x1206)) $x1206)))
 (let ((@x1290 (mp~ (mp @x662 (quant-intro (proof-bind ?x1302) (= $x1206 $x1300)) $x1300) (sk (~ $x1300 $x1483)) $x1483)))
 (let ((@x1425 (mp @x1290 (rewrite (= $x1483 $x284)) $x284)))
 (let ((@x1520 (and-elim @x1425 $x1488)))
 (let ((@x311 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1488) $x1427)) @x1520 $x1427)))
 (let (($x769 (>= ?x327 0)))
 (let ((@x809 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1488) $x769)) @x1520 $x769)))
 (let (($x811 (not (>= ?x806 0))))
 (let (($x537 (<= ?x806 0)))
 (let ((@x814 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x223 (not $x537) $x811)) (and-elim @x1425 $x666) (or (not $x537) $x811))))
 (let ((@x815 (unit-resolution @x814 (lemma ((_ th-lemma arith) (hypothesis (not $x537)) @x809 @x311 false) $x537) $x811)))
 ((_ th-lemma arith) @x815 @x809 @x311 false)))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             310
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.80
 :memory                    3.28
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1263150
 :num-checks                1
 :propagations              4
 :rlimit-count              4910
 :time                      0.01
 :total-time                0.01)
