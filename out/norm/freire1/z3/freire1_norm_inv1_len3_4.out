unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x714 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x661 (* (- 1) ?x36)))
 (let ((?x587 (* (- 2) x00)))
 (let ((?x558 (+ r00 ?x587 ?x661 ?x714 (* 2 x!0) (* (- 1) r!1))))
 (let (($x493 (<= ?x558 0)))
 (let (($x559 (= ?x558 0)))
 (let ((?x245 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x224 (* r!1 r!1 r!1)))
 (let ((?x118 (* r!1 r!1 r!1 r!1)))
 (let ((?x362 (+ ?x118 ?x224 ?x245 (* (- 6) (* x!0 x!0)) (* (- 2) (* x00 r!1 r!1 r!1)) (* 3 (* r00 r00 x!0)) (* 2 (* r00 r00 x!0 r!1)) (* r00 r00 x!0 r!1 r!1) (* (- 4) (* x!0 x!0 r!1)) (* (- 4) (* x00 r!1 r!1)) (* 2 (* r00 r!1 r!1)) (* 4 (* x00 x!0 r!1)) (* (- 1) (* r00 x!0 r!1 r!1)) (* (- 3) (* r00 x!0)) (* x!0 r!1 r!1 r!1) (* 3 (* x!0 r!1 r!1)) (* (- 1) (* x!0 r!1 r!1 r!1 r!1)) (* 6 (* x00 x!0)) (* 2 (* x00 x!0 r!1 r!1)) (* 3 (* r00 r!1)) (* (- 6) (* x00 r!1)) (* (- 3) (* r00 r00 r!1)) (* 9 (* x!0 r!1)) (* (- 2) (* r00 r00 r!1 r!1)) (* (- 1) (* r00 r00 r!1 r!1 r!1)) (* (- 3) ?x714) (* (- 2) (* x!0 x!0 r!1 r!1)) (* r00 r!1 r!1 r!1) (* (- 2) (* r00 x!0 r!1)))))
 (let (($x900 (= ?x362 0)))
 (let (($x363 (not $x900)))
 (let (($x569 (and $x559 $x363)))
 (let ((?x480 (+ (* 3 ?x714) (* (- 6) (* x!0 x00)) (* (- 4) (* r!1 x!0 x00)) (* (- 2) (* r!1 r!1 x!0 x00)) (* (- 3) (* r!1 r00)) (* 3 (* x!0 r00)) (* 6 (* r!1 x00)) (* (- 9) (* r!1 x!0)) (* (- 3) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r!1 x!0)) (* (- 1) ?x224) (* (- 1) ?x118) (* r!1 r!1 r!1 r!1 x!0) (* (- 1) ?x245) (* 4 (* r!1 r!1 x00)) (* 2 (* r!1 r!1 r!1 x00)) (* 6 (* x!0 x!0)) (* 4 (* r!1 x!0 x!0)) (* 2 (* r!1 r!1 x!0 x!0)) (* 3 (* r!1 r00 r00)) (* 2 (* r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r00 r00) (* (- 3) (* x!0 r00 r00)) (* (- 2) (* r!1 x!0 r00 r00)) (* (- 1) (* r!1 r!1 x!0 r00 r00)) (* (- 2) (* r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r00)) (* 2 (* r!1 x!0 r00)) (* r!1 r!1 x!0 r00))))
 (let ((?x35 (* 2 x00)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x494 (and (= (+ r!1 (* (- 2) x!0) ?x125 (* (- 1) ?x714) ?x35 ?x36) 0) (not (= ?x480 0)))))
 (let (($x673 (exists ((r Int) (x Int) )(! (let ((?x935 (* r r x r00)))
 (let ((?x942 (* 2 (* r x r00))))
 (let ((?x925 (* (- 1) (* r r r r00))))
 (let ((?x941 (* (- 2) (* r r r00))))
 (let ((?x1011 (* (- 1) (* r r x r00 r00))))
 (let ((?x1010 (* (- 2) (* r x r00 r00))))
 (let ((?x773 (* r r r r00 r00)))
 (let ((?x1008 (* 2 (* r r r00 r00))))
 (let ((?x613 (* 2 (* r r x x))))
 (let ((?x1007 (* 4 (* r x x))))
 (let ((?x1006 (* 6 (* x x))))
 (let ((?x339 (* (- 1) (* r r r r r))))
 (let ((?x318 (* r r r r x)))
 (let ((?x263 (* (- 1) (* r r r r))))
 (let ((?x253 (* (- 1) (* r r r))))
 (let ((?x1003 (* (- 1) (* r r r x))))
 (let ((?x409 (* (- 3) (* r r x))))
 (let ((?x1002 (* (- 9) (* r x))))
 (let ((?x999 (* 3 (* x r00))))
 (let ((?x998 (* (- 3) (* r r00))))
 (let ((?x997 (* (- 2) (* r r x x00))))
 (let ((?x994 (* (- 6) (* x x00))))
 (let ((?x948 (+ (* 3 (* r r)) ?x994 (* (- 4) (* r x x00)) ?x997 ?x998 ?x999 (* 6 (* r x00)) ?x1002 ?x409 ?x1003 ?x253 ?x263 ?x318 ?x339 (* 4 (* r r x00)) (* 2 (* r r r x00)) ?x1006 ?x1007 ?x613 (* 3 (* r r00 r00)) ?x1008 ?x773 (* (- 3) (* x r00 r00)) ?x1010 ?x1011 ?x941 ?x925 ?x942 ?x935)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (and $x128 (not (= ?x948 0))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x588 (exists ((r Int) (x Int) )(! (let ((?x777 (* (- 1) (* r00 (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x649 (+ x ?x75)))
 (let ((?x628 (+ 1 r)))
 (let ((?x737 (+ (* 2 (* x00 ?x628 ?x628 ?x649)) (* (- 2) (* r00 ?x649)) (* ?x628 ?x628 ?x628 ?x649) (* (- 1) (* ?x628 ?x628 ?x628 ?x628 ?x649)) (* 2 (* ?x628 ?x649)) (* 2 (* r00 r00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649)) (* 4 (* x00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649 ?x649)) (* r00 r00 ?x628 ?x628 ?x649) (* (- 4) (* ?x649 ?x649)) ?x777)))
 (let (($x651 (not (= ?x737 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) $x651))))))))))))) :qid k!26))
 ))
 (let ((?x680 (lambda ((r Int) (x Int) )(let ((?x935 (* r r x r00)))
 (let ((?x942 (* 2 (* r x r00))))
 (let ((?x925 (* (- 1) (* r r r r00))))
 (let ((?x941 (* (- 2) (* r r r00))))
 (let ((?x1011 (* (- 1) (* r r x r00 r00))))
 (let ((?x1010 (* (- 2) (* r x r00 r00))))
 (let ((?x773 (* r r r r00 r00)))
 (let ((?x1008 (* 2 (* r r r00 r00))))
 (let ((?x613 (* 2 (* r r x x))))
 (let ((?x1007 (* 4 (* r x x))))
 (let ((?x1006 (* 6 (* x x))))
 (let ((?x339 (* (- 1) (* r r r r r))))
 (let ((?x318 (* r r r r x)))
 (let ((?x263 (* (- 1) (* r r r r))))
 (let ((?x253 (* (- 1) (* r r r))))
 (let ((?x1003 (* (- 1) (* r r r x))))
 (let ((?x409 (* (- 3) (* r r x))))
 (let ((?x1002 (* (- 9) (* r x))))
 (let ((?x999 (* 3 (* x r00))))
 (let ((?x998 (* (- 3) (* r r00))))
 (let ((?x997 (* (- 2) (* r r x x00))))
 (let ((?x994 (* (- 6) (* x x00))))
 (let ((?x948 (+ (* 3 (* r r)) ?x994 (* (- 4) (* r x x00)) ?x997 ?x998 ?x999 (* 6 (* r x00)) ?x1002 ?x409 ?x1003 ?x253 ?x263 ?x318 ?x339 (* 4 (* r r x00)) (* 2 (* r r r x00)) ?x1006 ?x1007 ?x613 (* 3 (* r r00 r00)) ?x1008 ?x773 (* (- 3) (* x r00 r00)) ?x1010 ?x1011 ?x941 ?x925 ?x942 ?x935)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (let (($x681 (and $x128 (not (= ?x948 0)))))
 (let ((?x777 (* (- 1) (* r00 (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x649 (+ x ?x75)))
 (let ((?x628 (+ 1 r)))
 (let ((?x737 (+ (* 2 (* x00 ?x628 ?x628 ?x649)) (* (- 2) (* r00 ?x649)) (* ?x628 ?x628 ?x628 ?x649) (* (- 1) (* ?x628 ?x628 ?x628 ?x628 ?x649)) (* 2 (* ?x628 ?x649)) (* 2 (* r00 r00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649)) (* 4 (* x00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649 ?x649)) (* r00 r00 ?x628 ?x628 ?x649) (* (- 4) (* ?x649 ?x649)) ?x777)))
 (let (($x651 (not (= ?x737 0))))
 (let (($x654 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) $x651)))
 (rewrite (= $x654 $x681)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x652 (exists ((r Int) (x Int) )(! (let ((?x777 (* (- 1) (* r00 (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x649 (+ x ?x75)))
 (let ((?x628 (+ 1 r)))
 (let ((?x737 (+ (* 2 (* x00 ?x628 ?x628 ?x649)) (* (- 2) (* r00 ?x649)) (* ?x628 ?x628 ?x628 ?x649) (* (- 1) (* ?x628 ?x628 ?x628 ?x628 ?x649)) (* 2 (* ?x628 ?x649)) (* 2 (* r00 r00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649)) (* 4 (* x00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649 ?x649)) (* r00 r00 ?x628 ?x628 ?x649) (* (- 4) (* ?x649 ?x649)) ?x777)))
 (let (($x651 (not (= ?x737 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x661 (* (- 1) ?x36)))
 (let ((?x587 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x75 r00 ?x30 ?x32 ?x587 ?x661) 0) $x651)))))))))))) :qid k!26))
 ))
 (let ((?x631 (lambda ((r Int) (x Int) )(let ((?x777 (* (- 1) (* r00 (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x649 (+ x ?x75)))
 (let ((?x628 (+ 1 r)))
 (let ((?x737 (+ (* 2 (* x00 ?x628 ?x628 ?x649)) (* (- 2) (* r00 ?x649)) (* ?x628 ?x628 ?x628 ?x649) (* (- 1) (* ?x628 ?x628 ?x628 ?x628 ?x649)) (* 2 (* ?x628 ?x649)) (* 2 (* r00 r00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649)) (* 4 (* x00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649 ?x649)) (* r00 r00 ?x628 ?x628 ?x649) (* (- 4) (* ?x649 ?x649)) ?x777)))
 (let (($x651 (not (= ?x737 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x654 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) $x651)))
 (let (($x668 (= (+ ?x75 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x662 (and $x668 $x651)))
 (rewrite (= $x662 $x654))))))))))))))))))
 ))
 (let (($x70 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x47 (+ (- (* 2 ?x41 ?x41 ?x42 x00) (* 2 r00 ?x42)) (* ?x41 ?x41 ?x41 ?x42))))
 (let ((?x52 (+ (- ?x47 (* ?x41 ?x41 ?x41 ?x41 ?x42)) (* 2 ?x41 ?x42) (* 2 r00 r00 ?x42))))
 (let ((?x59 (- (+ (- ?x52 (* 2 ?x41 ?x41 ?x42)) (* 4 ?x42 x00)) (* 2 ?x41 ?x41 ?x42 ?x42))))
 (let ((?x65 (- (- (+ ?x59 (* ?x41 ?x41 r00 r00 ?x42)) (* 4 ?x42 ?x42)) (* ?x41 ?x41 r00 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x65 0))))))))))))) :qid k!26))
 ))
 (let ((?x658 (lambda ((r Int) (x Int) )(let ((?x777 (* (- 1) (* r00 (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x649 (+ x ?x75)))
 (let ((?x628 (+ 1 r)))
 (let ((?x737 (+ (* 2 (* x00 ?x628 ?x628 ?x649)) (* (- 2) (* r00 ?x649)) (* ?x628 ?x628 ?x628 ?x649) (* (- 1) (* ?x628 ?x628 ?x628 ?x628 ?x649)) (* 2 (* ?x628 ?x649)) (* 2 (* r00 r00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649)) (* 4 (* x00 ?x649)) (* (- 2) (* ?x628 ?x628 ?x649 ?x649)) (* r00 r00 ?x628 ?x628 ?x649) (* (- 4) (* ?x649 ?x649)) ?x777)))
 (let (($x651 (not (= ?x737 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x661 (* (- 1) ?x36)))
 (let ((?x587 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x662 (and (= (+ ?x75 r00 ?x30 ?x32 ?x587 ?x661) 0) $x651)))
 (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x47 (+ (- (* 2 ?x41 ?x41 ?x42 x00) (* 2 r00 ?x42)) (* ?x41 ?x41 ?x41 ?x42))))
 (let ((?x52 (+ (- ?x47 (* ?x41 ?x41 ?x41 ?x41 ?x42)) (* 2 ?x41 ?x42) (* 2 r00 r00 ?x42))))
 (let ((?x59 (- (+ (- ?x52 (* 2 ?x41 ?x41 ?x42)) (* 4 ?x42 x00)) (* 2 ?x41 ?x41 ?x42 ?x42))))
 (let ((?x65 (- (- (+ ?x59 (* ?x41 ?x41 r00 r00 ?x42)) (* 4 ?x42 ?x42)) (* ?x41 ?x41 r00 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x69 (and (= ?x38 0) (or (not (= ?x65 0))))))
 (rewrite (= $x69 $x662)))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x653 (mp (mp @x71 (quant-intro (proof-bind ?x658) (= $x70 $x652)) $x652) (rewrite (= $x652 $x652)) $x652)))
 (let ((@x644 (mp (mp @x653 (quant-intro (proof-bind ?x631) (= $x652 $x588)) $x588) (quant-intro (proof-bind ?x680) (= $x588 $x673)) $x673)))
 (let ((@x902 (mp (mp~ @x644 (sk (~ $x673 $x494)) $x494) (rewrite (= $x494 $x569)) $x569)))
 (let ((@x944 (and-elim @x902 $x559)))
 (let ((@x523 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x559) $x493)) @x944 $x493)))
 (let (($x497 (>= ?x558 0)))
 (let ((@x515 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x559) $x497)) @x944 $x497)))
 (let (($x609 (not (>= ?x362 0))))
 (let (($x498 (<= ?x362 0)))
 (let ((@x288 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x900 (not $x498) $x609)) (and-elim @x902 $x363) (or (not $x498) $x609))))
 (let ((@x564 (unit-resolution @x288 (lemma ((_ th-lemma arith) (hypothesis (not $x498)) @x515 @x523 false) $x498) $x609)))
 ((_ th-lemma arith) @x564 @x515 @x523 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             260
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.72
 :memory                    3.22
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1168528
 :num-checks                1
 :propagations              4
 :rlimit-count              4049
 :time                      0.01
 :total-time                0.01)
