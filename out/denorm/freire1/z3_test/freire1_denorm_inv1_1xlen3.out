unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x315 (* 2 x!0)))
 (let ((?x397 (* r!1 r!1)))
 (let ((?x394 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x61 (+ r00 ?x84 ?x100 ?x394 ?x397 ?x315)))
 (let (($x180 (<= ?x61 0)))
 (let (($x272 (= ?x61 0)))
 (let ((?x344 (* 4 ?x397)))
 (let ((?x287 (* 4 (* r!1 r!1 r!1))))
 (let ((?x385 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x384 (* r!1 r!1 r!1 x!0 x!0)))
 (let ((?x334 (* 3 (* r!1 x!0 x!0))))
 (let ((?x327 (* (- 2) (* r!1 x!0))))
 (let ((?x345 (* 3 r!1)))
 (let ((?x342 (+ ?x394 x!0)))
 (let ((?x343 (+ 1 r!1)))
 (let ((?x341 (* ?x343 ?x343 ?x343 ?x342 ?x342 ?x342)))
 (let ((?x337 (* 3 (* r!1 r!1 r!1 r!1))))
 (let ((?x328 (* x!0 x!0)))
 (let ((?x290 (* (- 6) (* r!1 r!1 x!0))))
 (let ((?x317 (* (- 6) (* r!1 r!1 r!1 x!0))))
 (let ((?x144 (* (- 2) (* r!1 r!1 r!1 r!1 x!0))))
 (let ((?x336 (* 3 (* r!1 r!1 x!0 x!0))))
 (let ((?x233 (+ 1 ?x336 ?x144 ?x317 ?x290 ?x328 ?x337 ?x341 ?x345 ?x327 ?x334 ?x384 ?x385 ?x287 ?x344)))
 (let ((?x228 (* ?x233 ?x61)))
 (let (($x229 (= ?x228 0)))
 (let (($x217 (not $x229)))
 (let (($x282 (and $x272 $x217)))
 (let ((?x321 (+ 1 ?x345 ?x344 ?x287 ?x341 ?x385 ?x337 ?x384 ?x336 ?x334 ?x328 ?x327 ?x290 ?x317 ?x144)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x90 (and (= (+ r!1 (* (- 2) x!0) ?x115 (* (- 1) ?x397) ?x35 ?x36) 0) (not (= (* ?x321 (+ ?x394 ?x315 r00 ?x397 ?x84 ?x100)) 0)))))
 (let (($x131 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x171 (+ ?x63 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x407 (+ 1 (* 3 r) (* 4 ?x30) (* 4 (* r r r)) (* ?x123 ?x123 ?x123 ?x171 ?x171 ?x171) (* r r r r r) (* 3 (* r r r r)) (* r r r x x) (* 3 (* r r x x)) (* 3 (* r x x)) (* x x) (* (- 2) (* r x)) (* (- 6) (* r r x)) (* (- 6) (* r r r x)) (* (- 2) (* r r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x118 (= (+ r (* (- 2) x) ?x115 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x118 (not (= (* ?x407 ?x106) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x262 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x281 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x314 (+ x ?x63)))
 (let ((?x123 (+ 1 r)))
 (let ((?x374 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 ?x314 ?x314 ?x314) (* ?x123 ?x123 ?x123 ?x314 ?x314))))
 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) (not (= (* ?x374 ?x281) 0)))))))))))) :qid k!26))
 ))
 (let ((?x103 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x171 (+ ?x63 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x407 (+ 1 (* 3 r) (* 4 ?x30) (* 4 (* r r r)) (* ?x123 ?x123 ?x123 ?x171 ?x171 ?x171) (* r r r r r) (* 3 (* r r r r)) (* r r r x x) (* 3 (* r r x x)) (* 3 (* r x x)) (* x x) (* (- 2) (* r x)) (* (- 6) (* r r x)) (* (- 6) (* r r r x)) (* (- 2) (* r r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x118 (= (+ r (* (- 2) x) ?x115 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x75 (and $x118 (not (= (* ?x407 ?x106) 0)))))
 (let ((?x374 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 (+ x ?x63) (+ x ?x63) (+ x ?x63)) (* ?x123 ?x123 ?x123 (+ x ?x63) (+ x ?x63)))))
 (let ((?x373 (* ?x374 (+ (- 1) (* (- 3) r) r00 (* ?x123 ?x123) ?x32 ?x84 ?x100))))
 (let (($x244 (and (= (+ ?x63 r00 ?x30 ?x32 ?x84 ?x100) 0) (not (= ?x373 0)))))
 (rewrite (= $x244 $x75))))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x41 ?x41 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* ?x48 ?x52) 0))))))))))) :qid k!26))
 ))
 (let ((?x297 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x281 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x314 (+ x ?x63)))
 (let ((?x123 (+ 1 r)))
 (let ((?x374 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 ?x314 ?x314 ?x314) (* ?x123 ?x123 ?x123 ?x314 ?x314))))
 (let (($x244 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) (not (= (* ?x374 ?x281) 0)))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x41 ?x41 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 (or (not (= (* ?x48 ?x52) 0))))))
 (rewrite (= $x57 $x244))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x367 (mp (mp @x59 (quant-intro (proof-bind ?x297) (= $x58 $x262)) $x262) (rewrite (= $x262 $x262)) $x262)))
 (let ((@x143 (mp~ (mp @x367 (quant-intro (proof-bind ?x103) (= $x262 $x131)) $x131) (sk (~ $x131 $x90)) $x90)))
 (let ((@x375 (mp @x143 (rewrite (= $x90 $x282)) $x282)))
 (let ((@x364 (and-elim @x375 $x272)))
 (let ((@x376 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x272) $x180)) @x364 $x180)))
 (let (($x188 (>= ?x61 0)))
 (let ((@x69 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x272) $x188)) @x364 $x188)))
 (let (($x89 (not (>= ?x228 0))))
 (let (($x138 (<= ?x228 0)))
 (let ((@x93 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x229 (not $x138) $x89)) (and-elim @x375 $x217) (or (not $x138) $x89))))
 (let ((@x94 (unit-resolution @x93 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x138)) @x69 @x376 false) $x138) $x89)))
 ((_ th-lemma arith farkas 1 1 1) @x94 @x69 @x376 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            4
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                19.55
 :memory                    19.04
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                513029
 :num-checks                1
 :propagations              4
 :rlimit-count              1397
 :time                      0.01
 :total-time                0.02)
