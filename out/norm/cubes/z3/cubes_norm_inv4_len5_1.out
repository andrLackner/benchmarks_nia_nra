unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x290 (* (- 2) n!0)))
 (let ((?x963 (* 3 c!3)))
 (let ((?x1106 (+ ?x963 ?x290 k!2 (* (- 1) (* n!0 k!2)))))
 (let (($x1125 (<= ?x1106 1)))
 (let (($x626 (= ?x1106 1)))
 (let ((?x790 (* (- 17) (* k!2 m!1 m!1))))
 (let ((?x1189 (+ c!3 k!2)))
 (let ((?x788 (+ k!2 m!1)))
 (let ((?x767 (+ 6 m!1)))
 (let ((?x752 (+ 1 n!0)))
 (let ((?x1047 (* 3 (* ?x752 ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189 ?x1189))))
 (let ((?x1006 (* (- 2) (* k!2 m!1 m!1 m!1))))
 (let ((?x1181 (* (- 1) (* k!2 k!2 m!1 m!1))))
 (let ((?x1156 (* k!2 k!2)))
 (let ((?x769 (* (- 35) ?x1156)))
 (let ((?x1063 (* ?x752 ?x752 ?x767 ?x767 ?x788 ?x788 ?x788 ?x788 ?x1189 ?x1189 ?x1189)))
 (let ((?x1005 (* (- 3) (* ?x752 ?x752 ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189))))
 (let ((?x1041 (* 2 (* ?x752 ?x752 ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189 ?x1189))))
 (let ((?x1170 (* (- 12) (* k!2 k!2 m!1))))
 (let ((?x692 (* (- 3) (* ?x752 ?x752 ?x752 ?x752 ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189 ?x1189))))
 (let ((?x691 (* (- 3) (* ?x752 ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189))))
 (let ((?x1074 (* (- 3) (* ?x752 ?x752 ?x752 ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189 ?x1189))))
 (let ((?x903 (* ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189 ?x1189)))
 (let ((?x399 (* 245 m!1)))
 (let ((?x997 (* (- 1) (* ?x767 ?x767 ?x788 ?x788 ?x788 ?x788 ?x1189 ?x1189 ?x1189))))
 (let ((?x1008 (* (- 1) (* m!1 m!1 m!1 m!1))))
 (let ((?x750 (* (- 5) (* m!1 m!1 m!1))))
 (let ((?x668 (* ?x767 ?x767 ?x788 ?x788 ?x788 ?x788 ?x1189 ?x1189)))
 (let ((?x791 (* 245 k!2)))
 (let ((?x398 (* 49 (* m!1 m!1))))
 (let ((?x1059 (* (- 1) (* ?x767 ?x767 ?x788 ?x788 ?x788 ?x1189 ?x1189))))
 (let ((?x749 (* 14 (* k!2 m!1))))
 (let ((?x430 (+ (* 3 (* n!0 n!0 k!2 m!1 m!1)) (* 80 (* n!0 n!0 m!1)) ?x749 (* 301 (* n!0 m!1)) (* 80 (* n!0 n!0 k!2)) ?x1059 (* (- 3) (* n!0 n!0 n!0 n!0 m!1)) (* (- 15) (* n!0 n!0 n!0 k!2)) (* 110 (* n!0 m!1 m!1)) ?x398 ?x791 (* 3 (* n!0 n!0 m!1 m!1 m!1)) ?x668 (* 38 (* n!0 n!0 k!2 m!1)) (* 9 (* n!0 m!1 m!1 m!1)) (* 112 (* n!0 k!2 m!1)) (* 9 (* n!0 k!2 m!1 m!1)) ?x750 ?x1008 (* 37 (* n!0 n!0 m!1 m!1)) ?x997 ?x399 (* 2 (* n!0 k!2 k!2)) (* n!0 n!0 k!2 k!2) ?x903 ?x1074 ?x691 ?x692 ?x1170 (* (- 3) (* n!0 n!0 n!0 n!0 k!2)) (* (- 15) (* n!0 n!0 n!0 m!1)) ?x1041 ?x1005 ?x1063 ?x769 ?x1181 ?x1006 (* 301 (* n!0 k!2)) ?x1047 ?x790)))
 (let (($x729 (= ?x430 0)))
 (let (($x1209 (not $x729)))
 (let ((?x180 (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0)))))
 (let (($x172 (= ?x180 (- 1))))
 (let ((?x757 (* (- 1) ?x1156)))
 (let ((?x965 (* 9 (* c!3 n!0))))
 (let ((?x585 (* 5 k!2)))
 (let ((?x1177 (* (- 9) n!0)))
 (let ((?x871 (* 18 c!3)))
 (let ((?x301 (+ ?x871 ?x1177 ?x585 ?x965 ?x757)))
 (let (($x302 (= ?x301 4)))
 (let ((?x1258 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x295 (= ?x1258 (- 6))))
 (let (($x446 (and $x295 $x302 $x626 $x172 $x1209)))
 (let ((?x305 (+ ?x791 ?x399 ?x769 (* 301 (* k!2 n!0)) ?x398 ?x749 ?x750 ?x790 (* 301 (* m!1 n!0)) (* 80 (* m!1 n!0 n!0)) (* 80 (* k!2 n!0 n!0)) ?x1063 ?x1047 (* (- 15) (* m!1 n!0 n!0 n!0)) (* (- 15) (* k!2 n!0 n!0 n!0)) ?x1041 (* (- 3) (* k!2 n!0 n!0 n!0 n!0)) (* (- 3) (* m!1 n!0 n!0 n!0 n!0)) (* 3 (* k!2 m!1 m!1 n!0 n!0)) (* 3 (* m!1 m!1 m!1 n!0 n!0)) ?x1059 (* 112 (* k!2 m!1 n!0)) (* 110 (* m!1 m!1 n!0)) (* 9 (* k!2 m!1 m!1 n!0)) (* 9 (* m!1 m!1 m!1 n!0)) ?x903 (* 38 (* k!2 m!1 n!0 n!0)) (* 37 (* m!1 m!1 n!0 n!0)) ?x997 ?x692 ?x1074 ?x691 ?x1005 ?x1008 ?x1181 ?x1006 ?x1170 (* k!2 k!2 n!0 n!0) (* 2 (* k!2 k!2 n!0)) ?x668)))
 (let (($x666 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x871 ?x585 ?x1177 ?x757 ?x965) 4) (= (+ ?x963 k!2 ?x290 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x305 0)))))
 (let (($x1158 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x324 (+ 6 m)))
 (let ((?x1286 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1257 (* 2 (* k k n))))
 (let ((?x1211 (* k k n n)))
 (let ((?x1440 (* (- 12) (* k k m))))
 (let ((?x1443 (* (- 2) (* k m m m))))
 (let ((?x1442 (* (- 1) (* k k m m))))
 (let ((?x1445 (* (- 1) (* m m m m))))
 (let ((?x427 (+ 1 n)))
 (let ((?x1012 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x942 (* ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x929 (* ?x427 ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1444 (* 37 (* m m n n))))
 (let ((?x1446 (* 38 (* k m n n))))
 (let ((?x831 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1448 (* 9 (* m m m n))))
 (let ((?x1451 (* 9 (* k m m n))))
 (let ((?x1450 (* 110 (* m m n))))
 (let ((?x1452 (* 112 (* k m n))))
 (let ((?x713 (* 3 (* m m m n n))))
 (let ((?x711 (* 3 (* k m m n n))))
 (let ((?x1454 (* (- 3) (* m n n n n))))
 (let ((?x1457 (* (- 3) (* k n n n n))))
 (let ((?x437 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1509 (* (- 17) (* k m m))))
 (let ((?x1511 (* (- 5) (* m m m))))
 (let ((?x1510 (* 14 (* k m))))
 (let ((?x1512 (* 49 (* m m))))
 (let ((?x49 (* k k)))
 (let ((?x1523 (* (- 35) ?x49)))
 (let ((?x177 (+ (* 245 k) (* 245 m) ?x1523 (* 301 (* k n)) ?x1512 ?x1510 ?x1511 ?x1509 (* 301 (* m n)) (* 80 (* m n n)) (* 80 (* k n n)) ?x437 (* 3 (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 15) (* m n n n)) (* (- 15) (* k n n n)) (* 2 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x1457 ?x1454 ?x711 ?x713 (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x1452 ?x1450 ?x1451 ?x1448 ?x831 ?x1446 ?x1444 (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 3) ?x929) (* (- 3) ?x942) (* (- 3) (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) ?x1012) ?x1445 ?x1442 ?x1443 ?x1440 ?x1211 ?x1257 ?x1286)))
 (let (($x316 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x278 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x229 (* (- 1) ?x49)))
 (let ((?x228 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x226 (= (+ ?x40 ?x44 ?x228 ?x229 (* 9 (* c n))) 4)))
 (let (($x142 (= (+ m (* (- 6) n)) 6)))
 (and $x142 $x226 $x278 $x316 (not (= ?x177 0)))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x514 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x324 (+ 6 m)))
 (let ((?x427 (+ 1 n)))
 (let ((?x1012 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x929 (* ?x427 ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x942 (* ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x437 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x858 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x785 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1021 (+ ?x785 (* (- 1) (* ?x324 ?x324 ?x69)) (* ?x427 ?x427 ?x69) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x858 (* (- 1) ?x437) (* 3 (* ?x427 ?x427 ?x427 ?x69)) (* 3 (* ?x427 ?x427 ?x427 ?x427 ?x69)) (* (- 3) (* ?x427 ?x427 ?x324 ?x324 ?x69)) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x427 ?x324 ?x324 ?x69)) (* 3 (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 ?x942) (* 3 ?x929) (* (- 3) (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 2) (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x427 ?x427 ?x69 ?x69)) (* ?x324 ?x324 ?x69 ?x69) (* 3 ?x1012))))
 (let (($x783 (not (= ?x1021 0))))
 (let (($x776 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x696 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x229 (* (- 1) ?x49)))
 (let ((?x228 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x142 (= (+ m (* (- 6) n)) 6)))
 (and $x142 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x228 ?x229) 4) $x696 $x776 $x783))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x1167 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x324 (+ 6 m)))
 (let ((?x1286 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1257 (* 2 (* k k n))))
 (let ((?x1211 (* k k n n)))
 (let ((?x1440 (* (- 12) (* k k m))))
 (let ((?x1443 (* (- 2) (* k m m m))))
 (let ((?x1442 (* (- 1) (* k k m m))))
 (let ((?x1445 (* (- 1) (* m m m m))))
 (let ((?x427 (+ 1 n)))
 (let ((?x1012 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x942 (* ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x929 (* ?x427 ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1444 (* 37 (* m m n n))))
 (let ((?x1446 (* 38 (* k m n n))))
 (let ((?x831 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1448 (* 9 (* m m m n))))
 (let ((?x1451 (* 9 (* k m m n))))
 (let ((?x1450 (* 110 (* m m n))))
 (let ((?x1452 (* 112 (* k m n))))
 (let ((?x713 (* 3 (* m m m n n))))
 (let ((?x711 (* 3 (* k m m n n))))
 (let ((?x1454 (* (- 3) (* m n n n n))))
 (let ((?x1457 (* (- 3) (* k n n n n))))
 (let ((?x437 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1509 (* (- 17) (* k m m))))
 (let ((?x1511 (* (- 5) (* m m m))))
 (let ((?x1510 (* 14 (* k m))))
 (let ((?x1512 (* 49 (* m m))))
 (let ((?x49 (* k k)))
 (let ((?x1523 (* (- 35) ?x49)))
 (let ((?x177 (+ (* 245 k) (* 245 m) ?x1523 (* 301 (* k n)) ?x1512 ?x1510 ?x1511 ?x1509 (* 301 (* m n)) (* 80 (* m n n)) (* 80 (* k n n)) ?x437 (* 3 (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 15) (* m n n n)) (* (- 15) (* k n n n)) (* 2 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x1457 ?x1454 ?x711 ?x713 (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x1452 ?x1450 ?x1451 ?x1448 ?x831 ?x1446 ?x1444 (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 3) ?x929) (* (- 3) ?x942) (* (- 3) (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) ?x1012) ?x1445 ?x1442 ?x1443 ?x1440 ?x1211 ?x1257 ?x1286)))
 (let (($x316 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x278 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x229 (* (- 1) ?x49)))
 (let ((?x228 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x226 (= (+ ?x40 ?x44 ?x228 ?x229 (* 9 (* c n))) 4)))
 (let (($x142 (= (+ m (* (- 6) n)) 6)))
 (let (($x763 (and $x142 $x226 $x278 $x316 (not (= ?x177 0)))))
 (let ((?x858 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x785 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1021 (+ ?x785 (* (- 1) (* ?x324 ?x324 ?x69)) (* ?x427 ?x427 ?x69) (* (- 1) ?x831) ?x858 (* (- 1) ?x437) (* 3 (* ?x427 ?x427 ?x427 ?x69)) (* 3 (* ?x427 ?x427 ?x427 ?x427 ?x69)) (* (- 3) (* ?x427 ?x427 ?x324 ?x324 ?x69)) (* (- 1) ?x1286) (* (- 3) (* ?x427 ?x324 ?x324 ?x69)) (* 3 (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 ?x942) (* 3 ?x929) (* (- 3) (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 2) (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x427 ?x427 ?x69 ?x69)) (* ?x324 ?x324 ?x69 ?x69) (* 3 ?x1012))))
 (let (($x783 (not (= ?x1021 0))))
 (let (($x776 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x696 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x914 (and $x142 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x228 ?x229) 4) $x696 $x776 $x783)))
 (rewrite (= $x914 $x763))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x784 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x324 (+ 6 m)))
 (let ((?x427 (+ 1 n)))
 (let ((?x1012 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x929 (* ?x427 ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x942 (* ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x437 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x858 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x785 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1021 (+ ?x785 (* (- 1) (* ?x324 ?x324 ?x69)) (* ?x427 ?x427 ?x69) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x858 (* (- 1) ?x437) (* 3 (* ?x427 ?x427 ?x427 ?x69)) (* 3 (* ?x427 ?x427 ?x427 ?x427 ?x69)) (* (- 3) (* ?x427 ?x427 ?x324 ?x324 ?x69)) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x427 ?x324 ?x324 ?x69)) (* 3 (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 ?x942) (* 3 ?x929) (* (- 3) (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 2) (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x427 ?x427 ?x69 ?x69)) (* ?x324 ?x324 ?x69 ?x69) (* 3 ?x1012))))
 (let (($x783 (not (= ?x1021 0))))
 (let (($x776 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x743 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x674 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x142 (= (+ m (* (- 6) n)) 6)))
 (and $x142 (= ?x674 (- 4)) $x743 $x776 $x783))))))))))))))))))) :qid k!34))
 ))
 (let ((?x513 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x324 (+ 6 m)))
 (let ((?x427 (+ 1 n)))
 (let ((?x1012 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x929 (* ?x427 ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x942 (* ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x437 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x858 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x785 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1021 (+ ?x785 (* (- 1) (* ?x324 ?x324 ?x69)) (* ?x427 ?x427 ?x69) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x858 (* (- 1) ?x437) (* 3 (* ?x427 ?x427 ?x427 ?x69)) (* 3 (* ?x427 ?x427 ?x427 ?x427 ?x69)) (* (- 3) (* ?x427 ?x427 ?x324 ?x324 ?x69)) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x427 ?x324 ?x324 ?x69)) (* 3 (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 ?x942) (* 3 ?x929) (* (- 3) (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 2) (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x427 ?x427 ?x69 ?x69)) (* ?x324 ?x324 ?x69 ?x69) (* 3 ?x1012))))
 (let (($x783 (not (= ?x1021 0))))
 (let (($x776 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x696 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x229 (* (- 1) ?x49)))
 (let ((?x228 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x142 (= (+ m (* (- 6) n)) 6)))
 (let (($x914 (and $x142 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x228 ?x229) 4) $x696 $x776 $x783)))
 (let (($x743 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x674 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x793 (and $x142 (= ?x674 (- 4)) $x743 $x776 $x783)))
 (rewrite (= $x793 $x914))))))))))))))))))))))))))))
 ))
 (let (($x109 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x94 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74 ?x74 ?x74)))
 (let ((?x76 (+ (- (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* ?x69 ?x70 ?x70)) (* ?x69 ?x74 ?x74))))
 (let ((?x80 (+ (- ?x76 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x82 (- ?x80 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74))))
 (let ((?x85 (+ ?x82 (* 3 ?x69 ?x74 ?x74 ?x74) (* 3 ?x69 ?x74 ?x74 ?x74 ?x74))))
 (let ((?x90 (- (- ?x85 (* 3 ?x69 ?x70 ?x70 ?x74 ?x74)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x95 (+ (- ?x90 (* 3 ?x69 ?x70 ?x70 ?x74)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74 ?x74) ?x94)))
 (let ((?x100 (- (- ?x95 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74)) (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74))))
 (let ((?x104 (+ (- ?x100 (* ?x69 ?x69 ?x74 ?x74)) (* ?x69 ?x69 ?x70 ?x70) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x104 0)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x787 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x324 (+ 6 m)))
 (let ((?x427 (+ 1 n)))
 (let ((?x1012 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x929 (* ?x427 ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x942 (* ?x427 ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x437 (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x858 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x785 (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1021 (+ ?x785 (* (- 1) (* ?x324 ?x324 ?x69)) (* ?x427 ?x427 ?x69) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x858 (* (- 1) ?x437) (* 3 (* ?x427 ?x427 ?x427 ?x69)) (* 3 (* ?x427 ?x427 ?x427 ?x427 ?x69)) (* (- 3) (* ?x427 ?x427 ?x324 ?x324 ?x69)) (* (- 1) (* ?x324 ?x324 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x427 ?x324 ?x324 ?x69)) (* 3 (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 ?x942) (* 3 ?x929) (* (- 3) (* ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 2) (* ?x427 ?x427 ?x324 ?x324 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x427 ?x427 ?x69 ?x69)) (* ?x324 ?x324 ?x69 ?x69) (* 3 ?x1012))))
 (let (($x783 (not (= ?x1021 0))))
 (let (($x776 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x743 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x674 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x142 (= (+ m (* (- 6) n)) 6)))
 (let (($x793 (and $x142 (= ?x674 (- 4)) $x743 $x776 $x783)))
 (let ((?x74 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x94 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74 ?x74 ?x74)))
 (let ((?x76 (+ (- (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* ?x69 ?x70 ?x70)) (* ?x69 ?x74 ?x74))))
 (let ((?x80 (+ (- ?x76 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x82 (- ?x80 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74))))
 (let ((?x85 (+ ?x82 (* 3 ?x69 ?x74 ?x74 ?x74) (* 3 ?x69 ?x74 ?x74 ?x74 ?x74))))
 (let ((?x90 (- (- ?x85 (* 3 ?x69 ?x70 ?x70 ?x74 ?x74)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x95 (+ (- ?x90 (* 3 ?x69 ?x70 ?x70 ?x74)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74 ?x74) ?x94)))
 (let ((?x100 (- (- ?x95 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74)) (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74))))
 (let ((?x104 (+ (- ?x100 (* ?x69 ?x69 ?x74 ?x74)) (* ?x69 ?x69 ?x70 ?x70) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x74 ?x74))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x108 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x104 0))))))
 (rewrite (= $x108 $x793)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x110 (asserted $x109)))
 (let ((@x916 (mp (mp @x110 (quant-intro (proof-bind ?x787) (= $x109 $x784)) $x784) (rewrite (= $x784 $x784)) $x784)))
 (let ((@x681 (mp (mp @x916 (quant-intro (proof-bind ?x513) (= $x784 $x514)) $x514) (quant-intro (proof-bind ?x1167) (= $x514 $x1158)) $x1158)))
 (let ((@x1312 (mp (mp~ @x681 (sk (~ $x1158 $x666)) $x666) (rewrite (= $x666 $x446)) $x446)))
 (let ((@x188 (and-elim @x1312 $x626)))
 (let ((@x436 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x626) $x1125)) @x188 $x1125)))
 (let (($x1302 (>= ?x1106 1)))
 (let ((@x1222 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x626) $x1302)) @x188 $x1302)))
 (let (($x1226 (<= ?x1258 (- 6))))
 (let ((@x310 (and-elim @x1312 $x295)))
 (let ((@x685 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x295) $x1226)) @x310 $x1226)))
 (let (($x1134 (>= ?x1258 (- 6))))
 (let ((@x1200 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x295) $x1134)) @x310 $x1134)))
 (let (($x418 (<= ?x180 (- 1))))
 (let ((@x1172 (and-elim @x1312 $x172)))
 (let ((@x661 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x172) $x418)) @x1172 $x418)))
 (let (($x1070 (>= ?x180 (- 1))))
 (let ((@x1332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x172) $x1070)) @x1172 $x1070)))
 (let (($x1081 (<= ?x301 4)))
 (let ((@x419 (and-elim @x1312 $x302)))
 (let ((@x1337 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x302) $x1081)) @x419 $x1081)))
 (let (($x1109 (>= ?x301 4)))
 (let ((@x706 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x302) $x1109)) @x419 $x1109)))
 (let (($x1115 (not (<= ?x430 0))))
 (let (($x404 (>= ?x430 0)))
 (let ((@x986 ((_ th-lemma arith) (hypothesis (not $x404)) @x1332 @x661 @x1200 @x685 @x1332 @x661 @x1200 @x685 @x1332 @x661 @x1222 @x436 @x1332 @x661 @x706 @x1337 @x1332 @x661 @x1200 @x685 @x1332 @x661 @x1200 @x685 @x1222 @x436 false)))
 (let ((@x1112 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x729 $x1115 (not $x404))) (and-elim @x1312 $x1209) (or $x1115 (not $x404)))))
 ((_ th-lemma arith) (unit-resolution @x1112 (lemma @x986 $x404) $x1115) @x1332 @x661 @x1200 @x685 @x1332 @x661 @x1200 @x685 @x1332 @x661 @x1222 @x436 @x1332 @x661 @x706 @x1337 @x1332 @x661 @x1200 @x685 @x1332 @x661 @x1200 @x685 @x1222 @x436 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        22
 :arith-assert-upper        18
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             360
 :arith-nonlinear-bounds    16
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              9
 :arith-row-summations      9
 :arith-tableau-max-columns 80
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 7
 :del-clause                16
 :final-checks              8
 :max-memory                3.91
 :memory                    3.31
 :mk-bool-var               27
 :mk-clause                 16
 :num-allocs                2342753
 :num-checks                1
 :propagations              10
 :rlimit-count              21849
 :time                      0.02
 :total-time                0.03)
