unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x165 (* 9 n!0)))
 (let ((?x168 (* (- 5) m!1)))
 (let ((?x287 (* c!3 n!0)))
 (let ((?x371 (* (- 9) ?x287)))
 (let ((?x252 (* k!2 n!0)))
 (let ((?x191 (* (- 9) ?x252)))
 (let ((?x166 (* (- 32) k!2)))
 (let ((?x186 (* 2 (* k!2 m!1))))
 (let ((?x159 (* k!2 k!2)))
 (let ((?x408 (* (- 27) c!3)))
 (let ((?x109 (* m!1 m!1)))
 (let ((?x558 (+ 13 ?x109 ?x408 ?x159 ?x186 ?x166 ?x191 ?x371 ?x168 ?x165)))
 (let (($x170 (<= ?x558 0)))
 (let ((?x285 (* (- 2) n!0)))
 (let ((?x154 (* (- 1) ?x252)))
 (let ((?x288 (* 3 c!3)))
 (let ((?x214 (+ ?x288 k!2 ?x154 ?x285)))
 (let (($x482 (<= ?x214 1)))
 (let (($x404 (= ?x214 1)))
 (let ((?x243 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x185 (* (- 6) (* c!3 k!2 k!2))))
 (let ((?x205 (* (- 12) (* c!3 k!2 m!1))))
 (let ((?x415 (* (- 1) (* c!3 m!1 m!1 m!1))))
 (let ((?x467 (* (- 12) (* k!2 k!2 m!1))))
 (let ((?x318 (* (- 2) (* c!3 k!2 m!1 m!1))))
 (let ((?x528 (* (- 2) (* k!2 k!2 m!1 m!1))))
 (let ((?x538 (+ c!3 k!2)))
 (let ((?x308 (+ k!2 m!1)))
 (let ((?x309 (+ 6 m!1)))
 (let ((?x344 (+ 1 n!0)))
 (let ((?x345 (* ?x344 ?x344 ?x344 ?x309 ?x308 ?x538 ?x538)))
 (let ((?x449 (* (- 1) (* c!3 k!2 k!2 m!1))))
 (let ((?x419 (* (- 1) (* k!2 k!2 k!2 m!1))))
 (let ((?x311 (* ?x309 ?x309 ?x309 ?x308 ?x538 ?x538 ?x538)))
 (let ((?x605 (* (- 6) (* c!3 m!1 m!1))))
 (let ((?x99 (* (- 1) (* k!2 m!1 m!1 m!1))))
 (let ((?x360 (* (- 6) (* k!2 m!1 m!1))))
 (let ((?x484 (+ ?x360 ?x99 ?x605 ?x311 ?x419 ?x449 ?x345 ?x528 ?x318 ?x467 ?x415 ?x205 ?x185 ?x243)))
 (let ((?x559 (* ?x484 ?x558)))
 (let (($x560 (= ?x559 0)))
 (let (($x113 (not $x560)))
 (let ((?x441 (* (- 3) n!0)))
 (let ((?x111 (* (- 3) (* n!0 n!0))))
 (let ((?x464 (+ k!2 ?x111 ?x441)))
 (let (($x398 (= ?x464 1)))
 (let ((?x150 (* (- 9) n!0)))
 (let ((?x530 (* 9 ?x287)))
 (let ((?x251 (* 5 k!2)))
 (let ((?x272 (* (- 1) ?x159)))
 (let ((?x275 (* 18 c!3)))
 (let ((?x382 (+ ?x275 ?x272 ?x251 ?x530 ?x150)))
 (let (($x302 (= ?x382 4)))
 (let ((?x130 (+ m!1 (* (- 6) n!0))))
 (let (($x529 (= ?x130 6)))
 (let (($x541 (and $x529 $x302 $x404 $x398 $x113)))
 (let ((?x135 (+ ?x185 ?x360 ?x467 ?x243 ?x205 ?x605 ?x345 ?x311 ?x449 ?x419 ?x318 ?x528 ?x415 ?x99)))
 (let (($x189 (= (* ?x135 (+ 13 ?x408 ?x166 ?x168 ?x165 ?x159 ?x191 ?x371 ?x186 ?x109)) 0)))
 (let (($x381 (and $x529 (= (+ ?x275 ?x251 ?x150 ?x272 ?x530) 4) (= (+ ?x288 k!2 ?x285 ?x154) 1) (= (+ k!2 ?x441 ?x111) 1) (not $x189))))
 (let (($x100 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x481 (+ 13 (* (- 27) c) (* (- 32) k) ?x426 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x525 (* (- 1) (* k m m m))))
 (let ((?x523 (* (- 1) (* c m m m))))
 (let ((?x513 (* (- 1) (* k k k m))))
 (let ((?x511 (* (- 1) (* c k k m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x421 (* ?x488 ?x488 ?x488 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x341 (+ 1 n)))
 (let ((?x412 (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68)))
 (let ((?x485 (+ (* (- 6) (* c k k)) (* (- 6) (* k m m)) (* (- 12) (* k k m)) (* (- 6) (* k k k)) (* (- 12) (* c k m)) (* (- 6) (* c m m)) ?x412 ?x421 ?x511 ?x513 (* (- 2) (* c k m m)) (* (- 2) (* k k m m)) ?x523 ?x525)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* ?x485 ?x481) 0)))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x390 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x340 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x421 (* ?x488 ?x488 ?x488 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x341 (+ 1 n)))
 (let ((?x412 (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68)))
 (let (($x304 (not (= (* (+ (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x412 ?x421) ?x340) 0))))
 (let (($x293 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x215 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x215 $x293 $x304))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x176 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x481 (+ 13 (* (- 27) c) (* (- 32) k) ?x426 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x525 (* (- 1) (* k m m m))))
 (let ((?x523 (* (- 1) (* c m m m))))
 (let ((?x513 (* (- 1) (* k k k m))))
 (let ((?x511 (* (- 1) (* c k k m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x421 (* ?x488 ?x488 ?x488 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x341 (+ 1 n)))
 (let ((?x412 (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68)))
 (let ((?x485 (+ (* (- 6) (* c k k)) (* (- 6) (* k m m)) (* (- 12) (* k k m)) (* (- 6) (* k k k)) (* (- 12) (* c k m)) (* (- 6) (* c m m)) ?x412 ?x421 ?x511 ?x513 (* (- 2) (* c k m m)) (* (- 2) (* k k m m)) ?x523 ?x525)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x477 (and $x124 $x208 $x260 $x298 (not (= (* ?x485 ?x481) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x340 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* ?x341 ?x68)) ?x426 ?x48 ?x78)))
 (let (($x304 (not (= (* (+ (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x412 ?x421) ?x340) 0))))
 (let (($x293 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x215 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x95 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x215 $x293 $x304)))
 (rewrite (= $x95 $x477))))))))))))))))))))))))))))))))))
 ))
 (let (($x305 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x340 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x421 (* ?x488 ?x488 ?x488 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x341 (+ 1 n)))
 (let ((?x412 (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68)))
 (let (($x304 (not (= (* (+ (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x412 ?x421) ?x340) 0))))
 (let (($x293 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x216 (= (+ ?x98 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x216 $x155 $x293 $x304))))))))))))))))) :qid k!34))
 ))
 (let ((?x391 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x340 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x421 (* ?x488 ?x488 ?x488 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x341 (+ 1 n)))
 (let ((?x412 (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68)))
 (let (($x304 (not (= (* (+ (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x412 ?x421) ?x340) 0))))
 (let (($x293 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x215 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x95 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x215 $x293 $x304)))
 (let (($x155 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x216 (= (+ ?x98 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x232 (and $x124 $x216 $x155 $x293 $x304)))
 (rewrite (= $x232 $x95)))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x70 (+ n 1)))
 (let ((?x85 (+ (* (- 1) ?x68 ?x72 ?x72 ?x81) (* ?x68 ?x68 ?x72 ?x81 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x81 ?x81 ?x81))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x85) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x219 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x426 (* (- 5) m)))
 (let ((?x98 (* (- 18) c)))
 (let ((?x340 (+ 13 ?x98 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x426 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x421 (* ?x488 ?x488 ?x488 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x341 (+ 1 n)))
 (let ((?x412 (* ?x341 ?x341 ?x341 ?x488 ?x72 ?x68 ?x68)))
 (let (($x304 (not (= (* (+ (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x412 ?x421) ?x340) 0))))
 (let (($x293 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x216 (= (+ ?x98 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x232 (and $x124 $x216 $x155 $x293 $x304)))
 (let ((?x81 (+ m 6)))
 (let ((?x70 (+ n 1)))
 (let ((?x85 (+ (* (- 1) ?x68 ?x72 ?x72 ?x81) (* ?x68 ?x68 ?x72 ?x81 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x81 ?x81 ?x81))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x85) 0))))))
 (rewrite (= $x90 $x232)))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x315 (mp (mp @x92 (quant-intro (proof-bind ?x219) (= $x91 $x305)) $x305) (rewrite (= $x305 $x305)) $x305)))
 (let ((@x349 (mp (mp @x315 (quant-intro (proof-bind ?x391) (= $x305 $x390)) $x390) (quant-intro (proof-bind ?x176) (= $x390 $x100)) $x100)))
 (let ((@x445 (mp (mp~ @x349 (sk (~ $x100 $x381)) $x381) (rewrite (= $x381 $x541)) $x541)))
 (let ((@x403 (and-elim @x445 $x404)))
 (let ((@x347 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x404) $x482)) @x403 $x482)))
 (let (($x128 (>= ?x214 1)))
 (let ((@x342 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x404) $x128)) @x403 $x128)))
 (let (($x606 (<= ?x130 6)))
 (let ((@x114 (and-elim @x445 $x529)))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x529) $x606)) @x114 $x606)))
 (let (($x363 (>= ?x130 6)))
 (let ((@x291 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x529) $x363)) @x114 $x363)))
 (let (($x280 (<= ?x382 4)))
 (let ((@x406 (and-elim @x445 $x302)))
 (let ((@x242 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x302) $x280)) @x406 $x280)))
 (let (($x450 (>= ?x382 4)))
 (let ((@x368 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x302) $x450)) @x406 $x450)))
 (let (($x129 (<= ?x464 1)))
 (let ((@x352 (and-elim @x445 $x398)))
 (let ((@x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x398) $x129)) @x352 $x129)))
 (let (($x451 (>= ?x464 1)))
 (let ((@x454 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x398) $x451)) @x352 $x451)))
 (let ((@x235 ((_ th-lemma arith) (hypothesis (not $x170)) @x342 @x347 @x368 @x242 @x454 @x330 @x342 @x347 @x368 @x242 @x342 @x347 @x368 @x242 @x342 @x347 @x368 @x242 @x291 @x255 @x368 @x242 @x291 @x255 @x342 @x347 false)))
 (let ((@x427 (lemma @x235 $x170)))
 (let (($x374 (>= ?x558 0)))
 (let ((@x322 ((_ th-lemma arith) (hypothesis (not $x374)) @x342 @x347 @x368 @x242 @x454 @x330 @x342 @x347 @x368 @x242 @x342 @x347 @x368 @x242 @x342 @x347 @x368 @x242 @x291 @x255 @x368 @x242 @x291 @x255 @x342 @x347 false)))
 (let ((@x172 (lemma @x322 $x374)))
 (let (($x247 (not (<= ?x559 0))))
 (let (($x420 (>= ?x559 0)))
 (let (($x468 (= ?x558 0)))
 (let ((@x182 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x468 (not $x170) (not $x374))) @x427 (or $x468 (not $x374)))))
 (let ((@x297 (hypothesis $x468)))
 (let ((@x163 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x420)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x374)) @x297 $x374) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x170)) @x297 $x170) false)))
 (let ((@x422 (unit-resolution (lemma @x163 (or (not $x468) $x420)) (unit-resolution @x182 @x172 $x468) $x420)))
 (let ((@x428 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x560 $x247 (not $x420))) (and-elim @x445 $x113) (or $x247 (not $x420)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x428 @x422 $x247) @x172 @x427 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 7
 :arith-assert-diseq        5
 :arith-assert-lower        65
 :arith-assert-upper        50
 :arith-branch-var          3
 :arith-conflicts           6
 :arith-eq-adapter          11
 :arith-fixed-eqs           13
 :arith-gcd-tests           13
 :arith-grobner             5
 :arith-ineq-splits         3
 :arith-max-min             675
 :arith-nonlinear-bounds    33
 :arith-nonlinear-horner    50
 :arith-num-rows            10
 :arith-patches             8
 :arith-patches_succ        3
 :arith-pivots              35
 :arith-pseudo-nonlinear    15
 :arith-row-summations      166
 :arith-tableau-max-columns 52
 :arith-tableau-max-rows    10
 :conflicts                 7
 :decisions                 20
 :del-clause                34
 :final-checks              19
 :max-memory                3.71
 :memory                    3.13
 :mk-bool-var               48
 :mk-clause                 41
 :num-allocs                3200689
 :num-checks                1
 :propagations              29
 :rlimit-count              49039
 :time                      0.03
 :total-time                0.04)
