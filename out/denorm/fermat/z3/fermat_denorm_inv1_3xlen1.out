unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x370 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x399 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 1) (* v!0 v!0)) (* (- 2) u!1) (* (- 4) r!2) (* 2 v!0) ?x370)))
 (let (($x481 (>= ?x399 0)))
 (let (($x398 (= ?x399 0)))
 (let ((?x489 (* (- 1) ?x370)))
 (let ((?x356 (* (- 2) v!0)))
 (let ((?x210 (* 4 r!2)))
 (let ((?x320 (* 2 u!1)))
 (let ((?x182 (* v!0 v!0)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x354 (+ ?x96 ?x112 ?x41 ?x46 ?x188 ?x182 ?x320 ?x210 ?x356 ?x489)))
 (let ((?x413 (+ u!1 r!2)))
 (let ((?x376 (+ 2 u!1)))
 (let ((?x409 (* ?x376 ?x376 ?x376 ?x376 ?x413 ?x413 ?x413 ?x413 ?x413 ?x413 ?x354 v!0 v!0 v!0 v!0 v!0 v!0)))
 (let (($x346 (= ?x409 0)))
 (let (($x410 (not $x346)))
 (let ((?x379 (+ r!2 (* (- 1) v!0))))
 (let ((?x486 (+ 2 v!0)))
 (let ((?x384 (* ?x486 ?x486 ?x486 ?x486 ?x486 ?x486 ?x379 ?x379 ?x379 ?x379 ?x379 ?x379 ?x354 u!1 u!1 u!1 u!1)))
 (let (($x395 (= ?x384 0)))
 (let (($x392 (or (not $x395) $x410)))
 (let (($x383 (and $x398 $x392)))
 (let ((?x185 (+ ?x210 ?x320 ?x356 ?x96 ?x112 ?x41 ?x489 ?x182 ?x46 ?x188)))
 (let ((?x364 (+ r!2 u!1)))
 (let ((?x361 (* ?x376 ?x376 ?x376 ?x376 ?x364 ?x364 ?x364 ?x364 ?x364 ?x364 ?x185 v!0 v!0 v!0 v!0 v!0 v!0)))
 (let ((?x371 (* ?x486 ?x486 ?x486 ?x486 ?x486 ?x486 ?x379 ?x379 ?x379 ?x379 ?x379 ?x379 ?x185 u!1 u!1 u!1 u!1)))
 (let (($x366 (and (= ?x185 0) (or (not (= ?x371 0)) (not (= ?x361 0))))))
 (let (($x374 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x218 (+ 2 u)))
 (let ((?x350 (* ?x218 ?x218 ?x218 ?x218 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v v v)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x118 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u u u u)))
 (let (($x199 (= ?x194 0)))
 (and $x199 (or (not (= ?x118 0)) (not (= ?x350 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x434 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x476 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x218 (+ 2 u)))
 (let ((?x442 (* ?x218 ?x218 ?x218 ?x218 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x476 v v v v v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x200 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x230 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x94 ?x200 u u u u)))
 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not (= ?x230 0)) (not (= ?x442 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x373 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x218 (+ 2 u)))
 (let ((?x350 (* ?x218 ?x218 ?x218 ?x218 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v v v)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x118 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u u u u)))
 (let (($x199 (= ?x194 0)))
 (let (($x405 (and $x199 (or (not (= ?x118 0)) (not (= ?x350 0))))))
 (let ((?x476 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* ?x218 ?x218)) ?x45 ?x46 ?x188)))
 (let ((?x442 (* ?x218 ?x218 ?x218 ?x218 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x476 v v v v v v)))
 (let ((?x200 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* ?x206 ?x206) ?x46 ?x188)))
 (let ((?x230 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x94 ?x200 u u u u)))
 (let (($x204 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not (= ?x230 0)) (not (= ?x442 0))))))
 (rewrite (= $x204 $x405)))))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((r Int) (u Int) (v Int) )(! (let ((?x70 (+ r u)))
 (let ((?x66 (- 1)))
 (let ((?x74 (+ u 2)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x70 ?x74 ?x74 ?x74 v v v ?x66 ?x70 ?x70 ?x70 ?x74 v v ?x66 ?x70 ?x70 v)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x52 u u u ?x57 ?x57 ?x57 ?x66 ?x52 ?x52 ?x52 u ?x57 ?x57 ?x66 ?x52 ?x52 ?x57)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x207 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x476 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x218 (+ 2 u)))
 (let ((?x442 (* ?x218 ?x218 ?x218 ?x218 ?x70 ?x70 ?x70 ?x70 ?x70 ?x70 ?x476 v v v v v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x200 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x230 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x94 ?x200 u u u u)))
 (let (($x204 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not (= ?x230 0)) (not (= ?x442 0))))))
 (let ((?x66 (- 1)))
 (let ((?x74 (+ u 2)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x70 ?x74 ?x74 ?x74 v v v ?x66 ?x70 ?x70 ?x70 ?x74 v v ?x66 ?x70 ?x70 v)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x52 u u u ?x57 ?x57 ?x57 ?x66 ?x52 ?x52 ?x52 u ?x57 ?x57 ?x66 ?x52 ?x52 ?x57)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x87 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))
 (rewrite (= $x87 $x204)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x175 (mp (mp @x89 (quant-intro (proof-bind ?x207) (= $x88 $x434)) $x434) (rewrite (= $x434 $x434)) $x434)))
 (let ((@x355 (mp~ (mp @x175 (quant-intro (proof-bind ?x373) (= $x434 $x374)) $x374) (sk (~ $x374 $x366)) $x366)))
 (let ((@x412 (mp @x355 (rewrite (= $x366 $x383)) $x383)))
 (let ((@x408 (and-elim @x412 $x398)))
 (let ((@x278 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x398) $x481)) @x408 $x481)))
 (let (($x482 (<= ?x399 0)))
 (let ((@x122 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x398) $x482)) @x408 $x482)))
 (let (($x128 (not (<= ?x409 0))))
 (let (($x450 (>= ?x409 0)))
 (let (($x229 (>= ?x384 0)))
 (let (($x120 (<= ?x384 0)))
 (let ((@x131 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x395 (not $x120) (not $x229))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x120)) @x122 @x278 false) $x120) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x229)) @x122 @x278 false) $x229) $x395)))
 (let ((@x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x346 $x128 (not $x450))) (unit-resolution (and-elim @x412 $x392) @x131 $x410) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x450)) @x122 @x278 false) $x450) $x128)))
 ((_ th-lemma arith farkas 1 1 1) @x240 @x122 @x278 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        12
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           4
 :arith-max-min             112
 :arith-nonlinear-bounds    16
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.65
 :memory                    3.15
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1132817
 :num-checks                1
 :propagations              14
 :rlimit-count              2260
 :time                      0.01
 :total-time                0.02)
