unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x825 (* 2 x!0)))
 (let ((?x2087 (* (- 1) r!1)))
 (let ((?x2084 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x234 (* (- 1) ?x36)))
 (let ((?x202 (* (- 2) x00)))
 (let ((?x854 (+ r00 ?x202 ?x234 ?x2084 ?x2087 ?x825)))
 (let (($x3547 (<= ?x854 0)))
 (let (($x877 (= ?x854 0)))
 (let ((?x2263 (+ ?x2087 x!0)))
 (let ((?x2264 (+ 1 r!1)))
 (let ((?x3397 (* ?x2264 ?x2264 ?x2264 ?x2264 ?x2264 ?x2263 ?x2263)))
 (let ((?x2608 (* ?x2264 ?x2264 ?x2264 ?x2264 ?x2264 ?x2263 ?x2263 ?x2263)))
 (let ((?x2516 (* r!1 r!1 r!1 r!1 x!0)))
 (let ((?x2262 (* ?x2264 ?x2264 ?x2264 ?x2264 ?x2263 ?x2263)))
 (let ((?x2240 (* (- 1) ?x2084)))
 (let ((?x874 (+ r00 ?x202 ?x234 (* 15 (* r00 r!1 r!1 r!1 x!0)) (* r00 x!0) (* 10 (* r00 r!1 r!1 x!0)) (* (- 2) (* x00 r!1 r!1)) (* 11 (* r00 r!1 r!1 r!1 r!1 x!0)) (* (- 6) (* x00 r!1 r!1 r!1 r!1 r!1 x!0)) (* 6 (* r00 r00 r!1 r!1 r!1 r!1)) (* (- 11) (* r00 r00 r!1 r!1 r!1 r!1 x!0)) (* (- 20) (* x00 r!1 r!1 x!0)) (* 12 (* r00 r00 r!1 r!1 x!0 x!0)) (* (- 12) (* r00 r!1 r!1 x!0 x!0)) (* (- 3) (* r00 r!1 r!1 r!1 r!1 x!0 x!0)) (* r00 x!0 x!0 x!0) (* (- 6) (* x00 r!1 x!0 x!0 x!0)) (* (- 2) (* x00 r!1 r!1 r!1 x!0 x!0 x!0)) (* 8 (* x00 r!1 r!1 r!1)) (* 2 (* r00 r!1 x!0)) (* (- 2) (* x00 x!0 x!0 x!0)) (* 12 (* x00 r!1 r!1 r!1 r!1)) (* (- 6) (* x00 r!1 r!1 x!0 x!0 x!0)) (* 2 (* r00 r!1)) (* r00 r!1 r!1) (* (- 4) (* r00 r!1 r!1 r!1)) (* 10 (* r00 r00 r!1 r!1 r!1 x!0 x!0)) (* 2 (* x00 r!1 r!1 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 r!1)) (* (- 2) (* x00 x!0)) (* (- 1) (* r00 r00 x!0)) (* 3 (* r00 r!1 r!1 r!1 r!1 r!1 x!0)) (* 20 (* x00 r!1 r!1 r!1 x!0 x!0)) (* 24 (* x00 r!1 r!1 x!0 x!0)) (* 12 (* x00 r!1 x!0 x!0)) (* (- 6) (* r00 r!1 x!0 x!0)) (* (- 1) (* r00 r00 r!1 r!1)) (* (- 10) (* r00 r!1 r!1 r!1 x!0 x!0)) (* (- 6) (* r00 r!1 r!1 r!1 r!1)) (* (- 1) (* r00 r!1 r!1 r!1 r!1 r!1 r!1)) (* (- 4) (* r00 r!1 r!1 r!1 r!1 r!1)) (* 4 (* r00 r00 r!1 r!1 r!1 r!1 r!1)) (* (- 30) (* x00 r!1 r!1 r!1 x!0)) ?x2240 (* (- 1) (* r!1 x!0 x!0)) (* (- 2) (* ?x2264 ?x2264 ?x2264 ?x2263 ?x2263 ?x2263)) (* r00 r00 r!1 r!1 r!1 r!1 r!1 r!1) (* (- 22) (* x00 r!1 r!1 r!1 r!1 x!0)) (* (- 3) (* r00 r00 r!1 r!1 r!1 r!1 r!1 x!0)) ?x2087 ?x825 (* (- 1) (* ?x2264 ?x2264 ?x2264 ?x2264 ?x2263 ?x2263 ?x2263)) (* 3 (* r!1 r!1 x!0 x!0)) (* 2 (* x!0 x!0)) ?x2262 (* 2 (* ?x2264 ?x2264 ?x2264 ?x2263 ?x2263 ?x2263 ?x2263)) (* r00 r!1 r!1 r!1 x!0 x!0 x!0) (* 3 (* r!1 x!0)) (* 5 (* r!1 r!1 x!0)) (* 8 (* x00 r!1 r!1 r!1 r!1 r!1)) ?x2516 ?x2608 (* (- 2) (* r00 r00 r!1)) (* 3 (* r00 r!1 x!0 x!0 x!0)) (* 4 (* r00 r00 r!1 r!1 r!1)) (* (- 4) (* x00 r!1 x!0)) (* 6 (* x00 r!1 r!1 r!1 r!1 x!0 x!0)) (* (- 1) (* r!1 r!1 r!1 x!0)) (* 3 (* r00 r!1 r!1 x!0 x!0 x!0)) (* (- 2) (* r00 r00 r!1 x!0)) (* 3 (* r00 r00 r!1 r!1 r!1 r!1 x!0 x!0)) (* (- 1) (* r00 r00 x!0 x!0 x!0)) (* (- 3) (* r00 r00 r!1 x!0 x!0 x!0)) (* (- 3) (* r00 r00 r!1 r!1 x!0 x!0 x!0)) (* (- 1) (* r00 r00 r!1 r!1 r!1 x!0 x!0 x!0)) (* (- 1) ?x3397) (* (- 15) (* r00 r00 r!1 r!1 r!1 x!0)) (* 2 (* x!0 x!0 x!0)) (* 6 (* r00 r00 r!1 x!0 x!0)) (* (- 10) (* r00 r00 r!1 r!1 x!0)) (* 2 (* r!1 r!1 r!1 r!1)))))
 (let (($x1276 (= ?x874 0)))
 (let (($x1280 (not $x1276)))
 (let (($x848 (and $x877 $x1280)))
 (let ((?x2254 (* ?x2264 ?x2264 ?x2264 ?x2264 ?x2263 ?x2263 ?x2263)))
 (let ((?x2086 (* r!1 x!0 x!0)))
 (let ((?x2853 (* r!1 r!1 r!1 x!0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x153 (* (- 1) r00)))
 (let ((?x2076 (* (- 2) x!0)))
 (let ((?x3389 (+ r!1 ?x2076 ?x153 ?x2084 ?x35 ?x36 (* (- 8) (* r!1 r!1 r!1 x00)) (* 2 (* x!0 x!0 x!0 x00)) (* (- 12) (* r!1 r!1 r!1 r!1 x00)) (* 6 (* r!1 x!0 x!0 x!0 x00)) (* 6 (* r!1 r!1 x!0 x!0 x!0 x00)) (* 2 (* r!1 r!1 r!1 x!0 x!0 x!0 x00)) (* (- 3) (* r!1 x!0)) (* (- 5) (* r!1 r!1 x!0)) ?x2853 (* (- 1) ?x2516) (* (- 2) (* r!1 r!1 r!1 r!1)) (* (- 2) (* r!1 r00)) (* (- 1) (* r!1 r!1 r00)) (* 4 (* r!1 r!1 r!1 r00)) (* (- 1) ?x2262) (* (- 8) (* r!1 r!1 r!1 r!1 r!1 x00)) (* (- 2) (* x!0 x!0)) ?x2086 (* (- 3) (* r!1 r!1 x!0 x!0)) ?x2254 (* r!1 r!1 r00 r00) (* 2 (* r!1 x!0 r00 r00)) (* 4 (* r!1 x!0 x00)) (* 2 (* r!1 r00 r00)) (* (- 4) (* r!1 r!1 r!1 r00 r00)) (* x!0 r00 r00) (* 10 (* r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 r!1 r00 r00)) (* (- 4) (* r!1 r!1 r!1 r!1 r!1 r00 r00)) (* 15 (* r!1 r!1 r!1 x!0 r00 r00)) (* 11 (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 x!0 x!0 r00 r00)) (* (- 12) (* r!1 r!1 x!0 x!0 r00 r00)) (* (- 10) (* r!1 r!1 r!1 x!0 x!0 r00 r00)) (* (- 2) (* r!1 x!0 r00)) (* 6 (* r!1 r!1 r!1 r!1 r!1 x!0 x00)) (* 30 (* r!1 r!1 r!1 x!0 x00)) (* 22 (* r!1 r!1 r!1 r!1 x!0 x00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r!1 r00 r00)) (* 3 (* r!1 r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 r!1 x!0 x!0 x00)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0 x!0 r00 r00)) (* x!0 x!0 x!0 r00 r00) (* 3 (* r!1 x!0 x!0 x!0 r00 r00)) (* 3 (* r!1 r!1 x!0 x!0 x!0 r00 r00)) (* r!1 r!1 r!1 x!0 x!0 x!0 r00 r00) (* (- 2) (* r!1 r!1 r!1 r!1 r!1 r!1 x00)) (* 4 (* r!1 x00)) (* 2 (* r!1 r!1 x00)) (* 2 (* x!0 x00)) (* 20 (* r!1 r!1 x!0 x00)) (* 2 (* ?x2264 ?x2264 ?x2264 ?x2263 ?x2263 ?x2263)) (* (- 12) (* r!1 x!0 x!0 x00)) (* (- 24) (* r!1 r!1 x!0 x!0 x00)) (* (- 20) (* r!1 r!1 r!1 x!0 x!0 x00)) (* (- 2) (* ?x2264 ?x2264 ?x2264 ?x2263 ?x2263 ?x2263 ?x2263)) (* 6 (* r!1 r!1 r!1 r!1 r00)) (* 4 (* r!1 r!1 r!1 r!1 r!1 r00)) (* r!1 r!1 r!1 r!1 r!1 r!1 r00) (* (- 10) (* r!1 r!1 x!0 r00)) (* (- 15) (* r!1 r!1 r!1 x!0 r00)) (* (- 11) (* r!1 r!1 r!1 r!1 x!0 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 r!1 x!0 r00)) (* 6 (* r!1 x!0 x!0 r00)) (* 12 (* r!1 r!1 x!0 x!0 r00)) (* 10 (* r!1 r!1 r!1 x!0 x!0 r00)) (* 3 (* r!1 r!1 r!1 r!1 x!0 x!0 r00)) (* (- 2) (* x!0 x!0 x!0)) (* (- 1) (* x!0 x!0 x!0 r00)) (* (- 3) (* r!1 x!0 x!0 x!0 r00)) (* (- 3) (* r!1 r!1 x!0 x!0 x!0 r00)) (* (- 1) (* r!1 r!1 r!1 x!0 x!0 x!0 r00)) (* (- 1) ?x2608) ?x3397 (* (- 1) (* x!0 r00)))))
 (let (($x2561 (and (= (+ r!1 ?x2076 ?x153 ?x2240 ?x35 ?x36) 0) (not (= ?x3389 0)))))
 (let (($x3517 (exists ((r Int) (x Int) )(! (let ((?x3731 (* (- 1) (* x r00))))
 (let ((?x103 (* (- 1) r)))
 (let ((?x169 (+ ?x103 x)))
 (let ((?x163 (+ 1 r)))
 (let ((?x3382 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x169 ?x169)))
 (let ((?x3730 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x169 ?x169 ?x169))))
 (let ((?x3723 (* (- 1) (* r r r x x x r00))))
 (let ((?x3722 (* (- 3) (* r r x x x r00))))
 (let ((?x3721 (* (- 3) (* r x x x r00))))
 (let ((?x3720 (* (- 1) (* x x x r00))))
 (let ((?x3719 (* 3 (* r r r r x x r00))))
 (let ((?x3718 (* 10 (* r r r x x r00))))
 (let ((?x3717 (* 12 (* r r x x r00))))
 (let ((?x3716 (* 6 (* r x x r00))))
 (let ((?x3715 (* (- 3) (* r r r r r x r00))))
 (let ((?x3714 (* (- 11) (* r r r r x r00))))
 (let ((?x3713 (* (- 15) (* r r r x r00))))
 (let ((?x3712 (* (- 10) (* r r x r00))))
 (let ((?x2185 (* r r r r r r r00)))
 (let ((?x3711 (* 4 (* r r r r r r00))))
 (let ((?x3710 (* 6 (* r r r r r00))))
 (let ((?x1823 (* 2 (* x x00))))
 (let ((?x3678 (* 4 (* r x00))))
 (let ((?x1629 (* r r r x x x r00 r00)))
 (let ((?x1649 (* 3 (* r r x x x r00 r00))))
 (let ((?x1648 (* 3 (* r x x x r00 r00))))
 (let ((?x1603 (* x x x r00 r00)))
 (let ((?x1647 (* (- 3) (* r r r r x x r00 r00))))
 (let ((?x1642 (* 3 (* r r r r r x r00 r00))))
 (let ((?x1319 (* (- 1) (* r r r r r r r00 r00))))
 (let ((?x1178 (* (- 2) (* r x r00))))
 (let ((?x3677 (* (- 10) (* r r r x x r00 r00))))
 (let ((?x3676 (* (- 12) (* r r x x r00 r00))))
 (let ((?x3675 (* (- 6) (* r x x r00 r00))))
 (let ((?x3674 (* 11 (* r r r r x r00 r00))))
 (let ((?x3673 (* 15 (* r r r x r00 r00))))
 (let ((?x3672 (* (- 4) (* r r r r r r00 r00))))
 (let ((?x3671 (* (- 6) (* r r r r r00 r00))))
 (let ((?x3670 (* 10 (* r r x r00 r00))))
 (let ((?x876 (* x r00 r00)))
 (let ((?x3669 (* (- 4) (* r r r r00 r00))))
 (let ((?x3668 (* 2 (* r r00 r00))))
 (let ((?x813 (* 2 (* r x r00 r00))))
 (let ((?x761 (* r r r00 r00)))
 (let ((?x696 (* ?x163 ?x163 ?x163 ?x163 ?x169 ?x169 ?x169)))
 (let ((?x668 (* r x x)))
 (let ((?x3653 (* (- 2) (* x x))))
 (let ((?x3642 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x169 ?x169))))
 (let ((?x3641 (* 4 (* r r r r00))))
 (let ((?x3273 (* (- 1) (* r r r00))))
 (let ((?x3640 (* (- 2) (* r r00))))
 (let ((?x343 (* r r r x)))
 (let ((?x3633 (* (- 5) (* r r x))))
 (let ((?x3630 (* 2 (* r r r x x x x00))))
 (let ((?x3623 (* 2 (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x153 (* (- 1) r00)))
 (let ((?x152 (* (- 2) x)))
 (let ((?x3937 (+ r ?x152 ?x153 ?x30 ?x35 ?x36 (* (- 8) (* r r r x00)) ?x3623 (* (- 12) (* r r r r x00)) (* 6 (* r x x x x00)) (* 6 (* r r x x x x00)) ?x3630 (* (- 3) (* r x)) ?x3633 ?x343 (* (- 1) (* r r r r x)) (* (- 2) (* r r r r)) ?x3640 ?x3273 ?x3641 ?x3642 (* (- 8) (* r r r r r x00)) ?x3653 ?x668 (* (- 3) (* r r x x)) ?x696 ?x761 ?x813 (* 4 (* r x x00)) ?x3668 ?x3669 ?x876 ?x3670 ?x3671 ?x3672 ?x3673 ?x3674 ?x3675 ?x3676 ?x3677 ?x1178 (* 6 (* r r r r r x x00)) (* 30 (* r r r x x00)) (* 22 (* r r r r x x00)) ?x1319 ?x1642 (* (- 6) (* r r r r x x x00)) ?x1647 ?x1603 ?x1648 ?x1649 ?x1629 (* (- 2) (* r r r r r r x00)) ?x3678 (* 2 (* r r x00)) ?x1823 (* 20 (* r r x x00)) (* 2 (* ?x163 ?x163 ?x163 ?x169 ?x169 ?x169)) (* (- 12) (* r x x x00)) (* (- 24) (* r r x x x00)) (* (- 20) (* r r r x x x00)) (* (- 2) (* ?x163 ?x163 ?x163 ?x169 ?x169 ?x169 ?x169)) ?x3710 ?x3711 ?x2185 ?x3712 ?x3713 ?x3714 ?x3715 ?x3716 ?x3717 ?x3718 ?x3719 (* (- 2) (* x x x)) ?x3720 ?x3721 ?x3722 ?x3723 ?x3730 ?x3382 ?x3731)))
 (let (($x156 (= (+ r ?x152 ?x153 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x156 (not (= ?x3937 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1213 (exists ((r Int) (x Int) )(! (let ((?x103 (* (- 1) r)))
 (let ((?x184 (+ x ?x103)))
 (let ((?x163 (+ 1 r)))
 (let ((?x1556 (* r00 ?x163 ?x163 ?x184)))
 (let ((?x1535 (* ?x163 ?x184 ?x184)))
 (let ((?x1520 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x1505 (* r00 r00 ?x163 ?x163 ?x163)))
 (let ((?x1487 (* r00 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x1310 (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1278 (* r00 r00 ?x163 ?x163 ?x184)))
 (let ((?x1699 (* r00 r00 ?x184 ?x184)))
 (let ((?x304 (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x278 (* ?x163 ?x163 ?x163 ?x163)))
 (let ((?x1339 (+ (* 2 (* x00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184)) (* (- 1) (* r00 ?x163 ?x163 ?x163)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163)) ?x278 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)) ?x304 (* (- 3) (* ?x163 ?x163 ?x184 ?x184)) (* (- 2) (* ?x184 ?x184 ?x184)) ?x1699 ?x1278 (* (- 1) (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* r00 ?x184 ?x184)) ?x1310 (* 2 (* x00 ?x163 ?x163 ?x163)) (* 2 (* x00 ?x163 ?x163 ?x184)) (* (- 2) (* x00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x184)) (* 2 (* x00 ?x184 ?x184)) (* (- 1) (* r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 2 (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 2) (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) ?x1487 ?x1505 ?x1520 ?x1535 (* (- 1) ?x1556))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x152 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x154 (* (- 1) ?x30)))
 (let ((?x153 (* (- 1) r00)))
 (and (= (+ r ?x153 ?x154 ?x152 ?x35 ?x36) 0) (not (= ?x1339 0))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x3526 (lambda ((r Int) (x Int) )(let ((?x3731 (* (- 1) (* x r00))))
 (let ((?x103 (* (- 1) r)))
 (let ((?x169 (+ ?x103 x)))
 (let ((?x163 (+ 1 r)))
 (let ((?x3382 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x169 ?x169)))
 (let ((?x3730 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x169 ?x169 ?x169))))
 (let ((?x3723 (* (- 1) (* r r r x x x r00))))
 (let ((?x3722 (* (- 3) (* r r x x x r00))))
 (let ((?x3721 (* (- 3) (* r x x x r00))))
 (let ((?x3720 (* (- 1) (* x x x r00))))
 (let ((?x3719 (* 3 (* r r r r x x r00))))
 (let ((?x3718 (* 10 (* r r r x x r00))))
 (let ((?x3717 (* 12 (* r r x x r00))))
 (let ((?x3716 (* 6 (* r x x r00))))
 (let ((?x3715 (* (- 3) (* r r r r r x r00))))
 (let ((?x3714 (* (- 11) (* r r r r x r00))))
 (let ((?x3713 (* (- 15) (* r r r x r00))))
 (let ((?x3712 (* (- 10) (* r r x r00))))
 (let ((?x2185 (* r r r r r r r00)))
 (let ((?x3711 (* 4 (* r r r r r r00))))
 (let ((?x3710 (* 6 (* r r r r r00))))
 (let ((?x1823 (* 2 (* x x00))))
 (let ((?x3678 (* 4 (* r x00))))
 (let ((?x1629 (* r r r x x x r00 r00)))
 (let ((?x1649 (* 3 (* r r x x x r00 r00))))
 (let ((?x1648 (* 3 (* r x x x r00 r00))))
 (let ((?x1603 (* x x x r00 r00)))
 (let ((?x1647 (* (- 3) (* r r r r x x r00 r00))))
 (let ((?x1642 (* 3 (* r r r r r x r00 r00))))
 (let ((?x1319 (* (- 1) (* r r r r r r r00 r00))))
 (let ((?x1178 (* (- 2) (* r x r00))))
 (let ((?x3677 (* (- 10) (* r r r x x r00 r00))))
 (let ((?x3676 (* (- 12) (* r r x x r00 r00))))
 (let ((?x3675 (* (- 6) (* r x x r00 r00))))
 (let ((?x3674 (* 11 (* r r r r x r00 r00))))
 (let ((?x3673 (* 15 (* r r r x r00 r00))))
 (let ((?x3672 (* (- 4) (* r r r r r r00 r00))))
 (let ((?x3671 (* (- 6) (* r r r r r00 r00))))
 (let ((?x3670 (* 10 (* r r x r00 r00))))
 (let ((?x876 (* x r00 r00)))
 (let ((?x3669 (* (- 4) (* r r r r00 r00))))
 (let ((?x3668 (* 2 (* r r00 r00))))
 (let ((?x813 (* 2 (* r x r00 r00))))
 (let ((?x761 (* r r r00 r00)))
 (let ((?x696 (* ?x163 ?x163 ?x163 ?x163 ?x169 ?x169 ?x169)))
 (let ((?x668 (* r x x)))
 (let ((?x3653 (* (- 2) (* x x))))
 (let ((?x3642 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x169 ?x169))))
 (let ((?x3641 (* 4 (* r r r r00))))
 (let ((?x3273 (* (- 1) (* r r r00))))
 (let ((?x3640 (* (- 2) (* r r00))))
 (let ((?x343 (* r r r x)))
 (let ((?x3633 (* (- 5) (* r r x))))
 (let ((?x3630 (* 2 (* r r r x x x x00))))
 (let ((?x3623 (* 2 (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x153 (* (- 1) r00)))
 (let ((?x152 (* (- 2) x)))
 (let ((?x3937 (+ r ?x152 ?x153 ?x30 ?x35 ?x36 (* (- 8) (* r r r x00)) ?x3623 (* (- 12) (* r r r r x00)) (* 6 (* r x x x x00)) (* 6 (* r r x x x x00)) ?x3630 (* (- 3) (* r x)) ?x3633 ?x343 (* (- 1) (* r r r r x)) (* (- 2) (* r r r r)) ?x3640 ?x3273 ?x3641 ?x3642 (* (- 8) (* r r r r r x00)) ?x3653 ?x668 (* (- 3) (* r r x x)) ?x696 ?x761 ?x813 (* 4 (* r x x00)) ?x3668 ?x3669 ?x876 ?x3670 ?x3671 ?x3672 ?x3673 ?x3674 ?x3675 ?x3676 ?x3677 ?x1178 (* 6 (* r r r r r x x00)) (* 30 (* r r r x x00)) (* 22 (* r r r r x x00)) ?x1319 ?x1642 (* (- 6) (* r r r r x x x00)) ?x1647 ?x1603 ?x1648 ?x1649 ?x1629 (* (- 2) (* r r r r r r x00)) ?x3678 (* 2 (* r r x00)) ?x1823 (* 20 (* r r x x00)) (* 2 (* ?x163 ?x163 ?x163 ?x169 ?x169 ?x169)) (* (- 12) (* r x x x00)) (* (- 24) (* r r x x x00)) (* (- 20) (* r r r x x x00)) (* (- 2) (* ?x163 ?x163 ?x163 ?x169 ?x169 ?x169 ?x169)) ?x3710 ?x3711 ?x2185 ?x3712 ?x3713 ?x3714 ?x3715 ?x3716 ?x3717 ?x3718 ?x3719 (* (- 2) (* x x x)) ?x3720 ?x3721 ?x3722 ?x3723 ?x3730 ?x3382 ?x3731)))
 (let (($x156 (= (+ r ?x152 ?x153 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x3943 (and $x156 (not (= ?x3937 0)))))
 (let ((?x184 (+ x ?x103)))
 (let ((?x1535 (* ?x163 ?x184 ?x184)))
 (let ((?x1520 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x1505 (* r00 r00 ?x163 ?x163 ?x163)))
 (let ((?x1487 (* r00 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x1310 (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1278 (* r00 r00 ?x163 ?x163 ?x184)))
 (let ((?x1699 (* r00 r00 ?x184 ?x184)))
 (let ((?x304 (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x278 (* ?x163 ?x163 ?x163 ?x163)))
 (let ((?x1339 (+ (* 2 (* x00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184)) (* (- 1) (* r00 ?x163 ?x163 ?x163)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163)) ?x278 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)) ?x304 (* (- 3) (* ?x163 ?x163 ?x184 ?x184)) (* (- 2) (* ?x184 ?x184 ?x184)) ?x1699 ?x1278 (* (- 1) (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* r00 ?x184 ?x184)) ?x1310 (* 2 (* x00 ?x163 ?x163 ?x163)) (* 2 (* x00 ?x163 ?x163 ?x184)) (* (- 2) (* x00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x184)) (* 2 (* x00 ?x184 ?x184)) (* (- 1) (* r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 2 (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 2) (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) ?x1487 ?x1505 ?x1520 ?x1535 (* (- 1) (* r00 ?x163 ?x163 ?x184)))))
 (let (($x1346 (and (= (+ r ?x153 (* (- 1) ?x30) ?x152 ?x35 ?x36) 0) (not (= ?x1339 0)))))
 (rewrite (= $x1346 $x3943))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x288 (exists ((r Int) (x Int) )(! (let ((?x103 (* (- 1) r)))
 (let ((?x184 (+ x ?x103)))
 (let ((?x163 (+ 1 r)))
 (let ((?x1556 (* r00 ?x163 ?x163 ?x184)))
 (let ((?x1475 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1227 (* r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1390 (* ?x163 ?x163 ?x163 ?x184)))
 (let ((?x1296 (* r00 ?x184 ?x184)))
 (let ((?x1294 (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x232 (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x276 (* ?x163 ?x163 ?x163 ?x163 ?x163)))
 (let ((?x266 (* r00 ?x163 ?x163 ?x163)))
 (let ((?x242 (* ?x163 ?x163 ?x163 ?x163 ?x184)))
 (let ((?x1562 (+ (* (- 2) (* x00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) ?x242 ?x266 ?x276 (* (- 1) (* ?x163 ?x163 ?x163 ?x163)) ?x232 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 3 (* ?x163 ?x163 ?x184 ?x184)) (* 2 (* ?x184 ?x184 ?x184)) (* (- 1) (* r00 r00 ?x184 ?x184)) (* (- 1) (* r00 r00 ?x163 ?x163 ?x184)) ?x1294 ?x1296 (* (- 1) (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 2) (* x00 ?x163 ?x163 ?x163)) (* (- 2) (* x00 ?x163 ?x163 ?x184)) (* 2 (* x00 ?x163 ?x163 ?x163 ?x184 ?x184)) ?x1390 (* (- 2) (* x00 ?x184 ?x184)) ?x1227 (* (- 2) (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 2 (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184 ?x184)) ?x1475 (* (- 1) (* r00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* r00 r00 ?x163 ?x163 ?x163)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* ?x163 ?x184 ?x184)) ?x1556)))
 (let ((?x36 (* r00 r00)))
 (let ((?x234 (* (- 1) ?x36)))
 (let ((?x202 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x103 r00 ?x30 ?x32 ?x202 ?x234) 0) (not (= ?x1562 0)))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x1348 (lambda ((r Int) (x Int) )(let ((?x103 (* (- 1) r)))
 (let ((?x184 (+ x ?x103)))
 (let ((?x163 (+ 1 r)))
 (let ((?x1556 (* r00 ?x163 ?x163 ?x184)))
 (let ((?x1535 (* ?x163 ?x184 ?x184)))
 (let ((?x1520 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x1505 (* r00 r00 ?x163 ?x163 ?x163)))
 (let ((?x1487 (* r00 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x1310 (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1278 (* r00 r00 ?x163 ?x163 ?x184)))
 (let ((?x1699 (* r00 r00 ?x184 ?x184)))
 (let ((?x304 (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x278 (* ?x163 ?x163 ?x163 ?x163)))
 (let ((?x1339 (+ (* 2 (* x00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184)) (* (- 1) (* r00 ?x163 ?x163 ?x163)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163)) ?x278 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)) ?x304 (* (- 3) (* ?x163 ?x163 ?x184 ?x184)) (* (- 2) (* ?x184 ?x184 ?x184)) ?x1699 ?x1278 (* (- 1) (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* r00 ?x184 ?x184)) ?x1310 (* 2 (* x00 ?x163 ?x163 ?x163)) (* 2 (* x00 ?x163 ?x163 ?x184)) (* (- 2) (* x00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x184)) (* 2 (* x00 ?x184 ?x184)) (* (- 1) (* r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 2 (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 2) (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184 ?x184)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) ?x1487 ?x1505 ?x1520 ?x1535 (* (- 1) ?x1556))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x152 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x154 (* (- 1) ?x30)))
 (let ((?x153 (* (- 1) r00)))
 (let (($x1346 (and (= (+ r ?x153 ?x154 ?x152 ?x35 ?x36) 0) (not (= ?x1339 0)))))
 (let ((?x1475 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1227 (* r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1390 (* ?x163 ?x163 ?x163 ?x184)))
 (let ((?x1296 (* r00 ?x184 ?x184)))
 (let ((?x1294 (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x232 (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x276 (* ?x163 ?x163 ?x163 ?x163 ?x163)))
 (let ((?x266 (* r00 ?x163 ?x163 ?x163)))
 (let ((?x242 (* ?x163 ?x163 ?x163 ?x163 ?x184)))
 (let ((?x1562 (+ (* (- 2) (* x00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) ?x242 ?x266 ?x276 (* (- 1) ?x278) ?x232 (* (- 1) ?x304) (* 3 (* ?x163 ?x163 ?x184 ?x184)) (* 2 (* ?x184 ?x184 ?x184)) (* (- 1) ?x1699) (* (- 1) ?x1278) ?x1294 ?x1296 (* (- 1) ?x1310) (* (- 2) (* x00 ?x163 ?x163 ?x163)) (* (- 2) (* x00 ?x163 ?x163 ?x184)) (* 2 (* x00 ?x163 ?x163 ?x163 ?x184 ?x184)) ?x1390 (* (- 2) (* x00 ?x184 ?x184)) ?x1227 (* (- 2) (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 2 (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184 ?x184)) ?x1475 (* (- 1) ?x1487) (* (- 1) ?x1505) (* (- 1) ?x1520) (* (- 1) ?x1535) ?x1556)))
 (let (($x256 (= (+ ?x103 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x244 (and $x256 (not (= ?x1562 0)))))
 (rewrite (= $x244 $x1346))))))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((r Int) (x Int) )(! (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x48 (+ (* (- 2) ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 x00) (* ?x42 ?x42 ?x42 ?x42 ?x43) (* ?x42 ?x42 ?x42 r00) (* ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x52 (+ (- ?x48 (* ?x42 ?x42 ?x42 ?x42)) (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x58 (+ (- ?x52 (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43)) (* 3 ?x42 ?x42 ?x43 ?x43) (* 2 ?x43 ?x43 ?x43))))
 (let ((?x62 (- (- ?x58 (* r00 r00 ?x43 ?x43)) (* ?x42 ?x42 r00 r00 ?x43))))
 (let ((?x65 (+ ?x62 (* ?x42 ?x42 ?x42 r00 r00 ?x43 ?x43) (* r00 ?x43 ?x43))))
 (let ((?x70 (- (- ?x65 (* ?x42 ?x42 ?x42 r00 r00 ?x43 ?x43 ?x43)) (* 2 ?x42 ?x42 ?x42 x00))))
 (let ((?x74 (+ (- ?x70 (* 2 ?x42 ?x42 ?x43 x00)) (* 2 ?x42 ?x42 ?x42 ?x43 ?x43 x00) (* ?x42 ?x42 ?x42 ?x43))))
 (let ((?x78 (+ (- ?x74 (* 2 ?x43 ?x43 x00)) (* ?x42 ?x42 ?x42 r00 ?x43 ?x43 ?x43))))
 (let ((?x83 (+ (- ?x78 (* 2 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43)) (* 2 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43) (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43))))
 (let ((?x89 (- (- ?x83 (* ?x42 ?x42 ?x42 r00 ?x43 ?x43)) (* ?x42 ?x42 ?x42 r00 r00))))
 (let ((?x91 (- (- ?x89 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43)) (* ?x42 ?x43 ?x43))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (+ ?x91 (* ?x42 ?x42 r00 ?x43)) 0)))))))))))))))))))) :qid k!26))
 ))
 (let ((?x260 (lambda ((r Int) (x Int) )(let ((?x103 (* (- 1) r)))
 (let ((?x184 (+ x ?x103)))
 (let ((?x163 (+ 1 r)))
 (let ((?x1556 (* r00 ?x163 ?x163 ?x184)))
 (let ((?x1475 (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1227 (* r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)))
 (let ((?x1390 (* ?x163 ?x163 ?x163 ?x184)))
 (let ((?x1296 (* r00 ?x184 ?x184)))
 (let ((?x1294 (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x232 (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)))
 (let ((?x276 (* ?x163 ?x163 ?x163 ?x163 ?x163)))
 (let ((?x266 (* r00 ?x163 ?x163 ?x163)))
 (let ((?x242 (* ?x163 ?x163 ?x163 ?x163 ?x184)))
 (let ((?x1562 (+ (* (- 2) (* x00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) ?x242 ?x266 ?x276 (* (- 1) (* ?x163 ?x163 ?x163 ?x163)) ?x232 (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 3 (* ?x163 ?x163 ?x184 ?x184)) (* 2 (* ?x184 ?x184 ?x184)) (* (- 1) (* r00 r00 ?x184 ?x184)) (* (- 1) (* r00 r00 ?x163 ?x163 ?x184)) ?x1294 ?x1296 (* (- 1) (* r00 r00 ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* (- 2) (* x00 ?x163 ?x163 ?x163)) (* (- 2) (* x00 ?x163 ?x163 ?x184)) (* 2 (* x00 ?x163 ?x163 ?x163 ?x184 ?x184)) ?x1390 (* (- 2) (* x00 ?x184 ?x184)) ?x1227 (* (- 2) (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184)) (* 2 (* ?x163 ?x163 ?x163 ?x184 ?x184 ?x184 ?x184)) ?x1475 (* (- 1) (* r00 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* r00 r00 ?x163 ?x163 ?x163)) (* (- 1) (* ?x163 ?x163 ?x163 ?x163 ?x163 ?x184 ?x184)) (* (- 1) (* ?x163 ?x184 ?x184)) ?x1556)))
 (let ((?x36 (* r00 r00)))
 (let ((?x234 (* (- 1) ?x36)))
 (let ((?x202 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x244 (and (= (+ ?x103 r00 ?x30 ?x32 ?x202 ?x234) 0) (not (= ?x1562 0)))))
 (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x48 (+ (* (- 2) ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 x00) (* ?x42 ?x42 ?x42 ?x42 ?x43) (* ?x42 ?x42 ?x42 r00) (* ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x52 (+ (- ?x48 (* ?x42 ?x42 ?x42 ?x42)) (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x58 (+ (- ?x52 (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43)) (* 3 ?x42 ?x42 ?x43 ?x43) (* 2 ?x43 ?x43 ?x43))))
 (let ((?x62 (- (- ?x58 (* r00 r00 ?x43 ?x43)) (* ?x42 ?x42 r00 r00 ?x43))))
 (let ((?x65 (+ ?x62 (* ?x42 ?x42 ?x42 r00 r00 ?x43 ?x43) (* r00 ?x43 ?x43))))
 (let ((?x70 (- (- ?x65 (* ?x42 ?x42 ?x42 r00 r00 ?x43 ?x43 ?x43)) (* 2 ?x42 ?x42 ?x42 x00))))
 (let ((?x74 (+ (- ?x70 (* 2 ?x42 ?x42 ?x43 x00)) (* 2 ?x42 ?x42 ?x42 ?x43 ?x43 x00) (* ?x42 ?x42 ?x42 ?x43))))
 (let ((?x78 (+ (- ?x74 (* 2 ?x43 ?x43 x00)) (* ?x42 ?x42 ?x42 r00 ?x43 ?x43 ?x43))))
 (let ((?x83 (+ (- ?x78 (* 2 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43)) (* 2 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43) (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43))))
 (let ((?x89 (- (- ?x83 (* ?x42 ?x42 ?x42 r00 ?x43 ?x43)) (* ?x42 ?x42 ?x42 r00 r00))))
 (let ((?x91 (- (- ?x89 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43)) (* ?x42 ?x43 ?x43))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x97 (and (= ?x38 0) (or (not (= (+ ?x91 (* ?x42 ?x42 r00 ?x43)) 0))))))
 (rewrite (= $x97 $x244))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x1536 (mp (mp @x99 (quant-intro (proof-bind ?x260) (= $x98 $x288)) $x288) (rewrite (= $x288 $x288)) $x288)))
 (let ((@x3495 (mp (mp @x1536 (quant-intro (proof-bind ?x1348) (= $x288 $x1213)) $x1213) (quant-intro (proof-bind ?x3526) (= $x1213 $x3517)) $x3517)))
 (let ((@x1281 (mp (mp~ @x3495 (sk (~ $x3517 $x2561)) $x2561) (rewrite (= $x2561 $x848)) $x848)))
 (let ((@x1282 (and-elim @x1281 $x877)))
 (let ((@x883 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x877) $x3547)) @x1282 $x3547)))
 (let (($x890 (>= ?x854 0)))
 (let ((@x760 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x877) $x890)) @x1282 $x890)))
 (let (($x1450 (not (>= ?x874 0))))
 (let (($x389 (<= ?x874 0)))
 (let ((@x885 (lemma ((_ th-lemma arith) (hypothesis (not $x389)) @x760 @x883 @x760 @x883 false) $x389)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1276 (not $x389) $x1450)) (and-elim @x1281 $x1280) (or (not $x389) $x1450))))
 ((_ th-lemma arith) (unit-resolution @x238 @x885 $x1450) @x760 @x883 @x760 @x883 false))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        25
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             642
 :arith-nonlinear-bounds    22
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 111
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                4.13
 :memory                    3.55
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1569263
 :num-checks                1
 :propagations              4
 :rlimit-count              14057
 :time                      0.01
 :total-time                0.02)
