unsat
((set-logic NIA)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x245 (to_real x!2)))
 (let ((?x189 (to_real y!1)))
 (let ((?x95 (to_real z!0)))
 (let ((?x871 (* (- 1.0) (* ?x95 ?x95 ?x95 ?x189 ?x189 ?x189 ?x189 ?x245 ?x245 ?x245 ?x245))))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x623 (+ (* (/ 1.0 2.0) (* ?x95 ?x95 ?x189 ?x189 ?x245)) (* 8.0 (* ?x189 ?x245 ?x245 ?x245 ?x245)) (* (- 1.0) (* ?x95 ?x95 ?x95 ?x95 ?x189 ?x189 ?x189 ?x245 ?x245 ?x245)) (* (- (/ 1.0 2.0)) (* ?x95 ?x106 ?x110 ?x189 ?x189 ?x245)) (* (to_real z00) ?x95 ?x95 ?x95 ?x189 ?x189 ?x189 ?x245 ?x245 ?x245) (* (- 8.0) (* (to_real z00) ?x245 ?x245 ?x245)) (* (/ 1.0 2.0) (* ?x95 ?x189 ?x189 ?x189 ?x245 ?x245)) (* 8.0 (* ?x95 ?x245 ?x245 ?x245)) (* ?x95 ?x95 ?x95 ?x106 ?x110 ?x189 ?x189 ?x189 ?x245 ?x245 ?x245) (* (- (/ 1.0 2.0)) (* (to_real z00) ?x95 ?x189 ?x189 ?x245)) (* (- 8.0) (* ?x106 ?x110 ?x245 ?x245 ?x245)) ?x871)))
 (let (($x392 (<= ?x623 0.0)))
 (let (($x679 (not $x392)))
 (let (($x557 (>= ?x623 0.0)))
 (let ((?x84 (* x00 y00)))
 (let ((?x114 (+ z00 ?x84 (* (- 1) (* y!1 x!2)) (* (- 1) z!0))))
 (let (($x289 (>= ?x114 0)))
 (let (($x389 (= 0 ?x114)))
 (let ((@x433 (symm (commutativity (= $x389 (= ?x114 0))) (= (= ?x114 0) $x389))))
 (let (($x97 (= ?x114 0)))
 (let ((?x605 (* ?x189 ?x245)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x899 (* 8.0 (* ?x245 ?x245 ?x245))))
 (let ((?x410 (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x245)))
 (let ((?x458 (* (/ 1.0 2.0) (* ?x245 ?x245))))
 (let ((?x603 (+ (* (- 1.0) (* ?x189 ?x189 ?x189 ?x245 ?x245 ?x245 ?x245 ?x245 ?x245)) (* 3.0 (* ?x95 ?x245 ?x245 ?x245 ?x245 ?x245)) (* (- 9.0) (* ?x95 ?x189 ?x245 ?x245 ?x245 ?x245 ?x245)) (* 9.0 (* ?x95 ?x189 ?x189 ?x245 ?x245 ?x245 ?x245 ?x245)) (* (/ 1.0 2.0) (* ?x95 ?x245)) ?x458 (* (- 3.0) (* ?x189 ?x245 ?x245 ?x245 ?x245 ?x245 ?x245)) (* (/ 1.0 2.0) (* ?x189 ?x189 ?x245 ?x245)) ?x410 (* (- 1.0) (* ?x95 ?x95 ?x95 ?x189 ?x189 ?x189 ?x245 ?x245 ?x245)) (* (- 1.0) (* ?x95 ?x189 ?x245)) (* (- 9.0) (* ?x95 ?x95 ?x189 ?x245 ?x245 ?x245 ?x245)) (* 9.0 (* ?x95 ?x95 ?x189 ?x189 ?x245 ?x245 ?x245 ?x245)) (* (/ 1.0 2.0) (* ?x95 ?x189 ?x189 ?x245)) (* (- 3.0) (* ?x95 ?x95 ?x189 ?x189 ?x189 ?x245 ?x245 ?x245 ?x245)) (* ?x95 ?x95 ?x95 ?x245 ?x245 ?x245) (* (- 3.0) (* ?x95 ?x95 ?x95 ?x189 ?x245 ?x245 ?x245)) (* 3.0 (* ?x95 ?x95 ?x95 ?x189 ?x189 ?x245 ?x245 ?x245)) (* 3.0 (* ?x189 ?x189 ?x245 ?x245 ?x245 ?x245 ?x245 ?x245)) (* (- 1.0) (* ?x189 ?x245 ?x245)) (* (- 3.0) (* ?x95 ?x189 ?x189 ?x189 ?x245 ?x245 ?x245 ?x245 ?x245)) (* 3.0 (* ?x95 ?x95 ?x245 ?x245 ?x245 ?x245)) ?x899)))
 (let (($x438 (= (* ?x603 (+ ?x197 ?x95 ?x117 ?x605)) 0.0)))
 (let (($x324 (not $x438)))
 (let (($x400 (= ?x623 0.0)))
 (let (($x319 (not $x400)))
 (let (($x611 (or $x319 $x324)))
 (let (($x328 (and $x97 $x611)))
 (let ((?x363 (+ ?x899 ?x410 (* (- 3.0) (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x245 ?x189)) (* (/ 1.0 2.0) (* ?x245 ?x245 ?x189 ?x189)) (* 3.0 (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x245 ?x189 ?x189)) (* (- 1.0) (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x245 ?x189 ?x189 ?x189)) (* 3.0 (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x95)) (* (- 9.0) (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x95 ?x189)) (* 9.0 (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x95 ?x189 ?x189)) (* (- 3.0) (* ?x245 ?x245 ?x245 ?x245 ?x245 ?x95 ?x189 ?x189 ?x189)) ?x458 (* (- 1.0) (* ?x245 ?x245 ?x189)) (* (/ 1.0 2.0) (* ?x245 ?x95)) (* (- 1.0) (* ?x245 ?x95 ?x189)) (* 3.0 (* ?x245 ?x245 ?x245 ?x245 ?x95 ?x95)) (* (/ 1.0 2.0) (* ?x245 ?x95 ?x189 ?x189)) (* (- 9.0) (* ?x245 ?x245 ?x245 ?x245 ?x95 ?x95 ?x189)) (* 9.0 (* ?x245 ?x245 ?x245 ?x245 ?x95 ?x95 ?x189 ?x189)) (* (- 3.0) (* ?x245 ?x245 ?x245 ?x245 ?x95 ?x95 ?x189 ?x189 ?x189)) (* ?x245 ?x245 ?x245 ?x95 ?x95 ?x95) (* (- 3.0) (* ?x245 ?x245 ?x245 ?x95 ?x95 ?x95 ?x189)) (* 3.0 (* ?x245 ?x245 ?x245 ?x95 ?x95 ?x95 ?x189 ?x189)) (* (- 1.0) (* ?x245 ?x245 ?x245 ?x95 ?x95 ?x95 ?x189 ?x189 ?x189)))))
 (let ((?x291 (* (- 1.0) (* ?x245 ?x245 ?x245 ?x245 ?x95 ?x95 ?x95 ?x189 ?x189 ?x189 ?x189))))
 (let ((?x902 (+ (* (/ 1.0 2.0) (* ?x245 ?x95 ?x95 ?x189 ?x189)) (* (- (/ 1.0 2.0)) (* ?x245 ?x95 ?x48 ?x189 ?x189)) (* (- (/ 1.0 2.0)) (* ?x245 ?x95 ?x189 ?x189 ?x106 ?x110)) (* (/ 1.0 2.0) (* ?x245 ?x245 ?x95 ?x189 ?x189 ?x189)) (* 8.0 (* ?x245 ?x245 ?x245 ?x95)) (* (- 8.0) (* ?x245 ?x245 ?x245 ?x48)) (* (- 8.0) (* ?x245 ?x245 ?x245 ?x106 ?x110)) (* 8.0 (* ?x245 ?x245 ?x245 ?x245 ?x189)) (* (- 1.0) (* ?x245 ?x245 ?x245 ?x95 ?x95 ?x95 ?x95 ?x189 ?x189 ?x189)) (* ?x245 ?x245 ?x245 ?x95 ?x95 ?x95 ?x48 ?x189 ?x189 ?x189) (* ?x245 ?x245 ?x245 ?x95 ?x95 ?x95 ?x189 ?x189 ?x189 ?x106 ?x110) ?x291)))
 (let (($x384 (or (not (= ?x902 0.0)) (not (= (* ?x363 (+ ?x95 ?x197 (* ?x245 ?x189) ?x117)) 0.0)))))
 (let (($x367 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x84)) 0) $x384)))
 (let (($x368 (exists ((x Int) (y Int) (z Int) )(! (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x798 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x883 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x880 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62))))
 (let ((?x692 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)))
 (let ((?x875 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x872 (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x869 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62))))
 (let ((?x866 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x863 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x860 (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62 ?x62))))
 (let ((?x857 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62))))
 (let ((?x854 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x818 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62 ?x62 ?x62))))
 (let ((?x851 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62 ?x62))))
 (let ((?x848 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62))))
 (let ((?x349 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)))
 (let ((?x264 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x994 (+ ?x264 ?x349 ?x848 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x62 ?x62)) ?x851 ?x818 ?x854 ?x857 ?x860 ?x863 (* (/ 1.0 2.0) (* ?x43 ?x43)) (* (- 1.0) (* ?x43 ?x43 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46)) (* (- 1.0) (* ?x43 ?x46 ?x62)) ?x866 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x62 ?x62)) ?x869 ?x872 ?x875 ?x692 ?x880 ?x883 ?x798)))
 (let ((?x1029 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62))))
 (let ((?x1031 (+ (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x48 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x62 ?x62 ?x106 ?x110)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x62 ?x62 ?x62)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x106 ?x110)) (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x62)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x62 ?x62 ?x62) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x106 ?x110) ?x1029)))
 (let (($x271 (not (= ?x1031 0.0))))
 (let (($x249 (or $x271 (not (= (* ?x994 (+ ?x46 ?x197 (* ?x43 ?x62) ?x117)) 0.0)))))
 (let (($x112 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x112 $x249))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x382 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x264 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x536 (+ (* (/ 1.0 2.0) (* ?x46 ?x62 ?x62 ?x43)) ?x264 (* (- 1.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x43 ?x43 ?x43)))))
 (let ((?x442 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x197)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x425 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x446 (+ ?x46 ?x43)))
 (let ((?x495 (+ (* 2.0 (* ?x43 ?x446 ?x425 ?x425)) ?x264 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x446 ?x446 ?x446 ?x425 ?x425 ?x425)))))
 (let (($x546 (or (not (= (* ?x495 ?x442) 0.0)) (not (= (* ?x536 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)))))
 (let (($x420 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x420 $x546))))))))))))))))))) :qid k!28))
 ))
 (let ((?x379 (lambda ((x Int) (y Int) (z Int) )(let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x798 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x883 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x880 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62))))
 (let ((?x692 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)))
 (let ((?x875 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x872 (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x869 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62))))
 (let ((?x866 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x863 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x860 (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62 ?x62))))
 (let ((?x857 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62))))
 (let ((?x854 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x818 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62 ?x62 ?x62))))
 (let ((?x851 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62 ?x62))))
 (let ((?x848 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62))))
 (let ((?x349 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)))
 (let ((?x264 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x994 (+ ?x264 ?x349 ?x848 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x62 ?x62)) ?x851 ?x818 ?x854 ?x857 ?x860 ?x863 (* (/ 1.0 2.0) (* ?x43 ?x43)) (* (- 1.0) (* ?x43 ?x43 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46)) (* (- 1.0) (* ?x43 ?x46 ?x62)) ?x866 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x62 ?x62)) ?x869 ?x872 ?x875 ?x692 ?x880 ?x883 ?x798)))
 (let ((?x1029 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62))))
 (let ((?x1031 (+ (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x48 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x62 ?x62 ?x106 ?x110)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x62 ?x62 ?x62)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x48)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x106 ?x110)) (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x62)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x62 ?x62 ?x62) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x106 ?x110) ?x1029)))
 (let (($x271 (not (= ?x1031 0.0))))
 (let (($x249 (or $x271 (not (= (* ?x994 (+ ?x46 ?x197 (* ?x43 ?x62) ?x117)) 0.0)))))
 (let (($x112 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x252 (and $x112 $x249)))
 (let ((?x536 (+ (* (/ 1.0 2.0) (* ?x46 ?x62 ?x62 ?x43)) ?x264 (* (- 1.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x43 ?x43 ?x43)))))
 (let ((?x442 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x197)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x425 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x446 (+ ?x46 ?x43)))
 (let ((?x495 (+ (* 2.0 (* ?x43 ?x446 ?x425 ?x425)) ?x264 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x446 ?x446 ?x446 ?x425 ?x425 ?x425)))))
 (let (($x546 (or (not (= (* ?x495 ?x442) 0.0)) (not (= (* ?x536 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)))))
 (let (($x420 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x473 (and $x420 $x546)))
 (rewrite (= $x473 $x252)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x441 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x264 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x536 (+ (* (/ 1.0 2.0) (* ?x46 ?x62 ?x62 ?x43)) ?x264 (* (- 1.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x43 ?x43 ?x43)))))
 (let ((?x442 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x197)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x425 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x446 (+ ?x46 ?x43)))
 (let ((?x495 (+ (* 2.0 (* ?x43 ?x446 ?x425 ?x425)) ?x264 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x446 ?x446 ?x446 ?x425 ?x425 ?x425)))))
 (let (($x546 (or (not (= (* ?x495 ?x442) 0.0)) (not (= (* ?x536 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)))))
 (let (($x374 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x374 $x546))))))))))))))))))) :qid k!28))
 ))
 (let ((?x350 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x264 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x536 (+ (* (/ 1.0 2.0) (* ?x46 ?x62 ?x62 ?x43)) ?x264 (* (- 1.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x43 ?x43 ?x43)))))
 (let ((?x442 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x197)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x425 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x446 (+ ?x46 ?x43)))
 (let ((?x495 (+ (* 2.0 (* ?x43 ?x446 ?x425 ?x425)) ?x264 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x446 ?x446 ?x446 ?x425 ?x425 ?x425)))))
 (let (($x546 (or (not (= (* ?x495 ?x442) 0.0)) (not (= (* ?x536 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)))))
 (let (($x420 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x473 (and $x420 $x546)))
 (let (($x374 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x450 (and $x374 $x546)))
 (rewrite (= $x450 $x473))))))))))))))))))))))))
 ))
 (let (($x76 (exists ((x Int) (y Int) (z Int) )(! (let ((?x59 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x62 (to_real y)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x54 (to_real (* 2 x 2 x 2 x))))
 (let ((?x70 (- (+ (* ?x41 ?x43 ?x63 ?x63 ?x46) ?x54) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x63 ?x63 ?x63 ?x46 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (- (+ (* ?x41 ?x43 ?x42 ?x42 ?x51) ?x54) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x51 ?x51 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x61 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x57) ?x59))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x61 (not (= (* ?x66 ?x70) ?x59)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x435 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x197 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x110 (to_real y00)))
 (let ((?x106 (to_real x00)))
 (let ((?x111 (* ?x106 ?x110)))
 (let ((?x117 (* (- 1.0) ?x111)))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x264 (* 8.0 (* ?x43 ?x43 ?x43))))
 (let ((?x536 (+ (* (/ 1.0 2.0) (* ?x46 ?x62 ?x62 ?x43)) ?x264 (* (- 1.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x43 ?x43 ?x43)))))
 (let ((?x442 (+ ?x117 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x197)))
 (let ((?x162 (* (/ 1.0 2.0) ?x62)))
 (let ((?x425 (+ (- (/ 1.0 2.0)) ?x162)))
 (let ((?x446 (+ ?x46 ?x43)))
 (let ((?x495 (+ (* 2.0 (* ?x43 ?x446 ?x425 ?x425)) ?x264 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x446 ?x446 ?x446 ?x425 ?x425 ?x425)))))
 (let (($x546 (or (not (= (* ?x495 ?x442) 0.0)) (not (= (* ?x536 (+ ?x117 (* ?x62 ?x43) ?x46 ?x197)) 0.0)))))
 (let (($x374 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x450 (and $x374 $x546)))
 (let ((?x59 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x54 (to_real (* 2 x 2 x 2 x))))
 (let ((?x70 (- (+ (* ?x41 ?x43 ?x63 ?x63 ?x46) ?x54) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x63 ?x63 ?x63 ?x46 ?x46 ?x46))))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (- (+ (* ?x41 ?x43 ?x42 ?x42 ?x51) ?x54) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x51 ?x51 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x61 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x57) ?x59))))
 (let (($x75 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x61 (not (= (* ?x66 ?x70) ?x59))))))
 (rewrite (= $x75 $x450)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x77 (asserted $x76)))
 (let ((@x476 (mp (mp @x77 (quant-intro (proof-bind ?x435) (= $x76 $x441)) $x441) (rewrite (= $x441 $x441)) $x441)))
 (let ((@x512 (mp (mp @x476 (quant-intro (proof-bind ?x350) (= $x441 $x382)) $x382) (quant-intro (proof-bind ?x379) (= $x382 $x368)) $x368)))
 (let ((@x323 (mp (mp~ @x512 (sk (~ $x368 $x367)) $x367) (rewrite (= $x367 $x328)) $x328)))
 (let ((@x596 (mp (and-elim @x323 $x97) @x433 $x389)))
 (let ((@x601 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x389) $x289)) @x596 $x289)))
 (let (($x390 (<= ?x114 0)))
 (let ((@x631 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x389) $x390)) @x596 $x390)))
 (let ((@x645 (unit-resolution ((_ th-lemma arith) (or $x557 (not $x289) (not $x390))) @x631 @x601 (hypothesis (not $x557)) false)))
 (let (($x391 (= 0.0 ?x623)))
 (let (($x683 (not $x391)))
 (let ((@x337 (monotonicity (symm (commutativity (= $x391 $x400)) (= $x400 $x391)) (= $x319 $x683))))
 (let ((?x326 (+ ?x605 ?x117 ?x95 ?x197)))
 (let (($x652 (= 0.0 ?x326)))
 (let (($x98 (>= ?x326 0.0)))
 (let ((?x318 (to_real ?x84)))
 (let ((?x618 (+ ?x117 ?x318)))
 (let (($x636 (>= ?x618 0.0)))
 (let (($x637 (= 0.0 ?x618)))
 (let ((@x641 (symm (commutativity (= $x637 (= ?x618 0.0))) (= (= ?x618 0.0) $x637))))
 (let ((@x305 (unit-resolution (hypothesis (not $x637)) (mp ((_ th-lemma arith) (= ?x618 0.0)) @x641 $x637) false)))
 (let ((@x498 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x637) $x636)) (lemma @x305 $x637) $x636)))
 (let ((?x354 (+ ?x605 (* (- 1.0) (to_real (* y!1 x!2))))))
 (let (($x493 (>= ?x354 0.0)))
 (let (($x609 (= 0.0 ?x354)))
 (let ((@x403 (symm (commutativity (= $x609 (= ?x354 0.0))) (= (= ?x354 0.0) $x609))))
 (let ((@x511 (mp ((_ th-lemma arith) (= ?x354 0.0)) @x403 $x609)))
 (let ((@x629 ((_ th-lemma arith) @x631 (hypothesis (not $x98)) (hypothesis $x636) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x609) $x493)) @x511 $x493) false)))
 (let (($x87 (<= ?x326 0.0)))
 (let (($x600 (<= ?x354 0.0)))
 (let ((?x612 (+ ?x111 (* (- 1.0) ?x318))))
 (let (($x765 (>= ?x612 0.0)))
 (let (($x484 (= 0.0 ?x612)))
 (let ((@x566 (symm (commutativity (= $x484 (= ?x612 0.0))) (= (= ?x612 0.0) $x484))))
 (let ((@x317 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x484) $x765)) (mp ((_ th-lemma arith) (= ?x612 0.0)) @x566 $x484) $x765)))
 (let ((@x590 ((_ th-lemma arith) @x601 (hypothesis (not $x87)) @x317 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x609) $x600)) @x511 $x600) false)))
 (let ((@x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x652 (not $x87) (not $x98))) (lemma @x590 $x87) (unit-resolution (lemma @x629 (or (not $x636) $x98)) @x498 $x98) $x652)))
 (let (($x650 (= ?x326 0.0)))
 (let (($x661 (not $x650)))
 (let ((@x660 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x661 $x438)) (hypothesis $x324) $x661) (symm (hypothesis $x652) $x650) false)))
 (let ((@x488 (unit-resolution (and-elim @x323 $x611) (unit-resolution (lemma @x660 (or (not $x652) $x438)) @x330 $x438) $x319)))
 (let ((@x691 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x391 $x679 (not $x557))) (mp @x488 @x337 $x683) (lemma @x645 $x557) $x679)))
 (unit-resolution ((_ th-lemma arith) (or $x392 (not $x289) (not $x390))) @x631 @x601 @x691 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      33
 :arith-eq-adapter               26
 :arith-bound-propagations-cheap 17
 :arith-bound-propagations-lp    2
 :arith-conflicts                21
 :arith-diseq                    27
 :arith-gcd-calls                3
 :arith-grobner-calls            3
 :arith-grobner-conflicts        2
 :arith-horner-calls             3
 :arith-lower                    23
 :arith-make-feasible            27
 :arith-max-columns              73
 :arith-max-rows                 15
 :arith-nla-explanations         58
 :arith-nla-lemmas               19
 :arith-patches                  3
 :arith-patches-success          3
 :arith-propagations             17
 :arith-upper                    29
 :conflicts                      7
 :decisions                      34
 :del-clause                     80
 :final-checks                   21
 :max-memory                     4.24
 :memory                         3.22
 :mk-bool-var                    100
 :mk-clause                      111
 :num-allocs                     6012995
 :num-checks                     1
 :propagations                   52
 :rlimit-count                   5454
 :time                           0.02
 :total-time                     0.03)
