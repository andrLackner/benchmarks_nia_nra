unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x176 (* (- 1) x!1)))
 (let ((?x125 (* (- 1) y!0)))
 (let ((?x119 (+ y00 x00 ?x125 ?x176)))
 (let (($x278 (<= ?x119 0)))
 (let (($x120 (= ?x119 0)))
 (let ((?x273 (* y00 y!0 y!0)))
 (let ((?x257 (* x00 y!0 y!0)))
 (let ((?x182 (* y!0 y!0)))
 (let ((?x196 (* (- 2) ?x182)))
 (let ((?x179 (* y!0 y!0 y!0)))
 (let ((?x168 (* (- 1) ?x179)))
 (let ((?x136 (* (- 1) (* y!0 y!0 x!1))))
 (let ((?x129 (+ y00 x00 (* 2 (* y00 y!0)) ?x125 ?x136 ?x176 (* (- 2) (* y!0 x!1)) ?x168 ?x196 (* 2 (* x00 y!0)) ?x257 ?x273)))
 (let (($x175 (= ?x129 0)))
 (let ((?x234 (* 2 ?x182)))
 (let ((?x141 (+ y00 x00 (* (- 2) (* y00 y!0)) ?x125 ?x136 ?x176 (* 2 (* y!0 x!1)) ?x168 ?x234 (* (- 2) (* x00 y!0)) ?x257 ?x273)))
 (let (($x247 (= ?x141 0)))
 (let (($x111 (not $x247)))
 (let (($x268 (or $x111 (not $x175))))
 (let (($x265 (and $x120 $x268)))
 (let ((?x185 (* (- 1) (* y!0 y!0 x00))))
 (let ((?x159 (* (- 1) (* y!0 y!0 y00))))
 (let ((?x177 (* x!1 y!0 y!0)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x259 (+ x!1 y!0 ?x55 ?x62 ?x177 ?x179 (* (- 2) (* x!1 y!0)) ?x196 (* 2 (* y!0 y00)) (* 2 (* y!0 x00)) ?x159 ?x185)))
 (let ((?x164 (+ x!1 y!0 ?x55 ?x62 ?x177 ?x179 (* 2 (* x!1 y!0)) ?x234 (* (- 2) (* y!0 y00)) (* (- 2) (* y!0 x00)) ?x159 ?x185)))
 (let (($x207 (and (= (+ x!1 y!0 ?x55 ?x62) 0) (or (not (= ?x164 0)) (not (= ?x259 0))))))
 (let (($x60 (exists ((x Int) (y Int) )(! (let ((?x193 (* (- 1) (* y y x00))))
 (let ((?x189 (* (- 1) (* y y y00))))
 (let ((?x153 (* y y)))
 (let ((?x289 (* (- 2) ?x153)))
 (let ((?x150 (* x y)))
 (let ((?x288 (* (- 2) ?x150)))
 (let ((?x134 (* y y y)))
 (let ((?x133 (* x y y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x292 (+ x y ?x55 ?x62 ?x133 ?x134 ?x288 ?x289 (* 2 (* y y00)) (* 2 (* y x00)) ?x189 ?x193)))
 (let ((?x205 (+ x y ?x55 ?x62 ?x133 ?x134 (* 2 ?x150) (* 2 ?x153) (* (- 2) (* y y00)) (* (- 2) (* y x00)) ?x189 ?x193)))
 (let (($x59 (not (= ?x205 0))))
 (let (($x81 (= (+ x y ?x55 ?x62) 0)))
 (and $x81 (or $x59 (not (= ?x292 0)))))))))))))))))) :qid k!27))
 ))
 (let (($x241 (exists ((x Int) (y Int) )(! (let ((?x193 (* (- 1) (* y y x00))))
 (let ((?x189 (* (- 1) (* y y y00))))
 (let ((?x170 (* y x00)))
 (let ((?x160 (* y y00)))
 (let ((?x153 (* y y)))
 (let ((?x289 (* (- 2) ?x153)))
 (let ((?x150 (* x y)))
 (let ((?x288 (* (- 2) ?x150)))
 (let ((?x134 (* y y y)))
 (let ((?x133 (* x y y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x154 (+ x y ?x55 ?x62 ?x133 ?x134 ?x288 ?x289 ?x160 ?x170 ?x189 ?x193 (* (- 1) (* y ?x55)) (* (- 1) (* y ?x62)))))
 (let ((?x205 (+ x y ?x55 ?x62 ?x133 ?x134 (* 2 ?x150) (* 2 ?x153) (* (- 2) ?x160) (* (- 2) ?x170) ?x189 ?x193)))
 (let (($x59 (not (= ?x205 0))))
 (let (($x81 (= (+ x y ?x55 ?x62) 0)))
 (and $x81 (or $x59 (not (= ?x154 0)))))))))))))))))))) :qid k!27))
 ))
 (let ((?x149 (lambda ((x Int) (y Int) )(let ((?x193 (* (- 1) (* y y x00))))
 (let ((?x189 (* (- 1) (* y y y00))))
 (let ((?x153 (* y y)))
 (let ((?x289 (* (- 2) ?x153)))
 (let ((?x150 (* x y)))
 (let ((?x288 (* (- 2) ?x150)))
 (let ((?x134 (* y y y)))
 (let ((?x133 (* x y y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x292 (+ x y ?x55 ?x62 ?x133 ?x134 ?x288 ?x289 (* 2 (* y y00)) (* 2 (* y x00)) ?x189 ?x193)))
 (let ((?x205 (+ x y ?x55 ?x62 ?x133 ?x134 (* 2 ?x150) (* 2 ?x153) (* (- 2) (* y y00)) (* (- 2) (* y x00)) ?x189 ?x193)))
 (let (($x59 (not (= ?x205 0))))
 (let (($x81 (= (+ x y ?x55 ?x62) 0)))
 (let (($x89 (and $x81 (or $x59 (not (= ?x292 0))))))
 (let ((?x170 (* y x00)))
 (let ((?x160 (* y y00)))
 (let ((?x154 (+ x y ?x55 ?x62 ?x133 ?x134 ?x288 ?x289 ?x160 ?x170 ?x189 ?x193 (* (- 1) (* y ?x55)) (* (- 1) (* y ?x62)))))
 (let (($x210 (and $x81 (or $x59 (not (= ?x154 0))))))
 (rewrite (= $x210 $x89))))))))))))))))))))))
 ))
 (let (($x249 (exists ((x Int) (y Int) )(! (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x236 (+ x ?x55 ?x62 y)))
 (let ((?x285 (+ 1 y)))
 (let (($x266 (or (not (= (* (+ (- 1) y) (+ (- 1) y) ?x236) 0)) (not (= (* ?x285 ?x285 ?x236) 0)))))
 (and (= ?x236 0) $x266)))))) :qid k!27))
 ))
 (let ((?x90 (lambda ((x Int) (y Int) )(let ((?x193 (* (- 1) (* y y x00))))
 (let ((?x189 (* (- 1) (* y y y00))))
 (let ((?x170 (* y x00)))
 (let ((?x160 (* y y00)))
 (let ((?x153 (* y y)))
 (let ((?x289 (* (- 2) ?x153)))
 (let ((?x150 (* x y)))
 (let ((?x288 (* (- 2) ?x150)))
 (let ((?x134 (* y y y)))
 (let ((?x133 (* x y y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x154 (+ x y ?x55 ?x62 ?x133 ?x134 ?x288 ?x289 ?x160 ?x170 ?x189 ?x193 (* (- 1) (* y ?x55)) (* (- 1) (* y ?x62)))))
 (let ((?x205 (+ x y ?x55 ?x62 ?x133 ?x134 (* 2 ?x150) (* 2 ?x153) (* (- 2) ?x160) (* (- 2) ?x170) ?x189 ?x193)))
 (let (($x59 (not (= ?x205 0))))
 (let (($x81 (= (+ x y ?x55 ?x62) 0)))
 (let (($x210 (and $x81 (or $x59 (not (= ?x154 0))))))
 (let (($x143 (= (* (+ 1 y) (+ 1 y) (+ x ?x55 ?x62 y)) 0)))
 (let (($x128 (= (* (+ (- 1) y) (+ (- 1) y) (+ x ?x55 ?x62 y)) 0)))
 (let (($x276 (and (= (+ x ?x55 ?x62 y) 0) (or (not $x128) (not $x143)))))
 (rewrite (= $x276 $x210)))))))))))))))))))))))
 ))
 (let (($x52 (exists ((x Int) (y Int) )(! (let ((?x45 (- y 1)))
 (let (($x48 (= (* (+ (- (- (+ x 1) y00) x00) ?x45) ?x45 ?x45) 0)))
 (let ((?x38 (+ y 1)))
 (let (($x40 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x38 ?x38) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x40) (not $x48))))))) :qid k!27))
 ))
 (let ((?x261 (lambda ((x Int) (y Int) )(let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x236 (+ x ?x55 ?x62 y)))
 (let ((?x285 (+ 1 y)))
 (let (($x266 (or (not (= (* (+ (- 1) y) (+ (- 1) y) ?x236) 0)) (not (= (* ?x285 ?x285 ?x236) 0)))))
 (let (($x276 (and (= ?x236 0) $x266)))
 (let ((?x45 (- y 1)))
 (let (($x48 (= (* (+ (- (- (+ x 1) y00) x00) ?x45) ?x45 ?x45) 0)))
 (let ((?x38 (+ y 1)))
 (let (($x40 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x38 ?x38) 0)))
 (let (($x51 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x40) (not $x48)))))
 (rewrite (= $x51 $x276))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (let ((@x274 (mp (mp @x53 (quant-intro (proof-bind ?x261) (= $x52 $x249)) $x249) (rewrite (= $x249 $x249)) $x249)))
 (let ((@x254 (mp (mp @x274 (quant-intro (proof-bind ?x90) (= $x249 $x241)) $x241) (quant-intro (proof-bind ?x149) (= $x241 $x60)) $x60)))
 (let ((@x94 (mp (mp~ @x254 (sk (~ $x60 $x207)) $x207) (rewrite (= $x207 $x265)) $x265)))
 (let ((@x213 (and-elim @x94 $x120)))
 (let ((@x138 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x278)) @x213 $x278)))
 (let (($x260 (>= ?x119 0)))
 (let ((@x139 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x260)) @x213 $x260)))
 (let (($x281 (<= ?x129 0)))
 (let ((@x242 (lemma ((_ th-lemma arith) (hypothesis (not $x281)) @x139 @x138 @x139 @x138 false) $x281)))
 (let (($x256 (>= ?x129 0)))
 (let ((@x152 (lemma ((_ th-lemma arith) (hypothesis (not $x256)) @x139 @x138 @x139 @x138 false) $x256)))
 (let (($x104 (not (<= ?x141 0))))
 (let ((@x113 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x175 (not $x281) (not $x256))) @x242 @x152 $x175)))
 (let (($x240 (>= ?x141 0)))
 (let ((@x217 (lemma ((_ th-lemma arith) (hypothesis (not $x240)) @x152 @x242 @x139 @x138 false) $x240)))
 (let ((@x68 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x247 $x104 (not $x240))) @x217 (unit-resolution (and-elim @x94 $x268) @x113 $x111) $x104)))
 ((_ th-lemma arith) @x68 @x152 @x242 @x139 @x138 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        4
 :arith-assert-lower        9
 :arith-assert-upper        8
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           10
 :arith-grobner             4
 :arith-max-min             188
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             6
 :arith-patches_succ        6
 :arith-pivots              4
 :arith-row-summations      3
 :arith-tableau-max-columns 19
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 5
 :del-clause                3
 :final-checks              8
 :max-memory                3.55
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1092737
 :num-checks                1
 :propagations              13
 :rlimit-count              2428
 :time                      0.01
 :total-time                0.01)
