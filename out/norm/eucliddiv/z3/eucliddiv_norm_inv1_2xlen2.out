unsat
((set-logic NIA)
(proof
(let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x48 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x48)))
 (let ((?x51 (- ?x49 ?x50)))
 (let ((?x52 (- ?x51 ?x47)))
 (let ((?x53 (+ ?x52 ?x45 ?x50)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x56))))))))))))))))))) :qid k!29))
 ))
 (let (($x181 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x184 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x48 (* ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x48)))
 (let ((?x51 (- ?x49 ?x50)))
 (let ((?x52 (- ?x51 ?x47)))
 (let ((?x53 (+ ?x52 ?x45 ?x50)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x57 (and $x33 $x41 $x56)))
 (let (($x348 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x182 (= (+ (* (- 1) y00) y) 0)))
 (let (($x170 (and $x182 $x348 false)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x71 (+ r ?x63)))
 (let ((?x65 (+ 1 q)))
 (let ((?x111 (* y00 ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x326 (* y00 y00 y00 y00 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x119 (* (- 1) ?x111)))
 (let ((?x379 (* (- 1) ?x326)))
 (let ((?x139 (+ ?x379 ?x119)))
 (let ((?x144 (+ ?x139 ?x326 ?x111)))
 (let ((@x113 (rewrite (= (* ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 y00) ?x111))))
 (let ((@x293 (rewrite (= ?x43 ?x71))))
 (let ((@x433 (rewrite (= ?x42 ?x65))))
 (let ((@x110 (monotonicity @x433 @x433 @x433 @x433 @x433 @x293 @x293 @x293 @x293 (= ?x50 (* ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 y00)))))
 (let ((@x115 (trans @x110 @x113 (= ?x50 ?x111))))
 (let ((?x552 (* ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 y00 y00 y00 y00)))
 (let ((@x72 (trans (monotonicity @x433 @x433 @x433 @x293 @x293 @x293 @x293 (= ?x45 ?x552)) (rewrite (= ?x552 ?x326)) (= ?x45 ?x326))))
 (let ((?x82 (* y00 y00 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71)))
 (let ((?x125 (+ ?x379 ?x82 ?x119)))
 (let ((?x134 (+ ?x125 (* (- 1) ?x82))))
 (let ((@x372 (monotonicity @x433 @x433 @x433 @x293 @x293 @x293 (= ?x47 (* ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 y00 y00)))))
 (let ((@x89 (trans @x372 (rewrite (= (* ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 y00 y00) ?x82)) (= ?x47 ?x82))))
 (let ((?x103 (+ ?x379 ?x82)))
 (let ((?x259 (* y00 y00 y00 ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x262 (* (- 1) ?x259)))
 (let ((?x380 (+ ?x262 ?x379)))
 (let ((?x99 (+ ?x380 ?x82 ?x259)))
 (let ((?x453 (* ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 ?x71 y00 y00 y00)))
 (let ((@x91 (monotonicity @x433 @x433 @x433 @x433 @x433 @x293 @x293 @x293 @x293 @x293 (= ?x48 ?x453))))
 (let ((?x296 (* (- 1) ?x65 ?x65 ?x65 ?x65 ?x65 ?x71 ?x71 ?x71 ?x71 ?x71 y00 y00 y00)))
 (let ((@x81 (monotonicity (rewrite (= ?x28 (- 1))) @x433 @x433 @x433 @x433 @x433 @x293 @x293 @x293 @x293 @x293 (= ?x44 ?x296))))
 (let ((@x382 (monotonicity (trans @x81 (rewrite (= ?x296 ?x262)) (= ?x44 ?x262)) @x72 (= ?x46 (- ?x262 ?x326)))))
 (let ((@x102 (monotonicity (trans @x382 (rewrite (= (- ?x262 ?x326) ?x380)) (= ?x46 ?x380)) @x89 (trans @x91 (rewrite (= ?x453 ?x259)) (= ?x48 ?x259)) (= ?x49 ?x99))))
 (let ((@x118 (monotonicity (trans @x102 (rewrite (= ?x99 ?x103)) (= ?x49 ?x103)) @x115 (= ?x51 (- ?x103 ?x111)))))
 (let ((@x124 (trans @x118 (rewrite (= (- ?x103 ?x111) (+ ?x103 ?x119))) (= ?x51 (+ ?x103 ?x119)))))
 (let ((@x132 (monotonicity (trans @x124 (rewrite (= (+ ?x103 ?x119) ?x125)) (= ?x51 ?x125)) @x89 (= ?x52 (- ?x125 ?x82)))))
 (let ((@x143 (trans (trans @x132 (rewrite (= (- ?x125 ?x82) ?x134)) (= ?x52 ?x134)) (rewrite (= ?x134 ?x139)) (= ?x52 ?x139))))
 (let ((@x149 (trans (monotonicity @x143 @x72 @x115 (= ?x53 ?x144)) (rewrite (= ?x144 0)) $x54)))
 (let ((@x156 (trans (monotonicity @x149 (= $x54 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x54 true))))
 (let ((@x163 (trans (monotonicity @x156 (= $x55 (not true))) (rewrite (= (not true) false)) (= $x55 false))))
 (let ((@x167 (trans (monotonicity @x163 (= $x56 (or false))) (rewrite (= (or false) false)) (= $x56 false))))
 (let ((@x173 (monotonicity (rewrite (= $x33 $x182)) (rewrite (= $x41 $x348)) @x167 (= $x57 $x170))))
 (trans @x173 (rewrite (= $x170 false)) (= $x57 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x192 (trans (quant-intro (proof-bind ?x184) (= $x58 $x181)) (elim-unused (= $x181 false)) (= $x58 false))))
 (let ((@x59 (asserted $x58)))
 (mp @x59 @x192 false))))))))

(:max-memory   3.44
 :memory       3.13
 :mk-bool-var  5
 :num-allocs   945741
 :rlimit-count 457
 :time         0.01
 :total-time   0.01)
