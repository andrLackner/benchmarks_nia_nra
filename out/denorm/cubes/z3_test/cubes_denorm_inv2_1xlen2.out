unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x323 (* 9 n!0)))
 (let ((?x254 (* c!3 n!0)))
 (let ((?x310 (* (- 9) ?x254)))
 (let ((?x174 (* k!2 k!2)))
 (let ((?x205 (+ ?x174 ?x310 (* (- 18) c!3) (* (- 5) k!2) ?x323)))
 (let (($x232 (<= ?x205 (- 4))))
 (let (($x281 (= ?x205 (- 4))))
 (let ((?x332 (* (- 5) m!1)))
 (let ((?x364 (* (- 32) k!2)))
 (let ((?x420 (* (- 27) c!3)))
 (let ((?x234 (* 2 (* k!2 m!1))))
 (let ((?x238 (* k!2 n!0)))
 (let ((?x308 (* (- 9) ?x238)))
 (let ((?x235 (* m!1 m!1)))
 (let ((?x114 (+ 13 ?x174 ?x235 ?x308 ?x310 ?x234 ?x420 ?x364 ?x332 ?x323)))
 (let ((?x182 (+ k!2 m!1)))
 (let ((?x428 (+ 1 n!0)))
 (let ((?x421 (+ 6 m!1 (* (- 1) (* ?x428 ?x428 ?x428 (+ 6 m!1) ?x182 ?x182 ?x182)))))
 (let ((?x111 (* ?x421 ?x114)))
 (let (($x113 (= ?x111 0)))
 (let (($x110 (not $x113)))
 (let ((?x446 (* (- 1) k!2)))
 (let ((?x273 (+ (* 3 (* n!0 n!0)) ?x446 (* 3 n!0))))
 (let (($x270 (= ?x273 (- 1))))
 (let ((?x342 (+ ?x238 (* (- 3) c!3) ?x446 (* 2 n!0))))
 (let (($x361 (= ?x342 (- 1))))
 (let ((?x193 (+ m!1 (* (- 6) n!0))))
 (let (($x194 (= ?x193 6)))
 (let (($x112 (and $x194 $x281 $x361 $x270 $x110)))
 (let (($x126 (= (* ?x421 (+ 13 ?x420 ?x364 ?x332 ?x323 ?x174 ?x308 ?x310 ?x234 ?x235)) 0)))
 (let ((?x172 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x174) (* 9 ?x254))))
 (let (($x103 (and $x194 (= ?x172 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x238)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x126))))
 (let (($x230 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x424 (* (- 5) m)))
 (let ((?x479 (+ 13 (* (- 27) c) (* (- 32) k) ?x424 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x72 (+ k m)))
 (let ((?x486 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x339 ?x339 ?x339 ?x486 ?x72 ?x72 ?x72))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x210 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x206 (= ?x210 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 $x206 $x258 $x296 (not (= (* (+ 6 m ?x418) ?x479) 0)))))))))))))))))) :qid k!34))
 ))
 (let (($x220 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x424 (* (- 5) m)))
 (let ((?x348 (* (- 18) c)))
 (let ((?x366 (+ 13 ?x348 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x424 ?x48 ?x78)))
 (let ((?x486 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x339 ?x339 ?x339 ?x486 ?x72 ?x72 ?x72))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x335 (= (+ ?x348 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 $x335 $x186 $x294 (not (= (* (+ 6 ?x418 m) ?x366) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x215 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x424 (* (- 5) m)))
 (let ((?x479 (+ 13 (* (- 27) c) (* (- 32) k) ?x424 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x72 (+ k m)))
 (let ((?x486 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x339 ?x339 ?x339 ?x486 ?x72 ?x72 ?x72))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x210 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x206 (= ?x210 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x246 (and $x122 $x206 $x258 $x296 (not (= (* (+ 6 m ?x418) ?x479) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x348 (* (- 18) c)))
 (let ((?x366 (+ 13 ?x348 (* (- 23) k) (* (- 9) (* ?x339 (+ c k))) ?x424 ?x48 ?x78)))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x335 (= (+ ?x348 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x233 (and $x122 $x335 $x186 $x294 (not (= (* (+ 6 ?x418 m) ?x366) 0)))))
 (rewrite (= $x233 $x246))))))))))))))))))))))))))
 ))
 (let (($x89 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x72 (+ k m)))
 (let ((?x83 (+ (* (- 1) ?x72 ?x72 ?x72 (+ m 6) ?x70 ?x70 ?x70) m 6)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x75 (- (- (* 4 1) (* 18 (+ c k))) (* 9 (+ c k) ?x70))))
 (let (($x86 (not (= (* (+ (- ?x75 (* 5 ?x72)) (* 9 ?x70) ?x78) ?x83) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x86))))))))))))))) :qid k!34))
 ))
 (let ((?x224 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x424 (* (- 5) m)))
 (let ((?x348 (* (- 18) c)))
 (let ((?x366 (+ 13 ?x348 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x424 ?x48 ?x78)))
 (let ((?x486 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x339 ?x339 ?x339 ?x486 ?x72 ?x72 ?x72))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x335 (= (+ ?x348 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x233 (and $x122 $x335 $x186 $x294 (not (= (* (+ 6 ?x418 m) ?x366) 0)))))
 (let ((?x70 (+ n 1)))
 (let ((?x83 (+ (* (- 1) ?x72 ?x72 ?x72 (+ m 6) ?x70 ?x70 ?x70) m 6)))
 (let ((?x75 (- (- (* 4 1) (* 18 (+ c k))) (* 9 (+ c k) ?x70))))
 (let (($x86 (not (= (* (+ (- ?x75 (* 5 ?x72)) (* 9 ?x70) ?x78) ?x83) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x88 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x86))))
 (rewrite (= $x88 $x233))))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x459 (mp (mp @x90 (quant-intro (proof-bind ?x224) (= $x89 $x220)) $x220) (rewrite (= $x220 $x220)) $x220)))
 (let ((@x207 (mp~ (mp @x459 (quant-intro (proof-bind ?x215) (= $x220 $x230)) $x230) (sk (~ $x230 $x103)) $x103)))
 (let ((@x469 (mp @x207 (rewrite (= $x103 $x112)) $x112)))
 (let ((@x391 (and-elim @x469 $x281)))
 (let ((@x302 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x281) $x232)) @x391 $x232)))
 (let (($x231 (>= ?x205 (- 4))))
 (let ((@x108 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x281) $x231)) @x391 $x231)))
 (let (($x438 (<= ?x193 6)))
 (let ((@x153 (and-elim @x469 $x194)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x194) $x438)) @x153 $x438)))
 (let (($x437 (>= ?x193 6)))
 (let ((@x168 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x194) $x437)) @x153 $x437)))
 (let (($x145 (<= ?x342 (- 1))))
 (let ((@x390 (and-elim @x469 $x361)))
 (let ((@x98 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x361) $x145)) @x390 $x145)))
 (let (($x653 (>= ?x342 (- 1))))
 (let ((@x136 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x361) $x653)) @x390 $x653)))
 (let (($x133 (<= ?x273 (- 1))))
 (let ((@x389 (and-elim @x469 $x270)))
 (let ((@x226 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x270) $x133)) @x389 $x133)))
 (let (($x192 (>= ?x273 (- 1))))
 (let ((@x471 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x270) $x192)) @x389 $x192)))
 (let (($x109 (>= ?x114 0)))
 (let ((@x163 ((_ th-lemma arith) (hypothesis (not $x109)) @x471 @x226 @x168 @x301 @x471 @x226 @x136 @x98 @x168 @x301 @x108 @x302 false)))
 (let ((@x359 (lemma @x163 $x109)))
 (let (($x758 (not (>= ?x111 0))))
 (let (($x491 (<= ?x111 0)))
 (let (($x671 (<= ?x421 0)))
 (let (($x492 (not $x671)))
 (let (($x475 (not $x491)))
 (let ((@x476 (hypothesis $x475)))
 (let (($x521 (>= ?x421 0)))
 (let ((@x494 (lemma ((_ th-lemma arith farkas 1 1 1) @x476 (hypothesis (not $x521)) @x359 false) (or $x521 $x491))))
 (let ((@x661 ((_ th-lemma arith farkas 1 1 1) @x476 (unit-resolution @x494 @x476 $x521) (hypothesis $x671) false)))
 (let ((@x765 ((_ th-lemma arith) @x476 (unit-resolution (lemma @x661 (or $x492 $x491)) @x476 $x492) @x168 @x301 @x168 @x301 @x168 @x301 @x471 @x226 @x168 @x301 @x136 @x98 @x471 @x226 @x168 @x301 @x471 @x226 @x136 @x98 @x108 @x302 false)))
 (let ((@x763 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x113 $x475 $x758)) (and-elim @x469 $x110) (or $x475 $x758))))
 (let ((@x806 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x763 (lemma @x765 $x491) $x758) @x359 (hypothesis (<= ?x114 0)) false)))
 ((_ th-lemma arith) (lemma @x806 (not (<= ?x114 0))) @x471 @x226 @x471 @x226 @x471 @x226 @x471 @x226 @x168 @x301 @x136 @x98 @x136 @x98 @x136 @x98 @x136 @x98 @x108 @x302 @x108 @x302 @x168 @x301 @x108 @x302 @x168 @x301 @x168 @x301 @x108 @x302 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 39
 :arith-assert-diseq        11
 :arith-assert-lower        157
 :arith-assert-upper        162
 :arith-bound-prop          5
 :arith-branch-var          15
 :arith-conflicts           21
 :arith-eq-adapter          14
 :arith-fixed-eqs           39
 :arith-gcd-tests           151
 :arith-gomory-cuts         8
 :arith-grobner             22
 :arith-ineq-splits         15
 :arith-max-min             1395
 :arith-nonlinear-bounds    42
 :arith-nonlinear-horner    213
 :arith-num-rows            14
 :arith-offset-eqs          3
 :arith-patches             37
 :arith-patches_succ        7
 :arith-pivots              334
 :arith-pseudo-nonlinear    30
 :arith-row-summations      2026
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    14
 :conflicts                 23
 :decisions                 84
 :del-clause                58
 :final-checks              81
 :max-memory                19.76
 :memory                    19.18
 :minimized-lits            2
 :mk-bool-var               125
 :mk-clause                 87
 :num-allocs                1582718
 :num-checks                1
 :propagations              74
 :rlimit-count              197291
 :time                      0.06
 :total-time                0.08)
