unsat
((set-logic NIA)
(proof
(let (($x54 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x47 (* ?x43 ?x43 y00 y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x46 (* ?x45 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00 y00 y00)))
 (let ((?x48 (+ ?x44 ?x46 ?x47)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x52)))))))))))))))) :qid k!29))
 ))
 (let (($x203 (= $x54 false)))
 (let (($x196 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x202 (elim-unused (= $x196 false))))
 (let (($x199 (= $x54 $x196)))
 (let ((?x255 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x47 (* ?x43 ?x43 y00 y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x46 (* ?x45 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00 y00 y00)))
 (let ((?x48 (+ ?x44 ?x46 ?x47)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x53 (and $x33 $x41 $x52)))
 (let (($x194 (= $x53 false)))
 (let (($x233 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x83 (= (+ (* (- 1) y00) y) 0)))
 (let (($x249 (and $x83 $x233 false)))
 (let (($x187 (= $x52 false)))
 (let ((@x186 (rewrite (= (or false) false))))
 (let (($x182 (or false)))
 (let (($x183 (= $x52 $x182)))
 (let (($x180 (= $x51 false)))
 (let ((@x179 (rewrite (= (not true) false))))
 (let (($x175 (not true)))
 (let (($x176 (= $x51 $x175)))
 (let (($x173 (= $x50 true)))
 (let ((@x172 (rewrite (= (= 0 0) true))))
 (let (($x168 (= 0 0)))
 (let (($x169 (= $x50 $x168)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x78 (+ r ?x59)))
 (let ((?x231 (+ (* (- 1) (* y00 y00 y00 ?x78 ?x78)) (* y00 (+ 1 q)) (* y00 y00 ?x78 ?x78))))
 (let ((?x235 (* 0 ?x231)))
 (let ((@x75 (trans (monotonicity (rewrite (= ?x30 ?x59)) (= ?x42 (+ ?x59 y00))) (rewrite (= (+ ?x59 y00) 0)) (= ?x42 0))))
 (let ((@x242 (trans (monotonicity @x75 (rewrite (= ?x48 ?x231)) (= ?x49 ?x235)) (rewrite (= ?x235 0)) $x50)))
 (let ((@x246 (trans (monotonicity (trans (monotonicity @x242 $x169) @x172 $x173) $x176) @x179 $x180)))
 (let ((@x251 (monotonicity (rewrite (= $x33 $x83)) (rewrite (= $x41 $x233)) (trans (monotonicity @x246 $x183) @x186 $x187) (= $x53 $x249))))
 (trans @x251 (rewrite (= $x249 false)) $x194))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (mp @x55 (trans (quant-intro (proof-bind ?x255) $x199) @x202 $x203) false))))))))))

(:max-memory   3.33
 :memory       3.03
 :mk-bool-var  5
 :num-allocs   873021
 :rlimit-count 149
 :time         0.01
 :total-time   0.01)
