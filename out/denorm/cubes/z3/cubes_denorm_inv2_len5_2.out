unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x385 (* 36 (* c!3 c!3 c!3))))
 (let ((?x670 (+ k!2 c!3)))
 (let ((?x680 (+ k!2 m!1)))
 (let ((?x136 (+ 6 m!1)))
 (let ((?x397 (* 36 (* k!2 k!2 k!2))))
 (let ((?x337 (* 12 (* k!2 k!2 k!2 m!1))))
 (let ((?x192 (* k!2 k!2 k!2 m!1 m!1)))
 (let ((?x115 (+ 1 n!0)))
 (let ((?x553 (+ (* ?x115 ?x115 ?x115 ?x136 ?x136 ?x136 ?x680 ?x680 ?x680 ?x670 ?x670 ?x670) ?x192 (* 3 (* k!2 k!2 m!1 m!1 c!3)) ?x337 (* (- 1) (* ?x136 ?x136 ?x136 ?x680 ?x670 ?x670 ?x670)) (* (- 1) (* ?x115 ?x136 ?x136 ?x680 ?x670 ?x670)) (* 108 (* k!2 c!3 c!3)) (* 108 (* k!2 k!2 c!3)) ?x397 (* (- 1) (* ?x136 ?x136 ?x680 ?x680 ?x670 ?x670 ?x670)) (* 12 (* m!1 c!3 c!3 c!3)) (* 36 (* k!2 k!2 m!1 c!3)) (* 36 (* k!2 m!1 c!3 c!3)) (* m!1 m!1 c!3 c!3 c!3) (* 3 (* k!2 m!1 m!1 c!3 c!3)) ?x385)))
 (let (($x1054 (<= ?x553 0)))
 (let ((?x190 (* (- 3) n!0)))
 (let ((?x121 (* (- 3) (* n!0 n!0))))
 (let ((?x651 (+ k!2 ?x121 ?x190)))
 (let (($x444 (<= ?x651 1)))
 (let (($x159 (= ?x651 1)))
 (let ((?x695 (* k!2 n!0)))
 (let ((?x691 (* (- 9) ?x695)))
 (let ((?x684 (* m!1 m!1)))
 (let ((?x406 (* 2 (* k!2 m!1))))
 (let ((?x299 (* (- 27) c!3)))
 (let ((?x413 (* k!2 k!2)))
 (let ((?x683 (* 9 n!0)))
 (let ((?x503 (* (- 5) m!1)))
 (let ((?x248 (* (- 32) k!2)))
 (let ((?x641 (+ 13 (* (- 9) (* n!0 c!3)) ?x248 ?x503 ?x683 ?x413 ?x299 ?x406 ?x684 ?x691)))
 (let ((?x341 (* ?x553 ?x641)))
 (let (($x632 (= ?x341 0)))
 (let (($x342 (not $x632)))
 (let ((?x516 (* (- 1) ?x695)))
 (let ((?x696 (* 3 c!3)))
 (let ((?x694 (* (- 2) n!0)))
 (let ((?x690 (+ k!2 ?x694 ?x696 ?x516)))
 (let (($x784 (= ?x690 1)))
 (let ((?x436 (* 18 c!3)))
 (let ((?x678 (* (- 1) ?x413)))
 (let ((?x673 (* (- 9) n!0)))
 (let ((?x692 (* 5 k!2)))
 (let ((?x355 (+ (* 9 (* n!0 c!3)) ?x692 ?x673 ?x678 ?x436)))
 (let (($x369 (= ?x355 4)))
 (let ((?x421 (+ m!1 (* (- 6) n!0))))
 (let (($x674 (= ?x421 6)))
 (let (($x636 (and $x674 $x369 $x784 $x159 $x342)))
 (let ((?x663 (+ 13 ?x299 ?x248 ?x503 ?x683 ?x413 ?x691 (* (- 9) (* c!3 n!0)) ?x406 ?x684)))
 (let ((?x647 (+ c!3 k!2)))
 (let ((?x222 (+ (* (- 1) (* ?x136 ?x136 ?x680 ?x680 ?x647 ?x647 ?x647)) (* ?x115 ?x115 ?x115 ?x136 ?x136 ?x136 ?x680 ?x680 ?x680 ?x647 ?x647 ?x647) (* (- 1) (* ?x136 ?x136 ?x136 ?x680 ?x647 ?x647 ?x647)) (* (- 1) (* ?x115 ?x136 ?x136 ?x680 ?x647 ?x647)) ?x192 (* 3 (* c!3 k!2 k!2 m!1 m!1)) (* 3 (* c!3 c!3 k!2 m!1 m!1)) (* c!3 c!3 c!3 m!1 m!1) (* 36 (* c!3 c!3 k!2 m!1)) (* 12 (* c!3 c!3 c!3 m!1)) ?x397 (* 108 (* c!3 k!2 k!2)) (* 108 (* c!3 c!3 k!2)) ?x385 (* 36 (* c!3 k!2 k!2 m!1)) ?x337)))
 (let (($x652 (and $x674 (= (+ ?x436 ?x692 ?x673 ?x678 (* 9 (* c!3 n!0))) 4) (= (+ ?x696 k!2 ?x694 ?x516) 1) (= (+ k!2 ?x190 ?x121) 1) (not (= (* ?x222 ?x663) 0)))))
 (let (($x243 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x485 (+ 13 (* (- 27) c) (* (- 32) k) ?x430 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x704 (* 12 (* k k k m))))
 (let ((?x703 (* 36 (* c k k m))))
 (let ((?x621 (* 36 (* c c c))))
 (let ((?x698 (* 108 (* c c k))))
 (let ((?x699 (* 108 (* c k k))))
 (let ((?x569 (* 36 (* k k k))))
 (let ((?x701 (* 12 (* c c c m))))
 (let ((?x702 (* 36 (* c c k m))))
 (let ((?x506 (* c c c m m)))
 (let ((?x705 (* 3 (* c c k m m))))
 (let ((?x706 (* 3 (* c k k m m))))
 (let ((?x499 (* k k k m m)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x490 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x298 (* (- 1) (* ?x345 ?x490 ?x490 ?x72 ?x68 ?x68))))
 (let ((?x262 (* (- 1) (* ?x490 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x172 (* ?x345 ?x345 ?x345 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x275 (* (- 1) (* ?x490 ?x490 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x294 (+ ?x275 ?x172 ?x262 ?x298 ?x499 ?x706 ?x705 ?x506 ?x702 ?x701 ?x569 ?x699 ?x698 ?x621 ?x703 ?x704)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x294 ?x485) 0)))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x685 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x443 (* (- 18) c)))
 (let ((?x409 (+ 13 ?x443 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x490 (+ 6 m)))
 (let ((?x262 (* (- 1) (* ?x490 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x298 (* (- 1) (* (+ 1 n) ?x490 ?x490 ?x72 ?x68 ?x68))))
 (let ((?x275 (* (- 1) (* ?x490 ?x490 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x345 (+ 1 n)))
 (let ((?x172 (* ?x345 ?x345 ?x345 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x157 (= (* (+ ?x172 ?x275 ?x298 (* ?x490 ?x490 ?x68 ?x68 ?x68) ?x262) ?x409) 0)))
 (let (($x675 (not $x157)))
 (let (($x669 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x328 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x328 $x669 $x675)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x462 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x485 (+ 13 (* (- 27) c) (* (- 32) k) ?x430 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x704 (* 12 (* k k k m))))
 (let ((?x703 (* 36 (* c k k m))))
 (let ((?x621 (* 36 (* c c c))))
 (let ((?x698 (* 108 (* c c k))))
 (let ((?x699 (* 108 (* c k k))))
 (let ((?x569 (* 36 (* k k k))))
 (let ((?x701 (* 12 (* c c c m))))
 (let ((?x702 (* 36 (* c c k m))))
 (let ((?x506 (* c c c m m)))
 (let ((?x705 (* 3 (* c c k m m))))
 (let ((?x706 (* 3 (* c k k m m))))
 (let ((?x499 (* k k k m m)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x490 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x298 (* (- 1) (* ?x345 ?x490 ?x490 ?x72 ?x68 ?x68))))
 (let ((?x262 (* (- 1) (* ?x490 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x172 (* ?x345 ?x345 ?x345 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x275 (* (- 1) (* ?x490 ?x490 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x294 (+ ?x275 ?x172 ?x262 ?x298 ?x499 ?x706 ?x705 ?x506 ?x702 ?x701 ?x569 ?x699 ?x698 ?x621 ?x703 ?x704)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x284 (and $x128 $x212 $x264 $x302 (not (= (* ?x294 ?x485) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x443 (* (- 18) c)))
 (let ((?x409 (+ 13 ?x443 (* (- 23) k) (* (- 9) (* ?x345 ?x68)) ?x430 ?x48 ?x78)))
 (let (($x157 (= (* (+ ?x172 ?x275 ?x298 (* ?x490 ?x490 ?x68 ?x68 ?x68) ?x262) ?x409) 0)))
 (let (($x675 (not $x157)))
 (let (($x669 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x328 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x402 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x328 $x669 $x675)))
 (rewrite (= $x402 $x284)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x510 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x443 (* (- 18) c)))
 (let ((?x409 (+ 13 ?x443 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x490 (+ 6 m)))
 (let ((?x262 (* (- 1) (* ?x490 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x298 (* (- 1) (* (+ 1 n) ?x490 ?x490 ?x72 ?x68 ?x68))))
 (let ((?x275 (* (- 1) (* ?x490 ?x490 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x345 (+ 1 n)))
 (let ((?x172 (* ?x345 ?x345 ?x345 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x157 (= (* (+ ?x172 ?x275 ?x298 (* ?x490 ?x490 ?x68 ?x68 ?x68) ?x262) ?x409) 0)))
 (let (($x675 (not $x157)))
 (let (($x669 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x519 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x604 (= (+ ?x443 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 $x604 $x519 $x669 $x675)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x689 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x443 (* (- 18) c)))
 (let ((?x409 (+ 13 ?x443 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x490 (+ 6 m)))
 (let ((?x262 (* (- 1) (* ?x490 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x298 (* (- 1) (* (+ 1 n) ?x490 ?x490 ?x72 ?x68 ?x68))))
 (let ((?x275 (* (- 1) (* ?x490 ?x490 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x345 (+ 1 n)))
 (let ((?x172 (* ?x345 ?x345 ?x345 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x157 (= (* (+ ?x172 ?x275 ?x298 (* ?x490 ?x490 ?x68 ?x68 ?x68) ?x262) ?x409) 0)))
 (let (($x675 (not $x157)))
 (let (($x669 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x328 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x402 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x328 $x669 $x675)))
 (let (($x519 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x604 (= (+ ?x443 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x682 (and $x128 $x604 $x519 $x669 $x675)))
 (rewrite (= $x682 $x402))))))))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x80 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x70 (+ n 1)))
 (let ((?x84 (- (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x80 ?x80))))
 (let ((?x87 (+ (- ?x84 (* ?x68 ?x68 ?x72 ?x80 ?x80 ?x70)) (* ?x68 ?x68 ?x68 ?x80 ?x80))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x90 (* (+ ?x76 (* 9 ?x70) ?x78) (- ?x87 (* ?x68 ?x68 ?x68 ?x72 ?x80 ?x80 ?x80)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x90 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x677 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x443 (* (- 18) c)))
 (let ((?x409 (+ 13 ?x443 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x490 (+ 6 m)))
 (let ((?x262 (* (- 1) (* ?x490 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x298 (* (- 1) (* (+ 1 n) ?x490 ?x490 ?x72 ?x68 ?x68))))
 (let ((?x275 (* (- 1) (* ?x490 ?x490 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x345 (+ 1 n)))
 (let ((?x172 (* ?x345 ?x345 ?x345 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x157 (= (* (+ ?x172 ?x275 ?x298 (* ?x490 ?x490 ?x68 ?x68 ?x68) ?x262) ?x409) 0)))
 (let (($x675 (not $x157)))
 (let (($x669 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x519 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x604 (= (+ ?x443 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x682 (and $x128 $x604 $x519 $x669 $x675)))
 (let ((?x80 (+ m 6)))
 (let ((?x70 (+ n 1)))
 (let ((?x84 (- (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x80 ?x80))))
 (let ((?x87 (+ (- ?x84 (* ?x68 ?x68 ?x72 ?x80 ?x80 ?x70)) (* ?x68 ?x68 ?x68 ?x80 ?x80))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x90 (* (+ ?x76 (* 9 ?x70) ?x78) (- ?x87 (* ?x68 ?x68 ?x68 ?x72 ?x80 ?x80 ?x80)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x94 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x90 0))))))
 (rewrite (= $x94 $x682))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x400 (mp (mp @x96 (quant-intro (proof-bind ?x677) (= $x95 $x510)) $x510) (rewrite (= $x510 $x510)) $x510)))
 (let ((@x119 (mp (mp @x400 (quant-intro (proof-bind ?x689) (= $x510 $x685)) $x685) (quant-intro (proof-bind ?x462) (= $x685 $x243)) $x243)))
 (let ((@x549 (mp (mp~ @x119 (sk (~ $x243 $x652)) $x652) (rewrite (= $x652 $x636)) $x636)))
 (let ((@x594 (and-elim @x549 $x159)))
 (let ((@x229 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x159) $x444)) @x594 $x444)))
 (let (($x193 (>= ?x651 1)))
 (let ((@x279 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x159) $x193)) @x594 $x193)))
 (let (($x441 (<= ?x690 1)))
 (let ((@x308 (and-elim @x549 $x784)))
 (let ((@x596 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x784) $x441)) @x308 $x441)))
 (let (($x414 (>= ?x690 1)))
 (let ((@x592 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x784) $x414)) @x308 $x414)))
 (let (($x687 (<= ?x355 4)))
 (let ((@x709 (and-elim @x549 $x369)))
 (let ((@x686 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x369) $x687)) @x709 $x687)))
 (let (($x438 (>= ?x355 4)))
 (let ((@x378 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x369) $x438)) @x709 $x438)))
 (let (($x194 (<= ?x421 6)))
 (let ((@x431 (and-elim @x549 $x674)))
 (let ((@x387 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x674) $x194)) @x431 $x194)))
 (let (($x437 (>= ?x421 6)))
 (let ((@x399 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x674) $x437)) @x431 $x437)))
 (let (($x813 (not (<= ?x341 0))))
 (let (($x405 (>= ?x341 0)))
 (let (($x900 (>= ?x641 0)))
 (let ((@x955 ((_ th-lemma arith) (hypothesis (not $x900)) @x399 @x387 @x279 @x229 @x399 @x387 @x279 @x229 @x592 @x596 @x279 @x229 @x279 @x229 @x399 @x387 @x378 @x686 @x592 @x596 false)))
 (let ((@x923 (lemma @x955 $x900)))
 (let (($x1115 (not $x1054)))
 (let (($x1031 (= ?x553 0)))
 (let (($x1059 (not $x1031)))
 (let (($x544 (not $x405)))
 (let ((@x169 (hypothesis $x544)))
 (let (($x992 (>= ?x553 0)))
 (let ((@x1082 (hypothesis $x1031)))
 (let ((@x1110 ((_ th-lemma arith farkas 1 1 1) @x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1059 $x992)) @x1082 $x992) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1059 $x1054)) @x1082 $x1054) false)))
 (let (($x1119 (not $x992)))
 (let ((@x1087 (hypothesis $x1119)))
 (let ((@x1047 ((_ th-lemma arith) @x169 @x1087 @x279 @x229 @x279 @x229 @x378 @x686 @x279 @x229 @x378 @x686 @x378 @x686 @x279 @x229 @x378 @x686 @x592 @x596 @x279 @x229 @x399 @x387 @x399 @x387 @x279 @x229 @x378 @x686 @x592 @x596 false)))
 (let ((@x1116 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1031 $x1115 $x1119)) (unit-resolution (lemma @x1047 (or $x992 $x405)) @x169 $x992) (unit-resolution (lemma @x1110 (or $x1059 $x405)) @x169 $x1059) $x1115)))
 (let ((@x348 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x632 $x813 $x544)) (and-elim @x549 $x342) (or $x813 $x544))))
 (let ((@x350 (unit-resolution @x348 (lemma ((_ th-lemma arith farkas 1 1 1) @x169 @x1116 @x923 false) $x405) $x813)))
 (let ((@x1176 ((_ th-lemma arith) @x350 (hypothesis $x1115) @x279 @x229 @x279 @x229 @x378 @x686 @x279 @x229 @x399 @x387 @x279 @x229 @x399 @x387 @x279 @x229 @x279 @x229 @x279 @x229 @x399 @x387 @x378 @x686 @x592 @x596 @x592 @x596 @x279 @x229 false)))
 ((_ th-lemma arith farkas 1 1 1) @x350 (lemma ((_ th-lemma arith farkas 1 1 1) @x350 @x1087 @x923 false) $x992) (lemma @x1176 $x1054) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 100
 :arith-assert-diseq        19
 :arith-assert-lower        945
 :arith-assert-upper        472
 :arith-bound-prop          3
 :arith-branch-var          21
 :arith-conflicts           50
 :arith-eq-adapter          20
 :arith-fixed-eqs           120
 :arith-gcd-tests           239
 :arith-gomory-cuts         16
 :arith-grobner             65
 :arith-ineq-splits         21
 :arith-max-min             6383
 :arith-nonlinear-bounds    225
 :arith-nonlinear-horner    810
 :arith-num-rows            20
 :arith-offset-eqs          8
 :arith-patches             55
 :arith-patches_succ        14
 :arith-pivots              1624
 :arith-pseudo-nonlinear    156
 :arith-row-summations      14311
 :arith-tableau-max-columns 74
 :arith-tableau-max-rows    20
 :conflicts                 51
 :decisions                 235
 :del-clause                84
 :final-checks              175
 :max-memory                4.60
 :memory                    3.23
 :minimized-lits            4
 :mk-bool-var               252
 :mk-clause                 175
 :num-allocs                1024444404
 :num-checks                1
 :propagations              262
 :rlimit-count              2710092
 :time                      2.91
 :total-time                2.91)
