unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x254 (* (- 1) k!2)))
 (let ((?x417 (* n!0 n!0)))
 (let ((?x331 (* 3 ?x417)))
 (let ((?x197 (+ (* 3 n!0) ?x331 ?x254)))
 (let (($x181 (<= ?x197 (- 1))))
 (let (($x198 (= ?x197 (- 1))))
 (let ((?x504 (+ c!3 k!2)))
 (let ((?x271 (+ m!1 k!2)))
 (let ((?x273 (+ 6 m!1)))
 (let ((?x282 (+ 1 n!0)))
 (let ((?x472 (* ?x282 ?x282 ?x273 ?x273 ?x273 ?x504 ?x504 ?x504)))
 (let ((?x507 (* (- 1) (* k!2 k!2 k!2))))
 (let ((?x307 (* (- 1) (* m!1 m!1 m!1))))
 (let ((?x354 (+ (* (- 1) (* n!0 m!1 m!1 m!1)) (* (- 3) (* m!1 m!1 k!2)) (* (- 3) (* m!1 k!2 k!2)) (* (- 1) (* n!0 k!2 k!2 k!2)) (* (- 3) (* n!0 m!1 k!2 k!2)) (* ?x282 ?x282 ?x273 ?x273 ?x273 ?x271 ?x271 ?x271 ?x504 ?x504) (* (- 3) (* n!0 m!1 m!1 k!2)) (* ?x282 ?x273 ?x273 ?x273 ?x271 ?x271 ?x271 ?x504) ?x307 ?x507 ?x472 (* (- 1) (* ?x282 ?x282 ?x282 ?x273 ?x273 ?x273 ?x271 ?x271 ?x271 ?x504)))))
 (let ((?x168 (* (+ 7 (* 9 n!0) ?x331 (* (- 1) m!1) ?x254) ?x354)))
 (let (($x289 (= ?x168 0)))
 (let (($x165 (not $x289)))
 (let ((?x402 (* k!2 k!2)))
 (let ((?x253 (* 9 n!0)))
 (let ((?x113 (+ ?x253 (* (- 18) c!3) (* (- 9) (* n!0 c!3)) ?x402 (* (- 5) k!2))))
 (let ((?x510 (* (- 1) m!1)))
 (let ((?x450 (+ (* 6 n!0) ?x510)))
 (let (($x498 (= ?x450 (- 6))))
 (let (($x522 (and $x498 (= ?x113 (- 4)) (= (+ (* n!0 k!2) (* 2 n!0) (* (- 3) c!3) ?x254) (- 1)) $x198 $x165)))
 (let ((?x180 (+ k!2 m!1)))
 (let ((?x193 (+ (* ?x282 ?x273 ?x273 ?x273 ?x180 ?x180 ?x180 ?x504) (* ?x282 ?x282 ?x273 ?x273 ?x273 ?x180 ?x180 ?x180 ?x504 ?x504) (* (- 1) (* ?x282 ?x282 ?x282 ?x273 ?x273 ?x273 ?x180 ?x180 ?x180 ?x504)) ?x472 ?x307 (* (- 3) (* k!2 m!1 m!1)) (* (- 3) (* k!2 k!2 m!1)) ?x507 (* (- 1) (* m!1 m!1 m!1 n!0)) (* (- 3) (* k!2 m!1 m!1 n!0)) (* (- 3) (* k!2 k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 k!2 n!0)))))
 (let (($x463 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x396 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x402) (* 9 (* c!3 n!0)))))
 (let (($x509 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x396 4) $x463 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x417)) 1) (not (= (* (+ 7 ?x254 ?x510 ?x253 ?x331) ?x193) 0)))))
 (let (($x279 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x397 (* (- 1) (* k k k n))))
 (let ((?x514 (* (- 3) (* k k m n))))
 (let ((?x511 (* (- 3) (* k m m n))))
 (let ((?x400 (* (- 1) (* m m m n))))
 (let ((?x401 (* (- 1) (* k k k))))
 (let ((?x508 (* (- 3) (* k k m))))
 (let ((?x505 (* (- 3) (* k m m))))
 (let ((?x404 (* (- 1) (* m m m))))
 (let ((?x75 (+ c k)))
 (let ((?x390 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x256 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x75 ?x75 ?x75)))
 (let ((?x71 (+ k m)))
 (let ((?x194 (* (- 1) (* ?x305 ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75))))
 (let ((?x137 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x128 (* ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75)))
 (let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x231 (* (+ 7 ?x237 ?x353 ?x48 ?x269) (+ ?x128 ?x137 ?x194 ?x256 ?x404 ?x505 ?x508 ?x401 ?x400 ?x511 ?x514 ?x397))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= ?x231 0)))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x228 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x194 (* (- 1) (* ?x305 ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75))))
 (let ((?x137 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x128 (* ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75)))
 (let ((?x256 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x75 ?x75 ?x75)))
 (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x205 (* (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 ?x65) (+ ?x256 ?x128 ?x137 (* (- 1) (* ?x305 ?x71 ?x71 ?x71)) ?x194))))
 (let (($x206 (not (= ?x205 0))))
 (let (($x144 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x515 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x515 $x144 $x206)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x294 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x397 (* (- 1) (* k k k n))))
 (let ((?x514 (* (- 3) (* k k m n))))
 (let ((?x511 (* (- 3) (* k m m n))))
 (let ((?x400 (* (- 1) (* m m m n))))
 (let ((?x401 (* (- 1) (* k k k))))
 (let ((?x508 (* (- 3) (* k k m))))
 (let ((?x505 (* (- 3) (* k m m))))
 (let ((?x404 (* (- 1) (* m m m))))
 (let ((?x75 (+ c k)))
 (let ((?x390 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x256 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x75 ?x75 ?x75)))
 (let ((?x71 (+ k m)))
 (let ((?x194 (* (- 1) (* ?x305 ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75))))
 (let ((?x137 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x128 (* ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75)))
 (let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x231 (* (+ 7 ?x237 ?x353 ?x48 ?x269) (+ ?x128 ?x137 ?x194 ?x256 ?x404 ?x505 ?x508 ?x401 ?x400 ?x511 ?x514 ?x397))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x109 (and $x123 $x207 $x259 $x297 (not (= ?x231 0)))))
 (let ((?x205 (* (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 (* 3 n)) (+ ?x256 ?x128 ?x137 (* (- 1) (* ?x305 ?x71 ?x71 ?x71)) ?x194))))
 (let (($x206 (not (= ?x205 0))))
 (let (($x144 (= (+ ?x269 ?x237 (* 3 n)) (- 1))))
 (let (($x515 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x241 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x515 $x144 $x206)))
 (rewrite (= $x241 $x109))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x212 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x194 (* (- 1) (* ?x305 ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75))))
 (let ((?x137 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x128 (* ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75)))
 (let ((?x256 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x75 ?x75 ?x75)))
 (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x205 (* (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 ?x65) (+ ?x256 ?x128 ?x137 (* (- 1) (* ?x305 ?x71 ?x71 ?x71)) ?x194))))
 (let (($x206 (not (= ?x205 0))))
 (let (($x144 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x348 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x144 $x206))))))))))))))))))) :qid k!34))
 ))
 (let ((?x236 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x194 (* (- 1) (* ?x305 ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75))))
 (let ((?x137 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x128 (* ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75)))
 (let ((?x256 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x75 ?x75 ?x75)))
 (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x205 (* (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 ?x65) (+ ?x256 ?x128 ?x137 (* (- 1) (* ?x305 ?x71 ?x71 ?x71)) ?x194))))
 (let (($x206 (not (= ?x205 0))))
 (let (($x144 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x515 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x241 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x515 $x144 $x206)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (and $x123 (= ?x348 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x144 $x206)))
 (rewrite (= $x129 $x241))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x80 (+ (* ?x75 ?x75 ?x75 ?x76 ?x76 ?x76 ?x68 ?x68) (* ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68) (* ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68))))
 (let ((?x84 (- (- ?x80 (* ?x71 ?x71 ?x71 ?x68)) (* ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68))))
 (let (($x86 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x84) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x86))))))))))))))))) :qid k!34))
 ))
 (let ((?x138 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x194 (* (- 1) (* ?x305 ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75))))
 (let ((?x137 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x128 (* ?x305 ?x390 ?x390 ?x390 ?x71 ?x71 ?x71 ?x75)))
 (let ((?x256 (* ?x305 ?x305 ?x390 ?x390 ?x390 ?x75 ?x75 ?x75)))
 (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x205 (* (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 ?x65) (+ ?x256 ?x128 ?x137 (* (- 1) (* ?x305 ?x71 ?x71 ?x71)) ?x194))))
 (let (($x206 (not (= ?x205 0))))
 (let (($x144 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x129 (and $x123 (= ?x348 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x144 $x206)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x80 (+ (* ?x75 ?x75 ?x75 ?x76 ?x76 ?x76 ?x68 ?x68) (* ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68) (* ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68))))
 (let ((?x84 (- (- ?x80 (* ?x71 ?x71 ?x71 ?x68)) (* ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68))))
 (let (($x86 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x84) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x86)))))
 (rewrite (= $x89 $x129))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x227 (mp (mp @x91 (quant-intro (proof-bind ?x138) (= $x90 $x212)) $x212) (rewrite (= $x212 $x212)) $x212)))
 (let ((@x295 (mp (mp @x227 (quant-intro (proof-bind ?x236) (= $x212 $x228)) $x228) (quant-intro (proof-bind ?x294) (= $x228 $x279)) $x279)))
 (let ((@x267 (mp (mp~ @x295 (sk (~ $x279 $x509)) $x509) (rewrite (= $x509 $x522)) $x522)))
 (let ((@x453 (and-elim @x267 $x198)))
 (let ((@x617 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x198) $x181)) @x453 $x181)))
 (let (($x492 (<= ?x450 (- 6))))
 (let ((@x121 (and-elim @x267 $x498)))
 (let ((@x199 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x498) $x492)) @x121 $x492)))
 (let (($x495 (>= ?x197 (- 1))))
 (let ((@x251 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x198) $x495)) @x453 $x495)))
 (let (($x225 (>= ?x450 (- 6))))
 (let ((@x484 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x498) $x225)) @x121 $x225)))
 (let (($x250 (not (<= ?x168 0))))
 (let (($x162 (>= ?x168 0)))
 (let ((@x623 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x162)) @x484 @x251 @x199 @x617 false) $x162)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x289 $x250 (not $x162))) (and-elim @x267 $x165) (or $x250 (not $x162)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x371 @x623 $x250) @x484 @x251 @x199 @x617 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             156
 :arith-nonlinear-bounds    3
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      8
 :arith-tableau-max-columns 43
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.65
 :memory                    3.14
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1138701
 :num-checks                1
 :propagations              11
 :rlimit-count              2962
 :time                      0.01
 :total-time                0.01)
