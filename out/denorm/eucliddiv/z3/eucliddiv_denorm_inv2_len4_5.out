unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x67 (* y00 q00)))
 (let ((?x330 (+ r00 ?x67 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x504 (>= ?x330 0)))
 (let (($x332 (= ?x330 0)))
 (let ((?x652 (* (- 1) (* y00 y00 y00))))
 (let ((?x551 (* y00 y00)))
 (let ((?x509 (* 2 (* y00 y00 y00 y00 y00))))
 (let ((?x410 (+ ?x509 (* (- 12) (* y00 y00 y00 y00 r!1 q!2)) (* 5 (* y00 y00 y00 y00 y00 q!2)) (* (- 1) (* y00 y00 y00 q!2)) (* 4 (* y00 y00 y00 r!1 r!1)) (* 9 (* y00 y00 y00 r!1 r!1 q!2)) (* 6 (* y00 y00 y00 r!1 r!1 q!2 q!2)) (* y00 y00 y00 r!1 r!1 q!2 q!2 q!2) (* (- 9) (* y00 y00 y00 y00 r!1 q!2 q!2)) (* (- 5) (* y00 y00 y00 y00 r!1)) (* (- 2) (* y00 y00 y00 y00 r!1 q!2 q!2 q!2)) (* 4 (* y00 y00 y00 y00 y00 q!2 q!2)) (* (- 2) (* y00 y00 r!1 r!1 r!1 q!2)) (* (- 1) (* y00 y00 r!1 r!1 r!1 q!2 q!2)) (* (- 1) (* y00 r!1 r!1)) (* (- 1) (* y00 r!1 r!1 q!2)) (* 2 (* y00 y00 r!1)) (* 2 (* y00 y00 r!1 q!2)) (* (- 1) (* y00 y00 r!1 r!1 r!1)) (* (- 1) (* y00 r!1)) (* y00 y00 y00 y00 y00 q!2 q!2 q!2) ?x551 ?x652)))
 (let ((?x414 (* ?x410 (+ (* (- 1) r00) (* (- 1) ?x67) (* y00 q!2) r!1))))
 (let (($x343 (= ?x414 0)))
 (let (($x415 (not $x343)))
 (let (($x344 (and (= (+ y00 (* (- 1) y!0)) 0) $x332 $x415)))
 (let ((?x78 (* (- 1) ?x67)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x832 (+ r!1 ?x66 (* q!2 y00) ?x78)))
 (let ((?x187 (+ (* 4 (* r!1 r!1 y00 y00 y00)) (* 9 (* q!2 r!1 r!1 y00 y00 y00)) (* 6 (* q!2 q!2 r!1 r!1 y00 y00 y00)) (* q!2 q!2 q!2 r!1 r!1 y00 y00 y00) (* (- 5) (* r!1 y00 y00 y00 y00)) (* (- 12) (* q!2 r!1 y00 y00 y00 y00)) (* (- 9) (* q!2 q!2 r!1 y00 y00 y00 y00)) (* (- 2) (* q!2 q!2 q!2 r!1 y00 y00 y00 y00)) ?x509 (* 5 (* q!2 y00 y00 y00 y00 y00)) (* 4 (* q!2 q!2 y00 y00 y00 y00 y00)) (* q!2 q!2 q!2 y00 y00 y00 y00 y00) (* (- 1) (* r!1 r!1 r!1 y00 y00)) (* (- 2) (* q!2 r!1 r!1 r!1 y00 y00)) (* (- 1) (* q!2 q!2 r!1 r!1 r!1 y00 y00)) (* (- 1) (* r!1 y00)) ?x551 (* (- 1) (* r!1 r!1 y00)) (* (- 1) (* q!2 r!1 r!1 y00)) (* 2 (* r!1 y00 y00)) (* 2 (* q!2 r!1 y00 y00)) ?x652 (* (- 1) (* q!2 y00 y00 y00)))))
 (let (($x113 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x832 0) (not (= (* ?x187 ?x832) 0)))))
 (let (($x494 (exists ((q Int) (r Int) (y Int) )(! (let ((?x67 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x67)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x92 (+ r ?x66 ?x39 ?x78)))
 (let ((?x652 (* (- 1) (* y00 y00 y00))))
 (let ((?x551 (* y00 y00)))
 (let ((?x509 (* 2 (* y00 y00 y00 y00 y00))))
 (let ((?x667 (+ (* 4 (* r r y00 y00 y00)) (* 9 (* q r r y00 y00 y00)) (* 6 (* q q r r y00 y00 y00)) (* q q q r r y00 y00 y00) (* (- 5) (* r y00 y00 y00 y00)) (* (- 12) (* q r y00 y00 y00 y00)) (* (- 9) (* q q r y00 y00 y00 y00)) (* (- 2) (* q q q r y00 y00 y00 y00)) ?x509 (* 5 (* q y00 y00 y00 y00 y00)) (* 4 (* q q y00 y00 y00 y00 y00)) (* q q q y00 y00 y00 y00 y00) (* (- 1) (* r r r y00 y00)) (* (- 2) (* q r r r y00 y00)) (* (- 1) (* q q r r r y00 y00)) (* (- 1) (* r y00)) ?x551 (* (- 1) (* r r y00)) (* (- 1) (* q r r y00)) (* 2 (* r y00 y00)) (* 2 (* q r y00 y00)) ?x652 (* (- 1) (* q y00 y00 y00)))))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y (* (- 1) y00)) 0)))
 (and $x74 $x97 (not (= (* ?x667 ?x92) 0)))))))))))))) :qid k!29))
 ))
 (let (($x473 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x664 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x650 (+ r ?x65)))
 (let ((?x274 (+ 1 q)))
 (let ((?x335 (+ (* y00 y00 y00 ?x274 ?x274 ?x274 ?x650 ?x650) (* (- 1) (* y00 y00 ?x274 ?x274 ?x650 ?x650 ?x650)) (* (- 1) (* y00 ?x650)) (* (- 1) (* y00 ?x274 ?x650 ?x650)))))
 (let (($x654 (not (= (* ?x335 (+ r ?x65 ?x66 ?x664 (* y00 ?x274))) 0))))
 (let (($x491 (= (+ r ?x66 ?x664 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x491 $x654)))))))))) :qid k!29))
 ))
 (let ((?x630 (lambda ((q Int) (r Int) (y Int) )(let ((?x67 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x67)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x92 (+ r ?x66 ?x39 ?x78)))
 (let ((?x652 (* (- 1) (* y00 y00 y00))))
 (let ((?x551 (* y00 y00)))
 (let ((?x509 (* 2 (* y00 y00 y00 y00 y00))))
 (let ((?x667 (+ (* 4 (* r r y00 y00 y00)) (* 9 (* q r r y00 y00 y00)) (* 6 (* q q r r y00 y00 y00)) (* q q q r r y00 y00 y00) (* (- 5) (* r y00 y00 y00 y00)) (* (- 12) (* q r y00 y00 y00 y00)) (* (- 9) (* q q r y00 y00 y00 y00)) (* (- 2) (* q q q r y00 y00 y00 y00)) ?x509 (* 5 (* q y00 y00 y00 y00 y00)) (* 4 (* q q y00 y00 y00 y00 y00)) (* q q q y00 y00 y00 y00 y00) (* (- 1) (* r r r y00 y00)) (* (- 2) (* q r r r y00 y00)) (* (- 1) (* q q r r r y00 y00)) (* (- 1) (* r y00)) ?x551 (* (- 1) (* r r y00)) (* (- 1) (* q r r y00)) (* 2 (* r y00 y00)) (* 2 (* q r y00 y00)) ?x652 (* (- 1) (* q y00 y00 y00)))))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y (* (- 1) y00)) 0)))
 (let (($x840 (and $x74 $x97 (not (= (* ?x667 ?x92) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x664 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x650 (+ r ?x65)))
 (let ((?x274 (+ 1 q)))
 (let ((?x335 (+ (* y00 y00 y00 ?x274 ?x274 ?x274 ?x650 ?x650) (* (- 1) (* y00 y00 ?x274 ?x274 ?x650 ?x650 ?x650)) (* (- 1) (* y00 ?x650)) (* (- 1) (* y00 ?x274 ?x650 ?x650)))))
 (let (($x654 (not (= (* ?x335 (+ r ?x65 ?x66 ?x664 (* y00 ?x274))) 0))))
 (let (($x491 (= (+ r ?x66 ?x664 (* y00 q)) 0)))
 (let (($x666 (and (= (+ y00 (* (- 1) y)) 0) $x491 $x654)))
 (rewrite (= $x666 $x840))))))))))))))))))))))))
 ))
 (let (($x663 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x664 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x650 (+ r ?x65)))
 (let ((?x274 (+ 1 q)))
 (let ((?x335 (+ (* y00 y00 y00 ?x274 ?x274 ?x274 ?x650 ?x650) (* (- 1) (* y00 y00 ?x274 ?x274 ?x650 ?x650 ?x650)) (* (- 1) (* y00 ?x650)) (* (- 1) (* y00 ?x274 ?x650 ?x650)))))
 (let (($x654 (not (= (* ?x335 (+ r ?x65 ?x66 ?x664 (* y00 ?x274))) 0))))
 (let (($x491 (= (+ r ?x66 ?x664 (* y00 q)) 0)))
 (and (= (+ ?x65 y) 0) $x491 $x654)))))))))) :qid k!29))
 ))
 (let ((?x583 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x664 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x650 (+ r ?x65)))
 (let ((?x274 (+ 1 q)))
 (let ((?x335 (+ (* y00 y00 y00 ?x274 ?x274 ?x274 ?x650 ?x650) (* (- 1) (* y00 y00 ?x274 ?x274 ?x650 ?x650 ?x650)) (* (- 1) (* y00 ?x650)) (* (- 1) (* y00 ?x274 ?x650 ?x650)))))
 (let (($x654 (not (= (* ?x335 (+ r ?x65 ?x66 ?x664 (* y00 ?x274))) 0))))
 (let (($x491 (= (+ r ?x66 ?x664 (* y00 q)) 0)))
 (let (($x666 (and (= (+ y00 (* (- 1) y)) 0) $x491 $x654)))
 (let (($x474 (and (= (+ ?x65 y) 0) $x491 $x654)))
 (rewrite (= $x474 $x666))))))))))))))
 ))
 (let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (- (* ?x45 ?x45 ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00))))
 (let ((?x55 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) (- (- ?x52 (* ?x42 y00)) (* ?x45 ?x42 ?x42 y00)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x55 0)))))))) :qid k!29))
 ))
 (let ((?x354 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x664 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x650 (+ r ?x65)))
 (let ((?x274 (+ 1 q)))
 (let ((?x335 (+ (* y00 y00 y00 ?x274 ?x274 ?x274 ?x650 ?x650) (* (- 1) (* y00 y00 ?x274 ?x274 ?x650 ?x650 ?x650)) (* (- 1) (* y00 ?x650)) (* (- 1) (* y00 ?x274 ?x650 ?x650)))))
 (let (($x654 (not (= (* ?x335 (+ r ?x65 ?x66 ?x664 (* y00 ?x274))) 0))))
 (let (($x491 (= (+ r ?x66 ?x664 (* y00 q)) 0)))
 (let (($x474 (and (= (+ ?x65 y) 0) $x491 $x654)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (- (* ?x45 ?x45 ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00))))
 (let ((?x55 (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) (- (- ?x52 (* ?x42 y00)) (* ?x45 ?x42 ?x42 y00)))))
 (let (($x59 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x55 0))))))
 (rewrite (= $x59 $x474))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x472 (mp (mp @x61 (quant-intro (proof-bind ?x354) (= $x60 $x663)) $x663) (rewrite (= $x663 $x663)) $x663)))
 (let ((@x806 (mp (mp @x472 (quant-intro (proof-bind ?x583) (= $x663 $x473)) $x473) (quant-intro (proof-bind ?x630) (= $x473 $x494)) $x494)))
 (let ((@x434 (mp (mp~ @x806 (sk (~ $x494 $x113)) $x113) (rewrite (= $x113 $x344)) $x344)))
 (let ((@x81 (and-elim @x434 $x332)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x504)) @x81 $x504)))
 (let (($x574 (<= ?x330 0)))
 (let ((@x355 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x574)) @x81 $x574)))
 (let (($x118 (not (<= ?x414 0))))
 (let (($x569 (>= ?x414 0)))
 (let ((@x580 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x343 $x118 (not $x569))) (and-elim @x434 $x415) (or $x118 (not $x569)))))
 (let ((@x505 (unit-resolution @x580 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x569)) @x355 @x277 false) $x569) $x118)))
 ((_ th-lemma arith farkas 1 1 1) @x505 @x355 @x277 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        10
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             126
 :arith-nonlinear-bounds    2
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.62
 :memory                    3.17
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1086382
 :num-checks                1
 :propagations              6
 :rlimit-count              3106
 :time                      0.01
 :total-time                0.01)
