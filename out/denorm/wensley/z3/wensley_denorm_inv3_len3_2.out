unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x806 (* a00 d!1)))
 (let ((?x622 (to_real ?x806)))
 (let ((?x352 (+ (* (- 1.0) (* (to_real a00) (to_real d!1))) ?x622)))
 (let (($x540 (>= ?x352 0.0)))
 (let (($x557 (= ?x352 0.0)))
 (let ((@x311 (lemma (unit-resolution ((_ th-lemma arith) $x557) (hypothesis (not $x557)) false) $x557)))
 (let ((?x300 (to_real d!1)))
 (let ((?x69 (to_real a00)))
 (let ((?x579 (* ?x69 ?x300)))
 (let ((?x626 (+ ?x579 (* (- 1.0) ?x622))))
 (let (($x684 (<= ?x626 0.0)))
 (let (($x884 (not $x684)))
 (let (($x618 (>= ?x626 0.0)))
 (let (($x354 (<= ?x352 0.0)))
 (let ((@x306 (lemma ((_ th-lemma arith) (hypothesis (not $x618)) (hypothesis $x354) false) (or (not $x354) $x618))))
 (let ((@x207 (unit-resolution @x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x354)) @x311 $x354) $x618)))
 (let (($x620 (= 0.0 ?x626)))
 (let (($x179 (not $x620)))
 (let ((?x765 (to_real y!0)))
 (let ((?x760 (to_real b!2)))
 (let ((?x103 (* ?x760 ?x765)))
 (let ((?x583 (+ ?x103 (* (- 1.0) (to_real (* y!0 b!2))))))
 (let (($x604 (>= ?x583 0.0)))
 (let (($x730 (= 0.0 ?x583)))
 (let (($x592 (= ?x583 0.0)))
 (let ((@x796 (lemma (unit-resolution ((_ th-lemma arith) $x592) (hypothesis (not $x592)) false) $x592)))
 (let ((@x161 (unit-resolution (hypothesis (not $x730)) (symm (hypothesis $x592) $x730) false)))
 (let ((@x512 (unit-resolution (lemma @x161 (or (not $x592) $x730)) @x796 $x730)))
 (let ((@x644 ((_ th-lemma arith triangle-eq) (or (not $x730) $x604))))
 (let ((@x276 (unit-resolution @x644 @x512 $x604)))
 (let (($x133 (<= ?x583 0.0)))
 (let ((@x168 ((_ th-lemma arith triangle-eq) (or (not $x730) $x133))))
 (let ((@x259 (unit-resolution @x168 @x512 $x133)))
 (let ((?x66 (to_real y00)))
 (let ((?x571 (* ?x66 ?x760)))
 (let ((?x759 (to_real a!3)))
 (let ((?x391 (* ?x300 ?x759)))
 (let ((?x102 (* (/ 1.0 2.0) ?x391)))
 (let ((?x262 (* (- 1.0) ?x103)))
 (let ((?x505 (* (- (/ 1.0 2.0)) ?x579)))
 (let ((?x460 (+ ?x505 ?x262 ?x102 ?x571)))
 (let (($x771 (>= ?x460 0.0)))
 (let ((?x373 (* d!1 a!3)))
 (let ((?x545 (+ ?x373 (* (- 2) (* y!0 b!2)) (* 2 (* y00 b!2)) (* (- 1) ?x806))))
 (let (($x758 (>= ?x545 0)))
 (let (($x225 (= 0 ?x545)))
 (let ((@x655 (symm (commutativity (= $x225 (= ?x545 0))) (= (= ?x545 0) $x225))))
 (let (($x558 (= ?x545 0)))
 (let ((?x555 (* (- (/ 1.0 2.0)) ?x760)))
 (let ((?x681 (* (- (/ 1.0 2.0)) (* ?x760 ?x760 ?x765 ?x765 ?x765))))
 (let ((?x186 (* (- (/ 3.0 8.0)) (* ?x300 ?x300 ?x760 ?x760 ?x765))))
 (let ((?x120 (* (- (/ 1.0 4.0)) (* ?x300 ?x300 ?x759 ?x759))))
 (let ((?x393 (* (- (/ 1.0 2.0)) (* ?x300 ?x300 ?x759 ?x760))))
 (let ((?x227 (* (- (/ 1.0 2.0)) (* ?x759 ?x760 ?x765 ?x765 ?x765))))
 (let ((?x295 (* (- (/ 3.0 8.0)) (* ?x300 ?x300 ?x759 ?x760 ?x765))))
 (let ((?x193 (* (- (/ 1.0 16.0)) (* ?x300 ?x300 ?x300 ?x759 ?x760))))
 (let ((?x382 (* (- (/ 1.0 4.0)) (* ?x300 ?x300 ?x760 ?x760))))
 (let ((?x384 (* (- (/ 3.0 4.0)) (* ?x300 ?x760 ?x760 ?x765 ?x765))))
 (let ((?x270 (* (- (/ 3.0 4.0)) (* ?x300 ?x759 ?x760 ?x765 ?x765))))
 (let ((?x187 (* (- (/ 1.0 16.0)) (* ?x300 ?x300 ?x300 ?x760 ?x760))))
 (let ((?x508 (* (+ ?x187 ?x270 ?x384 ?x382 ?x193 ?x295 ?x227 ?x393 ?x120 ?x186 ?x681 ?x555) (+ ?x262 ?x102 ?x571 ?x505))))
 (let (($x573 (= ?x508 0.0)))
 (let (($x623 (not $x573)))
 (let ((?x570 (* (- (/ 1.0 2.0)) (* ?x759 ?x760 ?x760 ?x765 ?x765 ?x765 ?x765))))
 (let ((?x632 (* (/ 1.0 4.0) (* ?x300 ?x759 ?x759 ?x760 ?x765 ?x765 ?x765))))
 (let ((?x764 (* (/ 1.0 4.0) (* ?x300 ?x759 ?x760))))
 (let ((?x762 (* (- (/ 1.0 2.0)) (* ?x760 ?x760 ?x765))))
 (let ((?x588 (* (- (/ 1.0 4.0)) (* ?x300 ?x300 ?x759 ?x759 ?x760 ?x765))))
 (let ((?x371 (* (/ 1.0 8.0) (* ?x300 ?x300 ?x300 ?x759 ?x759 ?x759))))
 (let ((?x590 (+ ?x371 (* (/ 1.0 2.0) (* ?x66 ?x760 ?x760)) (* (- (/ 1.0 8.0)) (* ?x69 ?x300 ?x300 ?x300 ?x759 ?x759)) (* (/ 1.0 2.0) (* ?x66 ?x759 ?x760 ?x760 ?x765 ?x765 ?x765)) (* (- (/ 1.0 4.0)) (* ?x69 ?x300 ?x759 ?x760 ?x765 ?x765 ?x765)) ?x588 (* (/ 1.0 4.0) (* ?x66 ?x300 ?x300 ?x759 ?x759 ?x760)) (* (- (/ 1.0 4.0)) (* ?x69 ?x300 ?x760)) ?x762 ?x764 ?x632 ?x570)))
 (let (($x507 (= ?x590 0.0)))
 (let (($x547 (not $x507)))
 (let (($x577 (or $x547 $x623)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x743 (= (+ ?x35 ?x108 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x636 (and $x743 (= (+ (* b00 d!1) (* (- 1) (* d00 b!2))) 0) $x558 $x577)))
 (let ((?x264 (* (+ ?x555 ?x227 ?x120 ?x681 ?x193 ?x187 ?x295 ?x186 ?x270 ?x384 ?x393 ?x382) (+ ?x102 ?x262 (* ?x760 ?x66) (* (- (/ 1.0 2.0)) (* ?x300 ?x69))))))
 (let ((?x522 (+ ?x764 ?x762 (* (/ 1.0 2.0) (* ?x760 ?x760 ?x66)) (* (- (/ 1.0 4.0)) (* ?x300 ?x760 ?x69)) ?x632 ?x570 (* (/ 1.0 2.0) (* ?x759 ?x760 ?x760 ?x765 ?x765 ?x765 ?x66)) (* (- (/ 1.0 4.0)) (* ?x300 ?x759 ?x760 ?x765 ?x765 ?x765 ?x69)) ?x371 ?x588 (* (/ 1.0 4.0) (* ?x300 ?x300 ?x759 ?x759 ?x760 ?x66)) (* (- (/ 1.0 8.0)) (* ?x300 ?x300 ?x300 ?x759 ?x759 ?x69)))))
 (let ((?x439 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x599 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x108 (* 2 (* y!0 b00))) 0)))
 (let (($x448 (and $x599 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x439 0) (or (not (= ?x522 0.0)) (not (= ?x264 0.0))))))
 (let (($x546 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x170 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x254 (+ ?x170 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x802 (* (- (/ 1.0 4.0)) (* (to_real d) (to_real d) (to_real b) (to_real b)))))
 (let ((?x799 (* (- (/ 1.0 2.0)) (* (to_real d) (to_real d) (to_real a) (to_real b)))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x326 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real a) (to_real a)))))
 (let ((?x271 (* (- (/ 1.0 2.0)) ?x61)))
 (let ((?x809 (+ ?x271 (* (- (/ 1.0 2.0)) (* (to_real a) ?x61 ?x63 ?x63 ?x63)) ?x326 (* (- (/ 1.0 2.0)) (* ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 3.0 4.0)) (* ?x56 (to_real a) ?x61 ?x63 ?x63)) (* (- (/ 3.0 4.0)) (* ?x56 ?x61 ?x61 ?x63 ?x63)) ?x799 ?x802)))
 (let ((?x423 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a00)))))
 (let ((?x422 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 (to_real y00)))))
 (let ((?x419 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a)))))
 (let ((?x434 (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) ?x61 ?x63 ?x63 ?x63 (to_real a00)))))
 (let ((?x433 (* (/ 1.0 2.0) (* (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x430 (* (/ 1.0 4.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x63 ?x63 ?x63))))
 (let ((?x409 (+ (* (/ 1.0 4.0) (* ?x56 (to_real a) ?x61)) (* (- (/ 1.0 2.0)) (* ?x61 ?x61 ?x63)) (* (/ 1.0 2.0) (* ?x61 ?x61 (to_real y00))) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 (to_real a00))) ?x430 (* (- (/ 1.0 2.0)) (* (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x433 ?x434 ?x419 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x63)) ?x422 ?x423)))
 (let (($x402 (not (= ?x409 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x177 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x182 (= ?x177 0)))
 (let (($x111 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (and $x140 $x111 $x182 (or $x402 (not (= (* ?x809 ?x254) 0.0)))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x754 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x744 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x261 (* ?x66 ?x61)))
 (let ((?x630 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x261 ?x744)))
 (let ((?x59 (to_real a)))
 (let ((?x551 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x722 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x271 (* (- (/ 1.0 2.0)) ?x61)))
 (let ((?x598 (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x61 ?x551 ?x722 ?x722 ?x722)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x551 ?x551)))))
 (let ((?x326 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59))))
 (let ((?x544 (* (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x61 ?x59)) ?x326) (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x261 ?x744))))
 (let (($x617 (or (not (= ?x544 0.0)) (not (= (* ?x598 ?x630) 0.0)))))
 (let ((?x687 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x696 (= ?x687 0)))
 (let ((?x289 (* d00 a)))
 (let ((?x526 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x289)))
 (and (= ?x526 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x696 $x617)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x658 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x170 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x254 (+ ?x170 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x802 (* (- (/ 1.0 4.0)) (* (to_real d) (to_real d) (to_real b) (to_real b)))))
 (let ((?x799 (* (- (/ 1.0 2.0)) (* (to_real d) (to_real d) (to_real a) (to_real b)))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x326 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real a) (to_real a)))))
 (let ((?x271 (* (- (/ 1.0 2.0)) ?x61)))
 (let ((?x809 (+ ?x271 (* (- (/ 1.0 2.0)) (* (to_real a) ?x61 ?x63 ?x63 ?x63)) ?x326 (* (- (/ 1.0 2.0)) (* ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 3.0 4.0)) (* ?x56 (to_real a) ?x61 ?x63 ?x63)) (* (- (/ 3.0 4.0)) (* ?x56 ?x61 ?x61 ?x63 ?x63)) ?x799 ?x802)))
 (let ((?x423 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a00)))))
 (let ((?x422 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 (to_real y00)))))
 (let ((?x419 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a)))))
 (let ((?x434 (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) ?x61 ?x63 ?x63 ?x63 (to_real a00)))))
 (let ((?x433 (* (/ 1.0 2.0) (* (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x430 (* (/ 1.0 4.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x63 ?x63 ?x63))))
 (let ((?x409 (+ (* (/ 1.0 4.0) (* ?x56 (to_real a) ?x61)) (* (- (/ 1.0 2.0)) (* ?x61 ?x61 ?x63)) (* (/ 1.0 2.0) (* ?x61 ?x61 (to_real y00))) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 (to_real a00))) ?x430 (* (- (/ 1.0 2.0)) (* (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x433 ?x434 ?x419 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x63)) ?x422 ?x423)))
 (let (($x402 (not (= ?x409 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x177 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x182 (= ?x177 0)))
 (let (($x111 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (let (($x375 (and $x140 $x111 $x182 (or $x402 (not (= (* ?x809 ?x254) 0.0))))))
 (let ((?x744 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x261 (* ?x66 ?x61)))
 (let ((?x630 (+ (* (/ 1.0 2.0) (* ?x56 (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x261 ?x744)))
 (let ((?x594 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (+ (to_real a) ?x61) (+ (to_real a) ?x61)))))
 (let ((?x722 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x59 (to_real a)))
 (let ((?x551 (+ ?x59 ?x61)))
 (let (($x616 (= (* (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x61 ?x551 ?x722 ?x722 ?x722)) ?x594) ?x630) 0.0)))
 (let ((?x544 (* (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x61 ?x59)) ?x326) (+ ?x170 (* (- 1.0) (* ?x63 ?x61)) ?x261 ?x744))))
 (let (($x617 (or (not (= ?x544 0.0)) (not $x616))))
 (let ((?x687 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x696 (= ?x687 0)))
 (let ((?x289 (* d00 a)))
 (let (($x745 (= (+ (* 2 ?x107) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x289) 0)))
 (let (($x749 (and $x745 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x696 $x617)))
 (rewrite (= $x749 $x375))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x621 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x744 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x261 (* ?x66 ?x61)))
 (let ((?x630 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x261 ?x744)))
 (let ((?x59 (to_real a)))
 (let ((?x551 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x722 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x271 (* (- (/ 1.0 2.0)) ?x61)))
 (let ((?x598 (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x61 ?x551 ?x722 ?x722 ?x722)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x551 ?x551)))))
 (let ((?x326 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59))))
 (let ((?x544 (* (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x61 ?x59)) ?x326) (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x261 ?x744))))
 (let (($x617 (or (not (= ?x544 0.0)) (not (= (* ?x598 ?x630) 0.0)))))
 (let ((?x687 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x696 (= ?x687 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x221 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x221 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x696 $x617)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x756 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x744 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x261 (* ?x66 ?x61)))
 (let ((?x630 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x261 ?x744)))
 (let ((?x59 (to_real a)))
 (let ((?x551 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x722 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x271 (* (- (/ 1.0 2.0)) ?x61)))
 (let ((?x598 (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x61 ?x551 ?x722 ?x722 ?x722)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x551 ?x551)))))
 (let ((?x326 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59))))
 (let ((?x544 (* (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x61 ?x59)) ?x326) (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x261 ?x744))))
 (let (($x617 (or (not (= ?x544 0.0)) (not (= (* ?x598 ?x630) 0.0)))))
 (let ((?x687 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x696 (= ?x687 0)))
 (let ((?x289 (* d00 a)))
 (let ((?x526 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x289)))
 (let (($x749 (and (= ?x526 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x696 $x617)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x324 (and (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) ?x289)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x696 $x617)))
 (rewrite (= $x324 $x749)))))))))))))))))))))))))))
 ))
 (let (($x99 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (to_real (+ a b))))
 (let ((?x63 (to_real y)))
 (let ((?x85 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x73 (* (to_real (- 1)) ?x62)))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x94 (* (- (+ (- (* ?x83 ?x58) (* ?x57 ?x62 ?x85)) ?x67) ?x70) (- (- ?x73 (* ?x83 ?x62 ?x85 ?x85 ?x85)) (* ?x83 ?x83 ?x58 ?x58)))))
 (let ((?x77 (- (- ?x73 (* (to_real a) ?x62 ?x63 ?x63 ?x63)) (* (to_real a) (to_real a) ?x58 ?x58))))
 (let ((?x78 (* (- (+ (- (* (to_real a) ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x77)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x78 ?x79)) (not (= ?x94 ?x79))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x702 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x744 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x261 (* ?x66 ?x61)))
 (let ((?x630 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x261 ?x744)))
 (let ((?x59 (to_real a)))
 (let ((?x551 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x722 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x271 (* (- (/ 1.0 2.0)) ?x61)))
 (let ((?x598 (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x61 ?x551 ?x722 ?x722 ?x722)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x551 ?x551)))))
 (let ((?x326 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59))))
 (let ((?x544 (* (+ ?x271 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x61 ?x59)) ?x326) (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x261 ?x744))))
 (let (($x617 (or (not (= ?x544 0.0)) (not (= (* ?x598 ?x630) 0.0)))))
 (let ((?x687 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x696 (= ?x687 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x221 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x324 (and $x221 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x696 $x617)))
 (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (to_real (+ a b))))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x73 (* (to_real (- 1)) ?x62)))
 (let ((?x93 (- (- ?x73 (* ?x83 ?x62 (+ ?x63 ?x58) (+ ?x63 ?x58) (+ ?x63 ?x58))) (* ?x83 ?x83 ?x58 ?x58))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x94 (* (- (+ (- (* ?x83 ?x58) (* ?x57 ?x62 (+ ?x63 ?x58))) ?x67) ?x70) ?x93)))
 (let ((?x78 (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) (- (- ?x73 (* ?x59 ?x62 ?x63 ?x63 ?x63)) (* ?x59 ?x59 ?x58 ?x58)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x98 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x78 ?x79)) (not (= ?x94 ?x79))))))
 (rewrite (= $x98 $x324))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x690 (mp (mp @x100 (quant-intro (proof-bind ?x702) (= $x99 $x621)) $x621) (rewrite (= $x621 $x621)) $x621)))
 (let ((@x769 (mp (mp @x690 (quant-intro (proof-bind ?x756) (= $x621 $x754)) $x754) (quant-intro (proof-bind ?x658) (= $x754 $x546)) $x546)))
 (let ((@x504 (mp (mp~ @x769 (sk (~ $x546 $x448)) $x448) (rewrite (= $x448 $x636)) $x636)))
 (let ((@x514 (mp (and-elim @x504 $x558) @x655 $x225)))
 (let ((@x715 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x225) $x758)) @x514 $x758)))
 (let (($x678 (<= ?x545 0)))
 (let ((@x653 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x225) $x678)) @x514 $x678)))
 (let ((@x215 (unit-resolution ((_ th-lemma arith) (or (not $x678) (not $x758) $x771 (not $x133) (not $x604))) @x653 @x715 (hypothesis (not $x771)) (unit-resolution @x168 (hypothesis $x730) $x133) (unit-resolution @x644 (hypothesis $x730) $x604) false)))
 (let ((@x205 (unit-resolution (lemma @x215 (or (not $x730) $x771)) @x512 $x771)))
 (let (($x757 (<= ?x460 0.0)))
 (let ((@x733 ((_ th-lemma arith) $x592)))
 (let ((@x178 (unit-resolution @x644 (mp @x733 (symm (commutativity (= $x730 $x592)) (= $x592 $x730)) $x730) $x604)))
 (let ((@x651 (symm (commutativity (= $x620 (= ?x626 0.0))) (= (= ?x626 0.0) $x620))))
 (let ((@x153 ((_ th-lemma arith triangle-eq) (or $x179 $x618))))
 (let ((?x628 (+ ?x571 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x728 (<= ?x628 0.0)))
 (let (($x629 (= 0.0 ?x628)))
 (let ((@x665 (symm (commutativity (= $x629 (= ?x628 0.0))) (= (= ?x628 0.0) $x629))))
 (let ((@x426 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x629) $x728)) (mp ((_ th-lemma arith) (= ?x628 0.0)) @x665 $x629) $x728)))
 (let ((?x611 (+ ?x391 (* (- 1.0) (to_real ?x373)))))
 (let (($x633 (<= ?x611 0.0)))
 (let (($x634 (= 0.0 ?x611)))
 (let ((@x657 (symm (commutativity (= $x634 (= ?x611 0.0))) (= (= ?x611 0.0) $x634))))
 (let ((@x688 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x634) $x633)) (mp ((_ th-lemma arith) (= ?x611 0.0)) @x657 $x634) $x633)))
 (let ((@x689 ((_ th-lemma arith) @x688 @x653 @x426 (unit-resolution @x153 (mp ((_ th-lemma arith) (= ?x626 0.0)) @x651 $x620) $x618) (hypothesis (not $x757)) @x178 false)))
 (let ((@x159 (lemma @x689 $x757)))
 (let (($x516 (>= ?x590 0.0)))
 (let (($x888 (not $x516)))
 (let (($x776 (= 0.0 ?x590)))
 (let (($x897 (not $x776)))
 (let ((@x899 (monotonicity (symm (commutativity (= $x776 $x507)) (= $x507 $x776)) (= $x547 $x897))))
 (let (($x194 (= ?x460 0.0)))
 (let ((@x222 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x194 (not $x757) (not $x771))) @x159 @x205 $x194)))
 (let (($x198 (or (not $x194) $x573)))
 (let ((@x197 (unit-resolution ((_ th-lemma arith) $x198) (hypothesis $x623) (hypothesis $x194) false)))
 (let ((@x892 (unit-resolution (and-elim @x504 $x577) (unit-resolution (lemma @x197 $x198) @x222 $x573) $x547)))
 (let (($x777 (<= ?x590 0.0)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith) (or (not $x604) $x777 (not $x758) (not $x133) (not $x678))) @x653 @x715 (hypothesis (not $x777)) @x259 @x276 false)))
 (let ((@x901 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x776 (not $x777) $x888)) (lemma @x277 $x777) (mp @x892 @x899 $x897) $x888)))
 (let (($x347 (not $x133)))
 (let (($x885 (not $x618)))
 (let (($x455 (not $x771)))
 (let (($x646 (not $x757)))
 (let (($x351 (not $x604)))
 (let (($x134 (not $x678)))
 (let (($x350 (not $x758)))
 (let ((@x907 (unit-resolution ((_ th-lemma arith) (or $x350 $x134 $x516 $x351 $x646 $x884 $x455 $x885 $x347)) @x653 @x715 @x901 @x159 @x205 @x259 @x276 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x179 $x684)) (hypothesis $x620) $x684) (unit-resolution @x153 (hypothesis $x620) $x618) false)))
 (let ((@x427 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x620 $x884 $x885)) (lemma @x907 $x179) (or $x884 $x885))))
 ((_ th-lemma arith) (unit-resolution @x427 @x207 $x884) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x540)) @x311 $x540) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       108
 :arith-eq-adapter                109
 :arith-bound-propagations-cheap  113
 :arith-bound-propagations-lp     43
 :arith-conflicts                 108
 :arith-diseq                     163
 :arith-gcd-calls                 7
 :arith-grobner-calls             7
 :arith-grobner-conflicts         3
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 15
 :arith-lower                     153
 :arith-make-feasible             130
 :arith-max-columns               102
 :arith-max-rows                  42
 :arith-nla-explanations          277
 :arith-nla-lemmas                103
 :arith-patches                   7
 :arith-patches-success           7
 :arith-propagations              113
 :arith-upper                     141
 :conflicts                       15
 :decisions                       248
 :del-clause                      420
 :final-checks                    54
 :max-memory                      5.64
 :memory                          3.18
 :minimized-lits                  2
 :mk-bool-var                     574
 :mk-clause                       696
 :num-allocs                      4641815
 :num-checks                      1
 :propagations                    367
 :rlimit-count                    10026
 :time                            0.04
 :total-time                      0.05)
