unsat
((set-logic NIA)
(proof
(let (($x55 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x45 ?x45 y00 y00)))
 (let ((?x46 (* ?x45 ?x45 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x48 (+ ?x43 ?x44 ?x46 ?x47)))
 (let ((?x49 (- ?x48 ?x46)))
 (let ((?x50 (- ?x49 ?x47)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x53)))))))))))))))) :qid k!29))
 ))
 (let (($x134 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x135 (lambda ((q Int) (r Int) (y Int) )(let ((?x45 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x45 ?x45 y00 y00)))
 (let ((?x46 (* ?x45 ?x45 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x48 (+ ?x43 ?x44 ?x46 ?x47)))
 (let ((?x49 (- ?x48 ?x46)))
 (let ((?x50 (- ?x49 ?x47)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x54 (and $x33 $x41 $x53)))
 (let (($x91 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x150 (= (+ (* (- 1) y00) y) 0)))
 (let (($x122 (and $x150 $x91 false)))
 (let ((?x60 (* (- 1) y00)))
 (let ((?x99 (+ r ?x60)))
 (let ((?x142 (+ 1 q)))
 (let ((?x172 (* y00 y00 ?x142 ?x142 ?x99 ?x99)))
 (let ((?x289 (+ ?x172 (* (- 1) ?x172))))
 (let ((@x204 (rewrite (= ?x45 ?x99))))
 (let ((@x154 (rewrite (= ?x42 ?x142))))
 (let ((@x294 (monotonicity @x154 @x154 @x204 @x204 (= ?x47 (* ?x142 ?x142 ?x99 ?x99 y00 y00)))))
 (let ((@x296 (trans @x294 (rewrite (= (* ?x142 ?x142 ?x99 ?x99 y00 y00) ?x172)) (= ?x47 ?x172))))
 (let ((?x212 (* y00 y00 ?x99 ?x99)))
 (let ((?x297 (+ ?x212 ?x172)))
 (let ((?x319 (+ ?x297 (* (- 1) ?x212))))
 (let ((@x114 (trans (monotonicity @x204 @x204 (= ?x46 (* ?x99 ?x99 y00 y00))) (rewrite (= (* ?x99 ?x99 y00 y00) ?x212)) (= ?x46 ?x212))))
 (let ((?x158 (* y00 y00 y00 y00 ?x142 ?x142 ?x142)))
 (let ((?x160 (* (- 1) ?x158)))
 (let ((?x231 (+ ?x160 ?x158 ?x212 ?x172)))
 (let ((@x79 (monotonicity @x154 @x154 @x154 (= ?x44 (* ?x142 ?x142 ?x142 y00 y00 y00 y00)))))
 (let ((@x96 (trans @x79 (rewrite (= (* ?x142 ?x142 ?x142 y00 y00 y00 y00) ?x158)) (= ?x44 ?x158))))
 (let ((@x157 (monotonicity (rewrite (= ?x28 (- 1))) @x154 @x154 @x154 (= ?x43 (* (- 1) ?x142 ?x142 ?x142 y00 y00 y00 y00)))))
 (let ((@x269 (trans @x157 (rewrite (= (* (- 1) ?x142 ?x142 ?x142 y00 y00 y00 y00) ?x160)) (= ?x43 ?x160))))
 (let ((@x307 (trans (monotonicity @x269 @x96 @x114 @x296 (= ?x48 ?x231)) (rewrite (= ?x231 ?x297)) (= ?x48 ?x297))))
 (let ((@x247 (trans (monotonicity @x307 @x114 (= ?x49 (- ?x297 ?x212))) (rewrite (= (- ?x297 ?x212) ?x319)) (= ?x49 ?x319))))
 (let ((@x314 (monotonicity (trans @x247 (rewrite (= ?x319 ?x172)) (= ?x49 ?x172)) @x296 (= ?x50 (- ?x172 ?x172)))))
 (let ((@x318 (trans (trans @x314 (rewrite (= (- ?x172 ?x172) ?x289)) (= ?x50 ?x289)) (rewrite (= ?x289 0)) $x51)))
 (let ((@x200 (trans (monotonicity @x318 (= $x51 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x51 true))))
 (let ((@x306 (trans (monotonicity @x200 (= $x52 (not true))) (rewrite (= (not true) false)) (= $x52 false))))
 (let ((@x121 (trans (monotonicity @x306 (= $x53 (or false))) (rewrite (= (or false) false)) (= $x53 false))))
 (let ((@x126 (monotonicity (rewrite (= $x33 $x150)) (rewrite (= $x41 $x91)) @x121 (= $x54 $x122))))
 (trans @x126 (rewrite (= $x122 false)) (= $x54 false))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x195 (trans (quant-intro (proof-bind ?x135) (= $x55 $x134)) (elim-unused (= $x134 false)) (= $x55 false))))
 (let ((@x56 (asserted $x55)))
 (mp @x56 @x195 false))))))))

(:max-memory   3.39
 :memory       3.09
 :mk-bool-var  5
 :num-allocs   918323
 :rlimit-count 287
 :time         0.01
 :total-time   0.01)
