unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x282 (* n!0 n!0)))
 (let ((?x327 (* 3 ?x282)))
 (let ((?x454 (* (- 1) k!2)))
 (let ((?x225 (+ (* 3 n!0) ?x454 ?x327)))
 (let (($x355 (<= ?x225 (- 1))))
 (let (($x237 (= ?x225 (- 1))))
 (let ((?x325 (+ c!3 k!2)))
 (let ((?x419 (+ m!1 k!2)))
 (let ((?x324 (+ 6 m!1)))
 (let ((?x323 (+ 1 n!0)))
 (let ((?x378 (* k!2 k!2 k!2 k!2 k!2)))
 (let ((?x285 (* 2 (* c!3 k!2 k!2 k!2 k!2))))
 (let ((?x298 (* c!3 c!3 k!2 k!2 k!2)))
 (let ((?x356 (+ (* m!1 m!1 m!1 c!3 c!3) (* 3 (* m!1 m!1 k!2 k!2 k!2)) (* 6 (* m!1 m!1 c!3 k!2 k!2)) (* 3 (* m!1 m!1 c!3 c!3 k!2)) (* 3 (* m!1 k!2 k!2 k!2 k!2)) (* 2 (* m!1 m!1 m!1 c!3 k!2)) (* m!1 m!1 m!1 k!2 k!2) (* ?x323 ?x419 ?x419 ?x419 ?x325 ?x325 ?x325) ?x298 (* ?x323 ?x323 ?x419 ?x325 ?x325 ?x325) (* 3 (* m!1 c!3 c!3 k!2 k!2)) ?x285 ?x378 (* ?x323 ?x323 ?x323 ?x324 ?x324 ?x324 ?x419 ?x419 ?x325 ?x325) (* 6 (* m!1 c!3 k!2 k!2 k!2)))))
 (let ((?x126 (* ?x356 (+ 7 (* 9 n!0) (* (- 1) m!1) ?x454 ?x327))))
 (let (($x264 (= ?x126 0)))
 (let (($x127 (not $x264)))
 (let ((?x328 (* 9 n!0)))
 (let ((?x141 (* k!2 k!2)))
 (let ((?x434 (+ ?x141 ?x328 (* (- 18) c!3) (* (- 5) k!2) (* (- 9) (* n!0 c!3)))))
 (let ((?x299 (* (- 1) m!1)))
 (let ((?x357 (+ (* 6 n!0) ?x299)))
 (let (($x280 (= ?x357 (- 6))))
 (let (($x125 (and $x280 (= ?x434 (- 4)) (= (+ (* n!0 k!2) (* 2 n!0) (* (- 3) c!3) ?x454) (- 1)) $x237 $x127)))
 (let ((?x284 (+ k!2 m!1)))
 (let ((?x465 (+ (* ?x323 ?x323 ?x323 ?x324 ?x324 ?x324 ?x284 ?x284 ?x325 ?x325) (* ?x323 ?x284 ?x284 ?x284 ?x325 ?x325 ?x325) (* ?x323 ?x323 ?x284 ?x325 ?x325 ?x325) ?x285 ?x378 (* 3 (* c!3 c!3 k!2 k!2 m!1)) (* 6 (* c!3 k!2 k!2 k!2 m!1)) (* 3 (* k!2 k!2 k!2 k!2 m!1)) (* 3 (* c!3 c!3 k!2 m!1 m!1)) (* 6 (* c!3 k!2 k!2 m!1 m!1)) (* 3 (* k!2 k!2 k!2 m!1 m!1)) (* c!3 c!3 m!1 m!1 m!1) (* 2 (* c!3 k!2 m!1 m!1 m!1)) (* k!2 k!2 m!1 m!1 m!1) ?x298)))
 (let (($x319 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x276 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x141) (* 9 (* c!3 n!0)))))
 (let (($x232 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x276 4) $x319 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x282)) 1) (not (= (* ?x465 (+ 7 ?x454 ?x299 ?x328 ?x327)) 0)))))
 (let (($x196 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x265 (* n n)))
 (let ((?x266 (* 3 ?x265)))
 (let ((?x48 (* 9 n)))
 (let ((?x350 (* (- 1) m)))
 (let ((?x234 (* (- 1) k)))
 (let ((?x491 (* c c k k k)))
 (let ((?x451 (* k k m m m)))
 (let ((?x405 (* 2 (* c k m m m))))
 (let ((?x448 (* c c m m m)))
 (let ((?x406 (* 3 (* k k k m m))))
 (let ((?x407 (* 6 (* c k k m m))))
 (let ((?x408 (* 3 (* c c k m m))))
 (let ((?x409 (* 3 (* k k k k m))))
 (let ((?x410 (* 6 (* c k k k m))))
 (let ((?x411 (* 3 (* c c k k m))))
 (let ((?x423 (* k k k k k)))
 (let ((?x412 (* 2 (* c k k k k))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x302 (+ 1 n)))
 (let ((?x198 (* ?x302 ?x302 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x176 (* ?x302 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x387 (+ 6 m)))
 (let ((?x155 (* ?x302 ?x302 ?x302 ?x387 ?x387 ?x387 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x252 (+ ?x155 ?x176 ?x198 ?x412 ?x423 ?x411 ?x410 ?x409 ?x408 ?x407 ?x406 ?x448 ?x405 ?x451 ?x491)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) ?x265)) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x208 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x204 (= ?x208 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x204 $x256 $x294 (not (= (* ?x252 (+ 7 ?x234 ?x350 ?x48 ?x266)) 0))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x233 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x350 (* (- 1) m)))
 (let ((?x234 (* (- 1) k)))
 (let ((?x139 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x234 ?x350 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x302 (+ 1 n)))
 (let ((?x198 (* ?x302 ?x302 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x176 (* ?x302 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x387 (+ 6 m)))
 (let ((?x155 (* ?x302 ?x302 ?x302 ?x387 ?x387 ?x387 ?x71 ?x71 ?x75 ?x75)))
 (let (($x231 (not (= (* (+ ?x155 ?x176 (* ?x71 ?x71 ?x71 ?x75 ?x75) ?x198) ?x139) 0))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x104 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= ?x104 (- 4)) (= (+ (* (- 3) c) (* n k) ?x234 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x234 ?x65) (- 1)) $x231))))))))))))))))) :qid k!34))
 ))
 (let ((?x401 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x265 (* n n)))
 (let ((?x266 (* 3 ?x265)))
 (let ((?x48 (* 9 n)))
 (let ((?x350 (* (- 1) m)))
 (let ((?x234 (* (- 1) k)))
 (let ((?x491 (* c c k k k)))
 (let ((?x451 (* k k m m m)))
 (let ((?x405 (* 2 (* c k m m m))))
 (let ((?x448 (* c c m m m)))
 (let ((?x406 (* 3 (* k k k m m))))
 (let ((?x407 (* 6 (* c k k m m))))
 (let ((?x408 (* 3 (* c c k m m))))
 (let ((?x409 (* 3 (* k k k k m))))
 (let ((?x410 (* 6 (* c k k k m))))
 (let ((?x411 (* 3 (* c c k k m))))
 (let ((?x423 (* k k k k k)))
 (let ((?x412 (* 2 (* c k k k k))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x302 (+ 1 n)))
 (let ((?x198 (* ?x302 ?x302 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x176 (* ?x302 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x387 (+ 6 m)))
 (let ((?x155 (* ?x302 ?x302 ?x302 ?x387 ?x387 ?x387 ?x71 ?x71 ?x75 ?x75)))
 (let ((?x252 (+ ?x155 ?x176 ?x198 ?x412 ?x423 ?x411 ?x410 ?x409 ?x408 ?x407 ?x406 ?x448 ?x405 ?x451 ?x491)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) ?x265)) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x208 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x204 (= ?x208 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x226 (and $x120 $x204 $x256 $x294 (not (= (* ?x252 (+ 7 ?x234 ?x350 ?x48 ?x266)) 0)))))
 (let ((?x200 (* (+ ?x155 ?x176 (* ?x71 ?x71 ?x71 ?x75 ?x75) ?x198) (+ 4 (* 3 (* ?x302 ?x302)) ?x234 ?x350 (* 3 n)))))
 (let ((?x49 (* k k)))
 (let ((?x104 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x236 (and $x120 (= ?x104 (- 4)) (= (+ (* (- 3) c) (* n k) ?x234 (* 2 n)) (- 1)) (= (+ ?x266 ?x234 (* 3 n)) (- 1)) (not (= ?x200 0)))))
 (rewrite (= $x236 $x226))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x76 (+ m 6)))
 (let ((?x81 (+ (* ?x75 ?x75 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x68) (* ?x75 ?x75 ?x71 ?x71 ?x71) (* ?x75 ?x75 ?x75 ?x71 ?x68 ?x68))))
 (let (($x83 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x81) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x83)))))))))))))))) :qid k!34))
 ))
 (let ((?x218 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x350 (* (- 1) m)))
 (let ((?x234 (* (- 1) k)))
 (let ((?x139 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x234 ?x350 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x302 (+ 1 n)))
 (let ((?x198 (* ?x302 ?x302 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x176 (* ?x302 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x387 (+ 6 m)))
 (let ((?x155 (* ?x302 ?x302 ?x302 ?x387 ?x387 ?x387 ?x71 ?x71 ?x75 ?x75)))
 (let (($x231 (not (= (* (+ ?x155 ?x176 (* ?x71 ?x71 ?x71 ?x75 ?x75) ?x198) ?x139) 0))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x104 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x236 (and $x120 (= ?x104 (- 4)) (= (+ (* (- 3) c) (* n k) ?x234 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x234 ?x65) (- 1)) $x231)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x81 (+ (* ?x75 ?x75 ?x71 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x68) (* ?x75 ?x75 ?x71 ?x71 ?x71) (* ?x75 ?x75 ?x75 ?x71 ?x68 ?x68))))
 (let (($x83 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x81) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x83)))))
 (rewrite (= $x86 $x236)))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x352 (mp (mp @x88 (quant-intro (proof-bind ?x218) (= $x87 $x233)) $x233) (rewrite (= $x233 $x233)) $x233)))
 (let ((@x228 (mp~ (mp @x352 (quant-intro (proof-bind ?x401) (= $x233 $x196)) $x196) (sk (~ $x196 $x232)) $x232)))
 (let ((@x263 (mp @x228 (rewrite (= $x232 $x125)) $x125)))
 (let ((@x249 (and-elim @x263 $x237)))
 (let ((@x160 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x237) $x355)) @x249 $x355)))
 (let (($x445 (<= ?x357 (- 6))))
 (let ((@x317 (and-elim @x263 $x280)))
 (let ((@x106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x445)) @x317 $x445)))
 (let (($x472 (>= ?x225 (- 1))))
 (let ((@x108 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x237) $x472)) @x249 $x472)))
 (let (($x177 (>= ?x357 (- 6))))
 (let ((@x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x177)) @x317 $x177)))
 (let (($x279 (not (<= ?x126 0))))
 (let (($x467 (>= ?x126 0)))
 (let ((@x441 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x467)) @x240 @x108 @x106 @x160 false) $x467)))
 (let ((@x416 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x264 $x279 (not $x467))) (and-elim @x263 $x127) (or $x279 (not $x467)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x416 @x441 $x279) @x240 @x108 @x106 @x160 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        23
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             227
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    20
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                19.70
 :memory                    19.12
 :mk-bool-var               28
 :mk-clause                 24
 :num-allocs                744808
 :num-checks                1
 :propagations              12
 :rlimit-count              22307
 :time                      0.02
 :total-time                0.03)
