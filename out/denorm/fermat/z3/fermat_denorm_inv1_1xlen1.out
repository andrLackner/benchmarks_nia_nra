unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x346 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x285 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) (* (- 4) r!2) (* 2 v!0) (* (- 1) (* v!0 v!0)) ?x346)))
 (let (($x145 (<= ?x285 0)))
 (let (($x387 (= ?x285 0)))
 (let ((?x332 (* (- 1) ?x346)))
 (let ((?x322 (* v!0 v!0)))
 (let ((?x254 (* (- 2) v!0)))
 (let ((?x262 (* 4 r!2)))
 (let ((?x385 (* 2 u!1)))
 (let ((?x186 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x110 (* (- 2) u00)))
 (let ((?x94 (* (- 4) r00)))
 (let ((?x208 (+ 2 v!0)))
 (let ((?x199 (* ?x208 ?x208 (+ ?x94 ?x110 ?x41 ?x46 ?x186 ?x385 ?x262 ?x254 ?x322 ?x332))))
 (let (($x114 (= ?x199 0)))
 (let ((?x139 (* u!1 u!1 v!0 v!0)))
 (let ((?x260 (+ (* 2 (* u00 v!0 v!0)) (* (- 1) (* u00 u00 v!0 v!0)) ?x139 (* 4 (* r00 v!0 v!0)) (* 2 (* v!0 v!0 v!0)) (* (- 2) (* u!1 v!0 v!0)) (* (- 4) (* r!2 v!0 v!0)) (* (- 1) (* v!0 v!0 v!0 v!0)) (* v00 v00 v!0 v!0) (* (- 2) (* v00 v!0 v!0)))))
 (let (($x261 (= ?x260 0)))
 (let (($x292 (not $x261)))
 (let (($x220 (or $x292 (not $x114))))
 (let (($x119 (and $x387 $x220)))
 (let ((?x118 (+ ?x262 ?x385 ?x254 ?x94 ?x110 ?x41 ?x332 ?x322 ?x46 ?x186)))
 (let ((?x306 (* v!0 v!0 v!0 v!0)))
 (let ((?x246 (+ (* 4 (* r!2 v!0 v!0)) (* 2 (* u!1 v!0 v!0)) (* (- 2) (* v!0 v!0 v!0)) (* (- 4) (* v!0 v!0 r00)) (* (- 2) (* v!0 v!0 u00)) (* 2 (* v!0 v!0 v00)) (* (- 1) ?x139) ?x306 (* v!0 v!0 u00 u00) (* (- 1) (* v!0 v!0 v00 v00)))))
 (let (($x429 (and (= ?x118 0) (or (not (= ?x246 0)) (not (= (* ?x208 ?x208 ?x118) 0))))))
 (let (($x211 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x186 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x164 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x110 (* (- 2) u00)))
 (let ((?x94 (* (- 4) r00)))
 (let ((?x140 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x192 (+ ?x28 ?x36 ?x140 ?x94 ?x110 ?x41 ?x164 ?x45 ?x46 ?x186)))
 (let ((?x204 (+ 2 v)))
 (let ((?x437 (+ (* 4 (* r v v)) (* 2 (* u v v)) (* (- 2) (* v v v)) (* (- 4) (* v v r00)) (* (- 2) (* v v u00)) (* 2 (* v v v00)) (* (- 1) (* u u v v)) (* v v v v) (* v v u00 u00) (* (- 1) (* v v v00 v00)))))
 (let (($x99 (not (= ?x437 0))))
 (let (($x197 (= ?x192 0)))
 (and $x197 (or $x99 (not (= (* ?x204 ?x204 ?x192) 0))))))))))))))))))))) :qid k!28))
 ))
 (let (($x128 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x186 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x140 (* (- 2) v)))
 (let ((?x110 (* (- 2) u00)))
 (let ((?x94 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x304 (+ 4 ?x28 (* 6 u) ?x94 ?x110 ?x140 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x186)))
 (let ((?x43 (* u u)))
 (let ((?x164 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x334 (+ (- 4) ?x28 (* (- 6) v) ?x94 ?x110 ?x36 ?x41 ?x164 (* (+ 2 v) (+ 2 v)) ?x46 ?x186)))
 (let ((?x204 (+ 2 v)))
 (let (($x440 (or (not (= (* ?x204 ?x204 ?x334) 0)) (not (= (* ?x304 v v) 0)))))
 (and (= (+ ?x28 ?x94 ?x110 ?x36 ?x140 ?x41 ?x164 ?x45 ?x46 ?x186) 0) $x440))))))))))))))))) :qid k!28))
 ))
 (let ((?x157 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x186 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x164 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x110 (* (- 2) u00)))
 (let ((?x94 (* (- 4) r00)))
 (let ((?x140 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x192 (+ ?x28 ?x36 ?x140 ?x94 ?x110 ?x41 ?x164 ?x45 ?x46 ?x186)))
 (let ((?x204 (+ 2 v)))
 (let ((?x437 (+ (* 4 (* r v v)) (* 2 (* u v v)) (* (- 2) (* v v v)) (* (- 4) (* v v r00)) (* (- 2) (* v v u00)) (* 2 (* v v v00)) (* (- 1) (* u u v v)) (* v v v v) (* v v u00 u00) (* (- 1) (* v v v00 v00)))))
 (let (($x99 (not (= ?x437 0))))
 (let (($x197 (= ?x192 0)))
 (let (($x243 (and $x197 (or $x99 (not (= (* ?x204 ?x204 ?x192) 0))))))
 (let ((?x304 (+ 4 ?x28 (* 6 u) ?x94 ?x110 ?x140 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x186)))
 (let ((?x334 (+ (- 4) ?x28 (* (- 6) v) ?x94 ?x110 ?x36 ?x41 ?x164 (* ?x204 ?x204) ?x46 ?x186)))
 (let (($x440 (or (not (= (* ?x204 ?x204 ?x334) 0)) (not (= (* ?x304 v v) 0)))))
 (let (($x344 (and (= (+ ?x28 ?x94 ?x110 ?x36 ?x140 ?x41 ?x164 ?x45 ?x46 ?x186) 0) $x440)))
 (rewrite (= $x344 $x243)))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x74 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x79 (+ (- (+ (- ?x74 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x57 (+ v 2)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x64 (- (+ (- (+ (- ?x56 (* 2 ?x57)) ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48)))
 (let (($x84 (or (not (= (* ?x64 ?x57 ?x57) 0)) (not (= (* (- ?x79 ?x48) v v) 0)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) $x84))))))))))))))) :qid k!28))
 ))
 (let ((?x316 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x186 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x140 (* (- 2) v)))
 (let ((?x110 (* (- 2) u00)))
 (let ((?x94 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x304 (+ 4 ?x28 (* 6 u) ?x94 ?x110 ?x140 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x186)))
 (let ((?x43 (* u u)))
 (let ((?x164 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x334 (+ (- 4) ?x28 (* (- 6) v) ?x94 ?x110 ?x36 ?x41 ?x164 (* (+ 2 v) (+ 2 v)) ?x46 ?x186)))
 (let ((?x204 (+ 2 v)))
 (let (($x440 (or (not (= (* ?x204 ?x204 ?x334) 0)) (not (= (* ?x304 v v) 0)))))
 (let (($x344 (and (= (+ ?x28 ?x94 ?x110 ?x36 ?x140 ?x41 ?x164 ?x45 ?x46 ?x186) 0) $x440)))
 (let ((?x38 (* 2 v)))
 (let ((?x74 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x79 (+ (- (+ (- ?x74 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x57 (+ v 2)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x64 (- (+ (- (+ (- ?x56 (* 2 ?x57)) ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48)))
 (let (($x84 (or (not (= (* ?x64 ?x57 ?x57) 0)) (not (= (* (- ?x79 ?x48) v v) 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x85 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x84)))
 (rewrite (= $x85 $x344)))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x331 (mp (mp @x87 (quant-intro (proof-bind ?x316) (= $x86 $x128)) $x128) (rewrite (= $x128 $x128)) $x128)))
 (let ((@x155 (mp~ (mp @x331 (quant-intro (proof-bind ?x157) (= $x128 $x211)) $x211) (sk (~ $x211 $x429)) $x429)))
 (let ((@x188 (mp @x155 (rewrite (= $x429 $x119)) $x119)))
 (let ((@x112 (and-elim @x188 $x387)))
 (let ((@x180 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x145)) @x112 $x145)))
 (let (($x221 (>= ?x285 0)))
 (let ((@x185 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x221)) @x112 $x221)))
 (let (($x249 (not (<= ?x260 0))))
 (let (($x337 (>= ?x199 0)))
 (let (($x248 (<= ?x199 0)))
 (let ((@x269 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x114 (not $x248) (not $x337))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x248)) @x180 @x185 false) $x248) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x337)) @x180 @x185 false) $x337) $x114)))
 (let (($x358 (>= ?x260 0)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x261 $x249 (not $x358))) (lemma ((_ th-lemma arith) (hypothesis (not $x358)) @x185 @x180 false) $x358) (unit-resolution (and-elim @x188 $x220) @x269 $x292) $x249)))
 ((_ th-lemma arith) @x250 @x185 @x180 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        4
 :arith-assert-lower        40
 :arith-assert-upper        15
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           4
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-max-min             246
 :arith-nonlinear-bounds    28
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             5
 :arith-patches_succ        5
 :arith-pivots              2
 :arith-pseudo-nonlinear    4
 :arith-row-summations      1
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 5
 :del-clause                3
 :final-checks              6
 :max-memory                3.58
 :memory                    3.07
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1124855
 :num-checks                1
 :propagations              13
 :rlimit-count              3019
 :time                      0.01
 :total-time                0.01)
