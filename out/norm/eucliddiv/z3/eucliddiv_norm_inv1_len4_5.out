unsat
((set-logic NIA)
(proof
(let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x44 y00 y00 y00)))
 (let ((?x50 (* ?x44 y00 y00)))
 (let ((?x46 (* y00 y00)))
 (let ((?x49 (* ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x47 (- ?x43 ?x45)))
 (let ((?x48 (- ?x47 ?x46)))
 (let ((?x51 (+ ?x48 ?x49 ?x46 ?x50)))
 (let ((?x52 (- ?x51 ?x50)))
 (let ((?x53 (+ ?x52 ?x45)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x56))))))))))))))))))) :qid k!29))
 ))
 (let (($x293 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x294 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x45 (* ?x42 ?x42 ?x42 ?x44 y00 y00 y00)))
 (let ((?x50 (* ?x44 y00 y00)))
 (let ((?x46 (* y00 y00)))
 (let ((?x49 (* ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x47 (- ?x43 ?x45)))
 (let ((?x48 (- ?x47 ?x46)))
 (let ((?x51 (+ ?x48 ?x49 ?x46 ?x50)))
 (let ((?x52 (- ?x51 ?x50)))
 (let ((?x53 (+ ?x52 ?x45)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x57 (and $x33 $x41 $x56)))
 (let (($x118 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x109 (= (+ (* (- 1) y00) y) 0)))
 (let (($x284 (and $x109 $x118 false)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x88 (+ r ?x63)))
 (let ((?x129 (+ 1 q)))
 (let ((?x145 (* y00 y00 y00 ?x129 ?x129 ?x129 ?x88)))
 (let ((?x121 (* (- 1) ?x145)))
 (let ((?x236 (+ ?x121 ?x145)))
 (let ((@x141 (rewrite (= ?x44 ?x88))))
 (let ((@x111 (rewrite (= ?x42 ?x129))))
 (let ((@x143 (monotonicity @x111 @x111 @x111 @x141 (= ?x45 (* ?x129 ?x129 ?x129 ?x88 y00 y00 y00)))))
 (let ((@x150 (trans @x143 (rewrite (= (* ?x129 ?x129 ?x129 ?x88 y00 y00 y00) ?x145)) (= ?x45 ?x145))))
 (let ((?x199 (* y00 y00 ?x88)))
 (let ((?x280 (+ ?x121 ?x199)))
 (let ((?x84 (+ ?x280 (* (- 1) ?x199))))
 (let ((@x65 (trans (monotonicity @x141 (= ?x50 (* ?x88 y00 y00))) (rewrite (= (* ?x88 y00 y00) ?x199)) (= ?x50 ?x199))))
 (let ((?x113 (* y00 y00 y00 y00 ?x129 ?x129)))
 (let ((?x161 (* (- 1) ?x46)))
 (let ((?x76 (* (- 1) ?x113)))
 (let ((?x254 (+ ?x76 ?x121 ?x161)))
 (let ((?x67 (+ ?x254 ?x113 ?x46 ?x199)))
 (let ((@x181 (monotonicity @x111 @x111 (= ?x49 (* ?x129 ?x129 y00 y00 y00 y00)))))
 (let ((@x185 (trans @x181 (rewrite (= (* ?x129 ?x129 y00 y00 y00 y00) ?x113)) (= ?x49 ?x113))))
 (let ((@x133 (monotonicity (rewrite (= ?x28 (- 1))) @x111 @x111 (= ?x43 (* (- 1) ?x129 ?x129 y00 y00 y00 y00)))))
 (let ((@x116 (trans @x133 (rewrite (= (* (- 1) ?x129 ?x129 y00 y00 y00 y00) ?x76)) (= ?x43 ?x76))))
 (let ((@x159 (trans (monotonicity @x116 @x150 (= ?x47 (- ?x76 ?x145))) (rewrite (= (- ?x76 ?x145) (+ ?x76 ?x121))) (= ?x47 (+ ?x76 ?x121)))))
 (let ((@x96 (trans (monotonicity @x159 (= ?x48 (- (+ ?x76 ?x121) ?x46))) (rewrite (= (- (+ ?x76 ?x121) ?x46) (+ (+ ?x76 ?x121) ?x161))) (= ?x48 (+ (+ ?x76 ?x121) ?x161)))))
 (let ((@x178 (trans @x96 (rewrite (= (+ (+ ?x76 ?x121) ?x161) ?x254)) (= ?x48 ?x254))))
 (let ((@x287 (trans (monotonicity @x178 @x185 @x65 (= ?x51 ?x67)) (rewrite (= ?x67 ?x280)) (= ?x51 ?x280))))
 (let ((@x265 (trans (monotonicity @x287 @x65 (= ?x52 (- ?x280 ?x199))) (rewrite (= (- ?x280 ?x199) ?x84)) (= ?x52 ?x84))))
 (let ((@x237 (monotonicity (trans @x265 (rewrite (= ?x84 ?x121)) (= ?x52 ?x121)) @x150 (= ?x53 ?x236))))
 (let ((@x101 (monotonicity (trans @x237 (rewrite (= ?x236 0)) $x54) (= $x54 (= 0 0)))))
 (let ((@x125 (monotonicity (trans @x101 (rewrite (= (= 0 0) true)) (= $x54 true)) (= $x55 (not true)))))
 (let ((@x261 (monotonicity (trans @x125 (rewrite (= (not true) false)) (= $x55 false)) (= $x56 (or false)))))
 (let ((@x286 (monotonicity (rewrite (= $x33 $x109)) (rewrite (= $x41 $x118)) (trans @x261 (rewrite (= (or false) false)) (= $x56 false)) (= $x57 $x284))))
 (trans @x286 (rewrite (= $x284 false)) (= $x57 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x220 (trans (quant-intro (proof-bind ?x294) (= $x58 $x293)) (elim-unused (= $x293 false)) (= $x58 false))))
 (let ((@x59 (asserted $x58)))
 (mp @x59 @x220 false))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   918610
 :rlimit-count 273
 :time         0.01
 :total-time   0.01)
