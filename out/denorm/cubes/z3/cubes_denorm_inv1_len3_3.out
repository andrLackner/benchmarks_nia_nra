unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x288 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x297 (<= ?x288 (- 6))))
 (let (($x513 (= ?x288 (- 6))))
 (let ((?x230 (+ c!3 k!2)))
 (let ((?x235 (+ 6 m!1)))
 (let ((?x158 (+ 1 n!0)))
 (let ((?x624 (* n!0 ?x158 ?x158 ?x235 ?x235 ?x235 ?x230 ?x230)))
 (let ((?x117 (+ k!2 m!1)))
 (let ((?x607 (* ?x158 ?x158 ?x235 ?x117 ?x117 ?x230 ?x230)))
 (let ((?x458 (* m!1 ?x158 ?x158 ?x235 ?x235 ?x235 ?x230 ?x230)))
 (let ((?x586 (+ (* 6 (* k!2 k!2 k!2)) (* (- 3) (* c!3 c!3 k!2 m!1)) (* 6 (* c!3 c!3 c!3)) (* 18 (* c!3 k!2 k!2)) (* 6 (* n!0 ?x158 ?x158 ?x235 ?x117 ?x117 ?x230 ?x230)) (* (- 1) (* m!1 ?x158 ?x158 ?x235 ?x117 ?x117 ?x230 ?x230)) (* (- 6) (* ?x158 ?x158 ?x235 ?x235 ?x235 ?x230 ?x230)) ?x458 (* 18 (* c!3 c!3 k!2)) (* 6 (* c!3 c!3 c!3 n!0)) (* (- 1) (* k!2 k!2 k!2 m!1)) (* 18 (* c!3 n!0 k!2 k!2)) (* 6 ?x607) (* 6 (* n!0 k!2 k!2 k!2)) (* 18 (* c!3 c!3 n!0 k!2)) (* (- 6) ?x624) (* (- 3) (* c!3 k!2 k!2 m!1)) (* (- 1) (* c!3 c!3 c!3 m!1)))))
 (let (($x581 (= ?x586 0)))
 (let (($x639 (not $x581)))
 (let (($x598 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x222 (= (+ (* 3 c!3) (* (- 2) n!0) k!2 (* (- 1) (* n!0 k!2))) 1)))
 (let ((?x554 (* 5 k!2)))
 (let ((?x175 (* 9 (* c!3 n!0))))
 (let ((?x504 (* (- 1) (* k!2 k!2))))
 (let ((?x295 (* (- 9) n!0)))
 (let ((?x284 (* 18 c!3)))
 (let (($x604 (and $x513 (= (+ ?x284 ?x295 ?x504 ?x175 ?x554) 4) $x222 $x598 $x639)))
 (let ((?x630 (* c!3 c!3 c!3 m!1)))
 (let ((?x358 (* m!1 ?x158 ?x158 ?x235 ?x117 ?x117 ?x230 ?x230)))
 (let ((?x585 (* k!2 k!2 k!2 m!1)))
 (let ((?x198 (+ (* 6 ?x624) (* 6 (* ?x158 ?x158 ?x235 ?x235 ?x235 ?x230 ?x230)) (* (- 1) ?x458) (* (- 6) ?x607) (* (- 6) (* c!3 c!3 c!3)) (* (- 18) (* c!3 c!3 k!2)) (* (- 18) (* c!3 k!2 k!2)) (* (- 6) (* k!2 k!2 k!2)) (* (- 6) (* k!2 k!2 k!2 n!0)) ?x585 (* (- 18) (* c!3 k!2 k!2 n!0)) (* 3 (* c!3 k!2 k!2 m!1)) (* (- 18) (* c!3 c!3 k!2 n!0)) ?x358 (* (- 6) (* n!0 ?x158 ?x158 ?x235 ?x117 ?x117 ?x230 ?x230)) (* 3 (* c!3 c!3 k!2 m!1)) (* (- 6) (* c!3 c!3 c!3 n!0)) ?x630)))
 (let (($x499 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x196 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x284 ?x554 ?x295 ?x504 ?x175) 4) $x499 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x198 0)))))
 (let (($x477 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x645 (* c c c m)))
 (let ((?x386 (* (- 6) (* c c c n))))
 (let ((?x381 (* 3 (* c c k m))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x384 (* (- 18) (* c c k n))))
 (let ((?x379 (* 3 (* c k k m))))
 (let ((?x382 (* (- 18) (* c k k n))))
 (let ((?x574 (* k k k m)))
 (let ((?x377 (* (- 6) (* k k k n))))
 (let ((?x378 (* (- 6) (* k k k))))
 (let ((?x373 (* (- 18) (* c k k))))
 (let ((?x376 (* (- 18) (* c c k))))
 (let ((?x374 (* (- 6) (* c c c))))
 (let ((?x249 (+ (* 6 (* n ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)) (* 6 (* ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)) (* (- 1) (* m ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)) (* (- 6) (* ?x317 ?x317 ?x363 ?x74 ?x74 ?x73 ?x73)) ?x374 ?x376 ?x373 ?x378 ?x377 ?x574 ?x382 ?x379 ?x384 (* m ?x317 ?x317 ?x363 ?x74 ?x74 ?x73 ?x73) (* (- 6) (* n ?x317 ?x317 ?x363 ?x74 ?x74 ?x73 ?x73)) ?x381 ?x386 ?x645)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 $x212 $x264 $x302 (not (= ?x249 0))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x169 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x315 (* ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)))
 (let ((?x323 (+ (* (- 1) (* ?x317 ?x317 ?x363 (+ k m) (+ k m) ?x73 ?x73)) ?x315 (* (- 1) (* ?x73 ?x73 ?x73)))))
 (let (($x282 (not (= (* (+ (- 6) m (* (- 6) n)) ?x323) 0))))
 (let (($x579 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x171 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x171 $x579 $x282))))))))))))))) :qid k!34))
 ))
 (let ((?x159 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x645 (* c c c m)))
 (let ((?x386 (* (- 6) (* c c c n))))
 (let ((?x381 (* 3 (* c c k m))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x384 (* (- 18) (* c c k n))))
 (let ((?x379 (* 3 (* c k k m))))
 (let ((?x382 (* (- 18) (* c k k n))))
 (let ((?x574 (* k k k m)))
 (let ((?x377 (* (- 6) (* k k k n))))
 (let ((?x378 (* (- 6) (* k k k))))
 (let ((?x373 (* (- 18) (* c k k))))
 (let ((?x376 (* (- 18) (* c c k))))
 (let ((?x374 (* (- 6) (* c c c))))
 (let ((?x249 (+ (* 6 (* n ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)) (* 6 (* ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)) (* (- 1) (* m ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)) (* (- 6) (* ?x317 ?x317 ?x363 ?x74 ?x74 ?x73 ?x73)) ?x374 ?x376 ?x373 ?x378 ?x377 ?x574 ?x382 ?x379 ?x384 (* m ?x317 ?x317 ?x363 ?x74 ?x74 ?x73 ?x73) (* (- 6) (* n ?x317 ?x317 ?x363 ?x74 ?x74 ?x73 ?x73)) ?x381 ?x386 ?x645)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x194 (and $x128 $x212 $x264 $x302 (not (= ?x249 0)))))
 (let ((?x315 (* ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)))
 (let ((?x323 (+ (* (- 1) (* ?x317 ?x317 ?x363 ?x74 ?x74 ?x73 ?x73)) ?x315 (* (- 1) (* ?x73 ?x73 ?x73)))))
 (let (($x282 (not (= (* (+ (- 6) m (* (- 6) n)) ?x323) 0))))
 (let (($x579 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x171 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x651 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x171 $x579 $x282)))
 (rewrite (= $x651 $x194))))))))))))))))))))))))))))))))))))
 ))
 (let (($x285 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x315 (* ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)))
 (let ((?x323 (+ (* (- 1) (* ?x317 ?x317 ?x363 (+ k m) (+ k m) ?x73 ?x73)) ?x315 (* (- 1) (* ?x73 ?x73 ?x73)))))
 (let (($x282 (not (= (* (+ (- 6) m (* (- 6) n)) ?x323) 0))))
 (let (($x579 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x622 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 (= ?x355 (- 4)) $x622 $x579 $x282))))))))))))) :qid k!34))
 ))
 (let ((?x170 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x315 (* ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)))
 (let ((?x323 (+ (* (- 1) (* ?x317 ?x317 ?x363 (+ k m) (+ k m) ?x73 ?x73)) ?x315 (* (- 1) (* ?x73 ?x73 ?x73)))))
 (let (($x282 (not (= (* (+ (- 6) m (* (- 6) n)) ?x323) 0))))
 (let (($x579 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x171 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x651 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x171 $x579 $x282)))
 (let (($x622 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x139 (and $x128 (= ?x355 (- 4)) $x622 $x579 $x282)))
 (rewrite (= $x139 $x651))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x79 (* ?x73 ?x73 ?x73)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x78 (+ (* (- 1) ?x73 ?x73 (+ k m) (+ k m) ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x75 ?x75 ?x69 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x78 ?x79))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x316 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x315 (* ?x317 ?x317 ?x363 ?x363 ?x363 ?x73 ?x73)))
 (let ((?x323 (+ (* (- 1) (* ?x317 ?x317 ?x363 (+ k m) (+ k m) ?x73 ?x73)) ?x315 (* (- 1) (* ?x73 ?x73 ?x73)))))
 (let (($x282 (not (= (* (+ (- 6) m (* (- 6) n)) ?x323) 0))))
 (let (($x579 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x622 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x139 (and $x128 (= ?x355 (- 4)) $x622 $x579 $x282)))
 (let ((?x79 (* ?x73 ?x73 ?x73)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x78 (+ (* (- 1) ?x73 ?x73 (+ k m) (+ k m) ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x75 ?x75 ?x69 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x78 ?x79))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x139)))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x167 (mp (mp @x87 (quant-intro (proof-bind ?x316) (= $x86 $x285)) $x285) (rewrite (= $x285 $x285)) $x285)))
 (let ((@x650 (mp (mp @x167 (quant-intro (proof-bind ?x170) (= $x285 $x169)) $x169) (quant-intro (proof-bind ?x159) (= $x169 $x477)) $x477)))
 (let ((@x580 (mp (mp~ @x650 (sk (~ $x477 $x196)) $x196) (rewrite (= $x196 $x604)) $x604)))
 (let ((@x243 (and-elim @x580 $x513)))
 (let ((@x232 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x513) $x297)) @x243 $x297)))
 (let (($x244 (>= ?x288 (- 6))))
 (let ((@x530 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x513) $x244)) @x243 $x244)))
 (let (($x652 (not (<= ?x586 0))))
 (let (($x240 (>= ?x586 0)))
 (let ((@x560 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x581 $x652 (not $x240))) (and-elim @x580 $x639) (or $x652 (not $x240)))))
 (let ((@x601 (unit-resolution @x560 (lemma ((_ th-lemma arith) (hypothesis (not $x240)) @x530 @x232 false) $x240) $x652)))
 ((_ th-lemma arith) @x601 @x530 @x232 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        28
 :arith-branch-var          2
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           11
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             257
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             5
 :arith-patches_succ        1
 :arith-pivots              10
 :arith-row-summations      10
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 22
 :del-clause                16
 :final-checks              9
 :max-memory                3.62
 :memory                    3.11
 :mk-bool-var               42
 :mk-clause                 16
 :num-allocs                1219477
 :num-checks                1
 :propagations              11
 :rlimit-count              5477
 :time                      0.01
 :total-time                0.02)
