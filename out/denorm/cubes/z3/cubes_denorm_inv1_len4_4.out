unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x92 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x535 (<= ?x92 (- 6))))
 (let (($x674 (= ?x92 (- 6))))
 (let ((?x149 (+ c!3 k!2)))
 (let ((?x335 (+ m!1 k!2)))
 (let ((?x157 (+ 6 m!1)))
 (let ((?x162 (+ 1 n!0)))
 (let ((?x479 (* (- 6) (* n!0 ?x162 ?x162 ?x162 ?x157 ?x157 ?x157 ?x335 ?x335 ?x335 ?x149))))
 (let ((?x622 (+ (* 6 (* ?x162 ?x162 ?x162 ?x335 ?x335 ?x335 ?x149 ?x149)) (* (- 1) (* m!1 ?x162 ?x157 ?x157 ?x335 ?x149 ?x149 ?x149)) (* 6 (* ?x162 ?x157 ?x157 ?x335 ?x149 ?x149 ?x149)) (* (- 1) (* m!1 ?x162 ?x162 ?x162 ?x335 ?x335 ?x335 ?x149 ?x149)) (* 6 (* n!0 ?x162 ?x157 ?x157 ?x335 ?x149 ?x149 ?x149)) (* (- 1) (* m!1 ?x162 ?x162 ?x157 ?x335 ?x149 ?x149 ?x149)) (* 6 (* n!0 ?x162 ?x162 ?x157 ?x335 ?x149 ?x149 ?x149)) (* m!1 ?x162 ?x162 ?x162 ?x157 ?x157 ?x157 ?x335 ?x335 ?x335 ?x149) (* 6 (* ?x162 ?x162 ?x157 ?x335 ?x149 ?x149 ?x149)) (* (- 6) (* ?x162 ?x162 ?x162 ?x157 ?x157 ?x157 ?x335 ?x335 ?x335 ?x149)) (* 6 (* n!0 ?x162 ?x162 ?x162 ?x335 ?x335 ?x335 ?x149 ?x149)) ?x479)))
 (let (($x279 (= ?x622 0)))
 (let (($x219 (not $x279)))
 (let (($x366 (= (+ (* 3 n!0) (* 3 (* n!0 n!0)) (* (- 1) k!2)) (- 1))))
 (let (($x418 (= (+ (* 2 n!0) (* (- 3) c!3) (* n!0 k!2) (* (- 1) k!2)) (- 1))))
 (let ((?x671 (* k!2 k!2)))
 (let ((?x116 (+ (* 9 n!0) (* (- 18) c!3) (* (- 9) (* n!0 c!3)) (* (- 5) k!2) ?x671)))
 (let (($x283 (and $x674 (= ?x116 (- 4)) $x418 $x366 $x219)))
 (let ((?x148 (+ k!2 m!1)))
 (let ((?x138 (* (- 6) (* n!0 ?x162 ?x162 ?x162 ?x157 ?x157 ?x157 ?x148 ?x148 ?x148 ?x149))))
 (let ((?x136 (+ (* 6 (* ?x162 ?x162 ?x157 ?x148 ?x149 ?x149 ?x149)) (* m!1 ?x162 ?x162 ?x162 ?x157 ?x157 ?x157 ?x148 ?x148 ?x148 ?x149) (* (- 1) (* m!1 ?x162 ?x157 ?x157 ?x148 ?x149 ?x149 ?x149)) (* 6 (* ?x162 ?x162 ?x162 ?x148 ?x148 ?x148 ?x149 ?x149)) (* (- 1) (* m!1 ?x162 ?x162 ?x157 ?x148 ?x149 ?x149 ?x149)) (* 6 (* n!0 ?x162 ?x157 ?x157 ?x148 ?x149 ?x149 ?x149)) (* (- 1) (* m!1 ?x162 ?x162 ?x162 ?x148 ?x148 ?x148 ?x149 ?x149)) (* 6 (* ?x162 ?x157 ?x157 ?x148 ?x149 ?x149 ?x149)) (* 6 (* n!0 ?x162 ?x162 ?x157 ?x148 ?x149 ?x149 ?x149)) (* (- 6) (* ?x162 ?x162 ?x162 ?x157 ?x157 ?x157 ?x148 ?x148 ?x148 ?x149)) (* 6 (* n!0 ?x162 ?x162 ?x162 ?x148 ?x148 ?x148 ?x149 ?x149)) ?x138)))
 (let (($x633 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x672 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x671) (* 9 (* c!3 n!0)))))
 (let (($x172 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x672 4) $x633 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x136 0)))))
 (let (($x184 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x628 (* (- 6) (* n ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73))))
 (let ((?x634 (+ (* 6 (* ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* m ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73) (* (- 1) (* m ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) (* 6 (* ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* (- 1) (* m ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* 6 (* n ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 1) (* m ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* 6 (* ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) (* 6 (* n ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 6) (* ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73)) (* 6 (* n ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) ?x628)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 $x214 $x266 $x304 (not (= ?x634 0)))))))))))))))))) :qid k!34))
 ))
 (let (($x94 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x480 (* ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73)))
 (let ((?x425 (+ (* (- 1) (* ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* (- 1) (* ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 1) (* ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) ?x480)))
 (let (($x415 (not (= (* (+ (- 6) m (* (- 6) n)) ?x425) 0))))
 (let (($x247 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x155 $x247 $x415)))))))))))))))) :qid k!34))
 ))
 (let ((?x193 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x628 (* (- 6) (* n ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73))))
 (let ((?x634 (+ (* 6 (* ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* m ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73) (* (- 1) (* m ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) (* 6 (* ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* (- 1) (* m ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* 6 (* n ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 1) (* m ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* 6 (* ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) (* 6 (* n ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 6) (* ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73)) (* 6 (* n ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) ?x628)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x642 (and $x130 $x214 $x266 $x304 (not (= ?x634 0)))))
 (let ((?x480 (* ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73)))
 (let ((?x425 (+ (* (- 1) (* ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* (- 1) (* ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 1) (* ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) ?x480)))
 (let (($x415 (not (= (* (+ (- 6) m (* (- 6) n)) ?x425) 0))))
 (let (($x247 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x186 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x155 $x247 $x415)))
 (rewrite (= $x186 $x642)))))))))))))))))))))))))
 ))
 (let (($x410 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x480 (* ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73)))
 (let ((?x425 (+ (* (- 1) (* ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* (- 1) (* ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 1) (* ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) ?x480)))
 (let (($x415 (not (= (* (+ (- 6) m (* (- 6) n)) ?x425) 0))))
 (let (($x247 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x286 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x123 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= ?x123 (- 4)) $x286 $x247 $x415)))))))))))))) :qid k!34))
 ))
 (let ((?x96 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x480 (* ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73)))
 (let ((?x425 (+ (* (- 1) (* ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* (- 1) (* ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 1) (* ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) ?x480)))
 (let (($x415 (not (= (* (+ (- 6) m (* (- 6) n)) ?x425) 0))))
 (let (($x247 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x186 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x155 $x247 $x415)))
 (let (($x286 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x123 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x102 (and $x130 (= ?x123 (- 4)) $x286 $x247 $x415)))
 (rewrite (= $x102 $x186)))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x79 (- (* (- 1) ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x76 ?x69 ?x69))))
 (let ((?x82 (+ (- ?x79 (* ?x73 ?x73 ?x73 ?x74 ?x76 ?x76 ?x69)) (* ?x73 ?x74 ?x74 ?x74 ?x76 ?x76 ?x76 ?x69 ?x69 ?x69))))
 (let (($x84 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x82) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x84))))))))))))))))) :qid k!34))
 ))
 (let ((?x211 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x480 (* ?x319 ?x319 ?x319 ?x363 ?x363 ?x363 ?x74 ?x74 ?x74 ?x73)))
 (let ((?x425 (+ (* (- 1) (* ?x319 ?x319 ?x319 ?x74 ?x74 ?x74 ?x73 ?x73)) (* (- 1) (* ?x319 ?x319 ?x363 ?x74 ?x73 ?x73 ?x73)) (* (- 1) (* ?x319 ?x363 ?x363 ?x74 ?x73 ?x73 ?x73)) ?x480)))
 (let (($x415 (not (= (* (+ (- 6) m (* (- 6) n)) ?x425) 0))))
 (let (($x247 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x286 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x123 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x102 (and $x130 (= ?x123 (- 4)) $x286 $x247 $x415)))
 (let ((?x69 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x79 (- (* (- 1) ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x76 ?x69 ?x69))))
 (let ((?x82 (+ (- ?x79 (* ?x73 ?x73 ?x73 ?x74 ?x76 ?x76 ?x69)) (* ?x73 ?x74 ?x74 ?x74 ?x76 ?x76 ?x76 ?x69 ?x69 ?x69))))
 (let (($x84 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x82) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x84)))))
 (rewrite (= $x87 $x102))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x163 (mp (mp @x89 (quant-intro (proof-bind ?x211) (= $x88 $x410)) $x410) (rewrite (= $x410 $x410)) $x410)))
 (let ((@x179 (mp (mp @x163 (quant-intro (proof-bind ?x96) (= $x410 $x94)) $x94) (quant-intro (proof-bind ?x193) (= $x94 $x184)) $x184)))
 (let ((@x220 (mp (mp~ @x179 (sk (~ $x184 $x172)) $x172) (rewrite (= $x172 $x283)) $x283)))
 (let ((@x474 (and-elim @x220 $x674)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x674) $x535)) @x474 $x535)))
 (let (($x147 (>= ?x92 (- 6))))
 (let ((@x348 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x674) $x147)) @x474 $x147)))
 (let (($x297 (not (<= ?x622 0))))
 (let (($x522 (>= ?x622 0)))
 (let ((@x341 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x279 $x297 (not $x522))) (and-elim @x220 $x219) (or $x297 (not $x522)))))
 (let ((@x420 (unit-resolution @x341 (lemma ((_ th-lemma arith) (hypothesis (not $x522)) @x348 @x331 false) $x522) $x297)))
 ((_ th-lemma arith) @x420 @x348 @x331 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             235
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 41
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.64
 :memory                    3.15
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1205923
 :num-checks                1
 :propagations              11
 :rlimit-count              4991
 :time                      0.01
 :total-time                0.02)
