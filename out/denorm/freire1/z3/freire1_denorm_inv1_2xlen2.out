unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x382 (* 2 x!0)))
 (let ((?x72 (* (- 1) r!1)))
 (let ((?x259 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x246 (+ r00 ?x85 ?x101 ?x259 ?x72 ?x382)))
 (let (($x296 (<= ?x246 0)))
 (let (($x405 (= ?x246 0)))
 (let ((?x430 (* r!1 r!1 r!1)))
 (let ((?x462 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x288 (* (- 1) (* r!1 x!0 x!0 x!0))))
 (let ((?x442 (* 3 (* r!1 r!1 x!0 x!0))))
 (let ((?x302 (* r!1 r!1 r!1 r!1)))
 (let ((?x228 (* (- 3) (* r!1 r!1 r!1 x!0))))
 (let ((?x443 (* (- 1) ?x259)))
 (let ((?x158 (* r!1 r!1 x!0)))
 (let ((?x74 (* (- 3) ?x158)))
 (let ((?x147 (* r!1 x!0)))
 (let ((?x438 (* 3 (* r!1 x!0 x!0))))
 (let ((?x280 (* (+ (* (- 1) ?x147) (* (- 1) ?x158) ?x259 ?x430) (+ ?x438 ?x147 ?x74 ?x443 ?x228 ?x302 ?x72 ?x442 ?x288 ?x462 x!0 ?x430) ?x246)))
 (let (($x408 (= ?x280 0)))
 (let (($x281 (not $x408)))
 (let (($x274 (and $x405 $x281)))
 (let ((?x361 (* (+ ?x259 (* (- 1) ?x147) (* (- 1) ?x158) ?x430) (+ ?x72 x!0 ?x443 ?x147 ?x74 ?x430 ?x462 ?x288 ?x302 ?x228 ?x438 ?x442) (+ ?x72 ?x382 r00 ?x259 ?x85 ?x101))))
 (let (($x444 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x443 (* 2 x00) ?x36) 0)))
 (let (($x365 (and $x444 (not (= ?x361 0)))))
 (let (($x139 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x253 (* r r r)))
 (let ((?x217 (* r x)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x454 (+ ?x64 x ?x117 ?x217 (* (- 3) (* r r x)) ?x253 (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r r) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x289 (+ ?x30 (* (- 1) ?x217) (* (- 1) (* r r x)) ?x253)))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (and $x119 (not (= (* ?x289 ?x454 ?x107) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x338 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x375 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x234 (+ x ?x64)))
 (let ((?x435 (+ 1 r)))
 (let ((?x384 (* ?x435 ?x234)))
 (let ((?x407 (* (+ ?x384 (* (- 1) (* ?x435 ?x435 ?x234))) (+ ?x384 (* (- 1) (* ?x435 ?x234 ?x234 ?x234))) ?x375)))
 (let (($x414 (not (= ?x407 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x414))))))))))))))))) :qid k!26))
 ))
 (let ((?x377 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x253 (* r r r)))
 (let ((?x217 (* r x)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x454 (+ ?x64 x ?x117 ?x217 (* (- 3) (* r r x)) ?x253 (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r r) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x289 (+ ?x30 (* (- 1) ?x217) (* (- 1) (* r r x)) ?x253)))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (let (($x80 (and $x119 (not (= (* ?x289 ?x454 ?x107) 0)))))
 (let ((?x375 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x399 (* (- 1) (* (+ 1 r) (+ x ?x64) (+ x ?x64) (+ x ?x64)))))
 (let ((?x234 (+ x ?x64)))
 (let ((?x435 (+ 1 r)))
 (let ((?x384 (* ?x435 ?x234)))
 (let (($x410 (= (* (+ ?x384 (* (- 1) (* ?x435 ?x435 ?x234))) (+ ?x384 ?x399) ?x375) 0)))
 (let (($x414 (not $x410)))
 (let (($x334 (= (+ r (* (- 1) r00) ?x117 (* (- 2) x) (* 2 x00) ?x36) 0)))
 (let (($x439 (and $x334 $x414)))
 (rewrite (= $x439 $x80))))))))))))))))))))))))))
 ))
 (let (($x254 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x375 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x234 (+ x ?x64)))
 (let ((?x435 (+ 1 r)))
 (let ((?x384 (* ?x435 ?x234)))
 (let ((?x407 (* (+ ?x384 (* (- 1) (* ?x435 ?x435 ?x234))) (+ ?x384 (* (- 1) (* ?x435 ?x234 ?x234 ?x234))) ?x375)))
 (let (($x414 (not (= ?x407 0))))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x414)))))))))))) :qid k!26))
 ))
 (let ((?x339 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x375 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x234 (+ x ?x64)))
 (let ((?x435 (+ 1 r)))
 (let ((?x384 (* ?x435 ?x234)))
 (let ((?x407 (* (+ ?x384 (* (- 1) (* ?x435 ?x435 ?x234))) (+ ?x384 (* (- 1) (* ?x435 ?x234 ?x234 ?x234))) ?x375)))
 (let (($x414 (not (= ?x407 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x439 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x414)))
 (let (($x224 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) $x414)))
 (rewrite (= $x224 $x439)))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x49 (* ?x41 ?x44)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x54 (* ?x48 (- ?x49 (* ?x41 ?x41 ?x44)) (- ?x49 (* ?x41 ?x44 ?x44 ?x44)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x54 0)))))))))))) :qid k!26))
 ))
 (let ((?x440 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x375 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x234 (+ x ?x64)))
 (let ((?x435 (+ 1 r)))
 (let ((?x384 (* ?x435 ?x234)))
 (let ((?x407 (* (+ ?x384 (* (- 1) (* ?x435 ?x435 ?x234))) (+ ?x384 (* (- 1) (* ?x435 ?x234 ?x234 ?x234))) ?x375)))
 (let (($x414 (not (= ?x407 0))))
 (let (($x224 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x414)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x49 (* ?x41 ?x44)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x54 (* ?x48 (- ?x49 (* ?x41 ?x41 ?x44)) (- ?x49 (* ?x41 ?x44 ?x44 ?x44)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= ?x54 0))))))
 (rewrite (= $x58 $x224)))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x336 (mp (mp @x60 (quant-intro (proof-bind ?x440) (= $x59 $x254)) $x254) (rewrite (= $x254 $x254)) $x254)))
 (let ((@x156 (mp (mp @x336 (quant-intro (proof-bind ?x339) (= $x254 $x338)) $x338) (quant-intro (proof-bind ?x377) (= $x338 $x139)) $x139)))
 (let ((@x212 (mp (mp~ @x156 (sk (~ $x139 $x365)) $x365) (rewrite (= $x365 $x274)) $x274)))
 (let ((@x264 (and-elim @x212 $x405)))
 (let ((@x126 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x296)) @x264 $x296)))
 (let (($x292 (>= ?x246 0)))
 (let ((@x173 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x292)) @x264 $x292)))
 (let (($x174 (not (>= ?x280 0))))
 (let (($x290 (<= ?x280 0)))
 (let ((@x267 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x408 (not $x290) $x174)) (and-elim @x212 $x281) (or (not $x290) $x174))))
 (let ((@x262 (unit-resolution @x267 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x290)) @x173 @x126 false) $x290) $x174)))
 ((_ th-lemma arith farkas 1 1 1) @x262 @x173 @x126 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            3
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 24
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.49
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1051866
 :num-checks                1
 :propagations              4
 :rlimit-count              1635
 :time                      0.01
 :total-time                0.01)
