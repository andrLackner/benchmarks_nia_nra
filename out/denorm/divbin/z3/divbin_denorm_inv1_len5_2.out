unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x359 (+ (* (- 1.0) (to_real (* b00 x00))) ?x150)))
 (let (($x574 (>= ?x359 0.0)))
 (let (($x521 (= ?x359 0.0)))
 (let ((@x735 (lemma (unit-resolution ((_ th-lemma arith) $x521) (hypothesis (not $x521)) false) $x521)))
 (let ((@x692 ((_ th-lemma arith triangle-eq) (or (not $x521) $x574))))
 (let (($x698 (<= ?x359 0.0)))
 (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x553 (to_real r!1)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x550 (to_real b!2)))
 (let ((?x519 (to_real x!0)))
 (let ((?x898 (* ?x519 ?x550)))
 (let ((?x905 (+ ?x898 ?x153 ?x553 ?x139)))
 (let (($x980 (>= ?x905 0.0)))
 (let ((?x90 (* b00 x00)))
 (let ((?x903 (+ r00 ?x90 (* (- 1) r!1) (* (- 1) (* b!2 x!0)))))
 (let (($x814 (>= ?x903 0)))
 (let (($x589 (= 0 ?x903)))
 (let ((@x694 (symm (commutativity (= $x589 (= ?x903 0))) (= (= ?x903 0) $x589))))
 (let (($x146 (= ?x903 0)))
 (let ((?x831 (* (- (/ 1.0 2.0)) (* ?x550 ?x553 ?x553 ?x553))))
 (let ((?x776 (* (- (/ 3.0 8.0)) (* ?x550 ?x550 ?x550 ?x553))))
 (let ((?x1178 (* (/ 3.0 4.0) (* ?x550 ?x550 ?x553 ?x553))))
 (let ((?x188 (* (- (/ 1.0 8.0)) (* ?x550 ?x550 ?x550 ?x553 ?x553))))
 (let ((?x561 (* (/ 1.0 16.0) (* ?x550 ?x550 ?x550 ?x550))))
 (let ((?x1293 (* 2.0 ?x519)))
 (let ((?x497 (* (- (/ 1.0 32.0)) (* ?x550 ?x550 ?x550 ?x550 ?x550))))
 (let ((?x495 (* (/ 1.0 8.0) (* ?x550 ?x550 ?x550 ?x550 ?x553))))
 (let ((?x802 (* (/ 1.0 8.0) (* ?x550 ?x550 ?x550))))
 (let ((?x720 (+ (* (/ 1.0 2.0) (* ?x519 ?x550 ?x550 ?x550 ?x550 ?x553)) (* (- (/ 1.0 2.0)) (* ?x519 ?x550 ?x550 ?x550 ?x553 ?x553)) (* (- (/ 9.0 4.0)) (* ?x519 ?x550 ?x550 ?x550 ?x553)) ?x802 ?x495 (* (- 4.0) (* ?x519 ?x519 ?x519 ?x550 ?x553 ?x553 ?x553)) ?x497 (* (/ 9.0 2.0) (* ?x519 ?x550 ?x550 ?x553 ?x553)) (* (- 3.0) (* ?x519 ?x550 ?x553 ?x553 ?x553)) ?x1293 (* (- (/ 1.0 8.0)) (* ?x519 ?x550 ?x550 ?x550 ?x550 ?x550)) ?x561 ?x188 (* (/ 1.0 4.0) (* ?x519 ?x550 ?x550 ?x550)) (* (/ 1.0 2.0) (* ?x519 ?x519 ?x550 ?x550 ?x550 ?x550 ?x553)) (* (/ 3.0 4.0) (* ?x519 ?x519 ?x550 ?x550 ?x550 ?x550)) (* 9.0 (* ?x519 ?x519 ?x550 ?x550 ?x553 ?x553)) (* (- 3.0) (* ?x519 ?x519 ?x519 ?x550 ?x550 ?x550 ?x553)) (* (/ 1.0 2.0) (* ?x519 ?x519 ?x519 ?x550 ?x550 ?x550 ?x550)) (* (- (/ 1.0 8.0)) (* ?x519 ?x519 ?x550 ?x550 ?x550 ?x550 ?x550)) (* (- (/ 1.0 2.0)) (* ?x519 ?x519 ?x550 ?x550 ?x550 ?x553 ?x553)) (* (/ 3.0 8.0) (* ?x519 ?x550 ?x550 ?x550 ?x550)) (* (- (/ 9.0 2.0)) (* ?x519 ?x519 ?x550 ?x550 ?x550 ?x553)) (* (- 6.0) (* ?x519 ?x519 ?x550 ?x553 ?x553 ?x553)) (* 6.0 (* ?x519 ?x519 ?x519 ?x550 ?x550 ?x553 ?x553)) ?x1178 ?x776 ?x831)))
 (let (($x1058 (= (* ?x720 (+ ?x139 ?x153 ?x553 ?x898)) 0.0)))
 (let (($x1063 (not $x1058)))
 (let ((?x1030 (+ ?x64 ?x150 (* (- 4.0) (* ?x519 ?x519 ?x519 ?x519 ?x550 ?x550 ?x553 ?x553 ?x553)) (* (/ 1.0 4.0) (* ?x519 ?x550 ?x550 ?x550 ?x553)) (* (/ 1.0 2.0) (* ?x64 ?x519 ?x519 ?x550 ?x550 ?x550 ?x553 ?x553)) (* (- (/ 1.0 2.0)) (* ?x519 ?x519 ?x550 ?x550 ?x550 ?x553 ?x553 ?x553)) (* (- (/ 1.0 2.0)) (* ?x519 ?x519 ?x519 ?x550 ?x550 ?x550 ?x550 ?x553 ?x553)) (* (/ 1.0 2.0) (* ?x148 ?x149 ?x519 ?x519 ?x550 ?x550 ?x550 ?x553 ?x553)) (* (- 1.0) ?x553) (* 4.0 (* ?x64 ?x519 ?x519 ?x519 ?x550 ?x553 ?x553 ?x553)) (* (- 4.0) (* ?x519 ?x519 ?x519 ?x550 ?x553 ?x553 ?x553 ?x553)) (* (- 2.0) (* ?x64 ?x519)) (* 4.0 (* ?x148 ?x149 ?x519 ?x519 ?x519 ?x550 ?x553 ?x553 ?x553)) (* (/ 1.0 4.0) (* ?x519 ?x519 ?x550 ?x550 ?x550 ?x550)) (* (- 2.0) (* ?x148 ?x149 ?x519)) (* 2.0 (* ?x519 ?x519 ?x550)) (* (- 1.0) ?x898) (* (- (/ 1.0 4.0)) (* ?x64 ?x519 ?x550 ?x550 ?x550)) (* (- (/ 1.0 4.0)) (* ?x148 ?x149 ?x519 ?x550 ?x550 ?x550)) (* 2.0 (* ?x519 ?x553)))))
 (let (($x1032 (= ?x1030 0.0)))
 (let (($x716 (not $x1032)))
 (let (($x989 (or $x716 $x1063)))
 (let (($x729 (and $x146 $x989)))
 (let ((?x874 (+ ?x1293 (* (- (/ 1.0 2.0)) (* ?x550 ?x550 ?x550 ?x519 ?x519 ?x553 ?x553)) (* (- 4.0) (* ?x550 ?x519 ?x519 ?x519 ?x553 ?x553 ?x553)) (* (/ 1.0 4.0) (* ?x550 ?x550 ?x550 ?x519)) ?x495 ?x497 (* (- (/ 9.0 4.0)) (* ?x550 ?x550 ?x550 ?x519 ?x553)) (* (/ 3.0 4.0) (* ?x550 ?x550 ?x550 ?x550 ?x519 ?x519)) ?x188 (* (- (/ 1.0 8.0)) (* ?x550 ?x550 ?x550 ?x550 ?x550 ?x519)) (* (/ 1.0 2.0) (* ?x550 ?x550 ?x550 ?x550 ?x519 ?x553)) (* (- (/ 1.0 2.0)) (* ?x550 ?x550 ?x550 ?x519 ?x553 ?x553)) (* (- (/ 1.0 8.0)) (* ?x550 ?x550 ?x550 ?x550 ?x550 ?x519 ?x519)) (* (/ 1.0 2.0) (* ?x550 ?x550 ?x550 ?x550 ?x519 ?x519 ?x553)) ?x561 ?x776 ?x1178 ?x831 (* (/ 3.0 8.0) (* ?x550 ?x550 ?x550 ?x550 ?x519)) (* (/ 9.0 2.0) (* ?x550 ?x550 ?x519 ?x553 ?x553)) (* (- 3.0) (* ?x550 ?x519 ?x553 ?x553 ?x553)) (* (- (/ 9.0 2.0)) (* ?x550 ?x550 ?x550 ?x519 ?x519 ?x553)) (* 9.0 (* ?x550 ?x550 ?x519 ?x519 ?x553 ?x553)) (* (- 6.0) (* ?x550 ?x519 ?x519 ?x553 ?x553 ?x553)) (* (/ 1.0 2.0) (* ?x550 ?x550 ?x550 ?x550 ?x519 ?x519 ?x519)) (* (- 3.0) (* ?x550 ?x550 ?x550 ?x519 ?x519 ?x519 ?x553)) (* 6.0 (* ?x550 ?x550 ?x519 ?x519 ?x519 ?x553 ?x553)) ?x802)))
 (let ((?x509 (* ?x550 ?x519)))
 (let ((?x1279 (+ ?x553 ?x139 ?x153 ?x509 (* (- 2.0) (* ?x519 ?x553)) (* 2.0 (* ?x519 ?x64)) (* 2.0 (* ?x519 ?x148 ?x149)) (* (- 2.0) (* ?x550 ?x519 ?x519)) (* (/ 1.0 2.0) (* ?x550 ?x550 ?x550 ?x519 ?x519 ?x553 ?x553 ?x553)) (* (- (/ 1.0 2.0)) (* ?x550 ?x550 ?x550 ?x519 ?x519 ?x553 ?x553 ?x64)) (* (- (/ 1.0 2.0)) (* ?x550 ?x550 ?x550 ?x519 ?x519 ?x553 ?x553 ?x148 ?x149)) (* (/ 1.0 2.0) (* ?x550 ?x550 ?x550 ?x550 ?x519 ?x519 ?x519 ?x553 ?x553)) (* 4.0 (* ?x550 ?x519 ?x519 ?x519 ?x553 ?x553 ?x553 ?x553)) (* (- 4.0) (* ?x550 ?x519 ?x519 ?x519 ?x553 ?x553 ?x553 ?x64)) (* (- 4.0) (* ?x550 ?x519 ?x519 ?x519 ?x553 ?x553 ?x553 ?x148 ?x149)) (* 4.0 (* ?x550 ?x550 ?x519 ?x519 ?x519 ?x519 ?x553 ?x553 ?x553)) (* (- (/ 1.0 4.0)) (* ?x550 ?x550 ?x550 ?x519 ?x553)) (* (/ 1.0 4.0) (* ?x550 ?x550 ?x550 ?x519 ?x64)) (* (/ 1.0 4.0) (* ?x550 ?x550 ?x550 ?x519 ?x148 ?x149)) (* (- (/ 1.0 4.0)) (* ?x550 ?x550 ?x550 ?x550 ?x519 ?x519)))))
 (let (($x606 (or (not (= ?x1279 0.0)) (not (= (* ?x874 (+ ?x553 ?x139 ?x153 ?x509)) 0.0)))))
 (let (($x682 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x90)) 0) $x606)))
 (let (($x921 (exists ((b Int) (r Int) (x Int) )(! (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x168 (* ?x40 ?x43)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x47 (to_real r)))
 (let ((?x258 (* 2.0 ?x43)))
 (let ((?x1318 (+ ?x258 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x47)) (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 9.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47 ?x47)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 9.0 2.0) (* ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 3.0) (* ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 9.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 9.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- 6.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) (* (- 3.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47)) (* 6.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)))))
 (let ((?x406 (+ ?x47 ?x139 ?x153 ?x168 (* (- 2.0) (* ?x43 ?x47)) (* 2.0 (* ?x43 ?x64)) (* 2.0 (* ?x43 ?x148 ?x149)) (* (- 2.0) (* ?x40 ?x43 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x64)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x148 ?x149)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x64)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x148 ?x149)) (* 4.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x64)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x148 ?x149)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)))))
 (let (($x399 (not (= ?x406 0.0))))
 (let (($x126 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x126 (or $x399 (not (= (* ?x1318 (+ ?x47 ?x139 ?x153 ?x168)) 0.0))))))))))))))))))) :qid k!28))
 ))
 (let (($x317 (exists ((b Int) (r Int) (x Int) )(! (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x803 (+ ?x153 ?x47 ?x174 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x258 (* 2.0 ?x43)))
 (let ((?x537 (+ ?x47 ?x174)))
 (let ((?x147 (+ 1.0 ?x258)))
 (let ((?x938 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x147 ?x147 ?x537 ?x537)) (* (- (/ 1.0 2.0)) (* ?x40 ?x147 ?x147 ?x147 ?x537 ?x537 ?x537)) ?x258 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x147)))))
 (let ((?x880 (+ (- 1.0) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x258 (* (/ 1.0 4.0) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x950 (or (not (= (* (+ ?x153 ?x47 ?x139 (* ?x43 ?x40)) ?x880) 0.0)) (not (= (* ?x938 ?x803) 0.0)))))
 (let (($x647 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x647 $x950))))))))))))))))))) :qid k!28))
 ))
 (let ((?x909 (lambda ((b Int) (r Int) (x Int) )(let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x168 (* ?x40 ?x43)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x47 (to_real r)))
 (let ((?x258 (* 2.0 ?x43)))
 (let ((?x1318 (+ ?x258 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x47)) (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 9.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47 ?x47)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 9.0 2.0) (* ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 3.0) (* ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 9.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 9.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- 6.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) (* (- 3.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47)) (* 6.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)))))
 (let ((?x406 (+ ?x47 ?x139 ?x153 ?x168 (* (- 2.0) (* ?x43 ?x47)) (* 2.0 (* ?x43 ?x64)) (* 2.0 (* ?x43 ?x148 ?x149)) (* (- 2.0) (* ?x40 ?x43 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x64)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x148 ?x149)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x64)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x148 ?x149)) (* 4.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x64)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x148 ?x149)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)))))
 (let (($x399 (not (= ?x406 0.0))))
 (let (($x126 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x137 (and $x126 (or $x399 (not (= (* ?x1318 (+ ?x47 ?x139 ?x153 ?x168)) 0.0))))))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x537 (+ ?x47 ?x174)))
 (let ((?x147 (+ 1.0 ?x258)))
 (let ((?x938 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x147 ?x147 ?x537 ?x537)) (* (- (/ 1.0 2.0)) (* ?x40 ?x147 ?x147 ?x147 ?x537 ?x537 ?x537)) ?x258 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x147)))))
 (let (($x949 (= (* ?x938 (+ ?x153 ?x47 ?x174 ?x139 (* (/ 1.0 2.0) (* ?x40 ?x147)))) 0.0)))
 (let ((?x880 (+ (- 1.0) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x258 (* (/ 1.0 4.0) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x950 (or (not (= (* (+ ?x153 ?x47 ?x139 (* ?x43 ?x40)) ?x880) 0.0)) (not $x949))))
 (let (($x647 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x901 (and $x647 $x950)))
 (rewrite (= $x901 $x137))))))))))))))))))))))))))))
 ))
 (let (($x955 (exists ((b Int) (r Int) (x Int) )(! (let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x803 (+ ?x153 ?x47 ?x174 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x258 (* 2.0 ?x43)))
 (let ((?x537 (+ ?x47 ?x174)))
 (let ((?x147 (+ 1.0 ?x258)))
 (let ((?x938 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x147 ?x147 ?x537 ?x537)) (* (- (/ 1.0 2.0)) (* ?x40 ?x147 ?x147 ?x147 ?x537 ?x537 ?x537)) ?x258 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x147)))))
 (let ((?x880 (+ (- 1.0) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x258 (* (/ 1.0 4.0) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x950 (or (not (= (* (+ ?x153 ?x47 ?x139 (* ?x43 ?x40)) ?x880) 0.0)) (not (= (* ?x938 ?x803) 0.0)))))
 (let (($x657 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x657 $x950))))))))))))))))))) :qid k!28))
 ))
 (let ((?x665 (lambda ((b Int) (r Int) (x Int) )(let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x803 (+ ?x153 ?x47 ?x174 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x258 (* 2.0 ?x43)))
 (let ((?x537 (+ ?x47 ?x174)))
 (let ((?x147 (+ 1.0 ?x258)))
 (let ((?x938 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x147 ?x147 ?x537 ?x537)) (* (- (/ 1.0 2.0)) (* ?x40 ?x147 ?x147 ?x147 ?x537 ?x537 ?x537)) ?x258 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x147)))))
 (let ((?x880 (+ (- 1.0) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x258 (* (/ 1.0 4.0) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x950 (or (not (= (* (+ ?x153 ?x47 ?x139 (* ?x43 ?x40)) ?x880) 0.0)) (not (= (* ?x938 ?x803) 0.0)))))
 (let (($x647 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x901 (and $x647 $x950)))
 (let (($x657 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x511 (and $x657 $x950)))
 (rewrite (= $x511 $x901))))))))))))))))))))))))
 ))
 (let (($x82 (exists ((b Int) (r Int) (x Int) )(! (let ((?x58 (to_real 0)))
 (let ((?x67 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x53 (* 2 x)))
 (let ((?x55 (to_real ?x53)))
 (let ((?x47 (to_real r)))
 (let ((?x61 (- ?x47 ?x42)))
 (let ((?x73 (- (- (to_real (- 1)) (* ?x42 ?x42 ?x42 ?x61 ?x61 ?x67 ?x67)) (* ?x42 ?x61 ?x61 ?x61 ?x67 ?x67 ?x67))))
 (let ((?x69 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x61) (to_real r00)) (* ?x42 ?x67))))
 (let (($x78 (= (* ?x69 (+ ?x73 ?x55 (to_real 1) (* ?x42 ?x42 ?x42 ?x67))) ?x58)))
 (let ((?x43 (to_real x)))
 (let ((?x28 (- 1)))
 (let ((?x50 (to_real ?x28)))
 (let ((?x52 (- (- ?x50 (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43)) (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x80 (or (not (= (* ?x46 (+ ?x52 ?x55 (* ?x42 ?x42 ?x42 ?x41 ?x43))) ?x58)) (not $x78))))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (and $x38 $x80)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x518 (lambda ((b Int) (r Int) (x Int) )(let ((?x64 (to_real r00)))
 (let ((?x139 (* (- 1.0) ?x64)))
 (let ((?x40 (to_real b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x149 (to_real x00)))
 (let ((?x148 (to_real b00)))
 (let ((?x150 (* ?x148 ?x149)))
 (let ((?x153 (* (- 1.0) ?x150)))
 (let ((?x803 (+ ?x153 ?x47 ?x174 ?x139 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x258 (* 2.0 ?x43)))
 (let ((?x537 (+ ?x47 ?x174)))
 (let ((?x147 (+ 1.0 ?x258)))
 (let ((?x938 (+ (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x147 ?x147 ?x537 ?x537)) (* (- (/ 1.0 2.0)) (* ?x40 ?x147 ?x147 ?x147 ?x537 ?x537 ?x537)) ?x258 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x147)))))
 (let ((?x880 (+ (- 1.0) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x258 (* (/ 1.0 4.0) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x950 (or (not (= (* (+ ?x153 ?x47 ?x139 (* ?x43 ?x40)) ?x880) 0.0)) (not (= (* ?x938 ?x803) 0.0)))))
 (let (($x657 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x511 (and $x657 $x950)))
 (let ((?x58 (to_real 0)))
 (let ((?x67 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x53 (* 2 x)))
 (let ((?x55 (to_real ?x53)))
 (let ((?x28 (- 1)))
 (let ((?x50 (to_real ?x28)))
 (let ((?x73 (- (- ?x50 (* ?x42 ?x42 ?x42 (- ?x47 ?x42) (- ?x47 ?x42) ?x67 ?x67)) (* ?x42 (- ?x47 ?x42) (- ?x47 ?x42) (- ?x47 ?x42) ?x67 ?x67 ?x67))))
 (let ((?x69 (+ (- (+ (to_real (* ?x28 b00 x00)) (- ?x47 ?x42)) ?x64) (* ?x42 ?x67))))
 (let (($x78 (= (* ?x69 (+ ?x73 ?x55 (to_real 1) (* ?x42 ?x42 ?x42 ?x67))) ?x58)))
 (let ((?x52 (- (- ?x50 (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43)) (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x80 (or (not (= (* ?x46 (+ ?x52 ?x55 (* ?x42 ?x42 ?x42 ?x41 ?x43))) ?x58)) (not $x78))))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (let (($x81 (and $x38 $x80)))
 (rewrite (= $x81 $x511))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x83 (asserted $x82)))
 (let ((@x547 (mp (mp @x83 (quant-intro (proof-bind ?x518) (= $x82 $x955)) $x955) (rewrite (= $x955 $x955)) $x955)))
 (let ((@x933 (mp (mp @x547 (quant-intro (proof-bind ?x665) (= $x955 $x317)) $x317) (quant-intro (proof-bind ?x909) (= $x317 $x921)) $x921)))
 (let ((@x1061 (mp (mp~ @x933 (sk (~ $x921 $x682)) $x682) (rewrite (= $x682 $x729)) $x729)))
 (let ((@x1038 (mp (and-elim @x1061 $x146) @x694 $x589)))
 (let ((@x1040 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x589) $x814)) @x1038 $x814)))
 (let (($x943 (<= ?x903 0)))
 (let ((@x987 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x589) $x943)) @x1038 $x943)))
 (let ((@x1081 (unit-resolution ((_ th-lemma arith) (or (not $x943) (not $x814) $x980)) @x987 @x1040 (hypothesis (not $x980)) false)))
 (let ((@x1082 (lemma @x1081 $x980)))
 (let (($x893 (<= ?x905 0.0)))
 (let ((?x546 (+ ?x898 (* (- 1.0) (to_real (* b!2 x!0))))))
 (let (($x554 (<= ?x546 0.0)))
 (let (($x563 (= 0.0 ?x546)))
 (let ((@x813 (symm (commutativity (= $x563 (= ?x546 0.0))) (= (= ?x546 0.0) $x563))))
 (let ((@x566 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x563) $x554)) (mp ((_ th-lemma arith) (= ?x546 0.0)) @x813 $x563) $x554)))
 (let ((@x719 ((_ th-lemma arith) (hypothesis (not $x893)) (unit-resolution @x692 ((_ th-lemma arith) $x521) $x574) @x1040 @x566 false)))
 (let ((@x1046 (lemma @x719 $x893)))
 (let (($x899 (<= ?x1030 0.0)))
 (let (($x1086 (not $x899)))
 (let (($x957 (= 0.0 ?x1030)))
 (let (($x1093 (not $x957)))
 (let ((@x699 (monotonicity (symm (commutativity (= $x957 $x1032)) (= $x1032 $x957)) (= $x716 $x1093))))
 (let (($x730 (= 0.0 ?x905)))
 (let ((@x1074 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x730 (not $x893) (not $x980))) @x1046 @x1082 $x730)))
 (let (($x990 (= ?x905 0.0)))
 (let (($x727 (not $x990)))
 (let ((@x731 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x727 $x1058)) (hypothesis $x1063) $x727) (symm (hypothesis $x730) $x990) false)))
 (let ((@x838 (unit-resolution (and-elim @x1061 $x989) (unit-resolution (lemma @x731 (or (not $x730) $x1058)) @x1074 $x1058) $x716)))
 (let (($x884 (>= ?x1030 0.0)))
 (let ((@x1057 (unit-resolution ((_ th-lemma arith) (or $x884 (not $x814) (not $x943))) @x987 @x1040 (hypothesis (not $x884)) false)))
 (let ((@x1092 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x957 $x1086 (not $x884))) (lemma @x1057 $x884) (or $x957 $x1086))))
 (unit-resolution ((_ th-lemma arith) (or (not $x893) (not $x980) $x899 (not $x574) (not $x698))) (unit-resolution @x1092 (mp @x838 @x699 $x1093) $x1086) @x1046 @x1082 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x521) $x698)) @x735 $x698) (unit-resolution @x692 @x735 $x574) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      22
 :arith-eq-adapter               21
 :arith-bound-propagations-cheap 14
 :arith-conflicts                23
 :arith-diseq                    25
 :arith-gcd-calls                3
 :arith-grobner-calls            3
 :arith-grobner-conflicts        3
 :arith-horner-calls             3
 :arith-lower                    22
 :arith-make-feasible            26
 :arith-max-columns              79
 :arith-max-rows                 15
 :arith-nla-explanations         67
 :arith-nla-lemmas               21
 :arith-patches                  3
 :arith-patches-success          3
 :arith-propagations             14
 :arith-upper                    24
 :conflicts                      8
 :decisions                      37
 :del-clause                     65
 :final-checks                   21
 :max-memory                     5.82
 :memory                         3.25
 :mk-bool-var                    83
 :mk-clause                      74
 :num-allocs                     5604129
 :num-checks                     1
 :propagations                   44
 :rlimit-count                   6334
 :time                           0.03
 :total-time                     0.04)
