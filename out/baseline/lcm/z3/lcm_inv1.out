unsat
((set-logic NIA)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let (($x163 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x164 (+ k!00 (* (- 1) (* (+ u v) x)) (* (- 1) (* (+ y (* (- 1) x)) v)) k!10)))
 (let (($x169 (not (= ?x164 0))))
 (let ((?x125 (+ k!00 (* (- 1) (* (+ x (* (- 1) y)) u)) (* (- 1) (* (+ v u) y)) k!10)))
 (let (($x162 (not (= ?x125 0))))
 (let (($x167 (or $x162 $x169)))
 (let ((?x127 (* y v)))
 (let ((?x83 (* (- 1) ?x127)))
 (let ((?x124 (* x u)))
 (let ((?x63 (* (- 1) ?x124)))
 (let ((?x146 (+ k!00 ?x63 ?x83 k!10)))
 (let (($x128 (= ?x146 0)))
 (and $x128 $x167)))))))))))) :qid k!28))
 ))
 (let (($x131 (exists ((u Int) (v Int) (x Int) (y Int) )(! false :qid k!28))
 ))
 (let ((@x139 (elim-unused (= $x131 false))))
 (let ((?x282 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x164 (+ k!00 (* (- 1) (* (+ u v) x)) (* (- 1) (* (+ y (* (- 1) x)) v)) k!10)))
 (let (($x169 (not (= ?x164 0))))
 (let ((?x125 (+ k!00 (* (- 1) (* (+ x (* (- 1) y)) u)) (* (- 1) (* (+ v u) y)) k!10)))
 (let (($x162 (not (= ?x125 0))))
 (let (($x167 (or $x162 $x169)))
 (let ((?x127 (* y v)))
 (let ((?x83 (* (- 1) ?x127)))
 (let ((?x124 (* x u)))
 (let ((?x63 (* (- 1) ?x124)))
 (let ((?x146 (+ k!00 ?x63 ?x83 k!10)))
 (let (($x128 (= ?x146 0)))
 (let (($x176 (and $x128 $x167)))
 (let ((?x71 (* (- 1) k!00)))
 (let ((?x144 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let (($x196 (= (+ ?x33 ?x34 ?x144 ?x71) 0)))
 (let (($x260 (not $x196)))
 (let (($x273 (and $x196 $x260)))
 (let ((@x220 (monotonicity (rewrite (= $x162 $x260)) (rewrite (= $x169 $x260)) (= $x167 (or $x260 $x260)))))
 (let ((?x181 (* (- 1) ?x34)))
 (let ((?x175 (* (- 1) ?x33)))
 (let ((?x187 (+ ?x175 ?x181 k!10 k!00)))
 (let (($x192 (= ?x187 0)))
 (let ((@x186 (monotonicity (rewrite (= ?x63 ?x175)) (rewrite (= ?x83 ?x181)) (= ?x146 (+ k!00 ?x175 ?x181 k!10)))))
 (let ((@x191 (trans @x186 (rewrite (= (+ k!00 ?x175 ?x181 k!10) ?x187)) (= ?x146 ?x187))))
 (let ((@x200 (trans (monotonicity @x191 (= $x128 $x192)) (rewrite (= $x192 $x196)) (= $x128 $x196))))
 (let ((@x275 (monotonicity @x200 (trans @x220 (rewrite (= (or $x260 $x260) $x260)) (= $x167 $x260)) (= $x176 $x273))))
 (trans @x275 (rewrite (= $x273 false)) (= $x176 false)))))))))))))))))))))))))))))))
 ))
 (let ((@x290 (trans (quant-intro (proof-bind ?x282) (= $x163 $x131)) @x139 (= $x163 false))))
 (let (($x111 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x144 (* (- 1) k!10)))
 (let ((?x65 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x71 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x108 (* (+ x (* (- 1) y)) u)))
 (let (($x120 (or (not (= (+ ?x71 ?x108 ?x45 ?x144) 0)) (not (= (+ ?x71 ?x51 ?x65 ?x144) 0)))))
 (and (= (+ ?x71 (* x u) (* y v) ?x144) 0) $x120)))))))) :qid k!28))
 ))
 (let ((?x165 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x164 (+ k!00 (* (- 1) (* (+ u v) x)) (* (- 1) (* (+ y (* (- 1) x)) v)) k!10)))
 (let (($x169 (not (= ?x164 0))))
 (let ((?x125 (+ k!00 (* (- 1) (* (+ x (* (- 1) y)) u)) (* (- 1) (* (+ v u) y)) k!10)))
 (let (($x162 (not (= ?x125 0))))
 (let (($x167 (or $x162 $x169)))
 (let ((?x127 (* y v)))
 (let ((?x83 (* (- 1) ?x127)))
 (let ((?x124 (* x u)))
 (let ((?x63 (* (- 1) ?x124)))
 (let ((?x146 (+ k!00 ?x63 ?x83 k!10)))
 (let (($x128 (= ?x146 0)))
 (let (($x176 (and $x128 $x167)))
 (let ((?x144 (* (- 1) k!10)))
 (let ((?x65 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x71 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x108 (* (+ x (* (- 1) y)) u)))
 (let (($x120 (or (not (= (+ ?x71 ?x108 ?x45 ?x144) 0)) (not (= (+ ?x71 ?x51 ?x65 ?x144) 0)))))
 (let (($x110 (and (= (+ ?x71 ?x124 ?x127 ?x144) 0) $x120)))
 (rewrite (= $x110 $x176)))))))))))))))))))))))
 ))
 (let (($x149 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x85 (* (- 1) ?x38)))
 (let ((?x65 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x69 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x108 (* (+ x (* (- 1) y)) u)))
 (let (($x154 (or (not (= (+ ?x69 ?x108 ?x45 ?x85) 0)) (not (= (+ ?x69 ?x51 ?x65 ?x85) 0)))))
 (and (= (+ ?x69 (* x u) (* y v) ?x85) 0) $x154))))))))) :qid k!28))
 ))
 (let ((?x123 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x144 (* (- 1) k!10)))
 (let ((?x65 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x71 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x108 (* (+ x (* (- 1) y)) u)))
 (let (($x120 (or (not (= (+ ?x71 ?x108 ?x45 ?x144) 0)) (not (= (+ ?x71 ?x51 ?x65 ?x144) 0)))))
 (let (($x110 (and (= (+ ?x71 (* x u) (* y v) ?x144) 0) $x120)))
 (let (($x153 (= (+ (* (- 1) (* u00 x00)) ?x51 ?x65 (* (- 1) (* v00 y00))) 0)))
 (let (($x95 (= (+ (* (- 1) (* u00 x00)) ?x108 ?x45 (* (- 1) (* v00 y00))) 0)))
 (let ((?x38 (* v00 y00)))
 (let ((?x85 (* (- 1) ?x38)))
 (let ((?x127 (* y v)))
 (let ((?x124 (* x u)))
 (let ((?x69 (* (- 1) (* u00 x00))))
 (let (($x87 (and (= (+ ?x69 ?x124 ?x127 ?x85) 0) (or (not $x95) (not $x153)))))
 (rewrite (= $x87 $x110)))))))))))))))))))
 ))
 (let (($x60 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x32 (* (- 1) u00 x00)))
 (let (($x57 (not (= (- (+ ?x32 ?x51 (* v (- y x))) ?x38) 0))))
 (let (($x48 (= (- (+ ?x32 (* u (- x y)) (* (+ v u) y)) ?x38) 0)))
 (let (($x49 (not $x48)))
 (let (($x58 (or $x49 $x57)))
 (let (($x41 (= (- (+ ?x32 (* u x) (* v y)) ?x38) 0)))
 (and $x41 $x58))))))))) :qid k!28))
 ))
 (let ((?x155 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x85 (* (- 1) ?x38)))
 (let ((?x65 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x69 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x108 (* (+ x (* (- 1) y)) u)))
 (let (($x154 (or (not (= (+ ?x69 ?x108 ?x45 ?x85) 0)) (not (= (+ ?x69 ?x51 ?x65 ?x85) 0)))))
 (let (($x87 (and (= (+ ?x69 (* x u) (* y v) ?x85) 0) $x154)))
 (let (($x56 (= (- (+ (* (- 1) u00 x00) ?x51 (* v (- y x))) ?x38) 0)))
 (let (($x57 (not $x56)))
 (let (($x48 (= (- (+ (* (- 1) u00 x00) (* u (- x y)) ?x45) ?x38) 0)))
 (let (($x49 (not $x48)))
 (let (($x58 (or $x49 $x57)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x59 (and $x41 $x58)))
 (rewrite (= $x59 $x87)))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x101 (mp (mp @x61 (quant-intro (proof-bind ?x155) (= $x60 $x149)) $x149) (rewrite (= $x149 $x149)) $x149)))
 (let ((@x171 (mp (mp @x101 (quant-intro (proof-bind ?x123) (= $x149 $x111)) $x111) (quant-intro (proof-bind ?x165) (= $x111 $x163)) $x163)))
 (mp @x171 @x290 false)))))))))))))))))

(:eliminated-applications 2
 :max-memory              3.31
 :memory                  3.02
 :mk-bool-var             6
 :num-allocs              962190
 :num-checks              1
 :rlimit-count            539
 :time                    0.01
 :total-time              0.01)
