unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x62 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x254 (>= ?x62 0)))
 (let (($x60 (= ?x62 0)))
 (let ((?x256 (+ 1 y!0)))
 (let ((?x87 (+ (- 1) x!1)))
 (let ((?x52 (* ?x87 ?x87 ?x87 ?x256 ?x256 (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x64 (= ?x52 0)))
 (let (($x63 (not $x64)))
 (let (($x291 (and $x60 $x63)))
 (let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x180 (+ x!1 y!0 ?x50 ?x57)))
 (let (($x73 (and (= ?x180 0) (not (= (* ?x87 ?x87 ?x87 ?x256 ?x256 ?x180) 0)))))
 (let (($x263 (exists ((x Int) (y Int) )(! (let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x71 (+ x y ?x50 ?x57)))
 (let ((?x153 (+ 1 y)))
 (let ((?x125 (+ (- 1) x)))
 (let (($x76 (= ?x71 0)))
 (and $x76 (not (= (* ?x125 ?x125 ?x125 ?x153 ?x153 ?x71) 0))))))))) :qid k!26))
 ))
 (let (($x195 (exists ((x Int) (y Int) )(! (let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x191 (+ x ?x50 ?x57 y)))
 (let ((?x153 (+ 1 y)))
 (let ((?x125 (+ (- 1) x)))
 (and (= ?x191 0) (not (= (* ?x125 ?x125 ?x125 ?x153 ?x153 ?x191) 0)))))))) :qid k!26))
 ))
 (let ((?x79 (lambda ((x Int) (y Int) )(let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x71 (+ x y ?x50 ?x57)))
 (let ((?x153 (+ 1 y)))
 (let ((?x125 (+ (- 1) x)))
 (let (($x76 (= ?x71 0)))
 (let (($x264 (and $x76 (not (= (* ?x125 ?x125 ?x125 ?x153 ?x153 ?x71) 0)))))
 (let (($x194 (not (= (* ?x125 ?x125 ?x125 ?x153 ?x153 (+ x ?x50 ?x57 y)) 0))))
 (let (($x205 (and (= (+ x ?x50 ?x57 y) 0) $x194)))
 (rewrite (= $x205 $x264))))))))))))
 ))
 (let (($x47 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x34 ?x38 ?x38) (* 0 ?x34 ?x34)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0))))))) :qid k!26))
 ))
 (let ((?x197 (lambda ((x Int) (y Int) )(let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x191 (+ x ?x50 ?x57 y)))
 (let ((?x153 (+ 1 y)))
 (let ((?x125 (+ (- 1) x)))
 (let (($x205 (and (= ?x191 0) (not (= (* ?x125 ?x125 ?x125 ?x153 ?x153 ?x191) 0)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x34 ?x38 ?x38) (* 0 ?x34 ?x34)))))
 (let (($x46 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0))))))
 (rewrite (= $x46 $x205)))))))))))))
 ))
 (let ((@x48 (asserted $x47)))
 (let ((@x145 (mp (mp @x48 (quant-intro (proof-bind ?x197) (= $x47 $x195)) $x195) (rewrite (= $x195 $x195)) $x195)))
 (let ((@x111 (mp~ (mp @x145 (quant-intro (proof-bind ?x79) (= $x195 $x263)) $x263) (sk (~ $x263 $x73)) $x73)))
 (let ((@x292 (mp @x111 (rewrite (= $x73 $x291)) $x291)))
 (let ((@x274 (and-elim @x292 $x60)))
 (let ((@x170 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x60) $x254)) @x274 $x254)))
 (let (($x65 (<= ?x62 0)))
 (let ((@x235 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x60) $x65)) @x274 $x65)))
 (let (($x165 (not (>= ?x52 0))))
 (let (($x255 (<= ?x52 0)))
 (let ((@x164 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x64 (not $x255) $x165)) (and-elim @x292 $x63) (or (not $x255) $x165))))
 (let ((@x223 (unit-resolution @x164 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x255)) @x235 @x170 false) $x255) $x165)))
 ((_ th-lemma arith farkas 1 1 1) @x223 @x235 @x170 false)))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        7
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          4
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             14
 :arith-nonlinear-horner    6
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 11
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                11
 :final-checks              2
 :max-memory                3.48
 :memory                    3.07
 :mk-bool-var               18
 :mk-clause                 15
 :num-allocs                1099209
 :num-checks                1
 :propagations              4
 :rlimit-count              823
 :time                      0.01
 :total-time                0.01)
