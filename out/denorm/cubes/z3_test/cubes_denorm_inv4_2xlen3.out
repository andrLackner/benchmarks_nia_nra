unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x618 (* (- 1) k!2)))
 (let ((?x139 (* n!0 n!0)))
 (let ((?x381 (* 3 ?x139)))
 (let ((?x552 (+ ?x381 (* 3 n!0) ?x618)))
 (let (($x491 (<= ?x552 (- 1))))
 (let (($x553 (= ?x552 (- 1))))
 (let ((?x566 (* k!2 k!2)))
 (let ((?x218 (+ k!2 c!3)))
 (let ((?x152 (+ k!2 m!1)))
 (let ((?x469 (+ 6 m!1)))
 (let ((?x144 (+ 1 n!0)))
 (let ((?x232 (* c!3 c!3)))
 (let ((?x180 (* n!0 n!0 k!2 k!2)))
 (let ((?x479 (+ (* 2 (* k!2 c!3)) (* ?x469 ?x469 ?x152 ?x152 ?x152 ?x218 ?x218 ?x218) ?x180 (* 2 (* n!0 k!2 k!2)) (* 4 (* n!0 k!2 c!3)) ?x232 (* 2 (* n!0 c!3 c!3)) (* (- 1) (* ?x144 ?x144 ?x469 ?x469 ?x152 ?x152 ?x152 ?x218 ?x218)) (* n!0 n!0 c!3 c!3) (* 2 (* n!0 n!0 k!2 c!3)) ?x566)))
 (let ((?x646 (* m!1 m!1 m!1)))
 (let ((?x151 (* 6 ?x566)))
 (let ((?x523 (* 2 (* k!2 m!1 m!1))))
 (let ((?x342 (* k!2 k!2 m!1)))
 (let ((?x754 (* 6 (* m!1 m!1))))
 (let ((?x307 (+ (* 12 (* k!2 m!1)) (* 6 ?x180) (* 12 (* n!0 k!2 k!2)) (* 12 (* n!0 m!1 m!1)) (* (- 1) (* ?x144 ?x152 ?x152 ?x152 ?x218 ?x218 ?x218)) ?x754 (* n!0 n!0 m!1 m!1 m!1) (* 6 (* n!0 n!0 m!1 m!1)) (* 24 (* n!0 k!2 m!1)) ?x342 (* (- 1) (* ?x144 ?x144 ?x469 ?x469 ?x152 ?x152 ?x218)) (* 2 (* n!0 n!0 k!2 m!1 m!1)) (* n!0 n!0 k!2 k!2 m!1) (* 2 (* n!0 m!1 m!1 m!1)) ?x523 ?x151 (* 4 (* n!0 k!2 m!1 m!1)) (* 2 (* n!0 k!2 k!2 m!1)) ?x646 (* 12 (* n!0 n!0 k!2 m!1)))))
 (let ((?x752 (* ?x307 ?x479 (+ 7 ?x381 (* 9 n!0) ?x618 (* (- 1) m!1)))))
 (let (($x750 (= ?x752 0)))
 (let (($x751 (not $x750)))
 (let ((?x382 (* 9 n!0)))
 (let ((?x118 (+ ?x382 (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)) ?x566)))
 (let ((?x384 (* (- 1) m!1)))
 (let ((?x331 (+ (* 6 n!0) ?x384)))
 (let (($x318 (= ?x331 (- 6))))
 (let (($x753 (and $x318 (= ?x118 (- 4)) (= (+ (* 2 n!0) ?x618 (* (- 3) c!3) (* n!0 k!2)) (- 1)) $x553 $x751)))
 (let ((?x221 (* k!2 k!2 n!0 n!0)))
 (let ((?x154 (+ c!3 k!2)))
 (let ((?x142 (+ ?x566 (* 2 (* k!2 k!2 n!0)) (* 4 (* c!3 k!2 n!0)) (* (- 1) (* ?x144 ?x144 ?x469 ?x469 ?x152 ?x152 ?x152 ?x154 ?x154)) (* 2 (* c!3 c!3 n!0)) (* ?x469 ?x469 ?x152 ?x152 ?x152 ?x154 ?x154 ?x154) (* 2 (* c!3 k!2)) ?x232 ?x221 (* 2 (* c!3 k!2 n!0 n!0)) (* c!3 c!3 n!0 n!0))))
 (let ((?x526 (+ ?x151 (* (- 1) (* ?x144 ?x152 ?x152 ?x152 ?x154 ?x154 ?x154)) (* (- 1) (* ?x144 ?x144 ?x469 ?x469 ?x152 ?x152 ?x154)) (* 12 (* k!2 k!2 n!0)) (* 6 ?x221) (* 6 (* m!1 m!1 n!0 n!0)) (* 6 (* m!1 k!2)) (* 12 (* k!2 m!1 n!0 n!0)) (* 2 (* m!1 m!1 m!1 n!0)) (* 4 (* k!2 m!1 m!1 n!0)) (* 2 (* k!2 k!2 m!1 n!0)) (* 12 (* m!1 m!1 n!0)) (* 24 (* k!2 m!1 n!0)) ?x646 ?x523 ?x342 ?x754 (* 6 (* k!2 m!1)) (* m!1 m!1 m!1 n!0 n!0) (* 2 (* k!2 m!1 m!1 n!0 n!0)) (* k!2 k!2 m!1 n!0 n!0))))
 (let (($x269 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x326 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x566) (* 9 (* c!3 n!0)))))
 (let (($x585 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x326 4) $x269 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x139)) 1) (not (= (* ?x526 ?x142 (+ 7 ?x618 ?x384 ?x382 ?x381)) 0)))))
 (let (($x208 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x271 (* n n)))
 (let ((?x272 (* 3 ?x271)))
 (let ((?x48 (* 9 n)))
 (let ((?x356 (* (- 1) m)))
 (let ((?x240 (* (- 1) k)))
 (let ((?x460 (* c c n n)))
 (let ((?x401 (* 2 (* c k n n))))
 (let ((?x457 (* k k n n)))
 (let ((?x451 (* c c)))
 (let ((?x405 (* 2 (* c k))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x440 (* ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x404 (* 2 (* c c n))))
 (let ((?x308 (+ 1 n)))
 (let ((?x424 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x403 (* 4 (* c k n))))
 (let ((?x423 (* k k n)))
 (let ((?x402 (* 2 ?x423)))
 (let ((?x49 (* k k)))
 (let ((?x639 (* k k m n n)))
 (let ((?x669 (* 2 (* k m m n n))))
 (let ((?x634 (* m m m n n)))
 (let ((?x612 (* 6 (* m m))))
 (let ((?x611 (* k k m)))
 (let ((?x512 (* 2 (* k m m))))
 (let ((?x596 (* m m m)))
 (let ((?x511 (* 24 (* k m n))))
 (let ((?x508 (* 12 (* m m n))))
 (let ((?x509 (* 2 (* k k m n))))
 (let ((?x506 (* 4 (* k m m n))))
 (let ((?x507 (* 2 (* m m m n))))
 (let ((?x668 (* 12 (* k m n n))))
 (let ((?x522 (* 6 (* m m n n))))
 (let ((?x538 (* 6 ?x457)))
 (let ((?x513 (* 12 ?x423)))
 (let ((?x480 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x75))))
 (let ((?x400 (* (- 1) (* ?x308 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x628 (* 6 ?x49)))
 (let ((?x291 (+ ?x628 ?x400 ?x480 ?x513 ?x538 ?x522 (* 6 (* m k)) ?x668 ?x507 ?x506 ?x509 ?x508 ?x511 ?x596 ?x512 ?x611 ?x612 (* 6 (* k m)) ?x634 ?x669 ?x639)))
 (let ((?x431 (* ?x291 (+ ?x49 ?x402 ?x403 ?x424 ?x404 ?x440 ?x405 ?x451 ?x457 ?x401 ?x460) (+ 7 ?x240 ?x356 ?x48 ?x272))))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x214 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x210 (= ?x214 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x210 $x262 $x300 (not (= ?x431 0)))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x187 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x356 (* (- 1) m)))
 (let ((?x240 (* (- 1) k)))
 (let ((?x472 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x240 ?x356 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x308 (+ 1 n)))
 (let ((?x424 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x440 (* ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x400 (* (- 1) (* ?x308 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x480 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x75))))
 (let ((?x296 (* (+ ?x480 (* ?x308 ?x308 ?x393 ?x71 ?x71) ?x400) (+ ?x440 ?x424 (* ?x308 ?x308 ?x75 ?x75)) ?x472)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x551 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 (= ?x551 (- 4)) (= (+ (* (- 3) c) (* n k) ?x240 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x240 ?x65) (- 1)) (not (= ?x296 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x175 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x271 (* n n)))
 (let ((?x272 (* 3 ?x271)))
 (let ((?x48 (* 9 n)))
 (let ((?x356 (* (- 1) m)))
 (let ((?x240 (* (- 1) k)))
 (let ((?x460 (* c c n n)))
 (let ((?x401 (* 2 (* c k n n))))
 (let ((?x457 (* k k n n)))
 (let ((?x451 (* c c)))
 (let ((?x405 (* 2 (* c k))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x440 (* ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x404 (* 2 (* c c n))))
 (let ((?x308 (+ 1 n)))
 (let ((?x424 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x403 (* 4 (* c k n))))
 (let ((?x423 (* k k n)))
 (let ((?x402 (* 2 ?x423)))
 (let ((?x49 (* k k)))
 (let ((?x639 (* k k m n n)))
 (let ((?x669 (* 2 (* k m m n n))))
 (let ((?x634 (* m m m n n)))
 (let ((?x612 (* 6 (* m m))))
 (let ((?x611 (* k k m)))
 (let ((?x512 (* 2 (* k m m))))
 (let ((?x596 (* m m m)))
 (let ((?x511 (* 24 (* k m n))))
 (let ((?x508 (* 12 (* m m n))))
 (let ((?x509 (* 2 (* k k m n))))
 (let ((?x506 (* 4 (* k m m n))))
 (let ((?x507 (* 2 (* m m m n))))
 (let ((?x668 (* 12 (* k m n n))))
 (let ((?x522 (* 6 (* m m n n))))
 (let ((?x538 (* 6 ?x457)))
 (let ((?x513 (* 12 ?x423)))
 (let ((?x480 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x75))))
 (let ((?x400 (* (- 1) (* ?x308 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x628 (* 6 ?x49)))
 (let ((?x291 (+ ?x628 ?x400 ?x480 ?x513 ?x538 ?x522 (* 6 (* m k)) ?x668 ?x507 ?x506 ?x509 ?x508 ?x511 ?x596 ?x512 ?x611 ?x612 (* 6 (* k m)) ?x634 ?x669 ?x639)))
 (let ((?x431 (* ?x291 (+ ?x49 ?x402 ?x403 ?x424 ?x404 ?x440 ?x405 ?x451 ?x457 ?x401 ?x460) (+ 7 ?x240 ?x356 ?x48 ?x272))))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) ?x271)) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x214 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x210 (= ?x214 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x131 (and $x126 $x210 $x262 $x300 (not (= ?x431 0)))))
 (let ((?x296 (* (+ ?x480 (* ?x308 ?x308 ?x393 ?x71 ?x71) ?x400) (+ ?x440 ?x424 (* ?x308 ?x308 ?x75 ?x75)) (+ 4 (* 3 (* ?x308 ?x308)) ?x240 ?x356 (* 3 n)))))
 (let ((?x551 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x188 (and $x126 (= ?x551 (- 4)) (= (+ (* (- 3) c) (* n k) ?x240 (* 2 n)) (- 1)) (= (+ ?x272 ?x240 (* 3 n)) (- 1)) (not (= ?x296 0)))))
 (rewrite (= $x188 $x131))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x93 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x76 (+ m 6)))
 (let ((?x85 (+ (* (- 1) ?x75 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68) (* ?x71 ?x71 ?x76 ?x68 ?x68))))
 (let ((?x79 (- (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76) (* ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68))))
 (let ((?x88 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (+ ?x79 (* ?x75 ?x75 ?x68 ?x68)) (- ?x85 (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x68)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x88 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x360 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x356 (* (- 1) m)))
 (let ((?x240 (* (- 1) k)))
 (let ((?x472 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x240 ?x356 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x393 (+ 6 m)))
 (let ((?x308 (+ 1 n)))
 (let ((?x424 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x440 (* ?x393 ?x393 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x400 (* (- 1) (* ?x308 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x480 (* (- 1) (* ?x308 ?x308 ?x393 ?x393 ?x71 ?x71 ?x75))))
 (let ((?x296 (* (+ ?x480 (* ?x308 ?x308 ?x393 ?x71 ?x71) ?x400) (+ ?x440 ?x424 (* ?x308 ?x308 ?x75 ?x75)) ?x472)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x551 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x188 (and $x126 (= ?x551 (- 4)) (= (+ (* (- 3) c) (* n k) ?x240 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x240 ?x65) (- 1)) (not (= ?x296 0)))))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x85 (+ (* (- 1) ?x75 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68) (* ?x71 ?x71 ?x76 ?x68 ?x68))))
 (let ((?x79 (- (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76) (* ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68))))
 (let ((?x88 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (+ ?x79 (* ?x75 ?x75 ?x68 ?x68)) (- ?x85 (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x68)))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x92 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x88 0))))))
 (rewrite (= $x92 $x188)))))))))))))))))))))))))))))))
 ))
 (let ((@x94 (asserted $x93)))
 (let ((@x540 (mp (mp @x94 (quant-intro (proof-bind ?x360) (= $x93 $x187)) $x187) (rewrite (= $x187 $x187)) $x187)))
 (let ((@x591 (mp~ (mp @x540 (quant-intro (proof-bind ?x175) (= $x187 $x208)) $x208) (sk (~ $x208 $x585)) $x585)))
 (let ((@x532 (mp @x591 (rewrite (= $x585 $x753)) $x753)))
 (let ((@x648 (and-elim @x532 $x553)))
 (let ((@x364 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x553) $x491)) @x648 $x491)))
 (let (($x590 (<= ?x331 (- 6))))
 (let ((@x239 (and-elim @x532 $x318)))
 (let ((@x137 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x318) $x590)) @x239 $x590)))
 (let (($x492 (>= ?x552 (- 1))))
 (let ((@x576 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x553) $x492)) @x648 $x492)))
 (let (($x620 (>= ?x331 (- 6))))
 (let ((@x112 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x318) $x620)) @x239 $x620)))
 (let (($x166 (not (<= ?x752 0))))
 (let (($x195 (>= ?x752 0)))
 (let ((@x661 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x195)) @x112 @x576 @x137 @x364 false) $x195)))
 (let ((@x665 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x750 $x166 (not $x195))) (and-elim @x532 $x751) (or $x166 (not $x195)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x665 @x661 $x166) @x112 @x576 @x137 @x364 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        30
 :arith-assert-upper        27
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             167
 :arith-nonlinear-bounds    31
 :arith-num-rows            11
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      6
 :arith-tableau-max-columns 62
 :arith-tableau-max-rows    11
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                19.64
 :memory                    19.18
 :mk-bool-var               18
 :mk-clause                 16
 :num-allocs                499087
 :num-checks                1
 :propagations              10
 :rlimit-count              3626
 :time                      0.01
 :total-time                0.02)
