unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x505 (* n!0 n!0)))
 (let ((?x560 (* 3 ?x505)))
 (let ((?x559 (* (- 1) k!2)))
 (let ((?x631 (+ (* 3 n!0) ?x559 ?x560)))
 (let (($x477 (<= ?x631 (- 1))))
 (let (($x339 (= ?x631 (- 1))))
 (let ((?x586 (+ k!2 c!3)))
 (let ((?x440 (+ k!2 m!1)))
 (let ((?x393 (+ 6 m!1)))
 (let ((?x527 (+ 1 n!0)))
 (let ((?x589 (* (- 1) (* k!2 k!2 k!2 m!1))))
 (let ((?x435 (* (- 18) (* k!2 m!1 m!1))))
 (let ((?x509 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x515 (* (- 1) (* m!1 m!1 m!1 m!1))))
 (let ((?x582 (* (- 3) (* k!2 m!1 m!1 m!1))))
 (let ((?x512 (* (- 18) (* k!2 k!2 m!1))))
 (let ((?x592 (* (- 6) (* m!1 m!1 m!1))))
 (let ((?x332 (* (- 3) (* k!2 k!2 m!1 m!1))))
 (let ((?x652 (+ (* (- 3) (* n!0 k!2 k!2 m!1 m!1)) (* (- 1) (* n!0 k!2 k!2 k!2 m!1)) ?x332 (* (- 1) (* ?x527 ?x527 ?x527 ?x393 ?x393 ?x393 ?x440 ?x440 ?x586)) (* (- 6) (* n!0 m!1 m!1 m!1)) (* (- 1) (* ?x527 ?x393 ?x440 ?x440 ?x440 ?x586 ?x586 ?x586)) (* (- 18) (* n!0 k!2 m!1 m!1)) (* (- 18) (* n!0 k!2 k!2 m!1)) (* (- 6) (* n!0 k!2 k!2 k!2)) ?x592 ?x512 ?x582 (* (- 1) (* n!0 m!1 m!1 m!1 m!1)) ?x515 ?x509 ?x435 (* (- 3) (* n!0 k!2 m!1 m!1 m!1)) ?x589 (* (- 1) (* ?x527 ?x393 ?x393 ?x440 ?x586 ?x586 ?x586)))))
 (let ((?x371 (* ?x652 (+ 7 (* 9 n!0) ?x559 ?x560 (* (- 1) m!1)))))
 (let (($x235 (= ?x371 0)))
 (let (($x227 (not $x235)))
 (let ((?x565 (* 9 n!0)))
 (let ((?x153 (* k!2 k!2)))
 (let ((?x599 (+ ?x153 ?x565 (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let ((?x571 (* (- 1) m!1)))
 (let ((?x107 (+ (* 6 n!0) ?x571)))
 (let (($x542 (= ?x107 (- 6))))
 (let (($x228 (and $x542 (= ?x599 (- 4)) (= (+ (* n!0 k!2) (* 2 n!0) ?x559 (* (- 3) c!3)) (- 1)) $x339 $x227)))
 (let ((?x573 (+ c!3 k!2)))
 (let ((?x561 (+ ?x512 ?x509 (* (- 1) (* m!1 m!1 m!1 m!1 n!0)) (* (- 3) (* k!2 m!1 m!1 m!1 n!0)) (* (- 3) (* k!2 k!2 m!1 m!1 n!0)) (* (- 1) (* k!2 k!2 k!2 m!1 n!0)) (* (- 1) (* ?x527 ?x393 ?x393 ?x440 ?x573 ?x573 ?x573)) (* (- 1) (* ?x527 ?x527 ?x527 ?x393 ?x393 ?x393 ?x440 ?x440 ?x573)) ?x592 ?x589 ?x332 ?x582 (* (- 6) (* m!1 m!1 m!1 n!0)) (* (- 1) (* ?x527 ?x393 ?x440 ?x440 ?x440 ?x573 ?x573 ?x573)) (* (- 18) (* k!2 m!1 m!1 n!0)) (* (- 18) (* k!2 k!2 m!1 n!0)) ?x515 (* (- 6) (* k!2 k!2 k!2 n!0)) ?x435)))
 (let (($x654 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x613 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x153) (* 9 (* c!3 n!0)))))
 (let (($x541 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x613 4) $x654 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x505)) 1) (not (= (* ?x561 (+ 7 ?x559 ?x571 ?x565 ?x560)) 0)))))
 (let (($x192 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x688 (* (- 18) (* k m m))))
 (let ((?x685 (* (- 6) (* k k k n))))
 (let ((?x649 (* (- 1) (* m m m m))))
 (let ((?x682 (* (- 18) (* k k m n))))
 (let ((?x679 (* (- 18) (* k m m n))))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x676 (* (- 6) (* m m m n))))
 (let ((?x673 (* (- 3) (* k m m m))))
 (let ((?x670 (* (- 3) (* k k m m))))
 (let ((?x643 (* (- 1) (* k k k m))))
 (let ((?x667 (* (- 6) (* m m m))))
 (let ((?x593 (* (- 1) (* ?x305 ?x305 ?x305 ?x392 ?x392 ?x392 ?x71 ?x71 ?x76))))
 (let ((?x564 (* (- 1) (* ?x305 ?x392 ?x392 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x641 (* (- 1) (* k k k m n))))
 (let ((?x664 (* (- 3) (* k k m m n))))
 (let ((?x661 (* (- 3) (* k m m m n))))
 (let ((?x638 (* (- 1) (* m m m m n))))
 (let ((?x658 (* (- 6) (* k k k))))
 (let ((?x655 (* (- 18) (* k k m))))
 (let ((?x277 (+ ?x655 ?x658 ?x638 ?x661 ?x664 ?x641 ?x564 ?x593 ?x667 ?x643 ?x670 ?x673 ?x676 ?x429 ?x679 ?x682 ?x649 ?x685 ?x688)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x277 (+ 7 ?x237 ?x353 ?x48 ?x269)) 0))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x513 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x441 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x76 (+ c k)))
 (let ((?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x564 (* (- 1) (* ?x305 ?x392 ?x392 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x593 (* (- 1) (* ?x305 ?x305 ?x305 ?x392 ?x392 ?x392 ?x71 ?x71 ?x76))))
 (let (($x288 (= (* (+ ?x593 ?x564 ?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71))) ?x441) 0)))
 (let (($x476 (not $x288)))
 (let (($x408 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x177 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x177 $x408 $x476)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x220 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x688 (* (- 18) (* k m m))))
 (let ((?x685 (* (- 6) (* k k k n))))
 (let ((?x649 (* (- 1) (* m m m m))))
 (let ((?x682 (* (- 18) (* k k m n))))
 (let ((?x679 (* (- 18) (* k m m n))))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x676 (* (- 6) (* m m m n))))
 (let ((?x673 (* (- 3) (* k m m m))))
 (let ((?x670 (* (- 3) (* k k m m))))
 (let ((?x643 (* (- 1) (* k k k m))))
 (let ((?x667 (* (- 6) (* m m m))))
 (let ((?x593 (* (- 1) (* ?x305 ?x305 ?x305 ?x392 ?x392 ?x392 ?x71 ?x71 ?x76))))
 (let ((?x564 (* (- 1) (* ?x305 ?x392 ?x392 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x641 (* (- 1) (* k k k m n))))
 (let ((?x664 (* (- 3) (* k k m m n))))
 (let ((?x661 (* (- 3) (* k m m m n))))
 (let ((?x638 (* (- 1) (* m m m m n))))
 (let ((?x658 (* (- 6) (* k k k))))
 (let ((?x655 (* (- 18) (* k k m))))
 (let ((?x277 (+ ?x655 ?x658 ?x638 ?x661 ?x664 ?x641 ?x564 ?x593 ?x667 ?x643 ?x670 ?x673 ?x676 ?x429 ?x679 ?x682 ?x649 ?x685 ?x688)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x293 (and $x123 $x207 $x259 $x297 (not (= (* ?x277 (+ 7 ?x237 ?x353 ?x48 ?x269)) 0)))))
 (let ((?x280 (* (+ ?x593 ?x564 ?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71))) (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 (* 3 n)))))
 (let (($x476 (not (= ?x280 0))))
 (let (($x408 (= (+ ?x269 ?x237 (* 3 n)) (- 1))))
 (let (($x177 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x427 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x177 $x408 $x476)))
 (rewrite (= $x427 $x293)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x449 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x441 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x76 (+ c k)))
 (let ((?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x564 (* (- 1) (* ?x305 ?x392 ?x392 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x593 (* (- 1) (* ?x305 ?x305 ?x305 ?x392 ?x392 ?x392 ?x71 ?x71 ?x76))))
 (let (($x288 (= (* (+ ?x593 ?x564 ?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71))) ?x441) 0)))
 (let (($x476 (not $x288)))
 (let (($x408 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x461 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x461 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x408 $x476))))))))))))))))))) :qid k!34))
 ))
 (let ((?x517 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x441 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x76 (+ c k)))
 (let ((?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x564 (* (- 1) (* ?x305 ?x392 ?x392 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x593 (* (- 1) (* ?x305 ?x305 ?x305 ?x392 ?x392 ?x392 ?x71 ?x71 ?x76))))
 (let (($x288 (= (* (+ ?x593 ?x564 ?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71))) ?x441) 0)))
 (let (($x476 (not $x288)))
 (let (($x408 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x177 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x427 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x177 $x408 $x476)))
 (let ((?x48 (* 9 n)))
 (let ((?x461 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x481 (and $x123 (= ?x461 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x408 $x476)))
 (rewrite (= $x481 $x427))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x82 (- (* (- 1) ?x76 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68 ?x68 ?x68) (* ?x76 ?x76 ?x76 ?x71 ?x77 ?x77 ?x68))))
 (let ((?x84 (- (- ?x82 (* ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x68)) (* ?x71 ?x71 ?x71 ?x77 ?x68))))
 (let (($x86 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x84) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x86))))))))))))))))) :qid k!34))
 ))
 (let ((?x603 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x441 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x76 (+ c k)))
 (let ((?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x564 (* (- 1) (* ?x305 ?x392 ?x392 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x593 (* (- 1) (* ?x305 ?x305 ?x305 ?x392 ?x392 ?x392 ?x71 ?x71 ?x76))))
 (let (($x288 (= (* (+ ?x593 ?x564 ?x429 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71))) ?x441) 0)))
 (let (($x476 (not $x288)))
 (let (($x408 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x461 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x481 (and $x123 (= ?x461 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x408 $x476)))
 (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x82 (- (* (- 1) ?x76 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68 ?x68 ?x68) (* ?x76 ?x76 ?x76 ?x71 ?x77 ?x77 ?x68))))
 (let ((?x84 (- (- ?x82 (* ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x68)) (* ?x71 ?x71 ?x71 ?x77 ?x68))))
 (let (($x86 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x84) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x86)))))
 (rewrite (= $x89 $x481))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x444 (mp (mp @x91 (quant-intro (proof-bind ?x603) (= $x90 $x449)) $x449) (rewrite (= $x449 $x449)) $x449)))
 (let ((@x447 (mp (mp @x444 (quant-intro (proof-bind ?x517) (= $x449 $x513)) $x513) (quant-intro (proof-bind ?x220) (= $x513 $x192)) $x192)))
 (let ((@x183 (mp (mp~ @x447 (sk (~ $x192 $x541)) $x541) (rewrite (= $x541 $x228)) $x228)))
 (let ((@x500 (and-elim @x183 $x339)))
 (let ((@x258 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x339) $x477)) @x500 $x477)))
 (let (($x252 (<= ?x107 (- 6))))
 (let ((@x543 (and-elim @x183 $x542)))
 (let ((@x232 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x542) $x252)) @x543 $x252)))
 (let (($x182 (>= ?x631 (- 1))))
 (let ((@x242 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x339) $x182)) @x500 $x182)))
 (let (($x225 (>= ?x107 (- 6))))
 (let ((@x276 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x542) $x225)) @x543 $x225)))
 (let (($x304 (not (<= ?x371 0))))
 (let (($x111 (>= ?x371 0)))
 (let ((@x544 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x111)) @x276 @x242 @x232 @x258 false) $x111)))
 (let ((@x115 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x235 $x304 (not $x111))) (and-elim @x183 $x227) (or $x304 (not $x111)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x115 @x544 $x304) @x276 @x242 @x232 @x258 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        22
 :arith-assert-upper        23
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-ineq-splits         2
 :arith-max-min             259
 :arith-nonlinear-bounds    16
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                16
 :final-checks              7
 :max-memory                3.65
 :memory                    3.19
 :mk-bool-var               28
 :mk-clause                 16
 :num-allocs                1144583
 :num-checks                1
 :propagations              12
 :rlimit-count              4428
 :time                      0.01
 :total-time                0.01)
