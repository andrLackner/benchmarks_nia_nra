unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x218 (* 12 m!1)))
 (let ((?x139 (* m!1 m!1)))
 (let ((?x274 (+ m!1 k!2)))
 (let ((?x224 (+ 6 m!1)))
 (let ((?x231 (+ 1 n!0)))
 (let ((?x95 (+ 36 (* (- 1) (* ?x231 ?x231 ?x224 ?x274 ?x274 (+ k!2 c!3))) ?x139 ?x218)))
 (let (($x957 (<= ?x95 0)))
 (let ((?x246 (* (- 1) k!2)))
 (let ((?x193 (+ (* 3 (* n!0 n!0)) ?x246 (* 3 n!0))))
 (let (($x272 (<= ?x193 (- 1))))
 (let (($x192 (= ?x193 (- 1))))
 (let ((?x133 (* (- 3) c!3)))
 (let ((?x225 (* 2 n!0)))
 (let ((?x138 (* (- 3) k!2)))
 (let ((?x212 (* m!1 n!0)))
 (let ((?x170 (* k!2 n!0)))
 (let ((?x234 (* ?x95 (+ 3 ?x170 ?x212 ?x138 ?x225 ?x133))))
 (let (($x220 (= ?x234 0)))
 (let (($x400 (not $x220)))
 (let ((?x279 (+ ?x170 ?x246 ?x225 ?x133)))
 (let (($x247 (= ?x279 (- 1))))
 (let ((?x497 (* 18 c!3)))
 (let ((?x499 (* (- 9) n!0)))
 (let ((?x500 (* (- 1) (* k!2 k!2))))
 (let ((?x123 (* 5 k!2)))
 (let ((?x493 (+ m!1 (* (- 6) n!0))))
 (let (($x444 (= ?x493 6)))
 (let (($x235 (and $x444 (= (+ (* 9 (* n!0 c!3)) ?x123 ?x500 ?x499 ?x497) 4) $x247 $x192 $x400)))
 (let ((?x145 (* (- 1) (* ?x231 ?x231 ?x224 (+ k!2 m!1) (+ k!2 m!1) (+ c!3 k!2)))))
 (let (($x99 (= (* (+ 36 ?x218 ?x145 ?x139) (+ 3 ?x133 ?x138 ?x225 ?x170 ?x212)) 0)))
 (let (($x196 (and $x444 (= (+ ?x497 ?x123 ?x499 ?x500 (* 9 (* c!3 n!0))) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x170)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x99))))
 (let (($x236 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x217 (* (- 3) c)))
 (let ((?x405 (+ 3 ?x217 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x419 (* m m)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x395 (* (- 1) (* ?x337 ?x337 ?x410 ?x71 ?x71 ?x68))))
 (let ((?x434 (* 12 m)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x204 $x256 $x294 (not (= (* (+ 36 ?x434 ?x395 ?x419) ?x405) 0))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x439 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x217 (* (- 3) c)))
 (let ((?x352 (+ 3 ?x217 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x395 (* (- 1) (* ?x337 ?x337 ?x410 ?x71 ?x71 ?x68))))
 (let (($x127 (not (= (* (+ (* ?x410 ?x410) ?x395) ?x352) 0))))
 (let (($x255 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x163 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x163 $x255 $x127)))))))))))))))))) :qid k!34))
 ))
 (let ((?x364 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x217 (* (- 3) c)))
 (let ((?x405 (+ 3 ?x217 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x419 (* m m)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x395 (* (- 1) (* ?x337 ?x337 ?x410 ?x71 ?x71 ?x68))))
 (let ((?x434 (* 12 m)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x227 (and $x120 $x204 $x256 $x294 (not (= (* (+ 36 ?x434 ?x395 ?x419) ?x405) 0)))))
 (let ((?x408 (* (+ (* ?x410 ?x410) ?x395) (+ 3 ?x217 (* (- 4) k) (* ?x337 ?x71) (* (- 1) m) ?x59))))
 (let (($x127 (not (= ?x408 0))))
 (let (($x255 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x163 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x327 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x163 $x255 $x127)))
 (rewrite (= $x327 $x227)))))))))))))))))))))))))))))
 ))
 (let (($x128 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x217 (* (- 3) c)))
 (let ((?x352 (+ 3 ?x217 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x395 (* (- 1) (* ?x337 ?x337 ?x410 ?x71 ?x71 ?x68))))
 (let (($x127 (not (= (* (+ (* ?x410 ?x410) ?x395) ?x352) 0))))
 (let (($x255 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x412 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= ?x412 (- 4)) (= (+ ?x217 (* n k) (* (- 1) k) ?x59) (- 1)) $x255 $x127))))))))))))))) :qid k!34))
 ))
 (let ((?x136 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x217 (* (- 3) c)))
 (let ((?x352 (+ 3 ?x217 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x395 (* (- 1) (* ?x337 ?x337 ?x410 ?x71 ?x71 ?x68))))
 (let (($x127 (not (= (* (+ (* ?x410 ?x410) ?x395) ?x352) 0))))
 (let (($x255 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x163 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x327 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x163 $x255 $x127)))
 (let ((?x48 (* 9 n)))
 (let ((?x412 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x146 (and $x120 (= ?x412 (- 4)) (= (+ ?x217 (* n k) (* (- 1) k) ?x59) (- 1)) $x255 $x127)))
 (rewrite (= $x146 $x327))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x83 (= (* ?x77 (- (* ?x78 ?x78) (* ?x68 ?x71 ?x71 ?x78 ?x72 ?x72))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x83)))))))))))))))) :qid k!34))
 ))
 (let ((?x132 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x217 (* (- 3) c)))
 (let ((?x352 (+ 3 ?x217 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x337 (+ 1 n)))
 (let ((?x395 (* (- 1) (* ?x337 ?x337 ?x410 ?x71 ?x71 ?x68))))
 (let (($x127 (not (= (* (+ (* ?x410 ?x410) ?x395) ?x352) 0))))
 (let (($x255 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x412 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x146 (and $x120 (= ?x412 (- 4)) (= (+ ?x217 (* n k) (* (- 1) k) ?x59) (- 1)) $x255 $x127)))
 (let ((?x81 (- (* (+ m 6) (+ m 6)) (* ?x68 ?x71 ?x71 (+ m 6) (+ n 1) (+ n 1)))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x81) 0))))))
 (rewrite (= $x86 $x146)))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x314 (mp (mp @x88 (quant-intro (proof-bind ?x132) (= $x87 $x128)) $x128) (rewrite (= $x128 $x128)) $x128)))
 (let ((@x125 (mp (mp @x314 (quant-intro (proof-bind ?x136) (= $x128 $x439)) $x439) (quant-intro (proof-bind ?x364) (= $x439 $x236)) $x236)))
 (let ((@x283 (mp (mp~ @x125 (sk (~ $x236 $x196)) $x196) (rewrite (= $x196 $x235)) $x235)))
 (let ((@x171 (and-elim @x283 $x192)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x192) $x272)) @x171 $x272)))
 (let (($x424 (>= ?x193 (- 1))))
 (let ((@x111 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x192) $x424)) @x171 $x424)))
 (let (($x440 (<= ?x279 (- 1))))
 (let ((@x360 (and-elim @x283 $x247)))
 (let ((@x173 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x247) $x440)) @x360 $x440)))
 (let (($x267 (>= ?x279 (- 1))))
 (let ((@x113 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x247) $x267)) @x360 $x267)))
 (let (($x277 (<= ?x493 6)))
 (let ((@x126 (and-elim @x283 $x444)))
 (let ((@x232 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x444) $x277)) @x126 $x277)))
 (let (($x271 (>= ?x493 6)))
 (let ((@x290 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x444) $x271)) @x126 $x271)))
 (let (($x977 (not (<= ?x234 0))))
 (let (($x141 (>= ?x234 0)))
 (let (($x403 (not $x957)))
 (let (($x749 (= ?x95 0)))
 (let (($x995 (not $x749)))
 (let (($x320 (not $x141)))
 (let ((@x319 (hypothesis $x320)))
 (let (($x923 (>= ?x95 0)))
 (let ((@x858 (hypothesis $x749)))
 (let ((@x1076 ((_ th-lemma arith farkas 1 1 1) @x319 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x995 $x923)) @x858 $x923) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x995 $x957)) @x858 $x957) false)))
 (let (($x952 (not $x923)))
 (let ((@x843 (hypothesis $x952)))
 (let ((@x743 (lemma ((_ th-lemma arith) @x319 @x843 @x290 @x232 @x113 @x173 @x111 @x238 false) (or $x923 $x141))))
 (let ((@x1118 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x749 $x403 $x952)) (unit-resolution @x743 @x319 $x923) (unit-resolution (lemma @x1076 (or $x995 $x141)) @x319 $x995) $x403)))
 (let ((@x1124 (lemma ((_ th-lemma arith) @x319 @x1118 @x290 @x232 @x113 @x173 @x111 @x238 false) $x141)))
 (let ((@x966 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x220 $x977 $x320)) (and-elim @x283 $x400) (or $x977 $x320))))
 (let ((@x967 (unit-resolution @x966 @x1124 $x977)))
 (let ((@x968 ((_ th-lemma arith) @x967 (hypothesis $x403) @x290 @x232 @x113 @x173 @x111 @x238 false)))
 (let ((@x741 (lemma ((_ th-lemma arith) @x967 @x843 @x290 @x232 @x113 @x173 @x111 @x238 false) $x923)))
 ((_ th-lemma arith farkas 1 1 1) @x967 @x741 (lemma @x968 $x957) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 29
 :arith-assert-diseq        8
 :arith-assert-lower        346
 :arith-assert-upper        306
 :arith-bound-prop          1
 :arith-branch-var          18
 :arith-conflicts           29
 :arith-eq-adapter          11
 :arith-fixed-eqs           48
 :arith-gcd-tests           217
 :arith-gomory-cuts         12
 :arith-grobner             26
 :arith-ineq-splits         18
 :arith-max-min             1822
 :arith-nonlinear-bounds    46
 :arith-nonlinear-horner    338
 :arith-num-rows            19
 :arith-patches             38
 :arith-patches_succ        3
 :arith-pivots              643
 :arith-pseudo-nonlinear    60
 :arith-row-summations      5950
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    19
 :conflicts                 29
 :decisions                 117
 :del-clause                62
 :final-checks              101
 :max-memory                4.14
 :memory                    3.17
 :minimized-lits            2
 :mk-bool-var               165
 :mk-clause                 109
 :num-allocs                149172745
 :num-checks                1
 :propagations              98
 :rlimit-count              881184
 :time                      1.06
 :total-time                1.06)
