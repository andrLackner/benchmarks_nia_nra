unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x713 (* (- 9) n!0)))
 (let ((?x525 (* 5 k!2)))
 (let ((?x901 (* c!3 n!0)))
 (let ((?x890 (* 9 ?x901)))
 (let ((?x514 (* k!2 k!2)))
 (let ((?x518 (* (- 1) ?x514)))
 (let ((?x649 (* 18 c!3)))
 (let ((?x793 (+ ?x649 ?x518 ?x890 ?x525 ?x713)))
 (let (($x641 (<= ?x793 4)))
 (let (($x582 (= ?x793 4)))
 (let ((?x1277 (* c!3 k!2)))
 (let ((?x717 (+ c!3 k!2)))
 (let ((?x1214 (+ 6 m!1)))
 (let ((?x710 (+ 1 n!0)))
 (let ((?x1260 (* ?x710 ?x710 ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x717 ?x717 ?x717)))
 (let ((?x761 (+ k!2 m!1)))
 (let ((?x1221 (* ?x710 ?x710 ?x710 ?x1214 ?x761 ?x761 ?x761 ?x717 ?x717 ?x717)))
 (let ((?x1139 (* m!1 m!1 m!1 n!0 n!0)))
 (let ((?x911 (* k!2 m!1 m!1)))
 (let ((?x796 (* m!1 m!1 m!1)))
 (let ((?x711 (* c!3 m!1)))
 (let ((?x595 (* ?x710 ?x1214 ?x761 ?x761 ?x761 ?x717 ?x717 ?x717)))
 (let ((?x497 (* ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x761 ?x717 ?x717 ?x717)))
 (let ((?x350 (* c!3 k!2 n!0 n!0)))
 (let ((?x300 (* c!3 m!1 n!0 n!0)))
 (let ((?x290 (* k!2 m!1 m!1 n!0 n!0)))
 (let ((?x262 (* ?x710 ?x710 ?x1214 ?x761 ?x717 ?x717 ?x717)))
 (let ((?x238 (* k!2 k!2 n!0 n!0)))
 (let ((?x770 (+ (* 2 (* c!3 k!2 n!0)) (* (- 7) c!3) (* 12 (* m!1 m!1)) (* 72 (* m!1 n!0)) ?x238 ?x262 (* (- 1) (* ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x717 ?x717 ?x717)) (* 13 (* k!2 m!1)) ?x290 ?x300 (* (- 3) (* ?x710 ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x717 ?x717 ?x717)) ?x350 ?x497 ?x514 (* 12 (* m!1 m!1 n!0 n!0)) (* 13 (* k!2 m!1 n!0 n!0)) (* 26 (* k!2 m!1 n!0)) (* (- 15) (* c!3 n!0 n!0 n!0)) ?x595 ?x711 (* 36 (* m!1 n!0 n!0)) (* 2 (* k!2 m!1 m!1 n!0)) (* 3 (* ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x761)) (* (- 1) (* ?x710 ?x710 ?x1214 ?x1214 ?x761 ?x761)) (* (- 1) (* ?x710 ?x710 ?x1214 ?x717 ?x717 ?x717)) (* (- 3) (* ?x710 ?x710 ?x710 ?x710 ?x1214 ?x717 ?x717 ?x717)) (* (- 3) (* k!2 n!0 n!0 n!0 n!0)) ?x796 (* 3 (* ?x710 ?x710 ?x1214 ?x761 ?x761 ?x761 ?x717 ?x717 ?x717)) (* (- 1) (* ?x710 ?x1214 ?x761 ?x761 ?x761 ?x761 ?x717 ?x717 ?x717)) (* (- 3) (* ?x710 ?x710 ?x710 ?x1214 ?x717 ?x717 ?x717)) (* (- 3) (* c!3 n!0 n!0 n!0 n!0)) (* (- 15) (* k!2 n!0 n!0 n!0)) (* (- 23) ?x901) (* 49 (* k!2 n!0)) ?x911 (* 24 (* m!1 m!1 n!0)) ?x1139 (* (- 28) (* c!3 n!0 n!0)) (* 2 (* k!2 k!2 n!0)) (* 29 k!2) (* 3 ?x1221) (* 3 (* ?x710 ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x761)) (* (- 3) ?x1260) (* 36 m!1) ?x1277 (* 2 (* m!1 m!1 m!1 n!0)) (* 8 (* k!2 n!0 n!0)) (* 2 (* c!3 m!1 n!0)))))
 (let (($x772 (= ?x770 0)))
 (let (($x1006 (not $x772)))
 (let ((?x157 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x567 (= ?x157 (- 1))))
 (let ((?x902 (* (- 2) n!0)))
 (let ((?x903 (* k!2 n!0)))
 (let ((?x893 (* (- 1) ?x903)))
 (let ((?x905 (* 3 c!3)))
 (let ((?x824 (+ ?x905 ?x893 k!2 ?x902)))
 (let (($x325 (= ?x824 1)))
 (let ((?x1225 (+ m!1 (* (- 6) n!0))))
 (let (($x726 (= ?x1225 6)))
 (let (($x561 (and $x726 $x582 $x325 $x567 $x1006)))
 (let ((?x263 (* ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x717 ?x717 ?x717)))
 (let ((?x729 (* ?x710 ?x710 ?x1214 ?x1214 ?x761 ?x761)))
 (let ((?x813 (* ?x710 ?x1214 ?x761 ?x761 ?x761 ?x761 ?x717 ?x717 ?x717)))
 (let ((?x754 (* ?x710 ?x710 ?x1214 ?x717 ?x717 ?x717)))
 (let ((?x115 (+ (* 7 c!3) (* (- 29) k!2) (* (- 36) m!1) ?x518 (* (- 49) ?x903) (* 23 ?x901) (* (- 1) ?x911) (* (- 12) (* m!1 m!1)) (* (- 13) (* k!2 m!1)) (* (- 1) ?x1139) (* (- 1) ?x290) (* (- 1) ?x796) (* (- 72) (* m!1 n!0)) (* (- 26) (* k!2 m!1 n!0)) (* (- 24) (* m!1 m!1 n!0)) (* (- 2) (* k!2 m!1 m!1 n!0)) (* (- 2) (* m!1 m!1 m!1 n!0)) (* (- 8) (* k!2 n!0 n!0)) (* (- 36) (* m!1 n!0 n!0)) (* (- 13) (* k!2 m!1 n!0 n!0)) (* (- 12) (* m!1 m!1 n!0 n!0)) (* 3 (* ?x710 ?x710 ?x710 ?x710 ?x1214 ?x717 ?x717 ?x717)) (* 3 (* ?x710 ?x710 ?x710 ?x1214 ?x717 ?x717 ?x717)) ?x754 ?x813 ?x729 (* (- 3) (* ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x761)) (* (- 3) (* ?x710 ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x761)) ?x263 (* 3 (* ?x710 ?x710 ?x710 ?x710 ?x1214 ?x1214 ?x717 ?x717 ?x717)) (* 3 ?x1260) (* (- 1) ?x262) (* (- 1) ?x497) (* (- 3) ?x1221) (* 15 (* k!2 n!0 n!0 n!0)) (* (- 3) (* ?x710 ?x710 ?x1214 ?x761 ?x761 ?x761 ?x717 ?x717 ?x717)) (* (- 1) ?x595) (* 28 (* c!3 n!0 n!0)) (* 3 (* k!2 n!0 n!0 n!0 n!0)) (* 3 (* c!3 n!0 n!0 n!0 n!0)) (* 15 (* c!3 n!0 n!0 n!0)) (* (- 1) ?x1277) (* (- 1) ?x711) (* (- 2) (* c!3 k!2 n!0)) (* (- 2) (* c!3 m!1 n!0)) (* (- 2) (* k!2 k!2 n!0)) (* (- 1) ?x238) (* (- 1) ?x300) (* (- 1) ?x350))))
 (let (($x765 (and $x726 (= (+ ?x649 ?x525 ?x713 ?x518 ?x890) 4) (= (+ ?x905 k!2 ?x902 ?x893) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x115 0)))))
 (let (($x909 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x1232 (* (- 1) (* c k n n))))
 (let ((?x1235 (* (- 1) (* c m n n))))
 (let ((?x1230 (* (- 1) (* k k n n))))
 (let ((?x1375 (* (- 2) (* k k n))))
 (let ((?x1242 (* (- 2) (* c m n))))
 (let ((?x1243 (* (- 2) (* c k n))))
 (let ((?x1484 (* (- 1) (* c m))))
 (let ((?x1481 (* (- 1) (* c k))))
 (let ((?x1011 (* 3 (* c n n n n))))
 (let ((?x1009 (* 3 (* k n n n n))))
 (let ((?x78 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x323 (+ 6 m)))
 (let ((?x326 (+ 1 n)))
 (let ((?x465 (* (- 1) (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x935 (* (- 3) (* ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x900 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x866 (* (- 1) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x845 (* (- 1) (* ?x326 ?x326 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x821 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x812 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x804 (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x762 (* (- 3) (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x730 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x690 (* ?x326 ?x326 ?x323 ?x323 ?x68 ?x68)))
 (let ((?x540 (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78)))
 (let ((?x533 (* ?x326 ?x326 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x498 (* 3 (* ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x484 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x49 (* k k)))
 (let ((?x228 (* (- 1) ?x49)))
 (let ((?x990 (+ (* 7 c) (* (- 29) k) (* (- 36) m) ?x228 (* (- 49) (* k n)) (* 23 (* c n)) (* (- 1) (* k m m)) (* (- 12) (* m m)) (* (- 13) (* k m)) (* (- 1) (* m m m n n)) (* (- 1) (* k m m n n)) (* (- 1) (* m m m)) (* (- 72) (* m n)) (* (- 26) (* k m n)) (* (- 24) (* m m n)) (* (- 2) (* k m m n)) (* (- 2) (* m m m n)) (* (- 8) (* k n n)) (* (- 36) (* m n n)) (* (- 13) (* k m n n)) (* (- 12) (* m m n n)) ?x484 ?x498 ?x533 ?x540 ?x690 ?x730 ?x762 ?x804 ?x812 ?x821 ?x845 ?x866 ?x900 (* 15 (* k n n n)) ?x935 ?x465 (* 28 (* c n n)) ?x1009 ?x1011 (* 15 (* c n n n)) ?x1481 ?x1484 ?x1243 ?x1242 ?x1375 ?x1230 ?x1235 ?x1232)))
 (let (($x315 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x277 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x227 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x225 (= (+ ?x40 ?x44 ?x227 ?x228 (* 9 (* c n))) 4)))
 (let (($x141 (= (+ m (* (- 6) n)) 6)))
 (and $x141 $x225 $x277 $x315 (not (= ?x990 0)))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x872 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x1200 (* (- 1) (* (+ 1 n) (+ 1 n) (+ k m) (+ c k)))))
 (let ((?x78 (+ c k)))
 (let ((?x323 (+ 6 m)))
 (let ((?x326 (+ 1 n)))
 (let ((?x533 (* ?x326 ?x326 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x68 (+ k m)))
 (let ((?x540 (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78)))
 (let ((?x484 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x465 (* (- 1) (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x498 (* 3 (* ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x935 (* (- 3) (* ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x900 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x866 (* (- 1) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x845 (* (- 1) (* ?x326 ?x326 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x821 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x812 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x804 (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x762 (* (- 3) (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x730 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x690 (* ?x326 ?x326 ?x323 ?x323 ?x68 ?x68)))
 (let ((?x1209 (+ ?x690 (* (- 1) (* ?x326 ?x326 ?x323 ?x323 ?x68)) ?x730 ?x762 (* 3 (* ?x326 ?x326 ?x326 ?x78)) (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x78)) (* ?x326 ?x326 ?x78) ?x804 ?x812 ?x821 ?x845 ?x866 ?x900 ?x935 ?x498 ?x465 ?x484 ?x540 ?x533 ?x1200)))
 (let (($x683 (not (= ?x1209 0))))
 (let (($x665 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x211 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x228 (* (- 1) ?x49)))
 (let ((?x227 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x141 (= (+ m (* (- 6) n)) 6)))
 (and $x141 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x227 ?x228) 4) $x211 $x665 $x683))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x925 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x1232 (* (- 1) (* c k n n))))
 (let ((?x1235 (* (- 1) (* c m n n))))
 (let ((?x1230 (* (- 1) (* k k n n))))
 (let ((?x1375 (* (- 2) (* k k n))))
 (let ((?x1242 (* (- 2) (* c m n))))
 (let ((?x1243 (* (- 2) (* c k n))))
 (let ((?x1484 (* (- 1) (* c m))))
 (let ((?x1481 (* (- 1) (* c k))))
 (let ((?x1011 (* 3 (* c n n n n))))
 (let ((?x1009 (* 3 (* k n n n n))))
 (let ((?x78 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x323 (+ 6 m)))
 (let ((?x326 (+ 1 n)))
 (let ((?x465 (* (- 1) (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x935 (* (- 3) (* ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x900 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x866 (* (- 1) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x845 (* (- 1) (* ?x326 ?x326 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x821 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x812 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x804 (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x762 (* (- 3) (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x730 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x690 (* ?x326 ?x326 ?x323 ?x323 ?x68 ?x68)))
 (let ((?x540 (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78)))
 (let ((?x533 (* ?x326 ?x326 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x498 (* 3 (* ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x484 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x49 (* k k)))
 (let ((?x228 (* (- 1) ?x49)))
 (let ((?x990 (+ (* 7 c) (* (- 29) k) (* (- 36) m) ?x228 (* (- 49) (* k n)) (* 23 (* c n)) (* (- 1) (* k m m)) (* (- 12) (* m m)) (* (- 13) (* k m)) (* (- 1) (* m m m n n)) (* (- 1) (* k m m n n)) (* (- 1) (* m m m)) (* (- 72) (* m n)) (* (- 26) (* k m n)) (* (- 24) (* m m n)) (* (- 2) (* k m m n)) (* (- 2) (* m m m n)) (* (- 8) (* k n n)) (* (- 36) (* m n n)) (* (- 13) (* k m n n)) (* (- 12) (* m m n n)) ?x484 ?x498 ?x533 ?x540 ?x690 ?x730 ?x762 ?x804 ?x812 ?x821 ?x845 ?x866 ?x900 (* 15 (* k n n n)) ?x935 ?x465 (* 28 (* c n n)) ?x1009 ?x1011 (* 15 (* c n n n)) ?x1481 ?x1484 ?x1243 ?x1242 ?x1375 ?x1230 ?x1235 ?x1232)))
 (let (($x315 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x277 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x227 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x225 (= (+ ?x40 ?x44 ?x227 ?x228 (* 9 (* c n))) 4)))
 (let (($x141 (= (+ m (* (- 6) n)) 6)))
 (let (($x386 (and $x141 $x225 $x277 $x315 (not (= ?x990 0)))))
 (let ((?x1209 (+ ?x690 (* (- 1) (* ?x326 ?x326 ?x323 ?x323 ?x68)) ?x730 ?x762 (* 3 (* ?x326 ?x326 ?x326 ?x78)) (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x78)) (* ?x326 ?x326 ?x78) ?x804 ?x812 ?x821 ?x845 ?x866 ?x900 ?x935 ?x498 ?x465 ?x484 ?x540 ?x533 (* (- 1) (* ?x326 ?x326 ?x68 ?x78)))))
 (let (($x683 (not (= ?x1209 0))))
 (let (($x665 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x211 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x194 (and $x141 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x227 ?x228) 4) $x211 $x665 $x683)))
 (rewrite (= $x194 $x386))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x689 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x1200 (* (- 1) (* (+ 1 n) (+ 1 n) (+ k m) (+ c k)))))
 (let ((?x78 (+ c k)))
 (let ((?x323 (+ 6 m)))
 (let ((?x326 (+ 1 n)))
 (let ((?x533 (* ?x326 ?x326 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x68 (+ k m)))
 (let ((?x540 (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78)))
 (let ((?x484 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x465 (* (- 1) (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x498 (* 3 (* ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x935 (* (- 3) (* ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x900 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x866 (* (- 1) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x845 (* (- 1) (* ?x326 ?x326 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x821 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x812 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x804 (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x762 (* (- 3) (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x730 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x690 (* ?x326 ?x326 ?x323 ?x323 ?x68 ?x68)))
 (let ((?x1209 (+ ?x690 (* (- 1) (* ?x326 ?x326 ?x323 ?x323 ?x68)) ?x730 ?x762 (* 3 (* ?x326 ?x326 ?x326 ?x78)) (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x78)) (* ?x326 ?x326 ?x78) ?x804 ?x812 ?x821 ?x845 ?x866 ?x900 ?x935 ?x498 ?x465 ?x484 ?x540 ?x533 ?x1200)))
 (let (($x683 (not (= ?x1209 0))))
 (let (($x665 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x631 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x578 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x141 (= (+ m (* (- 6) n)) 6)))
 (and $x141 (= ?x578 (- 4)) $x631 $x665 $x683))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x873 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x1200 (* (- 1) (* (+ 1 n) (+ 1 n) (+ k m) (+ c k)))))
 (let ((?x78 (+ c k)))
 (let ((?x323 (+ 6 m)))
 (let ((?x326 (+ 1 n)))
 (let ((?x533 (* ?x326 ?x326 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x68 (+ k m)))
 (let ((?x540 (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78)))
 (let ((?x484 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x465 (* (- 1) (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x498 (* 3 (* ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x935 (* (- 3) (* ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x900 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x866 (* (- 1) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x845 (* (- 1) (* ?x326 ?x326 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x821 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x812 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x804 (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x762 (* (- 3) (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x730 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x690 (* ?x326 ?x326 ?x323 ?x323 ?x68 ?x68)))
 (let ((?x1209 (+ ?x690 (* (- 1) (* ?x326 ?x326 ?x323 ?x323 ?x68)) ?x730 ?x762 (* 3 (* ?x326 ?x326 ?x326 ?x78)) (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x78)) (* ?x326 ?x326 ?x78) ?x804 ?x812 ?x821 ?x845 ?x866 ?x900 ?x935 ?x498 ?x465 ?x484 ?x540 ?x533 ?x1200)))
 (let (($x683 (not (= ?x1209 0))))
 (let (($x665 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x211 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x228 (* (- 1) ?x49)))
 (let ((?x227 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x141 (= (+ m (* (- 6) n)) 6)))
 (let (($x194 (and $x141 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x227 ?x228) 4) $x211 $x665 $x683)))
 (let (($x631 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x578 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x697 (and $x141 (= ?x578 (- 4)) $x631 $x665 $x683)))
 (rewrite (= $x697 $x194))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x108 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x69 (+ m 6)))
 (let ((?x78 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x76 (- (- (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70) (* ?x68 ?x69 ?x69 ?x70 ?x70)) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x85 (+ (- ?x76 (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70)) (* 3 ?x78 ?x70 ?x70 ?x70) (* 3 ?x78 ?x70 ?x70 ?x70 ?x70) (* ?x78 ?x70 ?x70) (* ?x78 ?x78 ?x78 ?x69 ?x69 ?x70 ?x70 ?x70) (* 3 ?x78 ?x78 ?x78 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70) (* 3 ?x78 ?x78 ?x78 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x91 (- (- ?x85 (* ?x78 ?x78 ?x78 ?x68 ?x69 ?x70 ?x70)) (* ?x78 ?x78 ?x78 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x92 (- ?x91 (* 3 ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x95 (+ (- ?x92 (* 3 ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70)) (* 3 ?x78 ?x78 ?x78 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x101 (+ (- ?x95 (* ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x69 ?x70)) (* 3 ?x78 ?x78 ?x78 ?x69 ?x70 ?x70 ?x70 ?x70) (* ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x68 ?x69 ?x70) (* ?x78 ?x78 ?x78 ?x69 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x101 (* ?x78 ?x68 ?x70 ?x70)) 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x692 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x1200 (* (- 1) (* (+ 1 n) (+ 1 n) (+ k m) (+ c k)))))
 (let ((?x78 (+ c k)))
 (let ((?x323 (+ 6 m)))
 (let ((?x326 (+ 1 n)))
 (let ((?x533 (* ?x326 ?x326 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x68 (+ k m)))
 (let ((?x540 (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78)))
 (let ((?x484 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x465 (* (- 1) (* ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x498 (* 3 (* ?x326 ?x326 ?x326 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x935 (* (- 3) (* ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x900 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x68 ?x68 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x866 (* (- 1) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x845 (* (- 1) (* ?x326 ?x326 ?x323 ?x68 ?x78 ?x78 ?x78))))
 (let ((?x821 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x812 (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78))))
 (let ((?x804 (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x78 ?x78 ?x78)))
 (let ((?x762 (* (- 3) (* ?x326 ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x730 (* (- 3) (* ?x326 ?x326 ?x326 ?x323 ?x323 ?x68))))
 (let ((?x690 (* ?x326 ?x326 ?x323 ?x323 ?x68 ?x68)))
 (let ((?x1209 (+ ?x690 (* (- 1) (* ?x326 ?x326 ?x323 ?x323 ?x68)) ?x730 ?x762 (* 3 (* ?x326 ?x326 ?x326 ?x78)) (* 3 (* ?x326 ?x326 ?x326 ?x326 ?x78)) (* ?x326 ?x326 ?x78) ?x804 ?x812 ?x821 ?x845 ?x866 ?x900 ?x935 ?x498 ?x465 ?x484 ?x540 ?x533 ?x1200)))
 (let (($x683 (not (= ?x1209 0))))
 (let (($x665 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x631 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x578 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x141 (= (+ m (* (- 6) n)) 6)))
 (let (($x697 (and $x141 (= ?x578 (- 4)) $x631 $x665 $x683)))
 (let ((?x70 (+ n 1)))
 (let ((?x69 (+ m 6)))
 (let ((?x76 (- (- (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70) (* ?x68 ?x69 ?x69 ?x70 ?x70)) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x85 (+ (- ?x76 (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70)) (* 3 ?x78 ?x70 ?x70 ?x70) (* 3 ?x78 ?x70 ?x70 ?x70 ?x70) (* ?x78 ?x70 ?x70) (* ?x78 ?x78 ?x78 ?x69 ?x69 ?x70 ?x70 ?x70) (* 3 ?x78 ?x78 ?x78 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70) (* 3 ?x78 ?x78 ?x78 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x91 (- (- ?x85 (* ?x78 ?x78 ?x78 ?x68 ?x69 ?x70 ?x70)) (* ?x78 ?x78 ?x78 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x92 (- ?x91 (* 3 ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x95 (+ (- ?x92 (* 3 ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70)) (* 3 ?x78 ?x78 ?x78 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x101 (+ (- ?x95 (* ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x69 ?x70)) (* 3 ?x78 ?x78 ?x78 ?x69 ?x70 ?x70 ?x70 ?x70) (* ?x78 ?x78 ?x78 ?x68 ?x68 ?x68 ?x68 ?x69 ?x70) (* ?x78 ?x78 ?x78 ?x69 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x107 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x101 (* ?x78 ?x68 ?x70 ?x70)) 0))))))
 (rewrite (= $x107 $x697))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x109 (asserted $x108)))
 (let ((@x867 (mp (mp @x109 (quant-intro (proof-bind ?x692) (= $x108 $x689)) $x689) (rewrite (= $x689 $x689)) $x689)))
 (let ((@x809 (mp (mp @x867 (quant-intro (proof-bind ?x873) (= $x689 $x872)) $x872) (quant-intro (proof-bind ?x925) (= $x872 $x909)) $x909)))
 (let ((@x733 (mp (mp~ @x809 (sk (~ $x909 $x765)) $x765) (rewrite (= $x765 $x561)) $x561)))
 (let ((@x736 (and-elim @x733 $x582)))
 (let ((@x834 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x582) $x641)) @x736 $x641)))
 (let (($x788 (>= ?x793 4)))
 (let ((@x405 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x582) $x788)) @x736 $x788)))
 (let (($x695 (<= ?x1225 6)))
 (let ((@x724 (and-elim @x733 $x726)))
 (let ((@x559 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x695)) @x724 $x695)))
 (let (($x1228 (>= ?x1225 6)))
 (let ((@x707 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x1228)) @x724 $x1228)))
 (let (($x647 (<= ?x824 1)))
 (let ((@x583 (and-elim @x733 $x325)))
 (let ((@x116 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x647)) @x583 $x647)))
 (let (($x644 (>= ?x824 1)))
 (let ((@x696 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x644)) @x583 $x644)))
 (let (($x646 (<= ?x157 (- 1))))
 (let ((@x566 (and-elim @x733 $x567)))
 (let ((@x606 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x567) $x646)) @x566 $x646)))
 (let (($x645 (>= ?x157 (- 1))))
 (let ((@x324 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x567) $x645)) @x566 $x645)))
 (let (($x668 (not (>= ?x770 0))))
 (let (($x508 (<= ?x770 0)))
 (let ((@x739 ((_ th-lemma arith) (hypothesis (not $x508)) @x324 @x606 @x324 @x606 @x696 @x116 @x324 @x606 @x696 @x116 @x405 @x834 @x696 @x116 @x324 @x606 @x707 @x559 @x707 @x559 @x324 @x606 @x707 @x559 @x324 @x606 @x696 @x116 @x707 @x559 @x405 @x834 false)))
 (let ((@x521 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x772 (not $x508) $x668)) (and-elim @x733 $x1006) (or (not $x508) $x668))))
 ((_ th-lemma arith) (unit-resolution @x521 (lemma @x739 $x508) $x668) @x324 @x606 @x324 @x606 @x696 @x116 @x324 @x606 @x696 @x116 @x405 @x834 @x696 @x116 @x324 @x606 @x707 @x559 @x707 @x559 @x324 @x606 @x707 @x559 @x324 @x606 @x696 @x116 @x707 @x559 @x405 @x834 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        21
 :arith-assert-upper        66
 :arith-branch-var          3
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           15
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             591
 :arith-nonlinear-bounds    26
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             6
 :arith-pivots              10
 :arith-row-summations      17
 :arith-tableau-max-columns 86
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 53
 :del-clause                16
 :final-checks              12
 :max-memory                3.93
 :memory                    3.34
 :mk-bool-var               73
 :mk-clause                 16
 :num-allocs                1735309
 :num-checks                1
 :propagations              12
 :rlimit-count              18903
 :time                      0.02
 :total-time                0.02)
