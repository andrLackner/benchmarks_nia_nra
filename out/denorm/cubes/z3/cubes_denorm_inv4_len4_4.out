unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x307 (* (- 1) k!2)))
 (let ((?x179 (* n!0 n!0)))
 (let ((?x163 (* 3 ?x179)))
 (let ((?x277 (+ ?x163 ?x307 (* 3 n!0))))
 (let (($x106 (<= ?x277 (- 1))))
 (let (($x282 (= ?x277 (- 1))))
 (let ((?x293 (+ k!2 c!3)))
 (let ((?x510 (+ k!2 m!1)))
 (let ((?x263 (+ 6 m!1)))
 (let ((?x316 (+ 1 n!0)))
 (let ((?x204 (* (- 1) m!1)))
 (let ((?x335 (+ ?x307 ?x204 (* (- 1) (* ?x316 ?x263 ?x263 ?x510 ?x510 ?x293 ?x293 ?x293)) (* (- 1) (* ?x316 ?x316 ?x316 ?x263 ?x263 ?x510 ?x510 ?x510 ?x293 ?x293)) (* ?x316 ?x263 ?x263 ?x263 ?x510 ?x293 ?x293))))
 (let ((?x413 (* (+ 7 ?x163 ?x307 ?x204 (* 9 n!0)) ?x335)))
 (let (($x364 (= ?x413 0)))
 (let (($x218 (not $x364)))
 (let (($x220 (= (+ k!2 (* (- 1) (* k!2 n!0)) (* (- 2) n!0) (* 3 c!3)) 1)))
 (let ((?x308 (* 9 n!0)))
 (let ((?x141 (* k!2 k!2)))
 (let ((?x110 (+ ?x141 (* (- 5) k!2) (* (- 9) (* n!0 c!3)) ?x308 (* (- 18) c!3))))
 (let ((?x184 (+ m!1 (* (- 6) n!0))))
 (let (($x188 (= ?x184 6)))
 (let (($x350 (and $x188 (= ?x110 (- 4)) $x220 $x282 $x218)))
 (let ((?x505 (+ c!3 k!2)))
 (let ((?x317 (+ ?x307 ?x204 (* (- 1) (* ?x316 ?x316 ?x316 ?x263 ?x263 ?x510 ?x510 ?x510 ?x505 ?x505)) (* (- 1) (* ?x316 ?x263 ?x263 ?x510 ?x510 ?x505 ?x505 ?x505)) (* ?x316 ?x263 ?x263 ?x263 ?x510 ?x505 ?x505))))
 (let (($x197 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x466 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x141) (* 9 (* c!3 n!0)))))
 (let (($x319 (and $x188 (= ?x466 4) $x197 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x179)) 1) (not (= (* (+ 7 ?x307 ?x204 ?x308 ?x163) ?x317) 0)))))
 (let (($x202 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x503 (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x75 ?x75)))
 (let ((?x418 (* (- 1) (* ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x348 (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x469 (* (+ 7 ?x235 ?x351 (* 9 n) (* 3 (* n n))) (+ ?x235 ?x351 ?x348 ?x418 ?x503))))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= ?x469 0)))))))))))))))))))))) :qid k!34))
 ))
 (let (($x93 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x348 (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x503 (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x75 ?x75)))
 (let ((?x428 (* (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)) (+ ?x503 ?x235 ?x351 ?x348 ?x418))))
 (let (($x427 (not (= ?x428 0))))
 (let (($x147 (= (+ (* 3 (* n n)) ?x235 (* 3 n)) (- 1))))
 (let (($x151 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x151 $x147 $x427)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x379 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x503 (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x75 ?x75)))
 (let ((?x418 (* (- 1) (* ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x348 (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x469 (* (+ 7 ?x235 ?x351 (* 9 n) (* 3 (* n n))) (+ ?x235 ?x351 ?x348 ?x418 ?x503))))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x320 (and $x121 $x205 $x257 $x295 (not (= ?x469 0)))))
 (let ((?x428 (* (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)) (+ ?x503 ?x235 ?x351 ?x348 ?x418))))
 (let (($x427 (not (= ?x428 0))))
 (let (($x147 (= (+ (* 3 (* n n)) ?x235 (* 3 n)) (- 1))))
 (let (($x151 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x122 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x151 $x147 $x427)))
 (rewrite (= $x122 $x320))))))))))))))))))))))))))))
 ))
 (let (($x425 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x348 (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x503 (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x75 ?x75)))
 (let ((?x428 (* (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)) (+ ?x503 ?x235 ?x351 ?x348 ?x418))))
 (let (($x427 (not (= ?x428 0))))
 (let (($x147 (= (+ (* 3 (* n n)) ?x235 (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x331 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x331 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x147 $x427))))))))))))))))) :qid k!34))
 ))
 (let ((?x117 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x348 (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x503 (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x75 ?x75)))
 (let ((?x428 (* (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)) (+ ?x503 ?x235 ?x351 ?x348 ?x418))))
 (let (($x427 (not (= ?x428 0))))
 (let (($x147 (= (+ (* 3 (* n n)) ?x235 (* 3 n)) (- 1))))
 (let (($x151 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x122 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x151 $x147 $x427)))
 (let ((?x48 (* 9 n)))
 (let ((?x331 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x409 (and $x121 (= ?x331 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x147 $x427)))
 (rewrite (= $x409 $x122))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x81 (- (- (* ?x75 ?x75 ?x71 ?x76 ?x76 ?x76 ?x68) ?x71) (* ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x81 (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x76 ?x76 ?x68)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x402 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x388 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x418 (* (- 1) (* ?x303 ?x388 ?x388 ?x71 ?x71 ?x75 ?x75 ?x75))))
 (let ((?x348 (* (- 1) (* ?x303 ?x303 ?x303 ?x388 ?x388 ?x71 ?x71 ?x71 ?x75 ?x75))))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x503 (* ?x303 ?x388 ?x388 ?x388 ?x71 ?x75 ?x75)))
 (let ((?x428 (* (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)) (+ ?x503 ?x235 ?x351 ?x348 ?x418))))
 (let (($x427 (not (= ?x428 0))))
 (let (($x147 (= (+ (* 3 (* n n)) ?x235 (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x331 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x409 (and $x121 (= ?x331 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x147 $x427)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x81 (- (- (* ?x75 ?x75 ?x71 ?x76 ?x76 ?x76 ?x68) ?x71) (* ?x75 ?x75 ?x71 ?x71 ?x71 ?x76 ?x76 ?x68 ?x68 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x81 (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x76 ?x76 ?x68)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0))))))
 (rewrite (= $x87 $x409))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x92 (mp (mp @x89 (quant-intro (proof-bind ?x402) (= $x88 $x425)) $x425) (rewrite (= $x425 $x425)) $x425)))
 (let ((@x467 (mp (mp @x92 (quant-intro (proof-bind ?x117) (= $x425 $x93)) $x93) (quant-intro (proof-bind ?x379) (= $x93 $x202)) $x202)))
 (let ((@x325 (mp (mp~ @x467 (sk (~ $x202 $x319)) $x319) (rewrite (= $x319 $x350)) $x350)))
 (let ((@x230 (and-elim @x325 $x282)))
 (let ((@x376 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x282) $x106)) @x230 $x106)))
 (let (($x246 (>= ?x184 6)))
 (let ((@x373 (and-elim @x325 $x188)))
 (let ((@x174 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x188) $x246)) @x373 $x246)))
 (let (($x370 (>= ?x277 (- 1))))
 (let ((@x142 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x282) $x370)) @x230 $x370)))
 (let (($x252 (<= ?x184 6)))
 (let ((@x315 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x188) $x252)) @x373 $x252)))
 (let (($x190 (not (<= ?x413 0))))
 (let (($x354 (>= ?x413 0)))
 (let ((@x414 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x354)) @x315 @x142 @x174 @x376 false) $x354)))
 (let ((@x286 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x364 $x190 (not $x354))) (and-elim @x325 $x218) (or $x190 (not $x354)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x286 @x414 $x190) @x315 @x142 @x174 @x376 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             123
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    18
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      24
 :arith-tableau-max-columns 33
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.61
 :memory                    3.10
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1510352
 :num-checks                1
 :propagations              12
 :rlimit-count              15619
 :time                      0.01
 :total-time                0.02)
