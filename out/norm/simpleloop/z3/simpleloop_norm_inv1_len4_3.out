unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x383 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x1115 (<= ?x383 0)))
 (let (($x206 (= ?x383 0)))
 (let ((?x1440 (* x!1 x!1 x!1 x!1)))
 (let ((?x1041 (+ 1 y!0)))
 (let ((?x1180 (+ (- 1) x!1)))
 (let ((?x1040 (* ?x1180 ?x1180 ?x1180 ?x1041 ?x1041 ?x1041)))
 (let ((?x1589 (+ (* 2 y00) (* 2 x00) (* (- 2) (* y00 y!0 x!1 x!1)) (* (- 3) (* x00 y!0 y!0 x!1 x!1)) (* 2 (* x00 y!0)) (* x00 y!0 y!0 x!1 x!1 x!1) (* y!0 x!1) (* 2 (* y00 y!0)) (* x00 y!0 x!1) (* y00 y!0 x!1 x!1 x!1) (* y!0 x!1 x!1 x!1 x!1) (* x00 y!0 x!1 x!1 x!1) (* y00 y!0 x!1) (* (- 2) (* x00 y!0 x!1 x!1)) (* (- 2) (* x00 x!1)) (* (- 3) y!0) (* y00 x!1 x!1) (* (- 1) (* y!0 y!0 y!0)) (* 5 (* x!1 x!1)) (* (- 4) (* x!1 x!1 x!1)) (* (- 1) (* ?x1180 ?x1180 ?x1180 ?x1180 ?x1041 ?x1041)) (* (- 1) ?x1040) (* (- 4) (* y!0 y!0)) (* 3 (* x00 y!0 y!0 x!1)) (* 3 (* y00 y!0 y!0 x!1)) (* (- 3) (* y00 y!0 y!0 x!1 x!1)) (* y00 y!0 y!0 x!1 x!1 x!1) (* (- 3) x!1) (* y!0 x!1 x!1) (* (- 3) (* y!0 x!1 x!1 x!1)) (* y!0 y!0 x!1 x!1 x!1) (* (- 2) (* y00 x!1)) (* (- 4) (* y!0 y!0 x!1 x!1)) (* 4 (* y!0 y!0 x!1)) (* x00 x!1 x!1) ?x1440)))
 (let (($x1595 (= ?x1589 0)))
 (let (($x81 (not $x1595)))
 (let (($x518 (and $x206 $x81)))
 (let ((?x1013 (* ?x1180 ?x1180 ?x1180 ?x1180 ?x1041 ?x1041)))
 (let ((?x821 (* y!0 y!0 y!0)))
 (let ((?x1460 (* (- 2) x00)))
 (let ((?x1459 (* (- 2) y00)))
 (let ((?x1441 (+ (* 3 x!1) (* 3 y!0) ?x1459 ?x1460 (* (- 2) (* y!0 y00)) (* (- 1) (* x!1 y!0 y00)) (* 2 (* x!1 x!1 y!0 y00)) (* 2 (* x!1 x00)) (* (- 2) (* y!0 x00)) (* (- 1) (* x!1 y!0 x00)) (* 2 (* x!1 x!1 y!0 x00)) (* (- 1) (* x!1 x!1 x!1 y!0 x00)) (* (- 3) (* x!1 y!0 y!0 x00)) (* 3 (* x!1 x!1 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 x00)) (* (- 1) (* x!1 y!0)) (* (- 3) (* x!1 y!0 y!0 y00)) (* 3 (* x!1 x!1 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 y00)) ?x1040 (* (- 1) (* x!1 x!1 y!0)) (* (- 5) (* x!1 x!1)) (* 4 (* x!1 x!1 y!0 y!0)) (* (- 4) (* x!1 y!0 y!0)) (* 4 (* y!0 y!0)) (* 2 (* x!1 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0)) (* 4 (* x!1 x!1 x!1)) (* 3 (* x!1 x!1 x!1 y!0)) (* (- 1) (* x!1 x!1 x00)) ?x821 ?x1013 (* (- 1) (* x!1 x!1 x!1 x!1 y!0)) (* (- 1) ?x1440))))
 (let (($x428 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x1441 0)))))
 (let (($x387 (exists ((x Int) (y Int) )(! (let ((?x1598 (* (- 1) (* x x x x))))
 (let ((?x1597 (* (- 1) (* x x x x y))))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1221 (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1130 (* y y y)))
 (let ((?x1012 (* (- 1) (* x x x00))))
 (let ((?x1650 (* 3 (* x x x y))))
 (let ((?x934 (* x x x)))
 (let ((?x1639 (* 4 ?x934)))
 (let ((?x1016 (* (- 1) (* x x x y y))))
 (let ((?x1201 (* 2 (* x y00))))
 (let ((?x1165 (* 4 (* y y))))
 (let ((?x886 (* x y y)))
 (let ((?x1164 (* (- 4) ?x886)))
 (let ((?x1085 (* 4 (* x x y y))))
 (let ((?x942 (* (- 1) (* x x y))))
 (let ((?x795 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1468 (* (- 1) (* x x x y y00))))
 (let ((?x544 (* x x y00)))
 (let ((?x1020 (* (- 1) ?x544)))
 (let ((?x629 (* (- 1) (* x x x y y y00))))
 (let ((?x670 (* 3 (* x x y y y00))))
 (let ((?x686 (* (- 3) (* x y y y00))))
 (let ((?x388 (* (- 1) (* x x x y y x00))))
 (let ((?x452 (* 3 (* x x y y x00))))
 (let ((?x464 (* (- 3) (* x y y x00))))
 (let ((?x1467 (* (- 1) (* x x x y x00))))
 (let ((?x1466 (* 2 (* x x y x00))))
 (let ((?x249 (* x y x00)))
 (let ((?x1338 (* (- 1) ?x249)))
 (let ((?x345 (* (- 2) (* y x00))))
 (let ((?x222 (* x x00)))
 (let ((?x1199 (* 2 ?x222)))
 (let ((?x1465 (* 2 (* x x y y00))))
 (let ((?x123 (* x y y00)))
 (let ((?x306 (* (- 1) ?x123)))
 (let ((?x593 (* (- 2) (* y y00))))
 (let ((?x1460 (* (- 2) x00)))
 (let ((?x1459 (* (- 2) y00)))
 (let ((?x930 (* 3 y)))
 (let ((?x1602 (* 3 x)))
 (let ((?x537 (+ ?x1602 ?x930 ?x1459 ?x1460 ?x593 ?x306 ?x1465 ?x1199 ?x345 ?x1338 ?x1466 ?x1467 ?x464 ?x452 ?x388 (* (- 1) (* x y)) ?x686 ?x670 ?x629 ?x1020 ?x1468 ?x795 ?x942 (* (- 5) (* x x)) ?x1085 ?x1164 ?x1165 ?x1201 ?x1016 ?x1639 ?x1650 ?x1012 ?x1130 ?x1221 ?x1597 ?x1598)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x97 (not (= ?x537 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1272 (exists ((x Int) (y Int) )(! (let ((?x1598 (* (- 1) (* x x x x))))
 (let ((?x1597 (* (- 1) (* x x x x y))))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1221 (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1130 (* y y y)))
 (let ((?x1012 (* (- 1) (* x x x00))))
 (let ((?x1650 (* 3 (* x x x y))))
 (let ((?x1016 (* (- 1) (* x x x y y))))
 (let ((?x1201 (* 2 (* x y00))))
 (let ((?x1165 (* 4 (* y y))))
 (let ((?x1085 (* 4 (* x x y y))))
 (let ((?x872 (* x x)))
 (let ((?x1610 (* (- 4) ?x872)))
 (let ((?x942 (* (- 1) (* x x y))))
 (let ((?x795 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1468 (* (- 1) (* x x x y y00))))
 (let ((?x544 (* x x y00)))
 (let ((?x1020 (* (- 1) ?x544)))
 (let ((?x629 (* (- 1) (* x x x y y y00))))
 (let ((?x670 (* 3 (* x x y y y00))))
 (let ((?x686 (* (- 3) (* x y y y00))))
 (let ((?x388 (* (- 1) (* x x x y y x00))))
 (let ((?x452 (* 3 (* x x y y x00))))
 (let ((?x464 (* (- 3) (* x y y x00))))
 (let ((?x1467 (* (- 1) (* x x x y x00))))
 (let ((?x1466 (* 2 (* x x y x00))))
 (let ((?x249 (* x y x00)))
 (let ((?x1338 (* (- 1) ?x249)))
 (let ((?x345 (* (- 2) (* y x00))))
 (let ((?x222 (* x x00)))
 (let ((?x1199 (* 2 ?x222)))
 (let ((?x1465 (* 2 (* x x y y00))))
 (let ((?x123 (* x y y00)))
 (let ((?x306 (* (- 1) ?x123)))
 (let ((?x593 (* (- 2) (* y y00))))
 (let ((?x1460 (* (- 2) x00)))
 (let ((?x1459 (* (- 2) y00)))
 (let ((?x930 (* 3 y)))
 (let ((?x1602 (* 3 x)))
 (let ((?x1220 (+ ?x1602 ?x930 ?x1459 ?x1460 ?x593 ?x306 ?x1465 ?x1199 ?x345 ?x1338 ?x1466 ?x1467 ?x464 ?x452 ?x388 (* x (- 1) 1 y) (* x x 1 1) (* x x 1 y) (* x (- 1) y y) (* x x y 1) (* x (- 1) y 1) (* x (- 1) 1 1) (* x x x 1) (* x (- 1) (- 1) 1) ?x686 (* x x (- 1) y) ?x670 ?x629 ?x1020 ?x1468 (* x (- 1) x 1) (* x x (- 1) 1) (* x (- 1) (- 1) y) (* x (- 1) x y) ?x795 ?x942 ?x1610 ?x1085 (* (- 3) (* x y y)) ?x1165 ?x1201 ?x1016 (* 3 (* x x x)) ?x1650 ?x1012 ?x1130 ?x1221 ?x1597 ?x1598)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x97 (not (= ?x1220 0))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x435 (lambda ((x Int) (y Int) )(let ((?x1598 (* (- 1) (* x x x x))))
 (let ((?x1597 (* (- 1) (* x x x x y))))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1221 (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1130 (* y y y)))
 (let ((?x1012 (* (- 1) (* x x x00))))
 (let ((?x1650 (* 3 (* x x x y))))
 (let ((?x934 (* x x x)))
 (let ((?x1639 (* 4 ?x934)))
 (let ((?x1016 (* (- 1) (* x x x y y))))
 (let ((?x1201 (* 2 (* x y00))))
 (let ((?x1165 (* 4 (* y y))))
 (let ((?x886 (* x y y)))
 (let ((?x1164 (* (- 4) ?x886)))
 (let ((?x1085 (* 4 (* x x y y))))
 (let ((?x942 (* (- 1) (* x x y))))
 (let ((?x795 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1468 (* (- 1) (* x x x y y00))))
 (let ((?x544 (* x x y00)))
 (let ((?x1020 (* (- 1) ?x544)))
 (let ((?x629 (* (- 1) (* x x x y y y00))))
 (let ((?x670 (* 3 (* x x y y y00))))
 (let ((?x686 (* (- 3) (* x y y y00))))
 (let ((?x388 (* (- 1) (* x x x y y x00))))
 (let ((?x452 (* 3 (* x x y y x00))))
 (let ((?x464 (* (- 3) (* x y y x00))))
 (let ((?x1467 (* (- 1) (* x x x y x00))))
 (let ((?x1466 (* 2 (* x x y x00))))
 (let ((?x249 (* x y x00)))
 (let ((?x1338 (* (- 1) ?x249)))
 (let ((?x345 (* (- 2) (* y x00))))
 (let ((?x222 (* x x00)))
 (let ((?x1199 (* 2 ?x222)))
 (let ((?x1465 (* 2 (* x x y y00))))
 (let ((?x123 (* x y y00)))
 (let ((?x306 (* (- 1) ?x123)))
 (let ((?x593 (* (- 2) (* y y00))))
 (let ((?x1460 (* (- 2) x00)))
 (let ((?x1459 (* (- 2) y00)))
 (let ((?x930 (* 3 y)))
 (let ((?x1602 (* 3 x)))
 (let ((?x537 (+ ?x1602 ?x930 ?x1459 ?x1460 ?x593 ?x306 ?x1465 ?x1199 ?x345 ?x1338 ?x1466 ?x1467 ?x464 ?x452 ?x388 (* (- 1) (* x y)) ?x686 ?x670 ?x629 ?x1020 ?x1468 ?x795 ?x942 (* (- 5) (* x x)) ?x1085 ?x1164 ?x1165 ?x1201 ?x1016 ?x1639 ?x1650 ?x1012 ?x1130 ?x1221 ?x1597 ?x1598)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x600 (and $x97 (not (= ?x537 0)))))
 (let ((?x872 (* x x)))
 (let ((?x1610 (* (- 4) ?x872)))
 (let ((?x1220 (+ ?x1602 ?x930 ?x1459 ?x1460 ?x593 ?x306 ?x1465 ?x1199 ?x345 ?x1338 ?x1466 ?x1467 ?x464 ?x452 ?x388 (* x (- 1) 1 y) (* x x 1 1) (* x x 1 y) (* x (- 1) y y) (* x x y 1) (* x (- 1) y 1) (* x (- 1) 1 1) (* x x x 1) (* x (- 1) (- 1) 1) ?x686 (* x x (- 1) y) ?x670 ?x629 ?x1020 ?x1468 (* x (- 1) x 1) (* x x (- 1) 1) (* x (- 1) (- 1) y) (* x (- 1) x y) ?x795 ?x942 ?x1610 ?x1085 (* (- 3) ?x886) ?x1165 ?x1201 ?x1016 (* 3 ?x934) ?x1650 ?x1012 ?x1130 ?x1221 ?x1597 ?x1598)))
 (let (($x183 (and $x97 (not (= ?x1220 0)))))
 (rewrite (= $x183 $x600))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1414 (exists ((x Int) (y Int) )(! (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1497 (* ?x89 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1054 (* x00 ?x99 ?x99)))
 (let ((?x1039 (* y00 ?x99 ?x99)))
 (let ((?x1449 (* ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1405 (* x00 ?x89 ?x89 ?x99)))
 (let ((?x840 (* y00 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x887 (* x00 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x859 (* y00 ?x89 ?x89 ?x99)))
 (let ((?x848 (+ ?x859 ?x887 ?x840 ?x1405 (* (- 1) (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)) (* (- 1) (* ?x89 ?x89 ?x99 ?x99)) ?x1449 (* (- 1) (* ?x89 ?x99 ?x99)) (* (- 1) (* ?x99 ?x99 ?x99)) ?x1039 (* (- 1) (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)) ?x1054 (* (- 1) (* y00 ?x89 ?x89 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x89 ?x89 ?x99)) (* (- 1) (* ?x89 ?x89 ?x89 ?x99)) ?x1497)))
 (let (($x863 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x863 (not (= ?x848 0))))))))))))))) :qid k!26))
 ))
 (let ((?x1270 (lambda ((x Int) (y Int) )(let ((?x1598 (* (- 1) (* x x x x))))
 (let ((?x1597 (* (- 1) (* x x x x y))))
 (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1221 (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1130 (* y y y)))
 (let ((?x1012 (* (- 1) (* x x x00))))
 (let ((?x1650 (* 3 (* x x x y))))
 (let ((?x1016 (* (- 1) (* x x x y y))))
 (let ((?x1201 (* 2 (* x y00))))
 (let ((?x1165 (* 4 (* y y))))
 (let ((?x1085 (* 4 (* x x y y))))
 (let ((?x872 (* x x)))
 (let ((?x1610 (* (- 4) ?x872)))
 (let ((?x942 (* (- 1) (* x x y))))
 (let ((?x795 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1468 (* (- 1) (* x x x y y00))))
 (let ((?x544 (* x x y00)))
 (let ((?x1020 (* (- 1) ?x544)))
 (let ((?x629 (* (- 1) (* x x x y y y00))))
 (let ((?x670 (* 3 (* x x y y y00))))
 (let ((?x686 (* (- 3) (* x y y y00))))
 (let ((?x388 (* (- 1) (* x x x y y x00))))
 (let ((?x452 (* 3 (* x x y y x00))))
 (let ((?x464 (* (- 3) (* x y y x00))))
 (let ((?x1467 (* (- 1) (* x x x y x00))))
 (let ((?x1466 (* 2 (* x x y x00))))
 (let ((?x249 (* x y x00)))
 (let ((?x1338 (* (- 1) ?x249)))
 (let ((?x345 (* (- 2) (* y x00))))
 (let ((?x222 (* x x00)))
 (let ((?x1199 (* 2 ?x222)))
 (let ((?x1465 (* 2 (* x x y y00))))
 (let ((?x123 (* x y y00)))
 (let ((?x306 (* (- 1) ?x123)))
 (let ((?x593 (* (- 2) (* y y00))))
 (let ((?x1460 (* (- 2) x00)))
 (let ((?x1459 (* (- 2) y00)))
 (let ((?x930 (* 3 y)))
 (let ((?x1602 (* 3 x)))
 (let ((?x1220 (+ ?x1602 ?x930 ?x1459 ?x1460 ?x593 ?x306 ?x1465 ?x1199 ?x345 ?x1338 ?x1466 ?x1467 ?x464 ?x452 ?x388 (* x (- 1) 1 y) (* x x 1 1) (* x x 1 y) (* x (- 1) y y) (* x x y 1) (* x (- 1) y 1) (* x (- 1) 1 1) (* x x x 1) (* x (- 1) (- 1) 1) ?x686 (* x x (- 1) y) ?x670 ?x629 ?x1020 ?x1468 (* x (- 1) x 1) (* x x (- 1) 1) (* x (- 1) (- 1) y) (* x (- 1) x y) ?x795 ?x942 ?x1610 ?x1085 (* (- 3) (* x y y)) ?x1165 ?x1201 ?x1016 (* 3 (* x x x)) ?x1650 ?x1012 ?x1130 ?x1221 ?x1597 ?x1598)))
 (let (($x97 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x183 (and $x97 (not (= ?x1220 0)))))
 (let ((?x1497 (* ?x89 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1054 (* x00 ?x99 ?x99)))
 (let ((?x1039 (* y00 ?x99 ?x99)))
 (let ((?x1449 (* ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1405 (* x00 ?x89 ?x89 ?x99)))
 (let ((?x840 (* y00 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x887 (* x00 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x859 (* y00 ?x89 ?x89 ?x99)))
 (let ((?x848 (+ ?x859 ?x887 ?x840 ?x1405 (* (- 1) ?x795) (* (- 1) (* ?x89 ?x89 ?x99 ?x99)) ?x1449 (* (- 1) (* ?x89 ?x99 ?x99)) (* (- 1) (* ?x99 ?x99 ?x99)) ?x1039 (* (- 1) ?x1221) ?x1054 (* (- 1) (* y00 ?x89 ?x89 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x89 ?x89 ?x99)) (* (- 1) (* ?x89 ?x89 ?x89 ?x99)) ?x1497)))
 (let (($x863 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x853 (and $x863 (not (= ?x848 0)))))
 (rewrite (= $x853 $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x208 (exists ((x Int) (y Int) )(! (let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1497 (* ?x89 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x106 (* ?x89 ?x89 ?x89 ?x99)))
 (let ((?x524 (* x00 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1067 (* y00 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1221 (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1029 (* ?x99 ?x99 ?x99)))
 (let ((?x981 (* ?x89 ?x99 ?x99)))
 (let ((?x1416 (* ?x89 ?x89 ?x99 ?x99)))
 (let ((?x795 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1591 (+ (* (- 1) (* y00 ?x89 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x89 ?x89 ?x99 ?x99)) (* (- 1) (* y00 ?x89 ?x89 ?x89 ?x99 ?x99)) (* (- 1) (* x00 ?x89 ?x89 ?x99)) ?x795 ?x1416 (* (- 1) (* ?x89 ?x89 ?x89 ?x99 ?x99)) ?x981 ?x1029 (* (- 1) (* y00 ?x99 ?x99)) ?x1221 (* (- 1) (* x00 ?x99 ?x99)) ?x1067 ?x524 ?x106 (* (- 1) ?x1497))))
 (let (($x863 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x863 (not (= ?x1591 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x1438 (lambda ((x Int) (y Int) )(let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1497 (* ?x89 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1054 (* x00 ?x99 ?x99)))
 (let ((?x1039 (* y00 ?x99 ?x99)))
 (let ((?x1449 (* ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1405 (* x00 ?x89 ?x89 ?x99)))
 (let ((?x840 (* y00 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x887 (* x00 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x859 (* y00 ?x89 ?x89 ?x99)))
 (let ((?x848 (+ ?x859 ?x887 ?x840 ?x1405 (* (- 1) (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)) (* (- 1) (* ?x89 ?x89 ?x99 ?x99)) ?x1449 (* (- 1) (* ?x89 ?x99 ?x99)) (* (- 1) (* ?x99 ?x99 ?x99)) ?x1039 (* (- 1) (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)) ?x1054 (* (- 1) (* y00 ?x89 ?x89 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x89 ?x89 ?x99)) (* (- 1) (* ?x89 ?x89 ?x89 ?x99)) ?x1497)))
 (let (($x863 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x853 (and $x863 (not (= ?x848 0)))))
 (let ((?x106 (* ?x89 ?x89 ?x89 ?x99)))
 (let ((?x524 (* x00 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1067 (* y00 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1221 (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1029 (* ?x99 ?x99 ?x99)))
 (let ((?x981 (* ?x89 ?x99 ?x99)))
 (let ((?x1416 (* ?x89 ?x89 ?x99 ?x99)))
 (let ((?x795 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1591 (+ (* (- 1) ?x859) (* (- 1) ?x887) (* (- 1) ?x840) (* (- 1) ?x1405) ?x795 ?x1416 (* (- 1) ?x1449) ?x981 ?x1029 (* (- 1) ?x1039) ?x1221 (* (- 1) ?x1054) ?x1067 ?x524 ?x106 (* (- 1) ?x1497))))
 (let (($x889 (and $x863 (not (= ?x1591 0)))))
 (rewrite (= $x889 $x853))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x43 (- (- ?x41 (* ?x35 ?x35 ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 x00 ?x36))))
 (let ((?x48 (- (+ ?x43 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x53 (- (+ ?x48 (* ?x35 ?x36 ?x36) (* ?x36 ?x36 ?x36)) (* ?x36 ?x36 y00))))
 (let ((?x61 (+ (- (+ ?x53 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36)) (* x00 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00 ?x36) (* ?x35 ?x35 ?x35 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x61 (* ?x35 ?x35 ?x35 ?x35 ?x36)) 0))))))))))) :qid k!26))
 ))
 (let ((?x895 (lambda ((x Int) (y Int) )(let ((?x99 (+ 1 y)))
 (let ((?x89 (+ (- 1) x)))
 (let ((?x1497 (* ?x89 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x106 (* ?x89 ?x89 ?x89 ?x99)))
 (let ((?x524 (* x00 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1067 (* y00 ?x89 ?x89 ?x89 ?x99)))
 (let ((?x1221 (* ?x89 ?x89 ?x89 ?x89 ?x99 ?x99)))
 (let ((?x1029 (* ?x99 ?x99 ?x99)))
 (let ((?x981 (* ?x89 ?x99 ?x99)))
 (let ((?x1416 (* ?x89 ?x89 ?x99 ?x99)))
 (let ((?x795 (* ?x89 ?x89 ?x89 ?x99 ?x99 ?x99)))
 (let ((?x1591 (+ (* (- 1) (* y00 ?x89 ?x89 ?x99)) (* (- 1) (* x00 ?x89 ?x89 ?x89 ?x99 ?x99)) (* (- 1) (* y00 ?x89 ?x89 ?x89 ?x99 ?x99)) (* (- 1) (* x00 ?x89 ?x89 ?x99)) ?x795 ?x1416 (* (- 1) (* ?x89 ?x89 ?x89 ?x99 ?x99)) ?x981 ?x1029 (* (- 1) (* y00 ?x99 ?x99)) ?x1221 (* (- 1) (* x00 ?x99 ?x99)) ?x1067 ?x524 ?x106 (* (- 1) ?x1497))))
 (let (($x863 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x889 (and $x863 (not (= ?x1591 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x43 (- (- ?x41 (* ?x35 ?x35 ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 x00 ?x36))))
 (let ((?x48 (- (+ ?x43 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x53 (- (+ ?x48 (* ?x35 ?x36 ?x36) (* ?x36 ?x36 ?x36)) (* ?x36 ?x36 y00))))
 (let ((?x61 (+ (- (+ ?x53 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36)) (* x00 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00 ?x36) (* ?x35 ?x35 ?x35 ?x36))))
 (let (($x67 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x61 (* ?x35 ?x35 ?x35 ?x35 ?x36)) 0))))))
 (rewrite (= $x67 $x889)))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x1593 (mp (mp @x69 (quant-intro (proof-bind ?x895) (= $x68 $x208)) $x208) (rewrite (= $x208 $x208)) $x208)))
 (let ((@x430 (mp (mp @x1593 (quant-intro (proof-bind ?x1438) (= $x208 $x1414)) $x1414) (quant-intro (proof-bind ?x1270) (= $x1414 $x1272)) $x1272)))
 (let ((@x381 (mp~ (mp @x430 (quant-intro (proof-bind ?x435) (= $x1272 $x387)) $x387) (sk (~ $x387 $x428)) $x428)))
 (let ((@x1447 (mp @x381 (rewrite (= $x428 $x518)) $x518)))
 (let ((@x1604 (and-elim @x1447 $x206)))
 (let ((@x254 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x206) $x1115)) @x1604 $x1115)))
 (let (($x198 (>= ?x383 0)))
 (let ((@x556 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x206) $x198)) @x1604 $x198)))
 (let (($x349 (not (>= ?x1589 0))))
 (let (($x411 (<= ?x1589 0)))
 (let ((@x127 (lemma ((_ th-lemma arith) (hypothesis (not $x411)) @x556 @x254 @x556 @x254 false) $x411)))
 (let ((@x1211 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1595 (not $x411) $x349)) (and-elim @x1447 $x81) (or (not $x411) $x349))))
 ((_ th-lemma arith) (unit-resolution @x1211 @x127 $x349) @x556 @x254 @x556 @x254 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             294
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.78
 :memory                    3.29
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1346224
 :num-checks                1
 :propagations              4
 :rlimit-count              6291
 :time                      0.01
 :total-time                0.02)
