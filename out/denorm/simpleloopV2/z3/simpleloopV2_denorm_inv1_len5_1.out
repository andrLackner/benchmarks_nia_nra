unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x642 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x93 (>= ?x642 0)))
 (let (($x206 (= ?x642 0)))
 (let ((?x194 (* (- 1) (* x!1 x!1 x!1 y!0))))
 (let ((?x236 (* (- 2) (* x!1 x!1 y!0))))
 (let ((?x629 (* (- 2) y!0)))
 (let ((?x344 (* 3 x!1)))
 (let ((?x374 (+ 1 x!1)))
 (let ((?x623 (+ (- 1) y!0)))
 (let ((?x630 (* (- 1) (* ?x623 ?x623 ?x623 ?x374 ?x374 ?x374))))
 (let ((?x221 (* x!1 x!1 x!1)))
 (let ((?x335 (* (- 1) (* x!1 x!1 y!0 y!0))))
 (let ((?x195 (* x!1 y!0)))
 (let ((?x306 (* (- 1) ?x195)))
 (let ((?x193 (* x!1 y!0 y!0)))
 (let ((?x380 (* (- 2) ?x193)))
 (let ((?x181 (* x!1 x!1)))
 (let ((?x613 (* 3 ?x181)))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x256 (+ ?x74 ?x81 x!1 y!0)))
 (let ((?x157 (* ?x256 (+ 2 ?x613 ?x380 ?x306 ?x335 ?x221 ?x630 ?x344 ?x629 ?x236 ?x194))))
 (let (($x565 (= ?x157 0)))
 (let (($x202 (not $x565)))
 (let ((?x303 (+ 1 y!0)))
 (let ((?x283 (+ (- 1) x!1)))
 (let ((?x222 (* (- 1) (* ?x283 ?x283 ?x283 ?x303 ?x303 ?x303))))
 (let ((?x80 (* (- 1) ?x221)))
 (let ((?x196 (* 3 ?x195)))
 (let ((?x179 (* 2 ?x193)))
 (let ((?x164 (* ?x256 (+ ?x181 ?x179 ?x196 ?x335 ?x80 ?x222 x!1 ?x194))))
 (let (($x277 (= ?x164 0)))
 (let (($x432 (or (not $x277) $x202)))
 (let (($x216 (and $x206 $x432)))
 (let ((?x328 (+ x!1 y!0 ?x74 ?x81)))
 (let ((?x631 (* ?x328 (+ 2 ?x344 ?x629 ?x306 ?x236 ?x221 ?x613 ?x194 ?x630 ?x380 ?x335))))
 (let (($x376 (not (= (* ?x328 (+ x!1 ?x196 ?x222 ?x80 ?x181 ?x194 ?x179 ?x335)) 0))))
 (let (($x645 (and (= ?x328 0) (or $x376 (not (= ?x631 0))))))
 (let (($x549 (exists ((x Int) (y Int) )(! (let ((?x408 (* (- 1) (* x x y y))))
 (let ((?x349 (* x y y)))
 (let ((?x383 (* (- 2) ?x349)))
 (let ((?x140 (+ 1 x)))
 (let ((?x320 (+ (- 1) y)))
 (let ((?x352 (* (- 1) (* ?x320 ?x320 ?x320 ?x140 ?x140 ?x140))))
 (let ((?x217 (* (- 1) (* x x x y))))
 (let ((?x263 (* x x x)))
 (let ((?x419 (* (- 2) (* x x y))))
 (let ((?x414 (* (- 2) y)))
 (let ((?x393 (+ 2 (* 3 x) ?x414 (* (- 1) (* x y)) ?x419 ?x263 (* 3 (* x x)) ?x217 ?x352 ?x383 ?x408)))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x95 (+ x y ?x74 ?x81)))
 (let ((?x428 (* 2 ?x349)))
 (let ((?x272 (* x x)))
 (let ((?x223 (* (- 1) ?x263)))
 (let ((?x136 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x299 (* (- 1) (* ?x90 ?x90 ?x90 ?x136 ?x136 ?x136))))
 (let ((?x273 (* ?x95 (+ x (* 3 (* x y)) ?x299 ?x223 ?x272 ?x217 ?x428 ?x408))))
 (let (($x100 (= ?x95 0)))
 (and $x100 (or (not (= ?x273 0)) (not (= (* ?x95 ?x393) 0)))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x180 (exists ((x Int) (y Int) )(! (let ((?x512 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x323 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x140 (+ 1 x)))
 (let ((?x320 (+ (- 1) y)))
 (let ((?x352 (* (- 1) (* ?x320 ?x320 ?x320 ?x140 ?x140 ?x140))))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x332 (+ x ?x74 ?x81 y)))
 (let ((?x533 (* ?x332 (+ (* (- 1) (* ?x320 ?x140 ?x140)) ?x352 ?x323 ?x512 (* ?x320 ?x320)))))
 (let ((?x278 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x264 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x136 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x299 (* (- 1) (* ?x90 ?x90 ?x90 ?x136 ?x136 ?x136))))
 (let ((?x177 (* ?x332 (+ (* (- 1) (* ?x90 ?x90 ?x136)) ?x299 ?x264 ?x278 (* ?x136 ?x136)))))
 (and (= ?x332 0) (or (not (= ?x177 0)) (not (= ?x533 0))))))))))))))))))) :qid k!27))
 ))
 (let ((?x567 (lambda ((x Int) (y Int) )(let ((?x408 (* (- 1) (* x x y y))))
 (let ((?x349 (* x y y)))
 (let ((?x383 (* (- 2) ?x349)))
 (let ((?x140 (+ 1 x)))
 (let ((?x320 (+ (- 1) y)))
 (let ((?x352 (* (- 1) (* ?x320 ?x320 ?x320 ?x140 ?x140 ?x140))))
 (let ((?x217 (* (- 1) (* x x x y))))
 (let ((?x263 (* x x x)))
 (let ((?x419 (* (- 2) (* x x y))))
 (let ((?x414 (* (- 2) y)))
 (let ((?x393 (+ 2 (* 3 x) ?x414 (* (- 1) (* x y)) ?x419 ?x263 (* 3 (* x x)) ?x217 ?x352 ?x383 ?x408)))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x95 (+ x y ?x74 ?x81)))
 (let ((?x428 (* 2 ?x349)))
 (let ((?x272 (* x x)))
 (let ((?x223 (* (- 1) ?x263)))
 (let ((?x136 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x299 (* (- 1) (* ?x90 ?x90 ?x90 ?x136 ?x136 ?x136))))
 (let ((?x273 (* ?x95 (+ x (* 3 (* x y)) ?x299 ?x223 ?x272 ?x217 ?x428 ?x408))))
 (let (($x100 (= ?x95 0)))
 (let (($x706 (and $x100 (or (not (= ?x273 0)) (not (= (* ?x95 ?x393) 0))))))
 (let ((?x198 (+ (* (- 1) (* ?x320 ?x140 ?x140)) ?x352 (* (- 1) (* ?x320 ?x140 ?x140 ?x140)) (* (- 1) (* ?x320 ?x320 ?x140 ?x140)) (* ?x320 ?x320))))
 (let ((?x332 (+ x ?x74 ?x81 y)))
 (let ((?x466 (+ (* (- 1) (* ?x90 ?x90 ?x136)) ?x299 (* (- 1) (* ?x90 ?x90 ?x90 ?x136)) (* (- 1) (* ?x90 ?x90 ?x136 ?x136)) (* ?x136 ?x136))))
 (let (($x346 (and (= ?x332 0) (or (not (= (* ?x332 ?x466) 0)) (not (= (* ?x332 ?x198) 0))))))
 (rewrite (= $x346 $x706))))))))))))))))))))))))))))))
 ))
 (let (($x71 (exists ((x Int) (y Int) )(! (let ((?x55 (- y 1)))
 (let ((?x52 (+ x 1)))
 (let ((?x62 (- (- (* (- 1) ?x52 ?x52 ?x55) (* ?x52 ?x52 ?x52 ?x55 ?x55 ?x55)) (* ?x52 ?x52 ?x52 ?x55))))
 (let ((?x66 (* (+ (- (- ?x52 y00) x00) ?x55) (+ (- ?x62 (* ?x52 ?x52 ?x55 ?x55)) (* ?x55 ?x55)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (- (- (* (- 1) ?x34 ?x34 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39)) (* ?x34 ?x34 ?x34 ?x39))))
 (let ((?x49 (* (+ (- (- ?x34 y00) x00) y 1) (+ (- ?x45 (* ?x34 ?x34 ?x39 ?x39)) (* ?x39 ?x39)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0)) (not (= ?x66 0)))))))))))) :qid k!27))
 ))
 (let ((?x143 (lambda ((x Int) (y Int) )(let ((?x512 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x323 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x140 (+ 1 x)))
 (let ((?x320 (+ (- 1) y)))
 (let ((?x352 (* (- 1) (* ?x320 ?x320 ?x320 ?x140 ?x140 ?x140))))
 (let ((?x81 (* (- 1) x00)))
 (let ((?x74 (* (- 1) y00)))
 (let ((?x332 (+ x ?x74 ?x81 y)))
 (let ((?x533 (* ?x332 (+ (* (- 1) (* ?x320 ?x140 ?x140)) ?x352 ?x323 ?x512 (* ?x320 ?x320)))))
 (let ((?x278 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x264 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x136 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x299 (* (- 1) (* ?x90 ?x90 ?x90 ?x136 ?x136 ?x136))))
 (let ((?x177 (* ?x332 (+ (* (- 1) (* ?x90 ?x90 ?x136)) ?x299 ?x264 ?x278 (* ?x136 ?x136)))))
 (let (($x346 (and (= ?x332 0) (or (not (= ?x177 0)) (not (= ?x533 0))))))
 (let ((?x55 (- y 1)))
 (let ((?x52 (+ x 1)))
 (let ((?x62 (- (- (* (- 1) ?x52 ?x52 ?x55) (* ?x52 ?x52 ?x52 ?x55 ?x55 ?x55)) (* ?x52 ?x52 ?x52 ?x55))))
 (let ((?x66 (* (+ (- (- ?x52 y00) x00) ?x55) (+ (- ?x62 (* ?x52 ?x52 ?x55 ?x55)) (* ?x55 ?x55)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (- (- (* (- 1) ?x34 ?x34 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39)) (* ?x34 ?x34 ?x34 ?x39))))
 (let ((?x49 (* (+ (- (- ?x34 y00) x00) y 1) (+ (- ?x45 (* ?x34 ?x34 ?x39 ?x39)) (* ?x39 ?x39)))))
 (let (($x70 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0)) (not (= ?x66 0))))))
 (rewrite (= $x70 $x346))))))))))))))))))))))))))))
 ))
 (let ((@x72 (asserted $x71)))
 (let ((@x560 (mp (mp @x72 (quant-intro (proof-bind ?x143) (= $x71 $x180)) $x180) (rewrite (= $x180 $x180)) $x180)))
 (let ((@x251 (mp~ (mp @x560 (quant-intro (proof-bind ?x567) (= $x180 $x549)) $x549) (sk (~ $x549 $x645)) $x645)))
 (let ((@x85 (mp @x251 (rewrite (= $x645 $x216)) $x216)))
 (let ((@x230 (and-elim @x85 $x206)))
 (let ((@x212 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x206) $x93)) @x230 $x93)))
 (let (($x84 (<= ?x642 0)))
 (let ((@x652 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x206) $x84)) @x230 $x84)))
 (let (($x211 (not (<= ?x157 0))))
 (let (($x361 (>= ?x157 0)))
 (let (($x325 (>= ?x164 0)))
 (let (($x142 (<= ?x164 0)))
 (let ((@x382 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x277 (not $x142) (not $x325))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x142)) @x652 @x212 false) $x142) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x325)) @x652 @x212 false) $x325) $x277)))
 (let ((@x83 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x565 $x211 (not $x361))) (unit-resolution (and-elim @x85 $x432) @x382 $x202) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x361)) @x652 @x212 false) $x361) $x211)))
 ((_ th-lemma arith farkas 1 1 1) @x83 @x652 @x212 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             152
 :arith-nonlinear-bounds    8
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.63
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1188243
 :num-checks                1
 :propagations              14
 :rlimit-count              2888
 :time                      0.01
 :total-time                0.01)
