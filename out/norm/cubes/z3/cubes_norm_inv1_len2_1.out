unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x366 (* (- 2) n!0)))
 (let ((?x286 (* (- 1) (* k!2 n!0))))
 (let ((?x235 (* 3 c!3)))
 (let ((?x674 (+ k!2 ?x235 ?x286 ?x366)))
 (let (($x708 (<= ?x674 1)))
 (let (($x682 (= ?x674 1)))
 (let ((?x103 (+ k!2 c!3)))
 (let ((?x176 (+ k!2 m!1)))
 (let ((?x196 (+ 6 m!1)))
 (let ((?x454 (+ 1 n!0)))
 (let ((?x615 (+ (* ?x196 ?x196 ?x196 ?x196 ?x176 ?x103 ?x103 ?x103) (* (- 6) (* k!2 k!2 n!0 n!0 n!0)) (* (- 18) (* k!2 k!2 n!0)) (* (- 6) (* ?x454 ?x196 ?x196 ?x196 ?x176 ?x103 ?x103 ?x103)) (* (- 18) (* k!2 m!1 n!0 n!0)) (* (- 18) (* k!2 m!1 n!0)) (* (- 6) (* k!2 m!1 n!0 n!0 n!0)) (* (- 18) (* k!2 k!2 n!0 n!0)) (* (- 6) (* k!2 k!2)) (* (- 6) (* k!2 m!1)) (* (- 18) (* k!2 c!3 n!0)) (* (- 18) (* m!1 c!3 n!0)) (* (- 6) (* k!2 c!3 n!0 n!0 n!0)) (* (- 6) (* ?x196 ?x196 ?x196 ?x176 ?x103 ?x103 ?x103)) (* (- 6) (* ?x454 ?x454 ?x454 ?x454 ?x176 ?x103)) (* (- 6) (* m!1 c!3 n!0 n!0 n!0)) (* ?x454 ?x454 ?x454 ?x196 ?x176 ?x103) (* (- 6) (* m!1 c!3)) (* (- 18) (* m!1 c!3 n!0 n!0)) (* (- 6) (* k!2 c!3)) (* (- 18) (* k!2 c!3 n!0 n!0)))))
 (let (($x162 (= ?x615 0)))
 (let (($x136 (not $x162)))
 (let ((?x686 (* (- 3) n!0)))
 (let ((?x281 (* (- 3) (* n!0 n!0))))
 (let ((?x677 (+ k!2 ?x281 ?x686)))
 (let (($x290 (= ?x677 1)))
 (let ((?x142 (* (- 9) n!0)))
 (let ((?x452 (* 9 (* c!3 n!0))))
 (let ((?x159 (* 18 c!3)))
 (let ((?x230 (* k!2 k!2)))
 (let ((?x357 (* (- 1) ?x230)))
 (let ((?x365 (* 5 k!2)))
 (let ((?x663 (+ ?x365 ?x357 ?x159 ?x452 ?x142)))
 (let (($x280 (= ?x663 4)))
 (let ((?x210 (+ m!1 (* (- 6) n!0))))
 (let (($x114 (= ?x210 6)))
 (let (($x298 (and $x114 $x280 $x682 $x290 $x136)))
 (let ((?x202 (+ c!3 k!2)))
 (let ((?x191 (+ (* 6 ?x230) (* 18 (* c!3 k!2 n!0 n!0)) (* 6 (* c!3 k!2)) (* 18 (* c!3 k!2 n!0)) (* 18 (* c!3 m!1 n!0)) (* 18 (* k!2 k!2 n!0 n!0)) (* 18 (* k!2 m!1 n!0 n!0)) (* 6 (* c!3 m!1)) (* 6 (* k!2 m!1)) (* 18 (* c!3 m!1 n!0 n!0)) (* 18 (* k!2 k!2 n!0)) (* (- 1) (* ?x196 ?x196 ?x196 ?x196 ?x176 ?x202 ?x202 ?x202)) (* 6 (* ?x454 ?x196 ?x196 ?x196 ?x176 ?x202 ?x202 ?x202)) (* (- 1) (* ?x454 ?x454 ?x454 ?x196 ?x176 ?x202)) (* 6 (* c!3 k!2 n!0 n!0 n!0)) (* 6 (* k!2 k!2 n!0 n!0 n!0)) (* 6 (* c!3 m!1 n!0 n!0 n!0)) (* 6 (* k!2 m!1 n!0 n!0 n!0)) (* 6 (* ?x196 ?x196 ?x196 ?x176 ?x202 ?x202 ?x202)) (* 6 (* ?x454 ?x454 ?x454 ?x454 ?x176 ?x202)) (* 18 (* k!2 m!1 n!0)))))
 (let (($x675 (and $x114 (= (+ ?x159 ?x365 ?x142 ?x357 ?x452) 4) (= (+ ?x235 k!2 ?x366 ?x286) 1) (= (+ k!2 ?x686 ?x281) 1) (not (= ?x191 0)))))
 (let (($x550 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x691 (* ?x301 ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x692 (* 6 ?x691)))
 (let ((?x303 (+ 6 m)))
 (let ((?x676 (* ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x673 (* 6 ?x676)))
 (let ((?x536 (* 6 (* k m n n n))))
 (let ((?x534 (* 6 (* c m n n n))))
 (let ((?x532 (* 6 (* k k n n n))))
 (let ((?x530 (* 6 (* c k n n n))))
 (let ((?x464 (* ?x301 ?x301 ?x301 ?x303 ?x70 ?x69)))
 (let ((?x352 (* (- 1) ?x464)))
 (let ((?x462 (* ?x301 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x463 (* 6 ?x462)))
 (let ((?x354 (* ?x303 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x353 (* (- 1) ?x354)))
 (let ((?x711 (+ (* 6 (* k k)) (* 18 (* c k n n)) (* 6 (* c k)) (* 18 (* c k n)) (* 18 (* c m n)) (* 18 (* k k n n)) (* 18 (* k m n n)) (* 6 (* c m)) (* 6 (* k m)) (* 18 (* c m n n)) (* 18 (* k k n)) ?x353 ?x463 ?x352 ?x530 ?x532 ?x534 ?x536 ?x673 ?x692 (* 18 (* k m n)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= ?x711 0))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x140 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x303 (+ 6 m)))
 (let ((?x676 (* ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x301 (+ 1 n)))
 (let ((?x684 (* ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x464 (* ?x301 ?x301 ?x301 ?x303 ?x70 ?x69)))
 (let ((?x354 (* ?x303 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x161 (+ ?x354 (* (- 6) (* ?x301 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)) ?x464 (* (- 6) (* ?x301 ?x301 ?x301 ?x301 ?x70 ?x69)) (* (- 6) ?x684) (* (- 6) ?x676))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x165 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x165 $x100 (not (= ?x161 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x549 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x691 (* ?x301 ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x692 (* 6 ?x691)))
 (let ((?x303 (+ 6 m)))
 (let ((?x676 (* ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x673 (* 6 ?x676)))
 (let ((?x536 (* 6 (* k m n n n))))
 (let ((?x534 (* 6 (* c m n n n))))
 (let ((?x532 (* 6 (* k k n n n))))
 (let ((?x530 (* 6 (* c k n n n))))
 (let ((?x464 (* ?x301 ?x301 ?x301 ?x303 ?x70 ?x69)))
 (let ((?x352 (* (- 1) ?x464)))
 (let ((?x462 (* ?x301 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x463 (* 6 ?x462)))
 (let ((?x354 (* ?x303 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x353 (* (- 1) ?x354)))
 (let ((?x711 (+ (* 6 (* k k)) (* 18 (* c k n n)) (* 6 (* c k)) (* 18 (* c k n)) (* 18 (* c m n)) (* 18 (* k k n n)) (* 18 (* k m n n)) (* 6 (* c m)) (* 6 (* k m)) (* 18 (* c m n n)) (* 18 (* k k n)) ?x353 ?x463 ?x352 ?x530 ?x532 ?x534 ?x536 ?x673 ?x692 (* 18 (* k m n)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x177 (and $x119 $x203 $x255 $x293 (not (= ?x711 0)))))
 (let ((?x161 (+ ?x354 (* (- 6) ?x462) ?x464 (* (- 6) ?x691) (* (- 6) (* ?x301 ?x301 ?x301 ?x70 ?x69)) (* (- 6) ?x676))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x165 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x200 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x165 $x100 (not (= ?x161 0)))))
 (rewrite (= $x200 $x177))))))))))))))))))))))))))))))))))))
 ))
 (let (($x544 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x303 (+ 6 m)))
 (let ((?x676 (* ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x673 (* 6 ?x676)))
 (let ((?x301 (+ 1 n)))
 (let ((?x684 (* ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x691 (* ?x301 ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x692 (* 6 ?x691)))
 (let ((?x464 (* ?x301 ?x301 ?x301 ?x303 ?x70 ?x69)))
 (let ((?x352 (* (- 1) ?x464)))
 (let ((?x462 (* ?x301 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x463 (* 6 ?x462)))
 (let ((?x354 (* ?x303 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x353 (* (- 1) ?x354)))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x167 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x217 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x217 (- 4)) $x167 $x100 (not (= (+ ?x353 ?x463 ?x352 ?x692 (* 6 ?x684) ?x673) 0)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x351 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x303 (+ 6 m)))
 (let ((?x676 (* ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x301 (+ 1 n)))
 (let ((?x684 (* ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x464 (* ?x301 ?x301 ?x301 ?x303 ?x70 ?x69)))
 (let ((?x354 (* ?x303 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x161 (+ ?x354 (* (- 6) (* ?x301 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)) ?x464 (* (- 6) (* ?x301 ?x301 ?x301 ?x301 ?x70 ?x69)) (* (- 6) ?x684) (* (- 6) ?x676))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x165 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x200 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x165 $x100 (not (= ?x161 0)))))
 (let ((?x673 (* 6 ?x676)))
 (let ((?x691 (* ?x301 ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x692 (* 6 ?x691)))
 (let ((?x352 (* (- 1) ?x464)))
 (let ((?x462 (* ?x301 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x463 (* 6 ?x462)))
 (let ((?x353 (* (- 1) ?x354)))
 (let (($x167 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x217 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (and $x119 (= ?x217 (- 4)) $x167 $x100 (not (= (+ ?x353 ?x463 ?x352 ?x692 (* 6 ?x684) ?x673) 0)))))
 (rewrite (= $x120 $x200))))))))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x73 (+ n 1)))
 (let ((?x75 (+ (* (- 1) ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* 6 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x73))))
 (let ((?x81 (+ (- ?x75 (* ?x69 ?x70 ?x71 ?x73 ?x73 ?x73)) (* 6 ?x69 ?x70 ?x73 ?x73 ?x73 ?x73) (* 6 ?x69 ?x70 ?x73 ?x73 ?x73) (* 6 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x461 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x303 (+ 6 m)))
 (let ((?x676 (* ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x673 (* 6 ?x676)))
 (let ((?x301 (+ 1 n)))
 (let ((?x684 (* ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x691 (* ?x301 ?x301 ?x301 ?x301 ?x70 ?x69)))
 (let ((?x692 (* 6 ?x691)))
 (let ((?x464 (* ?x301 ?x301 ?x301 ?x303 ?x70 ?x69)))
 (let ((?x352 (* (- 1) ?x464)))
 (let ((?x462 (* ?x301 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x463 (* 6 ?x462)))
 (let ((?x354 (* ?x303 ?x303 ?x303 ?x303 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x353 (* (- 1) ?x354)))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x167 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x217 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x120 (and $x119 (= ?x217 (- 4)) $x167 $x100 (not (= (+ ?x353 ?x463 ?x352 ?x692 (* 6 ?x684) ?x673) 0)))))
 (let ((?x71 (+ m 6)))
 (let ((?x73 (+ n 1)))
 (let ((?x75 (+ (* (- 1) ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* 6 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x73))))
 (let ((?x81 (+ (- ?x75 (* ?x69 ?x70 ?x71 ?x73 ?x73 ?x73)) (* 6 ?x69 ?x70 ?x73 ?x73 ?x73 ?x73) (* 6 ?x69 ?x70 ?x73 ?x73 ?x73) (* 6 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x120)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x248 (mp (mp @x87 (quant-intro (proof-bind ?x461) (= $x86 $x544)) $x544) (rewrite (= $x544 $x544)) $x544)))
 (let ((@x236 (mp (mp @x248 (quant-intro (proof-bind ?x351) (= $x544 $x140)) $x140) (quant-intro (proof-bind ?x549) (= $x140 $x550)) $x550)))
 (let ((@x135 (mp (mp~ @x236 (sk (~ $x550 $x675)) $x675) (rewrite (= $x675 $x298)) $x298)))
 (let ((@x292 (and-elim @x135 $x682)))
 (let ((@x724 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x682) $x708)) @x292 $x708)))
 (let (($x545 (>= ?x674 1)))
 (let ((@x731 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x682) $x545)) @x292 $x545)))
 (let (($x726 (<= ?x677 1)))
 (let ((@x273 (and-elim @x135 $x290)))
 (let ((@x572 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x290) $x726)) @x273 $x726)))
 (let (($x547 (>= ?x677 1)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x290) $x547)) @x273 $x547)))
 (let (($x244 (<= ?x210 6)))
 (let ((@x178 (and-elim @x135 $x114)))
 (let ((@x224 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x114) $x244)) @x178 $x244)))
 (let (($x732 (>= ?x210 6)))
 (let ((@x307 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x114) $x732)) @x178 $x732)))
 (let (($x134 (<= ?x663 4)))
 (let ((@x246 (and-elim @x135 $x280)))
 (let ((@x632 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x134)) @x246 $x134)))
 (let (($x546 (>= ?x663 4)))
 (let ((@x228 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x546)) @x246 $x546)))
 (let (($x229 (not (<= ?x615 0))))
 (let (($x720 (>= ?x615 0)))
 (let ((@x568 ((_ th-lemma arith) (hypothesis (not $x720)) @x104 @x572 @x307 @x224 @x104 @x572 @x104 @x572 @x731 @x724 @x228 @x632 @x731 @x724 @x104 @x572 @x307 @x224 @x307 @x224 @x104 @x572 @x731 @x724 false)))
 (let ((@x223 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x162 $x229 (not $x720))) (and-elim @x135 $x136) (or $x229 (not $x720)))))
 ((_ th-lemma arith) (unit-resolution @x223 (lemma @x568 $x720) $x229) @x104 @x572 @x307 @x224 @x104 @x572 @x104 @x572 @x731 @x724 @x228 @x632 @x731 @x724 @x104 @x572 @x307 @x224 @x307 @x224 @x104 @x572 @x731 @x724 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        27
 :arith-branch-var          3
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           16
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             363
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             6
 :arith-pivots              10
 :arith-row-summations      14
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 11
 :del-clause                16
 :final-checks              12
 :max-memory                3.62
 :memory                    3.15
 :mk-bool-var               31
 :mk-clause                 16
 :num-allocs                1214465
 :num-checks                1
 :propagations              12
 :rlimit-count              7235
 :time                      0.01
 :total-time                0.02)
