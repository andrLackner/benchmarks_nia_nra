unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x91 (* (- 1) x!1)))
 (let ((?x183 (+ y00 x00 ?x91 (* (- 1) y!0))))
 (let (($x339 (>= ?x183 0)))
 (let (($x189 (= ?x183 0)))
 (let ((?x397 (* x!1 y!0 y!0)))
 (let ((?x269 (* (- 2) ?x397)))
 (let ((?x350 (* x!1 x!1 y!0)))
 (let ((?x386 (* 2 ?x350)))
 (let ((?x403 (* 2 y!0)))
 (let ((?x313 (* (- 4) x!1)))
 (let ((?x344 (* x!1 y!0)))
 (let ((?x385 (* (- 4) ?x344)))
 (let ((?x321 (* y!0 y!0)))
 (let ((?x305 (* x!1 x!1)))
 (let ((?x314 (* 2 ?x305)))
 (let ((?x270 (* x!1 x!1 y!0 y!0)))
 (let ((?x404 (* x!1 y!0 y!0 y!0)))
 (let ((?x401 (* x!1 x!1 x!1)))
 (let ((?x399 (* x!1 x!1 x!1 y!0)))
 (let ((?x384 (* 3 ?x397)))
 (let ((?x402 (* (- 1) (* y!0 y!0 y!0))))
 (let ((?x396 (* (- 3) ?x350)))
 (let ((?x329 (* (- 4) y!0)))
 (let ((?x117 (* 4 x!1)))
 (let ((?x360 (* 6 ?x344)))
 (let ((?x383 (* (- 3) ?x321)))
 (let ((?x395 (* (- 3) ?x305)))
 (let ((?x163 (* (+ ?x305 (* (- 1) ?x344) ?x91 ?x350) (+ (- 2) ?x395 ?x383 ?x360 ?x117 ?x329 ?x396 ?x402 ?x384 ?x399 ?x401 ?x404) (+ 2 ?x270 ?x314 ?x321 ?x385 ?x313 ?x403 ?x386 ?x269) (+ (* (- 1) y00) (* (- 1) x00) x!1 y!0))))
 (let (($x165 (= ?x163 0)))
 (let (($x146 (not $x165)))
 (let (($x164 (and $x189 $x146)))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x349 (+ x!1 y!0 ?x56 ?x63)))
 (let ((?x351 (* (+ ?x91 (* (- 1) ?x344) ?x350 ?x305) (+ (- 2) ?x117 ?x329 ?x360 ?x396 ?x395 ?x383 ?x384 ?x399 ?x401 ?x402 ?x404) (+ 2 ?x313 ?x403 ?x385 ?x386 ?x314 ?x321 ?x269 ?x270) ?x349)))
 (let (($x390 (and (= ?x349 0) (not (= ?x351 0)))))
 (let (($x228 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x213 (* x x y y)))
 (let ((?x211 (* x y y)))
 (let ((?x247 (* (- 2) ?x211)))
 (let ((?x207 (* y y)))
 (let ((?x156 (* x x)))
 (let ((?x285 (* 2 ?x156)))
 (let ((?x145 (* x x y)))
 (let ((?x246 (* 2 ?x145)))
 (let ((?x245 (* 2 y)))
 (let ((?x378 (+ 2 (* (- 4) x) ?x245 (* (- 4) (* x y)) ?x246 ?x285 ?x207 ?x247 ?x213)))
 (let ((?x371 (* x y y y)))
 (let ((?x370 (* (- 1) (* y y y))))
 (let ((?x326 (* x x x)))
 (let ((?x309 (* x x x y)))
 (let ((?x400 (* 3 ?x211)))
 (let ((?x345 (* (- 3) ?x145)))
 (let ((?x419 (+ (- 2) (* 4 x) (* (- 4) y) (* 6 (* x y)) ?x345 (* (- 3) ?x156) (* (- 3) ?x207) ?x400 ?x309 ?x326 ?x370 ?x371)))
 (let ((?x118 (* (+ (* (- 1) x) (* (- 1) (* x y)) ?x145 ?x156) ?x419 ?x378 ?x77)))
 (let (($x82 (= ?x77 0)))
 (and $x82 (not (= ?x118 0))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x114 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x213 (* x x y y)))
 (let ((?x211 (* x y y)))
 (let ((?x247 (* (- 2) ?x211)))
 (let ((?x207 (* y y)))
 (let ((?x156 (* x x)))
 (let ((?x285 (* 2 ?x156)))
 (let ((?x145 (* x x y)))
 (let ((?x246 (* 2 ?x145)))
 (let ((?x245 (* 2 y)))
 (let ((?x286 (+ 2 (* (- 3) x) ?x245 (* (- 2) (* x y)) ?x246 ?x285 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x207 ?x247 ?x213)))
 (let ((?x371 (* x y y y)))
 (let ((?x370 (* (- 1) (* y y y))))
 (let ((?x326 (* x x x)))
 (let ((?x309 (* x x x y)))
 (let ((?x400 (* 3 ?x211)))
 (let ((?x345 (* (- 3) ?x145)))
 (let ((?x415 (+ (- 2) (* 3 x) (* (- 2) y) (* 5 (* x y)) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x345 (* (- 2) ?x156) (* (- 1) (* y 1)) (* (- 1) ?x207) ?x400 ?x309 ?x326 (* (- 1) (* y 1 1)) (* (- 1) (* y y 1)) (* (- 1) (* y 1 y)) ?x370 ?x371)))
 (let ((?x124 (* x y)))
 (let ((?x144 (* (- 1) ?x124)))
 (let ((?x178 (+ (* (- 1) (* x 1)) ?x144 ?x145 ?x156)))
 (let (($x82 (= ?x77 0)))
 (and $x82 (not (= (* ?x178 ?x415 ?x286 ?x77) 0))))))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x223 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x213 (* x x y y)))
 (let ((?x211 (* x y y)))
 (let ((?x247 (* (- 2) ?x211)))
 (let ((?x207 (* y y)))
 (let ((?x156 (* x x)))
 (let ((?x285 (* 2 ?x156)))
 (let ((?x145 (* x x y)))
 (let ((?x246 (* 2 ?x145)))
 (let ((?x245 (* 2 y)))
 (let ((?x378 (+ 2 (* (- 4) x) ?x245 (* (- 4) (* x y)) ?x246 ?x285 ?x207 ?x247 ?x213)))
 (let ((?x371 (* x y y y)))
 (let ((?x370 (* (- 1) (* y y y))))
 (let ((?x326 (* x x x)))
 (let ((?x309 (* x x x y)))
 (let ((?x400 (* 3 ?x211)))
 (let ((?x345 (* (- 3) ?x145)))
 (let ((?x419 (+ (- 2) (* 4 x) (* (- 4) y) (* 6 (* x y)) ?x345 (* (- 3) ?x156) (* (- 3) ?x207) ?x400 ?x309 ?x326 ?x370 ?x371)))
 (let ((?x118 (* (+ (* (- 1) x) (* (- 1) (* x y)) ?x145 ?x156) ?x419 ?x378 ?x77)))
 (let (($x82 (= ?x77 0)))
 (let (($x227 (and $x82 (not (= ?x118 0)))))
 (let ((?x286 (+ 2 (* (- 3) x) ?x245 (* (- 2) (* x y)) ?x246 ?x285 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x207 ?x247 ?x213)))
 (let ((?x415 (+ (- 2) (* 3 x) (* (- 2) y) (* 5 (* x y)) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x345 (* (- 2) ?x156) (* (- 1) (* y 1)) (* (- 1) ?x207) ?x400 ?x309 ?x326 (* (- 1) (* y 1 1)) (* (- 1) (* y y 1)) (* (- 1) (* y 1 y)) ?x370 ?x371)))
 (let ((?x124 (* x y)))
 (let ((?x144 (* (- 1) ?x124)))
 (let ((?x178 (+ (* (- 1) (* x 1)) ?x144 ?x145 ?x156)))
 (let (($x394 (and $x82 (not (= (* ?x178 ?x415 ?x286 ?x77) 0)))))
 (rewrite (= $x394 $x227))))))))))))))))))))))))))))))))
 ))
 (let (($x202 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x229 (+ x ?x56 ?x63 y)))
 (let ((?x302 (+ (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x332 (+ (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x301 (+ (* (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (and (= ?x229 0) (not (= (* ?x301 ?x332 ?x302 ?x229) 0))))))))) :qid k!26))
 ))
 (let ((?x218 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x213 (* x x y y)))
 (let ((?x211 (* x y y)))
 (let ((?x247 (* (- 2) ?x211)))
 (let ((?x207 (* y y)))
 (let ((?x156 (* x x)))
 (let ((?x285 (* 2 ?x156)))
 (let ((?x145 (* x x y)))
 (let ((?x246 (* 2 ?x145)))
 (let ((?x245 (* 2 y)))
 (let ((?x286 (+ 2 (* (- 3) x) ?x245 (* (- 2) (* x y)) ?x246 ?x285 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x207 ?x247 ?x213)))
 (let ((?x371 (* x y y y)))
 (let ((?x370 (* (- 1) (* y y y))))
 (let ((?x326 (* x x x)))
 (let ((?x309 (* x x x y)))
 (let ((?x400 (* 3 ?x211)))
 (let ((?x345 (* (- 3) ?x145)))
 (let ((?x415 (+ (- 2) (* 3 x) (* (- 2) y) (* 5 (* x y)) (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x345 (* (- 2) ?x156) (* (- 1) (* y 1)) (* (- 1) ?x207) ?x400 ?x309 ?x326 (* (- 1) (* y 1 1)) (* (- 1) (* y y 1)) (* (- 1) (* y 1 y)) ?x370 ?x371)))
 (let ((?x124 (* x y)))
 (let ((?x144 (* (- 1) ?x124)))
 (let ((?x178 (+ (* (- 1) (* x 1)) ?x144 ?x145 ?x156)))
 (let (($x82 (= ?x77 0)))
 (let (($x394 (and $x82 (not (= (* ?x178 ?x415 ?x286 ?x77) 0)))))
 (let ((?x229 (+ x ?x56 ?x63 y)))
 (let ((?x302 (+ (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x332 (+ (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x301 (+ (* (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let (($x239 (and (= ?x229 0) (not (= (* ?x301 ?x332 ?x302 ?x229) 0)))))
 (rewrite (= $x239 $x394)))))))))))))))))))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x47 (+ (* (- x 1) (- x 1) (- x 1) (+ y 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x44 (+ (* (- x 1) (- x 1) (+ y 1) (+ y 1)) (* (- x 1) (- x 1)))))
 (let ((?x41 (+ (* (- x 1) (+ y 1)) (* (- x 1) (- x 1) (+ y 1)))))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) ?x41 ?x44 ?x47)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)))))))) :qid k!26))
 ))
 (let ((?x206 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x229 (+ x ?x56 ?x63 y)))
 (let ((?x302 (+ (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x332 (+ (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x301 (+ (* (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let (($x239 (and (= ?x229 0) (not (= (* ?x301 ?x332 ?x302 ?x229) 0)))))
 (let ((?x47 (+ (* (- x 1) (- x 1) (- x 1) (+ y 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x44 (+ (* (- x 1) (- x 1) (+ y 1) (+ y 1)) (* (- x 1) (- x 1)))))
 (let ((?x41 (+ (* (- x 1) (+ y 1)) (* (- x 1) (- x 1) (+ y 1)))))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) ?x41 ?x44 ?x47)))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0))))))
 (rewrite (= $x52 $x239)))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x251 (mp (mp @x54 (quant-intro (proof-bind ?x206) (= $x53 $x202)) $x202) (rewrite (= $x202 $x202)) $x202)))
 (let ((@x308 (mp (mp @x251 (quant-intro (proof-bind ?x218) (= $x202 $x114)) $x114) (quant-intro (proof-bind ?x223) (= $x114 $x228)) $x228)))
 (let ((@x282 (mp (mp~ @x308 (sk (~ $x228 $x390)) $x390) (rewrite (= $x390 $x164)) $x164)))
 (let ((@x234 (and-elim @x282 $x189)))
 (let ((@x233 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x339)) @x234 $x339)))
 (let (($x154 (<= ?x183 0)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x154)) @x234 $x154)))
 (let (($x254 (not (>= ?x163 0))))
 (let (($x335 (<= ?x163 0)))
 (let ((@x257 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x165 (not $x335) $x254)) (and-elim @x282 $x146) (or (not $x335) $x254))))
 (let ((@x217 (unit-resolution @x257 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x335)) @x250 @x233 false) $x335) $x254)))
 ((_ th-lemma arith farkas 1 1 1) @x217 @x250 @x233 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             66
 :arith-nonlinear-bounds    6
 :arith-num-rows            5
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.60
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1107320
 :num-checks                1
 :propagations              4
 :rlimit-count              2092
 :time                      0.01
 :total-time                0.02)
