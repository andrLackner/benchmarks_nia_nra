unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x66 (* y00 q00)))
 (let ((?x288 (+ r00 ?x66 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x117 (>= ?x288 0)))
 (let (($x287 (= ?x288 0)))
 (let ((?x242 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x137 (* (- 1) (* y00 y00 y00))))
 (let ((?x322 (+ (* (- 3) (* y00 y00 y00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 y00 y00 y00 q!2)) ?x137 ?x242 (* y00 y00 r!1 r!1 r!1) (* (- 1) (* y00 y00 y00 q!2 q!2)) (* (- 2) (* y00 y00 y00 q!2)) (* (- 3) (* y00 y00 y00 r!1 r!1)) (* y00 y00 r!1 r!1 r!1 q!2) (* 3 (* y00 y00 y00 y00 r!1)) (* 3 (* y00 y00 y00 y00 r!1 q!2)))))
 (let ((?x326 (* ?x322 (+ (* (- 1) r00) (* (- 1) ?x66) (* y00 q!2) r!1))))
 (let (($x281 (= ?x326 0)))
 (let (($x327 (not $x281)))
 (let (($x69 (and (= (+ y00 (* (- 1) y!0)) 0) $x287 $x327)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x266 (+ r!1 ?x62 (* q!2 y00) ?x76)))
 (let ((?x93 (+ ?x137 (* (- 2) (* q!2 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00)) (* r!1 r!1 r!1 y00 y00) (* q!2 r!1 r!1 r!1 y00 y00) (* (- 3) (* r!1 r!1 y00 y00 y00)) (* (- 3) (* q!2 r!1 r!1 y00 y00 y00)) (* 3 (* r!1 y00 y00 y00 y00)) (* 3 (* q!2 r!1 y00 y00 y00 y00)) ?x242 (* (- 1) (* q!2 y00 y00 y00 y00 y00)))))
 (let (($x94 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x266 0) (not (= (* ?x93 ?x266) 0)))))
 (let (($x202 (exists ((q Int) (r Int) (y Int) )(! (let ((?x66 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x39 (* q y00)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x90 (+ r ?x62 ?x39 ?x76)))
 (let ((?x246 (* (- 1) (* q y00 y00 y00 y00 y00))))
 (let ((?x242 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x257 (* 3 (* q r y00 y00 y00 y00))))
 (let ((?x256 (* 3 (* r y00 y00 y00 y00))))
 (let ((?x254 (* (- 3) (* q r r y00 y00 y00))))
 (let ((?x253 (* (- 3) (* r r y00 y00 y00))))
 (let ((?x153 (* q r r r y00 y00)))
 (let ((?x152 (* r r r y00 y00)))
 (let ((?x143 (* (- 1) (* q q y00 y00 y00))))
 (let ((?x137 (* (- 1) (* y00 y00 y00))))
 (let ((?x354 (+ ?x137 (* (- 2) (* q y00 y00 y00)) ?x143 ?x152 ?x153 ?x253 ?x254 ?x256 ?x257 ?x242 ?x246)))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (and $x72 $x95 (not (= (* ?x354 ?x90) 0))))))))))))))))))))) :qid k!29))
 ))
 (let (($x89 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x110 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x227 (+ r ?x61)))
 (let ((?x187 (+ 1 q)))
 (let ((?x162 (+ (* (- 1) (* y00 y00 y00 ?x187 ?x187)) (* y00 y00 ?x187 ?x227 ?x227 ?x227))))
 (let (($x234 (not (= (* ?x162 (+ r ?x61 ?x62 ?x110 (* y00 ?x187))) 0))))
 (let (($x188 (= (+ r ?x62 ?x110 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x188 $x234)))))))))) :qid k!29))
 ))
 (let ((?x174 (lambda ((q Int) (r Int) (y Int) )(let ((?x66 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x39 (* q y00)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x90 (+ r ?x62 ?x39 ?x76)))
 (let ((?x246 (* (- 1) (* q y00 y00 y00 y00 y00))))
 (let ((?x242 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x257 (* 3 (* q r y00 y00 y00 y00))))
 (let ((?x256 (* 3 (* r y00 y00 y00 y00))))
 (let ((?x254 (* (- 3) (* q r r y00 y00 y00))))
 (let ((?x253 (* (- 3) (* r r y00 y00 y00))))
 (let ((?x153 (* q r r r y00 y00)))
 (let ((?x152 (* r r r y00 y00)))
 (let ((?x143 (* (- 1) (* q q y00 y00 y00))))
 (let ((?x137 (* (- 1) (* y00 y00 y00))))
 (let ((?x354 (+ ?x137 (* (- 2) (* q y00 y00 y00)) ?x143 ?x152 ?x153 ?x253 ?x254 ?x256 ?x257 ?x242 ?x246)))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (let (($x362 (and $x72 $x95 (not (= (* ?x354 ?x90) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x110 (* (- 1) ?x36)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x227 (+ r ?x61)))
 (let ((?x187 (+ 1 q)))
 (let ((?x162 (+ (* (- 1) (* y00 y00 y00 ?x187 ?x187)) (* y00 y00 ?x187 ?x227 ?x227 ?x227))))
 (let (($x234 (not (= (* ?x162 (+ r ?x61 ?x62 ?x110 (* y00 ?x187))) 0))))
 (let (($x188 (= (+ r ?x62 ?x110 (* y00 q)) 0)))
 (let (($x84 (and (= (+ y00 (* (- 1) y)) 0) $x188 $x234)))
 (rewrite (= $x84 $x362)))))))))))))))))))))))))))))))
 ))
 (let (($x109 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x110 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x227 (+ r ?x61)))
 (let ((?x187 (+ 1 q)))
 (let ((?x162 (+ (* (- 1) (* y00 y00 y00 ?x187 ?x187)) (* y00 y00 ?x187 ?x227 ?x227 ?x227))))
 (let (($x234 (not (= (* ?x162 (+ r ?x61 ?x62 ?x110 (* y00 ?x187))) 0))))
 (let (($x188 (= (+ r ?x62 ?x110 (* y00 q)) 0)))
 (and (= (+ ?x61 y) 0) $x188 $x234)))))))))) :qid k!29))
 ))
 (let ((?x223 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x110 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x227 (+ r ?x61)))
 (let ((?x187 (+ 1 q)))
 (let ((?x162 (+ (* (- 1) (* y00 y00 y00 ?x187 ?x187)) (* y00 y00 ?x187 ?x227 ?x227 ?x227))))
 (let (($x234 (not (= (* ?x162 (+ r ?x61 ?x62 ?x110 (* y00 ?x187))) 0))))
 (let (($x188 (= (+ r ?x62 ?x110 (* y00 q)) 0)))
 (let (($x84 (and (= (+ y00 (* (- 1) y)) 0) $x188 $x234)))
 (let (($x207 (and (= (+ ?x61 y) 0) $x188 $x234)))
 (rewrite (= $x207 $x84))))))))))))))
 ))
 (let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x45 y00 y00 y00) (* ?x45 ?x42 ?x42 ?x42 y00 y00))))
 (let (($x52 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x50) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x52))))))) :qid k!29))
 ))
 (let ((?x82 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x110 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x227 (+ r ?x61)))
 (let ((?x187 (+ 1 q)))
 (let ((?x162 (+ (* (- 1) (* y00 y00 y00 ?x187 ?x187)) (* y00 y00 ?x187 ?x227 ?x227 ?x227))))
 (let (($x234 (not (= (* ?x162 (+ r ?x61 ?x62 ?x110 (* y00 ?x187))) 0))))
 (let (($x188 (= (+ r ?x62 ?x110 (* y00 q)) 0)))
 (let (($x207 (and (= (+ ?x61 y) 0) $x188 $x234)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x45 y00 y00 y00) (* ?x45 ?x42 ?x42 ?x42 y00 y00))))
 (let (($x53 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x50) 0))))
 (let (($x55 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x53))))
 (rewrite (= $x55 $x207))))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x79 (mp (mp @x57 (quant-intro (proof-bind ?x82) (= $x56 $x109)) $x109) (rewrite (= $x109 $x109)) $x109)))
 (let ((@x168 (mp (mp @x79 (quant-intro (proof-bind ?x223) (= $x109 $x89)) $x89) (quant-intro (proof-bind ?x174) (= $x89 $x202)) $x202)))
 (let ((@x346 (mp (mp~ @x168 (sk (~ $x202 $x94)) $x94) (rewrite (= $x94 $x69)) $x69)))
 (let ((@x262 (and-elim @x346 $x287)))
 (let ((@x314 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x287) $x117)) @x262 $x117)))
 (let (($x119 (<= ?x288 0)))
 (let ((@x147 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x287) $x119)) @x262 $x119)))
 (let (($x319 (not (<= ?x326 0))))
 (let (($x108 (>= ?x326 0)))
 (let ((@x325 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x281 $x319 (not $x108))) (and-elim @x346 $x327) (or $x319 (not $x108)))))
 (let ((@x68 (unit-resolution @x325 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x108)) @x147 @x314 false) $x108) $x319)))
 ((_ th-lemma arith farkas 1 1 1) @x68 @x147 @x314 false))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        8
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             78
 :arith-nonlinear-horner    6
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                14
 :final-checks              2
 :max-memory                3.57
 :memory                    3.09
 :mk-bool-var               21
 :mk-clause                 18
 :num-allocs                1093515
 :num-checks                1
 :propagations              6
 :rlimit-count              2088
 :time                      0.01
 :total-time                0.01)
