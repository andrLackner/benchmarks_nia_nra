unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x218 (* (- 9) (* n!0 c!3))))
 (let ((?x244 (* (- 32) k!2)))
 (let ((?x296 (* (- 5) m!1)))
 (let ((?x301 (* (- 27) c!3)))
 (let ((?x281 (* m!1 m!1)))
 (let ((?x131 (* k!2 k!2)))
 (let ((?x464 (* 9 n!0)))
 (let ((?x319 (+ 13 ?x464 ?x131 ?x281 (* (- 9) (* n!0 k!2)) ?x301 ?x296 ?x244 ?x218 (* 2 (* m!1 k!2)))))
 (let (($x412 (<= ?x319 0)))
 (let ((?x222 (+ ?x464 ?x131 (* (- 18) c!3) (* (- 5) k!2) ?x218)))
 (let (($x107 (<= ?x222 (- 4))))
 (let (($x303 (= ?x222 (- 4))))
 (let ((?x347 (* (- 1) m!1)))
 (let ((?x206 (+ c!3 k!2)))
 (let ((?x194 (+ 6 m!1)))
 (let ((?x208 (+ 1 n!0)))
 (let ((?x195 (* ?x208 ?x208 ?x194 ?x194 ?x206 ?x206 ?x206)))
 (let ((?x115 (* (+ (- 7) ?x195 ?x347) ?x319)))
 (let (($x466 (= ?x115 0)))
 (let (($x114 (not $x466)))
 (let ((?x418 (* (- 1) k!2)))
 (let ((?x365 (+ (* 3 n!0) ?x418 (* 3 (* n!0 n!0)))))
 (let (($x397 (= ?x365 (- 1))))
 (let ((?x292 (* n!0 k!2)))
 (let ((?x419 (+ (* 2 n!0) ?x292 (* (- 3) c!3) ?x418)))
 (let (($x420 (= ?x419 (- 1))))
 (let ((?x179 (+ (* 6 n!0) ?x347)))
 (let (($x180 (= ?x179 (- 6))))
 (let (($x548 (and $x180 $x303 $x420 $x397 $x114)))
 (let ((?x276 (+ 13 ?x301 ?x244 ?x296 ?x464 ?x131 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x281)))
 (let (($x305 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x142 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x131) (* 9 (* c!3 n!0)))))
 (let (($x237 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x142 4) $x305 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* (+ (- 7) ?x347 ?x195) ?x276) 0)))))
 (let (($x138 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x480 (+ 13 (* (- 27) c) (* (- 32) k) ?x425 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x344 (* ?x340 ?x340 ?x487 ?x487 ?x68 ?x68 ?x68)))
 (let ((?x554 (* (- 1) m)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* (+ (- 7) ?x554 ?x344) ?x480) 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x183 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x97 (* (- 18) c)))
 (let ((?x307 (+ 13 ?x97 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x554 (* (- 1) m)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x344 (* ?x340 ?x340 ?x487 ?x487 ?x68 ?x68 ?x68)))
 (let (($x278 (not (= (* (+ (- 7) ?x344 ?x554) ?x307) 0))))
 (let (($x556 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x426 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x426 $x556 $x278))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x457 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x480 (+ 13 (* (- 27) c) (* (- 32) k) ?x425 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x344 (* ?x340 ?x340 ?x487 ?x487 ?x68 ?x68 ?x68)))
 (let ((?x554 (* (- 1) m)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x306 (and $x123 $x207 $x259 $x297 (not (= (* (+ (- 7) ?x554 ?x344) ?x480) 0)))))
 (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x97 (* (- 18) c)))
 (let ((?x307 (+ 13 ?x97 (* (- 23) k) (* (- 9) (* ?x340 ?x68)) ?x425 ?x48 ?x78)))
 (let (($x278 (not (= (* (+ (- 7) ?x344 ?x554) ?x307) 0))))
 (let (($x556 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x426 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x125 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x426 $x556 $x278)))
 (rewrite (= $x125 $x306)))))))))))))))))))))))))))))
 ))
 (let (($x279 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x97 (* (- 18) c)))
 (let ((?x307 (+ 13 ?x97 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x554 (* (- 1) m)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x344 (* ?x340 ?x340 ?x487 ?x487 ?x68 ?x68 ?x68)))
 (let (($x278 (not (= (* (+ (- 7) ?x344 ?x554) ?x307) 0))))
 (let (($x556 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x388 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x549 (= (+ ?x97 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x549 $x388 $x556 $x278))))))))))))))))) :qid k!34))
 ))
 (let ((?x428 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x97 (* (- 18) c)))
 (let ((?x307 (+ 13 ?x97 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x554 (* (- 1) m)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x344 (* ?x340 ?x340 ?x487 ?x487 ?x68 ?x68 ?x68)))
 (let (($x278 (not (= (* (+ (- 7) ?x344 ?x554) ?x307) 0))))
 (let (($x556 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x426 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x125 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x426 $x556 $x278)))
 (let (($x388 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x549 (= (+ ?x97 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x291 (and $x123 $x549 $x388 $x556 $x278)))
 (rewrite (= $x291 $x125)))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x81 (+ m 6)))
 (let ((?x70 (+ n 1)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x85 (* (+ ?x76 (* 9 ?x70) ?x78) (- (+ (- 1) (* ?x68 ?x68 ?x68 ?x81 ?x81 ?x70 ?x70)) ?x81))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x284 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x425 (* (- 5) m)))
 (let ((?x97 (* (- 18) c)))
 (let ((?x307 (+ 13 ?x97 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x425 ?x48 ?x78)))
 (let ((?x554 (* (- 1) m)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x344 (* ?x340 ?x340 ?x487 ?x487 ?x68 ?x68 ?x68)))
 (let (($x278 (not (= (* (+ (- 7) ?x344 ?x554) ?x307) 0))))
 (let (($x556 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x388 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x549 (= (+ ?x97 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x291 (and $x123 $x549 $x388 $x556 $x278)))
 (let ((?x81 (+ m 6)))
 (let ((?x83 (+ (- 1) (* ?x68 ?x68 ?x68 ?x81 ?x81 (+ n 1) (+ n 1)))))
 (let ((?x75 (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 (+ n 1)))))
 (let ((?x85 (* (+ (- ?x75 (* 5 ?x72)) (* 9 (+ n 1)) ?x78) (- ?x83 ?x81))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0))))))
 (rewrite (= $x89 $x291)))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x121 (mp (mp @x91 (quant-intro (proof-bind ?x284) (= $x90 $x279)) $x279) (rewrite (= $x279 $x279)) $x279)))
 (let ((@x277 (mp (mp @x121 (quant-intro (proof-bind ?x428) (= $x279 $x183)) $x183) (quant-intro (proof-bind ?x457) (= $x183 $x138)) $x138)))
 (let ((@x380 (mp (mp~ @x277 (sk (~ $x138 $x237)) $x237) (rewrite (= $x237 $x548)) $x548)))
 (let ((@x110 (and-elim @x380 $x303)))
 (let ((@x317 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x303) $x107)) @x110 $x107)))
 (let (($x189 (>= ?x222 (- 4))))
 (let ((@x337 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x303) $x189)) @x110 $x189)))
 (let (($x191 (<= ?x179 (- 6))))
 (let ((@x334 (and-elim @x380 $x180)))
 (let ((@x184 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x180) $x191)) @x334 $x191)))
 (let (($x116 (>= ?x179 (- 6))))
 (let ((@x440 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x180) $x116)) @x334 $x116)))
 (let (($x392 (<= ?x365 (- 1))))
 (let ((@x288 (and-elim @x380 $x397)))
 (let ((@x352 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x397) $x392)) @x288 $x392)))
 (let (($x185 (>= ?x365 (- 1))))
 (let ((@x355 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x397) $x185)) @x288 $x185)))
 (let (($x190 (<= ?x419 (- 1))))
 (let ((@x285 (and-elim @x380 $x420)))
 (let ((@x112 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x420) $x190)) @x285 $x190)))
 (let (($x186 (>= ?x419 (- 1))))
 (let ((@x379 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x420) $x186)) @x285 $x186)))
 (let ((@x373 ((_ th-lemma arith) (hypothesis (not $x412)) @x440 @x184 @x355 @x352 @x355 @x352 @x355 @x352 @x337 @x317 @x337 @x317 @x379 @x112 @x379 @x112 @x355 @x352 @x440 @x184 @x337 @x317 false)))
 (let ((@x364 (lemma @x373 $x412)))
 (let (($x410 (>= ?x319 0)))
 (let ((@x216 ((_ th-lemma arith) (hypothesis (not $x410)) @x440 @x184 @x440 @x184 @x355 @x352 @x355 @x352 @x440 @x184 @x379 @x112 @x440 @x184 @x337 @x317 false)))
 (let ((@x538 (lemma @x216 $x410)))
 (let (($x348 (not (<= ?x115 0))))
 (let (($x389 (>= ?x115 0)))
 (let (($x403 (= ?x319 0)))
 (let ((@x270 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x403 (not $x412) (not $x410))) @x364 (or $x403 (not $x410)))))
 (let ((@x154 (hypothesis $x403)))
 (let ((@x229 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x389)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x403) $x410)) @x154 $x410) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x403) $x412)) @x154 $x412) false)))
 (let ((@x273 (unit-resolution (lemma @x229 (or (not $x403) $x389)) (unit-resolution @x270 @x538 $x403) $x389)))
 (let ((@x133 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x466 $x348 (not $x389))) (and-elim @x380 $x114) (or $x348 (not $x389)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x133 @x273 $x348) @x538 @x364 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        5
 :arith-assert-lower        47
 :arith-assert-upper        41
 :arith-branch-var          4
 :arith-conflicts           8
 :arith-eq-adapter          10
 :arith-gcd-tests           28
 :arith-grobner             6
 :arith-ineq-splits         4
 :arith-max-min             395
 :arith-nonlinear-bounds    18
 :arith-nonlinear-horner    54
 :arith-num-rows            9
 :arith-patches             10
 :arith-patches_succ        3
 :arith-pivots              59
 :arith-pseudo-nonlinear    2
 :arith-row-summations      238
 :arith-tableau-max-columns 36
 :arith-tableau-max-rows    9
 :conflicts                 8
 :decisions                 22
 :del-clause                37
 :final-checks              22
 :max-memory                3.69
 :memory                    3.14
 :mk-bool-var               54
 :mk-clause                 39
 :num-allocs                2072874
 :num-checks                1
 :propagations              27
 :rlimit-count              47590
 :time                      0.02
 :total-time                0.02)
