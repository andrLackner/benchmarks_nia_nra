unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x320 (* (- 1) r!1)))
 (let ((?x361 (* 2 x!0)))
 (let ((?x489 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x510 (+ r00 ?x87 ?x103 ?x489 ?x361 ?x320)))
 (let (($x304 (<= ?x510 0)))
 (let (($x644 (= ?x510 0)))
 (let ((?x613 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x554 (* 2 (* r!1 r!1 r!1 r!1))))
 (let ((?x617 (* 2 (* r!1 r!1 r!1))))
 (let ((?x590 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x114 (* 3 r!1)))
 (let ((?x427 (* (- 1) x!0)))
 (let ((?x284 (* 3 ?x489)))
 (let ((?x654 (* (- 1) (* x!0 x!0))))
 (let ((?x479 (+ x!0 ?x320)))
 (let ((?x116 (+ 1 r!1)))
 (let ((?x378 (+ 1 (* (- 1) (* x!0 r!1)) (* ?x116 ?x116 ?x116 ?x479 ?x479 ?x479) (* (- 2) (* x!0 x!0 x!0 r!1)) (* (- 1) (* x!0 x!0 x!0 r!1 r!1)) (* (- 2) (* x!0 r!1 r!1)) (* 3 (* x!0 x!0 r!1 r!1 r!1)) (* 5 (* x!0 x!0 r!1 r!1)) ?x654 (* x!0 x!0 r!1) (* (- 3) (* x!0 r!1 r!1 r!1 r!1)) (* (- 5) (* x!0 r!1 r!1 r!1)) ?x284 ?x427 ?x114 ?x590 ?x617 ?x554 ?x613)))
 (let ((?x575 (* ?x378 ?x510)))
 (let (($x411 (= ?x575 0)))
 (let (($x579 (not $x411)))
 (let (($x420 (and $x644 $x579)))
 (let ((?x127 (+ 1 ?x114 ?x427 ?x284 (* (- 1) (* r!1 x!0)) (* (- 5) (* r!1 r!1 r!1 x!0)) (* ?x116 ?x116 ?x116 (+ ?x320 x!0) (+ ?x320 x!0) (+ ?x320 x!0)) ?x613 ?x554 ?x617 (* (- 1) (* r!1 r!1 x!0 x!0 x!0)) (* (- 2) (* r!1 x!0 x!0 x!0)) ?x590 (* (- 3) (* r!1 r!1 r!1 r!1 x!0)) (* r!1 x!0 x!0) (* 5 (* r!1 r!1 x!0 x!0)) (* 3 (* r!1 r!1 r!1 x!0 x!0)) (* (- 2) (* r!1 r!1 x!0)) ?x654)))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x368 (and (= (+ r!1 (* (- 2) x!0) ?x118 (* (- 1) ?x489) ?x35 ?x36) 0) (not (= (* ?x127 (+ ?x320 ?x361 r00 ?x489 ?x87 ?x103)) 0)))))
 (let (($x158 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x632 (* (- 1) (* x x))))
 (let ((?x536 (* 3 (* r r r x x))))
 (let ((?x637 (* 5 (* r r x x))))
 (let ((?x390 (* r x x)))
 (let ((?x527 (* (- 3) (* r r r r x))))
 (let ((?x503 (* (- 1) (* x x x))))
 (let ((?x524 (* (- 2) (* r x x x))))
 (let ((?x501 (* (- 1) (* r r x x x))))
 (let ((?x271 (* r r r r r)))
 (let ((?x174 (+ ?x66 x)))
 (let ((?x126 (+ 1 r)))
 (let ((?x268 (* ?x126 ?x126 ?x126 ?x174 ?x174 ?x174)))
 (let ((?x641 (* (- 5) (* r r r x))))
 (let ((?x255 (* (- 1) x)))
 (let ((?x327 (* 3 r)))
 (let ((?x495 (+ 1 ?x327 ?x255 (* 3 ?x30) (* (- 1) (* r x)) ?x641 ?x268 ?x271 (* 2 (* r r r r)) (* 2 (* r r r)) ?x501 ?x524 ?x503 ?x527 ?x390 ?x637 ?x536 (* (- 2) (* r r x)) ?x632)))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let ((?x117 (* (- 2) x)))
 (let (($x121 (= (+ r ?x117 ?x118 ?x119 ?x35 ?x36) 0)))
 (and $x121 (not (= (* ?x495 ?x109) 0))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x168 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x126 (+ 1 r)))
 (let ((?x167 (* ?x126 ?x126)))
 (let ((?x531 (* (- 1) (* ?x126 ?x126 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x66 (* (- 1) r)))
 (let ((?x364 (+ x ?x66)))
 (let ((?x587 (+ (* (- 1) (* ?x126 ?x126 ?x126 ?x364)) ?x167 (* ?x126 ?x126 ?x126 ?x364 ?x364 ?x364) (* (- 1) (* ?x126 ?x126 ?x364 ?x364 ?x364)) ?x531)))
 (let (($x182 (= (* ?x587 (+ (- 1) (* (- 3) r) r00 ?x167 ?x32 ?x87 ?x103)) 0)))
 (let (($x140 (not $x182)))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x140)))))))))))))))))) :qid k!26))
 ))
 (let ((?x607 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x632 (* (- 1) (* x x))))
 (let ((?x536 (* 3 (* r r r x x))))
 (let ((?x637 (* 5 (* r r x x))))
 (let ((?x390 (* r x x)))
 (let ((?x527 (* (- 3) (* r r r r x))))
 (let ((?x503 (* (- 1) (* x x x))))
 (let ((?x524 (* (- 2) (* r x x x))))
 (let ((?x501 (* (- 1) (* r r x x x))))
 (let ((?x271 (* r r r r r)))
 (let ((?x174 (+ ?x66 x)))
 (let ((?x126 (+ 1 r)))
 (let ((?x268 (* ?x126 ?x126 ?x126 ?x174 ?x174 ?x174)))
 (let ((?x641 (* (- 5) (* r r r x))))
 (let ((?x255 (* (- 1) x)))
 (let ((?x327 (* 3 r)))
 (let ((?x495 (+ 1 ?x327 ?x255 (* 3 ?x30) (* (- 1) (* r x)) ?x641 ?x268 ?x271 (* 2 (* r r r r)) (* 2 (* r r r)) ?x501 ?x524 ?x503 ?x527 ?x390 ?x637 ?x536 (* (- 2) (* r r x)) ?x632)))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let ((?x117 (* (- 2) x)))
 (let (($x121 (= (+ r ?x117 ?x118 ?x119 ?x35 ?x36) 0)))
 (let (($x624 (and $x121 (not (= (* ?x495 ?x109) 0)))))
 (let ((?x167 (* ?x126 ?x126)))
 (let ((?x587 (+ (* (- 1) (* ?x126 ?x126 ?x126 (+ x ?x66))) ?x167 (* ?x126 ?x126 ?x126 (+ x ?x66) (+ x ?x66) (+ x ?x66)) (* (- 1) (* ?x126 ?x126 (+ x ?x66) (+ x ?x66) (+ x ?x66))) (* (- 1) (* ?x126 ?x126 (+ x ?x66) (+ x ?x66))))))
 (let (($x182 (= (* ?x587 (+ (- 1) (* (- 3) r) r00 ?x167 ?x32 ?x87 ?x103)) 0)))
 (let (($x140 (not $x182)))
 (let (($x169 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x140)))
 (rewrite (= $x169 $x624)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x143 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x126 (+ 1 r)))
 (let ((?x167 (* ?x126 ?x126)))
 (let ((?x531 (* (- 1) (* ?x126 ?x126 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x66 (* (- 1) r)))
 (let ((?x364 (+ x ?x66)))
 (let ((?x587 (+ (* (- 1) (* ?x126 ?x126 ?x126 ?x364)) ?x167 (* ?x126 ?x126 ?x126 ?x364 ?x364 ?x364) (* (- 1) (* ?x126 ?x126 ?x364 ?x364 ?x364)) ?x531)))
 (let (($x182 (= (* ?x587 (+ (- 1) (* (- 3) r) r00 ?x167 ?x32 ?x87 ?x103)) 0)))
 (let (($x140 (not $x182)))
 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) $x140))))))))))))) :qid k!26))
 ))
 (let ((?x247 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x126 (+ 1 r)))
 (let ((?x167 (* ?x126 ?x126)))
 (let ((?x531 (* (- 1) (* ?x126 ?x126 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x66 (* (- 1) r)))
 (let ((?x364 (+ x ?x66)))
 (let ((?x587 (+ (* (- 1) (* ?x126 ?x126 ?x126 ?x364)) ?x167 (* ?x126 ?x126 ?x126 ?x364 ?x364 ?x364) (* (- 1) (* ?x126 ?x126 ?x364 ?x364 ?x364)) ?x531)))
 (let (($x182 (= (* ?x587 (+ (- 1) (* (- 3) r) r00 ?x167 ?x32 ?x87 ?x103)) 0)))
 (let (($x140 (not $x182)))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x169 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x140)))
 (let (($x163 (and (= (+ ?x66 r00 ?x30 ?x32 ?x87 ?x103) 0) $x140)))
 (rewrite (= $x163 $x169))))))))))))))))))))))
 ))
 (let (($x61 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x51 (+ (* (- 1) ?x41 ?x41 ?x41 ?x44) ?x43 (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x56 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) (- (- ?x51 (* ?x41 ?x41 ?x44 ?x44 ?x44)) (* ?x41 ?x41 ?x44 ?x44)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x56 0)))))))))))) :qid k!26))
 ))
 (let ((?x148 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x126 (+ 1 r)))
 (let ((?x167 (* ?x126 ?x126)))
 (let ((?x531 (* (- 1) (* ?x126 ?x126 (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x66 (* (- 1) r)))
 (let ((?x364 (+ x ?x66)))
 (let ((?x587 (+ (* (- 1) (* ?x126 ?x126 ?x126 ?x364)) ?x167 (* ?x126 ?x126 ?x126 ?x364 ?x364 ?x364) (* (- 1) (* ?x126 ?x126 ?x364 ?x364 ?x364)) ?x531)))
 (let (($x182 (= (* ?x587 (+ (- 1) (* (- 3) r) r00 ?x167 ?x32 ?x87 ?x103)) 0)))
 (let (($x140 (not $x182)))
 (let (($x163 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) $x140)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x51 (+ (* (- 1) ?x41 ?x41 ?x41 ?x44) ?x43 (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x56 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) (- (- ?x51 (* ?x41 ?x41 ?x44 ?x44 ?x44)) (* ?x41 ?x41 ?x44 ?x44)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x60 (and $x40 (or (not (= ?x56 0))))))
 (rewrite (= $x60 $x163))))))))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x146 (mp (mp @x62 (quant-intro (proof-bind ?x148) (= $x61 $x143)) $x143) (rewrite (= $x143 $x143)) $x143)))
 (let ((@x601 (mp (mp @x146 (quant-intro (proof-bind ?x247) (= $x143 $x168)) $x168) (quant-intro (proof-bind ?x607) (= $x168 $x158)) $x158)))
 (let ((@x407 (mp (mp~ @x601 (sk (~ $x158 $x368)) $x368) (rewrite (= $x368 $x420)) $x420)))
 (let ((@x252 (and-elim @x407 $x644)))
 (let ((@x309 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x644) $x304)) @x252 $x304)))
 (let (($x334 (>= ?x510 0)))
 (let ((@x278 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x644) $x334)) @x252 $x334)))
 (let (($x367 (not (>= ?x575 0))))
 (let (($x333 (<= ?x575 0)))
 (let ((@x405 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x411 (not $x333) $x367)) (and-elim @x407 $x579) (or (not $x333) $x367))))
 (let ((@x581 (unit-resolution @x405 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x333)) @x278 @x309 false) $x333) $x367)))
 ((_ th-lemma arith farkas 1 1 1) @x581 @x278 @x309 false))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            4
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.63
 :memory                    3.13
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1110628
 :num-checks                1
 :propagations              4
 :rlimit-count              2301
 :time                      0.01
 :total-time                0.01)
