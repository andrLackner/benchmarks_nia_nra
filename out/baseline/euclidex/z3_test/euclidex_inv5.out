unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun s!0 () Int)
(declare-fun q!3 () Int)
(declare-fun p!5 () Int)
(declare-fun a!4 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x372 (* p00 s00 b!2)))
 (let ((?x301 (* r00 b00 q!3)))
 (let ((?x250 (* q00 a00 s!0)))
 (let ((?x223 (+ ?x250 ?x301 (* (- 1) (* q00 r00 b!2)) (* (- 1) (* s00 a00 q!3)) (* (- 1) (* p00 b00 s!0)) ?x372)))
 (let (($x291 (>= ?x223 0)))
 (let (($x229 (= ?x223 0)))
 (let ((?x254 (* (- 1) (* s00 a00 p!5))))
 (let ((?x380 (* (- 1) (* q00 r00 a!4))))
 (let ((?x401 (* q00 a00 r!1)))
 (let ((?x355 (* p00 b00 s!0)))
 (let ((?x345 (* s00 a00 q!3)))
 (let ((?x328 (* p00 s00 a!4)))
 (let ((?x317 (* q00 r00 b!2)))
 (let ((?x387 (* (- 1) (* p00 b00 r!1))))
 (let ((?x107 (* r00 b00 p!5)))
 (let ((?x145 (+ ?x107 ?x387 (* (- 1) ?x250) (* (- 1) ?x301) ?x317 ?x328 ?x345 ?x355 (* (- 1) ?x372) ?x401 ?x380 ?x254)))
 (let (($x160 (= ?x145 0)))
 (let (($x131 (not $x160)))
 (let (($x239 (not $x229)))
 (let (($x161 (or $x239 $x131)))
 (let ((?x384 (+ ?x107 ?x387 ?x328 ?x401 ?x380 ?x254)))
 (let (($x373 (= ?x384 0)))
 (let ((?x278 (* p!5 b!2)))
 (let ((?x123 (* q00 a00)))
 (let (($x417 (= (+ ?x123 (* (- 1) (* p00 b00)) (* (- 1) (* q!3 a!4)) ?x278) 0)))
 (let ((?x119 (* s00 a00)))
 (let ((?x108 (* b!2 r!1)))
 (let (($x444 (= (+ ?x108 ?x119 (* (- 1) (* s!0 a!4)) (* (- 1) (* r00 b00))) 0)))
 (let ((?x422 (* q!3 r!1)))
 (let ((?x37 (* p00 s00)))
 (let (($x440 (= (+ ?x37 (* (- 1) (* q00 r00)) (* (- 1) (* p!5 s!0)) ?x422) 0)))
 (let (($x138 (and $x440 $x444 $x417 $x373 $x229 $x161)))
 (let ((?x374 (* (- 1) (* s!0 q00 a00))))
 (let ((?x264 (* q!3 s00 a00)))
 (let ((?x200 (* (- 1) (* q!3 r00 b00))))
 (let ((?x192 (* s!0 p00 b00)))
 (let ((?x347 (* r!1 q00 a00)))
 (let ((?x344 (* (- 1) (* p!5 s00 a00))))
 (let ((?x325 (* (- 1) (* r!1 p00 b00))))
 (let ((?x259 (* p!5 r00 b00)))
 (let ((?x191 (* (- 1) (* b!2 p00 s00))))
 (let ((?x465 (* b!2 q00 r00)))
 (let ((?x469 (* (- 1) (* a!4 q00 r00))))
 (let ((?x148 (* a!4 p00 s00)))
 (let (($x365 (= (+ ?x148 ?x469 ?x465 ?x191 ?x259 ?x325 ?x344 ?x347 ?x192 ?x200 ?x264 ?x374) 0)))
 (let (($x136 (= (+ ?x465 ?x191 ?x192 ?x200 ?x264 ?x374) 0)))
 (let (($x153 (= (+ (* a!4 q!3) (* (- 1) ?x123) (* p00 b00) (* (- 1) ?x278)) 0)))
 (let (($x129 (= (+ (* a!4 s!0) (* (- 1) ?x108) (* (- 1) ?x119) (* r00 b00)) 0)))
 (let (($x228 (= (+ (* p!5 s!0) (* (- 1) ?x37) (* q00 r00) (* (- 1) ?x422)) 0)))
 (let (($x353 (and $x228 $x129 $x153 (= (+ ?x148 ?x469 ?x259 ?x325 ?x344 ?x347) 0) $x136 (or (not $x136) (not $x365)))))
 (let (($x503 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x293 (* (- 1) (* s q00 a00))))
 (let ((?x276 (* q s00 a00)))
 (let ((?x251 (* (- 1) (* q r00 b00))))
 (let ((?x241 (* s p00 b00)))
 (let ((?x212 (* r q00 a00)))
 (let ((?x234 (* (- 1) (* p s00 a00))))
 (let ((?x233 (* (- 1) (* r p00 b00))))
 (let ((?x178 (* p r00 b00)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x265 (* (- 1) ?x76)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x232 (* (- 1) ?x66)))
 (let ((?x63 (* a p00 s00)))
 (let (($x500 (= (+ ?x63 ?x232 ?x72 ?x265 ?x178 ?x233 ?x234 ?x212 ?x241 ?x251 ?x276 ?x293) 0)))
 (let (($x304 (= (+ ?x72 ?x265 ?x241 ?x251 ?x276 ?x293) 0)))
 (let ((?x124 (* p00 b00)))
 (let ((?x123 (* q00 a00)))
 (let ((?x167 (* (- 1) ?x123)))
 (let ((?x137 (* r00 b00)))
 (let ((?x119 (* s00 a00)))
 (let ((?x126 (* (- 1) ?x119)))
 (let ((?x49 (* a s)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x128 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (and (= (+ ?x33 ?x128 ?x41 (* (- 1) (* q r))) 0) (= (+ ?x49 (* (- 1) (* b r)) ?x126 ?x137) 0) (= (+ (* a q) ?x167 ?x124 (* (- 1) (* p b))) 0) (= (+ ?x63 ?x232 ?x178 ?x233 ?x234 ?x212) 0) $x304 (or (not $x304) (not $x500)))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x184 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x329 (+ (* q00 r00 (+ b (* (- 1) a))) (* b00 p00 (+ s (* (- 1) r))) (* (- 1) (* b00 r00 (+ q (* (- 1) p)))) (* (- 1) (* p00 s00 (+ b (* (- 1) a)))) (* a00 s00 (+ q (* (- 1) p))) (* (- 1) (* a00 q00 (+ s (* (- 1) r)))))))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x376 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x316 (= ?x376 0)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x253 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x419 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x407 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x128 (* (- 1) ?x37)))
 (and (= (+ (* (- 1) (* r q)) (* s p) ?x128 ?x41) 0) (= ?x407 0) $x419 (= ?x253 0) $x316 (or (not $x316) (not (= ?x329 0)))))))))))))))))) :qid k!38))
 ))
 (let ((?x382 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x293 (* (- 1) (* s q00 a00))))
 (let ((?x276 (* q s00 a00)))
 (let ((?x251 (* (- 1) (* q r00 b00))))
 (let ((?x241 (* s p00 b00)))
 (let ((?x212 (* r q00 a00)))
 (let ((?x234 (* (- 1) (* p s00 a00))))
 (let ((?x233 (* (- 1) (* r p00 b00))))
 (let ((?x178 (* p r00 b00)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x265 (* (- 1) ?x76)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x232 (* (- 1) ?x66)))
 (let ((?x63 (* a p00 s00)))
 (let (($x500 (= (+ ?x63 ?x232 ?x72 ?x265 ?x178 ?x233 ?x234 ?x212 ?x241 ?x251 ?x276 ?x293) 0)))
 (let (($x304 (= (+ ?x72 ?x265 ?x241 ?x251 ?x276 ?x293) 0)))
 (let ((?x124 (* p00 b00)))
 (let ((?x123 (* q00 a00)))
 (let ((?x167 (* (- 1) ?x123)))
 (let ((?x137 (* r00 b00)))
 (let ((?x119 (* s00 a00)))
 (let ((?x126 (* (- 1) ?x119)))
 (let ((?x49 (* a s)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x128 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x262 (and (= (+ ?x33 ?x128 ?x41 (* (- 1) (* q r))) 0) (= (+ ?x49 (* (- 1) (* b r)) ?x126 ?x137) 0) (= (+ (* a q) ?x167 ?x124 (* (- 1) (* p b))) 0) (= (+ ?x63 ?x232 ?x178 ?x233 ?x234 ?x212) 0) $x304 (or (not $x304) (not $x500)))))
 (let ((?x329 (+ (* q00 r00 (+ b (* (- 1) a))) (* b00 p00 (+ s (* (- 1) r))) (* (- 1) (* b00 r00 (+ q (* (- 1) p)))) (* (- 1) (* p00 s00 (+ b (* (- 1) a)))) (* a00 s00 (+ q (* (- 1) p))) (* (- 1) (* a00 q00 (+ s (* (- 1) r)))))))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x376 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x316 (= ?x376 0)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x253 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x419 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x407 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x179 (and (= (+ (* (- 1) (* r q)) (* s p) ?x128 ?x41) 0) (= ?x407 0) $x419 (= ?x253 0) $x316 (or (not $x316) (not (= ?x329 0))))))
 (rewrite (= $x179 $x262)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x103 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x93 (- (+ (* (- b a) q00 r00) (* b00 p00 (- s r))) (* b00 (- q p) r00))))
 (let ((?x96 (+ (- ?x93 (* (- b a) p00 s00)) (* a00 (- q p) s00))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let (($x83 (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0)))
 (let (($x101 (or (not $x83) (not (= (- ?x96 (* a00 q00 (- s r))) 0)))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* (- 1) a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) ?x49 ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x42 (+ (- (+ (* (- 1) q r) (* p s)) (* p00 s00)) ?x41)))
 (and (= ?x42 0) $x53 (= ?x60 0) (= (- ?x68 ?x69) 0) $x83 $x101))))))))))))))))))) :qid k!38))
 ))
 (let ((?x312 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x329 (+ (* q00 r00 (+ b (* (- 1) a))) (* b00 p00 (+ s (* (- 1) r))) (* (- 1) (* b00 r00 (+ q (* (- 1) p)))) (* (- 1) (* p00 s00 (+ b (* (- 1) a)))) (* a00 s00 (+ q (* (- 1) p))) (* (- 1) (* a00 q00 (+ s (* (- 1) r)))))))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x376 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x316 (= ?x376 0)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x253 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x419 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x407 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x128 (* (- 1) ?x37)))
 (let (($x179 (and (= (+ (* (- 1) (* r q)) (* s p) ?x128 ?x41) 0) (= ?x407 0) $x419 (= ?x253 0) $x316 (or (not $x316) (not (= ?x329 0))))))
 (let ((?x93 (- (+ (* (- b a) q00 r00) (* b00 p00 (- s r))) (* b00 (- q p) r00))))
 (let ((?x96 (+ (- ?x93 (* (- b a) p00 s00)) (* a00 (- q p) s00))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let (($x83 (= (- ?x80 ?x81) 0)))
 (let (($x101 (or (not $x83) (not (= (- ?x96 (* a00 q00 (- s r))) 0)))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) ?x55) (* b00 p00)) ?x59) 0)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (let (($x102 (and $x44 $x53 $x61 (= (- ?x68 ?x69) 0) $x83 $x101)))
 (rewrite (= $x102 $x179))))))))))))))))))))))))))))))))
 ))
 (let ((@x104 (asserted $x103)))
 (let ((@x395 (mp (mp @x104 (quant-intro (proof-bind ?x312) (= $x103 $x184)) $x184) (rewrite (= $x184 $x184)) $x184)))
 (let ((@x162 (mp~ (mp @x395 (quant-intro (proof-bind ?x382) (= $x184 $x503)) $x503) (sk (~ $x503 $x353)) $x353)))
 (let ((@x165 (mp @x162 (rewrite (= $x353 $x138)) $x138)))
 (let ((@x217 (and-elim @x165 $x229)))
 (let (($x238 (not (<= ?x145 0))))
 (let (($x249 (>= ?x145 0)))
 (let (($x298 (<= ?x223 0)))
 (let (($x188 (>= ?x384 0)))
 (let ((@x216 (and-elim @x165 $x373)))
 (let ((@x210 ((_ th-lemma arith farkas -1 1 1) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x373) $x188)) @x216 $x188) (hypothesis (not $x249)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x239 $x298)) @x217 $x298) false)))
 (let ((@x143 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x160 $x238 (not $x249))) (unit-resolution (and-elim @x165 $x161) @x217 $x131) (or $x238 (not $x249)))))
 (let (($x368 (<= ?x384 0)))
 ((_ th-lemma arith farkas -1 1 1) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x373) $x368)) @x216 $x368) (unit-resolution @x143 (lemma @x210 $x249) $x238) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x239 $x291)) @x217 $x291) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        7
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          6
 :arith-num-rows            6
 :arith-pivots              2
 :arith-row-summations      3
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    6
 :conflicts                 2
 :decisions                 1
 :del-clause                17
 :max-memory                19.56
 :memory                    19.07
 :mk-bool-var               18
 :mk-clause                 19
 :num-allocs                507155
 :num-checks                1
 :propagations              12
 :rlimit-count              2380
 :time                      0.01
 :total-time                0.02)
