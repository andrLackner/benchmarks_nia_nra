unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x48 (+ ?x46 ?x47 ?x45)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x51)))))))))))))) :qid k!29))
 ))
 (let (($x180 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x181 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x43 ?x43 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x48 (+ ?x46 ?x47 ?x45)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x273 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x66 (= (+ (* (- 1) y00) y) 0)))
 (let (($x169 (and $x66 $x273 false)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x251 (+ r ?x58)))
 (let ((?x263 (* y00 ?x251 ?x251 ?x251)))
 (let ((?x253 (+ 1 q)))
 (let ((?x194 (* y00 y00 ?x253 ?x253 ?x251 ?x251)))
 (let ((?x176 (* (- 1) ?x194)))
 (let ((?x270 (+ ?x176 (* (- 1) ?x263))))
 (let ((?x133 (+ ?x270 ?x194 ?x263)))
 (let ((@x257 (rewrite (= ?x43 ?x251))))
 (let ((@x161 (trans (monotonicity @x257 @x257 @x257 (= ?x45 (* ?x251 ?x251 ?x251 y00))) (rewrite (= (* ?x251 ?x251 ?x251 y00) ?x263)) (= ?x45 ?x263))))
 (let ((@x256 (rewrite (= ?x42 ?x253))))
 (let ((@x128 (monotonicity @x256 @x256 @x257 @x257 (= ?x47 (* ?x253 ?x253 ?x251 ?x251 y00 y00)))))
 (let ((@x132 (trans @x128 (rewrite (= (* ?x253 ?x253 ?x251 ?x251 y00 y00) ?x194)) (= ?x47 ?x194))))
 (let ((@x173 (monotonicity (rewrite (= ?x28 (- 1))) @x256 @x256 @x257 @x257 (= ?x44 (* (- 1) ?x253 ?x253 ?x251 ?x251 y00 y00)))))
 (let ((@x211 (trans @x173 (rewrite (= (* (- 1) ?x253 ?x253 ?x251 ?x251 y00 y00) ?x176)) (= ?x44 ?x176))))
 (let ((@x125 (trans (monotonicity @x211 @x161 (= ?x46 (- ?x176 ?x263))) (rewrite (= (- ?x176 ?x263) ?x270)) (= ?x46 ?x270))))
 (let ((@x138 (trans (monotonicity @x125 @x132 @x161 (= ?x48 ?x133)) (rewrite (= ?x133 0)) $x49)))
 (let ((@x143 (trans (monotonicity @x138 (= $x49 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x49 true))))
 (let ((@x156 (trans (monotonicity @x143 (= $x50 (not true))) (rewrite (= (not true) false)) (= $x50 false))))
 (let ((@x168 (trans (monotonicity @x156 (= $x51 (or false))) (rewrite (= (or false) false)) (= $x51 false))))
 (let ((@x171 (monotonicity (rewrite (= $x33 $x66)) (rewrite (= $x41 $x273)) @x168 (= $x52 $x169))))
 (trans @x171 (rewrite (= $x169 false)) (= $x52 false)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x264 (trans (quant-intro (proof-bind ?x181) (= $x53 $x180)) (elim-unused (= $x180 false)) (= $x53 false))))
 (let ((@x54 (asserted $x53)))
 (mp @x54 @x264 false))))))))

(:max-memory   19.05
 :memory       19.05
 :num-allocs   237386
 :rlimit-count 266
 :time         0.00
 :total-time   0.02)
