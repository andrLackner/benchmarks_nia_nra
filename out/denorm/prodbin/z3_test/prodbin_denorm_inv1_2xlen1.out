unsat
((set-logic NRA)
(proof
(let (($x59 (exists ((x Real) (y Real) )(! (let ((?x61 (* x00 y00)))
 (let ((?x226 (* y x)))
 (let ((?x130 (* (- 1.0) ?x226)))
 (let ((?x90 (+ ?x130 ?x61 z00 x)))
 (let ((?x190 (* (/ 1.0 2.0) y)))
 (let ((?x72 (+ (- (/ 1.0 2.0)) ?x190)))
 (let ((?x74 (* ?x72 x)))
 (let ((?x228 (* 2.0 ?x74)))
 (let ((?x71 (+ ?x228 ?x130 x)))
 (let ((?x94 (* ?x72 ?x72 ?x72 ?x72 ?x71 ?x90 ?x90 ?x90 ?x90 ?x90)))
 (let (($x101 (= ?x94 0.0)))
 (not $x101)))))))))))) :qid k!28))
 ))
 (let (($x164 (exists ((x Real) (y Real) )(! false :qid k!28))
 ))
 (let ((?x163 (lambda ((x Real) (y Real) )(let ((?x61 (* x00 y00)))
 (let ((?x226 (* y x)))
 (let ((?x130 (* (- 1.0) ?x226)))
 (let ((?x90 (+ ?x130 ?x61 z00 x)))
 (let ((?x190 (* (/ 1.0 2.0) y)))
 (let ((?x72 (+ (- (/ 1.0 2.0)) ?x190)))
 (let ((?x74 (* ?x72 x)))
 (let ((?x228 (* 2.0 ?x74)))
 (let ((?x71 (+ ?x228 ?x130 x)))
 (let ((?x94 (* ?x72 ?x72 ?x72 ?x72 ?x71 ?x90 ?x90 ?x90 ?x90 ?x90)))
 (let (($x101 (= ?x94 0.0)))
 (let (($x58 (not $x101)))
 (let ((?x177 (+ x z00 ?x61 ?x130)))
 (let ((?x174 (* ?x72 ?x72 ?x72 ?x72 0.0 ?x177 ?x177 ?x177 ?x177 ?x177)))
 (let ((@x175 (rewrite (= ?x90 ?x177))))
 (let ((?x198 (+ (* (- 1.0) x) ?x226)))
 (let ((?x155 (+ (* 2.0 (* (- (/ 1.0 2.0)) x)) (* 2.0 (* (/ 1.0 2.0) ?x226)))))
 (let ((?x93 (* (/ 1.0 2.0) ?x226)))
 (let ((?x148 (* (- (/ 1.0 2.0)) x)))
 (let ((?x141 (+ ?x148 ?x93)))
 (let ((?x89 (+ ?x148 (* ?x190 x))))
 (let ((@x139 (trans (rewrite (= ?x74 ?x89)) (rewrite (= ?x89 ?x141)) (= ?x74 ?x141))))
 (let ((@x254 (trans (monotonicity @x139 (= ?x228 (* 2.0 ?x141))) (rewrite (= (* 2.0 ?x141) ?x155)) (= ?x228 ?x155))))
 (let ((@x186 (monotonicity (trans @x254 (rewrite (= ?x155 ?x198)) (= ?x228 ?x198)) (= ?x71 (+ ?x198 ?x130 x)))))
 (let ((@x251 (monotonicity (trans @x186 (rewrite (= (+ ?x198 ?x130 x) 0.0)) (= ?x71 0.0)) @x175 @x175 @x175 @x175 @x175 (= ?x94 ?x174))))
 (let ((@x171 (monotonicity (trans @x251 (rewrite (= ?x174 0.0)) $x101) (= $x101 (= 0.0 0.0)))))
 (let ((@x167 (monotonicity (trans @x171 (rewrite (= (= 0.0 0.0) true)) (= $x101 true)) (= $x58 (not true)))))
 (trans @x167 (rewrite (= (not true) false)) (= $x58 false))))))))))))))))))))))))))))))
 ))
 (let ((@x156 (trans (quant-intro (proof-bind ?x163) (= $x59 $x164)) (elim-unused (= $x164 false)) (= $x59 false))))
 (let (($x79 (exists ((x Real) (y Real) (z Real) )(! (let ((?x81 (* (- 1.0) z00)))
 (let ((?x67 (* y x)))
 (let ((?x61 (* x00 y00)))
 (let ((?x62 (* (- 1.0) ?x61)))
 (let ((?x237 (+ ?x62 ?x67 z ?x81)))
 (let (($x135 (not (= (* ?x237 z z z z z y y y y) 0.0))))
 (let ((?x80 (+ ?x62 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x81)))
 (let ((?x103 (* (/ 1.0 2.0) y)))
 (let ((?x110 (+ (- (/ 1.0 2.0)) ?x103)))
 (let ((?x40 (+ z x)))
 (let (($x76 (not (= (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x110 ?x110 ?x110 ?x110 ?x80) 0.0))))
 (and (= ?x237 0.0) (or $x76 $x135))))))))))))) :qid k!28))
 ))
 (let (($x53 (exists ((x Real) (y Real) (z Real) )(! (let ((?x44 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x48 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x44) z) z00) ?x24 ?x44 ?x44 z z z ?x24 ?x44 ?x44 z z)))
 (let ((?x40 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x41 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x24 ?x36 ?x36 ?x40 ?x40 ?x40 ?x24 ?x36 ?x36 ?x40 ?x40)))
 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x41 0.0)) (not (= ?x48 0.0)))))))))) :qid k!28))
 ))
 (let ((?x192 (lambda ((x Real) (y Real) (z Real) )(let ((?x81 (* (- 1.0) z00)))
 (let ((?x67 (* y x)))
 (let ((?x61 (* x00 y00)))
 (let ((?x62 (* (- 1.0) ?x61)))
 (let ((?x237 (+ ?x62 ?x67 z ?x81)))
 (let (($x135 (not (= (* ?x237 z z z z z y y y y) 0.0))))
 (let ((?x80 (+ ?x62 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x81)))
 (let ((?x103 (* (/ 1.0 2.0) y)))
 (let ((?x110 (+ (- (/ 1.0 2.0)) ?x103)))
 (let ((?x40 (+ z x)))
 (let (($x76 (not (= (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x110 ?x110 ?x110 ?x110 ?x80) 0.0))))
 (let (($x69 (and (= ?x237 0.0) (or $x76 $x135))))
 (let ((?x44 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x48 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x44) z) z00) ?x24 ?x44 ?x44 z z z ?x24 ?x44 ?x44 z z)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x41 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x24 ?x36 ?x36 ?x40 ?x40 ?x40 ?x24 ?x36 ?x36 ?x40 ?x40)))
 (let (($x52 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x41 0.0)) (not (= ?x48 0.0))))))
 (rewrite (= $x52 $x69)))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x250 (mp (mp @x54 (quant-intro (proof-bind ?x192) (= $x53 $x79)) $x79) (rewrite (= $x79 $x59)) $x59)))
 (mp @x250 @x156 false))))))))))))

(:max-memory   17.58
 :memory       17.31
 :num-allocs   55847
 :num-checks   1
 :rlimit-count 519
 :time         0.00
 :total-time   0.01)
