unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x400 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x455 (<= ?x400 (- 1))))
 (let (($x399 (= ?x400 (- 1))))
 (let ((?x401 (+ c!3 k!2)))
 (let ((?x888 (+ m!1 k!2)))
 (let ((?x968 (+ 6 m!1)))
 (let ((?x740 (+ 1 n!0)))
 (let ((?x902 (* (- 1) (* ?x740 ?x740 ?x740 ?x740 ?x968 ?x968 ?x888 ?x888 ?x401 ?x401 ?x401))))
 (let ((?x903 (+ (* 4 (* m!1 m!1 k!2 k!2 n!0)) (* m!1 m!1 m!1 c!3 n!0) (* 7 (* m!1 m!1 c!3 k!2 n!0)) (* 36 (* m!1 c!3 c!3)) (* 84 (* m!1 c!3 k!2)) (* 48 (* m!1 k!2 k!2)) (* 252 (* c!3 k!2)) (* (- 72) (* k!2 n!0 n!0)) (* (- 24) (* m!1 k!2 n!0)) (* (- 24) (* m!1 c!3 n!0)) (* 9 (* m!1 m!1 k!2)) (* 7 (* m!1 m!1 c!3 k!2)) (* 4 (* m!1 m!1 k!2 k!2)) (* m!1 m!1 m!1 k!2) (* m!1 m!1 m!1 c!3) (* 144 (* k!2 k!2 n!0)) (* (- 2) (* m!1 m!1 c!3 n!0 n!0)) (* 7 (* m!1 m!1 c!3 n!0)) (* (- 24) (* m!1 c!3 n!0 n!0)) (* 108 (* c!3 c!3 n!0)) (* (- 180) (* c!3 n!0)) (* (- 1) (* ?x740 ?x740 ?x740 ?x968 ?x968 ?x888 ?x401 ?x401 ?x401)) (* 48 (* m!1 k!2 k!2 n!0)) (* 3 (* ?x740 ?x740 ?x740 ?x968 ?x968 ?x888 ?x401 ?x401 ?x401 ?x401)) (* 3 (* m!1 m!1 c!3 c!3)) (* (- 24) (* m!1 k!2 n!0 n!0)) (* ?x740 ?x740 ?x740 ?x968 ?x968 ?x888 ?x888 ?x401 ?x401 ?x401) (* 144 (* k!2 k!2)) (* (- 2) (* m!1 m!1 k!2 n!0 n!0)) (* (- 2) (* ?x740 ?x740 ?x740 ?x740 ?x968 ?x968 ?x888 ?x401 ?x401 ?x401)) (* 108 (* c!3 c!3)) (* 252 (* c!3 k!2 n!0)) (* (- 108) c!3) (* (- 108) k!2) (* 7 (* m!1 m!1 k!2 n!0)) (* 3 (* m!1 m!1 c!3 c!3 n!0)) (* 84 (* m!1 c!3 k!2 n!0)) (* (- 72) (* c!3 n!0 n!0)) (* 9 (* m!1 m!1 c!3)) (* (- 180) (* k!2 n!0)) (* m!1 m!1 m!1 k!2 n!0) (* (- 1) (* ?x740 ?x740 ?x968 ?x968 ?x888 ?x401)) (* 36 (* m!1 c!3 c!3 n!0)) ?x902)))
 (let (($x909 (= ?x903 0)))
 (let (($x918 (not $x909)))
 (let ((?x878 (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0)))))
 (let (($x859 (= ?x878 1)))
 (let ((?x885 (* (- 9) n!0)))
 (let ((?x332 (* 5 k!2)))
 (let ((?x905 (* 18 c!3)))
 (let ((?x635 (* k!2 k!2)))
 (let ((?x648 (* (- 1) ?x635)))
 (let ((?x484 (* c!3 n!0)))
 (let ((?x858 (* 9 ?x484)))
 (let ((?x810 (+ ?x858 ?x648 ?x905 ?x332 ?x885)))
 (let (($x808 (= ?x810 4)))
 (let ((?x312 (+ m!1 (* (- 6) n!0))))
 (let (($x761 (= ?x312 6)))
 (let (($x488 (and $x761 $x808 $x859 $x399 $x918)))
 (let ((?x403 (+ k!2 m!1)))
 (let ((?x755 (+ (* 108 c!3) (* 108 k!2) (* (- 144) ?x635) (* 180 (* k!2 n!0)) (* 180 ?x484) (* (- 3) (* c!3 c!3 m!1 m!1 n!0)) (* (- 7) (* k!2 m!1 m!1 n!0)) (* (- 7) (* c!3 m!1 m!1 n!0)) (* (- 48) (* k!2 k!2 m!1 n!0)) (* (- 84) (* c!3 k!2 m!1 n!0)) (* 24 (* k!2 m!1 n!0)) (* 24 (* c!3 m!1 n!0)) (* (- 144) (* k!2 k!2 n!0)) (* (- 252) (* c!3 k!2 n!0)) (* (- 1) (* k!2 m!1 m!1 m!1)) (* (- 1) (* c!3 m!1 m!1 m!1)) (* (- 4) (* k!2 k!2 m!1 m!1)) (* (- 7) (* c!3 k!2 m!1 m!1)) (* (- 9) (* k!2 m!1 m!1)) (* (- 9) (* c!3 m!1 m!1)) (* (- 48) (* k!2 k!2 m!1)) (* (- 84) (* c!3 k!2 m!1)) (* (- 252) (* c!3 k!2)) (* (- 1) (* k!2 m!1 m!1 m!1 n!0)) (* (- 4) (* k!2 k!2 m!1 m!1 n!0)) (* (- 1) (* c!3 m!1 m!1 m!1 n!0)) (* (- 7) (* c!3 k!2 m!1 m!1 n!0)) (* ?x740 ?x740 ?x968 ?x968 ?x403 ?x401) (* (- 36) (* c!3 c!3 m!1 n!0)) (* (- 36) (* c!3 c!3 m!1)) (* (- 108) (* c!3 c!3 n!0)) (* (- 108) (* c!3 c!3)) (* (- 3) (* c!3 c!3 m!1 m!1)) (* 2 (* c!3 m!1 m!1 n!0 n!0)) (* 2 (* k!2 m!1 m!1 n!0 n!0)) (* (- 3) (* ?x740 ?x740 ?x740 ?x968 ?x968 ?x403 ?x401 ?x401 ?x401 ?x401)) (* 2 (* ?x740 ?x740 ?x740 ?x740 ?x968 ?x968 ?x403 ?x401 ?x401 ?x401)) (* ?x740 ?x740 ?x740 ?x968 ?x968 ?x403 ?x401 ?x401 ?x401) (* 72 (* c!3 n!0 n!0)) (* 72 (* k!2 n!0 n!0)) (* 24 (* c!3 m!1 n!0 n!0)) (* 24 (* k!2 m!1 n!0 n!0)) (* ?x740 ?x740 ?x740 ?x740 ?x968 ?x968 ?x403 ?x403 ?x401 ?x401 ?x401) (* (- 1) (* ?x740 ?x740 ?x740 ?x968 ?x968 ?x403 ?x403 ?x401 ?x401 ?x401)))))
 (let (($x311 (and $x761 (= (+ ?x905 ?x332 ?x885 ?x648 ?x858) 4) $x859 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x755 0)))))
 (let (($x376 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x310 (+ 6 m)))
 (let ((?x313 (+ 1 n)))
 (let ((?x979 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x959 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1081 (* 24 (* k m n n))))
 (let ((?x1080 (* 24 (* c m n n))))
 (let ((?x1079 (* 72 (* k n n))))
 (let ((?x1078 (* 72 (* c n n))))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x793 (* 2 (* k m m n n))))
 (let ((?x791 (* 2 (* c m m n n))))
 (let ((?x529 (* ?x313 ?x313 ?x310 ?x310 ?x69 ?x68)))
 (let ((?x1001 (* (- 1) (* c m m m n))))
 (let ((?x1002 (* (- 4) (* k k m m n))))
 (let ((?x1003 (* (- 1) (* k m m m n))))
 (let ((?x1007 (* (- 9) (* c m m))))
 (let ((?x1008 (* (- 9) (* k m m))))
 (let ((?x1011 (* (- 1) (* c m m m))))
 (let ((?x1012 (* (- 1) (* k m m m))))
 (let ((?x557 (* 24 (* c m n))))
 (let ((?x553 (* 24 (* k m n))))
 (let ((?x1017 (* (- 7) (* c m m n))))
 (let ((?x1018 (* (- 7) (* k m m n))))
 (let ((?x1021 (* (- 3) (* c c m m n))))
 (let ((?x150 (* c n)))
 (let ((?x1036 (* 180 ?x150)))
 (let ((?x55 (* k n)))
 (let ((?x1038 (* 180 ?x55)))
 (let ((?x1041 (* 108 k)))
 (let ((?x1042 (* 108 c)))
 (let ((?x1104 (+ ?x1042 ?x1041 (* (- 144) (* k k)) ?x1038 ?x1036 ?x1021 ?x1018 ?x1017 (* (- 48) (* k k m n)) (* (- 84) (* c k m n)) ?x553 ?x557 (* (- 144) (* k k n)) (* (- 252) (* c k n)) ?x1012 ?x1011 (* (- 4) (* k k m m)) (* (- 7) (* c k m m)) ?x1008 ?x1007 (* (- 48) (* k k m)) (* (- 84) (* c k m)) (* (- 252) (* c k)) ?x1003 ?x1002 ?x1001 (* (- 7) (* c k m m n)) ?x529 (* (- 36) (* c c m n)) (* (- 36) (* c c m)) (* (- 108) (* c c n)) (* (- 108) (* c c)) (* (- 3) (* c c m m)) ?x791 ?x793 (* (- 3) (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68 ?x68)) (* 2 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) ?x892 ?x1078 ?x1079 ?x1080 ?x1081 ?x959 (* (- 1) ?x979))))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 ?x150)) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 $x212 $x264 $x302 (not (= ?x1104 0))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x922 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x310 (+ 6 m)))
 (let ((?x313 (+ 1 n)))
 (let ((?x529 (* ?x313 ?x313 ?x310 ?x310 ?x69 ?x68)))
 (let ((?x979 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x959 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x457 (+ (* 3 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68 ?x68)) (* ?x313 ?x310 ?x310 ?x69 ?x68) (* (- 2) (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x310 ?x310 ?x68)) (* 3 (* ?x313 ?x310 ?x310 ?x68 ?x68)) (* (- 1) ?x959) ?x979 (* (- 2) (* ?x313 ?x313 ?x310 ?x310 ?x68)) (* (- 1) ?x529))))
 (let (($x870 (not (= ?x457 0))))
 (let (($x818 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x198 $x818 $x870)))))))))))))))))) :qid k!34))
 ))
 (let ((?x552 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x310 (+ 6 m)))
 (let ((?x313 (+ 1 n)))
 (let ((?x979 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x959 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1081 (* 24 (* k m n n))))
 (let ((?x1080 (* 24 (* c m n n))))
 (let ((?x1079 (* 72 (* k n n))))
 (let ((?x1078 (* 72 (* c n n))))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x793 (* 2 (* k m m n n))))
 (let ((?x791 (* 2 (* c m m n n))))
 (let ((?x529 (* ?x313 ?x313 ?x310 ?x310 ?x69 ?x68)))
 (let ((?x1001 (* (- 1) (* c m m m n))))
 (let ((?x1002 (* (- 4) (* k k m m n))))
 (let ((?x1003 (* (- 1) (* k m m m n))))
 (let ((?x1007 (* (- 9) (* c m m))))
 (let ((?x1008 (* (- 9) (* k m m))))
 (let ((?x1011 (* (- 1) (* c m m m))))
 (let ((?x1012 (* (- 1) (* k m m m))))
 (let ((?x557 (* 24 (* c m n))))
 (let ((?x553 (* 24 (* k m n))))
 (let ((?x1017 (* (- 7) (* c m m n))))
 (let ((?x1018 (* (- 7) (* k m m n))))
 (let ((?x1021 (* (- 3) (* c c m m n))))
 (let ((?x150 (* c n)))
 (let ((?x1036 (* 180 ?x150)))
 (let ((?x55 (* k n)))
 (let ((?x1038 (* 180 ?x55)))
 (let ((?x1041 (* 108 k)))
 (let ((?x1042 (* 108 c)))
 (let ((?x1104 (+ ?x1042 ?x1041 (* (- 144) (* k k)) ?x1038 ?x1036 ?x1021 ?x1018 ?x1017 (* (- 48) (* k k m n)) (* (- 84) (* c k m n)) ?x553 ?x557 (* (- 144) (* k k n)) (* (- 252) (* c k n)) ?x1012 ?x1011 (* (- 4) (* k k m m)) (* (- 7) (* c k m m)) ?x1008 ?x1007 (* (- 48) (* k k m)) (* (- 84) (* c k m)) (* (- 252) (* c k)) ?x1003 ?x1002 ?x1001 (* (- 7) (* c k m m n)) ?x529 (* (- 36) (* c c m n)) (* (- 36) (* c c m)) (* (- 108) (* c c n)) (* (- 108) (* c c)) (* (- 3) (* c c m m)) ?x791 ?x793 (* (- 3) (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68 ?x68)) (* 2 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) ?x892 ?x1078 ?x1079 ?x1080 ?x1081 ?x959 (* (- 1) ?x979))))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 ?x150)) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x974 (and $x128 $x212 $x264 $x302 (not (= ?x1104 0)))))
 (let ((?x457 (+ (* 3 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68 ?x68)) (* ?x313 ?x310 ?x310 ?x69 ?x68) (* (- 2) (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x892) (* (- 1) (* ?x313 ?x310 ?x310 ?x68)) (* 3 (* ?x313 ?x310 ?x310 ?x68 ?x68)) (* (- 1) ?x959) ?x979 (* (- 2) (* ?x313 ?x313 ?x310 ?x310 ?x68)) (* (- 1) ?x529))))
 (let (($x870 (not (= ?x457 0))))
 (let (($x818 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x933 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x198 $x818 $x870)))
 (rewrite (= $x933 $x974)))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x872 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x310 (+ 6 m)))
 (let ((?x313 (+ 1 n)))
 (let ((?x529 (* ?x313 ?x313 ?x310 ?x310 ?x69 ?x68)))
 (let ((?x979 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x959 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x457 (+ (* 3 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68 ?x68)) (* ?x313 ?x310 ?x310 ?x69 ?x68) (* (- 2) (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x310 ?x310 ?x68)) (* 3 (* ?x313 ?x310 ?x310 ?x68 ?x68)) (* (- 1) ?x959) ?x979 (* (- 2) (* ?x313 ?x313 ?x310 ?x310 ?x68)) (* (- 1) ?x529))))
 (let (($x870 (not (= ?x457 0))))
 (let (($x818 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x768 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x335 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 (= ?x335 (- 4)) $x768 $x818 $x870)))))))))))))))) :qid k!34))
 ))
 (let ((?x930 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x310 (+ 6 m)))
 (let ((?x313 (+ 1 n)))
 (let ((?x529 (* ?x313 ?x313 ?x310 ?x310 ?x69 ?x68)))
 (let ((?x979 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x959 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x457 (+ (* 3 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68 ?x68)) (* ?x313 ?x310 ?x310 ?x69 ?x68) (* (- 2) (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x310 ?x310 ?x68)) (* 3 (* ?x313 ?x310 ?x310 ?x68 ?x68)) (* (- 1) ?x959) ?x979 (* (- 2) (* ?x313 ?x313 ?x310 ?x310 ?x68)) (* (- 1) ?x529))))
 (let (($x870 (not (= ?x457 0))))
 (let (($x818 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x933 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x198 $x818 $x870)))
 (let (($x768 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x335 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x852 (and $x128 (= ?x335 (- 4)) $x768 $x818 $x870)))
 (rewrite (= $x852 $x933)))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (+ (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x69 ?x70 ?x70 ?x71))))
 (let ((?x78 (- ?x74 (* 2 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x80 (- (- ?x78 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x68 ?x70 ?x70 ?x71))))
 (let ((?x84 (- (+ ?x80 (* 3 ?x68 ?x68 ?x70 ?x70 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x89 (- (+ ?x84 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 2 ?x68 ?x70 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x89 (* ?x68 ?x69 ?x70 ?x70 ?x71 ?x71)) 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x861 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x310 (+ 6 m)))
 (let ((?x313 (+ 1 n)))
 (let ((?x529 (* ?x313 ?x313 ?x310 ?x310 ?x69 ?x68)))
 (let ((?x979 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x959 (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x457 (+ (* 3 (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68 ?x68)) (* ?x313 ?x310 ?x310 ?x69 ?x68) (* (- 2) (* ?x313 ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x313 ?x313 ?x310 ?x310 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x313 ?x310 ?x310 ?x68)) (* 3 (* ?x313 ?x310 ?x310 ?x68 ?x68)) (* (- 1) ?x959) ?x979 (* (- 2) (* ?x313 ?x313 ?x310 ?x310 ?x68)) (* (- 1) ?x529))))
 (let (($x870 (not (= ?x457 0))))
 (let (($x818 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x768 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x335 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x852 (and $x128 (= ?x335 (- 4)) $x768 $x818 $x870)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x69 ?x70 ?x70 ?x71))))
 (let ((?x78 (- ?x74 (* 2 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x80 (- (- ?x78 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x68 ?x70 ?x70 ?x71))))
 (let ((?x84 (- (+ ?x80 (* 3 ?x68 ?x68 ?x70 ?x70 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x89 (- (+ ?x84 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 2 ?x68 ?x70 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x94 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x89 (* ?x68 ?x69 ?x70 ?x70 ?x71 ?x71)) 0))))))
 (rewrite (= $x94 $x852))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x904 (mp (mp @x96 (quant-intro (proof-bind ?x861) (= $x95 $x872)) $x872) (rewrite (= $x872 $x872)) $x872)))
 (let ((@x725 (mp (mp @x904 (quant-intro (proof-bind ?x930) (= $x872 $x922)) $x922) (quant-intro (proof-bind ?x552) (= $x922 $x376)) $x376)))
 (let ((@x728 (mp (mp~ @x725 (sk (~ $x376 $x311)) $x311) (rewrite (= $x311 $x488)) $x488)))
 (let ((@x771 (and-elim @x728 $x399)))
 (let ((@x782 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x399) $x455)) @x771 $x455)))
 (let (($x550 (>= ?x400 (- 1))))
 (let ((@x990 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x399) $x550)) @x771 $x550)))
 (let (($x875 (<= ?x810 4)))
 (let ((@x769 (and-elim @x728 $x808)))
 (let ((@x989 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x808) $x875)) @x769 $x875)))
 (let (($x607 (>= ?x810 4)))
 (let ((@x449 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x808) $x607)) @x769 $x607)))
 (let (($x890 (<= ?x878 1)))
 (let ((@x770 (and-elim @x728 $x859)))
 (let ((@x575 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x859) $x890)) @x770 $x890)))
 (let (($x873 (>= ?x878 1)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x859) $x873)) @x770 $x873)))
 (let (($x893 (<= ?x312 6)))
 (let ((@x328 (and-elim @x728 $x761)))
 (let ((@x497 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x761) $x893)) @x328 $x893)))
 (let (($x657 (>= ?x312 6)))
 (let ((@x353 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x761) $x657)) @x328 $x657)))
 (let (($x271 (not (>= ?x903 0))))
 (let (($x917 (<= ?x903 0)))
 (let ((@x642 ((_ th-lemma arith) (hypothesis (not $x917)) @x990 @x782 @x353 @x497 @x353 @x497 @x990 @x782 @x448 @x575 @x990 @x782 @x449 @x989 @x990 @x782 @x990 @x782 @x353 @x497 @x448 @x575 @x449 @x989 @x990 @x782 false)))
 (let ((@x965 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x909 (not $x917) $x271)) (and-elim @x728 $x918) (or (not $x917) $x271))))
 ((_ th-lemma arith) (unit-resolution @x965 (lemma @x642 $x917) $x271) @x990 @x782 @x353 @x497 @x990 @x782 @x353 @x497 @x990 @x782 @x448 @x575 @x990 @x782 @x449 @x989 @x990 @x782 @x990 @x782 @x353 @x497 @x448 @x575 @x449 @x989 @x990 @x782 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        64
 :arith-assert-upper        147
 :arith-branch-var          3
 :arith-conflicts           9
 :arith-eq-adapter          5
 :arith-gcd-tests           10
 :arith-gomory-cuts         1
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             852
 :arith-nonlinear-bounds    96
 :arith-nonlinear-horner    19
 :arith-num-rows            10
 :arith-patches             6
 :arith-pivots              12
 :arith-row-summations      31
 :arith-tableau-max-columns 81
 :arith-tableau-max-rows    10
 :conflicts                 9
 :decisions                 128
 :del-clause                14
 :final-checks              17
 :max-memory                3.92
 :memory                    3.23
 :mk-bool-var               75
 :mk-clause                 21
 :num-allocs                2614449
 :num-checks                1
 :propagations              17
 :rlimit-count              33840
 :time                      0.02
 :total-time                0.03)
