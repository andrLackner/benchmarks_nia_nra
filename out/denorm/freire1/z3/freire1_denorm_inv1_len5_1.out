unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x178 (* (- 1) r!1)))
 (let ((?x280 (* r!1 r!1)))
 (let ((?x317 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x224 (+ r00 ?x87 ?x103 ?x317 ?x280 ?x178)))
 (let (($x377 (<= ?x224 0)))
 (let (($x238 (= ?x224 0)))
 (let ((?x395 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x91 (* (- 2) ?x280)))
 (let ((?x97 (* (- 2) (* r!1 r!1 r!1))))
 (let ((?x335 (+ ?x97 (* 2 (* x!0 r!1 r!1 r!1)) (* (- 1) (* x!0 x!0 r!1)) (* 2 (* x!0 r!1)) (* 3 (* x!0 r!1 r!1)) x!0 ?x91 ?x178 (* (- 1) (* x!0 x!0 r!1 r!1)) ?x395)))
 (let ((?x157 (* ?x335 ?x224)))
 (let (($x344 (= ?x157 0)))
 (let (($x346 (not $x344)))
 (let (($x345 (and $x238 $x346)))
 (let ((?x393 (+ ?x178 x!0 ?x91 (* 2 (* r!1 x!0)) (* 3 (* r!1 r!1 x!0)) ?x97 (* (- 1) (* r!1 x!0 x!0)) (* (- 1) (* r!1 r!1 x!0 x!0)) ?x395 (* 2 (* r!1 r!1 r!1 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x133 (and (= (+ r!1 (* (- 2) x!0) ?x118 (* (- 1) ?x280) ?x35 ?x36) 0) (not (= (* ?x393 (+ ?x178 ?x317 r00 ?x280 ?x87 ?x103)) 0)))))
 (let (($x223 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x431 (+ ?x66 x (* (- 2) ?x30) (* 2 (* r x)) (* 3 (* r r x)) (* (- 2) (* r r r)) (* (- 1) (* r x x)) (* (- 1) (* r r x x)) (* (- 1) (* r r r r)) (* 2 (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let ((?x117 (* (- 2) x)))
 (let (($x121 (= (+ r ?x117 ?x118 ?x119 ?x35 ?x36) 0)))
 (and $x121 (not (= (* ?x431 ?x109) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x258 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x402 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x228 (+ x ?x66)))
 (let ((?x324 (+ 1 r)))
 (let ((?x333 (+ (* ?x324 ?x324 ?x228) (* (- 1) (* ?x324 ?x324 ?x228 ?x228)) (* ?x324 ?x228 ?x228))))
 (let (($x143 (not (= (* ?x333 ?x402) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x143)))))))))))))))) :qid k!26))
 ))
 (let ((?x349 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x431 (+ ?x66 x (* (- 2) ?x30) (* 2 (* r x)) (* 3 (* r r x)) (* (- 2) (* r r r)) (* (- 1) (* r x x)) (* (- 1) (* r r x x)) (* (- 1) (* r r r r)) (* 2 (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let ((?x117 (* (- 2) x)))
 (let (($x121 (= (+ r ?x117 ?x118 ?x119 ?x35 ?x36) 0)))
 (let (($x79 (and $x121 (not (= (* ?x431 ?x109) 0)))))
 (let ((?x402 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x95 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x ?x66) (+ x ?x66)))))
 (let ((?x333 (+ (* (+ 1 r) (+ 1 r) (+ x ?x66)) ?x95 (* (+ 1 r) (+ x ?x66) (+ x ?x66)))))
 (let (($x143 (not (= (* ?x333 ?x402) 0))))
 (let (($x244 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x143)))
 (rewrite (= $x244 $x79))))))))))))))))))))))
 ))
 (let (($x325 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x402 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x228 (+ x ?x66)))
 (let ((?x324 (+ 1 r)))
 (let ((?x333 (+ (* ?x324 ?x324 ?x228) (* (- 1) (* ?x324 ?x324 ?x228 ?x228)) (* ?x324 ?x228 ?x228))))
 (let (($x143 (not (= (* ?x333 ?x402) 0))))
 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) $x143))))))))))) :qid k!26))
 ))
 (let ((?x311 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x402 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x228 (+ x ?x66)))
 (let ((?x324 (+ 1 r)))
 (let ((?x333 (+ (* ?x324 ?x324 ?x228) (* (- 1) (* ?x324 ?x324 ?x228 ?x228)) (* ?x324 ?x228 ?x228))))
 (let (($x143 (not (= (* ?x333 ?x402) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x244 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x143)))
 (let (($x239 (and (= (+ ?x66 r00 ?x30 ?x32 ?x87 ?x103) 0) $x143)))
 (rewrite (= $x239 $x244))))))))))))))))))))
 ))
 (let (($x61 (exists ((r Int) (x Int) )(! (let ((?x51 (+ (* 0 (+ r 1) (+ r 1) (+ r 1)) (* (+ r 1) (+ r 1) (- x r)))))
 (let ((?x53 (- ?x51 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x56 (* (- (- ?x46 ?x35) ?x36) (+ ?x53 (* (+ r 1) (- x r) (- x r))))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x56 0))))))))))) :qid k!26))
 ))
 (let ((?x319 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x402 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x228 (+ x ?x66)))
 (let ((?x324 (+ 1 r)))
 (let ((?x333 (+ (* ?x324 ?x324 ?x228) (* (- 1) (* ?x324 ?x324 ?x228 ?x228)) (* ?x324 ?x228 ?x228))))
 (let (($x143 (not (= (* ?x333 ?x402) 0))))
 (let (($x239 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) $x143)))
 (let ((?x51 (+ (* 0 (+ r 1) (+ r 1) (+ r 1)) (* (+ r 1) (+ r 1) (- x r)))))
 (let ((?x53 (- ?x51 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x56 (* (- (- ?x46 ?x35) ?x36) (+ ?x53 (* (+ r 1) (- x r) (- x r))))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x60 (and $x40 (or (not (= ?x56 0))))))
 (rewrite (= $x60 $x239)))))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x312 (mp (mp @x62 (quant-intro (proof-bind ?x319) (= $x61 $x325)) $x325) (rewrite (= $x325 $x325)) $x325)))
 (let ((@x390 (mp (mp @x312 (quant-intro (proof-bind ?x311) (= $x325 $x258)) $x258) (quant-intro (proof-bind ?x349) (= $x258 $x223)) $x223)))
 (let ((@x108 (mp (mp~ @x390 (sk (~ $x223 $x133)) $x133) (rewrite (= $x133 $x345)) $x345)))
 (let ((@x365 (and-elim @x108 $x238)))
 (let ((@x347 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x238) $x377)) @x365 $x377)))
 (let (($x414 (>= ?x224 0)))
 (let ((@x256 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x238) $x414)) @x365 $x414)))
 (let (($x236 (not (>= ?x157 0))))
 (let (($x401 (<= ?x157 0)))
 (let ((@x281 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x344 (not $x401) $x236)) (and-elim @x108 $x346) (or (not $x401) $x236))))
 (let ((@x343 (unit-resolution @x281 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x401)) @x256 @x347 false) $x401) $x236)))
 ((_ th-lemma arith farkas 1 1 1) @x343 @x256 @x347 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 20
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.49
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1049917
 :num-checks                1
 :propagations              4
 :rlimit-count              1515
 :time                      0.01
 :total-time                0.01)
