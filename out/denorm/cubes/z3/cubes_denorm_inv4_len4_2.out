unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x114 (* (- 1) k!2)))
 (let ((?x133 (* n!0 n!0)))
 (let ((?x183 (* 3 ?x133)))
 (let ((?x289 (+ (* 3 n!0) ?x183 ?x114)))
 (let (($x340 (<= ?x289 (- 1))))
 (let (($x265 (= ?x289 (- 1))))
 (let ((?x220 (* (- 3) (* c!3 k!2 k!2 k!2 k!2))))
 (let ((?x166 (* (- 3) (* c!3 c!3 k!2 k!2 k!2))))
 (let ((?x287 (* (- 1) (* k!2 k!2 k!2 k!2 k!2))))
 (let ((?x184 (+ c!3 k!2)))
 (let ((?x294 (+ m!1 k!2)))
 (let ((?x463 (+ 1 n!0)))
 (let ((?x379 (* (- 1) (* c!3 c!3 c!3 k!2 k!2))))
 (let ((?x247 (* (- 1) (* ?x463 (+ 6 m!1) (+ 6 m!1) ?x294 ?x294 ?x184 ?x184))))
 (let ((?x235 (+ ?x247 (* (- 2) (* m!1 k!2 k!2 k!2 k!2)) (* (- 1) (* m!1 m!1 c!3 c!3 c!3)) (* (- 2) (* m!1 c!3 c!3 c!3 k!2)) (* ?x463 ?x463 ?x463 (+ 6 m!1) ?x294 ?x294 ?x184) ?x379 (* (- 1) (* m!1 m!1 k!2 k!2 k!2)) (* (- 1) (* ?x463 ?x463 ?x294 ?x184 ?x184 ?x184)) (* (- 3) (* m!1 m!1 c!3 k!2 k!2)) ?x287 ?x166 (* (- 6) (* m!1 c!3 c!3 k!2 k!2)) ?x220 (* (- 6) (* m!1 c!3 k!2 k!2 k!2)) (* (- 3) (* m!1 m!1 c!3 c!3 k!2)))))
 (let ((?x308 (* ?x235 (+ 7 (* 9 n!0) (* (- 1) m!1) ?x183 ?x114))))
 (let (($x528 (= ?x308 0)))
 (let (($x545 (not $x528)))
 (let ((?x233 (* k!2 k!2)))
 (let ((?x112 (* 9 n!0)))
 (let ((?x258 (+ ?x112 (* (- 18) c!3) ?x233 (* (- 9) (* n!0 c!3)) (* (- 5) k!2))))
 (let ((?x116 (* (- 1) m!1)))
 (let ((?x374 (+ (* 6 n!0) ?x116)))
 (let (($x364 (= ?x374 (- 6))))
 (let (($x309 (and $x364 (= ?x258 (- 4)) (= (+ (* 2 n!0) (* n!0 k!2) (* (- 3) c!3) ?x114) (- 1)) $x265 $x545)))
 (let ((?x140 (+ k!2 m!1)))
 (let ((?x95 (+ 6 m!1)))
 (let ((?x275 (+ (* (- 1) (* ?x463 ?x463 ?x140 ?x184 ?x184 ?x184)) ?x379 ?x166 ?x220 ?x287 (* (- 2) (* c!3 c!3 c!3 k!2 m!1)) (* (- 6) (* c!3 c!3 k!2 k!2 m!1)) (* (- 6) (* c!3 k!2 k!2 k!2 m!1)) (* (- 2) (* k!2 k!2 k!2 k!2 m!1)) (* (- 1) (* c!3 c!3 c!3 m!1 m!1)) (* (- 3) (* c!3 c!3 k!2 m!1 m!1)) (* (- 3) (* c!3 k!2 k!2 m!1 m!1)) (* (- 1) (* k!2 k!2 k!2 m!1 m!1)) (* (- 1) (* ?x463 ?x95 ?x95 ?x140 ?x140 ?x184 ?x184)) (* ?x463 ?x463 ?x463 ?x95 ?x140 ?x140 ?x184))))
 (let (($x134 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x547 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x233) (* 9 (* c!3 n!0)))))
 (let (($x345 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x547 4) $x134 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x133)) 1) (not (= (* ?x275 (+ 7 ?x114 ?x116 ?x112 ?x183)) 0)))))
 (let (($x168 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x464 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x524 (* ?x305 ?x305 ?x305 ?x464 ?x71 ?x71 ?x76)))
 (let ((?x471 (* (- 1) (* ?x305 ?x464 ?x464 ?x71 ?x71 ?x76 ?x76))))
 (let ((?x458 (* (- 1) (* k k k m m))))
 (let ((?x444 (* (- 1) (* c c c m m))))
 (let ((?x410 (* (- 1) (* k k k k k))))
 (let ((?x396 (* (- 1) (* c c c k k))))
 (let ((?x352 (* (- 1) (* ?x305 ?x305 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x537 (+ ?x352 ?x396 (* (- 3) (* c c k k k)) (* (- 3) (* c k k k k)) ?x410 (* (- 2) (* c c c k m)) (* (- 6) (* c c k k m)) (* (- 6) (* c k k k m)) (* (- 2) (* k k k k m)) ?x444 (* (- 3) (* c c k m m)) (* (- 3) (* c k k m m)) ?x458 ?x471 ?x524)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x537 (+ 7 ?x237 ?x353 ?x48 ?x269)) 0))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x154 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x531 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x352 (* (- 1) (* ?x305 ?x305 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x471 (* (- 1) (* ?x305 (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76))))
 (let ((?x464 (+ 6 m)))
 (let ((?x524 (* ?x305 ?x305 ?x305 ?x464 ?x71 ?x71 ?x76)))
 (let (($x520 (= (* (+ (* (- 1) (* ?x71 ?x71 ?x76 ?x76 ?x76)) ?x524 ?x471 ?x352) ?x531) 0)))
 (let (($x201 (not $x520)))
 (let (($x158 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x538 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x538 $x158 $x201)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x318 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x464 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x524 (* ?x305 ?x305 ?x305 ?x464 ?x71 ?x71 ?x76)))
 (let ((?x471 (* (- 1) (* ?x305 ?x464 ?x464 ?x71 ?x71 ?x76 ?x76))))
 (let ((?x458 (* (- 1) (* k k k m m))))
 (let ((?x444 (* (- 1) (* c c c m m))))
 (let ((?x410 (* (- 1) (* k k k k k))))
 (let ((?x396 (* (- 1) (* c c c k k))))
 (let ((?x352 (* (- 1) (* ?x305 ?x305 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x537 (+ ?x352 ?x396 (* (- 3) (* c c k k k)) (* (- 3) (* c k k k k)) ?x410 (* (- 2) (* c c c k m)) (* (- 6) (* c c k k m)) (* (- 6) (* c k k k m)) (* (- 2) (* k k k k m)) ?x444 (* (- 3) (* c c k m m)) (* (- 3) (* c k k m m)) ?x458 ?x471 ?x524)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x102 (and $x123 $x207 $x259 $x297 (not (= (* ?x537 (+ 7 ?x237 ?x353 ?x48 ?x269)) 0)))))
 (let ((?x383 (* (+ (* (- 1) (* ?x71 ?x71 ?x76 ?x76 ?x76)) ?x524 ?x471 ?x352) (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 (* 3 n)))))
 (let (($x201 (not (= ?x383 0))))
 (let (($x158 (= (+ ?x269 ?x237 (* 3 n)) (- 1))))
 (let (($x538 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x292 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x538 $x158 $x201)))
 (rewrite (= $x292 $x102)))))))))))))))))))))))))))))))))))
 ))
 (let (($x203 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x531 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x352 (* (- 1) (* ?x305 ?x305 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x471 (* (- 1) (* ?x305 (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76))))
 (let ((?x464 (+ 6 m)))
 (let ((?x524 (* ?x305 ?x305 ?x305 ?x464 ?x71 ?x71 ?x76)))
 (let (($x520 (= (* (+ (* (- 1) (* ?x71 ?x71 ?x76 ?x76 ?x76)) ?x524 ?x471 ?x352) ?x531) 0)))
 (let (($x201 (not $x520)))
 (let (($x158 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x146 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x146 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x158 $x201))))))))))))))))))) :qid k!34))
 ))
 (let ((?x164 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x531 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x352 (* (- 1) (* ?x305 ?x305 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x471 (* (- 1) (* ?x305 (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76))))
 (let ((?x464 (+ 6 m)))
 (let ((?x524 (* ?x305 ?x305 ?x305 ?x464 ?x71 ?x71 ?x76)))
 (let (($x520 (= (* (+ (* (- 1) (* ?x71 ?x71 ?x76 ?x76 ?x76)) ?x524 ?x471 ?x352) ?x531) 0)))
 (let (($x201 (not $x520)))
 (let (($x158 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x538 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x292 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x538 $x158 $x201)))
 (let ((?x48 (* 9 n)))
 (let ((?x146 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x204 (and $x123 (= ?x146 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x158 $x201)))
 (rewrite (= $x204 $x292))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x80 (+ (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71) (* ?x76 ?x71 ?x71 (+ m 6) ?x68 ?x68 ?x68))))
 (let ((?x83 (- ?x80 (* ?x76 ?x76 ?x71 ?x71 (+ m 6) (+ m 6) ?x68))))
 (let ((?x85 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x83 (* ?x76 ?x76 ?x76 ?x71 ?x68 ?x68)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x180 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x531 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x352 (* (- 1) (* ?x305 ?x305 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x471 (* (- 1) (* ?x305 (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76))))
 (let ((?x464 (+ 6 m)))
 (let ((?x524 (* ?x305 ?x305 ?x305 ?x464 ?x71 ?x71 ?x76)))
 (let (($x520 (= (* (+ (* (- 1) (* ?x71 ?x71 ?x76 ?x76 ?x76)) ?x524 ?x471 ?x352) ?x531) 0)))
 (let (($x201 (not $x520)))
 (let (($x158 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x146 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x204 (and $x123 (= ?x146 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x158 $x201)))
 (let ((?x68 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x80 (+ (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71) (* ?x76 ?x71 ?x71 ?x78 ?x68 ?x68 ?x68))))
 (let ((?x84 (- (- ?x80 (* ?x76 ?x76 ?x71 ?x71 ?x78 ?x78 ?x68)) (* ?x76 ?x76 ?x76 ?x71 ?x68 ?x68))))
 (let (($x86 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x84) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x86)))))
 (rewrite (= $x89 $x204))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x119 (mp (mp @x91 (quant-intro (proof-bind ?x180) (= $x90 $x203)) $x203) (rewrite (= $x203 $x203)) $x203)))
 (let ((@x218 (mp (mp @x119 (quant-intro (proof-bind ?x164) (= $x203 $x154)) $x154) (quant-intro (proof-bind ?x318) (= $x154 $x168)) $x168)))
 (let ((@x508 (mp (mp~ @x218 (sk (~ $x168 $x345)) $x345) (rewrite (= $x345 $x309)) $x309)))
 (let ((@x336 (and-elim @x508 $x265)))
 (let ((@x128 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x265) $x340)) @x336 $x340)))
 (let (($x544 (<= ?x374 (- 6))))
 (let ((@x104 (and-elim @x508 $x364)))
 (let ((@x569 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x364) $x544)) @x104 $x544)))
 (let (($x338 (>= ?x289 (- 1))))
 (let ((@x111 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x265) $x338)) @x336 $x338)))
 (let (($x556 (>= ?x374 (- 6))))
 (let ((@x557 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x364) $x556)) @x104 $x556)))
 (let (($x266 (not (<= ?x308 0))))
 (let (($x501 (>= ?x308 0)))
 (let ((@x513 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x501)) @x557 @x111 @x569 @x128 false) $x501)))
 (let ((@x256 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x528 $x266 (not $x501))) (and-elim @x508 $x545) (or $x266 (not $x501)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x256 @x513 $x266) @x557 @x111 @x569 @x128 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        23
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             227
 :arith-nonlinear-bounds    9
 :arith-nonlinear-horner    20
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.66
 :memory                    3.09
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1996827
 :num-checks                1
 :propagations              12
 :rlimit-count              19244
 :time                      0.02
 :total-time                0.02)
