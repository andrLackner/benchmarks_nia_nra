unsat
((set-logic NIA)
(proof
(let (($x57 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x49 (* ?x43 ?x44 y00)))
 (let ((?x48 (* ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x46 (* ?x43 ?x44 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x44 y00 y00)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x50 (- ?x47 ?x48)))
 (let ((?x51 (- ?x50 ?x49)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x52 (* ?x42 ?x51)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x55))))))))))))))))))) :qid k!29))
 ))
 (let (($x330 (= $x57 false)))
 (let (($x323 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x329 (elim-unused (= $x323 false))))
 (let (($x326 (= $x57 $x323)))
 (let ((?x415 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x49 (* ?x43 ?x44 y00)))
 (let ((?x48 (* ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x46 (* ?x43 ?x44 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x44 y00 y00)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x50 (- ?x47 ?x48)))
 (let ((?x51 (- ?x50 ?x49)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x52 (* ?x42 ?x51)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x56 (and $x33 $x41 $x55)))
 (let (($x321 (= $x56 false)))
 (let (($x360 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x86 (= (+ (* (- 1) y00) y) 0)))
 (let (($x409 (and $x86 $x360 false)))
 (let (($x314 (= $x55 false)))
 (let ((@x313 (rewrite (= (or false) false))))
 (let (($x309 (or false)))
 (let (($x310 (= $x55 $x309)))
 (let (($x307 (= $x54 false)))
 (let ((@x306 (rewrite (= (not true) false))))
 (let (($x302 (not true)))
 (let (($x303 (= $x54 $x302)))
 (let (($x300 (= $x53 true)))
 (let ((@x299 (rewrite (= (= 0 0) true))))
 (let (($x295 (= 0 0)))
 (let (($x296 (= $x53 $x295)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x84 (+ r ?x62)))
 (let ((?x81 (+ 1 q)))
 (let ((?x378 (* y00 ?x81 ?x84)))
 (let ((?x386 (* (- 1) ?x378)))
 (let ((?x354 (* y00 y00 ?x84 ?x84 ?x84)))
 (let ((?x367 (* (- 1) ?x354)))
 (let ((?x341 (* y00 y00 y00 ?x81 ?x84)))
 (let ((?x333 (* (- 1) (* y00 y00 ?x81 ?x84))))
 (let ((?x392 (+ ?x333 ?x341 ?x367 ?x386)))
 (let ((?x397 (* 0 ?x392)))
 (let ((@x389 (rewrite (= (- (+ ?x333 ?x341 ?x367) ?x378) (+ (+ ?x333 ?x341 ?x367) ?x386)))))
 (let ((@x89 (rewrite (= ?x44 ?x84))))
 (let ((@x83 (rewrite (= ?x43 ?x81))))
 (let ((@x239 (monotonicity @x83 @x89 (= ?x49 (* ?x81 ?x84 y00)))))
 (let ((@x141 (monotonicity @x89 @x89 @x89 (= ?x48 (* ?x84 ?x84 ?x84 y00 y00)))))
 (let ((@x362 (trans @x141 (rewrite (= (* ?x84 ?x84 ?x84 y00 y00) ?x354)) (= ?x48 ?x354))))
 (let ((@x366 (monotonicity (rewrite (= ?x47 (+ ?x333 ?x341))) @x362 (= ?x50 (- (+ ?x333 ?x341) ?x354)))))
 (let ((@x372 (trans @x366 (rewrite (= (- (+ ?x333 ?x341) ?x354) (+ (+ ?x333 ?x341) ?x367))) (= ?x50 (+ (+ ?x333 ?x341) ?x367)))))
 (let ((@x377 (trans @x372 (rewrite (= (+ (+ ?x333 ?x341) ?x367) (+ ?x333 ?x341 ?x367))) (= ?x50 (+ ?x333 ?x341 ?x367)))))
 (let ((@x385 (monotonicity @x377 (trans @x239 (rewrite (= (* ?x81 ?x84 y00) ?x378)) (= ?x49 ?x378)) (= ?x51 (- (+ ?x333 ?x341 ?x367) ?x378)))))
 (let ((@x396 (trans (trans @x385 @x389 (= ?x51 (+ (+ ?x333 ?x341 ?x367) ?x386))) (rewrite (= (+ (+ ?x333 ?x341 ?x367) ?x386) ?x392)) (= ?x51 ?x392))))
 (let ((@x78 (trans (monotonicity (rewrite (= ?x30 ?x62)) (= ?x42 (+ ?x62 y00))) (rewrite (= (+ ?x62 y00) 0)) (= ?x42 0))))
 (let ((@x402 (trans (monotonicity @x78 @x396 (= ?x52 ?x397)) (rewrite (= ?x397 0)) $x53)))
 (let ((@x406 (trans (monotonicity (trans (monotonicity @x402 $x296) @x299 $x300) $x303) @x306 $x307)))
 (let ((@x411 (monotonicity (rewrite (= $x33 $x86)) (rewrite (= $x41 $x360)) (trans (monotonicity @x406 $x310) @x313 $x314) (= $x56 $x409))))
 (trans @x411 (rewrite (= $x409 false)) $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (mp @x58 (trans (quant-intro (proof-bind ?x415) $x326) @x329 $x330) false))))))))))

(:max-memory   3.36
 :memory       3.05
 :mk-bool-var  5
 :num-allocs   900127
 :rlimit-count 259
 :time         0.01
 :total-time   0.01)
