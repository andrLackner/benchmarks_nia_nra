unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x194 (* (- 1) k!2)))
 (let ((?x240 (* n!0 n!0)))
 (let ((?x140 (* 3 ?x240)))
 (let ((?x210 (+ ?x140 (* 3 n!0) ?x194)))
 (let (($x114 (<= ?x210 0)))
 (let (($x220 (= ?x210 0)))
 (let ((?x99 (* (- 1) m!1)))
 (let ((?x280 (* 9 n!0)))
 (let ((?x156 (+ ?x140 ?x280 ?x99 ?x194)))
 (let (($x157 (= ?x156 (- 6))))
 (let (($x177 (not $x157)))
 (let ((?x267 (* k!2 k!2)))
 (let ((?x292 (+ ?x267 ?x280 (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let ((?x244 (+ (* 6 n!0) ?x99)))
 (let (($x250 (= ?x244 (- 6))))
 (let (($x134 (and $x250 (= ?x292 (- 4)) (= (+ (* n!0 k!2) (* 2 n!0) ?x194 (* (- 3) c!3)) 0) $x220 $x177)))
 (let (($x164 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 0)))
 (let ((?x266 (* (- 9) n!0)))
 (let ((?x85 (+ (* 18 c!3) (* 5 k!2) ?x266 (* (- 1) ?x267) (* 9 (* c!3 n!0)))))
 (let (($x98 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x85 4) $x164 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x240)) 0) (not (= (+ k!2 m!1 ?x266 (* (- 3) ?x240)) 6)))))
 (let (($x117 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let (($x167 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let (($x264 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x228 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 0)))
 (let ((?x46 (* k k)))
 (let ((?x188 (* (- 1) ?x46)))
 (let ((?x187 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x185 (= (+ ?x37 ?x41 ?x187 ?x188 (* 9 (* c n))) 4)))
 (let (($x108 (= (+ m (* (- 6) n)) 6)))
 (and $x108 $x185 $x228 $x264 $x167))))))))))) :qid k!33))
 ))
 (let (($x128 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x61 (* 3 n)))
 (let ((?x256 (* (- 1) k)))
 (let ((?x186 (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x256 (* (- 1) m) ?x61)))
 (let (($x78 (not (= ?x186 (- 3)))))
 (let (($x215 (= (+ (* 3 (* n n)) ?x256 ?x61) 0)))
 (let (($x129 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x188 (* (- 1) ?x46)))
 (let ((?x187 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x108 (= (+ m (* (- 6) n)) 6)))
 (and $x108 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x187 ?x188) 4) $x129 $x215 $x78))))))))))))) :qid k!33))
 ))
 (let ((?x311 (lambda ((c Int) (k Int) (m Int) (n Int) )(let (($x167 (not (= (+ k m (* (- 9) n) (* (- 3) (* n n))) 6))))
 (let (($x264 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0)))
 (let (($x228 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 0)))
 (let ((?x46 (* k k)))
 (let ((?x188 (* (- 1) ?x46)))
 (let ((?x187 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x185 (= (+ ?x37 ?x41 ?x187 ?x188 (* 9 (* c n))) 4)))
 (let (($x108 (= (+ m (* (- 6) n)) 6)))
 (let (($x278 (and $x108 $x185 $x228 $x264 $x167)))
 (let ((?x61 (* 3 n)))
 (let ((?x256 (* (- 1) k)))
 (let ((?x186 (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x256 (* (- 1) m) ?x61)))
 (let (($x78 (not (= ?x186 (- 3)))))
 (let (($x215 (= (+ (* 3 (* n n)) ?x256 ?x61) 0)))
 (let (($x129 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 0)))
 (let (($x337 (and $x108 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x187 ?x188) 4) $x129 $x215 $x78)))
 (rewrite (= $x337 $x278)))))))))))))))))))))
 ))
 (let (($x79 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x61 (* 3 n)))
 (let ((?x256 (* (- 1) k)))
 (let ((?x186 (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x256 (* (- 1) m) ?x61)))
 (let (($x78 (not (= ?x186 (- 3)))))
 (let (($x215 (= (+ (* 3 (* n n)) ?x256 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x236 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46)))
 (let (($x108 (= (+ m (* (- 6) n)) 6)))
 (and $x108 (= ?x236 (- 4)) (= (+ (* (- 3) c) (* n k) ?x256 (* 2 n)) 0) $x215 $x78)))))))))) :qid k!33))
 ))
 (let ((?x326 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x61 (* 3 n)))
 (let ((?x256 (* (- 1) k)))
 (let ((?x186 (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x256 (* (- 1) m) ?x61)))
 (let (($x78 (not (= ?x186 (- 3)))))
 (let (($x215 (= (+ (* 3 (* n n)) ?x256 ?x61) 0)))
 (let (($x129 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x188 (* (- 1) ?x46)))
 (let ((?x187 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x108 (= (+ m (* (- 6) n)) 6)))
 (let (($x337 (and $x108 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x187 ?x188) 4) $x129 $x215 $x78)))
 (let ((?x45 (* 9 n)))
 (let ((?x236 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46)))
 (let (($x205 (and $x108 (= ?x236 (- 4)) (= (+ (* (- 3) c) (* n k) ?x256 (* 2 n)) 0) $x215 $x78)))
 (rewrite (= $x205 $x337)))))))))))))))))))
 ))
 (let (($x75 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ (- (* 3 (+ n 1) (+ n 1)) (+ k m)) (* 3 (+ n 1)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) (or (not (= ?x70 0)))))))))) :qid k!33))
 ))
 (let ((?x87 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x61 (* 3 n)))
 (let ((?x256 (* (- 1) k)))
 (let ((?x186 (+ (* 3 (* (+ 1 n) (+ 1 n))) ?x256 (* (- 1) m) ?x61)))
 (let (($x78 (not (= ?x186 (- 3)))))
 (let (($x215 (= (+ (* 3 (* n n)) ?x256 ?x61) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x236 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46)))
 (let (($x108 (= (+ m (* (- 6) n)) 6)))
 (let (($x205 (and $x108 (= ?x236 (- 4)) (= (+ (* (- 3) c) (* n k) ?x256 (* 2 n)) 0) $x215 $x78)))
 (let ((?x70 (+ (- (* 3 (+ n 1) (+ n 1)) (+ k m)) (* 3 (+ n 1)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x74 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) ?x61) 0) (or (not (= ?x70 0))))))
 (rewrite (= $x74 $x205))))))))))))))))))
 ))
 (let ((@x76 (asserted $x75)))
 (let ((@x232 (mp (mp @x76 (quant-intro (proof-bind ?x87) (= $x75 $x79)) $x79) (rewrite (= $x79 $x79)) $x79)))
 (let ((@x118 (mp (mp @x232 (quant-intro (proof-bind ?x326) (= $x79 $x128)) $x128) (quant-intro (proof-bind ?x311) (= $x128 $x117)) $x117)))
 (let ((@x178 (mp (mp~ @x118 (sk (~ $x117 $x98)) $x98) (rewrite (= $x98 $x134)) $x134)))
 (let ((@x319 (and-elim @x178 $x220)))
 (let (($x131 (<= ?x244 (- 6))))
 (let ((@x180 (and-elim @x178 $x250)))
 (let (($x147 (not (<= ?x156 (- 6)))))
 (let (($x271 (>= ?x156 (- 6))))
 (let (($x122 (>= ?x210 0)))
 (let (($x139 (>= ?x244 (- 6))))
 (let ((@x309 ((_ th-lemma arith farkas -1 1 1) (hypothesis (not $x271)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x139)) @x180 $x139) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x220) $x122)) @x319 $x122) false)))
 (let ((@x163 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x157 $x147 (not $x271))) (and-elim @x178 $x177) (or $x147 (not $x271)))))
 ((_ th-lemma arith farkas -1 1 1) (unit-resolution @x163 (lemma @x309 $x271) $x147) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x131)) @x180 $x131) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x220) $x114)) @x319 $x114) false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-num-rows            5
 :arith-pivots              3
 :arith-row-summations      2
 :arith-tableau-max-columns 25
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                14
 :max-memory                3.45
 :memory                    3.04
 :mk-bool-var               21
 :mk-clause                 16
 :num-allocs                1034573
 :num-checks                1
 :propagations              10
 :rlimit-count              1386
 :time                      0.01
 :total-time                0.01)
