unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x164 (* (- 1) r!1)))
 (let ((?x170 (* r!1 r!1)))
 (let ((?x129 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x217 (+ r00 ?x83 ?x99 ?x129 ?x170 ?x164)))
 (let (($x225 (<= ?x217 0)))
 (let (($x156 (= ?x217 0)))
 (let ((?x157 (* 4 r!1)))
 (let ((?x85 (* 4 ?x170)))
 (let ((?x162 (* r!1 r!1 r!1)))
 (let ((?x158 (* (- 1) x!0)))
 (let ((?x81 (* (+ 1 ?x158 ?x162 ?x85 ?x157 (* (- 1) (* x!0 r!1))) ?x217)))
 (let (($x96 (= ?x81 0)))
 (let (($x66 (not $x96)))
 (let (($x79 (and $x156 $x66)))
 (let ((?x106 (* (+ 1 ?x157 ?x158 ?x85 (* (- 1) (* r!1 x!0)) ?x162) (+ ?x164 ?x129 r00 ?x170 ?x83 ?x99))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x155 (and (= (+ r!1 (* (- 2) x!0) ?x114 (* (- 1) ?x170) ?x35 ?x36) 0) (not (= ?x106 0)))))
 (let (($x216 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x246 (* r r r)))
 (let ((?x219 (* (- 1) (* r x))))
 (let ((?x227 (* (- 1) x)))
 (let ((?x275 (* 4 r)))
 (let (($x127 (not (= (* (+ 1 ?x275 ?x227 (* 4 ?x30) ?x219 ?x246) ?x105) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let ((?x113 (* (- 2) x)))
 (let (($x117 (= (+ r ?x113 ?x114 ?x115 ?x35 ?x36) 0)))
 (and $x117 $x127)))))))))))))))))) :qid k!26))
 ))
 (let (($x253 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x238 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x80 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let (($x89 (not (= (* ?x80 ?x238) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x89))))))))))))) :qid k!26))
 ))
 (let ((?x267 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x246 (* r r r)))
 (let ((?x219 (* (- 1) (* r x))))
 (let ((?x227 (* (- 1) x)))
 (let ((?x275 (* 4 r)))
 (let (($x127 (not (= (* (+ 1 ?x275 ?x227 (* 4 ?x30) ?x219 ?x246) ?x105) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let ((?x113 (* (- 2) x)))
 (let (($x117 (= (+ r ?x113 ?x114 ?x115 ?x35 ?x36) 0)))
 (let (($x112 (and $x117 $x127)))
 (let ((?x238 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x80 (+ (* (- 1) (* (+ 1 r) (+ x ?x62))) (* (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let (($x89 (not (= (* ?x80 ?x238) 0))))
 (let (($x88 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x89)))
 (rewrite (= $x88 $x112)))))))))))))))))))))))))
 ))
 (let (($x168 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x238 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x80 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let (($x89 (not (= (* ?x80 ?x238) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x83 ?x99) 0) $x89)))))))) :qid k!26))
 ))
 (let ((?x260 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x238 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x80 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let (($x89 (not (= (* ?x80 ?x238) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x88 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x89)))
 (let (($x100 (and (= (+ (* (- 1) r) r00 ?x30 ?x32 ?x83 ?x99) 0) $x89)))
 (rewrite (= $x100 $x88)))))))))))))))))
 ))
 (let (($x57 (exists ((r Int) (x Int) )(! (let ((?x51 (+ (* (- 1) (+ r 1) (- x r)) (* (+ r 1) (+ r 1) (+ r 1)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))))) :qid k!26))
 ))
 (let ((?x76 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x238 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x80 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let (($x89 (not (= (* ?x80 ?x238) 0))))
 (let (($x100 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x83 ?x99) 0) $x89)))
 (let ((?x51 (+ (* (- 1) (+ r 1) (- x r)) (* (+ r 1) (+ r 1) (+ r 1)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x56 (and $x40 (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))
 (rewrite (= $x56 $x100))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (let ((@x174 (mp (mp @x58 (quant-intro (proof-bind ?x76) (= $x57 $x168)) $x168) (rewrite (= $x168 $x168)) $x168)))
 (let ((@x63 (mp (mp @x174 (quant-intro (proof-bind ?x260) (= $x168 $x253)) $x253) (quant-intro (proof-bind ?x267) (= $x253 $x216)) $x216)))
 (let ((@x169 (mp (mp~ @x63 (sk (~ $x216 $x155)) $x155) (rewrite (= $x155 $x79)) $x79)))
 (let ((@x187 (and-elim @x169 $x156)))
 (let ((@x224 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x156) $x225)) @x187 $x225)))
 (let (($x245 (>= ?x217 0)))
 (let ((@x184 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x156) $x245)) @x187 $x245)))
 (let (($x124 (not (>= ?x81 0))))
 (let (($x256 (<= ?x81 0)))
 (let ((@x259 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x96 (not $x256) $x124)) (and-elim @x169 $x66) (or (not $x256) $x124))))
 (let ((@x213 (unit-resolution @x259 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x256)) @x184 @x224 false) $x256) $x124)))
 ((_ th-lemma arith farkas 1 1 1) @x213 @x184 @x224 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 16
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.46
 :memory                    3.05
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1026875
 :num-checks                1
 :propagations              4
 :rlimit-count              1059
 :time                      0.01
 :total-time                0.01)
