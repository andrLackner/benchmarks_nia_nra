unsat
((set-logic NIA)
(proof
(let (($x52 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x45 (* ?x43 ?x44)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x47 (* ?x42 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let (($x49 (not $x48)))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x50))))))))))))) :qid k!29))
 ))
 (let (($x188 (= $x52 false)))
 (let (($x181 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x187 (elim-unused (= $x181 false))))
 (let (($x184 (= $x52 $x181)))
 (let ((?x236 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x45 (* ?x43 ?x44)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x47 (* ?x42 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let (($x49 (not $x48)))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x51 (and $x33 $x41 $x50)))
 (let (($x179 (= $x51 false)))
 (let (($x218 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x79 (= (+ (* (- 1) y00) y) 0)))
 (let (($x230 (and $x79 $x218 false)))
 (let (($x172 (= $x50 false)))
 (let ((@x171 (rewrite (= (or false) false))))
 (let (($x167 (or false)))
 (let (($x168 (= $x50 $x167)))
 (let (($x165 (= $x49 false)))
 (let ((@x164 (rewrite (= (not true) false))))
 (let (($x160 (not true)))
 (let (($x161 (= $x49 $x160)))
 (let (($x158 (= $x48 true)))
 (let ((@x157 (rewrite (= (= 0 0) true))))
 (let (($x153 (= 0 0)))
 (let (($x154 (= $x48 $x153)))
 (let ((?x57 (* (- 1) y00)))
 (let ((?x77 (+ r ?x57)))
 (let ((?x74 (+ 1 q)))
 (let ((?x83 (* ?x74 ?x77)))
 (let ((?x195 (* (- 1) ?x83)))
 (let ((?x206 (+ 1 q ?x195)))
 (let ((?x215 (* 0 ?x206)))
 (let ((@x76 (rewrite (= ?x43 ?x74))))
 (let ((@x205 (trans (monotonicity @x76 (rewrite (= ?x45 ?x83)) (= ?x46 (- ?x74 ?x83))) (rewrite (= (- ?x74 ?x83) (+ ?x74 ?x195))) (= ?x46 (+ ?x74 ?x195)))))
 (let ((@x71 (trans (monotonicity (rewrite (= ?x30 ?x57)) (= ?x42 (+ ?x57 y00))) (rewrite (= (+ ?x57 y00) 0)) (= ?x42 0))))
 (let ((@x217 (monotonicity @x71 (trans @x205 (rewrite (= (+ ?x74 ?x195) ?x206)) (= ?x46 ?x206)) (= ?x47 ?x215))))
 (let ((@x225 (trans (monotonicity (trans @x217 (rewrite (= ?x215 0)) $x48) $x154) @x157 $x158)))
 (let ((@x229 (trans (monotonicity (trans (monotonicity @x225 $x161) @x164 $x165) $x168) @x171 $x172)))
 (let ((@x232 (monotonicity (rewrite (= $x33 $x79)) (rewrite (= $x41 $x218)) @x229 (= $x51 $x230))))
 (trans @x232 (rewrite (= $x230 false)) $x179)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (mp @x53 (trans (quant-intro (proof-bind ?x236) $x184) @x187 $x188) false))))))))))

(:max-memory   3.32
 :memory       3.03
 :mk-bool-var  5
 :num-allocs   874272
 :rlimit-count 145
 :time         0.01
 :total-time   0.01)
