unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x139 (* (- 6) n!0)))
 (let ((?x479 (+ m!1 ?x139)))
 (let (($x169 (<= ?x479 6)))
 (let (($x271 (= ?x479 6)))
 (let ((?x303 (+ (- 6) m!1 ?x139)))
 (let ((?x95 (+ c!3 k!2)))
 (let ((?x309 (+ m!1 k!2)))
 (let ((?x220 (+ 6 m!1)))
 (let ((?x221 (+ 1 n!0)))
 (let ((?x91 (* ?x221 ?x221 ?x221 ?x220 ?x309 ?x309 ?x309 ?x95 ?x95 ?x303)))
 (let (($x89 (= ?x91 0)))
 (let (($x145 (not $x89)))
 (let (($x123 (= (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0)) (- 1))))
 (let (($x344 (= (+ (* k!2 n!0) (* (- 3) c!3) (* (- 1) k!2) (* 2 n!0)) (- 1))))
 (let ((?x249 (* k!2 k!2)))
 (let ((?x174 (+ ?x249 (* (- 18) c!3) (* (- 5) k!2) (* (- 9) (* c!3 n!0)) (* 9 n!0))))
 (let (($x320 (and $x271 (= ?x174 (- 4)) $x344 $x123 $x145)))
 (let ((?x216 (+ k!2 m!1)))
 (let (($x205 (not (= (* ?x221 ?x221 ?x221 ?x220 ?x216 ?x216 ?x216 ?x95 ?x95 ?x303) 0))))
 (let (($x239 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x253 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x249) (* 9 (* c!3 n!0)))))
 (let (($x212 (and $x271 (= ?x253 4) $x239 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) $x205)))
 (let (($x275 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x105 (* (- 6) n)))
 (let ((?x111 (+ (- 6) m ?x105)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x355 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let (($x94 (not (= (* ?x311 ?x311 ?x311 ?x355 ?x73 ?x73 ?x73 ?x72 ?x72 ?x111) 0))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m ?x105) 6)))
 (and $x122 $x206 $x258 $x296 $x94))))))))))))))))) :qid k!34))
 ))
 (let (($x490 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x105 (* (- 6) n)))
 (let ((?x111 (+ (- 6) m ?x105)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x355 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let (($x94 (not (= (* ?x311 ?x311 ?x311 ?x355 ?x73 ?x73 ?x73 ?x72 ?x72 ?x111) 0))))
 (let (($x211 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x492 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m ?x105) 6)))
 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x492 $x211 $x94)))))))))))))))) :qid k!34))
 ))
 (let ((?x163 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x105 (* (- 6) n)))
 (let ((?x111 (+ (- 6) m ?x105)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x355 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let (($x94 (not (= (* ?x311 ?x311 ?x311 ?x355 ?x73 ?x73 ?x73 ?x72 ?x72 ?x111) 0))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m ?x105) 6)))
 (let (($x265 (and $x122 $x206 $x258 $x296 $x94)))
 (let (($x211 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x492 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x494 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x492 $x211 $x94)))
 (rewrite (= $x494 $x265)))))))))))))))))))))))
 ))
 (let (($x96 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x105 (* (- 6) n)))
 (let ((?x111 (+ (- 6) m ?x105)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x355 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let (($x94 (not (= (* ?x311 ?x311 ?x311 ?x355 ?x73 ?x73 ?x73 ?x72 ?x72 ?x111) 0))))
 (let (($x211 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x140 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x291 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m ?x105) 6)))
 (and $x122 (= ?x291 (- 4)) $x140 $x211 $x94)))))))))))))) :qid k!34))
 ))
 (let ((?x335 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x105 (* (- 6) n)))
 (let ((?x111 (+ (- 6) m ?x105)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x355 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let (($x94 (not (= (* ?x311 ?x311 ?x311 ?x355 ?x73 ?x73 ?x73 ?x72 ?x72 ?x111) 0))))
 (let (($x211 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x492 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m ?x105) 6)))
 (let (($x494 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x492 $x211 $x94)))
 (let (($x140 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x291 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (and $x122 (= ?x291 (- 4)) $x140 $x211 $x94)))
 (rewrite (= $x119 $x494)))))))))))))))))))))))
 ))
 (let (($x80 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x73 (+ k m)))
 (let ((?x72 (+ c k)))
 (let ((?x75 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x72 ?x73 ?x73 ?x73 (+ m 6) ?x69 ?x69 ?x69)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x75 0))))))))))))))) :qid k!34))
 ))
 (let ((?x101 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x105 (* (- 6) n)))
 (let ((?x111 (+ (- 6) m ?x105)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x355 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let (($x94 (not (= (* ?x311 ?x311 ?x311 ?x355 ?x73 ?x73 ?x73 ?x72 ?x72 ?x111) 0))))
 (let (($x211 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x140 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x291 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m ?x105) 6)))
 (let (($x119 (and $x122 (= ?x291 (- 4)) $x140 $x211 $x94)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x72 ?x73 ?x73 ?x73 (+ m 6) ?x69 ?x69 ?x69)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x79 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x75 0))))))
 (rewrite (= $x79 $x119)))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x493 (mp (mp @x81 (quant-intro (proof-bind ?x101) (= $x80 $x96)) $x96) (rewrite (= $x96 $x96)) $x96)))
 (let ((@x485 (mp (mp @x493 (quant-intro (proof-bind ?x335) (= $x96 $x490)) $x490) (quant-intro (proof-bind ?x163) (= $x490 $x275)) $x275)))
 (let ((@x321 (mp (mp~ @x485 (sk (~ $x275 $x212)) $x212) (rewrite (= $x212 $x320)) $x320)))
 (let ((@x350 (and-elim @x321 $x271)))
 (let ((@x328 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x271) $x169)) @x350 $x169)))
 (let (($x168 (>= ?x479 6)))
 (let ((@x133 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x271) $x168)) @x350 $x168)))
 (let (($x215 (not (<= ?x91 0))))
 (let (($x131 (>= ?x91 0)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x89 $x215 (not $x131))) (and-elim @x321 $x145) (or $x215 (not $x131)))))
 (let ((@x278 (unit-resolution @x277 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x131)) @x133 @x328 false) $x131) $x215)))
 ((_ th-lemma arith farkas 1 1 1) @x278 @x133 @x328 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      19
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.58
 :memory                    3.09
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1157371
 :num-checks                1
 :propagations              12
 :rlimit-count              3519
 :time                      0.01
 :total-time                0.01)
