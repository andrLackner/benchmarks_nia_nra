unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x172 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x604 (>= ?x172 0)))
 (let (($x536 (= ?x172 0)))
 (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x184 (+ ?x66 ?x73 y!0 x!1)))
 (let ((?x166 (* (- 3) x!1)))
 (let ((?x603 (+ 1 y!0)))
 (let ((?x331 (+ (- 1) x!1)))
 (let ((?x332 (* (- 1) (* ?x331 ?x331 ?x331 ?x603 ?x603 ?x603))))
 (let ((?x564 (* x!1 x!1)))
 (let ((?x334 (* 3 ?x564)))
 (let ((?x328 (* (- 3) (* y!0 y!0 x!1))))
 (let ((?x445 (* (- 1) (* y!0 y!0 x!1 x!1 x!1))))
 (let ((?x164 (* 2 y!0)))
 (let ((?x337 (* y!0 y!0)))
 (let ((?x152 (* 6 (* y!0 x!1 x!1))))
 (let ((?x157 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x506 (+ 1 ?x157 (* (- 6) (* y!0 x!1)) ?x152 ?x337 ?x164 ?x445 ?x328 (* 3 (* y!0 y!0 x!1 x!1)) (* (- 2) (* y!0 x!1 x!1 x!1)) ?x334 ?x332 ?x166)))
 (let ((?x848 (* ?x506 ?x184)))
 (let (($x171 (= ?x848 0)))
 (let (($x555 (not $x171)))
 (let ((?x146 (* (- 3) ?x564)))
 (let ((?x327 (* (- 1) ?x337)))
 (let ((?x609 (+ 1 x!1)))
 (let ((?x608 (+ (- 1) y!0)))
 (let ((?x464 (* (- 1) (* ?x608 ?x608 ?x608 ?x609 ?x609 ?x609))))
 (let ((?x562 (+ (- 1) ?x157 (* 6 (* y!0 x!1)) ?x464 ?x152 ?x327 ?x164 ?x445 ?x328 (* (- 3) (* y!0 y!0 x!1 x!1)) (* 2 (* y!0 x!1 x!1 x!1)) ?x146 ?x166)))
 (let ((?x621 (* ?x562 ?x184)))
 (let (($x571 (= ?x621 0)))
 (let (($x617 (or (not $x571) $x555)))
 (let (($x606 (and $x536 $x617)))
 (let ((?x407 (+ x!1 y!0 ?x66 ?x73)))
 (let ((?x159 (* (- 1) (* x!1 x!1 x!1 y!0 y!0))))
 (let ((?x161 (* (- 3) (* x!1 y!0 y!0))))
 (let ((?x540 (* 6 (* x!1 x!1 y!0))))
 (let ((?x624 (+ (- 1) ?x166 ?x164 ?x464 ?x327 ?x146 (* 6 (* x!1 y!0)) ?x540 ?x161 (* (- 3) (* x!1 x!1 y!0 y!0)) ?x159 ?x157 (* 2 (* x!1 x!1 x!1 y!0)))))
 (let ((?x596 (+ 1 ?x166 ?x164 ?x337 ?x334 (* (- 6) (* x!1 y!0)) ?x540 ?x161 (* 3 (* x!1 x!1 y!0 y!0)) ?x159 ?x157 (* (- 2) (* x!1 x!1 x!1 y!0)) ?x332)))
 (let (($x568 (and (= ?x407 0) (or (not (= (* ?x596 ?x407) 0)) (not (= (* ?x624 ?x407) 0))))))
 (let (($x401 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x505 (* x x x y)))
 (let ((?x541 (* 2 ?x505)))
 (let ((?x577 (* (- 1) (* x x x))))
 (let ((?x576 (* (- 1) (* x x x y y))))
 (let ((?x360 (* x x y y)))
 (let ((?x544 (* (- 3) ?x360)))
 (let ((?x354 (* x y y)))
 (let ((?x629 (* (- 3) ?x354)))
 (let ((?x341 (* x x y)))
 (let ((?x628 (* 6 ?x341)))
 (let ((?x335 (* x y)))
 (let ((?x923 (* 6 ?x335)))
 (let ((?x330 (* x x)))
 (let ((?x920 (* (- 3) ?x330)))
 (let ((?x149 (+ 1 x)))
 (let ((?x618 (+ (- 1) y)))
 (let ((?x323 (* (- 1) (* ?x618 ?x618 ?x618 ?x149 ?x149 ?x149))))
 (let ((?x364 (* 2 y)))
 (let ((?x625 (* (- 3) x)))
 (let ((?x807 (+ (- 1) ?x625 ?x364 ?x323 (* (- 1) (* y y)) ?x920 ?x923 ?x628 ?x629 ?x544 ?x576 ?x577 ?x541)))
 (let ((?x572 (+ 1 y)))
 (let ((?x274 (+ (- 1) x)))
 (let ((?x614 (* (- 1) (* ?x274 ?x274 ?x274 ?x572 ?x572 ?x572))))
 (let ((?x619 (* (- 2) ?x505)))
 (let ((?x272 (* y y)))
 (let ((?x384 (+ 1 ?x625 ?x364 ?x272 (* 3 ?x330) (* (- 6) ?x335) ?x628 ?x629 (* 3 ?x360) ?x576 ?x577 ?x619 ?x614)))
 (let (($x92 (= ?x87 0)))
 (and $x92 (or (not (= (* ?x384 ?x87) 0)) (not (= (* ?x807 ?x87) 0)))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x565 (exists ((x Int) (y Int) )(! (let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x591 (+ x ?x66 ?x73 y)))
 (let ((?x149 (+ 1 x)))
 (let ((?x618 (+ (- 1) y)))
 (let ((?x323 (* (- 1) (* ?x618 ?x618 ?x618 ?x149 ?x149 ?x149))))
 (let (($x597 (not (= (* (+ ?x323 (* (- 1) (* ?x618 ?x618 ?x149 ?x149 ?x149))) ?x591) 0))))
 (let ((?x572 (+ 1 y)))
 (let ((?x274 (+ (- 1) x)))
 (let ((?x614 (* (- 1) (* ?x274 ?x274 ?x274 ?x572 ?x572 ?x572))))
 (let (($x538 (not (= (* (+ ?x614 (* (- 1) (* ?x274 ?x274 ?x274 ?x572 ?x572))) ?x591) 0))))
 (and (= ?x591 0) (or $x538 $x597))))))))))))) :qid k!27))
 ))
 (let ((?x203 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x87 (+ x y ?x66 ?x73)))
 (let ((?x505 (* x x x y)))
 (let ((?x541 (* 2 ?x505)))
 (let ((?x577 (* (- 1) (* x x x))))
 (let ((?x576 (* (- 1) (* x x x y y))))
 (let ((?x360 (* x x y y)))
 (let ((?x544 (* (- 3) ?x360)))
 (let ((?x354 (* x y y)))
 (let ((?x629 (* (- 3) ?x354)))
 (let ((?x341 (* x x y)))
 (let ((?x628 (* 6 ?x341)))
 (let ((?x335 (* x y)))
 (let ((?x923 (* 6 ?x335)))
 (let ((?x330 (* x x)))
 (let ((?x920 (* (- 3) ?x330)))
 (let ((?x149 (+ 1 x)))
 (let ((?x618 (+ (- 1) y)))
 (let ((?x323 (* (- 1) (* ?x618 ?x618 ?x618 ?x149 ?x149 ?x149))))
 (let ((?x364 (* 2 y)))
 (let ((?x625 (* (- 3) x)))
 (let ((?x807 (+ (- 1) ?x625 ?x364 ?x323 (* (- 1) (* y y)) ?x920 ?x923 ?x628 ?x629 ?x544 ?x576 ?x577 ?x541)))
 (let ((?x572 (+ 1 y)))
 (let ((?x274 (+ (- 1) x)))
 (let ((?x614 (* (- 1) (* ?x274 ?x274 ?x274 ?x572 ?x572 ?x572))))
 (let ((?x619 (* (- 2) ?x505)))
 (let ((?x272 (* y y)))
 (let ((?x384 (+ 1 ?x625 ?x364 ?x272 (* 3 ?x330) (* (- 6) ?x335) ?x628 ?x629 (* 3 ?x360) ?x576 ?x577 ?x619 ?x614)))
 (let (($x92 (= ?x87 0)))
 (let (($x772 (and $x92 (or (not (= (* ?x384 ?x87) 0)) (not (= (* ?x807 ?x87) 0))))))
 (let ((?x591 (+ x ?x66 ?x73 y)))
 (let (($x597 (not (= (* (+ ?x323 (* (- 1) (* ?x618 ?x618 ?x149 ?x149 ?x149))) ?x591) 0))))
 (let (($x538 (not (= (* (+ ?x614 (* (- 1) (* ?x274 ?x274 ?x274 ?x572 ?x572))) ?x591) 0))))
 (let (($x325 (and (= ?x591 0) (or $x538 $x597))))
 (rewrite (= $x325 $x772))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x63 (exists ((x Int) (y Int) )(! (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x55 (+ (* (- 1) ?x48 ?x48 ?x48 ?x51 ?x51 ?x51) (* 0 ?x48 ?x48 ?x48 ?x51))))
 (let ((?x58 (* (+ (- (- ?x48 y00) x00) ?x51) (- ?x55 (* ?x48 ?x48 ?x48 ?x51 ?x51)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* 0 ?x34 ?x34 ?x34 ?x39))))
 (let ((?x45 (* (+ (- (- ?x34 y00) x00) y 1) (- ?x42 (* ?x34 ?x34 ?x34 ?x39 ?x39)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x45 0)) (not (= ?x58 0)))))))))))) :qid k!27))
 ))
 (let ((?x566 (lambda ((x Int) (y Int) )(let ((?x73 (* (- 1) x00)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x591 (+ x ?x66 ?x73 y)))
 (let ((?x149 (+ 1 x)))
 (let ((?x618 (+ (- 1) y)))
 (let ((?x323 (* (- 1) (* ?x618 ?x618 ?x618 ?x149 ?x149 ?x149))))
 (let (($x597 (not (= (* (+ ?x323 (* (- 1) (* ?x618 ?x618 ?x149 ?x149 ?x149))) ?x591) 0))))
 (let ((?x572 (+ 1 y)))
 (let ((?x274 (+ (- 1) x)))
 (let ((?x614 (* (- 1) (* ?x274 ?x274 ?x274 ?x572 ?x572 ?x572))))
 (let (($x538 (not (= (* (+ ?x614 (* (- 1) (* ?x274 ?x274 ?x274 ?x572 ?x572))) ?x591) 0))))
 (let (($x325 (and (= ?x591 0) (or $x538 $x597))))
 (let ((?x51 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x55 (+ (* (- 1) ?x48 ?x48 ?x48 ?x51 ?x51 ?x51) (* 0 ?x48 ?x48 ?x48 ?x51))))
 (let ((?x58 (* (+ (- (- ?x48 y00) x00) ?x51) (- ?x55 (* ?x48 ?x48 ?x48 ?x51 ?x51)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* 0 ?x34 ?x34 ?x34 ?x39))))
 (let ((?x45 (* (+ (- (- ?x34 y00) x00) y 1) (- ?x42 (* ?x34 ?x34 ?x34 ?x39 ?x39)))))
 (let (($x62 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x45 0)) (not (= ?x58 0))))))
 (rewrite (= $x62 $x325))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x542 (mp (mp @x64 (quant-intro (proof-bind ?x566) (= $x63 $x565)) $x565) (rewrite (= $x565 $x565)) $x565)))
 (let ((@x587 (mp~ (mp @x542 (quant-intro (proof-bind ?x203) (= $x565 $x401)) $x401) (sk (~ $x401 $x568)) $x568)))
 (let ((@x911 (mp @x587 (rewrite (= $x568 $x606)) $x606)))
 (let ((@x355 (and-elim @x911 $x536)))
 (let ((@x581 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x536) $x604)) @x355 $x604)))
 (let (($x631 (<= ?x172 0)))
 (let ((@x68 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x536) $x631)) @x355 $x631)))
 (let (($x583 (not (<= ?x848 0))))
 (let (($x499 (>= ?x848 0)))
 (let (($x154 (>= ?x621 0)))
 (let (($x630 (<= ?x621 0)))
 (let ((@x717 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x571 (not $x630) (not $x154))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x630)) @x68 @x581 false) $x630) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x154)) @x68 @x581 false) $x154) $x571)))
 (let ((@x586 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x171 $x583 (not $x499))) (unit-resolution (and-elim @x911 $x617) @x717 $x555) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x499)) @x68 @x581 false) $x499) $x583)))
 ((_ th-lemma arith farkas 1 1 1) @x586 @x68 @x581 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             168
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 33
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.65
 :memory                    3.18
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1172701
 :num-checks                1
 :propagations              14
 :rlimit-count              3070
 :time                      0.01
 :total-time                0.01)
