unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x300 (* (- 1) r!1)))
 (let ((?x217 (* 2 x!0)))
 (let ((?x319 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x277 (* (- 1) ?x36)))
 (let ((?x184 (* (- 2) x00)))
 (let ((?x302 (+ r00 ?x184 ?x277 ?x319 ?x217 ?x300)))
 (let (($x289 (<= ?x302 0)))
 (let (($x218 (= ?x302 0)))
 (let ((?x286 (* (- 1) ?x319)))
 (let ((?x264 (* r!1 r!1 r!1 r!1)))
 (let ((?x253 (* r!1 r!1 r!1)))
 (let ((?x168 (+ r00 ?x184 ?x277 (* 2 (* r00 r!1)) (* r00 r!1 r!1) ?x253 ?x264 (* 4 (* x!0 r!1)) (* (- 4) (* x00 r!1)) (* (- 2) (* r00 r00 r!1)) (* 2 (* x!0 r!1 r!1)) ?x286 (* (- 2) (* x00 r!1 r!1)) (* (- 1) (* r00 r00 r!1 r!1)) ?x217 ?x300)))
 (let (($x169 (= ?x168 0)))
 (let (($x267 (not $x169)))
 (let (($x311 (and $x218 $x267)))
 (let ((?x35 (* 2 x00)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x313 (* (- 2) x!0)))
 (let ((?x119 (+ r!1 ?x313 ?x111 ?x319 ?x35 ?x36 (* (- 4) (* r!1 x!0)) (* (- 2) (* r!1 r00)) (* (- 1) ?x253) (* 4 (* r!1 x00)) (* 2 (* r!1 r00 r00)) (* (- 2) (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r00)) (* (- 1) ?x264) (* 2 (* r!1 r!1 x00)) (* r!1 r!1 r00 r00))))
 (let (($x276 (and (= (+ r!1 ?x313 ?x111 ?x286 ?x35 ?x36) 0) (not (= ?x119 0)))))
 (let (($x123 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x406 (+ r ?x110 ?x111 ?x30 ?x35 ?x36 (* (- 4) (* r x)) (* (- 2) (* r r00)) (* (- 1) (* r r r)) (* 4 (* r x00)) (* 2 (* r r00 r00)) (* (- 2) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00))))
 (and (= (+ r ?x110 ?x111 (* (- 1) ?x30) ?x35 ?x36) 0) (not (= ?x406 0))))))))) :qid k!26))
 ))
 (let (($x73 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x277 (* (- 1) ?x36)))
 (let ((?x184 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x261 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x184 ?x277)))
 (let ((?x80 (+ 1 r)))
 (let (($x309 (not (= (* ?x80 ?x80 ?x261) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x309))))))))))))) :qid k!26))
 ))
 (let ((?x280 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x406 (+ r ?x110 ?x111 ?x30 ?x35 ?x36 (* (- 4) (* r x)) (* (- 2) (* r r00)) (* (- 1) (* r r r)) (* 4 (* r x00)) (* 2 (* r r00 r00)) (* (- 2) (* r r x)) (* (- 1) (* r r r00)) (* (- 1) (* r r r r)) (* 2 (* r r x00)) (* r r r00 r00))))
 (let (($x132 (and (= (+ r ?x110 ?x111 (* (- 1) ?x30) ?x35 ?x36) 0) (not (= ?x406 0)))))
 (let ((?x277 (* (- 1) ?x36)))
 (let ((?x184 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x261 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x184 ?x277)))
 (let ((?x80 (+ 1 r)))
 (let (($x309 (not (= (* ?x80 ?x80 ?x261) 0))))
 (let (($x185 (and (= (+ r ?x111 (* (- 1) ?x30) ?x110 ?x35 ?x36) 0) $x309)))
 (rewrite (= $x185 $x132)))))))))))))))))
 ))
 (let (($x310 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x277 (* (- 1) ?x36)))
 (let ((?x184 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x261 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x184 ?x277)))
 (let ((?x80 (+ 1 r)))
 (let (($x309 (not (= (* ?x80 ?x80 ?x261) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x184 ?x277) 0) $x309)))))))) :qid k!26))
 ))
 (let ((?x216 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x277 (* (- 1) ?x36)))
 (let ((?x184 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x261 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x184 ?x277)))
 (let ((?x80 (+ 1 r)))
 (let (($x309 (not (= (* ?x80 ?x80 ?x261) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (let (($x185 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x309)))
 (let (($x295 (and (= (+ (* (- 1) r) r00 ?x30 ?x32 ?x184 ?x277) 0) $x309)))
 (rewrite (= $x295 $x185)))))))))))))))))
 ))
 (let (($x54 (exists ((r Int) (x Int) )(! (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (- (+ (* ?x27 ?x41) r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35)))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- ?x47 ?x36) ?x27 ?x41 ?x41) 0)))))))))) :qid k!26))
 ))
 (let ((?x312 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x277 (* (- 1) ?x36)))
 (let ((?x184 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x261 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x184 ?x277)))
 (let ((?x80 (+ 1 r)))
 (let (($x309 (not (= (* ?x80 ?x80 ?x261) 0))))
 (let (($x295 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x184 ?x277) 0) $x309)))
 (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (- (+ (* ?x27 ?x41) r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35)))
 (let (($x40 (= (- (- (+ (* ?x27 r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x53 (and $x40 (or (not (= (* (- ?x47 ?x36) ?x27 ?x41 ?x41) 0))))))
 (rewrite (= $x53 $x295)))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x176 (mp (mp @x55 (quant-intro (proof-bind ?x312) (= $x54 $x310)) $x310) (rewrite (= $x310 $x310)) $x310)))
 (let ((@x326 (mp (mp @x176 (quant-intro (proof-bind ?x216) (= $x310 $x73)) $x73) (quant-intro (proof-bind ?x280) (= $x73 $x123)) $x123)))
 (let ((@x240 (mp (mp~ @x326 (sk (~ $x123 $x276)) $x276) (rewrite (= $x276 $x311)) $x311)))
 (let ((@x249 (and-elim @x240 $x218)))
 (let ((@x338 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x289)) @x249 $x289)))
 (let (($x290 (>= ?x302 0)))
 (let ((@x343 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x290)) @x249 $x290)))
 (let (($x336 (not (>= ?x168 0))))
 (let (($x209 (<= ?x168 0)))
 (let ((@x305 (lemma ((_ th-lemma arith) (hypothesis (not $x209)) @x343 @x338 @x343 @x338 false) $x209)))
 (let ((@x102 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x169 (not $x209) $x336)) (and-elim @x240 $x267) (or (not $x209) $x336))))
 ((_ th-lemma arith) (unit-resolution @x102 @x305 $x336) @x343 @x338 @x343 @x338 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             120
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 24
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.49
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1065771
 :num-checks                1
 :propagations              4
 :rlimit-count              1896
 :time                      0.01
 :total-time                0.01)
