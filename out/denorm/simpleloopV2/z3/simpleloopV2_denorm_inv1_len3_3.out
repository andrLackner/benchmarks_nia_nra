unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x140 (* (- 1) x!1)))
 (let ((?x146 (* (- 1) y!0)))
 (let ((?x241 (+ y00 x00 ?x146 ?x140)))
 (let (($x213 (>= ?x241 0)))
 (let (($x242 (= ?x241 0)))
 (let ((?x70 (* (- 1) x00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x234 (+ ?x63 ?x70 y!0 x!1)))
 (let ((?x292 (* y!0 y!0 y!0)))
 (let ((?x201 (* (- 1) ?x292)))
 (let ((?x290 (* x!1 x!1)))
 (let ((?x279 (* y!0 y!0 y!0 x!1)))
 (let ((?x191 (* 3 (* y!0 x!1))))
 (let ((?x226 (* (- 2) (* y!0 y!0))))
 (let ((?x298 (+ 1 ?x226 ?x146 (* 3 (* y!0 y!0 x!1)) ?x191 ?x279 ?x290 ?x201 ?x140)))
 (let ((?x141 (* ?x298 ?x234)))
 (let (($x215 (= ?x141 0)))
 (let (($x307 (not $x215)))
 (let ((?x316 (+ 1 ?x226 y!0 (* (- 3) (* y!0 y!0 x!1)) ?x191 ?x279 ?x290 ?x292 x!1)))
 (let ((?x346 (* ?x316 ?x234)))
 (let (($x295 (= ?x346 0)))
 (let (($x332 (or (not $x295) $x307)))
 (let (($x349 (and $x242 $x332)))
 (let ((?x321 (+ x!1 y!0 ?x63 ?x70)))
 (let ((?x145 (* 3 (* x!1 y!0))))
 (let ((?x155 (* x!1 y!0 y!0 y!0)))
 (let ((?x225 (+ 1 x!1 y!0 ?x226 ?x290 ?x292 ?x155 ?x145 (* (- 3) (* x!1 y!0 y!0)))))
 (let ((?x331 (+ 1 ?x140 ?x146 ?x226 ?x290 ?x201 ?x155 ?x145 (* 3 (* x!1 y!0 y!0)))))
 (let (($x167 (and (= ?x321 0) (or (not (= (* ?x331 ?x321) 0)) (not (= (* ?x225 ?x321) 0))))))
 (let (($x229 (exists ((x Int) (y Int) )(! (let ((?x70 (* (- 1) x00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x84 (+ x y ?x63 ?x70)))
 (let ((?x221 (* x y y)))
 (let ((?x347 (* (- 3) ?x221)))
 (let ((?x216 (* x y)))
 (let ((?x237 (* 3 ?x216)))
 (let ((?x206 (* x y y y)))
 (let ((?x204 (* y y y)))
 (let ((?x162 (* x x)))
 (let ((?x132 (* y y)))
 (let ((?x358 (* (- 2) ?x132)))
 (let (($x166 (= (* (+ 1 x y ?x358 ?x162 ?x204 ?x206 ?x237 ?x347) ?x84) 0)))
 (let ((?x238 (* 3 ?x221)))
 (let ((?x205 (* (- 1) ?x204)))
 (let ((?x161 (* (- 1) x)))
 (let ((?x276 (* (+ 1 ?x161 (* (- 1) y) ?x358 ?x162 ?x205 ?x206 ?x237 ?x238) ?x84)))
 (let (($x89 (= ?x84 0)))
 (and $x89 (or (not (= ?x276 0)) (not $x166))))))))))))))))))))) :qid k!27))
 ))
 (let (($x284 (exists ((x Int) (y Int) )(! (let ((?x70 (* (- 1) x00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x84 (+ x y ?x63 ?x70)))
 (let ((?x221 (* x y y)))
 (let ((?x347 (* (- 3) ?x221)))
 (let ((?x206 (* x y y y)))
 (let ((?x204 (* y y y)))
 (let ((?x195 (* (- 1) (* y y 1))))
 (let ((?x162 (* x x)))
 (let ((?x360 (+ 1 x (* (- 1) (* y y)) ?x162 (* (- 1) (* y (- 1) x)) ?x195 ?x204 ?x206 (* 2 (* x y)) ?x347 (* (- 1) (* y (- 1) 1)))))
 (let ((?x238 (* 3 ?x221)))
 (let ((?x216 (* x y)))
 (let ((?x237 (* 3 ?x216)))
 (let ((?x205 (* (- 1) ?x204)))
 (let ((?x161 (* (- 1) x)))
 (let ((?x249 (+ 1 ?x161 y (* (- 1) (* y 1)) ?x162 (* (- 1) (* y 1 1)) ?x195 (* (- 1) (* y 1 y)) ?x205 ?x206 ?x237 ?x238)))
 (let (($x89 (= ?x84 0)))
 (and $x89 (or (not (= (* ?x249 ?x84) 0)) (not (= (* ?x360 ?x84) 0))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x291 (lambda ((x Int) (y Int) )(let ((?x70 (* (- 1) x00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x84 (+ x y ?x63 ?x70)))
 (let ((?x221 (* x y y)))
 (let ((?x347 (* (- 3) ?x221)))
 (let ((?x216 (* x y)))
 (let ((?x237 (* 3 ?x216)))
 (let ((?x206 (* x y y y)))
 (let ((?x204 (* y y y)))
 (let ((?x162 (* x x)))
 (let ((?x132 (* y y)))
 (let ((?x358 (* (- 2) ?x132)))
 (let (($x166 (= (* (+ 1 x y ?x358 ?x162 ?x204 ?x206 ?x237 ?x347) ?x84) 0)))
 (let ((?x238 (* 3 ?x221)))
 (let ((?x205 (* (- 1) ?x204)))
 (let ((?x161 (* (- 1) x)))
 (let ((?x276 (* (+ 1 ?x161 (* (- 1) y) ?x358 ?x162 ?x205 ?x206 ?x237 ?x238) ?x84)))
 (let (($x89 (= ?x84 0)))
 (let (($x294 (and $x89 (or (not (= ?x276 0)) (not $x166)))))
 (let ((?x195 (* (- 1) (* y y 1))))
 (let ((?x360 (+ 1 x (* (- 1) ?x132) ?x162 (* (- 1) (* y (- 1) x)) ?x195 ?x204 ?x206 (* 2 ?x216) ?x347 (* (- 1) (* y (- 1) 1)))))
 (let ((?x249 (+ 1 ?x161 y (* (- 1) (* y 1)) ?x162 (* (- 1) (* y 1 1)) ?x195 (* (- 1) (* y 1 y)) ?x205 ?x206 ?x237 ?x238)))
 (let (($x220 (and $x89 (or (not (= (* ?x249 ?x84) 0)) (not (= (* ?x360 ?x84) 0))))))
 (rewrite (= $x220 $x294))))))))))))))))))))))))))
 ))
 (let (($x319 (exists ((x Int) (y Int) )(! (let ((?x70 (* (- 1) x00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x299 (+ x ?x63 ?x70 y)))
 (let ((?x172 (+ (* (+ (- 1) y) (+ (- 1) y)) (* (+ 1 x) (+ 1 x)) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x168 (+ (* (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (and (= ?x299 0) (or (not (= (* ?x168 ?x299) 0)) (not (= (* ?x172 ?x299) 0))))))))) :qid k!27))
 ))
 (let ((?x308 (lambda ((x Int) (y Int) )(let ((?x70 (* (- 1) x00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x84 (+ x y ?x63 ?x70)))
 (let ((?x221 (* x y y)))
 (let ((?x347 (* (- 3) ?x221)))
 (let ((?x206 (* x y y y)))
 (let ((?x204 (* y y y)))
 (let ((?x195 (* (- 1) (* y y 1))))
 (let ((?x162 (* x x)))
 (let ((?x360 (+ 1 x (* (- 1) (* y y)) ?x162 (* (- 1) (* y (- 1) x)) ?x195 ?x204 ?x206 (* 2 (* x y)) ?x347 (* (- 1) (* y (- 1) 1)))))
 (let ((?x238 (* 3 ?x221)))
 (let ((?x216 (* x y)))
 (let ((?x237 (* 3 ?x216)))
 (let ((?x205 (* (- 1) ?x204)))
 (let ((?x161 (* (- 1) x)))
 (let ((?x249 (+ 1 ?x161 y (* (- 1) (* y 1)) ?x162 (* (- 1) (* y 1 1)) ?x195 (* (- 1) (* y 1 y)) ?x205 ?x206 ?x237 ?x238)))
 (let (($x89 (= ?x84 0)))
 (let (($x220 (and $x89 (or (not (= (* ?x249 ?x84) 0)) (not (= (* ?x360 ?x84) 0))))))
 (let ((?x299 (+ x ?x63 ?x70 y)))
 (let ((?x172 (+ (* (+ (- 1) y) (+ (- 1) y)) (* (+ 1 x) (+ 1 x)) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x168 (+ (* (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let (($x333 (and (= ?x299 0) (or (not (= (* ?x168 ?x299) 0)) (not (= (* ?x172 ?x299) 0))))))
 (rewrite (= $x333 $x220)))))))))))))))))))))))))
 ))
 (let (($x60 (exists ((x Int) (y Int) )(! (let ((?x54 (+ (* (- y 1) (- y 1)) (* (+ x 1) (+ x 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let (($x56 (= (* (+ (- (- (+ x 1) y00) x00) (- y 1)) ?x54) 0)))
 (let ((?x42 (+ (* (+ y 1) (+ y 1)) (* (- x 1) (- x 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x44 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x42) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x44) (not $x56))))))) :qid k!27))
 ))
 (let ((?x323 (lambda ((x Int) (y Int) )(let ((?x70 (* (- 1) x00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x299 (+ x ?x63 ?x70 y)))
 (let ((?x172 (+ (* (+ (- 1) y) (+ (- 1) y)) (* (+ 1 x) (+ 1 x)) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x168 (+ (* (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let (($x333 (and (= ?x299 0) (or (not (= (* ?x168 ?x299) 0)) (not (= (* ?x172 ?x299) 0))))))
 (let ((?x54 (+ (* (- y 1) (- y 1)) (* (+ x 1) (+ x 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let (($x56 (= (* (+ (- (- (+ x 1) y00) x00) (- y 1)) ?x54) 0)))
 (let ((?x42 (+ (* (+ y 1) (+ y 1)) (* (- x 1) (- x 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x44 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x42) 0)))
 (let (($x59 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x44) (not $x56)))))
 (rewrite (= $x59 $x333))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x326 (mp (mp @x61 (quant-intro (proof-bind ?x323) (= $x60 $x319)) $x319) (rewrite (= $x319 $x319)) $x319)))
 (let ((@x231 (mp (mp @x326 (quant-intro (proof-bind ?x308) (= $x319 $x284)) $x284) (quant-intro (proof-bind ?x291) (= $x284 $x229)) $x229)))
 (let ((@x88 (mp (mp~ @x231 (sk (~ $x229 $x167)) $x167) (rewrite (= $x167 $x349)) $x349)))
 (let ((@x296 (and-elim @x88 $x242)))
 (let ((@x90 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x242) $x213)) @x296 $x213)))
 (let (($x240 (<= ?x241 0)))
 (let ((@x313 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x242) $x240)) @x296 $x240)))
 (let (($x165 (not (<= ?x141 0))))
 (let (($x193 (>= ?x141 0)))
 (let (($x99 (>= ?x346 0)))
 (let (($x218 (<= ?x346 0)))
 (let ((@x245 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x295 (not $x218) (not $x99))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x218)) @x313 @x90 false) $x218) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x99)) @x313 @x90 false) $x99) $x295)))
 (let ((@x247 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x215 $x165 (not $x193))) (unit-resolution (and-elim @x88 $x332) @x245 $x307) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x193)) @x313 @x90 false) $x193) $x165)))
 ((_ th-lemma arith farkas 1 1 1) @x247 @x313 @x90 false)))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             96
 :arith-nonlinear-bounds    8
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.49
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1057250
 :num-checks                1
 :propagations              14
 :rlimit-count              2023
 :time                      0.01
 :total-time                0.01)
