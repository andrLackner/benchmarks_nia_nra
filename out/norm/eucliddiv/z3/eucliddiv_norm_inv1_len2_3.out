unsat
((set-logic NIA)
(proof
(let (($x51 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (+ q 1)))
 (let ((?x43 (* ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x44 (+ ?x43 y00)))
 (let ((?x45 (- ?x44 y00)))
 (let ((?x46 (- ?x45 ?x43)))
 (let (($x47 (= ?x46 0)))
 (let (($x48 (not $x47)))
 (let (($x49 (or $x48)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x49))))))))))) :qid k!29))
 ))
 (let (($x185 (= $x51 false)))
 (let (($x178 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x184 (elim-unused (= $x178 false))))
 (let (($x181 (= $x51 $x178)))
 (let ((?x244 (lambda ((q Int) (r Int) (y Int) )(let ((?x42 (+ q 1)))
 (let ((?x43 (* ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x44 (+ ?x43 y00)))
 (let ((?x45 (- ?x44 y00)))
 (let ((?x46 (- ?x45 ?x43)))
 (let (($x47 (= ?x46 0)))
 (let (($x48 (not $x47)))
 (let (($x49 (or $x48)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x50 (and $x33 $x41 $x49)))
 (let (($x176 (= $x50 false)))
 (let (($x215 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x76 (= (+ (* (- 1) y00) y) 0)))
 (let (($x238 (and $x76 $x215 false)))
 (let (($x169 (= $x49 false)))
 (let ((@x168 (rewrite (= (or false) false))))
 (let (($x164 (or false)))
 (let (($x165 (= $x49 $x164)))
 (let (($x162 (= $x48 false)))
 (let ((@x161 (rewrite (= (not true) false))))
 (let (($x157 (not true)))
 (let (($x158 (= $x48 $x157)))
 (let (($x155 (= $x47 true)))
 (let ((@x154 (rewrite (= (= 0 0) true))))
 (let (($x150 (= 0 0)))
 (let (($x151 (= $x47 $x150)))
 (let ((?x54 (+ 1 q)))
 (let ((?x188 (* y00 y00 y00 y00 ?x54 ?x54)))
 (let ((?x224 (+ ?x188 (* (- 1) ?x188))))
 (let ((@x61 (rewrite (= ?x42 ?x54))))
 (let ((@x64 (monotonicity @x61 @x61 (= ?x43 (* ?x54 ?x54 y00 y00 y00 y00)))))
 (let ((@x192 (trans @x64 (rewrite (= (* ?x54 ?x54 y00 y00 y00 y00) ?x188)) (= ?x43 ?x188))))
 (let ((@x209 (rewrite (= (- (+ ?x188 y00) y00) (+ (+ ?x188 y00) (* (- 1) y00))))))
 (let ((@x203 (monotonicity (rewrite (= ?x44 (+ ?x188 y00))) (= ?x45 (- (+ ?x188 y00) y00)))))
 (let ((@x219 (trans (trans @x203 @x209 (= ?x45 (+ (+ ?x188 y00) (* (- 1) y00)))) (rewrite (= (+ (+ ?x188 y00) (* (- 1) y00)) ?x188)) (= ?x45 ?x188))))
 (let ((@x228 (trans (monotonicity @x219 @x192 (= ?x46 (- ?x188 ?x188))) (rewrite (= (- ?x188 ?x188) ?x224)) (= ?x46 ?x224))))
 (let ((@x233 (trans (monotonicity (trans @x228 (rewrite (= ?x224 0)) $x47) $x151) @x154 $x155)))
 (let ((@x237 (trans (monotonicity (trans (monotonicity @x233 $x158) @x161 $x162) $x165) @x168 $x169)))
 (let ((@x240 (monotonicity (rewrite (= $x33 $x76)) (rewrite (= $x41 $x215)) @x237 (= $x50 $x238))))
 (trans @x240 (rewrite (= $x238 false)) $x176))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x52 (asserted $x51)))
 (mp @x52 (trans (quant-intro (proof-bind ?x244) $x181) @x184 $x185) false))))))))))

(:max-memory   3.32
 :memory       3.03
 :mk-bool-var  5
 :num-allocs   874533
 :rlimit-count 141
 :time         0.01
 :total-time   0.01)
