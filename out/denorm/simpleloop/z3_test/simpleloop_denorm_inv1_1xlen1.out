unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x125 (* (- 1) x!1)))
 (let ((?x225 (* (- 1) y!0)))
 (let ((?x228 (+ y00 x00 ?x225 ?x125)))
 (let (($x123 (<= ?x228 0)))
 (let (($x230 (= ?x228 0)))
 (let ((?x268 (+ y00 x00 (* 3 (* y00 y!0)) (* y00 y!0 y!0 y!0) ?x225 (* (- 3) (* y!0 y!0 y!0)) (* (- 3) (* y!0 y!0)) (* (- 1) (* y!0 y!0 y!0 y!0)) (* 3 (* x00 y!0)) (* (- 3) (* y!0 y!0 x!1)) (* (- 1) (* y!0 y!0 y!0 x!1)) (* (- 3) (* y!0 x!1)) ?x125 (* 3 (* y00 y!0 y!0)) (* 3 (* x00 y!0 y!0)) (* x00 y!0 y!0 y!0))))
 (let (($x153 (= ?x268 0)))
 (let (($x187 (not $x153)))
 (let (($x235 (and $x230 $x187)))
 (let ((?x211 (* y!0 y!0 y!0 y!0)))
 (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x207 (+ x!1 y!0 ?x48 ?x55 (* x!1 y!0 y!0 y!0) ?x211 (* 3 (* x!1 y!0)) (* 3 (* y!0 y!0)) (* (- 3) (* y!0 y00)) (* (- 3) (* y!0 x00)) (* 3 (* x!1 y!0 y!0)) (* 3 (* y!0 y!0 y!0)) (* (- 3) (* y!0 y!0 y00)) (* (- 3) (* y!0 y!0 x00)) (* (- 1) (* y!0 y!0 y!0 y00)) (* (- 1) (* y!0 y!0 y!0 x00)))))
 (let (($x172 (and (= (+ x!1 y!0 ?x48 ?x55) 0) (not (= ?x207 0)))))
 (let (($x332 (exists ((x Int) (y Int) )(! (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x286 (+ x y ?x48 ?x55 (* x y y y) (* y y y y) (* 3 (* x y)) (* 3 (* y y)) (* (- 3) (* y y00)) (* (- 3) (* y x00)) (* 3 (* x y y)) (* 3 (* y y y)) (* (- 3) (* y y y00)) (* (- 3) (* y y x00)) (* (- 1) (* y y y y00)) (* (- 1) (* y y y x00)))))
 (and (= (+ x y ?x48 ?x55) 0) (not (= ?x286 0)))))) :qid k!26))
 ))
 (let (($x140 (exists ((x Int) (y Int) )(! (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x166 (+ x ?x48 ?x55 y)))
 (let ((?x208 (+ 1 y)))
 (and (= ?x166 0) (not (= (* ?x208 ?x208 ?x208 ?x166) 0))))))) :qid k!26))
 ))
 (let ((?x161 (lambda ((x Int) (y Int) )(let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x286 (+ x y ?x48 ?x55 (* x y y y) (* y y y y) (* 3 (* x y)) (* 3 (* y y)) (* (- 3) (* y y00)) (* (- 3) (* y x00)) (* 3 (* x y y)) (* 3 (* y y y)) (* (- 3) (* y y y00)) (* (- 3) (* y y x00)) (* (- 1) (* y y y y00)) (* (- 1) (* y y y x00)))))
 (let (($x79 (and (= (+ x y ?x48 ?x55) 0) (not (= ?x286 0)))))
 (let ((?x166 (+ x ?x48 ?x55 y)))
 (let ((?x208 (+ 1 y)))
 (let (($x129 (and (= ?x166 0) (not (= (* ?x208 ?x208 ?x208 ?x166) 0)))))
 (rewrite (= $x129 $x79))))))))))
 ))
 (let (($x45 (exists ((x Int) (y Int) )(! (let ((?x39 (+ y 1)))
 (let ((?x40 (* (+ (- (- (- x 1) y00) x00) y 1) (- 1) ?x39 ?x39 ?x39)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)))))) :qid k!26))
 ))
 (let ((?x234 (lambda ((x Int) (y Int) )(let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x166 (+ x ?x48 ?x55 y)))
 (let ((?x208 (+ 1 y)))
 (let (($x129 (and (= ?x166 0) (not (= (* ?x208 ?x208 ?x208 ?x166) 0)))))
 (let ((?x39 (+ y 1)))
 (let ((?x40 (* (+ (- (- (- x 1) y00) x00) y 1) (- 1) ?x39 ?x39 ?x39)))
 (let (($x44 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0))))))
 (rewrite (= $x44 $x129)))))))))))
 ))
 (let ((@x46 (asserted $x45)))
 (let ((@x195 (mp (mp @x46 (quant-intro (proof-bind ?x234) (= $x45 $x140)) $x140) (rewrite (= $x140 $x140)) $x140)))
 (let ((@x137 (mp~ (mp @x195 (quant-intro (proof-bind ?x161) (= $x140 $x332)) $x332) (sk (~ $x332 $x172)) $x172)))
 (let ((@x130 (mp @x137 (rewrite (= $x172 $x235)) $x235)))
 (let ((@x131 (and-elim @x130 $x230)))
 (let ((@x170 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x123)) @x131 $x123)))
 (let (($x221 (>= ?x228 0)))
 (let ((@x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x221)) @x131 $x221)))
 (let (($x173 (not (>= ?x268 0))))
 (let (($x227 (<= ?x268 0)))
 (let ((@x257 (lemma ((_ th-lemma arith) (hypothesis (not $x227)) @x169 @x170 @x169 @x170 false) $x227)))
 (let ((@x260 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x153 (not $x227) $x173)) (and-elim @x130 $x187) (or (not $x227) $x173))))
 ((_ th-lemma arith) (unit-resolution @x260 @x257 $x173) @x169 @x170 @x169 @x170 false))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        7
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             124
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.55
 :memory                    19.13
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                476611
 :num-checks                1
 :propagations              4
 :rlimit-count              1640
 :time                      0.01
 :total-time                0.02)
