unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x115 (* (- 9) n!0)))
 (let ((?x334 (* 18 c!3)))
 (let ((?x381 (* 5 k!2)))
 (let ((?x96 (* k!2 k!2)))
 (let ((?x113 (* (- 1) ?x96)))
 (let ((?x90 (* c!3 n!0)))
 (let ((?x217 (* 9 ?x90)))
 (let ((?x191 (+ ?x217 ?x113 ?x381 ?x334 ?x115)))
 (let (($x267 (<= ?x191 4)))
 (let (($x147 (= ?x191 4)))
 (let ((?x419 (* m!1 m!1)))
 (let ((?x388 (* k!2 n!0)))
 (let ((?x176 (* (- 9) ?x388)))
 (let ((?x249 (* 9 n!0)))
 (let ((?x336 (* (- 27) c!3)))
 (let ((?x168 (* (- 32) k!2)))
 (let ((?x169 (* (- 5) m!1)))
 (let ((?x453 (* (- 9) ?x90)))
 (let ((?x106 (+ 13 ?x453 ?x169 ?x96 ?x168 ?x336 (* 2 (* m!1 k!2)) ?x249 ?x176 ?x419)))
 (let ((?x299 (+ k!2 c!3)))
 (let ((?x396 (+ m!1 k!2)))
 (let ((?x180 (* ?x396 ?x396 ?x299 ?x106)))
 (let (($x457 (= ?x180 0)))
 (let (($x436 (not $x457)))
 (let ((?x309 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x325 (= ?x309 1)))
 (let ((?x302 (* (- 1) ?x388)))
 (let ((?x320 (* (- 2) n!0)))
 (let ((?x317 (* 3 c!3)))
 (let ((?x423 (+ k!2 ?x317 ?x320 ?x302)))
 (let (($x174 (= ?x423 1)))
 (let ((?x120 (+ m!1 (* (- 6) n!0))))
 (let (($x122 (= ?x120 6)))
 (let (($x439 (and $x122 $x147 $x174 $x325 $x436)))
 (let ((?x135 (+ 13 ?x336 ?x168 ?x169 ?x249 ?x96 ?x176 ?x453 (* 2 (* k!2 m!1)) ?x419)))
 (let ((?x327 (+ k!2 m!1)))
 (let (($x425 (and $x122 (= (+ ?x334 ?x381 ?x115 ?x113 ?x217) 4) (= (+ ?x317 k!2 ?x320 ?x302) 1) $x325 (not (= (* ?x327 ?x327 (+ c!3 k!2) ?x135) 0)))))
 (let (($x371 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* ?x72 ?x72 ?x68 ?x476) 0))))))))))))))))) :qid k!34))
 ))
 (let (($x236 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x407 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let (($x481 (not (= (* ?x72 ?x72 ?x68 ?x407) 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x91 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x91 $x289 $x481))))))))))))))))) :qid k!34))
 ))
 (let ((?x386 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x301 (and $x119 $x203 $x255 $x293 (not (= (* ?x72 ?x72 ?x68 ?x476) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x407 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) ?x68)) ?x421 ?x48 ?x78)))
 (let (($x481 (not (= (* ?x72 ?x72 ?x68 ?x407) 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x91 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x98 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x91 $x289 $x481)))
 (rewrite (= $x98 $x301)))))))))))))))))))))))))
 ))
 (let (($x482 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x407 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let (($x481 (not (= (* ?x72 ?x72 ?x68 ?x407) 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x219 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x219 $x159 $x289 $x481))))))))))))) :qid k!34))
 ))
 (let ((?x194 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x407 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let (($x481 (not (= (* ?x72 ?x72 ?x68 ?x407) 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x91 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x98 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x91 $x289 $x481)))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x219 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x227 (and $x119 $x219 $x159 $x289 $x481)))
 (rewrite (= $x227 $x98)))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x75 (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 (+ n 1)))))
 (let ((?x81 (* (+ (- ?x75 (* 5 ?x72)) (* 9 (+ n 1)) ?x78) (- 1) ?x68 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x484 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x407 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let (($x481 (not (= (* ?x72 ?x72 ?x68 ?x407) 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x219 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x227 (and $x119 $x219 $x159 $x289 $x481)))
 (let ((?x75 (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 (+ n 1)))))
 (let ((?x81 (* (+ (- ?x75 (* 5 ?x72)) (* 9 (+ n 1)) ?x78) (- 1) ?x68 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x227)))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x364 (mp (mp @x87 (quant-intro (proof-bind ?x484) (= $x86 $x482)) $x482) (rewrite (= $x482 $x482)) $x482)))
 (let ((@x89 (mp (mp @x364 (quant-intro (proof-bind ?x194) (= $x482 $x236)) $x236) (quant-intro (proof-bind ?x386) (= $x236 $x371)) $x371)))
 (let ((@x273 (mp (mp~ @x89 (sk (~ $x371 $x425)) $x425) (rewrite (= $x425 $x439)) $x439)))
 (let ((@x262 (and-elim @x273 $x147)))
 (let ((@x545 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x147) $x267)) @x262 $x267)))
 (let (($x266 (>= ?x191 4)))
 (let ((@x286 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x147) $x266)) @x262 $x266)))
 (let (($x279 (<= ?x120 6)))
 (let ((@x440 (and-elim @x273 $x122)))
 (let ((@x495 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x122) $x279)) @x440 $x279)))
 (let (($x278 (>= ?x120 6)))
 (let ((@x136 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x122) $x278)) @x440 $x278)))
 (let (($x271 (<= ?x423 1)))
 (let ((@x298 (and-elim @x273 $x174)))
 (let ((@x461 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x174) $x271)) @x298 $x271)))
 (let (($x306 (>= ?x423 1)))
 (let ((@x290 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x174) $x306)) @x298 $x306)))
 (let (($x125 (<= ?x309 1)))
 (let ((@x148 (and-elim @x273 $x325)))
 (let ((@x434 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x125)) @x148 $x125)))
 (let (($x253 (>= ?x309 1)))
 (let ((@x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x253)) @x148 $x253)))
 (let (($x717 (<= ?x299 0)))
 (let (($x760 (not $x717)))
 (let (($x718 (>= ?x299 0)))
 (let (($x632 (<= ?x106 0)))
 (let ((@x579 ((_ th-lemma arith) (hypothesis (not $x632)) @x275 @x434 @x136 @x495 @x275 @x434 @x275 @x434 @x275 @x434 @x136 @x495 @x290 @x461 @x275 @x434 @x286 @x545 @x286 @x545 @x275 @x434 @x136 @x495 @x290 @x461 @x136 @x495 @x290 @x461 false)))
 (let ((@x413 (lemma @x579 $x632)))
 (let (($x741 (not $x718)))
 (let ((@x756 (hypothesis $x741)))
 (let (($x811 (not (>= ?x180 0))))
 (let (($x252 (<= ?x180 0)))
 (let (($x694 (<= k!2 1)))
 (let (($x729 (not $x694)))
 (let (($x700 (= ?x299 0)))
 (let (($x719 (not $x700)))
 (let (($x221 (not $x252)))
 (let ((@x452 (hypothesis $x221)))
 (let ((@x723 ((_ th-lemma arith farkas 1 1 1) @x452 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x719 $x718)) (hypothesis $x700) $x718) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x719 $x717)) (hypothesis $x700) $x717) false)))
 (let ((@x791 (unit-resolution (lemma ((_ th-lemma arith farkas 1 1 1) @x452 (hypothesis $x760) @x413 false) (or $x717 $x252)) @x452 $x717)))
 (let ((@x803 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x700 $x760 $x741)) @x791 (unit-resolution (lemma @x723 (or $x719 $x252)) @x452 $x719) $x741)))
 (let (($x246 (>= k!2 0)))
 (let ((@x456 (hypothesis (not $x246))))
 (let ((?x326 (* n!0 n!0)))
 (let (($x247 (>= ?x326 0)))
 (let ((@x238 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x247)) false) $x247)))
 (let ((@x487 (lemma ((_ th-lemma arith) @x238 @x275 @x456 @x275 @x456 @x238 @x275 @x456 false) $x246)))
 (let ((@x634 (lemma ((_ th-lemma arith gcd-test 1/3 1/3 -1/3 -1/3) @x275 @x434 @x487 (hypothesis (<= k!2 0)) false) (not (<= k!2 0)))))
 (let ((@x799 (lemma ((_ th-lemma arith farkas 3/2 9/2 1/2 1/2 18 1 1) @x495 @x290 @x545 @x413 @x756 @x634 (hypothesis $x694) false) (or $x729 $x718))))
 (let (($x770 (>= ?x388 0)))
 (let (($x459 (>= n!0 (- 1))))
 (let (($x443 (>= m!1 (- 6))))
 (let (($x418 (>= ?x299 (- 5))))
 (let (($x541 (not $x418)))
 (let ((@x437 (hypothesis $x541)))
 (let (($x254 (<= ?x396 0)))
 (let (($x578 (not $x254)))
 (let (($x297 (>= ?x396 0)))
 (let ((@x414 ((_ th-lemma arith) @x452 (hypothesis (not $x297)) @x437 @x275 @x434 @x275 @x434 @x136 @x495 @x275 @x434 @x136 @x495 @x275 @x434 @x286 @x545 @x290 @x461 @x290 @x461 @x275 @x434 @x136 @x495 @x286 @x545 false)))
 (let ((@x606 (lemma ((_ th-lemma arith farkas 1 1 1) @x452 (hypothesis $x297) (hypothesis $x254) false) (or $x578 $x252 (not $x297)))))
 (let ((@x493 (unit-resolution @x606 (unit-resolution (lemma @x414 (or $x418 $x252 $x297)) @x437 @x452 $x297) @x452 $x578)))
 (let ((@x622 ((_ th-lemma arith) @x452 @x493 @x437 @x275 @x434 @x275 @x434 @x136 @x495 @x275 @x434 @x136 @x495 @x286 @x545 @x290 @x461 @x275 @x434 @x136 @x495 @x290 @x461 false)))
 (let (($x547 (not $x443)))
 (let ((@x539 (hypothesis $x547)))
 (let ((@x587 ((_ th-lemma arith) @x487 @x136 @x539 (hypothesis $x418) @x461 @x275 @x136 @x539 false)))
 (let ((@x806 (unit-resolution (lemma @x587 (or $x541 $x443)) (unit-resolution (lemma @x622 (or $x418 $x252)) @x452 $x418) $x443)))
 (let (($x229 (not $x459)))
 (let ((@x124 (hypothesis $x229)))
 (let ((@x494 (hypothesis $x443)))
 (let ((@x546 ((_ th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1 1 1 1) @x452 @x495 @x124 @x136 @x545 @x461 @x494 @x434 @x494 @x495 @x124 @x286 @x290 @x275 false)))
 (let ((@x807 (unit-resolution (lemma @x546 (or $x547 $x252 $x459)) @x806 @x452 $x459)))
 (let ((@x790 (unit-resolution @x799 @x756 $x729)))
 (let ((@x794 (hypothesis (not $x770))))
 (let (($x635 (>= ?x96 0)))
 (let ((@x630 (lemma ((_ th-lemma arith farkas 1 1) (hypothesis (not $x635)) @x634 false) $x635)))
 (let ((@x654 (hypothesis $x459)))
 (let ((@x727 ((_ th-lemma arith farkas -3 -3 -3 -3 -3 -3 -3 -3 -1 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 1) @x756 @x790 @x630 @x286 @x461 @x794 @x756 @x790 @x434 @x654 @x756 @x790 @x630 @x286 @x461 @x794 @x756 @x790 @x654 @x756 @x790 @x630 @x286 @x461 @x794 @x756 @x790 @x790 false)))
 (let ((@x809 ((_ th-lemma arith farkas 1 3/2 1/2 1/2 1) @x807 @x791 @x290 (unit-resolution (lemma @x727 (or $x770 $x718 $x229)) @x803 @x807 $x770) (unit-resolution @x799 @x803 $x729) false)))
 (let ((@x815 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x457 $x221 $x811)) (and-elim @x273 $x436) (or $x221 $x811))))
 (let ((@x816 (unit-resolution @x815 (lemma @x809 $x252) $x811)))
 (let ((@x1094 ((_ th-lemma arith farkas 1 1 1) @x816 (lemma ((_ th-lemma arith farkas 1 1 1) @x816 @x756 @x413 false) $x718) (hypothesis $x717) false)))
 (let ((@x1226 (lemma @x1094 $x760)))
 (let (($x140 (>= n!0 0)))
 (let (($x1210 (>= (+ k!2 ?x317 (* (- 7) n!0) ?x302) 11)))
 (let (($x1095 (not $x1210)))
 (let ((@x280 (hypothesis (not $x140))))
 (let ((@x761 (hypothesis $x760)))
 (let (($x788 (<= ?x299 1)))
 (let (($x797 (not $x788)))
 (let ((@x820 (hypothesis $x788)))
 (let (($x691 (>= (+ ?x90 k!2 (* 2 c!3) ?x320 (* (- 1) ?x326)) 2)))
 (let ((@x825 (hypothesis (not $x691))))
 (let (($x822 (>= m!1 6)))
 (let (($x828 (not $x822)))
 (let ((@x827 ((_ th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1 1 1) @x816 @x136 @x461 @x545 (hypothesis $x822) @x495 @x275 @x238 @x825 @x630 @x286 @x634 @x413 false)))
 (let ((@x833 (unit-resolution (lemma @x827 (or $x828 $x691)) @x825 $x828)))
 (let ((@x860 ((_ th-lemma arith farkas -1/3 -1/9 -1/9 1/18 1/18 1/18 1/18 -1/6 -1/54 1/54 1) @x275 @x634 @x286 @x461 @x634 @x136 @x833 @x761 @x136 @x833 @x825 false)))
 (let ((@x774 ((_ th-lemma arith) (unit-resolution (lemma @x860 (or $x691 $x717)) @x761 $x691) @x634 @x286 @x545 @x761 @x820 @x275 @x434 @x275 @x434 @x286 @x545 @x286 @x545 @x286 @x545 @x275 @x434 @x286 @x545 @x275 @x434 @x286 @x545 @x275 @x434 @x761 @x820 @x275 @x434 @x761 @x820 @x136 @x495 @x275 @x434 @x290 @x461 @x761 @x820 @x286 @x545 @x136 @x495 @x290 @x461 false)))
 (let ((@x1099 (unit-resolution (lemma @x774 (or $x797 $x717)) @x761 $x797)))
 (let ((@x1109 (hypothesis $x1210)))
 (let ((@x1173 ((_ th-lemma arith) @x816 (hypothesis $x578) @x761 @x275 @x434 @x275 @x434 @x275 @x434 @x286 @x545 @x286 @x545 @x290 @x461 @x290 @x461 @x286 @x545 @x290 @x461 @x286 @x545 @x290 @x461 @x275 @x434 @x136 @x495 @x286 @x545 @x275 @x434 @x275 @x434 @x290 @x461 @x290 @x461 @x286 @x545 @x275 @x434 @x275 @x434 @x290 @x461 @x290 @x461 @x136 @x495 @x286 @x545 @x136 @x495 @x286 @x545 false)))
 (let ((@x1114 (unit-resolution (lemma @x1173 (or $x254 $x717)) @x761 $x254)))
 (let ((@x954 ((_ th-lemma arith) @x1099 @x761 @x461 @x634 @x280 @x1109 @x1114 @x461 @x1109 @x1099 @x461 @x136 false)))
 (let ((@x1229 ((_ th-lemma arith farkas -1 6/5 -6/5 1 1) @x1114 @x290 (unit-resolution (lemma @x954 (or $x1095 $x717 $x140)) @x761 @x280 $x1095) @x136 @x634 false)))
 ((_ th-lemma arith) @x816 @x634 (unit-resolution (lemma @x1229 (or $x717 $x140)) @x1226 $x140) @x136 @x1226 @x136 @x495 @x275 @x434 @x290 @x461 @x136 @x495 @x290 @x461 @x136 @x495 @x286 @x545 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 44
 :arith-assert-diseq        16
 :arith-assert-lower        337
 :arith-assert-upper        312
 :arith-bound-prop          8
 :arith-branch-var          28
 :arith-conflicts           46
 :arith-eq-adapter          19
 :arith-fixed-eqs           63
 :arith-gcd-tests           170
 :arith-gomory-cuts         20
 :arith-grobner             40
 :arith-ineq-splits         28
 :arith-max-min             2222
 :arith-nonlinear-bounds    111
 :arith-nonlinear-horner    344
 :arith-num-rows            11
 :arith-offset-eqs          2
 :arith-patches             55
 :arith-pivots              817
 :arith-pseudo-nonlinear    46
 :arith-row-summations      3929
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    11
 :conflicts                 49
 :decisions                 245
 :del-clause                124
 :final-checks              161
 :max-memory                3.87
 :memory                    3.27
 :minimized-lits            9
 :mk-bool-var               211
 :mk-clause                 149
 :num-allocs                3036294
 :num-checks                1
 :propagations              171
 :rlimit-count              219886
 :time                      0.05
 :total-time                0.05)
