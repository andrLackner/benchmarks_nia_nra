unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x70 (* y00 q00)))
 (let ((?x453 (+ r00 ?x70 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x579 (>= ?x453 0)))
 (let (($x474 (= ?x453 0)))
 (let ((?x520 (* y00 y00 y00 y00)))
 (let ((?x233 (* (- 1) (* y00 y00 y00))))
 (let ((?x379 (* y00 y00 y00 y00 y00)))
 (let ((?x269 (* y00 y00 y00 y00 y00 y00)))
 (let ((?x195 (+ (* 3 (* y00 y00 r!1 r!1)) (* 2 (* y00 y00 r!1 q!2 q!2)) (* y00 y00 y00 y00 q!2) (* (- 3) (* y00 y00 y00 y00 y00 r!1)) (* (- 3) (* y00 y00 y00 y00 y00 r!1 q!2)) (* y00 y00 y00 y00 y00 y00 q!2) (* (- 3) (* y00 y00 y00 y00 r!1)) (* (- 2) (* y00 y00 y00 q!2)) (* (- 1) (* y00 r!1 r!1 r!1)) ?x269 ?x379 (* (- 1) (* y00 r!1 r!1 q!2 q!2)) ?x233 (* (- 1) (* y00 y00 y00 r!1 r!1 r!1)) (* 3 (* y00 y00 y00 y00 r!1 r!1)) (* (- 1) (* y00 y00 y00 r!1 r!1 r!1 q!2)) (* 3 (* y00 y00 y00 y00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 y00 q!2 q!2)) (* (- 1) (* y00 r!1 r!1)) (* (- 2) (* y00 r!1 r!1 q!2)) (* (- 1) (* y00 r!1 r!1 r!1 q!2)) ?x520 (* 4 (* y00 y00 r!1 q!2)) (* (- 3) (* y00 y00 y00 r!1 q!2)) (* 3 (* y00 y00 r!1 r!1 q!2)) (* 3 (* y00 y00 y00 r!1 r!1)) (* 2 (* y00 y00 r!1)) (* (- 1) (* y00 y00 r!1 r!1 r!1)) (* (- 3) (* y00 y00 y00 r!1)))))
 (let ((?x278 (* ?x195 (+ (* (- 1) r00) (* (- 1) ?x70) (* y00 q!2) r!1))))
 (let (($x408 (= ?x278 0)))
 (let (($x252 (not $x408)))
 (let (($x405 (and (= (+ y00 (* (- 1) y!0)) 0) $x474 $x252)))
 (let ((?x80 (* (- 1) ?x70)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x129 (+ r!1 ?x66 (* q!2 y00) ?x80)))
 (let ((?x92 (+ (* (- 1) (* q!2 q!2 y00 y00 y00)) (* (- 1) (* r!1 r!1 y00)) (* (- 2) (* q!2 r!1 r!1 y00)) (* (- 1) (* q!2 q!2 r!1 r!1 y00)) (* (- 1) (* r!1 r!1 r!1 y00 y00 y00)) (* (- 1) (* q!2 r!1 r!1 r!1 y00 y00 y00)) (* 3 (* r!1 r!1 y00 y00 y00 y00)) (* 3 (* q!2 r!1 r!1 y00 y00 y00 y00)) (* 2 (* q!2 q!2 r!1 y00 y00)) (* (- 3) (* r!1 y00 y00 y00 y00 y00)) (* (- 3) (* q!2 r!1 y00 y00 y00 y00 y00)) ?x269 (* q!2 y00 y00 y00 y00 y00 y00) (* 2 (* r!1 y00 y00)) (* (- 1) (* r!1 r!1 r!1 y00 y00)) (* 3 (* r!1 r!1 y00 y00 y00)) (* (- 3) (* r!1 y00 y00 y00 y00)) ?x379 ?x233 (* (- 2) (* q!2 y00 y00 y00)) (* (- 1) (* r!1 r!1 r!1 y00)) (* (- 1) (* q!2 r!1 r!1 r!1 y00)) (* 3 (* r!1 r!1 y00 y00)) (* 3 (* q!2 r!1 r!1 y00 y00)) (* (- 3) (* r!1 y00 y00 y00)) (* (- 3) (* q!2 r!1 y00 y00 y00)) ?x520 (* q!2 y00 y00 y00 y00) (* 4 (* q!2 r!1 y00 y00)))))
 (let (($x521 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x129 0) (not (= (* ?x92 ?x129) 0)))))
 (let (($x377 (exists ((q Int) (r Int) (y Int) )(! (let ((?x70 (* y00 q00)))
 (let ((?x80 (* (- 1) ?x70)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x94 (+ r ?x66 ?x39 ?x80)))
 (let ((?x524 (* q y00 y00 y00 y00)))
 (let ((?x520 (* y00 y00 y00 y00)))
 (let ((?x571 (* (- 3) (* q r y00 y00 y00))))
 (let ((?x568 (* (- 3) (* r y00 y00 y00))))
 (let ((?x565 (* 3 (* q r r y00 y00))))
 (let ((?x562 (* 3 (* r r y00 y00))))
 (let ((?x552 (* (- 1) (* q r r r y00))))
 (let ((?x551 (* (- 1) (* r r r y00))))
 (let ((?x233 (* (- 1) (* y00 y00 y00))))
 (let ((?x379 (* y00 y00 y00 y00 y00)))
 (let ((?x414 (* (- 3) (* r y00 y00 y00 y00))))
 (let ((?x411 (* 3 (* r r y00 y00 y00))))
 (let ((?x404 (* (- 1) (* r r r y00 y00))))
 (let ((?x273 (* q y00 y00 y00 y00 y00 y00)))
 (let ((?x269 (* y00 y00 y00 y00 y00 y00)))
 (let ((?x322 (* (- 3) (* q r y00 y00 y00 y00 y00))))
 (let ((?x319 (* (- 3) (* r y00 y00 y00 y00 y00))))
 (let ((?x316 (* 3 (* q r r y00 y00 y00 y00))))
 (let ((?x313 (* 3 (* r r y00 y00 y00 y00))))
 (let ((?x303 (* (- 1) (* q r r r y00 y00 y00))))
 (let ((?x302 (* (- 1) (* r r r y00 y00 y00))))
 (let ((?x147 (* (- 1) (* q q r r y00))))
 (let ((?x141 (* (- 1) (* r r y00))))
 (let ((?x805 (+ (* (- 1) (* q q y00 y00 y00)) ?x141 (* (- 2) (* q r r y00)) ?x147 ?x302 ?x303 ?x313 ?x316 (* 2 (* q q r y00 y00)) ?x319 ?x322 ?x269 ?x273 (* 2 (* r y00 y00)) ?x404 ?x411 ?x414 ?x379 ?x233 (* (- 2) (* q y00 y00 y00)) ?x551 ?x552 ?x562 ?x565 ?x568 ?x571 ?x520 ?x524 (* 4 (* q r y00 y00)))))
 (let (($x99 (= ?x94 0)))
 (let (($x76 (= (+ y (* (- 1) y00)) 0)))
 (and $x76 $x99 (not (= (* ?x805 ?x94) 0)))))))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x558 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x355 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x560 (* (- 1) (* y00 (+ 1 q) (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x533 (* (- 1) (* y00 y00 (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x351 (+ r ?x65)))
 (let ((?x387 (+ 1 q)))
 (let ((?x574 (+ (* (- 1) (* y00 ?x387 ?x387 ?x351 ?x351)) (* (- 1) (* y00 y00 y00 ?x387 ?x351 ?x351 ?x351)) ?x533 ?x560)))
 (let (($x353 (not (= (* ?x574 (+ r ?x65 ?x66 ?x355 (* y00 ?x387))) 0))))
 (let (($x375 (= (+ r ?x66 ?x355 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x375 $x353)))))))))))) :qid k!29))
 ))
 (let ((?x336 (lambda ((q Int) (r Int) (y Int) )(let ((?x70 (* y00 q00)))
 (let ((?x80 (* (- 1) ?x70)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x94 (+ r ?x66 ?x39 ?x80)))
 (let ((?x524 (* q y00 y00 y00 y00)))
 (let ((?x520 (* y00 y00 y00 y00)))
 (let ((?x571 (* (- 3) (* q r y00 y00 y00))))
 (let ((?x568 (* (- 3) (* r y00 y00 y00))))
 (let ((?x565 (* 3 (* q r r y00 y00))))
 (let ((?x562 (* 3 (* r r y00 y00))))
 (let ((?x552 (* (- 1) (* q r r r y00))))
 (let ((?x551 (* (- 1) (* r r r y00))))
 (let ((?x233 (* (- 1) (* y00 y00 y00))))
 (let ((?x379 (* y00 y00 y00 y00 y00)))
 (let ((?x414 (* (- 3) (* r y00 y00 y00 y00))))
 (let ((?x411 (* 3 (* r r y00 y00 y00))))
 (let ((?x404 (* (- 1) (* r r r y00 y00))))
 (let ((?x273 (* q y00 y00 y00 y00 y00 y00)))
 (let ((?x269 (* y00 y00 y00 y00 y00 y00)))
 (let ((?x322 (* (- 3) (* q r y00 y00 y00 y00 y00))))
 (let ((?x319 (* (- 3) (* r y00 y00 y00 y00 y00))))
 (let ((?x316 (* 3 (* q r r y00 y00 y00 y00))))
 (let ((?x313 (* 3 (* r r y00 y00 y00 y00))))
 (let ((?x303 (* (- 1) (* q r r r y00 y00 y00))))
 (let ((?x302 (* (- 1) (* r r r y00 y00 y00))))
 (let ((?x147 (* (- 1) (* q q r r y00))))
 (let ((?x141 (* (- 1) (* r r y00))))
 (let ((?x805 (+ (* (- 1) (* q q y00 y00 y00)) ?x141 (* (- 2) (* q r r y00)) ?x147 ?x302 ?x303 ?x313 ?x316 (* 2 (* q q r y00 y00)) ?x319 ?x322 ?x269 ?x273 (* 2 (* r y00 y00)) ?x404 ?x411 ?x414 ?x379 ?x233 (* (- 2) (* q y00 y00 y00)) ?x551 ?x552 ?x562 ?x565 ?x568 ?x571 ?x520 ?x524 (* 4 (* q r y00 y00)))))
 (let (($x99 (= ?x94 0)))
 (let (($x76 (= (+ y (* (- 1) y00)) 0)))
 (let (($x814 (and $x76 $x99 (not (= (* ?x805 ?x94) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x355 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x560 (* (- 1) (* y00 (+ 1 q) (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x533 (* (- 1) (* y00 y00 (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x351 (+ r ?x65)))
 (let ((?x387 (+ 1 q)))
 (let ((?x574 (+ (* (- 1) (* y00 ?x387 ?x387 ?x351 ?x351)) (* (- 1) (* y00 y00 y00 ?x387 ?x351 ?x351 ?x351)) ?x533 ?x560)))
 (let (($x353 (not (= (* ?x574 (+ r ?x65 ?x66 ?x355 (* y00 ?x387))) 0))))
 (let (($x375 (= (+ r ?x66 ?x355 (* y00 q)) 0)))
 (let (($x368 (and (= (+ y00 (* (- 1) y)) 0) $x375 $x353)))
 (rewrite (= $x368 $x814))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x354 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x355 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x560 (* (- 1) (* y00 (+ 1 q) (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x533 (* (- 1) (* y00 y00 (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x351 (+ r ?x65)))
 (let ((?x387 (+ 1 q)))
 (let ((?x574 (+ (* (- 1) (* y00 ?x387 ?x387 ?x351 ?x351)) (* (- 1) (* y00 y00 y00 ?x387 ?x351 ?x351 ?x351)) ?x533 ?x560)))
 (let (($x353 (not (= (* ?x574 (+ r ?x65 ?x66 ?x355 (* y00 ?x387))) 0))))
 (let (($x375 (= (+ r ?x66 ?x355 (* y00 q)) 0)))
 (and (= (+ ?x65 y) 0) $x375 $x353)))))))))))) :qid k!29))
 ))
 (let ((?x559 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x355 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x560 (* (- 1) (* y00 (+ 1 q) (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x533 (* (- 1) (* y00 y00 (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x351 (+ r ?x65)))
 (let ((?x387 (+ 1 q)))
 (let ((?x574 (+ (* (- 1) (* y00 ?x387 ?x387 ?x351 ?x351)) (* (- 1) (* y00 y00 y00 ?x387 ?x351 ?x351 ?x351)) ?x533 ?x560)))
 (let (($x353 (not (= (* ?x574 (+ r ?x65 ?x66 ?x355 (* y00 ?x387))) 0))))
 (let (($x375 (= (+ r ?x66 ?x355 (* y00 q)) 0)))
 (let (($x368 (and (= (+ y00 (* (- 1) y)) 0) $x375 $x353)))
 (let (($x372 (and (= (+ ?x65 y) 0) $x375 $x353)))
 (rewrite (= $x372 $x368))))))))))))))))
 ))
 (let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (- (* (- 1) ?x45 ?x45 ?x42 ?x42 y00) (* ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let ((?x54 (- (- ?x52 (* ?x42 ?x42 ?x42 y00 y00)) (* ?x45 ?x42 ?x42 ?x42 y00))))
 (let (($x56 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x54) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x56)))))))) :qid k!29))
 ))
 (let ((?x357 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x355 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x560 (* (- 1) (* y00 (+ 1 q) (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x533 (* (- 1) (* y00 y00 (+ r ?x65) (+ r ?x65) (+ r ?x65)))))
 (let ((?x351 (+ r ?x65)))
 (let ((?x387 (+ 1 q)))
 (let ((?x574 (+ (* (- 1) (* y00 ?x387 ?x387 ?x351 ?x351)) (* (- 1) (* y00 y00 y00 ?x387 ?x351 ?x351 ?x351)) ?x533 ?x560)))
 (let (($x353 (not (= (* ?x574 (+ r ?x65 ?x66 ?x355 (* y00 ?x387))) 0))))
 (let (($x375 (= (+ r ?x66 ?x355 (* y00 q)) 0)))
 (let (($x372 (and (= (+ ?x65 y) 0) $x375 $x353)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (- (* (- 1) ?x45 ?x45 ?x42 ?x42 y00) (* ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let ((?x54 (- (- ?x52 (* ?x42 ?x42 ?x42 y00 y00)) (* ?x45 ?x42 ?x42 ?x42 y00))))
 (let (($x57 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x54) 0))))
 (let (($x59 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x57))))
 (rewrite (= $x59 $x372)))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x555 (mp (mp @x61 (quant-intro (proof-bind ?x357) (= $x60 $x354)) $x354) (rewrite (= $x354 $x354)) $x354)))
 (let ((@x294 (mp (mp @x555 (quant-intro (proof-bind ?x559) (= $x354 $x558)) $x558) (quant-intro (proof-bind ?x336) (= $x558 $x377)) $x377)))
 (let ((@x435 (mp (mp~ @x294 (sk (~ $x377 $x521)) $x521) (rewrite (= $x521 $x405)) $x405)))
 (let ((@x467 (and-elim @x435 $x474)))
 (let ((@x230 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x474) $x579)) @x467 $x579)))
 (let (($x338 (<= ?x453 0)))
 (let ((@x490 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x474) $x338)) @x467 $x338)))
 (let (($x413 (not (<= ?x278 0))))
 (let (($x557 (>= ?x278 0)))
 (let ((@x212 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x408 $x413 (not $x557))) (and-elim @x435 $x252) (or $x413 (not $x557)))))
 (let ((@x409 (unit-resolution @x212 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x557)) @x490 @x230 false) $x557) $x413)))
 ((_ th-lemma arith farkas 1 1 1) @x409 @x490 @x230 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             150
 :arith-nonlinear-bounds    8
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 48
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.61
 :memory                    3.15
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1085920
 :num-checks                1
 :propagations              6
 :rlimit-count              3432
 :time                      0.01
 :total-time                0.01)
