unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x429 (* (- 1) k!2)))
 (let ((?x427 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x429)))
 (let (($x703 (<= ?x427 (- 1))))
 (let (($x409 (= ?x427 (- 1))))
 (let ((?x108 (+ k!2 c!3)))
 (let ((?x218 (+ m!1 k!2)))
 (let ((?x507 (+ 6 m!1)))
 (let ((?x504 (+ 1 n!0)))
 (let ((?x715 (+ (* 13 (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108)) (* 32 (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 k!2)) (* 9 (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 c!3 n!0)) (* (- 13) (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108)) (* 2 (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 k!2 m!1)) (* (- 32) (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 k!2)) (* (- 2) (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 k!2 m!1)) (* (- 27) (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 c!3)) (* (- 1) (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 k!2 k!2)) (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 k!2 k!2) (* 5 (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 m!1)) (* (- 5) (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 m!1)) (* (- 9) (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 n!0)) (* 9 (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 k!2 n!0)) (* (- 9) (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 c!3 n!0)) (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 m!1 m!1) (* (- 1) (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 m!1 m!1)) (* (- 9) (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 k!2 n!0)) (* 9 (* ?x507 ?x507 ?x507 ?x218 ?x218 ?x108 ?x108 n!0)) (* 27 (* ?x504 ?x504 ?x504 ?x507 ?x218 ?x218 ?x108 c!3)))))
 (let (($x341 (= ?x715 0)))
 (let (($x754 (not $x341)))
 (let ((?x245 (+ (* 2 n!0) ?x429 (* (- 3) c!3) (* n!0 k!2))))
 (let (($x144 (= ?x245 (- 1))))
 (let ((?x416 (* k!2 k!2)))
 (let ((?x161 (+ (* 9 n!0) (* (- 5) k!2) ?x416 (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x303 (= ?x161 (- 4))))
 (let ((?x149 (+ m!1 (* (- 6) n!0))))
 (let (($x511 (= ?x149 6)))
 (let (($x603 (and $x511 $x303 $x144 $x409 $x754)))
 (let ((?x759 (+ c!3 k!2)))
 (let ((?x418 (+ k!2 m!1)))
 (let ((?x238 (+ (* 32 (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 k!2)) (* 13 (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759)) (* (- 9) (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 n!0)) (* 5 (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 m!1)) (* 9 (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 n!0)) (* (- 13) (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759)) (* (- 2) (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 k!2 m!1)) (* (- 1) (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 m!1 m!1)) (* 2 (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 k!2 m!1)) (* 27 (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 c!3)) (* (- 5) (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 m!1)) (* 9 (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 k!2 n!0)) (* 9 (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 c!3 n!0)) (* (- 32) (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 k!2)) (* (- 1) (* ?x504 ?x504 ?x504 ?x507 ?x418 ?x418 ?x759 k!2 k!2)) (* (- 9) (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 k!2 n!0)) (* (- 27) (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 c!3)) (* (- 9) (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 c!3 n!0)) (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 k!2 k!2) (* ?x507 ?x507 ?x507 ?x418 ?x418 ?x759 ?x759 m!1 m!1))))
 (let (($x587 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x379 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x416) (* 9 (* c!3 n!0)))))
 (let (($x592 (and $x511 (= ?x379 4) $x587 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x238 0)))))
 (let (($x235 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x304 (+ (* 32 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k)) (* 13 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68)) (* (- 9) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 n)) (* 5 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 m)) (* 9 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 n)) (* (- 13) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68)) (* (- 2) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k m)) (* (- 1) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 m m)) (* 2 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k m)) (* 27 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 c)) (* (- 5) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 m)) (* 9 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k n)) (* 9 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 c n)) (* (- 32) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k)) (* (- 1) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k k)) (* (- 9) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k n)) (* (- 27) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 c)) (* (- 9) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 c n)) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k k) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 m m))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= ?x304 0))))))))))))))))) :qid k!34))
 ))
 (let (($x508 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68)) ?x195) ?x142) 0)))
 (let (($x373 (not $x158)))
 (let (($x348 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x227 $x348 $x373)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x285 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x304 (+ (* 32 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k)) (* 13 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68)) (* (- 9) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 n)) (* 5 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 m)) (* 9 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 n)) (* (- 13) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68)) (* (- 2) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k m)) (* (- 1) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 m m)) (* 2 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k m)) (* 27 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 c)) (* (- 5) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 m)) (* 9 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k n)) (* 9 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 c n)) (* (- 32) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k)) (* (- 1) (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68 k k)) (* (- 9) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k n)) (* (- 27) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 c)) (* (- 9) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 c n)) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 k k) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68 m m))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x402 (and $x123 $x207 $x259 $x297 (not (= ?x304 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* ?x340 ?x68)) (* (- 5) m) ?x48 ?x78)))
 (let ((?x195 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68)) ?x195) ?x142) 0)))
 (let (($x373 (not $x158)))
 (let (($x348 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x233 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x227 $x348 $x373)))
 (rewrite (= $x233 $x402))))))))))))))))))))))))))))
 ))
 (let (($x374 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68)) ?x195) ?x142) 0)))
 (let (($x373 (not $x158)))
 (let (($x348 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x790 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x614 (= (+ ?x189 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x614 $x790 $x348 $x373)))))))))))))))) :qid k!34))
 ))
 (let ((?x742 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68)) ?x195) ?x142) 0)))
 (let (($x373 (not $x158)))
 (let (($x348 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x233 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x227 $x348 $x373)))
 (let (($x790 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x614 (= (+ ?x189 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x384 (and $x123 $x614 $x790 $x348 $x373)))
 (rewrite (= $x384 $x233))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x68 ?x72 ?x72 ?x81 ?x81 ?x81) (* ?x68 ?x72 ?x72 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x84) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x377 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x340 ?x340 ?x487 ?x72 ?x72 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x68 ?x68)) ?x195) ?x142) 0)))
 (let (($x373 (not $x158)))
 (let (($x348 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x790 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x614 (= (+ ?x189 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x384 (and $x123 $x614 $x790 $x348 $x373)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x68 ?x72 ?x72 ?x81 ?x81 ?x81) (* ?x68 ?x72 ?x72 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x84) 0))))))
 (rewrite (= $x89 $x384))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x135 (mp (mp @x91 (quant-intro (proof-bind ?x377) (= $x90 $x374)) $x374) (rewrite (= $x374 $x374)) $x374)))
 (let ((@x141 (mp (mp @x135 (quant-intro (proof-bind ?x742) (= $x374 $x508)) $x508) (quant-intro (proof-bind ?x285) (= $x508 $x235)) $x235)))
 (let ((@x747 (mp (mp~ @x141 (sk (~ $x235 $x592)) $x592) (rewrite (= $x592 $x603)) $x603)))
 (let ((@x539 (and-elim @x747 $x409)))
 (let ((@x204 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x409) $x703)) @x539 $x703)))
 (let (($x223 (>= ?x427 (- 1))))
 (let ((@x339 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x409) $x223)) @x539 $x223)))
 (let (($x439 (<= ?x149 6)))
 (let ((@x553 (and-elim @x747 $x511)))
 (let ((@x352 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x511) $x439)) @x553 $x439)))
 (let (($x413 (>= ?x149 6)))
 (let ((@x588 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x511) $x413)) @x553 $x413)))
 (let (($x220 (<= ?x161 (- 4))))
 (let ((@x153 (and-elim @x747 $x303)))
 (let ((@x127 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x303) $x220)) @x153 $x220)))
 (let (($x107 (>= ?x161 (- 4))))
 (let ((@x764 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x303) $x107)) @x153 $x107)))
 (let (($x283 (<= ?x245 (- 1))))
 (let ((@x782 (and-elim @x747 $x144)))
 (let ((@x117 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x144) $x283)) @x782 $x283)))
 (let (($x193 (>= ?x245 (- 1))))
 (let ((@x93 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x144) $x193)) @x782 $x193)))
 (let (($x472 (not (<= ?x715 0))))
 (let (($x684 (>= ?x715 0)))
 (let ((@x320 ((_ th-lemma arith) (hypothesis (not $x684)) @x339 @x204 @x588 @x352 @x339 @x204 @x93 @x117 @x339 @x204 @x339 @x204 @x93 @x117 @x93 @x117 @x764 @x127 @x588 @x352 @x588 @x352 @x339 @x204 false)))
 (let ((@x492 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x341 $x472 (not $x684))) (and-elim @x747 $x754) (or $x472 (not $x684)))))
 ((_ th-lemma arith) (unit-resolution @x492 (lemma @x320 $x684) $x472) @x339 @x204 @x588 @x352 @x339 @x204 @x93 @x117 @x339 @x204 @x339 @x204 @x93 @x117 @x93 @x117 @x764 @x127 @x588 @x352 @x588 @x352 @x339 @x204 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        31
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           13
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             228
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      14
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 23
 :del-clause                16
 :final-checks              8
 :max-memory                3.65
 :memory                    3.15
 :mk-bool-var               43
 :mk-clause                 16
 :num-allocs                1515187
 :num-checks                1
 :propagations              10
 :rlimit-count              11186
 :time                      0.02
 :total-time                0.02)
