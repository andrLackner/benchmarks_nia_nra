unsat
((set-logic NIA)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(proof
(let ((?x248 (* (- 1) k!10)))
 (let ((?x228 (* (- 1) k!00)))
 (let ((?x97 (* u!5 x!3)))
 (let ((?x582 (+ ?x97 ?x228 ?x248 (* y!2 v!4))))
 (let ((?x610 (* y!2 y!2 y!2 x!3 v!4 v!4 v!4)))
 (let ((?x604 (* (- 1) (* u!5 u!5 u!5 y!2 y!2 x!3 v!4 v!4))))
 (let ((?x467 (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2)))
 (let ((?x452 (* (- 1) (* u!5 u!5 u!5 y!2 y!2 y!2 y!2))))
 (let ((?x121 (* (- 1) (* u!5 u!5 y!2))))
 (let ((?x119 (* u!5 u!5 x!3)))
 (let ((?x634 (+ ?x119 ?x121 ?x452 ?x467 (* (- 3) (* u!5 u!5 y!2 y!2 y!2 y!2 v!4)) (* 2 (* u!5 u!5 u!5 u!5 y!2 y!2 y!2 v!4)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 x!3)) (* (- 2) (* u!5 u!5 u!5 u!5 y!2 y!2 x!3 v!4)) ?x604 (* u!5 u!5 u!5 y!2 y!2 y!2 x!3) (* 3 (* u!5 u!5 y!2 y!2 y!2 x!3 v!4)) (* 3 (* u!5 y!2 y!2 y!2 x!3 v!4 v!4)) ?x610 (* (- 3) (* u!5 y!2 y!2 y!2 y!2 v!4 v!4)) (* (- 1) (* y!2 y!2 y!2 y!2 v!4 v!4 v!4)) (* u!5 u!5 u!5 y!2 y!2 y!2 v!4 v!4))))
 (let (($x594 (= (* ?x634 ?x582) 0)))
 (let (($x605 (<= ?x582 0)))
 (let (($x588 (= ?x582 0)))
 (let ((?x682 (+ ?x119 (* (- 1) (* x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4)) (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4)) (* (- 3) (* u!5 u!5 y!2 y!2 x!3 v!4 v!4 v!4)) ?x604 (* (- 1) (* y!2 y!2 x!3 v!4 v!4 v!4 v!4 v!4)) (* (- 3) (* u!5 y!2 y!2 x!3 v!4 v!4 v!4 v!4)) (* 2 (* u!5 x!3 v!4)) ?x610 (* x!3 v!4 v!4) (* 3 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4)) (* (- 3) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4)) (* (- 1) (* u!5 u!5 u!5 x!3 x!3 x!3 v!4 v!4)) (* 6 (* u!5 u!5 y!2 x!3 x!3 v!4 v!4 v!4)) (* 2 (* u!5 u!5 u!5 y!2 x!3 x!3 v!4 v!4)) (* (- 3) (* u!5 x!3 x!3 x!3 v!4 v!4 v!4 v!4)) (* (- 3) (* u!5 u!5 x!3 x!3 x!3 v!4 v!4 v!4)) (* 2 (* y!2 x!3 x!3 v!4 v!4 v!4 v!4 v!4)) (* 6 (* u!5 y!2 x!3 x!3 v!4 v!4 v!4 v!4)))))
 (let ((?x540 (* ?x682 ?x582)))
 (let (($x603 (= ?x540 0)))
 (let (($x611 (or (not $x594) (not $x603))))
 (let (($x710 (and $x588 $x611)))
 (let ((?x98 (+ ?x97 (* v!4 y!2) ?x228 ?x248)))
 (let ((?x446 (* v!4 v!4 v!4 x!3 y!2 y!2 y!2)))
 (let ((?x117 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2))))
 (let ((?x704 (+ ?x117 ?x119 ?x446 (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 y!2 y!2)) (* 2 (* u!5 v!4 x!3)) (* v!4 v!4 x!3) (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3)) (* 3 (* v!4 v!4 v!4 x!3 x!3 x!3 y!2)) (* (- 3) (* v!4 v!4 v!4 x!3 x!3 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3)) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3)) (* (- 3) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)) (* 2 (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) (* 6 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2)) (* 6 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2)) (* 2 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2)))))
 (let ((?x465 (+ (* 2 (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* (- 2) (* u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) ?x117 ?x119 ?x121 (* u!5 u!5 u!5 x!3 y!2 y!2 y!2) (* 3 (* u!5 u!5 v!4 x!3 y!2 y!2 y!2)) (* 3 (* u!5 v!4 v!4 x!3 y!2 y!2 y!2)) ?x446 ?x452 (* (- 3) (* u!5 u!5 v!4 y!2 y!2 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 y!2 y!2 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 y!2 y!2 y!2 y!2)) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2) ?x467)))
 (let (($x554 (and (= ?x98 0) (or (not (= (* ?x465 ?x98) 0)) (not (= (* ?x704 ?x98) 0))))))
 (let (($x266 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x248 (* (- 1) k!10)))
 (let ((?x228 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x85 (+ ?x33 ?x34 ?x228 ?x248)))
 (let ((?x434 (* (- 3) (* v v v x x y y))))
 (let ((?x433 (* 3 (* v v v x x x y))))
 (let ((?x390 (* (- 1) (* v v v x x x x))))
 (let ((?x356 (* v v x)))
 (let ((?x366 (* 2 (* u v x))))
 (let ((?x343 (* (- 1) (* v v v v v x y y))))
 (let ((?x195 (* v v v x y y y)))
 (let ((?x171 (* u u x)))
 (let ((?x154 (* (- 1) (* u u u v v x y y))))
 (let ((?x931 (+ ?x154 ?x171 ?x195 (* (- 3) (* u u v v v x y y)) (* (- 3) (* u v v v v x y y)) ?x343 ?x366 ?x356 ?x390 ?x433 ?x434 (* (- 1) (* u u u v v x x x)) (* (- 3) (* u u v v v x x x)) (* (- 3) (* u v v v v x x x)) (* (- 1) (* v v v v v x x x)) (* 2 (* u u u v v x x y)) (* 6 (* u u v v v x x y)) (* 6 (* u v v v v x x y)) (* 2 (* v v v v v x x y)))))
 (let ((?x262 (* (- 1) (* v v v y y y y))))
 (let ((?x273 (* (- 3) (* u v v y y y y))))
 (let ((?x272 (* (- 3) (* u u v y y y y))))
 (let ((?x218 (* (- 1) (* u u u y y y y))))
 (let ((?x270 (* 3 (* u v v x y y y))))
 (let ((?x269 (* 3 (* u u v x y y y))))
 (let ((?x188 (* u u u x y y y)))
 (let ((?x179 (* (- 1) (* u u y))))
 (let ((?x148 (* (- 1) (* u u u u u x y y))))
 (let ((?x496 (+ (* 2 (* u u u u v y y y)) ?x148 (* (- 2) (* u u u u v x y y)) ?x154 ?x171 ?x179 ?x188 ?x269 ?x270 ?x195 ?x218 ?x272 ?x273 ?x262 (* u u u v v y y y) (* u u u u u y y y))))
 (and (= ?x85 0) (or (not (= (* ?x496 ?x85) 0)) (not (= (* ?x931 ?x85) 0))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x214 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x248 (* (- 1) k!10)))
 (let ((?x167 (* (- 1) x)))
 (let ((?x200 (+ y ?x167)))
 (let ((?x239 (* ?x200 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x228 (* (- 1) k!00)))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x287 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x200 ?x200 x v v)) ?x62 (* ?x200 ?x200 ?x200 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x222 (+ x ?x84)))
 (let ((?x227 (* ?x222 u)))
 (let ((?x265 (+ (* (- 1) (* ?x44 ?x44 ?x222 y y u u u)) (* ?x222 u u) (* ?x44 ?x44 ?x44 ?x222 y y y))))
 (let (($x90 (or (not (= (* ?x265 (+ ?x228 ?x227 ?x45 ?x248)) 0)) (not (= (* ?x287 (+ ?x228 ?x56 ?x239 ?x248)) 0)))))
 (let ((?x197 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x197 0) $x90)))))))))))))))))) :qid k!29))
 ))
 (let ((?x286 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x248 (* (- 1) k!10)))
 (let ((?x228 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x85 (+ ?x33 ?x34 ?x228 ?x248)))
 (let ((?x434 (* (- 3) (* v v v x x y y))))
 (let ((?x433 (* 3 (* v v v x x x y))))
 (let ((?x390 (* (- 1) (* v v v x x x x))))
 (let ((?x356 (* v v x)))
 (let ((?x366 (* 2 (* u v x))))
 (let ((?x343 (* (- 1) (* v v v v v x y y))))
 (let ((?x195 (* v v v x y y y)))
 (let ((?x171 (* u u x)))
 (let ((?x154 (* (- 1) (* u u u v v x y y))))
 (let ((?x931 (+ ?x154 ?x171 ?x195 (* (- 3) (* u u v v v x y y)) (* (- 3) (* u v v v v x y y)) ?x343 ?x366 ?x356 ?x390 ?x433 ?x434 (* (- 1) (* u u u v v x x x)) (* (- 3) (* u u v v v x x x)) (* (- 3) (* u v v v v x x x)) (* (- 1) (* v v v v v x x x)) (* 2 (* u u u v v x x y)) (* 6 (* u u v v v x x y)) (* 6 (* u v v v v x x y)) (* 2 (* v v v v v x x y)))))
 (let ((?x262 (* (- 1) (* v v v y y y y))))
 (let ((?x273 (* (- 3) (* u v v y y y y))))
 (let ((?x272 (* (- 3) (* u u v y y y y))))
 (let ((?x218 (* (- 1) (* u u u y y y y))))
 (let ((?x270 (* 3 (* u v v x y y y))))
 (let ((?x269 (* 3 (* u u v x y y y))))
 (let ((?x188 (* u u u x y y y)))
 (let ((?x179 (* (- 1) (* u u y))))
 (let ((?x148 (* (- 1) (* u u u u u x y y))))
 (let ((?x496 (+ (* 2 (* u u u u v y y y)) ?x148 (* (- 2) (* u u u u v x y y)) ?x154 ?x171 ?x179 ?x188 ?x269 ?x270 ?x195 ?x218 ?x272 ?x273 ?x262 (* u u u v v y y y) (* u u u u u y y y))))
 (let (($x992 (and (= ?x85 0) (or (not (= (* ?x496 ?x85) 0)) (not (= (* ?x931 ?x85) 0))))))
 (let ((?x167 (* (- 1) x)))
 (let ((?x200 (+ y ?x167)))
 (let ((?x239 (* ?x200 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x287 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x200 ?x200 x v v)) ?x62 (* ?x200 ?x200 ?x200 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x222 (+ x ?x84)))
 (let ((?x227 (* ?x222 u)))
 (let ((?x265 (+ (* (- 1) (* ?x44 ?x44 ?x222 y y u u u)) (* ?x222 u u) (* ?x44 ?x44 ?x44 ?x222 y y y))))
 (let (($x90 (or (not (= (* ?x265 (+ ?x228 ?x227 ?x45 ?x248)) 0)) (not (= (* ?x287 (+ ?x228 ?x56 ?x239 ?x248)) 0)))))
 (let ((?x197 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x275 (and (= ?x197 0) $x90)))
 (rewrite (= $x275 $x992)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x283 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x248 (* (- 1) k!10)))
 (let ((?x167 (* (- 1) x)))
 (let ((?x200 (+ y ?x167)))
 (let ((?x239 (* ?x200 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x228 (* (- 1) k!00)))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x287 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x200 ?x200 x v v)) ?x62 (* ?x200 ?x200 ?x200 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x222 (+ x ?x84)))
 (let ((?x227 (* ?x222 u)))
 (let ((?x265 (+ (* (- 1) (* ?x44 ?x44 ?x222 y y u u u)) (* ?x222 u u) (* ?x44 ?x44 ?x44 ?x222 y y y))))
 (let (($x90 (or (not (= (* ?x265 (+ ?x228 ?x227 ?x45 ?x248)) 0)) (not (= (* ?x287 (+ ?x228 ?x56 ?x239 ?x248)) 0)))))
 (and (= (+ ?x228 (* x u) (* y v) ?x248) 0) $x90))))))))))))))))) :qid k!29))
 ))
 (let ((?x231 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x248 (* (- 1) k!10)))
 (let ((?x167 (* (- 1) x)))
 (let ((?x200 (+ y ?x167)))
 (let ((?x239 (* ?x200 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x228 (* (- 1) k!00)))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x287 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x200 ?x200 x v v)) ?x62 (* ?x200 ?x200 ?x200 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x222 (+ x ?x84)))
 (let ((?x227 (* ?x222 u)))
 (let ((?x265 (+ (* (- 1) (* ?x44 ?x44 ?x222 y y u u u)) (* ?x222 u u) (* ?x44 ?x44 ?x44 ?x222 y y y))))
 (let (($x90 (or (not (= (* ?x265 (+ ?x228 ?x227 ?x45 ?x248)) 0)) (not (= (* ?x287 (+ ?x228 ?x56 ?x239 ?x248)) 0)))))
 (let ((?x197 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x275 (and (= ?x197 0) $x90)))
 (let (($x281 (and (= (+ ?x228 (* x u) (* y v) ?x248) 0) $x90)))
 (rewrite (= $x281 $x275))))))))))))))))))))))
 ))
 (let (($x277 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x167 (* (- 1) x)))
 (let ((?x200 (+ y ?x167)))
 (let ((?x239 (* ?x200 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x287 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x200 ?x200 x v v)) ?x62 (* ?x200 ?x200 ?x200 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x222 (+ x ?x84)))
 (let ((?x227 (* ?x222 u)))
 (let ((?x265 (+ (* (- 1) (* ?x44 ?x44 ?x222 y y u u u)) (* ?x222 u u) (* ?x44 ?x44 ?x44 ?x222 y y y))))
 (let (($x254 (or (not (= (* ?x265 (+ ?x79 ?x227 ?x45 ?x95)) 0)) (not (= (* ?x287 (+ ?x79 ?x56 ?x239 ?x95)) 0)))))
 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x254)))))))))))))))))) :qid k!29))
 ))
 (let ((?x224 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x248 (* (- 1) k!10)))
 (let ((?x167 (* (- 1) x)))
 (let ((?x200 (+ y ?x167)))
 (let ((?x239 (* ?x200 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x228 (* (- 1) k!00)))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x287 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x200 ?x200 x v v)) ?x62 (* ?x200 ?x200 ?x200 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x222 (+ x ?x84)))
 (let ((?x227 (* ?x222 u)))
 (let ((?x265 (+ (* (- 1) (* ?x44 ?x44 ?x222 y y u u u)) (* ?x222 u u) (* ?x44 ?x44 ?x44 ?x222 y y y))))
 (let (($x90 (or (not (= (* ?x265 (+ ?x228 ?x227 ?x45 ?x248)) 0)) (not (= (* ?x287 (+ ?x228 ?x56 ?x239 ?x248)) 0)))))
 (let (($x281 (and (= (+ ?x228 (* x u) (* y v) ?x248) 0) $x90)))
 (let ((?x205 (* ?x287 (+ (* (- 1) (* u00 x00)) ?x56 ?x239 (* (- 1) (* v00 y00))))))
 (let ((?x255 (* ?x265 (+ (* (- 1) (* u00 x00)) ?x227 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x219 (* y v)))
 (let ((?x215 (* x u)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let (($x259 (and (= (+ ?x79 ?x215 ?x219 ?x95) 0) (or (not (= ?x255 0)) (not (= ?x205 0))))))
 (rewrite (= $x259 $x281))))))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x55 (+ u v)))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x57 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x64 (+ (* ?x29 ?x55 ?x55 ?x55 v v x ?x57 ?x57) ?x62 (* v v v x ?x57 ?x57 ?x57))))
 (let ((?x38 (* v00 y00)))
 (let ((?x65 (* (- (+ (* ?x29 u00 x00) (* ?x55 x) (* v ?x57)) ?x38) ?x64)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x51 (+ (* ?x29 u u u ?x44 ?x44 ?x42 y y) (* u u ?x42) (* ?x44 ?x44 ?x44 ?x42 y y y))))
 (let ((?x52 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x51)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x52 0)) (not (= ?x65 0)))))))))))))))) :qid k!29))
 ))
 (let ((?x237 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x95 (* (- 1) ?x38)))
 (let ((?x167 (* (- 1) x)))
 (let ((?x200 (+ y ?x167)))
 (let ((?x239 (* ?x200 v)))
 (let ((?x55 (+ u v)))
 (let ((?x56 (* ?x55 x)))
 (let ((?x79 (* (- 1) (* u00 x00))))
 (let ((?x62 (* ?x55 ?x55 x)))
 (let ((?x287 (+ (* (- 1) (* ?x55 ?x55 ?x55 ?x200 ?x200 x v v)) ?x62 (* ?x200 ?x200 ?x200 x v v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x84 (* (- 1) y)))
 (let ((?x222 (+ x ?x84)))
 (let ((?x227 (* ?x222 u)))
 (let ((?x265 (+ (* (- 1) (* ?x44 ?x44 ?x222 y y u u u)) (* ?x222 u u) (* ?x44 ?x44 ?x44 ?x222 y y y))))
 (let (($x254 (or (not (= (* ?x265 (+ ?x79 ?x227 ?x45 ?x95)) 0)) (not (= (* ?x287 (+ ?x79 ?x56 ?x239 ?x95)) 0)))))
 (let (($x259 (and (= (+ ?x79 (* x u) (* y v) ?x95) 0) $x254)))
 (let ((?x57 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x64 (+ (* ?x29 ?x55 ?x55 ?x55 v v x ?x57 ?x57) ?x62 (* v v v x ?x57 ?x57 ?x57))))
 (let (($x66 (= (* (- (+ (* ?x29 u00 x00) ?x56 (* v ?x57)) ?x38) ?x64) 0)))
 (let ((?x51 (+ (* ?x29 u u u ?x44 ?x44 (- x y) y y) (* u u (- x y)) (* ?x44 ?x44 ?x44 (- x y) y y y))))
 (let ((?x52 (* (- (+ (* ?x29 u00 x00) (* u (- x y)) ?x45) ?x38) ?x51)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x69 (and $x41 (or (not (= ?x52 0)) (not $x66)))))
 (rewrite (= $x69 $x259)))))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x249 (mp (mp @x71 (quant-intro (proof-bind ?x237) (= $x70 $x277)) $x277) (rewrite (= $x277 $x277)) $x277)))
 (let ((@x190 (mp (mp @x249 (quant-intro (proof-bind ?x224) (= $x277 $x283)) $x283) (quant-intro (proof-bind ?x231) (= $x283 $x214)) $x214)))
 (let ((@x575 (mp~ (mp @x190 (quant-intro (proof-bind ?x286) (= $x214 $x266)) $x266) (sk (~ $x266 $x554)) $x554)))
 (let ((@x621 (mp @x575 (rewrite (= $x554 $x710)) $x710)))
 (let ((@x629 (and-elim @x621 $x588)))
 (let ((@x586 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x588) $x605)) @x629 $x605)))
 (let (($x607 (>= ?x582 0)))
 (let ((@x662 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x588) $x607)) @x629 $x607)))
 (let (($x579 (>= ?x540 0)))
 (let ((@x641 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x579)) @x662 @x586 false) $x579) @x662 @x586 $x603)))
 (unit-resolution (and-elim @x621 $x611) @x641 ((_ th-lemma arith eq-propagate 0 0 0 0) @x662 @x586 @x662 @x586 $x594) false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        6
 :arith-conflicts           1
 :arith-eq-adapter          3
 :arith-fixed-eqs           3
 :arith-num-rows            3
 :arith-pseudo-nonlinear    4
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                3
 :eliminated-applications   2
 :max-memory                3.60
 :memory                    3.17
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1086608
 :num-checks                1
 :propagations              6
 :rlimit-count              3213
 :time                      0.01
 :total-time                0.01)
