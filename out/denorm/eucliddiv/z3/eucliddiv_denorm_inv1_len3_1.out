unsat
((set-logic NIA)
(proof
(let (($x55 (exists ((q Int) (r Int) (y Int) )(! (let ((?x47 (* y00 y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x48 (- ?x45 ?x46)))
 (let ((?x49 (- ?x48 ?x47)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x53)))))))))))))))) :qid k!29))
 ))
 (let (($x630 (= $x55 false)))
 (let (($x623 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x629 (elim-unused (= $x623 false))))
 (let (($x626 (= $x55 $x623)))
 (let ((?x695 (lambda ((q Int) (r Int) (y Int) )(let ((?x47 (* y00 y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x45 (* ?x43 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x48 (- ?x45 ?x46)))
 (let ((?x49 (- ?x48 ?x47)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x54 (and $x33 $x41 $x53)))
 (let (($x621 (= $x54 false)))
 (let (($x660 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x82 (= (+ (* (- 1) y00) y) 0)))
 (let (($x689 (and $x82 $x660 false)))
 (let (($x614 (= $x53 false)))
 (let ((@x613 (rewrite (= (or false) false))))
 (let (($x609 (or false)))
 (let (($x610 (= $x53 $x609)))
 (let (($x607 (= $x52 false)))
 (let ((@x606 (rewrite (= (not true) false))))
 (let (($x602 (not true)))
 (let (($x603 (= $x52 $x602)))
 (let (($x600 (= $x51 true)))
 (let ((@x599 (rewrite (= (= 0 0) true))))
 (let (($x595 (= 0 0)))
 (let (($x596 (= $x51 $x595)))
 (let ((?x578 (* (- 1) ?x47)))
 (let ((?x60 (* (- 1) y00)))
 (let ((?x80 (+ r ?x60)))
 (let ((?x77 (+ 1 q)))
 (let ((?x640 (* y00 y00 y00 ?x77 ?x77 ?x80 ?x80)))
 (let ((?x654 (* (- 1) ?x640)))
 (let ((?x83 (* y00 y00 y00 ?x77 ?x77 ?x77 ?x80 ?x80 ?x80)))
 (let ((?x672 (+ ?x83 ?x654 ?x578)))
 (let ((?x677 (* 0 ?x672)))
 (let ((@x85 (rewrite (= ?x44 ?x80))))
 (let ((@x79 (rewrite (= ?x43 ?x77))))
 (let ((@x444 (monotonicity @x79 @x79 @x85 @x85 (= ?x46 (* ?x77 ?x77 ?x80 ?x80 y00 y00 y00)))))
 (let ((@x647 (trans @x444 (rewrite (= (* ?x77 ?x77 ?x80 ?x80 y00 y00 y00) ?x640)) (= ?x46 ?x640))))
 (let ((@x635 (rewrite (= (* ?x77 ?x77 ?x77 ?x80 ?x80 ?x80 y00 y00 y00) ?x83))))
 (let ((@x88 (monotonicity @x79 @x79 @x79 @x85 @x85 @x85 (= ?x45 (* ?x77 ?x77 ?x77 ?x80 ?x80 ?x80 y00 y00 y00)))))
 (let ((@x653 (monotonicity (trans @x88 @x635 (= ?x45 ?x83)) @x647 (= ?x48 (- ?x83 ?x640)))))
 (let ((@x662 (trans @x653 (rewrite (= (- ?x83 ?x640) (+ ?x83 ?x654))) (= ?x48 (+ ?x83 ?x654)))))
 (let ((@x671 (trans (monotonicity @x662 (= ?x49 (- (+ ?x83 ?x654) ?x47))) (rewrite (= (- (+ ?x83 ?x654) ?x47) (+ (+ ?x83 ?x654) ?x578))) (= ?x49 (+ (+ ?x83 ?x654) ?x578)))))
 (let ((@x676 (trans @x671 (rewrite (= (+ (+ ?x83 ?x654) ?x578) ?x672)) (= ?x49 ?x672))))
 (let ((@x74 (trans (monotonicity (rewrite (= ?x30 ?x60)) (= ?x42 (+ ?x60 y00))) (rewrite (= (+ ?x60 y00) 0)) (= ?x42 0))))
 (let ((@x682 (trans (monotonicity @x74 @x676 (= ?x50 ?x677)) (rewrite (= ?x677 0)) $x51)))
 (let ((@x686 (trans (monotonicity (trans (monotonicity @x682 $x596) @x599 $x600) $x603) @x606 $x607)))
 (let ((@x691 (monotonicity (rewrite (= $x33 $x82)) (rewrite (= $x41 $x660)) (trans (monotonicity @x686 $x610) @x613 $x614) (= $x54 $x689))))
 (trans @x691 (rewrite (= $x689 false)) $x621)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x56 (asserted $x55)))
 (mp @x56 (trans (quant-intro (proof-bind ?x695) $x626) @x629 $x630) false))))))))))

(:max-memory   3.43
 :memory       3.12
 :mk-bool-var  5
 :num-allocs   919132
 :rlimit-count 453
 :time         0.01
 :total-time   0.01)
