unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x586 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x1021 (<= ?x586 (- 6))))
 (let (($x1098 (= ?x586 (- 6))))
 (let ((?x826 (+ k!2 c!3)))
 (let ((?x141 (+ k!2 m!1)))
 (let ((?x576 (+ 6 m!1)))
 (let ((?x572 (+ 1 n!0)))
 (let ((?x778 (* m!1 m!1 m!1 m!1 m!1)))
 (let ((?x699 (* k!2 k!2 k!2 m!1 m!1)))
 (let ((?x979 (+ (* 6 (* ?x572 ?x572 ?x572 ?x572 ?x576 ?x576 ?x576 ?x826)) (* (- 36) (* n!0 k!2 k!2 k!2)) (* (- 36) (* n!0 m!1 m!1 m!1)) (* (- 6) (* n!0 m!1 m!1 m!1 m!1)) (* (- 108) (* k!2 k!2 m!1)) (* (- 18) (* n!0 k!2 k!2 m!1 m!1)) (* (- 18) (* n!0 k!2 m!1 m!1 m!1)) (* (- 1) (* ?x572 ?x572 ?x572 ?x576 ?x576 ?x576 ?x576 ?x826)) (* 6 (* ?x572 ?x572 ?x572 ?x576 ?x576 ?x576 ?x826)) ?x699 (* 3 (* k!2 k!2 m!1 m!1 m!1)) (* (- 108) (* n!0 k!2 m!1 m!1)) (* 6 (* ?x572 ?x572 ?x576 ?x576 ?x576 ?x141 ?x826)) (* (- 108) (* k!2 m!1 m!1)) ?x778 (* (- 6) (* n!0 k!2 k!2 k!2 m!1)) (* (- 36) (* k!2 k!2 k!2)) (* 6 (* ?x572 ?x576 ?x576 ?x576 ?x141 ?x826)) (* (- 36) (* m!1 m!1 m!1)) (* (- 108) (* n!0 k!2 k!2 m!1)) (* 3 (* k!2 m!1 m!1 m!1 m!1)) (* (- 1) (* ?x572 ?x576 ?x576 ?x576 ?x576 ?x141 ?x826)))))
 (let (($x743 (= ?x979 0)))
 (let (($x914 (not $x743)))
 (let (($x670 (= (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2)) (- 1))))
 (let (($x892 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 1) k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x710 (* k!2 k!2)))
 (let ((?x98 (+ ?x710 (* 9 n!0) (* (- 9) (* n!0 c!3)) (* (- 5) k!2) (* (- 18) c!3))))
 (let (($x678 (and $x1098 (= ?x98 (- 4)) $x892 $x670 $x914)))
 (let ((?x1047 (+ (* ?x572 ?x572 ?x572 ?x576 ?x576 ?x576 ?x576 (+ c!3 k!2)) (* 36 (* m!1 m!1 m!1)) (* 108 (* k!2 m!1 m!1)) (* 108 (* k!2 k!2 m!1)) (* 36 (* k!2 k!2 k!2)) (* (- 1) ?x778) (* (- 3) (* k!2 m!1 m!1 m!1 m!1)) (* (- 3) (* k!2 k!2 m!1 m!1 m!1)) (* (- 1) ?x699) (* 6 (* k!2 k!2 k!2 m!1 n!0)) (* 18 (* k!2 k!2 m!1 m!1 n!0)) (* 18 (* k!2 m!1 m!1 m!1 n!0)) (* 6 (* m!1 m!1 m!1 m!1 n!0)) (* (- 6) (* ?x572 ?x572 ?x576 ?x576 ?x576 ?x141 (+ c!3 k!2))) (* 36 (* k!2 k!2 k!2 n!0)) (* 108 (* k!2 k!2 m!1 n!0)) (* 108 (* k!2 m!1 m!1 n!0)) (* 36 (* m!1 m!1 m!1 n!0)) (* ?x572 ?x576 ?x576 ?x576 ?x576 ?x141 (+ c!3 k!2)) (* (- 6) (* ?x572 ?x572 ?x572 ?x576 ?x576 ?x576 (+ c!3 k!2))) (* (- 6) (* ?x572 ?x576 ?x576 ?x576 ?x141 (+ c!3 k!2))) (* (- 6) (* ?x572 ?x572 ?x572 ?x572 ?x576 ?x576 ?x576 (+ c!3 k!2))))))
 (let (($x462 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x727 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x710) (* 9 (* c!3 n!0)))))
 (let (($x692 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x727 4) $x462 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x1047 0)))))
 (let (($x177 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x1133 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x1087 (* ?x309 ?x306 ?x306 ?x306 ?x306 ?x69 ?x68)))
 (let ((?x134 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x306 ?x68)))
 (let ((?x481 (+ ?x134 (* 36 (* m m m)) (* 108 (* k m m)) (* 108 (* k k m)) (* 36 (* k k k)) (* (- 1) (* m m m m m)) (* (- 3) (* k m m m m)) (* (- 3) (* k k m m m)) (* (- 1) (* k k k m m)) (* 6 (* k k k m n)) (* 18 (* k k m m n)) (* 18 (* k m m m n)) (* 6 (* m m m m n)) (* (- 6) (* ?x309 ?x309 ?x306 ?x306 ?x306 ?x69 ?x68)) (* 36 (* k k k n)) (* 108 (* k k m n)) (* 108 (* k m m n)) (* 36 (* m m m n)) ?x1087 (* (- 6) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x68)) (* (- 6) (* ?x309 ?x306 ?x306 ?x306 ?x69 ?x68)) (* (- 6) ?x1133))))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= ?x481 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x784 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x875 (* (- 6) (* (+ 6 m) (+ k m) (+ k m) (+ k m)))))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x885 (+ (* 6 (* ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 1) (* ?x309 ?x306 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* 6 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* ?x306 ?x306 ?x69 ?x69 ?x69) (* 6 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x306 (+ c k))) (* 6 (* ?x309 ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 6) (* ?x309 ?x306 ?x69 ?x69 ?x69)) ?x875)))
 (let (($x566 (not (= ?x885 0))))
 (let (($x1044 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x900 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x900 $x1044 $x566))))))))))))))) :qid k!34))
 ))
 (let ((?x183 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x1133 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x1087 (* ?x309 ?x306 ?x306 ?x306 ?x306 ?x69 ?x68)))
 (let ((?x134 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x306 ?x68)))
 (let ((?x481 (+ ?x134 (* 36 (* m m m)) (* 108 (* k m m)) (* 108 (* k k m)) (* 36 (* k k k)) (* (- 1) (* m m m m m)) (* (- 3) (* k m m m m)) (* (- 3) (* k k m m m)) (* (- 1) (* k k k m m)) (* 6 (* k k k m n)) (* 18 (* k k m m n)) (* 18 (* k m m m n)) (* 6 (* m m m m n)) (* (- 6) (* ?x309 ?x309 ?x306 ?x306 ?x306 ?x69 ?x68)) (* 36 (* k k k n)) (* 108 (* k k m n)) (* 108 (* k m m n)) (* 36 (* m m m n)) ?x1087 (* (- 6) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x68)) (* (- 6) (* ?x309 ?x306 ?x306 ?x306 ?x69 ?x68)) (* (- 6) ?x1133))))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x1046 (and $x124 $x208 $x260 $x298 (not (= ?x481 0)))))
 (let ((?x885 (+ (* 6 (* ?x309 ?x306 ?x306 ?x306 ?x69 ?x68)) (* (- 1) ?x1087) (* 6 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x68)) (* ?x306 ?x306 ?x69 ?x69 ?x69) (* 6 ?x1133) (* (- 1) ?x134) (* 6 (* ?x309 ?x309 ?x306 ?x306 ?x306 ?x69 ?x68)) (* (- 6) (* ?x309 ?x306 ?x69 ?x69 ?x69)) (* (- 6) (* ?x306 ?x69 ?x69 ?x69)))))
 (let (($x566 (not (= ?x885 0))))
 (let (($x1044 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x900 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x698 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x900 $x1044 $x566)))
 (rewrite (= $x698 $x1046))))))))))))))))))))))))))
 ))
 (let (($x783 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x875 (* (- 6) (* (+ 6 m) (+ k m) (+ k m) (+ k m)))))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x885 (+ (* 6 (* ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 1) (* ?x309 ?x306 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* 6 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* ?x306 ?x306 ?x69 ?x69 ?x69) (* 6 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x306 (+ c k))) (* 6 (* ?x309 ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 6) (* ?x309 ?x306 ?x69 ?x69 ?x69)) ?x875)))
 (let (($x566 (not (= ?x885 0))))
 (let (($x1044 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x310 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x676 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x676 (- 4)) $x310 $x1044 $x566))))))))))))) :qid k!34))
 ))
 (let ((?x881 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x875 (* (- 6) (* (+ 6 m) (+ k m) (+ k m) (+ k m)))))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x885 (+ (* 6 (* ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 1) (* ?x309 ?x306 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* 6 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* ?x306 ?x306 ?x69 ?x69 ?x69) (* 6 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x306 (+ c k))) (* 6 (* ?x309 ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 6) (* ?x309 ?x306 ?x69 ?x69 ?x69)) ?x875)))
 (let (($x566 (not (= ?x885 0))))
 (let (($x1044 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x900 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x698 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x900 $x1044 $x566)))
 (let (($x310 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x676 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x1048 (and $x124 (= ?x676 (- 4)) $x310 $x1044 $x566)))
 (rewrite (= $x1048 $x698))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x74 (- (* 6 (+ c k) ?x69 ?x70 ?x70 ?x70 ?x71) (* (+ c k) ?x69 ?x70 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x78 (+ ?x74 (* 6 (+ c k) ?x70 ?x70 ?x70 ?x71 ?x71 ?x71) (* ?x69 ?x69 ?x69 ?x70 ?x70) (* 6 (+ c k) ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x82 (+ (- ?x78 (* (+ c k) ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 (+ c k) ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x86 (- (- ?x82 (* 6 ?x69 ?x69 ?x69 ?x70 ?x71)) (* 6 ?x69 ?x69 ?x69 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x86 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x777 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x875 (* (- 6) (* (+ 6 m) (+ k m) (+ k m) (+ k m)))))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x885 (+ (* 6 (* ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 1) (* ?x309 ?x306 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* 6 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* ?x306 ?x306 ?x69 ?x69 ?x69) (* 6 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 (+ c k))) (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x306 ?x306 (+ c k))) (* 6 (* ?x309 ?x309 ?x306 ?x306 ?x306 ?x69 (+ c k))) (* (- 6) (* ?x309 ?x306 ?x69 ?x69 ?x69)) ?x875)))
 (let (($x566 (not (= ?x885 0))))
 (let (($x1044 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x310 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x676 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x1048 (and $x124 (= ?x676 (- 4)) $x310 $x1044 $x566)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (- (* 6 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71) (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x78 (+ ?x74 (* 6 ?x68 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71) (* ?x69 ?x69 ?x69 ?x70 ?x70) (* 6 ?x68 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x82 (+ (- ?x78 (* ?x68 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x86 (- (- ?x82 (* 6 ?x69 ?x69 ?x69 ?x70 ?x71)) (* 6 ?x69 ?x69 ?x69 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x86 0))))))
 (rewrite (= $x90 $x1048)))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x789 (mp (mp @x92 (quant-intro (proof-bind ?x777) (= $x91 $x783)) $x783) (rewrite (= $x783 $x783)) $x783)))
 (let ((@x879 (mp (mp @x789 (quant-intro (proof-bind ?x881) (= $x783 $x784)) $x784) (quant-intro (proof-bind ?x183) (= $x784 $x177)) $x177)))
 (let ((@x898 (mp (mp~ @x879 (sk (~ $x177 $x692)) $x692) (rewrite (= $x692 $x678)) $x678)))
 (let ((@x135 (and-elim @x898 $x1098)))
 (let ((@x307 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1098) $x1021)) @x135 $x1021)))
 (let (($x227 (>= ?x586 (- 6))))
 (let ((@x1004 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1098) $x227)) @x135 $x227)))
 (let (($x1051 (not (<= ?x979 0))))
 (let (($x1006 (>= ?x979 0)))
 (let ((@x1039 (lemma ((_ th-lemma arith) (hypothesis (not $x1006)) @x1004 @x307 @x1004 @x307 false) $x1006)))
 (let ((@x986 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x743 $x1051 (not $x1006))) (and-elim @x898 $x914) (or $x1051 (not $x1006)))))
 ((_ th-lemma arith) (unit-resolution @x986 @x1039 $x1051) @x1004 @x307 @x1004 @x307 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        18
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           9
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             263
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              10
 :arith-row-summations      18
 :arith-tableau-max-columns 53
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                16
 :final-checks              7
 :max-memory                3.78
 :memory                    3.24
 :mk-bool-var               28
 :mk-clause                 16
 :num-allocs                1317617
 :num-checks                1
 :propagations              12
 :rlimit-count              6692
 :time                      0.01
 :total-time                0.02)
