unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x329 (to_real r!1)))
 (let ((?x439 (to_real b!2)))
 (let ((?x359 (to_real x!0)))
 (let ((?x214 (* ?x359 ?x439)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x386 (+ ?x145 ?x214 ?x329 ?x131)))
 (let (($x87 (>= ?x386 0.0)))
 (let ((?x238 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x214)))
 (let (($x429 (>= ?x238 0.0)))
 (let (($x192 (= ?x238 0.0)))
 (let ((@x432 ((_ th-lemma arith) $x192)))
 (let ((?x82 (* b00 x00)))
 (let ((?x114 (+ r00 ?x82 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x459 (<= ?x114 0)))
 (let (($x455 (= 0 ?x114)))
 (let ((@x197 (symm (commutativity (= $x455 (= ?x114 0))) (= (= ?x114 0) $x455))))
 (let (($x147 (= ?x114 0)))
 (let ((?x699 (* ?x329 ?x329 ?x329)))
 (let ((?x684 (* (/ 1.0 32.0) (* ?x439 ?x439 ?x439 ?x439 ?x439))))
 (let ((?x176 (* (- (/ 1.0 8.0)) (* ?x439 ?x439 ?x439))))
 (let ((?x155 (+ (* (/ 3.0 4.0) (* ?x329 ?x439 ?x439)) (* (/ 1.0 8.0) (* ?x359 ?x439 ?x439 ?x439 ?x439 ?x439)) ?x176 (* (- (/ 3.0 4.0)) (* ?x329 ?x359 ?x439 ?x439 ?x439 ?x439)) (* (/ 1.0 8.0) (* ?x359 ?x359 ?x439 ?x439 ?x439 ?x439 ?x439)) (* (- (/ 3.0 4.0)) (* ?x329 ?x359 ?x359 ?x439 ?x439 ?x439 ?x439)) (* (/ 3.0 2.0) (* ?x329 ?x329 ?x359 ?x359 ?x439 ?x439 ?x439)) (* (- (/ 3.0 16.0)) (* ?x329 ?x439 ?x439 ?x439 ?x439)) (* (/ 3.0 8.0) (* ?x329 ?x329 ?x439 ?x439 ?x439)) (* (/ 3.0 2.0) (* ?x329 ?x359 ?x439 ?x439)) (* 2.0 (* ?x329 ?x329 ?x329 ?x359)) (* (- 1.0) (* ?x329 ?x329 ?x329 ?x359 ?x439 ?x439)) (* (- 1.0) (* ?x329 ?x329 ?x329 ?x359 ?x359 ?x439 ?x439)) (* (/ 3.0 2.0) (* ?x329 ?x329 ?x359 ?x439 ?x439 ?x439)) ?x684 ?x699 (* (- (/ 3.0 2.0)) (* ?x329 ?x329 ?x439)) (* (- (/ 1.0 4.0)) (* ?x359 ?x439 ?x439 ?x439)) (* (- 3.0) (* ?x329 ?x329 ?x359 ?x439)) (* (- (/ 1.0 4.0)) (* ?x329 ?x329 ?x329 ?x439 ?x439)))))
 (let (($x783 (= (* ?x155 (+ ?x131 ?x145 ?x214 ?x329)) 0.0)))
 (let (($x373 (not $x783)))
 (let ((?x355 (+ (* ?x329 ?x329 ?x329 ?x329 ?x359 ?x359 ?x439 ?x439) (* 2.0 (* ?x59 ?x329 ?x329 ?x329 ?x359)) (* (- 1.0) (* ?x59 ?x329 ?x329 ?x329 ?x359 ?x359 ?x439 ?x439)) (* ?x329 ?x329 ?x329 ?x359 ?x359 ?x359 ?x439 ?x439 ?x439) (* (- 1.0) (* ?x140 ?x141 ?x329 ?x329 ?x329 ?x359 ?x359 ?x439 ?x439)) (* 2.0 (* ?x140 ?x141 ?x329 ?x329 ?x329 ?x359)) (* (- 2.0) (* ?x329 ?x329 ?x329 ?x329 ?x359)) (* (- 2.0) (* ?x329 ?x329 ?x329 ?x359 ?x359 ?x439)))))
 (let (($x161 (= ?x355 0.0)))
 (let (($x175 (not $x161)))
 (let (($x216 (or $x175 $x373)))
 (let (($x762 (and $x147 $x216)))
 (let ((?x737 (+ (* 2.0 (* ?x359 ?x329 ?x329 ?x329)) (* (- 1.0) (* ?x439 ?x439 ?x359 ?x359 ?x329 ?x329 ?x329)) ?x176 (* (/ 3.0 4.0) (* ?x439 ?x439 ?x329)) (* (- (/ 3.0 2.0)) (* ?x439 ?x329 ?x329)) ?x699 (* (- (/ 1.0 4.0)) (* ?x439 ?x439 ?x439 ?x359)) (* (/ 3.0 2.0) (* ?x439 ?x439 ?x359 ?x329)) (* (- 3.0) (* ?x439 ?x359 ?x329 ?x329)) ?x684 (* (- (/ 3.0 16.0)) (* ?x439 ?x439 ?x439 ?x439 ?x329)) (* (/ 3.0 8.0) (* ?x439 ?x439 ?x439 ?x329 ?x329)) (* (- (/ 1.0 4.0)) (* ?x439 ?x439 ?x329 ?x329 ?x329)) (* (/ 1.0 8.0) (* ?x439 ?x439 ?x439 ?x439 ?x439 ?x359)) (* (- (/ 3.0 4.0)) (* ?x439 ?x439 ?x439 ?x439 ?x359 ?x329)) (* (/ 3.0 2.0) (* ?x439 ?x439 ?x439 ?x359 ?x329 ?x329)) (* (- 1.0) (* ?x439 ?x439 ?x359 ?x329 ?x329 ?x329)) (* (/ 1.0 8.0) (* ?x439 ?x439 ?x439 ?x439 ?x439 ?x359 ?x359)) (* (- (/ 3.0 4.0)) (* ?x439 ?x439 ?x439 ?x439 ?x359 ?x359 ?x329)) (* (/ 3.0 2.0) (* ?x439 ?x439 ?x439 ?x359 ?x359 ?x329 ?x329)))))
 (let ((?x376 (+ (* 2.0 (* ?x359 ?x329 ?x329 ?x329 ?x329)) (* (- 2.0) (* ?x359 ?x329 ?x329 ?x329 ?x59)) (* (- 2.0) (* ?x359 ?x329 ?x329 ?x329 ?x140 ?x141)) (* 2.0 (* ?x439 ?x359 ?x359 ?x329 ?x329 ?x329)) (* (- 1.0) (* ?x439 ?x439 ?x359 ?x359 ?x329 ?x329 ?x329 ?x329)) (* ?x439 ?x439 ?x359 ?x359 ?x329 ?x329 ?x329 ?x59) (* ?x439 ?x439 ?x359 ?x359 ?x329 ?x329 ?x329 ?x140 ?x141) (* (- 1.0) (* ?x439 ?x439 ?x439 ?x359 ?x359 ?x359 ?x329 ?x329 ?x329)))))
 (let (($x268 (or (not (= ?x376 0.0)) (not (= (* ?x737 (+ ?x329 ?x131 ?x145 (* ?x439 ?x359))) 0.0)))))
 (let (($x276 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x82)) 0) $x268)))
 (let (($x585 (exists ((b Int) (r Int) (x Int) )(! (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x48 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x194 (* 2.0 (* ?x43 ?x48 ?x48 ?x48))))
 (let ((?x839 (+ ?x194 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x48)) (* (- (/ 3.0 2.0)) (* ?x40 ?x48 ?x48)) (* ?x48 ?x48 ?x48) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x43 ?x48)) (* (- 3.0) (* ?x40 ?x43 ?x48 ?x48)) (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x48)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x48)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)))))
 (let ((?x303 (+ (* 2.0 (* ?x43 ?x48 ?x48 ?x48 ?x48)) (* (- 2.0) (* ?x43 ?x48 ?x48 ?x48 ?x59)) (* (- 2.0) (* ?x43 ?x48 ?x48 ?x48 ?x140 ?x141)) (* 2.0 (* ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48 ?x59) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48 ?x140 ?x141) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x110 (not (= ?x303 0.0))))
 (let (($x457 (or $x110 (not (= (* ?x839 (+ ?x48 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x118 $x457)))))))))))))))) :qid k!28))
 ))
 (let (($x563 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x168 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x659 (+ ?x145 ?x48 ?x168 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x588 (+ ?x48 ?x168)))
 (let ((?x43 (to_real x)))
 (let ((?x259 (* 2.0 ?x43)))
 (let ((?x650 (+ 1.0 ?x259)))
 (let ((?x518 (+ (* ?x650 ?x588 ?x588 ?x588) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x650 ?x650 ?x588 ?x588 ?x588)))))
 (let ((?x194 (* 2.0 (* ?x43 ?x48 ?x48 ?x48))))
 (let ((?x637 (* (+ ?x194 (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x48 ?x40 ?x40))) (+ ?x145 ?x48 ?x131 (* ?x43 ?x40)))))
 (let (($x707 (or (not (= ?x637 0.0)) (not (= (* ?x518 ?x659) 0.0)))))
 (let (($x573 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x573 $x707)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x587 (lambda ((b Int) (r Int) (x Int) )(let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x48 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x194 (* 2.0 (* ?x43 ?x48 ?x48 ?x48))))
 (let ((?x839 (+ ?x194 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x48)) (* (- (/ 3.0 2.0)) (* ?x40 ?x48 ?x48)) (* ?x48 ?x48 ?x48) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x43 ?x48)) (* (- 3.0) (* ?x40 ?x43 ?x48 ?x48)) (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x48)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x48)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)))))
 (let ((?x303 (+ (* 2.0 (* ?x43 ?x48 ?x48 ?x48 ?x48)) (* (- 2.0) (* ?x43 ?x48 ?x48 ?x48 ?x59)) (* (- 2.0) (* ?x43 ?x48 ?x48 ?x48 ?x140 ?x141)) (* 2.0 (* ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48 ?x48)) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48 ?x59) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48 ?x140 ?x141) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x110 (not (= ?x303 0.0))))
 (let (($x457 (or $x110 (not (= (* ?x839 (+ ?x48 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x484 (and $x118 $x457)))
 (let ((?x168 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x659 (+ ?x145 ?x48 ?x168 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x588 (+ ?x48 ?x168)))
 (let ((?x259 (* 2.0 ?x43)))
 (let ((?x650 (+ 1.0 ?x259)))
 (let ((?x518 (+ (* ?x650 ?x588 ?x588 ?x588) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x650 ?x650 ?x588 ?x588 ?x588)))))
 (let ((?x637 (* (+ ?x194 (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x48 ?x40 ?x40))) (+ ?x145 ?x48 ?x131 (* ?x43 ?x40)))))
 (let (($x707 (or (not (= ?x637 0.0)) (not (= (* ?x518 ?x659) 0.0)))))
 (let (($x573 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x558 (and $x573 $x707)))
 (rewrite (= $x558 $x484)))))))))))))))))))))))))))))
 ))
 (let (($x712 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x168 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x659 (+ ?x145 ?x48 ?x168 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x588 (+ ?x48 ?x168)))
 (let ((?x43 (to_real x)))
 (let ((?x259 (* 2.0 ?x43)))
 (let ((?x650 (+ 1.0 ?x259)))
 (let ((?x518 (+ (* ?x650 ?x588 ?x588 ?x588) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x650 ?x650 ?x588 ?x588 ?x588)))))
 (let ((?x194 (* 2.0 (* ?x43 ?x48 ?x48 ?x48))))
 (let ((?x637 (* (+ ?x194 (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x48 ?x40 ?x40))) (+ ?x145 ?x48 ?x131 (* ?x43 ?x40)))))
 (let (($x707 (or (not (= ?x637 0.0)) (not (= (* ?x518 ?x659) 0.0)))))
 (let (($x544 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x544 $x707)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x552 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x168 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x659 (+ ?x145 ?x48 ?x168 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x588 (+ ?x48 ?x168)))
 (let ((?x43 (to_real x)))
 (let ((?x259 (* 2.0 ?x43)))
 (let ((?x650 (+ 1.0 ?x259)))
 (let ((?x518 (+ (* ?x650 ?x588 ?x588 ?x588) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x650 ?x650 ?x588 ?x588 ?x588)))))
 (let ((?x194 (* 2.0 (* ?x43 ?x48 ?x48 ?x48))))
 (let ((?x637 (* (+ ?x194 (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x48 ?x40 ?x40))) (+ ?x145 ?x48 ?x131 (* ?x43 ?x40)))))
 (let (($x707 (or (not (= ?x637 0.0)) (not (= (* ?x518 ?x659) 0.0)))))
 (let (($x573 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x558 (and $x573 $x707)))
 (let (($x544 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x646 (and $x544 $x707)))
 (rewrite (= $x646 $x558)))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((b Int) (r Int) (x Int) )(! (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x48 (to_real r)))
 (let ((?x56 (- ?x48 ?x42)))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) (to_real r00)) (* ?x42 ?x63))))
 (let ((?x69 (* ?x65 (- (* ?x56 ?x56 ?x56 ?x63) (* ?x42 ?x42 ?x56 ?x56 ?x56 ?x63 ?x63)))))
 (let ((?x51 (- (to_real (* r r r 2 x)) (* ?x42 ?x42 ?x48 ?x48 ?x48 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= ?x69 ?x53)))))))))))))))) :qid k!28))
 ))
 (let ((?x549 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x168 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x659 (+ ?x145 ?x48 ?x168 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x588 (+ ?x48 ?x168)))
 (let ((?x43 (to_real x)))
 (let ((?x259 (* 2.0 ?x43)))
 (let ((?x650 (+ 1.0 ?x259)))
 (let ((?x518 (+ (* ?x650 ?x588 ?x588 ?x588) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x650 ?x650 ?x588 ?x588 ?x588)))))
 (let ((?x194 (* 2.0 (* ?x43 ?x48 ?x48 ?x48))))
 (let ((?x637 (* (+ ?x194 (* (- 1.0) (* ?x43 ?x43 ?x48 ?x48 ?x48 ?x40 ?x40))) (+ ?x145 ?x48 ?x131 (* ?x43 ?x40)))))
 (let (($x707 (or (not (= ?x637 0.0)) (not (= (* ?x518 ?x659) 0.0)))))
 (let (($x544 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x646 (and $x544 $x707)))
 (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x56 (- ?x48 ?x42)))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) ?x59) (* ?x42 ?x63))))
 (let ((?x69 (* ?x65 (- (* ?x56 ?x56 ?x56 ?x63) (* ?x42 ?x42 ?x56 ?x56 ?x56 ?x63 ?x63)))))
 (let ((?x51 (- (to_real (* r r r 2 x)) (* ?x42 ?x42 ?x48 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x73 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= ?x69 ?x53))))))
 (rewrite (= $x73 $x646))))))))))))))))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x554 (mp (mp @x75 (quant-intro (proof-bind ?x549) (= $x74 $x712)) $x712) (rewrite (= $x712 $x712)) $x712)))
 (let ((@x673 (mp (mp @x554 (quant-intro (proof-bind ?x552) (= $x712 $x563)) $x563) (quant-intro (proof-bind ?x587) (= $x563 $x585)) $x585)))
 (let ((@x146 (mp (mp~ @x673 (sk (~ $x585 $x276)) $x276) (rewrite (= $x276 $x762)) $x762)))
 (let ((@x234 (mp (and-elim @x146 $x147) @x197 $x455)))
 (let ((?x296 (+ ?x142 (* (- 1.0) (to_real ?x82)))))
 (let (($x285 (<= ?x296 0.0)))
 (let (($x297 (= ?x296 0.0)))
 (let ((@x780 ((_ th-lemma arith) $x297)))
 (let ((@x776 ((_ th-lemma arith) (hypothesis (not $x87)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x297) $x285)) @x780 $x285) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x455) $x459)) @x234 $x459) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x192) $x429)) @x432 $x429) false)))
 (let ((@x757 (lemma @x776 $x87)))
 (let (($x81 (<= ?x386 0.0)))
 (let (($x423 (<= ?x238 0.0)))
 (let (($x461 (>= ?x114 0)))
 (let (($x284 (>= ?x296 0.0)))
 (let ((@x127 ((_ th-lemma arith) (hypothesis (not $x81)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x297) $x284)) @x780 $x284) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x455) $x461)) @x234 $x461) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x192) $x423)) @x432 $x423) false)))
 (let ((@x153 (lemma @x127 $x81)))
 (let (($x365 (<= ?x355 0.0)))
 (let (($x371 (not $x365)))
 (let (($x739 (= 0.0 ?x355)))
 (let (($x601 (not $x739)))
 (let ((@x603 (monotonicity (symm (commutativity (= $x739 $x161)) (= $x161 $x739)) (= $x175 $x601))))
 (let (($x771 (= 0.0 ?x386)))
 (let ((@x756 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x771 (not $x81) (not $x87))) @x153 @x757 $x771)))
 (let (($x387 (= ?x386 0.0)))
 (let (($x752 (not $x387)))
 (let ((@x313 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x752 $x783)) (hypothesis $x373) $x752) (symm (hypothesis $x771) $x387) false)))
 (let ((@x339 (unit-resolution (and-elim @x146 $x216) (unit-resolution (lemma @x313 (or (not $x771) $x783)) @x756 $x783) $x175)))
 (let (($x149 (>= ?x355 0.0)))
 (let ((@x395 (unit-resolution ((_ th-lemma arith) (or (not $x81) (not $x87) $x149)) (hypothesis (not $x149)) @x153 @x757 false)))
 (let ((@x609 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x739 $x371 (not $x149))) (lemma @x395 $x149) (mp @x339 @x603 $x601) $x371)))
 (unit-resolution ((_ th-lemma arith) (or (not $x81) (not $x87) $x365)) @x609 @x153 @x757 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      25
 :arith-eq-adapter               22
 :arith-bound-propagations-cheap 26
 :arith-bound-propagations-lp    5
 :arith-branch                   2
 :arith-conflicts                81
 :arith-diseq                    22
 :arith-gcd-calls                9
 :arith-grobner-calls            5
 :arith-grobner-conflicts        2
 :arith-horner-calls             5
 :arith-lower                    57
 :arith-make-feasible            51
 :arith-max-columns              67
 :arith-max-rows                 16
 :arith-nla-explanations         70
 :arith-nla-lemmas               78
 :arith-patches                  9
 :arith-patches-success          7
 :arith-propagations             26
 :arith-upper                    55
 :conflicts                      9
 :decisions                      64
 :del-clause                     96
 :final-checks                   38
 :max-memory                     4.67
 :memory                         3.17
 :mk-bool-var                    176
 :mk-clause                      136
 :num-allocs                     4640715
 :num-checks                     1
 :propagations                   64
 :rlimit-count                   5667
 :time                           0.03
 :total-time                     0.03)
