unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x476 (to_real x!0)))
 (let ((?x198 (to_real b!2)))
 (let ((?x539 (* ?x198 ?x476)))
 (let ((?x63 (to_real r00)))
 (let ((?x137 (* (- 1.0) ?x63)))
 (let ((?x626 (to_real r!1)))
 (let ((?x147 (to_real x00)))
 (let ((?x146 (to_real b00)))
 (let ((?x148 (* ?x146 ?x147)))
 (let ((?x151 (* (- 1.0) ?x148)))
 (let ((?x346 (+ ?x151 ?x626 ?x137 ?x539)))
 (let (($x211 (>= ?x346 0.0)))
 (let ((?x517 (* (- 1.0) ?x539)))
 (let ((?x518 (* (- 1.0) ?x626)))
 (let ((?x325 (+ ?x148 ?x518 ?x63 ?x517)))
 (let (($x378 (<= ?x325 0.0)))
 (let ((?x263 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x539)))
 (let (($x313 (>= ?x263 0.0)))
 (let (($x264 (= ?x263 0.0)))
 (let ((@x265 ((_ th-lemma arith) $x264)))
 (let ((?x178 (+ ?x148 (* (- 1.0) (to_real (* b00 x00))))))
 (let (($x135 (<= ?x178 0.0)))
 (let ((@x196 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x178 0.0)) $x135)) ((_ th-lemma arith) (= ?x178 0.0)) $x135)))
 (let ((?x88 (* b00 x00)))
 (let ((?x157 (+ r00 ?x88 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x121 (<= ?x157 0)))
 (let (($x120 (= 0 ?x157)))
 (let ((@x278 (symm (commutativity (= $x120 (= ?x157 0))) (= (= ?x157 0) $x120))))
 (let (($x253 (= ?x157 0)))
 (let ((?x144 (* (- (/ 1.0 2.0)) (* ?x198 ?x198 ?x476))))
 (let ((?x138 (* (/ 1.0 2.0) (* ?x198 ?x626 ?x626))))
 (let ((?x480 (* (/ 1.0 8.0) (* ?x198 ?x198 ?x198))))
 (let ((?x478 (* (- 2.0) (* ?x476 ?x626 ?x626))))
 (let ((?x436 (* 2.0 (* ?x198 ?x476 ?x626))))
 (let ((?x355 (* 4.0 (* ?x198 ?x476 ?x476 ?x626))))
 (let ((?x608 (* (- 4.0) (* ?x476 ?x476 ?x626 ?x626))))
 (let ((?x446 (* (- 1.0) (* ?x198 ?x198 ?x476 ?x476))))
 (let ((?x290 (* (- (/ 1.0 2.0)) (* ?x198 ?x198 ?x626))))
 (let ((?x560 (* (+ (- 1.0) ?x290 ?x446 ?x608 ?x355 ?x436 ?x478 ?x480 ?x138 ?x144) (+ ?x137 ?x151 ?x539 ?x626))))
 (let (($x558 (= ?x560 0.0)))
 (let (($x450 (not $x558)))
 (let ((?x544 (+ ?x63 ?x148 (* (- 2.0) (* ?x146 ?x147 ?x476 ?x626 ?x626)) (* (- (/ 1.0 2.0)) (* ?x63 ?x198 ?x626 ?x626)) (* (- (/ 1.0 2.0)) (* ?x146 ?x147 ?x198 ?x626 ?x626)) (* 4.0 (* ?x146 ?x147 ?x476 ?x476 ?x626 ?x626)) (* (/ 1.0 2.0) (* ?x198 ?x626 ?x626 ?x626)) (* 2.0 (* ?x198 ?x476 ?x476 ?x626 ?x626)) (* 2.0 (* ?x476 ?x626 ?x626 ?x626)) (* (/ 1.0 2.0) (* ?x198 ?x198 ?x476 ?x626 ?x626)) (* (- 4.0) (* ?x198 ?x476 ?x476 ?x476 ?x626 ?x626)) ?x517 (* (- 4.0) (* ?x476 ?x476 ?x626 ?x626 ?x626)) (* (- 2.0) (* ?x63 ?x476 ?x626 ?x626)) (* 4.0 (* ?x63 ?x476 ?x476 ?x626 ?x626)) ?x518)))
 (let (($x261 (= ?x544 0.0)))
 (let (($x520 (not $x261)))
 (let (($x523 (or $x520 $x450)))
 (let (($x387 (and $x253 $x523)))
 (let ((?x226 (* (+ (- 1.0) ?x478 ?x138 ?x608 ?x144 ?x436 ?x290 ?x446 ?x355 ?x480) (+ ?x626 ?x137 ?x151 ?x539))))
 (let ((?x419 (+ ?x626 ?x137 ?x151 ?x539 (* (- 2.0) (* ?x476 ?x626 ?x626 ?x626)) (* 2.0 (* ?x476 ?x626 ?x626 ?x63)) (* 2.0 (* ?x476 ?x626 ?x626 ?x146 ?x147)) (* (- 2.0) (* ?x198 ?x476 ?x476 ?x626 ?x626)) (* (- (/ 1.0 2.0)) (* ?x198 ?x626 ?x626 ?x626)) (* (/ 1.0 2.0) (* ?x198 ?x626 ?x626 ?x63)) (* (/ 1.0 2.0) (* ?x198 ?x626 ?x626 ?x146 ?x147)) (* (- (/ 1.0 2.0)) (* ?x198 ?x198 ?x476 ?x626 ?x626)) (* 4.0 (* ?x476 ?x476 ?x626 ?x626 ?x626)) (* (- 4.0) (* ?x476 ?x476 ?x626 ?x626 ?x63)) (* (- 4.0) (* ?x476 ?x476 ?x626 ?x626 ?x146 ?x147)) (* 4.0 (* ?x198 ?x476 ?x476 ?x476 ?x626 ?x626)))))
 (let (($x131 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x88)) 0) (or (not (= ?x419 0.0)) (not (= ?x226 0.0))))))
 (let (($x655 (exists ((b Int) (r Int) (x Int) )(! (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x166 (* ?x40 ?x43)))
 (let ((?x147 (to_real x00)))
 (let ((?x146 (to_real b00)))
 (let ((?x148 (* ?x146 ?x147)))
 (let ((?x151 (* (- 1.0) ?x148)))
 (let ((?x63 (to_real r00)))
 (let ((?x137 (* (- 1.0) ?x63)))
 (let ((?x48 (to_real r)))
 (let ((?x647 (* 4.0 (* ?x40 ?x43 ?x43 ?x48))))
 (let ((?x630 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43))))
 (let ((?x641 (* 2.0 (* ?x40 ?x43 ?x48))))
 (let ((?x640 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43))))
 (let ((?x234 (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48))))
 (let ((?x209 (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48))))
 (let ((?x199 (* ?x43 ?x48 ?x48)))
 (let ((?x643 (* (- 2.0) ?x199)))
 (let ((?x115 (+ (- 1.0) ?x643 ?x209 ?x234 ?x640 ?x641 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x48)) ?x630 ?x647 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)))))
 (let ((?x342 (+ ?x48 ?x137 ?x151 ?x166 (* (- 2.0) (* ?x43 ?x48 ?x48 ?x48)) (* 2.0 (* ?x43 ?x48 ?x48 ?x63)) (* 2.0 (* ?x43 ?x48 ?x48 ?x146 ?x147)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48 ?x63)) (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48 ?x146 ?x147)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48)) (* 4.0 (* ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48 ?x63)) (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48 ?x146 ?x147)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)))))
 (let (($x318 (not (= ?x342 0.0))))
 (let (($x124 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x124 (or $x318 (not (= (* ?x115 (+ ?x48 ?x137 ?x151 ?x166)) 0.0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x628 (exists ((b Int) (r Int) (x Int) )(! (let ((?x63 (to_real r00)))
 (let ((?x137 (* (- 1.0) ?x63)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x147 (to_real x00)))
 (let ((?x146 (to_real b00)))
 (let ((?x148 (* ?x146 ?x147)))
 (let ((?x151 (* (- 1.0) ?x148)))
 (let ((?x563 (+ ?x151 ?x48 ?x172 ?x137 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x221 (+ ?x48 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x295 (* 2.0 ?x43)))
 (let ((?x556 (+ 1.0 ?x295)))
 (let ((?x588 (+ (- 1.0) (* ?x556 ?x221 ?x221) (* (/ 1.0 2.0) (* ?x40 ?x221 ?x221)) (* (- 1.0) (* ?x556 ?x556 ?x221 ?x221)))))
 (let ((?x234 (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48))))
 (let ((?x516 (+ (- 1.0) (* 2.0 (* ?x43 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x48 ?x48 ?x40)) ?x234)))
 (let (($x601 (or (not (= (* ?x516 (+ ?x151 ?x48 ?x137 (* ?x43 ?x40))) 0.0)) (not (= (* ?x588 ?x563) 0.0)))))
 (let (($x624 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x624 $x601)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x216 (lambda ((b Int) (r Int) (x Int) )(let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x166 (* ?x40 ?x43)))
 (let ((?x147 (to_real x00)))
 (let ((?x146 (to_real b00)))
 (let ((?x148 (* ?x146 ?x147)))
 (let ((?x151 (* (- 1.0) ?x148)))
 (let ((?x63 (to_real r00)))
 (let ((?x137 (* (- 1.0) ?x63)))
 (let ((?x48 (to_real r)))
 (let ((?x647 (* 4.0 (* ?x40 ?x43 ?x43 ?x48))))
 (let ((?x630 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43))))
 (let ((?x641 (* 2.0 (* ?x40 ?x43 ?x48))))
 (let ((?x640 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43))))
 (let ((?x234 (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48))))
 (let ((?x209 (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48))))
 (let ((?x199 (* ?x43 ?x48 ?x48)))
 (let ((?x643 (* (- 2.0) ?x199)))
 (let ((?x115 (+ (- 1.0) ?x643 ?x209 ?x234 ?x640 ?x641 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x48)) ?x630 ?x647 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)))))
 (let ((?x342 (+ ?x48 ?x137 ?x151 ?x166 (* (- 2.0) (* ?x43 ?x48 ?x48 ?x48)) (* 2.0 (* ?x43 ?x48 ?x48 ?x63)) (* 2.0 (* ?x43 ?x48 ?x48 ?x146 ?x147)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48 ?x63)) (* (/ 1.0 2.0) (* ?x40 ?x48 ?x48 ?x146 ?x147)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48)) (* 4.0 (* ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48 ?x63)) (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48 ?x146 ?x147)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)))))
 (let (($x318 (not (= ?x342 0.0))))
 (let (($x124 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x502 (and $x124 (or $x318 (not (= (* ?x115 (+ ?x48 ?x137 ?x151 ?x166)) 0.0))))))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x563 (+ ?x151 ?x48 ?x172 ?x137 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x221 (+ ?x48 ?x172)))
 (let ((?x295 (* 2.0 ?x43)))
 (let ((?x556 (+ 1.0 ?x295)))
 (let ((?x588 (+ (- 1.0) (* ?x556 ?x221 ?x221) (* (/ 1.0 2.0) (* ?x40 ?x221 ?x221)) (* (- 1.0) (* ?x556 ?x556 ?x221 ?x221)))))
 (let ((?x545 (* (+ (- 1.0) (* 2.0 ?x199) (* (/ 1.0 2.0) (* ?x48 ?x48 ?x40)) ?x234) (+ ?x151 ?x48 ?x137 (* ?x43 ?x40)))))
 (let (($x601 (or (not (= ?x545 0.0)) (not (= (* ?x588 ?x563) 0.0)))))
 (let (($x624 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x631 (and $x624 $x601)))
 (rewrite (= $x631 $x502))))))))))))))))))))))))))))))))))))
 ))
 (let (($x602 (exists ((b Int) (r Int) (x Int) )(! (let ((?x63 (to_real r00)))
 (let ((?x137 (* (- 1.0) ?x63)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x147 (to_real x00)))
 (let ((?x146 (to_real b00)))
 (let ((?x148 (* ?x146 ?x147)))
 (let ((?x151 (* (- 1.0) ?x148)))
 (let ((?x563 (+ ?x151 ?x48 ?x172 ?x137 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x221 (+ ?x48 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x295 (* 2.0 ?x43)))
 (let ((?x556 (+ 1.0 ?x295)))
 (let ((?x588 (+ (- 1.0) (* ?x556 ?x221 ?x221) (* (/ 1.0 2.0) (* ?x40 ?x221 ?x221)) (* (- 1.0) (* ?x556 ?x556 ?x221 ?x221)))))
 (let ((?x234 (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48))))
 (let ((?x516 (+ (- 1.0) (* 2.0 (* ?x43 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x48 ?x48 ?x40)) ?x234)))
 (let (($x601 (or (not (= (* ?x516 (+ ?x151 ?x48 ?x137 (* ?x43 ?x40))) 0.0)) (not (= (* ?x588 ?x563) 0.0)))))
 (let (($x201 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x201 $x601)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x494 (lambda ((b Int) (r Int) (x Int) )(let ((?x63 (to_real r00)))
 (let ((?x137 (* (- 1.0) ?x63)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x147 (to_real x00)))
 (let ((?x146 (to_real b00)))
 (let ((?x148 (* ?x146 ?x147)))
 (let ((?x151 (* (- 1.0) ?x148)))
 (let ((?x563 (+ ?x151 ?x48 ?x172 ?x137 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x221 (+ ?x48 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x295 (* 2.0 ?x43)))
 (let ((?x556 (+ 1.0 ?x295)))
 (let ((?x588 (+ (- 1.0) (* ?x556 ?x221 ?x221) (* (/ 1.0 2.0) (* ?x40 ?x221 ?x221)) (* (- 1.0) (* ?x556 ?x556 ?x221 ?x221)))))
 (let ((?x234 (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48))))
 (let ((?x516 (+ (- 1.0) (* 2.0 (* ?x43 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x48 ?x48 ?x40)) ?x234)))
 (let (($x601 (or (not (= (* ?x516 (+ ?x151 ?x48 ?x137 (* ?x43 ?x40))) 0.0)) (not (= (* ?x588 ?x563) 0.0)))))
 (let (($x624 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x631 (and $x624 $x601)))
 (let (($x201 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x458 (and $x201 $x601)))
 (rewrite (= $x458 $x631)))))))))))))))))))))))))
 ))
 (let (($x80 (exists ((b Int) (r Int) (x Int) )(! (let ((?x57 (to_real 0)))
 (let ((?x67 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x48 (to_real r)))
 (let ((?x60 (- ?x48 ?x42)))
 (let ((?x74 (- (+ (to_real (- 1)) (* ?x60 ?x60 ?x67) (* ?x42 ?x60 ?x60)) (* ?x60 ?x60 ?x67 ?x67))))
 (let ((?x69 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x60) (to_real r00)) (* ?x42 ?x67))))
 (let ((?x28 (- 1)))
 (let ((?x50 (to_real ?x28)))
 (let ((?x55 (- (+ ?x50 (to_real (* r r 2 x)) (* ?x42 ?x48 ?x48)) (to_real (* r r 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x55) ?x57)) (not (= (* ?x69 ?x74) ?x57)))))))))))))))))) :qid k!28))
 ))
 (let ((?x425 (lambda ((b Int) (r Int) (x Int) )(let ((?x63 (to_real r00)))
 (let ((?x137 (* (- 1.0) ?x63)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x147 (to_real x00)))
 (let ((?x146 (to_real b00)))
 (let ((?x148 (* ?x146 ?x147)))
 (let ((?x151 (* (- 1.0) ?x148)))
 (let ((?x563 (+ ?x151 ?x48 ?x172 ?x137 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x221 (+ ?x48 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x295 (* 2.0 ?x43)))
 (let ((?x556 (+ 1.0 ?x295)))
 (let ((?x588 (+ (- 1.0) (* ?x556 ?x221 ?x221) (* (/ 1.0 2.0) (* ?x40 ?x221 ?x221)) (* (- 1.0) (* ?x556 ?x556 ?x221 ?x221)))))
 (let ((?x234 (* (- 4.0) (* ?x43 ?x43 ?x48 ?x48))))
 (let ((?x516 (+ (- 1.0) (* 2.0 (* ?x43 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x48 ?x48 ?x40)) ?x234)))
 (let (($x601 (or (not (= (* ?x516 (+ ?x151 ?x48 ?x137 (* ?x43 ?x40))) 0.0)) (not (= (* ?x588 ?x563) 0.0)))))
 (let (($x201 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x458 (and $x201 $x601)))
 (let ((?x57 (to_real 0)))
 (let ((?x67 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x60 (- ?x48 ?x42)))
 (let ((?x74 (- (+ (to_real (- 1)) (* ?x60 ?x60 ?x67) (* ?x42 ?x60 ?x60)) (* ?x60 ?x60 ?x67 ?x67))))
 (let ((?x69 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x60) ?x63) (* ?x42 ?x67))))
 (let ((?x28 (- 1)))
 (let ((?x50 (to_real ?x28)))
 (let ((?x55 (- (+ ?x50 (to_real (* r r 2 x)) (* ?x42 ?x48 ?x48)) (to_real (* r r 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (let (($x79 (and $x38 (or (not (= (* ?x46 ?x55) ?x57)) (not (= (* ?x69 ?x74) ?x57))))))
 (rewrite (= $x79 $x458))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x293 (mp (mp @x81 (quant-intro (proof-bind ?x425) (= $x80 $x602)) $x602) (rewrite (= $x602 $x602)) $x602)))
 (let ((@x170 (mp (mp @x293 (quant-intro (proof-bind ?x494) (= $x602 $x628)) $x628) (quant-intro (proof-bind ?x216) (= $x628 $x655)) $x655)))
 (let ((@x169 (mp (mp~ @x170 (sk (~ $x655 $x131)) $x131) (rewrite (= $x131 $x387)) $x387)))
 (let ((@x572 (mp (and-elim @x169 $x253) @x278 $x120)))
 (let ((@x635 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x121)) @x572 $x121)))
 (let ((@x639 ((_ th-lemma arith) @x635 (hypothesis (not $x378)) @x196 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x264) $x313)) @x265 $x313) false)))
 (let ((@x501 (lemma ((_ th-lemma arith) (lemma @x639 $x378) (hypothesis (not $x211)) false) $x211)))
 (let (($x433 (<= ?x346 0.0)))
 (let (($x587 (>= ?x325 0.0)))
 (let (($x519 (>= ?x178 0.0)))
 (let ((@x449 (lemma (unit-resolution ((_ th-lemma arith) $x519) (hypothesis (not $x519)) false) $x519)))
 (let (($x471 (<= ?x263 0.0)))
 (let (($x122 (>= ?x157 0)))
 (let ((@x589 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x122)) @x572 $x122)))
 (let ((@x629 ((_ th-lemma arith) (hypothesis (not $x587)) (hypothesis $x519) @x589 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x264) $x471)) @x265 $x471) false)))
 (let ((@x329 ((_ th-lemma arith) (unit-resolution (lemma @x629 (or (not $x519) $x587)) @x449 $x587) (hypothesis (not $x433)) false)))
 (let ((@x591 (lemma @x329 $x433)))
 (let (($x163 (<= ?x544 0.0)))
 (let (($x650 (not $x163)))
 (let (($x154 (>= ?x544 0.0)))
 (let ((@x525 (unit-resolution ((_ th-lemma arith) (or (not $x122) (not $x121) $x154 (not $x433) (not $x211))) @x635 @x589 (hypothesis (not $x154)) @x591 @x501 false)))
 (let (($x153 (= 0.0 ?x544)))
 (let (($x202 (not $x153)))
 (let ((@x227 (monotonicity (symm (commutativity (= $x153 $x261)) (= $x261 $x153)) (= $x520 $x202))))
 (let (($x453 (= ?x346 0.0)))
 (let ((@x454 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x453 (not $x433) (not $x211))) @x591 @x501 $x453)))
 (let (($x596 (or (not $x453) $x558)))
 (let ((@x600 (unit-resolution ((_ th-lemma arith) $x596) (hypothesis $x450) (hypothesis $x453) false)))
 (let ((@x445 (unit-resolution (and-elim @x169 $x523) (unit-resolution (lemma @x600 $x596) @x454 $x558) $x520)))
 (let ((@x241 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x153 $x650 (not $x154))) (mp @x445 @x227 $x202) (or $x650 (not $x154)))))
 (unit-resolution ((_ th-lemma arith) (or $x163 (not $x211) (not $x433))) (unit-resolution @x241 (lemma @x525 $x154) $x650) @x591 @x501 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      21
 :arith-eq-adapter               38
 :arith-bound-propagations-cheap 26
 :arith-bound-propagations-lp    2
 :arith-conflicts                72
 :arith-diseq                    42
 :arith-gcd-calls                6
 :arith-grobner-calls            5
 :arith-grobner-conflicts        3
 :arith-horner-calls             5
 :arith-lower                    51
 :arith-make-feasible            62
 :arith-max-columns              60
 :arith-max-rows                 16
 :arith-nla-explanations         65
 :arith-nla-lemmas               67
 :arith-patches                  6
 :arith-patches-success          6
 :arith-propagations             26
 :arith-upper                    64
 :conflicts                      11
 :decisions                      82
 :del-clause                     114
 :final-checks                   35
 :max-memory                     4.03
 :memory                         3.13
 :mk-bool-var                    182
 :mk-clause                      161
 :num-allocs                     1713588
 :num-checks                     1
 :propagations                   70
 :rlimit-count                   5251
 :time                           0.01
 :total-time                     0.02)
