unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x584 (* y00 q!2)))
 (let ((?x599 (* (- 1) ?x584)))
 (let ((?x72 (* y00 q00)))
 (let ((?x601 (+ r00 ?x72 (* (- 1) r!1) ?x599)))
 (let (($x404 (>= ?x601 0)))
 (let (($x602 (= ?x601 0)))
 (let ((?x592 (* y00 y00 y00 y00)))
 (let ((?x361 (+ (* (- 2) (* y00 y00 y00 r!1 q!2)) (* (- 1) (* y00 y00 y00 r!1)) (* (- 1) (* y00 y00 y00 r!1 q!2 q!2)) (* (- 3) (* y00 y00 q!2)) (* (- 3) (* y00 y00 q!2 q!2)) (* (- 1) (* y00 y00 q!2 q!2 q!2)) (* 2 (* y00 y00 y00 y00 q!2)) (* y00 y00 y00 y00 q!2 q!2) ?x592)))
 (let ((?x491 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x304 (* y00 y00 y00 y00 y00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x371 (+ ?x67 r!1 (* y00 y00 y00 r!1 r!1 r!1 q!2 q!2) (* (- 3) (* y00 y00 y00 y00 r!1 r!1)) (* 3 (* y00 y00 y00 y00 y00 r!1)) (* (- 6) (* y00 y00 y00 y00 r!1 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 r!1 r!1 q!2 q!2)) ?x304 (* 3 (* y00 y00 y00 y00 y00 r!1 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 y00 y00 q!2 q!2)) (* 6 (* y00 y00 y00 y00 y00 r!1 q!2)) (* 2 (* y00 y00 y00 r!1 r!1 r!1 q!2)) (* (- 2) (* y00 y00 y00 y00 y00 y00 q!2)) (* y00 y00 y00 r!1 r!1 r!1) ?x491 (* r!1 q!2) ?x599 (* y00 y00 y00 r!1 r!1) (* y00 y00 y00 r!1 r!1 q!2) (* (- 2) (* y00 y00 y00 y00 r!1)) (* (- 2) (* y00 y00 y00 y00 r!1 q!2)) (* y00 y00 y00 y00 y00 q!2))))
 (let ((?x451 (* ?x371 ?x361 (+ (* (- 1) r00) (* (- 1) ?x72) r!1 ?x584))))
 (let (($x289 (= ?x451 0)))
 (let (($x408 (not $x289)))
 (let (($x388 (and (= (+ y00 (* (- 1) y!0)) 0) $x602 $x408)))
 (let ((?x82 (* (- 1) ?x72)))
 (let ((?x181 (* q!2 y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x358 (+ r!1 ?x68 ?x181 ?x82)))
 (let ((?x532 (+ (* (- 1) (* r!1 y00 y00 y00)) (* (- 2) (* q!2 r!1 y00 y00 y00)) (* (- 1) (* q!2 q!2 r!1 y00 y00 y00)) (* (- 3) (* q!2 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00)) (* (- 1) (* q!2 q!2 q!2 y00 y00)) ?x592 (* 2 (* q!2 y00 y00 y00 y00)) (* q!2 q!2 y00 y00 y00 y00))))
 (let ((?x724 (+ r!1 ?x67 (* (- 1) ?x181) (* q!2 r!1) (* r!1 r!1 y00 y00 y00) (* q!2 r!1 r!1 y00 y00 y00) (* (- 2) (* r!1 y00 y00 y00 y00)) (* (- 2) (* q!2 r!1 y00 y00 y00 y00)) ?x304 (* q!2 y00 y00 y00 y00 y00) (* r!1 r!1 r!1 y00 y00 y00) (* 2 (* q!2 r!1 r!1 r!1 y00 y00 y00)) (* q!2 q!2 r!1 r!1 r!1 y00 y00 y00) (* (- 3) (* r!1 r!1 y00 y00 y00 y00)) (* (- 6) (* q!2 r!1 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 r!1 r!1 y00 y00 y00 y00)) (* 3 (* r!1 y00 y00 y00 y00 y00)) (* 6 (* q!2 r!1 y00 y00 y00 y00 y00)) (* 3 (* q!2 q!2 r!1 y00 y00 y00 y00 y00)) ?x491 (* (- 2) (* q!2 y00 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 y00 y00)))))
 (let (($x603 (and (= (+ y!0 ?x67) 0) (= ?x358 0) (not (= (* ?x724 ?x532 ?x358) 0)))))
 (let (($x178 (exists ((q Int) (r Int) (y Int) )(! (let ((?x72 (* y00 q00)))
 (let ((?x82 (* (- 1) ?x72)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x96 (+ r ?x68 ?x39 ?x82)))
 (let ((?x592 (* y00 y00 y00 y00)))
 (let ((?x219 (* (- 1) (* q q q y00 y00))))
 (let ((?x227 (* (- 3) (* q q y00 y00))))
 (let ((?x224 (* (- 3) (* q y00 y00))))
 (let ((?x149 (* (- 1) (* q q r y00 y00 y00))))
 (let ((?x143 (* (- 1) (* r y00 y00 y00))))
 (let ((?x727 (+ ?x143 (* (- 2) (* q r y00 y00 y00)) ?x149 ?x224 ?x227 ?x219 ?x592 (* 2 (* q y00 y00 y00 y00)) (* q q y00 y00 y00 y00))))
 (let ((?x491 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x304 (* y00 y00 y00 y00 y00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x528 (+ r ?x67 (* (- 1) ?x39) (* q r) (* r r y00 y00 y00) (* q r r y00 y00 y00) (* (- 2) (* r y00 y00 y00 y00)) (* (- 2) (* q r y00 y00 y00 y00)) ?x304 (* q y00 y00 y00 y00 y00) (* r r r y00 y00 y00) (* 2 (* q r r r y00 y00 y00)) (* q q r r r y00 y00 y00) (* (- 3) (* r r y00 y00 y00 y00)) (* (- 6) (* q r r y00 y00 y00 y00)) (* (- 3) (* q q r r y00 y00 y00 y00)) (* 3 (* r y00 y00 y00 y00 y00)) (* 6 (* q r y00 y00 y00 y00 y00)) (* 3 (* q q r y00 y00 y00 y00 y00)) ?x491 (* (- 2) (* q y00 y00 y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00 y00 y00)))))
 (let (($x101 (= ?x96 0)))
 (let (($x78 (= (+ y ?x67) 0)))
 (and $x78 $x101 (not (= (* ?x528 ?x727 ?x96) 0))))))))))))))))))))) :qid k!29))
 ))
 (let (($x303 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x122 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x300 (* (- 1) (* y00 y00 (+ 1 q) (+ 1 q) (+ 1 q)))))
 (let ((?x49 (* y00 y00)))
 (let ((?x70 (* (- 1) (* y00 y00 y00 (+ 1 q) (+ 1 q) (+ r ?x67)))))
 (let ((?x117 (+ r ?x67)))
 (let ((?x200 (+ 1 q)))
 (let ((?x461 (+ (* ?x200 ?x117) (* y00 y00 y00 ?x200 ?x117 ?x117) (* y00 y00 y00 ?x200 ?x200 ?x117 ?x117 ?x117))))
 (let (($x281 (= (* ?x461 (+ ?x70 ?x49 ?x300) (+ r ?x67 ?x68 ?x122 (* y00 ?x200))) 0)))
 (let (($x479 (not $x281)))
 (let (($x187 (= (+ r ?x68 ?x122 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x187 $x479)))))))))))))) :qid k!29))
 ))
 (let ((?x192 (lambda ((q Int) (r Int) (y Int) )(let ((?x72 (* y00 q00)))
 (let ((?x82 (* (- 1) ?x72)))
 (let ((?x39 (* q y00)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x96 (+ r ?x68 ?x39 ?x82)))
 (let ((?x592 (* y00 y00 y00 y00)))
 (let ((?x219 (* (- 1) (* q q q y00 y00))))
 (let ((?x227 (* (- 3) (* q q y00 y00))))
 (let ((?x224 (* (- 3) (* q y00 y00))))
 (let ((?x149 (* (- 1) (* q q r y00 y00 y00))))
 (let ((?x143 (* (- 1) (* r y00 y00 y00))))
 (let ((?x727 (+ ?x143 (* (- 2) (* q r y00 y00 y00)) ?x149 ?x224 ?x227 ?x219 ?x592 (* 2 (* q y00 y00 y00 y00)) (* q q y00 y00 y00 y00))))
 (let ((?x491 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x304 (* y00 y00 y00 y00 y00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x528 (+ r ?x67 (* (- 1) ?x39) (* q r) (* r r y00 y00 y00) (* q r r y00 y00 y00) (* (- 2) (* r y00 y00 y00 y00)) (* (- 2) (* q r y00 y00 y00 y00)) ?x304 (* q y00 y00 y00 y00 y00) (* r r r y00 y00 y00) (* 2 (* q r r r y00 y00 y00)) (* q q r r r y00 y00 y00) (* (- 3) (* r r y00 y00 y00 y00)) (* (- 6) (* q r r y00 y00 y00 y00)) (* (- 3) (* q q r r y00 y00 y00 y00)) (* 3 (* r y00 y00 y00 y00 y00)) (* 6 (* q r y00 y00 y00 y00 y00)) (* 3 (* q q r y00 y00 y00 y00 y00)) ?x491 (* (- 2) (* q y00 y00 y00 y00 y00 y00)) (* (- 1) (* q q y00 y00 y00 y00 y00 y00)))))
 (let (($x101 (= ?x96 0)))
 (let (($x78 (= (+ y ?x67) 0)))
 (let (($x735 (and $x78 $x101 (not (= (* ?x528 ?x727 ?x96) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x122 (* (- 1) ?x36)))
 (let ((?x300 (* (- 1) (* y00 y00 (+ 1 q) (+ 1 q) (+ 1 q)))))
 (let ((?x49 (* y00 y00)))
 (let ((?x70 (* (- 1) (* y00 y00 y00 (+ 1 q) (+ 1 q) (+ r ?x67)))))
 (let ((?x117 (+ r ?x67)))
 (let ((?x200 (+ 1 q)))
 (let ((?x461 (+ (* ?x200 ?x117) (* y00 y00 y00 ?x200 ?x117 ?x117) (* y00 y00 y00 ?x200 ?x200 ?x117 ?x117 ?x117))))
 (let (($x281 (= (* ?x461 (+ ?x70 ?x49 ?x300) (+ r ?x67 ?x68 ?x122 (* y00 ?x200))) 0)))
 (let (($x479 (not $x281)))
 (let (($x187 (= (+ r ?x68 ?x122 (* y00 q)) 0)))
 (let (($x71 (and (= (+ y00 (* (- 1) y)) 0) $x187 $x479)))
 (rewrite (= $x71 $x735))))))))))))))))))))))))))))))))))
 ))
 (let (($x121 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x122 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x300 (* (- 1) (* y00 y00 (+ 1 q) (+ 1 q) (+ 1 q)))))
 (let ((?x49 (* y00 y00)))
 (let ((?x70 (* (- 1) (* y00 y00 y00 (+ 1 q) (+ 1 q) (+ r ?x67)))))
 (let ((?x117 (+ r ?x67)))
 (let ((?x200 (+ 1 q)))
 (let ((?x461 (+ (* ?x200 ?x117) (* y00 y00 y00 ?x200 ?x117 ?x117) (* y00 y00 y00 ?x200 ?x200 ?x117 ?x117 ?x117))))
 (let (($x281 (= (* ?x461 (+ ?x70 ?x49 ?x300) (+ r ?x67 ?x68 ?x122 (* y00 ?x200))) 0)))
 (let (($x479 (not $x281)))
 (let (($x187 (= (+ r ?x68 ?x122 (* y00 q)) 0)))
 (and (= (+ ?x67 y) 0) $x187 $x479)))))))))))))) :qid k!29))
 ))
 (let ((?x132 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x122 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x300 (* (- 1) (* y00 y00 (+ 1 q) (+ 1 q) (+ 1 q)))))
 (let ((?x49 (* y00 y00)))
 (let ((?x70 (* (- 1) (* y00 y00 y00 (+ 1 q) (+ 1 q) (+ r ?x67)))))
 (let ((?x117 (+ r ?x67)))
 (let ((?x200 (+ 1 q)))
 (let ((?x461 (+ (* ?x200 ?x117) (* y00 y00 y00 ?x200 ?x117 ?x117) (* y00 y00 y00 ?x200 ?x200 ?x117 ?x117 ?x117))))
 (let (($x281 (= (* ?x461 (+ ?x70 ?x49 ?x300) (+ r ?x67 ?x68 ?x122 (* y00 ?x200))) 0)))
 (let (($x479 (not $x281)))
 (let (($x187 (= (+ r ?x68 ?x122 (* y00 q)) 0)))
 (let (($x71 (and (= (+ y00 (* (- 1) y)) 0) $x187 $x479)))
 (let (($x95 (and (= (+ ?x67 y) 0) $x187 $x479)))
 (rewrite (= $x95 $x71))))))))))))))))))
 ))
 (let (($x62 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x56 (+ (* ?x45 ?x42) (* ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let ((?x52 (- (+ (* (- 1) ?x45 ?x45 ?x42 y00 y00 y00) (* y00 y00)) (* ?x45 ?x45 ?x45 y00 y00))))
 (let ((?x57 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x52 ?x56)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x57 0))))))))) :qid k!29))
 ))
 (let ((?x216 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x122 (* (- 1) ?x36)))
 (let ((?x68 (* (- 1) r00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x300 (* (- 1) (* y00 y00 (+ 1 q) (+ 1 q) (+ 1 q)))))
 (let ((?x49 (* y00 y00)))
 (let ((?x70 (* (- 1) (* y00 y00 y00 (+ 1 q) (+ 1 q) (+ r ?x67)))))
 (let ((?x117 (+ r ?x67)))
 (let ((?x200 (+ 1 q)))
 (let ((?x461 (+ (* ?x200 ?x117) (* y00 y00 y00 ?x200 ?x117 ?x117) (* y00 y00 y00 ?x200 ?x200 ?x117 ?x117 ?x117))))
 (let (($x281 (= (* ?x461 (+ ?x70 ?x49 ?x300) (+ r ?x67 ?x68 ?x122 (* y00 ?x200))) 0)))
 (let (($x479 (not $x281)))
 (let (($x187 (= (+ r ?x68 ?x122 (* y00 q)) 0)))
 (let (($x95 (and (= (+ ?x67 y) 0) $x187 $x479)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x56 (+ (* ?x45 ?x42) (* ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let ((?x52 (- (+ (* (- 1) ?x45 ?x45 ?x42 y00 y00 y00) ?x49) (* ?x45 ?x45 ?x45 y00 y00))))
 (let (($x59 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x52 ?x56) 0))))
 (let (($x61 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x59))))
 (rewrite (= $x61 $x95)))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x295 (mp (mp @x63 (quant-intro (proof-bind ?x216) (= $x62 $x121)) $x121) (rewrite (= $x121 $x121)) $x121)))
 (let ((@x123 (mp (mp @x295 (quant-intro (proof-bind ?x132) (= $x121 $x303)) $x303) (quant-intro (proof-bind ?x192) (= $x303 $x178)) $x178)))
 (let ((@x414 (mp (mp~ @x123 (sk (~ $x178 $x603)) $x603) (rewrite (= $x603 $x388)) $x388)))
 (let ((@x594 (and-elim @x414 $x602)))
 (let ((@x541 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x602) $x404)) @x594 $x404)))
 (let (($x353 (<= ?x601 0)))
 (let ((@x572 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x602) $x353)) @x594 $x353)))
 (let (($x605 (not (<= ?x451 0))))
 (let (($x397 (>= ?x451 0)))
 (let ((@x591 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x289 $x605 (not $x397))) (and-elim @x414 $x408) (or $x605 (not $x397)))))
 (let ((@x590 (unit-resolution @x591 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x397)) @x572 @x541 false) $x397) $x605)))
 ((_ th-lemma arith farkas 1 1 1) @x590 @x572 @x541 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        22
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             150
 :arith-nonlinear-bounds    14
 :arith-num-rows            5
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.59
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1082759
 :num-checks                1
 :propagations              6
 :rlimit-count              3216
 :time                      0.01
 :total-time                0.01)
