unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x413 (* (- 1) x!1)))
 (let ((?x348 (+ y00 x00 (* (- 1) y!0) ?x413)))
 (let (($x460 (>= ?x348 0)))
 (let (($x349 (= ?x348 0)))
 (let ((?x611 (* y!0 y!0 y!0)))
 (let ((?x514 (* 4 y!0)))
 (let ((?x467 (* x!1 x!1 x!1)))
 (let ((?x488 (+ 1 y!0)))
 (let ((?x518 (+ (- 1) x!1)))
 (let ((?x464 (* ?x518 ?x518 ?x518 ?x488 ?x488 ?x488)))
 (let ((?x132 (* x!1 x!1)))
 (let ((?x493 (* (- 1) ?x132)))
 (let ((?x113 (* y!0 y!0)))
 (let ((?x487 (* 4 ?x113)))
 (let ((?x87 (* y!0 y!0 y!0 x!1 x!1)))
 (let ((?x75 (* y!0 x!1 x!1 x!1)))
 (let ((?x573 (+ 1 (* (- 8) (* y!0 y!0 x!1)) ?x75 (* 2 (* y!0 x!1 x!1)) ?x87 ?x487 ?x493 ?x464 ?x467 ?x514 ?x413 (* (- 2) (* y!0 y!0 y!0 x!1)) (* (- 7) (* y!0 x!1)) (* 4 (* y!0 y!0 x!1 x!1)) ?x611)))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x110 (+ ?x65 ?x72 y!0 x!1)))
 (let ((?x346 (* ?x110 ?x573)))
 (let (($x70 (= ?x346 0)))
 (let (($x372 (not $x70)))
 (let ((?x388 (* (- 3) x!1)))
 (let ((?x482 (+ 1 x!1)))
 (let ((?x461 (+ (- 1) y!0)))
 (let ((?x475 (* ?x461 ?x461 ?x461 ?x482 ?x482 ?x482)))
 (let ((?x108 (* 2 y!0)))
 (let ((?x109 (* (- 1) ?x467)))
 (let ((?x326 (* (- 3) ?x132)))
 (let ((?x284 (* (- 2) ?x113)))
 (let ((?x391 (+ (- 1) (* (- 4) (* y!0 y!0 x!1)) ?x75 (* 4 (* y!0 x!1 x!1)) ?x87 ?x284 ?x326 ?x109 ?x108 ?x475 ?x388 (* 2 (* y!0 y!0 y!0 x!1)) (* 5 (* y!0 x!1)) (* (- 2) (* y!0 y!0 x!1 x!1)) ?x611)))
 (let ((?x385 (* ?x110 ?x391)))
 (let (($x508 (= ?x385 0)))
 (let (($x256 (or (not $x508) $x372)))
 (let (($x312 (and $x349 $x256)))
 (let ((?x477 (* x!1 x!1 x!1 y!0)))
 (let ((?x328 (* x!1 x!1 y!0 y!0 y!0)))
 (let ((?x255 (+ 1 ?x413 ?x514 ?x487 ?x611 (* (- 2) (* x!1 y!0 y!0 y!0)) ?x328 ?x493 (* (- 7) (* x!1 y!0)) (* 2 (* x!1 x!1 y!0)) (* (- 8) (* x!1 y!0 y!0)) (* 4 (* x!1 x!1 y!0 y!0)) ?x464 ?x477 ?x467)))
 (let ((?x114 (+ x!1 y!0 ?x65 ?x72)))
 (let ((?x465 (+ (- 1) ?x388 ?x108 ?x284 ?x611 (* 2 (* x!1 y!0 y!0 y!0)) ?x328 ?x326 (* 5 (* x!1 y!0)) (* 4 (* x!1 x!1 y!0)) (* (- 4) (* x!1 y!0 y!0)) (* (- 2) (* x!1 x!1 y!0 y!0)) ?x477 ?x109 ?x475)))
 (let (($x517 (and (= ?x114 0) (or (not (= (* ?x114 ?x465) 0)) (not (= (* ?x114 ?x255) 0))))))
 (let (($x471 (exists ((x Int) (y Int) )(! (let ((?x362 (* x x x)))
 (let ((?x345 (* x x x y)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x266 (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125)))
 (let ((?x221 (* x x y y)))
 (let ((?x397 (* 4 ?x221)))
 (let ((?x206 (* x x y)))
 (let ((?x288 (* 2 ?x206)))
 (let ((?x197 (* x x)))
 (let ((?x302 (* (- 1) ?x197)))
 (let ((?x186 (* x x y y y)))
 (let ((?x184 (* x y y y)))
 (let ((?x258 (* (- 2) ?x184)))
 (let ((?x180 (* y y y)))
 (let ((?x173 (* y y)))
 (let ((?x394 (* 4 ?x173)))
 (let ((?x393 (* 4 y)))
 (let ((?x399 (* (- 1) x)))
 (let ((?x478 (+ 1 ?x399 ?x393 ?x394 ?x180 ?x258 ?x186 ?x302 (* (- 7) (* x y)) ?x288 (* (- 8) (* x y y)) ?x397 ?x266 ?x345 ?x362)))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let ((?x129 (+ 1 x)))
 (let ((?x90 (+ (- 1) y)))
 (let ((?x379 (* ?x90 ?x90 ?x90 ?x129 ?x129 ?x129)))
 (let ((?x586 (* (- 1) ?x362)))
 (let ((?x618 (* (- 2) ?x221)))
 (let ((?x217 (* x y y)))
 (let ((?x617 (* (- 4) ?x217)))
 (let ((?x616 (* 4 ?x206)))
 (let ((?x202 (* x y)))
 (let ((?x615 (* 5 ?x202)))
 (let ((?x601 (* (- 3) ?x197)))
 (let ((?x492 (* 2 ?x184)))
 (let ((?x613 (* (- 2) ?x173)))
 (let ((?x448 (* 2 y)))
 (let ((?x600 (* (- 3) x)))
 (let ((?x463 (+ (- 1) ?x600 ?x448 ?x613 ?x180 ?x492 ?x186 ?x601 ?x615 ?x616 ?x617 ?x618 ?x345 ?x586 ?x379)))
 (let (($x91 (= ?x86 0)))
 (and $x91 (or (not (= (* ?x86 ?x463) 0)) (not (= (* ?x86 ?x478) 0)))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x208 (exists ((x Int) (y Int) )(! (let ((?x362 (* x x x)))
 (let ((?x345 (* x x x y)))
 (let ((?x333 (* (- 1) (* x x 1))))
 (let ((?x324 (* (- 1) (* x 1 1))))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x266 (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125)))
 (let ((?x221 (* x x y y)))
 (let ((?x397 (* 4 ?x221)))
 (let ((?x206 (* x x y)))
 (let ((?x288 (* 2 ?x206)))
 (let ((?x186 (* x x y y y)))
 (let ((?x184 (* x y y y)))
 (let ((?x258 (* (- 2) ?x184)))
 (let ((?x180 (* y y y)))
 (let ((?x173 (* y y)))
 (let ((?x394 (* 4 ?x173)))
 (let ((?x393 (* 4 y)))
 (let ((?x398 (+ 1 ?x393 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x394 (* (- 1) (* x 1 y y)) ?x180 ?x258 ?x186 (* (- 3) (* x y)) ?x288 (* (- 5) (* x y y)) ?x397 ?x266 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x 1 y)) (* (- 1) (* x y 1)) ?x324 ?x333 (* (- 1) (* x (- 1) y)) ?x345 ?x362)))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let (($x404 (not (= (* ?x86 ?x398) 0))))
 (let ((?x129 (+ 1 x)))
 (let ((?x90 (+ (- 1) y)))
 (let ((?x379 (* ?x90 ?x90 ?x90 ?x129 ?x129 ?x129)))
 (let ((?x586 (* (- 1) ?x362)))
 (let ((?x618 (* (- 2) ?x221)))
 (let ((?x202 (* x y)))
 (let ((?x615 (* 5 ?x202)))
 (let ((?x197 (* x x)))
 (let ((?x302 (* (- 1) ?x197)))
 (let ((?x492 (* 2 ?x184)))
 (let ((?x448 (* 2 y)))
 (let ((?x399 (* (- 1) x)))
 (let ((?x548 (+ (- 1) ?x399 ?x448 (* (- 1) ?x173) ?x180 ?x492 ?x186 (* (- 1) (* y x 1)) ?x302 ?x615 (* 3 ?x206) (* (- 1) (* y (- 1) x 1)) (* (- 2) (* x y y)) ?x618 (* (- 1) (* y y 1 x)) (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y (- 1) x x)) ?x324 ?x333 (* (- 1) (* y (- 1) 1 x)) ?x345 (* (- 1) (* y y x 1)) (* (- 1) (* y 1 1)) (* (- 1) (* y 1 x)) (* (- 1) (* x 1)) ?x586 ?x379 (* (- 1) (* x 1 x)))))
 (let (($x91 (= ?x86 0)))
 (and $x91 (or (not (= (* ?x86 ?x548) 0)) $x404))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x152 (lambda ((x Int) (y Int) )(let ((?x362 (* x x x)))
 (let ((?x345 (* x x x y)))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x266 (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125)))
 (let ((?x221 (* x x y y)))
 (let ((?x397 (* 4 ?x221)))
 (let ((?x206 (* x x y)))
 (let ((?x288 (* 2 ?x206)))
 (let ((?x197 (* x x)))
 (let ((?x302 (* (- 1) ?x197)))
 (let ((?x186 (* x x y y y)))
 (let ((?x184 (* x y y y)))
 (let ((?x258 (* (- 2) ?x184)))
 (let ((?x180 (* y y y)))
 (let ((?x173 (* y y)))
 (let ((?x394 (* 4 ?x173)))
 (let ((?x393 (* 4 y)))
 (let ((?x399 (* (- 1) x)))
 (let ((?x478 (+ 1 ?x399 ?x393 ?x394 ?x180 ?x258 ?x186 ?x302 (* (- 7) (* x y)) ?x288 (* (- 8) (* x y y)) ?x397 ?x266 ?x345 ?x362)))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let ((?x129 (+ 1 x)))
 (let ((?x90 (+ (- 1) y)))
 (let ((?x379 (* ?x90 ?x90 ?x90 ?x129 ?x129 ?x129)))
 (let ((?x586 (* (- 1) ?x362)))
 (let ((?x618 (* (- 2) ?x221)))
 (let ((?x217 (* x y y)))
 (let ((?x617 (* (- 4) ?x217)))
 (let ((?x616 (* 4 ?x206)))
 (let ((?x202 (* x y)))
 (let ((?x615 (* 5 ?x202)))
 (let ((?x601 (* (- 3) ?x197)))
 (let ((?x492 (* 2 ?x184)))
 (let ((?x613 (* (- 2) ?x173)))
 (let ((?x448 (* 2 y)))
 (let ((?x600 (* (- 3) x)))
 (let ((?x463 (+ (- 1) ?x600 ?x448 ?x613 ?x180 ?x492 ?x186 ?x601 ?x615 ?x616 ?x617 ?x618 ?x345 ?x586 ?x379)))
 (let (($x91 (= ?x86 0)))
 (let (($x495 (and $x91 (or (not (= (* ?x86 ?x463) 0)) (not (= (* ?x86 ?x478) 0))))))
 (let ((?x333 (* (- 1) (* x x 1))))
 (let ((?x324 (* (- 1) (* x 1 1))))
 (let ((?x398 (+ 1 ?x393 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x394 (* (- 1) (* x 1 y y)) ?x180 ?x258 ?x186 (* (- 3) ?x202) ?x288 (* (- 5) ?x217) ?x397 ?x266 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x 1 y)) (* (- 1) (* x y 1)) ?x324 ?x333 (* (- 1) (* x (- 1) y)) ?x345 ?x362)))
 (let (($x404 (not (= (* ?x86 ?x398) 0))))
 (let ((?x548 (+ (- 1) ?x399 ?x448 (* (- 1) ?x173) ?x180 ?x492 ?x186 (* (- 1) (* y x 1)) ?x302 ?x615 (* 3 ?x206) (* (- 1) (* y (- 1) x 1)) (* (- 2) ?x217) ?x618 (* (- 1) (* y y 1 x)) (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y (- 1) x x)) ?x324 ?x333 (* (- 1) (* y (- 1) 1 x)) ?x345 (* (- 1) (* y y x 1)) (* (- 1) (* y 1 1)) (* (- 1) (* y 1 x)) (* (- 1) (* x 1)) ?x586 ?x379 (* (- 1) (* x 1 x)))))
 (let (($x570 (and $x91 (or (not (= (* ?x86 ?x548) 0)) $x404))))
 (rewrite (= $x570 $x495))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x269 (exists ((x Int) (y Int) )(! (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x266 (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125)))
 (let ((?x358 (+ (* ?x81 ?x81 ?x125 ?x125 ?x125) ?x266 (* ?x81 ?x81 ?x125 ?x125) (* ?x81 ?x81 ?x81 ?x125))))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x303 (+ x ?x65 ?x72 y)))
 (let ((?x129 (+ 1 x)))
 (let ((?x90 (+ (- 1) y)))
 (let ((?x379 (* ?x90 ?x90 ?x90 ?x129 ?x129 ?x129)))
 (let ((?x98 (+ (* ?x90 ?x90 ?x90 ?x129 ?x129) ?x379 (* ?x90 ?x90 ?x129 ?x129) (* ?x90 ?x129 ?x129 ?x129))))
 (and (= ?x303 0) (or (not (= (* ?x303 ?x98) 0)) (not (= (* ?x303 ?x358) 0))))))))))))))) :qid k!27))
 ))
 (let ((?x528 (lambda ((x Int) (y Int) )(let ((?x362 (* x x x)))
 (let ((?x345 (* x x x y)))
 (let ((?x333 (* (- 1) (* x x 1))))
 (let ((?x324 (* (- 1) (* x 1 1))))
 (let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x266 (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125)))
 (let ((?x221 (* x x y y)))
 (let ((?x397 (* 4 ?x221)))
 (let ((?x206 (* x x y)))
 (let ((?x288 (* 2 ?x206)))
 (let ((?x186 (* x x y y y)))
 (let ((?x184 (* x y y y)))
 (let ((?x258 (* (- 2) ?x184)))
 (let ((?x180 (* y y y)))
 (let ((?x173 (* y y)))
 (let ((?x394 (* 4 ?x173)))
 (let ((?x393 (* 4 y)))
 (let ((?x398 (+ 1 ?x393 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x394 (* (- 1) (* x 1 y y)) ?x180 ?x258 ?x186 (* (- 3) (* x y)) ?x288 (* (- 5) (* x y y)) ?x397 ?x266 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x 1 y)) (* (- 1) (* x y 1)) ?x324 ?x333 (* (- 1) (* x (- 1) y)) ?x345 ?x362)))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x86 (+ x y ?x65 ?x72)))
 (let (($x404 (not (= (* ?x86 ?x398) 0))))
 (let ((?x129 (+ 1 x)))
 (let ((?x90 (+ (- 1) y)))
 (let ((?x379 (* ?x90 ?x90 ?x90 ?x129 ?x129 ?x129)))
 (let ((?x586 (* (- 1) ?x362)))
 (let ((?x618 (* (- 2) ?x221)))
 (let ((?x202 (* x y)))
 (let ((?x615 (* 5 ?x202)))
 (let ((?x197 (* x x)))
 (let ((?x302 (* (- 1) ?x197)))
 (let ((?x492 (* 2 ?x184)))
 (let ((?x448 (* 2 y)))
 (let ((?x399 (* (- 1) x)))
 (let ((?x548 (+ (- 1) ?x399 ?x448 (* (- 1) ?x173) ?x180 ?x492 ?x186 (* (- 1) (* y x 1)) ?x302 ?x615 (* 3 ?x206) (* (- 1) (* y (- 1) x 1)) (* (- 2) (* x y y)) ?x618 (* (- 1) (* y y 1 x)) (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y (- 1) x x)) ?x324 ?x333 (* (- 1) (* y (- 1) 1 x)) ?x345 (* (- 1) (* y y x 1)) (* (- 1) (* y 1 1)) (* (- 1) (* y 1 x)) (* (- 1) (* x 1)) ?x586 ?x379 (* (- 1) (* x 1 x)))))
 (let (($x91 (= ?x86 0)))
 (let (($x570 (and $x91 (or (not (= (* ?x86 ?x548) 0)) $x404))))
 (let ((?x358 (+ (* ?x81 ?x81 ?x125 ?x125 ?x125) ?x266 (* ?x81 ?x81 ?x125 ?x125) (* ?x81 ?x81 ?x81 ?x125))))
 (let ((?x303 (+ x ?x65 ?x72 y)))
 (let ((?x98 (+ (* ?x90 ?x90 ?x90 ?x129 ?x129) ?x379 (* ?x90 ?x90 ?x129 ?x129) (* ?x90 ?x129 ?x129 ?x129))))
 (let (($x294 (and (= ?x303 0) (or (not (= (* ?x303 ?x98) 0)) (not (= (* ?x303 ?x358) 0))))))
 (rewrite (= $x294 $x570)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((x Int) (y Int) )(! (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x56 (+ (* ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38))))
 (let (($x60 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x56) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x60)))))))) :qid k!27))
 ))
 (let ((?x159 (lambda ((x Int) (y Int) )(let ((?x125 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x266 (* ?x81 ?x81 ?x81 ?x125 ?x125 ?x125)))
 (let ((?x358 (+ (* ?x81 ?x81 ?x125 ?x125 ?x125) ?x266 (* ?x81 ?x81 ?x125 ?x125) (* ?x81 ?x81 ?x81 ?x125))))
 (let ((?x72 (* (- 1) x00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x303 (+ x ?x65 ?x72 y)))
 (let ((?x129 (+ 1 x)))
 (let ((?x90 (+ (- 1) y)))
 (let ((?x379 (* ?x90 ?x90 ?x90 ?x129 ?x129 ?x129)))
 (let ((?x98 (+ (* ?x90 ?x90 ?x90 ?x129 ?x129) ?x379 (* ?x90 ?x90 ?x129 ?x129) (* ?x90 ?x129 ?x129 ?x129))))
 (let (($x294 (and (= ?x303 0) (or (not (= (* ?x303 ?x98) 0)) (not (= (* ?x303 ?x358) 0))))))
 (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x56 (+ (* ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38))))
 (let (($x60 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x56) 0)))))
 (let (($x61 (and (= (+ (- (- x y00) x00) y) 0) $x60)))
 (rewrite (= $x61 $x294)))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x285 (mp (mp @x63 (quant-intro (proof-bind ?x159) (= $x62 $x269)) $x269) (rewrite (= $x269 $x269)) $x269)))
 (let ((@x107 (mp (mp @x285 (quant-intro (proof-bind ?x528) (= $x269 $x208)) $x208) (quant-intro (proof-bind ?x152) (= $x208 $x471)) $x471)))
 (let ((@x84 (mp (mp~ @x107 (sk (~ $x471 $x517)) $x517) (rewrite (= $x517 $x312)) $x312)))
 (let ((@x323 (and-elim @x84 $x349)))
 (let ((@x126 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x349) $x460)) @x323 $x460)))
 (let (($x503 (<= ?x348 0)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x349) $x503)) @x323 $x503)))
 (let (($x400 (not (<= ?x346 0))))
 (let (($x310 (>= ?x346 0)))
 (let (($x621 (>= ?x385 0)))
 (let (($x622 (<= ?x385 0)))
 (let ((@x262 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x508 (not $x622) (not $x621))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x622)) @x295 @x126 false) $x622) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x621)) @x295 @x126 false) $x621) $x508)))
 (let ((@x210 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x70 $x400 (not $x310))) (unit-resolution (and-elim @x84 $x256) @x262 $x372) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x310)) @x295 @x126 false) $x310) $x400)))
 ((_ th-lemma arith farkas 1 1 1) @x210 @x295 @x126 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             184
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.66
 :memory                    3.16
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1213005
 :num-checks                1
 :propagations              14
 :rlimit-count              3371
 :time                      0.01
 :total-time                0.01)
