unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x364 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x232 (* (- 1) ?x36)))
 (let ((?x245 (* (- 2) x00)))
 (let ((?x482 (+ r00 ?x245 ?x232 ?x364 (* 2 x!0) (* (- 1) r!1))))
 (let (($x486 (<= ?x482 0)))
 (let (($x478 (= ?x482 0)))
 (let ((?x812 (* 2 (* x!0 x!0 x!0))))
 (let ((?x455 (* 2 (* x!0 x!0))))
 (let ((?x181 (* (- 1) (* r!1 r!1 r!1))))
 (let ((?x139 (+ (* 2 (* x00 r!1)) (* (- 1) (* x!0 r!1 r!1 r!1)) (* (- 1) (* r00 r!1)) (* (- 2) (* x00 x!0 x!0)) (* r00 r00 x!0 r!1) (* (- 1) (* r00 r00 x!0 x!0)) (* (- 3) (* x!0 x!0 r!1)) (* x!0 x!0 r!1 r!1) (* (- 3) (* x!0 r!1)) ?x181 (* (- 2) (* x00 x!0)) (* 2 (* x00 x!0 r!1)) (* (- 1) (* r00 x!0 r!1)) (* r00 x!0 x!0) (* (- 1) (* r00 r00 x!0)) ?x364 ?x455 (* 2 (* x!0 r!1 r!1)) (* r00 x!0) (* r00 r00 r!1) ?x812)))
 (let (($x745 (= ?x139 0)))
 (let (($x75 (not $x745)))
 (let (($x185 (and $x478 $x75)))
 (let ((?x315 (+ ?x364 (* 2 (* r!1 x00)) (* (- 3) (* r!1 x!0)) (* 2 (* r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r!1 x!0)) ?x181 (* (- 1) (* r!1 r00)) (* (- 2) (* x!0 x!0 x00)) (* r!1 x!0 r00 r00) (* (- 1) (* x!0 x!0 r00 r00)) ?x455 (* (- 3) (* r!1 x!0 x!0)) (* r!1 r!1 x!0 x!0) ?x812 (* (- 2) (* x!0 x00)) (* 2 (* r!1 x!0 x00)) (* (- 1) (* r!1 x!0 r00)) (* x!0 x!0 r00) (* r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* x!0 r00))))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 1) r00)))
 (let (($x732 (and (= (+ r!1 (* (- 2) x!0) ?x123 (* (- 1) ?x364) ?x35 ?x36) 0) (not (= ?x315 0)))))
 (let (($x772 (exists ((r Int) (x Int) )(! (let ((?x829 (* (- 1) (* x r00 r00))))
 (let ((?x726 (* r r00 r00)))
 (let ((?x664 (* x x r00)))
 (let ((?x827 (* (- 2) (* x x00))))
 (let ((?x510 (* 2 (* x x x))))
 (let ((?x384 (* r r x x)))
 (let ((?x824 (* (- 3) (* r x x))))
 (let ((?x823 (* 2 (* x x))))
 (let ((?x822 (* (- 1) (* x x r00 r00))))
 (let ((?x327 (* r x r00 r00)))
 (let ((?x821 (* (- 2) (* x x x00))))
 (let ((?x189 (* (- 1) (* r r r))))
 (let ((?x242 (* (- 1) (* r r r x))))
 (let ((?x479 (* 2 (* r r x))))
 (let ((?x253 (* (- 3) (* r x))))
 (let ((?x30 (* r r)))
 (let ((?x846 (+ ?x30 (* 2 (* r x00)) ?x253 ?x479 ?x242 ?x189 (* (- 1) (* r r00)) ?x821 ?x327 ?x822 ?x823 ?x824 ?x384 ?x510 ?x827 (* 2 (* r x x00)) (* (- 1) (* r x r00)) ?x664 ?x726 ?x829 (* x r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) ?x30)))
 (let ((?x123 (* (- 1) r00)))
 (let ((?x122 (* (- 2) x)))
 (let (($x126 (= (+ r ?x122 ?x123 ?x124 ?x35 ?x36) 0)))
 (and $x126 (not (= ?x846 0)))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x263 (exists ((r Int) (x Int) )(! (let ((?x71 (* (- 1) r)))
 (let ((?x199 (+ x ?x71)))
 (let ((?x221 (+ 1 r)))
 (let ((?x568 (* ?x221 ?x199 ?x199)))
 (let ((?x723 (* r00 ?x199 ?x199)))
 (let ((?x688 (* ?x221 ?x221 ?x199 ?x199)))
 (let ((?x257 (* ?x221 ?x221 ?x221 ?x199)))
 (let ((?x146 (* r00 ?x221 ?x199)))
 (let ((?x256 (+ ?x146 ?x257 (* (- 2) (* x00 ?x199 ?x199)) (* (- 1) (* ?x221 ?x221 ?x199)) (* (- 1) (* r00 r00 ?x199 ?x199)) ?x688 (* 2 (* ?x199 ?x199 ?x199)) (* (- 2) (* x00 ?x221 ?x199)) ?x723 (* (- 1) (* r00 r00 ?x221 ?x199)) ?x568)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x122 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x124 (* (- 1) ?x30)))
 (let ((?x123 (* (- 1) r00)))
 (and (= (+ r ?x123 ?x124 ?x122 ?x35 ?x36) 0) (not (= ?x256 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x778 (lambda ((r Int) (x Int) )(let ((?x829 (* (- 1) (* x r00 r00))))
 (let ((?x726 (* r r00 r00)))
 (let ((?x664 (* x x r00)))
 (let ((?x827 (* (- 2) (* x x00))))
 (let ((?x510 (* 2 (* x x x))))
 (let ((?x384 (* r r x x)))
 (let ((?x824 (* (- 3) (* r x x))))
 (let ((?x823 (* 2 (* x x))))
 (let ((?x822 (* (- 1) (* x x r00 r00))))
 (let ((?x327 (* r x r00 r00)))
 (let ((?x821 (* (- 2) (* x x x00))))
 (let ((?x189 (* (- 1) (* r r r))))
 (let ((?x242 (* (- 1) (* r r r x))))
 (let ((?x479 (* 2 (* r r x))))
 (let ((?x253 (* (- 3) (* r x))))
 (let ((?x30 (* r r)))
 (let ((?x846 (+ ?x30 (* 2 (* r x00)) ?x253 ?x479 ?x242 ?x189 (* (- 1) (* r r00)) ?x821 ?x327 ?x822 ?x823 ?x824 ?x384 ?x510 ?x827 (* 2 (* r x x00)) (* (- 1) (* r x r00)) ?x664 ?x726 ?x829 (* x r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) ?x30)))
 (let ((?x123 (* (- 1) r00)))
 (let ((?x122 (* (- 2) x)))
 (let (($x126 (= (+ r ?x122 ?x123 ?x124 ?x35 ?x36) 0)))
 (let (($x852 (and $x126 (not (= ?x846 0)))))
 (let ((?x71 (* (- 1) r)))
 (let ((?x199 (+ x ?x71)))
 (let ((?x221 (+ 1 r)))
 (let ((?x568 (* ?x221 ?x199 ?x199)))
 (let ((?x723 (* r00 ?x199 ?x199)))
 (let ((?x688 (* ?x221 ?x221 ?x199 ?x199)))
 (let ((?x257 (* ?x221 ?x221 ?x221 ?x199)))
 (let ((?x146 (* r00 ?x221 ?x199)))
 (let ((?x256 (+ ?x146 ?x257 (* (- 2) (* x00 ?x199 ?x199)) (* (- 1) (* ?x221 ?x221 ?x199)) (* (- 1) (* r00 r00 ?x199 ?x199)) ?x688 (* 2 (* ?x199 ?x199 ?x199)) (* (- 2) (* x00 ?x221 ?x199)) ?x723 (* (- 1) (* r00 r00 ?x221 ?x199)) ?x568)))
 (let (($x265 (and (= (+ r ?x123 ?x124 ?x122 ?x35 ?x36) 0) (not (= ?x256 0)))))
 (rewrite (= $x265 $x852)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x243 (exists ((r Int) (x Int) )(! (let ((?x71 (* (- 1) r)))
 (let ((?x199 (+ x ?x71)))
 (let ((?x221 (+ 1 r)))
 (let ((?x568 (* ?x221 ?x199 ?x199)))
 (let ((?x553 (* r00 r00 ?x221 ?x199)))
 (let ((?x271 (* r00 r00 ?x199 ?x199)))
 (let ((?x442 (* ?x221 ?x221 ?x199)))
 (let ((?x580 (+ (* (- 1) (* r00 ?x221 ?x199)) (* (- 1) (* ?x221 ?x221 ?x221 ?x199)) (* 2 (* x00 ?x199 ?x199)) ?x442 ?x271 (* (- 1) (* ?x221 ?x221 ?x199 ?x199)) (* (- 2) (* ?x199 ?x199 ?x199)) (* 2 (* x00 ?x221 ?x199)) (* (- 1) (* r00 ?x199 ?x199)) ?x553 (* (- 1) ?x568))))
 (let ((?x36 (* r00 r00)))
 (let ((?x232 (* (- 1) ?x36)))
 (let ((?x245 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x71 r00 ?x30 ?x32 ?x245 ?x232) 0) (not (= ?x580 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x809 (lambda ((r Int) (x Int) )(let ((?x71 (* (- 1) r)))
 (let ((?x199 (+ x ?x71)))
 (let ((?x221 (+ 1 r)))
 (let ((?x568 (* ?x221 ?x199 ?x199)))
 (let ((?x723 (* r00 ?x199 ?x199)))
 (let ((?x688 (* ?x221 ?x221 ?x199 ?x199)))
 (let ((?x257 (* ?x221 ?x221 ?x221 ?x199)))
 (let ((?x146 (* r00 ?x221 ?x199)))
 (let ((?x256 (+ ?x146 ?x257 (* (- 2) (* x00 ?x199 ?x199)) (* (- 1) (* ?x221 ?x221 ?x199)) (* (- 1) (* r00 r00 ?x199 ?x199)) ?x688 (* 2 (* ?x199 ?x199 ?x199)) (* (- 2) (* x00 ?x221 ?x199)) ?x723 (* (- 1) (* r00 r00 ?x221 ?x199)) ?x568)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x122 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x124 (* (- 1) ?x30)))
 (let ((?x123 (* (- 1) r00)))
 (let (($x265 (and (= (+ r ?x123 ?x124 ?x122 ?x35 ?x36) 0) (not (= ?x256 0)))))
 (let ((?x553 (* r00 r00 ?x221 ?x199)))
 (let ((?x271 (* r00 r00 ?x199 ?x199)))
 (let ((?x442 (* ?x221 ?x221 ?x199)))
 (let ((?x580 (+ (* (- 1) ?x146) (* (- 1) ?x257) (* 2 (* x00 ?x199 ?x199)) ?x442 ?x271 (* (- 1) ?x688) (* (- 2) (* ?x199 ?x199 ?x199)) (* 2 (* x00 ?x221 ?x199)) (* (- 1) ?x723) ?x553 (* (- 1) ?x568))))
 (let (($x203 (= (+ ?x71 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x169 (and $x203 (not (= ?x580 0)))))
 (rewrite (= $x169 $x265)))))))))))))))))))))))))
 ))
 (let (($x66 (exists ((r Int) (x Int) )(! (let ((?x45 (- (* (- 1) (+ r 1) r00 (- x r)) (* (+ r 1) (+ r 1) (+ r 1) (- x r)))))
 (let ((?x49 (+ ?x45 (* 2 (- x r) (- x r) x00) (* (+ r 1) (+ r 1) (- x r)) (* r00 r00 (- x r) (- x r)))))
 (let ((?x52 (- ?x49 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x55 (+ (- ?x52 (* 2 (- x r) (- x r) (- x r))) (* 2 (+ r 1) (- x r) x00))))
 (let ((?x59 (+ (- ?x55 (* r00 (- x r) (- x r))) (* (+ r 1) r00 r00 (- x r)))))
 (let (($x63 (not (= (- ?x59 (* (+ r 1) (- x r) (- x r))) 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or $x63))))))))))) :qid k!26))
 ))
 (let ((?x150 (lambda ((r Int) (x Int) )(let ((?x71 (* (- 1) r)))
 (let ((?x199 (+ x ?x71)))
 (let ((?x221 (+ 1 r)))
 (let ((?x568 (* ?x221 ?x199 ?x199)))
 (let ((?x553 (* r00 r00 ?x221 ?x199)))
 (let ((?x271 (* r00 r00 ?x199 ?x199)))
 (let ((?x442 (* ?x221 ?x221 ?x199)))
 (let ((?x580 (+ (* (- 1) (* r00 ?x221 ?x199)) (* (- 1) (* ?x221 ?x221 ?x221 ?x199)) (* 2 (* x00 ?x199 ?x199)) ?x442 ?x271 (* (- 1) (* ?x221 ?x221 ?x199 ?x199)) (* (- 2) (* ?x199 ?x199 ?x199)) (* 2 (* x00 ?x221 ?x199)) (* (- 1) (* r00 ?x199 ?x199)) ?x553 (* (- 1) ?x568))))
 (let ((?x36 (* r00 r00)))
 (let ((?x232 (* (- 1) ?x36)))
 (let ((?x245 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x169 (and (= (+ ?x71 r00 ?x30 ?x32 ?x245 ?x232) 0) (not (= ?x580 0)))))
 (let ((?x45 (- (* (- 1) (+ r 1) r00 (- x r)) (* (+ r 1) (+ r 1) (+ r 1) (- x r)))))
 (let ((?x49 (+ ?x45 (* 2 (- x r) (- x r) x00) (* (+ r 1) (+ r 1) (- x r)) (* r00 r00 (- x r) (- x r)))))
 (let ((?x52 (- ?x49 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x55 (+ (- ?x52 (* 2 (- x r) (- x r) (- x r))) (* 2 (+ r 1) (- x r) x00))))
 (let ((?x59 (+ (- ?x55 (* r00 (- x r) (- x r))) (* (+ r 1) r00 r00 (- x r)))))
 (let (($x63 (not (= (- ?x59 (* (+ r 1) (- x r) (- x r))) 0))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x65 (and (= ?x38 0) (or $x63))))
 (rewrite (= $x65 $x169)))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x542 (mp (mp @x67 (quant-intro (proof-bind ?x150) (= $x66 $x243)) $x243) (rewrite (= $x243 $x243)) $x243)))
 (let ((@x643 (mp (mp @x542 (quant-intro (proof-bind ?x809) (= $x243 $x263)) $x263) (quant-intro (proof-bind ?x778) (= $x263 $x772)) $x772)))
 (let ((@x79 (mp (mp~ @x643 (sk (~ $x772 $x732)) $x732) (rewrite (= $x732 $x185)) $x185)))
 (let ((@x83 (and-elim @x79 $x478)))
 (let ((@x113 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x478) $x486)) @x83 $x486)))
 (let (($x487 (>= ?x482 0)))
 (let ((@x106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x478) $x487)) @x83 $x487)))
 (let (($x140 (not (>= ?x139 0))))
 (let (($x489 (<= ?x139 0)))
 (let ((@x782 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x745 (not $x489) $x140)) (and-elim @x79 $x75) (or (not $x489) $x140))))
 (let ((@x111 (unit-resolution @x782 (lemma ((_ th-lemma arith) (hypothesis (not $x489)) @x106 @x113 false) $x489) $x140)))
 ((_ th-lemma arith) @x111 @x106 @x113 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             198
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 33
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.68
 :memory                    3.20
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1149077
 :num-checks                1
 :propagations              4
 :rlimit-count              3131
 :time                      0.01
 :total-time                0.01)
