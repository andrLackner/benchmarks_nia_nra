unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x1199 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x1354 (<= ?x1199 (- 6))))
 (let (($x669 (= ?x1199 (- 6))))
 (let ((?x950 (+ c!3 k!2)))
 (let ((?x1393 (+ k!2 m!1)))
 (let ((?x1392 (+ 6 m!1)))
 (let ((?x1376 (+ 1 n!0)))
 (let ((?x667 (* 6 (* ?x1376 ?x1392 ?x1392 ?x1392 ?x1393 ?x1393 ?x950))))
 (let ((?x571 (* (- 6) (* ?x1376 ?x1392 ?x1393 ?x1393 ?x950 ?x950))))
 (let ((?x1249 (* 2 (* c!3 k!2 k!2 m!1 m!1))))
 (let ((?x1312 (* ?x1376 ?x1392 ?x1392 ?x1393 ?x1393 ?x950 ?x950)))
 (let ((?x1311 (* c!3 c!3 k!2 m!1 m!1)))
 (let ((?x1304 (* k!2 k!2 k!2 m!1 m!1)))
 (let ((?x1303 (* (- 6) (* ?x1376 ?x1376 ?x1376 ?x1392 ?x1393 ?x1393 ?x950 ?x950 ?x950))))
 (let ((?x1310 (* (- 6) (* ?x1376 ?x1376 ?x1392 ?x1393 ?x1393 ?x950 ?x950))))
 (let ((?x853 (* (- 72) (* c!3 k!2 k!2))))
 (let ((?x568 (* (- 36) (* c!3 c!3 k!2))))
 (let ((?x729 (* (- 36) (* c!3 c!3 m!1))))
 (let ((?x1001 (* (- 36) (* k!2 k!2 k!2))))
 (let ((?x859 (* (- 36) (* k!2 k!2 k!2 n!0))))
 (let ((?x737 (* k!2 k!2 m!1 m!1 m!1)))
 (let ((?x718 (* (- 6) (* ?x1376 ?x1376 ?x1376 ?x1376 ?x1392 ?x1393 ?x1393 ?x950 ?x950 ?x950))))
 (let ((?x549 (* (- 72) (* c!3 k!2 m!1))))
 (let ((?x697 (* ?x1376 ?x1376 ?x1376 ?x1392 ?x1392 ?x1393 ?x1393 ?x950 ?x950 ?x950)))
 (let ((?x1313 (* (- 1) (* ?x1392 ?x1392 ?x1392 ?x1392 ?x1393 ?x1393 ?x950))))
 (let ((?x652 (* 2 (* c!3 k!2 m!1 m!1 m!1))))
 (let ((?x1401 (* 6 (* ?x1392 ?x1392 ?x1392 ?x1393 ?x1393 ?x950))))
 (let ((?x1622 (* (- 36) (* k!2 k!2 m!1))))
 (let ((?x573 (* (- 72) (* c!3 k!2 k!2 n!0))))
 (let ((?x703 (* (- 36) (* c!3 c!3 k!2 n!0))))
 (let ((?x116 (* c!3 c!3 m!1 m!1 m!1)))
 (let ((?x1325 (+ ?x116 (* (- 6) (* c!3 c!3 k!2 n!0 m!1)) ?x703 ?x573 ?x1622 ?x1401 (* (- 36) (* k!2 k!2 n!0 m!1)) ?x652 (* (- 12) (* c!3 k!2 k!2 n!0 m!1)) ?x1313 ?x697 ?x549 ?x718 ?x737 (* (- 6) (* k!2 k!2 k!2 n!0 m!1)) ?x859 ?x1001 ?x729 ?x568 (* (- 36) (* c!3 c!3 n!0 m!1)) ?x853 ?x1310 ?x1303 ?x1304 (* (- 6) (* k!2 k!2 n!0 m!1 m!1)) ?x1311 ?x1312 ?x1249 (* (- 72) (* c!3 k!2 n!0 m!1)) (* (- 12) (* c!3 k!2 n!0 m!1 m!1)) (* (- 6) (* c!3 c!3 n!0 m!1 m!1)) ?x571 ?x667)))
 (let (($x1407 (= ?x1325 0)))
 (let (($x1355 (not $x1407)))
 (let (($x725 (= (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0)) (- 1))))
 (let (($x934 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x1336 (* (- 9) n!0)))
 (let ((?x123 (* (- 1) (* k!2 k!2))))
 (let ((?x1375 (* 5 k!2)))
 (let ((?x121 (* 18 c!3)))
 (let ((?x954 (* 9 (* c!3 n!0))))
 (let (($x645 (and $x669 (= (+ ?x954 ?x121 ?x1375 ?x123 ?x1336) 4) $x934 $x725 $x1355)))
 (let ((?x1086 (+ ?x1401 ?x1622 (* (- 6) (* c!3 c!3 k!2 m!1 n!0)) (* (- 12) (* c!3 k!2 k!2 m!1 n!0)) (* (- 6) (* k!2 k!2 k!2 m!1 n!0)) (* (- 6) (* c!3 c!3 m!1 m!1 n!0)) (* (- 12) (* c!3 k!2 m!1 m!1 n!0)) (* (- 6) (* k!2 k!2 m!1 m!1 n!0)) (* (- 36) (* k!2 k!2 m!1 n!0)) ?x853 ?x697 ?x1001 ?x859 ?x703 ?x1303 ?x1313 ?x116 ?x1304 ?x1249 ?x1311 ?x1312 (* (- 72) (* c!3 k!2 m!1 n!0)) ?x737 ?x652 ?x729 ?x1310 ?x549 ?x571 ?x573 ?x568 ?x718 (* (- 36) (* c!3 c!3 m!1 n!0)) ?x667)))
 (let (($x1345 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x121 ?x1375 ?x1336 ?x123 ?x954) 4) $x934 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x1086 0)))))
 (let (($x910 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x313 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x1493 (* ?x316 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x890 (* 6 ?x1493)))
 (let ((?x1388 (* ?x316 ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1281 (* (- 6) ?x1388)))
 (let ((?x1307 (* ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1324 (* (- 6) ?x1307)))
 (let ((?x1251 (* ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1291 (* (- 6) ?x1251)))
 (let ((?x1171 (* k k m m m)))
 (let ((?x1060 (* ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x972 (* c c k m m)))
 (let ((?x957 (* k k k m m)))
 (let ((?x953 (* c c m m m)))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x151 (* (- 1) ?x892)))
 (let ((?x757 (* ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1259 (* (- 6) ?x757)))
 (let ((?x569 (* ?x316 ?x316 ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x142 (* ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x147 (* 6 ?x142)))
 (let ((?x838 (+ ?x147 (* (- 36) (* k k m)) (* (- 6) (* c c k m n)) (* (- 12) (* c k k m n)) (* (- 6) (* k k k m n)) (* (- 6) (* c c m m n)) (* (- 12) (* c k m m n)) (* (- 6) (* k k m m n)) (* (- 36) (* k k m n)) (* (- 72) (* c k k)) ?x569 (* (- 36) (* k k k)) (* (- 36) (* k k k n)) (* (- 36) (* c c k n)) ?x1259 ?x151 ?x953 ?x957 (* 2 (* c k k m m)) ?x972 ?x1060 (* (- 72) (* c k m n)) ?x1171 (* 2 (* c k m m m)) (* (- 36) (* c c m)) ?x1291 (* (- 72) (* c k m)) ?x1324 (* (- 72) (* c k k n)) (* (- 36) (* c c k)) ?x1281 (* (- 36) (* c c m n)) ?x890)))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x215 (= (+ ?x40 ?x44 ?x217 ?x218 (* 9 (* c n))) 4)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (and $x131 $x215 $x267 $x305 (not (= ?x838 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x719 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x313 (+ 6 m)))
 (let ((?x245 (* ?x313 ?x313 ?x69 ?x68 ?x68)))
 (let ((?x316 (+ 1 n)))
 (let ((?x569 (* ?x316 ?x316 ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x1298 (+ (* 6 (* ?x316 ?x313 ?x69 ?x68 ?x68)) (* (- 6) (* ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)) (* (- 6) (* ?x316 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)) ?x892 (* 6 (* ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x313 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x569) (* (- 1) (* ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68)) (* (- 1) ?x245))))
 (let (($x1378 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1293 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x1293 $x1378 (not (= ?x1298 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x912 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x313 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x1493 (* ?x316 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x890 (* 6 ?x1493)))
 (let ((?x1388 (* ?x316 ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1281 (* (- 6) ?x1388)))
 (let ((?x1307 (* ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1324 (* (- 6) ?x1307)))
 (let ((?x1251 (* ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1291 (* (- 6) ?x1251)))
 (let ((?x1171 (* k k m m m)))
 (let ((?x1060 (* ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x972 (* c c k m m)))
 (let ((?x957 (* k k k m m)))
 (let ((?x953 (* c c m m m)))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x151 (* (- 1) ?x892)))
 (let ((?x757 (* ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1259 (* (- 6) ?x757)))
 (let ((?x569 (* ?x316 ?x316 ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x142 (* ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x147 (* 6 ?x142)))
 (let ((?x838 (+ ?x147 (* (- 36) (* k k m)) (* (- 6) (* c c k m n)) (* (- 12) (* c k k m n)) (* (- 6) (* k k k m n)) (* (- 6) (* c c m m n)) (* (- 12) (* c k m m n)) (* (- 6) (* k k m m n)) (* (- 36) (* k k m n)) (* (- 72) (* c k k)) ?x569 (* (- 36) (* k k k)) (* (- 36) (* k k k n)) (* (- 36) (* c c k n)) ?x1259 ?x151 ?x953 ?x957 (* 2 (* c k k m m)) ?x972 ?x1060 (* (- 72) (* c k m n)) ?x1171 (* 2 (* c k m m m)) (* (- 36) (* c c m)) ?x1291 (* (- 72) (* c k m)) ?x1324 (* (- 72) (* c k k n)) (* (- 36) (* c c k)) ?x1281 (* (- 36) (* c c m n)) ?x890)))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x215 (= (+ ?x40 ?x44 ?x217 ?x218 (* 9 (* c n))) 4)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (let (($x595 (and $x131 $x215 $x267 $x305 (not (= ?x838 0)))))
 (let ((?x1298 (+ (* 6 (* ?x316 ?x313 ?x69 ?x68 ?x68)) (* (- 6) ?x142) (* (- 6) ?x1493) ?x892 (* 6 ?x757) (* 6 ?x1251) (* 6 ?x1307) (* 6 (* ?x313 ?x69 ?x68 ?x68)) (* 6 ?x1388) (* (- 1) ?x569) (* (- 1) ?x1060) (* (- 1) (* ?x313 ?x313 ?x69 ?x68 ?x68)))))
 (let (($x1378 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1293 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x1300 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x1293 $x1378 (not (= ?x1298 0)))))
 (rewrite (= $x1300 $x595))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x999 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x313 (+ 6 m)))
 (let ((?x245 (* ?x313 ?x313 ?x69 ?x68 ?x68)))
 (let ((?x316 (+ 1 n)))
 (let ((?x1060 (* ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x569 (* ?x316 ?x316 ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1388 (* ?x316 ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1281 (* (- 6) ?x1388)))
 (let ((?x1307 (* ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1324 (* (- 6) ?x1307)))
 (let ((?x1251 (* ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1291 (* (- 6) ?x1251)))
 (let ((?x757 (* ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1259 (* (- 6) ?x757)))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x151 (* (- 1) ?x892)))
 (let ((?x1493 (* ?x316 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x890 (* 6 ?x1493)))
 (let ((?x142 (* ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x147 (* 6 ?x142)))
 (let ((?x1007 (+ (* (- 6) (* ?x316 ?x313 ?x69 ?x68 ?x68)) ?x147 ?x890 ?x151 ?x1259 ?x1291 ?x1324 (* (- 6) (* ?x313 ?x69 ?x68 ?x68)) ?x1281 ?x569 ?x1060 ?x245)))
 (let (($x1378 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x546 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x741 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (and $x131 (= ?x741 (- 4)) $x546 $x1378 (not (= ?x1007 0))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x108 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x313 (+ 6 m)))
 (let ((?x245 (* ?x313 ?x313 ?x69 ?x68 ?x68)))
 (let ((?x316 (+ 1 n)))
 (let ((?x569 (* ?x316 ?x316 ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x1298 (+ (* 6 (* ?x316 ?x313 ?x69 ?x68 ?x68)) (* (- 6) (* ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)) (* (- 6) (* ?x316 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)) ?x892 (* 6 (* ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x313 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x569) (* (- 1) (* ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68)) (* (- 1) ?x245))))
 (let (($x1378 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1293 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (let (($x1300 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x1293 $x1378 (not (= ?x1298 0)))))
 (let ((?x1060 (* ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1388 (* ?x316 ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1281 (* (- 6) ?x1388)))
 (let ((?x1307 (* ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1324 (* (- 6) ?x1307)))
 (let ((?x1251 (* ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1291 (* (- 6) ?x1251)))
 (let ((?x757 (* ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1259 (* (- 6) ?x757)))
 (let ((?x151 (* (- 1) ?x892)))
 (let ((?x1493 (* ?x316 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x890 (* 6 ?x1493)))
 (let ((?x142 (* ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x147 (* 6 ?x142)))
 (let ((?x1007 (+ (* (- 6) (* ?x316 ?x313 ?x69 ?x68 ?x68)) ?x147 ?x890 ?x151 ?x1259 ?x1291 ?x1324 (* (- 6) (* ?x313 ?x69 ?x68 ?x68)) ?x1281 ?x569 ?x1060 ?x245)))
 (let (($x546 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x741 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x237 (and $x131 (= ?x741 (- 4)) $x546 $x1378 (not (= ?x1007 0)))))
 (rewrite (= $x237 $x1300)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ n 1)))
 (let ((?x75 (+ (* (- 6) ?x68 ?x68 ?x69 ?x70 ?x71) (* 6 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70) (* 6 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x83 (- (- ?x75 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x85 (- (- ?x83 (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71))))
 (let ((?x87 (- (- ?x85 (* 6 ?x68 ?x68 ?x69 ?x70)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x91 (+ ?x87 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71) (* ?x68 ?x68 ?x69 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x91 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x1492 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x313 (+ 6 m)))
 (let ((?x245 (* ?x313 ?x313 ?x69 ?x68 ?x68)))
 (let ((?x316 (+ 1 n)))
 (let ((?x1060 (* ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x569 (* ?x316 ?x316 ?x316 ?x313 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1388 (* ?x316 ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1281 (* (- 6) ?x1388)))
 (let ((?x1307 (* ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1324 (* (- 6) ?x1307)))
 (let ((?x1251 (* ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1291 (* (- 6) ?x1251)))
 (let ((?x757 (* ?x316 ?x316 ?x316 ?x313 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1259 (* (- 6) ?x757)))
 (let ((?x892 (* ?x313 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x151 (* (- 1) ?x892)))
 (let ((?x1493 (* ?x316 ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x890 (* 6 ?x1493)))
 (let ((?x142 (* ?x313 ?x313 ?x313 ?x69 ?x69 ?x68)))
 (let ((?x147 (* 6 ?x142)))
 (let ((?x1007 (+ (* (- 6) (* ?x316 ?x313 ?x69 ?x68 ?x68)) ?x147 ?x890 ?x151 ?x1259 ?x1291 ?x1324 (* (- 6) (* ?x313 ?x69 ?x68 ?x68)) ?x1281 ?x569 ?x1060 ?x245)))
 (let (($x1378 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x546 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x741 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (let (($x237 (and $x131 (= ?x741 (- 4)) $x546 $x1378 (not (= ?x1007 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x75 (+ (* (- 6) ?x68 ?x68 ?x69 ?x70 ?x71) (* 6 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70) (* 6 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x83 (- (- ?x75 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x85 (- (- ?x83 (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71))))
 (let ((?x87 (- (- ?x85 (* 6 ?x68 ?x68 ?x69 ?x70)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x91 (+ ?x87 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71) (* ?x68 ?x68 ?x69 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x95 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x91 0))))))
 (rewrite (= $x95 $x237)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x1262 (mp (mp @x97 (quant-intro (proof-bind ?x1492) (= $x96 $x999)) $x999) (rewrite (= $x999 $x999)) $x999)))
 (let ((@x945 (mp (mp @x1262 (quant-intro (proof-bind ?x108) (= $x999 $x719)) $x719) (quant-intro (proof-bind ?x912) (= $x719 $x910)) $x910)))
 (let ((@x1343 (mp (mp~ @x945 (sk (~ $x910 $x1345)) $x1345) (rewrite (= $x1345 $x645)) $x645)))
 (let ((@x1340 (and-elim @x1343 $x669)))
 (let ((@x1364 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x669) $x1354)) @x1340 $x1354)))
 (let (($x1198 (>= ?x1199 (- 6))))
 (let ((@x768 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x669) $x1198)) @x1340 $x1198)))
 (let (($x1396 (not (<= ?x1325 0))))
 (let (($x162 (>= ?x1325 0)))
 (let ((@x383 (lemma ((_ th-lemma arith) (hypothesis (not $x162)) @x768 @x1364 @x768 @x1364 false) $x162)))
 (let ((@x1404 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1407 $x1396 (not $x162))) (and-elim @x1343 $x1355) (or $x1396 (not $x162)))))
 ((_ th-lemma arith) (unit-resolution @x1404 @x383 $x1396) @x768 @x1364 @x768 @x1364 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             445
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 65
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.88
 :memory                    3.32
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1377046
 :num-checks                1
 :propagations              11
 :rlimit-count              7874
 :time                      0.01
 :total-time                0.02)
