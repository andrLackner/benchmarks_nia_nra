unsat
((set-logic NIA)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x591 (+ k!00 k!10 (* (- 1) (* x!3 u!5)) (* (- 1) (* y!2 v!4)))))
 (let (($x224 (>= ?x591 0)))
 (let (($x593 (= ?x591 0)))
 (let ((?x576 (* y!2 v!4)))
 (let ((?x570 (* x!3 u!5)))
 (let ((?x345 (* (- 1) k!10)))
 (let ((?x277 (* (- 1) k!00)))
 (let ((?x579 (+ ?x277 ?x345 ?x570 ?x576)))
 (let ((?x634 (* (- 1) (* y!2 v!4 v!4 v!4 x!3 u!5 u!5))))
 (let ((?x603 (* y!2 v!4 v!4 v!4 x!3)))
 (let ((?x563 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3)))
 (let ((?x551 (* v!4 v!4 v!4)))
 (let ((?x550 (* (- 1) (* v!4 v!4 v!4 x!3 x!3))))
 (let ((?x518 (* u!5 u!5 u!5)))
 (let ((?x661 (+ (* 2 (* v!4 v!4 v!4 v!4 x!3 x!3 u!5)) ?x518 ?x550 ?x551 ?x563 (* 3 (* v!4 v!4 u!5)) ?x603 (* (- 2) (* y!2 v!4 v!4 v!4 v!4 x!3 u!5)) (* 3 (* v!4 u!5 u!5)) (* (- 1) (* y!2 v!4 v!4 v!4 v!4 v!4 x!3)) (* v!4 v!4 v!4 x!3 x!3 u!5 u!5) ?x634)))
 (let ((?x667 (* ?x661 ?x579)))
 (let (($x616 (= ?x667 0)))
 (let (($x668 (not $x616)))
 (let ((?x664 (+ (* 3 (* y!2 y!2 v!4 u!5 u!5 u!5 u!5)) (* 3 (* y!2 y!2 v!4 v!4 u!5 u!5 u!5)) (* y!2 y!2 v!4 v!4 v!4 u!5 u!5) ?x518 (* 3 (* y!2 v!4 x!3 u!5 u!5)) (* y!2 x!3 u!5 u!5 u!5) (* 3 (* y!2 v!4 v!4 x!3 u!5)) ?x603 (* (- 3) (* y!2 y!2 v!4 u!5 u!5)) (* (- 1) (* y!2 y!2 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 v!4 v!4 u!5)) (* (- 1) (* y!2 y!2 v!4 v!4 v!4)) (* (- 1) (* y!2 x!3 u!5 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 v!4 x!3 u!5 u!5 u!5 u!5)) (* (- 3) (* y!2 v!4 v!4 x!3 u!5 u!5 u!5)) (* y!2 y!2 u!5 u!5 u!5 u!5 u!5) ?x634)))
 (let ((?x377 (* ?x664 ?x579)))
 (let (($x596 (= ?x377 0)))
 (let (($x620 (or (not $x596) $x668)))
 (let (($x642 (and $x593 $x620)))
 (let ((?x516 (+ (* u!5 x!3) (* v!4 y!2) ?x277 ?x345)))
 (let ((?x538 (* (- 1) (* u!5 u!5 v!4 v!4 v!4 x!3 y!2))))
 (let ((?x529 (* v!4 v!4 v!4 x!3 y!2)))
 (let ((?x564 (+ ?x518 ?x550 ?x529 ?x538 ?x551 (* 3 (* u!5 v!4 v!4)) (* 3 (* u!5 u!5 v!4)) (* (- 2) (* u!5 v!4 v!4 v!4 v!4 x!3 y!2)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 y!2)) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3) (* 2 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3)) ?x563)))
 (let ((?x545 (+ ?x518 (* u!5 u!5 u!5 x!3 y!2) (* 3 (* u!5 u!5 v!4 x!3 y!2)) (* 3 (* u!5 v!4 v!4 x!3 y!2)) ?x529 (* (- 1) (* u!5 u!5 u!5 y!2 y!2)) (* (- 3) (* u!5 u!5 v!4 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 y!2 y!2)) (* (- 1) (* v!4 v!4 v!4 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 u!5 u!5 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 u!5 v!4 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 x!3 y!2)) ?x538 (* u!5 u!5 u!5 u!5 u!5 y!2 y!2) (* 3 (* u!5 u!5 u!5 u!5 v!4 y!2 y!2)) (* 3 (* u!5 u!5 u!5 v!4 v!4 y!2 y!2)) (* u!5 u!5 v!4 v!4 v!4 y!2 y!2))))
 (let (($x569 (and (= ?x516 0) (or (not (= (* ?x545 ?x516) 0)) (not (= (* ?x564 ?x516) 0))))))
 (let (($x147 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x345 (* (- 1) k!10)))
 (let ((?x277 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x337 (+ ?x33 ?x34 ?x277 ?x345)))
 (let ((?x356 (* (- 1) (* u u v v v x y))))
 (let ((?x156 (* v v v x y)))
 (let ((?x49 (* u u u)))
 (let ((?x497 (+ ?x49 (* (- 1) (* v v v x x)) ?x156 ?x356 (* v v v) (* 3 (* u v v)) (* 3 (* u u v)) (* (- 2) (* u v v v v x y)) (* (- 1) (* v v v v v x y)) (* u u v v v x x) (* 2 (* u v v v v x x)) (* v v v v v x x))))
 (let ((?x374 (+ ?x49 (* u u u x y) (* 3 (* u u v x y)) (* 3 (* u v v x y)) ?x156 (* (- 1) (* u u u y y)) (* (- 3) (* u u v y y)) (* (- 3) (* u v v y y)) (* (- 1) (* v v v y y)) (* (- 1) (* u u u u u x y)) (* (- 3) (* u u u u v x y)) (* (- 3) (* u u u v v x y)) ?x356 (* u u u u u y y) (* 3 (* u u u u v y y)) (* 3 (* u u u v v y y)) (* u u v v v y y))))
 (and (= ?x337 0) (or (not (= (* ?x374 ?x337) 0)) (not (= (* ?x497 ?x337) 0)))))))))))))) :qid k!29))
 ))
 (let (($x91 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x345 (* (- 1) k!10)))
 (let ((?x268 (+ y (* (- 1) x))))
 (let ((?x285 (* ?x268 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x277 (* (- 1) k!00)))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x332 (+ (* ?x268 x v v v) ?x63 (* (- 1) (* ?x56 ?x56 ?x268 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x366 (+ x (* (- 1) y))))
 (let ((?x275 (* ?x366 u)))
 (let ((?x49 (* u u u)))
 (let ((?x310 (+ (* ?x44 ?x44 ?x44 ?x366 y) ?x49 (* (- 1) (* ?x44 ?x44 ?x44 ?x366 y u u)))))
 (let (($x278 (or (not (= (* ?x310 (+ ?x277 ?x275 ?x45 ?x345)) 0)) (not (= (* ?x332 (+ ?x277 ?x57 ?x285 ?x345)) 0)))))
 (let ((?x328 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x328 0) $x278))))))))))))))))) :qid k!29))
 ))
 (let ((?x264 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x345 (* (- 1) k!10)))
 (let ((?x277 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x337 (+ ?x33 ?x34 ?x277 ?x345)))
 (let ((?x356 (* (- 1) (* u u v v v x y))))
 (let ((?x156 (* v v v x y)))
 (let ((?x49 (* u u u)))
 (let ((?x497 (+ ?x49 (* (- 1) (* v v v x x)) ?x156 ?x356 (* v v v) (* 3 (* u v v)) (* 3 (* u u v)) (* (- 2) (* u v v v v x y)) (* (- 1) (* v v v v v x y)) (* u u v v v x x) (* 2 (* u v v v v x x)) (* v v v v v x x))))
 (let ((?x374 (+ ?x49 (* u u u x y) (* 3 (* u u v x y)) (* 3 (* u v v x y)) ?x156 (* (- 1) (* u u u y y)) (* (- 3) (* u u v y y)) (* (- 3) (* u v v y y)) (* (- 1) (* v v v y y)) (* (- 1) (* u u u u u x y)) (* (- 3) (* u u u u v x y)) (* (- 3) (* u u u v v x y)) ?x356 (* u u u u u y y) (* 3 (* u u u u v y y)) (* 3 (* u u u v v y y)) (* u u v v v y y))))
 (let (($x700 (and (= ?x337 0) (or (not (= (* ?x374 ?x337) 0)) (not (= (* ?x497 ?x337) 0))))))
 (let ((?x268 (+ y (* (- 1) x))))
 (let ((?x285 (* ?x268 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x332 (+ (* ?x268 x v v v) ?x63 (* (- 1) (* ?x56 ?x56 ?x268 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x366 (+ x (* (- 1) y))))
 (let ((?x275 (* ?x366 u)))
 (let ((?x310 (+ (* ?x44 ?x44 ?x44 ?x366 y) ?x49 (* (- 1) (* ?x44 ?x44 ?x44 ?x366 y u u)))))
 (let (($x278 (or (not (= (* ?x310 (+ ?x277 ?x275 ?x45 ?x345)) 0)) (not (= (* ?x332 (+ ?x277 ?x57 ?x285 ?x345)) 0)))))
 (let ((?x328 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x444 (and (= ?x328 0) $x278)))
 (rewrite (= $x444 $x700))))))))))))))))))))))))))))
 ))
 (let (($x295 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x345 (* (- 1) k!10)))
 (let ((?x268 (+ y (* (- 1) x))))
 (let ((?x285 (* ?x268 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x277 (* (- 1) k!00)))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x332 (+ (* ?x268 x v v v) ?x63 (* (- 1) (* ?x56 ?x56 ?x268 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x366 (+ x (* (- 1) y))))
 (let ((?x275 (* ?x366 u)))
 (let ((?x49 (* u u u)))
 (let ((?x310 (+ (* ?x44 ?x44 ?x44 ?x366 y) ?x49 (* (- 1) (* ?x44 ?x44 ?x44 ?x366 y u u)))))
 (let (($x278 (or (not (= (* ?x310 (+ ?x277 ?x275 ?x45 ?x345)) 0)) (not (= (* ?x332 (+ ?x277 ?x57 ?x285 ?x345)) 0)))))
 (and (= (+ ?x277 (* x u) (* y v) ?x345) 0) $x278)))))))))))))))) :qid k!29))
 ))
 (let ((?x334 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x345 (* (- 1) k!10)))
 (let ((?x268 (+ y (* (- 1) x))))
 (let ((?x285 (* ?x268 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x277 (* (- 1) k!00)))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x332 (+ (* ?x268 x v v v) ?x63 (* (- 1) (* ?x56 ?x56 ?x268 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x366 (+ x (* (- 1) y))))
 (let ((?x275 (* ?x366 u)))
 (let ((?x49 (* u u u)))
 (let ((?x310 (+ (* ?x44 ?x44 ?x44 ?x366 y) ?x49 (* (- 1) (* ?x44 ?x44 ?x44 ?x366 y u u)))))
 (let (($x278 (or (not (= (* ?x310 (+ ?x277 ?x275 ?x45 ?x345)) 0)) (not (= (* ?x332 (+ ?x277 ?x57 ?x285 ?x345)) 0)))))
 (let ((?x328 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x444 (and (= ?x328 0) $x278)))
 (let (($x297 (and (= (+ ?x277 (* x u) (* y v) ?x345) 0) $x278)))
 (rewrite (= $x297 $x444)))))))))))))))))))))
 ))
 (let (($x404 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x268 (+ y (* (- 1) x))))
 (let ((?x285 (* ?x268 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x332 (+ (* ?x268 x v v v) ?x63 (* (- 1) (* ?x56 ?x56 ?x268 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x366 (+ x (* (- 1) y))))
 (let ((?x275 (* ?x366 u)))
 (let ((?x49 (* u u u)))
 (let ((?x310 (+ (* ?x44 ?x44 ?x44 ?x366 y) ?x49 (* (- 1) (* ?x44 ?x44 ?x44 ?x366 y u u)))))
 (let (($x395 (or (not (= (* ?x310 (+ ?x81 ?x275 ?x45 ?x97)) 0)) (not (= (* ?x332 (+ ?x81 ?x57 ?x285 ?x97)) 0)))))
 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x395))))))))))))))))) :qid k!29))
 ))
 (let ((?x306 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x345 (* (- 1) k!10)))
 (let ((?x268 (+ y (* (- 1) x))))
 (let ((?x285 (* ?x268 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x277 (* (- 1) k!00)))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x332 (+ (* ?x268 x v v v) ?x63 (* (- 1) (* ?x56 ?x56 ?x268 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x366 (+ x (* (- 1) y))))
 (let ((?x275 (* ?x366 u)))
 (let ((?x49 (* u u u)))
 (let ((?x310 (+ (* ?x44 ?x44 ?x44 ?x366 y) ?x49 (* (- 1) (* ?x44 ?x44 ?x44 ?x366 y u u)))))
 (let (($x278 (or (not (= (* ?x310 (+ ?x277 ?x275 ?x45 ?x345)) 0)) (not (= (* ?x332 (+ ?x277 ?x57 ?x285 ?x345)) 0)))))
 (let (($x297 (and (= (+ ?x277 (* x u) (* y v) ?x345) 0) $x278)))
 (let ((?x340 (* ?x332 (+ (* (- 1) (* u00 x00)) ?x57 ?x285 (* (- 1) (* v00 y00))))))
 (let ((?x319 (* ?x310 (+ (* (- 1) (* u00 x00)) ?x275 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x346 (* y v)))
 (let ((?x344 (* x u)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let (($x299 (and (= (+ ?x81 ?x344 ?x346 ?x97) 0) (or (not (= ?x319 0)) (not (= ?x340 0))))))
 (rewrite (= $x299 $x297)))))))))))))))))))))))))))
 ))
 (let (($x72 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x56 (+ u v)))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x66 (- (+ (* v v v x (- y x)) ?x63) (* ?x56 ?x56 v v v x (- y x)))))
 (let ((?x38 (* v00 y00)))
 (let ((?x61 (- (+ (* (- 1) u00 x00) (* ?x56 x) (* v (- y x))) ?x38)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x52 (- (+ (* ?x44 ?x44 ?x44 ?x42 y) (* u u u)) (* u u ?x44 ?x44 ?x44 ?x42 y))))
 (let ((?x53 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x52)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x53 0)) (not (= (* ?x61 ?x66) 0)))))))))))))) :qid k!29))
 ))
 (let ((?x281 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x268 (+ y (* (- 1) x))))
 (let ((?x285 (* ?x268 v)))
 (let ((?x56 (+ u v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x63 (* ?x56 ?x56 ?x56)))
 (let ((?x332 (+ (* ?x268 x v v v) ?x63 (* (- 1) (* ?x56 ?x56 ?x268 x v v v)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x366 (+ x (* (- 1) y))))
 (let ((?x275 (* ?x366 u)))
 (let ((?x49 (* u u u)))
 (let ((?x310 (+ (* ?x44 ?x44 ?x44 ?x366 y) ?x49 (* (- 1) (* ?x44 ?x44 ?x44 ?x366 y u u)))))
 (let (($x395 (or (not (= (* ?x310 (+ ?x81 ?x275 ?x45 ?x97)) 0)) (not (= (* ?x332 (+ ?x81 ?x57 ?x285 ?x97)) 0)))))
 (let (($x299 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x395)))
 (let ((?x66 (- (+ (* v v v x (- y x)) ?x63) (* ?x56 ?x56 v v v x (- y x)))))
 (let ((?x67 (* (- (+ (* (- 1) u00 x00) ?x57 (* v (- y x))) ?x38) ?x66)))
 (let ((?x52 (- (+ (* ?x44 ?x44 ?x44 (- x y) y) ?x49) (* u u ?x44 ?x44 ?x44 (- x y) y))))
 (let ((?x53 (* (- (+ (* (- 1) u00 x00) (* u (- x y)) ?x45) ?x38) ?x52)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x71 (and $x41 (or (not (= ?x53 0)) (not (= ?x67 0))))))
 (rewrite (= $x71 $x299))))))))))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x288 (mp (mp @x73 (quant-intro (proof-bind ?x281) (= $x72 $x404)) $x404) (rewrite (= $x404 $x404)) $x404)))
 (let ((@x452 (mp (mp @x288 (quant-intro (proof-bind ?x306) (= $x404 $x295)) $x295) (quant-intro (proof-bind ?x334) (= $x295 $x91)) $x91)))
 (let ((@x575 (mp~ (mp @x452 (quant-intro (proof-bind ?x264) (= $x91 $x147)) $x147) (sk (~ $x147 $x569)) $x569)))
 (let ((@x354 (mp @x575 (rewrite (= $x569 $x642)) $x642)))
 (let ((@x609 (and-elim @x354 $x593)))
 (let ((@x649 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x593) $x224)) @x609 $x224)))
 (let (($x643 (<= ?x591 0)))
 (let ((@x654 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x593) $x643)) @x609 $x643)))
 (let (($x360 (not (<= ?x667 0))))
 (let (($x574 (>= ?x667 0)))
 (let (($x610 (>= ?x377 0)))
 (let (($x606 (<= ?x377 0)))
 (let ((@x500 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x596 (not $x606) (not $x610))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x606)) @x654 @x649 false) $x606) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x610)) @x654 @x649 false) $x610) $x596)))
 (let ((@x666 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x616 $x360 (not $x574))) (unit-resolution (and-elim @x354 $x620) @x500 $x668) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x574)) @x654 @x649 false) $x574) $x360)))
 ((_ th-lemma arith farkas 1 1 1) @x666 @x654 @x649 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             288
 :arith-nonlinear-horner    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                5.38
 :memory                    3.13
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                1780076821
 :num-checks                1
 :propagations              14
 :rlimit-count              1755163
 :time                      1.00
 :total-time                1.01)
