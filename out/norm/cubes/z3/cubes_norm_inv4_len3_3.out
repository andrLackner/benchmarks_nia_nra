unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x194 (* (- 1) k!2)))
 (let ((?x670 (+ (* 3 n!0) ?x194 (* 3 (* n!0 n!0)))))
 (let (($x498 (<= ?x670 (- 1))))
 (let (($x675 (= ?x670 (- 1))))
 (let ((?x533 (+ k!2 c!3)))
 (let ((?x541 (+ 1 n!0)))
 (let ((?x696 (* k!2 k!2 k!2)))
 (let ((?x172 (+ m!1 k!2)))
 (let ((?x115 (+ 6 m!1)))
 (let ((?x310 (* c!3 c!3 c!3)))
 (let ((?x427 (* (- 3) (* ?x541 ?x541 ?x541 ?x541 ?x115 ?x115 ?x172 ?x172 ?x172 ?x533 ?x533))))
 (let ((?x722 (+ (* ?x541 ?x115 ?x115 ?x172 ?x172 ?x533) (* 3 (* n!0 n!0 k!2 k!2 c!3)) (* 2 (* n!0 c!3 c!3 c!3)) (* 3 (* k!2 c!3 c!3)) (* 6 (* n!0 k!2 k!2 c!3)) (* 6 (* n!0 k!2 c!3 c!3)) ?x427 (* (- 1) (* ?x541 ?x541 ?x115 ?x115 ?x172 ?x172 ?x172 ?x533 ?x533)) (* n!0 n!0 k!2 k!2 k!2) (* 3 (* ?x541 ?x541 ?x541 ?x115 ?x115 ?x172 ?x172 ?x533)) (* n!0 n!0 c!3 c!3 c!3) (* 3 (* n!0 n!0 k!2 c!3 c!3)) (* 3 (* k!2 k!2 c!3)) (* (- 3) (* ?x541 ?x541 ?x541 ?x115 ?x115 ?x172 ?x172 ?x172 ?x533 ?x533)) (* (- 1) (* ?x541 ?x115 ?x115 ?x172 ?x172 ?x172 ?x533)) ?x310 (* ?x541 ?x541 ?x115 ?x115 ?x172 ?x172 ?x172 ?x172 ?x533 ?x533) (* (- 1) (* ?x541 ?x541 ?x172 ?x533 ?x533 ?x533)) (* 3 (* ?x541 ?x541 ?x115 ?x115 ?x172 ?x172 ?x533)) (* 3 (* ?x541 ?x541 ?x541 ?x533 ?x533 ?x533)) ?x696 (* 3 (* ?x541 ?x541 ?x541 ?x541 ?x533 ?x533 ?x533)) (* 2 (* n!0 k!2 k!2 k!2)))))
 (let (($x730 (= ?x722 0)))
 (let (($x161 (not $x730)))
 (let ((?x198 (+ (* 2 n!0) (* n!0 k!2) ?x194 (* (- 3) c!3))))
 (let (($x199 (= ?x198 (- 1))))
 (let ((?x105 (* k!2 k!2)))
 (let ((?x150 (+ ?x105 (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x148 (= ?x150 (- 4))))
 (let ((?x183 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x647 (= ?x183 (- 6))))
 (let (($x724 (and $x647 $x148 $x199 $x675 $x161)))
 (let ((?x123 (+ c!3 k!2)))
 (let ((?x590 (+ k!2 m!1)))
 (let ((?x649 (* (- 3) (* ?x541 ?x541 ?x541 ?x541 ?x115 ?x115 ?x590 ?x590 ?x590 ?x123 ?x123))))
 (let ((?x527 (+ (* 3 (* ?x541 ?x541 ?x541 ?x123 ?x123 ?x123)) (* 3 (* ?x541 ?x541 ?x541 ?x541 ?x123 ?x123 ?x123)) (* ?x541 ?x541 ?x115 ?x115 ?x590 ?x590 ?x590 ?x590 ?x123 ?x123) (* (- 1) (* ?x541 ?x541 ?x590 ?x123 ?x123 ?x123)) ?x649 (* 3 (* ?x541 ?x541 ?x115 ?x115 ?x590 ?x590 ?x123)) (* (- 1) (* ?x541 ?x541 ?x115 ?x115 ?x590 ?x590 ?x590 ?x123 ?x123)) (* (- 3) (* ?x541 ?x541 ?x541 ?x115 ?x115 ?x590 ?x590 ?x590 ?x123 ?x123)) (* (- 1) (* ?x541 ?x115 ?x115 ?x590 ?x590 ?x590 ?x123)) (* ?x541 ?x115 ?x115 ?x590 ?x590 ?x123) (* 3 (* ?x541 ?x541 ?x541 ?x115 ?x115 ?x590 ?x590 ?x123)) ?x310 (* 3 (* c!3 c!3 k!2)) (* k!2 k!2 k!2 n!0 n!0) (* 3 (* c!3 k!2 k!2 n!0 n!0)) (* 3 (* c!3 c!3 k!2 n!0 n!0)) (* c!3 c!3 c!3 n!0 n!0) (* 3 (* c!3 k!2 k!2)) ?x696 (* 2 (* c!3 c!3 c!3 n!0)) (* 6 (* c!3 c!3 k!2 n!0)) (* 6 (* c!3 k!2 k!2 n!0)) (* 2 (* k!2 k!2 k!2 n!0)))))
 (let (($x701 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x642 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x105) (* 9 (* c!3 n!0)))))
 (let (($x489 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x642 4) $x701 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x527 0)))))
 (let (($x227 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x752 (* 2 (* k k k n))))
 (let ((?x751 (* 6 (* c k k n))))
 (let ((?x750 (* 6 (* c c k n))))
 (let ((?x749 (* 2 (* c c c n))))
 (let ((?x669 (* k k k)))
 (let ((?x748 (* 3 (* c k k))))
 (let ((?x519 (* c c c n n)))
 (let ((?x753 (* 3 (* c c k n n))))
 (let ((?x754 (* 3 (* c k k n n))))
 (let ((?x508 (* k k k n n)))
 (let ((?x747 (* 3 (* c c k))))
 (let ((?x481 (* c c c)))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x383 (* 3 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x424 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x68)))
 (let ((?x289 (* (- 1) (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x242 (* (- 3) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x291 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x244 (* 3 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x145 (* (- 3) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x110 (* (- 1) (* ?x315 ?x315 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x181 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x171 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x132 (* 3 (* ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x758 (+ ?x132 ?x171 ?x181 ?x110 ?x145 ?x244 ?x291 ?x242 ?x289 ?x424 ?x383 ?x481 ?x747 ?x508 ?x754 ?x753 ?x519 ?x748 ?x669 ?x749 ?x750 ?x751 ?x752)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 $x214 $x266 $x304 (not (= ?x758 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x108 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x315 (+ 1 n)))
 (let ((?x132 (* 3 (* ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x110 (* (- 1) (* ?x315 ?x315 (+ k m) ?x68 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x181 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x145 (* (- 3) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x242 (* (- 3) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x291 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x171 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x424 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x68)))
 (let ((?x289 (* (- 1) (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x383 (* 3 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x244 (* 3 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x471 (+ ?x244 ?x383 ?x289 ?x424 ?x171 ?x291 ?x242 ?x145 ?x181 ?x110 ?x132 (* ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let (($x236 (not (= ?x471 0))))
 (let (($x585 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x687 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x687 $x585 $x236)))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x543 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x752 (* 2 (* k k k n))))
 (let ((?x751 (* 6 (* c k k n))))
 (let ((?x750 (* 6 (* c c k n))))
 (let ((?x749 (* 2 (* c c c n))))
 (let ((?x669 (* k k k)))
 (let ((?x748 (* 3 (* c k k))))
 (let ((?x519 (* c c c n n)))
 (let ((?x753 (* 3 (* c c k n n))))
 (let ((?x754 (* 3 (* c k k n n))))
 (let ((?x508 (* k k k n n)))
 (let ((?x747 (* 3 (* c c k))))
 (let ((?x481 (* c c c)))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x383 (* 3 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x424 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x68)))
 (let ((?x289 (* (- 1) (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x242 (* (- 3) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x291 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x244 (* 3 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x145 (* (- 3) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x110 (* (- 1) (* ?x315 ?x315 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x181 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x171 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x132 (* 3 (* ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x758 (+ ?x132 ?x171 ?x181 ?x110 ?x145 ?x244 ?x291 ?x242 ?x289 ?x424 ?x383 ?x481 ?x747 ?x508 ?x754 ?x753 ?x519 ?x748 ?x669 ?x749 ?x750 ?x751 ?x752)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x190 (and $x130 $x214 $x266 $x304 (not (= ?x758 0)))))
 (let ((?x471 (+ ?x244 ?x383 ?x289 ?x424 ?x171 ?x291 ?x242 ?x145 ?x181 ?x110 ?x132 (* ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let (($x236 (not (= ?x471 0))))
 (let (($x585 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x687 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x671 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x687 $x585 $x236)))
 (rewrite (= $x671 $x190))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x250 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x315 (+ 1 n)))
 (let ((?x132 (* 3 (* ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x110 (* (- 1) (* ?x315 ?x315 (+ k m) ?x68 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x181 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x145 (* (- 3) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x242 (* (- 3) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x291 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x171 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x424 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x68)))
 (let ((?x289 (* (- 1) (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x383 (* 3 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x244 (* 3 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x471 (+ ?x244 ?x383 ?x289 ?x424 ?x171 ?x291 ?x242 ?x145 ?x181 ?x110 ?x132 (* ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let (($x236 (not (= ?x471 0))))
 (let (($x585 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x197 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x726 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= ?x726 (- 4)) $x197 $x585 $x236)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x111 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x315 (+ 1 n)))
 (let ((?x132 (* 3 (* ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x110 (* (- 1) (* ?x315 ?x315 (+ k m) ?x68 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x181 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x145 (* (- 3) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x242 (* (- 3) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x291 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x171 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x424 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x68)))
 (let ((?x289 (* (- 1) (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x383 (* 3 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x244 (* 3 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x471 (+ ?x244 ?x383 ?x289 ?x424 ?x171 ?x291 ?x242 ?x145 ?x181 ?x110 ?x132 (* ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let (($x236 (not (= ?x471 0))))
 (let (($x585 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x687 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x671 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x687 $x585 $x236)))
 (let (($x197 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x726 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x276 (and $x130 (= ?x726 (- 4)) $x197 $x585 $x236)))
 (rewrite (= $x276 $x671)))))))))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x68 (+ c k)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x74 (+ (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x79 (+ (- ?x74 (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71)) (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x71) (* 3 ?x68 ?x68 ?x68 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x84 (- (- ?x79 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x85 (- ?x84 (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x89 (- (+ ?x85 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x71 ?x71))))
 (let ((?x92 (+ ?x89 (* 3 ?x68 ?x68 ?x68 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x314 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x315 (+ 1 n)))
 (let ((?x132 (* 3 (* ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x110 (* (- 1) (* ?x315 ?x315 (+ k m) ?x68 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x181 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x145 (* (- 3) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x242 (* (- 3) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x291 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x171 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let ((?x424 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x68)))
 (let ((?x289 (* (- 1) (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x383 (* 3 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x244 (* 3 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x471 (+ ?x244 ?x383 ?x289 ?x424 ?x171 ?x291 ?x242 ?x145 ?x181 ?x110 ?x132 (* ?x315 ?x315 ?x68 ?x68 ?x68))))
 (let (($x236 (not (= ?x471 0))))
 (let (($x585 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x197 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x726 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x276 (and $x130 (= ?x726 (- 4)) $x197 $x585 $x236)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x79 (+ (- ?x74 (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71)) (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x71) (* 3 ?x68 ?x68 ?x68 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x84 (- (- ?x79 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x85 (- ?x84 (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x89 (- (+ ?x85 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x71 ?x71))))
 (let ((?x92 (+ ?x89 (* 3 ?x68 ?x68 ?x68 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x96 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0))))))
 (rewrite (= $x96 $x276)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x107 (mp (mp @x98 (quant-intro (proof-bind ?x314) (= $x97 $x250)) $x250) (rewrite (= $x250 $x250)) $x250)))
 (let ((@x746 (mp (mp @x107 (quant-intro (proof-bind ?x111) (= $x250 $x108)) $x108) (quant-intro (proof-bind ?x543) (= $x108 $x227)) $x227)))
 (let ((@x168 (mp (mp~ @x746 (sk (~ $x227 $x489)) $x489) (rewrite (= $x489 $x724)) $x724)))
 (let ((@x661 (and-elim @x168 $x675)))
 (let ((@x742 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x675) $x498)) @x661 $x498)))
 (let (($x654 (>= ?x670 (- 1))))
 (let ((@x284 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x675) $x654)) @x661 $x654)))
 (let (($x518 (<= ?x183 (- 6))))
 (let ((@x280 (and-elim @x168 $x647)))
 (let ((@x676 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x647) $x518)) @x280 $x518)))
 (let (($x705 (>= ?x183 (- 6))))
 (let ((@x708 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x647) $x705)) @x280 $x705)))
 (let (($x141 (<= ?x150 (- 4))))
 (let ((@x534 (and-elim @x168 $x148)))
 (let ((@x486 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x148) $x141)) @x534 $x141)))
 (let (($x167 (>= ?x150 (- 4))))
 (let ((@x734 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x148) $x167)) @x534 $x167)))
 (let (($x536 (<= ?x198 (- 1))))
 (let ((@x660 (and-elim @x168 $x199)))
 (let ((@x657 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x199) $x536)) @x660 $x536)))
 (let (($x728 (>= ?x198 (- 1))))
 (let ((@x684 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x199) $x728)) @x660 $x728)))
 (let (($x188 (not (<= ?x722 0))))
 (let (($x147 (>= ?x722 0)))
 (let ((@x159 ((_ th-lemma arith) (hypothesis (not $x147)) @x284 @x742 @x734 @x486 @x284 @x742 @x284 @x742 @x734 @x486 @x284 @x742 @x684 @x657 @x734 @x486 @x734 @x486 @x284 @x742 @x708 @x676 @x708 @x676 @x284 @x742 false)))
 (let ((@x512 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x730 $x188 (not $x147))) (and-elim @x168 $x161) (or $x188 (not $x147)))))
 ((_ th-lemma arith) (unit-resolution @x512 (lemma @x159 $x147) $x188) @x284 @x742 @x684 @x657 @x284 @x742 @x734 @x486 @x284 @x742 @x284 @x742 @x708 @x676 @x708 @x676 @x284 @x742 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        15
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           13
 :arith-gomory-cuts         1
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             258
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    17
 :arith-num-rows            10
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      18
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              8
 :max-memory                3.76
 :memory                    3.19
 :mk-bool-var               25
 :mk-clause                 16
 :num-allocs                2745399
 :num-checks                1
 :propagations              10
 :rlimit-count              27773
 :time                      0.03
 :total-time                0.03)
