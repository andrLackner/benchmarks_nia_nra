unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x67 (* (- 1) y!0)))
 (let ((?x174 (+ y00 x00 ?x67 (* (- 1) x!1))))
 (let (($x130 (>= ?x174 0)))
 (let (($x184 (= ?x174 0)))
 (let ((?x66 (+ 1 y!0)))
 (let ((?x278 (+ (- 1) x!1)))
 (let ((?x280 (* ?x278 ?x278 ?x278 ?x66 ?x66 ?x66)))
 (let ((?x277 (* x!1 x!1 x!1)))
 (let ((?x249 (* (- 2) (* x!1 x!1))))
 (let ((?x73 (+ ?x67 (* (- 3) (* y!0 x!1 x!1)) ?x249 ?x277 ?x280 (* (- 3) (* y!0 y!0 x!1)) (* y!0 x!1 x!1 x!1) (* (- 1) (* y!0 y!0 y!0 x!1)))))
 (let ((?x60 (* (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1) ?x73)))
 (let (($x57 (= ?x60 0)))
 (let (($x70 (not $x57)))
 (let (($x56 (and $x184 $x70)))
 (let ((?x243 (+ ?x67 ?x280 ?x277 ?x249 (* x!1 x!1 x!1 y!0) (* (- 3) (* x!1 x!1 y!0)) (* (- 1) (* x!1 y!0 y!0 y!0)) (* (- 3) (* x!1 y!0 y!0)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x252 (+ x!1 y!0 ?x55 ?x62)))
 (let (($x279 (and (= ?x252 0) (not (= (* ?x252 ?x243) 0)))))
 (let (($x91 (exists ((x Int) (y Int) )(! (let ((?x334 (* (- 3) (* x y y))))
 (let ((?x312 (* (- 1) (* x y y y))))
 (let ((?x168 (* (- 3) (* x x y))))
 (let ((?x207 (* x x x y)))
 (let ((?x191 (* x x x)))
 (let ((?x115 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x118 (* ?x71 ?x71 ?x71 ?x115 ?x115 ?x115)))
 (let ((?x220 (* (- 1) y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let ((?x270 (* ?x76 (+ ?x220 ?x118 ?x191 (* (- 2) (* x x)) ?x207 ?x168 ?x312 ?x334))))
 (let (($x81 (= ?x76 0)))
 (and $x81 (not (= ?x270 0))))))))))))))))) :qid k!26))
 ))
 (let (($x444 (exists ((x Int) (y Int) )(! (let ((?x334 (* (- 3) (* x y y))))
 (let ((?x312 (* (- 1) (* x y y y))))
 (let ((?x168 (* (- 3) (* x x y))))
 (let ((?x207 (* x x x y)))
 (let ((?x191 (* x x x)))
 (let ((?x115 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x118 (* ?x71 ?x71 ?x71 ?x115 ?x115 ?x115)))
 (let ((?x220 (* (- 1) y)))
 (let ((?x414 (+ (* (- 1) x) ?x220 ?x118 ?x191 (* (- 1) (* x x)) ?x207 ?x168 (* (- 1) (* x y)) (* (- 1) (* x (- 1) y)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) 1)) ?x312 ?x334)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (and $x81 (not (= (* ?x76 ?x414) 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x161 (lambda ((x Int) (y Int) )(let ((?x334 (* (- 3) (* x y y))))
 (let ((?x312 (* (- 1) (* x y y y))))
 (let ((?x168 (* (- 3) (* x x y))))
 (let ((?x207 (* x x x y)))
 (let ((?x191 (* x x x)))
 (let ((?x115 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x118 (* ?x71 ?x71 ?x71 ?x115 ?x115 ?x115)))
 (let ((?x220 (* (- 1) y)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let ((?x270 (* ?x76 (+ ?x220 ?x118 ?x191 (* (- 2) (* x x)) ?x207 ?x168 ?x312 ?x334))))
 (let (($x81 (= ?x76 0)))
 (let (($x347 (and $x81 (not (= ?x270 0)))))
 (let ((?x414 (+ (* (- 1) x) ?x220 ?x118 ?x191 (* (- 1) (* x x)) ?x207 ?x168 (* (- 1) (* x y)) (* (- 1) (* x (- 1) y)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) 1)) ?x312 ?x334)))
 (let (($x159 (and $x81 (not (= (* ?x76 ?x414) 0)))))
 (rewrite (= $x159 $x347))))))))))))))))))))
 ))
 (let (($x172 (exists ((x Int) (y Int) )(! (let ((?x228 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x115 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x118 (* ?x71 ?x71 ?x71 ?x115 ?x115 ?x115)))
 (let ((?x210 (+ ?x118 (* ?x71 ?x71 ?x71 ?x115) (* ?x71 ?x71) ?x228 (* (- 1) (* ?x115 ?x115 ?x115)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x322 (+ x ?x55 ?x62 y)))
 (and (= ?x322 0) (not (= (* ?x322 ?x210) 0))))))))))) :qid k!26))
 ))
 (let ((?x134 (lambda ((x Int) (y Int) )(let ((?x334 (* (- 3) (* x y y))))
 (let ((?x312 (* (- 1) (* x y y y))))
 (let ((?x168 (* (- 3) (* x x y))))
 (let ((?x207 (* x x x y)))
 (let ((?x191 (* x x x)))
 (let ((?x115 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x118 (* ?x71 ?x71 ?x71 ?x115 ?x115 ?x115)))
 (let ((?x220 (* (- 1) y)))
 (let ((?x414 (+ (* (- 1) x) ?x220 ?x118 ?x191 (* (- 1) (* x x)) ?x207 ?x168 (* (- 1) (* x y)) (* (- 1) (* x (- 1) y)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) 1)) ?x312 ?x334)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (let (($x159 (and $x81 (not (= (* ?x76 ?x414) 0)))))
 (let ((?x210 (+ ?x118 (* ?x71 ?x71 ?x71 ?x115) (* ?x71 ?x71) (* (- 1) (* ?x71 ?x115 ?x115 ?x115)) (* (- 1) (* ?x115 ?x115 ?x115)))))
 (let ((?x322 (+ x ?x55 ?x62 y)))
 (let (($x223 (and (= ?x322 0) (not (= (* ?x322 ?x210) 0)))))
 (rewrite (= $x223 $x159)))))))))))))))))))))
 ))
 (let (($x52 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38) (* ?x34 ?x34))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x34 ?x38 ?x38 ?x38)) (* ?x38 ?x38 ?x38)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0)))))))) :qid k!26))
 ))
 (let ((?x200 (lambda ((x Int) (y Int) )(let ((?x228 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x115 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x118 (* ?x71 ?x71 ?x71 ?x115 ?x115 ?x115)))
 (let ((?x210 (+ ?x118 (* ?x71 ?x71 ?x71 ?x115) (* ?x71 ?x71) ?x228 (* (- 1) (* ?x115 ?x115 ?x115)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x322 (+ x ?x55 ?x62 y)))
 (let (($x223 (and (= ?x322 0) (not (= (* ?x322 ?x210) 0)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38) (* ?x34 ?x34))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x34 ?x38 ?x38 ?x38)) (* ?x38 ?x38 ?x38)))))
 (let (($x51 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0))))))
 (rewrite (= $x51 $x223)))))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (let ((@x190 (mp (mp @x53 (quant-intro (proof-bind ?x200) (= $x52 $x172)) $x172) (rewrite (= $x172 $x172)) $x172)))
 (let ((@x201 (mp (mp @x190 (quant-intro (proof-bind ?x134) (= $x172 $x444)) $x444) (quant-intro (proof-bind ?x161) (= $x444 $x91)) $x91)))
 (let ((@x356 (mp (mp~ @x201 (sk (~ $x91 $x279)) $x279) (rewrite (= $x279 $x56)) $x56)))
 (let ((@x186 (and-elim @x356 $x184)))
 (let ((@x353 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x130)) @x186 $x130)))
 (let (($x339 (<= ?x174 0)))
 (let ((@x273 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x339)) @x186 $x339)))
 (let (($x343 (not (>= ?x60 0))))
 (let (($x149 (<= ?x60 0)))
 (let ((@x337 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x57 (not $x149) $x343)) (and-elim @x356 $x70) (or (not $x149) $x343))))
 (let ((@x238 (unit-resolution @x337 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x149)) @x273 @x353 false) $x149) $x343)))
 ((_ th-lemma arith farkas 1 1 1) @x238 @x273 @x353 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             54
 :arith-nonlinear-bounds    2
 :arith-num-rows            5
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.49
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1092660
 :num-checks                1
 :propagations              4
 :rlimit-count              1672
 :time                      0.01
 :total-time                0.01)
