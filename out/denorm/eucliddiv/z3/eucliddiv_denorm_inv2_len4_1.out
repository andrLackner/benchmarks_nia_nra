unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x69 (* y00 q00)))
 (let ((?x589 (+ r00 ?x69 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x570 (>= ?x589 0)))
 (let (($x590 (= ?x589 0)))
 (let ((?x371 (* (- 1) (* r!1 r!1))))
 (let ((?x332 (* y00 y00 y00 y00)))
 (let ((?x241 (* (- 1) (* y00 y00))))
 (let ((?x237 (+ (* y00 r!1 r!1 q!2) (* (- 1) (* r!1 r!1 q!2)) (* (- 1) (* y00 y00 y00 q!2)) (* (- 1) (* y00 y00 y00 q!2 q!2)) (* y00 r!1 r!1) (* (- 2) (* y00 y00 y00 r!1)) (* (- 6) (* y00 y00 y00 r!1 q!2 q!2)) (* (- 1) (* y00 y00 q!2)) (* y00 y00 r!1 r!1 q!2 q!2 q!2) (* y00 y00 r!1 r!1) (* 3 (* y00 y00 y00 y00 q!2 q!2)) (* (- 2) (* y00 y00 r!1)) (* (- 2) (* y00 y00 r!1 q!2)) (* 3 (* y00 y00 r!1 r!1 q!2)) (* 3 (* y00 y00 r!1 r!1 q!2 q!2)) ?x241 (* 2 (* y00 r!1 q!2)) ?x332 (* (- 2) (* y00 y00 y00 r!1 q!2 q!2 q!2)) (* 3 (* y00 y00 y00 y00 q!2)) (* y00 y00 y00 y00 q!2 q!2 q!2) (* 2 (* y00 r!1)) (* (- 6) (* y00 y00 y00 r!1 q!2)) ?x371)))
 (let ((?x614 (* ?x237 (+ (* (- 1) r00) (* (- 1) ?x69) r!1 (* y00 q!2)))))
 (let (($x128 (= ?x614 0)))
 (let (($x616 (not $x128)))
 (let (($x240 (and (= (+ y00 (* (- 1) y!0)) 0) $x590 $x616)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x249 (+ r!1 ?x65 (* q!2 y00) ?x79)))
 (let ((?x527 (+ ?x371 (* (- 1) (* q!2 r!1 r!1)) (* (- 1) (* q!2 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00)) (* r!1 r!1 y00 y00) (* 3 (* q!2 r!1 r!1 y00 y00)) (* 3 (* q!2 q!2 r!1 r!1 y00 y00)) (* q!2 q!2 q!2 r!1 r!1 y00 y00) (* (- 2) (* r!1 y00 y00 y00)) (* (- 6) (* q!2 r!1 y00 y00 y00)) (* 2 (* r!1 y00)) (* 2 (* q!2 r!1 y00)) (* (- 6) (* q!2 q!2 r!1 y00 y00 y00)) ?x241 (* (- 1) (* q!2 y00 y00)) (* (- 2) (* q!2 q!2 q!2 r!1 y00 y00 y00)) ?x332 (* 3 (* q!2 y00 y00 y00 y00)) (* 3 (* q!2 q!2 y00 y00 y00 y00)) (* q!2 q!2 q!2 y00 y00 y00 y00) (* r!1 r!1 y00) (* q!2 r!1 r!1 y00) (* (- 2) (* r!1 y00 y00)) (* (- 2) (* q!2 r!1 y00 y00)))))
 (let (($x558 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x249 0) (not (= (* ?x527 ?x249) 0)))))
 (let (($x85 (exists ((q Int) (r Int) (y Int) )(! (let ((?x69 (* y00 q00)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x39 (* q y00)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x93 (+ r ?x65 ?x39 ?x79)))
 (let ((?x414 (* (- 2) (* q r y00 y00))))
 (let ((?x413 (* (- 2) (* r y00 y00))))
 (let ((?x376 (* q r r y00)))
 (let ((?x375 (* r r y00)))
 (let ((?x349 (* q q q y00 y00 y00 y00)))
 (let ((?x364 (* 3 (* q q y00 y00 y00 y00))))
 (let ((?x363 (* 3 (* q y00 y00 y00 y00))))
 (let ((?x332 (* y00 y00 y00 y00)))
 (let ((?x362 (* (- 2) (* q q q r y00 y00 y00))))
 (let ((?x241 (* (- 1) (* y00 y00))))
 (let ((?x361 (* (- 6) (* q q r y00 y00 y00))))
 (let ((?x360 (* (- 6) (* q r y00 y00 y00))))
 (let ((?x358 (* (- 2) (* r y00 y00 y00))))
 (let ((?x228 (* q q q r r y00 y00)))
 (let ((?x357 (* 3 (* q q r r y00 y00))))
 (let ((?x356 (* 3 (* q r r y00 y00))))
 (let ((?x221 (* r r y00 y00)))
 (let ((?x197 (* (- 1) (* q q y00 y00 y00))))
 (let ((?x425 (* (- 1) (* q y00 y00 y00))))
 (let ((?x142 (* (- 1) (* q r r))))
 (let ((?x140 (* (- 1) (* r r))))
 (let ((?x600 (+ ?x140 ?x142 ?x425 ?x197 ?x221 ?x356 ?x357 ?x228 ?x358 ?x360 (* 2 (* r y00)) (* 2 (* q r y00)) ?x361 ?x241 (* (- 1) (* q y00 y00)) ?x362 ?x332 ?x363 ?x364 ?x349 ?x375 ?x376 ?x413 ?x414)))
 (let (($x98 (= ?x93 0)))
 (let (($x75 (= (+ y (* (- 1) y00)) 0)))
 (and $x75 $x98 (not (= (* ?x600 ?x93) 0)))))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x277 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x285 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x107 (+ r ?x64)))
 (let ((?x229 (+ 1 q)))
 (let ((?x334 (+ (* (- 1) (* ?x229 ?x107 ?x107)) (* (- 1) (* y00 y00 y00 ?x229 ?x229)) (* y00 y00 ?x229 ?x229 ?x229 ?x107 ?x107) (* y00 ?x229 ?x107 ?x107))))
 (let (($x66 (not (= (* ?x334 (+ r ?x64 ?x65 ?x285 (* y00 ?x229))) 0))))
 (let (($x86 (= (+ r ?x65 ?x285 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x86 $x66)))))))))) :qid k!29))
 ))
 (let ((?x223 (lambda ((q Int) (r Int) (y Int) )(let ((?x69 (* y00 q00)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x39 (* q y00)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x93 (+ r ?x65 ?x39 ?x79)))
 (let ((?x414 (* (- 2) (* q r y00 y00))))
 (let ((?x413 (* (- 2) (* r y00 y00))))
 (let ((?x376 (* q r r y00)))
 (let ((?x375 (* r r y00)))
 (let ((?x349 (* q q q y00 y00 y00 y00)))
 (let ((?x364 (* 3 (* q q y00 y00 y00 y00))))
 (let ((?x363 (* 3 (* q y00 y00 y00 y00))))
 (let ((?x332 (* y00 y00 y00 y00)))
 (let ((?x362 (* (- 2) (* q q q r y00 y00 y00))))
 (let ((?x241 (* (- 1) (* y00 y00))))
 (let ((?x361 (* (- 6) (* q q r y00 y00 y00))))
 (let ((?x360 (* (- 6) (* q r y00 y00 y00))))
 (let ((?x358 (* (- 2) (* r y00 y00 y00))))
 (let ((?x228 (* q q q r r y00 y00)))
 (let ((?x357 (* 3 (* q q r r y00 y00))))
 (let ((?x356 (* 3 (* q r r y00 y00))))
 (let ((?x221 (* r r y00 y00)))
 (let ((?x197 (* (- 1) (* q q y00 y00 y00))))
 (let ((?x425 (* (- 1) (* q y00 y00 y00))))
 (let ((?x142 (* (- 1) (* q r r))))
 (let ((?x140 (* (- 1) (* r r))))
 (let ((?x600 (+ ?x140 ?x142 ?x425 ?x197 ?x221 ?x356 ?x357 ?x228 ?x358 ?x360 (* 2 (* r y00)) (* 2 (* q r y00)) ?x361 ?x241 (* (- 1) (* q y00 y00)) ?x362 ?x332 ?x363 ?x364 ?x349 ?x375 ?x376 ?x413 ?x414)))
 (let (($x98 (= ?x93 0)))
 (let (($x75 (= (+ y (* (- 1) y00)) 0)))
 (let (($x608 (and $x75 $x98 (not (= (* ?x600 ?x93) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x285 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x107 (+ r ?x64)))
 (let ((?x229 (+ 1 q)))
 (let ((?x334 (+ (* (- 1) (* ?x229 ?x107 ?x107)) (* (- 1) (* y00 y00 y00 ?x229 ?x229)) (* y00 y00 ?x229 ?x229 ?x229 ?x107 ?x107) (* y00 ?x229 ?x107 ?x107))))
 (let (($x66 (not (= (* ?x334 (+ r ?x64 ?x65 ?x285 (* y00 ?x229))) 0))))
 (let (($x86 (= (+ r ?x65 ?x285 (* y00 q)) 0)))
 (let (($x291 (and (= (+ y00 (* (- 1) y)) 0) $x86 $x66)))
 (rewrite (= $x291 $x608))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x284 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x285 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x107 (+ r ?x64)))
 (let ((?x229 (+ 1 q)))
 (let ((?x334 (+ (* (- 1) (* ?x229 ?x107 ?x107)) (* (- 1) (* y00 y00 y00 ?x229 ?x229)) (* y00 y00 ?x229 ?x229 ?x229 ?x107 ?x107) (* y00 ?x229 ?x107 ?x107))))
 (let (($x66 (not (= (* ?x334 (+ r ?x64 ?x65 ?x285 (* y00 ?x229))) 0))))
 (let (($x86 (= (+ r ?x65 ?x285 (* y00 q)) 0)))
 (and (= (+ ?x64 y) 0) $x86 $x66)))))))))) :qid k!29))
 ))
 (let ((?x317 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x285 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x107 (+ r ?x64)))
 (let ((?x229 (+ 1 q)))
 (let ((?x334 (+ (* (- 1) (* ?x229 ?x107 ?x107)) (* (- 1) (* y00 y00 y00 ?x229 ?x229)) (* y00 y00 ?x229 ?x229 ?x229 ?x107 ?x107) (* y00 ?x229 ?x107 ?x107))))
 (let (($x66 (not (= (* ?x334 (+ r ?x64 ?x65 ?x285 (* y00 ?x229))) 0))))
 (let (($x86 (= (+ r ?x65 ?x285 (* y00 q)) 0)))
 (let (($x291 (and (= (+ y00 (* (- 1) y)) 0) $x86 $x66)))
 (let (($x67 (and (= (+ ?x64 y) 0) $x86 $x66)))
 (rewrite (= $x67 $x291))))))))))))))
 ))
 (let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x53 (+ (- (* (- 1) ?x45 ?x42 ?x42) (* ?x45 ?x45 y00 y00 y00)) (* ?x45 ?x45 ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x42 ?x42 y00))))
 (let (($x55 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x53) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x55))))))) :qid k!29))
 ))
 (let ((?x392 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x285 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x107 (+ r ?x64)))
 (let ((?x229 (+ 1 q)))
 (let ((?x334 (+ (* (- 1) (* ?x229 ?x107 ?x107)) (* (- 1) (* y00 y00 y00 ?x229 ?x229)) (* y00 y00 ?x229 ?x229 ?x229 ?x107 ?x107) (* y00 ?x229 ?x107 ?x107))))
 (let (($x66 (not (= (* ?x334 (+ r ?x64 ?x65 ?x285 (* y00 ?x229))) 0))))
 (let (($x86 (= (+ r ?x65 ?x285 (* y00 q)) 0)))
 (let (($x67 (and (= (+ ?x64 y) 0) $x86 $x66)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x53 (+ (- (* (- 1) ?x45 ?x42 ?x42) (* ?x45 ?x45 y00 y00 y00)) (* ?x45 ?x45 ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x42 ?x42 y00))))
 (let (($x56 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x53) 0))))
 (let (($x58 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x56))))
 (rewrite (= $x58 $x67))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x270 (mp (mp @x60 (quant-intro (proof-bind ?x392) (= $x59 $x284)) $x284) (rewrite (= $x284 $x284)) $x284)))
 (let ((@x218 (mp (mp @x270 (quant-intro (proof-bind ?x317) (= $x284 $x277)) $x277) (quant-intro (proof-bind ?x223) (= $x277 $x85)) $x85)))
 (let ((@x417 (mp (mp~ @x218 (sk (~ $x85 $x558)) $x558) (rewrite (= $x558 $x240)) $x240)))
 (let ((@x585 (and-elim @x417 $x590)))
 (let ((@x532 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x590) $x570)) @x585 $x570)))
 (let (($x566 (<= ?x589 0)))
 (let ((@x582 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x590) $x566)) @x585 $x566)))
 (let (($x530 (not (<= ?x614 0))))
 (let (($x565 (>= ?x614 0)))
 (let ((@x578 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x128 $x530 (not $x565))) (and-elim @x417 $x616) (or $x530 (not $x565)))))
 (let ((@x323 (unit-resolution @x578 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x565)) @x582 @x532 false) $x565) $x530)))
 ((_ th-lemma arith farkas 1 1 1) @x323 @x582 @x532 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             130
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 42
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.60
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1106141
 :num-checks                1
 :propagations              6
 :rlimit-count              2778
 :time                      0.01
 :total-time                0.01)
