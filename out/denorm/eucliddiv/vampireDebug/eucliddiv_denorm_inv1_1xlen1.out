% Warning: check-sat is not the last entry. Skipping the rest!
% dis+11_10_add=off:afr=on:afp=100000:afq=1.2:amm=off:anc=none:cond=on:gs=on:gsem=on:inw=on:ile=on:irw=on:lma=on:nm=64:newcnf=on:nwc=10:sas=z3:sac=on:sp=reverse_arity_2 on eucliddiv_denorm_inv1_1xlen1
% Refutation found. Thanks to Tanya!
% SZS status Unsatisfiable for eucliddiv_denorm_inv1_1xlen1
% SZS output start Proof for eucliddiv_denorm_inv1_1xlen1
1. ? [X2 : $int,X1 : $int,X0 : $int] : (0 = $sum($product($uminus(1),y00),X2) & 0 = $sum($difference($difference(X1,r00),$product(q00,y00)),$product(X0,y00)) & ~0 = $product($product($product($product($product($product($product($product($product($sum($product($uminus(1),y00),y00),$sum(X0,1)),$sum(X0,1)),$sum(X0,1)),$difference(X1,y00)),$difference(X1,y00)),$difference(X1,y00)),y00),y00),y00)) [input]
2. ? [X2 : $int,X1 : $int,X0 : $int] : (0 = $sum($product($uminus(1),y00),X2) & 0 = $sum($sum($difference(X1,r00),$uminus($product(q00,y00))),$product(X0,y00)) & ~0 = $product($product($product($product($product($product($product($product($product($sum($product($uminus(1),y00),y00),$sum(X0,1)),$sum(X0,1)),$sum(X0,1)),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),y00),y00),y00)) [theory normalization 1]
3. $sum(X0,X1) = $sum(X1,X0) [theory axiom 144]
5. $sum(X0,0) = X0 [theory axiom 146]
7. 0 = $sum(X0,$uminus(X0)) [theory axiom 149]
21. ? [X2 : $int,X1 : $int,X0 : $int] : (0 = $sum($product($uminus(1),y00),X2) & 0 = $sum($sum($sum(X1,$uminus(r00)),$uminus($product(q00,y00))),$product(X0,y00)) & ~0 = $product($product($product($product($product($product($product($product($product($sum($product($uminus(1),y00),y00),$sum(X0,1)),$sum(X0,1)),$sum(X0,1)),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),y00),y00),y00)) [theory normalization 2]
22. ? [X0 : $int,X1 : $int,X2 : $int] : (0 = $sum($product($uminus(1),y00),X0) & 0 = $sum($sum($sum(X1,$uminus(r00)),$uminus($product(q00,y00))),$product(X2,y00)) & ~0 = $product($product($product($product($product($product($product($product($product($sum($product($uminus(1),y00),y00),$sum(X2,1)),$sum(X2,1)),$sum(X2,1)),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),y00),y00),y00)) [rectify 21]
23. ? [X0 : $int,X1 : $int,X2 : $int] : (0 = $sum($product($uminus(1),y00),X0) & 0 = $sum($sum($sum(X1,$uminus(r00)),$uminus($product(q00,y00))),$product(X2,y00)) & 0 != $product($product($product($product($product($product($product($product($product($sum($product($uminus(1),y00),y00),$sum(X2,1)),$sum(X2,1)),$sum(X2,1)),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),$sum(X1,$uminus(y00))),y00),y00),y00)) [flattening 22]
24. 0 != $product($product($product($product($product($product($product($product($product($sum($product($uminus(1),y00),y00),$sum(sK2,1)),$sum(sK2,1)),$sum(sK2,1)),$sum(sK1,$uminus(y00))),$sum(sK1,$uminus(y00))),$sum(sK1,$uminus(y00))),y00),y00),y00) [cnf transformation 23]
28. 0 != $product($product($product($product($product($product($product($product($product($sum($product(-1,y00),y00),$sum(sK2,1)),$sum(sK2,1)),$sum(sK2,1)),$sum(sK1,$uminus(y00))),$sum(sK1,$uminus(y00))),$sum(sK1,$uminus(y00))),y00),y00),y00) [evaluation 24]
29. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),$sum($product($product(y00,y00),sK1),$sum($uminus($product($product(y00,y00),sK1)),$sum($uminus($product($product(y00,y00),sK2)),$sum($product($product(y00,y00),sK2),$sum($uminus($product(y00,y00)),$product(y00,y00)))))))) [polynomial multiplication 28]
940. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),$sum($product($product(y00,y00),sK1),$sum($uminus($product($product(y00,y00),sK1)),$sum($uminus($product($product(y00,y00),sK2)),$sum($product($product(y00,y00),sK2),$sum($product(y00,y00),$uminus($product(y00,y00))))))))) [forward demodulation 29,3]
941. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),$sum($product($product(y00,y00),sK1),$sum($uminus($product($product(y00,y00),sK1)),$sum($uminus($product($product(y00,y00),sK2)),$sum($product($product(y00,y00),sK2),0)))))) [forward demodulation 940,7]
942. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),$sum($product($product(y00,y00),sK1),$sum($uminus($product($product(y00,y00),sK1)),$sum($uminus($product($product(y00,y00),sK2)),$product($product(y00,y00),sK2)))))) [forward demodulation 941,5]
943. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),$sum($product($product(y00,y00),sK1),$sum($uminus($product($product(y00,y00),sK1)),$sum($product($product(y00,y00),sK2),$uminus($product($product(y00,y00),sK2))))))) [forward demodulation 942,3]
944. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),$sum($product($product(y00,y00),sK1),$sum($uminus($product($product(y00,y00),sK1)),0)))) [forward demodulation 943,7]
945. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),$sum($product($product(y00,y00),sK1),$uminus($product($product(y00,y00),sK1))))) [forward demodulation 944,5]
946. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$sum($uminus($product($product($product(y00,y00),sK2),sK1)),0)) [forward demodulation 945,7]
947. 0 != $sum($product($product($product(y00,y00),sK2),sK1),$uminus($product($product($product(y00,y00),sK2),sK1))) [forward demodulation 946,5]
948. $false [subsumption resolution 947,7]
% SZS output end Proof for eucliddiv_denorm_inv1_1xlen1
% ------------------------------
% Version: Vampire 4.6.1 (commit 1be729b10 on 2022-01-13 14:39:16 +0100)
% Linked with Z3 4.8.15.0 dfe2b27f9aa6d72583014fa301bd79d223fb254f z3-4.8.4-5822-gdfe2b27f9
% Termination reason: Refutation

% Memory used [KB]: 7931
% Time elapsed: 0.305 s
% ------------------------------
----  Runtime statistics ----
clauses created: 934
clauses deleted: 338
ssat_ground_clauses_for_congruence: 6
ssat_new_components: 3
ssat_non_splittable_sat_clauses: 6
ssat_reused_components: 3
ssat_sat_clauses: 6
-----------------------------
% ------------------------------
% Success in time 0.342 s
