unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x491 (* (- 1) y!0)))
 (let ((?x351 (+ y00 x00 ?x491 (* (- 1) x!1))))
 (let (($x155 (>= ?x351 0)))
 (let (($x228 (= ?x351 0)))
 (let ((?x158 (* 2 x!1)))
 (let ((?x499 (* (- 3) (* x!1 x!1))))
 (let ((?x483 (+ 1 y!0)))
 (let ((?x498 (+ (- 1) x!1)))
 (let ((?x352 (* (- 1) (* ?x498 ?x498 ?x498 ?x483 ?x483 ?x483))))
 (let ((?x326 (* x!1 x!1 x!1)))
 (let ((?x275 (+ (- 1) (* (- 1) (* y!0 y!0 x!1)) ?x326 ?x352 (* y!0 x!1) ?x491 (* y!0 x!1 x!1 x!1) (* (- 3) (* y!0 x!1 x!1)) ?x499 ?x158)))
 (let ((?x365 (* (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1) ?x275)))
 (let (($x481 (= ?x365 0)))
 (let (($x364 (not $x481)))
 (let (($x234 (and $x228 $x364)))
 (let ((?x423 (+ (- 1) ?x158 ?x491 ?x499 (* x!1 y!0) (* (- 1) (* x!1 y!0 y!0)) (* (- 3) (* x!1 x!1 y!0)) (* x!1 x!1 x!1 y!0) ?x326 ?x352)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x505 (+ x!1 y!0 ?x55 ?x62)))
 (let (($x210 (and (= ?x505 0) (not (= (* ?x505 ?x423) 0)))))
 (let (($x170 (exists ((x Int) (y Int) )(! (let ((?x458 (+ 1 y)))
 (let ((?x506 (+ (- 1) x)))
 (let ((?x463 (* (- 1) (* ?x506 ?x506 ?x506 ?x458 ?x458 ?x458))))
 (let ((?x448 (* x x x)))
 (let ((?x431 (* x x x y)))
 (let ((?x414 (* (- 3) (* x x y))))
 (let ((?x343 (* x y y)))
 (let ((?x212 (* (- 1) ?x343)))
 (let ((?x324 (* x y)))
 (let ((?x456 (* (- 1) y)))
 (let ((?x177 (+ (- 1) (* 2 x) ?x456 (* (- 3) (* x x)) ?x324 ?x212 ?x414 ?x431 ?x448 ?x463)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (and $x81 (not (= (* ?x76 ?x177) 0)))))))))))))))))) :qid k!26))
 ))
 (let (($x371 (exists ((x Int) (y Int) )(! (let ((?x458 (+ 1 y)))
 (let ((?x506 (+ (- 1) x)))
 (let ((?x463 (* (- 1) (* ?x506 ?x506 ?x506 ?x458 ?x458 ?x458))))
 (let ((?x448 (* x x x)))
 (let ((?x431 (* x x x y)))
 (let ((?x426 (* (- 1) (* x (- 1) y))))
 (let ((?x414 (* (- 3) (* x x y))))
 (let ((?x419 (* (- 1) (* x x 1))))
 (let ((?x412 (* (- 1) (* x (- 1) 1))))
 (let ((?x343 (* x y y)))
 (let ((?x212 (* (- 1) ?x343)))
 (let ((?x456 (* (- 1) y)))
 (let ((?x361 (+ (- 1) x ?x456 (* (- 2) (* x x)) ?x212 ?x412 ?x419 ?x414 ?x426 ?x431 ?x448 ?x463)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (and $x81 (not (= (* ?x76 ?x361) 0)))))))))))))))))))) :qid k!26))
 ))
 (let ((?x238 (lambda ((x Int) (y Int) )(let ((?x458 (+ 1 y)))
 (let ((?x506 (+ (- 1) x)))
 (let ((?x463 (* (- 1) (* ?x506 ?x506 ?x506 ?x458 ?x458 ?x458))))
 (let ((?x448 (* x x x)))
 (let ((?x431 (* x x x y)))
 (let ((?x414 (* (- 3) (* x x y))))
 (let ((?x343 (* x y y)))
 (let ((?x212 (* (- 1) ?x343)))
 (let ((?x324 (* x y)))
 (let ((?x456 (* (- 1) y)))
 (let ((?x177 (+ (- 1) (* 2 x) ?x456 (* (- 3) (* x x)) ?x324 ?x212 ?x414 ?x431 ?x448 ?x463)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (let (($x339 (and $x81 (not (= (* ?x76 ?x177) 0)))))
 (let ((?x426 (* (- 1) (* x (- 1) y))))
 (let ((?x419 (* (- 1) (* x x 1))))
 (let ((?x412 (* (- 1) (* x (- 1) 1))))
 (let ((?x361 (+ (- 1) x ?x456 (* (- 2) (* x x)) ?x212 ?x412 ?x419 ?x414 ?x426 ?x431 ?x448 ?x463)))
 (let (($x446 (and $x81 (not (= (* ?x76 ?x361) 0)))))
 (rewrite (= $x446 $x339))))))))))))))))))))))))
 ))
 (let (($x150 (exists ((x Int) (y Int) )(! (let ((?x458 (+ 1 y)))
 (let ((?x506 (+ (- 1) x)))
 (let ((?x463 (* (- 1) (* ?x506 ?x506 ?x506 ?x458 ?x458 ?x458))))
 (let ((?x142 (+ ?x463 (* ?x506 ?x506 ?x506 ?x458) (* (- 1) (* ?x458 ?x458)) (* (- 1) (* ?x506 ?x458 ?x458)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x482 (+ x ?x55 ?x62 y)))
 (and (= ?x482 0) (not (= (* ?x482 ?x142) 0)))))))))) :qid k!26))
 ))
 (let ((?x502 (lambda ((x Int) (y Int) )(let ((?x458 (+ 1 y)))
 (let ((?x506 (+ (- 1) x)))
 (let ((?x463 (* (- 1) (* ?x506 ?x506 ?x506 ?x458 ?x458 ?x458))))
 (let ((?x448 (* x x x)))
 (let ((?x431 (* x x x y)))
 (let ((?x426 (* (- 1) (* x (- 1) y))))
 (let ((?x414 (* (- 3) (* x x y))))
 (let ((?x419 (* (- 1) (* x x 1))))
 (let ((?x412 (* (- 1) (* x (- 1) 1))))
 (let ((?x343 (* x y y)))
 (let ((?x212 (* (- 1) ?x343)))
 (let ((?x456 (* (- 1) y)))
 (let ((?x361 (+ (- 1) x ?x456 (* (- 2) (* x x)) ?x212 ?x412 ?x419 ?x414 ?x426 ?x431 ?x448 ?x463)))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (let (($x446 (and $x81 (not (= (* ?x76 ?x361) 0)))))
 (let ((?x142 (+ ?x463 (* ?x506 ?x506 ?x506 ?x458) (* (- 1) (* ?x458 ?x458)) (* (- 1) (* ?x506 ?x458 ?x458)))))
 (let ((?x482 (+ x ?x55 ?x62 y)))
 (let (($x468 (and (= ?x482 0) (not (= (* ?x482 ?x142) 0)))))
 (rewrite (= $x468 $x446))))))))))))))))))))))))
 ))
 (let (($x52 (exists ((x Int) (y Int) )(! (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x39 ?x39)) (* ?x34 ?x39 ?x39)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0)))))))) :qid k!26))
 ))
 (let ((?x428 (lambda ((x Int) (y Int) )(let ((?x458 (+ 1 y)))
 (let ((?x506 (+ (- 1) x)))
 (let ((?x463 (* (- 1) (* ?x506 ?x506 ?x506 ?x458 ?x458 ?x458))))
 (let ((?x142 (+ ?x463 (* ?x506 ?x506 ?x506 ?x458) (* (- 1) (* ?x458 ?x458)) (* (- 1) (* ?x506 ?x458 ?x458)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x482 (+ x ?x55 ?x62 y)))
 (let (($x468 (and (= ?x482 0) (not (= (* ?x482 ?x142) 0)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x39 ?x39)) (* ?x34 ?x39 ?x39)))))
 (let (($x51 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0))))))
 (rewrite (= $x51 $x468))))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (let ((@x465 (mp (mp @x53 (quant-intro (proof-bind ?x428) (= $x52 $x150)) $x150) (rewrite (= $x150 $x150)) $x150)))
 (let ((@x503 (mp (mp @x465 (quant-intro (proof-bind ?x502) (= $x150 $x371)) $x371) (quant-intro (proof-bind ?x238) (= $x371 $x170)) $x170)))
 (let ((@x242 (mp (mp~ @x503 (sk (~ $x170 $x210)) $x210) (rewrite (= $x210 $x234)) $x234)))
 (let ((@x135 (and-elim @x242 $x228)))
 (let ((@x455 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x228) $x155)) @x135 $x155)))
 (let (($x138 (<= ?x351 0)))
 (let ((@x149 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x228) $x138)) @x135 $x138)))
 (let (($x154 (not (>= ?x365 0))))
 (let (($x321 (<= ?x365 0)))
 (let ((@x449 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x481 (not $x321) $x154)) (and-elim @x242 $x364) (or (not $x321) $x154))))
 (let ((@x327 (unit-resolution @x449 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x321)) @x149 @x455 false) $x321) $x154)))
 ((_ th-lemma arith farkas 1 1 1) @x327 @x149 @x455 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             54
 :arith-nonlinear-bounds    2
 :arith-num-rows            5
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.52
 :memory                    3.12
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1100223
 :num-checks                1
 :propagations              4
 :rlimit-count              1726
 :time                      0.01
 :total-time                0.01)
