unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x323 (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0)))))
 (let (($x197 (<= ?x323 0)))
 (let (($x315 (= ?x323 0)))
 (let ((?x213 (* (- 1) (* n!0 k!2))))
 (let ((?x289 (* 3 k!2)))
 (let ((?x277 (* (- 2) n!0)))
 (let ((?x320 (* 3 c!3)))
 (let ((?x144 (+ ?x320 ?x277 k!2 ?x213)))
 (let (($x252 (= ?x144 0)))
 (let ((?x208 (* c!3 n!0)))
 (let ((?x209 (* 9 ?x208)))
 (let ((?x218 (* 5 k!2)))
 (let ((?x150 (* (- 9) n!0)))
 (let ((?x135 (* k!2 k!2)))
 (let ((?x203 (* (- 1) ?x135)))
 (let ((?x217 (* 18 c!3)))
 (let ((?x225 (+ ?x217 ?x203 ?x150 ?x218 ?x209)))
 (let (($x98 (= ?x225 4)))
 (let ((?x257 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x258 (= ?x257 (- 6))))
 (let (($x256 (and $x258 $x98 $x252 $x315 (not (= (+ ?x320 ?x277 ?x289 ?x213 (* (- 1) (* n!0 m!1))) 2)))))
 (let ((?x321 (* (- 1) (* k!2 n!0))))
 (let (($x170 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x217 ?x218 ?x150 ?x203 ?x209) 4) (= (+ ?x320 k!2 ?x277 ?x321) 0) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 0) (not (= (+ ?x320 ?x289 ?x277 ?x321 (* (- 1) (* m!1 n!0))) 2)))))
 (let (($x368 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x52 (* k n)))
 (let ((?x231 (* (- 1) ?x52)))
 (let ((?x230 (* (- 2) n)))
 (let ((?x228 (* 3 c)))
 (let (($x359 (= (+ ?x228 (* 3 k) ?x230 ?x231 (* (- 1) (* m n))) 2)))
 (let ((?x46 (* k k)))
 (let ((?x191 (* (- 1) ?x46)))
 (let ((?x190 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x111 (= (+ m (* (- 6) n)) 6)))
 (and $x111 (= (+ ?x37 ?x41 ?x190 ?x191 (* 9 (* c n))) 4) (= (+ ?x228 k ?x230 ?x231) 0) (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0) (not $x359))))))))))))) :qid k!33))
 ))
 (let (($x195 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x230 (* (- 2) n)))
 (let ((?x228 (* 3 c)))
 (let ((?x103 (+ ?x228 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x230)))
 (let (($x234 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x191 (* (- 1) ?x46)))
 (let ((?x190 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x111 (= (+ m (* (- 6) n)) 6)))
 (and $x111 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x190 ?x191) 4) (= (+ ?x228 (* (- 1) (* n k)) k ?x230) 0) $x234 (not (= ?x103 2))))))))))))) :qid k!33))
 ))
 (let ((?x117 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x52 (* k n)))
 (let ((?x231 (* (- 1) ?x52)))
 (let ((?x230 (* (- 2) n)))
 (let ((?x228 (* 3 c)))
 (let (($x359 (= (+ ?x228 (* 3 k) ?x230 ?x231 (* (- 1) (* m n))) 2)))
 (let ((?x46 (* k k)))
 (let ((?x191 (* (- 1) ?x46)))
 (let ((?x190 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x111 (= (+ m (* (- 6) n)) 6)))
 (let (($x286 (and $x111 (= (+ ?x37 ?x41 ?x190 ?x191 (* 9 (* c n))) 4) (= (+ ?x228 k ?x230 ?x231) 0) (= (+ k (* (- 3) n) (* (- 3) (* n n))) 0) (not $x359))))
 (let ((?x103 (+ ?x228 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x230)))
 (let (($x234 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let (($x271 (and $x111 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x190 ?x191) 4) (= (+ ?x228 (* (- 1) (* n k)) k ?x230) 0) $x234 (not (= ?x103 2)))))
 (rewrite (= $x271 $x286))))))))))))))))))
 ))
 (let (($x308 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x56 (* 2 n)))
 (let ((?x66 (+ k m)))
 (let ((?x226 (* (+ 1 n) ?x66)))
 (let ((?x259 (* (- 3) c)))
 (let (($x234 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x248 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46)))
 (let (($x111 (= (+ m (* (- 6) n)) 6)))
 (and $x111 (= ?x248 (- 4)) (= (+ ?x259 (* n k) (* (- 1) k) ?x56) 0) $x234 (not (= (+ ?x259 (* (- 4) k) ?x226 (* (- 1) m) ?x56) (- 2))))))))))))) :qid k!33))
 ))
 (let ((?x106 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x230 (* (- 2) n)))
 (let ((?x228 (* 3 c)))
 (let ((?x103 (+ ?x228 (* 4 k) (* (- 1) (* (+ 1 n) (+ k m))) m ?x230)))
 (let (($x234 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x191 (* (- 1) ?x46)))
 (let ((?x190 (* (- 9) n)))
 (let ((?x41 (* 5 k)))
 (let ((?x37 (* 18 c)))
 (let (($x111 (= (+ m (* (- 6) n)) 6)))
 (let (($x271 (and $x111 (= (+ ?x37 (* 9 (* n c)) ?x41 ?x190 ?x191) 4) (= (+ ?x228 (* (- 1) (* n k)) k ?x230) 0) $x234 (not (= ?x103 2)))))
 (let ((?x56 (* 2 n)))
 (let ((?x66 (+ k m)))
 (let ((?x226 (* (+ 1 n) ?x66)))
 (let ((?x259 (* (- 3) c)))
 (let ((?x45 (* 9 n)))
 (let ((?x248 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46)))
 (let (($x221 (and $x111 (= ?x248 (- 4)) (= (+ ?x259 (* n k) (* (- 1) k) ?x56) 0) $x234 (not (= (+ ?x259 (* (- 4) k) ?x226 (* (- 1) m) ?x56) (- 2))))))
 (rewrite (= $x221 $x271)))))))))))))))))))))
 ))
 (let (($x78 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x66 (+ k m)))
 (let ((?x73 (+ (- (+ (* (- 3) (+ c k)) (* ?x66 (+ n 1))) ?x66) (* 2 (+ n 1)))))
 (let (($x58 (= (+ (- (+ (* (- 3) c) (* k n)) k) (* 2 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) $x58 (= (+ (- (* 3 n n) k) (* 3 n)) 0) (or (not (= ?x73 0))))))))))) :qid k!33))
 ))
 (let ((?x310 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x56 (* 2 n)))
 (let ((?x66 (+ k m)))
 (let ((?x226 (* (+ 1 n) ?x66)))
 (let ((?x259 (* (- 3) c)))
 (let (($x234 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) 0)))
 (let ((?x46 (* k k)))
 (let ((?x45 (* 9 n)))
 (let ((?x248 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x45 ?x46)))
 (let (($x111 (= (+ m (* (- 6) n)) 6)))
 (let (($x221 (and $x111 (= ?x248 (- 4)) (= (+ ?x259 (* n k) (* (- 1) k) ?x56) 0) $x234 (not (= (+ ?x259 (* (- 4) k) ?x226 (* (- 1) m) ?x56) (- 2))))))
 (let ((?x73 (+ (- (+ (* (- 3) (+ c k)) (* ?x66 (+ n 1))) ?x66) (* 2 (+ n 1)))))
 (let ((?x41 (* 5 k)))
 (let ((?x47 (+ (- (- (- 4 (* 18 c)) (* 9 c n)) ?x41) ?x45 ?x46)))
 (let (($x77 (and (= (- (+ (- 6) m) (* 6 n)) 0) (= ?x47 0) (= (+ (- (+ (* (- 3) c) (* k n)) k) ?x56) 0) (= (+ (- (* 3 n n) k) (* 3 n)) 0) (or (not (= ?x73 0))))))
 (rewrite (= $x77 $x221)))))))))))))))))
 ))
 (let ((@x79 (asserted $x78)))
 (let ((@x176 (mp (mp @x79 (quant-intro (proof-bind ?x310) (= $x78 $x308)) $x308) (rewrite (= $x308 $x308)) $x308)))
 (let ((@x92 (mp (mp @x176 (quant-intro (proof-bind ?x106) (= $x308 $x195)) $x195) (quant-intro (proof-bind ?x117) (= $x195 $x368)) $x368)))
 (let ((@x242 (mp (mp~ @x92 (sk (~ $x368 $x170)) $x170) (rewrite (= $x170 $x256)) $x256)))
 (let ((@x134 (and-elim @x242 $x315)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x315) $x197)) @x134 $x197)))
 (let (($x198 (>= ?x323 0)))
 (let ((@x113 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x315) $x198)) @x134 $x198)))
 (let (($x324 (<= ?x144 0)))
 (let ((@x102 (and-elim @x242 $x252)))
 (let ((@x167 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x252) $x324)) @x102 $x324)))
 (let (($x278 (>= ?x144 0)))
 (let ((@x186 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x252) $x278)) @x102 $x278)))
 (let (($x146 (<= ?x225 4)))
 (let ((@x97 (and-elim @x242 $x98)))
 (let ((@x300 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x98) $x146)) @x97 $x146)))
 (let (($x148 (>= ?x225 4)))
 (let ((@x283 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x98) $x148)) @x97 $x148)))
 (let (($x214 (<= ?x257 (- 6))))
 (let ((@x281 (and-elim @x242 $x258)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x258) $x214)) @x281 $x214)))
 (let (($x142 (>= ?x257 (- 6))))
 (let ((@x193 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x258) $x142)) @x281 $x142)))
 (let ((@x438 ((_ th-lemma arith) (hypothesis (>= (+ ?x320 ?x277 k!2 ?x208 ?x213) 3)) @x186 @x167 @x193 @x152 @x113 @x104 @x113 @x104 @x186 @x167 @x186 @x167 @x283 @x300 @x186 @x167 false)))
 (let ((@x473 (lemma @x438 (not (>= (+ ?x320 ?x277 k!2 ?x208 ?x213) 3)))))
 (let ((?x474 (+ ?x320 ?x277 k!2 ?x208 ?x213)))
 (let (($x371 (>= ?x474 2)))
 (let ((@x623 (hypothesis (not $x371))))
 (let (($x169 (>= ?x208 1)))
 (let (($x90 (>= n!0 2)))
 (let (($x158 (<= m!1 12)))
 (let (($x86 (not $x158)))
 (let ((@x285 (hypothesis (not $x169))))
 (let ((@x155 (hypothesis $x158)))
 (let (($x264 (<= k!2 0)))
 (let (($x206 (not $x264)))
 (let (($x237 (>= k!2 0)))
 (let ((@x96 (hypothesis (not $x237))))
 (let ((@x254 (lemma ((_ th-lemma arith) @x96 @x104 @x96 @x104 @x96 @x104 false) $x237)))
 (let ((@x95 (lemma ((_ th-lemma arith farkas -3/2 1/6 -1 -1/6 1 1) @x285 @x283 @x167 @x104 @x254 (hypothesis $x264) false) (or $x206 $x169))))
 (let ((@x156 (unit-resolution @x95 @x285 $x206)))
 (let ((@x194 ((_ th-lemma arith farkas 1/9 -2/3 -2/3 -2/3 -2/3 -2/3 -1/9 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 -1/3 1 1 1 1 1 1 1 1) @x152 @x285 @x283 @x167 @x104 @x156 @x193 @x285 @x283 @x167 @x104 @x156 @x155 @x152 @x186 @x285 @x285 @x283 @x167 @x104 @x156 @x155 @x152 false)))
 (let ((@x115 ((_ th-lemma arith gomory-cut 1/5 1/5) (unit-resolution (lemma @x194 (or $x86 $x169)) @x285 $x86) @x193 $x90)))
 (let (($x129 (>= c!3 0)))
 (let ((@x136 (hypothesis $x90)))
 (let ((@x119 ((_ th-lemma arith) @x104 @x136 @x136 (hypothesis (not $x129)) @x136 @x186 @x167 false)))
 (let ((@x288 (unit-resolution (lemma @x119 (or $x129 (not $x90))) @x115 $x129)))
 (let ((@x297 ((_ th-lemma arith) @x193 @x152 @x113 @x104 @x113 @x104 @x283 @x300 @x288 @x285 @x115 @x288 @x285 @x115 @x113 @x104 @x186 @x167 false)))
 (let ((@x298 (lemma @x297 $x169)))
 (let (($x512 (<= n!0 0)))
 (let (($x123 (>= c!3 2)))
 (let ((@x581 (hypothesis (not $x512))))
 (let (($x606 (<= n!0 1)))
 (let (($x565 (not $x606)))
 (let (($x122 (not $x90)))
 (let ((@x518 (hypothesis $x122)))
 (let ((@x584 (lemma ((_ th-lemma arith farkas -1 -1 -1/3 -1/3 -1/3 -2/3 1) @x581 @x518 @x581 @x518 @x167 @x518 @x298 false) (or $x512 $x90))))
 (let ((@x610 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x565 $x122)) (unit-resolution @x584 @x581 $x90) $x565)))
 (let (($x342 (not $x123)))
 (let ((@x618 (hypothesis $x342)))
 (let ((@x621 (lemma ((_ th-lemma arith) @x610 @x186 @x581 @x104 @x618 @x610 @x618 @x610 @x186 @x167 false) (or $x123 $x512))))
 (let ((@x625 (lemma ((_ th-lemma arith farkas 1 1 1 1) @x186 (hypothesis $x123) (hypothesis $x565) @x473 false) (or $x606 $x342))))
 (let ((@x628 (lemma (unit-resolution @x625 @x610 (unit-resolution @x621 @x581 $x123) false) $x512)))
 (let (($x444 (>= ?x135 0)))
 (let ((@x617 ((_ th-lemma arith) @x113 @x104 @x193 @x152 @x623 @x186 @x254 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x444)) false) $x444) @x283 @x628 @x628 @x254 @x298 @x186 @x623 @x186 @x167 @x186 @x167 @x283 @x300 @x186 @x167 false)))
 (let ((@x616 (lemma @x617 $x371)))
 ((_ th-lemma arith) @x193 @x152 @x186 @x167 @x283 @x300 @x616 @x473 @x186 @x167 @x186 @x167 @x616 @x473 @x113 @x104 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 19
 :arith-assert-diseq        5
 :arith-assert-lower        213
 :arith-assert-upper        110
 :arith-bound-prop          1
 :arith-branch-var          11
 :arith-conflicts           22
 :arith-eq-adapter          7
 :arith-fixed-eqs           32
 :arith-gcd-tests           79
 :arith-gomory-cuts         8
 :arith-grobner             24
 :arith-ineq-splits         11
 :arith-max-min             780
 :arith-nonlinear-bounds    27
 :arith-nonlinear-horner    158
 :arith-num-rows            11
 :arith-offset-eqs          6
 :arith-patches             38
 :arith-patches_succ        17
 :arith-pivots              213
 :arith-pseudo-nonlinear    24
 :arith-row-summations      578
 :arith-tableau-max-columns 32
 :arith-tableau-max-rows    11
 :conflicts                 23
 :decisions                 63
 :del-clause                43
 :final-checks              79
 :max-memory                3.74
 :memory                    3.18
 :minimized-lits            4
 :mk-bool-var               89
 :mk-clause                 49
 :num-allocs                1690467
 :num-checks                1
 :propagations              53
 :rlimit-count              44932
 :time                      0.03
 :total-time                0.04)
