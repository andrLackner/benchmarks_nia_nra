unsat
((set-logic NIA)
(proof
(let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x52 (* y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x51 (* ?x44 ?x44 ?x44 y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x28 (- 1)))
 (let ((?x50 (* ?x28 ?x43 ?x43 ?x44 ?x44 y00 y00)))
 (let ((?x53 (- ?x50 ?x51)))
 (let ((?x54 (- ?x53 ?x52)))
 (let ((?x48 (* ?x43 ?x44 ?x44 ?x44 y00)))
 (let ((?x46 (* ?x43 ?x44 ?x44 ?x44)))
 (let ((?x45 (* ?x43 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (- ?x45 ?x46)))
 (let ((?x49 (+ ?x47 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x55 (* ?x42 ?x49 ?x54)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x58)))))))))))))))))))))) :qid k!29))
 ))
 (let (($x873 (= $x60 false)))
 (let (($x866 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x872 (elim-unused (= $x866 false))))
 (let (($x869 (= $x60 $x866)))
 (let ((?x967 (lambda ((q Int) (r Int) (y Int) )(let ((?x52 (* y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x51 (* ?x44 ?x44 ?x44 y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x28 (- 1)))
 (let ((?x50 (* ?x28 ?x43 ?x43 ?x44 ?x44 y00 y00)))
 (let ((?x53 (- ?x50 ?x51)))
 (let ((?x54 (- ?x53 ?x52)))
 (let ((?x48 (* ?x43 ?x44 ?x44 ?x44 y00)))
 (let ((?x46 (* ?x43 ?x44 ?x44 ?x44)))
 (let ((?x45 (* ?x43 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (- ?x45 ?x46)))
 (let ((?x49 (+ ?x47 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x55 (* ?x42 ?x49 ?x54)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x59 (and $x33 $x41 $x58)))
 (let (($x864 (= $x59 false)))
 (let (($x903 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x89 (= (+ (* (- 1) y00) y) 0)))
 (let (($x961 (and $x89 $x903 false)))
 (let (($x857 (= $x58 false)))
 (let ((@x856 (rewrite (= (or false) false))))
 (let (($x852 (or false)))
 (let (($x853 (= $x58 $x852)))
 (let (($x850 (= $x57 false)))
 (let ((@x849 (rewrite (= (not true) false))))
 (let (($x845 (not true)))
 (let (($x846 (= $x57 $x845)))
 (let (($x843 (= $x56 true)))
 (let ((@x842 (rewrite (= (= 0 0) true))))
 (let (($x838 (= 0 0)))
 (let (($x839 (= $x56 $x838)))
 (let ((?x821 (* (- 1) ?x52)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x87 (+ r ?x65)))
 (let ((?x922 (* y00 ?x87 ?x87 ?x87)))
 (let ((?x930 (* (- 1) ?x922)))
 (let ((?x917 (* (- 1) (* y00 y00 (+ 1 q) (+ 1 q) ?x87 ?x87))))
 (let ((?x944 (+ ?x917 ?x930 ?x821)))
 (let ((?x84 (+ 1 q)))
 (let ((?x900 (* y00 ?x84 ?x87 ?x87 ?x87)))
 (let ((?x449 (* ?x84 ?x87 ?x87 ?x87)))
 (let ((?x890 (* (- 1) ?x449)))
 (let ((?x90 (* y00 y00 y00 ?x84 ?x84 ?x84 ?x87 ?x87 ?x87)))
 (let ((?x911 (+ ?x90 ?x890 ?x900)))
 (let ((?x949 (* 0 ?x911 ?x944)))
 (let ((@x92 (rewrite (= ?x44 ?x87))))
 (let ((@x767 (monotonicity @x92 @x92 @x92 (= ?x51 (* ?x87 ?x87 ?x87 y00)))))
 (let ((@x926 (trans @x767 (rewrite (= (* ?x87 ?x87 ?x87 y00) ?x922)) (= ?x51 ?x922))))
 (let ((@x86 (rewrite (= ?x43 ?x84))))
 (let ((@x726 (monotonicity (rewrite (= ?x28 (- 1))) @x86 @x86 @x92 @x92 (= ?x50 (* (- 1) ?x84 ?x84 ?x87 ?x87 y00 y00)))))
 (let ((@x921 (trans @x726 (rewrite (= (* (- 1) ?x84 ?x84 ?x87 ?x87 y00 y00) ?x917)) (= ?x50 ?x917))))
 (let ((@x935 (trans (monotonicity @x921 @x926 (= ?x53 (- ?x917 ?x922))) (rewrite (= (- ?x917 ?x922) (+ ?x917 ?x930))) (= ?x53 (+ ?x917 ?x930)))))
 (let ((@x943 (trans (monotonicity @x935 (= ?x54 (- (+ ?x917 ?x930) ?x52))) (rewrite (= (- (+ ?x917 ?x930) ?x52) (+ (+ ?x917 ?x930) ?x821))) (= ?x54 (+ (+ ?x917 ?x930) ?x821)))))
 (let ((@x948 (trans @x943 (rewrite (= (+ (+ ?x917 ?x930) ?x821) ?x944)) (= ?x54 ?x944))))
 (let ((@x604 (monotonicity @x86 @x92 @x92 @x92 (= ?x48 (* ?x84 ?x87 ?x87 ?x87 y00)))))
 (let ((@x907 (trans @x604 (rewrite (= (* ?x84 ?x87 ?x87 ?x87 y00) ?x900)) (= ?x48 ?x900))))
 (let ((@x878 (rewrite (= (* ?x84 ?x84 ?x84 ?x87 ?x87 ?x87 y00 y00 y00) ?x90))))
 (let ((@x95 (monotonicity @x86 @x86 @x86 @x92 @x92 @x92 (= ?x45 (* ?x84 ?x84 ?x84 ?x87 ?x87 ?x87 y00 y00 y00)))))
 (let ((@x886 (monotonicity (trans @x95 @x878 (= ?x45 ?x90)) (rewrite (= ?x46 ?x449)) (= ?x47 (- ?x90 ?x449)))))
 (let ((@x899 (trans @x886 (rewrite (= (- ?x90 ?x449) (+ ?x90 ?x890))) (= ?x47 (+ ?x90 ?x890)))))
 (let ((@x915 (trans (monotonicity @x899 @x907 (= ?x49 (+ (+ ?x90 ?x890) ?x900))) (rewrite (= (+ (+ ?x90 ?x890) ?x900) ?x911)) (= ?x49 ?x911))))
 (let ((@x81 (trans (monotonicity (rewrite (= ?x30 ?x65)) (= ?x42 (+ ?x65 y00))) (rewrite (= (+ ?x65 y00) 0)) (= ?x42 0))))
 (let ((@x954 (trans (monotonicity @x81 @x915 @x948 (= ?x55 ?x949)) (rewrite (= ?x949 0)) $x56)))
 (let ((@x958 (trans (monotonicity (trans (monotonicity @x954 $x839) @x842 $x843) $x846) @x849 $x850)))
 (let ((@x963 (monotonicity (rewrite (= $x33 $x89)) (rewrite (= $x41 $x903)) (trans (monotonicity @x958 $x853) @x856 $x857) (= $x59 $x961))))
 (trans @x963 (rewrite (= $x961 false)) $x864))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (mp @x61 (trans (quant-intro (proof-bind ?x967) $x869) @x872 $x873) false))))))))))

(:max-memory   3.45
 :memory       3.15
 :mk-bool-var  5
 :num-allocs   922522
 :rlimit-count 637
 :time         0.01
 :total-time   0.01)
