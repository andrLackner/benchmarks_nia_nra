unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x653 (* (- 32) k!2)))
 (let ((?x571 (* k!2 k!2)))
 (let ((?x327 (* (- 5) m!1)))
 (let ((?x403 (* m!1 m!1)))
 (let ((?x324 (* (- 27) c!3)))
 (let ((?x311 (* 9 n!0)))
 (let ((?x246 (+ 13 (* (- 9) (* n!0 c!3)) ?x311 ?x324 ?x403 ?x327 ?x571 ?x653 (* (- 9) (* n!0 k!2)) (* 2 (* m!1 k!2)))))
 (let (($x863 (<= ?x246 0)))
 (let ((?x383 (* 5 k!2)))
 (let ((?x168 (* (- 1) ?x571)))
 (let ((?x390 (* 18 c!3)))
 (let ((?x384 (* (- 9) n!0)))
 (let ((?x595 (+ (* 9 (* n!0 c!3)) ?x384 ?x390 ?x168 ?x383)))
 (let (($x777 (<= ?x595 4)))
 (let (($x598 (= ?x595 4)))
 (let ((?x629 (+ m!1 k!2)))
 (let ((?x904 (+ 6 m!1)))
 (let ((?x395 (+ 1 n!0)))
 (let ((?x804 (+ c!3 k!2)))
 (let ((?x773 (* (- 1) (* ?x395 ?x395 ?x395 ?x904 ?x904 ?x904 ?x629 ?x629 ?x629 ?x804 ?x804 ?x804))))
 (let ((?x749 (* m!1 m!1 m!1)))
 (let ((?x460 (* (- 6) (* c!3 c!3))))
 (let ((?x601 (* 6 ?x403)))
 (let ((?x172 (* (- 1) (* c!3 c!3 m!1))))
 (let ((?x335 (* (- 12) (* c!3 k!2))))
 (let ((?x432 (+ ?x335 (* 2 (* n!0 n!0 m!1 m!1 k!2)) (* (- 6) (* n!0 n!0 c!3 c!3)) (* (- 2) (* n!0 n!0 c!3 m!1 k!2)) ?x172 ?x601 (* n!0 n!0 m!1 m!1 m!1) (* (- 1) (* n!0 n!0 c!3 c!3 m!1)) ?x460 (* (- 12) (* n!0 c!3 c!3)) (* (- 2) (* c!3 m!1 k!2)) (* (- 4) (* n!0 c!3 m!1 k!2)) (* (- 2) (* n!0 c!3 c!3 m!1)) (* 6 (* n!0 n!0 m!1 m!1)) (* (- 12) (* n!0 n!0 c!3 k!2)) (* (- 24) (* n!0 c!3 k!2)) (* 12 (* n!0 n!0 m!1 k!2)) (* (- 1) (* ?x395 ?x904 ?x904 ?x629 ?x629 ?x629 ?x804)) (* 2 (* m!1 m!1 k!2)) (* 4 (* n!0 m!1 m!1 k!2)) (* 24 (* n!0 m!1 k!2)) ?x749 ?x773 (* 2 (* n!0 m!1 m!1 m!1)) (* 12 (* m!1 k!2)) (* 12 (* n!0 m!1 m!1)) (* (- 1) (* ?x395 ?x904 ?x904 ?x629 ?x629 ?x629)))))
 (let ((?x239 (* ?x432 ?x246)))
 (let (($x666 (= ?x239 0)))
 (let (($x656 (not $x666)))
 (let ((?x620 (* (- 1) k!2)))
 (let ((?x737 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x620)))
 (let (($x852 (= ?x737 (- 1))))
 (let ((?x765 (* n!0 k!2)))
 (let ((?x840 (+ (* 2 n!0) (* (- 3) c!3) ?x620 ?x765)))
 (let (($x724 (= ?x840 (- 1))))
 (let ((?x906 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x604 (= ?x906 (- 6))))
 (let (($x254 (and $x604 $x598 $x724 $x852 $x656)))
 (let ((?x139 (+ 13 ?x324 ?x653 ?x327 ?x311 ?x571 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x403)))
 (let ((?x591 (* (- 1) (* ?x395 ?x904 ?x904 (+ k!2 m!1) (+ k!2 m!1) (+ k!2 m!1)))))
 (let ((?x809 (+ k!2 m!1)))
 (let ((?x605 (* (- 1) (* ?x395 ?x395 ?x395 ?x904 ?x904 ?x904 ?x809 ?x809 ?x809 ?x804 ?x804 ?x804))))
 (let ((?x371 (+ (* 12 (* k!2 m!1)) ?x601 (* 6 (* m!1 m!1 n!0 n!0)) (* 12 (* k!2 m!1 n!0 n!0)) (* 2 (* m!1 m!1 m!1 n!0)) (* 4 (* k!2 m!1 m!1 n!0)) (* 12 (* m!1 m!1 n!0)) (* 24 (* k!2 m!1 n!0)) ?x749 (* (- 1) (* ?x395 ?x904 ?x904 ?x809 ?x809 ?x809 ?x804)) (* 2 (* k!2 m!1 m!1)) ?x605 (* m!1 m!1 m!1 n!0 n!0) (* 2 (* k!2 m!1 m!1 n!0 n!0)) ?x591 (* (- 6) (* c!3 c!3 n!0 n!0)) (* (- 4) (* c!3 k!2 m!1 n!0)) (* (- 2) (* c!3 c!3 m!1 n!0)) (* (- 24) (* c!3 k!2 n!0)) (* (- 12) (* c!3 c!3 n!0)) (* (- 2) (* c!3 k!2 m!1)) ?x172 ?x335 ?x460 (* (- 2) (* c!3 k!2 m!1 n!0 n!0)) (* (- 1) (* c!3 c!3 m!1 n!0 n!0)) (* (- 12) (* c!3 k!2 n!0 n!0)))))
 (let (($x903 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x587 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x390 ?x383 ?x384 ?x168 (* 9 (* c!3 n!0))) 4) $x903 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x371 ?x139) 0)))))
 (let (($x400 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x465 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x486 (+ 13 (* (- 27) c) (* (- 32) k) ?x431 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x465)))
 (let ((?x908 (* (- 12) (* c k n n))))
 (let ((?x861 (* (- 1) (* c c m n n))))
 (let ((?x905 (* (- 2) (* c k m n n))))
 (let ((?x902 (* (- 6) (* c c))))
 (let ((?x899 (* (- 12) (* c k))))
 (let ((?x857 (* (- 1) (* c c m))))
 (let ((?x896 (* (- 2) (* c k m))))
 (let ((?x893 (* (- 12) (* c c n))))
 (let ((?x890 (* (- 24) (* c k n))))
 (let ((?x886 (* (- 2) (* c c m n))))
 (let ((?x883 (* (- 4) (* c k m n))))
 (let ((?x879 (* (- 6) (* c c n n))))
 (let ((?x72 (+ k m)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x642 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72))))
 (let ((?x661 (* 2 (* k m m n n))))
 (let ((?x627 (* m m m n n)))
 (let ((?x68 (+ c k)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x508 (* 2 (* k m m))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x594 (* m m m)))
 (let ((?x503 (* 24 (* k m n))))
 (let ((?x504 (* 12 (* m m n))))
 (let ((?x502 (* 4 (* k m m n))))
 (let ((?x499 (* 2 (* m m m n))))
 (let ((?x500 (* 12 (* k m n n))))
 (let ((?x518 (* 6 (* m m n n))))
 (let ((?x610 (* 6 ?x465)))
 (let ((?x464 (* k m)))
 (let ((?x507 (* 12 ?x464)))
 (let ((?x810 (+ ?x507 ?x610 ?x518 ?x500 ?x499 ?x502 ?x504 ?x503 ?x594 ?x226 ?x508 ?x600 ?x627 ?x661 ?x642 ?x879 ?x883 ?x886 ?x890 ?x893 ?x896 ?x857 ?x899 ?x902 ?x905 ?x861 ?x908)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 $x213 $x265 $x303 (not (= (* ?x810 ?x486) 0))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x832 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x465 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x486 (+ 13 (* (- 27) c) (* (- 32) k) ?x431 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x465)))
 (let ((?x908 (* (- 12) (* c k n n))))
 (let ((?x861 (* (- 1) (* c c m n n))))
 (let ((?x905 (* (- 2) (* c k m n n))))
 (let ((?x902 (* (- 6) (* c c))))
 (let ((?x899 (* (- 12) (* c k))))
 (let ((?x857 (* (- 1) (* c c m))))
 (let ((?x896 (* (- 2) (* c k m))))
 (let ((?x893 (* (- 12) (* c c n))))
 (let ((?x890 (* (- 24) (* c k n))))
 (let ((?x886 (* (- 2) (* c c m n))))
 (let ((?x883 (* (- 4) (* c k m n))))
 (let ((?x879 (* (- 6) (* c c n n))))
 (let ((?x72 (+ k m)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x642 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72))))
 (let ((?x661 (* 2 (* k m m n n))))
 (let ((?x627 (* m m m n n)))
 (let ((?x68 (+ c k)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x508 (* 2 (* k m m))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x594 (* m m m)))
 (let ((?x503 (* 24 (* k m n))))
 (let ((?x504 (* 12 (* m m n))))
 (let ((?x502 (* 4 (* k m m n))))
 (let ((?x499 (* 2 (* m m m n))))
 (let ((?x500 (* 12 (* k m n n))))
 (let ((?x518 (* 6 (* m m n n))))
 (let ((?x610 (* 6 ?x465)))
 (let ((?x270 (+ (* 6 (* m k)) (* 6 (* k m)) ?x610 ?x518 ?x500 ?x499 ?x502 ?x504 ?x503 ?x594 ?x226 ?x508 ?x600 ?x627 ?x661 ?x642 ?x879 ?x883 ?x886 ?x890 ?x893 ?x896 ?x857 ?x899 ?x902 ?x905 ?x861 ?x908)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 $x213 $x265 $x303 (not (= (* ?x270 ?x486) 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x761 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x465 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x486 (+ 13 (* (- 27) c) (* (- 32) k) ?x431 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x465)))
 (let ((?x908 (* (- 12) (* c k n n))))
 (let ((?x861 (* (- 1) (* c c m n n))))
 (let ((?x905 (* (- 2) (* c k m n n))))
 (let ((?x902 (* (- 6) (* c c))))
 (let ((?x899 (* (- 12) (* c k))))
 (let ((?x857 (* (- 1) (* c c m))))
 (let ((?x896 (* (- 2) (* c k m))))
 (let ((?x893 (* (- 12) (* c c n))))
 (let ((?x890 (* (- 24) (* c k n))))
 (let ((?x886 (* (- 2) (* c c m n))))
 (let ((?x883 (* (- 4) (* c k m n))))
 (let ((?x879 (* (- 6) (* c c n n))))
 (let ((?x72 (+ k m)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x642 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72))))
 (let ((?x661 (* 2 (* k m m n n))))
 (let ((?x627 (* m m m n n)))
 (let ((?x68 (+ c k)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x508 (* 2 (* k m m))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x594 (* m m m)))
 (let ((?x503 (* 24 (* k m n))))
 (let ((?x504 (* 12 (* m m n))))
 (let ((?x502 (* 4 (* k m m n))))
 (let ((?x499 (* 2 (* m m m n))))
 (let ((?x500 (* 12 (* k m n n))))
 (let ((?x518 (* 6 (* m m n n))))
 (let ((?x610 (* 6 ?x465)))
 (let ((?x464 (* k m)))
 (let ((?x507 (* 12 ?x464)))
 (let ((?x810 (+ ?x507 ?x610 ?x518 ?x500 ?x499 ?x502 ?x504 ?x503 ?x594 ?x226 ?x508 ?x600 ?x627 ?x661 ?x642 ?x879 ?x883 ?x886 ?x890 ?x893 ?x896 ?x857 ?x899 ?x902 ?x905 ?x861 ?x908)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x608 (and $x129 $x213 $x265 $x303 (not (= (* ?x810 ?x486) 0)))))
 (let ((?x270 (+ (* 6 (* m k)) (* 6 ?x464) ?x610 ?x518 ?x500 ?x499 ?x502 ?x504 ?x503 ?x594 ?x226 ?x508 ?x600 ?x627 ?x661 ?x642 ?x879 ?x883 ?x886 ?x890 ?x893 ?x896 ?x857 ?x899 ?x902 ?x905 ?x861 ?x908)))
 (let (($x256 (and $x129 $x213 $x265 $x303 (not (= (* ?x270 ?x486) 0)))))
 (rewrite (= $x256 $x608))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x693 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x839 (* (- 18) c)))
 (let ((?x401 (+ 13 ?x839 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x431 ?x48 ?x78)))
 (let ((?x642 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x637 (+ ?x226 (* ?x346 ?x346 ?x493 ?x72 ?x72) ?x600 (* (- 1) (* ?x346 ?x346 ?x493 ?x68 ?x68)) ?x642)))
 (let (($x704 (not (= (* ?x637 ?x401) 0))))
 (let (($x710 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x686 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x686 $x710 $x704))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x329 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x465 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x486 (+ 13 (* (- 27) c) (* (- 32) k) ?x431 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x465)))
 (let ((?x908 (* (- 12) (* c k n n))))
 (let ((?x861 (* (- 1) (* c c m n n))))
 (let ((?x905 (* (- 2) (* c k m n n))))
 (let ((?x902 (* (- 6) (* c c))))
 (let ((?x899 (* (- 12) (* c k))))
 (let ((?x857 (* (- 1) (* c c m))))
 (let ((?x896 (* (- 2) (* c k m))))
 (let ((?x893 (* (- 12) (* c c n))))
 (let ((?x890 (* (- 24) (* c k n))))
 (let ((?x886 (* (- 2) (* c c m n))))
 (let ((?x883 (* (- 4) (* c k m n))))
 (let ((?x879 (* (- 6) (* c c n n))))
 (let ((?x72 (+ k m)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x642 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72))))
 (let ((?x661 (* 2 (* k m m n n))))
 (let ((?x627 (* m m m n n)))
 (let ((?x68 (+ c k)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x508 (* 2 (* k m m))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x594 (* m m m)))
 (let ((?x503 (* 24 (* k m n))))
 (let ((?x504 (* 12 (* m m n))))
 (let ((?x502 (* 4 (* k m m n))))
 (let ((?x499 (* 2 (* m m m n))))
 (let ((?x500 (* 12 (* k m n n))))
 (let ((?x518 (* 6 (* m m n n))))
 (let ((?x610 (* 6 ?x465)))
 (let ((?x270 (+ (* 6 (* m k)) (* 6 (* k m)) ?x610 ?x518 ?x500 ?x499 ?x502 ?x504 ?x503 ?x594 ?x226 ?x508 ?x600 ?x627 ?x661 ?x642 ?x879 ?x883 ?x886 ?x890 ?x893 ?x896 ?x857 ?x899 ?x902 ?x905 ?x861 ?x908)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x256 (and $x129 $x213 $x265 $x303 (not (= (* ?x270 ?x486) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x839 (* (- 18) c)))
 (let ((?x401 (+ 13 ?x839 (* (- 23) k) (* (- 9) (* ?x346 ?x68)) ?x431 ?x48 ?x78)))
 (let ((?x637 (+ ?x226 (* ?x346 ?x346 ?x493 ?x72 ?x72) ?x600 (* (- 1) (* ?x346 ?x346 ?x493 ?x68 ?x68)) ?x642)))
 (let (($x704 (not (= (* ?x637 ?x401) 0))))
 (let (($x710 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x686 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x399 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x686 $x710 $x704)))
 (rewrite (= $x399 $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x702 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x839 (* (- 18) c)))
 (let ((?x401 (+ 13 ?x839 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x431 ?x48 ?x78)))
 (let ((?x642 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x637 (+ ?x226 (* ?x346 ?x346 ?x493 ?x72 ?x72) ?x600 (* (- 1) (* ?x346 ?x346 ?x493 ?x68 ?x68)) ?x642)))
 (let (($x704 (not (= (* ?x637 ?x401) 0))))
 (let (($x710 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x619 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x336 (= (+ ?x839 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 $x336 $x619 $x710 $x704))))))))))))))))))) :qid k!34))
 ))
 (let ((?x692 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x839 (* (- 18) c)))
 (let ((?x401 (+ 13 ?x839 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x431 ?x48 ?x78)))
 (let ((?x642 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x637 (+ ?x226 (* ?x346 ?x346 ?x493 ?x72 ?x72) ?x600 (* (- 1) (* ?x346 ?x346 ?x493 ?x68 ?x68)) ?x642)))
 (let (($x704 (not (= (* ?x637 ?x401) 0))))
 (let (($x710 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x686 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x399 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x686 $x710 $x704)))
 (let (($x619 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x336 (= (+ ?x839 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x695 (and $x129 $x336 $x619 $x710 $x704)))
 (rewrite (= $x695 $x399)))))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x70) (* ?x72 ?x72 ?x81 ?x70 ?x70))))
 (let ((?x88 (- ?x84 (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x90 (- (- ?x88 (* ?x68 ?x68 ?x81 ?x70 ?x70)) (* ?x72 ?x72 ?x72 ?x81 ?x81 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x90) 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x700 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x431 (* (- 5) m)))
 (let ((?x839 (* (- 18) c)))
 (let ((?x401 (+ 13 ?x839 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x431 ?x48 ?x78)))
 (let ((?x642 (* (- 1) (* (+ 1 n) (+ 6 m) (+ 6 m) ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x493 (+ 6 m)))
 (let ((?x346 (+ 1 n)))
 (let ((?x600 (* (- 1) (* ?x346 ?x346 ?x346 ?x493 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x226 (* (- 1) (* ?x346 ?x493 ?x493 ?x72 ?x72 ?x72 ?x68))))
 (let ((?x637 (+ ?x226 (* ?x346 ?x346 ?x493 ?x72 ?x72) ?x600 (* (- 1) (* ?x346 ?x346 ?x493 ?x68 ?x68)) ?x642)))
 (let (($x704 (not (= (* ?x637 ?x401) 0))))
 (let (($x710 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x619 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x336 (= (+ ?x839 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x695 (and $x129 $x336 $x619 $x710 $x704)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x70) (* ?x72 ?x72 ?x81 ?x70 ?x70))))
 (let ((?x88 (- ?x84 (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70))))
 (let ((?x90 (- (- ?x88 (* ?x68 ?x68 ?x81 ?x70 ?x70)) (* ?x72 ?x72 ?x72 ?x81 ?x81 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x95 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x90) 0))))))
 (rewrite (= $x95 $x695)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x397 (mp (mp @x97 (quant-intro (proof-bind ?x700) (= $x96 $x702)) $x702) (rewrite (= $x702 $x702)) $x702)))
 (let ((@x560 (mp (mp @x397 (quant-intro (proof-bind ?x692) (= $x702 $x693)) $x693) (quant-intro (proof-bind ?x329) (= $x693 $x832)) $x832)))
 (let ((@x897 (mp~ (mp @x560 (quant-intro (proof-bind ?x761) (= $x832 $x400)) $x400) (sk (~ $x400 $x587)) $x587)))
 (let ((@x699 (mp @x897 (rewrite (= $x587 $x254)) $x254)))
 (let ((@x578 (and-elim @x699 $x598)))
 (let ((@x856 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x598) $x777)) @x578 $x777)))
 (let (($x650 (>= ?x595 4)))
 (let ((@x362 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x598) $x650)) @x578 $x650)))
 (let (($x513 (<= ?x906 (- 6))))
 (let ((@x252 (and-elim @x699 $x604)))
 (let ((@x728 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x604) $x513)) @x252 $x513)))
 (let (($x352 (>= ?x906 (- 6))))
 (let ((@x912 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x604) $x352)) @x252 $x352)))
 (let (($x854 (<= ?x840 (- 1))))
 (let ((@x593 (and-elim @x699 $x724)))
 (let ((@x195 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x724) $x854)) @x593 $x854)))
 (let (($x557 (>= ?x840 (- 1))))
 (let ((@x398 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x724) $x557)) @x593 $x557)))
 (let (($x901 (<= ?x737 (- 1))))
 (let ((@x801 (and-elim @x699 $x852)))
 (let ((@x347 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x852) $x901)) @x801 $x901)))
 (let (($x104 (>= ?x737 (- 1))))
 (let ((@x146 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x852) $x104)) @x801 $x104)))
 (let ((@x445 ((_ th-lemma arith) (hypothesis (not $x863)) @x912 @x728 @x912 @x728 @x146 @x347 @x146 @x347 @x146 @x347 @x398 @x195 @x146 @x347 @x398 @x195 @x912 @x728 @x362 @x856 false)))
 (let ((@x519 (lemma @x445 $x863)))
 (let (($x539 (>= ?x246 0)))
 (let ((@x684 ((_ th-lemma arith) (hypothesis (not $x539)) @x912 @x728 @x912 @x728 @x146 @x347 @x146 @x347 @x146 @x347 @x398 @x195 @x146 @x347 @x398 @x195 @x912 @x728 @x362 @x856 false)))
 (let ((@x689 (lemma @x684 $x539)))
 (let (($x439 (not (<= ?x239 0))))
 (let (($x411 (>= ?x239 0)))
 (let (($x770 (= ?x246 0)))
 (let ((@x529 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x770 (not $x863) (not $x539))) @x519 (or $x770 (not $x539)))))
 (let ((@x472 (hypothesis $x770)))
 (let ((@x811 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x411)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x770) $x539)) @x472 $x539) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x770) $x863)) @x472 $x863) false)))
 (let ((@x244 (unit-resolution (lemma @x811 (or (not $x770) $x411)) (unit-resolution @x529 @x689 $x770) $x411)))
 (let ((@x196 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x666 $x439 (not $x411))) (and-elim @x699 $x656) (or $x439 (not $x411)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x196 @x244 $x439) @x689 @x519 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        3
 :arith-assert-lower        26
 :arith-assert-upper        16
 :arith-branch-var          1
 :arith-conflicts           5
 :arith-eq-adapter          7
 :arith-gcd-tests           8
 :arith-grobner             3
 :arith-ineq-splits         1
 :arith-max-min             552
 :arith-nonlinear-bounds    17
 :arith-nonlinear-horner    30
 :arith-num-rows            10
 :arith-patches             5
 :arith-patches_succ        4
 :arith-pivots              7
 :arith-pseudo-nonlinear    2
 :arith-row-summations      11
 :arith-tableau-max-columns 67
 :arith-tableau-max-rows    10
 :conflicts                 5
 :decisions                 6
 :del-clause                20
 :final-checks              10
 :max-memory                3.80
 :memory                    3.24
 :mk-bool-var               29
 :mk-clause                 25
 :num-allocs                2127562
 :num-checks                1
 :propagations              19
 :rlimit-count              27109
 :time                      0.02
 :total-time                0.02)
