unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x465 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x144 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 4) r!2) ?x465 (* 2 v!0) (* (- 2) u!1) (* (- 1) (* v!0 v!0)))))
 (let (($x672 (>= ?x144 0)))
 (let (($x893 (= ?x144 0)))
 (let ((?x621 (* v!0 v!0)))
 (let ((?x1144 (* 2 u!1)))
 (let ((?x259 (* (- 2) v!0)))
 (let ((?x1142 (* (- 1) ?x465)))
 (let ((?x652 (* 4 r!2)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x683 (+ ?x110 ?x126 ?x41 ?x46 ?x202 ?x652 ?x1142 ?x259 ?x1144 ?x621)))
 (let ((?x1001 (* 4 (* v!0 v!0 u!1 u!1))))
 (let ((?x1086 (* (- 8) (* r!2 v!0))))
 (let ((?x1051 (* r!2 r!2 v!0 v!0 u!1 u!1 u!1)))
 (let ((?x573 (* r!2 u!1 u!1)))
 (let ((?x534 (* (- 6) ?x573)))
 (let ((?x545 (* (- 2) (* u!1 u!1 u!1))))
 (let ((?x455 (* (- 1) (* r!2 r!2 r!2 u!1))))
 (let ((?x492 (* r!2 u!1 u!1 u!1)))
 (let ((?x995 (* (- 3) ?x492)))
 (let ((?x882 (* (- 4) (* r!2 v!0 v!0))))
 (let ((?x316 (* (- 1) (* u!1 u!1 u!1 u!1))))
 (let ((?x395 (* (- 2) (* r!2 r!2 r!2))))
 (let ((?x1027 (* (- 6) (* r!2 r!2 u!1))))
 (let ((?x231 (* 8 (* r!2 r!2 v!0 v!0))))
 (let ((?x318 (* (- 3) (* r!2 r!2 u!1 u!1))))
 (let ((?x1116 (+ ?x318 ?x231 ?x1027 ?x395 ?x316 (* 12 (* r!2 r!2 v!0 v!0 u!1)) (* 6 (* r!2 r!2 v!0 v!0 u!1 u!1)) (* (- 4) (* v!0 v!0 u!1)) ?x882 ?x995 ?x455 (* v!0 v!0 u!1 u!1 u!1 u!1 u!1) ?x545 ?x534 (* 12 (* r!2 v!0 v!0 u!1)) (* (- 8) (* v!0 u!1)) (* (- 1) (* r!2 v!0 u!1 u!1 u!1)) (* 23 (* r!2 v!0 v!0 u!1 u!1)) (* (- 1) (* v!0 u!1 u!1 u!1 u!1)) (* (- 12) (* r!2 v!0 u!1)) (* 2 (* r!2 v!0 v!0 u!1 u!1 u!1 u!1)) (* (- 12) (* v!0 u!1 u!1)) (* (- 6) (* v!0 u!1 u!1 u!1)) (* (- 6) (* r!2 v!0 u!1 u!1)) (* 11 (* v!0 v!0 u!1 u!1 u!1)) ?x1051 (* 12 (* r!2 v!0 v!0 u!1 u!1 u!1)) ?x1086 ?x1001 (* 6 (* v!0 v!0 u!1 u!1 u!1 u!1)))))
 (let ((?x1119 (* ?x1116 ?x683)))
 (let (($x816 (= ?x1119 0)))
 (let (($x644 (not $x816)))
 (let ((?x963 (* (- 4) ?x573)))
 (let ((?x605 (* (- 2) ?x492)))
 (let ((?x275 (* 4 (* r!2 r!2 u!1 u!1 u!1))))
 (let ((?x1110 (+ ?x275 (* v!0 v!0 v!0 u!1) ?x605 ?x455 ?x963 (* 3 (* r!2 r!2 v!0 u!1)) (* (- 3) (* r!2 v!0 v!0 u!1)) (* (- 9) (* r!2 v!0 u!1 u!1 u!1)) (* v!0 v!0 v!0 u!1 u!1) (* (- 1) (* r!2 v!0 v!0 u!1 u!1)) (* 4 (* v!0 u!1 u!1)) (* 2 (* v!0 u!1 u!1 u!1)) (* (- 4) (* r!2 v!0 u!1 u!1)) (* 5 (* v!0 v!0 u!1 u!1 u!1)) ?x1051 (* (- 8) (* r!2 v!0 v!0 u!1 u!1 u!1)) (* 4 (* r!2 r!2 v!0 u!1 u!1 u!1)) (* 4 (* v!0 v!0 v!0 u!1 u!1 u!1)) (* (- 2) (* r!2 v!0 v!0 v!0 u!1 u!1 u!1)) (* v!0 v!0 v!0 v!0 u!1 u!1 u!1) ?x1001)))
 (let ((?x823 (* ?x1110 ?x683)))
 (let (($x682 (= ?x823 0)))
 (let (($x679 (or (not $x682) $x644)))
 (let (($x308 (and $x893 $x679)))
 (let ((?x437 (+ ?x652 ?x1144 ?x259 ?x110 ?x126 ?x41 ?x1142 ?x621 ?x46 ?x202)))
 (let ((?x993 (* 4 (* u!1 u!1 v!0 v!0))))
 (let ((?x571 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)))
 (let ((?x219 (+ (* 23 (* r!2 u!1 u!1 v!0 v!0)) (* (- 1) (* r!2 u!1 u!1 u!1 v!0)) ?x995 (* (- 6) (* u!1 u!1 u!1 v!0)) (* 11 (* u!1 u!1 u!1 v!0 v!0)) ?x571 (* 12 (* r!2 u!1 u!1 u!1 v!0 v!0)) ?x455 (* 12 (* r!2 u!1 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 u!1 v!0)) ?x1086 (* (- 8) (* u!1 v!0)) (* (- 12) (* r!2 u!1 v!0)) (* (- 12) (* u!1 u!1 v!0)) (* (- 6) (* r!2 u!1 u!1 v!0)) (* 2 (* r!2 u!1 u!1 u!1 u!1 v!0 v!0)) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0) ?x231 ?x993 (* (- 4) (* u!1 v!0 v!0)) (* 12 (* r!2 r!2 u!1 v!0 v!0)) (* 6 (* r!2 r!2 u!1 u!1 v!0 v!0)) (* 6 (* u!1 u!1 u!1 u!1 v!0 v!0)) ?x318 ?x316 ?x395 ?x1027 ?x534 ?x545 ?x882)))
 (let ((?x572 (+ (* u!1 u!1 v!0 v!0 v!0) (* (- 1) (* r!2 u!1 u!1 v!0 v!0)) (* (- 9) (* r!2 u!1 u!1 u!1 v!0)) ?x605 (* 2 (* u!1 u!1 u!1 v!0)) (* 5 (* u!1 u!1 u!1 v!0 v!0)) ?x571 ?x275 (* 4 (* r!2 r!2 u!1 u!1 u!1 v!0)) (* (- 8) (* r!2 u!1 u!1 u!1 v!0 v!0)) (* 4 (* u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 2) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* u!1 u!1 u!1 v!0 v!0 v!0 v!0) ?x455 (* 3 (* r!2 r!2 u!1 v!0)) (* (- 3) (* r!2 u!1 v!0 v!0)) (* u!1 v!0 v!0 v!0) (* 4 (* u!1 u!1 v!0)) (* (- 4) (* r!2 u!1 u!1 v!0)) ?x993 ?x963)))
 (let (($x279 (and (= ?x437 0) (or (not (= (* ?x572 ?x437) 0)) (not (= (* ?x219 ?x437) 0))))))
 (let (($x1141 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x924 (* (- 4) (* r v v))))
 (let ((?x1138 (* (- 2) (* u u u))))
 (let ((?x1060 (* r u u)))
 (let ((?x1135 (* (- 6) ?x1060)))
 (let ((?x1132 (* (- 6) (* r r u))))
 (let ((?x1129 (* (- 2) (* r r r))))
 (let ((?x1115 (* (- 1) (* u u u u))))
 (let ((?x1126 (* (- 3) (* r r u u))))
 (let ((?x991 (* 6 (* u u u u v v))))
 (let ((?x989 (* 6 (* r r u u v v))))
 (let ((?x902 (* r r u v v)))
 (let ((?x985 (* 12 ?x902)))
 (let ((?x852 (* (- 4) (* u v v))))
 (let ((?x898 (* u u v v)))
 (let ((?x649 (* 4 ?x898)))
 (let ((?x884 (* 8 (* r r v v))))
 (let ((?x877 (* u u u u u v v)))
 (let ((?x992 (* 2 (* r u u u u v v))))
 (let ((?x770 (* r u u v)))
 (let ((?x838 (* (- 6) ?x770)))
 (let ((?x762 (* u u v)))
 (let ((?x835 (* (- 12) ?x762)))
 (let ((?x832 (* (- 12) (* r u v))))
 (let ((?x828 (* (- 8) (* u v))))
 (let ((?x825 (* (- 8) (* r v))))
 (let ((?x813 (* (- 1) (* u u u u v))))
 (let ((?x606 (* r u v v)))
 (let ((?x1157 (* 12 ?x606)))
 (let ((?x666 (* (- 1) (* r r r u))))
 (let ((?x489 (* r u u u v v)))
 (let ((?x990 (* 12 ?x489)))
 (let ((?x442 (* r r u u u v v)))
 (let ((?x379 (* u u u v v)))
 (let ((?x1006 (* 11 ?x379)))
 (let ((?x374 (* u u u v)))
 (let ((?x822 (* (- 6) ?x374)))
 (let ((?x366 (* r u u u)))
 (let ((?x1123 (* (- 3) ?x366)))
 (let ((?x359 (* r u u u v)))
 (let ((?x403 (* (- 1) ?x359)))
 (let ((?x345 (* r u u v v)))
 (let ((?x1004 (* 23 ?x345)))
 (let ((?x855 (+ ?x1004 ?x403 ?x1123 ?x822 ?x1006 ?x442 ?x990 ?x666 ?x1157 ?x813 ?x825 ?x828 ?x832 ?x835 ?x838 ?x992 ?x877 ?x884 ?x649 ?x852 ?x985 ?x989 ?x991 ?x1126 ?x1115 ?x1129 ?x1132 ?x1135 ?x1138 ?x924)))
 (let ((?x1127 (* (- 4) ?x1060)))
 (let ((?x939 (* (- 4) ?x770)))
 (let ((?x181 (* 4 ?x762)))
 (let ((?x637 (* u v v v)))
 (let ((?x676 (* (- 3) ?x606)))
 (let ((?x673 (* 3 (* r r u v))))
 (let ((?x542 (* u u u v v v v)))
 (let ((?x555 (* (- 2) (* r u u u v v v))))
 (let ((?x507 (* u u u v v v)))
 (let ((?x554 (* 4 ?x507)))
 (let ((?x553 (* (- 8) ?x489)))
 (let ((?x552 (* 4 (* r r u u u v))))
 (let ((?x452 (* 4 (* r r u u u))))
 (let ((?x569 (* 5 ?x379)))
 (let ((?x413 (* 2 ?x374)))
 (let ((?x410 (* (- 2) ?x366)))
 (let ((?x567 (* (- 9) ?x359)))
 (let ((?x346 (* (- 1) ?x345)))
 (let ((?x123 (* u u v v v)))
 (let ((?x900 (+ ?x123 ?x346 ?x567 ?x410 ?x413 ?x569 ?x442 ?x452 ?x552 ?x553 ?x554 ?x555 ?x542 ?x666 ?x673 ?x676 ?x637 ?x181 ?x939 ?x649 ?x1127)))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or (not (= (* ?x900 ?x208) 0)) (not (= (* ?x855 ?x208) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x926 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x924 (* (- 4) (* r v v))))
 (let ((?x1138 (* (- 2) (* u u u))))
 (let ((?x1060 (* r u u)))
 (let ((?x1135 (* (- 6) ?x1060)))
 (let ((?x1132 (* (- 6) (* r r u))))
 (let ((?x1129 (* (- 2) (* r r r))))
 (let ((?x1115 (* (- 1) (* u u u u))))
 (let ((?x1126 (* (- 3) (* r r u u))))
 (let ((?x991 (* 6 (* u u u u v v))))
 (let ((?x989 (* 6 (* r r u u v v))))
 (let ((?x852 (* (- 4) (* u v v))))
 (let ((?x898 (* u u v v)))
 (let ((?x649 (* 4 ?x898)))
 (let ((?x884 (* 8 (* r r v v))))
 (let ((?x877 (* u u u u u v v)))
 (let ((?x992 (* 2 (* r u u u u v v))))
 (let ((?x770 (* r u u v)))
 (let ((?x838 (* (- 6) ?x770)))
 (let ((?x762 (* u u v)))
 (let ((?x835 (* (- 12) ?x762)))
 (let ((?x832 (* (- 12) (* r u v))))
 (let ((?x828 (* (- 8) (* u v))))
 (let ((?x825 (* (- 8) (* r v))))
 (let ((?x813 (* (- 1) (* u u u u v))))
 (let ((?x606 (* r u v v)))
 (let ((?x1157 (* 12 ?x606)))
 (let ((?x666 (* (- 1) (* r r r u))))
 (let ((?x489 (* r u u u v v)))
 (let ((?x990 (* 12 ?x489)))
 (let ((?x442 (* r r u u u v v)))
 (let ((?x374 (* u u u v)))
 (let ((?x822 (* (- 6) ?x374)))
 (let ((?x366 (* r u u u)))
 (let ((?x1123 (* (- 3) ?x366)))
 (let ((?x359 (* r u u u v)))
 (let ((?x403 (* (- 1) ?x359)))
 (let ((?x1156 (+ (* 2 (* u 2 r u v v)) (* 2 (* u 2 u u v v)) (* 15 (* r u u v v)) ?x403 ?x1123 ?x822 (* 7 (* u u u v v)) ?x442 ?x990 ?x666 ?x1157 ?x813 ?x825 ?x828 ?x832 ?x835 ?x838 (* 2 (* u 2 r r v v)) (* 2 (* u 2 u r v v)) ?x992 ?x877 ?x884 ?x649 ?x852 (* 8 (* r r u v v)) ?x989 ?x991 ?x1126 ?x1115 ?x1129 ?x1132 ?x1135 ?x1138 ?x924)))
 (let ((?x1127 (* (- 4) ?x1060)))
 (let ((?x939 (* (- 4) ?x770)))
 (let ((?x181 (* 4 ?x762)))
 (let ((?x637 (* u v v v)))
 (let ((?x676 (* (- 3) ?x606)))
 (let ((?x673 (* 3 (* r r u v))))
 (let ((?x542 (* u u u v v v v)))
 (let ((?x555 (* (- 2) (* r u u u v v v))))
 (let ((?x552 (* 4 (* r r u u u v))))
 (let ((?x452 (* 4 (* r r u u u))))
 (let ((?x379 (* u u u v v)))
 (let ((?x569 (* 5 ?x379)))
 (let ((?x413 (* 2 ?x374)))
 (let ((?x410 (* (- 2) ?x366)))
 (let ((?x567 (* (- 9) ?x359)))
 (let ((?x345 (* r u u v v)))
 (let ((?x346 (* (- 1) ?x345)))
 (let ((?x123 (* u u v v v)))
 (let ((?x1023 (+ ?x123 (* 2 (* v (* (- 1) v) r u u u)) ?x346 ?x567 ?x410 ?x413 ?x569 (* 2 (* v (* (- 1) v) (* (- 1) v) u u u)) ?x442 ?x452 ?x552 (* (- 4) ?x489) (* 2 (* u u u v v v)) ?x555 ?x542 ?x666 ?x673 ?x676 ?x637 (* 2 (* v r (* (- 1) v) u u u)) ?x181 ?x939 ?x649 ?x1127)))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or (not (= (* ?x1023 ?x208) 0)) (not (= (* ?x1156 ?x208) 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x914 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x924 (* (- 4) (* r v v))))
 (let ((?x1138 (* (- 2) (* u u u))))
 (let ((?x1060 (* r u u)))
 (let ((?x1135 (* (- 6) ?x1060)))
 (let ((?x1132 (* (- 6) (* r r u))))
 (let ((?x1129 (* (- 2) (* r r r))))
 (let ((?x1115 (* (- 1) (* u u u u))))
 (let ((?x1126 (* (- 3) (* r r u u))))
 (let ((?x991 (* 6 (* u u u u v v))))
 (let ((?x989 (* 6 (* r r u u v v))))
 (let ((?x902 (* r r u v v)))
 (let ((?x985 (* 12 ?x902)))
 (let ((?x852 (* (- 4) (* u v v))))
 (let ((?x898 (* u u v v)))
 (let ((?x649 (* 4 ?x898)))
 (let ((?x884 (* 8 (* r r v v))))
 (let ((?x877 (* u u u u u v v)))
 (let ((?x992 (* 2 (* r u u u u v v))))
 (let ((?x770 (* r u u v)))
 (let ((?x838 (* (- 6) ?x770)))
 (let ((?x762 (* u u v)))
 (let ((?x835 (* (- 12) ?x762)))
 (let ((?x832 (* (- 12) (* r u v))))
 (let ((?x828 (* (- 8) (* u v))))
 (let ((?x825 (* (- 8) (* r v))))
 (let ((?x813 (* (- 1) (* u u u u v))))
 (let ((?x606 (* r u v v)))
 (let ((?x1157 (* 12 ?x606)))
 (let ((?x666 (* (- 1) (* r r r u))))
 (let ((?x489 (* r u u u v v)))
 (let ((?x990 (* 12 ?x489)))
 (let ((?x442 (* r r u u u v v)))
 (let ((?x379 (* u u u v v)))
 (let ((?x1006 (* 11 ?x379)))
 (let ((?x374 (* u u u v)))
 (let ((?x822 (* (- 6) ?x374)))
 (let ((?x366 (* r u u u)))
 (let ((?x1123 (* (- 3) ?x366)))
 (let ((?x359 (* r u u u v)))
 (let ((?x403 (* (- 1) ?x359)))
 (let ((?x345 (* r u u v v)))
 (let ((?x1004 (* 23 ?x345)))
 (let ((?x855 (+ ?x1004 ?x403 ?x1123 ?x822 ?x1006 ?x442 ?x990 ?x666 ?x1157 ?x813 ?x825 ?x828 ?x832 ?x835 ?x838 ?x992 ?x877 ?x884 ?x649 ?x852 ?x985 ?x989 ?x991 ?x1126 ?x1115 ?x1129 ?x1132 ?x1135 ?x1138 ?x924)))
 (let ((?x1127 (* (- 4) ?x1060)))
 (let ((?x939 (* (- 4) ?x770)))
 (let ((?x181 (* 4 ?x762)))
 (let ((?x637 (* u v v v)))
 (let ((?x676 (* (- 3) ?x606)))
 (let ((?x673 (* 3 (* r r u v))))
 (let ((?x542 (* u u u v v v v)))
 (let ((?x555 (* (- 2) (* r u u u v v v))))
 (let ((?x507 (* u u u v v v)))
 (let ((?x554 (* 4 ?x507)))
 (let ((?x553 (* (- 8) ?x489)))
 (let ((?x552 (* 4 (* r r u u u v))))
 (let ((?x452 (* 4 (* r r u u u))))
 (let ((?x569 (* 5 ?x379)))
 (let ((?x413 (* 2 ?x374)))
 (let ((?x410 (* (- 2) ?x366)))
 (let ((?x567 (* (- 9) ?x359)))
 (let ((?x346 (* (- 1) ?x345)))
 (let ((?x123 (* u u v v v)))
 (let ((?x900 (+ ?x123 ?x346 ?x567 ?x410 ?x413 ?x569 ?x442 ?x452 ?x552 ?x553 ?x554 ?x555 ?x542 ?x666 ?x673 ?x676 ?x637 ?x181 ?x939 ?x649 ?x1127)))
 (let (($x213 (= ?x208 0)))
 (let (($x842 (and $x213 (or (not (= (* ?x900 ?x208) 0)) (not (= (* ?x855 ?x208) 0))))))
 (let ((?x1156 (+ (* 2 (* u 2 r u v v)) (* 2 (* u 2 u u v v)) (* 15 ?x345) ?x403 ?x1123 ?x822 (* 7 ?x379) ?x442 ?x990 ?x666 ?x1157 ?x813 ?x825 ?x828 ?x832 ?x835 ?x838 (* 2 (* u 2 r r v v)) (* 2 (* u 2 u r v v)) ?x992 ?x877 ?x884 ?x649 ?x852 (* 8 ?x902) ?x989 ?x991 ?x1126 ?x1115 ?x1129 ?x1132 ?x1135 ?x1138 ?x924)))
 (let ((?x1023 (+ ?x123 (* 2 (* v (* (- 1) v) r u u u)) ?x346 ?x567 ?x410 ?x413 ?x569 (* 2 (* v (* (- 1) v) (* (- 1) v) u u u)) ?x442 ?x452 ?x552 (* (- 4) ?x489) (* 2 ?x507) ?x555 ?x542 ?x666 ?x673 ?x676 ?x637 (* 2 (* v r (* (- 1) v) u u u)) ?x181 ?x939 ?x649 ?x1127)))
 (let (($x1187 (and $x213 (or (not (= (* ?x1023 ?x208) 0)) (not (= (* ?x1156 ?x208) 0))))))
 (rewrite (= $x1187 $x842))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1113 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x469 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x444 (* (- 1) (* (+ 2 u) (+ r u) (+ r u) (+ r u)))))
 (let ((?x77 (+ r u)))
 (let ((?x582 (+ 2 u)))
 (let ((?x539 (+ (* (- 1) (* ?x582 ?x582 ?x77 v v)) (* (- 1) (* ?x582 ?x582 ?x582 ?x77 v)) (* ?x582 ?x582 ?x582 ?x77 ?x77 v v) ?x444)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x298 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x370 (+ r ?x107)))
 (let ((?x473 (+ (* (- 1) (* (+ 2 v) (+ 2 v) ?x370 u u)) (* (- 1) (* (+ 2 v) ?x370 u u u)) (* (+ 2 v) (+ 2 v) ?x370 ?x370 u u u) (* (- 1) (* ?x370 ?x370 ?x370 u)))))
 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x473 ?x298) 0)) (not (= (* ?x539 ?x469) 0))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x849 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x924 (* (- 4) (* r v v))))
 (let ((?x1138 (* (- 2) (* u u u))))
 (let ((?x1060 (* r u u)))
 (let ((?x1135 (* (- 6) ?x1060)))
 (let ((?x1132 (* (- 6) (* r r u))))
 (let ((?x1129 (* (- 2) (* r r r))))
 (let ((?x1115 (* (- 1) (* u u u u))))
 (let ((?x1126 (* (- 3) (* r r u u))))
 (let ((?x991 (* 6 (* u u u u v v))))
 (let ((?x989 (* 6 (* r r u u v v))))
 (let ((?x852 (* (- 4) (* u v v))))
 (let ((?x898 (* u u v v)))
 (let ((?x649 (* 4 ?x898)))
 (let ((?x884 (* 8 (* r r v v))))
 (let ((?x877 (* u u u u u v v)))
 (let ((?x992 (* 2 (* r u u u u v v))))
 (let ((?x770 (* r u u v)))
 (let ((?x838 (* (- 6) ?x770)))
 (let ((?x762 (* u u v)))
 (let ((?x835 (* (- 12) ?x762)))
 (let ((?x832 (* (- 12) (* r u v))))
 (let ((?x828 (* (- 8) (* u v))))
 (let ((?x825 (* (- 8) (* r v))))
 (let ((?x813 (* (- 1) (* u u u u v))))
 (let ((?x606 (* r u v v)))
 (let ((?x1157 (* 12 ?x606)))
 (let ((?x666 (* (- 1) (* r r r u))))
 (let ((?x489 (* r u u u v v)))
 (let ((?x990 (* 12 ?x489)))
 (let ((?x442 (* r r u u u v v)))
 (let ((?x374 (* u u u v)))
 (let ((?x822 (* (- 6) ?x374)))
 (let ((?x366 (* r u u u)))
 (let ((?x1123 (* (- 3) ?x366)))
 (let ((?x359 (* r u u u v)))
 (let ((?x403 (* (- 1) ?x359)))
 (let ((?x1156 (+ (* 2 (* u 2 r u v v)) (* 2 (* u 2 u u v v)) (* 15 (* r u u v v)) ?x403 ?x1123 ?x822 (* 7 (* u u u v v)) ?x442 ?x990 ?x666 ?x1157 ?x813 ?x825 ?x828 ?x832 ?x835 ?x838 (* 2 (* u 2 r r v v)) (* 2 (* u 2 u r v v)) ?x992 ?x877 ?x884 ?x649 ?x852 (* 8 (* r r u v v)) ?x989 ?x991 ?x1126 ?x1115 ?x1129 ?x1132 ?x1135 ?x1138 ?x924)))
 (let ((?x1127 (* (- 4) ?x1060)))
 (let ((?x939 (* (- 4) ?x770)))
 (let ((?x181 (* 4 ?x762)))
 (let ((?x637 (* u v v v)))
 (let ((?x676 (* (- 3) ?x606)))
 (let ((?x673 (* 3 (* r r u v))))
 (let ((?x542 (* u u u v v v v)))
 (let ((?x555 (* (- 2) (* r u u u v v v))))
 (let ((?x552 (* 4 (* r r u u u v))))
 (let ((?x452 (* 4 (* r r u u u))))
 (let ((?x379 (* u u u v v)))
 (let ((?x569 (* 5 ?x379)))
 (let ((?x413 (* 2 ?x374)))
 (let ((?x410 (* (- 2) ?x366)))
 (let ((?x567 (* (- 9) ?x359)))
 (let ((?x345 (* r u u v v)))
 (let ((?x346 (* (- 1) ?x345)))
 (let ((?x123 (* u u v v v)))
 (let ((?x1023 (+ ?x123 (* 2 (* v (* (- 1) v) r u u u)) ?x346 ?x567 ?x410 ?x413 ?x569 (* 2 (* v (* (- 1) v) (* (- 1) v) u u u)) ?x442 ?x452 ?x552 (* (- 4) ?x489) (* 2 (* u u u v v v)) ?x555 ?x542 ?x666 ?x673 ?x676 ?x637 (* 2 (* v r (* (- 1) v) u u u)) ?x181 ?x939 ?x649 ?x1127)))
 (let (($x213 (= ?x208 0)))
 (let (($x1187 (and $x213 (or (not (= (* ?x1023 ?x208) 0)) (not (= (* ?x1156 ?x208) 0))))))
 (let ((?x469 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x444 (* (- 1) (* (+ 2 u) (+ r u) (+ r u) (+ r u)))))
 (let ((?x77 (+ r u)))
 (let ((?x582 (+ 2 u)))
 (let ((?x539 (+ (* (- 1) (* ?x582 ?x582 ?x77 v v)) (* (- 1) (* ?x582 ?x582 ?x582 ?x77 v)) (* ?x582 ?x582 ?x582 ?x77 ?x77 v v) ?x444)))
 (let ((?x298 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x370 (+ r ?x107)))
 (let ((?x473 (+ (* (- 1) (* (+ 2 v) (+ 2 v) ?x370 u u)) (* (- 1) (* (+ 2 v) ?x370 u u u)) (* (+ 2 v) (+ 2 v) ?x370 ?x370 u u u) (* (- 1) (* ?x370 ?x370 ?x370 u)))))
 (let (($x252 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x473 ?x298) 0)) (not (= (* ?x539 ?x469) 0))))))
 (rewrite (= $x252 $x1187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((r Int) (u Int) (v Int) )(! (let ((?x81 (+ u 2)))
 (let ((?x77 (+ r u)))
 (let ((?x92 (- (* (- 1) ?x77 ?x81 ?x81 v v) (* ?x77 ?x81 ?x81 ?x81 v))))
 (let ((?x96 (- (+ ?x92 (* ?x77 ?x77 ?x81 ?x81 ?x81 v v)) (* ?x77 ?x77 ?x77 ?x81))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) ?x96)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x69 (- (* (- 1) ?x52 u u ?x57 ?x57) (* ?x52 u u u ?x57))))
 (let ((?x73 (- (+ ?x69 (* ?x52 ?x52 u u u ?x57 ?x57)) (* ?x52 ?x52 ?x52 u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x75 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x73) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x75) (not (= ?x97 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1094 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x469 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x444 (* (- 1) (* (+ 2 u) (+ r u) (+ r u) (+ r u)))))
 (let ((?x77 (+ r u)))
 (let ((?x582 (+ 2 u)))
 (let ((?x539 (+ (* (- 1) (* ?x582 ?x582 ?x77 v v)) (* (- 1) (* ?x582 ?x582 ?x582 ?x77 v)) (* ?x582 ?x582 ?x582 ?x77 ?x77 v v) ?x444)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x298 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x370 (+ r ?x107)))
 (let ((?x473 (+ (* (- 1) (* (+ 2 v) (+ 2 v) ?x370 u u)) (* (- 1) (* (+ 2 v) ?x370 u u u)) (* (+ 2 v) (+ 2 v) ?x370 ?x370 u u u) (* (- 1) (* ?x370 ?x370 ?x370 u)))))
 (let (($x252 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x473 ?x298) 0)) (not (= (* ?x539 ?x469) 0))))))
 (let ((?x81 (+ u 2)))
 (let ((?x92 (- (* (- 1) ?x77 ?x81 ?x81 v v) (* ?x77 ?x81 ?x81 ?x81 v))))
 (let ((?x96 (- (+ ?x92 (* ?x77 ?x77 ?x81 ?x81 ?x81 v v)) (* ?x77 ?x77 ?x77 ?x81))))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) ?x96)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x69 (- (* (- 1) ?x52 u u ?x57 ?x57) (* ?x52 u u u ?x57))))
 (let ((?x73 (- (+ ?x69 (* ?x52 ?x52 u u u ?x57 ?x57)) (* ?x52 ?x52 ?x52 u))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x75 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x73) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x101 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x75) (not (= ?x97 0))))))
 (rewrite (= $x101 $x252)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x186 (mp (mp @x103 (quant-intro (proof-bind ?x1094) (= $x102 $x1113)) $x1113) (rewrite (= $x1113 $x1113)) $x1113)))
 (let ((@x1096 (mp (mp @x186 (quant-intro (proof-bind ?x849) (= $x1113 $x926)) $x926) (quant-intro (proof-bind ?x914) (= $x926 $x1141)) $x1141)))
 (let ((@x1050 (mp (mp~ @x1096 (sk (~ $x1141 $x279)) $x279) (rewrite (= $x279 $x308)) $x308)))
 (let ((@x1064 (and-elim @x1050 $x893)))
 (let ((@x1037 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x893) $x672)) @x1064 $x672)))
 (let (($x685 (<= ?x144 0)))
 (let ((@x1018 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x893) $x685)) @x1064 $x685)))
 (let (($x942 (not (<= ?x1119 0))))
 (let (($x815 (>= ?x1119 0)))
 (let (($x623 (>= ?x823 0)))
 (let (($x772 (<= ?x823 0)))
 (let ((@x600 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x682 (not $x772) (not $x623))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x772)) @x1018 @x1037 false) $x772) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x623)) @x1018 @x1037 false) $x623) $x682)))
 (let ((@x487 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x816 $x942 (not $x815))) (unit-resolution (and-elim @x1050 $x679) @x600 $x644) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x815)) @x1018 @x1037 false) $x815) $x942)))
 ((_ th-lemma arith farkas 1 1 1) @x487 @x1018 @x1037 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        57
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             408
 :arith-nonlinear-bounds    40
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 71
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.71
 :memory                    3.24
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1152340
 :num-checks                1
 :propagations              14
 :rlimit-count              6805
 :time                      0.01
 :total-time                0.01)
