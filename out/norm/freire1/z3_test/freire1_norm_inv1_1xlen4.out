unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x1187 (* (- 1) r!1)))
 (let ((?x268 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x169 (* (- 1) ?x36)))
 (let ((?x802 (* (- 2) x00)))
 (let ((?x971 (+ r00 ?x802 ?x169 ?x268 ?x1187 (* 2 x!0))))
 (let (($x324 (<= ?x971 0)))
 (let (($x968 (= ?x971 0)))
 (let ((?x1986 (+ ?x1187 x!0)))
 (let ((?x729 (+ 1 r!1)))
 (let ((?x2004 (* ?x729 ?x729 ?x1986 ?x1986 ?x1986 ?x1986)))
 (let ((?x1863 (* ?x729 ?x729 ?x729 ?x1986 ?x1986 ?x1986)))
 (let ((?x1372 (* r!1 r!1 r!1)))
 (let ((?x1097 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x794 (+ (* 2 r00) (* (- 4) x00) (* (- 2) ?x36) (* (- 6) (* r00 r00 r!1 x!0 x!0)) ?x268 (* (- 1) (* ?x729 ?x729 ?x729 ?x729 ?x1986 ?x1986 ?x1986)) (* 2 (* r00 r!1 r!1 r!1 r!1)) (* (- 3) (* r00 r!1 r!1 r!1 r!1 x!0)) (* (- 9) (* r!1 r!1 x!0 x!0)) (* (- 2) r!1) (* 6 (* r00 r!1 x!0 x!0)) (* (- 12) (* x00 r!1 r!1 x!0 x!0)) (* 6 (* r00 r!1 r!1 x!0 x!0)) (* (- 2) (* r00 x!0 x!0 x!0)) (* (- 2) (* r00 r!1 x!0 x!0 x!0)) (* 3 (* r!1 r!1 r!1 x!0 x!0)) (* 3 (* r00 r!1 r!1 r!1 x!0 x!0)) (* (- 1) (* r00 r!1 r!1 x!0 x!0 x!0)) (* 6 (* r00 r00 r!1 r!1 r!1 x!0)) (* 6 (* r00 r00 r!1 r!1 x!0)) (* (- 1) (* r00 r00 r!1 r!1 r!1 r!1 r!1)) (* (- 2) (* r00 r00 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 r!1 r!1 r!1 r!1)) (* (- 12) (* x00 r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0)) (* 12 (* x00 r!1 r!1 r!1 x!0)) (* 2 (* x00 r!1 r!1 x!0 x!0 x!0)) (* (- 2) (* x00 r!1)) (* 4 (* x00 r!1 x!0 x!0 x!0)) (* (- 1) (* r00 r00 r!1)) (* (- 6) (* x00 r!1 r!1 r!1 x!0 x!0)) (* 6 (* x00 r!1 r!1 r!1 r!1 x!0)) (* (- 2) (* r00 r00 r!1 r!1 r!1)) (* 12 (* x00 r!1 r!1 x!0)) (* 7 (* r!1 x!0 x!0 x!0)) (* r00 r00 r!1 r!1 x!0 x!0 x!0) (* (- 2) (* x!0 x!0 x!0 x!0)) ?x1097 (* (- 3) (* r00 r00 r!1 r!1 r!1 x!0 x!0)) (* (- 4) (* x00 r!1 r!1 r!1)) (* (- 6) (* r00 r00 r!1 r!1 x!0 x!0)) (* 2 (* r00 r00 r!1 x!0 x!0 x!0)) (* (- 1) (* r!1 r!1 x!0 x!0 x!0)) ?x1372 (* 2 (* r!1 x!0)) (* 3 (* r00 r00 r!1 r!1 r!1 r!1 x!0)) (* 4 (* x00 x!0 x!0 x!0)) (* r00 r!1 r!1 r!1 r!1 r!1) (* (- 2) (* x00 r!1 r!1 r!1 r!1 r!1)) (* r00 r!1) (* (- 6) (* r00 r!1 r!1 r!1 x!0)) (* (- 1) (* r!1 r!1 r!1 r!1)) (* 4 x!0) ?x1863 (* (- 6) (* r00 r!1 r!1 x!0)) (* 5 (* r!1 r!1 r!1 x!0)) (* 2 (* r00 r!1 r!1 r!1)) (* (- 2) ?x2004) (* 2 (* r00 r00 x!0 x!0 x!0)))))
 (let (($x806 (= ?x794 0)))
 (let (($x815 (not $x806)))
 (let (($x1942 (and $x968 $x815)))
 (let ((?x346 (* ?x729 ?x729 ?x729 ?x729 ?x1986 ?x1986 ?x1986)))
 (let ((?x1358 (* r!1 r!1 x!0 x!0 x!0)))
 (let ((?x1657 (* r!1 r!1 r!1 r!1)))
 (let ((?x2188 (* 2 ?x36)))
 (let ((?x2187 (* 4 x00)))
 (let ((?x1937 (* (- 1) ?x268)))
 (let ((?x2185 (* (- 2) r00)))
 (let ((?x1532 (+ (* 2 r!1) (* (- 4) x!0) ?x2185 ?x1937 ?x2187 ?x2188 (* 4 (* r!1 r!1 r!1 x00)) (* (- 4) (* x!0 x!0 x!0 x00)) (* (- 2) (* r!1 r!1 r!1 r00)) (* (- 2) (* r!1 r!1 r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r00)) (* 6 (* r!1 r!1 x!0 r00)) (* 6 (* r!1 r!1 r!1 x!0 r00)) (* 3 (* r!1 r!1 r!1 r!1 x!0 r00)) (* (- 6) (* r!1 x!0 x!0 r00)) (* (- 6) (* r!1 r!1 x!0 x!0 r00)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0 r00)) (* 12 (* r!1 r!1 x!0 x!0 x00)) (* 2 (* x!0 x!0 x!0 r00)) (* 2 (* r!1 x!0 x!0 x!0 r00)) (* r!1 r!1 x!0 x!0 x!0 r00) (* 2 ?x2004) (* 2 (* x!0 x!0 x!0 x!0)) (* (- 1) ?x1097) ?x1657 (* (- 5) (* r!1 r!1 r!1 x!0)) (* (- 12) (* r!1 r!1 x!0 x00)) (* 3 (* r!1 r!1 r!1 r!1 x!0)) (* 9 (* r!1 r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0)) (* 12 (* r!1 x!0 x!0 x00)) (* (- 7) (* r!1 x!0 x!0 x!0)) ?x1358 (* (- 1) ?x1372) (* 4 (* r!1 r!1 r!1 r!1 x00)) (* (- 2) (* r!1 x!0)) (* 2 (* r!1 r!1 r!1 r00 r00)) (* 2 (* r!1 r!1 r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r!1 r!1 r00 r00) (* (- 6) (* r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 x!0 r00 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* 6 (* r!1 x!0 x!0 r00 r00)) (* 6 (* r!1 r!1 x!0 x!0 r00 r00)) (* 3 (* r!1 r!1 r!1 x!0 x!0 r00 r00)) (* (- 2) (* x!0 x!0 x!0 r00 r00)) (* (- 2) (* r!1 x!0 x!0 x!0 r00 r00)) (* (- 1) (* r!1 r!1 x!0 x!0 x!0 r00 r00)) (* (- 1) ?x1863) (* 2 (* r!1 r!1 r!1 r!1 r!1 x00)) (* (- 12) (* r!1 r!1 r!1 x!0 x00)) ?x346 (* (- 6) (* r!1 r!1 r!1 r!1 x!0 x00)) (* r!1 r00 r00) (* 6 (* r!1 r!1 r!1 x!0 x!0 x00)) (* 2 (* r!1 x00)) (* (- 1) (* r!1 r00)) (* (- 4) (* r!1 x!0 x!0 x!0 x00)) (* (- 2) (* r!1 r!1 x!0 x!0 x!0 x00)))))
 (let (($x2046 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x1937 (* 2 x00) ?x36) 0)))
 (let (($x700 (and $x2046 (not (= ?x1532 0)))))
 (let (($x636 (exists ((r Int) (x Int) )(! (let ((?x2258 (* (- 2) (* r r x x x x00))))
 (let ((?x2234 (* (- 1) (* r r00))))
 (let ((?x1913 (* 2 (* r x00))))
 (let ((?x1842 (* r r00 r00)))
 (let ((?x87 (* (- 1) r)))
 (let ((?x148 (+ ?x87 x)))
 (let ((?x177 (+ 1 r)))
 (let ((?x1743 (* ?x177 ?x177 ?x177 ?x177 ?x148 ?x148 ?x148)))
 (let ((?x2233 (* (- 1) (* ?x177 ?x177 ?x177 ?x148 ?x148 ?x148))))
 (let ((?x2232 (* (- 1) (* r r x x x r00 r00))))
 (let ((?x2231 (* (- 2) (* r x x x r00 r00))))
 (let ((?x2230 (* (- 2) (* x x x r00 r00))))
 (let ((?x2229 (* 3 (* r r r x x r00 r00))))
 (let ((?x2228 (* 6 (* r r x x r00 r00))))
 (let ((?x2227 (* 6 (* r x x r00 r00))))
 (let ((?x2226 (* (- 3) (* r r r r x r00 r00))))
 (let ((?x2225 (* (- 6) (* r r r x r00 r00))))
 (let ((?x2224 (* (- 6) (* r r x r00 r00))))
 (let ((?x1270 (* r r r r r r00 r00)))
 (let ((?x2223 (* 2 (* r r r r r00 r00))))
 (let ((?x2222 (* 2 (* r r r r00 r00))))
 (let ((?x2221 (* (- 2) (* r x))))
 (let ((?x1498 (* (- 1) (* r r r))))
 (let ((?x929 (* r r x x x)))
 (let ((?x727 (* r r r r)))
 (let ((?x432 (* r r x x x r00)))
 (let ((?x449 (* 2 (* r x x x r00))))
 (let ((?x2200 (* 2 (* x x x r00))))
 (let ((?x448 (* (- 3) (* r r r x x r00))))
 (let ((?x447 (* (- 6) (* r r x x r00))))
 (let ((?x2199 (* (- 6) (* r x x r00))))
 (let ((?x443 (* 3 (* r r r r x r00))))
 (let ((?x442 (* 6 (* r r r x r00))))
 (let ((?x2198 (* 6 (* r r x r00))))
 (let ((?x251 (* (- 1) (* r r r r r r00))))
 (let ((?x438 (* (- 2) (* r r r r r00))))
 (let ((?x2197 (* (- 2) (* r r r r00))))
 (let ((?x2196 (* (- 4) (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x2188 (* 2 ?x36)))
 (let ((?x2187 (* 4 x00)))
 (let ((?x30 (* r r)))
 (let ((?x138 (* (- 1) ?x30)))
 (let ((?x2185 (* (- 2) r00)))
 (let ((?x2184 (* (- 4) x)))
 (let ((?x2183 (* 2 r)))
 (let ((?x465 (+ ?x2183 ?x2184 ?x2185 ?x138 ?x2187 ?x2188 (* 4 (* r r r x00)) ?x2196 ?x2197 ?x438 ?x251 ?x2198 ?x442 ?x443 ?x2199 ?x447 ?x448 (* 12 (* r r x x x00)) ?x2200 ?x449 ?x432 (* 2 (* ?x177 ?x177 ?x148 ?x148 ?x148 ?x148)) (* 2 (* x x x x)) (* (- 1) (* r r r r r)) ?x727 (* (- 5) (* r r r x)) (* (- 12) (* r r x x00)) (* 3 (* r r r r x)) (* 9 (* r r x x)) (* (- 3) (* r r r x x)) (* 12 (* r x x x00)) (* (- 7) (* r x x x)) ?x929 ?x1498 (* 4 (* r r r r x00)) ?x2221 ?x2222 ?x2223 ?x1270 ?x2224 ?x2225 ?x2226 ?x2227 ?x2228 ?x2229 ?x2230 ?x2231 ?x2232 ?x2233 (* 2 (* r r r r r x00)) (* (- 12) (* r r r x x00)) ?x1743 (* (- 6) (* r r r r x x00)) ?x1842 (* 6 (* r r r x x x00)) ?x1913 ?x2234 (* (- 4) (* r x x x x00)) ?x2258)))
 (let (($x140 (= (+ r (* (- 2) x) (* (- 1) r00) ?x138 (* 2 x00) ?x36) 0)))
 (and $x140 (not (= ?x465 0))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x366 (exists ((r Int) (x Int) )(! (let ((?x87 (* (- 1) r)))
 (let ((?x1289 (+ x ?x87)))
 (let ((?x36 (* r00 r00)))
 (let ((?x169 (* (- 1) ?x36)))
 (let ((?x802 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x177 (+ 1 r)))
 (let ((?x1944 (+ (* 2 (* x00 ?x1289 ?x1289 ?x1289)) (* (- 1) (* r00 ?x177 ?x177 ?x1289 ?x1289 ?x1289)) (* (- 2) (* ?x177 ?x177 ?x1289 ?x1289 ?x1289 ?x1289)) (* ?x177 ?x177 ?x177) (* 2 (* ?x177 ?x1289)) (* r00 r00 ?x177 ?x177 ?x1289 ?x1289 ?x1289) (* ?x177 ?x177 ?x177 ?x1289 ?x1289 ?x1289) (* (- 1) (* ?x177 ?x177 ?x1289 ?x1289 ?x1289)) (* (- 1) (* ?x177 ?x177 ?x177 ?x177 ?x1289 ?x1289 ?x1289)) (* ?x177 ?x1289 ?x1289 ?x1289) (* (- 2) (* ?x1289 ?x1289 ?x1289 ?x1289)) (* (- 1) (* r00 r00 ?x177)) (* (- 3) r) r00 (* (- 2) (* x00 ?x177)) (* r00 ?x177) ?x32 ?x802 (* r00 r00 ?x1289 ?x1289 ?x1289) (* 2 (* x00 ?x177 ?x177 ?x1289 ?x1289 ?x1289)) ?x169 (* (- 1) (* r00 ?x1289 ?x1289 ?x1289)))))
 (and (= (+ ?x87 r00 (* r r) ?x32 ?x802 ?x169) 0) (not (= ?x1944 1))))))))))) :qid k!26))
 ))
 (let ((?x638 (lambda ((r Int) (x Int) )(let ((?x2258 (* (- 2) (* r r x x x x00))))
 (let ((?x2234 (* (- 1) (* r r00))))
 (let ((?x1913 (* 2 (* r x00))))
 (let ((?x1842 (* r r00 r00)))
 (let ((?x87 (* (- 1) r)))
 (let ((?x148 (+ ?x87 x)))
 (let ((?x177 (+ 1 r)))
 (let ((?x1743 (* ?x177 ?x177 ?x177 ?x177 ?x148 ?x148 ?x148)))
 (let ((?x2233 (* (- 1) (* ?x177 ?x177 ?x177 ?x148 ?x148 ?x148))))
 (let ((?x2232 (* (- 1) (* r r x x x r00 r00))))
 (let ((?x2231 (* (- 2) (* r x x x r00 r00))))
 (let ((?x2230 (* (- 2) (* x x x r00 r00))))
 (let ((?x2229 (* 3 (* r r r x x r00 r00))))
 (let ((?x2228 (* 6 (* r r x x r00 r00))))
 (let ((?x2227 (* 6 (* r x x r00 r00))))
 (let ((?x2226 (* (- 3) (* r r r r x r00 r00))))
 (let ((?x2225 (* (- 6) (* r r r x r00 r00))))
 (let ((?x2224 (* (- 6) (* r r x r00 r00))))
 (let ((?x1270 (* r r r r r r00 r00)))
 (let ((?x2223 (* 2 (* r r r r r00 r00))))
 (let ((?x2222 (* 2 (* r r r r00 r00))))
 (let ((?x2221 (* (- 2) (* r x))))
 (let ((?x1498 (* (- 1) (* r r r))))
 (let ((?x929 (* r r x x x)))
 (let ((?x727 (* r r r r)))
 (let ((?x432 (* r r x x x r00)))
 (let ((?x449 (* 2 (* r x x x r00))))
 (let ((?x2200 (* 2 (* x x x r00))))
 (let ((?x448 (* (- 3) (* r r r x x r00))))
 (let ((?x447 (* (- 6) (* r r x x r00))))
 (let ((?x2199 (* (- 6) (* r x x r00))))
 (let ((?x443 (* 3 (* r r r r x r00))))
 (let ((?x442 (* 6 (* r r r x r00))))
 (let ((?x2198 (* 6 (* r r x r00))))
 (let ((?x251 (* (- 1) (* r r r r r r00))))
 (let ((?x438 (* (- 2) (* r r r r r00))))
 (let ((?x2197 (* (- 2) (* r r r r00))))
 (let ((?x2196 (* (- 4) (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x2188 (* 2 ?x36)))
 (let ((?x2187 (* 4 x00)))
 (let ((?x30 (* r r)))
 (let ((?x138 (* (- 1) ?x30)))
 (let ((?x2185 (* (- 2) r00)))
 (let ((?x2184 (* (- 4) x)))
 (let ((?x2183 (* 2 r)))
 (let ((?x465 (+ ?x2183 ?x2184 ?x2185 ?x138 ?x2187 ?x2188 (* 4 (* r r r x00)) ?x2196 ?x2197 ?x438 ?x251 ?x2198 ?x442 ?x443 ?x2199 ?x447 ?x448 (* 12 (* r r x x x00)) ?x2200 ?x449 ?x432 (* 2 (* ?x177 ?x177 ?x148 ?x148 ?x148 ?x148)) (* 2 (* x x x x)) (* (- 1) (* r r r r r)) ?x727 (* (- 5) (* r r r x)) (* (- 12) (* r r x x00)) (* 3 (* r r r r x)) (* 9 (* r r x x)) (* (- 3) (* r r r x x)) (* 12 (* r x x x00)) (* (- 7) (* r x x x)) ?x929 ?x1498 (* 4 (* r r r r x00)) ?x2221 ?x2222 ?x2223 ?x1270 ?x2224 ?x2225 ?x2226 ?x2227 ?x2228 ?x2229 ?x2230 ?x2231 ?x2232 ?x2233 (* 2 (* r r r r r x00)) (* (- 12) (* r r r x x00)) ?x1743 (* (- 6) (* r r r r x x00)) ?x1842 (* 6 (* r r r x x x00)) ?x1913 ?x2234 (* (- 4) (* r x x x x00)) ?x2258)))
 (let (($x140 (= (+ r (* (- 2) x) (* (- 1) r00) ?x138 (* 2 x00) ?x36) 0)))
 (let (($x341 (and $x140 (not (= ?x465 0)))))
 (let ((?x169 (* (- 1) ?x36)))
 (let ((?x274 (* 2 (* x00 ?x177 ?x177 (+ x ?x87) (+ x ?x87) (+ x ?x87)))))
 (let ((?x802 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x1492 (* (- 2) (* (+ x ?x87) (+ x ?x87) (+ x ?x87) (+ x ?x87)))))
 (let ((?x932 (* (- 1) (* ?x177 ?x177 ?x177 ?x177 (+ x ?x87) (+ x ?x87) (+ x ?x87)))))
 (let ((?x1289 (+ x ?x87)))
 (let ((?x1944 (+ (* 2 (* x00 ?x1289 ?x1289 ?x1289)) (* (- 1) (* r00 ?x177 ?x177 ?x1289 ?x1289 ?x1289)) (* (- 2) (* ?x177 ?x177 ?x1289 ?x1289 ?x1289 ?x1289)) (* ?x177 ?x177 ?x177) (* 2 (* ?x177 ?x1289)) (* r00 r00 ?x177 ?x177 ?x1289 ?x1289 ?x1289) (* ?x177 ?x177 ?x177 ?x1289 ?x1289 ?x1289) (* (- 1) (* ?x177 ?x177 ?x1289 ?x1289 ?x1289)) ?x932 (* ?x177 ?x1289 ?x1289 ?x1289) ?x1492 (* (- 1) (* r00 r00 ?x177)) (* (- 3) r) r00 (* (- 2) (* x00 ?x177)) (* r00 ?x177) ?x32 ?x802 (* r00 r00 ?x1289 ?x1289 ?x1289) ?x274 ?x169 (* (- 1) (* r00 ?x1289 ?x1289 ?x1289)))))
 (let (($x483 (and (= (+ ?x87 r00 ?x30 ?x32 ?x802 ?x169) 0) (not (= ?x1944 1)))))
 (rewrite (= $x483 $x341)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x82 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (- (* 2 ?x41 ?x41 ?x41 x00) (* ?x43 ?x43 r00 ?x41 ?x41 ?x41))))
 (let ((?x53 (+ (- ?x46 (* 2 ?x43 ?x43 ?x41 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x43) (* 2 ?x43 ?x41) (* ?x43 ?x43 r00 r00 ?x41 ?x41 ?x41) (* 0 ?x43 ?x43) (* ?x43 ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x57 (- (- ?x53 (* ?x43 ?x43 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x63 (- (- (+ ?x57 (* ?x43 ?x41 ?x41 ?x41)) (* 2 ?x41 ?x41 ?x41 ?x41)) (* ?x43 r00 r00))))
 (let ((?x70 (+ (- (+ (- ?x63 ?x43) r00) (* 2 ?x43 x00)) (* ?x43 r00) (* 2 ?x41))))
 (let ((?x74 (+ (- ?x70 ?x35) (* r00 r00 ?x41 ?x41 ?x41) (* 2 ?x43 ?x43 ?x41 ?x41 ?x41 x00))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (- (- ?x74 ?x36) (* r00 ?x41 ?x41 ?x41)) 0))))))))))))))) :qid k!26))
 ))
 (let ((?x372 (lambda ((r Int) (x Int) )(let ((?x87 (* (- 1) r)))
 (let ((?x1289 (+ x ?x87)))
 (let ((?x36 (* r00 r00)))
 (let ((?x169 (* (- 1) ?x36)))
 (let ((?x802 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x177 (+ 1 r)))
 (let ((?x1944 (+ (* 2 (* x00 ?x1289 ?x1289 ?x1289)) (* (- 1) (* r00 ?x177 ?x177 ?x1289 ?x1289 ?x1289)) (* (- 2) (* ?x177 ?x177 ?x1289 ?x1289 ?x1289 ?x1289)) (* ?x177 ?x177 ?x177) (* 2 (* ?x177 ?x1289)) (* r00 r00 ?x177 ?x177 ?x1289 ?x1289 ?x1289) (* ?x177 ?x177 ?x177 ?x1289 ?x1289 ?x1289) (* (- 1) (* ?x177 ?x177 ?x1289 ?x1289 ?x1289)) (* (- 1) (* ?x177 ?x177 ?x177 ?x177 ?x1289 ?x1289 ?x1289)) (* ?x177 ?x1289 ?x1289 ?x1289) (* (- 2) (* ?x1289 ?x1289 ?x1289 ?x1289)) (* (- 1) (* r00 r00 ?x177)) (* (- 3) r) r00 (* (- 2) (* x00 ?x177)) (* r00 ?x177) ?x32 ?x802 (* r00 r00 ?x1289 ?x1289 ?x1289) (* 2 (* x00 ?x177 ?x177 ?x1289 ?x1289 ?x1289)) ?x169 (* (- 1) (* r00 ?x1289 ?x1289 ?x1289)))))
 (let (($x483 (and (= (+ ?x87 r00 (* r r) ?x32 ?x802 ?x169) 0) (not (= ?x1944 1)))))
 (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (- (* 2 ?x41 ?x41 ?x41 x00) (* ?x43 ?x43 r00 ?x41 ?x41 ?x41))))
 (let ((?x53 (+ (- ?x46 (* 2 ?x43 ?x43 ?x41 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x43) (* 2 ?x43 ?x41) (* ?x43 ?x43 r00 r00 ?x41 ?x41 ?x41) (* 0 ?x43 ?x43) (* ?x43 ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x57 (- (- ?x53 (* ?x43 ?x43 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x63 (- (- (+ ?x57 (* ?x43 ?x41 ?x41 ?x41)) (* 2 ?x41 ?x41 ?x41 ?x41)) (* ?x43 r00 r00))))
 (let ((?x70 (+ (- (+ (- ?x63 ?x43) r00) (* 2 ?x43 x00)) (* ?x43 r00) (* 2 ?x41))))
 (let ((?x74 (+ (- ?x70 ?x35) (* r00 r00 ?x41 ?x41 ?x41) (* 2 ?x43 ?x43 ?x41 ?x41 ?x41 x00))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x81 (and $x40 (or (not (= (- (- ?x74 ?x36) (* r00 ?x41 ?x41 ?x41)) 0))))))
 (rewrite (= $x81 $x483)))))))))))))))))))))))
 ))
 (let ((@x83 (asserted $x82)))
 (let ((@x789 (mp (mp @x83 (quant-intro (proof-bind ?x372) (= $x82 $x366)) $x366) (rewrite (= $x366 $x366)) $x366)))
 (let ((@x1735 (mp~ (mp @x789 (quant-intro (proof-bind ?x638) (= $x366 $x636)) $x636) (sk (~ $x636 $x700)) $x700)))
 (let ((@x817 (mp @x1735 (rewrite (= $x700 $x1942)) $x1942)))
 (let ((@x813 (and-elim @x817 $x968)))
 (let ((@x213 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x968) $x324)) @x813 $x324)))
 (let (($x799 (>= ?x971 0)))
 (let ((@x580 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x968) $x799)) @x813 $x799)))
 (let (($x818 (not (>= ?x794 0))))
 (let (($x1860 (<= ?x794 0)))
 (let ((@x1217 (lemma ((_ th-lemma arith) (hypothesis (not $x1860)) @x580 @x213 @x580 @x213 false) $x1860)))
 (let ((@x1836 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x806 (not $x1860) $x818)) (and-elim @x817 $x815) (or (not $x1860) $x818))))
 ((_ th-lemma arith) (unit-resolution @x1836 @x1217 $x818) @x580 @x213 @x580 @x213 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        19
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             472
 :arith-nonlinear-bounds    16
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 79
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.86
 :memory                    19.34
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                669856
 :num-checks                1
 :propagations              4
 :rlimit-count              11897
 :time                      0.01
 :total-time                0.03)
