unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x904 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x313 (<= ?x904 0)))
 (let (($x882 (= ?x904 0)))
 (let ((?x763 (* x!1 x!1 x!1 x!1)))
 (let ((?x699 (+ (* 2 y00) (* 2 x00) (* (- 2) (* y!0 x!1 x!1 x!1)) (* (- 4) (* y00 x!1)) (* 3 (* y00 x!1 x!1)) (* (- 2) y!0) (* (- 2) x!1) (* (- 3) (* y!0 y!0 x!1 x!1)) (* 4 (* x!1 x!1)) (* (- 2) (* y!0 y!0)) (* (- 3) (* x!1 x!1 x!1)) (* 2 (* y00 y!0)) (* (- 4) (* y00 y!0 x!1)) (* 3 (* y00 y!0 x!1 x!1)) (* (- 1) (* y00 y!0 x!1 x!1 x!1)) (* (- 1) (* y00 x!1 x!1 x!1)) (* (- 1) (* x00 x!1 x!1 x!1)) (* 2 (* x00 y!0)) (* 4 (* y!0 y!0 x!1)) (* y!0 y!0 x!1 x!1 x!1) (* y!0 x!1 x!1 x!1 x!1) (* (- 4) (* x00 x!1)) (* (- 4) (* x00 y!0 x!1)) (* (- 1) (* x00 y!0 x!1 x!1 x!1)) (* 3 (* x00 x!1 x!1)) (* 3 (* x00 y!0 x!1 x!1)) (* 2 (* y!0 x!1)) (* y!0 x!1 x!1) ?x763)))
 (let (($x752 (= ?x699 0)))
 (let (($x738 (not $x752)))
 (let (($x907 (and $x882 $x738)))
 (let ((?x931 (* (- 2) x00)))
 (let ((?x405 (* (- 2) y00)))
 (let ((?x785 (+ (* 2 x!1) (* 2 y!0) ?x405 ?x931 (* (- 2) (* y!0 y00)) (* 4 (* x!1 y!0 y00)) (* (- 3) (* x!1 x!1 y!0 y00)) (* x!1 x!1 x!1 y!0 y00) (* 4 (* x!1 y00)) (* (- 3) (* x!1 x!1 y00)) (* x!1 x!1 x!1 y00) (* 4 (* x!1 x00)) (* (- 3) (* x!1 x!1 x00)) (* x!1 x!1 x!1 x00) (* (- 2) (* y!0 x00)) (* 4 (* x!1 y!0 x00)) (* (- 3) (* x!1 x!1 y!0 x00)) (* x!1 x!1 x!1 y!0 x00) (* (- 2) (* x!1 y!0)) (* (- 1) (* x!1 x!1 y!0)) (* (- 4) (* x!1 x!1)) (* 2 (* y!0 y!0)) (* (- 4) (* x!1 y!0 y!0)) (* 3 (* x!1 x!1 y!0 y!0)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0)) (* 3 (* x!1 x!1 x!1)) (* 2 (* x!1 x!1 x!1 y!0)) (* (- 1) (* x!1 x!1 x!1 x!1 y!0)) (* (- 1) ?x763))))
 (let (($x799 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x785 0)))))
 (let (($x584 (exists ((x Int) (y Int) )(! (let ((?x791 (* (- 1) (* x x x x))))
 (let ((?x790 (* (- 1) (* x x x x y))))
 (let ((?x543 (* 2 (* x x x y))))
 (let ((?x806 (* 3 (* x x x))))
 (let ((?x577 (* (- 1) (* x x x y y))))
 (let ((?x619 (* 3 (* x x y y))))
 (let ((?x909 (* (- 4) (* x y y))))
 (let ((?x908 (* 2 (* y y))))
 (let ((?x803 (* (- 4) (* x x))))
 (let ((?x332 (* (- 1) (* x x y))))
 (let ((?x312 (* (- 2) (* x y))))
 (let ((?x253 (* x x x y x00)))
 (let ((?x262 (* (- 3) (* x x y x00))))
 (let ((?x411 (* (- 2) (* y x00))))
 (let ((?x219 (* x x x x00)))
 (let ((?x138 (* x x x y00)))
 (let ((?x119 (* x x x y y00)))
 (let ((?x160 (* (- 3) (* x x y y00))))
 (let ((?x406 (* (- 2) (* y y00))))
 (let ((?x931 (* (- 2) x00)))
 (let ((?x405 (* (- 2) y00)))
 (let ((?x588 (* 2 y)))
 (let ((?x347 (* 2 x)))
 (let ((?x934 (+ ?x347 ?x588 ?x405 ?x931 ?x406 (* 4 (* x y y00)) ?x160 ?x119 (* 4 (* x y00)) (* (- 3) (* x x y00)) ?x138 (* 4 (* x x00)) (* (- 3) (* x x x00)) ?x219 ?x411 (* 4 (* x y x00)) ?x262 ?x253 ?x312 ?x332 ?x803 ?x908 ?x909 ?x619 ?x577 ?x806 ?x543 ?x790 ?x791)))
 (let (($x83 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x83 (not (= ?x934 0)))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x384 (exists ((x Int) (y Int) )(! (let ((?x888 (+ 1 y)))
 (let ((?x893 (+ (- 1) x)))
 (let ((?x808 (+ (* y00 ?x893 ?x893 ?x893 ?x888) (* x00 ?x893 ?x893 ?x893 ?x888) (* (- 1) (* ?x893 ?x893 ?x888)) (* y00 ?x893 ?x888) (* x00 ?x893 ?x888) (* (- 1) (* ?x893 ?x893 ?x893 ?x888 ?x888)) (* (- 1) (* ?x893 ?x893 ?x893 ?x893 ?x888)) (* (- 1) (* ?x893 ?x888 ?x888)))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x808 0)))))) :qid k!26))
 ))
 (let ((?x831 (lambda ((x Int) (y Int) )(let ((?x791 (* (- 1) (* x x x x))))
 (let ((?x790 (* (- 1) (* x x x x y))))
 (let ((?x543 (* 2 (* x x x y))))
 (let ((?x806 (* 3 (* x x x))))
 (let ((?x577 (* (- 1) (* x x x y y))))
 (let ((?x619 (* 3 (* x x y y))))
 (let ((?x909 (* (- 4) (* x y y))))
 (let ((?x908 (* 2 (* y y))))
 (let ((?x803 (* (- 4) (* x x))))
 (let ((?x332 (* (- 1) (* x x y))))
 (let ((?x312 (* (- 2) (* x y))))
 (let ((?x253 (* x x x y x00)))
 (let ((?x262 (* (- 3) (* x x y x00))))
 (let ((?x411 (* (- 2) (* y x00))))
 (let ((?x219 (* x x x x00)))
 (let ((?x138 (* x x x y00)))
 (let ((?x119 (* x x x y y00)))
 (let ((?x160 (* (- 3) (* x x y y00))))
 (let ((?x406 (* (- 2) (* y y00))))
 (let ((?x931 (* (- 2) x00)))
 (let ((?x405 (* (- 2) y00)))
 (let ((?x588 (* 2 y)))
 (let ((?x347 (* 2 x)))
 (let ((?x934 (+ ?x347 ?x588 ?x405 ?x931 ?x406 (* 4 (* x y y00)) ?x160 ?x119 (* 4 (* x y00)) (* (- 3) (* x x y00)) ?x138 (* 4 (* x x00)) (* (- 3) (* x x x00)) ?x219 ?x411 (* 4 (* x y x00)) ?x262 ?x253 ?x312 ?x332 ?x803 ?x908 ?x909 ?x619 ?x577 ?x806 ?x543 ?x790 ?x791)))
 (let (($x83 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x940 (and $x83 (not (= ?x934 0)))))
 (let ((?x888 (+ 1 y)))
 (let ((?x893 (+ (- 1) x)))
 (let ((?x808 (+ (* y00 ?x893 ?x893 ?x893 ?x888) (* x00 ?x893 ?x893 ?x893 ?x888) (* (- 1) (* ?x893 ?x893 ?x888)) (* y00 ?x893 ?x888) (* x00 ?x893 ?x888) (* (- 1) (* ?x893 ?x893 ?x893 ?x888 ?x888)) (* (- 1) (* ?x893 ?x893 ?x893 ?x893 ?x888)) (* (- 1) (* ?x893 ?x888 ?x888)))))
 (let (($x902 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x808 0)))))
 (rewrite (= $x902 $x940)))))))))))))))))))))))))))))))))
 ))
 (let (($x54 (exists ((x Int) (y Int) )(! (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (- (+ (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35)) (* ?x34 ?x34 ?x35))))
 (let ((?x47 (- (+ ?x40 (* ?x34 ?x35 y00) (* ?x34 x00 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let (($x50 (= (- (- ?x47 (* ?x34 ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x35 ?x35)) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x50)))))))) :qid k!26))
 ))
 (let ((?x377 (lambda ((x Int) (y Int) )(let ((?x888 (+ 1 y)))
 (let ((?x893 (+ (- 1) x)))
 (let ((?x808 (+ (* y00 ?x893 ?x893 ?x893 ?x888) (* x00 ?x893 ?x893 ?x893 ?x888) (* (- 1) (* ?x893 ?x893 ?x888)) (* y00 ?x893 ?x888) (* x00 ?x893 ?x888) (* (- 1) (* ?x893 ?x893 ?x893 ?x888 ?x888)) (* (- 1) (* ?x893 ?x893 ?x893 ?x893 ?x888)) (* (- 1) (* ?x893 ?x888 ?x888)))))
 (let (($x902 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x808 0)))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (- (+ (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35)) (* ?x34 ?x34 ?x35))))
 (let ((?x47 (- (+ ?x40 (* ?x34 ?x35 y00) (* ?x34 x00 ?x35)) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let (($x50 (= (- (- ?x47 (* ?x34 ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x35 ?x35)) 0)))
 (let (($x53 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x50)))))
 (rewrite (= $x53 $x902)))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x810 (mp (mp @x55 (quant-intro (proof-bind ?x377) (= $x54 $x384)) $x384) (rewrite (= $x384 $x384)) $x384)))
 (let ((@x283 (mp~ (mp @x810 (quant-intro (proof-bind ?x831) (= $x384 $x584)) $x584) (sk (~ $x584 $x799)) $x799)))
 (let ((@x755 (mp @x283 (rewrite (= $x799 $x907)) $x907)))
 (let ((@x762 (and-elim @x755 $x882)))
 (let ((@x673 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x882) $x313)) @x762 $x313)))
 (let (($x315 (>= ?x904 0)))
 (let ((@x582 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x882) $x315)) @x762 $x315)))
 (let (($x618 (not (>= ?x699 0))))
 (let (($x579 (<= ?x699 0)))
 (let ((@x609 (lemma ((_ th-lemma arith) (hypothesis (not $x579)) @x582 @x673 @x582 @x673 false) $x579)))
 (let ((@x627 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x752 (not $x579) $x618)) (and-elim @x755 $x738) (or (not $x579) $x618))))
 ((_ th-lemma arith) (unit-resolution @x627 @x609 $x618) @x582 @x673 @x582 @x673 false))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             224
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 39
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.71
 :memory                    3.21
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1204511
 :num-checks                1
 :propagations              4
 :rlimit-count              3561
 :time                      0.01
 :total-time                0.01)
