unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x350 (* (- 1) x!1)))
 (let ((?x720 (* (- 1) y!0)))
 (let ((?x230 (+ y00 x00 ?x720 ?x350)))
 (let (($x846 (<= ?x230 0)))
 (let (($x98 (= ?x230 0)))
 (let ((?x77 (* (- 3) (* y!0 y!0 x!1))))
 (let ((?x845 (* y!0 y!0 y!0 x!1)))
 (let ((?x169 (* 3 (* x00 y!0 y!0))))
 (let ((?x167 (* 3 (* y00 y!0 y!0))))
 (let ((?x700 (* y!0 y!0 y!0)))
 (let ((?x265 (* (- 3) ?x700)))
 (let ((?x684 (* y!0 y!0)))
 (let ((?x707 (* 3 ?x684)))
 (let ((?x374 (* y!0 y!0 y!0 y!0)))
 (let ((?x85 (+ y00 x00 ?x720 ?x350 ?x374 ?x707 ?x265 (* (- 3) (* y00 y!0)) ?x167 (* (- 3) (* x00 y!0)) ?x169 (* (- 1) (* x00 y!0 y!0 y!0)) ?x845 (* (- 1) (* y00 y!0 y!0 y!0)) (* 3 (* y!0 x!1)) ?x77)))
 (let (($x105 (= ?x85 0)))
 (let ((?x848 (* y00 y!0 y!0 y!0)))
 (let ((?x839 (* x00 y!0 y!0 y!0)))
 (let ((?x368 (* (- 3) ?x684)))
 (let ((?x375 (* (- 1) ?x374)))
 (let ((?x280 (+ y00 x00 ?x720 ?x350 ?x375 ?x368 ?x265 (* 3 (* y00 y!0)) ?x167 (* 3 (* x00 y!0)) ?x169 ?x839 (* (- 1) ?x845) ?x848 (* (- 3) (* y!0 x!1)) ?x77)))
 (let (($x108 (= ?x280 0)))
 (let (($x94 (not $x108)))
 (let (($x836 (or $x94 (not $x105))))
 (let (($x849 (and $x98 $x836)))
 (let ((?x701 (* 3 ?x700)))
 (let ((?x699 (* 3 (* x!1 y!0 y!0))))
 (let ((?x695 (* x!1 y!0 y!0 y!0)))
 (let ((?x693 (* (- 3) (* y!0 y!0 x00))))
 (let ((?x322 (* (- 3) (* y!0 y!0 y00))))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x687 (+ x!1 y!0 ?x61 ?x68 (* (- 3) (* y!0 y00)) ?x322 (* (- 1) (* y!0 y!0 y!0 y00)) (* (- 3) (* y!0 x00)) ?x693 (* (- 1) (* y!0 y!0 y!0 x00)) ?x707 ?x695 ?x374 (* 3 (* x!1 y!0)) ?x699 ?x701)))
 (let ((?x694 (* y!0 y!0 y!0 x00)))
 (let ((?x223 (* y!0 y!0 y!0 y00)))
 (let ((?x702 (+ x!1 y!0 ?x61 ?x68 (* 3 (* y!0 y00)) ?x322 ?x223 (* 3 (* y!0 x00)) ?x693 ?x694 ?x368 (* (- 1) ?x695) ?x375 (* (- 3) (* x!1 y!0)) ?x699 ?x701)))
 (let (($x712 (and (= (+ x!1 y!0 ?x61 ?x68) 0) (or (not (= ?x702 0)) (not (= ?x687 0))))))
 (let (($x667 (exists ((x Int) (y Int) )(! (let ((?x639 (* 3 (* y y y))))
 (let ((?x637 (* 3 (* x y y))))
 (let ((?x345 (* y y y y)))
 (let ((?x282 (* x y y y)))
 (let ((?x173 (* y y x00)))
 (let ((?x645 (* (- 3) ?x173)))
 (let ((?x93 (* y y y00)))
 (let ((?x352 (* (- 3) ?x93)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x907 (+ x y ?x61 ?x68 (* (- 3) (* y y00)) ?x352 (* (- 1) (* y y y y00)) (* (- 3) (* y x00)) ?x645 (* (- 1) (* y y y x00)) (* 3 (* y y)) ?x282 ?x345 (* 3 (* x y)) ?x637 ?x639)))
 (let ((?x411 (* (- 1) ?x345)))
 (let ((?x403 (* (- 1) ?x282)))
 (let ((?x194 (* y y y x00)))
 (let ((?x159 (* y x00)))
 (let ((?x394 (* 3 ?x159)))
 (let ((?x95 (* y y y y00)))
 (let ((?x640 (+ x y ?x61 ?x68 (* 3 (* y y00)) ?x352 ?x95 ?x394 ?x645 ?x194 (* (- 3) (* y y)) ?x403 ?x411 (* (- 3) (* x y)) ?x637 ?x639)))
 (let (($x87 (= (+ x y ?x61 ?x68) 0)))
 (and $x87 (or (not (= ?x640 0)) (not (= ?x907 0))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x116 (exists ((x Int) (y Int) )(! (let ((?x96 (+ 1 y)))
 (let ((?x182 (* ?x96 ?x96 ?x96 ?x96)))
 (let ((?x158 (+ (* 2 (* y00 ?x96 ?x96 ?x96)) (* 2 (* x00 ?x96 ?x96 ?x96)) (* (- 2) (* (+ (- 1) x) ?x96 ?x96 ?x96)) (* (- 2) ?x182))))
 (let ((?x80 (+ (- 1) y)))
 (let ((?x208 (* ?x80 ?x80 ?x80 ?x80)))
 (let ((?x189 (+ (* 2 (* y00 ?x80 ?x80 ?x80)) (* 2 (* x00 ?x80 ?x80 ?x80)) (* (- 2) (* ?x80 ?x80 ?x80 (+ 1 x))) (* (- 2) ?x208))))
 (let (($x92 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x92 (or (not (= ?x189 0)) (not (= ?x158 0))))))))))) :qid k!27))
 ))
 (let ((?x669 (lambda ((x Int) (y Int) )(let ((?x639 (* 3 (* y y y))))
 (let ((?x637 (* 3 (* x y y))))
 (let ((?x345 (* y y y y)))
 (let ((?x282 (* x y y y)))
 (let ((?x173 (* y y x00)))
 (let ((?x645 (* (- 3) ?x173)))
 (let ((?x93 (* y y y00)))
 (let ((?x352 (* (- 3) ?x93)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x907 (+ x y ?x61 ?x68 (* (- 3) (* y y00)) ?x352 (* (- 1) (* y y y y00)) (* (- 3) (* y x00)) ?x645 (* (- 1) (* y y y x00)) (* 3 (* y y)) ?x282 ?x345 (* 3 (* x y)) ?x637 ?x639)))
 (let ((?x411 (* (- 1) ?x345)))
 (let ((?x403 (* (- 1) ?x282)))
 (let ((?x194 (* y y y x00)))
 (let ((?x159 (* y x00)))
 (let ((?x394 (* 3 ?x159)))
 (let ((?x95 (* y y y y00)))
 (let ((?x640 (+ x y ?x61 ?x68 (* 3 (* y y00)) ?x352 ?x95 ?x394 ?x645 ?x194 (* (- 3) (* y y)) ?x403 ?x411 (* (- 3) (* x y)) ?x637 ?x639)))
 (let (($x87 (= (+ x y ?x61 ?x68) 0)))
 (let (($x674 (and $x87 (or (not (= ?x640 0)) (not (= ?x907 0))))))
 (let ((?x96 (+ 1 y)))
 (let ((?x182 (* ?x96 ?x96 ?x96 ?x96)))
 (let ((?x158 (+ (* 2 (* y00 ?x96 ?x96 ?x96)) (* 2 (* x00 ?x96 ?x96 ?x96)) (* (- 2) (* (+ (- 1) x) ?x96 ?x96 ?x96)) (* (- 2) ?x182))))
 (let ((?x80 (+ (- 1) y)))
 (let ((?x208 (* ?x80 ?x80 ?x80 ?x80)))
 (let ((?x189 (+ (* 2 (* y00 ?x80 ?x80 ?x80)) (* 2 (* x00 ?x80 ?x80 ?x80)) (* (- 2) (* ?x80 ?x80 ?x80 (+ 1 x))) (* (- 2) ?x208))))
 (let (($x92 (= (+ x ?x61 ?x68 y) 0)))
 (let (($x165 (and $x92 (or (not (= ?x189 0)) (not (= ?x158 0))))))
 (rewrite (= $x165 $x674)))))))))))))))))))))))))))))))
 ))
 (let (($x279 (exists ((x Int) (y Int) )(! (let ((?x96 (+ 1 y)))
 (let ((?x182 (* ?x96 ?x96 ?x96 ?x96)))
 (let ((?x124 (+ (* (- 2) (* y00 ?x96 ?x96 ?x96)) (* (- 2) (* x00 ?x96 ?x96 ?x96)) (* 2 (* (+ (- 1) x) ?x96 ?x96 ?x96)) (* 2 ?x182))))
 (let ((?x80 (+ (- 1) y)))
 (let ((?x208 (* ?x80 ?x80 ?x80 ?x80)))
 (let ((?x264 (+ (* (- 2) (* y00 ?x80 ?x80 ?x80)) (* (- 2) (* x00 ?x80 ?x80 ?x80)) (* 2 (* ?x80 ?x80 ?x80 (+ 1 x))) (* 2 ?x208))))
 (let (($x92 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x92 (or (not (= ?x264 0)) (not (= ?x124 0))))))))))) :qid k!27))
 ))
 (let ((?x117 (lambda ((x Int) (y Int) )(let ((?x96 (+ 1 y)))
 (let ((?x182 (* ?x96 ?x96 ?x96 ?x96)))
 (let ((?x158 (+ (* 2 (* y00 ?x96 ?x96 ?x96)) (* 2 (* x00 ?x96 ?x96 ?x96)) (* (- 2) (* (+ (- 1) x) ?x96 ?x96 ?x96)) (* (- 2) ?x182))))
 (let ((?x80 (+ (- 1) y)))
 (let ((?x208 (* ?x80 ?x80 ?x80 ?x80)))
 (let ((?x189 (+ (* 2 (* y00 ?x80 ?x80 ?x80)) (* 2 (* x00 ?x80 ?x80 ?x80)) (* (- 2) (* ?x80 ?x80 ?x80 (+ 1 x))) (* (- 2) ?x208))))
 (let (($x92 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x165 (and $x92 (or (not (= ?x189 0)) (not (= ?x158 0))))))
 (let ((?x124 (+ (* (- 2) (* y00 ?x96 ?x96 ?x96)) (* (- 2) (* x00 ?x96 ?x96 ?x96)) (* 2 (* (+ (- 1) x) ?x96 ?x96 ?x96)) (* 2 ?x182))))
 (let ((?x264 (+ (* (- 2) (* y00 ?x80 ?x80 ?x80)) (* (- 2) (* x00 ?x80 ?x80 ?x80)) (* 2 (* ?x80 ?x80 ?x80 (+ 1 x))) (* 2 ?x208))))
 (let (($x170 (and $x92 (or (not (= ?x264 0)) (not (= ?x124 0))))))
 (rewrite (= $x170 $x165))))))))))))))
 ))
 (let (($x58 (exists ((x Int) (y Int) )(! (let ((?x46 (- y 1)))
 (let ((?x49 (- (* (- 2) ?x46 ?x46 ?x46 y00) (* 2 x00 ?x46 ?x46 ?x46))))
 (let ((?x53 (+ ?x49 (* 2 (+ x 1) ?x46 ?x46 ?x46) (* 2 ?x46 ?x46 ?x46 ?x46))))
 (let ((?x36 (+ y 1)))
 (let ((?x39 (- (* (- 2) ?x36 ?x36 ?x36 y00) (* 2 x00 ?x36 ?x36 ?x36))))
 (let ((?x43 (+ ?x39 (* 2 (- x 1) ?x36 ?x36 ?x36) (* 2 ?x36 ?x36 ?x36 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x43 0)) (not (= ?x53 0)))))))))) :qid k!27))
 ))
 (let ((?x125 (lambda ((x Int) (y Int) )(let ((?x96 (+ 1 y)))
 (let ((?x182 (* ?x96 ?x96 ?x96 ?x96)))
 (let ((?x124 (+ (* (- 2) (* y00 ?x96 ?x96 ?x96)) (* (- 2) (* x00 ?x96 ?x96 ?x96)) (* 2 (* (+ (- 1) x) ?x96 ?x96 ?x96)) (* 2 ?x182))))
 (let ((?x80 (+ (- 1) y)))
 (let ((?x208 (* ?x80 ?x80 ?x80 ?x80)))
 (let ((?x264 (+ (* (- 2) (* y00 ?x80 ?x80 ?x80)) (* (- 2) (* x00 ?x80 ?x80 ?x80)) (* 2 (* ?x80 ?x80 ?x80 (+ 1 x))) (* 2 ?x208))))
 (let (($x92 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x170 (and $x92 (or (not (= ?x264 0)) (not (= ?x124 0))))))
 (let ((?x46 (- y 1)))
 (let ((?x49 (- (* (- 2) ?x46 ?x46 ?x46 y00) (* 2 x00 ?x46 ?x46 ?x46))))
 (let ((?x53 (+ ?x49 (* 2 (+ x 1) ?x46 ?x46 ?x46) (* 2 ?x46 ?x46 ?x46 ?x46))))
 (let ((?x36 (+ y 1)))
 (let ((?x39 (- (* (- 2) ?x36 ?x36 ?x36 y00) (* 2 x00 ?x36 ?x36 ?x36))))
 (let ((?x43 (+ ?x39 (* 2 (- x 1) ?x36 ?x36 ?x36) (* 2 ?x36 ?x36 ?x36 ?x36))))
 (let (($x57 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x43 0)) (not (= ?x53 0))))))
 (rewrite (= $x57 $x170))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x181 (mp (mp @x59 (quant-intro (proof-bind ?x125) (= $x58 $x279)) $x279) (rewrite (= $x279 $x279)) $x279)))
 (let ((@x340 (mp (mp @x181 (quant-intro (proof-bind ?x117) (= $x279 $x116)) $x116) (quant-intro (proof-bind ?x669) (= $x116 $x667)) $x667)))
 (let ((@x331 (mp (mp~ @x340 (sk (~ $x667 $x712)) $x712) (rewrite (= $x712 $x849)) $x849)))
 (let ((@x156 (and-elim @x331 $x98)))
 (let ((@x690 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x98) $x846)) @x156 $x846)))
 (let (($x434 (>= ?x230 0)))
 (let ((@x723 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x98) $x434)) @x156 $x434)))
 (let (($x831 (<= ?x85 0)))
 (let ((@x864 (lemma ((_ th-lemma arith) (hypothesis (not $x831)) @x723 @x690 @x723 @x690 false) $x831)))
 (let (($x725 (>= ?x85 0)))
 (let ((@x861 (lemma ((_ th-lemma arith) (hypothesis (not $x725)) @x723 @x690 @x723 @x690 false) $x725)))
 (let (($x177 (not (<= ?x280 0))))
 (let ((@x161 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x105 (not $x831) (not $x725))) @x864 @x861 $x105)))
 (let (($x748 (>= ?x280 0)))
 (let ((@x867 ((_ th-lemma arith) (hypothesis (not $x748)) @x723 @x690 @x861 @x864 @x723 @x690 false)))
 (let ((@x178 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x108 $x177 (not $x748))) (lemma @x867 $x748) (unit-resolution (and-elim @x331 $x836) @x161 $x94) $x177)))
 ((_ th-lemma arith) @x178 @x723 @x690 @x861 @x864 @x723 @x690 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        4
 :arith-assert-lower        13
 :arith-assert-upper        8
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           8
 :arith-grobner             4
 :arith-max-min             248
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              3
 :arith-row-summations      4
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 5
 :del-clause                3
 :final-checks              8
 :max-memory                3.61
 :memory                    3.15
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1119567
 :num-checks                1
 :propagations              13
 :rlimit-count              3257
 :time                      0.01
 :total-time                0.01)
