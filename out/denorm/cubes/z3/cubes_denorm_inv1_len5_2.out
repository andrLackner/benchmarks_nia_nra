unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x519 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x452 (>= ?x519 (- 6))))
 (let (($x230 (= ?x519 (- 6))))
 (let ((?x562 (* k!2 n!0)))
 (let ((?x444 (* 72 ?x562)))
 (let ((?x116 (* (- 1) (* c!3 m!1))))
 (let ((?x150 (* 36 (* k!2 n!0 n!0))))
 (let ((?x525 (* 11 (* k!2 m!1))))
 (let ((?x564 (* 36 m!1)))
 (let ((?x417 (* m!1 m!1 m!1)))
 (let ((?x410 (* k!2 m!1 m!1)))
 (let ((?x170 (+ k!2 c!3)))
 (let ((?x401 (+ k!2 m!1)))
 (let ((?x527 (+ 6 m!1)))
 (let ((?x531 (+ 1 n!0)))
 (let ((?x192 (* (- 1) (* k!2 k!2 n!0))))
 (let ((?x459 (* (- 1) (* k!2 k!2))))
 (let ((?x326 (* 36 k!2)))
 (let ((?x199 (* 12 (* m!1 m!1))))
 (let ((?x365 (+ ?x199 (* k!2 n!0 n!0 m!1 m!1) (* 2 (* n!0 m!1 m!1 m!1)) (* ?x531 ?x531 ?x527 ?x527 ?x527 ?x401 ?x401 ?x170 ?x170 ?x170) ?x326 (* n!0 n!0 m!1 m!1 m!1) (* 72 (* n!0 m!1)) (* ?x527 ?x527 ?x401 ?x401 ?x401 ?x170 ?x170 ?x170) (* 24 (* n!0 m!1 m!1)) (* 2 (* k!2 n!0 m!1 m!1)) ?x459 (* (- 1) (* k!2 n!0 c!3)) ?x192 (* ?x531 ?x531 ?x527 ?x527 ?x527 ?x401 ?x401 ?x170 ?x170) (* (- 1) (* k!2 c!3)) (* 23 (* k!2 n!0 m!1)) (* (- 1) (* n!0 c!3 m!1)) ?x410 ?x417 ?x564 ?x525 ?x150 (* 12 (* n!0 n!0 m!1 m!1)) ?x116 ?x444 (* 12 (* k!2 n!0 n!0 m!1)) (* 36 (* n!0 n!0 m!1)))))
 (let ((?x95 (* (+ (- 6) (* (- 6) n!0) m!1) ?x365)))
 (let (($x174 (= ?x95 0)))
 (let (($x333 (not $x174)))
 (let ((?x360 (* 18 c!3)))
 (let ((?x235 (* (- 9) n!0)))
 (let ((?x420 (* 5 k!2)))
 (let (($x156 (and $x230 (= (+ ?x420 ?x459 (* 9 (* n!0 c!3)) ?x235 ?x360) 4) (= (+ k!2 (* (- 2) n!0) (* 3 c!3) (* (- 1) ?x562)) 1) (= (+ k!2 (* (- 3) (* n!0 n!0)) (* (- 3) n!0)) 1) $x333)))
 (let ((?x96 (+ c!3 k!2)))
 (let ((?x504 (+ ?x326 ?x564 ?x459 ?x444 (* ?x527 ?x527 ?x401 ?x401 ?x401 ?x96 ?x96 ?x96) (* ?x531 ?x531 ?x527 ?x527 ?x527 ?x401 ?x401 ?x96 ?x96) (* ?x531 ?x531 ?x527 ?x527 ?x527 ?x401 ?x401 ?x96 ?x96 ?x96) ?x525 ?x116 (* (- 1) (* c!3 k!2)) (* 23 (* k!2 m!1 n!0)) (* (- 1) (* c!3 m!1 n!0)) ?x192 (* (- 1) (* c!3 k!2 n!0)) (* k!2 m!1 m!1 n!0 n!0) (* m!1 m!1 m!1 n!0 n!0) ?x199 ?x410 ?x417 (* 72 (* m!1 n!0)) (* 24 (* m!1 m!1 n!0)) (* 2 (* k!2 m!1 m!1 n!0)) (* 2 (* m!1 m!1 m!1 n!0)) ?x150 (* 36 (* m!1 n!0 n!0)) (* 12 (* k!2 m!1 n!0 n!0)) (* 12 (* m!1 m!1 n!0 n!0)))))
 (let (($x524 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x360 ?x420 ?x235 ?x459 (* 9 (* c!3 n!0))) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x562)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x504) 0)))))
 (let (($x286 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x577 (* 12 (* m m n n))))
 (let ((?x576 (* 12 (* k m n n))))
 (let ((?x547 (* 36 (* m n n))))
 (let ((?x543 (* 36 (* k n n))))
 (let ((?x575 (* 2 (* m m m n))))
 (let ((?x574 (* 2 (* k m m n))))
 (let ((?x573 (* 24 (* m m n))))
 (let ((?x570 (* 72 (* m n))))
 (let ((?x499 (* m m m)))
 (let ((?x496 (* k m m)))
 (let ((?x567 (* 12 (* m m))))
 (let ((?x456 (* m m m n n)))
 (let ((?x455 (* k m m n n)))
 (let ((?x390 (* (- 1) (* c k n))))
 (let ((?x391 (* (- 1) (* k k n))))
 (let ((?x392 (* (- 1) (* c m n))))
 (let ((?x591 (* 23 (* k m n))))
 (let ((?x394 (* (- 1) (* c k))))
 (let ((?x395 (* (- 1) (* c m))))
 (let ((?x589 (* 11 (* k m))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x308 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x297 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x229 (* ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x55 (* k n)))
 (let ((?x569 (* 72 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x482 (* 36 m)))
 (let ((?x479 (* 36 k)))
 (let ((?x140 (+ ?x479 ?x482 ?x217 ?x569 ?x229 ?x297 ?x308 ?x589 ?x395 ?x394 ?x591 ?x392 ?x391 ?x390 ?x455 ?x456 ?x567 ?x496 ?x499 ?x570 ?x573 ?x574 ?x575 ?x543 ?x547 ?x576 ?x577)))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m ?x113) 6)))
 (and $x130 $x214 $x266 $x304 (not (= (* ?x119 ?x140) 0)))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x151 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x72 (+ c k)))
 (let ((?x229 (* ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x308 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x297 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x261 (+ ?x297 ?x308 ?x229 (* (- 1) (* ?x319 ?x73 ?x72)) (* ?x319 ?x319 ?x363 ?x363 ?x73))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x272 (not (= (* ?x119 ?x261) 0))))
 (let (($x537 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x495 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m ?x113) 6)))
 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x495 $x537 $x272)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x167 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x577 (* 12 (* m m n n))))
 (let ((?x576 (* 12 (* k m n n))))
 (let ((?x547 (* 36 (* m n n))))
 (let ((?x543 (* 36 (* k n n))))
 (let ((?x575 (* 2 (* m m m n))))
 (let ((?x574 (* 2 (* k m m n))))
 (let ((?x573 (* 24 (* m m n))))
 (let ((?x570 (* 72 (* m n))))
 (let ((?x499 (* m m m)))
 (let ((?x496 (* k m m)))
 (let ((?x567 (* 12 (* m m))))
 (let ((?x456 (* m m m n n)))
 (let ((?x455 (* k m m n n)))
 (let ((?x390 (* (- 1) (* c k n))))
 (let ((?x391 (* (- 1) (* k k n))))
 (let ((?x392 (* (- 1) (* c m n))))
 (let ((?x591 (* 23 (* k m n))))
 (let ((?x394 (* (- 1) (* c k))))
 (let ((?x395 (* (- 1) (* c m))))
 (let ((?x589 (* 11 (* k m))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x308 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x297 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x229 (* ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x55 (* k n)))
 (let ((?x569 (* 72 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x482 (* 36 m)))
 (let ((?x479 (* 36 k)))
 (let ((?x140 (+ ?x479 ?x482 ?x217 ?x569 ?x229 ?x297 ?x308 ?x589 ?x395 ?x394 ?x591 ?x392 ?x391 ?x390 ?x455 ?x456 ?x567 ?x496 ?x499 ?x570 ?x573 ?x574 ?x575 ?x543 ?x547 ?x576 ?x577)))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m ?x113) 6)))
 (let (($x91 (and $x130 $x214 $x266 $x304 (not (= (* ?x119 ?x140) 0)))))
 (let ((?x261 (+ ?x297 ?x308 ?x229 (* (- 1) (* ?x319 ?x73 ?x72)) (* ?x319 ?x319 ?x363 ?x363 ?x73))))
 (let (($x272 (not (= (* ?x119 ?x261) 0))))
 (let (($x537 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x495 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x245 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x495 $x537 $x272)))
 (rewrite (= $x245 $x91))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x274 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x72 (+ c k)))
 (let ((?x229 (* ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x308 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x297 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x261 (+ ?x297 ?x308 ?x229 (* (- 1) (* ?x319 ?x73 ?x72)) (* ?x319 ?x319 ?x363 ?x363 ?x73))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x272 (not (= (* ?x119 ?x261) 0))))
 (let (($x537 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x510 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x367 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m ?x113) 6)))
 (and $x130 (= ?x367 (- 4)) $x510 $x537 $x272)))))))))))))))))) :qid k!34))
 ))
 (let ((?x427 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x72 (+ c k)))
 (let ((?x229 (* ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x308 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x297 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x261 (+ ?x297 ?x308 ?x229 (* (- 1) (* ?x319 ?x73 ?x72)) (* ?x319 ?x319 ?x363 ?x363 ?x73))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x272 (not (= (* ?x119 ?x261) 0))))
 (let (($x537 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x495 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m ?x113) 6)))
 (let (($x245 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x495 $x537 $x272)))
 (let (($x510 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x367 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x309 (and $x130 (= ?x367 (- 4)) $x510 $x537 $x272)))
 (rewrite (= $x309 $x245)))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x72 (+ c k)))
 (let ((?x78 (+ (* ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69) (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69) (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74))))
 (let ((?x83 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ (- ?x78 (* ?x72 ?x73 ?x69)) (* ?x73 ?x74 ?x74 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x232 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x72 (+ c k)))
 (let ((?x229 (* ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x308 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x297 (* ?x319 ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x261 (+ ?x297 ?x308 ?x229 (* (- 1) (* ?x319 ?x73 ?x72)) (* ?x319 ?x319 ?x363 ?x363 ?x73))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x272 (not (= (* ?x119 ?x261) 0))))
 (let (($x537 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x510 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x367 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m ?x113) 6)))
 (let (($x309 (and $x130 (= ?x367 (- 4)) $x510 $x537 $x272)))
 (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x78 (+ (* ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69) (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69) (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74))))
 (let ((?x83 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ (- ?x78 (* ?x72 ?x73 ?x69)) (* ?x73 ?x74 ?x74 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0))))))
 (rewrite (= $x87 $x309)))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x141 (mp (mp @x89 (quant-intro (proof-bind ?x232) (= $x88 $x274)) $x274) (rewrite (= $x274 $x274)) $x274)))
 (let ((@x489 (mp (mp @x141 (quant-intro (proof-bind ?x427) (= $x274 $x151)) $x151) (quant-intro (proof-bind ?x167) (= $x151 $x286)) $x286)))
 (let ((@x182 (mp (mp~ @x489 (sk (~ $x286 $x524)) $x524) (rewrite (= $x524 $x156)) $x156)))
 (let ((@x276 (and-elim @x182 $x230)))
 (let ((@x450 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x452)) @x276 $x452)))
 (let (($x561 (<= ?x519 (- 6))))
 (let ((@x545 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x561)) @x276 $x561)))
 (let (($x348 (not (<= ?x95 0))))
 (let (($x540 (>= ?x95 0)))
 (let ((@x339 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x174 $x348 (not $x540))) (and-elim @x182 $x333) (or $x348 (not $x540)))))
 (let ((@x288 (unit-resolution @x339 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x540)) @x545 @x450 false) $x540) $x348)))
 ((_ th-lemma arith farkas 1 1 1) @x288 @x545 @x450 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        25
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             147
 :arith-nonlinear-bounds    23
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      6
 :arith-tableau-max-columns 60
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.65
 :memory                    3.15
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1141912
 :num-checks                1
 :propagations              10
 :rlimit-count              3703
 :time                      0.01
 :total-time                0.01)
