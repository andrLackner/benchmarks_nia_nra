unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x373 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x333 (>= ?x373 1)))
 (let (($x609 (= ?x373 1)))
 (let ((?x313 (* (- 1) (* k!2 k!2 n!0))))
 (let ((?x456 (* n!0 n!0)))
 (let ((?x417 (* (- 1) ?x456)))
 (let ((?x471 (* (- 2) n!0)))
 (let ((?x103 (* (- 1) (* c!3 c!3))))
 (let ((?x319 (+ k!2 c!3)))
 (let ((?x567 (+ k!2 m!1)))
 (let ((?x380 (+ 6 m!1)))
 (let ((?x607 (+ 1 n!0)))
 (let ((?x284 (* m!1 m!1)))
 (let ((?x614 (* (- 1) (* ?x607 ?x380 ?x380 ?x380 ?x567 ?x567 ?x567))))
 (let ((?x283 (* 2 (* k!2 m!1))))
 (let ((?x359 (+ (- 1) ?x283 ?x614 (* (- 1) (* n!0 c!3 c!3)) (* (- 2) (* k!2 c!3)) ?x284 (* (- 2) (* k!2 n!0 c!3)) (* (- 1) (* ?x607 ?x380 ?x380 ?x380 ?x567 ?x567 ?x567 ?x319 ?x319 ?x319)) ?x103 ?x471 ?x417 ?x313)))
 (let ((?x193 (* (- 1) m!1)))
 (let ((?x606 (* 3 ?x456)))
 (let ((?x604 (* 9 n!0)))
 (let ((?x372 (* (- 1) k!2)))
 (let ((?x165 (* (+ 7 ?x372 ?x604 ?x606 ?x193) ?x359)))
 (let (($x296 (= ?x165 0)))
 (let (($x166 (not $x296)))
 (let ((?x474 (* 18 c!3)))
 (let ((?x189 (* (- 1) (* k!2 k!2))))
 (let ((?x132 (* (- 9) n!0)))
 (let ((?x396 (* 5 k!2)))
 (let ((?x453 (+ (* 6 n!0) ?x193)))
 (let (($x452 (= ?x453 (- 6))))
 (let (($x272 (and $x452 (= (+ ?x396 (* 9 (* n!0 c!3)) ?x132 ?x189 ?x474) 4) (= (+ k!2 ?x471 (* (- 1) (* k!2 n!0)) (* 3 c!3)) 1) $x609 $x166)))
 (let ((?x383 (+ c!3 k!2)))
 (let ((?x480 (+ (- 1) ?x471 ?x614 (* (- 1) (* ?x607 ?x380 ?x380 ?x380 ?x567 ?x567 ?x567 ?x383 ?x383 ?x383)) ?x417 (* (- 2) (* c!3 k!2 n!0)) ?x103 (* (- 2) (* c!3 k!2)) ?x283 ?x284 ?x313 (* (- 1) (* c!3 c!3 n!0)))))
 (let (($x150 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x474 ?x396 ?x132 ?x189 (* 9 (* c!3 n!0))) 4) (= (+ (* 3 c!3) k!2 ?x471 (* (- 1) (* k!2 n!0))) 1) $x609 (not (= (* (+ 7 ?x372 ?x193 ?x604 ?x606) ?x480) 0)))))
 (let (($x288 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x446 (* (- 1) (* c c n))))
 (let ((?x449 (* (- 1) (* k k n))))
 (let ((?x473 (* m m)))
 (let ((?x478 (* 2 (* k m))))
 (let ((?x457 (* (- 2) (* c k))))
 (let ((?x447 (* (- 1) (* c c))))
 (let ((?x450 (* (- 2) (* c k n))))
 (let ((?x270 (* n n)))
 (let ((?x649 (* (- 1) ?x270)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x394 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x254 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x216 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71))))
 (let ((?x263 (* (- 2) n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let ((?x203 (* (+ 7 ?x239 ?x355 ?x48 ?x271) (+ (- 1) ?x263 ?x216 ?x254 ?x649 ?x450 ?x447 ?x457 ?x478 ?x473 ?x449 ?x446))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 1)))
 (let (($x261 (= (+ (* 3 c) k ?x263 (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= ?x203 0))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x118 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ k m)))
 (let ((?x394 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x216 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71))))
 (let ((?x83 (* ?x71 ?x71)))
 (let ((?x76 (+ c k)))
 (let ((?x254 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x101 (+ ?x254 (* (- 1) (* ?x307 ?x307)) (* (- 1) (* ?x307 ?x76 ?x76)) ?x83 ?x216)))
 (let ((?x65 (* 3 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let (($x244 (= (* (+ 4 (* 3 (* ?x307 ?x307)) ?x239 ?x355 ?x65) ?x101) 0)))
 (let (($x121 (not $x244)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x239 ?x65) (- 1))))
 (let (($x117 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x117 $x331 $x121)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x292 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x446 (* (- 1) (* c c n))))
 (let ((?x449 (* (- 1) (* k k n))))
 (let ((?x473 (* m m)))
 (let ((?x478 (* 2 (* k m))))
 (let ((?x457 (* (- 2) (* c k))))
 (let ((?x447 (* (- 1) (* c c))))
 (let ((?x450 (* (- 2) (* c k n))))
 (let ((?x270 (* n n)))
 (let ((?x649 (* (- 1) ?x270)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x394 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x254 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x216 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71))))
 (let ((?x263 (* (- 2) n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let ((?x203 (* (+ 7 ?x239 ?x355 ?x48 ?x271) (+ (- 1) ?x263 ?x216 ?x254 ?x649 ?x450 ?x447 ?x457 ?x478 ?x473 ?x449 ?x446))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 1)))
 (let (($x261 (= (+ (* 3 c) k ?x263 (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x138 (and $x125 $x209 $x261 $x299 (not (= ?x203 0)))))
 (let ((?x83 (* ?x71 ?x71)))
 (let ((?x101 (+ ?x254 (* (- 1) (* ?x307 ?x307)) (* (- 1) (* ?x307 ?x76 ?x76)) ?x83 ?x216)))
 (let ((?x120 (* (+ 4 (* 3 (* ?x307 ?x307)) ?x239 ?x355 (* 3 n)) ?x101)))
 (let (($x121 (not (= ?x120 0))))
 (let (($x331 (= (+ ?x271 ?x239 (* 3 n)) (- 1))))
 (let (($x290 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) (= (+ (* 3 c) (* (- 1) (* n k)) k ?x263) 1) $x331 $x121)))
 (rewrite (= $x290 $x138))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x123 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ k m)))
 (let ((?x394 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x216 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71))))
 (let ((?x83 (* ?x71 ?x71)))
 (let ((?x76 (+ c k)))
 (let ((?x254 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x101 (+ ?x254 (* (- 1) (* ?x307 ?x307)) (* (- 1) (* ?x307 ?x76 ?x76)) ?x83 ?x216)))
 (let ((?x65 (* 3 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let (($x244 (= (* (+ 4 (* 3 (* ?x307 ?x307)) ?x239 ?x355 ?x65) ?x101) 0)))
 (let (($x121 (not $x244)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x239 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x621 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= ?x621 (- 4)) (= (+ (* (- 3) c) (* n k) ?x239 (* 2 n)) (- 1)) $x331 $x121))))))))))))))))))) :qid k!34))
 ))
 (let ((?x605 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x71 (+ k m)))
 (let ((?x394 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x216 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71))))
 (let ((?x83 (* ?x71 ?x71)))
 (let ((?x76 (+ c k)))
 (let ((?x254 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x101 (+ ?x254 (* (- 1) (* ?x307 ?x307)) (* (- 1) (* ?x307 ?x76 ?x76)) ?x83 ?x216)))
 (let ((?x65 (* 3 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let (($x244 (= (* (+ 4 (* 3 (* ?x307 ?x307)) ?x239 ?x355 ?x65) ?x101) 0)))
 (let (($x121 (not $x244)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x239 ?x65) (- 1))))
 (let (($x117 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x290 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x117 $x331 $x121)))
 (let ((?x48 (* 9 n)))
 (let ((?x621 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x266 (and $x125 (= ?x621 (- 4)) (= (+ (* (- 3) c) (* n k) ?x239 (* 2 n)) (- 1)) $x331 $x121)))
 (rewrite (= $x266 $x290))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x83 (* ?x71 ?x71)))
 (let ((?x76 (+ c k)))
 (let ((?x81 (- (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68) (* ?x68 ?x68))))
 (let ((?x86 (- (+ (- ?x81 (* ?x76 ?x76 ?x68)) ?x83) (* ?x71 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68))))
 (let (($x88 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x86) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x88)))))))))))))))))) :qid k!34))
 ))
 (let ((?x255 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x71 (+ k m)))
 (let ((?x394 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x216 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71))))
 (let ((?x83 (* ?x71 ?x71)))
 (let ((?x76 (+ c k)))
 (let ((?x254 (* (- 1) (* ?x307 ?x394 ?x394 ?x394 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x101 (+ ?x254 (* (- 1) (* ?x307 ?x307)) (* (- 1) (* ?x307 ?x76 ?x76)) ?x83 ?x216)))
 (let ((?x65 (* 3 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let (($x244 (= (* (+ 4 (* 3 (* ?x307 ?x307)) ?x239 ?x355 ?x65) ?x101) 0)))
 (let (($x121 (not $x244)))
 (let (($x331 (= (+ (* 3 (* n n)) ?x239 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x621 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x266 (and $x125 (= ?x621 (- 4)) (= (+ (* (- 3) c) (* n k) ?x239 (* 2 n)) (- 1)) $x331 $x121)))
 (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x81 (- (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68) (* ?x68 ?x68))))
 (let ((?x86 (- (+ (- ?x81 (* ?x76 ?x76 ?x68)) ?x83) (* ?x71 ?x71 ?x71 ?x77 ?x77 ?x77 ?x68))))
 (let (($x88 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x86) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x88)))))
 (rewrite (= $x91 $x266))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x306 (mp (mp @x93 (quant-intro (proof-bind ?x255) (= $x92 $x123)) $x123) (rewrite (= $x123 $x123)) $x123)))
 (let ((@x293 (mp (mp @x306 (quant-intro (proof-bind ?x605) (= $x123 $x118)) $x118) (quant-intro (proof-bind ?x292) (= $x118 $x288)) $x288)))
 (let ((@x334 (mp (mp~ @x293 (sk (~ $x288 $x150)) $x150) (rewrite (= $x150 $x272)) $x272)))
 (let ((@x278 (and-elim @x334 $x609)))
 (let ((@x156 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x609) $x333)) @x278 $x333)))
 (let (($x428 (<= ?x453 (- 6))))
 (let ((@x276 (and-elim @x334 $x452)))
 (let ((@x639 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x452) $x428)) @x276 $x428)))
 (let (($x112 (<= ?x373 1)))
 (let ((@x648 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x609) $x112)) @x278 $x112)))
 (let (($x185 (>= ?x453 (- 6))))
 (let ((@x226 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x452) $x185)) @x276 $x185)))
 (let (($x275 (not (<= ?x165 0))))
 (let (($x294 (>= ?x165 0)))
 (let ((@x636 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x294)) @x226 @x648 @x639 @x156 false) $x294)))
 (let ((@x426 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x296 $x275 (not $x294))) (and-elim @x334 $x166) (or $x275 (not $x294)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x426 @x636 $x275) @x226 @x648 @x639 @x156 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        46
 :arith-assert-upper        64
 :arith-branch-var          1
 :arith-conflicts           6
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           4
 :arith-ineq-splits         1
 :arith-max-min             230
 :arith-nonlinear-bounds    41
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              25
 :arith-pseudo-nonlinear    6
 :arith-row-summations      127
 :arith-tableau-max-columns 41
 :arith-tableau-max-rows    10
 :conflicts                 6
 :decisions                 34
 :del-clause                17
 :final-checks              8
 :max-memory                3.63
 :memory                    3.13
 :minimized-lits            1
 :mk-bool-var               33
 :mk-clause                 19
 :num-allocs                1153659
 :num-checks                1
 :propagations              12
 :rlimit-count              10348
 :time                      0.01
 :total-time                0.01)
