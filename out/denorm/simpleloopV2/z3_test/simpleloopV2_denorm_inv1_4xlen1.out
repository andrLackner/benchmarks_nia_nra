unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x93 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x59 (>= ?x93 0)))
 (let (($x235 (= ?x93 0)))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x101 (+ ?x56 ?x63 y!0 x!1)))
 (let ((?x112 (+ 1 y!0)))
 (let ((?x192 (+ (- 1) x!1)))
 (let ((?x314 (* ?x192 ?x112 ?x112 ?x112 ?x112 ?x112 ?x112 ?x101)))
 (let (($x315 (= ?x314 0)))
 (let (($x316 (not $x315)))
 (let ((?x111 (+ 1 x!1)))
 (let ((?x98 (+ (- 1) y!0)))
 (let ((?x226 (* ?x98 ?x98 ?x98 ?x98 ?x98 ?x98 ?x111 ?x101)))
 (let (($x221 (= ?x226 0)))
 (let (($x166 (or (not $x221) $x316)))
 (let (($x174 (and $x235 $x166)))
 (let (($x74 (= (* ?x192 ?x112 ?x112 ?x112 ?x112 ?x112 ?x112 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x190 (= (* ?x98 ?x98 ?x98 ?x98 ?x98 ?x98 ?x111 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x115 (and (= (+ x!1 y!0 ?x56 ?x63) 0) (or (not $x190) (not $x74)))))
 (let (($x105 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x200 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x77) 0)) (not (= (* ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (and $x82 $x200)))))))))) :qid k!27))
 ))
 (let (($x239 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x117 (+ x ?x56 ?x63 y)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x78 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x117) 0)) (not (= (* ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 ?x117) 0)))))
 (and (= ?x117 0) $x78))))))))) :qid k!27))
 ))
 (let ((?x99 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x200 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x77) 0)) (not (= (* ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (let (($x83 (and $x82 $x200)))
 (let (($x187 (= (* ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 (+ x ?x56 ?x63 y)) 0)))
 (let (($x131 (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 (+ x ?x56 ?x63 y)) 0)))
 (let (($x64 (and (= (+ x ?x56 ?x63 y) 0) (or (not $x131) (not $x187)))))
 (rewrite (= $x64 $x83))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x46 (- y 1)))
 (let ((?x38 (- 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x38 ?x46 1 ?x38 ?x43 ?x46 ?x46 ?x38 ?x46 ?x46 ?x46)))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 1 ?x38 ?x34 ?x39 ?x39 ?x38 ?x39 ?x39 ?x39)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))))))) :qid k!27))
 ))
 (let ((?x236 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x117 (+ x ?x56 ?x63 y)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x78 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x117) 0)) (not (= (* ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 ?x117) 0)))))
 (let (($x64 (and (= ?x117 0) $x78)))
 (let ((?x46 (- y 1)))
 (let ((?x38 (- 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x38 ?x46 1 ?x38 ?x43 ?x46 ?x46 ?x38 ?x46 ?x46 ?x46)))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 1 ?x38 ?x34 ?x39 ?x39 ?x38 ?x39 ?x39 ?x39)))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))
 (rewrite (= $x52 $x64))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x114 (mp (mp @x54 (quant-intro (proof-bind ?x236) (= $x53 $x239)) $x239) (rewrite (= $x239 $x239)) $x239)))
 (let ((@x121 (mp~ (mp @x114 (quant-intro (proof-bind ?x99) (= $x239 $x105)) $x105) (sk (~ $x105 $x115)) $x115)))
 (let ((@x313 (mp @x121 (rewrite (= $x115 $x174)) $x174)))
 (let ((@x317 (and-elim @x313 $x235)))
 (let ((@x103 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x59)) @x317 $x59)))
 (let (($x223 (<= ?x93 0)))
 (let ((@x197 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x223)) @x317 $x223)))
 (let (($x71 (not (<= ?x314 0))))
 (let (($x81 (>= ?x314 0)))
 (let (($x126 (>= ?x226 0)))
 (let (($x60 (<= ?x226 0)))
 (let ((@x119 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x221 (not $x60) (not $x126))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x60)) @x197 @x103 false) $x60) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x126)) @x197 @x103 false) $x126) $x221)))
 (let ((@x261 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x315 $x71 (not $x81))) (unit-resolution (and-elim @x313 $x166) @x119 $x316) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x81)) @x197 @x103 false) $x81) $x71)))
 ((_ th-lemma arith farkas 1 1 1) @x261 @x197 @x103 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             48
 :arith-nonlinear-horner    18
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :final-checks              4
 :max-memory                19.54
 :memory                    19.13
 :mk-bool-var               21
 :mk-clause                 28
 :num-allocs                463613
 :num-checks                1
 :propagations              14
 :rlimit-count              1313
 :time                      0.01
 :total-time                0.02)
