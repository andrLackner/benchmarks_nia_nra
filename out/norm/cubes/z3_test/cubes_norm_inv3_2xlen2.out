unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x665 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x629 (<= ?x665 (- 1))))
 (let (($x278 (= ?x665 (- 1))))
 (let ((?x374 (+ k!2 c!3)))
 (let ((?x676 (+ 6 m!1)))
 (let ((?x576 (+ 1 n!0)))
 (let ((?x187 (* (- 2) (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 (+ m!1 k!2) ?x374 ?x374))))
 (let ((?x704 (+ m!1 k!2)))
 (let ((?x741 (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x704 ?x704 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374)))
 (let ((?x189 (* (- 3) (* ?x576 ?x676 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374 ?x374 ?x374 ?x374))))
 (let ((?x584 (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x704 ?x704 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374)))
 (let ((?x258 (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x704 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374 ?x374)))
 (let ((?x182 (* (- 1) (* ?x576 ?x676 ?x704 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374 ?x374 ?x374))))
 (let ((?x630 (* (- 1) (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x704 ?x704 ?x374 ?x374))))
 (let ((?x145 (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x704 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374)))
 (let ((?x160 (* 2 (* ?x576 ?x576 ?x676 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374 ?x374 ?x374))))
 (let ((?x244 (+ ?x160 (* ?x576 ?x576 ?x676 ?x704 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374 ?x374 ?x374) (* 3 (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x704 ?x374 ?x374 ?x374)) (* 2 ?x145) ?x630 ?x182 (* (- 1) (* ?x576 ?x576 ?x676 ?x676 ?x704 ?x374 ?x374 ?x374 ?x374)) (* (- 2) (* ?x576 ?x576 ?x676 ?x676 ?x374 ?x374 ?x374 ?x374)) (* (- 3) ?x258) (* ?x576 ?x676 ?x676 ?x704 ?x374 ?x374 ?x374 ?x374) (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x704 ?x704 ?x374 ?x374) (* ?x576 ?x676 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374 ?x374 ?x374) (* (- 1) ?x584) (* (- 1) (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x704 ?x374 ?x374)) ?x189 (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x704 ?x704 ?x704 ?x704 ?x374 ?x374 ?x374) (* 3 (* ?x576 ?x676 ?x676 ?x374 ?x374 ?x374 ?x374 ?x374)) ?x741 ?x187 (* (- 1) (* ?x576 ?x676 ?x676 ?x374 ?x374 ?x374 ?x374)))))
 (let (($x236 (= ?x244 0)))
 (let (($x611 (not $x236)))
 (let ((?x373 (* 3 c!3)))
 (let ((?x753 (* (- 2) n!0)))
 (let ((?x446 (* (- 1) (* k!2 n!0))))
 (let ((?x274 (+ k!2 ?x446 ?x753 ?x373)))
 (let (($x267 (= ?x274 1)))
 (let ((?x487 (* 18 c!3)))
 (let ((?x540 (* (- 9) n!0)))
 (let ((?x556 (* (- 1) (* k!2 k!2))))
 (let ((?x574 (* 5 k!2)))
 (let ((?x127 (+ (* 9 (* n!0 c!3)) ?x574 ?x556 ?x540 ?x487)))
 (let (($x262 (= ?x127 4)))
 (let ((?x431 (+ m!1 (* (- 6) n!0))))
 (let (($x549 (= ?x431 6)))
 (let (($x697 (and $x549 $x262 $x267 $x278 $x611)))
 (let ((?x197 (+ c!3 k!2)))
 (let ((?x650 (+ k!2 m!1)))
 (let ((?x252 (* (- 1) (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x650 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197))))
 (let ((?x242 (* (- 2) (* ?x576 ?x576 ?x676 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197 ?x197 ?x197))))
 (let ((?x247 (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x650 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197)))
 (let ((?x256 (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x650 ?x650 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197)))
 (let ((?x207 (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x650 ?x650 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197)))
 (let ((?x152 (* 3 (* ?x576 ?x676 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197 ?x197 ?x197 ?x197))))
 (let ((?x172 (* (- 1) (* ?x576 ?x576 ?x676 ?x650 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197 ?x197 ?x197))))
 (let ((?x154 (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x650 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197 ?x197)))
 (let ((?x304 (+ (* ?x576 ?x676 ?x676 ?x197 ?x197 ?x197 ?x197) (* (- 1) (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x650 ?x650 ?x197 ?x197)) (* 3 ?x154) ?x172 (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x650 ?x650 ?x197 ?x197) (* (- 1) (* ?x576 ?x676 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197 ?x197 ?x197)) (* ?x576 ?x676 ?x650 ?x650 ?x650 ?x650 ?x197 ?x197 ?x197 ?x197 ?x197) (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x650 ?x197 ?x197) (* ?x576 ?x576 ?x676 ?x676 ?x650 ?x197 ?x197 ?x197 ?x197) ?x152 (* 2 (* ?x576 ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x650 ?x197 ?x197)) (* 2 (* ?x576 ?x576 ?x676 ?x676 ?x197 ?x197 ?x197 ?x197)) ?x207 (* (- 1) ?x256) (* (- 2) ?x247) (* (- 3) (* ?x576 ?x676 ?x676 ?x197 ?x197 ?x197 ?x197 ?x197)) ?x242 ?x252 (* (- 1) (* ?x576 ?x676 ?x676 ?x650 ?x197 ?x197 ?x197 ?x197)) (* (- 3) (* ?x576 ?x576 ?x576 ?x676 ?x676 ?x676 ?x650 ?x197 ?x197 ?x197)))))
 (let (($x299 (and $x549 (= (+ ?x487 ?x574 ?x540 ?x556 (* 9 (* c!3 n!0))) 4) (= (+ ?x373 k!2 ?x753 ?x446) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x304 0)))))
 (let (($x245 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x325 (+ 6 m)))
 (let ((?x328 (+ 1 n)))
 (let ((?x450 (* (- 3) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x601 (* (- 1) (* ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x690 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x644 (* (- 2) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x582 (* (- 3) (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x588 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x755 (* (- 2) ?x588)))
 (let ((?x566 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x536 (* (- 1) ?x566)))
 (let ((?x552 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x490 (* 2 (* ?x328 ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x482 (* 2 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68))))
 (let ((?x474 (* 3 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x460 (* ?x328 ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x365 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68)))
 (let ((?x351 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x437 (* (- 1) (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x287 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x123 (* (- 1) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x193 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x194 (* 3 ?x193)))
 (let ((?x171 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x141 (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x210 (+ ?x141 ?x171 ?x194 ?x123 ?x287 ?x437 ?x351 ?x365 ?x460 ?x474 ?x482 ?x490 ?x552 ?x536 ?x755 ?x582 ?x644 ?x690 ?x601 ?x450)))
 (let (($x317 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x279 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x231 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x227 (= ?x231 4)))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (and $x143 $x227 $x279 $x317 (not (= ?x210 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x286 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x325 (+ 6 m)))
 (let ((?x328 (+ 1 n)))
 (let ((?x437 (* (- 1) (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x450 (* (- 3) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x365 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68)))
 (let ((?x460 (* ?x328 ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x351 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x474 (* 3 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x482 (* 2 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68))))
 (let ((?x490 (* 2 (* ?x328 ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x644 (* (- 2) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x601 (* (- 1) (* ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x588 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x755 (* (- 2) ?x588)))
 (let ((?x690 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x566 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x536 (* (- 1) ?x566)))
 (let ((?x552 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x582 (* (- 3) (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x141 (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x123 (* (- 1) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x193 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x194 (* 3 ?x193)))
 (let ((?x171 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x287 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x695 (+ ?x287 ?x171 ?x194 ?x123 ?x141 ?x582 ?x552 ?x536 ?x690 ?x755 ?x601 ?x644 ?x490 ?x482 ?x474 ?x351 ?x460 ?x365 ?x450 ?x437)))
 (let (($x271 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x310 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x509 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (and $x143 (= ?x509 (- 4)) $x310 $x271 (not (= ?x695 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x151 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x325 (+ 6 m)))
 (let ((?x328 (+ 1 n)))
 (let ((?x450 (* (- 3) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x601 (* (- 1) (* ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x690 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x644 (* (- 2) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x582 (* (- 3) (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x588 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x755 (* (- 2) ?x588)))
 (let ((?x566 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x536 (* (- 1) ?x566)))
 (let ((?x552 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x490 (* 2 (* ?x328 ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x482 (* 2 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68))))
 (let ((?x474 (* 3 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x460 (* ?x328 ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x365 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68)))
 (let ((?x351 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x437 (* (- 1) (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x287 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x123 (* (- 1) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x193 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x194 (* 3 ?x193)))
 (let ((?x171 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x141 (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x210 (+ ?x141 ?x171 ?x194 ?x123 ?x287 ?x437 ?x351 ?x365 ?x460 ?x474 ?x482 ?x490 ?x552 ?x536 ?x755 ?x582 ?x644 ?x690 ?x601 ?x450)))
 (let (($x317 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x279 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x231 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x227 (= ?x231 4)))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x321 (and $x143 $x227 $x279 $x317 (not (= ?x210 0)))))
 (let ((?x695 (+ ?x287 ?x171 ?x194 ?x123 ?x141 ?x582 ?x552 ?x536 ?x690 ?x755 ?x601 ?x644 ?x490 ?x482 ?x474 ?x351 ?x460 ?x365 ?x450 ?x437)))
 (let (($x271 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x310 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x509 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x157 (and $x143 (= ?x509 (- 4)) $x310 $x271 (not (= ?x695 0)))))
 (rewrite (= $x157 $x321))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x110 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x87 (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x85 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x83 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x75 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x74 (- (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x78 (- (+ ?x74 ?x75) (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (+ ?x78 (* ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71))))
 (let ((?x91 (- (- (+ ?x82 ?x83) ?x85) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x94 (- (- (- ?x91 ?x87) (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71)) (* 2 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x101 (+ ?x94 (* 2 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71 ?x71) (* 2 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71) (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71) (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71) (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x104 (- ?x101 (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x106 (= (- ?x104 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x106)))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x149 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x325 (+ 6 m)))
 (let ((?x328 (+ 1 n)))
 (let ((?x437 (* (- 1) (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x450 (* (- 3) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x365 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68)))
 (let ((?x460 (* ?x328 ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x351 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x474 (* 3 (* ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x482 (* 2 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x68 ?x68))))
 (let ((?x490 (* 2 (* ?x328 ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x644 (* (- 2) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x601 (* (- 1) (* ?x328 ?x325 ?x325 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x588 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x755 (* (- 2) ?x588)))
 (let ((?x690 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x566 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x536 (* (- 1) ?x566)))
 (let ((?x552 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x582 (* (- 3) (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x141 (* ?x328 ?x325 ?x325 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x123 (* (- 1) (* ?x328 ?x328 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x193 (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x194 (* 3 ?x193)))
 (let ((?x171 (* (- 1) (* ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x287 (* ?x328 ?x328 ?x328 ?x328 ?x325 ?x325 ?x325 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x695 (+ ?x287 ?x171 ?x194 ?x123 ?x141 ?x582 ?x552 ?x536 ?x690 ?x755 ?x601 ?x644 ?x490 ?x482 ?x474 ?x351 ?x460 ?x365 ?x450 ?x437)))
 (let (($x271 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x310 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x509 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x143 (= (+ m (* (- 6) n)) 6)))
 (let (($x157 (and $x143 (= ?x509 (- 4)) $x310 $x271 (not (= ?x695 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x87 (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x85 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71)))
 (let ((?x83 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x75 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)))
 (let ((?x74 (- (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x78 (- (+ ?x74 ?x75) (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (+ ?x78 (* ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71))))
 (let ((?x91 (- (- (+ ?x82 ?x83) ?x85) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x94 (- (- (- ?x91 ?x87) (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71)) (* 2 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x101 (+ ?x94 (* 2 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71 ?x71) (* 2 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71) (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71) (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71) (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x104 (- ?x101 (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x106 (= (- ?x104 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x109 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x106)))))
 (rewrite (= $x109 $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x111 (asserted $x110)))
 (let ((@x678 (mp (mp @x111 (quant-intro (proof-bind ?x149) (= $x110 $x286)) $x286) (rewrite (= $x286 $x286)) $x286)))
 (let ((@x128 (mp~ (mp @x678 (quant-intro (proof-bind ?x151) (= $x286 $x245)) $x245) (sk (~ $x245 $x299)) $x299)))
 (let ((@x235 (mp @x128 (rewrite (= $x299 $x697)) $x697)))
 (let ((@x272 (and-elim @x235 $x278)))
 (let ((@x327 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x278) $x629)) @x272 $x629)))
 (let (($x205 (>= ?x665 (- 1))))
 (let ((@x129 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x278) $x205)) @x272 $x205)))
 (let (($x628 (<= ?x431 6)))
 (let ((@x499 (and-elim @x235 $x549)))
 (let ((@x113 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x549) $x628)) @x499 $x628)))
 (let (($x170 (>= ?x431 6)))
 (let ((@x232 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x549) $x170)) @x499 $x170)))
 (let (($x405 (<= ?x127 4)))
 (let ((@x117 (and-elim @x235 $x262)))
 (let ((@x312 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x262) $x405)) @x117 $x405)))
 (let (($x238 (>= ?x127 4)))
 (let ((@x220 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x262) $x238)) @x117 $x238)))
 (let (($x224 (<= ?x274 1)))
 (let ((@x273 (and-elim @x235 $x267)))
 (let ((@x343 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x267) $x224)) @x273 $x224)))
 (let (($x184 (>= ?x274 1)))
 (let ((@x383 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x267) $x184)) @x273 $x184)))
 (let (($x284 (not (<= ?x244 0))))
 (let (($x215 (>= ?x244 0)))
 (let ((@x388 ((_ th-lemma arith) (hypothesis (not $x215)) @x129 @x327 @x232 @x113 @x129 @x327 @x383 @x343 @x129 @x327 @x220 @x312 @x129 @x327 @x232 @x113 @x129 @x327 false)))
 (let ((@x382 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x236 $x284 (not $x215))) (and-elim @x235 $x611) (or $x284 (not $x215)))))
 ((_ th-lemma arith) (unit-resolution @x382 (lemma @x388 $x215) $x284) @x129 @x327 @x232 @x113 @x129 @x327 @x383 @x343 @x129 @x327 @x220 @x312 @x129 @x327 @x232 @x113 @x129 @x327 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           1
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             303
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             1
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                19.84
 :memory                    19.25
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                1223429
 :num-checks                1
 :propagations              11
 :rlimit-count              37341
 :time                      0.03
 :total-time                0.05)
