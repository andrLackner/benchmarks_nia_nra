unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x563 (* m!1 n!0)))
 (let ((?x538 (* n!0 k!2)))
 (let ((?x115 (* (- 3) c!3)))
 (let ((?x430 (* (- 3) k!2)))
 (let ((?x438 (* 2 n!0)))
 (let ((?x334 (+ 3 ?x438 ?x430 ?x115 ?x538 ?x563)))
 (let (($x2315 (<= ?x334 0)))
 (let ((?x476 (+ m!1 (* (- 6) n!0))))
 (let (($x168 (<= ?x476 6)))
 (let (($x364 (= ?x476 6)))
 (let ((?x307 (* 6 (* c!3 c!3 c!3))))
 (let ((?x314 (* 6 (* k!2 k!2 k!2))))
 (let ((?x575 (+ m!1 k!2)))
 (let ((?x416 (+ 6 m!1)))
 (let ((?x533 (+ 1 n!0)))
 (let ((?x186 (+ (* 6 (* n!0 k!2 k!2 k!2)) (* 3 (* m!1 n!0 k!2 c!3 c!3)) (* 3 (* m!1 n!0 k!2 k!2 c!3)) (* (- 1) (* ?x533 ?x533 ?x533 ?x416 ?x416 ?x575 ?x575 ?x575)) (* ?x533 ?x533 ?x416 ?x575 ?x575 ?x575) (* 18 (* k!2 c!3 c!3)) (* (- 1) (* ?x533 ?x533 ?x533 ?x416 ?x575 ?x575 (+ k!2 c!3))) (* m!1 c!3 c!3 c!3) (* 18 (* k!2 k!2 c!3)) ?x314 ?x307 (* m!1 n!0 k!2 k!2 k!2) (* 3 (* m!1 k!2 c!3 c!3)) (* m!1 n!0 c!3 c!3 c!3) (* 18 (* n!0 k!2 k!2 c!3)) (* 18 (* n!0 k!2 c!3 c!3)) (* 6 (* n!0 c!3 c!3 c!3)) (* m!1 k!2 k!2 k!2) (* 3 (* m!1 k!2 k!2 c!3)))))
 (let ((?x435 (* ?x186 ?x334)))
 (let (($x625 (= ?x435 0)))
 (let (($x436 (not $x625)))
 (let ((?x171 (* (- 1) k!2)))
 (let ((?x457 (+ (* 3 n!0) ?x171 (* 3 (* n!0 n!0)))))
 (let (($x565 (= ?x457 (- 1))))
 (let ((?x512 (+ ?x438 ?x171 ?x115 ?x538)))
 (let (($x726 (= ?x512 (- 1))))
 (let ((?x247 (* k!2 k!2)))
 (let ((?x531 (+ ?x247 (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let (($x427 (and $x364 (= ?x531 (- 4)) $x726 $x565 $x436)))
 (let ((?x521 (+ k!2 m!1)))
 (let ((?x380 (+ (* (- 1) (* ?x533 ?x533 ?x533 ?x416 ?x416 ?x521 ?x521 ?x521)) (* ?x533 ?x533 ?x416 ?x521 ?x521 ?x521) (* (- 1) (* ?x533 ?x533 ?x533 ?x416 ?x521 ?x521 (+ c!3 k!2))) (* 18 (* c!3 c!3 k!2)) ?x307 (* k!2 k!2 k!2 m!1 n!0) (* 3 (* c!3 k!2 k!2 m!1 n!0)) (* 3 (* c!3 c!3 k!2 m!1 n!0)) (* c!3 c!3 c!3 m!1 n!0) (* 18 (* c!3 k!2 k!2)) ?x314 (* c!3 c!3 c!3 m!1) (* 3 (* c!3 c!3 k!2 m!1)) (* 3 (* c!3 k!2 k!2 m!1)) (* k!2 k!2 k!2 m!1) (* 6 (* c!3 c!3 c!3 n!0)) (* 18 (* c!3 c!3 k!2 n!0)) (* 18 (* c!3 k!2 k!2 n!0)) (* 6 (* k!2 k!2 k!2 n!0)))))
 (let (($x455 (not (= (* ?x380 (+ 3 ?x115 ?x430 ?x438 (* k!2 n!0) ?x563)) 0))))
 (let (($x517 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x253 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x247) (* 9 (* c!3 n!0)))))
 (let (($x591 (and $x364 (= ?x253 4) $x517 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) $x455)))
 (let (($x520 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x593 (* 6 (* k k k n))))
 (let ((?x612 (* 18 (* c k k n))))
 (let ((?x611 (* 18 (* c c k n))))
 (let ((?x549 (* 6 (* c c c n))))
 (let ((?x545 (* k k k m)))
 (let ((?x610 (* 3 (* c k k m))))
 (let ((?x609 (* 3 (* c c k m))))
 (let ((?x508 (* c c c m)))
 (let ((?x505 (* 6 (* k k k))))
 (let ((?x486 (* c k k)))
 (let ((?x608 (* 18 ?x486)))
 (let ((?x453 (* c c c m n)))
 (let ((?x613 (* 3 (* c c k m n))))
 (let ((?x614 (* 3 (* c k k m n))))
 (let ((?x446 (* k k k m n)))
 (let ((?x439 (* 6 (* c c c))))
 (let ((?x432 (* c c k)))
 (let ((?x607 (* 18 ?x432)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x68))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x424 (+ ?x243 ?x285 ?x287 ?x607 ?x439 ?x446 ?x614 ?x613 ?x453 ?x608 ?x505 ?x508 ?x609 ?x610 ?x545 ?x549 ?x611 ?x612 ?x593)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* ?x424 ?x409) 0)))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x431 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x593 (* 6 (* k k k n))))
 (let ((?x612 (* 18 (* c k k n))))
 (let ((?x611 (* 18 (* c c k n))))
 (let ((?x549 (* 6 (* c c c n))))
 (let ((?x545 (* k k k m)))
 (let ((?x610 (* 3 (* c k k m))))
 (let ((?x609 (* 3 (* c c k m))))
 (let ((?x508 (* c c c m)))
 (let ((?x505 (* 6 (* k k k))))
 (let ((?x453 (* c c c m n)))
 (let ((?x613 (* 3 (* c c k m n))))
 (let ((?x614 (* 3 (* c k k m n))))
 (let ((?x446 (* k k k m n)))
 (let ((?x439 (* 6 (* c c c))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x68))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x600 (+ ?x243 (* 6 (* k k c)) ?x285 ?x287 (* 6 (* c k c)) (* 6 (* k c k)) (* 6 (* c c k)) ?x439 ?x446 ?x614 ?x613 ?x453 (* 6 (* c k k)) (* 6 (* k c c)) ?x505 ?x508 ?x609 ?x610 ?x545 ?x549 ?x611 ?x612 ?x593)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* ?x600 ?x409) 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x578 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x593 (* 6 (* k k k n))))
 (let ((?x612 (* 18 (* c k k n))))
 (let ((?x611 (* 18 (* c c k n))))
 (let ((?x549 (* 6 (* c c c n))))
 (let ((?x545 (* k k k m)))
 (let ((?x610 (* 3 (* c k k m))))
 (let ((?x609 (* 3 (* c c k m))))
 (let ((?x508 (* c c c m)))
 (let ((?x505 (* 6 (* k k k))))
 (let ((?x486 (* c k k)))
 (let ((?x608 (* 18 ?x486)))
 (let ((?x453 (* c c c m n)))
 (let ((?x613 (* 3 (* c c k m n))))
 (let ((?x614 (* 3 (* c k k m n))))
 (let ((?x446 (* k k k m n)))
 (let ((?x439 (* 6 (* c c c))))
 (let ((?x432 (* c c k)))
 (let ((?x607 (* 18 ?x432)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x68))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x424 (+ ?x243 ?x285 ?x287 ?x607 ?x439 ?x446 ?x614 ?x613 ?x453 ?x608 ?x505 ?x508 ?x609 ?x610 ?x545 ?x549 ?x611 ?x612 ?x593)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x484 (and $x124 $x208 $x260 $x298 (not (= (* ?x424 ?x409) 0)))))
 (let ((?x600 (+ ?x243 (* 6 (* k k c)) ?x285 ?x287 (* 6 (* c k c)) (* 6 (* k c k)) (* 6 ?x432) ?x439 ?x446 ?x614 ?x613 ?x453 (* 6 ?x486) (* 6 (* k c c)) ?x505 ?x508 ?x609 ?x610 ?x545 ?x549 ?x611 ?x612 ?x593)))
 (let (($x572 (and $x124 $x208 $x260 $x298 (not (= (* ?x600 ?x409) 0)))))
 (rewrite (= $x572 $x484)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x445 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x274 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 (+ c k)))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x252 (+ ?x285 (* ?x341 ?x414 (+ c k) (+ c k) (+ c k)) ?x287 ?x243)))
 (let (($x506 (not (= (* ?x252 ?x274) 0))))
 (let (($x497 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x188 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x188 $x497 $x506)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x475 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x593 (* 6 (* k k k n))))
 (let ((?x612 (* 18 (* c k k n))))
 (let ((?x611 (* 18 (* c c k n))))
 (let ((?x549 (* 6 (* c c c n))))
 (let ((?x545 (* k k k m)))
 (let ((?x610 (* 3 (* c k k m))))
 (let ((?x609 (* 3 (* c c k m))))
 (let ((?x508 (* c c c m)))
 (let ((?x505 (* 6 (* k k k))))
 (let ((?x453 (* c c c m n)))
 (let ((?x613 (* 3 (* c c k m n))))
 (let ((?x614 (* 3 (* c k k m n))))
 (let ((?x446 (* k k k m n)))
 (let ((?x439 (* 6 (* c c c))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x68))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x600 (+ ?x243 (* 6 (* k k c)) ?x285 ?x287 (* 6 (* c k c)) (* 6 (* k c k)) (* 6 (* c c k)) ?x439 ?x446 ?x614 ?x613 ?x453 (* 6 (* c k k)) (* 6 (* k c c)) ?x505 ?x508 ?x609 ?x610 ?x545 ?x549 ?x611 ?x612 ?x593)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x572 (and $x124 $x208 $x260 $x298 (not (= (* ?x600 ?x409) 0)))))
 (let ((?x265 (* (+ ?x285 (* ?x341 ?x414 ?x68 ?x68 ?x68) ?x287 ?x243) (+ 3 ?x221 (* (- 4) k) (* ?x341 ?x71) (* (- 1) m) ?x59))))
 (let (($x506 (not (= ?x265 0))))
 (let (($x497 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x188 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x443 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x188 $x497 $x506)))
 (rewrite (= $x443 $x572))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x507 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x274 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 (+ c k)))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x252 (+ ?x285 (* ?x341 ?x414 (+ c k) (+ c k) (+ c k)) ?x287 ?x243)))
 (let (($x506 (not (= (* ?x252 ?x274) 0))))
 (let (($x497 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x523 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x523 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x497 $x506))))))))))))))))) :qid k!34))
 ))
 (let ((?x618 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x274 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 (+ c k)))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x252 (+ ?x285 (* ?x341 ?x414 (+ c k) (+ c k) (+ c k)) ?x287 ?x243)))
 (let (($x506 (not (= (* ?x252 ?x274) 0))))
 (let (($x497 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x188 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x443 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x188 $x497 $x506)))
 (let ((?x48 (* 9 n)))
 (let ((?x523 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x467 (and $x124 (= ?x523 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x497 $x506)))
 (rewrite (= $x467 $x443))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x81 (+ (* ?x71 ?x71 ?x71 ?x78 ?x72 ?x72) (* (+ c k) (+ c k) (+ c k) ?x78 ?x72))))
 (let ((?x85 (- (- ?x81 (* (+ c k) ?x71 ?x71 ?x78 ?x72 ?x72 ?x72)) (* ?x71 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x85) 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x509 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x274 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x243 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x71 ?x71 ?x71))))
 (let ((?x287 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 (+ c k)))))
 (let ((?x285 (* ?x341 ?x341 ?x414 ?x71 ?x71 ?x71)))
 (let ((?x252 (+ ?x285 (* ?x341 ?x414 (+ c k) (+ c k) (+ c k)) ?x287 ?x243)))
 (let (($x506 (not (= (* ?x252 ?x274) 0))))
 (let (($x497 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x523 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x467 (and $x124 (= ?x523 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x497 $x506)))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x81 (+ (* ?x71 ?x71 ?x71 ?x78 ?x72 ?x72) (* (+ c k) (+ c k) (+ c k) ?x78 ?x72))))
 (let ((?x85 (- (- ?x81 (* (+ c k) ?x71 ?x71 ?x78 ?x72 ?x72 ?x72)) (* ?x71 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x85) 0))))))
 (rewrite (= $x90 $x467))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x603 (mp (mp @x92 (quant-intro (proof-bind ?x509) (= $x91 $x507)) $x507) (rewrite (= $x507 $x507)) $x507)))
 (let ((@x535 (mp (mp @x603 (quant-intro (proof-bind ?x618) (= $x507 $x445)) $x445) (quant-intro (proof-bind ?x475) (= $x445 $x431)) $x431)))
 (let ((@x540 (mp~ (mp @x535 (quant-intro (proof-bind ?x578) (= $x431 $x520)) $x520) (sk (~ $x520 $x591)) $x591)))
 (let ((@x234 (mp @x540 (rewrite (= $x591 $x427)) $x427)))
 (let ((@x336 (and-elim @x234 $x364)))
 (let ((@x694 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x364) $x168)) @x336 $x168)))
 (let (($x403 (>= ?x476 6)))
 (let ((@x604 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x364) $x403)) @x336 $x403)))
 (let (($x161 (<= ?x512 (- 1))))
 (let ((@x553 (and-elim @x234 $x726)))
 (let ((@x335 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x161)) @x553 $x161)))
 (let (($x141 (>= ?x512 (- 1))))
 (let ((@x554 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x141)) @x553 $x141)))
 (let (($x396 (<= ?x457 (- 1))))
 (let ((@x99 (and-elim @x234 $x565)))
 (let ((@x337 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x565) $x396)) @x99 $x396)))
 (let (($x590 (>= ?x457 (- 1))))
 (let ((@x585 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x565) $x590)) @x99 $x590)))
 (let ((@x2304 ((_ th-lemma arith) (hypothesis (not $x2315)) @x604 @x694 @x604 @x694 @x585 @x337 @x554 @x335 @x604 @x694 false)))
 (let ((@x2311 (lemma @x2304 $x2315)))
 (let (($x2420 (>= ?x334 0)))
 (let ((@x2358 (hypothesis (not $x2420))))
 (let ((@x2410 ((_ th-lemma arith) @x2358 @x604 @x694 @x585 @x337 @x554 @x335 @x585 @x337 @x554 @x335 @x604 @x694 false)))
 (let (($x2404 (not (<= ?x435 0))))
 (let (($x184 (>= ?x435 0)))
 (let (($x297 (not $x184)))
 (let ((@x272 (hypothesis $x297)))
 (let (($x2415 (>= ?x186 0)))
 (let (($x2294 (not $x2415)))
 (let (($x280 (<= ?x186 0)))
 (let ((@x276 ((_ th-lemma arith) @x272 (hypothesis (not $x280)) @x604 @x694 @x554 @x335 @x585 @x337 false)))
 (let ((@x2364 ((_ th-lemma arith farkas 1 1 1) @x272 (hypothesis $x2415) (unit-resolution (lemma @x276 (or $x280 $x184)) @x272 $x280) false)))
 (let ((@x2321 (lemma ((_ th-lemma arith farkas 1 1 1) @x272 (hypothesis $x2294) @x2358 false) (or $x2415 $x184 $x2420))))
 (let ((@x2409 (unit-resolution @x2321 (unit-resolution (lemma @x2364 (or $x2294 $x184)) @x272 $x2294) @x272 $x2420)))
 (let ((@x2477 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x625 $x2404 $x297)) (and-elim @x234 $x436) (or $x2404 $x297))))
 (let ((@x2478 (unit-resolution @x2477 (lemma ((_ th-lemma arith farkas 1 1 1) @x272 @x2409 @x2311 false) $x184) $x2404)))
 ((_ th-lemma arith farkas 1 1 1) @x2478 (lemma @x2410 $x2420) @x2311 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 213
 :arith-assert-diseq        44
 :arith-assert-lower        1688
 :arith-assert-upper        1381
 :arith-bound-prop          70
 :arith-branch-var          51
 :arith-conflicts           96
 :arith-eq-adapter          30
 :arith-fixed-eqs           344
 :arith-gcd-tests           797
 :arith-gomory-cuts         44
 :arith-grobner             91
 :arith-ineq-splits         51
 :arith-max-min             11019
 :arith-nonlinear-bounds    793
 :arith-nonlinear-horner    1203
 :arith-num-rows            29
 :arith-offset-eqs          35
 :arith-patches             119
 :arith-patches_succ        17
 :arith-pivots              1812
 :arith-pseudo-nonlinear    350
 :arith-row-summations      15520
 :arith-tableau-max-columns 81
 :arith-tableau-max-rows    29
 :conflicts                 106
 :decisions                 538
 :del-clause                225
 :final-checks              324
 :max-memory                4.95
 :memory                    3.39
 :minimized-lits            12
 :mk-bool-var               534
 :mk-clause                 513
 :num-allocs                2201067076
 :num-checks                1
 :propagations              670
 :restarts                  1
 :rlimit-count              2635864
 :time                      3.75
 :total-time                3.75)
