unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x252 (to_real d!1)))
 (let ((?x188 (to_real y!0)))
 (let ((?x162 (to_real b!2)))
 (let ((?x69 (to_real a00)))
 (let ((?x366 (* (- (/ 1.0 4.0)) (* (to_real y00) ?x162 ?x162 ?x162 ?x188 ?x188 (to_real a!3)))))
 (let ((?x263 (* (- (/ 1.0 8.0)) (* ?x162 ?x162 ?x188 ?x188 ?x252 (to_real a!3) (to_real a!3)))))
 (let ((?x213 (+ (* (/ 1.0 16.0) (* ?x162 ?x162 ?x162 ?x188 ?x188 ?x188 ?x252 ?x252)) ?x263 (* (- (/ 1.0 16.0)) (* (to_real y00) ?x162 ?x162 ?x162 ?x188 ?x188 ?x252 ?x252)) (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x188 ?x188 ?x188 (to_real a!3))) ?x366 (* (/ 1.0 8.0) (* ?x69 ?x162 ?x162 ?x188 ?x188 ?x252 (to_real a!3))) (* (- (/ 1.0 32.0)) (* ?x162 ?x162 ?x188 ?x188 ?x252 ?x252 ?x252 (to_real a!3))) (* (/ 1.0 32.0) (* ?x69 ?x162 ?x162 ?x188 ?x188 ?x252 ?x252 ?x252)))))
 (let (($x234 (>= ?x213 0.0)))
 (let (($x657 (not $x234)))
 (let (($x231 (= ?x213 0.0)))
 (let (($x465 (not $x231)))
 (let ((?x538 (to_real a!3)))
 (let ((?x592 (* ?x252 ?x538)))
 (let ((?x351 (* (/ 1.0 2.0) ?x592)))
 (let ((?x497 (* ?x69 ?x252)))
 (let ((?x273 (* (- (/ 1.0 2.0)) ?x497)))
 (let ((?x66 (to_real y00)))
 (let ((?x428 (* ?x66 ?x162)))
 (let ((?x353 (* ?x162 ?x188)))
 (let ((?x488 (* (- 1.0) ?x353)))
 (let ((?x280 (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x188 ?x188))))
 (let ((?x233 (+ (* (/ 1.0 16.0) (* ?x162 ?x162 ?x188 ?x252 ?x252 ?x252)) ?x280 (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x188 ?x252)) (* (/ 1.0 4.0) (* ?x162 ?x162 ?x188 ?x188 ?x538)) (* (/ 1.0 16.0) (* ?x162 ?x162 ?x188 ?x188 ?x252 ?x252)) (* (/ 1.0 16.0) (* ?x162 ?x162 ?x162 ?x252 ?x252)) (* (/ 1.0 64.0) (* ?x162 ?x162 ?x252 ?x252 ?x252 ?x252)) (* (/ 1.0 16.0) (* ?x162 ?x162 ?x252 ?x252 ?x538)) (* (/ 1.0 4.0) (* ?x162 ?x162 ?x188 ?x252 ?x538)))))
 (let (($x485 (= (* ?x233 (+ ?x488 ?x428 ?x273 ?x351)) 0.0)))
 (let ((?x217 (+ ?x351 ?x488 ?x428 ?x273)))
 (let (($x145 (= ?x217 0.0)))
 (let (($x223 (>= ?x217 0.0)))
 (let ((?x474 (+ ?x497 (* (- 1.0) (to_real (* a00 d!1))))))
 (let (($x550 (<= ?x474 0.0)))
 (let (($x185 (= 0.0 ?x474)))
 (let ((@x114 (symm (commutativity (= $x185 (= ?x474 0.0))) (= (= ?x474 0.0) $x185))))
 (let (($x184 (= ?x474 0.0)))
 (let ((@x446 ((_ th-lemma arith) $x184)))
 (let ((@x400 ((_ th-lemma arith triangle-eq) (or (not $x185) $x550))))
 (let ((?x440 (+ ?x428 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x496 (>= ?x440 0.0)))
 (let (($x463 (= 0.0 ?x440)))
 (let ((@x498 (symm (commutativity (= $x463 (= ?x440 0.0))) (= (= ?x440 0.0) $x463))))
 (let ((@x515 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x463) $x496)) (mp ((_ th-lemma arith) (= ?x440 0.0)) @x498 $x463) $x496)))
 (let ((?x579 (* b!2 y!0)))
 (let ((?x577 (* (- 2) ?x579)))
 (let ((?x227 (* d!1 a!3)))
 (let ((?x509 (+ (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) ?x227 ?x577)))
 (let (($x456 (>= ?x509 0)))
 (let (($x291 (= 0 ?x509)))
 (let ((@x467 (symm (commutativity (= $x291 (= ?x509 0))) (= (= ?x509 0) $x291))))
 (let (($x201 (= ?x509 0)))
 (let (($x118 (not $x485)))
 (let (($x325 (or $x465 $x118)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x309 (= (+ ?x35 ?x104 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3))) 0)))
 (let (($x557 (and $x309 (= (+ (* b00 d!1) (* (- 1) (* d00 b!2))) 0) $x201 $x325)))
 (let ((?x582 (+ (* (/ 1.0 4.0) (* ?x538 ?x162 ?x162 ?x188 ?x188)) (* (/ 1.0 16.0) (* ?x252 ?x252 ?x162 ?x162 ?x188 ?x188)) ?x280 (* (/ 1.0 16.0) (* ?x252 ?x252 ?x538 ?x162 ?x162)) (* (/ 1.0 16.0) (* ?x252 ?x252 ?x162 ?x162 ?x162)) (* (/ 1.0 4.0) (* ?x252 ?x538 ?x162 ?x162 ?x188)) (* (/ 1.0 4.0) (* ?x252 ?x162 ?x162 ?x162 ?x188)) (* (/ 1.0 64.0) (* ?x252 ?x252 ?x252 ?x252 ?x162 ?x162)) (* (/ 1.0 16.0) (* ?x252 ?x252 ?x252 ?x162 ?x162 ?x188)))))
 (let (($x578 (= (* ?x582 (+ ?x351 ?x488 (* ?x162 ?x66) (* (- (/ 1.0 2.0)) (* ?x252 ?x69)))) 0.0)))
 (let ((?x520 (+ (* (/ 1.0 8.0) (* ?x252 ?x538 ?x538 ?x162 ?x162 ?x188 ?x188)) (* (- (/ 1.0 4.0)) (* ?x538 ?x162 ?x162 ?x162 ?x188 ?x188 ?x188)) (* (/ 1.0 4.0) (* ?x538 ?x162 ?x162 ?x162 ?x188 ?x188 ?x66)) (* (- (/ 1.0 8.0)) (* ?x252 ?x538 ?x162 ?x162 ?x188 ?x188 ?x69)) (* (/ 1.0 32.0) (* ?x252 ?x252 ?x252 ?x538 ?x162 ?x162 ?x188 ?x188)) (* (- (/ 1.0 16.0)) (* ?x252 ?x252 ?x162 ?x162 ?x162 ?x188 ?x188 ?x188)) (* (/ 1.0 16.0) (* ?x252 ?x252 ?x162 ?x162 ?x162 ?x188 ?x188 ?x66)) (* (- (/ 1.0 32.0)) (* ?x252 ?x252 ?x252 ?x162 ?x162 ?x188 ?x188 ?x69)))))
 (let ((?x442 (+ (* a!3 d!1) ?x577 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x180 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x104 (* 2 (* y!0 b00))) 0)))
 (let (($x235 (and $x180 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x442 0) (or (not (= ?x520 0.0)) (not $x578)))))
 (let (($x569 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x164 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x248 (+ ?x164 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x599 (+ (* (/ 1.0 4.0) (* (to_real a) ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 (to_real a) ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 (to_real a) ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)))))
 (let ((?x318 (* (- (/ 1.0 8.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x63 ?x63 (to_real a00)))))
 (let ((?x307 (* (/ 1.0 4.0) (* (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x286 (* (/ 1.0 8.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x363 (+ ?x286 (* (- (/ 1.0 4.0)) (* (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x307 ?x318 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 (to_real a00))))))
 (let (($x150 (not (= ?x363 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x171 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x176 (= ?x171 0)))
 (let (($x101 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (and $x136 $x101 $x176 (or $x150 (not (= (* ?x599 ?x248) 0.0))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x429 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x473 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x441 (* ?x66 ?x61)))
 (let ((?x317 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x441 ?x473)))
 (let ((?x63 (to_real y)))
 (let ((?x211 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real d)))
 (let ((?x166 (+ (* (/ 1.0 4.0) (* ?x61 ?x61 (+ (to_real a) ?x61) ?x211 ?x211)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x211 ?x211)))))
 (let ((?x164 (* (/ 1.0 2.0) (* ?x56 (to_real a)))))
 (let ((?x367 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x61 ?x61 (to_real a))) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x554 (not (= (* ?x367 (+ ?x164 (* (- 1.0) (* ?x63 ?x61)) ?x441 ?x473)) 0.0))))
 (let (($x295 (or $x554 (not (= (* ?x166 ?x317) 0.0)))))
 (let ((?x565 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x566 (= ?x565 0)))
 (let ((?x454 (* d00 a)))
 (let ((?x327 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x454)))
 (and (= ?x327 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x566 $x295)))))))))))))))))) :qid k!33))
 ))
 (let ((?x390 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x164 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x248 (+ ?x164 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x599 (+ (* (/ 1.0 4.0) (* (to_real a) ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 (to_real a) ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 (to_real a) ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)))))
 (let ((?x318 (* (- (/ 1.0 8.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x63 ?x63 (to_real a00)))))
 (let ((?x307 (* (/ 1.0 4.0) (* (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x286 (* (/ 1.0 8.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x363 (+ ?x286 (* (- (/ 1.0 4.0)) (* (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x307 ?x318 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 (to_real a00))))))
 (let (($x150 (not (= ?x363 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x171 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x176 (= ?x171 0)))
 (let (($x101 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (let (($x610 (and $x136 $x101 $x176 (or $x150 (not (= (* ?x599 ?x248) 0.0))))))
 (let ((?x473 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x441 (* ?x66 ?x61)))
 (let ((?x317 (+ (* (/ 1.0 2.0) (* ?x56 (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x441 ?x473)))
 (let ((?x211 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x166 (+ (* (/ 1.0 4.0) (* ?x61 ?x61 (+ (to_real a) ?x61) ?x211 ?x211)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x211 ?x211)))))
 (let ((?x367 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x61 ?x61 (to_real a))) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x554 (not (= (* ?x367 (+ ?x164 (* (- 1.0) (* ?x63 ?x61)) ?x441 ?x473)) 0.0))))
 (let (($x295 (or $x554 (not (= (* ?x166 ?x317) 0.0)))))
 (let ((?x565 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x566 (= ?x565 0)))
 (let ((?x454 (* d00 a)))
 (let (($x475 (= (+ (* 2 ?x103) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x454) 0)))
 (let (($x480 (and $x475 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x566 $x295)))
 (rewrite (= $x480 $x610)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x287 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x473 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x441 (* ?x66 ?x61)))
 (let ((?x317 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x441 ?x473)))
 (let ((?x63 (to_real y)))
 (let ((?x211 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real d)))
 (let ((?x166 (+ (* (/ 1.0 4.0) (* ?x61 ?x61 (+ (to_real a) ?x61) ?x211 ?x211)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x211 ?x211)))))
 (let ((?x164 (* (/ 1.0 2.0) (* ?x56 (to_real a)))))
 (let ((?x367 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x61 ?x61 (to_real a))) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x554 (not (= (* ?x367 (+ ?x164 (* (- 1.0) (* ?x63 ?x61)) ?x441 ?x473)) 0.0))))
 (let (($x295 (or $x554 (not (= (* ?x166 ?x317) 0.0)))))
 (let ((?x565 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x566 (= ?x565 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x251 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x251 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x566 $x295)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x483 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x473 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x441 (* ?x66 ?x61)))
 (let ((?x317 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x441 ?x473)))
 (let ((?x63 (to_real y)))
 (let ((?x211 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real d)))
 (let ((?x166 (+ (* (/ 1.0 4.0) (* ?x61 ?x61 (+ (to_real a) ?x61) ?x211 ?x211)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x211 ?x211)))))
 (let ((?x164 (* (/ 1.0 2.0) (* ?x56 (to_real a)))))
 (let ((?x367 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x61 ?x61 (to_real a))) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x554 (not (= (* ?x367 (+ ?x164 (* (- 1.0) (* ?x63 ?x61)) ?x441 ?x473)) 0.0))))
 (let (($x295 (or $x554 (not (= (* ?x166 ?x317) 0.0)))))
 (let ((?x565 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x566 (= ?x565 0)))
 (let ((?x454 (* d00 a)))
 (let ((?x327 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x454)))
 (let (($x480 (and (= ?x327 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x566 $x295)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x543 (and (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) ?x454)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x566 $x295)))
 (rewrite (= $x543 $x480)))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x76 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x82 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x89 (+ (* (to_real (+ a b)) ?x62 ?x62 ?x82 ?x82) (* ?x62 ?x62 ?x58 ?x58 ?x82 ?x82))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x86 (- (+ (- (* (to_real (+ a b)) ?x58) (* ?x57 ?x62 ?x82)) ?x67) ?x70)))
 (let ((?x74 (+ (* (to_real a) ?x62 ?x62 ?x63 ?x63) (* ?x62 ?x62 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x75 (* (- (+ (- (* (to_real a) ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x74)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x75 ?x76)) (not (= (* ?x86 ?x89) ?x76)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x571 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x473 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x441 (* ?x66 ?x61)))
 (let ((?x317 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x441 ?x473)))
 (let ((?x63 (to_real y)))
 (let ((?x211 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real d)))
 (let ((?x166 (+ (* (/ 1.0 4.0) (* ?x61 ?x61 (+ (to_real a) ?x61) ?x211 ?x211)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x211 ?x211)))))
 (let ((?x164 (* (/ 1.0 2.0) (* ?x56 (to_real a)))))
 (let ((?x367 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x61 ?x61 (to_real a))) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x554 (not (= (* ?x367 (+ ?x164 (* (- 1.0) (* ?x63 ?x61)) ?x441 ?x473)) 0.0))))
 (let (($x295 (or $x554 (not (= (* ?x166 ?x317) 0.0)))))
 (let ((?x565 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x566 (= ?x565 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x251 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x543 (and $x251 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x566 $x295)))
 (let ((?x76 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x82 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x89 (+ (* (to_real (+ a b)) ?x62 ?x62 ?x82 ?x82) (* ?x62 ?x62 ?x58 ?x58 ?x82 ?x82))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x86 (- (+ (- (* (to_real (+ a b)) ?x58) (* ?x57 ?x62 ?x82)) ?x67) ?x70)))
 (let ((?x74 (+ (* (to_real a) ?x62 ?x62 ?x63 ?x63) (* ?x62 ?x62 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x75 (* (- (+ (- (* (to_real a) ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x74)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x94 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x75 ?x76)) (not (= (* ?x86 ?x89) ?x76))))))
 (rewrite (= $x94 $x543))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x561 (mp (mp @x96 (quant-intro (proof-bind ?x571) (= $x95 $x287)) $x287) (rewrite (= $x287 $x287)) $x287)))
 (let ((@x518 (mp (mp @x561 (quant-intro (proof-bind ?x483) (= $x287 $x429)) $x429) (quant-intro (proof-bind ?x390) (= $x429 $x569)) $x569)))
 (let ((@x261 (mp (mp~ @x518 (sk (~ $x569 $x235)) $x235) (rewrite (= $x235 $x557)) $x557)))
 (let ((@x212 (mp (and-elim @x261 $x201) @x467 $x291)))
 (let ((@x249 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x291) $x456)) @x212 $x456)))
 (let ((?x460 (+ ?x353 (* (- 1.0) (to_real ?x579)))))
 (let (($x288 (<= ?x460 0.0)))
 (let (($x237 (= 0.0 ?x460)))
 (let ((@x316 (symm (commutativity (= $x237 (= ?x460 0.0))) (= (= ?x460 0.0) $x237))))
 (let ((@x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x237) $x288)) (mp ((_ th-lemma arith) (= ?x460 0.0)) @x316 $x237) $x288)))
 (let ((?x375 (+ ?x592 (* (- 1.0) (to_real ?x227)))))
 (let (($x387 (>= ?x375 0.0)))
 (let (($x544 (= 0.0 ?x375)))
 (let ((@x521 (symm (commutativity (= $x544 (= ?x375 0.0))) (= (= ?x375 0.0) $x544))))
 (let ((@x597 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x544) $x387)) (mp ((_ th-lemma arith) (= ?x375 0.0)) @x521 $x544) $x387)))
 (let ((@x598 ((_ th-lemma arith) @x597 @x306 @x249 @x515 (hypothesis (not $x223)) (unit-resolution @x400 (mp @x446 @x114 $x185) $x550) false)))
 (let (($x222 (<= ?x217 0.0)))
 (let ((@x494 (unit-resolution (hypothesis (not $x185)) (symm (hypothesis $x184) $x185) false)))
 (let ((@x435 (unit-resolution (lemma @x494 (or (not $x184) $x185)) (lemma (unit-resolution @x446 (hypothesis (not $x184)) false) $x184) $x185)))
 (let (($x183 (>= ?x474 0.0)))
 (let ((@x399 (hypothesis $x185)))
 (let (($x300 (<= ?x509 0)))
 (let ((@x376 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x291) $x300)) @x212 $x300)))
 (let ((@x405 (unit-resolution ((_ th-lemma arith) (or (not $x300) (not $x456) $x222 (not $x183) (not $x550))) @x376 @x249 (hypothesis (not $x222)) (unit-resolution @x400 @x399 $x550) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x185) $x183)) @x399 $x183) false)))
 (let ((@x160 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x145 (not $x222) (not $x223))) (unit-resolution (lemma @x405 (or (not $x185) $x222)) @x435 $x222) (lemma @x598 $x223) $x145)))
 (let (($x418 (or (not $x145) $x485)))
 (let ((@x499 (unit-resolution ((_ th-lemma arith) $x418) (hypothesis $x118) (hypothesis $x145) false)))
 (let ((@x656 (unit-resolution (and-elim @x261 $x325) (unit-resolution (lemma @x499 $x418) @x160 $x485) $x465)))
 (let (($x199 (<= ?x213 0.0)))
 (let ((@x284 (unit-resolution ((_ th-lemma arith) (or $x199 (not $x456) (not $x300))) @x376 @x249 (hypothesis (not $x199)) false)))
 (let ((@x660 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x231 (not $x199) $x657)) (lemma @x284 $x199) @x656 $x657)))
 (unit-resolution ((_ th-lemma arith) (or $x234 (not $x456) (not $x300))) @x376 @x249 @x660 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       52
 :arith-eq-adapter                36
 :arith-bound-propagations-cheap  29
 :arith-bound-propagations-lp     4
 :arith-conflicts                 55
 :arith-diseq                     30
 :arith-gcd-calls                 5
 :arith-grobner-calls             6
 :arith-grobner-conflicts         3
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 13
 :arith-lower                     72
 :arith-make-feasible             57
 :arith-max-columns               75
 :arith-max-rows                  21
 :arith-nla-explanations          109
 :arith-nla-lemmas                53
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              29
 :arith-upper                     45
 :conflicts                       10
 :decisions                       46
 :del-clause                      106
 :final-checks                    42
 :max-memory                      4.31
 :memory                          3.09
 :mk-bool-var                     165
 :mk-clause                       168
 :num-allocs                      2931825
 :num-checks                      1
 :propagations                    75
 :rlimit-count                    5518
 :time                            0.02
 :total-time                      0.03)
