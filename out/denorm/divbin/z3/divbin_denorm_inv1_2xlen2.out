unsat
((set-logic NRA)
(declare-fun x!4 () Real)
(declare-fun r!5 () Real)
(declare-fun b!6 () Real)
(proof
(let ((?x365 (* (/ 1.0 16.0) (* b!6 b!6 b!6 b!6 r!5 r!5 r!5 r!5 r!5 r!5))))
 (let ((?x409 (* b!6 b!6 b!6 b!6 b!6 r!5 r!5 r!5 r!5 r!5 x!4)))
 (let ((?x271 (* (- 1.0) (* b!6 b!6 b!6 r!5 r!5 r!5 r!5 x!4 x!4 x!4))))
 (let ((?x385 (* b00 x00 b!6 b!6 b!6 b!6 r!5 r!5 r!5 r!5 r!5)))
 (let ((?x231 (* (- 8.0) (* b00 x00 b!6 r!5 r!5 r!5 x!4 x!4 x!4 x!4))))
 (let ((?x397 (* (- (/ 1.0 16.0)) (* r00 b!6 b!6 b!6 b!6 r!5 r!5 r!5 r!5 r!5))))
 (let ((?x232 (* (- (/ 1.0 2.0)) (* b!6 b!6 b!6 r!5 r!5 r!5 r!5 r!5 x!4 x!4))))
 (let ((?x498 (* (/ 1.0 2.0) (* b00 x00 b!6 b!6 r!5 r!5 r!5 r!5 r!5 x!4))))
 (let ((?x484 (* 8.0 (* b!6 b!6 r!5 r!5 r!5 x!4 x!4 x!4 x!4 x!4))))
 (let ((?x99 (* b!6 b!6 b!6 b!6 r!5 r!5 r!5 x!4 x!4 x!4 x!4)))
 (let ((?x83 (* b00 x00 b!6 b!6 b!6 r!5 r!5 r!5 x!4 x!4 x!4)))
 (let ((?x496 (+ ?x83 (* (- 1.0) ?x99) (* (- (/ 1.0 2.0)) (* b!6 b!6 r!5 r!5 r!5 r!5 r!5 r!5 x!4)) ?x484 ?x498 (* r00 b!6 b!6 b!6 r!5 r!5 r!5 x!4 x!4 x!4) ?x232 (* (- 8.0) (* r00 b!6 r!5 r!5 r!5 x!4 x!4 x!4 x!4)) ?x397 ?x231 (* (- (/ 1.0 16.0)) ?x385) ?x271 (* (/ 1.0 16.0) ?x409) (* (/ 1.0 2.0) (* r00 b!6 b!6 r!5 r!5 r!5 r!5 r!5 x!4)) ?x365 (* 8.0 (* b!6 r!5 r!5 r!5 r!5 x!4 x!4 x!4 x!4)))))
 (let (($x405 (>= ?x496 0.0)))
 (let (($x213 (not $x405)))
 (let (($x404 (= 0.0 ?x496)))
 (let (($x697 (not $x404)))
 (let ((@x742 (symm (commutativity (= $x404 (= ?x496 0.0))) (= (= ?x496 0.0) $x404))))
 (let (($x501 (= ?x496 0.0)))
 (let (($x383 (not $x501)))
 (let ((?x514 (* b!6 x!4)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x91 (* (- 1.0) r00)))
 (let ((?x106 (* (- (/ 1.0 64.0)) (* b!6 b!6 b!6 b!6 b!6 b!6))))
 (let ((?x164 (* (/ 1.0 16.0) (* b!6 b!6 b!6 b!6))))
 (let ((?x472 (+ ?x164 (* (- (/ 3.0 4.0)) (* b!6 b!6 b!6 r!5 x!4)) (* (/ 3.0 4.0) (* b!6 b!6 r!5 r!5)) (* (/ 1.0 8.0) (* b!6 b!6 b!6 r!5 r!5 r!5)) ?x106 (* (/ 3.0 32.0) (* b!6 b!6 b!6 b!6 b!6 r!5)) (* (- 1.0) (* b!6 r!5 r!5 r!5 x!4)) (* (- (/ 3.0 8.0)) (* b!6 b!6 b!6 r!5)) (* (- (/ 3.0 16.0)) (* b!6 b!6 b!6 b!6 r!5 r!5)) (* (/ 3.0 2.0) (* b!6 b!6 r!5 r!5 x!4)) (* (/ 1.0 8.0) (* b!6 b!6 b!6 b!6 x!4)) (* (- (/ 1.0 2.0)) (* b!6 r!5 r!5 r!5)))))
 (let ((?x233 (* 6.0 x!4)))
 (let ((?x379 (* 8.0 (* x!4 x!4 x!4))))
 (let ((?x264 (* 12.0 (* x!4 x!4))))
 (let ((?x194 (* (- (/ 1.0 8.0)) (* b!6 b!6 b!6))))
 (let ((?x97 (+ 1.0 ?x194 ?x264 ?x379 (* (/ 1.0 2.0) (* b!6 b!6 r!5)) (* (- (/ 1.0 2.0)) (* b!6 r!5 r!5)) ?x233)))
 (let (($x373 (= (* ?x97 ?x472 (+ ?x91 ?x75 ?x514 r!5)) 0.0)))
 (let ((?x430 (+ ?x514 r!5 ?x91 ?x75)))
 (let (($x443 (= ?x430 0.0)))
 (let ((?x437 (+ r00 ?x74 (* (- 1.0) ?x514) (* (- 1.0) r!5))))
 (let (($x442 (= ?x437 0.0)))
 (let (($x534 (not $x373)))
 (let (($x228 (or $x383 $x534)))
 (let (($x597 (and $x442 $x228)))
 (let ((?x495 (+ r!5 ?x91 ?x75 (* x!4 b!6))))
 (let ((?x507 (+ (* (/ 1.0 8.0) (* r!5 r!5 r!5 b!6 b!6 b!6)) (* (- 1.0) (* x!4 r!5 r!5 r!5 b!6)) (* (- (/ 3.0 16.0)) (* r!5 r!5 b!6 b!6 b!6 b!6)) (* (/ 3.0 32.0) (* r!5 b!6 b!6 b!6 b!6 b!6)) ?x106 (* (- (/ 1.0 2.0)) (* r!5 r!5 r!5 b!6)) (* (/ 3.0 4.0) (* r!5 r!5 b!6 b!6)) (* (- (/ 3.0 8.0)) (* r!5 b!6 b!6 b!6)) ?x164 (* (/ 3.0 2.0) (* x!4 r!5 r!5 b!6 b!6)) (* (- (/ 3.0 4.0)) (* x!4 r!5 b!6 b!6 b!6)) (* (/ 1.0 8.0) (* x!4 b!6 b!6 b!6 b!6)))))
 (let ((?x334 (+ 1.0 ?x233 (* (- (/ 1.0 2.0)) (* r!5 r!5 b!6)) ?x379 ?x194 (* (/ 1.0 2.0) (* r!5 b!6 b!6)) ?x264)))
 (let ((?x287 (* 8.0 (* x!4 x!4 x!4 x!4 x!4 r!5 r!5 r!5 b!6 b!6))))
 (let ((?x182 (* (- 8.0) (* x!4 x!4 x!4 x!4 r!5 r!5 r!5 b!6 b00 x00))))
 (let ((?x478 (* (- (/ 1.0 2.0)) (* x!4 x!4 r!5 r!5 r!5 r!5 r!5 b!6 b!6 b!6))))
 (let ((?x479 (* (/ 1.0 2.0) (* x!4 r!5 r!5 r!5 r!5 r!5 b!6 b!6 b00 x00))))
 (let ((?x528 (* x!4 x!4 x!4 x!4 r!5 r!5 r!5 b!6 b!6 b!6 b!6)))
 (let ((?x466 (* x!4 x!4 x!4 r!5 r!5 r!5 b!6 b!6 b!6 b00 x00)))
 (let ((?x489 (* (- 1.0) (* x!4 x!4 x!4 r!5 r!5 r!5 r!5 b!6 b!6 b!6))))
 (let ((?x279 (* x!4 r!5 r!5 r!5 r!5 r!5 b!6 b!6 b!6 b!6 b!6)))
 (let ((?x92 (* r!5 r!5 r!5 r!5 r!5 b!6 b!6 b!6 b!6 b00 x00)))
 (let ((?x190 (* (- (/ 1.0 16.0)) (* r!5 r!5 r!5 r!5 r!5 b!6 b!6 b!6 b!6 r00))))
 (let ((?x744 (* (/ 1.0 16.0) (* r!5 r!5 r!5 r!5 r!5 r!5 b!6 b!6 b!6 b!6))))
 (let ((?x319 (+ ?x744 ?x190 (* (- (/ 1.0 16.0)) ?x92) (* (/ 1.0 16.0) ?x279) ?x489 (* x!4 x!4 x!4 r!5 r!5 r!5 b!6 b!6 b!6 r00) ?x466 (* (- 1.0) ?x528) (* (- (/ 1.0 2.0)) (* x!4 r!5 r!5 r!5 r!5 r!5 r!5 b!6 b!6)) (* (/ 1.0 2.0) (* x!4 r!5 r!5 r!5 r!5 r!5 b!6 b!6 r00)) ?x479 ?x478 (* 8.0 (* x!4 x!4 x!4 x!4 r!5 r!5 r!5 r!5 b!6)) (* (- 8.0) (* x!4 x!4 x!4 x!4 r!5 r!5 r!5 b!6 r00)) ?x182 ?x287)))
 (let (($x124 (and (= ?x495 0.0) (or (not (= ?x319 0.0)) (not (= (* ?x334 ?x507 ?x495) 0.0))))))
 (let (($x206 (exists ((b Real) (r Real) (x Real) )(! (let ((?x102 (* x b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x91 (* (- 1.0) r00)))
 (let ((?x108 (+ r ?x91 ?x75 ?x102)))
 (let ((?x174 (* (- 1.0) (* x r r r b))))
 (let ((?x155 (* (/ 1.0 8.0) (* r r r b b b))))
 (let ((?x796 (+ ?x155 ?x174 (* (- (/ 3.0 16.0)) (* r r b b b b)) (* (/ 3.0 32.0) (* r b b b b b)) (* (- (/ 1.0 64.0)) (* b b b b b b)) (* (- (/ 1.0 2.0)) (* r r r b)) (* (/ 3.0 4.0) (* r r b b)) (* (- (/ 3.0 8.0)) (* r b b b)) (* (/ 1.0 16.0) (* b b b b)) (* (/ 3.0 2.0) (* x r r b b)) (* (- (/ 3.0 4.0)) (* x r b b b)) (* (/ 1.0 8.0) (* x b b b b)))))
 (let ((?x147 (* 8.0 (* x x x))))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* r r b))))
 (let ((?x452 (+ 1.0 (* 6.0 x) ?x142 ?x147 (* (- (/ 1.0 8.0)) (* b b b)) (* (/ 1.0 2.0) (* r b b)) (* 12.0 (* x x)))))
 (let ((?x338 (* (- 1.0) (* x x x x r r r b b b b))))
 (let ((?x335 (* (/ 1.0 16.0) (* x r r r r r b b b b b))))
 (let ((?x349 (* (- (/ 1.0 16.0)) (* r r r r r b b b b b00 x00))))
 (let ((?x318 (+ (* (/ 1.0 16.0) (* r r r r r r b b b b)) (* (- (/ 1.0 16.0)) (* r r r r r b b b b r00)) ?x349 ?x335 (* (- 1.0) (* x x x r r r r b b b)) (* x x x r r r b b b r00) (* x x x r r r b b b b00 x00) ?x338 (* (- (/ 1.0 2.0)) (* x r r r r r r b b)) (* (/ 1.0 2.0) (* x r r r r r b b r00)) (* (/ 1.0 2.0) (* x r r r r r b b b00 x00)) (* (- (/ 1.0 2.0)) (* x x r r r r r b b b)) (* 8.0 (* x x x x r r r r b)) (* (- 8.0) (* x x x x r r r b r00)) (* (- 8.0) (* x x x x r r r b b00 x00)) (* 8.0 (* x x x x x r r r b b)))))
 (let (($x295 (not (= ?x318 0.0))))
 (let (($x113 (= ?x108 0.0)))
 (and $x113 (or $x295 (not (= (* ?x452 ?x796 ?x108) 0.0))))))))))))))))))))) :qid k!28))
 ))
 (let (($x752 (exists ((b Real) (r Real) (x Real) )(! (let ((?x91 (* (- 1.0) r00)))
 (let ((?x122 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x704 (+ ?x75 r ?x122 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x659 (+ r ?x122)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x688 (+ 1.0 ?x51)))
 (let ((?x633 (+ (* (/ 1.0 8.0) (* ?x659 ?x659 ?x659 b b b)) (* (- (/ 1.0 2.0)) (* ?x688 ?x659 ?x659 ?x659 b)))))
 (let (($x634 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x659 ?x659 b)) (* ?x688 ?x688 ?x688)) ?x633 ?x704) 0.0)))
 (let ((?x102 (* x b)))
 (let ((?x646 (+ ?x75 r ?x91 ?x102)))
 (let ((?x174 (* (- 1.0) (* x r r r b))))
 (let ((?x155 (* (/ 1.0 8.0) (* r r r b b b))))
 (let ((?x696 (* (+ (* (- (/ 1.0 2.0)) (* r r b)) (* 8.0 (* x x x))) (+ ?x155 ?x174) ?x646)))
 (and (= ?x646 0.0) (or (not (= ?x696 0.0)) (not $x634)))))))))))))))))) :qid k!28))
 ))
 (let ((?x341 (lambda ((b Real) (r Real) (x Real) )(let ((?x102 (* x b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x91 (* (- 1.0) r00)))
 (let ((?x108 (+ r ?x91 ?x75 ?x102)))
 (let ((?x174 (* (- 1.0) (* x r r r b))))
 (let ((?x155 (* (/ 1.0 8.0) (* r r r b b b))))
 (let ((?x796 (+ ?x155 ?x174 (* (- (/ 3.0 16.0)) (* r r b b b b)) (* (/ 3.0 32.0) (* r b b b b b)) (* (- (/ 1.0 64.0)) (* b b b b b b)) (* (- (/ 1.0 2.0)) (* r r r b)) (* (/ 3.0 4.0) (* r r b b)) (* (- (/ 3.0 8.0)) (* r b b b)) (* (/ 1.0 16.0) (* b b b b)) (* (/ 3.0 2.0) (* x r r b b)) (* (- (/ 3.0 4.0)) (* x r b b b)) (* (/ 1.0 8.0) (* x b b b b)))))
 (let ((?x147 (* 8.0 (* x x x))))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* r r b))))
 (let ((?x452 (+ 1.0 (* 6.0 x) ?x142 ?x147 (* (- (/ 1.0 8.0)) (* b b b)) (* (/ 1.0 2.0) (* r b b)) (* 12.0 (* x x)))))
 (let ((?x338 (* (- 1.0) (* x x x x r r r b b b b))))
 (let ((?x335 (* (/ 1.0 16.0) (* x r r r r r b b b b b))))
 (let ((?x349 (* (- (/ 1.0 16.0)) (* r r r r r b b b b b00 x00))))
 (let ((?x318 (+ (* (/ 1.0 16.0) (* r r r r r r b b b b)) (* (- (/ 1.0 16.0)) (* r r r r r b b b b r00)) ?x349 ?x335 (* (- 1.0) (* x x x r r r r b b b)) (* x x x r r r b b b r00) (* x x x r r r b b b b00 x00) ?x338 (* (- (/ 1.0 2.0)) (* x r r r r r r b b)) (* (/ 1.0 2.0) (* x r r r r r b b r00)) (* (/ 1.0 2.0) (* x r r r r r b b b00 x00)) (* (- (/ 1.0 2.0)) (* x x r r r r r b b b)) (* 8.0 (* x x x x r r r r b)) (* (- 8.0) (* x x x x r r r b r00)) (* (- 8.0) (* x x x x r r r b b00 x00)) (* 8.0 (* x x x x x r r r b b)))))
 (let (($x295 (not (= ?x318 0.0))))
 (let (($x113 (= ?x108 0.0)))
 (let (($x96 (and $x113 (or $x295 (not (= (* ?x452 ?x796 ?x108) 0.0))))))
 (let ((?x122 (* (- (/ 1.0 2.0)) b)))
 (let ((?x704 (+ ?x75 r ?x122 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x659 (+ r ?x122)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x688 (+ 1.0 ?x51)))
 (let ((?x633 (+ (* (/ 1.0 8.0) (* ?x659 ?x659 ?x659 b b b)) (* (- (/ 1.0 2.0)) (* ?x688 ?x659 ?x659 ?x659 b)))))
 (let (($x634 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x659 ?x659 b)) (* ?x688 ?x688 ?x688)) ?x633 ?x704) 0.0)))
 (let (($x650 (not (= (* (+ ?x142 ?x147) (+ ?x155 ?x174) (+ ?x75 r ?x91 ?x102)) 0.0))))
 (let (($x583 (and (= (+ ?x75 r ?x91 ?x102) 0.0) (or $x650 (not $x634)))))
 (rewrite (= $x583 $x96))))))))))))))))))))))))))))))
 ))
 (let (($x66 (exists ((b Real) (r Real) (x Real) )(! (let ((?x51 (* 2.0 x)))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ (* (- 1.0) ?x36 ?x48 ?x48) (* ?x52 ?x52 ?x52)) (- (* ?x36 ?x36 ?x36 ?x48 ?x48 ?x48) (* ?x36 ?x48 ?x48 ?x48 ?x52)))))
 (let ((?x44 (- (* ?x36 ?x36 ?x36 r r r) (* ?x36 r r r 2.0 x))))
 (let ((?x41 (+ (* (- 1.0) ?x36 r r) (* 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x64 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41 ?x44) 0.0)) (not (= ?x61 0.0)))))
 (and (= (+ ?x30 (* b x)) 0.0) $x64)))))))))) :qid k!28))
 ))
 (let ((?x666 (lambda ((b Real) (r Real) (x Real) )(let ((?x91 (* (- 1.0) r00)))
 (let ((?x122 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x704 (+ ?x75 r ?x122 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x659 (+ r ?x122)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x688 (+ 1.0 ?x51)))
 (let ((?x633 (+ (* (/ 1.0 8.0) (* ?x659 ?x659 ?x659 b b b)) (* (- (/ 1.0 2.0)) (* ?x688 ?x659 ?x659 ?x659 b)))))
 (let (($x634 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x659 ?x659 b)) (* ?x688 ?x688 ?x688)) ?x633 ?x704) 0.0)))
 (let ((?x102 (* x b)))
 (let ((?x646 (+ ?x75 r ?x91 ?x102)))
 (let ((?x174 (* (- 1.0) (* x r r r b))))
 (let ((?x155 (* (/ 1.0 8.0) (* r r r b b b))))
 (let ((?x696 (* (+ (* (- (/ 1.0 2.0)) (* r r b)) (* 8.0 (* x x x))) (+ ?x155 ?x174) ?x646)))
 (let (($x583 (and (= ?x646 0.0) (or (not (= ?x696 0.0)) (not $x634)))))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ (* (- 1.0) ?x36 ?x48 ?x48) (* ?x52 ?x52 ?x52)) (- (* ?x36 ?x36 ?x36 ?x48 ?x48 ?x48) (* ?x36 ?x48 ?x48 ?x48 ?x52)))))
 (let ((?x44 (- (* ?x36 ?x36 ?x36 r r r) (* ?x36 r r r 2.0 x))))
 (let ((?x41 (+ (* (- 1.0) ?x36 r r) (* 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x64 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41 ?x44) 0.0)) (not (= ?x61 0.0)))))
 (let (($x65 (and (= (+ ?x30 (* b x)) 0.0) $x64)))
 (rewrite (= $x65 $x583))))))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x771 (mp (mp @x67 (quant-intro (proof-bind ?x666) (= $x66 $x752)) $x752) (quant-intro (proof-bind ?x341) (= $x752 $x206)) $x206)))
 (let ((@x226 (mp (mp~ @x771 (sk (~ $x206 $x124)) $x124) (rewrite (= $x124 $x597)) $x597)))
 (let ((@x494 (and-elim @x226 $x442)))
 (let (($x416 (<= ?x437 0.0)))
 (let (($x403 (= 0.0 ?x437)))
 (let ((@x515 (mp @x494 (symm (commutativity (= $x403 $x442)) (= $x442 $x403)) $x403)))
 (let ((@x218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x403) $x416)) @x515 $x416)))
 (let (($x417 (>= ?x437 0.0)))
 (let ((@x522 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x403) $x417)) @x515 $x417)))
 (let (($x445 (<= ?x430 0.0)))
 (let (($x384 (>= ?x430 0.0)))
 (let ((@x432 ((_ th-lemma arith) (lemma ((_ th-lemma arith) @x218 (hypothesis (not $x384)) false) $x384) (lemma ((_ th-lemma arith) (hypothesis (not $x445)) @x522 false) $x445) @x522 @x218 (= ?x430 ?x437))))
 (let (($x541 (or (not $x443) $x373)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith) $x541) (hypothesis $x534) (hypothesis $x443) false)))
 (let ((@x542 (unit-resolution (and-elim @x226 $x228) (unit-resolution (lemma @x274 $x541) (trans* @x432 @x494 $x443) $x373) $x383)))
 (let (($x418 (<= ?x496 0.0)))
 (let ((@x350 (unit-resolution ((_ th-lemma arith) (or (not $x416) (not $x417) $x418)) @x218 @x522 (hypothesis (not $x418)) false)))
 (let ((@x623 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x404 (not $x418) $x213)) (lemma @x350 $x418) (mp @x542 (monotonicity @x742 (= $x383 $x697)) $x697) $x213)))
 (unit-resolution ((_ th-lemma arith) (or (not $x416) (not $x417) $x405)) @x218 @x522 @x623 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       15
 :arith-eq-adapter                13
 :arith-bound-propagations-cheap  13
 :arith-conflicts                 20
 :arith-diseq                     24
 :arith-fixed-eqs                 1
 :arith-grobner-calls             2
 :arith-grobner-conflicts         2
 :arith-horner-calls              2
 :arith-horner-cross-nested-forms 4
 :arith-lower                     22
 :arith-make-feasible             19
 :arith-max-columns               52
 :arith-max-rows                  6
 :arith-nla-explanations          7
 :arith-nla-lemmas                18
 :arith-propagations              13
 :arith-upper                     13
 :conflicts                       7
 :decisions                       24
 :del-clause                      11
 :final-checks                    14
 :max-memory                      1.98
 :memory                          1.10
 :mk-bool-var                     58
 :mk-clause                       56
 :num-allocs                      1889161
 :num-checks                      1
 :propagations                    32
 :rlimit-count                    4423
 :time                            0.02
 :total-time                      0.02)
