unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x366 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x214 (>= ?x366 0)))
 (let (($x387 (= ?x366 0)))
 (let ((?x277 (* (- 4) (* y!0 y!0))))
 (let ((?x276 (* x!1 y!0 y!0 y!0)))
 (let ((?x135 (* (- 1) (* x!1 x!1 y!0))))
 (let ((?x310 (+ 1 x!1)))
 (let ((?x170 (+ (- 1) y!0)))
 (let ((?x241 (* ?x170 ?x170 ?x170 ?x310 ?x310 ?x310)))
 (let ((?x225 (* x!1 y!0)))
 (let ((?x202 (* 4 y!0)))
 (let ((?x143 (* y!0 y!0 y!0)))
 (let ((?x140 (* x!1 y!0 y!0)))
 (let ((?x473 (* (- 3) ?x140)))
 (let ((?x73 (* x!1 x!1)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x369 (+ ?x69 ?x76 x!1 y!0)))
 (let ((?x116 (* ?x369 (+ (- 1) ?x73 ?x473 ?x143 x!1 ?x202 ?x225 ?x241 ?x135 ?x276 ?x277))))
 (let (($x429 (= ?x116 0)))
 (let (($x425 (not $x429)))
 (let ((?x216 (+ 1 y!0)))
 (let ((?x308 (+ (- 1) x!1)))
 (let ((?x379 (* ?x308 ?x308 ?x308 ?x216 ?x216 ?x216)))
 (let ((?x161 (* 5 ?x225)))
 (let ((?x142 (* (- 6) y!0)))
 (let ((?x71 (* 3 x!1)))
 (let ((?x433 (* (- 1) ?x143)))
 (let ((?x163 (* 3 ?x140)))
 (let ((?x439 (* (- 1) ?x73)))
 (let ((?x151 (* ?x369 (+ (- 3) ?x439 ?x163 ?x433 ?x71 ?x142 ?x161 ?x135 ?x276 ?x379 ?x277))))
 (let (($x134 (= ?x151 0)))
 (let (($x275 (or (not $x134) $x425)))
 (let (($x388 (and $x387 $x275)))
 (let ((?x162 (+ x!1 y!0 ?x69 ?x76)))
 (let ((?x495 (* ?x162 (+ (- 3) ?x71 ?x142 ?x379 ?x439 ?x135 ?x161 ?x277 ?x433 ?x276 ?x163))))
 (let ((?x477 (* ?x162 (+ (- 1) x!1 ?x202 ?x73 ?x241 ?x135 ?x225 ?x277 ?x143 ?x276 ?x473))))
 (let (($x376 (and (= ?x162 0) (or (not (= ?x477 0)) (not (= ?x495 0))))))
 (let (($x447 (exists ((x Int) (y Int) )(! (let ((?x320 (* x y y)))
 (let ((?x336 (* 3 ?x320)))
 (let ((?x306 (* x y y y)))
 (let ((?x304 (* y y y)))
 (let ((?x305 (* (- 1) ?x304)))
 (let ((?x260 (* y y)))
 (let ((?x511 (* (- 4) ?x260)))
 (let ((?x239 (* x y)))
 (let ((?x351 (* 5 ?x239)))
 (let ((?x302 (* (- 1) (* x x y))))
 (let ((?x227 (* x x)))
 (let ((?x301 (* (- 1) ?x227)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x132 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x347 (* 3 x)))
 (let ((?x139 (+ (- 3) ?x347 (* (- 6) y) ?x132 ?x301 ?x302 ?x351 ?x511 ?x305 ?x306 ?x336)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x499 (* (- 3) ?x320)))
 (let ((?x248 (+ 1 x)))
 (let ((?x180 (+ (- 1) y)))
 (let ((?x229 (* ?x180 ?x180 ?x180 ?x248 ?x248 ?x248)))
 (let ((?x404 (+ (- 1) x (* 4 y) ?x227 ?x229 ?x302 ?x239 ?x511 ?x304 ?x306 ?x499)))
 (let (($x95 (= ?x90 0)))
 (and $x95 (or (not (= (* ?x90 ?x404) 0)) (not (= (* ?x90 ?x139) 0)))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x389 (exists ((x Int) (y Int) )(! (let ((?x320 (* x y y)))
 (let ((?x336 (* 3 ?x320)))
 (let ((?x306 (* x y y y)))
 (let ((?x304 (* y y y)))
 (let ((?x305 (* (- 1) ?x304)))
 (let ((?x239 (* x y)))
 (let ((?x351 (* 5 ?x239)))
 (let ((?x302 (* (- 1) (* x x y))))
 (let ((?x227 (* x x)))
 (let ((?x301 (* (- 1) ?x227)))
 (let ((?x192 (* (- 1) (* y y 1))))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x132 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x347 (* 3 x)))
 (let ((?x353 (+ (- 3) ?x347 (* (- 4) y) ?x132 (* (- 1) (* y 1 1)) ?x192 (* (- 1) (* y 1 y)) ?x301 ?x302 ?x351 (* (- 2) (* y y)) (* (- 1) (* y 1)) ?x305 ?x306 ?x336)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let (($x359 (not (= (* ?x90 ?x353) 0))))
 (let ((?x499 (* (- 3) ?x320)))
 (let ((?x248 (+ 1 x)))
 (let ((?x180 (+ (- 1) y)))
 (let ((?x229 (* ?x180 ?x180 ?x180 ?x248 ?x248 ?x248)))
 (let ((?x510 (* 3 y)))
 (let ((?x482 (+ (- 1) x ?x510 (* (- 1) (* y (- 1) 1)) ?x192 ?x227 ?x229 ?x302 (* (- 1) (* y (- 1) x)) (* (- 3) (* y y)) ?x304 ?x306 ?x499)))
 (let (($x95 (= ?x90 0)))
 (and $x95 (or (not (= (* ?x90 ?x482) 0)) $x359))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x204 (lambda ((x Int) (y Int) )(let ((?x320 (* x y y)))
 (let ((?x336 (* 3 ?x320)))
 (let ((?x306 (* x y y y)))
 (let ((?x304 (* y y y)))
 (let ((?x305 (* (- 1) ?x304)))
 (let ((?x260 (* y y)))
 (let ((?x511 (* (- 4) ?x260)))
 (let ((?x239 (* x y)))
 (let ((?x351 (* 5 ?x239)))
 (let ((?x302 (* (- 1) (* x x y))))
 (let ((?x227 (* x x)))
 (let ((?x301 (* (- 1) ?x227)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x132 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x347 (* 3 x)))
 (let ((?x139 (+ (- 3) ?x347 (* (- 6) y) ?x132 ?x301 ?x302 ?x351 ?x511 ?x305 ?x306 ?x336)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x499 (* (- 3) ?x320)))
 (let ((?x248 (+ 1 x)))
 (let ((?x180 (+ (- 1) y)))
 (let ((?x229 (* ?x180 ?x180 ?x180 ?x248 ?x248 ?x248)))
 (let ((?x404 (+ (- 1) x (* 4 y) ?x227 ?x229 ?x302 ?x239 ?x511 ?x304 ?x306 ?x499)))
 (let (($x95 (= ?x90 0)))
 (let (($x105 (and $x95 (or (not (= (* ?x90 ?x404) 0)) (not (= (* ?x90 ?x139) 0))))))
 (let ((?x192 (* (- 1) (* y y 1))))
 (let ((?x353 (+ (- 3) ?x347 (* (- 4) y) ?x132 (* (- 1) (* y 1 1)) ?x192 (* (- 1) (* y 1 y)) ?x301 ?x302 ?x351 (* (- 2) ?x260) (* (- 1) (* y 1)) ?x305 ?x306 ?x336)))
 (let (($x359 (not (= (* ?x90 ?x353) 0))))
 (let ((?x510 (* 3 y)))
 (let ((?x482 (+ (- 1) x ?x510 (* (- 1) (* y (- 1) 1)) ?x192 ?x227 ?x229 ?x302 (* (- 1) (* y (- 1) x)) (* (- 3) ?x260) ?x304 ?x306 ?x499)))
 (let (($x121 (and $x95 (or (not (= (* ?x90 ?x482) 0)) $x359))))
 (rewrite (= $x121 $x105))))))))))))))))))))))))))))))))))))
 ))
 (let (($x114 (exists ((x Int) (y Int) )(! (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x132 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x88 (+ ?x132 (* (- 1) (* ?x85 ?x85 ?x129)) (* (- 1) (* ?x129 ?x129)) (* ?x85 ?x129 ?x129 ?x129))))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x141 (+ x ?x69 ?x76 y)))
 (let ((?x248 (+ 1 x)))
 (let ((?x180 (+ (- 1) y)))
 (let ((?x229 (* ?x180 ?x180 ?x180 ?x248 ?x248 ?x248)))
 (let ((?x331 (+ ?x229 (* (- 1) (* ?x180 ?x248 ?x248)) (* (- 1) (* ?x180 ?x180)) (* ?x180 ?x180 ?x180 ?x248))))
 (and (= ?x141 0) (or (not (= (* ?x141 ?x331) 0)) (not (= (* ?x141 ?x88) 0))))))))))))))) :qid k!27))
 ))
 (let ((?x365 (lambda ((x Int) (y Int) )(let ((?x320 (* x y y)))
 (let ((?x336 (* 3 ?x320)))
 (let ((?x306 (* x y y y)))
 (let ((?x304 (* y y y)))
 (let ((?x305 (* (- 1) ?x304)))
 (let ((?x239 (* x y)))
 (let ((?x351 (* 5 ?x239)))
 (let ((?x302 (* (- 1) (* x x y))))
 (let ((?x227 (* x x)))
 (let ((?x301 (* (- 1) ?x227)))
 (let ((?x192 (* (- 1) (* y y 1))))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x132 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x347 (* 3 x)))
 (let ((?x353 (+ (- 3) ?x347 (* (- 4) y) ?x132 (* (- 1) (* y 1 1)) ?x192 (* (- 1) (* y 1 y)) ?x301 ?x302 ?x351 (* (- 2) (* y y)) (* (- 1) (* y 1)) ?x305 ?x306 ?x336)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let (($x359 (not (= (* ?x90 ?x353) 0))))
 (let ((?x499 (* (- 3) ?x320)))
 (let ((?x248 (+ 1 x)))
 (let ((?x180 (+ (- 1) y)))
 (let ((?x229 (* ?x180 ?x180 ?x180 ?x248 ?x248 ?x248)))
 (let ((?x510 (* 3 y)))
 (let ((?x482 (+ (- 1) x ?x510 (* (- 1) (* y (- 1) 1)) ?x192 ?x227 ?x229 ?x302 (* (- 1) (* y (- 1) x)) (* (- 3) (* y y)) ?x304 ?x306 ?x499)))
 (let (($x95 (= ?x90 0)))
 (let (($x121 (and $x95 (or (not (= (* ?x90 ?x482) 0)) $x359))))
 (let ((?x88 (+ ?x132 (* (- 1) (* ?x85 ?x85 ?x129)) (* (- 1) (* ?x129 ?x129)) (* ?x85 ?x129 ?x129 ?x129))))
 (let ((?x141 (+ x ?x69 ?x76 y)))
 (let ((?x331 (+ ?x229 (* (- 1) (* ?x180 ?x248 ?x248)) (* (- 1) (* ?x180 ?x180)) (* ?x180 ?x180 ?x180 ?x248))))
 (let (($x441 (and (= ?x141 0) (or (not (= (* ?x141 ?x331) 0)) (not (= (* ?x141 ?x88) 0))))))
 (rewrite (= $x441 $x121)))))))))))))))))))))))))))))))))))
 ))
 (let (($x66 (exists ((x Int) (y Int) )(! (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x58 (- (- (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52) (* ?x49 ?x49 ?x52)) (* ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ ?x58 (* ?x49 ?x52 ?x52 ?x52)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (- (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38)) (* ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ ?x43 (* ?x34 ?x38 ?x38 ?x38)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0)))))))))))) :qid k!27))
 ))
 (let ((?x218 (lambda ((x Int) (y Int) )(let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x132 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x88 (+ ?x132 (* (- 1) (* ?x85 ?x85 ?x129)) (* (- 1) (* ?x129 ?x129)) (* ?x85 ?x129 ?x129 ?x129))))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x141 (+ x ?x69 ?x76 y)))
 (let ((?x248 (+ 1 x)))
 (let ((?x180 (+ (- 1) y)))
 (let ((?x229 (* ?x180 ?x180 ?x180 ?x248 ?x248 ?x248)))
 (let ((?x331 (+ ?x229 (* (- 1) (* ?x180 ?x248 ?x248)) (* (- 1) (* ?x180 ?x180)) (* ?x180 ?x180 ?x180 ?x248))))
 (let (($x441 (and (= ?x141 0) (or (not (= (* ?x141 ?x331) 0)) (not (= (* ?x141 ?x88) 0))))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x58 (- (- (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52) (* ?x49 ?x49 ?x52)) (* ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ ?x58 (* ?x49 ?x52 ?x52 ?x52)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (- (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38)) (* ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ ?x43 (* ?x34 ?x38 ?x38 ?x38)))))
 (let (($x65 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0))))))
 (rewrite (= $x65 $x441))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x224 (mp (mp @x67 (quant-intro (proof-bind ?x218) (= $x66 $x114)) $x114) (rewrite (= $x114 $x114)) $x114)))
 (let ((@x456 (mp (mp @x224 (quant-intro (proof-bind ?x365) (= $x114 $x389)) $x389) (quant-intro (proof-bind ?x204) (= $x389 $x447)) $x447)))
 (let ((@x494 (mp (mp~ @x456 (sk (~ $x447 $x376)) $x376) (rewrite (= $x376 $x388)) $x388)))
 (let ((@x153 (and-elim @x494 $x387)))
 (let ((@x77 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x214)) @x153 $x214)))
 (let (($x236 (<= ?x366 0)))
 (let ((@x386 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x236)) @x153 $x236)))
 (let (($x292 (not (<= ?x116 0))))
 (let (($x368 (>= ?x116 0)))
 (let (($x370 (>= ?x151 0)))
 (let (($x426 (<= ?x151 0)))
 (let ((@x269 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x134 (not $x426) (not $x370))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x426)) @x386 @x77 false) $x426) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x370)) @x386 @x77 false) $x370) $x134)))
 (let ((@x278 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x429 $x292 (not $x368))) (unit-resolution (and-elim @x494 $x275) @x269 $x425) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x368)) @x386 @x77 false) $x368) $x292)))
 ((_ th-lemma arith farkas 1 1 1) @x278 @x386 @x77 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             152
 :arith-nonlinear-bounds    8
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.61
 :memory                    3.11
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1205391
 :num-checks                1
 :propagations              14
 :rlimit-count              2701
 :time                      0.01
 :total-time                0.01)
