unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x135 (* (- 1) y!0)))
 (let ((?x134 (* (- 1) x!1)))
 (let ((?x136 (+ y00 x00 ?x134 ?x135)))
 (let (($x126 (<= ?x136 0)))
 (let (($x137 (= ?x136 0)))
 (let ((?x217 (+ y00 x00 (* (- 1) (* x!1 y!0)) (* (- 1) (* y!0 y!0)) ?x134 (* y00 y!0) (* x00 y!0) ?x135)))
 (let (($x116 (= ?x217 0)))
 (let (($x154 (not $x116)))
 (let (($x94 (and $x137 $x154)))
 (let ((?x73 (* y!0 y!0)))
 (let ((?x69 (* x!1 y!0)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x76 (+ x!1 y!0 ?x51 ?x58 ?x69 (* (- 1) (* y!0 y00)) ?x73 (* (- 1) (* y!0 x00)))))
 (let (($x112 (and (= (+ x!1 y!0 ?x51 ?x58) 0) (not (= ?x76 0)))))
 (let (($x255 (exists ((x Int) (y Int) )(! (let ((?x161 (* y y)))
 (let ((?x239 (* (- 1) (* y y00))))
 (let ((?x92 (* x y)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let (($x249 (= (+ x y ?x51 ?x58 ?x92 ?x239 ?x161 (* (- 1) (* y x00))) 0)))
 (let (($x77 (= (+ x y ?x51 ?x58) 0)))
 (and $x77 (not $x249))))))))) :qid k!26))
 ))
 (let (($x200 (exists ((x Int) (y Int) )(! (let ((?x99 (+ (* 2 (* (+ (- 1) x) (+ 1 y))) (* (- 2) (* x00 (+ 1 y))) (* (- 2) (* y00 (+ 1 y))) (* 2 (* (+ 1 y) (+ 1 y))))))
 (let (($x206 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x206 (not (= ?x99 0))))) :qid k!26))
 ))
 (let ((?x257 (lambda ((x Int) (y Int) )(let ((?x161 (* y y)))
 (let ((?x239 (* (- 1) (* y y00))))
 (let ((?x92 (* x y)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let (($x249 (= (+ x y ?x51 ?x58 ?x92 ?x239 ?x161 (* (- 1) (* y x00))) 0)))
 (let (($x77 (= (+ x y ?x51 ?x58) 0)))
 (let (($x169 (and $x77 (not $x249))))
 (let ((?x99 (+ (* 2 (* (+ (- 1) x) (+ 1 y))) (* (- 2) (* x00 (+ 1 y))) (* (- 2) (* y00 (+ 1 y))) (* 2 (* (+ 1 y) (+ 1 y))))))
 (let (($x206 (= (+ x ?x51 ?x58 y) 0)))
 (let (($x201 (and $x206 (not (= ?x99 0)))))
 (rewrite (= $x201 $x169))))))))))))))
 ))
 (let (($x171 (exists ((x Int) (y Int) )(! (let ((?x56 (+ (* (- 2) (* (+ (- 1) x) (+ 1 y))) (* 2 (* x00 (+ 1 y))) (* 2 (* y00 (+ 1 y))) (* (- 2) (* (+ 1 y) (+ 1 y))))))
 (let (($x206 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x206 (not (= ?x56 0))))) :qid k!26))
 ))
 (let ((?x193 (lambda ((x Int) (y Int) )(let ((?x99 (+ (* 2 (* (+ (- 1) x) (+ 1 y))) (* (- 2) (* x00 (+ 1 y))) (* (- 2) (* y00 (+ 1 y))) (* 2 (* (+ 1 y) (+ 1 y))))))
 (let (($x206 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x201 (and $x206 (not (= ?x99 0)))))
 (let ((?x56 (+ (* (- 2) (* (+ (- 1) x) (+ 1 y))) (* 2 (* x00 (+ 1 y))) (* 2 (* y00 (+ 1 y))) (* (- 2) (* (+ 1 y) (+ 1 y))))))
 (let (($x90 (and $x206 (not (= ?x56 0)))))
 (rewrite (= $x90 $x201))))))))
 ))
 (let (($x48 (exists ((x Int) (y Int) )(! (let ((?x41 (+ (* (- 2) (- x 1) (+ y 1)) (* 2 x00 (+ y 1)) (* 2 (+ y 1) y00))))
 (let (($x46 (or (not (= (- ?x41 (* 2 (+ y 1) (+ y 1))) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x46))) :qid k!26))
 ))
 (let ((?x108 (lambda ((x Int) (y Int) )(let ((?x56 (+ (* (- 2) (* (+ (- 1) x) (+ 1 y))) (* 2 (* x00 (+ 1 y))) (* 2 (* y00 (+ 1 y))) (* (- 2) (* (+ 1 y) (+ 1 y))))))
 (let (($x206 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x90 (and $x206 (not (= ?x56 0)))))
 (let ((?x41 (+ (* (- 2) (- x 1) (+ y 1)) (* 2 x00 (+ y 1)) (* 2 (+ y 1) y00))))
 (let (($x46 (or (not (= (- ?x41 (* 2 (+ y 1) (+ y 1))) 0)))))
 (let (($x47 (and (= (+ (- (- x y00) x00) y) 0) $x46)))
 (rewrite (= $x47 $x90)))))))))
 ))
 (let ((@x49 (asserted $x48)))
 (let ((@x199 (mp (mp @x49 (quant-intro (proof-bind ?x108) (= $x48 $x171)) $x171) (rewrite (= $x171 $x171)) $x171)))
 (let ((@x179 (mp (mp @x199 (quant-intro (proof-bind ?x193) (= $x171 $x200)) $x200) (quant-intro (proof-bind ?x257) (= $x200 $x255)) $x255)))
 (let ((@x164 (mp (mp~ @x179 (sk (~ $x255 $x112)) $x112) (rewrite (= $x112 $x94)) $x94)))
 (let ((@x187 (and-elim @x164 $x137)))
 (let ((@x221 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x137) $x126)) @x187 $x126)))
 (let (($x114 (>= ?x136 0)))
 (let ((@x106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x137) $x114)) @x187 $x114)))
 (let (($x148 (not (>= ?x217 0))))
 (let (($x127 (<= ?x217 0)))
 (let ((@x122 (lemma ((_ th-lemma arith) (hypothesis (not $x127)) @x106 @x221 @x106 @x221 false) $x127)))
 (let ((@x190 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x116 (not $x127) $x148)) (and-elim @x164 $x154) (or (not $x127) $x148))))
 ((_ th-lemma arith) (unit-resolution @x190 @x122 $x148) @x106 @x221 @x106 @x221 false)))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             62
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 12
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.44
 :memory                    3.05
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1025608
 :num-checks                1
 :propagations              4
 :rlimit-count              1056
 :time                      0.01
 :total-time                0.01)
