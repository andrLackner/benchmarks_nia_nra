unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x1473 (* r!1 r!1)))
 (let ((?x1852 (* (- 1) r!1)))
 (let ((?x2998 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1094 (* (- 1) ?x36)))
 (let ((?x1133 (* (- 2) x00)))
 (let ((?x487 (+ r00 ?x1133 ?x1094 ?x2998 ?x1852 ?x1473)))
 (let (($x128 (<= ?x487 0)))
 (let (($x488 (= ?x487 0)))
 (let ((?x1037 (+ x!0 ?x1852)))
 (let ((?x1851 (+ 1 r!1)))
 (let ((?x271 (+ r00 ?x1133 ?x1094 (* 6 (* r00 r00 x!0 x!0 r!1)) (* 15 (* r00 r00 x!0 x!0 r!1 r!1)) (* 12 (* r00 r00 x!0 x!0 r!1 r!1 r!1)) (* (- 2) (* r00 r00 x!0 x!0 x!0)) (* (- 1) (* r00 r!1 r!1 r!1 r!1 r!1 r!1)) (* (- 2) (* x00 x!0 x!0 x!0 r!1 r!1 r!1)) (* (- 5) (* r00 r00 x!0 x!0 x!0 r!1)) (* (- 4) (* r00 r00 x!0 x!0 x!0 r!1 r!1)) (* (- 6) (* x00 x!0 r!1 r!1 r!1 r!1 r!1)) (* (- 12) (* r00 r00 x!0 r!1 r!1 r!1 r!1)) (* (- 30) (* x00 x!0 r!1 r!1 r!1)) (* (- 24) (* x00 x!0 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 x!0 x!0 x!0)) (* (- 10) (* x00 x!0 x!0 x!0 r!1)) (* (- 1) (* r00 r00 x!0 x!0 x!0 r!1 r!1 r!1)) (* 12 (* x00 x!0 x!0 r!1)) (* 2 (* r00 r00 r!1 r!1 r!1)) (* (- 8) (* x00 x!0 x!0 x!0 r!1 r!1)) (* 3 (* r00 x!0 r!1 r!1 r!1 r!1 r!1)) (* 5 (* r00 x!0 x!0 x!0 r!1)) (* (- 2) (* r00 r00 x!0)) (* (- 1) (* ?x1851 ?x1851 ?x1851 ?x1037 ?x1037 ?x1037)) ?x2998 (* (- 3) (* r00 r00 x!0 r!1 r!1 r!1 r!1 r!1)) (* (- 2) (* r00 r!1 r!1 r!1)) (* 3 (* r00 r00 x!0 x!0 r!1 r!1 r!1 r!1)) (* 2 (* x!0 r!1 r!1)) (* (- 15) (* r00 x!0 x!0 r!1 r!1)) (* ?x1851 ?x1851 ?x1851 ?x1851 ?x1851 ?x1037 ?x1037 ?x1037) (* r00 x!0 x!0 x!0 r!1 r!1 r!1) (* (- 6) (* r00 x!0 x!0 r!1)) (* r00 r00 r!1 r!1 r!1 r!1 r!1 r!1) (* 2 (* r00 x!0)) (* (- 4) (* x00 x!0)) (* 2 (* x00 r!1)) (* (- 1) (* r00 r!1)) (* 2 (* ?x1851 ?x1851 ?x1851 ?x1037 ?x1037 ?x1037 ?x1037)) (* (- 12) (* x00 x!0 r!1 r!1)) (* 4 (* r00 x!0 x!0 x!0 r!1 r!1)) (* (- 1) (* r!1 r!1 r!1)) (* (- 5) (* r00 r!1 r!1 r!1 r!1)) (* 6 (* x00 x!0 x!0 r!1 r!1 r!1 r!1)) (* (- 4) (* x!0 r!1)) ?x1852 (* 2 ?x1473) (* (- 3) (* r00 x!0 x!0 r!1 r!1 r!1 r!1)) (* r00 r00 r!1) (* (- 15) (* r00 r00 x!0 r!1 r!1 r!1)) (* 30 (* x00 x!0 x!0 r!1 r!1)) (* (- 12) (* r00 x!0 x!0 r!1 r!1 r!1)) (* 2 (* r00 x!0 x!0 x!0)) (* 2 (* ?x1851 ?x1851 ?x1037 ?x1037 ?x1037 ?x1037)) (* (- 4) (* r00 r!1 r!1 r!1 r!1 r!1)) (* 24 (* x00 x!0 x!0 r!1 r!1 r!1)) (* 6 (* r00 x!0 r!1 r!1)) (* 15 (* r00 x!0 r!1 r!1 r!1)) (* 5 (* r00 r00 r!1 r!1 r!1 r!1)) (* 4 (* r00 r00 r!1 r!1 r!1 r!1 r!1)) (* 2 (* x00 r!1 r!1 r!1 r!1 r!1 r!1)) (* 8 (* x00 r!1 r!1 r!1 r!1 r!1)) (* 4 (* x00 r!1 r!1 r!1)) (* 10 (* x00 r!1 r!1 r!1 r!1)) (* (- 6) (* r00 r00 x!0 r!1 r!1)) (* 12 (* r00 x!0 r!1 r!1 r!1 r!1)) (* 4 (* x!0 x!0)))))
 (let (($x275 (= ?x271 0)))
 (let (($x299 (not $x275)))
 (let (($x503 (and $x488 $x299)))
 (let ((?x1856 (+ ?x1852 x!0)))
 (let ((?x1345 (* r!1 r!1 r!1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x144 (* (- 1) r00)))
 (let ((?x1449 (* (- 2) x!0)))
 (let ((?x2962 (+ r!1 ?x1449 ?x144 (* (- 2) ?x1473) ?x35 ?x36 (* 30 (* r!1 r!1 r!1 x!0 x00)) (* 24 (* r!1 r!1 r!1 r!1 x!0 x00)) (* 4 (* x!0 x!0 x!0 x00)) (* 10 (* r!1 x!0 x!0 x!0 x00)) (* 8 (* r!1 r!1 x!0 x!0 x!0 x00)) (* 2 (* r!1 r!1 r!1 x!0 x!0 x!0 x00)) (* 2 (* x!0 r00 r00)) ?x1345 (* (- 2) (* r!1 r!1 r!1 r00 r00)) (* (- 5) (* r!1 r!1 r!1 r!1 r00 r00)) (* (- 4) (* r!1 r!1 r!1 r!1 r!1 r00 r00)) (* 6 (* r!1 r!1 x!0 r00 r00)) (* 15 (* r!1 r!1 r!1 x!0 r00 r00)) (* 12 (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 x!0 x!0 r00 r00)) (* (- 15) (* r!1 r!1 x!0 x!0 r00 r00)) (* (- 12) (* r!1 r!1 r!1 x!0 x!0 r00 r00)) (* 2 (* x!0 x!0 x!0 r00 r00)) (* 5 (* r!1 x!0 x!0 x!0 r00 r00)) (* 4 (* r!1 r!1 x!0 x!0 x!0 r00 r00)) (* 6 (* r!1 r!1 r!1 r!1 r!1 x!0 x00)) (* 4 (* r!1 x!0)) (* (- 2) (* r!1 r!1 x!0)) (* ?x1851 ?x1851 ?x1851 ?x1856 ?x1856 ?x1856) (* 2 (* r!1 r!1 r!1 r00)) (* (- 6) (* r!1 r!1 r!1 r!1 x!0 x!0 x00)) (* 5 (* r!1 r!1 r!1 r!1 r00)) (* 4 (* r!1 r!1 r!1 r!1 r!1 r00)) (* (- 12) (* r!1 x!0 x!0 x00)) (* (- 30) (* r!1 r!1 x!0 x!0 x00)) (* r!1 r!1 r!1 r!1 r!1 r!1 r00) (* (- 6) (* r!1 r!1 x!0 r00)) (* (- 24) (* r!1 r!1 r!1 x!0 x!0 x00)) (* (- 15) (* r!1 r!1 r!1 x!0 r00)) (* (- 12) (* r!1 r!1 r!1 r!1 x!0 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 r!1 x!0 r00)) (* 6 (* r!1 x!0 x!0 r00)) (* 15 (* r!1 r!1 x!0 x!0 r00)) (* 12 (* r!1 r!1 r!1 x!0 x!0 r00)) (* 3 (* r!1 r!1 r!1 r!1 x!0 x!0 r00)) (* (- 2) (* x!0 x!0 x!0 r00)) (* (- 2) (* ?x1851 ?x1851 ?x1856 ?x1856 ?x1856 ?x1856)) (* (- 5) (* r!1 x!0 x!0 x!0 r00)) (* (- 4) (* r!1 r!1 x!0 x!0 x!0 r00)) (* (- 1) (* r!1 r!1 r!1 x!0 x!0 x!0 r00)) (* (- 8) (* r!1 r!1 r!1 r!1 r!1 x00)) (* (- 2) (* r!1 r!1 r!1 r!1 r!1 r!1 x00)) (* 12 (* r!1 r!1 x!0 x00)) (* (- 4) (* x!0 x!0)) (* (- 1) (* ?x1851 ?x1851 ?x1851 ?x1851 ?x1851 ?x1856 ?x1856 ?x1856)) (* (- 2) (* ?x1851 ?x1851 ?x1851 ?x1856 ?x1856 ?x1856 ?x1856)) (* (- 1) (* r!1 r00 r00)) (* r!1 r00) (* (- 2) (* x!0 r00)) (* (- 2) (* r!1 x00)) (* 4 (* x!0 x00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r!1 r00 r00)) (* 3 (* r!1 r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0 x!0 r00 r00)) (* r!1 r!1 r!1 x!0 x!0 x!0 r00 r00) (* (- 4) (* r!1 r!1 r!1 x00)) (* (- 10) (* r!1 r!1 r!1 r!1 x00)))))
 (let (($x2970 (and (= (+ r!1 ?x1449 ?x144 (* (- 1) ?x1473) ?x35 ?x36) 0) (not (= ?x2962 0)))))
 (let (($x3067 (exists ((r Int) (x Int) )(! (let ((?x2487 (* r r r x x x r00 r00)))
 (let ((?x2500 (* (- 3) (* r r r r x x r00 r00))))
 (let ((?x2497 (* 3 (* r r r r r x r00 r00))))
 (let ((?x2352 (* (- 1) (* r r r r r r r00 r00))))
 (let ((?x2279 (* 4 (* x x00))))
 (let ((?x2187 (* (- 2) (* x r00))))
 (let ((?x2175 (* r r00)))
 (let ((?x92 (* (- 1) r)))
 (let ((?x158 (+ ?x92 x)))
 (let ((?x152 (+ 1 r)))
 (let ((?x2067 (* (- 2) (* ?x152 ?x152 ?x152 ?x158 ?x158 ?x158 ?x158))))
 (let ((?x2102 (* (- 1) (* ?x152 ?x152 ?x152 ?x152 ?x152 ?x158 ?x158 ?x158))))
 (let ((?x2060 (* (- 4) (* x x))))
 (let ((?x1965 (* (- 1) (* r r r x x x r00))))
 (let ((?x2000 (* 3 (* r r r r x x r00))))
 (let ((?x1988 (* (- 3) (* r r r r r x r00))))
 (let ((?x1595 (* r r r r r r r00)))
 (let ((?x1494 (* ?x152 ?x152 ?x152 ?x158 ?x158 ?x158)))
 (let ((?x1469 (* (- 2) (* r r x))))
 (let ((?x2055 (* 4 (* r x))))
 (let ((?x2561 (* 4 (* r r x x x r00 r00))))
 (let ((?x2560 (* 5 (* r x x x r00 r00))))
 (let ((?x2558 (* 2 (* x x x r00 r00))))
 (let ((?x2557 (* (- 12) (* r r r x x r00 r00))))
 (let ((?x2556 (* (- 15) (* r r x x r00 r00))))
 (let ((?x2554 (* (- 6) (* r x x r00 r00))))
 (let ((?x2553 (* 12 (* r r r r x r00 r00))))
 (let ((?x2551 (* 15 (* r r r x r00 r00))))
 (let ((?x2549 (* 6 (* r r x r00 r00))))
 (let ((?x2548 (* (- 4) (* r r r r r r00 r00))))
 (let ((?x2547 (* (- 5) (* r r r r r00 r00))))
 (let ((?x2545 (* (- 2) (* r r r r00 r00))))
 (let ((?x1025 (* r r r)))
 (let ((?x365 (* 2 (* r r r x x x x00))))
 (let ((?x2541 (* 4 (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x1387 (* (- 2) ?x30)))
 (let ((?x144 (* (- 1) r00)))
 (let ((?x143 (* (- 2) x)))
 (let ((?x3060 (+ r ?x143 ?x144 ?x1387 ?x35 ?x36 (* 30 (* r r r x x00)) (* 24 (* r r r r x x00)) ?x2541 (* 10 (* r x x x x00)) (* 8 (* r r x x x x00)) ?x365 (* 2 (* x r00 r00)) ?x1025 ?x2545 ?x2547 ?x2548 ?x2549 ?x2551 ?x2553 ?x2554 ?x2556 ?x2557 ?x2558 ?x2560 ?x2561 (* 6 (* r r r r r x x00)) ?x2055 ?x1469 ?x1494 (* 2 (* r r r r00)) (* (- 6) (* r r r r x x x00)) (* 5 (* r r r r r00)) (* 4 (* r r r r r r00)) (* (- 12) (* r x x x00)) (* (- 30) (* r r x x x00)) ?x1595 (* (- 6) (* r r x r00)) (* (- 24) (* r r r x x x00)) (* (- 15) (* r r r x r00)) (* (- 12) (* r r r r x r00)) ?x1988 (* 6 (* r x x r00)) (* 15 (* r r x x r00)) (* 12 (* r r r x x r00)) ?x2000 (* (- 2) (* x x x r00)) (* (- 2) (* ?x152 ?x152 ?x158 ?x158 ?x158 ?x158)) (* (- 5) (* r x x x r00)) (* (- 4) (* r r x x x r00)) ?x1965 (* (- 8) (* r r r r r x00)) (* (- 2) (* r r r r r r x00)) (* 12 (* r r x x00)) ?x2060 ?x2102 ?x2067 (* (- 1) (* r r00 r00)) ?x2175 ?x2187 (* (- 2) (* r x00)) ?x2279 ?x2352 ?x2497 ?x2500 ?x2487 (* (- 4) (* r r r x00)) (* (- 10) (* r r r r x00)))))
 (let (($x147 (= (+ r ?x143 ?x144 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x147 (not (= ?x3060 0)))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x2336 (exists ((r Int) (x Int) )(! (let ((?x92 (* (- 1) r)))
 (let ((?x1896 (+ x ?x92)))
 (let ((?x152 (+ 1 r)))
 (let ((?x2468 (* r00 r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1117 (* r00 ?x152)))
 (let ((?x1240 (* ?x152 ?x152 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1212 (* r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1176 (* ?x152 ?x152 ?x152)))
 (let ((?x1132 (* r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2339 (+ ?x1132 (* (- 2) (* x00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* 2 (* ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) ?x1176 (* (- 1) (* r00 r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 1) (* ?x152 ?x152)) (* 2 (* ?x152 ?x152 ?x1896)) (* (- 1) (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) ?x1212 (* 2 (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) ?x1240 (* 4 (* ?x1896 ?x1896)) (* (- 1) (* r00 r00 ?x152)) (* 2 (* r00 ?x1896)) (* (- 2) (* x00 ?x152)) ?x1117 (* (- 2) (* r00 r00 ?x1896)) (* (- 4) (* x00 ?x1896)) (* (- 2) (* x00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 1) ?x2468))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x143 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x145 (* (- 1) ?x30)))
 (let ((?x144 (* (- 1) r00)))
 (and (= (+ r ?x144 ?x145 ?x143 ?x35 ?x36) 0) (not (= ?x2339 0))))))))))))))))))) :qid k!26))
 ))
 (let ((?x3069 (lambda ((r Int) (x Int) )(let ((?x2487 (* r r r x x x r00 r00)))
 (let ((?x2500 (* (- 3) (* r r r r x x r00 r00))))
 (let ((?x2497 (* 3 (* r r r r r x r00 r00))))
 (let ((?x2352 (* (- 1) (* r r r r r r r00 r00))))
 (let ((?x2279 (* 4 (* x x00))))
 (let ((?x2187 (* (- 2) (* x r00))))
 (let ((?x2175 (* r r00)))
 (let ((?x92 (* (- 1) r)))
 (let ((?x158 (+ ?x92 x)))
 (let ((?x152 (+ 1 r)))
 (let ((?x2067 (* (- 2) (* ?x152 ?x152 ?x152 ?x158 ?x158 ?x158 ?x158))))
 (let ((?x2102 (* (- 1) (* ?x152 ?x152 ?x152 ?x152 ?x152 ?x158 ?x158 ?x158))))
 (let ((?x2060 (* (- 4) (* x x))))
 (let ((?x1965 (* (- 1) (* r r r x x x r00))))
 (let ((?x2000 (* 3 (* r r r r x x r00))))
 (let ((?x1988 (* (- 3) (* r r r r r x r00))))
 (let ((?x1595 (* r r r r r r r00)))
 (let ((?x1494 (* ?x152 ?x152 ?x152 ?x158 ?x158 ?x158)))
 (let ((?x1469 (* (- 2) (* r r x))))
 (let ((?x2055 (* 4 (* r x))))
 (let ((?x2561 (* 4 (* r r x x x r00 r00))))
 (let ((?x2560 (* 5 (* r x x x r00 r00))))
 (let ((?x2558 (* 2 (* x x x r00 r00))))
 (let ((?x2557 (* (- 12) (* r r r x x r00 r00))))
 (let ((?x2556 (* (- 15) (* r r x x r00 r00))))
 (let ((?x2554 (* (- 6) (* r x x r00 r00))))
 (let ((?x2553 (* 12 (* r r r r x r00 r00))))
 (let ((?x2551 (* 15 (* r r r x r00 r00))))
 (let ((?x2549 (* 6 (* r r x r00 r00))))
 (let ((?x2548 (* (- 4) (* r r r r r r00 r00))))
 (let ((?x2547 (* (- 5) (* r r r r r00 r00))))
 (let ((?x2545 (* (- 2) (* r r r r00 r00))))
 (let ((?x1025 (* r r r)))
 (let ((?x365 (* 2 (* r r r x x x x00))))
 (let ((?x2541 (* 4 (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x1387 (* (- 2) ?x30)))
 (let ((?x144 (* (- 1) r00)))
 (let ((?x143 (* (- 2) x)))
 (let ((?x3060 (+ r ?x143 ?x144 ?x1387 ?x35 ?x36 (* 30 (* r r r x x00)) (* 24 (* r r r r x x00)) ?x2541 (* 10 (* r x x x x00)) (* 8 (* r r x x x x00)) ?x365 (* 2 (* x r00 r00)) ?x1025 ?x2545 ?x2547 ?x2548 ?x2549 ?x2551 ?x2553 ?x2554 ?x2556 ?x2557 ?x2558 ?x2560 ?x2561 (* 6 (* r r r r r x x00)) ?x2055 ?x1469 ?x1494 (* 2 (* r r r r00)) (* (- 6) (* r r r r x x x00)) (* 5 (* r r r r r00)) (* 4 (* r r r r r r00)) (* (- 12) (* r x x x00)) (* (- 30) (* r r x x x00)) ?x1595 (* (- 6) (* r r x r00)) (* (- 24) (* r r r x x x00)) (* (- 15) (* r r r x r00)) (* (- 12) (* r r r r x r00)) ?x1988 (* 6 (* r x x r00)) (* 15 (* r r x x r00)) (* 12 (* r r r x x r00)) ?x2000 (* (- 2) (* x x x r00)) (* (- 2) (* ?x152 ?x152 ?x158 ?x158 ?x158 ?x158)) (* (- 5) (* r x x x r00)) (* (- 4) (* r r x x x r00)) ?x1965 (* (- 8) (* r r r r r x00)) (* (- 2) (* r r r r r r x00)) (* 12 (* r r x x00)) ?x2060 ?x2102 ?x2067 (* (- 1) (* r r00 r00)) ?x2175 ?x2187 (* (- 2) (* r x00)) ?x2279 ?x2352 ?x2497 ?x2500 ?x2487 (* (- 4) (* r r r x00)) (* (- 10) (* r r r r x00)))))
 (let (($x147 (= (+ r ?x143 ?x144 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x1834 (and $x147 (not (= ?x3060 0)))))
 (let ((?x1896 (+ x ?x92)))
 (let ((?x2468 (* r00 r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1117 (* r00 ?x152)))
 (let ((?x1240 (* ?x152 ?x152 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1212 (* r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1176 (* ?x152 ?x152 ?x152)))
 (let ((?x1132 (* r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2339 (+ ?x1132 (* (- 2) (* x00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* 2 (* ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) ?x1176 (* (- 1) (* r00 r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 1) (* ?x152 ?x152)) (* 2 (* ?x152 ?x152 ?x1896)) (* (- 1) (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) ?x1212 (* 2 (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) ?x1240 (* 4 (* ?x1896 ?x1896)) (* (- 1) (* r00 r00 ?x152)) (* 2 (* r00 ?x1896)) (* (- 2) (* x00 ?x152)) ?x1117 (* (- 2) (* r00 r00 ?x1896)) (* (- 4) (* x00 ?x1896)) (* (- 2) (* x00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 1) ?x2468))))
 (let (($x1096 (and (= (+ r ?x144 (* (- 1) ?x30) ?x143 ?x35 ?x36) 0) (not (= ?x2339 0)))))
 (rewrite (= $x1096 $x1834))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x2298 (exists ((r Int) (x Int) )(! (let ((?x92 (* (- 1) r)))
 (let ((?x1896 (+ x ?x92)))
 (let ((?x152 (+ 1 r)))
 (let ((?x2468 (* r00 r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2315 (* r00 r00 ?x152)))
 (let ((?x2381 (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2365 (* ?x152 ?x152)))
 (let ((?x1182 (* r00 r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1333 (+ (* (- 1) (* r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* 2 (* x00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 2) (* ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) (* (- 1) (* ?x152 ?x152 ?x152)) ?x1182 ?x2365 (* (- 2) (* ?x152 ?x152 ?x1896)) ?x2381 (* (- 1) (* r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 2) (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) (* (- 1) (* ?x152 ?x152 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 4) (* ?x1896 ?x1896)) ?x2315 (* (- 2) (* r00 ?x1896)) (* 2 (* x00 ?x152)) (* (- 1) (* r00 ?x152)) (* 2 (* r00 r00 ?x1896)) (* 4 (* x00 ?x1896)) (* 2 (* x00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) ?x2468)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1094 (* (- 1) ?x36)))
 (let ((?x1133 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x92 r00 ?x30 ?x32 ?x1133 ?x1094) 0) (not (= ?x1333 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x1159 (lambda ((r Int) (x Int) )(let ((?x92 (* (- 1) r)))
 (let ((?x1896 (+ x ?x92)))
 (let ((?x152 (+ 1 r)))
 (let ((?x2468 (* r00 r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1117 (* r00 ?x152)))
 (let ((?x1240 (* ?x152 ?x152 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1212 (* r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1176 (* ?x152 ?x152 ?x152)))
 (let ((?x1132 (* r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2339 (+ ?x1132 (* (- 2) (* x00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* 2 (* ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) ?x1176 (* (- 1) (* r00 r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 1) (* ?x152 ?x152)) (* 2 (* ?x152 ?x152 ?x1896)) (* (- 1) (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) ?x1212 (* 2 (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) ?x1240 (* 4 (* ?x1896 ?x1896)) (* (- 1) (* r00 r00 ?x152)) (* 2 (* r00 ?x1896)) (* (- 2) (* x00 ?x152)) ?x1117 (* (- 2) (* r00 r00 ?x1896)) (* (- 4) (* x00 ?x1896)) (* (- 2) (* x00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 1) ?x2468))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x143 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x145 (* (- 1) ?x30)))
 (let ((?x144 (* (- 1) r00)))
 (let (($x1096 (and (= (+ r ?x144 ?x145 ?x143 ?x35 ?x36) 0) (not (= ?x2339 0)))))
 (let ((?x2315 (* r00 r00 ?x152)))
 (let ((?x2381 (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2365 (* ?x152 ?x152)))
 (let ((?x1182 (* r00 r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1333 (+ (* (- 1) ?x1132) (* 2 (* x00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 2) (* ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) (* (- 1) ?x1176) ?x1182 ?x2365 (* (- 2) (* ?x152 ?x152 ?x1896)) ?x2381 (* (- 1) ?x1212) (* (- 2) (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) (* (- 1) ?x1240) (* (- 4) (* ?x1896 ?x1896)) ?x2315 (* (- 2) (* r00 ?x1896)) (* 2 (* x00 ?x152)) (* (- 1) ?x1117) (* 2 (* r00 r00 ?x1896)) (* 4 (* x00 ?x1896)) (* 2 (* x00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) ?x2468)))
 (let (($x1162 (= (+ ?x92 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x1130 (and $x1162 (not (= ?x1333 0)))))
 (rewrite (= $x1130 $x1096)))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (+ (* (- 1) ?x41 ?x41 r00 ?x42 ?x42 ?x42) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00))))
 (let ((?x49 (+ (- ?x45 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42)) (* 0 ?x41 ?x42))))
 (let ((?x54 (+ (- ?x49 (* ?x41 ?x41 ?x41)) (* ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42) (* ?x41 ?x41))))
 (let ((?x58 (+ (- ?x54 (* 2 ?x41 ?x41 ?x42)) (* ?x41 ?x41 ?x41 ?x42 ?x42 ?x42))))
 (let ((?x63 (- (- ?x58 (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42)) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x66 (+ (- ?x63 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* 0 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42))))
 (let ((?x73 (- (+ (- ?x66 (* 4 ?x42 ?x42)) (* ?x41 r00 r00)) (* 2 r00 ?x42))))
 (let ((?x82 (+ (- (+ ?x73 (* 2 ?x41 x00)) (* ?x41 r00)) (* 2 r00 r00 ?x42) (* 4 ?x42 x00) (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 x00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x82 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x1145 (lambda ((r Int) (x Int) )(let ((?x92 (* (- 1) r)))
 (let ((?x1896 (+ x ?x92)))
 (let ((?x152 (+ 1 r)))
 (let ((?x2468 (* r00 r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2315 (* r00 r00 ?x152)))
 (let ((?x2381 (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x2365 (* ?x152 ?x152)))
 (let ((?x1182 (* r00 r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)))
 (let ((?x1333 (+ (* (- 1) (* r00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* 2 (* x00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 2) (* ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) (* (- 1) (* ?x152 ?x152 ?x152)) ?x1182 ?x2365 (* (- 2) (* ?x152 ?x152 ?x1896)) ?x2381 (* (- 1) (* r00 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 2) (* ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896 ?x1896)) (* (- 1) (* ?x152 ?x152 ?x152 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) (* (- 4) (* ?x1896 ?x1896)) ?x2315 (* (- 2) (* r00 ?x1896)) (* 2 (* x00 ?x152)) (* (- 1) (* r00 ?x152)) (* 2 (* r00 r00 ?x1896)) (* 4 (* x00 ?x1896)) (* 2 (* x00 ?x152 ?x152 ?x1896 ?x1896 ?x1896)) ?x2468)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1094 (* (- 1) ?x36)))
 (let ((?x1133 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x1130 (and (= (+ ?x92 r00 ?x30 ?x32 ?x1133 ?x1094) 0) (not (= ?x1333 0)))))
 (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (+ (* (- 1) ?x41 ?x41 r00 ?x42 ?x42 ?x42) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00))))
 (let ((?x49 (+ (- ?x45 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42)) (* 0 ?x41 ?x42))))
 (let ((?x54 (+ (- ?x49 (* ?x41 ?x41 ?x41)) (* ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42) (* ?x41 ?x41))))
 (let ((?x58 (+ (- ?x54 (* 2 ?x41 ?x41 ?x42)) (* ?x41 ?x41 ?x41 ?x42 ?x42 ?x42))))
 (let ((?x63 (- (- ?x58 (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42)) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x66 (+ (- ?x63 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* 0 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42))))
 (let ((?x73 (- (+ (- ?x66 (* 4 ?x42 ?x42)) (* ?x41 r00 r00)) (* 2 r00 ?x42))))
 (let ((?x82 (+ (- (+ ?x73 (* 2 ?x41 x00)) (* ?x41 r00)) (* 2 r00 r00 ?x42) (* 4 ?x42 x00) (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 x00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x86 (and (= ?x38 0) (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x1130))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x1188 (mp (mp @x88 (quant-intro (proof-bind ?x1145) (= $x87 $x2298)) $x2298) (rewrite (= $x2298 $x2298)) $x2298)))
 (let ((@x1718 (mp (mp @x1188 (quant-intro (proof-bind ?x1159) (= $x2298 $x2336)) $x2336) (quant-intro (proof-bind ?x3069) (= $x2336 $x3067)) $x3067)))
 (let ((@x303 (mp (mp~ @x1718 (sk (~ $x3067 $x2970)) $x2970) (rewrite (= $x2970 $x503)) $x503)))
 (let ((@x311 (and-elim @x303 $x488)))
 (let ((@x2779 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x488) $x128)) @x311 $x128)))
 (let (($x125 (>= ?x487 0)))
 (let ((@x93 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x488) $x125)) @x311 $x125)))
 (let (($x2323 (not (>= ?x271 0))))
 (let (($x403 (<= ?x271 0)))
 (let ((@x2363 (lemma ((_ th-lemma arith) (hypothesis (not $x403)) @x93 @x2779 @x93 @x2779 false) $x403)))
 (let ((@x1122 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x275 (not $x403) $x2323)) (and-elim @x303 $x299) (or (not $x403) $x2323))))
 ((_ th-lemma arith) (unit-resolution @x1122 @x2363 $x2323) @x93 @x2779 @x93 @x2779 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        19
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             544
 :arith-nonlinear-bounds    16
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 97
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                4.04
 :memory                    3.45
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1621061
 :num-checks                1
 :propagations              4
 :rlimit-count              11664
 :time                      0.01
 :total-time                0.02)
