unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x693 (* 2 x!0)))
 (let ((?x177 (* r!1 r!1)))
 (let ((?x391 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x762 (* (- 1) ?x36)))
 (let ((?x733 (* (- 2) x00)))
 (let ((?x585 (+ r00 ?x733 ?x762 ?x391 ?x177 ?x693)))
 (let (($x414 (<= ?x585 0)))
 (let (($x694 (= ?x585 0)))
 (let ((?x647 (* r!1 r!1 x!0 x!0)))
 (let ((?x608 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x606 (+ r00 ?x733 ?x762 ?x391 (* (- 2) ?x177) ?x693 (* (- 4) (* r00 r00 r!1 r!1)) (* 2 (* r00 r00 r!1 x!0)) (* (- 2) (* r00 r!1 x!0)) (* r00 x!0 x!0) (* (- 6) (* x00 r!1)) (* 2 (* x!0 x!0 x!0)) (* 3 (* r!1 r!1 r!1 r!1)) (* 6 (* r!1 x!0)) (* (- 1) (* r00 r00 r!1 r!1 r!1)) (* (- 3) (* r00 r00 r!1)) (* (- 1) (* r!1 r!1 r!1)) ?x608 (* 10 (* r!1 r!1 x!0)) (* (- 5) (* r!1 x!0 x!0)) ?x647 (* (- 1) (* r00 r00 x!0 x!0)) (* 3 (* r00 r!1)) (* (- 2) (* x00 r!1 r!1 r!1)) (* 4 (* r00 r!1 r!1)) (* (- 2) (* x00 x!0 x!0)) (* (- 8) (* x00 r!1 r!1)) (* r00 r!1 r!1 r!1) (* 4 (* x00 r!1 x!0)))))
 (let (($x669 (= ?x606 0)))
 (let (($x937 (not $x669)))
 (let (($x683 (and $x694 $x937)))
 (let ((?x586 (* r!1 r!1 r!1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x294 (* (- 2) x!0)))
 (let ((?x534 (+ r!1 ?x294 ?x124 (* 2 ?x177) ?x35 ?x36 (* (- 6) (* r!1 x!0)) (* (- 3) (* r!1 r00)) (* (- 4) (* r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r00)) (* 2 (* x!0 x!0 x00)) (* 8 (* r!1 r!1 x00)) (* (- 4) (* r!1 x!0 x00)) ?x586 (* (- 3) (* r!1 r!1 r!1 r!1)) (* (- 1) ?x608) (* 4 (* r!1 r!1 r00 r00)) (* (- 2) (* r!1 x!0 r00 r00)) (* x!0 x!0 r00 r00) (* (- 10) (* r!1 r!1 x!0)) (* 5 (* r!1 x!0 x!0)) (* (- 1) ?x647) (* (- 2) (* x!0 x!0 x!0)) (* 3 (* r!1 r00 r00)) (* r!1 r!1 r!1 r00 r00) (* 2 (* r!1 x!0 r00)) (* (- 1) (* x!0 x!0 r00)) (* 6 (* r!1 x00)) (* 2 (* r!1 r!1 r!1 x00)))))
 (let (($x559 (and (= (+ r!1 ?x294 ?x124 (* (- 1) ?x177) ?x35 ?x36) 0) (not (= ?x534 0)))))
 (let (($x634 (exists ((r Int) (x Int) )(! (let ((?x904 (* 2 (* r r r x00))))
 (let ((?x1018 (* 6 (* r x00))))
 (let ((?x1017 (* (- 1) (* x x r00))))
 (let ((?x1016 (* 2 (* r x r00))))
 (let ((?x715 (* r r r r00 r00)))
 (let ((?x732 (* 3 (* r r00 r00))))
 (let ((?x1015 (* (- 2) (* x x x))))
 (let ((?x1007 (* (- 1) (* r r x x))))
 (let ((?x475 (* x x r00 r00)))
 (let ((?x482 (* (- 2) (* r x r00 r00))))
 (let ((?x1006 (* 4 (* r r r00 r00))))
 (let ((?x1005 (* (- 1) (* r r r r r))))
 (let ((?x348 (* r r r)))
 (let ((?x1000 (* (- 4) (* r x x00))))
 (let ((?x999 (* 8 (* r r x00))))
 (let ((?x255 (* 2 (* x x x00))))
 (let ((?x998 (* (- 1) (* r r r r00))))
 (let ((?x997 (* (- 4) (* r r r00))))
 (let ((?x996 (* (- 3) (* r r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x1053 (+ r ?x123 ?x124 (* 2 (* r r)) ?x35 ?x36 (* (- 6) (* r x)) ?x996 ?x997 ?x998 ?x255 ?x999 ?x1000 ?x348 (* (- 3) (* r r r r)) ?x1005 ?x1006 ?x482 ?x475 (* (- 10) (* r r x)) (* 5 (* r x x)) ?x1007 ?x1015 ?x732 ?x715 ?x1016 ?x1017 ?x1018 ?x904)))
 (let (($x127 (= (+ r ?x123 ?x124 (* (- 1) (* r r)) ?x35 ?x36) 0)))
 (and $x127 (not (= ?x1053 0)))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x751 (exists ((r Int) (x Int) )(! (let ((?x532 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x611 (* (- 1) (* r00 r00 (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x74 (* (- 1) r)))
 (let ((?x401 (+ x ?x74)))
 (let ((?x287 (* (- 1) (* (+ 1 r) (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x790 (+ 1 r)))
 (let ((?x893 (+ (* 2 (* ?x790 ?x790 ?x790 ?x401)) (* r00 ?x790 ?x790 ?x790) (* (- 2) (* x00 ?x401 ?x401)) (* ?x790 ?x790 ?x790 ?x790 ?x790) (* (- 1) (* r00 r00 ?x401 ?x401)) ?x287 (* ?x790 ?x790 ?x401 ?x401) (* 2 (* ?x401 ?x401 ?x401)) ?x611 (* r00 ?x401 ?x401) ?x532 (* (- 2) (* x00 ?x790 ?x790 ?x790)))))
 (let (($x278 (not (= ?x893 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (and (= (+ r ?x124 ?x125 ?x123 ?x35 ?x36) 0) $x278))))))))))))))) :qid k!26))
 ))
 (let ((?x631 (lambda ((r Int) (x Int) )(let ((?x904 (* 2 (* r r r x00))))
 (let ((?x1018 (* 6 (* r x00))))
 (let ((?x1017 (* (- 1) (* x x r00))))
 (let ((?x1016 (* 2 (* r x r00))))
 (let ((?x715 (* r r r r00 r00)))
 (let ((?x732 (* 3 (* r r00 r00))))
 (let ((?x1015 (* (- 2) (* x x x))))
 (let ((?x1007 (* (- 1) (* r r x x))))
 (let ((?x475 (* x x r00 r00)))
 (let ((?x482 (* (- 2) (* r x r00 r00))))
 (let ((?x1006 (* 4 (* r r r00 r00))))
 (let ((?x1005 (* (- 1) (* r r r r r))))
 (let ((?x348 (* r r r)))
 (let ((?x1000 (* (- 4) (* r x x00))))
 (let ((?x999 (* 8 (* r r x00))))
 (let ((?x255 (* 2 (* x x x00))))
 (let ((?x998 (* (- 1) (* r r r r00))))
 (let ((?x997 (* (- 4) (* r r r00))))
 (let ((?x996 (* (- 3) (* r r00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x1053 (+ r ?x123 ?x124 (* 2 (* r r)) ?x35 ?x36 (* (- 6) (* r x)) ?x996 ?x997 ?x998 ?x255 ?x999 ?x1000 ?x348 (* (- 3) (* r r r r)) ?x1005 ?x1006 ?x482 ?x475 (* (- 10) (* r r x)) (* 5 (* r x x)) ?x1007 ?x1015 ?x732 ?x715 ?x1016 ?x1017 ?x1018 ?x904)))
 (let (($x127 (= (+ r ?x123 ?x124 (* (- 1) (* r r)) ?x35 ?x36) 0)))
 (let (($x770 (and $x127 (not (= ?x1053 0)))))
 (let ((?x532 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x611 (* (- 1) (* r00 r00 (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x74 (* (- 1) r)))
 (let ((?x401 (+ x ?x74)))
 (let ((?x287 (* (- 1) (* (+ 1 r) (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x790 (+ 1 r)))
 (let ((?x893 (+ (* 2 (* ?x790 ?x790 ?x790 ?x401)) (* r00 ?x790 ?x790 ?x790) (* (- 2) (* x00 ?x401 ?x401)) (* ?x790 ?x790 ?x790 ?x790 ?x790) (* (- 1) (* r00 r00 ?x401 ?x401)) ?x287 (* ?x790 ?x790 ?x401 ?x401) (* 2 (* ?x401 ?x401 ?x401)) ?x611 (* r00 ?x401 ?x401) ?x532 (* (- 2) (* x00 ?x790 ?x790 ?x790)))))
 (let (($x278 (not (= ?x893 0))))
 (let (($x750 (and (= (+ r ?x124 (* (- 1) (* r r)) ?x123 ?x35 ?x36) 0) $x278)))
 (rewrite (= $x750 $x770))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x701 (exists ((r Int) (x Int) )(! (let ((?x532 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x611 (* (- 1) (* r00 r00 (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x74 (* (- 1) r)))
 (let ((?x401 (+ x ?x74)))
 (let ((?x287 (* (- 1) (* (+ 1 r) (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x790 (+ 1 r)))
 (let ((?x893 (+ (* 2 (* ?x790 ?x790 ?x790 ?x401)) (* r00 ?x790 ?x790 ?x790) (* (- 2) (* x00 ?x401 ?x401)) (* ?x790 ?x790 ?x790 ?x790 ?x790) (* (- 1) (* r00 r00 ?x401 ?x401)) ?x287 (* ?x790 ?x790 ?x401 ?x401) (* 2 (* ?x401 ?x401 ?x401)) ?x611 (* r00 ?x401 ?x401) ?x532 (* (- 2) (* x00 ?x790 ?x790 ?x790)))))
 (let (($x278 (not (= ?x893 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x762 (* (- 1) ?x36)))
 (let ((?x733 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x74 r00 ?x30 ?x32 ?x733 ?x762) 0) $x278)))))))))))))) :qid k!26))
 ))
 (let ((?x753 (lambda ((r Int) (x Int) )(let ((?x532 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x611 (* (- 1) (* r00 r00 (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x74 (* (- 1) r)))
 (let ((?x401 (+ x ?x74)))
 (let ((?x287 (* (- 1) (* (+ 1 r) (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x790 (+ 1 r)))
 (let ((?x893 (+ (* 2 (* ?x790 ?x790 ?x790 ?x401)) (* r00 ?x790 ?x790 ?x790) (* (- 2) (* x00 ?x401 ?x401)) (* ?x790 ?x790 ?x790 ?x790 ?x790) (* (- 1) (* r00 r00 ?x401 ?x401)) ?x287 (* ?x790 ?x790 ?x401 ?x401) (* 2 (* ?x401 ?x401 ?x401)) ?x611 (* r00 ?x401 ?x401) ?x532 (* (- 2) (* x00 ?x790 ?x790 ?x790)))))
 (let (($x278 (not (= ?x893 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (let (($x750 (and (= (+ r ?x124 ?x125 ?x123 ?x35 ?x36) 0) $x278)))
 (let (($x169 (= (+ ?x74 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x622 (and $x169 $x278)))
 (rewrite (= $x622 $x750))))))))))))))))))))
 ))
 (let (($x69 (exists ((r Int) (x Int) )(! (let ((?x41 (+ r 1)))
 (let ((?x45 (+ (* 2 ?x41 ?x41 ?x41 (- x r)) (* ?x41 ?x41 ?x41 r00))))
 (let ((?x49 (+ (- ?x45 (* 2 (- x r) (- x r) x00)) (* ?x41 ?x41 ?x41 ?x41 ?x41))))
 (let ((?x53 (- (- ?x49 (* r00 r00 (- x r) (- x r))) (* ?x41 ?x41 ?x41 ?x41))))
 (let ((?x56 (+ ?x53 (* ?x41 ?x41 (- x r) (- x r)) (* 2 (- x r) (- x r) (- x r)))))
 (let ((?x60 (+ (- ?x56 (* ?x41 ?x41 ?x41 r00 r00)) (* r00 (- x r) (- x r)))))
 (let ((?x64 (- (- ?x60 (* ?x41 (- x r) (- x r))) (* 2 ?x41 ?x41 ?x41 x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x64 0)))))))))))))) :qid k!26))
 ))
 (let ((?x153 (lambda ((r Int) (x Int) )(let ((?x532 (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let ((?x611 (* (- 1) (* r00 r00 (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x74 (* (- 1) r)))
 (let ((?x401 (+ x ?x74)))
 (let ((?x287 (* (- 1) (* (+ 1 r) (+ 1 r) (+ 1 r) (+ 1 r)))))
 (let ((?x790 (+ 1 r)))
 (let ((?x893 (+ (* 2 (* ?x790 ?x790 ?x790 ?x401)) (* r00 ?x790 ?x790 ?x790) (* (- 2) (* x00 ?x401 ?x401)) (* ?x790 ?x790 ?x790 ?x790 ?x790) (* (- 1) (* r00 r00 ?x401 ?x401)) ?x287 (* ?x790 ?x790 ?x401 ?x401) (* 2 (* ?x401 ?x401 ?x401)) ?x611 (* r00 ?x401 ?x401) ?x532 (* (- 2) (* x00 ?x790 ?x790 ?x790)))))
 (let (($x278 (not (= ?x893 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x762 (* (- 1) ?x36)))
 (let ((?x733 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x622 (and (= (+ ?x74 r00 ?x30 ?x32 ?x733 ?x762) 0) $x278)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (+ (* 2 ?x41 ?x41 ?x41 (- x r)) (* ?x41 ?x41 ?x41 r00))))
 (let ((?x49 (+ (- ?x45 (* 2 (- x r) (- x r) x00)) (* ?x41 ?x41 ?x41 ?x41 ?x41))))
 (let ((?x53 (- (- ?x49 (* r00 r00 (- x r) (- x r))) (* ?x41 ?x41 ?x41 ?x41))))
 (let ((?x56 (+ ?x53 (* ?x41 ?x41 (- x r) (- x r)) (* 2 (- x r) (- x r) (- x r)))))
 (let ((?x60 (+ (- ?x56 (* ?x41 ?x41 ?x41 r00 r00)) (* r00 (- x r) (- x r)))))
 (let ((?x64 (- (- ?x60 (* ?x41 (- x r) (- x r))) (* 2 ?x41 ?x41 ?x41 x00))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x68 (and (= ?x38 0) (or (not (= ?x64 0))))))
 (rewrite (= $x68 $x622))))))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x787 (mp (mp @x70 (quant-intro (proof-bind ?x153) (= $x69 $x701)) $x701) (rewrite (= $x701 $x701)) $x701)))
 (let ((@x292 (mp (mp @x787 (quant-intro (proof-bind ?x753) (= $x701 $x751)) $x751) (quant-intro (proof-bind ?x631) (= $x751 $x634)) $x634)))
 (let ((@x955 (mp (mp~ @x292 (sk (~ $x634 $x559)) $x559) (rewrite (= $x559 $x683)) $x683)))
 (let ((@x905 (and-elim @x955 $x694)))
 (let ((@x708 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x694) $x414)) @x905 $x414)))
 (let (($x417 (>= ?x585 0)))
 (let ((@x411 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x694) $x417)) @x905 $x417)))
 (let (($x500 (not (>= ?x606 0))))
 (let (($x263 (<= ?x606 0)))
 (let ((@x400 (lemma ((_ th-lemma arith) (hypothesis (not $x263)) @x411 @x708 @x411 @x708 false) $x263)))
 (let ((@x134 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x669 (not $x263) $x500)) (and-elim @x955 $x937) (or (not $x263) $x500))))
 ((_ th-lemma arith) (unit-resolution @x134 @x400 $x500) @x411 @x708 @x411 @x708 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             220
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.68
 :memory                    3.19
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1198880
 :num-checks                1
 :propagations              4
 :rlimit-count              3711
 :time                      0.01
 :total-time                0.01)
