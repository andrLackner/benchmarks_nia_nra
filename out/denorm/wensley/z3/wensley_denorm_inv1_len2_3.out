unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x691 (to_real a!3)))
 (let ((?x678 (to_real d!1)))
 (let ((?x615 (to_real y!0)))
 (let ((?x189 (to_real b!2)))
 (let ((?x172 (to_real d00)))
 (let ((?x846 (* (- (/ 1.0 16.0)) (* ?x172 ?x189 ?x189 ?x615 ?x615 ?x615 ?x678 ?x678 ?x691 ?x691 ?x691))))
 (let ((?x111 (* (- (/ 1.0 8.0)) (* (to_real b00) ?x189 ?x615 ?x615 ?x615 ?x678 ?x678 ?x678 ?x691))))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x871 (* (/ 1.0 8.0) (* ?x72 ?x189 ?x189 ?x615 ?x615 ?x615 ?x615 ?x678 ?x678 ?x691 ?x691))))
 (let ((?x848 (* (- (/ 1.0 8.0)) (* ?x72 ?x189 ?x189 ?x206 ?x615 ?x615 ?x615 ?x678 ?x678 ?x691 ?x691))))
 (let ((?x829 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x172 ?x189 ?x615 ?x615 ?x678 ?x678 ?x678 ?x691))))
 (let ((?x171 (to_real a00)))
 (let ((?x279 (* (/ 1.0 16.0) (* ?x171 ?x172 ?x189 ?x189 ?x615 ?x615 ?x615 ?x678 ?x678 ?x691 ?x691))))
 (let ((?x447 (+ ?x279 ?x829 ?x848 ?x871 (* (/ 1.0 16.0) (* ?x172 ?x189 ?x615 ?x615 ?x678 ?x678 ?x678 ?x691 ?x691)) (* (/ 1.0 8.0) (* ?x72 ?x189 ?x206 ?x615 ?x615 ?x678 ?x678 ?x678 ?x691)) ?x111 ?x846)))
 (let (($x223 (>= ?x447 0.0)))
 (let (($x335 (not $x223)))
 (let (($x156 (= 0.0 ?x447)))
 (let (($x713 (not $x156)))
 (let ((@x712 (symm (commutativity (= $x156 (= ?x447 0.0))) (= (= ?x447 0.0) $x156))))
 (let (($x464 (= ?x447 0.0)))
 (let (($x305 (not $x464)))
 (let ((?x539 (* ?x72 ?x678)))
 (let ((?x533 (* ?x172 ?x691)))
 (let ((?x536 (* (- 1.0) ?x533)))
 (let ((?x477 (* ?x172 ?x189)))
 (let ((?x549 (* (- 1.0) ?x477)))
 (let ((?x422 (* ?x72 ?x615)))
 (let ((?x553 (* 2.0 ?x422)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x512 (* (- (/ 1.0 64.0)) (* ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x678))))
 (let ((?x125 (* (/ 1.0 128.0) (* ?x189 ?x189 ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x678))))
 (let ((?x504 (* (- (/ 1.0 64.0)) (* ?x189 ?x678 ?x678 ?x678 ?x678 ?x678 ?x691))))
 (let ((?x487 (* (/ 1.0 64.0) (* ?x189 ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x678 ?x691))))
 (let ((?x682 (* (/ 1.0 128.0) (* ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x678 ?x691 ?x691))))
 (let ((?x530 (+ ?x682 ?x487 (* (/ 1.0 16.0) (* ?x189 ?x189 ?x189 ?x189 ?x615 ?x615 ?x615 ?x678 ?x678)) ?x504 (* (/ 3.0 32.0) (* ?x189 ?x189 ?x189 ?x615 ?x678 ?x678 ?x678 ?x678 ?x691)) (* (/ 3.0 16.0) (* ?x189 ?x189 ?x189 ?x615 ?x615 ?x678 ?x678 ?x678 ?x691)) (* (/ 1.0 16.0) (* ?x189 ?x189 ?x615 ?x615 ?x615 ?x678 ?x678 ?x691 ?x691)) (* (/ 3.0 32.0) (* ?x189 ?x189 ?x615 ?x615 ?x678 ?x678 ?x678 ?x691 ?x691)) (* (- (/ 1.0 16.0)) (* ?x189 ?x615 ?x615 ?x678 ?x678 ?x678 ?x691)) ?x125 (* (/ 1.0 8.0) (* ?x189 ?x189 ?x189 ?x615 ?x615 ?x615 ?x678 ?x678 ?x691)) (* (- (/ 1.0 16.0)) (* ?x189 ?x189 ?x615 ?x615 ?x678 ?x678 ?x678)) (* (- (/ 1.0 16.0)) (* ?x189 ?x189 ?x615 ?x678 ?x678 ?x678 ?x678)) (* (/ 3.0 32.0) (* ?x189 ?x189 ?x189 ?x189 ?x615 ?x615 ?x678 ?x678 ?x678)) (* (/ 3.0 64.0) (* ?x189 ?x189 ?x615 ?x678 ?x678 ?x678 ?x678 ?x691 ?x691)) (* (- (/ 1.0 16.0)) (* ?x189 ?x615 ?x678 ?x678 ?x678 ?x678 ?x691)) ?x512 (* (/ 3.0 64.0) (* ?x189 ?x189 ?x189 ?x189 ?x615 ?x678 ?x678 ?x678 ?x678)))))
 (let (($x421 (= (* ?x530 (+ ?x173 ?x210 ?x553 ?x549 ?x536 ?x539)) 0.0)))
 (let ((?x204 (+ ?x553 ?x549 ?x536 ?x539 ?x173 ?x210)))
 (let (($x524 (= ?x204 0.0)))
 (let (($x395 (>= ?x204 0.0)))
 (let ((?x696 (+ (* (- 1.0) (to_real (* b00 d!1))) ?x539)))
 (let (($x446 (= 0.0 ?x696)))
 (let (($x699 (= ?x696 0.0)))
 (let ((@x243 (lemma (unit-resolution ((_ th-lemma arith) $x699) (hypothesis (not $x699)) false) $x699)))
 (let ((@x100 (unit-resolution (hypothesis (not $x446)) (symm (hypothesis $x699) $x446) false)))
 (let ((@x262 (unit-resolution (lemma @x100 (or (not $x699) $x446)) @x243 $x446)))
 (let ((?x116 (+ ?x173 (* (- 1.0) (to_real (* a00 d00))))))
 (let (($x651 (>= ?x116 0.0)))
 (let (($x560 (= ?x116 0.0)))
 (let ((@x534 ((_ th-lemma arith) $x560)))
 (let (($x567 (<= ?x116 0.0)))
 (let ((@x570 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x560) $x567)) @x534 $x567)))
 (let (($x647 (>= ?x696 0.0)))
 (let ((@x676 (hypothesis $x446)))
 (let ((@x693 ((_ th-lemma arith triangle-eq) (or (not $x446) $x647))))
 (let (($x698 (<= ?x696 0.0)))
 (let ((@x634 ((_ th-lemma arith triangle-eq) (or (not $x446) $x698))))
 (let ((?x531 (+ ?x477 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x528 (>= ?x531 0.0)))
 (let (($x522 (= 0.0 ?x531)))
 (let ((@x94 (symm (commutativity (= $x522 (= ?x531 0.0))) (= (= ?x531 0.0) $x522))))
 (let ((@x569 (mp ((_ th-lemma arith) (= ?x531 0.0)) @x94 $x522)))
 (let ((@x179 ((_ th-lemma arith triangle-eq) (or (not $x522) $x528))))
 (let ((@x588 (unit-resolution @x179 @x569 $x528)))
 (let (($x552 (<= ?x531 0.0)))
 (let ((@x675 ((_ th-lemma arith triangle-eq) (or (not $x522) $x552))))
 (let ((?x558 (+ (* (- 1.0) (to_real (* b00 y00))) ?x207)))
 (let (($x559 (>= ?x558 0.0)))
 (let (($x550 (= 0.0 ?x558)))
 (let ((@x426 (symm (commutativity (= $x550 (= ?x558 0.0))) (= (= ?x558 0.0) $x550))))
 (let ((@x581 (mp ((_ th-lemma arith) (= ?x558 0.0)) @x426 $x550)))
 (let ((@x577 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x550) $x559)) @x581 $x559)))
 (let (($x205 (<= ?x558 0.0)))
 (let ((?x282 (* b00 d!1)))
 (let ((?x227 (+ ?x282 (* (- 1) (* d00 b!2)))))
 (let (($x821 (>= ?x227 0)))
 (let (($x394 (= 0 ?x227)))
 (let ((@x434 (symm (commutativity (= $x394 (= ?x227 0))) (= (= ?x227 0) $x394))))
 (let (($x184 (= ?x227 0)))
 (let (($x563 (not $x421)))
 (let (($x544 (or $x305 $x563)))
 (let ((?x511 (* (- 2) (* b!2 y!0))))
 (let ((?x774 (* a!3 d!1)))
 (let ((?x844 (+ (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) ?x774 ?x511)))
 (let (($x845 (= ?x844 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let ((?x350 (+ ?x35 ?x99 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3)))))
 (let (($x306 (= ?x350 0)))
 (let (($x427 (and $x306 $x184 $x845 $x544)))
 (let ((?x159 (+ ?x173 (* (- 1.0) (* ?x691 ?x172)) ?x210 (* (- 1.0) (* ?x189 ?x172)) (* ?x678 ?x72) (* 2.0 (* ?x615 ?x72)))))
 (let ((?x237 (+ (* (/ 1.0 16.0) (* ?x189 ?x189 ?x678 ?x678 ?x691 ?x691 ?x615 ?x615 ?x615)) (* (- (/ 1.0 16.0)) (* ?x189 ?x678 ?x678 ?x678 ?x691 ?x615 ?x615)) (* (/ 1.0 16.0) (* ?x189 ?x189 ?x189 ?x189 ?x678 ?x678 ?x615 ?x615 ?x615)) ?x125 ?x487 ?x682 (* (/ 3.0 64.0) (* ?x189 ?x189 ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x615)) (* (/ 3.0 32.0) (* ?x189 ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x691 ?x615)) (* (/ 3.0 64.0) (* ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x691 ?x691 ?x615)) (* (/ 3.0 32.0) (* ?x189 ?x189 ?x189 ?x189 ?x678 ?x678 ?x678 ?x615 ?x615)) (* (/ 3.0 16.0) (* ?x189 ?x189 ?x189 ?x678 ?x678 ?x678 ?x691 ?x615 ?x615)) (* (/ 3.0 32.0) (* ?x189 ?x189 ?x678 ?x678 ?x678 ?x691 ?x691 ?x615 ?x615)) (* (/ 1.0 8.0) (* ?x189 ?x189 ?x189 ?x678 ?x678 ?x691 ?x615 ?x615 ?x615)) (* (- (/ 1.0 16.0)) (* ?x189 ?x189 ?x678 ?x678 ?x678 ?x615 ?x615)) ?x512 ?x504 (* (- (/ 1.0 16.0)) (* ?x189 ?x189 ?x678 ?x678 ?x678 ?x678 ?x615)) (* (- (/ 1.0 16.0)) (* ?x189 ?x678 ?x678 ?x678 ?x678 ?x691 ?x615)))))
 (let ((?x110 (* (/ 1.0 8.0) (* ?x189 ?x189 ?x678 ?x678 ?x691 ?x691 ?x615 ?x615 ?x615 ?x615 ?x72))))
 (let ((?x461 (* (- (/ 1.0 8.0)) (* ?x189 ?x189 ?x678 ?x678 ?x691 ?x691 ?x615 ?x615 ?x615 ?x72 ?x206))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* ?x189 ?x189 ?x678 ?x678 ?x691 ?x691 ?x691 ?x615 ?x615 ?x615 ?x172))))
 (let ((?x398 (* (/ 1.0 16.0) (* ?x189 ?x189 ?x678 ?x678 ?x691 ?x691 ?x615 ?x615 ?x615 ?x171 ?x172))))
 (let ((?x382 (+ ?x398 ?x167 ?x461 ?x110 (* (- (/ 1.0 16.0)) (* ?x189 ?x678 ?x678 ?x678 ?x691 ?x615 ?x615 ?x171 ?x172)) (* (/ 1.0 16.0) (* ?x189 ?x678 ?x678 ?x678 ?x691 ?x691 ?x615 ?x615 ?x172)) (* (/ 1.0 8.0) (* ?x189 ?x678 ?x678 ?x678 ?x691 ?x615 ?x615 ?x72 ?x206)) (* (- (/ 1.0 8.0)) (* ?x189 ?x678 ?x678 ?x678 ?x691 ?x615 ?x615 ?x615 ?x72)))))
 (let (($x180 (= (+ ?x774 ?x511 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x784 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x99 (* 2 (* y!0 b00))) 0)))
 (let (($x828 (and $x784 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x180 (or (not (= ?x382 0.0)) (not (= (* ?x237 ?x159) 0.0))))))
 (let (($x467 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x300 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x191 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x891 (+ ?x173 ?x191 ?x210 ?x300 (* (to_real d) ?x72) (* 2.0 (* (to_real y) ?x72)))))
 (let ((?x62 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x863 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 64.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)))))
 (let ((?x336 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x62 ?x72))))
 (let ((?x325 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x72 ?x206))))
 (let ((?x314 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x62 ?x172))))
 (let ((?x304 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x171 ?x172))))
 (let ((?x378 (+ ?x304 ?x314 ?x325 ?x336 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62 ?x171 ?x172)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x172)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62 ?x72 ?x206)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62 ?x62 ?x72)))))
 (let (($x152 (not (= ?x378 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x193 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x198 (= ?x193 0)))
 (let (($x137 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (and $x131 $x137 $x198 (or $x152 (not (= (* ?x863 ?x891) 0.0))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x342 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x177 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x107 (+ ?x210 ?x173 ?x177 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x327 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x341 (+ ?x61 ?x56)))
 (let ((?x479 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x341 ?x341 ?x327 ?x327 ?x327)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x341 ?x327 ?x327)))))
 (let ((?x101 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x59 ?x59 ?x59 ?x56 ?x61)))))
 (let ((?x109 (* ?x101 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x501 (or (not (= ?x109 0.0)) (not (= (* ?x479 ?x107) 0.0)))))
 (let ((?x514 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x175 (= ?x514 0)))
 (let ((?x799 (* d00 a)))
 (let ((?x480 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x799)))
 (and (= ?x480 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x175 $x501))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x706 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x300 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x191 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x891 (+ ?x173 ?x191 ?x210 ?x300 (* (to_real d) ?x72) (* 2.0 (* (to_real y) ?x72)))))
 (let ((?x62 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x863 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 64.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)))))
 (let ((?x336 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x62 ?x72))))
 (let ((?x325 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x72 ?x206))))
 (let ((?x314 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x62 ?x172))))
 (let ((?x304 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x62 ?x171 ?x172))))
 (let ((?x378 (+ ?x304 ?x314 ?x325 ?x336 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62 ?x171 ?x172)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62 ?x62 ?x172)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62 ?x72 ?x206)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x62 ?x62 ?x72)))))
 (let (($x152 (not (= ?x378 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x193 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x198 (= ?x193 0)))
 (let (($x137 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (let (($x903 (and $x131 $x137 $x198 (or $x152 (not (= (* ?x863 ?x891) 0.0))))))
 (let ((?x107 (+ ?x210 ?x173 (* 2.0 (* ?x72 (+ ?x62 (* (/ 1.0 2.0) ?x59)))) (* (- 1.0) (* ?x172 (+ ?x61 ?x56))))))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x327 (+ ?x62 ?x229)))
 (let ((?x341 (+ ?x61 ?x56)))
 (let ((?x479 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x341 ?x341 ?x327 ?x327 ?x327)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x341 ?x327 ?x327)))))
 (let ((?x101 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x59 ?x59 ?x59 ?x56 ?x61)))))
 (let ((?x109 (* ?x101 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x501 (or (not (= ?x109 0.0)) (not (= (* ?x479 ?x107) 0.0)))))
 (let ((?x514 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x175 (= ?x514 0)))
 (let ((?x799 (* d00 a)))
 (let (($x498 (= (+ (* 2 ?x98) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x799) 0)))
 (let (($x566 (and $x498 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x175 $x501)))
 (rewrite (= $x566 $x903))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x417 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x177 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x107 (+ ?x210 ?x173 ?x177 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x327 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x341 (+ ?x61 ?x56)))
 (let ((?x479 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x341 ?x341 ?x327 ?x327 ?x327)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x341 ?x327 ?x327)))))
 (let ((?x101 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x59 ?x59 ?x59 ?x56 ?x61)))))
 (let ((?x109 (* ?x101 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x501 (or (not (= ?x109 0.0)) (not (= (* ?x479 ?x107) 0.0)))))
 (let ((?x514 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x175 (= ?x514 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x708 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x708 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x175 $x501))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x412 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x177 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x107 (+ ?x210 ?x173 ?x177 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x327 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x341 (+ ?x61 ?x56)))
 (let ((?x479 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x341 ?x341 ?x327 ?x327 ?x327)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x341 ?x327 ?x327)))))
 (let ((?x101 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x59 ?x59 ?x59 ?x56 ?x61)))))
 (let ((?x109 (* ?x101 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x501 (or (not (= ?x109 0.0)) (not (= (* ?x479 ?x107) 0.0)))))
 (let ((?x514 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x175 (= ?x514 0)))
 (let ((?x799 (* d00 a)))
 (let ((?x480 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x799)))
 (let (($x566 (and (= ?x480 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x175 $x501)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x291 (and (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) ?x799)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x175 $x501)))
 (rewrite (= $x291 $x566))))))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x62 (to_real y)))
 (let ((?x71 (+ ?x62 ?x60)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (+ a b)))
 (let ((?x81 (to_real ?x77)))
 (let ((?x84 (- (* ?x81 ?x81 ?x58 ?x58 ?x60 ?x60 ?x71 ?x71 ?x71) (* ?x81 ?x58 ?x60 ?x60 ?x60 ?x71 ?x71))))
 (let ((?x35 (* a00 d00)))
 (let ((?x75 (to_real ?x35)))
 (let ((?x76 (+ (to_real (* (- 2) b00 y00)) ?x75 (* ?x57 (to_real b00) ?x71))))
 (let ((?x65 (- (* (to_real a) (to_real a) ?x58 ?x58 ?x60 ?x60 ?x62 ?x62 ?x62) (* (to_real a) ?x58 ?x60 ?x60 ?x60 ?x62 ?x62))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x88 (or (not (= (* (to_real ?x39) ?x65) ?x68)) (not (= (* (- ?x76 (to_real (* ?x77 d00))) ?x84) ?x68)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x88))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x455 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x177 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x107 (+ ?x210 ?x173 ?x177 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x327 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x341 (+ ?x61 ?x56)))
 (let ((?x479 (+ (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x341 ?x341 ?x327 ?x327 ?x327)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x56 ?x341 ?x327 ?x327)))))
 (let ((?x101 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x59 ?x59 ?x59 ?x56 ?x61)))))
 (let ((?x109 (* ?x101 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x501 (or (not (= ?x109 0.0)) (not (= (* ?x479 ?x107) 0.0)))))
 (let ((?x514 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x175 (= ?x514 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x708 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x291 (and $x708 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x175 $x501)))
 (let ((?x68 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x71 (+ ?x62 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (+ a b)))
 (let ((?x81 (to_real ?x77)))
 (let ((?x84 (- (* ?x81 ?x81 ?x58 ?x58 ?x60 ?x60 ?x71 ?x71 ?x71) (* ?x81 ?x58 ?x60 ?x60 ?x60 ?x71 ?x71))))
 (let ((?x75 (to_real ?x35)))
 (let ((?x80 (- (+ (to_real (* (- 2) b00 y00)) ?x75 (* ?x57 ?x72 ?x71)) (to_real (* ?x77 d00)))))
 (let ((?x65 (- (* ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x62 ?x62 ?x62) (* ?x61 ?x58 ?x60 ?x60 ?x60 ?x62 ?x62))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x88 (or (not (= (* (to_real ?x39) ?x65) ?x68)) (not (= (* ?x80 ?x84) ?x68)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x89 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x88)))
 (rewrite (= $x89 $x291)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x285 (mp (mp @x91 (quant-intro (proof-bind ?x455) (= $x90 $x417)) $x417) (rewrite (= $x417 $x417)) $x417)))
 (let ((@x453 (mp (mp @x285 (quant-intro (proof-bind ?x412) (= $x417 $x342)) $x342) (quant-intro (proof-bind ?x706) (= $x342 $x467)) $x467)))
 (let ((@x115 (mp (mp~ @x453 (sk (~ $x467 $x828)) $x828) (rewrite (= $x828 $x427)) $x427)))
 (let ((@x642 (mp (and-elim @x115 $x184) @x434 $x394)))
 (let ((@x439 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x394) $x821)) @x642 $x821)))
 (let (($x755 (<= ?x227 0)))
 (let ((@x644 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x394) $x755)) @x642 $x755)))
 (let (($x360 (>= ?x350 0)))
 (let (($x358 (= 0 ?x350)))
 (let ((@x605 (mp (and-elim @x115 $x306) (symm (commutativity (= $x358 $x306)) (= $x306 $x358)) $x358)))
 (let ((@x663 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x358) $x360)) @x605 $x360)))
 (let (($x369 (<= ?x350 0)))
 (let ((@x607 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x358) $x369)) @x605 $x369)))
 (let (($x437 (not $x698)))
 (let (($x661 (not $x755)))
 (let (($x654 (not $x528)))
 (let (($x265 (not $x647)))
 (let (($x436 (not $x821)))
 (let (($x655 (not $x552)))
 (let (($x649 (not $x360)))
 (let (($x653 (not $x369)))
 (let (($x664 (or $x653 $x649 (not $x559) $x655 (not $x205) $x436 $x265 $x654 $x395 (not $x567) (not $x651) $x661 $x437)))
 (let ((@x216 (unit-resolution ((_ th-lemma arith) $x664) @x607 @x663 @x644 @x439 (hypothesis (not $x395)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x550) $x205)) @x581 $x205) @x577 (unit-resolution @x675 @x569 $x552) @x588 (unit-resolution @x634 @x676 $x698) (unit-resolution @x693 @x676 $x647) @x570 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x560) $x651)) @x534 $x651) false)))
 (let ((@x230 (unit-resolution (lemma @x216 (or (not $x446) $x395)) @x262 $x395)))
 (let (($x308 (<= ?x204 0.0)))
 (let ((?x513 (+ ?x422 (* (- 1.0) (to_real (* b00 y!0))))))
 (let (($x419 (<= ?x513 0.0)))
 (let (($x517 (= 0.0 ?x513)))
 (let ((@x596 (symm (commutativity (= $x517 (= ?x513 0.0))) (= (= ?x513 0.0) $x517))))
 (let ((@x597 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x517) $x419)) (mp ((_ th-lemma arith) (= ?x513 0.0)) @x596 $x517) $x419)))
 (let ((?x415 (+ ?x533 (* (- 1.0) (to_real (* d00 a!3))))))
 (let (($x502 (>= ?x415 0.0)))
 (let (($x482 (= 0.0 ?x415)))
 (let ((@x613 (symm (commutativity (= $x482 (= ?x415 0.0))) (= (= ?x415 0.0) $x482))))
 (let ((@x623 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x482) $x502)) (mp ((_ th-lemma arith) (= ?x415 0.0)) @x613 $x482) $x502)))
 (let ((@x624 ((_ th-lemma arith) $x699)))
 (let ((@x636 (unit-resolution @x634 (mp @x624 (symm (commutativity (= $x446 $x699)) (= $x699 $x446)) $x446) $x698)))
 (let ((@x646 ((_ th-lemma arith) @x644 @x636 @x623 @x607 @x597 @x588 (hypothesis (not $x308)) @x577 @x570 false)))
 (let ((@x648 (lemma @x646 $x308)))
 (let ((@x236 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x524 (not $x308) (not $x395))) @x648 @x230 $x524)))
 (let (($x245 (or (not $x524) $x421)))
 (let ((@x383 (unit-resolution ((_ th-lemma arith) $x245) (hypothesis $x563) (hypothesis $x524) false)))
 (let ((@x825 (unit-resolution (and-elim @x115 $x544) (unit-resolution (lemma @x383 $x245) @x236 $x421) $x305)))
 (let (($x160 (<= ?x447 0.0)))
 (let ((?x400 (* d00 b!2)))
 (let ((?x527 (to_real ?x400)))
 (let ((?x370 (+ ?x549 ?x527)))
 (let (($x377 (<= ?x370 0.0)))
 (let (($x740 (= ?x370 0.0)))
 (let ((@x270 (lemma (unit-resolution ((_ th-lemma arith) $x740) (hypothesis (not $x740)) false) $x740)))
 (let ((@x246 (lemma ((_ th-lemma arith) (hypothesis $x654) (hypothesis $x377) false) (or (not $x377) $x528))))
 (let ((@x208 (unit-resolution @x246 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x377)) @x270 $x377) $x528)))
 (let (($x381 (>= ?x370 0.0)))
 (let ((@x818 (unit-resolution ((_ th-lemma arith) (or (not $x381) $x552)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x381)) @x270 $x381) $x552)))
 (let (($x315 (>= ?x844 0)))
 (let (($x367 (= 0 ?x844)))
 (let ((@x476 (mp (and-elim @x115 $x845) (symm (commutativity (= $x367 $x845)) (= $x845 $x367)) $x367)))
 (let ((@x486 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x367) $x315)) @x476 $x315)))
 (let (($x359 (<= ?x844 0)))
 (let ((@x575 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x367) $x359)) @x476 $x359)))
 (let (($x174 (not $x359)))
 (let (($x328 (not $x315)))
 (let (($x580 (not $x308)))
 (let (($x440 (not $x395)))
 (let ((@x283 ((_ th-lemma arith) (or $x661 $x436 $x440 $x580 $x655 $x160 $x328 $x265 $x174 $x437 $x654))))
 (let ((@x364 (unit-resolution @x283 @x644 @x439 @x575 @x486 (hypothesis (not $x160)) @x648 @x230 (unit-resolution @x634 @x262 $x698) (unit-resolution @x693 @x262 $x647) (unit-resolution @x675 (hypothesis $x522) $x552) (unit-resolution @x179 (hypothesis $x522) $x528) false)))
 (let ((@x220 (unit-resolution (lemma @x364 (or (not $x522) $x160)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x522 $x655 $x654)) @x818 @x208 $x522) $x160)))
 (let ((@x851 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x156 (not $x160) $x335)) @x220 (mp @x825 (monotonicity @x712 (= $x305 $x713)) $x713) $x335)))
 (unit-resolution ((_ th-lemma arith) (or $x328 $x174 $x653 $x223 $x649)) @x607 @x663 @x575 @x486 @x851 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       140
 :arith-eq-adapter                120
 :arith-bound-propagations-cheap  40
 :arith-bound-propagations-lp     12
 :arith-branch                    1
 :arith-conflicts                 161
 :arith-diseq                     63
 :arith-gcd-calls                 10
 :arith-grobner-calls             10
 :arith-grobner-conflicts         3
 :arith-horner-calls              10
 :arith-horner-cross-nested-forms 29
 :arith-lower                     125
 :arith-make-feasible             94
 :arith-max-columns               100
 :arith-max-rows                  34
 :arith-nla-explanations          245
 :arith-nla-lemmas                156
 :arith-patches                   10
 :arith-patches-success           9
 :arith-propagations              40
 :arith-upper                     99
 :conflicts                       16
 :decisions                       158
 :del-clause                      551
 :final-checks                    71
 :max-memory                      6.82
 :memory                          3.19
 :minimized-lits                  4
 :mk-bool-var                     673
 :mk-clause                       644
 :num-allocs                      92861989
 :num-checks                      1
 :propagations                    209
 :rlimit-count                    9114
 :time                            0.13
 :total-time                      0.13)
