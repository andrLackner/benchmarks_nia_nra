unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x487 (* (- 1) k!2)))
 (let ((?x178 (* 2 n!0)))
 (let ((?x379 (+ ?x178 ?x487 (* 2 (* n!0 n!0)))))
 (let (($x1627 (>= ?x379 (- 2))))
 (let ((?x501 (* 3 n!0)))
 (let ((?x502 (+ ?x501 ?x487 (* 3 (* n!0 n!0)))))
 (let (($x598 (<= ?x502 (- 1))))
 (let (($x506 (= ?x502 (- 1))))
 (let ((?x469 (* n!0 k!2)))
 (let ((?x326 (* (- 3) c!3)))
 (let ((?x177 (* (- 3) k!2)))
 (let ((?x519 (+ 3 ?x178 ?x177 ?x326 ?x469 (* n!0 m!1))))
 (let ((?x512 (+ k!2 c!3)))
 (let ((?x507 (+ m!1 k!2)))
 (let ((?x386 (+ 6 m!1)))
 (let ((?x525 (* ?x386 ?x386 ?x386 ?x386 ?x507 ?x507 ?x507 ?x507 ?x507 ?x507 ?x507 ?x507 ?x512 ?x512 ?x512 ?x512 ?x512 ?x512 ?x519)))
 (let (($x515 (= ?x525 0)))
 (let (($x529 (not $x515)))
 (let ((?x490 (+ ?x178 ?x487 ?x326 ?x469)))
 (let (($x489 (= ?x490 (- 1))))
 (let ((?x189 (* k!2 k!2)))
 (let ((?x467 (+ ?x189 (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let (($x466 (= ?x467 (- 4))))
 (let ((?x286 (* (- 1) m!1)))
 (let ((?x297 (+ (* 6 n!0) ?x286)))
 (let (($x296 (= ?x297 (- 6))))
 (let (($x517 (and $x296 $x466 $x489 $x506 $x529)))
 (let ((?x636 (+ c!3 k!2)))
 (let ((?x243 (+ k!2 m!1)))
 (let ((?x179 (* ?x386 ?x386 ?x386 ?x386 ?x243 ?x243 ?x243 ?x243 ?x243 ?x243 ?x243 ?x243 ?x636 ?x636 ?x636 ?x636 ?x636 ?x636 (+ 3 ?x326 ?x177 ?x178 (* k!2 n!0) (* m!1 n!0)))))
 (let (($x253 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x108 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x189) (* 9 (* c!3 n!0)))))
 (let (($x181 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x108 4) $x253 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x179 0)))))
 (let (($x455 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x403 (+ 3 ?x215 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x232 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x403)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x206 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x202 (= ?x206 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 $x202 $x254 $x292 (not (= ?x232 0)))))))))))))))))) :qid k!34))
 ))
 (let (($x153 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x383 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= ?x383 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 (not (= ?x624 0))))))))))))))) :qid k!34))
 ))
 (let ((?x219 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x403 (+ 3 ?x215 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x232 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x403)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x206 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x202 (= ?x206 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x197 (and $x118 $x202 $x254 $x292 (not (= ?x232 0)))))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) ?x71) (* (- 1) m) ?x59)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x383 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x176 (and $x118 (= ?x383 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 (not (= ?x624 0)))))
 (rewrite (= $x176 $x197))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x78 (- 1)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let ((?x80 (* ?x77 ?x78 ?x68 ?x71 ?x78 ?x68 ?x68 ?x68 ?x71 ?x79 ?x79 ?x79 ?x68 ?x68 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x79)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x80 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x167 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x215 (* (- 3) c)))
 (let ((?x419 (+ 3 ?x215 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x410 (+ 6 m)))
 (let ((?x624 (* ?x410 ?x410 ?x410 ?x410 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x419)))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x383 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x176 (and $x118 (= ?x383 (- 4)) (= (+ ?x215 (* n k) (* (- 1) k) ?x59) (- 1)) $x143 (not (= ?x624 0)))))
 (let ((?x79 (+ m 6)))
 (let ((?x78 (- 1)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let ((?x80 (* ?x77 ?x78 ?x68 ?x71 ?x78 ?x68 ?x68 ?x68 ?x71 ?x79 ?x79 ?x79 ?x68 ?x68 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x79)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x80 0))))))
 (rewrite (= $x84 $x176)))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x310 (mp (mp @x86 (quant-intro (proof-bind ?x167) (= $x85 $x153)) $x153) (rewrite (= $x153 $x153)) $x153)))
 (let ((@x363 (mp~ (mp @x310 (quant-intro (proof-bind ?x219) (= $x153 $x455)) $x455) (sk (~ $x455 $x181)) $x181)))
 (let ((@x683 (mp @x363 (rewrite (= $x181 $x517)) $x517)))
 (let ((@x497 (and-elim @x683 $x506)))
 (let ((@x626 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x506) $x598)) @x497 $x598)))
 (let (($x596 (>= ?x502 (- 1))))
 (let ((@x359 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x506) $x596)) @x497 $x596)))
 (let (($x588 (<= ?x297 (- 6))))
 (let ((@x521 (and-elim @x683 $x296)))
 (let ((@x399 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x296) $x588)) @x521 $x588)))
 (let (($x594 (>= ?x297 (- 6))))
 (let ((@x622 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x296) $x594)) @x521 $x594)))
 (let (($x595 (<= ?x490 (- 1))))
 (let ((@x499 (and-elim @x683 $x489)))
 (let ((@x392 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x489) $x595)) @x499 $x595)))
 (let (($x590 (>= ?x490 (- 1))))
 (let ((@x404 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x489) $x590)) @x499 $x590)))
 (let (($x318 (<= ?x507 0)))
 (let (($x276 (not $x318)))
 (let ((@x1245 ((_ th-lemma arith) (hypothesis $x318) @x622 @x399 @x622 @x399 @x622 @x399 @x404 @x392 @x359 @x626 @x404 @x392 false)))
 (let ((@x1098 (lemma @x1245 $x276)))
 (let (($x331 (<= ?x512 0)))
 (let ((@x978 (hypothesis $x276)))
 (let (($x1179 (>= (+ (* 5 n!0) ?x286) (- 4))))
 (let (($x1253 (not $x1179)))
 (let ((@x324 (hypothesis (not $x331))))
 (let (($x825 (>= ?x519 0)))
 (let (($x592 (<= ?x467 (- 4))))
 (let ((@x494 (and-elim @x683 $x466)))
 (let ((@x420 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x466) $x592)) @x494 $x592)))
 (let (($x593 (>= ?x467 (- 4))))
 (let ((@x557 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x466) $x593)) @x494 $x593)))
 (let ((@x846 ((_ th-lemma arith) (hypothesis (not $x825)) @x622 @x399 @x622 @x399 @x404 @x392 @x557 @x420 @x404 @x392 @x557 @x420 @x557 @x420 @x557 @x420 @x622 @x399 @x404 @x392 @x404 @x392 @x359 @x626 false)))
 (let ((@x847 (lemma @x846 $x825)))
 (let ((@x997 (hypothesis $x1179)))
 (let ((@x1107 (lemma ((_ th-lemma arith) @x997 @x399 @x978 @x324 @x997 @x399 @x847 false) (or $x1253 $x318 $x331))))
 (let (($x845 (not (<= ?x525 0))))
 (let (($x599 (>= ?x525 0)))
 (let ((@x856 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x515 $x845 (not $x599))) (and-elim @x683 $x529) (or $x845 (not $x599)))))
 (let ((@x857 (unit-resolution @x856 (lemma ((_ th-lemma arith farkas 1 1) (hypothesis (not $x599)) @x847 false) $x599) $x845)))
 (let ((@x1266 ((_ th-lemma arith) @x857 @x324 @x622 (unit-resolution @x1107 @x978 @x324 $x1253) @x978 @x622 @x399 @x622 @x399 @x622 @x399 @x359 @x626 @x404 @x392 @x622 @x399 false)))
 (let ((@x1448 ((_ th-lemma arith farkas 1 1 1) @x857 (hypothesis (>= ?x512 0)) (unit-resolution (lemma @x1266 (or $x318 $x331)) @x1098 $x331) false)))
 (let ((@x1449 (lemma @x1448 (not (>= ?x512 0)))))
 (let ((@x1631 ((_ th-lemma arith) @x857 @x1449 @x626 (hypothesis $x1627) @x1098 @x1098 @x404 @x392 @x359 @x626 @x359 @x626 @x622 @x399 @x359 @x626 @x622 @x399 @x359 @x626 @x622 @x399 @x359 @x626 false)))
 (let (($x380 (>= ?x379 0)))
 (let (($x607 (>= n!0 0)))
 (let (($x804 (<= ?x386 0)))
 (let (($x720 (not $x804)))
 (let (($x805 (>= ?x386 0)))
 (let (($x1516 (>= (+ ?x501 (* n!0 n!0)) (- 1))))
 (let (($x747 (not $x805)))
 (let ((@x748 (hypothesis $x747)))
 (let ((@x1388 ((_ th-lemma arith) @x748 @x748 @x622 @x399 @x622 @x399 @x1098 @x359 @x622 (hypothesis (not $x1516)) @x359 @x626 @x622 @x399 false)))
 (let ((@x1621 ((_ th-lemma arith) @x857 @x1449 @x748 (unit-resolution (lemma @x1388 (or $x1516 $x805)) @x748 $x1516) @x626 @x399 @x622 @x399 @x404 @x392 @x359 @x626 false)))
 (let ((@x724 (lemma ((_ th-lemma arith farkas 1 1 1) @x857 (hypothesis $x805) (hypothesis $x804) false) (or $x720 $x747))))
 (let ((@x1435 (unit-resolution ((_ th-lemma arith assign-bounds -5 6) (or $x804 (not $x588) $x1253)) @x399 (or $x804 $x1253))))
 (let ((@x1444 (unit-resolution @x1435 (unit-resolution @x724 (lemma @x1621 $x805) $x720) $x1253)))
 (let ((@x1422 (hypothesis $x1253)))
 (let (($x621 (not $x607)))
 (let ((@x616 (hypothesis $x621)))
 (let ((@x1430 ((_ th-lemma arith farkas 1 1 1 1 1 1 1 1 1 1 1) @x857 @x626 @x616 @x622 @x1422 @x392 @x359 @x616 @x622 @x1422 @x404 false)))
 (let (($x99 (not $x380)))
 (let ((@x843 (hypothesis $x99)))
 (let ((@x325 (hypothesis $x607)))
 (let (($x751 (>= ?x469 0)))
 (let (($x859 (not $x751)))
 (let ((@x858 ((_ th-lemma arith) @x857 @x325 (hypothesis $x751) @x392 @x843 @x359 @x399 @x325 @x399 @x325 @x843 @x359 @x622 @x399 @x622 @x399 @x359 @x626 @x404 @x392 @x359 @x626 @x622 @x399 @x359 @x626 false)))
 (let ((@x864 ((_ th-lemma arith farkas 1 1 1 1) (unit-resolution (lemma @x858 (or $x859 $x621 $x380)) @x325 @x843 $x859) @x325 @x843 @x359 false)))
 (let ((@x1450 (unit-resolution (lemma @x864 (or $x621 $x380)) (unit-resolution (lemma @x1430 (or $x1179 $x607)) @x1444 $x607) $x380)))
 (unit-resolution (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x1627 $x99)) @x1450 $x1627) (lemma @x1631 (not $x1627)) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 39
 :arith-assert-diseq        13
 :arith-assert-lower        699
 :arith-assert-upper        518
 :arith-bound-prop          34
 :arith-branch-var          47
 :arith-conflicts           77
 :arith-eq-adapter          19
 :arith-fixed-eqs           138
 :arith-gcd-tests           443
 :arith-gomory-cuts         32
 :arith-grobner             83
 :arith-ineq-splits         47
 :arith-max-min             3630
 :arith-nonlinear-bounds    162
 :arith-nonlinear-horner    748
 :arith-num-rows            15
 :arith-patches             101
 :arith-patches_succ        7
 :arith-pivots              874
 :arith-pseudo-nonlinear    98
 :arith-row-summations      5135
 :arith-tableau-max-columns 41
 :arith-tableau-max-rows    15
 :conflicts                 84
 :decisions                 457
 :del-clause                233
 :final-checks              264
 :max-memory                19.99
 :memory                    19.30
 :minimized-lits            16
 :mk-bool-var               360
 :mk-clause                 254
 :num-allocs                1600564
 :num-checks                1
 :propagations              549
 :rlimit-count              303012
 :time                      0.06
 :total-time                0.08)
