unsat
((set-logic NIA)
(proof
(let (($x54 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x47 (* ?x45 ?x45 ?x43 y00)))
 (let ((?x46 (* ?x45 ?x45 ?x45 ?x43 ?x43)))
 (let ((?x44 (* ?x43 ?x43 ?x43)))
 (let ((?x48 (+ 1 ?x44 ?x46 ?x47)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x52))))))))))))))) :qid k!29))
 ))
 (let (($x401 (= $x54 false)))
 (let (($x394 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x400 (elim-unused (= $x394 false))))
 (let (($x397 (= $x54 $x394)))
 (let ((?x444 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x47 (* ?x45 ?x45 ?x43 y00)))
 (let ((?x46 (* ?x45 ?x45 ?x45 ?x43 ?x43)))
 (let ((?x44 (* ?x43 ?x43 ?x43)))
 (let ((?x48 (+ 1 ?x44 ?x46 ?x47)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x53 (and $x33 $x41 $x52)))
 (let (($x392 (= $x53 false)))
 (let (($x431 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x81 (= (+ (* (- 1) y00) y) 0)))
 (let (($x438 (and $x81 $x431 false)))
 (let (($x385 (= $x52 false)))
 (let ((@x384 (rewrite (= (or false) false))))
 (let (($x380 (or false)))
 (let (($x381 (= $x52 $x380)))
 (let (($x378 (= $x51 false)))
 (let ((@x377 (rewrite (= (not true) false))))
 (let (($x373 (not true)))
 (let (($x374 (= $x51 $x373)))
 (let (($x371 (= $x50 true)))
 (let ((@x370 (rewrite (= (= 0 0) true))))
 (let (($x366 (= 0 0)))
 (let (($x367 (= $x50 $x366)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x76 (+ r ?x59)))
 (let ((?x151 (+ 1 q)))
 (let ((?x154 (* ?x151 ?x151 ?x151 ?x76 ?x76)))
 (let ((?x79 (* ?x76 ?x76 ?x76)))
 (let ((?x413 (+ 1 ?x79 ?x154 (* y00 ?x151 ?x151 ?x76))))
 (let ((?x418 (* 0 ?x413)))
 (let ((@x73 (trans (monotonicity (rewrite (= ?x30 ?x59)) (= ?x42 (+ ?x59 y00))) (rewrite (= (+ ?x59 y00) 0)) (= ?x42 0))))
 (let ((@x428 (trans (monotonicity @x73 (rewrite (= ?x48 ?x413)) (= ?x49 ?x418)) (rewrite (= ?x418 0)) $x50)))
 (let ((@x435 (trans (monotonicity (trans (monotonicity @x428 $x367) @x370 $x371) $x374) @x377 $x378)))
 (let ((@x440 (monotonicity (rewrite (= $x33 $x81)) (rewrite (= $x41 $x431)) (trans (monotonicity @x435 $x381) @x384 $x385) (= $x53 $x438))))
 (trans @x440 (rewrite (= $x438 false)) $x392))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (mp @x55 (trans (quant-intro (proof-bind ?x444) $x397) @x400 $x401) false))))))))))

(:max-memory   3.38
 :memory       3.07
 :mk-bool-var  5
 :num-allocs   918621
 :rlimit-count 277
 :time         0.01
 :total-time   0.01)
