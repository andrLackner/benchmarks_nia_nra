unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x427 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x195 (>= ?x427 0)))
 (let (($x484 (= ?x427 0)))
 (let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x196 (+ ?x68 ?x75 x!1 y!0)))
 (let ((?x505 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x496 (* (- 3) x!1)))
 (let ((?x177 (+ 1 x!1)))
 (let ((?x178 (+ (- 1) y!0)))
 (let ((?x326 (* (- 1) (* ?x178 ?x178 ?x178 ?x177 ?x177 ?x177))))
 (let ((?x299 (* x!1 x!1)))
 (let ((?x345 (* (- 3) ?x299)))
 (let ((?x531 (* y!0 y!0 y!0)))
 (let ((?x504 (* x!1 y!0 y!0)))
 (let ((?x453 (* (- 3) ?x504)))
 (let ((?x493 (* 3 (* x!1 y!0))))
 (let ((?x394 (* 3 y!0)))
 (let ((?x389 (* (- 3) (* y!0 y!0))))
 (let ((?x347 (* (- 4) x!1)))
 (let ((?x70 (* x!1 y!0 y!0 y!0)))
 (let ((?x282 (* (+ (- 2) ?x70 ?x345 ?x347 ?x389 ?x394 ?x493 ?x505 ?x453 ?x531) (+ (- 1) ?x345 ?x326 ?x496 ?x505) ?x196)))
 (let (($x384 (= ?x282 0)))
 (let (($x378 (not $x384)))
 (let ((?x507 (+ 1 y!0)))
 (let ((?x464 (+ (- 1) x!1)))
 (let ((?x166 (* (- 1) (* ?x464 ?x464 ?x464 ?x507 ?x507 ?x507))))
 (let ((?x491 (* 3 ?x299)))
 (let ((?x317 (* (- 1) ?x531)))
 (let ((?x495 (* 3 ?x504)))
 (let ((?x489 (* (- 3) y!0)))
 (let ((?x532 (* (- 2) x!1)))
 (let ((?x277 (* (+ ?x70 ?x491 ?x532 ?x389 ?x489 ?x493 ?x505 ?x495 ?x317) (+ 1 ?x491 ?x496 ?x505 ?x166) ?x196)))
 (let (($x370 (= ?x277 0)))
 (let (($x286 (or (not $x370) $x378)))
 (let (($x415 (and $x484 $x286)))
 (let ((?x533 (+ x!1 y!0 ?x68 ?x75)))
 (let ((?x185 (* (+ (- 2) ?x347 ?x394 ?x389 ?x531 ?x70 ?x345 ?x493 ?x453 ?x505) (+ (- 1) ?x496 ?x326 ?x345 ?x505) ?x533)))
 (let ((?x506 (* (+ ?x532 ?x489 ?x389 ?x317 ?x70 ?x491 ?x493 ?x495 ?x505) (+ 1 ?x496 ?x166 ?x491 ?x505) ?x533)))
 (let (($x344 (and (= ?x533 0) (or (not (= ?x506 0)) (not (= ?x185 0))))))
 (let (($x525 (exists ((x Int) (y Int) )(! (let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x89 (+ x y ?x68 ?x75)))
 (let ((?x472 (* (- 1) (* x x x))))
 (let ((?x332 (* x x)))
 (let ((?x452 (* (- 3) ?x332)))
 (let ((?x237 (+ 1 x)))
 (let ((?x218 (+ (- 1) y)))
 (let ((?x369 (* (- 1) (* ?x218 ?x218 ?x218 ?x237 ?x237 ?x237))))
 (let ((?x488 (* (- 3) x)))
 (let ((?x444 (+ (- 1) ?x488 ?x369 ?x452 ?x472)))
 (let ((?x356 (* x y y)))
 (let ((?x831 (* (- 3) ?x356)))
 (let ((?x337 (* x y)))
 (let ((?x570 (* 3 ?x337)))
 (let ((?x309 (* x y y y)))
 (let ((?x297 (* y y y)))
 (let ((?x274 (* y y)))
 (let ((?x830 (* (- 3) ?x274)))
 (let ((?x403 (* 3 y)))
 (let ((?x755 (* (- 4) x)))
 (let ((?x398 (* (+ (- 2) ?x755 ?x403 ?x830 ?x297 ?x309 ?x452 ?x570 ?x831 ?x472) ?x444 ?x89)))
 (let ((?x172 (* 3 ?x332)))
 (let ((?x200 (+ 1 y)))
 (let ((?x150 (+ (- 1) x)))
 (let ((?x209 (* (- 1) (* ?x150 ?x150 ?x150 ?x200 ?x200 ?x200))))
 (let ((?x483 (+ 1 ?x488 ?x209 ?x172 ?x472)))
 (let ((?x571 (* 3 ?x356)))
 (let ((?x298 (* (- 1) ?x297)))
 (let ((?x401 (* (- 2) x)))
 (let ((?x329 (* (+ ?x401 (* (- 3) y) ?x830 ?x298 ?x309 ?x172 ?x570 ?x571 ?x472) ?x483 ?x89)))
 (let (($x94 (= ?x89 0)))
 (and $x94 (or (not (= ?x329 0)) (not (= ?x398 0)))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x397 (exists ((x Int) (y Int) )(! (let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x89 (+ x y ?x68 ?x75)))
 (let ((?x472 (* (- 1) (* x x x))))
 (let ((?x332 (* x x)))
 (let ((?x172 (* 3 ?x332)))
 (let ((?x200 (+ 1 y)))
 (let ((?x150 (+ (- 1) x)))
 (let ((?x209 (* (- 1) (* ?x150 ?x150 ?x150 ?x200 ?x200 ?x200))))
 (let ((?x488 (* (- 3) x)))
 (let ((?x483 (+ 1 ?x488 ?x209 ?x172 ?x472)))
 (let ((?x356 (* x y y)))
 (let ((?x571 (* 3 ?x356)))
 (let ((?x337 (* x y)))
 (let ((?x570 (* 3 ?x337)))
 (let ((?x309 (* x y y y)))
 (let ((?x297 (* y y y)))
 (let ((?x298 (* (- 1) ?x297)))
 (let ((?x274 (* y y)))
 (let ((?x275 (* (- 1) ?x274)))
 (let ((?x252 (* (- 1) (* y 1 y))))
 (let ((?x206 (* (- 1) (* y y 1))))
 (let ((?x183 (* (- 1) (* y 1))))
 (let ((?x160 (* (- 1) (* y 1 1))))
 (let ((?x558 (* (- 1) y)))
 (let ((?x401 (* (- 2) x)))
 (let ((?x292 (+ ?x401 ?x558 ?x160 ?x183 ?x206 ?x252 ?x275 ?x298 ?x309 ?x172 ?x570 ?x571 ?x472)))
 (let ((?x452 (* (- 3) ?x332)))
 (let ((?x237 (+ 1 x)))
 (let ((?x218 (+ (- 1) y)))
 (let ((?x369 (* (- 1) (* ?x218 ?x218 ?x218 ?x237 ?x237 ?x237))))
 (let ((?x444 (+ (- 1) ?x488 ?x369 ?x452 ?x472)))
 (let ((?x831 (* (- 3) ?x356)))
 (let ((?x829 (* 2 y)))
 (let ((?x755 (* (- 4) x)))
 (let ((?x760 (+ (- 2) ?x755 ?x829 ?x206 (* (- 2) ?x274) ?x297 ?x309 (* (- 1) (* y (- 1) x)) ?x452 (* 2 ?x337) ?x831 ?x472 (* (- 1) (* y (- 1) 1)))))
 (let (($x441 (or (not (= (* ?x760 ?x444 ?x89) 0)) (not (= (* ?x292 ?x483 ?x89) 0)))))
 (let (($x94 (= ?x89 0)))
 (and $x94 $x441))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x530 (lambda ((x Int) (y Int) )(let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x89 (+ x y ?x68 ?x75)))
 (let ((?x472 (* (- 1) (* x x x))))
 (let ((?x332 (* x x)))
 (let ((?x452 (* (- 3) ?x332)))
 (let ((?x237 (+ 1 x)))
 (let ((?x218 (+ (- 1) y)))
 (let ((?x369 (* (- 1) (* ?x218 ?x218 ?x218 ?x237 ?x237 ?x237))))
 (let ((?x488 (* (- 3) x)))
 (let ((?x444 (+ (- 1) ?x488 ?x369 ?x452 ?x472)))
 (let ((?x356 (* x y y)))
 (let ((?x831 (* (- 3) ?x356)))
 (let ((?x337 (* x y)))
 (let ((?x570 (* 3 ?x337)))
 (let ((?x309 (* x y y y)))
 (let ((?x297 (* y y y)))
 (let ((?x274 (* y y)))
 (let ((?x830 (* (- 3) ?x274)))
 (let ((?x403 (* 3 y)))
 (let ((?x755 (* (- 4) x)))
 (let ((?x398 (* (+ (- 2) ?x755 ?x403 ?x830 ?x297 ?x309 ?x452 ?x570 ?x831 ?x472) ?x444 ?x89)))
 (let ((?x172 (* 3 ?x332)))
 (let ((?x200 (+ 1 y)))
 (let ((?x150 (+ (- 1) x)))
 (let ((?x209 (* (- 1) (* ?x150 ?x150 ?x150 ?x200 ?x200 ?x200))))
 (let ((?x483 (+ 1 ?x488 ?x209 ?x172 ?x472)))
 (let ((?x571 (* 3 ?x356)))
 (let ((?x298 (* (- 1) ?x297)))
 (let ((?x401 (* (- 2) x)))
 (let ((?x329 (* (+ ?x401 (* (- 3) y) ?x830 ?x298 ?x309 ?x172 ?x570 ?x571 ?x472) ?x483 ?x89)))
 (let (($x94 (= ?x89 0)))
 (let (($x432 (and $x94 (or (not (= ?x329 0)) (not (= ?x398 0))))))
 (let ((?x275 (* (- 1) ?x274)))
 (let ((?x252 (* (- 1) (* y 1 y))))
 (let ((?x206 (* (- 1) (* y y 1))))
 (let ((?x183 (* (- 1) (* y 1))))
 (let ((?x160 (* (- 1) (* y 1 1))))
 (let ((?x558 (* (- 1) y)))
 (let ((?x292 (+ ?x401 ?x558 ?x160 ?x183 ?x206 ?x252 ?x275 ?x298 ?x309 ?x172 ?x570 ?x571 ?x472)))
 (let ((?x829 (* 2 y)))
 (let ((?x760 (+ (- 2) ?x755 ?x829 ?x206 (* (- 2) ?x274) ?x297 ?x309 (* (- 1) (* y (- 1) x)) ?x452 (* 2 ?x337) ?x831 ?x472 (* (- 1) (* y (- 1) 1)))))
 (let (($x441 (or (not (= (* ?x760 ?x444 ?x89) 0)) (not (= (* ?x292 ?x483 ?x89) 0)))))
 (let (($x745 (and $x94 $x441)))
 (rewrite (= $x745 $x432)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x377 (exists ((x Int) (y Int) )(! (let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x155 (+ x ?x68 ?x75 y)))
 (let ((?x374 (* (- 1) (* (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x237 (+ 1 x)))
 (let ((?x218 (+ (- 1) y)))
 (let ((?x369 (* (- 1) (* ?x218 ?x218 ?x218 ?x237 ?x237 ?x237))))
 (let (($x168 (not (= (* (+ ?x374 (* ?x218 ?x218 ?x218 ?x237)) (+ ?x369 ?x374) ?x155) 0))))
 (let ((?x219 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x200 (+ 1 y)))
 (let ((?x150 (+ (- 1) x)))
 (let ((?x209 (* (- 1) (* ?x150 ?x150 ?x150 ?x200 ?x200 ?x200))))
 (let (($x334 (not (= (* (+ ?x219 (* ?x150 ?x200 ?x200 ?x200)) (+ ?x209 ?x219) ?x155) 0))))
 (and (= ?x155 0) (or $x334 $x168))))))))))))))) :qid k!27))
 ))
 (let ((?x425 (lambda ((x Int) (y Int) )(let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x89 (+ x y ?x68 ?x75)))
 (let ((?x472 (* (- 1) (* x x x))))
 (let ((?x332 (* x x)))
 (let ((?x172 (* 3 ?x332)))
 (let ((?x200 (+ 1 y)))
 (let ((?x150 (+ (- 1) x)))
 (let ((?x209 (* (- 1) (* ?x150 ?x150 ?x150 ?x200 ?x200 ?x200))))
 (let ((?x488 (* (- 3) x)))
 (let ((?x483 (+ 1 ?x488 ?x209 ?x172 ?x472)))
 (let ((?x356 (* x y y)))
 (let ((?x571 (* 3 ?x356)))
 (let ((?x337 (* x y)))
 (let ((?x570 (* 3 ?x337)))
 (let ((?x309 (* x y y y)))
 (let ((?x297 (* y y y)))
 (let ((?x298 (* (- 1) ?x297)))
 (let ((?x274 (* y y)))
 (let ((?x275 (* (- 1) ?x274)))
 (let ((?x252 (* (- 1) (* y 1 y))))
 (let ((?x206 (* (- 1) (* y y 1))))
 (let ((?x183 (* (- 1) (* y 1))))
 (let ((?x160 (* (- 1) (* y 1 1))))
 (let ((?x558 (* (- 1) y)))
 (let ((?x401 (* (- 2) x)))
 (let ((?x292 (+ ?x401 ?x558 ?x160 ?x183 ?x206 ?x252 ?x275 ?x298 ?x309 ?x172 ?x570 ?x571 ?x472)))
 (let ((?x452 (* (- 3) ?x332)))
 (let ((?x237 (+ 1 x)))
 (let ((?x218 (+ (- 1) y)))
 (let ((?x369 (* (- 1) (* ?x218 ?x218 ?x218 ?x237 ?x237 ?x237))))
 (let ((?x444 (+ (- 1) ?x488 ?x369 ?x452 ?x472)))
 (let ((?x831 (* (- 3) ?x356)))
 (let ((?x829 (* 2 y)))
 (let ((?x755 (* (- 4) x)))
 (let ((?x760 (+ (- 2) ?x755 ?x829 ?x206 (* (- 2) ?x274) ?x297 ?x309 (* (- 1) (* y (- 1) x)) ?x452 (* 2 ?x337) ?x831 ?x472 (* (- 1) (* y (- 1) 1)))))
 (let (($x441 (or (not (= (* ?x760 ?x444 ?x89) 0)) (not (= (* ?x292 ?x483 ?x89) 0)))))
 (let (($x94 (= ?x89 0)))
 (let (($x745 (and $x94 $x441)))
 (let ((?x155 (+ x ?x68 ?x75 y)))
 (let ((?x276 (* (+ (* (- 1) (* ?x237 ?x237 ?x237)) (* ?x218 ?x218 ?x218 ?x237)) (+ ?x369 (* (- 1) (* ?x237 ?x237 ?x237))) ?x155)))
 (let ((?x363 (* (+ (* (- 1) (* ?x150 ?x150 ?x150)) (* ?x150 ?x200 ?x200 ?x200)) (+ ?x209 (* (- 1) (* ?x150 ?x150 ?x150))) ?x155)))
 (let (($x339 (and (= ?x155 0) (or (not (= ?x363 0)) (not (= ?x276 0))))))
 (rewrite (= $x339 $x745))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x65 (exists ((x Int) (y Int) )(! (let ((?x59 (+ (* (- 1) (+ x 1) (+ x 1) (+ x 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x60 (* (+ (- (- ?x49 y00) x00) ?x52) (- (* ?x38 ?x49 ?x49 ?x49 ?x52 ?x52 ?x52) (* ?x49 ?x49 ?x49)) ?x59)))
 (let ((?x45 (+ (* ?x38 (- x 1) (- x 1) (- x 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (- (* ?x38 ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34)) ?x45)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x60 0))))))))))))) :qid k!27))
 ))
 (let ((?x342 (lambda ((x Int) (y Int) )(let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x155 (+ x ?x68 ?x75 y)))
 (let ((?x374 (* (- 1) (* (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x237 (+ 1 x)))
 (let ((?x218 (+ (- 1) y)))
 (let ((?x369 (* (- 1) (* ?x218 ?x218 ?x218 ?x237 ?x237 ?x237))))
 (let (($x168 (not (= (* (+ ?x374 (* ?x218 ?x218 ?x218 ?x237)) (+ ?x369 ?x374) ?x155) 0))))
 (let ((?x219 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x200 (+ 1 y)))
 (let ((?x150 (+ (- 1) x)))
 (let ((?x209 (* (- 1) (* ?x150 ?x150 ?x150 ?x200 ?x200 ?x200))))
 (let (($x334 (not (= (* (+ ?x219 (* ?x150 ?x200 ?x200 ?x200)) (+ ?x209 ?x219) ?x155) 0))))
 (let (($x339 (and (= ?x155 0) (or $x334 $x168))))
 (let ((?x59 (+ (* (- 1) (+ x 1) (+ x 1) (+ x 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x60 (* (+ (- (- ?x49 y00) x00) ?x52) (- (* ?x38 ?x49 ?x49 ?x49 ?x52 ?x52 ?x52) (* ?x49 ?x49 ?x49)) ?x59)))
 (let ((?x45 (+ (* ?x38 (- x 1) (- x 1) (- x 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (- (* ?x38 ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34)) ?x45)))
 (let (($x64 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x60 0))))))
 (rewrite (= $x64 $x339)))))))))))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x202 (mp (mp @x66 (quant-intro (proof-bind ?x342) (= $x65 $x377)) $x377) (rewrite (= $x377 $x377)) $x377)))
 (let ((@x320 (mp (mp @x202 (quant-intro (proof-bind ?x425) (= $x377 $x397)) $x397) (quant-intro (proof-bind ?x530) (= $x397 $x525)) $x525)))
 (let ((@x435 (mp (mp~ @x320 (sk (~ $x525 $x344)) $x344) (rewrite (= $x344 $x415)) $x415)))
 (let ((@x388 (and-elim @x435 $x484)))
 (let ((@x392 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x484) $x195)) @x388 $x195)))
 (let (($x148 (<= ?x427 0)))
 (let ((@x450 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x484) $x148)) @x388 $x148)))
 (let (($x804 (not (<= ?x282 0))))
 (let (($x154 (>= ?x282 0)))
 (let (($x537 (>= ?x277 0)))
 (let (($x534 (<= ?x277 0)))
 (let ((@x805 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x370 (not $x534) (not $x537))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x534)) @x450 @x392 false) $x534) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x537)) @x450 @x392 false) $x537) $x370)))
 (let ((@x139 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x384 $x804 (not $x154))) (unit-resolution (and-elim @x435 $x286) @x805 $x378) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x154)) @x450 @x392 false) $x154) $x804)))
 ((_ th-lemma arith farkas 1 1 1) @x139 @x450 @x392 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             168
 :arith-nonlinear-bounds    8
 :arith-num-rows            10
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.65
 :memory                    3.15
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1218553
 :num-checks                1
 :propagations              14
 :rlimit-count              3123
 :time                      0.01
 :total-time                0.01)
