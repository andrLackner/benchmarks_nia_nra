unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x63 (* y00 q00)))
 (let ((?x236 (+ r00 ?x63 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x230 (<= ?x236 0)))
 (let (($x242 (= ?x236 0)))
 (let ((?x290 (* y00 y00 q00)))
 (let ((?x278 (* y00 r00)))
 (let ((?x173 (* q!2 q!2 r!1 r!1)))
 (let ((?x168 (* 2 (* q!2 r!1 r!1))))
 (let ((?x161 (* r!1 r!1)))
 (let ((?x203 (+ (* y00 y00 q00 q!2 q!2) (* (- 1) (* r00 r!1)) (* (- 2) (* r00 q!2 r!1)) (* y00 q!2 q!2 q!2 r!1) (* (- 1) (* y00 q00 q!2 q!2 r!1)) (* (- 2) (* y00 y00 q!2 q!2)) ?x161 ?x168 ?x173 (* (- 1) (* y00 q!2 r!1)) (* (- 1) (* y00 q00 r!1)) (* y00 q!2 q!2 r!1) (* (- 2) (* y00 q00 q!2 r!1)) (* (- 1) (* r00 q!2 q!2 r!1)) (* (- 1) (* y00 r!1)) ?x278 (* (- 1) (* y00 y00 q!2)) (* 2 (* y00 r00 q!2)) ?x290 (* 2 (* y00 y00 q00 q!2)) (* (- 1) (* y00 y00 q!2 q!2 q!2)) (* y00 r00 q!2 q!2))))
 (let (($x465 (= ?x203 0)))
 (let (($x248 (not $x465)))
 (let ((?x216 (+ y00 (* (- 1) y!0))))
 (let (($x347 (= ?x216 0)))
 (let (($x303 (and $x347 $x242 $x248)))
 (let ((?x65 (+ ?x161 (* (- 1) (* r!1 r00)) (* (- 1) (* q!2 r!1 y00)) (* (- 1) (* r!1 y00 q00)) ?x168 (* (- 2) (* q!2 r!1 r00)) (* q!2 q!2 r!1 y00) (* (- 2) (* q!2 r!1 y00 q00)) ?x173 (* (- 1) (* q!2 q!2 r!1 r00)) (* q!2 q!2 q!2 r!1 y00) (* (- 1) (* q!2 q!2 r!1 y00 q00)) (* (- 1) (* r!1 y00)) ?x278 (* (- 1) (* q!2 y00 y00)) ?x290 (* 2 (* q!2 y00 r00)) (* (- 2) (* q!2 q!2 y00 y00)) (* 2 (* q!2 y00 y00 q00)) (* q!2 q!2 y00 r00) (* (- 1) (* q!2 q!2 q!2 y00 y00)) (* q!2 q!2 y00 y00 q00))))
 (let (($x186 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x63)) 0) (not (= ?x65 0)))))
 (let (($x446 (exists ((q Int) (r Int) (y Int) )(! (let ((?x290 (* y00 y00 q00)))
 (let ((?x278 (* y00 r00)))
 (let ((?x392 (+ (* r r) (* (- 1) (* r r00)) (* (- 1) (* q r y00)) (* (- 1) (* r y00 q00)) (* 2 (* q r r)) (* (- 2) (* q r r00)) (* q q r y00) (* (- 2) (* q r y00 q00)) (* q q r r) (* (- 1) (* q q r r00)) (* q q q r y00) (* (- 1) (* q q r y00 q00)) (* (- 1) (* r y00)) ?x278 (* (- 1) (* q y00 y00)) ?x290 (* 2 (* q y00 r00)) (* (- 2) (* q q y00 y00)) (* 2 (* q y00 y00 q00)) (* q q y00 r00) (* (- 1) (* q q q y00 y00)) (* q q y00 y00 q00))))
 (let (($x92 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x92 (not (= ?x392 0))))))) :qid k!29))
 ))
 (let (($x192 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x372 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x434 (+ 1 q)))
 (let (($x353 (= (* ?x434 ?x434 (+ r ?x58) (+ r ?x58 ?x59 ?x372 (* y00 ?x434))) 0)))
 (let (($x61 (not $x353)))
 (let (($x410 (= (+ r ?x59 ?x372 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x410 $x61))))))))) :qid k!29))
 ))
 (let ((?x440 (lambda ((q Int) (r Int) (y Int) )(let ((?x290 (* y00 y00 q00)))
 (let ((?x278 (* y00 r00)))
 (let ((?x392 (+ (* r r) (* (- 1) (* r r00)) (* (- 1) (* q r y00)) (* (- 1) (* r y00 q00)) (* 2 (* q r r)) (* (- 2) (* q r r00)) (* q q r y00) (* (- 2) (* q r y00 q00)) (* q q r r) (* (- 1) (* q q r r00)) (* q q q r y00) (* (- 1) (* q q r y00 q00)) (* (- 1) (* r y00)) ?x278 (* (- 1) (* q y00 y00)) ?x290 (* 2 (* q y00 r00)) (* (- 2) (* q q y00 y00)) (* 2 (* q y00 y00 q00)) (* q q y00 r00) (* (- 1) (* q q q y00 y00)) (* q q y00 y00 q00))))
 (let (($x92 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x88 (and (= (+ y (* (- 1) y00)) 0) $x92 (not (= ?x392 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x372 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x434 (+ 1 q)))
 (let (($x353 (= (* ?x434 ?x434 (+ r ?x58) (+ r ?x58 ?x59 ?x372 (* y00 ?x434))) 0)))
 (let (($x61 (not $x353)))
 (let (($x410 (= (+ r ?x59 ?x372 (* y00 q)) 0)))
 (let (($x280 (and (= (+ y00 (* (- 1) y)) 0) $x410 $x61)))
 (rewrite (= $x280 $x88)))))))))))))))))
 ))
 (let (($x133 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x372 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x434 (+ 1 q)))
 (let (($x353 (= (* ?x434 ?x434 (+ r ?x58) (+ r ?x58 ?x59 ?x372 (* y00 ?x434))) 0)))
 (let (($x61 (not $x353)))
 (let (($x410 (= (+ r ?x59 ?x372 (* y00 q)) 0)))
 (and (= (+ ?x58 y) 0) $x410 $x61))))))))) :qid k!29))
 ))
 (let ((?x313 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x372 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x434 (+ 1 q)))
 (let (($x353 (= (* ?x434 ?x434 (+ r ?x58) (+ r ?x58 ?x59 ?x372 (* y00 ?x434))) 0)))
 (let (($x61 (not $x353)))
 (let (($x410 (= (+ r ?x59 ?x372 (* y00 q)) 0)))
 (let (($x280 (and (= (+ y00 (* (- 1) y)) 0) $x410 $x61)))
 (let (($x407 (and (= (+ ?x58 y) 0) $x410 $x61)))
 (rewrite (= $x407 $x280)))))))))))))
 ))
 (let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x28 (- 1)))
 (let ((?x48 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x28 ?x45 ?x45 ?x42)))
 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x48 0)))))))) :qid k!29))
 ))
 (let ((?x140 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x372 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x434 (+ 1 q)))
 (let (($x353 (= (* ?x434 ?x434 (+ r ?x58) (+ r ?x58 ?x59 ?x372 (* y00 ?x434))) 0)))
 (let (($x61 (not $x353)))
 (let (($x410 (= (+ r ?x59 ?x372 (* y00 q)) 0)))
 (let (($x407 (and (= (+ ?x58 y) 0) $x410 $x61)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x28 (- 1)))
 (let (($x49 (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x28 ?x45 ?x45 ?x42) 0)))
 (let (($x52 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not $x49)))))
 (rewrite (= $x52 $x407)))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x403 (mp (mp @x54 (quant-intro (proof-bind ?x140) (= $x53 $x133)) $x133) (rewrite (= $x133 $x133)) $x133)))
 (let ((@x60 (mp (mp @x403 (quant-intro (proof-bind ?x313) (= $x133 $x192)) $x192) (quant-intro (proof-bind ?x440) (= $x192 $x446)) $x446)))
 (let ((@x249 (mp (mp~ @x60 (sk (~ $x446 $x186)) $x186) (rewrite (= $x186 $x303)) $x303)))
 (let ((@x224 (and-elim @x249 $x242)))
 (let ((@x422 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x242) $x230)) @x224 $x230)))
 (let (($x321 (>= ?x236 0)))
 (let ((@x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x242) $x321)) @x224 $x321)))
 (let (($x355 (<= ?x216 0)))
 (let ((@x255 (and-elim @x249 $x347)))
 (let ((@x251 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x347) $x355)) @x255 $x355)))
 (let (($x229 (>= ?x216 0)))
 (let ((@x305 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x347) $x229)) @x255 $x229)))
 (let (($x346 (not (<= ?x203 0))))
 (let (($x232 (>= ?x203 0)))
 (let ((@x413 (lemma ((_ th-lemma arith) (hypothesis (not $x232)) @x305 @x251 @x240 @x422 false) $x232)))
 (let ((@x212 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x465 $x346 (not $x232))) (and-elim @x249 $x248) (or $x346 (not $x232)))))
 ((_ th-lemma arith) (unit-resolution @x212 @x413 $x346) @x305 @x251 @x240 @x422 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        10
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-grobner             2
 :arith-max-min             226
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-pivots              3
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              4
 :max-memory                3.57
 :memory                    3.08
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1106929
 :num-checks                1
 :propagations              6
 :rlimit-count              2851
 :time                      0.01
 :total-time                0.01)
