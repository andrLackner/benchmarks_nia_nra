unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x320 (* r!1 r!1)))
 (let ((?x313 (* (- 1) r!1)))
 (let ((?x340 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x145 (+ r00 ?x85 ?x101 ?x340 ?x313 ?x320)))
 (let (($x263 (<= ?x145 0)))
 (let (($x91 (= ?x145 0)))
 (let ((?x232 (* (- 3) ?x320)))
 (let ((?x169 (* (- 6) r!1)))
 (let ((?x231 (* 3 x!0)))
 (let ((?x288 (* r!1 r!1 r!1)))
 (let ((?x285 (* x!0 x!0)))
 (let ((?x257 (* r!1 r!1 r!1 r!1)))
 (let ((?x261 (+ (- 1) (* (- 4) (* x!0 r!1 r!1)) (* (- 2) (* x!0 r!1 r!1 r!1)) (* (- 1) (* x!0 r!1)) (* 2 (* x!0 x!0 r!1)) (* x!0 x!0 r!1 r!1) ?x257 ?x285 ?x288 ?x231 ?x169 ?x232)))
 (let ((?x71 (* ?x261 ?x145)))
 (let (($x160 (= ?x71 0)))
 (let (($x72 (not $x160)))
 (let (($x66 (and $x91 $x72)))
 (let ((?x335 (+ (- 1) ?x169 ?x231 ?x232 (* (- 1) (* r!1 x!0)) ?x288 ?x285 (* 2 (* r!1 x!0 x!0)) (* r!1 r!1 x!0 x!0) ?x257 (* (- 4) (* r!1 r!1 x!0)) (* (- 2) (* r!1 r!1 r!1 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x355 (and (= (+ r!1 (* (- 2) x!0) ?x116 (* (- 1) ?x320) ?x35 ?x36) 0) (not (= (* ?x335 (+ ?x313 ?x340 r00 ?x320 ?x85 ?x101)) 0)))))
 (let (($x214 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x405 (+ (- 1) (* (- 6) r) (* 3 x) (* (- 3) ?x30) (* (- 1) (* r x)) (* r r r) (* x x) (* 2 (* r x x)) (* r r x x) (* r r r r) (* (- 4) (* r r x)) (* (- 2) (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let ((?x115 (* (- 2) x)))
 (let (($x119 (= (+ r ?x115 ?x116 ?x117 ?x35 ?x36) 0)))
 (and $x119 (not (= (* ?x405 ?x107) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x172 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x246 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x358 (+ x ?x64)))
 (let ((?x365 (+ 1 r)))
 (let ((?x161 (+ (* ?x365 ?x358) (* (- 1) (* ?x365 ?x365 ?x365)) ?x32 (* (- 2) r) (* ?x365 ?x365 ?x358 ?x358))))
 (let (($x364 (not (= (* ?x161 ?x246) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x364)))))))))))))))) :qid k!26))
 ))
 (let ((?x189 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x405 (+ (- 1) (* (- 6) r) (* 3 x) (* (- 3) ?x30) (* (- 1) (* r x)) (* r r r) (* x x) (* 2 (* r x x)) (* r r x x) (* r r r r) (* (- 4) (* r r x)) (* (- 2) (* r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let ((?x115 (* (- 2) x)))
 (let (($x119 (= (+ r ?x115 ?x116 ?x117 ?x35 ?x36) 0)))
 (let (($x69 (and $x119 (not (= (* ?x405 ?x107) 0)))))
 (let ((?x246 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x161 (+ (* (+ 1 r) (+ x ?x64)) (* (- 1) (* (+ 1 r) (+ 1 r) (+ 1 r))) ?x32 (* (- 2) r) (* (+ 1 r) (+ 1 r) (+ x ?x64) (+ x ?x64)))))
 (let (($x364 (not (= (* ?x161 ?x246) 0))))
 (let (($x348 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x364)))
 (rewrite (= $x348 $x69)))))))))))))))))))))
 ))
 (let (($x371 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x246 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x358 (+ x ?x64)))
 (let ((?x365 (+ 1 r)))
 (let ((?x161 (+ (* ?x365 ?x358) (* (- 1) (* ?x365 ?x365 ?x365)) ?x32 (* (- 2) r) (* ?x365 ?x365 ?x358 ?x358))))
 (let (($x364 (not (= (* ?x161 ?x246) 0))))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x364))))))))))) :qid k!26))
 ))
 (let ((?x177 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x246 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x358 (+ x ?x64)))
 (let ((?x365 (+ 1 r)))
 (let ((?x161 (+ (* ?x365 ?x358) (* (- 1) (* ?x365 ?x365 ?x365)) ?x32 (* (- 2) r) (* ?x365 ?x365 ?x358 ?x358))))
 (let (($x364 (not (= (* ?x161 ?x246) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x348 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x364)))
 (let (($x102 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) $x364)))
 (rewrite (= $x102 $x348))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x51 (- (* (+ r 1) ?x44) (* (+ r 1) (+ r 1) (+ r 1)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) ?x45)))
 (let ((?x54 (* (- (- ?x46 ?x35) ?x36) (+ ?x51 ?x45 (* (+ r 1) (+ r 1) ?x44 ?x44)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x54 0)))))))))))) :qid k!26))
 ))
 (let ((?x225 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x246 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x358 (+ x ?x64)))
 (let ((?x365 (+ 1 r)))
 (let ((?x161 (+ (* ?x365 ?x358) (* (- 1) (* ?x365 ?x365 ?x365)) ?x32 (* (- 2) r) (* ?x365 ?x365 ?x358 ?x358))))
 (let (($x364 (not (= (* ?x161 ?x246) 0))))
 (let (($x102 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x364)))
 (let ((?x44 (- x r)))
 (let ((?x45 (* 2 ?x44)))
 (let ((?x51 (- (* (+ r 1) ?x44) (* (+ r 1) (+ r 1) (+ r 1)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) ?x45)))
 (let ((?x54 (* (- (- ?x46 ?x35) ?x36) (+ ?x51 ?x45 (* (+ r 1) (+ r 1) ?x44 ?x44)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= ?x54 0))))))
 (rewrite (= $x58 $x102))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x215 (mp (mp @x60 (quant-intro (proof-bind ?x225) (= $x59 $x371)) $x371) (rewrite (= $x371 $x371)) $x371)))
 (let ((@x363 (mp (mp @x215 (quant-intro (proof-bind ?x177) (= $x371 $x172)) $x172) (quant-intro (proof-bind ?x189) (= $x172 $x214)) $x214)))
 (let ((@x336 (mp (mp~ @x363 (sk (~ $x214 $x355)) $x355) (rewrite (= $x355 $x66)) $x66)))
 (let ((@x87 (and-elim @x336 $x91)))
 (let ((@x78 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x91) $x263)) @x87 $x263)))
 (let (($x256 (>= ?x145 0)))
 (let ((@x186 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x91) $x256)) @x87 $x256)))
 (let (($x252 (not (>= ?x71 0))))
 (let (($x95 (<= ?x71 0)))
 (let ((@x158 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x160 (not $x95) $x252)) (and-elim @x336 $x72) (or (not $x95) $x252))))
 (let ((@x147 (unit-resolution @x158 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x95)) @x186 @x78 false) $x95) $x252)))
 ((_ th-lemma arith farkas 1 1 1) @x147 @x186 @x78 false))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 24
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1049544
 :num-checks                1
 :propagations              4
 :rlimit-count              1459
 :time                      0.01
 :total-time                0.01)
