unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x971 (* b!2 y!0)))
 (let ((?x978 (to_real ?x971)))
 (let ((?x367 (to_real b!2)))
 (let ((?x340 (to_real y!0)))
 (let ((?x973 (* ?x340 ?x367)))
 (let ((?x1289 (* (- 1.0) ?x973)))
 (let ((?x1321 (+ ?x1289 ?x978)))
 (let (($x1049 (>= ?x1321 0.0)))
 (let (($x220 (= 0.0 ?x1321)))
 (let ((@x937 (symm (commutativity (= $x220 (= ?x1321 0.0))) (= (= ?x1321 0.0) $x220))))
 (let (($x1324 (= ?x1321 0.0)))
 (let ((@x941 (lemma (unit-resolution ((_ th-lemma arith) $x1324) (hypothesis (not $x1324)) false) $x1324)))
 (let ((@x386 (mp @x941 @x937 $x220)))
 (let ((@x1079 ((_ th-lemma arith triangle-eq) (or (not $x220) $x1049))))
 (let ((@x388 (unit-resolution @x1079 @x386 $x1049)))
 (let (($x1019 (<= ?x1321 0.0)))
 (let ((@x641 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x220) $x1019)) @x386 $x1019)))
 (let ((?x365 (to_real a!3)))
 (let ((?x313 (to_real d!1)))
 (let ((?x868 (* ?x313 ?x365)))
 (let ((?x782 (+ ?x868 (* (- 1.0) (to_real (* a!3 d!1))))))
 (let (($x1287 (>= ?x782 0.0)))
 (let (($x618 (= 0.0 ?x782)))
 (let ((@x264 (symm (commutativity (= $x618 (= ?x782 0.0))) (= (= ?x782 0.0) $x618))))
 (let ((@x269 (unit-resolution (hypothesis (not $x618)) (mp ((_ th-lemma arith) (= ?x782 0.0)) @x264 $x618) false)))
 (let ((@x929 (lemma @x269 $x618)))
 (let ((@x1081 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x618) $x1287)) @x929 $x1287)))
 (let (($x637 (<= ?x782 0.0)))
 (let ((@x387 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x618) $x637)) @x929 $x637)))
 (let ((?x539 (* (/ 1.0 16.0) (* (to_real a00) ?x313 ?x340 ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x160 (* (- (/ 1.0 8.0)) (* (to_real y00) ?x340 ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x1166 (* (/ 1.0 32.0) (* (to_real y00) ?x313 ?x313 ?x340 ?x340 ?x340 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x475 (* (- (/ 1.0 8.0)) (* (to_real y00) ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x1073 (* (/ 1.0 64.0) (* (to_real a00) ?x313 ?x313 ?x313 ?x340 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x961 (* (/ 1.0 16.0) (* (to_real a00) ?x313 ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x730 (* (- (/ 1.0 32.0)) (* (to_real y00) ?x313 ?x313 ?x340 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x1290 (* (- (/ 1.0 64.0)) (* (to_real a00) ?x313 ?x313 ?x313 ?x340 ?x340 ?x340 ?x367 ?x367 ?x367))))
 (let ((?x514 (+ (* (/ 1.0 32.0) (* ?x313 ?x313 ?x340 ?x340 ?x365 ?x367 ?x367 ?x367 ?x367)) (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x340 ?x340 ?x340 ?x340 ?x367 ?x367 ?x367 ?x367)) (* (- (/ 1.0 16.0)) (* ?x313 ?x340 ?x340 ?x365 ?x365 ?x365 ?x367 ?x367 ?x367)) (* (/ 1.0 8.0) (* ?x340 ?x340 ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367 ?x367)) ?x1290 ?x730 ?x961 ?x1073 (* (/ 1.0 8.0) (* ?x340 ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367 ?x367)) (* (- (/ 1.0 16.0)) (* ?x313 ?x340 ?x340 ?x340 ?x365 ?x365 ?x365 ?x367 ?x367 ?x367)) ?x475 (* (/ 1.0 64.0) (* ?x313 ?x313 ?x313 ?x340 ?x340 ?x340 ?x365 ?x367 ?x367 ?x367)) ?x1166 ?x160 ?x539 (* (- (/ 1.0 64.0)) (* ?x313 ?x313 ?x313 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367)))))
 (let (($x419 (>= ?x514 0.0)))
 (let (($x1205 (not $x419)))
 (let (($x1187 (= ?x514 0.0)))
 (let (($x521 (not $x1187)))
 (let ((?x1211 (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x367 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x1213 (* (- (/ 1.0 16.0)) (* ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x1192 (* (- (/ 1.0 64.0)) (* ?x313 ?x313 ?x313 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x258 (* (- (/ 1.0 64.0)) (* ?x313 ?x313 ?x313 ?x367 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x1204 (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x1190 (* (- (/ 1.0 64.0)) (* ?x313 ?x313 ?x313 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x507 (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x340 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x230 (* (/ 1.0 256.0) (* ?x313 ?x313 ?x313 ?x313 ?x313 ?x367 ?x367 ?x367))))
 (let ((?x394 (* (- (/ 1.0 8.0)) (* ?x340 ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x966 (* (/ 3.0 64.0) (* ?x313 ?x313 ?x313 ?x340 ?x340 ?x367 ?x367 ?x367))))
 (let ((?x924 (* (- (/ 1.0 4.0)) (* ?x313 ?x340 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x611 (* (- (/ 1.0 8.0)) (* ?x340 ?x340 ?x367 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x555 (* (- (/ 1.0 8.0)) (* ?x340 ?x340 ?x340 ?x367 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x996 (* (- (/ 1.0 4.0)) (* ?x340 ?x340 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x786 (* (- (/ 3.0 32.0)) (* ?x313 ?x313 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x979 (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x340 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x478 (* (- (/ 1.0 8.0)) (* ?x313 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x960 (* (- (/ 3.0 16.0)) (* ?x313 ?x340 ?x340 ?x367 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x497 (* (/ 1.0 32.0) (* ?x313 ?x313 ?x340 ?x340 ?x340 ?x367 ?x367 ?x367))))
 (let ((?x366 (* (- (/ 3.0 32.0)) (* ?x313 ?x313 ?x340 ?x367 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x958 (* (- (/ 3.0 8.0)) (* ?x313 ?x340 ?x340 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x880 (* (- (/ 1.0 8.0)) (* ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x911 (* (- (/ 3.0 16.0)) (* ?x313 ?x340 ?x340 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x1196 (* (- (/ 1.0 4.0)) (* ?x340 ?x340 ?x340 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x636 (* (- (/ 1.0 8.0)) (* ?x313 ?x340 ?x367 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x620 (* (- (/ 3.0 16.0)) (* ?x313 ?x313 ?x340 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x1149 (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x367))))
 (let ((?x257 (* (- (/ 1.0 64.0)) (* ?x313 ?x313 ?x313 ?x365 ?x365 ?x367 ?x367 ?x367))))
 (let ((?x445 (* (/ 3.0 128.0) (* ?x313 ?x313 ?x313 ?x313 ?x340 ?x367 ?x367 ?x367))))
 (let ((?x137 (+ ?x445 ?x257 ?x1149 ?x620 ?x636 ?x1196 ?x911 ?x880 ?x958 ?x366 ?x497 ?x960 ?x478 ?x979 ?x786 ?x996 ?x555 ?x611 ?x924 ?x966 ?x394 ?x230 ?x507 ?x1190 ?x1204 ?x258 ?x1192 ?x1213 ?x1211)))
 (let ((?x66 (to_real y00)))
 (let ((?x969 (* ?x66 ?x367)))
 (let ((?x846 (* (/ 1.0 2.0) ?x868)))
 (let ((?x153 (* (+ ?x846 ?x969 ?x1289 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x313))) ?x137)))
 (let (($x381 (= ?x153 0.0)))
 (let ((?x1165 (* (- 1.0) ?x969)))
 (let ((?x484 (+ (* (/ 1.0 2.0) (* (to_real a00) ?x313)) (* (- (/ 1.0 2.0)) ?x868) ?x1165 ?x973)))
 (let (($x1301 (<= ?x484 0.0)))
 (let ((?x1158 (* a00 d!1)))
 (let ((?x1277 (+ (* 2 ?x971) (* (- 1) (* a!3 d!1)) ?x1158 (* (- 2) (* y00 b!2)))))
 (let (($x1270 (<= ?x1277 0)))
 (let (($x1268 (= 0 ?x1277)))
 (let ((@x1116 (symm (commutativity (= $x1268 (= ?x1277 0))) (= (= ?x1277 0) $x1268))))
 (let (($x1278 (= ?x1277 0)))
 (let (($x926 (not $x381)))
 (let (($x834 (or $x521 $x926)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x1255 (= (+ ?x35 ?x112 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x142 (and $x1255 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x1278 $x834)))
 (let ((?x1216 (+ (* (/ 1.0 32.0) (* ?x313 ?x313 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340)) (* (- (/ 1.0 8.0)) (* ?x365 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340)) (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x340)) (* (- (/ 1.0 8.0)) (* ?x365 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340)) (* (/ 3.0 128.0) (* ?x313 ?x313 ?x313 ?x313 ?x367 ?x367 ?x367 ?x340)) ?x230 (* (/ 3.0 64.0) (* ?x313 ?x313 ?x313 ?x367 ?x367 ?x367 ?x340 ?x340)) (* (- (/ 1.0 4.0)) (* ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340)) (* (- (/ 1.0 8.0)) (* ?x367 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340)) ?x257 ?x1149 ?x258 (* (- (/ 3.0 32.0)) (* ?x313 ?x313 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340)) (* (- (/ 3.0 16.0)) (* ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340)) (* (- (/ 3.0 32.0)) (* ?x313 ?x313 ?x367 ?x367 ?x367 ?x367 ?x367 ?x340)) (* (- (/ 3.0 16.0)) (* ?x313 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340)) (* (- (/ 3.0 8.0)) (* ?x313 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340)) (* (- (/ 3.0 16.0)) (* ?x313 ?x367 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340)) ?x1190 ?x1192 (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x367 ?x367 ?x367 ?x367 ?x340)) (* (- (/ 1.0 4.0)) (* ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340)) (* (- (/ 1.0 8.0)) (* ?x367 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340)) ?x1204 ?x1213 ?x1211 (* (- (/ 1.0 8.0)) (* ?x313 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340)) (* (- (/ 1.0 4.0)) (* ?x313 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340)) (* (- (/ 1.0 8.0)) (* ?x313 ?x367 ?x367 ?x367 ?x367 ?x367 ?x340)))))
 (let ((?x565 (+ ?x846 (* (- 1.0) (* ?x367 ?x340)) (* ?x367 ?x66) (* (- (/ 1.0 2.0)) (* ?x313 (to_real a00))))))
 (let ((?x155 (* (/ 1.0 16.0) (* ?x313 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340 (to_real a00)))))
 (let ((?x612 (* (/ 1.0 64.0) (* ?x313 ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x340 (to_real a00)))))
 (let ((?x1274 (* (/ 1.0 16.0) (* ?x313 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340 (to_real a00)))))
 (let ((?x1157 (* (- (/ 1.0 64.0)) (* ?x313 ?x313 ?x313 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340 (to_real a00)))))
 (let ((?x1104 (+ (* (/ 1.0 64.0) (* ?x313 ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340)) (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340 ?x340)) (* (/ 1.0 32.0) (* ?x313 ?x313 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340 ?x66)) ?x1157 (* (- (/ 1.0 16.0)) (* ?x313 ?x365 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340)) (* (/ 1.0 8.0) (* ?x365 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340 ?x340)) (* (- (/ 1.0 8.0)) (* ?x365 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340 ?x66)) ?x1274 (* (- (/ 1.0 64.0)) (* ?x313 ?x313 ?x313 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340)) (* (/ 1.0 32.0) (* ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340)) (* (- (/ 1.0 32.0)) (* ?x313 ?x313 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x66)) ?x612 (* (- (/ 1.0 16.0)) (* ?x313 ?x365 ?x365 ?x365 ?x367 ?x367 ?x367 ?x340 ?x340)) (* (/ 1.0 8.0) (* ?x365 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x340)) (* (- (/ 1.0 8.0)) (* ?x365 ?x365 ?x367 ?x367 ?x367 ?x367 ?x340 ?x340 ?x66)) ?x155)))
 (let ((?x988 (* a!3 d!1)))
 (let ((?x263 (+ ?x988 (* (- 2) ?x971) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x982 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x112 (* 2 (* y!0 b00))) 0)))
 (let (($x1218 (and $x982 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x263 0) (or (not (= ?x1104 0.0)) (not (= (* ?x565 ?x1216) 0.0))))))
 (let (($x479 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1353 (* (- (/ 1.0 8.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1344 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61))))
 (let ((?x1034 (* (- (/ 3.0 16.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1024 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1014 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61))))
 (let ((?x361 (* (- (/ 1.0 8.0)) (* (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x299 (* (- (/ 1.0 8.0)) (* (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1355 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x299 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63)) ?x361 (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x1014 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) ?x1024 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x1034 (* (- (/ 3.0 8.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1344 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) ?x1353 (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)))))
 (let ((?x172 (* (/ 1.0 2.0) (* ?x56 (to_real a)))))
 (let ((?x256 (+ ?x172 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x59 (to_real a)))
 (let ((?x537 (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x503 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 (to_real y00)))))
 (let ((?x462 (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x426 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x549 (+ (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x426 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x462 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x503 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x537 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x179 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x144 (= (+ ?x35 (* (- 1) (* a d00)) ?x112 (* 2 (* y b00))) 0)))
 (and $x144 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x179 0) (or (not (= ?x549 0.0)) (not (= (* ?x256 ?x1355) 0.0)))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x692 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x223 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x751 (+ ?x59 ?x61)))
 (let ((?x777 (* (- (/ 1.0 32.0)) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x751 ?x223))))
 (let ((?x669 (* (/ 1.0 32.0) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x223 ?x223 ?x223))))
 (let ((?x828 (+ ?x669 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223 ?x223)) ?x777 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223)))))
 (let ((?x315 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x66 (to_real y00)))
 (let ((?x906 (* ?x66 ?x61)))
 (let ((?x881 (+ (* (/ 1.0 2.0) (* (to_real d) ?x751)) (* (- 1.0) (* ?x61 ?x223)) ?x906 ?x315)))
 (let ((?x172 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x681 (* (- (/ 1.0 32.0)) (* ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x59))))
 (let ((?x889 (* (/ 1.0 32.0) (* ?x63 ?x63 ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61))))
 (let ((?x738 (+ ?x889 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)) ?x681 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let (($x573 (not (= (* ?x738 (+ ?x172 (* (- 1.0) (* ?x63 ?x61)) ?x906 ?x315)) 0.0))))
 (let (($x650 (or $x573 (not (= (* ?x881 ?x828) 0.0)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x266 (= ?x592 0)))
 (let ((?x471 (* d00 a)))
 (let ((?x826 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x471)))
 (and (= ?x826 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x266 $x650))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x813 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1353 (* (- (/ 1.0 8.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1344 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61))))
 (let ((?x1034 (* (- (/ 3.0 16.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1024 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1014 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61))))
 (let ((?x361 (* (- (/ 1.0 8.0)) (* (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x299 (* (- (/ 1.0 8.0)) (* (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1355 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x299 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63)) ?x361 (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x1014 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) ?x1024 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x1034 (* (- (/ 3.0 8.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1344 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) ?x1353 (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)))))
 (let ((?x172 (* (/ 1.0 2.0) (* ?x56 (to_real a)))))
 (let ((?x256 (+ ?x172 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x59 (to_real a)))
 (let ((?x537 (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x503 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 (to_real y00)))))
 (let ((?x462 (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x426 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x549 (+ (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x426 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x462 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x503 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x537 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x179 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let ((?x35 (* a00 d00)))
 (let (($x144 (= (+ ?x35 (* (- 1) (* a d00)) ?x112 (* 2 (* y b00))) 0)))
 (let (($x1368 (and $x144 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x179 0) (or (not (= ?x549 0.0)) (not (= (* ?x256 ?x1355) 0.0))))))
 (let ((?x223 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x751 (+ ?x59 ?x61)))
 (let ((?x828 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x223 ?x223 ?x223)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223 ?x223)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x751 ?x223)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223)))))
 (let ((?x315 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x906 (* ?x66 ?x61)))
 (let ((?x835 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x751)) (* (- 1.0) (* ?x61 ?x223)) ?x906 ?x315) ?x828)))
 (let ((?x738 (+ (* (/ 1.0 32.0) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let (($x573 (not (= (* ?x738 (+ ?x172 (* (- 1.0) (* ?x63 ?x61)) ?x906 ?x315)) 0.0))))
 (let (($x650 (or $x573 (not (= ?x835 0.0)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x266 (= ?x592 0)))
 (let ((?x471 (* d00 a)))
 (let (($x674 (= (+ (* 2 ?x111) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x471) 0)))
 (let (($x686 (and $x674 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x266 $x650)))
 (rewrite (= $x686 $x1368)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x657 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x223 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x751 (+ ?x59 ?x61)))
 (let ((?x777 (* (- (/ 1.0 32.0)) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x751 ?x223))))
 (let ((?x669 (* (/ 1.0 32.0) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x223 ?x223 ?x223))))
 (let ((?x828 (+ ?x669 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223 ?x223)) ?x777 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223)))))
 (let ((?x315 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x66 (to_real y00)))
 (let ((?x906 (* ?x66 ?x61)))
 (let ((?x881 (+ (* (/ 1.0 2.0) (* (to_real d) ?x751)) (* (- 1.0) (* ?x61 ?x223)) ?x906 ?x315)))
 (let ((?x172 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x681 (* (- (/ 1.0 32.0)) (* ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x59))))
 (let ((?x889 (* (/ 1.0 32.0) (* ?x63 ?x63 ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61))))
 (let ((?x738 (+ ?x889 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)) ?x681 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let (($x573 (not (= (* ?x738 (+ ?x172 (* (- 1.0) (* ?x63 ?x61)) ?x906 ?x315)) 0.0))))
 (let (($x650 (or $x573 (not (= (* ?x881 ?x828) 0.0)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x266 (= ?x592 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x472 (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x472 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x266 $x650))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x726 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x223 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x751 (+ ?x59 ?x61)))
 (let ((?x777 (* (- (/ 1.0 32.0)) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x751 ?x223))))
 (let ((?x669 (* (/ 1.0 32.0) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x223 ?x223 ?x223))))
 (let ((?x828 (+ ?x669 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223 ?x223)) ?x777 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223)))))
 (let ((?x315 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x66 (to_real y00)))
 (let ((?x906 (* ?x66 ?x61)))
 (let ((?x881 (+ (* (/ 1.0 2.0) (* (to_real d) ?x751)) (* (- 1.0) (* ?x61 ?x223)) ?x906 ?x315)))
 (let ((?x172 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x681 (* (- (/ 1.0 32.0)) (* ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x59))))
 (let ((?x889 (* (/ 1.0 32.0) (* ?x63 ?x63 ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61))))
 (let ((?x738 (+ ?x889 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)) ?x681 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let (($x573 (not (= (* ?x738 (+ ?x172 (* (- 1.0) (* ?x63 ?x61)) ?x906 ?x315)) 0.0))))
 (let (($x650 (or $x573 (not (= (* ?x881 ?x828) 0.0)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x266 (= ?x592 0)))
 (let ((?x471 (* d00 a)))
 (let ((?x826 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x471)))
 (let (($x686 (and (= ?x826 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x266 $x650)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x840 (and (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) ?x471)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x266 $x650)))
 (rewrite (= $x840 $x686))))))))))))))))))))))))))))))
 ))
 (let (($x103 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x86 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x95 (- (* ?x62 ?x62 ?x62 ?x58 ?x58 ?x86 ?x86 ?x86) (* ?x84 ?x84 ?x62 ?x62 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x97 (- (- ?x95 (* ?x84 ?x62 ?x62 ?x62 ?x58 ?x58 ?x86)) (* ?x84 ?x84 ?x62 ?x62 ?x62 ?x86 ?x86))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x99 (= (* (- (+ (- (* ?x84 ?x58) (* ?x57 ?x62 ?x86)) ?x67) ?x70) ?x97) ?x80)))
 (let ((?x76 (- (* ?x62 ?x62 ?x62 ?x58 ?x58 ?x63 ?x63 ?x63) (* (to_real a) (to_real a) ?x62 ?x62 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x78 (- (- ?x76 (* (to_real a) ?x62 ?x62 ?x62 ?x58 ?x58 ?x63)) (* (to_real a) (to_real a) ?x62 ?x62 ?x62 ?x63 ?x63))))
 (let ((?x79 (* (- (+ (- (* (to_real a) ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x78)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x79 ?x80)) (not $x99)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x661 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x223 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x751 (+ ?x59 ?x61)))
 (let ((?x777 (* (- (/ 1.0 32.0)) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x751 ?x223))))
 (let ((?x669 (* (/ 1.0 32.0) (* (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x223 ?x223 ?x223))))
 (let ((?x828 (+ ?x669 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223 ?x223)) ?x777 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x751 ?x751 ?x223 ?x223)))))
 (let ((?x315 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x66 (to_real y00)))
 (let ((?x906 (* ?x66 ?x61)))
 (let ((?x881 (+ (* (/ 1.0 2.0) (* (to_real d) ?x751)) (* (- 1.0) (* ?x61 ?x223)) ?x906 ?x315)))
 (let ((?x172 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x681 (* (- (/ 1.0 32.0)) (* ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61 ?x59))))
 (let ((?x889 (* (/ 1.0 32.0) (* ?x63 ?x63 ?x63 (to_real d) (to_real d) ?x61 ?x61 ?x61))))
 (let ((?x738 (+ ?x889 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)) ?x681 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59)))))
 (let (($x573 (not (= (* ?x738 (+ ?x172 (* (- 1.0) (* ?x63 ?x61)) ?x906 ?x315)) 0.0))))
 (let (($x650 (or $x573 (not (= (* ?x881 ?x828) 0.0)))))
 (let ((?x592 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x266 (= ?x592 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x111 (* b00 y00)))
 (let ((?x112 (* (- 2) ?x111)))
 (let (($x472 (= (+ ?x112 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x840 (and $x472 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x266 $x650)))
 (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x86 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x95 (- (* ?x62 ?x62 ?x62 ?x58 ?x58 ?x86 ?x86 ?x86) (* ?x84 ?x84 ?x62 ?x62 ?x62 ?x86 ?x86 ?x86))))
 (let ((?x97 (- (- ?x95 (* ?x84 ?x62 ?x62 ?x62 ?x58 ?x58 ?x86)) (* ?x84 ?x84 ?x62 ?x62 ?x62 ?x86 ?x86))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x90 (- (+ (- (* ?x84 ?x58) (* ?x57 ?x62 ?x86)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x76 (- (* ?x62 ?x62 ?x62 ?x58 ?x58 ?x63 ?x63 ?x63) (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x78 (- (- ?x76 (* ?x59 ?x62 ?x62 ?x62 ?x58 ?x58 ?x63)) (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x63 ?x63))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x102 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x71 ?x78) ?x80)) (not (= (* ?x90 ?x97) ?x80))))))
 (rewrite (= $x102 $x840))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x104 (asserted $x103)))
 (let ((@x682 (mp (mp @x104 (quant-intro (proof-bind ?x661) (= $x103 $x657)) $x657) (rewrite (= $x657 $x657)) $x657)))
 (let ((@x1297 (mp (mp @x682 (quant-intro (proof-bind ?x726) (= $x657 $x692)) $x692) (quant-intro (proof-bind ?x813) (= $x692 $x479)) $x479)))
 (let ((@x505 (mp (mp~ @x1297 (sk (~ $x479 $x1218)) $x1218) (rewrite (= $x1218 $x142)) $x142)))
 (let ((@x136 (mp (and-elim @x505 $x1278) @x1116 $x1268)))
 (let ((@x1085 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1268) $x1270)) @x136 $x1270)))
 (let ((?x1061 (to_real ?x1158)))
 (let ((?x1010 (+ (* (- 1.0) (* (to_real a00) ?x313)) ?x1061)))
 (let (($x1054 (>= ?x1010 0.0)))
 (let (($x934 (= 0.0 ?x1010)))
 (let ((@x1087 (symm (commutativity (= $x934 (= ?x1010 0.0))) (= (= ?x1010 0.0) $x934))))
 (let ((@x1095 ((_ th-lemma arith triangle-eq) (or (not $x934) $x1054))))
 (let ((?x621 (+ ?x969 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x1283 (>= ?x621 0.0)))
 (let (($x925 (= 0.0 ?x621)))
 (let ((@x1292 (symm (commutativity (= $x925 (= ?x621 0.0))) (= (= ?x621 0.0) $x925))))
 (let ((@x530 (mp ((_ th-lemma arith) (= ?x621 0.0)) @x1292 $x925)))
 (let ((@x1102 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x925) $x1283)) @x530 $x1283) (unit-resolution @x1095 (mp ((_ th-lemma arith) (= ?x1010 0.0)) @x1087 $x934) $x1054) @x1085 @x1081 (unit-resolution @x1079 (mp (hypothesis $x1324) @x937 $x220) $x1049) (hypothesis (not $x1301)) false)))
 (let ((@x779 (unit-resolution (lemma @x1102 (or (not $x1324) $x1301)) @x941 $x1301)))
 (let ((?x1285 (+ ?x497 ?x960 ?x478 ?x979 ?x786 ?x996 ?x555 ?x611 ?x924 ?x966 ?x394 ?x230 ?x507 ?x1190 ?x1204 ?x258 ?x1192 ?x1213 ?x1211 ?x445 ?x257 ?x1149 ?x620 ?x636 ?x1196 ?x911 ?x880 ?x958 ?x366)))
 (let (($x1236 (>= ?x1285 0.0)))
 (let (($x425 (not $x1236)))
 (let (($x1248 (<= ?x1285 0.0)))
 (let (($x1275 (<= ?x153 0.0)))
 (let (($x789 (not $x1275)))
 (let ((@x277 (hypothesis $x926)))
 (let (($x1271 (>= ?x153 0.0)))
 (let (($x1249 (= ?x1285 0.0)))
 (let (($x134 (= 0.0 ?x1285)))
 (let (($x811 (not $x1271)))
 (let ((@x773 (hypothesis $x811)))
 (let (($x1185 (>= ?x484 0.0)))
 (let (($x127 (<= ?x621 0.0)))
 (let (($x1160 (>= ?x1277 0)))
 (let ((@x135 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1268) $x1160)) @x136 $x1160)))
 (let ((?x992 (+ ?x973 (* (- 1.0) ?x978))))
 (let (($x923 (>= ?x992 0.0)))
 (let (($x448 (= 0.0 ?x992)))
 (let ((@x131 (symm (commutativity (= $x448 (= ?x992 0.0))) (= (= ?x992 0.0) $x448))))
 (let ((@x1134 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x448) $x923)) (mp ((_ th-lemma arith) (= ?x992 0.0)) @x131 $x448) $x923)))
 (let ((?x69 (to_real a00)))
 (let ((?x1302 (* ?x69 ?x313)))
 (let ((?x955 (+ ?x1302 (* (- 1.0) ?x1061))))
 (let (($x918 (>= ?x955 0.0)))
 (let (($x962 (= 0.0 ?x955)))
 (let ((@x1132 (symm (commutativity (= $x962 (= ?x955 0.0))) (= (= ?x955 0.0) $x962))))
 (let ((@x1118 (mp ((_ th-lemma arith) (= ?x955 0.0)) @x1132 $x962)))
 (let ((@x151 ((_ th-lemma arith triangle-eq) (or (not $x962) $x918))))
 (let ((@x148 ((_ th-lemma arith) (unit-resolution @x151 @x1118 $x918) @x1134 @x135 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x925) $x127)) @x530 $x127) (hypothesis (not $x1185)) (hypothesis $x637) false)))
 (let ((@x457 (unit-resolution (lemma @x148 (or (not $x637) $x1185)) @x387 $x1185)))
 (let ((@x572 (unit-resolution ((_ th-lemma arith) (or (not $x1185) $x1236 $x1271)) @x773 (hypothesis $x425) @x457 false)))
 (let (($x774 (not $x1248)))
 (let ((@x783 (hypothesis $x774)))
 (let ((@x781 (unit-resolution ((_ th-lemma arith) (or (not $x1301) $x1248 $x1271)) @x773 @x783 @x779 false)))
 (let ((@x477 ((_ th-lemma arith triangle-eq) (or $x134 $x774 $x425))))
 (let ((@x1242 (unit-resolution @x477 (unit-resolution (lemma @x781 (or $x1248 $x1271)) @x773 $x1248) (unit-resolution (lemma @x572 (or $x1236 $x1271)) @x773 $x1236) $x134)))
 (let (($x1176 (not $x1249)))
 (let (($x1178 (or $x1176 $x381)))
 (let ((@x1188 (lemma (unit-resolution ((_ th-lemma arith) $x1178) @x277 (hypothesis $x1249) false) $x1178)))
 (let ((@x308 (unit-resolution @x1188 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x926 $x1271)) @x773 $x926) $x1176)))
 (let ((@x759 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x381 $x789 $x811)) (lemma (unit-resolution @x308 (symm @x1242 $x1249) false) $x1271) (or $x381 $x789))))
 (let ((@x767 (unit-resolution @x759 @x277 $x789)))
 (let ((@x696 (unit-resolution ((_ th-lemma arith) (or (not $x1185) $x1248 $x1275)) (hypothesis $x789) @x783 @x457 false)))
 (let (($x753 (not $x134)))
 (let ((@x461 (monotonicity (symm (commutativity (= $x134 $x1249)) (= $x1249 $x134)) (= $x1176 $x753))))
 (let ((@x146 (unit-resolution @x477 (mp (unit-resolution @x1188 @x277 $x1176) @x461 $x753) (unit-resolution (lemma @x696 (or $x1248 $x1275)) @x767 $x1248) $x425)))
 (let ((@x404 (unit-resolution ((_ th-lemma arith) (or (not $x1301) $x1236 $x1275)) @x767 @x146 @x779 false)))
 (let (($x1266 (<= ?x514 0.0)))
 (let (($x945 (<= ?x955 0.0)))
 (let ((@x284 ((_ th-lemma arith) (hypothesis (not $x1054)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x962) $x945)) @x1118 $x945) false)))
 (let (($x878 (<= ?x1010 0.0)))
 (let ((@x487 (unit-resolution @x151 (lemma (unit-resolution (hypothesis (not $x962)) @x1118 false) $x962) $x918)))
 (let ((@x373 (lemma ((_ th-lemma arith) (hypothesis (not $x878)) (hypothesis $x918) false) (or (not $x918) $x878))))
 (let ((@x529 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x934 (not $x878) (not $x1054))) (unit-resolution @x373 @x487 $x878) (lemma @x284 $x1054) $x934)))
 (let ((?x1228 (* y00 b!2)))
 (let ((?x613 (to_real ?x1228)))
 (let ((?x959 (+ ?x1165 ?x613)))
 (let (($x1294 (>= ?x959 0.0)))
 (let (($x338 (= 0.0 ?x959)))
 (let ((@x227 (symm (commutativity (= $x338 (= ?x959 0.0))) (= (= ?x959 0.0) $x338))))
 (let ((@x228 (mp ((_ th-lemma arith) (= ?x959 0.0)) @x227 $x338)))
 (let (($x930 (<= ?x959 0.0)))
 (let ((@x390 (hypothesis $x934)))
 (let (($x150 (not $x637)))
 (let (($x377 (not $x1049)))
 (let (($x506 (not $x1160)))
 (let (($x504 (not $x1019)))
 (let (($x1055 (not $x1270)))
 (let (($x1053 (not $x1287)))
 (let (($x1306 (not $x878)))
 (let (($x1299 (not $x1054)))
 (let (($x378 (or (not $x1294) (not $x930) $x1266 $x1299 $x1306 $x1053 $x1055 $x504 $x506 $x377 $x150)))
 (let ((@x349 (unit-resolution ((_ th-lemma arith) $x378) @x1085 @x135 (hypothesis (not $x1266)) @x387 @x1081 @x641 @x388 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x934) $x878)) @x390 $x878) (unit-resolution @x1095 @x390 $x1054) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x338) $x930)) @x228 $x930) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x338) $x1294)) @x228 $x1294) false)))
 (let ((@x1330 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1187 (not $x1266) $x1205)) (unit-resolution (lemma @x349 (or (not $x934) $x1266)) @x529 $x1266) (or $x1187 $x1205))))
 (let ((@x538 (unit-resolution @x1330 (unit-resolution (and-elim @x505 $x834) (lemma @x404 $x381) $x521) $x1205)))
 (unit-resolution ((_ th-lemma arith) (or $x419 $x1055 $x504 $x1053 $x506 $x377 $x150)) @x1085 @x135 @x538 @x387 @x1081 @x641 @x388 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       94
 :arith-eq-adapter                71
 :arith-bound-propagations-cheap  67
 :arith-bound-propagations-lp     17
 :arith-conflicts                 146
 :arith-diseq                     73
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 9
 :arith-grobner-calls             9
 :arith-grobner-conflicts         2
 :arith-horner-calls              9
 :arith-horner-cross-nested-forms 33
 :arith-lower                     129
 :arith-make-feasible             112
 :arith-max-columns               105
 :arith-max-rows                  23
 :arith-nla-explanations          192
 :arith-nla-lemmas                141
 :arith-patches                   9
 :arith-patches-success           9
 :arith-propagations              67
 :arith-upper                     104
 :conflicts                       16
 :decisions                       181
 :del-clause                      183
 :final-checks                    63
 :max-memory                      6.37
 :memory                          3.28
 :minimized-lits                  1
 :mk-bool-var                     367
 :mk-clause                       390
 :num-allocs                      69741934
 :num-checks                      1
 :propagations                    209
 :rlimit-count                    11011
 :time                            0.15
 :total-time                      0.17)
