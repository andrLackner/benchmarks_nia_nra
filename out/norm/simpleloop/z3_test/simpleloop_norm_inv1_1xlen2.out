unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x491 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x206 (<= ?x491 0)))
 (let (($x465 (= ?x491 0)))
 (let ((?x185 (* y!0 y!0 y!0)))
 (let ((?x153 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x122 (* y!0 y!0)))
 (let ((?x529 (+ (* y00 x!1 x!1) ?x122 ?x153 (* 2 (* y!0 x!1)) (* (- 1) (* y00 x!1)) ?x185 (* x!1 x!1) (* (- 1) (* x00 y!0)) (* (- 1) (* x00 y!0 y!0)) (* x00 x!1 x!1) (* (- 1) (* y!0 x!1 x!1)) (* (- 1) (* y!0 x!1 x!1 x!1)) (* (- 2) (* y!0 y!0 x!1 x!1)) (* (- 1) (* y00 y!0 y!0)) (* (- 1) (* x00 x!1)) (* (- 1) (* y00 y!0)) (* x00 y!0 y!0 x!1) (* y!0 y!0 x!1) (* (- 1) (* y!0 y!0 y!0 x!1)) (* y00 y!0 y!0 x!1) (* x00 y!0 x!1 x!1) (* y00 y!0 x!1 x!1))))
 (let (($x166 (= ?x529 0)))
 (let (($x311 (not $x166)))
 (let (($x177 (and $x465 $x311)))
 (let ((?x98 (+ x!1 (* (- 2) y!0) (* (- 1) (* y!0 y00)) (* x!1 x!1 y!0 y00) (* (- 1) (* x!1 x00)) (* x!1 y!0 y!0 x00) (* (- 1) (* y!0 x00)) (* (- 1) (* y!0 y!0 x00)) (* x!1 x!1 x00) (* x!1 x!1 y!0 x00) (* (- 1) (* x!1 y00)) (* x!1 x!1 y00) (* x!1 (- 1) 1) (* x!1 x!1 1) (* x!1 (- 1) y!0) (* 3 (* x!1 y!0)) (* (- 1) (* x!1 x!1 y!0)) (* (- 1) (* x!1 x!1 x!1 y!0)) ?x153 (* y!0 1) (* (- 1) ?x122) (* x!1 y!0 y!0) (* (- 2) (* x!1 x!1 y!0 y!0)) (* y!0 1 1) (* y!0 y!0 1) (* y!0 1 y!0) ?x185 (* (- 1) (* x!1 y!0 y!0 y!0)) (* (- 1) (* y!0 y!0 y00)) (* x!1 y!0 y!0 y00))))
 (let (($x188 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x98 0)))))
 (let (($x740 (exists ((x Int) (y Int) )(! (let ((?x582 (* x y y y00)))
 (let ((?x525 (* y y y)))
 (let ((?x521 (* y 1 y)))
 (let ((?x517 (* y y 1)))
 (let ((?x513 (* y 1 1)))
 (let ((?x464 (* x y y)))
 (let ((?x436 (* y 1)))
 (let ((?x367 (* x (- 1) y)))
 (let ((?x360 (* x x 1)))
 (let ((?x353 (* x (- 1) 1)))
 (let ((?x289 (* x x y x00)))
 (let ((?x275 (* x x x00)))
 (let ((?x172 (* x y y x00)))
 (let ((?x111 (* x x y y00)))
 (let ((?x733 (+ x (* (- 2) y) (* (- 1) (* y y00)) ?x111 (* (- 1) (* x x00)) ?x172 (* (- 1) (* y x00)) (* (- 1) (* y y x00)) ?x275 ?x289 (* (- 1) (* x y00)) (* x x y00) ?x353 ?x360 ?x367 (* 3 (* x y)) (* (- 1) (* x x y)) (* (- 1) (* x x x y)) (* (- 1) (* x x x)) ?x436 (* (- 1) (* y y)) ?x464 (* (- 2) (* x x y y)) ?x513 ?x517 ?x521 ?x525 (* (- 1) (* x y y y)) (* (- 1) (* y y y00)) ?x582)))
 (let (($x82 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x82 (not (= ?x733 0))))))))))))))))))) :qid k!26))
 ))
 (let (($x258 (exists ((x Int) (y Int) )(! (let ((?x223 (* 2 (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x618 (+ (* (- 1) (* y00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (- 1) (* x00 (+ (- 1) x) (+ 1 y) (+ 1 y))) (* (- 1) (* x00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x223 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* y00 (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x618 0))))) :qid k!26))
 ))
 (let ((?x742 (lambda ((x Int) (y Int) )(let ((?x582 (* x y y y00)))
 (let ((?x525 (* y y y)))
 (let ((?x521 (* y 1 y)))
 (let ((?x517 (* y y 1)))
 (let ((?x513 (* y 1 1)))
 (let ((?x464 (* x y y)))
 (let ((?x436 (* y 1)))
 (let ((?x367 (* x (- 1) y)))
 (let ((?x360 (* x x 1)))
 (let ((?x353 (* x (- 1) 1)))
 (let ((?x289 (* x x y x00)))
 (let ((?x275 (* x x x00)))
 (let ((?x172 (* x y y x00)))
 (let ((?x111 (* x x y y00)))
 (let ((?x733 (+ x (* (- 2) y) (* (- 1) (* y y00)) ?x111 (* (- 1) (* x x00)) ?x172 (* (- 1) (* y x00)) (* (- 1) (* y y x00)) ?x275 ?x289 (* (- 1) (* x y00)) (* x x y00) ?x353 ?x360 ?x367 (* 3 (* x y)) (* (- 1) (* x x y)) (* (- 1) (* x x x y)) (* (- 1) (* x x x)) ?x436 (* (- 1) (* y y)) ?x464 (* (- 2) (* x x y y)) ?x513 ?x517 ?x521 ?x525 (* (- 1) (* x y y y)) (* (- 1) (* y y y00)) ?x582)))
 (let (($x82 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x237 (and $x82 (not (= ?x733 0)))))
 (let ((?x223 (* 2 (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x618 (+ (* (- 1) (* y00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (- 1) (* x00 (+ (- 1) x) (+ 1 y) (+ 1 y))) (* (- 1) (* x00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x223 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* y00 (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let (($x339 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x618 0)))))
 (rewrite (= $x339 $x237)))))))))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (- (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 x00 ?x36 ?x36)) (* ?x35 ?x35 x00 ?x36))))
 (let ((?x46 (+ ?x41 (* ?x35 ?x35 ?x35 ?x36) (* 2 ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x46 (* ?x35 ?x36 ?x36 y00)) 0)))))))) :qid k!26))
 ))
 (let ((?x103 (lambda ((x Int) (y Int) )(let ((?x223 (* 2 (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x618 (+ (* (- 1) (* y00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (- 1) (* x00 (+ (- 1) x) (+ 1 y) (+ 1 y))) (* (- 1) (* x00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x223 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* y00 (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let (($x339 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x618 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (- (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 x00 ?x36 ?x36)) (* ?x35 ?x35 x00 ?x36))))
 (let ((?x46 (+ ?x41 (* ?x35 ?x35 ?x35 ?x36) (* 2 ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36))))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x46 (* ?x35 ?x36 ?x36 y00)) 0))))))
 (rewrite (= $x52 $x339)))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x295 (mp (mp @x54 (quant-intro (proof-bind ?x103) (= $x53 $x258)) $x258) (rewrite (= $x258 $x258)) $x258)))
 (let ((@x193 (mp~ (mp @x295 (quant-intro (proof-bind ?x742) (= $x258 $x740)) $x740) (sk (~ $x740 $x188)) $x188)))
 (let ((@x319 (mp @x193 (rewrite (= $x188 $x177)) $x177)))
 (let ((@x318 (and-elim @x319 $x465)))
 (let ((@x345 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x465) $x206)) @x318 $x206)))
 (let (($x207 (>= ?x491 0)))
 (let ((@x381 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x465) $x207)) @x318 $x207)))
 (let (($x444 (not (>= ?x529 0))))
 (let (($x200 (<= ?x529 0)))
 (let ((@x471 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x166 (not $x200) $x444)) (and-elim @x319 $x311) (or (not $x200) $x444))))
 (let ((@x472 (unit-resolution @x471 (lemma ((_ th-lemma arith) (hypothesis (not $x200)) @x381 @x345 false) $x200) $x444)))
 ((_ th-lemma arith) @x472 @x381 @x345 false))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             202
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 32
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.59
 :memory                    19.09
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                513442
 :num-checks                1
 :propagations              4
 :rlimit-count              2566
 :time                      0.01
 :total-time                0.02)
