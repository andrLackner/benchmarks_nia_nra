unsat
((set-logic NIA)
(declare-fun k!10 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x220 (+ k!00 (* (- 1) (* y!2 v!4)) (* (- 1) (* x!3 u!5)) k!10)))
 (let (($x449 (<= ?x220 0)))
 (let (($x556 (= ?x220 0)))
 (let ((?x547 (* (- 1) (* k!10 y!2 y!2 y!2 x!3))))
 (let ((?x447 (* y!2 y!2 y!2 y!2 x!3 v!4)))
 (let ((?x392 (* (- 1) (* k!00 y!2 y!2 y!2 x!3))))
 (let ((?x202 (* y!2 y!2 y!2 x!3 x!3 u!5)))
 (let ((?x364 (+ ?x202 (* 3 (* k!00 y!2 y!2 x!3 x!3)) (* 3 (* y!2 x!3 x!3 x!3 x!3 u!5)) (* (- 3) (* k!10 y!2 x!3 x!3 x!3)) (* (- 1) (* x!3 x!3 x!3 x!3 x!3 u!5)) (* k!00 x!3 x!3 x!3 x!3) (* (- 1) (* y!2 x!3 x!3 x!3 x!3 v!4)) (* 3 (* y!2 y!2 x!3 x!3 x!3 v!4)) (* (- 3) (* y!2 y!2 x!3 x!3 x!3 u!5)) (* (- 3) (* y!2 y!2 y!2 x!3 x!3 v!4)) (* 3 (* k!10 y!2 y!2 x!3 x!3)) (* (- 3) (* k!00 y!2 x!3 x!3 x!3)) ?x392 ?x447 (* k!10 x!3 x!3 x!3 x!3) ?x547)))
 (let (($x109 (= ?x364 0)))
 (let (($x323 (not $x109)))
 (let ((?x168 (+ ?x202 (* k!00 y!2 y!2 y!2 y!2) (* (- 1) (* y!2 y!2 y!2 y!2 y!2 v!4)) ?x392 ?x447 (* (- 1) (* y!2 y!2 y!2 y!2 x!3 u!5)) ?x547 (* k!10 y!2 y!2 y!2 y!2))))
 (let (($x321 (= ?x168 0)))
 (let (($x119 (or (not $x321) $x323)))
 (let (($x374 (and $x556 $x119)))
 (let ((?x284 (* (- 1) (* x!3 y!2 y!2 y!2 k!10))))
 (let ((?x273 (* (- 1) (* x!3 y!2 y!2 y!2 k!00))))
 (let ((?x256 (* v!4 x!3 y!2 y!2 y!2 y!2)))
 (let ((?x251 (* u!5 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x382 (+ (* x!3 x!3 x!3 x!3 k!00) (* (- 3) (* x!3 x!3 x!3 y!2 k!00)) ?x251 ?x256 (* x!3 x!3 x!3 x!3 k!10) (* 3 (* x!3 x!3 y!2 y!2 k!00)) (* (- 3) (* x!3 x!3 x!3 y!2 k!10)) (* (- 1) (* u!5 x!3 x!3 x!3 x!3 x!3)) (* (- 1) (* v!4 x!3 x!3 x!3 x!3 y!2)) (* 3 (* u!5 x!3 x!3 x!3 x!3 y!2)) (* 3 (* v!4 x!3 x!3 x!3 y!2 y!2)) ?x273 ?x284 (* (- 3) (* u!5 x!3 x!3 x!3 y!2 y!2)) (* (- 3) (* v!4 x!3 x!3 y!2 y!2 y!2)) (* 3 (* x!3 x!3 y!2 y!2 k!10)))))
 (let ((?x341 (+ ?x251 ?x256 (* (- 1) (* u!5 x!3 y!2 y!2 y!2 y!2)) (* (- 1) (* v!4 y!2 y!2 y!2 y!2 y!2)) ?x273 (* y!2 y!2 y!2 y!2 k!00) ?x284 (* y!2 y!2 y!2 y!2 k!10))))
 (let ((?x278 (* (- 1) k!10)))
 (let ((?x237 (* (- 1) k!00)))
 (let (($x385 (and (= (+ (* u!5 x!3) (* v!4 y!2) ?x237 ?x278) 0) (or (not (= ?x341 0)) (not (= ?x382 0))))))
 (let (($x597 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x481 (* (- 3) (* v x x y y y))))
 (let ((?x480 (* (- 3) (* u x x x y y))))
 (let ((?x355 (* (- 1) (* x y y y k!10))))
 (let ((?x334 (* (- 1) (* x y y y k!00))))
 (let ((?x476 (* 3 (* v x x x y y))))
 (let ((?x475 (* 3 (* u x x x x y))))
 (let ((?x263 (* (- 1) (* v x x x x y))))
 (let ((?x253 (* (- 1) (* u x x x x x))))
 (let ((?x159 (* v x y y y y)))
 (let ((?x156 (* u x x y y y)))
 (let ((?x587 (+ (* x x x x k!00) (* (- 3) (* x x x y k!00)) ?x156 ?x159 (* x x x x k!10) (* 3 (* x x y y k!00)) (* (- 3) (* x x x y k!10)) ?x253 ?x263 ?x475 ?x476 ?x334 ?x355 ?x480 ?x481 (* 3 (* x x y y k!10)))))
 (let ((?x175 (* (- 1) (* v y y y y y))))
 (let ((?x171 (* (- 1) (* u x y y y y))))
 (let ((?x367 (+ ?x156 ?x159 ?x171 ?x175 ?x334 (* y y y y k!00) ?x355 (* y y y y k!10))))
 (let ((?x278 (* (- 1) k!10)))
 (let ((?x237 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (and (= (+ ?x33 ?x34 ?x237 ?x278) 0) (or (not (= ?x367 0)) (not (= ?x587 0)))))))))))))))))))))) :qid k!29))
 ))
 (let (($x234 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x278 (* (- 1) k!10)))
 (let ((?x235 (+ y (* (- 1) x))))
 (let ((?x230 (* ?x235 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x237 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x88 (+ x (* (- 1) y))))
 (let ((?x221 (* ?x88 u)))
 (let (($x264 (or (not (= (* ?x88 (+ ?x237 ?x221 ?x45 ?x278) y y y) 0)) (not (= (* ?x235 ?x235 ?x235 (+ ?x237 ?x52 ?x230 ?x278) x) 0)))))
 (and (= (+ ?x237 (* x u) (* y v) ?x278) 0) $x264)))))))))) :qid k!29))
 ))
 (let ((?x402 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x481 (* (- 3) (* v x x y y y))))
 (let ((?x480 (* (- 3) (* u x x x y y))))
 (let ((?x355 (* (- 1) (* x y y y k!10))))
 (let ((?x334 (* (- 1) (* x y y y k!00))))
 (let ((?x476 (* 3 (* v x x x y y))))
 (let ((?x475 (* 3 (* u x x x x y))))
 (let ((?x263 (* (- 1) (* v x x x x y))))
 (let ((?x253 (* (- 1) (* u x x x x x))))
 (let ((?x159 (* v x y y y y)))
 (let ((?x156 (* u x x y y y)))
 (let ((?x587 (+ (* x x x x k!00) (* (- 3) (* x x x y k!00)) ?x156 ?x159 (* x x x x k!10) (* 3 (* x x y y k!00)) (* (- 3) (* x x x y k!10)) ?x253 ?x263 ?x475 ?x476 ?x334 ?x355 ?x480 ?x481 (* 3 (* x x y y k!10)))))
 (let ((?x175 (* (- 1) (* v y y y y y))))
 (let ((?x171 (* (- 1) (* u x y y y y))))
 (let ((?x367 (+ ?x156 ?x159 ?x171 ?x175 ?x334 (* y y y y k!00) ?x355 (* y y y y k!10))))
 (let ((?x278 (* (- 1) k!10)))
 (let ((?x237 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let (($x397 (and (= (+ ?x33 ?x34 ?x237 ?x278) 0) (or (not (= ?x367 0)) (not (= ?x587 0))))))
 (let ((?x235 (+ y (* (- 1) x))))
 (let ((?x230 (* ?x235 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x88 (+ x (* (- 1) y))))
 (let ((?x221 (* ?x88 u)))
 (let (($x264 (or (not (= (* ?x88 (+ ?x237 ?x221 ?x45 ?x278) y y y) 0)) (not (= (* ?x235 ?x235 ?x235 (+ ?x237 ?x52 ?x230 ?x278) x) 0)))))
 (let (($x275 (and (= (+ ?x237 (* x u) (* y v) ?x278) 0) $x264)))
 (rewrite (= $x275 $x397))))))))))))))))))))))))))))))
 ))
 (let (($x262 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x235 (+ y (* (- 1) x))))
 (let ((?x230 (* ?x235 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x88 (+ x (* (- 1) y))))
 (let ((?x221 (* ?x88 u)))
 (let (($x243 (or (not (= (* ?x88 (+ ?x71 ?x221 ?x45 ?x87) y y y) 0)) (not (= (* ?x235 ?x235 ?x235 (+ ?x71 ?x52 ?x230 ?x87) x) 0)))))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) $x243))))))))))) :qid k!29))
 ))
 (let ((?x147 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x278 (* (- 1) k!10)))
 (let ((?x235 (+ y (* (- 1) x))))
 (let ((?x230 (* ?x235 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x237 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x88 (+ x (* (- 1) y))))
 (let ((?x221 (* ?x88 u)))
 (let (($x264 (or (not (= (* ?x88 (+ ?x237 ?x221 ?x45 ?x278) y y y) 0)) (not (= (* ?x235 ?x235 ?x235 (+ ?x237 ?x52 ?x230 ?x278) x) 0)))))
 (let (($x275 (and (= (+ ?x237 (* x u) (* y v) ?x278) 0) $x264)))
 (let ((?x271 (* ?x235 ?x235 ?x235 (+ (* (- 1) (* u00 x00)) ?x52 ?x230 (* (- 1) (* v00 y00))) x)))
 (let ((?x146 (* ?x88 (+ (* (- 1) (* u00 x00)) ?x221 ?x45 (* (- 1) (* v00 y00))) y y y)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x69 (* y v)))
 (let ((?x66 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x240 (and (= (+ ?x71 ?x66 ?x69 ?x87) 0) (or (not (= ?x146 0)) (not (= ?x271 0))))))
 (rewrite (= $x240 $x275)))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x56 (- (+ (* ?x29 u00 x00) (* (+ u v) x) (* v ?x53)) ?x38)))
 (let ((?x42 (- x y)))
 (let ((?x47 (- (+ (* ?x29 u00 x00) (* u ?x42) (* (+ v u) y)) ?x38)))
 (let (($x60 (or (not (= (* ?x47 ?x29 ?x42 y y y) 0)) (not (= (* ?x56 ?x29 x ?x53 ?x53 ?x53) 0)))))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 $x60))))))))) :qid k!29))
 ))
 (let ((?x267 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x235 (+ y (* (- 1) x))))
 (let ((?x230 (* ?x235 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x88 (+ x (* (- 1) y))))
 (let ((?x221 (* ?x88 u)))
 (let (($x243 (or (not (= (* ?x88 (+ ?x71 ?x221 ?x45 ?x87) y y y) 0)) (not (= (* ?x235 ?x235 ?x235 (+ ?x71 ?x52 ?x230 ?x87) x) 0)))))
 (let (($x240 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) $x243)))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 x ?x53 ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x29 ?x42 y y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x240)))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x79 (mp (mp @x63 (quant-intro (proof-bind ?x267) (= $x62 $x262)) $x262) (rewrite (= $x262 $x262)) $x262)))
 (let ((@x224 (mp (mp @x79 (quant-intro (proof-bind ?x147) (= $x262 $x234)) $x234) (quant-intro (proof-bind ?x402) (= $x234 $x597)) $x597)))
 (let ((@x143 (mp (mp~ @x224 (sk (~ $x597 $x385)) $x385) (rewrite (= $x385 $x374)) $x374)))
 (let ((@x545 (and-elim @x143 $x556)))
 (let ((@x458 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x556) $x449)) @x545 $x449)))
 (let (($x451 (>= ?x220 0)))
 (let ((@x461 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x556) $x451)) @x545 $x451)))
 (let (($x568 (not (<= ?x364 0))))
 (let (($x513 (>= ?x364 0)))
 (let (($x97 (>= ?x168 0)))
 (let (($x91 (<= ?x168 0)))
 (let ((@x216 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x321 (not $x91) (not $x97))) (lemma ((_ th-lemma arith) (hypothesis (not $x91)) @x461 @x458 false) $x91) (lemma ((_ th-lemma arith) (hypothesis (not $x97)) @x461 @x458 false) $x97) $x321)))
 (let ((@x492 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x109 $x568 (not $x513))) (unit-resolution (and-elim @x143 $x119) @x216 $x323) (lemma ((_ th-lemma arith) (hypothesis (not $x513)) @x461 @x458 false) $x513) $x568)))
 ((_ th-lemma arith) @x492 @x461 @x458 false)))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        7
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           4
 :arith-grobner             4
 :arith-max-min             224
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              3
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                19.57
 :memory                    19.08
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                523929
 :num-checks                1
 :propagations              14
 :rlimit-count              2995
 :time                      0.01
 :total-time                0.02)
