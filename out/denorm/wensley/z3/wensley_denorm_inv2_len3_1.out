unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x389 (to_real a!3)))
 (let ((?x384 (to_real d!1)))
 (let ((?x375 (to_real b!2)))
 (let ((?x60 (to_real d00)))
 (let ((?x170 (to_real y!0)))
 (let ((?x64 (to_real b00)))
 (let ((?x164 (+ (* (/ 1.0 32.0) (* ?x60 ?x170 ?x170 ?x170 ?x375 ?x375 ?x384 ?x384 ?x384 ?x389)) (* (- (/ 1.0 32.0)) (* ?x64 ?x170 ?x170 ?x170 ?x375 ?x384 ?x384 ?x384 ?x384 ?x389)) (* (- (/ 1.0 16.0)) (* ?x60 ?x170 ?x170 ?x170 ?x375 ?x375 ?x375 ?x384)) (* (/ 1.0 16.0) (* ?x64 ?x170 ?x170 ?x170 ?x375 ?x375 ?x384 ?x384)) (* (- (/ 1.0 16.0)) (* ?x64 ?x375 ?x375 ?x384 ?x384 ?x389)) (* (/ 1.0 16.0) (* ?x60 ?x375 ?x375 ?x375 ?x384 ?x389)))))
 (let (($x107 (>= ?x164 0.0)))
 (let (($x747 (not $x107)))
 (let (($x344 (= ?x164 0.0)))
 (let (($x620 (not $x344)))
 (let ((?x557 (* (/ 1.0 16.0) (* ?x170 ?x170 ?x170 ?x375 ?x375 ?x384 ?x384 ?x384))))
 (let ((?x351 (* (- (/ 3.0 16.0)) (* ?x170 ?x170 ?x375 ?x375 ?x384 ?x384))))
 (let ((?x275 (* (- (/ 3.0 32.0)) (* ?x170 ?x375 ?x375 ?x384 ?x384 ?x384))))
 (let ((?x504 (* (/ 1.0 128.0) (* ?x375 ?x384 ?x384 ?x384 ?x384 ?x384 ?x384 ?x389))))
 (let ((?x486 (* (/ 1.0 128.0) (* ?x375 ?x375 ?x384 ?x384 ?x384 ?x384 ?x384 ?x384))))
 (let ((?x505 (* (/ 1.0 8.0) (* ?x375 ?x375 ?x384 ?x389))))
 (let ((?x469 (* (/ 3.0 32.0) (* ?x170 ?x170 ?x375 ?x384 ?x384 ?x384 ?x384 ?x389))))
 (let ((?x570 (* (/ 3.0 32.0) (* ?x170 ?x170 ?x375 ?x375 ?x384 ?x384 ?x384 ?x384))))
 (let ((?x364 (* (- (/ 1.0 64.0)) (* ?x375 ?x375 ?x384 ?x384 ?x384 ?x384))))
 (let ((?x442 (* (/ 3.0 64.0) (* ?x170 ?x375 ?x384 ?x384 ?x384 ?x384 ?x384 ?x389))))
 (let ((?x400 (* (/ 3.0 64.0) (* ?x170 ?x375 ?x375 ?x384 ?x384 ?x384 ?x384 ?x384))))
 (let ((?x650 (* (/ 1.0 16.0) (* ?x170 ?x170 ?x170 ?x375 ?x384 ?x384 ?x384 ?x389))))
 (let ((?x200 (* (- (/ 1.0 8.0)) (* ?x170 ?x170 ?x170 ?x375 ?x375 ?x384))))
 (let ((?x235 (* (/ 1.0 8.0) (* ?x375 ?x375 ?x375 ?x384))))
 (let ((?x359 (+ ?x235 ?x200 ?x650 ?x400 ?x442 ?x364 ?x570 ?x469 ?x505 ?x486 ?x504 ?x275 ?x351 ?x557)))
 (let ((?x365 (* (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x375)) (* (/ 1.0 2.0) (* ?x64 ?x384))) ?x359)))
 (let (($x112 (= ?x365 0.0)))
 (let ((?x349 (* ?x60 ?x375)))
 (let ((?x656 (* (- (/ 1.0 2.0)) ?x349)))
 (let ((?x484 (* ?x64 ?x384)))
 (let ((?x566 (* (/ 1.0 2.0) ?x484)))
 (let ((?x559 (+ ?x566 ?x656)))
 (let (($x155 (<= ?x559 0.0)))
 (let ((?x199 (+ (* (- 1.0) (to_real (* b00 d!1))) ?x484)))
 (let (($x221 (<= ?x199 0.0)))
 (let (($x409 (= ?x199 0.0)))
 (let ((@x392 (lemma (unit-resolution ((_ th-lemma arith) $x409) (hypothesis (not $x409)) false) $x409)))
 (let ((@x168 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x409) $x221)) @x392 $x221)))
 (let ((?x148 (* b00 d!1)))
 (let ((?x514 (+ ?x148 (* (- 1) (* d00 b!2)))))
 (let (($x510 (<= ?x514 0)))
 (let (($x114 (= 0 ?x514)))
 (let ((@x593 (symm (commutativity (= $x114 (= ?x514 0))) (= (= ?x514 0) $x114))))
 (let (($x317 (= ?x514 0)))
 (let (($x368 (not $x112)))
 (let (($x397 (or $x620 $x368)))
 (let ((?x464 (+ (* a00 d!1) (* 2 (* y!0 b!2)) (* (- 2) (* y00 b!2)) (* (- 1) (* a!3 d!1)))))
 (let (($x465 (= ?x464 0)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x154 (= (+ ?x35 ?x100 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3))) 0)))
 (let (($x417 (and $x154 $x317 $x465 $x397)))
 (let ((?x237 (+ (* (/ 1.0 16.0) (* ?x375 ?x384 ?x384 ?x384 ?x389 ?x170 ?x170 ?x170)) (* (- (/ 1.0 8.0)) (* ?x375 ?x375 ?x384 ?x170 ?x170 ?x170)) ?x505 (* (/ 1.0 16.0) (* ?x375 ?x375 ?x384 ?x384 ?x384 ?x170 ?x170 ?x170)) ?x486 ?x504 (* (/ 3.0 64.0) (* ?x375 ?x375 ?x384 ?x384 ?x384 ?x384 ?x384 ?x170)) (* (/ 3.0 64.0) (* ?x375 ?x384 ?x384 ?x384 ?x384 ?x384 ?x389 ?x170)) (* (/ 3.0 32.0) (* ?x375 ?x375 ?x384 ?x384 ?x384 ?x384 ?x170 ?x170)) (* (/ 3.0 32.0) (* ?x375 ?x384 ?x384 ?x384 ?x384 ?x389 ?x170 ?x170)) ?x364 (* (- (/ 3.0 32.0)) (* ?x375 ?x375 ?x384 ?x384 ?x384 ?x170)) (* (- (/ 3.0 16.0)) (* ?x375 ?x375 ?x384 ?x384 ?x170 ?x170)) ?x235)))
 (let (($x519 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x375 ?x60)) (* (/ 1.0 2.0) (* ?x384 ?x64))) ?x237) 0.0)))
 (let ((?x357 (+ (* (/ 1.0 32.0) (* ?x375 ?x375 ?x60 ?x384 ?x384 ?x384 ?x389 ?x170 ?x170 ?x170)) (* (- (/ 1.0 32.0)) (* ?x375 ?x384 ?x384 ?x384 ?x384 ?x64 ?x389 ?x170 ?x170 ?x170)) (* (- (/ 1.0 16.0)) (* ?x375 ?x375 ?x375 ?x60 ?x384 ?x170 ?x170 ?x170)) (* (/ 1.0 16.0) (* ?x375 ?x375 ?x384 ?x384 ?x64 ?x170 ?x170 ?x170)) (* (/ 1.0 16.0) (* ?x375 ?x375 ?x375 ?x60 ?x384 ?x389)) (* (- (/ 1.0 16.0)) (* ?x375 ?x375 ?x384 ?x384 ?x64 ?x389)))))
 (let ((?x443 (* a!3 d!1)))
 (let ((?x412 (+ ?x443 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x281 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x100 (* 2 (* y!0 b00))) 0)))
 (let (($x537 (and $x281 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x412 0) (or (not (= ?x357 0.0)) (not $x519)))))
 (let (($x212 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x628 (* (/ 1.0 8.0) (* (to_real b) (to_real b) (to_real b) (to_real d)))))
 (let ((?x68 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x639 (+ (* (/ 1.0 16.0) (* ?x56 ?x62 ?x62 ?x62 (to_real a) ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x68 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 (to_real a))) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x62 (to_real a))) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 (to_real a) ?x68)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (/ 3.0 32.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 (to_real a) ?x68 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x68 ?x68)) ?x628)))
 (let ((?x198 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x67 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x293 (* (/ 1.0 32.0) (* ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x62 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x285 (+ ?x293 (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x68 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x68 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x169 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (and $x132 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x169 0) (or (not (= ?x285 0.0)) (not (= (* ?x198 ?x639) 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let (($x179 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x252 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x68 (to_real y)))
 (let ((?x572 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x336 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x252 ?x572 ?x572 ?x572)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x572 ?x572 ?x572)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x252)))))
 (let ((?x266 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x210 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x67)))))
 (let (($x629 (or (not (= (* ?x266 ?x210) 0.0)) (not (= (* ?x266 ?x336) 0.0)))))
 (let ((?x292 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x398 (= ?x292 0)))
 (let ((?x554 (* d00 a)))
 (let ((?x596 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x554)))
 (and (= ?x596 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x398 $x629))))))))))))))) :qid k!33))
 ))
 (let ((?x595 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x628 (* (/ 1.0 8.0) (* (to_real b) (to_real b) (to_real b) (to_real d)))))
 (let ((?x68 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x639 (+ (* (/ 1.0 16.0) (* ?x56 ?x62 ?x62 ?x62 (to_real a) ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x68 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 (to_real a))) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x62 (to_real a))) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 (to_real a) ?x68)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (/ 3.0 32.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 (to_real a) ?x68 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x68 ?x68)) ?x628)))
 (let ((?x198 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x67 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x293 (* (/ 1.0 32.0) (* ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x62 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x285 (+ ?x293 (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x68 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x68 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x169 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (let (($x661 (and $x132 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x169 0) (or (not (= ?x285 0.0)) (not (= (* ?x198 ?x639) 0.0))))))
 (let ((?x572 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x336 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 (+ ?x67 ?x56) ?x572 ?x572 ?x572)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x572 ?x572 ?x572)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 (+ ?x67 ?x56))))))
 (let ((?x266 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* ?x64 ?x62)))))
 (let ((?x210 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x67)))))
 (let (($x629 (or (not (= (* ?x266 ?x210) 0.0)) (not (= (* ?x266 ?x336) 0.0)))))
 (let ((?x292 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x398 (= ?x292 0)))
 (let ((?x554 (* d00 a)))
 (let (($x407 (= (+ (* 2 ?x99) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x554) 0)))
 (let (($x254 (and $x407 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x398 $x629)))
 (rewrite (= $x254 $x661))))))))))))))))))))))))))))))
 ))
 (let (($x289 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x252 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x68 (to_real y)))
 (let ((?x572 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x336 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x252 ?x572 ?x572 ?x572)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x572 ?x572 ?x572)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x252)))))
 (let ((?x266 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x210 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x67)))))
 (let (($x629 (or (not (= (* ?x266 ?x210) 0.0)) (not (= (* ?x266 ?x336) 0.0)))))
 (let ((?x292 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x398 (= ?x292 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x408 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x408 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x398 $x629))))))))))))))))) :qid k!33))
 ))
 (let ((?x243 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x252 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x68 (to_real y)))
 (let ((?x572 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x336 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x252 ?x572 ?x572 ?x572)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x572 ?x572 ?x572)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x252)))))
 (let ((?x266 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x210 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x67)))))
 (let (($x629 (or (not (= (* ?x266 ?x210) 0.0)) (not (= (* ?x266 ?x336) 0.0)))))
 (let ((?x292 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x398 (= ?x292 0)))
 (let ((?x554 (* d00 a)))
 (let ((?x596 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x554)))
 (let (($x254 (and (= ?x596 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x398 $x629)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x345 (and (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) ?x554)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x398 $x629)))
 (rewrite (= $x345 $x254))))))))))))))))))))))
 ))
 (let (($x91 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x68 (to_real y)))
 (let ((?x79 (+ ?x68 ?x63)))
 (let ((?x83 (- (* ?x80 ?x58 ?x63 ?x63 ?x63 ?x79 ?x79 ?x79) (* ?x58 ?x58 ?x63 ?x79 ?x79 ?x79))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x71 (- (* (to_real a) ?x58 ?x63 ?x63 ?x63 ?x68 ?x68 ?x68) (* ?x58 ?x58 ?x63 ?x68 ?x68 ?x68))))
 (let (($x89 (or (not (= (* ?x66 (+ ?x71 (* (to_real a) ?x58 ?x58 ?x63))) ?x75)) (not (= (* ?x66 (+ ?x83 (* ?x80 ?x58 ?x58 ?x63))) ?x75)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x89)))))))))))))))))) :qid k!33))
 ))
 (let ((?x309 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x252 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x68 (to_real y)))
 (let ((?x572 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x336 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x252 ?x572 ?x572 ?x572)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x572 ?x572 ?x572)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x252)))))
 (let ((?x266 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x210 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x56 ?x56)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x67)))))
 (let (($x629 (or (not (= (* ?x266 ?x210) 0.0)) (not (= (* ?x266 ?x336) 0.0)))))
 (let ((?x292 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x398 (= ?x292 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x408 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x345 (and $x408 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x398 $x629)))
 (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x79 (+ ?x68 ?x63)))
 (let ((?x83 (- (* ?x80 ?x58 ?x63 ?x63 ?x63 ?x79 ?x79 ?x79) (* ?x58 ?x58 ?x63 ?x79 ?x79 ?x79))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x71 (- (* ?x67 ?x58 ?x63 ?x63 ?x63 ?x68 ?x68 ?x68) (* ?x58 ?x58 ?x63 ?x68 ?x68 ?x68))))
 (let (($x89 (or (not (= (* ?x66 (+ ?x71 (* ?x67 ?x58 ?x58 ?x63))) ?x75)) (not (= (* ?x66 (+ ?x83 (* ?x80 ?x58 ?x58 ?x63))) ?x75)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x90 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x89)))
 (rewrite (= $x90 $x345)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x145 (mp (mp @x92 (quant-intro (proof-bind ?x309) (= $x91 $x289)) $x289) (rewrite (= $x289 $x289)) $x289)))
 (let ((@x530 (mp (mp @x145 (quant-intro (proof-bind ?x243) (= $x289 $x179)) $x179) (quant-intro (proof-bind ?x595) (= $x179 $x212)) $x212)))
 (let ((@x343 (mp (mp~ @x530 (sk (~ $x212 $x537)) $x537) (rewrite (= $x537 $x417)) $x417)))
 (let ((@x189 (mp (and-elim @x343 $x317) @x593 $x114)))
 (let ((@x325 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x114) $x510)) @x189 $x510)))
 (let ((?x312 (+ ?x349 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x511 (>= ?x312 0.0)))
 (let ((@x564 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x312 0.0)) $x511)) ((_ th-lemma arith) (= ?x312 0.0)) $x511)))
 (let ((@x358 (lemma ((_ th-lemma arith) @x564 @x325 (hypothesis (not $x155)) (hypothesis $x221) false) (or (not $x221) $x155))))
 (let ((@x330 (unit-resolution @x358 @x168 $x155)))
 (let ((?x135 (+ ?x557 ?x235 ?x200 ?x650 ?x400 ?x442 ?x364 ?x570 ?x469 ?x505 ?x486 ?x504 ?x275 ?x351)))
 (let (($x461 (<= ?x135 0.0)))
 (let (($x314 (not $x461)))
 (let (($x421 (= ?x135 0.0)))
 (let (($x490 (not $x421)))
 (let ((@x236 (hypothesis $x368)))
 (let (($x495 (or $x490 $x112)))
 (let ((@x624 (lemma (unit-resolution ((_ th-lemma arith) $x495) @x236 (hypothesis $x421) false) $x495)))
 (let (($x457 (>= ?x135 0.0)))
 (let (($x262 (<= ?x365 0.0)))
 (let (($x647 (not $x262)))
 (let (($x133 (= 0.0 ?x365)))
 (let (($x246 (not $x133)))
 (let ((@x672 (monotonicity (symm (commutativity (= $x133 $x112)) (= $x112 $x133)) (= $x368 $x246))))
 (let (($x108 (>= ?x365 0.0)))
 (let (($x581 (not $x108)))
 (let ((@x597 (hypothesis $x581)))
 (let ((@x435 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x246 $x108)) @x597 $x246) (monotonicity (commutativity (= $x133 $x112)) (= $x246 $x368)) $x368)))
 (let ((?x549 (* d00 b!2)))
 (let ((?x209 (to_real ?x549)))
 (let ((?x290 (+ (* (- 1.0) ?x349) ?x209)))
 (let (($x151 (= ?x290 0.0)))
 (let ((@x416 (lemma (unit-resolution ((_ th-lemma arith) $x151) (hypothesis (not $x151)) false) $x151)))
 (let (($x219 (<= ?x290 0.0)))
 (let ((@x619 ((_ th-lemma arith triangle-eq) (or (not $x151) $x219))))
 (let (($x303 (>= ?x290 0.0)))
 (let ((@x185 ((_ th-lemma arith triangle-eq) (or (not $x151) $x303))))
 (let ((@x439 (unit-resolution @x185 @x416 $x303)))
 (let (($x418 (>= ?x559 0.0)))
 (let (($x460 (>= ?x199 0.0)))
 (let ((@x95 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x409) $x460)) @x392 $x460)))
 (let (($x96 (>= ?x514 0)))
 (let ((@x181 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x114) $x96)) @x189 $x96)))
 (let ((@x487 (lemma ((_ th-lemma arith) (hypothesis (not $x418)) @x439 @x181 @x95 false) $x418)))
 (let ((@x328 (unit-resolution ((_ th-lemma arith) (or (not $x418) $x461 $x108)) @x597 (hypothesis $x314) @x487 false)))
 (let (($x395 (not $x457)))
 (let ((@x323 (hypothesis $x395)))
 (let ((@x341 (unit-resolution ((_ th-lemma arith) (or (not $x155) $x457 $x108)) @x597 @x323 @x330 false)))
 (let ((@x611 ((_ th-lemma arith) (unit-resolution (lemma @x341 (or $x457 $x108)) @x597 $x457) (unit-resolution (lemma @x328 (or $x461 $x108)) @x597 $x461) @x439 (unit-resolution @x619 @x416 $x219) (= ?x135 ?x290))))
 (let ((@x366 (lemma (unit-resolution @x624 (trans* @x611 @x416 $x421) @x435 false) $x108)))
 (let ((@x690 (unit-resolution (unit-resolution ((_ th-lemma arith triangle-eq) (or $x133 $x647 $x581)) @x366 (or $x133 $x647)) (mp @x236 @x672 $x246) $x647)))
 (let ((@x663 (unit-resolution ((_ th-lemma arith) (or (not $x418) $x457 $x262)) (hypothesis $x647) @x323 @x487 false)))
 (let ((@x685 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x421 $x314 $x395)) (unit-resolution (lemma @x663 (or $x457 $x262)) @x690 $x457) (unit-resolution @x624 @x236 $x490) $x314)))
 (let ((@x684 (unit-resolution ((_ th-lemma arith) (or (not $x155) $x461 $x262)) @x690 @x685 @x330 false)))
 (let (($x104 (<= ?x164 0.0)))
 (let (($x355 (not $x221)))
 (let (($x184 (not $x96)))
 (let (($x468 (not $x510)))
 (let ((@x622 (unit-resolution ((_ th-lemma arith) (or $x468 $x184 (not $x303) (not $x219) $x104 (not $x460) $x355)) @x325 @x181 (hypothesis (not $x104)) @x168 @x95 (unit-resolution @x619 (hypothesis $x151) $x219) (unit-resolution @x185 (hypothesis $x151) $x303) false)))
 (let ((@x752 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x344 (not $x104) $x747)) (unit-resolution (lemma @x622 (or (not $x151) $x104)) @x416 $x104) (or $x344 $x747))))
 (let ((@x754 (unit-resolution @x752 (unit-resolution (and-elim @x343 $x397) (lemma @x684 $x112) $x620) $x747)))
 (let (($x110 (>= ?x464 0)))
 (let (($x122 (= 0 ?x464)))
 (let ((@x742 (mp (and-elim @x343 $x465) (symm (commutativity (= $x122 $x465)) (= $x465 $x122)) $x122)))
 (let (($x111 (<= ?x464 0)))
 (unit-resolution ((_ th-lemma arith) (or $x107 (not $x110) (not $x111) $x184 $x468)) @x325 @x181 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x122) $x111)) @x742 $x111) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x122) $x110)) @x742 $x110) @x754 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       43
 :arith-eq-adapter                56
 :arith-bound-propagations-cheap  70
 :arith-bound-propagations-lp     15
 :arith-conflicts                 200
 :arith-diseq                     70
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 10
 :arith-grobner-calls             8
 :arith-grobner-conflicts         2
 :arith-horner-calls              8
 :arith-horner-cross-nested-forms 20
 :arith-lower                     109
 :arith-make-feasible             85
 :arith-max-columns               71
 :arith-max-rows                  18
 :arith-nla-explanations          95
 :arith-nla-lemmas                195
 :arith-patches                   10
 :arith-patches-success           10
 :arith-propagations              70
 :arith-upper                     127
 :conflicts                       22
 :decisions                       233
 :del-clause                      211
 :final-checks                    56
 :max-memory                      5.05
 :memory                          3.16
 :mk-bool-var                     389
 :mk-clause                       319
 :num-allocs                      14788064
 :num-checks                      1
 :propagations                    273
 :rlimit-count                    8642
 :time                            0.05
 :total-time                      0.06)
