unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x244 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x243 (<= ?x244 0)))
 (let (($x373 (= ?x244 0)))
 (let ((?x342 (* y!0 y!0)))
 (let ((?x336 (* 2 (* x!1 x!1))))
 (let ((?x314 (* (- 3) (* x!1 x!1 x!1))))
 (let ((?x242 (* x!1 x!1 x!1 x!1)))
 (let ((?x201 (+ (* x00 y!0 x!1) (* (- 1) (* y00 x!1 x!1 x!1)) (* 3 (* x00 x!1 x!1)) (* (- 1) (* x00 x!1 x!1 x!1)) (* y!0 x!1 x!1 x!1) ?x242 (* (- 1) (* y00 y!0)) (* 3 (* y00 x!1 x!1)) (* 3 (* y!0 x!1)) (* y00 y!0 x!1) ?x314 ?x336 ?x342 (* (- 2) (* y00 x!1)) (* (- 2) (* x00 x!1)) (* (- 1) (* x00 y!0)) (* (- 4) (* y!0 x!1 x!1)) (* (- 1) (* y!0 y!0 x!1)))))
 (let (($x252 (= ?x201 0)))
 (let (($x380 (not $x252)))
 (let (($x226 (and $x373 $x380)))
 (let ((?x358 (+ (* 3 (* x!1 y!0)) ?x336 ?x314 (* (- 2) (* x!1 y00)) (* (- 2) (* x!1 x00)) ?x342 (* (- 1) (* y!0 y00)) (* (- 1) (* y!0 x00)) (* (- 4) (* x!1 x!1 y!0)) (* (- 1) (* x!1 y!0 y!0)) (* x!1 y!0 y00) (* x!1 y!0 x00) (* 3 (* x!1 x!1 y00)) (* 3 (* x!1 x!1 x00)) ?x242 (* x!1 x!1 x!1 y!0) (* (- 1) (* x!1 x!1 x!1 y00)) (* (- 1) (* x!1 x!1 x!1 x00)))))
 (let (($x363 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x358 0)))))
 (let (($x418 (exists ((x Int) (y Int) )(! (let ((?x411 (+ (* 3 (* x y)) (* 2 (* x x)) (* (- 3) (* x x x)) (* (- 2) (* x y00)) (* (- 2) (* x x00)) (* y y) (* (- 1) (* y y00)) (* (- 1) (* y x00)) (* (- 4) (* x x y)) (* (- 1) (* x y y)) (* x y y00) (* x y x00) (* 3 (* x x y00)) (* 3 (* x x x00)) (* x x x x) (* x x x y) (* (- 1) (* x x x y00)) (* (- 1) (* x x x x00)))))
 (and (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x411 0)))) :qid k!26))
 ))
 (let (($x193 (exists ((x Int) (y Int) )(! (let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x188 (+ x ?x50 ?x57 y)))
 (let ((?x263 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x))))))
 (and (= ?x188 0) (not (= (* ?x263 ?x188) 0))))))) :qid k!26))
 ))
 (let ((?x68 (lambda ((x Int) (y Int) )(let ((?x411 (+ (* 3 (* x y)) (* 2 (* x x)) (* (- 3) (* x x x)) (* (- 2) (* x y00)) (* (- 2) (* x x00)) (* y y) (* (- 1) (* y y00)) (* (- 1) (* y x00)) (* (- 4) (* x x y)) (* (- 1) (* x y y)) (* x y y00) (* x y x00) (* 3 (* x x y00)) (* 3 (* x x x00)) (* x x x x) (* x x x y) (* (- 1) (* x x x y00)) (* (- 1) (* x x x x00)))))
 (let (($x88 (and (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x411 0)))))
 (let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x188 (+ x ?x50 ?x57 y)))
 (let ((?x263 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x))))))
 (let (($x207 (and (= ?x188 0) (not (= (* ?x263 ?x188) 0)))))
 (rewrite (= $x207 $x88))))))))))
 ))
 (let (($x47 (exists ((x Int) (y Int) )(! (let ((?x41 (- (* (- x 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1)))))
 (let (($x43 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x41) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x43))))) :qid k!26))
 ))
 (let ((?x199 (lambda ((x Int) (y Int) )(let ((?x57 (* (- 1) x00)))
 (let ((?x50 (* (- 1) y00)))
 (let ((?x188 (+ x ?x50 ?x57 y)))
 (let ((?x263 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x))))))
 (let (($x207 (and (= ?x188 0) (not (= (* ?x263 ?x188) 0)))))
 (let ((?x41 (- (* (- x 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1)))))
 (let (($x43 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x41) 0)))
 (let (($x46 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x43)))))
 (rewrite (= $x46 $x207)))))))))))
 ))
 (let ((@x48 (asserted $x47)))
 (let ((@x213 (mp (mp @x48 (quant-intro (proof-bind ?x199) (= $x47 $x193)) $x193) (rewrite (= $x193 $x193)) $x193)))
 (let ((@x321 (mp~ (mp @x213 (quant-intro (proof-bind ?x68) (= $x193 $x418)) $x418) (sk (~ $x418 $x363)) $x363)))
 (let ((@x381 (mp @x321 (rewrite (= $x363 $x226)) $x226)))
 (let ((@x329 (and-elim @x381 $x373)))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x373) $x243)) @x329 $x243)))
 (let (($x366 (>= ?x244 0)))
 (let ((@x132 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x373) $x366)) @x329 $x366)))
 (let (($x269 (not (>= ?x201 0))))
 (let (($x238 (<= ?x201 0)))
 (let ((@x286 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x252 (not $x238) $x269)) (and-elim @x381 $x380) (or (not $x238) $x269))))
 (let ((@x287 (unit-resolution @x286 (lemma ((_ th-lemma arith) (hypothesis (not $x238)) @x132 @x255 false) $x238) $x269)))
 ((_ th-lemma arith) @x287 @x132 @x255 false)))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             170
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.58
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1109956
 :num-checks                1
 :propagations              4
 :rlimit-count              2178
 :time                      0.01
 :total-time                0.01)
