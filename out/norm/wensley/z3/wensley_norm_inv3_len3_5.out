unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x395 (to_real b!2)))
 (let ((?x214 (to_real d!1)))
 (let ((?x108 (to_real a!3)))
 (let ((?x295 (+ (* (/ 1.0 16.0) (* (to_real a00) ?x214 ?x214 ?x395 ?x395)) (* (- (/ 1.0 8.0)) (* (to_real y00) ?x214 ?x395 ?x395 ?x395)) (* (/ 1.0 8.0) (* (to_real y!0) ?x214 ?x395 ?x395 ?x395)) (* (- (/ 1.0 16.0)) (* ?x108 ?x214 ?x214 ?x395 ?x395)))))
 (let (($x246 (<= ?x295 0.0)))
 (let (($x269 (not $x246)))
 (let (($x247 (>= ?x295 0.0)))
 (let ((?x201 (+ (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) (* d!1 a!3) (* (- 2) (* y!0 b!2)))))
 (let (($x244 (>= ?x201 0)))
 (let (($x239 (= 0 ?x201)))
 (let ((@x165 (symm (commutativity (= $x239 (= ?x201 0))) (= (= ?x201 0) $x239))))
 (let (($x209 (= ?x201 0)))
 (let (($x104 (= ?x295 0.0)))
 (let (($x357 (not $x104)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x232 (= (+ ?x35 ?x106 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3))) 0)))
 (let (($x241 (and $x232 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x209 $x357)))
 (let ((?x288 (+ (* (/ 1.0 16.0) (* ?x395 ?x395 ?x214 ?x214 (to_real a00))) (* (- (/ 1.0 8.0)) (* ?x395 ?x395 ?x395 ?x214 (to_real y00))) (* (/ 1.0 8.0) (* ?x395 ?x395 ?x395 ?x214 (to_real y!0))) (* (- (/ 1.0 16.0)) (* ?x395 ?x395 ?x214 ?x214 ?x108)))))
 (let ((?x392 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x308 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x106 (* 2 (* y!0 b00))) 0)))
 (let (($x174 (and $x308 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x392 0) (not (= ?x288 0.0)))))
 (let (($x325 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x71 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x318 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 (to_real a00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 (to_real y00))) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 (to_real y))) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x71)))))
 (let ((?x48 (* a d)))
 (let ((?x173 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (and $x138 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x173 0) (not (= ?x318 0.0))))))))))))) :qid k!33))
 ))
 (let (($x284 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x272 (* ?x59 ?x59 ?x56 ?x56 (+ (to_real a) ?x56))))
 (let ((?x203 (* ?x59 ?x56 ?x56 ?x56 (+ (to_real y) (* (/ 1.0 2.0) ?x59)))))
 (let ((?x63 (to_real y00)))
 (let ((?x407 (* ?x63 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x191 (* (- (/ 1.0 8.0)) ?x407)))
 (let ((?x65 (to_real a00)))
 (let ((?x286 (* ?x65 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x194 (* (/ 1.0 16.0) ?x286)))
 (let ((?x342 (+ ?x194 ?x191 (* (/ 1.0 8.0) (* (to_real y) ?x59 ?x56 ?x56 ?x56)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x56 ?x56 (to_real a))))))
 (let (($x283 (or (not (= ?x342 0.0)) (not (= (+ ?x194 ?x191 (* (/ 1.0 8.0) ?x203) (* (- (/ 1.0 16.0)) ?x272)) 0.0)))))
 (let ((?x367 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x372 (= ?x367 0)))
 (let ((?x252 (* d00 a)))
 (let ((?x160 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x252)))
 (and (= ?x160 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x372 $x283))))))))))))))))) :qid k!33))
 ))
 (let ((?x234 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x71 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x318 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 (to_real a00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 (to_real y00))) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 (to_real y))) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x71)))))
 (let ((?x48 (* a d)))
 (let ((?x173 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (let (($x218 (and $x138 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x173 0) (not (= ?x318 0.0)))))
 (let ((?x203 (* ?x59 ?x56 ?x56 ?x56 (+ (to_real y) (* (/ 1.0 2.0) ?x59)))))
 (let ((?x63 (to_real y00)))
 (let ((?x407 (* ?x63 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x191 (* (- (/ 1.0 8.0)) ?x407)))
 (let ((?x65 (to_real a00)))
 (let ((?x286 (* ?x65 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x194 (* (/ 1.0 16.0) ?x286)))
 (let ((?x278 (+ ?x194 ?x191 (* (/ 1.0 8.0) ?x203) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x56 ?x56 (+ ?x71 ?x56))))))
 (let ((?x342 (+ ?x194 ?x191 (* (/ 1.0 8.0) (* (to_real y) ?x59 ?x56 ?x56 ?x56)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x56 ?x56 ?x71)))))
 (let ((?x367 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x372 (= ?x367 0)))
 (let ((?x252 (* d00 a)))
 (let (($x159 (= (+ (* 2 ?x105) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x252) 0)))
 (let (($x168 (and $x159 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x372 (or (not (= ?x342 0.0)) (not (= ?x278 0.0))))))
 (rewrite (= $x168 $x218))))))))))))))))))))))))))))
 ))
 (let (($x349 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x272 (* ?x59 ?x59 ?x56 ?x56 (+ (to_real a) ?x56))))
 (let ((?x203 (* ?x59 ?x56 ?x56 ?x56 (+ (to_real y) (* (/ 1.0 2.0) ?x59)))))
 (let ((?x63 (to_real y00)))
 (let ((?x407 (* ?x63 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x228 (* (/ 1.0 8.0) ?x407)))
 (let ((?x65 (to_real a00)))
 (let ((?x286 (* ?x65 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x215 (* (- (/ 1.0 16.0)) ?x286)))
 (let ((?x222 (+ ?x215 ?x228 (* (- (/ 1.0 8.0)) (* (to_real y) ?x59 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 (to_real a))))))
 (let (($x347 (or (not (= ?x222 0.0)) (not (= (+ ?x215 ?x228 (* (- (/ 1.0 8.0)) ?x203) (* (/ 1.0 16.0) ?x272)) 0.0)))))
 (let ((?x367 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x372 (= ?x367 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x142 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x142 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x372 $x347))))))))))))))))))) :qid k!33))
 ))
 (let ((?x287 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x272 (* ?x59 ?x59 ?x56 ?x56 (+ (to_real a) ?x56))))
 (let ((?x203 (* ?x59 ?x56 ?x56 ?x56 (+ (to_real y) (* (/ 1.0 2.0) ?x59)))))
 (let ((?x63 (to_real y00)))
 (let ((?x407 (* ?x63 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x191 (* (- (/ 1.0 8.0)) ?x407)))
 (let ((?x65 (to_real a00)))
 (let ((?x286 (* ?x65 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x194 (* (/ 1.0 16.0) ?x286)))
 (let ((?x342 (+ ?x194 ?x191 (* (/ 1.0 8.0) (* (to_real y) ?x59 ?x56 ?x56 ?x56)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x56 ?x56 (to_real a))))))
 (let (($x283 (or (not (= ?x342 0.0)) (not (= (+ ?x194 ?x191 (* (/ 1.0 8.0) ?x203) (* (- (/ 1.0 16.0)) ?x272)) 0.0)))))
 (let ((?x367 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x372 (= ?x367 0)))
 (let ((?x252 (* d00 a)))
 (let ((?x160 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x252)))
 (let (($x168 (and (= ?x160 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x372 $x283)))
 (let (($x346 (= (+ (* (- (/ 1.0 16.0)) ?x286) (* (/ 1.0 8.0) ?x407) (* (- (/ 1.0 8.0)) ?x203) (* (/ 1.0 16.0) ?x272)) 0.0)))
 (let ((?x228 (* (/ 1.0 8.0) ?x407)))
 (let ((?x215 (* (- (/ 1.0 16.0)) ?x286)))
 (let ((?x222 (+ ?x215 ?x228 (* (- (/ 1.0 8.0)) (* (to_real y) ?x59 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 (to_real a))))))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x365 (and (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) ?x252)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x372 (or (not (= ?x222 0.0)) (not $x346)))))
 (rewrite (= $x365 $x168))))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x61 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x86 (to_real (+ a b))))
 (let ((?x62 (to_real y)))
 (let ((?x80 (+ ?x62 ?x60)))
 (let ((?x63 (to_real y00)))
 (let ((?x69 (* ?x57 ?x58 ?x58 ?x58 ?x60 ?x63)))
 (let ((?x65 (to_real a00)))
 (let ((?x66 (* ?x65 ?x58 ?x58 ?x60 ?x60)))
 (let ((?x88 (+ (- (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x80 ?x80 ?x63) ?x66) (* ?x61 ?x65 ?x58 ?x58 ?x60 ?x60 ?x80 ?x80) ?x69 (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x80 ?x80 ?x80) (* ?x61 ?x86 ?x58 ?x58 ?x60 ?x60 ?x80 ?x80))))
 (let ((?x92 (+ (- ?x88 (* ?x57 ?x58 ?x58 ?x58 ?x60 ?x80)) (* ?x86 ?x58 ?x58 ?x60 ?x60))))
 (let ((?x73 (+ (- (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x62 ?x62 ?x63) ?x66) (* ?x61 ?x65 ?x58 ?x58 ?x60 ?x60 ?x62 ?x62) ?x69 (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x62 ?x62 ?x62) (* ?x61 (to_real a) ?x58 ?x58 ?x60 ?x60 ?x62 ?x62))))
 (let ((?x77 (+ (- ?x73 (* ?x57 ?x58 ?x58 ?x58 ?x60 ?x62)) (* (to_real a) ?x58 ?x58 ?x60 ?x60))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x77 ?x61)) (not (= ?x92 ?x61))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x200 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x272 (* ?x59 ?x59 ?x56 ?x56 (+ (to_real a) ?x56))))
 (let ((?x203 (* ?x59 ?x56 ?x56 ?x56 (+ (to_real y) (* (/ 1.0 2.0) ?x59)))))
 (let ((?x63 (to_real y00)))
 (let ((?x407 (* ?x63 ?x59 ?x56 ?x56 ?x56)))
 (let ((?x228 (* (/ 1.0 8.0) ?x407)))
 (let ((?x65 (to_real a00)))
 (let ((?x286 (* ?x65 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x215 (* (- (/ 1.0 16.0)) ?x286)))
 (let ((?x222 (+ ?x215 ?x228 (* (- (/ 1.0 8.0)) (* (to_real y) ?x59 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 (to_real a))))))
 (let (($x347 (or (not (= ?x222 0.0)) (not (= (+ ?x215 ?x228 (* (- (/ 1.0 8.0)) ?x203) (* (/ 1.0 16.0) ?x272)) 0.0)))))
 (let ((?x367 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x372 (= ?x367 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x142 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x365 (and $x142 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x372 $x347)))
 (let ((?x61 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x86 (to_real (+ a b))))
 (let ((?x62 (to_real y)))
 (let ((?x80 (+ ?x62 ?x60)))
 (let ((?x69 (* ?x57 ?x58 ?x58 ?x58 ?x60 ?x63)))
 (let ((?x66 (* ?x65 ?x58 ?x58 ?x60 ?x60)))
 (let ((?x88 (+ (- (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x80 ?x80 ?x63) ?x66) (* ?x61 ?x65 ?x58 ?x58 ?x60 ?x60 ?x80 ?x80) ?x69 (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x80 ?x80 ?x80) (* ?x61 ?x86 ?x58 ?x58 ?x60 ?x60 ?x80 ?x80))))
 (let ((?x92 (+ (- ?x88 (* ?x57 ?x58 ?x58 ?x58 ?x60 ?x80)) (* ?x86 ?x58 ?x58 ?x60 ?x60))))
 (let ((?x73 (+ (- (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x62 ?x62 ?x63) ?x66) (* ?x61 ?x65 ?x58 ?x58 ?x60 ?x60 ?x62 ?x62) ?x69 (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x62 ?x62 ?x62) (* ?x61 (to_real a) ?x58 ?x58 ?x60 ?x60 ?x62 ?x62))))
 (let ((?x77 (+ (- ?x73 (* ?x57 ?x58 ?x58 ?x58 ?x60 ?x62)) (* (to_real a) ?x58 ?x58 ?x60 ?x60))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x96 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x77 ?x61)) (not (= ?x92 ?x61))))))
 (rewrite (= $x96 $x365))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x369 (mp (mp @x98 (quant-intro (proof-bind ?x200) (= $x97 $x349)) $x349) (rewrite (= $x349 $x349)) $x349)))
 (let ((@x290 (mp (mp @x369 (quant-intro (proof-bind ?x287) (= $x349 $x284)) $x284) (quant-intro (proof-bind ?x234) (= $x284 $x325)) $x325)))
 (let ((@x242 (mp (mp~ @x290 (sk (~ $x325 $x174)) $x174) (rewrite (= $x174 $x241)) $x241)))
 (let ((@x166 (mp (and-elim @x242 $x209) @x165 $x239)))
 (let ((@x176 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x239) $x244)) @x166 $x244)))
 (let (($x243 (<= ?x201 0)))
 (let ((@x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x239) $x243)) @x166 $x243)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith) (or $x247 (not $x244) (not $x243))) @x169 @x176 (hypothesis (not $x247)) false)))
 (let (($x245 (= 0.0 ?x295)))
 (let (($x300 (not $x245)))
 (let ((@x344 (monotonicity (symm (commutativity (= $x245 $x104)) (= $x104 $x245)) (= $x357 $x300))))
 (let ((@x353 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x245 $x269 (not $x247))) (mp (and-elim @x242 $x357) @x344 $x300) (or $x269 (not $x247)))))
 (unit-resolution ((_ th-lemma arith) (or $x246 (not $x244) (not $x243))) @x169 @x176 (unit-resolution @x353 (lemma @x296 $x247) $x269) false))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       15
 :arith-eq-adapter                11
 :arith-bound-propagations-cheap  8
 :arith-bound-propagations-lp     1
 :arith-conflicts                 12
 :arith-diseq                     12
 :arith-gcd-calls                 5
 :arith-grobner-calls             2
 :arith-grobner-conflicts         2
 :arith-horner-calls              2
 :arith-horner-cross-nested-forms 4
 :arith-lower                     9
 :arith-make-feasible             16
 :arith-max-columns               42
 :arith-max-rows                  10
 :arith-nla-explanations          33
 :arith-nla-lemmas                12
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              8
 :arith-upper                     23
 :conflicts                       3
 :decisions                       13
 :del-clause                      32
 :final-checks                    14
 :max-memory                      3.76
 :memory                          3.06
 :mk-bool-var                     58
 :mk-clause                       46
 :num-allocs                      1276317
 :num-checks                      1
 :propagations                    18
 :rlimit-count                    2682
 :time                            0.01
 :total-time                      0.01)
