unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x866 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x400 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) (* (- 1) (* v!0 v!0)) (* (- 4) r!2) (* (- 2) u!1) ?x866)))
 (let (($x531 (>= ?x400 0)))
 (let (($x672 (= ?x400 0)))
 (let ((?x509 (* (- 1) ?x866)))
 (let ((?x868 (* 2 u!1)))
 (let ((?x878 (* 4 r!2)))
 (let ((?x785 (* v!0 v!0)))
 (let ((?x833 (* (- 2) v!0)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x244 (+ ?x110 ?x126 ?x41 ?x46 ?x202 ?x833 ?x785 ?x878 ?x868 ?x509)))
 (let ((?x252 (* (- 1) (* v!0 r!2 u!1 u!1))))
 (let ((?x443 (* 2 r!2)))
 (let ((?x920 (* (- 1) (* v!0 v!0 r!2 r!2 u!1 u!1 u!1))))
 (let ((?x602 (* r!2 u!1)))
 (let ((?x727 (+ (* (- 12) (* v!0 v!0 r!2 u!1 u!1 u!1)) (* (- 12) (* v!0 v!0 u!1 u!1 u!1)) (* (- 24) (* v!0 v!0 r!2 u!1 u!1)) (* (- 6) (* v!0 v!0 r!2 r!2 u!1 u!1)) (* (- 12) (* v!0 v!0 r!2 r!2 u!1)) (* (- 16) (* v!0 v!0 r!2 u!1)) (* (- 8) (* v!0 v!0 r!2 r!2)) (* (- 5) (* v!0 r!2 u!1)) (* (- 6) (* v!0 v!0 u!1 u!1 u!1 u!1)) ?x602 (* (- 1) (* v!0 v!0 u!1 u!1 u!1 u!1 u!1)) (* (- 1) (* v!0 u!1 u!1 u!1)) (* (- 6) (* v!0 r!2)) (* (- 8) (* v!0 v!0 u!1 u!1)) (* (- 6) (* v!0 u!1)) ?x920 ?x443 ?x868 ?x252 ?x866 (* (- 5) (* v!0 u!1 u!1)) (* (- 2) (* v!0 v!0 r!2 u!1 u!1 u!1 u!1)))))
 (let ((?x720 (* ?x727 ?x244)))
 (let (($x749 (= ?x720 0)))
 (let (($x730 (not $x749)))
 (let ((?x676 (* (- 4) (* r!2 r!2 u!1 u!1 u!1))))
 (let ((?x751 (* v!0 u!1)))
 (let ((?x748 (* v!0 v!0 u!1 u!1)))
 (let ((?x625 (* (- 1) ?x602)))
 (let ((?x858 (* (- 2) (* r!2 u!1 u!1))))
 (let ((?x621 (+ (* 8 (* v!0 v!0 r!2 u!1 u!1 u!1)) (* (- 1) (* v!0 v!0 v!0 v!0 u!1 u!1 u!1)) (* (- 4) (* v!0 v!0 u!1 u!1 u!1)) ?x858 (* (- 1) (* v!0 r!2 u!1)) (* (- 4) (* v!0 r!2 r!2 u!1 u!1 u!1)) (* (- 4) (* v!0 v!0 v!0 u!1 u!1 u!1)) (* 2 (* v!0 v!0 v!0 r!2 u!1 u!1 u!1)) ?x625 ?x748 ?x751 ?x920 (* 8 (* v!0 r!2 u!1 u!1 u!1)) (* v!0 v!0 u!1) ?x676 ?x252 (* 2 (* v!0 u!1 u!1)))))
 (let ((?x947 (* ?x621 ?x244)))
 (let (($x778 (= ?x947 0)))
 (let (($x184 (or (not $x778) $x730)))
 (let (($x162 (and $x672 $x184)))
 (let ((?x791 (+ ?x878 ?x868 ?x833 ?x110 ?x126 ?x41 ?x509 ?x785 ?x46 ?x202)))
 (let ((?x448 (* (- 1) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x895 (* (- 1) (* r!2 u!1 u!1 v!0))))
 (let ((?x818 (+ ?x443 ?x868 ?x866 (* (- 5) (* r!2 u!1 v!0)) ?x895 (* (- 5) (* u!1 u!1 v!0)) (* (- 8) (* u!1 u!1 v!0 v!0)) ?x602 (* (- 6) (* u!1 v!0)) ?x448 (* (- 12) (* u!1 u!1 u!1 v!0 v!0)) (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0)) (* (- 6) (* r!2 v!0)) (* (- 2) (* r!2 u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 8) (* r!2 r!2 v!0 v!0)) (* (- 16) (* r!2 u!1 v!0 v!0)) (* (- 12) (* r!2 r!2 u!1 v!0 v!0)) (* (- 24) (* r!2 u!1 u!1 v!0 v!0)) (* (- 6) (* r!2 r!2 u!1 u!1 v!0 v!0)) (* (- 6) (* u!1 u!1 u!1 u!1 v!0 v!0)))))
 (let ((?x415 (* u!1 v!0)))
 (let ((?x929 (* u!1 u!1 v!0 v!0)))
 (let ((?x679 (+ (* (- 1) (* r!2 u!1 v!0)) ?x895 ?x858 (* 2 (* u!1 u!1 v!0)) ?x929 ?x625 ?x415 ?x448 ?x676 (* 8 (* r!2 u!1 u!1 u!1 v!0)) (* u!1 v!0 v!0) (* (- 4) (* u!1 u!1 u!1 v!0 v!0)) (* (- 4) (* r!2 r!2 u!1 u!1 u!1 v!0)) (* 8 (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 4) (* u!1 u!1 u!1 v!0 v!0 v!0)) (* 2 (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0 v!0)))))
 (let (($x675 (and (= ?x791 0) (or (not (= (* ?x679 ?x791) 0)) (not (= (* ?x818 ?x791) 0))))))
 (let (($x647 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x979 (* (- 6) (* u u u u v v))))
 (let ((?x976 (* (- 6) (* r r u u v v))))
 (let ((?x973 (* (- 24) (* r u u v v))))
 (let ((?x969 (* (- 12) (* r r u v v))))
 (let ((?x966 (* (- 16) (* r u v v))))
 (let ((?x962 (* (- 8) (* r r v v))))
 (let ((?x939 (* (- 1) (* u u u u u v v))))
 (let ((?x959 (* (- 2) (* r u u u u v v))))
 (let ((?x711 (* (- 1) (* u u u v))))
 (let ((?x508 (* r u u u v v)))
 (let ((?x956 (* (- 12) ?x508)))
 (let ((?x494 (* u u u v v)))
 (let ((?x953 (* (- 12) ?x494)))
 (let ((?x591 (* (- 1) (* r r u u u v v))))
 (let ((?x422 (* r u)))
 (let ((?x371 (* u u v v)))
 (let ((?x949 (* (- 8) ?x371)))
 (let ((?x366 (* u u v)))
 (let ((?x718 (* (- 5) ?x366)))
 (let ((?x395 (* (- 1) (* r u u v))))
 (let ((?x337 (* r u v)))
 (let ((?x717 (* (- 5) ?x337)))
 (let ((?x747 (* 2 r)))
 (let ((?x236 (+ ?x747 ?x36 ?x43 ?x717 ?x395 ?x718 ?x949 ?x422 (* (- 6) (* u v)) ?x591 ?x953 ?x956 ?x711 (* (- 6) (* r v)) ?x959 ?x939 ?x962 ?x966 ?x969 ?x973 ?x976 ?x979)))
 (let ((?x599 (* (- 1) (* u u u v v v v))))
 (let ((?x622 (* 2 (* r u u u v v v))))
 (let ((?x619 (* (- 4) (* u u u v v v))))
 (let ((?x616 (* 8 ?x508)))
 (let ((?x613 (* (- 4) (* r r u u u v))))
 (let ((?x610 (* (- 4) ?x494)))
 (let ((?x607 (* 8 (* r u u u v))))
 (let ((?x603 (* (- 4) (* r r u u u))))
 (let ((?x429 (* u v)))
 (let ((?x405 (* 2 ?x366)))
 (let ((?x402 (* (- 2) (* r u u))))
 (let ((?x338 (* (- 1) ?x337)))
 (let ((?x831 (+ ?x338 ?x395 ?x402 ?x405 ?x371 (* (- 1) ?x422) ?x429 ?x591 ?x603 ?x607 (* u v v) ?x610 ?x613 ?x616 ?x619 ?x622 ?x599)))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or (not (= (* ?x831 ?x208) 0)) (not (= (* ?x236 ?x208) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x296 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x193 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x363 (+ 2 u)))
 (let ((?x455 (+ (* (- 1) (* ?x363 ?x77 v)) (* (- 1) (* ?x363 ?x363 ?x77 v)) (* ?x363 ?x77) (* (- 1) (* ?x363 ?x363 ?x363 ?x77 ?x77 v v)))))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x514 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x246 (+ r ?x107)))
 (let ((?x144 (+ 2 v)))
 (let ((?x197 (+ (* (- 1) (* ?x144 ?x246 u)) (* (- 1) (* ?x144 ?x246 u u)) (* ?x246 u) (* (- 1) (* ?x144 ?x144 ?x246 ?x246 u u u)))))
 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x197 ?x514) 0)) (not (= (* ?x455 ?x193) 0))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x645 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x979 (* (- 6) (* u u u u v v))))
 (let ((?x976 (* (- 6) (* r r u u v v))))
 (let ((?x973 (* (- 24) (* r u u v v))))
 (let ((?x969 (* (- 12) (* r r u v v))))
 (let ((?x966 (* (- 16) (* r u v v))))
 (let ((?x962 (* (- 8) (* r r v v))))
 (let ((?x939 (* (- 1) (* u u u u u v v))))
 (let ((?x959 (* (- 2) (* r u u u u v v))))
 (let ((?x711 (* (- 1) (* u u u v))))
 (let ((?x508 (* r u u u v v)))
 (let ((?x956 (* (- 12) ?x508)))
 (let ((?x494 (* u u u v v)))
 (let ((?x953 (* (- 12) ?x494)))
 (let ((?x591 (* (- 1) (* r r u u u v v))))
 (let ((?x422 (* r u)))
 (let ((?x371 (* u u v v)))
 (let ((?x949 (* (- 8) ?x371)))
 (let ((?x366 (* u u v)))
 (let ((?x718 (* (- 5) ?x366)))
 (let ((?x395 (* (- 1) (* r u u v))))
 (let ((?x337 (* r u v)))
 (let ((?x717 (* (- 5) ?x337)))
 (let ((?x747 (* 2 r)))
 (let ((?x236 (+ ?x747 ?x36 ?x43 ?x717 ?x395 ?x718 ?x949 ?x422 (* (- 6) (* u v)) ?x591 ?x953 ?x956 ?x711 (* (- 6) (* r v)) ?x959 ?x939 ?x962 ?x966 ?x969 ?x973 ?x976 ?x979)))
 (let ((?x599 (* (- 1) (* u u u v v v v))))
 (let ((?x622 (* 2 (* r u u u v v v))))
 (let ((?x619 (* (- 4) (* u u u v v v))))
 (let ((?x616 (* 8 ?x508)))
 (let ((?x613 (* (- 4) (* r r u u u v))))
 (let ((?x610 (* (- 4) ?x494)))
 (let ((?x607 (* 8 (* r u u u v))))
 (let ((?x603 (* (- 4) (* r r u u u))))
 (let ((?x429 (* u v)))
 (let ((?x405 (* 2 ?x366)))
 (let ((?x402 (* (- 2) (* r u u))))
 (let ((?x338 (* (- 1) ?x337)))
 (let ((?x831 (+ ?x338 ?x395 ?x402 ?x405 ?x371 (* (- 1) ?x422) ?x429 ?x591 ?x603 ?x607 (* u v v) ?x610 ?x613 ?x616 ?x619 ?x622 ?x599)))
 (let (($x213 (= ?x208 0)))
 (let (($x1020 (and $x213 (or (not (= (* ?x831 ?x208) 0)) (not (= (* ?x236 ?x208) 0))))))
 (let ((?x193 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x363 (+ 2 u)))
 (let ((?x455 (+ (* (- 1) (* ?x363 ?x77 v)) (* (- 1) (* ?x363 ?x363 ?x77 v)) (* ?x363 ?x77) (* (- 1) (* ?x363 ?x363 ?x363 ?x77 ?x77 v v)))))
 (let ((?x514 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x246 (+ r ?x107)))
 (let ((?x144 (+ 2 v)))
 (let ((?x197 (+ (* (- 1) (* ?x144 ?x246 u)) (* (- 1) (* ?x144 ?x246 u u)) (* ?x246 u) (* (- 1) (* ?x144 ?x144 ?x246 ?x246 u u u)))))
 (let (($x731 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x197 ?x514) 0)) (not (= (* ?x455 ?x193) 0))))))
 (rewrite (= $x731 $x1020)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((r Int) (u Int) (v Int) )(! (let ((?x81 (+ u 2)))
 (let ((?x77 (+ r u)))
 (let ((?x94 (+ (- (* (- 1) ?x77 ?x81 v) (* ?x77 ?x81 ?x81 v)) (* ?x77 ?x81))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) (- ?x94 (* ?x77 ?x77 ?x81 ?x81 ?x81 v v)))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* (- 1) ?x52 u ?x57) (* ?x52 u u ?x57)) (* ?x52 u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x74 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- ?x71 (* ?x52 ?x52 u u u ?x57 ?x57)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x74 0)) (not (= ?x97 0)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x276 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x193 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x363 (+ 2 u)))
 (let ((?x455 (+ (* (- 1) (* ?x363 ?x77 v)) (* (- 1) (* ?x363 ?x363 ?x77 v)) (* ?x363 ?x77) (* (- 1) (* ?x363 ?x363 ?x363 ?x77 ?x77 v v)))))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x514 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x107 (* (- 1) v)))
 (let ((?x246 (+ r ?x107)))
 (let ((?x144 (+ 2 v)))
 (let ((?x197 (+ (* (- 1) (* ?x144 ?x246 u)) (* (- 1) (* ?x144 ?x246 u u)) (* ?x246 u) (* (- 1) (* ?x144 ?x144 ?x246 ?x246 u u u)))))
 (let (($x731 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= (* ?x197 ?x514) 0)) (not (= (* ?x455 ?x193) 0))))))
 (let ((?x81 (+ u 2)))
 (let ((?x94 (+ (- (* (- 1) ?x77 ?x81 v) (* ?x77 ?x81 ?x81 v)) (* ?x77 ?x81))))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) (* ?x81 ?x81)) ?x45 ?x46) ?x48) (- ?x94 (* ?x77 ?x77 ?x81 ?x81 ?x81 v v)))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* (- 1) ?x52 u ?x57) (* ?x52 u u ?x57)) (* ?x52 u))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x74 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- ?x71 (* ?x52 ?x52 u u u ?x57 ?x57)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x101 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x74 0)) (not (= ?x97 0))))))
 (rewrite (= $x101 $x731)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x393 (mp (mp @x103 (quant-intro (proof-bind ?x276) (= $x102 $x296)) $x296) (rewrite (= $x296 $x296)) $x296)))
 (let ((@x916 (mp~ (mp @x393 (quant-intro (proof-bind ?x645) (= $x296 $x647)) $x647) (sk (~ $x647 $x675)) $x675)))
 (let ((@x192 (mp @x916 (rewrite (= $x675 $x162)) $x162)))
 (let ((@x590 (and-elim @x192 $x672)))
 (let ((@x247 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x672) $x531)) @x590 $x531)))
 (let (($x946 (<= ?x400 0)))
 (let ((@x907 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x672) $x946)) @x590 $x946)))
 (let (($x600 (not (<= ?x720 0))))
 (let (($x191 (>= ?x720 0)))
 (let (($x802 (>= ?x947 0)))
 (let (($x904 (<= ?x947 0)))
 (let ((@x612 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x778 (not $x904) (not $x802))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x904)) @x907 @x247 false) $x904) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x802)) @x907 @x247 false) $x802) $x778)))
 (let ((@x264 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x749 $x600 (not $x191))) (unit-resolution (and-elim @x192 $x184) @x612 $x730) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x191)) @x907 @x247 false) $x191) $x600)))
 ((_ th-lemma arith farkas 1 1 1) @x264 @x907 @x247 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        49
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             320
 :arith-nonlinear-bounds    32
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.65
 :memory                    19.20
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                499535
 :num-checks                1
 :propagations              14
 :rlimit-count              4749
 :time                      0.01
 :total-time                0.02)
