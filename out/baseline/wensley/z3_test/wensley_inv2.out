unsat
((set-logic NRA)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(declare-fun y!5 () Real)
(declare-fun a!8 () Real)
(proof
(let ((?x202 (+ (* (/ 1.0 2.0) (* d00 b!7)) (* (- (/ 1.0 2.0)) (* b00 d!6)))))
 (let (($x243 (not (<= ?x202 0.0))))
 (let (($x185 (>= ?x202 0.0)))
 (let ((?x183 (* d00 b!7)))
 (let ((?x206 (+ ?x183 (* (- 1.0) (* b00 d!6)))))
 (let (($x220 (>= ?x206 0.0)))
 (let (($x203 (= 0.0 ?x206)))
 (let ((@x238 (symm (commutativity (= $x203 (= ?x206 0.0))) (= (= ?x206 0.0) $x203))))
 (let (($x204 (= ?x206 0.0)))
 (let ((?x219 (+ (* a!8 d!6) (* (- 2.0) (* b!7 y!5)) (* 2.0 (* y00 b!7)) (* (- 1.0) (* a00 d!6)))))
 (let ((?x69 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x214 (= (+ ?x30 ?x69 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let (($x200 (= ?x202 0.0)))
 (let (($x197 (not $x200)))
 (let (($x109 (and $x197 $x214 $x204 (= ?x219 0.0))))
 (let ((?x181 (+ (* d!6 a!8) (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x149 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x69 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x97 (= (+ (* (/ 1.0 2.0) (* b!7 d00)) (* (- (/ 1.0 2.0)) (* d!6 b00))) 0.0)))
 (let (($x182 (and (not $x97) $x149 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x181 0.0))))
 (let (($x115 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x111 (* (- 2.0) (* y b))))
 (let ((?x86 (* d a)))
 (let (($x146 (= (+ ?x86 ?x111 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x72 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x69 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x101 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x69 (* 2.0 (* y b00))) 0.0)))
 (let (($x94 (not (= (+ (* (/ 1.0 2.0) (* b d00)) (* (- (/ 1.0 2.0)) (* d b00))) 0.0))))
 (and $x94 $x101 $x72 $x146))))))))) :qid k!32))
 ))
 (let (($x119 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x111 (* (- 2.0) (* y b))))
 (let ((?x86 (* d a)))
 (let (($x168 (= (+ ?x86 ?x111 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x81 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x69 (* (- 2.0) (* b00 y00))))
 (let (($x126 (= (+ ?x69 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x167 (not (= (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d))) 0.0))))
 (and $x167 $x126 $x81 $x168))))))))) :qid k!32))
 ))
 (let ((?x130 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x111 (* (- 2.0) (* y b))))
 (let ((?x86 (* d a)))
 (let (($x146 (= (+ ?x86 ?x111 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x72 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x69 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x101 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x69 (* 2.0 (* y b00))) 0.0)))
 (let (($x94 (not (= (+ (* (/ 1.0 2.0) (* b d00)) (* (- (/ 1.0 2.0)) (* d b00))) 0.0))))
 (let (($x139 (and $x94 $x101 $x72 $x146)))
 (let (($x168 (= (+ ?x86 ?x111 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x81 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x126 (= (+ ?x69 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x167 (not (= (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d))) 0.0))))
 (let (($x88 (and $x167 $x126 $x81 $x168)))
 (rewrite (= $x88 $x139)))))))))))))))))
 ))
 (let (($x152 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let (($x167 (not (= (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d))) 0.0))))
 (let ((?x111 (* (- 2.0) (* y b))))
 (let ((?x86 (* d a)))
 (let (($x168 (= (+ ?x86 ?x111 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x81 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x69 (* (- 2.0) (* b00 y00))))
 (let (($x126 (= (+ ?x69 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x126 $x81 $x168 $x167))))))))) :qid k!32))
 ))
 (let (($x60 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let (($x56 (= (+ (* (- 1.0) (/ b 2.0) d00) (* b00 (/ d 2.0))) 0.0)))
 (let (($x57 (not $x56)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or $x57 $x57))))))))) :qid k!32))
 ))
 (let ((?x154 (lambda ((a Real) (b Real) (d Real) (y Real) )(let (($x167 (not (= (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d))) 0.0))))
 (let ((?x111 (* (- 2.0) (* y b))))
 (let ((?x86 (* d a)))
 (let (($x168 (= (+ ?x86 ?x111 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x81 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x69 (* (- 2.0) (* b00 y00))))
 (let (($x126 (= (+ ?x69 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x147 (and $x126 $x81 $x168 $x167)))
 (let (($x56 (= (+ (* (- 1.0) (/ b 2.0) d00) (* b00 (/ d 2.0))) 0.0)))
 (let (($x57 (not $x56)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x59 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or $x57 $x57))))
 (rewrite (= $x59 $x147)))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x113 (mp (mp @x61 (quant-intro (proof-bind ?x154) (= $x60 $x152)) $x152) (rewrite (= $x152 $x119)) $x119)))
 (let ((@x177 (mp~ (mp @x113 (quant-intro (proof-bind ?x130) (= $x119 $x115)) $x115) (sk (~ $x115 $x182)) $x182)))
 (let ((@x226 (mp @x177 (rewrite (= $x182 $x109)) $x109)))
 (let ((@x239 (mp (and-elim @x226 $x204) @x238 $x203)))
 (let ((@x241 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x203) $x220)) @x239 $x220) (hypothesis (not $x185)) false)))
 (let (($x193 (= 0.0 ?x202)))
 (let (($x250 (not $x193)))
 (let ((@x252 (monotonicity (symm (commutativity (= $x193 $x200)) (= $x200 $x193)) (= $x197 $x250))))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x193 $x243 (not $x185))) (mp (and-elim @x226 $x197) @x252 $x250) (or $x243 (not $x185)))))
 (let (($x222 (<= ?x206 0.0)))
 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x203) $x222)) @x239 $x222) (unit-resolution @x255 (lemma @x241 $x185) $x243) false))))))))))))))))))))))))))))))))))))))))

(:added-eqs           11
 :arith-eq-adapter    4
 :arith-conflicts     2
 :arith-diseq         2
 :arith-lower         5
 :arith-make-feasible 4
 :arith-max-columns   26
 :arith-max-rows      4
 :arith-offset-eqs    1
 :arith-upper         5
 :conflicts           2
 :decisions           1
 :del-clause          14
 :max-memory          17.73
 :memory              17.30
 :mk-bool-var         16
 :mk-clause           16
 :num-allocs          82397
 :num-checks          1
 :propagations        8
 :rlimit-count        1434
 :time                0.00
 :total-time          0.01)
