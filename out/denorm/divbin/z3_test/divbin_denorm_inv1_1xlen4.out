unsat
((set-logic NRA)
(proof
(let (($x579 (exists ((b Real) (x Real) )(! (let ((?x620 (* (- (/ 1.0 2.0)) b)))
 (let ((?x610 (* x b)))
 (let ((?x619 (* (- 1.0) ?x610)))
 (let ((?x74 (* b00 x00)))
 (let ((?x653 (+ ?x74 r00 ?x619 ?x620)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x568 (+ 1.0 ?x51)))
 (let ((?x656 (* ?x568 ?x568 ?x653 b b b)))
 (let ((?x657 (* (/ 1.0 8.0) ?x656)))
 (let ((?x655 (* (- (/ 1.0 4.0)) (* ?x568 ?x568 ?x653 ?x653 b b))))
 (let ((?x641 (* ?x568 b)))
 (let ((?x652 (* (- (/ 1.0 2.0)) ?x641)))
 (let ((?x642 (* ?x568 ?x568 b b b)))
 (let ((?x651 (* (- (/ 1.0 8.0)) ?x642)))
 (let ((?x663 (+ ?x651 ?x652 ?x655 ?x657)))
 (let ((?x648 (* (/ 1.0 2.0) ?x641)))
 (let ((?x649 (+ ?x619 ?x620 ?x648)))
 (let ((?x574 (* ?x649 ?x663)))
 (let (($x576 (= ?x574 0.0)))
 (not $x576)))))))))))))))))))) :qid k!28))
 ))
 (let (($x372 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x374 (lambda ((b Real) (x Real) )(let ((?x620 (* (- (/ 1.0 2.0)) b)))
 (let ((?x610 (* x b)))
 (let ((?x619 (* (- 1.0) ?x610)))
 (let ((?x74 (* b00 x00)))
 (let ((?x653 (+ ?x74 r00 ?x619 ?x620)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x568 (+ 1.0 ?x51)))
 (let ((?x656 (* ?x568 ?x568 ?x653 b b b)))
 (let ((?x657 (* (/ 1.0 8.0) ?x656)))
 (let ((?x655 (* (- (/ 1.0 4.0)) (* ?x568 ?x568 ?x653 ?x653 b b))))
 (let ((?x641 (* ?x568 b)))
 (let ((?x652 (* (- (/ 1.0 2.0)) ?x641)))
 (let ((?x642 (* ?x568 ?x568 b b b)))
 (let ((?x651 (* (- (/ 1.0 8.0)) ?x642)))
 (let ((?x663 (+ ?x651 ?x652 ?x655 ?x657)))
 (let ((?x648 (* (/ 1.0 2.0) ?x641)))
 (let ((?x649 (+ ?x619 ?x620 ?x648)))
 (let ((?x574 (* ?x649 ?x663)))
 (let (($x576 (= ?x574 0.0)))
 (let (($x571 (not $x576)))
 (let ((?x854 (* b b b b00 x00)))
 (let ((?x824 (* (/ 1.0 8.0) ?x854)))
 (let ((?x788 (* x x x b b b b)))
 (let ((?x182 (* (- (/ 1.0 2.0)) ?x788)))
 (let ((?x771 (* x x b b b b00 x00)))
 (let ((?x154 (* (/ 1.0 2.0) ?x771)))
 (let ((?x756 (* x b b b b00 x00)))
 (let ((?x166 (* (/ 1.0 2.0) ?x756)))
 (let ((?x684 (* x b b b)))
 (let ((?x247 (* (- (/ 1.0 2.0)) ?x684)))
 (let ((?x645 (* b b b)))
 (let ((?x243 (* (- (/ 1.0 8.0)) ?x645)))
 (let ((?x464 (* b b b b)))
 (let ((?x141 (* (- (/ 1.0 16.0)) ?x464)))
 (let ((?x456 (* x b b b b)))
 (let ((?x490 (* (- (/ 3.0 8.0)) ?x456)))
 (let ((?x451 (* x x b b b b)))
 (let ((?x335 (* (- (/ 3.0 4.0)) ?x451)))
 (let ((?x445 (* b b b r00)))
 (let ((?x815 (* (/ 1.0 8.0) ?x445)))
 (let ((?x435 (* x b b b r00)))
 (let ((?x839 (* (/ 1.0 2.0) ?x435)))
 (let ((?x421 (* x x b b b r00)))
 (let ((?x836 (* (/ 1.0 2.0) ?x421)))
 (let ((?x396 (+ ?x620 r00 ?x74 ?x619)))
 (let ((?x419 (* (- (/ 1.0 4.0)) (* ?x568 ?x568 ?x396 ?x396 b b))))
 (let ((?x162 (* x x b b b)))
 (let ((?x361 (* (- (/ 1.0 2.0)) ?x162)))
 (let ((?x171 (+ ?x620 ?x361 ?x419 ?x836 ?x839 ?x815 ?x335 ?x490 ?x141 ?x619 ?x243 ?x247 ?x166 ?x154 ?x182 ?x824)))
 (let ((?x341 (* 0.0 ?x171)))
 (let ((?x330 (+ ?x836 ?x839 ?x815 ?x335 ?x490 ?x141 ?x166 ?x154 ?x182 ?x824)))
 (let ((?x394 (+ ?x620 ?x619)))
 (let ((?x462 (+ ?x361 ?x243 ?x247)))
 (let ((?x176 (+ ?x462 ?x394 ?x419 ?x330)))
 (let ((?x825 (+ (* (/ 1.0 8.0) (* 4.0 ?x421)) (* (/ 1.0 8.0) (* 4.0 ?x435)) ?x815 (* (/ 1.0 8.0) (* (- 6.0) ?x451)) (* (/ 1.0 8.0) (* (- 3.0) ?x456)) (* (/ 1.0 8.0) (* (- (/ 1.0 2.0)) ?x464)) (* (/ 1.0 8.0) (* 4.0 ?x756)) (* (/ 1.0 8.0) (* 4.0 ?x771)) (* (/ 1.0 8.0) (* (- 4.0) ?x788)) ?x824)))
 (let ((?x789 (* (- 4.0) ?x788)))
 (let ((?x776 (* 4.0 ?x771)))
 (let ((?x800 (* 4.0 ?x756)))
 (let ((?x463 (* (- (/ 1.0 2.0)) ?x464)))
 (let ((?x796 (* (- 3.0) ?x456)))
 (let ((?x798 (* (- 6.0) ?x451)))
 (let ((?x799 (* 4.0 ?x435)))
 (let ((?x851 (* 4.0 ?x421)))
 (let ((?x802 (+ ?x851 ?x799 ?x445 ?x798 ?x796 ?x463 ?x800 ?x776 ?x789 ?x854)))
 (let ((?x810 (* (/ 1.0 8.0) ?x802)))
 (let ((?x260 (* ?x51 ?x51 ?x619 b b b)))
 (let ((?x266 (* ?x51 ?x619 b b b)))
 (let ((?x267 (* ?x51 1.0 ?x619 b b b)))
 (let ((?x269 (* ?x619 b b b)))
 (let ((?x251 (* ?x51 ?x51 ?x74 b b b)))
 (let ((?x255 (* ?x51 ?x74 b b b)))
 (let ((?x256 (* ?x51 1.0 ?x74 b b b)))
 (let ((?x744 (* ?x74 b b b)))
 (let ((?x801 (* ?x51 ?x51 r00 b b b)))
 (let ((?x829 (* ?x51 r00 b b b)))
 (let ((?x830 (* ?x51 1.0 r00 b b b)))
 (let ((?x767 (* r00 b b b)))
 (let ((?x831 (* ?x51 ?x51 ?x620 b b b)))
 (let ((?x817 (* ?x51 ?x620 b b b)))
 (let ((?x832 (* ?x51 1.0 ?x620 b b b)))
 (let ((?x818 (* ?x620 b b b)))
 (let ((?x259 (+ ?x818 ?x832 ?x817 ?x831 ?x767 ?x830 ?x829 ?x801 ?x744 ?x256 ?x255 ?x251 ?x269 ?x267 ?x266 ?x260)))
 (let ((?x449 (* (- 2.0) ?x451)))
 (let ((?x230 (* (- 1.0) ?x456)))
 (let ((?x759 (* 2.0 ?x756)))
 (let ((?x431 (* 2.0 ?x435)))
 (let ((?x792 (+ ?x463 ?x230 ?x230 ?x449 ?x445 ?x431 ?x431 ?x851 ?x854 ?x759 ?x759 ?x776 ?x230 ?x449 ?x449 ?x789)))
 (let ((@x779 (rewrite (= (* 4.0 (* x x b00 x00 b b b)) ?x776))))
 (let ((@x770 (rewrite (= ?x251 (* 4.0 (* x x b00 x00 b b b))))))
 (let ((@x758 (trans (rewrite (= ?x256 (* 2.0 (* x b00 x00 b b b)))) (rewrite (= (* 2.0 (* x b00 x00 b b b)) ?x759)) (= ?x256 ?x759))))
 (let ((@x844 (trans (rewrite (= ?x801 (* 4.0 (* x x r00 b b b)))) (rewrite (= (* 4.0 (* x x r00 b b b)) ?x851)) (= ?x801 ?x851))))
 (let ((@x432 (trans (rewrite (= ?x830 (* 2.0 (* x r00 b b b)))) (rewrite (= (* 2.0 (* x r00 b b b)) ?x431)) (= ?x830 ?x431))))
 (let ((@x794 (monotonicity (rewrite (= ?x818 ?x463)) (rewrite (= ?x832 ?x230)) (rewrite (= ?x817 ?x230)) (rewrite (= ?x831 ?x449)) (rewrite (= ?x767 ?x445)) @x432 (rewrite (= ?x829 ?x431)) @x844 (rewrite (= ?x744 ?x854)) @x758 (rewrite (= ?x255 ?x759)) (trans @x770 @x779 (= ?x251 ?x776)) (rewrite (= ?x269 ?x230)) (rewrite (= ?x267 ?x449)) (rewrite (= ?x266 ?x449)) (rewrite (= ?x260 ?x789)) (= ?x259 ?x792))))
 (let ((@x809 (monotonicity (rewrite (= ?x653 ?x396)) (= ?x656 (* ?x568 ?x568 ?x396 b b b)))))
 (let ((@x465 (trans @x809 (rewrite (= (* ?x568 ?x568 ?x396 b b b) ?x259)) (= ?x656 ?x259))))
 (let ((@x808 (trans @x465 (trans @x794 (rewrite (= ?x792 ?x802)) (= ?x259 ?x802)) (= ?x656 ?x802))))
 (let ((@x828 (trans (monotonicity @x808 (= ?x657 ?x810)) (rewrite (= ?x810 ?x825)) (= ?x657 ?x825))))
 (let ((?x764 (+ ?x620 (* (- (/ 1.0 2.0)) (* 2.0 ?x610)))))
 (let ((?x553 (* 2.0 ?x610)))
 (let ((?x565 (+ b ?x553)))
 (let ((?x364 (* (- (/ 1.0 2.0)) ?x565)))
 (let ((@x564 (trans (rewrite (= ?x641 (+ (* 1.0 b) (* ?x51 b)))) (rewrite (= (+ (* 1.0 b) (* ?x51 b)) ?x565)) (= ?x641 ?x565))))
 (let ((@x276 (trans (monotonicity @x564 (= ?x652 ?x364)) (rewrite (= ?x364 ?x764)) (= ?x652 ?x764))))
 (let ((?x351 (+ (* (- (/ 1.0 8.0)) (* 4.0 ?x162)) ?x243 (* (- (/ 1.0 8.0)) (* 4.0 ?x684)))))
 (let ((@x354 (rewrite (= (* (- (/ 1.0 8.0)) (+ (* 4.0 ?x162) ?x645 (* 4.0 ?x684))) ?x351))))
 (let ((?x667 (* 4.0 ?x684)))
 (let ((?x629 (* 4.0 ?x162)))
 (let ((?x683 (+ ?x629 ?x645 ?x667)))
 (let ((?x671 (* ?x51 ?x51 b b b)))
 (let ((?x647 (* ?x51 b b b)))
 (let ((?x665 (* ?x51 1.0 b b b)))
 (let ((?x634 (+ ?x645 ?x665 ?x647 ?x671)))
 (let ((@x664 (monotonicity (rewrite (= ?x665 (* 2.0 ?x684))) (rewrite (= ?x647 (* 2.0 ?x684))) (rewrite (= ?x671 ?x629)) (= ?x634 (+ ?x645 (* 2.0 ?x684) (* 2.0 ?x684) ?x629)))))
 (let ((@x599 (trans @x664 (rewrite (= (+ ?x645 (* 2.0 ?x684) (* 2.0 ?x684) ?x629) ?x683)) (= ?x634 ?x683))))
 (let ((@x234 (monotonicity (trans (rewrite (= ?x642 ?x634)) @x599 (= ?x642 ?x683)) (= ?x651 (* (- (/ 1.0 8.0)) ?x683)))))
 (let ((@x448 (trans (trans @x234 @x354 (= ?x651 ?x351)) (rewrite (= ?x351 ?x462)) (= ?x651 ?x462))))
 (let ((@x170 (monotonicity @x448 (trans @x276 (rewrite (= ?x764 ?x394)) (= ?x652 ?x394)) (rewrite (= ?x655 ?x419)) (trans @x828 (rewrite (= ?x825 ?x330)) (= ?x657 ?x330)) (= ?x663 ?x176))))
 (let ((@x604 (rewrite (= (+ (* (/ 1.0 2.0) b) (* (/ 1.0 2.0) ?x553)) (+ (* (/ 1.0 2.0) b) ?x610)))))
 (let ((@x590 (trans (monotonicity @x564 (= ?x648 (* (/ 1.0 2.0) ?x565))) (rewrite (= (* (/ 1.0 2.0) ?x565) (+ (* (/ 1.0 2.0) b) (* (/ 1.0 2.0) ?x553)))) (= ?x648 (+ (* (/ 1.0 2.0) b) (* (/ 1.0 2.0) ?x553))))))
 (let ((@x614 (monotonicity (trans @x590 @x604 (= ?x648 (+ (* (/ 1.0 2.0) b) ?x610))) (= ?x649 (+ ?x619 ?x620 (+ (* (/ 1.0 2.0) b) ?x610))))))
 (let ((@x628 (trans @x614 (rewrite (= (+ ?x619 ?x620 (+ (* (/ 1.0 2.0) b) ?x610)) 0.0)) (= ?x649 0.0))))
 (let ((@x849 (monotonicity @x628 (trans @x170 (rewrite (= ?x176 ?x171)) (= ?x663 ?x171)) (= ?x574 ?x341))))
 (let ((@x784 (monotonicity (trans @x849 (rewrite (= ?x341 0.0)) $x576) (= $x576 (= 0.0 0.0)))))
 (let ((@x363 (monotonicity (trans @x784 (rewrite (= (= 0.0 0.0) true)) (= $x576 true)) (= $x571 (not true)))))
 (trans @x363 (rewrite (= (not true) false)) (= $x571 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x488 (trans (quant-intro (proof-bind ?x374) (= $x579 $x372)) (elim-unused (= $x372 false)) (= $x579 false))))
 (let (($x461 (exists ((b Real) (r Real) (x Real) )(! (let ((?x91 (* (- 1.0) r00)))
 (let ((?x131 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x661 (+ ?x75 r ?x131 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x531 (+ r ?x131)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x568 (+ 1.0 ?x51)))
 (let ((?x343 (+ (* (- (/ 1.0 8.0)) (* ?x568 ?x568 b b b)) (* (- (/ 1.0 2.0)) (* ?x568 b)) (* (- (/ 1.0 4.0)) (* ?x568 ?x568 ?x531 ?x531 b b)) (* (/ 1.0 8.0) (* ?x568 ?x568 ?x531 b b b)))))
 (let ((?x195 (* x x r b b b)))
 (let ((?x198 (* (/ 1.0 2.0) ?x195)))
 (let ((?x175 (* (- 1.0) (* x x r r b b))))
 (let ((?x102 (* x b)))
 (let ((?x148 (* (- 1.0) ?x102)))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* x x b b b))))
 (let ((?x438 (+ ?x75 r ?x91 ?x102)))
 (let (($x459 (or (not (= (* ?x438 (+ ?x142 ?x148 ?x175 ?x198)) 0.0)) (not (= (* ?x343 ?x661) 0.0)))))
 (and (= ?x438 0.0) $x459)))))))))))))))))) :qid k!28))
 ))
 (let (($x66 (exists ((b Real) (r Real) (x Real) )(! (let ((?x51 (* 2.0 x)))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x58 (- (- (* (- 1.0) ?x36 ?x36 ?x36 ?x52 ?x52) (* ?x36 ?x52)) (* ?x36 ?x36 ?x48 ?x48 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ ?x58 (* ?x36 ?x36 ?x36 ?x48 ?x52 ?x52)))))
 (let ((?x37 (* ?x36 2.0 x)))
 (let ((?x42 (- (- (* (- 1.0) ?x36 ?x36 ?x36 2.0 x 2.0 x) ?x37) (* ?x36 ?x36 r r 2.0 x 2.0 x))))
 (let ((?x45 (* (+ (- (+ (* (- 1.0) b00 x00) r) r00) ?x37) (+ ?x42 (* ?x36 ?x36 ?x36 r 2.0 x 2.0 x)))))
 (let (($x34 (= (+ (- (+ (* (- 1.0) b00 x00) r) r00) (* b x)) 0.0)))
 (and $x34 (or (not (= ?x45 0.0)) (not (= ?x61 0.0)))))))))))))) :qid k!28))
 ))
 (let ((?x541 (lambda ((b Real) (r Real) (x Real) )(let ((?x91 (* (- 1.0) r00)))
 (let ((?x131 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x661 (+ ?x75 r ?x131 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x531 (+ r ?x131)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x568 (+ 1.0 ?x51)))
 (let ((?x343 (+ (* (- (/ 1.0 8.0)) (* ?x568 ?x568 b b b)) (* (- (/ 1.0 2.0)) (* ?x568 b)) (* (- (/ 1.0 4.0)) (* ?x568 ?x568 ?x531 ?x531 b b)) (* (/ 1.0 8.0) (* ?x568 ?x568 ?x531 b b b)))))
 (let ((?x195 (* x x r b b b)))
 (let ((?x198 (* (/ 1.0 2.0) ?x195)))
 (let ((?x175 (* (- 1.0) (* x x r r b b))))
 (let ((?x102 (* x b)))
 (let ((?x148 (* (- 1.0) ?x102)))
 (let ((?x142 (* (- (/ 1.0 2.0)) (* x x b b b))))
 (let ((?x438 (+ ?x75 r ?x91 ?x102)))
 (let (($x459 (or (not (= (* ?x438 (+ ?x142 ?x148 ?x175 ?x198)) 0.0)) (not (= (* ?x343 ?x661) 0.0)))))
 (let (($x535 (and (= ?x438 0.0) $x459)))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x58 (- (- (* (- 1.0) ?x36 ?x36 ?x36 ?x52 ?x52) (* ?x36 ?x52)) (* ?x36 ?x36 ?x48 ?x48 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ ?x58 (* ?x36 ?x36 ?x36 ?x48 ?x52 ?x52)))))
 (let ((?x37 (* ?x36 2.0 x)))
 (let ((?x42 (- (- (* (- 1.0) ?x36 ?x36 ?x36 2.0 x 2.0 x) ?x37) (* ?x36 ?x36 r r 2.0 x 2.0 x))))
 (let ((?x45 (* (+ (- (+ (* (- 1.0) b00 x00) r) r00) ?x37) (+ ?x42 (* ?x36 ?x36 ?x36 r 2.0 x 2.0 x)))))
 (let (($x34 (= (+ (- (+ (* (- 1.0) b00 x00) r) r00) (* b x)) 0.0)))
 (let (($x65 (and $x34 (or (not (= ?x45 0.0)) (not (= ?x61 0.0))))))
 (rewrite (= $x65 $x535)))))))))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x562 (mp (mp @x67 (quant-intro (proof-bind ?x541) (= $x66 $x461)) $x461) (rewrite (= $x461 $x579)) $x579)))
 (mp @x562 @x488 false))))))))))))

(:max-memory   17.64
 :memory       17.36
 :num-allocs   55979
 :num-checks   1
 :rlimit-count 1303
 :time         0.00
 :total-time   0.01)
