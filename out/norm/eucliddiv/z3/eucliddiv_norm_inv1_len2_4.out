unsat
((set-logic NIA)
(proof
(let (($x54 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x48 (* ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y00)))
 (let ((?x46 (+ (* (- 1) ?x42 ?x42 ?x42 y00 y00) ?x45)))
 (let ((?x47 (- ?x46 ?x45)))
 (let ((?x49 (+ ?x47 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x52))))))))))))) :qid k!29))
 ))
 (let (($x504 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x505 (lambda ((q Int) (r Int) (y Int) )(let ((?x42 (- r y00)))
 (let ((?x48 (* ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y00)))
 (let ((?x46 (+ (* (- 1) ?x42 ?x42 ?x42 y00 y00) ?x45)))
 (let ((?x47 (- ?x46 ?x45)))
 (let ((?x49 (+ ?x47 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x53 (and $x33 $x41 $x52)))
 (let (($x475 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x113 (= (+ (* (- 1) y00) y) 0)))
 (let (($x528 (and $x113 $x475 false)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x186 (+ r ?x59)))
 (let ((?x443 (* y00 y00 ?x186 ?x186 ?x186)))
 (let ((?x287 (* (- 1) ?x443)))
 (let ((?x509 (+ ?x287 ?x443)))
 (let ((@x440 (rewrite (= ?x42 ?x186))))
 (let ((@x494 (monotonicity @x440 @x440 @x440 (= ?x48 (* ?x186 ?x186 ?x186 y00 y00)))))
 (let ((@x506 (trans @x494 (rewrite (= (* ?x186 ?x186 ?x186 y00 y00) ?x443)) (= ?x48 ?x443))))
 (let ((?x449 (+ 1 q)))
 (let ((?x477 (* y00 ?x449 ?x449 ?x449 ?x186 ?x186 ?x186)))
 (let ((?x483 (+ ?x287 ?x477)))
 (let ((?x447 (+ ?x483 (* (- 1) ?x477))))
 (let ((@x428 (rewrite (= ?x44 ?x449))))
 (let ((@x469 (monotonicity @x428 @x428 @x428 @x440 @x440 @x440 (= ?x45 (* ?x449 ?x449 ?x449 ?x186 ?x186 ?x186 y00)))))
 (let ((@x482 (trans @x469 (rewrite (= (* ?x449 ?x449 ?x449 ?x186 ?x186 ?x186 y00) ?x477)) (= ?x45 ?x477))))
 (let ((@x487 (trans (monotonicity (rewrite (= ?x46 ?x483)) @x482 (= ?x47 (- ?x483 ?x477))) (rewrite (= (- ?x483 ?x477) ?x447)) (= ?x47 ?x447))))
 (let ((@x515 (monotonicity (trans @x487 (rewrite (= ?x447 ?x287)) (= ?x47 ?x287)) @x506 (= ?x49 ?x509))))
 (let ((@x535 (monotonicity (trans @x515 (rewrite (= ?x509 0)) $x50) (= $x50 (= 0 0)))))
 (let ((@x83 (monotonicity (trans @x535 (rewrite (= (= 0 0) true)) (= $x50 true)) (= $x51 (not true)))))
 (let ((@x470 (monotonicity (trans @x83 (rewrite (= (not true) false)) (= $x51 false)) (= $x52 (or false)))))
 (let ((@x525 (monotonicity (rewrite (= $x33 $x113)) (rewrite (= $x41 $x475)) (trans @x470 (rewrite (= (or false) false)) (= $x52 false)) (= $x53 $x528))))
 (trans @x525 (rewrite (= $x528 false)) (= $x53 false))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x540 (trans (quant-intro (proof-bind ?x505) (= $x54 $x504)) (elim-unused (= $x504 false)) (= $x54 false))))
 (let ((@x55 (asserted $x54)))
 (mp @x55 @x540 false))))))))

(:max-memory   3.41
 :memory       3.10
 :mk-bool-var  5
 :num-allocs   922277
 :rlimit-count 471
 :time         0.01
 :total-time   0.01)
