unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x214 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x203 (<= ?x214 (- 1))))
 (let (($x314 (= ?x214 (- 1))))
 (let ((?x654 (+ c!3 k!2)))
 (let ((?x430 (+ m!1 k!2)))
 (let ((?x649 (+ 6 m!1)))
 (let ((?x159 (+ 1 n!0)))
 (let ((?x156 (* (- 9) n!0)))
 (let ((?x161 (* 3 (* ?x159 ?x159 ?x159 ?x159 ?x159 ?x649 ?x649 ?x430 ?x430 ?x430 ?x654 ?x654))))
 (let ((?x672 (* 3 (* ?x159 ?x159 ?x159 ?x159 ?x649 ?x649 ?x430 ?x430 ?x430 ?x654 ?x654))))
 (let ((?x262 (* n!0 n!0)))
 (let ((?x470 (* (- 3) ?x262)))
 (let ((?x204 (* (- 1) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x430 ?x430 ?x430 ?x430 ?x654 ?x654))))
 (let ((?x235 (+ (* ?x159 ?x159 ?x649 ?x649 ?x649 ?x430 ?x430 ?x430) m!1 ?x204 ?x470 (* (- 3) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x649 ?x430 ?x430)) (* (- 1) (* ?x159 ?x159 ?x649 ?x649 ?x649 ?x430 ?x430)) ?x672 ?x161 k!2 (* (- 3) (* ?x159 ?x159 ?x649 ?x649 ?x430 ?x430 ?x654 ?x654)) (* (- 3) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x430 ?x430 ?x654 ?x654)) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x430 ?x430 ?x430 ?x654 ?x654) (* (- 3) (* ?x159 ?x159 ?x159 ?x159 ?x649 ?x649 ?x649 ?x430 ?x430)) ?x156 (* (- 1) (* ?x159 ?x649 ?x649 ?x430 ?x430 ?x654 ?x654)) (* ?x159 ?x649 ?x649 ?x430 ?x430 ?x430 ?x654 ?x654))))
 (let (($x309 (= ?x235 7)))
 (let (($x632 (not $x309)))
 (let ((?x436 (* (- 2) n!0)))
 (let ((?x147 (* (- 1) (* k!2 n!0))))
 (let ((?x575 (* 3 c!3)))
 (let ((?x337 (+ ?x575 k!2 ?x147 ?x436)))
 (let (($x308 (= ?x337 1)))
 (let ((?x254 (* k!2 k!2)))
 (let ((?x332 (+ ?x254 (* (- 18) c!3) (* (- 5) k!2) (* (- 9) (* c!3 n!0)) (* 9 n!0))))
 (let (($x452 (= ?x332 (- 4))))
 (let ((?x253 (+ m!1 (* (- 6) n!0))))
 (let (($x469 (= ?x253 6)))
 (let (($x458 (and $x469 $x452 $x308 $x314 $x632)))
 (let ((?x157 (+ k!2 m!1)))
 (let ((?x295 (* (- 1) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x157 ?x157 ?x157 ?x157 ?x654 ?x654))))
 (let ((?x162 (* 3 (* ?x159 ?x159 ?x159 ?x159 ?x159 ?x649 ?x649 ?x157 ?x157 ?x157 ?x654 ?x654))))
 (let ((?x573 (* 3 (* ?x159 ?x159 ?x159 ?x159 ?x649 ?x649 ?x157 ?x157 ?x157 ?x654 ?x654))))
 (let ((?x468 (+ k!2 m!1 ?x156 (* (- 3) (* ?x159 ?x159 ?x159 ?x159 ?x649 ?x649 ?x649 ?x157 ?x157)) (* (- 3) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x649 ?x157 ?x157)) (* (- 3) (* ?x159 ?x159 ?x649 ?x649 ?x157 ?x157 ?x654 ?x654)) ?x470 (* (- 3) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x157 ?x157 ?x654 ?x654)) (* ?x159 ?x159 ?x159 ?x649 ?x649 ?x157 ?x157 ?x157 ?x654 ?x654) ?x573 (* ?x159 ?x649 ?x649 ?x157 ?x157 ?x157 ?x654 ?x654) (* ?x159 ?x159 ?x649 ?x649 ?x649 ?x157 ?x157 ?x157) ?x162 (* (- 1) (* ?x159 ?x649 ?x649 ?x157 ?x157 ?x654 ?x654)) (* (- 1) (* ?x159 ?x159 ?x649 ?x649 ?x649 ?x157 ?x157)) ?x295)))
 (let ((?x580 (+ (* 18 c!3) (* 5 k!2) ?x156 (* (- 1) ?x254) (* 9 (* c!3 n!0)))))
 (let (($x876 (and $x469 (= ?x580 4) (= (+ ?x575 k!2 ?x436 ?x147) 1) (= (+ k!2 (* (- 3) n!0) ?x470) 1) (not (= ?x468 7)))))
 (let (($x438 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x320 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x873 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x859 (* (- 1) ?x873)))
 (let ((?x702 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x713 (* (- 1) ?x702)))
 (let ((?x621 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x674 (* (- 1) ?x621)))
 (let ((?x613 (* ?x323 ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x612 (* 3 ?x613)))
 (let ((?x506 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70 ?x70)))
 (let ((?x410 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x363 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x368 (* 3 ?x363)))
 (let ((?x360 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x288 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x304 (* (- 3) ?x288)))
 (let ((?x281 (* n n)))
 (let ((?x312 (* (- 3) ?x281)))
 (let ((?x271 (* ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x155 (* (- 3) ?x271)))
 (let ((?x192 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x219 (* (- 3) ?x192)))
 (let ((?x132 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x441 (* (- 3) ?x132)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x879 (+ k m ?x222 ?x441 ?x219 ?x155 ?x312 ?x304 ?x360 ?x368 ?x410 ?x506 ?x612 ?x674 ?x713 ?x859)))
 (let (($x310 (= (+ k (* (- 3) n) ?x312) 1)))
 (let (($x272 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x223 (* (- 1) ?x49)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x220 (= (+ ?x40 ?x44 ?x222 ?x223 (* 9 (* c n))) 4)))
 (let (($x136 (= (+ m (* (- 6) n)) 6)))
 (and $x136 $x220 $x272 $x310 (not (= ?x879 7)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x639 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x320 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x613 (* ?x323 ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x363 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x873 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x702 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x65 (* 3 n)))
 (let ((?x621 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x499 (* (- 1) k)))
 (let ((?x544 (+ (* 3 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)) (* 3 (* ?x323 ?x323)) (* 3 (* ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)) (* 3 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)) (* 3 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)) ?x499 (* (- 1) m) (* (- 1) (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70 ?x70)) ?x621 ?x65 (* (- 1) (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)) ?x702 ?x873 (* (- 1) (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)) (* (- 3) ?x363) (* (- 3) ?x613))))
 (let (($x429 (= (+ (* 3 (* n n)) ?x499 ?x65) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x223 (* (- 1) ?x49)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x136 (= (+ m (* (- 6) n)) 6)))
 (and $x136 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x222 ?x223) 4) $x198 $x429 (not (= ?x544 (- 4)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x671 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x320 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x873 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x859 (* (- 1) ?x873)))
 (let ((?x702 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x713 (* (- 1) ?x702)))
 (let ((?x621 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x674 (* (- 1) ?x621)))
 (let ((?x613 (* ?x323 ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x612 (* 3 ?x613)))
 (let ((?x506 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70 ?x70)))
 (let ((?x410 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x363 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x368 (* 3 ?x363)))
 (let ((?x360 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x288 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x304 (* (- 3) ?x288)))
 (let ((?x281 (* n n)))
 (let ((?x312 (* (- 3) ?x281)))
 (let ((?x271 (* ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x155 (* (- 3) ?x271)))
 (let ((?x192 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x219 (* (- 3) ?x192)))
 (let ((?x132 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x441 (* (- 3) ?x132)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x879 (+ k m ?x222 ?x441 ?x219 ?x155 ?x312 ?x304 ?x360 ?x368 ?x410 ?x506 ?x612 ?x674 ?x713 ?x859)))
 (let (($x310 (= (+ k (* (- 3) n) ?x312) 1)))
 (let (($x272 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x223 (* (- 1) ?x49)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x220 (= (+ ?x40 ?x44 ?x222 ?x223 (* 9 (* c n))) 4)))
 (let (($x136 (= (+ m (* (- 6) n)) 6)))
 (let (($x259 (and $x136 $x220 $x272 $x310 (not (= ?x879 7)))))
 (let ((?x65 (* 3 n)))
 (let ((?x499 (* (- 1) k)))
 (let ((?x544 (+ (* 3 ?x288) (* 3 (* ?x323 ?x323)) (* 3 ?x271) (* 3 ?x192) (* 3 ?x132) ?x499 (* (- 1) m) (* (- 1) ?x506) ?x621 ?x65 (* (- 1) ?x410) ?x702 ?x873 (* (- 1) ?x360) (* (- 3) ?x363) (* (- 3) ?x613))))
 (let (($x429 (= (+ (* 3 ?x281) ?x499 ?x65) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x537 (and $x136 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x222 ?x223) 4) $x198 $x429 (not (= ?x544 (- 4))))))
 (rewrite (= $x537 $x259)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x425 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x320 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x613 (* ?x323 ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x612 (* 3 ?x613)))
 (let ((?x363 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x368 (* 3 ?x363)))
 (let ((?x360 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x873 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x859 (* (- 1) ?x873)))
 (let ((?x702 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x713 (* (- 1) ?x702)))
 (let ((?x410 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x311 (* (- 3) n)))
 (let ((?x621 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x674 (* (- 1) ?x621)))
 (let ((?x506 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70 ?x70)))
 (let ((?x132 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x441 (* (- 3) ?x132)))
 (let ((?x192 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x219 (* (- 3) ?x192)))
 (let ((?x271 (* ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x155 (* (- 3) ?x271)))
 (let ((?x288 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x304 (* (- 3) ?x288)))
 (let ((?x514 (+ ?x304 (* (- 3) (* ?x323 ?x323)) ?x155 ?x219 ?x441 k m ?x506 ?x674 ?x311 ?x410 ?x713 ?x859 ?x360 ?x368 ?x612)))
 (let (($x429 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x375 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x136 (= (+ m (* (- 6) n)) 6)))
 (and $x136 (= ?x375 (- 4)) $x239 $x429 (not (= ?x514 4)))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x531 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x320 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x613 (* ?x323 ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x363 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x873 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x702 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x65 (* 3 n)))
 (let ((?x621 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x499 (* (- 1) k)))
 (let ((?x544 (+ (* 3 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)) (* 3 (* ?x323 ?x323)) (* 3 (* ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)) (* 3 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)) (* 3 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)) ?x499 (* (- 1) m) (* (- 1) (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70 ?x70)) ?x621 ?x65 (* (- 1) (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)) ?x702 ?x873 (* (- 1) (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)) (* (- 3) ?x363) (* (- 3) ?x613))))
 (let (($x429 (= (+ (* 3 (* n n)) ?x499 ?x65) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x223 (* (- 1) ?x49)))
 (let ((?x222 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x136 (= (+ m (* (- 6) n)) 6)))
 (let (($x537 (and $x136 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x222 ?x223) 4) $x198 $x429 (not (= ?x544 (- 4))))))
 (let ((?x612 (* 3 ?x613)))
 (let ((?x368 (* 3 ?x363)))
 (let ((?x360 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x859 (* (- 1) ?x873)))
 (let ((?x713 (* (- 1) ?x702)))
 (let ((?x410 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x311 (* (- 3) n)))
 (let ((?x674 (* (- 1) ?x621)))
 (let ((?x506 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70 ?x70)))
 (let ((?x132 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x441 (* (- 3) ?x132)))
 (let ((?x192 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x219 (* (- 3) ?x192)))
 (let ((?x271 (* ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x155 (* (- 3) ?x271)))
 (let ((?x288 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x304 (* (- 3) ?x288)))
 (let ((?x514 (+ ?x304 (* (- 3) (* ?x323 ?x323)) ?x155 ?x219 ?x441 k m ?x506 ?x674 ?x311 ?x410 ?x713 ?x859 ?x360 ?x368 ?x612)))
 (let ((?x48 (* 9 n)))
 (let ((?x375 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x290 (and $x136 (= ?x375 (- 4)) (= (+ (* (- 3) c) (* n k) ?x499 (* 2 n)) (- 1)) $x429 (not (= ?x514 4)))))
 (rewrite (= $x290 $x537)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x103 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x97 (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72 ?x72)))
 (let ((?x78 (- (- 1) (* 3 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x80 (- (- ?x78 (* 3 ?x72 ?x72)) (* 3 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x82 (- (- ?x80 (* 3 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72)) (* 3 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x87 (- (+ ?x82 k m (* ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x90 (+ (- ?x87 (* 3 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x94 (- (- ?x90 (* ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x98 (+ ?x94 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72) ?x97)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x98 0))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x423 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x320 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x613 (* ?x323 ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x612 (* 3 ?x613)))
 (let ((?x363 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x368 (* 3 ?x363)))
 (let ((?x360 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x873 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x859 (* (- 1) ?x873)))
 (let ((?x702 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x713 (* (- 1) ?x702)))
 (let ((?x410 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x311 (* (- 3) n)))
 (let ((?x621 (* ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x674 (* (- 1) ?x621)))
 (let ((?x506 (* ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70 ?x70)))
 (let ((?x132 (* ?x323 ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x441 (* (- 3) ?x132)))
 (let ((?x192 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x320 ?x70 ?x70)))
 (let ((?x219 (* (- 3) ?x192)))
 (let ((?x271 (* ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x155 (* (- 3) ?x271)))
 (let ((?x288 (* ?x323 ?x323 ?x323 ?x320 ?x320 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x304 (* (- 3) ?x288)))
 (let ((?x514 (+ ?x304 (* (- 3) (* ?x323 ?x323)) ?x155 ?x219 ?x441 k m ?x506 ?x674 ?x311 ?x410 ?x713 ?x859 ?x360 ?x368 ?x612)))
 (let (($x429 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x375 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x136 (= (+ m (* (- 6) n)) 6)))
 (let (($x290 (and $x136 (= ?x375 (- 4)) $x239 $x429 (not (= ?x514 4)))))
 (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x97 (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72 ?x72)))
 (let ((?x78 (- (- 1) (* 3 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x80 (- (- ?x78 (* 3 ?x72 ?x72)) (* 3 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x82 (- (- ?x80 (* 3 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72)) (* 3 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x87 (- (+ ?x82 k m (* ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x90 (+ (- ?x87 (* 3 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x94 (- (- ?x90 (* ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x98 (+ ?x94 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72) ?x97)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x102 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x98 0))))))
 (rewrite (= $x102 $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x104 (asserted $x103)))
 (let ((@x561 (mp (mp @x104 (quant-intro (proof-bind ?x423) (= $x103 $x425)) $x425) (rewrite (= $x425 $x425)) $x425)))
 (let ((@x857 (mp (mp @x561 (quant-intro (proof-bind ?x531) (= $x425 $x639)) $x639) (quant-intro (proof-bind ?x671) (= $x639 $x438)) $x438)))
 (let ((@x321 (mp (mp~ @x857 (sk (~ $x438 $x876)) $x876) (rewrite (= $x876 $x458)) $x458)))
 (let ((@x299 (and-elim @x321 $x314)))
 (let ((@x592 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x314) $x203)) @x299 $x203)))
 (let (($x251 (>= ?x214 (- 1))))
 (let ((@x409 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x314) $x251)) @x299 $x251)))
 (let (($x333 (<= ?x253 6)))
 (let ((@x112 (and-elim @x321 $x469)))
 (let ((@x407 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x469) $x333)) @x112 $x333)))
 (let (($x587 (>= ?x253 6)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x469) $x587)) @x112 $x587)))
 (let (($x440 (<= ?x332 (- 4))))
 (let ((@x629 (and-elim @x321 $x452)))
 (let ((@x633 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x452) $x440)) @x629 $x440)))
 (let (($x669 (>= ?x332 (- 4))))
 (let ((@x107 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x452) $x669)) @x629 $x669)))
 (let (($x630 (<= ?x337 1)))
 (let ((@x536 (and-elim @x321 $x308)))
 (let ((@x243 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x630)) @x536 $x630)))
 (let (($x437 (>= ?x337 1)))
 (let ((@x350 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x437)) @x536 $x437)))
 (let (($x278 (not (<= ?x235 7))))
 (let (($x324 (>= ?x235 7)))
 (let ((@x445 ((_ th-lemma arith) (hypothesis (not $x324)) @x409 @x592 @x152 @x407 @x409 @x592 @x152 @x407 @x409 @x592 @x350 @x243 @x409 @x592 @x107 @x633 @x409 @x592 @x152 @x407 @x409 @x592 false)))
 (let ((@x268 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x309 $x278 (not $x324))) (and-elim @x321 $x632) (or $x278 (not $x324)))))
 ((_ th-lemma arith) (unit-resolution @x268 (lemma @x445 $x324) $x278) @x409 @x592 @x152 @x407 @x152 @x407 @x409 @x592 @x107 @x633 @x350 @x243 @x409 @x592 @x107 @x633 @x409 @x592 @x409 @x592 @x107 @x633 @x107 @x633 @x409 @x592 @x152 @x407 @x409 @x592 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        22
 :arith-assert-upper        30
 :arith-branch-var          3
 :arith-conflicts           5
 :arith-eq-adapter          5
 :arith-gcd-tests           12
 :arith-gomory-cuts         1
 :arith-grobner             3
 :arith-ineq-splits         3
 :arith-max-min             336
 :arith-nonlinear-bounds    25
 :arith-nonlinear-horner    25
 :arith-num-rows            10
 :arith-patches             6
 :arith-pivots              12
 :arith-row-summations      23
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    10
 :conflicts                 5
 :decisions                 23
 :del-clause                18
 :final-checks              14
 :max-memory                3.71
 :memory                    3.21
 :mk-bool-var               43
 :mk-clause                 18
 :num-allocs                1856141
 :num-checks                1
 :propagations              10
 :rlimit-count              20397
 :time                      0.02
 :total-time                0.02)
