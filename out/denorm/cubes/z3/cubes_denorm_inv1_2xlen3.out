unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x847 (* (- 6) n!0)))
 (let ((?x846 (+ m!1 ?x847)))
 (let (($x546 (<= ?x846 6)))
 (let (($x845 (= ?x846 6)))
 (let ((?x867 (* k!2 k!2)))
 (let ((?x281 (* (- 1) (* m!1 m!1 n!0 k!2 k!2))))
 (let ((?x346 (* (- 1) (* m!1 m!1 n!0 c!3 c!3))))
 (let ((?x169 (* (- 12) (* c!3 k!2 k!2))))
 (let ((?x657 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x614 (* m!1 m!1 n!0 n!0)))
 (let ((?x176 (* (- 1) (* m!1 m!1 c!3 c!3))))
 (let ((?x287 (* (- 6) (* c!3 c!3 k!2))))
 (let ((?x95 (* 2 (* m!1 m!1 n!0))))
 (let ((?x360 (* m!1 m!1)))
 (let ((?x623 (* (- 1) (* m!1 m!1 k!2 k!2))))
 (let ((?x525 (+ c!3 k!2)))
 (let ((?x112 (+ m!1 k!2)))
 (let ((?x355 (+ 1 n!0)))
 (let ((?x497 (* (- 2) (* m!1 m!1 n!0 c!3 k!2))))
 (let ((?x506 (* (- 2) (* m!1 m!1 c!3 k!2))))
 (let ((?x153 (+ ?x506 (* (- 6) (* m!1 n!0 k!2 k!2)) (* (- 6) (* m!1 c!3 c!3)) (* (- 12) (* n!0 c!3 k!2 k!2)) (* (- 2) (* m!1 c!3 k!2 k!2)) (* 2 (* m!1 n!0 n!0 k!2)) (* (- 6) (* m!1 n!0 c!3 c!3)) (* 2 (* m!1 k!2)) (* (- 1) (* m!1 n!0 c!3 c!3 k!2)) (* 4 (* m!1 n!0 k!2)) ?x497 (* (- 1) (* m!1 n!0 k!2 k!2 k!2)) (* ?x355 ?x355 ?x355 ?x112 ?x112 ?x112 ?x525) ?x623 (* n!0 n!0 k!2 k!2) ?x360 ?x95 (* (- 1) (* m!1 k!2 k!2 k!2)) ?x287 (* (- 12) (* m!1 c!3 k!2)) ?x176 (* (- 2) (* m!1 n!0 c!3 k!2 k!2)) (* (- 6) (* n!0 k!2 k!2 k!2)) (* (- 1) (* m!1 c!3 c!3 k!2)) (* (- 6) (* n!0 c!3 c!3 k!2)) ?x614 (* (- 6) (* m!1 k!2 k!2)) ?x657 ?x169 (* 2 (* n!0 k!2 k!2)) (* (- 12) (* m!1 n!0 c!3 k!2)) ?x346 ?x281 ?x867)))
 (let ((?x186 (* (- 36) ?x867)))
 (let ((?x854 (* (- 72) (* c!3 k!2))))
 (let ((?x201 (* (- 36) (* c!3 c!3))))
 (let ((?x526 (* ?x355 ?x355 ?x355 (+ 6 m!1) ?x525 ?x525)))
 (let ((?x671 (+ ?x506 (* (- 12) (* m!1 n!0 k!2 k!2)) (* (- 1) (* ?x355 ?x112 ?x112 ?x112 ?x525 ?x525 ?x525)) (* (- 12) (* m!1 c!3 c!3)) (* (- 12) (* m!1 n!0 c!3 c!3)) (* (- 36) (* n!0 c!3 c!3)) ?x497 ?x623 ?x526 ?x201 (* (- 72) (* n!0 c!3 k!2)) (* (- 24) (* m!1 c!3 k!2)) ?x176 (* (- 12) (* m!1 k!2 k!2)) (* (- 36) (* n!0 k!2 k!2)) (* (- 24) (* m!1 n!0 c!3 k!2)) ?x346 ?x281 ?x854 ?x186)))
 (let ((?x93 (+ (- 6) m!1 ?x847)))
 (let ((?x336 (* ?x93 ?x671 ?x153)))
 (let (($x675 (= ?x336 0)))
 (let (($x177 (not $x675)))
 (let (($x286 (= (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2)) (- 1))))
 (let (($x120 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 3) c!3) (* (- 1) k!2)) (- 1))))
 (let ((?x843 (* 5 k!2)))
 (let ((?x844 (* 18 c!3)))
 (let ((?x841 (* (- 1) ?x867)))
 (let ((?x842 (* (- 9) n!0)))
 (let (($x680 (and $x845 (= (+ (* 9 (* n!0 c!3)) ?x842 ?x841 ?x844 ?x843) 4) $x120 $x286 $x177)))
 (let ((?x828 (* (- 2) (* c!3 k!2 m!1 m!1))))
 (let ((?x862 (* (- 1) (* k!2 k!2 m!1 m!1 n!0))))
 (let ((?x832 (* (- 2) (* c!3 k!2 m!1 m!1 n!0))))
 (let ((?x916 (* (- 1) (* c!3 c!3 m!1 m!1 n!0))))
 (let ((?x850 (+ k!2 m!1)))
 (let ((?x350 (* (- 1) (* c!3 c!3 m!1 m!1))))
 (let ((?x229 (* (- 1) (* k!2 k!2 m!1 m!1))))
 (let ((?x289 (+ ?x867 ?x229 (* (- 12) (* c!3 k!2 m!1 n!0)) (* (- 6) (* k!2 k!2 m!1)) (* (- 6) (* c!3 c!3 m!1)) (* (- 6) (* k!2 k!2 m!1 n!0)) (* (- 6) (* c!3 c!3 m!1 n!0)) ?x350 (* (- 2) (* c!3 k!2 k!2 m!1)) (* (- 12) (* c!3 k!2 m!1)) (* ?x355 ?x355 ?x355 ?x850 ?x850 ?x850 ?x525) ?x916 ?x832 ?x862 (* (- 1) (* c!3 c!3 k!2 m!1 n!0)) (* (- 2) (* c!3 k!2 k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 k!2 m!1 n!0)) (* (- 12) (* c!3 k!2 k!2 n!0)) ?x95 (* 4 (* k!2 m!1 n!0)) (* 2 (* k!2 k!2 n!0)) ?x360 ?x828 (* 2 (* k!2 m!1)) ?x614 (* 2 (* k!2 m!1 n!0 n!0)) (* k!2 k!2 n!0 n!0) ?x657 (* (- 6) (* c!3 c!3 k!2 n!0)) (* (- 1) (* c!3 c!3 k!2 m!1)) (* (- 6) (* k!2 k!2 k!2 n!0)) (* (- 1) (* k!2 k!2 k!2 m!1)) ?x169 ?x287)))
 (let ((?x827 (+ ?x186 ?x229 ?x526 (* (- 24) (* c!3 k!2 m!1 n!0)) ?x201 (* (- 12) (* k!2 k!2 m!1)) (* (- 12) (* c!3 c!3 m!1)) (* (- 1) (* ?x355 ?x850 ?x850 ?x850 ?x525 ?x525 ?x525)) (* (- 12) (* k!2 k!2 m!1 n!0)) ?x854 (* (- 12) (* c!3 c!3 m!1 n!0)) ?x350 (* (- 72) (* c!3 k!2 n!0)) (* (- 24) (* c!3 k!2 m!1)) (* (- 36) (* c!3 c!3 n!0)) ?x916 ?x832 ?x862 (* (- 36) (* k!2 k!2 n!0)) ?x828)))
 (let (($x864 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x288 (and $x845 (= (+ ?x844 ?x843 ?x842 ?x841 (* 9 (* c!3 n!0))) 4) $x864 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x93 ?x827 ?x289) 0)))))
 (let (($x247 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x573 (* k k n n)))
 (let ((?x592 (* 2 (* k m n n))))
 (let ((?x570 (* m m n n)))
 (let ((?x494 (* 2 (* k m))))
 (let ((?x648 (* (- 2) (* c k m m))))
 (let ((?x552 (* m m)))
 (let ((?x549 (* k k n)))
 (let ((?x589 (* 2 ?x549)))
 (let ((?x590 (* 4 (* k m n))))
 (let ((?x591 (* 2 (* m m n))))
 (let ((?x480 (* (- 1) (* k k k m n))))
 (let ((?x474 (* (- 1) (* c c k m n))))
 (let ((?x436 (* (- 1) (* k k m m n))))
 (let ((?x433 (* c k m m n)))
 (let ((?x364 (* (- 2) ?x433)))
 (let ((?x430 (* (- 1) (* c c m m n))))
 (let ((?x73 (+ c k)))
 (let ((?x76 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x371 (* ?x321 ?x321 ?x321 ?x76 ?x76 ?x76 ?x73)))
 (let ((?x510 (* (- 1) (* c c m m))))
 (let ((?x140 (* (- 1) (* k k m m))))
 (let ((?x49 (* k k)))
 (let ((?x810 (+ ?x49 ?x140 (* (- 12) (* c k m n)) (* (- 6) (* k k m)) (* (- 6) (* c c m)) (* (- 6) (* k k m n)) (* (- 6) (* c c m n)) ?x510 (* (- 2) (* c k k m)) (* (- 12) (* c k m)) ?x371 ?x430 ?x364 ?x436 ?x474 (* (- 2) (* c k k m n)) ?x480 (* (- 12) (* c k k n)) ?x591 ?x590 ?x589 ?x552 ?x648 ?x494 ?x570 ?x592 ?x573 (* (- 6) (* k k k)) (* (- 6) (* c c k n)) (* (- 1) (* c c k m)) (* (- 6) (* k k k n)) (* (- 1) (* k k k m)) (* (- 12) (* c k k)) (* (- 6) (* c c k)))))
 (let ((?x104 (* (- 1) (* ?x321 ?x76 ?x76 ?x76 ?x73 ?x73 ?x73))))
 (let ((?x367 (+ 6 m)))
 (let ((?x127 (* ?x321 ?x321 ?x321 ?x367 ?x73 ?x73)))
 (let ((?x503 (+ (* (- 36) ?x49) ?x140 ?x127 (* (- 24) (* c k m n)) (* (- 36) (* c c)) (* (- 12) (* k k m)) (* (- 12) (* c c m)) ?x104 (* (- 12) (* k k m n)) (* (- 72) (* c k)) (* (- 12) (* c c m n)) ?x510 (* (- 72) (* c k n)) (* (- 24) (* c k m)) (* (- 36) (* c c n)) ?x430 ?x364 ?x436 (* (- 36) ?x549) ?x648)))
 (let ((?x115 (* (- 6) n)))
 (let ((?x121 (+ (- 6) m ?x115)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x216 (= (+ ?x40 ?x44 ?x218 ?x219 (* 9 (* c n))) 4)))
 (let (($x132 (= (+ m ?x115) 6)))
 (and $x132 $x216 $x268 $x306 (not (= (* ?x121 ?x503 ?x810) 0))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x147 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x76 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x371 (* ?x321 ?x321 ?x321 ?x76 ?x76 ?x76 ?x73)))
 (let ((?x508 (+ (* (- 1) (* ?x321 (+ 6 m) ?x76 ?x73 ?x73)) ?x371 (* ?x321 ?x321 ?x76 ?x76))))
 (let ((?x367 (+ 6 m)))
 (let ((?x127 (* ?x321 ?x321 ?x321 ?x367 ?x73 ?x73)))
 (let ((?x104 (* (- 1) (* ?x321 ?x76 ?x76 ?x76 ?x73 ?x73 ?x73))))
 (let ((?x115 (* (- 6) n)))
 (let ((?x121 (+ (- 6) m ?x115)))
 (let (($x507 (= (* ?x121 (+ (* (- 1) (* ?x321 ?x367 ?x367 ?x73 ?x73)) ?x104 ?x127) ?x508) 0)))
 (let (($x443 (not $x507)))
 (let (($x236 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x167 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x132 (= (+ m ?x115) 6)))
 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x167 $x236 $x443))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x158 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x573 (* k k n n)))
 (let ((?x592 (* 2 (* k m n n))))
 (let ((?x570 (* m m n n)))
 (let ((?x494 (* 2 (* k m))))
 (let ((?x648 (* (- 2) (* c k m m))))
 (let ((?x552 (* m m)))
 (let ((?x549 (* k k n)))
 (let ((?x589 (* 2 ?x549)))
 (let ((?x590 (* 4 (* k m n))))
 (let ((?x591 (* 2 (* m m n))))
 (let ((?x480 (* (- 1) (* k k k m n))))
 (let ((?x474 (* (- 1) (* c c k m n))))
 (let ((?x436 (* (- 1) (* k k m m n))))
 (let ((?x433 (* c k m m n)))
 (let ((?x364 (* (- 2) ?x433)))
 (let ((?x430 (* (- 1) (* c c m m n))))
 (let ((?x73 (+ c k)))
 (let ((?x76 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x371 (* ?x321 ?x321 ?x321 ?x76 ?x76 ?x76 ?x73)))
 (let ((?x510 (* (- 1) (* c c m m))))
 (let ((?x140 (* (- 1) (* k k m m))))
 (let ((?x49 (* k k)))
 (let ((?x810 (+ ?x49 ?x140 (* (- 12) (* c k m n)) (* (- 6) (* k k m)) (* (- 6) (* c c m)) (* (- 6) (* k k m n)) (* (- 6) (* c c m n)) ?x510 (* (- 2) (* c k k m)) (* (- 12) (* c k m)) ?x371 ?x430 ?x364 ?x436 ?x474 (* (- 2) (* c k k m n)) ?x480 (* (- 12) (* c k k n)) ?x591 ?x590 ?x589 ?x552 ?x648 ?x494 ?x570 ?x592 ?x573 (* (- 6) (* k k k)) (* (- 6) (* c c k n)) (* (- 1) (* c c k m)) (* (- 6) (* k k k n)) (* (- 1) (* k k k m)) (* (- 12) (* c k k)) (* (- 6) (* c c k)))))
 (let ((?x104 (* (- 1) (* ?x321 ?x76 ?x76 ?x76 ?x73 ?x73 ?x73))))
 (let ((?x367 (+ 6 m)))
 (let ((?x127 (* ?x321 ?x321 ?x321 ?x367 ?x73 ?x73)))
 (let ((?x503 (+ (* (- 36) ?x49) ?x140 ?x127 (* (- 24) (* c k m n)) (* (- 36) (* c c)) (* (- 12) (* k k m)) (* (- 12) (* c c m)) ?x104 (* (- 12) (* k k m n)) (* (- 72) (* c k)) (* (- 12) (* c c m n)) ?x510 (* (- 72) (* c k n)) (* (- 24) (* c k m)) (* (- 36) (* c c n)) ?x430 ?x364 ?x436 (* (- 36) ?x549) ?x648)))
 (let ((?x115 (* (- 6) n)))
 (let ((?x121 (+ (- 6) m ?x115)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x216 (= (+ ?x40 ?x44 ?x218 ?x219 (* 9 (* c n))) 4)))
 (let (($x132 (= (+ m ?x115) 6)))
 (let (($x616 (and $x132 $x216 $x268 $x306 (not (= (* ?x121 ?x503 ?x810) 0)))))
 (let ((?x508 (+ (* (- 1) (* ?x321 ?x367 ?x76 ?x73 ?x73)) ?x371 (* ?x321 ?x321 ?x76 ?x76))))
 (let (($x507 (= (* ?x121 (+ (* (- 1) (* ?x321 ?x367 ?x367 ?x73 ?x73)) ?x104 ?x127) ?x508) 0)))
 (let (($x443 (not $x507)))
 (let (($x236 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x167 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x179 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x167 $x236 $x443)))
 (rewrite (= $x179 $x616))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x514 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x76 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x371 (* ?x321 ?x321 ?x321 ?x76 ?x76 ?x76 ?x73)))
 (let ((?x508 (+ (* (- 1) (* ?x321 (+ 6 m) ?x76 ?x73 ?x73)) ?x371 (* ?x321 ?x321 ?x76 ?x76))))
 (let ((?x367 (+ 6 m)))
 (let ((?x127 (* ?x321 ?x321 ?x321 ?x367 ?x73 ?x73)))
 (let ((?x104 (* (- 1) (* ?x321 ?x76 ?x76 ?x76 ?x73 ?x73 ?x73))))
 (let ((?x115 (* (- 6) n)))
 (let ((?x121 (+ (- 6) m ?x115)))
 (let (($x507 (= (* ?x121 (+ (* (- 1) (* ?x321 ?x367 ?x367 ?x73 ?x73)) ?x104 ?x127) ?x508) 0)))
 (let (($x443 (not $x507)))
 (let (($x236 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x485 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x335 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m ?x115) 6)))
 (and $x132 (= ?x335 (- 4)) $x485 $x236 $x443))))))))))))))))))) :qid k!34))
 ))
 (let ((?x159 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x76 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x371 (* ?x321 ?x321 ?x321 ?x76 ?x76 ?x76 ?x73)))
 (let ((?x508 (+ (* (- 1) (* ?x321 (+ 6 m) ?x76 ?x73 ?x73)) ?x371 (* ?x321 ?x321 ?x76 ?x76))))
 (let ((?x367 (+ 6 m)))
 (let ((?x127 (* ?x321 ?x321 ?x321 ?x367 ?x73 ?x73)))
 (let ((?x104 (* (- 1) (* ?x321 ?x76 ?x76 ?x76 ?x73 ?x73 ?x73))))
 (let ((?x115 (* (- 6) n)))
 (let ((?x121 (+ (- 6) m ?x115)))
 (let (($x507 (= (* ?x121 (+ (* (- 1) (* ?x321 ?x367 ?x367 ?x73 ?x73)) ?x104 ?x127) ?x508) 0)))
 (let (($x443 (not $x507)))
 (let (($x236 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x167 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x132 (= (+ m ?x115) 6)))
 (let (($x179 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x167 $x236 $x443)))
 (let (($x485 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x335 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x212 (and $x132 (= ?x335 (- 4)) $x485 $x236 $x443)))
 (rewrite (= $x212 $x179))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x76 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x84 (+ (* (- 1) ?x73 ?x73 ?x76 (+ m 6) ?x69) (* ?x73 ?x76 ?x76 ?x76 ?x69 ?x69 ?x69) (* ?x76 ?x76 ?x69 ?x69))))
 (let ((?x78 (- (* (- 1) ?x73 ?x73 (+ m 6) (+ m 6) ?x69) (* ?x73 ?x73 ?x73 ?x76 ?x76 ?x76 ?x69))))
 (let ((?x85 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ ?x78 (* ?x73 ?x73 (+ m 6) ?x69 ?x69 ?x69)) ?x84)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x205 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x76 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x371 (* ?x321 ?x321 ?x321 ?x76 ?x76 ?x76 ?x73)))
 (let ((?x508 (+ (* (- 1) (* ?x321 (+ 6 m) ?x76 ?x73 ?x73)) ?x371 (* ?x321 ?x321 ?x76 ?x76))))
 (let ((?x367 (+ 6 m)))
 (let ((?x127 (* ?x321 ?x321 ?x321 ?x367 ?x73 ?x73)))
 (let ((?x104 (* (- 1) (* ?x321 ?x76 ?x76 ?x76 ?x73 ?x73 ?x73))))
 (let ((?x115 (* (- 6) n)))
 (let ((?x121 (+ (- 6) m ?x115)))
 (let (($x507 (= (* ?x121 (+ (* (- 1) (* ?x321 ?x367 ?x367 ?x73 ?x73)) ?x104 ?x127) ?x508) 0)))
 (let (($x443 (not $x507)))
 (let (($x236 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x485 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x335 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m ?x115) 6)))
 (let (($x212 (and $x132 (= ?x335 (- 4)) $x485 $x236 $x443)))
 (let ((?x69 (+ n 1)))
 (let ((?x84 (+ (* (- 1) ?x73 ?x73 ?x76 (+ m 6) ?x69) (* ?x73 ?x76 ?x76 ?x76 ?x69 ?x69 ?x69) (* ?x76 ?x76 ?x69 ?x69))))
 (let ((?x78 (- (* (- 1) ?x73 ?x73 (+ m 6) (+ m 6) ?x69) (* ?x73 ?x73 ?x73 ?x76 ?x76 ?x76 ?x69))))
 (let ((?x85 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ ?x78 (* ?x73 ?x73 (+ m 6) ?x69 ?x69 ?x69)) ?x84)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0))))))
 (rewrite (= $x89 $x212))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x146 (mp (mp @x91 (quant-intro (proof-bind ?x205) (= $x90 $x514)) $x514) (rewrite (= $x514 $x514)) $x514)))
 (let ((@x637 (mp (mp @x146 (quant-intro (proof-bind ?x159) (= $x514 $x147)) $x147) (quant-intro (proof-bind ?x158) (= $x147 $x247)) $x247)))
 (let ((@x440 (mp (mp~ @x637 (sk (~ $x247 $x288)) $x288) (rewrite (= $x288 $x680)) $x680)))
 (let ((@x683 (and-elim @x440 $x845)))
 (let ((@x134 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x845) $x546)) @x683 $x546)))
 (let (($x664 (>= ?x846 6)))
 (let ((@x530 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x845) $x664)) @x683 $x664)))
 (let (($x681 (not (<= ?x336 0))))
 (let (($x223 (>= ?x336 0)))
 (let ((@x344 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x675 $x681 (not $x223))) (and-elim @x440 $x177) (or $x681 (not $x223)))))
 (let ((@x231 (unit-resolution @x344 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x223)) @x530 @x134 false) $x223) $x681)))
 ((_ th-lemma arith farkas 1 1 1) @x231 @x530 @x134 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        45
 :arith-assert-upper        43
 :arith-branch-var          1
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-ineq-splits         1
 :arith-max-min             423
 :arith-nonlinear-bounds    94
 :arith-num-rows            11
 :arith-patches             2
 :arith-pivots              7
 :arith-pseudo-nonlinear    4
 :arith-row-summations      13
 :arith-tableau-max-columns 75
 :arith-tableau-max-rows    11
 :conflicts                 4
 :decisions                 10
 :del-clause                17
 :final-checks              6
 :max-memory                3.72
 :memory                    3.18
 :mk-bool-var               26
 :mk-clause                 17
 :num-allocs                1227369
 :num-checks                1
 :propagations              10
 :rlimit-count              6036
 :time                      0.01
 :total-time                0.02)
