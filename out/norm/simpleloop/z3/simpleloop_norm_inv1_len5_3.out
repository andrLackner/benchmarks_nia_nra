unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x1066 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x1513 (<= ?x1066 0)))
 (let (($x1123 (= ?x1066 0)))
 (let ((?x1090 (+ 1 y!0)))
 (let ((?x1055 (+ (- 1) x!1)))
 (let ((?x1092 (* ?x1055 ?x1055 ?x1055 ?x1090 ?x1090 ?x1090 ?x1090)))
 (let ((?x1059 (* y!0 y!0 y!0 y!0)))
 (let ((?x1036 (+ y00 x00 (* (- 3) (* y00 x!1 x!1 y!0 y!0 y!0)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0)) (* 5 (* x!1 x!1)) (* (- 2) (* x!1 y!0 y!0 y!0)) (* x00 x!1 x!1 x!1 y!0) (* 3 (* y00 x!1 x!1)) (* y00 x!1 x!1 x!1 y!0) (* y00 x!1 x!1 x!1 y!0 y!0 y!0) (* (- 3) (* y00 x!1 x!1 y!0)) (* 3 (* x00 x!1 x!1 x!1 y!0 y!0)) (* 2 (* x!1 x!1 x!1 x!1 y!0)) (* 2 (* x!1 x!1 x!1 x!1)) (* 3 (* x00 x!1 x!1)) (* (- 2) (* x00 x!1)) (* (- 2) x!1) (* (- 2) y!0) (* (- 9) (* x!1 x!1 y!0 y!0)) (* (- 6) (* x!1 x!1 x!1)) (* 4 (* x!1 y!0)) (* (- 1) (* ?x1055 ?x1055 ?x1055 ?x1055 ?x1090 ?x1090 ?x1090)) ?x1059 (* (- 3) (* x!1 x!1 y!0)) (* 5 (* x!1 y!0 y!0)) (* (- 1) ?x1092) (* 2 (* x!1 x!1 x!1 y!0 y!0)) (* (- 4) (* x!1 x!1 x!1 y!0)) (* (- 1) (* x!1 y!0 y!0 y!0 y!0)) (* (- 2) (* x00 y!0)) (* 6 (* x00 x!1 y!0)) (* (- 1) (* y00 x!1 x!1 x!1)) (* 3 (* y00 x!1 x!1 x!1 y!0 y!0)) (* x00 x!1 x!1 x!1 y!0 y!0 y!0) (* (- 5) (* x00 y!0 y!0)) (* (- 9) (* x00 x!1 x!1 y!0 y!0)) (* (- 5) (* y00 y!0 y!0)) (* (- 2) (* y00 y!0 y!0 y!0)) (* 4 (* y00 x!1 y!0 y!0 y!0)) (* (- 2) (* x00 y!0 y!0 y!0)) (* (- 3) (* x00 x!1 x!1 y!0 y!0 y!0)) (* 6 (* y00 x!1 y!0)) (* (- 1) (* y!0 y!0)) (* 2 (* y!0 y!0 y!0)) (* 12 (* y00 x!1 y!0 y!0)) (* (- 1) (* x00 x!1 x!1 x!1)) (* (- 2) (* y00 x!1)) (* (- 9) (* y00 x!1 x!1 y!0 y!0)) (* (- 2) (* y00 y!0)) (* 4 (* x00 x!1 y!0 y!0 y!0)) (* 12 (* x00 x!1 y!0 y!0)) (* (- 3) (* x00 x!1 x!1 y!0)))))
 (let (($x540 (= ?x1036 0)))
 (let (($x676 (not $x540)))
 (let (($x1068 (and $x1123 $x676)))
 (let ((?x1098 (* x!1 y!0 y!0 y!0 y!0)))
 (let ((?x1056 (* ?x1055 ?x1055 ?x1055 ?x1055 ?x1090 ?x1090 ?x1090)))
 (let ((?x499 (* x!1 x!1 y!0 y!0 y!0)))
 (let ((?x2004 (* y!0 y!0)))
 (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x927 (+ (* 2 x!1) (* 2 y!0) ?x72 ?x79 (* 2 (* x!1 x00)) (* (- 3) (* x!1 x!1 x00)) (* 2 (* y!0 x00)) (* (- 6) (* x!1 y!0 x00)) (* 3 (* x!1 x!1 y!0 x00)) (* 5 (* y!0 y!0 x00)) (* (- 12) (* x!1 y!0 y!0 x00)) (* 9 (* x!1 x!1 y!0 y!0 x00)) (* 2 (* y!0 y!0 y!0 x00)) (* (- 4) (* x!1 y!0 y!0 y!0 x00)) (* 3 (* x!1 x!1 y!0 y!0 y!0 x00)) (* 2 (* x!1 y00)) ?x2004 (* (- 2) (* y!0 y!0 y!0)) (* 2 (* x!1 y!0 y!0 y!0)) ?x499 (* (- 5) (* x!1 x!1)) (* (- 4) (* x!1 y!0)) (* 3 (* x!1 x!1 y!0)) (* (- 5) (* x!1 y!0 y!0)) (* 9 (* x!1 x!1 y!0 y!0)) (* 2 (* y!0 y00)) (* 5 (* y!0 y!0 y00)) (* 2 (* y!0 y!0 y!0 y00)) (* (- 4) (* x!1 y!0 y!0 y!0 y00)) (* (- 6) (* x!1 y!0 y00)) (* (- 12) (* x!1 y!0 y!0 y00)) ?x1092 ?x1056 (* (- 2) (* x!1 x!1 x!1 y!0 y!0)) (* 6 (* x!1 x!1 x!1)) (* 4 (* x!1 x!1 x!1 y!0)) (* (- 3) (* x!1 x!1 x!1 y!0 y!0 x00)) (* (- 1) ?x1059) ?x1098 (* 3 (* x!1 x!1 y!0 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 y00)) (* (- 3) (* x!1 x!1 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 x00)) (* 3 (* x!1 x!1 y!0 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y!0 y00)) (* x!1 x!1 x!1 y00) (* 9 (* x!1 x!1 y!0 y!0 y00)) (* (- 3) (* x!1 x!1 x!1 y!0 y!0 y00)) (* x!1 x!1 x!1 x00) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y!0 x00)) (* (- 2) (* x!1 x!1 x!1 x!1 y!0)) (* (- 2) (* x!1 x!1 x!1 x!1)))))
 (let (($x1118 (and (= (+ x!1 y!0 ?x72 ?x79) 0) (not (= ?x927 0)))))
 (let (($x2463 (exists ((x Int) (y Int) )(! (let ((?x2221 (* (- 2) (* x x x x))))
 (let ((?x2238 (* (- 2) (* x x x x y))))
 (let ((?x1972 (* (- 3) (* x x x y y y00))))
 (let ((?x1984 (* 9 (* x x y y y00))))
 (let ((?x1761 (* x x x y00)))
 (let ((?x1903 (* (- 1) (* x x x y y y y00))))
 (let ((?x1966 (* 3 (* x x y y y y00))))
 (let ((?x2001 (* (- 1) (* x x x y y00))))
 (let ((?x1283 (* x y y y y)))
 (let ((?x1282 (* (- 1) (* y y y y))))
 (let ((?x2263 (* 4 (* x x x y))))
 (let ((?x2262 (* 6 (* x x x))))
 (let ((?x1144 (* (- 2) (* x x x y y))))
 (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x887 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x885 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1999 (* (- 12) (* x y y y00))))
 (let ((?x1997 (* (- 4) (* x y y y y00))))
 (let ((?x1996 (* 2 (* y y y y00))))
 (let ((?x1995 (* 5 (* y y y00))))
 (let ((?x1362 (* 2 (* y y00))))
 (let ((?x1182 (* 9 (* x x y y))))
 (let ((?x734 (* 3 (* x x y))))
 (let ((?x2261 (* (- 5) (* x x))))
 (let ((?x669 (* x x y y y)))
 (let ((?x1339 (* 2 (* x y y y))))
 (let ((?x656 (* y y)))
 (let ((?x602 (* 2 (* y y y x00))))
 (let ((?x1456 (* 5 (* y y x00))))
 (let ((?x1424 (* 2 (* y x00))))
 (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x2456 (+ (* 2 x) (* 2 y) ?x72 ?x79 (* 2 (* x x00)) (* (- 3) (* x x x00)) ?x1424 (* (- 6) (* x y x00)) (* 3 (* x x y x00)) ?x1456 (* (- 12) (* x y y x00)) (* 9 (* x x y y x00)) ?x602 (* (- 4) (* x y y y x00)) (* 3 (* x x y y y x00)) (* 2 (* x y00)) ?x656 (* (- 2) (* y y y)) ?x1339 ?x669 ?x2261 (* (- 4) (* x y)) ?x734 (* (- 5) (* x y y)) ?x1182 ?x1362 ?x1995 ?x1996 ?x1997 (* (- 6) (* x y y00)) ?x1999 ?x885 ?x887 ?x1144 ?x2262 ?x2263 (* (- 3) (* x x x y y x00)) ?x1282 ?x1283 (* 3 (* x x y y00)) ?x2001 (* (- 3) (* x x y00)) (* (- 1) (* x x x y x00)) ?x1966 ?x1903 ?x1761 ?x1984 ?x1972 (* x x x x00) (* (- 1) (* x x x y y y x00)) ?x2238 ?x2221)))
 (let (($x98 (= (+ x y ?x72 ?x79) 0)))
 (and $x98 (not (= ?x2456 0)))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1839 (exists ((x Int) (y Int) )(! (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x642 (* ?x90 ?x90 ?x90 ?x90 ?x100)))
 (let ((?x1852 (* y00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1842 (* x00 ?x100 ?x100)))
 (let ((?x1832 (* y00 ?x100 ?x100)))
 (let ((?x1785 (* y00 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1676 (* x00 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1671 (* x00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1669 (+ ?x1671 ?x1676 (* (- 1) (* ?x90 ?x90 ?x100 ?x100 ?x100)) ?x1785 (* (- 1) (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)) (* 2 (* ?x90 ?x90 ?x90 ?x100 ?x100)) (* (- 1) (* ?x90 ?x100 ?x100)) (* (- 1) (* ?x100 ?x100 ?x100)) (* (- 1) (* ?x90 ?x100 ?x100 ?x100 ?x100)) ?x1832 ?x1842 (* (- 2) (* y00 ?x90 ?x90 ?x90 ?x100)) (* (- 2) (* x00 ?x90 ?x90 ?x90 ?x100)) ?x1852 (* 2 ?x642))))
 (let (($x760 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x760 (not (= ?x1669 0)))))))))))))) :qid k!26))
 ))
 (let ((?x2465 (lambda ((x Int) (y Int) )(let ((?x2221 (* (- 2) (* x x x x))))
 (let ((?x2238 (* (- 2) (* x x x x y))))
 (let ((?x1972 (* (- 3) (* x x x y y y00))))
 (let ((?x1984 (* 9 (* x x y y y00))))
 (let ((?x1761 (* x x x y00)))
 (let ((?x1903 (* (- 1) (* x x x y y y y00))))
 (let ((?x1966 (* 3 (* x x y y y y00))))
 (let ((?x2001 (* (- 1) (* x x x y y00))))
 (let ((?x1283 (* x y y y y)))
 (let ((?x1282 (* (- 1) (* y y y y))))
 (let ((?x2263 (* 4 (* x x x y))))
 (let ((?x2262 (* 6 (* x x x))))
 (let ((?x1144 (* (- 2) (* x x x y y))))
 (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x887 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x885 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1999 (* (- 12) (* x y y y00))))
 (let ((?x1997 (* (- 4) (* x y y y y00))))
 (let ((?x1996 (* 2 (* y y y y00))))
 (let ((?x1995 (* 5 (* y y y00))))
 (let ((?x1362 (* 2 (* y y00))))
 (let ((?x1182 (* 9 (* x x y y))))
 (let ((?x734 (* 3 (* x x y))))
 (let ((?x2261 (* (- 5) (* x x))))
 (let ((?x669 (* x x y y y)))
 (let ((?x1339 (* 2 (* x y y y))))
 (let ((?x656 (* y y)))
 (let ((?x602 (* 2 (* y y y x00))))
 (let ((?x1456 (* 5 (* y y x00))))
 (let ((?x1424 (* 2 (* y x00))))
 (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x2456 (+ (* 2 x) (* 2 y) ?x72 ?x79 (* 2 (* x x00)) (* (- 3) (* x x x00)) ?x1424 (* (- 6) (* x y x00)) (* 3 (* x x y x00)) ?x1456 (* (- 12) (* x y y x00)) (* 9 (* x x y y x00)) ?x602 (* (- 4) (* x y y y x00)) (* 3 (* x x y y y x00)) (* 2 (* x y00)) ?x656 (* (- 2) (* y y y)) ?x1339 ?x669 ?x2261 (* (- 4) (* x y)) ?x734 (* (- 5) (* x y y)) ?x1182 ?x1362 ?x1995 ?x1996 ?x1997 (* (- 6) (* x y y00)) ?x1999 ?x885 ?x887 ?x1144 ?x2262 ?x2263 (* (- 3) (* x x x y y x00)) ?x1282 ?x1283 (* 3 (* x x y y00)) ?x2001 (* (- 3) (* x x y00)) (* (- 1) (* x x x y x00)) ?x1966 ?x1903 ?x1761 ?x1984 ?x1972 (* x x x x00) (* (- 1) (* x x x y y y x00)) ?x2238 ?x2221)))
 (let (($x98 (= (+ x y ?x72 ?x79) 0)))
 (let (($x2082 (and $x98 (not (= ?x2456 0)))))
 (let ((?x1852 (* y00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1842 (* x00 ?x100 ?x100)))
 (let ((?x1832 (* y00 ?x100 ?x100)))
 (let ((?x1785 (* y00 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1676 (* x00 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1671 (* x00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1669 (+ ?x1671 ?x1676 (* (- 1) (* ?x90 ?x90 ?x100 ?x100 ?x100)) ?x1785 (* (- 1) ?x885) (* (- 1) ?x887) (* 2 (* ?x90 ?x90 ?x90 ?x100 ?x100)) (* (- 1) (* ?x90 ?x100 ?x100)) (* (- 1) (* ?x100 ?x100 ?x100)) (* (- 1) (* ?x90 ?x100 ?x100 ?x100 ?x100)) ?x1832 ?x1842 (* (- 2) (* y00 ?x90 ?x90 ?x90 ?x100)) (* (- 2) (* x00 ?x90 ?x90 ?x90 ?x100)) ?x1852 (* 2 (* ?x90 ?x90 ?x90 ?x90 ?x100)))))
 (let (($x760 (= (+ x ?x72 ?x79 y) 0)))
 (let (($x1667 (and $x760 (not (= ?x1669 0)))))
 (rewrite (= $x1667 $x2082))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1468 (exists ((x Int) (y Int) )(! (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x642 (* ?x90 ?x90 ?x90 ?x90 ?x100)))
 (let ((?x1720 (* ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1719 (* ?x100 ?x100 ?x100)))
 (let ((?x774 (* ?x90 ?x100 ?x100)))
 (let ((?x887 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x885 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1777 (* ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x280 (+ (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)) (* (- 1) (* x00 ?x90 ?x100 ?x100 ?x100)) ?x1777 (* (- 1) (* y00 ?x90 ?x100 ?x100 ?x100)) ?x885 ?x887 (* (- 2) (* ?x90 ?x90 ?x90 ?x100 ?x100)) ?x774 ?x1719 ?x1720 (* (- 1) (* y00 ?x100 ?x100)) (* (- 1) (* x00 ?x100 ?x100)) (* 2 (* y00 ?x90 ?x90 ?x90 ?x100)) (* 2 (* x00 ?x90 ?x90 ?x90 ?x100)) (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)) (* (- 2) ?x642))))
 (let (($x760 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x760 (not (= ?x280 0)))))))))))))) :qid k!26))
 ))
 (let ((?x1763 (lambda ((x Int) (y Int) )(let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x642 (* ?x90 ?x90 ?x90 ?x90 ?x100)))
 (let ((?x1852 (* y00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1842 (* x00 ?x100 ?x100)))
 (let ((?x1832 (* y00 ?x100 ?x100)))
 (let ((?x1785 (* y00 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1676 (* x00 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1671 (* x00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1669 (+ ?x1671 ?x1676 (* (- 1) (* ?x90 ?x90 ?x100 ?x100 ?x100)) ?x1785 (* (- 1) (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)) (* 2 (* ?x90 ?x90 ?x90 ?x100 ?x100)) (* (- 1) (* ?x90 ?x100 ?x100)) (* (- 1) (* ?x100 ?x100 ?x100)) (* (- 1) (* ?x90 ?x100 ?x100 ?x100 ?x100)) ?x1832 ?x1842 (* (- 2) (* y00 ?x90 ?x90 ?x90 ?x100)) (* (- 2) (* x00 ?x90 ?x90 ?x90 ?x100)) ?x1852 (* 2 ?x642))))
 (let (($x760 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1667 (and $x760 (not (= ?x1669 0)))))
 (let ((?x1720 (* ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1719 (* ?x100 ?x100 ?x100)))
 (let ((?x774 (* ?x90 ?x100 ?x100)))
 (let ((?x887 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x885 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1777 (* ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x280 (+ (* (- 1) ?x1671) (* (- 1) ?x1676) ?x1777 (* (- 1) ?x1785) ?x885 ?x887 (* (- 2) (* ?x90 ?x90 ?x90 ?x100 ?x100)) ?x774 ?x1719 ?x1720 (* (- 1) ?x1832) (* (- 1) ?x1842) (* 2 (* y00 ?x90 ?x90 ?x90 ?x100)) (* 2 (* x00 ?x90 ?x90 ?x90 ?x100)) (* (- 1) ?x1852) (* (- 2) ?x642))))
 (let (($x1768 (and $x760 (not (= ?x280 0)))))
 (rewrite (= $x1768 $x1667)))))))))))))))))))))))
 ))
 (let (($x69 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x39 (- (* (- 1) ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36) (* ?x35 x00 ?x36 ?x36 ?x36))))
 (let ((?x43 (- (+ ?x39 (* ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36 y00))))
 (let ((?x46 (+ ?x43 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x53 (+ (- ?x46 (* 2 ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x36 ?x36) (* ?x36 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x60 (+ (- (- ?x53 (* ?x36 ?x36 y00)) (* x00 ?x36 ?x36)) (* 2 ?x35 ?x35 ?x35 ?x36 y00) (* 2 ?x35 ?x35 ?x35 x00 ?x36))))
 (let ((?x64 (- (- ?x60 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 y00)) (* 2 ?x35 ?x35 ?x35 ?x35 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x64 0)))))))))))) :qid k!26))
 ))
 (let ((?x1764 (lambda ((x Int) (y Int) )(let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x642 (* ?x90 ?x90 ?x90 ?x90 ?x100)))
 (let ((?x1720 (* ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1719 (* ?x100 ?x100 ?x100)))
 (let ((?x774 (* ?x90 ?x100 ?x100)))
 (let ((?x887 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x885 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1777 (* ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x280 (+ (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)) (* (- 1) (* x00 ?x90 ?x100 ?x100 ?x100)) ?x1777 (* (- 1) (* y00 ?x90 ?x100 ?x100 ?x100)) ?x885 ?x887 (* (- 2) (* ?x90 ?x90 ?x90 ?x100 ?x100)) ?x774 ?x1719 ?x1720 (* (- 1) (* y00 ?x100 ?x100)) (* (- 1) (* x00 ?x100 ?x100)) (* 2 (* y00 ?x90 ?x90 ?x90 ?x100)) (* 2 (* x00 ?x90 ?x90 ?x90 ?x100)) (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)) (* (- 2) ?x642))))
 (let (($x760 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1768 (and $x760 (not (= ?x280 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x39 (- (* (- 1) ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36) (* ?x35 x00 ?x36 ?x36 ?x36))))
 (let ((?x43 (- (+ ?x39 (* ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36 y00))))
 (let ((?x46 (+ ?x43 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x53 (+ (- ?x46 (* 2 ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x36 ?x36) (* ?x36 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x60 (+ (- (- ?x53 (* ?x36 ?x36 y00)) (* x00 ?x36 ?x36)) (* 2 ?x35 ?x35 ?x35 ?x36 y00) (* 2 ?x35 ?x35 ?x35 x00 ?x36))))
 (let ((?x64 (- (- ?x60 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 y00)) (* 2 ?x35 ?x35 ?x35 ?x35 ?x36))))
 (let (($x68 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x64 0))))))
 (rewrite (= $x68 $x1768))))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x1788 (mp (mp @x70 (quant-intro (proof-bind ?x1764) (= $x69 $x1468)) $x1468) (rewrite (= $x1468 $x1468)) $x1468)))
 (let ((@x962 (mp (mp @x1788 (quant-intro (proof-bind ?x1763) (= $x1468 $x1839)) $x1839) (quant-intro (proof-bind ?x2465) (= $x1839 $x2463)) $x2463)))
 (let ((@x2184 (mp (mp~ @x962 (sk (~ $x2463 $x1118)) $x1118) (rewrite (= $x1118 $x1068)) $x1068)))
 (let ((@x2157 (and-elim @x2184 $x1123)))
 (let ((@x1186 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1123) $x1513)) @x2157 $x1513)))
 (let (($x2088 (>= ?x1066 0)))
 (let ((@x2190 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1123) $x2088)) @x2157 $x2088)))
 (let (($x593 (not (>= ?x1036 0))))
 (let (($x2253 (<= ?x1036 0)))
 (let ((@x584 (lemma ((_ th-lemma arith) (hypothesis (not $x2253)) @x2190 @x1186 @x2190 @x1186 false) $x2253)))
 (let ((@x1524 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x540 (not $x2253) $x593)) (and-elim @x2184 $x676) (or (not $x2253) $x593))))
 ((_ th-lemma arith) (unit-resolution @x1524 @x584 $x593) @x2190 @x1186 @x2190 @x1186 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             422
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 71
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.92
 :memory                    3.35
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1491537
 :num-checks                1
 :propagations              4
 :rlimit-count              8202
 :time                      0.01
 :total-time                0.02)
