unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x647 (+ m!1 (* (- 6) n!0))))
 (let (($x327 (<= ?x647 6)))
 (let (($x428 (= ?x647 6)))
 (let ((?x858 (+ m!1 k!2)))
 (let ((?x488 (+ 6 m!1)))
 (let ((?x422 (+ 1 n!0)))
 (let ((?x404 (+ k!2 c!3)))
 (let ((?x923 (+ (* 6 (* ?x422 ?x422 ?x422 ?x488 ?x488 ?x488 ?x858)) (* ?x422 ?x422 ?x422 ?x488 ?x488 ?x488 ?x858 ?x858 ?x404 ?x404) (* (- 6) (* ?x422 ?x422 ?x422 ?x488 ?x488 ?x858 ?x858 ?x404 ?x404)) (* 6 (* ?x422 ?x422 ?x488 ?x488 ?x488 ?x858)) (* (- 6) (* ?x422 ?x422 ?x422 ?x422 ?x488 ?x488 ?x858 ?x858 ?x404 ?x404)) (* (- 1) (* ?x422 ?x422 ?x488 ?x488 ?x488 ?x488 ?x858)))))
 (let (($x323 (= ?x923 0)))
 (let (($x336 (not $x323)))
 (let (($x931 (= (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2)) (- 1))))
 (let (($x743 (= (+ (* 2 n!0) (* (- 1) k!2) (* (- 3) c!3) (* n!0 k!2)) (- 1))))
 (let ((?x442 (* 18 c!3)))
 (let ((?x433 (* 5 k!2)))
 (let ((?x439 (* (- 9) n!0)))
 (let ((?x584 (* (- 1) (* k!2 k!2))))
 (let (($x669 (and $x428 (= (+ (* 9 (* n!0 c!3)) ?x584 ?x439 ?x433 ?x442) 4) $x743 $x931 $x336)))
 (let ((?x624 (+ c!3 k!2)))
 (let ((?x486 (+ k!2 m!1)))
 (let ((?x355 (+ (* ?x422 ?x422 ?x488 ?x488 ?x488 ?x488 ?x486) (* (- 6) (* ?x422 ?x422 ?x422 ?x488 ?x488 ?x488 ?x486)) (* 6 (* ?x422 ?x422 ?x422 ?x488 ?x488 ?x486 ?x486 ?x624 ?x624)) (* (- 1) (* ?x422 ?x422 ?x422 ?x488 ?x488 ?x488 ?x486 ?x486 ?x624 ?x624)) (* 6 (* ?x422 ?x422 ?x422 ?x422 ?x488 ?x488 ?x486 ?x486 ?x624 ?x624)) (* (- 6) (* ?x422 ?x422 ?x488 ?x488 ?x488 ?x486)))))
 (let (($x367 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x357 (and $x428 (= (+ ?x442 ?x433 ?x439 ?x584 (* 9 (* c!3 n!0))) 4) $x367 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x355 0)))))
 (let (($x449 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x622 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x68 (+ c k)))
 (let ((?x469 (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x572 (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x470 (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x493 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x478 (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x208 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x204 (= ?x208 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x204 $x256 $x294 (not (= (+ ?x478 ?x493 ?x470 ?x572 ?x469 ?x622) 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x471 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x493 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x622 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x478 (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69)))
 (let ((?x68 (+ c k)))
 (let ((?x572 (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x469 (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x470 (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let (($x303 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x742 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x406 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= ?x406 (- 4)) $x742 $x303 (not (= (+ ?x470 ?x469 ?x572 ?x478 ?x622 ?x493) 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x438 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x622 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x68 (+ c k)))
 (let ((?x469 (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x572 (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x470 (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x493 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x478 (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x208 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x204 (= ?x208 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x437 (and $x120 $x204 $x256 $x294 (not (= (+ ?x478 ?x493 ?x470 ?x572 ?x469 ?x622) 0)))))
 (let (($x303 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x742 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x406 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x564 (and $x120 (= ?x406 (- 4)) $x742 $x303 (not (= (+ ?x470 ?x469 ?x572 ?x478 ?x622 ?x493) 0)))))
 (rewrite (= $x564 $x437)))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (+ (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x74 (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (- ?x78 (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x472 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x493 (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x622 (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69))))
 (let ((?x478 (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69)))
 (let ((?x68 (+ c k)))
 (let ((?x572 (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x469 (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x470 (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68))))
 (let (($x303 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x742 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x406 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x564 (and $x120 (= ?x406 (- 4)) $x742 $x303 (not (= (+ ?x470 ?x469 ?x572 ?x478 ?x622 ?x493) 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x74 (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (- ?x78 (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x564)))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x623 (mp (mp @x88 (quant-intro (proof-bind ?x472) (= $x87 $x471)) $x471) (rewrite (= $x471 $x471)) $x471)))
 (let ((@x234 (mp~ (mp @x623 (quant-intro (proof-bind ?x438) (= $x471 $x449)) $x449) (sk (~ $x449 $x357)) $x357)))
 (let ((@x332 (mp @x234 (rewrite (= $x357 $x669)) $x669)))
 (let ((@x333 (and-elim @x332 $x428)))
 (let ((@x857 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x428) $x327)) @x333 $x327)))
 (let (($x934 (>= ?x647 6)))
 (let ((@x137 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x428) $x934)) @x333 $x934)))
 (let (($x753 (not (<= ?x923 0))))
 (let (($x426 (>= ?x923 0)))
 (let ((@x432 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x323 $x753 (not $x426))) (and-elim @x332 $x336) (or $x753 (not $x426)))))
 (let ((@x335 (unit-resolution @x432 (lemma ((_ th-lemma arith) (hypothesis (not $x426)) @x137 @x857 false) $x426) $x753)))
 ((_ th-lemma arith) @x335 @x137 @x857 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             164
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              7
 :arith-row-summations      6
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                19.62
 :memory                    19.11
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                532207
 :num-checks                1
 :propagations              11
 :rlimit-count              4877
 :time                      0.01
 :total-time                0.05)
