unsat
((set-logic NRA)
(proof
(let (($x70 (exists ((x Real) (y Real) )(! (let ((?x61 (* x00 y00)))
 (let ((?x276 (* y x)))
 (let ((?x268 (* (- 1.0) ?x276)))
 (let ((?x291 (+ ?x268 ?x61 z00 x)))
 (let ((?x267 (* (/ 1.0 2.0) y)))
 (let ((?x68 (+ (- (/ 1.0 2.0)) ?x267)))
 (let ((?x278 (* ?x68 x)))
 (let ((?x277 (* 2.0 ?x278)))
 (let ((?x293 (+ ?x277 ?x268 x)))
 (let ((?x266 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x293 ?x291 ?x291 ?x291 x x x x x)))
 (let (($x79 (= ?x266 0.0)))
 (not $x79)))))))))))) :qid k!28))
 ))
 (let (($x238 (exists ((x Real) (y Real) )(! false :qid k!28))
 ))
 (let ((?x237 (lambda ((x Real) (y Real) )(let ((?x61 (* x00 y00)))
 (let ((?x276 (* y x)))
 (let ((?x268 (* (- 1.0) ?x276)))
 (let ((?x291 (+ ?x268 ?x61 z00 x)))
 (let ((?x267 (* (/ 1.0 2.0) y)))
 (let ((?x68 (+ (- (/ 1.0 2.0)) ?x267)))
 (let ((?x278 (* ?x68 x)))
 (let ((?x277 (* 2.0 ?x278)))
 (let ((?x293 (+ ?x277 ?x268 x)))
 (let ((?x266 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x293 ?x291 ?x291 ?x291 x x x x x)))
 (let (($x79 (= ?x266 0.0)))
 (let (($x129 (not $x79)))
 (let ((?x261 (+ x z00 ?x61 ?x268)))
 (let ((?x251 (* ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 ?x68 0.0 ?x261 ?x261 ?x261 x x x x x)))
 (let ((@x252 (rewrite (= ?x291 ?x261))))
 (let ((?x263 (+ (* (- 1.0) x) ?x276)))
 (let ((?x142 (+ (* 2.0 (* (- (/ 1.0 2.0)) x)) (* 2.0 (* (/ 1.0 2.0) ?x276)))))
 (let ((?x116 (* (/ 1.0 2.0) ?x276)))
 (let ((?x95 (* (- (/ 1.0 2.0)) x)))
 (let ((?x123 (+ ?x95 ?x116)))
 (let ((?x144 (+ ?x95 (* ?x267 x))))
 (let ((@x89 (trans (rewrite (= ?x278 ?x144)) (rewrite (= ?x144 ?x123)) (= ?x278 ?x123))))
 (let ((@x146 (trans (monotonicity @x89 (= ?x277 (* 2.0 ?x123))) (rewrite (= (* 2.0 ?x123) ?x142)) (= ?x277 ?x142))))
 (let ((@x154 (monotonicity (trans @x146 (rewrite (= ?x142 ?x263)) (= ?x277 ?x263)) (= ?x293 (+ ?x263 ?x268 x)))))
 (let ((@x148 (monotonicity (trans @x154 (rewrite (= (+ ?x263 ?x268 x) 0.0)) (= ?x293 0.0)) @x252 @x252 @x252 (= ?x266 ?x251))))
 (let ((@x245 (monotonicity (trans @x148 (rewrite (= ?x251 0.0)) $x79) (= $x79 (= 0.0 0.0)))))
 (let ((@x241 (monotonicity (trans @x245 (rewrite (= (= 0.0 0.0) true)) (= $x79 true)) (= $x129 (not true)))))
 (trans @x241 (rewrite (= (not true) false)) (= $x129 false))))))))))))))))))))))))))))))
 ))
 (let ((@x230 (trans (quant-intro (proof-bind ?x237) (= $x70 $x238)) (elim-unused (= $x238 false)) (= $x70 false))))
 (let (($x59 (exists ((x Real) (y Real) (z Real) )(! (let ((?x81 (* (- 1.0) z00)))
 (let ((?x67 (* y x)))
 (let ((?x61 (* x00 y00)))
 (let ((?x62 (* (- 1.0) ?x61)))
 (let ((?x298 (+ ?x62 ?x67 z ?x81)))
 (let ((?x138 (* ?x298 z z z y y y y y y y y x x x x x)))
 (let ((?x72 (+ ?x62 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x81)))
 (let ((?x103 (* (/ 1.0 2.0) y)))
 (let ((?x110 (+ (- (/ 1.0 2.0)) ?x103)))
 (let ((?x40 (+ z x)))
 (let ((?x85 (* ?x40 ?x40 ?x40 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x72 x x x x x)))
 (and (= ?x298 0.0) (or (not (= ?x85 0.0)) (not (= ?x138 0.0))))))))))))))) :qid k!28))
 ))
 (let (($x53 (exists ((x Real) (y Real) (z Real) )(! (let ((?x44 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x48 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x44) z) z00) 2.0 x 2.0 x ?x44 ?x44 z ?x24 2.0 x 2.0 x 2.0 x ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 z z)))
 (let ((?x40 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x41 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) 2.0 x 2.0 x ?x36 ?x36 ?x40 ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x36 ?x36 ?x36 ?x40 ?x40)))
 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x41 0.0)) (not (= ?x48 0.0)))))))))) :qid k!28))
 ))
 (let ((?x63 (lambda ((x Real) (y Real) (z Real) )(let ((?x81 (* (- 1.0) z00)))
 (let ((?x67 (* y x)))
 (let ((?x61 (* x00 y00)))
 (let ((?x62 (* (- 1.0) ?x61)))
 (let ((?x298 (+ ?x62 ?x67 z ?x81)))
 (let ((?x138 (* ?x298 z z z y y y y y y y y x x x x x)))
 (let ((?x72 (+ ?x62 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x81)))
 (let ((?x103 (* (/ 1.0 2.0) y)))
 (let ((?x110 (+ (- (/ 1.0 2.0)) ?x103)))
 (let ((?x40 (+ z x)))
 (let ((?x85 (* ?x40 ?x40 ?x40 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x72 x x x x x)))
 (let (($x265 (and (= ?x298 0.0) (or (not (= ?x85 0.0)) (not (= ?x138 0.0))))))
 (let ((?x44 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x48 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x44) z) z00) 2.0 x 2.0 x ?x44 ?x44 z ?x24 2.0 x 2.0 x 2.0 x ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 z z)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x41 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) 2.0 x 2.0 x ?x36 ?x36 ?x40 ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x36 ?x36 ?x36 ?x40 ?x40)))
 (let (($x52 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x41 0.0)) (not (= ?x48 0.0))))))
 (rewrite (= $x52 $x265)))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x66 (mp (mp @x54 (quant-intro (proof-bind ?x63) (= $x53 $x59)) $x59) (rewrite (= $x59 $x70)) $x70)))
 (mp @x66 @x230 false))))))))))))

(:max-memory   17.60
 :memory       17.33
 :num-allocs   56105
 :num-checks   1
 :rlimit-count 515
 :time         0.00
 :total-time   0.01)
