unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x386 (* k!2 k!2)))
 (let ((?x298 (* m!1 m!1)))
 (let ((?x169 (* (- 9) (* n!0 c!3))))
 (let ((?x299 (* (- 27) c!3)))
 (let ((?x366 (* (- 32) k!2)))
 (let ((?x310 (* (- 5) m!1)))
 (let ((?x131 (* 9 n!0)))
 (let ((?x439 (+ 13 ?x131 (* (- 9) (* n!0 k!2)) ?x310 ?x366 ?x299 ?x169 ?x298 ?x386 (* 2 (* m!1 k!2)))))
 (let (($x94 (<= ?x439 0)))
 (let ((?x329 (+ ?x131 (* (- 5) k!2) (* (- 18) c!3) ?x169 ?x386)))
 (let (($x316 (<= ?x329 (- 4))))
 (let (($x361 (= ?x329 (- 4))))
 (let ((?x480 (+ k!2 c!3)))
 (let ((?x706 (+ m!1 k!2)))
 (let ((?x308 (+ 6 m!1)))
 (let ((?x354 (+ 1 n!0)))
 (let ((?x410 (* ?x354 ?x354 ?x308 ?x308 ?x308 ?x308 ?x308 ?x308 ?x706 ?x706 ?x706 ?x706 ?x706 ?x706 ?x706 ?x480 ?x480 ?x480 ?x480 ?x439)))
 (let (($x474 (= ?x410 0)))
 (let (($x409 (not $x474)))
 (let ((?x684 (* (- 1) k!2)))
 (let ((?x700 (+ (* 3 n!0) ?x684 (* 3 (* n!0 n!0)))))
 (let (($x701 (= ?x700 (- 1))))
 (let ((?x172 (* n!0 k!2)))
 (let ((?x685 (+ (* 2 n!0) ?x172 ?x684 (* (- 3) c!3))))
 (let (($x687 (= ?x685 (- 1))))
 (let ((?x97 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x113 (= ?x97 (- 6))))
 (let (($x472 (and $x113 $x361 $x687 $x701 $x409)))
 (let ((?x229 (+ 13 ?x299 ?x366 ?x310 ?x131 ?x386 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x298)))
 (let ((?x435 (+ c!3 k!2)))
 (let ((?x434 (+ k!2 m!1)))
 (let ((?x230 (* ?x354 ?x354 ?x308 ?x308 ?x308 ?x308 ?x308 ?x308 ?x434 ?x434 ?x434 ?x434 ?x434 ?x434 ?x434 ?x435 ?x435 ?x435 ?x435 ?x229)))
 (let (($x337 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x320 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x386) (* 9 (* c!3 n!0)))))
 (let (($x90 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x320 4) $x337 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x230 0)))))
 (let (($x668 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x417 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x476)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x207 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x203 (= ?x207 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= ?x417 0))))))))))))))))))) :qid k!34))
 ))
 (let (($x213 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x345 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x345 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x173 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x332 (= (+ ?x345 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x332 $x173 $x289 (not (= ?x440 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x267 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x417 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x476)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x207 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x203 (= ?x207 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x389 (and $x119 $x203 $x255 $x293 (not (= ?x417 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x345 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x345 (* (- 23) k) (* (- 9) (* ?x336 ?x68)) ?x421 ?x48 ?x78)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x173 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x332 (= (+ ?x345 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x228 (and $x119 $x332 $x173 $x289 (not (= ?x440 0)))))
 (rewrite (= $x228 $x389))))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x81 (* (+ ?x76 (* 9 ?x70) ?x78) ?x68 ?x68 ?x72 ?x80 ?x80 ?x80 ?x70 ?x68 ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x72 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x217 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x345 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x345 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x173 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x332 (= (+ ?x345 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x228 (and $x119 $x332 $x173 $x289 (not (= ?x440 0)))))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x81 (* (+ ?x76 (* 9 ?x70) ?x78) ?x68 ?x68 ?x72 ?x80 ?x80 ?x80 ?x70 ?x68 ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x72 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x228)))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x459 (mp (mp @x87 (quant-intro (proof-bind ?x217) (= $x86 $x213)) $x213) (rewrite (= $x213 $x213)) $x213)))
 (let ((@x194 (mp~ (mp @x459 (quant-intro (proof-bind ?x267) (= $x213 $x668)) $x668) (sk (~ $x668 $x90)) $x90)))
 (let ((@x603 (mp @x194 (rewrite (= $x90 $x472)) $x472)))
 (let ((@x692 (and-elim @x603 $x361)))
 (let ((@x291 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x361) $x316)) @x692 $x316)))
 (let (($x315 (>= ?x329 (- 4))))
 (let ((@x284 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x361) $x315)) @x692 $x315)))
 (let (($x323 (<= ?x97 (- 6))))
 (let ((@x445 (and-elim @x603 $x113)))
 (let ((@x282 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x323)) @x445 $x323)))
 (let (($x317 (>= ?x97 (- 6))))
 (let ((@x180 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x317)) @x445 $x317)))
 (let (($x314 (<= ?x700 (- 1))))
 (let ((@x694 (and-elim @x603 $x701)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x701) $x314)) @x694 $x314)))
 (let (($x265 (>= ?x700 (- 1))))
 (let ((@x270 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x701) $x265)) @x694 $x265)))
 (let (($x301 (<= ?x685 (- 1))))
 (let ((@x693 (and-elim @x603 $x687)))
 (let ((@x140 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x687) $x301)) @x693 $x301)))
 (let (($x233 (>= ?x685 (- 1))))
 (let ((@x187 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x687) $x233)) @x693 $x233)))
 (let ((@x218 ((_ th-lemma arith) (hypothesis (not $x94)) @x180 @x282 @x270 @x274 @x180 @x282 @x270 @x274 @x270 @x274 @x270 @x274 @x187 @x140 @x187 @x140 @x270 @x274 @x180 @x282 @x284 @x291 false)))
 (let ((@x226 (lemma @x218 $x94)))
 (let (($x104 (>= ?x439 0)))
 (let ((@x227 ((_ th-lemma arith) (hypothesis (not $x104)) @x270 @x274 @x180 @x282 @x270 @x274 @x270 @x274 @x180 @x282 @x270 @x274 @x187 @x140 @x270 @x274 @x187 @x140 @x180 @x282 @x284 @x291 false)))
 (let ((@x130 (lemma @x227 $x104)))
 (let (($x250 (not (<= ?x410 0))))
 (let (($x379 (>= ?x410 0)))
 (let (($x183 (= ?x439 0)))
 (let ((@x251 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x183 (not $x94) (not $x104))) @x226 (or $x183 (not $x104)))))
 (let ((@x161 (hypothesis $x183)))
 (let ((@x456 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x379)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x183) $x104)) @x161 $x104) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x183) $x94)) @x161 $x94) false)))
 (let ((@x248 (unit-resolution (lemma @x456 (or (not $x183) $x379)) (unit-resolution @x251 @x130 $x183) $x379)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x474 $x250 (not $x379))) (and-elim @x603 $x409) (or $x250 (not $x379)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x238 @x248 $x250) @x130 @x226 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        8
 :arith-assert-lower        39
 :arith-assert-upper        17
 :arith-bound-prop          2
 :arith-branch-var          1
 :arith-conflicts           6
 :arith-eq-adapter          11
 :arith-gcd-tests           2
 :arith-grobner             6
 :arith-ineq-splits         1
 :arith-max-min             337
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    54
 :arith-num-rows            9
 :arith-patches             2
 :arith-patches_succ        1
 :arith-pivots              7
 :arith-pseudo-nonlinear    2
 :arith-row-summations      18
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    9
 :conflicts                 6
 :decisions                 14
 :del-clause                37
 :final-checks              14
 :max-memory                19.72
 :memory                    19.19
 :mk-bool-var               43
 :mk-clause                 46
 :num-allocs                560347
 :num-checks                1
 :propagations              33
 :rlimit-count              8900
 :time                      0.01
 :total-time                0.02)
