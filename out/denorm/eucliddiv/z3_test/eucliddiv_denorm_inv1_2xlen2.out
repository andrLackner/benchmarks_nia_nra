unsat
((set-logic NIA)
(proof
(let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x49 (* ?x43 ?x43 ?x45 ?x45 ?x45 y00)))
 (let ((?x28 (- 1)))
 (let ((?x48 (* ?x28 ?x43 ?x43 ?x45 ?x45 ?x45 y00 y00)))
 (let ((?x50 (+ ?x48 ?x49)))
 (let ((?x46 (* ?x43 ?x45 y00 y00 y00)))
 (let ((?x44 (* ?x28 ?x43)))
 (let ((?x47 (- ?x44 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x51 (* ?x42 ?x47 ?x50)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x54)))))))))))))))))) :qid k!29))
 ))
 (let (($x480 (= $x56 false)))
 (let (($x473 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x479 (elim-unused (= $x473 false))))
 (let (($x476 (= $x56 $x473)))
 (let ((?x546 (lambda ((q Int) (r Int) (y Int) )(let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x49 (* ?x43 ?x43 ?x45 ?x45 ?x45 y00)))
 (let ((?x28 (- 1)))
 (let ((?x48 (* ?x28 ?x43 ?x43 ?x45 ?x45 ?x45 y00 y00)))
 (let ((?x50 (+ ?x48 ?x49)))
 (let ((?x46 (* ?x43 ?x45 y00 y00 y00)))
 (let ((?x44 (* ?x28 ?x43)))
 (let ((?x47 (- ?x44 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x51 (* ?x42 ?x47 ?x50)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x55 (and $x33 $x41 $x54)))
 (let (($x471 (= $x55 false)))
 (let (($x510 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x85 (= (+ (* (- 1) y00) y) 0)))
 (let (($x540 (and $x85 $x510 false)))
 (let (($x464 (= $x54 false)))
 (let ((@x463 (rewrite (= (or false) false))))
 (let (($x459 (or false)))
 (let (($x460 (= $x54 $x459)))
 (let (($x457 (= $x53 false)))
 (let ((@x456 (rewrite (= (not true) false))))
 (let (($x452 (not true)))
 (let (($x453 (= $x53 $x452)))
 (let (($x450 (= $x52 true)))
 (let ((@x449 (rewrite (= (= 0 0) true))))
 (let (($x445 (= 0 0)))
 (let (($x446 (= $x52 $x445)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x104 (+ r ?x61)))
 (let ((?x80 (+ 1 q)))
 (let ((?x525 (+ (* (- 1) (* y00 y00 ?x80 ?x80 ?x104 ?x104 ?x104)) (* y00 ?x80 ?x80 ?x104 ?x104 ?x104))))
 (let ((?x86 (* y00 y00 y00 ?x80 ?x104)))
 (let ((?x493 (* (- 1) ?x86)))
 (let ((?x90 (* (- 1) q)))
 (let ((?x506 (+ (- 1) ?x90 ?x493)))
 (let ((?x527 (* 0 ?x506 ?x525)))
 (let ((@x107 (rewrite (= ?x45 ?x104))))
 (let ((@x82 (rewrite (= ?x43 ?x80))))
 (let ((@x110 (monotonicity @x82 @x107 (= ?x46 (* ?x80 ?x104 y00 y00 y00)))))
 (let ((@x487 (trans @x110 (rewrite (= (* ?x80 ?x104 y00 y00 y00) ?x86)) (= ?x46 ?x86))))
 (let ((@x96 (trans (monotonicity (rewrite (= ?x28 (- 1))) @x82 (= ?x44 (* (- 1) ?x80))) (rewrite (= (* (- 1) ?x80) (+ (* (- 1) 1) ?x90))) (= ?x44 (+ (* (- 1) 1) ?x90)))))
 (let ((@x101 (trans @x96 (rewrite (= (+ (* (- 1) 1) ?x90) (+ (- 1) ?x90))) (= ?x44 (+ (- 1) ?x90)))))
 (let ((@x504 (trans (monotonicity @x101 @x487 (= ?x47 (- (+ (- 1) ?x90) ?x86))) (rewrite (= (- (+ (- 1) ?x90) ?x86) (+ (+ (- 1) ?x90) ?x493))) (= ?x47 (+ (+ (- 1) ?x90) ?x493)))))
 (let ((@x512 (trans @x504 (rewrite (= (+ (+ (- 1) ?x90) ?x493) ?x506)) (= ?x47 ?x506))))
 (let ((@x77 (trans (monotonicity (rewrite (= ?x30 ?x61)) (= ?x42 (+ ?x61 y00))) (rewrite (= (+ ?x61 y00) 0)) (= ?x42 0))))
 (let ((@x533 (trans (monotonicity @x77 @x512 (rewrite (= ?x50 ?x525)) (= ?x51 ?x527)) (rewrite (= ?x527 0)) $x52)))
 (let ((@x537 (trans (monotonicity (trans (monotonicity @x533 $x446) @x449 $x450) $x453) @x456 $x457)))
 (let ((@x542 (monotonicity (rewrite (= $x33 $x85)) (rewrite (= $x41 $x510)) (trans (monotonicity @x537 $x460) @x463 $x464) (= $x55 $x540))))
 (trans @x542 (rewrite (= $x540 false)) $x471)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (mp @x57 (trans (quant-intro (proof-bind ?x546) $x476) @x479 $x480) false))))))))))

(:max-memory   19.04
 :memory       19.04
 :num-allocs   237371
 :rlimit-count 366
 :time         0.00
 :total-time   0.02)
