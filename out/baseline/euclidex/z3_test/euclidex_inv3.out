unsat
((set-logic NIA)
(proof
(let (($x197 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x57 (* b00 p00)))
 (let ((?x287 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let ((?x206 (+ (* (- 1) (* (+ a (* (- 1) b)) q)) ?x55 ?x287 (* (+ p (* (- 1) q)) b))))
 (let (($x191 (not (= ?x206 0))))
 (let ((?x225 (+ (* (- 1) (* (+ q (* (- 1) p)) a)) ?x55 ?x287 (* (+ b (* (- 1) a)) p))))
 (let (($x186 (not (= ?x225 0))))
 (let (($x360 (or $x186 $x191)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x275 (* (- 1) ?x69)))
 (let ((?x182 (* a00 s00 p)))
 (let ((?x107 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x363 (* (- 1) (* p00 s00 a))))
 (let ((?x324 (* (- 1) (* b00 r00 p))))
 (let ((?x285 (+ ?x324 ?x363 ?x65 ?x107 ?x182 ?x275)))
 (let (($x342 (= ?x285 0)))
 (let ((?x59 (* b p)))
 (let ((?x286 (* (- 1) (* q a))))
 (let ((?x362 (+ ?x286 ?x55 ?x287 ?x59)))
 (let (($x366 (= ?x362 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x332 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x336 (= ?x332 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let (($x257 (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0)))
 (and $x257 $x336 $x366 $x342 $x217 $x360)))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x313 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! false :qid k!38))
 ))
 (let ((?x314 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x57 (* b00 p00)))
 (let ((?x287 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let ((?x206 (+ (* (- 1) (* (+ a (* (- 1) b)) q)) ?x55 ?x287 (* (+ p (* (- 1) q)) b))))
 (let (($x191 (not (= ?x206 0))))
 (let ((?x225 (+ (* (- 1) (* (+ q (* (- 1) p)) a)) ?x55 ?x287 (* (+ b (* (- 1) a)) p))))
 (let (($x186 (not (= ?x225 0))))
 (let (($x360 (or $x186 $x191)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x275 (* (- 1) ?x69)))
 (let ((?x182 (* a00 s00 p)))
 (let ((?x107 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x363 (* (- 1) (* p00 s00 a))))
 (let ((?x324 (* (- 1) (* b00 r00 p))))
 (let ((?x285 (+ ?x324 ?x363 ?x65 ?x107 ?x182 ?x275)))
 (let (($x342 (= ?x285 0)))
 (let ((?x59 (* b p)))
 (let ((?x286 (* (- 1) (* q a))))
 (let ((?x362 (+ ?x286 ?x55 ?x287 ?x59)))
 (let (($x366 (= ?x362 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x332 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x336 (= ?x332 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let (($x257 (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0)))
 (let (($x194 (and $x257 $x336 $x366 $x342 $x217 $x360)))
 (let ((?x155 (* p b)))
 (let ((?x171 (* (- 1) ?x155)))
 (let ((?x124 (* q00 a00)))
 (let ((?x170 (* (- 1) ?x124)))
 (let ((?x116 (* a q)))
 (let ((?x109 (* p00 b00)))
 (let (($x173 (= (+ ?x109 ?x116 ?x170 ?x171) 0)))
 (let (($x376 (not $x173)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x302 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x307 (= ?x302 0)))
 (let ((?x215 (* r q00 a00)))
 (let ((?x181 (* p r00 b00)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x238 (+ ?x63 (* (- 1) (* a q00 r00)) ?x181 (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) ?x215)))
 (let (($x239 (= ?x238 0)))
 (let ((?x49 (* a s)))
 (let ((?x145 (+ ?x49 (* (- 1) (* b r)) (* (- 1) (* s00 a00)) (* r00 b00))))
 (let (($x153 (= ?x145 0)))
 (let (($x148 (= (+ (* p s) ?x129 ?x41 (* (- 1) (* q r))) 0)))
 (let (($x345 (and $x148 $x153 $x173 $x239 $x307 $x376)))
 (let ((@x122 (monotonicity (rewrite (= $x186 $x376)) (rewrite (= $x191 $x376)) (= $x360 (or $x376 $x376)))))
 (let ((?x241 (* (- 1) ?x215)))
 (let ((?x204 (* p s00 a00)))
 (let ((?x201 (* r p00 b00)))
 (let ((?x126 (* (- 1) ?x181)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x135 (* (- 1) ?x63)))
 (let ((?x218 (+ ?x135 ?x66 ?x126 ?x201 ?x204 ?x241)))
 (let (($x369 (= ?x218 0)))
 (let ((@x180 (monotonicity (rewrite (= ?x324 ?x126)) (rewrite (= ?x363 ?x135)) (rewrite (= ?x65 ?x201)) (rewrite (= ?x107 ?x66)) (rewrite (= ?x182 ?x204)) (rewrite (= ?x275 ?x241)) (= ?x285 (+ ?x126 ?x135 ?x201 ?x66 ?x204 ?x241)))))
 (let ((@x367 (trans @x180 (rewrite (= (+ ?x126 ?x135 ?x201 ?x66 ?x204 ?x241) ?x218)) (= ?x285 ?x218))))
 (let ((@x202 (trans (monotonicity @x367 (= $x342 $x369)) (rewrite (= $x369 $x239)) (= $x342 $x239))))
 (let ((@x130 (rewrite (= (= (+ (* (- 1) ?x109) (* (- 1) ?x116) ?x124 ?x155) 0) $x173))))
 (let ((?x212 (* (- 1) ?x116)))
 (let ((?x184 (* (- 1) ?x109)))
 (let ((?x323 (+ ?x184 ?x212 ?x124 ?x155)))
 (let ((?x331 (+ ?x212 ?x124 ?x184 ?x155)))
 (let ((@x291 (monotonicity (rewrite (= ?x286 ?x212)) (rewrite (= ?x55 ?x124)) (rewrite (= ?x287 ?x184)) (rewrite (= ?x59 ?x155)) (= ?x362 ?x331))))
 (let ((@x228 (monotonicity (trans @x291 (rewrite (= ?x331 ?x323)) (= ?x362 ?x323)) (= $x366 (= ?x323 0)))))
 (let ((@x266 (monotonicity (rewrite (= $x257 $x148)) (rewrite (= $x336 $x153)) (trans @x228 @x130 (= $x366 $x173)) @x202 (rewrite (= $x217 $x307)) (trans @x122 (rewrite (= (or $x376 $x376) $x376)) (= $x360 $x376)) (= $x194 $x345))))
 (trans @x266 (rewrite (= $x345 false)) (= $x194 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x371 (trans (quant-intro (proof-bind ?x314) (= $x197 $x313)) (elim-unused (= $x313 false)) (= $x197 false))))
 (let (($x104 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x57 (* b00 p00)))
 (let ((?x99 (+ (- (+ (* (- 1) a (- q p)) (* a00 q00)) ?x57) (* (- b a) p))))
 (let ((?x90 (+ (- (+ (* (- 1) (- a b) q) (* a00 q00)) ?x57) (* b (- p q)))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) (* a00 q00)) ?x57) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) ?x49 ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x42 (+ (- (+ (* (- 1) q r) (* p s)) (* p00 s00)) ?x41)))
 (and (= ?x42 0) $x53 $x61 (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= ?x90 0)) (not (= ?x99 0))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x111 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x57 (* b00 p00)))
 (let ((?x287 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let ((?x206 (+ (* (- 1) (* (+ a (* (- 1) b)) q)) ?x55 ?x287 (* (+ p (* (- 1) q)) b))))
 (let (($x191 (not (= ?x206 0))))
 (let ((?x225 (+ (* (- 1) (* (+ q (* (- 1) p)) a)) ?x55 ?x287 (* (+ b (* (- 1) a)) p))))
 (let (($x186 (not (= ?x225 0))))
 (let (($x360 (or $x186 $x191)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x275 (* (- 1) ?x69)))
 (let ((?x182 (* a00 s00 p)))
 (let ((?x107 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x363 (* (- 1) (* p00 s00 a))))
 (let ((?x324 (* (- 1) (* b00 r00 p))))
 (let ((?x285 (+ ?x324 ?x363 ?x65 ?x107 ?x182 ?x275)))
 (let (($x342 (= ?x285 0)))
 (let ((?x59 (* b p)))
 (let ((?x286 (* (- 1) (* q a))))
 (let ((?x362 (+ ?x286 ?x55 ?x287 ?x59)))
 (let (($x366 (= ?x362 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x332 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x336 (= ?x332 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let (($x257 (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0)))
 (let (($x194 (and $x257 $x336 $x366 $x342 $x217 $x360)))
 (let ((?x99 (+ (- (+ (* (- 1) a (- q p)) ?x55) ?x57) (* (- b a) p))))
 (let ((?x90 (+ (- (+ (* (- 1) (- a b) q) ?x55) ?x57) (* b (- p q)))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (let (($x103 (and $x44 $x53 (= (+ (- (+ (* (- 1) a q) ?x55) ?x57) ?x59) 0) (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= ?x90 0)) (not (= ?x99 0))))))
 (rewrite (= $x103 $x194)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x319 (mp (mp @x105 (quant-intro (proof-bind ?x111) (= $x104 $x197)) $x197) (rewrite (= $x197 $x197)) $x197)))
 (mp @x319 @x371 false)))))))))))

(:max-memory   19.34
 :memory       19.06
 :num-allocs   340327
 :num-checks   1
 :rlimit-count 899
 :time         0.01
 :total-time   0.02)
