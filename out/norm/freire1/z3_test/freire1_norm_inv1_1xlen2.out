unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x244 (* (- 1) r!1)))
 (let ((?x117 (* r!1 r!1)))
 (let ((?x236 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x803 (* (- 1) ?x36)))
 (let ((?x787 (* (- 2) x00)))
 (let ((?x202 (+ r00 ?x787 ?x803 ?x236 ?x117 ?x244)))
 (let (($x213 (<= ?x202 0)))
 (let (($x249 (= ?x202 0)))
 (let ((?x385 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x501 (+ r00 ?x787 ?x803 (* (- 1) (* r00 r00 r!1 r!1 r!1)) ?x236 ?x117 (* (- 3) (* x!0 r!1 r!1 r!1 r!1)) (* (- 9) (* x!0 x!0 r!1 r!1)) (* (- 3) (* r00 r00 x!0 x!0 r!1)) (* 3 (* r00 x!0 x!0 r!1)) (* r00 r00 x!0 x!0 x!0) (* 3 (* r00 r00 x!0 r!1 r!1)) (* (- 1) (* r00 x!0 x!0 x!0)) ?x385 (* (- 1) (* r!1 r!1 r!1 r!1)) (* 3 (* x!0 x!0 r!1 r!1 r!1)) (* r00 r!1 r!1 r!1) (* 6 (* x00 x!0 r!1 r!1)) ?x244 (* 5 (* x!0 r!1 r!1 r!1)) (* 2 (* x00 x!0 x!0 x!0)) (* (- 6) (* x00 x!0 x!0 r!1)) (* (- 2) (* x00 r!1 r!1 r!1)) (* (- 1) (* x!0 x!0 x!0 r!1 r!1)) (* (- 3) (* r00 x!0 r!1 r!1)) (* 7 (* x!0 x!0 x!0 r!1)) (* (- 2) (* x!0 x!0 x!0 x!0)))))
 (let (($x234 (= ?x501 0)))
 (let (($x450 (not $x234)))
 (let (($x618 (and $x249 $x450)))
 (let ((?x387 (* r!1 r!1 r!1 r!1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x873 (* (- 1) ?x117)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x115 (* (- 2) x!0)))
 (let ((?x337 (+ r!1 ?x115 ?x119 ?x873 ?x35 ?x36 (* (- 2) (* x!0 x!0 x!0 x00)) (* r!1 r!1 r!1 r00 r00) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* 3 (* r!1 x!0 x!0 r00 r00)) (* (- 1) (* x!0 x!0 x!0 r00 r00)) (* (- 7) (* r!1 x!0 x!0 x!0)) (* r!1 r!1 x!0 x!0 x!0) ?x387 (* (- 1) ?x385) (* (- 5) (* r!1 r!1 r!1 x!0)) (* 3 (* r!1 r!1 r!1 r!1 x!0)) (* 9 (* r!1 r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0)) (* (- 1) (* r!1 r!1 r!1 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* (- 3) (* r!1 x!0 x!0 r00)) (* x!0 x!0 x!0 r00) (* (- 6) (* r!1 r!1 x!0 x00)) (* 2 (* x!0 x!0 x!0 x!0)) (* 6 (* r!1 x!0 x!0 x00)) (* 2 (* r!1 r!1 r!1 x00)))))
 (let (($x133 (and (= (+ r!1 ?x115 ?x119 ?x873 ?x35 ?x36) 0) (not (= ?x337 0)))))
 (let (($x358 (exists ((r Int) (x Int) )(! (let ((?x812 (* 2 (* x x x x))))
 (let ((?x729 (* x x x r00)))
 (let ((?x737 (* (- 3) (* r x x r00))))
 (let ((?x736 (* 3 (* r r x r00))))
 (let ((?x679 (* (- 1) (* r r r r00))))
 (let ((?x556 (* (- 3) (* r r r x x))))
 (let ((?x997 (* 9 (* r r x x))))
 (let ((?x552 (* 3 (* r r r r x))))
 (let ((?x995 (* (- 5) (* r r r x))))
 (let ((?x409 (* (- 1) (* r r r r r))))
 (let ((?x402 (* r r r r)))
 (let ((?x392 (* r r x x x)))
 (let ((?x993 (* (- 7) (* r x x x))))
 (let ((?x991 (* (- 1) (* x x x r00 r00))))
 (let ((?x990 (* 3 (* r x x r00 r00))))
 (let ((?x989 (* (- 3) (* r r x r00 r00))))
 (let ((?x279 (* r r r r00 r00)))
 (let ((?x988 (* (- 2) (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x351 (+ r ?x118 ?x119 ?x120 ?x35 ?x36 ?x988 ?x279 ?x989 ?x990 ?x991 ?x993 ?x392 ?x402 ?x409 ?x995 ?x552 ?x997 ?x556 ?x679 ?x736 ?x737 ?x729 (* (- 6) (* r r x x00)) ?x812 (* 6 (* r x x x00)) (* 2 (* r r r x00)))))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (and $x122 (not (= ?x351 0))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x526 (exists ((r Int) (x Int) )(! (let ((?x69 (* (- 1) r)))
 (let ((?x104 (+ x ?x69)))
 (let ((?x36 (* r00 r00)))
 (let ((?x803 (* (- 1) ?x36)))
 (let ((?x787 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x383 (+ (* 2 (* x00 ?x104 ?x104 ?x104)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x787 (* r00 r00 ?x104 ?x104 ?x104) (* (- 1) (* (+ 1 r) (+ 1 r) ?x104 ?x104 ?x104)) ?x803 (* (+ 1 r) ?x104 ?x104 ?x104) (* (- 1) (* r00 ?x104 ?x104 ?x104)) (* (- 2) (* ?x104 ?x104 ?x104 ?x104)))))
 (and (= (+ ?x69 r00 (* r r) ?x32 ?x787 ?x803) 0) (not (= ?x383 1)))))))))) :qid k!26))
 ))
 (let ((?x360 (lambda ((r Int) (x Int) )(let ((?x812 (* 2 (* x x x x))))
 (let ((?x729 (* x x x r00)))
 (let ((?x737 (* (- 3) (* r x x r00))))
 (let ((?x736 (* 3 (* r r x r00))))
 (let ((?x679 (* (- 1) (* r r r r00))))
 (let ((?x556 (* (- 3) (* r r r x x))))
 (let ((?x997 (* 9 (* r r x x))))
 (let ((?x552 (* 3 (* r r r r x))))
 (let ((?x995 (* (- 5) (* r r r x))))
 (let ((?x409 (* (- 1) (* r r r r r))))
 (let ((?x402 (* r r r r)))
 (let ((?x392 (* r r x x x)))
 (let ((?x993 (* (- 7) (* r x x x))))
 (let ((?x991 (* (- 1) (* x x x r00 r00))))
 (let ((?x990 (* 3 (* r x x r00 r00))))
 (let ((?x989 (* (- 3) (* r r x r00 r00))))
 (let ((?x279 (* r r r r00 r00)))
 (let ((?x988 (* (- 2) (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x351 (+ r ?x118 ?x119 ?x120 ?x35 ?x36 ?x988 ?x279 ?x989 ?x990 ?x991 ?x993 ?x392 ?x402 ?x409 ?x995 ?x552 ?x997 ?x556 ?x679 ?x736 ?x737 ?x729 (* (- 6) (* r r x x00)) ?x812 (* 6 (* r x x x00)) (* 2 (* r r r x00)))))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x840 (and $x122 (not (= ?x351 0)))))
 (let ((?x69 (* (- 1) r)))
 (let ((?x104 (+ x ?x69)))
 (let ((?x803 (* (- 1) ?x36)))
 (let ((?x787 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x383 (+ (* 2 (* x00 ?x104 ?x104 ?x104)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x787 (* r00 r00 ?x104 ?x104 ?x104) (* (- 1) (* (+ 1 r) (+ 1 r) ?x104 ?x104 ?x104)) ?x803 (* (+ 1 r) ?x104 ?x104 ?x104) (* (- 1) (* r00 ?x104 ?x104 ?x104)) (* (- 2) (* ?x104 ?x104 ?x104 ?x104)))))
 (let (($x806 (and (= (+ ?x69 r00 ?x30 ?x32 ?x787 ?x803) 0) (not (= ?x383 1)))))
 (rewrite (= $x806 $x840)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x64 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (+ (- (* 2 ?x41 ?x41 ?x41 x00) ?x43) r00 (* ?x43 ?x43) (* 2 ?x41))))
 (let ((?x52 (- (+ (- ?x47 ?x35) (* r00 r00 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x58 (- (+ (- ?x52 ?x36) (* ?x43 ?x41 ?x41 ?x41)) (* r00 ?x41 ?x41 ?x41))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (- ?x58 (* 2 ?x41 ?x41 ?x41 ?x41)) 0)))))))))))) :qid k!26))
 ))
 (let ((?x296 (lambda ((r Int) (x Int) )(let ((?x69 (* (- 1) r)))
 (let ((?x104 (+ x ?x69)))
 (let ((?x36 (* r00 r00)))
 (let ((?x803 (* (- 1) ?x36)))
 (let ((?x787 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x383 (+ (* 2 (* x00 ?x104 ?x104 ?x104)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x787 (* r00 r00 ?x104 ?x104 ?x104) (* (- 1) (* (+ 1 r) (+ 1 r) ?x104 ?x104 ?x104)) ?x803 (* (+ 1 r) ?x104 ?x104 ?x104) (* (- 1) (* r00 ?x104 ?x104 ?x104)) (* (- 2) (* ?x104 ?x104 ?x104 ?x104)))))
 (let (($x806 (and (= (+ ?x69 r00 (* r r) ?x32 ?x787 ?x803) 0) (not (= ?x383 1)))))
 (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (+ (- (* 2 ?x41 ?x41 ?x41 x00) ?x43) r00 (* ?x43 ?x43) (* 2 ?x41))))
 (let ((?x52 (- (+ (- ?x47 ?x35) (* r00 r00 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x58 (- (+ (- ?x52 ?x36) (* ?x43 ?x41 ?x41 ?x41)) (* r00 ?x41 ?x41 ?x41))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x63 (and $x40 (or (not (= (- ?x58 (* 2 ?x41 ?x41 ?x41 ?x41)) 0))))))
 (rewrite (= $x63 $x806)))))))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x957 (mp (mp @x65 (quant-intro (proof-bind ?x296) (= $x64 $x526)) $x526) (rewrite (= $x526 $x526)) $x526)))
 (let ((@x194 (mp~ (mp @x957 (quant-intro (proof-bind ?x360) (= $x526 $x358)) $x358) (sk (~ $x358 $x133)) $x133)))
 (let ((@x456 (mp @x194 (rewrite (= $x133 $x618)) $x618)))
 (let ((@x222 (and-elim @x456 $x249)))
 (let ((@x553 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x249) $x213)) @x222 $x213)))
 (let (($x97 (>= ?x202 0)))
 (let ((@x690 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x249) $x97)) @x222 $x97)))
 (let (($x712 (not (>= ?x501 0))))
 (let (($x214 (<= ?x501 0)))
 (let ((@x486 (lemma ((_ th-lemma arith) (hypothesis (not $x214)) @x690 @x553 @x690 @x553 false) $x214)))
 (let ((@x367 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x234 (not $x214) $x712)) (and-elim @x456 $x450) (or (not $x214) $x712))))
 ((_ th-lemma arith) (unit-resolution @x367 @x486 $x712) @x690 @x553 @x690 @x553 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             206
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 40
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.64
 :memory                    19.15
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                539688
 :num-checks                1
 :propagations              4
 :rlimit-count              3245
 :time                      0.01
 :total-time                0.02)
