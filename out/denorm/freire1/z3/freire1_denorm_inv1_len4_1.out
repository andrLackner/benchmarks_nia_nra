unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x481 (* (- 1) r!1)))
 (let ((?x373 (* r!1 r!1)))
 (let ((?x530 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x476 (+ r00 ?x86 ?x102 ?x530 ?x373 ?x481)))
 (let (($x491 (<= ?x476 0)))
 (let (($x479 (= ?x476 0)))
 (let ((?x519 (* (- 4) (* r!1 r!1 r!1 r!1))))
 (let ((?x452 (* (- 1) (* r!1 r!1 r!1 r!1 r!1))))
 (let ((?x439 (* (- 4) (* r!1 r!1 r!1))))
 (let ((?x429 (* (- 1) x!0)))
 (let ((?x308 (* (- 2) (* x!0 x!0))))
 (let ((?x410 (+ (- 1) ?x308 (* (- 1) (* x!0 x!0 r!1 r!1 r!1)) ?x429 ?x439 ?x452 r!1 (* 8 (* x!0 r!1 r!1 r!1)) (* 2 (* x!0 r!1 r!1 r!1 r!1)) ?x519 (* (- 4) (* x!0 x!0 r!1 r!1)) (* 2 (* x!0 r!1)) (* 9 (* x!0 r!1 r!1)) (* (- 5) (* x!0 x!0 r!1)))))
 (let ((?x487 (* ?x410 ?x476)))
 (let (($x486 (= ?x487 0)))
 (let (($x483 (not $x486)))
 (let (($x413 (and $x479 $x483)))
 (let ((?x533 (+ (- 1) r!1 ?x429 (* 2 (* r!1 x!0)) (* 9 (* r!1 r!1 x!0)) ?x439 ?x308 (* (- 5) (* r!1 x!0 x!0)) (* (- 4) (* r!1 r!1 x!0 x!0)) (* (- 1) (* r!1 r!1 r!1 x!0 x!0)) ?x519 ?x452 (* 8 (* r!1 r!1 r!1 x!0)) (* 2 (* r!1 r!1 r!1 r!1 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x545 (and (= (+ r!1 (* (- 2) x!0) ?x117 (* (- 1) ?x373) ?x35 ?x36) 0) (not (= (* ?x533 (+ ?x481 ?x530 r00 ?x373 ?x86 ?x102)) 0)))))
 (let (($x341 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x558 (+ (- 1) r (* (- 1) x) (* 2 (* r x)) (* 9 (* r r x)) (* (- 4) (* r r r)) (* (- 2) (* x x)) (* (- 5) (* r x x)) (* (- 4) (* r r x x)) (* (- 1) (* r r r x x)) (* (- 4) (* r r r r)) (* (- 1) (* r r r r r)) (* 8 (* r r r x)) (* 2 (* r r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let ((?x116 (* (- 2) x)))
 (let (($x120 (= (+ r ?x116 ?x117 ?x118 ?x35 ?x36) 0)))
 (and $x120 (not (= (* ?x558 ?x108) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x302 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x404 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x352 (+ x ?x65)))
 (let ((?x292 (+ 1 r)))
 (let ((?x440 (+ (- 1) (* (- 1) (* ?x292 ?x292 ?x352)) (* (- 1) (* ?x292 ?x292 ?x292 ?x352 ?x352)) (* (- 1) (* ?x292 ?x292 ?x352 ?x352)))))
 (let (($x485 (not (= (* ?x440 ?x404) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x485)))))))))))))))) :qid k!26))
 ))
 (let ((?x294 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x558 (+ (- 1) r (* (- 1) x) (* 2 (* r x)) (* 9 (* r r x)) (* (- 4) (* r r r)) (* (- 2) (* x x)) (* (- 5) (* r x x)) (* (- 4) (* r r x x)) (* (- 1) (* r r r x x)) (* (- 4) (* r r r r)) (* (- 1) (* r r r r r)) (* 8 (* r r r x)) (* 2 (* r r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let ((?x116 (* (- 2) x)))
 (let (($x120 (= (+ r ?x116 ?x117 ?x118 ?x35 ?x36) 0)))
 (let (($x74 (and $x120 (not (= (* ?x558 ?x108) 0)))))
 (let ((?x404 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x432 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x ?x65) (+ x ?x65)))))
 (let ((?x352 (+ x ?x65)))
 (let ((?x292 (+ 1 r)))
 (let ((?x440 (+ (- 1) (* (- 1) (* ?x292 ?x292 ?x352)) (* (- 1) (* ?x292 ?x292 ?x292 ?x352 ?x352)) ?x432)))
 (let (($x485 (not (= (* ?x440 ?x404) 0))))
 (let (($x361 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x485)))
 (rewrite (= $x361 $x74))))))))))))))))))))))))
 ))
 (let (($x329 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x404 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x352 (+ x ?x65)))
 (let ((?x292 (+ 1 r)))
 (let ((?x440 (+ (- 1) (* (- 1) (* ?x292 ?x292 ?x352)) (* (- 1) (* ?x292 ?x292 ?x292 ?x352 ?x352)) (* (- 1) (* ?x292 ?x292 ?x352 ?x352)))))
 (let (($x485 (not (= (* ?x440 ?x404) 0))))
 (and (= (+ ?x65 r00 (* r r) ?x32 ?x86 ?x102) 0) $x485))))))))))) :qid k!26))
 ))
 (let ((?x370 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x404 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x352 (+ x ?x65)))
 (let ((?x292 (+ 1 r)))
 (let ((?x440 (+ (- 1) (* (- 1) (* ?x292 ?x292 ?x352)) (* (- 1) (* ?x292 ?x292 ?x292 ?x352 ?x352)) (* (- 1) (* ?x292 ?x292 ?x352 ?x352)))))
 (let (($x485 (not (= (* ?x440 ?x404) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x361 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x485)))
 (let (($x346 (and (= (+ ?x65 r00 ?x30 ?x32 ?x86 ?x102) 0) $x485)))
 (rewrite (= $x346 $x361))))))))))))))))))))
 ))
 (let (($x60 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x54 (- (- (- (- 1) (* ?x41 ?x41 ?x44)) (* ?x41 ?x41 ?x41 ?x44 ?x44)) (* ?x41 ?x41 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* ?x48 ?x54) 0))))))))))) :qid k!26))
 ))
 (let ((?x334 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x404 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x86 ?x102)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x352 (+ x ?x65)))
 (let ((?x292 (+ 1 r)))
 (let ((?x440 (+ (- 1) (* (- 1) (* ?x292 ?x292 ?x352)) (* (- 1) (* ?x292 ?x292 ?x292 ?x352 ?x352)) (* (- 1) (* ?x292 ?x292 ?x352 ?x352)))))
 (let (($x485 (not (= (* ?x440 ?x404) 0))))
 (let (($x346 (and (= (+ ?x65 r00 (* r r) ?x32 ?x86 ?x102) 0) $x485)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x54 (- (- (- (- 1) (* ?x41 ?x41 ?x44)) (* ?x41 ?x41 ?x41 ?x44 ?x44)) (* ?x41 ?x41 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x59 (and $x40 (or (not (= (* ?x48 ?x54) 0))))))
 (rewrite (= $x59 $x346)))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x324 (mp (mp @x61 (quant-intro (proof-bind ?x334) (= $x60 $x329)) $x329) (rewrite (= $x329 $x329)) $x329)))
 (let ((@x87 (mp (mp @x324 (quant-intro (proof-bind ?x370) (= $x329 $x302)) $x302) (quant-intro (proof-bind ?x294) (= $x302 $x341)) $x341)))
 (let ((@x270 (mp (mp~ @x87 (sk (~ $x341 $x545)) $x545) (rewrite (= $x545 $x413)) $x413)))
 (let ((@x473 (and-elim @x270 $x479)))
 (let ((@x535 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x479) $x491)) @x473 $x491)))
 (let (($x490 (>= ?x476 0)))
 (let ((@x477 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x479) $x490)) @x473 $x490)))
 (let (($x310 (not (>= ?x487 0))))
 (let (($x492 (<= ?x487 0)))
 (let ((@x465 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x486 (not $x492) $x310)) (and-elim @x270 $x483) (or (not $x492) $x310))))
 (let ((@x469 (unit-resolution @x465 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x492)) @x477 @x535 false) $x492) $x310)))
 ((_ th-lemma arith farkas 1 1 1) @x469 @x477 @x535 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.60
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1109252
 :num-checks                1
 :propagations              4
 :rlimit-count              1969
 :time                      0.01
 :total-time                0.01)
