unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x66 (* y00 q00)))
 (let ((?x219 (+ r00 ?x66 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x262 (>= ?x219 0)))
 (let (($x178 (= ?x219 0)))
 (let ((?x325 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x303 (* (- 1) (* y00 y00 y00 y00))))
 (let ((?x361 (+ (* (- 1) (* y00 y00 y00 y00 q!2)) (* 3 (* y00 y00 y00 y00 y00 r!1)) (* (- 3) (* y00 y00 y00 y00 r!1 r!1)) (* 3 (* y00 y00 y00 y00 y00 r!1 q!2 q!2)) (* (- 1) (* y00 y00 r!1 r!1 q!2)) ?x303 (* (- 1) (* y00 y00 r!1 r!1)) (* y00 y00 y00 r!1 r!1 r!1) (* (- 6) (* y00 y00 y00 y00 r!1 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 r!1 r!1 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 y00 y00 q!2 q!2)) (* 2 (* y00 y00 y00 r!1)) ?x325 (* 6 (* y00 y00 y00 y00 y00 r!1 q!2)) (* (- 2) (* y00 y00 y00 y00 y00 y00 q!2)) (* 2 (* y00 y00 y00 r!1 r!1 r!1 q!2)) (* y00 y00 y00 r!1 r!1 r!1 q!2 q!2) (* 2 (* y00 y00 y00 r!1 q!2)))))
 (let ((?x367 (* ?x361 (+ (* (- 1) r00) (* (- 1) ?x66) (* y00 q!2) r!1))))
 (let (($x296 (= ?x367 0)))
 (let (($x368 (not $x296)))
 (let (($x456 (and (= (+ y00 (* (- 1) y!0)) 0) $x178 $x368)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x237 (+ r!1 ?x62 (* q!2 y00) ?x76)))
 (let ((?x253 (+ (* (- 1) (* r!1 r!1 y00 y00)) (* (- 1) (* q!2 r!1 r!1 y00 y00)) (* r!1 r!1 r!1 y00 y00 y00) (* 2 (* q!2 r!1 r!1 r!1 y00 y00 y00)) (* q!2 q!2 r!1 r!1 r!1 y00 y00 y00) (* (- 3) (* r!1 r!1 y00 y00 y00 y00)) (* (- 6) (* q!2 r!1 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 r!1 r!1 y00 y00 y00 y00)) (* 2 (* r!1 y00 y00 y00)) (* 2 (* q!2 r!1 y00 y00 y00)) (* 3 (* r!1 y00 y00 y00 y00 y00)) (* 6 (* q!2 r!1 y00 y00 y00 y00 y00)) ?x303 (* 3 (* q!2 q!2 r!1 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 y00 y00 y00 y00)) ?x325 (* (- 2) (* q!2 y00 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 y00 y00)))))
 (let (($x257 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x237 0) (not (= (* ?x253 ?x237) 0)))))
 (let (($x161 (exists ((q Int) (r Int) (y Int) )(! (let ((?x66 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x39 (* q y00)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x90 (+ r ?x62 ?x39 ?x76)))
 (let ((?x335 (* (- 1) (* q q y00 y00 y00 y00 y00 y00))))
 (let ((?x354 (* (- 2) (* q y00 y00 y00 y00 y00 y00))))
 (let ((?x325 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x352 (* 3 (* q q r y00 y00 y00 y00 y00))))
 (let ((?x303 (* (- 1) (* y00 y00 y00 y00))))
 (let ((?x351 (* 6 (* q r y00 y00 y00 y00 y00))))
 (let ((?x349 (* 3 (* r y00 y00 y00 y00 y00))))
 (let ((?x347 (* (- 3) (* q q r r y00 y00 y00 y00))))
 (let ((?x346 (* (- 6) (* q r r y00 y00 y00 y00))))
 (let ((?x344 (* (- 3) (* r r y00 y00 y00 y00))))
 (let ((?x163 (* q q r r r y00 y00 y00)))
 (let ((?x342 (* 2 (* q r r r y00 y00 y00))))
 (let ((?x160 (* r r r y00 y00 y00)))
 (let ((?x139 (* (- 1) (* q r r y00 y00))))
 (let ((?x137 (* (- 1) (* r r y00 y00))))
 (let ((?x532 (+ ?x137 ?x139 ?x160 ?x342 ?x163 ?x344 ?x346 ?x347 (* 2 (* r y00 y00 y00)) (* 2 (* q r y00 y00 y00)) ?x349 ?x351 ?x303 ?x352 (* (- 1) (* q y00 y00 y00 y00)) ?x325 ?x354 ?x335)))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (and $x72 $x95 (not (= (* ?x532 ?x90) 0)))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x279 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x313 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x109 (+ r ?x61)))
 (let ((?x215 (+ 1 q)))
 (let ((?x247 (+ (* (- 1) (* y00 y00 ?x215 ?x109 ?x109)) (* y00 y00 y00 ?x215 ?x215 ?x109 ?x109 ?x109))))
 (let (($x309 (not (= (* ?x247 (+ r ?x61 ?x62 ?x313 (* y00 ?x215))) 0))))
 (let (($x201 (= (+ r ?x62 ?x313 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x201 $x309)))))))))) :qid k!29))
 ))
 (let ((?x202 (lambda ((q Int) (r Int) (y Int) )(let ((?x66 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x39 (* q y00)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x90 (+ r ?x62 ?x39 ?x76)))
 (let ((?x335 (* (- 1) (* q q y00 y00 y00 y00 y00 y00))))
 (let ((?x354 (* (- 2) (* q y00 y00 y00 y00 y00 y00))))
 (let ((?x325 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x352 (* 3 (* q q r y00 y00 y00 y00 y00))))
 (let ((?x303 (* (- 1) (* y00 y00 y00 y00))))
 (let ((?x351 (* 6 (* q r y00 y00 y00 y00 y00))))
 (let ((?x349 (* 3 (* r y00 y00 y00 y00 y00))))
 (let ((?x347 (* (- 3) (* q q r r y00 y00 y00 y00))))
 (let ((?x346 (* (- 6) (* q r r y00 y00 y00 y00))))
 (let ((?x344 (* (- 3) (* r r y00 y00 y00 y00))))
 (let ((?x163 (* q q r r r y00 y00 y00)))
 (let ((?x342 (* 2 (* q r r r y00 y00 y00))))
 (let ((?x160 (* r r r y00 y00 y00)))
 (let ((?x139 (* (- 1) (* q r r y00 y00))))
 (let ((?x137 (* (- 1) (* r r y00 y00))))
 (let ((?x532 (+ ?x137 ?x139 ?x160 ?x342 ?x163 ?x344 ?x346 ?x347 (* 2 (* r y00 y00 y00)) (* 2 (* q r y00 y00 y00)) ?x349 ?x351 ?x303 ?x352 (* (- 1) (* q y00 y00 y00 y00)) ?x325 ?x354 ?x335)))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (let (($x540 (and $x72 $x95 (not (= (* ?x532 ?x90) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x313 (* (- 1) ?x36)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x109 (+ r ?x61)))
 (let ((?x215 (+ 1 q)))
 (let ((?x247 (+ (* (- 1) (* y00 y00 ?x215 ?x109 ?x109)) (* y00 y00 y00 ?x215 ?x215 ?x109 ?x109 ?x109))))
 (let (($x309 (not (= (* ?x247 (+ r ?x61 ?x62 ?x313 (* y00 ?x215))) 0))))
 (let (($x201 (= (+ r ?x62 ?x313 (* y00 q)) 0)))
 (let (($x291 (and (= (+ y00 (* (- 1) y)) 0) $x201 $x309)))
 (rewrite (= $x291 $x540))))))))))))))))))))))))))))))))))))
 ))
 (let (($x312 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x313 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x109 (+ r ?x61)))
 (let ((?x215 (+ 1 q)))
 (let ((?x247 (+ (* (- 1) (* y00 y00 ?x215 ?x109 ?x109)) (* y00 y00 y00 ?x215 ?x215 ?x109 ?x109 ?x109))))
 (let (($x309 (not (= (* ?x247 (+ r ?x61 ?x62 ?x313 (* y00 ?x215))) 0))))
 (let (($x201 (= (+ r ?x62 ?x313 (* y00 q)) 0)))
 (and (= (+ ?x61 y) 0) $x201 $x309)))))))))) :qid k!29))
 ))
 (let ((?x210 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x313 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x109 (+ r ?x61)))
 (let ((?x215 (+ 1 q)))
 (let ((?x247 (+ (* (- 1) (* y00 y00 ?x215 ?x109 ?x109)) (* y00 y00 y00 ?x215 ?x215 ?x109 ?x109 ?x109))))
 (let (($x309 (not (= (* ?x247 (+ r ?x61 ?x62 ?x313 (* y00 ?x215))) 0))))
 (let (($x201 (= (+ r ?x62 ?x313 (* y00 q)) 0)))
 (let (($x291 (and (= (+ y00 (* (- 1) y)) 0) $x201 $x309)))
 (let (($x197 (and (= (+ ?x61 y) 0) $x201 $x309)))
 (rewrite (= $x197 $x291))))))))))))))
 ))
 (let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let (($x52 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x50) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x52))))))) :qid k!29))
 ))
 (let ((?x83 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x313 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x109 (+ r ?x61)))
 (let ((?x215 (+ 1 q)))
 (let ((?x247 (+ (* (- 1) (* y00 y00 ?x215 ?x109 ?x109)) (* y00 y00 y00 ?x215 ?x215 ?x109 ?x109 ?x109))))
 (let (($x309 (not (= (* ?x247 (+ r ?x61 ?x62 ?x313 (* y00 ?x215))) 0))))
 (let (($x201 (= (+ r ?x62 ?x313 (* y00 q)) 0)))
 (let (($x197 (and (= (+ ?x61 y) 0) $x201 $x309)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x42 ?x42 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let (($x53 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x50) 0))))
 (let (($x55 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x53))))
 (rewrite (= $x55 $x197))))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x329 (mp (mp @x57 (quant-intro (proof-bind ?x83) (= $x56 $x312)) $x312) (rewrite (= $x312 $x312)) $x312)))
 (let ((@x498 (mp (mp @x329 (quant-intro (proof-bind ?x210) (= $x312 $x279)) $x279) (quant-intro (proof-bind ?x202) (= $x279 $x161)) $x161)))
 (let ((@x322 (mp (mp~ @x498 (sk (~ $x161 $x257)) $x257) (rewrite (= $x257 $x456)) $x456)))
 (let ((@x176 (and-elim @x322 $x178)))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x262)) @x176 $x262)))
 (let (($x173 (<= ?x219 0)))
 (let ((@x218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x173)) @x176 $x173)))
 (let (($x175 (not (<= ?x367 0))))
 (let (($x259 (>= ?x367 0)))
 (let ((@x270 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x296 $x175 (not $x259))) (and-elim @x322 $x368) (or $x175 (not $x259)))))
 (let ((@x445 (unit-resolution @x270 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x259)) @x218 @x177 false) $x259) $x175)))
 ((_ th-lemma arith farkas 1 1 1) @x445 @x218 @x177 false))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             106
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 38
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.56
 :memory                    3.10
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1102967
 :num-checks                1
 :propagations              6
 :rlimit-count              2410
 :time                      0.01
 :total-time                0.01)
