unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x66 (* y00 q00)))
 (let ((?x231 (+ r00 ?x66 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x228 (>= ?x231 0)))
 (let (($x112 (= ?x231 0)))
 (let ((?x242 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x137 (* (- 1) (* y00 y00 y00))))
 (let ((?x297 (+ (* (- 2) (* y00 y00 y00 q!2)) (* (- 1) (* y00 y00 y00 q!2 q!2)) ?x137 (* y00 y00 r!1 r!1 r!1) (* y00 y00 r!1 r!1 r!1 q!2) ?x242 (* (- 1) (* y00 y00 y00 y00 y00 q!2)) (* 3 (* y00 y00 y00 y00 r!1)) (* 3 (* y00 y00 y00 y00 r!1 q!2)) (* (- 3) (* y00 y00 y00 r!1 r!1 q!2)) (* (- 3) (* y00 y00 y00 r!1 r!1)))))
 (let ((?x302 (* ?x297 (+ (* (- 1) r00) (* (- 1) ?x66) (* y00 q!2) r!1))))
 (let (($x122 (= ?x302 0)))
 (let (($x303 (not $x122)))
 (let (($x127 (and (= (+ y00 (* (- 1) y!0)) 0) $x112 $x303)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x167 (+ r!1 ?x62 (* q!2 y00) ?x76)))
 (let ((?x148 (+ ?x137 (* (- 2) (* q!2 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00)) (* r!1 r!1 r!1 y00 y00) (* q!2 r!1 r!1 r!1 y00 y00) (* (- 3) (* r!1 r!1 y00 y00 y00)) (* (- 3) (* q!2 r!1 r!1 y00 y00 y00)) (* 3 (* r!1 y00 y00 y00 y00)) (* 3 (* q!2 r!1 y00 y00 y00 y00)) ?x242 (* (- 1) (* q!2 y00 y00 y00 y00 y00)))))
 (let (($x75 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x167 0) (not (= (* ?x148 ?x167) 0)))))
 (let (($x380 (exists ((q Int) (r Int) (y Int) )(! (let ((?x66 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x39 (* q y00)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x90 (+ r ?x62 ?x39 ?x76)))
 (let ((?x246 (* (- 1) (* q y00 y00 y00 y00 y00))))
 (let ((?x242 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x257 (* 3 (* q r y00 y00 y00 y00))))
 (let ((?x256 (* 3 (* r y00 y00 y00 y00))))
 (let ((?x254 (* (- 3) (* q r r y00 y00 y00))))
 (let ((?x253 (* (- 3) (* r r y00 y00 y00))))
 (let ((?x153 (* q r r r y00 y00)))
 (let ((?x152 (* r r r y00 y00)))
 (let ((?x143 (* (- 1) (* q q y00 y00 y00))))
 (let ((?x137 (* (- 1) (* y00 y00 y00))))
 (let ((?x334 (+ ?x137 (* (- 2) (* q y00 y00 y00)) ?x143 ?x152 ?x153 ?x253 ?x254 ?x256 ?x257 ?x242 ?x246)))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (and $x72 $x95 (not (= (* ?x334 ?x90) 0))))))))))))))))))))) :qid k!29))
 ))
 (let (($x203 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x230 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x194 (+ r ?x61)))
 (let ((?x124 (+ 1 q)))
 (let ((?x220 (+ (* (- 1) (* y00 y00 y00 ?x124 ?x124)) (* y00 y00 ?x124 ?x194 ?x194 ?x194))))
 (and (= (+ ?x61 y) 0) (= (+ r ?x62 ?x230 (* y00 q)) 0) (not (= (* ?x220 (+ r ?x61 ?x62 ?x230 (* y00 ?x124))) 0)))))))))) :qid k!29))
 ))
 (let ((?x349 (lambda ((q Int) (r Int) (y Int) )(let ((?x66 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x66)))
 (let ((?x39 (* q y00)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x90 (+ r ?x62 ?x39 ?x76)))
 (let ((?x246 (* (- 1) (* q y00 y00 y00 y00 y00))))
 (let ((?x242 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x257 (* 3 (* q r y00 y00 y00 y00))))
 (let ((?x256 (* 3 (* r y00 y00 y00 y00))))
 (let ((?x254 (* (- 3) (* q r r y00 y00 y00))))
 (let ((?x253 (* (- 3) (* r r y00 y00 y00))))
 (let ((?x153 (* q r r r y00 y00)))
 (let ((?x152 (* r r r y00 y00)))
 (let ((?x143 (* (- 1) (* q q y00 y00 y00))))
 (let ((?x137 (* (- 1) (* y00 y00 y00))))
 (let ((?x334 (+ ?x137 (* (- 2) (* q y00 y00 y00)) ?x143 ?x152 ?x153 ?x253 ?x254 ?x256 ?x257 ?x242 ?x246)))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (let (($x342 (and $x72 $x95 (not (= (* ?x334 ?x90) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x230 (* (- 1) ?x36)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x194 (+ r ?x61)))
 (let ((?x124 (+ 1 q)))
 (let ((?x220 (+ (* (- 1) (* y00 y00 y00 ?x124 ?x124)) (* y00 y00 ?x124 ?x194 ?x194 ?x194))))
 (let (($x195 (and (= (+ ?x61 y) 0) (= (+ r ?x62 ?x230 (* y00 q)) 0) (not (= (* ?x220 (+ r ?x61 ?x62 ?x230 (* y00 ?x124))) 0)))))
 (rewrite (= $x195 $x342)))))))))))))))))))))))))))))
 ))
 (let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x45 y00 y00 y00) (* ?x45 ?x42 ?x42 ?x42 y00 y00))))
 (let (($x52 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x50) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x52))))))) :qid k!29))
 ))
 (let ((?x226 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x230 (* (- 1) ?x36)))
 (let ((?x62 (* (- 1) r00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x194 (+ r ?x61)))
 (let ((?x124 (+ 1 q)))
 (let ((?x220 (+ (* (- 1) (* y00 y00 y00 ?x124 ?x124)) (* y00 y00 ?x124 ?x194 ?x194 ?x194))))
 (let (($x195 (and (= (+ ?x61 y) 0) (= (+ r ?x62 ?x230 (* y00 q)) 0) (not (= (* ?x220 (+ r ?x61 ?x62 ?x230 (* y00 ?x124))) 0)))))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x45 y00 y00 y00) (* ?x45 ?x42 ?x42 ?x42 y00 y00))))
 (let (($x53 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x50) 0))))
 (let (($x55 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x53))))
 (rewrite (= $x55 $x195))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x60 (mp (mp @x57 (quant-intro (proof-bind ?x226) (= $x56 $x203)) $x203) (rewrite (= $x203 $x203)) $x203)))
 (let ((@x265 (mp~ (mp @x60 (quant-intro (proof-bind ?x349) (= $x203 $x380)) $x380) (sk (~ $x380 $x75)) $x75)))
 (let ((@x320 (mp @x265 (rewrite (= $x75 $x127)) $x127)))
 (let ((@x101 (and-elim @x320 $x112)))
 (let ((@x316 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x112) $x228)) @x101 $x228)))
 (let (($x266 (<= ?x231 0)))
 (let ((@x313 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x112) $x266)) @x101 $x266)))
 (let (($x310 (not (<= ?x302 0))))
 (let (($x172 (>= ?x302 0)))
 (let ((@x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x122 $x310 (not $x172))) (and-elim @x320 $x303) (or $x310 (not $x172)))))
 (let ((@x305 (unit-resolution @x306 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x172)) @x313 @x316 false) $x172) $x310)))
 ((_ th-lemma arith farkas 1 1 1) @x305 @x313 @x316 false))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        8
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             78
 :arith-nonlinear-horner    6
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                14
 :final-checks              2
 :max-memory                19.55
 :memory                    19.05
 :mk-bool-var               15
 :mk-clause                 18
 :num-allocs                515260
 :num-checks                1
 :propagations              6
 :rlimit-count              1904
 :time                      0.01
 :total-time                0.02)
