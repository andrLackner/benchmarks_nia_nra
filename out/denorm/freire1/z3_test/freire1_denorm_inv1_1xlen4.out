unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x275 (* r!1 r!1)))
 (let ((?x146 (* (- 1) r!1)))
 (let ((?x255 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x162 (+ r00 ?x84 ?x100 ?x255 ?x146 ?x275)))
 (let (($x454 (<= ?x162 0)))
 (let (($x412 (= ?x162 0)))
 (let ((?x144 (* 2 (* x!0 x!0 x!0))))
 (let ((?x289 (* (- 5) (* r!1 r!1 r!1))))
 (let ((?x168 (* (- 2) ?x275)))
 (let ((?x365 (* (- 4) (* r!1 r!1 r!1 r!1))))
 (let ((?x218 (* (- 1) (* r!1 r!1 r!1 r!1 r!1))))
 (let ((?x73 (+ 1 ?x218 ?x365 (* 10 (* x!0 r!1 r!1 r!1)) (* 3 (* x!0 r!1)) x!0 r!1 ?x168 (* 3 (* x!0 x!0 x!0 r!1)) (* (- 6) (* x!0 x!0 r!1)) ?x289 ?x144 (* x!0 x!0 x!0 r!1 r!1) (* 3 (* x!0 r!1 r!1 r!1 r!1)) (* (- 9) (* x!0 x!0 r!1 r!1)) (* (- 3) (* x!0 x!0 r!1 r!1 r!1)) (* 9 (* x!0 r!1 r!1)))))
 (let ((?x81 (* ?x73 ?x162)))
 (let (($x79 (= ?x81 0)))
 (let (($x262 (not $x79)))
 (let (($x80 (and $x412 $x262)))
 (let ((?x254 (+ 1 r!1 x!0 ?x168 (* 3 (* r!1 x!0)) (* 9 (* r!1 r!1 x!0)) (* 10 (* r!1 r!1 r!1 x!0)) ?x289 ?x365 ?x144 (* 3 (* r!1 x!0 x!0 x!0)) (* r!1 r!1 x!0 x!0 x!0) ?x218 (* 3 (* r!1 r!1 r!1 r!1 x!0)) (* (- 6) (* r!1 x!0 x!0)) (* (- 9) (* r!1 r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x261 (and (= (+ r!1 (* (- 2) x!0) ?x115 (* (- 1) ?x275) ?x35 ?x36) 0) (not (= (* ?x254 (+ ?x146 ?x255 r00 ?x275 ?x84 ?x100)) 0)))))
 (let (($x518 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x517 (+ 1 r x (* (- 2) ?x30) (* 3 (* r x)) (* 9 (* r r x)) (* 10 (* r r r x)) (* (- 5) (* r r r)) (* (- 4) (* r r r r)) (* 2 (* x x x)) (* 3 (* r x x x)) (* r r x x x) (* (- 1) (* r r r r r)) (* 3 (* r r r r x)) (* (- 6) (* r x x)) (* (- 9) (* r r x x)) (* (- 3) (* r r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x118 (= (+ r (* (- 2) x) ?x115 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x118 (not (= (* ?x517 ?x106) 0)))))))))))))) :qid k!26))
 ))
 (let (($x362 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x361 (+ 1 r)))
 (let ((?x287 (* ?x361 ?x361)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x335 (+ x ?x63)))
 (let ((?x348 (+ (* ?x361 ?x361 ?x361 ?x335) ?x287 (* ?x361 ?x361 ?x335 ?x335 ?x335) (* ?x361 ?x335 ?x335 ?x335))))
 (let (($x69 (= (* ?x348 (+ (- 1) (* (- 3) r) r00 ?x287 ?x32 ?x84 ?x100)) 0)))
 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) (not $x69)))))))))))) :qid k!26))
 ))
 (let ((?x112 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x517 (+ 1 r x (* (- 2) ?x30) (* 3 (* r x)) (* 9 (* r r x)) (* 10 (* r r r x)) (* (- 5) (* r r r)) (* (- 4) (* r r r r)) (* 2 (* x x x)) (* 3 (* r x x x)) (* r r x x x) (* (- 1) (* r r r r r)) (* 3 (* r r r r x)) (* (- 6) (* r x x)) (* (- 9) (* r r x x)) (* (- 3) (* r r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x118 (= (+ r (* (- 2) x) ?x115 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x109 (and $x118 (not (= (* ?x517 ?x106) 0)))))
 (let ((?x361 (+ 1 r)))
 (let ((?x287 (* ?x361 ?x361)))
 (let ((?x348 (+ (* ?x361 ?x361 ?x361 (+ x ?x63)) ?x287 (* ?x361 ?x361 (+ x ?x63) (+ x ?x63) (+ x ?x63)) (* ?x361 (+ x ?x63) (+ x ?x63) (+ x ?x63)))))
 (let (($x69 (= (* ?x348 (+ (- 1) (* (- 3) r) r00 ?x287 ?x32 ?x84 ?x100)) 0)))
 (let (($x321 (and (= (+ ?x63 r00 ?x30 ?x32 ?x84 ?x100) 0) (not $x69))))
 (rewrite (= $x321 $x109))))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41 ?x44) ?x43 (* ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x44 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x53 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) ?x52)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x53 0)))))))))))) :qid k!26))
 ))
 (let ((?x108 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x361 (+ 1 r)))
 (let ((?x287 (* ?x361 ?x361)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x335 (+ x ?x63)))
 (let ((?x348 (+ (* ?x361 ?x361 ?x361 ?x335) ?x287 (* ?x361 ?x361 ?x335 ?x335 ?x335) (* ?x361 ?x335 ?x335 ?x335))))
 (let (($x69 (= (* ?x348 (+ (- 1) (* (- 3) r) r00 ?x287 ?x32 ?x84 ?x100)) 0)))
 (let (($x321 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) (not $x69))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41 ?x44) ?x43 (* ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x44 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x53 (* (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 ?x44)) ?x35) ?x36) ?x52)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 (or (not (= ?x53 0))))))
 (rewrite (= $x57 $x321))))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x489 (mp (mp @x59 (quant-intro (proof-bind ?x108) (= $x58 $x362)) $x362) (rewrite (= $x362 $x362)) $x362)))
 (let ((@x124 (mp~ (mp @x489 (quant-intro (proof-bind ?x112) (= $x362 $x518)) $x518) (sk (~ $x518 $x261)) $x261)))
 (let ((@x427 (mp @x124 (rewrite (= $x261 $x80)) $x80)))
 (let ((@x328 (and-elim @x427 $x412)))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x412) $x454)) @x328 $x454)))
 (let (($x448 (>= ?x162 0)))
 (let ((@x188 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x412) $x448)) @x328 $x448)))
 (let (($x166 (not (>= ?x81 0))))
 (let (($x234 (<= ?x81 0)))
 (let ((@x64 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x79 (not $x234) $x166)) (and-elim @x427 $x262) (or (not $x234) $x166))))
 (let ((@x71 (unit-resolution @x64 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x234)) @x188 @x394 false) $x234) $x166)))
 ((_ th-lemma arith farkas 1 1 1) @x71 @x188 @x394 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                19.58
 :memory                    19.09
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                500260
 :num-checks                1
 :propagations              4
 :rlimit-count              1655
 :time                      0.01
 :total-time                0.02)
