unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x1140 (* r!1 r!1)))
 (let ((?x1465 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1383 (* (- 1) ?x36)))
 (let ((?x983 (* (- 2) x00)))
 (let ((?x1496 (+ r00 ?x983 ?x1383 (* 2 x!0) ?x1465 ?x1140)))
 (let (($x922 (<= ?x1496 0)))
 (let (($x1507 (= ?x1496 0)))
 (let ((?x1011 (* (- 2) (* x!0 x!0 x!0 x!0))))
 (let ((?x2036 (* 4 (* x!0 x!0))))
 (let ((?x814 (+ x!0 ?x1465)))
 (let ((?x993 (+ 1 r!1)))
 (let ((?x1352 (* (- 2) (* r!1 r!1 r!1))))
 (let ((?x1365 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x1165 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x1393 (* 2 ?x1140)))
 (let ((?x549 (+ (* 5 (* x!0 r!1 r!1 r!1)) (* 2 (* r00 r00 r!1 r!1 r!1)) (* (- 2) (* r00 r00 x!0)) (* 4 (* x00 r!1 r!1 r!1)) (* (- 9) (* x!0 x!0 r!1 r!1)) (* (- 4) (* x00 x!0 r!1 r!1 r!1 r!1)) (* (- 3) (* x!0 r!1 r!1 r!1 r!1)) (* (- 3) (* r00 x!0 x!0 r!1 r!1)) (* 2 (* r00 r00 r!1)) (* (- 6) (* r00 r00 x!0 r!1 r!1 r!1)) (* 6 (* x00 r!1 r!1 r!1 r!1)) (* 2 (* x00 r!1 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 x!0 r!1)) (* 7 (* x!0 x!0 x!0 r!1)) (* (- 12) (* x00 x!0 r!1 r!1 r!1)) (* (- 6) (* x00 x!0 r!1 r!1)) (* (- 1) (* x!0 x!0 x!0 r!1 r!1)) (* (- 6) (* x!0 r!1)) (* 2 (* r00 x!0)) (* (- 1) (* r00 r!1 r!1 r!1 r!1 r!1)) (* (- 1) (* r00 x!0 x!0 x!0)) (* (- 2) (* r00 r!1 r!1 r!1)) (* (- 3) (* r00 r!1 r!1 r!1 r!1)) (* (- 1) (* r00 r!1 r!1)) (* (- 1) (* ?x993 ?x993 ?x993 ?x993 ?x993 ?x814 ?x814)) (* (- 1) (* r00 x!0 x!0 r!1 r!1 r!1)) (* (- 1) (* r00 x!0 x!0)) (* 2 (* r00 x!0 r!1 r!1 r!1 r!1)) (* 6 (* r00 x!0 r!1 r!1 r!1)) (* 2 (* x00 r!1 r!1)) (* r00 r00 x!0 x!0 r!1 r!1 r!1) (* 3 (* r00 r00 x!0 x!0 r!1 r!1)) (* r00 r00 x!0 x!0) (* (- 2) (* r00 r00 x!0 r!1 r!1 r!1 r!1)) (* (- 2) (* r00 r00 x!0 r!1)) (* r00 r00 r!1 r!1 r!1 r!1 r!1) (* r00 r00 r!1 r!1) (* 3 (* r00 r00 r!1 r!1 r!1 r!1)) (* (- 2) (* r00 r!1)) ?x1393 (* 2 (* x00 x!0 x!0)) (* (- 4) (* x00 x!0)) (* 6 (* x00 x!0 x!0 r!1 r!1)) (* 2 (* x00 x!0 x!0 r!1 r!1 r!1)) ?x1165 ?x1365 ?x1352 (* 3 (* r00 x!0 r!1 r!1)) (* (- 3) (* r00 r00 x!0 r!1 r!1)) (* 2 (* r00 x!0 r!1)) (* 3 (* x!0 x!0 r!1 r!1 r!1)) (* (- 2) (* ?x993 ?x993 ?x993 ?x814 ?x814 ?x814)) (* ?x993 ?x993 ?x993 ?x993 ?x814 ?x814) (* 2 (* x00 x!0 x!0 x!0)) (* 2 (* x!0 r!1 r!1)) (* 4 (* x00 r!1)) ?x2036 ?x1011 (* r00 r00 x!0 x!0 x!0))))
 (let (($x1599 (= ?x549 0)))
 (let (($x1305 (not $x1599)))
 (let (($x1559 (and $x1507 $x1305)))
 (let ((?x2017 (* (- 1) (* ?x993 ?x993 ?x993 ?x993 ?x993 (+ ?x1465 x!0) (+ ?x1465 x!0)))))
 (let ((?x1339 (* (- 2) (* ?x993 ?x993 ?x993 (+ ?x1465 x!0) (+ ?x1465 x!0) (+ ?x1465 x!0)))))
 (let ((?x686 (+ ?x1393 (* 2 (* x!0 x!0 x!0 x00)) (* 2 (* x!0 x!0 x00)) (* 6 (* r!1 r!1 x!0 x!0 x00)) (* 2 (* r!1 r!1 r!1 x!0 x!0 x00)) (* 2 (* r!1 r!1 x!0)) (* 6 (* r!1 r!1 r!1 r!1 x00)) (* 4 (* r!1 r!1 r!1 x00)) (* 2 (* r!1 r!1 r!1 r!1 r!1 x00)) (* (- 4) (* r!1 x!0 x00)) (* (- 12) (* r!1 r!1 r!1 x!0 x00)) (* 7 (* r!1 x!0 x!0 x!0)) (* (- 6) (* r!1 r!1 x!0 x00)) (* (- 1) (* r!1 r!1 x!0 x!0 x!0)) (* (- 4) (* r!1 r!1 r!1 r!1 x!0 x00)) ?x1352 ?x1165 ?x1365 (* 5 (* r!1 r!1 r!1 x!0)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0)) (* (- 6) (* r!1 x!0)) (* (- 9) (* r!1 r!1 x!0 x!0)) (* 3 (* r!1 r!1 r!1 x!0 x!0)) ?x1339 (* ?x993 ?x993 ?x993 ?x993 (+ ?x1465 x!0) (+ ?x1465 x!0)) (* (- 1) (* r!1 r!1 r00)) (* (- 2) (* r!1 r!1 r!1 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 r00)) (* (- 2) (* r!1 r00)) (* 2 (* x!0 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r00)) (* 2 (* r!1 x!0 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* 6 (* r!1 r!1 r!1 x!0 r00)) (* 2 (* r!1 r!1 r!1 r!1 x!0 r00)) (* (- 1) (* x!0 x!0 r00)) (* (- 3) (* r!1 r!1 x!0 x!0 r00)) (* (- 1) (* r!1 r!1 r!1 x!0 x!0 r00)) ?x2017 ?x2036 ?x1011 (* 2 (* r!1 r00 r00)) (* (- 2) (* x!0 r00 r00)) (* (- 4) (* x!0 x00)) (* 4 (* r!1 x00)) (* 2 (* r!1 r!1 r!1 r00 r00)) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* x!0 x!0 x!0 r00 r00) (* r!1 r!1 r00 r00) (* 3 (* r!1 r!1 r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r!1 r!1 r00 r00) (* (- 2) (* r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 x!0 r00 r00)) (* (- 2) (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* x!0 x!0 r00 r00) (* 3 (* r!1 r!1 x!0 x!0 r00 r00)) (* r!1 r!1 r!1 x!0 x!0 r00 r00) (* 2 (* r!1 r!1 x00)) (* (- 1) (* x!0 x!0 x!0 r00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x136 (* (- 1) r00)))
 (let (($x965 (and (= (+ r!1 (* (- 2) x!0) ?x136 (* (- 1) ?x1140) ?x35 ?x36) 0) (not (= ?x686 0)))))
 (let (($x576 (exists ((r Int) (x Int) )(! (let ((?x2239 (* (- 1) (* x x x r00))))
 (let ((?x2111 (* r r r x x r00 r00)))
 (let ((?x2124 (* 3 (* r r x x r00 r00))))
 (let ((?x2086 (* x x r00 r00)))
 (let ((?x2122 (* (- 2) (* r r r r x r00 r00))))
 (let ((?x2121 (* (- 6) (* r r r x r00 r00))))
 (let ((?x2119 (* (- 2) (* r x r00 r00))))
 (let ((?x1979 (* r r r r r r00 r00)))
 (let ((?x2118 (* 3 (* r r r r r00 r00))))
 (let ((?x1940 (* r r r00 r00)))
 (let ((?x1881 (* x x x r00 r00)))
 (let ((?x2136 (* (- 3) (* r r x r00 r00))))
 (let ((?x2135 (* 2 (* r r r r00 r00))))
 (let ((?x1782 (* 4 (* r x00))))
 (let ((?x1785 (* (- 4) (* x x00))))
 (let ((?x1743 (* (- 2) (* x r00 r00))))
 (let ((?x1734 (* 2 (* r r00 r00))))
 (let ((?x1649 (* (- 2) (* x x x x))))
 (let ((?x1466 (* 4 (* x x))))
 (let ((?x86 (* (- 1) r)))
 (let ((?x147 (+ ?x86 x)))
 (let ((?x176 (+ 1 r)))
 (let ((?x1487 (* (- 1) (* ?x176 ?x176 ?x176 ?x176 ?x176 ?x147 ?x147))))
 (let ((?x1390 (* (- 1) (* r r r x x r00))))
 (let ((?x1415 (* (- 3) (* r r x x r00))))
 (let ((?x1387 (* (- 1) (* x x r00))))
 (let ((?x1409 (* 2 (* r r r r x r00))))
 (let ((?x1406 (* 6 (* r r r x r00))))
 (let ((?x2219 (* 3 (* r r x r00))))
 (let ((?x1400 (* 2 (* r x r00))))
 (let ((?x1382 (* (- 1) (* r r r r r r00))))
 (let ((?x1397 (* (- 3) (* r r r r r00))))
 (let ((?x2244 (* (- 2) (* r r r r00))))
 (let ((?x1379 (* (- 1) (* r r r00))))
 (let ((?x891 (* ?x176 ?x176 ?x176 ?x176 ?x147 ?x147)))
 (let ((?x580 (* r r r r r)))
 (let ((?x245 (* 2 (* r r r x x x00))))
 (let ((?x231 (* 2 (* x x x00))))
 (let ((?x170 (* 2 (* x x x x00))))
 (let ((?x30 (* r r)))
 (let ((?x311 (* 2 ?x30)))
 (let ((?x1075 (+ ?x311 ?x170 ?x231 (* 6 (* r r x x x00)) ?x245 (* 2 (* r r x)) (* 6 (* r r r r x00)) (* 4 (* r r r x00)) (* 2 (* r r r r r x00)) (* (- 4) (* r x x00)) (* (- 12) (* r r r x x00)) (* 7 (* r x x x)) (* (- 6) (* r r x x00)) (* (- 1) (* r r x x x)) (* (- 4) (* r r r r x x00)) (* (- 2) (* r r r)) (* (- 1) (* r r r r)) ?x580 (* 5 (* r r r x)) (* (- 3) (* r r r r x)) (* (- 6) (* r x)) (* (- 9) (* r r x x)) (* 3 (* r r r x x)) (* (- 2) (* ?x176 ?x176 ?x176 ?x147 ?x147 ?x147)) ?x891 ?x1379 ?x2244 ?x1397 (* (- 2) (* r r00)) (* 2 (* x r00)) ?x1382 ?x1400 ?x2219 ?x1406 ?x1409 ?x1387 ?x1415 ?x1390 ?x1487 ?x1466 ?x1649 ?x1734 ?x1743 ?x1785 ?x1782 ?x2135 ?x2136 ?x1881 ?x1940 ?x2118 ?x1979 ?x2119 ?x2121 ?x2122 ?x2086 ?x2124 ?x2111 (* 2 (* r r x00)) ?x2239)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x137 (* (- 1) ?x30)))
 (let ((?x136 (* (- 1) r00)))
 (let ((?x135 (* (- 2) x)))
 (let (($x139 (= (+ r ?x135 ?x136 ?x137 ?x35 ?x36) 0)))
 (and $x139 (not (= ?x1075 0))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x618 (exists ((r Int) (x Int) )(! (let ((?x86 (* (- 1) r)))
 (let ((?x624 (+ x ?x86)))
 (let ((?x176 (+ 1 r)))
 (let ((?x582 (+ (* 2 (* x00 ?x624 ?x624 ?x624)) (* 2 (* x00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 2) (* ?x176 ?x624)) (* 2 (* ?x176 ?x176 ?x624)) (* (- 2) (* ?x176 ?x176 ?x176 ?x624 ?x624 ?x624)) (* ?x176 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* ?x176 ?x176 ?x624 ?x624 ?x624)) (* (- 1) (* r00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 1) (* ?x176 ?x176 ?x176 ?x176 ?x176 ?x624 ?x624)) (* 4 (* ?x624 ?x624)) (* ?x176 ?x624 ?x624 ?x624) (* (- 2) (* ?x624 ?x624 ?x624 ?x624)) (* 2 (* r00 ?x624)) (* (- 2) (* r00 r00 ?x624)) (* (- 4) (* x00 ?x624)) (* r00 r00 ?x624 ?x624 ?x624) (* r00 r00 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* r00 ?x624 ?x624 ?x624)))))
 (let (($x1421 (not (= ?x582 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x135 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x137 (* (- 1) ?x30)))
 (let ((?x136 (* (- 1) r00)))
 (and (= (+ r ?x136 ?x137 ?x135 ?x35 ?x36) 0) $x1421)))))))))))) :qid k!26))
 ))
 (let ((?x583 (lambda ((r Int) (x Int) )(let ((?x2239 (* (- 1) (* x x x r00))))
 (let ((?x2111 (* r r r x x r00 r00)))
 (let ((?x2124 (* 3 (* r r x x r00 r00))))
 (let ((?x2086 (* x x r00 r00)))
 (let ((?x2122 (* (- 2) (* r r r r x r00 r00))))
 (let ((?x2121 (* (- 6) (* r r r x r00 r00))))
 (let ((?x2119 (* (- 2) (* r x r00 r00))))
 (let ((?x1979 (* r r r r r r00 r00)))
 (let ((?x2118 (* 3 (* r r r r r00 r00))))
 (let ((?x1940 (* r r r00 r00)))
 (let ((?x1881 (* x x x r00 r00)))
 (let ((?x2136 (* (- 3) (* r r x r00 r00))))
 (let ((?x2135 (* 2 (* r r r r00 r00))))
 (let ((?x1782 (* 4 (* r x00))))
 (let ((?x1785 (* (- 4) (* x x00))))
 (let ((?x1743 (* (- 2) (* x r00 r00))))
 (let ((?x1734 (* 2 (* r r00 r00))))
 (let ((?x1649 (* (- 2) (* x x x x))))
 (let ((?x1466 (* 4 (* x x))))
 (let ((?x86 (* (- 1) r)))
 (let ((?x147 (+ ?x86 x)))
 (let ((?x176 (+ 1 r)))
 (let ((?x1487 (* (- 1) (* ?x176 ?x176 ?x176 ?x176 ?x176 ?x147 ?x147))))
 (let ((?x1390 (* (- 1) (* r r r x x r00))))
 (let ((?x1415 (* (- 3) (* r r x x r00))))
 (let ((?x1387 (* (- 1) (* x x r00))))
 (let ((?x1409 (* 2 (* r r r r x r00))))
 (let ((?x1406 (* 6 (* r r r x r00))))
 (let ((?x2219 (* 3 (* r r x r00))))
 (let ((?x1400 (* 2 (* r x r00))))
 (let ((?x1382 (* (- 1) (* r r r r r r00))))
 (let ((?x1397 (* (- 3) (* r r r r r00))))
 (let ((?x2244 (* (- 2) (* r r r r00))))
 (let ((?x1379 (* (- 1) (* r r r00))))
 (let ((?x891 (* ?x176 ?x176 ?x176 ?x176 ?x147 ?x147)))
 (let ((?x580 (* r r r r r)))
 (let ((?x245 (* 2 (* r r r x x x00))))
 (let ((?x231 (* 2 (* x x x00))))
 (let ((?x170 (* 2 (* x x x x00))))
 (let ((?x30 (* r r)))
 (let ((?x311 (* 2 ?x30)))
 (let ((?x1075 (+ ?x311 ?x170 ?x231 (* 6 (* r r x x x00)) ?x245 (* 2 (* r r x)) (* 6 (* r r r r x00)) (* 4 (* r r r x00)) (* 2 (* r r r r r x00)) (* (- 4) (* r x x00)) (* (- 12) (* r r r x x00)) (* 7 (* r x x x)) (* (- 6) (* r r x x00)) (* (- 1) (* r r x x x)) (* (- 4) (* r r r r x x00)) (* (- 2) (* r r r)) (* (- 1) (* r r r r)) ?x580 (* 5 (* r r r x)) (* (- 3) (* r r r r x)) (* (- 6) (* r x)) (* (- 9) (* r r x x)) (* 3 (* r r r x x)) (* (- 2) (* ?x176 ?x176 ?x176 ?x147 ?x147 ?x147)) ?x891 ?x1379 ?x2244 ?x1397 (* (- 2) (* r r00)) (* 2 (* x r00)) ?x1382 ?x1400 ?x2219 ?x1406 ?x1409 ?x1387 ?x1415 ?x1390 ?x1487 ?x1466 ?x1649 ?x1734 ?x1743 ?x1785 ?x1782 ?x2135 ?x2136 ?x1881 ?x1940 ?x2118 ?x1979 ?x2119 ?x2121 ?x2122 ?x2086 ?x2124 ?x2111 (* 2 (* r r x00)) ?x2239)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x137 (* (- 1) ?x30)))
 (let ((?x136 (* (- 1) r00)))
 (let ((?x135 (* (- 2) x)))
 (let (($x139 (= (+ r ?x135 ?x136 ?x137 ?x35 ?x36) 0)))
 (let (($x1168 (and $x139 (not (= ?x1075 0)))))
 (let ((?x439 (* (- 2) (* (+ x ?x86) (+ x ?x86) (+ x ?x86) (+ x ?x86)))))
 (let ((?x1865 (* (- 2) (* ?x176 ?x176 ?x176 (+ x ?x86) (+ x ?x86) (+ x ?x86)))))
 (let ((?x582 (+ (* 2 (* x00 (+ x ?x86) (+ x ?x86) (+ x ?x86))) (* 2 (* x00 ?x176 ?x176 ?x176 (+ x ?x86) (+ x ?x86))) (* (- 2) (* ?x176 (+ x ?x86))) (* 2 (* ?x176 ?x176 (+ x ?x86))) ?x1865 (* ?x176 ?x176 ?x176 ?x176 (+ x ?x86) (+ x ?x86)) (* (- 1) (* ?x176 ?x176 (+ x ?x86) (+ x ?x86) (+ x ?x86))) (* (- 1) (* r00 ?x176 ?x176 ?x176 (+ x ?x86) (+ x ?x86))) (* (- 1) (* ?x176 ?x176 ?x176 ?x176 ?x176 (+ x ?x86) (+ x ?x86))) (* 4 (* (+ x ?x86) (+ x ?x86))) (* ?x176 (+ x ?x86) (+ x ?x86) (+ x ?x86)) ?x439 (* 2 (* r00 (+ x ?x86))) (* (- 2) (* r00 r00 (+ x ?x86))) (* (- 4) (* x00 (+ x ?x86))) (* r00 r00 (+ x ?x86) (+ x ?x86) (+ x ?x86)) (* r00 r00 ?x176 ?x176 ?x176 (+ x ?x86) (+ x ?x86)) (* (- 1) (* r00 (+ x ?x86) (+ x ?x86) (+ x ?x86))))))
 (let (($x1421 (not (= ?x582 0))))
 (let (($x262 (and (= (+ r ?x136 ?x137 ?x135 ?x35 ?x36) 0) $x1421)))
 (rewrite (= $x262 $x1168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x2103 (exists ((r Int) (x Int) )(! (let ((?x86 (* (- 1) r)))
 (let ((?x624 (+ x ?x86)))
 (let ((?x176 (+ 1 r)))
 (let ((?x582 (+ (* 2 (* x00 ?x624 ?x624 ?x624)) (* 2 (* x00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 2) (* ?x176 ?x624)) (* 2 (* ?x176 ?x176 ?x624)) (* (- 2) (* ?x176 ?x176 ?x176 ?x624 ?x624 ?x624)) (* ?x176 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* ?x176 ?x176 ?x624 ?x624 ?x624)) (* (- 1) (* r00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 1) (* ?x176 ?x176 ?x176 ?x176 ?x176 ?x624 ?x624)) (* 4 (* ?x624 ?x624)) (* ?x176 ?x624 ?x624 ?x624) (* (- 2) (* ?x624 ?x624 ?x624 ?x624)) (* 2 (* r00 ?x624)) (* (- 2) (* r00 r00 ?x624)) (* (- 4) (* x00 ?x624)) (* r00 r00 ?x624 ?x624 ?x624) (* r00 r00 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* r00 ?x624 ?x624 ?x624)))))
 (let (($x1421 (not (= ?x582 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x1383 (* (- 1) ?x36)))
 (let ((?x983 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x86 r00 ?x30 ?x32 ?x983 ?x1383) 0) $x1421))))))))))) :qid k!26))
 ))
 (let ((?x975 (lambda ((r Int) (x Int) )(let ((?x86 (* (- 1) r)))
 (let ((?x624 (+ x ?x86)))
 (let ((?x176 (+ 1 r)))
 (let ((?x582 (+ (* 2 (* x00 ?x624 ?x624 ?x624)) (* 2 (* x00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 2) (* ?x176 ?x624)) (* 2 (* ?x176 ?x176 ?x624)) (* (- 2) (* ?x176 ?x176 ?x176 ?x624 ?x624 ?x624)) (* ?x176 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* ?x176 ?x176 ?x624 ?x624 ?x624)) (* (- 1) (* r00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 1) (* ?x176 ?x176 ?x176 ?x176 ?x176 ?x624 ?x624)) (* 4 (* ?x624 ?x624)) (* ?x176 ?x624 ?x624 ?x624) (* (- 2) (* ?x624 ?x624 ?x624 ?x624)) (* 2 (* r00 ?x624)) (* (- 2) (* r00 r00 ?x624)) (* (- 4) (* x00 ?x624)) (* r00 r00 ?x624 ?x624 ?x624) (* r00 r00 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* r00 ?x624 ?x624 ?x624)))))
 (let (($x1421 (not (= ?x582 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x135 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x137 (* (- 1) ?x30)))
 (let ((?x136 (* (- 1) r00)))
 (let (($x262 (and (= (+ r ?x136 ?x137 ?x135 ?x35 ?x36) 0) $x1421)))
 (let (($x1389 (= (+ ?x86 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x627 (and $x1389 $x1421)))
 (rewrite (= $x627 $x262)))))))))))))))))
 ))
 (let (($x81 (exists ((r Int) (x Int) )(! (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x45 (+ (* 2 ?x41 ?x41 ?x41 x00) (* 2 ?x43 ?x43 ?x43 ?x41 ?x41 x00))))
 (let ((?x51 (- (+ (- ?x45 (* 2 ?x43 ?x41)) (* 2 ?x43 ?x43 ?x41)) (* 2 ?x43 ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x57 (- (+ ?x51 (* ?x43 ?x43 ?x43 ?x43 ?x41 ?x41)) (* ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x59 (- (- ?x57 (* ?x43 ?x43 ?x43 r00 ?x41 ?x41)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x41 ?x41))))
 (let ((?x65 (- (+ ?x59 (* 4 ?x41 ?x41) (* ?x43 ?x41 ?x41 ?x41)) (* 2 ?x41 ?x41 ?x41 ?x41))))
 (let ((?x71 (- (- (+ ?x65 (* 2 r00 ?x41)) (* 2 r00 r00 ?x41)) (* 4 ?x41 x00))))
 (let ((?x74 (+ ?x71 (* r00 r00 ?x41 ?x41 ?x41) (* ?x43 ?x43 ?x43 r00 r00 ?x41 ?x41))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (- ?x74 (* r00 ?x41 ?x41 ?x41)) 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x1359 (lambda ((r Int) (x Int) )(let ((?x86 (* (- 1) r)))
 (let ((?x624 (+ x ?x86)))
 (let ((?x176 (+ 1 r)))
 (let ((?x582 (+ (* 2 (* x00 ?x624 ?x624 ?x624)) (* 2 (* x00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 2) (* ?x176 ?x624)) (* 2 (* ?x176 ?x176 ?x624)) (* (- 2) (* ?x176 ?x176 ?x176 ?x624 ?x624 ?x624)) (* ?x176 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* ?x176 ?x176 ?x624 ?x624 ?x624)) (* (- 1) (* r00 ?x176 ?x176 ?x176 ?x624 ?x624)) (* (- 1) (* ?x176 ?x176 ?x176 ?x176 ?x176 ?x624 ?x624)) (* 4 (* ?x624 ?x624)) (* ?x176 ?x624 ?x624 ?x624) (* (- 2) (* ?x624 ?x624 ?x624 ?x624)) (* 2 (* r00 ?x624)) (* (- 2) (* r00 r00 ?x624)) (* (- 4) (* x00 ?x624)) (* r00 r00 ?x624 ?x624 ?x624) (* r00 r00 ?x176 ?x176 ?x176 ?x624 ?x624) (* (- 1) (* r00 ?x624 ?x624 ?x624)))))
 (let (($x1421 (not (= ?x582 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x1383 (* (- 1) ?x36)))
 (let ((?x983 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x627 (and (= (+ ?x86 r00 ?x30 ?x32 ?x983 ?x1383) 0) $x1421)))
 (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x45 (+ (* 2 ?x41 ?x41 ?x41 x00) (* 2 ?x43 ?x43 ?x43 ?x41 ?x41 x00))))
 (let ((?x51 (- (+ (- ?x45 (* 2 ?x43 ?x41)) (* 2 ?x43 ?x43 ?x41)) (* 2 ?x43 ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x57 (- (+ ?x51 (* ?x43 ?x43 ?x43 ?x43 ?x41 ?x41)) (* ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x59 (- (- ?x57 (* ?x43 ?x43 ?x43 r00 ?x41 ?x41)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x41 ?x41))))
 (let ((?x65 (- (+ ?x59 (* 4 ?x41 ?x41) (* ?x43 ?x41 ?x41 ?x41)) (* 2 ?x41 ?x41 ?x41 ?x41))))
 (let ((?x71 (- (- (+ ?x65 (* 2 r00 ?x41)) (* 2 r00 r00 ?x41)) (* 4 ?x41 x00))))
 (let ((?x74 (+ ?x71 (* r00 r00 ?x41 ?x41 ?x41) (* ?x43 ?x43 ?x43 r00 r00 ?x41 ?x41))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x80 (and (= ?x38 0) (or (not (= (- ?x74 (* r00 ?x41 ?x41 ?x41)) 0))))))
 (rewrite (= $x80 $x627)))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x984 (mp (mp @x82 (quant-intro (proof-bind ?x1359) (= $x81 $x2103)) $x2103) (rewrite (= $x2103 $x2103)) $x2103)))
 (let ((@x1812 (mp (mp @x984 (quant-intro (proof-bind ?x975) (= $x2103 $x618)) $x618) (quant-intro (proof-bind ?x583) (= $x618 $x576)) $x576)))
 (let ((@x2099 (mp (mp~ @x1812 (sk (~ $x576 $x965)) $x965) (rewrite (= $x965 $x1559)) $x1559)))
 (let ((@x806 (and-elim @x2099 $x1507)))
 (let ((@x991 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1507) $x922)) @x806 $x922)))
 (let (($x925 (>= ?x1496 0)))
 (let ((@x825 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1507) $x925)) @x806 $x925)))
 (let (($x994 (not (>= ?x549 0))))
 (let (($x929 (<= ?x549 0)))
 (let ((@x2105 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1599 (not $x929) $x994)) (and-elim @x2099 $x1305) (or (not $x929) $x994))))
 (let ((@x810 (unit-resolution @x2105 (lemma ((_ th-lemma arith) (hypothesis (not $x929)) @x825 @x991 false) $x929) $x994)))
 ((_ th-lemma arith) @x810 @x825 @x991 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        25
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             506
 :arith-nonlinear-bounds    22
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-tableau-max-columns 83
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.92
 :memory                    3.32
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1451651
 :num-checks                1
 :propagations              4
 :rlimit-count              10303
 :time                      0.01
 :total-time                0.02)
