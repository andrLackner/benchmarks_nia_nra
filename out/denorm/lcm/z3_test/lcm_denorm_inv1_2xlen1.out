unsat
((set-logic NIA)
(declare-fun k!10 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x480 (+ k!00 (* (- 1) (* x!3 u!5)) (* (- 1) (* y!2 v!4)) k!10)))
 (let (($x411 (>= ?x480 0)))
 (let (($x522 (= ?x480 0)))
 (let ((?x188 (* (- 1) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4 k!10))))
 (let ((?x401 (* 2 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 k!10))))
 (let ((?x400 (* 2 (* k!00 y!2 x!3 x!3 x!3 v!4 v!4 v!4 u!5))))
 (let ((?x189 (* (- 1) (* k!00 y!2 y!2 x!3 x!3 v!4 v!4 v!4 u!5))))
 (let ((?x397 (* (- 1) (* y!2 y!2 x!3 x!3 v!4 v!4 v!4 k!10 u!5))))
 (let ((?x261 (* (- 1) (* k!00 y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4))))
 (let ((?x190 (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 k!10 u!5))))
 (let ((?x389 (* (- 1) (* y!2 x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5))))
 (let ((?x388 (* 2 (* k!00 y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4))))
 (let ((?x392 (* (- 1) (* x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 k!10))))
 (let ((?x205 (* (- 2) (* y!2 x!3 x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5))))
 (let ((?x191 (* (- 1) (* y!2 y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5))))
 (let ((?x381 (* (- 2) (* y!2 y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4))))
 (let ((?x387 (* (- 1) (* k!00 x!3 x!3 x!3 x!3 v!4 v!4 v!4 u!5))))
 (let ((?x385 (* 2 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 k!10 u!5))))
 (let ((?x383 (* (- 1) (* k!00 x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4))))
 (let ((?x408 (+ (* y!2 y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4 v!4) (* y!2 y!2 y!2 x!3 x!3 v!4 v!4 v!4 v!4 u!5) (* y!2 y!2 x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5) ?x383 ?x385 ?x387 ?x381 (* x!3 x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 u!5) ?x191 ?x205 (* y!2 x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4) ?x392 ?x388 (* x!3 x!3 x!3 x!3 x!3 v!4 v!4 v!4 u!5 u!5) ?x389 ?x190 ?x261 ?x397 ?x189 ?x400 ?x401 ?x188)))
 (let (($x404 (= ?x408 0)))
 (let ((?x84 (* (- 1) k!10)))
 (let ((?x229 (* y!2 v!4)))
 (let ((?x202 (* x!3 u!5)))
 (let ((?x94 (* (- 1) k!00)))
 (let ((?x377 (* (- 1) y!2)))
 (let ((?x284 (+ ?x377 x!3)))
 (let ((?x398 (+ v!4 u!5)))
 (let ((?x316 (* ?x398 ?x398 ?x398 ?x284 ?x284 (+ ?x94 ?x202 ?x229 ?x84) y!2 y!2 u!5)))
 (let (($x200 (= ?x316 0)))
 (let (($x313 (not $x200)))
 (let (($x192 (or $x313 (not $x404))))
 (let (($x413 (and $x522 $x192)))
 (let ((?x307 (* (- 2) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!10))))
 (let ((?x219 (* (- 2) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!00))))
 (let ((?x352 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 y!2))))
 (let ((?x172 (* (- 1) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 y!2))))
 (let ((?x293 (* (- 1) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2))))
 (let ((?x128 (* 2 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2))))
 (let ((?x110 (* 2 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2))))
 (let ((?x105 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2))))
 (let ((?x107 (* (- 1) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x497 (* (- 2) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!10))))
 (let ((?x371 (* (- 2) (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 k!00))))
 (let ((?x367 (* (- 1) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x314 (+ (* v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!00) (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!10) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2) ?x367 ?x371 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!00) ?x497 (* v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!10) ?x107 ?x105 ?x110 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2) ?x128 ?x293 ?x172 ?x352 (* u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3 k!00) ?x219 (* u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!00) (* u!5 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!10) ?x307 (* v!4 v!4 v!4 v!4 x!3 x!3 y!2 y!2 k!10))))
 (let ((?x213 (+ (* u!5 x!3) (* v!4 y!2) ?x94 ?x84)))
 (let ((?x125 (+ x!3 ?x377)))
 (let ((?x510 (+ u!5 v!4)))
 (let (($x201 (or (not (= (* ?x510 ?x510 ?x510 ?x125 ?x125 ?x213 y!2 y!2 u!5) 0)) (not (= ?x314 0)))))
 (let (($x302 (and (= ?x213 0) $x201)))
 (let (($x287 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x473 (* (- 1) (* v v v v v x x y y y))))
 (let ((?x470 (* (- 1) (* u v v v v x x y y y))))
 (let ((?x469 (* (- 1) (* u u v v v x x x y y))))
 (let ((?x502 (* 2 (* v v v v v x x x y y))))
 (let ((?x289 (* u v v v v x x x y y)))
 (let ((?x491 (* 2 (* u u v v v x x x x y))))
 (let ((?x459 (* (- 1) (* v v v v v x x x x y))))
 (let ((?x458 (* (- 1) (* u v v v v x x x x x))))
 (let ((?x457 (* (- 1) (* u u v v v x x x x x))))
 (let ((?x166 (* u v v v v x x x x y)))
 (let ((?x559 (+ (* v v v v x x y y k!00) (* u v v v x x x x k!10) ?x166 ?x457 (* (- 2) (* v v v v x x x y k!00)) (* v v v v x x x x k!00) (* (- 2) (* u v v v x x x y k!10)) (* v v v v x x x x k!10) ?x458 ?x459 ?x491 ?x289 ?x502 ?x469 ?x470 ?x473 (* u v v v x x x x k!00) (* (- 2) (* u v v v x x x y k!00)) (* u v v v x x y y k!00) (* u v v v x x y y k!10) (* (- 2) (* v v v v x x x y k!10)) (* v v v v x x y y k!10))))
 (let ((?x84 (* (- 1) k!10)))
 (let ((?x94 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x403 (+ ?x33 ?x34 ?x94 ?x84)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x51 (+ u v)))
 (let (($x288 (or (not (= (* ?x51 ?x51 ?x51 ?x77 ?x77 ?x403 y y u) 0)) (not (= ?x559 0)))))
 (and (= ?x403 0) $x288)))))))))))))))))))) :qid k!29))
 ))
 (let (($x252 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x84 (* (- 1) k!10)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x256 (* ?x238 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x94 (* (- 1) k!00)))
 (let ((?x90 (* ?x51 ?x238 ?x238 (+ ?x94 ?x52 ?x256 ?x84) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x312 (* ?x77 u)))
 (let ((?x72 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x94 ?x312 ?x45 ?x84) y y u)))
 (and (= (+ ?x94 (* x u) (* y v) ?x84) 0) (or (not (= ?x72 0)) (not (= ?x90 0)))))))))))))))) :qid k!29))
 ))
 (let ((?x281 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x473 (* (- 1) (* v v v v v x x y y y))))
 (let ((?x470 (* (- 1) (* u v v v v x x y y y))))
 (let ((?x469 (* (- 1) (* u u v v v x x x y y))))
 (let ((?x502 (* 2 (* v v v v v x x x y y))))
 (let ((?x289 (* u v v v v x x x y y)))
 (let ((?x491 (* 2 (* u u v v v x x x x y))))
 (let ((?x459 (* (- 1) (* v v v v v x x x x y))))
 (let ((?x458 (* (- 1) (* u v v v v x x x x x))))
 (let ((?x457 (* (- 1) (* u u v v v x x x x x))))
 (let ((?x166 (* u v v v v x x x x y)))
 (let ((?x559 (+ (* v v v v x x y y k!00) (* u v v v x x x x k!10) ?x166 ?x457 (* (- 2) (* v v v v x x x y k!00)) (* v v v v x x x x k!00) (* (- 2) (* u v v v x x x y k!10)) (* v v v v x x x x k!10) ?x458 ?x459 ?x491 ?x289 ?x502 ?x469 ?x470 ?x473 (* u v v v x x x x k!00) (* (- 2) (* u v v v x x x y k!00)) (* u v v v x x y y k!00) (* u v v v x x y y k!10) (* (- 2) (* v v v v x x x y k!10)) (* v v v v x x y y k!10))))
 (let ((?x84 (* (- 1) k!10)))
 (let ((?x94 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x403 (+ ?x33 ?x34 ?x94 ?x84)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x51 (+ u v)))
 (let (($x288 (or (not (= (* ?x51 ?x51 ?x51 ?x77 ?x77 ?x403 y y u) 0)) (not (= ?x559 0)))))
 (let (($x566 (and (= ?x403 0) $x288)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x90 (* ?x51 ?x238 ?x238 (+ ?x94 (* ?x51 x) (* ?x238 v) ?x84) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x72 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x94 (* ?x77 u) (* ?x44 y) ?x84) y y u)))
 (let (($x335 (and (= (+ ?x94 (* x u) (* y v) ?x84) 0) (or (not (= ?x72 0)) (not (= ?x90 0))))))
 (rewrite (= $x335 $x566))))))))))))))))))))))))))))
 ))
 (let (($x372 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x256 (* ?x238 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x384 (* ?x51 ?x238 ?x238 (+ ?x71 ?x52 ?x256 ?x87) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x312 (* ?x77 u)))
 (let ((?x165 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x71 ?x312 ?x45 ?x87) y y u)))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x165 0)) (not (= ?x384 0))))))))))))))))) :qid k!29))
 ))
 (let ((?x164 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x84 (* (- 1) k!10)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x256 (* ?x238 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x94 (* (- 1) k!00)))
 (let ((?x90 (* ?x51 ?x238 ?x238 (+ ?x94 ?x52 ?x256 ?x84) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x312 (* ?x77 u)))
 (let ((?x72 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x94 ?x312 ?x45 ?x84) y y u)))
 (let (($x335 (and (= (+ ?x94 (* x u) (* y v) ?x84) 0) (or (not (= ?x72 0)) (not (= ?x90 0))))))
 (let ((?x384 (* ?x51 ?x238 ?x238 (+ (* (- 1) (* u00 x00)) ?x52 ?x256 (* (- 1) (* v00 y00))) x x v v v)))
 (let ((?x165 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ (* (- 1) (* u00 x00)) ?x312 ?x45 (* (- 1) (* v00 y00))) y y u)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x79 (* y v)))
 (let ((?x73 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x132 (and (= (+ ?x71 ?x73 ?x79 ?x87) 0) (or (not (= ?x165 0)) (not (= ?x384 0))))))
 (rewrite (= $x132 $x335))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x51 (+ u v)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) (* ?x51 x) (* v ?x53)) ?x38) ?x29 ?x51 v x x v v ?x53 ?x53)))
 (let ((?x44 (+ v u)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x29 u ?x44 ?x42 ?x42 ?x44 ?x44 y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))))))))) :qid k!29))
 ))
 (let ((?x318 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x256 (* ?x238 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x384 (* ?x51 ?x238 ?x238 (+ ?x71 ?x52 ?x256 ?x87) x x v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x312 (* ?x77 u)))
 (let ((?x165 (* ?x44 ?x44 ?x44 ?x77 ?x77 (+ ?x71 ?x312 ?x45 ?x87) y y u)))
 (let (($x132 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x165 0)) (not (= ?x384 0))))))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 ?x51 v x x v v ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x29 u ?x44 ?x42 ?x42 ?x44 ?x44 y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x132))))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x294 (mp (mp @x63 (quant-intro (proof-bind ?x318) (= $x62 $x372)) $x372) (rewrite (= $x372 $x372)) $x372)))
 (let ((@x354 (mp (mp @x294 (quant-intro (proof-bind ?x164) (= $x372 $x252)) $x252) (quant-intro (proof-bind ?x281) (= $x252 $x287)) $x287)))
 (let ((@x378 (mp (mp~ @x354 (sk (~ $x287 $x302)) $x302) (rewrite (= $x302 $x413)) $x413)))
 (let ((@x193 (and-elim @x378 $x522)))
 (let ((@x181 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x522) $x411)) @x193 $x411)))
 (let (($x258 (<= ?x480 0)))
 (let ((@x362 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x522) $x258)) @x193 $x258)))
 (let (($x474 (not (<= ?x316 0))))
 (let (($x310 (>= ?x408 0)))
 (let (($x405 (<= ?x408 0)))
 (let ((@x207 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x404 (not $x405) (not $x310))) (lemma ((_ th-lemma arith) (hypothesis (not $x405)) @x181 @x362 false) $x405) (lemma ((_ th-lemma arith) (hypothesis (not $x310)) @x181 @x362 false) $x310) $x404)))
 (let (($x260 (>= ?x316 0)))
 (let ((@x355 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x200 $x474 (not $x260))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x260)) @x362 @x181 false) $x260) (unit-resolution (and-elim @x378 $x192) @x207 $x313) $x474)))
 ((_ th-lemma arith farkas 1 1 1) @x355 @x362 @x181 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        4
 :arith-assert-lower        11
 :arith-assert-upper        13
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-fixed-eqs           4
 :arith-gcd-tests           2
 :arith-grobner             4
 :arith-max-min             269
 :arith-nonlinear-horner    17
 :arith-num-rows            5
 :arith-patches             2
 :arith-patches_succ        2
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 40
 :arith-tableau-max-rows    5
 :conflicts                 4
 :decisions                 5
 :del-clause                7
 :eliminated-applications   2
 :final-checks              4
 :max-memory                19.58
 :memory                    19.09
 :mk-bool-var               15
 :mk-clause                 20
 :num-allocs                606934
 :num-checks                1
 :propagations              13
 :rlimit-count              6761
 :time                      0.01
 :total-time                0.03)
