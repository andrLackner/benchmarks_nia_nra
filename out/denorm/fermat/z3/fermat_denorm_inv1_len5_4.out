unsat
((set-logic NIA)
(declare-fun r!2 () Int)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x569 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x751 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) (* (- 1) (* v!0 v!0)) ?x569 (* (- 2) u!1) (* (- 4) r!2))))
 (let (($x408 (>= ?x751 0)))
 (let (($x456 (= ?x751 0)))
 (let ((?x588 (* 4 r!2)))
 (let ((?x141 (* 2 u!1)))
 (let ((?x165 (* (- 1) ?x569)))
 (let ((?x159 (* v!0 v!0)))
 (let ((?x111 (* (- 2) v!0)))
 (let ((?x201 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x125 (* (- 2) u00)))
 (let ((?x109 (* (- 4) r00)))
 (let ((?x156 (+ ?x109 ?x125 ?x41 ?x46 ?x201 ?x111 ?x159 ?x165 ?x141 ?x588)))
 (let ((?x692 (* (- 8) r!2)))
 (let ((?x703 (* 4 u!1)))
 (let ((?x309 (* v!0 r!2 r!2 r!2)))
 (let ((?x271 (* v!0 v!0 u!1)))
 (let ((?x343 (* 2 (* r!2 r!2 r!2))))
 (let ((?x682 (* 12 ?x159)))
 (let ((?x465 (* 8 v!0)))
 (let ((?x170 (* 4 (* v!0 v!0 v!0))))
 (let ((?x209 (+ 1 ?x170 ?x465 ?x682 (* 2 (* v!0 v!0 v!0 r!2)) ?x343 (* (- 3) (* v!0 v!0 r!2 r!2)) ?x271 ?x309 (* (- 12) (* v!0 r!2)) (* (- 1) (* u!1 u!1 u!1 r!2 r!2 r!2)) (* v!0 v!0 v!0 u!1 u!1 u!1) (* (- 6) (* v!0 r!2 r!2)) (* 3 (* v!0 u!1 u!1 u!1 r!2 r!2)) (* 4 (* v!0 u!1)) ?x703 ?x692 (* (- 3) (* v!0 v!0 u!1 u!1 u!1 r!2)))))
 (let ((?x377 (* ?x209 ?x156)))
 (let (($x132 (= ?x377 0)))
 (let (($x607 (not $x132)))
 (let ((?x231 (* 2 ?x159)))
 (let ((?x398 (+ u!1 r!2)))
 (let ((?x709 (+ 2 u!1)))
 (let ((?x392 (+ 1 (* (- 1) (* ?x709 ?x709 ?x709 ?x398 ?x398 ?x398)) ?x231 (* (- 1) (* v!0 v!0 v!0 r!2)) ?x271 ?x309 (* (- 1) (* v!0 v!0 v!0 u!1)) (* 3 (* v!0 u!1 u!1 r!2)) (* v!0 u!1 u!1 u!1) (* 3 (* v!0 u!1 r!2 r!2)))))
 (let ((?x521 (* ?x392 ?x156)))
 (let (($x180 (= ?x521 0)))
 (let (($x645 (or (not $x180) $x607)))
 (let (($x178 (and $x456 $x645)))
 (let ((?x476 (+ ?x588 ?x141 ?x111 ?x109 ?x125 ?x41 ?x165 ?x159 ?x46 ?x201)))
 (let ((?x715 (* r!2 r!2 r!2 v!0)))
 (let ((?x478 (* u!1 v!0 v!0)))
 (let ((?x798 (+ 1 ?x692 ?x703 ?x465 ?x682 ?x478 (* 4 (* u!1 v!0)) ?x715 ?x343 (* (- 6) (* r!2 r!2 v!0)) ?x170 (* (- 3) (* r!2 r!2 v!0 v!0)) (* 2 (* r!2 v!0 v!0 v!0)) (* (- 12) (* r!2 v!0)) (* (- 1) (* r!2 r!2 r!2 u!1 u!1 u!1)) (* 3 (* r!2 r!2 u!1 u!1 u!1 v!0)) (* (- 3) (* r!2 u!1 u!1 u!1 v!0 v!0)) (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x162 (* (- 1) (* ?x709 ?x709 ?x709 (+ r!2 u!1) (+ r!2 u!1) (+ r!2 u!1)))))
 (let ((?x704 (+ 1 ?x231 ?x478 ?x715 ?x162 (* (- 1) (* r!2 v!0 v!0 v!0)) (* u!1 u!1 u!1 v!0) (* 3 (* r!2 u!1 u!1 v!0)) (* 3 (* r!2 r!2 u!1 v!0)) (* (- 1) (* u!1 v!0 v!0 v!0)))))
 (let (($x366 (and (= ?x476 0) (or (not (= (* ?x704 ?x476) 0)) (not (= (* ?x798 ?x476) 0))))))
 (let (($x416 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x201 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x179 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x125 (* (- 2) u00)))
 (let ((?x109 (* (- 4) r00)))
 (let ((?x155 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x207 (+ ?x28 ?x36 ?x155 ?x109 ?x125 ?x41 ?x179 ?x45 ?x46 ?x201)))
 (let ((?x671 (* u u u v v v)))
 (let ((?x708 (* (- 3) (* r u u u v v))))
 (let ((?x705 (* 3 (* r r u u u v))))
 (let ((?x698 (* (- 1) (* r r r u u u))))
 (let ((?x603 (* (- 12) (* r v))))
 (let ((?x446 (* r v v v)))
 (let ((?x596 (* 2 ?x446)))
 (let ((?x473 (* (- 3) (* r r v v))))
 (let ((?x384 (* 2 (* r r r))))
 (let ((?x370 (* r r r v)))
 (let ((?x351 (* 4 (* u v))))
 (let ((?x333 (* u v v)))
 (let ((?x592 (* 12 ?x45)))
 (let ((?x589 (* 8 v)))
 (let ((?x339 (* 4 u)))
 (let ((?x586 (* (- 8) r)))
 (let ((?x707 (+ 1 ?x586 ?x339 ?x589 ?x592 ?x333 ?x351 ?x370 ?x384 (* (- 6) (* r r v)) (* 4 (* v v v)) ?x473 ?x596 ?x603 ?x698 ?x705 ?x708 ?x671)))
 (let ((?x790 (* (- 1) (* u v v v))))
 (let ((?x760 (* 3 (* r r u v))))
 (let ((?x761 (* 3 (* r u u v))))
 (let ((?x725 (* u u u v)))
 (let ((?x580 (* (- 1) ?x446)))
 (let ((?x76 (+ r u)))
 (let ((?x587 (+ 2 u)))
 (let ((?x437 (* (- 1) (* ?x587 ?x587 ?x587 ?x76 ?x76 ?x76))))
 (let ((?x737 (* 2 ?x45)))
 (let (($x395 (= (* (+ 1 ?x737 ?x333 ?x370 ?x437 ?x580 ?x725 ?x761 ?x760 ?x790) ?x207) 0)))
 (let (($x626 (not $x395)))
 (let (($x212 (= ?x207 0)))
 (and $x212 (or $x626 (not (= (* ?x707 ?x207) 0)))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x239 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x201 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x179 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x125 (* (- 2) u00)))
 (let ((?x109 (* (- 4) r00)))
 (let ((?x155 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x207 (+ ?x28 ?x36 ?x155 ?x109 ?x125 ?x41 ?x179 ?x45 ?x46 ?x201)))
 (let ((?x671 (* u u u v v v)))
 (let ((?x708 (* (- 3) (* r u u u v v))))
 (let ((?x705 (* 3 (* r r u u u v))))
 (let ((?x698 (* (- 1) (* r r r u u u))))
 (let ((?x603 (* (- 12) (* r v))))
 (let ((?x446 (* r v v v)))
 (let ((?x596 (* 2 ?x446)))
 (let ((?x473 (* (- 3) (* r r v v))))
 (let ((?x384 (* 2 (* r r r))))
 (let ((?x370 (* r r r v)))
 (let ((?x351 (* 4 (* u v))))
 (let ((?x333 (* u v v)))
 (let ((?x592 (* 12 ?x45)))
 (let ((?x589 (* 8 v)))
 (let ((?x339 (* 4 u)))
 (let ((?x586 (* (- 8) r)))
 (let ((?x647 (+ 1 ?x586 ?x339 ?x589 ?x592 (* 2 (* r (* (- 1) v) r)) (* 2 (* (* (- 1) v) r (* (- 1) v))) (* (- 6) (* r v v)) (* 2 (* (* (- 1) v) (* (- 1) v) r)) (* 2 (* r r (* (- 1) v))) ?x333 ?x351 ?x370 ?x384 (* 6 (* v v v)) ?x473 ?x596 ?x603 (* 2 (* r (* (- 1) v) (* (- 1) v))) (* 2 (* (* (- 1) v) (* (- 1) v) (* (- 1) v))) ?x698 ?x705 ?x708 ?x671 (* 2 (* (* (- 1) v) r r)))))
 (let ((?x790 (* (- 1) (* u v v v))))
 (let ((?x760 (* 3 (* r r u v))))
 (let ((?x761 (* 3 (* r u u v))))
 (let ((?x725 (* u u u v)))
 (let ((?x580 (* (- 1) ?x446)))
 (let ((?x76 (+ r u)))
 (let ((?x587 (+ 2 u)))
 (let ((?x437 (* (- 1) (* ?x587 ?x587 ?x587 ?x76 ?x76 ?x76))))
 (let ((?x737 (* 2 ?x45)))
 (let (($x395 (= (* (+ 1 ?x737 ?x333 ?x370 ?x437 ?x580 ?x725 ?x761 ?x760 ?x790) ?x207) 0)))
 (let (($x626 (not $x395)))
 (let (($x212 (= ?x207 0)))
 (and $x212 (or $x626 (not (= (* ?x647 ?x207) 0)))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x608 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x201 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x179 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x125 (* (- 2) u00)))
 (let ((?x109 (* (- 4) r00)))
 (let ((?x155 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x207 (+ ?x28 ?x36 ?x155 ?x109 ?x125 ?x41 ?x179 ?x45 ?x46 ?x201)))
 (let ((?x671 (* u u u v v v)))
 (let ((?x708 (* (- 3) (* r u u u v v))))
 (let ((?x705 (* 3 (* r r u u u v))))
 (let ((?x698 (* (- 1) (* r r r u u u))))
 (let ((?x603 (* (- 12) (* r v))))
 (let ((?x446 (* r v v v)))
 (let ((?x596 (* 2 ?x446)))
 (let ((?x473 (* (- 3) (* r r v v))))
 (let ((?x384 (* 2 (* r r r))))
 (let ((?x370 (* r r r v)))
 (let ((?x351 (* 4 (* u v))))
 (let ((?x333 (* u v v)))
 (let ((?x592 (* 12 ?x45)))
 (let ((?x589 (* 8 v)))
 (let ((?x339 (* 4 u)))
 (let ((?x586 (* (- 8) r)))
 (let ((?x707 (+ 1 ?x586 ?x339 ?x589 ?x592 ?x333 ?x351 ?x370 ?x384 (* (- 6) (* r r v)) (* 4 (* v v v)) ?x473 ?x596 ?x603 ?x698 ?x705 ?x708 ?x671)))
 (let ((?x790 (* (- 1) (* u v v v))))
 (let ((?x760 (* 3 (* r r u v))))
 (let ((?x761 (* 3 (* r u u v))))
 (let ((?x725 (* u u u v)))
 (let ((?x580 (* (- 1) ?x446)))
 (let ((?x76 (+ r u)))
 (let ((?x587 (+ 2 u)))
 (let ((?x437 (* (- 1) (* ?x587 ?x587 ?x587 ?x76 ?x76 ?x76))))
 (let ((?x737 (* 2 ?x45)))
 (let (($x395 (= (* (+ 1 ?x737 ?x333 ?x370 ?x437 ?x580 ?x725 ?x761 ?x760 ?x790) ?x207) 0)))
 (let (($x626 (not $x395)))
 (let (($x212 (= ?x207 0)))
 (let (($x161 (and $x212 (or $x626 (not (= (* ?x707 ?x207) 0))))))
 (let ((?x647 (+ 1 ?x586 ?x339 ?x589 ?x592 (* 2 (* r (* (- 1) v) r)) (* 2 (* (* (- 1) v) r (* (- 1) v))) (* (- 6) (* r v v)) (* 2 (* (* (- 1) v) (* (- 1) v) r)) (* 2 (* r r (* (- 1) v))) ?x333 ?x351 ?x370 ?x384 (* 6 (* v v v)) ?x473 ?x596 ?x603 (* 2 (* r (* (- 1) v) (* (- 1) v))) (* 2 (* (* (- 1) v) (* (- 1) v) (* (- 1) v))) ?x698 ?x705 ?x708 ?x671 (* 2 (* (* (- 1) v) r r)))))
 (let (($x331 (and $x212 (or $x626 (not (= (* ?x647 ?x207) 0))))))
 (rewrite (= $x331 $x161))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x413 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x201 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x179 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x125 (* (- 2) u00)))
 (let ((?x109 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x570 (+ (- 4) ?x28 (* (- 6) v) ?x109 ?x125 ?x36 ?x41 ?x179 (* (+ 2 v) (+ 2 v)) ?x46 ?x201)))
 (let ((?x417 (* (- 1) v)))
 (let ((?x418 (+ r ?x417)))
 (let ((?x286 (+ 1 (* (+ 2 v) (+ 2 v) u) (* (+ 2 v) ?x418 ?x418 ?x418) (* (- 1) (* (+ 2 v) (+ 2 v) (+ 2 v) ?x418)) (* (- 1) (* ?x418 ?x418 ?x418 u u u)))))
 (let ((?x45 (* v v)))
 (let ((?x155 (* (- 2) v)))
 (let ((?x390 (+ 4 ?x28 (* 6 u) ?x109 ?x125 ?x155 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x201)))
 (let ((?x76 (+ r u)))
 (let ((?x587 (+ 2 u)))
 (let ((?x437 (* (- 1) (* ?x587 ?x587 ?x587 ?x76 ?x76 ?x76))))
 (let ((?x90 (* ?x76 ?x76 ?x76 v)))
 (let ((?x373 (+ 1 (* ?x587 v v) ?x90 (* (- 1) (* ?x76 v v v)) ?x437)))
 (and (= (+ ?x28 ?x109 ?x125 ?x36 ?x155 ?x41 ?x179 ?x45 ?x46 ?x201) 0) (or (not (= (* ?x373 ?x390) 0)) (not (= (* ?x286 ?x570) 0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x248 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x201 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x179 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x125 (* (- 2) u00)))
 (let ((?x109 (* (- 4) r00)))
 (let ((?x155 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x207 (+ ?x28 ?x36 ?x155 ?x109 ?x125 ?x41 ?x179 ?x45 ?x46 ?x201)))
 (let ((?x671 (* u u u v v v)))
 (let ((?x708 (* (- 3) (* r u u u v v))))
 (let ((?x705 (* 3 (* r r u u u v))))
 (let ((?x698 (* (- 1) (* r r r u u u))))
 (let ((?x603 (* (- 12) (* r v))))
 (let ((?x446 (* r v v v)))
 (let ((?x596 (* 2 ?x446)))
 (let ((?x473 (* (- 3) (* r r v v))))
 (let ((?x384 (* 2 (* r r r))))
 (let ((?x370 (* r r r v)))
 (let ((?x351 (* 4 (* u v))))
 (let ((?x333 (* u v v)))
 (let ((?x592 (* 12 ?x45)))
 (let ((?x589 (* 8 v)))
 (let ((?x339 (* 4 u)))
 (let ((?x586 (* (- 8) r)))
 (let ((?x647 (+ 1 ?x586 ?x339 ?x589 ?x592 (* 2 (* r (* (- 1) v) r)) (* 2 (* (* (- 1) v) r (* (- 1) v))) (* (- 6) (* r v v)) (* 2 (* (* (- 1) v) (* (- 1) v) r)) (* 2 (* r r (* (- 1) v))) ?x333 ?x351 ?x370 ?x384 (* 6 (* v v v)) ?x473 ?x596 ?x603 (* 2 (* r (* (- 1) v) (* (- 1) v))) (* 2 (* (* (- 1) v) (* (- 1) v) (* (- 1) v))) ?x698 ?x705 ?x708 ?x671 (* 2 (* (* (- 1) v) r r)))))
 (let ((?x790 (* (- 1) (* u v v v))))
 (let ((?x760 (* 3 (* r r u v))))
 (let ((?x761 (* 3 (* r u u v))))
 (let ((?x725 (* u u u v)))
 (let ((?x580 (* (- 1) ?x446)))
 (let ((?x76 (+ r u)))
 (let ((?x587 (+ 2 u)))
 (let ((?x437 (* (- 1) (* ?x587 ?x587 ?x587 ?x76 ?x76 ?x76))))
 (let ((?x737 (* 2 ?x45)))
 (let (($x395 (= (* (+ 1 ?x737 ?x333 ?x370 ?x437 ?x580 ?x725 ?x761 ?x760 ?x790) ?x207) 0)))
 (let (($x626 (not $x395)))
 (let (($x212 (= ?x207 0)))
 (let (($x331 (and $x212 (or $x626 (not (= (* ?x647 ?x207) 0))))))
 (let ((?x570 (+ (- 4) ?x28 (* (- 6) v) ?x109 ?x125 ?x36 ?x41 ?x179 (* (+ 2 v) (+ 2 v)) ?x46 ?x201)))
 (let ((?x417 (* (- 1) v)))
 (let ((?x418 (+ r ?x417)))
 (let ((?x286 (+ 1 (* (+ 2 v) (+ 2 v) u) (* (+ 2 v) ?x418 ?x418 ?x418) (* (- 1) (* (+ 2 v) (+ 2 v) (+ 2 v) ?x418)) (* (- 1) (* ?x418 ?x418 ?x418 u u u)))))
 (let ((?x390 (+ 4 ?x28 (* 6 u) ?x109 ?x125 ?x155 ?x41 (* (- 1) (* ?x587 ?x587)) ?x45 ?x46 ?x201)))
 (let ((?x90 (* ?x76 ?x76 ?x76 v)))
 (let ((?x373 (+ 1 (* ?x587 v v) ?x90 (* (- 1) (* ?x76 v v v)) ?x437)))
 (let (($x114 (and (= (+ ?x28 ?x109 ?x125 ?x36 ?x155 ?x41 ?x179 ?x45 ?x46 ?x201) 0) (or (not (= (* ?x373 ?x390) 0)) (not (= (* ?x286 ?x570) 0))))))
 (rewrite (= $x114 $x331))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x101 (exists ((r Int) (u Int) (v Int) )(! (let ((?x80 (+ u 2)))
 (let ((?x76 (+ r u)))
 (let ((?x92 (* ?x76 v v v)))
 (let ((?x95 (- (- (+ 1 (* ?x80 v v) (* ?x76 ?x76 ?x76 v)) ?x92) (* ?x76 ?x76 ?x76 ?x80 ?x80 ?x80))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x82 (+ (- (- (* 4 ?x76) (* 4 r00)) (* 2 u00)) (* 2 ?x80))))
 (let ((?x96 (* (- (+ (- (+ (- ?x82 ?x38) ?x41) (* ?x80 ?x80)) ?x45 ?x46) ?x48) ?x95)))
 (let ((?x68 (+ 1 (* u (+ v 2) (+ v 2)) (* (- r v) (- r v) (- r v) (+ v 2)))))
 (let ((?x71 (- ?x68 (* (- r v) (+ v 2) (+ v 2) (+ v 2)))))
 (let ((?x72 (- ?x71 (* (- r v) (- r v) (- r v) u u u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= (* (- ?x63 ?x48) ?x72) 0)) (not (= ?x96 0))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x283 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x201 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x179 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x125 (* (- 2) u00)))
 (let ((?x109 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x570 (+ (- 4) ?x28 (* (- 6) v) ?x109 ?x125 ?x36 ?x41 ?x179 (* (+ 2 v) (+ 2 v)) ?x46 ?x201)))
 (let ((?x417 (* (- 1) v)))
 (let ((?x418 (+ r ?x417)))
 (let ((?x286 (+ 1 (* (+ 2 v) (+ 2 v) u) (* (+ 2 v) ?x418 ?x418 ?x418) (* (- 1) (* (+ 2 v) (+ 2 v) (+ 2 v) ?x418)) (* (- 1) (* ?x418 ?x418 ?x418 u u u)))))
 (let ((?x45 (* v v)))
 (let ((?x155 (* (- 2) v)))
 (let ((?x390 (+ 4 ?x28 (* 6 u) ?x109 ?x125 ?x155 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x201)))
 (let ((?x76 (+ r u)))
 (let ((?x587 (+ 2 u)))
 (let ((?x437 (* (- 1) (* ?x587 ?x587 ?x587 ?x76 ?x76 ?x76))))
 (let ((?x90 (* ?x76 ?x76 ?x76 v)))
 (let ((?x373 (+ 1 (* ?x587 v v) ?x90 (* (- 1) (* ?x76 v v v)) ?x437)))
 (let (($x114 (and (= (+ ?x28 ?x109 ?x125 ?x36 ?x155 ?x41 ?x179 ?x45 ?x46 ?x201) 0) (or (not (= (* ?x373 ?x390) 0)) (not (= (* ?x286 ?x570) 0))))))
 (let ((?x92 (* ?x76 v v v)))
 (let ((?x95 (- (- (+ 1 (* (+ u 2) v v) ?x90) ?x92) (* ?x76 ?x76 ?x76 (+ u 2) (+ u 2) (+ u 2)))))
 (let ((?x38 (* 2 v)))
 (let ((?x82 (+ (- (- (* 4 ?x76) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x87 (+ (- (+ (- ?x82 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x68 (+ 1 (* u (+ v 2) (+ v 2)) (* (- r v) (- r v) (- r v) (+ v 2)))))
 (let ((?x71 (- ?x68 (* (- r v) (+ v 2) (+ v 2) (+ v 2)))))
 (let ((?x72 (- ?x71 (* (- r v) (- r v) (- r v) u u u))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x99 (or (not (= (* (- ?x63 ?x48) ?x72) 0)) (not (= (* (- ?x87 ?x48) ?x95) 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x100 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x99)))
 (rewrite (= $x100 $x114)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x102 (asserted $x101)))
 (let ((@x602 (mp (mp @x102 (quant-intro (proof-bind ?x283) (= $x101 $x413)) $x413) (rewrite (= $x413 $x413)) $x413)))
 (let ((@x467 (mp (mp @x602 (quant-intro (proof-bind ?x248) (= $x413 $x239)) $x239) (quant-intro (proof-bind ?x608) (= $x239 $x416)) $x416)))
 (let ((@x194 (mp (mp~ @x467 (sk (~ $x416 $x366)) $x366) (rewrite (= $x366 $x178)) $x178)))
 (let ((@x591 (and-elim @x194 $x456)))
 (let ((@x471 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x408)) @x591 $x408)))
 (let (($x367 (<= ?x751 0)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x367)) @x591 $x367)))
 (let (($x290 (not (<= ?x377 0))))
 (let (($x410 (>= ?x377 0)))
 (let (($x577 (>= ?x521 0)))
 (let (($x414 (<= ?x521 0)))
 (let ((@x668 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x180 (not $x414) (not $x577))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x414)) @x104 @x471 false) $x414) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x577)) @x104 @x471 false) $x577) $x180)))
 (let ((@x778 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x132 $x290 (not $x410))) (unit-resolution (and-elim @x194 $x645) @x668 $x607) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x410)) @x104 @x471 false) $x410) $x290)))
 ((_ th-lemma arith farkas 1 1 1) @x778 @x104 @x471 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        37
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             264
 :arith-nonlinear-bounds    20
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.66
 :memory                    3.17
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1154383
 :num-checks                1
 :propagations              14
 :rlimit-count              4613
 :time                      0.01
 :total-time                0.01)
