unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x124 (* (- 3) n!0)))
 (let ((?x120 (* (- 3) (* n!0 n!0))))
 (let ((?x266 (+ k!2 ?x120 ?x124)))
 (let (($x224 (<= ?x266 1)))
 (let (($x286 (= ?x266 1)))
 (let ((?x310 (+ k!2 c!3)))
 (let ((?x796 (+ k!2 m!1)))
 (let ((?x235 (+ 6 m!1)))
 (let ((?x805 (+ 1 n!0)))
 (let ((?x176 (* 9 (* ?x805 ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x310 ?x310 ?x310))))
 (let ((?x334 (* (- 1) (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x796 ?x310 ?x310))))
 (let ((?x113 (+ (* 9 (* ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x310)) (* (- 9) (* ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x310 ?x310)) (* 4 (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x310)) (* (- 5) (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x310)) (* (- 4) (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x310 ?x310)) (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x796 ?x310) ?x334 (* (- 18) (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x310 ?x310)) (* (- 9) (* ?x805 ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x310 ?x310)) (* 5 (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x310 ?x310)) (* 18 (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x310 ?x310 ?x310)) ?x176)))
 (let (($x222 (= ?x113 0)))
 (let (($x423 (not $x222)))
 (let ((?x300 (* (- 2) n!0)))
 (let ((?x806 (* (- 1) (* k!2 n!0))))
 (let ((?x730 (* 3 c!3)))
 (let ((?x305 (+ k!2 ?x730 ?x806 ?x300)))
 (let (($x251 (= ?x305 1)))
 (let ((?x514 (* (- 9) n!0)))
 (let ((?x733 (* 18 c!3)))
 (let ((?x529 (* (- 1) (* k!2 k!2))))
 (let ((?x810 (* 5 k!2)))
 (let ((?x809 (* 9 (* c!3 n!0))))
 (let ((?x275 (+ ?x809 ?x810 ?x529 ?x733 ?x514)))
 (let (($x299 (= ?x275 4)))
 (let ((?x292 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x311 (= ?x292 (- 6))))
 (let (($x214 (and $x311 $x299 $x251 $x286 $x423)))
 (let ((?x123 (+ c!3 k!2)))
 (let ((?x715 (* (- 1) (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x796 ?x123 ?x123))))
 (let ((?x164 (* 9 (* ?x805 ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x123 ?x123 ?x123))))
 (let ((?x719 (+ (* 9 (* ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x123)) (* (- 4) (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x123 ?x123)) (* (- 9) (* ?x805 ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x123 ?x123)) (* (- 5) (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x123)) (* 4 (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x123)) ?x164 (* (- 9) (* ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x123 ?x123)) (* (- 18) (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x123 ?x123)) (* 5 (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x123 ?x123)) (* 18 (* ?x805 ?x805 ?x805 ?x235 ?x235 ?x796 ?x796 ?x123 ?x123 ?x123)) ?x715 (* ?x805 ?x235 ?x235 ?x796 ?x796 ?x796 ?x796 ?x123))))
 (let (($x325 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x733 ?x810 ?x514 ?x529 ?x809) 4) (= (+ ?x730 k!2 ?x300 ?x806) 1) (= (+ k!2 ?x124 ?x120) 1) (not (= ?x719 0)))))
 (let (($x303 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x741 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x695 (* (- 1) ?x741)))
 (let ((?x726 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x724 (* 18 ?x726)))
 (let ((?x672 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x681 (* 5 ?x672)))
 (let ((?x665 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x536 (* (- 18) ?x665)))
 (let ((?x653 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x555 (* (- 9) ?x653)))
 (let ((?x635 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x613 (* 9 ?x635)))
 (let ((?x530 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x327 (* 4 ?x530)))
 (let ((?x419 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x345 (* (- 5) ?x419)))
 (let ((?x190 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x221 (* (- 9) ?x190)))
 (let ((?x167 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x180 (* (- 4) ?x167)))
 (let ((?x108 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x109 (* 9 ?x108)))
 (let (($x257 (= (+ ?x109 ?x180 ?x221 ?x345 ?x327 ?x613 ?x555 ?x536 ?x681 ?x724 ?x695 ?x763) 0)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x216 (= (+ ?x40 ?x44 ?x218 ?x219 (* 9 (* c n))) 4)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 $x216 $x268 $x306 (not $x257))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x285 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x741 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x635 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x262 (+ (* 4 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* 9 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* (- 9) (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)) (* 5 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69)) (* (- 4) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)) (* 9 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* (- 9) ?x635) (* (- 18) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)) ?x741 (* (- 5) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69)) (* 18 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* (- 1) ?x763))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x198 $x145 (not (= ?x262 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x276 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x741 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x695 (* (- 1) ?x741)))
 (let ((?x726 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x724 (* 18 ?x726)))
 (let ((?x672 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x681 (* 5 ?x672)))
 (let ((?x665 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x536 (* (- 18) ?x665)))
 (let ((?x653 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x555 (* (- 9) ?x653)))
 (let ((?x635 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x613 (* 9 ?x635)))
 (let ((?x530 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x327 (* 4 ?x530)))
 (let ((?x419 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x345 (* (- 5) ?x419)))
 (let ((?x190 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x221 (* (- 9) ?x190)))
 (let ((?x167 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x180 (* (- 4) ?x167)))
 (let ((?x108 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x109 (* 9 ?x108)))
 (let (($x257 (= (+ ?x109 ?x180 ?x221 ?x345 ?x327 ?x613 ?x555 ?x536 ?x681 ?x724 ?x695 ?x763) 0)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x216 (= (+ ?x40 ?x44 ?x218 ?x219 (* 9 (* c n))) 4)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x313 (and $x132 $x216 $x268 $x306 (not $x257))))
 (let ((?x262 (+ (* 4 ?x167) (* 9 ?x190) (* (- 9) ?x108) (* 5 ?x419) (* (- 4) ?x530) (* 9 ?x653) (* (- 9) ?x635) (* (- 18) ?x726) ?x741 (* (- 5) ?x672) (* 18 ?x665) (* (- 1) ?x763))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x159 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x198 $x145 (not (= ?x262 0)))))
 (rewrite (= $x159 $x313)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x158 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x665 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x536 (* (- 18) ?x665)))
 (let ((?x672 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x681 (* 5 ?x672)))
 (let ((?x741 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x695 (* (- 1) ?x741)))
 (let ((?x726 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x724 (* 18 ?x726)))
 (let ((?x635 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x613 (* 9 ?x635)))
 (let ((?x653 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x555 (* (- 9) ?x653)))
 (let ((?x530 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x327 (* 4 ?x530)))
 (let ((?x419 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x345 (* (- 5) ?x419)))
 (let ((?x108 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x109 (* 9 ?x108)))
 (let ((?x190 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x221 (* (- 9) ?x190)))
 (let ((?x167 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x180 (* (- 4) ?x167)))
 (let (($x776 (= (+ ?x180 ?x221 ?x109 ?x345 ?x327 ?x555 ?x613 ?x724 ?x695 ?x681 ?x536 ?x763) 0)))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x484 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 (= ?x484 (- 4)) $x239 $x145 (not $x776)))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x625 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x741 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x635 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x262 (+ (* 4 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* 9 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* (- 9) (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)) (* 5 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69)) (* (- 4) (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)) (* 9 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* (- 9) ?x635) (* (- 18) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)) ?x741 (* (- 5) (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69)) (* 18 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)) (* (- 1) ?x763))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x198 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x159 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x198 $x145 (not (= ?x262 0)))))
 (let ((?x665 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x536 (* (- 18) ?x665)))
 (let ((?x672 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x681 (* 5 ?x672)))
 (let ((?x695 (* (- 1) ?x741)))
 (let ((?x726 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x724 (* 18 ?x726)))
 (let ((?x613 (* 9 ?x635)))
 (let ((?x653 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x555 (* (- 9) ?x653)))
 (let ((?x530 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x327 (* 4 ?x530)))
 (let ((?x419 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x345 (* (- 5) ?x419)))
 (let ((?x108 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x109 (* 9 ?x108)))
 (let ((?x190 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x221 (* (- 9) ?x190)))
 (let ((?x167 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x180 (* (- 4) ?x167)))
 (let (($x776 (= (+ ?x180 ?x221 ?x109 ?x345 ?x327 ?x555 ?x613 ?x724 ?x695 ?x681 ?x536 ?x763) 0)))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x484 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x187 (and $x132 (= ?x484 (- 4)) $x239 $x145 (not $x776))))
 (rewrite (= $x187 $x159)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x99 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x75 (- (* (- 4) ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x79 (- (+ ?x75 (* 9 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72)) (* 5 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x83 (- (+ ?x79 (* 4 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x86 (+ ?x83 (* 9 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72) (* 18 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x88 (- ?x86 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x90 (+ ?x88 (* 5 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x94 (+ (- ?x90 (* 18 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x94 0)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x166 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x317 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x763 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x665 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x536 (* (- 18) ?x665)))
 (let ((?x672 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x681 (* 5 ?x672)))
 (let ((?x741 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x695 (* (- 1) ?x741)))
 (let ((?x726 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x724 (* 18 ?x726)))
 (let ((?x635 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x613 (* 9 ?x635)))
 (let ((?x653 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x555 (* (- 9) ?x653)))
 (let ((?x530 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x327 (* 4 ?x530)))
 (let ((?x419 (* ?x320 ?x317 ?x317 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x345 (* (- 5) ?x419)))
 (let ((?x108 (* ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69)))
 (let ((?x109 (* 9 ?x108)))
 (let ((?x190 (* ?x320 ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x221 (* (- 9) ?x190)))
 (let ((?x167 (* ?x320 ?x320 ?x320 ?x317 ?x317 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x180 (* (- 4) ?x167)))
 (let (($x776 (= (+ ?x180 ?x221 ?x109 ?x345 ?x327 ?x555 ?x613 ?x724 ?x695 ?x681 ?x536 ?x763) 0)))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x239 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x484 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x187 (and $x132 (= ?x484 (- 4)) $x239 $x145 (not $x776))))
 (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x75 (- (* (- 4) ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x79 (- (+ ?x75 (* 9 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72)) (* 5 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x83 (- (+ ?x79 (* 4 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* 9 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x86 (+ ?x83 (* 9 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72) (* 18 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x88 (- ?x86 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x90 (+ ?x88 (* 5 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x94 (+ (- ?x90 (* 18 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x98 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x94 0))))))
 (rewrite (= $x98 $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x678 (mp (mp @x100 (quant-intro (proof-bind ?x166) (= $x99 $x158)) $x158) (rewrite (= $x158 $x158)) $x158)))
 (let ((@x170 (mp (mp @x678 (quant-intro (proof-bind ?x625) (= $x158 $x285)) $x285) (quant-intro (proof-bind ?x276) (= $x285 $x303)) $x303)))
 (let ((@x332 (mp (mp~ @x170 (sk (~ $x303 $x325)) $x325) (rewrite (= $x325 $x214)) $x214)))
 (let ((@x139 (and-elim @x332 $x286)))
 (let ((@x230 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x286) $x224)) @x139 $x224)))
 (let (($x355 (>= ?x266 1)))
 (let ((@x696 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x286) $x355)) @x139 $x355)))
 (let (($x178 (<= ?x292 (- 6))))
 (let ((@x202 (and-elim @x332 $x311)))
 (let ((@x252 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x311) $x178)) @x202 $x178)))
 (let (($x205 (>= ?x292 (- 6))))
 (let ((@x296 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x311) $x205)) @x202 $x205)))
 (let (($x480 (<= ?x275 4)))
 (let ((@x260 (and-elim @x332 $x299)))
 (let ((@x474 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x480)) @x260 $x480)))
 (let (($x206 (>= ?x275 4)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x206)) @x260 $x206)))
 (let (($x543 (<= ?x305 1)))
 (let ((@x287 (and-elim @x332 $x251)))
 (let ((@x149 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x251) $x543)) @x287 $x543)))
 (let (($x130 (>= ?x305 1)))
 (let ((@x562 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x251) $x130)) @x287 $x130)))
 (let (($x359 (not (<= ?x113 0))))
 (let (($x240 (>= ?x113 0)))
 (let ((@x623 ((_ th-lemma arith) (hypothesis (not $x240)) @x696 @x230 @x562 @x149 @x696 @x230 @x296 @x252 @x696 @x230 @x114 @x474 @x696 @x230 @x296 @x252 @x696 @x230 false)))
 (let ((@x343 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x222 $x359 (not $x240))) (and-elim @x332 $x423) (or $x359 (not $x240)))))
 ((_ th-lemma arith) (unit-resolution @x343 (lemma @x623 $x240) $x359) @x696 @x230 @x562 @x149 @x696 @x230 @x296 @x252 @x696 @x230 @x114 @x474 @x696 @x230 @x296 @x252 @x696 @x230 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           1
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             221
 :arith-nonlinear-bounds    9
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             1
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.67
 :memory                    3.18
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1731306
 :num-checks                1
 :propagations              11
 :rlimit-count              13753
 :time                      0.02
 :total-time                0.03)
