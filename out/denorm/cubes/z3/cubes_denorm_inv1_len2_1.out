unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x154 (* (- 6) n!0)))
 (let ((?x219 (+ m!1 ?x154)))
 (let (($x190 (<= ?x219 6)))
 (let (($x296 (= ?x219 6)))
 (let ((?x347 (+ (- 6) m!1 ?x154)))
 (let ((?x349 (* m!1 m!1 n!0)))
 (let ((?x230 (+ k!2 c!3)))
 (let ((?x144 (+ 6 m!1)))
 (let ((?x259 (+ 1 n!0)))
 (let ((?x143 (* 6 (* m!1 n!0))))
 (let ((?x180 (* m!1 m!1)))
 (let ((?x151 (* 6 k!2)))
 (let ((?x150 (* 6 m!1)))
 (let ((?x214 (+ ?x150 ?x151 (* 6 (* n!0 k!2)) ?x180 ?x143 (* ?x259 ?x259 ?x144 ?x144 ?x230 ?x230 ?x230) (* m!1 k!2) ?x349 (* m!1 n!0 k!2))))
 (let ((?x202 (* ?x214 ?x347)))
 (let (($x229 (= ?x202 0)))
 (let (($x200 (not $x229)))
 (let (($x303 (= (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2)) (- 1))))
 (let (($x419 (= (+ (* 2 n!0) (* (- 1) k!2) (* n!0 k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x428 (* k!2 k!2)))
 (let ((?x276 (+ (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3) ?x428)))
 (let (($x232 (and $x296 (= ?x276 (- 4)) $x419 $x303 $x200)))
 (let ((?x256 (+ c!3 k!2)))
 (let ((?x162 (+ ?x151 ?x150 (* 6 (* k!2 n!0)) (* ?x259 ?x259 ?x144 ?x144 ?x256 ?x256 ?x256) ?x143 ?x180 (* k!2 m!1) ?x349 (* k!2 m!1 n!0))))
 (let (($x134 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x127 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x428) (* 9 (* c!3 n!0)))))
 (let (($x110 (and $x296 (= ?x127 4) $x134 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x162 ?x347) 0)))))
 (let (($x416 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x425 (* k m n)))
 (let ((?x424 (* m m n)))
 (let ((?x412 (* k m)))
 (let ((?x409 (* m m)))
 (let ((?x402 (* 6 (* m n))))
 (let ((?x72 (+ c k)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x310 (* ?x314 ?x314 ?x358 ?x358 ?x72 ?x72 ?x72)))
 (let ((?x55 (* k n)))
 (let ((?x406 (* 6 ?x55)))
 (let ((?x415 (* 6 m)))
 (let ((?x418 (* 6 k)))
 (let (($x137 (= (* (+ ?x418 ?x415 ?x406 ?x310 ?x402 ?x409 ?x412 ?x424 ?x425) ?x114) 0)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 $x209 $x261 $x299 (not $x137))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x385 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x310 (* ?x314 ?x314 ?x358 ?x358 ?x72 ?x72 ?x72)))
 (let (($x160 (not (= (* (+ ?x310 (* ?x314 ?x358 (+ k m))) ?x114) 0))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x96 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x96 $x153 $x160)))))))))))))))) :qid k!34))
 ))
 (let ((?x407 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x425 (* k m n)))
 (let ((?x424 (* m m n)))
 (let ((?x412 (* k m)))
 (let ((?x409 (* m m)))
 (let ((?x402 (* 6 (* m n))))
 (let ((?x72 (+ c k)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x310 (* ?x314 ?x314 ?x358 ?x358 ?x72 ?x72 ?x72)))
 (let ((?x55 (* k n)))
 (let ((?x406 (* 6 ?x55)))
 (let ((?x415 (* 6 m)))
 (let ((?x418 (* 6 k)))
 (let (($x137 (= (* (+ ?x418 ?x415 ?x406 ?x310 ?x402 ?x409 ?x412 ?x424 ?x425) ?x114) 0)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x138 (and $x125 $x209 $x261 $x299 (not $x137))))
 (let (($x160 (not (= (* (+ ?x310 (* ?x314 ?x358 (+ k m))) ?x114) 0))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x96 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x105 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x96 $x153 $x160)))
 (rewrite (= $x105 $x138)))))))))))))))))))))))))))))))))
 ))
 (let (($x173 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x310 (* ?x314 ?x314 ?x358 ?x358 ?x72 ?x72 ?x72)))
 (let (($x160 (not (= (* (+ ?x310 (* ?x314 ?x358 (+ k m))) ?x114) 0))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x242 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x87 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m ?x108) 6)))
 (and $x125 (= ?x87 (- 4)) $x242 $x153 $x160)))))))))))))) :qid k!34))
 ))
 (let ((?x142 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x310 (* ?x314 ?x314 ?x358 ?x358 ?x72 ?x72 ?x72)))
 (let (($x160 (not (= (* (+ ?x310 (* ?x314 ?x358 (+ k m))) ?x114) 0))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x96 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x105 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x96 $x153 $x160)))
 (let (($x242 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x87 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x196 (and $x125 (= ?x87 (- 4)) $x242 $x153 $x160)))
 (rewrite (= $x196 $x105)))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x72 (+ c k)))
 (let ((?x77 (+ (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x69) (* (+ k m) ?x73 ?x69))))
 (let (($x79 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x79))))))))))))))) :qid k!34))
 ))
 (let ((?x175 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x108 (* (- 6) n)))
 (let ((?x114 (+ (- 6) m ?x108)))
 (let ((?x72 (+ c k)))
 (let ((?x358 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x310 (* ?x314 ?x314 ?x358 ?x358 ?x72 ?x72 ?x72)))
 (let (($x160 (not (= (* (+ ?x310 (* ?x314 ?x358 (+ k m))) ?x114) 0))))
 (let (($x153 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x242 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x87 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m ?x108) 6)))
 (let (($x196 (and $x125 (= ?x87 (- 4)) $x242 $x153 $x160)))
 (let ((?x69 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x77 (+ (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x69) (* (+ k m) ?x73 ?x69))))
 (let (($x79 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x79)))))
 (rewrite (= $x82 $x196)))))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x104 (mp (mp @x84 (quant-intro (proof-bind ?x175) (= $x83 $x173)) $x173) (rewrite (= $x173 $x173)) $x173)))
 (let ((@x252 (mp (mp @x104 (quant-intro (proof-bind ?x142) (= $x173 $x385)) $x385) (quant-intro (proof-bind ?x407) (= $x385 $x416)) $x416)))
 (let ((@x89 (mp (mp~ @x252 (sk (~ $x416 $x110)) $x110) (rewrite (= $x110 $x232)) $x232)))
 (let ((@x332 (and-elim @x89 $x296)))
 (let ((@x329 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x296) $x190)) @x332 $x190)))
 (let (($x360 (>= ?x219 6)))
 (let ((@x178 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x296) $x360)) @x332 $x360)))
 (let (($x353 (not (<= ?x202 0))))
 (let (($x352 (>= ?x202 0)))
 (let ((@x208 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x229 $x353 (not $x352))) (and-elim @x89 $x200) (or $x353 (not $x352)))))
 (let ((@x97 (unit-resolution @x208 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x352)) @x178 @x329 false) $x352) $x353)))
 ((_ th-lemma arith farkas 1 1 1) @x97 @x178 @x329 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             114
 :arith-nonlinear-bounds    6
 :arith-num-rows            9
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      8
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.57
 :memory                    3.06
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1108780
 :num-checks                1
 :propagations              11
 :rlimit-count              2340
 :time                      0.01
 :total-time                0.01)
