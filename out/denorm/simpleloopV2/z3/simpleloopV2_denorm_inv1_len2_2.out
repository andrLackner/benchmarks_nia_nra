unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x287 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x317 (>= ?x287 0)))
 (let (($x273 (= ?x287 0)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x423 (+ ?x61 ?x68 y!0 x!1)))
 (let ((?x499 (* y!0 y!0)))
 (let ((?x445 (* 3 ?x499)))
 (let ((?x495 (* y!0 y!0 y!0 x!1 x!1)))
 (let ((?x99 (* (- 6) (* y!0 y!0 x!1))))
 (let ((?x128 (* (- 4) x!1)))
 (let ((?x479 (* 4 y!0)))
 (let ((?x266 (* x!1 x!1)))
 (let ((?x94 (* 2 ?x266)))
 (let ((?x362 (* 4 (* y!0 x!1 x!1))))
 (let ((?x91 (* y!0 y!0 y!0)))
 (let ((?x389 (+ 2 ?x91 (* (- 2) (* y!0 y!0 y!0 x!1)) (* (- 8) (* y!0 x!1)) ?x362 ?x94 ?x479 ?x128 (* 3 (* y!0 y!0 x!1 x!1)) ?x99 ?x495 ?x445)))
 (let ((?x271 (* ?x389 ?x423)))
 (let (($x441 (= ?x271 0)))
 (let (($x270 (not $x441)))
 (let ((?x497 (* (- 3) ?x499)))
 (let ((?x335 (* (- 2) ?x266)))
 (let ((?x105 (+ (- 2) ?x91 (* 2 (* y!0 y!0 y!0 x!1)) (* 8 (* y!0 x!1)) ?x362 ?x335 ?x479 ?x128 (* (- 3) (* y!0 y!0 x!1 x!1)) ?x99 ?x495 ?x497)))
 (let ((?x170 (* ?x105 ?x423)))
 (let (($x496 (= ?x170 0)))
 (let (($x333 (or (not $x496) $x270)))
 (let (($x366 (and $x273 $x333)))
 (let ((?x301 (+ x!1 y!0 ?x61 ?x68)))
 (let ((?x97 (* (- 6) (* x!1 y!0 y!0))))
 (let ((?x278 (* 4 (* x!1 x!1 y!0))))
 (let ((?x413 (* x!1 x!1 y!0 y!0 y!0)))
 (let ((?x136 (+ 2 ?x128 ?x479 ?x445 ?x91 (* (- 2) (* x!1 y!0 y!0 y!0)) ?x413 ?x94 (* (- 8) (* x!1 y!0)) ?x278 ?x97 (* 3 (* x!1 x!1 y!0 y!0)))))
 (let ((?x299 (+ (- 2) ?x128 ?x479 ?x497 ?x91 (* 2 (* x!1 y!0 y!0 y!0)) ?x413 ?x335 (* 8 (* x!1 y!0)) ?x278 ?x97 (* (- 3) (* x!1 x!1 y!0 y!0)))))
 (let (($x117 (and (= ?x301 0) (or (not (= (* ?x299 ?x301) 0)) (not (= (* ?x136 ?x301) 0))))))
 (let (($x415 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x217 (* x x y y)))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x213 (* x y y)))
 (let ((?x418 (* (- 6) ?x213)))
 (let ((?x202 (* x x y)))
 (let ((?x309 (* 4 ?x202)))
 (let ((?x193 (* x x)))
 (let ((?x306 (* 2 ?x193)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x169 (* y y)))
 (let ((?x250 (* 3 ?x169)))
 (let ((?x305 (* 4 y)))
 (let ((?x468 (* (- 4) x)))
 (let ((?x85 (+ 2 ?x468 ?x305 ?x250 ?x176 ?x254 ?x182 ?x306 (* (- 8) (* x y)) ?x309 ?x418 ?x252)))
 (let ((?x419 (* (- 3) ?x217)))
 (let ((?x198 (* x y)))
 (let ((?x471 (* 8 ?x198)))
 (let ((?x469 (* (- 2) ?x193)))
 (let ((?x420 (* 2 ?x180)))
 (let ((?x416 (* (- 3) ?x169)))
 (let ((?x356 (* (+ (- 2) ?x468 ?x305 ?x416 ?x176 ?x420 ?x182 ?x469 ?x471 ?x309 ?x418 ?x419) ?x82)))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or (not (= ?x356 0)) (not (= (* ?x85 ?x82) 0)))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x81 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x268 (* (- 1) (* x 1))))
 (let ((?x217 (* x x y y)))
 (let ((?x419 (* (- 3) ?x217)))
 (let ((?x193 (* x x)))
 (let ((?x469 (* (- 2) ?x193)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x420 (* 2 ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x246 (* 3 y)))
 (let ((?x487 (+ (- 2) (* (- 3) x) ?x246 (* (- 1) (* y y x 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y (- 1) x x)) (* (- 2) (* y y)) ?x176 ?x420 ?x182 ?x469 (* 6 (* x y)) (* 3 (* x x y)) (* (- 4) (* x y y)) ?x419 ?x268 (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) 1 1)))))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x202 (* x x y)))
 (let ((?x309 (* 4 ?x202)))
 (let ((?x306 (* 2 ?x193)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x169 (* y y)))
 (let ((?x250 (* 3 ?x169)))
 (let ((?x305 (* 4 y)))
 (let ((?x310 (+ 2 (* (- 2) x) ?x305 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x250 (* (- 1) (* x 1 y y)) ?x176 ?x254 ?x182 ?x306 (* (- 5) (* x y)) ?x309 (* (- 3) (* x y y)) ?x252 ?x268)))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or (not (= (* ?x310 ?x82) 0)) (not (= (* ?x487 ?x82) 0)))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x279 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x217 (* x x y y)))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x213 (* x y y)))
 (let ((?x418 (* (- 6) ?x213)))
 (let ((?x202 (* x x y)))
 (let ((?x309 (* 4 ?x202)))
 (let ((?x193 (* x x)))
 (let ((?x306 (* 2 ?x193)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x169 (* y y)))
 (let ((?x250 (* 3 ?x169)))
 (let ((?x305 (* 4 y)))
 (let ((?x468 (* (- 4) x)))
 (let ((?x85 (+ 2 ?x468 ?x305 ?x250 ?x176 ?x254 ?x182 ?x306 (* (- 8) (* x y)) ?x309 ?x418 ?x252)))
 (let ((?x419 (* (- 3) ?x217)))
 (let ((?x198 (* x y)))
 (let ((?x471 (* 8 ?x198)))
 (let ((?x469 (* (- 2) ?x193)))
 (let ((?x420 (* 2 ?x180)))
 (let ((?x416 (* (- 3) ?x169)))
 (let ((?x356 (* (+ (- 2) ?x468 ?x305 ?x416 ?x176 ?x420 ?x182 ?x469 ?x471 ?x309 ?x418 ?x419) ?x82)))
 (let (($x87 (= ?x82 0)))
 (let (($x367 (and $x87 (or (not (= ?x356 0)) (not (= (* ?x85 ?x82) 0))))))
 (let ((?x268 (* (- 1) (* x 1))))
 (let ((?x246 (* 3 y)))
 (let ((?x487 (+ (- 2) (* (- 3) x) ?x246 (* (- 1) (* y y x 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y (- 1) x x)) (* (- 2) ?x169) ?x176 ?x420 ?x182 ?x469 (* 6 ?x198) (* 3 ?x202) (* (- 4) ?x213) ?x419 ?x268 (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) 1 1)))))
 (let ((?x310 (+ 2 (* (- 2) x) ?x305 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x250 (* (- 1) (* x 1 y y)) ?x176 ?x254 ?x182 ?x306 (* (- 5) ?x198) ?x309 (* (- 3) ?x213) ?x252 ?x268)))
 (let (($x492 (and $x87 (or (not (= (* ?x310 ?x82) 0)) (not (= (* ?x487 ?x82) 0))))))
 (rewrite (= $x492 $x367)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x113 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x108 (+ x ?x61 ?x68 y)))
 (let ((?x370 (+ 1 x)))
 (let ((?x323 (+ (- 1) y)))
 (let (($x381 (= (* (+ (* ?x323 ?x323 ?x323 ?x370 ?x370) (* ?x323 ?x370 ?x370)) ?x108) 0)))
 (let ((?x332 (+ 1 y)))
 (let ((?x102 (+ (- 1) x)))
 (let (($x369 (= (* (+ (* ?x102 ?x102 ?x332 ?x332 ?x332) (* ?x102 ?x102 ?x332)) ?x108) 0)))
 (and (= ?x108 0) (or (not $x369) (not $x381)))))))))))) :qid k!27))
 ))
 (let ((?x249 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x268 (* (- 1) (* x 1))))
 (let ((?x217 (* x x y y)))
 (let ((?x419 (* (- 3) ?x217)))
 (let ((?x193 (* x x)))
 (let ((?x469 (* (- 2) ?x193)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x420 (* 2 ?x180)))
 (let ((?x176 (* y y y)))
 (let ((?x246 (* 3 y)))
 (let ((?x487 (+ (- 2) (* (- 3) x) ?x246 (* (- 1) (* y y x 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y (- 1) x x)) (* (- 2) (* y y)) ?x176 ?x420 ?x182 ?x469 (* 6 (* x y)) (* 3 (* x x y)) (* (- 4) (* x y y)) ?x419 ?x268 (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) 1 1)))))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x202 (* x x y)))
 (let ((?x309 (* 4 ?x202)))
 (let ((?x306 (* 2 ?x193)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x169 (* y y)))
 (let ((?x250 (* 3 ?x169)))
 (let ((?x305 (* 4 y)))
 (let ((?x310 (+ 2 (* (- 2) x) ?x305 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x250 (* (- 1) (* x 1 y y)) ?x176 ?x254 ?x182 ?x306 (* (- 5) (* x y)) ?x309 (* (- 3) (* x y y)) ?x252 ?x268)))
 (let (($x87 (= ?x82 0)))
 (let (($x492 (and $x87 (or (not (= (* ?x310 ?x82) 0)) (not (= (* ?x487 ?x82) 0))))))
 (let ((?x108 (+ x ?x61 ?x68 y)))
 (let ((?x370 (+ 1 x)))
 (let ((?x323 (+ (- 1) y)))
 (let (($x381 (= (* (+ (* ?x323 ?x323 ?x323 ?x370 ?x370) (* ?x323 ?x370 ?x370)) ?x108) 0)))
 (let ((?x332 (+ 1 y)))
 (let ((?x102 (+ (- 1) x)))
 (let (($x369 (= (* (+ (* ?x102 ?x102 ?x332 ?x332 ?x332) (* ?x102 ?x102 ?x332)) ?x108) 0)))
 (let (($x453 (and (= ?x108 0) (or (not $x369) (not $x381)))))
 (rewrite (= $x453 $x492))))))))))))))))))))))))))))))))))))
 ))
 (let (($x58 (exists ((x Int) (y Int) )(! (let ((?x48 (- y 1)))
 (let ((?x45 (+ x 1)))
 (let ((?x53 (* (+ (- (- ?x45 y00) x00) ?x48) (+ (* ?x45 ?x45 ?x48 ?x48 ?x48) (* ?x45 ?x45 ?x48)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0)) (not (= ?x53 0)))))))))) :qid k!27))
 ))
 (let ((?x442 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x108 (+ x ?x61 ?x68 y)))
 (let ((?x370 (+ 1 x)))
 (let ((?x323 (+ (- 1) y)))
 (let (($x381 (= (* (+ (* ?x323 ?x323 ?x323 ?x370 ?x370) (* ?x323 ?x370 ?x370)) ?x108) 0)))
 (let ((?x332 (+ 1 y)))
 (let ((?x102 (+ (- 1) x)))
 (let (($x369 (= (* (+ (* ?x102 ?x102 ?x332 ?x332 ?x332) (* ?x102 ?x102 ?x332)) ?x108) 0)))
 (let (($x453 (and (= ?x108 0) (or (not $x369) (not $x381)))))
 (let ((?x48 (- y 1)))
 (let ((?x45 (+ x 1)))
 (let ((?x53 (* (+ (- (- ?x45 y00) x00) ?x48) (+ (* ?x45 ?x45 ?x48 ?x48 ?x48) (* ?x45 ?x45 ?x48)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) (* ?x34 ?x34 ?x38)))))
 (let (($x57 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0)) (not (= ?x53 0))))))
 (rewrite (= $x57 $x453))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x444 (mp (mp @x59 (quant-intro (proof-bind ?x442) (= $x58 $x113)) $x113) (rewrite (= $x113 $x113)) $x113)))
 (let ((@x380 (mp (mp @x444 (quant-intro (proof-bind ?x249) (= $x113 $x81)) $x81) (quant-intro (proof-bind ?x279) (= $x81 $x415)) $x415)))
 (let ((@x342 (mp (mp~ @x380 (sk (~ $x415 $x117)) $x117) (rewrite (= $x117 $x366)) $x366)))
 (let ((@x67 (and-elim @x342 $x273)))
 (let ((@x226 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x273) $x317)) @x67 $x317)))
 (let (($x120 (<= ?x287 0)))
 (let ((@x282 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x273) $x120)) @x67 $x120)))
 (let (($x340 (not (<= ?x271 0))))
 (let (($x435 (>= ?x271 0)))
 (let (($x327 (>= ?x170 0)))
 (let (($x409 (<= ?x170 0)))
 (let ((@x436 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x496 (not $x409) (not $x327))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x409)) @x282 @x226 false) $x409) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x327)) @x282 @x226 false) $x327) $x496)))
 (let ((@x383 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x441 $x340 (not $x435))) (unit-resolution (and-elim @x342 $x333) @x436 $x270) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x435)) @x282 @x226 false) $x435) $x340)))
 ((_ th-lemma arith farkas 1 1 1) @x383 @x282 @x226 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             120
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.59
 :memory                    3.12
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1119965
 :num-checks                1
 :propagations              14
 :rlimit-count              2587
 :time                      0.01
 :total-time                0.01)
