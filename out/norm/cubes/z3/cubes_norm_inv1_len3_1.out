unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x646 (* (- 3) n!0)))
 (let ((?x580 (* (- 3) (* n!0 n!0))))
 (let ((?x490 (+ k!2 ?x580 ?x646)))
 (let (($x441 (<= ?x490 1)))
 (let (($x228 (= ?x490 1)))
 (let ((?x481 (* 6 (* m!1 n!0 n!0 n!0 n!0))))
 (let ((?x790 (* k!2 n!0)))
 (let ((?x516 (* 24 ?x790)))
 (let ((?x768 (+ k!2 c!3)))
 (let ((?x548 (+ m!1 k!2)))
 (let ((?x484 (+ 6 m!1)))
 (let ((?x523 (+ 1 n!0)))
 (let ((?x142 (* 36 (* m!1 n!0 n!0))))
 (let ((?x689 (* 36 (* k!2 n!0 n!0))))
 (let ((?x627 (* 24 (* m!1 n!0))))
 (let ((?x691 (* (- 3) (* m!1 m!1 n!0))))
 (let ((?x605 (* 6 k!2)))
 (let ((?x545 (* 6 m!1)))
 (let ((?x511 (* (- 1) (* m!1 m!1 n!0 n!0 n!0))))
 (let ((?x526 (* (- 1) (* m!1 m!1))))
 (let ((?x563 (* (- 3) (* m!1 m!1 n!0 n!0))))
 (let ((?x957 (* 6 (* k!2 n!0 n!0 n!0 n!0))))
 (let ((?x485 (* 24 (* m!1 n!0 n!0 n!0))))
 (let ((?x469 (* 24 (* k!2 n!0 n!0 n!0))))
 (let ((?x686 (+ (* 12 (* ?x523 ?x523 ?x523 ?x484 ?x484 ?x484 ?x548 ?x768)) (* (- 3) (* m!1 k!2 n!0 n!0)) ?x469 ?x485 ?x957 ?x563 ?x526 ?x511 ?x545 ?x605 ?x691 ?x627 ?x689 (* 6 (* ?x523 ?x523 ?x484 ?x484 ?x484 ?x548 ?x768)) (* (- 1) (* m!1 k!2)) (* 6 (* ?x523 ?x523 ?x523 ?x523 ?x484 ?x484 ?x484 ?x548 ?x768)) ?x142 (* (- 1) (* ?x523 ?x523 ?x523 ?x484 ?x484 ?x484 ?x484 ?x548 ?x768)) (* (- 3) (* m!1 k!2 n!0)) (* (- 1) (* ?x523 ?x523 ?x484 ?x484 ?x484 ?x484 ?x548 ?x768)) ?x516 (* (- 1) (* m!1 k!2 n!0 n!0 n!0)) ?x481)))
 (let (($x544 (= ?x686 0)))
 (let (($x225 (not $x544)))
 (let ((?x514 (* k!2 k!2)))
 (let ((?x723 (+ ?x514 (* (- 9) (* c!3 n!0)) (* (- 5) k!2) (* (- 18) c!3) (* 9 n!0))))
 (let ((?x467 (+ m!1 (* (- 6) n!0))))
 (let (($x618 (= ?x467 6)))
 (let (($x717 (and $x618 (= ?x723 (- 4)) (= (+ k!2 (* 3 c!3) (* (- 2) n!0) (* (- 1) ?x790)) 1) $x228 $x225)))
 (let ((?x561 (+ c!3 k!2)))
 (let ((?x599 (+ k!2 m!1)))
 (let ((?x576 (+ ?x605 ?x545 ?x516 ?x142 ?x689 ?x691 (* (- 3) (* k!2 m!1 n!0)) ?x627 ?x526 (* (- 1) (* k!2 m!1)) ?x511 (* (- 1) (* k!2 m!1 n!0 n!0 n!0)) (* (- 3) (* k!2 m!1 n!0 n!0)) ?x563 ?x469 ?x485 (* (- 1) (* ?x523 ?x523 ?x484 ?x484 ?x484 ?x484 ?x599 ?x561)) ?x957 ?x481 (* 6 (* ?x523 ?x523 ?x484 ?x484 ?x484 ?x599 ?x561)) (* 12 (* ?x523 ?x523 ?x523 ?x484 ?x484 ?x484 ?x599 ?x561)) (* 6 (* ?x523 ?x523 ?x523 ?x523 ?x484 ?x484 ?x484 ?x599 ?x561)) (* (- 1) (* ?x523 ?x523 ?x523 ?x484 ?x484 ?x484 ?x484 ?x599 ?x561)))))
 (let ((?x539 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x514) (* 9 (* c!3 n!0)))))
 (let (($x573 (and $x618 (= ?x539 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x790)) 1) (= (+ k!2 ?x646 ?x580) 1) (not (= ?x576 0)))))
 (let (($x647 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x1009 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x660 (* 6 (* m n n n n))))
 (let ((?x658 (* 6 (* k n n n n))))
 (let ((?x913 (* 24 (* m n n n))))
 (let ((?x916 (* 24 (* k n n n))))
 (let ((?x915 (* (- 3) (* m m n n))))
 (let ((?x918 (* (- 3) (* k m n n))))
 (let ((?x917 (* (- 1) (* k m n n n))))
 (let ((?x920 (* (- 1) (* m m n n n))))
 (let ((?x919 (* (- 1) (* k m))))
 (let ((?x922 (* (- 1) (* m m))))
 (let ((?x921 (* 24 (* m n))))
 (let ((?x924 (* (- 3) (* k m n))))
 (let ((?x923 (* (- 3) (* m m n))))
 (let ((?x926 (* 36 (* k n n))))
 (let ((?x925 (* 36 (* m n n))))
 (let ((?x55 (* k n)))
 (let ((?x930 (* 24 ?x55)))
 (let ((?x353 (* 6 m)))
 (let ((?x356 (* 6 k)))
 (let ((?x370 (+ ?x356 ?x353 ?x930 ?x925 ?x926 ?x923 ?x924 ?x921 ?x922 ?x919 ?x920 ?x917 ?x918 ?x915 ?x916 ?x913 (* (- 1) (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)) ?x658 ?x660 (* 6 (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* 12 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* 6 (* ?x310 ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* (- 1) ?x1009))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= ?x370 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x746 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x941 (* ?x310 ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x1009 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x613 (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x708 (+ ?x613 (* ?x310 ?x310 ?x310 ?x307 ?x69) (* (- 6) (* ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* (- 12) (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) ?x1009 (* (- 6) ?x941))))
 (let (($x731 (not (= ?x708 0))))
 (let (($x721 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x513 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x513 $x721 $x731)))))))))))))))))) :qid k!34))
 ))
 (let ((?x648 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x1009 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x660 (* 6 (* m n n n n))))
 (let ((?x658 (* 6 (* k n n n n))))
 (let ((?x913 (* 24 (* m n n n))))
 (let ((?x916 (* 24 (* k n n n))))
 (let ((?x915 (* (- 3) (* m m n n))))
 (let ((?x918 (* (- 3) (* k m n n))))
 (let ((?x917 (* (- 1) (* k m n n n))))
 (let ((?x920 (* (- 1) (* m m n n n))))
 (let ((?x919 (* (- 1) (* k m))))
 (let ((?x922 (* (- 1) (* m m))))
 (let ((?x921 (* 24 (* m n))))
 (let ((?x924 (* (- 3) (* k m n))))
 (let ((?x923 (* (- 3) (* m m n))))
 (let ((?x926 (* 36 (* k n n))))
 (let ((?x925 (* 36 (* m n n))))
 (let ((?x55 (* k n)))
 (let ((?x930 (* 24 ?x55)))
 (let ((?x353 (* 6 m)))
 (let ((?x356 (* 6 k)))
 (let ((?x370 (+ ?x356 ?x353 ?x930 ?x925 ?x926 ?x923 ?x924 ?x921 ?x922 ?x919 ?x920 ?x917 ?x918 ?x915 ?x916 ?x913 (* (- 1) (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)) ?x658 ?x660 (* 6 (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* 12 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* 6 (* ?x310 ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* (- 1) ?x1009))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x104 (and $x125 $x209 $x261 $x299 (not (= ?x370 0)))))
 (let ((?x613 (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x708 (+ ?x613 (* ?x310 ?x310 ?x310 ?x307 ?x69) (* (- 6) (* ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* (- 12) (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) ?x1009 (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)))))
 (let (($x731 (not (= ?x708 0))))
 (let (($x721 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x513 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x692 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x513 $x721 $x731)))
 (rewrite (= $x692 $x104))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x620 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x941 (* ?x310 ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x1009 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x613 (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x708 (+ ?x613 (* ?x310 ?x310 ?x310 ?x307 ?x69) (* (- 6) (* ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* (- 12) (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) ?x1009 (* (- 6) ?x941))))
 (let (($x731 (not (= ?x708 0))))
 (let (($x721 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x875 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x190 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= ?x190 (- 4)) $x875 $x721 $x731)))))))))))))))) :qid k!34))
 ))
 (let ((?x747 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x941 (* ?x310 ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x1009 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x613 (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x708 (+ ?x613 (* ?x310 ?x310 ?x310 ?x307 ?x69) (* (- 6) (* ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* (- 12) (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) ?x1009 (* (- 6) ?x941))))
 (let (($x731 (not (= ?x708 0))))
 (let (($x721 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x513 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x692 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x513 $x721 $x731)))
 (let (($x875 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x190 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x725 (and $x125 (= ?x190 (- 4)) $x875 $x721 $x731)))
 (rewrite (= $x725 $x692)))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (+ (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71) (* ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x81 (- (- ?x74 (* 6 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x69 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x83 (- (- ?x81 (* 6 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)) (* 12 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x87 (- (+ ?x83 (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x87 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x616 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x941 (* ?x310 ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x1009 (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x613 (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x307 ?x69 ?x68)))
 (let ((?x708 (+ ?x613 (* ?x310 ?x310 ?x310 ?x307 ?x69) (* (- 6) (* ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x69)) (* (- 6) (* ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) (* (- 12) (* ?x310 ?x310 ?x310 ?x307 ?x307 ?x307 ?x69 ?x68)) ?x1009 (* (- 6) ?x941))))
 (let (($x731 (not (= ?x708 0))))
 (let (($x721 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x875 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x190 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x725 (and $x125 (= ?x190 (- 4)) $x875 $x721 $x731)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71) (* ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x81 (- (- ?x74 (* 6 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x69 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x83 (- (- ?x81 (* 6 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)) (* 12 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x87 (- (+ ?x83 (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x87 0))))))
 (rewrite (= $x91 $x725)))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x632 (mp (mp @x93 (quant-intro (proof-bind ?x616) (= $x92 $x620)) $x620) (rewrite (= $x620 $x620)) $x620)))
 (let ((@x700 (mp (mp @x632 (quant-intro (proof-bind ?x747) (= $x620 $x746)) $x746) (quant-intro (proof-bind ?x648) (= $x746 $x647)) $x647)))
 (let ((@x942 (mp (mp~ @x700 (sk (~ $x647 $x573)) $x573) (rewrite (= $x573 $x717)) $x717)))
 (let ((@x756 (and-elim @x942 $x228)))
 (let ((@x525 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x228) $x441)) @x756 $x441)))
 (let (($x780 (>= ?x490 1)))
 (let ((@x456 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x228) $x780)) @x756 $x780)))
 (let (($x438 (<= ?x467 6)))
 (let ((@x791 (and-elim @x942 $x618)))
 (let ((@x683 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x618) $x438)) @x791 $x438)))
 (let (($x611 (>= ?x467 6)))
 (let ((@x179 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x618) $x611)) @x791 $x611)))
 (let (($x482 (not (<= ?x686 0))))
 (let (($x617 (>= ?x686 0)))
 (let ((@x491 ((_ th-lemma arith) (hypothesis (not $x617)) @x456 @x525 @x179 @x683 @x179 @x683 @x179 @x683 @x456 @x525 false)))
 (let ((@x309 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x544 $x482 (not $x617))) (and-elim @x942 $x225) (or $x482 (not $x617)))))
 ((_ th-lemma arith) (unit-resolution @x309 (lemma @x491 $x617) $x482) @x456 @x525 @x179 @x683 @x179 @x683 @x179 @x683 @x456 @x525 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        11
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           11
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             246
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        2
 :arith-pivots              9
 :arith-row-summations      15
 :arith-tableau-max-columns 52
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.71
 :memory                    3.22
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1299614
 :num-checks                1
 :propagations              10
 :rlimit-count              6463
 :time                      0.01
 :total-time                0.02)
