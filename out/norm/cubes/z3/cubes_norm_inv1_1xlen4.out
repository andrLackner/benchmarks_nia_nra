unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x552 (* (- 1) k!2)))
 (let ((?x479 (+ (* 3 (* n!0 n!0)) ?x552 (* 3 n!0))))
 (let (($x309 (<= ?x479 (- 1))))
 (let (($x470 (= ?x479 (- 1))))
 (let ((?x467 (+ k!2 c!3)))
 (let ((?x279 (+ m!1 k!2)))
 (let ((?x364 (+ 6 m!1)))
 (let ((?x280 (+ 1 n!0)))
 (let ((?x354 (+ (* 6 (* ?x280 ?x280 ?x279 ?x279 ?x279 ?x467 ?x467 ?x467)) (* 6 (* ?x280 ?x280 ?x280 ?x279 ?x279 ?x279 ?x467 ?x467 ?x467)) (* 6 (* ?x280 ?x280 ?x280 ?x279 ?x279 ?x279 ?x467 ?x467)) (* m!1 k!2 c!3) (* m!1 m!1 c!3) (* m!1 k!2 k!2) (* (- 6) (* ?x280 ?x280 ?x364 ?x364 ?x364 ?x279 ?x467 ?x467 ?x467)) (* ?x280 ?x364 ?x364 ?x364 ?x364 ?x279 ?x467 ?x467 ?x467) (* (- 6) (* k!2 c!3 n!0)) (* (- 6) (* k!2 k!2)) (* (- 6) (* m!1 k!2)) (* (- 6) (* m!1 c!3)) (* (- 6) (* k!2 c!3)) (* m!1 m!1 k!2) (* (- 1) (* ?x280 ?x280 ?x364 ?x279 ?x279 ?x279 ?x467 ?x467 ?x467)) (* (- 6) (* k!2 k!2 n!0)) (* 6 (* ?x280 ?x280 ?x280 ?x280 ?x279 ?x279 ?x279 ?x467 ?x467)) (* (- 1) (* ?x280 ?x280 ?x280 ?x364 ?x279 ?x279 ?x279 ?x467 ?x467)) (* (- 6) (* ?x280 ?x364 ?x364 ?x364 ?x279 ?x467 ?x467 ?x467)) (* (- 6) (* m!1 c!3 n!0)) (* (- 6) (* m!1 k!2 n!0)))))
 (let (($x576 (= ?x354 0)))
 (let (($x201 (not $x576)))
 (let ((?x276 (* k!2 n!0)))
 (let ((?x574 (+ ?x276 ?x552 (* (- 3) c!3) (* 2 n!0))))
 (let (($x580 (= ?x574 (- 1))))
 (let ((?x243 (* k!2 k!2)))
 (let ((?x664 (+ ?x243 (* (- 9) (* c!3 n!0)) (* (- 5) k!2) (* (- 18) c!3) (* 9 n!0))))
 (let (($x351 (= ?x664 (- 4))))
 (let ((?x283 (+ m!1 (* (- 6) n!0))))
 (let (($x331 (= ?x283 6)))
 (let (($x561 (and $x331 $x351 $x580 $x470 $x201)))
 (let ((?x139 (+ c!3 k!2)))
 (let ((?x152 (+ k!2 m!1)))
 (let ((?x683 (+ (* 6 ?x243) (* 6 (* c!3 m!1)) (* 6 (* ?x280 ?x364 ?x364 ?x364 ?x152 ?x139 ?x139 ?x139)) (* (- 6) (* ?x280 ?x280 ?x280 ?x280 ?x152 ?x152 ?x152 ?x139 ?x139)) (* 6 (* ?x280 ?x280 ?x364 ?x364 ?x364 ?x152 ?x139 ?x139 ?x139)) (* (- 6) (* ?x280 ?x280 ?x280 ?x152 ?x152 ?x152 ?x139 ?x139)) (* (- 1) (* ?x280 ?x364 ?x364 ?x364 ?x364 ?x152 ?x139 ?x139 ?x139)) (* 6 (* c!3 k!2 n!0)) (* 6 (* k!2 k!2 n!0)) (* 6 (* c!3 m!1 n!0)) (* 6 (* k!2 m!1 n!0)) (* ?x280 ?x280 ?x280 ?x364 ?x152 ?x152 ?x152 ?x139 ?x139) (* ?x280 ?x280 ?x364 ?x152 ?x152 ?x152 ?x139 ?x139 ?x139) (* 6 (* k!2 m!1)) (* (- 1) (* c!3 k!2 m!1)) (* (- 1) (* c!3 m!1 m!1)) (* (- 1) (* k!2 k!2 m!1)) (* (- 1) (* k!2 m!1 m!1)) (* 6 (* c!3 k!2)) (* (- 6) (* ?x280 ?x280 ?x280 ?x152 ?x152 ?x152 ?x139 ?x139 ?x139)) (* (- 6) (* ?x280 ?x280 ?x152 ?x152 ?x152 ?x139 ?x139 ?x139)))))
 (let ((?x675 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x243) (* 9 (* c!3 n!0)))))
 (let (($x448 (and $x331 (= ?x675 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x276)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x683 0)))))
 (let (($x527 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x523 (* (- 1) (* k m m))))
 (let ((?x324 (* (- 1) (* k k m))))
 (let ((?x321 (* (- 1) (* c m m))))
 (let ((?x326 (* (- 1) (* c k m))))
 (let ((?x311 (+ 6 m)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x391 (* 6 (* k m n))))
 (let ((?x389 (* 6 (* c m n))))
 (let ((?x387 (* 6 (* k k n))))
 (let ((?x385 (* 6 (* c k n))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x202 (+ (* 6 (* k k)) (* 6 (* c m)) ?x177 ?x105 ?x227 ?x259 ?x142 ?x385 ?x387 ?x389 ?x391 ?x410 ?x427 (* 6 (* k m)) ?x326 ?x321 ?x324 ?x523 (* 6 (* c k)) ?x514 ?x371)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 $x213 $x265 $x303 (not (= ?x202 0)))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x253 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x310 (not (= ?x435 0))))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x123 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x123 $x297 $x310)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x543 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x523 (* (- 1) (* k m m))))
 (let ((?x324 (* (- 1) (* k k m))))
 (let ((?x321 (* (- 1) (* c m m))))
 (let ((?x326 (* (- 1) (* c k m))))
 (let ((?x311 (+ 6 m)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x391 (* 6 (* k m n))))
 (let ((?x389 (* 6 (* c m n))))
 (let ((?x387 (* 6 (* k k n))))
 (let ((?x385 (* 6 (* c k n))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x202 (+ (* 6 (* k k)) (* 6 (* c m)) ?x177 ?x105 ?x227 ?x259 ?x142 ?x385 ?x387 ?x389 ?x391 ?x410 ?x427 (* 6 (* k m)) ?x326 ?x321 ?x324 ?x523 (* 6 (* c k)) ?x514 ?x371)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x108 (and $x129 $x213 $x265 $x303 (not (= ?x202 0)))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x310 (not (= ?x435 0))))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x123 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x263 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x123 $x297 $x310)))
 (rewrite (= $x263 $x108))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x223 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x310 (not (= ?x435 0))))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x171 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x250 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (and $x129 (= ?x250 (- 4)) $x171 $x297 $x310)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x254 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x310 (not (= ?x435 0))))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x123 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x263 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x123 $x297 $x310)))
 (let (($x171 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x250 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x238 (and $x129 (= ?x250 (- 4)) $x171 $x297 $x310)))
 (rewrite (= $x238 $x263)))))))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x75 (- (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x75 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x84 (- (- ?x78 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x70))))
 (let ((?x86 (- (- ?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71))))
 (let ((?x91 (+ ?x86 (* 6 ?x68 ?x69 ?x71) (* 6 ?x68 ?x69) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x91 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x231 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x427 (* ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x410 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x371 (* (- 6) (* ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x514 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x105 (* (- 6) (* ?x314 ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x177 (* 6 (* ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x142 (* (- 1) (* ?x314 ?x311 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x259 (* (- 6) (* ?x314 ?x314 ?x314 ?x69 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x227 (* 6 (* ?x314 ?x314 ?x311 ?x311 ?x311 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x435 (+ ?x227 ?x259 ?x142 ?x177 ?x105 (* (- 1) (* ?x311 ?x69 ?x68)) ?x514 ?x371 (* 6 (* ?x314 ?x69 ?x68)) (* 6 (* ?x69 ?x68)) ?x410 ?x427)))
 (let (($x310 (not (= ?x435 0))))
 (let (($x297 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x171 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x250 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m (* (- 6) n)) 6)))
 (let (($x238 (and $x129 (= ?x250 (- 4)) $x171 $x297 $x310)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x75 (- (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x75 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x84 (- (- ?x78 (* 6 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x70))))
 (let ((?x86 (- (- ?x84 (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x71 ?x71))))
 (let ((?x91 (+ ?x86 (* 6 ?x68 ?x69 ?x71) (* 6 ?x68 ?x69) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x95 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x91 0))))))
 (rewrite (= $x95 $x238))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x240 (mp (mp @x97 (quant-intro (proof-bind ?x231) (= $x96 $x223)) $x223) (rewrite (= $x223 $x223)) $x223)))
 (let ((@x445 (mp (mp @x240 (quant-intro (proof-bind ?x254) (= $x223 $x253)) $x253) (quant-intro (proof-bind ?x543) (= $x253 $x527)) $x527)))
 (let ((@x103 (mp (mp~ @x445 (sk (~ $x527 $x448)) $x448) (rewrite (= $x448 $x561)) $x561)))
 (let ((@x362 (and-elim @x103 $x470)))
 (let ((@x180 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x470) $x309)) @x362 $x309)))
 (let (($x185 (>= ?x479 (- 1))))
 (let ((@x133 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x470) $x185)) @x362 $x185)))
 (let (($x134 (<= ?x574 (- 1))))
 (let ((@x176 (and-elim @x103 $x580)))
 (let ((@x513 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x580) $x134)) @x176 $x134)))
 (let (($x491 (>= ?x574 (- 1))))
 (let ((@x544 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x580) $x491)) @x176 $x491)))
 (let (($x261 (<= ?x664 (- 4))))
 (let ((@x356 (and-elim @x103 $x351)))
 (let ((@x531 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x261)) @x356 $x261)))
 (let (($x182 (>= ?x664 (- 4))))
 (let ((@x539 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x182)) @x356 $x182)))
 (let (($x132 (<= ?x283 6)))
 (let ((@x104 (and-elim @x103 $x331)))
 (let ((@x557 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x331) $x132)) @x104 $x132)))
 (let (($x144 (>= ?x283 6)))
 (let ((@x137 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x331) $x144)) @x104 $x144)))
 (let (($x509 (not (<= ?x354 0))))
 (let (($x205 (>= ?x354 0)))
 (let ((@x295 (lemma ((_ th-lemma arith) (hypothesis (not $x205)) @x137 @x557 @x137 @x557 false) $x205)))
 (let ((@x465 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x576 $x509 (not $x205))) (and-elim @x103 $x201) (or $x509 (not $x205)))))
 ((_ th-lemma arith) (unit-resolution @x465 @x295 $x509) @x133 @x180 @x133 @x180 @x544 @x513 @x137 @x557 @x133 @x180 @x544 @x513 @x539 @x531 @x137 @x557 @x544 @x513 @x133 @x180 @x539 @x531 @x544 @x513 @x133 @x180 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        19
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           10
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             245
 :arith-nonlinear-bounds    7
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              9
 :arith-row-summations      11
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 9
 :del-clause                16
 :final-checks              8
 :max-memory                3.66
 :memory                    3.16
 :mk-bool-var               29
 :mk-clause                 16
 :num-allocs                1220091
 :num-checks                1
 :propagations              12
 :rlimit-count              6022
 :time                      0.01
 :total-time                0.02)
