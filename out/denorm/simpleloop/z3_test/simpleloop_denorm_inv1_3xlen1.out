unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x325 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x309 (>= ?x325 0)))
 (let (($x323 (= ?x325 0)))
 (let ((?x339 (+ 1 y!0)))
 (let ((?x341 (+ (- 1) x!1)))
 (let ((?x317 (* ?x341 ?x341 ?x341 ?x341 ?x341 ?x339 ?x339 ?x339 ?x339 ?x339 ?x339 ?x339 (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x316 (= ?x317 0)))
 (let (($x318 (not $x316)))
 (let (($x385 (and $x323 $x318)))
 (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x346 (+ x!1 y!0 ?x48 ?x55)))
 (let ((?x340 (* ?x341 ?x341 ?x341 ?x341 ?x341 ?x339 ?x339 ?x339 ?x339 ?x339 ?x339 ?x339 ?x346)))
 (let (($x336 (and (= ?x346 0) (not (= ?x340 0)))))
 (let (($x349 (exists ((x Int) (y Int) )(! (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x69 (+ x y ?x48 ?x55)))
 (let ((?x110 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let ((?x54 (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x69)))
 (let (($x74 (= ?x69 0)))
 (and $x74 (not (= ?x54 0)))))))))) :qid k!26))
 ))
 (let (($x108 (exists ((x Int) (y Int) )(! (let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x66 (+ x ?x48 ?x55 y)))
 (let ((?x110 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let ((?x237 (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x66)))
 (and (= ?x66 0) (not (= ?x237 0))))))))) :qid k!26))
 ))
 (let ((?x343 (lambda ((x Int) (y Int) )(let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x69 (+ x y ?x48 ?x55)))
 (let ((?x110 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let ((?x54 (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x69)))
 (let (($x74 (= ?x69 0)))
 (let (($x350 (and $x74 (not (= ?x54 0)))))
 (let ((?x66 (+ x ?x48 ?x55 y)))
 (let ((?x237 (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x66)))
 (let (($x77 (and (= ?x66 0) (not (= ?x237 0)))))
 (rewrite (= $x77 $x350))))))))))))))
 ))
 (let (($x45 (exists ((x Int) (y Int) )(! (let ((?x39 (+ y 1)))
 (let ((?x38 (- 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x34 ?x34 ?x34 ?x39 ?x39 ?x34 ?x34 ?x39 ?x39 ?x38 ?x39 ?x39 ?x39)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)))))))) :qid k!26))
 ))
 (let ((?x53 (lambda ((x Int) (y Int) )(let ((?x55 (* (- 1) x00)))
 (let ((?x48 (* (- 1) y00)))
 (let ((?x66 (+ x ?x48 ?x55 y)))
 (let ((?x110 (+ 1 y)))
 (let ((?x64 (+ (- 1) x)))
 (let ((?x237 (* ?x64 ?x64 ?x64 ?x64 ?x64 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x66)))
 (let (($x77 (and (= ?x66 0) (not (= ?x237 0)))))
 (let ((?x39 (+ y 1)))
 (let ((?x38 (- 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x34 ?x34 ?x34 ?x39 ?x39 ?x34 ?x34 ?x39 ?x39 ?x38 ?x39 ?x39 ?x39)))
 (let (($x44 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0))))))
 (rewrite (= $x44 $x77)))))))))))))))
 ))
 (let ((@x46 (asserted $x45)))
 (let ((@x235 (mp (mp @x46 (quant-intro (proof-bind ?x53) (= $x45 $x108)) $x108) (rewrite (= $x108 $x108)) $x108)))
 (let ((@x332 (mp~ (mp @x235 (quant-intro (proof-bind ?x343) (= $x108 $x349)) $x349) (sk (~ $x349 $x336)) $x336)))
 (let ((@x384 (mp @x332 (rewrite (= $x336 $x385)) $x385)))
 (let ((@x378 (and-elim @x384 $x323)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x309)) @x378 $x309)))
 (let (($x308 (<= ?x325 0)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x308)) @x378 $x308)))
 (let (($x288 (not (>= ?x317 0))))
 (let (($x307 (<= ?x317 0)))
 (let ((@x290 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x316 (not $x307) $x288)) (and-elim @x384 $x318) (or (not $x307) $x288))))
 (let ((@x287 (unit-resolution @x290 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x307)) @x295 @x301 false) $x307) $x288)))
 ((_ th-lemma arith farkas 1 1 1) @x287 @x295 @x301 false))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        7
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          4
 :arith-fixed-eqs           2
 :arith-grobner             2
 :arith-max-min             14
 :arith-nonlinear-horner    6
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 11
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                11
 :final-checks              2
 :max-memory                19.55
 :memory                    19.15
 :mk-bool-var               12
 :mk-clause                 15
 :num-allocs                484005
 :num-checks                1
 :propagations              4
 :rlimit-count              675
 :time                      0.01
 :total-time                0.02)
