unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x709 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x554 (>= ?x709 (- 6))))
 (let (($x495 (= ?x709 (- 6))))
 (let ((?x567 (+ k!2 c!3)))
 (let ((?x535 (+ m!1 k!2)))
 (let ((?x122 (+ 6 m!1)))
 (let ((?x684 (+ 1 n!0)))
 (let ((?x230 (+ (* ?x684 ?x684 ?x684 ?x122 ?x122 ?x122 ?x535 ?x535 ?x567) (* (- 1) (* ?x684 ?x684 ?x684 ?x122 ?x122 ?x535 ?x535 ?x535 ?x567)))))
 (let ((?x641 (* (- 216) c!3)))
 (let ((?x642 (* (- 216) k!2)))
 (let ((?x117 (+ (* (- 18) (* n!0 m!1 m!1 c!3)) (* (- 1) (* n!0 m!1 m!1 m!1 c!3)) (* (- 18) (* m!1 m!1 c!3)) (* (- 1) (* m!1 m!1 m!1 c!3)) (* (- 108) (* n!0 m!1 k!2)) (* (- 1) (* m!1 m!1 m!1 k!2)) (* (- 1) (* n!0 m!1 m!1 m!1 k!2)) (* (- 108) (* m!1 k!2)) ?x642 ?x641 (* (- 216) (* n!0 c!3)) (* (- 216) (* n!0 k!2)) (* (- 108) (* m!1 c!3)) (* (- 108) (* n!0 m!1 c!3)) (* ?x122 ?x122 ?x535 ?x535 ?x535 ?x567 ?x567) (* (- 18) (* n!0 m!1 m!1 k!2)) (* (- 18) (* m!1 m!1 k!2)))))
 (let ((?x454 (* 12 (* m!1 m!1 m!1))))
 (let ((?x710 (* k!2 k!2)))
 (let ((?x366 (* 36 ?x710)))
 (let ((?x620 (* k!2 k!2 k!2 k!2)))
 (let ((?x94 (* 36 (* m!1 m!1))))
 (let ((?x539 (* m!1 m!1 m!1 m!1)))
 (let ((?x401 (* m!1 m!1 m!1 c!3)))
 (let ((?x789 (+ (* 12 (* n!0 m!1 k!2 k!2)) (* 12 (* n!0 m!1 m!1 m!1)) (* 36 (* n!0 m!1 m!1)) (* 36 (* n!0 k!2 k!2)) ?x401 (* 72 (* n!0 m!1 k!2)) (* 3 (* m!1 m!1 k!2 c!3)) (* 3 (* m!1 k!2 k!2 c!3)) (* n!0 m!1 m!1 k!2 k!2) (* 3 (* m!1 m!1 m!1 k!2)) (* 2 (* n!0 m!1 m!1 m!1 k!2)) (* 72 (* m!1 k!2)) (* 12 (* m!1 k!2 k!2)) (* 4 (* m!1 m!1 k!2 k!2)) (* 3 (* m!1 k!2 k!2 k!2)) ?x539 ?x94 ?x620 (* 24 (* n!0 m!1 m!1 k!2)) (* k!2 k!2 k!2 c!3) (* 24 (* m!1 m!1 k!2)) ?x366 ?x454 (* n!0 m!1 m!1 m!1 m!1))))
 (let ((?x164 (* ?x789 ?x117 ?x230 (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x123 (= ?x164 0)))
 (let (($x191 (not $x123)))
 (let (($x754 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x732 (= (+ (* 2 n!0) (* (- 1) k!2) (* (- 3) c!3) (* n!0 k!2)) (- 1))))
 (let ((?x515 (+ (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)) ?x710)))
 (let (($x261 (and $x495 (= ?x515 (- 4)) $x732 $x754 $x191)))
 (let ((?x260 (+ c!3 k!2)))
 (let ((?x119 (+ k!2 m!1)))
 (let ((?x686 (+ (* ?x684 ?x684 ?x684 ?x122 ?x122 ?x122 ?x119 ?x119 ?x260) (* (- 1) (* ?x684 ?x684 ?x684 ?x122 ?x122 ?x119 ?x119 ?x119 ?x260)))))
 (let ((?x683 (+ ?x641 ?x642 (* (- 216) (* k!2 n!0)) (* (- 216) (* c!3 n!0)) (* (- 1) (* k!2 m!1 m!1 m!1)) (* (- 1) (* c!3 m!1 m!1 m!1)) (* ?x122 ?x122 ?x119 ?x119 ?x119 ?x260 ?x260) (* (- 1) (* c!3 m!1 m!1 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1 m!1 n!0)) (* (- 108) (* c!3 m!1)) (* (- 108) (* k!2 m!1)) (* (- 18) (* c!3 m!1 m!1)) (* (- 18) (* k!2 m!1 m!1)) (* (- 108) (* c!3 m!1 n!0)) (* (- 108) (* k!2 m!1 n!0)) (* (- 18) (* c!3 m!1 m!1 n!0)) (* (- 18) (* k!2 m!1 m!1 n!0)))))
 (let ((?x352 (* c!3 m!1 m!1 m!1)))
 (let ((?x640 (+ ?x366 (* 3 (* k!2 m!1 m!1 m!1)) ?x352 (* 2 (* k!2 m!1 m!1 m!1 n!0)) (* 72 (* k!2 m!1)) (* 24 (* k!2 m!1 m!1)) (* 72 (* k!2 m!1 n!0)) (* 24 (* k!2 m!1 m!1 n!0)) (* 4 (* k!2 k!2 m!1 m!1)) (* 3 (* c!3 k!2 m!1 m!1)) ?x620 (* c!3 k!2 k!2 k!2) (* 3 (* k!2 k!2 k!2 m!1)) (* 3 (* c!3 k!2 k!2 m!1)) (* k!2 k!2 m!1 m!1 n!0) (* m!1 m!1 m!1 m!1 n!0) ?x94 (* 12 (* k!2 k!2 m!1)) ?x454 ?x539 (* 36 (* k!2 k!2 n!0)) (* 36 (* m!1 m!1 n!0)) (* 12 (* k!2 k!2 m!1 n!0)) (* 12 (* m!1 m!1 m!1 n!0)))))
 (let (($x705 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x358 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x710) (* 9 (* c!3 n!0)))))
 (let (($x403 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x358 4) $x705 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x640 ?x683 ?x686 (+ (- 6) m!1 (* (- 6) n!0))) 0)))))
 (let (($x810 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x469 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x493 (* k m m n)))
 (let ((?x553 (* (- 18) ?x493)))
 (let ((?x556 (* (- 18) (* c m m n))))
 (let ((?x481 (* k m n)))
 (let ((?x559 (* (- 108) ?x481)))
 (let ((?x562 (* (- 108) (* c m n))))
 (let ((?x457 (* k m m)))
 (let ((?x565 (* (- 18) ?x457)))
 (let ((?x568 (* (- 18) (* c m m))))
 (let ((?x445 (* k m)))
 (let ((?x571 (* (- 108) ?x445)))
 (let ((?x574 (* (- 108) (* c m))))
 (let ((?x427 (* k m m m n)))
 (let ((?x600 (* (- 1) ?x427)))
 (let ((?x601 (* (- 1) (* c m m m n))))
 (let ((?x386 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x383 (* c m m m)))
 (let ((?x602 (* (- 1) ?x383)))
 (let ((?x380 (* k m m m)))
 (let ((?x603 (* (- 1) ?x380)))
 (let ((?x153 (* c n)))
 (let ((?x578 (* (- 216) ?x153)))
 (let ((?x55 (* k n)))
 (let ((?x581 (* (- 216) ?x55)))
 (let ((?x584 (* (- 216) k)))
 (let ((?x587 (* (- 216) c)))
 (let ((?x329 (+ ?x587 ?x584 ?x581 ?x578 ?x603 ?x602 ?x386 ?x601 ?x600 ?x574 ?x571 ?x568 ?x565 ?x562 ?x559 ?x556 ?x553)))
 (let ((?x785 (+ (* 36 (* k k)) (* 3 ?x380) ?x383 (* 2 ?x427) (* 72 ?x445) (* 24 ?x457) (* 72 ?x481) (* 24 ?x493) (* 4 (* k k m m)) (* 3 (* c k m m)) (* k k k k) (* c k k k) (* 3 (* k k k m)) (* 3 (* c k k m)) (* k k m m n) (* m m m m n) (* 36 (* m m)) (* 12 (* k k m)) (* 12 (* m m m)) (* m m m m) (* 36 (* k k n)) (* 36 (* m m n)) (* 12 (* k k m n)) (* 12 (* m m m n)))))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x219 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 ?x153))))
 (let (($x215 (= ?x219 4)))
 (let (($x131 (= (+ m ?x114) 6)))
 (and $x131 $x215 $x267 $x305 (not (= (* ?x785 ?x329 ?x469 ?x120) 0))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x722 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x469 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x386 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x498 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x386 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x469 ?x120)))
 (let (($x714 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x689 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x599 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m ?x114) 6)))
 (and $x131 (= ?x599 (- 4)) $x689 $x714 (not (= ?x498 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x208 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x469 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x493 (* k m m n)))
 (let ((?x553 (* (- 18) ?x493)))
 (let ((?x556 (* (- 18) (* c m m n))))
 (let ((?x481 (* k m n)))
 (let ((?x559 (* (- 108) ?x481)))
 (let ((?x562 (* (- 108) (* c m n))))
 (let ((?x457 (* k m m)))
 (let ((?x565 (* (- 18) ?x457)))
 (let ((?x568 (* (- 18) (* c m m))))
 (let ((?x445 (* k m)))
 (let ((?x571 (* (- 108) ?x445)))
 (let ((?x574 (* (- 108) (* c m))))
 (let ((?x427 (* k m m m n)))
 (let ((?x600 (* (- 1) ?x427)))
 (let ((?x601 (* (- 1) (* c m m m n))))
 (let ((?x386 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x383 (* c m m m)))
 (let ((?x602 (* (- 1) ?x383)))
 (let ((?x380 (* k m m m)))
 (let ((?x603 (* (- 1) ?x380)))
 (let ((?x153 (* c n)))
 (let ((?x578 (* (- 216) ?x153)))
 (let ((?x55 (* k n)))
 (let ((?x581 (* (- 216) ?x55)))
 (let ((?x584 (* (- 216) k)))
 (let ((?x587 (* (- 216) c)))
 (let ((?x329 (+ ?x587 ?x584 ?x581 ?x578 ?x603 ?x602 ?x386 ?x601 ?x600 ?x574 ?x571 ?x568 ?x565 ?x562 ?x559 ?x556 ?x553)))
 (let ((?x785 (+ (* 36 (* k k)) (* 3 ?x380) ?x383 (* 2 ?x427) (* 72 ?x445) (* 24 ?x457) (* 72 ?x481) (* 24 ?x493) (* 4 (* k k m m)) (* 3 (* c k m m)) (* k k k k) (* c k k k) (* 3 (* k k k m)) (* 3 (* c k k m)) (* k k m m n) (* m m m m n) (* 36 (* m m)) (* 12 (* k k m)) (* 12 (* m m m)) (* m m m m) (* 36 (* k k n)) (* 36 (* m m n)) (* 12 (* k k m n)) (* 12 (* m m m n)))))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x219 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 ?x153))))
 (let (($x215 (= ?x219 4)))
 (let (($x131 (= (+ m ?x114) 6)))
 (let (($x226 (and $x131 $x215 $x267 $x305 (not (= (* ?x785 ?x329 ?x469 ?x120) 0)))))
 (let ((?x498 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x386 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x469 ?x120)))
 (let (($x714 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x689 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x599 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x651 (and $x131 (= ?x599 (- 4)) $x689 $x714 (not (= ?x498 0)))))
 (rewrite (= $x651 $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x89 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x80 (- (* (+ c k) (+ c k) ?x73 ?x73 ?x73 ?x74 ?x74) (* (+ c k) ?x74 ?x74 ?x74 ?x69))))
 (let ((?x77 (- (* (+ c k) ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* (+ c k) ?x73 ?x73 ?x73 ?x74 ?x74 ?x69 ?x69 ?x69))))
 (let ((?x84 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77 ?x80 (+ (* (+ c k) ?x73 ?x73 ?x73) (* ?x73 ?x73 ?x74 ?x74 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x84 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x724 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x469 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x386 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x498 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x386 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x469 ?x120)))
 (let (($x714 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x689 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x599 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m ?x114) 6)))
 (let (($x651 (and $x131 (= ?x599 (- 4)) $x689 $x714 (not (= ?x498 0)))))
 (let ((?x83 (+ (* ?x72 ?x73 ?x73 ?x73) (* ?x73 ?x73 (+ m 6) (+ m 6) (+ n 1)))))
 (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x80 (- (* ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74) (* ?x72 ?x74 ?x74 ?x74 ?x69))))
 (let ((?x77 (- (* ?x72 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x69 ?x69 ?x69))))
 (let ((?x84 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77 ?x80 ?x83)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x88 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x84 0))))))
 (rewrite (= $x88 $x651)))))))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x612 (mp (mp @x90 (quant-intro (proof-bind ?x724) (= $x89 $x722)) $x722) (rewrite (= $x722 $x722)) $x722)))
 (let ((@x96 (mp~ (mp @x612 (quant-intro (proof-bind ?x208) (= $x722 $x810)) $x810) (sk (~ $x810 $x403)) $x403)))
 (let ((@x154 (mp @x96 (rewrite (= $x403 $x261)) $x261)))
 (let ((@x395 (and-elim @x154 $x495)))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x554)) @x395 $x554)))
 (let (($x551 (<= ?x709 (- 6))))
 (let ((@x121 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x551)) @x395 $x551)))
 (let (($x404 (not (<= ?x164 0))))
 (let (($x172 (>= ?x164 0)))
 (let ((@x392 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x123 $x404 (not $x172))) (and-elim @x154 $x191) (or $x404 (not $x172)))))
 (let ((@x337 (unit-resolution @x392 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x172)) @x121 @x177 false) $x172) $x404)))
 ((_ th-lemma arith farkas 1 1 1) @x337 @x121 @x177 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             282
 :arith-nonlinear-bounds    15
 :arith-num-rows            12
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      11
 :arith-tableau-max-columns 70
 :arith-tableau-max-rows    12
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                19.62
 :memory                    19.17
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                474052
 :num-checks                1
 :propagations              11
 :rlimit-count              4599
 :time                      0.01
 :total-time                0.02)
