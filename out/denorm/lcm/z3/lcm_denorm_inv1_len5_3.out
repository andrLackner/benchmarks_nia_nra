unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x985 (+ k!00 k!10 (* (- 1) (* v!4 y!2)) (* (- 1) (* x!3 u!5)))))
 (let (($x1019 (>= ?x985 0)))
 (let (($x986 (= ?x985 0)))
 (let ((?x1017 (* v!4 y!2 u!5 u!5)))
 (let ((?x999 (* (- 1) (* v!4 y!2 y!2 y!2 x!3 x!3 u!5))))
 (let ((?x924 (* v!4 x!3 x!3 x!3 x!3)))
 (let ((?x848 (* v!4 v!4 x!3 x!3 x!3 x!3 x!3)))
 (let ((?x917 (* (- 1) (* v!4 v!4 v!4 x!3))))
 (let ((?x296 (* (- 1) (* v!4 v!4 x!3 x!3))))
 (let ((?x636 (* (- 1) (* v!4 x!3 x!3))))
 (let ((?x631 (* v!4 v!4 v!4 y!2)))
 (let ((?x614 (* y!2 y!2 x!3 x!3 u!5)))
 (let ((?x383 (* (- 1) (* v!4 y!2 y!2))))
 (let ((?x641 (+ (* (- 2) (* v!4 v!4 x!3 u!5)) ?x383 (* (- 2) (* v!4 y!2 x!3 x!3 x!3)) (* 2 (* v!4 v!4 y!2 u!5)) (* x!3 x!3 x!3 x!3 u!5) (* 2 (* v!4 y!2 x!3)) ?x614 ?x631 ?x636 (* (- 1) (* v!4 x!3 u!5 u!5)) (* v!4 y!2 y!2 x!3 x!3) (* (- 2) (* y!2 x!3 x!3 x!3 u!5)) (* 3 (* v!4 v!4 y!2 y!2 x!3 x!3 x!3)) ?x296 ?x917 ?x848 ?x924 (* v!4 x!3 x!3 x!3 x!3 x!3 u!5) ?x999 (* (- 1) (* v!4 v!4 y!2 y!2 y!2 x!3 x!3)) (* (- 3) (* v!4 y!2 x!3 x!3 x!3 x!3 u!5)) (* (- 3) (* v!4 v!4 y!2 x!3 x!3 x!3 x!3)) (* 3 (* v!4 y!2 y!2 x!3 x!3 x!3 u!5)) ?x1017)))
 (let ((?x958 (* x!3 u!5)))
 (let ((?x556 (* v!4 y!2)))
 (let ((?x709 (* (- 1) k!10)))
 (let ((?x707 (* (- 1) k!00)))
 (let ((?x976 (+ ?x707 ?x709 ?x556 ?x958)))
 (let ((?x543 (* ?x976 ?x641)))
 (let (($x1007 (= ?x543 0)))
 (let (($x545 (not $x1007)))
 (let ((?x927 (* (- 1) (* v!4 v!4 y!2 y!2))))
 (let ((?x666 (+ (* 2 (* v!4 v!4 y!2 x!3)) (* (- 2) (* v!4 y!2 y!2 u!5)) ?x383 (* (- 1) (* x!3 x!3 u!5 u!5)) (* (- 2) (* v!4 x!3 x!3 u!5)) (* 4 (* v!4 y!2 x!3 u!5)) (* (- 1) (* y!2 y!2 u!5 u!5)) ?x614 (* (- 2) (* y!2 y!2 y!2 x!3 u!5)) (* y!2 y!2 y!2 y!2 u!5) (* 2 (* y!2 x!3 u!5 u!5)) ?x296 ?x927 (* (- 1) (* y!2 y!2 y!2 x!3 x!3 u!5 u!5)) (* (- 1) (* y!2 y!2 u!5)) ?x999 (* 2 (* y!2 y!2 y!2 y!2 x!3 u!5 u!5)) (* 2 (* v!4 y!2 y!2 y!2 y!2 x!3 u!5)) (* (- 1) (* y!2 y!2 y!2 y!2 y!2 u!5 u!5)) (* (- 1) (* v!4 y!2 y!2 y!2 y!2 y!2 u!5)) (* y!2 u!5 u!5 u!5) ?x1017)))
 (let ((?x649 (* ?x976 ?x666)))
 (let (($x994 (= ?x649 0)))
 (let (($x1011 (or (not $x994) $x545)))
 (let (($x600 (and $x986 $x1011)))
 (let ((?x932 (* u!5 x!3 x!3 y!2 y!2)))
 (let ((?x248 (* u!5 u!5 v!4 y!2)))
 (let ((?x228 (* (- 1) (* u!5 v!4 x!3 x!3 y!2 y!2 y!2))))
 (let ((?x824 (+ ?x296 (* (- 1) (* v!4 v!4 x!3 x!3 y!2 y!2 y!2)) (* u!5 v!4 x!3 x!3 x!3 x!3 x!3) ?x848 (* (- 3) (* u!5 v!4 x!3 x!3 x!3 x!3 y!2)) ?x383 ?x228 ?x248 ?x932 (* (- 3) (* v!4 v!4 x!3 x!3 x!3 x!3 y!2)) (* 3 (* u!5 v!4 x!3 x!3 x!3 y!2 y!2)) (* 3 (* v!4 v!4 x!3 x!3 x!3 y!2 y!2)) ?x636 (* 2 (* u!5 v!4 v!4 y!2)) ?x631 (* 2 (* v!4 x!3 y!2)) (* (- 1) (* u!5 u!5 v!4 x!3)) (* (- 2) (* u!5 v!4 v!4 x!3)) ?x917 (* v!4 x!3 x!3 y!2 y!2) (* u!5 x!3 x!3 x!3 x!3) ?x924 (* (- 2) (* u!5 x!3 x!3 x!3 y!2)) (* (- 2) (* v!4 x!3 x!3 x!3 y!2)))))
 (let ((?x801 (+ (* u!5 x!3) ?x556 ?x707 ?x709)))
 (let ((?x223 (+ ?x296 (* (- 1) (* u!5 y!2 y!2)) ?x383 (* (- 1) (* u!5 u!5 x!3 x!3 y!2 y!2 y!2)) ?x228 (* 2 (* u!5 u!5 x!3 y!2 y!2 y!2 y!2)) (* 2 (* u!5 v!4 x!3 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 y!2 y!2 y!2 y!2 y!2)) (* (- 1) (* u!5 v!4 y!2 y!2 y!2 y!2 y!2)) (* u!5 u!5 u!5 y!2) ?x248 (* (- 1) (* u!5 u!5 x!3 x!3)) (* (- 2) (* u!5 v!4 x!3 x!3)) (* 2 (* u!5 u!5 x!3 y!2)) (* 4 (* u!5 v!4 x!3 y!2)) (* 2 (* v!4 v!4 x!3 y!2)) (* (- 1) (* u!5 u!5 y!2 y!2)) (* (- 2) (* u!5 v!4 y!2 y!2)) ?x927 ?x932 (* (- 2) (* u!5 x!3 y!2 y!2 y!2)) (* u!5 y!2 y!2 y!2 y!2))))
 (let (($x305 (and (= ?x801 0) (or (not (= (* ?x801 ?x223) 0)) (not (= (* ?x801 ?x824) 0))))))
 (let (($x217 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x722 (* (- 2) (* v x x x y))))
 (let ((?x721 (* (- 2) (* u x x x y))))
 (let ((?x691 (* v x x x x)))
 (let ((?x688 (* u x x x x)))
 (let ((?x682 (* v x x y y)))
 (let ((?x635 (* (- 1) (* v v v x))))
 (let ((?x643 (* (- 2) (* u v v x))))
 (let ((?x619 (* (- 1) (* u u v x))))
 (let ((?x612 (* v v v y)))
 (let ((?x644 (* 2 (* u v v y))))
 (let ((?x597 (* 3 (* v v x x x y y))))
 (let ((?x594 (* 3 (* u v x x x y y))))
 (let ((?x591 (* (- 3) (* v v x x x x y))))
 (let ((?x433 (* u x x y y)))
 (let ((?x265 (* u u v y)))
 (let ((?x235 (* (- 1) (* u v x x y y y))))
 (let ((?x160 (* (- 1) (* v y y))))
 (let ((?x588 (* (- 3) (* u v x x x x y))))
 (let ((?x146 (* v v x x x x x)))
 (let ((?x142 (* u v x x x x x)))
 (let ((?x574 (* (- 1) (* v v x x y y y))))
 (let ((?x71 (* v v x x)))
 (let ((?x397 (* (- 1) ?x71)))
 (let ((?x1025 (+ ?x397 ?x574 ?x142 ?x146 ?x588 ?x160 ?x235 ?x265 ?x433 ?x591 ?x594 ?x597 (* (- 1) (* v x x)) ?x644 ?x612 (* 2 (* v x y)) ?x619 ?x643 ?x635 ?x682 ?x688 ?x691 ?x721 ?x722)))
 (let ((?x709 (* (- 1) k!10)))
 (let ((?x707 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x173 (+ ?x33 ?x34 ?x707 ?x709)))
 (let ((?x471 (+ ?x397 (* (- 1) (* u y y)) ?x160 (* (- 1) (* u u x x y y y)) ?x235 (* 2 (* u u x y y y y)) (* 2 (* u v x y y y y)) (* (- 1) (* u u y y y y y)) (* (- 1) (* u v y y y y y)) (* u u u y) ?x265 (* (- 1) (* u u x x)) (* (- 2) (* u v x x)) (* 2 (* u u x y)) (* 4 (* u v x y)) (* 2 (* v v x y)) (* (- 1) (* u u y y)) (* (- 2) (* u v y y)) (* (- 1) (* v v y y)) ?x433 (* (- 2) (* u x y y y)) (* u y y y y))))
 (and (= ?x173 0) (or (not (= (* ?x173 ?x471) 0)) (not (= (* ?x173 ?x1025) 0)))))))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x399 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x165 (* (- 1) x)))
 (let ((?x379 (+ y ?x165)))
 (let ((?x60 (+ u v)))
 (let ((?x670 (+ (* (- 1) (* ?x379 ?x379 v)) (* (- 1) (* ?x60 ?x379 ?x379 ?x379 x x v)) (* ?x60 ?x60 ?x379 v) (* (- 1) (* x x v v)) (* ?x60 ?x379 ?x379 x x))))
 (let ((?x709 (* (- 1) k!10)))
 (let ((?x406 (* ?x379 v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x707 (* (- 1) k!00)))
 (let ((?x706 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x197 (+ (* (- 1) (* ?x44 y y)) (* (- 1) (* ?x44 ?x706 ?x706 y y y u)) (* ?x44 y u u) (* (- 1) (* ?x44 ?x44 ?x706 ?x706)) (* ?x706 ?x706 y y u))))
 (let (($x678 (or (not (= (* (+ ?x707 (* ?x706 u) (* ?x44 y) ?x709) ?x197) 0)) (not (= (* (+ ?x707 ?x61 ?x406 ?x709) ?x670) 0)))))
 (let ((?x418 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x418 0) $x678)))))))))))))) :qid k!29))
 ))
 (let ((?x216 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x722 (* (- 2) (* v x x x y))))
 (let ((?x721 (* (- 2) (* u x x x y))))
 (let ((?x691 (* v x x x x)))
 (let ((?x688 (* u x x x x)))
 (let ((?x682 (* v x x y y)))
 (let ((?x635 (* (- 1) (* v v v x))))
 (let ((?x643 (* (- 2) (* u v v x))))
 (let ((?x619 (* (- 1) (* u u v x))))
 (let ((?x612 (* v v v y)))
 (let ((?x644 (* 2 (* u v v y))))
 (let ((?x597 (* 3 (* v v x x x y y))))
 (let ((?x594 (* 3 (* u v x x x y y))))
 (let ((?x591 (* (- 3) (* v v x x x x y))))
 (let ((?x433 (* u x x y y)))
 (let ((?x265 (* u u v y)))
 (let ((?x235 (* (- 1) (* u v x x y y y))))
 (let ((?x160 (* (- 1) (* v y y))))
 (let ((?x588 (* (- 3) (* u v x x x x y))))
 (let ((?x146 (* v v x x x x x)))
 (let ((?x142 (* u v x x x x x)))
 (let ((?x574 (* (- 1) (* v v x x y y y))))
 (let ((?x71 (* v v x x)))
 (let ((?x397 (* (- 1) ?x71)))
 (let ((?x1025 (+ ?x397 ?x574 ?x142 ?x146 ?x588 ?x160 ?x235 ?x265 ?x433 ?x591 ?x594 ?x597 (* (- 1) (* v x x)) ?x644 ?x612 (* 2 (* v x y)) ?x619 ?x643 ?x635 ?x682 ?x688 ?x691 ?x721 ?x722)))
 (let ((?x709 (* (- 1) k!10)))
 (let ((?x707 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x173 (+ ?x33 ?x34 ?x707 ?x709)))
 (let ((?x471 (+ ?x397 (* (- 1) (* u y y)) ?x160 (* (- 1) (* u u x x y y y)) ?x235 (* 2 (* u u x y y y y)) (* 2 (* u v x y y y y)) (* (- 1) (* u u y y y y y)) (* (- 1) (* u v y y y y y)) (* u u u y) ?x265 (* (- 1) (* u u x x)) (* (- 2) (* u v x x)) (* 2 (* u u x y)) (* 4 (* u v x y)) (* 2 (* v v x y)) (* (- 1) (* u u y y)) (* (- 2) (* u v y y)) (* (- 1) (* v v y y)) ?x433 (* (- 2) (* u x y y y)) (* u y y y y))))
 (let (($x1053 (and (= ?x173 0) (or (not (= (* ?x173 ?x471) 0)) (not (= (* ?x173 ?x1025) 0))))))
 (let ((?x165 (* (- 1) x)))
 (let ((?x379 (+ y ?x165)))
 (let ((?x60 (+ u v)))
 (let ((?x670 (+ (* (- 1) (* ?x379 ?x379 v)) (* (- 1) (* ?x60 ?x379 ?x379 ?x379 x x v)) (* ?x60 ?x60 ?x379 v) (* (- 1) (* x x v v)) (* ?x60 ?x379 ?x379 x x))))
 (let ((?x706 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x197 (+ (* (- 1) (* ?x44 y y)) (* (- 1) (* ?x44 ?x706 ?x706 y y y u)) (* ?x44 y u u) (* (- 1) (* ?x44 ?x44 ?x706 ?x706)) (* ?x706 ?x706 y y u))))
 (let (($x678 (or (not (= (* (+ ?x707 (* ?x706 u) (* ?x44 y) ?x709) ?x197) 0)) (not (= (* (+ ?x707 (* ?x60 x) (* ?x379 v) ?x709) ?x670) 0)))))
 (let ((?x418 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x380 (and (= ?x418 0) $x678)))
 (rewrite (= $x380 $x1053))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x188 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x165 (* (- 1) x)))
 (let ((?x379 (+ y ?x165)))
 (let ((?x60 (+ u v)))
 (let ((?x670 (+ (* (- 1) (* ?x379 ?x379 v)) (* (- 1) (* ?x60 ?x379 ?x379 ?x379 x x v)) (* ?x60 ?x60 ?x379 v) (* (- 1) (* x x v v)) (* ?x60 ?x379 ?x379 x x))))
 (let ((?x709 (* (- 1) k!10)))
 (let ((?x406 (* ?x379 v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x707 (* (- 1) k!00)))
 (let ((?x706 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x197 (+ (* (- 1) (* ?x44 y y)) (* (- 1) (* ?x44 ?x706 ?x706 y y y u)) (* ?x44 y u u) (* (- 1) (* ?x44 ?x44 ?x706 ?x706)) (* ?x706 ?x706 y y u))))
 (let (($x678 (or (not (= (* (+ ?x707 (* ?x706 u) (* ?x44 y) ?x709) ?x197) 0)) (not (= (* (+ ?x707 ?x61 ?x406 ?x709) ?x670) 0)))))
 (and (= (+ ?x707 (* x u) (* y v) ?x709) 0) $x678))))))))))))) :qid k!29))
 ))
 (let ((?x407 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x165 (* (- 1) x)))
 (let ((?x379 (+ y ?x165)))
 (let ((?x60 (+ u v)))
 (let ((?x670 (+ (* (- 1) (* ?x379 ?x379 v)) (* (- 1) (* ?x60 ?x379 ?x379 ?x379 x x v)) (* ?x60 ?x60 ?x379 v) (* (- 1) (* x x v v)) (* ?x60 ?x379 ?x379 x x))))
 (let ((?x709 (* (- 1) k!10)))
 (let ((?x406 (* ?x379 v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x707 (* (- 1) k!00)))
 (let ((?x706 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x197 (+ (* (- 1) (* ?x44 y y)) (* (- 1) (* ?x44 ?x706 ?x706 y y y u)) (* ?x44 y u u) (* (- 1) (* ?x44 ?x44 ?x706 ?x706)) (* ?x706 ?x706 y y u))))
 (let (($x678 (or (not (= (* (+ ?x707 (* ?x706 u) (* ?x44 y) ?x709) ?x197) 0)) (not (= (* (+ ?x707 ?x61 ?x406 ?x709) ?x670) 0)))))
 (let ((?x418 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x380 (and (= ?x418 0) $x678)))
 (let (($x705 (and (= (+ ?x707 (* x u) (* y v) ?x709) 0) $x678)))
 (rewrite (= $x705 $x380))))))))))))))))))
 ))
 (let (($x175 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x165 (* (- 1) x)))
 (let ((?x379 (+ y ?x165)))
 (let ((?x60 (+ u v)))
 (let ((?x670 (+ (* (- 1) (* ?x379 ?x379 v)) (* (- 1) (* ?x60 ?x379 ?x379 ?x379 x x v)) (* ?x60 ?x60 ?x379 v) (* (- 1) (* x x v v)) (* ?x60 ?x379 ?x379 x x))))
 (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x406 (* ?x379 v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let ((?x706 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x197 (+ (* (- 1) (* ?x44 y y)) (* (- 1) (* ?x44 ?x706 ?x706 y y y u)) (* ?x44 y u u) (* (- 1) (* ?x44 ?x44 ?x706 ?x706)) (* ?x706 ?x706 y y u))))
 (let (($x155 (or (not (= (* (+ ?x89 (* ?x706 u) (* ?x44 y) ?x105) ?x197) 0)) (not (= (* (+ ?x89 ?x61 ?x406 ?x105) ?x670) 0)))))
 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) $x155)))))))))))))) :qid k!29))
 ))
 (let ((?x681 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x165 (* (- 1) x)))
 (let ((?x379 (+ y ?x165)))
 (let ((?x60 (+ u v)))
 (let ((?x670 (+ (* (- 1) (* ?x379 ?x379 v)) (* (- 1) (* ?x60 ?x379 ?x379 ?x379 x x v)) (* ?x60 ?x60 ?x379 v) (* (- 1) (* x x v v)) (* ?x60 ?x379 ?x379 x x))))
 (let ((?x709 (* (- 1) k!10)))
 (let ((?x406 (* ?x379 v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x707 (* (- 1) k!00)))
 (let ((?x706 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x197 (+ (* (- 1) (* ?x44 y y)) (* (- 1) (* ?x44 ?x706 ?x706 y y y u)) (* ?x44 y u u) (* (- 1) (* ?x44 ?x44 ?x706 ?x706)) (* ?x706 ?x706 y y u))))
 (let (($x678 (or (not (= (* (+ ?x707 (* ?x706 u) (* ?x44 y) ?x709) ?x197) 0)) (not (= (* (+ ?x707 ?x61 ?x406 ?x709) ?x670) 0)))))
 (let (($x705 (and (= (+ ?x707 (* x u) (* y v) ?x709) 0) $x678)))
 (let ((?x324 (* (+ (* (- 1) (* u00 x00)) ?x61 ?x406 (* (- 1) (* v00 y00))) ?x670)))
 (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x710 (* ?x706 u)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let (($x155 (or (not (= (* (+ ?x89 ?x710 ?x45 ?x105) ?x197) 0)) (not (= ?x324 0)))))
 (let (($x271 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) $x155)))
 (rewrite (= $x271 $x705))))))))))))))))))))))))
 ))
 (let (($x80 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x71 (* v v x x)))
 (let ((?x62 (- y x)))
 (let ((?x60 (+ u v)))
 (let ((?x68 (- (* (- 1) v ?x62 ?x62) (* ?x60 v x x ?x62 ?x62 ?x62))))
 (let ((?x74 (+ (- (+ ?x68 (* ?x60 ?x60 v ?x62)) ?x71) (* ?x60 x x ?x62 ?x62))))
 (let ((?x38 (* v00 y00)))
 (let ((?x75 (* (- (+ (* (- 1) u00 x00) (* ?x60 x) (* v ?x62)) ?x38) ?x74)))
 (let ((?x50 (- (* (- 1) (+ v u) y y) (* u (+ v u) (- x y) (- x y) y y y))))
 (let ((?x54 (- (+ ?x50 (* u u (+ v u) y)) (* (+ v u) (+ v u) (- x y) (- x y)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x29 (- 1)))
 (let ((?x32 (* ?x29 u00 x00)))
 (let ((?x57 (* (- (+ ?x32 (* u (- x y)) ?x45) ?x38) (+ ?x54 (* u (- x y) (- x y) y y)))))
 (and (= (- (+ ?x32 (* u x) (* v y)) ?x38) 0) (or (not (= ?x57 0)) (not (= ?x75 0)))))))))))))))))) :qid k!29))
 ))
 (let ((?x400 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x165 (* (- 1) x)))
 (let ((?x379 (+ y ?x165)))
 (let ((?x60 (+ u v)))
 (let ((?x670 (+ (* (- 1) (* ?x379 ?x379 v)) (* (- 1) (* ?x60 ?x379 ?x379 ?x379 x x v)) (* ?x60 ?x60 ?x379 v) (* (- 1) (* x x v v)) (* ?x60 ?x379 ?x379 x x))))
 (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x406 (* ?x379 v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let ((?x706 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x197 (+ (* (- 1) (* ?x44 y y)) (* (- 1) (* ?x44 ?x706 ?x706 y y y u)) (* ?x44 y u u) (* (- 1) (* ?x44 ?x44 ?x706 ?x706)) (* ?x706 ?x706 y y u))))
 (let (($x155 (or (not (= (* (+ ?x89 (* ?x706 u) (* ?x44 y) ?x105) ?x197) 0)) (not (= (* (+ ?x89 ?x61 ?x406 ?x105) ?x670) 0)))))
 (let (($x271 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) $x155)))
 (let ((?x71 (* v v x x)))
 (let ((?x68 (- (* (- 1) v (- y x) (- y x)) (* ?x60 v x x (- y x) (- y x) (- y x)))))
 (let ((?x74 (+ (- (+ ?x68 (* ?x60 ?x60 v (- y x))) ?x71) (* ?x60 x x (- y x) (- y x)))))
 (let ((?x75 (* (- (+ (* (- 1) u00 x00) ?x61 (* v (- y x))) ?x38) ?x74)))
 (let ((?x50 (- (* (- 1) ?x44 y y) (* u ?x44 (- x y) (- x y) y y y))))
 (let ((?x54 (- (+ ?x50 (* u u ?x44 y)) (* ?x44 ?x44 (- x y) (- x y)))))
 (let ((?x47 (- (+ (* (- 1) u00 x00) (* u (- x y)) (* ?x44 y)) ?x38)))
 (let (($x58 (= (* ?x47 (+ ?x54 (* u (- x y) (- x y) y y))) 0)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x79 (and $x41 (or (not $x58) (not (= ?x75 0))))))
 (rewrite (= $x79 $x271)))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x680 (mp (mp @x81 (quant-intro (proof-bind ?x400) (= $x80 $x175)) $x175) (rewrite (= $x175 $x175)) $x175)))
 (let ((@x268 (mp (mp @x680 (quant-intro (proof-bind ?x681) (= $x175 $x188)) $x188) (quant-intro (proof-bind ?x407) (= $x188 $x399)) $x399)))
 (let ((@x971 (mp~ (mp @x268 (quant-intro (proof-bind ?x216) (= $x399 $x217)) $x217) (sk (~ $x217 $x305)) $x305)))
 (let ((@x964 (mp @x971 (rewrite (= $x305 $x600)) $x600)))
 (let ((@x443 (and-elim @x964 $x986)))
 (let ((@x977 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x986) $x1019)) @x443 $x1019)))
 (let (($x1018 (<= ?x985 0)))
 (let ((@x983 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x986) $x1018)) @x443 $x1018)))
 (let (($x617 (not (<= ?x543 0))))
 (let (($x654 (>= ?x543 0)))
 (let (($x1003 (>= ?x649 0)))
 (let (($x1001 (<= ?x649 0)))
 (let ((@x667 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x994 (not $x1001) (not $x1003))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1001)) @x983 @x977 false) $x1001) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1003)) @x983 @x977 false) $x1003) $x994)))
 (let ((@x647 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1007 $x617 (not $x654))) (unit-resolution (and-elim @x964 $x1011) @x667 $x545) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x654)) @x983 @x977 false) $x654) $x617)))
 ((_ th-lemma arith farkas 1 1 1) @x647 @x983 @x977 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        30
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             408
 :arith-nonlinear-bounds    13
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 61
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.66
 :memory                    3.22
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1094868
 :num-checks                1
 :propagations              14
 :rlimit-count              5034
 :time                      0.01
 :total-time                0.01)
