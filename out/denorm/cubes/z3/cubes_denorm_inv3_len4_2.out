unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x347 (* 2 n!0)))
 (let ((?x516 (* k!2 n!0)))
 (let ((?x525 (* (- 3) c!3)))
 (let ((?x283 (* m!1 n!0)))
 (let ((?x223 (* (- 3) k!2)))
 (let ((?x323 (+ 3 ?x223 ?x283 ?x525 ?x516 ?x347)))
 (let (($x994 (<= ?x323 0)))
 (let ((?x563 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x108 (<= ?x563 (- 1))))
 (let (($x473 (= ?x563 (- 1))))
 (let ((?x226 (+ k!2 c!3)))
 (let ((?x437 (+ m!1 k!2)))
 (let ((?x154 (+ 6 m!1)))
 (let ((?x402 (+ 1 n!0)))
 (let ((?x535 (* k!2 k!2 n!0)))
 (let ((?x510 (* k!2 k!2 k!2)))
 (let ((?x443 (* k!2 k!2 k!2 n!0 n!0)))
 (let ((?x562 (* 2 (* k!2 k!2 k!2 n!0))))
 (let ((?x215 (* k!2 k!2)))
 (let ((?x98 (+ (* k!2 c!3 n!0) (* k!2 k!2 c!3 n!0 n!0) (* m!1 c!3 n!0) ?x215 (* 2 (* m!1 m!1 k!2 n!0)) (* m!1 k!2) (* 2 (* m!1 k!2 c!3 n!0 n!0)) (* k!2 c!3) (* m!1 c!3) (* m!1 k!2 n!0) ?x562 (* k!2 k!2 c!3) (* 2 (* m!1 k!2 k!2 n!0 n!0)) (* (- 1) (* ?x402 ?x154 ?x154 ?x154 ?x437 ?x226 ?x226 ?x226)) ?x443 (* m!1 m!1 k!2 n!0 n!0) (* 2 (* m!1 k!2 c!3)) (* 2 (* m!1 k!2 k!2)) (* m!1 m!1 c!3) (* m!1 m!1 c!3 n!0 n!0) (* 2 (* m!1 m!1 c!3 n!0)) (* 4 (* m!1 k!2 c!3 n!0)) (* 2 (* k!2 k!2 c!3 n!0)) (* 4 (* m!1 k!2 k!2 n!0)) ?x510 ?x535 (* m!1 m!1 k!2) (* ?x402 ?x402 ?x154 ?x154 ?x437 ?x226))))
 (let ((?x371 (* ?x98 ?x323)))
 (let (($x115 (= ?x371 0)))
 (let (($x606 (not $x115)))
 (let ((?x288 (* (- 2) n!0)))
 (let ((?x432 (* (- 1) ?x516)))
 (let ((?x508 (* 3 c!3)))
 (let ((?x610 (+ k!2 ?x508 ?x432 ?x288)))
 (let (($x184 (= ?x610 1)))
 (let ((?x273 (* (- 9) n!0)))
 (let ((?x431 (* 9 (* c!3 n!0))))
 (let ((?x498 (* 18 c!3)))
 (let ((?x322 (* (- 1) ?x215)))
 (let ((?x116 (* 5 k!2)))
 (let ((?x111 (+ m!1 (* (- 6) n!0))))
 (let (($x164 (= ?x111 6)))
 (let (($x114 (and $x164 (= (+ ?x116 ?x322 ?x498 ?x431 ?x273) 4) $x184 $x473 $x606)))
 (let ((?x501 (+ c!3 k!2)))
 (let ((?x507 (+ k!2 m!1)))
 (let ((?x532 (+ ?x215 (* ?x402 ?x402 ?x154 ?x154 ?x507 ?x501) (* (- 1) (* ?x402 ?x154 ?x154 ?x154 ?x507 ?x501 ?x501 ?x501)) (* c!3 k!2 k!2 n!0 n!0) ?x443 (* 2 (* c!3 k!2 m!1 n!0 n!0)) (* 2 (* k!2 k!2 m!1 n!0 n!0)) (* c!3 m!1 m!1 n!0 n!0) (* k!2 m!1 m!1 n!0 n!0) (* c!3 k!2 k!2) ?x510 (* 2 (* c!3 k!2 m!1)) (* 2 (* k!2 k!2 m!1)) (* c!3 m!1 m!1) (* k!2 m!1 m!1) (* 2 (* c!3 k!2 k!2 n!0)) ?x562 (* 4 (* c!3 k!2 m!1 n!0)) (* 4 (* k!2 k!2 m!1 n!0)) (* 2 (* c!3 m!1 m!1 n!0)) (* 2 (* k!2 m!1 m!1 n!0)) (* k!2 m!1) (* c!3 m!1) (* c!3 k!2) (* k!2 m!1 n!0) (* c!3 m!1 n!0) ?x535 (* c!3 k!2 n!0))))
 (let (($x238 (and $x164 (= (+ ?x498 ?x116 ?x273 ?x322 ?x431) 4) (= (+ ?x508 k!2 ?x288 ?x432) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x532 (+ 3 ?x525 ?x223 ?x347 ?x516 ?x283)) 0)))))
 (let (($x305 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x626 (* c k n)))
 (let ((?x625 (* k k n)))
 (let ((?x624 (* c m n)))
 (let ((?x623 (* k m n)))
 (let ((?x617 (* c k)))
 (let ((?x612 (* c m)))
 (let ((?x609 (* k m)))
 (let ((?x551 (* 2 (* k m m n))))
 (let ((?x550 (* 2 (* c m m n))))
 (let ((?x549 (* 4 (* k k m n))))
 (let ((?x548 (* 4 (* c k m n))))
 (let ((?x547 (* 2 (* k k k n))))
 (let ((?x546 (* 2 (* c k k n))))
 (let ((?x482 (* k m m)))
 (let ((?x479 (* c m m)))
 (let ((?x545 (* 2 (* k k m))))
 (let ((?x544 (* 2 (* c k m))))
 (let ((?x456 (* k k k)))
 (let ((?x453 (* c k k)))
 (let ((?x447 (* k m m n n)))
 (let ((?x446 (* c m m n n)))
 (let ((?x553 (* 2 (* k k m n n))))
 (let ((?x552 (* 2 (* c k m n n))))
 (let ((?x441 (* k k k n n)))
 (let ((?x440 (* c k k n n)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x561 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x129 (* (- 1) (* ?x340 ?x561 ?x561 ?x561 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x156 (* ?x340 ?x340 ?x561 ?x561 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x505 (+ ?x49 ?x156 ?x129 ?x440 ?x441 ?x552 ?x553 ?x446 ?x447 ?x453 ?x456 ?x544 ?x545 ?x479 ?x482 ?x546 ?x547 ?x548 ?x549 ?x550 ?x551 ?x609 ?x612 ?x617 ?x623 ?x624 ?x625 ?x626)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x505 ?x408) 0)))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x227 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x234 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x561 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x156 (* ?x340 ?x340 ?x561 ?x561 ?x71 ?x68)))
 (let ((?x129 (* (- 1) (* ?x340 ?x561 ?x561 ?x561 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x198 (* (+ (* ?x340 ?x340 ?x71 ?x71 ?x68) ?x129 (* ?x340 ?x71 ?x68) ?x156) ?x234)))
 (let (($x637 (not (= ?x198 0))))
 (let (($x333 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x467 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x467 $x333 $x637)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x252 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x626 (* c k n)))
 (let ((?x625 (* k k n)))
 (let ((?x624 (* c m n)))
 (let ((?x623 (* k m n)))
 (let ((?x617 (* c k)))
 (let ((?x612 (* c m)))
 (let ((?x609 (* k m)))
 (let ((?x551 (* 2 (* k m m n))))
 (let ((?x550 (* 2 (* c m m n))))
 (let ((?x549 (* 4 (* k k m n))))
 (let ((?x548 (* 4 (* c k m n))))
 (let ((?x547 (* 2 (* k k k n))))
 (let ((?x546 (* 2 (* c k k n))))
 (let ((?x482 (* k m m)))
 (let ((?x479 (* c m m)))
 (let ((?x545 (* 2 (* k k m))))
 (let ((?x544 (* 2 (* c k m))))
 (let ((?x456 (* k k k)))
 (let ((?x453 (* c k k)))
 (let ((?x447 (* k m m n n)))
 (let ((?x446 (* c m m n n)))
 (let ((?x553 (* 2 (* k k m n n))))
 (let ((?x552 (* 2 (* c k m n n))))
 (let ((?x441 (* k k k n n)))
 (let ((?x440 (* c k k n n)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x561 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x129 (* (- 1) (* ?x340 ?x561 ?x561 ?x561 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x156 (* ?x340 ?x340 ?x561 ?x561 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x505 (+ ?x49 ?x156 ?x129 ?x440 ?x441 ?x552 ?x553 ?x446 ?x447 ?x453 ?x456 ?x544 ?x545 ?x479 ?x482 ?x546 ?x547 ?x548 ?x549 ?x550 ?x551 ?x609 ?x612 ?x617 ?x623 ?x624 ?x625 ?x626)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x430 (and $x123 $x207 $x259 $x297 (not (= (* ?x505 ?x408) 0)))))
 (let ((?x198 (* (+ (* ?x340 ?x340 ?x71 ?x71 ?x68) ?x129 (* ?x340 ?x71 ?x68) ?x156) (+ 3 ?x220 (* (- 4) k) (* ?x340 ?x71) (* (- 1) m) ?x59))))
 (let (($x637 (not (= ?x198 0))))
 (let (($x333 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x467 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x183 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x467 $x333 $x637)))
 (rewrite (= $x183 $x430))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x636 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x234 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x561 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x156 (* ?x340 ?x340 ?x561 ?x561 ?x71 ?x68)))
 (let ((?x129 (* (- 1) (* ?x340 ?x561 ?x561 ?x561 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x198 (* (+ (* ?x340 ?x340 ?x71 ?x71 ?x68) ?x129 (* ?x340 ?x71 ?x68) ?x156) ?x234)))
 (let (($x637 (not (= ?x198 0))))
 (let (($x333 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x139 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x139 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x333 $x637))))))))))))))))) :qid k!34))
 ))
 (let ((?x228 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x234 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x561 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x156 (* ?x340 ?x340 ?x561 ?x561 ?x71 ?x68)))
 (let ((?x129 (* (- 1) (* ?x340 ?x561 ?x561 ?x561 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x198 (* (+ (* ?x340 ?x340 ?x71 ?x71 ?x68) ?x129 (* ?x340 ?x71 ?x68) ?x156) ?x234)))
 (let (($x637 (not (= ?x198 0))))
 (let (($x333 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x467 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x183 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x467 $x333 $x637)))
 (let ((?x48 (* 9 n)))
 (let ((?x139 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x224 (and $x123 (= ?x139 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x333 $x637)))
 (rewrite (= $x224 $x183))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x81 (- (* ?x68 ?x71 ?x71 ?x72 ?x72) (* ?x68 ?x68 ?x68 ?x71 ?x79 ?x79 ?x79 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x85 (* ?x77 (+ ?x81 (* ?x68 ?x71 ?x72) (* ?x68 ?x71 ?x79 ?x79 ?x72 ?x72)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x229 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x234 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x561 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x156 (* ?x340 ?x340 ?x561 ?x561 ?x71 ?x68)))
 (let ((?x129 (* (- 1) (* ?x340 ?x561 ?x561 ?x561 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x198 (* (+ (* ?x340 ?x340 ?x71 ?x71 ?x68) ?x129 (* ?x340 ?x71 ?x68) ?x156) ?x234)))
 (let (($x637 (not (= ?x198 0))))
 (let (($x333 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x139 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x224 (and $x123 (= ?x139 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x333 $x637)))
 (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x81 (- (* ?x68 ?x71 ?x71 ?x72 ?x72) (* ?x68 ?x68 ?x68 ?x71 ?x79 ?x79 ?x79 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x85 (* ?x77 (+ ?x81 (* ?x68 ?x71 ?x72) (* ?x68 ?x71 ?x79 ?x79 ?x72 ?x72)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0))))))
 (rewrite (= $x89 $x224))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x303 (mp (mp @x91 (quant-intro (proof-bind ?x229) (= $x90 $x636)) $x636) (rewrite (= $x636 $x636)) $x636)))
 (let ((@x165 (mp (mp @x303 (quant-intro (proof-bind ?x228) (= $x636 $x227)) $x227) (quant-intro (proof-bind ?x252) (= $x227 $x305)) $x305)))
 (let ((@x452 (mp (mp~ @x165 (sk (~ $x305 $x238)) $x238) (rewrite (= $x238 $x114)) $x114)))
 (let ((@x433 (and-elim @x452 $x473)))
 (let ((@x378 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x473) $x108)) @x433 $x108)))
 (let (($x109 (>= ?x563 (- 1))))
 (let ((@x265 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x473) $x109)) @x433 $x109)))
 (let (($x244 (<= ?x610 1)))
 (let ((@x520 (and-elim @x452 $x184)))
 (let ((@x218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x244)) @x520 $x244)))
 (let (($x102 (>= ?x610 1)))
 (let ((@x120 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x102)) @x520 $x102)))
 (let (($x153 (<= ?x111 6)))
 (let ((@x484 (and-elim @x452 $x164)))
 (let ((@x117 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x153)) @x484 $x153)))
 (let (($x394 (>= ?x111 6)))
 (let ((@x202 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x394)) @x484 $x394)))
 (let ((@x1025 ((_ th-lemma arith) (hypothesis (not $x994)) @x202 @x117 @x120 @x218 @x265 @x378 false)))
 (let ((@x1026 (lemma @x1025 $x994)))
 (let (($x982 (>= ?x323 0)))
 (let ((@x964 ((_ th-lemma arith) (hypothesis (not $x982)) @x202 @x117 @x120 @x218 @x265 @x378 false)))
 (let ((@x922 (lemma @x964 $x982)))
 (let (($x1002 (not (<= ?x371 0))))
 (let (($x521 (>= ?x371 0)))
 (let (($x670 (= ?x323 0)))
 (let ((@x979 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x670 (not $x994) (not $x982))) @x1026 (or $x670 (not $x982)))))
 (let ((@x941 (hypothesis $x670)))
 (let ((@x1018 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x521)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x670) $x982)) @x941 $x982) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x670) $x994)) @x941 $x994) false)))
 (let ((@x842 (unit-resolution (lemma @x1018 (or (not $x670) $x521)) (unit-resolution @x979 @x922 $x670) $x521)))
 (let ((@x864 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x115 $x1002 (not $x521))) (and-elim @x452 $x606) (or $x1002 (not $x521)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x864 @x842 $x1002) @x922 @x1026 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 122
 :arith-assert-diseq        6
 :arith-assert-lower        721
 :arith-assert-upper        469
 :arith-bound-prop          2
 :arith-branch-var          14
 :arith-conflicts           38
 :arith-eq-adapter          14
 :arith-fixed-eqs           196
 :arith-gcd-tests           155
 :arith-gomory-cuts         11
 :arith-grobner             40
 :arith-ineq-splits         14
 :arith-max-min             5844
 :arith-nonlinear-bounds    291
 :arith-nonlinear-horner    476
 :arith-num-rows            26
 :arith-offset-eqs          11
 :arith-patches             28
 :arith-patches_succ        1
 :arith-pivots              719
 :arith-pseudo-nonlinear    200
 :arith-row-summations      4603
 :arith-tableau-max-columns 85
 :arith-tableau-max-rows    26
 :conflicts                 38
 :decisions                 129
 :del-clause                95
 :final-checks              115
 :max-memory                4.00
 :memory                    3.22
 :minimized-lits            12
 :mk-bool-var               230
 :mk-clause                 167
 :num-allocs                28392829
 :num-checks                1
 :propagations              149
 :rlimit-count              848743
 :time                      0.34
 :total-time                0.35)
