unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x481 (+ (* (- 1.0) (to_real (* b00 x00))) ?x147)))
 (let (($x201 (>= ?x481 0.0)))
 (let (($x112 (= 0.0 ?x481)))
 (let ((@x107 (symm (commutativity (= $x112 (= ?x481 0.0))) (= (= ?x481 0.0) $x112))))
 (let (($x229 (= ?x481 0.0)))
 (let ((@x361 (lemma (unit-resolution ((_ th-lemma arith) $x229) (hypothesis (not $x229)) false) $x229)))
 (let ((@x128 (mp @x361 @x107 $x112)))
 (let ((@x272 ((_ th-lemma arith triangle-eq) (or (not $x112) $x201))))
 (let (($x403 (<= ?x481 0.0)))
 (let ((@x482 ((_ th-lemma arith triangle-eq) (or (not $x112) $x403))))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x238 (to_real x!0)))
 (let ((?x102 (to_real b!2)))
 (let ((?x410 (* ?x102 ?x238)))
 (let ((?x208 (to_real r!1)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x399 (+ ?x150 ?x208 ?x410 ?x136)))
 (let (($x374 (>= ?x399 0.0)))
 (let (($x195 (not $x403)))
 (let ((?x87 (* b00 x00)))
 (let ((?x433 (+ r00 ?x87 (* (- 1) r!1) (* (- 1) (* x!0 b!2)))))
 (let (($x316 (<= ?x433 0)))
 (let (($x377 (= 0 ?x433)))
 (let ((@x135 (symm (commutativity (= $x377 (= ?x433 0))) (= (= ?x433 0) $x377))))
 (let (($x381 (= ?x433 0)))
 (let ((?x502 (* ?x102 ?x102 ?x238)))
 (let ((?x455 (* (/ 1.0 4.0) (* ?x102 ?x102))))
 (let ((?x83 (* (- 1.0) ?x208)))
 (let ((?x303 (* (/ 1.0 2.0) ?x102)))
 (let ((?x98 (* (- (/ 1.0 4.0)) (* ?x102 ?x102 ?x102 ?x238))))
 (let ((?x91 (* (- (/ 1.0 8.0)) (* ?x102 ?x102 ?x102))))
 (let ((?x84 (* ?x102 ?x102 ?x238 ?x238)))
 (let (($x277 (= (* (+ ?x84 ?x91 ?x98 ?x303 ?x83 ?x455 ?x502) (+ ?x136 ?x150 ?x208 ?x410)) 0.0)))
 (let (($x409 (not $x277)))
 (let ((?x182 (* (- 1.0) (* ?x102 ?x102 ?x102 ?x238 ?x238 ?x238))))
 (let ((?x167 (* ?x208 ?x208)))
 (let ((?x100 (* (/ 1.0 4.0) (* ?x102 ?x102 ?x102 ?x102 ?x238 ?x238))))
 (let ((?x470 (+ ?x100 (* ?x102 ?x102 ?x145 ?x146 ?x238 ?x238) (* (- (/ 1.0 4.0)) (* ?x102 ?x102 ?x102 ?x145 ?x146 ?x238)) ?x167 (* (/ 1.0 4.0) (* ?x102 ?x102 ?x102 ?x208 ?x238)) (* (- (/ 1.0 4.0)) (* ?x61 ?x102 ?x102 ?x102 ?x238)) ?x182 (* (- 1.0) (* ?x61 ?x208)) (* ?x102 ?x208 ?x238) (* ?x61 ?x102 ?x102 ?x238 ?x238) (* (- 1.0) (* ?x102 ?x102 ?x208 ?x238 ?x238)) (* (- 1.0) (* ?x145 ?x146 ?x208)))))
 (let (($x170 (= ?x470 0.0)))
 (let (($x447 (not $x170)))
 (let (($x119 (or $x447 $x409)))
 (let (($x231 (and $x381 $x119)))
 (let (($x212 (= (* (+ ?x303 ?x83 ?x84 ?x98 ?x455 ?x502 ?x91) (+ ?x208 ?x136 ?x410 ?x150)) 0.0)))
 (let ((?x101 (+ ?x167 (* (- 1.0) (* ?x208 ?x61)) (* (- 1.0) (* ?x208 ?x145 ?x146)) (* ?x102 ?x238 ?x208) (* (- 1.0) (* ?x102 ?x102 ?x238 ?x238 ?x208)) (* ?x102 ?x102 ?x238 ?x238 ?x61) (* ?x102 ?x102 ?x238 ?x238 ?x145 ?x146) ?x182 (* (/ 1.0 4.0) (* ?x102 ?x102 ?x102 ?x238 ?x208)) (* (- (/ 1.0 4.0)) (* ?x102 ?x102 ?x102 ?x238 ?x61)) (* (- (/ 1.0 4.0)) (* ?x102 ?x102 ?x102 ?x238 ?x145 ?x146)) ?x100)))
 (let (($x456 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x87)) 0) (or (not (= ?x101 0.0)) (not $x212)))))
 (let (($x476 (exists ((b Int) (r Int) (x Int) )(! (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x57 (to_real r)))
 (let ((?x206 (* (- (/ 1.0 4.0)) (* (to_real b) (to_real b) (to_real b) (to_real x)))))
 (let ((?x189 (* (- 1.0) ?x57)))
 (let ((?x40 (to_real b)))
 (let ((?x157 (* (/ 1.0 2.0) ?x40)))
 (let ((?x501 (+ ?x157 ?x189 (* ?x40 ?x40 (to_real x) (to_real x)) ?x206 (* (/ 1.0 4.0) (* ?x40 ?x40)) (* ?x40 ?x40 (to_real x)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)))))
 (let (($x404 (not (= (* ?x501 (+ ?x57 ?x136 (* ?x40 (to_real x)) ?x150)) 0.0))))
 (let ((?x293 (* (- 1.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) (to_real x)))))
 (let ((?x275 (+ (* ?x57 ?x57) (* (- 1.0) (* ?x57 ?x61)) (* (- 1.0) (* ?x57 ?x145 ?x146)) (* ?x40 (to_real x) ?x57) (* (- 1.0) (* ?x40 ?x40 (to_real x) (to_real x) ?x57)) (* ?x40 ?x40 (to_real x) (to_real x) ?x61) (* ?x40 ?x40 (to_real x) (to_real x) ?x145 ?x146) ?x293 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 (to_real x) ?x57)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 (to_real x) ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 (to_real x) ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x))))))
 (let (($x264 (not (= ?x275 0.0))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x123 (or $x264 $x404))))))))))))))))))) :qid k!28))
 ))
 (let (($x139 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x57 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x178 (+ ?x150 ?x57 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x322 (* 2.0 ?x43)))
 (let ((?x173 (+ 1.0 ?x322)))
 (let ((?x157 (* (/ 1.0 2.0) ?x40)))
 (let ((?x189 (* (- 1.0) ?x57)))
 (let ((?x378 (+ ?x189 ?x157 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x173 ?x173)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x173)))))
 (let ((?x296 (+ ?x189 (* ?x43 ?x43 ?x40 ?x40) (* (- (/ 1.0 4.0)) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x315 (or (not (= (* ?x296 (+ ?x150 ?x57 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x378 ?x178) 0.0)))))
 (let (($x304 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x304 $x315)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x471 (lambda ((b Int) (r Int) (x Int) )(let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x57 (to_real r)))
 (let ((?x206 (* (- (/ 1.0 4.0)) (* (to_real b) (to_real b) (to_real b) (to_real x)))))
 (let ((?x189 (* (- 1.0) ?x57)))
 (let ((?x40 (to_real b)))
 (let ((?x157 (* (/ 1.0 2.0) ?x40)))
 (let ((?x501 (+ ?x157 ?x189 (* ?x40 ?x40 (to_real x) (to_real x)) ?x206 (* (/ 1.0 4.0) (* ?x40 ?x40)) (* ?x40 ?x40 (to_real x)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)))))
 (let (($x404 (not (= (* ?x501 (+ ?x57 ?x136 (* ?x40 (to_real x)) ?x150)) 0.0))))
 (let ((?x293 (* (- 1.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) (to_real x)))))
 (let ((?x275 (+ (* ?x57 ?x57) (* (- 1.0) (* ?x57 ?x61)) (* (- 1.0) (* ?x57 ?x145 ?x146)) (* ?x40 (to_real x) ?x57) (* (- 1.0) (* ?x40 ?x40 (to_real x) (to_real x) ?x57)) (* ?x40 ?x40 (to_real x) (to_real x) ?x61) (* ?x40 ?x40 (to_real x) (to_real x) ?x145 ?x146) ?x293 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 (to_real x) ?x57)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 (to_real x) ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 (to_real x) ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x))))))
 (let (($x264 (not (= ?x275 0.0))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x364 (and $x123 (or $x264 $x404))))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x178 (+ ?x150 ?x57 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x322 (* 2.0 ?x43)))
 (let ((?x173 (+ 1.0 ?x322)))
 (let ((?x378 (+ ?x189 ?x157 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x173 ?x173)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x173)))))
 (let ((?x296 (+ ?x189 (* ?x43 ?x43 ?x40 ?x40) (* (- (/ 1.0 4.0)) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x315 (or (not (= (* ?x296 (+ ?x150 ?x57 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x378 ?x178) 0.0)))))
 (let (($x304 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x90 (and $x304 $x315)))
 (rewrite (= $x90 $x364)))))))))))))))))))))))))))))))
 ))
 (let (($x353 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x57 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x178 (+ ?x150 ?x57 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x322 (* 2.0 ?x43)))
 (let ((?x173 (+ 1.0 ?x322)))
 (let ((?x157 (* (/ 1.0 2.0) ?x40)))
 (let ((?x189 (* (- 1.0) ?x57)))
 (let ((?x378 (+ ?x189 ?x157 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x173 ?x173)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x173)))))
 (let ((?x296 (+ ?x189 (* ?x43 ?x43 ?x40 ?x40) (* (- (/ 1.0 4.0)) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x315 (or (not (= (* ?x296 (+ ?x150 ?x57 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x378 ?x178) 0.0)))))
 (let (($x215 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x215 $x315)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x228 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x57 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x178 (+ ?x150 ?x57 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x322 (* 2.0 ?x43)))
 (let ((?x173 (+ 1.0 ?x322)))
 (let ((?x157 (* (/ 1.0 2.0) ?x40)))
 (let ((?x189 (* (- 1.0) ?x57)))
 (let ((?x378 (+ ?x189 ?x157 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x173 ?x173)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x173)))))
 (let ((?x296 (+ ?x189 (* ?x43 ?x43 ?x40 ?x40) (* (- (/ 1.0 4.0)) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x315 (or (not (= (* ?x296 (+ ?x150 ?x57 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x378 ?x178) 0.0)))))
 (let (($x304 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x90 (and $x304 $x315)))
 (let (($x215 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x120 (and $x215 $x315)))
 (rewrite (= $x120 $x90)))))))))))))))))))))))))
 ))
 (let (($x79 (exists ((b Int) (r Int) (x Int) )(! (let ((?x54 (to_real 0)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x71 (+ (* (to_real (- 1)) (- (to_real r) ?x42)) (* ?x42 ?x42 ?x65 ?x65))))
 (let ((?x61 (to_real r00)))
 (let ((?x62 (- (+ (to_real (* (- 1) b00 x00)) (- (to_real r) ?x42)) ?x61)))
 (let (($x75 (= (* (+ ?x62 (* ?x42 ?x65)) (- ?x71 (* ?x42 ?x42 ?x42 ?x65))) ?x54)))
 (let ((?x50 (+ (to_real (* (- 1) r)) (* ?x42 ?x42 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x56 (not (= (* ?x46 (- ?x50 (* ?x42 ?x42 ?x42 ?x41 (to_real x)))) ?x54))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or $x56 (not $x75)))))))))))))))) :qid k!28))
 ))
 (let ((?x144 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x57 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x178 (+ ?x150 ?x57 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x322 (* 2.0 ?x43)))
 (let ((?x173 (+ 1.0 ?x322)))
 (let ((?x157 (* (/ 1.0 2.0) ?x40)))
 (let ((?x189 (* (- 1.0) ?x57)))
 (let ((?x378 (+ ?x189 ?x157 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x173 ?x173)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x173)))))
 (let ((?x296 (+ ?x189 (* ?x43 ?x43 ?x40 ?x40) (* (- (/ 1.0 4.0)) (* ?x43 ?x40 ?x40 ?x40)))))
 (let (($x315 (or (not (= (* ?x296 (+ ?x150 ?x57 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x378 ?x178) 0.0)))))
 (let (($x215 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x120 (and $x215 $x315)))
 (let ((?x54 (to_real 0)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x73 (- (+ (* (to_real (- 1)) (- ?x57 ?x42)) (* ?x42 ?x42 ?x65 ?x65)) (* ?x42 ?x42 ?x42 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) (- ?x57 ?x42)) ?x61) (* ?x42 ?x65))))
 (let ((?x52 (- (+ (to_real (* (- 1) r)) (* ?x42 ?x42 ?x41 ?x43 ?x41 ?x43)) (* ?x42 ?x42 ?x42 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x78 (and $x38 (or (not (= (* ?x46 ?x52) ?x54)) (not (= (* ?x67 ?x73) ?x54))))))
 (rewrite (= $x78 $x120)))))))))))))))))))))))))))))))))
 ))
 (let ((@x80 (asserted $x79)))
 (let ((@x504 (mp (mp @x80 (quant-intro (proof-bind ?x144) (= $x79 $x353)) $x353) (rewrite (= $x353 $x353)) $x353)))
 (let ((@x449 (mp (mp @x504 (quant-intro (proof-bind ?x228) (= $x353 $x139)) $x139) (quant-intro (proof-bind ?x471) (= $x139 $x476)) $x476)))
 (let ((@x440 (mp (mp~ @x449 (sk (~ $x476 $x456)) $x456) (rewrite (= $x456 $x231)) $x231)))
 (let ((@x368 (mp (and-elim @x440 $x381) @x135 $x377)))
 (let ((@x460 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x377) $x316)) @x368 $x316)))
 (let ((?x390 (* x!0 b!2)))
 (let ((?x458 (to_real ?x390)))
 (let ((?x211 (+ ?x458 (* (- 1.0) ?x410))))
 (let (($x240 (<= ?x211 0.0)))
 (let ((@x203 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x211 0.0)) $x240)) ((_ th-lemma arith) (= ?x211 0.0)) $x240)))
 (let ((@x493 (unit-resolution ((_ th-lemma arith) (or (not $x316) $x374 (not $x240) $x195)) @x203 @x460 (hypothesis (not $x374)) $x195)))
 (let ((@x405 (lemma (unit-resolution @x482 @x493 (mp (hypothesis $x229) @x107 $x112) false) (or (not $x229) $x374))))
 (let ((@x379 (unit-resolution @x405 @x361 $x374)))
 (let (($x442 (<= ?x399 0.0)))
 (let ((?x472 (+ (* (- 1.0) ?x458) ?x410)))
 (let (($x132 (<= ?x472 0.0)))
 (let (($x467 (= 0.0 ?x472)))
 (let ((@x224 (symm (commutativity (= $x467 (= ?x472 0.0))) (= (= ?x472 0.0) $x467))))
 (let ((@x496 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x467) $x132)) (mp ((_ th-lemma arith) (= ?x472 0.0)) @x224 $x467) $x132)))
 (let (($x393 (>= ?x433 0)))
 (let ((@x92 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x377) $x393)) @x368 $x393)))
 (let ((@x257 ((_ th-lemma arith) (hypothesis (not $x442)) (unit-resolution @x272 (mp ((_ th-lemma arith) $x229) @x107 $x112) $x201) @x92 @x496 false)))
 (let ((@x258 (lemma @x257 $x442)))
 (let (($x395 (>= ?x470 0.0)))
 (let (($x117 (not $x395)))
 (let (($x394 (= 0.0 ?x470)))
 (let (($x506 (not $x394)))
 (let ((@x115 (monotonicity (symm (commutativity (= $x394 $x170)) (= $x170 $x394)) (= $x447 $x506))))
 (let (($x295 (= 0.0 ?x399)))
 (let ((@x402 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x295 (not $x442) (not $x374))) @x258 @x379 $x295)))
 (let (($x288 (= ?x399 0.0)))
 (let (($x247 (not $x288)))
 (let ((@x348 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x247 $x277)) (hypothesis $x409) $x247) (symm (hypothesis $x295) $x288) false)))
 (let ((@x480 (unit-resolution (and-elim @x440 $x119) (unit-resolution (lemma @x348 (or (not $x295) $x277)) @x402 $x277) $x447)))
 (let (($x318 (<= ?x470 0.0)))
 (let ((@x411 (unit-resolution ((_ th-lemma arith) (or $x318 (not $x393) (not $x316))) @x460 @x92 (hypothesis (not $x318)) false)))
 (let ((@x127 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x394 (not $x318) $x117)) (lemma @x411 $x318) (mp @x480 @x115 $x506) $x117)))
 (unit-resolution ((_ th-lemma arith) (or (not $x374) (not $x442) $x395 (not $x201) $x195)) @x127 @x258 @x379 (unit-resolution @x482 @x128 $x403) (unit-resolution @x272 @x128 $x201) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      25
 :arith-eq-adapter               28
 :arith-bound-propagations-cheap 20
 :arith-bound-propagations-lp    2
 :arith-conflicts                33
 :arith-diseq                    27
 :arith-gcd-calls                4
 :arith-grobner-calls            3
 :arith-grobner-conflicts        2
 :arith-horner-calls             3
 :arith-lower                    36
 :arith-make-feasible            28
 :arith-max-columns              55
 :arith-max-rows                 15
 :arith-nla-explanations         54
 :arith-nla-lemmas               32
 :arith-patches                  4
 :arith-patches-success          4
 :arith-propagations             20
 :arith-upper                    30
 :conflicts                      7
 :decisions                      38
 :del-clause                     69
 :final-checks                   21
 :max-memory                     4.09
 :memory                         3.09
 :mk-bool-var                    116
 :mk-clause                      128
 :num-allocs                     1554660
 :num-checks                     1
 :propagations                   57
 :rlimit-count                   3706
 :time                           0.01
 :total-time                     0.02)
