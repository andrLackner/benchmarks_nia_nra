unsat
((set-logic NRA)
(proof
(let (($x219 (exists ((b Real) (x Real) )(! (let ((?x637 (* (- (/ 1.0 2.0)) b)))
 (let ((?x635 (* x b)))
 (let ((?x636 (* (- 1.0) ?x635)))
 (let ((?x80 (* b00 x00)))
 (let ((?x656 (+ ?x80 r00 ?x636 ?x637)))
 (let ((?x54 (* 2.0 x)))
 (let ((?x567 (+ 1.0 ?x54)))
 (let ((?x132 (* (/ 1.0 2.0) (* ?x567 ?x567 ?x567 ?x656 ?x656 b))))
 (let ((?x232 (* (/ 1.0 2.0) b)))
 (let ((?x97 (* (- 1.0) r00)))
 (let ((?x81 (* (- 1.0) ?x80)))
 (let ((?x210 (+ ?x81 ?x97 ?x635 ?x232 ?x132)))
 (let ((?x225 (* ?x567 b)))
 (let ((?x226 (* (/ 1.0 2.0) ?x225)))
 (let ((?x231 (+ ?x636 ?x637 ?x226)))
 (let ((?x706 (* ?x567 ?x567 ?x656 b b)))
 (let ((?x708 (* (/ 1.0 4.0) ?x706)))
 (let ((?x192 (* (/ 1.0 8.0) (* ?x567 ?x567 ?x656 ?x656 ?x656 b b b))))
 (let ((?x223 (+ ?x192 ?x708)))
 (let ((?x175 (* ?x567 ?x567 ?x567 b b b)))
 (let ((?x178 (* (- (/ 1.0 8.0)) ?x175)))
 (let ((?x149 (* ?x567 ?x567 ?x656 b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x149)))
 (let ((?x180 (+ ?x174 ?x178)))
 (let ((?x212 (* ?x180 ?x223 ?x231 ?x210)))
 (let (($x183 (= ?x212 0.0)))
 (not $x183))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x327 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x340 (lambda ((b Real) (x Real) )(let ((?x637 (* (- (/ 1.0 2.0)) b)))
 (let ((?x635 (* x b)))
 (let ((?x636 (* (- 1.0) ?x635)))
 (let ((?x80 (* b00 x00)))
 (let ((?x656 (+ ?x80 r00 ?x636 ?x637)))
 (let ((?x54 (* 2.0 x)))
 (let ((?x567 (+ 1.0 ?x54)))
 (let ((?x132 (* (/ 1.0 2.0) (* ?x567 ?x567 ?x567 ?x656 ?x656 b))))
 (let ((?x232 (* (/ 1.0 2.0) b)))
 (let ((?x97 (* (- 1.0) r00)))
 (let ((?x81 (* (- 1.0) ?x80)))
 (let ((?x210 (+ ?x81 ?x97 ?x635 ?x232 ?x132)))
 (let ((?x225 (* ?x567 b)))
 (let ((?x226 (* (/ 1.0 2.0) ?x225)))
 (let ((?x231 (+ ?x636 ?x637 ?x226)))
 (let ((?x706 (* ?x567 ?x567 ?x656 b b)))
 (let ((?x708 (* (/ 1.0 4.0) ?x706)))
 (let ((?x192 (* (/ 1.0 8.0) (* ?x567 ?x567 ?x656 ?x656 ?x656 b b b))))
 (let ((?x223 (+ ?x192 ?x708)))
 (let ((?x175 (* ?x567 ?x567 ?x567 b b b)))
 (let ((?x178 (* (- (/ 1.0 8.0)) ?x175)))
 (let ((?x149 (* ?x567 ?x567 ?x656 b)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x149)))
 (let ((?x180 (+ ?x174 ?x178)))
 (let ((?x212 (* ?x180 ?x223 ?x231 ?x210)))
 (let (($x183 (= ?x212 0.0)))
 (let (($x217 (not $x183)))
 (let ((?x746 (+ ?x637 r00 ?x80 ?x636)))
 (let ((?x447 (* (/ 1.0 2.0) (* ?x567 ?x567 ?x567 ?x746 ?x746 b))))
 (let ((?x286 (+ ?x232 ?x97 ?x81 ?x447 ?x635)))
 (let ((?x1055 (* b b r00)))
 (let ((?x1115 (* (/ 1.0 4.0) ?x1055)))
 (let ((?x1010 (* x b b r00)))
 (let ((?x997 (* x x b b r00)))
 (let ((?x993 (* b b b00 x00)))
 (let ((?x1111 (* (/ 1.0 4.0) ?x993)))
 (let ((?x985 (* x b b b00 x00)))
 (let ((?x968 (* x x b b b00 x00)))
 (let ((?x967 (* (/ 1.0 8.0) (* ?x567 ?x567 ?x746 ?x746 ?x746 b b b))))
 (let ((?x917 (* x x x b b b)))
 (let ((?x953 (* (- 1.0) ?x917)))
 (let ((?x906 (* x x b b b)))
 (let ((?x948 (* (- (/ 3.0 2.0)) ?x906)))
 (let ((?x895 (* b b b)))
 (let ((?x939 (* (- (/ 1.0 8.0)) ?x895)))
 (let ((?x881 (* x b b b)))
 (let ((?x949 (* (- (/ 3.0 4.0)) ?x881)))
 (let ((?x1131 (+ ?x949 ?x939 ?x948 ?x953 ?x967 ?x968 ?x985 ?x1111 ?x997 ?x1010 ?x1115)))
 (let ((?x838 (* x x x b b)))
 (let ((?x897 (* 2.0 ?x838)))
 (let ((?x822 (* x x b b00 x00)))
 (let ((?x894 (* (- 2.0) ?x822)))
 (let ((?x804 (* x b b00 x00)))
 (let ((?x891 (* (- 2.0) ?x804)))
 (let ((?x802 (* b b00 x00)))
 (let ((?x863 (* (- (/ 1.0 2.0)) ?x802)))
 (let ((?x784 (* b r00)))
 (let ((?x865 (* (- (/ 1.0 2.0)) ?x784)))
 (let ((?x780 (* x x b r00)))
 (let ((?x888 (* (- 2.0) ?x780)))
 (let ((?x773 (* x b r00)))
 (let ((?x885 (* (- 2.0) ?x773)))
 (let ((?x762 (* x x b b)))
 (let ((?x882 (* 3.0 ?x762)))
 (let ((?x756 (* x b b)))
 (let ((?x879 (* (/ 3.0 2.0) ?x756)))
 (let ((?x747 (* b b)))
 (let ((?x874 (* (/ 1.0 4.0) ?x747)))
 (let ((?x947 (+ ?x874 ?x879 ?x882 ?x885 ?x888 ?x865 ?x863 ?x891 ?x894 ?x897 ?x949 ?x939 ?x948 ?x953)))
 (let ((?x296 (* ?x947 ?x1131 0.0 ?x286)))
 (let ((@x289 (monotonicity (rewrite (= ?x132 ?x447)) (= ?x210 (+ ?x81 ?x97 ?x635 ?x232 ?x447)))))
 (let ((@x516 (trans @x289 (rewrite (= (+ ?x81 ?x97 ?x635 ?x232 ?x447) ?x286)) (= ?x210 ?x286))))
 (let ((?x496 (+ ?x232 (* (/ 1.0 2.0) (* 2.0 ?x635)))))
 (let ((?x1153 (* 2.0 ?x635)))
 (let ((?x1151 (+ b ?x1153)))
 (let ((?x1122 (* (/ 1.0 2.0) ?x1151)))
 (let ((@x1150 (trans (rewrite (= ?x225 (+ (* 1.0 b) (* ?x54 b)))) (rewrite (= (+ (* 1.0 b) (* ?x54 b)) ?x1151)) (= ?x225 ?x1151))))
 (let ((@x486 (trans (monotonicity @x1150 (= ?x226 ?x1122)) (rewrite (= ?x1122 ?x496)) (= ?x226 ?x496))))
 (let ((@x489 (trans @x486 (rewrite (= ?x496 (+ ?x232 ?x635))) (= ?x226 (+ ?x232 ?x635)))))
 (let ((@x443 (trans (monotonicity @x489 (= ?x231 (+ ?x636 ?x637 (+ ?x232 ?x635)))) (rewrite (= (+ ?x636 ?x637 (+ ?x232 ?x635)) 0.0)) (= ?x231 0.0))))
 (let ((?x1137 (+ ?x949 ?x939 ?x948 ?x953 ?x968 ?x985 ?x1111 ?x997 ?x1010 ?x1115)))
 (let ((?x1132 (+ ?x967 ?x1137)))
 (let ((?x1116 (+ (* (/ 1.0 4.0) (* (- 3.0) ?x881)) (* (/ 1.0 4.0) (* (- (/ 1.0 2.0)) ?x895)) (* (/ 1.0 4.0) (* (- 6.0) ?x906)) (* (/ 1.0 4.0) (* (- 4.0) ?x917)) (* (/ 1.0 4.0) (* 4.0 ?x968)) (* (/ 1.0 4.0) (* 4.0 ?x985)) ?x1111 (* (/ 1.0 4.0) (* 4.0 ?x997)) (* (/ 1.0 4.0) (* 4.0 ?x1010)) ?x1115)))
 (let ((?x1088 (* 4.0 ?x1010)))
 (let ((?x698 (* 4.0 ?x997)))
 (let ((?x1089 (* 4.0 ?x985)))
 (let ((?x1062 (* 4.0 ?x968)))
 (let ((?x1077 (* (- 4.0) ?x917)))
 (let ((?x1087 (* (- 6.0) ?x906)))
 (let ((?x450 (* (- (/ 1.0 2.0)) ?x895)))
 (let ((?x1085 (* (- 3.0) ?x881)))
 (let ((?x1090 (+ ?x1085 ?x450 ?x1087 ?x1077 ?x1062 ?x1089 ?x993 ?x698 ?x1088 ?x1055)))
 (let ((?x1098 (* (/ 1.0 4.0) ?x1090)))
 (let ((?x370 (* ?x54 ?x54 ?x636 b b)))
 (let ((?x372 (* ?x54 ?x636 b b)))
 (let ((?x371 (* ?x54 1.0 ?x636 b b)))
 (let ((?x373 (* ?x636 b b)))
 (let ((?x380 (* ?x54 ?x54 ?x80 b b)))
 (let ((?x382 (* ?x54 ?x80 b b)))
 (let ((?x1042 (* ?x54 1.0 ?x80 b b)))
 (let ((?x1031 (* ?x80 b b)))
 (let ((?x1027 (* ?x54 ?x54 r00 b b)))
 (let ((?x1028 (* ?x54 r00 b b)))
 (let ((?x1023 (* ?x54 1.0 r00 b b)))
 (let ((?x1024 (* r00 b b)))
 (let ((?x1019 (* ?x54 ?x54 ?x637 b b)))
 (let ((?x1020 (* ?x54 ?x637 b b)))
 (let ((?x1015 (* ?x54 1.0 ?x637 b b)))
 (let ((?x1016 (* ?x637 b b)))
 (let ((?x363 (+ ?x1016 ?x1015 ?x1020 ?x1019 ?x1024 ?x1023 ?x1028 ?x1027 ?x1031 ?x1042 ?x382 ?x380 ?x373 ?x371 ?x372 ?x370)))
 (let ((?x410 (* (- 2.0) ?x906)))
 (let ((?x442 (* (- 1.0) ?x881)))
 (let ((?x981 (* 2.0 ?x985)))
 (let ((?x1007 (* 2.0 ?x1010)))
 (let ((?x1083 (+ ?x450 ?x442 ?x442 ?x410 ?x1055 ?x1007 ?x1007 ?x698 ?x993 ?x981 ?x981 ?x1062 ?x442 ?x410 ?x410 ?x1077)))
 (let ((@x1061 (trans (rewrite (= ?x380 (* 4.0 (* x x b00 x00 b b)))) (rewrite (= (* 4.0 (* x x b00 x00 b b)) ?x1062)) (= ?x380 ?x1062))))
 (let ((@x982 (trans (rewrite (= ?x1042 (* 2.0 (* x b00 x00 b b)))) (rewrite (= (* 2.0 (* x b00 x00 b b)) ?x981)) (= ?x1042 ?x981))))
 (let ((@x995 (trans (rewrite (= ?x1027 (* 4.0 (* x x r00 b b)))) (rewrite (= (* 4.0 (* x x r00 b b)) ?x698)) (= ?x1027 ?x698))))
 (let ((@x1008 (trans (rewrite (= ?x1023 (* 2.0 (* x r00 b b)))) (rewrite (= (* 2.0 (* x r00 b b)) ?x1007)) (= ?x1023 ?x1007))))
 (let ((@x1086 (monotonicity (rewrite (= ?x1016 ?x450)) (rewrite (= ?x1015 ?x442)) (rewrite (= ?x1020 ?x442)) (rewrite (= ?x1019 ?x410)) (rewrite (= ?x1024 ?x1055)) @x1008 (rewrite (= ?x1028 ?x1007)) @x995 (rewrite (= ?x1031 ?x993)) @x982 (rewrite (= ?x382 ?x981)) @x1061 (rewrite (= ?x373 ?x442)) (rewrite (= ?x371 ?x410)) (rewrite (= ?x372 ?x410)) (rewrite (= ?x370 ?x1077)) (= ?x363 ?x1083))))
 (let ((@x714 (rewrite (= ?x656 ?x746))))
 (let ((@x452 (trans (monotonicity @x714 (= ?x706 (* ?x567 ?x567 ?x746 b b))) (rewrite (= (* ?x567 ?x567 ?x746 b b) ?x363)) (= ?x706 ?x363))))
 (let ((@x1097 (trans @x452 (trans @x1086 (rewrite (= ?x1083 ?x1090)) (= ?x363 ?x1090)) (= ?x706 ?x1090))))
 (let ((@x1120 (trans (monotonicity @x1097 (= ?x708 ?x1098)) (rewrite (= ?x1098 ?x1116)) (= ?x708 ?x1116))))
 (let ((@x1130 (monotonicity (rewrite (= ?x192 ?x967)) (trans @x1120 (rewrite (= ?x1116 ?x1137)) (= ?x708 ?x1137)) (= ?x223 ?x1132))))
 (let ((?x956 (+ ?x949 ?x939 ?x948 ?x953)))
 (let ((?x900 (+ ?x874 ?x879 ?x882 ?x885 ?x888 ?x865 ?x863 ?x891 ?x894 ?x897)))
 (let ((?x950 (+ ?x900 ?x956)))
 (let ((?x942 (+ (* (- (/ 1.0 8.0)) (* 6.0 ?x881)) ?x939 (* (- (/ 1.0 8.0)) (* 12.0 ?x906)) (* (- (/ 1.0 8.0)) (* 8.0 ?x917)))))
 (let ((?x918 (* 8.0 ?x917)))
 (let ((?x923 (* 12.0 ?x906)))
 (let ((?x922 (* 6.0 ?x881)))
 (let ((?x926 (+ ?x922 ?x895 ?x923 ?x918)))
 (let ((?x932 (* (- (/ 1.0 8.0)) ?x926)))
 (let ((?x887 (* ?x54 ?x54 ?x54 b b b)))
 (let ((?x886 (* ?x54 ?x54 b b b)))
 (let ((?x890 (* ?x54 1.0 ?x54 b b b)))
 (let ((?x889 (* ?x54 b b b)))
 (let ((?x893 (* ?x54 ?x54 1.0 b b b)))
 (let ((?x892 (* ?x54 1.0 b b b)))
 (let ((?x896 (* ?x54 1.0 1.0 b b b)))
 (let ((?x883 (+ ?x895 ?x896 ?x892 ?x893 ?x889 ?x890 ?x886 ?x887)))
 (let ((?x176 (* 4.0 ?x906)))
 (let ((?x876 (* 2.0 ?x881)))
 (let ((?x924 (+ ?x895 ?x876 ?x876 ?x176 ?x876 ?x176 ?x176 ?x918)))
 (let ((@x927 (monotonicity (rewrite (= ?x896 ?x876)) (rewrite (= ?x892 ?x876)) (rewrite (= ?x893 ?x176)) (rewrite (= ?x889 ?x876)) (rewrite (= ?x890 ?x176)) (rewrite (= ?x886 ?x176)) (rewrite (= ?x887 ?x918)) (= ?x883 ?x924))))
 (let ((@x931 (trans (rewrite (= ?x175 ?x883)) (trans @x927 (rewrite (= ?x924 ?x926)) (= ?x883 ?x926)) (= ?x175 ?x926))))
 (let ((@x946 (trans (monotonicity @x931 (= ?x178 ?x932)) (rewrite (= ?x932 ?x942)) (= ?x178 ?x942))))
 (let ((?x872 (+ (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) ?x747)) (* (- (/ 1.0 2.0)) (* (- 3.0) ?x756)) (* (- (/ 1.0 2.0)) (* (- 6.0) ?x762)) (* (- (/ 1.0 2.0)) (* 4.0 ?x773)) (* (- (/ 1.0 2.0)) (* 4.0 ?x780)) ?x865 ?x863 (* (- (/ 1.0 2.0)) (* 4.0 ?x804)) (* (- (/ 1.0 2.0)) (* 4.0 ?x822)) (* (- (/ 1.0 2.0)) (* (- 4.0) ?x838)))))
 (let ((?x840 (* (- 4.0) ?x838)))
 (let ((?x824 (* 4.0 ?x822)))
 (let ((?x847 (* 4.0 ?x804)))
 (let ((?x799 (* 4.0 ?x780)))
 (let ((?x845 (* 4.0 ?x773)))
 (let ((?x844 (* (- 6.0) ?x762)))
 (let ((?x846 (* (- 3.0) ?x756)))
 (let ((?x711 (* (- (/ 1.0 2.0)) ?x747)))
 (let ((?x849 (+ ?x711 ?x846 ?x844 ?x845 ?x799 ?x784 ?x802 ?x847 ?x824 ?x840)))
 (let ((?x855 (* (- (/ 1.0 2.0)) ?x849)))
 (let ((?x739 (* ?x54 ?x54 ?x636 b)))
 (let ((?x738 (* ?x54 ?x636 b)))
 (let ((?x737 (* ?x54 1.0 ?x636 b)))
 (let ((?x736 (* ?x636 b)))
 (let ((?x735 (* ?x54 ?x54 ?x80 b)))
 (let ((?x734 (* ?x54 ?x80 b)))
 (let ((?x733 (* ?x54 1.0 ?x80 b)))
 (let ((?x731 (* ?x80 b)))
 (let ((?x728 (* ?x54 ?x54 r00 b)))
 (let ((?x727 (* ?x54 r00 b)))
 (let ((?x726 (* ?x54 1.0 r00 b)))
 (let ((?x725 (* r00 b)))
 (let ((?x723 (* ?x54 ?x54 ?x637 b)))
 (let ((?x722 (* ?x54 ?x637 b)))
 (let ((?x721 (* ?x54 1.0 ?x637 b)))
 (let ((?x720 (* ?x637 b)))
 (let ((?x740 (+ ?x720 ?x721 ?x722 ?x723 ?x725 ?x726 ?x727 ?x728 ?x731 ?x733 ?x734 ?x735 ?x736 ?x737 ?x738 ?x739)))
 (let ((?x776 (* (- 2.0) ?x762)))
 (let ((?x752 (* (- 1.0) ?x756)))
 (let ((?x810 (* 2.0 ?x804)))
 (let ((?x800 (* 2.0 ?x773)))
 (let ((?x839 (+ ?x711 ?x752 ?x752 ?x776 ?x784 ?x800 ?x800 ?x799 ?x802 ?x810 ?x810 ?x824 ?x752 ?x776 ?x776 ?x840)))
 (let ((@x818 (trans (rewrite (= ?x735 (* 4.0 (* x x b00 x00 b)))) (rewrite (= (* 4.0 (* x x b00 x00 b)) ?x824)) (= ?x735 ?x824))))
 (let ((@x809 (trans (rewrite (= ?x733 (* 2.0 (* x b00 x00 b)))) (rewrite (= (* 2.0 (* x b00 x00 b)) ?x810)) (= ?x733 ?x810))))
 (let ((@x793 (trans (rewrite (= ?x728 (* 4.0 (* x x r00 b)))) (rewrite (= (* 4.0 (* x x r00 b)) ?x799)) (= ?x728 ?x799))))
 (let ((@x782 (trans (rewrite (= ?x726 (* 2.0 (* x r00 b)))) (rewrite (= (* 2.0 (* x r00 b)) ?x800)) (= ?x726 ?x800))))
 (let ((@x842 (monotonicity (rewrite (= ?x720 ?x711)) (rewrite (= ?x721 ?x752)) (rewrite (= ?x722 ?x752)) (rewrite (= ?x723 ?x776)) (rewrite (= ?x725 ?x784)) @x782 (rewrite (= ?x727 ?x800)) @x793 (rewrite (= ?x731 ?x802)) @x809 (rewrite (= ?x734 ?x810)) @x818 (rewrite (= ?x736 ?x752)) (rewrite (= ?x737 ?x776)) (rewrite (= ?x738 ?x776)) (rewrite (= ?x739 ?x840)) (= ?x740 ?x839))))
 (let ((@x745 (trans (monotonicity @x714 (= ?x149 (* ?x567 ?x567 ?x746 b))) (rewrite (= (* ?x567 ?x567 ?x746 b) ?x740)) (= ?x149 ?x740))))
 (let ((@x853 (trans @x745 (trans @x842 (rewrite (= ?x839 ?x849)) (= ?x740 ?x849)) (= ?x149 ?x849))))
 (let ((@x871 (trans (monotonicity @x853 (= ?x174 ?x855)) (rewrite (= ?x855 ?x872)) (= ?x174 ?x872))))
 (let ((@x951 (monotonicity (trans @x871 (rewrite (= ?x872 ?x900)) (= ?x174 ?x900)) (trans @x946 (rewrite (= ?x942 ?x956)) (= ?x178 ?x956)) (= ?x180 ?x950))))
 (let ((@x309 (monotonicity (trans @x951 (rewrite (= ?x950 ?x947)) (= ?x180 ?x947)) (trans @x1130 (rewrite (= ?x1132 ?x1131)) (= ?x223 ?x1131)) @x443 @x516 (= ?x212 ?x296))))
 (let ((@x316 (monotonicity (trans @x309 (rewrite (= ?x296 0.0)) $x183) (= $x183 (= 0.0 0.0)))))
 (let ((@x326 (monotonicity (trans @x316 (rewrite (= (= 0.0 0.0) true)) (= $x183 true)) (= $x217 (not true)))))
 (trans @x326 (rewrite (= (not true) false)) (= $x217 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x355 (trans (quant-intro (proof-bind ?x340) (= $x219 $x327)) (elim-unused (= $x327 false)) (= $x219 false))))
 (let (($x732 (exists ((b Real) (r Real) (x Real) )(! (let ((?x97 (* (- 1.0) r00)))
 (let ((?x129 (* (- (/ 1.0 2.0)) b)))
 (let ((?x80 (* b00 x00)))
 (let ((?x81 (* (- 1.0) ?x80)))
 (let ((?x579 (+ ?x81 r ?x129 ?x97 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x1068 (+ r ?x129)))
 (let ((?x54 (* 2.0 x)))
 (let ((?x567 (+ 1.0 ?x54)))
 (let ((?x110 (* (/ 1.0 2.0) b)))
 (let ((?x187 (* (- 1.0) r)))
 (let ((?x704 (+ (* (/ 1.0 8.0) (* ?x567 ?x567 ?x1068 ?x1068 ?x1068 b b b)) (* (/ 1.0 4.0) (* ?x567 ?x567 ?x1068 b b)))))
 (let ((?x207 (+ (* (- (/ 1.0 2.0)) (* ?x567 ?x567 ?x1068 b)) (* (- (/ 1.0 8.0)) (* ?x567 ?x567 ?x567 b b b)))))
 (let ((?x724 (* ?x207 ?x704 (+ ?x187 ?x110 (* (/ 1.0 2.0) (* ?x567 ?x567 ?x567 ?x1068 ?x1068 b))) ?x579)))
 (let ((?x108 (* x b)))
 (let ((?x642 (+ ?x81 r ?x97 ?x108)))
 (let ((?x196 (* x x r b b)))
 (let ((?x185 (* (/ 1.0 2.0) (* x x r r r b b b))))
 (let ((?x167 (* (- 1.0) (* x x x b b b))))
 (let ((?x148 (* (- 2.0) (* x x r b))))
 (let ((?x597 (* (+ ?x187 (* 4.0 (* x x x r r b))) (+ ?x148 ?x167) (+ ?x185 ?x196) ?x642)))
 (and (= ?x642 0.0) (or (not (= ?x597 0.0)) (not (= ?x724 0.0)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x72 (exists ((b Real) (r Real) (x Real) )(! (let ((?x54 (* 2.0 x)))
 (let ((?x55 (+ ?x54 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x51 (- r ?x36)))
 (let ((?x63 (+ (* ?x36 ?x36 ?x36 ?x51 ?x51 ?x51 ?x55 ?x55) (* ?x36 ?x36 ?x51 ?x55 ?x55))))
 (let ((?x60 (- (* (- 1.0) ?x36 ?x51 ?x55 ?x55) (* ?x36 ?x36 ?x36 ?x55 ?x55 ?x55))))
 (let ((?x67 (* (+ (- (+ (* (- 1.0) b00 x00) ?x51) r00) (* ?x36 ?x55)) ?x60 ?x63 (+ (* (- 1.0) ?x51) (* ?x36 ?x51 ?x51 ?x55 ?x55 ?x55)))))
 (let ((?x47 (+ (* (- 1.0) r) (* ?x36 r r 2.0 x 2.0 x 2.0 x))))
 (let ((?x44 (+ (* ?x36 ?x36 ?x36 r r r 2.0 x 2.0 x) (* ?x36 ?x36 r 2.0 x 2.0 x))))
 (let ((?x41 (- (* (- 1.0) ?x36 r 2.0 x 2.0 x) (* ?x36 ?x36 ?x36 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x70 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41 ?x44 ?x47) 0.0)) (not (= ?x67 0.0)))))
 (and (= (+ ?x30 (* b x)) 0.0) $x70))))))))))))) :qid k!28))
 ))
 (let ((?x112 (lambda ((b Real) (r Real) (x Real) )(let ((?x97 (* (- 1.0) r00)))
 (let ((?x129 (* (- (/ 1.0 2.0)) b)))
 (let ((?x80 (* b00 x00)))
 (let ((?x81 (* (- 1.0) ?x80)))
 (let ((?x579 (+ ?x81 r ?x129 ?x97 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x1068 (+ r ?x129)))
 (let ((?x54 (* 2.0 x)))
 (let ((?x567 (+ 1.0 ?x54)))
 (let ((?x110 (* (/ 1.0 2.0) b)))
 (let ((?x187 (* (- 1.0) r)))
 (let ((?x704 (+ (* (/ 1.0 8.0) (* ?x567 ?x567 ?x1068 ?x1068 ?x1068 b b b)) (* (/ 1.0 4.0) (* ?x567 ?x567 ?x1068 b b)))))
 (let ((?x207 (+ (* (- (/ 1.0 2.0)) (* ?x567 ?x567 ?x1068 b)) (* (- (/ 1.0 8.0)) (* ?x567 ?x567 ?x567 b b b)))))
 (let ((?x724 (* ?x207 ?x704 (+ ?x187 ?x110 (* (/ 1.0 2.0) (* ?x567 ?x567 ?x567 ?x1068 ?x1068 b))) ?x579)))
 (let ((?x108 (* x b)))
 (let ((?x642 (+ ?x81 r ?x97 ?x108)))
 (let ((?x196 (* x x r b b)))
 (let ((?x185 (* (/ 1.0 2.0) (* x x r r r b b b))))
 (let ((?x167 (* (- 1.0) (* x x x b b b))))
 (let ((?x148 (* (- 2.0) (* x x r b))))
 (let ((?x597 (* (+ ?x187 (* 4.0 (* x x x r r b))) (+ ?x148 ?x167) (+ ?x185 ?x196) ?x642)))
 (let (($x1078 (and (= ?x642 0.0) (or (not (= ?x597 0.0)) (not (= ?x724 0.0))))))
 (let ((?x55 (+ ?x54 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x51 (- r ?x36)))
 (let ((?x63 (+ (* ?x36 ?x36 ?x36 ?x51 ?x51 ?x51 ?x55 ?x55) (* ?x36 ?x36 ?x51 ?x55 ?x55))))
 (let ((?x60 (- (* (- 1.0) ?x36 ?x51 ?x55 ?x55) (* ?x36 ?x36 ?x36 ?x55 ?x55 ?x55))))
 (let ((?x67 (* (+ (- (+ (* (- 1.0) b00 x00) ?x51) r00) (* ?x36 ?x55)) ?x60 ?x63 (+ (* (- 1.0) ?x51) (* ?x36 ?x51 ?x51 ?x55 ?x55 ?x55)))))
 (let ((?x47 (+ (* (- 1.0) r) (* ?x36 r r 2.0 x 2.0 x 2.0 x))))
 (let ((?x44 (+ (* ?x36 ?x36 ?x36 r r r 2.0 x 2.0 x) (* ?x36 ?x36 r 2.0 x 2.0 x))))
 (let ((?x41 (- (* (- 1.0) ?x36 r 2.0 x 2.0 x) (* ?x36 ?x36 ?x36 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x70 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41 ?x44 ?x47) 0.0)) (not (= ?x67 0.0)))))
 (let (($x71 (and (= (+ ?x30 (* b x)) 0.0) $x70)))
 (rewrite (= $x71 $x1078))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x798 (mp (mp @x73 (quant-intro (proof-bind ?x112) (= $x72 $x732)) $x732) (rewrite (= $x732 $x219)) $x219)))
 (mp @x798 @x355 false))))))))))))

(:max-memory   17.71
 :memory       17.44
 :num-allocs   61856
 :num-checks   1
 :rlimit-count 1927
 :time         0.00
 :total-time   0.01)
