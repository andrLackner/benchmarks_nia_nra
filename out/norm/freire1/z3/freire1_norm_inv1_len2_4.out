unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x159 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x764 (* (- 1) ?x36)))
 (let ((?x736 (* (- 2) x00)))
 (let ((?x514 (+ r00 ?x736 ?x764 ?x159 (* 2 x!0) (* (- 1) r!1))))
 (let (($x845 (<= ?x514 0)))
 (let (($x847 (= ?x514 0)))
 (let ((?x1085 (* 2 (* x!0 x!0))))
 (let ((?x1088 (* 2 (* x!0 x!0 x!0))))
 (let ((?x1057 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x1056 (* (- 1) (* r!1 r!1 r!1))))
 (let ((?x817 (* (- 1) (* r!1 r!1 r!1 r!1))))
 (let ((?x399 (+ (* 2 (* x!0 x!0 x!0 r!1)) ?x159 (* (- 2) (* x!0 r!1 r!1 r!1 r!1)) (* (- 2) (* x00 r!1 r!1 r!1)) (* (- 2) (* x00 x!0)) (* 2 (* x00 x!0 r!1)) (* 4 (* x00 x!0 r!1 r!1)) ?x817 (* 2 (* x00 r!1)) (* x!0 x!0 r!1 r!1 r!1) (* 2 (* r00 r00 x!0 r!1 r!1)) (* 2 (* x!0 r!1 r!1)) (* r00 r00 r!1) (* (- 1) (* r00 r00 r!1 r!1 r!1)) (* (- 1) (* r00 r00 x!0 x!0)) (* r00 r00 x!0 r!1) (* (- 1) (* r00 r00 x!0 x!0 r!1)) (* (- 1) (* r00 x!0 r!1)) (* (- 3) (* x!0 r!1)) (* r00 r!1 r!1 r!1) (* (- 2) (* r00 x!0 r!1 r!1)) (* r00 x!0 x!0) (* r00 x!0 x!0 r!1) (* (- 3) (* x!0 x!0 r!1)) (* (- 4) (* x!0 x!0 r!1 r!1)) (* (- 2) (* x00 x!0 x!0 r!1)) (* (- 1) (* r00 r00 x!0)) (* (- 2) (* x00 x!0 x!0)) (* r00 x!0) ?x1056 ?x1057 ?x1088 (* 3 (* x!0 r!1 r!1 r!1)) ?x1085 (* (- 1) (* r00 r!1)))))
 (let (($x225 (= ?x399 0)))
 (let (($x1064 (not $x225)))
 (let (($x298 (and $x847 $x1064)))
 (let ((?x1032 (+ ?x159 (* (- 1) (* r!1 r!1 r!1 r00 r00)) (* r!1 x!0 r00 r00) (* 2 (* r!1 r!1 x!0 r00 r00)) (* (- 1) (* x!0 x!0 r00 r00)) (* (- 1) (* r!1 x!0 x!0 r00 r00)) (* (- 1) (* r!1 r00)) (* x!0 r00) (* (- 1) (* r!1 x!0 r00)) (* (- 3) (* r!1 x!0)) (* 2 (* r!1 r!1 x!0)) (* 3 (* r!1 r!1 r!1 x!0)) ?x1056 ?x817 (* r!1 r!1 r!1 r00) (* (- 2) (* r!1 r!1 x!0 r00)) (* x!0 x!0 r00) (* r!1 x!0 x!0 r00) ?x1085 (* (- 3) (* r!1 x!0 x!0)) (* (- 4) (* r!1 r!1 x!0 x!0)) (* r!1 r!1 r!1 x!0 x!0) ?x1057 (* (- 2) (* r!1 r!1 r!1 r!1 x!0)) (* (- 2) (* r!1 r!1 r!1 x00)) (* (- 2) (* x!0 x00)) (* 2 (* r!1 x!0 x00)) (* 4 (* r!1 r!1 x!0 x00)) ?x1088 (* 2 (* r!1 x!0 x!0 x!0)) (* 2 (* r!1 x00)) (* r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* (- 2) (* x!0 x!0 x00)) (* (- 2) (* r!1 x!0 x!0 x00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 1) r00)))
 (let (($x1093 (and (= (+ r!1 (* (- 2) x!0) ?x124 (* (- 1) ?x159) ?x35 ?x36) 0) (not (= ?x1032 0)))))
 (let (($x690 (exists ((r Int) (x Int) )(! (let ((?x1170 (* (- 2) (* r x x x00))))
 (let ((?x1169 (* (- 2) (* x x x00))))
 (let ((?x1162 (* (- 1) (* x r00 r00))))
 (let ((?x991 (* r r00 r00)))
 (let ((?x830 (* 2 (* r x x x))))
 (let ((?x828 (* 2 (* x x x))))
 (let ((?x1160 (* (- 2) (* x x00))))
 (let ((?x714 (* (- 2) (* r r r r x))))
 (let ((?x670 (* r r r r r)))
 (let ((?x658 (* r r r x x)))
 (let ((?x1157 (* (- 4) (* r r x x))))
 (let ((?x761 (* (- 3) (* r x x))))
 (let ((?x1038 (* 2 (* x x))))
 (let ((?x468 (* r x x r00)))
 (let ((?x464 (* x x r00)))
 (let ((?x475 (* (- 2) (* r r x r00))))
 (let ((?x426 (* r r r r00)))
 (let ((?x332 (* (- 1) (* r r r r))))
 (let ((?x322 (* (- 1) (* r r r))))
 (let ((?x763 (* 3 (* r r r x))))
 (let ((?x1081 (* 2 (* r r x))))
 (let ((?x386 (* (- 3) (* r x))))
 (let ((?x272 (* (- 1) (* r x r00))))
 (let ((?x260 (* x r00)))
 (let ((?x248 (* (- 1) (* r r00))))
 (let ((?x1156 (* (- 1) (* r x x r00 r00))))
 (let ((?x1155 (* (- 1) (* x x r00 r00))))
 (let ((?x1154 (* 2 (* r r x r00 r00))))
 (let ((?x179 (* r x r00 r00)))
 (let ((?x1153 (* (- 1) (* r r r r00 r00))))
 (let ((?x30 (* r r)))
 (let ((?x1181 (+ ?x30 ?x1153 ?x179 ?x1154 ?x1155 ?x1156 ?x248 ?x260 ?x272 ?x386 ?x1081 ?x763 ?x322 ?x332 ?x426 ?x475 ?x464 ?x468 ?x1038 ?x761 ?x1157 ?x658 ?x670 ?x714 (* (- 2) (* r r r x00)) ?x1160 (* 2 (* r x x00)) (* 4 (* r r x x00)) ?x828 ?x830 (* 2 (* r x00)) ?x991 ?x1162 ?x1169 ?x1170)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x123 (* (- 2) x)))
 (let (($x127 (= (+ r ?x123 ?x124 ?x125 ?x35 ?x36) 0)))
 (and $x127 (not (= ?x1181 0))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x741 (exists ((r Int) (x Int) )(! (let ((?x74 (* (- 1) r)))
 (let ((?x712 (+ x ?x74)))
 (let ((?x630 (+ 1 r)))
 (let ((?x294 (+ (* r00 r00 ?x630 ?x712 ?x712) (* (- 1) (* r00 ?x630 ?x712)) (* (- 1) (* ?x630 ?x630 ?x630 ?x712)) (* (- 1) (* r00 ?x630 ?x712 ?x712)) (* ?x630 ?x630 ?x712) (* ?x630 ?x630 ?x712 ?x712) (* (- 1) (* ?x630 ?x630 ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712)) (* (- 2) (* ?x630 ?x712 ?x712 ?x712)) (* r00 r00 ?x630 ?x712) (* (- 2) (* ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712 ?x712)))))
 (let (($x733 (not (= ?x294 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (and (= (+ r ?x124 ?x125 ?x123 ?x35 ?x36) 0) $x733)))))))))))) :qid k!26))
 ))
 (let ((?x680 (lambda ((r Int) (x Int) )(let ((?x1170 (* (- 2) (* r x x x00))))
 (let ((?x1169 (* (- 2) (* x x x00))))
 (let ((?x1162 (* (- 1) (* x r00 r00))))
 (let ((?x991 (* r r00 r00)))
 (let ((?x830 (* 2 (* r x x x))))
 (let ((?x828 (* 2 (* x x x))))
 (let ((?x1160 (* (- 2) (* x x00))))
 (let ((?x714 (* (- 2) (* r r r r x))))
 (let ((?x670 (* r r r r r)))
 (let ((?x658 (* r r r x x)))
 (let ((?x1157 (* (- 4) (* r r x x))))
 (let ((?x761 (* (- 3) (* r x x))))
 (let ((?x1038 (* 2 (* x x))))
 (let ((?x468 (* r x x r00)))
 (let ((?x464 (* x x r00)))
 (let ((?x475 (* (- 2) (* r r x r00))))
 (let ((?x426 (* r r r r00)))
 (let ((?x332 (* (- 1) (* r r r r))))
 (let ((?x322 (* (- 1) (* r r r))))
 (let ((?x763 (* 3 (* r r r x))))
 (let ((?x1081 (* 2 (* r r x))))
 (let ((?x386 (* (- 3) (* r x))))
 (let ((?x272 (* (- 1) (* r x r00))))
 (let ((?x260 (* x r00)))
 (let ((?x248 (* (- 1) (* r r00))))
 (let ((?x1156 (* (- 1) (* r x x r00 r00))))
 (let ((?x1155 (* (- 1) (* x x r00 r00))))
 (let ((?x1154 (* 2 (* r r x r00 r00))))
 (let ((?x179 (* r x r00 r00)))
 (let ((?x1153 (* (- 1) (* r r r r00 r00))))
 (let ((?x30 (* r r)))
 (let ((?x1181 (+ ?x30 ?x1153 ?x179 ?x1154 ?x1155 ?x1156 ?x248 ?x260 ?x272 ?x386 ?x1081 ?x763 ?x322 ?x332 ?x426 ?x475 ?x464 ?x468 ?x1038 ?x761 ?x1157 ?x658 ?x670 ?x714 (* (- 2) (* r r r x00)) ?x1160 (* 2 (* r x x00)) (* 4 (* r r x x00)) ?x828 ?x830 (* 2 (* r x00)) ?x991 ?x1162 ?x1169 ?x1170)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (let ((?x123 (* (- 2) x)))
 (let (($x127 (= (+ r ?x123 ?x124 ?x125 ?x35 ?x36) 0)))
 (let (($x686 (and $x127 (not (= ?x1181 0)))))
 (let ((?x74 (* (- 1) r)))
 (let ((?x712 (+ x ?x74)))
 (let ((?x630 (+ 1 r)))
 (let ((?x294 (+ (* r00 r00 ?x630 ?x712 ?x712) (* (- 1) (* r00 ?x630 ?x712)) (* (- 1) (* ?x630 ?x630 ?x630 ?x712)) (* (- 1) (* r00 ?x630 ?x712 ?x712)) (* ?x630 ?x630 ?x712) (* ?x630 ?x630 ?x712 ?x712) (* (- 1) (* ?x630 ?x630 ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712)) (* (- 2) (* ?x630 ?x712 ?x712 ?x712)) (* r00 r00 ?x630 ?x712) (* (- 2) (* ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712 ?x712)))))
 (let (($x733 (not (= ?x294 0))))
 (let (($x740 (and (= (+ r ?x124 ?x125 ?x123 ?x35 ?x36) 0) $x733)))
 (rewrite (= $x740 $x686))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x734 (exists ((r Int) (x Int) )(! (let ((?x74 (* (- 1) r)))
 (let ((?x712 (+ x ?x74)))
 (let ((?x630 (+ 1 r)))
 (let ((?x294 (+ (* r00 r00 ?x630 ?x712 ?x712) (* (- 1) (* r00 ?x630 ?x712)) (* (- 1) (* ?x630 ?x630 ?x630 ?x712)) (* (- 1) (* r00 ?x630 ?x712 ?x712)) (* ?x630 ?x630 ?x712) (* ?x630 ?x630 ?x712 ?x712) (* (- 1) (* ?x630 ?x630 ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712)) (* (- 2) (* ?x630 ?x712 ?x712 ?x712)) (* r00 r00 ?x630 ?x712) (* (- 2) (* ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712 ?x712)))))
 (let (($x733 (not (= ?x294 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x764 (* (- 1) ?x36)))
 (let ((?x736 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x74 r00 ?x30 ?x32 ?x736 ?x764) 0) $x733))))))))))) :qid k!26))
 ))
 (let ((?x743 (lambda ((r Int) (x Int) )(let ((?x74 (* (- 1) r)))
 (let ((?x712 (+ x ?x74)))
 (let ((?x630 (+ 1 r)))
 (let ((?x294 (+ (* r00 r00 ?x630 ?x712 ?x712) (* (- 1) (* r00 ?x630 ?x712)) (* (- 1) (* ?x630 ?x630 ?x630 ?x712)) (* (- 1) (* r00 ?x630 ?x712 ?x712)) (* ?x630 ?x630 ?x712) (* ?x630 ?x630 ?x712 ?x712) (* (- 1) (* ?x630 ?x630 ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712)) (* (- 2) (* ?x630 ?x712 ?x712 ?x712)) (* r00 r00 ?x630 ?x712) (* (- 2) (* ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712 ?x712)))))
 (let (($x733 (not (= ?x294 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x123 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x125 (* (- 1) ?x30)))
 (let ((?x124 (* (- 1) r00)))
 (let (($x740 (and (= (+ r ?x124 ?x125 ?x123 ?x35 ?x36) 0) $x733)))
 (let (($x271 (= (+ ?x74 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x771 (and $x271 $x733)))
 (rewrite (= $x771 $x740)))))))))))))))))
 ))
 (let (($x69 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x48 (- (- (* ?x41 r00 r00 ?x42 ?x42) (* ?x41 r00 ?x42)) (* ?x41 ?x41 ?x41 ?x42))))
 (let ((?x52 (+ (- ?x48 (* ?x41 r00 ?x42 ?x42)) (* ?x41 ?x41 ?x42) (* ?x41 ?x41 ?x42 ?x42))))
 (let ((?x56 (+ (- ?x52 (* ?x41 ?x41 ?x41 ?x42 ?x42)) (* 2 ?x41 ?x42 x00))))
 (let ((?x60 (+ (- ?x56 (* 2 ?x41 ?x42 ?x42 ?x42)) (* ?x41 r00 r00 ?x42))))
 (let ((?x64 (+ (- ?x60 (* 2 ?x41 ?x42 ?x42)) (* 2 ?x41 ?x42 ?x42 x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x64 0)))))))))))))) :qid k!26))
 ))
 (let ((?x750 (lambda ((r Int) (x Int) )(let ((?x74 (* (- 1) r)))
 (let ((?x712 (+ x ?x74)))
 (let ((?x630 (+ 1 r)))
 (let ((?x294 (+ (* r00 r00 ?x630 ?x712 ?x712) (* (- 1) (* r00 ?x630 ?x712)) (* (- 1) (* ?x630 ?x630 ?x630 ?x712)) (* (- 1) (* r00 ?x630 ?x712 ?x712)) (* ?x630 ?x630 ?x712) (* ?x630 ?x630 ?x712 ?x712) (* (- 1) (* ?x630 ?x630 ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712)) (* (- 2) (* ?x630 ?x712 ?x712 ?x712)) (* r00 r00 ?x630 ?x712) (* (- 2) (* ?x630 ?x712 ?x712)) (* 2 (* x00 ?x630 ?x712 ?x712)))))
 (let (($x733 (not (= ?x294 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x764 (* (- 1) ?x36)))
 (let ((?x736 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x771 (and (= (+ ?x74 r00 ?x30 ?x32 ?x736 ?x764) 0) $x733)))
 (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x48 (- (- (* ?x41 r00 r00 ?x42 ?x42) (* ?x41 r00 ?x42)) (* ?x41 ?x41 ?x41 ?x42))))
 (let ((?x52 (+ (- ?x48 (* ?x41 r00 ?x42 ?x42)) (* ?x41 ?x41 ?x42) (* ?x41 ?x41 ?x42 ?x42))))
 (let ((?x56 (+ (- ?x52 (* ?x41 ?x41 ?x41 ?x42 ?x42)) (* 2 ?x41 ?x42 x00))))
 (let ((?x60 (+ (- ?x56 (* 2 ?x41 ?x42 ?x42 ?x42)) (* ?x41 r00 r00 ?x42))))
 (let ((?x64 (+ (- ?x60 (* 2 ?x41 ?x42 ?x42)) (* 2 ?x41 ?x42 ?x42 x00))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x68 (and (= ?x38 0) (or (not (= ?x64 0))))))
 (rewrite (= $x68 $x771)))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x629 (mp (mp @x70 (quant-intro (proof-bind ?x750) (= $x69 $x734)) $x734) (rewrite (= $x734 $x734)) $x734)))
 (let ((@x592 (mp (mp @x629 (quant-intro (proof-bind ?x743) (= $x734 $x741)) $x741) (quant-intro (proof-bind ?x680) (= $x741 $x690)) $x690)))
 (let ((@x1103 (mp (mp~ @x592 (sk (~ $x690 $x1093)) $x1093) (rewrite (= $x1093 $x298)) $x298)))
 (let ((@x1101 (and-elim @x1103 $x847)))
 (let ((@x800 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x847) $x845)) @x1101 $x845)))
 (let (($x846 (>= ?x514 0)))
 (let ((@x937 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x847) $x846)) @x1101 $x846)))
 (let (($x325 (not (>= ?x399 0))))
 (let (($x1053 (<= ?x399 0)))
 (let ((@x774 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x225 (not $x1053) $x325)) (and-elim @x1103 $x1064) (or (not $x1053) $x325))))
 (let ((@x945 (unit-resolution @x774 (lemma ((_ th-lemma arith) (hypothesis (not $x1053)) @x937 @x800 false) $x1053) $x325)))
 ((_ th-lemma arith) @x945 @x937 @x800 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             308
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.72
 :memory                    3.21
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1230519
 :num-checks                1
 :propagations              4
 :rlimit-count              4639
 :time                      0.01
 :total-time                0.01)
