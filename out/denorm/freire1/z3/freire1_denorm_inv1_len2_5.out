unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x338 (* r!1 r!1)))
 (let ((?x137 (* (- 1) r!1)))
 (let ((?x242 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x162 (+ r00 ?x83 ?x99 ?x242 ?x137 ?x338)))
 (let (($x65 (<= ?x162 0)))
 (let (($x226 (= ?x162 0)))
 (let ((?x357 (* x!0 x!0)))
 (let ((?x339 (* r!1 r!1 r!1 r!1)))
 (let ((?x158 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x93 (* r!1 r!1 r!1)))
 (let ((?x67 (+ ?x93 ?x158 (* (- 2) (* x!0 r!1)) (* (- 3) (* x!0 r!1 r!1 r!1)) (* 3 (* x!0 x!0 r!1)) (* (- 1) (* x!0 x!0 x!0 r!1)) (* 3 (* x!0 x!0 r!1 r!1)) (* (- 3) (* x!0 r!1 r!1)) ?x338 ?x339 ?x357)))
 (let ((?x400 (* ?x67 ?x162)))
 (let (($x73 (= ?x400 0)))
 (let (($x75 (not $x73)))
 (let (($x74 (and $x226 $x75)))
 (let ((?x235 (+ ?x338 ?x357 (* (- 2) (* r!1 x!0)) ?x158 (* (- 1) (* r!1 x!0 x!0 x!0)) ?x93 ?x339 (* (- 3) (* r!1 r!1 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0)) (* 3 (* r!1 x!0 x!0)) (* 3 (* r!1 r!1 x!0 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x234 (and (= (+ r!1 (* (- 2) x!0) ?x114 (* (- 1) ?x338) ?x35 ?x36) 0) (not (= (* ?x235 (+ ?x137 ?x242 r00 ?x338 ?x83 ?x99)) 0)))))
 (let (($x231 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x397 (+ ?x30 (* x x) (* (- 2) (* r x)) (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r) (* r r r r) (* (- 3) (* r r x)) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let ((?x113 (* (- 2) x)))
 (let (($x117 (= (+ r ?x113 ?x114 ?x115 ?x35 ?x36) 0)))
 (and $x117 (not (= (* ?x397 ?x105) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x236 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x156 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x100 (+ x ?x62)))
 (let ((?x275 (+ 1 r)))
 (let (($x385 (= (* (+ (* ?x100 ?x100) (* (- 1) (* ?x275 ?x100 ?x100 ?x100))) ?x156) 0)))
 (let (($x139 (not $x385)))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x139)))))))))))))))) :qid k!26))
 ))
 (let ((?x170 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x397 (+ ?x30 (* x x) (* (- 2) (* r x)) (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r) (* r r r r) (* (- 3) (* r r x)) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let ((?x113 (* (- 2) x)))
 (let (($x117 (= (+ r ?x113 ?x114 ?x115 ?x35 ?x36) 0)))
 (let (($x70 (and $x117 (not (= (* ?x397 ?x105) 0)))))
 (let ((?x156 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x332 (* (- 1) (* (+ 1 r) (+ x ?x62) (+ x ?x62) (+ x ?x62)))))
 (let (($x139 (not (= (* (+ (* (+ x ?x62) (+ x ?x62)) ?x332) ?x156) 0))))
 (let (($x240 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x139)))
 (rewrite (= $x240 $x70)))))))))))))))))))))
 ))
 (let (($x286 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x156 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x100 (+ x ?x62)))
 (let ((?x275 (+ 1 r)))
 (let (($x385 (= (* (+ (* ?x100 ?x100) (* (- 1) (* ?x275 ?x100 ?x100 ?x100))) ?x156) 0)))
 (let (($x139 (not $x385)))
 (and (= (+ ?x62 r00 (* r r) ?x32 ?x83 ?x99) 0) $x139))))))))))) :qid k!26))
 ))
 (let ((?x237 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x156 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x100 (+ x ?x62)))
 (let ((?x275 (+ 1 r)))
 (let (($x385 (= (* (+ (* ?x100 ?x100) (* (- 1) (* ?x275 ?x100 ?x100 ?x100))) ?x156) 0)))
 (let (($x139 (not $x385)))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x240 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x139)))
 (let (($x216 (and (= (+ ?x62 r00 ?x30 ?x32 ?x83 ?x99) 0) $x139)))
 (rewrite (= $x216 $x240))))))))))))))))))))
 ))
 (let (($x57 (exists ((r Int) (x Int) )(! (let ((?x51 (- (* (- x r) (- x r)) (* (+ r 1) (- x r) (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))))) :qid k!26))
 ))
 (let ((?x221 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x156 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x100 (+ x ?x62)))
 (let ((?x275 (+ 1 r)))
 (let (($x385 (= (* (+ (* ?x100 ?x100) (* (- 1) (* ?x275 ?x100 ?x100 ?x100))) ?x156) 0)))
 (let (($x139 (not $x385)))
 (let (($x216 (and (= (+ ?x62 r00 (* r r) ?x32 ?x83 ?x99) 0) $x139)))
 (let ((?x51 (- (* (- x r) (- x r)) (* (+ r 1) (- x r) (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x56 (and $x40 (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))
 (rewrite (= $x56 $x216)))))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (let ((@x212 (mp (mp @x58 (quant-intro (proof-bind ?x221) (= $x57 $x286)) $x286) (rewrite (= $x286 $x286)) $x286)))
 (let ((@x150 (mp (mp @x212 (quant-intro (proof-bind ?x237) (= $x286 $x236)) $x236) (quant-intro (proof-bind ?x170) (= $x236 $x231)) $x231)))
 (let ((@x308 (mp (mp~ @x150 (sk (~ $x231 $x234)) $x234) (rewrite (= $x234 $x74)) $x74)))
 (let ((@x285 (and-elim @x308 $x226)))
 (let ((@x361 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x226) $x65)) @x285 $x65)))
 (let (($x365 (>= ?x162 0)))
 (let ((@x61 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x226) $x365)) @x285 $x365)))
 (let (($x155 (not (>= ?x400 0))))
 (let (($x363 (<= ?x400 0)))
 (let ((@x393 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x73 (not $x363) $x155)) (and-elim @x308 $x75) (or (not $x363) $x155))))
 (let ((@x71 (unit-resolution @x393 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x363)) @x61 @x361 false) $x363) $x155)))
 ((_ th-lemma arith farkas 1 1 1) @x71 @x61 @x361 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 24
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1031781
 :num-checks                1
 :propagations              4
 :rlimit-count              1529
 :time                      0.01
 :total-time                0.01)
