unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x567 (* (- 1) (* c!3 c!3 c!3 n!0 n!0))))
 (let ((?x642 (* (- 3) (* c!3 k!2 k!2))))
 (let ((?x559 (* (- 2) (* k!2 k!2 k!2 n!0))))
 (let ((?x554 (* (- 6) (* c!3 k!2 k!2 n!0))))
 (let ((?x552 (* (- 6) (* c!3 c!3 k!2 n!0))))
 (let ((?x566 (* (- 3) (* c!3 c!3 k!2))))
 (let ((?x574 (* (- 1) (* k!2 k!2 k!2))))
 (let ((?x598 (* (- 3) (* c!3 k!2 k!2 n!0 n!0))))
 (let ((?x465 (+ c!3 k!2)))
 (let ((?x116 (+ k!2 m!1)))
 (let ((?x135 (+ 1 n!0)))
 (let ((?x644 (* (- 1) (* ?x135 ?x135 ?x135 ?x116 ?x116 ?x465 ?x465 ?x465))))
 (let ((?x500 (* (- 2) (* c!3 c!3 c!3 n!0))))
 (let ((?x426 (* (- 1) (* k!2 k!2 k!2 n!0 n!0))))
 (let ((?x379 (* (- 3) (* c!3 c!3 k!2 n!0 n!0))))
 (let ((?x466 (* (- 1) (* c!3 c!3 c!3))))
 (let ((?x629 (+ ?x466 ?x379 ?x426 ?x500 ?x644 ?x598 ?x574 ?x566 ?x552 ?x554 ?x559 ?x642 ?x567)))
 (let (($x1711 (<= ?x629 0)))
 (let ((?x543 (* (- 9) n!0)))
 (let ((?x278 (* 5 k!2)))
 (let ((?x586 (* 18 c!3)))
 (let ((?x536 (* k!2 k!2)))
 (let ((?x501 (* (- 1) ?x536)))
 (let ((?x331 (* c!3 n!0)))
 (let ((?x383 (* 9 ?x331)))
 (let ((?x639 (+ ?x383 ?x501 ?x586 ?x278 ?x543)))
 (let (($x179 (<= ?x639 4)))
 (let (($x284 (= ?x639 4)))
 (let ((?x433 (* (- 5) m!1)))
 (let ((?x674 (* 9 n!0)))
 (let ((?x647 (* (- 32) k!2)))
 (let ((?x428 (* (- 27) c!3)))
 (let ((?x518 (* k!2 n!0)))
 (let ((?x274 (* (- 9) ?x518)))
 (let ((?x325 (* (- 9) ?x331)))
 (let ((?x225 (* m!1 m!1)))
 (let ((?x218 (* 2 (* k!2 m!1))))
 (let ((?x114 (* ?x629 (+ 13 ?x218 ?x225 ?x325 ?x274 ?x536 ?x428 ?x647 ?x674 ?x433))))
 (let (($x526 (= ?x114 0)))
 (let (($x113 (not $x526)))
 (let ((?x239 (* (- 1) k!2)))
 (let ((?x654 (+ (* 3 (* n!0 n!0)) ?x239 (* 3 n!0))))
 (let (($x535 (= ?x654 (- 1))))
 (let ((?x393 (+ ?x518 (* (- 3) c!3) ?x239 (* 2 n!0))))
 (let (($x271 (= ?x393 (- 1))))
 (let ((?x246 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x493 (= ?x246 (- 6))))
 (let (($x641 (and $x493 $x284 $x271 $x535 $x113)))
 (let ((?x429 (+ ?x559 ?x554 ?x552 ?x500 ?x574 ?x642 ?x566 ?x466 ?x598 ?x426 ?x379 ?x567 ?x644)))
 (let (($x568 (= (* ?x429 (+ 13 ?x428 ?x647 ?x433 ?x674 ?x536 ?x274 ?x325 ?x218 ?x225)) 0)))
 (let (($x163 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x586 ?x278 ?x543 ?x501 ?x383) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x518)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x568))))
 (let (($x384 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x833 (* (- 1) (* ?x342 ?x342 ?x342 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x857 (* (- 1) (* c c c n n))))
 (let ((?x830 (* (- 3) (* c c k n n))))
 (let ((?x859 (* (- 1) (* k k k n n))))
 (let ((?x835 (* (- 3) (* c k k n n))))
 (let ((?x861 (* (- 1) (* c c c))))
 (let ((?x836 (* (- 3) (* c c k))))
 (let ((?x841 (* (- 3) (* c k k))))
 (let ((?x862 (* (- 1) (* k k k))))
 (let ((?x842 (* (- 2) (* c c c n))))
 (let ((?x847 (* (- 6) (* c c k n))))
 (let ((?x848 (* (- 6) (* c k k n))))
 (let ((?x853 (* (- 2) (* k k k n))))
 (let ((?x628 (+ ?x853 ?x848 ?x847 ?x842 ?x862 ?x841 ?x836 ?x861 ?x835 ?x859 ?x830 ?x857 ?x833)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x628 ?x482) 0)))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x860 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x652 (* (- 18) c)))
 (let ((?x854 (+ 13 ?x652 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x342 (+ 1 n)))
 (let ((?x833 (* (- 1) (* ?x342 ?x342 ?x342 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x117 (not (= (* (+ ?x833 (* (- 1) (* ?x342 ?x342 ?x68 ?x68 ?x68))) ?x854) 0))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x522 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x522 $x100 $x117))))))))))))))))))) :qid k!34))
 ))
 (let ((?x226 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x833 (* (- 1) (* ?x342 ?x342 ?x342 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x857 (* (- 1) (* c c c n n))))
 (let ((?x830 (* (- 3) (* c c k n n))))
 (let ((?x859 (* (- 1) (* k k k n n))))
 (let ((?x835 (* (- 3) (* c k k n n))))
 (let ((?x861 (* (- 1) (* c c c))))
 (let ((?x836 (* (- 3) (* c c k))))
 (let ((?x841 (* (- 3) (* c k k))))
 (let ((?x862 (* (- 1) (* k k k))))
 (let ((?x842 (* (- 2) (* c c c n))))
 (let ((?x847 (* (- 6) (* c c k n))))
 (let ((?x848 (* (- 6) (* c k k n))))
 (let ((?x853 (* (- 2) (* k k k n))))
 (let ((?x628 (+ ?x853 ?x848 ?x847 ?x842 ?x862 ?x841 ?x836 ?x861 ?x835 ?x859 ?x830 ?x857 ?x833)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x635 (and $x125 $x209 $x261 $x299 (not (= (* ?x628 ?x482) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x652 (* (- 18) c)))
 (let ((?x854 (+ 13 ?x652 (* (- 23) k) (* (- 9) (* ?x342 ?x68)) ?x427 ?x48 ?x78)))
 (let (($x117 (not (= (* (+ ?x833 (* (- 1) (* ?x342 ?x342 ?x68 ?x68 ?x68))) ?x854) 0))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x522 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x315 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x522 $x100 $x117)))
 (rewrite (= $x315 $x635))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x118 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x652 (* (- 18) c)))
 (let ((?x854 (+ 13 ?x652 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x342 (+ 1 n)))
 (let ((?x833 (* (- 1) (* ?x342 ?x342 ?x342 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x117 (not (= (* (+ ?x833 (* (- 1) (* ?x342 ?x342 ?x68 ?x68 ?x68))) ?x854) 0))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x509 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x546 (= (+ ?x652 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x546 $x509 $x100 $x117))))))))))))))) :qid k!34))
 ))
 (let ((?x614 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x652 (* (- 18) c)))
 (let ((?x854 (+ 13 ?x652 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x342 (+ 1 n)))
 (let ((?x833 (* (- 1) (* ?x342 ?x342 ?x342 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x117 (not (= (* (+ ?x833 (* (- 1) (* ?x342 ?x342 ?x68 ?x68 ?x68))) ?x854) 0))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x522 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x315 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x522 $x100 $x117)))
 (let (($x509 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x546 (= (+ ?x652 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x326 (and $x125 $x546 $x509 $x100 $x117)))
 (rewrite (= $x326 $x315)))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x68 (+ c k)))
 (let ((?x82 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x70 ?x70 ?x70) (* 0 ?x68 ?x68 ?x72 ?x82 ?x82 ?x82))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x87 (* (+ ?x76 (* 9 ?x70) ?x78) (- ?x84 (* ?x68 ?x68 ?x68 ?x70 ?x70)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x87 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x308 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x652 (* (- 18) c)))
 (let ((?x854 (+ 13 ?x652 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x342 (+ 1 n)))
 (let ((?x833 (* (- 1) (* ?x342 ?x342 ?x342 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x117 (not (= (* (+ ?x833 (* (- 1) (* ?x342 ?x342 ?x68 ?x68 ?x68))) ?x854) 0))))
 (let (($x100 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x509 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x546 (= (+ ?x652 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x326 (and $x125 $x546 $x509 $x100 $x117)))
 (let ((?x82 (+ m 6)))
 (let ((?x70 (+ n 1)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x70 ?x70 ?x70) (* 0 ?x68 ?x68 ?x72 ?x82 ?x82 ?x82))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x87 (* (+ ?x76 (* 9 ?x70) ?x78) (- ?x84 (* ?x68 ?x68 ?x68 ?x70 ?x70)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x87 0))))))
 (rewrite (= $x91 $x326))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x865 (mp (mp @x93 (quant-intro (proof-bind ?x308) (= $x92 $x118)) $x118) (rewrite (= $x118 $x118)) $x118)))
 (let ((@x394 (mp (mp @x865 (quant-intro (proof-bind ?x614) (= $x118 $x860)) $x860) (quant-intro (proof-bind ?x226) (= $x860 $x384)) $x384)))
 (let ((@x528 (mp (mp~ @x394 (sk (~ $x384 $x163)) $x163) (rewrite (= $x163 $x641)) $x641)))
 (let ((@x373 (and-elim @x528 $x284)))
 (let ((@x425 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x284) $x179)) @x373 $x179)))
 (let (($x192 (>= ?x639 4)))
 (let ((@x324 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x284) $x192)) @x373 $x192)))
 (let (($x189 (<= ?x393 (- 1))))
 (let ((@x562 (and-elim @x528 $x271)))
 (let ((@x634 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x271) $x189)) @x562 $x189)))
 (let (($x194 (>= ?x393 (- 1))))
 (let ((@x283 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x271) $x194)) @x562 $x194)))
 (let (($x187 (<= ?x246 (- 6))))
 (let ((@x112 (and-elim @x528 $x493)))
 (let ((@x595 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x493) $x187)) @x112 $x187)))
 (let (($x190 (>= ?x246 (- 6))))
 (let ((@x603 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x493) $x190)) @x112 $x190)))
 (let (($x195 (<= ?x654 (- 1))))
 (let ((@x563 (and-elim @x528 $x535)))
 (let ((@x507 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x535) $x195)) @x563 $x195)))
 (let (($x99 (>= ?x654 (- 1))))
 (let ((@x339 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x535) $x99)) @x563 $x99)))
 (let ((@x1740 (hypothesis (not $x1711))))
 (let (($x720 (not (<= ?x114 0))))
 (let (($x110 (>= ?x114 0)))
 (let (($x188 (not $x110)))
 (let ((@x191 (hypothesis $x188)))
 (let ((@x1837 ((_ th-lemma arith) @x191 @x1740 @x603 @x595 @x339 @x507 @x339 @x507 @x603 @x595 @x324 @x425 @x283 @x634 false)))
 (let (($x1720 (>= ?x629 0)))
 (let ((@x1687 (hypothesis (not $x1720))))
 (let ((@x1726 ((_ th-lemma arith) @x191 @x1687 @x339 @x507 @x603 @x595 @x324 @x425 @x339 @x507 @x339 @x507 @x324 @x425 @x324 @x425 @x339 @x507 @x324 @x425 @x339 @x507 @x324 @x425 @x339 @x507 @x339 @x507 @x283 @x634 @x603 @x595 @x324 @x425 @x283 @x634 false)))
 (let ((@x1818 ((_ th-lemma arith farkas 1 1 1) @x191 (unit-resolution (lemma @x1726 (or $x1720 $x110)) @x191 $x1720) (unit-resolution (lemma @x1837 (or $x1711 $x110)) @x191 $x1711) false)))
 (let ((@x415 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x526 $x720 $x188)) (and-elim @x528 $x113) (or $x720 $x188))))
 (let ((@x416 (unit-resolution @x415 (lemma @x1818 $x110) $x720)))
 (let ((@x1714 ((_ th-lemma arith) @x416 @x1740 @x283 @x634 @x339 @x507 @x339 @x507 @x283 @x634 @x283 @x634 @x339 @x507 @x603 @x595 @x339 @x507 @x603 @x595 @x283 @x634 @x324 @x425 false)))
 (let ((@x648 ((_ th-lemma arith) @x416 @x1687 @x324 @x425 @x283 @x634 @x283 @x634 @x603 @x595 @x283 @x634 @x324 @x425 @x339 @x507 @x324 @x425 @x283 @x634 @x603 @x595 @x324 @x425 false)))
 ((_ th-lemma arith farkas 1 1 1) @x416 (lemma @x648 $x1720) (lemma @x1714 $x1711) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 240
 :arith-assert-diseq        50
 :arith-assert-lower        1850
 :arith-assert-upper        1727
 :arith-bound-prop          48
 :arith-branch-var          50
 :arith-conflicts           112
 :arith-eq-adapter          23
 :arith-fixed-eqs           355
 :arith-gcd-tests           552
 :arith-gomory-cuts         35
 :arith-grobner             107
 :arith-ineq-splits         50
 :arith-max-min             11073
 :arith-nonlinear-bounds    648
 :arith-nonlinear-horner    1313
 :arith-num-rows            20
 :arith-offset-eqs          16
 :arith-patches             124
 :arith-patches_succ        25
 :arith-pivots              3529
 :arith-pseudo-nonlinear    445
 :arith-row-summations      29405
 :arith-tableau-max-columns 68
 :arith-tableau-max-rows    20
 :conflicts                 116
 :decisions                 653
 :del-clause                246
 :final-checks              353
 :max-memory                4.56
 :memory                    3.33
 :minimized-lits            29
 :mk-bool-var               561
 :mk-clause                 536
 :num-allocs                2315959424
 :num-checks                1
 :propagations              919
 :restarts                  1
 :rlimit-count              5315114
 :time                      6.11
 :total-time                6.11)
