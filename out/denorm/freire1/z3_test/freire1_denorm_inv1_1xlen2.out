unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x160 (* 2 x!0)))
 (let ((?x235 (* r!1 r!1)))
 (let ((?x159 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x72 (+ r00 ?x83 ?x99 ?x159 ?x235 ?x160)))
 (let (($x273 (<= ?x72 0)))
 (let (($x74 (= ?x72 0)))
 (let ((?x164 (* (- 1) x!0)))
 (let ((?x123 (* 2 ?x235)))
 (let ((?x156 (* (- 3) (* r!1 x!0))))
 (let ((?x142 (* x!0 x!0)))
 (let ((?x111 (* (+ r!1 ?x142 ?x156 ?x123 ?x164) ?x72)))
 (let (($x110 (= ?x111 0)))
 (let (($x112 (not $x110)))
 (let (($x98 (and $x74 $x112)))
 (let ((?x137 (* (+ r!1 ?x164 ?x123 ?x156 ?x142) (+ ?x159 ?x160 r00 ?x235 ?x83 ?x99))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x136 (and (= (+ r!1 (* (- 2) x!0) ?x114 (* (- 1) ?x235) ?x35 ?x36) 0) (not (= ?x137 0)))))
 (let (($x182 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x246 (* x x)))
 (let ((?x279 (* (- 3) (* r x))))
 (let ((?x227 (* (- 1) x)))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x117 (= (+ r (* (- 2) x) ?x114 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x117 (not (= (* (+ r ?x227 (* 2 ?x30) ?x279 ?x246) ?x105) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x257 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x178 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x83 ?x99) 0) (not (= (* ?x70 ?x178) 0))))))))) :qid k!26))
 ))
 (let ((?x276 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x246 (* x x)))
 (let ((?x279 (* (- 3) (* r x))))
 (let ((?x227 (* (- 1) x)))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x117 (= (+ r (* (- 2) x) ?x114 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x103 (and $x117 (not (= (* (+ r ?x227 (* 2 ?x30) ?x279 ?x246) ?x105) 0)))))
 (let ((?x178 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x ?x62))) (* (+ x ?x62) (+ x ?x62)))))
 (let (($x68 (and (= (+ ?x62 r00 ?x30 ?x32 ?x83 ?x99) 0) (not (= (* ?x70 ?x178) 0)))))
 (rewrite (= $x68 $x103))))))))))))))))))))
 ))
 (let (($x57 (exists ((r Int) (x Int) )(! (let ((?x51 (+ (* (- 1) (+ r 1) (- x r)) (* (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))))) :qid k!26))
 ))
 (let ((?x261 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x178 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let (($x68 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x83 ?x99) 0) (not (= (* ?x70 ?x178) 0)))))
 (let ((?x51 (+ (* (- 1) (+ r 1) (- x r)) (* (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x56 (and $x40 (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))
 (rewrite (= $x56 $x68)))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (let ((@x184 (mp (mp @x58 (quant-intro (proof-bind ?x261) (= $x57 $x257)) $x257) (rewrite (= $x257 $x257)) $x257)))
 (let ((@x168 (mp~ (mp @x184 (quant-intro (proof-bind ?x276) (= $x257 $x182)) $x182) (sk (~ $x182 $x136)) $x136)))
 (let ((@x128 (mp @x168 (rewrite (= $x136 $x98)) $x98)))
 (let ((@x101 (and-elim @x128 $x74)))
 (let ((@x171 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x74) $x273)) @x101 $x273)))
 (let (($x237 (>= ?x72 0)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x74) $x237)) @x101 $x237)))
 (let (($x187 (not (>= ?x111 0))))
 (let (($x107 (<= ?x111 0)))
 (let ((@x251 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x110 (not $x107) $x187)) (and-elim @x128 $x112) (or (not $x107) $x187))))
 (let ((@x250 (unit-resolution @x251 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x107)) @x104 @x171 false) $x107) $x187)))
 ((_ th-lemma arith farkas 1 1 1) @x250 @x104 @x171 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 15
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                19.43
 :memory                    19.09
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                396554
 :num-checks                1
 :propagations              4
 :rlimit-count              881
 :time                      0.01
 :total-time                0.02)
