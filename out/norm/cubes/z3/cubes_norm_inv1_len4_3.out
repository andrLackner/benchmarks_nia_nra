unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x450 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x569 (<= ?x450 (- 6))))
 (let (($x367 (= ?x450 (- 6))))
 (let ((?x175 (+ k!2 c!3)))
 (let ((?x160 (+ 6 m!1)))
 (let ((?x361 (+ 1 n!0)))
 (let ((?x323 (* 6 (* k!2 k!2 k!2 k!2))))
 (let ((?x221 (* (- 6) (* ?x361 ?x361 ?x361 ?x160 ?x160 (+ m!1 k!2) ?x175 ?x175 ?x175))))
 (let ((?x543 (+ m!1 k!2)))
 (let ((?x439 (+ (* 6 (* ?x361 ?x361 ?x361 ?x361 ?x160 ?x160 ?x160 ?x175 ?x175 ?x175)) (* (- 1) (* m!1 k!2 k!2 k!2 k!2)) (* (- 1) (* ?x361 ?x160 ?x160 ?x160 ?x543 ?x543 ?x543 ?x175)) (* (- 1) (* ?x361 ?x361 ?x361 ?x160 ?x160 ?x160 ?x160 ?x175 ?x175 ?x175)) (* 18 (* k!2 k!2 k!2 c!3)) (* 18 (* m!1 k!2 k!2 c!3)) (* (- 1) (* m!1 k!2 c!3 c!3 c!3)) (* (- 6) (* ?x361 ?x361 ?x160 ?x160 ?x543 ?x175 ?x175 ?x175)) (* 6 (* k!2 c!3 c!3 c!3)) (* 6 (* m!1 c!3 c!3 c!3)) (* 6 (* m!1 k!2 k!2 k!2)) (* 6 (* n!0 k!2 c!3 c!3 c!3)) (* 6 (* ?x361 ?x361 ?x160 ?x160 ?x543 ?x543 ?x543 ?x175)) (* 18 (* k!2 k!2 c!3 c!3)) (* 6 (* ?x361 ?x160 ?x160 ?x543 ?x543 ?x543 ?x175)) ?x221 (* 6 (* n!0 k!2 k!2 k!2 k!2)) (* 18 (* n!0 k!2 k!2 k!2 c!3)) (* (- 3) (* m!1 m!1 k!2 k!2 c!3)) (* 18 (* n!0 k!2 k!2 c!3 c!3)) (* 18 (* n!0 m!1 k!2 c!3 c!3)) (* (- 3) (* m!1 k!2 k!2 c!3 c!3)) (* ?x361 ?x361 ?x160 ?x160 ?x160 ?x543 ?x175 ?x175 ?x175) (* (- 1) (* m!1 m!1 c!3 c!3 c!3)) (* (- 3) (* m!1 k!2 k!2 k!2 c!3)) (* 6 (* n!0 m!1 c!3 c!3 c!3)) (* 18 (* n!0 m!1 k!2 k!2 c!3)) (* (- 1) (* m!1 m!1 k!2 k!2 k!2)) ?x323 (* 6 (* ?x361 ?x361 ?x361 ?x160 ?x160 ?x160 ?x175 ?x175 ?x175)) (* 6 (* n!0 m!1 k!2 k!2 k!2)) (* (- 3) (* m!1 m!1 k!2 c!3 c!3)) (* 18 (* m!1 k!2 c!3 c!3)))))
 (let (($x409 (= ?x439 0)))
 (let (($x212 (not $x409)))
 (let (($x366 (= (+ (* 3 n!0) (* 3 (* n!0 n!0)) (* (- 1) k!2)) (- 1))))
 (let (($x526 (= (+ (* 2 n!0) (* (- 1) k!2) (* n!0 k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x334 (* k!2 k!2)))
 (let ((?x792 (+ ?x334 (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x153 (and $x367 (= ?x792 (- 4)) $x526 $x366 $x212)))
 (let ((?x592 (+ c!3 k!2)))
 (let ((?x826 (+ k!2 m!1)))
 (let ((?x484 (+ (* 6 (* ?x361 ?x361 ?x160 ?x160 ?x826 ?x826 ?x826 ?x592)) (* 18 (* c!3 c!3 k!2 m!1)) ?x323 (* (- 6) (* ?x361 ?x361 ?x160 ?x160 ?x826 ?x592 ?x592 ?x592)) (* (- 6) (* ?x361 ?x361 ?x361 ?x160 ?x160 ?x826 ?x592 ?x592 ?x592)) (* 6 (* c!3 c!3 c!3 k!2)) (* 6 (* ?x361 ?x361 ?x361 ?x361 ?x160 ?x160 ?x160 ?x592 ?x592 ?x592)) (* 6 (* c!3 c!3 c!3 m!1)) (* 18 (* c!3 k!2 k!2 m!1)) (* 18 (* c!3 c!3 k!2 k!2)) (* 18 (* c!3 k!2 k!2 k!2)) (* (- 1) (* ?x361 ?x160 ?x160 ?x160 ?x826 ?x826 ?x826 ?x592)) (* 6 (* k!2 k!2 k!2 m!1)) (* (- 1) (* ?x361 ?x361 ?x361 ?x160 ?x160 ?x160 ?x160 ?x592 ?x592 ?x592)) (* ?x361 ?x361 ?x160 ?x160 ?x160 ?x826 ?x592 ?x592 ?x592) (* (- 1) (* k!2 k!2 k!2 m!1 m!1)) (* (- 3) (* c!3 k!2 k!2 m!1 m!1)) (* (- 3) (* c!3 c!3 k!2 m!1 m!1)) (* (- 1) (* k!2 k!2 k!2 k!2 m!1)) (* (- 1) (* c!3 c!3 c!3 m!1 m!1)) (* (- 3) (* c!3 k!2 k!2 k!2 m!1)) (* (- 3) (* c!3 c!3 k!2 k!2 m!1)) (* 6 (* ?x361 ?x160 ?x160 ?x826 ?x826 ?x826 ?x592)) (* (- 1) (* c!3 c!3 c!3 k!2 m!1)) (* 6 (* ?x361 ?x361 ?x361 ?x160 ?x160 ?x160 ?x592 ?x592 ?x592)) (* 6 (* c!3 c!3 c!3 k!2 n!0)) (* 18 (* c!3 c!3 k!2 k!2 n!0)) (* 18 (* c!3 k!2 k!2 k!2 n!0)) (* 6 (* k!2 k!2 k!2 k!2 n!0)) (* 6 (* c!3 c!3 c!3 m!1 n!0)) (* 18 (* c!3 c!3 k!2 m!1 n!0)) (* 18 (* c!3 k!2 k!2 m!1 n!0)) (* 6 (* k!2 k!2 k!2 m!1 n!0)))))
 (let (($x532 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x195 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x334) (* 9 (* c!3 n!0)))))
 (let (($x374 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x195 4) $x532 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x484 0)))))
 (let (($x362 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x671 (* 6 (* k k k m n))))
 (let ((?x657 (* 6 (* c c c m n))))
 (let ((?x655 (* 6 (* k k k k n))))
 (let ((?x641 (* 6 (* c c c k n))))
 (let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x471 (* 6 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x394 (* (- 1) (* c c c k m))))
 (let ((?x338 (* 6 (* ?x315 ?x312 ?x312 (+ k m) (+ k m) (+ k m) ?x68))))
 (let ((?x611 (* (- 3) (* c c k k m))))
 (let ((?x608 (* (- 3) (* c k k k m))))
 (let ((?x385 (* (- 1) (* c c c m m))))
 (let ((?x390 (* (- 1) (* k k k k m))))
 (let ((?x605 (* (- 3) (* c c k m m))))
 (let ((?x602 (* (- 3) (* c k k m m))))
 (let ((?x381 (* (- 1) (* k k k m m))))
 (let ((?x69 (+ k m)))
 (let ((?x477 (* ?x315 ?x315 ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x466 (* (- 1) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x324 (* (- 1) (* ?x315 ?x312 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x556 (* 6 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x308 (* (- 6) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x262 (* (- 6) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x145 (* 6 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x813 (+ ?x145 (* 18 (* c c k m)) (* 6 (* k k k k)) ?x262 ?x308 (* 6 (* c c c k)) ?x556 (* 6 (* c c c m)) (* 18 (* c k k m)) (* 18 (* c c k k)) (* 18 (* c k k k)) ?x324 (* 6 (* k k k m)) ?x466 ?x477 ?x381 ?x602 ?x605 ?x390 ?x385 ?x608 ?x611 ?x338 ?x394 ?x471 ?x641 (* 18 (* c c k k n)) (* 18 (* c k k k n)) ?x655 ?x657 (* 18 (* c c k m n)) (* 18 (* c k k m n)) ?x671)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 $x214 $x266 $x304 (not (= ?x813 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x264 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x158 (* 6 (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x145 (* 6 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x262 (* (- 6) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x308 (* (- 6) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x556 (* 6 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x338 (* 6 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x324 (* (- 1) (* ?x315 ?x312 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x466 (* (- 1) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x471 (* 6 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x477 (* ?x315 ?x315 ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x178 (+ ?x477 ?x471 ?x466 ?x324 ?x338 ?x556 (* (- 1) (* ?x312 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x315 ?x69 ?x68 ?x68 ?x68)) ?x308 ?x262 ?x145 ?x158)))
 (let (($x456 (not (= ?x178 0))))
 (let (($x493 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x413 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x413 $x493 $x456))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x355 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x671 (* 6 (* k k k m n))))
 (let ((?x657 (* 6 (* c c c m n))))
 (let ((?x655 (* 6 (* k k k k n))))
 (let ((?x641 (* 6 (* c c c k n))))
 (let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x471 (* 6 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x394 (* (- 1) (* c c c k m))))
 (let ((?x338 (* 6 (* ?x315 ?x312 ?x312 (+ k m) (+ k m) (+ k m) ?x68))))
 (let ((?x611 (* (- 3) (* c c k k m))))
 (let ((?x608 (* (- 3) (* c k k k m))))
 (let ((?x385 (* (- 1) (* c c c m m))))
 (let ((?x390 (* (- 1) (* k k k k m))))
 (let ((?x605 (* (- 3) (* c c k m m))))
 (let ((?x602 (* (- 3) (* c k k m m))))
 (let ((?x381 (* (- 1) (* k k k m m))))
 (let ((?x69 (+ k m)))
 (let ((?x477 (* ?x315 ?x315 ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x466 (* (- 1) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x324 (* (- 1) (* ?x315 ?x312 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x556 (* 6 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x308 (* (- 6) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x262 (* (- 6) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x145 (* 6 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x813 (+ ?x145 (* 18 (* c c k m)) (* 6 (* k k k k)) ?x262 ?x308 (* 6 (* c c c k)) ?x556 (* 6 (* c c c m)) (* 18 (* c k k m)) (* 18 (* c c k k)) (* 18 (* c k k k)) ?x324 (* 6 (* k k k m)) ?x466 ?x477 ?x381 ?x602 ?x605 ?x390 ?x385 ?x608 ?x611 ?x338 ?x394 ?x471 ?x641 (* 18 (* c c k k n)) (* 18 (* c k k k n)) ?x655 ?x657 (* 18 (* c c k m n)) (* 18 (* c k k m n)) ?x671)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x807 (and $x130 $x214 $x266 $x304 (not (= ?x813 0)))))
 (let ((?x178 (+ ?x477 ?x471 ?x466 ?x324 ?x338 ?x556 (* (- 1) (* ?x312 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x315 ?x69 ?x68 ?x68 ?x68)) ?x308 ?x262 ?x145 (* 6 (* ?x69 ?x68 ?x68 ?x68)))))
 (let (($x456 (not (= ?x178 0))))
 (let (($x493 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x413 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x265 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x413 $x493 $x456)))
 (rewrite (= $x265 $x807))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x572 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x158 (* 6 (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x145 (* 6 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x262 (* (- 6) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x308 (* (- 6) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x556 (* 6 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x338 (* 6 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x324 (* (- 1) (* ?x315 ?x312 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x466 (* (- 1) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x471 (* 6 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x477 (* ?x315 ?x315 ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x178 (+ ?x477 ?x471 ?x466 ?x324 ?x338 ?x556 (* (- 1) (* ?x312 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x315 ?x69 ?x68 ?x68 ?x68)) ?x308 ?x262 ?x145 ?x158)))
 (let (($x456 (not (= ?x178 0))))
 (let (($x493 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x483 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x600 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= ?x600 (- 4)) $x483 $x493 $x456))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x228 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x158 (* 6 (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x145 (* 6 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x262 (* (- 6) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x308 (* (- 6) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x556 (* 6 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x338 (* 6 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x324 (* (- 1) (* ?x315 ?x312 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x466 (* (- 1) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x471 (* 6 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x477 (* ?x315 ?x315 ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x178 (+ ?x477 ?x471 ?x466 ?x324 ?x338 ?x556 (* (- 1) (* ?x312 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x315 ?x69 ?x68 ?x68 ?x68)) ?x308 ?x262 ?x145 ?x158)))
 (let (($x456 (not (= ?x178 0))))
 (let (($x493 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x413 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x265 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x413 $x493 $x456)))
 (let (($x483 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x600 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x472 (and $x130 (= ?x600 (- 4)) $x483 $x493 $x456)))
 (rewrite (= $x472 $x265))))))))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (+ (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x78 (- (- ?x74 (* ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x81 (+ ?x78 (* 6 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71) (* 6 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x85 (+ (- ?x81 (* ?x68 ?x68 ?x68 ?x69 ?x70)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x71))))
 (let ((?x89 (- (- ?x85 (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x92 (+ ?x89 (* 6 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x68 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x473 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x158 (* 6 (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x145 (* 6 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x262 (* (- 6) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x308 (* (- 6) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x556 (* 6 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x338 (* 6 (* ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x324 (* (- 1) (* ?x315 ?x312 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x466 (* (- 1) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x471 (* 6 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68))))
 (let ((?x477 (* ?x315 ?x315 ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x178 (+ ?x477 ?x471 ?x466 ?x324 ?x338 ?x556 (* (- 1) (* ?x312 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x315 ?x69 ?x68 ?x68 ?x68)) ?x308 ?x262 ?x145 ?x158)))
 (let (($x456 (not (= ?x178 0))))
 (let (($x493 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x483 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x600 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x472 (and $x130 (= ?x600 (- 4)) $x483 $x493 $x456)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x78 (- (- ?x74 (* ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x81 (+ ?x78 (* 6 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71) (* 6 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x85 (+ (- ?x81 (* ?x68 ?x68 ?x68 ?x69 ?x70)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x71))))
 (let ((?x89 (- (- ?x85 (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x92 (+ ?x89 (* 6 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x68 ?x68 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x96 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0))))))
 (rewrite (= $x96 $x472))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x263 (mp (mp @x98 (quant-intro (proof-bind ?x473) (= $x97 $x572)) $x572) (rewrite (= $x572 $x572)) $x572)))
 (let ((@x775 (mp (mp @x263 (quant-intro (proof-bind ?x228) (= $x572 $x264)) $x264) (quant-intro (proof-bind ?x355) (= $x264 $x362)) $x362)))
 (let ((@x211 (mp (mp~ @x775 (sk (~ $x362 $x374)) $x374) (rewrite (= $x374 $x153)) $x153)))
 (let ((@x208 (and-elim @x211 $x367)))
 (let ((@x341 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x367) $x569)) @x208 $x569)))
 (let (($x392 (>= ?x450 (- 6))))
 (let ((@x676 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x367) $x392)) @x208 $x392)))
 (let (($x331 (not (<= ?x439 0))))
 (let (($x464 (>= ?x439 0)))
 (let ((@x447 (lemma ((_ th-lemma arith) (hypothesis (not $x464)) @x676 @x341 @x676 @x341 false) $x464)))
 (let ((@x237 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x409 $x331 (not $x464))) (and-elim @x211 $x212) (or $x331 (not $x464)))))
 ((_ th-lemma arith) (unit-resolution @x237 @x447 $x331) @x676 @x341 @x676 @x341 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        11
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           7
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             350
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             3
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-row-summations      10
 :arith-tableau-max-columns 63
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.68
 :memory                    3.21
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1266100
 :num-checks                1
 :propagations              10
 :rlimit-count              7739
 :time                      0.01
 :total-time                0.02)
