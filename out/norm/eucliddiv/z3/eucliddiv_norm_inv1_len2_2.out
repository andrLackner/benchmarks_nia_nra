unsat
((set-logic NIA)
(proof
(let (($x54 (exists ((q Int) (r Int) (y Int) )(! (let ((?x46 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x46 ?x46 ?x46 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x45 (+ ?x43 ?x44)))
 (let ((?x48 (- ?x45 ?x47)))
 (let ((?x49 (+ ?x48 ?x47)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x52))))))))))))))) :qid k!29))
 ))
 (let (($x218 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x219 (lambda ((q Int) (r Int) (y Int) )(let ((?x46 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* ?x42 ?x46 ?x46 ?x46 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x45 (+ ?x43 ?x44)))
 (let ((?x48 (- ?x45 ?x47)))
 (let ((?x49 (+ ?x48 ?x47)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x53 (and $x33 $x41 $x52)))
 (let (($x147 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x83 (= (+ (* (- 1) y00) y) 0)))
 (let (($x210 (and $x83 $x147 false)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x158 (+ r ?x59)))
 (let ((?x95 (+ 1 q)))
 (let ((?x164 (* y00 y00 ?x95 ?x158 ?x158 ?x158)))
 (let ((?x172 (* (- 1) ?x164)))
 (let ((?x179 (+ ?x172 ?x164)))
 (let ((@x160 (rewrite (= ?x46 ?x158))))
 (let ((@x98 (rewrite (= ?x42 ?x95))))
 (let ((@x163 (monotonicity @x98 @x160 @x160 @x160 (= ?x47 (* ?x95 ?x158 ?x158 ?x158 y00 y00)))))
 (let ((@x168 (trans @x163 (rewrite (= (* ?x95 ?x158 ?x158 ?x158 y00 y00) ?x164)) (= ?x47 ?x164))))
 (let ((?x223 (* y00 y00 y00 y00 ?x95 ?x95 ?x95)))
 (let ((?x224 (* (- 1) ?x223)))
 (let ((?x151 (+ ?x224 ?x223)))
 (let ((@x82 (monotonicity @x98 @x98 @x98 (= ?x44 (* ?x95 ?x95 ?x95 y00 y00 y00 y00)))))
 (let ((@x149 (trans @x82 (rewrite (= (* ?x95 ?x95 ?x95 y00 y00 y00 y00) ?x223)) (= ?x44 ?x223))))
 (let ((@x203 (monotonicity (rewrite (= ?x28 (- 1))) @x98 @x98 @x98 (= ?x43 (* (- 1) ?x95 ?x95 ?x95 y00 y00 y00 y00)))))
 (let ((@x62 (trans @x203 (rewrite (= (* (- 1) ?x95 ?x95 ?x95 y00 y00 y00 y00) ?x224)) (= ?x43 ?x224))))
 (let ((@x157 (trans (monotonicity @x62 @x149 (= ?x45 ?x151)) (rewrite (= ?x151 0)) (= ?x45 0))))
 (let ((@x177 (trans (monotonicity @x157 @x168 (= ?x48 (- 0 ?x164))) (rewrite (= (- 0 ?x164) (+ 0 ?x172))) (= ?x48 (+ 0 ?x172)))))
 (let ((@x183 (monotonicity (trans @x177 (rewrite (= (+ 0 ?x172) ?x172)) (= ?x48 ?x172)) @x168 (= ?x49 ?x179))))
 (let ((@x188 (monotonicity (trans @x183 (rewrite (= ?x179 0)) $x50) (= $x50 (= 0 0)))))
 (let ((@x200 (monotonicity (trans @x188 (rewrite (= (= 0 0) true)) (= $x50 true)) (= $x51 (not true)))))
 (let ((@x205 (monotonicity (trans @x200 (rewrite (= (not true) false)) (= $x51 false)) (= $x52 (or false)))))
 (let ((@x213 (monotonicity (rewrite (= $x33 $x83)) (rewrite (= $x41 $x147)) (trans @x205 (rewrite (= (or false) false)) (= $x52 false)) (= $x53 $x210))))
 (trans @x213 (rewrite (= $x210 false)) (= $x53 false)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x232 (trans (quant-intro (proof-bind ?x219) (= $x54 $x218)) (elim-unused (= $x218 false)) (= $x54 false))))
 (let ((@x55 (asserted $x54)))
 (mp @x55 @x232 false))))))))

(:max-memory   3.38
 :memory       3.07
 :mk-bool-var  5
 :num-allocs   918583
 :rlimit-count 271
 :time         0.01
 :total-time   0.01)
