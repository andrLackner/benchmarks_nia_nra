unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x538 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x69 (<= ?x538 0)))
 (let (($x551 (= ?x538 0)))
 (let ((?x494 (* (- 1) (* x!1 x!1))))
 (let ((?x469 (* x!1 x!1 x!1)))
 (let ((?x495 (* (- 1) (* y!0 y!0))))
 (let ((?x476 (* (- 1) (* y!0 y!0 y!0))))
 (let ((?x719 (+ (* x00 y!0) ?x476 ?x495 ?x469 (* (- 1) (* x00 y!0 y!0 x!1)) ?x494 (* y00 x!1) (* y00 y!0) (* x00 x!1) (* (- 1) (* y00 x!1 x!1)) (* (- 1) (* y00 y!0 x!1 x!1)) (* x00 y!0 y!0) (* (- 1) (* x00 y!0 x!1 x!1)) (* (- 2) (* y!0 x!1)) (* y!0 x!1 x!1) (* (- 1) (* x00 x!1 x!1)) (* y!0 x!1 x!1 x!1) (* (- 1) (* y!0 y!0 x!1)) (* 2 (* y!0 y!0 x!1 x!1)) (* y!0 y!0 y!0 x!1) (* y00 y!0 y!0) (* (- 1) (* y00 y!0 y!0 x!1)))))
 (let (($x723 (= ?x719 0)))
 (let (($x540 (not $x723)))
 (let (($x724 (and $x551 $x540)))
 (let ((?x500 (+ (* y!0 y00) (* (- 1) (* x!1 x!1 y00)) (* (- 1) (* x!1 x!1 y!0 y00)) (* x!1 x00) (* (- 1) (* x!1 y!0 y!0 x00)) (* y!0 x00) (* y!0 y!0 x00) (* (- 1) (* x!1 x!1 x00)) (* (- 1) (* x!1 x!1 y!0 x00)) (* x!1 y00) (* (- 2) (* x!1 y!0)) (* x!1 x!1 y!0) (* x!1 x!1 x!1 y!0) ?x494 ?x469 ?x495 (* (- 1) (* x!1 y!0 y!0)) (* 2 (* x!1 x!1 y!0 y!0)) ?x476 (* x!1 y!0 y!0 y!0) (* y!0 y!0 y00) (* (- 1) (* x!1 y!0 y!0 y00)))))
 (let (($x503 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x500 0)))))
 (let (($x772 (exists ((x Int) (y Int) )(! (let ((?x621 (* (- 1) (* x y y y00))))
 (let ((?x580 (* y y y00)))
 (let ((?x527 (* x y y y)))
 (let ((?x526 (* (- 1) (* y y y))))
 (let ((?x468 (* 2 (* x x y y))))
 (let ((?x394 (* x x x)))
 (let ((?x376 (* x x x y)))
 (let ((?x374 (* x x y)))
 (let ((?x316 (* (- 1) (* x x y x00))))
 (let ((?x315 (* (- 1) (* x x x00))))
 (let ((?x221 (* y y x00)))
 (let ((?x210 (* y x00)))
 (let ((?x201 (* (- 1) (* x y y x00))))
 (let ((?x157 (* x x00)))
 (let ((?x112 (* (- 1) (* x x y y00))))
 (let ((?x102 (* y y00)))
 (let ((?x765 (+ ?x102 (* (- 1) (* x x y00)) ?x112 ?x157 ?x201 ?x210 ?x221 ?x315 ?x316 (* x y00) (* (- 2) (* x y)) ?x374 ?x376 (* (- 1) (* x x)) ?x394 (* (- 1) (* y y)) (* (- 1) (* x y y)) ?x468 ?x526 ?x527 ?x580 ?x621)))
 (let (($x82 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x82 (not (= ?x765 0))))))))))))))))))))) :qid k!26))
 ))
 (let (($x144 (exists ((x Int) (y Int) )(! (let ((?x398 (+ 1 y)))
 (let ((?x359 (+ (- 1) x)))
 (let ((?x235 (* y00 ?x359 ?x398 ?x398)))
 (let ((?x120 (* x00 ?x359 ?x359 ?x398)))
 (let ((?x407 (* x00 ?x359 ?x398 ?x398)))
 (let ((?x402 (* y00 ?x359 ?x359 ?x398)))
 (let ((?x358 (+ ?x402 ?x407 ?x120 (* (- 1) (* ?x359 ?x359 ?x359 ?x398)) (* (- 2) (* ?x359 ?x359 ?x398 ?x398)) (* (- 1) (* ?x359 ?x398 ?x398 ?x398)) ?x235)))
 (let (($x365 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x365 (not (= ?x358 0))))))))))) :qid k!26))
 ))
 (let ((?x774 (lambda ((x Int) (y Int) )(let ((?x621 (* (- 1) (* x y y y00))))
 (let ((?x580 (* y y y00)))
 (let ((?x527 (* x y y y)))
 (let ((?x526 (* (- 1) (* y y y))))
 (let ((?x468 (* 2 (* x x y y))))
 (let ((?x394 (* x x x)))
 (let ((?x376 (* x x x y)))
 (let ((?x374 (* x x y)))
 (let ((?x316 (* (- 1) (* x x y x00))))
 (let ((?x315 (* (- 1) (* x x x00))))
 (let ((?x221 (* y y x00)))
 (let ((?x210 (* y x00)))
 (let ((?x201 (* (- 1) (* x y y x00))))
 (let ((?x157 (* x x00)))
 (let ((?x112 (* (- 1) (* x x y y00))))
 (let ((?x102 (* y y00)))
 (let ((?x765 (+ ?x102 (* (- 1) (* x x y00)) ?x112 ?x157 ?x201 ?x210 ?x221 ?x315 ?x316 (* x y00) (* (- 2) (* x y)) ?x374 ?x376 (* (- 1) (* x x)) ?x394 (* (- 1) (* y y)) (* (- 1) (* x y y)) ?x468 ?x526 ?x527 ?x580 ?x621)))
 (let (($x82 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x601 (and $x82 (not (= ?x765 0)))))
 (let ((?x398 (+ 1 y)))
 (let ((?x359 (+ (- 1) x)))
 (let ((?x235 (* y00 ?x359 ?x398 ?x398)))
 (let ((?x120 (* x00 ?x359 ?x359 ?x398)))
 (let ((?x407 (* x00 ?x359 ?x398 ?x398)))
 (let ((?x402 (* y00 ?x359 ?x359 ?x398)))
 (let ((?x358 (+ ?x402 ?x407 ?x120 (* (- 1) (* ?x359 ?x359 ?x359 ?x398)) (* (- 2) (* ?x359 ?x359 ?x398 ?x398)) (* (- 1) (* ?x359 ?x398 ?x398 ?x398)) ?x235)))
 (let (($x365 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x357 (and $x365 (not (= ?x358 0)))))
 (rewrite (= $x357 $x601)))))))))))))))))))))))))))))))
 ))
 (let (($x382 (exists ((x Int) (y Int) )(! (let ((?x398 (+ 1 y)))
 (let ((?x359 (+ (- 1) x)))
 (let ((?x223 (* ?x359 ?x398 ?x398 ?x398)))
 (let ((?x147 (* ?x359 ?x359 ?x359 ?x398)))
 (let ((?x167 (+ (* (- 1) (* y00 ?x359 ?x359 ?x398)) (* (- 1) (* x00 ?x359 ?x398 ?x398)) (* (- 1) (* x00 ?x359 ?x359 ?x398)) ?x147 (* 2 (* ?x359 ?x359 ?x398 ?x398)) ?x223 (* (- 1) (* y00 ?x359 ?x398 ?x398)))))
 (let (($x365 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x365 (not (= ?x167 0))))))))) :qid k!26))
 ))
 (let ((?x211 (lambda ((x Int) (y Int) )(let ((?x398 (+ 1 y)))
 (let ((?x359 (+ (- 1) x)))
 (let ((?x235 (* y00 ?x359 ?x398 ?x398)))
 (let ((?x120 (* x00 ?x359 ?x359 ?x398)))
 (let ((?x407 (* x00 ?x359 ?x398 ?x398)))
 (let ((?x402 (* y00 ?x359 ?x359 ?x398)))
 (let ((?x358 (+ ?x402 ?x407 ?x120 (* (- 1) (* ?x359 ?x359 ?x359 ?x398)) (* (- 2) (* ?x359 ?x359 ?x398 ?x398)) (* (- 1) (* ?x359 ?x398 ?x398 ?x398)) ?x235)))
 (let (($x365 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x357 (and $x365 (not (= ?x358 0)))))
 (let ((?x223 (* ?x359 ?x398 ?x398 ?x398)))
 (let ((?x147 (* ?x359 ?x359 ?x359 ?x398)))
 (let ((?x167 (+ (* (- 1) ?x402) (* (- 1) ?x407) (* (- 1) ?x120) ?x147 (* 2 (* ?x359 ?x359 ?x398 ?x398)) ?x223 (* (- 1) ?x235))))
 (let (($x373 (and $x365 (not (= ?x167 0)))))
 (rewrite (= $x373 $x357))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (- (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 x00 ?x36 ?x36)) (* ?x35 ?x35 x00 ?x36))))
 (let ((?x46 (+ ?x41 (* ?x35 ?x35 ?x35 ?x36) (* 2 ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x46 (* ?x35 ?x36 ?x36 y00)) 0)))))))) :qid k!26))
 ))
 (let ((?x375 (lambda ((x Int) (y Int) )(let ((?x398 (+ 1 y)))
 (let ((?x359 (+ (- 1) x)))
 (let ((?x223 (* ?x359 ?x398 ?x398 ?x398)))
 (let ((?x147 (* ?x359 ?x359 ?x359 ?x398)))
 (let ((?x167 (+ (* (- 1) (* y00 ?x359 ?x359 ?x398)) (* (- 1) (* x00 ?x359 ?x398 ?x398)) (* (- 1) (* x00 ?x359 ?x359 ?x398)) ?x147 (* 2 (* ?x359 ?x359 ?x398 ?x398)) ?x223 (* (- 1) (* y00 ?x359 ?x398 ?x398)))))
 (let (($x365 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x373 (and $x365 (not (= ?x167 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (- (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 x00 ?x36 ?x36)) (* ?x35 ?x35 x00 ?x36))))
 (let ((?x46 (+ ?x41 (* ?x35 ?x35 ?x35 ?x36) (* 2 ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x36 ?x36 ?x36))))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x46 (* ?x35 ?x36 ?x36 y00)) 0))))))
 (rewrite (= $x52 $x373)))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x168 (mp (mp @x54 (quant-intro (proof-bind ?x375) (= $x53 $x382)) $x382) (rewrite (= $x382 $x382)) $x382)))
 (let ((@x545 (mp (mp @x168 (quant-intro (proof-bind ?x211) (= $x382 $x144)) $x144) (quant-intro (proof-bind ?x774) (= $x144 $x772)) $x772)))
 (let ((@x519 (mp (mp~ @x545 (sk (~ $x772 $x503)) $x503) (rewrite (= $x503 $x724)) $x724)))
 (let ((@x561 (and-elim @x519 $x551)))
 (let ((@x722 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x551) $x69)) @x561 $x69)))
 (let (($x70 (>= ?x538 0)))
 (let ((@x727 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x551) $x70)) @x561 $x70)))
 (let (($x731 (not (>= ?x719 0))))
 (let (($x536 (<= ?x719 0)))
 (let ((@x737 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x723 (not $x536) $x731)) (and-elim @x519 $x540) (or (not $x536) $x731))))
 (let ((@x739 (unit-resolution @x737 (lemma ((_ th-lemma arith) (hypothesis (not $x536)) @x727 @x722 false) $x536) $x731)))
 ((_ th-lemma arith) @x739 @x727 @x722 false)))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             202
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 32
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.62
 :memory                    3.15
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1125504
 :num-checks                1
 :propagations              4
 :rlimit-count              2704
 :time                      0.01
 :total-time                0.01)
