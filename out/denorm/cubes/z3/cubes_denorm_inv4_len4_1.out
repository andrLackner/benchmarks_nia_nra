unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x734 (* n!0 n!0)))
 (let ((?x348 (* 3 ?x734)))
 (let ((?x361 (* (- 1) k!2)))
 (let ((?x605 (+ (* 3 n!0) ?x361 ?x348)))
 (let (($x679 (<= ?x605 (- 1))))
 (let (($x218 (= ?x605 (- 1))))
 (let ((?x163 (* (- 1) (* m!1 m!1 m!1 m!1))))
 (let ((?x712 (+ m!1 k!2)))
 (let ((?x431 (+ 6 m!1)))
 (let ((?x728 (+ 1 n!0)))
 (let ((?x744 (* (- 6) (* m!1 m!1 m!1))))
 (let ((?x566 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x498 (* (- 1) m!1)))
 (let ((?x216 (* k!2 k!2 k!2 k!2)))
 (let ((?x545 (* (- 6) n!0)))
 (let ((?x608 (+ (- 6) (* 2 (* m!1 k!2 c!3 c!3)) (* 4 (* m!1 k!2 k!2 c!3)) (* (- 3) (* m!1 m!1 m!1 k!2)) ?x545 ?x216 (* n!0 k!2 k!2 c!3 c!3) ?x498 (* (- 1) (* n!0 m!1)) (* 2 (* n!0 k!2 k!2 k!2 c!3)) (* n!0 k!2 k!2 k!2 k!2) (* 2 (* k!2 k!2 k!2 c!3)) (* m!1 m!1 c!3 c!3) (* n!0 m!1 k!2 k!2 k!2) (* (- 6) (* n!0 m!1 m!1 m!1)) (* (- 18) (* n!0 m!1 m!1 k!2)) (* 2 (* n!0 m!1 m!1 k!2 c!3)) (* (- 2) (* n!0 m!1 m!1 k!2 k!2)) (* k!2 k!2 c!3 c!3) (* 2 (* m!1 m!1 k!2 c!3)) (* (- 2) (* m!1 m!1 k!2 k!2)) (* (- 18) (* m!1 k!2 k!2)) ?x566 (* (- 3) (* n!0 m!1 m!1 m!1 k!2)) (* (- 18) (* n!0 m!1 k!2 k!2)) (* (- 6) (* n!0 k!2 k!2 k!2)) ?x744 (* (- 1) (* n!0 m!1 m!1 m!1 m!1)) (* m!1 k!2 k!2 k!2) (* (- 1) (* ?x728 ?x728 ?x431 ?x712 ?x712 (+ k!2 c!3))) (* n!0 m!1 m!1 c!3 c!3) (* 4 (* n!0 m!1 k!2 k!2 c!3)) (* (- 18) (* m!1 m!1 k!2)) (* 2 (* n!0 m!1 k!2 c!3 c!3)) ?x163)))
 (let ((?x408 (* ?x608 (+ 7 (* 9 n!0) ?x498 ?x361 ?x348))))
 (let (($x275 (= ?x408 0)))
 (let (($x407 (not $x275)))
 (let ((?x464 (* k!2 k!2)))
 (let ((?x363 (* 9 n!0)))
 (let ((?x678 (+ ?x363 (* (- 5) k!2) ?x464 (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let ((?x623 (+ (* 6 n!0) ?x498)))
 (let (($x819 (= ?x623 (- 6))))
 (let (($x733 (and $x819 (= ?x678 (- 4)) (= (+ (* 2 n!0) ?x361 (* (- 3) c!3) (* n!0 k!2)) (- 1)) $x218 $x407)))
 (let ((?x727 (* (- 1) (* ?x728 ?x728 ?x431 (+ k!2 m!1) (+ k!2 m!1) (+ c!3 k!2)))))
 (let ((?x356 (+ (- 6) ?x498 ?x545 (* (- 1) (* m!1 n!0)) (* c!3 c!3 k!2 k!2 n!0) (* 2 (* c!3 k!2 k!2 k!2 n!0)) (* k!2 k!2 k!2 k!2 n!0) (* 2 (* c!3 c!3 k!2 m!1 n!0)) (* 4 (* c!3 k!2 k!2 m!1 n!0)) (* k!2 k!2 k!2 m!1 n!0) (* c!3 c!3 m!1 m!1 n!0) (* 2 (* c!3 k!2 m!1 m!1 n!0)) (* (- 2) (* k!2 k!2 m!1 m!1 n!0)) (* c!3 c!3 k!2 k!2) (* 2 (* c!3 k!2 k!2 k!2)) ?x216 (* 2 (* c!3 c!3 k!2 m!1)) (* 4 (* c!3 k!2 k!2 m!1)) (* k!2 k!2 k!2 m!1) (* c!3 c!3 m!1 m!1) (* 2 (* c!3 k!2 m!1 m!1)) (* (- 2) (* k!2 k!2 m!1 m!1)) (* (- 18) (* k!2 k!2 m!1)) ?x566 (* (- 1) (* m!1 m!1 m!1 m!1 n!0)) (* (- 3) (* k!2 m!1 m!1 m!1 n!0)) ?x727 (* (- 18) (* k!2 m!1 m!1)) ?x744 (* (- 3) (* k!2 m!1 m!1 m!1)) ?x163 (* (- 6) (* k!2 k!2 k!2 n!0)) (* (- 18) (* k!2 k!2 m!1 n!0)) (* (- 18) (* k!2 m!1 m!1 n!0)) (* (- 6) (* m!1 m!1 m!1 n!0)))))
 (let (($x250 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x810 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x464) (* 9 (* c!3 n!0)))))
 (let (($x633 (and (= (+ m!1 ?x545) 6) (= ?x810 4) $x250 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x734)) 1) (not (= (* ?x356 (+ 7 ?x361 ?x498 ?x363 ?x348)) 0)))))
 (let (($x526 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x849 (* (- 6) (* m m m n))))
 (let ((?x846 (* (- 18) (* k m m n))))
 (let ((?x843 (* (- 18) (* k k m n))))
 (let ((?x840 (* (- 6) (* k k k n))))
 (let ((?x808 (* (- 1) (* m m m m))))
 (let ((?x837 (* (- 3) (* k m m m))))
 (let ((?x834 (* (- 6) (* m m m))))
 (let ((?x831 (* (- 18) (* k m m))))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x276 (* (- 1) (* ?x305 ?x305 ?x392 ?x71 ?x71 ?x78))))
 (let ((?x828 (* (- 3) (* k m m m n))))
 (let ((?x803 (* (- 1) (* m m m m n))))
 (let ((?x825 (* (- 6) (* k k k))))
 (let ((?x822 (* (- 18) (* k k m))))
 (let ((?x841 (* (- 2) (* k k m m))))
 (let ((?x558 (* 2 (* c k m m))))
 (let ((?x521 (* c c m m)))
 (let ((?x503 (* k k k m)))
 (let ((?x556 (* 4 (* c k k m))))
 (let ((?x555 (* 2 (* c c k m))))
 (let ((?x474 (* k k k k)))
 (let ((?x554 (* 2 (* c k k k))))
 (let ((?x461 (* c c k k)))
 (let ((?x845 (* (- 2) (* k k m m n))))
 (let ((?x563 (* 2 (* c k m m n))))
 (let ((?x452 (* c c m m n)))
 (let ((?x451 (* k k k m n)))
 (let ((?x561 (* 4 (* c k k m n))))
 (let ((?x560 (* 2 (* c c k m n))))
 (let ((?x443 (* k k k k n)))
 (let ((?x559 (* 2 (* c k k k n))))
 (let ((?x440 (* c c k k n)))
 (let ((?x403 (* (- 1) (* m n))))
 (let ((?x106 (* (- 6) n)))
 (let ((?x301 (+ (- 6) ?x353 ?x106 ?x403 ?x440 ?x559 ?x443 ?x560 ?x561 ?x451 ?x452 ?x563 ?x845 ?x461 ?x554 ?x474 ?x555 ?x556 ?x503 ?x521 ?x558 ?x841 ?x822 ?x825 ?x803 ?x828 ?x276 ?x831 ?x834 ?x837 ?x808 ?x840 ?x843 ?x846 ?x849)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x301 (+ 7 ?x237 ?x353 ?x48 ?x269)) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x848 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x661 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x276 (* (- 1) (* ?x305 ?x305 ?x392 ?x71 ?x71 (+ c k)))))
 (let ((?x357 (+ (* (- 1) (* ?x305 ?x392)) (* ?x305 ?x71 ?x71 (+ c k) (+ c k)) ?x276 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71)))))
 (let (($x791 (not (= (* ?x357 ?x661) 0))))
 (let (($x702 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x437 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x437 $x702 $x791))))))))))))))))))) :qid k!34))
 ))
 (let ((?x223 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x268 (* n n)))
 (let ((?x269 (* 3 ?x268)))
 (let ((?x48 (* 9 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x849 (* (- 6) (* m m m n))))
 (let ((?x846 (* (- 18) (* k m m n))))
 (let ((?x843 (* (- 18) (* k k m n))))
 (let ((?x840 (* (- 6) (* k k k n))))
 (let ((?x808 (* (- 1) (* m m m m))))
 (let ((?x837 (* (- 3) (* k m m m))))
 (let ((?x834 (* (- 6) (* m m m))))
 (let ((?x831 (* (- 18) (* k m m))))
 (let ((?x78 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x276 (* (- 1) (* ?x305 ?x305 ?x392 ?x71 ?x71 ?x78))))
 (let ((?x828 (* (- 3) (* k m m m n))))
 (let ((?x803 (* (- 1) (* m m m m n))))
 (let ((?x825 (* (- 6) (* k k k))))
 (let ((?x822 (* (- 18) (* k k m))))
 (let ((?x841 (* (- 2) (* k k m m))))
 (let ((?x558 (* 2 (* c k m m))))
 (let ((?x521 (* c c m m)))
 (let ((?x503 (* k k k m)))
 (let ((?x556 (* 4 (* c k k m))))
 (let ((?x555 (* 2 (* c c k m))))
 (let ((?x474 (* k k k k)))
 (let ((?x554 (* 2 (* c k k k))))
 (let ((?x461 (* c c k k)))
 (let ((?x845 (* (- 2) (* k k m m n))))
 (let ((?x563 (* 2 (* c k m m n))))
 (let ((?x452 (* c c m m n)))
 (let ((?x451 (* k k k m n)))
 (let ((?x561 (* 4 (* c k k m n))))
 (let ((?x560 (* 2 (* c c k m n))))
 (let ((?x443 (* k k k k n)))
 (let ((?x559 (* 2 (* c k k k n))))
 (let ((?x440 (* c c k k n)))
 (let ((?x403 (* (- 1) (* m n))))
 (let ((?x106 (* (- 6) n)))
 (let ((?x301 (+ (- 6) ?x353 ?x106 ?x403 ?x440 ?x559 ?x443 ?x560 ?x561 ?x451 ?x452 ?x563 ?x845 ?x461 ?x554 ?x474 ?x555 ?x556 ?x503 ?x521 ?x558 ?x841 ?x822 ?x825 ?x803 ?x828 ?x276 ?x831 ?x834 ?x837 ?x808 ?x840 ?x843 ?x846 ?x849)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x227 (and $x123 $x207 $x259 $x297 (not (= (* ?x301 (+ 7 ?x237 ?x353 ?x48 ?x269)) 0)))))
 (let ((?x357 (+ (* (- 1) (* ?x305 ?x392)) (* ?x305 ?x71 ?x71 ?x78 ?x78) ?x276 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71)))))
 (let ((?x687 (* ?x357 (+ 4 (* 3 (* ?x305 ?x305)) ?x237 ?x353 (* 3 n)))))
 (let (($x791 (not (= ?x687 0))))
 (let (($x702 (= (+ ?x269 ?x237 (* 3 n)) (- 1))))
 (let (($x437 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x646 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x437 $x702 $x791)))
 (rewrite (= $x646 $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x798 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x661 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x276 (* (- 1) (* ?x305 ?x305 ?x392 ?x71 ?x71 (+ c k)))))
 (let ((?x357 (+ (* (- 1) (* ?x305 ?x392)) (* ?x305 ?x71 ?x71 (+ c k) (+ c k)) ?x276 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71)))))
 (let (($x791 (not (= (* ?x357 ?x661) 0))))
 (let (($x702 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x564 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x564 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x702 $x791)))))))))))))))) :qid k!34))
 ))
 (let ((?x844 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x661 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x276 (* (- 1) (* ?x305 ?x305 ?x392 ?x71 ?x71 (+ c k)))))
 (let ((?x357 (+ (* (- 1) (* ?x305 ?x392)) (* ?x305 ?x71 ?x71 (+ c k) (+ c k)) ?x276 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71)))))
 (let (($x791 (not (= (* ?x357 ?x661) 0))))
 (let (($x702 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let (($x437 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x646 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x437 $x702 $x791)))
 (let ((?x48 (* 9 n)))
 (let ((?x564 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x799 (and $x123 (= ?x564 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x702 $x791)))
 (rewrite (= $x799 $x646)))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x80 (+ (* (- 1) ?x76 ?x68) (* (+ c k) (+ c k) ?x71 ?x71 ?x68))))
 (let ((?x84 (- (- ?x80 (* (+ c k) ?x71 ?x71 ?x76 ?x68 ?x68)) (* ?x71 ?x71 ?x71 ?x76 ?x68))))
 (let (($x86 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x84) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x86)))))))))))))))) :qid k!34))
 ))
 (let ((?x779 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x353 (* (- 1) m)))
 (let ((?x237 (* (- 1) k)))
 (let ((?x661 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x237 ?x353 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x392 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x276 (* (- 1) (* ?x305 ?x305 ?x392 ?x71 ?x71 (+ c k)))))
 (let ((?x357 (+ (* (- 1) (* ?x305 ?x392)) (* ?x305 ?x71 ?x71 (+ c k) (+ c k)) ?x276 (* (- 1) (* ?x305 ?x392 ?x71 ?x71 ?x71)))))
 (let (($x791 (not (= (* ?x357 ?x661) 0))))
 (let (($x702 (= (+ (* 3 (* n n)) ?x237 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x564 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x799 (and $x123 (= ?x564 (- 4)) (= (+ (* (- 3) c) (* n k) ?x237 (* 2 n)) (- 1)) $x702 $x791)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x78 (+ c k)))
 (let ((?x83 (- (+ (* (- 1) ?x76 ?x68) (* ?x78 ?x78 ?x71 ?x71 ?x68)) (* ?x78 ?x71 ?x71 ?x76 ?x68 ?x68))))
 (let ((?x85 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x83 (* ?x71 ?x71 ?x71 ?x76 ?x68)))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x85 0))))))
 (rewrite (= $x89 $x799)))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x853 (mp (mp @x91 (quant-intro (proof-bind ?x779) (= $x90 $x798)) $x798) (rewrite (= $x798 $x798)) $x798)))
 (let ((@x765 (mp (mp @x853 (quant-intro (proof-bind ?x844) (= $x798 $x848)) $x848) (quant-intro (proof-bind ?x223) (= $x848 $x526)) $x526)))
 (let ((@x784 (mp (mp~ @x765 (sk (~ $x526 $x633)) $x633) (rewrite (= $x633 $x733)) $x733)))
 (let ((@x701 (and-elim @x784 $x218)))
 (let ((@x622 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x679)) @x701 $x679)))
 (let (($x668 (<= ?x623 (- 6))))
 (let ((@x235 (and-elim @x784 $x819)))
 (let ((@x656 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x819) $x668)) @x235 $x668)))
 (let (($x485 (>= ?x605 (- 1))))
 (let ((@x616 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x485)) @x701 $x485)))
 (let (($x486 (>= ?x623 (- 6))))
 (let ((@x429 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x819) $x486)) @x235 $x486)))
 (let (($x652 (not (<= ?x408 0))))
 (let (($x583 (>= ?x408 0)))
 (let ((@x814 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x583)) @x429 @x616 @x656 @x622 false) $x583)))
 (let ((@x244 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x275 $x652 (not $x583))) (and-elim @x784 $x407) (or $x652 (not $x583)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x244 @x814 $x652) @x429 @x616 @x656 @x622 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        28
 :arith-assert-upper        23
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-ineq-splits         2
 :arith-max-min             363
 :arith-nonlinear-bounds    34
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      21
 :arith-tableau-max-columns 65
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                16
 :final-checks              7
 :max-memory                3.67
 :memory                    3.18
 :mk-bool-var               28
 :mk-clause                 16
 :num-allocs                1155871
 :num-checks                1
 :propagations              12
 :rlimit-count              5483
 :time                      0.01
 :total-time                0.01)
