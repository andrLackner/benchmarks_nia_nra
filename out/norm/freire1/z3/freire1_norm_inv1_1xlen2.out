unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x942 (* 2 x!0)))
 (let ((?x940 (* (- 1) r!1)))
 (let ((?x207 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x707 (* (- 2) x00)))
 (let ((?x870 (+ r00 ?x707 ?x289 ?x207 ?x940 ?x942)))
 (let (($x931 (<= ?x870 0)))
 (let (($x938 (= ?x870 0)))
 (let ((?x883 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x968 (+ r00 ?x707 ?x289 (* 3 (* r00 r!1 x!0 x!0)) (* r00 r!1 r!1 r!1) (* (- 3) (* r00 r!1 r!1 x!0)) ?x207 (* (- 1) (* r00 x!0 x!0 x!0)) ?x940 (* 6 (* x00 r!1 r!1 x!0)) ?x942 (* 5 (* r!1 r!1 r!1 x!0)) (* (- 3) (* r00 r00 r!1 x!0 x!0)) (* 7 (* r!1 x!0 x!0 x!0)) ?x883 (* (- 1) (* r!1 r!1 x!0 x!0 x!0)) (* (- 1) (* r!1 r!1 r!1 r!1)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0)) (* (- 9) (* r!1 r!1 x!0 x!0)) (* 3 (* r!1 r!1 r!1 x!0 x!0)) (* (- 2) (* x!0 x!0 x!0 x!0)) (* (- 6) (* x00 r!1 x!0 x!0)) (* (- 1) (* r00 r00 r!1 r!1 r!1)) (* 2 (* x00 x!0 x!0 x!0)) (* 3 (* r00 r00 r!1 r!1 x!0)) (* r00 r00 x!0 x!0 x!0) (* (- 2) (* x00 r!1 r!1 r!1)))))
 (let (($x445 (= ?x968 0)))
 (let (($x456 (not $x445)))
 (let (($x867 (and $x938 $x456)))
 (let ((?x890 (* r!1 r!1 r!1 r!1)))
 (let ((?x887 (* r!1 r!1 x!0 x!0 x!0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x134 (* (- 1) ?x207)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x196 (* (- 2) x!0)))
 (let ((?x925 (+ r!1 ?x196 ?x119 ?x134 ?x35 ?x36 (* (- 2) (* x!0 x!0 x!0 x00)) (* 6 (* r!1 x!0 x!0 x00)) (* r!1 r!1 r!1 r00 r00) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* 3 (* r!1 x!0 x!0 r00 r00)) (* (- 1) (* x!0 x!0 x!0 r00 r00)) (* 2 (* r!1 r!1 r!1 x00)) (* (- 7) (* r!1 x!0 x!0 x!0)) ?x887 ?x890 (* (- 1) ?x883) (* (- 5) (* r!1 r!1 r!1 x!0)) (* 3 (* r!1 r!1 r!1 r!1 x!0)) (* 9 (* r!1 r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0)) (* (- 1) (* r!1 r!1 r!1 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* (- 3) (* r!1 x!0 x!0 r00)) (* x!0 x!0 x!0 r00) (* (- 6) (* r!1 r!1 x!0 x00)) (* 2 (* x!0 x!0 x!0 x!0)))))
 (let (($x929 (and (= (+ r!1 ?x196 ?x119 ?x134 ?x35 ?x36) 0) (not (= ?x925 0)))))
 (let (($x892 (exists ((r Int) (x Int) )(! (let ((?x812 (* 2 (* x x x x))))
 (let ((?x729 (* x x x r00)))
 (let ((?x737 (* (- 3) (* r x x r00))))
 (let ((?x736 (* 3 (* r r x r00))))
 (let ((?x679 (* (- 1) (* r r r r00))))
 (let ((?x556 (* (- 3) (* r r r x x))))
 (let ((?x997 (* 9 (* r r x x))))
 (let ((?x552 (* 3 (* r r r r x))))
 (let ((?x995 (* (- 5) (* r r r x))))
 (let ((?x409 (* (- 1) (* r r r r r))))
 (let ((?x402 (* r r r r)))
 (let ((?x392 (* r r x x x)))
 (let ((?x993 (* (- 7) (* r x x x))))
 (let ((?x991 (* (- 1) (* x x x r00 r00))))
 (let ((?x990 (* 3 (* r x x r00 r00))))
 (let ((?x989 (* (- 3) (* r r x r00 r00))))
 (let ((?x279 (* r r r r00 r00)))
 (let ((?x988 (* (- 2) (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x355 (+ r ?x118 ?x119 ?x120 ?x35 ?x36 ?x988 (* 6 (* r x x x00)) ?x279 ?x989 ?x990 ?x991 (* 2 (* r r r x00)) ?x993 ?x392 ?x402 ?x409 ?x995 ?x552 ?x997 ?x556 ?x679 ?x736 ?x737 ?x729 (* (- 6) (* r r x x00)) ?x812)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (and $x122 (not (= ?x355 0))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x337 (exists ((r Int) (x Int) )(! (let ((?x69 (* (- 1) r)))
 (let ((?x177 (+ x ?x69)))
 (let ((?x36 (* r00 r00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x707 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x914 (+ (* 2 (* x00 ?x177 ?x177 ?x177)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x707 (* r00 r00 ?x177 ?x177 ?x177) (* (- 1) (* (+ 1 r) (+ 1 r) ?x177 ?x177 ?x177)) ?x289 (* (+ 1 r) ?x177 ?x177 ?x177) (* (- 1) (* r00 ?x177 ?x177 ?x177)) (* (- 2) (* ?x177 ?x177 ?x177 ?x177)))))
 (let (($x923 (not (= ?x914 1))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x923)))))))))))))) :qid k!26))
 ))
 (let ((?x275 (lambda ((r Int) (x Int) )(let ((?x812 (* 2 (* x x x x))))
 (let ((?x729 (* x x x r00)))
 (let ((?x737 (* (- 3) (* r x x r00))))
 (let ((?x736 (* 3 (* r r x r00))))
 (let ((?x679 (* (- 1) (* r r r r00))))
 (let ((?x556 (* (- 3) (* r r r x x))))
 (let ((?x997 (* 9 (* r r x x))))
 (let ((?x552 (* 3 (* r r r r x))))
 (let ((?x995 (* (- 5) (* r r r x))))
 (let ((?x409 (* (- 1) (* r r r r r))))
 (let ((?x402 (* r r r r)))
 (let ((?x392 (* r r x x x)))
 (let ((?x993 (* (- 7) (* r x x x))))
 (let ((?x991 (* (- 1) (* x x x r00 r00))))
 (let ((?x990 (* 3 (* r x x r00 r00))))
 (let ((?x989 (* (- 3) (* r r x r00 r00))))
 (let ((?x279 (* r r r r00 r00)))
 (let ((?x988 (* (- 2) (* x x x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x355 (+ r ?x118 ?x119 ?x120 ?x35 ?x36 ?x988 (* 6 (* r x x x00)) ?x279 ?x989 ?x990 ?x991 (* 2 (* r r r x00)) ?x993 ?x392 ?x402 ?x409 ?x995 ?x552 ?x997 ?x556 ?x679 ?x736 ?x737 ?x729 (* (- 6) (* r r x x00)) ?x812)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x276 (and $x122 (not (= ?x355 0)))))
 (let ((?x69 (* (- 1) r)))
 (let ((?x177 (+ x ?x69)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x707 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x914 (+ (* 2 (* x00 ?x177 ?x177 ?x177)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x707 (* r00 r00 ?x177 ?x177 ?x177) (* (- 1) (* (+ 1 r) (+ 1 r) ?x177 ?x177 ?x177)) ?x289 (* (+ 1 r) ?x177 ?x177 ?x177) (* (- 1) (* r00 ?x177 ?x177 ?x177)) (* (- 2) (* ?x177 ?x177 ?x177 ?x177)))))
 (let (($x923 (not (= ?x914 1))))
 (let (($x308 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x923)))
 (rewrite (= $x308 $x276))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x924 (exists ((r Int) (x Int) )(! (let ((?x69 (* (- 1) r)))
 (let ((?x177 (+ x ?x69)))
 (let ((?x36 (* r00 r00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x707 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x914 (+ (* 2 (* x00 ?x177 ?x177 ?x177)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x707 (* r00 r00 ?x177 ?x177 ?x177) (* (- 1) (* (+ 1 r) (+ 1 r) ?x177 ?x177 ?x177)) ?x289 (* (+ 1 r) ?x177 ?x177 ?x177) (* (- 1) (* r00 ?x177 ?x177 ?x177)) (* (- 2) (* ?x177 ?x177 ?x177 ?x177)))))
 (let (($x923 (not (= ?x914 1))))
 (and (= (+ ?x69 r00 (* r r) ?x32 ?x707 ?x289) 0) $x923))))))))) :qid k!26))
 ))
 (let ((?x340 (lambda ((r Int) (x Int) )(let ((?x69 (* (- 1) r)))
 (let ((?x177 (+ x ?x69)))
 (let ((?x36 (* r00 r00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x707 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x914 (+ (* 2 (* x00 ?x177 ?x177 ?x177)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x707 (* r00 r00 ?x177 ?x177 ?x177) (* (- 1) (* (+ 1 r) (+ 1 r) ?x177 ?x177 ?x177)) ?x289 (* (+ 1 r) ?x177 ?x177 ?x177) (* (- 1) (* r00 ?x177 ?x177 ?x177)) (* (- 2) (* ?x177 ?x177 ?x177 ?x177)))))
 (let (($x923 (not (= ?x914 1))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x308 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x923)))
 (let (($x292 (and (= (+ ?x69 r00 ?x30 ?x32 ?x707 ?x289) 0) $x923)))
 (rewrite (= $x292 $x308))))))))))))))))))
 ))
 (let (($x64 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (+ (- (* 2 ?x41 ?x41 ?x41 x00) ?x43) r00 (* ?x43 ?x43) (* 2 ?x41))))
 (let ((?x52 (- (+ (- ?x47 ?x35) (* r00 r00 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x58 (- (+ (- ?x52 ?x36) (* ?x43 ?x41 ?x41 ?x41)) (* r00 ?x41 ?x41 ?x41))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (- ?x58 (* 2 ?x41 ?x41 ?x41 ?x41)) 0)))))))))))) :qid k!26))
 ))
 (let ((?x926 (lambda ((r Int) (x Int) )(let ((?x69 (* (- 1) r)))
 (let ((?x177 (+ x ?x69)))
 (let ((?x36 (* r00 r00)))
 (let ((?x289 (* (- 1) ?x36)))
 (let ((?x707 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x914 (+ (* 2 (* x00 ?x177 ?x177 ?x177)) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x707 (* r00 r00 ?x177 ?x177 ?x177) (* (- 1) (* (+ 1 r) (+ 1 r) ?x177 ?x177 ?x177)) ?x289 (* (+ 1 r) ?x177 ?x177 ?x177) (* (- 1) (* r00 ?x177 ?x177 ?x177)) (* (- 2) (* ?x177 ?x177 ?x177 ?x177)))))
 (let (($x923 (not (= ?x914 1))))
 (let (($x292 (and (= (+ ?x69 r00 (* r r) ?x32 ?x707 ?x289) 0) $x923)))
 (let ((?x41 (- x r)))
 (let ((?x43 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (+ (- (* 2 ?x41 ?x41 ?x41 x00) ?x43) r00 (* ?x43 ?x43) (* 2 ?x41))))
 (let ((?x52 (- (+ (- ?x47 ?x35) (* r00 r00 ?x41 ?x41 ?x41)) (* ?x43 ?x43 ?x41 ?x41 ?x41))))
 (let ((?x58 (- (+ (- ?x52 ?x36) (* ?x43 ?x41 ?x41 ?x41)) (* r00 ?x41 ?x41 ?x41))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x63 (and $x40 (or (not (= (- ?x58 (* 2 ?x41 ?x41 ?x41 ?x41)) 0))))))
 (rewrite (= $x63 $x292))))))))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x336 (mp (mp @x65 (quant-intro (proof-bind ?x926) (= $x64 $x924)) $x924) (rewrite (= $x924 $x924)) $x924)))
 (let ((@x477 (mp (mp @x336 (quant-intro (proof-bind ?x340) (= $x924 $x337)) $x337) (quant-intro (proof-bind ?x275) (= $x337 $x892)) $x892)))
 (let ((@x457 (mp (mp~ @x477 (sk (~ $x892 $x929)) $x929) (rewrite (= $x929 $x867)) $x867)))
 (let ((@x450 (and-elim @x457 $x938)))
 (let ((@x608 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x938) $x931)) @x450 $x931)))
 (let (($x934 (>= ?x870 0)))
 (let ((@x961 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x938) $x934)) @x450 $x934)))
 (let (($x389 (not (>= ?x968 0))))
 (let (($x935 (<= ?x968 0)))
 (let ((@x941 (lemma ((_ th-lemma arith) (hypothesis (not $x935)) @x961 @x608 @x961 @x608 false) $x935)))
 (let ((@x611 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x445 (not $x935) $x389)) (and-elim @x457 $x456) (or (not $x935) $x389))))
 ((_ th-lemma arith) (unit-resolution @x611 @x941 $x389) @x961 @x608 @x961 @x608 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             206
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 40
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.68
 :memory                    3.19
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1137258
 :num-checks                1
 :propagations              4
 :rlimit-count              3469
 :time                      0.01
 :total-time                0.01)
