unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x677 (to_real a!3)))
 (let ((?x676 (to_real d!1)))
 (let ((?x675 (to_real b!2)))
 (let ((?x67 (to_real y00)))
 (let ((?x591 (* (- (/ 1.0 32.0)) (* ?x67 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677 ?x677))))
 (let ((?x590 (* (/ 1.0 16.0) (* (to_real y!0) ?x675 ?x675 ?x676 ?x676 ?x676))))
 (let ((?x430 (* (/ 1.0 32.0) (* (to_real a00) ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677))))
 (let ((?x582 (* (/ 1.0 32.0) (* (to_real a00) ?x675 ?x676 ?x676 ?x676 ?x676))))
 (let ((?x428 (* (/ 1.0 16.0) (* (to_real y!0) ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677))))
 (let ((?x427 (* (/ 1.0 32.0) (* (to_real y!0) ?x675 ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676))))
 (let ((?x337 (* ?x675 ?x676 ?x676 ?x676 ?x676 ?x677)))
 (let ((?x589 (* (- (/ 1.0 32.0)) ?x337)))
 (let ((?x588 (* (- (/ 1.0 16.0)) (* ?x67 ?x675 ?x675 ?x676 ?x676 ?x676))))
 (let ((?x388 (* (/ 1.0 64.0) (* (to_real a00) ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676))))
 (let ((?x254 (* ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677 ?x677 ?x677)))
 (let ((?x262 (* (- (/ 1.0 64.0)) ?x254)))
 (let ((?x531 (* (/ 1.0 64.0) (* (to_real a00) ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677 ?x677))))
 (let ((?x529 (* (/ 1.0 32.0) (* (to_real y!0) ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677 ?x677))))
 (let ((?x130 (+ ?x529 ?x531 ?x262 ?x388 (* (- (/ 1.0 32.0)) (* ?x67 ?x675 ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676)) ?x588 (* (- (/ 1.0 16.0)) (* ?x67 ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677)) ?x589 ?x427 ?x428 ?x582 ?x430 (* (- (/ 1.0 64.0)) (* ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677)) (* (- (/ 1.0 32.0)) (* ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677 ?x677)) ?x590 ?x591)))
 (let (($x528 (>= ?x130 0.0)))
 (let ((?x616 (+ (* a00 d!1) (* (- 1) (* d!1 a!3)) (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)))))
 (let (($x246 (>= ?x616 0)))
 (let (($x435 (= 0 ?x616)))
 (let ((@x216 (symm (commutativity (= $x435 (= ?x616 0))) (= (= ?x616 0) $x435))))
 (let (($x734 (= ?x616 0)))
 (let ((?x592 (+ ?x529 ?x531 ?x262 ?x588 ?x589 ?x582 ?x590 ?x591)))
 (let (($x320 (= ?x592 0.0)))
 (let (($x542 (not $x320)))
 (let (($x489 (or $x542 (not (= ?x130 0.0)))))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let ((?x35 (* a00 d00)))
 (let (($x747 (= (+ ?x35 ?x111 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x190 (and $x747 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x734 $x489)))
 (let ((?x530 (* (- (/ 1.0 16.0)) (* ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677 (to_real y!0)))))
 (let ((?x469 (* (- (/ 1.0 32.0)) (* ?x675 ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 (to_real y!0)))))
 (let ((?x301 (* (- (/ 1.0 32.0)) (* ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677 (to_real a00)))))
 (let ((?x365 (* (- (/ 1.0 64.0)) (* ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 (to_real a00)))))
 (let ((?x450 (* (- (/ 1.0 16.0)) (* ?x675 ?x675 ?x676 ?x676 ?x676 (to_real y!0)))))
 (let ((?x599 (* (- (/ 1.0 32.0)) (* ?x675 ?x676 ?x676 ?x676 ?x676 (to_real a00)))))
 (let ((?x172 (* (/ 1.0 32.0) ?x337)))
 (let ((?x419 (* (/ 1.0 32.0) (* ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677 ?x677 ?x67))))
 (let ((?x408 (* (- (/ 1.0 32.0)) (* ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677 ?x677 (to_real y!0)))))
 (let ((?x291 (* (- (/ 1.0 64.0)) (* ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677 ?x677 (to_real a00)))))
 (let ((?x288 (* (/ 1.0 16.0) (* ?x675 ?x675 ?x676 ?x676 ?x676 ?x67))))
 (let ((?x278 (* (/ 1.0 64.0) ?x254)))
 (let ((?x328 (+ ?x278 ?x288 ?x291 ?x408 (* (/ 1.0 64.0) (* ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677)) (* (/ 1.0 32.0) (* ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x676 ?x677 ?x677)) ?x419 ?x172 ?x599 ?x450 ?x365 ?x301 ?x469 ?x530 (* (/ 1.0 32.0) (* ?x675 ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x67)) (* (/ 1.0 16.0) (* ?x675 ?x675 ?x675 ?x675 ?x676 ?x676 ?x676 ?x677 ?x67)))))
 (let (($x141 (or (not (= (+ ?x278 ?x288 ?x291 ?x408 ?x419 ?x172 ?x599 ?x450) 0.0)) (not (= ?x328 0.0)))))
 (let ((?x353 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x660 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x111 (* 2 (* y!0 b00))) 0)))
 (let (($x162 (and $x660 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x353 0) $x141)))
 (let (($x233 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y00)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x767 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 (to_real y)))))
 (let ((?x766 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 (to_real y)))))
 (let ((?x765 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 (to_real a00)))))
 (let ((?x764 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 (to_real a00)))))
 (let ((?x376 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 (to_real y)))))
 (let ((?x375 (* (- (/ 1.0 32.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 (to_real a00)))))
 (let ((?x309 (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x62))))
 (let ((?x271 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x67))))
 (let ((?x374 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 (to_real y)))))
 (let ((?x373 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62 (to_real a00)))))
 (let ((?x209 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x67))))
 (let ((?x372 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62 ?x62))))
 (let ((?x768 (+ ?x372 ?x209 ?x373 ?x374 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62)) ?x271 ?x309 ?x375 ?x376 ?x764 ?x765 ?x766 ?x767 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x67)))))
 (let (($x219 (or (not (= (+ ?x372 ?x209 ?x373 ?x374 ?x271 ?x309 ?x375 ?x376) 0.0)) (not (= ?x768 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x180 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let ((?x35 (* a00 d00)))
 (let (($x143 (= (+ ?x35 (* (- 1) (* a d00)) ?x111 (* 2 (* y b00))) 0)))
 (and $x143 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x180 0) $x219))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x482 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x70 (to_real y)))
 (let ((?x579 (+ ?x70 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x460 (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x579)))
 (let ((?x64 (to_real a00)))
 (let ((?x151 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x325 (* (- (/ 1.0 32.0)) ?x151)))
 (let ((?x62 (to_real a)))
 (let ((?x719 (+ ?x62 ?x56)))
 (let ((?x67 (to_real y00)))
 (let ((?x339 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719)))
 (let ((?x226 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x181 (* (/ 1.0 16.0) ?x226)))
 (let ((?x713 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719 ?x719)) (* (- (/ 1.0 64.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719)) ?x181 (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719 ?x579)) (* (/ 1.0 32.0) ?x339) (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x719)) ?x325 (* (- (/ 1.0 16.0)) ?x460))))
 (let ((?x284 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) ?x181 (* (- (/ 1.0 32.0)) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x62)) ?x325 (* (- (/ 1.0 16.0)) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56)))))
 (let ((?x517 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x521 (= ?x517 0)))
 (let ((?x355 (* d00 a)))
 (let ((?x689 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x355)))
 (and (= ?x689 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x521 (or (not (= ?x284 0.0)) (not (= ?x713 0.0)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x146 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y00)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x767 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 (to_real y)))))
 (let ((?x766 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 (to_real y)))))
 (let ((?x765 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 (to_real a00)))))
 (let ((?x764 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 (to_real a00)))))
 (let ((?x376 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 (to_real y)))))
 (let ((?x375 (* (- (/ 1.0 32.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 (to_real a00)))))
 (let ((?x309 (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x62))))
 (let ((?x271 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x67))))
 (let ((?x374 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 (to_real y)))))
 (let ((?x373 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62 (to_real a00)))))
 (let ((?x209 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x67))))
 (let ((?x372 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62 ?x62))))
 (let ((?x768 (+ ?x372 ?x209 ?x373 ?x374 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62)) ?x271 ?x309 ?x375 ?x376 ?x764 ?x765 ?x766 ?x767 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x67)))))
 (let (($x219 (or (not (= (+ ?x372 ?x209 ?x373 ?x374 ?x271 ?x309 ?x375 ?x376) 0.0)) (not (= ?x768 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x180 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let ((?x35 (* a00 d00)))
 (let (($x143 (= (+ ?x35 (* (- 1) (* a d00)) ?x111 (* 2 (* y b00))) 0)))
 (let (($x775 (and $x143 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x180 0) $x219)))
 (let ((?x70 (to_real y)))
 (let ((?x579 (+ ?x70 (* (/ 1.0 2.0) ?x59))))
 (let ((?x460 (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x579)))
 (let ((?x64 (to_real a00)))
 (let ((?x151 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x325 (* (- (/ 1.0 32.0)) ?x151)))
 (let ((?x719 (+ ?x62 ?x56)))
 (let ((?x339 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719)))
 (let ((?x226 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x181 (* (/ 1.0 16.0) ?x226)))
 (let ((?x713 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719 ?x719)) (* (- (/ 1.0 64.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719)) ?x181 (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719 ?x579)) (* (/ 1.0 32.0) ?x339) (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x719)) ?x325 (* (- (/ 1.0 16.0)) ?x460))))
 (let ((?x284 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) ?x181 (* (- (/ 1.0 32.0)) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x62)) ?x325 (* (- (/ 1.0 16.0)) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56)))))
 (let ((?x517 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x521 (= ?x517 0)))
 (let ((?x355 (* d00 a)))
 (let (($x540 (= (+ (* 2 ?x110) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x355) 0)))
 (let (($x455 (and $x540 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x521 (or (not (= ?x284 0.0)) (not (= ?x713 0.0))))))
 (rewrite (= $x455 $x775)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x628 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x70 (to_real y)))
 (let ((?x579 (+ ?x70 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x460 (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x579)))
 (let ((?x64 (to_real a00)))
 (let ((?x151 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x159 (* (/ 1.0 32.0) ?x151)))
 (let ((?x62 (to_real a)))
 (let ((?x719 (+ ?x62 ?x56)))
 (let ((?x67 (to_real y00)))
 (let ((?x339 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719)))
 (let ((?x226 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x611 (* (- (/ 1.0 16.0)) ?x226)))
 (let ((?x625 (+ (* (- (/ 1.0 64.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719 ?x719)) (* (/ 1.0 64.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719)) ?x611 (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719 ?x579)) (* (- (/ 1.0 32.0)) ?x339) (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x719)) ?x159 (* (/ 1.0 16.0) ?x460))))
 (let ((?x342 (+ (* (- (/ 1.0 64.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) ?x611 (* (/ 1.0 32.0) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x62)) ?x159 (* (/ 1.0 16.0) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56)))))
 (let ((?x517 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x521 (= ?x517 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let (($x161 (= (+ ?x111 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x161 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x521 (or (not (= ?x342 0.0)) (not (= ?x625 0.0)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x578 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x70 (to_real y)))
 (let ((?x579 (+ ?x70 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x460 (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x579)))
 (let ((?x64 (to_real a00)))
 (let ((?x151 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x325 (* (- (/ 1.0 32.0)) ?x151)))
 (let ((?x62 (to_real a)))
 (let ((?x719 (+ ?x62 ?x56)))
 (let ((?x67 (to_real y00)))
 (let ((?x339 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719)))
 (let ((?x226 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x181 (* (/ 1.0 16.0) ?x226)))
 (let ((?x713 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719 ?x719)) (* (- (/ 1.0 64.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719)) ?x181 (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719 ?x579)) (* (/ 1.0 32.0) ?x339) (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x719)) ?x325 (* (- (/ 1.0 16.0)) ?x460))))
 (let ((?x284 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) ?x181 (* (- (/ 1.0 32.0)) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x62)) ?x325 (* (- (/ 1.0 16.0)) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56)))))
 (let ((?x517 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x521 (= ?x517 0)))
 (let ((?x355 (* d00 a)))
 (let ((?x689 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x355)))
 (let (($x455 (and (= ?x689 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x521 (or (not (= ?x284 0.0)) (not (= ?x713 0.0))))))
 (let ((?x159 (* (/ 1.0 32.0) ?x151)))
 (let ((?x611 (* (- (/ 1.0 16.0)) ?x226)))
 (let ((?x625 (+ (* (- (/ 1.0 64.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719 ?x719)) (* (/ 1.0 64.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719)) ?x611 (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719 ?x579)) (* (- (/ 1.0 32.0)) ?x339) (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x719)) ?x159 (* (/ 1.0 16.0) ?x460))))
 (let ((?x342 (+ (* (- (/ 1.0 64.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) ?x611 (* (/ 1.0 32.0) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x62)) ?x159 (* (/ 1.0 16.0) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56)))))
 (let ((?x35 (* a00 d00)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let (($x580 (and (= (+ ?x111 ?x35 (* 2 (* b00 y)) (* (- 1) ?x355)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x521 (or (not (= ?x342 0.0)) (not (= ?x625 0.0))))))
 (rewrite (= $x580 $x455))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x70 (to_real y)))
 (let ((?x89 (+ ?x70 ?x60)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x64 (to_real a00)))
 (let ((?x77 (* ?x64 ?x58 ?x60 ?x60 ?x60 ?x60)))
 (let ((?x67 (to_real y00)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x68 (* ?x57 ?x58 ?x58 ?x60 ?x60 ?x60 ?x67)))
 (let ((?x43 (- 1)))
 (let ((?x61 (to_real ?x43)))
 (let ((?x87 (+ (* ?x61 ?x84 ?x84 ?x84 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x84 ?x84 ?x64 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x91 (+ (- ?x87 ?x68) (* ?x57 ?x84 ?x84 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x89))))
 (let ((?x95 (- (- ?x91 (* ?x57 ?x84 ?x84 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x67)) (* ?x84 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let (($x99 (not (= (+ ?x95 ?x77 (* ?x57 ?x58 ?x58 ?x60 ?x60 ?x60 ?x89)) ?x80))))
 (let ((?x62 (to_real a)))
 (let ((?x66 (+ (* ?x61 ?x62 ?x62 ?x62 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x62 ?x62 ?x64 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x72 (+ (- ?x66 ?x68) (* ?x57 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x70))))
 (let ((?x76 (- (- ?x72 (* ?x57 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x67)) (* ?x62 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let (($x82 (not (= (+ ?x76 ?x77 (* ?x57 ?x58 ?x58 ?x60 ?x60 ?x60 ?x70)) ?x80))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or $x82 $x99)))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x705 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x70 (to_real y)))
 (let ((?x579 (+ ?x70 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real d)))
 (let ((?x460 (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x579)))
 (let ((?x64 (to_real a00)))
 (let ((?x151 (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56)))
 (let ((?x159 (* (/ 1.0 32.0) ?x151)))
 (let ((?x62 (to_real a)))
 (let ((?x719 (+ ?x62 ?x56)))
 (let ((?x67 (to_real y00)))
 (let ((?x339 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719)))
 (let ((?x226 (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56)))
 (let ((?x611 (* (- (/ 1.0 16.0)) ?x226)))
 (let ((?x625 (+ (* (- (/ 1.0 64.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719 ?x719)) (* (/ 1.0 64.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x719 ?x719)) ?x611 (* (/ 1.0 32.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x719 ?x719 ?x579)) (* (- (/ 1.0 32.0)) ?x339) (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x719)) ?x159 (* (/ 1.0 16.0) ?x460))))
 (let ((?x342 (+ (* (- (/ 1.0 64.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x64 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) ?x611 (* (/ 1.0 32.0) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x67 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x59 ?x59 ?x59 ?x59 ?x56 ?x62)) ?x159 (* (/ 1.0 16.0) (* ?x70 ?x59 ?x59 ?x59 ?x56 ?x56)))))
 (let ((?x517 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x521 (= ?x517 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let (($x161 (= (+ ?x111 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x580 (and $x161 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x521 (or (not (= ?x342 0.0)) (not (= ?x625 0.0))))))
 (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x89 (+ ?x70 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (* ?x64 ?x58 ?x60 ?x60 ?x60 ?x60)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x68 (* ?x57 ?x58 ?x58 ?x60 ?x60 ?x60 ?x67)))
 (let ((?x43 (- 1)))
 (let ((?x61 (to_real ?x43)))
 (let ((?x87 (+ (* ?x61 ?x84 ?x84 ?x84 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x84 ?x84 ?x64 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x91 (+ (- ?x87 ?x68) (* ?x57 ?x84 ?x84 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x89))))
 (let ((?x95 (- (- ?x91 (* ?x57 ?x84 ?x84 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x67)) (* ?x84 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let (($x99 (not (= (+ ?x95 ?x77 (* ?x57 ?x58 ?x58 ?x60 ?x60 ?x60 ?x89)) ?x80))))
 (let ((?x66 (+ (* ?x61 ?x62 ?x62 ?x62 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60) (* ?x62 ?x62 ?x64 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x72 (+ (- ?x66 ?x68) (* ?x57 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x70))))
 (let ((?x76 (- (- ?x72 (* ?x57 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x67)) (* ?x62 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let (($x82 (not (= (+ ?x76 ?x77 (* ?x57 ?x58 ?x58 ?x60 ?x60 ?x60 ?x70)) ?x80))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x101 (and $x41 (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or $x82 $x99))))
 (rewrite (= $x101 $x580)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x700 (mp (mp @x103 (quant-intro (proof-bind ?x705) (= $x102 $x628)) $x628) (rewrite (= $x628 $x628)) $x628)))
 (let ((@x510 (mp (mp @x700 (quant-intro (proof-bind ?x578) (= $x628 $x482)) $x482) (quant-intro (proof-bind ?x146) (= $x482 $x233)) $x233)))
 (let ((@x492 (mp (mp~ @x510 (sk (~ $x233 $x162)) $x162) (rewrite (= $x162 $x190)) $x190)))
 (let ((@x493 (mp (and-elim @x492 $x734) @x216 $x435)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x435) $x246)) @x493 $x246)))
 (let (($x545 (<= ?x616 0)))
 (let ((@x178 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x435) $x545)) @x493 $x545)))
 (let ((@x227 (unit-resolution ((_ th-lemma arith) (or $x528 (not $x545) (not $x246))) @x178 @x332 (hypothesis (not $x528)) false)))
 (let ((@x519 (lemma @x227 $x528)))
 (let (($x363 (<= ?x130 0.0)))
 (let ((@x203 (unit-resolution ((_ th-lemma arith) (or $x363 (not $x246) (not $x545))) @x178 @x332 (hypothesis (not $x363)) false)))
 (let ((@x210 (lemma @x203 $x363)))
 (let (($x533 (>= ?x592 0.0)))
 (let (($x629 (not $x533)))
 (let (($x737 (<= ?x592 0.0)))
 (let ((@x412 (unit-resolution ((_ th-lemma arith) (or (not $x363) (not $x528) $x737 (not $x545) (not $x246))) @x178 @x332 (hypothesis (not $x737)) @x210 @x519 false)))
 (let (($x550 (= 0.0 ?x592)))
 (let (($x573 (not $x550)))
 (let ((@x175 (monotonicity (symm (commutativity (= $x550 $x320)) (= $x320 $x550)) (= $x542 $x573))))
 (let (($x134 (= ?x130 0.0)))
 (let ((@x400 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x134 (not $x363) (not $x528))) @x519 (or $x134 (not $x363)))))
 (let ((@x405 (unit-resolution (and-elim @x492 $x489) (unit-resolution @x400 @x210 $x134) $x542)))
 (let ((@x496 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x550 (not $x737) $x629)) (mp @x405 @x175 $x573) (or (not $x737) $x629))))
 (unit-resolution ((_ th-lemma arith) (or (not $x363) (not $x528) $x533 (not $x246) (not $x545))) @x178 @x332 (unit-resolution @x496 (lemma @x412 $x737) $x629) @x210 @x519 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       19
 :arith-eq-adapter                28
 :arith-bound-propagations-cheap  30
 :arith-bound-propagations-lp     5
 :arith-conflicts                 86
 :arith-diseq                     23
 :arith-gcd-calls                 9
 :arith-grobner-calls             5
 :arith-grobner-conflicts         4
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 8
 :arith-lower                     64
 :arith-make-feasible             93
 :arith-max-columns               55
 :arith-max-rows                  11
 :arith-nla-explanations          91
 :arith-nla-lemmas                86
 :arith-patches                   9
 :arith-patches-success           9
 :arith-propagations              30
 :arith-upper                     79
 :conflicts                       10
 :decisions                       97
 :del-clause                      61
 :final-checks                    35
 :max-memory                      4.30
 :memory                          3.14
 :mk-bool-var                     180
 :mk-clause                       115
 :num-allocs                      6293494
 :num-checks                      1
 :propagations                    58
 :rlimit-count                    5861
 :time                            0.03
 :total-time                      0.03)
