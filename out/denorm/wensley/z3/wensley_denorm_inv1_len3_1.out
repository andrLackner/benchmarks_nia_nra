unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x494 (to_real a!3)))
 (let ((?x315 (to_real b!2)))
 (let ((?x249 (to_real d!1)))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x488 (to_real y!0)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x656 (+ (* (/ 1.0 8.0) (* ?x178 ?x179 ?x249 ?x249 ?x249 ?x488 ?x494 ?x494)) (* (- (/ 1.0 8.0)) (* ?x75 ?x249 ?x249 ?x249 ?x315 ?x488 ?x488 ?x494 ?x494)) (* (- (/ 1.0 4.0)) (* ?x179 ?x249 ?x315 ?x494 ?x494 ?x494)) (* (- (/ 1.0 2.0)) (* ?x75 ?x213 ?x249 ?x315 ?x494 ?x494)) (* (- (/ 1.0 8.0)) (* ?x179 ?x249 ?x249 ?x249 ?x488 ?x494 ?x494 ?x494)) (* (- (/ 1.0 4.0)) (* ?x75 ?x213 ?x249 ?x249 ?x249 ?x488 ?x494 ?x494)) (* (/ 1.0 4.0) (* ?x75 ?x249 ?x249 ?x249 ?x488 ?x488 ?x494 ?x494)) (* (/ 1.0 2.0) (* ?x75 ?x249 ?x315 ?x488 ?x494 ?x494)) (* (- (/ 1.0 16.0)) (* ?x178 ?x179 ?x249 ?x249 ?x249 ?x315 ?x488 ?x494 ?x494)) (* (/ 1.0 16.0) (* ?x179 ?x249 ?x249 ?x249 ?x315 ?x488 ?x494 ?x494 ?x494)) (* (/ 1.0 8.0) (* ?x75 ?x213 ?x249 ?x249 ?x249 ?x315 ?x488 ?x494 ?x494)) (* (/ 1.0 4.0) (* ?x178 ?x179 ?x249 ?x315 ?x494 ?x494)))))
 (let (($x153 (>= ?x656 0.0)))
 (let (($x783 (not $x153)))
 (let (($x368 (= 0.0 ?x656)))
 (let (($x800 (not $x368)))
 (let ((@x799 (symm (commutativity (= $x368 (= ?x656 0.0))) (= (= ?x656 0.0) $x368))))
 (let (($x716 (= ?x656 0.0)))
 (let (($x612 (not $x716)))
 (let ((?x566 (* ?x75 ?x249)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x122 (* ?x75 ?x488)))
 (let ((?x166 (* 2.0 ?x122)))
 (let ((?x121 (* ?x179 ?x315)))
 (let ((?x570 (* (- 1.0) ?x121)))
 (let ((?x115 (* ?x179 ?x494)))
 (let ((?x127 (* (- 1.0) ?x115)))
 (let ((?x390 (* (- (/ 1.0 16.0)) (* ?x249 ?x249 ?x249 ?x249 ?x494 ?x494))))
 (let ((?x325 (+ (* (- (/ 1.0 4.0)) (* ?x249 ?x315 ?x315 ?x315)) (* (- (/ 1.0 8.0)) (* ?x249 ?x249 ?x249 ?x315 ?x315 ?x488)) ?x390 (* (/ 1.0 8.0) (* ?x249 ?x249 ?x249 ?x315 ?x315 ?x488 ?x494)) (* (/ 1.0 32.0) (* ?x249 ?x249 ?x249 ?x249 ?x315 ?x494 ?x494)) (* (/ 1.0 16.0) (* ?x249 ?x249 ?x249 ?x315 ?x488 ?x494 ?x494)) (* (- (/ 1.0 4.0)) (* ?x249 ?x315 ?x494 ?x494)) (* (- (/ 1.0 2.0)) (* ?x249 ?x315 ?x315 ?x494)) (* (- (/ 1.0 16.0)) (* ?x249 ?x249 ?x249 ?x249 ?x315 ?x315)) (* (- (/ 1.0 8.0)) (* ?x249 ?x249 ?x249 ?x249 ?x315 ?x494)) (* (- (/ 1.0 4.0)) (* ?x249 ?x249 ?x249 ?x315 ?x488 ?x494)) (* (/ 1.0 16.0) (* ?x249 ?x249 ?x249 ?x315 ?x315 ?x315 ?x488)) (* (- (/ 1.0 8.0)) (* ?x249 ?x249 ?x249 ?x488 ?x494 ?x494)) (* (/ 1.0 32.0) (* ?x249 ?x249 ?x249 ?x249 ?x315 ?x315 ?x315)) (* (/ 1.0 16.0) (* ?x249 ?x249 ?x249 ?x249 ?x315 ?x315 ?x494)))))
 (let (($x555 (= (* ?x325 (+ ?x127 ?x570 ?x166 ?x180 ?x217 ?x566)) 0.0)))
 (let ((?x697 (+ ?x570 ?x166 ?x180 ?x217 ?x566 ?x127)))
 (let (($x223 (= 0.0 ?x697)))
 (let (($x233 (>= ?x697 0.0)))
 (let ((?x294 (+ (* (- 1.0) (to_real (* b00 d!1))) ?x566)))
 (let (($x451 (= ?x294 0.0)))
 (let ((@x442 (lemma (unit-resolution ((_ th-lemma arith) $x451) (hypothesis (not $x451)) false) $x451)))
 (let ((?x577 (+ (* (- 1.0) (to_real (* b00 y00))) ?x214)))
 (let (($x644 (>= ?x577 0.0)))
 (let (($x253 (= 0.0 ?x577)))
 (let ((@x154 (symm (commutativity (= $x253 (= ?x577 0.0))) (= (= ?x577 0.0) $x253))))
 (let ((@x156 (mp ((_ th-lemma arith) (= ?x577 0.0)) @x154 $x253)))
 (let ((@x149 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x253) $x644)) @x156 $x644)))
 (let (($x733 (<= ?x577 0.0)))
 (let (($x654 (>= ?x294 0.0)))
 (let ((@x529 (hypothesis $x451)))
 (let (($x453 (<= ?x294 0.0)))
 (let ((@x657 ((_ th-lemma arith triangle-eq) (or (not $x451) $x453))))
 (let ((?x599 (+ ?x121 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x548 (>= ?x599 0.0)))
 (let (($x613 (= 0.0 ?x599)))
 (let ((@x640 (symm (commutativity (= $x613 (= ?x599 0.0))) (= (= ?x599 0.0) $x613))))
 (let ((@x620 (mp ((_ th-lemma arith) (= ?x599 0.0)) @x640 $x613)))
 (let ((@x587 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x613) $x548)) @x620 $x548)))
 (let (($x221 (<= ?x599 0.0)))
 (let ((?x246 (+ (* (- 1.0) (to_real (* d00 a!3))) ?x115)))
 (let (($x238 (>= ?x246 0.0)))
 (let (($x235 (= ?x246 0.0)))
 (let ((@x721 ((_ th-lemma arith) $x235)))
 (let ((@x739 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x238)) @x721 $x238)))
 (let (($x624 (<= ?x246 0.0)))
 (let ((?x196 (* b00 d!1)))
 (let ((?x283 (+ ?x196 (* (- 1) (* d00 b!2)))))
 (let (($x295 (>= ?x283 0)))
 (let (($x593 (= 0 ?x283)))
 (let ((@x516 (symm (commutativity (= $x593 (= ?x283 0))) (= (= ?x283 0) $x593))))
 (let (($x293 (= ?x283 0)))
 (let (($x615 (not $x555)))
 (let (($x378 (or $x612 $x615)))
 (let ((?x712 (+ (* 2 (* b!2 y!0)) (* (- 1) (* a!3 d!1)) (* (- 2) (* y00 b!2)) (* a00 d!1))))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let ((?x247 (+ ?x35 ?x104 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x237 (= ?x247 0)))
 (let (($x588 (and $x237 $x293 (= ?x712 0) $x378)))
 (let ((?x377 (+ ?x180 (* (- 1.0) (* ?x494 ?x179)) ?x217 (* (- 1.0) (* ?x315 ?x179)) (* 2.0 (* ?x488 ?x75)) (* ?x249 ?x75))))
 (let ((?x454 (+ (* (- (/ 1.0 4.0)) (* ?x315 ?x249 ?x494 ?x494)) (* (- (/ 1.0 8.0)) (* ?x249 ?x249 ?x249 ?x494 ?x494 ?x488)) (* (/ 1.0 16.0) (* ?x315 ?x249 ?x249 ?x249 ?x494 ?x494 ?x488)) (* (- (/ 1.0 4.0)) (* ?x315 ?x315 ?x315 ?x249)) (* (- (/ 1.0 2.0)) (* ?x315 ?x315 ?x249 ?x494)) (* (- (/ 1.0 8.0)) (* ?x315 ?x315 ?x249 ?x249 ?x249 ?x488)) (* (- (/ 1.0 16.0)) (* ?x315 ?x315 ?x249 ?x249 ?x249 ?x249)) (* (- (/ 1.0 8.0)) (* ?x315 ?x249 ?x249 ?x249 ?x249 ?x494)) ?x390 (* (- (/ 1.0 4.0)) (* ?x315 ?x249 ?x249 ?x249 ?x494 ?x488)) (* (/ 1.0 16.0) (* ?x315 ?x315 ?x315 ?x249 ?x249 ?x249 ?x488)) (* (/ 1.0 32.0) (* ?x315 ?x315 ?x315 ?x249 ?x249 ?x249 ?x249)) (* (/ 1.0 16.0) (* ?x315 ?x315 ?x249 ?x249 ?x249 ?x249 ?x494)) (* (/ 1.0 32.0) (* ?x315 ?x249 ?x249 ?x249 ?x249 ?x494 ?x494)) (* (/ 1.0 8.0) (* ?x315 ?x315 ?x249 ?x249 ?x249 ?x494 ?x488)))))
 (let ((?x422 (+ (* (/ 1.0 4.0) (* ?x315 ?x249 ?x494 ?x494 ?x178 ?x179)) (* (- (/ 1.0 4.0)) (* ?x315 ?x249 ?x494 ?x494 ?x494 ?x179)) (* (- (/ 1.0 2.0)) (* ?x315 ?x249 ?x494 ?x494 ?x75 ?x213)) (* (/ 1.0 2.0) (* ?x315 ?x249 ?x494 ?x494 ?x488 ?x75)) (* (/ 1.0 8.0) (* ?x249 ?x249 ?x249 ?x494 ?x494 ?x488 ?x178 ?x179)) (* (- (/ 1.0 8.0)) (* ?x249 ?x249 ?x249 ?x494 ?x494 ?x494 ?x488 ?x179)) (* (- (/ 1.0 4.0)) (* ?x249 ?x249 ?x249 ?x494 ?x494 ?x488 ?x75 ?x213)) (* (/ 1.0 4.0) (* ?x249 ?x249 ?x249 ?x494 ?x494 ?x488 ?x488 ?x75)) (* (- (/ 1.0 16.0)) (* ?x315 ?x249 ?x249 ?x249 ?x494 ?x494 ?x488 ?x178 ?x179)) (* (/ 1.0 16.0) (* ?x315 ?x249 ?x249 ?x249 ?x494 ?x494 ?x494 ?x488 ?x179)) (* (/ 1.0 8.0) (* ?x315 ?x249 ?x249 ?x249 ?x494 ?x494 ?x488 ?x75 ?x213)) (* (- (/ 1.0 8.0)) (* ?x315 ?x249 ?x249 ?x249 ?x494 ?x494 ?x488 ?x488 ?x75)))))
 (let ((?x551 (* a!3 d!1)))
 (let ((?x102 (+ ?x551 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x134 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x104 (* 2 (* y!0 b00))) 0)))
 (let (($x362 (and $x134 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x102 0) (or (not (= ?x422 0.0)) (not (= (* ?x454 ?x377) 0.0))))))
 (let (($x480 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x406 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x198 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x159 (+ ?x180 ?x198 ?x217 ?x406 (* 2.0 (* (to_real y) ?x75)) (* (to_real d) ?x75))))
 (let ((?x64 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x742 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x59 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x64)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x64)))))
 (let ((?x403 (+ (* (/ 1.0 4.0) (* ?x56 ?x59 ?x62 ?x62 ?x178 ?x179)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x62 ?x62 ?x62 ?x179)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x62 ?x62 ?x75 ?x213)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x62 ?x62 ?x64 ?x75)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x178 ?x179)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x64 ?x179)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x75 ?x213)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x64 ?x75)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x178 ?x179)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x64 ?x179)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x75 ?x213)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x64 ?x75)))))
 (let (($x396 (not (= ?x403 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x200 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x205 (= ?x200 0)))
 (let (($x146 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (and $x136 $x146 $x205 (or $x396 (not (= (* ?x742 ?x159) 0.0))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x616 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x503 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x129 (+ ?x217 ?x180 ?x503 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x242 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x493 (+ ?x64 ?x242)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x282 (+ ?x62 ?x56)))
 (let ((?x677 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x282 ?x282)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x282 ?x282 ?x493)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x282 ?x282 ?x493)))))
 (let ((?x538 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x64 ?x59 ?x59 ?x59 ?x56 ?x62 ?x62)))))
 (let ((?x544 (* ?x538 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x64)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x689 (or (not (= ?x544 0.0)) (not (= (* ?x677 ?x129) 0.0)))))
 (let ((?x201 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x590 (= ?x201 0)))
 (let ((?x431 (* d00 a)))
 (let ((?x186 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x431)))
 (and (= ?x186 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x590 $x689))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x633 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x406 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x198 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x159 (+ ?x180 ?x198 ?x217 ?x406 (* 2.0 (* (to_real y) ?x75)) (* (to_real d) ?x75))))
 (let ((?x64 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x742 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x59 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x64)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x64)))))
 (let ((?x403 (+ (* (/ 1.0 4.0) (* ?x56 ?x59 ?x62 ?x62 ?x178 ?x179)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x62 ?x62 ?x62 ?x179)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x62 ?x62 ?x75 ?x213)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x62 ?x62 ?x64 ?x75)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x178 ?x179)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x64 ?x179)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x75 ?x213)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x64 ?x75)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x178 ?x179)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x64 ?x179)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x75 ?x213)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 ?x64 ?x64 ?x75)))))
 (let (($x396 (not (= ?x403 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x200 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x205 (= ?x200 0)))
 (let (($x146 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (let (($x296 (and $x136 $x146 $x205 (or $x396 (not (= (* ?x742 ?x159) 0.0))))))
 (let ((?x129 (+ ?x217 ?x180 (* 2.0 (* ?x75 (+ ?x64 (* (/ 1.0 2.0) ?x59)))) (* (- 1.0) (* ?x179 (+ ?x62 ?x56))))))
 (let ((?x242 (* (/ 1.0 2.0) ?x59)))
 (let ((?x493 (+ ?x64 ?x242)))
 (let ((?x282 (+ ?x62 ?x56)))
 (let ((?x677 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x282 ?x282)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x282 ?x282 ?x493)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x282 ?x282 ?x493)))))
 (let ((?x538 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x64 ?x59 ?x59 ?x59 ?x56 ?x62 ?x62)))))
 (let ((?x544 (* ?x538 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x64)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x689 (or (not (= ?x544 0.0)) (not (= (* ?x677 ?x129) 0.0)))))
 (let ((?x201 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x590 (= ?x201 0)))
 (let ((?x431 (* d00 a)))
 (let (($x524 (= (+ (* 2 ?x103) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x431) 0)))
 (let (($x631 (and $x524 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x590 $x689)))
 (rewrite (= $x631 $x296))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x694 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x503 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x129 (+ ?x217 ?x180 ?x503 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x242 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x493 (+ ?x64 ?x242)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x282 (+ ?x62 ?x56)))
 (let ((?x677 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x282 ?x282)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x282 ?x282 ?x493)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x282 ?x282 ?x493)))))
 (let ((?x538 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x64 ?x59 ?x59 ?x59 ?x56 ?x62 ?x62)))))
 (let ((?x544 (* ?x538 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x64)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x689 (or (not (= ?x544 0.0)) (not (= (* ?x677 ?x129) 0.0)))))
 (let ((?x201 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x590 (= ?x201 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x331 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x331 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x590 $x689))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x105 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x503 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x129 (+ ?x217 ?x180 ?x503 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x242 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x493 (+ ?x64 ?x242)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x282 (+ ?x62 ?x56)))
 (let ((?x677 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x282 ?x282)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x282 ?x282 ?x493)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x282 ?x282 ?x493)))))
 (let ((?x538 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x64 ?x59 ?x59 ?x59 ?x56 ?x62 ?x62)))))
 (let ((?x544 (* ?x538 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x64)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x689 (or (not (= ?x544 0.0)) (not (= (* ?x677 ?x129) 0.0)))))
 (let ((?x201 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x590 (= ?x201 0)))
 (let ((?x431 (* d00 a)))
 (let ((?x186 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x431)))
 (let (($x631 (and (= ?x186 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x590 $x689)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x99 (and (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) ?x431)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x590 $x689)))
 (rewrite (= $x99 $x631))))))))))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x71 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x64 (to_real y)))
 (let ((?x74 (+ ?x64 ?x60)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (+ a b)))
 (let ((?x84 (to_real ?x80)))
 (let ((?x87 (- (* (to_real (- 1)) ?x84 ?x84 ?x58 ?x60) (* ?x84 ?x84 ?x60 ?x60 ?x60 ?x74))))
 (let ((?x35 (* a00 d00)))
 (let ((?x78 (to_real ?x35)))
 (let ((?x79 (+ (to_real (* (- 2) b00 y00)) ?x78 (* ?x57 (to_real b00) ?x74))))
 (let ((?x90 (* (- ?x79 (to_real (* ?x80 d00))) (+ ?x87 (* ?x84 ?x84 ?x58 ?x60 ?x60 ?x60 ?x74)))))
 (let ((?x66 (- (* (to_real (- 1)) (to_real a) (to_real a) ?x58 ?x60) (* (to_real a) (to_real a) ?x60 ?x60 ?x60 ?x64))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let ((?x70 (* (to_real ?x39) (+ ?x66 (* (to_real a) (to_real a) ?x58 ?x60 ?x60 ?x60 ?x64)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x70 ?x71)) (not (= ?x90 ?x71))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x499 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x503 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x179 (to_real d00)))
 (let ((?x178 (to_real a00)))
 (let ((?x180 (* ?x178 ?x179)))
 (let ((?x213 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x214 (* ?x75 ?x213)))
 (let ((?x217 (* (- 2.0) ?x214)))
 (let ((?x129 (+ ?x217 ?x180 ?x503 (* (- 1.0) (* ?x179 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x242 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x493 (+ ?x64 ?x242)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x282 (+ ?x62 ?x56)))
 (let ((?x677 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x282 ?x282)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x282 ?x282 ?x493)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x59 ?x56 ?x282 ?x282 ?x493)))))
 (let ((?x538 (+ (* (- (/ 1.0 4.0)) (* ?x59 ?x56 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x64 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x64 ?x59 ?x59 ?x59 ?x56 ?x62 ?x62)))))
 (let ((?x544 (* ?x538 (+ ?x217 ?x180 (* 2.0 (* ?x75 ?x64)) (* (- 1.0) (* ?x179 ?x62))))))
 (let (($x689 (or (not (= ?x544 0.0)) (not (= (* ?x677 ?x129) 0.0)))))
 (let ((?x201 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x590 (= ?x201 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x331 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x99 (and $x331 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x590 $x689)))
 (let ((?x71 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x74 (+ ?x64 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (+ a b)))
 (let ((?x84 (to_real ?x80)))
 (let ((?x87 (- (* (to_real (- 1)) ?x84 ?x84 ?x58 ?x60) (* ?x84 ?x84 ?x60 ?x60 ?x60 ?x74))))
 (let ((?x78 (to_real ?x35)))
 (let ((?x83 (- (+ (to_real (* (- 2) b00 y00)) ?x78 (* ?x57 ?x75 ?x74)) (to_real (* ?x80 d00)))))
 (let (($x92 (not (= (* ?x83 (+ ?x87 (* ?x84 ?x84 ?x58 ?x60 ?x60 ?x60 ?x74))) ?x71))))
 (let ((?x66 (- (* (to_real (- 1)) ?x62 ?x62 ?x58 ?x60) (* ?x62 ?x62 ?x60 ?x60 ?x60 ?x64))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x72 (= (* (to_real ?x39) (+ ?x66 (* ?x62 ?x62 ?x58 ?x60 ?x60 ?x60 ?x64))) ?x71)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x94 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x72) $x92))))
 (rewrite (= $x94 $x99))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x600 (mp (mp @x96 (quant-intro (proof-bind ?x499) (= $x95 $x694)) $x694) (rewrite (= $x694 $x694)) $x694)))
 (let ((@x622 (mp (mp @x600 (quant-intro (proof-bind ?x105) (= $x694 $x616)) $x616) (quant-intro (proof-bind ?x633) (= $x616 $x480)) $x480)))
 (let ((@x163 (mp (mp~ @x622 (sk (~ $x480 $x362)) $x362) (rewrite (= $x362 $x588)) $x588)))
 (let ((@x517 (mp (and-elim @x163 $x293) @x516 $x593)))
 (let (($x292 (<= ?x283 0)))
 (let ((@x522 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x593) $x292)) @x517 $x292)))
 (let (($x458 (>= ?x247 0)))
 (let (($x596 (= 0 ?x247)))
 (let ((@x481 (mp (and-elim @x163 $x237) (symm (commutativity (= $x596 $x237)) (= $x237 $x596)) $x596)))
 (let ((@x628 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x596) $x458)) @x481 $x458)))
 (let (($x532 (<= ?x247 0)))
 (let ((@x199 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x596) $x532)) @x481 $x532)))
 (let (($x731 (not $x458)))
 (let (($x730 (not $x532)))
 (let (($x379 (or $x730 $x731 (not $x548) (not $x221) (not $x624) (not $x295) (not $x654) (not $x292) (not $x453) (not $x238) $x233 (not $x733) (not $x644))))
 (let ((@x741 (unit-resolution ((_ th-lemma arith) $x379) @x199 @x628 @x522 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x593) $x295)) @x517 $x295) (hypothesis (not $x233)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x624)) @x721 $x624) @x739 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x613) $x221)) @x620 $x221) @x587 (unit-resolution @x657 @x529 $x453) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x451) $x654)) @x529 $x654) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x253) $x733)) @x156 $x733) @x149 false)))
 (let (($x189 (<= ?x697 0.0)))
 (let ((?x674 (+ ?x122 (* (- 1.0) (to_real (* b00 y!0))))))
 (let (($x703 (<= ?x674 0.0)))
 (let (($x692 (= 0.0 ?x674)))
 (let ((@x591 (symm (commutativity (= $x692 (= ?x674 0.0))) (= (= ?x674 0.0) $x692))))
 (let ((@x228 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x692) $x703)) (mp ((_ th-lemma arith) (= ?x674 0.0)) @x591 $x692) $x703)))
 (let ((?x162 (+ ?x180 (* (- 1.0) (to_real ?x35)))))
 (let (($x348 (<= ?x162 0.0)))
 (let ((@x646 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x162 0.0)) $x348)) ((_ th-lemma arith) (= ?x162 0.0)) $x348)))
 (let ((@x523 ((_ th-lemma arith) @x522 @x149 @x646 @x587 @x199 @x228 (hypothesis (not $x189)) @x739 (unit-resolution @x657 ((_ th-lemma arith) $x451) $x453) false)))
 (let ((@x328 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x223 (not $x189) (not $x233))) (lemma @x523 $x189) (unit-resolution (lemma @x741 (or (not $x451) $x233)) @x442 $x233) $x223)))
 (let (($x261 (= ?x697 0.0)))
 (let (($x192 (not $x261)))
 (let ((@x232 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x192 $x555)) (hypothesis $x615) $x192) (symm (hypothesis $x223) $x261) false)))
 (let ((@x792 (unit-resolution (and-elim @x163 $x378) (unit-resolution (lemma @x232 (or (not $x223) $x555)) @x328 $x555) $x612)))
 (let (($x370 (<= ?x656 0.0)))
 (let ((@x281 (unit-resolution ((_ th-lemma arith) (or $x731 $x370 $x730)) @x199 @x628 (hypothesis (not $x370)) false)))
 (let ((@x817 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x368 (not $x370) $x783)) (lemma @x281 $x370) (mp @x792 (monotonicity @x799 (= $x612 $x800)) $x800) $x783)))
 (unit-resolution ((_ th-lemma arith) (or $x153 $x731 $x730)) @x199 @x628 @x817 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       83
 :arith-eq-adapter                65
 :arith-bound-propagations-cheap  41
 :arith-bound-propagations-lp     10
 :arith-conflicts                 115
 :arith-diseq                     55
 :arith-gcd-calls                 5
 :arith-grobner-calls             9
 :arith-grobner-conflicts         4
 :arith-horner-calls              9
 :arith-horner-cross-nested-forms 32
 :arith-lower                     103
 :arith-make-feasible             110
 :arith-max-columns               97
 :arith-max-rows                  27
 :arith-nla-explanations          211
 :arith-nla-lemmas                114
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              41
 :arith-upper                     99
 :conflicts                       15
 :decisions                       128
 :del-clause                      254
 :final-checks                    63
 :max-memory                      6.11
 :memory                          3.15
 :minimized-lits                  4
 :mk-bool-var                     325
 :mk-clause                       321
 :num-allocs                      18682884
 :num-checks                      1
 :propagations                    154
 :rlimit-count                    8311
 :time                            0.08
 :total-time                      0.08)
