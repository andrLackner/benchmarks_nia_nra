unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1048 (* (- 1) x!1)))
 (let ((?x1960 (* (- 1) y!0)))
 (let ((?x2146 (+ y00 x00 ?x1960 ?x1048)))
 (let (($x2080 (<= ?x2146 0)))
 (let (($x2145 (= ?x2146 0)))
 (let ((?x1965 (+ 1 y!0)))
 (let ((?x1946 (+ (- 1) x!1)))
 (let ((?x2121 (* y00 ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965)))
 (let ((?x2118 (* ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965 ?x1965)))
 (let ((?x2106 (* ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965)))
 (let ((?x1987 (* x!1 x!1)))
 (let ((?x1690 (* 3 x00)))
 (let ((?x1689 (* 3 y00)))
 (let ((?x2153 (+ ?x1689 ?x1690 (* y!0 y!0 y!0 x!1) (* (- 1) (* ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965 ?x1965)) (* 4 (* x00 y!0 y!0 y!0)) (* (- 8) (* y00 y!0 y!0 y!0 x!1)) (* x00 y!0 y!0 y!0 y!0) (* 4 (* y00 y!0 y!0 y!0 x!1 x!1)) (* 12 (* y00 y!0 y!0 x!1 x!1)) (* (- 18) (* y00 y!0 x!1)) (* (- 8) (* x00 y!0 y!0 y!0 x!1)) ?x1960 (* (- 1) (* x00 ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965)) (* y00 x!1 x!1 x!1 x!1) (* 2 (* y00 y!0 x!1 x!1 x!1 x!1)) ?x1987 (* (- 1) (* ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965)) (* (- 1) (* ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965)) (* 8 (* x00 y!0)) (* 8 (* x00 y!0 y!0)) (* (- 8) (* y00 y!0 x!1 x!1 x!1)) ?x2106 (* (- 1) (* y!0 y!0 y!0)) (* (- 1) (* ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965)) ?x2118 (* (- 1) ?x2121) (* (- 2) (* y!0 y!0)) ?x1048 (* 2 (* y!0 x!1 x!1)) (* (- 1) (* y!0 x!1)) (* y!0 y!0 x!1 x!1) (* y!0 y!0 x!1) (* x00 y!0 y!0 x!1 x!1 x!1 x!1) (* (- 4) (* x00 y!0 y!0 x!1 x!1 x!1)) (* 12 (* x00 y!0 y!0 x!1 x!1)) (* (- 17) (* x00 y!0 y!0 x!1)) (* 2 (* x00 y!0 x!1 x!1 x!1 x!1)) (* (- 8) (* x00 y!0 x!1 x!1 x!1)) (* 16 (* x00 y!0 x!1 x!1)) (* (- 18) (* x00 y!0 x!1)) (* x00 x!1 x!1 x!1 x!1) (* (- 4) (* x00 x!1 x!1 x!1)) (* (- 7) (* x00 x!1)) (* 7 (* x00 x!1 x!1)) (* (- 17) (* y00 y!0 y!0 x!1)) (* 16 (* y00 y!0 x!1 x!1)) (* 7 (* y00 x!1 x!1)) (* (- 7) (* y00 x!1)) (* 8 (* y00 y!0)) (* 8 (* y00 y!0 y!0)) (* y00 y!0 y!0 y!0 y!0) (* y00 y!0 y!0 y!0 y!0 x!1 x!1) (* (- 2) (* y00 y!0 y!0 y!0 y!0 x!1)) (* 4 (* y00 y!0 y!0 y!0)) (* (- 4) (* y00 x!1 x!1 x!1)) (* y00 y!0 y!0 x!1 x!1 x!1 x!1) (* (- 4) (* y00 y!0 y!0 x!1 x!1 x!1)) (* x00 y!0 y!0 y!0 y!0 x!1 x!1) (* (- 2) (* x00 y!0 y!0 y!0 y!0 x!1)) (* 4 (* x00 y!0 y!0 y!0 x!1 x!1)))))
 (let (($x2155 (= ?x2153 0)))
 (let (($x2156 (not $x2155)))
 (let (($x2056 (and $x2145 $x2156)))
 (let ((?x595 (* ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965 ?x1965)))
 (let ((?x2114 (* y!0 y!0 y!0)))
 (let ((?x2117 (* ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965)))
 (let ((?x2017 (* ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965)))
 (let ((?x1993 (* ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965)))
 (let ((?x1951 (* x00 ?x1946 ?x1946 ?x1946 ?x1946 ?x1946 ?x1965 ?x1965 ?x1965 ?x1965)))
 (let ((?x2360 (* (- 3) x00)))
 (let ((?x2371 (* (- 3) y00)))
 (let ((?x2038 (+ x!1 y!0 ?x2371 ?x2360 (* (- 8) (* y!0 x00)) (* (- 8) (* y!0 y!0 x00)) ?x1951 (* (- 1) (* x!1 y!0 y!0)) (* (- 1) (* x!1 x!1 y!0 y!0)) (* (- 1) ?x1987) (* x!1 y!0) (* (- 2) (* x!1 x!1 y!0)) ?x1993 (* 7 (* x!1 x00)) (* (- 7) (* x!1 x!1 x00)) (* 4 (* x!1 x!1 x!1 x00)) (* (- 1) (* x!1 x!1 x!1 x!1 x00)) (* 18 (* x!1 y!0 x00)) (* (- 16) (* x!1 x!1 y!0 x00)) (* 8 (* x!1 x!1 x!1 y!0 x00)) (* (- 2) (* x!1 x!1 x!1 x!1 y!0 x00)) (* 17 (* x!1 y!0 y!0 x00)) (* (- 12) (* x!1 x!1 y!0 y!0 x00)) (* 4 (* x!1 x!1 x!1 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 x!1 x!1 y!0 y!0 x00)) ?x2017 (* (- 1) (* x!1 x!1 y!0 y!0 y!0 y!0 y00)) (* 2 (* x!1 y!0 y!0 y!0 y!0 y00)) (* (- 1) (* y!0 y!0 y!0 y!0 y00)) (* (- 4) (* y!0 y!0 y!0 y00)) (* (- 8) (* y!0 y!0 y00)) (* (- 8) (* y!0 y00)) (* 7 (* x!1 y00)) (* (- 7) (* x!1 x!1 y00)) (* 18 (* x!1 y!0 y00)) (* (- 16) (* x!1 x!1 y!0 y00)) (* 17 (* x!1 y!0 y!0 y00)) (* (- 12) (* x!1 x!1 y!0 y!0 y00)) (* 8 (* x!1 y!0 y!0 y!0 y00)) (* (- 4) (* x!1 x!1 y!0 y!0 y!0 y00)) ?x2121 (* 2 (* y!0 y!0)) (* (- 1) ?x2118) ?x2117 ?x2114 (* (- 1) (* x!1 y!0 y!0 y!0)) ?x595 (* (- 1) ?x2106) (* (- 4) (* y!0 y!0 y!0 x00)) (* 8 (* x!1 y!0 y!0 y!0 x00)) (* (- 4) (* x!1 x!1 y!0 y!0 y!0 x00)) (* (- 1) (* y!0 y!0 y!0 y!0 x00)) (* 2 (* x!1 y!0 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0 y!0 x00)) (* 4 (* x!1 x!1 x!1 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 x!1 x!1 y!0 y!0 y00)) (* 4 (* x!1 x!1 x!1 y00)) (* (- 1) (* x!1 x!1 x!1 x!1 y00)) (* 8 (* x!1 x!1 x!1 y!0 y00)) (* (- 2) (* x!1 x!1 x!1 x!1 y!0 y00)))))
 (let (($x2060 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x2038 0)))))
 (let (($x793 (exists ((x Int) (y Int) )(! (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x939 (* (- 1) ?x1175)))
 (let ((?x1083 (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x996 (* y y y)))
 (let ((?x927 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x663 (* (- 1) ?x893)))
 (let ((?x838 (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x629 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x354 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x281 (* x y)))
 (let ((?x245 (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x2360 (* (- 3) x00)))
 (let ((?x2371 (* (- 3) y00)))
 (let ((?x2380 (+ x y ?x2371 ?x2360 (* (- 8) (* y x00)) (* (- 8) (* y y x00)) ?x245 (* (- 1) (* x y y)) (* (- 1) (* x x y y)) (* (- 1) (* x x)) ?x281 (* (- 2) (* x x y)) ?x354 (* 7 (* x x00)) (* (- 7) (* x x x00)) (* 4 (* x x x x00)) (* (- 1) (* x x x x x00)) (* 18 (* x y x00)) (* (- 16) (* x x y x00)) (* 8 (* x x x y x00)) (* (- 2) (* x x x x y x00)) (* 17 (* x y y x00)) (* (- 12) (* x x y y x00)) (* 4 (* x x x y y x00)) (* (- 1) (* x x x x y y x00)) ?x629 (* (- 1) (* x x y y y y y00)) (* 2 (* x y y y y y00)) (* (- 1) (* y y y y y00)) (* (- 4) (* y y y y00)) (* (- 8) (* y y y00)) (* (- 8) (* y y00)) (* 7 (* x y00)) (* (- 7) (* x x y00)) (* 18 (* x y y00)) (* (- 16) (* x x y y00)) (* 17 (* x y y y00)) (* (- 12) (* x x y y y00)) (* 8 (* x y y y y00)) (* (- 4) (* x x y y y y00)) ?x838 (* 2 (* y y)) ?x663 ?x927 ?x996 (* (- 1) (* x y y y)) ?x1083 ?x939 (* (- 4) (* y y y x00)) (* 8 (* x y y y x00)) (* (- 4) (* x x y y y x00)) (* (- 1) (* y y y y x00)) (* 2 (* x y y y y x00)) (* (- 1) (* x x y y y y x00)) (* 4 (* x x x y y y00)) (* (- 1) (* x x x x y y y00)) (* 4 (* x x x y00)) (* (- 1) (* x x x x y00)) (* 8 (* x x x y y00)) (* (- 2) (* x x x x y y00)))))
 (let (($x98 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x98 (not (= ?x2380 0))))))))))))))))))))) :qid k!26))
 ))
 (let (($x800 (exists ((x Int) (y Int) )(! (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x652 (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x838 (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x939 (* (- 1) ?x1175)))
 (let ((?x927 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x701 (* y00 ?x90 ?x100 ?x100)))
 (let ((?x1083 (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x663 (* (- 1) ?x893)))
 (let ((?x629 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x354 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x245 (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x269 (* x00 ?x90 ?x100 ?x100)))
 (let ((?x937 (+ ?x269 ?x245 ?x354 (* (- 1) (* ?x90 ?x90 ?x100 ?x100)) (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)) ?x629 (* (- 1) (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) ?x663 ?x1083 (* (- 1) (* ?x90 ?x100 ?x100 ?x100)) ?x701 ?x927 ?x939 ?x838 (* (- 1) (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) (* (- 1) ?x652))))
 (let (($x545 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x545 (not (= ?x937 0)))))))))))))))))))) :qid k!26))
 ))
 (let ((?x705 (lambda ((x Int) (y Int) )(let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x939 (* (- 1) ?x1175)))
 (let ((?x1083 (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x996 (* y y y)))
 (let ((?x927 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x663 (* (- 1) ?x893)))
 (let ((?x838 (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x629 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x354 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x281 (* x y)))
 (let ((?x245 (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x2360 (* (- 3) x00)))
 (let ((?x2371 (* (- 3) y00)))
 (let ((?x2380 (+ x y ?x2371 ?x2360 (* (- 8) (* y x00)) (* (- 8) (* y y x00)) ?x245 (* (- 1) (* x y y)) (* (- 1) (* x x y y)) (* (- 1) (* x x)) ?x281 (* (- 2) (* x x y)) ?x354 (* 7 (* x x00)) (* (- 7) (* x x x00)) (* 4 (* x x x x00)) (* (- 1) (* x x x x x00)) (* 18 (* x y x00)) (* (- 16) (* x x y x00)) (* 8 (* x x x y x00)) (* (- 2) (* x x x x y x00)) (* 17 (* x y y x00)) (* (- 12) (* x x y y x00)) (* 4 (* x x x y y x00)) (* (- 1) (* x x x x y y x00)) ?x629 (* (- 1) (* x x y y y y y00)) (* 2 (* x y y y y y00)) (* (- 1) (* y y y y y00)) (* (- 4) (* y y y y00)) (* (- 8) (* y y y00)) (* (- 8) (* y y00)) (* 7 (* x y00)) (* (- 7) (* x x y00)) (* 18 (* x y y00)) (* (- 16) (* x x y y00)) (* 17 (* x y y y00)) (* (- 12) (* x x y y y00)) (* 8 (* x y y y y00)) (* (- 4) (* x x y y y y00)) ?x838 (* 2 (* y y)) ?x663 ?x927 ?x996 (* (- 1) (* x y y y)) ?x1083 ?x939 (* (- 4) (* y y y x00)) (* 8 (* x y y y x00)) (* (- 4) (* x x y y y x00)) (* (- 1) (* y y y y x00)) (* 2 (* x y y y y x00)) (* (- 1) (* x x y y y y x00)) (* 4 (* x x x y y y00)) (* (- 1) (* x x x x y y y00)) (* 4 (* x x x y00)) (* (- 1) (* x x x x y00)) (* 8 (* x x x y y00)) (* (- 2) (* x x x x y y00)))))
 (let (($x98 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x2386 (and $x98 (not (= ?x2380 0)))))
 (let ((?x701 (* y00 ?x90 ?x100 ?x100)))
 (let ((?x269 (* x00 ?x90 ?x100 ?x100)))
 (let ((?x937 (+ ?x269 ?x245 ?x354 (* (- 1) (* ?x90 ?x90 ?x100 ?x100)) (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)) ?x629 (* (- 1) (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) ?x663 ?x1083 (* (- 1) (* ?x90 ?x100 ?x100 ?x100)) ?x701 ?x927 ?x939 ?x838 (* (- 1) (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))))
 (let (($x545 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x597 (and $x545 (not (= ?x937 0)))))
 (rewrite (= $x597 $x2386)))))))))))))))))))))))))))
 ))
 (let (($x623 (exists ((x Int) (y Int) )(! (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x652 (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x851 (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x927 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x1185 (* (- 1) ?x927)))
 (let ((?x709 (* ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1083 (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x976 (* (- 1) ?x1083)))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x729 (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x629 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x756 (* (- 1) ?x629)))
 (let ((?x301 (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x265 (* ?x90 ?x90 ?x100 ?x100)))
 (let ((?x354 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x226 (* (- 1) ?x354)))
 (let ((?x860 (+ (* (- 1) (* x00 ?x90 ?x100 ?x100)) (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) ?x226 ?x265 ?x301 ?x756 ?x729 ?x893 ?x976 ?x709 (* (- 1) (* y00 ?x90 ?x100 ?x100)) ?x1185 ?x1175 (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) ?x851 ?x652)))
 (let (($x545 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x545 (not (= ?x860 0))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x805 (lambda ((x Int) (y Int) )(let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x652 (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x838 (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x939 (* (- 1) ?x1175)))
 (let ((?x927 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x701 (* y00 ?x90 ?x100 ?x100)))
 (let ((?x1083 (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x663 (* (- 1) ?x893)))
 (let ((?x629 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x354 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x245 (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x269 (* x00 ?x90 ?x100 ?x100)))
 (let ((?x937 (+ ?x269 ?x245 ?x354 (* (- 1) (* ?x90 ?x90 ?x100 ?x100)) (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)) ?x629 (* (- 1) (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) ?x663 ?x1083 (* (- 1) (* ?x90 ?x100 ?x100 ?x100)) ?x701 ?x927 ?x939 ?x838 (* (- 1) (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) (* (- 1) ?x652))))
 (let (($x545 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x597 (and $x545 (not (= ?x937 0)))))
 (let ((?x851 (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1185 (* (- 1) ?x927)))
 (let ((?x709 (* ?x90 ?x100 ?x100 ?x100)))
 (let ((?x976 (* (- 1) ?x1083)))
 (let ((?x729 (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x756 (* (- 1) ?x629)))
 (let ((?x301 (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x265 (* ?x90 ?x90 ?x100 ?x100)))
 (let ((?x226 (* (- 1) ?x354)))
 (let ((?x860 (+ (* (- 1) ?x269) (* (- 1) ?x245) ?x226 ?x265 ?x301 ?x756 ?x729 ?x893 ?x976 ?x709 (* (- 1) ?x701) ?x1185 ?x1175 (* (- 1) ?x838) ?x851 ?x652)))
 (let (($x243 (and $x545 (not (= ?x860 0)))))
 (rewrite (= $x243 $x597))))))))))))))))))))))))))))))))
 ))
 (let (($x69 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (- (* (- 1) ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x44 (+ (- ?x40 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x49 (+ (- ?x44 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x53 (+ (- ?x49 (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36))))
 (let ((?x57 (- (- ?x53 (* ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x61 (- (+ ?x57 (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00))))
 (let ((?x64 (+ ?x61 (* ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x64 0))))))))))))) :qid k!26))
 ))
 (let ((?x239 (lambda ((x Int) (y Int) )(let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x652 (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x851 (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x927 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x1185 (* (- 1) ?x927)))
 (let ((?x709 (* ?x90 ?x100 ?x100 ?x100)))
 (let ((?x1083 (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x976 (* (- 1) ?x1083)))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x729 (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x629 (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100)))
 (let ((?x756 (* (- 1) ?x629)))
 (let ((?x301 (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100)))
 (let ((?x265 (* ?x90 ?x90 ?x100 ?x100)))
 (let ((?x354 (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x226 (* (- 1) ?x354)))
 (let ((?x860 (+ (* (- 1) (* x00 ?x90 ?x100 ?x100)) (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) ?x226 ?x265 ?x301 ?x756 ?x729 ?x893 ?x976 ?x709 (* (- 1) (* y00 ?x90 ?x100 ?x100)) ?x1185 ?x1175 (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)) ?x851 ?x652)))
 (let (($x545 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x243 (and $x545 (not (= ?x860 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (- (* (- 1) ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x44 (+ (- ?x40 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x49 (+ (- ?x44 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x53 (+ (- ?x49 (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36))))
 (let ((?x57 (- (- ?x53 (* ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x61 (- (+ ?x57 (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00))))
 (let ((?x64 (+ ?x61 (* ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (let (($x68 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x64 0))))))
 (rewrite (= $x68 $x243))))))))))))))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x260 (mp (mp @x70 (quant-intro (proof-bind ?x239) (= $x69 $x623)) $x623) (rewrite (= $x623 $x623)) $x623)))
 (let ((@x2347 (mp (mp @x260 (quant-intro (proof-bind ?x805) (= $x623 $x800)) $x800) (quant-intro (proof-bind ?x705) (= $x800 $x793)) $x793)))
 (let ((@x2164 (mp (mp~ @x2347 (sk (~ $x793 $x2060)) $x2060) (rewrite (= $x2060 $x2056)) $x2056)))
 (let ((@x2163 (and-elim @x2164 $x2145)))
 (let ((@x2291 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x2145) $x2080)) @x2163 $x2080)))
 (let (($x2089 (>= ?x2146 0)))
 (let ((@x2307 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x2145) $x2089)) @x2163 $x2089)))
 (let (($x2270 (not (>= ?x2153 0))))
 (let (($x2064 (<= ?x2153 0)))
 (let ((@x2066 (lemma ((_ th-lemma arith) (hypothesis (not $x2064)) @x2307 @x2291 @x2307 @x2291 false) $x2064)))
 (let ((@x2200 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2155 (not $x2064) $x2270)) (and-elim @x2164 $x2156) (or (not $x2064) $x2270))))
 ((_ th-lemma arith) (unit-resolution @x2200 @x2066 $x2270) @x2307 @x2291 @x2307 @x2291 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             488
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 80
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.83
 :memory                    3.31
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1677626
 :num-checks                1
 :propagations              4
 :rlimit-count              9168
 :time                      0.01
 :total-time                0.02)
