unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x187 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x196 (>= ?x187 0)))
 (let (($x100 (= ?x187 0)))
 (let ((?x59 (* 6 (* y!0 y!0))))
 (let ((?x169 (* 2 (* y!0 y!0 y!0))))
 (let ((?x143 (* 3 x!1)))
 (let ((?x150 (* 6 y!0)))
 (let ((?x134 (* (- 3) (* x!1 x!1))))
 (let ((?x119 (* x!1 x!1 x!1)))
 (let ((?x68 (* (+ 2 ?x119 ?x134 ?x150 ?x143 ?x169 ?x59) (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x67 (= ?x68 0)))
 (let (($x54 (not $x67)))
 (let (($x65 (and $x100 $x54)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x88 (+ x!1 y!0 ?x51 ?x58)))
 (let (($x98 (and (= ?x88 0) (not (= (* (+ 2 ?x143 ?x150 ?x134 ?x119 ?x59 ?x169) ?x88) 0)))))
 (let (($x176 (exists ((x Int) (y Int) )(! (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x175 (* 2 (* y y y))))
 (let ((?x172 (* y y)))
 (let ((?x93 (* 6 ?x172)))
 (let ((?x125 (* x x x)))
 (let ((?x146 (* (- 3) (* x x))))
 (let ((?x90 (* 6 y)))
 (let (($x135 (= (* (+ 2 (* 3 x) ?x90 ?x146 ?x125 ?x93 ?x175) ?x72) 0)))
 (let (($x77 (= ?x72 0)))
 (and $x77 (not $x135))))))))))))) :qid k!26))
 ))
 (let (($x210 (exists ((x Int) (y Int) )(! (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x175 (* 2 (* y y y))))
 (let ((?x172 (* y y)))
 (let ((?x93 (* 6 ?x172)))
 (let ((?x125 (* x x x)))
 (let ((?x146 (* (- 3) (* x x))))
 (let ((?x118 (* (- 1) (* x (- 1)))))
 (let ((?x90 (* 6 y)))
 (let ((?x144 (* 2 x)))
 (let (($x108 (not (= (* (+ 2 ?x144 ?x90 ?x118 ?x146 ?x125 ?x93 ?x175) ?x72) 0))))
 (let (($x77 (= ?x72 0)))
 (and $x77 $x108)))))))))))))) :qid k!26))
 ))
 (let ((?x151 (lambda ((x Int) (y Int) )(let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x175 (* 2 (* y y y))))
 (let ((?x172 (* y y)))
 (let ((?x93 (* 6 ?x172)))
 (let ((?x125 (* x x x)))
 (let ((?x146 (* (- 3) (* x x))))
 (let ((?x90 (* 6 y)))
 (let (($x135 (= (* (+ 2 (* 3 x) ?x90 ?x146 ?x125 ?x93 ?x175) ?x72) 0)))
 (let (($x77 (= ?x72 0)))
 (let (($x136 (and $x77 (not $x135))))
 (let ((?x118 (* (- 1) (* x (- 1)))))
 (let ((?x144 (* 2 x)))
 (let (($x108 (not (= (* (+ 2 ?x144 ?x90 ?x118 ?x146 ?x125 ?x93 ?x175) ?x72) 0))))
 (let (($x66 (and $x77 $x108)))
 (rewrite (= $x66 $x136)))))))))))))))))))
 ))
 (let (($x190 (exists ((x Int) (y Int) )(! (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x186 (+ x ?x51 ?x58 y)))
 (let ((?x87 (+ 1 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* 2 (* (+ 1 y) (+ 1 y) (+ 1 y))))))
 (and (= ?x186 0) (not (= (* ?x87 ?x186) 0))))))) :qid k!26))
 ))
 (let ((?x116 (lambda ((x Int) (y Int) )(let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x175 (* 2 (* y y y))))
 (let ((?x172 (* y y)))
 (let ((?x93 (* 6 ?x172)))
 (let ((?x125 (* x x x)))
 (let ((?x146 (* (- 3) (* x x))))
 (let ((?x118 (* (- 1) (* x (- 1)))))
 (let ((?x90 (* 6 y)))
 (let ((?x144 (* 2 x)))
 (let (($x108 (not (= (* (+ 2 ?x144 ?x90 ?x118 ?x146 ?x125 ?x93 ?x175) ?x72) 0))))
 (let (($x77 (= ?x72 0)))
 (let (($x66 (and $x77 $x108)))
 (let ((?x186 (+ x ?x51 ?x58 y)))
 (let ((?x87 (+ 1 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* 2 (* (+ 1 y) (+ 1 y) (+ 1 y))))))
 (let (($x70 (and (= ?x186 0) (not (= (* ?x87 ?x186) 0)))))
 (rewrite (= $x70 $x66))))))))))))))))))))
 ))
 (let (($x48 (exists ((x Int) (y Int) )(! (let ((?x42 (+ 1 (* (- x 1) (- x 1) (- x 1)) (* 2 (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x44 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x42) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x44))))) :qid k!26))
 ))
 (let ((?x60 (lambda ((x Int) (y Int) )(let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x186 (+ x ?x51 ?x58 y)))
 (let ((?x87 (+ 1 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* 2 (* (+ 1 y) (+ 1 y) (+ 1 y))))))
 (let (($x70 (and (= ?x186 0) (not (= (* ?x87 ?x186) 0)))))
 (let ((?x42 (+ 1 (* (- x 1) (- x 1) (- x 1)) (* 2 (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x44 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x42) 0)))
 (let (($x47 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x44)))))
 (rewrite (= $x47 $x70)))))))))))
 ))
 (let ((@x49 (asserted $x48)))
 (let ((@x114 (mp (mp @x49 (quant-intro (proof-bind ?x60) (= $x48 $x190)) $x190) (rewrite (= $x190 $x190)) $x190)))
 (let ((@x121 (mp (mp @x114 (quant-intro (proof-bind ?x116) (= $x190 $x210)) $x210) (quant-intro (proof-bind ?x151) (= $x210 $x176)) $x176)))
 (let ((@x104 (mp (mp~ @x121 (sk (~ $x176 $x98)) $x98) (rewrite (= $x98 $x65)) $x65)))
 (let ((@x84 (and-elim @x104 $x100)))
 (let ((@x95 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x196)) @x84 $x196)))
 (let (($x195 (<= ?x187 0)))
 (let ((@x61 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x195)) @x84 $x195)))
 (let (($x178 (not (>= ?x68 0))))
 (let (($x197 (<= ?x68 0)))
 (let ((@x55 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x67 (not $x197) $x178)) (and-elim @x104 $x54) (or (not $x197) $x178))))
 (let ((@x53 (unit-resolution @x55 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x197)) @x61 @x95 false) $x197) $x178)))
 ((_ th-lemma arith farkas 1 1 1) @x53 @x61 @x95 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             34
 :arith-nonlinear-bounds    4
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 17
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.45
 :memory                    3.04
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1026306
 :num-checks                1
 :propagations              4
 :rlimit-count              1164
 :time                      0.01
 :total-time                0.01)
