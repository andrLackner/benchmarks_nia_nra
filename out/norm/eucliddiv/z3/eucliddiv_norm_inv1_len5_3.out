unsat
((set-logic NIA)
(proof
(let (($x61 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x53 (* ?x44 ?x42 ?x42 ?x42 y00)))
 (let ((?x48 (* y00 y00)))
 (let ((?x51 (* ?x42 ?x42 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x45 (* ?x44 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00 y00)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x45 ?x48)))
 (let ((?x50 (- ?x49 ?x47)))
 (let ((?x52 (+ ?x50 ?x51)))
 (let ((?x54 (- ?x52 ?x48)))
 (let ((?x55 (- ?x54 ?x53)))
 (let ((?x56 (+ ?x55 ?x53)))
 (let (($x57 (= ?x56 0)))
 (let (($x58 (not $x57)))
 (let (($x59 (or $x58)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x59)))))))))))))))))))))) :qid k!29))
 ))
 (let (($x479 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x480 (lambda ((q Int) (r Int) (y Int) )(let ((?x42 (- r y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x53 (* ?x44 ?x42 ?x42 ?x42 y00)))
 (let ((?x48 (* y00 y00)))
 (let ((?x51 (* ?x42 ?x42 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x45 (* ?x44 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00 y00)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x49 (+ ?x46 ?x47 ?x45 ?x48)))
 (let ((?x50 (- ?x49 ?x47)))
 (let ((?x52 (+ ?x50 ?x51)))
 (let ((?x54 (- ?x52 ?x48)))
 (let ((?x55 (- ?x54 ?x53)))
 (let ((?x56 (+ ?x55 ?x53)))
 (let (($x57 (= ?x56 0)))
 (let (($x58 (not $x57)))
 (let (($x59 (or $x58)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x60 (and $x33 $x41 $x59)))
 (let (($x285 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x375 (= (+ (* (- 1) y00) y) 0)))
 (let (($x471 (and $x375 $x285 false)))
 (let ((?x66 (* (- 1) y00)))
 (let ((?x79 (+ r ?x66)))
 (let ((?x280 (+ 1 q)))
 (let ((?x426 (* y00 ?x280 ?x79 ?x79 ?x79)))
 (let ((?x434 (* (- 1) ?x426)))
 (let ((?x444 (+ ?x434 ?x426)))
 (let ((@x381 (rewrite (= ?x42 ?x79))))
 (let ((@x283 (rewrite (= ?x44 ?x280))))
 (let ((@x425 (monotonicity @x283 @x381 @x381 @x381 (= ?x53 (* ?x280 ?x79 ?x79 ?x79 y00)))))
 (let ((@x430 (trans @x425 (rewrite (= (* ?x280 ?x79 ?x79 ?x79 y00) ?x426)) (= ?x53 ?x426))))
 (let ((?x387 (* y00 y00 ?x79 ?x79)))
 (let ((?x388 (* (- 1) ?x387)))
 (let ((?x99 (+ ?x388 ?x48)))
 (let ((?x140 (+ ?x99 ?x387)))
 (let ((@x152 (trans (monotonicity @x381 @x381 (= ?x51 (* ?x79 ?x79 y00 y00))) (rewrite (= (* ?x79 ?x79 y00 y00) ?x387)) (= ?x51 ?x387))))
 (let ((?x304 (* y00 y00 ?x79 ?x79 ?x79)))
 (let ((?x310 (+ ?x388 ?x304 ?x48)))
 (let ((?x316 (+ ?x310 (* (- 1) ?x304))))
 (let ((@x303 (monotonicity @x381 @x381 @x381 (= ?x47 (* ?x79 ?x79 ?x79 y00 y00)))))
 (let ((@x270 (trans @x303 (rewrite (= (* ?x79 ?x79 ?x79 y00 y00) ?x304)) (= ?x47 ?x304))))
 (let ((?x287 (* y00 y00 y00 y00 ?x280 ?x79 ?x79 ?x79)))
 (let ((?x297 (+ ?x388 (* (- 1) ?x287))))
 (let ((?x307 (+ ?x297 ?x304 ?x287 ?x48)))
 (let ((@x284 (monotonicity @x283 @x381 @x381 @x381 (= ?x45 (* ?x280 ?x79 ?x79 ?x79 y00 y00 y00 y00)))))
 (let ((@x293 (trans @x284 (rewrite (= (* ?x280 ?x79 ?x79 ?x79 y00 y00 y00 y00) ?x287)) (= ?x45 ?x287))))
 (let ((@x386 (monotonicity (rewrite (= ?x28 (- 1))) @x381 @x381 (= ?x43 (* (- 1) ?x79 ?x79 y00 y00)))))
 (let ((@x265 (trans @x386 (rewrite (= (* (- 1) ?x79 ?x79 y00 y00) ?x388)) (= ?x43 ?x388))))
 (let ((@x300 (trans (monotonicity @x265 @x293 (= ?x46 (- ?x388 ?x287))) (rewrite (= (- ?x388 ?x287) ?x297)) (= ?x46 ?x297))))
 (let ((@x312 (trans (monotonicity @x300 @x270 @x293 (= ?x49 ?x307)) (rewrite (= ?x307 ?x310)) (= ?x49 ?x310))))
 (let ((@x320 (trans (monotonicity @x312 @x270 (= ?x50 (- ?x310 ?x304))) (rewrite (= (- ?x310 ?x304) ?x316)) (= ?x50 ?x316))))
 (let ((@x159 (monotonicity (trans @x320 (rewrite (= ?x316 ?x99)) (= ?x50 ?x99)) @x152 (= ?x52 ?x140))))
 (let ((@x93 (monotonicity (trans @x159 (rewrite (= ?x140 ?x48)) (= ?x52 ?x48)) (= ?x54 (- ?x48 ?x48)))))
 (let ((@x418 (trans @x93 (rewrite (= (- ?x48 ?x48) (+ ?x48 (* (- 1) ?x48)))) (= ?x54 (+ ?x48 (* (- 1) ?x48))))))
 (let ((@x422 (trans @x418 (rewrite (= (+ ?x48 (* (- 1) ?x48)) 0)) (= ?x54 0))))
 (let ((@x439 (trans (monotonicity @x422 @x430 (= ?x55 (- 0 ?x426))) (rewrite (= (- 0 ?x426) (+ 0 ?x434))) (= ?x55 (+ 0 ?x434)))))
 (let ((@x448 (monotonicity (trans @x439 (rewrite (= (+ 0 ?x434) ?x434)) (= ?x55 ?x434)) @x430 (= ?x56 ?x444))))
 (let ((@x452 (monotonicity (trans @x448 (rewrite (= ?x444 0)) $x57) (= $x57 (= 0 0)))))
 (let ((@x458 (monotonicity (trans @x452 (rewrite (= (= 0 0) true)) (= $x57 true)) (= $x58 (not true)))))
 (let ((@x464 (monotonicity (trans @x458 (rewrite (= (not true) false)) (= $x58 false)) (= $x59 (or false)))))
 (let ((@x473 (monotonicity (rewrite (= $x33 $x375)) (rewrite (= $x41 $x285)) (trans @x464 (rewrite (= (or false) false)) (= $x59 false)) (= $x60 $x471))))
 (trans @x473 (rewrite (= $x471 false)) (= $x60 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x487 (trans (quant-intro (proof-bind ?x480) (= $x61 $x479)) (elim-unused (= $x479 false)) (= $x61 false))))
 (let ((@x62 (asserted $x61)))
 (mp @x62 @x487 false))))))))

(:max-memory   3.40
 :memory       3.09
 :mk-bool-var  5
 :num-allocs   920670
 :rlimit-count 475
 :time         0.01
 :total-time   0.01)
