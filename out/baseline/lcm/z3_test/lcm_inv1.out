unsat
((set-logic NIA)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let (($x146 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x77 (* (- 1) k!10)))
 (let ((?x128 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x74 (* (- 1) k!00)))
 (let (($x144 (not (= (+ ?x74 ?x51 ?x128 ?x77) 0))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x122 (* (+ x (* (- 1) y)) u)))
 (let (($x115 (not (= (+ ?x74 ?x122 ?x45 ?x77) 0))))
 (let (($x92 (or $x115 $x144)))
 (let (($x113 (= (+ ?x74 (* x u) (* y v) ?x77) 0)))
 (and $x113 $x92))))))))))) :qid k!28))
 ))
 (let (($x131 (exists ((u Int) (v Int) (x Int) (y Int) )(! false :qid k!28))
 ))
 (let ((@x139 (elim-unused (= $x131 false))))
 (let ((?x232 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x77 (* (- 1) k!10)))
 (let ((?x128 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x74 (* (- 1) k!00)))
 (let (($x144 (not (= (+ ?x74 ?x51 ?x128 ?x77) 0))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x122 (* (+ x (* (- 1) y)) u)))
 (let (($x115 (not (= (+ ?x74 ?x122 ?x45 ?x77) 0))))
 (let (($x92 (or $x115 $x144)))
 (let (($x113 (= (+ ?x74 (* x u) (* y v) ?x77) 0)))
 (let (($x72 (and $x113 $x92)))
 (let (($x162 (= (+ (* u x) (* v y) ?x77 ?x74) 0)))
 (let (($x184 (not $x162)))
 (let (($x224 (and $x162 $x184)))
 (let ((@x217 (monotonicity (rewrite (= $x115 $x184)) (rewrite (= $x144 $x184)) (= $x92 (or $x184 $x184)))))
 (let ((@x227 (monotonicity (rewrite (= $x113 $x162)) (trans @x217 (rewrite (= (or $x184 $x184) $x184)) (= $x92 $x184)) (= $x72 $x224))))
 (trans @x227 (rewrite (= $x224 false)) (= $x72 false)))))))))))))))))))
 ))
 (let ((@x237 (trans (quant-intro (proof-bind ?x232) (= $x146 $x131)) @x139 (= $x146 false))))
 (let (($x149 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x85 (* (- 1) ?x38)))
 (let ((?x128 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x69 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x122 (* (+ x (* (- 1) y)) u)))
 (let (($x154 (or (not (= (+ ?x69 ?x122 ?x45 ?x85) 0)) (not (= (+ ?x69 ?x51 ?x128 ?x85) 0)))))
 (and (= (+ ?x69 (* x u) (* y v) ?x85) 0) $x154))))))))) :qid k!28))
 ))
 (let ((?x120 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x77 (* (- 1) k!10)))
 (let ((?x128 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x74 (* (- 1) k!00)))
 (let (($x144 (not (= (+ ?x74 ?x51 ?x128 ?x77) 0))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x122 (* (+ x (* (- 1) y)) u)))
 (let (($x115 (not (= (+ ?x74 ?x122 ?x45 ?x77) 0))))
 (let (($x92 (or $x115 $x144)))
 (let (($x113 (= (+ ?x74 (* x u) (* y v) ?x77) 0)))
 (let (($x72 (and $x113 $x92)))
 (let (($x153 (= (+ (* (- 1) (* u00 x00)) ?x51 ?x128 (* (- 1) (* v00 y00))) 0)))
 (let (($x101 (= (+ (* (- 1) (* u00 x00)) ?x122 ?x45 (* (- 1) (* v00 y00))) 0)))
 (let ((?x38 (* v00 y00)))
 (let ((?x85 (* (- 1) ?x38)))
 (let ((?x73 (* y v)))
 (let ((?x70 (* x u)))
 (let ((?x69 (* (- 1) (* u00 x00))))
 (let (($x100 (and (= (+ ?x69 ?x70 ?x73 ?x85) 0) (or (not $x101) (not $x153)))))
 (rewrite (= $x100 $x72))))))))))))))))))))))
 ))
 (let (($x60 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x32 (* (- 1) u00 x00)))
 (let (($x57 (not (= (- (+ ?x32 ?x51 (* v (- y x))) ?x38) 0))))
 (let (($x48 (= (- (+ ?x32 (* u (- x y)) (* (+ v u) y)) ?x38) 0)))
 (let (($x49 (not $x48)))
 (let (($x58 (or $x49 $x57)))
 (let (($x41 (= (- (+ ?x32 (* u x) (* v y)) ?x38) 0)))
 (and $x41 $x58))))))))) :qid k!28))
 ))
 (let ((?x155 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x85 (* (- 1) ?x38)))
 (let ((?x128 (* (+ y (* (- 1) x)) v)))
 (let ((?x51 (* (+ u v) x)))
 (let ((?x69 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x122 (* (+ x (* (- 1) y)) u)))
 (let (($x154 (or (not (= (+ ?x69 ?x122 ?x45 ?x85) 0)) (not (= (+ ?x69 ?x51 ?x128 ?x85) 0)))))
 (let (($x100 (and (= (+ ?x69 (* x u) (* y v) ?x85) 0) $x154)))
 (let (($x56 (= (- (+ (* (- 1) u00 x00) ?x51 (* v (- y x))) ?x38) 0)))
 (let (($x57 (not $x56)))
 (let (($x48 (= (- (+ (* (- 1) u00 x00) (* u (- x y)) ?x45) ?x38) 0)))
 (let (($x49 (not $x48)))
 (let (($x58 (or $x49 $x57)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x59 (and $x41 $x58)))
 (rewrite (= $x59 $x100)))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x108 (mp (mp @x61 (quant-intro (proof-bind ?x155) (= $x60 $x149)) $x149) (rewrite (= $x149 $x149)) $x149)))
 (mp (mp @x108 (quant-intro (proof-bind ?x120) (= $x149 $x146)) $x146) @x237 false))))))))))))))

(:eliminated-applications 2
 :max-memory              19.31
 :memory                  19.04
 :num-allocs              341331
 :num-checks              1
 :rlimit-count            463
 :time                    0.01
 :total-time              0.02)
