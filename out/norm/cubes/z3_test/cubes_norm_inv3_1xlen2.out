unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x727 (* (- 2) n!0)))
 (let ((?x721 (* 3 c!3)))
 (let ((?x948 (+ ?x721 ?x727 k!2 (* (- 1) (* n!0 k!2)))))
 (let (($x900 (<= ?x948 1)))
 (let (($x953 (= ?x948 1)))
 (let ((?x975 (* (- 18) (* c!3 c!3 m!1))))
 (let ((?x974 (* (- 18) (* c!3 c!3 k!2))))
 (let ((?x641 (+ c!3 k!2)))
 (let ((?x596 (+ 6 m!1)))
 (let ((?x594 (+ 1 n!0)))
 (let ((?x926 (* (- 1) (* ?x594 ?x594 ?x594 ?x596 ?x641 ?x641))))
 (let ((?x888 (* (- 18) (* k!2 k!2 k!2))))
 (let ((?x868 (* (- 3) (* c!3 c!3 m!1 m!1))))
 (let ((?x681 (* 18 (* c!3 m!1))))
 (let ((?x384 (* k!2 k!2)))
 (let ((?x581 (* 18 ?x384)))
 (let ((?x202 (* (- 2) (* ?x594 ?x594 ?x594 ?x594 ?x596 ?x641 ?x641))))
 (let ((?x172 (* 3 (* ?x594 ?x594 ?x594 ?x596 ?x641 ?x641 ?x641))))
 (let ((?x680 (* 18 (* c!3 k!2))))
 (let ((?x363 (+ ?x680 (* (- 1) (* ?x594 ?x594 ?x594 ?x594 ?x596 (+ m!1 k!2) ?x641 ?x641)) (* 18 (* m!1 k!2)) ?x172 ?x202 (* 3 (* c!3 m!1 m!1)) ?x581 (* (- 6) (* c!3 m!1 m!1 k!2)) (* ?x594 ?x594 ?x594 ?x596 (+ m!1 k!2) ?x641 ?x641) (* 8 (* c!3 n!0 m!1 m!1)) (* c!3 n!0 m!1 m!1 m!1) (* c!3 n!0 m!1 k!2 k!2) (* 12 (* n!0 k!2 k!2)) (* 6 (* c!3 n!0 k!2 k!2)) ?x681 (* 12 (* c!3 n!0 m!1)) (* 14 (* n!0 m!1 k!2 k!2)) (* (- 3) (* c!3 c!3 m!1 k!2)) (* 12 (* n!0 m!1 k!2)) (* 8 (* n!0 m!1 m!1 k!2)) (* 2 (* n!0 m!1 m!1 k!2 k!2)) (* 2 (* c!3 n!0 m!1 m!1 k!2)) (* (- 15) (* m!1 k!2 k!2)) (* (- 33) (* c!3 m!1 k!2)) (* 14 (* c!3 n!0 m!1 k!2)) (* n!0 m!1 k!2 k!2 k!2) (* 6 (* n!0 k!2 k!2 k!2)) (* 12 (* c!3 n!0 k!2)) (* (- 3) (* m!1 k!2 k!2 k!2)) ?x868 (* n!0 m!1 m!1 m!1 k!2) (* (- 3) (* m!1 m!1 k!2 k!2)) (* (- 6) (* c!3 m!1 k!2 k!2)) ?x888 ?x926 (* (- 36) (* c!3 k!2 k!2)) ?x974 ?x975 (* 3 (* m!1 m!1 k!2)))))
 (let (($x369 (= ?x363 0)))
 (let (($x252 (not $x369)))
 (let ((?x955 (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0)))))
 (let (($x1004 (= ?x955 (- 1))))
 (let ((?x294 (* (- 1) ?x384)))
 (let ((?x449 (* 5 k!2)))
 (let ((?x460 (* (- 9) n!0)))
 (let ((?x661 (* 18 c!3)))
 (let ((?x154 (* 9 (* c!3 n!0))))
 (let ((?x956 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x992 (= ?x956 (- 6))))
 (let (($x426 (and $x992 (= (+ ?x154 ?x661 ?x460 ?x449 ?x294) 4) $x953 $x1004 $x252)))
 (let ((?x946 (+ ?x581 (* (- 6) (* m!1 m!1 k!2)) (* ?x594 ?x594 ?x594 ?x596 (+ k!2 m!1) ?x641 ?x641) (* (- 6) (* m!1 m!1 c!3)) (* 6 (* k!2 k!2 k!2 n!0)) (* c!3 k!2 k!2 m!1 n!0) (* k!2 k!2 k!2 m!1 n!0) (* 2 (* c!3 k!2 m!1 m!1 n!0)) (* 2 (* k!2 k!2 m!1 m!1 n!0)) (* c!3 m!1 m!1 m!1 n!0) (* k!2 m!1 m!1 m!1 n!0) (* (- 21) (* c!3 k!2 m!1)) (* (- 3) (* k!2 k!2 m!1)) (* 9 (* c!3 m!1 m!1)) (* 9 (* k!2 m!1 m!1)) ?x680 ?x681 (* (- 6) (* m!1 k!2 k!2)) (* 18 (* k!2 m!1)) (* (- 1) (* ?x594 ?x594 ?x594 ?x594 ?x596 (+ k!2 m!1) ?x641 ?x641)) (* (- 6) (* k!2 k!2 c!3)) ?x202 (* (- 6) (* c!3 k!2 k!2 m!1)) (* (- 3) (* k!2 k!2 k!2 m!1)) (* (- 6) (* k!2 m!1 k!2)) (* (- 6) (* c!3 k!2 m!1 m!1)) (* (- 3) (* k!2 k!2 m!1 m!1)) (* (- 30) (* c!3 k!2 k!2)) ?x926 ?x888 ?x172 (* (- 3) (* c!3 c!3 k!2 m!1)) ?x868 (* (- 6) (* k!2 m!1 c!3)) (* 14 (* c!3 k!2 m!1 n!0)) (* 14 (* k!2 k!2 m!1 n!0)) (* 8 (* c!3 m!1 m!1 n!0)) (* 8 (* k!2 m!1 m!1 n!0)) (* (- 6) (* m!1 k!2 c!3)) (* 12 (* c!3 k!2 n!0)) (* 12 (* k!2 k!2 n!0)) (* 12 (* c!3 m!1 n!0)) (* 12 (* k!2 m!1 n!0)) (* 6 (* c!3 k!2 k!2 n!0)) ?x974 ?x975)))
 (let (($x981 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x661 ?x449 ?x460 ?x294 ?x154) 4) (= (+ ?x721 k!2 ?x727 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x946 0)))))
 (let (($x1051 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x803 (* 12 (* k m n))))
 (let ((?x798 (* 12 (* c m n))))
 (let ((?x801 (* 12 (* k k n))))
 (let ((?x796 (* 12 (* c k n))))
 (let ((?x794 (* (- 3) (* c c m m))))
 (let ((?x792 (* (- 3) (* c c k m))))
 (let ((?x69 (+ c k)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x530 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69)))
 (let ((?x774 (* 18 (* k m))))
 (let ((?x777 (* 18 (* c m))))
 (let ((?x772 (* 18 (* c k))))
 (let ((?x382 (* k m m m n)))
 (let ((?x380 (* c m m m n)))
 (let ((?x370 (* k k k m n)))
 (let ((?x368 (* c k k m n)))
 (let ((?x70 (+ k m)))
 (let ((?x187 (* ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)))
 (let ((?x49 (* k k)))
 (let ((?x766 (* 18 ?x49)))
 (let ((?x1082 (+ ?x766 (* (- 6) (* m m k)) ?x187 (* (- 6) (* m m c)) (* 6 (* k k k n)) ?x368 ?x370 (* 2 (* c k m m n)) (* 2 (* k k m m n)) ?x380 ?x382 (* (- 21) (* c k m)) (* (- 3) (* k k m)) (* 9 (* c m m)) (* 9 (* k m m)) ?x772 ?x777 (* (- 6) (* m k k)) ?x774 (* (- 1) (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)) (* (- 6) (* k k c)) (* (- 2) (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)) (* (- 6) (* c k k m)) (* (- 3) (* k k k m)) (* (- 6) (* k m k)) (* (- 6) (* c k m m)) (* (- 3) (* k k m m)) (* (- 30) (* c k k)) (* (- 1) (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)) (* (- 18) (* k k k)) (* 3 ?x530) ?x792 ?x794 (* (- 6) (* k m c)) (* 14 (* c k m n)) (* 14 (* k k m n)) (* 8 (* c m m n)) (* 8 (* k m m n)) (* (- 6) (* m k c)) ?x796 ?x801 ?x798 ?x803 (* 6 (* c k k n)) (* (- 18) (* c c k)) (* (- 18) (* c c m)))))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x215 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x211 (= ?x215 4)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (and $x127 $x211 $x263 $x301 (not (= ?x1082 0)))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x143 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x187 (* ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)))
 (let ((?x448 (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)))
 (let ((?x496 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)))
 (let ((?x573 (+ (* (- 1) (* ?x314 ?x311 ?x70 ?x70 ?x69)) (* (- 1) (* ?x311 ?x70 ?x69)) (* ?x311 ?x70 ?x70 ?x69) (* 3 (* ?x311 ?x70 ?x69 ?x69)) (* (- 2) (* ?x314 ?x311 ?x70 ?x69)) ?x496 (* 2 (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)) (* (- 3) (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69)) ?x448 (* (- 1) ?x187))))
 (let (($x572 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x361 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x712 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (and $x127 (= ?x712 (- 4)) $x361 $x572 (not (= ?x573 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x1053 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x803 (* 12 (* k m n))))
 (let ((?x798 (* 12 (* c m n))))
 (let ((?x801 (* 12 (* k k n))))
 (let ((?x796 (* 12 (* c k n))))
 (let ((?x794 (* (- 3) (* c c m m))))
 (let ((?x792 (* (- 3) (* c c k m))))
 (let ((?x69 (+ c k)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x530 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69)))
 (let ((?x774 (* 18 (* k m))))
 (let ((?x777 (* 18 (* c m))))
 (let ((?x772 (* 18 (* c k))))
 (let ((?x382 (* k m m m n)))
 (let ((?x380 (* c m m m n)))
 (let ((?x370 (* k k k m n)))
 (let ((?x368 (* c k k m n)))
 (let ((?x70 (+ k m)))
 (let ((?x187 (* ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)))
 (let ((?x49 (* k k)))
 (let ((?x766 (* 18 ?x49)))
 (let ((?x1082 (+ ?x766 (* (- 6) (* m m k)) ?x187 (* (- 6) (* m m c)) (* 6 (* k k k n)) ?x368 ?x370 (* 2 (* c k m m n)) (* 2 (* k k m m n)) ?x380 ?x382 (* (- 21) (* c k m)) (* (- 3) (* k k m)) (* 9 (* c m m)) (* 9 (* k m m)) ?x772 ?x777 (* (- 6) (* m k k)) ?x774 (* (- 1) (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)) (* (- 6) (* k k c)) (* (- 2) (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)) (* (- 6) (* c k k m)) (* (- 3) (* k k k m)) (* (- 6) (* k m k)) (* (- 6) (* c k m m)) (* (- 3) (* k k m m)) (* (- 30) (* c k k)) (* (- 1) (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)) (* (- 18) (* k k k)) (* 3 ?x530) ?x792 ?x794 (* (- 6) (* k m c)) (* 14 (* c k m n)) (* 14 (* k k m n)) (* 8 (* c m m n)) (* 8 (* k m m n)) (* (- 6) (* m k c)) ?x796 ?x801 ?x798 ?x803 (* 6 (* c k k n)) (* (- 18) (* c c k)) (* (- 18) (* c c m)))))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x215 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x211 (= ?x215 4)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (let (($x116 (and $x127 $x211 $x263 $x301 (not (= ?x1082 0)))))
 (let ((?x448 (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)))
 (let ((?x496 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)))
 (let ((?x573 (+ (* (- 1) (* ?x314 ?x311 ?x70 ?x70 ?x69)) (* (- 1) (* ?x311 ?x70 ?x69)) (* ?x311 ?x70 ?x70 ?x69) (* 3 (* ?x311 ?x70 ?x69 ?x69)) (* (- 2) (* ?x314 ?x311 ?x70 ?x69)) ?x496 (* 2 (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)) (* (- 3) ?x530) ?x448 (* (- 1) ?x187))))
 (let (($x572 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x361 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x712 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x748 (and $x127 (= ?x712 (- 4)) $x361 $x572 (not (= ?x573 0)))))
 (rewrite (= $x748 $x116)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x94 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x78 (+ (- (* (- 1) ?x69 ?x70 ?x70 ?x71 ?x72) (* ?x69 ?x70 ?x71)) (* ?x69 ?x70 ?x70 ?x71) (* 3 ?x69 ?x69 ?x70 ?x71))))
 (let ((?x83 (+ (- ?x78 (* 2 ?x69 ?x70 ?x71 ?x72)) (* ?x69 ?x69 ?x71 ?x72 ?x72 ?x72) (* 2 ?x69 ?x69 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x87 (+ (- ?x83 (* 3 ?x69 ?x69 ?x69 ?x71 ?x72 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let (($x92 (or (not (= (- ?x87 (* ?x69 ?x69 ?x70 ?x71 ?x72 ?x72 ?x72)) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x92)))))))))))))))) :qid k!34))
 ))
 (let ((?x741 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x311 (+ 6 m)))
 (let ((?x314 (+ 1 n)))
 (let ((?x187 (* ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)))
 (let ((?x448 (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x70 ?x69 ?x69)))
 (let ((?x496 (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)))
 (let ((?x573 (+ (* (- 1) (* ?x314 ?x311 ?x70 ?x70 ?x69)) (* (- 1) (* ?x311 ?x70 ?x69)) (* ?x311 ?x70 ?x70 ?x69) (* 3 (* ?x311 ?x70 ?x69 ?x69)) (* (- 2) (* ?x314 ?x311 ?x70 ?x69)) ?x496 (* 2 (* ?x314 ?x314 ?x314 ?x314 ?x311 ?x69 ?x69)) (* (- 3) (* ?x314 ?x314 ?x314 ?x311 ?x69 ?x69 ?x69)) ?x448 (* (- 1) ?x187))))
 (let (($x572 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x361 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x712 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x127 (= (+ m (* (- 6) n)) 6)))
 (let (($x748 (and $x127 (= ?x712 (- 4)) $x361 $x572 (not (= ?x573 0)))))
 (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x78 (+ (- (* (- 1) ?x69 ?x70 ?x70 ?x71 ?x72) (* ?x69 ?x70 ?x71)) (* ?x69 ?x70 ?x70 ?x71) (* 3 ?x69 ?x69 ?x70 ?x71))))
 (let ((?x83 (+ (- ?x78 (* 2 ?x69 ?x70 ?x71 ?x72)) (* ?x69 ?x69 ?x71 ?x72 ?x72 ?x72) (* 2 ?x69 ?x69 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x87 (+ (- ?x83 (* 3 ?x69 ?x69 ?x69 ?x71 ?x72 ?x72 ?x72)) (* ?x69 ?x69 ?x70 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let (($x92 (or (not (= (- ?x87 (* ?x69 ?x69 ?x70 ?x71 ?x72 ?x72 ?x72)) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x93 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x92)))
 (rewrite (= $x93 $x748))))))))))))))))))))))))))))))
 ))
 (let ((@x95 (asserted $x94)))
 (let ((@x574 (mp (mp @x95 (quant-intro (proof-bind ?x741) (= $x94 $x143)) $x143) (rewrite (= $x143 $x143)) $x143)))
 (let ((@x947 (mp~ (mp @x574 (quant-intro (proof-bind ?x1053) (= $x143 $x1051)) $x1051) (sk (~ $x1051 $x981)) $x981)))
 (let ((@x592 (mp @x947 (rewrite (= $x981 $x426)) $x426)))
 (let ((@x1003 (and-elim @x592 $x953)))
 (let ((@x593 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x953) $x900)) @x1003 $x900)))
 (let (($x899 (>= ?x948 1)))
 (let ((@x990 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x953) $x899)) @x1003 $x899)))
 (let (($x902 (<= ?x955 (- 1))))
 (let ((@x884 (and-elim @x592 $x1004)))
 (let ((@x871 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1004) $x902)) @x884 $x902)))
 (let (($x897 (>= ?x955 (- 1))))
 (let ((@x333 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1004) $x897)) @x884 $x897)))
 (let (($x676 (<= ?x956 (- 6))))
 (let ((@x685 (and-elim @x592 $x992)))
 (let ((@x957 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x992) $x676)) @x685 $x676)))
 (let (($x760 (>= ?x956 (- 6))))
 (let ((@x379 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x992) $x760)) @x685 $x760)))
 (let (($x994 (not (<= ?x363 0))))
 (let (($x903 (>= ?x363 0)))
 (let ((@x367 ((_ th-lemma arith) (hypothesis (not $x903)) @x333 @x871 @x379 @x957 @x379 @x957 @x333 @x871 @x333 @x871 @x990 @x593 @x379 @x957 @x333 @x871 @x990 @x593 false)))
 (let ((@x620 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x369 $x994 (not $x903))) (and-elim @x592 $x252) (or $x994 (not $x903)))))
 ((_ th-lemma arith) (unit-resolution @x620 (lemma @x367 $x903) $x994) @x333 @x871 @x379 @x957 @x379 @x957 @x333 @x871 @x333 @x871 @x990 @x593 @x379 @x957 @x333 @x871 @x990 @x593 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        27
 :arith-branch-var          3
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           16
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             577
 :arith-nonlinear-bounds    24
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             6
 :arith-pivots              10
 :arith-row-summations      14
 :arith-tableau-max-columns 75
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 11
 :del-clause                16
 :final-checks              12
 :max-memory                19.71
 :memory                    19.25
 :mk-bool-var               25
 :mk-clause                 16
 :num-allocs                548820
 :num-checks                1
 :propagations              12
 :rlimit-count              11725
 :time                      0.01
 :total-time                0.03)
