unsat
((set-logic NIA)
(proof
(let (($x55 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x47 (+ q 1)))
 (let ((?x48 (* ?x47 ?x47 ?x43 ?x43 ?x43 y00)))
 (let ((?x45 (* ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x46 (+ ?x44 ?x45)))
 (let ((?x49 (- ?x46 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x53))))))))))))))))) :qid k!29))
 ))
 (let (($x451 (= $x55 false)))
 (let (($x444 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x450 (elim-unused (= $x444 false))))
 (let (($x447 (= $x55 $x444)))
 (let ((?x517 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x47 (+ q 1)))
 (let ((?x48 (* ?x47 ?x47 ?x43 ?x43 ?x43 y00)))
 (let ((?x45 (* ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x46 (+ ?x44 ?x45)))
 (let ((?x49 (- ?x46 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x54 (and $x33 $x41 $x53)))
 (let (($x442 (= $x54 false)))
 (let (($x481 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x84 (= (+ (* (- 1) y00) y) 0)))
 (let (($x511 (and $x84 $x481 false)))
 (let (($x435 (= $x53 false)))
 (let ((@x434 (rewrite (= (or false) false))))
 (let (($x430 (or false)))
 (let (($x431 (= $x53 $x430)))
 (let (($x428 (= $x52 false)))
 (let ((@x427 (rewrite (= (not true) false))))
 (let (($x423 (not true)))
 (let (($x424 (= $x52 $x423)))
 (let (($x421 (= $x51 true)))
 (let ((@x420 (rewrite (= (= 0 0) true))))
 (let (($x416 (= 0 0)))
 (let (($x417 (= $x51 $x416)))
 (let ((?x60 (* (- 1) y00)))
 (let ((?x79 (+ r ?x60)))
 (let ((?x154 (+ 1 q)))
 (let ((?x475 (* y00 ?x154 ?x154 ?x79 ?x79 ?x79)))
 (let ((?x488 (* (- 1) ?x475)))
 (let ((?x462 (* y00 y00 ?x79 ?x79)))
 (let ((?x454 (* (- 1) (* y00 y00 ?x79 ?x79 ?x79))))
 (let ((?x494 (+ ?x454 ?x462 ?x488)))
 (let ((?x499 (* 0 ?x494)))
 (let ((@x81 (rewrite (= ?x43 ?x79))))
 (let ((@x156 (rewrite (= ?x47 ?x154))))
 (let ((@x159 (monotonicity @x156 @x156 @x81 @x81 @x81 (= ?x48 (* ?x154 ?x154 ?x79 ?x79 ?x79 y00)))))
 (let ((@x483 (trans @x159 (rewrite (= (* ?x154 ?x154 ?x79 ?x79 ?x79 y00) ?x475)) (= ?x48 ?x475))))
 (let ((@x487 (monotonicity (rewrite (= ?x46 (+ ?x454 ?x462))) @x483 (= ?x49 (- (+ ?x454 ?x462) ?x475)))))
 (let ((@x493 (trans @x487 (rewrite (= (- (+ ?x454 ?x462) ?x475) (+ (+ ?x454 ?x462) ?x488))) (= ?x49 (+ (+ ?x454 ?x462) ?x488)))))
 (let ((@x498 (trans @x493 (rewrite (= (+ (+ ?x454 ?x462) ?x488) ?x494)) (= ?x49 ?x494))))
 (let ((@x76 (trans (monotonicity (rewrite (= ?x30 ?x60)) (= ?x42 (+ ?x60 y00))) (rewrite (= (+ ?x60 y00) 0)) (= ?x42 0))))
 (let ((@x504 (trans (monotonicity @x76 @x498 (= ?x50 ?x499)) (rewrite (= ?x499 0)) $x51)))
 (let ((@x508 (trans (monotonicity (trans (monotonicity @x504 $x417) @x420 $x421) $x424) @x427 $x428)))
 (let ((@x513 (monotonicity (rewrite (= $x33 $x84)) (rewrite (= $x41 $x481)) (trans (monotonicity @x508 $x431) @x434 $x435) (= $x54 $x511))))
 (trans @x513 (rewrite (= $x511 false)) $x442)))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x56 (asserted $x55)))
 (mp @x56 (trans (quant-intro (proof-bind ?x517) $x447) @x450 $x451) false))))))))))

(:max-memory   3.37
 :memory       3.06
 :mk-bool-var  5
 :num-allocs   920597
 :rlimit-count 343
 :time         0.01
 :total-time   0.01)
