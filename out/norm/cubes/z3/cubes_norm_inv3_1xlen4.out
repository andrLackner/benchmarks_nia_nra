unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x711 (* (- 1) k!2)))
 (let ((?x702 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x711)))
 (let (($x353 (<= ?x702 (- 1))))
 (let (($x484 (= ?x702 (- 1))))
 (let ((?x785 (+ m!1 k!2)))
 (let ((?x876 (+ 6 m!1)))
 (let ((?x246 (+ 1 n!0)))
 (let ((?x906 (* m!1 m!1 n!0 n!0)))
 (let ((?x159 (* 2 (* m!1 n!0 n!0))))
 (let ((?x414 (* 3 (* m!1 n!0))))
 (let ((?x864 (* 3 (* ?x246 ?x246 ?x876 ?x785 ?x785 (+ k!2 c!3) (+ k!2 c!3)))))
 (let ((?x339 (+ (* n!0 n!0 k!2 k!2) (* (- 2) (* ?x246 ?x246 ?x246 ?x876 ?x785 ?x785 (+ k!2 c!3))) ?x864 (* ?x246 ?x246 ?x876 ?x785 ?x785 ?x785 (+ k!2 c!3)) (* 3 (* n!0 k!2)) (* (- 1) (* ?x246 ?x246 ?x246 ?x876 ?x785 ?x785 ?x785 (+ k!2 c!3))) (* (- 2) (* ?x246 ?x246 ?x246 ?x876 ?x876 ?x785 ?x785)) ?x414 ?x159 (* 2 (* m!1 n!0 n!0 k!2)) (* (- 1) (* ?x246 ?x246 ?x246 ?x876 ?x876 ?x785 ?x785 ?x785)) (* (- 1) (* ?x246 ?x246 ?x876 ?x785 ?x785 (+ k!2 c!3))) (* 3 (* ?x246 ?x246 ?x876 ?x876 ?x785 ?x785 (+ k!2 c!3))) (* (- 3) (* m!1 n!0 c!3)) (* (- 3) (* n!0 k!2 c!3)) (* 2 (* n!0 n!0 k!2)) (* (- 3) (* m!1 n!0 k!2)) (* (- 1) (* ?x246 ?x246 ?x876 ?x876 ?x785 ?x785)) (* (- 3) (* n!0 k!2 k!2)) ?x906 (* ?x246 ?x246 ?x876 ?x876 ?x785 ?x785 ?x785))))
 (let (($x880 (= ?x339 0)))
 (let (($x931 (not $x880)))
 (let ((?x301 (* n!0 k!2)))
 (let ((?x342 (+ ?x301 (* 2 n!0) ?x711 (* (- 3) c!3))))
 (let (($x883 (= ?x342 (- 1))))
 (let ((?x771 (* k!2 k!2)))
 (let ((?x911 (+ ?x771 (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x234 (= ?x911 (- 4))))
 (let ((?x587 (+ m!1 (* (- 6) n!0))))
 (let (($x866 (= ?x587 6)))
 (let (($x871 (and $x866 $x234 $x883 $x484 $x931)))
 (let ((?x386 (* (- 2) (* ?x246 ?x246 ?x246 ?x876 ?x876 (+ k!2 m!1) (+ k!2 m!1)))))
 (let ((?x323 (+ c!3 k!2)))
 (let ((?x770 (+ k!2 m!1)))
 (let ((?x419 (+ (* 3 (* k!2 n!0)) (* (- 2) (* ?x246 ?x246 ?x246 ?x876 ?x770 ?x770 ?x323)) (* (- 1) (* ?x246 ?x246 ?x246 ?x876 ?x770 ?x770 ?x770 ?x323)) (* (- 1) (* ?x246 ?x246 ?x876 ?x770 ?x770 ?x323)) (* ?x246 ?x246 ?x876 ?x770 ?x770 ?x770 ?x323) (* 3 (* ?x246 ?x246 ?x876 ?x876 ?x770 ?x770 ?x323)) ?x414 (* ?x246 ?x246 ?x876 ?x876 ?x770 ?x770 ?x770) ?x159 (* 2 (* k!2 n!0 n!0)) (* (- 3) (* k!2 m!1 n!0)) (* (- 3) (* c!3 m!1 n!0)) (* (- 3) (* k!2 k!2 n!0)) (* (- 3) (* c!3 k!2 n!0)) (* (- 1) (* ?x246 ?x246 ?x246 ?x876 ?x876 ?x770 ?x770 ?x770)) (* 3 (* ?x246 ?x246 ?x876 ?x770 ?x770 ?x323 ?x323)) (* (- 1) (* ?x246 ?x246 ?x876 ?x876 ?x770 ?x770)) (* k!2 k!2 n!0 n!0) (* 2 (* k!2 m!1 n!0 n!0)) ?x906 ?x386)))
 (let (($x561 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x511 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x771) (* 9 (* c!3 n!0)))))
 (let (($x417 (and $x866 (= ?x511 4) $x561 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x419 0)))))
 (let (($x546 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ k m)))
 (let ((?x335 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x772 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)))
 (let ((?x733 (* m m n n)))
 (let ((?x636 (* 2 (* k m n n))))
 (let ((?x728 (* k k n n)))
 (let ((?x845 (* (- 3) (* c k n))))
 (let ((?x844 (* (- 3) (* k k n))))
 (let ((?x847 (* (- 3) (* c m n))))
 (let ((?x389 (* 2 (* k n n))))
 (let ((?x387 (* 2 (* m n n))))
 (let ((?x373 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)))
 (let ((?x849 (* 3 (* m n))))
 (let ((?x75 (+ c k)))
 (let ((?x183 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x850 (* 3 ?x55)))
 (let ((?x928 (+ ?x850 (* (- 2) (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) ?x183 (* 3 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x75)) ?x849 ?x373 ?x387 ?x389 (* (- 3) (* k m n)) ?x847 ?x844 ?x845 (* (- 1) (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75 ?x75)) (* (- 1) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)) ?x728 ?x636 ?x733 (* (- 2) ?x772))))
 (let (($x313 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x275 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x223 (= (+ ?x40 ?x44 ?x225 ?x226 (* 9 (* c n))) 4)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (and $x139 $x223 $x275 $x313 (not (= ?x928 0))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x769 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x335 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x157 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)))
 (let ((?x150 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)))
 (let ((?x562 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)))
 (let ((?x701 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)))
 (let ((?x221 (+ (* ?x321 ?x68) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)) ?x701 (* (- 3) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75 ?x75)) (* (- 2) (* ?x321 ?x321 ?x68)) (* 3 (* ?x321 ?x68 ?x75)) (* (- 3) (* ?x68 ?x75)) ?x562 (* (- 1) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)) k m ?x150 (* (- 3) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x68 ?x68)) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) ?x157 (* 2 (* ?x321 ?x68 ?x68)) (* (- 1) (* ?x68 ?x68)))))
 (let (($x637 (not (= ?x221 0))))
 (let (($x756 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x508 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (and $x139 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x225 ?x226) 4) $x508 $x756 $x637))))))))))))))))))) :qid k!34))
 ))
 (let ((?x559 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ k m)))
 (let ((?x335 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x772 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)))
 (let ((?x733 (* m m n n)))
 (let ((?x636 (* 2 (* k m n n))))
 (let ((?x728 (* k k n n)))
 (let ((?x845 (* (- 3) (* c k n))))
 (let ((?x844 (* (- 3) (* k k n))))
 (let ((?x847 (* (- 3) (* c m n))))
 (let ((?x389 (* 2 (* k n n))))
 (let ((?x387 (* 2 (* m n n))))
 (let ((?x373 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)))
 (let ((?x849 (* 3 (* m n))))
 (let ((?x75 (+ c k)))
 (let ((?x183 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x850 (* 3 ?x55)))
 (let ((?x928 (+ ?x850 (* (- 2) (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) ?x183 (* 3 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x75)) ?x849 ?x373 ?x387 ?x389 (* (- 3) (* k m n)) ?x847 ?x844 ?x845 (* (- 1) (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75 ?x75)) (* (- 1) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)) ?x728 ?x636 ?x733 (* (- 2) ?x772))))
 (let (($x313 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x275 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x223 (= (+ ?x40 ?x44 ?x225 ?x226 (* 9 (* c n))) 4)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (let (($x739 (and $x139 $x223 $x275 $x313 (not (= ?x928 0)))))
 (let ((?x157 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)))
 (let ((?x150 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)))
 (let ((?x562 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)))
 (let ((?x701 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)))
 (let ((?x221 (+ (* ?x321 ?x68) (* 2 ?x772) ?x701 (* (- 3) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75 ?x75)) (* (- 2) (* ?x321 ?x321 ?x68)) (* 3 (* ?x321 ?x68 ?x75)) (* (- 3) (* ?x68 ?x75)) ?x562 (* (- 1) ?x373) (* (- 1) ?x183) k m ?x150 (* (- 3) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x68 ?x68)) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) ?x157 (* 2 (* ?x321 ?x68 ?x68)) (* (- 1) (* ?x68 ?x68)))))
 (let (($x637 (not (= ?x221 0))))
 (let (($x756 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x508 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x606 (and $x139 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x225 ?x226) 4) $x508 $x756 $x637)))
 (rewrite (= $x606 $x739)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x635 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x335 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x157 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)))
 (let ((?x150 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)))
 (let ((?x562 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)))
 (let ((?x701 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)))
 (let ((?x221 (+ (* ?x321 ?x68) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)) ?x701 (* (- 3) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75 ?x75)) (* (- 2) (* ?x321 ?x321 ?x68)) (* 3 (* ?x321 ?x68 ?x75)) (* (- 3) (* ?x68 ?x75)) ?x562 (* (- 1) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)) k m ?x150 (* (- 3) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x68 ?x68)) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) ?x157 (* 2 (* ?x321 ?x68 ?x68)) (* (- 1) (* ?x68 ?x68)))))
 (let (($x637 (not (= ?x221 0))))
 (let (($x756 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x431 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x615 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (and $x139 (= ?x615 (- 4)) $x431 $x756 $x637))))))))))))))))) :qid k!34))
 ))
 (let ((?x634 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x335 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x157 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)))
 (let ((?x150 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)))
 (let ((?x562 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)))
 (let ((?x701 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)))
 (let ((?x221 (+ (* ?x321 ?x68) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)) ?x701 (* (- 3) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75 ?x75)) (* (- 2) (* ?x321 ?x321 ?x68)) (* 3 (* ?x321 ?x68 ?x75)) (* (- 3) (* ?x68 ?x75)) ?x562 (* (- 1) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)) k m ?x150 (* (- 3) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x68 ?x68)) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) ?x157 (* 2 (* ?x321 ?x68 ?x68)) (* (- 1) (* ?x68 ?x68)))))
 (let (($x637 (not (= ?x221 0))))
 (let (($x756 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x508 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (let (($x606 (and $x139 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x225 ?x226) 4) $x508 $x756 $x637)))
 (let (($x431 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x615 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x773 (and $x139 (= ?x615 (- 4)) $x431 $x756 $x637)))
 (rewrite (= $x773 $x606))))))))))))))))))))))))))
 ))
 (let (($x106 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ k m)))
 (let ((?x100 (* ?x68 ?x68)))
 (let ((?x69 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x75 (+ c k)))
 (let ((?x74 (+ (* ?x68 ?x69) (* 2 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69 ?x69) (* ?x68 ?x68 ?x71 ?x71 ?x69 ?x69))))
 (let ((?x79 (- (- ?x74 (* 3 ?x75 ?x75 ?x68 ?x68 ?x71 ?x69 ?x69)) (* 2 ?x68 ?x69 ?x69))))
 (let ((?x85 (+ (- (+ ?x79 (* 3 ?x75 ?x68 ?x69)) (* 3 ?x75 ?x68)) (* ?x68 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69 ?x69))))
 (let ((?x89 (- (- ?x85 (* ?x68 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69)) (* ?x75 ?x68 ?x68 ?x68 ?x71 ?x69 ?x69))))
 (let ((?x94 (- (+ ?x89 k m (* ?x75 ?x68 ?x68 ?x68 ?x71 ?x69 ?x69 ?x69)) (* 3 ?x75 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69))))
 (let ((?x99 (+ (- ?x94 (* ?x68 ?x68 ?x69 ?x69)) (* 2 ?x75 ?x68 ?x68 ?x71 ?x69 ?x69 ?x69) (* ?x75 ?x68 ?x68 ?x71 ?x69 ?x69) (* 2 ?x68 ?x68 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x99 ?x100) 0)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x732 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x335 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x157 (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)))
 (let ((?x150 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)))
 (let ((?x562 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)))
 (let ((?x701 (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)))
 (let ((?x221 (+ (* ?x321 ?x68) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x335 ?x68 ?x68)) ?x701 (* (- 3) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x75 ?x75)) (* (- 2) (* ?x321 ?x321 ?x68)) (* 3 (* ?x321 ?x68 ?x75)) (* (- 3) (* ?x68 ?x75)) ?x562 (* (- 1) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x335 ?x68 ?x68 ?x68 ?x75)) k m ?x150 (* (- 3) (* ?x321 ?x321 ?x335 ?x335 ?x68 ?x68 ?x75)) (* (- 1) (* ?x321 ?x321 ?x68 ?x68)) (* 2 (* ?x321 ?x321 ?x321 ?x335 ?x68 ?x68 ?x75)) ?x157 (* 2 (* ?x321 ?x68 ?x68)) (* (- 1) (* ?x68 ?x68)))))
 (let (($x637 (not (= ?x221 0))))
 (let (($x756 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x431 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x615 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (let (($x773 (and $x139 (= ?x615 (- 4)) $x431 $x756 $x637)))
 (let ((?x100 (* ?x68 ?x68)))
 (let ((?x69 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x74 (+ (* ?x68 ?x69) (* 2 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69 ?x69) (* ?x68 ?x68 ?x71 ?x71 ?x69 ?x69))))
 (let ((?x79 (- (- ?x74 (* 3 ?x75 ?x75 ?x68 ?x68 ?x71 ?x69 ?x69)) (* 2 ?x68 ?x69 ?x69))))
 (let ((?x85 (+ (- (+ ?x79 (* 3 ?x75 ?x68 ?x69)) (* 3 ?x75 ?x68)) (* ?x68 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69 ?x69))))
 (let ((?x89 (- (- ?x85 (* ?x68 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69)) (* ?x75 ?x68 ?x68 ?x68 ?x71 ?x69 ?x69))))
 (let ((?x94 (- (+ ?x89 k m (* ?x75 ?x68 ?x68 ?x68 ?x71 ?x69 ?x69 ?x69)) (* 3 ?x75 ?x68 ?x68 ?x71 ?x71 ?x69 ?x69))))
 (let ((?x99 (+ (- ?x94 (* ?x68 ?x68 ?x69 ?x69)) (* 2 ?x75 ?x68 ?x68 ?x71 ?x69 ?x69 ?x69) (* ?x75 ?x68 ?x68 ?x71 ?x69 ?x69) (* 2 ?x68 ?x68 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x105 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x99 ?x100) 0))))))
 (rewrite (= $x105 $x773)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x107 (asserted $x106)))
 (let ((@x609 (mp (mp @x107 (quant-intro (proof-bind ?x732) (= $x106 $x635)) $x635) (rewrite (= $x635 $x635)) $x635)))
 (let ((@x297 (mp (mp @x609 (quant-intro (proof-bind ?x634) (= $x635 $x769)) $x769) (quant-intro (proof-bind ?x559) (= $x769 $x546)) $x546)))
 (let ((@x602 (mp (mp~ @x297 (sk (~ $x546 $x417)) $x417) (rewrite (= $x417 $x871)) $x871)))
 (let ((@x549 (and-elim @x602 $x484)))
 (let ((@x918 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x484) $x353)) @x549 $x353)))
 (let (($x505 (>= ?x702 (- 1))))
 (let ((@x764 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x484) $x505)) @x549 $x505)))
 (let (($x195 (<= ?x587 6)))
 (let ((@x899 (and-elim @x602 $x866)))
 (let ((@x408 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x866) $x195)) @x899 $x195)))
 (let (($x401 (>= ?x587 6)))
 (let ((@x129 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x866) $x401)) @x899 $x401)))
 (let (($x476 (<= ?x342 (- 1))))
 (let ((@x550 (and-elim @x602 $x883)))
 (let ((@x203 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x883) $x476)) @x550 $x476)))
 (let (($x364 (>= ?x342 (- 1))))
 (let ((@x720 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x883) $x364)) @x550 $x364)))
 (let (($x199 (<= ?x911 (- 4))))
 (let ((@x553 (and-elim @x602 $x234)))
 (let ((@x607 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x234) $x199)) @x553 $x199)))
 (let (($x588 (>= ?x911 (- 4))))
 (let ((@x750 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x234) $x588)) @x553 $x588)))
 (let (($x177 (not (<= ?x339 0))))
 (let (($x687 (>= ?x339 0)))
 (let ((@x618 ((_ th-lemma arith) (hypothesis (not $x687)) @x720 @x203 @x750 @x607 @x750 @x607 @x720 @x203 @x750 @x607 @x720 @x203 @x764 @x918 @x720 @x203 @x750 @x607 @x129 @x408 @x129 @x408 @x750 @x607 @x129 @x408 @x720 @x203 false)))
 (let ((@x365 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x880 $x177 (not $x687))) (and-elim @x602 $x931) (or $x177 (not $x687)))))
 ((_ th-lemma arith) (unit-resolution @x365 (lemma @x618 $x687) $x177) @x764 @x918 @x720 @x203 @x764 @x918 @x750 @x607 @x720 @x203 @x764 @x918 @x720 @x203 @x764 @x918 @x129 @x408 @x129 @x408 @x129 @x408 @x764 @x918 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           8
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             366
 :arith-nonlinear-bounds    19
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             5
 :arith-patches_succ        1
 :arith-pivots              15
 :arith-row-summations      38
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 9
 :del-clause                16
 :final-checks              10
 :max-memory                3.71
 :memory                    3.22
 :mk-bool-var               29
 :mk-clause                 16
 :num-allocs                1389395
 :num-checks                1
 :propagations              12
 :rlimit-count              11807
 :time                      0.01
 :total-time                0.02)
