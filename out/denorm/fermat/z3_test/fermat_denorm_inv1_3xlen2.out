unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x1423 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x337 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) (* 2 v!0) (* (- 4) r!2) ?x1423 (* (- 1) (* v!0 v!0)))))
 (let (($x271 (>= ?x337 0)))
 (let (($x332 (= ?x337 0)))
 (let ((?x1433 (* v!0 v!0)))
 (let ((?x1431 (* (- 1) ?x1423)))
 (let ((?x1191 (* 4 r!2)))
 (let ((?x1428 (* (- 2) v!0)))
 (let ((?x652 (* 2 u!1)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x139 (+ ?x112 ?x128 ?x41 ?x46 ?x204 ?x652 ?x1428 ?x1191 ?x1431 ?x1433)))
 (let ((?x721 (* 4 ?x1423)))
 (let ((?x717 (* 3 u!1)))
 (let ((?x716 (* u!1 u!1 u!1)))
 (let ((?x334 (* u!1 u!1 r!2)))
 (let ((?x218 (* u!1 r!2)))
 (let ((?x1043 (* 4 ?x218)))
 (let ((?x713 (* (- 2) ?x1423)))
 (let ((?x967 (* u!1 v!0 v!0 r!2)))
 (let ((?x291 (* (- 1) (* u!1 r!2 r!2))))
 (let ((?x719 (* (- 1) ?x716)))
 (let ((?x615 (* u!1 u!1 v!0 v!0)))
 (let ((?x720 (* (- 2) (* r!2 r!2))))
 (let ((?x171 (* u!1 v!0 v!0)))
 (let ((?x580 (* 2 ?x171)))
 (let ((?x769 (+ ?x580 (* (- 4) ?x218) (* (- 2) ?x334) ?x720 ?x615 ?x719 ?x291 (* 2 (* v!0 v!0 r!2)) ?x967 ?x713)))
 (let ((?x435 (* (- 1) (* v!0 v!0 v!0))))
 (let ((?x630 (* (- 8) (* u!1 u!1 u!1 v!0 v!0))))
 (let ((?x126 (* (- 1) (* u!1 u!1 u!1 v!0 v!0 r!2 r!2 r!2))))
 (let ((?x395 (* (- 1) (* u!1 u!1 u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x167 (* (- 12) (* u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x166 (* (- 6) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x426 (+ ?x166 ?x167 ?x395 ?x126 (* (- 12) (* u!1 v!0 v!0 r!2 r!2 r!2)) ?x630 (* (- 18) (* u!1 u!1 u!1 v!0 v!0 r!2 r!2)) (* (- 6) (* u!1 u!1 v!0 v!0 r!2 r!2 r!2)) (* (- 36) (* u!1 u!1 v!0 v!0 r!2 r!2)) (* (- 36) (* u!1 u!1 u!1 v!0 v!0 r!2)) (* (- 18) (* u!1 u!1 u!1 u!1 v!0 v!0 r!2)) ?x435 (* (- 24) (* u!1 u!1 v!0 v!0 r!2)) (* (- 3) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0 r!2)) (* (- 8) (* v!0 v!0 r!2 r!2 r!2)) (* (- 3) (* u!1 u!1 u!1 u!1 v!0 v!0 r!2 r!2)) (* (- 24) (* u!1 v!0 v!0 r!2 r!2)))))
 (let ((?x742 (* ?x426 ?x769 (+ (- 2) ?x1043 ?x334 ?x716 ?x717 ?x1191 ?x721) ?x139)))
 (let (($x979 (= ?x742 0)))
 (let (($x216 (not $x979)))
 (let ((?x606 (* (- 1) (* u!1 v!0 v!0 v!0))))
 (let ((?x137 (* (- 4) (* u!1 v!0))))
 (let ((?x1343 (+ ?x137 (* (- 5) ?x171) ?x606 ?x1043 ?x291 ?x967 (* 6 (* u!1 v!0 r!2)))))
 (let ((?x767 (* (- 6) ?x1433)))
 (let ((?x687 (* (- 12) v!0)))
 (let ((?x1147 (* 4 (* u!1 u!1 u!1 v!0 v!0 v!0 v!0))))
 (let ((?x706 (* 4 (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x348 (* u!1 u!1 u!1 v!0 v!0 v!0 v!0 v!0)))
 (let ((?x1198 (+ (- 8) ?x126 (* 3 (* u!1 u!1 u!1 v!0 v!0 v!0 r!2 r!2)) (* 12 (* u!1 u!1 u!1 v!0 v!0 r!2 r!2)) (* (- 12) (* u!1 u!1 u!1 v!0 v!0 v!0 r!2)) ?x348 (* (- 12) (* u!1 u!1 u!1 v!0 v!0 r!2)) (* (- 3) (* u!1 u!1 u!1 v!0 v!0 v!0 v!0 r!2)) (* (- 4) (* u!1 u!1 u!1 v!0 r!2 r!2 r!2)) ?x706 ?x435 ?x1147 ?x687 ?x767 (* 12 (* u!1 u!1 u!1 v!0 r!2 r!2)) (* (- 4) (* u!1 u!1 u!1 r!2 r!2 r!2)))))
 (let ((?x1470 (* (+ (* (- 1) (* u!1 u!1 v!0)) ?x334 (* (- 1) u!1)) ?x1198 ?x1343 ?x139)))
 (let (($x777 (= ?x1470 0)))
 (let (($x762 (or (not $x777) $x216)))
 (let (($x1150 (and $x332 $x762)))
 (let ((?x1104 (+ ?x1191 ?x652 ?x1428 ?x112 ?x128 ?x41 ?x1431 ?x1433 ?x46 ?x204)))
 (let ((?x794 (* r!2 u!1)))
 (let ((?x135 (* 4 ?x794)))
 (let ((?x125 (* r!2 u!1 u!1)))
 (let ((?x173 (* (- 1) (* r!2 r!2 u!1))))
 (let ((?x656 (* r!2 u!1 v!0 v!0)))
 (let ((?x722 (+ ?x713 (* (- 2) ?x125) ?x656 (* (- 4) ?x794) ?x580 ?x173 ?x719 ?x615 (* 2 (* r!2 v!0 v!0)) ?x720)))
 (let ((?x603 (* (- 1) (* r!2 r!2 r!2 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x593 (+ ?x435 (* (- 36) (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 24) (* r!2 r!2 u!1 v!0 v!0)) (* (- 18) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)) ?x603 (* (- 3) (* r!2 r!2 u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 3) (* r!2 u!1 u!1 u!1 u!1 u!1 v!0 v!0)) ?x395 (* (- 8) (* r!2 r!2 r!2 v!0 v!0)) ?x166 ?x167 ?x630 (* (- 24) (* r!2 u!1 u!1 v!0 v!0)) (* (- 12) (* r!2 r!2 r!2 u!1 v!0 v!0)) (* (- 6) (* r!2 r!2 r!2 u!1 u!1 v!0 v!0)) (* (- 36) (* r!2 r!2 u!1 u!1 v!0 v!0)) (* (- 18) (* r!2 u!1 u!1 u!1 u!1 v!0 v!0)))))
 (let (($x728 (= (* ?x593 ?x722 (+ (- 2) ?x1191 ?x717 ?x721 ?x125 ?x135 ?x716) ?x1104) 0)))
 (let ((?x176 (+ (* 2 (* v!0 (* (- 1) v!0) u!1)) ?x656 ?x135 ?x137 (* 6 (* r!2 u!1 v!0)) (* (- 3) ?x171) ?x606 ?x173)))
 (let ((?x133 (+ (- 8) ?x687 ?x767 ?x435 (* (- 4) (* r!2 r!2 r!2 u!1 u!1 u!1 v!0)) ?x348 (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0)) ?x1147 (* 12 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 12) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) ?x706 ?x603 (* 3 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 3) (* r!2 u!1 u!1 u!1 v!0 v!0 v!0 v!0)) (* 12 (* r!2 r!2 u!1 u!1 u!1 v!0)) (* (- 4) (* r!2 r!2 r!2 u!1 u!1 u!1)))))
 (let ((?x638 (* (+ (* (- 1) u!1) ?x125 (* (- 1) (* u!1 u!1 v!0))) ?x133 ?x176 ?x1104)))
 (let (($x595 (and (= ?x1104 0) (or (not (= ?x638 0)) (not $x728)))))
 (let (($x1110 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x701 (* u u u)))
 (let ((?x377 (* r u)))
 (let ((?x378 (* 4 ?x377)))
 (let ((?x333 (* r u u)))
 (let ((?x727 (+ (- 2) ?x28 (* 3 u) (* 4 ?x43) ?x333 ?x378 ?x701)))
 (let ((?x479 (* (- 1) (* r r u))))
 (let ((?x370 (* r u v v)))
 (let ((?x820 (+ (* (- 2) ?x43) (* (- 2) ?x333) ?x370 (* (- 4) ?x377) (* 2 (* u v v)) ?x479 (* (- 1) ?x701) (* u u v v) (* 2 (* r v v)) (* (- 2) (* r r)))))
 (let ((?x962 (* (- 1) (* u u u u u u v v))))
 (let ((?x556 (* (- 1) (* r r r u u u v v))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x1526 (+ ?x626 (* (- 36) (* r u u u v v)) (* (- 24) (* r r u v v)) (* (- 18) (* r r u u u v v)) ?x556 (* (- 3) (* r r u u u u v v)) (* (- 3) (* r u u u u u v v)) ?x962 (* (- 8) (* r r r v v)) (* (- 6) (* u u u u u v v)) (* (- 12) (* u u u u v v)) (* (- 8) (* u u u v v)) (* (- 24) (* r u u v v)) (* (- 12) (* r r r u v v)) (* (- 6) (* r r r u u v v)) (* (- 36) (* r r u u v v)) (* (- 18) (* r u u u u v v)))))
 (let ((?x412 (* (- 1) (* u v v v))))
 (let ((?x492 (* 6 (* r u v))))
 (let ((?x388 (* (- 4) (* u v))))
 (let ((?x1038 (+ (* 2 (* v (* (- 1) v) u)) ?x370 ?x378 ?x388 ?x492 (* (- 3) (* u v v)) ?x412 ?x479)))
 (let ((?x637 (* (- 6) ?x45)))
 (let ((?x646 (* (- 12) v)))
 (let ((?x373 (+ (- 8) ?x646 ?x637 ?x626 (* (- 4) (* r r r u u u v)) (* u u u v v v v v) (* (- 12) (* r u u u v v)) (* 4 (* u u u v v v v)) (* 12 (* r r u u u v v)) (* (- 12) (* r u u u v v v)) (* 4 (* u u u v v v)) ?x556 (* 3 (* r r u u u v v v)) (* (- 3) (* r u u u v v v v)) (* 12 (* r r u u u v)) (* (- 4) (* r r r u u u)))))
 (let ((?x350 (* (- 1) u)))
 (let ((?x356 (+ ?x350 ?x333 (* (- 1) (* u u v)))))
 (let (($x1663 (or (not (= (* ?x356 ?x373 ?x1038 ?x210) 0)) (not (= (* ?x1526 ?x820 ?x727 ?x210) 0)))))
 (let (($x215 (= ?x210 0)))
 (and $x215 $x1663)))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x281 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x344 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x350 (* (- 1) u)))
 (let ((?x625 (+ (* (+ 2 u) (+ r u) v v) (* (- 1) (* (+ 2 u) (+ r u) (+ r u))))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x78 (+ r u)))
 (let ((?x449 (+ 2 u)))
 (let ((?x654 (* (+ (* (- 1) (* ?x449 ?x449 ?x449 ?x78 ?x78 ?x78 v v)) ?x626) ?x625 (+ (- 2) (* ?x449 ?x449 ?x78) ?x350) ?x344)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x795 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x417 (+ (* (+ 2 v) (+ 2 v) (+ r (* (- 1) v)) u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x109 (* (- 1) v)))
 (let ((?x248 (+ r ?x109)))
 (let ((?x440 (+ 2 v)))
 (let ((?x674 (+ (* (- 1) (* ?x440 ?x440 ?x248 ?x248 ?x248 u u u)) (* (- 1) (* ?x440 ?x440 ?x440)))))
 (let (($x661 (or (not (= (* (+ (* ?x248 u u) ?x350) ?x674 ?x417 ?x795) 0)) (not (= ?x654 0)))))
 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) $x661)))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1060 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x210 (+ ?x28 ?x36 ?x158 ?x112 ?x128 ?x41 ?x182 ?x45 ?x46 ?x204)))
 (let ((?x701 (* u u u)))
 (let ((?x377 (* r u)))
 (let ((?x378 (* 4 ?x377)))
 (let ((?x333 (* r u u)))
 (let ((?x727 (+ (- 2) ?x28 (* 3 u) (* 4 ?x43) ?x333 ?x378 ?x701)))
 (let ((?x479 (* (- 1) (* r r u))))
 (let ((?x370 (* r u v v)))
 (let ((?x820 (+ (* (- 2) ?x43) (* (- 2) ?x333) ?x370 (* (- 4) ?x377) (* 2 (* u v v)) ?x479 (* (- 1) ?x701) (* u u v v) (* 2 (* r v v)) (* (- 2) (* r r)))))
 (let ((?x962 (* (- 1) (* u u u u u u v v))))
 (let ((?x556 (* (- 1) (* r r r u u u v v))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x1526 (+ ?x626 (* (- 36) (* r u u u v v)) (* (- 24) (* r r u v v)) (* (- 18) (* r r u u u v v)) ?x556 (* (- 3) (* r r u u u u v v)) (* (- 3) (* r u u u u u v v)) ?x962 (* (- 8) (* r r r v v)) (* (- 6) (* u u u u u v v)) (* (- 12) (* u u u u v v)) (* (- 8) (* u u u v v)) (* (- 24) (* r u u v v)) (* (- 12) (* r r r u v v)) (* (- 6) (* r r r u u v v)) (* (- 36) (* r r u u v v)) (* (- 18) (* r u u u u v v)))))
 (let ((?x412 (* (- 1) (* u v v v))))
 (let ((?x492 (* 6 (* r u v))))
 (let ((?x388 (* (- 4) (* u v))))
 (let ((?x1038 (+ (* 2 (* v (* (- 1) v) u)) ?x370 ?x378 ?x388 ?x492 (* (- 3) (* u v v)) ?x412 ?x479)))
 (let ((?x637 (* (- 6) ?x45)))
 (let ((?x646 (* (- 12) v)))
 (let ((?x373 (+ (- 8) ?x646 ?x637 ?x626 (* (- 4) (* r r r u u u v)) (* u u u v v v v v) (* (- 12) (* r u u u v v)) (* 4 (* u u u v v v v)) (* 12 (* r r u u u v v)) (* (- 12) (* r u u u v v v)) (* 4 (* u u u v v v)) ?x556 (* 3 (* r r u u u v v v)) (* (- 3) (* r u u u v v v v)) (* 12 (* r r u u u v)) (* (- 4) (* r r r u u u)))))
 (let ((?x350 (* (- 1) u)))
 (let ((?x356 (+ ?x350 ?x333 (* (- 1) (* u u v)))))
 (let (($x1663 (or (not (= (* ?x356 ?x373 ?x1038 ?x210) 0)) (not (= (* ?x1526 ?x820 ?x727 ?x210) 0)))))
 (let (($x215 (= ?x210 0)))
 (let (($x1683 (and $x215 $x1663)))
 (let ((?x344 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x625 (+ (* (+ 2 u) (+ r u) v v) (* (- 1) (* (+ 2 u) (+ r u) (+ r u))))))
 (let ((?x78 (+ r u)))
 (let ((?x449 (+ 2 u)))
 (let ((?x654 (* (+ (* (- 1) (* ?x449 ?x449 ?x449 ?x78 ?x78 ?x78 v v)) ?x626) ?x625 (+ (- 2) (* ?x449 ?x449 ?x78) ?x350) ?x344)))
 (let ((?x795 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x417 (+ (* (+ 2 v) (+ 2 v) (+ r (* (- 1) v)) u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x109 (* (- 1) v)))
 (let ((?x248 (+ r ?x109)))
 (let ((?x440 (+ 2 v)))
 (let ((?x674 (+ (* (- 1) (* ?x440 ?x440 ?x248 ?x248 ?x248 u u u)) (* (- 1) (* ?x440 ?x440 ?x440)))))
 (let (($x661 (or (not (= (* (+ (* ?x248 u u) ?x350) ?x674 ?x417 ?x795) 0)) (not (= ?x654 0)))))
 (let (($x755 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) $x661)))
 (rewrite (= $x755 $x1683))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((r Int) (u Int) (v Int) )(! (let ((?x97 (* v v v)))
 (let ((?x82 (+ u 2)))
 (let ((?x78 (+ r u)))
 (let ((?x71 (- 1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x84 (+ (- (- (* 4 ?x78) (* 4 r00)) (* 2 u00)) (* 2 ?x82))))
 (let ((?x99 (* (- (+ (- (+ (- ?x84 ?x38) ?x41) (* ?x82 ?x82)) ?x45 ?x46) ?x48) (- (* ?x78 ?x82 ?x82) ?x82) (- (* ?x78 ?x82 v v) (* ?x78 ?x78 ?x82)) (- (* ?x71 ?x78 ?x78 ?x78 ?x82 ?x82 ?x82 v v) ?x97))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x74 (- (* ?x71 ?x52 ?x52 ?x52 u u u ?x57 ?x57) (* ?x57 ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x75 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- (* ?x52 u u) u) (- (* ?x52 u ?x57 ?x57) (* ?x52 ?x52 u)) ?x74)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x75 0)) (not (= ?x99 0))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x246 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x204 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x158 (* (- 2) v)))
 (let ((?x128 (* (- 2) u00)))
 (let ((?x112 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x344 (+ 4 ?x28 (* 6 u) ?x112 ?x128 ?x158 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x204)))
 (let ((?x350 (* (- 1) u)))
 (let ((?x625 (+ (* (+ 2 u) (+ r u) v v) (* (- 1) (* (+ 2 u) (+ r u) (+ r u))))))
 (let ((?x97 (* v v v)))
 (let ((?x626 (* (- 1) ?x97)))
 (let ((?x78 (+ r u)))
 (let ((?x449 (+ 2 u)))
 (let ((?x654 (* (+ (* (- 1) (* ?x449 ?x449 ?x449 ?x78 ?x78 ?x78 v v)) ?x626) ?x625 (+ (- 2) (* ?x449 ?x449 ?x78) ?x350) ?x344)))
 (let ((?x43 (* u u)))
 (let ((?x182 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x795 (+ (- 4) ?x28 (* (- 6) v) ?x112 ?x128 ?x36 ?x41 ?x182 (* (+ 2 v) (+ 2 v)) ?x46 ?x204)))
 (let ((?x417 (+ (* (+ 2 v) (+ 2 v) (+ r (* (- 1) v)) u) (* (- 1) (* (+ r (* (- 1) v)) (+ r (* (- 1) v)) u)))))
 (let ((?x109 (* (- 1) v)))
 (let ((?x248 (+ r ?x109)))
 (let ((?x440 (+ 2 v)))
 (let ((?x674 (+ (* (- 1) (* ?x440 ?x440 ?x248 ?x248 ?x248 u u u)) (* (- 1) (* ?x440 ?x440 ?x440)))))
 (let (($x661 (or (not (= (* (+ (* ?x248 u u) ?x350) ?x674 ?x417 ?x795) 0)) (not (= ?x654 0)))))
 (let (($x755 (and (= (+ ?x28 ?x112 ?x128 ?x36 ?x158 ?x41 ?x182 ?x45 ?x46 ?x204) 0) $x661)))
 (let ((?x82 (+ u 2)))
 (let ((?x71 (- 1)))
 (let ((?x38 (* 2 v)))
 (let ((?x84 (+ (- (- (* 4 ?x78) (* 4 r00)) (* 2 u00)) (* 2 ?x82))))
 (let ((?x99 (* (- (+ (- (+ (- ?x84 ?x38) ?x41) (* ?x82 ?x82)) ?x45 ?x46) ?x48) (- (* ?x78 ?x82 ?x82) ?x82) (- (* ?x78 ?x82 v v) (* ?x78 ?x78 ?x82)) (- (* ?x71 ?x78 ?x78 ?x78 ?x82 ?x82 ?x82 v v) ?x97))))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x74 (- (* ?x71 ?x52 ?x52 ?x52 u u u ?x57 ?x57) (* ?x57 ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x75 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) (- (* ?x52 u u) u) (- (* ?x52 u ?x57 ?x57) (* ?x52 ?x52 u)) ?x74)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x103 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x75 0)) (not (= ?x99 0))))))
 (rewrite (= $x103 $x755)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x822 (mp (mp @x105 (quant-intro (proof-bind ?x246) (= $x104 $x281)) $x281) (rewrite (= $x281 $x281)) $x281)))
 (let ((@x731 (mp~ (mp @x822 (quant-intro (proof-bind ?x1060) (= $x281 $x1110)) $x1110) (sk (~ $x1110 $x595)) $x595)))
 (let ((@x760 (mp @x731 (rewrite (= $x595 $x1150)) $x1150)))
 (let ((@x977 (and-elim @x760 $x332)))
 (let ((@x1049 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x271)) @x977 $x271)))
 (let (($x292 (<= ?x337 0)))
 (let ((@x1492 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x292)) @x977 $x292)))
 (let (($x640 (not (<= ?x742 0))))
 (let (($x597 (>= ?x742 0)))
 (let (($x1052 (>= ?x1470 0)))
 (let (($x1050 (<= ?x1470 0)))
 (let ((@x743 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x777 (not $x1050) (not $x1052))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1050)) @x1492 @x1049 false) $x1050) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1052)) @x1492 @x1049 false) $x1052) $x777)))
 (let ((@x1291 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x979 $x640 (not $x597))) (unit-resolution (and-elim @x760 $x762) @x743 $x216) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x597)) @x1492 @x1049 false) $x597) $x640)))
 ((_ th-lemma arith farkas 1 1 1) @x1291 @x1492 @x1049 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        57
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             448
 :arith-nonlinear-bounds    40
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 75
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.79
 :memory                    19.28
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                563018
 :num-checks                1
 :propagations              14
 :rlimit-count              5981
 :time                      0.01
 :total-time                0.02)
