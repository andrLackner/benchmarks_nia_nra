unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x209 (+ m!1 (* (- 6) n!0))))
 (let (($x592 (<= ?x209 6)))
 (let (($x274 (= ?x209 6)))
 (let ((?x269 (+ c!3 k!2)))
 (let ((?x229 (+ m!1 k!2)))
 (let ((?x271 (+ 6 m!1)))
 (let ((?x114 (+ 1 n!0)))
 (let ((?x575 (* 12 (* c!3 c!3 k!2 n!0))))
 (let ((?x210 (* 12 (* c!3 k!2 k!2 n!0 n!0))))
 (let ((?x280 (* 6 (* c!3 c!3 k!2 n!0 n!0))))
 (let ((?x267 (* 6 (* k!2 k!2 k!2 n!0 n!0))))
 (let ((?x571 (* 6 (* c!3 c!3 k!2))))
 (let ((?x142 (* 12 (* k!2 k!2 k!2 n!0))))
 (let ((?x286 (* 12 (* c!3 k!2 k!2))))
 (let ((?x162 (* 24 (* c!3 k!2 k!2 n!0))))
 (let ((?x282 (* 6 (* k!2 k!2 k!2))))
 (let ((?x556 (+ ?x282 ?x162 ?x286 ?x142 (* 6 (* m!1 c!3 c!3)) ?x571 ?x267 ?x280 ?x210 (* 6 (* ?x114 ?x114 ?x114 ?x271 ?x229 ?x229 ?x269 ?x269 ?x269)) ?x575 (* 12 (* m!1 k!2 k!2 n!0)) (* 6 (* m!1 k!2 k!2)) (* 6 (* ?x114 ?x114 ?x114 ?x114 ?x271 ?x229 ?x229 ?x269 ?x269 ?x269)) (* (- 1) (* ?x114 ?x114 ?x114 ?x271 ?x271 ?x229 ?x229 ?x269 ?x269 ?x269)) (* 24 (* m!1 c!3 k!2 n!0)) (* 12 (* m!1 c!3 k!2)) (* 12 (* m!1 c!3 c!3 n!0)) (* 6 (* m!1 c!3 c!3 n!0 n!0)) (* 6 (* ?x114 ?x114 ?x114 ?x229 ?x269 ?x269)) (* (- 1) (* ?x114 ?x114 ?x271 ?x229 ?x269 ?x269)) (* 6 (* m!1 k!2 k!2 n!0 n!0)) (* 12 (* m!1 c!3 k!2 n!0 n!0)))))
 (let (($x615 (= ?x556 0)))
 (let (($x652 (not $x615)))
 (let ((?x223 (* (- 1) k!2)))
 (let ((?x115 (+ (* 3 (* n!0 n!0)) ?x223 (* 3 n!0))))
 (let (($x186 (= ?x115 (- 1))))
 (let ((?x154 (* k!2 n!0)))
 (let ((?x237 (+ ?x154 (* (- 3) c!3) ?x223 (* 2 n!0))))
 (let (($x160 (= ?x237 (- 1))))
 (let ((?x89 (* k!2 k!2)))
 (let ((?x169 (+ ?x89 (* (- 9) (* c!3 n!0)) (* (- 18) c!3) (* (- 5) k!2) (* 9 n!0))))
 (let (($x199 (= ?x169 (- 4))))
 (let (($x617 (and $x274 $x199 $x160 $x186 $x652)))
 (let ((?x266 (+ k!2 m!1)))
 (let ((?x131 (+ ?x286 ?x162 (* 6 (* ?x114 ?x114 ?x114 ?x271 ?x266 ?x266 ?x269 ?x269 ?x269)) (* 6 (* c!3 c!3 m!1)) (* 12 (* c!3 c!3 m!1 n!0)) ?x142 (* 12 (* c!3 k!2 m!1)) ?x282 (* 24 (* c!3 k!2 m!1 n!0)) ?x571 ?x575 (* 12 (* k!2 k!2 m!1 n!0)) (* 6 (* k!2 k!2 m!1)) (* 6 (* ?x114 ?x114 ?x114 ?x114 ?x271 ?x266 ?x266 ?x269 ?x269 ?x269)) (* (- 1) (* ?x114 ?x114 ?x114 ?x271 ?x271 ?x266 ?x266 ?x269 ?x269 ?x269)) ?x280 ?x210 ?x267 (* 6 (* c!3 c!3 m!1 n!0 n!0)) (* 12 (* c!3 k!2 m!1 n!0 n!0)) (* 6 (* k!2 k!2 m!1 n!0 n!0)) (* (- 1) (* ?x114 ?x114 ?x271 ?x266 ?x269 ?x269)) (* 6 (* ?x114 ?x114 ?x114 ?x266 ?x269 ?x269)))))
 (let ((?x146 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x89) (* 9 (* c!3 n!0)))))
 (let (($x133 (and $x274 (= ?x146 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x154)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x131 0)))))
 (let (($x181 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x552 (* 6 (* ?x304 ?x304 ?x304 ?x69 ?x68 ?x68))))
 (let ((?x573 (* (- 1) (* ?x304 ?x304 (+ 6 m) ?x69 ?x68 ?x68))))
 (let ((?x536 (* 6 (* k k m n n))))
 (let ((?x502 (* 6 (* c c m n n))))
 (let ((?x500 (* 6 (* k k k n n))))
 (let ((?x494 (* 6 (* c c k n n))))
 (let ((?x301 (+ 6 m)))
 (let ((?x374 (* (- 1) (* ?x304 ?x304 ?x304 ?x301 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x434 (* 6 (* ?x304 ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x122 (* 6 (* ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x639 (+ (* 12 (* c k k)) (* 24 (* c k k n)) ?x122 (* 6 (* c c m)) (* 12 (* c c m n)) (* 12 (* k k k n)) (* 12 (* c k m)) (* 6 (* k k k)) (* 24 (* c k m n)) (* 6 (* c c k)) (* 12 (* c c k n)) (* 12 (* k k m n)) (* 6 (* k k m)) ?x434 ?x374 ?x494 (* 12 (* c k k n n)) ?x500 ?x502 (* 12 (* c k m n n)) ?x536 ?x573 ?x552)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= ?x639 0)))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x159 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x301 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x573 (* (- 1) (* ?x304 ?x304 ?x301 ?x69 ?x68 ?x68))))
 (let ((?x552 (* 6 (* ?x304 ?x304 ?x304 ?x69 ?x68 ?x68))))
 (let ((?x374 (* (- 1) (* ?x304 ?x304 ?x304 ?x301 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x434 (* 6 (* ?x304 ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x122 (* 6 (* ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x567 (+ ?x122 ?x434 ?x374 ?x552 (* 6 (* ?x304 ?x304 ?x69 ?x68 ?x68)) ?x573)))
 (let (($x447 (not (= ?x567 0))))
 (let (($x91 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x602 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x602 $x91 $x447)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x173 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x552 (* 6 (* ?x304 ?x304 ?x304 ?x69 ?x68 ?x68))))
 (let ((?x573 (* (- 1) (* ?x304 ?x304 (+ 6 m) ?x69 ?x68 ?x68))))
 (let ((?x536 (* 6 (* k k m n n))))
 (let ((?x502 (* 6 (* c c m n n))))
 (let ((?x500 (* 6 (* k k k n n))))
 (let ((?x494 (* 6 (* c c k n n))))
 (let ((?x301 (+ 6 m)))
 (let ((?x374 (* (- 1) (* ?x304 ?x304 ?x304 ?x301 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x434 (* 6 (* ?x304 ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x122 (* 6 (* ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x639 (+ (* 12 (* c k k)) (* 24 (* c k k n)) ?x122 (* 6 (* c c m)) (* 12 (* c c m n)) (* 12 (* k k k n)) (* 12 (* c k m)) (* 6 (* k k k)) (* 24 (* c k m n)) (* 6 (* c c k)) (* 12 (* c c k n)) (* 12 (* k k m n)) (* 6 (* k k m)) ?x434 ?x374 ?x494 (* 12 (* c k k n n)) ?x500 ?x502 (* 12 (* c k m n n)) ?x536 ?x573 ?x552)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x633 (and $x119 $x203 $x255 $x293 (not (= ?x639 0)))))
 (let ((?x567 (+ ?x122 ?x434 ?x374 ?x552 (* 6 (* ?x304 ?x304 ?x69 ?x68 ?x68)) ?x573)))
 (let (($x447 (not (= ?x567 0))))
 (let (($x91 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x602 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x253 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x602 $x91 $x447)))
 (rewrite (= $x253 $x633))))))))))))))))))))))))))))))))
 ))
 (let (($x538 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x301 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x573 (* (- 1) (* ?x304 ?x304 ?x301 ?x69 ?x68 ?x68))))
 (let ((?x552 (* 6 (* ?x304 ?x304 ?x304 ?x69 ?x68 ?x68))))
 (let ((?x374 (* (- 1) (* ?x304 ?x304 ?x304 ?x301 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x434 (* 6 (* ?x304 ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x122 (* 6 (* ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x567 (+ ?x122 ?x434 ?x374 ?x552 (* 6 (* ?x304 ?x304 ?x69 ?x68 ?x68)) ?x573)))
 (let (($x447 (not (= ?x567 0))))
 (let (($x91 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x151 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x299 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x299 (- 4)) $x151 $x91 $x447)))))))))))))))))) :qid k!34))
 ))
 (let ((?x108 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x301 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x573 (* (- 1) (* ?x304 ?x304 ?x301 ?x69 ?x68 ?x68))))
 (let ((?x552 (* 6 (* ?x304 ?x304 ?x304 ?x69 ?x68 ?x68))))
 (let ((?x374 (* (- 1) (* ?x304 ?x304 ?x304 ?x301 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x434 (* 6 (* ?x304 ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x122 (* 6 (* ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x567 (+ ?x122 ?x434 ?x374 ?x552 (* 6 (* ?x304 ?x304 ?x69 ?x68 ?x68)) ?x573)))
 (let (($x447 (not (= ?x567 0))))
 (let (($x91 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x602 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x253 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x602 $x91 $x447)))
 (let (($x151 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x299 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (and $x119 (= ?x299 (- 4)) $x151 $x91 $x447)))
 (rewrite (= $x120 $x253)))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (+ (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x79 (+ (- ?x74 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x79 (* ?x68 ?x68 ?x69 ?x70 ?x71 ?x71)) 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x375 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x301 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x573 (* (- 1) (* ?x304 ?x304 ?x301 ?x69 ?x68 ?x68))))
 (let ((?x552 (* 6 (* ?x304 ?x304 ?x304 ?x69 ?x68 ?x68))))
 (let ((?x374 (* (- 1) (* ?x304 ?x304 ?x304 ?x301 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x434 (* 6 (* ?x304 ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x122 (* 6 (* ?x304 ?x304 ?x304 ?x301 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x567 (+ ?x122 ?x434 ?x374 ?x552 (* 6 (* ?x304 ?x304 ?x69 ?x68 ?x68)) ?x573)))
 (let (($x447 (not (= ?x567 0))))
 (let (($x91 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x151 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x299 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x120 (and $x119 (= ?x299 (- 4)) $x151 $x91 $x447)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x79 (+ (- ?x74 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x69 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x79 (* ?x68 ?x68 ?x69 ?x70 ?x71 ?x71)) 0))))))
 (rewrite (= $x85 $x120)))))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x565 (mp (mp @x87 (quant-intro (proof-bind ?x375) (= $x86 $x538)) $x538) (rewrite (= $x538 $x538)) $x538)))
 (let ((@x150 (mp (mp @x565 (quant-intro (proof-bind ?x108) (= $x538 $x159)) $x159) (quant-intro (proof-bind ?x173) (= $x159 $x181)) $x181)))
 (let ((@x650 (mp (mp~ @x150 (sk (~ $x181 $x133)) $x133) (rewrite (= $x133 $x617)) $x617)))
 (let ((@x646 (and-elim @x650 $x274)))
 (let ((@x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x592)) @x646 $x592)))
 (let (($x595 (>= ?x209 6)))
 (let ((@x563 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x595)) @x646 $x595)))
 (let (($x624 (<= ?x115 (- 1))))
 (let ((@x177 (and-elim @x650 $x186)))
 (let ((@x635 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x186) $x624)) @x177 $x624)))
 (let (($x657 (>= ?x115 (- 1))))
 (let ((@x555 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x186) $x657)) @x177 $x657)))
 (let (($x549 (<= ?x169 (- 4))))
 (let ((@x97 (and-elim @x650 $x199)))
 (let ((@x193 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x199) $x549)) @x97 $x549)))
 (let (($x606 (>= ?x169 (- 4))))
 (let ((@x578 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x199) $x606)) @x97 $x606)))
 (let (($x611 (<= ?x237 (- 1))))
 (let ((@x195 (and-elim @x650 $x160)))
 (let ((@x246 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x160) $x611)) @x195 $x611)))
 (let (($x625 (>= ?x237 (- 1))))
 (let ((@x198 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x160) $x625)) @x195 $x625)))
 (let (($x642 (not (<= ?x556 0))))
 (let (($x609 (>= ?x556 0)))
 (let ((@x574 ((_ th-lemma arith) (hypothesis (not $x609)) @x555 @x635 @x555 @x635 @x198 @x246 @x578 @x193 @x578 @x193 @x555 @x635 @x578 @x193 @x555 @x635 @x578 @x193 @x555 @x635 @x563 @x306 @x563 @x306 @x563 @x306 @x555 @x635 false)))
 (let ((@x638 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x615 $x642 (not $x609))) (and-elim @x650 $x652) (or $x642 (not $x609)))))
 ((_ th-lemma arith) (unit-resolution @x638 (lemma @x574 $x609) $x642) @x555 @x635 @x198 @x246 @x555 @x635 @x578 @x193 @x555 @x635 @x555 @x635 @x563 @x306 @x555 @x635 @x563 @x306 @x563 @x306 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        14
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           13
 :arith-gomory-cuts         1
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             270
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    19
 :arith-num-rows            10
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      18
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              8
 :max-memory                3.64
 :memory                    3.17
 :mk-bool-var               25
 :mk-clause                 16
 :num-allocs                1221958
 :num-checks                1
 :propagations              10
 :rlimit-count              8888
 :time                      0.01
 :total-time                0.02)
