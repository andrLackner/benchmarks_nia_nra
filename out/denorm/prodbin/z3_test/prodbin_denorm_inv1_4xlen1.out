unsat
((set-logic NRA)
(proof
(let (($x91 (exists ((x Real) (y Real) )(! (let ((?x61 (* x00 y00)))
 (let ((?x122 (* y x)))
 (let ((?x57 (* (- 1.0) ?x122)))
 (let ((?x283 (+ ?x57 ?x61 z00 x)))
 (let ((?x112 (* (/ 1.0 2.0) y)))
 (let ((?x138 (+ (- (/ 1.0 2.0)) ?x112)))
 (let ((?x261 (* ?x138 x)))
 (let ((?x260 (* 2.0 ?x261)))
 (let ((?x285 (+ ?x260 ?x57 x)))
 (let ((?x75 (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x138 ?x285 ?x283 ?x283 ?x283 x x x x x x)))
 (let (($x129 (= ?x75 0.0)))
 (not $x129)))))))))))) :qid k!28))
 ))
 (let (($x232 (exists ((x Real) (y Real) )(! false :qid k!28))
 ))
 (let ((?x231 (lambda ((x Real) (y Real) )(let ((?x61 (* x00 y00)))
 (let ((?x122 (* y x)))
 (let ((?x57 (* (- 1.0) ?x122)))
 (let ((?x283 (+ ?x57 ?x61 z00 x)))
 (let ((?x112 (* (/ 1.0 2.0) y)))
 (let ((?x138 (+ (- (/ 1.0 2.0)) ?x112)))
 (let ((?x261 (* ?x138 x)))
 (let ((?x260 (* 2.0 ?x261)))
 (let ((?x285 (+ ?x260 ?x57 x)))
 (let ((?x75 (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x138 ?x285 ?x283 ?x283 ?x283 x x x x x x)))
 (let (($x129 (= ?x75 0.0)))
 (let (($x86 (not $x129)))
 (let ((?x249 (+ x z00 ?x61 ?x57)))
 (let ((?x242 (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x138 0.0 ?x249 ?x249 ?x249 x x x x x x)))
 (let ((@x243 (rewrite (= ?x283 ?x249))))
 (let ((?x250 (+ (* (- 1.0) x) ?x122)))
 (let ((?x150 (+ (* 2.0 (* (- (/ 1.0 2.0)) x)) (* 2.0 (* (/ 1.0 2.0) ?x122)))))
 (let ((?x124 (* (/ 1.0 2.0) ?x122)))
 (let ((?x141 (* (- (/ 1.0 2.0)) x)))
 (let ((?x132 (+ ?x141 ?x124)))
 (let ((?x63 (+ ?x141 (* ?x112 x))))
 (let ((@x128 (trans (rewrite (= ?x261 ?x63)) (rewrite (= ?x63 ?x132)) (= ?x261 ?x132))))
 (let ((@x154 (trans (monotonicity @x128 (= ?x260 (* 2.0 ?x132))) (rewrite (= (* 2.0 ?x132) ?x150)) (= ?x260 ?x150))))
 (let ((@x317 (monotonicity (trans @x154 (rewrite (= ?x150 ?x250)) (= ?x260 ?x250)) (= ?x285 (+ ?x250 ?x57 x)))))
 (let ((@x156 (monotonicity (trans @x317 (rewrite (= (+ ?x250 ?x57 x) 0.0)) (= ?x285 0.0)) @x243 @x243 @x243 (= ?x75 ?x242))))
 (let ((@x239 (monotonicity (trans @x156 (rewrite (= ?x242 0.0)) $x129) (= $x129 (= 0.0 0.0)))))
 (let ((@x235 (monotonicity (trans @x239 (rewrite (= (= 0.0 0.0) true)) (= $x129 true)) (= $x86 (not true)))))
 (trans @x235 (rewrite (= (not true) false)) (= $x86 false))))))))))))))))))))))))))))))
 ))
 (let ((@x224 (trans (quant-intro (proof-bind ?x231) (= $x91 $x232)) (elim-unused (= $x232 false)) (= $x91 false))))
 (let (($x66 (exists ((x Real) (y Real) (z Real) )(! (let ((?x81 (* (- 1.0) z00)))
 (let ((?x67 (* y x)))
 (let ((?x61 (* x00 y00)))
 (let ((?x62 (* (- 1.0) ?x61)))
 (let ((?x294 (+ ?x62 ?x67 z ?x81)))
 (let ((?x60 (* ?x294 z z z y y y y y y x x x x x x)))
 (let ((?x77 (+ ?x62 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x81)))
 (let ((?x103 (* (/ 1.0 2.0) y)))
 (let ((?x110 (+ (- (/ 1.0 2.0)) ?x103)))
 (let ((?x40 (+ z x)))
 (let ((?x98 (* ?x40 ?x40 ?x40 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x77 x x x x x x)))
 (and (= ?x294 0.0) (or (not (= ?x98 0.0)) (not (= ?x60 0.0))))))))))))))) :qid k!28))
 ))
 (let (($x53 (exists ((x Real) (y Real) (z Real) )(! (let ((?x44 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x48 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x44) z) z00) ?x24 2.0 x 2.0 x 2.0 x ?x44 ?x44 ?x44 z z z 1.0 ?x24 2.0 x 2.0 x 2.0 x ?x44 ?x44 ?x24 ?x44)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x40 (+ z x)))
 (let ((?x41 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x40 ?x40 ?x40 1.0 ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x24 ?x36)))
 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x41 0.0)) (not (= ?x48 0.0)))))))))) :qid k!28))
 ))
 (let ((?x116 (lambda ((x Real) (y Real) (z Real) )(let ((?x81 (* (- 1.0) z00)))
 (let ((?x67 (* y x)))
 (let ((?x61 (* x00 y00)))
 (let ((?x62 (* (- 1.0) ?x61)))
 (let ((?x294 (+ ?x62 ?x67 z ?x81)))
 (let ((?x60 (* ?x294 z z z y y y y y y x x x x x x)))
 (let ((?x77 (+ ?x62 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x81)))
 (let ((?x103 (* (/ 1.0 2.0) y)))
 (let ((?x110 (+ (- (/ 1.0 2.0)) ?x103)))
 (let ((?x40 (+ z x)))
 (let ((?x98 (* ?x40 ?x40 ?x40 ?x110 ?x110 ?x110 ?x110 ?x110 ?x110 ?x77 x x x x x x)))
 (let (($x68 (and (= ?x294 0.0) (or (not (= ?x98 0.0)) (not (= ?x60 0.0))))))
 (let ((?x44 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x48 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x44) z) z00) ?x24 2.0 x 2.0 x 2.0 x ?x44 ?x44 ?x44 z z z 1.0 ?x24 2.0 x 2.0 x 2.0 x ?x44 ?x44 ?x24 ?x44)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x41 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x40 ?x40 ?x40 1.0 ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x24 ?x36)))
 (let (($x52 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x41 0.0)) (not (= ?x48 0.0))))))
 (rewrite (= $x52 $x68)))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x300 (mp (mp @x54 (quant-intro (proof-bind ?x116) (= $x53 $x66)) $x66) (rewrite (= $x66 $x91)) $x91)))
 (mp @x300 @x224 false))))))))))))

(:max-memory   17.59
 :memory       17.33
 :num-allocs   55977
 :num-checks   1
 :rlimit-count 511
 :time         0.00
 :total-time   0.01)
