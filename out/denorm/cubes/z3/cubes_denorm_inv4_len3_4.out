unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x308 (* n!0 n!0)))
 (let ((?x149 (* (- 3) ?x308)))
 (let ((?x130 (* (- 3) n!0)))
 (let ((?x417 (+ k!2 ?x130 ?x149)))
 (let (($x419 (>= ?x417 1)))
 (let (($x368 (= ?x417 1)))
 (let ((?x426 (+ 7 (* (- 1) k!2) (* (- 1) m!1) (* 9 n!0) (* 3 ?x308))))
 (let ((?x141 (* (- 1) (* n!0 n!0 n!0))))
 (let ((?x200 (+ k!2 c!3)))
 (let ((?x273 (+ k!2 m!1)))
 (let ((?x421 (+ 6 m!1)))
 (let ((?x418 (+ 1 n!0)))
 (let ((?x361 (+ (- 1) ?x130 (* (- 1) (* ?x418 ?x421 ?x421 ?x421 ?x273 ?x273 ?x200 ?x200 ?x200)) ?x149 (* ?x418 ?x421 ?x273 ?x273 ?x200 ?x200) ?x141)))
 (let ((?x163 (* ?x361 ?x426)))
 (let (($x123 (= ?x163 0)))
 (let (($x165 (not $x123)))
 (let (($x109 (= (+ k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0)) (* 3 c!3)) 1)))
 (let ((?x262 (* 18 c!3)))
 (let ((?x252 (* (- 1) (* k!2 k!2))))
 (let ((?x250 (* (- 9) n!0)))
 (let ((?x256 (* 5 k!2)))
 (let ((?x265 (+ m!1 (* (- 6) n!0))))
 (let (($x134 (= ?x265 6)))
 (let (($x118 (and $x134 (= (+ ?x256 ?x250 ?x252 ?x262 (* 9 (* n!0 c!3))) 4) $x109 $x368 $x165)))
 (let ((?x309 (+ c!3 k!2)))
 (let ((?x281 (+ (- 1) ?x130 ?x149 ?x141 (* (- 1) (* ?x418 ?x421 ?x421 ?x421 ?x273 ?x273 ?x309 ?x309 ?x309)) (* ?x418 ?x421 ?x273 ?x273 ?x309 ?x309))))
 (let (($x129 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x168 (and $x134 (= (+ ?x262 ?x256 ?x250 ?x252 (* 9 (* c!3 n!0))) 4) $x129 $x368 (not (= (* ?x281 ?x426) 0)))))
 (let (($x274 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x77 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x425 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x524 (* ?x303 ?x425 ?x71 ?x71 ?x77 ?x77)))
 (let ((?x486 (* (- 1) (* ?x303 ?x425 ?x425 ?x425 ?x71 ?x71 ?x77 ?x77 ?x77))))
 (let ((?x404 (* (- 1) (* n n n))))
 (let ((?x297 (* (- 3) ?x266)))
 (let ((?x296 (* (- 3) n)))
 (let ((?x95 (* (+ (- 1) ?x296 ?x297 ?x404 ?x486 ?x524) (+ 7 ?x235 ?x351 ?x48 ?x267))))
 (let (($x295 (= (+ k ?x296 ?x297) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= ?x95 0))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x102 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x122 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x77 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x425 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x486 (* (- 1) (* ?x303 ?x425 ?x425 ?x425 ?x71 ?x71 ?x77 ?x77 ?x77))))
 (let ((?x524 (* ?x303 ?x425 ?x71 ?x71 ?x77 ?x77)))
 (let (($x177 (not (= (* (+ (* (- 1) (* ?x303 ?x303 ?x303)) ?x524 ?x486) ?x122) 0))))
 (let (($x139 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x114 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x114 $x139 $x177)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x331 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x77 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x425 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x524 (* ?x303 ?x425 ?x71 ?x71 ?x77 ?x77)))
 (let ((?x486 (* (- 1) (* ?x303 ?x425 ?x425 ?x425 ?x71 ?x71 ?x77 ?x77 ?x77))))
 (let ((?x404 (* (- 1) (* n n n))))
 (let ((?x297 (* (- 3) ?x266)))
 (let ((?x296 (* (- 3) n)))
 (let ((?x95 (* (+ (- 1) ?x296 ?x297 ?x404 ?x486 ?x524) (+ 7 ?x235 ?x351 ?x48 ?x267))))
 (let (($x295 (= (+ k ?x296 ?x297) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x138 (and $x121 $x205 $x257 $x295 (not (= ?x95 0)))))
 (let ((?x340 (* (+ (* (- 1) (* ?x303 ?x303 ?x303)) ?x524 ?x486) (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)))))
 (let (($x177 (not (= ?x340 0))))
 (let (($x139 (= (+ ?x267 ?x235 (* 3 n)) (- 1))))
 (let (($x114 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x277 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x114 $x139 $x177)))
 (rewrite (= $x277 $x138)))))))))))))))))))))))))))))))))
 ))
 (let (($x179 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x122 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x77 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x425 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x486 (* (- 1) (* ?x303 ?x425 ?x425 ?x425 ?x71 ?x71 ?x77 ?x77 ?x77))))
 (let ((?x524 (* ?x303 ?x425 ?x71 ?x71 ?x77 ?x77)))
 (let (($x177 (not (= (* (+ (* (- 1) (* ?x303 ?x303 ?x303)) ?x524 ?x486) ?x122) 0))))
 (let (($x139 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x325 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x325 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x139 $x177))))))))))))))))) :qid k!34))
 ))
 (let ((?x115 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x122 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x77 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x425 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x486 (* (- 1) (* ?x303 ?x425 ?x425 ?x425 ?x71 ?x71 ?x77 ?x77 ?x77))))
 (let ((?x524 (* ?x303 ?x425 ?x71 ?x71 ?x77 ?x77)))
 (let (($x177 (not (= (* (+ (* (- 1) (* ?x303 ?x303 ?x303)) ?x524 ?x486) ?x122) 0))))
 (let (($x139 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x114 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x277 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x114 $x139 $x177)))
 (let ((?x48 (* 9 n)))
 (let ((?x325 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x192 (and $x121 (= ?x325 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x139 $x177)))
 (rewrite (= $x192 $x277))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x77 (+ c k)))
 (let ((?x82 (- (+ (* (- 1) ?x68 ?x68 ?x68) (* ?x77 ?x77 ?x71 ?x71 ?x78 ?x68)) (* ?x77 ?x77 ?x77 ?x71 ?x71 ?x78 ?x78 ?x78 ?x68))))
 (let (($x84 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x82) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x84)))))))))))))))) :qid k!34))
 ))
 (let ((?x154 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x122 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x77 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x425 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x486 (* (- 1) (* ?x303 ?x425 ?x425 ?x425 ?x71 ?x71 ?x77 ?x77 ?x77))))
 (let ((?x524 (* ?x303 ?x425 ?x71 ?x71 ?x77 ?x77)))
 (let (($x177 (not (= (* (+ (* (- 1) (* ?x303 ?x303 ?x303)) ?x524 ?x486) ?x122) 0))))
 (let (($x139 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x325 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x192 (and $x121 (= ?x325 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x139 $x177)))
 (let ((?x68 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x82 (- (+ (* (- 1) ?x68 ?x68 ?x68) (* ?x77 ?x77 ?x71 ?x71 ?x78 ?x68)) (* ?x77 ?x77 ?x77 ?x71 ?x71 ?x78 ?x78 ?x78 ?x68))))
 (let (($x84 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x82) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x84)))))
 (rewrite (= $x87 $x192)))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x103 (mp (mp @x89 (quant-intro (proof-bind ?x154) (= $x88 $x179)) $x179) (rewrite (= $x179 $x179)) $x179)))
 (let ((@x408 (mp (mp @x103 (quant-intro (proof-bind ?x115) (= $x179 $x102)) $x102) (quant-intro (proof-bind ?x331) (= $x102 $x274)) $x274)))
 (let ((@x283 (mp (mp~ @x408 (sk (~ $x274 $x168)) $x168) (rewrite (= $x168 $x118)) $x118)))
 (let ((@x315 (and-elim @x283 $x368)))
 (let ((@x346 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x368) $x419)) @x315 $x419)))
 (let (($x125 (>= ?x265 6)))
 (let ((@x116 (and-elim @x283 $x134)))
 (let ((@x188 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x134) $x125)) @x116 $x125)))
 (let (($x316 (<= ?x417 1)))
 (let ((@x522 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x368) $x316)) @x315 $x316)))
 (let (($x244 (<= ?x265 6)))
 (let ((@x178 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x134) $x244)) @x116 $x244)))
 (let (($x369 (not (<= ?x163 0))))
 (let (($x416 (>= ?x163 0)))
 (let ((@x406 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x416)) @x178 @x522 @x188 @x346 false) $x416)))
 (let ((@x147 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x123 $x369 (not $x416))) (and-elim @x283 $x165) (or $x369 (not $x416)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x147 @x406 $x369) @x178 @x522 @x188 @x346 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             123
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    18
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      24
 :arith-tableau-max-columns 34
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.60
 :memory                    3.09
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1794729
 :num-checks                1
 :propagations              12
 :rlimit-count              19877
 :time                      0.01
 :total-time                0.02)
