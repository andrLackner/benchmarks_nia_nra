unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x467 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x297 (>= ?x467 (- 6))))
 (let (($x100 (= ?x467 (- 6))))
 (let ((?x170 (+ c!3 k!2)))
 (let ((?x197 (+ m!1 k!2)))
 (let ((?x351 (+ 6 m!1)))
 (let ((?x554 (+ 1 n!0)))
 (let ((?x518 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x196 (* (- 6) (* c!3 c!3 k!2))))
 (let ((?x339 (* (- 1) (* c!3 c!3 m!1 m!1))))
 (let ((?x277 (* k!2 k!2)))
 (let ((?x209 (* c!3 k!2)))
 (let ((?x97 (* c!3 m!1)))
 (let ((?x522 (* (- 6) (* c!3 c!3 m!1))))
 (let ((?x446 (* (- 12) (* c!3 k!2 k!2))))
 (let ((?x488 (+ ?x446 ?x522 ?x97 (* (- 12) (* c!3 n!0 k!2 k!2)) (* (- 2) (* c!3 m!1 m!1 k!2)) (* (- 6) (* n!0 k!2 k!2 k!2)) (* ?x351 ?x351 ?x197 ?x197 ?x170 ?x170 ?x170) (* (- 2) (* c!3 n!0 m!1 k!2 k!2)) (* (- 6) (* c!3 c!3 n!0 m!1)) (* (- 1) (* n!0 m!1 m!1 k!2 k!2)) (* (- 12) (* c!3 m!1 k!2)) ?x209 (* n!0 m!1 k!2) (* (- 6) (* m!1 k!2 k!2)) (* m!1 k!2) (* n!0 k!2 k!2) (* (- 12) (* c!3 n!0 m!1 k!2)) ?x277 (* (- 1) (* c!3 c!3 n!0 m!1 m!1)) (* (- 1) (* m!1 m!1 k!2 k!2)) (* (- 2) (* c!3 n!0 m!1 m!1 k!2)) (* c!3 n!0 k!2) (* (- 1) (* c!3 c!3 m!1 k!2)) ?x339 (* (- 6) (* c!3 c!3 n!0 k!2)) (* (- 1) (* n!0 m!1 k!2 k!2 k!2)) (* (- 1) (* m!1 k!2 k!2 k!2)) (* (- 2) (* c!3 m!1 k!2 k!2)) ?x196 (* c!3 n!0 m!1) (* (- 6) (* n!0 m!1 k!2 k!2)) ?x518 (* ?x554 ?x351 ?x351 ?x351 ?x197 ?x197 ?x170 ?x170) (* (- 1) (* c!3 c!3 n!0 m!1 k!2)))))
 (let ((?x506 (* (+ (- 6) (* (- 6) n!0) m!1) ?x488)))
 (let (($x175 (= ?x506 0)))
 (let (($x332 (not $x175)))
 (let (($x589 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x583 (= (+ (* 3 c!3) (* (- 2) n!0) k!2 (* (- 1) (* n!0 k!2))) 1)))
 (let ((?x525 (+ ?x277 (* (- 18) c!3) (* 9 n!0) (* (- 5) k!2) (* (- 9) (* c!3 n!0)))))
 (let (($x352 (and $x100 (= ?x525 (- 4)) $x583 $x589 $x332)))
 (let ((?x434 (+ ?x277 (* (- 6) (* c!3 c!3 k!2 n!0)) (* (- 1) (* k!2 k!2 k!2 m!1)) (* (- 12) (* c!3 k!2 k!2 n!0)) (* (- 2) (* c!3 k!2 k!2 m!1)) (* (- 6) (* k!2 k!2 k!2 n!0)) (* (- 6) (* c!3 c!3 m!1 n!0)) ?x339 (* (- 12) (* c!3 k!2 m!1 n!0)) (* (- 2) (* c!3 k!2 m!1 m!1)) (* ?x351 ?x351 (+ k!2 m!1) (+ k!2 m!1) ?x170 ?x170 ?x170) ?x196 (* (- 1) (* c!3 c!3 k!2 m!1)) (* ?x554 ?x351 ?x351 ?x351 (+ k!2 m!1) (+ k!2 m!1) ?x170 ?x170) (* (- 1) (* c!3 c!3 k!2 m!1 n!0)) (* (- 2) (* c!3 k!2 k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 k!2 m!1 n!0)) (* (- 1) (* c!3 c!3 m!1 m!1 n!0)) (* (- 2) (* c!3 k!2 m!1 m!1 n!0)) (* (- 1) (* k!2 k!2 m!1 m!1 n!0)) (* (- 12) (* c!3 k!2 m!1)) ?x522 (* (- 6) (* k!2 k!2 m!1)) (* k!2 m!1) ?x97 ?x518 (* (- 6) (* k!2 k!2 m!1 n!0)) ?x209 (* k!2 m!1 n!0) (* c!3 m!1 n!0) (* k!2 k!2 n!0) (* c!3 k!2 n!0) (* (- 1) (* k!2 k!2 m!1 m!1)) ?x446)))
 (let (($x460 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x540 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x277) (* 9 (* c!3 n!0)))))
 (let (($x217 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x540 4) $x460 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x434) 0)))))
 (let (($x167 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x504 (* c k n)))
 (let ((?x503 (* k k n)))
 (let ((?x502 (* c m n)))
 (let ((?x501 (* k m n)))
 (let ((?x495 (* c k)))
 (let ((?x490 (* c m)))
 (let ((?x487 (* k m)))
 (let ((?x432 (* (- 1) (* k k m m n))))
 (let ((?x426 (* (- 1) (* c c m m n))))
 (let ((?x424 (* (- 1) (* k k k m n))))
 (let ((?x418 (* (- 1) (* c c k m n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x740 (+ ?x49 (* (- 6) (* c c k n)) (* (- 1) (* k k k m)) (* (- 12) (* c k k n)) (* (- 2) (* c k k m)) (* (- 6) (* k k k n)) (* (- 6) (* c c m n)) (* (- 1) (* c c m m)) (* (- 12) (* c k m n)) (* (- 2) (* c k m m)) ?x321 (* (- 6) (* c c k)) (* (- 1) (* c c k m)) ?x359 ?x418 (* (- 2) (* c k k m n)) ?x424 ?x426 (* (- 2) (* c k m m n)) ?x432 (* (- 12) (* c k m)) (* (- 6) (* c c m)) (* (- 6) (* k k m)) ?x487 ?x490 (* (- 6) (* k k k)) (* (- 6) (* k k m n)) ?x495 ?x501 ?x502 ?x503 ?x504 (* (- 1) (* k k m m)) (* (- 12) (* c k k)))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x740) 0)))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x124 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x342 (not (= (* ?x117 ?x533) 0))))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x129 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x129 $x163 $x342))))))))))))))))))) :qid k!34))
 ))
 (let ((?x281 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x504 (* c k n)))
 (let ((?x503 (* k k n)))
 (let ((?x502 (* c m n)))
 (let ((?x501 (* k m n)))
 (let ((?x495 (* c k)))
 (let ((?x490 (* c m)))
 (let ((?x487 (* k m)))
 (let ((?x432 (* (- 1) (* k k m m n))))
 (let ((?x426 (* (- 1) (* c c m m n))))
 (let ((?x424 (* (- 1) (* k k k m n))))
 (let ((?x418 (* (- 1) (* c c k m n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x740 (+ ?x49 (* (- 6) (* c c k n)) (* (- 1) (* k k k m)) (* (- 12) (* c k k n)) (* (- 2) (* c k k m)) (* (- 6) (* k k k n)) (* (- 6) (* c c m n)) (* (- 1) (* c c m m)) (* (- 12) (* c k m n)) (* (- 2) (* c k m m)) ?x321 (* (- 6) (* c c k)) (* (- 1) (* c c k m)) ?x359 ?x418 (* (- 2) (* c k k m n)) ?x424 ?x426 (* (- 2) (* c k m m n)) ?x432 (* (- 12) (* c k m)) (* (- 6) (* c c m)) (* (- 6) (* k k m)) ?x487 ?x490 (* (- 6) (* k k k)) (* (- 6) (* k k m n)) ?x495 ?x501 ?x502 ?x503 ?x504 (* (- 1) (* k k m m)) (* (- 12) (* c k k)))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x101 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x740) 0)))))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let (($x342 (not (= (* ?x117 ?x533) 0))))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x129 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x230 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x129 $x163 $x342)))
 (rewrite (= $x230 $x101))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x551 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x342 (not (= (* ?x117 ?x533) 0))))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x253 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x95 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= ?x95 (- 4)) $x253 $x163 $x342))))))))))))))))) :qid k!34))
 ))
 (let ((?x131 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x342 (not (= (* ?x117 ?x533) 0))))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x129 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x230 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x129 $x163 $x342)))
 (let (($x253 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x95 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x203 (and $x128 (= ?x95 (- 4)) $x253 $x163 $x342)))
 (rewrite (= $x203 $x230))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x80 (+ (* (- 1) ?x73 ?x73 ?x74 ?x75 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x75 ?x75) (* ?x73 ?x74 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x75 ?x75 ?x75 ?x69))))
 (let (($x82 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82)))))))))))))))) :qid k!34))
 ))
 (let ((?x184 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x359 (* ?x317 ?x363 ?x363 ?x363 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x321 (* ?x363 ?x363 ?x74 ?x74 ?x73 ?x73 ?x73)))
 (let ((?x533 (+ (* (- 1) (* ?x317 ?x363 ?x74 ?x73 ?x73)) ?x321 (* ?x317 ?x74 ?x73) ?x359)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x342 (not (= (* ?x117 ?x533) 0))))
 (let (($x163 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x253 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x95 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x203 (and $x128 (= ?x95 (- 4)) $x253 $x163 $x342)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x80 (+ (* (- 1) ?x73 ?x73 ?x74 ?x75 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x75 ?x75) (* ?x73 ?x74 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x75 ?x75 ?x75 ?x69))))
 (let (($x82 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82)))))
 (rewrite (= $x85 $x203))))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x123 (mp (mp @x87 (quant-intro (proof-bind ?x184) (= $x86 $x551)) $x551) (rewrite (= $x551 $x551)) $x551)))
 (let ((@x168 (mp (mp @x123 (quant-intro (proof-bind ?x131) (= $x551 $x124)) $x124) (quant-intro (proof-bind ?x281) (= $x124 $x167)) $x167)))
 (let ((@x560 (mp (mp~ @x168 (sk (~ $x167 $x217)) $x217) (rewrite (= $x217 $x352)) $x352)))
 (let ((@x186 (and-elim @x560 $x100)))
 (let ((@x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x297)) @x186 $x297)))
 (let (($x689 (<= ?x467 (- 6))))
 (let ((@x588 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x100) $x689)) @x186 $x689)))
 (let (($x282 (not (<= ?x506 0))))
 (let (($x99 (>= ?x506 0)))
 (let ((@x244 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x175 $x282 (not $x99))) (and-elim @x560 $x332) (or $x282 (not $x99)))))
 (let ((@x234 (unit-resolution @x244 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x99)) @x588 @x169 false) $x99) $x282)))
 ((_ th-lemma arith farkas 1 1 1) @x234 @x588 @x169 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        26
 :arith-assert-upper        26
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             187
 :arith-nonlinear-bounds    26
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      4
 :arith-tableau-max-columns 63
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.60
 :memory                    3.14
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1120645
 :num-checks                1
 :propagations              10
 :rlimit-count              4139
 :time                      0.01
 :total-time                0.02)
