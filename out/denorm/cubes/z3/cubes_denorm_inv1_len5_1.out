unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x425 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x151 (>= ?x425 (- 6))))
 (let (($x118 (= ?x425 (- 6))))
 (let ((?x107 (+ c!3 k!2)))
 (let ((?x497 (+ k!2 m!1)))
 (let ((?x512 (+ 6 m!1)))
 (let ((?x511 (+ 1 n!0)))
 (let ((?x643 (* (- 1) (* ?x511 ?x511 ?x511 ?x512 ?x497 ?x497 ?x497 ?x107 ?x107 ?x107))))
 (let ((?x492 (* 36 (* m!1 m!1 m!1))))
 (let ((?x490 (* 12 (* k!2 k!2 k!2 m!1))))
 (let ((?x423 (* 36 (* k!2 m!1 m!1 m!1))))
 (let ((?x514 (* 12 (* m!1 m!1 m!1 m!1))))
 (let ((?x513 (* ?x512 ?x512 ?x512 ?x497 ?x497 ?x497)))
 (let ((?x547 (* 108 (* k!2 m!1 m!1))))
 (let ((?x437 (* k!2 k!2 k!2 m!1 m!1)))
 (let ((?x438 (* 3 (* k!2 k!2 m!1 m!1 m!1))))
 (let ((?x421 (* ?x511 ?x512 ?x512 ?x512 ?x497 ?x497 ?x497 ?x107 ?x107)))
 (let ((?x352 (* 3 (* k!2 m!1 m!1 m!1 m!1))))
 (let ((?x115 (* 36 (* k!2 k!2 k!2))))
 (let ((?x642 (* 36 (* k!2 k!2 m!1 m!1))))
 (let ((?x320 (* c!3 m!1)))
 (let ((?x290 (* k!2 k!2)))
 (let ((?x233 (* k!2 m!1)))
 (let ((?x222 (* c!3 k!2)))
 (let ((?x556 (* 108 (* k!2 k!2 m!1))))
 (let ((?x114 (* m!1 m!1 m!1 m!1 m!1)))
 (let ((?x224 (+ ?x114 ?x556 ?x222 ?x233 (* 2 (* n!0 k!2 m!1)) (* 2 (* n!0 c!3 m!1)) (* 2 (* n!0 k!2 k!2)) (* 2 (* n!0 c!3 k!2)) (* n!0 n!0 k!2 m!1) (* n!0 n!0 c!3 m!1) (* n!0 n!0 k!2 k!2) (* n!0 n!0 c!3 k!2) ?x290 ?x320 ?x642 ?x115 ?x352 ?x421 ?x438 ?x437 ?x547 ?x513 ?x514 ?x423 ?x490 ?x492 ?x643)))
 (let ((?x229 (* (+ (- 6) (* (- 6) n!0) m!1) ?x224)))
 (let (($x255 (= ?x229 0)))
 (let (($x292 (not $x255)))
 (let (($x378 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x150 (= (+ (* 2 n!0) (* (- 3) c!3) (* (- 1) k!2) (* n!0 k!2)) (- 1))))
 (let ((?x381 (+ (* 9 n!0) (* (- 9) (* n!0 c!3)) ?x290 (* (- 18) c!3) (* (- 5) k!2))))
 (let (($x258 (and $x118 (= ?x381 (- 4)) $x150 $x378 $x292)))
 (let ((?x603 (+ ?x290 ?x437 ?x492 ?x547 ?x556 ?x115 ?x114 ?x352 ?x438 ?x421 ?x490 ?x642 ?x423 ?x514 ?x513 ?x643 (* c!3 k!2 n!0 n!0) (* k!2 k!2 n!0 n!0) (* c!3 m!1 n!0 n!0) (* k!2 m!1 n!0 n!0) ?x222 ?x320 ?x233 (* 2 (* c!3 k!2 n!0)) (* 2 (* k!2 k!2 n!0)) (* 2 (* c!3 m!1 n!0)) (* 2 (* k!2 m!1 n!0)))))
 (let (($x426 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x543 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x290) (* 9 (* c!3 n!0)))))
 (let (($x376 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x543 4) $x426 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x603) 0)))))
 (let (($x408 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x638 (* 2 (* k m n))))
 (let ((?x637 (* 2 (* c m n))))
 (let ((?x636 (* 2 (* k k n))))
 (let ((?x635 (* 2 (* c k n))))
 (let ((?x609 (* k m)))
 (let ((?x606 (* c m)))
 (let ((?x601 (* c k)))
 (let ((?x595 (* k m n n)))
 (let ((?x594 (* c m n n)))
 (let ((?x593 (* k k n n)))
 (let ((?x592 (* c k n n)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x455 (* (- 1) (* ?x319 ?x319 ?x319 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72))))
 (let ((?x553 (* ?x363 ?x363 ?x363 ?x73 ?x73 ?x73)))
 (let ((?x567 (* 12 (* m m m m))))
 (let ((?x566 (* 36 (* k m m m))))
 (let ((?x565 (* 36 (* k k m m))))
 (let ((?x564 (* 12 (* k k k m))))
 (let ((?x456 (* ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x568 (* 3 (* k k m m m))))
 (let ((?x569 (* 3 (* k m m m m))))
 (let ((?x450 (* m m m m m)))
 (let ((?x442 (* 36 (* k k k))))
 (let ((?x561 (* 108 (* k k m))))
 (let ((?x562 (* 108 (* k m m))))
 (let ((?x459 (* 36 (* m m m))))
 (let ((?x395 (* k k k m m)))
 (let ((?x49 (* k k)))
 (let ((?x389 (+ ?x49 ?x395 ?x459 ?x562 ?x561 ?x442 ?x450 ?x569 ?x568 ?x456 ?x564 ?x565 ?x566 ?x567 ?x553 ?x455 ?x592 ?x593 ?x594 ?x595 ?x601 ?x606 ?x609 ?x635 ?x636 ?x637 ?x638)))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m ?x113) 6)))
 (and $x130 $x214 $x266 $x304 (not (= (* ?x119 ?x389) 0))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x533 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x72 (+ c k)))
 (let ((?x319 (+ 1 n)))
 (let ((?x455 (* (- 1) (* ?x319 ?x319 ?x319 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72))))
 (let ((?x553 (* ?x363 ?x363 ?x363 ?x73 ?x73 ?x73)))
 (let ((?x456 (* ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x468 (+ ?x456 ?x553 ?x455 (* ?x363 ?x363 ?x73 ?x73 ?x73) (* ?x319 ?x319 ?x73 ?x72))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x284 (not (= (* ?x119 ?x468) 0))))
 (let (($x484 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x535 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m ?x113) 6)))
 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x535 $x484 $x284)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x96 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x638 (* 2 (* k m n))))
 (let ((?x637 (* 2 (* c m n))))
 (let ((?x636 (* 2 (* k k n))))
 (let ((?x635 (* 2 (* c k n))))
 (let ((?x609 (* k m)))
 (let ((?x606 (* c m)))
 (let ((?x601 (* c k)))
 (let ((?x595 (* k m n n)))
 (let ((?x594 (* c m n n)))
 (let ((?x593 (* k k n n)))
 (let ((?x592 (* c k n n)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x319 (+ 1 n)))
 (let ((?x455 (* (- 1) (* ?x319 ?x319 ?x319 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72))))
 (let ((?x553 (* ?x363 ?x363 ?x363 ?x73 ?x73 ?x73)))
 (let ((?x567 (* 12 (* m m m m))))
 (let ((?x566 (* 36 (* k m m m))))
 (let ((?x565 (* 36 (* k k m m))))
 (let ((?x564 (* 12 (* k k k m))))
 (let ((?x456 (* ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x568 (* 3 (* k k m m m))))
 (let ((?x569 (* 3 (* k m m m m))))
 (let ((?x450 (* m m m m m)))
 (let ((?x442 (* 36 (* k k k))))
 (let ((?x561 (* 108 (* k k m))))
 (let ((?x562 (* 108 (* k m m))))
 (let ((?x459 (* 36 (* m m m))))
 (let ((?x395 (* k k k m m)))
 (let ((?x49 (* k k)))
 (let ((?x389 (+ ?x49 ?x395 ?x459 ?x562 ?x561 ?x442 ?x450 ?x569 ?x568 ?x456 ?x564 ?x565 ?x566 ?x567 ?x553 ?x455 ?x592 ?x593 ?x594 ?x595 ?x601 ?x606 ?x609 ?x635 ?x636 ?x637 ?x638)))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m ?x113) 6)))
 (let (($x405 (and $x130 $x214 $x266 $x304 (not (= (* ?x119 ?x389) 0)))))
 (let ((?x468 (+ ?x456 ?x553 ?x455 (* ?x363 ?x363 ?x73 ?x73 ?x73) (* ?x319 ?x319 ?x73 ?x72))))
 (let (($x284 (not (= (* ?x119 ?x468) 0))))
 (let (($x484 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x535 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x230 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x535 $x484 $x284)))
 (rewrite (= $x230 $x405)))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x286 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x72 (+ c k)))
 (let ((?x319 (+ 1 n)))
 (let ((?x455 (* (- 1) (* ?x319 ?x319 ?x319 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72))))
 (let ((?x553 (* ?x363 ?x363 ?x363 ?x73 ?x73 ?x73)))
 (let ((?x456 (* ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x468 (+ ?x456 ?x553 ?x455 (* ?x363 ?x363 ?x73 ?x73 ?x73) (* ?x319 ?x319 ?x73 ?x72))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x284 (not (= (* ?x119 ?x468) 0))))
 (let (($x484 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x372 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x625 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m ?x113) 6)))
 (and $x130 (= ?x625 (- 4)) $x372 $x484 $x284)))))))))))))))))) :qid k!34))
 ))
 (let ((?x537 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x72 (+ c k)))
 (let ((?x319 (+ 1 n)))
 (let ((?x455 (* (- 1) (* ?x319 ?x319 ?x319 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72))))
 (let ((?x553 (* ?x363 ?x363 ?x363 ?x73 ?x73 ?x73)))
 (let ((?x456 (* ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x468 (+ ?x456 ?x553 ?x455 (* ?x363 ?x363 ?x73 ?x73 ?x73) (* ?x319 ?x319 ?x73 ?x72))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x284 (not (= (* ?x119 ?x468) 0))))
 (let (($x484 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x535 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m ?x113) 6)))
 (let (($x230 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x535 $x484 $x284)))
 (let (($x372 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x625 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x549 (and $x130 (= ?x625 (- 4)) $x372 $x484 $x284)))
 (rewrite (= $x549 $x230)))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x69 (+ n 1)))
 (let ((?x72 (+ c k)))
 (let ((?x77 (+ (* ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x74))))
 (let ((?x82 (+ (- ?x77 (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69)) (* ?x73 ?x73 ?x73 ?x74 ?x74) (* ?x72 ?x73 ?x69 ?x69))))
 (let (($x84 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x82) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x84))))))))))))))))) :qid k!34))
 ))
 (let ((?x452 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ k m)))
 (let ((?x363 (+ 6 m)))
 (let ((?x72 (+ c k)))
 (let ((?x319 (+ 1 n)))
 (let ((?x455 (* (- 1) (* ?x319 ?x319 ?x319 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72))))
 (let ((?x553 (* ?x363 ?x363 ?x363 ?x73 ?x73 ?x73)))
 (let ((?x456 (* ?x319 ?x363 ?x363 ?x363 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x468 (+ ?x456 ?x553 ?x455 (* ?x363 ?x363 ?x73 ?x73 ?x73) (* ?x319 ?x319 ?x73 ?x72))))
 (let ((?x113 (* (- 6) n)))
 (let ((?x119 (+ (- 6) m ?x113)))
 (let (($x284 (not (= (* ?x119 ?x468) 0))))
 (let (($x484 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x372 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x625 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m ?x113) 6)))
 (let (($x549 (and $x130 (= ?x625 (- 4)) $x372 $x484 $x284)))
 (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x77 (+ (* ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69) (* ?x73 ?x73 ?x73 ?x74 ?x74 ?x74))))
 (let ((?x82 (+ (- ?x77 (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69)) (* ?x73 ?x73 ?x73 ?x74 ?x74) (* ?x72 ?x73 ?x69 ?x69))))
 (let (($x84 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x82) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x84)))))
 (rewrite (= $x87 $x549))))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x532 (mp (mp @x89 (quant-intro (proof-bind ?x452) (= $x88 $x286)) $x286) (rewrite (= $x286 $x286)) $x286)))
 (let ((@x519 (mp (mp @x532 (quant-intro (proof-bind ?x537) (= $x286 $x533)) $x533) (quant-intro (proof-bind ?x96) (= $x533 $x408)) $x408)))
 (let ((@x508 (mp (mp~ @x519 (sk (~ $x408 $x376)) $x376) (rewrite (= $x376 $x258)) $x258)))
 (let ((@x247 (and-elim @x508 $x118)))
 (let ((@x175 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x118) $x151)) @x247 $x151)))
 (let (($x584 (<= ?x425 (- 6))))
 (let ((@x326 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x118) $x584)) @x247 $x584)))
 (let (($x141 (not (<= ?x229 0))))
 (let (($x244 (>= ?x229 0)))
 (let ((@x472 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x255 $x141 (not $x244))) (and-elim @x508 $x292) (or $x141 (not $x244)))))
 (let ((@x277 (unit-resolution @x472 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x244)) @x326 @x175 false) $x244) $x141)))
 ((_ th-lemma arith farkas 1 1 1) @x277 @x326 @x175 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        25
 :arith-assert-upper        26
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             159
 :arith-nonlinear-bounds    25
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      4
 :arith-tableau-max-columns 59
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.65
 :memory                    3.15
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1114301
 :num-checks                1
 :propagations              10
 :rlimit-count              3580
 :time                      0.01
 :total-time                0.01)
