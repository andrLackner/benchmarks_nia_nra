unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x493 (* (- 1) k!2)))
 (let ((?x217 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x493)))
 (let (($x179 (<= ?x217 (- 1))))
 (let (($x281 (= ?x217 (- 1))))
 (let ((?x156 (* (- 3) k!2)))
 (let ((?x589 (* (- 3) c!3)))
 (let ((?x138 (* 2 n!0)))
 (let ((?x233 (* n!0 k!2)))
 (let ((?x284 (+ 3 ?x233 (* n!0 m!1) ?x138 ?x589 ?x156)))
 (let ((?x282 (* (- 36) k!2)))
 (let ((?x608 (* (- 36) c!3)))
 (let ((?x615 (* c!3 c!3 c!3 k!2)))
 (let ((?x585 (* k!2 k!2 k!2 k!2)))
 (let ((?x373 (* (- 1) (* c!3 c!3))))
 (let ((?x135 (* (- 2) (* c!3 k!2))))
 (let ((?x197 (* 3 (* c!3 k!2 k!2 k!2))))
 (let ((?x308 (+ c!3 k!2)))
 (let ((?x279 (+ m!1 k!2)))
 (let ((?x601 (+ 6 m!1)))
 (let ((?x639 (+ 1 n!0)))
 (let ((?x498 (* 3 (* c!3 c!3 k!2 k!2))))
 (let ((?x193 (* k!2 k!2)))
 (let ((?x595 (* (- 1) ?x193)))
 (let ((?x183 (+ (* (- 12) (* m!1 k!2)) (* (- 2) (* n!0 n!0 c!3 k!2)) (* m!1 c!3 c!3 c!3) ?x595 ?x498 (* (- 36) (* n!0 c!3)) (* (- 1) (* n!0 m!1 m!1 c!3)) (* ?x639 ?x639 ?x601 ?x279 ?x279 ?x308) (* (- 36) ?x233) (* (- 1) (* n!0 n!0 k!2 k!2)) ?x197 (* (- 1) (* n!0 n!0 c!3 c!3)) (* (- 12) (* n!0 m!1 k!2)) (* 3 (* m!1 c!3 c!3 k!2)) (* 3 (* m!1 c!3 k!2 k!2)) ?x135 (* (- 2) (* n!0 c!3 c!3)) (* (- 1) (* m!1 m!1 c!3)) (* (- 12) (* m!1 c!3)) (* (- 12) (* n!0 m!1 c!3)) (* (- 4) (* n!0 c!3 k!2)) ?x373 (* m!1 k!2 k!2 k!2) (* (- 2) (* n!0 k!2 k!2)) ?x585 (* (- 1) (* m!1 m!1 k!2)) ?x615 ?x608 ?x282 (* (- 1) (* n!0 m!1 m!1 k!2)))))
 (let ((?x218 (* ?x183 ?x284)))
 (let (($x454 (= ?x218 0)))
 (let (($x304 (not $x454)))
 (let ((?x292 (+ ?x233 ?x138 ?x589 ?x493)))
 (let (($x494 (= ?x292 (- 1))))
 (let ((?x540 (+ ?x193 (* (- 9) (* n!0 c!3)) (* 9 n!0) (* (- 18) c!3) (* (- 5) k!2))))
 (let ((?x195 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x196 (= ?x195 (- 6))))
 (let (($x99 (and $x196 (= ?x540 (- 4)) $x494 $x281 $x304)))
 (let ((?x153 (+ ?x608 ?x282 ?x595 (* (- 36) (* k!2 n!0)) (* (- 1) (* k!2 m!1 m!1)) (* ?x639 ?x639 ?x601 (+ k!2 m!1) (+ k!2 m!1) ?x308) (* (- 36) (* c!3 n!0)) (* (- 1) (* c!3 m!1 m!1)) (* (- 12) (* c!3 m!1 n!0)) (* (- 12) (* k!2 m!1)) (* (- 1) (* c!3 m!1 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1 n!0)) ?x615 (* k!2 k!2 k!2 m!1) (* 3 (* c!3 k!2 k!2 m!1)) (* 3 (* c!3 c!3 k!2 m!1)) (* c!3 c!3 c!3 m!1) ?x585 ?x197 ?x498 (* (- 1) (* c!3 c!3 n!0 n!0)) (* (- 2) (* c!3 k!2 n!0 n!0)) (* (- 1) (* k!2 k!2 n!0 n!0)) ?x373 ?x135 (* (- 12) (* k!2 m!1 n!0)) (* (- 2) (* c!3 c!3 n!0)) (* (- 4) (* c!3 k!2 n!0)) (* (- 2) (* k!2 k!2 n!0)) (* (- 12) (* c!3 m!1)))))
 (let (($x258 (= (* ?x153 (+ 3 ?x589 ?x156 ?x138 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let (($x506 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x490 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) ?x595 (* 9 (* c!3 n!0)))))
 (let (($x590 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x490 4) $x506 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x258))))
 (let (($x399 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x634 (* (- 2) (* k k n))))
 (let ((?x631 (* (- 4) (* c k n))))
 (let ((?x627 (* (- 2) (* c c n))))
 (let ((?x624 (* (- 2) (* c k))))
 (let ((?x613 (* (- 1) (* c c))))
 (let ((?x612 (* (- 1) (* k k n n))))
 (let ((?x621 (* (- 2) (* c k n n))))
 (let ((?x610 (* (- 1) (* c c n n))))
 (let ((?x484 (* 3 (* c c k k))))
 (let ((?x483 (* 3 (* c k k k))))
 (let ((?x515 (* k k k k)))
 (let ((?x514 (* c c c m)))
 (let ((?x482 (* 3 (* c c k m))))
 (let ((?x481 (* 3 (* c k k m))))
 (let ((?x507 (* k k k m)))
 (let ((?x461 (* c c c k)))
 (let ((?x453 (* (- 1) (* k m m n))))
 (let ((?x451 (* (- 1) (* c m m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x466 (+ (* (- 36) c) (* (- 36) k) ?x211 (* (- 36) ?x55) (* (- 1) (* k m m)) ?x142 (* (- 36) (* c n)) (* (- 1) (* c m m)) (* (- 12) (* c m n)) (* (- 12) (* k m)) ?x451 ?x453 ?x461 ?x507 ?x481 ?x482 ?x514 ?x515 ?x483 ?x484 ?x610 ?x621 ?x612 ?x613 ?x624 (* (- 12) (* k m n)) ?x627 ?x631 ?x634 (* (- 12) (* c m)))))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 (* (- 9) n) ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* ?x466 ?x409) 0))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x527 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x253 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x268 (* (- 1) (* (+ 1 n) (+ 1 n) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) ?x268)))
 (let (($x554 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x619 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x619 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x554 (not (= (* ?x159 ?x253) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x344 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x634 (* (- 2) (* k k n))))
 (let ((?x631 (* (- 4) (* c k n))))
 (let ((?x627 (* (- 2) (* c c n))))
 (let ((?x624 (* (- 2) (* c k))))
 (let ((?x613 (* (- 1) (* c c))))
 (let ((?x612 (* (- 1) (* k k n n))))
 (let ((?x621 (* (- 2) (* c k n n))))
 (let ((?x610 (* (- 1) (* c c n n))))
 (let ((?x484 (* 3 (* c c k k))))
 (let ((?x483 (* 3 (* c k k k))))
 (let ((?x515 (* k k k k)))
 (let ((?x514 (* c c c m)))
 (let ((?x482 (* 3 (* c c k m))))
 (let ((?x481 (* 3 (* c k k m))))
 (let ((?x507 (* k k k m)))
 (let ((?x461 (* c c c k)))
 (let ((?x453 (* (- 1) (* k m m n))))
 (let ((?x451 (* (- 1) (* c m m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x466 (+ (* (- 36) c) (* (- 36) k) ?x211 (* (- 36) ?x55) (* (- 1) (* k m m)) ?x142 (* (- 36) (* c n)) (* (- 1) (* c m m)) (* (- 12) (* c m n)) (* (- 12) (* k m)) ?x451 ?x453 ?x461 ?x507 ?x481 ?x482 ?x514 ?x515 ?x483 ?x484 ?x610 ?x621 ?x612 ?x613 ?x624 (* (- 12) (* k m n)) ?x627 ?x631 ?x634 (* (- 12) (* c m)))))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 (* (- 9) n) ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x606 (and $x124 $x208 $x260 $x298 (not (= (* ?x466 ?x409) 0)))))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) (* (- 1) (* ?x341 ?x341 ?x68 ?x68)))))
 (let ((?x182 (* ?x159 (+ 3 ?x221 (* (- 4) k) (* ?x341 ?x71) (* (- 1) m) ?x59))))
 (let (($x554 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x619 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x572 (and $x124 (= ?x619 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x554 (not (= ?x182 0)))))
 (rewrite (= $x572 $x606))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (+ (* (- 1) ?x68 ?x79 ?x79 ?x72) (* ?x68 ?x71 ?x71 ?x79 ?x72 ?x72) (* ?x68 ?x68 ?x68 ?x71))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 (- ?x83 (* ?x68 ?x68 ?x72 ?x72))) 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x563 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x253 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x268 (* (- 1) (* (+ 1 n) (+ 1 n) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) ?x268)))
 (let (($x554 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x619 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x572 (and $x124 (= ?x619 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x554 (not (= (* ?x159 ?x253) 0)))))
 (let ((?x83 (+ (* (- 1) ?x68 (+ m 6) (+ m 6) (+ n 1)) (* ?x68 ?x71 ?x71 (+ m 6) (+ n 1) (+ n 1)) (* ?x68 ?x68 ?x68 ?x71))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let (($x87 (= (* ?x77 (- ?x83 (* ?x68 ?x68 (+ n 1) (+ n 1)))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x87)))))
 (rewrite (= $x90 $x572)))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x307 (mp (mp @x92 (quant-intro (proof-bind ?x563) (= $x91 $x527)) $x527) (rewrite (= $x527 $x527)) $x527)))
 (let ((@x565 (mp~ (mp @x307 (quant-intro (proof-bind ?x344) (= $x527 $x399)) $x399) (sk (~ $x399 $x590)) $x590)))
 (let ((@x295 (mp @x565 (rewrite (= $x590 $x99)) $x99)))
 (let ((@x350 (and-elim @x295 $x281)))
 (let ((@x597 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x281) $x179)) @x350 $x179)))
 (let (($x201 (>= ?x217 (- 1))))
 (let ((@x511 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x281) $x201)) @x350 $x201)))
 (let (($x133 (<= ?x292 (- 1))))
 (let ((@x359 (and-elim @x295 $x494)))
 (let ((@x528 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x494) $x133)) @x359 $x133)))
 (let (($x176 (>= ?x292 (- 1))))
 (let ((@x513 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x494) $x176)) @x359 $x176)))
 (let (($x236 (<= ?x195 (- 6))))
 (let ((@x573 (and-elim @x295 $x196)))
 (let ((@x101 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x196) $x236)) @x573 $x236)))
 (let (($x271 (>= ?x195 (- 6))))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x196) $x271)) @x573 $x271)))
 (let (($x1962 (>= ?x284 0)))
 (let ((@x1990 ((_ th-lemma arith) (hypothesis (not $x1962)) @x104 @x101 @x511 @x597 @x511 @x597 @x513 @x528 @x511 @x597 false)))
 (let ((@x2033 (lemma @x1990 $x1962)))
 (let (($x2047 (not (<= ?x218 0))))
 (let (($x237 (>= ?x218 0)))
 (let (($x2020 (>= ?x183 0)))
 (let (($x216 (not $x237)))
 (let ((@x406 (hypothesis $x216)))
 (let ((@x2036 ((_ th-lemma arith) @x406 (hypothesis (not $x2020)) @x104 @x101 @x513 @x528 @x511 @x597 false)))
 (let ((@x1819 ((_ th-lemma arith farkas 1 1 1) @x406 (unit-resolution (lemma @x2036 (or $x2020 $x237)) @x406 $x2020) @x2033 false)))
 (let ((@x2067 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x454 $x2047 $x216)) (and-elim @x295 $x304) (or $x2047 $x216))))
 (let ((@x2028 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x2067 (lemma @x1819 $x237) $x2047) @x2033 (hypothesis (<= ?x284 0)) false)))
 ((_ th-lemma arith) (lemma @x2028 (not (<= ?x284 0))) @x104 @x101 @x513 @x528 @x511 @x597 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 259
 :arith-assert-diseq        25
 :arith-assert-lower        7337
 :arith-assert-upper        3333
 :arith-bound-prop          23
 :arith-branch-var          43
 :arith-conflicts           100
 :arith-eq-adapter          28
 :arith-fixed-eqs           451
 :arith-gcd-tests           625
 :arith-gomory-cuts         32
 :arith-grobner             196
 :arith-ineq-splits         43
 :arith-max-min             23864
 :arith-nonlinear-bounds    911
 :arith-nonlinear-horner    2557
 :arith-num-rows            31
 :arith-offset-eqs          20
 :arith-patches             125
 :arith-patches_succ        39
 :arith-pivots              6652
 :arith-pseudo-nonlinear    780
 :arith-row-summations      61505
 :arith-tableau-max-columns 96
 :arith-tableau-max-rows    31
 :conflicts                 109
 :decisions                 494
 :del-clause                242
 :final-checks              497
 :max-memory                20.57
 :memory                    19.25
 :minimized-lits            21
 :mk-bool-var               656
 :mk-clause                 505
 :num-allocs                248062503
 :num-checks                1
 :propagations              964
 :restarts                  1
 :rlimit-count              5189275
 :time                      2.12
 :total-time                2.13)
