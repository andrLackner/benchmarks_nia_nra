unsat
((set-logic NIA)
(declare-fun a!4 () Int)
(declare-fun q!3 () Int)
(declare-fun p!5 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(declare-fun s!0 () Int)
(proof
(let ((?x438 (* q!3 a!4)))
 (let ((?x128 (* q00 a00)))
 (let ((?x174 (* (- 1) ?x128)))
 (let ((?x113 (* p00 b00)))
 (let ((?x372 (+ ?x113 ?x174 (* (- 1) (* b!2 p!5)) ?x438)))
 (let (($x613 (>= ?x372 0)))
 (let (($x362 (= ?x372 0)))
 (let ((?x204 (* b!2 p!5)))
 (let ((?x127 (* (- 1) ?x113)))
 (let ((?x390 (+ ?x127 ?x128 ?x204 (* (- 1) ?x438))))
 (let ((?x167 (* (- 1) a!4)))
 (let ((?x615 (+ b!2 ?x167)))
 (let ((?x221 (* (- 1) r!1)))
 (let ((?x403 (+ s!0 ?x221)))
 (let ((?x609 (* ?x403 ?x403 ?x403 ?x615 ?x615 ?x615 (+ q!3 (* (- 1) p!5)) ?x390 r!1 a!4 a!4 p!5 p!5 p!5)))
 (let (($x611 (= ?x609 0)))
 (let ((?x190 (* (- 1) q!3)))
 (let ((?x399 (+ ?x190 p!5)))
 (let ((?x467 (* (- 1) b!2)))
 (let ((?x402 (+ ?x467 a!4)))
 (let ((?x286 (* (+ (* (- 1) s!0) r!1) ?x402 ?x402 ?x399 ?x399 ?x399 ?x390 s!0 s!0 s!0 b!2 b!2 b!2 q!3)))
 (let (($x404 (= ?x286 0)))
 (let (($x288 (not $x404)))
 (let (($x610 (or $x288 (not $x611))))
 (let ((?x411 (+ (* p00 s00 b!2) (* (- 1) (* p00 b00 s!0)) (* (- 1) (* q00 r00 b!2)) (* q00 a00 s!0) (* r00 b00 q!3) (* (- 1) (* s00 a00 q!3)))))
 (let ((?x553 (+ (* r00 b00 p!5) (* (- 1) (* q00 r00 a!4)) (* p00 s00 a!4) (* (- 1) (* p00 b00 r!1)) (* (- 1) (* s00 a00 p!5)) (* q00 a00 r!1))))
 (let ((?x124 (* s00 a00)))
 (let ((?x446 (+ ?x124 (* (- 1) (* r00 b00)) (* (- 1) (* s!0 a!4)) (* r!1 b!2))))
 (let ((?x37 (* p00 s00)))
 (let ((?x184 (+ ?x37 (* (- 1) (* q00 r00)) (* r!1 q!3) (* (- 1) (* s!0 p!5)))))
 (let (($x624 (and (= ?x184 0) (= ?x446 0) $x362 (= ?x553 0) (= ?x411 0) $x610)))
 (let ((?x135 (* p!5 b!2)))
 (let ((?x262 (+ ?x127 (* (- 1) (* a!4 q!3)) ?x128 ?x135)))
 (let ((?x169 (+ ?x167 b!2)))
 (let ((?x164 (+ ?x221 s!0)))
 (let ((?x171 (* ?x164 ?x164 ?x164 ?x169 ?x169 ?x169 (+ (* (- 1) p!5) q!3) ?x262 r!1 a!4 a!4 p!5 p!5 p!5)))
 (let ((?x488 (+ p!5 ?x190)))
 (let ((?x342 (+ a!4 ?x467)))
 (let ((?x163 (* (+ r!1 (* (- 1) s!0)) ?x342 ?x342 ?x488 ?x488 ?x488 ?x262 s!0 s!0 s!0 b!2 b!2 b!2 q!3)))
 (let ((?x269 (+ (* b!2 q00 r00) (* (- 1) (* b!2 p00 s00)) (* s!0 p00 b00) (* (- 1) (* q!3 r00 b00)) (* q!3 s00 a00) (* (- 1) (* s!0 q00 a00)))))
 (let ((?x494 (+ (* a!4 p00 s00) (* (- 1) (* a!4 q00 r00)) (* p!5 r00 b00) (* (- 1) (* r!1 p00 b00)) (* (- 1) (* p!5 s00 a00)) (* r!1 q00 a00))))
 (let ((?x142 (* r00 b00)))
 (let ((?x131 (* (- 1) ?x124)))
 (let ((?x41 (* q00 r00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let (($x388 (and (= (+ (* p!5 s!0) ?x133 ?x41 (* (- 1) (* q!3 r!1))) 0) (= (+ (* a!4 s!0) (* (- 1) (* b!2 r!1)) ?x131 ?x142) 0) (= (+ ?x113 (* a!4 q!3) ?x174 (* (- 1) ?x135)) 0) (= ?x494 0) (= ?x269 0) (or (not (= ?x163 0)) (not (= ?x171 0))))))
 (let (($x389 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x159 (* p b)))
 (let ((?x128 (* q00 a00)))
 (let ((?x120 (* a q)))
 (let ((?x121 (* (- 1) ?x120)))
 (let ((?x113 (* p00 b00)))
 (let ((?x127 (* (- 1) ?x113)))
 (let ((?x443 (+ ?x127 ?x121 ?x128 ?x159)))
 (let ((?x255 (* (- 1) p)))
 (let ((?x267 (+ ?x255 q)))
 (let ((?x349 (* (- 1) a)))
 (let ((?x491 (+ ?x349 b)))
 (let ((?x451 (* (- 1) r)))
 (let ((?x447 (+ ?x451 s)))
 (let ((?x504 (* ?x447 ?x447 ?x447 ?x491 ?x491 ?x491 ?x267 ?x443 r a a p p p)))
 (let ((?x302 (+ p (* (- 1) q))))
 (let ((?x252 (* (- 1) b)))
 (let ((?x254 (+ a ?x252)))
 (let ((?x340 (+ r (* (- 1) s))))
 (let ((?x181 (* ?x340 ?x254 ?x254 ?x302 ?x302 ?x302 ?x443 s s s b b b q)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x306 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x311 (= ?x306 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x242 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x243 (= ?x242 0)))
 (let (($x177 (= (+ ?x113 ?x120 (* (- 1) ?x128) (* (- 1) ?x159)) 0)))
 (let ((?x142 (* r00 b00)))
 (let ((?x124 (* s00 a00)))
 (let ((?x131 (* (- 1) ?x124)))
 (let ((?x49 (* a s)))
 (let (($x157 (= (+ ?x49 (* (- 1) (* b r)) ?x131 ?x142) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x152 (= (+ ?x33 ?x133 ?x41 (* (- 1) (* q r))) 0)))
 (and $x152 $x157 $x177 $x243 $x311 (or (not (= ?x181 0)) (not (= ?x504 0)))))))))))))))))))))))))))))))))))))))) :qid k!39))
 ))
 (let (($x138 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x57 (* b00 p00)))
 (let ((?x259 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let ((?x220 (+ (* (- 1) (* (+ q (* (- 1) p)) a)) ?x55 ?x259 (* (+ b (* (- 1) a)) p))))
 (let ((?x255 (* (- 1) p)))
 (let ((?x280 (+ q ?x255)))
 (let ((?x349 (* (- 1) a)))
 (let ((?x196 (+ b ?x349)))
 (let ((?x451 (* (- 1) r)))
 (let ((?x228 (+ s ?x451)))
 (let ((?x145 (* ?x228 ?x228 ?x228 ?x196 ?x196 ?x196 ?x280 ?x220 r a a p p p)))
 (let ((?x191 (+ (* (- 1) (* (+ a (* (- 1) b)) q)) ?x55 ?x259 (* (+ p (* (- 1) q)) b))))
 (let ((?x302 (+ p (* (- 1) q))))
 (let ((?x252 (* (- 1) b)))
 (let ((?x254 (+ a ?x252)))
 (let ((?x340 (+ r (* (- 1) s))))
 (let ((?x224 (* ?x340 ?x254 ?x254 ?x302 ?x302 ?x302 ?x191 s s s b b b q)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x203 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x490 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x51 (* b00 r00)))
 (let ((?x479 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (and (= (+ (* (- 1) (* r q)) (* s p) ?x133 ?x41) 0) (= ?x479 0) (= (+ (* (- 1) (* q a)) ?x55 ?x259 (* b p)) 0) (= ?x490 0) (= ?x203 0) (or (not (= ?x224 0)) (not (= ?x145 0)))))))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x214 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x159 (* p b)))
 (let ((?x128 (* q00 a00)))
 (let ((?x120 (* a q)))
 (let ((?x121 (* (- 1) ?x120)))
 (let ((?x113 (* p00 b00)))
 (let ((?x127 (* (- 1) ?x113)))
 (let ((?x443 (+ ?x127 ?x121 ?x128 ?x159)))
 (let ((?x255 (* (- 1) p)))
 (let ((?x267 (+ ?x255 q)))
 (let ((?x349 (* (- 1) a)))
 (let ((?x491 (+ ?x349 b)))
 (let ((?x451 (* (- 1) r)))
 (let ((?x447 (+ ?x451 s)))
 (let ((?x504 (* ?x447 ?x447 ?x447 ?x491 ?x491 ?x491 ?x267 ?x443 r a a p p p)))
 (let ((?x302 (+ p (* (- 1) q))))
 (let ((?x252 (* (- 1) b)))
 (let ((?x254 (+ a ?x252)))
 (let ((?x340 (+ r (* (- 1) s))))
 (let ((?x181 (* ?x340 ?x254 ?x254 ?x302 ?x302 ?x302 ?x443 s s s b b b q)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x306 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x311 (= ?x306 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x242 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x243 (= ?x242 0)))
 (let (($x177 (= (+ ?x113 ?x120 (* (- 1) ?x128) (* (- 1) ?x159)) 0)))
 (let ((?x142 (* r00 b00)))
 (let ((?x124 (* s00 a00)))
 (let ((?x131 (* (- 1) ?x124)))
 (let ((?x49 (* a s)))
 (let (($x157 (= (+ ?x49 (* (- 1) (* b r)) ?x131 ?x142) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x152 (= (+ ?x33 ?x133 ?x41 (* (- 1) (* q r))) 0)))
 (let (($x383 (and $x152 $x157 $x177 $x243 $x311 (or (not (= ?x181 0)) (not (= ?x504 0))))))
 (let ((?x57 (* b00 p00)))
 (let ((?x259 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let ((?x220 (+ (* (- 1) (* (+ q ?x255) a)) ?x55 ?x259 (* (+ b ?x349) p))))
 (let ((?x280 (+ q ?x255)))
 (let ((?x196 (+ b ?x349)))
 (let ((?x228 (+ s ?x451)))
 (let ((?x145 (* ?x228 ?x228 ?x228 ?x196 ?x196 ?x196 ?x280 ?x220 r a a p p p)))
 (let ((?x224 (* ?x340 ?x254 ?x254 ?x302 ?x302 ?x302 (+ (* (- 1) (* ?x254 q)) ?x55 ?x259 (* ?x302 b)) s s s b b b q)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x203 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x490 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x51 (* b00 r00)))
 (let ((?x479 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x130 (and (= (+ (* (- 1) (* r q)) (* s p) ?x133 ?x41) 0) (= ?x479 0) (= (+ (* (- 1) (* q a)) ?x55 ?x259 (* b p)) 0) (= ?x490 0) (= ?x203 0) (or (not (= ?x224 0)) (not (= ?x145 0))))))
 (rewrite (= $x130 $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x108 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x102 (- s r)))
 (let ((?x95 (- q p)))
 (let ((?x99 (- b a)))
 (let ((?x31 (- 1)))
 (let ((?x101 (+ (- (+ (* ?x31 a ?x95) (* a00 q00)) (* b00 p00)) (* ?x99 p))))
 (let ((?x103 (* ?x101 ?x31 a a ?x99 ?x99 ?x99 p p p ?x95 r ?x102 ?x102 ?x102)))
 (let ((?x88 (- p q)))
 (let ((?x84 (- a b)))
 (let ((?x90 (+ (- (+ (* ?x31 ?x84 q) (* a00 q00)) (* b00 p00)) (* b ?x88))))
 (let ((?x92 (* ?x90 ?x31 ?x84 ?x84 b b b ?x88 ?x88 ?x88 q (- r s) s s s)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* ?x31 a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let ((?x41 (* q00 r00)))
 (let (($x44 (= (+ (- (+ (* ?x31 q r) (* p s)) (* p00 s00)) ?x41) 0)))
 (and $x44 (= (+ (- (* ?x31 b r) (* a00 s00)) ?x49 ?x51) 0) (= ?x60 0) (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= ?x92 0)) (not (= ?x103 0))))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x123 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x57 (* b00 p00)))
 (let ((?x259 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let ((?x220 (+ (* (- 1) (* (+ q (* (- 1) p)) a)) ?x55 ?x259 (* (+ b (* (- 1) a)) p))))
 (let ((?x255 (* (- 1) p)))
 (let ((?x280 (+ q ?x255)))
 (let ((?x349 (* (- 1) a)))
 (let ((?x196 (+ b ?x349)))
 (let ((?x451 (* (- 1) r)))
 (let ((?x228 (+ s ?x451)))
 (let ((?x145 (* ?x228 ?x228 ?x228 ?x196 ?x196 ?x196 ?x280 ?x220 r a a p p p)))
 (let ((?x191 (+ (* (- 1) (* (+ a (* (- 1) b)) q)) ?x55 ?x259 (* (+ p (* (- 1) q)) b))))
 (let ((?x302 (+ p (* (- 1) q))))
 (let ((?x252 (* (- 1) b)))
 (let ((?x254 (+ a ?x252)))
 (let ((?x340 (+ r (* (- 1) s))))
 (let ((?x224 (* ?x340 ?x254 ?x254 ?x302 ?x302 ?x302 ?x191 s s s b b b q)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x203 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x490 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x51 (* b00 r00)))
 (let ((?x479 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let (($x130 (and (= (+ (* (- 1) (* r q)) (* s p) ?x133 ?x41) 0) (= ?x479 0) (= (+ (* (- 1) (* q a)) ?x55 ?x259 (* b p)) 0) (= ?x490 0) (= ?x203 0) (or (not (= ?x224 0)) (not (= ?x145 0))))))
 (let ((?x102 (- s r)))
 (let ((?x95 (- q p)))
 (let ((?x99 (- b a)))
 (let ((?x31 (- 1)))
 (let ((?x103 (* (+ (- (+ (* ?x31 a ?x95) ?x55) ?x57) (* ?x99 p)) ?x31 a a ?x99 ?x99 ?x99 p p p ?x95 r ?x102 ?x102 ?x102)))
 (let ((?x88 (- p q)))
 (let ((?x84 (- a b)))
 (let ((?x92 (* (+ (- (+ (* ?x31 ?x84 q) ?x55) ?x57) (* b ?x88)) ?x31 ?x84 ?x84 b b b ?x88 ?x88 ?x88 q (- r s) s s s)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x53 (= (+ (- (* ?x31 b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x107 (and (= (+ (- (+ (* ?x31 q r) (* p s)) ?x37) ?x41) 0) $x53 (= (+ (- (+ (* ?x31 a q) ?x55) ?x57) (* b p)) 0) (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= ?x92 0)) (not (= ?x103 0))))))
 (rewrite (= $x107 $x130))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x109 (asserted $x108)))
 (let ((@x331 (mp (mp @x109 (quant-intro (proof-bind ?x123) (= $x108 $x138)) $x138) (rewrite (= $x138 $x138)) $x138)))
 (let ((@x385 (mp~ (mp @x331 (quant-intro (proof-bind ?x214) (= $x138 $x389)) $x389) (sk (~ $x389 $x388)) $x388)))
 (let ((@x618 (mp @x385 (rewrite (= $x388 $x624)) $x624)))
 (let ((@x628 (and-elim @x618 $x362)))
 (let ((@x431 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x362) $x613)) @x628 $x613)))
 (let (($x614 (<= ?x372 0)))
 (let ((@x422 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x362) $x614)) @x628 $x614)))
 (let (($x492 (not (<= ?x286 0))))
 (let (($x153 (>= ?x609 0)))
 (let (($x391 (<= ?x609 0)))
 (let ((@x495 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x611 (not $x391) (not $x153))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x391)) @x422 @x431 false) $x391) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x153)) @x422 @x431 false) $x153) $x611)))
 (let (($x392 (>= ?x286 0)))
 (let ((@x236 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x404 $x492 (not $x392))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x392)) @x422 @x431 false) $x392) (unit-resolution (and-elim @x618 $x610) @x495 $x288) $x492)))
 ((_ th-lemma arith farkas 1 1 1) @x236 @x422 @x431 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 10
 :arith-assert-diseq        3
 :arith-assert-lower        19
 :arith-assert-upper        18
 :arith-conflicts           4
 :arith-eq-adapter          11
 :arith-fixed-eqs           6
 :arith-grobner             4
 :arith-max-min             352
 :arith-nonlinear-horner    42
 :arith-num-rows            12
 :arith-pivots              5
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    12
 :conflicts                 4
 :decisions                 7
 :del-clause                27
 :final-checks              4
 :max-memory                19.59
 :memory                    19.11
 :mk-bool-var               33
 :mk-clause                 40
 :num-allocs                491909
 :num-checks                1
 :propagations              19
 :rlimit-count              7797
 :time                      0.01
 :total-time                0.02)
