unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x351 (* u!1 u!1)))
 (let ((?x103 (* (- 4) r!2)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x346 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 1) (* v!0 v!0)) ?x103 (* (- 2) u!1) ?x351 (* 2 v!0))))
 (let (($x119 (>= ?x346 0)))
 (let (($x359 (= ?x346 0)))
 (let ((?x338 (* (- 2) v!0)))
 (let ((?x263 (* (- 1) ?x351)))
 (let ((?x137 (* 2 u!1)))
 (let ((?x128 (* 4 r!2)))
 (let ((?x124 (* v!0 v!0)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x306 (+ ?x102 ?x118 ?x41 ?x46 ?x194 ?x124 ?x128 ?x137 ?x263 ?x338)))
 (let ((?x189 (* (- 1) (* u!1 u!1 u!1))))
 (let ((?x329 (* (- 4) ?x351)))
 (let ((?x165 (* (- 4) u!1)))
 (let ((?x207 (* v!0 v!0 v!0)))
 (let ((?x321 (* (- 4) (* r!2 u!1))))
 (let ((?x146 (* (- 1) (* r!2 u!1 u!1))))
 (let ((?x152 (* (+ ?x146 ?x321 ?x103 ?x207 ?x165 ?x329 ?x189) ?x306)))
 (let (($x151 (= ?x152 0)))
 (let (($x153 (not $x151)))
 (let ((?x193 (* 12 v!0)))
 (let ((?x387 (* u!1 u!1 v!0)))
 (let ((?x238 (* 6 ?x124)))
 (let ((?x160 (* (+ 8 ?x238 ?x146 ?x207 ?x387 ?x193) ?x306)))
 (let (($x402 (= ?x160 0)))
 (let (($x366 (or (not $x402) $x153)))
 (let (($x116 (and $x359 $x366)))
 (let ((?x122 (+ ?x128 ?x137 ?x338 ?x102 ?x118 ?x41 ?x263 ?x124 ?x46 ?x194)))
 (let (($x390 (or (not (= (* (+ ?x103 ?x165 ?x329 ?x207 ?x321 ?x146 ?x189) ?x122) 0)) (not (= (* (+ 8 ?x193 ?x238 ?x207 ?x387 ?x146) ?x122) 0)))))
 (let (($x214 (and (= ?x122 0) $x390)))
 (let (($x142 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x326 (* (- 1) (* r u u))))
 (let ((?x168 (* u u v)))
 (let ((?x87 (* v v v)))
 (let ((?x365 (* 6 ?x45)))
 (let (($x379 (not (= (* (+ 8 (* 12 v) ?x365 ?x87 ?x168 ?x326) ?x200) 0))))
 (let ((?x444 (* (- 1) (* u u u))))
 (let ((?x409 (+ (* (- 4) r) (* (- 4) u) (* (- 4) ?x43) ?x87 (* (- 4) (* r u)) ?x326 ?x444)))
 (let (($x275 (not (= (* ?x409 ?x200) 0))))
 (let (($x205 (= ?x200 0)))
 (and $x205 (or $x275 $x379)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x163 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x326 (* (- 1) (* r u u))))
 (let ((?x339 (* 2 (* v 2))))
 (let ((?x168 (* u u v)))
 (let ((?x87 (* v v v)))
 (let ((?x365 (* 6 ?x45)))
 (let ((?x363 (* 8 v)))
 (let ((?x444 (* (- 1) (* u u u))))
 (let ((?x409 (+ (* (- 4) r) (* (- 4) u) (* (- 4) ?x43) ?x87 (* (- 4) (* r u)) ?x326 ?x444)))
 (let (($x275 (not (= (* ?x409 ?x200) 0))))
 (let (($x144 (or $x275 (not (= (* (+ 8 ?x363 ?x365 ?x87 ?x168 ?x339 ?x326) ?x200) 0)))))
 (let (($x205 (= ?x200 0)))
 (and $x205 $x144))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x287 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x326 (* (- 1) (* r u u))))
 (let ((?x168 (* u u v)))
 (let ((?x87 (* v v v)))
 (let ((?x365 (* 6 ?x45)))
 (let (($x379 (not (= (* (+ 8 (* 12 v) ?x365 ?x87 ?x168 ?x326) ?x200) 0))))
 (let ((?x444 (* (- 1) (* u u u))))
 (let ((?x409 (+ (* (- 4) r) (* (- 4) u) (* (- 4) ?x43) ?x87 (* (- 4) (* r u)) ?x326 ?x444)))
 (let (($x275 (not (= (* ?x409 ?x200) 0))))
 (let (($x205 (= ?x200 0)))
 (let (($x274 (and $x205 (or $x275 $x379))))
 (let ((?x339 (* 2 (* v 2))))
 (let ((?x363 (* 8 v)))
 (let (($x144 (or $x275 (not (= (* (+ 8 ?x363 ?x365 ?x87 ?x168 ?x339 ?x326) ?x200) 0)))))
 (let (($x202 (and $x205 $x144)))
 (rewrite (= $x202 $x274))))))))))))))))))))))))))))))
 ))
 (let (($x111 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x252 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x378 (+ (* (- 1) (* (+ r (* (- 1) v)) u u)) (* (+ 2 v) (+ 2 v) (+ 2 v)))))
 (let ((?x45 (* v v)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x174 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x87 (* v v v)))
 (let ((?x216 (* (+ (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u))) ?x87) ?x174)))
 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= ?x216 0)) (not (= (* ?x378 ?x252) 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x249 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x326 (* (- 1) (* r u u))))
 (let ((?x339 (* 2 (* v 2))))
 (let ((?x168 (* u u v)))
 (let ((?x87 (* v v v)))
 (let ((?x365 (* 6 ?x45)))
 (let ((?x363 (* 8 v)))
 (let ((?x444 (* (- 1) (* u u u))))
 (let ((?x409 (+ (* (- 4) r) (* (- 4) u) (* (- 4) ?x43) ?x87 (* (- 4) (* r u)) ?x326 ?x444)))
 (let (($x275 (not (= (* ?x409 ?x200) 0))))
 (let (($x144 (or $x275 (not (= (* (+ 8 ?x363 ?x365 ?x87 ?x168 ?x339 ?x326) ?x200) 0)))))
 (let (($x205 (= ?x200 0)))
 (let (($x202 (and $x205 $x144)))
 (let ((?x252 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x378 (+ (* (- 1) (* (+ r (* (- 1) v)) u u)) (* (+ 2 v) (+ 2 v) (+ 2 v)))))
 (let ((?x174 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x216 (* (+ (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u))) ?x87) ?x174)))
 (let (($x169 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= ?x216 0)) (not (= (* ?x378 ?x252) 0))))))
 (rewrite (= $x169 $x202)))))))))))))))))))))))))))))))))
 ))
 (let (($x94 (exists ((r Int) (u Int) (v Int) )(! (let ((?x87 (* v v v)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x89 (* (- ?x84 ?x48) (+ (* (- 1) (+ r u) (+ u 2) (+ u 2)) ?x87))))
 (let ((?x69 (+ (* (- 1) (- r v) u u) (* (+ v 2) (+ v 2) (+ v 2)))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= (* (- ?x63 ?x48) ?x69) 0)) (not (= ?x89 0))))))))))))))))))) :qid k!28))
 ))
 (let ((?x139 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x252 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x378 (+ (* (- 1) (* (+ r (* (- 1) v)) u u)) (* (+ 2 v) (+ 2 v) (+ 2 v)))))
 (let ((?x45 (* v v)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x174 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x87 (* v v v)))
 (let ((?x216 (* (+ (* (- 1) (* (+ 2 u) (+ 2 u) (+ r u))) ?x87) ?x174)))
 (let (($x169 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= ?x216 0)) (not (= (* ?x378 ?x252) 0))))))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x89 (* (- ?x84 ?x48) (+ (* (- 1) (+ r u) (+ u 2) (+ u 2)) ?x87))))
 (let ((?x69 (+ (* (- 1) (- r v) u u) (* (+ v 2) (+ v 2) (+ v 2)))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x93 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= (* (- ?x63 ?x48) ?x69) 0)) (not (= ?x89 0))))))
 (rewrite (= $x93 $x169))))))))))))))))))))))))))))))
 ))
 (let ((@x95 (asserted $x94)))
 (let ((@x254 (mp (mp @x95 (quant-intro (proof-bind ?x139) (= $x94 $x111)) $x111) (rewrite (= $x111 $x111)) $x111)))
 (let ((@x186 (mp (mp @x254 (quant-intro (proof-bind ?x249) (= $x111 $x163)) $x163) (quant-intro (proof-bind ?x287) (= $x163 $x142)) $x142)))
 (let ((@x195 (mp (mp~ @x186 (sk (~ $x142 $x214)) $x214) (rewrite (= $x214 $x116)) $x116)))
 (let ((@x141 (and-elim @x195 $x359)))
 (let ((@x406 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x359) $x119)) @x141 $x119)))
 (let (($x178 (<= ?x346 0)))
 (let ((@x356 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x359) $x178)) @x141 $x178)))
 (let (($x352 (not (<= ?x152 0))))
 (let (($x222 (>= ?x152 0)))
 (let (($x154 (>= ?x160 0)))
 (let (($x173 (<= ?x160 0)))
 (let ((@x232 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x402 (not $x173) (not $x154))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x173)) @x356 @x406 false) $x173) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x154)) @x356 @x406 false) $x154) $x402)))
 (let ((@x241 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x151 $x352 (not $x222))) (unit-resolution (and-elim @x195 $x366) @x232 $x153) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x222)) @x356 @x406 false) $x222) $x352)))
 ((_ th-lemma arith farkas 1 1 1) @x241 @x356 @x406 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        33
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             144
 :arith-nonlinear-bounds    16
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.58
 :memory                    3.07
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1111989
 :num-checks                1
 :propagations              14
 :rlimit-count              2889
 :time                      0.01
 :total-time                0.02)
