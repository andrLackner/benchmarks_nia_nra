unsat
((set-logic NIA)
(proof
(let (($x54 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x47 (* ?x44 y00 y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x44 ?x44 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x48 (+ ?x45 ?x46 ?x47)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x52)))))))))))))))) :qid k!29))
 ))
 (let (($x320 (= $x54 false)))
 (let (($x313 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x319 (elim-unused (= $x313 false))))
 (let (($x316 (= $x54 $x313)))
 (let ((?x372 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x47 (* ?x44 y00 y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x44 ?x44 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x48 (+ ?x45 ?x46 ?x47)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x49 (* ?x42 ?x48)))
 (let (($x50 (= ?x49 0)))
 (let (($x51 (not $x50)))
 (let (($x52 (or $x51)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x53 (and $x33 $x41 $x52)))
 (let (($x311 (= $x53 false)))
 (let (($x350 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x83 (= (+ (* (- 1) y00) y) 0)))
 (let (($x366 (and $x83 $x350 false)))
 (let (($x304 (= $x52 false)))
 (let ((@x303 (rewrite (= (or false) false))))
 (let (($x299 (or false)))
 (let (($x300 (= $x52 $x299)))
 (let (($x297 (= $x51 false)))
 (let ((@x296 (rewrite (= (not true) false))))
 (let (($x292 (not true)))
 (let (($x293 (= $x51 $x292)))
 (let (($x290 (= $x50 true)))
 (let ((@x289 (rewrite (= (= 0 0) true))))
 (let (($x285 (= 0 0)))
 (let (($x286 (= $x50 $x285)))
 (let ((?x59 (* (- 1) y00)))
 (let ((?x81 (+ r ?x59)))
 (let ((?x78 (+ 1 q)))
 (let ((?x348 (+ (* (- 1) (* y00 y00 ?x78 ?x78 ?x81 ?x81 ?x81)) (* y00 y00 ?x78 ?x78 ?x81 ?x81) (* y00 y00 ?x81))))
 (let ((?x352 (* 0 ?x348)))
 (let ((@x75 (trans (monotonicity (rewrite (= ?x30 ?x59)) (= ?x42 (+ ?x59 y00))) (rewrite (= (+ ?x59 y00) 0)) (= ?x42 0))))
 (let ((@x359 (trans (monotonicity @x75 (rewrite (= ?x48 ?x348)) (= ?x49 ?x352)) (rewrite (= ?x352 0)) $x50)))
 (let ((@x363 (trans (monotonicity (trans (monotonicity @x359 $x286) @x289 $x290) $x293) @x296 $x297)))
 (let ((@x368 (monotonicity (rewrite (= $x33 $x83)) (rewrite (= $x41 $x350)) (trans (monotonicity @x363 $x300) @x303 $x304) (= $x53 $x366))))
 (trans @x368 (rewrite (= $x366 false)) $x311)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (mp @x55 (trans (quant-intro (proof-bind ?x372) $x316) @x319 $x320) false))))))))))

(:max-memory   19.05
 :memory       19.05
 :num-allocs   237442
 :rlimit-count 250
 :time         0.00
 :total-time   0.02)
