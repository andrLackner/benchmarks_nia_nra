unsat
((set-logic NIA)
(proof
(let (($x52 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (+ q 1)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 ?x43)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x47 (* ?x42 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let (($x49 (not $x48)))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x50)))))))))))))) :qid k!29))
 ))
 (let (($x237 (= $x52 false)))
 (let (($x230 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x236 (elim-unused (= $x230 false))))
 (let (($x233 (= $x52 $x230)))
 (let ((?x290 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (+ q 1)))
 (let ((?x45 (* ?x43 ?x43 ?x43 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 ?x43)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x47 (* ?x42 ?x46)))
 (let (($x48 (= ?x47 0)))
 (let (($x49 (not $x48)))
 (let (($x50 (or $x49)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x51 (and $x33 $x41 $x50)))
 (let (($x228 (= $x51 false)))
 (let (($x267 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x81 (= (+ (* (- 1) y00) y) 0)))
 (let (($x284 (and $x81 $x267 false)))
 (let (($x221 (= $x50 false)))
 (let ((@x220 (rewrite (= (or false) false))))
 (let (($x216 (or false)))
 (let (($x217 (= $x50 $x216)))
 (let (($x214 (= $x49 false)))
 (let ((@x213 (rewrite (= (not true) false))))
 (let (($x209 (not true)))
 (let (($x210 (= $x49 $x209)))
 (let (($x207 (= $x48 true)))
 (let ((@x206 (rewrite (= (= 0 0) true))))
 (let (($x202 (= 0 0)))
 (let (($x203 (= $x48 $x202)))
 (let ((?x76 (+ 1 q)))
 (let ((?x248 (* y00 y00 ?x76 ?x76 ?x76)))
 (let ((?x240 (* (- 1) (* ?x76 ?x76 ?x76))))
 (let ((?x264 (+ ?x240 (* (- 1) ?x248))))
 (let ((?x272 (* 0 ?x264)))
 (let ((@x78 (rewrite (= ?x43 ?x76))))
 (let ((@x127 (monotonicity @x78 @x78 @x78 (= ?x45 (* ?x76 ?x76 ?x76 y00 y00)))))
 (let ((@x255 (trans @x127 (rewrite (= (* ?x76 ?x76 ?x76 y00 y00) ?x248)) (= ?x45 ?x248))))
 (let ((@x84 (monotonicity (rewrite (= ?x28 (- 1))) @x78 @x78 @x78 (= ?x44 (* (- 1) ?x76 ?x76 ?x76)))))
 (let ((@x247 (trans @x84 (rewrite (= (* (- 1) ?x76 ?x76 ?x76) ?x240)) (= ?x44 ?x240))))
 (let ((@x271 (trans (monotonicity @x247 @x255 (= ?x46 (- ?x240 ?x248))) (rewrite (= (- ?x240 ?x248) ?x264)) (= ?x46 ?x264))))
 (let ((@x66 (monotonicity (rewrite (= ?x30 (* (- 1) y00))) (= ?x42 (+ (* (- 1) y00) y00)))))
 (let ((@x73 (trans @x66 (rewrite (= (+ (* (- 1) y00) y00) 0)) (= ?x42 0))))
 (let ((@x277 (trans (monotonicity @x73 @x271 (= ?x47 ?x272)) (rewrite (= ?x272 0)) $x48)))
 (let ((@x281 (trans (monotonicity (trans (monotonicity @x277 $x203) @x206 $x207) $x210) @x213 $x214)))
 (let ((@x286 (monotonicity (rewrite (= $x33 $x81)) (rewrite (= $x41 $x267)) (trans (monotonicity @x281 $x217) @x220 $x221) (= $x51 $x284))))
 (trans @x286 (rewrite (= $x284 false)) $x228))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (mp @x53 (trans (quant-intro (proof-bind ?x290) $x233) @x236 $x237) false))))))))))

(:max-memory   3.34
 :memory       3.04
 :mk-bool-var  5
 :num-allocs   874174
 :rlimit-count 163
 :time         0.01
 :total-time   0.01)
