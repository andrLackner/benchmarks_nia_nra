unsat
((set-logic NIA)
(proof
(let (($x960 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x1111 (* q d d)))
 (let ((?x732 (* r d)))
 (let ((?x747 (* (- 4) ?x732)))
 (let ((?x731 (* (- 2) (* q d))))
 (let ((?x658 (* 4 (* x d))))
 (let ((?x276 (* 4 (* r00 d00))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x169 (* 8 r)))
 (let (($x582 (= (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x731 ?x747 ?x1111) 0)))
 (let (($x775 (not $x582)))
 (let ((?x816 (* 8 d)))
 (let ((?x486 (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x816 (* (- 4) (* d 2)) ?x731 ?x747 ?x1111)))
 (let (($x661 (not (= ?x486 0))))
 (let ((?x763 (* 2 (* d 4))))
 (let ((?x748 (* (- 8) d)))
 (let (($x560 (= (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x748 ?x731 ?x747 ?x763 ?x1111) 0)))
 (let (($x518 (not $x560)))
 (let ((?x824 (* 16 d)))
 (let ((?x355 (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x824 (* (- 8) (* d 2)) ?x731 ?x747 ?x1111)))
 (let (($x192 (not (= ?x355 0))))
 (let (($x754 (or $x192 $x518 $x661 $x775)))
 (and $x582 $x754)))))))))))))))))))))))))) :qid k!31))
 ))
 (let (($x832 (exists ((q Int) (r Int) (d Int) (x Int) )(! false :qid k!31))
 ))
 (let ((?x1036 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x1111 (* q d d)))
 (let ((?x732 (* r d)))
 (let ((?x747 (* (- 4) ?x732)))
 (let ((?x731 (* (- 2) (* q d))))
 (let ((?x658 (* 4 (* x d))))
 (let ((?x276 (* 4 (* r00 d00))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x169 (* 8 r)))
 (let (($x582 (= (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x731 ?x747 ?x1111) 0)))
 (let (($x775 (not $x582)))
 (let ((?x816 (* 8 d)))
 (let ((?x486 (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x816 (* (- 4) (* d 2)) ?x731 ?x747 ?x1111)))
 (let (($x661 (not (= ?x486 0))))
 (let ((?x763 (* 2 (* d 4))))
 (let ((?x748 (* (- 8) d)))
 (let (($x560 (= (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x748 ?x731 ?x747 ?x763 ?x1111) 0)))
 (let (($x518 (not $x560)))
 (let ((?x824 (* 16 d)))
 (let ((?x355 (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x824 (* (- 8) (* d 2)) ?x731 ?x747 ?x1111)))
 (let (($x192 (not (= ?x355 0))))
 (let (($x754 (or $x192 $x518 $x661 $x775)))
 (let (($x532 (and $x582 $x754)))
 (let ((@x365 (monotonicity (rewrite (= $x192 $x775)) (rewrite (= $x518 $x775)) (rewrite (= $x661 $x775)) (= $x754 (or $x775 $x775 $x775 $x775)))))
 (let ((@x341 (trans @x365 (rewrite (= (or $x775 $x775 $x775 $x775) $x775)) (= $x754 $x775))))
 (trans (monotonicity @x341 (= $x532 (and $x582 $x775))) (rewrite (= (and $x582 $x775) false)) (= $x532 false)))))))))))))))))))))))))))))))
 ))
 (let ((@x915 (trans (quant-intro (proof-bind ?x1036) (= $x960 $x832)) (elim-unused (= $x832 false)) (= $x960 false))))
 (let (($x564 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x711 (* 4 (* d00 r00))))
 (let ((?x221 (+ 2 d)))
 (let ((?x877 (* ?x221 (+ (- 4) (* 2 r) (* (- 1) x) q (* (- 2) d)))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x358 (* 4 (* ?x221 r))))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x30 (* 8 q)))
 (let ((?x528 (* (- 8) x)))
 (let ((?x385 (* 16 r)))
 (let ((?x879 (+ ?x385 ?x528 ?x30 (* (- 16) d) ?x140 ?x358 ?x172 ?x188 (* (+ (- 8) q) ?x221 ?x221) (* (- 2) (* (+ (- 8) q) ?x221)) ?x238 (* (- 4) ?x877) ?x711)))
 (let (($x881 (not (= ?x879 32))))
 (let ((?x796 (* (- 4) (* ?x221 (+ 2 (* 2 r) (* (- 1) x) q d)))))
 (let ((?x816 (* 8 d)))
 (let ((?x797 (+ ?x385 ?x528 ?x30 ?x816 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 (+ 4 q)) (* (- 2) (* ?x221 (+ 4 q))) ?x238 ?x796 ?x711)))
 (let (($x800 (not (= ?x797 (- 16)))))
 (let ((?x808 (* ?x221 (+ (- 2) (* 2 r) (* (- 1) x) q (* (- 1) d)))))
 (let ((?x748 (* (- 8) d)))
 (let ((?x811 (+ ?x385 ?x528 ?x30 ?x748 ?x140 ?x358 ?x172 ?x188 (* (+ (- 4) q) ?x221 ?x221) (* (- 2) (* (+ (- 4) q) ?x221)) ?x238 (* (- 4) ?x808) ?x711)))
 (let (($x723 (not (= ?x811 16))))
 (let ((?x334 (+ ?x385 ?x528 ?x30 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 q) (* (- 2) (* ?x221 q)) ?x238 (* (- 4) (* ?x221 (+ (* 2 r) (* (- 1) x) q))) ?x711)))
 (let (($x351 (not (= ?x334 0))))
 (let ((?x658 (* 4 (* x d))))
 (let ((?x169 (* 8 r)))
 (let ((?x219 (+ ?x169 ?x140 ?x658 ?x172 ?x188 (* d d q) (* (- 2) (* d q)) ?x238 (* (- 4) (* d r)) ?x711)))
 (let (($x220 (= ?x219 0)))
 (and $x220 (or $x351 $x723 $x800 $x881)))))))))))))))))))))))))))))) :qid k!31))
 ))
 (let ((?x595 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x1111 (* q d d)))
 (let ((?x732 (* r d)))
 (let ((?x747 (* (- 4) ?x732)))
 (let ((?x731 (* (- 2) (* q d))))
 (let ((?x658 (* 4 (* x d))))
 (let ((?x276 (* 4 (* r00 d00))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x169 (* 8 r)))
 (let (($x582 (= (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x731 ?x747 ?x1111) 0)))
 (let (($x775 (not $x582)))
 (let ((?x816 (* 8 d)))
 (let ((?x486 (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x816 (* (- 4) (* d 2)) ?x731 ?x747 ?x1111)))
 (let (($x661 (not (= ?x486 0))))
 (let ((?x763 (* 2 (* d 4))))
 (let ((?x748 (* (- 8) d)))
 (let (($x560 (= (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x748 ?x731 ?x747 ?x763 ?x1111) 0)))
 (let (($x518 (not $x560)))
 (let ((?x824 (* 16 d)))
 (let ((?x355 (+ ?x169 ?x140 ?x188 ?x172 ?x238 ?x276 ?x658 ?x824 (* (- 8) (* d 2)) ?x731 ?x747 ?x1111)))
 (let (($x192 (not (= ?x355 0))))
 (let (($x754 (or $x192 $x518 $x661 $x775)))
 (let (($x532 (and $x582 $x754)))
 (let ((?x711 (* 4 (* d00 r00))))
 (let ((?x221 (+ 2 d)))
 (let ((?x877 (* ?x221 (+ (- 4) (* 2 r) (* (- 1) x) q (* (- 2) d)))))
 (let ((?x358 (* 4 (* ?x221 r))))
 (let ((?x30 (* 8 q)))
 (let ((?x528 (* (- 8) x)))
 (let ((?x385 (* 16 r)))
 (let ((?x879 (+ ?x385 ?x528 ?x30 (* (- 16) d) ?x140 ?x358 ?x172 ?x188 (* (+ (- 8) q) ?x221 ?x221) (* (- 2) (* (+ (- 8) q) ?x221)) ?x238 (* (- 4) ?x877) ?x711)))
 (let (($x881 (not (= ?x879 32))))
 (let ((?x796 (* (- 4) (* ?x221 (+ 2 (* 2 r) (* (- 1) x) q d)))))
 (let ((?x797 (+ ?x385 ?x528 ?x30 ?x816 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 (+ 4 q)) (* (- 2) (* ?x221 (+ 4 q))) ?x238 ?x796 ?x711)))
 (let (($x800 (not (= ?x797 (- 16)))))
 (let ((?x808 (* ?x221 (+ (- 2) (* 2 r) (* (- 1) x) q (* (- 1) d)))))
 (let ((?x811 (+ ?x385 ?x528 ?x30 ?x748 ?x140 ?x358 ?x172 ?x188 (* (+ (- 4) q) ?x221 ?x221) (* (- 2) (* (+ (- 4) q) ?x221)) ?x238 (* (- 4) ?x808) ?x711)))
 (let (($x723 (not (= ?x811 16))))
 (let ((?x334 (+ ?x385 ?x528 ?x30 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 q) (* (- 2) (* ?x221 q)) ?x238 (* (- 4) (* ?x221 (+ (* 2 r) (* (- 1) x) q))) ?x711)))
 (let (($x351 (not (= ?x334 0))))
 (let ((?x219 (+ ?x169 ?x140 ?x658 ?x172 ?x188 (* d d q) (* (- 2) (* d q)) ?x238 (* (- 4) (* d r)) ?x711)))
 (let (($x220 (= ?x219 0)))
 (let (($x492 (and $x220 (or $x351 $x723 $x800 $x881))))
 (rewrite (= $x492 $x532)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x883 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x711 (* 4 (* d00 r00))))
 (let ((?x221 (+ 2 d)))
 (let ((?x877 (* ?x221 (+ (- 4) (* 2 r) (* (- 1) x) q (* (- 2) d)))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x358 (* 4 (* ?x221 r))))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x30 (* 8 q)))
 (let ((?x528 (* (- 8) x)))
 (let ((?x385 (* 16 r)))
 (let ((?x879 (+ ?x385 ?x528 ?x30 (* (- 16) d) ?x140 ?x358 ?x172 ?x188 (* (+ (- 8) q) ?x221 ?x221) (* (- 2) (* (+ (- 8) q) ?x221)) ?x238 (* (- 4) ?x877) ?x711)))
 (let (($x881 (not (= ?x879 32))))
 (let ((?x334 (+ ?x385 ?x528 ?x30 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 q) (* (- 2) (* ?x221 q)) ?x238 (* (- 4) (* ?x221 (+ (* 2 r) (* (- 1) x) q))) ?x711)))
 (let (($x351 (not (= ?x334 0))))
 (let ((?x808 (* ?x221 (+ (- 2) (* 2 r) (* (- 1) x) q (* (- 1) d)))))
 (let ((?x748 (* (- 8) d)))
 (let ((?x811 (+ ?x385 ?x528 ?x30 ?x748 ?x140 ?x358 ?x172 ?x188 (* (+ (- 4) q) ?x221 ?x221) (* (- 2) (* (+ (- 4) q) ?x221)) ?x238 (* (- 4) ?x808) ?x711)))
 (let (($x723 (not (= ?x811 16))))
 (let ((?x796 (* (- 4) (* ?x221 (+ 2 (* 2 r) (* (- 1) x) q d)))))
 (let ((?x816 (* 8 d)))
 (let ((?x797 (+ ?x385 ?x528 ?x30 ?x816 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 (+ 4 q)) (* (- 2) (* ?x221 (+ 4 q))) ?x238 ?x796 ?x711)))
 (let (($x800 (not (= ?x797 (- 16)))))
 (let ((?x658 (* 4 (* x d))))
 (let ((?x169 (* 8 r)))
 (let ((?x219 (+ ?x169 ?x140 ?x658 ?x172 ?x188 (* d d q) (* (- 2) (* d q)) ?x238 (* (- 4) (* d r)) ?x711)))
 (let (($x220 (= ?x219 0)))
 (and $x220 (or $x800 $x723 $x351 $x881)))))))))))))))))))))))))))))) :qid k!31))
 ))
 (let ((?x474 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x711 (* 4 (* d00 r00))))
 (let ((?x221 (+ 2 d)))
 (let ((?x877 (* ?x221 (+ (- 4) (* 2 r) (* (- 1) x) q (* (- 2) d)))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x358 (* 4 (* ?x221 r))))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x30 (* 8 q)))
 (let ((?x528 (* (- 8) x)))
 (let ((?x385 (* 16 r)))
 (let ((?x879 (+ ?x385 ?x528 ?x30 (* (- 16) d) ?x140 ?x358 ?x172 ?x188 (* (+ (- 8) q) ?x221 ?x221) (* (- 2) (* (+ (- 8) q) ?x221)) ?x238 (* (- 4) ?x877) ?x711)))
 (let (($x881 (not (= ?x879 32))))
 (let ((?x796 (* (- 4) (* ?x221 (+ 2 (* 2 r) (* (- 1) x) q d)))))
 (let ((?x816 (* 8 d)))
 (let ((?x797 (+ ?x385 ?x528 ?x30 ?x816 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 (+ 4 q)) (* (- 2) (* ?x221 (+ 4 q))) ?x238 ?x796 ?x711)))
 (let (($x800 (not (= ?x797 (- 16)))))
 (let ((?x808 (* ?x221 (+ (- 2) (* 2 r) (* (- 1) x) q (* (- 1) d)))))
 (let ((?x748 (* (- 8) d)))
 (let ((?x811 (+ ?x385 ?x528 ?x30 ?x748 ?x140 ?x358 ?x172 ?x188 (* (+ (- 4) q) ?x221 ?x221) (* (- 2) (* (+ (- 4) q) ?x221)) ?x238 (* (- 4) ?x808) ?x711)))
 (let (($x723 (not (= ?x811 16))))
 (let ((?x334 (+ ?x385 ?x528 ?x30 ?x140 ?x358 ?x172 ?x188 (* ?x221 ?x221 q) (* (- 2) (* ?x221 q)) ?x238 (* (- 4) (* ?x221 (+ (* 2 r) (* (- 1) x) q))) ?x711)))
 (let (($x351 (not (= ?x334 0))))
 (let ((?x658 (* 4 (* x d))))
 (let ((?x169 (* 8 r)))
 (let ((?x219 (+ ?x169 ?x140 ?x658 ?x172 ?x188 (* d d q) (* (- 2) (* d q)) ?x238 (* (- 4) (* d r)) ?x711)))
 (let (($x220 (= ?x219 0)))
 (let (($x492 (and $x220 (or $x351 $x723 $x800 $x881))))
 (let (($x856 (and $x220 (or $x800 $x723 $x351 $x881))))
 (rewrite (= $x856 $x492)))))))))))))))))))))))))))))))))
 ))
 (let (($x133 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x53 (* 4 d00 r00)))
 (let ((?x114 (- (- (+ (- (* 2 r) x) q) (* 2 d)) 4)))
 (let ((?x62 (+ d 2)))
 (let ((?x49 (* 2 d00 q00)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x39 (* 4 d00 x00)))
 (let ((?x118 (- (+ (- (* 8 ?x114) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x124 (- (+ (- ?x118 ?x41) (* ?x62 ?x62 (- q 8))) (* 2 ?x62 (- q 8)))))
 (let ((?x63 (* 4 ?x62 r)))
 (let ((?x32 (* 8 r00)))
 (let ((?x97 (- (* 8 (- (- (+ (- (* 2 r) x) q) d) 2)) ?x32)))
 (let ((?x105 (- (+ (- (- (+ ?x97 ?x63) ?x39) ?x41) (* ?x62 ?x62 (- q 4))) (* 2 ?x62 (- q 4)))))
 (let ((?x108 (- (+ ?x105 ?x49) (* 4 ?x62 (- (- (+ (- (* 2 r) x) q) d) 2)))))
 (let ((?x82 (- (+ (- (* 8 (+ (- (* 2 r) x) q)) ?x32) ?x63) ?x39)))
 (let ((?x88 (+ (- (+ (- ?x82 ?x41) (* ?x62 ?x62 q)) (* 2 ?x62 q)) ?x49)))
 (let (($x92 (= (+ (- ?x88 (* 4 ?x62 (+ (- (* 2 r) x) q))) ?x53) 0)))
 (let ((?x64 (+ (- (* 8 (+ (- (* 2 r) x) q d 2)) ?x32) ?x63)))
 (let ((?x71 (- (+ (- (- ?x64 ?x39) ?x41) (* ?x62 ?x62 (+ q 4))) (* 2 ?x62 (+ q 4)))))
 (let ((?x74 (- (+ ?x71 ?x49) (* 4 ?x62 (+ (- (* 2 r) x) q d 2)))))
 (let (($x131 (or (not (= (+ ?x74 ?x53) 0)) (not $x92) (not (= (+ ?x108 ?x53) 0)) (not (= (+ (- (+ ?x124 ?x49) (* 4 ?x62 ?x114)) ?x53) 0)))))
 (let ((?x44 (* d d q)))
 (let ((?x45 (+ (- (- (+ (- (* 8 r) ?x32) (* 4 d x)) ?x39) ?x41) ?x44)))
 (let ((?x54 (+ (- (+ (- ?x45 (* 2 d q)) ?x49) (* 4 d r)) ?x53)))
 (and (= ?x54 0) $x131)))))))))))))))))))))))) :qid k!31))
 ))
 (let (($x348 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x711 (* 4 (* d00 r00))))
 (let ((?x565 (+ 2 d)))
 (let ((?x1082 (* ?x565 (+ (- 4) (* 2 r) (* (- 1) x) q (* (- 2) d)))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x255 (* 4 (* ?x565 r))))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x342 (* 8 q)))
 (let ((?x528 (* (- 8) x)))
 (let ((?x426 (* 16 r)))
 (let ((?x651 (+ ?x426 ?x528 ?x342 (* (- 16) d) ?x140 ?x255 ?x172 ?x188 (* (+ (- 8) q) ?x565 ?x565) (* (- 2) (* (+ (- 8) q) ?x565)) ?x238 (* (- 4) ?x1082) ?x711)))
 (let ((?x634 (+ ?x426 ?x528 ?x342 ?x140 ?x255 ?x172 ?x188 (* ?x565 ?x565 q) (* (- 2) (* ?x565 q)) ?x238 (* (- 4) (* ?x565 (+ (* 2 r) (* (- 1) x) q))) ?x711)))
 (let ((?x805 (* ?x565 (+ (- 2) (* 2 r) (* (- 1) x) q (* (- 1) d)))))
 (let ((?x430 (* (- 8) d)))
 (let ((?x350 (+ ?x426 ?x528 ?x342 ?x430 ?x140 ?x255 ?x172 ?x188 (* (+ (- 4) q) ?x565 ?x565) (* (- 2) (* (+ (- 4) q) ?x565)) ?x238 (* (- 4) ?x805) ?x711)))
 (let ((?x440 (* (- 4) (* ?x565 (+ 2 (* 2 r) (* (- 1) x) q d)))))
 (let ((?x169 (* 8 d)))
 (let ((?x313 (+ ?x426 ?x528 ?x342 ?x169 ?x140 ?x255 ?x172 ?x188 (* ?x565 ?x565 (+ 4 q)) (* (- 2) (* ?x565 (+ 4 q))) ?x238 ?x440 ?x711)))
 (let (($x216 (or (not (= ?x313 (- 16))) (not (= ?x350 16)) (not (= ?x634 0)) (not (= ?x651 32)))))
 (let ((?x44 (* d d q)))
 (let ((?x30 (* 8 r)))
 (let ((?x927 (+ ?x30 ?x140 (* 4 (* x d)) ?x172 ?x188 ?x44 (* (- 2) (* d q)) ?x238 (* (- 4) (* d r)) ?x711)))
 (and (= ?x927 0) $x216))))))))))))))))))))))))) :qid k!31))
 ))
 (let ((?x378 (lambda ((q Int) (r Int) (d Int) (t Int) (x Int) )(let ((?x711 (* 4 (* d00 r00))))
 (let ((?x565 (+ 2 d)))
 (let ((?x1082 (* ?x565 (+ (- 4) (* 2 r) (* (- 1) x) q (* (- 2) d)))))
 (let ((?x238 (* 2 (* d00 q00))))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x188 (* (- 1) ?x41)))
 (let ((?x172 (* (- 4) (* d00 x00))))
 (let ((?x255 (* 4 (* ?x565 r))))
 (let ((?x140 (* (- 8) r00)))
 (let ((?x342 (* 8 q)))
 (let ((?x528 (* (- 8) x)))
 (let ((?x426 (* 16 r)))
 (let ((?x651 (+ ?x426 ?x528 ?x342 (* (- 16) d) ?x140 ?x255 ?x172 ?x188 (* (+ (- 8) q) ?x565 ?x565) (* (- 2) (* (+ (- 8) q) ?x565)) ?x238 (* (- 4) ?x1082) ?x711)))
 (let ((?x634 (+ ?x426 ?x528 ?x342 ?x140 ?x255 ?x172 ?x188 (* ?x565 ?x565 q) (* (- 2) (* ?x565 q)) ?x238 (* (- 4) (* ?x565 (+ (* 2 r) (* (- 1) x) q))) ?x711)))
 (let ((?x805 (* ?x565 (+ (- 2) (* 2 r) (* (- 1) x) q (* (- 1) d)))))
 (let ((?x430 (* (- 8) d)))
 (let ((?x350 (+ ?x426 ?x528 ?x342 ?x430 ?x140 ?x255 ?x172 ?x188 (* (+ (- 4) q) ?x565 ?x565) (* (- 2) (* (+ (- 4) q) ?x565)) ?x238 (* (- 4) ?x805) ?x711)))
 (let ((?x440 (* (- 4) (* ?x565 (+ 2 (* 2 r) (* (- 1) x) q d)))))
 (let ((?x169 (* 8 d)))
 (let ((?x313 (+ ?x426 ?x528 ?x342 ?x169 ?x140 ?x255 ?x172 ?x188 (* ?x565 ?x565 (+ 4 q)) (* (- 2) (* ?x565 (+ 4 q))) ?x238 ?x440 ?x711)))
 (let (($x216 (or (not (= ?x313 (- 16))) (not (= ?x350 16)) (not (= ?x634 0)) (not (= ?x651 32)))))
 (let ((?x44 (* d d q)))
 (let ((?x30 (* 8 r)))
 (let ((?x927 (+ ?x30 ?x140 (* 4 (* x d)) ?x172 ?x188 ?x44 (* (- 2) (* d q)) ?x238 (* (- 4) (* d r)) ?x711)))
 (let (($x250 (and (= ?x927 0) $x216)))
 (let ((?x53 (* 4 d00 r00)))
 (let ((?x114 (- (- (+ (- (* 2 r) x) q) (* 2 d)) 4)))
 (let ((?x62 (+ d 2)))
 (let ((?x49 (* 2 d00 q00)))
 (let ((?x39 (* 4 d00 x00)))
 (let ((?x118 (- (+ (- (* 8 ?x114) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x124 (- (+ (- ?x118 ?x41) (* ?x62 ?x62 (- q 8))) (* 2 ?x62 (- q 8)))))
 (let ((?x63 (* 4 ?x62 r)))
 (let ((?x32 (* 8 r00)))
 (let ((?x97 (- (* 8 (- (- (+ (- (* 2 r) x) q) d) 2)) ?x32)))
 (let ((?x105 (- (+ (- (- (+ ?x97 ?x63) ?x39) ?x41) (* ?x62 ?x62 (- q 4))) (* 2 ?x62 (- q 4)))))
 (let ((?x108 (- (+ ?x105 ?x49) (* 4 ?x62 (- (- (+ (- (* 2 r) x) q) d) 2)))))
 (let ((?x82 (- (+ (- (* 8 (+ (- (* 2 r) x) q)) ?x32) ?x63) ?x39)))
 (let ((?x88 (+ (- (+ (- ?x82 ?x41) (* ?x62 ?x62 q)) (* 2 ?x62 q)) ?x49)))
 (let (($x92 (= (+ (- ?x88 (* 4 ?x62 (+ (- (* 2 r) x) q))) ?x53) 0)))
 (let ((?x64 (+ (- (* 8 (+ (- (* 2 r) x) q d 2)) ?x32) ?x63)))
 (let ((?x71 (- (+ (- (- ?x64 ?x39) ?x41) (* ?x62 ?x62 (+ q 4))) (* 2 ?x62 (+ q 4)))))
 (let ((?x74 (- (+ ?x71 ?x49) (* 4 ?x62 (+ (- (* 2 r) x) q d 2)))))
 (let (($x131 (or (not (= (+ ?x74 ?x53) 0)) (not $x92) (not (= (+ ?x108 ?x53) 0)) (not (= (+ (- (+ ?x124 ?x49) (* 4 ?x62 ?x114)) ?x53) 0)))))
 (let ((?x48 (- (+ (- (- (+ (- ?x30 ?x32) (* 4 d x)) ?x39) ?x41) ?x44) (* 2 d q))))
 (let (($x132 (and (= (+ (- (+ ?x48 ?x49) (* 4 d r)) ?x53) 0) $x131)))
 (rewrite (= $x132 $x250)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x887 (trans (quant-intro (proof-bind ?x378) (= $x133 $x348)) (elim-unused (= $x348 $x883)) (= $x133 $x883))))
 (let ((@x27 (asserted $x133)))
 (let ((@x451 (mp (mp @x27 @x887 $x883) (quant-intro (proof-bind ?x474) (= $x883 $x564)) $x564)))
 (let ((@x363 (mp (mp @x451 (rewrite (= $x564 $x564)) $x564) (quant-intro (proof-bind ?x595) (= $x564 $x960)) $x960)))
 (mp @x363 @x915 false))))))))))))))))))

(:max-memory   3.58
 :memory       3.16
 :mk-bool-var  6
 :num-allocs   1120513
 :num-checks   1
 :rlimit-count 2491
 :time         0.01
 :total-time   0.02)
