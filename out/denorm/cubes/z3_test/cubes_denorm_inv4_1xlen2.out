unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x525 (* n!0 n!0)))
 (let ((?x410 (* 3 ?x525)))
 (let ((?x300 (* (- 1) k!2)))
 (let ((?x453 (+ (* 3 n!0) ?x300 ?x410)))
 (let (($x419 (<= ?x453 (- 1))))
 (let (($x405 (= ?x453 (- 1))))
 (let ((?x447 (* m!1 m!1)))
 (let ((?x268 (* 6 k!2)))
 (let ((?x328 (* 6 m!1)))
 (let ((?x387 (+ c!3 k!2)))
 (let ((?x392 (+ m!1 k!2)))
 (let ((?x320 (+ 6 m!1)))
 (let ((?x185 (+ (* 3 (* n!0 n!0 m!1 m!1)) (* ?x320 ?x392 ?x392 ?x392 ?x387 ?x387 ?x387) (* n!0 n!0 n!0 m!1 k!2) (* n!0 n!0 n!0 m!1 m!1) (* 3 (* n!0 n!0 m!1 k!2)) (* m!1 k!2) (* 18 (* n!0 m!1)) (* 3 (* n!0 m!1 k!2)) (* 18 (* n!0 k!2)) ?x328 ?x268 (* 18 (* n!0 n!0 m!1)) (* 6 (* n!0 n!0 n!0 k!2)) (* 3 (* n!0 m!1 m!1)) ?x447 (* 18 (* n!0 n!0 k!2)) (* 6 (* n!0 n!0 n!0 m!1)))))
 (let ((?x284 (* ?x185 (+ 7 (* 9 n!0) (* (- 1) m!1) ?x300 ?x410))))
 (let (($x285 (= ?x284 0)))
 (let (($x282 (not $x285)))
 (let ((?x149 (* 9 n!0)))
 (let ((?x126 (* k!2 k!2)))
 (let ((?x358 (+ ?x126 (* (- 9) (* c!3 n!0)) (* (- 18) c!3) ?x149 (* (- 5) k!2))))
 (let ((?x138 (* (- 1) m!1)))
 (let ((?x306 (+ (* 6 n!0) ?x138)))
 (let (($x139 (= ?x306 (- 6))))
 (let (($x286 (and $x139 (= ?x358 (- 4)) (= (+ (* n!0 k!2) (* (- 3) c!3) (* 2 n!0) ?x300) (- 1)) $x405 $x282)))
 (let ((?x307 (+ k!2 m!1)))
 (let ((?x176 (+ ?x268 ?x328 (* 18 (* k!2 n!0)) (* ?x320 ?x307 ?x307 ?x307 ?x387 ?x387 ?x387) (* 3 (* m!1 m!1 n!0)) (* 3 (* k!2 m!1 n!0)) (* 18 (* m!1 n!0)) ?x447 (* k!2 m!1) (* m!1 m!1 n!0 n!0 n!0) (* k!2 m!1 n!0 n!0 n!0) (* 18 (* k!2 n!0 n!0)) (* 18 (* m!1 n!0 n!0)) (* 3 (* k!2 m!1 n!0 n!0)) (* 3 (* m!1 m!1 n!0 n!0)) (* 6 (* k!2 n!0 n!0 n!0)) (* 6 (* m!1 n!0 n!0 n!0)))))
 (let (($x376 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x132 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x126) (* 9 (* c!3 n!0)))))
 (let (($x454 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x132 4) $x376 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x525)) 1) (not (= (* ?x176 (+ 7 ?x300 ?x138 ?x149 ?x410)) 0)))))
 (let (($x114 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x263 (* n n)))
 (let ((?x264 (* 3 ?x263)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x507 (* 6 (* m n n n))))
 (let ((?x503 (* 6 (* k n n n))))
 (let ((?x520 (* 3 (* m m n n))))
 (let ((?x519 (* 3 (* k m n n))))
 (let ((?x518 (* 18 (* m n n))))
 (let ((?x517 (* 18 (* k n n))))
 (let ((?x428 (* k m n n n)))
 (let ((?x427 (* m m n n n)))
 (let ((?x415 (* k m)))
 (let ((?x412 (* m m)))
 (let ((?x514 (* 18 (* m n))))
 (let ((?x515 (* 3 (* k m n))))
 (let ((?x516 (* 3 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x513 (* 18 ?x55)))
 (let ((?x418 (* 6 m)))
 (let ((?x421 (* 6 k)))
 (let ((?x228 (+ ?x421 ?x418 ?x513 ?x243 ?x516 ?x515 ?x514 ?x412 ?x415 ?x427 ?x428 ?x517 ?x518 ?x519 ?x520 ?x503 ?x507)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) ?x263)) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x206 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x202 (= ?x206 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 $x202 $x254 $x292 (not (= (* ?x228 (+ 7 ?x232 ?x348 ?x48 ?x264)) 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x272 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x432 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (and $x118 (= ?x432 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1)) (not (= (* (+ ?x243 (* ?x323 ?x323 ?x323 ?x385 ?x71)) ?x229) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x143 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x263 (* n n)))
 (let ((?x264 (* 3 ?x263)))
 (let ((?x48 (* 9 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x507 (* 6 (* m n n n))))
 (let ((?x503 (* 6 (* k n n n))))
 (let ((?x520 (* 3 (* m m n n))))
 (let ((?x519 (* 3 (* k m n n))))
 (let ((?x518 (* 18 (* m n n))))
 (let ((?x517 (* 18 (* k n n))))
 (let ((?x428 (* k m n n n)))
 (let ((?x427 (* m m n n n)))
 (let ((?x415 (* k m)))
 (let ((?x412 (* m m)))
 (let ((?x514 (* 18 (* m n))))
 (let ((?x515 (* 3 (* k m n))))
 (let ((?x516 (* 3 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x513 (* 18 ?x55)))
 (let ((?x418 (* 6 m)))
 (let ((?x421 (* 6 k)))
 (let ((?x228 (+ ?x421 ?x418 ?x513 ?x243 ?x516 ?x515 ?x514 ?x412 ?x415 ?x427 ?x428 ?x517 ?x518 ?x519 ?x520 ?x503 ?x507)))
 (let (($x292 (= (+ k (* (- 3) n) (* (- 3) ?x263)) 1)))
 (let (($x254 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x206 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x202 (= ?x206 4)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x250 (and $x118 $x202 $x254 $x292 (not (= (* ?x228 (+ 7 ?x232 ?x348 ?x48 ?x264)) 0)))))
 (let ((?x65 (* 3 n)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x261 (+ ?x243 (* (+ 1 n) (+ 1 n) (+ 1 n) ?x385 ?x71))))
 (let ((?x49 (* k k)))
 (let ((?x432 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x273 (and $x118 (= ?x432 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) (= (+ ?x264 ?x232 ?x65) (- 1)) (not (= (* ?x261 ?x229) 0)))))
 (rewrite (= $x273 $x250))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x79 (+ (* (+ c k) (+ c k) (+ c k) ?x71 ?x71 ?x71 ?x76) (* ?x71 ?x76 ?x68 ?x68 ?x68))))
 (let (($x81 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x79) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x81))))))))))))))) :qid k!34))
 ))
 (let ((?x327 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x348 (* (- 1) m)))
 (let ((?x232 (* (- 1) k)))
 (let ((?x229 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x232 ?x348 ?x65)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x323 (+ 1 n)))
 (let ((?x75 (+ c k)))
 (let ((?x243 (* ?x385 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x432 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x118 (= (+ m (* (- 6) n)) 6)))
 (let (($x273 (and $x118 (= ?x432 (- 4)) (= (+ (* (- 3) c) (* n k) ?x232 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x232 ?x65) (- 1)) (not (= (* (+ ?x243 (* ?x323 ?x323 ?x323 ?x385 ?x71)) ?x229) 0)))))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x79 (+ (* ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 ?x76) (* ?x71 ?x76 ?x68 ?x68 ?x68))))
 (let (($x81 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x79) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x81)))))
 (rewrite (= $x84 $x273))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x510 (mp (mp @x86 (quant-intro (proof-bind ?x327) (= $x85 $x272)) $x272) (rewrite (= $x272 $x272)) $x272)))
 (let ((@x322 (mp~ (mp @x510 (quant-intro (proof-bind ?x143) (= $x272 $x114)) $x114) (sk (~ $x114 $x454)) $x454)))
 (let ((@x158 (mp @x322 (rewrite (= $x454 $x286)) $x286)))
 (let ((@x462 (and-elim @x158 $x405)))
 (let ((@x92 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x419)) @x462 $x419)))
 (let (($x240 (<= ?x306 (- 6))))
 (let ((@x443 (and-elim @x158 $x139)))
 (let ((@x160 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x139) $x240)) @x443 $x240)))
 (let (($x289 (>= ?x453 (- 1))))
 (let ((@x233 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x405) $x289)) @x462 $x289)))
 (let (($x301 (>= ?x306 (- 6))))
 (let ((@x283 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x139) $x301)) @x443 $x301)))
 (let (($x437 (not (<= ?x284 0))))
 (let (($x296 (>= ?x284 0)))
 (let ((@x485 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x296)) @x283 @x233 @x160 @x92 false) $x296)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x285 $x437 (not $x296))) (and-elim @x158 $x282) (or $x437 (not $x296)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x297 @x485 $x437) @x283 @x233 @x160 @x92 false)))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        21
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             107
 :arith-nonlinear-bounds    20
 :arith-num-rows            9
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      6
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                19.57
 :memory                    19.08
 :mk-bool-var               18
 :mk-clause                 16
 :num-allocs                509471
 :num-checks                1
 :propagations              10
 :rlimit-count              2694
 :time                      0.01
 :total-time                0.02)
