unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x347 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x96 (>= ?x347 (- 6))))
 (let (($x453 (= ?x347 (- 6))))
 (let ((?x621 (* (- 12) (* c!3 m!1))))
 (let ((?x224 (* (- 36) k!2)))
 (let ((?x525 (* (- 1) (* c!3 m!1 m!1))))
 (let ((?x225 (* (- 36) c!3)))
 (let ((?x165 (* c!3 n!0)))
 (let ((?x228 (* (- 72) ?x165)))
 (let ((?x238 (* (- 36) (* c!3 n!0 n!0))))
 (let ((?x276 (+ c!3 k!2)))
 (let ((?x515 (+ m!1 k!2)))
 (let ((?x230 (+ 6 m!1)))
 (let ((?x282 (+ 1 n!0)))
 (let ((?x354 (+ (* (- 1) (* ?x282 ?x282 ?x230 ?x515 ?x515 ?x276 ?x276)) (* (- 12) (* n!0 n!0 m!1 k!2)) ?x238 ?x228 ?x225 ?x525 ?x224 (* (- 24) (* n!0 m!1 k!2)) (* (- 2) (* c!3 n!0 m!1 m!1)) (* (- 24) (* c!3 n!0 m!1)) (* (- 72) (* n!0 k!2)) (* (- 1) (* m!1 m!1 k!2)) (* (- 1) (* n!0 n!0 m!1 m!1 k!2)) (* (- 2) (* n!0 m!1 m!1 k!2)) (* (- 12) (* m!1 k!2)) (* (- 1) (* c!3 n!0 n!0 m!1 m!1)) ?x621 (* (- 12) (* c!3 n!0 n!0 m!1)) (* (- 36) (* n!0 n!0 k!2)))))
 (let ((?x112 (* ?x354 (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x620 (= ?x112 0)))
 (let (($x616 (not $x620)))
 (let (($x675 (= (+ (* 3 n!0) (* 3 (* n!0 n!0)) (* (- 1) k!2)) (- 1))))
 (let (($x113 (= (+ (* 3 c!3) (* (- 2) n!0) k!2 (* (- 1) (* n!0 k!2))) 1)))
 (let ((?x147 (* k!2 k!2)))
 (let ((?x146 (+ ?x147 (* (- 9) ?x165) (* (- 18) c!3) (* 9 n!0) (* (- 5) k!2))))
 (let (($x377 (and $x453 (= ?x146 (- 4)) $x113 $x675 $x616)))
 (let ((?x233 (* (- 1) (* ?x282 ?x282 ?x230 (+ k!2 m!1) (+ k!2 m!1) ?x276 ?x276))))
 (let ((?x452 (+ ?x225 ?x224 (* (- 72) (* k!2 n!0)) ?x228 ?x233 (* (- 12) (* k!2 m!1 n!0 n!0)) (* (- 12) (* c!3 m!1 n!0 n!0)) (* (- 36) (* k!2 n!0 n!0)) ?x238 (* (- 2) (* k!2 m!1 m!1 n!0)) (* (- 2) (* c!3 m!1 m!1 n!0)) (* (- 24) (* k!2 m!1 n!0)) (* (- 24) (* c!3 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1)) ?x525 (* (- 12) (* k!2 m!1)) ?x621 (* (- 1) (* k!2 m!1 m!1 n!0 n!0)) (* (- 1) (* c!3 m!1 m!1 n!0 n!0)))))
 (let (($x305 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x322 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x147) (* 9 ?x165))))
 (let (($x175 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x322 4) $x305 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x452 (+ (- 6) m!1 (* (- 6) n!0))) 0)))))
 (let (($x473 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x667 (* (- 1) (* c m m n n))))
 (let ((?x666 (* (- 1) (* k m m n n))))
 (let ((?x618 (* (- 12) (* c m))))
 (let ((?x623 (* (- 12) (* k m))))
 (let ((?x671 (* (- 1) (* c m m))))
 (let ((?x670 (* (- 1) (* k m m))))
 (let ((?x624 (* (- 24) (* c m n))))
 (let ((?x629 (* (- 24) (* k m n))))
 (let ((?x633 (* (- 2) (* c m m n))))
 (let ((?x634 (* (- 2) (* k m m n))))
 (let ((?x639 (* (- 36) (* c n n))))
 (let ((?x640 (* (- 36) (* k n n))))
 (let ((?x645 (* (- 12) (* c m n n))))
 (let ((?x646 (* (- 12) (* k m n n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x315 ?x315 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let ((?x148 (* c n)))
 (let ((?x650 (* (- 72) ?x148)))
 (let ((?x55 (* k n)))
 (let ((?x655 (* (- 72) ?x55)))
 (let ((?x659 (* (- 36) k)))
 (let ((?x660 (* (- 36) c)))
 (let ((?x141 (+ ?x660 ?x659 ?x655 ?x650 ?x287 ?x646 ?x645 ?x640 ?x639 ?x634 ?x633 ?x629 ?x624 ?x670 ?x671 ?x623 ?x618 ?x666 ?x667)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 ?x148)) 4)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 $x210 $x262 $x300 (not (= (* ?x141 ?x115) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x464 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x315 ?x315 ?x361 (+ k m) (+ k m) ?x73 ?x73))))
 (let (($x343 (not (= (* (+ ?x287 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x73))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x172 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x172 $x94 $x343)))))))))))))))) :qid k!34))
 ))
 (let ((?x461 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x667 (* (- 1) (* c m m n n))))
 (let ((?x666 (* (- 1) (* k m m n n))))
 (let ((?x618 (* (- 12) (* c m))))
 (let ((?x623 (* (- 12) (* k m))))
 (let ((?x671 (* (- 1) (* c m m))))
 (let ((?x670 (* (- 1) (* k m m))))
 (let ((?x624 (* (- 24) (* c m n))))
 (let ((?x629 (* (- 24) (* k m n))))
 (let ((?x633 (* (- 2) (* c m m n))))
 (let ((?x634 (* (- 2) (* k m m n))))
 (let ((?x639 (* (- 36) (* c n n))))
 (let ((?x640 (* (- 36) (* k n n))))
 (let ((?x645 (* (- 12) (* c m n n))))
 (let ((?x646 (* (- 12) (* k m n n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x315 ?x315 ?x361 ?x74 ?x74 ?x73 ?x73))))
 (let ((?x148 (* c n)))
 (let ((?x650 (* (- 72) ?x148)))
 (let ((?x55 (* k n)))
 (let ((?x655 (* (- 72) ?x55)))
 (let ((?x659 (* (- 36) k)))
 (let ((?x660 (* (- 36) c)))
 (let ((?x141 (+ ?x660 ?x659 ?x655 ?x650 ?x287 ?x646 ?x645 ?x640 ?x639 ?x634 ?x633 ?x629 ?x624 ?x670 ?x671 ?x623 ?x618 ?x666 ?x667)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 ?x148)) 4)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x227 (and $x126 $x210 $x262 $x300 (not (= (* ?x141 ?x115) 0)))))
 (let (($x343 (not (= (* (+ ?x287 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x73))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x172 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x171 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x172 $x94 $x343)))
 (rewrite (= $x171 $x227)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x344 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x315 ?x315 ?x361 (+ k m) (+ k m) ?x73 ?x73))))
 (let (($x343 (not (= (* (+ ?x287 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x73))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x180 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 (= ?x428 (- 4)) $x180 $x94 $x343)))))))))))))) :qid k!34))
 ))
 (let ((?x517 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x315 ?x315 ?x361 (+ k m) (+ k m) ?x73 ?x73))))
 (let (($x343 (not (= (* (+ ?x287 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x73))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x172 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x171 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x172 $x94 $x343)))
 (let (($x180 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x355 (and $x126 (= ?x428 (- 4)) $x180 $x94 $x343)))
 (rewrite (= $x355 $x171)))))))))))))))))))))))
 ))
 (let (($x84 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x73 (+ c k)))
 (let ((?x78 (- (* (- 1) ?x73 ?x73 (+ k m) (+ k m) ?x75 ?x69 ?x69) (* ?x73 ?x75 ?x75 ?x69 ?x69))))
 (let (($x80 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x78) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x80))))))))))))))) :qid k!34))
 ))
 (let ((?x346 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x73 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x287 (* (- 1) (* ?x315 ?x315 ?x361 (+ k m) (+ k m) ?x73 ?x73))))
 (let (($x343 (not (= (* (+ ?x287 (* (- 1) (* ?x315 ?x315 ?x361 ?x361 ?x73))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x180 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x355 (and $x126 (= ?x428 (- 4)) $x180 $x94 $x343)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x78 (- (* (- 1) ?x73 ?x73 (+ k m) (+ k m) ?x75 ?x69 ?x69) (* ?x73 ?x75 ?x75 ?x69 ?x69))))
 (let (($x80 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x78) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x83 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x80)))))
 (rewrite (= $x83 $x355)))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x170 (mp (mp @x85 (quant-intro (proof-bind ?x346) (= $x84 $x344)) $x344) (rewrite (= $x344 $x344)) $x344)))
 (let ((@x232 (mp (mp @x170 (quant-intro (proof-bind ?x517) (= $x344 $x464)) $x464) (quant-intro (proof-bind ?x461) (= $x464 $x473)) $x473)))
 (let ((@x329 (mp (mp~ @x232 (sk (~ $x473 $x175)) $x175) (rewrite (= $x175 $x377)) $x377)))
 (let ((@x389 (and-elim @x329 $x453)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x453) $x96)) @x389 $x96)))
 (let (($x627 (<= ?x347 (- 6))))
 (let ((@x189 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x453) $x627)) @x389 $x627)))
 (let (($x617 (not (<= ?x112 0))))
 (let (($x405 (>= ?x112 0)))
 (let ((@x490 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x620 $x617 (not $x405))) (and-elim @x329 $x616) (or $x617 (not $x405)))))
 (let ((@x489 (unit-resolution @x490 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x405)) @x189 @x104 false) $x405) $x617)))
 ((_ th-lemma arith farkas 1 1 1) @x489 @x189 @x104 false))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             174
 :arith-nonlinear-bounds    3
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      9
 :arith-tableau-max-columns 48
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.63
 :memory                    3.13
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1161393
 :num-checks                1
 :propagations              11
 :rlimit-count              3532
 :time                      0.01
 :total-time                0.01)
