unsat
((set-logic NIA)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x386 (to_real x!2)))
 (let ((?x286 (to_real y!1)))
 (let ((?x231 (* ?x286 ?x386)))
 (let ((?x111 (to_real y00)))
 (let ((?x107 (to_real x00)))
 (let ((?x112 (* ?x107 ?x111)))
 (let ((?x118 (* (- 1.0) ?x112)))
 (let ((?x48 (to_real z00)))
 (let ((?x198 (* (- 1.0) ?x48)))
 (let ((?x391 (to_real z!0)))
 (let ((?x522 (+ ?x391 ?x198 ?x118 ?x231)))
 (let (($x539 (>= ?x522 0.0)))
 (let ((?x510 (* y!1 x!2)))
 (let ((?x387 (to_real ?x510)))
 (let ((?x660 (+ ?x387 (* (- 1.0) ?x231))))
 (let (($x654 (<= ?x660 0.0)))
 (let (($x655 (= 0.0 ?x660)))
 (let ((@x119 (symm (commutativity (= $x655 (= ?x660 0.0))) (= (= ?x660 0.0) $x655))))
 (let ((@x385 (unit-resolution (hypothesis (not $x655)) (mp ((_ th-lemma arith) (= ?x660 0.0)) @x119 $x655) false)))
 (let ((@x931 (lemma @x385 $x655)))
 (let ((@x398 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x655) $x654)) @x931 $x654)))
 (let ((?x348 (+ ?x112 (* (- 1.0) (to_real (* x00 y00))))))
 (let (($x651 (<= ?x348 0.0)))
 (let (($x382 (= 0.0 ?x348)))
 (let ((@x339 (symm (commutativity (= $x382 (= ?x348 0.0))) (= (= ?x348 0.0) $x382))))
 (let ((@x230 (mp ((_ th-lemma arith) (= ?x348 0.0)) @x339 $x382)))
 (let ((?x85 (* x00 y00)))
 (let ((?x529 (+ z00 ?x85 (* (- 1) ?x510) (* (- 1) z!0))))
 (let (($x511 (<= ?x529 0)))
 (let (($x148 (= 0 ?x529)))
 (let ((@x571 (symm (commutativity (= $x148 (= ?x529 0))) (= (= ?x529 0) $x148))))
 (let (($x821 (= ?x529 0)))
 (let ((?x189 (* (- 6.0) (* ?x386 ?x386 ?x386 ?x386 ?x386 ?x391))))
 (let ((?x837 (* (- 2.0) (* ?x386 ?x386 ?x386 ?x386 ?x386 ?x386))))
 (let ((?x559 (* (/ 1.0 8.0) (* ?x391 ?x391))))
 (let ((?x553 (* (/ 1.0 4.0) (* ?x386 ?x391))))
 (let ((?x352 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x286))))
 (let ((?x1027 (+ ?x386 ?x391)))
 (let ((?x542 (* ?x1027 ?x1027 ?x1027 ?x352 ?x352 ?x352)))
 (let ((?x489 (* (- 2.0) (* ?x386 ?x386 ?x386 ?x391 ?x391 ?x391))))
 (let ((?x474 (* (- 6.0) (* ?x386 ?x386 ?x386 ?x386 ?x391 ?x391))))
 (let ((?x613 (* (/ 1.0 8.0) (* ?x386 ?x386))))
 (let ((?x341 (+ (* (- 2.0) (* ?x286 ?x286 ?x386 ?x386 ?x386 ?x386 ?x386 ?x386)) (* (/ 3.0 8.0) (* ?x286 ?x286 ?x386 ?x386)) (* (- (/ 3.0 8.0)) (* ?x286 ?x386 ?x386)) ?x613 (* (- (/ 3.0 4.0)) (* ?x286 ?x386 ?x391)) (* (/ 3.0 4.0) (* ?x286 ?x286 ?x386 ?x391)) ?x474 ?x489 ?x542 ?x553 (* (- (/ 1.0 8.0)) (* ?x286 ?x286 ?x286 ?x391 ?x391)) ?x559 (* (- 2.0) (* ?x286 ?x286 ?x386 ?x386 ?x386 ?x391 ?x391 ?x391)) (* (- 6.0) (* ?x286 ?x286 ?x386 ?x386 ?x386 ?x386 ?x391 ?x391)) (* 4.0 (* ?x286 ?x386 ?x386 ?x386 ?x391 ?x391 ?x391)) (* (- (/ 1.0 4.0)) (* ?x286 ?x286 ?x286 ?x386 ?x391)) (* 12.0 (* ?x286 ?x386 ?x386 ?x386 ?x386 ?x391 ?x391)) (* (- 6.0) (* ?x286 ?x286 ?x386 ?x386 ?x386 ?x386 ?x386 ?x391)) (* 12.0 (* ?x286 ?x386 ?x386 ?x386 ?x386 ?x386 ?x391)) ?x837 (* 4.0 (* ?x286 ?x386 ?x386 ?x386 ?x386 ?x386 ?x386)) (* (/ 3.0 8.0) (* ?x286 ?x286 ?x391 ?x391)) (* (- (/ 3.0 8.0)) (* ?x286 ?x391 ?x391)) ?x189 (* (- (/ 1.0 8.0)) (* ?x286 ?x286 ?x286 ?x386 ?x386)))))
 (let (($x246 (= (* ?x341 (+ ?x198 ?x118 ?x231 ?x391)) 0.0)))
 (let (($x892 (not $x246)))
 (let ((?x618 (+ (* (/ 1.0 8.0) (* ?x107 ?x111 ?x286 ?x286 ?x286 ?x391 ?x391)) (* (- 2.0) (* ?x286 ?x286 ?x386 ?x386 ?x386 ?x391 ?x391 ?x391 ?x391)) (* 2.0 (* ?x48 ?x286 ?x286 ?x386 ?x386 ?x386 ?x391 ?x391 ?x391)) (* (- (/ 1.0 8.0)) (* ?x286 ?x286 ?x286 ?x286 ?x386 ?x391 ?x391)) (* (/ 1.0 8.0) (* ?x48 ?x286 ?x286 ?x286 ?x391 ?x391)) (* (- (/ 1.0 8.0)) (* ?x286 ?x286 ?x286 ?x391 ?x391 ?x391)) (* 2.0 (* ?x107 ?x111 ?x286 ?x286 ?x386 ?x386 ?x386 ?x391 ?x391 ?x391)) (* (- (/ 1.0 8.0)) (* ?x48 ?x286 ?x286 ?x286 ?x391 ?x391 ?x391)) (* (/ 1.0 8.0) (* ?x286 ?x286 ?x286 ?x391 ?x391 ?x391 ?x391)) (* (- (/ 1.0 8.0)) (* ?x107 ?x111 ?x286 ?x286 ?x286 ?x391 ?x391 ?x391)) (* (/ 1.0 8.0) (* ?x286 ?x286 ?x286 ?x286 ?x386 ?x391 ?x391 ?x391)) (* (- 2.0) (* ?x286 ?x286 ?x286 ?x386 ?x386 ?x386 ?x386 ?x391 ?x391 ?x391)))))
 (let (($x621 (= ?x618 0.0)))
 (let (($x636 (not $x621)))
 (let (($x217 (or $x636 $x892)))
 (let (($x672 (and $x821 $x217)))
 (let ((?x493 (+ (* (- (/ 1.0 8.0)) (* ?x391 ?x391 ?x286 ?x286 ?x286)) ?x613 ?x542 ?x553 ?x559 (* (- (/ 3.0 8.0)) (* ?x386 ?x386 ?x286)) (* (/ 3.0 8.0) (* ?x386 ?x386 ?x286 ?x286)) (* (- (/ 3.0 4.0)) (* ?x386 ?x391 ?x286)) (* (/ 3.0 4.0) (* ?x386 ?x391 ?x286 ?x286)) (* (- (/ 3.0 8.0)) (* ?x391 ?x391 ?x286)) (* (/ 3.0 8.0) (* ?x391 ?x391 ?x286 ?x286)) ?x837 (* 4.0 (* ?x386 ?x386 ?x386 ?x386 ?x386 ?x386 ?x286)) (* (- 2.0) (* ?x386 ?x386 ?x386 ?x386 ?x386 ?x386 ?x286 ?x286)) ?x189 (* 12.0 (* ?x386 ?x386 ?x386 ?x386 ?x386 ?x391 ?x286)) (* (- 6.0) (* ?x386 ?x386 ?x386 ?x386 ?x386 ?x391 ?x286 ?x286)) ?x474 (* (- (/ 1.0 8.0)) (* ?x386 ?x386 ?x286 ?x286 ?x286)) (* 12.0 (* ?x386 ?x386 ?x386 ?x386 ?x391 ?x391 ?x286)) (* (- (/ 1.0 4.0)) (* ?x386 ?x391 ?x286 ?x286 ?x286)) (* (- 6.0) (* ?x386 ?x386 ?x386 ?x386 ?x391 ?x391 ?x286 ?x286)) ?x489 (* 4.0 (* ?x386 ?x386 ?x386 ?x391 ?x391 ?x391 ?x286)) (* (- 2.0) (* ?x386 ?x386 ?x386 ?x391 ?x391 ?x391 ?x286 ?x286)))))
 (let ((?x1028 (+ (* (/ 1.0 8.0) (* ?x386 ?x391 ?x391 ?x286 ?x286 ?x286 ?x286)) (* (- (/ 1.0 8.0)) (* ?x391 ?x391 ?x286 ?x286 ?x286 ?x107 ?x111)) (* (- (/ 1.0 8.0)) (* ?x391 ?x391 ?x48 ?x286 ?x286 ?x286)) (* (/ 1.0 8.0) (* ?x391 ?x391 ?x391 ?x286 ?x286 ?x286)) (* 2.0 (* ?x386 ?x386 ?x386 ?x391 ?x391 ?x391 ?x391 ?x286 ?x286)) (* (- 2.0) (* ?x386 ?x386 ?x386 ?x391 ?x391 ?x391 ?x48 ?x286 ?x286)) (* (- 2.0) (* ?x386 ?x386 ?x386 ?x391 ?x391 ?x391 ?x286 ?x286 ?x107 ?x111)) (* 2.0 (* ?x386 ?x386 ?x386 ?x386 ?x391 ?x391 ?x391 ?x286 ?x286 ?x286)) (* (- (/ 1.0 8.0)) (* ?x391 ?x391 ?x391 ?x391 ?x286 ?x286 ?x286)) (* (/ 1.0 8.0) (* ?x391 ?x391 ?x391 ?x48 ?x286 ?x286 ?x286)) (* (/ 1.0 8.0) (* ?x391 ?x391 ?x391 ?x286 ?x286 ?x286 ?x107 ?x111)) (* (- (/ 1.0 8.0)) (* ?x386 ?x391 ?x391 ?x391 ?x286 ?x286 ?x286 ?x286)))))
 (let (($x509 (or (not (= ?x1028 0.0)) (not (= (* ?x493 (+ ?x391 ?x198 ?x118 (* ?x386 ?x286))) 0.0)))))
 (let (($x512 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x85)) 0) $x509)))
 (let (($x675 (exists ((x Int) (y Int) (z Int) )(! (let ((?x111 (to_real y00)))
 (let ((?x107 (to_real x00)))
 (let ((?x112 (* ?x107 ?x111)))
 (let ((?x118 (* (- 1.0) ?x112)))
 (let ((?x48 (to_real z00)))
 (let ((?x198 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x845 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x842 (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62))))
 (let ((?x839 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46))))
 (let ((?x836 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x833 (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62))))
 (let ((?x830 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x827 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62 ?x62))))
 (let ((?x824 (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62))))
 (let ((?x820 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x816 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62 ?x62))))
 (let ((?x813 (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62))))
 (let ((?x809 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x408 (* (/ 1.0 8.0) (* ?x46 ?x46))))
 (let ((?x442 (* (/ 1.0 4.0) (* ?x43 ?x46))))
 (let ((?x163 (* (/ 1.0 2.0) ?x62)))
 (let ((?x170 (+ (- (/ 1.0 2.0)) ?x163)))
 (let ((?x219 (+ ?x43 ?x46)))
 (let ((?x325 (* (/ 1.0 8.0) (* ?x43 ?x43))))
 (let ((?x83 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x413 (+ ?x83 ?x325 (* ?x219 ?x219 ?x219 ?x170 ?x170 ?x170) ?x442 ?x408 (* (- (/ 3.0 8.0)) (* ?x43 ?x43 ?x62)) (* (/ 3.0 8.0) (* ?x43 ?x43 ?x62 ?x62)) (* (- (/ 3.0 4.0)) (* ?x43 ?x46 ?x62)) (* (/ 3.0 4.0) (* ?x43 ?x46 ?x62 ?x62)) (* (- (/ 3.0 8.0)) (* ?x46 ?x46 ?x62)) (* (/ 3.0 8.0) (* ?x46 ?x46 ?x62 ?x62)) ?x809 ?x813 ?x816 ?x820 ?x824 ?x827 ?x830 (* (- (/ 1.0 8.0)) (* ?x43 ?x43 ?x62 ?x62 ?x62)) ?x833 (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x62 ?x62 ?x62)) ?x836 ?x839 ?x842 ?x845)))
 (let ((?x907 (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x1053 (+ (* (/ 1.0 8.0) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62 ?x107 ?x111)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x48 ?x62 ?x62 ?x62)) ?x907 (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x62 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x62 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x107 ?x111)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x48 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x107 ?x111)) (* (- (/ 1.0 8.0)) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62)))))
 (let (($x1059 (not (= ?x1053 0.0))))
 (let (($x300 (or $x1059 (not (= (* ?x413 (+ ?x46 ?x198 ?x118 (* ?x43 ?x62))) 0.0)))))
 (let (($x113 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x113 $x300))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x527 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x198 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x111 (to_real y00)))
 (let ((?x107 (to_real x00)))
 (let ((?x112 (* ?x107 ?x111)))
 (let ((?x118 (* (- 1.0) ?x112)))
 (let ((?x767 (+ ?x118 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x198)))
 (let ((?x62 (to_real y)))
 (let ((?x163 (* (/ 1.0 2.0) ?x62)))
 (let ((?x170 (+ (- (/ 1.0 2.0)) ?x163)))
 (let ((?x851 (+ ?x46 ?x43)))
 (let ((?x91 (+ (* (- 1.0) (* ?x851 ?x851 ?x170 ?x170 ?x170)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x851 ?x851 ?x851 ?x170 ?x170)) (* ?x851 ?x851 ?x851 ?x170 ?x170 ?x170))))
 (let ((?x907 (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x83 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x501 (+ ?x83 (* (- 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43 ?x43 ?x43)) ?x907)))
 (let (($x763 (or (not (= (* ?x501 (+ ?x118 (* ?x62 ?x43) ?x46 ?x198)) 0.0)) (not (= (* ?x91 ?x767) 0.0)))))
 (let (($x395 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x395 $x763)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x499 (lambda ((x Int) (y Int) (z Int) )(let ((?x111 (to_real y00)))
 (let ((?x107 (to_real x00)))
 (let ((?x112 (* ?x107 ?x111)))
 (let ((?x118 (* (- 1.0) ?x112)))
 (let ((?x48 (to_real z00)))
 (let ((?x198 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x845 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x842 (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62))))
 (let ((?x839 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46))))
 (let ((?x836 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62))))
 (let ((?x833 (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62))))
 (let ((?x830 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x827 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62 ?x62))))
 (let ((?x824 (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x62))))
 (let ((?x820 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x816 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62 ?x62))))
 (let ((?x813 (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x62))))
 (let ((?x809 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x408 (* (/ 1.0 8.0) (* ?x46 ?x46))))
 (let ((?x442 (* (/ 1.0 4.0) (* ?x43 ?x46))))
 (let ((?x163 (* (/ 1.0 2.0) ?x62)))
 (let ((?x170 (+ (- (/ 1.0 2.0)) ?x163)))
 (let ((?x219 (+ ?x43 ?x46)))
 (let ((?x325 (* (/ 1.0 8.0) (* ?x43 ?x43))))
 (let ((?x83 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x413 (+ ?x83 ?x325 (* ?x219 ?x219 ?x219 ?x170 ?x170 ?x170) ?x442 ?x408 (* (- (/ 3.0 8.0)) (* ?x43 ?x43 ?x62)) (* (/ 3.0 8.0) (* ?x43 ?x43 ?x62 ?x62)) (* (- (/ 3.0 4.0)) (* ?x43 ?x46 ?x62)) (* (/ 3.0 4.0) (* ?x43 ?x46 ?x62 ?x62)) (* (- (/ 3.0 8.0)) (* ?x46 ?x46 ?x62)) (* (/ 3.0 8.0) (* ?x46 ?x46 ?x62 ?x62)) ?x809 ?x813 ?x816 ?x820 ?x824 ?x827 ?x830 (* (- (/ 1.0 8.0)) (* ?x43 ?x43 ?x62 ?x62 ?x62)) ?x833 (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x62 ?x62 ?x62)) ?x836 ?x839 ?x842 ?x845)))
 (let ((?x907 (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x1053 (+ (* (/ 1.0 8.0) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62 ?x107 ?x111)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x48 ?x62 ?x62 ?x62)) ?x907 (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x62 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x62 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x107 ?x111)) (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x48 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x107 ?x111)) (* (- (/ 1.0 8.0)) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62)))))
 (let (($x1059 (not (= ?x1053 0.0))))
 (let (($x300 (or $x1059 (not (= (* ?x413 (+ ?x46 ?x198 ?x118 (* ?x43 ?x62))) 0.0)))))
 (let (($x113 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x311 (and $x113 $x300)))
 (let ((?x851 (+ ?x46 ?x43)))
 (let ((?x91 (+ (* (- 1.0) (* ?x851 ?x851 ?x170 ?x170 ?x170)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x851 ?x851 ?x851 ?x170 ?x170)) (* ?x851 ?x851 ?x851 ?x170 ?x170 ?x170))))
 (let (($x464 (= (* ?x91 (+ ?x118 (* 2.0 (* ?x43 ?x170)) ?x46 ?x43 ?x198)) 0.0)))
 (let ((?x501 (+ ?x83 (* (- 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43 ?x43 ?x43)) ?x907)))
 (let (($x763 (or (not (= (* ?x501 (+ ?x118 (* ?x62 ?x43) ?x46 ?x198)) 0.0)) (not $x464))))
 (let (($x395 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x805 (and $x395 $x763)))
 (rewrite (= $x805 $x311)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x786 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x198 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x111 (to_real y00)))
 (let ((?x107 (to_real x00)))
 (let ((?x112 (* ?x107 ?x111)))
 (let ((?x118 (* (- 1.0) ?x112)))
 (let ((?x767 (+ ?x118 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x198)))
 (let ((?x62 (to_real y)))
 (let ((?x163 (* (/ 1.0 2.0) ?x62)))
 (let ((?x170 (+ (- (/ 1.0 2.0)) ?x163)))
 (let ((?x851 (+ ?x46 ?x43)))
 (let ((?x91 (+ (* (- 1.0) (* ?x851 ?x851 ?x170 ?x170 ?x170)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x851 ?x851 ?x851 ?x170 ?x170)) (* ?x851 ?x851 ?x851 ?x170 ?x170 ?x170))))
 (let ((?x907 (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x83 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x501 (+ ?x83 (* (- 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43 ?x43 ?x43)) ?x907)))
 (let (($x763 (or (not (= (* ?x501 (+ ?x118 (* ?x62 ?x43) ?x46 ?x198)) 0.0)) (not (= (* ?x91 ?x767) 0.0)))))
 (let (($x595 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x595 $x763)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x169 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x198 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x111 (to_real y00)))
 (let ((?x107 (to_real x00)))
 (let ((?x112 (* ?x107 ?x111)))
 (let ((?x118 (* (- 1.0) ?x112)))
 (let ((?x767 (+ ?x118 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x198)))
 (let ((?x62 (to_real y)))
 (let ((?x163 (* (/ 1.0 2.0) ?x62)))
 (let ((?x170 (+ (- (/ 1.0 2.0)) ?x163)))
 (let ((?x851 (+ ?x46 ?x43)))
 (let ((?x91 (+ (* (- 1.0) (* ?x851 ?x851 ?x170 ?x170 ?x170)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x851 ?x851 ?x851 ?x170 ?x170)) (* ?x851 ?x851 ?x851 ?x170 ?x170 ?x170))))
 (let ((?x907 (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x83 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x501 (+ ?x83 (* (- 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43 ?x43 ?x43)) ?x907)))
 (let (($x763 (or (not (= (* ?x501 (+ ?x118 (* ?x62 ?x43) ?x46 ?x198)) 0.0)) (not (= (* ?x91 ?x767) 0.0)))))
 (let (($x395 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x805 (and $x395 $x763)))
 (let (($x595 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x730 (and $x595 $x763)))
 (rewrite (= $x730 $x805)))))))))))))))))))))))))
 ))
 (let (($x77 (exists ((x Int) (y Int) (z Int) )(! (let ((?x59 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x62 (to_real y)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x69 (- (* (to_real (- 1)) ?x63 ?x63 ?x63 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x63 ?x63 ?x46 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x52 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x58 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (+ ?x55 (* ?x42 ?x42 ?x42 ?x52 ?x52 ?x52)))))
 (let (($x75 (or (not (= ?x58 ?x59)) (not (= (* ?x66 (+ ?x69 (* ?x63 ?x63 ?x63 ?x46 ?x46 ?x46))) ?x59)))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) $x75)))))))))))))))))) :qid k!28))
 ))
 (let ((?x762 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x198 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x111 (to_real y00)))
 (let ((?x107 (to_real x00)))
 (let ((?x112 (* ?x107 ?x111)))
 (let ((?x118 (* (- 1.0) ?x112)))
 (let ((?x767 (+ ?x118 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x198)))
 (let ((?x62 (to_real y)))
 (let ((?x163 (* (/ 1.0 2.0) ?x62)))
 (let ((?x170 (+ (- (/ 1.0 2.0)) ?x163)))
 (let ((?x851 (+ ?x46 ?x43)))
 (let ((?x91 (+ (* (- 1.0) (* ?x851 ?x851 ?x170 ?x170 ?x170)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x851 ?x851 ?x851 ?x170 ?x170)) (* ?x851 ?x851 ?x851 ?x170 ?x170 ?x170))))
 (let ((?x907 (* (/ 1.0 8.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x83 (* (- (/ 1.0 8.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x501 (+ ?x83 (* (- 2.0) (* ?x46 ?x46 ?x46 ?x62 ?x62 ?x43 ?x43 ?x43)) ?x907)))
 (let (($x763 (or (not (= (* ?x501 (+ ?x118 (* ?x62 ?x43) ?x46 ?x198)) 0.0)) (not (= (* ?x91 ?x767) 0.0)))))
 (let (($x595 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x730 (and $x595 $x763)))
 (let ((?x59 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x69 (- (* (to_real (- 1)) ?x63 ?x63 ?x63 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x63 ?x63 ?x46 ?x46 ?x46))))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* (to_real (- 1)) ?x42 ?x42 ?x42 ?x52 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x58 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (+ ?x55 (* ?x42 ?x42 ?x42 ?x52 ?x52 ?x52)))))
 (let (($x75 (or (not (= ?x58 ?x59)) (not (= (* ?x66 (+ ?x69 (* ?x63 ?x63 ?x63 ?x46 ?x46 ?x46))) ?x59)))))
 (let (($x76 (and (= (- (+ ?x31 (* x y) z) z00) 0) $x75)))
 (rewrite (= $x76 $x730)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x78 (asserted $x77)))
 (let ((@x749 (mp (mp @x78 (quant-intro (proof-bind ?x762) (= $x77 $x786)) $x786) (rewrite (= $x786 $x786)) $x786)))
 (let ((@x761 (mp (mp @x749 (quant-intro (proof-bind ?x169) (= $x786 $x527)) $x527) (quant-intro (proof-bind ?x499) (= $x527 $x675)) $x675)))
 (let ((@x229 (mp (mp~ @x761 (sk (~ $x675 $x512)) $x512) (rewrite (= $x512 $x672)) $x672)))
 (let ((@x569 (mp (and-elim @x229 $x821) @x571 $x148)))
 (let ((@x206 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x148) $x511)) @x569 $x511)))
 (let ((@x373 ((_ th-lemma arith) (hypothesis (not $x539)) @x206 (hypothesis $x654) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x382) $x651)) @x230 $x651) false)))
 (let ((@x753 (unit-resolution (lemma @x373 (or (not $x654) $x539)) @x398 $x539)))
 (let (($x462 (<= ?x522 0.0)))
 (let ((?x641 (+ (* (- 1.0) ?x387) ?x231)))
 (let (($x629 (<= ?x641 0.0)))
 (let (($x639 (= 0.0 ?x641)))
 (let ((@x802 (symm (commutativity (= $x639 (= ?x641 0.0))) (= (= ?x641 0.0) $x639))))
 (let ((@x586 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x639) $x629)) (mp ((_ th-lemma arith) (= ?x641 0.0)) @x802 $x639) $x629)))
 (let (($x513 (>= ?x529 0)))
 (let ((@x771 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x148) $x513)) @x569 $x513)))
 (let (($x563 (>= ?x348 0.0)))
 (let ((@x245 ((_ th-lemma arith) (hypothesis (not $x462)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x382) $x563)) @x230 $x563) @x771 @x586 false)))
 (let ((@x873 (lemma @x245 $x462)))
 (let (($x157 (<= ?x618 0.0)))
 (let (($x737 (not $x157)))
 (let (($x517 (>= ?x618 0.0)))
 (let (($x531 (>= ?x660 0.0)))
 (let ((@x789 (unit-resolution ((_ th-lemma arith) (or (not $x511) (not $x513) $x517 (not $x654) (not $x531))) @x206 @x771 (hypothesis (not $x517)) @x398 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x655) $x531)) @x931 $x531) false)))
 (let (($x514 (= 0.0 ?x618)))
 (let (($x354 (not $x514)))
 (let ((@x95 (monotonicity (symm (commutativity (= $x514 $x621)) (= $x621 $x514)) (= $x636 $x354))))
 (let (($x164 (= 0.0 ?x522)))
 (let ((@x695 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x164 (not $x462) (not $x539))) @x873 @x753 $x164)))
 (let (($x768 (= ?x522 0.0)))
 (let (($x558 (not $x768)))
 (let ((@x166 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x558 $x246)) (hypothesis $x892) $x558) (symm (hypothesis $x164) $x768) false)))
 (let ((@x396 (unit-resolution (and-elim @x229 $x217) (unit-resolution (lemma @x166 (or (not $x164) $x246)) @x695 $x246) $x636)))
 (let ((@x100 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x514 $x737 (not $x517))) (mp @x396 @x95 $x354) (lemma @x789 $x517) $x737)))
 (unit-resolution ((_ th-lemma arith) (or (not $x462) (not $x539) $x157)) @x100 @x873 @x753 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       157
 :arith-eq-adapter                190
 :arith-bound-propagations-cheap  116
 :arith-bound-propagations-lp     55
 :arith-branch                    3
 :arith-conflicts                 267
 :arith-cube-calls                1
 :arith-diseq                     236
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 10
 :arith-grobner-calls             7
 :arith-grobner-conflicts         2
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 2
 :arith-lower                     183
 :arith-make-feasible             157
 :arith-max-columns               129
 :arith-max-rows                  70
 :arith-nla-explanations          502
 :arith-nla-lemmas                256
 :arith-patches                   10
 :arith-patches-success           7
 :arith-propagations              116
 :arith-upper                     233
 :conflicts                       23
 :decisions                       488
 :del-clause                      811
 :final-checks                    54
 :max-memory                      8.11
 :memory                          3.21
 :mk-bool-var                     1039
 :mk-clause                       1126
 :num-allocs                      126441305
 :num-checks                      1
 :propagations                    580
 :rlimit-count                    13870
 :time                            0.39
 :total-time                      0.39)
