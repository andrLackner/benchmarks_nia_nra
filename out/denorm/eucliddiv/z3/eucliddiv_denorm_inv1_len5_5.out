unsat
((set-logic NIA)
(proof
(let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x51 (* ?x43 ?x43 ?x45 y00)))
 (let ((?x50 (* ?x43 ?x43 ?x43 ?x45 y00 y00)))
 (let ((?x47 (* ?x45 ?x45 y00 y00)))
 (let ((?x46 (* ?x45 ?x45 ?x45 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00)))
 (let ((?x48 (- ?x44 ?x46)))
 (let ((?x49 (- ?x48 ?x47)))
 (let ((?x52 (+ ?x49 ?x50 ?x51)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x53 (* ?x42 ?x52)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x56)))))))))))))))))))) :qid k!29))
 ))
 (let (($x448 (= $x58 false)))
 (let (($x441 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x447 (elim-unused (= $x441 false))))
 (let (($x444 (= $x58 $x441)))
 (let ((?x538 (lambda ((q Int) (r Int) (y Int) )(let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x51 (* ?x43 ?x43 ?x45 y00)))
 (let ((?x50 (* ?x43 ?x43 ?x43 ?x45 y00 y00)))
 (let ((?x47 (* ?x45 ?x45 y00 y00)))
 (let ((?x46 (* ?x45 ?x45 ?x45 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00)))
 (let ((?x48 (- ?x44 ?x46)))
 (let ((?x49 (- ?x48 ?x47)))
 (let ((?x52 (+ ?x49 ?x50 ?x51)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x53 (* ?x42 ?x52)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x57 (and $x33 $x41 $x56)))
 (let (($x439 (= $x57 false)))
 (let (($x478 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x87 (= (+ (* (- 1) y00) y) 0)))
 (let (($x532 (and $x87 $x478 false)))
 (let (($x432 (= $x56 false)))
 (let ((@x431 (rewrite (= (or false) false))))
 (let (($x427 (or false)))
 (let (($x428 (= $x56 $x427)))
 (let (($x425 (= $x55 false)))
 (let ((@x424 (rewrite (= (not true) false))))
 (let (($x420 (not true)))
 (let (($x421 (= $x55 $x420)))
 (let (($x418 (= $x54 true)))
 (let ((@x417 (rewrite (= (= 0 0) true))))
 (let (($x413 (= 0 0)))
 (let (($x414 (= $x54 $x413)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x119 (+ r ?x63)))
 (let ((?x82 (+ 1 q)))
 (let ((?x507 (* y00 ?x82 ?x82 ?x119)))
 (let ((?x502 (* y00 y00 ?x82 ?x82 ?x82 ?x119)))
 (let ((?x483 (* y00 y00 ?x119 ?x119)))
 (let ((?x491 (* (- 1) ?x483)))
 (let ((?x459 (* y00 y00 ?x119 ?x119 ?x119)))
 (let ((?x474 (* (- 1) ?x459)))
 (let ((?x451 (* (- 1) (* y00 ?x82 ?x82))))
 (let ((?x515 (+ ?x451 ?x474 ?x491 ?x502 ?x507)))
 (let ((?x520 (* 0 ?x515)))
 (let ((@x121 (rewrite (= ?x45 ?x119))))
 (let ((@x84 (rewrite (= ?x43 ?x82))))
 (let ((@x357 (monotonicity @x84 @x84 @x121 (= ?x51 (* ?x82 ?x82 ?x119 y00)))))
 (let ((@x511 (trans @x357 (rewrite (= (* ?x82 ?x82 ?x119 y00) ?x507)) (= ?x51 ?x507))))
 (let ((@x287 (monotonicity @x84 @x84 @x84 @x121 (= ?x50 (* ?x82 ?x82 ?x82 ?x119 y00 y00)))))
 (let ((@x506 (trans @x287 (rewrite (= (* ?x82 ?x82 ?x82 ?x119 y00 y00) ?x502)) (= ?x50 ?x502))))
 (let ((@x222 (monotonicity @x121 @x121 (= ?x47 (* ?x119 ?x119 y00 y00)))))
 (let ((@x487 (trans @x222 (rewrite (= (* ?x119 ?x119 y00 y00) ?x483)) (= ?x47 ?x483))))
 (let ((@x124 (monotonicity @x121 @x121 @x121 (= ?x46 (* ?x119 ?x119 ?x119 y00 y00)))))
 (let ((@x466 (trans @x124 (rewrite (= (* ?x119 ?x119 ?x119 y00 y00) ?x459)) (= ?x46 ?x459))))
 (let ((@x90 (monotonicity (rewrite (= ?x28 (- 1))) @x84 @x84 (= ?x44 (* (- 1) ?x82 ?x82 y00)))))
 (let ((@x458 (trans @x90 (rewrite (= (* (- 1) ?x82 ?x82 y00) ?x451)) (= ?x44 ?x451))))
 (let ((@x482 (trans (monotonicity @x458 @x466 (= ?x48 (- ?x451 ?x459))) (rewrite (= (- ?x451 ?x459) (+ ?x451 ?x474))) (= ?x48 (+ ?x451 ?x474)))))
 (let ((@x496 (trans (monotonicity @x482 @x487 (= ?x49 (- (+ ?x451 ?x474) ?x483))) (rewrite (= (- (+ ?x451 ?x474) ?x483) (+ (+ ?x451 ?x474) ?x491))) (= ?x49 (+ (+ ?x451 ?x474) ?x491)))))
 (let ((@x501 (trans @x496 (rewrite (= (+ (+ ?x451 ?x474) ?x491) (+ ?x451 ?x474 ?x491))) (= ?x49 (+ ?x451 ?x474 ?x491)))))
 (let ((@x514 (monotonicity @x501 @x506 @x511 (= ?x52 (+ (+ ?x451 ?x474 ?x491) ?x502 ?x507)))))
 (let ((@x519 (trans @x514 (rewrite (= (+ (+ ?x451 ?x474 ?x491) ?x502 ?x507) ?x515)) (= ?x52 ?x515))))
 (let ((@x79 (trans (monotonicity (rewrite (= ?x30 ?x63)) (= ?x42 (+ ?x63 y00))) (rewrite (= (+ ?x63 y00) 0)) (= ?x42 0))))
 (let ((@x525 (trans (monotonicity @x79 @x519 (= ?x53 ?x520)) (rewrite (= ?x520 0)) $x54)))
 (let ((@x529 (trans (monotonicity (trans (monotonicity @x525 $x414) @x417 $x418) $x421) @x424 $x425)))
 (let ((@x534 (monotonicity (rewrite (= $x33 $x87)) (rewrite (= $x41 $x478)) (trans (monotonicity @x529 $x428) @x431 $x432) (= $x57 $x532))))
 (trans @x534 (rewrite (= $x532 false)) $x439)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (mp @x59 (trans (quant-intro (proof-bind ?x538) $x444) @x447 $x448) false))))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   917157
 :rlimit-count 319
 :time         0.01
 :total-time   0.01)
