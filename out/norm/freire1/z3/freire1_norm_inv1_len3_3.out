unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x1099 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x611 (* (- 1) ?x36)))
 (let ((?x585 (* (- 2) x00)))
 (let ((?x539 (+ r00 ?x585 ?x611 (* (- 1) r!1) (* 2 x!0) ?x1099)))
 (let (($x525 (<= ?x539 0)))
 (let (($x541 (= ?x539 0)))
 (let ((?x1105 (* r!1 r!1 x!0)))
 (let ((?x320 (* r!1 r!1 r!1)))
 (let ((?x242 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x866 (+ ?x242 (* (- 2) (* x00 r!1 r!1)) (* 6 (* r!1 x!0)) ?x320 (* (- 1) (* r!1 r!1 x!0 x!0 x!0)) (* (- 4) (* x!0 x!0)) (* 7 (* r!1 x!0 x!0 x!0)) (* (- 2) (* x00 r!1 r!1 r!1)) (* (- 2) (* x!0 x!0 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0)) (* (- 2) (* r!1 x!0 x!0)) (* (- 9) (* r!1 r!1 x!0 x!0)) (* 3 (* r!1 r!1 r!1 x!0 x!0)) (* (- 6) (* x00 r!1 x!0 x!0)) (* (- 2) (* r00 r00 r!1)) (* 2 (* x00 x!0 x!0 x!0)) (* 2 (* r00 r!1)) (* 2 (* r00 r00 x!0)) (* (- 1) (* r00 r00 r!1 r!1)) (* 2 (* x00 r!1 x!0)) (* (- 4) (* x00 r!1)) (* 4 (* x00 x!0)) (* r00 r00 r!1 x!0) (* r00 r!1 r!1) (* (- 2) (* r00 x!0)) (* 6 (* x00 r!1 r!1 x!0)) (* (- 2) ?x1099) ?x1105 (* 4 (* r!1 r!1 r!1 x!0)) (* (- 1) (* r00 r!1 x!0)) (* (- 1) (* r00 r00 r!1 r!1 r!1)) (* 3 (* r00 r00 r!1 r!1 x!0)) (* (- 3) (* r00 r00 r!1 x!0 x!0)) (* r00 r00 x!0 x!0 x!0) (* r00 r!1 r!1 r!1) (* (- 3) (* r00 r!1 r!1 x!0)) (* 3 (* r00 r!1 x!0 x!0)) (* (- 1) (* r00 x!0 x!0 x!0)))))
 (let (($x868 (= ?x866 0)))
 (let (($x1336 (not $x868)))
 (let (($x1113 (and $x541 $x1336)))
 (let ((?x332 (* r!1 r!1 x!0 x!0 x!0)))
 (let ((?x510 (+ (* 2 ?x1099) (* (- 2) (* x!0 x!0 x!0 x00)) (* (- 2) (* r!1 r00)) (* (- 1) (* r!1 r!1 r00)) (* 2 (* r!1 r!1 r!1 x00)) (* 2 (* x!0 r00)) (* r!1 x!0 r00) (* (- 6) (* r!1 x!0)) (* (- 1) ?x1105) (* (- 4) (* r!1 r!1 r!1 x!0)) (* (- 1) ?x320) (* (- 7) (* r!1 x!0 x!0 x!0)) ?x332 (* (- 1) ?x242) (* 3 (* r!1 r!1 r!1 r!1 x!0)) (* 2 (* r!1 x!0 x!0)) (* 9 (* r!1 r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0 x!0)) (* 6 (* r!1 x!0 x!0 x00)) (* (- 4) (* x!0 x00)) (* (- 2) (* r!1 x!0 x00)) (* 4 (* r!1 x00)) (* 2 (* r!1 r!1 x00)) (* 4 (* x!0 x!0)) (* 2 (* r!1 r00 r00)) (* r!1 r!1 r00 r00) (* (- 2) (* x!0 r00 r00)) (* (- 1) (* r!1 x!0 r00 r00)) (* 2 (* x!0 x!0 x!0 x!0)) (* (- 6) (* r!1 r!1 x!0 x00)) (* r!1 r!1 r!1 r00 r00) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* 3 (* r!1 x!0 x!0 r00 r00)) (* (- 1) (* x!0 x!0 x!0 r00 r00)) (* (- 1) (* r!1 r!1 r!1 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* (- 3) (* r!1 x!0 x!0 r00)) (* x!0 x!0 x!0 r00))))
 (let ((?x35 (* 2 x00)))
 (let ((?x132 (* (- 1) r00)))
 (let (($x518 (and (= (+ r!1 (* (- 2) x!0) ?x132 (* (- 1) ?x1099) ?x35 ?x36) 0) (not (= ?x510 0)))))
 (let (($x1433 (exists ((r Int) (x Int) )(! (let ((?x1151 (* x x x r00)))
 (let ((?x976 (* r r r r00 r00)))
 (let ((?x735 (* r r r00 r00)))
 (let ((?x378 (* r r x x x)))
 (let ((?x1191 (* (- 4) (* r r r x))))
 (let ((?x212 (* r x r00)))
 (let ((?x30 (* r r)))
 (let ((?x1178 (* 2 ?x30)))
 (let ((?x1426 (+ ?x1178 (* (- 2) (* x x x x00)) (* (- 2) (* r r00)) (* (- 1) (* r r r00)) (* 2 (* r r r x00)) (* 2 (* x r00)) ?x212 (* (- 6) (* r x)) (* (- 1) (* r r x)) ?x1191 (* (- 1) (* r r r)) (* (- 7) (* r x x x)) ?x378 (* (- 1) (* r r r r r)) (* 3 (* r r r r x)) (* 2 (* r x x)) (* 9 (* r r x x)) (* (- 3) (* r r r x x)) (* 6 (* r x x x00)) (* (- 4) (* x x00)) (* (- 2) (* r x x00)) (* 4 (* r x00)) (* 2 (* r r x00)) (* 4 (* x x)) (* 2 (* r r00 r00)) ?x735 (* (- 2) (* x r00 r00)) (* (- 1) (* r x r00 r00)) (* 2 (* x x x x)) (* (- 6) (* r r x x00)) ?x976 (* (- 3) (* r r x r00 r00)) (* 3 (* r x x r00 r00)) (* (- 1) (* x x x r00 r00)) (* (- 1) (* r r r r00)) (* 3 (* r r x r00)) (* (- 3) (* r x x r00)) ?x1151)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x133 (* (- 1) ?x30)))
 (let ((?x132 (* (- 1) r00)))
 (let ((?x131 (* (- 2) x)))
 (let (($x135 (= (+ r ?x131 ?x132 ?x133 ?x35 ?x36) 0)))
 (and $x135 (not (= ?x1426 0)))))))))))))))))) :qid k!26))
 ))
 (let (($x947 (exists ((r Int) (x Int) )(! (let ((?x82 (* (- 1) r)))
 (let ((?x591 (+ x ?x82)))
 (let ((?x938 (* r00 ?x591 ?x591 ?x591)))
 (let ((?x1075 (* r00 r00 ?x591 ?x591 ?x591)))
 (let ((?x807 (* r00 r00 ?x591)))
 (let ((?x200 (+ 1 r)))
 (let ((?x1025 (* r00 r00 ?x200 ?x591)))
 (let ((?x1006 (* ?x200 ?x591 ?x591 ?x591)))
 (let ((?x281 (* ?x200 ?x591)))
 (let ((?x605 (+ (* 2 (* x00 ?x591 ?x591 ?x591)) (* (- 1) (* r00 ?x200 ?x591)) (* (- 1) (* ?x200 ?x200 ?x200 ?x591)) ?x281 (* (- 1) (* ?x200 ?x200 ?x591 ?x591 ?x591)) (* 2 (* x00 ?x200 ?x591)) (* (- 2) (* ?x591 ?x591)) ?x1006 ?x1025 (* (- 2) (* ?x200 ?x591 ?x591)) (* (- 2) (* ?x591 ?x591 ?x591 ?x591)) (* (- 1) (* r00 ?x591)) ?x807 (* 2 (* x00 ?x591)) ?x1075 (* (- 1) ?x938))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x131 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x133 (* (- 1) ?x30)))
 (let ((?x132 (* (- 1) r00)))
 (and (= (+ r ?x132 ?x133 ?x131 ?x35 ?x36) 0) (not (= ?x605 0))))))))))))))))))) :qid k!26))
 ))
 (let ((?x1435 (lambda ((r Int) (x Int) )(let ((?x1151 (* x x x r00)))
 (let ((?x976 (* r r r r00 r00)))
 (let ((?x735 (* r r r00 r00)))
 (let ((?x378 (* r r x x x)))
 (let ((?x1191 (* (- 4) (* r r r x))))
 (let ((?x212 (* r x r00)))
 (let ((?x30 (* r r)))
 (let ((?x1178 (* 2 ?x30)))
 (let ((?x1426 (+ ?x1178 (* (- 2) (* x x x x00)) (* (- 2) (* r r00)) (* (- 1) (* r r r00)) (* 2 (* r r r x00)) (* 2 (* x r00)) ?x212 (* (- 6) (* r x)) (* (- 1) (* r r x)) ?x1191 (* (- 1) (* r r r)) (* (- 7) (* r x x x)) ?x378 (* (- 1) (* r r r r r)) (* 3 (* r r r r x)) (* 2 (* r x x)) (* 9 (* r r x x)) (* (- 3) (* r r r x x)) (* 6 (* r x x x00)) (* (- 4) (* x x00)) (* (- 2) (* r x x00)) (* 4 (* r x00)) (* 2 (* r r x00)) (* 4 (* x x)) (* 2 (* r r00 r00)) ?x735 (* (- 2) (* x r00 r00)) (* (- 1) (* r x r00 r00)) (* 2 (* x x x x)) (* (- 6) (* r r x x00)) ?x976 (* (- 3) (* r r x r00 r00)) (* 3 (* r x x r00 r00)) (* (- 1) (* x x x r00 r00)) (* (- 1) (* r r r r00)) (* 3 (* r r x r00)) (* (- 3) (* r x x r00)) ?x1151)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x133 (* (- 1) ?x30)))
 (let ((?x132 (* (- 1) r00)))
 (let ((?x131 (* (- 2) x)))
 (let (($x135 (= (+ r ?x131 ?x132 ?x133 ?x35 ?x36) 0)))
 (let (($x1003 (and $x135 (not (= ?x1426 0)))))
 (let ((?x82 (* (- 1) r)))
 (let ((?x591 (+ x ?x82)))
 (let ((?x938 (* r00 ?x591 ?x591 ?x591)))
 (let ((?x1075 (* r00 r00 ?x591 ?x591 ?x591)))
 (let ((?x807 (* r00 r00 ?x591)))
 (let ((?x200 (+ 1 r)))
 (let ((?x1025 (* r00 r00 ?x200 ?x591)))
 (let ((?x1006 (* ?x200 ?x591 ?x591 ?x591)))
 (let ((?x281 (* ?x200 ?x591)))
 (let ((?x605 (+ (* 2 (* x00 ?x591 ?x591 ?x591)) (* (- 1) (* r00 ?x200 ?x591)) (* (- 1) (* ?x200 ?x200 ?x200 ?x591)) ?x281 (* (- 1) (* ?x200 ?x200 ?x591 ?x591 ?x591)) (* 2 (* x00 ?x200 ?x591)) (* (- 2) (* ?x591 ?x591)) ?x1006 ?x1025 (* (- 2) (* ?x200 ?x591 ?x591)) (* (- 2) (* ?x591 ?x591 ?x591 ?x591)) (* (- 1) (* r00 ?x591)) ?x807 (* 2 (* x00 ?x591)) ?x1075 (* (- 1) ?x938))))
 (let (($x911 (and (= (+ r ?x132 ?x133 ?x131 ?x35 ?x36) 0) (not (= ?x605 0)))))
 (rewrite (= $x911 $x1003))))))))))))))))))))))))))))))
 ))
 (let (($x551 (exists ((r Int) (x Int) )(! (let ((?x82 (* (- 1) r)))
 (let ((?x591 (+ x ?x82)))
 (let ((?x938 (* r00 ?x591 ?x591 ?x591)))
 (let ((?x858 (* r00 ?x591)))
 (let ((?x200 (+ 1 r)))
 (let ((?x532 (* ?x200 ?x200 ?x591 ?x591 ?x591)))
 (let ((?x249 (* ?x200 ?x200 ?x200 ?x591)))
 (let ((?x166 (* r00 ?x200 ?x591)))
 (let ((?x233 (+ (* (- 2) (* x00 ?x591 ?x591 ?x591)) ?x166 ?x249 (* (- 1) (* ?x200 ?x591)) ?x532 (* (- 2) (* x00 ?x200 ?x591)) (* 2 (* ?x591 ?x591)) (* (- 1) (* ?x200 ?x591 ?x591 ?x591)) (* (- 1) (* r00 r00 ?x200 ?x591)) (* 2 (* ?x200 ?x591 ?x591)) (* 2 (* ?x591 ?x591 ?x591 ?x591)) ?x858 (* (- 1) (* r00 r00 ?x591)) (* (- 2) (* x00 ?x591)) (* (- 1) (* r00 r00 ?x591 ?x591 ?x591)) ?x938)))
 (let ((?x36 (* r00 r00)))
 (let ((?x611 (* (- 1) ?x36)))
 (let ((?x585 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x82 r00 ?x30 ?x32 ?x585 ?x611) 0) (not (= ?x233 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x948 (lambda ((r Int) (x Int) )(let ((?x82 (* (- 1) r)))
 (let ((?x591 (+ x ?x82)))
 (let ((?x938 (* r00 ?x591 ?x591 ?x591)))
 (let ((?x1075 (* r00 r00 ?x591 ?x591 ?x591)))
 (let ((?x807 (* r00 r00 ?x591)))
 (let ((?x200 (+ 1 r)))
 (let ((?x1025 (* r00 r00 ?x200 ?x591)))
 (let ((?x1006 (* ?x200 ?x591 ?x591 ?x591)))
 (let ((?x281 (* ?x200 ?x591)))
 (let ((?x605 (+ (* 2 (* x00 ?x591 ?x591 ?x591)) (* (- 1) (* r00 ?x200 ?x591)) (* (- 1) (* ?x200 ?x200 ?x200 ?x591)) ?x281 (* (- 1) (* ?x200 ?x200 ?x591 ?x591 ?x591)) (* 2 (* x00 ?x200 ?x591)) (* (- 2) (* ?x591 ?x591)) ?x1006 ?x1025 (* (- 2) (* ?x200 ?x591 ?x591)) (* (- 2) (* ?x591 ?x591 ?x591 ?x591)) (* (- 1) (* r00 ?x591)) ?x807 (* 2 (* x00 ?x591)) ?x1075 (* (- 1) ?x938))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x131 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x133 (* (- 1) ?x30)))
 (let ((?x132 (* (- 1) r00)))
 (let (($x911 (and (= (+ r ?x132 ?x133 ?x131 ?x35 ?x36) 0) (not (= ?x605 0)))))
 (let ((?x858 (* r00 ?x591)))
 (let ((?x532 (* ?x200 ?x200 ?x591 ?x591 ?x591)))
 (let ((?x249 (* ?x200 ?x200 ?x200 ?x591)))
 (let ((?x166 (* r00 ?x200 ?x591)))
 (let ((?x233 (+ (* (- 2) (* x00 ?x591 ?x591 ?x591)) ?x166 ?x249 (* (- 1) ?x281) ?x532 (* (- 2) (* x00 ?x200 ?x591)) (* 2 (* ?x591 ?x591)) (* (- 1) ?x1006) (* (- 1) ?x1025) (* 2 (* ?x200 ?x591 ?x591)) (* 2 (* ?x591 ?x591 ?x591 ?x591)) ?x858 (* (- 1) ?x807) (* (- 2) (* x00 ?x591)) (* (- 1) ?x1075) ?x938)))
 (let (($x162 (= (+ ?x82 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x583 (and $x162 (not (= ?x233 0)))))
 (rewrite (= $x583 $x911)))))))))))))))))))))))))))
 ))
 (let (($x77 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x44 (+ r 1)))
 (let ((?x47 (+ (* (- 2) ?x42 ?x42 ?x42 x00) (* ?x44 r00 ?x42) (* ?x44 ?x44 ?x44 ?x42))))
 (let ((?x52 (+ (- ?x47 (* ?x44 ?x42)) (* 0 ?x44 ?x44 ?x42) (* ?x44 ?x44 ?x42 ?x42 ?x42))))
 (let ((?x59 (- (+ (- ?x52 (* 2 ?x44 ?x42 x00)) (* 2 ?x42 ?x42)) (* ?x44 ?x42 ?x42 ?x42))))
 (let ((?x64 (+ (- ?x59 (* ?x44 r00 r00 ?x42)) (* 2 ?x44 ?x42 ?x42) (* 2 ?x42 ?x42 ?x42 ?x42) (* r00 ?x42))))
 (let ((?x70 (- (- (- ?x64 (* r00 r00 ?x42)) (* 2 ?x42 x00)) (* r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (+ ?x70 (* r00 ?x42 ?x42 ?x42)) 0)))))))))))))) :qid k!26))
 ))
 (let ((?x158 (lambda ((r Int) (x Int) )(let ((?x82 (* (- 1) r)))
 (let ((?x591 (+ x ?x82)))
 (let ((?x938 (* r00 ?x591 ?x591 ?x591)))
 (let ((?x858 (* r00 ?x591)))
 (let ((?x200 (+ 1 r)))
 (let ((?x532 (* ?x200 ?x200 ?x591 ?x591 ?x591)))
 (let ((?x249 (* ?x200 ?x200 ?x200 ?x591)))
 (let ((?x166 (* r00 ?x200 ?x591)))
 (let ((?x233 (+ (* (- 2) (* x00 ?x591 ?x591 ?x591)) ?x166 ?x249 (* (- 1) (* ?x200 ?x591)) ?x532 (* (- 2) (* x00 ?x200 ?x591)) (* 2 (* ?x591 ?x591)) (* (- 1) (* ?x200 ?x591 ?x591 ?x591)) (* (- 1) (* r00 r00 ?x200 ?x591)) (* 2 (* ?x200 ?x591 ?x591)) (* 2 (* ?x591 ?x591 ?x591 ?x591)) ?x858 (* (- 1) (* r00 r00 ?x591)) (* (- 2) (* x00 ?x591)) (* (- 1) (* r00 r00 ?x591 ?x591 ?x591)) ?x938)))
 (let ((?x36 (* r00 r00)))
 (let ((?x611 (* (- 1) ?x36)))
 (let ((?x585 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x583 (and (= (+ ?x82 r00 ?x30 ?x32 ?x585 ?x611) 0) (not (= ?x233 0)))))
 (let ((?x42 (- x r)))
 (let ((?x44 (+ r 1)))
 (let ((?x47 (+ (* (- 2) ?x42 ?x42 ?x42 x00) (* ?x44 r00 ?x42) (* ?x44 ?x44 ?x44 ?x42))))
 (let ((?x52 (+ (- ?x47 (* ?x44 ?x42)) (* 0 ?x44 ?x44 ?x42) (* ?x44 ?x44 ?x42 ?x42 ?x42))))
 (let ((?x59 (- (+ (- ?x52 (* 2 ?x44 ?x42 x00)) (* 2 ?x42 ?x42)) (* ?x44 ?x42 ?x42 ?x42))))
 (let ((?x64 (+ (- ?x59 (* ?x44 r00 r00 ?x42)) (* 2 ?x44 ?x42 ?x42) (* 2 ?x42 ?x42 ?x42 ?x42) (* r00 ?x42))))
 (let ((?x70 (- (- (- ?x64 (* r00 r00 ?x42)) (* 2 ?x42 x00)) (* r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x76 (and (= ?x38 0) (or (not (= (+ ?x70 (* r00 ?x42 ?x42 ?x42)) 0))))))
 (rewrite (= $x76 $x583)))))))))))))))))))))))))))
 ))
 (let ((@x78 (asserted $x77)))
 (let ((@x903 (mp (mp @x78 (quant-intro (proof-bind ?x158) (= $x77 $x551)) $x551) (rewrite (= $x551 $x551)) $x551)))
 (let ((@x1064 (mp (mp @x903 (quant-intro (proof-bind ?x948) (= $x551 $x947)) $x947) (quant-intro (proof-bind ?x1435) (= $x947 $x1433)) $x1433)))
 (let ((@x1337 (mp (mp~ @x1064 (sk (~ $x1433 $x518)) $x518) (rewrite (= $x518 $x1113)) $x1113)))
 (let ((@x214 (and-elim @x1337 $x541)))
 (let ((@x1085 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x541) $x525)) @x214 $x525)))
 (let (($x376 (>= ?x539 0)))
 (let ((@x1259 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x541) $x376)) @x214 $x376)))
 (let (($x1053 (not (>= ?x866 0))))
 (let (($x523 (<= ?x866 0)))
 (let ((@x1252 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x868 (not $x523) $x1053)) (and-elim @x1337 $x1336) (or (not $x523) $x1053))))
 (let ((@x1073 (unit-resolution @x1252 (lemma ((_ th-lemma arith) (hypothesis (not $x523)) @x1259 @x1085 false) $x523) $x1053)))
 ((_ th-lemma arith) @x1073 @x1259 @x1085 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             332
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.80
 :memory                    3.27
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1225286
 :num-checks                1
 :propagations              4
 :rlimit-count              5014
 :time                      0.01
 :total-time                0.01)
