unsat
((set-logic NIA)
(proof
(let (($x48 (exists ((x Int) (y Int) )(! (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x41 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 x00 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x40 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x39 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 y00)))
 (let ((?x38 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 y00)))
 (let ((?x37 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x36 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 x00 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x43 (+ ?x36 ?x37 ?x38 ?x39 ?x40 ?x41 ?x42)))
 (let (($x44 (= ?x43 0)))
 (let (($x45 (not $x44)))
 (let (($x46 (or $x45)))
 (let (($x32 (= (+ (- (- x y00) x00) y) 0)))
 (and $x32 $x46))))))))))))))) :qid k!26))
 ))
 (let (($x171 (= $x48 false)))
 (let (($x164 (exists ((x Int) (y Int) )(! false :qid k!26))
 ))
 (let ((@x170 (elim-unused (= $x164 false))))
 (let (($x167 (= $x48 $x164)))
 (let ((?x177 (lambda ((x Int) (y Int) )(let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x41 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 x00 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x40 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x39 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 y00)))
 (let ((?x38 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 y00)))
 (let ((?x37 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x36 (* 0 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 ?x34 x00 ?x35 ?x35 ?x35 ?x35 ?x35 ?x35)))
 (let ((?x43 (+ ?x36 ?x37 ?x38 ?x39 ?x40 ?x41 ?x42)))
 (let (($x44 (= ?x43 0)))
 (let (($x45 (not $x44)))
 (let (($x46 (or $x45)))
 (let (($x32 (= (+ (- (- x y00) x00) y) 0)))
 (let (($x47 (and $x32 $x46)))
 (let (($x162 (= $x47 false)))
 (let (($x193 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x64 (and $x193 false)))
 (let ((?x75 (+ 1 y)))
 (let ((?x67 (+ (- 1) x)))
 (let ((?x123 (* 0 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75)))
 (let ((@x79 (rewrite (= ?x35 ?x75))))
 (let ((@x63 (monotonicity (rewrite (= (* (- 1) 1) (- 1))) (= (+ x (* (- 1) 1)) (+ x (- 1))))))
 (let ((@x71 (trans @x63 (rewrite (= (+ x (- 1)) ?x67)) (= (+ x (* (- 1) 1)) ?x67))))
 (let ((@x74 (trans (rewrite (= ?x34 (+ x (* (- 1) 1)))) @x71 (= ?x34 ?x67))))
 (let ((@x125 (monotonicity @x74 @x74 @x74 @x74 @x74 @x74 @x79 @x79 @x79 @x79 @x79 @x79 @x79 @x79 (= ?x42 ?x123))))
 (let ((?x116 (* 0 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 x00 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75)))
 (let ((@x118 (monotonicity @x74 @x74 @x74 @x74 @x74 @x74 @x79 @x79 @x79 @x79 @x79 @x79 @x79 (= ?x41 ?x116))))
 (let ((?x109 (* 0 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75)))
 (let ((@x111 (monotonicity @x74 @x74 @x74 @x74 @x74 @x74 @x74 @x79 @x79 @x79 @x79 @x79 @x79 @x79 (= ?x40 ?x109))))
 (let ((?x102 (* 0 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 y00)))
 (let ((@x104 (monotonicity @x74 @x74 @x74 @x74 @x74 @x74 @x79 @x79 @x79 @x79 @x79 @x79 @x79 (= ?x39 ?x102))))
 (let ((?x95 (* 0 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 y00)))
 (let ((@x97 (monotonicity @x74 @x74 @x74 @x74 @x74 @x74 @x74 @x79 @x79 @x79 @x79 @x79 @x79 (= ?x38 ?x95))))
 (let ((?x88 (* 0 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75)))
 (let ((@x90 (monotonicity @x74 @x74 @x74 @x74 @x74 @x74 @x74 @x74 @x79 @x79 @x79 @x79 @x79 @x79 (= ?x37 ?x88))))
 (let ((?x81 (* 0 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 ?x67 x00 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75)))
 (let ((@x83 (monotonicity @x74 @x74 @x74 @x74 @x74 @x74 @x74 @x79 @x79 @x79 @x79 @x79 @x79 (= ?x36 ?x81))))
 (let ((@x132 (monotonicity (trans @x83 (rewrite (= ?x81 0)) (= ?x36 0)) (trans @x90 (rewrite (= ?x88 0)) (= ?x37 0)) (trans @x97 (rewrite (= ?x95 0)) (= ?x38 0)) (trans @x104 (rewrite (= ?x102 0)) (= ?x39 0)) (trans @x111 (rewrite (= ?x109 0)) (= ?x40 0)) (trans @x118 (rewrite (= ?x116 0)) (= ?x41 0)) (trans @x125 (rewrite (= ?x123 0)) (= ?x42 0)) (= ?x43 (+ 0 0 0 0 0 0 0)))))
 (let ((@x135 (trans @x132 (rewrite (= (+ 0 0 0 0 0 0 0) 0)) $x44)))
 (let ((@x142 (trans (monotonicity @x135 (= $x44 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x44 true))))
 (let ((@x149 (trans (monotonicity @x142 (= $x45 (not true))) (rewrite (= (not true) false)) (= $x45 false))))
 (let ((@x156 (trans (monotonicity @x149 (= $x46 (or false))) (rewrite (= (or false) false)) (= $x46 false))))
 (trans (monotonicity (rewrite (= $x32 $x193)) @x156 (= $x47 $x64)) (rewrite (= $x64 false)) $x162)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x49 (asserted $x48)))
 (mp @x49 (trans (quant-intro (proof-bind ?x177) $x167) @x170 $x171) false))))))))))

(:max-memory   19.05
 :memory       19.05
 :num-allocs   237337
 :rlimit-count 102
 :time         0.00
 :total-time   0.02)
