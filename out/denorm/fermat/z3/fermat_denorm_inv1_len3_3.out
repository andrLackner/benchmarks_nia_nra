unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x809 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x1086 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 1) (* v!0 v!0)) (* 2 v!0) ?x809 (* (- 4) r!2) (* (- 2) u!1))))
 (let (($x1013 (>= ?x1086 0)))
 (let (($x839 (= ?x1086 0)))
 (let ((?x679 (* 2 u!1)))
 (let ((?x802 (* 4 r!2)))
 (let ((?x842 (* (- 1) ?x809)))
 (let ((?x851 (* (- 2) v!0)))
 (let ((?x123 (* v!0 v!0)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x165 (+ ?x106 ?x122 ?x41 ?x46 ?x198 ?x123 ?x851 ?x842 ?x802 ?x679)))
 (let ((?x473 (* (- 1) (* v!0 v!0 r!2 r!2 r!2 u!1))))
 (let ((?x203 (* (- 1) v!0)))
 (let ((?x478 (* (- 1) (* v!0 v!0 r!2 r!2 u!1 u!1 u!1))))
 (let ((?x982 (+ (* (- 8) (* v!0 v!0 r!2 r!2)) (* (- 18) (* v!0 v!0 r!2 r!2 u!1)) (* (- 8) (* v!0 v!0 u!1 u!1)) ?x478 (* (- 14) (* v!0 v!0 u!1 u!1 u!1)) ?x203 (* (- 7) (* v!0 v!0 u!1 u!1 u!1 u!1)) ?x473 (* (- 30) (* v!0 v!0 r!2 u!1 u!1)) (* (- 15) (* v!0 v!0 r!2 u!1 u!1 u!1)) (* (- 2) (* v!0 v!0 r!2 r!2 r!2)) (* (- 16) (* v!0 v!0 r!2 u!1)) (* (- 1) (* v!0 v!0 u!1 u!1 u!1 u!1 u!1)) (* (- 2) (* v!0 v!0 r!2 u!1 u!1 u!1 u!1)) (* (- 9) (* v!0 v!0 r!2 r!2 u!1 u!1)))))
 (let ((?x895 (* ?x982 ?x165)))
 (let (($x352 (= ?x895 0)))
 (let (($x979 (not $x352)))
 (let ((?x1092 (* (- 4) (* r!2 r!2 r!2 u!1))))
 (let ((?x156 (* (- 4) (* r!2 r!2 u!1 u!1 u!1))))
 (let ((?x890 (+ (- 2) (* 12 (* v!0 v!0 r!2 r!2 u!1)) ?x478 (* 8 (* v!0 r!2 u!1 u!1 u!1)) (* (- 4) (* v!0 v!0 v!0 u!1 u!1 u!1)) (* 4 (* v!0 v!0 v!0 v!0 u!1)) (* (- 4) (* v!0 r!2 r!2 r!2 u!1)) (* (- 4) (* v!0 v!0 u!1 u!1 u!1)) ?x203 (* 2 (* v!0 v!0 v!0 r!2 u!1 u!1 u!1)) (* 3 (* v!0 v!0 v!0 r!2 r!2 u!1)) ?x473 (* 4 (* v!0 v!0 v!0 u!1)) (* v!0 v!0 v!0 v!0 v!0 u!1) (* 8 (* v!0 v!0 r!2 u!1 u!1 u!1)) (* 12 (* v!0 r!2 r!2 u!1)) (* (- 12) (* v!0 v!0 r!2 u!1)) (* (- 12) (* v!0 v!0 v!0 r!2 u!1)) (* (- 3) (* v!0 v!0 v!0 v!0 r!2 u!1)) ?x156 (* (- 1) (* v!0 v!0 v!0 v!0 u!1 u!1 u!1)) ?x1092 (* (- 4) (* v!0 r!2 r!2 u!1 u!1 u!1)))))
 (let ((?x969 (* ?x890 ?x165)))
 (let (($x385 (= ?x969 0)))
 (let (($x343 (or (not $x385) $x979)))
 (let (($x885 (and $x839 $x343)))
 (let ((?x874 (+ ?x802 ?x679 ?x851 ?x106 ?x122 ?x41 ?x842 ?x123 ?x46 ?x198)))
 (let ((?x1146 (* (- 1) (* r!2 r!2 r!2 u!1 v!0 v!0))))
 (let ((?x147 (* (- 1) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x216 (+ ?x203 ?x147 (* (- 14) (* u!1 u!1 u!1 v!0 v!0)) (* (- 15) (* r!2 u!1 u!1 u!1 v!0 v!0)) ?x1146 (* (- 16) (* r!2 u!1 v!0 v!0)) (* (- 18) (* r!2 r!2 u!1 v!0 v!0)) (* (- 2) (* r!2 u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 8) (* r!2 r!2 v!0 v!0)) (* (- 8) (* u!1 u!1 v!0 v!0)) (* (- 30) (* r!2 u!1 u!1 v!0 v!0)) (* (- 9) (* r!2 r!2 u!1 u!1 v!0 v!0)) (* (- 7) (* u!1 u!1 u!1 u!1 v!0 v!0)) (* (- 2) (* r!2 r!2 r!2 v!0 v!0)))))
 (let ((?x1163 (+ (- 2) ?x203 ?x147 ?x156 (* 8 (* r!2 u!1 u!1 u!1 v!0)) (* (- 4) (* u!1 u!1 u!1 v!0 v!0)) (* (- 4) (* r!2 r!2 u!1 u!1 u!1 v!0)) (* 8 (* r!2 u!1 u!1 u!1 v!0 v!0)) (* (- 4) (* u!1 u!1 u!1 v!0 v!0 v!0)) (* 2 (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0 v!0)) ?x1146 ?x1092 (* 12 (* r!2 r!2 u!1 v!0)) (* (- 12) (* r!2 u!1 v!0 v!0)) (* 4 (* u!1 v!0 v!0 v!0)) (* (- 4) (* r!2 r!2 r!2 u!1 v!0)) (* 12 (* r!2 r!2 u!1 v!0 v!0)) (* (- 12) (* r!2 u!1 v!0 v!0 v!0)) (* 4 (* u!1 v!0 v!0 v!0 v!0)) (* 3 (* r!2 r!2 u!1 v!0 v!0 v!0)) (* (- 3) (* r!2 u!1 v!0 v!0 v!0 v!0)) (* u!1 v!0 v!0 v!0 v!0 v!0))))
 (let (($x190 (and (= ?x874 0) (or (not (= (* ?x1163 ?x874) 0)) (not (= (* ?x216 ?x874) 0))))))
 (let (($x245 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x807 (* (- 1) (* r r r u v v))))
 (let ((?x487 (* (- 1) (* r r u u u v v))))
 (let ((?x103 (* (- 1) v)))
 (let ((?x1211 (+ ?x103 ?x487 (* (- 14) (* u u u v v)) (* (- 15) (* r u u u v v)) ?x807 (* (- 16) (* r u v v)) (* (- 18) (* r r u v v)) (* (- 2) (* r u u u u v v)) (* (- 1) (* u u u u u v v)) (* (- 8) (* r r v v)) (* (- 8) (* u u v v)) (* (- 30) (* r u u v v)) (* (- 9) (* r r u u v v)) (* (- 7) (* u u u u v v)) (* (- 2) (* r r r v v)))))
 (let ((?x848 (+ (- 2) ?x103 ?x487 (* (- 4) (* r r u u u)) (* 8 (* r u u u v)) (* (- 4) (* u u u v v)) (* (- 4) (* r r u u u v)) (* 8 (* r u u u v v)) (* (- 4) (* u u u v v v)) (* 2 (* r u u u v v v)) (* (- 1) (* u u u v v v v)) ?x807 (* (- 4) (* r r r u)) (* 12 (* r r u v)) (* (- 12) (* r u v v)) (* 4 (* u v v v)) (* (- 4) (* r r r u v)) (* 12 (* r r u v v)) (* (- 12) (* r u v v v)) (* 4 (* u v v v v)) (* 3 (* r r u v v v)) (* (- 3) (* r u v v v v)) (* u v v v v v))))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x848 ?x204) 0)) (not (= (* ?x1211 ?x204) 0))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x565 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x1022 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x670 (+ 2 u)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x146 (+ ?x103 (* (- 1) (* ?x670 ?x670 ?x670 ?x75 ?x75 v v)) (* (- 1) (* ?x670 ?x75 ?x75 ?x75 v v)))))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x733 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x1125 (+ r ?x103)))
 (let ((?x537 (+ 2 v)))
 (let ((?x795 (+ (- 2) ?x103 (* (- 1) (* ?x537 ?x537 ?x1125 ?x1125 u u u)) (* (- 1) (* ?x537 ?x537 ?x1125 ?x1125 ?x1125 u)))))
 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x795 ?x733) 0)) (not (= (* ?x146 ?x1022) 0))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x107 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x807 (* (- 1) (* r r r u v v))))
 (let ((?x487 (* (- 1) (* r r u u u v v))))
 (let ((?x103 (* (- 1) v)))
 (let ((?x1211 (+ ?x103 ?x487 (* (- 14) (* u u u v v)) (* (- 15) (* r u u u v v)) ?x807 (* (- 16) (* r u v v)) (* (- 18) (* r r u v v)) (* (- 2) (* r u u u u v v)) (* (- 1) (* u u u u u v v)) (* (- 8) (* r r v v)) (* (- 8) (* u u v v)) (* (- 30) (* r u u v v)) (* (- 9) (* r r u u v v)) (* (- 7) (* u u u u v v)) (* (- 2) (* r r r v v)))))
 (let ((?x848 (+ (- 2) ?x103 ?x487 (* (- 4) (* r r u u u)) (* 8 (* r u u u v)) (* (- 4) (* u u u v v)) (* (- 4) (* r r u u u v)) (* 8 (* r u u u v v)) (* (- 4) (* u u u v v v)) (* 2 (* r u u u v v v)) (* (- 1) (* u u u v v v v)) ?x807 (* (- 4) (* r r r u)) (* 12 (* r r u v)) (* (- 12) (* r u v v)) (* 4 (* u v v v)) (* (- 4) (* r r r u v)) (* 12 (* r r u v v)) (* (- 12) (* r u v v v)) (* 4 (* u v v v v)) (* 3 (* r r u v v v)) (* (- 3) (* r u v v v v)) (* u v v v v v))))
 (let (($x209 (= ?x204 0)))
 (let (($x1244 (and $x209 (or (not (= (* ?x848 ?x204) 0)) (not (= (* ?x1211 ?x204) 0))))))
 (let ((?x1022 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x670 (+ 2 u)))
 (let ((?x146 (+ ?x103 (* (- 1) (* ?x670 ?x670 ?x670 ?x75 ?x75 v v)) (* (- 1) (* ?x670 ?x75 ?x75 ?x75 v v)))))
 (let ((?x733 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x1125 (+ r ?x103)))
 (let ((?x537 (+ 2 v)))
 (let ((?x795 (+ (- 2) ?x103 (* (- 1) (* ?x537 ?x537 ?x1125 ?x1125 u u u)) (* (- 1) (* ?x537 ?x537 ?x1125 ?x1125 ?x1125 u)))))
 (let (($x529 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x795 ?x733) 0)) (not (= (* ?x146 ?x1022) 0))))))
 (rewrite (= $x529 $x1244))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((r Int) (u Int) (v Int) )(! (let ((?x79 (+ u 2)))
 (let ((?x75 (+ r u)))
 (let ((?x92 (- (- (* (- 1) v) (* ?x75 ?x75 ?x79 ?x79 ?x79 v v)) (* ?x75 ?x75 ?x75 ?x79 v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) ?x92)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (- (- (* (- 1) ?x57) (* ?x52 ?x52 u u u ?x57 ?x57)) (* ?x52 ?x52 ?x52 u ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x574 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x1022 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x670 (+ 2 u)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x146 (+ ?x103 (* (- 1) (* ?x670 ?x670 ?x670 ?x75 ?x75 v v)) (* (- 1) (* ?x670 ?x75 ?x75 ?x75 v v)))))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x733 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x1125 (+ r ?x103)))
 (let ((?x537 (+ 2 v)))
 (let ((?x795 (+ (- 2) ?x103 (* (- 1) (* ?x537 ?x537 ?x1125 ?x1125 u u u)) (* (- 1) (* ?x537 ?x537 ?x1125 ?x1125 ?x1125 u)))))
 (let (($x529 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x795 ?x733) 0)) (not (= (* ?x146 ?x1022) 0))))))
 (let ((?x79 (+ u 2)))
 (let ((?x92 (- (- (* (- 1) v) (* ?x75 ?x75 ?x79 ?x79 ?x79 v v)) (* ?x75 ?x75 ?x75 ?x79 v v))))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) ?x92)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (- (- (* (- 1) ?x57) (* ?x52 ?x52 u u u ?x57 ?x57)) (* ?x52 ?x52 ?x52 u ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x97 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0))))))
 (rewrite (= $x97 $x529)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x730 (mp (mp @x99 (quant-intro (proof-bind ?x574) (= $x98 $x565)) $x565) (rewrite (= $x565 $x565)) $x565)))
 (let ((@x145 (mp~ (mp @x730 (quant-intro (proof-bind ?x107) (= $x565 $x245)) $x245) (sk (~ $x245 $x190)) $x190)))
 (let ((@x921 (mp @x145 (rewrite (= $x190 $x885)) $x885)))
 (let ((@x999 (and-elim @x921 $x839)))
 (let ((@x886 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x839) $x1013)) @x999 $x1013)))
 (let (($x166 (<= ?x1086 0)))
 (let ((@x931 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x839) $x166)) @x999 $x166)))
 (let (($x950 (not (<= ?x895 0))))
 (let (($x946 (>= ?x895 0)))
 (let (($x941 (>= ?x969 0)))
 (let (($x944 (<= ?x969 0)))
 (let ((@x557 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x385 (not $x944) (not $x941))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x944)) @x931 @x886 false) $x944) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x941)) @x931 @x886 false) $x941) $x385)))
 (let ((@x966 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x352 $x950 (not $x946))) (unit-resolution (and-elim @x921 $x343) @x557 $x979) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x946)) @x931 @x886 false) $x946) $x950)))
 ((_ th-lemma arith farkas 1 1 1) @x966 @x931 @x886 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        49
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             336
 :arith-nonlinear-bounds    32
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 63
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.81
 :memory                    3.27
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1264112
 :num-checks                1
 :propagations              14
 :rlimit-count              5614
 :time                      0.01
 :total-time                0.01)
