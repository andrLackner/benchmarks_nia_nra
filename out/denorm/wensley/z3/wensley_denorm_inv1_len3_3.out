unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x542 (* (/ 1.0 4.0) (* (to_real a00) (to_real d00) (to_real d!1) (to_real d!1)))))
 (let ((?x819 (to_real d!1)))
 (let ((?x808 (to_real y!0)))
 (let ((?x807 (to_real b!2)))
 (let ((?x794 (to_real a!3)))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x305 (* (- (/ 1.0 8.0)) (* (to_real b00) ?x794 ?x794 ?x807 ?x808 ?x808 ?x819 ?x819 ?x819))))
 (let ((?x209 (to_real y00)))
 (let ((?x74 (to_real b00)))
 (let ((?x558 (+ (* (/ 1.0 2.0) (* ?x174 ?x175 ?x794 ?x794 ?x807 ?x808 ?x808 ?x808)) (* (- (/ 1.0 2.0)) (* ?x175 ?x794 ?x794 ?x794 ?x807 ?x808 ?x808 ?x808)) (* (- 1.0) (* ?x74 ?x209 ?x794 ?x794 ?x807 ?x808 ?x808 ?x808)) (* ?x74 ?x794 ?x794 ?x807 ?x808 ?x808 ?x808 ?x808) (* (- (/ 1.0 4.0)) (* ?x175 ?x794 ?x819 ?x819)) (* (/ 1.0 8.0) (* ?x74 ?x209 ?x794 ?x794 ?x807 ?x808 ?x819 ?x819 ?x819)) ?x305 (* (- (/ 1.0 2.0)) (* ?x74 ?x209 ?x819 ?x819)) (* (/ 1.0 16.0) (* ?x175 ?x794 ?x794 ?x794 ?x807 ?x808 ?x819 ?x819 ?x819)) (* (/ 1.0 2.0) (* ?x74 ?x808 ?x819 ?x819)) (* (- (/ 1.0 16.0)) (* ?x174 ?x175 ?x794 ?x794 ?x807 ?x808 ?x819 ?x819 ?x819)) ?x542)))
 (let (($x548 (<= ?x558 0.0)))
 (let (($x149 (not $x548)))
 (let (($x551 (>= ?x558 0.0)))
 (let ((?x331 (* ?x74 ?x808)))
 (let ((?x208 (+ (* (- 1.0) (to_real (* b00 y!0))) ?x331)))
 (let (($x495 (>= ?x208 0.0)))
 (let (($x225 (= ?x208 0.0)))
 (let ((@x439 (lemma (unit-resolution ((_ th-lemma arith) $x225) (hypothesis (not $x225)) false) $x225)))
 (let ((@x113 ((_ th-lemma arith triangle-eq) (or (not $x225) $x495))))
 (let (($x762 (<= ?x208 0.0)))
 (let ((@x328 ((_ th-lemma arith triangle-eq) (or (not $x225) $x762))))
 (let ((?x101 (* b00 y00)))
 (let ((?x102 (* (- 2) ?x101)))
 (let ((?x35 (* a00 d00)))
 (let ((?x663 (+ ?x35 ?x102 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3)))))
 (let (($x716 (>= ?x663 0)))
 (let (($x705 (= 0 ?x663)))
 (let ((@x694 (symm (commutativity (= $x705 (= ?x663 0))) (= (= ?x663 0) $x705))))
 (let (($x754 (= ?x663 0)))
 (let ((?x832 (* ?x175 ?x807)))
 (let ((?x350 (* (- 1.0) ?x832)))
 (let ((?x347 (* ?x74 ?x819)))
 (let ((?x220 (* 2.0 ?x331)))
 (let ((?x329 (* ?x175 ?x794)))
 (let ((?x834 (* (- 1.0) ?x329)))
 (let ((?x210 (* ?x74 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x384 (* (/ 1.0 16.0) (* ?x807 ?x807 ?x807 ?x819 ?x819 ?x819))))
 (let ((?x437 (* (- (/ 1.0 32.0)) (* ?x807 ?x807 ?x807 ?x819 ?x819 ?x819 ?x819))))
 (let ((?x233 (* (/ 3.0 4.0) (* ?x807 ?x807 ?x807 ?x808 ?x808 ?x819))))
 (let ((?x337 (* (/ 1.0 2.0) (* ?x807 ?x807 ?x807 ?x808 ?x808 ?x808))))
 (let ((?x395 (* (/ 3.0 8.0) (* ?x807 ?x807 ?x807 ?x808 ?x819 ?x819))))
 (let ((?x849 (* (/ 1.0 4.0) (* ?x819 ?x819))))
 (let ((?x159 (* (- (/ 1.0 16.0)) (* ?x807 ?x807 ?x807 ?x808 ?x819 ?x819 ?x819))))
 (let ((?x779 (+ ?x159 (* (- (/ 1.0 16.0)) (* ?x794 ?x794 ?x807 ?x808 ?x819 ?x819 ?x819)) (* (- (/ 1.0 8.0)) (* ?x794 ?x807 ?x807 ?x808 ?x819 ?x819 ?x819)) ?x849 (* (/ 1.0 8.0) (* ?x794 ?x807 ?x807 ?x819 ?x819 ?x819)) (* (/ 1.0 16.0) (* ?x794 ?x794 ?x807 ?x819 ?x819 ?x819)) ?x395 ?x337 ?x233 ?x437 (* (/ 3.0 2.0) (* ?x794 ?x807 ?x807 ?x808 ?x808 ?x819)) (* (/ 3.0 4.0) (* ?x794 ?x807 ?x807 ?x808 ?x819 ?x819)) (* (/ 3.0 8.0) (* ?x794 ?x794 ?x807 ?x808 ?x819 ?x819)) ?x384 (* ?x794 ?x807 ?x807 ?x808 ?x808 ?x808) (* (/ 3.0 4.0) (* ?x794 ?x794 ?x807 ?x808 ?x808 ?x819)) (* (- (/ 1.0 32.0)) (* ?x794 ?x794 ?x807 ?x819 ?x819 ?x819 ?x819)) (* (- (/ 1.0 16.0)) (* ?x794 ?x807 ?x807 ?x819 ?x819 ?x819 ?x819)) (* (/ 1.0 2.0) (* ?x794 ?x794 ?x807 ?x808 ?x808 ?x808)))))
 (let (($x268 (= (* ?x779 (+ ?x176 ?x213 ?x834 ?x220 ?x347 ?x350)) 0.0)))
 (let (($x674 (not $x268)))
 (let (($x897 (= ?x558 0.0)))
 (let (($x298 (not $x897)))
 (let (($x345 (or $x298 $x674)))
 (let ((?x651 (+ (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)) (* a00 d!1) (* (- 1) (* a!3 d!1)))))
 (let (($x583 (= ?x651 0)))
 (let ((?x640 (* d00 b!2)))
 (let ((?x718 (+ ?x640 (* (- 1) (* b00 d!1)))))
 (let (($x670 (= ?x718 0)))
 (let (($x667 (and $x754 $x670 $x583 $x345)))
 (let ((?x721 (+ ?x176 (* (- 1.0) (* ?x794 ?x175)) ?x213 (* (- 1.0) (* ?x807 ?x175)) (* 2.0 (* ?x808 ?x74)) (* ?x819 ?x74))))
 (let ((?x641 (+ (* (/ 1.0 2.0) (* ?x807 ?x794 ?x794 ?x808 ?x808 ?x808)) ?x849 (* (- (/ 1.0 16.0)) (* ?x807 ?x794 ?x794 ?x808 ?x819 ?x819 ?x819)) ?x337 (* ?x807 ?x807 ?x794 ?x808 ?x808 ?x808) ?x233 (* (/ 3.0 2.0) (* ?x807 ?x807 ?x794 ?x808 ?x808 ?x819)) (* (/ 3.0 4.0) (* ?x807 ?x794 ?x794 ?x808 ?x808 ?x819)) ?x395 (* (/ 3.0 4.0) (* ?x807 ?x807 ?x794 ?x808 ?x819 ?x819)) (* (/ 3.0 8.0) (* ?x807 ?x794 ?x794 ?x808 ?x819 ?x819)) ?x384 (* (/ 1.0 8.0) (* ?x807 ?x807 ?x794 ?x819 ?x819 ?x819)) (* (/ 1.0 16.0) (* ?x807 ?x794 ?x794 ?x819 ?x819 ?x819)) ?x159 (* (- (/ 1.0 8.0)) (* ?x807 ?x807 ?x794 ?x808 ?x819 ?x819 ?x819)) ?x437 (* (- (/ 1.0 16.0)) (* ?x807 ?x807 ?x794 ?x819 ?x819 ?x819 ?x819)) (* (- (/ 1.0 32.0)) (* ?x807 ?x794 ?x794 ?x819 ?x819 ?x819 ?x819)))))
 (let ((?x846 (+ (* (/ 1.0 2.0) (* ?x807 ?x794 ?x794 ?x808 ?x808 ?x808 ?x174 ?x175)) (* (- (/ 1.0 2.0)) (* ?x807 ?x794 ?x794 ?x794 ?x808 ?x808 ?x808 ?x175)) (* (- 1.0) (* ?x807 ?x794 ?x794 ?x808 ?x808 ?x808 ?x74 ?x209)) (* ?x807 ?x794 ?x794 ?x808 ?x808 ?x808 ?x808 ?x74) (* (/ 1.0 4.0) (* ?x819 ?x819 ?x174 ?x175)) (* (- (/ 1.0 4.0)) (* ?x794 ?x819 ?x819 ?x175)) (* (- (/ 1.0 2.0)) (* ?x819 ?x819 ?x74 ?x209)) (* (/ 1.0 2.0) (* ?x808 ?x819 ?x819 ?x74)) (* (- (/ 1.0 16.0)) (* ?x807 ?x794 ?x794 ?x808 ?x819 ?x819 ?x819 ?x174 ?x175)) (* (/ 1.0 16.0) (* ?x807 ?x794 ?x794 ?x794 ?x808 ?x819 ?x819 ?x819 ?x175)) (* (/ 1.0 8.0) (* ?x807 ?x794 ?x794 ?x808 ?x819 ?x819 ?x819 ?x74 ?x209)) (* (- (/ 1.0 8.0)) (* ?x807 ?x794 ?x794 ?x808 ?x808 ?x819 ?x819 ?x819 ?x74)))))
 (let ((?x814 (* a!3 d!1)))
 (let ((?x813 (+ ?x814 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x212 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x102 (* 2 (* y!0 b00))) 0)))
 (let (($x376 (and $x212 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x813 0) (or (not (= ?x846 0.0)) (not (= (* ?x641 ?x721) 0.0))))))
 (let (($x458 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x360 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x209 (to_real y00)))
 (let ((?x74 (to_real b00)))
 (let ((?x210 (* ?x74 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x194 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x261 (+ ?x176 ?x194 ?x213 ?x360 (* 2.0 (* (to_real y) ?x74)) (* (to_real d) ?x74))))
 (let ((?x62 (to_real d)))
 (let ((?x59 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x743 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 (to_real y) (to_real y) (to_real y)))))
 (let ((?x257 (* (/ 1.0 4.0) (* ?x62 ?x62))))
 (let ((?x241 (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 (to_real y) (to_real y) (to_real y)))))
 (let ((?x905 (+ ?x241 ?x257 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62)) ?x743 (* ?x56 ?x56 ?x59 (to_real y) (to_real y) (to_real y)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 (to_real y) (to_real y) ?x62)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 (to_real y) (to_real y) ?x62)) (* (/ 3.0 4.0) (* ?x56 ?x59 ?x59 (to_real y) (to_real y) ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 (to_real y) ?x62 ?x62)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x59 (to_real y) ?x62 ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real y) ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 (to_real y) ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x59 ?x59 ?x62 ?x62 ?x62 ?x62)))))
 (let ((?x434 (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 (to_real y) (to_real y) ?x62 ?x62 ?x62 ?x74))))
 (let ((?x423 (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62 ?x74 ?x209))))
 (let ((?x412 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62 ?x175))))
 (let ((?x402 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62 ?x174 ?x175))))
 (let ((?x60 (to_real y)))
 (let ((?x436 (+ (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x174 ?x175)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x59 ?x59 ?x60 ?x60 ?x60 ?x175)) (* (- 1.0) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x74 ?x209)) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x60 ?x74) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x174 ?x175)) (* (- (/ 1.0 4.0)) (* ?x59 ?x62 ?x62 ?x175)) (* (- (/ 1.0 2.0)) (* ?x62 ?x62 ?x74 ?x209)) (* (/ 1.0 2.0) (* ?x60 ?x62 ?x62 ?x74)) ?x402 ?x412 ?x423 ?x434)))
 (let (($x155 (not (= ?x436 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x196 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x201 (= ?x196 0)))
 (let (($x140 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x101 (* b00 y00)))
 (let ((?x102 (* (- 2) ?x101)))
 (let ((?x35 (* a00 d00)))
 (let (($x134 (= (+ ?x35 (* (- 1) (* a d00)) ?x102 (* 2 (* y b00))) 0)))
 (and $x134 $x140 $x201 (or $x155 (not (= (* ?x905 ?x261) 0.0)))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x287 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x539 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x74 (to_real b00)))
 (let ((?x210 (* ?x74 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x470 (+ ?x213 ?x176 ?x539 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x62 (to_real d)))
 (let ((?x247 (* (/ 1.0 2.0) ?x62)))
 (let ((?x60 (to_real y)))
 (let ((?x553 (+ ?x60 ?x247)))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x286 (+ ?x59 ?x56)))
 (let ((?x257 (* (/ 1.0 4.0) (* ?x62 ?x62))))
 (let ((?x642 (+ (* (/ 1.0 2.0) (* ?x56 ?x286 ?x286 ?x553 ?x553 ?x553)) ?x257 (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x56 ?x286 ?x286 ?x553)))))
 (let ((?x578 (+ (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x56 ?x59 ?x59)) ?x257 (* (- (/ 1.0 16.0)) (* ?x60 ?x62 ?x62 ?x62 ?x56 ?x59 ?x59)))))
 (let ((?x594 (* ?x578 (+ ?x213 ?x176 (* 2.0 (* ?x74 ?x60)) (* (- 1.0) (* ?x175 ?x59))))))
 (let (($x660 (or (not (= ?x594 0.0)) (not (= (* ?x642 ?x470) 0.0)))))
 (let ((?x504 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x513 (= ?x504 0)))
 (let ((?x582 (* d00 a)))
 (let ((?x570 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x582)))
 (and (= ?x570 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x513 $x660)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x524 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x360 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x209 (to_real y00)))
 (let ((?x74 (to_real b00)))
 (let ((?x210 (* ?x74 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x194 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x261 (+ ?x176 ?x194 ?x213 ?x360 (* 2.0 (* (to_real y) ?x74)) (* (to_real d) ?x74))))
 (let ((?x62 (to_real d)))
 (let ((?x59 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x743 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 (to_real y) (to_real y) (to_real y)))))
 (let ((?x257 (* (/ 1.0 4.0) (* ?x62 ?x62))))
 (let ((?x241 (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 (to_real y) (to_real y) (to_real y)))))
 (let ((?x905 (+ ?x241 ?x257 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62)) ?x743 (* ?x56 ?x56 ?x59 (to_real y) (to_real y) (to_real y)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 (to_real y) (to_real y) ?x62)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 (to_real y) (to_real y) ?x62)) (* (/ 3.0 4.0) (* ?x56 ?x59 ?x59 (to_real y) (to_real y) ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 (to_real y) ?x62 ?x62)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x59 (to_real y) ?x62 ?x62)) (* (/ 3.0 8.0) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real y) ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 (to_real y) ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x59 ?x59 ?x62 ?x62 ?x62 ?x62)))))
 (let ((?x434 (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 (to_real y) (to_real y) ?x62 ?x62 ?x62 ?x74))))
 (let ((?x423 (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62 ?x74 ?x209))))
 (let ((?x412 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62 ?x175))))
 (let ((?x402 (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 (to_real y) ?x62 ?x62 ?x62 ?x174 ?x175))))
 (let ((?x60 (to_real y)))
 (let ((?x436 (+ (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x174 ?x175)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x59 ?x59 ?x60 ?x60 ?x60 ?x175)) (* (- 1.0) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x74 ?x209)) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x60 ?x74) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x174 ?x175)) (* (- (/ 1.0 4.0)) (* ?x59 ?x62 ?x62 ?x175)) (* (- (/ 1.0 2.0)) (* ?x62 ?x62 ?x74 ?x209)) (* (/ 1.0 2.0) (* ?x60 ?x62 ?x62 ?x74)) ?x402 ?x412 ?x423 ?x434)))
 (let (($x155 (not (= ?x436 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x196 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x201 (= ?x196 0)))
 (let (($x140 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x101 (* b00 y00)))
 (let ((?x102 (* (- 2) ?x101)))
 (let ((?x35 (* a00 d00)))
 (let (($x134 (= (+ ?x35 (* (- 1) (* a d00)) ?x102 (* 2 (* y b00))) 0)))
 (let (($x772 (and $x134 $x140 $x201 (or $x155 (not (= (* ?x905 ?x261) 0.0))))))
 (let ((?x470 (+ ?x213 ?x176 (* 2.0 (* ?x74 (+ ?x60 (* (/ 1.0 2.0) ?x62)))) (* (- 1.0) (* ?x175 (+ ?x59 ?x56))))))
 (let ((?x247 (* (/ 1.0 2.0) ?x62)))
 (let ((?x553 (+ ?x60 ?x247)))
 (let ((?x286 (+ ?x59 ?x56)))
 (let ((?x642 (+ (* (/ 1.0 2.0) (* ?x56 ?x286 ?x286 ?x553 ?x553 ?x553)) ?x257 (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x56 ?x286 ?x286 ?x553)))))
 (let ((?x578 (+ (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x56 ?x59 ?x59)) ?x257 (* (- (/ 1.0 16.0)) (* ?x60 ?x62 ?x62 ?x62 ?x56 ?x59 ?x59)))))
 (let ((?x594 (* ?x578 (+ ?x213 ?x176 (* 2.0 (* ?x74 ?x60)) (* (- 1.0) (* ?x175 ?x59))))))
 (let (($x660 (or (not (= ?x594 0.0)) (not (= (* ?x642 ?x470) 0.0)))))
 (let ((?x504 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x513 (= ?x504 0)))
 (let ((?x582 (* d00 a)))
 (let (($x610 (= (+ (* 2 ?x101) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x582) 0)))
 (let (($x503 (and $x610 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x513 $x660)))
 (rewrite (= $x503 $x772)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x478 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x539 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x74 (to_real b00)))
 (let ((?x210 (* ?x74 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x470 (+ ?x213 ?x176 ?x539 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x62 (to_real d)))
 (let ((?x247 (* (/ 1.0 2.0) ?x62)))
 (let ((?x60 (to_real y)))
 (let ((?x553 (+ ?x60 ?x247)))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x286 (+ ?x59 ?x56)))
 (let ((?x257 (* (/ 1.0 4.0) (* ?x62 ?x62))))
 (let ((?x642 (+ (* (/ 1.0 2.0) (* ?x56 ?x286 ?x286 ?x553 ?x553 ?x553)) ?x257 (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x56 ?x286 ?x286 ?x553)))))
 (let ((?x578 (+ (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x56 ?x59 ?x59)) ?x257 (* (- (/ 1.0 16.0)) (* ?x60 ?x62 ?x62 ?x62 ?x56 ?x59 ?x59)))))
 (let ((?x594 (* ?x578 (+ ?x213 ?x176 (* 2.0 (* ?x74 ?x60)) (* (- 1.0) (* ?x175 ?x59))))))
 (let (($x660 (or (not (= ?x594 0.0)) (not (= (* ?x642 ?x470) 0.0)))))
 (let ((?x504 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x513 (= ?x504 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x101 (* b00 y00)))
 (let ((?x102 (* (- 2) ?x101)))
 (let (($x302 (= (+ ?x102 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x302 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x513 $x660)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x559 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x539 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x74 (to_real b00)))
 (let ((?x210 (* ?x74 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x470 (+ ?x213 ?x176 ?x539 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x62 (to_real d)))
 (let ((?x247 (* (/ 1.0 2.0) ?x62)))
 (let ((?x60 (to_real y)))
 (let ((?x553 (+ ?x60 ?x247)))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x286 (+ ?x59 ?x56)))
 (let ((?x257 (* (/ 1.0 4.0) (* ?x62 ?x62))))
 (let ((?x642 (+ (* (/ 1.0 2.0) (* ?x56 ?x286 ?x286 ?x553 ?x553 ?x553)) ?x257 (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x56 ?x286 ?x286 ?x553)))))
 (let ((?x578 (+ (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x56 ?x59 ?x59)) ?x257 (* (- (/ 1.0 16.0)) (* ?x60 ?x62 ?x62 ?x62 ?x56 ?x59 ?x59)))))
 (let ((?x594 (* ?x578 (+ ?x213 ?x176 (* 2.0 (* ?x74 ?x60)) (* (- 1.0) (* ?x175 ?x59))))))
 (let (($x660 (or (not (= ?x594 0.0)) (not (= (* ?x642 ?x470) 0.0)))))
 (let ((?x504 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x513 (= ?x504 0)))
 (let ((?x582 (* d00 a)))
 (let ((?x570 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x582)))
 (let (($x503 (and (= ?x570 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x513 $x660)))
 (let ((?x35 (* a00 d00)))
 (let ((?x101 (* b00 y00)))
 (let ((?x102 (* (- 2) ?x101)))
 (let (($x567 (and (= (+ ?x102 ?x35 (* 2 (* b00 y)) (* (- 1) ?x582)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x513 $x660)))
 (rewrite (= $x567 $x503)))))))))))))))))))))))))))))))))
 ))
 (let (($x93 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x70 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x60 (to_real y)))
 (let ((?x73 (+ ?x60 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x79 (+ a b)))
 (let ((?x83 (to_real ?x79)))
 (let ((?x87 (- (+ (* ?x83 ?x83 ?x58 ?x73 ?x73 ?x73) (* ?x63 ?x63)) (* ?x83 ?x83 ?x58 ?x63 ?x63 ?x63 ?x73))))
 (let ((?x35 (* a00 d00)))
 (let ((?x77 (to_real ?x35)))
 (let ((?x78 (+ (to_real (* (- 2) b00 y00)) ?x77 (* ?x57 (to_real b00) ?x73))))
 (let ((?x64 (* ?x63 ?x63)))
 (let ((?x67 (- (+ (* (to_real a) (to_real a) ?x58 ?x60 ?x60 ?x60) ?x64) (* (to_real a) (to_real a) ?x58 ?x63 ?x63 ?x63 ?x60))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x91 (or (not (= (* (to_real ?x39) ?x67) ?x70)) (not (= (* (- ?x78 (to_real (* ?x79 d00))) ?x87) ?x70)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x91)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x534 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x539 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x74 (to_real b00)))
 (let ((?x210 (* ?x74 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x470 (+ ?x213 ?x176 ?x539 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x62 (to_real d)))
 (let ((?x247 (* (/ 1.0 2.0) ?x62)))
 (let ((?x60 (to_real y)))
 (let ((?x553 (+ ?x60 ?x247)))
 (let ((?x56 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x286 (+ ?x59 ?x56)))
 (let ((?x257 (* (/ 1.0 4.0) (* ?x62 ?x62))))
 (let ((?x642 (+ (* (/ 1.0 2.0) (* ?x56 ?x286 ?x286 ?x553 ?x553 ?x553)) ?x257 (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x56 ?x286 ?x286 ?x553)))))
 (let ((?x578 (+ (* (/ 1.0 2.0) (* ?x60 ?x60 ?x60 ?x56 ?x59 ?x59)) ?x257 (* (- (/ 1.0 16.0)) (* ?x60 ?x62 ?x62 ?x62 ?x56 ?x59 ?x59)))))
 (let ((?x594 (* ?x578 (+ ?x213 ?x176 (* 2.0 (* ?x74 ?x60)) (* (- 1.0) (* ?x175 ?x59))))))
 (let (($x660 (or (not (= ?x594 0.0)) (not (= (* ?x642 ?x470) 0.0)))))
 (let ((?x504 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x513 (= ?x504 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x101 (* b00 y00)))
 (let ((?x102 (* (- 2) ?x101)))
 (let (($x302 (= (+ ?x102 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x567 (and $x302 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x513 $x660)))
 (let ((?x70 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x73 (+ ?x60 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x79 (+ a b)))
 (let ((?x83 (to_real ?x79)))
 (let ((?x87 (- (+ (* ?x83 ?x83 ?x58 ?x73 ?x73 ?x73) (* ?x63 ?x63)) (* ?x83 ?x83 ?x58 ?x63 ?x63 ?x63 ?x73))))
 (let ((?x77 (to_real ?x35)))
 (let ((?x82 (- (+ (to_real (* (- 2) b00 y00)) ?x77 (* ?x57 ?x74 ?x73)) (to_real (* ?x79 d00)))))
 (let ((?x67 (- (+ (* ?x59 ?x59 ?x58 ?x60 ?x60 ?x60) (* ?x63 ?x63)) (* ?x59 ?x59 ?x58 ?x63 ?x63 ?x63 ?x60))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x91 (or (not (= (* (to_real ?x39) ?x67) ?x70)) (not (= (* ?x82 ?x87) ?x70)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x92 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x91)))
 (rewrite (= $x92 $x567))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x94 (asserted $x93)))
 (let ((@x283 (mp (mp @x94 (quant-intro (proof-bind ?x534) (= $x93 $x478)) $x478) (rewrite (= $x478 $x478)) $x478)))
 (let ((@x733 (mp (mp @x283 (quant-intro (proof-bind ?x559) (= $x478 $x287)) $x287) (quant-intro (proof-bind ?x524) (= $x287 $x458)) $x458)))
 (let ((@x219 (mp (mp~ @x733 (sk (~ $x458 $x376)) $x376) (rewrite (= $x376 $x667)) $x667)))
 (let ((@x505 (mp (and-elim @x219 $x754) @x694 $x705)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x705) $x716)) @x505 $x716)))
 (let (($x480 (<= ?x663 0)))
 (let ((@x483 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x705) $x480)) @x505 $x480)))
 (let ((@x791 (unit-resolution ((_ th-lemma arith) (or (not $x480) (not $x495) (not $x762) $x551 (not $x716))) @x483 @x104 (hypothesis (not $x551)) (unit-resolution @x328 @x439 $x762) (unit-resolution @x113 @x439 $x495) false)))
 (let (($x377 (= 0.0 ?x558)))
 (let (($x293 (not $x377)))
 (let ((@x353 (monotonicity (symm (commutativity (= $x377 $x897)) (= $x897 $x377)) (= $x298 $x293))))
 (let ((?x300 (+ ?x350 ?x176 ?x213 ?x834 ?x220 ?x347)))
 (let (($x132 (= ?x300 0.0)))
 (let (($x756 (>= ?x300 0.0)))
 (let ((?x545 (+ (* (- 1.0) (to_real (* d00 a!3))) ?x329)))
 (let (($x422 (>= ?x545 0.0)))
 (let (($x605 (= 0.0 ?x545)))
 (let ((@x722 (symm (commutativity (= $x605 (= ?x545 0.0))) (= (= ?x545 0.0) $x605))))
 (let ((@x715 (mp ((_ th-lemma arith) (= ?x545 0.0)) @x722 $x605)))
 (let ((@x727 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x605) $x422)) @x715 $x422)))
 (let (($x737 (<= ?x545 0.0)))
 (let ((?x320 (+ ?x347 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x736 (>= ?x320 0.0)))
 (let (($x351 (= ?x320 0.0)))
 (let ((@x678 ((_ th-lemma arith) $x351)))
 (let (($x878 (<= ?x320 0.0)))
 (let ((@x658 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x878)) @x678 $x878)))
 (let (($x711 (>= ?x718 0)))
 (let (($x552 (= 0 ?x718)))
 (let ((@x560 (mp (and-elim @x219 $x670) (symm (commutativity (= $x552 $x670)) (= $x670 $x552)) $x552)))
 (let ((@x681 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x552) $x711)) @x560 $x711)))
 (let (($x440 (<= ?x718 0)))
 (let ((@x105 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x552) $x440)) @x560 $x440)))
 (let (($x96 (not $x440)))
 (let (($x644 (not $x762)))
 (let (($x394 (not $x711)))
 (let (($x497 (not $x480)))
 (let (($x182 (not $x495)))
 (let (($x180 (not $x716)))
 (let (($x568 (or $x180 $x182 $x497 (not $x736) $x756 (not $x878) $x394 (not $x422) $x644 $x96 (not $x737))))
 (let ((@x128 (unit-resolution ((_ th-lemma arith) $x568) @x483 @x104 @x105 @x681 (hypothesis (not $x756)) (unit-resolution @x328 (hypothesis $x225) $x762) (unit-resolution @x113 (hypothesis $x225) $x495) @x658 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x736)) @x678 $x736) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x605) $x737)) @x715 $x737) @x727 false)))
 (let (($x541 (<= ?x300 0.0)))
 (let ((?x249 (+ ?x176 (* (- 1.0) (to_real ?x35)))))
 (let (($x456 (<= ?x249 0.0)))
 (let ((@x289 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x249 0.0)) $x456)) ((_ th-lemma arith) (= ?x249 0.0)) $x456)))
 (let ((?x709 (+ (* (- 1.0) (to_real ?x640)) ?x832)))
 (let (($x117 (>= ?x709 0.0)))
 (let (($x655 (= 0.0 ?x709)))
 (let ((@x679 (symm (commutativity (= $x655 (= ?x709 0.0))) (= (= ?x709 0.0) $x655))))
 (let ((@x687 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x655) $x117)) (mp ((_ th-lemma arith) (= ?x709 0.0)) @x679 $x655) $x117)))
 (let ((?x489 (+ (* (- 1.0) (to_real ?x101)) ?x210)))
 (let (($x276 (>= ?x489 0.0)))
 (let (($x494 (= 0.0 ?x489)))
 (let ((@x706 (symm (commutativity (= $x494 (= ?x489 0.0))) (= (= ?x489 0.0) $x494))))
 (let ((@x712 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x494) $x276)) (mp ((_ th-lemma arith) (= ?x489 0.0)) @x706 $x494) $x276)))
 (let ((@x729 ((_ th-lemma arith) @x727 @x712 @x483 @x687 @x681 @x289 (hypothesis (not $x541)) @x658 (unit-resolution @x328 ((_ th-lemma arith) $x225) $x762) false)))
 (let ((@x263 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x132 (not $x541) (not $x756))) (lemma @x729 $x541) (unit-resolution (lemma @x128 (or (not $x225) $x756)) @x439 $x756) $x132)))
 (let (($x449 (or (not $x132) $x268)))
 (let ((@x741 (unit-resolution ((_ th-lemma arith) $x449) (hypothesis $x674) (hypothesis $x132) false)))
 (let ((@x621 (unit-resolution (and-elim @x219 $x345) (unit-resolution (lemma @x741 $x449) @x263 $x268) $x298)))
 (let ((@x223 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x377 $x149 (not $x551))) (mp @x621 @x353 $x293) (or $x149 (not $x551)))))
 (let (($x391 (>= ?x651 0)))
 (let (($x491 (= 0 ?x651)))
 (let ((@x259 (mp (and-elim @x219 $x583) (symm (commutativity (= $x491 $x583)) (= $x583 $x491)) $x491)))
 (let (($x510 (<= ?x651 0)))
 (unit-resolution ((_ th-lemma arith) (or $x548 $x394 $x96 (not $x391) (not $x510))) @x105 @x681 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x491) $x510)) @x259 $x510) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x491) $x391)) @x259 $x391) (unit-resolution @x223 (lemma @x791 $x551) $x149) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       62
 :arith-eq-adapter                58
 :arith-bound-propagations-cheap  35
 :arith-bound-propagations-lp     7
 :arith-conflicts                 61
 :arith-diseq                     38
 :arith-gcd-calls                 4
 :arith-grobner-calls             7
 :arith-grobner-conflicts         3
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 15
 :arith-lower                     80
 :arith-make-feasible             62
 :arith-max-columns               101
 :arith-max-rows                  27
 :arith-nla-explanations          187
 :arith-nla-lemmas                60
 :arith-patches                   4
 :arith-patches-success           4
 :arith-propagations              35
 :arith-upper                     57
 :conflicts                       11
 :decisions                       60
 :del-clause                      173
 :final-checks                    49
 :max-memory                      4.64
 :memory                          3.15
 :mk-bool-var                     222
 :mk-clause                       252
 :num-allocs                      6082866
 :num-checks                      1
 :propagations                    119
 :rlimit-count                    7300
 :time                            0.03
 :total-time                      0.04)
