unsat
((set-logic NRA)
(declare-fun x!4 () Real)
(declare-fun b!6 () Real)
(declare-fun r!5 () Real)
(proof
(let ((?x469 (+ (* b00 x00 r!5 r!5 b!6 b!6 x!4 x!4) (* (- (/ 1.0 4.0)) (* r!5 r!5 b!6 b!6)) (* (/ 1.0 4.0) (* r00 r!5 b!6 b!6)) (* (- 1.0) (* r!5 r!5 r!5 b!6 b!6 x!4 x!4)) (* 8.0 (* r00 r!5 x!4 x!4 x!4)) (* r00 r!5 r!5 b!6 b!6 x!4 x!4) (* (- 1.0) (* r!5 r!5 b!6 b!6 b!6 x!4 x!4 x!4)) (* (- 8.0) (* r!5 b!6 x!4 x!4 x!4 x!4)) (* (- 8.0) (* r!5 r!5 x!4 x!4 x!4)) (* 8.0 (* b00 x00 r!5 x!4 x!4 x!4)) (* (/ 1.0 4.0) (* b00 x00 r!5 b!6 b!6)) (* (- (/ 1.0 4.0)) (* r!5 b!6 b!6 b!6 x!4)))))
 (let (($x327 (>= ?x469 0.0)))
 (let (($x360 (not $x327)))
 (let (($x326 (= 0.0 ?x469)))
 (let (($x121 (not $x326)))
 (let ((@x117 (symm (commutativity (= $x326 (= ?x469 0.0))) (= (= ?x469 0.0) $x326))))
 (let (($x214 (= ?x469 0.0)))
 (let (($x94 (not $x214)))
 (let ((?x324 (* b!6 x!4)))
 (let ((?x70 (* b00 x00)))
 (let ((?x71 (* (- 1.0) ?x70)))
 (let ((?x87 (* (- 1.0) r00)))
 (let ((?x388 (* r!5 r!5 b!6 b!6)))
 (let ((?x338 (* (/ 1.0 4.0) ?x388)))
 (let ((?x125 (* (- (/ 1.0 2.0)) b!6)))
 (let ((?x368 (* (/ 1.0 4.0) (* r!5 b!6 b!6))))
 (let ((?x386 (* (/ 1.0 16.0) (* b!6 b!6 b!6 b!6))))
 (let ((?x342 (* (- (/ 1.0 4.0)) (* r!5 b!6 b!6 b!6))))
 (let ((?x315 (* (- (/ 1.0 8.0)) (* b!6 b!6 b!6))))
 (let ((?x602 (+ (* (- 4.0) (* b!6 x!4 x!4 x!4)) r!5 (* (- 3.0) ?x324) ?x315 ?x342 ?x386 ?x368 ?x125 ?x338 (* 8.0 (* r!5 x!4 x!4 x!4)) (* (- 6.0) (* b!6 x!4 x!4)) (* (/ 1.0 4.0) (* b!6 b!6 b!6 b!6 x!4 x!4)) (* r!5 r!5 b!6 b!6 x!4) (* (- 1.0) (* r!5 b!6 b!6 b!6 x!4 x!4)) (* (/ 1.0 4.0) (* b!6 b!6 b!6 b!6 x!4)) (* (- 1.0) (* r!5 b!6 b!6 b!6 x!4)) (* r!5 r!5 b!6 b!6 x!4 x!4) (* 6.0 (* r!5 x!4)) (* 12.0 (* r!5 x!4 x!4)))))
 (let (($x499 (= (* ?x602 (+ ?x87 ?x71 r!5 ?x324)) 0.0)))
 (let ((?x417 (+ ?x71 r!5 ?x324 ?x87)))
 (let (($x418 (= ?x417 0.0)))
 (let ((?x419 (+ r00 ?x70 (* (- 1.0) r!5) (* (- 1.0) ?x324))))
 (let (($x422 (= ?x419 0.0)))
 (let (($x146 (not $x499)))
 (let (($x190 (or $x94 $x146)))
 (let (($x186 (and $x422 $x190)))
 (let ((?x142 (* x!4 b!6)))
 (let ((?x355 (+ r!5 ?x87 ?x71 ?x142)))
 (let ((?x321 (+ r!5 ?x125 (* (- 3.0) ?x142) ?x368 ?x338 (* x!4 x!4 r!5 r!5 b!6 b!6) (* 8.0 (* x!4 x!4 x!4 r!5)) (* (- 1.0) (* x!4 r!5 b!6 b!6 b!6)) ?x315 ?x342 ?x386 (* x!4 r!5 r!5 b!6 b!6) (* (/ 1.0 4.0) (* x!4 b!6 b!6 b!6 b!6)) (* (- 1.0) (* x!4 x!4 r!5 b!6 b!6 b!6)) (* (/ 1.0 4.0) (* x!4 x!4 b!6 b!6 b!6 b!6)) (* 6.0 (* x!4 r!5)) (* 12.0 (* x!4 x!4 r!5)) (* (- 6.0) (* x!4 x!4 b!6)) (* (- 4.0) (* x!4 x!4 x!4 b!6)))))
 (let ((?x148 (+ ?x338 (* (- (/ 1.0 4.0)) (* r!5 b!6 b!6 r00)) (* (- (/ 1.0 4.0)) (* r!5 b!6 b!6 b00 x00)) (* (/ 1.0 4.0) (* x!4 r!5 b!6 b!6 b!6)) (* x!4 x!4 r!5 r!5 r!5 b!6 b!6) (* (- 1.0) (* x!4 x!4 r!5 r!5 b!6 b!6 r00)) (* (- 1.0) (* x!4 x!4 r!5 r!5 b!6 b!6 b00 x00)) (* x!4 x!4 x!4 r!5 r!5 b!6 b!6 b!6) (* 8.0 (* x!4 x!4 x!4 r!5 r!5)) (* (- 8.0) (* x!4 x!4 x!4 r!5 r00)) (* (- 8.0) (* x!4 x!4 x!4 r!5 b00 x00)) (* 8.0 (* x!4 x!4 x!4 x!4 r!5 b!6)))))
 (let (($x404 (and (= ?x355 0.0) (or (not (= ?x148 0.0)) (not (= (* ?x321 ?x355) 0.0))))))
 (let (($x522 (exists ((b Real) (r Real) (x Real) )(! (let ((?x98 (* x b)))
 (let ((?x70 (* b00 x00)))
 (let ((?x71 (* (- 1.0) ?x70)))
 (let ((?x87 (* (- 1.0) r00)))
 (let ((?x104 (+ r ?x87 ?x71 ?x98)))
 (let ((?x162 (* 8.0 (* x x x r))))
 (let ((?x149 (* x x r r b b)))
 (let ((?x137 (* (/ 1.0 4.0) (* r r b b))))
 (let ((?x138 (* (/ 1.0 4.0) (* r b b))))
 (let ((?x120 (* (- (/ 1.0 2.0)) b)))
 (let ((?x625 (+ r ?x120 (* (- 3.0) ?x98) ?x138 ?x137 ?x149 ?x162 (* (- 1.0) (* x r b b b)) (* (- (/ 1.0 8.0)) (* b b b)) (* (- (/ 1.0 4.0)) (* r b b b)) (* (/ 1.0 16.0) (* b b b b)) (* x r r b b) (* (/ 1.0 4.0) (* x b b b b)) (* (- 1.0) (* x x r b b b)) (* (/ 1.0 4.0) (* x x b b b b)) (* 6.0 (* x r)) (* 12.0 (* x x r)) (* (- 6.0) (* x x b)) (* (- 4.0) (* x x x b)))))
 (let ((?x255 (+ ?x137 (* (- (/ 1.0 4.0)) (* r b b r00)) (* (- (/ 1.0 4.0)) (* r b b b00 x00)) (* (/ 1.0 4.0) (* x r b b b)) (* x x r r r b b) (* (- 1.0) (* x x r r b b r00)) (* (- 1.0) (* x x r r b b b00 x00)) (* x x x r r b b b) (* 8.0 (* x x x r r)) (* (- 8.0) (* x x x r r00)) (* (- 8.0) (* x x x r b00 x00)) (* 8.0 (* x x x x r b)))))
 (let (($x103 (not (= ?x255 0.0))))
 (let (($x109 (= ?x104 0.0)))
 (and $x109 (or $x103 (not (= (* ?x625 ?x104) 0.0)))))))))))))))))) :qid k!28))
 ))
 (let (($x363 (exists ((b Real) (r Real) (x Real) )(! (let ((?x87 (* (- 1.0) r00)))
 (let ((?x120 (* (- (/ 1.0 2.0)) b)))
 (let ((?x70 (* b00 x00)))
 (let ((?x71 (* (- 1.0) ?x70)))
 (let ((?x325 (+ ?x71 r ?x120 ?x87 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x140 (+ r ?x120)))
 (let ((?x49 (* 2.0 x)))
 (let ((?x244 (+ 1.0 ?x49)))
 (let ((?x382 (+ (* (/ 1.0 4.0) (* ?x140 b b)) (* (/ 1.0 4.0) (* ?x244 ?x244 ?x140 ?x140 b b)) (* ?x244 ?x244 ?x244 ?x140))))
 (let ((?x98 (* x b)))
 (let ((?x194 (+ ?x71 r ?x87 ?x98)))
 (let ((?x162 (* 8.0 (* x x x r))))
 (let ((?x149 (* x x r r b b)))
 (let ((?x138 (* (/ 1.0 4.0) (* r b b))))
 (let (($x359 (or (not (= (* (+ ?x138 ?x149 ?x162) ?x194) 0.0)) (not (= (* ?x382 ?x325) 0.0)))))
 (and (= ?x194 0.0) $x359)))))))))))))))) :qid k!28))
 ))
 (let ((?x518 (lambda ((b Real) (r Real) (x Real) )(let ((?x98 (* x b)))
 (let ((?x70 (* b00 x00)))
 (let ((?x71 (* (- 1.0) ?x70)))
 (let ((?x87 (* (- 1.0) r00)))
 (let ((?x104 (+ r ?x87 ?x71 ?x98)))
 (let ((?x162 (* 8.0 (* x x x r))))
 (let ((?x149 (* x x r r b b)))
 (let ((?x137 (* (/ 1.0 4.0) (* r r b b))))
 (let ((?x138 (* (/ 1.0 4.0) (* r b b))))
 (let ((?x120 (* (- (/ 1.0 2.0)) b)))
 (let ((?x625 (+ r ?x120 (* (- 3.0) ?x98) ?x138 ?x137 ?x149 ?x162 (* (- 1.0) (* x r b b b)) (* (- (/ 1.0 8.0)) (* b b b)) (* (- (/ 1.0 4.0)) (* r b b b)) (* (/ 1.0 16.0) (* b b b b)) (* x r r b b) (* (/ 1.0 4.0) (* x b b b b)) (* (- 1.0) (* x x r b b b)) (* (/ 1.0 4.0) (* x x b b b b)) (* 6.0 (* x r)) (* 12.0 (* x x r)) (* (- 6.0) (* x x b)) (* (- 4.0) (* x x x b)))))
 (let ((?x255 (+ ?x137 (* (- (/ 1.0 4.0)) (* r b b r00)) (* (- (/ 1.0 4.0)) (* r b b b00 x00)) (* (/ 1.0 4.0) (* x r b b b)) (* x x r r r b b) (* (- 1.0) (* x x r r b b r00)) (* (- 1.0) (* x x r r b b b00 x00)) (* x x x r r b b b) (* 8.0 (* x x x r r)) (* (- 8.0) (* x x x r r00)) (* (- 8.0) (* x x x r b00 x00)) (* 8.0 (* x x x x r b)))))
 (let (($x103 (not (= ?x255 0.0))))
 (let (($x109 (= ?x104 0.0)))
 (let (($x505 (and $x109 (or $x103 (not (= (* ?x625 ?x104) 0.0))))))
 (let ((?x325 (+ ?x71 r ?x120 ?x87 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x140 (+ r ?x120)))
 (let ((?x49 (* 2.0 x)))
 (let ((?x244 (+ 1.0 ?x49)))
 (let ((?x382 (+ (* (/ 1.0 4.0) (* ?x140 b b)) (* (/ 1.0 4.0) (* ?x244 ?x244 ?x140 ?x140 b b)) (* ?x244 ?x244 ?x244 ?x140))))
 (let (($x359 (or (not (= (* (+ ?x138 ?x149 ?x162) (+ ?x71 r ?x87 ?x98)) 0.0)) (not (= (* ?x382 ?x325) 0.0)))))
 (let (($x237 (and (= (+ ?x71 r ?x87 ?x98) 0.0) $x359)))
 (rewrite (= $x237 $x505)))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((b Real) (r Real) (x Real) )(! (let ((?x49 (* 2.0 x)))
 (let ((?x50 (+ ?x49 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x46 (- r ?x36)))
 (let ((?x56 (+ (* ?x36 ?x36 ?x46) (* ?x36 ?x36 ?x46 ?x46 ?x50 ?x50) (* ?x46 ?x50 ?x50 ?x50))))
 (let ((?x57 (* (+ (- (+ (* (- 1.0) b00 x00) ?x46) r00) (* ?x36 ?x50)) ?x56)))
 (let ((?x42 (+ (* ?x36 ?x36 r) (* ?x36 ?x36 r r 2.0 x 2.0 x) (* r 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x60 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x42) 0.0)) (not (= ?x57 0.0)))))
 (and (= (+ ?x30 (* b x)) 0.0) $x60)))))))))) :qid k!28))
 ))
 (let ((?x124 (lambda ((b Real) (r Real) (x Real) )(let ((?x87 (* (- 1.0) r00)))
 (let ((?x120 (* (- (/ 1.0 2.0)) b)))
 (let ((?x70 (* b00 x00)))
 (let ((?x71 (* (- 1.0) ?x70)))
 (let ((?x325 (+ ?x71 r ?x120 ?x87 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x140 (+ r ?x120)))
 (let ((?x49 (* 2.0 x)))
 (let ((?x244 (+ 1.0 ?x49)))
 (let ((?x382 (+ (* (/ 1.0 4.0) (* ?x140 b b)) (* (/ 1.0 4.0) (* ?x244 ?x244 ?x140 ?x140 b b)) (* ?x244 ?x244 ?x244 ?x140))))
 (let ((?x98 (* x b)))
 (let ((?x194 (+ ?x71 r ?x87 ?x98)))
 (let ((?x162 (* 8.0 (* x x x r))))
 (let ((?x149 (* x x r r b b)))
 (let ((?x138 (* (/ 1.0 4.0) (* r b b))))
 (let (($x359 (or (not (= (* (+ ?x138 ?x149 ?x162) ?x194) 0.0)) (not (= (* ?x382 ?x325) 0.0)))))
 (let (($x237 (and (= ?x194 0.0) $x359)))
 (let ((?x50 (+ ?x49 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x46 (- r ?x36)))
 (let ((?x56 (+ (* ?x36 ?x36 ?x46) (* ?x36 ?x36 ?x46 ?x46 ?x50 ?x50) (* ?x46 ?x50 ?x50 ?x50))))
 (let ((?x57 (* (+ (- (+ (* (- 1.0) b00 x00) ?x46) r00) (* ?x36 ?x50)) ?x56)))
 (let ((?x42 (+ (* ?x36 ?x36 r) (* ?x36 ?x36 r r 2.0 x 2.0 x) (* r 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x60 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x42) 0.0)) (not (= ?x57 0.0)))))
 (let (($x61 (and (= (+ ?x30 (* b x)) 0.0) $x60)))
 (rewrite (= $x61 $x237))))))))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x300 (mp (mp @x63 (quant-intro (proof-bind ?x124) (= $x62 $x363)) $x363) (quant-intro (proof-bind ?x518) (= $x363 $x522)) $x522)))
 (let ((@x435 (mp (mp~ @x300 (sk (~ $x522 $x404)) $x404) (rewrite (= $x404 $x186)) $x186)))
 (let ((@x474 (and-elim @x435 $x422)))
 (let (($x409 (<= ?x419 0.0)))
 (let (($x408 (= 0.0 ?x419)))
 (let ((@x456 (mp @x474 (symm (commutativity (= $x408 $x422)) (= $x422 $x408)) $x408)))
 (let ((@x465 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x408) $x409)) @x456 $x409)))
 (let (($x410 (>= ?x419 0.0)))
 (let ((@x453 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x408) $x410)) @x456 $x410)))
 (let (($x423 (<= ?x417 0.0)))
 (let (($x425 (>= ?x417 0.0)))
 (let ((@x232 ((_ th-lemma arith) (lemma ((_ th-lemma arith) @x465 (hypothesis (not $x425)) false) $x425) (lemma ((_ th-lemma arith) (hypothesis (not $x423)) @x453 false) $x423) @x453 @x465 (= ?x417 ?x419))))
 (let (($x464 (or (not $x418) $x499)))
 (let ((@x158 (unit-resolution ((_ th-lemma arith) $x464) (hypothesis $x146) (hypothesis $x418) false)))
 (let ((@x348 (unit-resolution (and-elim @x435 $x190) (unit-resolution (lemma @x158 $x464) (trans* @x232 @x474 $x418) $x499) $x94)))
 (let (($x411 (<= ?x469 0.0)))
 (let ((@x446 (unit-resolution ((_ th-lemma arith) (or (not $x409) (not $x410) $x411)) @x465 @x453 (hypothesis (not $x411)) false)))
 (let ((@x357 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x326 (not $x411) $x360)) (lemma @x446 $x411) (mp @x348 (monotonicity @x117 (= $x94 $x121)) $x121) $x360)))
 (unit-resolution ((_ th-lemma arith) (or (not $x409) (not $x410) $x327)) @x465 @x453 @x357 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      13
 :arith-eq-adapter               12
 :arith-bound-propagations-cheap 9
 :arith-conflicts                10
 :arith-diseq                    18
 :arith-fixed-eqs                1
 :arith-grobner-calls            2
 :arith-grobner-conflicts        2
 :arith-horner-calls             2
 :arith-lower                    18
 :arith-make-feasible            15
 :arith-max-columns              44
 :arith-max-rows                 5
 :arith-nla-explanations         6
 :arith-nla-lemmas               8
 :arith-propagations             9
 :arith-upper                    9
 :conflicts                      6
 :decisions                      21
 :del-clause                     10
 :final-checks                   14
 :max-memory                     1.82
 :memory                         1.13
 :mk-bool-var                    43
 :mk-clause                      45
 :num-allocs                     201591
 :num-checks                     1
 :propagations                   24
 :rlimit-count                   3569
 :time                           0.00
 :total-time                     0.01)
