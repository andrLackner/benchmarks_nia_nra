unsat
((set-logic NIA)
(proof
(let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x51 (* y00 y00)))
 (let ((?x43 (- r y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x28 (- 1)))
 (let ((?x50 (* ?x28 ?x44 ?x43 y00)))
 (let ((?x52 (- ?x50 ?x51)))
 (let ((?x48 (* ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (* ?x44 ?x44 y00 y00)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x45 (* ?x44 y00)))
 (let ((?x46 (+ ?x43 ?x45)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x53 (* ?x42 ?x46 ?x49 ?x52)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x56)))))))))))))))))))) :qid k!29))
 ))
 (let (($x284 (= $x58 false)))
 (let (($x277 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x283 (elim-unused (= $x277 false))))
 (let (($x280 (= $x58 $x277)))
 (let ((?x363 (lambda ((q Int) (r Int) (y Int) )(let ((?x51 (* y00 y00)))
 (let ((?x43 (- r y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x28 (- 1)))
 (let ((?x50 (* ?x28 ?x44 ?x43 y00)))
 (let ((?x52 (- ?x50 ?x51)))
 (let ((?x48 (* ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (* ?x44 ?x44 y00 y00)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x45 (* ?x44 y00)))
 (let ((?x46 (+ ?x43 ?x45)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x53 (* ?x42 ?x46 ?x49 ?x52)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x57 (and $x33 $x41 $x56)))
 (let (($x275 (= $x57 false)))
 (let (($x314 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x87 (= (+ (* (- 1) y00) y) 0)))
 (let (($x357 (and $x87 $x314 false)))
 (let (($x268 (= $x56 false)))
 (let ((@x267 (rewrite (= (or false) false))))
 (let (($x263 (or false)))
 (let (($x264 (= $x56 $x263)))
 (let (($x261 (= $x55 false)))
 (let ((@x260 (rewrite (= (not true) false))))
 (let (($x256 (not true)))
 (let (($x257 (= $x55 $x256)))
 (let (($x254 (= $x54 true)))
 (let ((@x253 (rewrite (= (= 0 0) true))))
 (let (($x249 (= 0 0)))
 (let (($x250 (= $x54 $x249)))
 (let ((?x232 (* (- 1) ?x51)))
 (let ((?x332 (* (- 1) (* y00 (+ 1 q) (+ r (* (- 1) y00))))))
 (let ((?x340 (+ ?x332 ?x232)))
 (let ((?x85 (+ 1 q)))
 (let ((?x316 (* y00 y00 y00 ?x85 ?x85 ?x85)))
 (let ((?x308 (* y00 y00 ?x85 ?x85)))
 (let ((?x326 (+ ?x308 (* (- 1) ?x316))))
 (let ((?x88 (* y00 ?x85)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x297 (+ r ?x63 ?x88)))
 (let ((?x345 (* 0 ?x297 ?x326 ?x340)))
 (let ((@x84 (rewrite (= ?x43 (+ r ?x63)))))
 (let ((@x90 (rewrite (= ?x44 ?x85))))
 (let ((@x215 (monotonicity (rewrite (= ?x28 (- 1))) @x90 @x84 (= ?x50 (* (- 1) ?x85 (+ r ?x63) y00)))))
 (let ((@x336 (trans @x215 (rewrite (= (* (- 1) ?x85 (+ r ?x63) y00) ?x332)) (= ?x50 ?x332))))
 (let ((@x344 (trans (monotonicity @x336 (= ?x52 (- ?x332 ?x51))) (rewrite (= (- ?x332 ?x51) ?x340)) (= ?x52 ?x340))))
 (let ((@x144 (monotonicity @x90 @x90 @x90 (= ?x48 (* ?x85 ?x85 ?x85 y00 y00 y00)))))
 (let ((@x321 (trans @x144 (rewrite (= (* ?x85 ?x85 ?x85 y00 y00 y00) ?x316)) (= ?x48 ?x316))))
 (let ((@x119 (monotonicity @x90 @x90 (= ?x47 (* ?x85 ?x85 y00 y00)))))
 (let ((@x313 (trans @x119 (rewrite (= (* ?x85 ?x85 y00 y00) ?x308)) (= ?x47 ?x308))))
 (let ((@x330 (trans (monotonicity @x313 @x321 (= ?x49 (- ?x308 ?x316))) (rewrite (= (- ?x308 ?x316) ?x326)) (= ?x49 ?x326))))
 (let ((@x93 (monotonicity @x90 (= ?x45 (* ?x85 y00)))))
 (let ((@x296 (monotonicity @x84 (trans @x93 (rewrite (= (* ?x85 y00) ?x88)) (= ?x45 ?x88)) (= ?x46 (+ (+ r ?x63) ?x88)))))
 (let ((@x307 (trans @x296 (rewrite (= (+ (+ r ?x63) ?x88) ?x297)) (= ?x46 ?x297))))
 (let ((@x79 (trans (monotonicity (rewrite (= ?x30 ?x63)) (= ?x42 (+ ?x63 y00))) (rewrite (= (+ ?x63 y00) 0)) (= ?x42 0))))
 (let ((@x350 (trans (monotonicity @x79 @x307 @x330 @x344 (= ?x53 ?x345)) (rewrite (= ?x345 0)) $x54)))
 (let ((@x354 (trans (monotonicity (trans (monotonicity @x350 $x250) @x253 $x254) $x257) @x260 $x261)))
 (let ((@x359 (monotonicity (rewrite (= $x33 $x87)) (rewrite (= $x41 $x314)) (trans (monotonicity @x354 $x264) @x267 $x268) (= $x57 $x357))))
 (trans @x359 (rewrite (= $x357 false)) $x275))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (mp @x59 (trans (quant-intro (proof-bind ?x363) $x280) @x283 $x284) false))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  5
 :num-allocs   899040
 :rlimit-count 211
 :time         0.01
 :total-time   0.01)
