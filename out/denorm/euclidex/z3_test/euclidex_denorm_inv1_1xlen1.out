unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!3 () Int)
(declare-fun s!0 () Int)
(declare-fun p!5 () Int)
(declare-fun b!2 () Int)
(declare-fun a!4 () Int)
(proof
(let ((?x177 (* q!3 r!1)))
 (let ((?x37 (* p00 s00)))
 (let ((?x220 (+ ?x37 (* (- 1) (* q00 r00)) (* (- 1) (* p!5 s!0)) ?x177)))
 (let (($x509 (>= ?x220 0)))
 (let (($x151 (= ?x220 0)))
 (let ((?x337 (* (- 1) ?x177)))
 (let ((?x137 (* p!5 s!0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let ((?x216 (+ ?x133 ?x41 ?x137 ?x337)))
 (let ((?x331 (+ p!5 (* (- 1) q!3))))
 (let ((?x325 (* (- 1) b!2)))
 (let ((?x608 (+ ?x325 a!4)))
 (let ((?x604 (* ?x608 ?x608 ?x608 ?x331 ?x331 ?x331 ?x216 s!0 s!0 s!0 b!2 b!2 b!2 q!3)))
 (let (($x602 (= ?x604 0)))
 (let ((?x168 (+ (* (- 1) p!5) q!3)))
 (let ((?x165 (* (- 1) a!4)))
 (let ((?x511 (+ b!2 ?x165)))
 (let ((?x438 (+ (* (- 1) r!1) s!0)))
 (let ((?x508 (* ?x438 ?x438 ?x438 ?x511 ?x511 ?x511 ?x168 ?x216 a!4 a!4 a!4 p!5 p!5 p!5)))
 (let (($x506 (= ?x508 0)))
 (let (($x507 (not $x506)))
 (let (($x616 (or $x507 (not $x602))))
 (let ((?x517 (+ (* r00 b00 q!3) (* (- 1) (* p00 b00 s!0)) (* p00 s00 b!2) (* (- 1) (* q00 r00 b!2)) (* q00 a00 s!0) (* (- 1) (* s00 a00 q!3)))))
 (let ((?x459 (+ (* q00 r00 a!4) (* (- 1) (* r00 b00 p!5)) (* (- 1) (* p00 s00 a!4)) (* (- 1) (* q00 a00 r!1)) (* s00 a00 p!5) (* p00 b00 r!1))))
 (let ((?x160 (* p!5 b!2)))
 (let ((?x128 (* q00 a00)))
 (let (($x212 (= (+ ?x128 (* (- 1) (* p00 b00)) ?x160 (* (- 1) (* q!3 a!4))) 0)))
 (let ((?x218 (* b!2 r!1)))
 (let ((?x124 (* s00 a00)))
 (let (($x320 (= (+ ?x124 (* (- 1) (* a!4 s!0)) (* (- 1) (* r00 b00)) ?x218) 0)))
 (let (($x505 (and $x151 $x320 $x212 (= ?x459 0) (= ?x517 0) $x616)))
 (let ((?x476 (+ ?x137 ?x133 ?x41 ?x337)))
 (let ((?x326 (+ a!4 ?x325)))
 (let ((?x332 (* ?x326 ?x326 ?x326 ?x331 ?x331 ?x331 ?x476 s!0 s!0 s!0 b!2 b!2 b!2 q!3)))
 (let ((?x178 (+ ?x165 b!2)))
 (let ((?x153 (* ?x438 ?x438 ?x438 ?x178 ?x178 ?x178 ?x168 ?x476 a!4 a!4 a!4 p!5 p!5 p!5)))
 (let ((?x243 (+ (* b!2 q00 r00) (* (- 1) (* b!2 p00 s00)) (* s!0 p00 b00) (* (- 1) (* q!3 r00 b00)) (* q!3 s00 a00) (* (- 1) (* s!0 q00 a00)))))
 (let ((?x329 (+ (* a!4 p00 s00) (* (- 1) (* a!4 q00 r00)) (* p!5 r00 b00) (* (- 1) (* r!1 p00 b00)) (* (- 1) (* p!5 s00 a00)) (* r!1 q00 a00))))
 (let (($x260 (= (+ (* a!4 q!3) (* (- 1) ?x128) (* p00 b00) (* (- 1) ?x160)) 0)))
 (let (($x222 (= (+ (* a!4 s!0) (* (- 1) ?x218) (* (- 1) ?x124) (* r00 b00)) 0)))
 (let (($x336 (and (= ?x476 0) $x222 $x260 (= ?x329 0) (= ?x243 0) (or (not (= ?x153 0)) (not (= ?x332 0))))))
 (let (($x227 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x117 (* (- 1) (* q r))))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let ((?x147 (+ ?x33 ?x133 ?x41 ?x117)))
 (let ((?x269 (+ p (* (- 1) q))))
 (let ((?x334 (+ a (* (- 1) b))))
 (let ((?x401 (* ?x334 ?x334 ?x334 ?x269 ?x269 ?x269 ?x147 s s s b b b q)))
 (let ((?x248 (* (- 1) p)))
 (let ((?x255 (+ ?x248 q)))
 (let ((?x445 (* (- 1) a)))
 (let ((?x441 (+ ?x445 b)))
 (let ((?x308 (* (- 1) r)))
 (let ((?x316 (+ ?x308 s)))
 (let ((?x467 (* ?x316 ?x316 ?x316 ?x441 ?x441 ?x441 ?x255 ?x147 a a a p p p)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x304 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x309 (= ?x304 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x240 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x241 (= ?x240 0)))
 (let ((?x129 (* p00 b00)))
 (let ((?x128 (* q00 a00)))
 (let ((?x172 (* (- 1) ?x128)))
 (let (($x175 (= (+ (* a q) ?x172 ?x129 (* (- 1) (* p b))) 0)))
 (let ((?x142 (* r00 b00)))
 (let ((?x124 (* s00 a00)))
 (let ((?x131 (* (- 1) ?x124)))
 (let ((?x49 (* a s)))
 (let (($x157 (= (+ ?x49 (* (- 1) (* b r)) ?x131 ?x142) 0)))
 (let (($x152 (= ?x147 0)))
 (and $x152 $x157 $x175 $x241 $x309 (or (not (= ?x467 0)) (not (= ?x401 0)))))))))))))))))))))))))))))))))))) :qid k!39))
 ))
 (let (($x234 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let ((?x310 (+ (* (- 1) (* (+ r (* (- 1) s)) q)) (* (+ p (* (- 1) q)) s) ?x133 ?x41)))
 (let ((?x269 (+ p (* (- 1) q))))
 (let ((?x334 (+ a (* (- 1) b))))
 (let ((?x213 (* ?x334 ?x334 ?x334 ?x269 ?x269 ?x269 ?x310 s s s b b b q)))
 (let ((?x221 (+ (* (- 1) (* (+ q (* (- 1) p)) r)) (* (+ s (* (- 1) r)) p) ?x133 ?x41)))
 (let ((?x248 (* (- 1) p)))
 (let ((?x293 (+ q ?x248)))
 (let ((?x445 (* (- 1) a)))
 (let ((?x232 (+ b ?x445)))
 (let ((?x308 (* (- 1) r)))
 (let ((?x290 (+ s ?x308)))
 (let ((?x122 (* ?x290 ?x290 ?x290 ?x232 ?x232 ?x232 ?x293 ?x221 a a a p p p)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x201 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x345 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x251 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x198 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (and (= (+ (* (- 1) (* r q)) (* s p) ?x133 ?x41) 0) (= ?x198 0) $x251 (= ?x345 0) (= ?x201 0) (or (not (= ?x122 0)) (not (= ?x213 0)))))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x114 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x117 (* (- 1) (* q r))))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let ((?x147 (+ ?x33 ?x133 ?x41 ?x117)))
 (let ((?x269 (+ p (* (- 1) q))))
 (let ((?x334 (+ a (* (- 1) b))))
 (let ((?x401 (* ?x334 ?x334 ?x334 ?x269 ?x269 ?x269 ?x147 s s s b b b q)))
 (let ((?x248 (* (- 1) p)))
 (let ((?x255 (+ ?x248 q)))
 (let ((?x445 (* (- 1) a)))
 (let ((?x441 (+ ?x445 b)))
 (let ((?x308 (* (- 1) r)))
 (let ((?x316 (+ ?x308 s)))
 (let ((?x467 (* ?x316 ?x316 ?x316 ?x441 ?x441 ?x441 ?x255 ?x147 a a a p p p)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x304 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x309 (= ?x304 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x240 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x241 (= ?x240 0)))
 (let ((?x129 (* p00 b00)))
 (let ((?x128 (* q00 a00)))
 (let ((?x172 (* (- 1) ?x128)))
 (let (($x175 (= (+ (* a q) ?x172 ?x129 (* (- 1) (* p b))) 0)))
 (let ((?x142 (* r00 b00)))
 (let ((?x124 (* s00 a00)))
 (let ((?x131 (* (- 1) ?x124)))
 (let ((?x49 (* a s)))
 (let (($x157 (= (+ ?x49 (* (- 1) (* b r)) ?x131 ?x142) 0)))
 (let (($x152 (= ?x147 0)))
 (let (($x422 (and $x152 $x157 $x175 $x241 $x309 (or (not (= ?x467 0)) (not (= ?x401 0))))))
 (let ((?x310 (+ (* (- 1) (* (+ r (* (- 1) s)) q)) (* ?x269 s) ?x133 ?x41)))
 (let ((?x213 (* ?x334 ?x334 ?x334 ?x269 ?x269 ?x269 ?x310 s s s b b b q)))
 (let ((?x221 (+ (* (- 1) (* (+ q ?x248) r)) (* (+ s ?x308) p) ?x133 ?x41)))
 (let ((?x293 (+ q ?x248)))
 (let ((?x232 (+ b ?x445)))
 (let ((?x290 (+ s ?x308)))
 (let ((?x122 (* ?x290 ?x290 ?x290 ?x232 ?x232 ?x232 ?x293 ?x221 a a a p p p)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x201 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x345 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x251 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x198 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x280 (and (= (+ (* (- 1) (* r q)) (* s p) ?x133 ?x41) 0) (= ?x198 0) $x251 (= ?x345 0) (= ?x201 0) (or (not (= ?x122 0)) (not (= ?x213 0))))))
 (rewrite (= $x280 $x422)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x108 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x97 (- s r)))
 (let ((?x95 (- q p)))
 (let ((?x102 (- b a)))
 (let ((?x31 (- 1)))
 (let ((?x41 (* q00 r00)))
 (let ((?x103 (* (+ (- (+ (* ?x31 ?x95 r) (* p ?x97)) (* p00 s00)) ?x41) ?x31 a a a ?x102 ?x102 ?x102 p p p ?x95 ?x97 ?x97 ?x97)))
 (let ((?x86 (- p q)))
 (let ((?x91 (- a b)))
 (let ((?x90 (+ (- (+ (* ?x31 q (- r s)) (* ?x86 s)) (* p00 s00)) ?x41)))
 (let ((?x92 (* ?x90 ?x31 ?x91 ?x91 ?x91 b b b ?x86 ?x86 ?x86 q s s s)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* ?x31 a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let (($x44 (= (+ (- (+ (* ?x31 q r) (* p s)) (* p00 s00)) ?x41) 0)))
 (and $x44 (= (+ (- (* ?x31 b r) (* a00 s00)) ?x49 ?x51) 0) (= ?x60 0) (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= ?x92 0)) (not (= ?x103 0)))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x236 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x133 (* (- 1) ?x37)))
 (let ((?x310 (+ (* (- 1) (* (+ r (* (- 1) s)) q)) (* (+ p (* (- 1) q)) s) ?x133 ?x41)))
 (let ((?x269 (+ p (* (- 1) q))))
 (let ((?x334 (+ a (* (- 1) b))))
 (let ((?x213 (* ?x334 ?x334 ?x334 ?x269 ?x269 ?x269 ?x310 s s s b b b q)))
 (let ((?x221 (+ (* (- 1) (* (+ q (* (- 1) p)) r)) (* (+ s (* (- 1) r)) p) ?x133 ?x41)))
 (let ((?x248 (* (- 1) p)))
 (let ((?x293 (+ q ?x248)))
 (let ((?x445 (* (- 1) a)))
 (let ((?x232 (+ b ?x445)))
 (let ((?x308 (* (- 1) r)))
 (let ((?x290 (+ s ?x308)))
 (let ((?x122 (* ?x290 ?x290 ?x290 ?x232 ?x232 ?x232 ?x293 ?x221 a a a p p p)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x201 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x345 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x251 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x198 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x280 (and (= (+ (* (- 1) (* r q)) (* s p) ?x133 ?x41) 0) (= ?x198 0) $x251 (= ?x345 0) (= ?x201 0) (or (not (= ?x122 0)) (not (= ?x213 0))))))
 (let ((?x97 (- s r)))
 (let ((?x95 (- q p)))
 (let ((?x102 (- b a)))
 (let ((?x31 (- 1)))
 (let ((?x103 (* (+ (- (+ (* ?x31 ?x95 r) (* p ?x97)) ?x37) ?x41) ?x31 a a a ?x102 ?x102 ?x102 p p p ?x95 ?x97 ?x97 ?x97)))
 (let ((?x86 (- p q)))
 (let ((?x91 (- a b)))
 (let ((?x92 (* (+ (- (+ (* ?x31 q (- r s)) (* ?x86 s)) ?x37) ?x41) ?x31 ?x91 ?x91 ?x91 b b b ?x86 ?x86 ?x86 q s s s)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x53 (= (+ (- (* ?x31 b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x107 (and (= (+ (- (+ (* ?x31 q r) (* p s)) ?x37) ?x41) 0) $x53 (= (+ (- (+ (* ?x31 a q) ?x55) (* b00 p00)) ?x59) 0) (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= ?x92 0)) (not (= ?x103 0))))))
 (rewrite (= $x107 $x280))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x109 (asserted $x108)))
 (let ((@x278 (mp (mp @x109 (quant-intro (proof-bind ?x236) (= $x108 $x234)) $x234) (rewrite (= $x234 $x234)) $x234)))
 (let ((@x463 (mp~ (mp @x278 (quant-intro (proof-bind ?x114) (= $x234 $x227)) $x227) (sk (~ $x227 $x336)) $x336)))
 (let ((@x609 (mp @x463 (rewrite (= $x336 $x505)) $x505)))
 (let ((@x605 (and-elim @x609 $x151)))
 (let ((@x115 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x151) $x509)) @x605 $x509)))
 (let (($x510 (<= ?x220 0)))
 (let ((@x176 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x151) $x510)) @x605 $x510)))
 (let (($x415 (not (<= ?x508 0))))
 (let (($x435 (>= ?x604 0)))
 (let (($x429 (<= ?x604 0)))
 (let ((@x417 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x602 (not $x429) (not $x435))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x429)) @x176 @x115 false) $x429) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x435)) @x176 @x115 false) $x435) $x602)))
 (let (($x431 (>= ?x508 0)))
 (let ((@x412 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x506 $x415 (not $x431))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x431)) @x176 @x115 false) $x431) (unit-resolution (and-elim @x609 $x616) @x417 $x507) $x415)))
 ((_ th-lemma arith farkas 1 1 1) @x412 @x176 @x115 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 10
 :arith-assert-diseq        3
 :arith-assert-lower        19
 :arith-assert-upper        18
 :arith-conflicts           4
 :arith-eq-adapter          11
 :arith-fixed-eqs           6
 :arith-grobner             4
 :arith-max-min             344
 :arith-nonlinear-horner    38
 :arith-num-rows            11
 :arith-pivots              5
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    11
 :conflicts                 4
 :decisions                 7
 :del-clause                27
 :final-checks              4
 :max-memory                19.59
 :memory                    19.09
 :mk-bool-var               33
 :mk-clause                 40
 :num-allocs                538769
 :num-checks                1
 :propagations              19
 :rlimit-count              8613
 :time                      0.01
 :total-time                0.04)
