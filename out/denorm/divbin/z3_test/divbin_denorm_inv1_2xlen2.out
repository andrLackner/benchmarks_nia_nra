unsat
((set-logic NRA)
(proof
(let (($x686 (exists ((b Real) (x Real) )(! (let ((?x51 (* 2.0 x)))
 (let ((?x309 (+ 1.0 ?x51)))
 (let ((?x663 (* ?x309 b)))
 (let ((?x666 (* (/ 1.0 2.0) ?x663)))
 (let ((?x652 (* (- (/ 1.0 2.0)) b)))
 (let ((?x646 (* x b)))
 (let ((?x622 (* (- 1.0) ?x646)))
 (let ((?x665 (+ ?x622 ?x652 ?x666)))
 (let ((?x74 (* b00 x00)))
 (let ((?x653 (+ ?x74 r00 ?x622 ?x652)))
 (let ((?x662 (+ (* (/ 1.0 8.0) (* ?x653 ?x653 ?x653 b b b)) (* (- (/ 1.0 2.0)) (* ?x309 ?x653 ?x653 ?x653 b)))))
 (let ((?x624 (* ?x309 ?x309 ?x309)))
 (let ((?x655 (* ?x653 ?x653 b)))
 (let ((?x583 (* (- (/ 1.0 2.0)) ?x655)))
 (let ((?x625 (+ ?x583 ?x624)))
 (let ((?x584 (* ?x625 ?x662 ?x665)))
 (let (($x680 (= ?x584 0.0)))
 (not $x680)))))))))))))))))) :qid k!28))
 ))
 (let (($x542 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x543 (lambda ((b Real) (x Real) )(let ((?x51 (* 2.0 x)))
 (let ((?x309 (+ 1.0 ?x51)))
 (let ((?x663 (* ?x309 b)))
 (let ((?x666 (* (/ 1.0 2.0) ?x663)))
 (let ((?x652 (* (- (/ 1.0 2.0)) b)))
 (let ((?x646 (* x b)))
 (let ((?x622 (* (- 1.0) ?x646)))
 (let ((?x665 (+ ?x622 ?x652 ?x666)))
 (let ((?x74 (* b00 x00)))
 (let ((?x653 (+ ?x74 r00 ?x622 ?x652)))
 (let ((?x662 (+ (* (/ 1.0 8.0) (* ?x653 ?x653 ?x653 b b b)) (* (- (/ 1.0 2.0)) (* ?x309 ?x653 ?x653 ?x653 b)))))
 (let ((?x624 (* ?x309 ?x309 ?x309)))
 (let ((?x655 (* ?x653 ?x653 b)))
 (let ((?x583 (* (- (/ 1.0 2.0)) ?x655)))
 (let ((?x625 (+ ?x583 ?x624)))
 (let ((?x584 (* ?x625 ?x662 ?x665)))
 (let (($x680 (= ?x584 0.0)))
 (let (($x684 (not $x680)))
 (let ((?x716 (+ ?x652 r00 ?x74 ?x622)))
 (let ((?x128 (+ (* (/ 1.0 8.0) (* ?x716 ?x716 ?x716 b b b)) (* (- (/ 1.0 2.0)) (* ?x309 ?x716 ?x716 ?x716 b)))))
 (let ((?x754 (* b b00 b00 x00 x00)))
 (let ((?x221 (* (- (/ 1.0 2.0)) ?x754)))
 (let ((?x746 (* b b00 x00 r00)))
 (let ((?x494 (* (- 1.0) ?x746)))
 (let ((?x741 (* x b b b)))
 (let ((?x207 (* (- (/ 1.0 2.0)) ?x741)))
 (let ((?x737 (* b b r00)))
 (let ((?x487 (* (/ 1.0 2.0) ?x737)))
 (let ((?x730 (* b b b00 x00)))
 (let ((?x375 (* (/ 1.0 2.0) ?x730)))
 (let ((?x724 (* b r00 r00)))
 (let ((?x232 (* (- (/ 1.0 2.0)) ?x724)))
 (let ((?x718 (* b b b)))
 (let ((?x372 (* (- (/ 1.0 8.0)) ?x718)))
 (let ((?x615 (* x x b b b)))
 (let ((?x267 (* (- (/ 1.0 2.0)) ?x615)))
 (let ((?x604 (* x b b b00 x00)))
 (let ((?x602 (* x b b r00)))
 (let ((?x422 (* x x)))
 (let ((?x441 (* 12.0 ?x422)))
 (let ((?x147 (* 8.0 (* x x x))))
 (let ((?x439 (* 6.0 x)))
 (let ((?x389 (+ 1.0 ?x439 ?x147 ?x441 ?x602 ?x604 ?x267 ?x372 ?x232 ?x375 ?x487 ?x207 ?x494 ?x221)))
 (let ((?x526 (* ?x389 ?x128 0.0)))
 (let ((?x507 (* (/ 1.0 2.0) b)))
 (let ((?x515 (+ ?x507 ?x646)))
 (let ((?x509 (+ ?x507 (* (/ 1.0 2.0) (* 2.0 ?x646)))))
 (let ((@x505 (rewrite (= (+ (* 1.0 b) (* ?x51 b)) (+ b (* 2.0 ?x646))))))
 (let ((@x499 (trans (rewrite (= ?x663 (+ (* 1.0 b) (* ?x51 b)))) @x505 (= ?x663 (+ b (* 2.0 ?x646))))))
 (let ((@x511 (trans (monotonicity @x499 (= ?x666 (* (/ 1.0 2.0) (+ b (* 2.0 ?x646))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x646))) ?x509)) (= ?x666 ?x509))))
 (let ((@x518 (monotonicity (trans @x511 (rewrite (= ?x509 ?x515)) (= ?x666 ?x515)) (= ?x665 (+ ?x622 ?x652 ?x515)))))
 (let ((?x257 (+ 1.0 ?x439 ?x147 ?x441)))
 (let ((?x384 (+ ?x602 ?x604 ?x267 ?x372 ?x232 ?x375 ?x487 ?x207 ?x494 ?x221)))
 (let ((?x386 (+ ?x384 ?x257)))
 (let ((?x371 (* ?x51 ?x51 ?x51)))
 (let ((?x370 (* ?x51 ?x51)))
 (let ((?x374 (* ?x51 1.0 ?x51)))
 (let ((?x373 (* 1.0 ?x51)))
 (let ((?x377 (* ?x51 ?x51 1.0)))
 (let ((?x376 (* ?x51 1.0)))
 (let ((?x485 (* ?x51 1.0 1.0)))
 (let ((?x489 (* 1.0 1.0)))
 (let ((?x270 (+ ?x489 ?x485 ?x376 ?x377 ?x373 ?x374 ?x370 ?x371)))
 (let ((?x354 (* 4.0 ?x422)))
 (let ((?x125 (+ 1.0 ?x51 ?x51 ?x354 ?x51 ?x354 ?x354 ?x147)))
 (let ((@x256 (monotonicity (rewrite (= ?x489 1.0)) (rewrite (= ?x485 ?x51)) (rewrite (= ?x376 ?x51)) (rewrite (= ?x377 ?x354)) (rewrite (= ?x373 ?x51)) (rewrite (= ?x374 ?x354)) (rewrite (= ?x370 ?x354)) (rewrite (= ?x371 ?x147)) (= ?x270 ?x125))))
 (let ((@x382 (trans (rewrite (= ?x624 ?x270)) (trans @x256 (rewrite (= ?x125 ?x257)) (= ?x270 ?x257)) (= ?x624 ?x257))))
 (let ((?x222 (+ (* (- (/ 1.0 2.0)) (* (- 2.0) ?x602)) (* (- (/ 1.0 2.0)) (* (- 2.0) ?x604)) ?x267 (* (- (/ 1.0 2.0)) (* (/ 1.0 4.0) ?x718)) ?x232 (* (- (/ 1.0 2.0)) (* (- 1.0) ?x730)) (* (- (/ 1.0 2.0)) (* (- 1.0) ?x737)) ?x207 (* (- (/ 1.0 2.0)) (* 2.0 ?x746)) ?x221)))
 (let ((?x797 (* 2.0 ?x746)))
 (let ((?x794 (* (- 1.0) ?x737)))
 (let ((?x795 (* (- 1.0) ?x730)))
 (let ((?x598 (* (/ 1.0 4.0) ?x718)))
 (let ((?x800 (* (- 2.0) ?x604)))
 (let ((?x799 (* (- 2.0) ?x602)))
 (let ((?x259 (+ ?x799 ?x800 ?x615 ?x598 ?x724 ?x795 ?x794 ?x741 ?x797 ?x754)))
 (let ((?x242 (* (- (/ 1.0 2.0)) ?x259)))
 (let ((?x715 (* ?x622 ?x622 b)))
 (let ((?x714 (* ?x74 ?x622 b)))
 (let ((?x713 (* r00 ?x622 b)))
 (let ((?x630 (* ?x652 ?x622 b)))
 (let ((?x594 (* ?x622 ?x74 b)))
 (let ((?x712 (* ?x74 ?x74 b)))
 (let ((?x709 (* r00 ?x74 b)))
 (let ((?x708 (* ?x652 ?x74 b)))
 (let ((?x707 (* ?x622 r00 b)))
 (let ((?x706 (* ?x74 r00 b)))
 (let ((?x629 (* r00 r00 b)))
 (let ((?x592 (* ?x652 r00 b)))
 (let ((?x705 (* ?x622 ?x652 b)))
 (let ((?x590 (* ?x74 ?x652 b)))
 (let ((?x589 (* r00 ?x652 b)))
 (let ((?x698 (* ?x652 ?x652 b)))
 (let ((?x720 (+ ?x698 ?x589 ?x590 ?x705 ?x592 ?x629 ?x706 ?x707 ?x708 ?x709 ?x712 ?x594 ?x630 ?x713 ?x714 ?x715)))
 (let ((?x635 (* (- 1.0) ?x604)))
 (let ((?x634 (* (- 1.0) ?x602)))
 (let ((?x744 (* (/ 1.0 2.0) ?x741)))
 (let ((?x600 (* (- (/ 1.0 2.0)) ?x730)))
 (let ((?x726 (* (- (/ 1.0 2.0)) ?x737)))
 (let ((?x571 (+ ?x598 ?x726 ?x600 ?x744 ?x726 ?x724 ?x746 ?x634 ?x600 ?x746 ?x754 ?x635 ?x744 ?x634 ?x635 ?x615)))
 (let ((@x792 (trans (rewrite (= ?x715 (* x b x b b))) (rewrite (= (* x b x b b) ?x615)) (= ?x715 ?x615))))
 (let ((@x786 (trans (rewrite (= ?x714 (* (- 1.0) (* b00 x00 x b b)))) (rewrite (= (* (- 1.0) (* b00 x00 x b b)) ?x635)) (= ?x714 ?x635))))
 (let ((@x774 (trans (rewrite (= ?x713 (* (- 1.0) (* r00 x b b)))) (rewrite (= (* (- 1.0) (* r00 x b b)) ?x634)) (= ?x713 ?x634))))
 (let ((@x763 (trans (rewrite (= ?x630 (* (/ 1.0 2.0) (* b x b b)))) (rewrite (= (* (/ 1.0 2.0) (* b x b b)) ?x744)) (= ?x630 ?x744))))
 (let ((@x732 (trans (rewrite (= ?x590 (* (- (/ 1.0 2.0)) (* b00 x00 b b)))) (rewrite (= (* (- (/ 1.0 2.0)) (* b00 x00 b b)) ?x600)) (= ?x590 ?x600))))
 (let ((@x599 (trans (rewrite (= ?x589 (* (- (/ 1.0 2.0)) (* r00 b b)))) (rewrite (= (* (- (/ 1.0 2.0)) (* r00 b b)) ?x726)) (= ?x589 ?x726))))
 (let ((@x793 (monotonicity (rewrite (= ?x698 ?x598)) @x599 @x732 (rewrite (= ?x705 ?x744)) (rewrite (= ?x592 ?x726)) (rewrite (= ?x629 ?x724)) (rewrite (= ?x706 ?x746)) (rewrite (= ?x707 ?x634)) (rewrite (= ?x708 ?x600)) (rewrite (= ?x709 ?x746)) (rewrite (= ?x712 ?x754)) (rewrite (= ?x594 ?x635)) @x763 @x774 @x786 @x792 (= ?x720 ?x571))))
 (let ((@x690 (rewrite (= ?x653 ?x716))))
 (let ((@x595 (trans (monotonicity @x690 @x690 (= ?x655 (* ?x716 ?x716 b))) (rewrite (= (* ?x716 ?x716 b) ?x720)) (= ?x655 ?x720))))
 (let ((@x253 (trans @x595 (trans @x793 (rewrite (= ?x571 ?x259)) (= ?x720 ?x259)) (= ?x655 ?x259))))
 (let ((@x368 (trans (monotonicity @x253 (= ?x583 ?x242)) (rewrite (= ?x242 ?x222)) (= ?x583 ?x222))))
 (let ((@x388 (monotonicity (trans @x368 (rewrite (= ?x222 ?x384)) (= ?x583 ?x384)) @x382 (= ?x625 ?x386))))
 (let ((@x472 (monotonicity (trans @x388 (rewrite (= ?x386 ?x389)) (= ?x625 ?x389)) (rewrite (= ?x662 ?x128)) (trans @x518 (rewrite (= (+ ?x622 ?x652 ?x515) 0.0)) (= ?x665 0.0)) (= ?x584 ?x526))))
 (let ((@x534 (monotonicity (trans @x472 (rewrite (= ?x526 0.0)) $x680) (= $x680 (= 0.0 0.0)))))
 (let ((@x538 (monotonicity (trans @x534 (rewrite (= (= 0.0 0.0) true)) (= $x680 true)) (= $x684 (not true)))))
 (trans @x538 (rewrite (= (not true) false)) (= $x684 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x479 (trans (quant-intro (proof-bind ?x543) (= $x686 $x542)) (elim-unused (= $x542 false)) (= $x686 false))))
 (let (($x593 (exists ((b Real) (r Real) (x Real) )(! (let ((?x91 (* (- 1.0) r00)))
 (let ((?x122 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x578 (+ ?x75 r ?x122 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x251 (+ r ?x122)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x309 (+ 1.0 ?x51)))
 (let ((?x628 (+ (* (/ 1.0 8.0) (* ?x251 ?x251 ?x251 b b b)) (* (- (/ 1.0 2.0)) (* ?x309 ?x251 ?x251 ?x251 b)))))
 (let (($x711 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x251 ?x251 b)) (* ?x309 ?x309 ?x309)) ?x628 ?x578) 0.0)))
 (let ((?x102 (* x b)))
 (let ((?x235 (+ ?x75 r ?x91 ?x102)))
 (let ((?x174 (* (- 1.0) (* x r r r b))))
 (let ((?x155 (* (/ 1.0 8.0) (* r r r b b b))))
 (let ((?x640 (* (+ (* (- (/ 1.0 2.0)) (* r r b)) (* 8.0 (* x x x))) (+ ?x155 ?x174) ?x235)))
 (and (= ?x235 0.0) (or (not (= ?x640 0.0)) (not $x711)))))))))))))))))) :qid k!28))
 ))
 (let (($x66 (exists ((b Real) (r Real) (x Real) )(! (let ((?x51 (* 2.0 x)))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ (* (- 1.0) ?x36 ?x48 ?x48) (* ?x52 ?x52 ?x52)) (- (* ?x36 ?x36 ?x36 ?x48 ?x48 ?x48) (* ?x36 ?x48 ?x48 ?x48 ?x52)))))
 (let ((?x44 (- (* ?x36 ?x36 ?x36 r r r) (* ?x36 r r r 2.0 x))))
 (let ((?x41 (+ (* (- 1.0) ?x36 r r) (* 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x64 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41 ?x44) 0.0)) (not (= ?x61 0.0)))))
 (and (= (+ ?x30 (* b x)) 0.0) $x64)))))))))) :qid k!28))
 ))
 (let ((?x702 (lambda ((b Real) (r Real) (x Real) )(let ((?x91 (* (- 1.0) r00)))
 (let ((?x122 (* (- (/ 1.0 2.0)) b)))
 (let ((?x74 (* b00 x00)))
 (let ((?x75 (* (- 1.0) ?x74)))
 (let ((?x578 (+ ?x75 r ?x122 ?x91 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x251 (+ r ?x122)))
 (let ((?x51 (* 2.0 x)))
 (let ((?x309 (+ 1.0 ?x51)))
 (let ((?x628 (+ (* (/ 1.0 8.0) (* ?x251 ?x251 ?x251 b b b)) (* (- (/ 1.0 2.0)) (* ?x309 ?x251 ?x251 ?x251 b)))))
 (let (($x711 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x251 ?x251 b)) (* ?x309 ?x309 ?x309)) ?x628 ?x578) 0.0)))
 (let ((?x102 (* x b)))
 (let ((?x235 (+ ?x75 r ?x91 ?x102)))
 (let ((?x174 (* (- 1.0) (* x r r r b))))
 (let ((?x155 (* (/ 1.0 8.0) (* r r r b b b))))
 (let ((?x640 (* (+ (* (- (/ 1.0 2.0)) (* r r b)) (* 8.0 (* x x x))) (+ ?x155 ?x174) ?x235)))
 (let (($x190 (and (= ?x235 0.0) (or (not (= ?x640 0.0)) (not $x711)))))
 (let ((?x52 (+ ?x51 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x48 (- r ?x36)))
 (let ((?x61 (* (+ (- (+ (* (- 1.0) b00 x00) ?x48) r00) (* ?x36 ?x52)) (+ (* (- 1.0) ?x36 ?x48 ?x48) (* ?x52 ?x52 ?x52)) (- (* ?x36 ?x36 ?x36 ?x48 ?x48 ?x48) (* ?x36 ?x48 ?x48 ?x48 ?x52)))))
 (let ((?x44 (- (* ?x36 ?x36 ?x36 r r r) (* ?x36 r r r 2.0 x))))
 (let ((?x41 (+ (* (- 1.0) ?x36 r r) (* 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x64 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41 ?x44) 0.0)) (not (= ?x61 0.0)))))
 (let (($x65 (and (= (+ ?x30 (* b x)) 0.0) $x64)))
 (rewrite (= $x65 $x190))))))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x670 (mp (mp @x67 (quant-intro (proof-bind ?x702) (= $x66 $x593)) $x593) (rewrite (= $x593 $x686)) $x686)))
 (mp @x670 @x479 false))))))))))))

(:max-memory   17.63
 :memory       17.36
 :num-allocs   56102
 :num-checks   1
 :rlimit-count 1305
 :time         0.00
 :total-time   0.02)
