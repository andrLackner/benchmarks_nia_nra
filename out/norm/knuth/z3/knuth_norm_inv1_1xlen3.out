unsat
((set-logic NIA)
(declare-fun r!2 () Int)
(declare-fun d!1 () Int)
(declare-fun x!0 () Int)
(declare-fun q!3 () Int)
(proof
(let ((?x41 (* d00 d00 q00)))
 (let ((?x32 (* 8 r00)))
 (let ((?x2265 (+ ?x32 ?x41 (* 4 (* d00 x00)) (* (- 2) (* d00 q00)) (* (- 4) (* r00 d00)) (* (- 8) r!2) (* 2 (* d!1 q!3)) (* (- 1) (* d!1 d!1 q!3)) (* (- 4) (* d!1 x!0)) (* 4 (* d!1 r!2)))))
 (let (($x1653 (<= ?x2265 0)))
 (let (($x1906 (= ?x2265 0)))
 (let ((?x2571 (* (- 1) x!0)))
 (let ((?x4556 (* 2 r!2)))
 (let ((?x1972 (* (- 2) d!1)))
 (let ((?x4927 (+ (- 4) ?x1972 q!3 ?x4556 ?x2571)))
 (let ((?x2577 (+ 2 d!1)))
 (let ((?x4140 (+ (- 8) q!3)))
 (let ((?x1621 (* (- 1) (* ?x4140 ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2))))
 (let ((?x1683 (+ (* ?x4140 ?x4140 ?x4140 ?x2577 ?x2577 ?x4927 ?x4927) ?x1621 (* (- 4) (* d00 x00 ?x4140 ?x4140 ?x4927 ?x4927)) (* 2 (* d00 q00 ?x4140 ?x4140 ?x4927 ?x4927)) (* (- 8) (* ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927)) (* 2 (* ?x4140 ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2)) (* (- 1) (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927)) (* 8 (* ?x4140 ?x4140 ?x4927 ?x4927 ?x4927)) (* (- 2) (* d00 q00 ?x4140 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2)) (* (- 2) (* ?x4140 ?x4140 ?x4140 ?x2577 ?x4927 ?x4927)) (* (- 2) (* d00 q00 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927)) (* (- 8) (* r00 ?x4140 ?x4140 ?x4927 ?x4927)) (* 8 (* r00 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927)) (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 r!2)) (* (- 4) (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2 r!2)) (* 4 (* d00 x00 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927)) (* 4 (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 ?x4927 r!2)) (* 4 (* d00 r00 ?x4140 ?x4140 ?x4927 ?x4927)) (* 4 (* d00 x00 ?x4140 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2)) (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927)) (* (- 4) (* d00 r00 ?x4140 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2)) (* (- 4) (* ?x4140 ?x4140 ?x2577 ?x4927 ?x4927 ?x4927)) (* 4 (* ?x4140 ?x4140 ?x2577 ?x4927 ?x4927 r!2)) (* 2 (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927)) (* 8 (* r00 ?x4140 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2)) (* (- 4) (* d00 r00 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927)) (* (- 8) (* ?x4140 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 ?x4927 r!2)) (* (- 1) (* d00 d00 q00 ?x4140 ?x4140 ?x4927 ?x4927)) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927) (* d00 d00 q00 ?x4140 ?x2577 ?x2577 ?x2577 ?x4927 ?x4927 ?x4927 r!2))))
 (let (($x4760 (= ?x1683 0)))
 (let (($x4781 (not $x4760)))
 (let ((?x3780 (* (- 1) d!1)))
 (let ((?x2273 (+ (- 2) ?x3780 q!3 ?x4556 ?x2571)))
 (let ((?x2633 (+ (- 4) q!3)))
 (let ((?x573 (* (- 1) (* d00 d00 q00 ?x2633 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2))))
 (let ((?x3282 (+ (* 8 (* r00 ?x2633 ?x2633 ?x2273 ?x2273)) (* (- 4) (* d00 x00 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273)) (* (- 8) (* r00 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273)) (* 2 (* ?x2633 ?x2633 ?x2633 ?x2577 ?x2273 ?x2273)) (* (- 2) (* d00 q00 ?x2633 ?x2633 ?x2273 ?x2273)) (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273) (* (- 4) (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 ?x2273 r!2)) (* (- 8) (* r00 ?x2633 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2)) (* (- 4) (* ?x2633 ?x2633 ?x2577 ?x2273 ?x2273 r!2)) (* 4 (* d00 r00 ?x2633 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2)) (* (- 1) (* ?x2633 ?x2633 ?x2633 ?x2577 ?x2577 ?x2273 ?x2273)) ?x573 (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273)) (* 4 (* d00 x00 ?x2633 ?x2633 ?x2273 ?x2273)) (* (- 4) (* d00 x00 ?x2633 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2)) (* 4 (* ?x2633 ?x2633 ?x2577 ?x2273 ?x2273 ?x2273)) (* 4 (* d00 r00 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273)) (* 8 (* ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273)) (* 4 (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2 r!2)) (* (- 2) (* ?x2633 ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2)) (* (- 2) (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273)) (* 2 (* d00 q00 ?x2633 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2)) (* 8 (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 ?x2273 r!2)) (* ?x2633 ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 ?x2273 r!2) (* 2 (* d00 q00 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273)) (* (- 4) (* d00 r00 ?x2633 ?x2633 ?x2273 ?x2273)) (* (- 1) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273)) (* d00 d00 q00 ?x2633 ?x2633 ?x2273 ?x2273) (* (- 8) (* ?x2633 ?x2633 ?x2273 ?x2273 ?x2273)) (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2273 ?x2273 r!2)))))
 (let (($x3272 (= ?x3282 0)))
 (let ((?x1159 (+ q!3 ?x4556 ?x2571)))
 (let ((?x2722 (* (- 4) (* d00 x00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 q!3))))
 (let ((?x5410 (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 r!2))))
 (let ((?x3226 (* 32 (* q!3 q!3 r!2 r!2 x!0))))
 (let ((?x3655 (* 4 (* d00 r00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159))))
 (let ((?x3501 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 q!3 q!3)))
 (let ((?x612 (* (- 8) (* q!3 q!3 q!3 q!3 r!2))))
 (let ((?x3844 (* (- 2) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 q!3))))
 (let ((?x2466 (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 ?x1159 r!2 q!3))))
 (let ((?x3508 (* (- 8) (* q!3 q!3 r!2 x!0 x!0))))
 (let ((?x5407 (* 8 (* ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159))))
 (let ((?x4146 (* (- 2) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 q!3 q!3))))
 (let ((?x2515 (* (- 4) (* d00 x00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159))))
 (let ((?x5217 (* 2 (* d00 q00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159))))
 (let ((?x2107 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 q!3)))
 (let ((?x2524 (* 2 (* d00 q00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 q!3))))
 (let ((?x4039 (* 8 (* ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 ?x1159 r!2 q!3))))
 (let ((?x3672 (* (- 8) (* r00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 q!3))))
 (let ((?x933 (* (- 32) (* q!3 q!3 q!3 r!2 r!2))))
 (let ((?x5383 (* (- 32) (* q!3 q!3 r!2 r!2 r!2))))
 (let ((?x3590 (* (- 1) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 q!3))))
 (let ((?x3448 (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 r!2 q!3))))
 (let ((?x3116 (* 16 (* q!3 q!3 q!3 r!2 x!0))))
 (let ((?x3576 (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159))))
 (let ((?x1156 (* (- 8) (* r00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159))))
 (let ((?x2725 (* 4 (* d00 r00 ?x2577 ?x2577 ?x2577 ?x1159 ?x1159 ?x1159 r!2 q!3))))
 (let ((?x1531 (+ (* 2 (* d00 d00 q00 d!1 d!1 d!1 q!3 x!0)) (* (- 4) (* d00 d00 q00 d!1 d!1 d!1 r!2 r!2)) (* (- 16) (* r00 d00 q!3 q!3 r!2 r!2)) (* (- 6) (* d00 d00 q00 d!1 d!1 x!0 x!0)) ?x2725 (* (- 16) (* r00 q!3 q!3 q!3 x!0)) (* 24 (* d00 d00 q00 d!1 d!1 r!2 x!0)) ?x1156 (* 16 (* d!1 q!3 q!3 r!2 r!2 r!2)) (* (- 6) (* d00 d00 q00 d!1 d!1 q!3 q!3)) ?x3576 ?x3116 (* 8 (* r00 q!3 q!3 q!3 q!3)) (* 32 (* d00 d00 q00 r!2 x!0)) (* (- 8) (* d00 q00 q!3 q!3 q!3 r!2)) (* 12 (* d00 d00 q00 d!1 d!1 q!3 x!0)) (* 4 (* d00 q00 q!3 q!3 q!3 x!0)) (* (- 2) (* d00 q00 q!3 q!3 q!3 q!3)) (* 4 (* d00 d00 q00 q!3 q!3 r!2 r!2)) ?x3448 (* 10 (* d!1 q!3 q!3 q!3 x!0 x!0)) (* (- 8) (* d00 d00 q00 q!3 q!3)) (* 16 (* d00 d00 q00 q!3 x!0)) (* 16 (* d00 x00 q!3 q!3 r!2 r!2)) (* (- 1) (* d!1 d!1 q!3 q!3 q!3 q!3 q!3)) ?x3590 (* (- 32) (* r00 q!3 q!3 r!2 x!0)) (* 4 (* d00 x00 q!3 q!3 x!0 x!0)) (* 8 (* d00 q00 q!3 q!3 r!2 x!0)) (* 4 (* d00 d00 q00 q!3 q!3 q!3 r!2)) (* 4 (* d00 x00 q!3 q!3 q!3 q!3)) ?x5383 (* d00 d00 q00 q!3 q!3 x!0 x!0) (* d00 d00 q00 q!3 q!3 q!3 q!3) (* (- 2) (* d00 d00 q00 q!3 q!3 q!3 x!0)) (* (- 4) (* d00 d00 q00 q!3 q!3 r!2 x!0)) (* (- 4) (* d00 d00 q00 d!1 d!1 d!1 q!3 r!2)) (* (- 48) (* d00 d00 q00 d!1 r!2 r!2)) (* (- 8) (* d00 q00 q!3 q!3 r!2 r!2)) (* (- 16) (* d00 x00 q!3 q!3 r!2 x!0)) (* 48 (* d00 d00 q00 d!1 r!2 x!0)) (* (- 16) (* r00 d00 q!3 q!3 q!3 r!2)) (* (- 32) (* d00 d00 q00 r!2 r!2)) (* 32 (* r00 q!3 q!3 r!2 r!2)) (* (- 4) (* d!1 d!1 q!3 q!3 q!3 r!2 r!2)) (* (- 4) (* d!1 d!1 q!3 q!3 q!3 q!3 r!2)) (* (- 8) (* d00 d00 q00 x!0 x!0)) (* 8 (* r00 d00 q!3 q!3 q!3 x!0)) ?x933 ?x3672 (* (- 1) (* d!1 d!1 q!3 q!3 q!3 x!0 x!0)) ?x4039 ?x2524 ?x2107 (* 32 (* r00 q!3 q!3 q!3 r!2)) (* (- 12) (* d00 d00 q00 d!1 q!3 q!3)) (* (- 48) (* d00 d00 q00 d!1 q!3 r!2)) ?x5217 ?x2515 (* 24 (* d!1 q!3 q!3 q!3 r!2 r!2)) (* (- 32) (* d00 d00 q00 q!3 r!2)) (* 12 (* d!1 q!3 q!3 q!3 q!3 r!2)) (* 8 (* r00 q!3 q!3 x!0 x!0)) (* 2 (* d!1 q!3 q!3 q!3 q!3 q!3)) (* 16 (* d00 x00 q!3 q!3 q!3 r!2)) (* (- 32) (* d!1 q!3 q!3 r!2 r!2 x!0)) ?x4146 ?x5407 (* (- 24) (* d00 d00 q00 d!1 d!1 r!2 r!2)) ?x3508 ?x2466 ?x3844 (* (- 2) (* d00 q00 q!3 q!3 x!0 x!0)) ?x612 ?x3501 (* (- 12) (* d00 d00 q00 d!1 x!0 x!0)) (* (- 4) (* d!1 q!3 q!3 x!0 x!0 x!0)) (* 2 (* d!1 d!1 q!3 q!3 q!3 q!3 x!0)) (* 16 (* r00 d00 q!3 q!3 r!2 x!0)) (* 24 (* d00 d00 q00 d!1 q!3 x!0)) ?x3655 ?x3226 (* 4 (* d!1 d!1 q!3 q!3 q!3 r!2 x!0)) (* 4 (* d00 d00 q00 d!1 d!1 d!1 r!2 x!0)) (* 20 (* d!1 q!3 q!3 r!2 x!0 x!0)) (* (- 32) (* d!1 q!3 q!3 q!3 r!2 x!0)) (* (- 4) (* r00 d00 q!3 q!3 q!3 q!3)) (* (- 8) (* d!1 q!3 q!3 q!3 q!3 x!0)) (* (- 1) (* d00 d00 q00 d!1 d!1 d!1 q!3 q!3)) (* (- 8) (* d00 x00 q!3 q!3 q!3 x!0)) (* (- 1) (* d00 d00 q00 d!1 d!1 d!1 x!0 x!0)) (* (- 4) (* r00 d00 q!3 q!3 x!0 x!0)) ?x5410 ?x2722 (* (- 24) (* d00 d00 q00 d!1 d!1 q!3 r!2)))))
 (let (($x4821 (= ?x1531 0)))
 (let ((?x1116 (+ 2 d!1 q!3 ?x4556 ?x2571)))
 (let ((?x4143 (+ 4 q!3)))
 (let ((?x2755 (* (- 1) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 r!2))))
 (let ((?x2586 (+ (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116) (* d00 d00 q00 ?x4143 ?x4143 ?x1116 ?x1116) (* 4 (* ?x2577 ?x4143 ?x4143 ?x1116 ?x1116 ?x1116)) (* 4 (* d00 r00 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 r!2)) (* (- 8) (* r00 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 r!2)) (* 2 (* d00 q00 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 r!2)) (* 2 (* d00 q00 ?x2577 ?x2577 ?x2577 ?x1116 ?x1116)) (* (- 2) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116)) (* (- 4) (* d00 x00 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 r!2)) (* 8 (* ?x2577 ?x2577 ?x2577 ?x1116 ?x1116 ?x1116)) (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1116 ?x1116 r!2)) (* 4 (* d00 x00 ?x4143 ?x4143 ?x1116 ?x1116)) (* (- 1) (* ?x2577 ?x2577 ?x4143 ?x4143 ?x4143 ?x1116 ?x1116)) (* 8 (* ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 ?x1116 r!2)) (* (- 1) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x1116 ?x1116)) (* (- 4) (* ?x2577 ?x4143 ?x4143 ?x1116 ?x1116 r!2)) (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1116 ?x1116 ?x1116)) (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 ?x1116 r!2)) (* (- 4) (* d00 r00 ?x4143 ?x4143 ?x1116 ?x1116)) (* (- 2) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x4143 ?x1116 ?x1116 ?x1116 r!2)) (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x1116 ?x1116 ?x1116 r!2 r!2)) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x4143 ?x1116 ?x1116 ?x1116 r!2) (* (- 8) (* ?x4143 ?x4143 ?x1116 ?x1116 ?x1116)) (* 2 (* ?x2577 ?x4143 ?x4143 ?x4143 ?x1116 ?x1116)) (* (- 4) (* d00 x00 ?x2577 ?x2577 ?x2577 ?x1116 ?x1116)) (* 4 (* d00 r00 ?x2577 ?x2577 ?x2577 ?x1116 ?x1116)) (* 8 (* r00 ?x4143 ?x4143 ?x1116 ?x1116)) ?x2755 (* (- 8) (* r00 ?x2577 ?x2577 ?x2577 ?x1116 ?x1116)) (* (- 2) (* d00 q00 ?x4143 ?x4143 ?x1116 ?x1116)))))
 (let (($x5937 (= ?x2586 0)))
 (let (($x819 (not $x5937)))
 (let (($x4877 (or $x819 (not $x4821) (not $x3272) $x4781)))
 (let (($x502 (and $x1906 $x4877)))
 (let ((?x2337 (+ (- 4) q!3 ?x4556 ?x2571 ?x1972)))
 (let ((?x5336 (* (- 1) (* d00 d00 q00 ?x4140 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2))))
 (let ((?x3306 (+ (* 4 (* d00 x00 ?x4140 ?x4140 ?x2337 ?x2337)) (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 r!2)) (* 4 (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2 r!2)) (* d00 d00 q00 ?x4140 ?x4140 ?x2337 ?x2337) (* (- 2) (* ?x4140 ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2)) (* (- 1) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337)) ?x5336 (* (- 4) (* ?x4140 ?x4140 ?x2577 ?x2337 ?x2337 r!2)) (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337) (* (- 4) (* d00 x00 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337)) (* (- 8) (* r00 ?x4140 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2)) (* 4 (* ?x4140 ?x4140 ?x2577 ?x2337 ?x2337 ?x2337)) (* (- 4) (* d00 x00 ?x4140 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2)) (* 8 (* r00 ?x4140 ?x4140 ?x2337 ?x2337)) (* (- 1) (* ?x4140 ?x4140 ?x4140 ?x2577 ?x2577 ?x2337 ?x2337)) (* (- 8) (* ?x4140 ?x4140 ?x2337 ?x2337 ?x2337)) (* (- 2) (* d00 q00 ?x4140 ?x4140 ?x2337 ?x2337)) (* 4 (* d00 r00 ?x4140 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2)) (* 2 (* d00 q00 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337)) (* (- 4) (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 ?x2337 r!2)) (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337)) (* (- 4) (* d00 r00 ?x4140 ?x4140 ?x2337 ?x2337)) (* (- 2) (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337)) (* 4 (* d00 r00 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337)) (* 8 (* ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337)) (* 8 (* ?x4140 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 ?x2337 r!2)) (* ?x4140 ?x4140 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2) (* (- 8) (* r00 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337)) (* 2 (* ?x4140 ?x4140 ?x4140 ?x2577 ?x2337 ?x2337)) (* 2 (* d00 q00 ?x4140 ?x2577 ?x2577 ?x2577 ?x2337 ?x2337 ?x2337 r!2)))))
 (let ((?x5411 (+ (* 4 (* q!3 q!3 q!3 x!0 d00 q00)) ?x3576 (* 8 (* q!3 q!3 q!3 x!0 r00 d00)) (* (- 2) (* q!3 q!3 q!3 q!3 d00 q00)) ?x1156 ?x3590 ?x4039 (* (- 16) (* q!3 q!3 q!3 r!2 r00 d00)) ?x2524 (* (- 4) (* q!3 q!3 q!3 q!3 r00 d00)) (* 20 (* q!3 q!3 r!2 x!0 x!0 d!1)) ?x2725 (* 16 (* q!3 q!3 r!2 x!0 r00 d00)) ?x3672 ?x2722 ?x3844 ?x2107 (* (- 24) (* r!2 r!2 d00 d00 q00 d!1 d!1)) (* (- 48) (* r!2 r!2 d00 d00 q00 d!1)) (* 48 (* r!2 x!0 d00 d00 q00 d!1)) (* (- 4) (* q!3 r!2 d00 d00 q00 d!1 d!1 d!1)) ?x2466 (* 2 (* q!3 x!0 d00 d00 q00 d!1 d!1 d!1)) (* (- 6) (* q!3 q!3 d00 d00 q00 d!1 d!1)) (* (- 1) (* q!3 q!3 d00 d00 q00 d!1 d!1 d!1)) (* (- 48) (* q!3 r!2 d00 d00 q00 d!1)) (* (- 12) (* q!3 q!3 d00 d00 q00 d!1)) ?x2515 (* (- 24) (* q!3 r!2 d00 d00 q00 d!1 d!1)) (* 24 (* q!3 x!0 d00 d00 q00 d!1)) (* 12 (* q!3 x!0 d00 d00 q00 d!1 d!1)) (* 16 (* q!3 q!3 r!2 r!2 d00 x00)) (* (- 4) (* r!2 r!2 d00 d00 q00 d!1 d!1 d!1)) (* 24 (* r!2 x!0 d00 d00 q00 d!1 d!1)) (* 2 (* q!3 q!3 q!3 q!3 x!0 d!1 d!1)) (* (- 4) (* q!3 q!3 x!0 x!0 x!0 d!1)) (* (- 16) (* q!3 q!3 r!2 r!2 r00 d00)) (* 8 (* q!3 q!3 q!3 q!3 r00)) (* (- 1) (* q!3 q!3 q!3 x!0 x!0 d!1 d!1)) (* (- 8) (* q!3 q!3 q!3 r!2 d00 q00)) ?x3655 (* (- 8) (* q!3 q!3 d00 d00 q00)) (* 4 (* q!3 q!3 r!2 r!2 d00 d00 q00)) (* 16 (* q!3 x!0 d00 d00 q00)) (* 16 (* q!3 q!3 r!2 r!2 r!2 d!1)) (* 10 (* q!3 q!3 q!3 x!0 x!0 d!1)) (* (- 8) (* x!0 x!0 d00 d00 q00)) (* 32 (* q!3 q!3 q!3 r!2 r00)) (* 4 (* q!3 q!3 q!3 r!2 x!0 d!1 d!1)) ?x612 (* (- 16) (* q!3 q!3 q!3 x!0 r00)) (* 24 (* q!3 q!3 q!3 r!2 r!2 d!1)) (* (- 4) (* q!3 q!3 x!0 x!0 r00 d00)) ?x5217 (* (- 32) (* q!3 q!3 q!3 r!2 x!0 d!1)) (* (- 32) (* q!3 q!3 r!2 r!2 x!0 d!1)) (* (- 8) (* q!3 q!3 q!3 q!3 x!0 d!1)) (* (- 12) (* x!0 x!0 d00 d00 q00 d!1)) (* (- 8) (* q!3 q!3 r!2 r!2 d00 q00)) (* (- 6) (* x!0 x!0 d00 d00 q00 d!1 d!1)) (* (- 1) (* x!0 x!0 d00 d00 q00 d!1 d!1 d!1)) (* (- 2) (* q!3 q!3 x!0 x!0 d00 q00)) (* 32 (* r!2 x!0 d00 d00 q00)) (* (- 1) (* q!3 q!3 q!3 q!3 q!3 d!1 d!1)) ?x3226 ?x3448 (* (- 32) (* q!3 q!3 r!2 x!0 r00)) (* 4 (* q!3 q!3 q!3 q!3 d00 x00)) (* (- 16) (* q!3 q!3 r!2 x!0 d00 x00)) ?x5383 (* 8 (* q!3 q!3 r!2 x!0 d00 q00)) (* 4 (* q!3 q!3 x!0 x!0 d00 x00)) ?x3501 ?x4146 (* 8 (* q!3 q!3 x!0 x!0 r00)) (* 32 (* q!3 q!3 r!2 r!2 r00)) (* 2 (* q!3 q!3 q!3 q!3 q!3 d!1)) (* 12 (* q!3 q!3 q!3 q!3 r!2 d!1)) ?x3508 (* (- 4) (* q!3 q!3 q!3 r!2 r!2 d!1 d!1)) ?x3116 ?x933 (* (- 4) (* q!3 q!3 q!3 q!3 r!2 d!1 d!1)) (* (- 32) (* r!2 r!2 d00 d00 q00)) (* (- 32) (* q!3 r!2 d00 d00 q00)) (* 16 (* q!3 q!3 q!3 r!2 d00 x00)) (* (- 8) (* q!3 q!3 q!3 x!0 d00 x00)) (* 4 (* r!2 x!0 d00 d00 q00 d!1 d!1 d!1)) ?x5407 ?x5410 (* q!3 q!3 q!3 q!3 d00 d00 q00) (* 4 (* q!3 q!3 q!3 r!2 d00 d00 q00)) (* (- 2) (* q!3 q!3 q!3 x!0 d00 d00 q00)) (* (- 4) (* q!3 q!3 r!2 x!0 d00 d00 q00)) (* q!3 q!3 x!0 x!0 d00 d00 q00))))
 (let ((?x3623 (+ 2 q!3 ?x4556 ?x2571 d!1)))
 (let ((?x2603 (* (- 1) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x4143 ?x3623 ?x3623 ?x3623 r!2))))
 (let ((?x2528 (+ (* 4 (* d00 x00 ?x2577 ?x2577 ?x2577 ?x3623 ?x3623)) ?x2603 (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 ?x3623 r!2)) (* (- 2) (* d00 q00 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 r!2)) (* 4 (* d00 x00 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 r!2)) (* (- 4) (* d00 r00 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 r!2)) (* 4 (* ?x2577 ?x4143 ?x4143 ?x3623 ?x3623 r!2)) (* 8 (* r00 ?x2577 ?x2577 ?x2577 ?x3623 ?x3623)) (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x3623 ?x3623 r!2)) (* (- 8) (* ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 ?x3623 r!2)) (* 8 (* r00 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 r!2)) (* (- 4) (* ?x2577 ?x4143 ?x4143 ?x3623 ?x3623 ?x3623)) (* ?x2577 ?x2577 ?x4143 ?x4143 ?x4143 ?x3623 ?x3623) (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x3623 ?x3623 ?x3623)) (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 r!2 r!2)) (* 4 (* d00 r00 ?x4143 ?x4143 ?x3623 ?x3623)) (* (- 1) (* d00 d00 q00 ?x4143 ?x4143 ?x3623 ?x3623)) (* (- 2) (* d00 q00 ?x2577 ?x2577 ?x2577 ?x3623 ?x3623)) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x3623 ?x3623) (* (- 8) (* r00 ?x4143 ?x4143 ?x3623 ?x3623)) (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623 ?x3623 r!2) (* 2 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623)) (* (- 1) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x3623 ?x3623)) (* 8 (* ?x4143 ?x4143 ?x3623 ?x3623 ?x3623)) (* (- 4) (* d00 x00 ?x4143 ?x4143 ?x3623 ?x3623)) (* (- 2) (* ?x2577 ?x4143 ?x4143 ?x4143 ?x3623 ?x3623)) (* 2 (* d00 q00 ?x4143 ?x4143 ?x3623 ?x3623)) (* (- 8) (* ?x2577 ?x2577 ?x2577 ?x3623 ?x3623 ?x3623)) (* 2 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x4143 ?x4143 ?x3623 ?x3623 ?x3623 r!2)) (* (- 4) (* d00 r00 ?x2577 ?x2577 ?x2577 ?x3623 ?x3623)))))
 (let ((?x1211 (+ (- 2) q!3 ?x4556 ?x2571 ?x3780)))
 (let ((?x3091 (* (- 1) (* ?x2633 ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2))))
 (let ((?x963 (+ (* d00 d00 q00 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211) (* (- 8) (* ?x2633 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 ?x1211 r!2)) (* (- 2) (* ?x2633 ?x2633 ?x2633 ?x2577 ?x1211 ?x1211)) (* (- 4) (* d00 r00 ?x2633 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2)) (* (- 8) (* ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211)) (* (- 4) (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2 r!2)) (* (- 2) (* d00 q00 ?x2633 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2)) (* 4 (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211)) (* (- 4) (* ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 r!2)) (* d00 d00 q00 ?x2633 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2) (* 2 (* d00 q00 ?x2633 ?x2633 ?x1211 ?x1211)) (* 4 (* d00 r00 ?x2633 ?x2633 ?x1211 ?x1211)) (* 4 (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 ?x1211 r!2)) (* 4 (* ?x2633 ?x2633 ?x2577 ?x1211 ?x1211 r!2)) (* (- 1) (* d00 d00 q00 ?x2633 ?x2633 ?x1211 ?x1211)) (* 2 (* ?x2633 ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2)) ?x3091 (* (- 4) (* d00 r00 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211)) (* (- 4) (* d00 x00 ?x2633 ?x2633 ?x1211 ?x1211)) (* (- 2) (* d00 q00 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211)) (* 4 (* d00 x00 ?x2633 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2)) (* 2 (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211)) (* (- 1) (* ?x2633 ?x2577 ?x2577 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211)) (* (- 8) (* r00 ?x2633 ?x2633 ?x1211 ?x1211)) (* 8 (* r00 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211)) (* 8 (* ?x2633 ?x2633 ?x1211 ?x1211 ?x1211)) (* 8 (* r00 ?x2633 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211 ?x1211 r!2)) (* ?x2633 ?x2633 ?x2633 ?x2577 ?x2577 ?x1211 ?x1211) (* (- 4) (* ?x2633 ?x2633 ?x2577 ?x1211 ?x1211 ?x1211)) (* 4 (* d00 x00 ?x2577 ?x2577 ?x2577 ?x1211 ?x1211)))))
 (let (($x3058 (or (not (= ?x963 0)) (not (= ?x2528 0)) (not (= ?x5411 0)) (not (= ?x3306 0)))))
 (let ((?x435 (* r00 d00)))
 (let ((?x436 (* 4 ?x435)))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x2572 (+ (* 8 r!2) ?x300 ?x348 ?x332 ?x398 ?x436 (* 4 (* x!0 d!1)) (* (- 4) (* r!2 d!1)) (* (- 2) (* q!3 d!1)) (* q!3 d!1 d!1))))
 (let (($x3430 (and (= ?x2572 0) $x3058)))
 (let (($x3444 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x6208 (* (- 2) d)))
 (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x3012 (+ (- 4) q ?x233 ?x312 ?x6208)))
 (let ((?x450 (+ 2 d)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x1887 (* (- 1) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r))))
 (let ((?x3224 (+ (* 4 (* d00 x00 ?x6207 ?x6207 ?x3012 ?x3012)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 r)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r r)) (* d00 d00 q00 ?x6207 ?x6207 ?x3012 ?x3012) (* (- 2) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) ?x1887 (* (- 4) (* ?x6207 ?x6207 ?x450 ?x3012 ?x3012 r)) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* (- 8) (* r00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* 4 (* ?x6207 ?x6207 ?x450 ?x3012 ?x3012 ?x3012)) (* (- 4) (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* 8 (* r00 ?x6207 ?x6207 ?x3012 ?x3012)) (* (- 1) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x3012 ?x3012)) (* (- 8) (* ?x6207 ?x6207 ?x3012 ?x3012 ?x3012)) (* (- 2) (* d00 q00 ?x6207 ?x6207 ?x3012 ?x3012)) (* 4 (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 ?x3012 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012)) (* (- 4) (* d00 r00 ?x6207 ?x6207 ?x3012 ?x3012)) (* (- 2) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* 8 (* ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012)) (* 8 (* ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 ?x3012 r)) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* 2 (* ?x6207 ?x6207 ?x6207 ?x450 ?x3012 ?x3012)) (* 2 (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)))))
 (let ((?x6081 (* q q x x d00 d00 q00)))
 (let ((?x6072 (* q q q q d00 d00 q00)))
 (let ((?x3736 (+ q ?x233 ?x312)))
 (let ((?x6060 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 r)))
 (let ((?x3818 (* 2 (* q q q q q d))))
 (let ((?x4442 (* (- 32) (* q q r r r))))
 (let ((?x1452 (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q))))
 (let ((?x4444 (+ (* 4 (* q q q x d00 q00)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* 8 (* q q q x r00 d00)) (* (- 2) (* q q q q d00 q00)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) ?x1452 (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* (- 16) (* q q q r r00 d00)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 4) (* q q q q r00 d00)) (* 20 (* q q r x x d)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* 16 (* q q r x r00 d00)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q) (* (- 24) (* r r d00 d00 q00 d d)) (* (- 48) (* r r d00 d00 q00 d)) (* 48 (* r x d00 d00 q00 d)) (* (- 4) (* q r d00 d00 q00 d d d)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* 2 (* q x d00 d00 q00 d d d)) (* (- 6) (* q q d00 d00 q00 d d)) (* (- 1) (* q q d00 d00 q00 d d d)) (* (- 48) (* q r d00 d00 q00 d)) (* (- 12) (* q q d00 d00 q00 d)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 24) (* q r d00 d00 q00 d d)) (* 24 (* q x d00 d00 q00 d)) (* 12 (* q x d00 d00 q00 d d)) (* 16 (* q q r r d00 x00)) (* (- 4) (* r r d00 d00 q00 d d d)) (* 24 (* r x d00 d00 q00 d d)) (* 2 (* q q q q x d d)) (* (- 4) (* q q x x x d)) (* (- 16) (* q q r r r00 d00)) (* 8 (* q q q q r00)) (* (- 1) (* q q q x x d d)) (* (- 8) (* q q q r d00 q00)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 8) (* q q d00 d00 q00)) (* 4 (* q q r r d00 d00 q00)) (* 16 (* q x d00 d00 q00)) (* 16 (* q q r r r d)) (* 10 (* q q q x x d)) (* (- 8) (* x x d00 d00 q00)) (* 32 (* q q q r r00)) (* 4 (* q q q r x d d)) (* (- 8) (* q q q q r)) (* (- 16) (* q q q x r00)) (* 24 (* q q q r r d)) (* (- 4) (* q q x x r00 d00)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 32) (* q q q r x d)) (* (- 32) (* q q r r x d)) (* (- 8) (* q q q q x d)) (* (- 12) (* x x d00 d00 q00 d)) (* (- 8) (* q q r r d00 q00)) (* (- 6) (* x x d00 d00 q00 d d)) (* (- 1) (* x x d00 d00 q00 d d d)) (* (- 2) (* q q x x d00 q00)) (* 32 (* r x d00 d00 q00)) (* (- 1) (* q q q q q d d)) (* 32 (* q q r r x)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r r q)) (* (- 32) (* q q r x r00)) (* 4 (* q q q q d00 x00)) (* (- 16) (* q q r x d00 x00)) ?x4442 (* 8 (* q q r x d00 q00)) (* 4 (* q q x x d00 x00)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q)) (* 8 (* q q x x r00)) (* 32 (* q q r r r00)) ?x3818 (* 12 (* q q q q r d)) (* (- 8) (* q q r x x)) (* (- 4) (* q q q r r d d)) (* 16 (* q q q r x)) (* (- 32) (* q q q r r)) (* (- 4) (* q q q q r d d)) (* (- 32) (* r r d00 d00 q00)) (* (- 32) (* q r d00 d00 q00)) (* 16 (* q q q r d00 x00)) (* (- 8) (* q q q x d00 x00)) (* 4 (* r x d00 d00 q00 d d d)) (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* 4 ?x6060) ?x6072 (* 4 (* q q q r d00 d00 q00)) (* (- 2) (* q q q x d00 d00 q00)) (* (- 4) (* q q r x d00 d00 q00)) ?x6081)))
 (let ((?x2835 (+ 2 q ?x233 ?x312 d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x5377 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2835 ?x2835 ?x2835 r))))
 (let ((?x2293 (+ (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2835 ?x2835)) ?x5377 (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 ?x2835 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* 4 (* ?x450 ?x6108 ?x6108 ?x2835 ?x2835 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2835 ?x2835)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2835 ?x2835 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 ?x2835 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* (- 4) (* ?x450 ?x6108 ?x6108 ?x2835 ?x2835 ?x2835)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x2835 ?x2835) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2835 ?x2835 ?x2835)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r r)) (* 4 (* d00 r00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2835 ?x2835)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2835 ?x2835) (* (- 8) (* r00 ?x6108 ?x6108 ?x2835 ?x2835)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835)) (* 8 (* ?x6108 ?x6108 ?x2835 ?x2835 ?x2835)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x2835 ?x2835)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 8) (* ?x450 ?x450 ?x450 ?x2835 ?x2835 ?x2835)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2835 ?x2835)))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x3219 (+ (- 2) q ?x233 ?x312 ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x3369 (* (- 1) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r))))
 (let ((?x3071 (+ (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3219 ?x3219) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 ?x3219 r)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x3219 ?x3219)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r r)) (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 r)) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r) (* 2 (* d00 q00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 4 (* d00 r00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 ?x3219 r)) (* 4 (* ?x6157 ?x6157 ?x450 ?x3219 ?x3219 r)) (* (- 1) (* d00 d00 q00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) ?x3369 (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x3219 ?x3219)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* (- 1) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* (- 8) (* r00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* 8 (* ?x6157 ?x6157 ?x3219 ?x3219 ?x3219)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x3219 ?x3219) (* (- 4) (* ?x6157 ?x6157 ?x450 ?x3219 ?x3219 ?x3219)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x3219 ?x3219)))))
 (let (($x2325 (or (not (= ?x3071 0)) (not (= ?x2293 0)) (not (= ?x4444 0)) (not (= ?x3224 0)))))
 (let ((?x6029 (* q d d)))
 (let ((?x5172 (* (- 2) (* q d))))
 (let ((?x5543 (* (- 4) (* r d))))
 (let ((?x3262 (* 4 (* x d))))
 (let ((?x435 (* r00 d00)))
 (let ((?x436 (* 4 ?x435)))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (and (= (+ ?x5568 ?x300 ?x348 ?x332 ?x398 ?x436 ?x3262 ?x5543 ?x5172 ?x6029) 0) $x2325))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let (($x391 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x4940 (+ ?x233 ?x312 q)))
 (let ((?x1876 (* d00 r00 ?x4940 ?x4940 q q)))
 (let ((?x3782 (* d00 d00 q00 ?x4940 ?x4940 q q)))
 (let ((?x450 (+ 2 d)))
 (let ((?x4088 (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)))
 (let ((?x4524 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)))
 (let ((?x4239 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)))
 (let ((?x2638 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)))
 (let ((?x365 (+ (* 4 (* ?x450 ?x4940 ?x4940 ?x4940 q q)) (* (- 1) (* ?x450 ?x450 ?x4940 ?x4940 q q q)) (* 8 (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 r)) ?x2638 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) ?x4239 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)) (* 8 (* r00 ?x4940 ?x4940 q q)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 4) (* ?x450 ?x4940 ?x4940 r q q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r r q)) (* 4 (* d00 x00 ?x4940 ?x4940 q q)) (* (- 2) (* d00 q00 ?x4940 ?x4940 q q)) (* (- 1) ?x4524) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* 2 (* ?x450 ?x4940 ?x4940 q q q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 8) (* ?x4940 ?x4940 ?x4940 q q)) (* 8 ?x4088) ?x3782 (* (- 4) ?x1876))))
 (let ((?x727 (+ 2 ?x233 ?x312 q d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x2190 (* d00 r00 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x2628 (* d00 d00 q00 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x1541 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x2279 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x1670 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)))
 (let ((?x4090 (+ (* 4 (* ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* (- 1) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* 8 (* ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 r)) ?x1670 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x727 ?x727)) ?x2279 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)) (* 8 (* r00 ?x6108 ?x6108 ?x727 ?x727)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 4) (* ?x450 ?x6108 ?x6108 ?x727 ?x727 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r r)) (* 4 (* d00 x00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 2) (* d00 q00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 1) ?x1541) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* 2 (* ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* 8 (* ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) ?x2628 (* (- 4) ?x2190))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x3518 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x4729 (* d00 r00 ?x6157 ?x6157 ?x3518 ?x3518)))
 (let ((?x4604 (* d00 d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)))
 (let ((?x950 (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x5102 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x5218 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)))
 (let ((?x3273 (+ (* 4 (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 ?x3518)) (* (- 1) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x3518 ?x3518)) (* 8 (* ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 r)) ?x5218 (* (- 2) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) ?x5102 (* (- 2) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 8 (* r00 ?x6157 ?x6157 ?x3518 ?x3518)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 r)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r r)) (* 4 (* d00 x00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 2) (* d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 1) ?x950) (* 2 (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* 2 (* ?x6157 ?x6157 ?x6157 ?x450 ?x3518 ?x3518)) (* (- 4) (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 4 (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 8) (* r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* ?x6157 ?x6157 ?x3518 ?x3518 ?x3518)) (* 8 (* ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) ?x4604 (* (- 4) ?x4729))))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x3019 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x3117 (* d00 r00 ?x6207 ?x6207 ?x3019 ?x3019)))
 (let ((?x3500 (* d00 d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)))
 (let ((?x3423 (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3065 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3323 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)))
 (let ((?x3178 (+ (* 4 (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 ?x3019)) (* (- 1) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x3019 ?x3019)) (* 8 (* ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 r)) ?x3323 (* (- 2) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) ?x3065 (* (- 2) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 8 (* r00 ?x6207 ?x6207 ?x3019 ?x3019)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 r)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r r)) (* 4 (* d00 x00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 2) (* d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 1) ?x3423) (* 2 (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* 2 (* ?x6207 ?x6207 ?x6207 ?x450 ?x3019 ?x3019)) (* (- 4) (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 4 (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 8) (* r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* ?x6207 ?x6207 ?x3019 ?x3019 ?x3019)) (* 8 (* ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) ?x3500 (* (- 4) ?x3117))))
 (let (($x390 (or (not (= ?x3178 0)) (not (= ?x3273 0)) (not (= ?x4090 0)) (not (= ?x365 0)))))
 (let ((?x4523 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x3262 (* 4 (* x d))))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let ((?x3251 (+ ?x5568 ?x300 ?x3262 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4523)))
 (let (($x3212 (= ?x3251 0)))
 (and $x3212 $x390))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x1984 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x6208 (* (- 2) d)))
 (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x3012 (+ (- 4) q ?x233 ?x312 ?x6208)))
 (let ((?x450 (+ 2 d)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x1887 (* (- 1) (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r))))
 (let ((?x3224 (+ (* 4 (* d00 x00 ?x6207 ?x6207 ?x3012 ?x3012)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 r)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r r)) (* d00 d00 q00 ?x6207 ?x6207 ?x3012 ?x3012) (* (- 2) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) ?x1887 (* (- 4) (* ?x6207 ?x6207 ?x450 ?x3012 ?x3012 r)) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* (- 8) (* r00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* 4 (* ?x6207 ?x6207 ?x450 ?x3012 ?x3012 ?x3012)) (* (- 4) (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* 8 (* r00 ?x6207 ?x6207 ?x3012 ?x3012)) (* (- 1) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x3012 ?x3012)) (* (- 8) (* ?x6207 ?x6207 ?x3012 ?x3012 ?x3012)) (* (- 2) (* d00 q00 ?x6207 ?x6207 ?x3012 ?x3012)) (* 4 (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 ?x3012 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012)) (* (- 4) (* d00 r00 ?x6207 ?x6207 ?x3012 ?x3012)) (* (- 2) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* 8 (* ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012)) (* 8 (* ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 ?x3012 r)) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3012 ?x3012)) (* 2 (* ?x6207 ?x6207 ?x6207 ?x450 ?x3012 ?x3012)) (* 2 (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3012 ?x3012 ?x3012 r)))))
 (let ((?x6081 (* q q x x d00 d00 q00)))
 (let ((?x6072 (* q q q q d00 d00 q00)))
 (let ((?x3736 (+ q ?x233 ?x312)))
 (let ((?x6060 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 r)))
 (let ((?x3818 (* 2 (* q q q q q d))))
 (let ((?x4442 (* (- 32) (* q q r r r))))
 (let ((?x1452 (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q))))
 (let ((?x4444 (+ (* 4 (* q q q x d00 q00)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* 8 (* q q q x r00 d00)) (* (- 2) (* q q q q d00 q00)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) ?x1452 (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* (- 16) (* q q q r r00 d00)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 4) (* q q q q r00 d00)) (* 20 (* q q r x x d)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* 16 (* q q r x r00 d00)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q)) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 q) (* (- 24) (* r r d00 d00 q00 d d)) (* (- 48) (* r r d00 d00 q00 d)) (* 48 (* r x d00 d00 q00 d)) (* (- 4) (* q r d00 d00 q00 d d d)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 ?x3736 r q)) (* 2 (* q x d00 d00 q00 d d d)) (* (- 6) (* q q d00 d00 q00 d d)) (* (- 1) (* q q d00 d00 q00 d d d)) (* (- 48) (* q r d00 d00 q00 d)) (* (- 12) (* q q d00 d00 q00 d)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 24) (* q r d00 d00 q00 d d)) (* 24 (* q x d00 d00 q00 d)) (* 12 (* q x d00 d00 q00 d d)) (* 16 (* q q r r d00 x00)) (* (- 4) (* r r d00 d00 q00 d d d)) (* 24 (* r x d00 d00 q00 d d)) (* 2 (* q q q q x d d)) (* (- 4) (* q q x x x d)) (* (- 16) (* q q r r r00 d00)) (* 8 (* q q q q r00)) (* (- 1) (* q q q x x d d)) (* (- 8) (* q q q r d00 q00)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 8) (* q q d00 d00 q00)) (* 4 (* q q r r d00 d00 q00)) (* 16 (* q x d00 d00 q00)) (* 16 (* q q r r r d)) (* 10 (* q q q x x d)) (* (- 8) (* x x d00 d00 q00)) (* 32 (* q q q r r00)) (* 4 (* q q q r x d d)) (* (- 8) (* q q q q r)) (* (- 16) (* q q q x r00)) (* 24 (* q q q r r d)) (* (- 4) (* q q x x r00 d00)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3736 ?x3736)) (* (- 32) (* q q q r x d)) (* (- 32) (* q q r r x d)) (* (- 8) (* q q q q x d)) (* (- 12) (* x x d00 d00 q00 d)) (* (- 8) (* q q r r d00 q00)) (* (- 6) (* x x d00 d00 q00 d d)) (* (- 1) (* x x d00 d00 q00 d d d)) (* (- 2) (* q q x x d00 q00)) (* 32 (* r x d00 d00 q00)) (* (- 1) (* q q q q q d d)) (* 32 (* q q r r x)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r r q)) (* (- 32) (* q q r x r00)) (* 4 (* q q q q d00 x00)) (* (- 16) (* q q r x d00 x00)) ?x4442 (* 8 (* q q r x d00 q00)) (* 4 (* q q x x d00 x00)) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q) (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736 r q q)) (* 8 (* q q x x r00)) (* 32 (* q q r r r00)) ?x3818 (* 12 (* q q q q r d)) (* (- 8) (* q q r x x)) (* (- 4) (* q q q r r d d)) (* 16 (* q q q r x)) (* (- 32) (* q q q r r)) (* (- 4) (* q q q q r d d)) (* (- 32) (* r r d00 d00 q00)) (* (- 32) (* q r d00 d00 q00)) (* 16 (* q q q r d00 x00)) (* (- 8) (* q q q x d00 x00)) (* 4 (* r x d00 d00 q00 d d d)) (* 8 (* ?x450 ?x450 ?x450 ?x3736 ?x3736 ?x3736)) (* 4 ?x6060) ?x6072 (* 4 (* q q q r d00 d00 q00)) (* (- 2) (* q q q x d00 d00 q00)) (* (- 4) (* q q r x d00 d00 q00)) ?x6081)))
 (let ((?x2835 (+ 2 q ?x233 ?x312 d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x5377 (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2835 ?x2835 ?x2835 r))))
 (let ((?x2293 (+ (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x2835 ?x2835)) ?x5377 (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 ?x2835 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* 4 (* ?x450 ?x6108 ?x6108 ?x2835 ?x2835 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x2835 ?x2835)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x2835 ?x2835 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 ?x2835 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* (- 4) (* ?x450 ?x6108 ?x6108 ?x2835 ?x2835 ?x2835)) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x2835 ?x2835) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x2835 ?x2835 ?x2835)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r r)) (* 4 (* d00 r00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x2835 ?x2835)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x2835 ?x2835) (* (- 8) (* r00 ?x6108 ?x6108 ?x2835 ?x2835)) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835 ?x2835 r) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x2835 ?x2835)) (* 8 (* ?x6108 ?x6108 ?x2835 ?x2835 ?x2835)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x2835 ?x2835)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x2835 ?x2835)) (* (- 8) (* ?x450 ?x450 ?x450 ?x2835 ?x2835 ?x2835)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x2835 ?x2835 ?x2835 r)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x2835 ?x2835)))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x3219 (+ (- 2) q ?x233 ?x312 ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x3369 (* (- 1) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r))))
 (let ((?x3071 (+ (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3219 ?x3219) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 ?x3219 r)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x3219 ?x3219)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* (- 8) (* ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r r)) (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 r)) (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r) (* 2 (* d00 q00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 4 (* d00 r00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 ?x3219 r)) (* 4 (* ?x6157 ?x6157 ?x450 ?x3219 ?x3219 r)) (* (- 1) (* d00 d00 q00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) ?x3369 (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x3219 ?x3219)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* (- 1) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* (- 8) (* r00 ?x6157 ?x6157 ?x3219 ?x3219)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x3219 ?x3219)) (* 8 (* ?x6157 ?x6157 ?x3219 ?x3219 ?x3219)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x3219 ?x3219 ?x3219 r)) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x3219 ?x3219) (* (- 4) (* ?x6157 ?x6157 ?x450 ?x3219 ?x3219 ?x3219)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x3219 ?x3219)))))
 (let (($x2325 (or (not (= ?x3071 0)) (not (= ?x2293 0)) (not (= ?x4444 0)) (not (= ?x3224 0)))))
 (let ((?x6029 (* q d d)))
 (let ((?x5172 (* (- 2) (* q d))))
 (let ((?x5543 (* (- 4) (* r d))))
 (let ((?x3262 (* 4 (* x d))))
 (let ((?x435 (* r00 d00)))
 (let ((?x436 (* 4 ?x435)))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let (($x2642 (and (= (+ ?x5568 ?x300 ?x348 ?x332 ?x398 ?x436 ?x3262 ?x5543 ?x5172 ?x6029) 0) $x2325)))
 (let ((?x4940 (+ ?x233 ?x312 q)))
 (let ((?x1876 (* d00 r00 ?x4940 ?x4940 q q)))
 (let ((?x3782 (* d00 d00 q00 ?x4940 ?x4940 q q)))
 (let ((?x4524 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)))
 (let ((?x4239 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)))
 (let ((?x2638 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)))
 (let ((?x365 (+ (* 4 (* ?x450 ?x4940 ?x4940 ?x4940 q q)) (* (- 1) (* ?x450 ?x450 ?x4940 ?x4940 q q q)) (* 8 (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 r)) ?x2638 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) ?x4239 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)) (* 8 (* r00 ?x4940 ?x4940 q q)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 4) (* ?x450 ?x4940 ?x4940 r q q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r r q)) (* 4 (* d00 x00 ?x4940 ?x4940 q q)) (* (- 2) (* d00 q00 ?x4940 ?x4940 q q)) (* (- 1) ?x4524) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* 2 (* ?x450 ?x4940 ?x4940 q q q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 8) (* ?x4940 ?x4940 ?x4940 q q)) (* 8 (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)) ?x3782 (* (- 4) ?x1876))))
 (let ((?x727 (+ 2 ?x233 ?x312 q d)))
 (let ((?x2190 (* d00 r00 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x2628 (* d00 d00 q00 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x1541 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x2279 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x1670 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)))
 (let ((?x4090 (+ (* 4 (* ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* (- 1) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* 8 (* ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 r)) ?x1670 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x727 ?x727)) ?x2279 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)) (* 8 (* r00 ?x6108 ?x6108 ?x727 ?x727)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 4) (* ?x450 ?x6108 ?x6108 ?x727 ?x727 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r r)) (* 4 (* d00 x00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 2) (* d00 q00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 1) ?x1541) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* 2 (* ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* 8 (* ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) ?x2628 (* (- 4) ?x2190))))
 (let ((?x3518 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x4729 (* d00 r00 ?x6157 ?x6157 ?x3518 ?x3518)))
 (let ((?x4604 (* d00 d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)))
 (let ((?x950 (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x5102 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x5218 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)))
 (let ((?x3273 (+ (* 4 (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 ?x3518)) (* (- 1) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x3518 ?x3518)) (* 8 (* ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 r)) ?x5218 (* (- 2) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) ?x5102 (* (- 2) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 8 (* r00 ?x6157 ?x6157 ?x3518 ?x3518)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 r)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r r)) (* 4 (* d00 x00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 2) (* d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 1) ?x950) (* 2 (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* 2 (* ?x6157 ?x6157 ?x6157 ?x450 ?x3518 ?x3518)) (* (- 4) (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 4 (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 8) (* r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* ?x6157 ?x6157 ?x3518 ?x3518 ?x3518)) (* 8 (* ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) ?x4604 (* (- 4) ?x4729))))
 (let ((?x3019 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x3117 (* d00 r00 ?x6207 ?x6207 ?x3019 ?x3019)))
 (let ((?x3500 (* d00 d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)))
 (let ((?x3423 (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3065 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3323 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)))
 (let ((?x3178 (+ (* 4 (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 ?x3019)) (* (- 1) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x3019 ?x3019)) (* 8 (* ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 r)) ?x3323 (* (- 2) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) ?x3065 (* (- 2) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 8 (* r00 ?x6207 ?x6207 ?x3019 ?x3019)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 r)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r r)) (* 4 (* d00 x00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 2) (* d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 1) ?x3423) (* 2 (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* 2 (* ?x6207 ?x6207 ?x6207 ?x450 ?x3019 ?x3019)) (* (- 4) (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 4 (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 8) (* r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* ?x6207 ?x6207 ?x3019 ?x3019 ?x3019)) (* 8 (* ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) ?x3500 (* (- 4) ?x3117))))
 (let (($x390 (or (not (= ?x3178 0)) (not (= ?x3273 0)) (not (= ?x4090 0)) (not (= ?x365 0)))))
 (let ((?x4523 (* 4 (* d00 r00))))
 (let ((?x3251 (+ ?x5568 ?x300 ?x3262 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4523)))
 (let (($x3212 (= ?x3251 0)))
 (let (($x4577 (and $x3212 $x390)))
 (rewrite (= $x4577 $x2642)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1881 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x4940 (+ ?x233 ?x312 q)))
 (let ((?x1876 (* d00 r00 ?x4940 ?x4940 q q)))
 (let ((?x450 (+ 2 d)))
 (let ((?x4088 (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)))
 (let ((?x4524 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)))
 (let ((?x2849 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)))
 (let ((?x4239 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)))
 (let ((?x1376 (* ?x450 ?x450 ?x4940 ?x4940 q q q)))
 (let ((?x1874 (+ (* (- 4) (* ?x450 ?x4940 ?x4940 ?x4940 q q)) ?x1376 (* (- 8) (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 1) ?x4239) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)) (* (- 8) (* r00 ?x4940 ?x4940 q q)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) ?x2849 (* 4 (* ?x450 ?x4940 ?x4940 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r r q)) (* (- 4) (* d00 x00 ?x4940 ?x4940 q q)) (* 2 (* d00 q00 ?x4940 ?x4940 q q)) ?x4524 (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* (- 2) (* ?x450 ?x4940 ?x4940 q q q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 8 (* ?x4940 ?x4940 ?x4940 q q)) (* (- 8) ?x4088) (* (- 1) (* d00 d00 q00 ?x4940 ?x4940 q q)) (* 4 ?x1876))))
 (let ((?x727 (+ 2 ?x233 ?x312 q d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x2190 (* d00 r00 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x1541 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x5006 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)))
 (let ((?x2279 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x5482 (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x2181 (+ (* (- 4) (* ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727)) ?x5482 (* (- 8) (* ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 r)) (* (- 1) (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 1) ?x2279) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* r00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x727 ?x727)) ?x5006 (* 4 (* ?x450 ?x6108 ?x6108 ?x727 ?x727 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r r)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x727 ?x727)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x727 ?x727)) ?x1541 (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 8 (* ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) (* (- 1) (* d00 d00 q00 ?x6108 ?x6108 ?x727 ?x727)) (* 4 ?x2190))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x3518 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x4729 (* d00 r00 ?x6157 ?x6157 ?x3518 ?x3518)))
 (let ((?x950 (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x610 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)))
 (let ((?x5102 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x3524 (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x3518 ?x3518)))
 (let ((?x4883 (+ (* (- 4) (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 ?x3518)) ?x3524 (* (- 8) (* ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 r)) (* (- 1) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 1) ?x5102) (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* r00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) ?x610 (* 4 (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 r)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r r)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x3518 ?x3518)) (* 2 (* d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)) ?x950 (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x3518 ?x3518)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 8 (* ?x6157 ?x6157 ?x3518 ?x3518 ?x3518)) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) (* (- 1) (* d00 d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)) (* 4 ?x4729))))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x3019 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x3117 (* d00 r00 ?x6207 ?x6207 ?x3019 ?x3019)))
 (let ((?x3423 (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3414 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)))
 (let ((?x3065 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3235 (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x3019 ?x3019)))
 (let ((?x3514 (+ (* (- 4) (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 ?x3019)) ?x3235 (* (- 8) (* ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 r)) (* (- 1) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 1) ?x3065) (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* r00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) ?x3414 (* 4 (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 r)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r r)) (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x3019 ?x3019)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)) ?x3423 (* (- 2) (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* (- 2) (* ?x6207 ?x6207 ?x6207 ?x450 ?x3019 ?x3019)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 8 (* ?x6207 ?x6207 ?x3019 ?x3019 ?x3019)) (* (- 8) (* ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) (* (- 1) (* d00 d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)) (* 4 ?x3117))))
 (let (($x2227 (or (not (= ?x3514 0)) (not (= ?x4883 0)) (not (= ?x2181 0)) (not (= ?x1874 0)))))
 (let ((?x4523 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x3262 (* 4 (* x d))))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let ((?x3251 (+ ?x5568 ?x300 ?x3262 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4523)))
 (let (($x3212 (= ?x3251 0)))
 (and $x3212 $x2227))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x4584 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x312 (* (- 1) x)))
 (let ((?x233 (* 2 r)))
 (let ((?x4940 (+ ?x233 ?x312 q)))
 (let ((?x1876 (* d00 r00 ?x4940 ?x4940 q q)))
 (let ((?x3782 (* d00 d00 q00 ?x4940 ?x4940 q q)))
 (let ((?x450 (+ 2 d)))
 (let ((?x4088 (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)))
 (let ((?x4524 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)))
 (let ((?x4239 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)))
 (let ((?x2638 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)))
 (let ((?x365 (+ (* 4 (* ?x450 ?x4940 ?x4940 ?x4940 q q)) (* (- 1) (* ?x450 ?x450 ?x4940 ?x4940 q q q)) (* 8 (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 r)) ?x2638 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) ?x4239 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)) (* 8 (* r00 ?x4940 ?x4940 q q)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 4) (* ?x450 ?x4940 ?x4940 r q q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r r q)) (* 4 (* d00 x00 ?x4940 ?x4940 q q)) (* (- 2) (* d00 q00 ?x4940 ?x4940 q q)) (* (- 1) ?x4524) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* 2 (* ?x450 ?x4940 ?x4940 q q q)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 8) (* ?x4940 ?x4940 ?x4940 q q)) (* 8 ?x4088) ?x3782 (* (- 4) ?x1876))))
 (let ((?x727 (+ 2 ?x233 ?x312 q d)))
 (let ((?x6108 (+ 4 q)))
 (let ((?x2190 (* d00 r00 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x2628 (* d00 d00 q00 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x1541 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x2279 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)))
 (let ((?x1670 (* ?x450 ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)))
 (let ((?x4090 (+ (* 4 (* ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* (- 1) (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* 8 (* ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 r)) ?x1670 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x727 ?x727)) ?x2279 (* (- 2) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)) (* 8 (* r00 ?x6108 ?x6108 ?x727 ?x727)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 4) (* ?x450 ?x6108 ?x6108 ?x727 ?x727 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r r)) (* 4 (* d00 x00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 2) (* d00 q00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 1) ?x1541) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* 2 (* ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* 8 (* ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) ?x2628 (* (- 4) ?x2190))))
 (let ((?x6158 (* (- 1) d)))
 (let ((?x3518 (+ (- 2) ?x233 ?x312 q ?x6158)))
 (let ((?x6157 (+ (- 4) q)))
 (let ((?x4729 (* d00 r00 ?x6157 ?x6157 ?x3518 ?x3518)))
 (let ((?x4604 (* d00 d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)))
 (let ((?x950 (* d00 d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x5102 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)))
 (let ((?x5218 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)))
 (let ((?x3273 (+ (* 4 (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 ?x3518)) (* (- 1) (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x3518 ?x3518)) (* 8 (* ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 r)) ?x5218 (* (- 2) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) ?x5102 (* (- 2) (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 8 (* r00 ?x6157 ?x6157 ?x3518 ?x3518)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 r)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r r)) (* 4 (* d00 x00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 2) (* d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 1) ?x950) (* 2 (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* 2 (* ?x6157 ?x6157 ?x6157 ?x450 ?x3518 ?x3518)) (* (- 4) (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 4 (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 8) (* r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* ?x6157 ?x6157 ?x3518 ?x3518 ?x3518)) (* 8 (* ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) ?x4604 (* (- 4) ?x4729))))
 (let ((?x6208 (* (- 2) d)))
 (let ((?x3019 (+ (- 4) ?x233 ?x312 q ?x6208)))
 (let ((?x6207 (+ (- 8) q)))
 (let ((?x3117 (* d00 r00 ?x6207 ?x6207 ?x3019 ?x3019)))
 (let ((?x3500 (* d00 d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)))
 (let ((?x3423 (* d00 d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3065 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)))
 (let ((?x3323 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)))
 (let ((?x3178 (+ (* 4 (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 ?x3019)) (* (- 1) (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x3019 ?x3019)) (* 8 (* ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 r)) ?x3323 (* (- 2) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) (* (- 4) (* d00 x00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) ?x3065 (* (- 2) (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 8 (* r00 ?x6207 ?x6207 ?x3019 ?x3019)) (* 4 (* d00 r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 1) (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 r)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r r)) (* 4 (* d00 x00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 2) (* d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 1) ?x3423) (* 2 (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* 2 (* ?x6207 ?x6207 ?x6207 ?x450 ?x3019 ?x3019)) (* (- 4) (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 2 (* d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 4 (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 8) (* r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* ?x6207 ?x6207 ?x3019 ?x3019 ?x3019)) (* 8 (* ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) ?x3500 (* (- 4) ?x3117))))
 (let (($x390 (or (not (= ?x3178 0)) (not (= ?x3273 0)) (not (= ?x4090 0)) (not (= ?x365 0)))))
 (let ((?x4523 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x3262 (* 4 (* x d))))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x5568 (* 8 r)))
 (let ((?x3251 (+ ?x5568 ?x300 ?x3262 ?x332 ?x348 (* d d q) (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4523)))
 (let (($x3212 (= ?x3251 0)))
 (let (($x4577 (and $x3212 $x390)))
 (let ((?x2849 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)))
 (let ((?x1376 (* ?x450 ?x450 ?x4940 ?x4940 q q q)))
 (let ((?x1874 (+ (* (- 4) (* ?x450 ?x4940 ?x4940 ?x4940 q q)) ?x1376 (* (- 8) (* ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 r)) (* (- 1) ?x2638) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 ?x4940 r q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 1) ?x4239) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q q)) (* (- 8) (* r00 ?x4940 ?x4940 q q)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) ?x2849 (* 4 (* ?x450 ?x4940 ?x4940 r q q)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r r q)) (* (- 4) (* d00 x00 ?x4940 ?x4940 q q)) (* 2 (* d00 q00 ?x4940 ?x4940 q q)) ?x4524 (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940)) (* (- 2) (* ?x450 ?x4940 ?x4940 q q q)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x4940 ?x4940 ?x4940 r q)) (* 8 (* ?x4940 ?x4940 ?x4940 q q)) (* (- 8) ?x4088) (* (- 1) ?x3782) (* 4 ?x1876))))
 (let ((?x5006 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)))
 (let ((?x5482 (* ?x450 ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)))
 (let ((?x2181 (+ (* (- 4) (* ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727)) ?x5482 (* (- 8) (* ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 r)) (* (- 1) ?x1670) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 1) ?x2279) (* 2 (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 8) (* r00 ?x6108 ?x6108 ?x727 ?x727)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x727 ?x727)) ?x5006 (* 4 (* ?x450 ?x6108 ?x6108 ?x727 ?x727 r)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r r)) (* (- 4) (* d00 x00 ?x6108 ?x6108 ?x727 ?x727)) (* 2 (* d00 q00 ?x6108 ?x6108 ?x727 ?x727)) ?x1541 (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x727 ?x727 ?x727)) (* (- 2) (* ?x450 ?x6108 ?x6108 ?x6108 ?x727 ?x727)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x727 ?x727)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 r)) (* 8 (* ?x6108 ?x6108 ?x727 ?x727 ?x727)) (* (- 8) (* ?x450 ?x450 ?x450 ?x6108 ?x727 ?x727 ?x727 ?x727 r)) (* (- 1) ?x2628) (* 4 ?x2190))))
 (let ((?x610 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)))
 (let ((?x3524 (* ?x6157 ?x6157 ?x6157 ?x450 ?x450 ?x3518 ?x3518)))
 (let ((?x4883 (+ (* (- 4) (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 ?x3518)) ?x3524 (* (- 8) (* ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 r)) (* (- 1) ?x5218) (* 2 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 4 (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 1) ?x5102) (* 2 (* ?x6157 ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 8) (* r00 ?x6157 ?x6157 ?x3518 ?x3518)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) ?x610 (* 4 (* ?x6157 ?x6157 ?x450 ?x3518 ?x3518 r)) (* (- 4) (* ?x6157 ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r r)) (* (- 4) (* d00 x00 ?x6157 ?x6157 ?x3518 ?x3518)) (* 2 (* d00 q00 ?x6157 ?x6157 ?x3518 ?x3518)) ?x950 (* (- 2) (* d00 q00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518)) (* (- 2) (* ?x6157 ?x6157 ?x6157 ?x450 ?x3518 ?x3518)) (* 4 (* d00 x00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* (- 4) (* d00 r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x3518 ?x3518)) (* 8 (* r00 ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 r)) (* 8 (* ?x6157 ?x6157 ?x3518 ?x3518 ?x3518)) (* (- 8) (* ?x6157 ?x450 ?x450 ?x450 ?x3518 ?x3518 ?x3518 ?x3518 r)) (* (- 1) ?x4604) (* 4 ?x4729))))
 (let ((?x3414 (* d00 d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)))
 (let ((?x3235 (* ?x6207 ?x6207 ?x6207 ?x450 ?x450 ?x3019 ?x3019)))
 (let ((?x3514 (+ (* (- 4) (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 ?x3019)) ?x3235 (* (- 8) (* ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* (- 4) (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 r)) (* (- 1) ?x3323) (* 2 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 4 (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) (* 4 (* d00 x00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 1) ?x3065) (* 2 (* ?x6207 ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 8) (* r00 ?x6207 ?x6207 ?x3019 ?x3019)) (* (- 4) (* d00 r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) ?x3414 (* 4 (* ?x6207 ?x6207 ?x450 ?x3019 ?x3019 r)) (* (- 4) (* ?x6207 ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r r)) (* (- 4) (* d00 x00 ?x6207 ?x6207 ?x3019 ?x3019)) (* 2 (* d00 q00 ?x6207 ?x6207 ?x3019 ?x3019)) ?x3423 (* (- 2) (* d00 q00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 4 (* ?x450 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019)) (* (- 2) (* ?x6207 ?x6207 ?x6207 ?x450 ?x3019 ?x3019)) (* 4 (* d00 x00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* (- 2) (* d00 q00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* (- 4) (* d00 r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 8 (* r00 ?x450 ?x450 ?x450 ?x3019 ?x3019)) (* 8 (* r00 ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 r)) (* 8 (* ?x6207 ?x6207 ?x3019 ?x3019 ?x3019)) (* (- 8) (* ?x6207 ?x450 ?x450 ?x450 ?x3019 ?x3019 ?x3019 ?x3019 r)) (* (- 1) ?x3500) (* 4 ?x3117))))
 (let (($x2227 (or (not (= ?x3514 0)) (not (= ?x4883 0)) (not (= ?x2181 0)) (not (= ?x1874 0)))))
 (let (($x1877 (and $x3212 $x2227)))
 (rewrite (= $x1877 $x4577))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x293 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x235 (- (- (+ (- (* 2 r) x) q) (* 2 d)) 4)))
 (let ((?x232 (- q 8)))
 (let ((?x58 (+ d 2)))
 (let ((?x238 (+ (* (- 4) ?x58 ?x232 ?x232 ?x235 ?x235 ?x235) (* ?x58 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x243 (- (- ?x238 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 r))))
 (let ((?x248 (+ (- ?x243 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235) (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 x00))))
 (let ((?x250 (- ?x248 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x252 (+ ?x250 (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x256 (- (- ?x252 (* 8 ?x232 ?x232 ?x235 ?x235 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 r00))))
 (let ((?x259 (+ ?x256 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x235 ?x235) (* 4 ?x58 ?x232 ?x232 ?x235 ?x235 r))))
 (let ((?x262 (- ?x259 (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r r))))
 (let ((?x266 (+ (- ?x262 (* 4 d00 ?x232 ?x232 ?x235 ?x235 x00)) (* 2 d00 ?x232 ?x232 q00 ?x235 ?x235) (* ?x58 ?x58 ?x58 d00 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x268 (- ?x266 (* 2 ?x58 ?x58 ?x58 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x272 (- (+ ?x268 (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 2 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x274 (+ ?x272 (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r x00))))
 (let ((?x278 (- (- ?x274 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r00 r))))
 (let ((?x282 (+ ?x278 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 r00) (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r00 r) (* 8 ?x232 ?x232 ?x235 ?x235 ?x235))))
 (let ((?x286 (- (- ?x282 (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r)) (* d00 d00 ?x232 ?x232 q00 ?x235 ?x235))))
 (let ((?x176 (- (- (+ (- (* 2 r) x) q) d) 2)))
 (let ((?x174 (- q 4)))
 (let ((?x179 (+ (* (- 4) ?x58 ?x174 ?x174 ?x176 ?x176 ?x176) (* ?x58 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x184 (- (- ?x179 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 r))))
 (let ((?x189 (+ (- ?x184 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176) (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 x00))))
 (let ((?x191 (- ?x189 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x193 (+ ?x191 (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x197 (- (- ?x193 (* 8 ?x174 ?x174 ?x176 ?x176 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 r00))))
 (let ((?x200 (+ ?x197 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x176 ?x176) (* 4 ?x58 ?x174 ?x174 ?x176 ?x176 r))))
 (let ((?x203 (- ?x200 (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r r))))
 (let ((?x207 (+ (- ?x203 (* 4 d00 ?x174 ?x174 ?x176 ?x176 x00)) (* 2 d00 ?x174 ?x174 q00 ?x176 ?x176) (* ?x58 ?x58 ?x58 d00 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x209 (- ?x207 (* 2 ?x58 ?x58 ?x58 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x213 (- (+ ?x209 (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 2 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x215 (+ ?x213 (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r x00))))
 (let ((?x219 (- (- ?x215 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r00 r))))
 (let ((?x223 (+ ?x219 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 r00) (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r00 r) (* 8 ?x174 ?x174 ?x176 ?x176 ?x176))))
 (let ((?x227 (- (- ?x223 (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r)) (* d00 d00 ?x174 ?x174 q00 ?x176 ?x176))))
 (let ((?x60 (* 2 r)))
 (let ((?x61 (- ?x60 x)))
 (let ((?x118 (+ ?x61 q)))
 (let ((?x121 (+ (* (- 4) ?x58 q q ?x118 ?x118 ?x118) (* ?x58 ?x58 q q q ?x118 ?x118))))
 (let ((?x126 (- (- ?x121 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 r))))
 (let ((?x131 (+ (- ?x126 (* ?x58 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118)) (* 2 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118) (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 x00))))
 (let ((?x133 (- ?x131 (* ?x58 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x135 (+ ?x133 (* 2 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x139 (- (- ?x135 (* 8 q q ?x118 ?x118 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 r00))))
 (let ((?x142 (+ ?x139 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x118 ?x118) (* 4 ?x58 q q ?x118 ?x118 r))))
 (let ((?x145 (- ?x142 (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r r))))
 (let ((?x149 (+ (- ?x145 (* 4 d00 q q ?x118 ?x118 x00)) (* 2 d00 q q q00 ?x118 ?x118) (* ?x58 ?x58 ?x58 d00 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x151 (- ?x149 (* 2 ?x58 ?x58 ?x58 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x155 (- (+ ?x151 (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 2 ?x58 q q q ?x118 ?x118))))
 (let ((?x157 (+ ?x155 (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r x00))))
 (let ((?x161 (- (- ?x157 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r00 r))))
 (let ((?x165 (+ ?x161 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 r00) (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r00 r) (* 8 q q ?x118 ?x118 ?x118))))
 (let ((?x169 (- (- ?x165 (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r)) (* d00 d00 q q q00 ?x118 ?x118))))
 (let ((?x62 (+ ?x61 q d 2)))
 (let ((?x59 (+ q 4)))
 (let ((?x65 (+ (* (- 4) ?x58 ?x59 ?x59 ?x62 ?x62 ?x62) (* ?x58 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x70 (- (- ?x65 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 r))))
 (let ((?x75 (+ (- ?x70 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62) (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 x00))))
 (let ((?x77 (- ?x75 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x79 (+ ?x77 (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x83 (- (- ?x79 (* 8 ?x59 ?x59 ?x62 ?x62 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 r00))))
 (let ((?x86 (+ ?x83 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x62 ?x62) (* 4 ?x58 ?x59 ?x59 ?x62 ?x62 r))))
 (let ((?x89 (- ?x86 (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r r))))
 (let ((?x93 (+ (- ?x89 (* 4 d00 ?x59 ?x59 ?x62 ?x62 x00)) (* 2 d00 ?x59 ?x59 q00 ?x62 ?x62) (* ?x58 ?x58 ?x58 d00 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x95 (- ?x93 (* 2 ?x58 ?x58 ?x58 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x99 (- (+ ?x95 (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 2 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x101 (+ ?x99 (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r x00))))
 (let ((?x105 (- (- ?x101 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r00 r))))
 (let ((?x109 (+ ?x105 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 r00) (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r00 r) (* 8 ?x59 ?x59 ?x62 ?x62 ?x62))))
 (let ((?x113 (- (- ?x109 (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r)) (* d00 d00 ?x59 ?x59 q00 ?x62 ?x62))))
 (let (($x291 (or (not (= (+ ?x113 (* 4 d00 ?x59 ?x59 ?x62 ?x62 r00)) 0)) (not (= (+ ?x169 (* 4 d00 q q ?x118 ?x118 r00)) 0)) (not (= (+ ?x227 (* 4 d00 ?x174 ?x174 ?x176 ?x176 r00)) 0)) (not (= (+ ?x286 (* 4 d00 ?x232 ?x232 ?x235 ?x235 r00)) 0)))))
 (let ((?x44 (* d d q)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x42 (- (+ (- (* 8 r) (* 8 r00)) (* 4 d x)) (* 4 d00 x00))))
 (let ((?x50 (+ (- (+ (- ?x42 ?x41) ?x44) (* 2 d q)) (* 2 d00 q00))))
 (and (= (+ (- ?x50 (* 4 d r)) (* 4 d00 r00)) 0) $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let (($x5315 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x312 (* (- 1) x)))
 (let ((?x60 (* 2 r)))
 (let ((?x3488 (+ ?x60 ?x312 q)))
 (let ((?x301 (+ 2 d)))
 (let ((?x387 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q q))))
 (let ((?x1073 (+ (* (- 4) (* ?x301 ?x3488 ?x3488 ?x3488 q q)) (* ?x301 ?x301 ?x3488 ?x3488 q q q) (* (- 8) (* ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 q)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 ?x3488 r q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) ?x387 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q q)) (* (- 8) (* r00 ?x3488 ?x3488 q q)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488) (* 4 (* ?x301 ?x3488 ?x3488 r q q)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r r q)) (* (- 4) (* d00 x00 ?x3488 ?x3488 q q)) (* 2 (* d00 q00 ?x3488 ?x3488 q q)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488)) (* (- 2) (* ?x301 ?x3488 ?x3488 q q q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* 8 (* ?x3488 ?x3488 ?x3488 q q)) (* (- 8) (* ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 ?x3488 r q)) (* (- 1) (* d00 d00 q00 ?x3488 ?x3488 q q)) (* 4 (* d00 r00 ?x3488 ?x3488 q q)))))
 (let ((?x1193 (+ 2 ?x60 ?x312 q d)))
 (let ((?x309 (+ 4 q)))
 (let ((?x4198 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x1193 ?x1193 ?x1193 r))))
 (let ((?x3073 (+ (* (- 4) (* ?x301 ?x309 ?x309 ?x1193 ?x1193 ?x1193)) (* ?x301 ?x301 ?x309 ?x309 ?x309 ?x1193 ?x1193) (* (- 8) (* ?x301 ?x301 ?x301 ?x1193 ?x1193 ?x1193)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x1193 ?x1193 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 ?x1193 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) ?x4198 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x1193 ?x1193 ?x1193 r)) (* (- 8) (* r00 ?x309 ?x309 ?x1193 ?x1193)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x1193 ?x1193) (* 4 (* ?x301 ?x309 ?x309 ?x1193 ?x1193 r)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r r)) (* (- 4) (* d00 x00 ?x309 ?x309 ?x1193 ?x1193)) (* 2 (* d00 q00 ?x309 ?x309 ?x1193 ?x1193)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x1193 ?x1193 ?x1193)) (* (- 2) (* ?x301 ?x309 ?x309 ?x309 ?x1193 ?x1193)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* 8 (* ?x309 ?x309 ?x1193 ?x1193 ?x1193)) (* (- 8) (* ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 ?x1193 r)) (* (- 1) (* d00 d00 q00 ?x309 ?x309 ?x1193 ?x1193)) (* 4 (* d00 r00 ?x309 ?x309 ?x1193 ?x1193)))))
 (let ((?x1223 (* (- 1) d)))
 (let ((?x3695 (+ (- 2) ?x60 ?x312 q ?x1223)))
 (let ((?x1066 (+ (- 4) q)))
 (let ((?x3047 (* (- 1) (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r))))
 (let ((?x2687 (+ (* (- 4) (* ?x1066 ?x1066 ?x301 ?x3695 ?x3695 ?x3695)) (* ?x1066 ?x1066 ?x1066 ?x301 ?x301 ?x3695 ?x3695) (* (- 8) (* ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 r)) (* (- 1) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* 2 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* 4 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 ?x3695 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) ?x3047 (* 2 (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* (- 8) (* r00 ?x1066 ?x1066 ?x3695 ?x3695)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3695 ?x3695) (* 4 (* ?x1066 ?x1066 ?x301 ?x3695 ?x3695 r)) (* (- 4) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r r)) (* (- 4) (* d00 x00 ?x1066 ?x1066 ?x3695 ?x3695)) (* 2 (* d00 q00 ?x1066 ?x1066 ?x3695 ?x3695)) (* d00 d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r) (* (- 2) (* d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695)) (* (- 2) (* ?x1066 ?x1066 ?x1066 ?x301 ?x3695 ?x3695)) (* 4 (* d00 x00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* (- 4) (* d00 r00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* 8 (* r00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* 8 (* ?x1066 ?x1066 ?x3695 ?x3695 ?x3695)) (* (- 8) (* ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 ?x3695 r)) (* (- 1) (* d00 d00 q00 ?x1066 ?x1066 ?x3695 ?x3695)) (* 4 (* d00 r00 ?x1066 ?x1066 ?x3695 ?x3695)))))
 (let ((?x1646 (* (- 2) d)))
 (let ((?x3203 (+ (- 4) ?x60 ?x312 q ?x1646)))
 (let ((?x1554 (+ (- 8) q)))
 (let ((?x4950 (* (- 1) (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r))))
 (let ((?x2387 (+ (* (- 4) (* ?x1554 ?x1554 ?x301 ?x3203 ?x3203 ?x3203)) (* ?x1554 ?x1554 ?x1554 ?x301 ?x301 ?x3203 ?x3203) (* (- 8) (* ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 r)) (* (- 1) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* 2 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* 4 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 ?x3203 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) ?x4950 (* 2 (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* (- 8) (* r00 ?x1554 ?x1554 ?x3203 ?x3203)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3203 ?x3203) (* 4 (* ?x1554 ?x1554 ?x301 ?x3203 ?x3203 r)) (* (- 4) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r r)) (* (- 4) (* d00 x00 ?x1554 ?x1554 ?x3203 ?x3203)) (* 2 (* d00 q00 ?x1554 ?x1554 ?x3203 ?x3203)) (* d00 d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r) (* (- 2) (* d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203)) (* (- 2) (* ?x1554 ?x1554 ?x1554 ?x301 ?x3203 ?x3203)) (* 4 (* d00 x00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* (- 4) (* d00 r00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* 8 (* r00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* 8 (* ?x1554 ?x1554 ?x3203 ?x3203 ?x3203)) (* (- 8) (* ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 ?x3203 r)) (* (- 1) (* d00 d00 q00 ?x1554 ?x1554 ?x3203 ?x3203)) (* 4 (* d00 r00 ?x1554 ?x1554 ?x3203 ?x3203)))))
 (let (($x3246 (or (not (= ?x2387 0)) (not (= ?x2687 0)) (not (= ?x3073 0)) (not (= ?x1073 0)))))
 (let ((?x4523 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x44 (* d d q)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x30 (* 8 r)))
 (let ((?x875 (+ ?x30 ?x300 (* 4 (* x d)) ?x332 ?x348 ?x44 (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4523)))
 (and (= ?x875 0) $x3246))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x5347 (lambda ((q Int) (r Int) (d Int) (t Int) (x Int) )(let ((?x312 (* (- 1) x)))
 (let ((?x60 (* 2 r)))
 (let ((?x3488 (+ ?x60 ?x312 q)))
 (let ((?x301 (+ 2 d)))
 (let ((?x387 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q q))))
 (let ((?x1073 (+ (* (- 4) (* ?x301 ?x3488 ?x3488 ?x3488 q q)) (* ?x301 ?x301 ?x3488 ?x3488 q q q) (* (- 8) (* ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 q)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 ?x3488 r q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) ?x387 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q q)) (* (- 8) (* r00 ?x3488 ?x3488 q q)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488) (* 4 (* ?x301 ?x3488 ?x3488 r q q)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r r q)) (* (- 4) (* d00 x00 ?x3488 ?x3488 q q)) (* 2 (* d00 q00 ?x3488 ?x3488 q q)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488)) (* (- 2) (* ?x301 ?x3488 ?x3488 q q q)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3488 ?x3488)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 r q)) (* 8 (* ?x3488 ?x3488 ?x3488 q q)) (* (- 8) (* ?x301 ?x301 ?x301 ?x3488 ?x3488 ?x3488 ?x3488 r q)) (* (- 1) (* d00 d00 q00 ?x3488 ?x3488 q q)) (* 4 (* d00 r00 ?x3488 ?x3488 q q)))))
 (let ((?x1193 (+ 2 ?x60 ?x312 q d)))
 (let ((?x309 (+ 4 q)))
 (let ((?x4198 (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x1193 ?x1193 ?x1193 r))))
 (let ((?x3073 (+ (* (- 4) (* ?x301 ?x309 ?x309 ?x1193 ?x1193 ?x1193)) (* ?x301 ?x301 ?x309 ?x309 ?x309 ?x1193 ?x1193) (* (- 8) (* ?x301 ?x301 ?x301 ?x1193 ?x1193 ?x1193)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x1193 ?x1193 r)) (* (- 1) (* ?x301 ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193)) (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 ?x1193 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) ?x4198 (* 2 (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x309 ?x1193 ?x1193 ?x1193 r)) (* (- 8) (* r00 ?x309 ?x309 ?x1193 ?x1193)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x1193 ?x1193) (* 4 (* ?x301 ?x309 ?x309 ?x1193 ?x1193 r)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r r)) (* (- 4) (* d00 x00 ?x309 ?x309 ?x1193 ?x1193)) (* 2 (* d00 q00 ?x309 ?x309 ?x1193 ?x1193)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x1193 ?x1193 ?x1193)) (* (- 2) (* ?x301 ?x309 ?x309 ?x309 ?x1193 ?x1193)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x1193 ?x1193)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 r)) (* 8 (* ?x309 ?x309 ?x1193 ?x1193 ?x1193)) (* (- 8) (* ?x301 ?x301 ?x301 ?x309 ?x1193 ?x1193 ?x1193 ?x1193 r)) (* (- 1) (* d00 d00 q00 ?x309 ?x309 ?x1193 ?x1193)) (* 4 (* d00 r00 ?x309 ?x309 ?x1193 ?x1193)))))
 (let ((?x1223 (* (- 1) d)))
 (let ((?x3695 (+ (- 2) ?x60 ?x312 q ?x1223)))
 (let ((?x1066 (+ (- 4) q)))
 (let ((?x3047 (* (- 1) (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r))))
 (let ((?x2687 (+ (* (- 4) (* ?x1066 ?x1066 ?x301 ?x3695 ?x3695 ?x3695)) (* ?x1066 ?x1066 ?x1066 ?x301 ?x301 ?x3695 ?x3695) (* (- 8) (* ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 r)) (* (- 1) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* 2 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* 4 (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 ?x3695 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) ?x3047 (* 2 (* ?x1066 ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* (- 8) (* r00 ?x1066 ?x1066 ?x3695 ?x3695)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3695 ?x3695) (* 4 (* ?x1066 ?x1066 ?x301 ?x3695 ?x3695 r)) (* (- 4) (* ?x1066 ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r r)) (* (- 4) (* d00 x00 ?x1066 ?x1066 ?x3695 ?x3695)) (* 2 (* d00 q00 ?x1066 ?x1066 ?x3695 ?x3695)) (* d00 d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r) (* (- 2) (* d00 q00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695)) (* (- 2) (* ?x1066 ?x1066 ?x1066 ?x301 ?x3695 ?x3695)) (* 4 (* d00 x00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* (- 4) (* d00 r00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3695 ?x3695)) (* 8 (* r00 ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 r)) (* 8 (* ?x1066 ?x1066 ?x3695 ?x3695 ?x3695)) (* (- 8) (* ?x1066 ?x301 ?x301 ?x301 ?x3695 ?x3695 ?x3695 ?x3695 r)) (* (- 1) (* d00 d00 q00 ?x1066 ?x1066 ?x3695 ?x3695)) (* 4 (* d00 r00 ?x1066 ?x1066 ?x3695 ?x3695)))))
 (let ((?x1646 (* (- 2) d)))
 (let ((?x3203 (+ (- 4) ?x60 ?x312 q ?x1646)))
 (let ((?x1554 (+ (- 8) q)))
 (let ((?x4950 (* (- 1) (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r))))
 (let ((?x2387 (+ (* (- 4) (* ?x1554 ?x1554 ?x301 ?x3203 ?x3203 ?x3203)) (* ?x1554 ?x1554 ?x1554 ?x301 ?x301 ?x3203 ?x3203) (* (- 8) (* ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203)) (* (- 4) (* ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 r)) (* (- 1) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* 2 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* 4 (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 ?x3203 r)) (* 4 (* d00 x00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) ?x4950 (* 2 (* ?x1554 ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* (- 8) (* r00 ?x1554 ?x1554 ?x3203 ?x3203)) (* (- 4) (* d00 r00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* d00 d00 q00 ?x301 ?x301 ?x301 ?x3203 ?x3203) (* 4 (* ?x1554 ?x1554 ?x301 ?x3203 ?x3203 r)) (* (- 4) (* ?x1554 ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r r)) (* (- 4) (* d00 x00 ?x1554 ?x1554 ?x3203 ?x3203)) (* 2 (* d00 q00 ?x1554 ?x1554 ?x3203 ?x3203)) (* d00 d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r) (* (- 2) (* d00 q00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* 4 (* ?x301 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203)) (* (- 2) (* ?x1554 ?x1554 ?x1554 ?x301 ?x3203 ?x3203)) (* 4 (* d00 x00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* (- 2) (* d00 q00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* (- 4) (* d00 r00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* 8 (* r00 ?x301 ?x301 ?x301 ?x3203 ?x3203)) (* 8 (* r00 ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 r)) (* 8 (* ?x1554 ?x1554 ?x3203 ?x3203 ?x3203)) (* (- 8) (* ?x1554 ?x301 ?x301 ?x301 ?x3203 ?x3203 ?x3203 ?x3203 r)) (* (- 1) (* d00 d00 q00 ?x1554 ?x1554 ?x3203 ?x3203)) (* 4 (* d00 r00 ?x1554 ?x1554 ?x3203 ?x3203)))))
 (let (($x3246 (or (not (= ?x2387 0)) (not (= ?x2687 0)) (not (= ?x3073 0)) (not (= ?x1073 0)))))
 (let ((?x4523 (* 4 (* d00 r00))))
 (let ((?x397 (* d00 q00)))
 (let ((?x398 (* 2 ?x397)))
 (let ((?x44 (* d d q)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x348 (* (- 1) ?x41)))
 (let ((?x318 (* d00 x00)))
 (let ((?x332 (* (- 4) ?x318)))
 (let ((?x300 (* (- 8) r00)))
 (let ((?x30 (* 8 r)))
 (let ((?x875 (+ ?x30 ?x300 (* 4 (* x d)) ?x332 ?x348 ?x44 (* (- 2) (* d q)) ?x398 (* (- 4) (* d r)) ?x4523)))
 (let (($x3020 (and (= ?x875 0) $x3246)))
 (let ((?x235 (- (- (+ (- ?x60 x) q) (* 2 d)) 4)))
 (let ((?x232 (- q 8)))
 (let ((?x58 (+ d 2)))
 (let ((?x238 (+ (* (- 4) ?x58 ?x232 ?x232 ?x235 ?x235 ?x235) (* ?x58 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x243 (- (- ?x238 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 r))))
 (let ((?x248 (+ (- ?x243 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235) (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 x00))))
 (let ((?x250 (- ?x248 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x252 (+ ?x250 (* 2 ?x58 ?x58 ?x58 ?x58 ?x232 ?x232 ?x235 ?x235 ?x235 r))))
 (let ((?x256 (- (- ?x252 (* 8 ?x232 ?x232 ?x235 ?x235 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x235 ?x235 r00))))
 (let ((?x259 (+ ?x256 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x235 ?x235) (* 4 ?x58 ?x232 ?x232 ?x235 ?x235 r))))
 (let ((?x262 (- ?x259 (* 4 ?x58 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r r))))
 (let ((?x266 (+ (- ?x262 (* 4 d00 ?x232 ?x232 ?x235 ?x235 x00)) (* 2 d00 ?x232 ?x232 q00 ?x235 ?x235) (* ?x58 ?x58 ?x58 d00 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x268 (- ?x266 (* 2 ?x58 ?x58 ?x58 d00 ?x232 q00 ?x235 ?x235 ?x235 r))))
 (let ((?x272 (- (+ ?x268 (* 4 ?x58 ?x58 ?x58 ?x58 ?x235 ?x235 ?x235)) (* 2 ?x58 ?x232 ?x232 ?x232 ?x235 ?x235))))
 (let ((?x274 (+ ?x272 (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r x00))))
 (let ((?x278 (- (- ?x274 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x235 ?x235)) (* 4 ?x58 ?x58 ?x58 d00 ?x232 ?x235 ?x235 ?x235 r00 r))))
 (let ((?x282 (+ ?x278 (* 8 ?x58 ?x58 ?x58 ?x235 ?x235 r00) (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 r00 r) (* 8 ?x232 ?x232 ?x235 ?x235 ?x235))))
 (let ((?x286 (- (- ?x282 (* 8 ?x58 ?x58 ?x58 ?x232 ?x235 ?x235 ?x235 ?x235 r)) (* d00 d00 ?x232 ?x232 q00 ?x235 ?x235))))
 (let ((?x176 (- (- (+ (- ?x60 x) q) d) 2)))
 (let ((?x174 (- q 4)))
 (let ((?x179 (+ (* (- 4) ?x58 ?x174 ?x174 ?x176 ?x176 ?x176) (* ?x58 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x184 (- (- ?x179 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 r))))
 (let ((?x189 (+ (- ?x184 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176) (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 x00))))
 (let ((?x191 (- ?x189 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x193 (+ ?x191 (* 2 ?x58 ?x58 ?x58 ?x58 ?x174 ?x174 ?x176 ?x176 ?x176 r))))
 (let ((?x197 (- (- ?x193 (* 8 ?x174 ?x174 ?x176 ?x176 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x176 ?x176 r00))))
 (let ((?x200 (+ ?x197 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x176 ?x176) (* 4 ?x58 ?x174 ?x174 ?x176 ?x176 r))))
 (let ((?x203 (- ?x200 (* 4 ?x58 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r r))))
 (let ((?x207 (+ (- ?x203 (* 4 d00 ?x174 ?x174 ?x176 ?x176 x00)) (* 2 d00 ?x174 ?x174 q00 ?x176 ?x176) (* ?x58 ?x58 ?x58 d00 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x209 (- ?x207 (* 2 ?x58 ?x58 ?x58 d00 ?x174 q00 ?x176 ?x176 ?x176 r))))
 (let ((?x213 (- (+ ?x209 (* 4 ?x58 ?x58 ?x58 ?x58 ?x176 ?x176 ?x176)) (* 2 ?x58 ?x174 ?x174 ?x174 ?x176 ?x176))))
 (let ((?x215 (+ ?x213 (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r x00))))
 (let ((?x219 (- (- ?x215 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x176 ?x176)) (* 4 ?x58 ?x58 ?x58 d00 ?x174 ?x176 ?x176 ?x176 r00 r))))
 (let ((?x223 (+ ?x219 (* 8 ?x58 ?x58 ?x58 ?x176 ?x176 r00) (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 r00 r) (* 8 ?x174 ?x174 ?x176 ?x176 ?x176))))
 (let ((?x227 (- (- ?x223 (* 8 ?x58 ?x58 ?x58 ?x174 ?x176 ?x176 ?x176 ?x176 r)) (* d00 d00 ?x174 ?x174 q00 ?x176 ?x176))))
 (let ((?x61 (- ?x60 x)))
 (let ((?x118 (+ ?x61 q)))
 (let ((?x121 (+ (* (- 4) ?x58 q q ?x118 ?x118 ?x118) (* ?x58 ?x58 q q q ?x118 ?x118))))
 (let ((?x126 (- (- ?x121 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 r))))
 (let ((?x131 (+ (- ?x126 (* ?x58 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118)) (* 2 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118) (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 x00))))
 (let ((?x133 (- ?x131 (* ?x58 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x135 (+ ?x133 (* 2 ?x58 ?x58 ?x58 ?x58 q q ?x118 ?x118 ?x118 r))))
 (let ((?x139 (- (- ?x135 (* 8 q q ?x118 ?x118 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x118 ?x118 r00))))
 (let ((?x142 (+ ?x139 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x118 ?x118) (* 4 ?x58 q q ?x118 ?x118 r))))
 (let ((?x145 (- ?x142 (* 4 ?x58 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r r))))
 (let ((?x149 (+ (- ?x145 (* 4 d00 q q ?x118 ?x118 x00)) (* 2 d00 q q q00 ?x118 ?x118) (* ?x58 ?x58 ?x58 d00 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x151 (- ?x149 (* 2 ?x58 ?x58 ?x58 d00 q q00 ?x118 ?x118 ?x118 r))))
 (let ((?x155 (- (+ ?x151 (* 4 ?x58 ?x58 ?x58 ?x58 ?x118 ?x118 ?x118)) (* 2 ?x58 q q q ?x118 ?x118))))
 (let ((?x157 (+ ?x155 (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r x00))))
 (let ((?x161 (- (- ?x157 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x118 ?x118)) (* 4 ?x58 ?x58 ?x58 d00 q ?x118 ?x118 ?x118 r00 r))))
 (let ((?x165 (+ ?x161 (* 8 ?x58 ?x58 ?x58 ?x118 ?x118 r00) (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 r00 r) (* 8 q q ?x118 ?x118 ?x118))))
 (let ((?x169 (- (- ?x165 (* 8 ?x58 ?x58 ?x58 q ?x118 ?x118 ?x118 ?x118 r)) (* d00 d00 q q q00 ?x118 ?x118))))
 (let ((?x62 (+ ?x61 q d 2)))
 (let ((?x59 (+ q 4)))
 (let ((?x65 (+ (* (- 4) ?x58 ?x59 ?x59 ?x62 ?x62 ?x62) (* ?x58 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x70 (- (- ?x65 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 r))))
 (let ((?x75 (+ (- ?x70 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62)) (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62) (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 x00))))
 (let ((?x77 (- ?x75 (* ?x58 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x79 (+ ?x77 (* 2 ?x58 ?x58 ?x58 ?x58 ?x59 ?x59 ?x62 ?x62 ?x62 r))))
 (let ((?x83 (- (- ?x79 (* 8 ?x59 ?x59 ?x62 ?x62 r00)) (* 4 ?x58 ?x58 ?x58 d00 ?x62 ?x62 r00))))
 (let ((?x86 (+ ?x83 (* ?x58 ?x58 ?x58 d00 d00 q00 ?x62 ?x62) (* 4 ?x58 ?x59 ?x59 ?x62 ?x62 r))))
 (let ((?x89 (- ?x86 (* 4 ?x58 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r r))))
 (let ((?x93 (+ (- ?x89 (* 4 d00 ?x59 ?x59 ?x62 ?x62 x00)) (* 2 d00 ?x59 ?x59 q00 ?x62 ?x62) (* ?x58 ?x58 ?x58 d00 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x95 (- ?x93 (* 2 ?x58 ?x58 ?x58 d00 ?x59 q00 ?x62 ?x62 ?x62 r))))
 (let ((?x99 (- (+ ?x95 (* 4 ?x58 ?x58 ?x58 ?x58 ?x62 ?x62 ?x62)) (* 2 ?x58 ?x59 ?x59 ?x59 ?x62 ?x62))))
 (let ((?x101 (+ ?x99 (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r x00))))
 (let ((?x105 (- (- ?x101 (* 2 ?x58 ?x58 ?x58 d00 q00 ?x62 ?x62)) (* 4 ?x58 ?x58 ?x58 d00 ?x59 ?x62 ?x62 ?x62 r00 r))))
 (let ((?x109 (+ ?x105 (* 8 ?x58 ?x58 ?x58 ?x62 ?x62 r00) (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 r00 r) (* 8 ?x59 ?x59 ?x62 ?x62 ?x62))))
 (let ((?x113 (- (- ?x109 (* 8 ?x58 ?x58 ?x58 ?x59 ?x62 ?x62 ?x62 ?x62 r)) (* d00 d00 ?x59 ?x59 q00 ?x62 ?x62))))
 (let (($x291 (or (not (= (+ ?x113 (* 4 d00 ?x59 ?x59 ?x62 ?x62 r00)) 0)) (not (= (+ ?x169 (* 4 d00 q q ?x118 ?x118 r00)) 0)) (not (= (+ ?x227 (* 4 d00 ?x174 ?x174 ?x176 ?x176 r00)) 0)) (not (= (+ ?x286 (* 4 d00 ?x232 ?x232 ?x235 ?x235 r00)) 0)))))
 (let ((?x42 (- (+ (- ?x30 (* 8 r00)) (* 4 d x)) (* 4 d00 x00))))
 (let ((?x50 (+ (- (+ (- ?x42 ?x41) ?x44) (* 2 d q)) (* 2 d00 q00))))
 (let (($x292 (and (= (+ (- ?x50 (* 4 d r)) (* 4 d00 r00)) 0) $x291)))
 (rewrite (= $x292 $x3020)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x2248 (trans (quant-intro (proof-bind ?x5347) (= $x293 $x5315)) (elim-unused (= $x5315 $x1881)) (= $x293 $x1881))))
 (let ((@x27 (asserted $x293)))
 (let ((@x3011 (mp (mp (mp @x27 @x2248 $x1881) (rewrite (= $x1881 $x1881)) $x1881) (quant-intro (proof-bind ?x4584) (= $x1881 $x391)) $x391)))
 (let ((@x3338 (mp~ (mp @x3011 (quant-intro (proof-bind ?x1984) (= $x391 $x3444)) $x3444) (sk (~ $x3444 $x3430)) $x3430)))
 (let ((@x2352 (mp @x3338 (rewrite (= $x3430 $x502)) $x502)))
 (let ((@x2468 (and-elim @x2352 $x1906)))
 (let ((@x4875 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1906) $x1653)) @x2468 $x1653)))
 (let (($x4855 (>= ?x2265 0)))
 (let ((@x1790 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1906) $x4855)) @x2468 $x4855)))
 (let (($x1024 (not (<= ?x1683 0))))
 (let (($x1342 (<= ?x2586 0)))
 (let (($x4903 (>= ?x2586 0)))
 (let ((@x5327 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x5937 (not $x1342) (not $x4903))) (lemma ((_ th-lemma arith) (hypothesis (not $x4903)) @x1790 @x4875 false) $x4903) (lemma ((_ th-lemma arith) (hypothesis (not $x1342)) @x1790 @x4875 false) $x1342) $x5937)))
 (let (($x5761 (>= ?x3282 0)))
 (let (($x3350 (<= ?x3282 0)))
 (let ((@x3145 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3272 (not $x3350) (not $x5761))) (lemma ((_ th-lemma arith) (hypothesis (not $x3350)) @x1790 @x4875 false) $x3350) (lemma ((_ th-lemma arith) (hypothesis (not $x5761)) @x1790 @x4875 false) $x5761) $x3272)))
 (let (($x5355 (>= ?x1531 0)))
 (let (($x4918 (<= ?x1531 0)))
 (let ((@x2278 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4821 (not $x4918) (not $x5355))) (lemma ((_ th-lemma arith) (hypothesis (not $x4918)) @x1790 @x4875 false) $x4918) (lemma ((_ th-lemma arith) (hypothesis (not $x5355)) @x1790 @x4875 false) $x5355) $x4821)))
 (let ((@x747 (unit-resolution (unit-resolution (and-elim @x2352 $x4877) @x2278 @x3145 (or $x819 $x4781)) @x5327 $x4781)))
 (let (($x1552 (>= ?x1683 0)))
 (let ((@x5605 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4760 $x1024 (not $x1552))) (lemma ((_ th-lemma arith) (hypothesis (not $x1552)) @x1790 @x4875 false) $x1552) @x747 $x1024)))
 ((_ th-lemma arith) @x5605 @x1790 @x4875 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        7
 :arith-assert-lower        10
 :arith-assert-upper        11
 :arith-conflicts           8
 :arith-eq-adapter          5
 :arith-gcd-tests           8
 :arith-grobner             8
 :arith-max-min             3344
 :arith-nonlinear-horner    68
 :arith-num-rows            13
 :arith-patches             8
 :arith-patches_succ        8
 :arith-pivots              5
 :arith-tableau-max-columns 235
 :arith-tableau-max-rows    13
 :conflicts                 8
 :decisions                 24
 :del-clause                11
 :final-checks              8
 :max-memory                5.58
 :memory                    3.95
 :mk-bool-var               21
 :mk-clause                 20
 :num-allocs                113674141
 :num-checks                1
 :propagations              36
 :rlimit-count              237703
 :time                      0.25
 :total-time                0.27)
