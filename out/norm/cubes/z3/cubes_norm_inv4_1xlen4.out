unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x478 (* (- 2) n!0)))
 (let ((?x475 (* k!2 n!0)))
 (let ((?x505 (* (- 1) ?x475)))
 (let ((?x406 (* 3 c!3)))
 (let ((?x542 (+ ?x406 ?x505 k!2 ?x478)))
 (let (($x332 (<= ?x542 1)))
 (let (($x829 (= ?x542 1)))
 (let ((?x203 (+ c!3 k!2)))
 (let ((?x555 (+ m!1 k!2)))
 (let ((?x739 (+ 6 m!1)))
 (let ((?x569 (+ 1 n!0)))
 (let ((?x973 (* (- 1) (* k!2 k!2 n!0))))
 (let ((?x421 (* (- 1) (* c!3 k!2 n!0))))
 (let ((?x386 (* 12 (* k!2 n!0 n!0))))
 (let ((?x193 (* (- 1) (* c!3 k!2))))
 (let ((?x158 (* 7 k!2)))
 (let ((?x473 (* 3 (* c!3 n!0 n!0 n!0))))
 (let ((?x202 (* 16 ?x475)))
 (let ((?x444 (* c!3 n!0)))
 (let ((?x729 (* 16 ?x444)))
 (let ((?x439 (* (- 1) (* k!2 k!2))))
 (let ((?x670 (* 12 (* c!3 n!0 n!0))))
 (let ((?x721 (* 3 (* k!2 n!0 n!0 n!0))))
 (let ((?x272 (* 3 (* ?x569 ?x569 ?x569 ?x569 ?x739 ?x555 ?x555 ?x555 ?x203 ?x203 ?x203))))
 (let ((?x409 (* (- 1) (* c!3 m!1))))
 (let ((?x207 (* (- 1) (* c!3 m!1 n!0))))
 (let ((?x185 (* 7 c!3)))
 (let ((?x539 (+ ?x185 (* (- 3) (* ?x569 ?x569 ?x569 ?x569 ?x739 ?x555 ?x555 ?x203 ?x203)) ?x207 ?x409 (* (- 1) (* m!1 k!2 n!0)) ?x272 (* (- 1) (* ?x569 ?x569 ?x739 ?x555 ?x555 ?x555 ?x555 ?x203 ?x203 ?x203)) ?x721 ?x670 (* (- 3) (* ?x569 ?x569 ?x569 ?x739 ?x739 ?x739 ?x555 ?x555 ?x203)) ?x439 ?x729 ?x202 ?x473 (* ?x569 ?x569 ?x739 ?x555 ?x555 ?x555 ?x203 ?x203 ?x203) (* (- 3) (* ?x569 ?x569 ?x569 ?x569 ?x739 ?x739 ?x739 ?x555 ?x555 ?x203)) ?x158 (* (- 1) (* ?x569 ?x569 ?x739 ?x555 ?x555 ?x203 ?x203)) ?x193 ?x386 ?x421 (* ?x569 ?x569 ?x739 ?x555 ?x555 ?x555 ?x203 ?x203) (* (- 1) (* m!1 k!2)) (* (- 3) (* ?x569 ?x569 ?x569 ?x739 ?x555 ?x555 ?x203 ?x203)) (* (- 1) (* ?x569 ?x569 ?x739 ?x739 ?x739 ?x555 ?x555 ?x203)) ?x973 (* ?x569 ?x569 ?x739 ?x739 ?x739 ?x555 ?x555 ?x555 ?x203) (* 3 (* ?x569 ?x569 ?x569 ?x739 ?x555 ?x555 ?x555 ?x203 ?x203 ?x203)))))
 (let (($x488 (= ?x539 0)))
 (let (($x450 (not $x488)))
 (let ((?x436 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x477 (= ?x436 (- 1))))
 (let ((?x709 (* (- 9) n!0)))
 (let ((?x320 (* 5 k!2)))
 (let ((?x570 (* 9 ?x444)))
 (let ((?x708 (* 18 c!3)))
 (let ((?x574 (+ ?x708 ?x439 ?x570 ?x320 ?x709)))
 (let (($x468 (= ?x574 4)))
 (let ((?x116 (+ m!1 (* (- 6) n!0))))
 (let (($x128 (= ?x116 6)))
 (let (($x486 (and $x128 $x468 $x829 $x477 $x450)))
 (let ((?x479 (+ k!2 m!1)))
 (let ((?x728 (* 3 (* ?x569 ?x569 ?x569 ?x569 ?x739 ?x479 ?x479 ?x479 ?x203 ?x203 ?x203))))
 (let ((?x334 (+ ?x185 ?x158 ?x439 ?x202 (* 3 (* ?x569 ?x569 ?x569 ?x739 ?x479 ?x479 ?x479 ?x203 ?x203 ?x203)) ?x729 (* ?x569 ?x569 ?x739 ?x479 ?x479 ?x479 ?x203 ?x203 ?x203) (* ?x569 ?x569 ?x739 ?x479 ?x479 ?x479 ?x203 ?x203) ?x728 (* ?x569 ?x569 ?x739 ?x739 ?x739 ?x479 ?x479 ?x479 ?x203) (* (- 1) (* k!2 m!1)) ?x670 ?x386 (* (- 1) (* ?x569 ?x569 ?x739 ?x479 ?x479 ?x479 ?x479 ?x203 ?x203 ?x203)) (* (- 3) (* ?x569 ?x569 ?x569 ?x569 ?x739 ?x479 ?x479 ?x203 ?x203)) ?x721 ?x473 (* (- 1) (* ?x569 ?x569 ?x739 ?x479 ?x479 ?x203 ?x203)) ?x409 ?x193 (* (- 1) (* k!2 m!1 n!0)) ?x973 ?x207 ?x421 (* (- 3) (* ?x569 ?x569 ?x569 ?x739 ?x479 ?x479 ?x203 ?x203)) (* (- 1) (* ?x569 ?x569 ?x739 ?x739 ?x739 ?x479 ?x479 ?x203)) (* (- 3) (* ?x569 ?x569 ?x569 ?x739 ?x739 ?x739 ?x479 ?x479 ?x203)) (* (- 3) (* ?x569 ?x569 ?x569 ?x569 ?x739 ?x739 ?x739 ?x479 ?x479 ?x203)))))
 (let (($x561 (and $x128 (= (+ ?x708 ?x320 ?x709 ?x439 ?x570) 4) (= (+ ?x406 k!2 ?x478 ?x505) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x334 0)))))
 (let (($x238 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x966 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x891 (* (- 1) (* c k n))))
 (let ((?x898 (* (- 1) (* c m n))))
 (let ((?x893 (* (- 1) (* k k n))))
 (let ((?x900 (* (- 1) (* k m n))))
 (let ((?x895 (* (- 1) (* c k))))
 (let ((?x902 (* (- 1) (* c m))))
 (let ((?x466 (* 3 (* c n n n))))
 (let ((?x464 (* 3 (* k n n n))))
 (let ((?x897 (* 12 (* k n n))))
 (let ((?x904 (* 12 (* c n n))))
 (let ((?x901 (* (- 1) (* k m))))
 (let ((?x358 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x253 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x159 (* c n)))
 (let ((?x903 (* 16 ?x159)))
 (let ((?x55 (* k n)))
 (let ((?x914 (* 16 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x224 (* (- 1) ?x49)))
 (let ((?x916 (* 7 k)))
 (let ((?x911 (* 7 c)))
 (let ((?x295 (+ ?x911 ?x916 ?x224 ?x914 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x903 ?x210 ?x253 (* 3 ?x299) ?x358 ?x901 ?x904 ?x897 (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) ?x464 ?x466 (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) ?x902 ?x895 ?x900 ?x893 ?x898 ?x891 (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x966))))
 (let (($x311 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x273 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x221 (= (+ ?x40 ?x44 ?x223 ?x224 (* 9 ?x159)) 4)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (and $x137 $x221 $x273 $x311 (not (= ?x295 0))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x117 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x578 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x429 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x483 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x483 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x429 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)) ?x578 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x560 (not (= ?x228 0))))
 (let (($x536 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x584 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x224 (* (- 1) ?x49)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (and $x137 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x223 ?x224) 4) $x584 $x536 $x560)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x440 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x966 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x891 (* (- 1) (* c k n))))
 (let ((?x898 (* (- 1) (* c m n))))
 (let ((?x893 (* (- 1) (* k k n))))
 (let ((?x900 (* (- 1) (* k m n))))
 (let ((?x895 (* (- 1) (* c k))))
 (let ((?x902 (* (- 1) (* c m))))
 (let ((?x466 (* 3 (* c n n n))))
 (let ((?x464 (* 3 (* k n n n))))
 (let ((?x897 (* 12 (* k n n))))
 (let ((?x904 (* 12 (* c n n))))
 (let ((?x901 (* (- 1) (* k m))))
 (let ((?x358 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x253 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x159 (* c n)))
 (let ((?x903 (* 16 ?x159)))
 (let ((?x55 (* k n)))
 (let ((?x914 (* 16 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x224 (* (- 1) ?x49)))
 (let ((?x916 (* 7 k)))
 (let ((?x911 (* 7 c)))
 (let ((?x295 (+ ?x911 ?x916 ?x224 ?x914 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x903 ?x210 ?x253 (* 3 ?x299) ?x358 ?x901 ?x904 ?x897 (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) ?x464 ?x466 (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) ?x902 ?x895 ?x900 ?x893 ?x898 ?x891 (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x966))))
 (let (($x311 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x273 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x221 (= (+ ?x40 ?x44 ?x223 ?x224 (* 9 ?x159)) 4)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (let (($x205 (and $x137 $x221 $x273 $x311 (not (= ?x295 0)))))
 (let ((?x578 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x429 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x483 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x483 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x429 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) ?x358) ?x578 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 ?x966) (* (- 3) ?x299) (* (- 1) ?x253) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x560 (not (= ?x228 0))))
 (let (($x536 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x584 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x396 (and $x137 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x223 ?x224) 4) $x584 $x536 $x560)))
 (rewrite (= $x396 $x205))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x562 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x578 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x429 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x483 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x483 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x429 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)) ?x578 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x560 (not (= ?x228 0))))
 (let (($x536 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x465 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x747 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (and $x137 (= ?x747 (- 4)) $x465 $x536 $x560)))))))))))))))))) :qid k!34))
 ))
 (let ((?x119 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x578 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x429 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x483 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x483 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x429 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)) ?x578 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x560 (not (= ?x228 0))))
 (let (($x536 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x584 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x224 (* (- 1) ?x49)))
 (let ((?x223 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (let (($x396 (and $x137 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x223 ?x224) 4) $x584 $x536 $x560)))
 (let (($x465 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x747 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x546 (and $x137 (= ?x747 (- 4)) $x465 $x536 $x560)))
 (rewrite (= $x546 $x396)))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x76 (+ (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x69 ?x71))))
 (let ((?x80 (+ (- ?x76 (* ?x68 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x84 (- (- ?x80 (* 3 ?x68 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x87 (+ ?x84 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x91 (+ (- ?x87 (* 3 ?x68 ?x71 ?x71)) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x96 (- ?x91 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x98 (- (- ?x96 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x100 (= (- ?x98 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x100)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x551 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x319 (+ 6 m)))
 (let ((?x322 (+ 1 n)))
 (let ((?x210 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x299 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x578 (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)))
 (let ((?x429 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x483 (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x228 (+ ?x483 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x68 ?x68)) (* ?x322 ?x69 ?x68) (* (- 1) (* ?x322 ?x68)) ?x429 (* (- 3) (* ?x322 ?x322 ?x322 ?x68)) (* (- 1) (* ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x69 ?x68)) ?x578 (* 3 (* ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) (* ?x322 ?x322 ?x68)) (* 3 (* ?x322 ?x322 ?x322 ?x322 ?x319 ?x319 ?x319 ?x69 ?x69 ?x68)) (* (- 3) ?x299) (* (- 1) (* ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x322 ?x322 ?x322 ?x319 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x210))))
 (let (($x560 (not (= ?x228 0))))
 (let (($x536 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x465 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x747 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x137 (= (+ m (* (- 6) n)) 6)))
 (let (($x546 (and $x137 (= ?x747 (- 4)) $x465 $x536 $x560)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x76 (+ (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x69 ?x71))))
 (let ((?x80 (+ (- ?x76 (* ?x68 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x84 (- (- ?x80 (* 3 ?x68 ?x71 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x87 (+ ?x84 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x91 (+ (- ?x87 (* 3 ?x68 ?x71 ?x71)) (* 3 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x96 (- ?x91 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x98 (- (- ?x96 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let (($x100 (= (- ?x98 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x103 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x100)))))
 (rewrite (= $x103 $x546)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x219 (mp (mp @x105 (quant-intro (proof-bind ?x551) (= $x104 $x562)) $x562) (rewrite (= $x562 $x562)) $x562)))
 (let ((@x156 (mp (mp @x219 (quant-intro (proof-bind ?x119) (= $x562 $x117)) $x117) (quant-intro (proof-bind ?x440) (= $x117 $x238)) $x238)))
 (let ((@x168 (mp (mp~ @x156 (sk (~ $x238 $x561)) $x561) (rewrite (= $x561 $x486)) $x486)))
 (let ((@x545 (and-elim @x168 $x829)))
 (let ((@x472 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x829) $x332)) @x545 $x332)))
 (let (($x308 (>= ?x542 1)))
 (let ((@x755 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x829) $x308)) @x545 $x308)))
 (let (($x458 (<= ?x574 4)))
 (let ((@x707 (and-elim @x168 $x468)))
 (let ((@x432 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x458)) @x707 $x458)))
 (let (($x469 (>= ?x574 4)))
 (let ((@x921 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x469)) @x707 $x469)))
 (let (($x363 (<= ?x436 (- 1))))
 (let ((@x413 (and-elim @x168 $x477)))
 (let ((@x575 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x477) $x363)) @x413 $x363)))
 (let (($x338 (>= ?x436 (- 1))))
 (let ((@x456 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x477) $x338)) @x413 $x338)))
 (let (($x245 (<= ?x116 6)))
 (let ((@x206 (and-elim @x168 $x128)))
 (let ((@x792 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x128) $x245)) @x206 $x245)))
 (let (($x297 (>= ?x116 6)))
 (let ((@x494 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x128) $x297)) @x206 $x297)))
 (let (($x499 (not (<= ?x539 0))))
 (let (($x484 (>= ?x539 0)))
 (let ((@x243 ((_ th-lemma arith) (hypothesis (not $x484)) @x456 @x575 @x456 @x575 @x755 @x472 @x456 @x575 @x755 @x472 @x456 @x575 @x755 @x472 @x921 @x432 @x494 @x792 @x494 @x792 @x456 @x575 @x494 @x792 @x456 @x575 @x921 @x432 @x755 @x472 false)))
 (let ((@x126 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x488 $x499 (not $x484))) (and-elim @x168 $x450) (or $x499 (not $x484)))))
 ((_ th-lemma arith) (unit-resolution @x126 (lemma @x243 $x484) $x499) @x456 @x575 @x456 @x575 @x755 @x472 @x456 @x575 @x755 @x472 @x456 @x575 @x755 @x472 @x921 @x432 @x494 @x792 @x494 @x792 @x456 @x575 @x494 @x792 @x456 @x575 @x921 @x432 @x755 @x472 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        38
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           15
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             248
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      23
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 27
 :del-clause                16
 :final-checks              8
 :max-memory                3.85
 :memory                    3.25
 :mk-bool-var               47
 :mk-clause                 16
 :num-allocs                1911843
 :num-checks                1
 :propagations              10
 :rlimit-count              18212
 :time                      0.02
 :total-time                0.03)
