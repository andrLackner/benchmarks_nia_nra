unsat
((set-logic NIA)
(proof
(let (($x187 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x57 (* b00 p00)))
 (let ((?x55 (* a00 q00)))
 (let ((?x301 (* (- 1) ?x55)))
 (let ((?x317 (* (+ a (* (- 1) b)) q)))
 (let (($x369 (= (+ ?x317 ?x301 ?x57 (* (- 1) (* (+ p (* (- 1) q)) b))) 0)))
 (let (($x193 (not $x369)))
 (let ((?x364 (* (+ q (* (- 1) p)) a)))
 (let (($x285 (= (+ ?x364 ?x301 ?x57 (* (- 1) (* (+ b (* (- 1) a)) p))) 0)))
 (let (($x326 (not $x285)))
 (let (($x184 (or $x326 $x193)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x343 (* p00 s00 a)))
 (let ((?x303 (* b00 r00 p)))
 (let ((?x123 (+ ?x303 ?x343 (* (- 1) (* b00 p00 r)) (* (- 1) (* q00 r00 a)) (* (- 1) (* a00 s00 p)) ?x69)))
 (let (($x189 (= ?x123 0)))
 (let (($x221 (= (+ (* q a) ?x301 ?x57 (* (- 1) (* b p))) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x185 (* (- 1) ?x51)))
 (let ((?x229 (* s a)))
 (let ((?x325 (* (- 1) ?x229)))
 (let ((?x47 (* a00 s00)))
 (let ((?x197 (* r b)))
 (let ((?x329 (+ ?x197 ?x47 ?x325 ?x185)))
 (let (($x260 (= ?x329 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x130 (* (- 1) ?x41)))
 (let ((?x37 (* p00 s00)))
 (let ((?x276 (* s p)))
 (let ((?x277 (* (- 1) ?x276)))
 (let ((?x125 (* r q)))
 (let ((?x108 (+ ?x125 ?x277 ?x37 ?x130)))
 (let (($x135 (= ?x108 0)))
 (and $x135 $x260 $x221 $x189 $x217 $x184)))))))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x446 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! false :qid k!38))
 ))
 (let ((?x447 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x57 (* b00 p00)))
 (let ((?x55 (* a00 q00)))
 (let ((?x301 (* (- 1) ?x55)))
 (let ((?x317 (* (+ a (* (- 1) b)) q)))
 (let (($x369 (= (+ ?x317 ?x301 ?x57 (* (- 1) (* (+ p (* (- 1) q)) b))) 0)))
 (let (($x193 (not $x369)))
 (let ((?x364 (* (+ q (* (- 1) p)) a)))
 (let (($x285 (= (+ ?x364 ?x301 ?x57 (* (- 1) (* (+ b (* (- 1) a)) p))) 0)))
 (let (($x326 (not $x285)))
 (let (($x184 (or $x326 $x193)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x343 (* p00 s00 a)))
 (let ((?x303 (* b00 r00 p)))
 (let ((?x123 (+ ?x303 ?x343 (* (- 1) (* b00 p00 r)) (* (- 1) (* q00 r00 a)) (* (- 1) (* a00 s00 p)) ?x69)))
 (let (($x189 (= ?x123 0)))
 (let (($x221 (= (+ (* q a) ?x301 ?x57 (* (- 1) (* b p))) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x185 (* (- 1) ?x51)))
 (let ((?x229 (* s a)))
 (let ((?x325 (* (- 1) ?x229)))
 (let ((?x47 (* a00 s00)))
 (let ((?x197 (* r b)))
 (let ((?x329 (+ ?x197 ?x47 ?x325 ?x185)))
 (let (($x260 (= ?x329 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x130 (* (- 1) ?x41)))
 (let ((?x37 (* p00 s00)))
 (let ((?x276 (* s p)))
 (let ((?x277 (* (- 1) ?x276)))
 (let ((?x125 (* r q)))
 (let ((?x108 (+ ?x125 ?x277 ?x37 ?x130)))
 (let (($x135 (= ?x108 0)))
 (let (($x331 (and $x135 $x260 $x221 $x189 $x217 $x184)))
 (let ((?x171 (* (- 1) (* p b))))
 (let ((?x170 (* (- 1) (* q00 a00))))
 (let ((?x116 (* a q)))
 (let ((?x109 (* p00 b00)))
 (let (($x173 (= (+ ?x109 ?x116 ?x170 ?x171) 0)))
 (let (($x399 (not $x173)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x302 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x307 (= ?x302 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x238 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x239 (= ?x238 0)))
 (let ((?x138 (* r00 b00)))
 (let ((?x49 (* a s)))
 (let (($x153 (= (+ ?x49 (* (- 1) (* b r)) (* (- 1) (* s00 a00)) ?x138) 0)))
 (let (($x148 (= (+ (* p s) (* (- 1) ?x37) ?x41 (* (- 1) (* q r))) 0)))
 (let (($x436 (and $x148 $x153 $x173 $x239 $x307 $x399)))
 (let ((@x428 (monotonicity (rewrite (= $x326 $x399)) (rewrite (= $x193 $x399)) (= $x184 (or $x399 $x399)))))
 (let ((?x214 (* (- 1) ?x138)))
 (let ((?x120 (* s00 a00)))
 (let ((?x114 (* b r)))
 (let ((?x228 (* (- 1) ?x49)))
 (let ((?x242 (+ ?x228 ?x114 ?x120 ?x214)))
 (let (($x119 (= ?x242 0)))
 (let ((@x240 (monotonicity (rewrite (= ?x197 ?x114)) (rewrite (= ?x47 ?x120)) (rewrite (= ?x325 ?x228)) (rewrite (= ?x185 ?x214)) (= ?x329 (+ ?x114 ?x120 ?x228 ?x214)))))
 (let ((@x118 (trans @x240 (rewrite (= (+ ?x114 ?x120 ?x228 ?x214) ?x242)) (= ?x329 ?x242))))
 (let ((@x150 (trans (monotonicity @x118 (= $x260 $x119)) (rewrite (= $x119 $x153)) (= $x260 $x153))))
 (let ((?x112 (* q r)))
 (let ((?x33 (* p s)))
 (let ((?x368 (* (- 1) ?x33)))
 (let ((?x190 (+ ?x368 ?x37 ?x130 ?x112)))
 (let (($x224 (= ?x190 0)))
 (let ((@x213 (monotonicity (rewrite (= ?x125 ?x112)) (rewrite (= ?x277 ?x368)) (= ?x108 (+ ?x112 ?x368 ?x37 ?x130)))))
 (let ((@x241 (trans @x213 (rewrite (= (+ ?x112 ?x368 ?x37 ?x130) ?x190)) (= ?x108 ?x190))))
 (let ((@x220 (trans (monotonicity @x241 (= $x135 $x224)) (rewrite (= $x224 $x148)) (= $x135 $x148))))
 (let ((@x440 (monotonicity @x220 @x150 (rewrite (= $x221 $x173)) (rewrite (= $x189 $x239)) (rewrite (= $x217 $x307)) (trans @x428 (rewrite (= (or $x399 $x399) $x399)) (= $x184 $x399)) (= $x331 $x436))))
 (trans @x440 (rewrite (= $x436 false)) (= $x331 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x456 (trans (quant-intro (proof-bind ?x447) (= $x187 $x446)) (elim-unused (= $x446 false)) (= $x187 false))))
 (let (($x287 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x188 (* (+ p (* (- 1) q)) b)))
 (let ((?x57 (* b00 p00)))
 (let ((?x275 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let (($x216 (= (+ (* (- 1) (* (+ a (* (- 1) b)) q)) ?x55 ?x275 ?x188) 0)))
 (let ((?x208 (* (+ b (* (- 1) a)) p)))
 (let (($x233 (= (+ (* (- 1) (* (+ q (* (- 1) p)) a)) ?x55 ?x275 ?x208) 0)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x362 (* a00 s00 p)))
 (let ((?x353 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x107 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 ?x353 ?x362 (* (- 1) (* a00 q00 r)))))
 (let ((?x51 (* b00 r00)))
 (let ((?x229 (* s a)))
 (let (($x261 (= (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) ?x229 ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x276 (* s p)))
 (and (= (+ (* (- 1) (* r q)) ?x276 ?x129 ?x41) 0) $x261 (= (+ (* (- 1) (* q a)) ?x55 ?x275 (* b p)) 0) (= ?x107 0) $x217 (or (not $x233) (not $x216)))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x346 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x57 (* b00 p00)))
 (let ((?x55 (* a00 q00)))
 (let ((?x301 (* (- 1) ?x55)))
 (let ((?x317 (* (+ a (* (- 1) b)) q)))
 (let (($x369 (= (+ ?x317 ?x301 ?x57 (* (- 1) (* (+ p (* (- 1) q)) b))) 0)))
 (let (($x193 (not $x369)))
 (let ((?x364 (* (+ q (* (- 1) p)) a)))
 (let (($x285 (= (+ ?x364 ?x301 ?x57 (* (- 1) (* (+ b (* (- 1) a)) p))) 0)))
 (let (($x326 (not $x285)))
 (let (($x184 (or $x326 $x193)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x343 (* p00 s00 a)))
 (let ((?x303 (* b00 r00 p)))
 (let ((?x123 (+ ?x303 ?x343 (* (- 1) (* b00 p00 r)) (* (- 1) (* q00 r00 a)) (* (- 1) (* a00 s00 p)) ?x69)))
 (let (($x189 (= ?x123 0)))
 (let (($x221 (= (+ (* q a) ?x301 ?x57 (* (- 1) (* b p))) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x185 (* (- 1) ?x51)))
 (let ((?x229 (* s a)))
 (let ((?x325 (* (- 1) ?x229)))
 (let ((?x47 (* a00 s00)))
 (let ((?x197 (* r b)))
 (let ((?x329 (+ ?x197 ?x47 ?x325 ?x185)))
 (let (($x260 (= ?x329 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x130 (* (- 1) ?x41)))
 (let ((?x37 (* p00 s00)))
 (let ((?x276 (* s p)))
 (let ((?x277 (* (- 1) ?x276)))
 (let ((?x125 (* r q)))
 (let ((?x108 (+ ?x125 ?x277 ?x37 ?x130)))
 (let (($x135 (= ?x108 0)))
 (let (($x331 (and $x135 $x260 $x221 $x189 $x217 $x184)))
 (let ((?x188 (* (+ p (* (- 1) q)) b)))
 (let ((?x275 (* (- 1) ?x57)))
 (let (($x233 (= (+ (* (- 1) ?x364) ?x55 ?x275 (* (+ b (* (- 1) a)) p)) 0)))
 (let ((?x362 (* a00 s00 p)))
 (let ((?x353 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let (($x137 (= (+ (* (- 1) ?x303) (* (- 1) ?x343) ?x65 ?x353 ?x362 (* (- 1) ?x69)) 0)))
 (let (($x194 (and (= (+ (* (- 1) ?x125) ?x276 (* (- 1) ?x37) ?x41) 0) (= (+ (* (- 1) ?x197) (* (- 1) ?x47) ?x229 ?x51) 0) (= (+ (* (- 1) (* q a)) ?x55 ?x275 (* b p)) 0) $x137 $x217 (or (not $x233) (not (= (+ (* (- 1) ?x317) ?x55 ?x275 ?x188) 0))))))
 (rewrite (= $x194 $x331)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x57 (* b00 p00)))
 (let ((?x99 (+ (- (+ (* (- 1) a (- q p)) (* a00 q00)) ?x57) (* (- b a) p))))
 (let ((?x90 (+ (- (+ (* (- 1) (- a b) q) (* a00 q00)) ?x57) (* b (- p q)))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) (* a00 q00)) ?x57) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) ?x49 ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x42 (+ (- (+ (* (- 1) q r) (* p s)) (* p00 s00)) ?x41)))
 (and (= ?x42 0) $x53 $x61 (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= ?x90 0)) (not (= ?x99 0))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x255 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x188 (* (+ p (* (- 1) q)) b)))
 (let ((?x57 (* b00 p00)))
 (let ((?x275 (* (- 1) ?x57)))
 (let ((?x55 (* a00 q00)))
 (let (($x216 (= (+ (* (- 1) (* (+ a (* (- 1) b)) q)) ?x55 ?x275 ?x188) 0)))
 (let ((?x208 (* (+ b (* (- 1) a)) p)))
 (let (($x233 (= (+ (* (- 1) (* (+ q (* (- 1) p)) a)) ?x55 ?x275 ?x208) 0)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x211 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x217 (= ?x211 0)))
 (let ((?x362 (* a00 s00 p)))
 (let ((?x353 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x107 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 ?x353 ?x362 (* (- 1) (* a00 q00 r)))))
 (let ((?x51 (* b00 r00)))
 (let ((?x229 (* s a)))
 (let (($x261 (= (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) ?x229 ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x276 (* s p)))
 (let (($x194 (and (= (+ (* (- 1) (* r q)) ?x276 ?x129 ?x41) 0) $x261 (= (+ (* (- 1) (* q a)) ?x55 ?x275 (* b p)) 0) (= ?x107 0) $x217 (or (not $x233) (not $x216)))))
 (let ((?x99 (+ (- (+ (* (- 1) a (- q p)) ?x55) ?x57) (* (- b a) p))))
 (let ((?x90 (+ (- (+ (* (- 1) (- a b) q) ?x55) ?x57) (* b (- p q)))))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) ?x55) ?x57) (* b p)) 0)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (let (($x103 (and $x44 $x53 $x61 (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= ?x90 0)) (not (= ?x99 0))))))
 (rewrite (= $x103 $x194)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x286 (mp (mp @x105 (quant-intro (proof-bind ?x255) (= $x104 $x287)) $x287) (rewrite (= $x287 $x287)) $x287)))
 (mp (mp @x286 (quant-intro (proof-bind ?x346) (= $x287 $x187)) $x187) @x456 false)))))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  6
 :num-allocs   966465
 :num-checks   1
 :rlimit-count 1031
 :time         0.01
 :total-time   0.02)
