unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x249 (* (- 1) y!0)))
 (let ((?x277 (* (- 1) x!1)))
 (let ((?x80 (+ y00 x00 ?x277 ?x249)))
 (let (($x285 (>= ?x80 0)))
 (let (($x229 (= ?x80 0)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x121 (+ ?x69 ?x76 x!1 y!0)))
 (let ((?x337 (* y!0 y!0)))
 (let ((?x330 (* (- 1) ?x337)))
 (let ((?x335 (* x!1 x!1)))
 (let ((?x211 (+ 1 y!0)))
 (let ((?x324 (+ (- 1) x!1)))
 (let ((?x98 (* (- 1) (* ?x324 ?x324 ?x324 ?x211 ?x211 ?x211))))
 (let ((?x127 (* x!1 y!0 y!0)))
 (let ((?x99 (* x!1 x!1 y!0)))
 (let ((?x117 (* ?x211 (+ ?x99 ?x127 ?x98 ?x335 ?x330 ?x277 ?x249) ?x121)))
 (let (($x274 (= ?x117 0)))
 (let (($x119 (not $x274)))
 (let ((?x331 (* (- 1) ?x335)))
 (let ((?x140 (+ 1 x!1)))
 (let ((?x276 (+ (- 1) y!0)))
 (let ((?x339 (* (- 1) (* ?x276 ?x276 ?x276 ?x140 ?x140 ?x140))))
 (let ((?x84 (* ?x276 (+ ?x99 ?x127 ?x339 ?x331 ?x337 ?x277 ?x249) ?x121)))
 (let (($x82 (= ?x84 0)))
 (let (($x161 (or (not $x82) $x119)))
 (let (($x222 (and $x229 $x161)))
 (let ((?x345 (+ x!1 y!0 ?x69 ?x76)))
 (let (($x340 (not (= (* ?x211 (+ ?x277 ?x249 ?x99 ?x335 ?x98 ?x127 ?x330) ?x345) 0))))
 (let (($x223 (not (= (* ?x276 (+ ?x277 ?x249 ?x339 ?x99 ?x331 ?x127 ?x337) ?x345) 0))))
 (let (($x145 (and (= ?x345 0) (or $x223 $x340))))
 (let (($x338 (exists ((x Int) (y Int) )(! (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x281 (* y y)))
 (let ((?x279 (* (- 1) ?x281)))
 (let ((?x280 (* x y y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let ((?x170 (* x x)))
 (let ((?x159 (* x x y)))
 (let ((?x154 (* (- 1) y)))
 (let ((?x167 (* (- 1) x)))
 (let (($x142 (not (= (* ?x129 (+ ?x167 ?x154 ?x159 ?x170 ?x304 ?x280 ?x279) ?x90) 0))))
 (let ((?x218 (* (- 1) ?x170)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x267 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x358 (not (= (* ?x133 (+ ?x167 ?x154 ?x267 ?x159 ?x218 ?x280 ?x281) ?x90) 0))))
 (let (($x95 (= ?x90 0)))
 (and $x95 (or $x358 $x142)))))))))))))))))))))) :qid k!27))
 ))
 (let (($x168 (exists ((x Int) (y Int) )(! (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x286 (* (- 1) (* y 1))))
 (let ((?x281 (* y y)))
 (let ((?x279 (* (- 1) ?x281)))
 (let ((?x280 (* x y y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let ((?x170 (* x x)))
 (let ((?x159 (* x x y)))
 (let ((?x152 (* (- 1) (* x 1))))
 (let ((?x248 (+ ?x152 ?x159 ?x170 ?x304 ?x280 ?x279 ?x286)))
 (let ((?x218 (* (- 1) ?x170)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x267 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x270 (not (= (* ?x133 (+ ?x267 ?x152 ?x159 ?x218 ?x280 ?x281 ?x286) ?x90) 0))))
 (let (($x95 (= ?x90 0)))
 (and $x95 (or $x270 (not (= (* ?x129 ?x248 ?x90) 0)))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x188 (lambda ((x Int) (y Int) )(let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x281 (* y y)))
 (let ((?x279 (* (- 1) ?x281)))
 (let ((?x280 (* x y y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let ((?x170 (* x x)))
 (let ((?x159 (* x x y)))
 (let ((?x154 (* (- 1) y)))
 (let ((?x167 (* (- 1) x)))
 (let (($x142 (not (= (* ?x129 (+ ?x167 ?x154 ?x159 ?x170 ?x304 ?x280 ?x279) ?x90) 0))))
 (let ((?x218 (* (- 1) ?x170)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x267 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x358 (not (= (* ?x133 (+ ?x167 ?x154 ?x267 ?x159 ?x218 ?x280 ?x281) ?x90) 0))))
 (let (($x95 (= ?x90 0)))
 (let (($x87 (and $x95 (or $x358 $x142))))
 (let ((?x286 (* (- 1) (* y 1))))
 (let ((?x152 (* (- 1) (* x 1))))
 (let ((?x248 (+ ?x152 ?x159 ?x170 ?x304 ?x280 ?x279 ?x286)))
 (let (($x270 (not (= (* ?x133 (+ ?x267 ?x152 ?x159 ?x218 ?x280 ?x281 ?x286) ?x90) 0))))
 (let (($x336 (and $x95 (or $x270 (not (= (* ?x129 ?x248 ?x90) 0))))))
 (rewrite (= $x336 $x87)))))))))))))))))))))))))))))
 ))
 (let (($x326 (exists ((x Int) (y Int) )(! (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x327 (+ x ?x69 ?x76 y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let (($x296 (= (* ?x129 (+ (* ?x85 ?x85 ?x129) ?x304 (* ?x85 ?x129 ?x129)) ?x327) 0)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x267 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x301 (= (* ?x133 (+ (* ?x133 ?x147 ?x147) ?x267 (* ?x133 ?x133 ?x147)) ?x327) 0)))
 (and (= ?x327 0) (or (not $x301) (not $x296)))))))))))))) :qid k!27))
 ))
 (let ((?x367 (lambda ((x Int) (y Int) )(let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x286 (* (- 1) (* y 1))))
 (let ((?x281 (* y y)))
 (let ((?x279 (* (- 1) ?x281)))
 (let ((?x280 (* x y y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let ((?x170 (* x x)))
 (let ((?x159 (* x x y)))
 (let ((?x152 (* (- 1) (* x 1))))
 (let ((?x248 (+ ?x152 ?x159 ?x170 ?x304 ?x280 ?x279 ?x286)))
 (let ((?x218 (* (- 1) ?x170)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x267 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x270 (not (= (* ?x133 (+ ?x267 ?x152 ?x159 ?x218 ?x280 ?x281 ?x286) ?x90) 0))))
 (let (($x95 (= ?x90 0)))
 (let (($x336 (and $x95 (or $x270 (not (= (* ?x129 ?x248 ?x90) 0))))))
 (let ((?x327 (+ x ?x69 ?x76 y)))
 (let (($x296 (= (* ?x129 (+ (* ?x85 ?x85 ?x129) ?x304 (* ?x85 ?x129 ?x129)) ?x327) 0)))
 (let (($x301 (= (* ?x133 (+ (* ?x133 ?x147 ?x147) ?x267 (* ?x133 ?x133 ?x147)) ?x327) 0)))
 (let (($x244 (and (= ?x327 0) (or (not $x301) (not $x296)))))
 (rewrite (= $x244 $x336))))))))))))))))))))))))))))
 ))
 (let (($x66 (exists ((x Int) (y Int) )(! (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x60 (+ (- (* ?x49 ?x49 ?x52) (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52)) (* ?x49 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ ?x52 (* 0 ?x49 ?x52 ?x52 ?x52)) ?x60)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (+ (- (* ?x34 ?x34 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38)) (* ?x34 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ y 1 (* 0 ?x34 ?x38 ?x38 ?x38)) ?x45)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0)))))))))))) :qid k!27))
 ))
 (let ((?x325 (lambda ((x Int) (y Int) )(let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x327 (+ x ?x69 ?x76 y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let (($x296 (= (* ?x129 (+ (* ?x85 ?x85 ?x129) ?x304 (* ?x85 ?x129 ?x129)) ?x327) 0)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x267 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x301 (= (* ?x133 (+ (* ?x133 ?x147 ?x147) ?x267 (* ?x133 ?x133 ?x147)) ?x327) 0)))
 (let (($x244 (and (= ?x327 0) (or (not $x301) (not $x296)))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x60 (+ (- (* ?x49 ?x49 ?x52) (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52)) (* ?x49 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ ?x52 (* 0 ?x49 ?x52 ?x52 ?x52)) ?x60)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (+ (- (* ?x34 ?x34 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38)) (* ?x34 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ y 1 (* 0 ?x34 ?x38 ?x38 ?x38)) ?x45)))
 (let (($x65 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0))))))
 (rewrite (= $x65 $x244))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x122 (mp (mp @x67 (quant-intro (proof-bind ?x325) (= $x66 $x326)) $x326) (rewrite (= $x326 $x326)) $x326)))
 (let ((@x209 (mp (mp @x122 (quant-intro (proof-bind ?x367) (= $x326 $x168)) $x168) (quant-intro (proof-bind ?x188) (= $x168 $x338)) $x338)))
 (let ((@x259 (mp (mp~ @x209 (sk (~ $x338 $x145)) $x145) (rewrite (= $x145 $x222)) $x222)))
 (let ((@x112 (and-elim @x259 $x229)))
 (let ((@x224 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x229) $x285)) @x112 $x285)))
 (let (($x74 (<= ?x80 0)))
 (let ((@x78 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x229) $x74)) @x112 $x74)))
 (let (($x359 (not (<= ?x117 0))))
 (let (($x71 (>= ?x117 0)))
 (let (($x266 (>= ?x84 0)))
 (let (($x247 (<= ?x84 0)))
 (let ((@x79 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x82 (not $x247) (not $x266))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x247)) @x78 @x224 false) $x247) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x266)) @x78 @x224 false) $x266) $x82)))
 (let ((@x263 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x274 $x359 (not $x71))) (unit-resolution (and-elim @x259 $x161) @x79 $x119) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x71)) @x78 @x224 false) $x71) $x359)))
 ((_ th-lemma arith farkas 1 1 1) @x263 @x78 @x224 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             128
 :arith-nonlinear-bounds    8
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.46
 :memory                    3.05
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1126684
 :num-checks                1
 :propagations              14
 :rlimit-count              2123
 :time                      0.01
 :total-time                0.01)
