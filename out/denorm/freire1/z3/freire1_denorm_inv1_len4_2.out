unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x493 (* r!1 r!1)))
 (let ((?x363 (* 2 x!0)))
 (let ((?x220 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x366 (+ r00 ?x86 ?x102 ?x220 ?x363 ?x493)))
 (let (($x166 (<= ?x366 0)))
 (let (($x447 (= ?x366 0)))
 (let ((?x317 (* (- 1) x!0)))
 (let ((?x479 (* 3 r!1)))
 (let ((?x311 (* 7 (* r!1 r!1 x!0))))
 (let ((?x402 (* r!1 x!0)))
 (let ((?x375 (* r!1 x!0 x!0 x!0)))
 (let ((?x371 (* x!0 x!0 x!0)))
 (let ((?x296 (* (- 1) (* x!0 x!0))))
 (let ((?x357 (* 5 (* r!1 r!1 r!1 x!0))))
 (let ((?x191 (* (- 5) (* r!1 x!0 x!0))))
 (let ((?x87 (* (- 3) (* r!1 r!1 r!1))))
 (let ((?x175 (* (- 4) (* r!1 r!1 x!0 x!0))))
 (let ((?x89 (* (- 2) (* r!1 r!1 r!1 r!1))))
 (let ((?x376 (+ 1 ?x89 ?x175 ?x87 ?x191 ?x357 ?x296 ?x371 ?x375 ?x402 ?x311 ?x479 ?x317 ?x493)))
 (let ((?x140 (* ?x376 ?x366)))
 (let (($x149 (= ?x140 0)))
 (let (($x125 (not $x149)))
 (let (($x152 (and $x447 $x125)))
 (let ((?x335 (+ 1 ?x479 ?x317 ?x493 ?x402 ?x296 ?x191 ?x175 ?x87 ?x89 ?x311 ?x357 ?x371 ?x375)))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x392 (and (= (+ r!1 (* (- 2) x!0) ?x117 (* (- 1) ?x493) ?x35 ?x36) 0) (not (= (* ?x335 (+ ?x220 ?x363 r00 ?x493 ?x86 ?x102)) 0)))))
 (let (($x384 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x404 (* r x x x)))
 (let ((?x403 (* x x x)))
 (let ((?x508 (* 5 (* r r r x))))
 (let ((?x506 (* 7 (* r r x))))
 (let ((?x504 (* (- 2) (* r r r r))))
 (let ((?x503 (* (- 3) (* r r r))))
 (let ((?x502 (* (- 4) (* r r x x))))
 (let ((?x501 (* (- 5) (* r x x))))
 (let ((?x355 (* (- 1) (* x x))))
 (let ((?x221 (* r x)))
 (let ((?x230 (* (- 1) x)))
 (let ((?x247 (* 3 r)))
 (let ((?x250 (+ 1 ?x247 ?x230 ?x30 ?x221 ?x355 ?x501 ?x502 ?x503 ?x504 ?x506 ?x508 ?x403 ?x404)))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let ((?x116 (* (- 2) x)))
 (let (($x120 (= (+ r ?x116 ?x117 ?x118 ?x35 ?x36) 0)))
 (and $x120 (not (= (* ?x250 ?x108) 0)))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x145 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x348 (+ 1 r)))
 (let ((?x373 (* ?x348 ?x348)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x132 (+ x ?x65)))
 (let ((?x433 (+ (* (- 1) (* ?x348 ?x132)) ?x373 (* (- 1) (* ?x348 ?x348 ?x132 ?x132)) (* ?x348 ?x132 ?x132 ?x132))))
 (let (($x443 (= (* ?x433 (+ (- 1) (* (- 3) r) r00 ?x373 ?x32 ?x86 ?x102)) 0)))
 (let (($x338 (not $x443)))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x338))))))))))))))))) :qid k!26))
 ))
 (let ((?x157 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x108 (+ ?x65 ?x32 r00 ?x30 ?x86 ?x102)))
 (let ((?x404 (* r x x x)))
 (let ((?x403 (* x x x)))
 (let ((?x508 (* 5 (* r r r x))))
 (let ((?x506 (* 7 (* r r x))))
 (let ((?x504 (* (- 2) (* r r r r))))
 (let ((?x503 (* (- 3) (* r r r))))
 (let ((?x502 (* (- 4) (* r r x x))))
 (let ((?x501 (* (- 5) (* r x x))))
 (let ((?x355 (* (- 1) (* x x))))
 (let ((?x221 (* r x)))
 (let ((?x230 (* (- 1) x)))
 (let ((?x247 (* 3 r)))
 (let ((?x250 (+ 1 ?x247 ?x230 ?x30 ?x221 ?x355 ?x501 ?x502 ?x503 ?x504 ?x506 ?x508 ?x403 ?x404)))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let ((?x116 (* (- 2) x)))
 (let (($x120 (= (+ r ?x116 ?x117 ?x118 ?x35 ?x36) 0)))
 (let (($x273 (and $x120 (not (= (* ?x250 ?x108) 0)))))
 (let ((?x348 (+ 1 r)))
 (let ((?x373 (* ?x348 ?x348)))
 (let ((?x433 (+ (* (- 1) (* ?x348 (+ x ?x65))) ?x373 (* (- 1) (* ?x348 ?x348 (+ x ?x65) (+ x ?x65))) (* ?x348 (+ x ?x65) (+ x ?x65) (+ x ?x65)))))
 (let (($x443 (= (* ?x433 (+ (- 1) (* (- 3) r) r00 ?x373 ?x32 ?x86 ?x102)) 0)))
 (let (($x338 (not $x443)))
 (let (($x142 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x338)))
 (rewrite (= $x142 $x273)))))))))))))))))))))))))))))))))))
 ))
 (let (($x354 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x348 (+ 1 r)))
 (let ((?x373 (* ?x348 ?x348)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x132 (+ x ?x65)))
 (let ((?x433 (+ (* (- 1) (* ?x348 ?x132)) ?x373 (* (- 1) (* ?x348 ?x348 ?x132 ?x132)) (* ?x348 ?x132 ?x132 ?x132))))
 (let (($x443 (= (* ?x433 (+ (- 1) (* (- 3) r) r00 ?x373 ?x32 ?x86 ?x102)) 0)))
 (let (($x338 (not $x443)))
 (and (= (+ ?x65 r00 (* r r) ?x32 ?x86 ?x102) 0) $x338)))))))))))) :qid k!26))
 ))
 (let ((?x151 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x348 (+ 1 r)))
 (let ((?x373 (* ?x348 ?x348)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x132 (+ x ?x65)))
 (let ((?x433 (+ (* (- 1) (* ?x348 ?x132)) ?x373 (* (- 1) (* ?x348 ?x348 ?x132 ?x132)) (* ?x348 ?x132 ?x132 ?x132))))
 (let (($x443 (= (* ?x433 (+ (- 1) (* (- 3) r) r00 ?x373 ?x32 ?x86 ?x102)) 0)))
 (let (($x338 (not $x443)))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x118 (* (- 1) ?x30)))
 (let ((?x117 (* (- 1) r00)))
 (let (($x142 (and (= (+ r ?x117 ?x118 ?x116 ?x35 ?x36) 0) $x338)))
 (let (($x349 (and (= (+ ?x65 r00 ?x30 ?x32 ?x86 ?x102) 0) $x338)))
 (rewrite (= $x349 $x142)))))))))))))))))))))
 ))
 (let (($x60 (exists ((r Int) (x Int) )(! (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x52 (- (+ (* (- 1) ?x41 (- x r)) ?x43) (* ?x41 ?x41 (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 (- x r))) ?x35) ?x36)))
 (let ((?x55 (* ?x48 (+ ?x52 (* ?x41 (- x r) (- x r) (- x r))))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x55 0)))))))))))) :qid k!26))
 ))
 (let ((?x362 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x102 (* (- 1) ?x36)))
 (let ((?x86 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x348 (+ 1 r)))
 (let ((?x373 (* ?x348 ?x348)))
 (let ((?x65 (* (- 1) r)))
 (let ((?x132 (+ x ?x65)))
 (let ((?x433 (+ (* (- 1) (* ?x348 ?x132)) ?x373 (* (- 1) (* ?x348 ?x348 ?x132 ?x132)) (* ?x348 ?x132 ?x132 ?x132))))
 (let (($x443 (= (* ?x433 (+ (- 1) (* (- 3) r) r00 ?x373 ?x32 ?x86 ?x102)) 0)))
 (let (($x338 (not $x443)))
 (let (($x349 (and (= (+ ?x65 r00 (* r r) ?x32 ?x86 ?x102) 0) $x338)))
 (let ((?x41 (+ r 1)))
 (let ((?x43 (* ?x41 ?x41)))
 (let ((?x52 (- (+ (* (- 1) ?x41 (- x r)) ?x43) (* ?x41 ?x41 (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 ?x43 (* 2 (- x r))) ?x35) ?x36)))
 (let ((?x55 (* ?x48 (+ ?x52 (* ?x41 (- x r) (- x r) (- x r))))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x59 (and $x40 (or (not (= ?x55 0))))))
 (rewrite (= $x59 $x349)))))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x361 (mp (mp @x61 (quant-intro (proof-bind ?x362) (= $x60 $x354)) $x354) (rewrite (= $x354 $x354)) $x354)))
 (let ((@x477 (mp (mp @x361 (quant-intro (proof-bind ?x151) (= $x354 $x145)) $x145) (quant-intro (proof-bind ?x157) (= $x145 $x384)) $x384)))
 (let ((@x174 (mp (mp~ @x477 (sk (~ $x384 $x392)) $x392) (rewrite (= $x392 $x152)) $x152)))
 (let ((@x150 (and-elim @x174 $x447)))
 (let ((@x228 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x447) $x166)) @x150 $x166)))
 (let (($x167 (>= ?x366 0)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x447) $x167)) @x150 $x167)))
 (let (($x437 (not (>= ?x140 0))))
 (let (($x168 (<= ?x140 0)))
 (let ((@x165 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x149 (not $x168) $x437)) (and-elim @x174 $x125) (or (not $x168) $x437))))
 (let ((@x164 (unit-resolution @x165 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x168)) @x332 @x228 false) $x168) $x437)))
 ((_ th-lemma arith farkas 1 1 1) @x164 @x332 @x228 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.49
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1054416
 :num-checks                1
 :propagations              4
 :rlimit-count              1663
 :time                      0.01
 :total-time                0.01)
