unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x215 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x186 (>= ?x215 0)))
 (let (($x171 (= ?x215 0)))
 (let ((?x125 (* 2 (* x!1 x!1 y!0))))
 (let ((?x244 (* x!1 x!1)))
 (let ((?x238 (* y!0 y!0)))
 (let ((?x236 (* x!1 x!1 y!0 y!0)))
 (let ((?x222 (* 2 y!0)))
 (let ((?x230 (* (- 3) (* x!1 y!0 y!0))))
 (let ((?x221 (* (- 3) x!1)))
 (let ((?x121 (* (- 6) (* x!1 y!0))))
 (let ((?x141 (* (+ 1 ?x121 ?x221 ?x230 ?x222 ?x236 ?x238 ?x244 ?x125) (+ (* (- 1) y00) (* (- 1) x00) x!1 y!0))))
 (let (($x204 (= ?x141 0)))
 (let (($x205 (not $x204)))
 (let (($x140 (and $x171 $x205)))
 (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x234 (+ x!1 y!0 ?x52 ?x59)))
 (let (($x124 (= (* (+ 1 ?x221 ?x222 ?x238 ?x230 ?x236 ?x244 ?x121 ?x125) ?x234) 0)))
 (let (($x155 (and (= ?x234 0) (not $x124))))
 (let (($x133 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x185 (* 2 (* x x y))))
 (let ((?x156 (* x x)))
 (let ((?x145 (* x x y y)))
 (let ((?x313 (* (- 3) (* x y y))))
 (let ((?x139 (* y y)))
 (let ((?x182 (* 2 y)))
 (let ((?x243 (+ 1 (* (- 3) x) ?x182 ?x139 ?x313 ?x145 ?x156 (* (- 6) (* x y)) ?x185)))
 (let (($x78 (= ?x73 0)))
 (and $x78 (not (= (* ?x243 ?x73) 0)))))))))))))) :qid k!26))
 ))
 (let (($x278 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x185 (* 2 (* x x y))))
 (let ((?x156 (* x x)))
 (let ((?x145 (* x x y y)))
 (let ((?x313 (* (- 3) (* x y y))))
 (let ((?x139 (* y y)))
 (let ((?x182 (* 2 y)))
 (let ((?x316 (+ 1 (* (- 2) x) ?x182 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x139 ?x313 ?x145 ?x156 (* (- 4) (* x y)) ?x185)))
 (let (($x78 (= ?x73 0)))
 (and $x78 (not (= (* ?x316 ?x73) 0)))))))))))))) :qid k!26))
 ))
 (let ((?x163 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x185 (* 2 (* x x y))))
 (let ((?x156 (* x x)))
 (let ((?x145 (* x x y y)))
 (let ((?x313 (* (- 3) (* x y y))))
 (let ((?x139 (* y y)))
 (let ((?x182 (* 2 y)))
 (let ((?x243 (+ 1 (* (- 3) x) ?x182 ?x139 ?x313 ?x145 ?x156 (* (- 6) (* x y)) ?x185)))
 (let (($x78 (= ?x73 0)))
 (let (($x167 (and $x78 (not (= (* ?x243 ?x73) 0)))))
 (let ((?x316 (+ 1 (* (- 2) x) ?x182 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x139 ?x313 ?x145 ?x156 (* (- 4) (* x y)) ?x185)))
 (let (($x126 (and $x78 (not (= (* ?x316 ?x73) 0)))))
 (rewrite (= $x126 $x167)))))))))))))))))
 ))
 (let (($x119 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x260 (+ x ?x52 ?x59 y)))
 (let ((?x237 (+ (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (- 1) (* (+ 1 y) (+ 1 y))) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (and (= ?x260 0) (not (= (* ?x237 ?x260) 0))))))) :qid k!26))
 ))
 (let ((?x114 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x185 (* 2 (* x x y))))
 (let ((?x156 (* x x)))
 (let ((?x145 (* x x y y)))
 (let ((?x313 (* (- 3) (* x y y))))
 (let ((?x139 (* y y)))
 (let ((?x182 (* 2 y)))
 (let ((?x316 (+ 1 (* (- 2) x) ?x182 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x139 ?x313 ?x145 ?x156 (* (- 4) (* x y)) ?x185)))
 (let (($x78 (= ?x73 0)))
 (let (($x126 (and $x78 (not (= (* ?x316 ?x73) 0)))))
 (let ((?x260 (+ x ?x52 ?x59 y)))
 (let ((?x237 (+ (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (- 1) (* (+ 1 y) (+ 1 y))) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let (($x160 (and (= ?x260 0) (not (= (* ?x237 ?x260) 0)))))
 (rewrite (= $x160 $x126))))))))))))))))))
 ))
 (let (($x49 (exists ((x Int) (y Int) )(! (let ((?x42 (- (* (- x 1) (- x 1) (+ y 1) (+ y 1)) (* (+ y 1) (+ y 1)))))
 (let ((?x44 (* (+ (- (- (- x 1) y00) x00) y 1) (- ?x42 (* (- x 1) (+ y 1) (+ y 1))))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x44 0)))))) :qid k!26))
 ))
 (let ((?x154 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x260 (+ x ?x52 ?x59 y)))
 (let ((?x237 (+ (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (- 1) (* (+ 1 y) (+ 1 y))) (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y))))))
 (let (($x160 (and (= ?x260 0) (not (= (* ?x237 ?x260) 0)))))
 (let ((?x42 (- (* (- x 1) (- x 1) (+ y 1) (+ y 1)) (* (+ y 1) (+ y 1)))))
 (let ((?x44 (* (+ (- (- (- x 1) y00) x00) y 1) (- ?x42 (* (- x 1) (+ y 1) (+ y 1))))))
 (let (($x48 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x44 0))))))
 (rewrite (= $x48 $x160)))))))))))
 ))
 (let ((@x50 (asserted $x49)))
 (let ((@x131 (mp (mp @x50 (quant-intro (proof-bind ?x154) (= $x49 $x119)) $x119) (rewrite (= $x119 $x119)) $x119)))
 (let ((@x153 (mp (mp @x131 (quant-intro (proof-bind ?x114) (= $x119 $x278)) $x278) (quant-intro (proof-bind ?x163) (= $x278 $x133)) $x133)))
 (let ((@x62 (mp (mp~ @x153 (sk (~ $x133 $x155)) $x155) (rewrite (= $x155 $x140)) $x140)))
 (let ((@x306 (and-elim @x62 $x171)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x186)) @x306 $x186)))
 (let (($x180 (<= ?x215 0)))
 (let ((@x264 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x180)) @x306 $x180)))
 (let (($x214 (not (>= ?x141 0))))
 (let (($x184 (<= ?x141 0)))
 (let ((@x179 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x204 (not $x184) $x214)) (and-elim @x62 $x205) (or (not $x184) $x214))))
 (let ((@x146 (unit-resolution @x179 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x184)) @x264 @x301 false) $x184) $x214)))
 ((_ th-lemma arith farkas 1 1 1) @x146 @x264 @x301 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             42
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 19
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.48
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1050656
 :num-checks                1
 :propagations              4
 :rlimit-count              1406
 :time                      0.01
 :total-time                0.01)
