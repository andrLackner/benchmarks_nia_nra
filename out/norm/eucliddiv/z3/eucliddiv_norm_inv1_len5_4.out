unsat
((set-logic NIA)
(proof
(let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x47 (- r y00)))
 (let ((?x51 (* ?x47 ?x47 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x45 (* ?x42 y00 y00 y00)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x47 ?x47 y00)))
 (let ((?x48 (* ?x42 ?x47 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x46 (+ ?x43 ?x44 ?x45)))
 (let ((?x49 (- ?x46 ?x48)))
 (let ((?x52 (+ ?x49 ?x50 ?x48 ?x51)))
 (let ((?x53 (- ?x52 ?x50)))
 (let ((?x54 (- ?x53 ?x45)))
 (let ((?x55 (- ?x54 ?x51)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x58))))))))))))))))))))) :qid k!29))
 ))
 (let (($x299 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x300 (lambda ((q Int) (r Int) (y Int) )(let ((?x47 (- r y00)))
 (let ((?x51 (* ?x47 ?x47 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x45 (* ?x42 y00 y00 y00)))
 (let ((?x50 (* ?x42 ?x42 ?x42 ?x47 ?x47 y00)))
 (let ((?x48 (* ?x42 ?x47 y00 y00)))
 (let ((?x44 (* ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x46 (+ ?x43 ?x44 ?x45)))
 (let ((?x49 (- ?x46 ?x48)))
 (let ((?x52 (+ ?x49 ?x50 ?x48 ?x51)))
 (let ((?x53 (- ?x52 ?x50)))
 (let ((?x54 (- ?x53 ?x45)))
 (let ((?x55 (- ?x54 ?x51)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x59 (and $x33 $x41 $x58)))
 (let (($x185 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x232 (= (+ (* (- 1) y00) y) 0)))
 (let (($x288 (and $x232 $x185 false)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x159 (+ r ?x65)))
 (let ((?x388 (* y00 ?x159 ?x159)))
 (let ((?x251 (+ ?x388 (* (- 1) ?x388))))
 (let ((@x161 (rewrite (= ?x47 ?x159))))
 (let ((@x120 (trans (monotonicity @x161 @x161 (= ?x51 (* ?x159 ?x159 y00))) (rewrite (= (* ?x159 ?x159 y00) ?x388)) (= ?x51 ?x388))))
 (let ((?x89 (+ 1 q)))
 (let ((?x281 (* y00 y00 y00 ?x89)))
 (let ((?x224 (+ ?x281 ?x388)))
 (let ((?x236 (+ ?x224 (* (- 1) ?x281))))
 (let ((@x93 (rewrite (= ?x42 ?x89))))
 (let ((@x226 (trans (monotonicity @x93 (= ?x45 (* ?x89 y00 y00 y00))) (rewrite (= (* ?x89 y00 y00 y00) ?x281)) (= ?x45 ?x281))))
 (let ((?x381 (* y00 ?x89 ?x89 ?x89 ?x159 ?x159)))
 (let ((?x125 (+ ?x281 ?x381 ?x388)))
 (let ((?x135 (+ ?x125 (* (- 1) ?x381))))
 (let ((@x380 (monotonicity @x93 @x93 @x93 @x161 @x161 (= ?x50 (* ?x89 ?x89 ?x89 ?x159 ?x159 y00)))))
 (let ((@x384 (trans @x380 (rewrite (= (* ?x89 ?x89 ?x89 ?x159 ?x159 y00) ?x381)) (= ?x50 ?x381))))
 (let ((?x234 (* y00 y00 ?x89 ?x159)))
 (let ((?x271 (+ ?x281 (* (- 1) ?x234))))
 (let ((?x121 (+ ?x271 ?x381 ?x234 ?x388)))
 (let ((@x375 (trans (monotonicity @x93 @x161 (= ?x48 (* ?x89 ?x159 y00 y00))) (rewrite (= (* ?x89 ?x159 y00 y00) ?x234)) (= ?x48 ?x234))))
 (let ((?x123 (* y00 y00 y00 y00 ?x89 ?x89 ?x89)))
 (let ((?x124 (* (- 1) ?x123)))
 (let ((?x415 (+ ?x124 ?x123 ?x281)))
 (let ((@x181 (monotonicity @x93 @x93 @x93 (= ?x44 (* ?x89 ?x89 ?x89 y00 y00 y00 y00)))))
 (let ((@x187 (trans @x181 (rewrite (= (* ?x89 ?x89 ?x89 y00 y00 y00 y00) ?x123)) (= ?x44 ?x123))))
 (let ((@x104 (monotonicity (rewrite (= ?x28 (- 1))) @x93 @x93 @x93 (= ?x43 (* (- 1) ?x89 ?x89 ?x89 y00 y00 y00 y00)))))
 (let ((@x179 (trans @x104 (rewrite (= (* (- 1) ?x89 ?x89 ?x89 y00 y00 y00 y00) ?x124)) (= ?x43 ?x124))))
 (let ((@x295 (trans (monotonicity @x179 @x187 @x226 (= ?x46 ?x415)) (rewrite (= ?x415 ?x281)) (= ?x46 ?x281))))
 (let ((@x333 (trans (monotonicity @x295 @x375 (= ?x49 (- ?x281 ?x234))) (rewrite (= (- ?x281 ?x234) ?x271)) (= ?x49 ?x271))))
 (let ((@x130 (trans (monotonicity @x333 @x384 @x375 @x120 (= ?x52 ?x121)) (rewrite (= ?x121 ?x125)) (= ?x52 ?x125))))
 (let ((@x223 (trans (monotonicity @x130 @x384 (= ?x53 (- ?x125 ?x381))) (rewrite (= (- ?x125 ?x381) ?x135)) (= ?x53 ?x135))))
 (let ((@x233 (monotonicity (trans @x223 (rewrite (= ?x135 ?x224)) (= ?x53 ?x224)) @x226 (= ?x54 (- ?x224 ?x281)))))
 (let ((@x245 (trans (trans @x233 (rewrite (= (- ?x224 ?x281) ?x236)) (= ?x54 ?x236)) (rewrite (= ?x236 ?x388)) (= ?x54 ?x388))))
 (let ((@x255 (trans (monotonicity @x245 @x120 (= ?x55 (- ?x388 ?x388))) (rewrite (= (- ?x388 ?x388) ?x251)) (= ?x55 ?x251))))
 (let ((@x261 (monotonicity (trans @x255 (rewrite (= ?x251 0)) $x56) (= $x56 (= 0 0)))))
 (let ((@x268 (monotonicity (trans @x261 (rewrite (= (= 0 0) true)) (= $x56 true)) (= $x57 (not true)))))
 (let ((@x280 (monotonicity (trans @x268 (rewrite (= (not true) false)) (= $x57 false)) (= $x58 (or false)))))
 (let ((@x291 (monotonicity (rewrite (= $x33 $x232)) (rewrite (= $x41 $x185)) (trans @x280 (rewrite (= (or false) false)) (= $x58 false)) (= $x59 $x288))))
 (trans @x291 (rewrite (= $x288 false)) (= $x59 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x307 (trans (quant-intro (proof-bind ?x300) (= $x60 $x299)) (elim-unused (= $x299 false)) (= $x60 false))))
 (let ((@x61 (asserted $x60)))
 (mp @x61 @x307 false))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   921852
 :rlimit-count 419
 :time         0.01
 :total-time   0.01)
