unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x794 (to_real y!0)))
 (let ((?x776 (to_real b!2)))
 (let ((?x910 (* ?x776 ?x794)))
 (let ((?x675 (+ ?x910 (* (/ 1.0 2.0) (* (to_real a00) (to_real d!1))) (* (- (/ 1.0 2.0)) (* (to_real a!3) (to_real d!1))) (* (- 1.0) (* (to_real y00) ?x776)))))
 (let (($x993 (>= ?x675 0.0)))
 (let ((?x404 (+ ?x910 (* (- 1.0) (to_real (* y!0 b!2))))))
 (let (($x400 (>= ?x404 0.0)))
 (let (($x408 (= ?x404 0.0)))
 (let ((@x724 ((_ th-lemma arith) $x408)))
 (let ((?x847 (* a00 d!1)))
 (let ((?x473 (+ (* 2 (* y!0 b!2)) (* (- 1) (* a!3 d!1)) ?x847 (* (- 2) (* y00 b!2)))))
 (let (($x684 (>= ?x473 0)))
 (let (($x670 (= 0 ?x473)))
 (let ((@x212 (symm (commutativity (= $x670 (= ?x473 0))) (= (= ?x473 0) $x670))))
 (let (($x392 (= ?x473 0)))
 (let ((?x236 (to_real a!3)))
 (let ((?x1017 (* ?x236 ?x776 ?x776 ?x776 ?x794 ?x794)))
 (let ((?x158 (* (- (/ 1.0 2.0)) ?x1017)))
 (let ((?x809 (to_real d!1)))
 (let ((?x941 (* ?x236 ?x809 ?x809 ?x809 ?x809 ?x809)))
 (let ((?x857 (* (- (/ 1.0 32.0)) ?x941)))
 (let ((?x924 (* ?x236 ?x776 ?x776 ?x776 ?x809 ?x809)))
 (let ((?x904 (* (- (/ 5.0 32.0)) ?x924)))
 (let ((?x919 (* ?x236 ?x794 ?x809 ?x809 ?x809 ?x809)))
 (let ((?x870 (* (- (/ 1.0 8.0)) ?x919)))
 (let ((?x912 (* ?x776 ?x809 ?x809)))
 (let ((?x797 (* (/ 1.0 8.0) ?x912)))
 (let ((?x909 (* ?x776 ?x776 ?x776 ?x776 ?x809 ?x809)))
 (let ((?x894 (* (- (/ 3.0 32.0)) ?x909)))
 (let ((?x871 (* ?x236 ?x236 ?x776 ?x776 ?x809 ?x809)))
 (let ((?x757 (* (- (/ 1.0 16.0)) ?x871)))
 (let ((?x817 (* ?x236 ?x776 ?x776 ?x809 ?x809 ?x809)))
 (let ((?x1035 (* (/ 1.0 32.0) ?x817)))
 (let ((?x807 (* ?x236 ?x794 ?x794 ?x809 ?x809 ?x809)))
 (let ((?x1033 (* (- (/ 1.0 8.0)) ?x807)))
 (let ((?x782 (* ?x236 ?x236 ?x776 ?x776 ?x794 ?x809)))
 (let ((?x752 (* (- (/ 1.0 4.0)) ?x782)))
 (let ((?x714 (* ?x776 ?x776 ?x776 ?x776 ?x794 ?x809)))
 (let ((?x250 (* (- (/ 1.0 4.0)) ?x714)))
 (let ((?x492 (* ?x776 ?x809 ?x809 ?x809 ?x809 ?x809)))
 (let ((?x885 (* (- (/ 1.0 32.0)) ?x492)))
 (let ((?x423 (* ?x776 ?x794 ?x794 ?x809 ?x809 ?x809)))
 (let ((?x791 (* (- (/ 1.0 8.0)) ?x423)))
 (let ((?x416 (* ?x236 ?x236 ?x776 ?x776 ?x794 ?x794)))
 (let ((?x891 (* (- (/ 1.0 4.0)) ?x416)))
 (let ((?x353 (* ?x776 ?x794 ?x809)))
 (let ((?x926 (* (/ 1.0 4.0) ?x353)))
 (let ((?x341 (* ?x776 ?x794 ?x809 ?x809 ?x809 ?x809)))
 (let ((?x1037 (* (- (/ 1.0 8.0)) ?x341)))
 (let ((?x286 (* ?x236 ?x776 ?x776 ?x776 ?x794 ?x809)))
 (let ((?x291 (* (- (/ 1.0 2.0)) ?x286)))
 (let ((?x254 (* ?x776 ?x776 ?x776 ?x776 ?x794 ?x794)))
 (let ((?x255 (* (- (/ 1.0 4.0)) ?x254)))
 (let ((?x111 (* ?x776 ?x776 ?x776 ?x809 ?x809 ?x809)))
 (let ((?x259 (* (/ 1.0 32.0) ?x111)))
 (let ((?x262 (+ ?x259 ?x255 ?x291 ?x1037 ?x926 ?x891 ?x791 ?x885 ?x250 ?x752 ?x1033 ?x1035 ?x757 ?x894 ?x797 ?x870 ?x904 ?x857 ?x158)))
 (let ((?x766 (* (- 1.0) ?x910)))
 (let ((?x66 (to_real y00)))
 (let ((?x616 (* ?x66 ?x776)))
 (let ((?x182 (+ (* (- (/ 1.0 2.0)) (* (to_real a00) ?x809)) (* (/ 1.0 2.0) (* ?x236 ?x809)) ?x616 ?x766)))
 (let ((?x266 (* ?x182 ?x262)))
 (let (($x914 (= ?x266 0.0)))
 (let (($x267 (not $x914)))
 (let ((?x742 (+ (* (/ 1.0 32.0) (* ?x236 ?x776 ?x776 ?x776 ?x776 ?x794 ?x809 ?x809)) (* (- (/ 1.0 64.0)) (* ?x236 ?x236 ?x776 ?x776 ?x776 ?x809 ?x809 ?x809)) (* (/ 1.0 8.0) (* ?x236 ?x776 ?x794 ?x809 ?x809)) (* (- (/ 1.0 8.0)) (* ?x236 ?x236 ?x236 ?x776 ?x776 ?x794 ?x794 ?x809)) (* (- (/ 1.0 16.0)) (* ?x236 ?x236 ?x794 ?x794 ?x809 ?x809 ?x809 ?x809)) (* (/ 1.0 4.0) (* ?x236 ?x236 ?x776 ?x776 ?x776 ?x794 ?x794 ?x794)) (* (/ 1.0 32.0) (* ?x66 ?x236 ?x776 ?x776 ?x776 ?x809 ?x809 ?x809)) (* (- (/ 1.0 32.0)) (* ?x66 ?x236 ?x776 ?x776 ?x776 ?x776 ?x809 ?x809)) (* (- (/ 1.0 64.0)) (* (to_real a00) ?x236 ?x776 ?x776 ?x809 ?x809 ?x809 ?x809)) (* (/ 1.0 8.0) (* ?x236 ?x776 ?x794 ?x794 ?x794 ?x809 ?x809 ?x809)) (* (/ 1.0 16.0) (* (to_real a00) ?x236 ?x794 ?x794 ?x809 ?x809 ?x809 ?x809)) (* (- (/ 1.0 8.0)) (* ?x66 ?x236 ?x776 ?x794 ?x794 ?x809 ?x809 ?x809)) (* (- (/ 1.0 4.0)) (* ?x66 ?x236 ?x236 ?x776 ?x776 ?x776 ?x794 ?x794)) (* (- (/ 1.0 4.0)) (* ?x776 ?x776 ?x794 ?x794 ?x809)) (* (/ 1.0 64.0) (* (to_real a00) ?x236 ?x776 ?x776 ?x776 ?x809 ?x809 ?x809)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x776 ?x794 ?x809 ?x809)) (* (/ 1.0 4.0) (* ?x66 ?x776 ?x776 ?x794 ?x809)) (* (/ 1.0 64.0) (* ?x236 ?x236 ?x776 ?x776 ?x809 ?x809 ?x809 ?x809)) (* (- (/ 1.0 32.0)) (* ?x236 ?x776 ?x776 ?x776 ?x794 ?x809 ?x809 ?x809)) (* (/ 1.0 8.0) (* (to_real a00) ?x236 ?x236 ?x776 ?x776 ?x794 ?x794 ?x809)))))
 (let (($x743 (= ?x742 0.0)))
 (let (($x788 (or (not $x743) $x267)))
 (let ((?x116 (* b00 y00)))
 (let ((?x117 (* (- 2) ?x116)))
 (let ((?x35 (* a00 d00)))
 (let (($x971 (= (+ ?x35 ?x117 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x411 (and $x971 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x392 $x788)))
 (let ((?x844 (+ (* (- (/ 1.0 8.0)) (* ?x809 ?x809 ?x809 ?x236 ?x794 ?x794)) ?x891 (* (/ 1.0 4.0) (* ?x809 ?x776 ?x794)) (* (/ 1.0 32.0) (* ?x809 ?x809 ?x809 ?x236 ?x776 ?x776)) (* (- (/ 5.0 32.0)) (* ?x809 ?x809 ?x236 ?x776 ?x776 ?x776)) (* (- (/ 1.0 32.0)) (* ?x809 ?x809 ?x809 ?x809 ?x809 ?x236)) (* (- (/ 1.0 32.0)) (* ?x809 ?x809 ?x809 ?x809 ?x809 ?x776)) (* (- (/ 1.0 8.0)) (* ?x809 ?x809 ?x809 ?x809 ?x236 ?x794)) (* (- (/ 1.0 8.0)) (* ?x809 ?x809 ?x809 ?x809 ?x776 ?x794)) (* (- (/ 1.0 8.0)) (* ?x809 ?x809 ?x809 ?x776 ?x794 ?x794)) (* (/ 1.0 8.0) (* ?x809 ?x809 ?x776)) ?x158 ?x255 (* (- (/ 1.0 16.0)) (* ?x809 ?x809 ?x236 ?x236 ?x776 ?x776)) (* (- (/ 3.0 32.0)) (* ?x809 ?x809 ?x776 ?x776 ?x776 ?x776)) (* (- (/ 1.0 4.0)) (* ?x809 ?x236 ?x236 ?x776 ?x776 ?x794)) (* (- (/ 1.0 2.0)) (* ?x809 ?x236 ?x776 ?x776 ?x776 ?x794)) (* (- (/ 1.0 4.0)) (* ?x809 ?x776 ?x776 ?x776 ?x776 ?x794)) (* (/ 1.0 32.0) (* ?x809 ?x809 ?x809 ?x776 ?x776 ?x776)))))
 (let ((?x377 (+ (* (/ 1.0 2.0) (* ?x809 ?x236)) ?x766 (* ?x776 ?x66) (* (- (/ 1.0 2.0)) (* ?x809 (to_real a00))))))
 (let ((?x348 (+ (* (/ 1.0 16.0) (* ?x809 ?x809 ?x809 ?x809 ?x236 ?x236 ?x794 ?x794)) (* (- (/ 1.0 8.0)) (* ?x809 ?x809 ?x809 ?x236 ?x776 ?x794 ?x794 ?x794)) (* (/ 1.0 8.0) (* ?x809 ?x809 ?x809 ?x236 ?x776 ?x794 ?x794 ?x66)) (* (- (/ 1.0 16.0)) (* ?x809 ?x809 ?x809 ?x809 ?x236 ?x794 ?x794 (to_real a00))) (* (/ 1.0 8.0) (* ?x809 ?x236 ?x236 ?x236 ?x776 ?x776 ?x794 ?x794)) (* (- (/ 1.0 4.0)) (* ?x236 ?x236 ?x776 ?x776 ?x776 ?x794 ?x794 ?x794)) (* (/ 1.0 4.0) (* ?x236 ?x236 ?x776 ?x776 ?x776 ?x794 ?x794 ?x66)) (* (- (/ 1.0 8.0)) (* ?x809 ?x236 ?x236 ?x776 ?x776 ?x794 ?x794 (to_real a00))) (* (- (/ 1.0 8.0)) (* ?x809 ?x809 ?x236 ?x776 ?x794)) (* (/ 1.0 4.0) (* ?x809 ?x776 ?x776 ?x794 ?x794)) (* (- (/ 1.0 4.0)) (* ?x809 ?x776 ?x776 ?x794 ?x66)) (* (/ 1.0 8.0) (* ?x809 ?x809 ?x776 ?x794 (to_real a00))) (* (- (/ 1.0 64.0)) (* ?x809 ?x809 ?x809 ?x809 ?x236 ?x236 ?x776 ?x776)) (* (/ 1.0 32.0) (* ?x809 ?x809 ?x809 ?x236 ?x776 ?x776 ?x776 ?x794)) (* (- (/ 1.0 32.0)) (* ?x809 ?x809 ?x809 ?x236 ?x776 ?x776 ?x776 ?x66)) (* (/ 1.0 64.0) (* ?x809 ?x809 ?x809 ?x809 ?x236 ?x776 ?x776 (to_real a00))) (* (/ 1.0 64.0) (* ?x809 ?x809 ?x809 ?x236 ?x236 ?x776 ?x776 ?x776)) (* (- (/ 1.0 32.0)) (* ?x809 ?x809 ?x236 ?x776 ?x776 ?x776 ?x776 ?x794)) (* (/ 1.0 32.0) (* ?x809 ?x809 ?x236 ?x776 ?x776 ?x776 ?x776 ?x66)) (* (- (/ 1.0 64.0)) (* ?x809 ?x809 ?x809 ?x236 ?x776 ?x776 ?x776 (to_real a00))))))
 (let ((?x744 (* a!3 d!1)))
 (let ((?x899 (+ ?x744 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x157 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x117 (* 2 (* y!0 b00))) 0)))
 (let (($x723 (and $x157 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x899 0) (or (not (= ?x348 0.0)) (not (= (* ?x377 ?x844) 0.0))))))
 (let (($x479 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x974 (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 (to_real y)))))
 (let ((?x962 (* (- (/ 1.0 2.0)) (* (to_real a) ?x61 ?x61 ?x61 (to_real y) (to_real y)))))
 (let ((?x63 (to_real y)))
 (let ((?x59 (to_real a)))
 (let ((?x1078 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61)) (* (- (/ 5.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61)) ?x962 (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) ?x974 (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x179 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x263 (+ ?x179 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x536 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 (to_real a00))) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real a00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x61 ?x63 (to_real y00))) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 ?x63 (to_real a00))) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 (to_real y00))) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 (to_real a00))) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 (to_real y00))) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 (to_real a00))))))
 (let ((?x48 (* a d)))
 (let ((?x186 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x116 (* b00 y00)))
 (let ((?x117 (* (- 2) ?x116)))
 (let ((?x35 (* a00 d00)))
 (let (($x149 (= (+ ?x35 (* (- 1) (* a d00)) ?x117 (* 2 (* y b00))) 0)))
 (and $x149 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x186 0) (or (not (= ?x536 0.0)) (not (= (* ?x263 ?x1078) 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let (($x1045 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x827 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x861 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x658 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x827 ?x861 ?x861)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x861)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x827 ?x827 ?x861 ?x861)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x827)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x827)))))
 (let ((?x834 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x424 (* ?x66 ?x61)))
 (let ((?x664 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x827)) (* (- 1.0) (* ?x61 ?x861)) ?x424 ?x834) ?x658)))
 (let ((?x940 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x612 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x424 ?x834) ?x940)))
 (let (($x617 (or (not (= ?x612 0.0)) (not (= ?x664 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x949 (= ?x646 0)))
 (let ((?x902 (* d00 a)))
 (let ((?x169 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x902)))
 (and (= ?x169 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x949 $x617))))))))))))))))))) :qid k!33))
 ))
 (let ((?x873 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x974 (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 (to_real y)))))
 (let ((?x962 (* (- (/ 1.0 2.0)) (* (to_real a) ?x61 ?x61 ?x61 (to_real y) (to_real y)))))
 (let ((?x63 (to_real y)))
 (let ((?x59 (to_real a)))
 (let ((?x1078 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61)) (* (- (/ 5.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61)) ?x962 (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) ?x974 (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x179 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x263 (+ ?x179 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x536 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 (to_real a00))) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real a00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x61 ?x63 (to_real y00))) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 ?x63 (to_real a00))) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 (to_real y00))) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 (to_real a00))) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 (to_real y00))) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 (to_real a00))))))
 (let ((?x48 (* a d)))
 (let ((?x186 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x116 (* b00 y00)))
 (let ((?x117 (* (- 2) ?x116)))
 (let ((?x35 (* a00 d00)))
 (let (($x149 (= (+ ?x35 (* (- 1) (* a d00)) ?x117 (* 2 (* y b00))) 0)))
 (let (($x1092 (and $x149 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x186 0) (or (not (= ?x536 0.0)) (not (= (* ?x263 ?x1078) 0.0))))))
 (let ((?x861 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x827 (+ ?x59 ?x61)))
 (let ((?x658 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x827 ?x861 ?x861)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x861)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x827 ?x827 ?x861 ?x861)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x827)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x827)))))
 (let ((?x834 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x424 (* ?x66 ?x61)))
 (let ((?x664 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x827)) (* (- 1.0) (* ?x61 ?x861)) ?x424 ?x834) ?x658)))
 (let ((?x940 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x59)))))
 (let (($x613 (not (= (* (+ ?x179 (* (- 1.0) (* ?x63 ?x61)) ?x424 ?x834) ?x940) 0.0))))
 (let (($x617 (or $x613 (not (= ?x664 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x949 (= ?x646 0)))
 (let ((?x902 (* d00 a)))
 (let (($x644 (= (+ (* 2 ?x116) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x902) 0)))
 (let (($x660 (and $x644 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x949 $x617)))
 (rewrite (= $x660 $x1092)))))))))))))))))))))))))))))))))))
 ))
 (let (($x324 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x827 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x861 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x658 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x827 ?x861 ?x861)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x861)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x827 ?x827 ?x861 ?x861)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x827)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x827)))))
 (let ((?x834 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x424 (* ?x66 ?x61)))
 (let ((?x664 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x827)) (* (- 1.0) (* ?x61 ?x861)) ?x424 ?x834) ?x658)))
 (let ((?x940 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x612 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x424 ?x834) ?x940)))
 (let (($x617 (or (not (= ?x612 0.0)) (not (= ?x664 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x949 (= ?x646 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x116 (* b00 y00)))
 (let ((?x117 (* (- 2) ?x116)))
 (let (($x921 (= (+ ?x117 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x921 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x949 $x617))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x647 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x827 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x861 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x658 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x827 ?x861 ?x861)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x861)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x827 ?x827 ?x861 ?x861)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x827)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x827)))))
 (let ((?x834 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x424 (* ?x66 ?x61)))
 (let ((?x664 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x827)) (* (- 1.0) (* ?x61 ?x861)) ?x424 ?x834) ?x658)))
 (let ((?x940 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x612 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x424 ?x834) ?x940)))
 (let (($x617 (or (not (= ?x612 0.0)) (not (= ?x664 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x949 (= ?x646 0)))
 (let ((?x902 (* d00 a)))
 (let ((?x169 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x902)))
 (let (($x660 (and (= ?x169 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x949 $x617)))
 (let ((?x35 (* a00 d00)))
 (let ((?x116 (* b00 y00)))
 (let ((?x117 (* (- 2) ?x116)))
 (let (($x669 (and (= (+ ?x117 ?x35 (* 2 (* b00 y)) (* (- 1) ?x902)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x949 $x617)))
 (rewrite (= $x669 $x660))))))))))))))))))))))))))
 ))
 (let (($x108 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x83 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x87 (to_real (+ a b))))
 (let ((?x63 (to_real y)))
 (let ((?x89 (+ ?x63 ?x58)))
 (let ((?x96 (+ (* (to_real (- 1)) ?x87 ?x58 ?x58 ?x58 ?x89 ?x89) (* ?x62 ?x58 ?x89))))
 (let ((?x100 (+ (- ?x96 (* ?x87 ?x87 ?x62 ?x62 ?x89 ?x89)) (* ?x87 ?x62 ?x62 ?x58 ?x58 ?x58))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x103 (* (- (+ (- (* ?x87 ?x58) (* ?x57 ?x62 ?x89)) ?x67) ?x70) (- ?x100 (* ?x87 ?x62 ?x62 ?x62 ?x58 ?x58)))))
 (let ((?x75 (+ (* (to_real (- 1)) (to_real a) ?x58 ?x58 ?x58 ?x63 ?x63) (* ?x62 ?x58 ?x63))))
 (let ((?x79 (+ (- ?x75 (* (to_real a) (to_real a) ?x62 ?x62 ?x63 ?x63)) (* (to_real a) ?x62 ?x62 ?x58 ?x58 ?x58))))
 (let ((?x82 (* (- (+ (- (* (to_real a) ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) (- ?x79 (* (to_real a) ?x62 ?x62 ?x62 ?x58 ?x58)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x82 ?x83)) (not (= ?x103 ?x83))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x386 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x827 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x63 (to_real y)))
 (let ((?x861 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x658 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x827 ?x861 ?x861)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x861)) (* (- (/ 1.0 4.0)) (* ?x61 ?x61 ?x827 ?x827 ?x861 ?x861)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x827)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x827)))))
 (let ((?x834 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x424 (* ?x66 ?x61)))
 (let ((?x664 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x827)) (* (- 1.0) (* ?x61 ?x861)) ?x424 ?x834) ?x658)))
 (let ((?x940 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x59)))))
 (let ((?x612 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x424 ?x834) ?x940)))
 (let (($x617 (or (not (= ?x612 0.0)) (not (= ?x664 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x949 (= ?x646 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x116 (* b00 y00)))
 (let ((?x117 (* (- 2) ?x116)))
 (let (($x921 (= (+ ?x117 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x669 (and $x921 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x949 $x617)))
 (let ((?x83 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x87 (to_real (+ a b))))
 (let ((?x89 (+ ?x63 ?x58)))
 (let ((?x43 (- 1)))
 (let ((?x72 (to_real ?x43)))
 (let ((?x98 (- (+ (* ?x72 ?x87 ?x58 ?x58 ?x58 ?x89 ?x89) (* ?x62 ?x58 ?x89)) (* ?x87 ?x87 ?x62 ?x62 ?x89 ?x89))))
 (let ((?x102 (- (+ ?x98 (* ?x87 ?x62 ?x62 ?x58 ?x58 ?x58)) (* ?x87 ?x62 ?x62 ?x62 ?x58 ?x58))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x93 (- (+ (- (* ?x87 ?x58) (* ?x57 ?x62 ?x89)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x77 (- (+ (* ?x72 ?x59 ?x58 ?x58 ?x58 ?x63 ?x63) (* ?x62 ?x58 ?x63)) (* ?x59 ?x59 ?x62 ?x62 ?x63 ?x63))))
 (let ((?x81 (- (+ ?x77 (* ?x59 ?x62 ?x62 ?x58 ?x58 ?x58)) (* ?x59 ?x62 ?x62 ?x62 ?x58 ?x58))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x107 (and $x41 (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x71 ?x81) ?x83)) (not (= (* ?x93 ?x102) ?x83))))))
 (rewrite (= $x107 $x669)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x109 (asserted $x108)))
 (let ((@x655 (mp (mp @x109 (quant-intro (proof-bind ?x386) (= $x108 $x324)) $x324) (rewrite (= $x324 $x324)) $x324)))
 (let ((@x838 (mp (mp @x655 (quant-intro (proof-bind ?x647) (= $x324 $x1045)) $x1045) (quant-intro (proof-bind ?x873) (= $x1045 $x479)) $x479)))
 (let ((@x1034 (mp (mp~ @x838 (sk (~ $x479 $x723)) $x723) (rewrite (= $x723 $x411)) $x411)))
 (let ((@x729 (mp (and-elim @x1034 $x392) @x212 $x670)))
 (let ((@x972 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x670) $x684)) @x729 $x684)))
 (let ((?x390 (+ (* (- 1.0) (to_real (* y00 b!2))) ?x616)))
 (let (($x398 (<= ?x390 0.0)))
 (let (($x274 (= ?x390 0.0)))
 (let ((@x812 (lemma (unit-resolution ((_ th-lemma arith) $x274) (hypothesis (not $x274)) false) $x274)))
 (let ((?x602 (* ?x236 ?x809)))
 (let ((?x226 (+ ?x602 (* (- 1.0) (to_real ?x744)))))
 (let (($x532 (<= ?x226 0.0)))
 (let (($x555 (= ?x226 0.0)))
 (let ((@x445 ((_ th-lemma arith) $x555)))
 (let ((?x431 (to_real ?x847)))
 (let ((?x251 (+ (* (- 1.0) (* (to_real a00) ?x809)) ?x431)))
 (let (($x731 (<= ?x251 0.0)))
 (let ((@x836 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x251 0.0)) $x731)) ((_ th-lemma arith) (= ?x251 0.0)) $x731)))
 (let ((@x810 ((_ th-lemma arith) @x836 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x555) $x532)) @x445 $x532) (hypothesis (not $x993)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x398)) @x812 $x398) @x972 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x408) $x400)) @x724 $x400) false)))
 (let ((@x816 (lemma @x810 $x993)))
 (let ((?x717 (+ (* (/ 1.0 8.0) ?x423) (* (/ 1.0 32.0) ?x492) (* (/ 1.0 4.0) ?x714) (* (/ 1.0 4.0) ?x782) (* (/ 1.0 8.0) ?x807) (* (- (/ 1.0 32.0)) ?x817) (* (/ 1.0 16.0) ?x871) (* (/ 3.0 32.0) ?x909) (* (- (/ 1.0 8.0)) ?x912) (* (/ 1.0 8.0) ?x919) (* (/ 5.0 32.0) ?x924) (* (/ 1.0 32.0) ?x941) (* (/ 1.0 2.0) ?x1017) (* (- (/ 1.0 32.0)) ?x111) (* (/ 1.0 4.0) ?x254) (* (/ 1.0 2.0) ?x286) (* (/ 1.0 8.0) ?x341) (* (- (/ 1.0 4.0)) ?x353) (* (/ 1.0 4.0) ?x416))))
 (let (($x207 (>= ?x717 0.0)))
 (let (($x1000 (not $x207)))
 (let ((?x698 (+ ?x791 ?x885 ?x250 ?x752 ?x1033 ?x1035 ?x757 ?x894 ?x797 ?x870 ?x904 ?x857 ?x158 ?x259 ?x255 ?x291 ?x1037 ?x926 ?x891)))
 (let (($x722 (<= ?x698 0.0)))
 (let (($x129 (not $x722)))
 (let (($x886 (= 0.0 ?x698)))
 (let (($x985 (not $x886)))
 (let (($x689 (= 0.0 ?x742)))
 (let (($x690 (<= ?x742 0.0)))
 (let (($x678 (<= ?x473 0)))
 (let ((@x228 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x670) $x678)) @x729 $x678)))
 (let ((@x214 (unit-resolution ((_ th-lemma arith) (or $x690 (not $x684) (not $x678))) @x228 @x972 (hypothesis (not $x690)) false)))
 (let (($x159 (>= ?x742 0.0)))
 (let ((@x215 (unit-resolution ((_ th-lemma arith) (or $x159 (not $x684) (not $x678))) @x228 @x972 (hypothesis (not $x159)) false)))
 (let ((@x183 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x689 (not $x690) (not $x159))) (lemma @x215 $x159) (or $x689 (not $x690)))))
 (let ((@x193 (mp (unit-resolution @x183 (lemma @x214 $x690) $x689) (commutativity (= $x689 $x743)) $x743)))
 (let ((@x197 (unit-resolution (and-elim @x1034 $x788) @x193 $x267)))
 (let (($x535 (= ?x698 0.0)))
 (let (($x368 (not $x535)))
 (let ((@x711 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x368 $x914)) (hypothesis $x267) $x368) (symm (hypothesis $x886) $x535) false)))
 (let ((@x779 (lemma @x711 (or $x985 $x914))))
 (let (($x862 (>= ?x698 0.0)))
 (let (($x877 (<= ?x717 0.0)))
 (let (($x381 (not $x877)))
 (let ((@x455 (hypothesis $x381)))
 (let (($x293 (<= ?x675 0.0)))
 (let (($x273 (>= ?x390 0.0)))
 (let (($x406 (<= ?x404 0.0)))
 (let ((?x69 (to_real a00)))
 (let ((?x437 (* ?x69 ?x809)))
 (let ((?x135 (+ ?x437 (* (- 1.0) ?x431))))
 (let (($x720 (<= ?x135 0.0)))
 (let ((@x166 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x135 0.0)) $x720)) ((_ th-lemma arith) (= ?x135 0.0)) $x720)))
 (let (($x177 (>= ?x226 0.0)))
 (let ((@x231 ((_ th-lemma arith) @x228 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x555) $x177)) @x445 $x177) @x166 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x408) $x406)) @x724 $x406) (hypothesis (not $x293)) (hypothesis $x273) false)))
 (let ((@x502 (unit-resolution (lemma @x231 (or (not $x273) $x293)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x273)) @x812 $x273) $x293)))
 (let (($x692 (<= ?x266 0.0)))
 (let (($x216 (not $x692)))
 (let (($x700 (>= ?x266 0.0)))
 (let (($x732 (not $x700)))
 (let ((@x992 (hypothesis $x732)))
 (let ((@x443 (unit-resolution ((_ th-lemma arith) (or (not $x993) $x877 $x700)) @x992 @x455 @x816 false)))
 (let ((@x982 ((_ th-lemma arith) (or $x381 $x862))))
 (let ((@x929 (unit-resolution @x982 (unit-resolution (lemma @x443 (or $x877 $x700)) @x992 $x877) $x862)))
 (let ((@x504 (unit-resolution ((_ th-lemma arith) (or (not $x293) $x207 $x700)) @x992 (hypothesis $x1000) @x502 false)))
 (let ((@x160 ((_ th-lemma arith) (or $x722 $x1000))))
 (let ((@x332 (unit-resolution @x160 (unit-resolution (lemma @x504 (or $x207 $x700)) @x992 $x207) $x722)))
 (let ((@x863 ((_ th-lemma arith triangle-eq) (or $x886 $x129 (not $x862)))))
 (let ((@x979 (unit-resolution @x779 (unit-resolution @x863 @x332 @x929 $x886) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x267 $x700)) @x992 $x267) false)))
 (let ((@x221 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x914 $x216 $x732)) (lemma @x979 $x700) (or $x914 $x216))))
 (let ((@x705 (unit-resolution @x221 @x197 $x216)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith) (or (not $x293) $x877 $x692)) @x705 @x502 @x455 false)))
 (let ((@x270 (unit-resolution @x863 (unit-resolution @x982 (lemma @x296 $x877) $x862) (unit-resolution @x779 @x197 $x985) $x129)))
 (unit-resolution ((_ th-lemma arith) (or (not $x993) $x207 $x692)) @x705 (unit-resolution @x160 @x270 $x1000) @x816 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       30
 :arith-eq-adapter                26
 :arith-bound-propagations-cheap  33
 :arith-bound-propagations-lp     2
 :arith-conflicts                 78
 :arith-diseq                     38
 :arith-gcd-calls                 5
 :arith-grobner-calls             5
 :arith-grobner-conflicts         2
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 8
 :arith-lower                     61
 :arith-make-feasible             53
 :arith-max-columns               99
 :arith-max-rows                  23
 :arith-nla-explanations          62
 :arith-nla-lemmas                76
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              33
 :arith-upper                     69
 :conflicts                       12
 :decisions                       90
 :del-clause                      99
 :final-checks                    40
 :max-memory                      5.03
 :memory                          3.21
 :minimized-lits                  3
 :mk-bool-var                     174
 :mk-clause                       138
 :num-allocs                      7094013
 :num-checks                      1
 :propagations                    107
 :rlimit-count                    8056
 :time                            0.04
 :total-time                      0.05)
