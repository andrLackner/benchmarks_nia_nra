unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x220 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x180 (<= ?x220 0)))
 (let (($x218 (= ?x220 0)))
 (let ((?x382 (+ 1 y!0)))
 (let ((?x199 (+ (- 1) x!1)))
 (let ((?x1058 (* ?x199 ?x199 ?x199 ?x382 ?x382 ?x382)))
 (let ((?x957 (* ?x199 ?x199 ?x199 ?x199 ?x382 ?x382 ?x382)))
 (let ((?x389 (* ?x199 ?x199 ?x199 ?x382 ?x382 ?x382 ?x382)))
 (let ((?x51 (* 2 x00)))
 (let ((?x47 (* 2 y00)))
 (let ((?x562 (+ ?x47 ?x51 (* y00 y!0) (* 3 (* y00 y!0 y!0 y!0 x!1 x!1)) (* 6 (* x00 y!0 y!0 x!1 x!1)) (* 3 (* x00 y!0 x!1 x!1)) (* (- 2) y!0) (* (- 2) (* x00 y!0 y!0 x!1 x!1 x!1)) (* (- 1) (* x00 y!0 y!0 y!0 x!1 x!1 x!1)) (* (- 1) (* x00 y!0 x!1 x!1 x!1)) (* 3 (* x00 y!0 y!0 y!0 x!1 x!1)) (* (- 3) (* y00 y!0 y!0 y!0 x!1)) (* 2 (* y00 y!0 y!0)) (* (- 3) (* x00 y!0 y!0 y!0 x!1)) (* (- 2) x!1) (* (- 1) (* ?x199 ?x199 ?x199 ?x199 ?x382 ?x382)) ?x389 (* (- 3) (* x00 y!0 x!1)) (* x00 y!0) (* x00 y!0 y!0 y!0) (* (- 6) (* x00 y!0 y!0 x!1)) (* (- 1) (* y00 y!0 y!0 y!0 x!1 x!1 x!1)) (* y00 y!0 y!0 y!0) (* 6 (* y00 y!0 y!0 x!1 x!1)) (* 3 (* y00 y!0 x!1 x!1)) (* (- 2) (* y00 y!0 y!0 x!1 x!1 x!1)) (* (- 3) (* y00 y!0 x!1)) (* (- 1) (* y00 y!0 x!1 x!1 x!1)) (* (- 6) (* y00 y!0 y!0 x!1)) ?x957 (* (- 1) ?x1058) (* 2 (* x00 y!0 y!0)))))
 (let (($x604 (= ?x562 0)))
 (let (($x1153 (not $x604)))
 (let (($x226 (and $x218 $x1153)))
 (let ((?x379 (* ?x199 ?x199 ?x199 ?x199 ?x382 ?x382)))
 (let ((?x1476 (* (- 2) x00)))
 (let ((?x1475 (* (- 2) y00)))
 (let ((?x348 (+ (* 2 x!1) (* 2 y!0) ?x1475 ?x1476 (* (- 6) (* x!1 x!1 y!0 y!0 x00)) (* x!1 x!1 x!1 y!0 y!0 y!0 x00) (* (- 1) (* y!0 x00)) (* 3 (* x!1 y!0 x00)) (* (- 3) (* x!1 x!1 y!0 x00)) (* (- 2) (* y!0 y!0 x00)) (* 6 (* x!1 y!0 y!0 x00)) (* (- 1) (* y!0 y!0 y!0 x00)) (* 3 (* x!1 y!0 y!0 y!0 x00)) (* (- 3) (* x!1 x!1 y!0 y!0 y!0 x00)) (* x!1 x!1 x!1 y!0 x00) (* 2 (* x!1 x!1 x!1 y!0 y!0 x00)) ?x379 (* x!1 x!1 x!1 y!0 y00) (* 3 (* x!1 y!0 y00)) (* (- 3) (* x!1 x!1 y!0 y00)) (* 2 (* x!1 x!1 x!1 y!0 y!0 y00)) (* (- 6) (* x!1 x!1 y!0 y!0 y00)) (* 6 (* x!1 y!0 y!0 y00)) (* (- 2) (* y!0 y!0 y00)) (* (- 1) (* y!0 y00)) (* (- 1) (* y!0 y!0 y!0 y00)) (* 3 (* x!1 y!0 y!0 y!0 y00)) (* (- 3) (* x!1 x!1 y!0 y!0 y!0 y00)) (* x!1 x!1 x!1 y!0 y!0 y!0 y00) (* (- 1) ?x389) (* (- 1) ?x957) ?x1058)))
 (let (($x215 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x348 0)))))
 (let (($x450 (exists ((x Int) (y Int) )(! (let ((?x96 (+ 1 y)))
 (let ((?x86 (+ (- 1) x)))
 (let ((?x1448 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1342 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1458 (* (- 1) ?x1342)))
 (let ((?x1319 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96 ?x96)))
 (let ((?x1462 (* (- 1) ?x1319)))
 (let ((?x1001 (* x x x y y y y00)))
 (let ((?x1106 (* (- 3) (* x x y y y y00))))
 (let ((?x1461 (* 3 (* x y y y y00))))
 (let ((?x988 (* (- 1) (* y y y y00))))
 (let ((?x753 (* (- 1) (* y y00))))
 (let ((?x1460 (* (- 2) (* y y y00))))
 (let ((?x1103 (* (- 6) (* x x y y y00))))
 (let ((?x1465 (* 2 (* x x x y y y00))))
 (let ((?x688 (* x x x y y00)))
 (let ((?x677 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x585 (* x x x y x00)))
 (let ((?x1471 (* (- 1) (* y y y x00))))
 (let ((?x1478 (* (- 2) (* y y x00))))
 (let ((?x555 (* (- 1) (* y x00))))
 (let ((?x1476 (* (- 2) x00)))
 (let ((?x1475 (* (- 2) y00)))
 (let ((?x1278 (* 2 y)))
 (let ((?x846 (* 2 x)))
 (let ((?x1385 (+ ?x846 ?x1278 ?x1475 ?x1476 (* (- 6) (* x x y y x00)) (* x x x y y y x00) ?x555 (* 3 (* x y x00)) (* (- 3) (* x x y x00)) ?x1478 (* 6 (* x y y x00)) ?x1471 (* 3 (* x y y y x00)) (* (- 3) (* x x y y y x00)) ?x585 (* 2 (* x x x y y x00)) ?x677 ?x688 (* 3 (* x y y00)) (* (- 3) (* x x y y00)) ?x1465 ?x1103 (* 6 (* x y y y00)) ?x1460 ?x753 ?x988 ?x1461 ?x1106 ?x1001 ?x1462 ?x1458 ?x1448)))
 (let (($x94 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x94 (not (= ?x1385 0)))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1047 (exists ((x Int) (y Int) )(! (let ((?x96 (+ 1 y)))
 (let ((?x86 (+ (- 1) x)))
 (let ((?x1342 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1458 (* (- 1) ?x1342)))
 (let ((?x1448 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1319 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96 ?x96)))
 (let ((?x1462 (* (- 1) ?x1319)))
 (let ((?x1278 (* 2 y)))
 (let ((?x1476 (* (- 2) x00)))
 (let ((?x1059 (* y00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1475 (* (- 2) y00)))
 (let ((?x846 (* 2 x)))
 (let ((?x677 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x912 (* x00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1073 (+ ?x912 (* (- 1) (* x00 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x677 (* (- 1) (* y00 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x846 ?x1475 ?x1059 ?x1476 ?x1278 ?x1462 ?x1448 ?x1458)))
 (let (($x908 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x908 (not (= ?x1073 0))))))))))))))))))) :qid k!26))
 ))
 (let ((?x465 (lambda ((x Int) (y Int) )(let ((?x96 (+ 1 y)))
 (let ((?x86 (+ (- 1) x)))
 (let ((?x1448 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1342 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1458 (* (- 1) ?x1342)))
 (let ((?x1319 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96 ?x96)))
 (let ((?x1462 (* (- 1) ?x1319)))
 (let ((?x1001 (* x x x y y y y00)))
 (let ((?x1106 (* (- 3) (* x x y y y y00))))
 (let ((?x1461 (* 3 (* x y y y y00))))
 (let ((?x988 (* (- 1) (* y y y y00))))
 (let ((?x753 (* (- 1) (* y y00))))
 (let ((?x1460 (* (- 2) (* y y y00))))
 (let ((?x1103 (* (- 6) (* x x y y y00))))
 (let ((?x1465 (* 2 (* x x x y y y00))))
 (let ((?x688 (* x x x y y00)))
 (let ((?x677 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x585 (* x x x y x00)))
 (let ((?x1471 (* (- 1) (* y y y x00))))
 (let ((?x1478 (* (- 2) (* y y x00))))
 (let ((?x555 (* (- 1) (* y x00))))
 (let ((?x1476 (* (- 2) x00)))
 (let ((?x1475 (* (- 2) y00)))
 (let ((?x1278 (* 2 y)))
 (let ((?x846 (* 2 x)))
 (let ((?x1385 (+ ?x846 ?x1278 ?x1475 ?x1476 (* (- 6) (* x x y y x00)) (* x x x y y y x00) ?x555 (* 3 (* x y x00)) (* (- 3) (* x x y x00)) ?x1478 (* 6 (* x y y x00)) ?x1471 (* 3 (* x y y y x00)) (* (- 3) (* x x y y y x00)) ?x585 (* 2 (* x x x y y x00)) ?x677 ?x688 (* 3 (* x y y00)) (* (- 3) (* x x y y00)) ?x1465 ?x1103 (* 6 (* x y y y00)) ?x1460 ?x753 ?x988 ?x1461 ?x1106 ?x1001 ?x1462 ?x1458 ?x1448)))
 (let (($x94 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1381 (and $x94 (not (= ?x1385 0)))))
 (let ((?x1059 (* y00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x912 (* x00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1073 (+ ?x912 (* (- 1) (* x00 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x677 (* (- 1) (* y00 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x846 ?x1475 ?x1059 ?x1476 ?x1278 ?x1462 ?x1448 ?x1458)))
 (let (($x908 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1033 (and $x908 (not (= ?x1073 0)))))
 (rewrite (= $x1033 $x1381))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1026 (exists ((x Int) (y Int) )(! (let ((?x96 (+ 1 y)))
 (let ((?x86 (+ (- 1) x)))
 (let ((?x1342 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1319 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96 ?x96)))
 (let ((?x51 (* 2 x00)))
 (let ((?x47 (* 2 y00)))
 (let ((?x1028 (* y00 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x1022 (* x00 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x820 (+ (* (- 1) (* x00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)) ?x1022 (* (- 1) (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x1028 (* (- 2) x) ?x47 (* (- 1) (* y00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)) ?x51 (* (- 2) y) ?x1319 (* (- 1) (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)) ?x1342)))
 (let (($x908 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x908 (not (= ?x820 0))))))))))))) :qid k!26))
 ))
 (let ((?x750 (lambda ((x Int) (y Int) )(let ((?x96 (+ 1 y)))
 (let ((?x86 (+ (- 1) x)))
 (let ((?x1342 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1458 (* (- 1) ?x1342)))
 (let ((?x1448 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1319 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96 ?x96)))
 (let ((?x1462 (* (- 1) ?x1319)))
 (let ((?x1278 (* 2 y)))
 (let ((?x1476 (* (- 2) x00)))
 (let ((?x1059 (* y00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1475 (* (- 2) y00)))
 (let ((?x846 (* 2 x)))
 (let ((?x677 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x912 (* x00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1073 (+ ?x912 (* (- 1) (* x00 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x677 (* (- 1) (* y00 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x846 ?x1475 ?x1059 ?x1476 ?x1278 ?x1462 ?x1448 ?x1458)))
 (let (($x908 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1033 (and $x908 (not (= ?x1073 0)))))
 (let ((?x51 (* 2 x00)))
 (let ((?x47 (* 2 y00)))
 (let ((?x1028 (* y00 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x1022 (* x00 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x820 (+ (* (- 1) ?x912) ?x1022 (* (- 1) ?x677) ?x1028 (* (- 2) x) ?x47 (* (- 1) ?x1059) ?x51 (* (- 2) y) ?x1319 (* (- 1) ?x1448) ?x1342)))
 (let (($x365 (and $x908 (not (= ?x820 0)))))
 (rewrite (= $x365 $x1033))))))))))))))))))))))))))
 ))
 (let (($x65 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x51 (* 2 x00)))
 (let ((?x47 (* 2 y00)))
 (let ((?x39 (+ (* (- 1) ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x43 (+ (- ?x39 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (let ((?x50 (- (+ (- ?x43 (* 2 ?x35)) ?x47) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 y00))))
 (let ((?x56 (+ (- (+ ?x50 ?x51) (* 2 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x60 (+ (- ?x56 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x60 0))))))))))))) :qid k!26))
 ))
 (let ((?x1021 (lambda ((x Int) (y Int) )(let ((?x96 (+ 1 y)))
 (let ((?x86 (+ (- 1) x)))
 (let ((?x1342 (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)))
 (let ((?x1319 (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96 ?x96)))
 (let ((?x51 (* 2 x00)))
 (let ((?x47 (* 2 y00)))
 (let ((?x1028 (* y00 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x1022 (* x00 ?x86 ?x86 ?x86 ?x96 ?x96)))
 (let ((?x820 (+ (* (- 1) (* x00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)) ?x1022 (* (- 1) (* ?x86 ?x86 ?x86 ?x86 ?x96 ?x96)) ?x1028 (* (- 2) x) ?x47 (* (- 1) (* y00 ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)) ?x51 (* (- 2) y) ?x1319 (* (- 1) (* ?x86 ?x86 ?x86 ?x96 ?x96 ?x96)) ?x1342)))
 (let (($x908 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x365 (and $x908 (not (= ?x820 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x39 (+ (* (- 1) ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x43 (+ (- ?x39 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (let ((?x50 (- (+ (- ?x43 (* 2 ?x35)) ?x47) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 y00))))
 (let ((?x56 (+ (- (+ ?x50 ?x51) (* 2 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x60 (+ (- ?x56 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let (($x64 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x60 0))))))
 (rewrite (= $x64 $x365))))))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x993 (mp (mp @x66 (quant-intro (proof-bind ?x1021) (= $x65 $x1026)) $x1026) (rewrite (= $x1026 $x1026)) $x1026)))
 (let ((@x596 (mp (mp @x993 (quant-intro (proof-bind ?x750) (= $x1026 $x1047)) $x1047) (quant-intro (proof-bind ?x465) (= $x1047 $x450)) $x450)))
 (let ((@x517 (mp (mp~ @x596 (sk (~ $x450 $x215)) $x215) (rewrite (= $x215 $x226)) $x226)))
 (let ((@x356 (and-elim @x517 $x218)))
 (let ((@x359 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x180)) @x356 $x180)))
 (let (($x962 (>= ?x220 0)))
 (let ((@x417 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x962)) @x356 $x962)))
 (let (($x421 (not (>= ?x562 0))))
 (let (($x409 (<= ?x562 0)))
 (let ((@x360 (lemma ((_ th-lemma arith) (hypothesis (not $x409)) @x417 @x359 @x417 @x359 false) $x409)))
 (let ((@x1111 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x604 (not $x409) $x421)) (and-elim @x517 $x1153) (or (not $x409) $x421))))
 ((_ th-lemma arith) (unit-resolution @x1111 @x360 $x421) @x417 @x359 @x417 @x359 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             270
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.75
 :memory                    3.25
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1407494
 :num-checks                1
 :propagations              4
 :rlimit-count              5190
 :time                      0.01
 :total-time                0.02)
