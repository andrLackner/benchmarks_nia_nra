unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x701 (* 18 c!3)))
 (let ((?x669 (* k!2 k!2)))
 (let ((?x698 (* (- 1) ?x669)))
 (let ((?x416 (* (- 9) n!0)))
 (let ((?x329 (* 5 k!2)))
 (let ((?x478 (+ ?x329 (* 9 (* n!0 c!3)) ?x416 ?x698 ?x701)))
 (let (($x722 (<= ?x478 4)))
 (let (($x490 (= ?x478 4)))
 (let ((?x456 (+ k!2 c!3)))
 (let ((?x649 (+ 6 m!1)))
 (let ((?x655 (+ 1 n!0)))
 (let ((?x619 (* (- 6) (* ?x655 ?x655 ?x649 ?x649 (+ k!2 m!1) (+ k!2 m!1)))))
 (let ((?x654 (* 36 ?x669)))
 (let ((?x345 (* 6 (* k!2 k!2 m!1))))
 (let ((?x472 (* 36 (* c!3 c!3))))
 (let ((?x692 (* 72 (* k!2 k!2 n!0))))
 (let ((?x611 (* (- 6) (* ?x655 ?x655 ?x655 ?x649 ?x649 (+ k!2 m!1) (+ k!2 m!1)))))
 (let ((?x326 (* 36 (* k!2 k!2 n!0 n!0))))
 (let ((?x645 (+ k!2 m!1)))
 (let ((?x327 (* ?x655 ?x655 ?x649 ?x649 ?x649 ?x645 ?x645)))
 (let ((?x374 (+ (* ?x655 ?x655 ?x655 ?x649 ?x649 ?x649 ?x456 ?x456 ?x456) ?x327 (* 12 (* k!2 m!1 c!3)) (* 24 (* k!2 n!0 m!1 c!3)) ?x326 ?x611 (* 144 (* k!2 n!0 c!3)) (* 12 (* n!0 m!1 c!3 c!3)) ?x692 (* 36 (* n!0 n!0 c!3 c!3)) (* 72 (* k!2 n!0 n!0 c!3)) (* 6 (* ?x655 ?x655 ?x655 ?x649 ?x456 ?x456)) (* 12 (* k!2 k!2 n!0 m!1)) (* 72 (* k!2 c!3)) (* (- 6) (* ?x655 ?x655 ?x655 ?x649 ?x649 ?x456 ?x456 ?x456)) (* 6 (* n!0 n!0 m!1 c!3 c!3)) ?x472 ?x345 ?x654 ?x619 (* 6 (* k!2 k!2 n!0 n!0 m!1)) (* 12 (* k!2 n!0 n!0 m!1 c!3)) (* (- 1) (* ?x655 ?x655 ?x649 ?x649 ?x456 ?x456)) (* 72 (* n!0 c!3 c!3)) (* (- 6) (* ?x655 ?x655 ?x655 ?x655 ?x649 ?x649 ?x456 ?x456 ?x456)) (* 6 (* m!1 c!3 c!3)))))
 (let (($x876 (= ?x374 0)))
 (let (($x748 (not $x876)))
 (let ((?x436 (* (- 3) n!0)))
 (let ((?x320 (* (- 3) (* n!0 n!0))))
 (let ((?x476 (+ k!2 ?x320 ?x436)))
 (let (($x323 (= ?x476 1)))
 (let ((?x452 (* 3 c!3)))
 (let ((?x454 (* (- 2) n!0)))
 (let ((?x450 (* (- 1) (* k!2 n!0))))
 (let ((?x462 (+ k!2 ?x450 ?x454 ?x452)))
 (let (($x608 (= ?x462 1)))
 (let ((?x734 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x325 (= ?x734 (- 6))))
 (let (($x610 (and $x325 $x490 $x608 $x323 $x748)))
 (let ((?x659 (+ c!3 k!2)))
 (let ((?x337 (+ ?x654 (* (- 6) (* ?x655 ?x655 ?x655 ?x649 ?x649 ?x659 ?x659 ?x659)) ?x619 (* 6 (* ?x655 ?x655 ?x655 ?x649 ?x659 ?x659)) (* 6 (* c!3 c!3 m!1 n!0 n!0)) (* 12 (* c!3 k!2 m!1 n!0 n!0)) (* 6 (* k!2 k!2 m!1 n!0 n!0)) ?x345 (* 12 (* c!3 k!2 m!1)) (* 6 (* c!3 c!3 m!1)) (* 72 (* c!3 k!2)) ?x472 (* 72 (* c!3 k!2 n!0 n!0)) (* 36 (* c!3 c!3 n!0 n!0)) (* 12 (* k!2 k!2 m!1 n!0)) (* 24 (* c!3 k!2 m!1 n!0)) (* 12 (* c!3 c!3 m!1 n!0)) ?x692 (* 144 (* c!3 k!2 n!0)) (* ?x655 ?x655 ?x655 ?x649 ?x649 ?x649 ?x659 ?x659 ?x659) ?x327 (* 72 (* c!3 c!3 n!0)) (* (- 6) (* ?x655 ?x655 ?x655 ?x655 ?x649 ?x649 ?x659 ?x659 ?x659)) ?x611 ?x326 (* (- 1) (* ?x655 ?x655 ?x649 ?x649 ?x659 ?x659)))))
 (let (($x331 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x701 ?x329 ?x416 ?x698 (* 9 (* c!3 n!0))) 4) (= (+ ?x452 k!2 ?x454 ?x450) 1) (= (+ k!2 ?x436 ?x320) 1) (not (= ?x337 0)))))
 (let (($x356 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x728 (* ?x311 ?x311 ?x308 ?x308 ?x69 ?x69)))
 (let ((?x404 (* (- 1) ?x728)))
 (let ((?x75 (+ k m)))
 (let ((?x687 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x680 (* (- 6) ?x687)))
 (let ((?x684 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x681 (* (- 6) ?x684)))
 (let ((?x673 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x671 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x525 (* ?x311 ?x311 ?x311 ?x308 ?x69 ?x69)))
 (let ((?x510 (* 6 ?x525)))
 (let ((?x365 (* ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x357 (* (- 6) ?x365)))
 (let ((?x360 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x676 (* (- 6) ?x360)))
 (let ((?x862 (+ (* 36 (* k k)) ?x676 ?x357 ?x510 (* 6 (* c c m n n)) (* 12 (* c k m n n)) (* 6 (* k k m n n)) (* 6 (* k k m)) (* 12 (* c k m)) (* 6 (* c c m)) (* 72 (* c k)) (* 36 (* c c)) (* 72 (* c k n n)) (* 36 (* c c n n)) (* 12 (* k k m n)) (* 24 (* c k m n)) (* 12 (* c c m n)) (* 72 (* k k n)) (* 144 (* c k n)) ?x671 ?x673 (* 72 (* c c n)) ?x681 ?x680 (* 36 (* k k n n)) ?x404)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= ?x862 0))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x719 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x728 (* ?x311 ?x311 ?x308 ?x308 ?x69 ?x69)))
 (let ((?x404 (* (- 1) ?x728)))
 (let ((?x525 (* ?x311 ?x311 ?x311 ?x308 ?x69 ?x69)))
 (let ((?x510 (* 6 ?x525)))
 (let ((?x75 (+ k m)))
 (let ((?x673 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x365 (* ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x357 (* (- 6) ?x365)))
 (let ((?x687 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x680 (* (- 6) ?x687)))
 (let ((?x684 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x681 (* (- 6) ?x684)))
 (let ((?x360 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x676 (* (- 6) ?x360)))
 (let ((?x671 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x408 (+ ?x671 ?x676 ?x681 ?x680 ?x357 (* 6 (* ?x311 ?x311 ?x308 ?x69 ?x69)) ?x673 ?x510 ?x404)))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x623 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x623 $x354 (not (= ?x408 0)))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x708 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x728 (* ?x311 ?x311 ?x308 ?x308 ?x69 ?x69)))
 (let ((?x404 (* (- 1) ?x728)))
 (let ((?x75 (+ k m)))
 (let ((?x687 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x680 (* (- 6) ?x687)))
 (let ((?x684 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x681 (* (- 6) ?x684)))
 (let ((?x673 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x671 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x525 (* ?x311 ?x311 ?x311 ?x308 ?x69 ?x69)))
 (let ((?x510 (* 6 ?x525)))
 (let ((?x365 (* ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x357 (* (- 6) ?x365)))
 (let ((?x360 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x676 (* (- 6) ?x360)))
 (let ((?x862 (+ (* 36 (* k k)) ?x676 ?x357 ?x510 (* 6 (* c c m n n)) (* 12 (* c k m n n)) (* 6 (* k k m n n)) (* 6 (* k k m)) (* 12 (* c k m)) (* 6 (* c c m)) (* 72 (* c k)) (* 36 (* c c)) (* 72 (* c k n n)) (* 36 (* c c n n)) (* 12 (* k k m n)) (* 24 (* c k m n)) (* 12 (* c c m n)) (* 72 (* k k n)) (* 144 (* c k n)) ?x671 ?x673 (* 72 (* c c n)) ?x681 ?x680 (* 36 (* k k n n)) ?x404)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x869 (and $x124 $x208 $x260 $x298 (not (= ?x862 0)))))
 (let ((?x408 (+ ?x671 ?x676 ?x681 ?x680 ?x357 (* 6 (* ?x311 ?x311 ?x308 ?x69 ?x69)) ?x673 ?x510 ?x404)))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x623 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x579 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x623 $x354 (not (= ?x408 0)))))
 (rewrite (= $x579 $x869))))))))))))))))))))))))))))))))))))
 ))
 (let (($x696 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x728 (* ?x311 ?x311 ?x308 ?x308 ?x69 ?x69)))
 (let ((?x764 (+ (* (- 1) (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x308 ?x69 ?x69 ?x69)) (* 6 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)) (* 6 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)) (* 6 (* ?x311 ?x311 ?x311 ?x308 ?x308 (+ k m) (+ k m))) (* 6 (* ?x311 ?x311 ?x308 ?x308 (+ k m) (+ k m))) (* (- 6) (* ?x311 ?x311 ?x308 ?x69 ?x69)) (* (- 1) (* ?x311 ?x311 ?x308 ?x308 ?x308 (+ k m) (+ k m))) (* (- 6) (* ?x311 ?x311 ?x311 ?x308 ?x69 ?x69)) ?x728)))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x344 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x597 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x597 (- 4)) $x344 $x354 (not (= ?x764 0)))))))))))))) :qid k!34))
 ))
 (let ((?x532 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x728 (* ?x311 ?x311 ?x308 ?x308 ?x69 ?x69)))
 (let ((?x404 (* (- 1) ?x728)))
 (let ((?x525 (* ?x311 ?x311 ?x311 ?x308 ?x69 ?x69)))
 (let ((?x510 (* 6 ?x525)))
 (let ((?x75 (+ k m)))
 (let ((?x673 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x365 (* ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x357 (* (- 6) ?x365)))
 (let ((?x687 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x75 ?x75)))
 (let ((?x680 (* (- 6) ?x687)))
 (let ((?x684 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x681 (* (- 6) ?x684)))
 (let ((?x360 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x676 (* (- 6) ?x360)))
 (let ((?x671 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x308 ?x69 ?x69 ?x69)))
 (let ((?x408 (+ ?x671 ?x676 ?x681 ?x680 ?x357 (* 6 (* ?x311 ?x311 ?x308 ?x69 ?x69)) ?x673 ?x510 ?x404)))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x623 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x579 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x623 $x354 (not (= ?x408 0)))))
 (let ((?x764 (+ (* (- 1) ?x671) (* 6 ?x360) (* 6 ?x684) (* 6 ?x687) (* 6 ?x365) (* (- 6) (* ?x311 ?x311 ?x308 ?x69 ?x69)) (* (- 1) ?x673) (* (- 6) ?x525) ?x728)))
 (let (($x344 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x597 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x366 (and $x124 (= ?x597 (- 4)) $x344 $x354 (not (= ?x764 0)))))
 (rewrite (= $x366 $x579))))))))))))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ c k)))
 (let ((?x78 (+ (* (- 1) ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* 6 (+ k m) (+ k m) ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 (+ k m) (+ k m) ?x70 ?x70 ?x71 ?x71))))
 (let ((?x83 (- (- ?x78 (* 6 ?x69 ?x69 ?x70 ?x71 ?x71)) (* (+ k m) (+ k m) ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x86 (+ (- ?x83 (* 6 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x86 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x691 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x728 (* ?x311 ?x311 ?x308 ?x308 ?x69 ?x69)))
 (let ((?x764 (+ (* (- 1) (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x308 ?x69 ?x69 ?x69)) (* 6 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)) (* 6 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x69 ?x69 ?x69)) (* 6 (* ?x311 ?x311 ?x311 ?x308 ?x308 (+ k m) (+ k m))) (* 6 (* ?x311 ?x311 ?x308 ?x308 (+ k m) (+ k m))) (* (- 6) (* ?x311 ?x311 ?x308 ?x69 ?x69)) (* (- 1) (* ?x311 ?x311 ?x308 ?x308 ?x308 (+ k m) (+ k m))) (* (- 6) (* ?x311 ?x311 ?x311 ?x308 ?x69 ?x69)) ?x728)))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x344 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x597 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x366 (and $x124 (= ?x597 (- 4)) $x344 $x354 (not (= ?x764 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x78 (+ (* (- 1) ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* 6 (+ k m) (+ k m) ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 (+ k m) (+ k m) ?x70 ?x70 ?x71 ?x71))))
 (let ((?x83 (- (- ?x78 (* 6 ?x69 ?x69 ?x70 ?x71 ?x71)) (* (+ k m) (+ k m) ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x86 (+ (- ?x83 (* 6 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x86 0))))))
 (rewrite (= $x90 $x366))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x686 (mp (mp @x92 (quant-intro (proof-bind ?x691) (= $x91 $x696)) $x696) (rewrite (= $x696 $x696)) $x696)))
 (let ((@x629 (mp (mp @x686 (quant-intro (proof-bind ?x532) (= $x696 $x719)) $x719) (quant-intro (proof-bind ?x708) (= $x719 $x356)) $x356)))
 (let ((@x745 (mp (mp~ @x629 (sk (~ $x356 $x331)) $x331) (rewrite (= $x331 $x610)) $x610)))
 (let ((@x484 (and-elim @x745 $x490)))
 (let ((@x813 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x490) $x722)) @x484 $x722)))
 (let (($x874 (>= ?x478 4)))
 (let ((@x402 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x490) $x874)) @x484 $x874)))
 (let (($x790 (<= ?x462 1)))
 (let ((@x496 (and-elim @x745 $x608)))
 (let ((@x804 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x608) $x790)) @x496 $x790)))
 (let (($x868 (>= ?x462 1)))
 (let ((@x805 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x608) $x868)) @x496 $x868)))
 (let (($x582 (<= ?x476 1)))
 (let ((@x464 (and-elim @x745 $x323)))
 (let ((@x879 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x582)) @x464 $x582)))
 (let (($x741 (>= ?x476 1)))
 (let ((@x603 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x741)) @x464 $x741)))
 (let (($x792 (<= ?x734 (- 6))))
 (let ((@x714 (and-elim @x745 $x325)))
 (let ((@x801 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x792)) @x714 $x792)))
 (let (($x703 (>= ?x734 (- 6))))
 (let ((@x864 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x703)) @x714 $x703)))
 (let (($x872 (not (<= ?x374 0))))
 (let (($x689 (>= ?x374 0)))
 (let ((@x322 ((_ th-lemma arith) (hypothesis (not $x689)) @x603 @x879 @x864 @x801 @x864 @x801 @x603 @x879 @x603 @x879 @x805 @x804 @x864 @x801 @x603 @x879 @x603 @x879 @x805 @x804 @x805 @x804 @x402 @x813 false)))
 (let ((@x625 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x876 $x872 (not $x689))) (and-elim @x745 $x748) (or $x872 (not $x689)))))
 ((_ th-lemma arith) (unit-resolution @x625 (lemma @x322 $x689) $x872) @x603 @x879 @x864 @x801 @x864 @x801 @x603 @x879 @x603 @x879 @x805 @x804 @x864 @x801 @x603 @x879 @x603 @x879 @x805 @x804 @x805 @x804 @x402 @x813 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        22
 :arith-assert-upper        31
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           13
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             258
 :arith-nonlinear-bounds    14
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              13
 :arith-row-summations      18
 :arith-tableau-max-columns 59
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 23
 :del-clause                16
 :final-checks              8
 :max-memory                3.82
 :memory                    3.26
 :mk-bool-var               43
 :mk-clause                 16
 :num-allocs                1382802
 :num-checks                1
 :propagations              10
 :rlimit-count              8401
 :time                      0.01
 :total-time                0.02)
