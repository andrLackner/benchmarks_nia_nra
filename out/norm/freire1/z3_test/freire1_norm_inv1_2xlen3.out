unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x3511 (* r!1 r!1)))
 (let ((?x3524 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x4604 (* (- 1) ?x36)))
 (let ((?x652 (* (- 2) x00)))
 (let ((?x3292 (+ r00 ?x652 ?x4604 (* 2 x!0) ?x3524 ?x3511)))
 (let (($x3612 (<= ?x3292 0)))
 (let (($x3614 (= ?x3292 0)))
 (let ((?x3623 (+ x!0 ?x3524)))
 (let ((?x3272 (+ 1 r!1)))
 (let ((?x3549 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x2533 (+ (* 15 (* r00 r00 x!0 x!0 r!1 r!1 r!1)) (* r00 x!0 x!0 x!0) (* 11 (* x!0 r!1)) (* 2 (* x00 ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623)) (* (- 36) (* x00 x!0 r!1 r!1 r!1)) (* 2 (* r00 r00 r!1 r!1 r!1 r!1 r!1 r!1)) (* 2 (* ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623)) (* (- 6) (* r00 r00 x!0 r!1 r!1 r!1 r!1 r!1)) (* (- 2) (* r00 r!1 r!1 r!1 r!1 r!1 r!1)) (* 2 (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623)) (* 6 (* r00 x!0 r!1 r!1 r!1 r!1 r!1)) (* (- 18) (* r00 r00 x!0 r!1 r!1 r!1)) (* 12 (* x00 r!1 r!1 r!1 r!1 r!1)) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3623) (* 2 (* x!0 x!0 x!0 x!0 r!1)) (* 5 (* r00 x!0 x!0 x!0 r!1)) (* 30 (* x00 x!0 x!0 r!1 r!1 r!1)) (* 30 (* x00 x!0 x!0 r!1 r!1)) (* 6 (* r00 r00 r!1 r!1 r!1 r!1 r!1)) (* (- 1) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623)) (* (- 1) (* r00 r00 r!1)) (* 2 (* r00 x!0 x!0 x!0 r!1 r!1 r!1)) (* 12 (* x00 x!0 x!0 r!1 r!1 r!1 r!1)) (* (- 2) (* x00 x!0 x!0 x!0)) (* 4 (* x00 r!1 r!1 r!1 r!1 r!1 r!1)) (* (- 4) (* r00 r!1 r!1 r!1)) (* (- 9) (* x!0 r!1 r!1 r!1 r!1)) (* 4 (* r00 r00 r!1 r!1 r!1)) (* 5 (* r00 x!0 x!0 x!0 r!1 r!1)) x!0 (* 16 (* r00 x!0 r!1 r!1 r!1 r!1)) (* (- 6) (* r00 r!1 r!1 r!1 r!1 r!1)) (* (- 8) (* r00 r!1 r!1 r!1 r!1)) (* (- 3) (* x!0 x!0 x!0 r!1)) ?x3524 (* (- 16) (* r00 r00 x!0 r!1 r!1 r!1 r!1)) (* (- 3) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623)) (* (- 15) (* r00 x!0 x!0 r!1 r!1)) (* 16 (* x!0 x!0 r!1 r!1 r!1)) (* 16 (* x00 r!1 r!1 r!1 r!1)) (* 8 (* x00 r!1 r!1 r!1)) (* (- 4) (* x!0 x!0)) (* (- 2) (* r00 r00 x!0 x!0 x!0 r!1 r!1 r!1)) (* 6 (* x00 x!0 x!0 r!1)) (* (- 11) (* r!1 r!1 r!1)) (* (- 10) (* x00 x!0 x!0 x!0 r!1 r!1)) (* (- 7) ?x3511) (* (- 6) (* r!1 r!1 r!1 r!1)) ?x3549 (* (- 1) (* x!0 x!0 x!0)) (* (- 4) (* x00 x!0 x!0 x!0 r!1 r!1 r!1)) (* 8 (* r00 r00 r!1 r!1 r!1 r!1)) (* (- 2) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623 ?x3623)) (* 6 (* r00 x!0 r!1 r!1)) (* (- 15) (* r00 x!0 x!0 r!1 r!1 r!1)) (* (- 1) (* r00 x!0)) (* (- 12) (* x00 x!0 r!1 r!1 r!1 r!1 r!1)) (* 6 (* x!0 r!1 r!1 r!1)) (* 17 (* x!0 r!1 r!1)) (* r00 r!1) (* (- 3) (* r00 x!0 x!0 r!1)) (* 18 (* r00 x!0 r!1 r!1 r!1)) (* 3 (* r00 r00 x!0 x!0 r!1)) (* 15 (* r00 r00 x!0 x!0 r!1 r!1)) (* (- 5) (* r00 r00 x!0 x!0 x!0 r!1)) (* (- 5) (* r00 r00 x!0 x!0 x!0 r!1 r!1)) (* (- 10) (* x!0 x!0 x!0 r!1 r!1)) (* (- 5) (* x!0 x!0 r!1)) (* 3 (* x!0 x!0 r!1 r!1)) (* r00 r00 x!0) (* (- 2) (* ?x3272 ?x3272 ?x3623 ?x3623 ?x3623 ?x3623)) (* (- 2) (* x00 r!1)) (* r00 r00 ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623) (* 2 (* x00 x!0)) (* (- 1) (* r00 ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623)) (* (- 12) (* x00 x!0 r!1 r!1)) (* 4 (* ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623 ?x3623)) (* (- 6) (* r00 r00 x!0 r!1 r!1)) (* (- 32) (* x00 x!0 r!1 r!1 r!1 r!1)) (* (- 6) (* r00 x!0 x!0 r!1 r!1 r!1 r!1)) (* 6 (* r00 r00 x!0 x!0 r!1 r!1 r!1 r!1)) (* (- 2) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3623)) (* 3 (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3623 ?x3623 ?x3623)) (* (- 1) (* r00 r00 x!0 x!0 x!0)) (* (- 10) (* x00 x!0 x!0 x!0 r!1)))))
 (let (($x4137 (= ?x2533 0)))
 (let (($x4136 (not $x4137)))
 (let (($x4719 (and $x3614 $x4136)))
 (let ((?x3526 (+ ?x3524 x!0)))
 (let ((?x3559 (* x!0 x!0 x!0)))
 (let ((?x3605 (+ r!1 (* (- 1) x!0) (* 7 ?x3511) (* 2 (* x!0 x!0 x!0 x00)) (* (- 4) (* r!1 r!1 r!1 r!1 r!1 r!1 x00)) (* 10 (* r!1 x!0 x!0 x!0 x00)) (* 10 (* r!1 r!1 x!0 x!0 x!0 x00)) (* 4 (* r!1 r!1 r!1 x!0 x!0 x!0 x00)) (* 2 (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526 ?x3526)) (* 4 (* r!1 r!1 r!1 r00)) (* 8 (* r!1 r!1 r!1 r!1 r00)) (* 6 (* r!1 r!1 r!1 r!1 r!1 r00)) (* (- 6) (* r!1 r!1 x!0 r00)) (* (- 18) (* r!1 r!1 r!1 x!0 r00)) (* (- 16) (* r!1 r!1 r!1 r!1 x!0 r00)) (* 3 (* r!1 x!0 x!0 r00)) (* 15 (* r!1 r!1 x!0 x!0 r00)) (* 15 (* r!1 r!1 r!1 x!0 x!0 r00)) (* (- 1) (* x!0 x!0 x!0 r00)) (* (- 5) (* r!1 x!0 x!0 x!0 r00)) (* (- 5) (* r!1 r!1 x!0 x!0 x!0 r00)) (* (- 1) (* r!1 r00)) (* x!0 r00) (* (- 11) (* r!1 x!0)) (* (- 17) (* r!1 r!1 x!0)) (* (- 6) (* r!1 r!1 r!1 x!0)) (* 9 (* r!1 r!1 r!1 r!1 x!0)) (* 11 (* r!1 r!1 r!1)) (* 6 (* r!1 r!1 r!1 r!1)) (* (- 1) ?x3549) (* 12 (* r!1 r!1 r!1 r!1 r!1 x!0 x00)) (* (- 4) (* r!1 r!1 r!1 r00 r00)) (* (- 8) (* r!1 r!1 r!1 r!1 r00 r00)) (* 16 (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 3) (* r!1 x!0 x!0 r00 r00)) (* (- 15) (* r!1 r!1 x!0 x!0 r00 r00)) (* (- 15) (* r!1 r!1 r!1 x!0 x!0 r00 r00)) (* x!0 x!0 x!0 r00 r00) (* 5 (* r!1 x!0 x!0 x!0 r00 r00)) (* 5 (* r!1 r!1 x!0 x!0 x!0 r00 r00)) (* 10 (* r!1 r!1 x!0 x!0 x!0)) (* 3 (* r!1 x!0 x!0 x!0)) ?x3559 (* 4 (* x!0 x!0)) (* 5 (* r!1 x!0 x!0)) (* (- 3) (* r!1 r!1 x!0 x!0)) (* (- 2) (* r!1 x!0 x!0 x!0 x!0)) (* r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* 2 (* ?x3272 ?x3272 ?x3526 ?x3526 ?x3526 ?x3526)) (* 2 (* r!1 x00)) (* 32 (* r!1 r!1 r!1 r!1 x!0 x00)) (* 36 (* r!1 r!1 r!1 x!0 x00)) (* 12 (* r!1 r!1 x!0 x00)) (* (- 2) (* x!0 x00)) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526) (* (- 1) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3526)) (* 2 (* r!1 r!1 r!1 x!0 x!0 x!0 r00 r00)) (* 6 (* r!1 r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 r!1 x!0 x!0 r00 r00)) (* r00 ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526) (* (- 1) (* r00 r00 ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526)) (* (- 6) (* r!1 r!1 r!1 r!1 r!1 r00 r00)) (* (- 2) (* r!1 r!1 r!1 r!1 r!1 r!1 r00 r00)) (* (- 2) (* ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526)) (* (- 16) (* r!1 r!1 r!1 x!0 x!0)) (* (- 2) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526)) (* 2 (* r!1 r!1 r!1 r!1 r!1 r!1 r00)) (* 18 (* r!1 r!1 r!1 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 r!1 r!1 x!0 r00)) (* 3 (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526)) (* 6 (* r!1 r!1 r!1 r!1 x!0 x!0 r00)) (* (- 2) (* r!1 r!1 r!1 x!0 x!0 x!0 r00)) (* (- 4) (* ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526 ?x3526)) (* (- 2) (* x00 ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526)) (* (- 3) (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3526 ?x3526 ?x3526)) (* (- 12) (* r!1 r!1 r!1 r!1 x!0 x!0 x00)) (* 2 (* ?x3272 ?x3272 ?x3272 ?x3272 ?x3272 ?x3526)) (* 6 (* r!1 r!1 x!0 r00 r00)) (* (- 16) (* r!1 r!1 r!1 r!1 x00)) (* (- 8) (* r!1 r!1 r!1 x00)) (* (- 6) (* r!1 x!0 x!0 x00)) (* (- 12) (* r!1 r!1 r!1 r!1 r!1 x00)) (* (- 30) (* r!1 r!1 x!0 x!0 x00)) (* (- 30) (* r!1 r!1 r!1 x!0 x!0 x00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x179 (* (- 1) r00)))
 (let (($x3167 (and (= (+ r!1 (* (- 2) x!0) ?x179 (* (- 1) ?x3511) ?x35 ?x36) 0) (not (= ?x3605 0)))))
 (let (($x4596 (exists ((r Int) (x Int) )(! (let ((?x5514 (* (- 6) (* r x x x00))))
 (let ((?x5482 (* (- 8) (* r r r x00))))
 (let ((?x129 (* (- 1) r)))
 (let ((?x192 (+ ?x129 x)))
 (let ((?x221 (+ 1 r)))
 (let ((?x2324 (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)))
 (let ((?x2013 (* r r00 r00)))
 (let ((?x1507 (* x x x)))
 (let ((?x1227 (* x x x r00 r00)))
 (let ((?x1248 (* (- 3) (* r x x r00 r00))))
 (let ((?x664 (* x r00)))
 (let ((?x809 (* (- 1) x)))
 (let ((?x5757 (+ r ?x809 (* 7 (* r r)) (* 2 (* x x x x00)) (* (- 4) (* r r r r r r x00)) (* 10 (* r x x x x00)) (* 10 (* r r x x x x00)) (* 4 (* r r r x x x x00)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192 ?x192)) (* 4 (* r r r r00)) (* 8 (* r r r r r00)) (* 6 (* r r r r r r00)) (* (- 6) (* r r x r00)) (* (- 18) (* r r r x r00)) (* (- 16) (* r r r r x r00)) (* 3 (* r x x r00)) (* 15 (* r r x x r00)) (* 15 (* r r r x x r00)) (* (- 1) (* x x x r00)) (* (- 5) (* r x x x r00)) (* (- 5) (* r r x x x r00)) (* (- 1) (* r r00)) ?x664 (* (- 11) (* r x)) (* (- 17) (* r r x)) (* (- 6) (* r r r x)) (* 9 (* r r r r x)) (* 11 (* r r r)) (* 6 (* r r r r)) (* (- 1) (* r r r r r)) (* 12 (* r r r r r x x00)) (* (- 4) (* r r r r00 r00)) (* (- 8) (* r r r r r00 r00)) (* 16 (* r r r r x r00 r00)) ?x1248 (* (- 15) (* r r x x r00 r00)) (* (- 15) (* r r r x x r00 r00)) ?x1227 (* 5 (* r x x x r00 r00)) (* 5 (* r r x x x r00 r00)) (* 10 (* r r x x x)) (* 3 (* r x x x)) ?x1507 (* 4 (* x x)) (* 5 (* r x x)) (* (- 3) (* r r x x)) (* (- 2) (* r x x x x)) ?x2013 (* (- 1) (* x r00 r00)) (* 2 (* ?x221 ?x221 ?x192 ?x192 ?x192 ?x192)) (* 2 (* r x00)) (* 32 (* r r r r x x00)) (* 36 (* r r r x x00)) (* 12 (* r r x x00)) (* (- 2) (* x x00)) ?x2324 (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x192)) (* 2 (* r r r x x x r00 r00)) (* 6 (* r r r r r x r00 r00)) (* (- 6) (* r r r r x x r00 r00)) (* r00 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 6) (* r r r r r r00 r00)) (* (- 2) (* r r r r r r r00 r00)) (* (- 2) (* ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 16) (* r r r x x)) (* (- 2) (* ?x221 ?x221 ?x221 ?x221 ?x192 ?x192)) (* 2 (* r r r r r r r00)) (* 18 (* r r r x r00 r00)) (* (- 6) (* r r r r r x r00)) (* 3 (* ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* 6 (* r r r r x x r00)) (* (- 2) (* r r r x x x r00)) (* (- 4) (* ?x221 ?x221 ?x221 ?x192 ?x192 ?x192 ?x192)) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 3) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 12) (* r r r r x x x00)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x192)) (* 6 (* r r x r00 r00)) (* (- 16) (* r r r r x00)) ?x5482 ?x5514 (* (- 12) (* r r r r r x00)) (* (- 30) (* r r x x x00)) (* (- 30) (* r r r x x x00)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x180 (* (- 1) ?x30)))
 (let ((?x179 (* (- 1) r00)))
 (let (($x182 (= (+ r (* (- 2) x) ?x179 ?x180 ?x35 ?x36) 0)))
 (and $x182 (not (= ?x5757 0)))))))))))))))))))))) :qid k!26))
 ))
 (let (($x259 (exists ((r Int) (x Int) )(! (let ((?x129 (* (- 1) r)))
 (let ((?x2195 (+ x ?x129)))
 (let ((?x221 (+ 1 r)))
 (let ((?x1692 (+ (* (- 2) (* x00 ?x2195 ?x2195 ?x2195)) (* 4 (* x00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* r00 ?x221 ?x2195) (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x221 ?x2195)) (* (- 1) (* r00 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195)) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x2195) (* 3 (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* x00 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x2195)) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* 2 (* ?x2195 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* (- 1) (* r00 r00 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* r00 r00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x2195 ?x2195 ?x2195) (* r00 r00 ?x221 ?x2195 ?x2195 ?x2195) (* ?x221 ?x221 ?x221 ?x2195) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* r00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 4) (* ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 3) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x2195 ?x2195)) (* 2 (* x00 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x2195)) (* 2 (* ?x221 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x2195)) (* (- 1) (* r00 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x221 ?x2195))))
 (let ((?x36 (* r00 r00)))
 (let ((?x4604 (* (- 1) ?x36)))
 (let ((?x652 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x129 r00 ?x30 ?x32 ?x652 ?x4604) 0) (not (= ?x1692 0)))))))))))) :qid k!26))
 ))
 (let ((?x1669 (lambda ((r Int) (x Int) )(let ((?x5514 (* (- 6) (* r x x x00))))
 (let ((?x5482 (* (- 8) (* r r r x00))))
 (let ((?x129 (* (- 1) r)))
 (let ((?x192 (+ ?x129 x)))
 (let ((?x221 (+ 1 r)))
 (let ((?x2324 (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)))
 (let ((?x2013 (* r r00 r00)))
 (let ((?x1507 (* x x x)))
 (let ((?x1227 (* x x x r00 r00)))
 (let ((?x1248 (* (- 3) (* r x x r00 r00))))
 (let ((?x664 (* x r00)))
 (let ((?x809 (* (- 1) x)))
 (let ((?x5757 (+ r ?x809 (* 7 (* r r)) (* 2 (* x x x x00)) (* (- 4) (* r r r r r r x00)) (* 10 (* r x x x x00)) (* 10 (* r r x x x x00)) (* 4 (* r r r x x x x00)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192 ?x192)) (* 4 (* r r r r00)) (* 8 (* r r r r r00)) (* 6 (* r r r r r r00)) (* (- 6) (* r r x r00)) (* (- 18) (* r r r x r00)) (* (- 16) (* r r r r x r00)) (* 3 (* r x x r00)) (* 15 (* r r x x r00)) (* 15 (* r r r x x r00)) (* (- 1) (* x x x r00)) (* (- 5) (* r x x x r00)) (* (- 5) (* r r x x x r00)) (* (- 1) (* r r00)) ?x664 (* (- 11) (* r x)) (* (- 17) (* r r x)) (* (- 6) (* r r r x)) (* 9 (* r r r r x)) (* 11 (* r r r)) (* 6 (* r r r r)) (* (- 1) (* r r r r r)) (* 12 (* r r r r r x x00)) (* (- 4) (* r r r r00 r00)) (* (- 8) (* r r r r r00 r00)) (* 16 (* r r r r x r00 r00)) ?x1248 (* (- 15) (* r r x x r00 r00)) (* (- 15) (* r r r x x r00 r00)) ?x1227 (* 5 (* r x x x r00 r00)) (* 5 (* r r x x x r00 r00)) (* 10 (* r r x x x)) (* 3 (* r x x x)) ?x1507 (* 4 (* x x)) (* 5 (* r x x)) (* (- 3) (* r r x x)) (* (- 2) (* r x x x x)) ?x2013 (* (- 1) (* x r00 r00)) (* 2 (* ?x221 ?x221 ?x192 ?x192 ?x192 ?x192)) (* 2 (* r x00)) (* 32 (* r r r r x x00)) (* 36 (* r r r x x00)) (* 12 (* r r x x00)) (* (- 2) (* x x00)) ?x2324 (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x192)) (* 2 (* r r r x x x r00 r00)) (* 6 (* r r r r r x r00 r00)) (* (- 6) (* r r r r x x r00 r00)) (* r00 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 6) (* r r r r r r00 r00)) (* (- 2) (* r r r r r r r00 r00)) (* (- 2) (* ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 16) (* r r r x x)) (* (- 2) (* ?x221 ?x221 ?x221 ?x221 ?x192 ?x192)) (* 2 (* r r r r r r r00)) (* 18 (* r r r x r00 r00)) (* (- 6) (* r r r r r x r00)) (* 3 (* ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* 6 (* r r r r x x r00)) (* (- 2) (* r r r x x x r00)) (* (- 4) (* ?x221 ?x221 ?x221 ?x192 ?x192 ?x192 ?x192)) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 3) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x192 ?x192 ?x192)) (* (- 12) (* r r r r x x x00)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x192)) (* 6 (* r r x r00 r00)) (* (- 16) (* r r r r x00)) ?x5482 ?x5514 (* (- 12) (* r r r r r x00)) (* (- 30) (* r r x x x00)) (* (- 30) (* r r r x x x00)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x180 (* (- 1) ?x30)))
 (let ((?x179 (* (- 1) r00)))
 (let (($x182 (= (+ r (* (- 2) x) ?x179 ?x180 ?x35 ?x36) 0)))
 (let (($x5763 (and $x182 (not (= ?x5757 0)))))
 (let ((?x1688 (* (- 2) (* x00 ?x221 ?x221 (+ x ?x129) (+ x ?x129) (+ x ?x129)))))
 (let ((?x2195 (+ x ?x129)))
 (let ((?x1692 (+ (* (- 2) (* x00 ?x2195 ?x2195 ?x2195)) (* 4 (* x00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* r00 ?x221 ?x2195) (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x221 ?x2195)) (* (- 1) (* r00 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195)) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x2195) (* 3 (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* x00 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x2195)) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* 2 (* ?x2195 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* (- 1) (* r00 r00 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* r00 r00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x2195 ?x2195 ?x2195) (* r00 r00 ?x221 ?x2195 ?x2195 ?x2195) (* ?x221 ?x221 ?x221 ?x2195) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* r00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 4) (* ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 3) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x2195 ?x2195)) (* 2 (* x00 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x2195)) (* 2 (* ?x221 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x2195)) (* (- 1) (* r00 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195)) ?x1688 (* r00 ?x221 ?x221 ?x221 ?x2195))))
 (let (($x4631 (= (+ ?x129 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x332 (and $x4631 (not (= ?x1692 0)))))
 (rewrite (= $x332 $x5763))))))))))))))))))))))))))))
 ))
 (let (($x124 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x45 (+ r 1)))
 (let ((?x49 (+ (* (- 2) ?x42 ?x42 ?x42 x00) (* 4 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 x00) (* ?x45 ?x45 r00 ?x42 ?x42 ?x42) (* ?x45 r00 ?x42))))
 (let ((?x53 (+ (- ?x49 (* ?x45 ?x45 ?x45 ?x45 ?x42)) (* 2 ?x45 ?x45 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (- ?x53 (* ?x45 ?x45 r00 r00 ?x42 ?x42 ?x42)) (* ?x45 ?x45 ?x42))))
 (let ((?x62 (+ (- ?x58 (* ?x45 r00 ?x42 ?x42 ?x42)) (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 ?x42) (* 2 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let ((?x69 (+ (- ?x62 (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42)) (* ?x45 ?x45 ?x45 ?x45 r00 r00 ?x42) (* 3 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42) (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 x00))))
 (let ((?x75 (+ (- ?x69 (* 2 ?x45 ?x42 x00)) (* ?x45 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42) (* 2 ?x42 ?x42 ?x42 ?x42) (* ?x45 ?x45 ?x45 ?x45 r00 ?x42 ?x42 ?x42))))
 (let ((?x80 (- (- ?x75 (* r00 r00 ?x42 ?x42 ?x42)) (* ?x45 ?x45 ?x45 ?x45 r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x86 (+ (- ?x80 (* ?x45 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42)) (* 2 ?x45 ?x45 ?x45 r00 r00 ?x42 ?x42 ?x42) (* r00 ?x42 ?x42 ?x42) (* ?x45 r00 r00 ?x42 ?x42 ?x42) (* ?x45 ?x45 ?x45 ?x42))))
 (let ((?x94 (- (- ?x86 (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 x00)) (* 2 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let ((?x96 (- (- ?x94 (* 2 ?x45 ?x45 ?x45 r00 ?x42 ?x42 ?x42)) (* 4 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x98 (- (- ?x96 (* 2 ?x45 ?x42 ?x42 ?x42 ?x42)) (* 3 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let ((?x101 (+ ?x98 (* 2 ?x45 ?x45 ?x45 ?x42 ?x42) (* 2 ?x45 ?x42 ?x42 ?x42 x00))))
 (let ((?x107 (+ (- (- ?x101 (* ?x45 ?x42 ?x42 ?x42)) (* ?x45 r00 r00 ?x42)) (* 2 ?x45 ?x42 ?x42))))
 (let ((?x112 (- (- ?x107 (* ?x45 ?x45 ?x45 r00 r00 ?x42)) (* ?x45 ?x45 ?x45 ?x45 r00 ?x42))))
 (let ((?x115 (+ (- ?x112 (* 2 ?x45 ?x45 ?x45 ?x42 x00)) (* 2 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42))))
 (let ((?x119 (+ (- ?x115 (* 2 ?x45 ?x45 ?x42 ?x42 ?x42 x00)) (* ?x45 ?x45 ?x45 r00 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x119 0))))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x244 (lambda ((r Int) (x Int) )(let ((?x129 (* (- 1) r)))
 (let ((?x2195 (+ x ?x129)))
 (let ((?x221 (+ 1 r)))
 (let ((?x1692 (+ (* (- 2) (* x00 ?x2195 ?x2195 ?x2195)) (* 4 (* x00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* r00 ?x221 ?x2195) (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x221 ?x2195)) (* (- 1) (* r00 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195)) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x2195) (* 3 (* ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* x00 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x2195)) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* 2 (* ?x2195 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195) (* (- 1) (* r00 r00 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* r00 r00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x2195 ?x2195 ?x2195) (* r00 r00 ?x221 ?x2195 ?x2195 ?x2195) (* ?x221 ?x221 ?x221 ?x2195) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 2) (* r00 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 4) (* ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 2) (* ?x221 ?x2195 ?x2195 ?x2195 ?x2195)) (* (- 3) (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x2195 ?x2195)) (* 2 (* x00 ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* ?x221 ?x2195 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x2195)) (* 2 (* ?x221 ?x2195 ?x2195)) (* (- 1) (* r00 r00 ?x221 ?x221 ?x221 ?x2195)) (* (- 1) (* r00 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x221 ?x221 ?x2195)) (* 2 (* ?x221 ?x221 ?x221 ?x221 ?x221 ?x2195)) (* (- 2) (* x00 ?x221 ?x221 ?x2195 ?x2195 ?x2195)) (* r00 ?x221 ?x221 ?x221 ?x2195))))
 (let ((?x36 (* r00 r00)))
 (let ((?x4604 (* (- 1) ?x36)))
 (let ((?x652 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x332 (and (= (+ ?x129 r00 ?x30 ?x32 ?x652 ?x4604) 0) (not (= ?x1692 0)))))
 (let ((?x42 (- x r)))
 (let ((?x45 (+ r 1)))
 (let ((?x49 (+ (* (- 2) ?x42 ?x42 ?x42 x00) (* 4 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 x00) (* ?x45 ?x45 r00 ?x42 ?x42 ?x42) (* ?x45 r00 ?x42))))
 (let ((?x53 (+ (- ?x49 (* ?x45 ?x45 ?x45 ?x45 ?x42)) (* 2 ?x45 ?x45 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (- ?x53 (* ?x45 ?x45 r00 r00 ?x42 ?x42 ?x42)) (* ?x45 ?x45 ?x42))))
 (let ((?x62 (+ (- ?x58 (* ?x45 r00 ?x42 ?x42 ?x42)) (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 ?x42) (* 2 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let ((?x69 (+ (- ?x62 (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42)) (* ?x45 ?x45 ?x45 ?x45 r00 r00 ?x42) (* 3 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42) (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 x00))))
 (let ((?x75 (+ (- ?x69 (* 2 ?x45 ?x42 x00)) (* ?x45 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42) (* 2 ?x42 ?x42 ?x42 ?x42) (* ?x45 ?x45 ?x45 ?x45 r00 ?x42 ?x42 ?x42))))
 (let ((?x80 (- (- ?x75 (* r00 r00 ?x42 ?x42 ?x42)) (* ?x45 ?x45 ?x45 ?x45 r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x86 (+ (- ?x80 (* ?x45 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42)) (* 2 ?x45 ?x45 ?x45 r00 r00 ?x42 ?x42 ?x42) (* r00 ?x42 ?x42 ?x42) (* ?x45 r00 r00 ?x42 ?x42 ?x42) (* ?x45 ?x45 ?x45 ?x42))))
 (let ((?x94 (- (- ?x86 (* 2 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 x00)) (* 2 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let ((?x96 (- (- ?x94 (* 2 ?x45 ?x45 ?x45 r00 ?x42 ?x42 ?x42)) (* 4 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x98 (- (- ?x96 (* 2 ?x45 ?x42 ?x42 ?x42 ?x42)) (* 3 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let ((?x101 (+ ?x98 (* 2 ?x45 ?x45 ?x45 ?x42 ?x42) (* 2 ?x45 ?x42 ?x42 ?x42 x00))))
 (let ((?x107 (+ (- (- ?x101 (* ?x45 ?x42 ?x42 ?x42)) (* ?x45 r00 r00 ?x42)) (* 2 ?x45 ?x42 ?x42))))
 (let ((?x112 (- (- ?x107 (* ?x45 ?x45 ?x45 r00 r00 ?x42)) (* ?x45 ?x45 ?x45 ?x45 r00 ?x42))))
 (let ((?x115 (+ (- ?x112 (* 2 ?x45 ?x45 ?x45 ?x42 x00)) (* 2 ?x45 ?x45 ?x45 ?x45 ?x45 ?x42))))
 (let ((?x119 (+ (- ?x115 (* 2 ?x45 ?x45 ?x42 ?x42 ?x42 x00)) (* ?x45 ?x45 ?x45 r00 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x123 (and (= ?x38 0) (or (not (= ?x119 0))))))
 (rewrite (= $x123 $x332)))))))))))))))))))))))))))))))))
 ))
 (let ((@x125 (asserted $x124)))
 (let ((@x2259 (mp (mp @x125 (quant-intro (proof-bind ?x244) (= $x124 $x259)) $x259) (rewrite (= $x259 $x259)) $x259)))
 (let ((@x3609 (mp~ (mp @x2259 (quant-intro (proof-bind ?x1669) (= $x259 $x4596)) $x4596) (sk (~ $x4596 $x3167)) $x3167)))
 (let ((@x4130 (mp @x3609 (rewrite (= $x3167 $x4719)) $x4719)))
 (let ((@x4616 (and-elim @x4130 $x3614)))
 (let ((@x3695 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x3614) $x3612)) @x4616 $x3612)))
 (let (($x3170 (>= ?x3292 0)))
 (let ((@x3658 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x3614) $x3170)) @x4616 $x3170)))
 (let (($x2057 (not (>= ?x2533 0))))
 (let (($x3502 (<= ?x2533 0)))
 (let ((@x3661 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4137 (not $x3502) $x2057)) (and-elim @x4130 $x4136) (or (not $x3502) $x2057))))
 (let ((@x3299 (unit-resolution @x3661 (lemma ((_ th-lemma arith) (hypothesis (not $x3502)) @x3658 @x3695 false) $x3502) $x2057)))
 ((_ th-lemma arith) @x3299 @x3658 @x3695 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        27
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             696
 :arith-nonlinear-bounds    24
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 124
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                20.18
 :memory                    19.60
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                834900
 :num-checks                1
 :propagations              4
 :rlimit-count              15849
 :time                      0.02
 :total-time                0.04)
