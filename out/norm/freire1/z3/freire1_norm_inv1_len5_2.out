unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x338 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x223 (* (- 2) x00)))
 (let ((?x251 (+ r00 ?x223 ?x179 (* 2 x!0) (* (- 1) r!1) ?x338)))
 (let (($x436 (<= ?x251 0)))
 (let (($x426 (= ?x251 0)))
 (let ((?x205 (* 2 (* x!0 x!0))))
 (let ((?x198 (* (- 1) (* r!1 r!1 r!1))))
 (let ((?x438 (+ (* r00 x!0) ?x198 ?x205 (* 2 (* x00 r!1)) (* x!0 r!1 r!1) (* (- 3) (* x!0 r!1)) (* (- 1) (* r00 r00 x!0)) (* r00 r00 r!1) ?x338 (* (- 2) (* x00 x!0)) (* (- 1) (* r00 r!1)))))
 (let (($x443 (= ?x438 0)))
 (let (($x266 (not $x443)))
 (let (($x456 (and $x426 $x266)))
 (let ((?x199 (+ ?x338 (* 2 (* r!1 x00)) (* (- 3) (* r!1 x!0)) (* r!1 r!1 x!0) ?x198 ?x205 (* (- 1) (* r!1 r00)) (* x!0 r00) (* r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* (- 2) (* x!0 x00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x190 (and (= (+ r!1 (* (- 2) x!0) ?x125 (* (- 1) ?x338) ?x35 ?x36) 0) (not (= ?x199 0)))))
 (let (($x359 (exists ((r Int) (x Int) )(! (let ((?x502 (* (- 2) (* x x00))))
 (let ((?x501 (* (- 1) (* x r00 r00))))
 (let ((?x460 (* r r00 r00)))
 (let ((?x414 (* x r00)))
 (let ((?x412 (* (- 1) (* r r00))))
 (let ((?x306 (* 2 (* x x))))
 (let ((?x222 (* (- 1) (* r r r))))
 (let ((?x213 (* r r x)))
 (let ((?x499 (* (- 3) (* r x))))
 (let ((?x30 (* r r)))
 (let ((?x274 (+ ?x30 (* 2 (* r x00)) ?x499 ?x213 ?x222 ?x306 ?x412 ?x414 ?x460 ?x501 ?x502)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (and $x128 (not (= ?x274 0)))))))))))))))))))) :qid k!26))
 ))
 (let (($x349 (exists ((r Int) (x Int) )(! (let ((?x263 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x77 (+ (* (+ 1 r) (+ x (* (- 1) r))) ?x263 (* (- 2) (* (+ x (* (- 1) r)) (+ x (* (- 1) r)))) (* (- 1) (* r00 (+ x (* (- 1) r)))) (* r00 r00 (+ x (* (- 1) r))) (* 2 (* x00 (+ x (* (- 1) r)))))))
 (let (($x219 (not (= ?x77 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) $x219)))))))))) :qid k!26))
 ))
 (let ((?x224 (lambda ((r Int) (x Int) )(let ((?x502 (* (- 2) (* x x00))))
 (let ((?x501 (* (- 1) (* x r00 r00))))
 (let ((?x460 (* r r00 r00)))
 (let ((?x414 (* x r00)))
 (let ((?x412 (* (- 1) (* r r00))))
 (let ((?x306 (* 2 (* x x))))
 (let ((?x222 (* (- 1) (* r r r))))
 (let ((?x213 (* r r x)))
 (let ((?x499 (* (- 3) (* r x))))
 (let ((?x30 (* r r)))
 (let ((?x274 (+ ?x30 (* 2 (* r x00)) ?x499 ?x213 ?x222 ?x306 ?x412 ?x414 ?x460 ?x501 ?x502)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (let (($x212 (and $x128 (not (= ?x274 0)))))
 (let ((?x263 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x77 (+ (* (+ 1 r) (+ x (* (- 1) r))) ?x263 (* (- 2) (* (+ x (* (- 1) r)) (+ x (* (- 1) r)))) (* (- 1) (* r00 (+ x (* (- 1) r)))) (* r00 r00 (+ x (* (- 1) r))) (* 2 (* x00 (+ x (* (- 1) r)))))))
 (let (($x219 (not (= ?x77 0))))
 (let (($x264 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) $x219)))
 (rewrite (= $x264 $x212)))))))))))))))))))))))))
 ))
 (let (($x220 (exists ((r Int) (x Int) )(! (let ((?x263 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x77 (+ (* (+ 1 r) (+ x (* (- 1) r))) ?x263 (* (- 2) (* (+ x (* (- 1) r)) (+ x (* (- 1) r)))) (* (- 1) (* r00 (+ x (* (- 1) r)))) (* r00 r00 (+ x (* (- 1) r))) (* 2 (* x00 (+ x (* (- 1) r)))))))
 (let (($x219 (not (= ?x77 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x223 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let ((?x75 (* (- 1) r)))
 (and (= (+ ?x75 r00 ?x30 ?x32 ?x223 ?x179) 0) $x219)))))))))) :qid k!26))
 ))
 (let ((?x418 (lambda ((r Int) (x Int) )(let ((?x263 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x77 (+ (* (+ 1 r) (+ x (* (- 1) r))) ?x263 (* (- 2) (* (+ x (* (- 1) r)) (+ x (* (- 1) r)))) (* (- 1) (* r00 (+ x (* (- 1) r)))) (* r00 r00 (+ x (* (- 1) r))) (* 2 (* x00 (+ x (* (- 1) r)))))))
 (let (($x219 (not (= ?x77 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x264 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) $x219)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x223 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x75 (* (- 1) r)))
 (let (($x191 (and (= (+ ?x75 r00 ?x30 ?x32 ?x223 ?x179) 0) $x219)))
 (rewrite (= $x191 $x264))))))))))))))))))
 ))
 (let (($x70 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x48 (+ (* 0 ?x41 ?x41 ?x42 x00) (* 0 ?x41 r00 ?x42) (* 0 ?x41 ?x41 ?x41 ?x42) (* 0 ?x41 ?x41 ?x41 ?x41 ?x42) (* ?x41 ?x42))))
 (let ((?x53 (+ (- ?x48 (* ?x41 ?x41 ?x42)) (* 0 ?x41 ?x41 ?x42 ?x42) (* 0 ?x41 ?x42 x00))))
 (let ((?x59 (+ (- ?x53 (* 2 ?x42 ?x42)) (* 0 ?x41 r00 r00 ?x42) (* 0 ?x41 ?x41 r00 ?x42) (* 0 ?x41 ?x42 ?x42))))
 (let ((?x65 (+ (- ?x59 (* r00 ?x42)) (* r00 r00 ?x42) (* 2 ?x42 x00) (* 0 ?x41 ?x41 r00 r00 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x65 0))))))))))))) :qid k!26))
 ))
 (let ((?x232 (lambda ((r Int) (x Int) )(let ((?x263 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x (* (- 1) r))))))
 (let ((?x77 (+ (* (+ 1 r) (+ x (* (- 1) r))) ?x263 (* (- 2) (* (+ x (* (- 1) r)) (+ x (* (- 1) r)))) (* (- 1) (* r00 (+ x (* (- 1) r)))) (* r00 r00 (+ x (* (- 1) r))) (* 2 (* x00 (+ x (* (- 1) r)))))))
 (let (($x219 (not (= ?x77 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x179 (* (- 1) ?x36)))
 (let ((?x223 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let ((?x75 (* (- 1) r)))
 (let (($x191 (and (= (+ ?x75 r00 ?x30 ?x32 ?x223 ?x179) 0) $x219)))
 (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x48 (+ (* 0 ?x41 ?x41 ?x42 x00) (* 0 ?x41 r00 ?x42) (* 0 ?x41 ?x41 ?x41 ?x42) (* 0 ?x41 ?x41 ?x41 ?x41 ?x42) (* ?x41 ?x42))))
 (let ((?x53 (+ (- ?x48 (* ?x41 ?x41 ?x42)) (* 0 ?x41 ?x41 ?x42 ?x42) (* 0 ?x41 ?x42 x00))))
 (let ((?x59 (+ (- ?x53 (* 2 ?x42 ?x42)) (* 0 ?x41 r00 r00 ?x42) (* 0 ?x41 ?x41 r00 ?x42) (* 0 ?x41 ?x42 ?x42))))
 (let ((?x65 (+ (- ?x59 (* r00 ?x42)) (* r00 r00 ?x42) (* 2 ?x42 x00) (* 0 ?x41 ?x41 r00 r00 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x69 (and (= ?x38 0) (or (not (= ?x65 0))))))
 (rewrite (= $x69 $x191)))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x348 (mp (mp @x71 (quant-intro (proof-bind ?x232) (= $x70 $x220)) $x220) (rewrite (= $x220 $x220)) $x220)))
 (let ((@x226 (mp (mp @x348 (quant-intro (proof-bind ?x418) (= $x220 $x349)) $x349) (quant-intro (proof-bind ?x224) (= $x349 $x359)) $x359)))
 (let ((@x197 (mp (mp~ @x226 (sk (~ $x359 $x190)) $x190) (rewrite (= $x190 $x456)) $x456)))
 (let ((@x236 (and-elim @x197 $x426)))
 (let ((@x259 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x426) $x436)) @x236 $x436)))
 (let (($x242 (>= ?x251 0)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x426) $x242)) @x236 $x242)))
 (let (($x466 (not (>= ?x438 0))))
 (let (($x117 (<= ?x438 0)))
 (let ((@x133 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x443 (not $x117) $x466)) (and-elim @x197 $x266) (or (not $x117) $x466))))
 (let ((@x78 (unit-resolution @x133 (lemma ((_ th-lemma arith) (hypothesis (not $x117)) @x331 @x259 false) $x117) $x466)))
 ((_ th-lemma arith) @x78 @x331 @x259 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             122
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.47
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1056025
 :num-checks                1
 :propagations              4
 :rlimit-count              1887
 :time                      0.01
 :total-time                0.01)
