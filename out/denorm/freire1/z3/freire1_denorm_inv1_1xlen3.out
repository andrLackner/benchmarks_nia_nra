unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x342 (* r!1 r!1)))
 (let ((?x353 (* (- 1) r!1)))
 (let ((?x321 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x172 (+ r00 ?x84 ?x100 ?x321 ?x353 ?x342)))
 (let (($x152 (<= ?x172 0)))
 (let (($x69 (= ?x172 0)))
 (let ((?x358 (* 4 (* r!1 r!1 r!1))))
 (let ((?x395 (* 4 ?x342)))
 (let ((?x345 (* 3 r!1)))
 (let ((?x339 (* x!0 x!0)))
 (let ((?x191 (+ x!0 ?x353)))
 (let ((?x396 (+ 1 r!1)))
 (let ((?x89 (* 3 (* r!1 r!1 r!1 r!1))))
 (let ((?x110 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x228 (+ 1 ?x110 (* (- 2) (* x!0 r!1 r!1 r!1 r!1)) ?x89 (* (- 6) (* x!0 r!1 r!1 r!1)) (* 3 (* x!0 x!0 r!1)) (* 3 (* x!0 x!0 r!1 r!1)) (* ?x396 ?x396 ?x396 ?x191 ?x191 ?x191) (* x!0 x!0 r!1 r!1 r!1) ?x339 ?x345 ?x395 ?x358 (* (- 2) (* x!0 r!1)) (* (- 6) (* x!0 r!1 r!1)))))
 (let ((?x225 (* ?x228 ?x172)))
 (let (($x374 (= ?x225 0)))
 (let (($x226 (not $x374)))
 (let (($x145 (and $x69 $x226)))
 (let ((?x323 (+ 1 ?x345 ?x395 ?x358 (* ?x396 ?x396 ?x396 (+ ?x353 x!0) (+ ?x353 x!0) (+ ?x353 x!0)) ?x110 ?x89 (* r!1 r!1 r!1 x!0 x!0) (* 3 (* r!1 r!1 x!0 x!0)) (* 3 (* r!1 x!0 x!0)) ?x339 (* (- 2) (* r!1 x!0)) (* (- 6) (* r!1 r!1 x!0)) (* (- 6) (* r!1 r!1 r!1 x!0)) (* (- 2) (* r!1 r!1 r!1 r!1 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x317 (and (= (+ r!1 (* (- 2) x!0) ?x115 (* (- 1) ?x342) ?x35 ?x36) 0) (not (= (* ?x323 (+ ?x353 ?x321 r00 ?x342 ?x84 ?x100)) 0)))))
 (let (($x297 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x171 (+ ?x63 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x407 (+ 1 (* 3 r) (* 4 ?x30) (* 4 (* r r r)) (* ?x123 ?x123 ?x123 ?x171 ?x171 ?x171) (* r r r r r) (* 3 (* r r r r)) (* r r r x x) (* 3 (* r r x x)) (* 3 (* r x x)) (* x x) (* (- 2) (* r x)) (* (- 6) (* r r x)) (* (- 6) (* r r r x)) (* (- 2) (* r r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (and $x118 (not (= (* ?x407 ?x106) 0)))))))))))))))))) :qid k!26))
 ))
 (let (($x291 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x305 (+ x ?x63)))
 (let ((?x123 (+ 1 r)))
 (let ((?x371 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 ?x305 ?x305 ?x305) (* ?x123 ?x123 ?x123 ?x305 ?x305))))
 (let (($x138 (not (= (* ?x371 ?x362) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x138)))))))))))))))) :qid k!26))
 ))
 (let ((?x324 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x171 (+ ?x63 x)))
 (let ((?x123 (+ 1 r)))
 (let ((?x407 (+ 1 (* 3 r) (* 4 ?x30) (* 4 (* r r r)) (* ?x123 ?x123 ?x123 ?x171 ?x171 ?x171) (* r r r r r) (* 3 (* r r r r)) (* r r r x x) (* 3 (* r r x x)) (* 3 (* r x x)) (* x x) (* (- 2) (* r x)) (* (- 6) (* r r x)) (* (- 6) (* r r r x)) (* (- 2) (* r r r r x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (let (($x81 (and $x118 (not (= (* ?x407 ?x106) 0)))))
 (let ((?x371 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 (+ x ?x63) (+ x ?x63) (+ x ?x63)) (* ?x123 ?x123 ?x123 (+ x ?x63) (+ x ?x63)))))
 (let ((?x279 (* ?x371 (+ (- 1) (* (- 3) r) r00 (* ?x123 ?x123) ?x32 ?x84 ?x100))))
 (let (($x138 (not (= ?x279 0))))
 (let (($x247 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x138)))
 (rewrite (= $x247 $x81)))))))))))))))))))))))
 ))
 (let (($x326 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x305 (+ x ?x63)))
 (let ((?x123 (+ 1 r)))
 (let ((?x371 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 ?x305 ?x305 ?x305) (* ?x123 ?x123 ?x123 ?x305 ?x305))))
 (let (($x138 (not (= (* ?x371 ?x362) 0))))
 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) $x138))))))))))) :qid k!26))
 ))
 (let ((?x325 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x305 (+ x ?x63)))
 (let ((?x123 (+ 1 r)))
 (let ((?x371 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 ?x305 ?x305 ?x305) (* ?x123 ?x123 ?x123 ?x305 ?x305))))
 (let (($x138 (not (= (* ?x371 ?x362) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x247 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x138)))
 (let (($x295 (and (= (+ ?x63 r00 ?x30 ?x32 ?x84 ?x100) 0) $x138)))
 (rewrite (= $x295 $x247))))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x41 ?x41 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* ?x48 ?x52) 0))))))))))) :qid k!26))
 ))
 (let ((?x300 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x362 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x305 (+ x ?x63)))
 (let ((?x123 (+ 1 r)))
 (let ((?x371 (+ (* ?x123 ?x123 ?x123) (* ?x123 ?x123 ?x123 ?x305 ?x305 ?x305) (* ?x123 ?x123 ?x123 ?x305 ?x305))))
 (let (($x138 (not (= (* ?x371 ?x362) 0))))
 (let (($x295 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) $x138)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x52 (+ (* ?x41 ?x41 ?x41) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44) (* ?x41 ?x41 ?x41 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 (or (not (= (* ?x48 ?x52) 0))))))
 (rewrite (= $x57 $x295)))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x263 (mp (mp @x59 (quant-intro (proof-bind ?x300) (= $x58 $x326)) $x326) (rewrite (= $x326 $x326)) $x326)))
 (let ((@x170 (mp (mp @x263 (quant-intro (proof-bind ?x325) (= $x326 $x291)) $x291) (quant-intro (proof-bind ?x324) (= $x291 $x297)) $x297)))
 (let ((@x381 (mp (mp~ @x170 (sk (~ $x297 $x317)) $x317) (rewrite (= $x317 $x145)) $x145)))
 (let ((@x164 (and-elim @x381 $x69)))
 (let ((@x214 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x69) $x152)) @x164 $x152)))
 (let (($x274 (>= ?x172 0)))
 (let ((@x361 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x69) $x274)) @x164 $x274)))
 (let (($x239 (not (>= ?x225 0))))
 (let (($x213 (<= ?x225 0)))
 (let ((@x151 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x374 (not $x213) $x239)) (and-elim @x381 $x226) (or (not $x213) $x239))))
 (let ((@x143 (unit-resolution @x151 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x213)) @x361 @x214 false) $x213) $x239)))
 ((_ th-lemma arith farkas 1 1 1) @x143 @x361 @x214 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            4
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.57
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1098885
 :num-checks                1
 :propagations              4
 :rlimit-count              1675
 :time                      0.01
 :total-time                0.01)
