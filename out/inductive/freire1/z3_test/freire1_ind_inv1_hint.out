unsat
((set-logic NIA)
(declare-fun i!1 () Int)
(declare-fun i!0 () Int)
(proof
(let (($x695 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let (($x126 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (or $x101 $x126))))) :pattern ( (inv i) ) :qid k!58))
 ))
 (let ((?x224 (inv i!1)))
 (let (($x225 (= ?x224 0)))
 (let (($x226 (not $x225)))
 (let ((?x221 (+ 1 i!1)))
 (let ((?x222 (inv ?x221)))
 (let (($x223 (= ?x222 0)))
 (let (($x219 (>= i!1 0)))
 (let (($x220 (not $x219)))
 (let (($x227 (or $x220 $x223 $x226)))
 (let ((?x2375 (* (- 1) (* (r ?x221) (r ?x221)))))
 (let ((?x2360 (r ?x221)))
 (let ((?x2359 (x ?x221)))
 (let ((?x2373 (* (- 2) ?x2359)))
 (let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x2410 (+ ?x54 ?x150 ?x55 ?x222 ?x2373 ?x2360 ?x2375)))
 (let (($x2434 (<= ?x2410 0)))
 (let (($x2416 (= ?x2410 0)))
 (let (($x2414 (not $x2416)))
 (let (($x2398 (not (= (+ ?x2359 (* (- 1) ?x2360) (* (- 1) (x (+ 2 i!1)))) 0))))
 (let (($x2418 (or $x2398 (not (= (+ ?x2360 (* (- 1) (r (+ 2 i!1)))) (- 1))) $x2414)))
 (let (($x2426 (not $x2418)))
 (let (($x2382 (>= i!1 (- 1))))
 (let (($x228 (not $x227)))
 (let ((@x3560 (hypothesis $x228)))
 (let ((@x3849 (unit-resolution (def-axiom (or $x227 $x219)) @x3560 $x219)))
 (let (($x687 (forall ((i Int) )(! (let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x47 (inv i)))
 (let ((?x41 (r i)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x153 (+ ?x54 ?x150 (* (- 2) (x i)) ?x41 ?x47 (* (- 1) (* ?x41 ?x41)) ?x55)))
 (let (($x154 (= ?x153 0)))
 (let (($x77 (= (+ (x i) (* (- 1) ?x41) (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x259 (or (not $x77) (not (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))) (not $x154))))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (or $x101 (not $x259))))))))))))))) :pattern ( (x i) ) :pattern ( (r i) ) :pattern ( (inv i) ) :qid k!46))
 ))
 (let (($x265 (forall ((i Int) )(! (let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x47 (inv i)))
 (let ((?x41 (r i)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x153 (+ ?x54 ?x150 (* (- 2) (x i)) ?x41 ?x47 (* (- 1) (* ?x41 ?x41)) ?x55)))
 (let (($x154 (= ?x153 0)))
 (let (($x77 (= (+ (x i) (* (- 1) ?x41) (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x259 (or (not $x77) (not (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))) (not $x154))))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (or $x101 (not $x259))))))))))))))) :qid k!46))
 ))
 (let ((?x690 (lambda ((i Int) )(let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x47 (inv i)))
 (let ((?x41 (r i)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x153 (+ ?x54 ?x150 (* (- 2) (x i)) ?x41 ?x47 (* (- 1) (* ?x41 ?x41)) ?x55)))
 (let (($x154 (= ?x153 0)))
 (let (($x77 (= (+ (x i) (* (- 1) ?x41) (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x259 (or (not $x77) (not (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))) (not $x154))))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (let (($x263 (or $x101 (not $x259))))
 (refl (= $x263 $x263)))))))))))))))))
 ))
 (let (($x110 (forall ((i Int) )(! (let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x47 (inv i)))
 (let ((?x41 (r i)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x153 (+ ?x54 ?x150 (* (- 2) (x i)) ?x41 ?x47 (* (- 1) (* ?x41 ?x41)) ?x55)))
 (let (($x154 (= ?x153 0)))
 (let (($x93 (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x77 (= (+ (x i) (* (- 1) ?x41) (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x159 (and $x77 $x93 $x154)))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (or $x101 $x159))))))))))))))) :qid k!46))
 ))
 (let ((?x267 (lambda ((i Int) )(let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x47 (inv i)))
 (let ((?x41 (r i)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x153 (+ ?x54 ?x150 (* (- 2) (x i)) ?x41 ?x47 (* (- 1) (* ?x41 ?x41)) ?x55)))
 (let (($x154 (= ?x153 0)))
 (let (($x77 (= (+ (x i) (* (- 1) ?x41) (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x259 (or (not $x77) (not (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))) (not $x154))))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (let (($x263 (or $x101 (not $x259))))
 (let (($x93 (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x159 (and $x77 $x93 $x154)))
 (let (($x103 (or $x101 $x159)))
 (rewrite (= $x103 $x263))))))))))))))))))))
 ))
 (let ((?x202 (lambda ((i Int) )(let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x47 (inv i)))
 (let ((?x41 (r i)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x153 (+ ?x54 ?x150 (* (- 2) (x i)) ?x41 ?x47 (* (- 1) (* ?x41 ?x41)) ?x55)))
 (let (($x154 (= ?x153 0)))
 (let (($x93 (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x77 (= (+ (x i) (* (- 1) ?x41) (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x159 (and $x77 $x93 $x154)))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (let (($x103 (or $x101 $x159)))
 (refl (~ $x103 $x103))))))))))))))))))
 ))
 (let (($x83 (forall ((i Int) )(! (let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x181 (* (- 1) ?x55)))
 (let ((?x25 (x 0)))
 (let ((?x165 (* (- 2) ?x25)))
 (let ((?x40 (x i)))
 (let ((?x52 (* 2 ?x40)))
 (let ((?x41 (r i)))
 (let ((?x50 (* ?x41 ?x41)))
 (let ((?x70 (* (- 1) ?x41)))
 (let ((?x47 (inv i)))
 (let (($x69 (and (= (x (+ 1 i)) (+ ?x40 ?x70)) (= (r (+ 1 i)) (+ 1 ?x41)) (= ?x47 (+ ?x70 ?x28 ?x50 ?x52 ?x165 ?x181)))))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (or $x101 $x69))))))))))))))) :qid k!46))
 ))
 (let ((?x188 (lambda ((i Int) )(let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x47 (inv i)))
 (let ((?x41 (r i)))
 (let ((?x150 (* (- 1) ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x153 (+ ?x54 ?x150 (* (- 2) (x i)) ?x41 ?x47 (* (- 1) (* ?x41 ?x41)) ?x55)))
 (let (($x154 (= ?x153 0)))
 (let (($x93 (= (+ ?x41 (* (- 1) (r (+ 1 i)))) (- 1))))
 (let (($x77 (= (+ (x i) (* (- 1) ?x41) (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x159 (and $x77 $x93 $x154)))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (let (($x103 (or $x101 $x159)))
 (let ((?x181 (* (- 1) ?x55)))
 (let ((?x165 (* (- 2) ?x25)))
 (let ((?x40 (x i)))
 (let ((?x52 (* 2 ?x40)))
 (let ((?x50 (* ?x41 ?x41)))
 (let ((?x70 (* (- 1) ?x41)))
 (let (($x69 (and (= (x (+ 1 i)) (+ ?x40 ?x70)) (= (r (+ 1 i)) (+ 1 ?x41)) (= ?x47 (+ ?x70 ?x28 ?x50 ?x52 ?x165 ?x181)))))
 (let (($x76 (or $x101 $x69)))
 (rewrite (= $x76 $x103))))))))))))))))))))))))))
 ))
 (let (($x61 (forall ((i Int) )(! (let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x25 (x 0)))
 (let ((?x54 (* 2 ?x25)))
 (let ((?x40 (x i)))
 (let ((?x52 (* 2 ?x40)))
 (let ((?x41 (r i)))
 (let ((?x50 (* ?x41 ?x41)))
 (let ((?x47 (inv i)))
 (let (($x59 (and (= (x (+ i 1)) (- ?x40 ?x41)) (= (r (+ i 1)) (+ ?x41 1)) (= ?x47 (- (- (+ (* (- 1) ?x41) ?x28 ?x50 ?x52) ?x54) ?x55)))))
 (let (($x36 (>= i 0)))
 (=> $x36 $x59)))))))))))) :qid k!46))
 ))
 (let ((?x161 (lambda ((i Int) )(let ((?x28 (r 0)))
 (let ((?x55 (* ?x28 ?x28)))
 (let ((?x181 (* (- 1) ?x55)))
 (let ((?x25 (x 0)))
 (let ((?x165 (* (- 2) ?x25)))
 (let ((?x40 (x i)))
 (let ((?x52 (* 2 ?x40)))
 (let ((?x41 (r i)))
 (let ((?x50 (* ?x41 ?x41)))
 (let ((?x70 (* (- 1) ?x41)))
 (let ((?x47 (inv i)))
 (let (($x69 (and (= (x (+ 1 i)) (+ ?x40 ?x70)) (= (r (+ 1 i)) (+ 1 ?x41)) (= ?x47 (+ ?x70 ?x28 ?x50 ?x52 ?x165 ?x181)))))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (let (($x76 (or $x101 $x69)))
 (let (($x58 (= ?x47 (- (- (+ (* (- 1) ?x41) ?x28 ?x50 ?x52) (* 2 ?x25)) ?x55))))
 (let (($x59 (and (= (x (+ i 1)) (- ?x40 ?x41)) (= (r (+ i 1)) (+ ?x41 1)) $x58)))
 (let (($x60 (=> $x36 $x59)))
 (trans (monotonicity (rewrite (= $x59 $x69)) (= $x60 (=> $x36 $x69))) (rewrite (= (=> $x36 $x69) $x76)) (= $x60 $x76)))))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x180 (mp (mp @x62 (quant-intro (proof-bind ?x161) (= $x61 $x83)) $x83) (rewrite (= $x83 $x83)) $x83)))
 (let ((@x197 (mp~ (mp @x180 (quant-intro (proof-bind ?x188) (= $x83 $x110)) $x110) (nnf-pos (proof-bind ?x202) (~ $x110 $x110)) $x110)))
 (let ((@x694 (mp (mp @x197 (quant-intro (proof-bind ?x267) (= $x110 $x265)) $x265) (quant-intro (proof-bind ?x690) (= $x265 $x687)) $x687)))
 (let (($x2385 (not $x2382)))
 (let (($x767 (not $x687)))
 (let (($x2427 (or $x767 $x2385 $x2426)))
 (let (($x2367 (not (= (+ ?x2359 (* (- 1) ?x2360) (* (- 1) (x (+ 1 ?x221)))) 0))))
 (let (($x2379 (or $x2367 (not (= (+ ?x2360 (* (- 1) (r (+ 1 ?x221)))) (- 1))) (not (= (+ ?x54 ?x150 ?x2373 ?x2360 ?x222 ?x2375 ?x55) 0)))))
 (let (($x2381 (or (not (>= ?x221 0)) (not $x2379))))
 (let (($x2429 (or $x767 $x2381)))
 (let ((@x2421 (monotonicity (rewrite (= $x2381 (or $x2385 $x2426))) (= $x2429 (or $x767 (or $x2385 $x2426))))))
 (let ((@x2425 (trans @x2421 (rewrite (= (or $x767 (or $x2385 $x2426)) $x2427)) (= $x2429 $x2427))))
 (let ((@x3851 (unit-resolution (mp ((_ quant-inst (+ 1 i!1)) $x2429) @x2425 $x2427) @x694 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x2382 $x220)) @x3849 $x2382) $x2426)))
 (let ((@x3855 (unit-resolution (def-axiom (or $x2418 $x2416)) @x3851 $x2416)))
 (let ((@x3858 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2414 $x2434)) @x3855 $x2434)))
 (let (($x2435 (>= ?x2410 0)))
 (let ((@x3861 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2414 $x2435)) @x3855 $x2435)))
 (let ((?x2445 (r i!1)))
 (let ((?x2446 (* (- 1) ?x2445)))
 (let ((?x2485 (+ ?x2360 ?x2446)))
 (let (($x2513 (<= ?x2485 1)))
 (let (($x2486 (= ?x2485 1)))
 (let ((?x2456 (* (- 1) (* ?x2445 ?x2445))))
 (let ((?x2444 (x i!1)))
 (let ((?x2454 (* (- 2) ?x2444)))
 (let ((?x2493 (+ ?x54 ?x150 ?x55 ?x224 ?x2454 ?x2445 ?x2456)))
 (let (($x2497 (= ?x2493 0)))
 (let (($x2495 (not $x2497)))
 (let (($x2491 (not $x2486)))
 (let ((?x2470 (+ ?x2359 (* (- 1) ?x2444) ?x2445)))
 (let (($x2471 (= ?x2470 0)))
 (let (($x2476 (not $x2471)))
 (let (($x2499 (or $x2476 $x2491 $x2495)))
 (let (($x2507 (not $x2499)))
 (let (($x2508 (or $x767 $x220 $x2507)))
 (let (($x2460 (or (not (= (+ ?x2444 ?x2446 (* (- 1) ?x2359)) 0)) (not (= (+ ?x2445 (* (- 1) ?x2360)) (- 1))) (not (= (+ ?x54 ?x150 ?x2454 ?x2445 ?x224 ?x2456 ?x55) 0)))))
 (let (($x2462 (or $x220 (not $x2460))))
 (let (($x2510 (or $x767 $x2462)))
 (let ((@x2502 (monotonicity (rewrite (= $x2462 (or $x220 $x2507))) (= $x2510 (or $x767 (or $x220 $x2507))))))
 (let ((@x2506 (trans @x2502 (rewrite (= (or $x767 (or $x220 $x2507)) $x2508)) (= $x2510 $x2508))))
 (let ((@x3862 (unit-resolution (mp ((_ quant-inst i!1) $x2510) @x2506 $x2508) @x694 @x3849 $x2507)))
 (let ((@x3863 (unit-resolution (def-axiom (or $x2499 $x2486)) @x3862 $x2486)))
 (let ((@x3866 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2491 $x2513)) @x3863 $x2513)))
 (let (($x2514 (>= ?x2485 1)))
 (let ((@x3869 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2491 $x2514)) @x3863 $x2514)))
 (let (($x2525 (<= ?x224 0)))
 (let ((@x3872 (unit-resolution (def-axiom (or $x227 $x225)) @x3560 $x225)))
 (let ((@x3873 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x226 $x2525)) @x3872 $x2525)))
 (let (($x2526 (>= ?x224 0)))
 (let ((@x3876 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x226 $x2526)) @x3872 $x2526)))
 (let (($x2515 (<= ?x2493 0)))
 (let ((@x3877 (unit-resolution (def-axiom (or $x2499 $x2497)) @x3862 $x2497)))
 (let ((@x3880 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2495 $x2515)) @x3877 $x2515)))
 (let (($x2516 (>= ?x2493 0)))
 (let ((@x3883 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2495 $x2516)) @x3877 $x2516)))
 (let (($x2511 (<= ?x2470 0)))
 (let ((@x3884 (unit-resolution (def-axiom (or $x2499 $x2471)) @x3862 $x2471)))
 (let ((@x3887 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2476 $x2511)) @x3884 $x2511)))
 (let (($x2512 (>= ?x2470 0)))
 (let ((@x3890 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2476 $x2512)) @x3884 $x2512)))
 (let (($x3892 (not (>= ?x222 0))))
 (let (($x2527 (<= ?x222 0)))
 (let (($x3587 (or $x2527 (not $x2512) (not $x2511) (not $x2514) (not $x2513) (not $x2516) (not $x2515) (not $x2435) (not $x2434) (not $x2526) (not $x2525))))
 (let ((@x3561 (hypothesis $x2434)))
 (let ((@x3562 (hypothesis $x2435)))
 (let ((@x3563 (hypothesis $x2513)))
 (let ((@x3564 (hypothesis $x2514)))
 (let ((@x3565 (hypothesis $x2525)))
 (let ((@x3566 (hypothesis $x2526)))
 (let ((@x3570 (hypothesis $x2515)))
 (let ((@x3571 (hypothesis $x2516)))
 (let ((@x3572 (hypothesis $x2511)))
 (let ((@x3573 (hypothesis $x2512)))
 (let ((@x3576 ((_ th-lemma arith) (hypothesis (not $x2527)) @x3573 @x3572 @x3564 @x3563 @x3573 @x3572 @x3571 @x3570 @x3571 @x3570 @x3562 @x3561 @x3566 @x3565 @x3566 @x3565 @x3564 @x3563 @x3562 @x3561 false)))
 (let ((@x3891 (unit-resolution (lemma @x3576 $x3587) @x3890 @x3887 @x3869 @x3866 @x3883 @x3880 @x3861 @x3858 @x3876 @x3873 $x2527)))
 (let ((@x3897 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x223 (not $x2527) $x3892)) (unit-resolution (def-axiom (or $x227 (not $x223))) @x3560 (not $x223)) (or (not $x2527) $x3892))))
 (let ((@x3899 ((_ th-lemma arith) (unit-resolution @x3897 @x3891 $x3892) @x3890 @x3887 @x3869 @x3866 @x3890 @x3887 @x3883 @x3880 @x3883 @x3880 @x3861 @x3858 @x3876 @x3873 @x3876 @x3873 @x3869 @x3866 @x3861 @x3858 false)))
 (let ((?x124 (inv 0)))
 (let (($x127 (= ?x124 0)))
 (let (($x212 (not $x127)))
 (let (($x850 (or $x212 (not (= (+ ?x25 ?x150 (* (- 1) (x 1))) 0)) (not (= (+ ?x28 (* (- 1) (r 1))) (- 1))))))
 (let (($x855 (not $x850)))
 (let (($x848 (or $x767 $x855)))
 (let (($x805 (= (+ ?x54 ?x150 (* (- 2) ?x25) ?x28 ?x124 (* (- 1) ?x55) ?x55) 0)))
 (let (($x807 (or (not (= (+ ?x25 ?x150 (* (- 1) (x (+ 1 0)))) 0)) (not (= (+ ?x28 (* (- 1) (r (+ 1 0)))) (- 1))) (not $x805))))
 (let (($x808 (not $x807)))
 (let (($x791 (>= 0 0)))
 (let (($x792 (not $x791)))
 (let (($x809 (or $x792 $x808)))
 (let (($x849 (or $x767 $x809)))
 (let (($x852 (= $x849 $x848)))
 (let ((@x818 (trans (monotonicity (rewrite (= $x791 true)) (= $x792 (not true))) (rewrite (= (not true) false)) (= $x792 false))))
 (let ((@x841 (monotonicity @x818 (rewrite (= $x808 $x855)) (= $x809 (or false $x855)))))
 (let ((@x853 (monotonicity (trans @x841 (rewrite (= (or false $x855) $x855)) (= $x809 $x855)) $x852)))
 (let ((@x3553 (unit-resolution (mp ((_ quant-inst 0) $x849) (trans @x853 (rewrite (= $x848 $x848)) $x852) $x848) @x694 $x855)))
 (let (($x706 (or $x212 $x228 $x695)))
 (let (($x702 (or $x695 $x212 $x228)))
 (let (($x707 (= $x702 $x706)))
 (let ((@x711 (trans (monotonicity (rewrite (= $x228 $x228)) (= $x702 $x702)) (rewrite $x707) $x707)))
 (let (($x125 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let (($x126 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (or $x101 $x126))))) :qid k!58))
 ))
 (let (($x253 (or $x125 $x212 $x228)))
 (let (($x232 (or $x212 $x228)))
 (let (($x241 (or $x232 $x125)))
 (let (($x254 (= $x241 $x253)))
 (let ((@x252 (monotonicity (monotonicity (rewrite (= $x228 $x228)) (= $x232 $x232)) (= $x241 $x241))))
 (let (($x88 (forall ((i Int) )(! (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (or $x101 (= (inv (+ 1 i)) 0) (not (= (inv i) 0))))) :qid k!76))
 ))
 (let (($x117 (and $x127 $x88)))
 (let (($x148 (not $x117)))
 (let (($x149 (or $x148 $x125)))
 (let ((?x237 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let (($x126 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (let (($x114 (or $x101 $x126)))
 (refl (~ $x114 $x114))))))))
 ))
 (let ((@x234 (nnf-neg (refl (~ $x212 $x212)) (sk (~ (not $x88) $x228)) (~ $x148 $x232))))
 (let ((@x243 (monotonicity @x234 (nnf-pos (proof-bind ?x237) (~ $x125 $x125)) (~ $x149 $x241))))
 (let (($x82 (= $x149 $x149)))
 (let ((@x168 (monotonicity (monotonicity (rewrite (= $x117 $x117)) (= $x148 $x148)) $x82)))
 (let (($x121 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let (($x126 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (=> $x36 $x126)))) :qid k!58))
 ))
 (let (($x143 (forall ((i Int) )(! (let (($x36 (>= i 0)))
 (=> (and $x36 (= (inv i) 0)) (= (inv (+ i 1)) 0))) :qid k!76))
 ))
 (let (($x144 (and $x127 $x143)))
 (let (($x64 (=> $x144 $x121)))
 (let ((?x132 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let (($x126 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x101 (not $x36)))
 (let (($x114 (or $x101 $x126)))
 (let (($x113 (=> $x36 $x126)))
 (rewrite (= $x113 $x114)))))))))
 ))
 (let ((@x141 (quant-intro (proof-bind ?x132) (= $x121 $x125))))
 (let ((@x85 (trans (monotonicity (rewrite (= $x144 $x117)) @x141 (= $x64 (=> $x117 $x125))) (rewrite (= (=> $x117 $x125) $x149)) (= $x64 $x149))))
 (let ((@x87 (mp (asserted $x64) @x85 $x149)))
 (let ((@x194 (mp (mp (mp (mp @x87 @x168 $x149) (rewrite $x82) $x149) @x168 $x149) @x168 $x149)))
 (let ((@x704 (mp (mp (mp~ @x194 @x243 $x241) (trans @x252 (rewrite $x254) $x254) $x253) (rewrite (= $x253 $x702)) $x702)))
 (let ((@x3554 (unit-resolution (mp @x704 @x711 $x706) (unit-resolution (def-axiom (or $x850 $x127)) @x3553 $x127) (or $x228 $x695))))
 (let (($x206 (= (inv i!0) 0)))
 (let (($x175 (>= i!0 0)))
 (let (($x191 (not $x175)))
 (let (($x207 (or $x191 $x206)))
 (let (($x208 (not $x207)))
 (let (($x71 (not $x125)))
 (let ((@x81 (rewrite (= $x71 $x71))))
 (let ((@x123 (mp (asserted (not $x121)) (rewrite (= (not $x121) $x71)) $x71)))
 (let ((@x211 (mp~ (mp (mp (mp (mp @x123 @x81 $x71) @x81 $x71) @x81 $x71) @x81 $x71) (sk (~ $x71 $x208)) $x208)))
 (let (($x2438 (not $x695)))
 (let (($x2439 (or $x2438 $x191 $x206)))
 (let ((@x2568 (mp ((_ quant-inst i!0) (or $x2438 $x207)) (rewrite (= (or $x2438 $x207) $x2439)) $x2439)))
 (unit-resolution @x2568 (not-or-elim @x211 $x175) (not-or-elim @x211 (not $x206)) (unit-resolution @x3554 (lemma @x3899 $x227) $x695) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                   118
 :arith-assert-diseq          2
 :arith-assert-lower          184
 :arith-assert-upper          123
 :arith-conflicts             2
 :arith-eq-adapter            134
 :arith-gcd-tests             12
 :arith-grobner               2
 :arith-max-min               483
 :arith-nonlinear-bounds      63
 :arith-nonlinear-horner      79
 :arith-num-rows              132
 :arith-patches               1
 :arith-patches_succ          1
 :arith-pivots                208
 :arith-row-summations        1299
 :arith-tableau-max-columns   299
 :arith-tableau-max-rows      132
 :conflicts                   3
 :decisions                   4
 :del-clause                  623
 :eliminated-vars             2
 :final-checks                7
 :lazy-quant-instantiations   9
 :max-generation              12
 :max-memory                  20.81
 :max-missed-qa-cost          11.00
 :memory                      19.39
 :min-missed-qa-cost          11.00
 :missed-quant-instantiations 4
 :mk-bool-var                 483
 :mk-clause                   696
 :num-allocs                  1406543
 :num-checks                  1
 :propagations                358
 :quant-instantiations        55
 :rlimit-count                121846
 :time                        0.02
 :total-time                  0.04)
