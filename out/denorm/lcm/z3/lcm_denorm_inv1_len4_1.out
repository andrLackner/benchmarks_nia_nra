unsat
((set-logic NIA)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(proof
(let ((?x906 (+ k!10 k!00 (* (- 1) (* y!2 v!4)) (* (- 1) (* u!5 x!3)))))
 (let (($x891 (>= ?x906 0)))
 (let (($x829 (= ?x906 0)))
 (let ((?x943 (* y!2 v!4 v!4 v!4 x!3 x!3)))
 (let ((?x919 (* u!5 u!5 u!5 y!2 y!2 x!3 x!3 x!3)))
 (let ((?x922 (* (- 1) (* y!2 y!2 v!4 v!4 v!4))))
 (let ((?x878 (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x866 (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3)))
 (let ((?x864 (* 3 (* u!5 u!5 v!4 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x860 (* u!5 u!5 u!5 x!3 x!3 x!3 x!3 x!3)))
 (let ((?x879 (* 2 (* u!5 v!4 v!4 x!3 x!3))))
 (let ((?x865 (* 3 (* u!5 v!4 v!4 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x556 (* u!5 u!5 v!4 x!3 x!3)))
 (let ((?x987 (+ ?x556 ?x865 ?x879 ?x860 ?x864 ?x866 ?x878 ?x922 ?x919 (* 2 (* y!2 v!4 v!4 v!4 x!3)) (* 3 (* u!5 u!5 y!2 y!2 v!4 x!3 x!3 x!3)) (* 3 (* u!5 y!2 y!2 v!4 v!4 x!3 x!3 x!3)) (* y!2 y!2 v!4 v!4 v!4 x!3 x!3 x!3) ?x943 (* (- 2) (* u!5 u!5 u!5 y!2 x!3 x!3 x!3 x!3)) (* (- 6) (* u!5 u!5 y!2 v!4 x!3 x!3 x!3 x!3)) (* (- 6) (* u!5 y!2 v!4 v!4 x!3 x!3 x!3 x!3)) (* (- 2) (* y!2 v!4 v!4 v!4 x!3 x!3 x!3 x!3)))))
 (let ((?x924 (* u!5 x!3)))
 (let ((?x826 (* y!2 v!4)))
 (let ((?x475 (* (- 1) k!00)))
 (let ((?x175 (* (- 1) k!10)))
 (let ((?x896 (+ ?x175 ?x475 ?x826 ?x924)))
 (let ((?x1019 (* ?x896 ?x987)))
 (let (($x931 (= ?x1019 0)))
 (let (($x1018 (not $x931)))
 (let ((?x998 (* (- 1) (* u!5 u!5 u!5 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x557 (* u!5 u!5 u!5 y!2 y!2 y!2)))
 (let ((?x238 (* u!5 u!5 u!5 x!3 x!3)))
 (let ((?x985 (+ ?x238 ?x556 ?x557 (* (- 3) (* u!5 y!2 y!2 v!4 v!4)) (* 3 (* u!5 u!5 y!2 y!2 y!2 v!4)) (* (- 2) (* u!5 u!5 u!5 y!2 x!3)) ?x998 ?x922 ?x919 (* (- 3) (* u!5 u!5 u!5 y!2 y!2 y!2 x!3 x!3)) (* 3 (* u!5 u!5 u!5 y!2 y!2 y!2 y!2 x!3)) (* u!5 u!5 u!5 y!2 x!3 x!3) (* 3 (* u!5 u!5 y!2 v!4 x!3 x!3)) (* 3 (* u!5 y!2 v!4 v!4 x!3 x!3)) ?x943 (* (- 6) (* u!5 u!5 y!2 y!2 v!4 x!3)) (* (- 6) (* u!5 y!2 y!2 v!4 v!4 x!3)) (* (- 2) (* u!5 u!5 u!5 y!2 y!2 x!3)) (* (- 2) (* y!2 y!2 v!4 v!4 v!4 x!3)) (* (- 2) (* u!5 u!5 y!2 y!2 v!4)) (* 3 (* u!5 y!2 y!2 y!2 v!4 v!4)) (* y!2 y!2 y!2 v!4 v!4 v!4) (* (- 2) (* u!5 u!5 y!2 v!4 x!3)))))
 (let ((?x988 (* ?x896 ?x985)))
 (let (($x921 (= ?x988 0)))
 (let (($x940 (or (not $x921) $x1018)))
 (let (($x836 (and $x829 $x940)))
 (let ((?x918 (* v!4 v!4 v!4 x!3 x!3 y!2)))
 (let ((?x881 (* u!5 u!5 u!5 x!3 x!3 x!3 y!2 y!2)))
 (let ((?x901 (* (- 1) (* v!4 v!4 v!4 y!2 y!2))))
 (let ((?x880 (+ (* 2 (* v!4 v!4 v!4 x!3 y!2)) ?x901 ?x881 ?x918 ?x556 (* 3 (* u!5 u!5 v!4 x!3 x!3 x!3 y!2 y!2)) (* 3 (* u!5 v!4 v!4 x!3 x!3 x!3 y!2 y!2)) (* v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2) ?x860 ?x864 ?x865 ?x866 (* (- 2) (* u!5 u!5 u!5 x!3 x!3 x!3 x!3 y!2)) (* (- 6) (* u!5 u!5 v!4 x!3 x!3 x!3 x!3 y!2)) (* (- 6) (* u!5 v!4 v!4 x!3 x!3 x!3 x!3 y!2)) (* (- 2) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2)) ?x878 ?x879)))
 (let ((?x362 (+ ?x924 (* v!4 y!2) ?x175 ?x475)))
 (let ((?x83 (+ (* (- 3) (* u!5 v!4 v!4 y!2 y!2)) ?x901 ?x881 (* (- 3) (* u!5 u!5 u!5 x!3 x!3 y!2 y!2 y!2)) (* 3 (* u!5 u!5 u!5 x!3 y!2 y!2 y!2 y!2)) ?x998 (* u!5 u!5 u!5 x!3 x!3 y!2) (* 3 (* u!5 u!5 v!4 x!3 x!3 y!2)) (* 3 (* u!5 v!4 v!4 x!3 x!3 y!2)) ?x918 (* (- 2) (* u!5 u!5 u!5 x!3 y!2 y!2)) (* (- 6) (* u!5 u!5 v!4 x!3 y!2 y!2)) (* (- 6) (* u!5 v!4 v!4 x!3 y!2 y!2)) (* (- 2) (* v!4 v!4 v!4 x!3 y!2 y!2)) (* (- 2) (* u!5 u!5 v!4 y!2 y!2)) ?x557 (* 3 (* u!5 u!5 v!4 y!2 y!2 y!2)) (* 3 (* u!5 v!4 v!4 y!2 y!2 y!2)) (* v!4 v!4 v!4 y!2 y!2 y!2) ?x238 ?x556 (* (- 2) (* u!5 u!5 u!5 x!3 y!2)) (* (- 2) (* u!5 u!5 v!4 x!3 y!2)))))
 (let (($x887 (and (= ?x362 0) (or (not (= (* ?x362 ?x83) 0)) (not (= (* ?x362 ?x880) 0))))))
 (let (($x195 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x772 (* 2 (* u v v x x))))
 (let ((?x747 (* (- 1) (* v v v x x x))))
 (let ((?x727 (* (- 2) (* v v v x x x x y))))
 (let ((?x726 (* (- 6) (* u v v x x x x y))))
 (let ((?x725 (* (- 6) (* u u v x x x x y))))
 (let ((?x724 (* (- 2) (* u u u x x x x y))))
 (let ((?x596 (* v v v x x x x x)))
 (let ((?x723 (* 3 (* u v v x x x x x))))
 (let ((?x722 (* 3 (* u u v x x x x x))))
 (let ((?x559 (* u u u x x x x x)))
 (let ((?x553 (* v v v x x x y y)))
 (let ((?x729 (* 3 (* u v v x x x y y))))
 (let ((?x728 (* 3 (* u u v x x x y y))))
 (let ((?x465 (* u u v x x)))
 (let ((?x251 (* v v v x x y)))
 (let ((?x173 (* u u u x x x y y)))
 (let ((?x164 (* (- 1) (* v v v y y))))
 (let ((?x1102 (+ (* 2 (* v v v x y)) ?x164 ?x173 ?x251 ?x465 ?x728 ?x729 ?x553 ?x559 ?x722 ?x723 ?x596 ?x724 ?x725 ?x726 ?x727 ?x747 ?x772)))
 (let ((?x475 (* (- 1) k!00)))
 (let ((?x175 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x158 (+ ?x33 ?x34 ?x175 ?x475)))
 (let ((?x509 (* (- 2) (* u u v x y))))
 (let ((?x508 (* (- 2) (* u u u x y))))
 (let ((?x464 (* u u u x x)))
 (let ((?x438 (* v v v y y y)))
 (let ((?x453 (* 3 (* u v v y y y))))
 (let ((?x452 (* 3 (* u u v y y y))))
 (let ((?x401 (* u u u y y y)))
 (let ((?x451 (* (- 2) (* v v v x y y))))
 (let ((?x450 (* (- 6) (* u v v x y y))))
 (let ((?x449 (* (- 6) (* u u v x y y))))
 (let ((?x447 (* (- 2) (* u u u x y y))))
 (let ((?x445 (* 3 (* u v v x x y))))
 (let ((?x444 (* 3 (* u u v x x y))))
 (let ((?x244 (* u u u x x y)))
 (let ((?x224 (* (- 1) (* u u u y y y y y))))
 (let ((?x233 (* 3 (* u u u x y y y y))))
 (let ((?x231 (* (- 3) (* u u u x x y y y))))
 (let ((?x507 (+ (* (- 3) (* u v v y y)) ?x164 ?x173 ?x231 ?x233 ?x224 ?x244 ?x444 ?x445 ?x251 ?x447 ?x449 ?x450 ?x451 (* (- 2) (* u u v y y)) ?x401 ?x452 ?x453 ?x438 ?x464 ?x465 ?x508 ?x509)))
 (and (= ?x158 0) (or (not (= (* ?x158 ?x507) 0)) (not (= (* ?x158 ?x1102) 0))))))))))))))))))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x243 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x169 (* (- 1) x)))
 (let ((?x235 (+ y ?x169)))
 (let ((?x56 (+ u v)))
 (let ((?x634 (+ (* (- 1) (* ?x235 ?x235 v v v)) (* ?x56 ?x56 ?x56 ?x235 ?x235 x x x) (* ?x235 x x v v v) (* ?x56 ?x56 x x v))))
 (let ((?x175 (* (- 1) k!10)))
 (let ((?x189 (* ?x235 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x475 (* (- 1) k!00)))
 (let ((?x476 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x228 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y)) (* ?x476 ?x476 ?x476 y y u u u) (* ?x44 ?x44 ?x44 ?x476 ?x476 y) (* ?x44 ?x476 ?x476 u u))))
 (let (($x463 (or (not (= (* (+ ?x475 (* ?x476 u) (* ?x44 y) ?x175) ?x228) 0)) (not (= (* (+ ?x475 ?x57 ?x189 ?x175) ?x634) 0)))))
 (let ((?x196 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x196 0) $x463)))))))))))))) :qid k!29))
 ))
 (let ((?x517 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x772 (* 2 (* u v v x x))))
 (let ((?x747 (* (- 1) (* v v v x x x))))
 (let ((?x727 (* (- 2) (* v v v x x x x y))))
 (let ((?x726 (* (- 6) (* u v v x x x x y))))
 (let ((?x725 (* (- 6) (* u u v x x x x y))))
 (let ((?x724 (* (- 2) (* u u u x x x x y))))
 (let ((?x596 (* v v v x x x x x)))
 (let ((?x723 (* 3 (* u v v x x x x x))))
 (let ((?x722 (* 3 (* u u v x x x x x))))
 (let ((?x559 (* u u u x x x x x)))
 (let ((?x553 (* v v v x x x y y)))
 (let ((?x729 (* 3 (* u v v x x x y y))))
 (let ((?x728 (* 3 (* u u v x x x y y))))
 (let ((?x465 (* u u v x x)))
 (let ((?x251 (* v v v x x y)))
 (let ((?x173 (* u u u x x x y y)))
 (let ((?x164 (* (- 1) (* v v v y y))))
 (let ((?x1102 (+ (* 2 (* v v v x y)) ?x164 ?x173 ?x251 ?x465 ?x728 ?x729 ?x553 ?x559 ?x722 ?x723 ?x596 ?x724 ?x725 ?x726 ?x727 ?x747 ?x772)))
 (let ((?x475 (* (- 1) k!00)))
 (let ((?x175 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x158 (+ ?x33 ?x34 ?x175 ?x475)))
 (let ((?x509 (* (- 2) (* u u v x y))))
 (let ((?x508 (* (- 2) (* u u u x y))))
 (let ((?x464 (* u u u x x)))
 (let ((?x438 (* v v v y y y)))
 (let ((?x453 (* 3 (* u v v y y y))))
 (let ((?x452 (* 3 (* u u v y y y))))
 (let ((?x401 (* u u u y y y)))
 (let ((?x451 (* (- 2) (* v v v x y y))))
 (let ((?x450 (* (- 6) (* u v v x y y))))
 (let ((?x449 (* (- 6) (* u u v x y y))))
 (let ((?x447 (* (- 2) (* u u u x y y))))
 (let ((?x445 (* 3 (* u v v x x y))))
 (let ((?x444 (* 3 (* u u v x x y))))
 (let ((?x244 (* u u u x x y)))
 (let ((?x224 (* (- 1) (* u u u y y y y y))))
 (let ((?x233 (* 3 (* u u u x y y y y))))
 (let ((?x231 (* (- 3) (* u u u x x y y y))))
 (let ((?x507 (+ (* (- 3) (* u v v y y)) ?x164 ?x173 ?x231 ?x233 ?x224 ?x244 ?x444 ?x445 ?x251 ?x447 ?x449 ?x450 ?x451 (* (- 2) (* u u v y y)) ?x401 ?x452 ?x453 ?x438 ?x464 ?x465 ?x508 ?x509)))
 (let (($x1129 (and (= ?x158 0) (or (not (= (* ?x158 ?x507) 0)) (not (= (* ?x158 ?x1102) 0))))))
 (let ((?x169 (* (- 1) x)))
 (let ((?x235 (+ y ?x169)))
 (let ((?x56 (+ u v)))
 (let ((?x634 (+ (* (- 1) (* ?x235 ?x235 v v v)) (* ?x56 ?x56 ?x56 ?x235 ?x235 x x x) (* ?x235 x x v v v) (* ?x56 ?x56 x x v))))
 (let ((?x476 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x228 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y)) (* ?x476 ?x476 ?x476 y y u u u) (* ?x44 ?x44 ?x44 ?x476 ?x476 y) (* ?x44 ?x476 ?x476 u u))))
 (let (($x463 (or (not (= (* (+ ?x475 (* ?x476 u) (* ?x44 y) ?x175) ?x228) 0)) (not (= (* (+ ?x475 (* ?x56 x) (* ?x235 v) ?x175) ?x634) 0)))))
 (let ((?x196 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x473 (and (= ?x196 0) $x463)))
 (rewrite (= $x473 $x1129)))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x566 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x169 (* (- 1) x)))
 (let ((?x235 (+ y ?x169)))
 (let ((?x56 (+ u v)))
 (let ((?x634 (+ (* (- 1) (* ?x235 ?x235 v v v)) (* ?x56 ?x56 ?x56 ?x235 ?x235 x x x) (* ?x235 x x v v v) (* ?x56 ?x56 x x v))))
 (let ((?x175 (* (- 1) k!10)))
 (let ((?x189 (* ?x235 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x475 (* (- 1) k!00)))
 (let ((?x476 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x228 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y)) (* ?x476 ?x476 ?x476 y y u u u) (* ?x44 ?x44 ?x44 ?x476 ?x476 y) (* ?x44 ?x476 ?x476 u u))))
 (let (($x463 (or (not (= (* (+ ?x475 (* ?x476 u) (* ?x44 y) ?x175) ?x228) 0)) (not (= (* (+ ?x475 ?x57 ?x189 ?x175) ?x634) 0)))))
 (and (= (+ ?x475 (* x u) (* y v) ?x175) 0) $x463))))))))))))) :qid k!29))
 ))
 (let ((?x409 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x169 (* (- 1) x)))
 (let ((?x235 (+ y ?x169)))
 (let ((?x56 (+ u v)))
 (let ((?x634 (+ (* (- 1) (* ?x235 ?x235 v v v)) (* ?x56 ?x56 ?x56 ?x235 ?x235 x x x) (* ?x235 x x v v v) (* ?x56 ?x56 x x v))))
 (let ((?x175 (* (- 1) k!10)))
 (let ((?x189 (* ?x235 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x475 (* (- 1) k!00)))
 (let ((?x476 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x228 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y)) (* ?x476 ?x476 ?x476 y y u u u) (* ?x44 ?x44 ?x44 ?x476 ?x476 y) (* ?x44 ?x476 ?x476 u u))))
 (let (($x463 (or (not (= (* (+ ?x475 (* ?x476 u) (* ?x44 y) ?x175) ?x228) 0)) (not (= (* (+ ?x475 ?x57 ?x189 ?x175) ?x634) 0)))))
 (let ((?x196 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x473 (and (= ?x196 0) $x463)))
 (let (($x213 (and (= (+ ?x475 (* x u) (* y v) ?x175) 0) $x463)))
 (rewrite (= $x213 $x473))))))))))))))))))
 ))
 (let (($x227 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x169 (* (- 1) x)))
 (let ((?x235 (+ y ?x169)))
 (let ((?x56 (+ u v)))
 (let ((?x634 (+ (* (- 1) (* ?x235 ?x235 v v v)) (* ?x56 ?x56 ?x56 ?x235 ?x235 x x x) (* ?x235 x x v v v) (* ?x56 ?x56 x x v))))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x189 (* ?x235 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x476 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x228 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y)) (* ?x476 ?x476 ?x476 y y u u u) (* ?x44 ?x44 ?x44 ?x476 ?x476 y) (* ?x44 ?x476 ?x476 u u))))
 (let (($x695 (or (not (= (* (+ ?x81 (* ?x476 u) (* ?x44 y) ?x97) ?x228) 0)) (not (= (* (+ ?x81 ?x57 ?x189 ?x97) ?x634) 0)))))
 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x695)))))))))))))) :qid k!29))
 ))
 (let ((?x582 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x169 (* (- 1) x)))
 (let ((?x235 (+ y ?x169)))
 (let ((?x56 (+ u v)))
 (let ((?x634 (+ (* (- 1) (* ?x235 ?x235 v v v)) (* ?x56 ?x56 ?x56 ?x235 ?x235 x x x) (* ?x235 x x v v v) (* ?x56 ?x56 x x v))))
 (let ((?x175 (* (- 1) k!10)))
 (let ((?x189 (* ?x235 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x475 (* (- 1) k!00)))
 (let ((?x476 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x228 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y)) (* ?x476 ?x476 ?x476 y y u u u) (* ?x44 ?x44 ?x44 ?x476 ?x476 y) (* ?x44 ?x476 ?x476 u u))))
 (let (($x463 (or (not (= (* (+ ?x475 (* ?x476 u) (* ?x44 y) ?x175) ?x228) 0)) (not (= (* (+ ?x475 ?x57 ?x189 ?x175) ?x634) 0)))))
 (let (($x213 (and (= (+ ?x475 (* x u) (* y v) ?x175) 0) $x463)))
 (let ((?x297 (* (+ (* (- 1) (* u00 x00)) ?x57 ?x189 (* (- 1) (* v00 y00))) ?x634)))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x591 (* ?x476 u)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let (($x695 (or (not (= (* (+ ?x81 ?x591 ?x45 ?x97) ?x228) 0)) (not (= ?x297 0)))))
 (let (($x567 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x695)))
 (rewrite (= $x567 $x213))))))))))))))))))))))))
 ))
 (let (($x72 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x58 (- y x)))
 (let ((?x56 (+ u v)))
 (let ((?x66 (+ (* (- 1) v v v ?x58 ?x58) (* ?x56 ?x56 ?x56 x x x ?x58 ?x58) (* v v v x x ?x58) (* ?x56 ?x56 v x x))))
 (let ((?x38 (* v00 y00)))
 (let ((?x67 (* (- (+ (* (- 1) u00 x00) (* ?x56 x) (* v ?x58)) ?x38) ?x66)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x52 (+ (* (- 1) ?x44 ?x44 ?x44 y y) (* u u u ?x42 ?x42 ?x42 y y) (* ?x44 ?x44 ?x44 ?x42 ?x42 y) (* u u ?x44 ?x42 ?x42))))
 (let ((?x53 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x52)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x53 0)) (not (= ?x67 0)))))))))))))) :qid k!29))
 ))
 (let ((?x590 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x169 (* (- 1) x)))
 (let ((?x235 (+ y ?x169)))
 (let ((?x56 (+ u v)))
 (let ((?x634 (+ (* (- 1) (* ?x235 ?x235 v v v)) (* ?x56 ?x56 ?x56 ?x235 ?x235 x x x) (* ?x235 x x v v v) (* ?x56 ?x56 x x v))))
 (let ((?x38 (* v00 y00)))
 (let ((?x97 (* (- 1) ?x38)))
 (let ((?x189 (* ?x235 v)))
 (let ((?x57 (* ?x56 x)))
 (let ((?x81 (* (- 1) (* u00 x00))))
 (let ((?x476 (+ x (* (- 1) y))))
 (let ((?x44 (+ v u)))
 (let ((?x228 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y)) (* ?x476 ?x476 ?x476 y y u u u) (* ?x44 ?x44 ?x44 ?x476 ?x476 y) (* ?x44 ?x476 ?x476 u u))))
 (let (($x695 (or (not (= (* (+ ?x81 (* ?x476 u) (* ?x44 y) ?x97) ?x228) 0)) (not (= (* (+ ?x81 ?x57 ?x189 ?x97) ?x634) 0)))))
 (let (($x567 (and (= (+ ?x81 (* x u) (* y v) ?x97) 0) $x695)))
 (let ((?x66 (+ (* (- 1) v v v (- y x) (- y x)) (* ?x56 ?x56 ?x56 x x x (- y x) (- y x)) (* v v v x x (- y x)) (* ?x56 ?x56 v x x))))
 (let ((?x67 (* (- (+ (* (- 1) u00 x00) ?x57 (* v (- y x))) ?x38) ?x66)))
 (let ((?x42 (- x y)))
 (let ((?x52 (+ (* (- 1) ?x44 ?x44 ?x44 y y) (* u u u ?x42 ?x42 ?x42 y y) (* ?x44 ?x44 ?x44 ?x42 ?x42 y) (* u u ?x44 ?x42 ?x42))))
 (let ((?x53 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x52)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x71 (and $x41 (or (not (= ?x53 0)) (not (= ?x67 0))))))
 (rewrite (= $x71 $x567))))))))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x202 (mp (mp @x73 (quant-intro (proof-bind ?x590) (= $x72 $x227)) $x227) (rewrite (= $x227 $x227)) $x227)))
 (let ((@x461 (mp (mp @x202 (quant-intro (proof-bind ?x582) (= $x227 $x566)) $x566) (quant-intro (proof-bind ?x409) (= $x566 $x243)) $x243)))
 (let ((@x889 (mp~ (mp @x461 (quant-intro (proof-bind ?x517) (= $x243 $x195)) $x195) (sk (~ $x195 $x887)) $x887)))
 (let ((@x1024 (mp @x889 (rewrite (= $x887 $x836)) $x836)))
 (let ((@x934 (and-elim @x1024 $x829)))
 (let ((@x844 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x829) $x891)) @x934 $x891)))
 (let (($x890 (<= ?x906 0)))
 (let ((@x1038 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x829) $x890)) @x934 $x890)))
 (let (($x839 (not (<= ?x1019 0))))
 (let (($x897 (>= ?x1019 0)))
 (let (($x894 (>= ?x988 0)))
 (let (($x827 (<= ?x988 0)))
 (let ((@x903 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x921 (not $x827) (not $x894))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x827)) @x1038 @x844 false) $x827) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x894)) @x1038 @x844 false) $x894) $x921)))
 (let ((@x970 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x931 $x839 (not $x897))) (unit-resolution (and-elim @x1024 $x940) @x903 $x1018) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x897)) @x1038 @x844 false) $x897) $x839)))
 ((_ th-lemma arith farkas 1 1 1) @x970 @x1038 @x844 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             376
 :arith-nonlinear-horner    11
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                14.07
 :memory                    3.18
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                24130596048009.00
 :num-checks                1
 :propagations              14
 :rlimit-count              58107970
 :time                      91.67
 :total-time                91.59)
