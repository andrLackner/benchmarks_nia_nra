unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x236 (* (- 1) k!2)))
 (let ((?x252 (+ (* 3 n!0) ?x236 (* 3 (* n!0 n!0)))))
 (let (($x142 (<= ?x252 (- 1))))
 (let (($x184 (= ?x252 (- 1))))
 (let ((?x106 (+ k!2 c!3)))
 (let ((?x152 (+ k!2 m!1)))
 (let ((?x545 (+ 6 m!1)))
 (let ((?x374 (+ 1 n!0)))
 (let ((?x411 (+ (* ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x152 ?x106 ?x106) (* (- 1) (* ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x106 ?x106)) (* (- 1) (* ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 ?x152 ?x106 ?x106)) (* 3 (* ?x374 ?x374 ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 ?x106 ?x106)) (* 3 (* ?x374 ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 ?x106 ?x106)) (* ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 ?x106 ?x106) (* (- 3) (* ?x374 ?x374 ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x106 ?x106)) (* (- 3) (* ?x374 ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x106 ?x106)))))
 (let (($x329 (= ?x411 0)))
 (let (($x438 (not $x329)))
 (let ((?x248 (+ (* 2 n!0) ?x236 (* n!0 k!2) (* (- 3) c!3))))
 (let (($x247 (= ?x248 (- 1))))
 (let ((?x423 (* k!2 k!2)))
 (let ((?x200 (+ (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3) ?x423)))
 (let (($x223 (= ?x200 (- 4))))
 (let ((?x94 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x138 (= ?x94 (- 6))))
 (let (($x191 (and $x138 $x223 $x247 $x184 $x438)))
 (let ((?x204 (* (- 1) (* ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 (+ c!3 k!2) (+ c!3 k!2)))))
 (let ((?x151 (+ c!3 k!2)))
 (let ((?x171 (+ (* ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x151 ?x151) (* ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 ?x152 ?x151 ?x151) (* (- 3) (* ?x374 ?x374 ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 ?x151 ?x151)) (* (- 1) (* ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x152 ?x151 ?x151)) (* 3 (* ?x374 ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x151 ?x151)) (* 3 (* ?x374 ?x374 ?x545 ?x545 ?x545 ?x152 ?x152 ?x152 ?x151 ?x151)) (* (- 3) (* ?x374 ?x374 ?x374 ?x374 ?x545 ?x545 ?x152 ?x151 ?x151)) ?x204)))
 (let (($x282 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x190 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x423) (* 9 (* c!3 n!0)))))
 (let (($x589 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x190 4) $x282 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x171 0)))))
 (let (($x194 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x623 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x518 (* (- 1) ?x623)))
 (let ((?x608 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x435 (* (- 3) ?x608)))
 (let ((?x544 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x516 (* 3 ?x544)))
 (let ((?x427 (* ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x433 (* 3 ?x427)))
 (let ((?x399 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x596 (* (- 1) ?x399)))
 (let ((?x363 (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x284 (* (- 3) ?x363)))
 (let ((?x214 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x101 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (+ ?x101 ?x214 ?x284 ?x596 ?x433 ?x516 ?x435 ?x518) 0)))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x419 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x363 (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x284 (* (- 3) ?x363)))
 (let ((?x544 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x516 (* 3 ?x544)))
 (let ((?x608 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x435 (* (- 3) ?x608)))
 (let ((?x623 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x518 (* (- 1) ?x623)))
 (let ((?x427 (* ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x433 (* 3 ?x427)))
 (let ((?x399 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x596 (* (- 1) ?x399)))
 (let ((?x101 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x214 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x70 ?x69 ?x69)))
 (let (($x196 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x233 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x233 $x196 (not (= (+ ?x214 ?x101 ?x596 ?x433 ?x518 ?x435 ?x516 ?x284) 0))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x238 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x623 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x518 (* (- 1) ?x623)))
 (let ((?x608 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x435 (* (- 3) ?x608)))
 (let ((?x544 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x516 (* 3 ?x544)))
 (let ((?x427 (* ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x433 (* 3 ?x427)))
 (let ((?x399 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x596 (* (- 1) ?x399)))
 (let ((?x363 (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x284 (* (- 3) ?x363)))
 (let ((?x214 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x101 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x103 (and $x124 $x208 $x260 $x298 (not (= (+ ?x101 ?x214 ?x284 ?x596 ?x433 ?x516 ?x435 ?x518) 0)))))
 (let (($x196 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x233 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x242 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x233 $x196 (not (= (+ ?x214 ?x101 ?x596 ?x433 ?x518 ?x435 ?x516 ?x284) 0)))))
 (rewrite (= $x242 $x103))))))))))))))))))))))))))))))))))
 ))
 (let (($x202 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x363 (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x623 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x399 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x350 (+ (* (- 1) (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x70 ?x69 ?x69)) (* (- 1) (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)) ?x399 (* (- 3) (* ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)) ?x623 (* 3 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)) (* (- 3) (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)) (* 3 ?x363))))
 (let (($x196 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x265 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x275 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x275 (- 4)) $x265 $x196 (not (= ?x350 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x273 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x363 (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x284 (* (- 3) ?x363)))
 (let ((?x544 (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x516 (* 3 ?x544)))
 (let ((?x608 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x435 (* (- 3) ?x608)))
 (let ((?x623 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x518 (* (- 1) ?x623)))
 (let ((?x427 (* ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x433 (* 3 ?x427)))
 (let ((?x399 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x596 (* (- 1) ?x399)))
 (let ((?x101 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x214 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x70 ?x69 ?x69)))
 (let (($x196 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x233 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x242 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x233 $x196 (not (= (+ ?x214 ?x101 ?x596 ?x433 ?x518 ?x435 ?x516 ?x284) 0)))))
 (let ((?x350 (+ (* (- 1) ?x214) (* (- 1) ?x101) ?x399 (* (- 3) ?x427) ?x623 (* 3 ?x608) (* (- 3) ?x544) (* 3 ?x363))))
 (let (($x265 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x275 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x95 (and $x124 (= ?x275 (- 4)) $x265 $x196 (not (= ?x350 0)))))
 (rewrite (= $x95 $x242)))))))))))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x75 (- (* (- 1) ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x79 (- (+ ?x75 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72))))
 (let ((?x82 (+ ?x79 (* ?x69 ?x69 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 3 ?x69 ?x69 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x84 (- ?x82 (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x86 (+ ?x84 (* 3 ?x69 ?x69 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x86 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x209 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x308 (+ 6 m)))
 (let ((?x311 (+ 1 n)))
 (let ((?x363 (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x623 (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)))
 (let ((?x399 (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x70 ?x69 ?x69)))
 (let ((?x350 (+ (* (- 1) (* ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x70 ?x69 ?x69)) (* (- 1) (* ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)) ?x399 (* (- 3) (* ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)) ?x623 (* 3 (* ?x311 ?x311 ?x311 ?x311 ?x308 ?x308 ?x70 ?x69 ?x69)) (* (- 3) (* ?x311 ?x311 ?x308 ?x308 ?x308 ?x70 ?x70 ?x70 ?x69 ?x69)) (* 3 ?x363))))
 (let (($x196 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x265 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x275 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x95 (and $x124 (= ?x275 (- 4)) $x265 $x196 (not (= ?x350 0)))))
 (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x75 (- (* (- 1) ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x79 (- (+ ?x75 (* ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72))))
 (let ((?x82 (+ ?x79 (* ?x69 ?x69 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72) (* 3 ?x69 ?x69 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x84 (- ?x82 (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72 ?x72))))
 (let ((?x86 (+ ?x84 (* 3 ?x69 ?x69 ?x70 ?x71 ?x71 ?x72 ?x72 ?x72 ?x72 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x86 0))))))
 (rewrite (= $x90 $x95)))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x598 (mp (mp @x92 (quant-intro (proof-bind ?x209) (= $x91 $x202)) $x202) (rewrite (= $x202 $x202)) $x202)))
 (let ((@x283 (mp (mp @x598 (quant-intro (proof-bind ?x273) (= $x202 $x419)) $x419) (quant-intro (proof-bind ?x238) (= $x419 $x194)) $x194)))
 (let ((@x303 (mp (mp~ @x283 (sk (~ $x194 $x589)) $x589) (rewrite (= $x589 $x191)) $x191)))
 (let ((@x140 (and-elim @x303 $x184)))
 (let ((@x116 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x142)) @x140 $x142)))
 (let (($x323 (>= ?x252 (- 1))))
 (let ((@x322 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x184) $x323)) @x140 $x323)))
 (let (($x174 (<= ?x200 (- 4))))
 (let ((@x141 (and-elim @x303 $x223)))
 (let ((@x288 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x223) $x174)) @x141 $x174)))
 (let (($x554 (>= ?x200 (- 4))))
 (let ((@x239 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x223) $x554)) @x141 $x554)))
 (let (($x550 (<= ?x248 (- 1))))
 (let ((@x281 (and-elim @x303 $x247)))
 (let ((@x440 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x247) $x550)) @x281 $x550)))
 (let (($x180 (>= ?x248 (- 1))))
 (let ((@x525 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x247) $x180)) @x281 $x180)))
 (let (($x556 (<= ?x94 (- 6))))
 (let ((@x266 (and-elim @x303 $x138)))
 (let ((@x569 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x138) $x556)) @x266 $x556)))
 (let (($x229 (>= ?x94 (- 6))))
 (let ((@x244 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x138) $x229)) @x266 $x229)))
 (let (($x607 (not (<= ?x411 0))))
 (let (($x524 (>= ?x411 0)))
 (let ((@x416 ((_ th-lemma arith) (hypothesis (not $x524)) @x322 @x116 @x244 @x569 @x244 @x569 @x322 @x116 @x525 @x440 @x322 @x116 @x239 @x288 @x322 @x116 @x322 @x116 false)))
 (let ((@x393 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x329 $x607 (not $x524))) (and-elim @x303 $x438) (or $x607 (not $x524)))))
 ((_ th-lemma arith) (unit-resolution @x393 (lemma @x416 $x524) $x607) @x322 @x116 @x244 @x569 @x244 @x569 @x322 @x116 @x525 @x440 @x322 @x116 @x239 @x288 @x322 @x116 @x322 @x116 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             185
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.64
 :memory                    3.15
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1661543
 :num-checks                1
 :propagations              11
 :rlimit-count              11857
 :time                      0.01
 :total-time                0.02)
