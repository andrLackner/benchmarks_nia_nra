unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x405 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x82 (>= ?x405 0)))
 (let (($x226 (= ?x405 0)))
 (let ((?x437 (* 4 (* x!1 x!1))))
 (let ((?x489 (* x!1 x!1 x!1)))
 (let ((?x314 (* (- 1) ?x489)))
 (let ((?x175 (* (- 3) x!1)))
 (let ((?x472 (* y!0 y!0 y!0 x!1)))
 (let ((?x280 (* (- 1) (* y!0 x!1 x!1 x!1))))
 (let ((?x296 (* (- 2) (* y!0 y!0 y!0))))
 (let ((?x300 (* y!0 y!0)))
 (let ((?x313 (* (- 5) ?x300)))
 (let ((?x270 (* y!0 y!0 x!1)))
 (let ((?x271 (* (- 3) (* y!0 x!1))))
 (let ((?x233 (* y!0 y!0 x!1 x!1)))
 (let ((?x309 (* (- 4) y!0)))
 (let ((?x205 (+ (- 1) ?x309 ?x233 ?x271 (* 5 (* y!0 x!1 x!1)) ?x270 ?x313 ?x296 ?x280 ?x472 ?x175 ?x314 ?x437)))
 (let ((?x80 (* (- 1) x00)))
 (let ((?x73 (* (- 1) y00)))
 (let ((?x227 (+ ?x73 ?x80 y!0 x!1)))
 (let ((?x127 (* ?x227 ?x205)))
 (let (($x449 (= ?x127 0)))
 (let (($x113 (not $x449)))
 (let ((?x204 (* 3 x!1)))
 (let ((?x75 (* (- 2) y!0)))
 (let ((?x203 (+ 1 ?x75 ?x233 ?x271 (* (- 5) (* y!0 x!1 x!1)) (* (- 1) ?x270) ?x300 ?x280 ?x472 ?x204 ?x489 ?x437)))
 (let ((?x84 (* ?x227 ?x203)))
 (let (($x275 (= ?x84 0)))
 (let (($x199 (or (not $x275) $x113)))
 (let (($x115 (and $x226 $x199)))
 (let ((?x197 (* x!1 y!0 y!0 y!0)))
 (let ((?x492 (* (- 1) (* x!1 x!1 x!1 y!0))))
 (let ((?x477 (* x!1 x!1 y!0 y!0)))
 (let ((?x495 (* x!1 y!0 y!0)))
 (let ((?x483 (* (- 3) (* x!1 y!0))))
 (let ((?x306 (+ (- 1) ?x175 ?x309 ?x483 ?x313 ?x495 ?x477 ?x437 (* 5 (* x!1 x!1 y!0)) ?x492 ?x314 ?x296 ?x197)))
 (let ((?x248 (+ x!1 y!0 ?x73 ?x80)))
 (let ((?x543 (+ 1 ?x204 ?x75 ?x483 ?x300 (* (- 1) ?x495) ?x477 ?x437 (* (- 5) (* x!1 x!1 y!0)) ?x492 ?x489 ?x197)))
 (let (($x303 (and (= ?x248 0) (or (not (= (* ?x248 ?x543) 0)) (not (= (* ?x248 ?x306) 0))))))
 (let (($x218 (exists ((x Int) (y Int) )(! (let ((?x398 (* x y y y)))
 (let ((?x499 (* (- 2) (* y y y))))
 (let ((?x279 (* x x x)))
 (let ((?x325 (* (- 1) ?x279)))
 (let ((?x324 (* (- 1) (* x x x y))))
 (let ((?x201 (* x x y)))
 (let ((?x372 (* 5 ?x201)))
 (let ((?x370 (* 4 (* x x))))
 (let ((?x182 (* x x y y)))
 (let ((?x180 (* x y y)))
 (let ((?x141 (* x y)))
 (let ((?x355 (* (- 3) ?x141)))
 (let ((?x225 (+ (- 1) (* (- 3) x) (* (- 4) y) ?x355 (* (- 5) (* y y)) ?x180 ?x182 ?x370 ?x372 ?x324 ?x325 ?x499 ?x398)))
 (let ((?x80 (* (- 1) x00)))
 (let ((?x73 (* (- 1) y00)))
 (let ((?x94 (+ x y ?x73 ?x80)))
 (let ((?x593 (* (- 5) ?x201)))
 (let ((?x181 (* (- 1) ?x180)))
 (let ((?x176 (* y y)))
 (let ((?x498 (* (- 2) y)))
 (let ((?x591 (* 3 x)))
 (let ((?x273 (* ?x94 (+ 1 ?x591 ?x498 ?x355 ?x176 ?x181 ?x182 ?x370 ?x593 ?x324 ?x279 ?x398))))
 (let (($x99 (= ?x94 0)))
 (and $x99 (or (not (= ?x273 0)) (not (= (* ?x94 ?x225) 0))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x429 (exists ((x Int) (y Int) )(! (let ((?x398 (* x y y y)))
 (let ((?x499 (* (- 2) (* y y y))))
 (let ((?x389 (* (- 1) (* y y 1))))
 (let ((?x385 (* (- 1) (* y 1 1))))
 (let ((?x279 (* x x x)))
 (let ((?x325 (* (- 1) ?x279)))
 (let ((?x324 (* (- 1) (* x x x y))))
 (let ((?x201 (* x x y)))
 (let ((?x372 (* 5 ?x201)))
 (let ((?x370 (* 4 (* x x))))
 (let ((?x182 (* x x y y)))
 (let ((?x180 (* x y y)))
 (let ((?x498 (* (- 2) y)))
 (let ((?x500 (+ (- 1) (* (- 2) x) ?x498 (* (- 1) (* x y)) (* (- 1) (* x 1 1)) (* (- 1) (* y 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) (* (- 3) (* y y)) ?x180 ?x182 ?x370 ?x372 ?x324 ?x325 ?x385 ?x389 (* (- 1) (* y 1 y)) ?x499 ?x398)))
 (let ((?x80 (* (- 1) x00)))
 (let ((?x73 (* (- 1) y00)))
 (let ((?x94 (+ x y ?x73 ?x80)))
 (let (($x508 (not (= (* ?x94 ?x500) 0))))
 (let ((?x593 (* (- 5) ?x201)))
 (let ((?x181 (* (- 1) ?x180)))
 (let ((?x591 (* 3 x)))
 (let ((?x146 (+ 1 ?x591 ?x498 (* (- 2) (* x y)) (* 2 (* y y)) ?x181 ?x182 ?x370 ?x593 ?x324 ?x279 (* (- 1) (* y (- 1) x)) ?x385 ?x389 ?x398 (* (- 1) (* y x 1)) (* (- 1) (* y (- 1) 1)) (* (- 1) (* y 1 x)))))
 (let (($x99 (= ?x94 0)))
 (and $x99 (or (not (= (* ?x94 ?x146) 0)) $x508))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x397 (lambda ((x Int) (y Int) )(let ((?x398 (* x y y y)))
 (let ((?x499 (* (- 2) (* y y y))))
 (let ((?x279 (* x x x)))
 (let ((?x325 (* (- 1) ?x279)))
 (let ((?x324 (* (- 1) (* x x x y))))
 (let ((?x201 (* x x y)))
 (let ((?x372 (* 5 ?x201)))
 (let ((?x370 (* 4 (* x x))))
 (let ((?x182 (* x x y y)))
 (let ((?x180 (* x y y)))
 (let ((?x141 (* x y)))
 (let ((?x355 (* (- 3) ?x141)))
 (let ((?x225 (+ (- 1) (* (- 3) x) (* (- 4) y) ?x355 (* (- 5) (* y y)) ?x180 ?x182 ?x370 ?x372 ?x324 ?x325 ?x499 ?x398)))
 (let ((?x80 (* (- 1) x00)))
 (let ((?x73 (* (- 1) y00)))
 (let ((?x94 (+ x y ?x73 ?x80)))
 (let ((?x593 (* (- 5) ?x201)))
 (let ((?x181 (* (- 1) ?x180)))
 (let ((?x176 (* y y)))
 (let ((?x498 (* (- 2) y)))
 (let ((?x591 (* 3 x)))
 (let ((?x273 (* ?x94 (+ 1 ?x591 ?x498 ?x355 ?x176 ?x181 ?x182 ?x370 ?x593 ?x324 ?x279 ?x398))))
 (let (($x99 (= ?x94 0)))
 (let (($x545 (and $x99 (or (not (= ?x273 0)) (not (= (* ?x94 ?x225) 0))))))
 (let ((?x389 (* (- 1) (* y y 1))))
 (let ((?x385 (* (- 1) (* y 1 1))))
 (let ((?x500 (+ (- 1) (* (- 2) x) ?x498 (* (- 1) ?x141) (* (- 1) (* x 1 1)) (* (- 1) (* y 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) (* (- 3) ?x176) ?x180 ?x182 ?x370 ?x372 ?x324 ?x325 ?x385 ?x389 (* (- 1) (* y 1 y)) ?x499 ?x398)))
 (let (($x508 (not (= (* ?x94 ?x500) 0))))
 (let ((?x146 (+ 1 ?x591 ?x498 (* (- 2) ?x141) (* 2 ?x176) ?x181 ?x182 ?x370 ?x593 ?x324 ?x279 (* (- 1) (* y (- 1) x)) ?x385 ?x389 ?x398 (* (- 1) (* y x 1)) (* (- 1) (* y (- 1) 1)) (* (- 1) (* y 1 x)))))
 (let (($x135 (and $x99 (or (not (= (* ?x94 ?x146) 0)) $x508))))
 (rewrite (= $x135 $x545)))))))))))))))))))))))))))))))))
 ))
 (let (($x290 (exists ((x Int) (y Int) )(! (let ((?x177 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x89 (+ (* (+ (- 1) y) (+ 1 x)) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)) ?x177 (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y))))))
 (let ((?x80 (* (- 1) x00)))
 (let ((?x73 (* (- 1) y00)))
 (let ((?x496 (+ x ?x73 ?x80 y)))
 (let ((?x224 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x258 (+ (* (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) ?x224 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y))))))
 (and (= ?x496 0) (or (not (= (* ?x496 ?x258) 0)) (not (= (* ?x496 ?x89) 0))))))))))) :qid k!27))
 ))
 (let ((?x261 (lambda ((x Int) (y Int) )(let ((?x398 (* x y y y)))
 (let ((?x499 (* (- 2) (* y y y))))
 (let ((?x389 (* (- 1) (* y y 1))))
 (let ((?x385 (* (- 1) (* y 1 1))))
 (let ((?x279 (* x x x)))
 (let ((?x325 (* (- 1) ?x279)))
 (let ((?x324 (* (- 1) (* x x x y))))
 (let ((?x201 (* x x y)))
 (let ((?x372 (* 5 ?x201)))
 (let ((?x370 (* 4 (* x x))))
 (let ((?x182 (* x x y y)))
 (let ((?x180 (* x y y)))
 (let ((?x498 (* (- 2) y)))
 (let ((?x500 (+ (- 1) (* (- 2) x) ?x498 (* (- 1) (* x y)) (* (- 1) (* x 1 1)) (* (- 1) (* y 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) (* (- 3) (* y y)) ?x180 ?x182 ?x370 ?x372 ?x324 ?x325 ?x385 ?x389 (* (- 1) (* y 1 y)) ?x499 ?x398)))
 (let ((?x80 (* (- 1) x00)))
 (let ((?x73 (* (- 1) y00)))
 (let ((?x94 (+ x y ?x73 ?x80)))
 (let (($x508 (not (= (* ?x94 ?x500) 0))))
 (let ((?x593 (* (- 5) ?x201)))
 (let ((?x181 (* (- 1) ?x180)))
 (let ((?x591 (* 3 x)))
 (let ((?x146 (+ 1 ?x591 ?x498 (* (- 2) (* x y)) (* 2 (* y y)) ?x181 ?x182 ?x370 ?x593 ?x324 ?x279 (* (- 1) (* y (- 1) x)) ?x385 ?x389 ?x398 (* (- 1) (* y x 1)) (* (- 1) (* y (- 1) 1)) (* (- 1) (* y 1 x)))))
 (let (($x99 (= ?x94 0)))
 (let (($x135 (and $x99 (or (not (= (* ?x94 ?x146) 0)) $x508))))
 (let ((?x177 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x89 (+ (* (+ (- 1) y) (+ 1 x)) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)) ?x177 (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y))))))
 (let ((?x496 (+ x ?x73 ?x80 y)))
 (let ((?x224 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x258 (+ (* (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) ?x224 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y))))))
 (let (($x206 (and (= ?x496 0) (or (not (= (* ?x496 ?x258) 0)) (not (= (* ?x496 ?x89) 0))))))
 (rewrite (= $x206 $x135)))))))))))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((x Int) (y Int) )(! (let ((?x58 (+ (* (+ x 1) (- y 1)) (* (+ x 1) (+ x 1) (- y 1) (- y 1)))))
 (let ((?x60 (- ?x58 (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x62 (+ ?x60 (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let ((?x65 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (- ?x62 (* (- y 1) (- y 1) (- y 1))))))
 (let ((?x41 (+ (* (- x 1) (+ y 1)) (* (- x 1) (- x 1) (+ y 1) (+ y 1)))))
 (let ((?x43 (- ?x41 (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x45 (+ ?x43 (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) (- ?x45 (* (+ y 1) (+ y 1) (+ y 1))))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)) (not (= ?x65 0)))))))))))) :qid k!27))
 ))
 (let ((?x213 (lambda ((x Int) (y Int) )(let ((?x177 (* (- 1) (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x89 (+ (* (+ (- 1) y) (+ 1 x)) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)) ?x177 (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y))))))
 (let ((?x80 (* (- 1) x00)))
 (let ((?x73 (* (- 1) y00)))
 (let ((?x496 (+ x ?x73 ?x80 y)))
 (let ((?x224 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x258 (+ (* (+ (- 1) x) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) ?x224 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y))))))
 (let (($x206 (and (= ?x496 0) (or (not (= (* ?x496 ?x258) 0)) (not (= (* ?x496 ?x89) 0))))))
 (let ((?x58 (+ (* (+ x 1) (- y 1)) (* (+ x 1) (+ x 1) (- y 1) (- y 1)))))
 (let ((?x60 (- ?x58 (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x62 (+ ?x60 (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let ((?x65 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (- ?x62 (* (- y 1) (- y 1) (- y 1))))))
 (let ((?x41 (+ (* (- x 1) (+ y 1)) (* (- x 1) (- x 1) (+ y 1) (+ y 1)))))
 (let ((?x43 (- ?x41 (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x45 (+ ?x43 (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) (- ?x45 (* (+ y 1) (+ y 1) (+ y 1))))))
 (let (($x69 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)) (not (= ?x65 0))))))
 (rewrite (= $x69 $x206))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x292 (mp (mp @x71 (quant-intro (proof-bind ?x213) (= $x70 $x290)) $x290) (rewrite (= $x290 $x290)) $x290)))
 (let ((@x259 (mp (mp @x292 (quant-intro (proof-bind ?x261) (= $x290 $x429)) $x429) (quant-intro (proof-bind ?x397) (= $x429 $x218)) $x218)))
 (let ((@x202 (mp (mp~ @x259 (sk (~ $x218 $x303)) $x303) (rewrite (= $x303 $x115)) $x115)))
 (let ((@x172 (and-elim @x202 $x226)))
 (let ((@x257 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x226) $x82)) @x172 $x82)))
 (let (($x139 (<= ?x405 0)))
 (let ((@x291 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x226) $x139)) @x172 $x139)))
 (let (($x343 (not (<= ?x127 0))))
 (let (($x285 (>= ?x127 0)))
 (let (($x294 (>= ?x84 0)))
 (let (($x281 (<= ?x84 0)))
 (let ((@x537 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x275 (not $x281) (not $x294))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x281)) @x291 @x257 false) $x281) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x294)) @x291 @x257 false) $x294) $x275)))
 (let ((@x120 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x449 $x343 (not $x285))) (unit-resolution (and-elim @x202 $x199) @x537 $x113) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x285)) @x291 @x257 false) $x285) $x343)))
 ((_ th-lemma arith farkas 1 1 1) @x120 @x291 @x257 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             128
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.65
 :memory                    3.15
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1132036
 :num-checks                1
 :propagations              14
 :rlimit-count              3061
 :time                      0.01
 :total-time                0.01)
