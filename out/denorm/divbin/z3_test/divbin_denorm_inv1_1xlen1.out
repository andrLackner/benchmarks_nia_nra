unsat
((set-logic NRA)
(proof
(let (($x115 (exists ((b Real) (x Real) )(! (let ((?x306 (* (- (/ 1.0 2.0)) b)))
 (let ((?x695 (* x b)))
 (let ((?x685 (* (- 1.0) ?x695)))
 (let ((?x62 (* b00 x00)))
 (let ((?x554 (+ ?x62 r00 ?x685 ?x306)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x117 (+ 1.0 ?x45)))
 (let ((?x307 (* ?x117 b)))
 (let ((?x692 (* (/ 1.0 2.0) ?x307)))
 (let ((?x551 (+ ?x685 ?x306 ?x692)))
 (let ((?x422 (* ?x117 ?x117 ?x551 ?x554 b b)))
 (let (($x448 (= ?x422 0.0)))
 (not $x448))))))))))))) :qid k!28))
 ))
 (let (($x230 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x231 (lambda ((b Real) (x Real) )(let ((?x306 (* (- (/ 1.0 2.0)) b)))
 (let ((?x695 (* x b)))
 (let ((?x685 (* (- 1.0) ?x695)))
 (let ((?x62 (* b00 x00)))
 (let ((?x554 (+ ?x62 r00 ?x685 ?x306)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x117 (+ 1.0 ?x45)))
 (let ((?x307 (* ?x117 b)))
 (let ((?x692 (* (/ 1.0 2.0) ?x307)))
 (let ((?x551 (+ ?x685 ?x306 ?x692)))
 (let ((?x422 (* ?x117 ?x117 ?x551 ?x554 b b)))
 (let (($x448 (= ?x422 0.0)))
 (let (($x114 (not $x448)))
 (let ((@x345 (rewrite (= (* ?x117 ?x117 0.0 (+ ?x306 r00 ?x62 ?x685) b b) 0.0))))
 (let ((?x176 (* (/ 1.0 2.0) b)))
 (let ((?x216 (+ ?x176 ?x695)))
 (let ((?x154 (+ ?x176 (* (/ 1.0 2.0) (* 2.0 ?x695)))))
 (let ((@x152 (rewrite (= (+ (* 1.0 b) (* ?x45 b)) (+ b (* 2.0 ?x695))))))
 (let ((@x142 (trans (rewrite (= ?x307 (+ (* 1.0 b) (* ?x45 b)))) @x152 (= ?x307 (+ b (* 2.0 ?x695))))))
 (let ((@x161 (trans (monotonicity @x142 (= ?x692 (* (/ 1.0 2.0) (+ b (* 2.0 ?x695))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x695))) ?x154)) (= ?x692 ?x154))))
 (let ((@x219 (monotonicity (trans @x161 (rewrite (= ?x154 ?x216)) (= ?x692 ?x216)) (= ?x551 (+ ?x685 ?x306 ?x216)))))
 (let ((@x220 (monotonicity (trans @x219 (rewrite (= (+ ?x685 ?x306 ?x216) 0.0)) (= ?x551 0.0)) (rewrite (= ?x554 (+ ?x306 r00 ?x62 ?x685))) (= ?x422 (* ?x117 ?x117 0.0 (+ ?x306 r00 ?x62 ?x685) b b)))))
 (let ((@x225 (trans (monotonicity (trans @x220 @x345 $x448) (= $x448 (= 0.0 0.0))) (rewrite (= (= 0.0 0.0) true)) (= $x448 true))))
 (trans (monotonicity @x225 (= $x114 (not true))) (rewrite (= (not true) false)) (= $x114 false))))))))))))))))))))))))))
 ))
 (let ((@x238 (trans (quant-intro (proof-bind ?x231) (= $x115 $x230)) (elim-unused (= $x230 false)) (= $x115 false))))
 (let (($x350 (exists ((b Real) (r Real) (x Real) )(! (let ((?x79 (* (- 1.0) r00)))
 (let ((?x536 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x150 (+ ?x63 r ?x536 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x45 (* 2.0 x)))
 (let ((?x117 (+ 1.0 ?x45)))
 (let (($x552 (= (* (+ ?x63 r ?x79 (* x b)) x x r b b) 0.0)))
 (let (($x545 (or (not $x552) (not (= (* ?x117 ?x117 (+ r ?x536) ?x150 b b) 0.0)))))
 (and (= (+ ?x63 r ?x79 (* x b)) 0.0) $x545)))))))))) :qid k!28))
 ))
 (let (($x54 (exists ((b Real) (r Real) (x Real) )(! (let ((?x45 (* 2.0 x)))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x24 (- 1.0)))
 (let ((?x49 (* (+ (- (+ (* ?x24 b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x24 ?x36 ?x36 ?x42 ?x46 ?x46)))
 (let ((?x39 (* (+ (- (+ (* ?x24 b00 x00) r) r00) (* ?x36 2.0 x)) ?x24 ?x36 ?x36 r 2.0 x 2.0 x)))
 (let (($x34 (= (+ (- (+ (* ?x24 b00 x00) r) r00) (* b x)) 0.0)))
 (and $x34 (or (not (= ?x39 0.0)) (not (= ?x49 0.0)))))))))))) :qid k!28))
 ))
 (let ((?x304 (lambda ((b Real) (r Real) (x Real) )(let ((?x79 (* (- 1.0) r00)))
 (let ((?x536 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x150 (+ ?x63 r ?x536 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x45 (* 2.0 x)))
 (let ((?x117 (+ 1.0 ?x45)))
 (let (($x552 (= (* (+ ?x63 r ?x79 (* x b)) x x r b b) 0.0)))
 (let (($x545 (or (not $x552) (not (= (* ?x117 ?x117 (+ r ?x536) ?x150 b b) 0.0)))))
 (let (($x278 (and (= (+ ?x63 r ?x79 (* x b)) 0.0) $x545)))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x24 (- 1.0)))
 (let ((?x49 (* (+ (- (+ (* ?x24 b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x24 ?x36 ?x36 ?x42 ?x46 ?x46)))
 (let ((?x39 (* (+ (- (+ (* ?x24 b00 x00) r) r00) (* ?x36 2.0 x)) ?x24 ?x36 ?x36 r 2.0 x 2.0 x)))
 (let (($x34 (= (+ (- (+ (* ?x24 b00 x00) r) r00) (* b x)) 0.0)))
 (let (($x53 (and $x34 (or (not (= ?x39 0.0)) (not (= ?x49 0.0))))))
 (rewrite (= $x53 $x278)))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x107 (mp (mp @x55 (quant-intro (proof-bind ?x304) (= $x54 $x350)) $x350) (rewrite (= $x350 $x115)) $x115)))
 (mp @x107 @x238 false))))))))))))

(:max-memory   17.59
 :memory       17.32
 :num-allocs   57415
 :num-checks   1
 :rlimit-count 865
 :time         0.00
 :total-time   0.02)
