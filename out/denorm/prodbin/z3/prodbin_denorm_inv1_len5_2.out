unsat
((set-logic NIA)
(declare-fun y!1 () Int)
(declare-fun z!0 () Int)
(declare-fun x!2 () Int)
(proof
(let ((?x783 (to_real z!0)))
 (let ((?x127 (to_real y!1)))
 (let ((?x453 (* ?x127 ?x127 ?x783 ?x783)))
 (let ((?x492 (to_real x!2)))
 (let ((?x435 (* ?x127 ?x127 ?x492 ?x492 ?x492)))
 (let ((?x390 (* ?x127 ?x492 ?x783 ?x783)))
 (let ((?x385 (* ?x127 ?x492 ?x492 ?x492)))
 (let ((?x789 (+ (* (/ 1.0 8.0) 1.0) (* (- (/ 3.0 8.0)) ?x127) (* (- 1.0) (* ?x127 ?x127 ?x492 ?x492 ?x783)) (* 2.0 (* ?x127 ?x492 ?x492 ?x783)) (* (/ 1.0 4.0) (* ?x783 ?x783)) (* (/ 1.0 2.0) (* ?x492 ?x783)) (* (/ 3.0 8.0) (* ?x127 ?x127)) (* (/ 15.0 2.0) (* ?x492 ?x492 ?x492)) (* (/ 1.0 4.0) (* ?x492 ?x492)) ?x385 ?x390 (* (- (/ 1.0 4.0)) (* ?x127 ?x127 ?x492 ?x492)) (* (- (/ 1.0 2.0)) ?x435) (* (- (/ 1.0 2.0)) (* ?x127 ?x127 ?x492 ?x783)) (* (- (/ 1.0 2.0)) (* ?x127 ?x127 ?x492 ?x783 ?x783)) (* (- (/ 1.0 4.0)) ?x453) (* (- 1.0) (* ?x492 ?x492 ?x783)) (* (- (/ 1.0 2.0)) (* ?x492 ?x783 ?x783)) (* (- (/ 1.0 8.0)) (* ?x127 ?x127 ?x127)))))
 (let (($x672 (<= ?x789 0.0)))
 (let (($x508 (not $x672)))
 (let ((?x547 (* ?x127 ?x127 ?x127)))
 (let ((?x567 (* (/ 1.0 8.0) ?x547)))
 (let ((?x721 (* ?x492 ?x783 ?x783)))
 (let ((?x150 (* (/ 1.0 2.0) ?x721)))
 (let ((?x644 (* ?x492 ?x492 ?x783)))
 (let ((?x472 (* (/ 1.0 4.0) ?x453)))
 (let ((?x374 (* ?x127 ?x127 ?x492 ?x783 ?x783)))
 (let ((?x480 (* (/ 1.0 2.0) ?x374)))
 (let ((?x445 (* ?x127 ?x127 ?x492 ?x783)))
 (let ((?x461 (* (/ 1.0 2.0) ?x445)))
 (let ((?x443 (* (/ 1.0 2.0) ?x435)))
 (let ((?x392 (* ?x127 ?x127 ?x492 ?x492)))
 (let ((?x448 (* (/ 1.0 4.0) ?x392)))
 (let ((?x395 (* (- 1.0) ?x390)))
 (let ((?x440 (* (- 1.0) ?x385)))
 (let ((?x310 (* ?x492 ?x492)))
 (let ((?x544 (* (- (/ 1.0 4.0)) ?x310)))
 (let ((?x306 (* ?x492 ?x492 ?x492)))
 (let ((?x541 (* (- (/ 15.0 2.0)) ?x306)))
 (let ((?x210 (* ?x127 ?x127)))
 (let ((?x326 (* (- (/ 3.0 8.0)) ?x210)))
 (let ((?x204 (* ?x492 ?x783)))
 (let ((?x325 (* (- (/ 1.0 2.0)) ?x204)))
 (let ((?x179 (* ?x783 ?x783)))
 (let ((?x180 (* (- (/ 1.0 4.0)) ?x179)))
 (let ((?x177 (* ?x127 ?x492 ?x492 ?x783)))
 (let ((?x386 (* (- 2.0) ?x177)))
 (let ((?x800 (* ?x127 ?x127 ?x492 ?x492 ?x783)))
 (let ((?x334 (* (/ 3.0 8.0) ?x127)))
 (let ((?x575 (+ (* (- (/ 1.0 8.0)) 1.0) ?x334 ?x800 ?x386 ?x180 ?x325 ?x326 ?x541 ?x544 ?x440 ?x395 ?x448 ?x443 ?x461 ?x480 ?x472 ?x644 ?x150 ?x567)))
 (let (($x645 (>= ?x575 0.0)))
 (let (($x347 (not $x645)))
 (let (($x577 (<= ?x575 0.0)))
 (let (($x346 (>= ?x789 0.0)))
 (let ((?x48 (to_real z00)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x425 (+ ?x115 (* (- 1.0) (* ?x127 ?x492)) (* (- 1.0) ?x783) ?x48)))
 (let (($x444 (>= ?x425 0.0)))
 (let ((?x468 (* ?x127 ?x492)))
 (let ((?x793 (+ ?x468 (* (- 1.0) (to_real (* x!2 y!1))))))
 (let (($x215 (<= ?x793 0.0)))
 (let ((@x600 (lemma (unit-resolution ((_ th-lemma arith) $x215) (hypothesis (not $x215)) false) $x215)))
 (let ((?x610 (+ (* (- 1.0) (to_real (* x00 y00))) ?x115)))
 (let (($x198 (>= ?x610 0.0)))
 (let (($x570 (= 0.0 ?x610)))
 (let ((@x103 (symm (commutativity (= $x570 (= ?x610 0.0))) (= (= ?x610 0.0) $x570))))
 (let ((@x94 (mp ((_ th-lemma arith) (= ?x610 0.0)) @x103 $x570)))
 (let ((?x88 (* x00 y00)))
 (let ((?x548 (+ z00 ?x88 (* (- 1) z!0) (* (- 1) (* x!2 y!1)))))
 (let (($x553 (>= ?x548 0)))
 (let (($x774 (= 0 ?x548)))
 (let ((@x98 (symm (commutativity (= $x774 (= ?x548 0))) (= (= ?x548 0) $x774))))
 (let (($x590 (= ?x548 0)))
 (let ((?x477 (+ (- (/ 1.0 8.0)) ?x334 ?x386 ?x180 ?x325 ?x326 ?x541 ?x544 ?x480 ?x440 ?x395 ?x448 ?x443 ?x461 ?x472 ?x567 ?x644 ?x150 ?x800)))
 (let ((?x260 (* (+ (* (- 1.0) ?x48) (* (- 1.0) ?x115) ?x468 ?x783) ?x477)))
 (let (($x640 (= ?x260 0.0)))
 (let (($x262 (not $x640)))
 (let ((?x497 (* (- 8.0) (* ?x492 ?x492 ?x492 ?x783))))
 (let ((?x141 (* (- (/ 1.0 8.0)) (* ?x48 ?x127 ?x127 ?x127))))
 (let ((?x455 (+ (* (/ 1.0 4.0) (* ?x127 ?x127 ?x127 ?x492 ?x783 ?x783)) ?x141 ?x497 ?x480 (* (/ 1.0 8.0) (* ?x127 ?x127 ?x127 ?x783)) (* (- (/ 1.0 4.0)) (* ?x110 ?x114 ?x127 ?x127 ?x783 ?x783)) (* (- (/ 1.0 4.0)) (* ?x48 ?x127 ?x127 ?x783 ?x783)) (* (- (/ 1.0 8.0)) (* ?x110 ?x114 ?x127 ?x127 ?x127)) (* (/ 1.0 8.0) (* ?x127 ?x127 ?x127 ?x127 ?x492)) (* (- 8.0) (* ?x127 ?x492 ?x492 ?x492 ?x492)) (* (/ 1.0 4.0) (* ?x127 ?x127 ?x783 ?x783 ?x783)) (* (/ 1.0 2.0) (* ?x127 ?x127 ?x492 ?x783 ?x783 ?x783)) (* (- (/ 1.0 2.0)) (* ?x48 ?x127 ?x127 ?x492 ?x783 ?x783)) (* (- (/ 1.0 2.0)) (* ?x110 ?x114 ?x127 ?x127 ?x492 ?x783 ?x783)) (* (/ 1.0 2.0) (* ?x127 ?x127 ?x127 ?x492 ?x492 ?x783 ?x783)) (* 8.0 (* ?x48 ?x492 ?x492 ?x492)) (* 8.0 (* ?x110 ?x114 ?x492 ?x492 ?x492)) (* (/ 1.0 2.0) (* ?x127 ?x783 ?x783 ?x783)) (* (- (/ 1.0 2.0)) (* ?x48 ?x127 ?x783 ?x783)) (* (- (/ 1.0 2.0)) (* ?x110 ?x114 ?x127 ?x783 ?x783)))))
 (let (($x371 (= ?x455 0.0)))
 (let (($x761 (or (not $x371) $x262)))
 (let (($x208 (and $x590 $x761)))
 (let ((?x512 (* (/ 1.0 2.0) (* ?x492 ?x783 ?x783 ?x127 ?x127))))
 (let ((?x117 (+ (- (/ 1.0 8.0)) ?x334 ?x644 ?x150 (* ?x492 ?x492 ?x783 ?x127 ?x127) ?x512 (* (- 2.0) (* ?x492 ?x492 ?x783 ?x127)) (* (- 1.0) (* ?x492 ?x783 ?x783 ?x127)) ?x541 (* (- 1.0) (* ?x492 ?x492 ?x492 ?x127)) ?x544 ?x180 (* (/ 1.0 4.0) (* ?x492 ?x492 ?x127 ?x127)) (* (/ 1.0 2.0) (* ?x492 ?x492 ?x492 ?x127 ?x127)) (* (/ 1.0 2.0) (* ?x492 ?x783 ?x127 ?x127)) ?x325 (* (/ 1.0 4.0) (* ?x783 ?x783 ?x127 ?x127)) ?x326 ?x567)))
 (let (($x564 (= (* (+ ?x783 (* (- 1.0) ?x48) (* (- 1.0) ?x115) (* ?x492 ?x127)) ?x117) 0.0)))
 (let ((?x303 (+ ?x512 (* (/ 1.0 2.0) (* ?x492 ?x783 ?x783 ?x783 ?x127 ?x127)) (* (- (/ 1.0 2.0)) (* ?x492 ?x783 ?x783 ?x48 ?x127 ?x127)) (* (- (/ 1.0 2.0)) (* ?x492 ?x783 ?x783 ?x127 ?x127 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x492 ?x492 ?x783 ?x783 ?x127 ?x127 ?x127)) ?x497 (* 8.0 (* ?x492 ?x492 ?x492 ?x48)) (* 8.0 (* ?x492 ?x492 ?x492 ?x110 ?x114)) (* (- 8.0) (* ?x492 ?x492 ?x492 ?x492 ?x127)) (* (/ 1.0 2.0) (* ?x783 ?x783 ?x783 ?x127)) (* (- (/ 1.0 2.0)) (* ?x783 ?x783 ?x48 ?x127)) (* (- (/ 1.0 2.0)) (* ?x783 ?x783 ?x127 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x783 ?x783 ?x783 ?x127 ?x127)) (* (- (/ 1.0 4.0)) (* ?x783 ?x783 ?x48 ?x127 ?x127)) (* (- (/ 1.0 4.0)) (* ?x783 ?x783 ?x127 ?x127 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x492 ?x783 ?x783 ?x127 ?x127 ?x127)) (* (/ 1.0 8.0) (* ?x783 ?x127 ?x127 ?x127)) ?x141 (* (- (/ 1.0 8.0)) (* ?x127 ?x127 ?x127 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x492 ?x127 ?x127 ?x127 ?x127)))))
 (let (($x119 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x88)) 0) (or (not (= ?x303 0.0)) (not $x564)))))
 (let (($x754 (exists ((x Int) (y Int) (z Int) )(! (let ((?x518 (* (/ 1.0 8.0) (* (to_real y) (to_real y) (to_real y)))))
 (let ((?x466 (* (/ 1.0 4.0) (* (to_real z) (to_real z) (to_real y) (to_real y)))))
 (let ((?x367 (* (- (/ 1.0 2.0)) (* (to_real x) (to_real z)))))
 (let ((?x474 (* (/ 1.0 2.0) (* (to_real x) (to_real z) (to_real y) (to_real y)))))
 (let ((?x64 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x434 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x64 ?x64))))
 (let ((?x397 (* (/ 1.0 4.0) (* ?x43 ?x43 ?x64 ?x64))))
 (let ((?x537 (* (- (/ 1.0 4.0)) (* (to_real z) (to_real z)))))
 (let ((?x536 (* (- (/ 1.0 4.0)) (* ?x43 ?x43))))
 (let ((?x431 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x64))))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x843 (* (- (/ 15.0 2.0)) ?x281)))
 (let ((?x424 (* (- 1.0) (* ?x43 (to_real z) (to_real z) ?x64))))
 (let ((?x362 (* (- 2.0) (* ?x43 ?x43 (to_real z) ?x64))))
 (let ((?x186 (* (/ 1.0 2.0) (* ?x43 (to_real z) (to_real z) ?x64 ?x64))))
 (let ((?x46 (to_real z)))
 (let ((?x145 (* ?x43 ?x43 ?x46 ?x64 ?x64)))
 (let ((?x411 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46))))
 (let ((?x99 (* ?x43 ?x43 ?x46)))
 (let ((?x698 (+ (- (/ 1.0 8.0)) (* (/ 3.0 8.0) ?x64) ?x99 ?x411 ?x145 ?x186 ?x362 ?x424 ?x843 ?x431 ?x536 ?x537 ?x397 ?x434 ?x474 ?x367 ?x466 (* (- (/ 3.0 8.0)) (* ?x64 ?x64)) ?x518)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x534 (+ ?x46 ?x201 ?x121 (* ?x43 ?x64))))
 (let ((?x765 (+ ?x186 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x110 ?x114)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x64)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x48 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x46 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x48 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x64 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x43 ?x64 ?x64 ?x64 ?x64)))))
 (let (($x292 (not (= ?x765 0.0))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x116 (or $x292 (not (= (* ?x534 ?x698) 0.0))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x168 (exists ((x Int) (y Int) (z Int) )(! (let ((?x518 (* (/ 1.0 8.0) (* (to_real y) (to_real y) (to_real y)))))
 (let ((?x64 (to_real y)))
 (let ((?x509 (* ?x64 ?x64)))
 (let ((?x525 (* (- (/ 1.0 4.0)) ?x509)))
 (let ((?x495 (* (- (/ 1.0 2.0)) (* (* (/ 1.0 2.0) ?x64) (* (/ 1.0 2.0) ?x64)))))
 (let ((?x489 (* (- (/ 1.0 2.0)) (* (* (/ 1.0 2.0) ?x64) (- (/ 1.0 2.0))))))
 (let ((?x466 (* (/ 1.0 4.0) (* (to_real z) (to_real z) ?x64 ?x64))))
 (let ((?x367 (* (- (/ 1.0 2.0)) (* (to_real x) (to_real z)))))
 (let ((?x474 (* (/ 1.0 2.0) (* (to_real x) (to_real z) ?x64 ?x64))))
 (let ((?x434 (* (/ 1.0 2.0) (* (to_real x) (to_real x) (to_real x) ?x64 ?x64))))
 (let ((?x397 (* (/ 1.0 4.0) (* (to_real x) (to_real x) ?x64 ?x64))))
 (let ((?x537 (* (- (/ 1.0 4.0)) (* (to_real z) (to_real z)))))
 (let ((?x536 (* (- (/ 1.0 4.0)) (* (to_real x) (to_real x)))))
 (let ((?x431 (* (- 1.0) (* (to_real x) (to_real x) (to_real x) ?x64))))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x843 (* (- (/ 15.0 2.0)) ?x281)))
 (let ((?x424 (* (- 1.0) (* ?x43 (to_real z) (to_real z) ?x64))))
 (let ((?x362 (* (- 2.0) (* ?x43 ?x43 (to_real z) ?x64))))
 (let ((?x186 (* (/ 1.0 2.0) (* ?x43 (to_real z) (to_real z) ?x64 ?x64))))
 (let ((?x46 (to_real z)))
 (let ((?x145 (* ?x43 ?x43 ?x46 ?x64 ?x64)))
 (let ((?x411 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46))))
 (let ((?x99 (* ?x43 ?x43 ?x46)))
 (let ((?x524 (* (/ 1.0 4.0) ?x64)))
 (let ((?x844 (+ (- (/ 1.0 8.0)) ?x524 ?x99 ?x411 ?x145 ?x186 ?x362 ?x424 ?x843 ?x431 ?x536 ?x537 ?x397 ?x434 ?x474 ?x367 ?x466 ?x489 ?x495 ?x525 ?x518)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x534 (+ ?x46 ?x201 ?x121 (* ?x43 ?x64))))
 (let ((?x765 (+ ?x186 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x110 ?x114)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x64)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x48 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x46 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x48 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x64 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x43 ?x64 ?x64 ?x64 ?x64)))))
 (let (($x292 (not (= ?x765 0.0))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x116 (or $x292 (not (= (* ?x534 ?x844) 0.0)))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x464 (lambda ((x Int) (y Int) (z Int) )(let ((?x518 (* (/ 1.0 8.0) (* (to_real y) (to_real y) (to_real y)))))
 (let ((?x466 (* (/ 1.0 4.0) (* (to_real z) (to_real z) (to_real y) (to_real y)))))
 (let ((?x367 (* (- (/ 1.0 2.0)) (* (to_real x) (to_real z)))))
 (let ((?x474 (* (/ 1.0 2.0) (* (to_real x) (to_real z) (to_real y) (to_real y)))))
 (let ((?x64 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x434 (* (/ 1.0 2.0) (* ?x43 ?x43 ?x43 ?x64 ?x64))))
 (let ((?x397 (* (/ 1.0 4.0) (* ?x43 ?x43 ?x64 ?x64))))
 (let ((?x537 (* (- (/ 1.0 4.0)) (* (to_real z) (to_real z)))))
 (let ((?x536 (* (- (/ 1.0 4.0)) (* ?x43 ?x43))))
 (let ((?x431 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x64))))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x843 (* (- (/ 15.0 2.0)) ?x281)))
 (let ((?x424 (* (- 1.0) (* ?x43 (to_real z) (to_real z) ?x64))))
 (let ((?x362 (* (- 2.0) (* ?x43 ?x43 (to_real z) ?x64))))
 (let ((?x186 (* (/ 1.0 2.0) (* ?x43 (to_real z) (to_real z) ?x64 ?x64))))
 (let ((?x46 (to_real z)))
 (let ((?x145 (* ?x43 ?x43 ?x46 ?x64 ?x64)))
 (let ((?x411 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46))))
 (let ((?x99 (* ?x43 ?x43 ?x46)))
 (let ((?x698 (+ (- (/ 1.0 8.0)) (* (/ 3.0 8.0) ?x64) ?x99 ?x411 ?x145 ?x186 ?x362 ?x424 ?x843 ?x431 ?x536 ?x537 ?x397 ?x434 ?x474 ?x367 ?x466 (* (- (/ 3.0 8.0)) (* ?x64 ?x64)) ?x518)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x534 (+ ?x46 ?x201 ?x121 (* ?x43 ?x64))))
 (let ((?x765 (+ ?x186 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x110 ?x114)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x64)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x48 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x46 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x48 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x64 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x43 ?x64 ?x64 ?x64 ?x64)))))
 (let (($x292 (not (= ?x765 0.0))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x609 (and $x116 (or $x292 (not (= (* ?x534 ?x698) 0.0))))))
 (let ((?x509 (* ?x64 ?x64)))
 (let ((?x525 (* (- (/ 1.0 4.0)) ?x509)))
 (let ((?x495 (* (- (/ 1.0 2.0)) (* (* (/ 1.0 2.0) ?x64) (* (/ 1.0 2.0) ?x64)))))
 (let ((?x489 (* (- (/ 1.0 2.0)) (* (* (/ 1.0 2.0) ?x64) (- (/ 1.0 2.0))))))
 (let ((?x524 (* (/ 1.0 4.0) ?x64)))
 (let ((?x844 (+ (- (/ 1.0 8.0)) ?x524 ?x99 ?x411 ?x145 ?x186 ?x362 ?x424 ?x843 ?x431 ?x536 ?x537 ?x397 ?x434 ?x474 ?x367 ?x466 ?x489 ?x495 ?x525 ?x518)))
 (let (($x871 (and $x116 (or $x292 (not (= (* ?x534 ?x844) 0.0))))))
 (rewrite (= $x871 $x609))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x602 (exists ((x Int) (y Int) (z Int) )(! (let ((?x64 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x64)))
 (let ((?x623 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x653 (+ ?x46 ?x43)))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x295 (* (- 8.0) ?x281)))
 (let ((?x742 (+ (* 2.0 (* ?x43 ?x653 ?x653 ?x623 ?x623)) ?x295 (* ?x653 ?x653 ?x623) (* ?x653 ?x653 ?x623 ?x623) (* ?x623 ?x623 ?x623))))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let (($x664 (= (* (+ ?x121 (* 2.0 (* ?x43 ?x623)) ?x46 ?x43 ?x201) ?x742) 0.0)))
 (let ((?x518 (* (/ 1.0 8.0) (* ?x64 ?x64 ?x64))))
 (let ((?x466 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x64 ?x64))))
 (let ((?x491 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43)) ?x295 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64)) ?x466 ?x518)))
 (let (($x747 (or (not (= (* (+ ?x121 (* ?x64 ?x43) ?x46 ?x201) ?x491) 0.0)) (not $x664))))
 (let (($x627 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x627 $x747)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x582 (lambda ((x Int) (y Int) (z Int) )(let ((?x518 (* (/ 1.0 8.0) (* (to_real y) (to_real y) (to_real y)))))
 (let ((?x64 (to_real y)))
 (let ((?x509 (* ?x64 ?x64)))
 (let ((?x525 (* (- (/ 1.0 4.0)) ?x509)))
 (let ((?x495 (* (- (/ 1.0 2.0)) (* (* (/ 1.0 2.0) ?x64) (* (/ 1.0 2.0) ?x64)))))
 (let ((?x489 (* (- (/ 1.0 2.0)) (* (* (/ 1.0 2.0) ?x64) (- (/ 1.0 2.0))))))
 (let ((?x466 (* (/ 1.0 4.0) (* (to_real z) (to_real z) ?x64 ?x64))))
 (let ((?x367 (* (- (/ 1.0 2.0)) (* (to_real x) (to_real z)))))
 (let ((?x474 (* (/ 1.0 2.0) (* (to_real x) (to_real z) ?x64 ?x64))))
 (let ((?x434 (* (/ 1.0 2.0) (* (to_real x) (to_real x) (to_real x) ?x64 ?x64))))
 (let ((?x397 (* (/ 1.0 4.0) (* (to_real x) (to_real x) ?x64 ?x64))))
 (let ((?x537 (* (- (/ 1.0 4.0)) (* (to_real z) (to_real z)))))
 (let ((?x536 (* (- (/ 1.0 4.0)) (* (to_real x) (to_real x)))))
 (let ((?x431 (* (- 1.0) (* (to_real x) (to_real x) (to_real x) ?x64))))
 (let ((?x43 (to_real x)))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x843 (* (- (/ 15.0 2.0)) ?x281)))
 (let ((?x424 (* (- 1.0) (* ?x43 (to_real z) (to_real z) ?x64))))
 (let ((?x362 (* (- 2.0) (* ?x43 ?x43 (to_real z) ?x64))))
 (let ((?x186 (* (/ 1.0 2.0) (* ?x43 (to_real z) (to_real z) ?x64 ?x64))))
 (let ((?x46 (to_real z)))
 (let ((?x145 (* ?x43 ?x43 ?x46 ?x64 ?x64)))
 (let ((?x411 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46))))
 (let ((?x99 (* ?x43 ?x43 ?x46)))
 (let ((?x524 (* (/ 1.0 4.0) ?x64)))
 (let ((?x844 (+ (- (/ 1.0 8.0)) ?x524 ?x99 ?x411 ?x145 ?x186 ?x362 ?x424 ?x843 ?x431 ?x536 ?x537 ?x397 ?x434 ?x474 ?x367 ?x466 ?x489 ?x495 ?x525 ?x518)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x534 (+ ?x46 ?x201 ?x121 (* ?x43 ?x64))))
 (let ((?x765 (+ ?x186 (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x110 ?x114)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x64)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x48 ?x64)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x48 ?x64 ?x64)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x46 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x48 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x64 ?x64 ?x64 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x43 ?x64 ?x64 ?x64 ?x64)))))
 (let (($x292 (not (= ?x765 0.0))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x871 (and $x116 (or $x292 (not (= (* ?x534 ?x844) 0.0))))))
 (let ((?x166 (* (/ 1.0 2.0) ?x64)))
 (let ((?x623 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x295 (* (- 8.0) ?x281)))
 (let ((?x742 (+ (* 2.0 (* ?x43 (+ ?x46 ?x43) (+ ?x46 ?x43) ?x623 ?x623)) ?x295 (* (+ ?x46 ?x43) (+ ?x46 ?x43) ?x623) (* (+ ?x46 ?x43) (+ ?x46 ?x43) ?x623 ?x623) (* ?x623 ?x623 ?x623))))
 (let (($x664 (= (* (+ ?x121 (* 2.0 (* ?x43 ?x623)) ?x46 ?x43 ?x201) ?x742) 0.0)))
 (let ((?x491 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43)) ?x295 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64)) ?x466 ?x518)))
 (let (($x747 (or (not (= (* (+ ?x121 (* ?x64 ?x43) ?x46 ?x201) ?x491) 0.0)) (not $x664))))
 (let (($x627 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x617 (and $x627 $x747)))
 (rewrite (= $x617 $x871)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x750 (exists ((x Int) (y Int) (z Int) )(! (let ((?x64 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x64)))
 (let ((?x623 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x653 (+ ?x46 ?x43)))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x295 (* (- 8.0) ?x281)))
 (let ((?x742 (+ (* 2.0 (* ?x43 ?x653 ?x653 ?x623 ?x623)) ?x295 (* ?x653 ?x653 ?x623) (* ?x653 ?x653 ?x623 ?x623) (* ?x623 ?x623 ?x623))))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let (($x664 (= (* (+ ?x121 (* 2.0 (* ?x43 ?x623)) ?x46 ?x43 ?x201) ?x742) 0.0)))
 (let ((?x518 (* (/ 1.0 8.0) (* ?x64 ?x64 ?x64))))
 (let ((?x466 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x64 ?x64))))
 (let ((?x491 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43)) ?x295 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64)) ?x466 ?x518)))
 (let (($x747 (or (not (= (* (+ ?x121 (* ?x64 ?x43) ?x46 ?x201) ?x491) 0.0)) (not $x664))))
 (let (($x169 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x169 $x747)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x571 (lambda ((x Int) (y Int) (z Int) )(let ((?x64 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x64)))
 (let ((?x623 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x653 (+ ?x46 ?x43)))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x295 (* (- 8.0) ?x281)))
 (let ((?x742 (+ (* 2.0 (* ?x43 ?x653 ?x653 ?x623 ?x623)) ?x295 (* ?x653 ?x653 ?x623) (* ?x653 ?x653 ?x623 ?x623) (* ?x623 ?x623 ?x623))))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let (($x664 (= (* (+ ?x121 (* 2.0 (* ?x43 ?x623)) ?x46 ?x43 ?x201) ?x742) 0.0)))
 (let ((?x518 (* (/ 1.0 8.0) (* ?x64 ?x64 ?x64))))
 (let ((?x466 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x64 ?x64))))
 (let ((?x491 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43)) ?x295 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64)) ?x466 ?x518)))
 (let (($x747 (or (not (= (* (+ ?x121 (* ?x64 ?x43) ?x46 ?x201) ?x491) 0.0)) (not $x664))))
 (let (($x627 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x617 (and $x627 $x747)))
 (let (($x169 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x646 (and $x169 $x747)))
 (rewrite (= $x646 $x617)))))))))))))))))))))))))))
 ))
 (let (($x80 (exists ((x Int) (y Int) (z Int) )(! (let ((?x61 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x64 (to_real y)))
 (let ((?x65 (/ ?x64 ?x41)))
 (let ((?x54 (to_real (* 2 x 2 x 2 x))))
 (let ((?x70 (- (* ?x41 (to_real x) ?x65 ?x65 (to_real z) (to_real z)) ?x54)))
 (let ((?x74 (+ ?x70 (* ?x65 (to_real z) (to_real z)) (* ?x65 ?x65 (to_real z) (to_real z)) (* ?x65 ?x65 ?x65))))
 (let ((?x48 (to_real z00)))
 (let ((?x46 (to_real z)))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x76 (= (* (- (+ ?x45 (* ?x41 (to_real x) ?x65) ?x46) ?x48) ?x74) ?x61)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x43 (to_real x)))
 (let ((?x59 (+ (- (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51) ?x54) (* ?x42 ?x51 ?x51) (* ?x42 ?x42 ?x51 ?x51) (* ?x42 ?x42 ?x42))))
 (let (($x63 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x59) ?x61))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x63 (not $x76)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x666 (lambda ((x Int) (y Int) (z Int) )(let ((?x64 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x64)))
 (let ((?x623 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x653 (+ ?x46 ?x43)))
 (let ((?x281 (* ?x43 ?x43 ?x43)))
 (let ((?x295 (* (- 8.0) ?x281)))
 (let ((?x742 (+ (* 2.0 (* ?x43 ?x653 ?x653 ?x623 ?x623)) ?x295 (* ?x653 ?x653 ?x623) (* ?x653 ?x653 ?x623 ?x623) (* ?x623 ?x623 ?x623))))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let (($x664 (= (* (+ ?x121 (* 2.0 (* ?x43 ?x623)) ?x46 ?x43 ?x201) ?x742) 0.0)))
 (let ((?x518 (* (/ 1.0 8.0) (* ?x64 ?x64 ?x64))))
 (let ((?x466 (* (/ 1.0 4.0) (* ?x46 ?x46 ?x64 ?x64))))
 (let ((?x491 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64 ?x64 ?x43)) ?x295 (* (/ 1.0 2.0) (* ?x46 ?x46 ?x64)) ?x466 ?x518)))
 (let (($x747 (or (not (= (* (+ ?x121 (* ?x64 ?x43) ?x46 ?x201) ?x491) 0.0)) (not $x664))))
 (let (($x169 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x646 (and $x169 $x747)))
 (let ((?x61 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x65 (/ ?x64 ?x41)))
 (let ((?x54 (to_real (* 2 x 2 x 2 x))))
 (let ((?x74 (+ (- (* ?x41 ?x43 ?x65 ?x65 ?x46 ?x46) ?x54) (* ?x65 ?x46 ?x46) (* ?x65 ?x65 ?x46 ?x46) (* ?x65 ?x65 ?x65))))
 (let ((?x68 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x65) ?x46) ?x48)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x59 (+ (- (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51) ?x54) (* ?x42 ?x51 ?x51) (* ?x42 ?x42 ?x51 ?x51) (* ?x42 ?x42 ?x42))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x63 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x59) ?x61))))
 (let (($x79 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x63 (not (= (* ?x68 ?x74) ?x61))))))
 (rewrite (= $x79 $x646))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x725 (mp (mp @x81 (quant-intro (proof-bind ?x666) (= $x80 $x750)) $x750) (rewrite (= $x750 $x750)) $x750)))
 (let ((@x487 (mp (mp @x725 (quant-intro (proof-bind ?x571) (= $x750 $x602)) $x602) (quant-intro (proof-bind ?x582) (= $x602 $x168)) $x168)))
 (let ((@x352 (mp~ (mp @x487 (quant-intro (proof-bind ?x464) (= $x168 $x754)) $x754) (sk (~ $x754 $x119)) $x119)))
 (let ((@x393 (mp @x352 (rewrite (= $x119 $x208)) $x208)))
 (let ((@x149 (mp (and-elim @x393 $x590) @x98 $x774)))
 (let ((@x667 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x774) $x553)) @x149 $x553)))
 (let ((@x740 ((_ th-lemma arith) @x667 (hypothesis (not $x444)) (hypothesis $x215) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x570) $x198)) @x94 $x198) false)))
 (let ((@x507 (unit-resolution (lemma @x740 (or (not $x215) $x444)) @x600 $x444)))
 (let (($x591 (<= ?x260 0.0)))
 (let (($x379 (not $x591)))
 (let (($x373 (>= ?x260 0.0)))
 (let (($x504 (not $x373)))
 (let ((@x679 (hypothesis $x504)))
 (let (($x128 (not $x577)))
 (let ((@x139 (hypothesis $x128)))
 (let (($x421 (<= ?x425 0.0)))
 (let (($x192 (<= ?x610 0.0)))
 (let (($x569 (>= ?x793 0.0)))
 (let (($x203 (= 0.0 ?x793)))
 (let ((@x606 (symm (commutativity (= $x203 (= ?x793 0.0))) (= (= ?x793 0.0) $x203))))
 (let ((@x696 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x203) $x569)) (mp ((_ th-lemma arith) (= ?x793 0.0)) @x606 $x203) $x569)))
 (let (($x481 (<= ?x548 0)))
 (let ((@x688 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x774) $x481)) @x149 $x481)))
 (let ((@x689 ((_ th-lemma arith) @x688 (hypothesis (not $x421)) @x696 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x570) $x192)) @x94 $x192) false)))
 (let ((@x339 (lemma @x689 $x421)))
 (let ((@x146 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith) (or (not $x421) $x346 $x373)) @x679 @x339 $x346) @x139 false)))
 (let ((@x511 (unit-resolution ((_ th-lemma arith) (or (not $x444) $x672 $x373)) @x679 @x507 (hypothesis $x508) false)))
 (let ((@x282 ((_ th-lemma arith) (or $x508 $x645))))
 (let ((@x283 (unit-resolution @x282 (unit-resolution (lemma @x511 (or $x672 $x373)) @x679 $x672) $x645)))
 (let (($x629 (= ?x575 0.0)))
 (let (($x768 (not $x629)))
 (let (($x552 (= 0.0 ?x455)))
 (let (($x354 (<= ?x455 0.0)))
 (let ((@x272 (unit-resolution ((_ th-lemma arith) (or $x354 (not $x481) (not $x553))) @x688 @x667 (hypothesis (not $x354)) false)))
 (let (($x551 (>= ?x455 0.0)))
 (let ((@x690 (unit-resolution ((_ th-lemma arith) (or $x551 (not $x481) (not $x553))) @x688 @x667 (hypothesis (not $x551)) false)))
 (let ((@x91 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x552 (not $x354) (not $x551))) (lemma @x690 $x551) (or $x552 (not $x354)))))
 (let ((@x274 (mp (unit-resolution @x91 (lemma @x272 $x354) $x552) (commutativity (= $x552 $x371)) $x371)))
 (let ((@x275 (unit-resolution (and-elim @x393 $x761) @x274 $x262)))
 (let ((@x276 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x768 $x640)) @x275 $x768) (symm (hypothesis (= 0.0 ?x575)) $x629) false)))
 (let ((@x155 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x575) $x128 $x347)) (lemma @x276 (not (= 0.0 ?x575))) (or $x128 $x347))))
 (let ((@x157 (unit-resolution @x155 @x283 (unit-resolution (lemma @x146 (or $x577 $x373)) @x679 $x577) false)))
 (let (($x550 (= 0.0 ?x260)))
 (let (($x815 (not $x550)))
 (let ((@x806 (monotonicity (symm (commutativity (= $x550 $x640)) (= $x640 $x550)) (= $x262 $x815))))
 (let ((@x819 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x550 $x379 $x504)) (mp @x275 @x806 $x815) (or $x379 $x504))))
 (let ((@x807 (unit-resolution @x819 (lemma @x157 $x373) $x379)))
 (let ((@x822 (unit-resolution ((_ th-lemma arith) (or (not $x444) $x346 $x591)) @x807 @x507 (hypothesis (not $x346)) false)))
 (let ((@x824 (unit-resolution (lemma ((_ th-lemma arith) (hypothesis $x346) @x139 false) (or (not $x346) $x577)) (lemma @x822 $x346) $x577)))
 (unit-resolution ((_ th-lemma arith) (or (not $x421) $x672 $x591)) @x807 @x339 (unit-resolution @x282 (unit-resolution @x155 @x824 $x347) $x508) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      38
 :arith-eq-adapter               46
 :arith-bound-propagations-cheap 44
 :arith-bound-propagations-lp    4
 :arith-conflicts                110
 :arith-diseq                    58
 :arith-gcd-calls                5
 :arith-grobner-calls            6
 :arith-grobner-conflicts        3
 :arith-horner-calls             6
 :arith-lower                    74
 :arith-make-feasible            57
 :arith-max-columns              75
 :arith-max-rows                 16
 :arith-nla-explanations         59
 :arith-nla-lemmas               105
 :arith-patches                  5
 :arith-patches-success          5
 :arith-propagations             44
 :arith-upper                    92
 :conflicts                      15
 :decisions                      120
 :del-clause                     137
 :final-checks                   42
 :max-memory                     4.27
 :memory                         3.18
 :mk-bool-var                    251
 :mk-clause                      203
 :num-allocs                     2476241
 :num-checks                     1
 :propagations                   156
 :rlimit-count                   7792
 :time                           0.02
 :total-time                     0.02)
