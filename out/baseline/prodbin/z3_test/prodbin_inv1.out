unsat
((set-logic NRA)
(proof
(let (($x153 (exists ((x Real) (y Real) )(! (let ((?x147 (* y x)))
 (let ((?x149 (* (- 1.0) ?x147)))
 (let ((?x130 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)))
 (let ((?x144 (* 2.0 ?x130)))
 (let ((?x150 (+ ?x144 ?x149 x)))
 (let (($x151 (= ?x150 0.0)))
 (not $x151))))))) :qid k!27))
 ))
 (let (($x199 (exists ((x Real) (y Real) )(! false :qid k!27))
 ))
 (let ((?x200 (lambda ((x Real) (y Real) )(let ((?x147 (* y x)))
 (let ((?x149 (* (- 1.0) ?x147)))
 (let ((?x130 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)))
 (let ((?x144 (* 2.0 ?x130)))
 (let ((?x150 (+ ?x144 ?x149 x)))
 (let (($x151 (= ?x150 0.0)))
 (let (($x152 (not $x151)))
 (let ((?x184 (+ (* (- 1.0) x) ?x147)))
 (let ((?x178 (+ (* 2.0 (* (- (/ 1.0 2.0)) x)) (* 2.0 (* (/ 1.0 2.0) ?x147)))))
 (let ((?x163 (* (/ 1.0 2.0) ?x147)))
 (let ((?x168 (* (- (/ 1.0 2.0)) x)))
 (let ((?x166 (+ ?x168 ?x163)))
 (let ((?x159 (+ ?x168 (* (* (/ 1.0 2.0) y) x))))
 (let ((@x165 (trans (rewrite (= ?x130 ?x159)) (rewrite (= ?x159 ?x166)) (= ?x130 ?x166))))
 (let ((@x182 (trans (monotonicity @x165 (= ?x144 (* 2.0 ?x166))) (rewrite (= (* 2.0 ?x166) ?x178)) (= ?x144 ?x178))))
 (let ((@x186 (monotonicity (trans @x182 (rewrite (= ?x178 ?x184)) (= ?x144 ?x184)) (= ?x150 (+ ?x184 ?x149 x)))))
 (let ((@x192 (monotonicity (trans @x186 (rewrite (= (+ ?x184 ?x149 x) 0.0)) $x151) (= $x151 (= 0.0 0.0)))))
 (let ((@x196 (monotonicity (trans @x192 (rewrite (= (= 0.0 0.0) true)) (= $x151 true)) (= $x152 (not true)))))
 (trans @x196 (rewrite (= (not true) false)) (= $x152 false)))))))))))))))))))))
 ))
 (let ((@x207 (trans (quant-intro (proof-bind ?x200) (= $x153 $x199)) (elim-unused (= $x199 false)) (= $x153 false))))
 (let (($x137 (exists ((x Real) (y Real) (z Real) )(! (let ((?x78 (* (- 1.0) z00)))
 (let ((?x59 (* (- 1.0) (* x00 y00))))
 (let ((?x86 (+ ?x59 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x78)))
 (let (($x106 (or (not (= (+ ?x59 (* y x) z ?x78) 0.0)) (not (= ?x86 0.0)))))
 (let (($x65 (= (+ ?x59 (* y x) z ?x78) 0.0)))
 (and $x65 $x106)))))) :qid k!27))
 ))
 (let (($x50 (exists ((x Real) (y Real) (z Real) )(! (let ((?x45 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x27 (* (- 1.0) x00 y00)))
 (let ((?x39 (- (+ ?x27 (* 2.0 x (/ (- y 1.0) 2.0)) z x) z00)))
 (and (= (- (+ ?x27 (* x y) z) z00) 0.0) (or (not (= ?x39 0.0)) (not (= ?x45 0.0))))))) :qid k!27))
 ))
 (let ((?x70 (lambda ((x Real) (y Real) (z Real) )(let ((?x78 (* (- 1.0) z00)))
 (let ((?x59 (* (- 1.0) (* x00 y00))))
 (let ((?x86 (+ ?x59 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x78)))
 (let (($x106 (or (not (= (+ ?x59 (* y x) z ?x78) 0.0)) (not (= ?x86 0.0)))))
 (let (($x65 (= (+ ?x59 (* y x) z ?x78) 0.0)))
 (let (($x85 (and $x65 $x106)))
 (let ((?x45 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x27 (* (- 1.0) x00 y00)))
 (let ((?x39 (- (+ ?x27 (* 2.0 x (/ (- y 1.0) 2.0)) z x) z00)))
 (let (($x49 (and (= (- (+ ?x27 (* x y) z) z00) 0.0) (or (not (= ?x39 0.0)) (not (= ?x45 0.0))))))
 (rewrite (= $x49 $x85)))))))))))))
 ))
 (let ((@x51 (asserted $x50)))
 (let ((@x57 (mp (mp @x51 (quant-intro (proof-bind ?x70) (= $x50 $x137)) $x137) (rewrite (= $x137 $x153)) $x153)))
 (mp @x57 @x207 false))))))))))))

(:max-memory   17.54
 :memory       17.26
 :num-allocs   49687
 :num-checks   1
 :rlimit-count 403
 :time         0.00
 :total-time   0.01)
