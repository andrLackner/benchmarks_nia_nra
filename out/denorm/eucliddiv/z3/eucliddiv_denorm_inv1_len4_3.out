unsat
((set-logic NIA)
(proof
(let (($x55 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x48 (* ?x44 ?x44)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x44 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (+ ?x45 1 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x53))))))))))))))))) :qid k!29))
 ))
 (let (($x299 (= $x55 false)))
 (let (($x292 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x298 (elim-unused (= $x292 false))))
 (let (($x295 (= $x55 $x292)))
 (let ((?x366 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x48 (* ?x44 ?x44)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x44 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (+ ?x45 1 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x54 (and $x33 $x41 $x53)))
 (let (($x290 (= $x54 false)))
 (let (($x329 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x84 (= (+ (* (- 1) y00) y) 0)))
 (let (($x360 (and $x84 $x329 false)))
 (let (($x283 (= $x53 false)))
 (let ((@x282 (rewrite (= (or false) false))))
 (let (($x278 (or false)))
 (let (($x279 (= $x53 $x278)))
 (let (($x276 (= $x52 false)))
 (let ((@x275 (rewrite (= (not true) false))))
 (let (($x271 (not true)))
 (let (($x272 (= $x52 $x271)))
 (let (($x269 (= $x51 true)))
 (let ((@x268 (rewrite (= (= 0 0) true))))
 (let (($x264 (= 0 0)))
 (let (($x265 (= $x51 $x264)))
 (let ((?x60 (* (- 1) y00)))
 (let ((?x82 (+ r ?x60)))
 (let ((?x193 (* ?x82 ?x82)))
 (let ((?x337 (* (- 1) ?x193)))
 (let ((?x79 (+ 1 q)))
 (let ((?x310 (* y00 y00 ?x79 ?x82)))
 (let ((?x302 (* (- 1) (* y00 y00 y00 ?x79 ?x79 ?x79 ?x82 ?x82))))
 (let ((?x343 (+ 1 ?x302 ?x310 ?x337)))
 (let ((?x348 (* 0 ?x343)))
 (let ((@x340 (rewrite (= (- (+ 1 ?x302 ?x310) ?x193) (+ (+ 1 ?x302 ?x310) ?x337)))))
 (let ((@x87 (rewrite (= ?x44 ?x82))))
 (let ((@x81 (rewrite (= ?x43 ?x79))))
 (let ((@x166 (monotonicity @x81 @x87 (= ?x46 (* ?x79 ?x82 y00 y00)))))
 (let ((@x317 (trans @x166 (rewrite (= (* ?x79 ?x82 y00 y00) ?x310)) (= ?x46 ?x310))))
 (let ((@x305 (rewrite (= (* (- 1) ?x79 ?x79 ?x79 ?x82 ?x82 y00 y00 y00) ?x302))))
 (let ((@x90 (monotonicity (rewrite (= ?x28 (- 1))) @x81 @x81 @x81 @x87 @x87 (= ?x45 (* (- 1) ?x79 ?x79 ?x79 ?x82 ?x82 y00 y00 y00)))))
 (let ((@x323 (monotonicity (trans @x90 @x305 (= ?x45 ?x302)) @x317 (= ?x47 (+ ?x302 1 ?x310)))))
 (let ((@x331 (trans @x323 (rewrite (= (+ ?x302 1 ?x310) (+ 1 ?x302 ?x310))) (= ?x47 (+ 1 ?x302 ?x310)))))
 (let ((@x336 (monotonicity @x331 (rewrite (= ?x48 ?x193)) (= ?x49 (- (+ 1 ?x302 ?x310) ?x193)))))
 (let ((@x347 (trans (trans @x336 @x340 (= ?x49 (+ (+ 1 ?x302 ?x310) ?x337))) (rewrite (= (+ (+ 1 ?x302 ?x310) ?x337) ?x343)) (= ?x49 ?x343))))
 (let ((@x76 (trans (monotonicity (rewrite (= ?x30 ?x60)) (= ?x42 (+ ?x60 y00))) (rewrite (= (+ ?x60 y00) 0)) (= ?x42 0))))
 (let ((@x353 (trans (monotonicity @x76 @x347 (= ?x50 ?x348)) (rewrite (= ?x348 0)) $x51)))
 (let ((@x357 (trans (monotonicity (trans (monotonicity @x353 $x265) @x268 $x269) $x272) @x275 $x276)))
 (let ((@x362 (monotonicity (rewrite (= $x33 $x84)) (rewrite (= $x41 $x329)) (trans (monotonicity @x357 $x279) @x282 $x283) (= $x54 $x360))))
 (trans @x362 (rewrite (= $x360 false)) $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x56 (asserted $x55)))
 (mp @x56 (trans (quant-intro (proof-bind ?x366) $x295) @x298 $x299) false))))))))))

(:max-memory   3.36
 :memory       3.05
 :mk-bool-var  5
 :num-allocs   901858
 :rlimit-count 241
 :time         0.01
 :total-time   0.01)
