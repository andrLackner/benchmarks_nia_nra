unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x291 (+ (* (/ 1.0 2.0) (* (to_real d00) (to_real b!2))) (* (- (/ 1.0 2.0)) (* (to_real b00) (to_real d!1))))))
 (let (($x309 (>= ?x291 0.0)))
 (let ((?x454 (* d00 b!2)))
 (let ((?x458 (+ ?x454 (* (- 1) (* b00 d!1)))))
 (let (($x107 (>= ?x458 0)))
 (let (($x471 (= 0 ?x458)))
 (let ((@x140 (symm (commutativity (= $x471 (= ?x458 0))) (= (= ?x458 0) $x471))))
 (let (($x478 (= ?x458 0)))
 (let ((?x528 (to_real y!0)))
 (let ((?x328 (to_real d!1)))
 (let ((?x327 (to_real a!3)))
 (let ((?x326 (to_real b!2)))
 (let ((?x344 (* (- (/ 1.0 4.0)) (* ?x326 ?x326 ?x326 ?x327 ?x328 ?x528))))
 (let ((?x425 (* (- (/ 1.0 4.0)) (* ?x326 ?x326 ?x328))))
 (let ((?x262 (* (- (/ 1.0 4.0)) (* ?x326 ?x327 ?x328))))
 (let ((?x282 (* (- (/ 1.0 16.0)) (* ?x326 ?x326 ?x327 ?x327 ?x328 ?x328))))
 (let ((?x316 (* (- (/ 1.0 16.0)) (* ?x326 ?x326 ?x326 ?x326 ?x328 ?x328))))
 (let ((?x439 (* (/ 1.0 4.0) (* ?x328 ?x328 ?x528 ?x528))))
 (let ((?x335 (* (- (/ 1.0 8.0)) (* ?x326 ?x326 ?x326 ?x326 ?x328 ?x528))))
 (let ((?x211 (* (/ 1.0 16.0) (* ?x328 ?x328 ?x328 ?x328))))
 (let ((?x410 (* (- (/ 1.0 8.0)) (* ?x326 ?x326 ?x326 ?x327 ?x328 ?x328))))
 (let ((?x186 (* (/ 1.0 4.0) (* ?x328 ?x328 ?x328 ?x528))))
 (let ((?x116 (* (/ 1.0 8.0) (* ?x328 ?x328 ?x328))))
 (let ((?x496 (* (- (/ 1.0 8.0)) (* ?x326 ?x326 ?x327 ?x327 ?x328 ?x528))))
 (let ((?x409 (+ (* (/ 1.0 2.0) (* (to_real b00) ?x328)) (* (- (/ 1.0 2.0)) (* (to_real d00) ?x326)))))
 (let ((?x381 (* ?x409 (+ ?x496 ?x116 ?x186 ?x410 ?x211 ?x335 ?x439 ?x316 ?x282 ?x262 ?x425 ?x344))))
 (let (($x492 (= ?x381 0.0)))
 (let (($x382 (not $x492)))
 (let ((?x518 (+ (* (/ 1.0 16.0) (* (to_real b00) ?x328 ?x328 ?x328 ?x328)) (* (- (/ 1.0 16.0)) (* (to_real b00) ?x326 ?x326 ?x327 ?x327 ?x328 ?x328 ?x528)) (* (/ 1.0 16.0) (* (to_real d00) ?x326 ?x326 ?x326 ?x327 ?x327 ?x328 ?x528)) (* (- (/ 1.0 8.0)) (* (to_real d00) ?x326 ?x328 ?x328 ?x528 ?x528)) (* (/ 1.0 8.0) (* (to_real b00) ?x328 ?x328 ?x328 ?x528 ?x528)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x326 ?x327 ?x328 ?x328)) (* (- (/ 1.0 16.0)) (* (to_real d00) ?x326 ?x328 ?x328 ?x328)) (* (/ 1.0 8.0) (* (to_real d00) ?x326 ?x326 ?x327 ?x328)))))
 (let (($x152 (= ?x518 0.0)))
 (let (($x511 (or (not $x152) $x382)))
 (let ((?x415 (* (- 2) (* b!2 y!0))))
 (let ((?x189 (+ (* d!1 a!3) ?x415 (* (- 1) (* a00 d!1)) (* 2 (* y00 b!2)))))
 (let (($x450 (= ?x189 0)))
 (let ((?x102 (* b00 y00)))
 (let ((?x103 (* (- 2) ?x102)))
 (let ((?x35 (* a00 d00)))
 (let (($x322 (= (+ ?x35 ?x103 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x429 (and $x322 $x478 $x450 $x511)))
 (let ((?x239 (+ (* (- (/ 1.0 4.0)) (* ?x326 ?x328 ?x327)) ?x116 (* (- (/ 1.0 8.0)) (* ?x326 ?x326 ?x328 ?x327 ?x327 ?x528)) ?x425 ?x439 ?x335 ?x316 (* (- (/ 1.0 8.0)) (* ?x326 ?x326 ?x326 ?x328 ?x328 ?x327)) (* (- (/ 1.0 16.0)) (* ?x326 ?x326 ?x328 ?x328 ?x327 ?x327)) (* (- (/ 1.0 4.0)) (* ?x326 ?x326 ?x326 ?x328 ?x327 ?x528)) ?x211 ?x186)))
 (let ((?x283 (+ (* (- (/ 1.0 2.0)) (* ?x326 (to_real d00))) (* (/ 1.0 2.0) (* ?x328 (to_real b00))))))
 (let ((?x269 (+ (* (/ 1.0 8.0) (* ?x326 ?x326 (to_real d00) ?x328 ?x327)) (* (- (/ 1.0 8.0)) (* ?x326 ?x328 ?x328 (to_real b00) ?x327)) (* (- (/ 1.0 16.0)) (* ?x326 (to_real d00) ?x328 ?x328 ?x328)) (* (/ 1.0 16.0) (* ?x328 ?x328 ?x328 ?x328 (to_real b00))) (* (/ 1.0 16.0) (* ?x326 ?x326 ?x326 (to_real d00) ?x328 ?x327 ?x327 ?x528)) (* (- (/ 1.0 16.0)) (* ?x326 ?x326 ?x328 ?x328 (to_real b00) ?x327 ?x327 ?x528)) (* (- (/ 1.0 8.0)) (* ?x326 (to_real d00) ?x328 ?x328 ?x528 ?x528)) (* (/ 1.0 8.0) (* ?x328 ?x328 ?x328 (to_real b00) ?x528 ?x528)))))
 (let ((?x512 (+ (* a!3 d!1) ?x415 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x484 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x103 (* 2 (* y!0 b00))) 0)))
 (let (($x240 (and $x484 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x512 0) (or (not (= ?x269 0.0)) (not (= (* ?x283 ?x239) 0.0))))))
 (let (($x229 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x525 (* (/ 1.0 4.0) (* (to_real d) (to_real d) (to_real d) (to_real y)))))
 (let ((?x531 (* (/ 1.0 16.0) (* (to_real d) (to_real d) (to_real d) (to_real d)))))
 (let ((?x71 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x210 (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62))))
 (let ((?x542 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x67)) ?x210 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x71)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x71 ?x71)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x71)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x71)) ?x531 ?x525)))
 (let ((?x201 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x350 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 (to_real d00) ?x62 ?x67)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 (to_real b00) ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 (to_real d00) ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x62 (to_real b00))) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x67 ?x67 ?x71)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x71)) (* (- (/ 1.0 8.0)) (* ?x56 (to_real d00) ?x62 ?x62 ?x71 ?x71)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 (to_real b00) ?x71 ?x71)))))
 (let ((?x48 (* a d)))
 (let ((?x172 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x102 (* b00 y00)))
 (let ((?x103 (* (- 2) ?x102)))
 (let ((?x35 (* a00 d00)))
 (let (($x135 (= (+ ?x35 (* (- 1) (* a d00)) ?x103 (* 2 (* y b00))) 0)))
 (and $x135 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x172 0) (or (not (= ?x350 0.0)) (not (= (* ?x201 ?x542) 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let (($x221 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x71 (to_real y)))
 (let ((?x507 (+ ?x71 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x380 (+ ?x67 ?x56)))
 (let ((?x210 (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62))))
 (let ((?x242 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x380)) ?x210 (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x380 ?x380 ?x507)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x507 ?x507)))))
 (let ((?x389 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x489 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x67)) ?x210 (* (- (/ 1.0 8.0)) (* ?x71 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x71 ?x71 ?x62 ?x62)))))
 (let (($x445 (or (not (= (* ?x389 ?x489) 0.0)) (not (= (* ?x389 ?x242) 0.0)))))
 (let ((?x362 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x367 (= ?x362 0)))
 (let ((?x255 (* d00 a)))
 (let ((?x258 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x255)))
 (and (= ?x258 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x367 $x445)))))))))))))))) :qid k!33))
 ))
 (let ((?x150 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x525 (* (/ 1.0 4.0) (* (to_real d) (to_real d) (to_real d) (to_real y)))))
 (let ((?x531 (* (/ 1.0 16.0) (* (to_real d) (to_real d) (to_real d) (to_real d)))))
 (let ((?x71 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x210 (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62))))
 (let ((?x542 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x67)) ?x210 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x71)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x71 ?x71)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x71)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x71)) ?x531 ?x525)))
 (let ((?x201 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x350 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 (to_real d00) ?x62 ?x67)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 (to_real b00) ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 (to_real d00) ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x62 (to_real b00))) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x67 ?x67 ?x71)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x71)) (* (- (/ 1.0 8.0)) (* ?x56 (to_real d00) ?x62 ?x62 ?x71 ?x71)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 (to_real b00) ?x71 ?x71)))))
 (let ((?x48 (* a d)))
 (let ((?x172 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x102 (* b00 y00)))
 (let ((?x103 (* (- 2) ?x102)))
 (let ((?x35 (* a00 d00)))
 (let (($x135 (= (+ ?x35 (* (- 1) (* a d00)) ?x103 (* 2 (* y b00))) 0)))
 (let (($x562 (and $x135 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x172 0) (or (not (= ?x350 0.0)) (not (= (* ?x201 ?x542) 0.0))))))
 (let ((?x236 (* (/ 1.0 4.0) (* ?x62 ?x62 (+ ?x71 (* (/ 1.0 2.0) ?x62)) (+ ?x71 (* (/ 1.0 2.0) ?x62))))))
 (let ((?x507 (+ ?x71 (* (/ 1.0 2.0) ?x62))))
 (let ((?x380 (+ ?x67 ?x56)))
 (let ((?x242 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x380)) ?x210 (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x380 ?x380 ?x507)) ?x236)))
 (let ((?x389 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x489 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x67)) ?x210 (* (- (/ 1.0 8.0)) (* ?x71 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x71 ?x71 ?x62 ?x62)))))
 (let (($x445 (or (not (= (* ?x389 ?x489) 0.0)) (not (= (* ?x389 ?x242) 0.0)))))
 (let ((?x362 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x367 (= ?x362 0)))
 (let ((?x255 (* d00 a)))
 (let (($x369 (= (+ (* 2 ?x102) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x255) 0)))
 (let (($x187 (and $x369 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x367 $x445)))
 (rewrite (= $x187 $x562))))))))))))))))))))))))))))))))
 ))
 (let (($x413 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x71 (to_real y)))
 (let ((?x507 (+ ?x71 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x380 (+ ?x67 ?x56)))
 (let ((?x210 (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62))))
 (let ((?x242 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x380)) ?x210 (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x380 ?x380 ?x507)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x507 ?x507)))))
 (let ((?x389 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x489 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x67)) ?x210 (* (- (/ 1.0 8.0)) (* ?x71 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x71 ?x71 ?x62 ?x62)))))
 (let (($x445 (or (not (= (* ?x389 ?x489) 0.0)) (not (= (* ?x389 ?x242) 0.0)))))
 (let ((?x362 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x367 (= ?x362 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x102 (* b00 y00)))
 (let ((?x103 (* (- 2) ?x102)))
 (let (($x265 (= (+ ?x103 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x265 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x367 $x445)))))))))))))))))) :qid k!33))
 ))
 (let ((?x329 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x71 (to_real y)))
 (let ((?x507 (+ ?x71 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x380 (+ ?x67 ?x56)))
 (let ((?x210 (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62))))
 (let ((?x242 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x380)) ?x210 (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x380 ?x380 ?x507)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x507 ?x507)))))
 (let ((?x389 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x489 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x67)) ?x210 (* (- (/ 1.0 8.0)) (* ?x71 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x71 ?x71 ?x62 ?x62)))))
 (let (($x445 (or (not (= (* ?x389 ?x489) 0.0)) (not (= (* ?x389 ?x242) 0.0)))))
 (let ((?x362 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x367 (= ?x362 0)))
 (let ((?x255 (* d00 a)))
 (let ((?x258 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x255)))
 (let (($x187 (and (= ?x258 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x367 $x445)))
 (let ((?x35 (* a00 d00)))
 (let ((?x102 (* b00 y00)))
 (let ((?x103 (* (- 2) ?x102)))
 (let (($x129 (and (= (+ ?x103 ?x35 (* 2 (* b00 y)) (* (- 1) ?x255)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x367 $x445)))
 (rewrite (= $x129 $x187)))))))))))))))))))))))
 ))
 (let (($x94 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x71 (to_real y)))
 (let ((?x84 (+ ?x71 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x81 (to_real (+ a b))))
 (let ((?x86 (- (+ (* (to_real (- 1)) ?x81 ?x58 ?x63) (* ?x63 ?x63 ?x63)) (* ?x81 ?x81 ?x58 ?x58 ?x63 ?x84))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x69 (* ?x63 ?x63 ?x63)))
 (let ((?x73 (- (+ (* (to_real (- 1)) (to_real a) ?x58 ?x63) ?x69) (* (to_real a) (to_real a) ?x58 ?x58 ?x63 ?x71))))
 (let (($x92 (or (not (= (* ?x66 (+ ?x73 (* ?x63 ?x63 ?x71 ?x71))) ?x77)) (not (= (* ?x66 (+ ?x86 (* ?x63 ?x63 ?x84 ?x84))) ?x77)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x92))))))))))))))))))) :qid k!33))
 ))
 (let ((?x430 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x71 (to_real y)))
 (let ((?x507 (+ ?x71 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x380 (+ ?x67 ?x56)))
 (let ((?x210 (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62))))
 (let ((?x242 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x380)) ?x210 (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x380 ?x380 ?x507)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x507 ?x507)))))
 (let ((?x389 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x489 (+ (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x67)) ?x210 (* (- (/ 1.0 8.0)) (* ?x71 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x71 ?x71 ?x62 ?x62)))))
 (let (($x445 (or (not (= (* ?x389 ?x489) 0.0)) (not (= (* ?x389 ?x242) 0.0)))))
 (let ((?x362 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x367 (= ?x362 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x102 (* b00 y00)))
 (let ((?x103 (* (- 2) ?x102)))
 (let (($x265 (= (+ ?x103 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x129 (and $x265 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x367 $x445)))
 (let ((?x77 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x84 (+ ?x71 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x81 (to_real (+ a b))))
 (let ((?x86 (- (+ (* (to_real (- 1)) ?x81 ?x58 ?x63) (* ?x63 ?x63 ?x63)) (* ?x81 ?x81 ?x58 ?x58 ?x63 ?x84))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x73 (- (+ (* (to_real (- 1)) ?x67 ?x58 ?x63) (* ?x63 ?x63 ?x63)) (* ?x67 ?x67 ?x58 ?x58 ?x63 ?x71))))
 (let (($x92 (or (not (= (* ?x66 (+ ?x73 (* ?x63 ?x63 ?x71 ?x71))) ?x77)) (not (= (* ?x66 (+ ?x86 (* ?x63 ?x63 ?x84 ?x84))) ?x77)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x93 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x92)))
 (rewrite (= $x93 $x129))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x95 (asserted $x94)))
 (let ((@x366 (mp (mp @x95 (quant-intro (proof-bind ?x430) (= $x94 $x413)) $x413) (rewrite (= $x413 $x413)) $x413)))
 (let ((@x424 (mp (mp @x366 (quant-intro (proof-bind ?x329) (= $x413 $x221)) $x221) (quant-intro (proof-bind ?x150) (= $x221 $x229)) $x229)))
 (let ((@x407 (mp (mp~ @x424 (sk (~ $x229 $x240)) $x240) (rewrite (= $x240 $x429)) $x429)))
 (let ((@x347 (mp (and-elim @x407 $x478) @x140 $x471)))
 (let ((@x449 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x471) $x107)) @x347 $x107)))
 (let ((?x60 (to_real d00)))
 (let ((?x174 (* ?x60 ?x326)))
 (let ((?x400 (+ ?x174 (* (- 1.0) (to_real ?x454)))))
 (let (($x394 (>= ?x400 0.0)))
 (let (($x395 (= 0.0 ?x400)))
 (let ((@x523 (symm (commutativity (= $x395 (= ?x400 0.0))) (= (= ?x400 0.0) $x395))))
 (let ((@x524 (mp ((_ th-lemma arith) (= ?x400 0.0)) @x523 $x395)))
 (let ((?x64 (to_real b00)))
 (let ((?x173 (* ?x64 ?x328)))
 (let ((?x498 (+ ?x173 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x402 (<= ?x498 0.0)))
 (let (($x392 (= 0.0 ?x498)))
 (let ((@x113 (symm (commutativity (= $x392 (= ?x498 0.0))) (= (= ?x498 0.0) $x392))))
 (let ((@x118 (unit-resolution (hypothesis (not $x392)) (mp ((_ th-lemma arith) (= ?x498 0.0)) @x113 $x392) false)))
 (let ((@x136 (lemma @x118 $x392)))
 (let ((@x358 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x392) $x402)) @x136 $x402)))
 (let ((@x357 ((_ th-lemma arith) @x358 (hypothesis (not $x309)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x395) $x394)) @x524 $x394) @x449 false)))
 (let ((@x356 (lemma @x357 $x309)))
 (let ((?x505 (+ ?x211 ?x335 ?x439 ?x316 ?x282 ?x262 ?x425 ?x344 ?x496 ?x116 ?x186 ?x410)))
 (let (($x256 (<= ?x505 0.0)))
 (let (($x561 (not $x256)))
 (let (($x144 (>= ?x505 0.0)))
 (let (($x289 (<= ?x291 0.0)))
 (let (($x405 (>= ?x498 0.0)))
 (let ((@x568 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x392) $x405)) @x136 $x405)))
 (let (($x406 (<= ?x458 0)))
 (let ((@x339 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x471) $x406)) @x347 $x406)))
 (let (($x393 (<= ?x400 0.0)))
 (let ((@x535 ((_ th-lemma arith triangle-eq) (or (not $x395) $x393))))
 (let ((@x530 ((_ th-lemma arith) (unit-resolution @x535 @x524 $x393) @x339 (hypothesis (not $x289)) (hypothesis $x405) false)))
 (let ((@x569 (unit-resolution (lemma @x530 (or (not $x405) $x289)) @x568 $x289)))
 (let (($x320 (not $x144)))
 (let ((@x323 (hypothesis $x320)))
 (let (($x375 (<= ?x381 0.0)))
 (let (($x695 (not $x375)))
 (let (($x374 (>= ?x381 0.0)))
 (let (($x330 (not $x374)))
 (let ((@x319 (hypothesis $x330)))
 (let (($x372 (= 0.0 ?x381)))
 (let (($x351 (not $x372)))
 (let ((@x485 (mp (hypothesis $x351) (monotonicity (commutativity (= $x372 $x492)) (= $x351 $x382)) $x382)))
 (let (($x544 (= 0.0 ?x505)))
 (let ((@x310 (unit-resolution ((_ th-lemma arith) (or (not $x309) $x144 $x374)) @x319 @x323 @x356 false)))
 (let ((@x570 (unit-resolution ((_ th-lemma arith) (or (not $x289) $x256 $x374)) @x319 (hypothesis $x561) @x569 false)))
 (let ((@x487 ((_ th-lemma arith triangle-eq) (or $x544 $x561 $x320))))
 (let ((@x538 (unit-resolution @x487 (unit-resolution (lemma @x570 (or $x256 $x374)) @x319 $x256) (unit-resolution (lemma @x310 (or $x144 $x374)) @x319 $x144) $x544)))
 (let (($x543 (= ?x505 0.0)))
 (let (($x574 (not $x543)))
 (let ((@x579 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x574 $x492)) (hypothesis $x382) $x574) (symm (hypothesis $x544) $x543) false)))
 (let ((@x582 (lemma @x579 (or (not $x544) $x492))))
 (let ((@x588 (unit-resolution (lemma (unit-resolution @x582 @x538 @x485 false) (or $x374 $x372)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x351 $x374)) @x319 $x351) @x319 false)))
 (let ((@x716 (monotonicity (symm (commutativity (= $x372 $x492)) (= $x492 $x372)) (= $x382 $x351))))
 (let (($x436 (= 0.0 ?x518)))
 (let (($x182 (>= ?x518 0.0)))
 (let ((?x403 (to_real ?x454)))
 (let ((?x595 (+ (* (- 1.0) ?x174) ?x403)))
 (let (($x599 (= 0.0 ?x595)))
 (let (($x600 (<= ?x595 0.0)))
 (let (($x601 (>= ?x595 0.0)))
 (let ((@x704 (unit-resolution @x535 (lemma (unit-resolution (hypothesis (not $x395)) @x524 false) $x395) $x393)))
 (let ((@x644 (lemma ((_ th-lemma arith) (hypothesis (not $x601)) (hypothesis $x393) false) (or (not $x393) $x601))))
 (let ((@x706 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x599 (not $x600) (not $x601))) (unit-resolution @x644 @x704 $x601) (lemma ((_ th-lemma arith) @x568 @x356 (hypothesis (not $x600)) @x339 false) $x600) $x599)))
 (let ((@x665 (hypothesis $x599)))
 (let (($x527 (not $x405)))
 (let (($x660 (not $x600)))
 (let (($x645 (not $x601)))
 (let (($x614 (not $x406)))
 (let (($x613 (not $x107)))
 (let ((@x673 (unit-resolution ((_ th-lemma arith) (or $x613 $x614 $x182 $x645 (not $x402) $x660 $x527)) @x339 @x449 (hypothesis (not $x182)) @x568 @x358 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x599) $x600)) @x665 $x600) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x599) $x601)) @x665 $x601) false)))
 (let (($x110 (<= ?x518 0.0)))
 (let (($x301 (>= ?x189 0)))
 (let (($x232 (= 0 ?x189)))
 (let ((@x624 (mp (and-elim @x407 $x450) (symm (commutativity (= $x232 $x450)) (= $x450 $x232)) $x232)))
 (let (($x333 (<= ?x189 0)))
 (let ((@x631 (unit-resolution ((_ th-lemma arith) (or $x110 (not $x301) (not $x333) $x613 $x614)) @x339 @x449 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x232) $x333)) @x624 $x333) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x232) $x301)) @x624 $x301) (hypothesis (not $x110)) false)))
 (let ((@x701 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x436 (not $x110) (not $x182))) (lemma @x631 $x110) (or $x436 (not $x182)))))
 (let ((@x708 (unit-resolution @x701 (unit-resolution (lemma @x673 (or (not $x599) $x182)) @x706 $x182) $x436)))
 (let ((@x712 (unit-resolution (and-elim @x407 $x511) (mp @x708 (commutativity (= $x436 $x152)) $x152) $x382)))
 (let ((@x718 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x372 $x695 $x330)) (mp @x712 @x716 $x351) (lemma @x588 $x374) $x695)))
 (let ((@x719 (unit-resolution ((_ th-lemma arith) (or (not $x289) $x144 $x375)) @x718 @x323 @x569 false)))
 (let ((@x725 (unit-resolution @x487 (unit-resolution @x582 @x712 (not $x544)) (or $x561 $x320))))
 (unit-resolution ((_ th-lemma arith) (or (not $x309) $x256 $x375)) @x718 (unit-resolution @x725 (lemma @x719 $x144) $x561) @x356 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       47
 :arith-eq-adapter                44
 :arith-bound-propagations-cheap  41
 :arith-bound-propagations-lp     8
 :arith-conflicts                 100
 :arith-diseq                     49
 :arith-gcd-calls                 6
 :arith-grobner-calls             6
 :arith-grobner-conflicts         2
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 287
 :arith-lower                     80
 :arith-make-feasible             67
 :arith-max-columns               72
 :arith-max-rows                  19
 :arith-nla-explanations          76
 :arith-nla-lemmas                96
 :arith-patches                   6
 :arith-patches-success           6
 :arith-propagations              41
 :arith-upper                     67
 :conflicts                       18
 :decisions                       164
 :del-clause                      187
 :final-checks                    43
 :max-memory                      4.55
 :memory                          3.13
 :minimized-lits                  1
 :mk-bool-var                     273
 :mk-clause                       236
 :num-allocs                      3983618
 :num-checks                      1
 :propagations                    173
 :rlimit-count                    7092
 :time                            0.03
 :total-time                      0.03)
