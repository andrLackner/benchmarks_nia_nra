unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x69 (* 2 x!0)))
 (let ((?x296 (* (- 1) r!1)))
 (let ((?x231 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x520 (+ r00 ?x88 ?x104 ?x231 ?x296 ?x69)))
 (let (($x357 (<= ?x520 0)))
 (let (($x294 (= ?x520 0)))
 (let ((?x103 (* 6 (* r!1 r!1 x!0 x!0))))
 (let ((?x100 (* (- 6) (* r!1 r!1 r!1 x!0))))
 (let ((?x541 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x360 (* r!1 x!0 x!0)))
 (let ((?x572 (* 3 ?x360)))
 (let ((?x515 (* (- 2) (* r!1 x!0 x!0 x!0))))
 (let ((?x307 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x235 (* r!1 r!1 x!0)))
 (let ((?x99 (* (- 3) ?x235)))
 (let ((?x222 (* r!1 r!1 r!1)))
 (let ((?x85 (* (- 1) (* r!1 r!1 x!0 x!0 x!0))))
 (let ((?x68 (* 3 (* r!1 r!1 r!1 x!0 x!0))))
 (let ((?x102 (* (- 3) (* r!1 r!1 r!1 r!1 x!0))))
 (let ((?x71 (* 2 (* r!1 r!1 r!1 r!1))))
 (let ((?x66 (+ (- 1) ?x71 ?x102 ?x68 ?x85 ?x222 ?x99 ?x307 ?x296 ?x515 ?x572 ?x541 ?x100 ?x103)))
 (let ((?x105 (* (- 1) x!0)))
 (let ((?x241 (* x!0 x!0)))
 (let ((?x240 (* (- 2) ?x235)))
 (let ((?x111 (* r!1 x!0)))
 (let ((?x234 (* (- 2) ?x111)))
 (let ((?x221 (* (- 2) r!1)))
 (let ((?x391 (* (- 2) ?x231)))
 (let ((?x596 (* (- 1) ?x222)))
 (let ((?x112 (* (- 1) ?x111)))
 (let ((?x192 (* (+ (- 1) ?x112 ?x596 ?x391 ?x221 ?x105) (+ ?x234 ?x222 ?x231 ?x240 ?x241 r!1 ?x105 ?x360) ?x66 ?x520)))
 (let (($x448 (= ?x192 0)))
 (let (($x195 (not $x448)))
 (let (($x184 (and $x294 $x195)))
 (let ((?x70 (+ (- 1) ?x296 ?x222 ?x307 ?x515 ?x85 ?x71 ?x541 ?x99 ?x100 ?x102 ?x572 ?x103 ?x68)))
 (let ((?x108 (* (+ (- 1) ?x221 ?x105 ?x391 ?x112 ?x596) (+ r!1 ?x105 ?x231 ?x234 ?x222 ?x240 ?x360 ?x241) ?x70 (+ ?x296 ?x69 r00 ?x231 ?x88 ?x104))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x313 (and (= (+ r!1 (* (- 2) x!0) ?x119 (* (- 1) ?x231) ?x35 ?x36) 0) (not (= ?x108 0)))))
 (let (($x135 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x251 (* r r r)))
 (let ((?x561 (+ (- 1) ?x67 ?x251 (* (- 1) (* x x x)) (* (- 2) (* r x x x)) (* (- 1) (* r r x x x)) (* 2 (* r r r r)) (* r r r r r) (* (- 3) (* r r x)) (* (- 6) (* r r r x)) (* (- 3) (* r r r r x)) (* 3 (* r x x)) (* 6 (* r r x x)) (* 3 (* r r r x x)))))
 (let ((?x420 (* r x x)))
 (let ((?x232 (* (- 1) x)))
 (let ((?x631 (+ r ?x232 ?x30 (* (- 2) (* r x)) ?x251 (* (- 2) (* r r x)) ?x420 (* x x))))
 (let ((?x287 (* (- 1) ?x251)))
 (let ((?x223 (* r x)))
 (let ((?x224 (* (- 1) ?x223)))
 (let ((?x189 (* (- 2) r)))
 (let (($x591 (= (* (+ (- 1) ?x189 ?x232 (* (- 2) ?x30) ?x224 ?x287) ?x631 ?x561 ?x110) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (and $x122 (not $x591)))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x133 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x267 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x529 (+ x ?x67)))
 (let ((?x144 (+ 1 r)))
 (let ((?x299 (* (+ (* (- 1) (* ?x144 ?x529)) (* (- 1) (* ?x144 ?x144 ?x144))) (+ (* (- 1) x) r (* ?x144 ?x529 ?x529)) (+ (- 1) ?x67 (* (- 1) (* ?x144 ?x144 ?x529 ?x529 ?x529))) ?x267)))
 (let (($x499 (not (= ?x299 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x499)))))))))))))))) :qid k!26))
 ))
 (let ((?x604 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x251 (* r r r)))
 (let ((?x561 (+ (- 1) ?x67 ?x251 (* (- 1) (* x x x)) (* (- 2) (* r x x x)) (* (- 1) (* r r x x x)) (* 2 (* r r r r)) (* r r r r r) (* (- 3) (* r r x)) (* (- 6) (* r r r x)) (* (- 3) (* r r r r x)) (* 3 (* r x x)) (* 6 (* r r x x)) (* 3 (* r r r x x)))))
 (let ((?x420 (* r x x)))
 (let ((?x232 (* (- 1) x)))
 (let ((?x631 (+ r ?x232 ?x30 (* (- 2) (* r x)) ?x251 (* (- 2) (* r r x)) ?x420 (* x x))))
 (let ((?x287 (* (- 1) ?x251)))
 (let ((?x223 (* r x)))
 (let ((?x224 (* (- 1) ?x223)))
 (let ((?x189 (* (- 2) r)))
 (let (($x591 (= (* (+ (- 1) ?x189 ?x232 (* (- 2) ?x30) ?x224 ?x287) ?x631 ?x561 ?x110) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x626 (and $x122 (not $x591))))
 (let ((?x267 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x529 (+ x ?x67)))
 (let ((?x144 (+ 1 r)))
 (let ((?x299 (* (+ (* (- 1) (* ?x144 ?x529)) (* (- 1) (* ?x144 ?x144 ?x144))) (+ ?x232 r (* ?x144 ?x529 ?x529)) (+ (- 1) ?x67 (* (- 1) (* ?x144 ?x144 ?x529 ?x529 ?x529))) ?x267)))
 (let (($x499 (not (= ?x299 0))))
 (let (($x447 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x499)))
 (rewrite (= $x447 $x626))))))))))))))))))))))))))))))))
 ))
 (let (($x531 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x267 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x529 (+ x ?x67)))
 (let ((?x144 (+ 1 r)))
 (let ((?x299 (* (+ (* (- 1) (* ?x144 ?x529)) (* (- 1) (* ?x144 ?x144 ?x144))) (+ (* (- 1) x) r (* ?x144 ?x529 ?x529)) (+ (- 1) ?x67 (* (- 1) (* ?x144 ?x144 ?x529 ?x529 ?x529))) ?x267)))
 (let (($x499 (not (= ?x299 0))))
 (and (= (+ ?x67 r00 (* r r) ?x32 ?x88 ?x104) 0) $x499))))))))))) :qid k!26))
 ))
 (let ((?x134 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x267 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x529 (+ x ?x67)))
 (let ((?x144 (+ 1 r)))
 (let ((?x299 (* (+ (* (- 1) (* ?x144 ?x529)) (* (- 1) (* ?x144 ?x144 ?x144))) (+ (* (- 1) x) r (* ?x144 ?x529 ?x529)) (+ (- 1) ?x67 (* (- 1) (* ?x144 ?x144 ?x529 ?x529 ?x529))) ?x267)))
 (let (($x499 (not (= ?x299 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x447 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x499)))
 (let (($x568 (and (= (+ ?x67 r00 ?x30 ?x32 ?x88 ?x104) 0) $x499)))
 (rewrite (= $x568 $x447))))))))))))))))))))
 ))
 (let (($x62 (exists ((r Int) (x Int) )(! (let ((?x56 (+ (* (- 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x36 (* r00 r00)))
 (let ((?x48 (- (- (+ ?x42 r00 (* ?x41 ?x41) (* 2 ?x44)) (* 2 x00)) ?x36)))
 (let ((?x57 (* ?x48 (- (* ?x27 ?x41 ?x44) (* ?x41 ?x41 ?x41)) (- ?x42 (* ?x41 ?x41 ?x44 ?x44 ?x44)) ?x56)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x57 0)))))))))))))) :qid k!26))
 ))
 (let ((?x504 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x267 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x529 (+ x ?x67)))
 (let ((?x144 (+ 1 r)))
 (let ((?x299 (* (+ (* (- 1) (* ?x144 ?x529)) (* (- 1) (* ?x144 ?x144 ?x144))) (+ (* (- 1) x) r (* ?x144 ?x529 ?x529)) (+ (- 1) ?x67 (* (- 1) (* ?x144 ?x144 ?x529 ?x529 ?x529))) ?x267)))
 (let (($x499 (not (= ?x299 0))))
 (let (($x568 (and (= (+ ?x67 r00 (* r r) ?x32 ?x88 ?x104) 0) $x499)))
 (let ((?x56 (+ (* (- 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x48 (- (- (+ ?x42 r00 (* ?x41 ?x41) (* 2 ?x44)) (* 2 x00)) ?x36)))
 (let ((?x57 (* ?x48 (- (* ?x27 ?x41 ?x44) (* ?x41 ?x41 ?x41)) (- ?x42 (* ?x41 ?x41 ?x44 ?x44 ?x44)) ?x56)))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) ?x32) (* 2 x00)) ?x36)))
 (let (($x61 (and (= ?x38 0) (or (not (= ?x57 0))))))
 (rewrite (= $x61 $x568)))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x291 (mp (mp @x63 (quant-intro (proof-bind ?x504) (= $x62 $x531)) $x531) (rewrite (= $x531 $x531)) $x531)))
 (let ((@x340 (mp (mp @x291 (quant-intro (proof-bind ?x134) (= $x531 $x133)) $x133) (quant-intro (proof-bind ?x604) (= $x133 $x135)) $x135)))
 (let ((@x585 (mp (mp~ @x340 (sk (~ $x135 $x313)) $x313) (rewrite (= $x313 $x184)) $x184)))
 (let ((@x280 (and-elim @x585 $x294)))
 (let ((@x536 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x357)) @x280 $x357)))
 (let (($x358 (>= ?x520 0)))
 (let ((@x558 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x358)) @x280 $x358)))
 (let (($x500 (not (>= ?x192 0))))
 (let (($x361 (<= ?x192 0)))
 (let ((@x159 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x448 (not $x361) $x500)) (and-elim @x585 $x195) (or (not $x361) $x500))))
 (let ((@x160 (unit-resolution @x159 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x361)) @x558 @x536 false) $x361) $x500)))
 ((_ th-lemma arith farkas 1 1 1) @x160 @x558 @x536 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            4
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 32
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.61
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1111400
 :num-checks                1
 :propagations              4
 :rlimit-count              2213
 :time                      0.01
 :total-time                0.01)
