unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x97 (* (- 3) n!0)))
 (let ((?x110 (* n!0 n!0)))
 (let ((?x111 (* (- 3) ?x110)))
 (let ((?x233 (+ k!2 ?x111 ?x97)))
 (let (($x181 (>= ?x233 1)))
 (let (($x213 (= ?x233 1)))
 (let ((?x318 (* (- 1) m!1)))
 (let ((?x319 (* 9 n!0)))
 (let ((?x320 (* 3 ?x110)))
 (let ((?x310 (* (- 1) k!2)))
 (let ((?x123 (+ k!2 c!3)))
 (let ((?x117 (+ k!2 m!1)))
 (let ((?x114 (+ 6 m!1)))
 (let ((?x193 (* ?x114 ?x117 ?x117 ?x123 ?x123 (+ 7 ?x310 ?x320 ?x319 ?x318))))
 (let (($x276 (= ?x193 0)))
 (let (($x195 (not $x276)))
 (let (($x344 (= (+ k!2 (* (- 1) (* k!2 n!0)) (* 3 c!3) (* (- 2) n!0)) 1)))
 (let ((?x357 (* (- 9) n!0)))
 (let ((?x169 (* (- 1) (* k!2 k!2))))
 (let ((?x380 (* 18 c!3)))
 (let ((?x177 (* 9 (* c!3 n!0))))
 (let ((?x341 (* 5 k!2)))
 (let ((?x185 (+ (* 6 n!0) ?x318)))
 (let (($x316 (= ?x185 (- 6))))
 (let (($x192 (and $x316 (= (+ ?x341 ?x177 ?x380 ?x169 ?x357) 4) $x344 $x213 $x195)))
 (let ((?x317 (+ c!3 k!2)))
 (let (($x343 (= (* ?x114 ?x117 ?x117 ?x317 ?x317 (+ 7 ?x310 ?x318 ?x319 ?x320)) 0)))
 (let (($x196 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x129 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x380 ?x341 ?x357 ?x169 ?x177) 4) $x196 (= (+ k!2 ?x97 ?x111) 1) (not $x343))))
 (let (($x311 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x381 (= (* ?x385 ?x71 ?x71 ?x76 ?x76 (+ 7 ?x230 ?x346 ?x48 ?x262)) 0)))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x204 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x200 (= ?x204 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 $x200 $x252 $x290 (not $x381)))))))))))))))))) :qid k!34))
 ))
 (let (($x458 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1)) (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0)))))))))))))) :qid k!34))
 ))
 (let ((?x161 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x381 (= (* ?x385 ?x71 ?x71 ?x76 ?x76 (+ 7 ?x230 ?x346 ?x48 ?x262)) 0)))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x204 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x200 (= ?x204 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x390 (and $x116 $x200 $x252 $x290 (not $x381))))
 (let ((?x65 (* 3 n)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x49 (* k k)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x98 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) (= (+ ?x262 ?x230 ?x65) (- 1)) (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0)))))
 (rewrite (= $x98 $x390)))))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let (($x80 (not (= (* ?x74 (- 1) ?x76 ?x76 ?x71 ?x71 (+ m 6)) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x80))))))))))))) :qid k!34))
 ))
 (let ((?x455 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x98 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1)) (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0)))))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let (($x80 (not (= (* ?x74 (- 1) ?x76 ?x76 ?x71 ?x71 (+ m 6)) 0))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or $x80))))
 (rewrite (= $x82 $x98))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x285 (mp (mp @x84 (quant-intro (proof-bind ?x455) (= $x83 $x458)) $x458) (rewrite (= $x458 $x458)) $x458)))
 (let ((@x143 (mp~ (mp @x285 (quant-intro (proof-bind ?x161) (= $x458 $x311)) $x311) (sk (~ $x311 $x129)) $x129)))
 (let ((@x144 (mp @x143 (rewrite (= $x129 $x192)) $x192)))
 (let ((@x103 (and-elim @x144 $x213)))
 (let ((@x90 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x213) $x181)) @x103 $x181)))
 (let (($x127 (<= ?x185 (- 6))))
 (let ((@x148 (and-elim @x144 $x316)))
 (let ((@x269 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x316) $x127)) @x148 $x127)))
 (let (($x180 (<= ?x233 1)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x213) $x180)) @x103 $x180)))
 (let (($x137 (>= ?x185 (- 6))))
 (let ((@x258 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x316) $x137)) @x148 $x137)))
 (let (($x247 (not (<= ?x193 0))))
 (let (($x352 (>= ?x193 0)))
 (let ((@x249 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x352)) @x258 @x371 @x269 @x90 false) $x352)))
 (let ((@x242 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x276 $x247 (not $x352))) (and-elim @x144 $x195) (or $x247 (not $x352)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x242 @x249 $x247) @x258 @x371 @x269 @x90 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             66
 :arith-nonlinear-bounds    3
 :arith-num-rows            8
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      8
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    8
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                19.54
 :memory                    19.02
 :mk-bool-var               17
 :mk-clause                 16
 :num-allocs                514906
 :num-checks                1
 :propagations              11
 :rlimit-count              1778
 :time                      0.01
 :total-time                0.02)
