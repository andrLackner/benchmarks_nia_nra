unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x407 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x475 (>= ?x407 (- 6))))
 (let (($x535 (= ?x407 (- 6))))
 (let ((?x588 (* c!3 m!1)))
 (let ((?x566 (+ c!3 k!2)))
 (let ((?x613 (+ 6 m!1)))
 (let ((?x568 (+ 1 n!0)))
 (let ((?x121 (* 18 k!2)))
 (let ((?x430 (* 2 (* m!1 m!1))))
 (let ((?x421 (* 13 m!1)))
 (let ((?x346 (* 6 (* n!0 n!0 n!0))))
 (let ((?x420 (* 6 c!3)))
 (let ((?x277 (* n!0 n!0)))
 (let ((?x424 (* 18 ?x277)))
 (let ((?x451 (* 18 n!0)))
 (let ((?x272 (+ 6 (* 3 (* n!0 c!3 m!1)) (* 21 (* n!0 n!0 m!1)) (* 18 (* n!0 n!0 c!3)) ?x451 ?x424 ?x420 (* 6 (* n!0 n!0 n!0 c!3)) (* 3 (* n!0 n!0 c!3 m!1)) (* 3 (* m!1 k!2)) ?x346 (* 21 (* n!0 m!1)) ?x421 ?x430 ?x121 (* n!0 n!0 n!0 m!1 m!1) (* 7 (* n!0 n!0 n!0 m!1)) (* 12 (* n!0 n!0 n!0 k!2)) (* n!0 n!0 n!0 c!3 m!1) (* 36 (* n!0 k!2)) (* 3 (* n!0 n!0 m!1 m!1)) (* 6 (* n!0 m!1 k!2)) (* 3 (* n!0 m!1 m!1)) (* 36 (* n!0 n!0 k!2)) (* 6 (* n!0 n!0 m!1 k!2)) (* 2 (* n!0 n!0 n!0 m!1 k!2)) (* ?x568 ?x568 ?x568 ?x613 (+ m!1 k!2) ?x566 ?x566 ?x566) ?x588 (* 18 (* n!0 c!3)))))
 (let ((?x262 (* (+ (- 6) (* (- 6) n!0) m!1) ?x272)))
 (let (($x249 (= ?x262 0)))
 (let (($x300 (not $x249)))
 (let (($x596 (= (+ (* 2 n!0) (* (- 3) c!3) (* (- 1) k!2) (* n!0 k!2)) (- 1))))
 (let ((?x409 (* k!2 k!2)))
 (let ((?x386 (+ (* 9 n!0) (* (- 18) c!3) ?x409 (* (- 5) k!2) (* (- 9) (* n!0 c!3)))))
 (let (($x382 (and $x535 (= ?x386 (- 4)) $x596 (= (+ (* 3 n!0) (* 3 ?x277) (* (- 1) k!2)) (- 1)) $x300)))
 (let ((?x174 (+ 6 ?x420 ?x121 ?x421 ?x451 (* 36 (* k!2 n!0)) (* 18 (* c!3 n!0)) ?x424 (* 3 (* k!2 m!1)) ?x430 (* 21 (* m!1 n!0 n!0)) (* 21 (* m!1 n!0)) (* 7 (* m!1 n!0 n!0 n!0)) ?x346 (* 2 (* k!2 m!1 n!0 n!0 n!0)) (* m!1 m!1 n!0 n!0 n!0) (* 6 (* k!2 m!1 n!0)) (* 3 (* m!1 m!1 n!0)) (* 36 (* k!2 n!0 n!0)) (* 6 (* k!2 m!1 n!0 n!0)) (* 3 (* m!1 m!1 n!0 n!0)) (* ?x568 ?x568 ?x568 ?x613 (+ k!2 m!1) ?x566 ?x566 ?x566) (* 12 (* k!2 n!0 n!0 n!0)) (* c!3 m!1 n!0 n!0 n!0) ?x588 (* 3 (* c!3 m!1 n!0)) (* 18 (* c!3 n!0 n!0)) (* 3 (* c!3 m!1 n!0 n!0)) (* 6 (* c!3 n!0 n!0 n!0)))))
 (let (($x417 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x248 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x409) (* 9 (* c!3 n!0)))))
 (let (($x593 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x248 4) $x417 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x277)) 1) (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x174) 0)))))
 (let (($x514 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x639 (* 6 (* c n n n))))
 (let ((?x648 (* 3 (* c m n n))))
 (let ((?x647 (* 18 (* c n n))))
 (let ((?x646 (* 3 (* c m n))))
 (let ((?x606 (* c m)))
 (let ((?x597 (* c m n n n)))
 (let ((?x676 (* 12 (* k n n n))))
 (let ((?x75 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x528 (* ?x317 ?x317 ?x317 ?x361 ?x72 ?x75 ?x75 ?x75)))
 (let ((?x571 (* 3 (* m m n n))))
 (let ((?x674 (* 6 (* k m n n))))
 (let ((?x673 (* 36 (* k n n))))
 (let ((?x567 (* 3 (* m m n))))
 (let ((?x672 (* 6 (* k m n))))
 (let ((?x483 (* m m n n n)))
 (let ((?x671 (* 2 (* k m n n n))))
 (let ((?x442 (* 6 (* n n n))))
 (let ((?x668 (* 7 (* m n n n))))
 (let ((?x666 (* 21 (* m n))))
 (let ((?x665 (* 21 (* m n n))))
 (let ((?x663 (* 2 (* m m))))
 (let ((?x662 (* 3 (* k m))))
 (let ((?x150 (* c n)))
 (let ((?x645 (* 18 ?x150)))
 (let ((?x55 (* k n)))
 (let ((?x670 (* 36 ?x55)))
 (let ((?x661 (* 13 m)))
 (let ((?x659 (* 18 k)))
 (let ((?x603 (* 6 c)))
 (let ((?x108 (+ 6 ?x603 ?x659 ?x661 (* 18 n) ?x670 ?x645 (* 18 (* n n)) ?x662 ?x663 ?x665 ?x666 ?x668 ?x442 ?x671 ?x483 ?x672 ?x567 ?x673 ?x674 ?x571 ?x528 ?x676 ?x597 ?x606 ?x646 ?x647 ?x648 ?x639)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 ?x150)) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x108) 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x169 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x72 (+ k m)))
 (let ((?x528 (* ?x317 ?x317 ?x317 ?x361 ?x72 ?x75 ?x75 ?x75)))
 (let ((?x572 (+ (* ?x361 ?x72) ?x528 (* ?x317 ?x317 ?x317 ?x361) (* ?x317 ?x317 ?x317 ?x361 ?x72) (* ?x317 ?x317 ?x317 ?x361 ?x75))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x560 (not (= (* ?x117 ?x572) 0))))
 (let (($x410 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x170 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x170 $x410 $x560)))))))))))))))))) :qid k!34))
 ))
 (let ((?x510 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x639 (* 6 (* c n n n))))
 (let ((?x648 (* 3 (* c m n n))))
 (let ((?x647 (* 18 (* c n n))))
 (let ((?x646 (* 3 (* c m n))))
 (let ((?x606 (* c m)))
 (let ((?x597 (* c m n n n)))
 (let ((?x676 (* 12 (* k n n n))))
 (let ((?x75 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x528 (* ?x317 ?x317 ?x317 ?x361 ?x72 ?x75 ?x75 ?x75)))
 (let ((?x571 (* 3 (* m m n n))))
 (let ((?x674 (* 6 (* k m n n))))
 (let ((?x673 (* 36 (* k n n))))
 (let ((?x567 (* 3 (* m m n))))
 (let ((?x672 (* 6 (* k m n))))
 (let ((?x483 (* m m n n n)))
 (let ((?x671 (* 2 (* k m n n n))))
 (let ((?x442 (* 6 (* n n n))))
 (let ((?x668 (* 7 (* m n n n))))
 (let ((?x666 (* 21 (* m n))))
 (let ((?x665 (* 21 (* m n n))))
 (let ((?x663 (* 2 (* m m))))
 (let ((?x662 (* 3 (* k m))))
 (let ((?x150 (* c n)))
 (let ((?x645 (* 18 ?x150)))
 (let ((?x55 (* k n)))
 (let ((?x670 (* 36 ?x55)))
 (let ((?x661 (* 13 m)))
 (let ((?x659 (* 18 k)))
 (let ((?x603 (* 6 c)))
 (let ((?x108 (+ 6 ?x603 ?x659 ?x661 (* 18 n) ?x670 ?x645 (* 18 (* n n)) ?x662 ?x663 ?x665 ?x666 ?x668 ?x442 ?x671 ?x483 ?x672 ?x567 ?x673 ?x674 ?x571 ?x528 ?x676 ?x597 ?x606 ?x646 ?x647 ?x648 ?x639)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 ?x150)) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x644 (and $x128 $x212 $x264 $x302 (not (= (* ?x117 ?x108) 0)))))
 (let ((?x572 (+ (* ?x361 ?x72) ?x528 (* ?x317 ?x317 ?x317 ?x361) (* ?x317 ?x317 ?x317 ?x361 ?x72) (* ?x317 ?x317 ?x317 ?x361 ?x75))))
 (let (($x560 (not (= (* ?x117 ?x572) 0))))
 (let (($x410 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x170 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x173 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x170 $x410 $x560)))
 (rewrite (= $x173 $x644)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x562 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x72 (+ k m)))
 (let ((?x528 (* ?x317 ?x317 ?x317 ?x361 ?x72 ?x75 ?x75 ?x75)))
 (let ((?x572 (+ (* ?x361 ?x72) ?x528 (* ?x317 ?x317 ?x317 ?x361) (* ?x317 ?x317 ?x317 ?x361 ?x72) (* ?x317 ?x317 ?x317 ?x361 ?x75))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x560 (not (= (* ?x117 ?x572) 0))))
 (let (($x410 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x462 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x480 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= ?x480 (- 4)) $x462 $x410 $x560)))))))))))))))) :qid k!34))
 ))
 (let ((?x175 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x72 (+ k m)))
 (let ((?x528 (* ?x317 ?x317 ?x317 ?x361 ?x72 ?x75 ?x75 ?x75)))
 (let ((?x572 (+ (* ?x361 ?x72) ?x528 (* ?x317 ?x317 ?x317 ?x361) (* ?x317 ?x317 ?x317 ?x361 ?x72) (* ?x317 ?x317 ?x317 ?x361 ?x75))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x560 (not (= (* ?x117 ?x572) 0))))
 (let (($x410 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x170 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x173 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x170 $x410 $x560)))
 (let (($x462 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x480 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x354 (and $x128 (= ?x480 (- 4)) $x462 $x410 $x560)))
 (rewrite (= $x354 $x173)))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x75 (+ c k)))
 (let ((?x80 (+ (* (+ k m) ?x73) (* ?x75 ?x75 ?x75 (+ k m) ?x73 ?x69 ?x69 ?x69) (* ?x73 ?x69 ?x69 ?x69) (* (+ k m) ?x73 ?x69 ?x69 ?x69) (* ?x75 ?x73 ?x69 ?x69 ?x69))))
 (let (($x82 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82))))))))))))))) :qid k!34))
 ))
 (let ((?x345 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ c k)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x72 (+ k m)))
 (let ((?x528 (* ?x317 ?x317 ?x317 ?x361 ?x72 ?x75 ?x75 ?x75)))
 (let ((?x572 (+ (* ?x361 ?x72) ?x528 (* ?x317 ?x317 ?x317 ?x361) (* ?x317 ?x317 ?x317 ?x361 ?x72) (* ?x317 ?x317 ?x317 ?x361 ?x75))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x560 (not (= (* ?x117 ?x572) 0))))
 (let (($x410 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x462 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x480 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x354 (and $x128 (= ?x480 (- 4)) $x462 $x410 $x560)))
 (let ((?x69 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x80 (+ (* ?x72 ?x73) (* ?x75 ?x75 ?x75 ?x72 ?x73 ?x69 ?x69 ?x69) (* ?x73 ?x69 ?x69 ?x69) (* ?x72 ?x73 ?x69 ?x69 ?x69) (* ?x75 ?x73 ?x69 ?x69 ?x69))))
 (let (($x82 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82)))))
 (rewrite (= $x85 $x354)))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x168 (mp (mp @x87 (quant-intro (proof-bind ?x345) (= $x86 $x562)) $x562) (rewrite (= $x562 $x562)) $x562)))
 (let ((@x142 (mp (mp @x168 (quant-intro (proof-bind ?x175) (= $x562 $x169)) $x169) (quant-intro (proof-bind ?x510) (= $x169 $x514)) $x514)))
 (let ((@x239 (mp (mp~ @x142 (sk (~ $x514 $x593)) $x593) (rewrite (= $x593 $x382)) $x382)))
 (let ((@x159 (and-elim @x239 $x535)))
 (let ((@x147 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x535) $x475)) @x159 $x475)))
 (let (($x90 (<= ?x407 (- 6))))
 (let ((@x471 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x535) $x90)) @x159 $x90)))
 (let (($x565 (not (<= ?x262 0))))
 (let (($x93 (>= ?x262 0)))
 (let ((@x582 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x249 $x565 (not $x93))) (and-elim @x239 $x300) (or $x565 (not $x93)))))
 (let ((@x539 (unit-resolution @x582 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x93)) @x471 @x147 false) $x93) $x565)))
 ((_ th-lemma arith farkas 1 1 1) @x539 @x471 @x147 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             210
 :arith-nonlinear-bounds    9
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      11
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.64
 :memory                    3.16
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1114238
 :num-checks                1
 :propagations              11
 :rlimit-count              4120
 :time                      0.01
 :total-time                0.01)
