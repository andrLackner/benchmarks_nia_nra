unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x45 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00)))
 (let ((?x47 (- ?x44 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (* ?x42 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x51))))))))))))))) :qid k!29))
 ))
 (let (($x210 (= $x53 false)))
 (let (($x203 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x209 (elim-unused (= $x203 false))))
 (let (($x206 (= $x53 $x203)))
 (let ((?x263 (lambda ((q Int) (r Int) (y Int) )(let ((?x45 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x45 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x43 ?x43 y00)))
 (let ((?x47 (- ?x44 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (* ?x42 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x201 (= $x52 false)))
 (let (($x240 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x82 (= (+ (* (- 1) y00) y) 0)))
 (let (($x257 (and $x82 $x240 false)))
 (let (($x194 (= $x51 false)))
 (let ((@x193 (rewrite (= (or false) false))))
 (let (($x189 (or false)))
 (let (($x190 (= $x51 $x189)))
 (let (($x187 (= $x50 false)))
 (let ((@x186 (rewrite (= (not true) false))))
 (let (($x182 (not true)))
 (let (($x183 (= $x50 $x182)))
 (let (($x180 (= $x49 true)))
 (let ((@x179 (rewrite (= (= 0 0) true))))
 (let (($x175 (= 0 0)))
 (let (($x176 (= $x49 $x175)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x114 (+ r ?x58)))
 (let ((?x77 (+ 1 q)))
 (let ((?x221 (* y00 y00 y00 ?x77 ?x114)))
 (let ((?x213 (* (- 1) (* y00 ?x77 ?x77))))
 (let ((?x237 (+ ?x213 (* (- 1) ?x221))))
 (let ((?x245 (* 0 ?x237)))
 (let ((@x79 (rewrite (= ?x43 ?x77))))
 (let ((@x119 (monotonicity @x79 (rewrite (= ?x45 ?x114)) (= ?x46 (* ?x77 ?x114 y00 y00 y00)))))
 (let ((@x228 (trans @x119 (rewrite (= (* ?x77 ?x114 y00 y00 y00) ?x221)) (= ?x46 ?x221))))
 (let ((@x85 (monotonicity (rewrite (= ?x28 (- 1))) @x79 @x79 (= ?x44 (* (- 1) ?x77 ?x77 y00)))))
 (let ((@x220 (trans @x85 (rewrite (= (* (- 1) ?x77 ?x77 y00) ?x213)) (= ?x44 ?x213))))
 (let ((@x244 (trans (monotonicity @x220 @x228 (= ?x47 (- ?x213 ?x221))) (rewrite (= (- ?x213 ?x221) ?x237)) (= ?x47 ?x237))))
 (let ((@x74 (trans (monotonicity (rewrite (= ?x30 ?x58)) (= ?x42 (+ ?x58 y00))) (rewrite (= (+ ?x58 y00) 0)) (= ?x42 0))))
 (let ((@x250 (trans (monotonicity @x74 @x244 (= ?x48 ?x245)) (rewrite (= ?x245 0)) $x49)))
 (let ((@x254 (trans (monotonicity (trans (monotonicity @x250 $x176) @x179 $x180) $x183) @x186 $x187)))
 (let ((@x259 (monotonicity (rewrite (= $x33 $x82)) (rewrite (= $x41 $x240)) (trans (monotonicity @x254 $x190) @x193 $x194) (= $x52 $x257))))
 (trans @x259 (rewrite (= $x257 false)) $x201))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (mp @x54 (trans (quant-intro (proof-bind ?x263) $x206) @x209 $x210) false))))))))))

(:max-memory   3.32
 :memory       3.03
 :mk-bool-var  5
 :num-allocs   874874
 :rlimit-count 163
 :time         0.01
 :total-time   0.01)
