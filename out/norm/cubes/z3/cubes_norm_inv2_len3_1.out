unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x125 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x717 (<= ?x125 (- 1))))
 (let (($x113 (= ?x125 (- 1))))
 (let ((?x524 (+ k!2 c!3)))
 (let ((?x247 (+ k!2 m!1)))
 (let ((?x855 (+ 6 m!1)))
 (let ((?x729 (+ 1 n!0)))
 (let ((?x845 (* 9 (* ?x729 ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x524 ?x524 ?x524 ?x524))))
 (let ((?x162 (* (- 4) (* ?x729 ?x729 ?x729 ?x855 ?x247 ?x247))))
 (let ((?x545 (* (- 1) (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x247 ?x247 ?x524 ?x524 ?x524))))
 (let ((?x192 (* (- 1) (* ?x729 ?x729 ?x729 ?x855 ?x247 ?x247 ?x247 ?x247))))
 (let ((?x121 (* 5 (* ?x729 ?x729 ?x729 ?x855 ?x247 ?x247 ?x247))))
 (let ((?x119 (* (- 9) (* ?x729 ?x729 ?x729 ?x729 ?x855 ?x247 ?x247))))
 (let ((?x552 (+ (* 18 (* ?x729 ?x729 ?x729 ?x855 ?x247 ?x247 ?x524)) (* (- 4) (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x524 ?x524 ?x524)) (* 18 (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x524 ?x524 ?x524 ?x524)) ?x119 ?x121 (* (- 4) (* ?x855 ?x855 ?x855 ?x247 ?x524 ?x524 ?x524)) ?x192 (* 9 (* ?x729 ?x729 ?x729 ?x729 ?x855 ?x247 ?x247 ?x524)) (* 9 (* ?x729 ?x855 ?x855 ?x855 ?x247 ?x524 ?x524 ?x524 ?x524)) ?x545 (* 18 (* ?x855 ?x855 ?x855 ?x247 ?x524 ?x524 ?x524 ?x524)) (* (- 9) (* ?x729 ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x524 ?x524 ?x524)) ?x162 ?x845 (* 5 (* ?x855 ?x855 ?x855 ?x247 ?x247 ?x524 ?x524 ?x524)) (* (- 9) (* ?x729 ?x855 ?x855 ?x855 ?x247 ?x524 ?x524 ?x524)) (* (- 1) (* ?x855 ?x855 ?x855 ?x247 ?x247 ?x247 ?x524 ?x524 ?x524)) (* 5 (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x247 ?x524 ?x524 ?x524)))))
 (let (($x576 (= ?x552 0)))
 (let (($x352 (not $x576)))
 (let ((?x167 (* (- 1) (* k!2 n!0))))
 (let ((?x259 (* (- 2) n!0)))
 (let ((?x176 (* 3 c!3)))
 (let ((?x356 (+ k!2 ?x176 ?x259 ?x167)))
 (let (($x506 (= ?x356 1)))
 (let ((?x850 (* (- 9) n!0)))
 (let ((?x848 (* 9 (* c!3 n!0))))
 (let ((?x804 (* 18 c!3)))
 (let ((?x782 (* (- 1) (* k!2 k!2))))
 (let ((?x783 (* 5 k!2)))
 (let ((?x663 (+ ?x783 ?x782 ?x804 ?x848 ?x850)))
 (let (($x713 (= ?x663 4)))
 (let ((?x156 (+ m!1 (* (- 6) n!0))))
 (let (($x715 (= ?x156 6)))
 (let (($x600 (and $x715 $x713 $x506 $x113 $x352)))
 (let ((?x598 (+ c!3 k!2)))
 (let ((?x538 (* 9 (* ?x729 ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x598 ?x598 ?x598 ?x598))))
 (let ((?x290 (* (- 1) (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x247 ?x247 ?x598 ?x598 ?x598))))
 (let ((?x730 (+ (* 18 (* ?x855 ?x855 ?x855 ?x247 ?x598 ?x598 ?x598 ?x598)) ?x290 (* 9 (* ?x729 ?x855 ?x855 ?x855 ?x247 ?x598 ?x598 ?x598 ?x598)) (* (- 9) (* ?x729 ?x855 ?x855 ?x855 ?x247 ?x598 ?x598 ?x598)) (* 5 (* ?x855 ?x855 ?x855 ?x247 ?x247 ?x598 ?x598 ?x598)) ?x192 (* (- 1) (* ?x855 ?x855 ?x855 ?x247 ?x247 ?x247 ?x598 ?x598 ?x598)) ?x119 ?x162 ?x121 (* 9 (* ?x729 ?x729 ?x729 ?x729 ?x855 ?x247 ?x247 ?x598)) (* 5 (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x247 ?x598 ?x598 ?x598)) (* 18 (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x598 ?x598 ?x598 ?x598)) (* (- 9) (* ?x729 ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x598 ?x598 ?x598)) (* (- 4) (* ?x729 ?x729 ?x855 ?x855 ?x247 ?x247 ?x598 ?x598 ?x598)) ?x538 (* (- 4) (* ?x855 ?x855 ?x855 ?x247 ?x598 ?x598 ?x598)) (* 18 (* ?x729 ?x729 ?x729 ?x855 ?x247 ?x247 ?x598)))))
 (let (($x537 (and $x715 (= (+ ?x804 ?x783 ?x850 ?x782 ?x848) 4) (= (+ ?x176 k!2 ?x259 ?x167) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x730 0)))))
 (let (($x509 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x321 (+ 6 m)))
 (let ((?x324 (+ 1 n)))
 (let ((?x931 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)))
 (let ((?x869 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)))
 (let ((?x152 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x627 (+ (* 18 (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 1) ?x152) (* 9 (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 9) (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* 5 (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 1) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* (- 4) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 5 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68)) (* 9 (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* 5 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 18 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 4) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 9 ?x869) (* (- 4) (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* 18 ?x931))))
 (let (($x313 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x275 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x223 (= (+ ?x40 ?x44 ?x225 ?x226 (* 9 (* c n))) 4)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (and $x139 $x223 $x275 $x313 (not (= ?x627 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x756 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x321 (+ 6 m)))
 (let ((?x910 (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x324 (+ 1 n)))
 (let ((?x802 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x869 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)))
 (let ((?x152 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x283 (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x271 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x909 (+ (* 9 (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 4 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 9 (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* (- 5) (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) ?x271 ?x283 ?x152 (* (- 9) (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 18) (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 5) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68)) (* (- 5) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 9) ?x869) (* (- 18) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 18) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)) (* 9 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 4 ?x802) (* 4 ?x910))))
 (let (($x250 (not (= ?x909 0))))
 (let (($x286 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x705 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (and $x139 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x225 ?x226) 4) $x705 $x286 $x250))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x814 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x321 (+ 6 m)))
 (let ((?x324 (+ 1 n)))
 (let ((?x931 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)))
 (let ((?x869 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)))
 (let ((?x152 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x627 (+ (* 18 (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 1) ?x152) (* 9 (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 9) (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* 5 (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 1) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* (- 4) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 5 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68)) (* 9 (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* 5 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 18 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 4) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 9 ?x869) (* (- 4) (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* 18 ?x931))))
 (let (($x313 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x275 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x223 (= (+ ?x40 ?x44 ?x225 ?x226 (* 9 (* c n))) 4)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (let (($x662 (and $x139 $x223 $x275 $x313 (not (= ?x627 0)))))
 (let ((?x283 (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x271 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x909 (+ (* 9 (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 4 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 9 (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* (- 5) (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) ?x271 ?x283 ?x152 (* (- 9) (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 18) (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 5) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68)) (* (- 5) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 9) ?x869) (* (- 18) ?x931) (* (- 9) (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 18) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)) (* 9 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 4 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 4 (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)))))
 (let (($x250 (not (= ?x909 0))))
 (let (($x286 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x705 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x703 (and $x139 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x225 ?x226) 4) $x705 $x286 $x250)))
 (rewrite (= $x703 $x662))))))))))))))))))))))))))))
 ))
 (let (($x252 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x321 (+ 6 m)))
 (let ((?x910 (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x324 (+ 1 n)))
 (let ((?x802 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x869 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)))
 (let ((?x152 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x283 (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x271 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x909 (+ (* 9 (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 4 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 9 (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* (- 5) (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) ?x271 ?x283 ?x152 (* (- 9) (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 18) (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 5) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68)) (* (- 5) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 9) ?x869) (* (- 18) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 18) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)) (* 9 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 4 ?x802) (* 4 ?x910))))
 (let (($x250 (not (= ?x909 0))))
 (let (($x286 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x513 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x186 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (and $x139 (= ?x186 (- 4)) $x513 $x286 $x250))))))))))))))))))) :qid k!34))
 ))
 (let ((?x696 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x321 (+ 6 m)))
 (let ((?x910 (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x324 (+ 1 n)))
 (let ((?x802 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x869 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)))
 (let ((?x152 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x283 (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x271 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x909 (+ (* 9 (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 4 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 9 (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* (- 5) (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) ?x271 ?x283 ?x152 (* (- 9) (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 18) (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 5) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68)) (* (- 5) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 9) ?x869) (* (- 18) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 18) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)) (* 9 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 4 ?x802) (* 4 ?x910))))
 (let (($x250 (not (= ?x909 0))))
 (let (($x286 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x705 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x226 (* (- 1) ?x49)))
 (let ((?x225 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (let (($x703 (and $x139 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x225 ?x226) 4) $x705 $x286 $x250)))
 (let (($x513 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x186 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x312 (and $x139 (= ?x186 (- 4)) $x513 $x286 $x250)))
 (rewrite (= $x312 $x703))))))))))))))))))))))))))))
 ))
 (let (($x106 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ m 6)))
 (let ((?x68 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x70 (+ n 1)))
 (let ((?x75 (+ (* 9 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70) (* 4 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70) (* 9 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69 ?x70))))
 (let ((?x81 (+ (- ?x75 (* 5 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x69)) (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70) (* ?x73 ?x73 ?x73 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x73 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x91 (- (- ?x81 (* 9 ?x73 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69 ?x70)) (* 18 ?x73 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69))))
 (let ((?x93 (- (- ?x91 (* 5 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) (* 5 ?x73 ?x73 ?x73 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x94 (- ?x93 (* 9 ?x73 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x96 (- (- ?x94 (* 18 ?x73 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) (* 9 ?x73 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x97 (- ?x96 (* 18 ?x73 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x101 (+ ?x97 (* 9 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70) (* 4 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70) (* 4 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x101 0))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x238 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x321 (+ 6 m)))
 (let ((?x910 (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x324 (+ 1 n)))
 (let ((?x802 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x869 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)))
 (let ((?x152 (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x283 (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)))
 (let ((?x271 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x909 (+ (* 9 (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 4 (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68)) (* 9 (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73)) (* (- 5) (* ?x321 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) ?x271 ?x283 ?x152 (* (- 9) (* ?x324 ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 18) (* ?x321 ?x321 ?x321 ?x68 ?x73 ?x73 ?x73 ?x73)) (* (- 5) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x68)) (* (- 5) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x68 ?x73 ?x73 ?x73)) (* (- 9) ?x869) (* (- 18) (* ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 9) (* ?x324 ?x324 ?x324 ?x324 ?x321 ?x68 ?x68 ?x73)) (* (- 18) (* ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73 ?x73)) (* 9 (* ?x324 ?x324 ?x324 ?x321 ?x321 ?x68 ?x68 ?x73 ?x73 ?x73)) (* 4 ?x802) (* 4 ?x910))))
 (let (($x250 (not (= ?x909 0))))
 (let (($x286 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x513 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x186 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x139 (= (+ m (* (- 6) n)) 6)))
 (let (($x312 (and $x139 (= ?x186 (- 4)) $x513 $x286 $x250)))
 (let ((?x69 (+ m 6)))
 (let ((?x70 (+ n 1)))
 (let ((?x75 (+ (* 9 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70) (* 4 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70) (* 9 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69 ?x70))))
 (let ((?x81 (+ (- ?x75 (* 5 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x69)) (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70) (* ?x73 ?x73 ?x73 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x73 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x91 (- (- ?x81 (* 9 ?x73 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69 ?x70)) (* 18 ?x73 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69))))
 (let ((?x93 (- (- ?x91 (* 5 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) (* 5 ?x73 ?x73 ?x73 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x94 (- ?x93 (* 9 ?x73 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x96 (- (- ?x94 (* 18 ?x73 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) (* 9 ?x73 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x97 (- ?x96 (* 18 ?x73 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x101 (+ ?x97 (* 9 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70) (* 4 ?x73 ?x73 ?x73 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70) (* 4 ?x73 ?x73 ?x73 ?x68 ?x69 ?x69 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x105 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x101 0))))))
 (rewrite (= $x105 $x312))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x107 (asserted $x106)))
 (let ((@x701 (mp (mp @x107 (quant-intro (proof-bind ?x238) (= $x106 $x252)) $x252) (rewrite (= $x252 $x252)) $x252)))
 (let ((@x720 (mp (mp @x701 (quant-intro (proof-bind ?x696) (= $x252 $x756)) $x756) (quant-intro (proof-bind ?x814) (= $x756 $x509)) $x509)))
 (let ((@x785 (mp (mp~ @x720 (sk (~ $x509 $x537)) $x537) (rewrite (= $x537 $x600)) $x600)))
 (let ((@x260 (and-elim @x785 $x113)))
 (let ((@x132 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x717)) @x260 $x717)))
 (let (($x199 (>= ?x125 (- 1))))
 (let ((@x725 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x113) $x199)) @x260 $x199)))
 (let (($x297 (<= ?x156 6)))
 (let ((@x846 (and-elim @x785 $x715)))
 (let ((@x326 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x715) $x297)) @x846 $x297)))
 (let (($x263 (>= ?x156 6)))
 (let ((@x743 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x715) $x263)) @x846 $x263)))
 (let (($x118 (<= ?x356 1)))
 (let ((@x711 (and-elim @x785 $x506)))
 (let ((@x345 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x506) $x118)) @x711 $x118)))
 (let (($x298 (>= ?x356 1)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x506) $x298)) @x711 $x298)))
 (let (($x301 (<= ?x663 4)))
 (let ((@x808 (and-elim @x785 $x713)))
 (let ((@x714 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x713) $x301)) @x808 $x301)))
 (let (($x921 (>= ?x663 4)))
 (let ((@x661 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x713) $x921)) @x808 $x921)))
 (let (($x534 (not (<= ?x552 0))))
 (let (($x784 (>= ?x552 0)))
 (let ((@x274 ((_ th-lemma arith) (hypothesis (not $x784)) @x725 @x132 @x743 @x326 @x725 @x132 @x114 @x345 @x725 @x132 @x114 @x345 @x661 @x714 @x114 @x345 @x725 @x132 @x743 @x326 @x725 @x132 false)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x576 $x534 (not $x784))) (and-elim @x785 $x352) (or $x534 (not $x784)))))
 ((_ th-lemma arith) (unit-resolution @x295 (lemma @x274 $x784) $x534) @x725 @x132 @x743 @x326 @x725 @x132 @x114 @x345 @x725 @x132 @x114 @x345 @x661 @x714 @x114 @x345 @x725 @x132 @x743 @x326 @x725 @x132 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        24
 :arith-branch-var          3
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           11
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             327
 :arith-nonlinear-bounds    7
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             6
 :arith-pivots              10
 :arith-row-summations      14
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 11
 :del-clause                16
 :final-checks              12
 :max-memory                3.81
 :memory                    3.24
 :mk-bool-var               31
 :mk-clause                 16
 :num-allocs                1889567
 :num-checks                1
 :propagations              12
 :rlimit-count              14940
 :time                      0.02
 :total-time                0.02)
