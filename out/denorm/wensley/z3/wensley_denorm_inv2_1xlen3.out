unsat
((set-logic NRA)
(declare-fun b!7 () Real)
(declare-fun d!6 () Real)
(declare-fun a!8 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x317 (+ (* (/ 1.0 2.0) (* b00 d!6)) (* (- (/ 1.0 2.0)) (* d00 b!7)))))
 (let (($x323 (<= ?x317 0.0)))
 (let ((?x327 (* b00 d!6)))
 (let ((?x244 (+ ?x327 (* (- 1.0) (* d00 b!7)))))
 (let (($x189 (<= ?x244 0.0)))
 (let (($x256 (= 0.0 ?x244)))
 (let ((@x470 (symm (commutativity (= $x256 (= ?x244 0.0))) (= (= ?x244 0.0) $x256))))
 (let (($x246 (= ?x244 0.0)))
 (let ((?x388 (* (- (/ 1.0 8.0)) (* d!6 d!6 b!7 a!8 a!8))))
 (let ((?x590 (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7))))
 (let ((?x557 (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8))))
 (let ((?x584 (* (- (/ 1.0 4.0)) (* d!6 d!6 b!7 b!7 a!8))))
 (let ((?x492 (* (- (/ 1.0 4.0)) (* d!6 b!7 b!7 b!7 b!7))))
 (let ((?x406 (* (- (/ 3.0 4.0)) (* d!6 b!7 b!7 b!7 a!8))))
 (let ((?x97 (* (/ 3.0 32.0) (* d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8))))
 (let ((?x318 (* (- (/ 3.0 4.0)) (* d!6 b!7 b!7 a!8 a!8))))
 (let ((?x389 (* (/ 3.0 32.0) (* d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8))))
 (let ((?x281 (* (- (/ 1.0 4.0)) (* d!6 b!7 a!8 a!8 a!8))))
 (let ((?x200 (* (- (/ 1.0 8.0)) (* d!6 d!6 b!7 b!7 b!7))))
 (let ((?x616 (+ ?x200 (* (- (/ 3.0 2.0)) (* b!7 b!7 y!5 a!8 a!8)) ?x281 (* (- (/ 1.0 2.0)) (* b!7 y!5 a!8 a!8 a!8)) (* (- (/ 1.0 4.0)) (* d!6 b!7 b!7 b!7 y!5)) (* (- (/ 1.0 2.0)) (* d!6 b!7 b!7 y!5 a!8)) (* (- (/ 1.0 4.0)) (* d!6 b!7 y!5 a!8 a!8)) (* (- (/ 1.0 2.0)) (* b!7 b!7 b!7 b!7 y!5)) ?x389 (* (- (/ 3.0 2.0)) (* b!7 b!7 b!7 y!5 a!8)) ?x318 ?x97 ?x406 ?x492 ?x584 ?x557 ?x590 ?x388)))
 (let (($x320 (= (* ?x317 ?x616) 0.0)))
 (let (($x454 (not $x320)))
 (let ((?x274 (* (- (/ 1.0 64.0)) (* b00 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8))))
 (let ((?x270 (* (/ 1.0 64.0) (* d00 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8 a!8))))
 (let ((?x283 (+ (* (/ 1.0 4.0) (* b00 d!6 b!7 y!5 a!8 a!8 a!8)) (* (- (/ 1.0 8.0)) (* d00 d!6 b!7 b!7 y!5 a!8 a!8)) (* (/ 1.0 8.0) (* b00 d!6 d!6 b!7 y!5 a!8 a!8)) (* (- (/ 1.0 4.0)) (* d00 b!7 b!7 y!5 a!8 a!8 a!8)) ?x270 ?x274)))
 (let (($x265 (= ?x283 0.0)))
 (let (($x260 (or (not $x265) $x454)))
 (let ((?x169 (* d!6 a!8)))
 (let ((?x304 (+ ?x169 (* 2.0 (* y00 b!7)) (* (- 1.0) (* a00 d!6)) (* (- 2.0) (* b!7 y!5)))))
 (let (($x313 (= ?x304 0.0)))
 (let ((?x85 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x328 (= (+ ?x30 ?x85 (* (- 1.0) (* d00 a!8)) (* 2.0 (* b00 y!5))) 0.0)))
 (let (($x567 (and $x328 $x246 $x313 $x260)))
 (let ((?x300 (+ (* (- (/ 1.0 4.0)) (* y!5 d!6 b!7 a!8 a!8)) (* (- (/ 1.0 2.0)) (* y!5 b!7 a!8 a!8 a!8)) ?x557 (* (- (/ 1.0 4.0)) (* y!5 d!6 b!7 b!7 b!7)) ?x200 (* (- (/ 1.0 2.0)) (* y!5 d!6 b!7 b!7 a!8)) ?x584 ?x388 ?x590 ?x97 ?x389 (* (- (/ 1.0 2.0)) (* y!5 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 2.0)) (* y!5 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 2.0)) (* y!5 b!7 b!7 a!8 a!8)) ?x492 ?x406 ?x318 ?x281)))
 (let (($x296 (= (* (+ (* (- (/ 1.0 2.0)) (* b!7 d00)) (* (/ 1.0 2.0) (* d!6 b00))) ?x300) 0.0)))
 (let ((?x193 (* (/ 1.0 64.0) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8 b00))))
 (let ((?x573 (* (- (/ 1.0 64.0)) (* d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8 a!8 d00))))
 (let ((?x570 (+ (* (/ 1.0 8.0) (* y!5 d!6 b!7 b!7 a!8 a!8 d00)) (* (- (/ 1.0 8.0)) (* y!5 d!6 d!6 b!7 a!8 a!8 b00)) (* (/ 1.0 4.0) (* y!5 b!7 b!7 a!8 a!8 a!8 d00)) (* (- (/ 1.0 4.0)) (* y!5 d!6 b!7 a!8 a!8 a!8 b00)) ?x573 ?x193)))
 (let ((?x537 (+ ?x169 (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x359 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x85 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x128 (and $x359 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x537 0.0) (or (not (= ?x570 0.0)) (not $x296)))))
 (let (($x119 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x179 (* (/ 1.0 32.0) (* d d b b b a a a))))
 (let ((?x191 (* (- (/ 1.0 2.0)) (* y b a a a))))
 (let ((?x126 (* (- (/ 1.0 4.0)) (* y d b a a))))
 (let ((?x623 (+ ?x126 ?x191 ?x179 (* (- (/ 1.0 4.0)) (* y d b b b)) (* (- (/ 1.0 8.0)) (* d d b b b)) (* (- (/ 1.0 2.0)) (* y d b b a)) (* (- (/ 1.0 4.0)) (* d d b b a)) (* (- (/ 1.0 8.0)) (* d d b a a)) (* (/ 1.0 32.0) (* d d b b b b b b)) (* (/ 3.0 32.0) (* d d b b b b b a)) (* (/ 3.0 32.0) (* d d b b b b a a)) (* (- (/ 1.0 2.0)) (* y b b b b)) (* (- (/ 3.0 2.0)) (* y b b b a)) (* (- (/ 3.0 2.0)) (* y b b a a)) (* (- (/ 1.0 4.0)) (* d b b b b)) (* (- (/ 3.0 4.0)) (* d b b b a)) (* (- (/ 3.0 4.0)) (* d b b a a)) (* (- (/ 1.0 4.0)) (* d b a a a)))))
 (let (($x175 (= (* (+ (* (- (/ 1.0 2.0)) (* b d00)) (* (/ 1.0 2.0) (* d b00))) ?x623) 0.0)))
 (let ((?x282 (+ (* (/ 1.0 8.0) (* y d b b a a d00)) (* (- (/ 1.0 8.0)) (* y d d b a a b00)) (* (/ 1.0 4.0) (* y b b a a a d00)) (* (- (/ 1.0 4.0)) (* y d b a a a b00)) (* (- (/ 1.0 64.0)) (* d d b b b b a a a d00)) (* (/ 1.0 64.0) (* d d d b b b a a a b00)))))
 (let ((?x127 (* (- 2.0) (* y b))))
 (let ((?x102 (* d a)))
 (let (($x162 (= (+ ?x102 ?x127 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x85 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x117 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x85 (* 2.0 (* y b00))) 0.0)))
 (and $x117 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x162 (or (not (= ?x282 0.0)) (not $x175))))))))))))))) :qid k!33))
 ))
 (let (($x526 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x500 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x64 (+ a b)))
 (let ((?x553 (+ (* (- (/ 1.0 4.0)) (* ?x64 ?x64 ?x500 d b)) (* (/ 1.0 32.0) (* ?x64 ?x64 ?x64 d d b b b)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x500 b)))))
 (let ((?x472 (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d)))))
 (let ((?x191 (* (- (/ 1.0 2.0)) (* y b a a a))))
 (let ((?x179 (* (/ 1.0 32.0) (* d d b b b a a a))))
 (let ((?x126 (* (- (/ 1.0 4.0)) (* y d b a a))))
 (let (($x544 (or (not (= (* ?x472 (+ ?x126 ?x179 ?x191)) 0.0)) (not (= (* ?x472 ?x553) 0.0)))))
 (let ((?x127 (* (- 2.0) (* y b))))
 (let ((?x102 (* d a)))
 (let (($x482 (= (+ ?x102 ?x127 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x85 (* (- 2.0) (* b00 y00))))
 (let (($x201 (= (+ ?x85 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x201 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x482 $x544))))))))))))))) :qid k!33))
 ))
 (let ((?x469 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x179 (* (/ 1.0 32.0) (* d d b b b a a a))))
 (let ((?x191 (* (- (/ 1.0 2.0)) (* y b a a a))))
 (let ((?x126 (* (- (/ 1.0 4.0)) (* y d b a a))))
 (let ((?x623 (+ ?x126 ?x191 ?x179 (* (- (/ 1.0 4.0)) (* y d b b b)) (* (- (/ 1.0 8.0)) (* d d b b b)) (* (- (/ 1.0 2.0)) (* y d b b a)) (* (- (/ 1.0 4.0)) (* d d b b a)) (* (- (/ 1.0 8.0)) (* d d b a a)) (* (/ 1.0 32.0) (* d d b b b b b b)) (* (/ 3.0 32.0) (* d d b b b b b a)) (* (/ 3.0 32.0) (* d d b b b b a a)) (* (- (/ 1.0 2.0)) (* y b b b b)) (* (- (/ 3.0 2.0)) (* y b b b a)) (* (- (/ 3.0 2.0)) (* y b b a a)) (* (- (/ 1.0 4.0)) (* d b b b b)) (* (- (/ 3.0 4.0)) (* d b b b a)) (* (- (/ 3.0 4.0)) (* d b b a a)) (* (- (/ 1.0 4.0)) (* d b a a a)))))
 (let (($x175 (= (* (+ (* (- (/ 1.0 2.0)) (* b d00)) (* (/ 1.0 2.0) (* d b00))) ?x623) 0.0)))
 (let ((?x282 (+ (* (/ 1.0 8.0) (* y d b b a a d00)) (* (- (/ 1.0 8.0)) (* y d d b a a b00)) (* (/ 1.0 4.0) (* y b b a a a d00)) (* (- (/ 1.0 4.0)) (* y d b a a a b00)) (* (- (/ 1.0 64.0)) (* d d b b b b a a a d00)) (* (/ 1.0 64.0) (* d d d b b b a a a b00)))))
 (let ((?x127 (* (- 2.0) (* y b))))
 (let ((?x102 (* d a)))
 (let (($x162 (= (+ ?x102 ?x127 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x85 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x117 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x85 (* 2.0 (* y b00))) 0.0)))
 (let (($x648 (and $x117 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x162 (or (not (= ?x282 0.0)) (not $x175)))))
 (let ((?x500 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x64 (+ a b)))
 (let ((?x553 (+ (* (- (/ 1.0 4.0)) (* ?x64 ?x64 ?x500 d b)) (* (/ 1.0 32.0) (* ?x64 ?x64 ?x64 d d b b b)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x500 b)))))
 (let ((?x472 (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d)))))
 (let (($x544 (or (not (= (* ?x472 (+ ?x126 ?x179 ?x191)) 0.0)) (not (= (* ?x472 ?x553) 0.0)))))
 (let (($x482 (= (+ ?x102 ?x127 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x201 (= (+ ?x85 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x562 (and $x201 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x482 $x544)))
 (rewrite (= $x562 $x648))))))))))))))))))))))))
 ))
 (let (($x76 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x53 (/ d 2.0)))
 (let ((?x65 (+ y ?x53)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x64 (+ a b)))
 (let ((?x68 (+ (* (- 1.0) ?x64 ?x64 ?x51 ?x53 ?x65) (* ?x64 ?x64 ?x64 ?x51 ?x51 ?x51 ?x53 ?x53))))
 (let ((?x55 (+ (* (- 1.0) ?x51 d00) (* b00 ?x53))))
 (let ((?x58 (+ (* (- 1.0) a a ?x51 ?x53 y) (* a a a ?x51 ?x51 ?x51 ?x53 ?x53))))
 (let (($x74 (or (not (= (* ?x55 (- ?x58 (* a a a ?x51 y))) 0.0)) (not (= (* ?x55 (- ?x68 (* ?x64 ?x64 ?x64 ?x51 ?x65))) 0.0)))))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) $x74)))))))))))))) :qid k!33))
 ))
 (let ((?x529 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x500 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x64 (+ a b)))
 (let ((?x553 (+ (* (- (/ 1.0 4.0)) (* ?x64 ?x64 ?x500 d b)) (* (/ 1.0 32.0) (* ?x64 ?x64 ?x64 d d b b b)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x500 b)))))
 (let ((?x472 (+ (* (- (/ 1.0 2.0)) (* d00 b)) (* (/ 1.0 2.0) (* b00 d)))))
 (let ((?x191 (* (- (/ 1.0 2.0)) (* y b a a a))))
 (let ((?x179 (* (/ 1.0 32.0) (* d d b b b a a a))))
 (let ((?x126 (* (- (/ 1.0 4.0)) (* y d b a a))))
 (let (($x544 (or (not (= (* ?x472 (+ ?x126 ?x179 ?x191)) 0.0)) (not (= (* ?x472 ?x553) 0.0)))))
 (let ((?x127 (* (- 2.0) (* y b))))
 (let ((?x102 (* d a)))
 (let (($x482 (= (+ ?x102 ?x127 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x85 (* (- 2.0) (* b00 y00))))
 (let (($x201 (= (+ ?x85 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x562 (and $x201 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x482 $x544)))
 (let ((?x53 (/ d 2.0)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x68 (+ (* (- 1.0) ?x64 ?x64 ?x51 ?x53 (+ y ?x53)) (* ?x64 ?x64 ?x64 ?x51 ?x51 ?x51 ?x53 ?x53))))
 (let ((?x55 (+ (* (- 1.0) ?x51 d00) (* b00 ?x53))))
 (let (($x73 (not (= (* ?x55 (- ?x68 (* ?x64 ?x64 ?x64 ?x51 (+ y ?x53)))) 0.0))))
 (let ((?x58 (+ (* (- 1.0) a a ?x51 ?x53 y) (* a a a ?x51 ?x51 ?x51 ?x53 ?x53))))
 (let (($x74 (or (not (= (* ?x55 (- ?x58 (* a a a ?x51 y))) 0.0)) $x73)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x75 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) $x74)))
 (rewrite (= $x75 $x562))))))))))))))))))))))))))))))
 ))
 (let ((@x77 (asserted $x76)))
 (let ((@x197 (mp (mp @x77 (quant-intro (proof-bind ?x529) (= $x76 $x526)) $x526) (quant-intro (proof-bind ?x469) (= $x526 $x119)) $x119)))
 (let ((@x405 (mp (mp~ @x197 (sk (~ $x119 $x128)) $x128) (rewrite (= $x128 $x567)) $x567)))
 (let ((@x471 (mp (and-elim @x405 $x246) @x470 $x256)))
 (let ((@x101 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x256) $x189)) @x471 $x189) (hypothesis (not $x323)) false)))
 (let ((@x95 (lemma @x101 $x323)))
 (let (($x626 (>= ?x317 0.0)))
 (let (($x275 (>= ?x244 0.0)))
 (let ((@x441 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x256) $x275)) @x471 $x275) (hypothesis (not $x626)) false)))
 (let ((@x198 (lemma @x441 $x626)))
 (let (($x268 (= 0.0 ?x283)))
 (let (($x330 (>= ?x283 0.0)))
 (let (($x267 (>= ?x304 0.0)))
 (let (($x315 (= 0.0 ?x304)))
 (let ((@x366 (mp (and-elim @x405 $x313) (symm (commutativity (= $x315 $x313)) (= $x313 $x315)) $x315)))
 (let (($x276 (<= ?x304 0.0)))
 (let ((@x381 (unit-resolution ((_ th-lemma arith) (or (not $x323) (not $x626) (not $x276) (not $x267) $x330)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x315) $x276)) @x366 $x276) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x315) $x267)) @x366 $x267) (hypothesis (not $x330)) @x198 @x95 false)))
 (let (($x202 (<= ?x283 0.0)))
 (let ((@x523 (unit-resolution ((_ th-lemma arith) (or (not $x323) (not $x626) $x202)) (hypothesis (not $x202)) @x198 @x95 false)))
 (let ((@x510 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x268 (not $x202) (not $x330))) (lemma @x523 $x202) (or $x268 (not $x330)))))
 (let ((@x362 (mp (unit-resolution @x510 (lemma @x381 $x330) $x268) (commutativity (= $x268 $x265)) $x265)))
 (unit-resolution ((_ th-lemma arith) (or $x320 (not $x323) (not $x626))) (unit-resolution (and-elim @x405 $x260) @x362 $x454) @x198 @x95 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       31
 :arith-eq-adapter                30
 :arith-bound-propagations-cheap  24
 :arith-bound-propagations-lp     2
 :arith-conflicts                 53
 :arith-diseq                     47
 :arith-fixed-eqs                 1
 :arith-grobner-calls             3
 :arith-grobner-conflicts         2
 :arith-horner-calls              3
 :arith-horner-cross-nested-forms 4
 :arith-lower                     34
 :arith-make-feasible             38
 :arith-max-columns               55
 :arith-max-rows                  8
 :arith-nla-explanations          26
 :arith-nla-lemmas                51
 :arith-propagations              24
 :arith-upper                     34
 :conflicts                       9
 :decisions                       79
 :del-clause                      126
 :final-checks                    22
 :max-memory                      1.94
 :memory                          1.06
 :mk-bool-var                     153
 :mk-clause                       148
 :num-allocs                      560882
 :num-checks                      1
 :propagations                    86
 :rlimit-count                    5397
 :time                            0.01
 :total-time                      0.01)
