unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x906 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x758 (<= ?x906 0)))
 (let (($x723 (= ?x906 0)))
 (let ((?x1137 (* x00 y!0)))
 (let ((?x278 (* 3 (* y!0 y!0 x!1))))
 (let ((?x214 (* 3 (* x00 x!1 x!1))))
 (let ((?x180 (* 3 (* y00 x!1 x!1))))
 (let ((?x881 (* y!0 y!0 x!1 x!1 x!1)))
 (let ((?x177 (* (- 1) (* y00 y!0 x!1 x!1 x!1))))
 (let ((?x551 (* (- 3) (* y00 y!0 x!1))))
 (let ((?x681 (* y00 y!0)))
 (let ((?x584 (* x!1 x!1)))
 (let ((?x707 (* 3 ?x584)))
 (let ((?x577 (* y!0 y!0)))
 (let ((?x706 (* (- 1) ?x577)))
 (let ((?x536 (* y!0 x!1 x!1 x!1 x!1)))
 (let ((?x134 (* (- 2) x!1)))
 (let ((?x132 (* (- 2) y!0)))
 (let ((?x211 (* x!1 x!1 x!1 x!1)))
 (let ((?x544 (* (- 3) (* x00 y!0 x!1))))
 (let ((?x788 (* (- 1) (* x00 y!0 x!1 x!1 x!1))))
 (let ((?x89 (* x!1 x!1 x!1)))
 (let ((?x1123 (* (- 3) ?x89)))
 (let ((?x1127 (* 2 x00)))
 (let ((?x1126 (* 2 y00)))
 (let ((?x305 (+ ?x1126 ?x1127 ?x1123 ?x788 ?x544 ?x211 (* 3 (* x00 y!0 x!1 x!1)) ?x132 (* (- 3) (* x00 x!1)) ?x134 ?x536 (* 2 (* y!0 x!1)) ?x706 ?x707 ?x681 (* 3 (* y00 y!0 x!1 x!1)) ?x551 ?x177 (* (- 3) (* y00 x!1)) (* (- 3) (* y!0 y!0 x!1 x!1)) ?x881 (* (- 1) (* y00 x!1 x!1 x!1)) ?x180 ?x214 (* (- 1) (* x00 x!1 x!1 x!1)) ?x278 (* (- 2) (* y!0 x!1 x!1 x!1)) ?x1137)))
 (let (($x311 (= ?x305 0)))
 (let ((?x1027 (* x00 x!1 x!1 x!1)))
 (let ((?x899 (* y00 x!1 x!1 x!1)))
 (let ((?x709 (* (- 3) ?x584)))
 (let ((?x955 (* (- 1) ?x211)))
 (let ((?x552 (+ ?x1126 ?x1127 ?x1123 ?x788 ?x544 ?x955 (* (- 3) (* x00 y!0 x!1 x!1)) ?x132 (* 3 (* x00 x!1)) ?x134 ?x536 (* (- 2) (* y!0 x!1)) ?x577 ?x709 (* (- 1) ?x681) (* (- 3) (* y00 y!0 x!1 x!1)) ?x551 ?x177 (* 3 (* y00 x!1)) (* 3 (* y!0 y!0 x!1 x!1)) ?x881 ?x899 ?x180 ?x214 ?x1027 ?x278 (* 2 (* y!0 x!1 x!1 x!1)) (* (- 1) ?x1137))))
 (let (($x215 (= ?x552 0)))
 (let (($x414 (not $x215)))
 (let (($x750 (or $x414 (not $x311))))
 (let (($x913 (and $x723 $x750)))
 (let ((?x592 (* (- 1) (* x!1 x!1 x!1 x!1 y!0))))
 (let ((?x397 (* 3 ?x89)))
 (let ((?x583 (* (- 1) (* x!1 x!1 x!1 y!0 y!0))))
 (let ((?x735 (* (- 3) (* x!1 y!0 y!0))))
 (let ((?x576 (* x!1 x!1 x!1 y!0 x00)))
 (let ((?x233 (* 3 (* x!1 y!0 x00))))
 (let ((?x216 (* x!1 x!1 x!1 x00)))
 (let ((?x85 (* (- 3) (* x!1 x!1 x00))))
 (let ((?x84 (* x!1 x!1 x!1 y00)))
 (let ((?x265 (* (- 3) (* x!1 x!1 y00))))
 (let ((?x83 (* x!1 x!1 x!1 y!0 y00)))
 (let ((?x79 (* 3 (* x!1 y!0 y00))))
 (let ((?x310 (* (- 2) x00)))
 (let ((?x296 (* (- 2) y00)))
 (let ((?x564 (* 2 y!0)))
 (let ((?x286 (* 2 x!1)))
 (let ((?x680 (+ ?x286 ?x564 ?x296 ?x310 (* (- 1) (* y!0 y00)) ?x79 (* (- 3) (* x!1 x!1 y!0 y00)) ?x83 (* 3 (* x!1 y00)) ?x265 ?x84 (* 3 (* x!1 x00)) ?x85 ?x216 (* (- 1) (* y!0 x00)) ?x233 (* (- 3) (* x!1 x!1 y!0 x00)) ?x576 ?x577 ?x735 (* 3 (* x!1 x!1 y!0 y!0)) ?x583 ?x709 ?x397 (* (- 2) (* x!1 y!0)) (* 2 (* x!1 x!1 x!1 y!0)) ?x592 ?x955)))
 (let ((?x734 (* y!0 x00)))
 (let ((?x568 (* y!0 y00)))
 (let ((?x700 (+ ?x286 ?x564 ?x296 ?x310 ?x568 ?x79 (* 3 (* x!1 x!1 y!0 y00)) ?x83 (* (- 3) (* x!1 y00)) ?x265 (* (- 1) ?x84) (* (- 3) (* x!1 x00)) ?x85 (* (- 1) ?x216) ?x734 ?x233 (* 3 (* x!1 x!1 y!0 x00)) ?x576 ?x706 ?x735 (* (- 3) (* x!1 x!1 y!0 y!0)) ?x583 ?x707 ?x397 (* 2 (* x!1 y!0)) (* (- 2) (* x!1 x!1 x!1 y!0)) ?x592 ?x211)))
 (let (($x898 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x700 0)) (not (= ?x680 0))))))
 (let (($x543 (exists ((x Int) (y Int) )(! (let ((?x652 (* x x x x)))
 (let ((?x714 (* (- 1) ?x652)))
 (let ((?x713 (* (- 1) (* x x x x y))))
 (let ((?x421 (* x x x y)))
 (let ((?x456 (* 2 ?x421)))
 (let ((?x410 (* x y)))
 (let ((?x767 (* (- 2) ?x410)))
 (let ((?x724 (* 3 (* x x x))))
 (let ((?x396 (* x x)))
 (let ((?x766 (* (- 3) ?x396)))
 (let ((?x487 (* (- 1) (* x x x y y))))
 (let ((?x384 (* x x y y)))
 (let ((?x526 (* 3 ?x384)))
 (let ((?x550 (* (- 3) (* x y y))))
 (let ((?x372 (* y y)))
 (let ((?x263 (* x x x y x00)))
 (let ((?x249 (* x x y x00)))
 (let ((?x272 (* (- 3) ?x249)))
 (let ((?x242 (* x y x00)))
 (let ((?x829 (* 3 ?x242)))
 (let ((?x234 (* y x00)))
 (let ((?x237 (* (- 1) ?x234)))
 (let ((?x229 (* x x x x00)))
 (let ((?x221 (* x x x00)))
 (let ((?x828 (* (- 3) ?x221)))
 (let ((?x148 (* x x x y00)))
 (let ((?x140 (* x x y00)))
 (let ((?x473 (* (- 3) ?x140)))
 (let ((?x129 (* x x x y y00)))
 (let ((?x127 (* x x y y00)))
 (let ((?x170 (* (- 3) ?x127)))
 (let ((?x123 (* x y y00)))
 (let ((?x474 (* 3 ?x123)))
 (let ((?x115 (* y y00)))
 (let ((?x116 (* (- 1) ?x115)))
 (let ((?x310 (* (- 2) x00)))
 (let ((?x296 (* (- 2) y00)))
 (let ((?x501 (* 2 y)))
 (let ((?x449 (* 2 x)))
 (let ((?x429 (+ ?x449 ?x501 ?x296 ?x310 ?x116 ?x474 ?x170 ?x129 (* 3 (* x y00)) ?x473 ?x148 (* 3 (* x x00)) ?x828 ?x229 ?x237 ?x829 ?x272 ?x263 ?x372 ?x550 ?x526 ?x487 ?x766 ?x724 ?x767 ?x456 ?x713 ?x714)))
 (let ((?x1128 (+ ?x449 ?x501 ?x296 ?x310 ?x115 ?x474 (* 3 ?x127) ?x129 (* (- 3) (* x y00)) ?x473 (* (- 1) ?x148) (* (- 3) (* x x00)) ?x828 (* (- 1) ?x229) ?x234 ?x829 (* 3 ?x249) ?x263 (* (- 1) ?x372) ?x550 (* (- 3) ?x384) ?x487 (* 3 ?x396) ?x724 (* 2 ?x410) (* (- 2) ?x421) ?x713 ?x652)))
 (let (($x279 (not (= ?x1128 0))))
 (let (($x93 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x93 (or $x279 (not (= ?x429 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x287 (exists ((x Int) (y Int) )(! (let ((?x512 (+ 1 x)))
 (let ((?x388 (+ (- 1) y)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x753 (+ (* y00 ?x388 ?x512 ?x512 ?x512) (* x00 ?x388 ?x512 ?x512 ?x512) x ?x67 ?x74 y (* (- 1) (* ?x388 ?x388 ?x512 ?x512 ?x512)) (* (- 1) (* ?x388 ?x512 ?x512 ?x512 ?x512)))))
 (let ((?x285 (+ 1 y)))
 (let ((?x666 (+ (- 1) x)))
 (let ((?x505 (+ (* y00 ?x666 ?x666 ?x666 ?x285) (* x00 ?x666 ?x666 ?x666 ?x285) x ?x67 ?x74 y (* (- 1) (* ?x666 ?x666 ?x666 ?x285 ?x285)) (* (- 1) (* ?x666 ?x666 ?x666 ?x666 ?x285)))))
 (and (= (+ x ?x67 ?x74 y) 0) (or (not (= ?x505 0)) (not (= ?x753 0)))))))))))) :qid k!27))
 ))
 (let ((?x530 (lambda ((x Int) (y Int) )(let ((?x652 (* x x x x)))
 (let ((?x714 (* (- 1) ?x652)))
 (let ((?x713 (* (- 1) (* x x x x y))))
 (let ((?x421 (* x x x y)))
 (let ((?x456 (* 2 ?x421)))
 (let ((?x410 (* x y)))
 (let ((?x767 (* (- 2) ?x410)))
 (let ((?x724 (* 3 (* x x x))))
 (let ((?x396 (* x x)))
 (let ((?x766 (* (- 3) ?x396)))
 (let ((?x487 (* (- 1) (* x x x y y))))
 (let ((?x384 (* x x y y)))
 (let ((?x526 (* 3 ?x384)))
 (let ((?x550 (* (- 3) (* x y y))))
 (let ((?x372 (* y y)))
 (let ((?x263 (* x x x y x00)))
 (let ((?x249 (* x x y x00)))
 (let ((?x272 (* (- 3) ?x249)))
 (let ((?x242 (* x y x00)))
 (let ((?x829 (* 3 ?x242)))
 (let ((?x234 (* y x00)))
 (let ((?x237 (* (- 1) ?x234)))
 (let ((?x229 (* x x x x00)))
 (let ((?x221 (* x x x00)))
 (let ((?x828 (* (- 3) ?x221)))
 (let ((?x148 (* x x x y00)))
 (let ((?x140 (* x x y00)))
 (let ((?x473 (* (- 3) ?x140)))
 (let ((?x129 (* x x x y y00)))
 (let ((?x127 (* x x y y00)))
 (let ((?x170 (* (- 3) ?x127)))
 (let ((?x123 (* x y y00)))
 (let ((?x474 (* 3 ?x123)))
 (let ((?x115 (* y y00)))
 (let ((?x116 (* (- 1) ?x115)))
 (let ((?x310 (* (- 2) x00)))
 (let ((?x296 (* (- 2) y00)))
 (let ((?x501 (* 2 y)))
 (let ((?x449 (* 2 x)))
 (let ((?x429 (+ ?x449 ?x501 ?x296 ?x310 ?x116 ?x474 ?x170 ?x129 (* 3 (* x y00)) ?x473 ?x148 (* 3 (* x x00)) ?x828 ?x229 ?x237 ?x829 ?x272 ?x263 ?x372 ?x550 ?x526 ?x487 ?x766 ?x724 ?x767 ?x456 ?x713 ?x714)))
 (let ((?x1128 (+ ?x449 ?x501 ?x296 ?x310 ?x115 ?x474 (* 3 ?x127) ?x129 (* (- 3) (* x y00)) ?x473 (* (- 1) ?x148) (* (- 3) (* x x00)) ?x828 (* (- 1) ?x229) ?x234 ?x829 (* 3 ?x249) ?x263 (* (- 1) ?x372) ?x550 (* (- 3) ?x384) ?x487 (* 3 ?x396) ?x724 (* 2 ?x410) (* (- 2) ?x421) ?x713 ?x652)))
 (let (($x279 (not (= ?x1128 0))))
 (let (($x93 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1026 (and $x93 (or $x279 (not (= ?x429 0))))))
 (let ((?x512 (+ 1 x)))
 (let ((?x388 (+ (- 1) y)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x753 (+ (* y00 ?x388 ?x512 ?x512 ?x512) (* x00 ?x388 ?x512 ?x512 ?x512) x ?x67 ?x74 y (* (- 1) (* ?x388 ?x388 ?x512 ?x512 ?x512)) (* (- 1) (* ?x388 ?x512 ?x512 ?x512 ?x512)))))
 (let ((?x285 (+ 1 y)))
 (let ((?x666 (+ (- 1) x)))
 (let ((?x505 (+ (* y00 ?x666 ?x666 ?x666 ?x285) (* x00 ?x666 ?x666 ?x666 ?x285) x ?x67 ?x74 y (* (- 1) (* ?x666 ?x666 ?x666 ?x285 ?x285)) (* (- 1) (* ?x666 ?x666 ?x666 ?x666 ?x285)))))
 (let (($x571 (and (= (+ x ?x67 ?x74 y) 0) (or (not (= ?x505 0)) (not (= ?x753 0))))))
 (rewrite (= $x571 $x1026))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x64 (exists ((x Int) (y Int) )(! (let ((?x49 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x52 (+ (* ?x48 ?x48 ?x48 ?x49 y00) (* ?x48 ?x48 ?x48 x00 ?x49) x 1)))
 (let ((?x59 (- (- (+ (- (- ?x52 y00) x00) ?x49) (* ?x48 ?x48 ?x48 ?x49 ?x49)) (* ?x48 ?x48 ?x48 ?x48 ?x49))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x38 (+ (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35) ?x34)))
 (let ((?x44 (- (+ (- (- ?x38 y00) x00) y 1) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let (($x62 (or (not (= (- ?x44 (* ?x34 ?x34 ?x34 ?x34 ?x35)) 0)) (not (= ?x59 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x62)))))))))) :qid k!27))
 ))
 (let ((?x288 (lambda ((x Int) (y Int) )(let ((?x512 (+ 1 x)))
 (let ((?x388 (+ (- 1) y)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x753 (+ (* y00 ?x388 ?x512 ?x512 ?x512) (* x00 ?x388 ?x512 ?x512 ?x512) x ?x67 ?x74 y (* (- 1) (* ?x388 ?x388 ?x512 ?x512 ?x512)) (* (- 1) (* ?x388 ?x512 ?x512 ?x512 ?x512)))))
 (let ((?x285 (+ 1 y)))
 (let ((?x666 (+ (- 1) x)))
 (let ((?x505 (+ (* y00 ?x666 ?x666 ?x666 ?x285) (* x00 ?x666 ?x666 ?x666 ?x285) x ?x67 ?x74 y (* (- 1) (* ?x666 ?x666 ?x666 ?x285 ?x285)) (* (- 1) (* ?x666 ?x666 ?x666 ?x666 ?x285)))))
 (let (($x571 (and (= (+ x ?x67 ?x74 y) 0) (or (not (= ?x505 0)) (not (= ?x753 0))))))
 (let ((?x49 (- y 1)))
 (let ((?x48 (+ x 1)))
 (let ((?x52 (+ (* ?x48 ?x48 ?x48 ?x49 y00) (* ?x48 ?x48 ?x48 x00 ?x49) x 1)))
 (let ((?x59 (- (- (+ (- (- ?x52 y00) x00) ?x49) (* ?x48 ?x48 ?x48 ?x49 ?x49)) (* ?x48 ?x48 ?x48 ?x48 ?x49))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x38 (+ (* ?x34 ?x34 ?x34 ?x35 y00) (* ?x34 ?x34 ?x34 x00 ?x35) ?x34)))
 (let ((?x44 (- (+ (- (- ?x38 y00) x00) y 1) (* ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let (($x62 (or (not (= (- ?x44 (* ?x34 ?x34 ?x34 ?x34 ?x35)) 0)) (not (= ?x59 0)))))
 (let (($x63 (and (= (+ (- (- x y00) x00) y) 0) $x62)))
 (rewrite (= $x63 $x571))))))))))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x128 (mp (mp @x65 (quant-intro (proof-bind ?x288) (= $x64 $x287)) $x287) (rewrite (= $x287 $x287)) $x287)))
 (let ((@x710 (mp~ (mp @x128 (quant-intro (proof-bind ?x530) (= $x287 $x543)) $x543) (sk (~ $x543 $x898)) $x898)))
 (let ((@x757 (mp @x710 (rewrite (= $x898 $x913)) $x913)))
 (let ((@x887 (and-elim @x757 $x723)))
 (let ((@x364 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x723) $x758)) @x887 $x758)))
 (let (($x759 (>= ?x906 0)))
 (let ((@x367 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x723) $x759)) @x887 $x759)))
 (let (($x238 (<= ?x305 0)))
 (let ((@x1096 (lemma ((_ th-lemma arith) (hypothesis (not $x238)) @x367 @x364 @x367 @x364 false) $x238)))
 (let (($x502 (>= ?x305 0)))
 (let ((@x1074 (lemma ((_ th-lemma arith) (hypothesis (not $x502)) @x367 @x364 @x367 @x364 false) $x502)))
 (let (($x1078 (not (<= ?x552 0))))
 (let ((@x566 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x311 (not $x238) (not $x502))) @x1096 @x1074 $x311)))
 (let (($x715 (>= ?x552 0)))
 (let ((@x1059 (lemma ((_ th-lemma arith) (hypothesis (not $x715)) @x1074 @x1096 @x367 @x364 false) $x715)))
 (let ((@x657 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x215 $x1078 (not $x715))) @x1059 (unit-resolution (and-elim @x757 $x750) @x566 $x414) $x1078)))
 ((_ th-lemma arith) @x657 @x1074 @x1096 @x367 @x364 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        4
 :arith-assert-lower        21
 :arith-assert-upper        8
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           12
 :arith-grobner             4
 :arith-max-min             432
 :arith-nonlinear-bounds    16
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             8
 :arith-patches_succ        8
 :arith-pivots              4
 :arith-row-summations      3
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 5
 :del-clause                3
 :final-checks              8
 :max-memory                19.68
 :memory                    19.23
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                513731
 :num-checks                1
 :propagations              13
 :rlimit-count              4943
 :time                      0.01
 :total-time                0.04)
