unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x529 (* (- 1) y!0)))
 (let ((?x276 (+ y00 x00 (* (- 1) x!1) ?x529)))
 (let (($x611 (>= ?x276 0)))
 (let (($x277 (= ?x276 0)))
 (let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x271 (+ ?x68 ?x75 x!1 y!0)))
 (let ((?x513 (* x!1 x!1)))
 (let ((?x255 (* (- 3) ?x513)))
 (let ((?x369 (* (- 3) x!1)))
 (let ((?x259 (+ 1 x!1)))
 (let ((?x345 (+ (- 1) y!0)))
 (let ((?x375 (* (- 1) (* ?x345 ?x345 ?x345 ?x259 ?x259 ?x259))))
 (let ((?x223 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x821 (* x!1 y!0 y!0 y!0)))
 (let ((?x816 (* y!0 y!0 y!0)))
 (let ((?x568 (* x!1 y!0)))
 (let ((?x569 (* 3 ?x568)))
 (let ((?x550 (* x!1 y!0 y!0)))
 (let ((?x186 (* (- 3) ?x550)))
 (let ((?x489 (* y!0 y!0)))
 (let ((?x294 (* (- 3) ?x489)))
 (let ((?x372 (* (- 4) x!1)))
 (let ((?x699 (* (+ (- 2) ?x223 ?x372 ?x294 ?x255 ?x186 (* 3 y!0) ?x569 ?x816 ?x821) (+ (- 1) ?x223 ?x375 ?x369 ?x255) ?x271)))
 (let (($x700 (= ?x699 0)))
 (let (($x684 (not $x700)))
 (let ((?x566 (* 3 ?x513)))
 (let ((?x370 (+ 1 y!0)))
 (let ((?x218 (+ (- 1) x!1)))
 (let ((?x190 (* (- 1) (* ?x218 ?x218 ?x218 ?x370 ?x370 ?x370))))
 (let ((?x820 (* (- 1) ?x816)))
 (let ((?x209 (* 3 ?x550)))
 (let ((?x583 (* (- 2) x!1)))
 (let ((?x450 (* (+ ?x223 ?x583 ?x294 ?x566 ?x209 (* (- 3) y!0) ?x569 ?x820 ?x821) (+ 1 ?x223 ?x190 ?x369 ?x566) ?x271)))
 (let (($x555 (= ?x450 0)))
 (let (($x703 (or (not $x555) $x684)))
 (let (($x355 (and $x277 $x703)))
 (let ((?x469 (+ x!1 y!0 ?x68 ?x75)))
 (let ((?x516 (* (- 1) (* y!0 y!0 1))))
 (let ((?x346 (+ (- 2) ?x372 (* 2 y!0) (* (- 1) (* y!0 (- 1) x!1)) ?x516 (* (- 2) ?x489) ?x816 ?x821 ?x255 (* 2 ?x568) ?x186 (* (- 1) (* y!0 (- 1) 1)) ?x223)))
 (let ((?x243 (+ ?x583 ?x529 (* (- 1) (* y!0 1 1)) (* (- 1) (* y!0 1)) ?x516 (* (- 1) (* y!0 1 y!0)) (* (- 1) ?x489) ?x820 ?x821 ?x566 ?x569 ?x209 ?x223)))
 (let (($x177 (or (not (= (* ?x243 (+ 1 ?x369 ?x566 ?x223 ?x190) ?x469) 0)) (not (= (* ?x346 (+ (- 1) ?x369 ?x255 ?x223 ?x375) ?x469) 0)))))
 (let (($x174 (and (= ?x469 0) $x177)))
 (let (($x348 (exists ((x Int) (y Int) )(! (let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x89 (+ x y ?x68 ?x75)))
 (let ((?x487 (+ 1 x)))
 (let ((?x134 (+ (- 1) y)))
 (let ((?x495 (* (- 1) (* ?x134 ?x134 ?x134 ?x487 ?x487 ?x487))))
 (let ((?x472 (* (- 1) (* x x x))))
 (let ((?x332 (* x x)))
 (let ((?x452 (* (- 3) ?x332)))
 (let ((?x488 (* (- 3) x)))
 (let ((?x356 (* x y y)))
 (let ((?x831 (* (- 3) ?x356)))
 (let ((?x309 (* x y y y)))
 (let ((?x297 (* y y y)))
 (let ((?x206 (* (- 1) (* y y 1))))
 (let ((?x829 (* 2 y)))
 (let ((?x305 (+ (- 2) (* (- 4) x) ?x829 (* (- 1) (* y (- 1) x)) ?x206 (* (- 2) (* y y)) ?x297 ?x309 ?x452 (* 2 (* x y)) ?x831 (* (- 1) (* y (- 1) 1)) ?x472)))
 (let ((?x565 (+ 1 y)))
 (let ((?x525 (+ (- 1) x)))
 (let ((?x573 (* (- 1) (* ?x525 ?x525 ?x525 ?x565 ?x565 ?x565))))
 (let ((?x536 (* 3 ?x332)))
 (let ((?x571 (* 3 ?x356)))
 (let ((?x337 (* x y)))
 (let ((?x570 (* 3 ?x337)))
 (let ((?x298 (* (- 1) ?x297)))
 (let ((?x274 (* y y)))
 (let ((?x275 (* (- 1) ?x274)))
 (let ((?x252 (* (- 1) (* y 1 y))))
 (let ((?x183 (* (- 1) (* y 1))))
 (let ((?x160 (* (- 1) (* y 1 1))))
 (let ((?x558 (* (- 1) y)))
 (let ((?x401 (* (- 2) x)))
 (let ((?x166 (+ ?x401 ?x558 ?x160 ?x183 ?x206 ?x252 ?x275 ?x298 ?x309 ?x536 ?x570 ?x571 ?x472)))
 (let (($x785 (or (not (= (* ?x166 (+ 1 ?x488 ?x536 ?x472 ?x573) ?x89) 0)) (not (= (* ?x305 (+ (- 1) ?x488 ?x452 ?x472 ?x495) ?x89) 0)))))
 (let (($x94 (= ?x89 0)))
 (and $x94 $x785)))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x140 (exists ((x Int) (y Int) )(! (let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x484 (+ x ?x68 ?x75 y)))
 (let ((?x822 (* (- 1) (* (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x487 (+ 1 x)))
 (let ((?x134 (+ (- 1) y)))
 (let ((?x495 (* (- 1) (* ?x134 ?x134 ?x134 ?x487 ?x487 ?x487))))
 (let (($x532 (not (= (* (+ ?x822 (* ?x134 ?x134 ?x134 ?x487)) (+ ?x495 ?x822) ?x484) 0))))
 (let ((?x135 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x565 (+ 1 y)))
 (let ((?x525 (+ (- 1) x)))
 (let ((?x573 (* (- 1) (* ?x525 ?x525 ?x525 ?x565 ?x565 ?x565))))
 (let (($x526 (not (= (* (+ ?x135 (* ?x525 ?x565 ?x565 ?x565)) (+ ?x573 ?x135) ?x484) 0))))
 (and (= ?x484 0) (or $x526 $x532))))))))))))))) :qid k!27))
 ))
 (let ((?x366 (lambda ((x Int) (y Int) )(let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x89 (+ x y ?x68 ?x75)))
 (let ((?x487 (+ 1 x)))
 (let ((?x134 (+ (- 1) y)))
 (let ((?x495 (* (- 1) (* ?x134 ?x134 ?x134 ?x487 ?x487 ?x487))))
 (let ((?x472 (* (- 1) (* x x x))))
 (let ((?x332 (* x x)))
 (let ((?x452 (* (- 3) ?x332)))
 (let ((?x488 (* (- 3) x)))
 (let ((?x356 (* x y y)))
 (let ((?x831 (* (- 3) ?x356)))
 (let ((?x309 (* x y y y)))
 (let ((?x297 (* y y y)))
 (let ((?x206 (* (- 1) (* y y 1))))
 (let ((?x829 (* 2 y)))
 (let ((?x305 (+ (- 2) (* (- 4) x) ?x829 (* (- 1) (* y (- 1) x)) ?x206 (* (- 2) (* y y)) ?x297 ?x309 ?x452 (* 2 (* x y)) ?x831 (* (- 1) (* y (- 1) 1)) ?x472)))
 (let ((?x565 (+ 1 y)))
 (let ((?x525 (+ (- 1) x)))
 (let ((?x573 (* (- 1) (* ?x525 ?x525 ?x525 ?x565 ?x565 ?x565))))
 (let ((?x536 (* 3 ?x332)))
 (let ((?x571 (* 3 ?x356)))
 (let ((?x337 (* x y)))
 (let ((?x570 (* 3 ?x337)))
 (let ((?x298 (* (- 1) ?x297)))
 (let ((?x274 (* y y)))
 (let ((?x275 (* (- 1) ?x274)))
 (let ((?x252 (* (- 1) (* y 1 y))))
 (let ((?x183 (* (- 1) (* y 1))))
 (let ((?x160 (* (- 1) (* y 1 1))))
 (let ((?x558 (* (- 1) y)))
 (let ((?x401 (* (- 2) x)))
 (let ((?x166 (+ ?x401 ?x558 ?x160 ?x183 ?x206 ?x252 ?x275 ?x298 ?x309 ?x536 ?x570 ?x571 ?x472)))
 (let (($x785 (or (not (= (* ?x166 (+ 1 ?x488 ?x536 ?x472 ?x573) ?x89) 0)) (not (= (* ?x305 (+ (- 1) ?x488 ?x452 ?x472 ?x495) ?x89) 0)))))
 (let (($x94 (= ?x89 0)))
 (let (($x242 (and $x94 $x785)))
 (let ((?x484 (+ x ?x68 ?x75 y)))
 (let ((?x329 (* (+ (* (- 1) (* ?x487 ?x487 ?x487)) (* ?x134 ?x134 ?x134 ?x487)) (+ ?x495 (* (- 1) (* ?x487 ?x487 ?x487))) ?x484)))
 (let ((?x473 (* (+ (* (- 1) (* ?x525 ?x525 ?x525)) (* ?x525 ?x565 ?x565 ?x565)) (+ ?x573 (* (- 1) (* ?x525 ?x525 ?x525))) ?x484)))
 (let (($x533 (and (= ?x484 0) (or (not (= ?x473 0)) (not (= ?x329 0))))))
 (rewrite (= $x533 $x242)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x65 (exists ((x Int) (y Int) )(! (let ((?x59 (+ (* (- 1) (+ x 1) (+ x 1) (+ x 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x60 (* (+ (- (- ?x49 y00) x00) ?x52) (- (* ?x38 ?x49 ?x49 ?x49 ?x52 ?x52 ?x52) (* ?x49 ?x49 ?x49)) ?x59)))
 (let ((?x45 (+ (* ?x38 (- x 1) (- x 1) (- x 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (- (* ?x38 ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34)) ?x45)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x60 0))))))))))))) :qid k!27))
 ))
 (let ((?x548 (lambda ((x Int) (y Int) )(let ((?x75 (* (- 1) x00)))
 (let ((?x68 (* (- 1) y00)))
 (let ((?x484 (+ x ?x68 ?x75 y)))
 (let ((?x822 (* (- 1) (* (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x487 (+ 1 x)))
 (let ((?x134 (+ (- 1) y)))
 (let ((?x495 (* (- 1) (* ?x134 ?x134 ?x134 ?x487 ?x487 ?x487))))
 (let (($x532 (not (= (* (+ ?x822 (* ?x134 ?x134 ?x134 ?x487)) (+ ?x495 ?x822) ?x484) 0))))
 (let ((?x135 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x565 (+ 1 y)))
 (let ((?x525 (+ (- 1) x)))
 (let ((?x573 (* (- 1) (* ?x525 ?x525 ?x525 ?x565 ?x565 ?x565))))
 (let (($x526 (not (= (* (+ ?x135 (* ?x525 ?x565 ?x565 ?x565)) (+ ?x573 ?x135) ?x484) 0))))
 (let (($x533 (and (= ?x484 0) (or $x526 $x532))))
 (let ((?x59 (+ (* (- 1) (+ x 1) (+ x 1) (+ x 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x60 (* (+ (- (- ?x49 y00) x00) ?x52) (- (* ?x38 ?x49 ?x49 ?x49 ?x52 ?x52 ?x52) (* ?x49 ?x49 ?x49)) ?x59)))
 (let ((?x45 (+ (* ?x38 (- x 1) (- x 1) (- x 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (- (* ?x38 ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34)) ?x45)))
 (let (($x64 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x60 0))))))
 (rewrite (= $x64 $x533)))))))))))))))))))))))))))
 ))
 (let ((@x66 (asserted $x65)))
 (let ((@x128 (mp (mp @x66 (quant-intro (proof-bind ?x548) (= $x65 $x140)) $x140) (rewrite (= $x140 $x140)) $x140)))
 (let ((@x270 (mp~ (mp @x128 (quant-intro (proof-bind ?x366) (= $x140 $x348)) $x348) (sk (~ $x348 $x174)) $x174)))
 (let ((@x384 (mp @x270 (rewrite (= $x174 $x355)) $x355)))
 (let ((@x292 (and-elim @x384 $x277)))
 (let ((@x212 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x277) $x611)) @x292 $x611)))
 (let (($x690 (<= ?x276 0)))
 (let ((@x225 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x277) $x690)) @x292 $x690)))
 (let (($x179 (not (<= ?x699 0))))
 (let (($x311 (>= ?x699 0)))
 (let (($x470 (>= ?x450 0)))
 (let (($x631 (<= ?x450 0)))
 (let ((@x378 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x555 (not $x631) (not $x470))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x631)) @x225 @x212 false) $x631) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x470)) @x225 @x212 false) $x470) $x555)))
 (let ((@x689 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x700 $x179 (not $x311))) (unit-resolution (and-elim @x384 $x703) @x378 $x684) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x311)) @x225 @x212 false) $x311) $x179)))
 ((_ th-lemma arith farkas 1 1 1) @x689 @x225 @x212 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             168
 :arith-nonlinear-bounds    8
 :arith-num-rows            10
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.61
 :memory                    19.12
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                518842
 :num-checks                1
 :propagations              14
 :rlimit-count              2639
 :time                      0.01
 :total-time                0.02)
