unsat
((set-logic NIA)
(proof
(let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x53 (* y00 y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x45 (* ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (* ?x44 ?x44 y00 y00 y00)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x42 (* ?x28 y00 y00 y00)))
 (let ((?x46 (- ?x42 ?x45)))
 (let ((?x48 (+ ?x46 ?x47)))
 (let ((?x50 (- ?x48 ?x49)))
 (let ((?x51 (+ ?x50 ?x49)))
 (let ((?x52 (- ?x51 ?x47)))
 (let ((?x54 (+ ?x52 ?x45 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x57)))))))))))))))))))) :qid k!29))
 ))
 (let (($x520 (= $x59 false)))
 (let (($x513 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x519 (elim-unused (= $x513 false))))
 (let (($x516 (= $x59 $x513)))
 (let ((?x613 (lambda ((q Int) (r Int) (y Int) )(let ((?x53 (* y00 y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x45 (* ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x47 (* ?x44 ?x44 y00 y00 y00)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x42 (* ?x28 y00 y00 y00)))
 (let ((?x46 (- ?x42 ?x45)))
 (let ((?x48 (+ ?x46 ?x47)))
 (let ((?x50 (- ?x48 ?x49)))
 (let ((?x51 (+ ?x50 ?x49)))
 (let ((?x52 (- ?x51 ?x47)))
 (let ((?x54 (+ ?x52 ?x45 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x58 (and $x33 $x41 $x57)))
 (let (($x511 (= $x58 false)))
 (let (($x544 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x422 (= (+ (* (- 1) y00) y) 0)))
 (let (($x607 (and $x422 $x544 false)))
 (let (($x504 (= $x57 false)))
 (let ((@x503 (rewrite (= (or false) false))))
 (let (($x499 (or false)))
 (let (($x500 (= $x57 $x499)))
 (let (($x497 (= $x56 false)))
 (let ((@x496 (rewrite (= (not true) false))))
 (let (($x492 (not true)))
 (let (($x493 (= $x56 $x492)))
 (let (($x490 (= $x55 true)))
 (let ((@x489 (rewrite (= (= 0 0) true))))
 (let (($x485 (= 0 0)))
 (let (($x486 (= $x55 $x485)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x88 (+ r ?x64)))
 (let ((?x82 (+ 1 q)))
 (let ((?x85 (* y00 y00 y00 ?x82 ?x82 ?x88 ?x88 ?x88)))
 (let ((?x527 (* (- 1) ?x85)))
 (let ((?x72 (* (- 1) ?x53)))
 (let ((?x531 (+ ?x72 ?x527)))
 (let ((?x595 (+ ?x531 ?x85 ?x53)))
 (let ((@x90 (rewrite (= ?x44 ?x88))))
 (let ((@x84 (rewrite (= ?x43 ?x82))))
 (let ((@x94 (monotonicity @x84 @x84 @x90 @x90 @x90 (= ?x45 (* ?x82 ?x82 ?x88 ?x88 ?x88 y00 y00 y00)))))
 (let ((@x420 (trans @x94 (rewrite (= (* ?x82 ?x82 ?x88 ?x88 ?x88 y00 y00 y00) ?x85)) (= ?x45 ?x85))))
 (let ((?x540 (* y00 y00 y00 ?x88 ?x88)))
 (let ((?x551 (+ ?x72 ?x527 ?x540)))
 (let ((?x586 (+ ?x551 (* (- 1) ?x540))))
 (let ((@x331 (monotonicity @x90 @x90 (= ?x47 (* ?x88 ?x88 y00 y00 y00)))))
 (let ((@x546 (trans @x331 (rewrite (= (* ?x88 ?x88 y00 y00 y00) ?x540)) (= ?x47 ?x540))))
 (let ((?x556 (* y00 y00 y00 ?x88 ?x88 ?x88)))
 (let ((?x564 (* (- 1) ?x556)))
 (let ((?x570 (+ ?x72 ?x527 ?x540 ?x564)))
 (let ((?x575 (+ ?x570 ?x556)))
 (let ((@x389 (monotonicity @x90 @x90 @x90 (= ?x49 (* ?x88 ?x88 ?x88 y00 y00 y00)))))
 (let ((@x560 (trans @x389 (rewrite (= (* ?x88 ?x88 ?x88 y00 y00 y00) ?x556)) (= ?x49 ?x556))))
 (let ((@x71 (monotonicity (rewrite (= ?x28 (- 1))) (= ?x42 (* (- 1) y00 y00 y00)))))
 (let ((@x81 (trans @x71 (rewrite (= (* (- 1) y00 y00 y00) ?x72)) (= ?x42 ?x72))))
 (let ((@x538 (trans (monotonicity @x81 @x420 (= ?x46 (- ?x72 ?x85))) (rewrite (= (- ?x72 ?x85) ?x531)) (= ?x46 ?x531))))
 (let ((@x555 (trans (monotonicity @x538 @x546 (= ?x48 (+ ?x531 ?x540))) (rewrite (= (+ ?x531 ?x540) ?x551)) (= ?x48 ?x551))))
 (let ((@x569 (trans (monotonicity @x555 @x560 (= ?x50 (- ?x551 ?x556))) (rewrite (= (- ?x551 ?x556) (+ ?x551 ?x564))) (= ?x50 (+ ?x551 ?x564)))))
 (let ((@x577 (monotonicity (trans @x569 (rewrite (= (+ ?x551 ?x564) ?x570)) (= ?x50 ?x570)) @x560 (= ?x51 ?x575))))
 (let ((@x584 (monotonicity (trans @x577 (rewrite (= ?x575 ?x551)) (= ?x51 ?x551)) @x546 (= ?x52 (- ?x551 ?x540)))))
 (let ((@x594 (trans (trans @x584 (rewrite (= (- ?x551 ?x540) ?x586)) (= ?x52 ?x586)) (rewrite (= ?x586 ?x531)) (= ?x52 ?x531))))
 (let ((@x600 (trans (monotonicity @x594 @x420 (= ?x54 ?x595)) (rewrite (= ?x595 0)) $x55)))
 (let ((@x604 (trans (monotonicity (trans (monotonicity @x600 $x486) @x489 $x490) $x493) @x496 $x497)))
 (let ((@x609 (monotonicity (rewrite (= $x33 $x422)) (rewrite (= $x41 $x544)) (trans (monotonicity @x604 $x500) @x503 $x504) (= $x58 $x607))))
 (trans @x609 (rewrite (= $x607 false)) $x511))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (mp @x60 (trans (quant-intro (proof-bind ?x613) $x516) @x519 $x520) false))))))))))

(:max-memory   3.39
 :memory       3.11
 :mk-bool-var  5
 :num-allocs   895078
 :rlimit-count 407
 :time         0.01
 :total-time   0.01)
