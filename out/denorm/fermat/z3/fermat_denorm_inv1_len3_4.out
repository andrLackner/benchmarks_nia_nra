unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(declare-fun u!1 () Int)
(proof
(let ((?x269 (* v!0 v!0)))
 (let ((?x598 (* (- 1) ?x269)))
 (let ((?x153 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x483 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) ?x153 (* (- 4) r!2) ?x598 (* 2 v!0))))
 (let (($x188 (>= ?x483 0)))
 (let (($x485 (= ?x483 0)))
 (let ((?x145 (* (- 2) v!0)))
 (let ((?x472 (* 4 r!2)))
 (let ((?x160 (* (- 1) ?x153)))
 (let ((?x600 (* 2 u!1)))
 (let ((?x196 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x120 (* (- 2) u00)))
 (let ((?x104 (* (- 4) r00)))
 (let ((?x169 (+ ?x104 ?x120 ?x41 ?x46 ?x196 ?x600 ?x160 ?x472 ?x269 ?x145)))
 (let ((?x752 (* r!2 v!0)))
 (let ((?x139 (* (- 3) (* u!1 v!0))))
 (let ((?x721 (* u!1 u!1 v!0)))
 (let ((?x692 (* (- 9) ?x721)))
 (let ((?x380 (* (- 4) v!0)))
 (let ((?x270 (* (- 12) (* u!1 u!1 u!1 v!0))))
 (let ((?x154 (* (- 1) (* u!1 u!1 u!1 u!1 u!1 v!0))))
 (let ((?x607 (* (- 6) (* u!1 u!1 u!1 u!1 v!0))))
 (let ((?x431 (* (- 1) (* u!1 u!1 u!1 r!2 r!2 v!0))))
 (let ((?x156 (* (- 8) (* r!2 r!2 v!0))))
 (let ((?x569 (+ ?x156 ?x431 (* (- 6) (* u!1 u!1 r!2 r!2 v!0)) ?x607 (* (- 24) (* u!1 u!1 r!2 v!0)) (* (- 12) (* u!1 u!1 u!1 r!2 v!0)) ?x154 ?x270 ?x380 (* (- 12) (* u!1 r!2 r!2 v!0)) (* (- 16) (* u!1 r!2 v!0)) (* (- 2) (* u!1 u!1 u!1 u!1 r!2 v!0)) ?x692 ?x139 ?x752)))
 (let ((?x618 (* ?x569 ?x169)))
 (let (($x374 (= ?x618 0)))
 (let (($x312 (not $x374)))
 (let ((?x595 (* (- 1) ?x721)))
 (let ((?x509 (* (- 2) (* u!1 u!1 u!1 v!0 v!0))))
 (let ((?x603 (* 2 r!2)))
 (let ((?x597 (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x602 (* (- 2) ?x153)))
 (let ((?x669 (+ ?x602 ?x597 ?x603 ?x431 (* 2 (* u!1 u!1 u!1 r!2 v!0 v!0)) ?x598 (* 4 (* u!1 u!1 u!1 r!2 v!0)) ?x509 ?x145 ?x595 ?x752 (* (- 2) (* u!1 u!1 u!1 r!2 r!2)))))
 (let ((?x144 (* ?x669 ?x169)))
 (let (($x234 (= ?x144 0)))
 (let (($x570 (or (not $x234) $x312)))
 (let (($x281 (and $x485 $x570)))
 (let ((?x262 (+ ?x472 ?x600 ?x145 ?x104 ?x120 ?x41 ?x160 ?x269 ?x46 ?x196)))
 (let ((?x487 (* (- 1) (* r!2 r!2 u!1 u!1 u!1 v!0))))
 (let ((?x594 (+ ?x603 ?x145 ?x602 ?x598 ?x752 ?x487 (* (- 2) (* r!2 r!2 u!1 u!1 u!1)) (* 4 (* r!2 u!1 u!1 u!1 v!0)) ?x509 (* 2 (* r!2 u!1 u!1 u!1 v!0 v!0)) ?x597 ?x595)))
 (let ((?x552 (+ ?x380 ?x752 ?x487 (* (- 12) (* r!2 u!1 u!1 u!1 v!0)) ?x692 ?x139 (* (- 2) (* r!2 u!1 u!1 u!1 u!1 v!0)) ?x154 ?x156 (* (- 16) (* r!2 u!1 v!0)) (* (- 12) (* r!2 r!2 u!1 v!0)) (* (- 24) (* r!2 u!1 u!1 v!0)) ?x270 (* (- 6) (* r!2 r!2 u!1 u!1 v!0)) ?x607)))
 (let (($x587 (and (= ?x262 0) (or (not (= (* ?x552 ?x262) 0)) (not (= (* ?x594 ?x262) 0))))))
 (let (($x610 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x196 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x174 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x120 (* (- 2) u00)))
 (let ((?x104 (* (- 4) r00)))
 (let ((?x150 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x202 (+ ?x28 ?x36 ?x150 ?x104 ?x120 ?x41 ?x174 ?x45 ?x46 ?x196)))
 (let ((?x441 (* (- 1) (* r r u u u v))))
 (let ((?x327 (* r v)))
 (let ((?x508 (+ (* 2 r) ?x150 (* (- 2) ?x43) (* (- 1) ?x45) ?x327 ?x441 (* (- 2) (* r r u u u)) (* 4 (* r u u u v)) (* (- 2) (* u u u v v)) (* 2 (* r u u u v v)) (* (- 1) (* u u u v v v)) (* (- 1) (* u u v)))))
 (let ((?x811 (+ (* (- 4) v) ?x327 ?x441 (* (- 12) (* r u u u v)) (* (- 9) (* u u v)) (* (- 3) (* u v)) (* (- 2) (* r u u u u v)) (* (- 1) (* u u u u u v)) (* (- 8) (* r r v)) (* (- 16) (* r u v)) (* (- 12) (* r r u v)) (* (- 24) (* r u u v)) (* (- 12) (* u u u v)) (* (- 6) (* r r u u v)) (* (- 6) (* u u u u v)))))
 (let (($x207 (= ?x202 0)))
 (and $x207 (or (not (= (* ?x811 ?x202) 0)) (not (= (* ?x508 ?x202) 0)))))))))))))))))))))) :qid k!28))
 ))
 (let (($x715 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x196 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x174 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x120 (* (- 2) u00)))
 (let ((?x104 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x296 (+ (- 4) ?x28 (* (- 6) v) ?x104 ?x120 ?x36 ?x41 ?x174 (* (+ 2 v) (+ 2 v)) ?x46 ?x196)))
 (let ((?x794 (+ r (* (- 1) v))))
 (let ((?x761 (+ 2 v)))
 (let ((?x384 (+ (* ?x761 ?x794) (* (- 1) (* ?x761 ?x794 ?x794 u u u)) (* (- 1) (* ?x761 u u)))))
 (let ((?x45 (* v v)))
 (let ((?x150 (* (- 2) v)))
 (let ((?x401 (+ 4 ?x28 (* 6 u) ?x104 ?x120 ?x150 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x196)))
 (let ((?x73 (+ r u)))
 (let ((?x769 (+ 2 u)))
 (let ((?x86 (* ?x73 v)))
 (let ((?x486 (+ ?x86 (* (- 1) (* ?x769 ?x769 ?x769 ?x73 ?x73 v)) (* (- 1) (* ?x769 ?x769 v)))))
 (and (= (+ ?x28 ?x104 ?x120 ?x36 ?x150 ?x41 ?x174 ?x45 ?x46 ?x196) 0) (or (not (= (* ?x486 ?x401) 0)) (not (= (* ?x384 ?x296) 0))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x341 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x196 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x174 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x120 (* (- 2) u00)))
 (let ((?x104 (* (- 4) r00)))
 (let ((?x150 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x202 (+ ?x28 ?x36 ?x150 ?x104 ?x120 ?x41 ?x174 ?x45 ?x46 ?x196)))
 (let ((?x441 (* (- 1) (* r r u u u v))))
 (let ((?x327 (* r v)))
 (let ((?x508 (+ (* 2 r) ?x150 (* (- 2) ?x43) (* (- 1) ?x45) ?x327 ?x441 (* (- 2) (* r r u u u)) (* 4 (* r u u u v)) (* (- 2) (* u u u v v)) (* 2 (* r u u u v v)) (* (- 1) (* u u u v v v)) (* (- 1) (* u u v)))))
 (let ((?x811 (+ (* (- 4) v) ?x327 ?x441 (* (- 12) (* r u u u v)) (* (- 9) (* u u v)) (* (- 3) (* u v)) (* (- 2) (* r u u u u v)) (* (- 1) (* u u u u u v)) (* (- 8) (* r r v)) (* (- 16) (* r u v)) (* (- 12) (* r r u v)) (* (- 24) (* r u u v)) (* (- 12) (* u u u v)) (* (- 6) (* r r u u v)) (* (- 6) (* u u u u v)))))
 (let (($x207 (= ?x202 0)))
 (let (($x582 (and $x207 (or (not (= (* ?x811 ?x202) 0)) (not (= (* ?x508 ?x202) 0))))))
 (let ((?x296 (+ (- 4) ?x28 (* (- 6) v) ?x104 ?x120 ?x36 ?x41 ?x174 (* (+ 2 v) (+ 2 v)) ?x46 ?x196)))
 (let ((?x794 (+ r (* (- 1) v))))
 (let ((?x761 (+ 2 v)))
 (let ((?x384 (+ (* ?x761 ?x794) (* (- 1) (* ?x761 ?x794 ?x794 u u u)) (* (- 1) (* ?x761 u u)))))
 (let ((?x401 (+ 4 ?x28 (* 6 u) ?x104 ?x120 ?x150 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x196)))
 (let ((?x73 (+ r u)))
 (let ((?x769 (+ 2 u)))
 (let ((?x86 (* ?x73 v)))
 (let ((?x486 (+ ?x86 (* (- 1) (* ?x769 ?x769 ?x769 ?x73 ?x73 v)) (* (- 1) (* ?x769 ?x769 v)))))
 (let (($x249 (and (= (+ ?x28 ?x104 ?x120 ?x36 ?x150 ?x41 ?x174 ?x45 ?x46 ?x196) 0) (or (not (= (* ?x486 ?x401) 0)) (not (= (* ?x384 ?x296) 0))))))
 (rewrite (= $x249 $x582))))))))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((r Int) (u Int) (v Int) )(! (let ((?x77 (+ u 2)))
 (let ((?x73 (+ r u)))
 (let ((?x86 (* ?x73 v)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 ?x73) (* 4 r00)) (* 2 u00)) (* 2 ?x77))))
 (let ((?x91 (* (- (+ (- (+ (- ?x79 ?x38) ?x41) (* ?x77 ?x77)) ?x45 ?x46) ?x48) (- (- ?x86 (* ?x73 ?x73 ?x77 ?x77 ?x77 v)) (* ?x77 ?x77 v)))))
 (let ((?x68 (- (* (- r v) (+ v 2)) (* (- r v) (- r v) u u u (+ v 2)))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x72 (not (= (* (- ?x63 ?x48) (- ?x68 (* u u (+ v 2)))) 0))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or $x72 (not (= ?x91 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x719 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x196 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x174 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x120 (* (- 2) u00)))
 (let ((?x104 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x296 (+ (- 4) ?x28 (* (- 6) v) ?x104 ?x120 ?x36 ?x41 ?x174 (* (+ 2 v) (+ 2 v)) ?x46 ?x196)))
 (let ((?x794 (+ r (* (- 1) v))))
 (let ((?x761 (+ 2 v)))
 (let ((?x384 (+ (* ?x761 ?x794) (* (- 1) (* ?x761 ?x794 ?x794 u u u)) (* (- 1) (* ?x761 u u)))))
 (let ((?x45 (* v v)))
 (let ((?x150 (* (- 2) v)))
 (let ((?x401 (+ 4 ?x28 (* 6 u) ?x104 ?x120 ?x150 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x196)))
 (let ((?x73 (+ r u)))
 (let ((?x769 (+ 2 u)))
 (let ((?x86 (* ?x73 v)))
 (let ((?x486 (+ ?x86 (* (- 1) (* ?x769 ?x769 ?x769 ?x73 ?x73 v)) (* (- 1) (* ?x769 ?x769 v)))))
 (let (($x249 (and (= (+ ?x28 ?x104 ?x120 ?x36 ?x150 ?x41 ?x174 ?x45 ?x46 ?x196) 0) (or (not (= (* ?x486 ?x401) 0)) (not (= (* ?x384 ?x296) 0))))))
 (let ((?x89 (- ?x86 (* ?x73 ?x73 (+ u 2) (+ u 2) (+ u 2) v))))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 ?x73) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let (($x92 (= (* (- ?x84 ?x48) (- ?x89 (* (+ u 2) (+ u 2) v))) 0)))
 (let ((?x68 (- (* (- r v) (+ v 2)) (* (- r v) (- r v) u u u (+ v 2)))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x72 (not (= (* (- ?x63 ?x48) (- ?x68 (* u u (+ v 2)))) 0))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x95 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or $x72 (not $x92)))))
 (rewrite (= $x95 $x249))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x299 (mp (mp @x97 (quant-intro (proof-bind ?x719) (= $x96 $x715)) $x715) (rewrite (= $x715 $x715)) $x715)))
 (let ((@x534 (mp~ (mp @x299 (quant-intro (proof-bind ?x341) (= $x715 $x610)) $x610) (sk (~ $x610 $x587)) $x587)))
 (let ((@x175 (mp @x534 (rewrite (= $x587 $x281)) $x281)))
 (let ((@x328 (and-elim @x175 $x485)))
 (let ((@x664 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x188)) @x328 $x188)))
 (let (($x170 (<= ?x483 0)))
 (let ((@x143 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x170)) @x328 $x170)))
 (let (($x702 (not (<= ?x618 0))))
 (let (($x162 (>= ?x618 0)))
 (let (($x232 (>= ?x144 0)))
 (let (($x511 (<= ?x144 0)))
 (let ((@x231 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x234 (not $x511) (not $x232))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x511)) @x143 @x664 false) $x511) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x232)) @x143 @x664 false) $x232) $x234)))
 (let ((@x366 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x374 $x702 (not $x162))) (unit-resolution (and-elim @x175 $x570) @x231 $x312) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x162)) @x143 @x664 false) $x162) $x702)))
 ((_ th-lemma arith farkas 1 1 1) @x366 @x143 @x664 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        33
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             248
 :arith-nonlinear-bounds    16
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.64
 :memory                    3.14
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1178776
 :num-checks                1
 :propagations              14
 :rlimit-count              4120
 :time                      0.01
 :total-time                0.01)
