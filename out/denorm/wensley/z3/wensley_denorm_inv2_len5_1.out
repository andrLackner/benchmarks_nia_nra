unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x585 (to_real b!2)))
 (let ((?x60 (to_real d00)))
 (let ((?x1091 (* ?x60 ?x585)))
 (let ((?x1062 (* (- (/ 1.0 2.0)) ?x1091)))
 (let ((?x621 (to_real d!1)))
 (let ((?x64 (to_real b00)))
 (let ((?x1098 (* ?x64 ?x621)))
 (let ((?x1105 (* (/ 1.0 2.0) ?x1098)))
 (let ((?x872 (+ ?x1105 ?x1062)))
 (let (($x260 (<= ?x872 0.0)))
 (let ((?x660 (+ ?x1098 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x320 (<= ?x660 0.0)))
 (let (($x1046 (= 0.0 ?x660)))
 (let ((@x1095 (symm (commutativity (= $x1046 (= ?x660 0.0))) (= (= ?x660 0.0) $x1046))))
 (let ((@x1096 (mp ((_ th-lemma arith) (= ?x660 0.0)) @x1095 $x1046)))
 (let ((@x477 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1046) $x320)) (lemma (unit-resolution (hypothesis (not $x1046)) @x1096 false) $x1046) $x320)))
 (let ((?x634 (* d00 b!2)))
 (let ((?x902 (+ ?x634 (* (- 1) (* b00 d!1)))))
 (let (($x566 (>= ?x902 0)))
 (let (($x275 (= 0 ?x902)))
 (let ((@x1084 (symm (commutativity (= $x275 (= ?x902 0))) (= (= ?x902 0) $x275))))
 (let (($x851 (= ?x902 0)))
 (let ((?x1143 (* (- (/ 1.0 32.0)) (* ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 (to_real a!3) (to_real y!0)))))
 (let ((?x1125 (* (- (/ 3.0 16.0)) (* ?x585 ?x585 ?x621 ?x621 ?x621 (to_real y!0) (to_real y!0)))))
 (let ((?x1060 (* (- (/ 1.0 64.0)) (* ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x621))))
 (let ((?x626 (to_real y!0)))
 (let ((?x1052 (* (- (/ 1.0 8.0)) (* ?x585 ?x585 ?x621 ?x621 ?x626 ?x626 ?x626))))
 (let ((?x192 (* (- (/ 1.0 64.0)) (* ?x585 ?x621 ?x621 ?x621 ?x621 ?x621 (to_real a!3)))))
 (let ((?x185 (* (/ 3.0 64.0) (* ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 (to_real a!3) ?x626))))
 (let ((?x624 (to_real a!3)))
 (let ((?x999 (* (/ 1.0 256.0) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x621 ?x624 ?x624))))
 (let ((?x1009 (* (/ 3.0 128.0) (* ?x585 ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x626))))
 (let ((?x1006 (* (/ 1.0 128.0) (* ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x621 ?x624))))
 (let ((?x796 (* (- (/ 1.0 128.0)) (* ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x621 ?x624))))
 (let ((?x972 (* (/ 3.0 32.0) (* ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x624 ?x626 ?x626))))
 (let ((?x970 (* (- (/ 3.0 16.0)) (* ?x585 ?x621 ?x621 ?x621 ?x624 ?x626 ?x626))))
 (let ((?x567 (* (/ 3.0 64.0) (* ?x585 ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x626 ?x626))))
 (let ((?x721 (* (- (/ 1.0 32.0)) (* ?x585 ?x585 ?x621 ?x621 ?x621 ?x624 ?x626 ?x626))))
 (let ((?x594 (* (/ 1.0 32.0) (* ?x585 ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x626 ?x626 ?x626))))
 (let ((?x685 (* (- (/ 1.0 8.0)) (* ?x585 ?x621 ?x621 ?x624 ?x626 ?x626 ?x626))))
 (let ((?x670 (* (- (/ 1.0 4.0)) (* ?x621 ?x621))))
 (let ((?x219 (* (/ 1.0 32.0) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x624 ?x624 ?x626 ?x626 ?x626))))
 (let ((?x722 (* (/ 1.0 256.0) (* ?x585 ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x621))))
 (let ((?x684 (* (- (/ 1.0 4.0)) (* ?x585 ?x585 ?x626))))
 (let ((?x794 (* (/ 3.0 128.0) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x624 ?x624 ?x626))))
 (let ((?x1112 (* (/ 3.0 64.0) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x624 ?x624 ?x626 ?x626))))
 (let ((?x129 (* (- (/ 1.0 8.0)) (* ?x585 ?x585 ?x621))))
 (let ((?x1040 (* (/ 1.0 16.0) (* ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x624 ?x626 ?x626 ?x626))))
 (let ((?x385 (* (- (/ 3.0 32.0)) (* ?x585 ?x621 ?x621 ?x621 ?x621 ?x624 ?x626))))
 (let ((?x1155 (* (- (/ 1.0 128.0)) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x621))))
 (let ((?x798 (* (- (/ 1.0 32.0)) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x626))))
 (let ((?x163 (* (- (/ 3.0 32.0)) (* ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x626))))
 (let ((?x174 (* (- (/ 1.0 32.0)) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x626 ?x626))))
 (let ((?x966 (+ ?x174 ?x163 ?x798 ?x1155 ?x385 ?x1040 ?x129 ?x1112 ?x794 ?x684 ?x722 ?x219 ?x670 ?x685 ?x594 ?x721 ?x567 ?x970 ?x972 ?x796 ?x1006 ?x1009 ?x999 ?x185 ?x192 ?x1052 ?x1060 ?x1125 ?x1143)))
 (let ((?x694 (* (+ ?x1062 ?x1105) ?x966)))
 (let (($x983 (= ?x694 0.0)))
 (let (($x978 (not $x983)))
 (let ((?x891 (* (/ 1.0 64.0) (* ?x64 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x624 ?x624 ?x626 ?x626 ?x626))))
 (let ((?x735 (* (- (/ 1.0 64.0)) (* ?x60 ?x585 ?x585 ?x585 ?x585 ?x621 ?x621 ?x624 ?x624 ?x626 ?x626 ?x626))))
 (let ((?x795 (+ (* (/ 1.0 16.0) (* ?x60 ?x585 ?x585 ?x621 ?x621 ?x624 ?x626 ?x626 ?x626)) (* (- (/ 1.0 8.0)) (* ?x64 ?x585 ?x585 ?x621 ?x626)) (* (/ 1.0 64.0) (* ?x60 ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x624 ?x626 ?x626)) (* (- (/ 1.0 64.0)) (* ?x64 ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x624 ?x626 ?x626)) ?x735 (* (- (/ 1.0 8.0)) (* ?x64 ?x621 ?x621 ?x621)) ?x891 (* (/ 1.0 8.0) (* ?x60 ?x585 ?x621 ?x621)) (* (- (/ 1.0 16.0)) (* ?x64 ?x585 ?x621 ?x621 ?x621 ?x624 ?x626 ?x626 ?x626)) (* (/ 1.0 8.0) (* ?x60 ?x585 ?x585 ?x585 ?x626)))))
 (let (($x746 (= ?x795 0.0)))
 (let (($x1076 (or (not $x746) $x978)))
 (let ((?x579 (* (- 2) (* b!2 y!0))))
 (let ((?x604 (* a!3 d!1)))
 (let (($x906 (= (+ ?x604 ?x579 (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1))) 0)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x1111 (= (+ ?x35 ?x107 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x869 (and $x1111 $x851 $x906 $x1076)))
 (let ((?x1144 (+ ?x219 ?x685 ?x670 ?x684 ?x594 ?x721 ?x722 ?x1006 ?x1009 ?x999 ?x185 ?x794 ?x567 ?x972 ?x1112 ?x1040 ?x1052 ?x1060 ?x192 ?x163 ?x385 ?x1125 ?x970 ?x129 ?x174 ?x1155 ?x796 ?x798 ?x1143)))
 (let (($x518 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x585 ?x60)) (* (/ 1.0 2.0) (* ?x621 ?x64))) ?x1144) 0.0)))
 (let ((?x635 (* (- (/ 1.0 64.0)) (* ?x585 ?x585 ?x585 ?x621 ?x621 ?x621 ?x64 ?x624 ?x624 ?x626 ?x626 ?x626))))
 (let ((?x633 (* (/ 1.0 64.0) (* ?x585 ?x585 ?x585 ?x585 ?x60 ?x621 ?x621 ?x624 ?x624 ?x626 ?x626 ?x626))))
 (let ((?x650 (+ ?x633 ?x635 (* (- (/ 1.0 16.0)) (* ?x585 ?x585 ?x60 ?x621 ?x621 ?x624 ?x626 ?x626 ?x626)) (* (/ 1.0 16.0) (* ?x585 ?x621 ?x621 ?x621 ?x64 ?x624 ?x626 ?x626 ?x626)) (* (- (/ 1.0 8.0)) (* ?x585 ?x60 ?x621 ?x621)) (* (/ 1.0 8.0) (* ?x621 ?x621 ?x621 ?x64)) (* (- (/ 1.0 8.0)) (* ?x585 ?x585 ?x585 ?x60 ?x626)) (* (/ 1.0 8.0) (* ?x585 ?x585 ?x621 ?x64 ?x626)) (* (- (/ 1.0 64.0)) (* ?x585 ?x585 ?x585 ?x60 ?x621 ?x621 ?x621 ?x624 ?x626 ?x626)) (* (/ 1.0 64.0) (* ?x585 ?x585 ?x621 ?x621 ?x621 ?x621 ?x64 ?x624 ?x626 ?x626)))))
 (let (($x620 (= (+ ?x604 ?x579 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x614 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x107 (* 2 (* y!0 b00))) 0)))
 (let (($x291 (and $x614 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x620 (or (not (= ?x650 0.0)) (not $x518)))))
 (let (($x223 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x254 (* (- (/ 1.0 4.0)) (* ?x62 ?x62))))
 (let ((?x1147 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) ?x254 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x68)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 3.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)))))
 (let ((?x205 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x405 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68))))
 (let ((?x404 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x62 ?x67 ?x68 ?x68))))
 (let ((?x428 (* (/ 1.0 16.0) (* ?x56 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68 ?x68))))
 (let ((?x427 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x64 (to_real b00)))
 (let ((?x425 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x60 (to_real d00)))
 (let ((?x424 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x407 (+ ?x424 ?x425 ?x427 ?x428 (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 ?x64)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 ?x64 ?x68)) ?x404 ?x405)))
 (let ((?x48 (* a d)))
 (let ((?x176 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x139 (= (+ ?x35 (* (- 1) (* a d00)) ?x107 (* 2 (* y b00))) 0)))
 (and $x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x176 0) (or (not (= ?x407 0.0)) (not (= (* ?x205 ?x1147) 0.0)))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x788 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x1130 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x346 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x254 (* (- (/ 1.0 4.0)) (* ?x62 ?x62))))
 (let ((?x728 (+ (* (/ 1.0 32.0) (* ?x62 ?x62 ?x56 ?x56 ?x56 ?x346 ?x346 ?x1130 ?x1130 ?x1130)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x346 ?x1130 ?x1130 ?x1130)) ?x254 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1130)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x346 ?x1130 ?x1130)))))
 (let ((?x348 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x1044 (+ (* (/ 1.0 32.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x67)) ?x254 (* (- (/ 1.0 4.0)) (* ?x68 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x529 (or (not (= (* ?x348 ?x1044) 0.0)) (not (= (* ?x348 ?x728) 0.0)))))
 (let ((?x545 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x362 (= ?x545 0)))
 (let ((?x560 (* d00 a)))
 (let ((?x774 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x560)))
 (and (= ?x774 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x362 $x529)))))))))))))))) :qid k!33))
 ))
 (let ((?x763 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x254 (* (- (/ 1.0 4.0)) (* ?x62 ?x62))))
 (let ((?x1147 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) ?x254 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x68)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x68 ?x68 ?x68)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 3.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 3.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x68 ?x68)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x68)))))
 (let ((?x205 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x405 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68))))
 (let ((?x404 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x62 ?x67 ?x68 ?x68))))
 (let ((?x428 (* (/ 1.0 16.0) (* ?x56 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x68 ?x68 ?x68))))
 (let ((?x427 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x64 (to_real b00)))
 (let ((?x425 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x60 (to_real d00)))
 (let ((?x424 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x67 ?x67 ?x68 ?x68 ?x68))))
 (let ((?x407 (+ ?x424 ?x425 ?x427 ?x428 (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 ?x64)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 ?x64 ?x68)) ?x404 ?x405)))
 (let ((?x48 (* a d)))
 (let ((?x176 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x139 (= (+ ?x35 (* (- 1) (* a d00)) ?x107 (* 2 (* y b00))) 0)))
 (let (($x1172 (and $x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x176 0) (or (not (= ?x407 0.0)) (not (= (* ?x205 ?x1147) 0.0))))))
 (let ((?x1130 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x346 (+ ?x67 ?x56)))
 (let ((?x728 (+ (* (/ 1.0 32.0) (* ?x62 ?x62 ?x56 ?x56 ?x56 ?x346 ?x346 ?x1130 ?x1130 ?x1130)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x346 ?x1130 ?x1130 ?x1130)) ?x254 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1130)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x346 ?x1130 ?x1130)))))
 (let ((?x348 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) (* (/ 1.0 2.0) (* ?x64 ?x62)))))
 (let ((?x1044 (+ (* (/ 1.0 32.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x67)) ?x254 (* (- (/ 1.0 4.0)) (* ?x68 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x529 (or (not (= (* ?x348 ?x1044) 0.0)) (not (= (* ?x348 ?x728) 0.0)))))
 (let ((?x545 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x362 (= ?x545 0)))
 (let ((?x560 (* d00 a)))
 (let (($x757 (= (+ (* 2 ?x106) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x560) 0)))
 (let (($x439 (and $x757 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x362 $x529)))
 (rewrite (= $x439 $x1172)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x354 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x1130 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x346 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x254 (* (- (/ 1.0 4.0)) (* ?x62 ?x62))))
 (let ((?x728 (+ (* (/ 1.0 32.0) (* ?x62 ?x62 ?x56 ?x56 ?x56 ?x346 ?x346 ?x1130 ?x1130 ?x1130)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x346 ?x1130 ?x1130 ?x1130)) ?x254 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1130)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x346 ?x1130 ?x1130)))))
 (let ((?x348 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x1044 (+ (* (/ 1.0 32.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x67)) ?x254 (* (- (/ 1.0 4.0)) (* ?x68 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x529 (or (not (= (* ?x348 ?x1044) 0.0)) (not (= (* ?x348 ?x728) 0.0)))))
 (let ((?x545 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x362 (= ?x545 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x1102 (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x1102 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x362 $x529)))))))))))))))))) :qid k!33))
 ))
 (let ((?x409 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x1130 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x346 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x254 (* (- (/ 1.0 4.0)) (* ?x62 ?x62))))
 (let ((?x728 (+ (* (/ 1.0 32.0) (* ?x62 ?x62 ?x56 ?x56 ?x56 ?x346 ?x346 ?x1130 ?x1130 ?x1130)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x346 ?x1130 ?x1130 ?x1130)) ?x254 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1130)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x346 ?x1130 ?x1130)))))
 (let ((?x348 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x1044 (+ (* (/ 1.0 32.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x67)) ?x254 (* (- (/ 1.0 4.0)) (* ?x68 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x529 (or (not (= (* ?x348 ?x1044) 0.0)) (not (= (* ?x348 ?x728) 0.0)))))
 (let ((?x545 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x362 (= ?x545 0)))
 (let ((?x560 (* d00 a)))
 (let ((?x774 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x560)))
 (let (($x439 (and (= ?x774 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x362 $x529)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x819 (and (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) ?x560)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x362 $x529)))
 (rewrite (= $x819 $x439)))))))))))))))))))))))
 ))
 (let (($x98 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x68 (to_real y)))
 (let ((?x83 (+ ?x68 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x71 (* ?x63 ?x63)))
 (let ((?x89 (- (* ?x84 ?x84 ?x58 ?x58 ?x58 ?x63 ?x63 ?x83 ?x83 ?x83) (* ?x84 ?x58 ?x63 ?x63 ?x83 ?x83 ?x83))))
 (let ((?x92 (- (- (- ?x89 ?x71) (* ?x58 ?x58 ?x83)) (* ?x84 ?x58 ?x58 ?x63 ?x63 ?x63 ?x83 ?x83))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x67 (to_real a)))
 (let ((?x74 (- (* ?x67 ?x67 ?x58 ?x58 ?x58 ?x63 ?x63 ?x68 ?x68 ?x68) (* ?x67 ?x58 ?x63 ?x63 ?x68 ?x68 ?x68))))
 (let ((?x77 (- (- (- ?x74 ?x71) (* ?x58 ?x58 ?x68)) (* ?x67 ?x58 ?x58 ?x63 ?x63 ?x63 ?x68 ?x68))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x77) ?x79)) (not (= (* ?x66 ?x92) ?x79)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x399 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x1130 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x346 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x254 (* (- (/ 1.0 4.0)) (* ?x62 ?x62))))
 (let ((?x728 (+ (* (/ 1.0 32.0) (* ?x62 ?x62 ?x56 ?x56 ?x56 ?x346 ?x346 ?x1130 ?x1130 ?x1130)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x346 ?x1130 ?x1130 ?x1130)) ?x254 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1130)) (* (- (/ 1.0 32.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x346 ?x1130 ?x1130)))))
 (let ((?x348 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x1044 (+ (* (/ 1.0 32.0) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x68 ?x68 ?x68 ?x62 ?x62 ?x56 ?x67)) ?x254 (* (- (/ 1.0 4.0)) (* ?x68 ?x56 ?x56)) (* (- (/ 1.0 32.0)) (* ?x68 ?x68 ?x62 ?x62 ?x62 ?x56 ?x56 ?x67)))))
 (let (($x529 (or (not (= (* ?x348 ?x1044) 0.0)) (not (= (* ?x348 ?x728) 0.0)))))
 (let ((?x545 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x362 (= ?x545 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x1102 (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x819 (and $x1102 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x362 $x529)))
 (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x83 (+ ?x68 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x71 (* ?x63 ?x63)))
 (let ((?x89 (- (* ?x84 ?x84 ?x58 ?x58 ?x58 ?x63 ?x63 ?x83 ?x83 ?x83) (* ?x84 ?x58 ?x63 ?x63 ?x83 ?x83 ?x83))))
 (let ((?x92 (- (- (- ?x89 ?x71) (* ?x58 ?x58 ?x83)) (* ?x84 ?x58 ?x58 ?x63 ?x63 ?x63 ?x83 ?x83))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x74 (- (* ?x67 ?x67 ?x58 ?x58 ?x58 ?x63 ?x63 ?x68 ?x68 ?x68) (* ?x67 ?x58 ?x63 ?x63 ?x68 ?x68 ?x68))))
 (let ((?x77 (- (- (- ?x74 ?x71) (* ?x58 ?x58 ?x68)) (* ?x67 ?x58 ?x58 ?x63 ?x63 ?x63 ?x68 ?x68))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x97 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x77) ?x79)) (not (= (* ?x66 ?x92) ?x79))))))
 (rewrite (= $x97 $x819))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x368 (mp (mp @x99 (quant-intro (proof-bind ?x399) (= $x98 $x354)) $x354) (rewrite (= $x354 $x354)) $x354)))
 (let ((@x905 (mp (mp @x368 (quant-intro (proof-bind ?x409) (= $x354 $x788)) $x788) (quant-intro (proof-bind ?x763) (= $x788 $x223)) $x223)))
 (let ((@x218 (mp (mp~ @x905 (sk (~ $x223 $x291)) $x291) (rewrite (= $x291 $x869)) $x869)))
 (let ((@x1090 (mp (and-elim @x218 $x851) @x1084 $x275)))
 (let ((@x283 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x275) $x566)) @x1090 $x566)))
 (let ((?x282 (+ (* (- 1.0) (to_real ?x634)) ?x1091)))
 (let (($x822 (>= ?x282 0.0)))
 (let (($x1034 (= ?x282 0.0)))
 (let ((@x250 (lemma (unit-resolution ((_ th-lemma arith) $x1034) (hypothesis (not $x1034)) false) $x1034)))
 (let ((@x357 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1034) $x822)) @x250 $x822) (hypothesis (not $x260)) (hypothesis $x320) @x283 false)))
 (let ((@x473 (unit-resolution (lemma @x357 (or (not $x320) $x260)) @x477 $x260)))
 (let ((?x824 (+ ?x972 ?x796 ?x1006 ?x1009 ?x999 ?x185 ?x192 ?x1052 ?x1060 ?x1125 ?x1143 ?x174 ?x163 ?x798 ?x1155 ?x385 ?x1040 ?x129 ?x1112 ?x794 ?x684 ?x722 ?x219 ?x670 ?x685 ?x594 ?x721 ?x567 ?x970)))
 (let (($x396 (>= ?x824 0.0)))
 (let (($x838 (not $x396)))
 (let (($x747 (<= ?x824 0.0)))
 (let (($x565 (>= ?x872 0.0)))
 (let (($x1033 (<= ?x282 0.0)))
 (let (($x756 (<= ?x902 0)))
 (let ((@x1092 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x275) $x756)) @x1090 $x756)))
 (let (($x1050 (>= ?x660 0.0)))
 (let ((@x1109 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1046) $x1050)) @x1096 $x1050) @x1092 (hypothesis (not $x565)) (hypothesis $x1033) false)))
 (let ((@x898 (unit-resolution (lemma @x1109 (or (not $x1033) $x565)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1034) $x1033)) @x250 $x1033) $x565)))
 (let (($x376 (not $x747)))
 (let ((@x472 (hypothesis $x376)))
 (let (($x1027 (>= ?x694 0.0)))
 (let (($x499 (not $x1027)))
 (let (($x1038 (<= ?x694 0.0)))
 (let (($x468 (not $x1038)))
 (let ((@x471 (hypothesis $x468)))
 (let ((@x474 (unit-resolution ((_ th-lemma arith) (or (not $x260) $x747 $x1038)) @x471 @x472 @x473 false)))
 (let ((@x877 (unit-resolution ((_ th-lemma arith) (or (not $x565) $x396 $x1038)) @x471 (hypothesis $x838) @x898 false)))
 (let (($x312 (= 0.0 ?x824)))
 (let (($x470 (not $x312)))
 (let ((@x465 (symm (commutativity (= $x312 (= ?x824 0.0))) (= (= ?x824 0.0) $x312))))
 (let (($x462 (= ?x824 0.0)))
 (let (($x484 (not $x462)))
 (let (($x568 (= 0.0 ?x795)))
 (let (($x867 (<= ?x795 0.0)))
 (let ((@x306 (unit-resolution ((_ th-lemma arith) (or $x867 (not $x566) (not $x756))) @x1092 @x283 (hypothesis (not $x867)) false)))
 (let (($x866 (>= ?x795 0.0)))
 (let ((@x298 (unit-resolution ((_ th-lemma arith) (or $x866 (not $x566) (not $x756))) @x1092 @x283 (hypothesis (not $x866)) false)))
 (let ((@x220 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x568 (not $x867) (not $x866))) (lemma @x298 $x866) (or $x568 (not $x867)))))
 (let ((@x351 (mp (unit-resolution @x220 (lemma @x306 $x867) $x568) (commutativity (= $x568 $x746)) $x746)))
 (let ((@x438 (unit-resolution (and-elim @x218 $x1076) @x351 $x978)))
 (let ((@x921 (unit-resolution ((_ th-lemma arith) (or $x484 $x983)) @x438 (hypothesis $x462) false)))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x312 $x376 $x838)) (mp (lemma @x921 $x484) (monotonicity @x465 (= $x484 $x470)) $x470) (or $x376 $x838))))
 (let ((@x435 (unit-resolution @x255 (unit-resolution (lemma @x877 (or $x396 $x1038)) @x471 $x396) (unit-resolution (lemma @x474 (or $x747 $x1038)) @x471 $x747) false)))
 (let (($x1041 (= 0.0 ?x694)))
 (let (($x532 (not $x1041)))
 (let ((@x750 (monotonicity (symm (commutativity (= $x1041 $x983)) (= $x983 $x1041)) (= $x978 $x532))))
 (let ((@x776 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1041 $x468 $x499)) (mp @x438 @x750 $x532) (or $x468 $x499))))
 (let ((@x495 (unit-resolution @x776 (lemma @x435 $x1038) $x499)))
 (let ((@x530 (unit-resolution ((_ th-lemma arith) (or (not $x565) $x747 $x1027)) @x495 @x472 @x898 false)))
 (unit-resolution ((_ th-lemma arith) (or (not $x260) $x396 $x1027)) @x495 (unit-resolution @x255 (lemma @x530 $x747) $x838) @x473 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       49
 :arith-eq-adapter                69
 :arith-bound-propagations-cheap  41
 :arith-bound-propagations-lp     5
 :arith-conflicts                 99
 :arith-diseq                     56
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 5
 :arith-grobner-calls             5
 :arith-grobner-conflicts         2
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 6
 :arith-lower                     74
 :arith-make-feasible             64
 :arith-max-columns               91
 :arith-max-rows                  19
 :arith-nla-explanations          100
 :arith-nla-lemmas                97
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              41
 :arith-upper                     61
 :conflicts                       16
 :decisions                       130
 :del-clause                      154
 :final-checks                    38
 :max-memory                      5.80
 :memory                          3.21
 :mk-bool-var                     289
 :mk-clause                       229
 :num-allocs                      44394288
 :num-checks                      1
 :propagations                    142
 :rlimit-count                    8509
 :time                            0.08
 :total-time                      0.08)
