unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x719 (to_real x!0)))
 (let ((?x713 (to_real b!2)))
 (let ((?x132 (* ?x713 ?x719)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x716 (to_real r!1)))
 (let ((?x151 (+ ?x716 ?x131 ?x132 ?x145)))
 (let (($x558 (>= ?x151 0.0)))
 (let ((?x648 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x132)))
 (let (($x178 (>= ?x648 0.0)))
 (let (($x616 (= 0.0 ?x648)))
 (let ((@x705 (symm (commutativity (= $x616 (= ?x648 0.0))) (= (= ?x648 0.0) $x616))))
 (let ((@x89 (mp ((_ th-lemma arith) (= ?x648 0.0)) @x705 $x616)))
 (let ((?x126 (+ (* (- 1.0) (to_real (* b00 x00))) ?x142)))
 (let (($x318 (<= ?x126 0.0)))
 (let (($x130 (= ?x126 0.0)))
 (let ((@x249 ((_ th-lemma arith) $x130)))
 (let ((?x82 (* b00 x00)))
 (let ((?x158 (+ r00 ?x82 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x154 (<= ?x158 0)))
 (let (($x127 (= 0 ?x158)))
 (let ((@x483 (symm (commutativity (= $x127 (= ?x158 0))) (= (= ?x158 0) $x127))))
 (let (($x238 (= ?x158 0)))
 (let ((?x685 (* (- (/ 1.0 4.0)) (* ?x713 ?x713 ?x716 ?x716))))
 (let ((?x543 (* (- (/ 1.0 16.0)) (* ?x713 ?x713 ?x713 ?x713))))
 (let ((?x678 (* (- (/ 1.0 2.0)) (* ?x713 ?x716 ?x716))))
 (let ((?x308 (* (- (/ 1.0 4.0)) (* ?x713 ?x713 ?x713 ?x719))))
 (let ((?x125 (* (- (/ 1.0 8.0)) (* ?x713 ?x713 ?x713))))
 (let ((?x252 (* (/ 1.0 2.0) (* ?x713 ?x713 ?x716))))
 (let ((?x683 (* (- (/ 1.0 2.0)) (* ?x713 ?x713 ?x713 ?x713 ?x719 ?x719 ?x719))))
 (let ((?x226 (* (- (/ 3.0 4.0)) (* ?x713 ?x713 ?x713 ?x713 ?x719 ?x719))))
 (let ((?x732 (* (/ 1.0 4.0) (* ?x713 ?x713 ?x713 ?x716))))
 (let ((?x220 (* (- (/ 3.0 8.0)) (* ?x713 ?x713 ?x713 ?x713 ?x719))))
 (let ((?x595 (+ (* 2.0 (* ?x713 ?x713 ?x713 ?x716 ?x719 ?x719 ?x719)) (* (- 1.0) (* ?x713 ?x716 ?x716 ?x719)) (* ?x713 ?x713 ?x716 ?x719) ?x220 ?x732 ?x226 ?x683 ?x252 ?x125 (* (/ 3.0 2.0) (* ?x713 ?x713 ?x713 ?x716 ?x719)) (* 3.0 (* ?x713 ?x713 ?x713 ?x716 ?x719 ?x719)) ?x308 (* (- 2.0) (* ?x713 ?x713 ?x716 ?x716 ?x719 ?x719 ?x719)) ?x678 ?x543 (* (- 3.0) (* ?x713 ?x713 ?x716 ?x716 ?x719 ?x719)) (* (- (/ 3.0 2.0)) (* ?x713 ?x713 ?x716 ?x716 ?x719)) ?x685)))
 (let (($x92 (= (* ?x595 (+ ?x131 ?x132 ?x145 ?x716)) 0.0)))
 (let (($x103 (not $x92)))
 (let ((?x183 (+ (* 2.0 (* ?x140 ?x141 ?x713 ?x713 ?x716 ?x716 ?x719 ?x719 ?x719)) (* (- 2.0) (* ?x713 ?x713 ?x713 ?x716 ?x716 ?x719 ?x719 ?x719 ?x719)) (* (- 2.0) (* ?x713 ?x713 ?x716 ?x716 ?x716 ?x719 ?x719 ?x719)) (* 2.0 (* ?x59 ?x713 ?x713 ?x716 ?x716 ?x719 ?x719 ?x719)) (* ?x59 ?x713 ?x716 ?x716 ?x719) (* ?x140 ?x141 ?x713 ?x716 ?x716 ?x719) (* (- 1.0) (* ?x713 ?x713 ?x716 ?x716 ?x719 ?x719)) (* (- 1.0) (* ?x713 ?x716 ?x716 ?x716 ?x719)))))
 (let (($x184 (= ?x183 0.0)))
 (let (($x660 (not $x184)))
 (let (($x100 (or $x660 $x103)))
 (let (($x495 (and $x238 $x100)))
 (let ((?x261 (+ (* (- 2.0) (* ?x713 ?x713 ?x719 ?x719 ?x719 ?x716 ?x716)) (* (- 1.0) (* ?x713 ?x719 ?x716 ?x716)) (* (- 3.0) (* ?x713 ?x713 ?x719 ?x719 ?x716 ?x716)) ?x543 ?x732 ?x685 ?x220 (* (/ 3.0 2.0) (* ?x713 ?x713 ?x713 ?x719 ?x716)) (* (- (/ 3.0 2.0)) (* ?x713 ?x713 ?x719 ?x716 ?x716)) ?x226 (* 3.0 (* ?x713 ?x713 ?x713 ?x719 ?x719 ?x716)) ?x683 (* 2.0 (* ?x713 ?x713 ?x713 ?x719 ?x719 ?x719 ?x716)) (* ?x713 ?x713 ?x719 ?x716) ?x308 ?x678 ?x252 ?x125)))
 (let ((?x649 (* ?x713 ?x713 ?x719 ?x719 ?x716 ?x716)))
 (let ((?x727 (+ (* 2.0 (* ?x713 ?x713 ?x719 ?x719 ?x719 ?x716 ?x716 ?x716)) (* (- 2.0) (* ?x713 ?x713 ?x719 ?x719 ?x719 ?x716 ?x716 ?x59)) (* (- 2.0) (* ?x713 ?x713 ?x719 ?x719 ?x719 ?x716 ?x716 ?x140 ?x141)) (* 2.0 (* ?x713 ?x713 ?x713 ?x719 ?x719 ?x719 ?x719 ?x716 ?x716)) (* ?x713 ?x719 ?x716 ?x716 ?x716) (* (- 1.0) (* ?x713 ?x719 ?x716 ?x716 ?x59)) (* (- 1.0) (* ?x713 ?x719 ?x716 ?x716 ?x140 ?x141)) ?x649)))
 (let (($x635 (or (not (= ?x727 0.0)) (not (= (* ?x261 (+ ?x716 ?x131 ?x145 ?x132)) 0.0)))))
 (let (($x642 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x82)) 0) $x635)))
 (let (($x355 (exists ((b Int) (r Int) (x Int) )(! (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x48 (to_real r)))
 (let ((?x691 (* (- (/ 1.0 4.0)) (* (to_real b) (to_real b) (to_real b) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x729 (+ (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x43 ?x48 ?x48)) (* (- 3.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x48)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* 3.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48)) (* ?x40 ?x40 ?x43 ?x48) ?x691 (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x48)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)))))
 (let ((?x301 (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)))
 (let ((?x276 (+ (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x59)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x140 ?x141)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x48 ?x48)) (* ?x40 ?x43 ?x48 ?x48 ?x48) (* (- 1.0) (* ?x40 ?x43 ?x48 ?x48 ?x59)) (* (- 1.0) (* ?x40 ?x43 ?x48 ?x48 ?x140 ?x141)) ?x301)))
 (let (($x253 (not (= ?x276 0.0))))
 (let (($x176 (or $x253 (not (= (* ?x729 (+ ?x48 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x118 $x176))))))))))))))))) :qid k!28))
 ))
 (let (($x349 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x518 (+ ?x145 ?x48 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x453 (+ ?x48 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x234 (* 2.0 ?x43)))
 (let ((?x508 (+ 1.0 ?x234)))
 (let ((?x560 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x508 ?x508 ?x508 ?x453 ?x453)) (* (- (/ 1.0 2.0)) (* ?x40 ?x508 ?x453 ?x453)))))
 (let ((?x487 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x48 ?x48 ?x40)))))
 (let (($x203 (or (not (= (* ?x487 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x560 ?x518) 0.0)))))
 (let (($x433 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x433 $x203))))))))))))))))))) :qid k!28))
 ))
 (let ((?x448 (lambda ((b Int) (r Int) (x Int) )(let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x48 (to_real r)))
 (let ((?x691 (* (- (/ 1.0 4.0)) (* (to_real b) (to_real b) (to_real b) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x729 (+ (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48)) (* (- 1.0) (* ?x40 ?x43 ?x48 ?x48)) (* (- 3.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x48)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* 3.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48)) (* ?x40 ?x40 ?x43 ?x48) ?x691 (* (- (/ 1.0 2.0)) (* ?x40 ?x48 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x48)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40)))))
 (let ((?x301 (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48)))
 (let ((?x276 (+ (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x48)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x59)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x48 ?x48 ?x140 ?x141)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x48 ?x48)) (* ?x40 ?x43 ?x48 ?x48 ?x48) (* (- 1.0) (* ?x40 ?x43 ?x48 ?x48 ?x59)) (* (- 1.0) (* ?x40 ?x43 ?x48 ?x48 ?x140 ?x141)) ?x301)))
 (let (($x253 (not (= ?x276 0.0))))
 (let (($x176 (or $x253 (not (= (* ?x729 (+ ?x48 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x646 (and $x118 $x176)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x518 (+ ?x145 ?x48 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x555 (* (- (/ 1.0 2.0)) (* ?x40 (+ 1.0 (* 2.0 ?x43)) (+ ?x48 ?x167) (+ ?x48 ?x167)))))
 (let ((?x453 (+ ?x48 ?x167)))
 (let ((?x234 (* 2.0 ?x43)))
 (let ((?x508 (+ 1.0 ?x234)))
 (let ((?x568 (* (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x508 ?x508 ?x508 ?x453 ?x453)) ?x555) ?x518)))
 (let ((?x487 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x48 ?x48 ?x40)))))
 (let (($x203 (or (not (= (* ?x487 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= ?x568 0.0)))))
 (let (($x433 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x430 (and $x433 $x203)))
 (rewrite (= $x430 $x646)))))))))))))))))))))))))))))))
 ))
 (let (($x312 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x518 (+ ?x145 ?x48 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x453 (+ ?x48 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x234 (* 2.0 ?x43)))
 (let ((?x508 (+ 1.0 ?x234)))
 (let ((?x560 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x508 ?x508 ?x508 ?x453 ?x453)) (* (- (/ 1.0 2.0)) (* ?x40 ?x508 ?x453 ?x453)))))
 (let ((?x487 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x48 ?x48 ?x40)))))
 (let (($x203 (or (not (= (* ?x487 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x560 ?x518) 0.0)))))
 (let (($x347 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x347 $x203))))))))))))))))))) :qid k!28))
 ))
 (let ((?x461 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x518 (+ ?x145 ?x48 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x453 (+ ?x48 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x234 (* 2.0 ?x43)))
 (let ((?x508 (+ 1.0 ?x234)))
 (let ((?x560 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x508 ?x508 ?x508 ?x453 ?x453)) (* (- (/ 1.0 2.0)) (* ?x40 ?x508 ?x453 ?x453)))))
 (let ((?x487 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x48 ?x48 ?x40)))))
 (let (($x203 (or (not (= (* ?x487 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x560 ?x518) 0.0)))))
 (let (($x433 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x430 (and $x433 $x203)))
 (let (($x347 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x501 (and $x347 $x203)))
 (rewrite (= $x501 $x430))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((b Int) (r Int) (x Int) )(! (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x48 (to_real r)))
 (let ((?x56 (- ?x48 ?x42)))
 (let ((?x68 (- (* (to_real (- 1)) ?x42 ?x42 ?x56 ?x56 ?x63 ?x63 ?x63) (* ?x42 ?x56 ?x56 ?x63))))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) (to_real r00)) (* ?x42 ?x63))))
 (let ((?x43 (to_real x)))
 (let ((?x28 (- 1)))
 (let ((?x47 (to_real ?x28)))
 (let ((?x51 (- (* ?x47 ?x42 ?x42 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x48 ?x48 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= (* ?x65 ?x68) ?x53))))))))))))))))))) :qid k!28))
 ))
 (let ((?x413 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x167 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x518 (+ ?x145 ?x48 ?x167 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x453 (+ ?x48 ?x167)))
 (let ((?x43 (to_real x)))
 (let ((?x234 (* 2.0 ?x43)))
 (let ((?x508 (+ 1.0 ?x234)))
 (let ((?x560 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x508 ?x508 ?x508 ?x453 ?x453)) (* (- (/ 1.0 2.0)) (* ?x40 ?x508 ?x453 ?x453)))))
 (let ((?x487 (+ (* (- 2.0) (* ?x43 ?x43 ?x43 ?x48 ?x48 ?x40 ?x40)) (* (- 1.0) (* ?x43 ?x48 ?x48 ?x40)))))
 (let (($x203 (or (not (= (* ?x487 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x560 ?x518) 0.0)))))
 (let (($x347 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x501 (and $x347 $x203)))
 (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x56 (- ?x48 ?x42)))
 (let ((?x68 (- (* (to_real (- 1)) ?x42 ?x42 ?x56 ?x56 ?x63 ?x63 ?x63) (* ?x42 ?x56 ?x56 ?x63))))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) ?x59) (* ?x42 ?x63))))
 (let ((?x28 (- 1)))
 (let ((?x47 (to_real ?x28)))
 (let ((?x51 (- (* ?x47 ?x42 ?x42 ?x48 ?x48 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x48 ?x48 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (let (($x73 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= (* ?x65 ?x68) ?x53))))))
 (rewrite (= $x73 $x501)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x456 (mp (mp @x75 (quant-intro (proof-bind ?x413) (= $x74 $x312)) $x312) (rewrite (= $x312 $x312)) $x312)))
 (let ((@x503 (mp (mp @x456 (quant-intro (proof-bind ?x461) (= $x312 $x349)) $x349) (quant-intro (proof-bind ?x448) (= $x349 $x355)) $x355)))
 (let ((@x177 (mp (mp~ @x503 (sk (~ $x355 $x642)) $x642) (rewrite (= $x642 $x495)) $x495)))
 (let ((@x477 (mp (and-elim @x177 $x238) @x483 $x127)))
 (let ((@x475 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x127) $x154)) @x477 $x154)))
 (let ((@x467 ((_ th-lemma arith) @x475 (hypothesis (not $x558)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x130) $x318)) @x249 $x318) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x616) $x178)) @x89 $x178) false)))
 (let ((@x496 (lemma @x467 $x558)))
 (let (($x661 (<= ?x151 0.0)))
 (let (($x504 (>= ?x126 0.0)))
 (let ((@x405 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x130) $x504)) (lemma (unit-resolution @x249 (hypothesis (not $x130)) false) $x130) $x504)))
 (let (($x439 (<= ?x648 0.0)))
 (let (($x227 (>= ?x158 0)))
 (let ((@x486 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x127) $x227)) @x477 $x227)))
 (let ((@x488 ((_ th-lemma arith) (hypothesis (not $x661)) @x486 (hypothesis $x504) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x616) $x439)) @x89 $x439) false)))
 (let ((@x459 (unit-resolution (lemma @x488 (or (not $x504) $x661)) @x405 $x661)))
 (let (($x229 (<= ?x183 0.0)))
 (let (($x578 (not $x229)))
 (let (($x489 (= ?x151 0.0)))
 (let ((@x388 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x489 (not $x661) (not $x558))) @x459 @x496 $x489)))
 (let (($x432 (or (not $x489) $x92)))
 (let ((@x426 (unit-resolution ((_ th-lemma arith) $x432) (hypothesis $x103) (hypothesis $x489) false)))
 (let ((@x585 (unit-resolution (and-elim @x177 $x100) (unit-resolution (lemma @x426 $x432) @x388 $x92) $x660)))
 (let (($x336 (>= ?x183 0.0)))
 (let ((@x525 (unit-resolution ((_ th-lemma arith) (or $x336 (not $x227) (not $x154))) @x475 @x486 (hypothesis (not $x336)) false)))
 (let ((@x586 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x184 $x578 (not $x336))) (lemma @x525 $x336) @x585 $x578)))
 (unit-resolution ((_ th-lemma arith) (or (not $x558) (not $x661) $x229)) @x586 @x459 @x496 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      25
 :arith-eq-adapter               28
 :arith-bound-propagations-cheap 23
 :arith-bound-propagations-lp    4
 :arith-conflicts                45
 :arith-diseq                    29
 :arith-gcd-calls                5
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    40
 :arith-make-feasible            38
 :arith-max-columns              63
 :arith-max-rows                 15
 :arith-nla-explanations         54
 :arith-nla-lemmas               43
 :arith-patches                  5
 :arith-patches-success          5
 :arith-propagations             23
 :arith-upper                    51
 :conflicts                      7
 :decisions                      40
 :del-clause                     83
 :final-checks                   28
 :max-memory                     5.89
 :memory                         3.13
 :mk-bool-var                    133
 :mk-clause                      121
 :num-allocs                     5246544
 :num-checks                     1
 :propagations                   58
 :rlimit-count                   4782
 :time                           0.04
 :total-time                     0.05)
