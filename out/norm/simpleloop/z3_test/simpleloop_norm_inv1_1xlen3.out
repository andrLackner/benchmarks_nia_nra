unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x83 (* (- 1) x!1)))
 (let ((?x790 (* (- 1) y!0)))
 (let ((?x762 (+ y00 x00 ?x790 ?x83)))
 (let (($x887 (<= ?x762 0)))
 (let (($x791 (= ?x762 0)))
 (let ((?x602 (* x!1 x!1 x!1 x!1)))
 (let ((?x459 (* y!0 y!0 y!0 y!0)))
 (let ((?x686 (+ y00 x00 (* 4 (* x00 x!1 x!1)) (* (- 1) (* x00 x!1 x!1 x!1)) (* 3 (* y!0 y!0 y!0)) ?x790 (* 2 (* y!0 y!0)) (* 5 (* x!1 x!1)) (* (- 2) (* y!0 x!1 x!1)) (* (- 2) (* x00 y!0)) ?x83 (* (- 1) (* y00 x!1 x!1 x!1)) (* (- 2) (* y00 y!0)) ?x459 (* (- 3) (* x00 y!0 y!0)) (* (- 4) (* x!1 x!1 x!1)) ?x602 (* y!0 y!0 y!0 x!1) (* (- 5) (* y00 x!1)) (* (- 5) (* x00 x!1)) (* (- 1) (* y00 y!0 y!0 y!0)) (* (- 1) (* x00 y!0 y!0 y!0)) (* 7 (* y!0 x!1)) (* (- 2) (* y00 y!0 x!1)) (* y00 y!0 x!1 x!1) (* (- 3) (* y00 y!0 y!0)) (* (- 2) (* x00 y!0 x!1)) (* x00 y!0 x!1 x!1) (* 4 (* y00 x!1 x!1)) (* 5 (* y!0 y!0 x!1)) (* (- 1) (* y!0 y!0 x!1 x!1)))))
 (let (($x242 (= ?x686 0)))
 (let (($x245 (not $x242)))
 (let (($x766 (and $x791 $x245)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x605 (+ (* 2 x!1) y!0 ?x61 ?x68 (* 2 (* y!0 y00)) (* 2 (* x!1 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y00)) (* 5 (* x!1 y00)) (* 5 (* x!1 x00)) (* (- 4) (* x!1 x!1 x00)) (* x!1 x!1 x!1 x00) (* 3 (* y!0 y!0 y00)) (* y!0 y!0 y!0 y00) (* 2 (* y!0 x00)) (* 2 (* x!1 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 x00)) (* (- 4) (* x!1 x!1 y00)) (* x!1 x!1 x!1 y00) (* 3 (* y!0 y!0 x00)) (* y!0 y!0 y!0 x00) (* (- 1) (* x!1 1 1)) (* (- 1) (* x!1 y!0 1)) (* (- 1) (* x!1 1 y!0)) (* (- 2) (* y!0 y!0)) (* (- 5) (* x!1 y!0 y!0)) (* x!1 x!1 y!0 y!0) (* (- 5) (* x!1 x!1)) (* (- 5) (* x!1 y!0)) (* 2 (* x!1 x!1 y!0)) (* (- 3) (* y!0 y!0 y!0)) (* (- 1) (* x!1 y!0 y!0 y!0)) (* (- 1) ?x459) (* 4 (* x!1 x!1 x!1)) (* (- 1) ?x602))))
 (let (($x609 (and (= (+ x!1 y!0 ?x61 ?x68) 0) (not (= ?x605 0)))))
 (let (($x308 (exists ((x Int) (y Int) )(! (let ((?x833 (* (- 1) (* x x x x))))
 (let ((?x849 (* 4 (* x x x))))
 (let ((?x725 (* (- 1) (* y y y y))))
 (let ((?x606 (* (- 1) (* x y y y))))
 (let ((?x741 (* (- 3) (* y y y))))
 (let ((?x515 (* 2 (* x x y))))
 (let ((?x649 (* (- 5) (* x y))))
 (let ((?x868 (* (- 5) (* x x))))
 (let ((?x477 (* x x y y)))
 (let ((?x648 (* (- 5) (* x y y))))
 (let ((?x731 (* (- 2) (* y y))))
 (let ((?x469 (* (- 1) (* x 1 y))))
 (let ((?x462 (* (- 1) (* x y 1))))
 (let ((?x455 (* (- 1) (* x 1 1))))
 (let ((?x425 (* y y y x00)))
 (let ((?x432 (* 3 (* y y x00))))
 (let ((?x351 (* x x x y00)))
 (let ((?x303 (* (- 1) (* x x y x00))))
 (let ((?x309 (* 2 (* x y x00))))
 (let ((?x528 (* 2 (* y x00))))
 (let ((?x195 (* y y y y00)))
 (let ((?x216 (* 3 (* y y y00))))
 (let ((?x157 (* x x x x00)))
 (let ((?x329 (* (- 4) (* x x x00))))
 (let ((?x117 (* (- 1) (* x x y y00))))
 (let ((?x227 (* 2 (* y y00))))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x867 (* 2 x)))
 (let ((?x906 (+ ?x867 y ?x61 ?x68 ?x227 (* 2 (* x y y00)) ?x117 (* 5 (* x y00)) (* 5 (* x x00)) ?x329 ?x157 ?x216 ?x195 ?x528 ?x309 ?x303 (* (- 4) (* x x y00)) ?x351 ?x432 ?x425 ?x455 ?x462 ?x469 ?x731 ?x648 ?x477 ?x868 ?x649 ?x515 ?x741 ?x606 ?x725 ?x849 ?x833)))
 (let (($x87 (= (+ x y ?x61 ?x68) 0)))
 (and $x87 (not (= ?x906 0)))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x543 (exists ((x Int) (y Int) )(! (let ((?x653 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x637 (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x620 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x537 (+ (* (- 1) (* y00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* x00 (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* y00 (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* x00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* y00 (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* x00 (+ 1 y) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) ?x620 ?x637 ?x653)))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x537 0))))))) :qid k!26))
 ))
 (let ((?x612 (lambda ((x Int) (y Int) )(let ((?x833 (* (- 1) (* x x x x))))
 (let ((?x849 (* 4 (* x x x))))
 (let ((?x725 (* (- 1) (* y y y y))))
 (let ((?x606 (* (- 1) (* x y y y))))
 (let ((?x741 (* (- 3) (* y y y))))
 (let ((?x515 (* 2 (* x x y))))
 (let ((?x649 (* (- 5) (* x y))))
 (let ((?x868 (* (- 5) (* x x))))
 (let ((?x477 (* x x y y)))
 (let ((?x648 (* (- 5) (* x y y))))
 (let ((?x731 (* (- 2) (* y y))))
 (let ((?x469 (* (- 1) (* x 1 y))))
 (let ((?x462 (* (- 1) (* x y 1))))
 (let ((?x455 (* (- 1) (* x 1 1))))
 (let ((?x425 (* y y y x00)))
 (let ((?x432 (* 3 (* y y x00))))
 (let ((?x351 (* x x x y00)))
 (let ((?x303 (* (- 1) (* x x y x00))))
 (let ((?x309 (* 2 (* x y x00))))
 (let ((?x528 (* 2 (* y x00))))
 (let ((?x195 (* y y y y00)))
 (let ((?x216 (* 3 (* y y y00))))
 (let ((?x157 (* x x x x00)))
 (let ((?x329 (* (- 4) (* x x x00))))
 (let ((?x117 (* (- 1) (* x x y y00))))
 (let ((?x227 (* 2 (* y y00))))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x867 (* 2 x)))
 (let ((?x906 (+ ?x867 y ?x61 ?x68 ?x227 (* 2 (* x y y00)) ?x117 (* 5 (* x y00)) (* 5 (* x x00)) ?x329 ?x157 ?x216 ?x195 ?x528 ?x309 ?x303 (* (- 4) (* x x y00)) ?x351 ?x432 ?x425 ?x455 ?x462 ?x469 ?x731 ?x648 ?x477 ?x868 ?x649 ?x515 ?x741 ?x606 ?x725 ?x849 ?x833)))
 (let (($x87 (= (+ x y ?x61 ?x68) 0)))
 (let (($x912 (and $x87 (not (= ?x906 0)))))
 (let ((?x653 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x637 (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x620 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x537 (+ (* (- 1) (* y00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* x00 (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* y00 (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* x00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* y00 (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* x00 (+ 1 y) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) ?x620 ?x637 ?x653)))
 (let (($x173 (and (= (+ x ?x61 ?x68 y) 0) (not (= ?x537 0)))))
 (rewrite (= $x173 $x912))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x58 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00) (* ?x36 ?x36 ?x36 y00))))
 (let ((?x47 (+ (- ?x40 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 ?x35 y00) (* x00 ?x36 ?x36 ?x36) (* 0 ?x35 ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x36 ?x36))))
 (let ((?x53 (- (- (- ?x47 (* ?x35 ?x36 ?x36 ?x36)) (* ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x53 0))))))))) :qid k!26))
 ))
 (let ((?x772 (lambda ((x Int) (y Int) )(let ((?x653 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x637 (* (- 1) (* (+ 1 y) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x620 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x537 (+ (* (- 1) (* y00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* x00 (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* y00 (+ 1 y) (+ 1 y) (+ 1 y)) (* (- 1) (* x00 (+ (- 1) x) (+ (- 1) x) (+ 1 y))) (* y00 (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)) (* x00 (+ 1 y) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) ?x620 ?x637 ?x653)))
 (let (($x173 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x537 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00) (* ?x36 ?x36 ?x36 y00))))
 (let ((?x47 (+ (- ?x40 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 ?x35 y00) (* x00 ?x36 ?x36 ?x36) (* 0 ?x35 ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x36 ?x36))))
 (let ((?x53 (- (- (- ?x47 (* ?x35 ?x36 ?x36 ?x36)) (* ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35))))
 (let (($x57 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x53 0))))))
 (rewrite (= $x57 $x173))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x529 (mp (mp @x59 (quant-intro (proof-bind ?x772) (= $x58 $x543)) $x543) (rewrite (= $x543 $x543)) $x543)))
 (let ((@x788 (mp~ (mp @x529 (quant-intro (proof-bind ?x612) (= $x543 $x308)) $x308) (sk (~ $x308 $x609)) $x609)))
 (let ((@x261 (mp @x788 (rewrite (= $x609 $x766)) $x766)))
 (let ((@x262 (and-elim @x261 $x791)))
 (let ((@x888 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x791) $x887)) @x262 $x887)))
 (let (($x782 (>= ?x762 0)))
 (let ((@x197 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x791) $x782)) @x262 $x782)))
 (let (($x722 (not (>= ?x686 0))))
 (let (($x78 (<= ?x686 0)))
 (let ((@x716 (lemma ((_ th-lemma arith) (hypothesis (not $x78)) @x197 @x888 @x197 @x888 false) $x78)))
 (let ((@x706 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x242 (not $x78) $x722)) (and-elim @x261 $x245) (or (not $x78) $x722))))
 ((_ th-lemma arith) (unit-resolution @x706 @x716 $x722) @x197 @x888 @x197 @x888 false)))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             238
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.62
 :memory                    19.15
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                478405
 :num-checks                1
 :propagations              4
 :rlimit-count              3279
 :time                      0.01
 :total-time                0.02)
