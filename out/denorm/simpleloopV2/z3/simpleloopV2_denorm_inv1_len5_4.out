unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x389 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x323 (>= ?x389 0)))
 (let (($x140 (= ?x389 0)))
 (let ((?x102 (* (- 2) x!1)))
 (let ((?x288 (* 7 y!0)))
 (let ((?x381 (* y!0 y!0 y!0 x!1 x!1)))
 (let ((?x466 (* 2 (* y!0 y!0 y!0))))
 (let ((?x204 (* x!1 x!1)))
 (let ((?x216 (* (- 6) (* y!0 y!0 x!1))))
 (let ((?x321 (* 3 (* y!0 x!1 x!1))))
 (let ((?x92 (* y!0 y!0)))
 (let ((?x465 (* 6 ?x92)))
 (let ((?x233 (+ 3 ?x465 ?x321 ?x216 ?x204 (* (- 2) (* y!0 y!0 y!0 x!1)) (* (- 6) (* y!0 x!1)) (* 3 (* y!0 y!0 x!1 x!1)) ?x466 ?x381 ?x288 ?x102)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x459 (+ ?x61 ?x68 y!0 x!1)))
 (let ((?x268 (* ?x459 ?x233)))
 (let (($x156 (= ?x268 0)))
 (let (($x269 (not $x156)))
 (let ((?x142 (* (- 1) ?x204)))
 (let ((?x125 (* (- 6) ?x92)))
 (let ((?x209 (+ (- 3) ?x125 ?x321 ?x216 ?x142 (* 2 (* y!0 y!0 y!0 x!1)) (* 6 (* y!0 x!1)) (* (- 3) (* y!0 y!0 x!1 x!1)) ?x466 ?x381 ?x288 ?x102)))
 (let ((?x161 (* ?x459 ?x209)))
 (let (($x144 (= ?x161 0)))
 (let (($x149 (or (not $x144) $x269)))
 (let (($x80 (and $x140 $x149)))
 (let ((?x112 (* (- 6) (* x!1 y!0 y!0))))
 (let ((?x250 (* 3 (* x!1 x!1 y!0))))
 (let ((?x278 (* x!1 x!1 y!0 y!0 y!0)))
 (let ((?x308 (+ 3 ?x102 ?x288 ?x465 ?x466 (* (- 2) (* x!1 y!0 y!0 y!0)) ?x278 ?x204 (* (- 6) (* x!1 y!0)) ?x250 ?x112 (* 3 (* x!1 x!1 y!0 y!0)))))
 (let ((?x456 (+ x!1 y!0 ?x61 ?x68)))
 (let ((?x111 (+ (- 3) ?x102 ?x288 ?x125 ?x466 (* 2 (* x!1 y!0 y!0 y!0)) ?x278 ?x142 (* 6 (* x!1 y!0)) ?x250 ?x112 (* (- 3) (* x!1 x!1 y!0 y!0)))))
 (let (($x116 (and (= ?x456 0) (or (not (= (* ?x456 ?x111) 0)) (not (= (* ?x456 ?x308) 0))))))
 (let (($x184 (exists ((x Int) (y Int) )(! (let ((?x217 (* x x y y)))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x213 (* x y y)))
 (let ((?x413 (* (- 6) ?x213)))
 (let ((?x202 (* x x y)))
 (let ((?x249 (* 3 ?x202)))
 (let ((?x193 (* x x)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x300 (* 2 (* y y y))))
 (let ((?x169 (* y y)))
 (let ((?x298 (* 6 ?x169)))
 (let ((?x296 (* 7 y)))
 (let ((?x408 (* (- 2) x)))
 (let ((?x283 (+ 3 ?x408 ?x296 ?x298 ?x300 ?x254 ?x182 ?x193 (* (- 6) (* x y)) ?x249 ?x413 ?x252)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x414 (* (- 3) ?x217)))
 (let ((?x198 (* x y)))
 (let ((?x410 (* 6 ?x198)))
 (let ((?x355 (* (- 1) ?x193)))
 (let ((?x415 (* 2 ?x180)))
 (let ((?x446 (* (- 6) ?x169)))
 (let ((?x438 (* ?x82 (+ (- 3) ?x408 ?x296 ?x446 ?x300 ?x415 ?x182 ?x355 ?x410 ?x249 ?x413 ?x414))))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or (not (= ?x438 0)) (not (= (* ?x82 ?x283) 0))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x94 (exists ((x Int) (y Int) )(! (let ((?x217 (* x x y y)))
 (let ((?x414 (* (- 3) ?x217)))
 (let ((?x193 (* x x)))
 (let ((?x355 (* (- 1) ?x193)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x415 (* 2 ?x180)))
 (let ((?x300 (* 2 (* y y y))))
 (let ((?x445 (* 5 y)))
 (let ((?x408 (* (- 2) x)))
 (let ((?x486 (+ (- 3) ?x408 ?x445 (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y y x 1)) (* (- 1) (* y (- 1) x x)) (* (- 5) (* y y)) ?x300 ?x415 ?x182 ?x355 (* 4 (* x y)) (* 2 (* x x y)) (* (- 4) (* x y y)) ?x414 (* (- 1) (* y (- 1))) (* (- 1) (* y y 1 1)))))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x202 (* x x y)))
 (let ((?x249 (* 3 ?x202)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x169 (* y y)))
 (let ((?x298 (* 6 ?x169)))
 (let ((?x296 (* 7 y)))
 (let ((?x301 (+ 3 (* (- 1) x) ?x296 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x298 (* (- 1) (* x 1 y y)) ?x300 ?x254 ?x182 ?x193 (* (- 3) (* x y)) ?x249 (* (- 3) (* x y y)) ?x252)))
 (let (($x307 (not (= (* ?x82 ?x301) 0))))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or $x307 (not (= (* ?x82 ?x486) 0)))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x310 (lambda ((x Int) (y Int) )(let ((?x217 (* x x y y)))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x213 (* x y y)))
 (let ((?x413 (* (- 6) ?x213)))
 (let ((?x202 (* x x y)))
 (let ((?x249 (* 3 ?x202)))
 (let ((?x193 (* x x)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x300 (* 2 (* y y y))))
 (let ((?x169 (* y y)))
 (let ((?x298 (* 6 ?x169)))
 (let ((?x296 (* 7 y)))
 (let ((?x408 (* (- 2) x)))
 (let ((?x283 (+ 3 ?x408 ?x296 ?x298 ?x300 ?x254 ?x182 ?x193 (* (- 6) (* x y)) ?x249 ?x413 ?x252)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x414 (* (- 3) ?x217)))
 (let ((?x198 (* x y)))
 (let ((?x410 (* 6 ?x198)))
 (let ((?x355 (* (- 1) ?x193)))
 (let ((?x415 (* 2 ?x180)))
 (let ((?x446 (* (- 6) ?x169)))
 (let ((?x438 (* ?x82 (+ (- 3) ?x408 ?x296 ?x446 ?x300 ?x415 ?x182 ?x355 ?x410 ?x249 ?x413 ?x414))))
 (let (($x87 (= ?x82 0)))
 (let (($x302 (and $x87 (or (not (= ?x438 0)) (not (= (* ?x82 ?x283) 0))))))
 (let ((?x445 (* 5 y)))
 (let ((?x486 (+ (- 3) ?x408 ?x445 (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y y x 1)) (* (- 1) (* y (- 1) x x)) (* (- 5) ?x169) ?x300 ?x415 ?x182 ?x355 (* 4 ?x198) (* 2 ?x202) (* (- 4) ?x213) ?x414 (* (- 1) (* y (- 1))) (* (- 1) (* y y 1 1)))))
 (let ((?x301 (+ 3 (* (- 1) x) ?x296 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x298 (* (- 1) (* x 1 y y)) ?x300 ?x254 ?x182 ?x193 (* (- 3) ?x198) ?x249 (* (- 3) ?x213) ?x252)))
 (let (($x307 (not (= (* ?x82 ?x301) 0))))
 (let (($x514 (and $x87 (or $x307 (not (= (* ?x82 ?x486) 0))))))
 (rewrite (= $x514 $x302))))))))))))))))))))))))))))))))))))
 ))
 (let (($x385 (exists ((x Int) (y Int) )(! (let ((?x376 (+ 1 x)))
 (let ((?x386 (+ (- 1) y)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x114 (+ x ?x61 ?x68 y)))
 (let ((?x411 (* ?x114 (+ (- 1) (* ?x386 ?x386 ?x386 ?x376 ?x376) y (* ?x386 ?x386 ?x386)))))
 (let ((?x373 (+ 1 y)))
 (let ((?x106 (+ (- 1) x)))
 (let ((?x383 (* ?x114 (+ 1 (* ?x106 ?x106 ?x373 ?x373 ?x373) y (* ?x373 ?x373 ?x373)))))
 (and (= ?x114 0) (or (not (= ?x383 0)) (not (= ?x411 0))))))))))))) :qid k!27))
 ))
 (let ((?x473 (lambda ((x Int) (y Int) )(let ((?x217 (* x x y y)))
 (let ((?x414 (* (- 3) ?x217)))
 (let ((?x193 (* x x)))
 (let ((?x355 (* (- 1) ?x193)))
 (let ((?x182 (* x x y y y)))
 (let ((?x180 (* x y y y)))
 (let ((?x415 (* 2 ?x180)))
 (let ((?x300 (* 2 (* y y y))))
 (let ((?x445 (* 5 y)))
 (let ((?x408 (* (- 2) x)))
 (let ((?x486 (+ (- 3) ?x408 ?x445 (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y y 1 x)) (* (- 1) (* y (- 1) 1 x)) (* (- 1) (* y y x 1)) (* (- 1) (* y (- 1) x x)) (* (- 5) (* y y)) ?x300 ?x415 ?x182 ?x355 (* 4 (* x y)) (* 2 (* x x y)) (* (- 4) (* x y y)) ?x414 (* (- 1) (* y (- 1))) (* (- 1) (* y y 1 1)))))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x252 (* 3 ?x217)))
 (let ((?x202 (* x x y)))
 (let ((?x249 (* 3 ?x202)))
 (let ((?x254 (* (- 2) ?x180)))
 (let ((?x169 (* y y)))
 (let ((?x298 (* 6 ?x169)))
 (let ((?x296 (* 7 y)))
 (let ((?x301 (+ 3 (* (- 1) x) ?x296 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x298 (* (- 1) (* x 1 y y)) ?x300 ?x254 ?x182 ?x193 (* (- 3) (* x y)) ?x249 (* (- 3) (* x y y)) ?x252)))
 (let (($x307 (not (= (* ?x82 ?x301) 0))))
 (let (($x87 (= ?x82 0)))
 (let (($x514 (and $x87 (or $x307 (not (= (* ?x82 ?x486) 0))))))
 (let ((?x376 (+ 1 x)))
 (let ((?x386 (+ (- 1) y)))
 (let ((?x114 (+ x ?x61 ?x68 y)))
 (let ((?x411 (* ?x114 (+ (- 1) (* ?x386 ?x386 ?x386 ?x376 ?x376) y (* ?x386 ?x386 ?x386)))))
 (let ((?x373 (+ 1 y)))
 (let ((?x106 (+ (- 1) x)))
 (let ((?x383 (* ?x114 (+ 1 (* ?x106 ?x106 ?x373 ?x373 ?x373) y (* ?x373 ?x373 ?x373)))))
 (let (($x343 (and (= ?x114 0) (or (not (= ?x383 0)) (not (= ?x411 0))))))
 (rewrite (= $x343 $x514))))))))))))))))))))))))))))))))))))
 ))
 (let (($x58 (exists ((x Int) (y Int) )(! (let ((?x48 (- y 1)))
 (let ((?x52 (+ (* (+ x 1) (+ x 1) ?x48 ?x48 ?x48) ?x48 (* ?x48 ?x48 ?x48))))
 (let (($x55 (not (= (* (+ (- (- (+ x 1) y00) x00) ?x48) ?x52) 0))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) y 1 (* ?x38 ?x38 ?x38)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0)) $x55)))))))) :qid k!27))
 ))
 (let ((?x330 (lambda ((x Int) (y Int) )(let ((?x376 (+ 1 x)))
 (let ((?x386 (+ (- 1) y)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x114 (+ x ?x61 ?x68 y)))
 (let ((?x411 (* ?x114 (+ (- 1) (* ?x386 ?x386 ?x386 ?x376 ?x376) y (* ?x386 ?x386 ?x386)))))
 (let ((?x373 (+ 1 y)))
 (let ((?x106 (+ (- 1) x)))
 (let ((?x383 (* ?x114 (+ 1 (* ?x106 ?x106 ?x373 ?x373 ?x373) y (* ?x373 ?x373 ?x373)))))
 (let (($x343 (and (= ?x114 0) (or (not (= ?x383 0)) (not (= ?x411 0))))))
 (let ((?x48 (- y 1)))
 (let ((?x52 (+ (* (+ x 1) (+ x 1) ?x48 ?x48 ?x48) ?x48 (* ?x48 ?x48 ?x48))))
 (let (($x55 (not (= (* (+ (- (- (+ x 1) y00) x00) ?x48) ?x52) 0))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) y 1 (* ?x38 ?x38 ?x38)))))
 (let (($x57 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x42 0)) $x55))))
 (rewrite (= $x57 $x343))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x357 (mp (mp @x59 (quant-intro (proof-bind ?x330) (= $x58 $x385)) $x385) (rewrite (= $x385 $x385)) $x385)))
 (let ((@x431 (mp (mp @x357 (quant-intro (proof-bind ?x473) (= $x385 $x94)) $x94) (quant-intro (proof-bind ?x310) (= $x94 $x184)) $x184)))
 (let ((@x71 (mp (mp~ @x431 (sk (~ $x184 $x116)) $x116) (rewrite (= $x116 $x80)) $x80)))
 (let ((@x222 (and-elim @x71 $x140)))
 (let ((@x207 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x140) $x323)) @x222 $x323)))
 (let (($x325 (<= ?x389 0)))
 (let ((@x458 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x140) $x325)) @x222 $x325)))
 (let (($x171 (not (<= ?x268 0))))
 (let (($x437 (>= ?x268 0)))
 (let (($x461 (>= ?x161 0)))
 (let (($x462 (<= ?x161 0)))
 (let ((@x237 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x144 (not $x462) (not $x461))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x462)) @x458 @x207 false) $x462) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x461)) @x458 @x207 false) $x461) $x144)))
 (let ((@x175 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x156 $x171 (not $x437))) (unit-resolution (and-elim @x71 $x149) @x237 $x269) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x437)) @x458 @x207 false) $x437) $x171)))
 ((_ th-lemma arith farkas 1 1 1) @x175 @x458 @x207 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             120
 :arith-nonlinear-bounds    12
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.59
 :memory                    3.12
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1094854
 :num-checks                1
 :propagations              14
 :rlimit-count              2589
 :time                      0.01
 :total-time                0.01)
