unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x403 (+ m!1 (* (- 6) n!0))))
 (let (($x700 (<= ?x403 6)))
 (let (($x399 (= ?x403 6)))
 (let ((?x545 (+ k!2 c!3)))
 (let ((?x416 (+ m!1 k!2)))
 (let ((?x494 (+ 1 n!0)))
 (let ((?x470 (* (- 1) (* (+ 6 m!1) (+ 6 m!1) ?x416 ?x416 ?x416 ?x416 ?x545 ?x545))))
 (let ((?x538 (+ 6 m!1)))
 (let ((?x365 (+ (* 43 (* n!0 n!0 n!0)) (* 18 (* n!0 n!0 n!0 n!0)) (* (- 1) (* k!2 n!0 n!0 n!0)) (* (- 3) (* m!1 n!0)) (* 3 (* ?x494 ?x494 ?x494 ?x494 ?x494 ?x416 ?x416 ?x545 ?x545)) (* 3 (* n!0 n!0 n!0 n!0 n!0)) (* (- 1) m!1) (* (- 1) k!2) (* ?x494 ?x494 ?x538 ?x538 ?x538 ?x416 ?x416 ?x545) (* (- 3) (* k!2 n!0)) (* (- 3) (* ?x494 ?x494 ?x494 ?x538 ?x538 ?x538 ?x416 ?x545)) (* (- 1) (* m!1 n!0 n!0 n!0)) (* (- 3) (* k!2 n!0 n!0)) (* ?x538 ?x538 ?x416 ?x416 ?x416 ?x545 ?x545) (* 3 (* ?x494 ?x538 ?x538 ?x416 ?x416 ?x416 ?x545 ?x545)) (* (- 1) (* ?x494 ?x494 ?x538 ?x538 ?x538 ?x416 ?x545)) (* (- 3) (* m!1 n!0 n!0)) (* ?x494 ?x494 ?x494 ?x416 ?x416 ?x545 ?x545) (* 3 (* ?x494 ?x494 ?x538 ?x538 ?x416 ?x416 ?x416 ?x545 ?x545)) (* (- 3) (* ?x494 ?x494 ?x494 ?x494 ?x538 ?x538 ?x538 ?x416 ?x545)) (* 3 (* ?x494 ?x494 ?x494 ?x494 ?x416 ?x416 ?x545 ?x545)) (* 51 (* n!0 n!0)) (* 30 n!0) ?x470 (* (- 1) (* ?x494 ?x494 ?x494 ?x416 ?x416 ?x416 ?x545 ?x545)))))
 (let (($x201 (= ?x365 (- 7))))
 (let (($x736 (not $x201)))
 (let ((?x256 (* (- 3) n!0)))
 (let ((?x571 (* n!0 n!0)))
 (let ((?x483 (* (- 3) ?x571)))
 (let ((?x624 (+ k!2 ?x483 ?x256)))
 (let (($x719 (= ?x624 1)))
 (let ((?x293 (* 3 c!3)))
 (let ((?x449 (* (- 2) n!0)))
 (let ((?x287 (* k!2 n!0)))
 (let ((?x492 (* (- 1) ?x287)))
 (let ((?x369 (+ k!2 ?x492 ?x449 ?x293)))
 (let (($x363 (= ?x369 1)))
 (let ((?x476 (* 18 c!3)))
 (let ((?x396 (* (- 9) n!0)))
 (let ((?x430 (* (- 1) (* k!2 k!2))))
 (let ((?x292 (* 5 k!2)))
 (let ((?x471 (+ ?x292 ?x430 (* 9 (* n!0 c!3)) ?x396 ?x476)))
 (let (($x573 (= ?x471 4)))
 (let (($x693 (and $x399 $x573 $x363 $x719 $x736)))
 (let ((?x552 (+ c!3 k!2)))
 (let ((?x463 (+ k!2 m!1)))
 (let ((?x114 (* k!2 n!0 n!0 n!0)))
 (let ((?x356 (* m!1 n!0 n!0 n!0)))
 (let ((?x429 (+ k!2 m!1 (* (- 30) n!0) (* 3 ?x287) (* 3 (* ?x494 ?x494 ?x494 ?x494 ?x538 ?x538 ?x538 ?x463 ?x552)) (* ?x494 ?x494 ?x538 ?x538 ?x538 ?x463 ?x552) (* (- 3) (* ?x494 ?x494 ?x494 ?x494 ?x494 ?x463 ?x463 ?x552 ?x552)) (* 3 (* ?x494 ?x494 ?x494 ?x538 ?x538 ?x538 ?x463 ?x552)) (* (- 1) (* ?x494 ?x494 ?x538 ?x538 ?x538 ?x463 ?x463 ?x552)) (* (- 3) (* ?x494 ?x538 ?x538 ?x463 ?x463 ?x463 ?x552 ?x552)) (* (- 3) (* ?x494 ?x494 ?x538 ?x538 ?x463 ?x463 ?x463 ?x552 ?x552)) (* (- 51) ?x571) (* ?x538 ?x538 ?x463 ?x463 ?x463 ?x463 ?x552 ?x552) (* (- 43) (* n!0 n!0 n!0)) (* (- 1) (* ?x494 ?x494 ?x494 ?x463 ?x463 ?x552 ?x552)) (* (- 18) (* n!0 n!0 n!0 n!0)) (* (- 3) (* n!0 n!0 n!0 n!0 n!0)) ?x356 ?x114 (* 3 (* m!1 n!0)) (* 3 (* m!1 n!0 n!0)) (* 3 (* k!2 n!0 n!0)) (* (- 3) (* ?x494 ?x494 ?x494 ?x494 ?x463 ?x463 ?x552 ?x552)) (* (- 1) (* ?x538 ?x538 ?x463 ?x463 ?x463 ?x552 ?x552)) (* ?x494 ?x494 ?x494 ?x463 ?x463 ?x463 ?x552 ?x552))))
 (let (($x119 (and $x399 (= (+ ?x476 ?x292 ?x396 ?x430 (* 9 (* c!3 n!0))) 4) (= (+ ?x293 k!2 ?x449 ?x492) 1) (= (+ k!2 ?x256 ?x483) 1) (not (= ?x429 7)))))
 (let (($x318 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x662 (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x316 (+ 6 m)))
 (let ((?x660 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x546 (* 3 (* k n n))))
 (let ((?x551 (* 3 (* m n n))))
 (let ((?x549 (* 3 (* m n))))
 (let ((?x507 (* k n n n)))
 (let ((?x504 (* m n n n)))
 (let ((?x619 (* (- 3) (* n n n n n))))
 (let ((?x301 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x149 (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)))
 (let ((?x55 (* k n)))
 (let ((?x544 (* 3 ?x55)))
 (let ((?x650 (+ k m (* (- 30) n) ?x544 (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) ?x149 (* (- 3) (* ?x321 ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 1) (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x69 ?x68)) (* (- 3) (* ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x321 ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 51) (* n n)) ?x301 (* (- 43) (* n n n)) (* (- 1) (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* (- 18) (* n n n n)) ?x619 ?x504 ?x507 ?x549 ?x551 ?x546 (* (- 3) (* ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* (- 1) ?x660) ?x662)))
 (let (($x308 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x270 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x218 (= (+ ?x40 ?x44 ?x220 ?x221 (* 9 (* c n))) 4)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (and $x134 $x218 $x270 $x308 (not (= ?x650 7))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x447 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x316 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x136 (* ?x321 ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)))
 (let ((?x244 (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x69 ?x68)))
 (let ((?x390 (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x660 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x440 (+ ?x660 (* ?x321 ?x321 ?x321) (* (- 1) (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x390 (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321)) (* (- 1) (* ?x321 ?x321 ?x321 ?x69)) (* (- 1) (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x244 (* 3 (* ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) (* ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) ?x136))))
 (let (($x154 (not (= ?x440 0))))
 (let (($x331 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x889 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (and $x134 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x220 ?x221) 4) $x889 $x331 $x154))))))))))))))))))) :qid k!34))
 ))
 (let ((?x324 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x662 (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x316 (+ 6 m)))
 (let ((?x660 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x546 (* 3 (* k n n))))
 (let ((?x551 (* 3 (* m n n))))
 (let ((?x549 (* 3 (* m n))))
 (let ((?x507 (* k n n n)))
 (let ((?x504 (* m n n n)))
 (let ((?x619 (* (- 3) (* n n n n n))))
 (let ((?x301 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x149 (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)))
 (let ((?x55 (* k n)))
 (let ((?x544 (* 3 ?x55)))
 (let ((?x650 (+ k m (* (- 30) n) ?x544 (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) ?x149 (* (- 3) (* ?x321 ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 1) (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x69 ?x68)) (* (- 3) (* ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 3) (* ?x321 ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 51) (* n n)) ?x301 (* (- 43) (* n n n)) (* (- 1) (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* (- 18) (* n n n n)) ?x619 ?x504 ?x507 ?x549 ?x551 ?x546 (* (- 3) (* ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* (- 1) ?x660) ?x662)))
 (let (($x308 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x270 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x218 (= (+ ?x40 ?x44 ?x220 ?x221 (* 9 (* c n))) 4)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (let (($x531 (and $x134 $x218 $x270 $x308 (not (= ?x650 7)))))
 (let ((?x244 (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x69 ?x68)))
 (let ((?x390 (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x440 (+ ?x660 (* ?x321 ?x321 ?x321) (* (- 1) ?x662) ?x390 (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321)) (* (- 1) (* ?x321 ?x321 ?x321 ?x69)) (* (- 1) ?x301) ?x244 (* 3 (* ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 1) ?x149) (* (- 3) (* ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) (* ?x321 ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)))))
 (let (($x154 (not (= ?x440 0))))
 (let (($x331 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x889 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x339 (and $x134 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x220 ?x221) 4) $x889 $x331 $x154)))
 (rewrite (= $x339 $x531)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x628 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x316 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x136 (* ?x321 ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)))
 (let ((?x244 (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x69 ?x68)))
 (let ((?x390 (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x660 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x440 (+ ?x660 (* ?x321 ?x321 ?x321) (* (- 1) (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x390 (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321)) (* (- 1) (* ?x321 ?x321 ?x321 ?x69)) (* (- 1) (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x244 (* 3 (* ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) (* ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) ?x136))))
 (let (($x154 (not (= ?x440 0))))
 (let (($x331 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x505 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x367 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (and $x134 (= ?x367 (- 4)) $x505 $x331 $x154))))))))))))))))) :qid k!34))
 ))
 (let ((?x345 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x316 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x136 (* ?x321 ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)))
 (let ((?x244 (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x69 ?x68)))
 (let ((?x390 (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x660 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x440 (+ ?x660 (* ?x321 ?x321 ?x321) (* (- 1) (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x390 (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321)) (* (- 1) (* ?x321 ?x321 ?x321 ?x69)) (* (- 1) (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x244 (* 3 (* ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) (* ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) ?x136))))
 (let (($x154 (not (= ?x440 0))))
 (let (($x331 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x889 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (let (($x339 (and $x134 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x220 ?x221) 4) $x889 $x331 $x154)))
 (let (($x505 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x367 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x434 (and $x134 (= ?x367 (- 4)) $x505 $x331 $x154)))
 (rewrite (= $x434 $x339))))))))))))))))))))))))))
 ))
 (let (($x101 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x76 (- (+ (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* ?x72 ?x72 ?x72)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x72 ?x72 ?x72))))
 (let ((?x82 (+ ?x76 (* ?x68 ?x68 ?x69 ?x69 ?x72 ?x72 ?x72) (* 3 ?x72 ?x72 ?x72 ?x72 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x72 ?x72 ?x72 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x72 ?x72 ?x72 ?x72 ?x72) (* 3 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x86 (- (- ?x82 (* ?x69 ?x72 ?x72 ?x72)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x90 (+ ?x86 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72 ?x72))))
 (let ((?x95 (- (- ?x90 (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72)) (* 3 ?x68 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72 ?x72))))
 (let (($x97 (= (- ?x95 (* 3 ?x68 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72 ?x72 ?x72)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x97)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x464 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x316 (+ 6 m)))
 (let ((?x321 (+ 1 n)))
 (let ((?x136 (* ?x321 ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)))
 (let ((?x244 (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x69 ?x68)))
 (let ((?x390 (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x660 (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x440 (+ ?x660 (* ?x321 ?x321 ?x321) (* (- 1) (* ?x321 ?x321 ?x321 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x390 (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321 ?x321 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x321 ?x321)) (* (- 1) (* ?x321 ?x321 ?x321 ?x69)) (* (- 1) (* ?x316 ?x316 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x244 (* 3 (* ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* 3 (* ?x321 ?x321 ?x316 ?x316 ?x69 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) (* ?x321 ?x321 ?x321 ?x316 ?x316 ?x316 ?x69 ?x68)) (* (- 3) ?x136))))
 (let (($x154 (not (= ?x440 0))))
 (let (($x331 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x505 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x367 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (let (($x434 (and $x134 (= ?x367 (- 4)) $x505 $x331 $x154)))
 (let ((?x72 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x76 (- (+ (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* ?x72 ?x72 ?x72)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x72 ?x72 ?x72))))
 (let ((?x82 (+ ?x76 (* ?x68 ?x68 ?x69 ?x69 ?x72 ?x72 ?x72) (* 3 ?x72 ?x72 ?x72 ?x72 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x72 ?x72 ?x72 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x72 ?x72 ?x72 ?x72 ?x72) (* 3 ?x72 ?x72 ?x72 ?x72))))
 (let ((?x86 (- (- ?x82 (* ?x69 ?x72 ?x72 ?x72)) (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x90 (+ ?x86 (* ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x72 ?x72))))
 (let ((?x95 (- (- ?x90 (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72)) (* 3 ?x68 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72 ?x72))))
 (let (($x97 (= (- ?x95 (* 3 ?x68 ?x69 ?x70 ?x70 ?x70 ?x72 ?x72 ?x72 ?x72)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x100 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x97)))))
 (rewrite (= $x100 $x434))))))))))))))))))))))))))))))))))
 ))
 (let ((@x102 (asserted $x101)))
 (let ((@x332 (mp (mp @x102 (quant-intro (proof-bind ?x464) (= $x101 $x628)) $x628) (rewrite (= $x628 $x628)) $x628)))
 (let ((@x553 (mp (mp @x332 (quant-intro (proof-bind ?x345) (= $x628 $x447)) $x447) (quant-intro (proof-bind ?x324) (= $x447 $x318)) $x318)))
 (let ((@x743 (mp (mp~ @x553 (sk (~ $x318 $x119)) $x119) (rewrite (= $x119 $x693)) $x693)))
 (let ((@x572 (and-elim @x743 $x399)))
 (let ((@x124 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x399) $x700)) @x572 $x700)))
 (let (($x414 (>= ?x403 6)))
 (let ((@x202 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x399) $x414)) @x572 $x414)))
 (let (($x900 (<= ?x624 1)))
 (let ((@x467 (and-elim @x743 $x719)))
 (let ((@x123 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x719) $x900)) @x467 $x900)))
 (let (($x529 (>= ?x624 1)))
 (let ((@x285 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x719) $x529)) @x467 $x529)))
 (let (($x187 (<= ?x471 4)))
 (let ((@x499 (and-elim @x743 $x573)))
 (let ((@x109 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x573) $x187)) @x499 $x187)))
 (let (($x436 (>= ?x471 4)))
 (let ((@x126 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x573) $x436)) @x499 $x436)))
 (let (($x394 (<= ?x369 1)))
 (let ((@x547 (and-elim @x743 $x363)))
 (let ((@x581 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x363) $x394)) @x547 $x394)))
 (let (($x120 (>= ?x369 1)))
 (let ((@x280 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x363) $x120)) @x547 $x120)))
 (let (($x352 (not (<= ?x365 (- 7)))))
 (let (($x165 (>= ?x365 (- 7))))
 (let ((@x372 ((_ th-lemma arith) (hypothesis (not $x165)) @x285 @x123 @x202 @x124 @x285 @x123 @x280 @x581 @x285 @x123 @x280 @x581 @x285 @x123 @x280 @x581 @x126 @x109 @x285 @x123 @x202 @x124 @x202 @x124 @x285 @x123 @x202 @x124 false)))
 (let ((@x428 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x201 $x352 (not $x165))) (and-elim @x743 $x736) (or $x352 (not $x165)))))
 ((_ th-lemma arith) (unit-resolution @x428 (lemma @x372 $x165) $x352) @x285 @x123 @x202 @x124 @x285 @x123 @x280 @x581 @x285 @x123 @x280 @x581 @x280 @x581 @x285 @x123 @x126 @x109 @x285 @x123 @x202 @x124 @x202 @x124 @x285 @x123 @x202 @x124 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        78
 :arith-branch-var          3
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           14
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             311
 :arith-nonlinear-bounds    15
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             6
 :arith-pivots              11
 :arith-row-summations      26
 :arith-tableau-max-columns 52
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 62
 :del-clause                16
 :final-checks              12
 :max-memory                3.77
 :memory                    3.18
 :mk-bool-var               82
 :mk-clause                 16
 :num-allocs                1675884
 :num-checks                1
 :propagations              12
 :rlimit-count              15163
 :time                      0.01
 :total-time                0.02)
