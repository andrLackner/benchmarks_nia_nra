unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x320 (* (- 3) k!2)))
 (let ((?x377 (* (- 3) c!3)))
 (let ((?x379 (* n!0 k!2)))
 (let ((?x115 (* 2 n!0)))
 (let ((?x116 (* m!1 n!0)))
 (let ((?x621 (+ 3 ?x116 ?x115 ?x379 ?x377 ?x320)))
 (let (($x1622 (<= ?x621 0)))
 (let ((?x425 (* (- 1) k!2)))
 (let ((?x635 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x425)))
 (let (($x474 (<= ?x635 (- 1))))
 (let (($x495 (= ?x635 (- 1))))
 (let ((?x567 (+ c!3 k!2)))
 (let ((?x536 (+ m!1 k!2)))
 (let ((?x111 (+ 6 m!1)))
 (let ((?x564 (+ 1 n!0)))
 (let ((?x654 (+ (* (- 1) (* ?x564 ?x564 ?x111 ?x111 ?x536 ?x536 ?x567 ?x567 ?x567)) (* ?x564 ?x564 ?x111 ?x111 ?x536 ?x536 ?x567 ?x567))))
 (let ((?x472 (* 36 (* k!2 k!2 k!2))))
 (let ((?x579 (* m!1 m!1 m!1 m!1 m!1)))
 (let ((?x306 (* (- 36) (* c!3 c!3))))
 (let ((?x140 (* 12 (* m!1 m!1 m!1 m!1))))
 (let ((?x708 (* 36 (* m!1 m!1 m!1))))
 (let ((?x330 (* (- 72) (* c!3 k!2))))
 (let ((?x94 (* k!2 k!2)))
 (let ((?x346 (* (- 36) ?x94)))
 (let ((?x476 (+ ?x346 ?x330 ?x708 (* 36 (* m!1 m!1 m!1 k!2)) (* (- 1) (* m!1 m!1 c!3 c!3)) (* (- 2) (* m!1 m!1 c!3 k!2)) ?x140 ?x306 (* 3 (* m!1 m!1 m!1 m!1 k!2)) (* 108 (* m!1 m!1 k!2)) (* (- 24) (* m!1 c!3 k!2)) (* m!1 m!1 k!2 k!2 k!2) (* 3 (* m!1 m!1 m!1 k!2 k!2)) (* 96 (* m!1 k!2 k!2)) (* (- 12) (* m!1 c!3 c!3)) (* 12 (* m!1 k!2 k!2 k!2)) ?x579 ?x472 (* 35 (* m!1 m!1 k!2 k!2)))))
 (let ((?x661 (* ?x476 ?x654 ?x621)))
 (let (($x623 (= ?x661 0)))
 (let (($x542 (not $x623)))
 (let ((?x493 (+ ?x115 ?x379 ?x377 ?x425)))
 (let (($x428 (= ?x493 (- 1))))
 (let ((?x187 (+ ?x94 (* 9 n!0) (* (- 18) c!3) (* (- 9) (* n!0 c!3)) (* (- 5) k!2))))
 (let ((?x212 (+ m!1 (* (- 6) n!0))))
 (let (($x208 (= ?x212 6)))
 (let (($x677 (and $x208 (= ?x187 (- 4)) $x428 $x495 $x542)))
 (let ((?x112 (+ k!2 m!1)))
 (let ((?x114 (+ (* ?x564 ?x564 ?x111 ?x111 ?x112 ?x112 ?x567 ?x567) (* (- 1) (* ?x564 ?x564 ?x111 ?x111 ?x112 ?x112 ?x567 ?x567 ?x567)))))
 (let ((?x651 (+ ?x346 (* k!2 k!2 k!2 m!1 m!1) (* 3 (* k!2 k!2 m!1 m!1 m!1)) (* 3 (* k!2 m!1 m!1 m!1 m!1)) ?x579 ?x472 (* 96 (* k!2 k!2 m!1)) (* 108 (* k!2 m!1 m!1)) ?x708 (* 12 (* k!2 k!2 k!2 m!1)) (* 35 (* k!2 k!2 m!1 m!1)) (* 36 (* k!2 m!1 m!1 m!1)) ?x140 (* (- 1) (* c!3 c!3 m!1 m!1)) (* (- 2) (* c!3 k!2 m!1 m!1)) ?x306 ?x330 (* (- 12) (* c!3 c!3 m!1)) (* (- 24) (* c!3 k!2 m!1)))))
 (let (($x321 (= (* ?x651 ?x114 (+ 3 ?x377 ?x320 ?x115 (* k!2 n!0) ?x116)) 0)))
 (let (($x648 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x732 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x94) (* 9 (* c!3 n!0)))))
 (let (($x572 (and $x208 (= ?x732 4) $x648 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x321))))
 (let (($x256 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x372 (+ (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68) (* (- 1) (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68 ?x68)))))
 (let ((?x726 (+ (* (- 36) (* k k)) (* k k k m m) (* 3 (* k k m m m)) (* 3 (* k m m m m)) (* m m m m m) (* 36 (* k k k)) (* 96 (* k k m)) (* 108 (* k m m)) (* 36 (* m m m)) (* 12 (* k k k m)) (* 35 (* k k m m)) (* 36 (* k m m m)) (* 12 (* m m m m)) (* (- 1) (* c c m m)) (* (- 2) (* c k m m)) (* (- 36) (* c c)) (* (- 72) (* c k)) (* (- 12) (* c c m)) (* (- 24) (* c k m)))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x726 ?x372 ?x408) 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x432 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x328 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x372 (+ (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68) (* (- 1) (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68 ?x68)))))
 (let ((?x388 (* (+ (* ?x413 ?x413 ?x71 ?x71 ?x71) (* (- 1) (* ?x413 ?x413 ?x68 ?x68))) ?x372 ?x328)))
 (let (($x530 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x692 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x692 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x530 (not (= ?x388 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x288 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x372 (+ (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68) (* (- 1) (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68 ?x68)))))
 (let ((?x726 (+ (* (- 36) (* k k)) (* k k k m m) (* 3 (* k k m m m)) (* 3 (* k m m m m)) (* m m m m m) (* 36 (* k k k)) (* 96 (* k k m)) (* 108 (* k m m)) (* 36 (* m m m)) (* 12 (* k k k m)) (* 35 (* k k m m)) (* 36 (* k m m m)) (* 12 (* m m m m)) (* (- 1) (* c c m m)) (* (- 2) (* c k m m)) (* (- 36) (* c c)) (* (- 72) (* c k)) (* (- 12) (* c c m)) (* (- 24) (* c k m)))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x103 (and $x123 $x207 $x259 $x297 (not (= (* ?x726 ?x372 ?x408) 0)))))
 (let ((?x388 (* (+ (* ?x413 ?x413 ?x71 ?x71 ?x71) (* (- 1) (* ?x413 ?x413 ?x68 ?x68))) ?x372 (+ 3 ?x220 (* (- 4) k) (* ?x340 ?x71) (* (- 1) m) ?x59))))
 (let (($x530 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x692 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x433 (and $x123 (= ?x692 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x530 (not (= ?x388 0)))))
 (rewrite (= $x433 $x103)))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x84 (- (* ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72) (* ?x68 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x85 (* ?x77 (- (* ?x71 ?x71 ?x71 ?x78 ?x78) (* ?x68 ?x68 ?x78 ?x78)) ?x84)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x540 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x328 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x413 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x372 (+ (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68) (* (- 1) (* ?x340 ?x340 ?x413 ?x413 ?x71 ?x71 ?x68 ?x68 ?x68)))))
 (let ((?x388 (* (+ (* ?x413 ?x413 ?x71 ?x71 ?x71) (* (- 1) (* ?x413 ?x413 ?x68 ?x68))) ?x372 ?x328)))
 (let (($x530 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x692 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x433 (and $x123 (= ?x692 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x530 (not (= ?x388 0)))))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x84 (- (* ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72) (* ?x68 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let ((?x85 (* ?x77 (- (* ?x71 ?x71 ?x71 ?x78 ?x78) (* ?x68 ?x68 ?x78 ?x78)) ?x84)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x85 0))))))
 (rewrite (= $x89 $x433))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x480 (mp (mp @x91 (quant-intro (proof-bind ?x540) (= $x90 $x432)) $x432) (rewrite (= $x432 $x432)) $x432)))
 (let ((@x313 (mp~ (mp @x480 (quant-intro (proof-bind ?x288) (= $x432 $x256)) $x256) (sk (~ $x256 $x572)) $x572)))
 (let ((@x617 (mp @x313 (rewrite (= $x572 $x677)) $x677)))
 (let ((@x282 (and-elim @x617 $x495)))
 (let ((@x237 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x474)) @x282 $x474)))
 (let (($x272 (>= ?x635 (- 1))))
 (let ((@x687 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x272)) @x282 $x272)))
 (let (($x470 (<= ?x493 (- 1))))
 (let ((@x712 (and-elim @x617 $x428)))
 (let ((@x494 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x428) $x470)) @x712 $x470)))
 (let (($x473 (>= ?x493 (- 1))))
 (let ((@x486 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x428) $x473)) @x712 $x473)))
 (let (($x423 (<= ?x212 6)))
 (let ((@x674 (and-elim @x617 $x208)))
 (let ((@x167 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x208) $x423)) @x674 $x423)))
 (let (($x462 (>= ?x212 6)))
 (let ((@x528 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x208) $x462)) @x674 $x462)))
 (let ((@x1618 ((_ th-lemma arith) (hypothesis (not $x1622)) @x528 @x167 @x486 @x494 @x687 @x237 false)))
 (let ((@x1607 (lemma @x1618 $x1622)))
 (let (($x1605 (>= ?x621 0)))
 (let ((@x1601 ((_ th-lemma arith) (hypothesis (not $x1605)) @x687 @x237 @x486 @x494 @x528 @x167 false)))
 (let ((@x1574 (lemma @x1601 $x1605)))
 (let (($x1656 (not (<= ?x661 0))))
 (let (($x467 (>= ?x661 0)))
 (let ((@x1597 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x467)) @x1574 (hypothesis $x1622) false) (or (not $x1622) $x467))))
 (let ((@x1583 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x623 $x1656 (not $x467))) (and-elim @x617 $x542) (or $x1656 (not $x467)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x1583 (unit-resolution @x1597 @x1607 $x467) $x1656) @x1574 @x1607 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 121
 :arith-assert-diseq        9
 :arith-assert-lower        1583
 :arith-assert-upper        739
 :arith-bound-prop          27
 :arith-branch-var          26
 :arith-conflicts           49
 :arith-eq-adapter          13
 :arith-fixed-eqs           187
 :arith-gcd-tests           614
 :arith-gomory-cuts         21
 :arith-grobner             82
 :arith-ineq-splits         26
 :arith-max-min             9996
 :arith-nonlinear-bounds    460
 :arith-nonlinear-horner    1202
 :arith-num-rows            26
 :arith-offset-eqs          3
 :arith-patches             84
 :arith-patches_succ        32
 :arith-pivots              954
 :arith-pseudo-nonlinear    172
 :arith-row-summations      9505
 :arith-tableau-max-columns 97
 :arith-tableau-max-rows    26
 :conflicts                 55
 :decisions                 264
 :del-clause                129
 :final-checks              229
 :max-memory                20.71
 :memory                    19.27
 :minimized-lits            8
 :mk-bool-var               363
 :mk-clause                 264
 :num-allocs                55396043746.00
 :num-checks                1
 :propagations              221
 :rlimit-count              9252720
 :time                      30.30
 :total-time                30.31)
