unsat
((set-logic NRA)
(declare-fun z!4 () Real)
(declare-fun y!5 () Real)
(declare-fun x!6 () Real)
(proof
(let ((?x165 (+ (* 8.0 (* x!6 x!6 x!6 z!4 z!4)) (* (- 4.0) (* x!6 x!6 x!6 y!5 z!4 z!4 z!4)) (* 8.0 (* x!6 x!6 x!6 x!6 y!5 z!4)) (* 4.0 (* x!6 x!6 x!6 y!5 z!4 z!4)) (* 4.0 (* x00 y00 x!6 x!6 z!4 z!4 z!4)) (* (- 4.0) (* z00 x!6 x!6 x!6 y!5 z!4)) (* (- 4.0) (* x00 y00 x!6 x!6 x!6 y!5 z!4)) (* 4.0 (* z00 x!6 x!6 z!4 z!4 z!4)) (* (- (/ 1.0 2.0)) (* x00 y00 y!5 z!4)) (* (- 4.0) (* x!6 x!6 z!4 z!4 z!4 z!4)) (* 4.0 (* x!6 x!6 x!6 x!6 y!5 y!5 z!4)) (* (- 8.0) (* x00 y00 x!6 x!6 x!6 z!4)) (* (/ 1.0 2.0) (* y!5 z!4 z!4)) (* (- 8.0) (* z00 x!6 x!6 x!6 z!4)) (* (- (/ 1.0 2.0)) (* z00 y!5 z!4)) (* (/ 1.0 2.0) (* x!6 y!5 y!5 z!4)))))
 (let (($x583 (>= ?x165 0.0)))
 (let (($x315 (not $x583)))
 (let (($x317 (= 0.0 ?x165)))
 (let (($x325 (not $x317)))
 (let ((@x324 (symm (commutativity (= $x317 (= ?x165 0.0))) (= (= ?x165 0.0) $x317))))
 (let (($x336 (= ?x165 0.0)))
 (let (($x363 (not $x336)))
 (let ((?x184 (* x!6 y!5)))
 (let ((?x75 (* x00 y00)))
 (let ((?x76 (* (- 1.0) ?x75)))
 (let ((?x95 (* (- 1.0) z00)))
 (let ((?x484 (* (- 4.0) (* x!6 x!6 x!6 x!6))))
 (let ((?x191 (* (/ 1.0 2.0) z!4)))
 (let ((?x303 (* 4.0 (* x!6 x!6 x!6 x!6 x!6))))
 (let ((?x585 (* (/ 1.0 2.0) x!6)))
 (let ((?x123 (+ (* 12.0 (* x!6 x!6 x!6 z!4 z!4)) (* (- 4.0) (* x!6 x!6 x!6 z!4)) (* 4.0 (* x!6 x!6 z!4 z!4 z!4)) (* (- 4.0) (* x!6 x!6 x!6 y!5 z!4)) (* (- 4.0) (* x!6 x!6 x!6 x!6 y!5)) (* (- (/ 1.0 2.0)) ?x184) ?x585 ?x303 ?x191 (* 12.0 (* x!6 x!6 x!6 x!6 z!4)) (* (- (/ 1.0 2.0)) (* y!5 z!4)) ?x484)))
 (let (($x243 (= (* ?x123 (+ ?x95 ?x76 ?x184 z!4)) 0.0)))
 (let ((?x419 (+ ?x184 z!4 ?x95 ?x76)))
 (let (($x341 (= ?x419 0.0)))
 (let ((?x297 (+ z00 ?x75 (* (- 1.0) ?x184) (* (- 1.0) z!4))))
 (let (($x359 (= ?x297 0.0)))
 (let (($x446 (not $x243)))
 (let (($x318 (or $x363 $x446)))
 (let (($x180 (and $x359 $x318)))
 (let ((?x248 (+ (* 8.0 (* z!4 z!4 x!6 x!6 x!6)) (* (- 8.0) (* z!4 x!6 x!6 x!6 z00)) (* (- 8.0) (* z!4 x!6 x!6 x!6 x00 y00)) (* 8.0 (* z!4 y!5 x!6 x!6 x!6 x!6)) (* 4.0 (* z!4 z!4 y!5 x!6 x!6 x!6)) (* (- 4.0) (* z!4 y!5 x!6 x!6 x!6 z00)) (* (- 4.0) (* z!4 y!5 x!6 x!6 x!6 x00 y00)) (* 4.0 (* z!4 y!5 y!5 x!6 x!6 x!6 x!6)) (* (- 4.0) (* z!4 z!4 z!4 z!4 x!6 x!6)) (* 4.0 (* z!4 z!4 z!4 x!6 x!6 z00)) (* 4.0 (* z!4 z!4 z!4 x!6 x!6 x00 y00)) (* (- 4.0) (* z!4 z!4 z!4 y!5 x!6 x!6 x!6)) (* (/ 1.0 2.0) (* z!4 z!4 y!5)) (* (- (/ 1.0 2.0)) (* z!4 y!5 z00)) (* (- (/ 1.0 2.0)) (* z!4 y!5 x00 y00)) (* (/ 1.0 2.0) (* z!4 y!5 y!5 x!6)))))
 (let ((?x360 (* y!5 x!6)))
 (let ((?x348 (+ z!4 ?x95 ?x76 ?x360)))
 (let ((?x491 (+ ?x191 ?x585 (* (- (/ 1.0 2.0)) ?x360) (* (- 4.0) (* z!4 x!6 x!6 x!6)) (* (- 4.0) (* z!4 y!5 x!6 x!6 x!6)) ?x484 (* (- 4.0) (* y!5 x!6 x!6 x!6 x!6)) ?x303 (* 4.0 (* z!4 z!4 z!4 x!6 x!6)) (* 12.0 (* z!4 z!4 x!6 x!6 x!6)) (* 12.0 (* z!4 x!6 x!6 x!6 x!6)) (* (- (/ 1.0 2.0)) (* z!4 y!5)))))
 (let (($x147 (and (= ?x348 0.0) (or (not (= (* ?x491 ?x348) 0.0)) (not (= ?x248 0.0))))))
 (let (($x619 (exists ((x Real) (y Real) (z Real) )(! (let ((?x591 (+ (* 8.0 (* z z x x x)) (* (- 8.0) (* z x x x z00)) (* (- 8.0) (* z x x x x00 y00)) (* 8.0 (* z y x x x x)) (* 4.0 (* z z y x x x)) (* (- 4.0) (* z y x x x z00)) (* (- 4.0) (* z y x x x x00 y00)) (* 4.0 (* z y y x x x x)) (* (- 4.0) (* z z z z x x)) (* 4.0 (* z z z x x z00)) (* 4.0 (* z z z x x x00 y00)) (* (- 4.0) (* z z z y x x x)) (* (/ 1.0 2.0) (* z z y)) (* (- (/ 1.0 2.0)) (* z y z00)) (* (- (/ 1.0 2.0)) (* z y x00 y00)) (* (/ 1.0 2.0) (* z y y x)))))
 (let (($x574 (not (= ?x591 0.0))))
 (let ((?x81 (* y x)))
 (let ((?x75 (* x00 y00)))
 (let ((?x76 (* (- 1.0) ?x75)))
 (let ((?x95 (* (- 1.0) z00)))
 (let ((?x101 (+ z ?x95 ?x76 ?x81)))
 (let ((?x497 (* (- (/ 1.0 2.0)) (* z y))))
 (let ((?x357 (* 12.0 (* z x x x x))))
 (let ((?x314 (* z z x x x)))
 (let ((?x354 (* 12.0 ?x314)))
 (let ((?x345 (* 4.0 (* z z z x x))))
 (let ((?x344 (* 4.0 (* x x x x x))))
 (let ((?x286 (* (- 4.0) (* y x x x x))))
 (let ((?x256 (* (- 4.0) (* x x x x))))
 (let ((?x280 (* (- 4.0) (* z y x x x))))
 (let ((?x215 (* z x x x)))
 (let ((?x249 (* (- 4.0) ?x215)))
 (let ((?x181 (* (/ 1.0 2.0) x)))
 (let ((?x178 (* (/ 1.0 2.0) z)))
 (let ((?x418 (+ ?x178 ?x181 (* (- (/ 1.0 2.0)) ?x81) ?x249 ?x280 ?x256 ?x286 ?x344 ?x345 ?x354 ?x357 ?x497)))
 (let (($x106 (= ?x101 0.0)))
 (and $x106 (or (not (= (* ?x418 ?x101) 0.0)) $x574)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x283 (exists ((x Real) (y Real) (z Real) )(! (let ((?x345 (* 4.0 (* z z z x x))))
 (let ((?x280 (* (- 4.0) (* z y x x x))))
 (let ((?x497 (* (- (/ 1.0 2.0)) (* z y))))
 (let ((?x95 (* (- 1.0) z00)))
 (let ((?x81 (* y x)))
 (let ((?x75 (* x00 y00)))
 (let ((?x76 (* (- 1.0) ?x75)))
 (let ((?x86 (+ ?x76 ?x81 z ?x95)))
 (let (($x218 (= (* ?x86 (+ ?x497 ?x280 ?x345 (* (- 8.0) (* z x x x)))) 0.0)))
 (let ((?x366 (+ ?x76 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x95)))
 (let ((?x548 (* (- 8.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x x x))))
 (let ((?x385 (+ (* (- 1.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)))) ?x548 (* 4.0 (* (+ z x) (+ z x) (+ z x) x x)) (* (- 8.0) (* (+ z x) x x x)))))
 (and (= ?x86 0.0) (or (not (= (* ?x385 ?x366) 0.0)) (not $x218))))))))))))))) :qid k!28))
 ))
 (let ((?x72 (lambda ((x Real) (y Real) (z Real) )(let ((?x591 (+ (* 8.0 (* z z x x x)) (* (- 8.0) (* z x x x z00)) (* (- 8.0) (* z x x x x00 y00)) (* 8.0 (* z y x x x x)) (* 4.0 (* z z y x x x)) (* (- 4.0) (* z y x x x z00)) (* (- 4.0) (* z y x x x x00 y00)) (* 4.0 (* z y y x x x x)) (* (- 4.0) (* z z z z x x)) (* 4.0 (* z z z x x z00)) (* 4.0 (* z z z x x x00 y00)) (* (- 4.0) (* z z z y x x x)) (* (/ 1.0 2.0) (* z z y)) (* (- (/ 1.0 2.0)) (* z y z00)) (* (- (/ 1.0 2.0)) (* z y x00 y00)) (* (/ 1.0 2.0) (* z y y x)))))
 (let (($x574 (not (= ?x591 0.0))))
 (let ((?x81 (* y x)))
 (let ((?x75 (* x00 y00)))
 (let ((?x76 (* (- 1.0) ?x75)))
 (let ((?x95 (* (- 1.0) z00)))
 (let ((?x101 (+ z ?x95 ?x76 ?x81)))
 (let ((?x497 (* (- (/ 1.0 2.0)) (* z y))))
 (let ((?x357 (* 12.0 (* z x x x x))))
 (let ((?x314 (* z z x x x)))
 (let ((?x354 (* 12.0 ?x314)))
 (let ((?x345 (* 4.0 (* z z z x x))))
 (let ((?x344 (* 4.0 (* x x x x x))))
 (let ((?x286 (* (- 4.0) (* y x x x x))))
 (let ((?x256 (* (- 4.0) (* x x x x))))
 (let ((?x280 (* (- 4.0) (* z y x x x))))
 (let ((?x215 (* z x x x)))
 (let ((?x249 (* (- 4.0) ?x215)))
 (let ((?x181 (* (/ 1.0 2.0) x)))
 (let ((?x178 (* (/ 1.0 2.0) z)))
 (let ((?x418 (+ ?x178 ?x181 (* (- (/ 1.0 2.0)) ?x81) ?x249 ?x280 ?x256 ?x286 ?x344 ?x345 ?x354 ?x357 ?x497)))
 (let (($x106 (= ?x101 0.0)))
 (let (($x200 (and $x106 (or (not (= (* ?x418 ?x101) 0.0)) $x574))))
 (let (($x218 (= (* (+ ?x76 ?x81 z ?x95) (+ ?x497 ?x280 ?x345 (* (- 8.0) ?x215))) 0.0)))
 (let ((?x366 (+ ?x76 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x95)))
 (let ((?x548 (* (- 8.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x x x))))
 (let ((?x385 (+ (* (- 1.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)))) ?x548 (* 4.0 (* (+ z x) (+ z x) (+ z x) x x)) (* (- 8.0) (* (+ z x) x x x)))))
 (let (($x495 (and (= (+ ?x76 ?x81 z ?x95) 0.0) (or (not (= (* ?x385 ?x366) 0.0)) (not $x218)))))
 (rewrite (= $x495 $x200)))))))))))))))))))))))))))))))
 ))
 (let (($x67 (exists ((x Real) (y Real) (z Real) )(! (let ((?x57 (- (* (- 1.0) (/ y 2.0) z) (* 2.0 x 2.0 x 2.0 x (/ y 2.0) z))))
 (let ((?x61 (- (+ ?x57 (* 2.0 x 2.0 x z z z)) (* 2.0 x 2.0 x 2.0 x z))))
 (let ((?x54 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x40 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x43 (- (* (- 1.0) ?x36 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40))))
 (let ((?x47 (- (+ ?x43 (* 2.0 x 2.0 x ?x40 ?x40 ?x40)) (* 2.0 x 2.0 x 2.0 x ?x40))))
 (let ((?x39 (- (+ (* (- 1.0) x00 y00) (* 2.0 x ?x36) z x) z00)))
 (let (($x33 (= (- (+ (* (- 1.0) x00 y00) (* x y) z) z00) 0.0)))
 (and $x33 (or (not (= (* ?x39 ?x47) 0.0)) (not (= (* ?x54 ?x61) 0.0))))))))))))) :qid k!28))
 ))
 (let ((?x408 (lambda ((x Real) (y Real) (z Real) )(let ((?x345 (* 4.0 (* z z z x x))))
 (let ((?x280 (* (- 4.0) (* z y x x x))))
 (let ((?x497 (* (- (/ 1.0 2.0)) (* z y))))
 (let ((?x95 (* (- 1.0) z00)))
 (let ((?x81 (* y x)))
 (let ((?x75 (* x00 y00)))
 (let ((?x76 (* (- 1.0) ?x75)))
 (let ((?x86 (+ ?x76 ?x81 z ?x95)))
 (let (($x218 (= (* ?x86 (+ ?x497 ?x280 ?x345 (* (- 8.0) (* z x x x)))) 0.0)))
 (let ((?x366 (+ ?x76 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x95)))
 (let ((?x548 (* (- 8.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x x x))))
 (let ((?x385 (+ (* (- 1.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)))) ?x548 (* 4.0 (* (+ z x) (+ z x) (+ z x) x x)) (* (- 8.0) (* (+ z x) x x x)))))
 (let (($x495 (and (= ?x86 0.0) (or (not (= (* ?x385 ?x366) 0.0)) (not $x218)))))
 (let ((?x57 (- (* (- 1.0) (/ y 2.0) z) (* 2.0 x 2.0 x 2.0 x (/ y 2.0) z))))
 (let ((?x61 (- (+ ?x57 (* 2.0 x 2.0 x z z z)) (* 2.0 x 2.0 x 2.0 x z))))
 (let ((?x54 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x40 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x43 (- (* (- 1.0) ?x36 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40))))
 (let ((?x47 (- (+ ?x43 (* 2.0 x 2.0 x ?x40 ?x40 ?x40)) (* 2.0 x 2.0 x 2.0 x ?x40))))
 (let ((?x39 (- (+ (* (- 1.0) x00 y00) (* 2.0 x ?x36) z x) z00)))
 (let (($x33 (= (- (+ (* (- 1.0) x00 y00) (* x y) z) z00) 0.0)))
 (let (($x66 (and $x33 (or (not (= (* ?x39 ?x47) 0.0)) (not (= (* ?x54 ?x61) 0.0))))))
 (rewrite (= $x66 $x495))))))))))))))))))))))))))
 ))
 (let ((@x68 (asserted $x67)))
 (let ((@x368 (mp (mp @x68 (quant-intro (proof-bind ?x408) (= $x67 $x283)) $x283) (quant-intro (proof-bind ?x72) (= $x283 $x619)) $x619)))
 (let ((@x293 (mp (mp~ @x368 (sk (~ $x619 $x147)) $x147) (rewrite (= $x147 $x180)) $x180)))
 (let ((@x77 (and-elim @x293 $x359)))
 (let (($x582 (<= ?x297 0.0)))
 (let (($x190 (= 0.0 ?x297)))
 (let ((@x115 (mp @x77 (symm (commutativity (= $x190 $x359)) (= $x359 $x190)) $x190)))
 (let ((@x398 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x190) $x582)) @x115 $x582)))
 (let (($x469 (>= ?x297 0.0)))
 (let ((@x128 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x190) $x469)) @x115 $x469)))
 (let (($x320 (<= ?x419 0.0)))
 (let (($x90 (>= ?x419 0.0)))
 (let ((@x572 ((_ th-lemma arith) (lemma ((_ th-lemma arith) @x398 (hypothesis (not $x90)) false) $x90) (lemma ((_ th-lemma arith) (hypothesis (not $x320)) @x128 false) $x320) @x128 @x398 (= ?x297 ?x419))))
 (let (($x424 (or (not $x341) $x243)))
 (let ((@x384 (unit-resolution ((_ th-lemma arith) $x424) (hypothesis $x446) (hypothesis $x341) false)))
 (let ((@x339 (unit-resolution (lemma @x384 $x424) (trans* (symm @x572 (= ?x419 ?x297)) @x77 $x341) $x243)))
 (let ((@x310 (mp (unit-resolution (and-elim @x293 $x318) @x339 $x363) (monotonicity @x324 (= $x363 $x325)) $x325)))
 (let (($x550 (<= ?x165 0.0)))
 (let ((@x137 (unit-resolution ((_ th-lemma arith) (or (not $x582) (not $x469) $x550)) @x398 @x128 (hypothesis (not $x550)) false)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x317 (not $x550) $x315)) (lemma @x137 $x550) @x310 $x315)))
 (unit-resolution ((_ th-lemma arith) (or (not $x582) (not $x469) $x583)) @x398 @x128 @x296 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      16
 :arith-eq-adapter               15
 :arith-bound-propagations-cheap 12
 :arith-conflicts                13
 :arith-diseq                    24
 :arith-fixed-eqs                1
 :arith-grobner-calls            2
 :arith-grobner-conflicts        2
 :arith-horner-calls             2
 :arith-lower                    22
 :arith-make-feasible            18
 :arith-max-columns              42
 :arith-max-rows                 5
 :arith-nla-explanations         6
 :arith-nla-lemmas               11
 :arith-propagations             12
 :arith-upper                    12
 :conflicts                      6
 :decisions                      24
 :del-clause                     10
 :final-checks                   14
 :max-memory                     1.90
 :memory                         1.04
 :mk-bool-var                    56
 :mk-clause                      62
 :num-allocs                     242973
 :num-checks                     1
 :propagations                   30
 :rlimit-count                   3819
 :time                           0.00
 :total-time                     0.01)
