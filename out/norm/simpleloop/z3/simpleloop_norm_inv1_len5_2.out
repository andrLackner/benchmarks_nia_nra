unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x1770 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x178 (<= ?x1770 0)))
 (let (($x177 (= ?x1770 0)))
 (let ((?x1820 (+ 1 y!0)))
 (let ((?x1458 (+ (- 1) x!1)))
 (let ((?x1828 (* ?x1458 ?x1458 ?x1458 ?x1820 ?x1820 ?x1820 ?x1820)))
 (let ((?x1817 (* (- 1) (* ?x1458 ?x1458 ?x1820 ?x1820 ?x1820 ?x1820))))
 (let ((?x275 (* 3 (* x!1 y!0))))
 (let ((?x1810 (* 4 (* x!1 y!0 y!0))))
 (let ((?x1811 (* ?x1458 ?x1458 ?x1458 ?x1458 ?x1820 ?x1820 ?x1820)))
 (let ((?x1816 (* 2 (* y!0 y!0))))
 (let ((?x284 (* y!0 y!0 y!0 y!0)))
 (let ((?x282 (* 3 (* y!0 y!0 y!0))))
 (let ((?x274 (* x!1 y!0 y!0 y!0)))
 (let ((?x247 (* ?x1458 ?x1458 ?x1458 ?x1458 ?x1820 ?x1820)))
 (let ((?x176 (* x!1 x!1)))
 (let ((?x169 (* x!1 x!1 y!0)))
 (let ((?x2335 (* 3 x00)))
 (let ((?x1983 (* 3 y00)))
 (let ((?x1881 (+ ?x1983 ?x2335 (* 7 (* x00 x!1 x!1)) ?x169 ?x176 (* (- 22) (* x00 x!1 y!0)) (* (- 18) (* x00 x!1 y!0 y!0)) ?x247 (* (- 4) (* x00 x!1 x!1 x!1 y!0 y!0)) (* 18 (* x00 x!1 x!1 y!0)) ?x274 ?x282 (* y00 y!0 y!0 y!0) ?x284 (* 4 (* x00 x!1 x!1 y!0 y!0 y!0)) (* (- 1) (* x00 x!1 x!1 x!1 y!0 y!0 y!0)) (* 4 (* y00 y!0 y!0)) (* (- 18) (* y00 x!1 y!0 y!0)) (* 15 (* y00 x!1 x!1 y!0 y!0)) (* (- 4) (* y00 x!1 x!1 x!1 y!0 y!0)) (* (- 9) (* y00 x!1)) (* (- 5) (* y00 x!1 y!0 y!0 y!0)) (* 4 (* y00 x!1 x!1 y!0 y!0 y!0)) (* 15 (* x00 x!1 x!1 y!0 y!0)) (* (- 5) (* x00 x!1 y!0 y!0 y!0)) (* (- 5) (* x00 x!1 x!1 x!1 y!0)) (* 4 (* x00 y!0 y!0)) (* 6 (* y00 y!0)) (* (- 2) (* y00 x!1 x!1 x!1)) (* 6 (* x00 y!0)) (* (- 9) (* x00 x!1)) (* x00 y!0 y!0 y!0) ?x1816 ?x1811 ?x1810 ?x275 ?x1817 (* (- 2) (* x00 x!1 x!1 x!1)) ?x1828 (* 7 (* y00 x!1 x!1)) (* (- 22) (* y00 x!1 y!0)) (* 18 (* y00 x!1 x!1 y!0)) (* (- 5) (* y00 x!1 x!1 x!1 y!0)) (* (- 1) (* y00 x!1 x!1 x!1 y!0 y!0 y!0)))))
 (let (($x324 (= ?x1881 0)))
 (let (($x1625 (not $x324)))
 (let (($x1182 (and $x177 $x1625)))
 (let ((?x1641 (+ ?x1983 ?x2335 (* (- 9) (* x!1 x00)) (* 7 (* x!1 x!1 x00)) (* (- 2) (* x!1 x!1 x!1 x00)) (* 6 (* y!0 x00)) (* (- 22) (* x!1 y!0 x00)) (* 18 (* x!1 x!1 y!0 x00)) (* (- 5) (* x!1 x!1 x!1 y!0 x00)) (* 4 (* y!0 y!0 x00)) (* (- 18) (* x!1 y!0 y!0 x00)) (* 15 (* x!1 x!1 y!0 y!0 x00)) (* (- 4) (* x!1 x!1 x!1 y!0 y!0 x00)) (* y!0 y!0 y!0 x00) (* (- 5) (* x!1 y!0 y!0 y!0 x00)) (* 4 (* x!1 x!1 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y!0 x00)) (* 6 (* y!0 y00)) (* 4 (* y!0 y!0 y00)) (* (- 18) (* x!1 y!0 y!0 y00)) (* 15 (* x!1 x!1 y!0 y!0 y00)) (* (- 4) (* x!1 x!1 x!1 y!0 y!0 y00)) (* (- 9) (* x!1 y00)) (* 7 (* x!1 x!1 y00)) (* (- 2) (* x!1 x!1 x!1 y00)) (* (- 22) (* x!1 y!0 y00)) (* 18 (* x!1 x!1 y!0 y00)) (* (- 5) (* x!1 x!1 x!1 y!0 y00)) ?x1817 ?x1828 (* y!0 y!0 y!0 y00) (* (- 5) (* x!1 y!0 y!0 y!0 y00)) (* 4 (* x!1 x!1 y!0 y!0 y!0 y00)) ?x1811 ?x1816 ?x1810 ?x275 ?x282 ?x274 ?x284 ?x247 (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y!0 y00)) ?x169 ?x176)))
 (let (($x1556 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x1641 0)))))
 (let (($x2359 (exists ((x Int) (y Int) )(! (let ((?x1921 (* x x)))
 (let ((?x1911 (* x x y)))
 (let ((?x2020 (* (- 1) (* x x x y y y y00))))
 (let ((?x99 (+ 1 y)))
 (let ((?x91 (+ (- 1) x)))
 (let ((?x1441 (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99)))
 (let ((?x1360 (* y y y y)))
 (let ((?x1258 (* x y y y)))
 (let ((?x2019 (* 3 (* y y y))))
 (let ((?x1281 (* 3 (* x y))))
 (let ((?x2018 (* 4 (* x y y))))
 (let ((?x2017 (* 2 (* y y))))
 (let ((?x935 (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99)))
 (let ((?x2016 (* 4 (* x x y y y y00))))
 (let ((?x907 (* y y y y00)))
 (let ((?x880 (* ?x91 ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x795 (* ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x2014 (* (- 1) ?x795)))
 (let ((?x2013 (* (- 5) (* x x x y y00))))
 (let ((?x2010 (* (- 2) (* x x x y00))))
 (let ((?x2007 (* (- 4) (* x x x y y y00))))
 (let ((?x2004 (* 4 (* y y y00))))
 (let ((?x2003 (* 6 (* y y00))))
 (let ((?x2002 (* (- 1) (* x x x y y y x00))))
 (let ((?x2001 (* 4 (* x x y y y x00))))
 (let ((?x435 (* y y y x00)))
 (let ((?x1999 (* (- 4) (* x x x y y x00))))
 (let ((?x1994 (* 4 (* y y x00))))
 (let ((?x1993 (* (- 5) (* x x x y x00))))
 (let ((?x1988 (* 6 (* y x00))))
 (let ((?x1987 (* (- 2) (* x x x x00))))
 (let ((?x2335 (* 3 x00)))
 (let ((?x1983 (* 3 y00)))
 (let ((?x2352 (+ ?x1983 ?x2335 (* (- 9) (* x x00)) (* 7 (* x x x00)) ?x1987 ?x1988 (* (- 22) (* x y x00)) (* 18 (* x x y x00)) ?x1993 ?x1994 (* (- 18) (* x y y x00)) (* 15 (* x x y y x00)) ?x1999 ?x435 (* (- 5) (* x y y y x00)) ?x2001 ?x2002 ?x2003 ?x2004 (* (- 18) (* x y y y00)) (* 15 (* x x y y y00)) ?x2007 (* (- 9) (* x y00)) (* 7 (* x x y00)) ?x2010 (* (- 22) (* x y y00)) (* 18 (* x x y y00)) ?x2013 ?x2014 ?x880 ?x907 (* (- 5) (* x y y y y00)) ?x2016 ?x935 ?x2017 ?x2018 ?x1281 ?x2019 ?x1258 ?x1360 ?x1441 ?x2020 ?x1911 ?x1921)))
 (let (($x101 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x101 (not (= ?x2352 0)))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1554 (exists ((x Int) (y Int) )(! (let ((?x99 (+ 1 y)))
 (let ((?x91 (+ (- 1) x)))
 (let ((?x795 (* ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x1224 (+ (* x00 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99) (* x00 ?x91 ?x91 ?x91 ?x99 ?x99) (* y00 ?x91 ?x91 ?x91 ?x99 ?x99) ?x795 (* (- 1) (* ?x91 ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99)) (* y00 ?x91 ?x99) (* x00 ?x91 ?x99) (* (- 1) (* y00 ?x91 ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x99 ?x99)) (* (- 1) (* ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x99 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99)) (* y00 ?x99 ?x99 ?x99) (* x00 ?x99 ?x99 ?x99) (* y00 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99) (* (- 1) (* x00 ?x91 ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x91 ?x99)))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1224 0))))))) :qid k!26))
 ))
 (let ((?x2361 (lambda ((x Int) (y Int) )(let ((?x1921 (* x x)))
 (let ((?x1911 (* x x y)))
 (let ((?x2020 (* (- 1) (* x x x y y y y00))))
 (let ((?x99 (+ 1 y)))
 (let ((?x91 (+ (- 1) x)))
 (let ((?x1441 (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99)))
 (let ((?x1360 (* y y y y)))
 (let ((?x1258 (* x y y y)))
 (let ((?x2019 (* 3 (* y y y))))
 (let ((?x1281 (* 3 (* x y))))
 (let ((?x2018 (* 4 (* x y y))))
 (let ((?x2017 (* 2 (* y y))))
 (let ((?x935 (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99)))
 (let ((?x2016 (* 4 (* x x y y y y00))))
 (let ((?x907 (* y y y y00)))
 (let ((?x880 (* ?x91 ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x795 (* ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x2014 (* (- 1) ?x795)))
 (let ((?x2013 (* (- 5) (* x x x y y00))))
 (let ((?x2010 (* (- 2) (* x x x y00))))
 (let ((?x2007 (* (- 4) (* x x x y y y00))))
 (let ((?x2004 (* 4 (* y y y00))))
 (let ((?x2003 (* 6 (* y y00))))
 (let ((?x2002 (* (- 1) (* x x x y y y x00))))
 (let ((?x2001 (* 4 (* x x y y y x00))))
 (let ((?x435 (* y y y x00)))
 (let ((?x1999 (* (- 4) (* x x x y y x00))))
 (let ((?x1994 (* 4 (* y y x00))))
 (let ((?x1993 (* (- 5) (* x x x y x00))))
 (let ((?x1988 (* 6 (* y x00))))
 (let ((?x1987 (* (- 2) (* x x x x00))))
 (let ((?x2335 (* 3 x00)))
 (let ((?x1983 (* 3 y00)))
 (let ((?x2352 (+ ?x1983 ?x2335 (* (- 9) (* x x00)) (* 7 (* x x x00)) ?x1987 ?x1988 (* (- 22) (* x y x00)) (* 18 (* x x y x00)) ?x1993 ?x1994 (* (- 18) (* x y y x00)) (* 15 (* x x y y x00)) ?x1999 ?x435 (* (- 5) (* x y y y x00)) ?x2001 ?x2002 ?x2003 ?x2004 (* (- 18) (* x y y y00)) (* 15 (* x x y y y00)) ?x2007 (* (- 9) (* x y00)) (* 7 (* x x y00)) ?x2010 (* (- 22) (* x y y00)) (* 18 (* x x y y00)) ?x2013 ?x2014 ?x880 ?x907 (* (- 5) (* x y y y y00)) ?x2016 ?x935 ?x2017 ?x2018 ?x1281 ?x2019 ?x1258 ?x1360 ?x1441 ?x2020 ?x1911 ?x1921)))
 (let (($x101 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1607 (and $x101 (not (= ?x2352 0)))))
 (let ((?x1224 (+ (* x00 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99) (* x00 ?x91 ?x91 ?x91 ?x99 ?x99) (* y00 ?x91 ?x91 ?x91 ?x99 ?x99) ?x795 (* (- 1) ?x880) (* (- 1) ?x935) (* y00 ?x91 ?x99) (* x00 ?x91 ?x99) (* (- 1) (* y00 ?x91 ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x99 ?x99)) (* (- 1) (* ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x99 ?x99 ?x99 ?x99)) (* (- 1) ?x1441) (* y00 ?x99 ?x99 ?x99) (* x00 ?x99 ?x99 ?x99) (* y00 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99) (* (- 1) (* x00 ?x91 ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x91 ?x99)))))
 (let (($x673 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1224 0)))))
 (rewrite (= $x673 $x1607)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x72 (exists ((x Int) (y Int) )(! (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (+ (* ?x34 ?x34 ?x34 x00 ?x35 ?x35 ?x35) (* ?x34 ?x34 ?x34 x00 ?x35 ?x35) (* ?x34 ?x34 ?x34 ?x35 ?x35 y00) (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35))))
 (let ((?x44 (+ (- ?x40 (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* 0 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x49 (+ (- ?x44 (* ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35)) (* ?x34 ?x35 y00) (* ?x34 x00 ?x35))))
 (let ((?x57 (- (- (- ?x49 (* ?x34 ?x34 ?x35 ?x35 ?x35 y00)) (* ?x34 ?x35 ?x35)) (* ?x34 ?x35 ?x35 ?x35))))
 (let ((?x59 (- (- ?x57 (* ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let ((?x63 (+ ?x59 (* ?x35 ?x35 ?x35 y00) (* x00 ?x35 ?x35 ?x35) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 y00))))
 (let (($x68 (= (- (- ?x63 (* ?x34 ?x34 x00 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x35)) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x68)))))))))))) :qid k!26))
 ))
 (let ((?x1108 (lambda ((x Int) (y Int) )(let ((?x99 (+ 1 y)))
 (let ((?x91 (+ (- 1) x)))
 (let ((?x795 (* ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)))
 (let ((?x1224 (+ (* x00 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99) (* x00 ?x91 ?x91 ?x91 ?x99 ?x99) (* y00 ?x91 ?x91 ?x91 ?x99 ?x99) ?x795 (* (- 1) (* ?x91 ?x91 ?x91 ?x99 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99)) (* y00 ?x91 ?x99) (* x00 ?x91 ?x99) (* (- 1) (* y00 ?x91 ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x99 ?x99)) (* (- 1) (* ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x99 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x91 ?x91 ?x91 ?x99 ?x99)) (* y00 ?x99 ?x99 ?x99) (* x00 ?x99 ?x99 ?x99) (* y00 ?x91 ?x91 ?x91 ?x99 ?x99 ?x99) (* (- 1) (* x00 ?x91 ?x91 ?x99 ?x99 ?x99)) (* (- 1) (* ?x91 ?x91 ?x99)))))
 (let (($x673 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1224 0)))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (+ (* ?x34 ?x34 ?x34 x00 ?x35 ?x35 ?x35) (* ?x34 ?x34 ?x34 x00 ?x35 ?x35) (* ?x34 ?x34 ?x34 ?x35 ?x35 y00) (* ?x34 ?x34 ?x35 ?x35 ?x35 ?x35))))
 (let ((?x44 (+ (- ?x40 (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 ?x35)) (* 0 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x49 (+ (- ?x44 (* ?x34 ?x34 ?x34 ?x34 ?x35 ?x35 ?x35)) (* ?x34 ?x35 y00) (* ?x34 x00 ?x35))))
 (let ((?x57 (- (- (- ?x49 (* ?x34 ?x34 ?x35 ?x35 ?x35 y00)) (* ?x34 ?x35 ?x35)) (* ?x34 ?x35 ?x35 ?x35))))
 (let ((?x59 (- (- ?x57 (* ?x35 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x34 ?x34 ?x35 ?x35))))
 (let ((?x63 (+ ?x59 (* ?x35 ?x35 ?x35 y00) (* x00 ?x35 ?x35 ?x35) (* ?x34 ?x34 ?x34 ?x35 ?x35 ?x35 y00))))
 (let (($x68 (= (- (- ?x63 (* ?x34 ?x34 x00 ?x35 ?x35 ?x35)) (* ?x34 ?x34 ?x35)) 0)))
 (let (($x71 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x68)))))
 (rewrite (= $x71 $x673))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x1589 (mp (mp @x73 (quant-intro (proof-bind ?x1108) (= $x72 $x1554)) $x1554) (rewrite (= $x1554 $x1554)) $x1554)))
 (let ((@x1718 (mp~ (mp @x1589 (quant-intro (proof-bind ?x2361) (= $x1554 $x2359)) $x2359) (sk (~ $x2359 $x1556)) $x1556)))
 (let ((@x1771 (mp @x1718 (rewrite (= $x1556 $x1182)) $x1182)))
 (let ((@x280 (and-elim @x1771 $x177)))
 (let ((@x1223 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x178)) @x280 $x178)))
 (let (($x170 (>= ?x1770 0)))
 (let ((@x1883 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x170)) @x280 $x170)))
 (let (($x1068 (not (>= ?x1881 0))))
 (let (($x306 (<= ?x1881 0)))
 (let ((@x1520 (lemma ((_ th-lemma arith) (hypothesis (not $x306)) @x1883 @x1223 @x1883 @x1223 false) $x306)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x324 (not $x306) $x1068)) (and-elim @x1771 $x1625) (or (not $x306) $x1068))))
 ((_ th-lemma arith) (unit-resolution @x331 @x1520 $x1068) @x1883 @x1223 @x1883 @x1223 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             374
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 66
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.81
 :memory                    3.33
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1442068
 :num-checks                1
 :propagations              4
 :rlimit-count              7318
 :time                      0.01
 :total-time                0.02)
