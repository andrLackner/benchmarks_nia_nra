unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x597 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x209 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 4) r!2) (* (- 1) (* v!0 v!0)) (* (- 2) u!1) ?x597 (* 2 v!0))))
 (let (($x242 (>= ?x209 0)))
 (let (($x416 (= ?x209 0)))
 (let ((?x482 (* (- 2) v!0)))
 (let ((?x565 (* (- 1) ?x597)))
 (let ((?x195 (* 2 u!1)))
 (let ((?x283 (* v!0 v!0)))
 (let ((?x478 (* 4 r!2)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x135 (+ ?x110 ?x126 ?x41 ?x46 ?x202 ?x478 ?x283 ?x195 ?x565 ?x482)))
 (let ((?x596 (* 4 ?x597)))
 (let ((?x590 (* 8 (* r!2 u!1 u!1))))
 (let ((?x497 (* 4 (* r!2 r!2 u!1))))
 (let ((?x498 (* 4 (* r!2 r!2))))
 (let ((?x496 (* 2 (* r!2 u!1 u!1 u!1))))
 (let ((?x393 (+ r!2 u!1)))
 (let ((?x439 (+ 2 u!1)))
 (let ((?x440 (* ?x439 ?x439 ?x439 ?x393 ?x393 ?x393)))
 (let ((?x436 (* 8 (* r!2 u!1))))
 (let ((?x429 (* r!2 r!2 u!1 u!1)))
 (let ((?x392 (* u!1 u!1 u!1 u!1)))
 (let ((?x348 (* u!1 u!1 u!1)))
 (let ((?x594 (* 4 ?x348)))
 (let ((?x572 (* (- 1) u!1)))
 (let ((?x710 (* 12 v!0)))
 (let ((?x342 (* u!1 u!1 v!0)))
 (let ((?x479 (* 7 ?x342)))
 (let ((?x321 (* u!1 u!1 u!1 v!0)))
 (let ((?x483 (* 4 u!1)))
 (let ((?x400 (* 16 (* u!1 v!0))))
 (let ((?x520 (* (+ 4 ?x400 ?x483 ?x321 ?x479 ?x597 ?x710) (+ (- 2) ?x572 ?x594 ?x392 ?x429 ?x436 ?x440 ?x496 ?x498 ?x497 ?x590 ?x596) ?x135)))
 (let (($x185 (= ?x520 0)))
 (let (($x160 (not $x185)))
 (let ((?x662 (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x485 (* u!1 u!1 v!0 v!0)))
 (let ((?x365 (* (- 3) (* r!2 r!2 u!1 u!1 u!1 v!0))))
 (let ((?x337 (* r!2 r!2 r!2 u!1 u!1 u!1)))
 (let ((?x484 (* (- 2) (* r!2 u!1 u!1 v!0))))
 (let ((?x521 (* 3 (* r!2 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x394 (* (+ ?x321 ?x342 (* 2 ?x348) (* 3 ?x597)) (+ ?x521 ?x572 ?x484 ?x337 ?x365 ?x429 ?x485 ?x662) ?x135)))
 (let (($x450 (= ?x394 0)))
 (let (($x592 (or (not $x450) $x160)))
 (let (($x675 (and $x416 $x592)))
 (let ((?x220 (+ ?x478 ?x195 ?x482 ?x110 ?x126 ?x41 ?x565 ?x283 ?x46 ?x202)))
 (let ((?x130 (* (+ 4 ?x483 ?x710 ?x597 ?x321 ?x479 ?x400) (+ (- 2) ?x572 ?x596 ?x594 ?x429 ?x590 ?x497 ?x436 ?x498 ?x392 ?x496 ?x440) ?x220)))
 (let ((?x432 (* (+ (* 3 ?x597) ?x321 (* 2 ?x348) ?x342) (+ ?x572 ?x337 ?x365 ?x521 ?x662 ?x429 ?x484 ?x485) ?x220)))
 (let (($x120 (and (= ?x220 0) (or (not (= ?x432 0)) (not (= ?x130 0))))))
 (let (($x350 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x699 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x706 (* 2 (* r u u u))))
 (let ((?x673 (* u u u u)))
 (let ((?x666 (* 4 (* r r))))
 (let ((?x702 (* 8 (* r u))))
 (let ((?x703 (* 4 (* r r u))))
 (let ((?x704 (* 8 (* r u u))))
 (let ((?x467 (* r r u u)))
 (let ((?x338 (* u u u)))
 (let ((?x705 (* 4 ?x338)))
 (let ((?x651 (* 4 ?x43)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x672 (+ (- 2) ?x380 ?x651 ?x705 ?x467 ?x704 ?x703 ?x702 ?x666 ?x673 ?x706 ?x699)))
 (let ((?x356 (* u u v)))
 (let ((?x606 (* 7 ?x356)))
 (let ((?x332 (* u u u v)))
 (let ((?x604 (* 12 v)))
 (let ((?x383 (* 4 u)))
 (let ((?x575 (* (+ 4 ?x383 ?x604 ?x43 ?x332 ?x606 (* 16 (* u v))) ?x672 ?x208)))
 (let ((?x510 (+ ?x380 (* r r r u u u) (* (- 3) (* r r u u u v)) (* 3 (* r u u u v v)) (* (- 1) (* u u u v v v)) ?x467 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x373 (+ (* 3 ?x43) ?x332 (* 2 ?x338) ?x356)))
 (let (($x171 (not (= (* ?x373 ?x510 ?x208) 0))))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or $x171 (not (= ?x575 0)))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x639 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x699 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x706 (* 2 (* r u u u))))
 (let ((?x673 (* u u u u)))
 (let ((?x666 (* 4 (* r r))))
 (let ((?x702 (* 8 (* r u))))
 (let ((?x703 (* 4 (* r r u))))
 (let ((?x704 (* 8 (* r u u))))
 (let ((?x467 (* r r u u)))
 (let ((?x338 (* u u u)))
 (let ((?x705 (* 4 ?x338)))
 (let ((?x651 (* 4 ?x43)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x672 (+ (- 2) ?x380 ?x651 ?x705 ?x467 ?x704 ?x703 ?x702 ?x666 ?x673 ?x706 ?x699)))
 (let ((?x356 (* u u v)))
 (let ((?x606 (* 7 ?x356)))
 (let ((?x332 (* u u u v)))
 (let ((?x604 (* 12 v)))
 (let ((?x383 (* 4 u)))
 (let ((?x608 (+ 4 ?x383 ?x604 ?x43 ?x332 ?x606 (* 12 (* u v)) (* 2 (* u 2 v)))))
 (let ((?x510 (+ ?x380 (* r r r u u u) (* (- 3) (* r r u u u v)) (* 3 (* r u u u v v)) (* (- 1) (* u u u v v v)) ?x467 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x373 (+ (* 3 ?x43) ?x332 (* 2 ?x338) ?x356)))
 (let (($x171 (not (= (* ?x373 ?x510 ?x208) 0))))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or $x171 (not (= (* ?x608 ?x672 ?x208) 0)))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x433 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x699 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x706 (* 2 (* r u u u))))
 (let ((?x673 (* u u u u)))
 (let ((?x666 (* 4 (* r r))))
 (let ((?x702 (* 8 (* r u))))
 (let ((?x703 (* 4 (* r r u))))
 (let ((?x704 (* 8 (* r u u))))
 (let ((?x467 (* r r u u)))
 (let ((?x338 (* u u u)))
 (let ((?x705 (* 4 ?x338)))
 (let ((?x651 (* 4 ?x43)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x672 (+ (- 2) ?x380 ?x651 ?x705 ?x467 ?x704 ?x703 ?x702 ?x666 ?x673 ?x706 ?x699)))
 (let ((?x356 (* u u v)))
 (let ((?x606 (* 7 ?x356)))
 (let ((?x332 (* u u u v)))
 (let ((?x604 (* 12 v)))
 (let ((?x383 (* 4 u)))
 (let ((?x575 (* (+ 4 ?x383 ?x604 ?x43 ?x332 ?x606 (* 16 (* u v))) ?x672 ?x208)))
 (let ((?x510 (+ ?x380 (* r r r u u u) (* (- 3) (* r r u u u v)) (* 3 (* r u u u v v)) (* (- 1) (* u u u v v v)) ?x467 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x373 (+ (* 3 ?x43) ?x332 (* 2 ?x338) ?x356)))
 (let (($x171 (not (= (* ?x373 ?x510 ?x208) 0))))
 (let (($x213 (= ?x208 0)))
 (let (($x489 (and $x213 (or $x171 (not (= ?x575 0))))))
 (let ((?x608 (+ 4 ?x383 ?x604 ?x43 ?x332 ?x606 (* 12 (* u v)) (* 2 (* u 2 v)))))
 (let (($x260 (and $x213 (or $x171 (not (= (* ?x608 ?x672 ?x208) 0))))))
 (rewrite (= $x260 $x489))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x504 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x641 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x699 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x471 (* (+ (* ?x361 ?x361) (* ?x361 ?x361 ?x361 v) (* ?x361 ?x361 v)) (+ (- 2) ?x380 ?x699 (* ?x361 ?x361 ?x77 ?x77)) ?x641)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x239 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x415 (+ r (* (- 1) v))))
 (let ((?x438 (+ ?x43 (* (+ 2 v) u u u) (* (+ 2 v) u u))))
 (let ((?x269 (* ?x438 (+ ?x380 (* ?x415 ?x415 ?x415 u u u) (* ?x415 ?x415 u u)) ?x239)))
 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= ?x269 0)) (not (= ?x471 0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x630 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x699 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x706 (* 2 (* r u u u))))
 (let ((?x673 (* u u u u)))
 (let ((?x666 (* 4 (* r r))))
 (let ((?x702 (* 8 (* r u))))
 (let ((?x703 (* 4 (* r r u))))
 (let ((?x704 (* 8 (* r u u))))
 (let ((?x467 (* r r u u)))
 (let ((?x338 (* u u u)))
 (let ((?x705 (* 4 ?x338)))
 (let ((?x651 (* 4 ?x43)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x672 (+ (- 2) ?x380 ?x651 ?x705 ?x467 ?x704 ?x703 ?x702 ?x666 ?x673 ?x706 ?x699)))
 (let ((?x356 (* u u v)))
 (let ((?x606 (* 7 ?x356)))
 (let ((?x332 (* u u u v)))
 (let ((?x604 (* 12 v)))
 (let ((?x383 (* 4 u)))
 (let ((?x608 (+ 4 ?x383 ?x604 ?x43 ?x332 ?x606 (* 12 (* u v)) (* 2 (* u 2 v)))))
 (let ((?x510 (+ ?x380 (* r r r u u u) (* (- 3) (* r r u u u v)) (* 3 (* r u u u v v)) (* (- 1) (* u u u v v v)) ?x467 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x373 (+ (* 3 ?x43) ?x332 (* 2 ?x338) ?x356)))
 (let (($x171 (not (= (* ?x373 ?x510 ?x208) 0))))
 (let (($x213 (= ?x208 0)))
 (let (($x260 (and $x213 (or $x171 (not (= (* ?x608 ?x672 ?x208) 0))))))
 (let ((?x641 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* ?x361 ?x361)) ?x45 ?x46 ?x202)))
 (let ((?x471 (* (+ (* ?x361 ?x361) (* ?x361 ?x361 ?x361 v) (* ?x361 ?x361 v)) (+ (- 2) ?x380 ?x699 (* ?x361 ?x361 ?x77 ?x77)) ?x641)))
 (let ((?x239 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x415 (+ r (* (- 1) v))))
 (let ((?x438 (+ ?x43 (* (+ 2 v) u u u) (* (+ 2 v) u u))))
 (let ((?x269 (* ?x438 (+ ?x380 (* ?x415 ?x415 ?x415 u u u) (* ?x415 ?x415 u u)) ?x239)))
 (let (($x146 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= ?x269 0)) (not (= ?x471 0))))))
 (rewrite (= $x146 $x260)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((r Int) (u Int) (v Int) )(! (let ((?x81 (+ u 2)))
 (let ((?x77 (+ r u)))
 (let ((?x96 (+ (* (- 1) ?x81) (* ?x77 ?x77 ?x77 ?x81 ?x81 ?x81) (* ?x77 ?x77 ?x81 ?x81))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x86 (* ?x81 ?x81)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) ?x86) ?x45 ?x46) ?x48) (+ ?x86 (* ?x81 ?x81 ?x81 v) (* ?x81 ?x81 v)) ?x96)))
 (let ((?x73 (+ (* (- 1) u) (* (- r v) (- r v) (- r v) u u u) (* (- r v) (- r v) u u))))
 (let ((?x43 (* u u)))
 (let ((?x67 (+ ?x43 (* u u u (+ v 2)) (* u u (+ v 2)))))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x100 (or (not (= (* (- ?x63 ?x48) ?x67 ?x73) 0)) (not (= ?x97 0)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) $x100)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x560 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x641 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x699 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x471 (* (+ (* ?x361 ?x361) (* ?x361 ?x361 ?x361 v) (* ?x361 ?x361 v)) (+ (- 2) ?x380 ?x699 (* ?x361 ?x361 ?x77 ?x77)) ?x641)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x239 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x415 (+ r (* (- 1) v))))
 (let ((?x438 (+ ?x43 (* (+ 2 v) u u u) (* (+ 2 v) u u))))
 (let ((?x269 (* ?x438 (+ ?x380 (* ?x415 ?x415 ?x415 u u u) (* ?x415 ?x415 u u)) ?x239)))
 (let (($x146 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= ?x269 0)) (not (= ?x471 0))))))
 (let ((?x96 (+ (* (- 1) (+ u 2)) (* ?x77 ?x77 ?x77 (+ u 2) (+ u 2) (+ u 2)) (* ?x77 ?x77 (+ u 2) (+ u 2)))))
 (let ((?x81 (+ u 2)))
 (let ((?x86 (* ?x81 ?x81)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) ?x86) ?x45 ?x46) ?x48) (+ ?x86 (* ?x81 ?x81 ?x81 v) (* ?x81 ?x81 v)) ?x96)))
 (let ((?x73 (+ (* (- 1) u) (* (- r v) (- r v) (- r v) u u u) (* (- r v) (- r v) u u))))
 (let ((?x67 (+ ?x43 (* u u u (+ v 2)) (* u u (+ v 2)))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x100 (or (not (= (* (- ?x63 ?x48) ?x67 ?x73) 0)) (not (= ?x97 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x101 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x100)))
 (rewrite (= $x101 $x146)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x267 (mp (mp @x103 (quant-intro (proof-bind ?x560) (= $x102 $x504)) $x504) (rewrite (= $x504 $x504)) $x504)))
 (let ((@x333 (mp (mp @x267 (quant-intro (proof-bind ?x630) (= $x504 $x639)) $x639) (quant-intro (proof-bind ?x433) (= $x639 $x350)) $x350)))
 (let ((@x176 (mp (mp~ @x333 (sk (~ $x350 $x120)) $x120) (rewrite (= $x120 $x675)) $x675)))
 (let ((@x480 (and-elim @x176 $x416)))
 (let ((@x313 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x416) $x242)) @x480 $x242)))
 (let (($x457 (<= ?x209 0)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x416) $x457)) @x480 $x457)))
 (let (($x458 (not (<= ?x520 0))))
 (let (($x203 (>= ?x520 0)))
 (let (($x275 (>= ?x394 0)))
 (let (($x390 (<= ?x394 0)))
 (let ((@x422 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x450 (not $x390) (not $x275))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x390)) @x331 @x313 false) $x390) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x275)) @x331 @x313 false) $x275) $x450)))
 (let ((@x460 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x185 $x458 (not $x203))) (unit-resolution (and-elim @x176 $x592) @x422 $x160) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x203)) @x331 @x313 false) $x203) $x458)))
 ((_ th-lemma arith farkas 1 1 1) @x460 @x331 @x313 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        48
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             280
 :arith-nonlinear-bounds    31
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.64
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1114959
 :num-checks                1
 :propagations              14
 :rlimit-count              4285
 :time                      0.01
 :total-time                0.01)
