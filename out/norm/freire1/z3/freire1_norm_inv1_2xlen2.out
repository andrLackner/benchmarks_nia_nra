unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x263 (* r!1 r!1)))
 (let ((?x340 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x171 (* (- 1) ?x36)))
 (let ((?x321 (* (- 2) x00)))
 (let ((?x95 (+ r00 ?x321 ?x171 (* 2 x!0) ?x340 ?x263)))
 (let (($x202 (<= ?x95 0)))
 (let (($x250 (= ?x95 0)))
 (let ((?x128 (+ x!0 ?x340)))
 (let ((?x335 (+ 1 r!1)))
 (let ((?x478 (+ (* r00 ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128) (* (- 2) (* ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128 ?x128 ?x128)) (* (- 2) (* ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128)) (* (- 1) (* r00 r00 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128)) (* 2 (* x00 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128 ?x128)) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128)) (* (- 2) (* x00 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128)) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128)) (* 3 (* ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128)) (* (- 1) (* r00 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128 ?x128)) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128)) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128) (* 2 (* x00 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128)) (* 3 (* ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128 ?x128)) (* r00 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128) (* (- 1) (* r00 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128)) (* (- 1) (* r00 r00 ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128)) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128 ?x128)) (* r00 r00 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128) (* (- 2) (* x00 ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128)) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x128 ?x128 ?x128) (* r00 r00 ?x335 ?x335 ?x128 ?x128 ?x128 ?x128 ?x128 ?x128))))
 (let (($x484 (= ?x478 0)))
 (let (($x121 (not $x484)))
 (let (($x505 (and $x250 $x121)))
 (let ((?x317 (+ ?x340 x!0)))
 (let ((?x433 (+ (* r00 ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317) (* r00 r00 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317 ?x317) (* (- 1) (* r00 r00 ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317)) (* 2 (* x00 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317 ?x317)) (* (- 1) (* r00 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317)) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317)) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317)) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317)) (* (- 1) (* r00 r00 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317)) (* 2 (* x00 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317)) (* (- 2) (* ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317)) (* r00 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317) (* 3 (* ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317 ?x317)) (* r00 r00 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317) (* (- 1) (* ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317 ?x317)) (* (- 2) (* x00 ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317)) (* 3 (* ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317)) (* (- 2) (* ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317 ?x317 ?x317)) (* (- 2) (* x00 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317)) (* (- 1) (* r00 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317 ?x317)) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317) (* ?x335 ?x335 ?x335 ?x335 ?x335 ?x317 ?x317 ?x317 ?x317 ?x317))))
 (let ((?x35 (* 2 x00)))
 (let ((?x141 (* (- 1) r00)))
 (let (($x108 (and (= (+ r!1 (* (- 2) x!0) ?x141 (* (- 1) ?x263) ?x35 ?x36) 0) (not (= ?x433 0)))))
 (let (($x237 (exists ((r Int) (x Int) )(! (let ((?x91 (* (- 1) r)))
 (let ((?x155 (+ ?x91 x)))
 (let ((?x149 (+ 1 r)))
 (let ((?x525 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)))
 (let ((?x483 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)))
 (let ((?x448 (* (- 2) (* ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x258 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x276 (* (- 2) (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x467 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155))))
 (let ((?x287 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x498 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x104 (+ (* r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155) (* r00 r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)) (* 2 (* x00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x498 ?x287 ?x467 (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* 2 (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x276 (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155) (* 3 (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155) ?x258 (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x448 (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* (- 1) (* r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) ?x483 ?x525)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x142 (* (- 1) ?x30)))
 (let ((?x141 (* (- 1) r00)))
 (let ((?x140 (* (- 2) x)))
 (let (($x144 (= (+ r ?x140 ?x141 ?x142 ?x35 ?x36) 0)))
 (and $x144 (not (= ?x104 0)))))))))))))))))))))) :qid k!26))
 ))
 (let (($x449 (exists ((r Int) (x Int) )(! (let ((?x91 (* (- 1) r)))
 (let ((?x377 (+ x ?x91)))
 (let ((?x149 (+ 1 r)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* 2 (* x00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377))))
 (let (($x332 (not (= ?x547 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x140 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x142 (* (- 1) ?x30)))
 (let ((?x141 (* (- 1) r00)))
 (and (= (+ r ?x141 ?x142 ?x140 ?x35 ?x36) 0) $x332)))))))))))) :qid k!26))
 ))
 (let ((?x235 (lambda ((r Int) (x Int) )(let ((?x91 (* (- 1) r)))
 (let ((?x155 (+ ?x91 x)))
 (let ((?x149 (+ 1 r)))
 (let ((?x525 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)))
 (let ((?x483 (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)))
 (let ((?x448 (* (- 2) (* ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x258 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x276 (* (- 2) (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x467 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155))))
 (let ((?x287 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x498 (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155))))
 (let ((?x104 (+ (* r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155) (* r00 r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)) (* 2 (* x00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x498 ?x287 ?x467 (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* 2 (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x276 (* r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155) (* 3 (* ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) (* r00 r00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155) ?x258 (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155)) ?x448 (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155)) (* (- 1) (* r00 ?x149 ?x149 ?x155 ?x155 ?x155 ?x155 ?x155 ?x155)) ?x483 ?x525)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x142 (* (- 1) ?x30)))
 (let ((?x141 (* (- 1) r00)))
 (let ((?x140 (* (- 2) x)))
 (let (($x144 (= (+ r ?x140 ?x141 ?x142 ?x35 ?x36) 0)))
 (let (($x136 (and $x144 (not (= ?x104 0)))))
 (let ((?x377 (+ x ?x91)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* 2 (* x00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377))))
 (let (($x332 (not (= ?x547 0))))
 (let (($x203 (and (= (+ r ?x141 ?x142 ?x140 ?x35 ?x36) 0) $x332)))
 (rewrite (= $x203 $x136)))))))))))))))))))))))))))
 ))
 (let (($x325 (exists ((r Int) (x Int) )(! (let ((?x91 (* (- 1) r)))
 (let ((?x377 (+ x ?x91)))
 (let ((?x149 (+ 1 r)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* 2 (* x00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377))))
 (let (($x332 (not (= ?x547 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x171 (* (- 1) ?x36)))
 (let ((?x321 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x91 r00 ?x30 ?x32 ?x321 ?x171) 0) $x332))))))))))) :qid k!26))
 ))
 (let ((?x339 (lambda ((r Int) (x Int) )(let ((?x91 (* (- 1) r)))
 (let ((?x377 (+ x ?x91)))
 (let ((?x149 (+ 1 r)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* 2 (* x00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377))))
 (let (($x332 (not (= ?x547 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x140 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x142 (* (- 1) ?x30)))
 (let ((?x141 (* (- 1) r00)))
 (let (($x203 (and (= (+ r ?x141 ?x142 ?x140 ?x35 ?x36) 0) $x332)))
 (let (($x492 (= (+ ?x91 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x116 (and $x492 $x332)))
 (rewrite (= $x116 $x203)))))))))))))))))
 ))
 (let (($x86 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x47 (- (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 x00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x49 (- (- ?x47 (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* 2 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00))))
 (let ((?x56 (- (+ ?x49 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (- ?x56 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x64 (+ (- ?x58 (* ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 3 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42) (* 3 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x70 (- (- ?x64 (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x72 (- (- ?x70 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x77 (+ ?x72 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42) (* ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x81 (+ (- ?x77 (* ?x41 ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x81 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x421 (lambda ((r Int) (x Int) )(let ((?x91 (* (- 1) r)))
 (let ((?x377 (+ x ?x91)))
 (let ((?x149 (+ 1 r)))
 (let ((?x547 (+ (* 2 (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* x00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* 2 (* x00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 2) (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377)) (* 3 (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* (- 1) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377)) (* ?x149 ?x149 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377) (* r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377) (* r00 r00 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377 ?x377 ?x377) (* (- 1) (* r00 r00 ?x149 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377)) (* r00 r00 ?x149 ?x149 ?x149 ?x377 ?x377 ?x377 ?x377))))
 (let (($x332 (not (= ?x547 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x171 (* (- 1) ?x36)))
 (let ((?x321 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x116 (and (= (+ ?x91 r00 ?x30 ?x32 ?x321 ?x171) 0) $x332)))
 (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x47 (- (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 x00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x49 (- (- ?x47 (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* 2 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00))))
 (let ((?x56 (- (+ ?x49 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 x00)) (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (- ?x56 (* 2 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x64 (+ (- ?x58 (* ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42)) (* 3 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42) (* 3 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x70 (- (- ?x64 (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x72 (- (- ?x70 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x77 (+ ?x72 (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42 ?x42 ?x42) (* ?x41 ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42) (* ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x81 (+ (- ?x77 (* ?x41 ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x85 (and (= ?x38 0) (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x116)))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x283 (mp (mp @x87 (quant-intro (proof-bind ?x421) (= $x86 $x325)) $x325) (rewrite (= $x325 $x325)) $x325)))
 (let ((@x464 (mp (mp @x283 (quant-intro (proof-bind ?x339) (= $x325 $x449)) $x449) (quant-intro (proof-bind ?x235) (= $x449 $x237)) $x237)))
 (let ((@x455 (mp (mp~ @x464 (sk (~ $x237 $x108)) $x108) (rewrite (= $x108 $x505)) $x505)))
 (let ((@x180 (and-elim @x455 $x250)))
 (let ((@x285 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x202)) @x180 $x202)))
 (let (($x437 (>= ?x95 0)))
 (let ((@x292 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x250) $x437)) @x180 $x437)))
 (let (($x482 (not (>= ?x478 0))))
 (let (($x414 (<= ?x478 0)))
 (let ((@x471 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x484 (not $x414) $x482)) (and-elim @x455 $x121) (or (not $x414) $x482))))
 (let ((@x425 (unit-resolution @x471 (lemma ((_ th-lemma arith) (hypothesis (not $x414)) @x292 @x285 false) $x414) $x482)))
 ((_ th-lemma arith) @x425 @x292 @x285 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             222
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              2
 :arith-tableau-max-columns 38
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.75
 :memory                    3.18
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1634042
 :num-checks                1
 :propagations              4
 :rlimit-count              7992
 :time                      0.02
 :total-time                0.02)
