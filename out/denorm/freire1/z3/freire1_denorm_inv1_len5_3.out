unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x555 (* r!1 r!1)))
 (let ((?x280 (* 2 x!0)))
 (let ((?x581 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x157 (+ r00 ?x88 ?x104 ?x581 ?x280 ?x555)))
 (let (($x544 (<= ?x157 0)))
 (let (($x158 (= ?x157 0)))
 (let ((?x166 (* 2 ?x555)))
 (let ((?x468 (* 3 (* r!1 r!1 r!1 x!0 x!0))))
 (let ((?x169 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x244 (* (- 3) (* r!1 r!1 r!1 r!1 x!0))))
 (let ((?x95 (* (- 6) (* r!1 r!1 r!1 x!0))))
 (let ((?x167 (* r!1 x!0)))
 (let ((?x90 (* 4 r!1)))
 (let ((?x116 (* 6 (* r!1 r!1 x!0 x!0))))
 (let ((?x96 (* r!1 r!1 r!1)))
 (let ((?x93 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x224 (* 2 (* r!1 r!1 r!1 r!1))))
 (let ((?x66 (* (- 1) (* r!1 r!1 x!0 x!0 x!0))))
 (let ((?x168 (* (- 2) (* r!1 r!1 x!0))))
 (let ((?x65 (* (- 2) (* r!1 x!0 x!0 x!0))))
 (let ((?x113 (* 3 (* r!1 x!0 x!0))))
 (let ((?x241 (+ 2 ?x113 ?x65 ?x168 ?x66 ?x224 ?x93 ?x96 ?x116 ?x90 ?x167 ?x95 ?x244 ?x169 ?x468 ?x166)))
 (let ((?x547 (* ?x241 ?x157)))
 (let (($x577 (= ?x547 0)))
 (let (($x578 (not $x577)))
 (let (($x416 (and $x158 $x578)))
 (let ((?x469 (+ 2 ?x90 ?x166 ?x96 ?x167 ?x168 ?x169 ?x65 ?x66 ?x224 ?x93 ?x95 ?x244 ?x113 ?x116 ?x468)))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x269 (and (= (+ r!1 (* (- 2) x!0) ?x119 (* (- 1) ?x555) ?x35 ?x36) 0) (not (= (* ?x469 (+ ?x581 ?x280 r00 ?x555 ?x88 ?x104)) 0)))))
 (let (($x156 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x603 (+ 2 (* 4 r) (* 2 ?x30) (* r r r) (* r x) (* (- 2) (* r r x)) (* (- 1) (* x x x)) (* (- 2) (* r x x x)) (* (- 1) (* r r x x x)) (* 2 (* r r r r)) (* r r r r r) (* (- 6) (* r r r x)) (* (- 3) (* r r r r x)) (* 3 (* r x x)) (* 6 (* r r x x)) (* 3 (* r r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (and $x122 (not (= (* ?x603 ?x110) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x614 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x231 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x268 (+ x ?x67)))
 (let ((?x260 (+ 1 r)))
 (let ((?x495 (+ 1 r (* ?x260 ?x260 ?x260) (* (- 1) (* ?x260 ?x268)) (* ?x260 ?x260 ?x268) (* (- 1) (* ?x260 ?x260 ?x268 ?x268 ?x268)))))
 (let (($x492 (not (= (* ?x495 ?x231) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x492)))))))))))))))) :qid k!26))
 ))
 (let ((?x615 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x603 (+ 2 (* 4 r) (* 2 ?x30) (* r r r) (* r x) (* (- 2) (* r r x)) (* (- 1) (* x x x)) (* (- 2) (* r x x x)) (* (- 1) (* r r x x x)) (* 2 (* r r r r)) (* r r r r r) (* (- 6) (* r r r x)) (* (- 3) (* r r r r x)) (* 3 (* r x x)) (* 6 (* r r x x)) (* 3 (* r r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let ((?x118 (* (- 2) x)))
 (let (($x122 (= (+ r ?x118 ?x119 ?x120 ?x35 ?x36) 0)))
 (let (($x85 (and $x122 (not (= (* ?x603 ?x110) 0)))))
 (let ((?x231 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x268 (+ x ?x67)))
 (let ((?x260 (+ 1 r)))
 (let ((?x495 (+ 1 r (* ?x260 ?x260 ?x260) (* (- 1) (* ?x260 ?x268)) (* ?x260 ?x260 ?x268) (* (- 1) (* ?x260 ?x260 ?x268 ?x268 ?x268)))))
 (let (($x492 (not (= (* ?x495 ?x231) 0))))
 (let (($x613 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x492)))
 (rewrite (= $x613 $x85)))))))))))))))))))))))
 ))
 (let (($x271 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x231 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x268 (+ x ?x67)))
 (let ((?x260 (+ 1 r)))
 (let ((?x495 (+ 1 r (* ?x260 ?x260 ?x260) (* (- 1) (* ?x260 ?x268)) (* ?x260 ?x260 ?x268) (* (- 1) (* ?x260 ?x260 ?x268 ?x268 ?x268)))))
 (let (($x492 (not (= (* ?x495 ?x231) 0))))
 (and (= (+ ?x67 r00 (* r r) ?x32 ?x88 ?x104) 0) $x492))))))))))) :qid k!26))
 ))
 (let ((?x436 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x231 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x268 (+ x ?x67)))
 (let ((?x260 (+ 1 r)))
 (let ((?x495 (+ 1 r (* ?x260 ?x260 ?x260) (* (- 1) (* ?x260 ?x268)) (* ?x260 ?x260 ?x268) (* (- 1) (* ?x260 ?x260 ?x268 ?x268 ?x268)))))
 (let (($x492 (not (= (* ?x495 ?x231) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x118 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x120 (* (- 1) ?x30)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x613 (and (= (+ r ?x119 ?x120 ?x118 ?x35 ?x36) 0) $x492)))
 (let (($x583 (and (= (+ ?x67 r00 ?x30 ?x32 ?x88 ?x104) 0) $x492)))
 (rewrite (= $x583 $x613))))))))))))))))))))
 ))
 (let (($x62 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x54 (+ (- (+ r 1 (* ?x41 ?x41 ?x41)) (* ?x41 ?x44)) (* ?x41 ?x41 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x60 (or (not (= (* ?x48 (- ?x54 (* ?x41 ?x41 ?x44 ?x44 ?x44))) 0)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) $x60))))))))) :qid k!26))
 ))
 (let ((?x574 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x231 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x268 (+ x ?x67)))
 (let ((?x260 (+ 1 r)))
 (let ((?x495 (+ 1 r (* ?x260 ?x260 ?x260) (* (- 1) (* ?x260 ?x268)) (* ?x260 ?x260 ?x268) (* (- 1) (* ?x260 ?x260 ?x268 ?x268 ?x268)))))
 (let (($x492 (not (= (* ?x495 ?x231) 0))))
 (let (($x583 (and (= (+ ?x67 r00 (* r r) ?x32 ?x88 ?x104) 0) $x492)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x54 (+ (- (+ r 1 (* ?x41 ?x41 ?x41)) (* ?x41 ?x44)) (* ?x41 ?x41 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x60 (or (not (= (* ?x48 (- ?x54 (* ?x41 ?x41 ?x44 ?x44 ?x44))) 0)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x61 (and $x40 $x60)))
 (rewrite (= $x61 $x583))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x112 (mp (mp @x63 (quant-intro (proof-bind ?x574) (= $x62 $x271)) $x271) (rewrite (= $x271 $x271)) $x271)))
 (let ((@x514 (mp (mp @x112 (quant-intro (proof-bind ?x436) (= $x271 $x614)) $x614) (quant-intro (proof-bind ?x615) (= $x614 $x156)) $x156)))
 (let ((@x217 (mp (mp~ @x514 (sk (~ $x156 $x269)) $x269) (rewrite (= $x269 $x416)) $x416)))
 (let ((@x572 (and-elim @x217 $x158)))
 (let ((@x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x544)) @x572 $x544)))
 (let (($x184 (>= ?x157 0)))
 (let ((@x238 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x184)) @x572 $x184)))
 (let (($x597 (not (>= ?x547 0))))
 (let (($x272 (<= ?x547 0)))
 (let ((@x183 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x577 (not $x272) $x597)) (and-elim @x217 $x578) (or (not $x272) $x597))))
 (let ((@x274 (unit-resolution @x183 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x272)) @x238 @x306 false) $x272) $x597)))
 ((_ th-lemma arith farkas 1 1 1) @x274 @x238 @x306 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.60
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1102261
 :num-checks                1
 :propagations              4
 :rlimit-count              1943
 :time                      0.01
 :total-time                0.01)
