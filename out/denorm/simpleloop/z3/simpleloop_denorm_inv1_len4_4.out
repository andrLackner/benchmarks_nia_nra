unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x163 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x100 (>= ?x163 0)))
 (let (($x153 (= ?x163 0)))
 (let ((?x87 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x167 (* 3 (* x!1 x!1))))
 (let ((?x204 (* (- 2) x!1)))
 (let ((?x249 (+ (* 3 (* y!0 x!1 x!1)) ?x204 ?x167 ?x87 (* (- 2) (* y!0 x!1)) (* (- 1) (* y!0 x!1 x!1 x!1)))))
 (let ((?x256 (* ?x249 (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x151 (= ?x256 0)))
 (let (($x260 (not $x151)))
 (let (($x191 (and $x153 $x260)))
 (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x175 (+ x!1 y!0 ?x52 ?x59)))
 (let ((?x209 (+ ?x204 (* (- 2) (* x!1 y!0)) (* 3 (* x!1 x!1 y!0)) (* (- 1) (* x!1 x!1 x!1 y!0)) ?x167 ?x87)))
 (let (($x223 (and (= ?x175 0) (not (= (* ?x209 ?x175) 0)))))
 (let (($x77 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x276 (+ (* (- 2) x) (* (- 2) (* x y)) (* 3 (* x x y)) (* (- 1) (* x x x y)) (* 3 (* x x)) (* (- 1) (* x x x)))))
 (let (($x78 (= ?x73 0)))
 (and $x78 (not (= (* ?x276 ?x73) 0)))))))) :qid k!26))
 ))
 (let (($x186 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x182 (+ x ?x52 ?x59 y)))
 (let ((?x240 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let (($x185 (not (= (* (+ (* (+ (- 1) x) (+ 1 y)) ?x240) ?x182) 0))))
 (and (= ?x182 0) $x185)))))) :qid k!26))
 ))
 (let ((?x198 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x276 (+ (* (- 2) x) (* (- 2) (* x y)) (* 3 (* x x y)) (* (- 1) (* x x x y)) (* 3 (* x x)) (* (- 1) (* x x x)))))
 (let (($x78 (= ?x73 0)))
 (let (($x154 (and $x78 (not (= (* ?x276 ?x73) 0)))))
 (let ((?x182 (+ x ?x52 ?x59 y)))
 (let ((?x240 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let (($x185 (not (= (* (+ (* (+ (- 1) x) (+ 1 y)) ?x240) ?x182) 0))))
 (let (($x193 (and (= ?x182 0) $x185)))
 (rewrite (= $x193 $x154)))))))))))))
 ))
 (let (($x49 (exists ((x Int) (y Int) )(! (let ((?x43 (- (+ (* 0 1) (* (- x 1) (+ y 1))) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let (($x45 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x43) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x45))))) :qid k!26))
 ))
 (let ((?x157 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x182 (+ x ?x52 ?x59 y)))
 (let ((?x240 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let (($x185 (not (= (* (+ (* (+ (- 1) x) (+ 1 y)) ?x240) ?x182) 0))))
 (let (($x193 (and (= ?x182 0) $x185)))
 (let ((?x43 (- (+ (* 0 1) (* (- x 1) (+ y 1))) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let (($x45 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x43) 0)))
 (let (($x48 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x45)))))
 (rewrite (= $x48 $x193))))))))))))
 ))
 (let ((@x50 (asserted $x49)))
 (let ((@x158 (mp (mp @x50 (quant-intro (proof-bind ?x157) (= $x49 $x186)) $x186) (rewrite (= $x186 $x186)) $x186)))
 (let ((@x226 (mp~ (mp @x158 (quant-intro (proof-bind ?x198) (= $x186 $x77)) $x77) (sk (~ $x77 $x223)) $x223)))
 (let ((@x102 (mp @x226 (rewrite (= $x223 $x191)) $x191)))
 (let ((@x245 (and-elim @x102 $x153)))
 (let ((@x246 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x153) $x100)) @x245 $x100)))
 (let (($x272 (<= ?x163 0)))
 (let ((@x155 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x153) $x272)) @x245 $x272)))
 (let (($x162 (not (>= ?x256 0))))
 (let (($x101 (<= ?x256 0)))
 (let ((@x58 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x151 (not $x101) $x162)) (and-elim @x102 $x260) (or (not $x101) $x162))))
 (let ((@x68 (unit-resolution @x58 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x101)) @x155 @x246 false) $x101) $x162)))
 ((_ th-lemma arith farkas 1 1 1) @x68 @x155 @x246 false))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             38
 :arith-nonlinear-bounds    2
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 16
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.49
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1047759
 :num-checks                1
 :propagations              4
 :rlimit-count              1223
 :time                      0.01
 :total-time                0.01)
