unsat
((set-logic NIA)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(proof
(let ((?x896 (* (- 1) k!00)))
 (let ((?x925 (* (- 1) k!10)))
 (let ((?x1082 (+ (* x!3 u!5) ?x925 ?x896 (* y!2 v!4))))
 (let ((?x1025 (* y!2 x!3 v!4 v!4 u!5 u!5 u!5)))
 (let ((?x498 (* (- 1) (* y!2 y!2 y!2 x!3 x!3 x!3 v!4 v!4 v!4))))
 (let ((?x141 (+ ?x498 (* (- 3) (* y!2 y!2 y!2 y!2 y!2 x!3 u!5 u!5 u!5)) (* y!2 y!2 y!2 y!2 y!2 y!2 u!5 u!5 u!5) (* 9 (* y!2 y!2 y!2 y!2 x!3 x!3 v!4 u!5 u!5)) (* (- 9) (* y!2 y!2 y!2 y!2 y!2 x!3 v!4 u!5 u!5)) (* (- 2) (* y!2 y!2 v!4 u!5 u!5 u!5 u!5)) (* (- 1) (* y!2 y!2 u!5 u!5 u!5 u!5 u!5)) (* 3 (* y!2 y!2 y!2 y!2 x!3 x!3 v!4 v!4 v!4)) (* 3 (* y!2 y!2 y!2 y!2 y!2 y!2 v!4 v!4 u!5)) (* y!2 y!2 y!2 y!2 y!2 y!2 v!4 v!4 v!4) (* 3 (* y!2 y!2 y!2 y!2 y!2 y!2 v!4 u!5 u!5)) (* y!2 x!3 u!5 u!5 u!5 u!5 u!5) (* 2 (* y!2 x!3 v!4 u!5 u!5 u!5 u!5)) ?x1025 (* 9 (* y!2 y!2 y!2 y!2 x!3 x!3 v!4 v!4 u!5)) (* (- 3) (* y!2 y!2 y!2 x!3 x!3 x!3 v!4 v!4 u!5)) (* (- 9) (* y!2 y!2 y!2 y!2 y!2 x!3 v!4 v!4 u!5)) (* (- 1) (* y!2 y!2 v!4 v!4 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 y!2 y!2 x!3 v!4 v!4 v!4)) (* (- 1) (* y!2 y!2 y!2 x!3 x!3 x!3 u!5 u!5 u!5)) (* (- 3) (* y!2 y!2 y!2 x!3 x!3 x!3 v!4 u!5 u!5)) (* 3 (* y!2 y!2 y!2 y!2 x!3 x!3 u!5 u!5 u!5)))))
 (let ((?x516 (* (- 1) (* y!2 y!2 u!5))))
 (let ((?x439 (* y!2 x!3 x!3 v!4)))
 (let ((?x800 (+ (* (- 2) (* y!2 y!2 x!3 v!4)) (* y!2 x!3 x!3 u!5) (* y!2 y!2 y!2 u!5) ?x439 ?x516 (* y!2 y!2 y!2 v!4) (* (- 2) (* y!2 y!2 x!3 u!5)))))
 (let (($x1021 (= (* ?x800 ?x141 ?x1082) 0)))
 (let (($x519 (<= ?x1082 0)))
 (let (($x443 (= ?x1082 0)))
 (let ((?x768 (+ (* 3 (* y!2 y!2 x!3 x!3 x!3 x!3 v!4 v!4 v!4)) ?x498 (* (- 3) (* y!2 x!3 x!3 x!3 x!3 x!3 v!4 v!4 v!4)) (* (- 1) (* x!3 x!3 v!4 v!4 u!5 u!5 u!5)) (* (- 3) (* x!3 x!3 v!4 v!4 v!4 v!4 u!5)) (* (- 3) (* x!3 x!3 v!4 v!4 v!4 u!5 u!5)) (* 3 (* y!2 x!3 v!4 v!4 v!4 u!5 u!5)) (* x!3 x!3 x!3 x!3 x!3 x!3 v!4 v!4 v!4) (* (- 1) (* x!3 x!3 v!4 v!4 v!4 v!4 v!4)) (* y!2 x!3 v!4 v!4 v!4 v!4 v!4) (* 3 (* y!2 x!3 v!4 v!4 v!4 v!4 u!5)) ?x1025)))
 (let ((?x400 (+ (* 2 (* y!2 x!3 u!5)) ?x439 ?x516 (* 2 (* y!2 x!3 v!4)) (* (- 1) (* x!3 x!3 x!3 v!4)) (* (- 1) (* x!3 x!3 u!5)) (* (- 1) (* y!2 y!2 v!4)) (* (- 1) (* x!3 x!3 v!4)))))
 (let ((?x1074 (* ?x400 ?x768 ?x1082)))
 (let (($x675 (= ?x1074 0)))
 (let (($x1060 (or (not $x1021) (not $x675))))
 (let (($x775 (and $x443 $x1060)))
 (let ((?x1187 (+ (* u!5 x!3) (* v!4 y!2) ?x925 ?x896)))
 (let ((?x1211 (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2 y!2))))
 (let ((?x1201 (* u!5 u!5 u!5 v!4 v!4 x!3 y!2)))
 (let ((?x1106 (+ (* 3 (* u!5 u!5 v!4 v!4 v!4 x!3 y!2)) (* 3 (* u!5 v!4 v!4 v!4 v!4 x!3 y!2)) (* v!4 v!4 v!4 v!4 v!4 x!3 y!2) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3)) ?x1201 ?x1211 (* (- 3) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3)) (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3)) (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3)) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3 x!3) (* (- 3) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3 y!2)) (* 3 (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2 y!2)))))
 (let ((?x1188 (* v!4 x!3 x!3 y!2)))
 (let ((?x1193 (* (- 1) (* u!5 y!2 y!2))))
 (let ((?x98 (+ ?x1193 ?x1188 (* (- 1) (* v!4 x!3 x!3 x!3)) (* (- 1) (* v!4 y!2 y!2)) (* (- 1) (* u!5 x!3 x!3)) (* (- 1) (* v!4 x!3 x!3)) (* 2 (* u!5 x!3 y!2)) (* 2 (* v!4 x!3 y!2)))))
 (let ((?x1233 (+ (* u!5 u!5 u!5 u!5 u!5 x!3 y!2) (* 2 (* u!5 u!5 u!5 u!5 v!4 x!3 y!2)) ?x1201 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2)) (* (- 2) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 x!3 x!3 x!3 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 v!4 x!3 x!3 x!3 y!2 y!2 y!2)) (* (- 3) (* u!5 v!4 v!4 x!3 x!3 x!3 y!2 y!2 y!2)) ?x1211 (* 3 (* u!5 u!5 u!5 x!3 x!3 y!2 y!2 y!2 y!2)) (* 9 (* u!5 u!5 v!4 x!3 x!3 y!2 y!2 y!2 y!2)) (* 9 (* u!5 v!4 v!4 x!3 x!3 y!2 y!2 y!2 y!2)) (* 3 (* v!4 v!4 v!4 x!3 x!3 y!2 y!2 y!2 y!2)) (* (- 3) (* u!5 u!5 u!5 x!3 y!2 y!2 y!2 y!2 y!2)) (* (- 9) (* u!5 u!5 v!4 x!3 y!2 y!2 y!2 y!2 y!2)) (* (- 9) (* u!5 v!4 v!4 x!3 y!2 y!2 y!2 y!2 y!2)) (* (- 3) (* v!4 v!4 v!4 x!3 y!2 y!2 y!2 y!2 y!2)) (* u!5 u!5 u!5 y!2 y!2 y!2 y!2 y!2 y!2) (* 3 (* u!5 u!5 v!4 y!2 y!2 y!2 y!2 y!2 y!2)) (* 3 (* u!5 v!4 v!4 y!2 y!2 y!2 y!2 y!2 y!2)) (* v!4 v!4 v!4 y!2 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x1198 (+ ?x1193 ?x1188 (* u!5 x!3 x!3 y!2) (* (- 2) (* u!5 x!3 y!2 y!2)) (* (- 2) (* v!4 x!3 y!2 y!2)) (* u!5 y!2 y!2 y!2) (* v!4 y!2 y!2 y!2))))
 (let (($x532 (or (not (= (* ?x1198 ?x1233 ?x1187) 0)) (not (= (* ?x98 ?x1106 ?x1187) 0)))))
 (let (($x530 (and (= ?x1187 0) $x532)))
 (let (($x898 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x896 (* (- 1) k!00)))
 (let ((?x925 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x172 (+ ?x33 ?x34 ?x925 ?x896)))
 (let ((?x694 (* (- 1) (* v v v x x x y y y))))
 (let ((?x154 (* u u u v v x y)))
 (let ((?x963 (+ (* 3 (* u u v v v x y)) (* 3 (* u v v v v x y)) (* v v v v v x y) (* (- 1) (* u u u v v x x)) ?x154 ?x694 (* (- 3) (* u v v v v x x)) (* (- 3) (* u u v v v x x)) (* (- 1) (* v v v v v x x)) (* v v v x x x x x x) (* (- 3) (* v v v x x x x x y)) (* 3 (* v v v x x x x y y)))))
 (let ((?x726 (* v x x y)))
 (let ((?x52 (* u y y)))
 (let ((?x798 (* (- 1) ?x52)))
 (let ((?x1086 (+ ?x798 ?x726 (* (- 1) (* v x x x)) (* (- 1) (* v y y)) (* (- 1) (* u x x)) (* (- 1) (* v x x)) (* 2 (* u x y)) (* 2 (* v x y)))))
 (let ((?x744 (+ (* u u u u u x y) (* 2 (* u u u u v x y)) ?x154 (* (- 1) (* u u u u u y y)) (* (- 2) (* u u u u v y y)) (* (- 1) (* u u u v v y y)) (* (- 1) (* u u u x x x y y y)) (* (- 3) (* u u v x x x y y y)) (* (- 3) (* u v v x x x y y y)) ?x694 (* 3 (* u u u x x y y y y)) (* 9 (* u u v x x y y y y)) (* 9 (* u v v x x y y y y)) (* 3 (* v v v x x y y y y)) (* (- 3) (* u u u x y y y y y)) (* (- 9) (* u u v x y y y y y)) (* (- 9) (* u v v x y y y y y)) (* (- 3) (* v v v x y y y y y)) (* u u u y y y y y y) (* 3 (* u u v y y y y y y)) (* 3 (* u v v y y y y y y)) (* v v v y y y y y y))))
 (let ((?x804 (+ ?x798 ?x726 (* u x x y) (* (- 2) (* u x y y)) (* (- 2) (* v x y y)) (* u y y y) (* v y y y))))
 (let (($x1297 (or (not (= (* ?x804 ?x744 ?x172) 0)) (not (= (* ?x1086 ?x963 ?x172) 0)))))
 (and (= ?x172 0) $x1297)))))))))))))))) :qid k!29))
 ))
 (let (($x849 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x925 (* (- 1) k!10)))
 (let ((?x165 (+ y (* (- 1) x))))
 (let ((?x919 (* ?x165 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x896 (* (- 1) k!00)))
 (let ((?x271 (+ (* ?x57 ?x57 ?x57 ?x165 x v v) (* (- 1) (* ?x165 ?x165 ?x165 x x x v v v)))))
 (let ((?x184 (+ (* ?x165 x x v) (* (- 1) (* ?x57 ?x165 ?x165)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x904 (+ x (* (- 1) y))))
 (let ((?x909 (* ?x904 u)))
 (let ((?x940 (+ (* ?x44 ?x44 ?x904 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x904 ?x904 ?x904 y y y)))))
 (let ((?x148 (+ (* ?x44 ?x904 ?x904 y) (* (- 1) (* y y u)))))
 (let (($x733 (or (not (= (* ?x148 ?x940 (+ ?x896 ?x909 ?x45 ?x925)) 0)) (not (= (* ?x184 ?x271 (+ ?x896 ?x58 ?x919 ?x925)) 0)))))
 (let ((?x906 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x906 0) $x733))))))))))))))))) :qid k!29))
 ))
 (let ((?x450 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x896 (* (- 1) k!00)))
 (let ((?x925 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x172 (+ ?x33 ?x34 ?x925 ?x896)))
 (let ((?x694 (* (- 1) (* v v v x x x y y y))))
 (let ((?x154 (* u u u v v x y)))
 (let ((?x963 (+ (* 3 (* u u v v v x y)) (* 3 (* u v v v v x y)) (* v v v v v x y) (* (- 1) (* u u u v v x x)) ?x154 ?x694 (* (- 3) (* u v v v v x x)) (* (- 3) (* u u v v v x x)) (* (- 1) (* v v v v v x x)) (* v v v x x x x x x) (* (- 3) (* v v v x x x x x y)) (* 3 (* v v v x x x x y y)))))
 (let ((?x726 (* v x x y)))
 (let ((?x52 (* u y y)))
 (let ((?x798 (* (- 1) ?x52)))
 (let ((?x1086 (+ ?x798 ?x726 (* (- 1) (* v x x x)) (* (- 1) (* v y y)) (* (- 1) (* u x x)) (* (- 1) (* v x x)) (* 2 (* u x y)) (* 2 (* v x y)))))
 (let ((?x744 (+ (* u u u u u x y) (* 2 (* u u u u v x y)) ?x154 (* (- 1) (* u u u u u y y)) (* (- 2) (* u u u u v y y)) (* (- 1) (* u u u v v y y)) (* (- 1) (* u u u x x x y y y)) (* (- 3) (* u u v x x x y y y)) (* (- 3) (* u v v x x x y y y)) ?x694 (* 3 (* u u u x x y y y y)) (* 9 (* u u v x x y y y y)) (* 9 (* u v v x x y y y y)) (* 3 (* v v v x x y y y y)) (* (- 3) (* u u u x y y y y y)) (* (- 9) (* u u v x y y y y y)) (* (- 9) (* u v v x y y y y y)) (* (- 3) (* v v v x y y y y y)) (* u u u y y y y y y) (* 3 (* u u v y y y y y y)) (* 3 (* u v v y y y y y y)) (* v v v y y y y y y))))
 (let ((?x804 (+ ?x798 ?x726 (* u x x y) (* (- 2) (* u x y y)) (* (- 2) (* v x y y)) (* u y y y) (* v y y y))))
 (let (($x1297 (or (not (= (* ?x804 ?x744 ?x172) 0)) (not (= (* ?x1086 ?x963 ?x172) 0)))))
 (let (($x1336 (and (= ?x172 0) $x1297)))
 (let ((?x165 (+ y (* (- 1) x))))
 (let ((?x919 (* ?x165 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x271 (+ (* ?x57 ?x57 ?x57 ?x165 x v v) (* (- 1) (* ?x165 ?x165 ?x165 x x x v v v)))))
 (let ((?x184 (+ (* ?x165 x x v) (* (- 1) (* ?x57 ?x165 ?x165)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x904 (+ x (* (- 1) y))))
 (let ((?x909 (* ?x904 u)))
 (let ((?x940 (+ (* ?x44 ?x44 ?x904 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x904 ?x904 ?x904 y y y)))))
 (let ((?x148 (+ (* ?x44 ?x904 ?x904 y) (* (- 1) (* y y u)))))
 (let (($x733 (or (not (= (* ?x148 ?x940 (+ ?x896 ?x909 ?x45 ?x925)) 0)) (not (= (* ?x184 ?x271 (+ ?x896 ?x58 ?x919 ?x925)) 0)))))
 (let ((?x906 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x912 (and (= ?x906 0) $x733)))
 (rewrite (= $x912 $x1336))))))))))))))))))))))))))))))))))
 ))
 (let (($x905 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x925 (* (- 1) k!10)))
 (let ((?x165 (+ y (* (- 1) x))))
 (let ((?x919 (* ?x165 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x896 (* (- 1) k!00)))
 (let ((?x271 (+ (* ?x57 ?x57 ?x57 ?x165 x v v) (* (- 1) (* ?x165 ?x165 ?x165 x x x v v v)))))
 (let ((?x184 (+ (* ?x165 x x v) (* (- 1) (* ?x57 ?x165 ?x165)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x904 (+ x (* (- 1) y))))
 (let ((?x909 (* ?x904 u)))
 (let ((?x940 (+ (* ?x44 ?x44 ?x904 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x904 ?x904 ?x904 y y y)))))
 (let ((?x148 (+ (* ?x44 ?x904 ?x904 y) (* (- 1) (* y y u)))))
 (let (($x733 (or (not (= (* ?x148 ?x940 (+ ?x896 ?x909 ?x45 ?x925)) 0)) (not (= (* ?x184 ?x271 (+ ?x896 ?x58 ?x919 ?x925)) 0)))))
 (and (= (+ ?x896 (* x u) (* y v) ?x925) 0) $x733)))))))))))))))) :qid k!29))
 ))
 (let ((?x926 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x925 (* (- 1) k!10)))
 (let ((?x165 (+ y (* (- 1) x))))
 (let ((?x919 (* ?x165 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x896 (* (- 1) k!00)))
 (let ((?x271 (+ (* ?x57 ?x57 ?x57 ?x165 x v v) (* (- 1) (* ?x165 ?x165 ?x165 x x x v v v)))))
 (let ((?x184 (+ (* ?x165 x x v) (* (- 1) (* ?x57 ?x165 ?x165)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x904 (+ x (* (- 1) y))))
 (let ((?x909 (* ?x904 u)))
 (let ((?x940 (+ (* ?x44 ?x44 ?x904 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x904 ?x904 ?x904 y y y)))))
 (let ((?x148 (+ (* ?x44 ?x904 ?x904 y) (* (- 1) (* y y u)))))
 (let (($x733 (or (not (= (* ?x148 ?x940 (+ ?x896 ?x909 ?x45 ?x925)) 0)) (not (= (* ?x184 ?x271 (+ ?x896 ?x58 ?x919 ?x925)) 0)))))
 (let ((?x906 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x912 (and (= ?x906 0) $x733)))
 (let (($x936 (and (= (+ ?x896 (* x u) (* y v) ?x925) 0) $x733)))
 (rewrite (= $x936 $x912)))))))))))))))))))))
 ))
 (let (($x1023 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x99 (* (- 1) ?x38)))
 (let ((?x165 (+ y (* (- 1) x))))
 (let ((?x919 (* ?x165 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x83 (* (- 1) (* u00 x00))))
 (let ((?x271 (+ (* ?x57 ?x57 ?x57 ?x165 x v v) (* (- 1) (* ?x165 ?x165 ?x165 x x x v v v)))))
 (let ((?x184 (+ (* ?x165 x x v) (* (- 1) (* ?x57 ?x165 ?x165)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x904 (+ x (* (- 1) y))))
 (let ((?x909 (* ?x904 u)))
 (let ((?x940 (+ (* ?x44 ?x44 ?x904 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x904 ?x904 ?x904 y y y)))))
 (let ((?x148 (+ (* ?x44 ?x904 ?x904 y) (* (- 1) (* y y u)))))
 (let (($x638 (or (not (= (* ?x148 ?x940 (+ ?x83 ?x909 ?x45 ?x99)) 0)) (not (= (* ?x184 ?x271 (+ ?x83 ?x58 ?x919 ?x99)) 0)))))
 (and (= (+ ?x83 (* x u) (* y v) ?x99) 0) $x638))))))))))))))))) :qid k!29))
 ))
 (let ((?x359 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x925 (* (- 1) k!10)))
 (let ((?x165 (+ y (* (- 1) x))))
 (let ((?x919 (* ?x165 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x896 (* (- 1) k!00)))
 (let ((?x271 (+ (* ?x57 ?x57 ?x57 ?x165 x v v) (* (- 1) (* ?x165 ?x165 ?x165 x x x v v v)))))
 (let ((?x184 (+ (* ?x165 x x v) (* (- 1) (* ?x57 ?x165 ?x165)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x904 (+ x (* (- 1) y))))
 (let ((?x909 (* ?x904 u)))
 (let ((?x940 (+ (* ?x44 ?x44 ?x904 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x904 ?x904 ?x904 y y y)))))
 (let ((?x148 (+ (* ?x44 ?x904 ?x904 y) (* (- 1) (* y y u)))))
 (let (($x733 (or (not (= (* ?x148 ?x940 (+ ?x896 ?x909 ?x45 ?x925)) 0)) (not (= (* ?x184 ?x271 (+ ?x896 ?x58 ?x919 ?x925)) 0)))))
 (let (($x936 (and (= (+ ?x896 (* x u) (* y v) ?x925) 0) $x733)))
 (let ((?x195 (* ?x184 ?x271 (+ (* (- 1) (* u00 x00)) ?x58 ?x919 (* (- 1) (* v00 y00))))))
 (let ((?x202 (* ?x148 ?x940 (+ (* (- 1) (* u00 x00)) ?x909 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x99 (* (- 1) ?x38)))
 (let ((?x883 (* y v)))
 (let ((?x895 (* x u)))
 (let ((?x83 (* (- 1) (* u00 x00))))
 (let (($x888 (and (= (+ ?x83 ?x895 ?x883 ?x99) 0) (or (not (= ?x202 0)) (not (= ?x195 0))))))
 (rewrite (= $x888 $x936)))))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x68 (- (* v x x (- y x)) (* (+ u v) (- y x) (- y x)))))
 (let ((?x59 (- y x)))
 (let ((?x65 (- (* (+ u v) (+ u v) (+ u v) v v x ?x59) (* v v v x x x ?x59 ?x59 ?x59))))
 (let ((?x38 (* v00 y00)))
 (let ((?x62 (- (+ (* (- 1) u00 x00) (* (+ u v) x) (* v ?x59)) ?x38)))
 (let ((?x52 (* u y y)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x50 (- (* u u u ?x44 ?x44 ?x42 y) (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y y y))))
 (let ((?x54 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x50 (- (* ?x44 ?x42 ?x42 y) ?x52))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x54 0)) (not (= (* ?x62 ?x65 ?x68) 0))))))))))))))) :qid k!29))
 ))
 (let ((?x920 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x99 (* (- 1) ?x38)))
 (let ((?x165 (+ y (* (- 1) x))))
 (let ((?x919 (* ?x165 v)))
 (let ((?x57 (+ u v)))
 (let ((?x58 (* ?x57 x)))
 (let ((?x83 (* (- 1) (* u00 x00))))
 (let ((?x271 (+ (* ?x57 ?x57 ?x57 ?x165 x v v) (* (- 1) (* ?x165 ?x165 ?x165 x x x v v v)))))
 (let ((?x184 (+ (* ?x165 x x v) (* (- 1) (* ?x57 ?x165 ?x165)))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x904 (+ x (* (- 1) y))))
 (let ((?x909 (* ?x904 u)))
 (let ((?x940 (+ (* ?x44 ?x44 ?x904 y u u u) (* (- 1) (* ?x44 ?x44 ?x44 ?x904 ?x904 ?x904 y y y)))))
 (let ((?x148 (+ (* ?x44 ?x904 ?x904 y) (* (- 1) (* y y u)))))
 (let (($x638 (or (not (= (* ?x148 ?x940 (+ ?x83 ?x909 ?x45 ?x99)) 0)) (not (= (* ?x184 ?x271 (+ ?x83 ?x58 ?x919 ?x99)) 0)))))
 (let (($x888 (and (= (+ ?x83 (* x u) (* y v) ?x99) 0) $x638)))
 (let ((?x68 (- (* v x x (- y x)) (* ?x57 (- y x) (- y x)))))
 (let ((?x59 (- y x)))
 (let ((?x65 (- (* ?x57 ?x57 ?x57 v v x ?x59) (* v v v x x x ?x59 ?x59 ?x59))))
 (let ((?x69 (* (- (+ (* (- 1) u00 x00) ?x58 (* v ?x59)) ?x38) ?x65 ?x68)))
 (let ((?x42 (- x y)))
 (let ((?x50 (- (* u u u ?x44 ?x44 ?x42 y) (* ?x44 ?x44 ?x44 ?x42 ?x42 ?x42 y y y))))
 (let ((?x54 (* (- (+ (* (- 1) u00 x00) (* u ?x42) ?x45) ?x38) ?x50 (- (* ?x44 ?x42 ?x42 y) (* u y y)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x73 (and $x41 (or (not (= ?x54 0)) (not (= ?x69 0))))))
 (rewrite (= $x73 $x888)))))))))))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x887 (mp (mp @x75 (quant-intro (proof-bind ?x920) (= $x74 $x1023)) $x1023) (rewrite (= $x1023 $x1023)) $x1023)))
 (let ((@x942 (mp (mp @x887 (quant-intro (proof-bind ?x359) (= $x1023 $x905)) $x905) (quant-intro (proof-bind ?x926) (= $x905 $x849)) $x849)))
 (let ((@x533 (mp~ (mp @x942 (quant-intro (proof-bind ?x450) (= $x849 $x898)) $x898) (sk (~ $x898 $x530)) $x530)))
 (let ((@x418 (mp @x533 (rewrite (= $x530 $x775)) $x775)))
 (let ((@x143 (and-elim @x418 $x443)))
 (let ((@x824 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x443) $x519)) @x143 $x519)))
 (let (($x316 (>= ?x1082 0)))
 (let ((@x822 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x443) $x316)) @x143 $x316)))
 (let (($x309 (>= ?x1074 0)))
 (let ((@x117 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x309)) @x822 @x824 false) $x309) @x822 @x824 $x675)))
 (unit-resolution (and-elim @x418 $x1060) @x117 ((_ th-lemma arith eq-propagate 0 0 0 0) @x822 @x824 @x822 @x824 $x1021) false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        6
 :arith-conflicts           1
 :arith-eq-adapter          3
 :arith-fixed-eqs           3
 :arith-num-rows            5
 :arith-pseudo-nonlinear    4
 :arith-tableau-max-columns 67
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                3
 :eliminated-applications   2
 :max-memory                3.68
 :memory                    3.22
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1169827
 :num-checks                1
 :propagations              6
 :rlimit-count              4659
 :time                      0.01
 :total-time                0.02)
