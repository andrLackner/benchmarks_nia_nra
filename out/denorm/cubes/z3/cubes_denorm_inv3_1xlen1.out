unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x385 (* k!2 n!0)))
 (let ((?x355 (* (- 3) c!3)))
 (let ((?x321 (* 2 n!0)))
 (let ((?x408 (* (- 3) k!2)))
 (let ((?x281 (+ 3 ?x408 ?x321 ?x355 (* n!0 m!1) ?x385)))
 (let (($x275 (<= ?x281 0)))
 (let ((?x367 (* (- 1) ?x385)))
 (let ((?x517 (* 3 c!3)))
 (let ((?x389 (* (- 2) n!0)))
 (let ((?x221 (+ k!2 ?x389 ?x517 ?x367)))
 (let (($x243 (<= ?x221 1)))
 (let (($x222 (= ?x221 1)))
 (let ((?x215 (+ k!2 c!3)))
 (let ((?x159 (+ k!2 m!1)))
 (let ((?x352 (+ 6 m!1)))
 (let ((?x343 (+ 1 n!0)))
 (let ((?x310 (* ?x343 ?x343 ?x343 ?x352 ?x352 ?x159 ?x159 ?x215 ?x215 ?x281)))
 (let (($x289 (= ?x310 0)))
 (let (($x309 (not $x289)))
 (let ((?x391 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x158 (= ?x391 1)))
 (let ((?x106 (* (- 1) (* k!2 k!2))))
 (let ((?x199 (* 18 c!3)))
 (let ((?x170 (* (- 9) n!0)))
 (let ((?x206 (* 5 k!2)))
 (let ((?x212 (+ (* 9 (* n!0 c!3)) ?x206 ?x170 ?x199 ?x106)))
 (let (($x286 (= ?x212 4)))
 (let ((?x235 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x230 (= ?x235 (- 6))))
 (let (($x284 (and $x230 $x286 $x222 $x158 $x309)))
 (let ((?x353 (+ c!3 k!2)))
 (let ((?x193 (* ?x343 ?x343 ?x343 ?x352 ?x352 ?x159 ?x159 ?x353 ?x353 (+ 3 ?x355 ?x408 ?x321 ?x385 (* m!1 n!0)))))
 (let (($x102 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x199 ?x206 ?x170 ?x106 (* 9 (* c!3 n!0))) 4) (= (+ ?x517 k!2 ?x389 ?x367) 1) $x158 (not (= ?x193 0)))))
 (let (($x200 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x402 (+ 3 ?x214 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x198 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x402) 0))))
 (let (($x291 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x253 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x201 (= (+ ?x40 ?x44 ?x203 ?x204 (* 9 (* c n))) 4)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 $x201 $x253 $x291 $x198))))))))))))))))))) :qid k!34))
 ))
 (let (($x528 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x203 ?x204) 4) $x186 $x145 $x166))))))))))))))))) :qid k!34))
 ))
 (let ((?x354 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x402 (+ 3 ?x214 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x198 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x402) 0))))
 (let (($x291 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x253 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x201 (= (+ ?x40 ?x44 ?x203 ?x204 (* 9 (* c n))) 4)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x369 (and $x117 $x201 $x253 $x291 $x198)))
 (let ((?x511 (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 (+ 3 ?x214 (* (- 4) k) (* ?x334 ?x71) (* (- 1) m) ?x59))))
 (let (($x166 (not (= ?x511 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x140 (and $x117 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x203 ?x204) 4) $x186 $x145 $x166)))
 (rewrite (= $x140 $x369)))))))))))))))))))))))))))
 ))
 (let (($x167 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 (= ?x329 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))))))))))))) :qid k!34))
 ))
 (let ((?x527 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x186 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x204 (* (- 1) ?x49)))
 (let ((?x203 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x140 (and $x117 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x203 ?x204) 4) $x186 $x145 $x166)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x190 (and $x117 (= ?x329 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))
 (rewrite (= $x190 $x140)))))))))))))))))))))))
 ))
 (let (($x84 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x81 (not (= (* ?x77 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72 ?x72) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x81))))))))))))))) :qid k!34))
 ))
 (let ((?x169 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x190 (and $x117 (= ?x329 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x81 (not (= (* ?x77 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72 ?x72) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x83 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x81))))
 (rewrite (= $x83 $x190))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x401 (mp (mp @x85 (quant-intro (proof-bind ?x169) (= $x84 $x167)) $x167) (rewrite (= $x167 $x167)) $x167)))
 (let ((@x388 (mp (mp @x401 (quant-intro (proof-bind ?x527) (= $x167 $x528)) $x528) (quant-intro (proof-bind ?x354) (= $x528 $x200)) $x200)))
 (let ((@x397 (mp (mp~ @x388 (sk (~ $x200 $x102)) $x102) (rewrite (= $x102 $x284)) $x284)))
 (let ((@x295 (and-elim @x397 $x222)))
 (let ((@x325 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x222) $x243)) @x295 $x243)))
 (let (($x248 (>= ?x221 1)))
 (let ((@x331 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x222) $x248)) @x295 $x248)))
 (let (($x247 (<= ?x391 1)))
 (let ((@x283 (and-elim @x397 $x158)))
 (let ((@x322 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x247)) @x283 $x247)))
 (let (($x244 (>= ?x391 1)))
 (let ((@x314 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x158) $x244)) @x283 $x244)))
 (let (($x250 (<= ?x212 4)))
 (let ((@x216 (and-elim @x397 $x286)))
 (let ((@x264 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x286) $x250)) @x216 $x250)))
 (let (($x251 (>= ?x212 4)))
 (let ((@x161 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x286) $x251)) @x216 $x251)))
 (let (($x258 (<= ?x235 (- 6))))
 (let ((@x280 (and-elim @x397 $x230)))
 (let ((@x319 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x258)) @x280 $x258)))
 (let (($x252 (>= ?x235 (- 6))))
 (let ((@x336 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x252)) @x280 $x252)))
 (let ((@x520 ((_ th-lemma arith) (hypothesis (not $x275)) @x336 @x319 @x161 @x264 @x331 @x325 @x331 @x325 @x161 @x264 @x331 @x325 @x161 @x264 @x161 @x264 @x314 @x322 @x331 @x325 false)))
 (let ((@x177 (lemma @x520 $x275)))
 (let (($x178 (>= ?x281 0)))
 (let ((@x537 ((_ th-lemma arith) (hypothesis (not $x178)) @x336 @x319 @x331 @x325 @x314 @x322 false)))
 (let ((@x538 (lemma @x537 $x178)))
 (let (($x541 (not (<= ?x310 0))))
 (let (($x175 (>= ?x310 0)))
 (let ((@x496 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x175)) (hypothesis $x178) (hypothesis $x275) false)))
 (let ((@x539 (unit-resolution (lemma @x496 (or (not $x275) $x175 (not $x178))) @x177 (or $x175 (not $x178)))))
 (let ((@x545 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x289 $x541 (not $x175))) (and-elim @x397 $x309) (or $x541 (not $x175)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x545 (unit-resolution @x539 @x538 $x175) $x541) @x538 @x177 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 16
 :arith-assert-diseq        7
 :arith-assert-lower        110
 :arith-assert-upper        93
 :arith-bound-prop          5
 :arith-branch-var          6
 :arith-conflicts           14
 :arith-eq-adapter          10
 :arith-fixed-eqs           30
 :arith-gcd-tests           39
 :arith-gomory-cuts         3
 :arith-grobner             16
 :arith-ineq-splits         6
 :arith-max-min             904
 :arith-nonlinear-bounds    26
 :arith-nonlinear-horner    158
 :arith-num-rows            12
 :arith-patches             12
 :arith-patches_succ        1
 :arith-pivots              277
 :arith-pseudo-nonlinear    15
 :arith-row-summations      1620
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    12
 :conflicts                 15
 :decisions                 32
 :del-clause                32
 :final-checks              50
 :max-memory                3.70
 :memory                    3.16
 :minimized-lits            4
 :mk-bool-var               75
 :mk-clause                 58
 :num-allocs                1630260
 :num-checks                1
 :propagations              35
 :rlimit-count              77542
 :time                      0.02
 :total-time                0.02)
