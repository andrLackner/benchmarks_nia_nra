unsat
((set-logic NIA)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(proof
(let ((?x1413 (+ k!10 k!00 (* (- 1) (* u!5 x!3)) (* (- 1) (* v!4 y!2)))))
 (let (($x1409 (>= ?x1413 0)))
 (let (($x1418 (= ?x1413 0)))
 (let ((?x1657 (* v!4 y!2)))
 (let ((?x1656 (* u!5 x!3)))
 (let ((?x374 (* (- 1) k!00)))
 (let ((?x373 (* (- 1) k!10)))
 (let ((?x1407 (+ ?x373 ?x374 ?x1656 ?x1657)))
 (let ((?x1397 (* u!5 u!5 u!5 y!2 y!2 y!2)))
 (let ((?x1396 (* (- 3) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2))))
 (let ((?x1390 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2))))
 (let ((?x1393 (* (- 3) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2))))
 (let ((?x647 (* (- 1) (* u!5 u!5 v!4 v!4 v!4 y!2 y!2 y!2))))
 (let ((?x563 (* (- 1) (* u!5 u!5 u!5 x!3 y!2 y!2))))
 (let ((?x1389 (* (- 1) (* u!5 v!4 v!4 v!4 y!2))))
 (let ((?x1387 (* (- 3) (* u!5 u!5 v!4 v!4 y!2))))
 (let ((?x1386 (* (- 1) (* u!5 u!5 u!5 u!5 y!2))))
 (let ((?x1383 (* (- 3) (* u!5 u!5 u!5 v!4 y!2))))
 (let ((?x1381 (* 3 (* u!5 u!5 v!4 v!4 x!3))))
 (let ((?x1379 (* 3 (* u!5 u!5 u!5 v!4 x!3))))
 (let ((?x1374 (* u!5 u!5 u!5 u!5 x!3)))
 (let ((?x1373 (* (- 1) (* u!5 v!4 y!2 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x1364 (* 3 (* u!5 v!4 x!3 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x1367 (* 3 (* u!5 u!5 x!3 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x1371 (* (- 1) (* u!5 u!5 y!2 y!2 y!2 y!2 y!2 y!2))))
 (let ((?x1363 (* (- 3) (* u!5 v!4 x!3 x!3 y!2 y!2 y!2 y!2))))
 (let ((?x1361 (* (- 3) (* u!5 u!5 x!3 x!3 y!2 y!2 y!2 y!2))))
 (let ((?x1359 (* u!5 u!5 x!3 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x1187 (* u!5 v!4 x!3 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x1176 (* u!5 v!4 v!4 v!4 x!3)))
 (let ((?x1473 (+ ?x1176 ?x1187 ?x1359 ?x1361 ?x1363 ?x1371 ?x1367 ?x1364 ?x1373 ?x1374 ?x1379 ?x1381 ?x1383 ?x1386 ?x1387 ?x1389)))
 (let ((?x1673 (* x!3 x!3 x!3 y!2)))
 (let ((?x1672 (* x!3 x!3 y!2 y!2)))
 (let ((?x1356 (* (- 2) ?x1672)))
 (let ((?x1357 (* x!3 y!2 y!2 y!2)))
 (let ((?x1465 (* (+ ?x1357 ?x1356 ?x1673) ?x1473 (+ ?x563 ?x647 ?x1393 ?x1390 ?x1396 ?x1397) ?x1407)))
 (let (($x1469 (= ?x1465 0)))
 (let (($x1464 (not $x1469)))
 (let ((?x1424 (* (- 1) (* v!4 v!4 v!4 x!3 y!2 y!2))))
 (let ((?x1417 (* (- 3) (* u!5 v!4 v!4 x!3 y!2 y!2))))
 (let ((?x768 (* (- 2) (* u!5 v!4 v!4 v!4 v!4 y!2 y!2 y!2))))
 (let ((?x1376 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 y!2 y!2 y!2))))
 (let ((?x1370 (* 2 (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x1351 (* 3 (* v!4 v!4 v!4 v!4 v!4 x!3 y!2 y!2))))
 (let ((?x1349 (* 6 (* u!5 v!4 v!4 v!4 v!4 x!3 y!2 y!2))))
 (let ((?x1347 (* 3 (* u!5 u!5 v!4 v!4 v!4 x!3 y!2 y!2))))
 (let ((?x1345 (* 2 (* v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x1343 (* 6 (* u!5 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x1341 (* 6 (* u!5 u!5 v!4 x!3 x!3 y!2))))
 (let ((?x1339 (* (- 3) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x1337 (* 2 (* u!5 u!5 u!5 x!3 x!3 y!2))))
 (let ((?x1335 (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x1333 (* (- 6) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x1331 (* (- 3) (* u!5 v!4 v!4 x!3 x!3 x!3))))
 (let ((?x1217 (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3)))
 (let ((?x606 (* (- 3) (* u!5 u!5 v!4 x!3 y!2 y!2))))
 (let ((?x763 (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 y!2))))
 (let ((?x755 (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3)))
 (let ((?x753 (* (- 3) (* u!5 u!5 v!4 x!3 x!3 x!3))))
 (let ((?x556 (* (- 1) (* u!5 u!5 u!5 x!3 x!3 x!3))))
 (let ((?x1428 (+ ?x563 ?x556 ?x753 ?x755 ?x763 ?x606 ?x1217 ?x647 ?x1331 ?x1333 ?x1335 ?x1337 ?x1339 ?x1341 ?x1343 ?x1345 ?x1347 ?x1349 ?x1351 ?x1370 ?x1376 ?x768 ?x1417 ?x1424)))
 (let ((?x1195 (* v!4 v!4 v!4 v!4 x!3)))
 (let ((?x1188 (* v!4 v!4 x!3 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x1194 (* (- 3) (* v!4 v!4 x!3 x!3 x!3 x!3 y!2 y!2))))
 (let ((?x1193 (* (- 3) (* u!5 v!4 x!3 x!3 x!3 x!3 y!2 y!2))))
 (let ((?x1192 (* 3 (* v!4 v!4 x!3 x!3 x!3 x!3 x!3 y!2))))
 (let ((?x1191 (* 3 (* u!5 v!4 x!3 x!3 x!3 x!3 x!3 y!2))))
 (let ((?x1190 (* (- 1) (* v!4 v!4 x!3 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x1189 (* (- 1) (* u!5 v!4 x!3 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x1175 (+ ?x1672 (* (- 1) ?x1673))))
 (let ((?x1431 (* ?x1175 (+ ?x1189 ?x1190 ?x1191 ?x1192 ?x1193 ?x1194 ?x1176 ?x1187 ?x1188 ?x1195) ?x1428 ?x1407)))
 (let (($x1429 (= ?x1431 0)))
 (let (($x1467 (or (not $x1429) $x1464)))
 (let (($x1484 (and $x1418 $x1467)))
 (let ((?x1663 (+ ?x1656 ?x1657 ?x373 ?x374)))
 (let ((?x1392 (+ ?x1359 ?x1187 ?x1361 ?x1363 ?x1367 ?x1364 ?x1371 ?x1373 ?x1374 ?x1379 ?x1381 ?x1176 ?x1386 ?x1383 ?x1387 ?x1389)))
 (let (($x1400 (= (* (+ ?x1356 ?x1357 ?x1673) ?x1392 (+ ?x1390 ?x1393 ?x1396 ?x647 ?x563 ?x1397) ?x1663) 0)))
 (let ((?x1352 (+ ?x1217 ?x647 ?x563 ?x1370 ?x1376 ?x768 ?x606 ?x1417 ?x1424 ?x556 ?x753 ?x755 ?x763 ?x1331 ?x1333 ?x1335 ?x1337 ?x1339 ?x1341 ?x1343 ?x1345 ?x1347 ?x1349 ?x1351)))
 (let ((?x1353 (* ?x1175 (+ ?x1187 ?x1176 ?x1188 ?x1189 ?x1190 ?x1191 ?x1192 ?x1193 ?x1194 ?x1195) ?x1352 ?x1663)))
 (let (($x1403 (and (= ?x1663 0) (or (not (= ?x1353 0)) (not $x1400)))))
 (let (($x336 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x374 (* (- 1) k!00)))
 (let ((?x373 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x394 (+ ?x33 ?x34 ?x373 ?x374)))
 (let ((?x188 (* u u u y y y)))
 (let ((?x204 (* (- 1) (* u u u x y y))))
 (let ((?x172 (* (- 1) (* u u v v v y y y))))
 (let ((?x158 (* (- 1) (* u u u u u y y y))))
 (let ((?x1690 (+ ?x158 (* (- 3) (* u u u u v y y y)) (* (- 3) (* u u u v v y y y)) ?x172 ?x204 ?x188)))
 (let ((?x458 (* u v v v x)))
 (let ((?x332 (* u v x x x y y y)))
 (let ((?x545 (+ (* u u x x x y y y) ?x332 (* (- 3) (* u u x x y y y y)) (* (- 3) (* u v x x y y y y)) (* 3 (* u u x y y y y y)) (* 3 (* u v x y y y y y)) (* (- 1) (* u u y y y y y y)) (* (- 1) (* u v y y y y y y)) (* u u u u x) (* 3 (* u u u v x)) (* 3 (* u u v v x)) ?x458 (* (- 1) (* u u u u y)) (* (- 3) (* u u u v y)) (* (- 3) (* u u v v y)) (* (- 1) (* u v v v y)))))
 (let ((?x260 (* x x x y)))
 (let ((?x323 (+ (* (- 2) (* x x y y)) (* x y y y) ?x260)))
 (let ((?x836 (* 2 (* v v v x x y))))
 (let ((?x833 (* 6 (* u v v x x y))))
 (let ((?x830 (* 6 (* u u v x x y))))
 (let ((?x826 (* 2 (* u u u x x y))))
 (let ((?x805 (* (- 1) (* v v v x x x))))
 (let ((?x822 (* (- 3) (* u v v x x x))))
 (let ((?x819 (* (- 3) (* u u v x x x))))
 (let ((?x802 (* (- 1) (* u u u x x x))))
 (let ((?x801 (* (- 1) (* v v v x y y))))
 (let ((?x816 (* (- 3) (* u v v x y y))))
 (let ((?x813 (* (- 3) (* u u v x y y))))
 (let ((?x585 (* (- 1) (* v v v v v y y y))))
 (let ((?x1211 (+ (* u u v v v x x x) ?x172 ?x204 (* 2 (* u v v v v x x x)) ?x585 (* (- 2) (* u v v v v y y y)) ?x813 ?x816 ?x801 ?x802 ?x819 (* v v v v v x x x) (* (- 3) (* u u v v v x x y)) ?x822 (* (- 6) (* u v v v v x x y)) ?x805 ?x826 (* (- 3) (* v v v v v x x y)) ?x830 ?x833 ?x836 (* 3 (* u u v v v x y y)) (* 6 (* u v v v v x y y)) (* 3 (* v v v v v x y y)))))
 (let ((?x1030 (+ ?x332 ?x458 (* v v x x x y y y) (* (- 1) (* u v x x x x x x)) (* (- 1) (* v v x x x x x x)) (* 3 (* u v x x x x x y)) (* 3 (* v v x x x x x y)) (* (- 3) (* u v x x x x y y)) (* (- 3) (* v v x x x x y y)) (* v v v v x))))
 (let ((?x227 (* x x y y)))
 (let ((?x899 (+ ?x227 (* (- 1) ?x260))))
 (let (($x1720 (or (not (= (* ?x899 ?x1030 ?x1211 ?x394) 0)) (not (= (* ?x323 ?x545 ?x1690 ?x394) 0)))))
 (and (= ?x394 0) $x1720))))))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x355 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x373 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x840 (+ x (* (- 1) y))))
 (let ((?x362 (* ?x840 u)))
 (let ((?x374 (* (- 1) k!00)))
 (let ((?x334 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x840 y y u u u)))))
 (let ((?x384 (+ (* ?x44 ?x840 ?x840 ?x840 y y y u) (* ?x44 ?x44 ?x44 ?x840 u))))
 (let ((?x335 (+ (* ?x840 ?x840 y y) (* ?x840 ?x840 ?x840 y))))
 (let ((?x351 (* (- 1) x)))
 (let ((?x370 (+ y ?x351)))
 (let ((?x233 (* ?x370 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x368 (+ (* (- 1) (* ?x60 ?x60 ?x370 ?x370 ?x370 v v v)) (* (- 1) (* ?x60 ?x60 ?x60 ?x370 ?x370 x)))))
 (let ((?x395 (+ (* ?x60 ?x370 ?x370 ?x370 x x x v) (* ?x60 x v v v))))
 (let ((?x407 (+ (* ?x370 ?x370 x x) (* ?x370 x x x))))
 (let (($x376 (or (not (= (* ?x407 ?x395 ?x368 (+ ?x374 ?x61 ?x233 ?x373)) 0)) (not (= (* ?x335 ?x384 ?x334 (+ ?x374 ?x362 ?x45 ?x373)) 0)))))
 (let ((?x232 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x232 0) $x376)))))))))))))))))))) :qid k!29))
 ))
 (let ((?x234 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x374 (* (- 1) k!00)))
 (let ((?x373 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x394 (+ ?x33 ?x34 ?x373 ?x374)))
 (let ((?x188 (* u u u y y y)))
 (let ((?x204 (* (- 1) (* u u u x y y))))
 (let ((?x172 (* (- 1) (* u u v v v y y y))))
 (let ((?x158 (* (- 1) (* u u u u u y y y))))
 (let ((?x1690 (+ ?x158 (* (- 3) (* u u u u v y y y)) (* (- 3) (* u u u v v y y y)) ?x172 ?x204 ?x188)))
 (let ((?x458 (* u v v v x)))
 (let ((?x332 (* u v x x x y y y)))
 (let ((?x545 (+ (* u u x x x y y y) ?x332 (* (- 3) (* u u x x y y y y)) (* (- 3) (* u v x x y y y y)) (* 3 (* u u x y y y y y)) (* 3 (* u v x y y y y y)) (* (- 1) (* u u y y y y y y)) (* (- 1) (* u v y y y y y y)) (* u u u u x) (* 3 (* u u u v x)) (* 3 (* u u v v x)) ?x458 (* (- 1) (* u u u u y)) (* (- 3) (* u u u v y)) (* (- 3) (* u u v v y)) (* (- 1) (* u v v v y)))))
 (let ((?x260 (* x x x y)))
 (let ((?x323 (+ (* (- 2) (* x x y y)) (* x y y y) ?x260)))
 (let ((?x836 (* 2 (* v v v x x y))))
 (let ((?x833 (* 6 (* u v v x x y))))
 (let ((?x830 (* 6 (* u u v x x y))))
 (let ((?x826 (* 2 (* u u u x x y))))
 (let ((?x805 (* (- 1) (* v v v x x x))))
 (let ((?x822 (* (- 3) (* u v v x x x))))
 (let ((?x819 (* (- 3) (* u u v x x x))))
 (let ((?x802 (* (- 1) (* u u u x x x))))
 (let ((?x801 (* (- 1) (* v v v x y y))))
 (let ((?x816 (* (- 3) (* u v v x y y))))
 (let ((?x813 (* (- 3) (* u u v x y y))))
 (let ((?x585 (* (- 1) (* v v v v v y y y))))
 (let ((?x1211 (+ (* u u v v v x x x) ?x172 ?x204 (* 2 (* u v v v v x x x)) ?x585 (* (- 2) (* u v v v v y y y)) ?x813 ?x816 ?x801 ?x802 ?x819 (* v v v v v x x x) (* (- 3) (* u u v v v x x y)) ?x822 (* (- 6) (* u v v v v x x y)) ?x805 ?x826 (* (- 3) (* v v v v v x x y)) ?x830 ?x833 ?x836 (* 3 (* u u v v v x y y)) (* 6 (* u v v v v x y y)) (* 3 (* v v v v v x y y)))))
 (let ((?x1030 (+ ?x332 ?x458 (* v v x x x y y y) (* (- 1) (* u v x x x x x x)) (* (- 1) (* v v x x x x x x)) (* 3 (* u v x x x x x y)) (* 3 (* v v x x x x x y)) (* (- 3) (* u v x x x x y y)) (* (- 3) (* v v x x x x y y)) (* v v v v x))))
 (let ((?x227 (* x x y y)))
 (let ((?x899 (+ ?x227 (* (- 1) ?x260))))
 (let (($x1720 (or (not (= (* ?x899 ?x1030 ?x1211 ?x394) 0)) (not (= (* ?x323 ?x545 ?x1690 ?x394) 0)))))
 (let (($x1769 (and (= ?x394 0) $x1720)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x840 (+ x (* (- 1) y))))
 (let ((?x362 (* ?x840 u)))
 (let ((?x334 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x840 y y u u u)))))
 (let ((?x384 (+ (* ?x44 ?x840 ?x840 ?x840 y y y u) (* ?x44 ?x44 ?x44 ?x840 u))))
 (let ((?x335 (+ (* ?x840 ?x840 y y) (* ?x840 ?x840 ?x840 y))))
 (let ((?x351 (* (- 1) x)))
 (let ((?x370 (+ y ?x351)))
 (let ((?x233 (* ?x370 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x368 (+ (* (- 1) (* ?x60 ?x60 ?x370 ?x370 ?x370 v v v)) (* (- 1) (* ?x60 ?x60 ?x60 ?x370 ?x370 x)))))
 (let ((?x395 (+ (* ?x60 ?x370 ?x370 ?x370 x x x v) (* ?x60 x v v v))))
 (let ((?x407 (+ (* ?x370 ?x370 x x) (* ?x370 x x x))))
 (let (($x376 (or (not (= (* ?x407 ?x395 ?x368 (+ ?x374 ?x61 ?x233 ?x373)) 0)) (not (= (* ?x335 ?x384 ?x334 (+ ?x374 ?x362 ?x45 ?x373)) 0)))))
 (let ((?x232 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x809 (and (= ?x232 0) $x376)))
 (rewrite (= $x809 $x1769))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x776 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x373 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x840 (+ x (* (- 1) y))))
 (let ((?x362 (* ?x840 u)))
 (let ((?x374 (* (- 1) k!00)))
 (let ((?x334 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x840 y y u u u)))))
 (let ((?x384 (+ (* ?x44 ?x840 ?x840 ?x840 y y y u) (* ?x44 ?x44 ?x44 ?x840 u))))
 (let ((?x335 (+ (* ?x840 ?x840 y y) (* ?x840 ?x840 ?x840 y))))
 (let ((?x351 (* (- 1) x)))
 (let ((?x370 (+ y ?x351)))
 (let ((?x233 (* ?x370 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x368 (+ (* (- 1) (* ?x60 ?x60 ?x370 ?x370 ?x370 v v v)) (* (- 1) (* ?x60 ?x60 ?x60 ?x370 ?x370 x)))))
 (let ((?x395 (+ (* ?x60 ?x370 ?x370 ?x370 x x x v) (* ?x60 x v v v))))
 (let ((?x407 (+ (* ?x370 ?x370 x x) (* ?x370 x x x))))
 (let (($x376 (or (not (= (* ?x407 ?x395 ?x368 (+ ?x374 ?x61 ?x233 ?x373)) 0)) (not (= (* ?x335 ?x384 ?x334 (+ ?x374 ?x362 ?x45 ?x373)) 0)))))
 (and (= (+ ?x374 (* x u) (* y v) ?x373) 0) $x376))))))))))))))))))) :qid k!29))
 ))
 (let ((?x378 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x373 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x840 (+ x (* (- 1) y))))
 (let ((?x362 (* ?x840 u)))
 (let ((?x374 (* (- 1) k!00)))
 (let ((?x334 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x840 y y u u u)))))
 (let ((?x384 (+ (* ?x44 ?x840 ?x840 ?x840 y y y u) (* ?x44 ?x44 ?x44 ?x840 u))))
 (let ((?x335 (+ (* ?x840 ?x840 y y) (* ?x840 ?x840 ?x840 y))))
 (let ((?x351 (* (- 1) x)))
 (let ((?x370 (+ y ?x351)))
 (let ((?x233 (* ?x370 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x368 (+ (* (- 1) (* ?x60 ?x60 ?x370 ?x370 ?x370 v v v)) (* (- 1) (* ?x60 ?x60 ?x60 ?x370 ?x370 x)))))
 (let ((?x395 (+ (* ?x60 ?x370 ?x370 ?x370 x x x v) (* ?x60 x v v v))))
 (let ((?x407 (+ (* ?x370 ?x370 x x) (* ?x370 x x x))))
 (let (($x376 (or (not (= (* ?x407 ?x395 ?x368 (+ ?x374 ?x61 ?x233 ?x373)) 0)) (not (= (* ?x335 ?x384 ?x334 (+ ?x374 ?x362 ?x45 ?x373)) 0)))))
 (let ((?x232 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x809 (and (= ?x232 0) $x376)))
 (let (($x804 (and (= (+ ?x374 (* x u) (* y v) ?x373) 0) $x376)))
 (rewrite (= $x804 $x809))))))))))))))))))))))))
 ))
 (let (($x257 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x840 (+ x (* (- 1) y))))
 (let ((?x362 (* ?x840 u)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let ((?x334 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x840 y y u u u)))))
 (let ((?x384 (+ (* ?x44 ?x840 ?x840 ?x840 y y y u) (* ?x44 ?x44 ?x44 ?x840 u))))
 (let ((?x335 (+ (* ?x840 ?x840 y y) (* ?x840 ?x840 ?x840 y))))
 (let ((?x351 (* (- 1) x)))
 (let ((?x370 (+ y ?x351)))
 (let ((?x233 (* ?x370 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x368 (+ (* (- 1) (* ?x60 ?x60 ?x370 ?x370 ?x370 v v v)) (* (- 1) (* ?x60 ?x60 ?x60 ?x370 ?x370 x)))))
 (let ((?x395 (+ (* ?x60 ?x370 ?x370 ?x370 x x x v) (* ?x60 x v v v))))
 (let ((?x407 (+ (* ?x370 ?x370 x x) (* ?x370 x x x))))
 (let (($x543 (or (not (= (* ?x407 ?x395 ?x368 (+ ?x89 ?x61 ?x233 ?x105)) 0)) (not (= (* ?x335 ?x384 ?x334 (+ ?x89 ?x362 ?x45 ?x105)) 0)))))
 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) $x543)))))))))))))))))))) :qid k!29))
 ))
 (let ((?x189 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x373 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x840 (+ x (* (- 1) y))))
 (let ((?x362 (* ?x840 u)))
 (let ((?x374 (* (- 1) k!00)))
 (let ((?x334 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x840 y y u u u)))))
 (let ((?x384 (+ (* ?x44 ?x840 ?x840 ?x840 y y y u) (* ?x44 ?x44 ?x44 ?x840 u))))
 (let ((?x335 (+ (* ?x840 ?x840 y y) (* ?x840 ?x840 ?x840 y))))
 (let ((?x351 (* (- 1) x)))
 (let ((?x370 (+ y ?x351)))
 (let ((?x233 (* ?x370 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x368 (+ (* (- 1) (* ?x60 ?x60 ?x370 ?x370 ?x370 v v v)) (* (- 1) (* ?x60 ?x60 ?x60 ?x370 ?x370 x)))))
 (let ((?x395 (+ (* ?x60 ?x370 ?x370 ?x370 x x x v) (* ?x60 x v v v))))
 (let ((?x407 (+ (* ?x370 ?x370 x x) (* ?x370 x x x))))
 (let (($x376 (or (not (= (* ?x407 ?x395 ?x368 (+ ?x374 ?x61 ?x233 ?x373)) 0)) (not (= (* ?x335 ?x384 ?x334 (+ ?x374 ?x362 ?x45 ?x373)) 0)))))
 (let (($x804 (and (= (+ ?x374 (* x u) (* y v) ?x373) 0) $x376)))
 (let ((?x382 (* ?x335 ?x384 ?x334 (+ (* (- 1) (* u00 x00)) ?x362 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x402 (* ?x407 ?x395 ?x368 (+ (* (- 1) (* u00 x00)) ?x61 ?x233 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x779 (* y v)))
 (let ((?x777 (* x u)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let (($x688 (and (= (+ ?x89 ?x777 ?x779 ?x105) 0) (or (not (= ?x402 0)) (not (= ?x382 0))))))
 (rewrite (= $x688 $x804))))))))))))))))))))))))))))))
 ))
 (let (($x80 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x62 (- y x)))
 (let ((?x60 (+ u v)))
 (let ((?x74 (+ (* ?x60 v x x x ?x62 ?x62 ?x62) (* ?x60 v v v x))))
 (let ((?x68 (- (* (- 1) ?x60 ?x60 v v v ?x62 ?x62 ?x62) (* ?x60 ?x60 ?x60 x ?x62 ?x62))))
 (let ((?x38 (* v00 y00)))
 (let ((?x75 (* (- (+ (* (- 1) u00 x00) (* ?x60 x) (* v ?x62)) ?x38) ?x68 (+ (* x x ?x62 ?x62) (* x x x ?x62)) ?x74)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x56 (+ (* u ?x44 ?x42 ?x42 ?x42 y y y) (* u ?x44 ?x44 ?x44 ?x42))))
 (let ((?x50 (- (* (- 1) u u ?x44 ?x44 ?x44 y y y) (* u u u ?x42 y y))))
 (let ((?x57 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x50 (+ (* ?x42 ?x42 y y) (* ?x42 ?x42 ?x42 y)) ?x56)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x57 0)) (not (= ?x75 0)))))))))))))))) :qid k!29))
 ))
 (let ((?x359 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x105 (* (- 1) ?x38)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x840 (+ x (* (- 1) y))))
 (let ((?x362 (* ?x840 u)))
 (let ((?x89 (* (- 1) (* u00 x00))))
 (let ((?x334 (+ (* (- 1) (* ?x44 ?x44 ?x44 y y y u u)) (* (- 1) (* ?x840 y y u u u)))))
 (let ((?x384 (+ (* ?x44 ?x840 ?x840 ?x840 y y y u) (* ?x44 ?x44 ?x44 ?x840 u))))
 (let ((?x335 (+ (* ?x840 ?x840 y y) (* ?x840 ?x840 ?x840 y))))
 (let ((?x351 (* (- 1) x)))
 (let ((?x370 (+ y ?x351)))
 (let ((?x233 (* ?x370 v)))
 (let ((?x60 (+ u v)))
 (let ((?x61 (* ?x60 x)))
 (let ((?x368 (+ (* (- 1) (* ?x60 ?x60 ?x370 ?x370 ?x370 v v v)) (* (- 1) (* ?x60 ?x60 ?x60 ?x370 ?x370 x)))))
 (let ((?x395 (+ (* ?x60 ?x370 ?x370 ?x370 x x x v) (* ?x60 x v v v))))
 (let ((?x407 (+ (* ?x370 ?x370 x x) (* ?x370 x x x))))
 (let (($x543 (or (not (= (* ?x407 ?x395 ?x368 (+ ?x89 ?x61 ?x233 ?x105)) 0)) (not (= (* ?x335 ?x384 ?x334 (+ ?x89 ?x362 ?x45 ?x105)) 0)))))
 (let (($x688 (and (= (+ ?x89 (* x u) (* y v) ?x105) 0) $x543)))
 (let ((?x62 (- y x)))
 (let ((?x74 (+ (* ?x60 v x x x ?x62 ?x62 ?x62) (* ?x60 v v v x))))
 (let ((?x68 (- (* (- 1) ?x60 ?x60 v v v ?x62 ?x62 ?x62) (* ?x60 ?x60 ?x60 x ?x62 ?x62))))
 (let ((?x75 (* (- (+ (* (- 1) u00 x00) ?x61 (* v ?x62)) ?x38) ?x68 (+ (* x x ?x62 ?x62) (* x x x ?x62)) ?x74)))
 (let ((?x42 (- x y)))
 (let ((?x56 (+ (* u ?x44 ?x42 ?x42 ?x42 y y y) (* u ?x44 ?x44 ?x44 ?x42))))
 (let ((?x50 (- (* (- 1) u u ?x44 ?x44 ?x44 y y y) (* u u u ?x42 y y))))
 (let ((?x57 (* (- (+ (* (- 1) u00 x00) (* u ?x42) ?x45) ?x38) ?x50 (+ (* ?x42 ?x42 y y) (* ?x42 ?x42 ?x42 y)) ?x56)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x79 (and $x41 (or (not (= ?x57 0)) (not (= ?x75 0))))))
 (rewrite (= $x79 $x688)))))))))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x401 (mp (mp @x81 (quant-intro (proof-bind ?x359) (= $x80 $x257)) $x257) (rewrite (= $x257 $x257)) $x257)))
 (let ((@x839 (mp (mp @x401 (quant-intro (proof-bind ?x189) (= $x257 $x776)) $x776) (quant-intro (proof-bind ?x378) (= $x776 $x355)) $x355)))
 (let ((@x1406 (mp~ (mp @x839 (quant-intro (proof-bind ?x234) (= $x355 $x336)) $x336) (sk (~ $x336 $x1403)) $x1403)))
 (let ((@x1471 (mp @x1406 (rewrite (= $x1403 $x1484)) $x1484)))
 (let ((@x1426 (and-elim @x1471 $x1418)))
 (let ((@x1483 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1418) $x1409)) @x1426 $x1409)))
 (let (($x1408 (<= ?x1413 0)))
 (let ((@x1480 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1418) $x1408)) @x1426 $x1408)))
 (let (($x1441 (not (<= ?x1465 0))))
 (let (($x1420 (>= ?x1465 0)))
 (let (($x1414 (>= ?x1431 0)))
 (let (($x1411 (<= ?x1431 0)))
 (let ((@x1446 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1429 (not $x1411) (not $x1414))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1411)) @x1480 @x1483 false) $x1411) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1414)) @x1480 @x1483 false) $x1414) $x1429)))
 (let ((@x1448 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1469 $x1441 (not $x1420))) (unit-resolution (and-elim @x1471 $x1467) @x1446 $x1464) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1420)) @x1480 @x1483 false) $x1420) $x1441)))
 ((_ th-lemma arith farkas 1 1 1) @x1448 @x1480 @x1483 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        35
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             552
 :arith-nonlinear-bounds    18
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 80
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.86
 :memory                    3.27
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1267729
 :num-checks                1
 :propagations              14
 :rlimit-count              6416
 :time                      0.01
 :total-time                0.01)
