unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(proof
(let ((?x48 (to_real z00)))
 (let ((?x199 (* (- 1.0) ?x48)))
 (let ((?x781 (to_real z!0)))
 (let ((?x1024 (to_real x!2)))
 (let ((?x719 (to_real y!1)))
 (let ((?x672 (* ?x719 ?x1024)))
 (let ((?x112 (to_real y00)))
 (let ((?x108 (to_real x00)))
 (let ((?x113 (* ?x108 ?x112)))
 (let ((?x119 (* (- 1.0) ?x113)))
 (let ((?x135 (+ ?x119 ?x672 ?x781 ?x199)))
 (let (($x412 (>= ?x135 0.0)))
 (let ((?x439 (+ (* (- 1.0) (to_real (* x00 y00))) ?x113)))
 (let (($x440 (<= ?x439 0.0)))
 (let (($x351 (= 0.0 ?x439)))
 (let ((@x452 (symm (commutativity (= $x351 (= ?x439 0.0))) (= (= ?x439 0.0) $x351))))
 (let ((@x460 (mp ((_ th-lemma arith) (= ?x439 0.0)) @x452 $x351)))
 (let ((?x417 (+ ?x672 (* (- 1.0) (to_real (* x!2 y!1))))))
 (let (($x428 (>= ?x417 0.0)))
 (let (($x302 (= 0.0 ?x417)))
 (let ((@x129 (symm (commutativity (= $x302 (= ?x417 0.0))) (= (= ?x417 0.0) $x302))))
 (let ((@x592 (mp ((_ th-lemma arith) (= ?x417 0.0)) @x129 $x302)))
 (let ((?x86 (* x00 y00)))
 (let ((?x730 (+ z00 ?x86 (* (- 1) z!0) (* (- 1) (* x!2 y!1)))))
 (let (($x345 (<= ?x730 0)))
 (let (($x674 (= 0 ?x730)))
 (let ((@x666 (symm (commutativity (= $x674 (= ?x730 0))) (= (= ?x730 0) $x674))))
 (let (($x1036 (= ?x730 0)))
 (let ((?x379 (* (- 4.0) (* ?x1024 ?x1024 ?x1024 ?x1024 ?x1024))))
 (let ((?x696 (* (- (/ 5.0 4.0)) (* ?x1024 ?x1024 ?x1024))))
 (let ((?x92 (+ (* (/ 5.0 4.0) (* ?x719 ?x719 ?x1024 ?x1024 ?x1024)) (* (- (/ 7.0 4.0)) (* ?x719 ?x781 ?x781 ?x1024)) (* (- (/ 1.0 2.0)) (* ?x719 ?x719 ?x719 ?x781 ?x1024 ?x1024)) (* (/ 1.0 4.0) (* ?x719 ?x1024 ?x1024 ?x1024)) (* (- (/ 1.0 4.0)) (* ?x719 ?x719 ?x719 ?x1024 ?x1024 ?x1024)) (* (- (/ 1.0 2.0)) (* ?x781 ?x1024 ?x1024)) (* (- (/ 3.0 2.0)) (* ?x719 ?x781 ?x1024 ?x1024)) (* (/ 5.0 2.0) (* ?x719 ?x719 ?x781 ?x1024 ?x1024)) (* (/ 5.0 4.0) (* ?x719 ?x719 ?x781 ?x781 ?x1024)) (* (/ 3.0 4.0) (* ?x781 ?x781 ?x1024)) (* 4.0 (* ?x719 ?x1024 ?x1024 ?x1024 ?x1024 ?x1024)) (* (- 8.0) (* ?x781 ?x1024 ?x1024 ?x1024 ?x1024)) (* (- 4.0) (* ?x781 ?x781 ?x1024 ?x1024 ?x1024)) (* 8.0 (* ?x719 ?x781 ?x1024 ?x1024 ?x1024 ?x1024)) ?x696 ?x379 (* 4.0 (* ?x719 ?x781 ?x781 ?x1024 ?x1024 ?x1024)) (* (- (/ 1.0 4.0)) (* ?x719 ?x719 ?x719 ?x781 ?x781 ?x1024)))))
 (let (($x126 (= (* ?x92 (+ ?x199 ?x119 ?x672 ?x781)) 0.0)))
 (let (($x127 (not $x126)))
 (let ((?x478 (+ (* (/ 1.0 4.0) (* ?x719 ?x719 ?x719 ?x781 ?x781 ?x781 ?x1024)) (* (- (/ 1.0 4.0)) (* ?x108 ?x112 ?x719 ?x719 ?x719 ?x781 ?x781 ?x1024)) (* (- 2.0) (* ?x719 ?x719 ?x781 ?x1024 ?x1024 ?x1024)) (* (- 2.0) (* ?x719 ?x781 ?x781 ?x1024 ?x1024)) (* 2.0 (* ?x108 ?x112 ?x719 ?x781 ?x1024 ?x1024)) (* 2.0 (* ?x48 ?x719 ?x781 ?x1024 ?x1024)) (* (- (/ 1.0 2.0)) (* ?x719 ?x719 ?x781 ?x781 ?x781 ?x1024)) (* (/ 1.0 2.0) (* ?x48 ?x719 ?x719 ?x781 ?x781 ?x1024)) (* (/ 1.0 2.0) (* ?x108 ?x112 ?x719 ?x719 ?x781 ?x781 ?x1024)) (* (- (/ 1.0 2.0)) (* ?x719 ?x719 ?x719 ?x781 ?x781 ?x1024 ?x1024)) (* (- (/ 1.0 4.0)) (* ?x48 ?x719 ?x719 ?x719 ?x781 ?x781 ?x1024)) (* (/ 1.0 4.0) (* ?x719 ?x719 ?x719 ?x719 ?x781 ?x781 ?x1024 ?x1024)) (* (- 4.0) (* ?x719 ?x781 ?x781 ?x781 ?x1024 ?x1024 ?x1024)) (* 4.0 (* ?x48 ?x719 ?x781 ?x781 ?x1024 ?x1024 ?x1024)) (* 4.0 (* ?x108 ?x112 ?x719 ?x781 ?x781 ?x1024 ?x1024 ?x1024)) (* (- 4.0) (* ?x719 ?x719 ?x781 ?x781 ?x1024 ?x1024 ?x1024 ?x1024)))))
 (let (($x95 (= ?x478 0.0)))
 (let (($x131 (not $x95)))
 (let (($x133 (or $x131 $x127)))
 (let (($x700 (and $x1036 $x133)))
 (let ((?x391 (+ ?x696 (* (/ 1.0 4.0) (* ?x1024 ?x1024 ?x1024 ?x719)) (* (/ 5.0 4.0) (* ?x1024 ?x1024 ?x1024 ?x719 ?x719)) (* (- (/ 1.0 4.0)) (* ?x1024 ?x1024 ?x1024 ?x719 ?x719 ?x719)) (* (- (/ 1.0 2.0)) (* ?x1024 ?x1024 ?x781)) (* (- (/ 3.0 2.0)) (* ?x1024 ?x1024 ?x781 ?x719)) (* (/ 5.0 2.0) (* ?x1024 ?x1024 ?x781 ?x719 ?x719)) (* (- (/ 1.0 2.0)) (* ?x1024 ?x1024 ?x781 ?x719 ?x719 ?x719)) (* (/ 3.0 4.0) (* ?x1024 ?x781 ?x781)) (* (- (/ 7.0 4.0)) (* ?x1024 ?x781 ?x781 ?x719)) (* (/ 5.0 4.0) (* ?x1024 ?x781 ?x781 ?x719 ?x719)) (* (- (/ 1.0 4.0)) (* ?x1024 ?x781 ?x781 ?x719 ?x719 ?x719)) ?x379 (* 4.0 (* ?x1024 ?x1024 ?x1024 ?x1024 ?x1024 ?x719)) (* (- 8.0) (* ?x1024 ?x1024 ?x1024 ?x1024 ?x781)) (* 8.0 (* ?x1024 ?x1024 ?x1024 ?x1024 ?x781 ?x719)) (* (- 4.0) (* ?x1024 ?x1024 ?x1024 ?x781 ?x781)) (* 4.0 (* ?x1024 ?x1024 ?x1024 ?x781 ?x781 ?x719)))))
 (let ((?x749 (+ (* 2.0 (* ?x1024 ?x1024 ?x781 ?x781 ?x719)) (* (- 2.0) (* ?x1024 ?x1024 ?x781 ?x48 ?x719)) (* (- 2.0) (* ?x1024 ?x1024 ?x781 ?x719 ?x108 ?x112)) (* 2.0 (* ?x1024 ?x1024 ?x1024 ?x781 ?x719 ?x719)) (* (/ 1.0 2.0) (* ?x1024 ?x781 ?x781 ?x781 ?x719 ?x719)) (* (- (/ 1.0 2.0)) (* ?x1024 ?x781 ?x781 ?x48 ?x719 ?x719)) (* (- (/ 1.0 2.0)) (* ?x1024 ?x781 ?x781 ?x719 ?x719 ?x108 ?x112)) (* (/ 1.0 2.0) (* ?x1024 ?x1024 ?x781 ?x781 ?x719 ?x719 ?x719)) (* (- (/ 1.0 4.0)) (* ?x1024 ?x781 ?x781 ?x781 ?x719 ?x719 ?x719)) (* (/ 1.0 4.0) (* ?x1024 ?x781 ?x781 ?x48 ?x719 ?x719 ?x719)) (* (/ 1.0 4.0) (* ?x1024 ?x781 ?x781 ?x719 ?x719 ?x719 ?x108 ?x112)) (* (- (/ 1.0 4.0)) (* ?x1024 ?x1024 ?x781 ?x781 ?x719 ?x719 ?x719 ?x719)) (* 4.0 (* ?x1024 ?x1024 ?x1024 ?x781 ?x781 ?x781 ?x719)) (* (- 4.0) (* ?x1024 ?x1024 ?x1024 ?x781 ?x781 ?x48 ?x719)) (* (- 4.0) (* ?x1024 ?x1024 ?x1024 ?x781 ?x781 ?x719 ?x108 ?x112)) (* 4.0 (* ?x1024 ?x1024 ?x1024 ?x1024 ?x781 ?x781 ?x719 ?x719)))))
 (let (($x344 (or (not (= ?x749 0.0)) (not (= (* ?x391 (+ ?x781 ?x199 ?x119 (* ?x1024 ?x719))) 0.0)))))
 (let (($x392 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x86)) 0) $x344)))
 (let (($x216 (exists ((x Int) (y Int) (z Int) )(! (let ((?x112 (to_real y00)))
 (let ((?x108 (to_real x00)))
 (let ((?x113 (* ?x108 ?x112)))
 (let ((?x119 (* (- 1.0) ?x113)))
 (let ((?x48 (to_real z00)))
 (let ((?x199 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x728 (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x62))))
 (let ((?x725 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x705 (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x62))))
 (let ((?x722 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x718 (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x62))))
 (let ((?x714 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x574 (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x589 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x426 (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x43 ?x62 ?x62 ?x62))))
 (let ((?x220 (+ (* (- (/ 5.0 4.0)) (* ?x43 ?x43 ?x43)) (* (/ 1.0 4.0) (* ?x43 ?x43 ?x43 ?x62)) (* (/ 5.0 4.0) (* ?x43 ?x43 ?x43 ?x62 ?x62)) ?x426 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x62)) (* (/ 5.0 2.0) (* ?x43 ?x43 ?x46 ?x62 ?x62)) ?x589 (* (/ 3.0 4.0) (* ?x43 ?x46 ?x46)) (* (- (/ 7.0 4.0)) (* ?x43 ?x46 ?x46 ?x62)) (* (/ 5.0 4.0) (* ?x43 ?x46 ?x46 ?x62 ?x62)) ?x574 ?x714 ?x718 ?x722 ?x705 ?x725 ?x728)))
 (let ((?x1034 (+ (* 2.0 (* ?x43 ?x43 ?x46 ?x46 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x46 ?x48 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x46 ?x62 ?x108 ?x112)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x108 ?x112)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x48 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x62 ?x108 ?x112)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x48 ?x62)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x108 ?x112)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62)))))
 (let (($x331 (not (= ?x1034 0.0))))
 (let (($x134 (or $x331 (not (= (* ?x220 (+ ?x46 ?x199 ?x119 (* ?x43 ?x62))) 0.0)))))
 (let (($x114 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x114 $x134)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x1005 (exists ((x Int) (y Int) (z Int) )(! (let ((?x708 (* 2.0 (* (to_real z) (to_real y) (to_real x) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x732 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62 ?x43)) (* 4.0 (* ?x46 ?x46 ?x62 ?x43 ?x43 ?x43)) ?x708)))
 (let ((?x48 (to_real z00)))
 (let ((?x199 (* (- 1.0) ?x48)))
 (let ((?x112 (to_real y00)))
 (let ((?x108 (to_real x00)))
 (let ((?x113 (* ?x108 ?x112)))
 (let ((?x119 (* (- 1.0) ?x113)))
 (let ((?x292 (+ ?x119 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x199)))
 (let ((?x164 (* (/ 1.0 2.0) ?x62)))
 (let ((?x274 (+ (- (/ 1.0 2.0)) ?x164)))
 (let ((?x297 (+ ?x46 ?x43)))
 (let ((?x650 (+ (* 2.0 (* ?x43 ?x297 ?x297 ?x274 ?x274)) (* (- 2.0) (* ?x43 ?x297 ?x297 ?x274 ?x274 ?x274)) (* 8.0 (* ?x43 ?x43 ?x43 ?x297 ?x297 ?x274)) (* 4.0 (* ?x43 ?x43 ?x297 ?x274)))))
 (let (($x324 (or (not (= (* ?x650 ?x292) 0.0)) (not (= (* (+ ?x119 (* ?x62 ?x43) ?x46 ?x199) ?x732) 0.0)))))
 (let (($x269 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x269 $x324))))))))))))))))))) :qid k!28))
 ))
 (let ((?x322 (lambda ((x Int) (y Int) (z Int) )(let ((?x112 (to_real y00)))
 (let ((?x108 (to_real x00)))
 (let ((?x113 (* ?x108 ?x112)))
 (let ((?x119 (* (- 1.0) ?x113)))
 (let ((?x48 (to_real z00)))
 (let ((?x199 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x62 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x728 (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x62))))
 (let ((?x725 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x705 (* 8.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x62))))
 (let ((?x722 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x718 (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x62))))
 (let ((?x714 (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x574 (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x589 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x62 ?x62 ?x62))))
 (let ((?x426 (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x43 ?x62 ?x62 ?x62))))
 (let ((?x220 (+ (* (- (/ 5.0 4.0)) (* ?x43 ?x43 ?x43)) (* (/ 1.0 4.0) (* ?x43 ?x43 ?x43 ?x62)) (* (/ 5.0 4.0) (* ?x43 ?x43 ?x43 ?x62 ?x62)) ?x426 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x62)) (* (/ 5.0 2.0) (* ?x43 ?x43 ?x46 ?x62 ?x62)) ?x589 (* (/ 3.0 4.0) (* ?x43 ?x46 ?x46)) (* (- (/ 7.0 4.0)) (* ?x43 ?x46 ?x46 ?x62)) (* (/ 5.0 4.0) (* ?x43 ?x46 ?x46 ?x62 ?x62)) ?x574 ?x714 ?x718 ?x722 ?x705 ?x725 ?x728)))
 (let ((?x1034 (+ (* 2.0 (* ?x43 ?x43 ?x46 ?x46 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x46 ?x48 ?x62)) (* (- 2.0) (* ?x43 ?x43 ?x46 ?x62 ?x108 ?x112)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x108 ?x112)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x46 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x48 ?x62 ?x62 ?x62)) (* (/ 1.0 4.0) (* ?x43 ?x46 ?x46 ?x62 ?x62 ?x62 ?x108 ?x112)) (* (- (/ 1.0 4.0)) (* ?x43 ?x43 ?x46 ?x46 ?x62 ?x62 ?x62 ?x62)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x62)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x48 ?x62)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x108 ?x112)) (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x62 ?x62)))))
 (let (($x331 (not (= ?x1034 0.0))))
 (let (($x134 (or $x331 (not (= (* ?x220 (+ ?x46 ?x199 ?x119 (* ?x43 ?x62))) 0.0)))))
 (let (($x114 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x1016 (and $x114 $x134)))
 (let ((?x732 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62 ?x43)) (* 4.0 (* ?x46 ?x46 ?x62 ?x43 ?x43 ?x43)) (* 2.0 (* ?x46 ?x62 ?x43 ?x43)))))
 (let ((?x292 (+ ?x119 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x199)))
 (let ((?x164 (* (/ 1.0 2.0) ?x62)))
 (let ((?x274 (+ (- (/ 1.0 2.0)) ?x164)))
 (let ((?x297 (+ ?x46 ?x43)))
 (let ((?x650 (+ (* 2.0 (* ?x43 ?x297 ?x297 ?x274 ?x274)) (* (- 2.0) (* ?x43 ?x297 ?x297 ?x274 ?x274 ?x274)) (* 8.0 (* ?x43 ?x43 ?x43 ?x297 ?x297 ?x274)) (* 4.0 (* ?x43 ?x43 ?x297 ?x274)))))
 (let (($x324 (or (not (= (* ?x650 ?x292) 0.0)) (not (= (* (+ ?x119 (* ?x62 ?x43) ?x46 ?x199) ?x732) 0.0)))))
 (let (($x269 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x769 (and $x269 $x324)))
 (rewrite (= $x769 $x1016))))))))))))))))))))))))))))))))))))
 ))
 (let (($x291 (exists ((x Int) (y Int) (z Int) )(! (let ((?x708 (* 2.0 (* (to_real z) (to_real y) (to_real x) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x732 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62 ?x43)) (* 4.0 (* ?x46 ?x46 ?x62 ?x43 ?x43 ?x43)) ?x708)))
 (let ((?x48 (to_real z00)))
 (let ((?x199 (* (- 1.0) ?x48)))
 (let ((?x112 (to_real y00)))
 (let ((?x108 (to_real x00)))
 (let ((?x113 (* ?x108 ?x112)))
 (let ((?x119 (* (- 1.0) ?x113)))
 (let ((?x292 (+ ?x119 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x199)))
 (let ((?x164 (* (/ 1.0 2.0) ?x62)))
 (let ((?x274 (+ (- (/ 1.0 2.0)) ?x164)))
 (let ((?x297 (+ ?x46 ?x43)))
 (let ((?x650 (+ (* 2.0 (* ?x43 ?x297 ?x297 ?x274 ?x274)) (* (- 2.0) (* ?x43 ?x297 ?x297 ?x274 ?x274 ?x274)) (* 8.0 (* ?x43 ?x43 ?x43 ?x297 ?x297 ?x274)) (* 4.0 (* ?x43 ?x43 ?x297 ?x274)))))
 (let (($x324 (or (not (= (* ?x650 ?x292) 0.0)) (not (= (* (+ ?x119 (* ?x62 ?x43) ?x46 ?x199) ?x732) 0.0)))))
 (let (($x771 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x771 $x324))))))))))))))))))) :qid k!28))
 ))
 (let ((?x809 (lambda ((x Int) (y Int) (z Int) )(let ((?x708 (* 2.0 (* (to_real z) (to_real y) (to_real x) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x732 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62 ?x43)) (* 4.0 (* ?x46 ?x46 ?x62 ?x43 ?x43 ?x43)) ?x708)))
 (let ((?x48 (to_real z00)))
 (let ((?x199 (* (- 1.0) ?x48)))
 (let ((?x112 (to_real y00)))
 (let ((?x108 (to_real x00)))
 (let ((?x113 (* ?x108 ?x112)))
 (let ((?x119 (* (- 1.0) ?x113)))
 (let ((?x292 (+ ?x119 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x199)))
 (let ((?x164 (* (/ 1.0 2.0) ?x62)))
 (let ((?x274 (+ (- (/ 1.0 2.0)) ?x164)))
 (let ((?x297 (+ ?x46 ?x43)))
 (let ((?x650 (+ (* 2.0 (* ?x43 ?x297 ?x297 ?x274 ?x274)) (* (- 2.0) (* ?x43 ?x297 ?x297 ?x274 ?x274 ?x274)) (* 8.0 (* ?x43 ?x43 ?x43 ?x297 ?x297 ?x274)) (* 4.0 (* ?x43 ?x43 ?x297 ?x274)))))
 (let (($x324 (or (not (= (* ?x650 ?x292) 0.0)) (not (= (* (+ ?x119 (* ?x62 ?x43) ?x46 ?x199) ?x732) 0.0)))))
 (let (($x269 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x769 (and $x269 $x324)))
 (let (($x771 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x624 (and $x771 $x324)))
 (rewrite (= $x624 $x769))))))))))))))))))))))))
 ))
 (let (($x78 (exists ((x Int) (y Int) (z Int) )(! (let ((?x59 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x62 (to_real y)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x69 (- (* ?x41 ?x43 ?x63 ?x63 ?x46 ?x46) (* ?x41 ?x43 ?x63 ?x63 ?x63 ?x46 ?x46))))
 (let ((?x72 (+ ?x69 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x63 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x63 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x54 (- (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51) (* ?x41 ?x43 ?x42 ?x42 ?x42 ?x51 ?x51))))
 (let ((?x57 (+ ?x54 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x51 ?x51) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x61 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x57) ?x59))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x61 (not (= (* ?x66 ?x72) ?x59))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x280 (lambda ((x Int) (y Int) (z Int) )(let ((?x708 (* 2.0 (* (to_real z) (to_real y) (to_real x) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x62 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x732 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x62 ?x62 ?x43)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x62 ?x62 ?x62 ?x43)) (* 4.0 (* ?x46 ?x46 ?x62 ?x43 ?x43 ?x43)) ?x708)))
 (let ((?x48 (to_real z00)))
 (let ((?x199 (* (- 1.0) ?x48)))
 (let ((?x112 (to_real y00)))
 (let ((?x108 (to_real x00)))
 (let ((?x113 (* ?x108 ?x112)))
 (let ((?x119 (* (- 1.0) ?x113)))
 (let ((?x292 (+ ?x119 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x62)))) ?x46 ?x43 ?x199)))
 (let ((?x164 (* (/ 1.0 2.0) ?x62)))
 (let ((?x274 (+ (- (/ 1.0 2.0)) ?x164)))
 (let ((?x297 (+ ?x46 ?x43)))
 (let ((?x650 (+ (* 2.0 (* ?x43 ?x297 ?x297 ?x274 ?x274)) (* (- 2.0) (* ?x43 ?x297 ?x297 ?x274 ?x274 ?x274)) (* 8.0 (* ?x43 ?x43 ?x43 ?x297 ?x297 ?x274)) (* 4.0 (* ?x43 ?x43 ?x297 ?x274)))))
 (let (($x324 (or (not (= (* ?x650 ?x292) 0.0)) (not (= (* (+ ?x119 (* ?x62 ?x43) ?x46 ?x199) ?x732) 0.0)))))
 (let (($x771 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x624 (and $x771 $x324)))
 (let ((?x59 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x41)))
 (let ((?x69 (- (* ?x41 ?x43 ?x63 ?x63 ?x46 ?x46) (* ?x41 ?x43 ?x63 ?x63 ?x63 ?x46 ?x46))))
 (let ((?x72 (+ ?x69 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x63 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x63 ?x46))))
 (let ((?x66 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x63) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x54 (- (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51) (* ?x41 ?x43 ?x42 ?x42 ?x42 ?x51 ?x51))))
 (let ((?x57 (+ ?x54 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x51 ?x51) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x61 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x57) ?x59))))
 (let (($x77 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x61 (not (= (* ?x66 ?x72) ?x59))))))
 (rewrite (= $x77 $x624))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x79 (asserted $x78)))
 (let ((@x301 (mp (mp @x79 (quant-intro (proof-bind ?x280) (= $x78 $x291)) $x291) (rewrite (= $x291 $x291)) $x291)))
 (let ((@x139 (mp (mp @x301 (quant-intro (proof-bind ?x809) (= $x291 $x1005)) $x1005) (quant-intro (proof-bind ?x322) (= $x1005 $x216)) $x216)))
 (let ((@x130 (mp (mp~ @x139 (sk (~ $x216 $x392)) $x392) (rewrite (= $x392 $x700)) $x700)))
 (let ((@x656 (mp (and-elim @x130 $x1036) @x666 $x674)))
 (let ((@x686 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x674) $x345)) @x656 $x345) (hypothesis (not $x412)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x302) $x428)) @x592 $x428) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x440)) @x460 $x440) false)))
 (let ((@x734 (lemma @x686 $x412)))
 (let (($x905 (<= ?x135 0.0)))
 (let (($x446 (>= ?x439 0.0)))
 (let (($x425 (<= ?x417 0.0)))
 (let (($x397 (>= ?x730 0)))
 (let ((@x678 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x674) $x397)) @x656 $x397) (hypothesis (not $x905)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x302) $x425)) @x592 $x425) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x446)) @x460 $x446) false)))
 (let ((@x654 (lemma @x678 $x905)))
 (let (($x404 (>= ?x478 0.0)))
 (let (($x506 (not $x404)))
 (let (($x398 (<= ?x478 0.0)))
 (let ((@x98 (unit-resolution ((_ th-lemma arith) (or (not $x905) (not $x412) $x398)) (hypothesis (not $x398)) @x654 @x734 false)))
 (let (($x675 (= 0.0 ?x478)))
 (let (($x122 (not $x675)))
 (let ((@x536 (monotonicity (symm (commutativity (= $x675 $x95)) (= $x95 $x675)) (= $x131 $x122))))
 (let (($x903 (= ?x135 0.0)))
 (let ((@x1023 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x903 (not $x905) (not $x412))) @x654 @x734 $x903)))
 (let (($x780 (or (not $x903) $x126)))
 (let ((@x140 (unit-resolution ((_ th-lemma arith) $x780) (hypothesis $x127) (hypothesis $x903) false)))
 (let ((@x308 (unit-resolution (and-elim @x130 $x133) (unit-resolution (lemma @x140 $x780) @x1023 $x126) $x131)))
 (let ((@x169 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x675 (not $x398) $x506)) (mp @x308 @x536 $x122) (or (not $x398) $x506))))
 (unit-resolution ((_ th-lemma arith) (or (not $x905) (not $x412) $x404)) (unit-resolution @x169 (lemma @x98 $x398) $x506) @x654 @x734 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      34
 :arith-eq-adapter               26
 :arith-bound-propagations-cheap 19
 :arith-conflicts                48
 :arith-diseq                    25
 :arith-gcd-calls                5
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    35
 :arith-make-feasible            39
 :arith-max-columns              73
 :arith-max-rows                 16
 :arith-nla-explanations         73
 :arith-nla-lemmas               45
 :arith-patches                  5
 :arith-patches-success          5
 :arith-propagations             19
 :arith-upper                    42
 :conflicts                      9
 :decisions                      48
 :del-clause                     105
 :final-checks                   28
 :max-memory                     4.19
 :memory                         3.17
 :mk-bool-var                    128
 :mk-clause                      126
 :num-allocs                     2811751
 :num-checks                     1
 :propagations                   60
 :rlimit-count                   5948
 :time                           0.02
 :total-time                     0.02)
