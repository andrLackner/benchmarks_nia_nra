unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x244 (* (- 6) n!0)))
 (let ((?x516 (+ m!1 ?x244)))
 (let (($x306 (<= ?x516 6)))
 (let (($x492 (= ?x516 6)))
 (let ((?x98 (* (- 1) (* k!2 k!2 k!2 k!2))))
 (let ((?x288 (+ k!2 c!3)))
 (let ((?x99 (+ k!2 m!1)))
 (let ((?x124 (+ 6 m!1)))
 (let ((?x227 (+ 1 n!0)))
 (let ((?x481 (* (- 1) (* k!2 k!2 k!2 m!1))))
 (let ((?x460 (+ ?x481 (* (- 1) (* m!1 c!3 c!3 c!3)) (* (- 3) (* k!2 k!2 m!1 c!3)) (* (- 1) (* ?x227 ?x227 ?x227 ?x99 ?x288 ?x288 ?x288)) (* ?x227 ?x227 ?x124 ?x99 ?x99 ?x99 ?x288 ?x288) (* (- 3) (* k!2 k!2 c!3 c!3)) (* (- 1) (* k!2 c!3 c!3 c!3)) (* (- 3) (* k!2 m!1 c!3 c!3)) ?x98 (* (- 3) (* k!2 k!2 k!2 c!3)))))
 (let ((?x237 (+ (- 6) m!1 ?x244)))
 (let ((?x467 (* ?x237 ?x460)))
 (let (($x189 (= ?x467 0)))
 (let (($x469 (not $x189)))
 (let (($x230 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1)))
 (let (($x490 (= (+ (* k!2 n!0) (* (- 1) k!2) (* 2 n!0) (* (- 3) c!3)) (- 1))))
 (let ((?x245 (* (- 1) (* k!2 k!2))))
 (let ((?x241 (* 18 c!3)))
 (let ((?x362 (* (- 9) n!0)))
 (let ((?x517 (* 5 k!2)))
 (let (($x479 (and $x492 (= (+ ?x517 ?x362 (* 9 (* n!0 c!3)) ?x241 ?x245) 4) $x490 $x230 $x469)))
 (let ((?x236 (+ c!3 k!2)))
 (let ((?x462 (+ (* ?x227 ?x227 ?x124 ?x99 ?x99 ?x99 ?x236 ?x236) (* (- 1) (* ?x227 ?x227 ?x227 ?x99 ?x236 ?x236 ?x236)) ?x98 (* (- 3) (* c!3 k!2 k!2 k!2)) (* (- 1) (* c!3 c!3 c!3 m!1)) (* (- 3) (* c!3 c!3 k!2 m!1)) ?x481 (* (- 3) (* c!3 k!2 k!2 m!1)) (* (- 1) (* c!3 c!3 c!3 k!2)) (* (- 3) (* c!3 c!3 k!2 k!2)))))
 (let (($x299 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x357 (and $x492 (= (+ ?x241 ?x517 ?x362 ?x245 (* 9 (* c!3 n!0))) 4) $x299 $x230 (not (= (* ?x237 ?x462) 0)))))
 (let (($x477 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x519 (* (- 3) (* c c k k))))
 (let ((?x505 (* (- 1) (* c c c k))))
 (let ((?x514 (* (- 3) (* c k k m))))
 (let ((?x503 (* (- 1) (* k k k m))))
 (let ((?x513 (* (- 3) (* c c k m))))
 (let ((?x501 (* (- 1) (* c c c m))))
 (let ((?x508 (* (- 3) (* c k k k))))
 (let ((?x499 (* (- 1) (* k k k k))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x218 (* (- 1) (* ?x317 ?x317 ?x317 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x361 (+ 6 m)))
 (let ((?x109 (* ?x317 ?x317 ?x361 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x235 (= (* ?x117 (+ ?x109 ?x218 ?x499 ?x508 ?x501 ?x513 ?x503 ?x514 ?x505 ?x519)) 0)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 $x212 $x264 $x302 (not $x235)))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x177 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x123 (* (- 1) (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x109 (* ?x317 ?x317 ?x361 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x218 (* (- 1) (* ?x317 ?x317 ?x317 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x132 (not (= (* ?x117 (+ ?x218 ?x109 ?x123)) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x157 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x157 $x252 $x132))))))))))))))))))) :qid k!34))
 ))
 (let ((?x187 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x519 (* (- 3) (* c c k k))))
 (let ((?x505 (* (- 1) (* c c c k))))
 (let ((?x514 (* (- 3) (* c k k m))))
 (let ((?x503 (* (- 1) (* k k k m))))
 (let ((?x513 (* (- 3) (* c c k m))))
 (let ((?x501 (* (- 1) (* c c c m))))
 (let ((?x508 (* (- 3) (* c k k k))))
 (let ((?x499 (* (- 1) (* k k k k))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x218 (* (- 1) (* ?x317 ?x317 ?x317 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x361 (+ 6 m)))
 (let ((?x109 (* ?x317 ?x317 ?x361 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x235 (= (* ?x117 (+ ?x109 ?x218 ?x499 ?x508 ?x501 ?x513 ?x503 ?x514 ?x505 ?x519)) 0)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x233 (and $x128 $x212 $x264 $x302 (not $x235))))
 (let (($x132 (not (= (* ?x117 (+ ?x218 ?x109 (* (- 1) (* ?x74 ?x73 ?x73 ?x73)))) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x157 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x96 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x157 $x252 $x132)))
 (rewrite (= $x96 $x233))))))))))))))))))))))))))))))))))
 ))
 (let (($x441 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x123 (* (- 1) (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x109 (* ?x317 ?x317 ?x361 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x218 (* (- 1) (* ?x317 ?x317 ?x317 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x132 (not (= (* ?x117 (+ ?x218 ?x109 ?x123)) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x291 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x118 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (and $x128 (= ?x118 (- 4)) $x291 $x252 $x132))))))))))))))))) :qid k!34))
 ))
 (let ((?x178 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x123 (* (- 1) (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x109 (* ?x317 ?x317 ?x361 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x218 (* (- 1) (* ?x317 ?x317 ?x317 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x132 (not (= (* ?x117 (+ ?x218 ?x109 ?x123)) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x157 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x96 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x157 $x252 $x132)))
 (let (($x291 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x118 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x211 (and $x128 (= ?x118 (- 4)) $x291 $x252 $x132)))
 (rewrite (= $x211 $x96))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x78 (+ (* (- 1) ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x74 (+ m 6) ?x69 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x78 (* ?x73 ?x73 ?x73 ?x74)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x108 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x123 (* (- 1) (* (+ k m) (+ c k) (+ c k) (+ c k)))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x361 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x109 (* ?x317 ?x317 ?x361 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x218 (* (- 1) (* ?x317 ?x317 ?x317 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x111 (* (- 6) n)))
 (let ((?x117 (+ (- 6) m ?x111)))
 (let (($x132 (not (= (* ?x117 (+ ?x218 ?x109 ?x123)) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x291 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x118 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (= (+ m ?x111) 6)))
 (let (($x211 (and $x128 (= ?x118 (- 4)) $x291 $x252 $x132)))
 (let ((?x69 (+ n 1)))
 (let ((?x78 (+ (* (- 1) ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x74 (+ m 6) ?x69 ?x69))))
 (let ((?x81 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x78 (* ?x73 ?x73 ?x73 ?x74)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x211)))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x443 (mp (mp @x87 (quant-intro (proof-bind ?x108) (= $x86 $x441)) $x441) (rewrite (= $x441 $x441)) $x441)))
 (let ((@x188 (mp (mp @x443 (quant-intro (proof-bind ?x178) (= $x441 $x177)) $x177) (quant-intro (proof-bind ?x187) (= $x177 $x477)) $x477)))
 (let ((@x250 (mp (mp~ @x188 (sk (~ $x477 $x357)) $x357) (rewrite (= $x357 $x479)) $x479)))
 (let ((@x175 (and-elim @x250 $x492)))
 (let ((@x476 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x492) $x306)) @x175 $x306)))
 (let (($x344 (>= ?x516 6)))
 (let ((@x206 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x492) $x344)) @x175 $x344)))
 (let (($x287 (not (<= ?x467 0))))
 (let (($x483 (>= ?x467 0)))
 (let ((@x166 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x189 $x287 (not $x483))) (and-elim @x250 $x469) (or $x287 (not $x483)))))
 (let ((@x278 (unit-resolution @x166 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x483)) @x206 @x476 false) $x483) $x287)))
 ((_ th-lemma arith farkas 1 1 1) @x278 @x206 @x476 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             144
 :arith-nonlinear-bounds    9
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      7
 :arith-tableau-max-columns 39
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.60
 :memory                    3.10
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1119822
 :num-checks                1
 :propagations              11
 :rlimit-count              2743
 :time                      0.01
 :total-time                0.03)
