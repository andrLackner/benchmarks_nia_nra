unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x578 (* (- 1) k!2)))
 (let ((?x1220 (+ (* 3 n!0) ?x578 (* 3 (* n!0 n!0)))))
 (let (($x983 (<= ?x1220 (- 1))))
 (let (($x1014 (= ?x1220 (- 1))))
 (let ((?x1087 (+ k!2 c!3)))
 (let ((?x1081 (+ 6 m!1)))
 (let ((?x549 (+ 1 n!0)))
 (let ((?x1039 (+ m!1 k!2)))
 (let ((?x689 (* k!2 k!2 k!2 k!2)))
 (let ((?x565 (* k!2 k!2)))
 (let ((?x1052 (* 4 ?x565)))
 (let ((?x287 (* (- 1) (* k!2 k!2 k!2))))
 (let ((?x1053 (* 4 (* m!1 m!1))))
 (let ((?x1061 (* (- 1) (* m!1 m!1 m!1))))
 (let ((?x113 (+ (* 3 (* ?x549 ?x549 ?x549 ?x549 ?x1081 ?x1087 ?x1087 ?x1087)) (* 3 (* ?x549 ?x549 ?x549 ?x1039 ?x1039 ?x1039 ?x1087)) (* 3 (* n!0 n!0 n!0 m!1 m!1)) (* 6 (* n!0 n!0 n!0 m!1 k!2)) (* 10 (* n!0 n!0 k!2 k!2)) (* (- 1) (* ?x549 ?x1039 ?x1039 ?x1039 ?x1039 ?x1087)) (* (- 1) (* ?x549 ?x549 ?x1081 ?x1039 ?x1087 ?x1087 ?x1087)) (* m!1 m!1 m!1 k!2) (* 3 (* n!0 n!0 n!0 k!2 k!2)) ?x1061 (* (- 2) (* n!0 m!1 m!1 m!1)) (* (- 3) (* m!1 k!2 k!2)) (* 3 (* ?x549 ?x549 ?x549 ?x1081 ?x1087 ?x1087 ?x1087)) ?x1053 (* 3 (* ?x549 ?x549 ?x1039 ?x1039 ?x1039 ?x1087)) (* (- 1) (* ?x549 ?x549 ?x1081 ?x1081 ?x1039 ?x1039 ?x1039 ?x1087)) ?x287 ?x1052 (* n!0 k!2 k!2 k!2 c!3) (* 11 (* n!0 k!2 k!2)) (* 11 (* n!0 m!1 m!1)) (* n!0 m!1 m!1 m!1 k!2) (* (- 3) (* n!0 n!0 m!1 k!2 k!2)) (* 3 (* ?x549 ?x549 ?x549 ?x549 ?x1039 ?x1039)) (* 3 (* n!0 m!1 k!2 k!2 k!2)) (* (- 1) (* n!0 n!0 k!2 k!2 k!2)) (* n!0 k!2 k!2 k!2 k!2) (* (- 3) (* n!0 n!0 m!1 m!1 k!2)) ?x689 (* 8 (* m!1 k!2)) (* (- 3) (* m!1 m!1 k!2)) (* 22 (* n!0 m!1 k!2)) (* (- 1) (* n!0 n!0 m!1 m!1 m!1)) (* 3 (* n!0 m!1 m!1 k!2 c!3)) (* 3 (* m!1 k!2 k!2 k!2)) (* k!2 k!2 k!2 c!3) (* (- 6) (* n!0 m!1 m!1 k!2)) (* 3 (* n!0 m!1 m!1 k!2 k!2)) (* n!0 m!1 m!1 m!1 c!3) (* 20 (* n!0 n!0 m!1 k!2)) (* 3 (* m!1 k!2 k!2 c!3)) (* 3 (* m!1 m!1 k!2 c!3)) (* 3 (* m!1 m!1 k!2 k!2)) (* 3 (* n!0 m!1 k!2 k!2 c!3)) (* m!1 m!1 m!1 c!3) (* (- 6) (* n!0 m!1 k!2 k!2)) (* (- 2) (* n!0 k!2 k!2 k!2)) (* ?x549 ?x549 ?x1081 ?x1081 ?x1039 ?x1039 ?x1087) (* 3 (* ?x549 ?x549 ?x549 ?x1081 ?x1081 ?x1039 ?x1039 ?x1087)) (* 3 (* ?x549 ?x549 ?x549 ?x549 ?x1081 ?x1081 ?x1039 ?x1039 ?x1087)) (* ?x549 ?x549 ?x1081 ?x1087 ?x1087 ?x1087) (* 10 (* n!0 n!0 m!1 m!1)))))
 (let (($x1119 (= ?x113 0)))
 (let (($x1040 (not $x1119)))
 (let ((?x164 (+ (* 2 n!0) (* n!0 k!2) ?x578 (* (- 3) c!3))))
 (let (($x177 (= ?x164 (- 1))))
 (let ((?x152 (+ (* 9 n!0) (* (- 9) (* n!0 c!3)) ?x565 (* (- 5) k!2) (* (- 18) c!3))))
 (let (($x256 (= ?x152 (- 4))))
 (let ((?x228 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x232 (= ?x228 (- 6))))
 (let (($x213 (and $x232 $x256 $x177 $x1014 $x1040)))
 (let ((?x503 (+ c!3 k!2)))
 (let ((?x1054 (+ k!2 m!1)))
 (let ((?x455 (+ ?x1052 (* (- 1) (* ?x549 ?x549 ?x1081 ?x1054 ?x503 ?x503 ?x503)) (* k!2 m!1 m!1 m!1) (* c!3 m!1 m!1 m!1) (* 3 (* c!3 k!2 k!2 m!1 n!0)) (* 3 (* k!2 k!2 m!1 m!1)) (* 3 (* c!3 k!2 m!1 m!1)) (* 3 (* k!2 k!2 k!2 m!1)) (* 3 (* c!3 k!2 k!2 m!1)) ?x689 (* c!3 k!2 k!2 k!2) (* k!2 m!1 m!1 m!1 n!0) (* 3 (* k!2 k!2 m!1 m!1 n!0)) (* c!3 m!1 m!1 m!1 n!0) (* 3 (* c!3 k!2 m!1 m!1 n!0)) (* 3 (* k!2 k!2 k!2 m!1 n!0)) (* 10 (* k!2 k!2 n!0 n!0)) (* 20 (* k!2 m!1 n!0 n!0)) (* 3 (* ?x549 ?x549 ?x549 ?x1054 ?x1054 ?x1054 ?x503)) (* 10 (* m!1 m!1 n!0 n!0)) (* 8 (* k!2 m!1)) (* k!2 k!2 k!2 k!2 n!0) (* c!3 k!2 k!2 k!2 n!0) ?x1053 (* 11 (* k!2 k!2 n!0)) (* 22 (* k!2 m!1 n!0)) (* 11 (* m!1 m!1 n!0)) (* 3 (* ?x549 ?x549 ?x1054 ?x1054 ?x1054 ?x503)) (* (- 1) (* ?x549 ?x549 ?x1081 ?x1081 ?x1054 ?x1054 ?x1054 ?x503)) (* 3 (* ?x549 ?x549 ?x549 ?x549 ?x1054 ?x1054)) (* (- 1) (* k!2 k!2 k!2 n!0 n!0)) (* (- 3) (* k!2 k!2 m!1 n!0 n!0)) (* (- 3) (* k!2 m!1 m!1 n!0 n!0)) (* (- 1) (* m!1 m!1 m!1 n!0 n!0)) ?x287 (* 3 (* ?x549 ?x549 ?x549 ?x1081 ?x503 ?x503 ?x503)) (* (- 3) (* k!2 k!2 m!1)) (* 3 (* ?x549 ?x549 ?x549 ?x549 ?x1081 ?x503 ?x503 ?x503)) (* (- 3) (* k!2 m!1 m!1)) ?x1061 (* (- 2) (* k!2 k!2 k!2 n!0)) (* (- 6) (* k!2 k!2 m!1 n!0)) (* (- 6) (* k!2 m!1 m!1 n!0)) (* ?x549 ?x549 ?x1081 ?x503 ?x503 ?x503) (* (- 2) (* m!1 m!1 m!1 n!0)) (* 3 (* ?x549 ?x549 ?x549 ?x1081 ?x1081 ?x1054 ?x1054 ?x503)) (* ?x549 ?x549 ?x1081 ?x1081 ?x1054 ?x1054 ?x503) (* (- 1) (* ?x549 ?x1054 ?x1054 ?x1054 ?x1054 ?x503)) (* 3 (* ?x549 ?x549 ?x549 ?x549 ?x1081 ?x1081 ?x1054 ?x1054 ?x503)) (* 3 (* k!2 k!2 n!0 n!0 n!0)) (* 6 (* k!2 m!1 n!0 n!0 n!0)) (* 3 (* m!1 m!1 n!0 n!0 n!0)))))
 (let (($x927 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x1074 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x565) (* 9 (* c!3 n!0)))))
 (let (($x305 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x1074 4) $x927 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x455 0)))))
 (let (($x633 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x1213 (* 3 (* m m n n n))))
 (let ((?x1207 (* 3 (* k k n n n))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x609 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x1148 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x998 (* (- 1) (* ?x315 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1108 (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68)))
 (let ((?x1115 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1142 (* (- 2) (* m m m n))))
 (let ((?x1042 (* ?x315 ?x315 ?x609 ?x68 ?x68 ?x68)))
 (let ((?x1139 (* (- 6) (* k m m n))))
 (let ((?x1136 (* (- 6) (* k k m n))))
 (let ((?x1133 (* (- 2) (* k k k n))))
 (let ((?x1113 (* (- 1) (* m m m))))
 (let ((?x1130 (* (- 3) (* k m m))))
 (let ((?x905 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x1127 (* (- 3) (* k k m))))
 (let ((?x972 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x1110 (* (- 1) (* k k k))))
 (let ((?x1109 (* (- 1) (* m m m n n))))
 (let ((?x1124 (* (- 3) (* k m m n n))))
 (let ((?x1121 (* (- 3) (* k k m n n))))
 (let ((?x1106 (* (- 1) (* k k k n n))))
 (let ((?x996 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x69 ?x69))))
 (let ((?x658 (* (- 1) (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x752 (* 3 (* ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x677 (* c k k k n)))
 (let ((?x674 (* k k k k n)))
 (let ((?x757 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x462 (* 3 (* k k k m n))))
 (let ((?x463 (* 3 (* c k m m n))))
 (let ((?x599 (* c m m m n)))
 (let ((?x460 (* 3 (* k k m m n))))
 (let ((?x596 (* k m m m n)))
 (let ((?x590 (* c k k k)))
 (let ((?x589 (* k k k k)))
 (let ((?x469 (* 3 (* c k k m))))
 (let ((?x466 (* 3 (* k k k m))))
 (let ((?x467 (* 3 (* c k m m))))
 (let ((?x464 (* 3 (* k k m m))))
 (let ((?x465 (* 3 (* c k k m n))))
 (let ((?x492 (* c m m m)))
 (let ((?x491 (* k m m m)))
 (let ((?x449 (* (- 1) (* ?x315 ?x315 ?x609 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x191 (+ (* 4 (* k k)) ?x449 ?x491 ?x492 ?x465 ?x464 ?x467 ?x466 ?x469 ?x589 ?x590 ?x596 ?x460 ?x599 ?x463 ?x462 (* 10 (* k k n n)) (* 20 (* k m n n)) ?x757 (* 10 (* m m n n)) (* 8 (* k m)) ?x674 ?x677 (* 4 (* m m)) (* 11 (* k k n)) (* 22 (* k m n)) (* 11 (* m m n)) ?x752 ?x658 ?x996 ?x1106 ?x1121 ?x1124 ?x1109 ?x1110 ?x972 ?x1127 ?x905 ?x1130 ?x1113 ?x1133 ?x1136 ?x1139 ?x1042 ?x1142 ?x1115 ?x1108 ?x998 ?x1148 ?x1207 (* 6 (* k m n n n)) ?x1213)))
 (let (($x307 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x269 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x220 (* (- 1) ?x49)))
 (let ((?x219 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x217 (= (+ ?x40 ?x44 ?x219 ?x220 (* 9 (* c n))) 4)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (and $x133 $x217 $x269 $x307 (not (= ?x191 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x175 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x609 (+ 6 m)))
 (let ((?x1042 (* ?x315 ?x315 ?x609 ?x68 ?x68 ?x68)))
 (let ((?x996 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x69 ?x69))))
 (let ((?x905 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x972 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x998 (* (- 1) (* ?x315 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x449 (* (- 1) (* ?x315 ?x315 ?x609 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1148 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1115 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1108 (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68)))
 (let ((?x658 (* (- 1) (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x757 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x752 (* 3 (* ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1056 (+ ?x752 ?x757 ?x658 ?x1108 ?x1115 ?x1148 (* ?x315 ?x69 ?x69 ?x69 ?x68) ?x449 ?x998 (* ?x315 ?x315 ?x69 ?x69) ?x972 ?x905 ?x996 (* (- 1) (* ?x315 ?x315 ?x69 ?x69 ?x69)) ?x1042 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69)))))
 (let (($x768 (not (= ?x1056 0))))
 (let (($x744 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x569 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x220 (* (- 1) ?x49)))
 (let ((?x219 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (and $x133 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x219 ?x220) 4) $x569 $x744 $x768))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x170 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x1213 (* 3 (* m m n n n))))
 (let ((?x1207 (* 3 (* k k n n n))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x609 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x1148 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x998 (* (- 1) (* ?x315 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1108 (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68)))
 (let ((?x1115 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1142 (* (- 2) (* m m m n))))
 (let ((?x1042 (* ?x315 ?x315 ?x609 ?x68 ?x68 ?x68)))
 (let ((?x1139 (* (- 6) (* k m m n))))
 (let ((?x1136 (* (- 6) (* k k m n))))
 (let ((?x1133 (* (- 2) (* k k k n))))
 (let ((?x1113 (* (- 1) (* m m m))))
 (let ((?x1130 (* (- 3) (* k m m))))
 (let ((?x905 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x1127 (* (- 3) (* k k m))))
 (let ((?x972 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x1110 (* (- 1) (* k k k))))
 (let ((?x1109 (* (- 1) (* m m m n n))))
 (let ((?x1124 (* (- 3) (* k m m n n))))
 (let ((?x1121 (* (- 3) (* k k m n n))))
 (let ((?x1106 (* (- 1) (* k k k n n))))
 (let ((?x996 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x69 ?x69))))
 (let ((?x658 (* (- 1) (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x752 (* 3 (* ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x677 (* c k k k n)))
 (let ((?x674 (* k k k k n)))
 (let ((?x757 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x462 (* 3 (* k k k m n))))
 (let ((?x463 (* 3 (* c k m m n))))
 (let ((?x599 (* c m m m n)))
 (let ((?x460 (* 3 (* k k m m n))))
 (let ((?x596 (* k m m m n)))
 (let ((?x590 (* c k k k)))
 (let ((?x589 (* k k k k)))
 (let ((?x469 (* 3 (* c k k m))))
 (let ((?x466 (* 3 (* k k k m))))
 (let ((?x467 (* 3 (* c k m m))))
 (let ((?x464 (* 3 (* k k m m))))
 (let ((?x465 (* 3 (* c k k m n))))
 (let ((?x492 (* c m m m)))
 (let ((?x491 (* k m m m)))
 (let ((?x449 (* (- 1) (* ?x315 ?x315 ?x609 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x191 (+ (* 4 (* k k)) ?x449 ?x491 ?x492 ?x465 ?x464 ?x467 ?x466 ?x469 ?x589 ?x590 ?x596 ?x460 ?x599 ?x463 ?x462 (* 10 (* k k n n)) (* 20 (* k m n n)) ?x757 (* 10 (* m m n n)) (* 8 (* k m)) ?x674 ?x677 (* 4 (* m m)) (* 11 (* k k n)) (* 22 (* k m n)) (* 11 (* m m n)) ?x752 ?x658 ?x996 ?x1106 ?x1121 ?x1124 ?x1109 ?x1110 ?x972 ?x1127 ?x905 ?x1130 ?x1113 ?x1133 ?x1136 ?x1139 ?x1042 ?x1142 ?x1115 ?x1108 ?x998 ?x1148 ?x1207 (* 6 (* k m n n n)) ?x1213)))
 (let (($x307 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x269 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x220 (* (- 1) ?x49)))
 (let ((?x219 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x217 (= (+ ?x40 ?x44 ?x219 ?x220 (* 9 (* c n))) 4)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (let (($x209 (and $x133 $x217 $x269 $x307 (not (= ?x191 0)))))
 (let ((?x1056 (+ ?x752 ?x757 ?x658 ?x1108 ?x1115 ?x1148 (* ?x315 ?x69 ?x69 ?x69 ?x68) ?x449 ?x998 (* ?x315 ?x315 ?x69 ?x69) ?x972 ?x905 ?x996 (* (- 1) (* ?x315 ?x315 ?x69 ?x69 ?x69)) ?x1042 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69)))))
 (let (($x768 (not (= ?x1056 0))))
 (let (($x744 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x569 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x604 (and $x133 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x219 ?x220) 4) $x569 $x744 $x768)))
 (rewrite (= $x604 $x209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x279 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x609 (+ 6 m)))
 (let ((?x1042 (* ?x315 ?x315 ?x609 ?x68 ?x68 ?x68)))
 (let ((?x996 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x69 ?x69))))
 (let ((?x905 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x972 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x998 (* (- 1) (* ?x315 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x449 (* (- 1) (* ?x315 ?x315 ?x609 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1148 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1115 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1108 (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68)))
 (let ((?x658 (* (- 1) (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x757 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x752 (* 3 (* ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1056 (+ ?x752 ?x757 ?x658 ?x1108 ?x1115 ?x1148 (* ?x315 ?x69 ?x69 ?x69 ?x68) ?x449 ?x998 (* ?x315 ?x315 ?x69 ?x69) ?x972 ?x905 ?x996 (* (- 1) (* ?x315 ?x315 ?x69 ?x69 ?x69)) ?x1042 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69)))))
 (let (($x768 (not (= ?x1056 0))))
 (let (($x744 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x616 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x495 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (and $x133 (= ?x495 (- 4)) $x616 $x744 $x768))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x556 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x609 (+ 6 m)))
 (let ((?x1042 (* ?x315 ?x315 ?x609 ?x68 ?x68 ?x68)))
 (let ((?x996 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x69 ?x69))))
 (let ((?x905 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x972 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x998 (* (- 1) (* ?x315 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x449 (* (- 1) (* ?x315 ?x315 ?x609 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1148 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1115 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1108 (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68)))
 (let ((?x658 (* (- 1) (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x757 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x752 (* 3 (* ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1056 (+ ?x752 ?x757 ?x658 ?x1108 ?x1115 ?x1148 (* ?x315 ?x69 ?x69 ?x69 ?x68) ?x449 ?x998 (* ?x315 ?x315 ?x69 ?x69) ?x972 ?x905 ?x996 (* (- 1) (* ?x315 ?x315 ?x69 ?x69 ?x69)) ?x1042 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69)))))
 (let (($x768 (not (= ?x1056 0))))
 (let (($x744 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x569 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x220 (* (- 1) ?x49)))
 (let ((?x219 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (let (($x604 (and $x133 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x219 ?x220) 4) $x569 $x744 $x768)))
 (let (($x616 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x495 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x656 (and $x133 (= ?x495 (- 4)) $x616 $x744 $x768)))
 (rewrite (= $x656 $x604))))))))))))))))))))))))))))))))))
 ))
 (let (($x100 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x69 (+ k m)))
 (let ((?x74 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x73 (+ (* 3 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* 3 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x81 (+ (- ?x73 (* ?x68 ?x69 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70)) (* ?x68 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70) (* 3 ?x68 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70 ?x70) (* 3 ?x68 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70 ?x70 ?x70) (* ?x68 ?x69 ?x69 ?x69 ?x70))))
 (let ((?x85 (- (- ?x81 (* ?x68 ?x68 ?x68 ?x69 ?x74 ?x70 ?x70)) (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70))))
 (let ((?x90 (+ ?x85 (* ?x69 ?x69 ?x70 ?x70) (* 3 ?x68 ?x68 ?x68 ?x74 ?x70 ?x70 ?x70) (* 3 ?x68 ?x68 ?x68 ?x74 ?x70 ?x70 ?x70 ?x70) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x95 (+ (- ?x90 (* ?x69 ?x69 ?x69 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x74 ?x70 ?x70) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x95 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x759 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x609 (+ 6 m)))
 (let ((?x1042 (* ?x315 ?x315 ?x609 ?x68 ?x68 ?x68)))
 (let ((?x996 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x69 ?x69))))
 (let ((?x905 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x972 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x68 ?x68 ?x68))))
 (let ((?x998 (* (- 1) (* ?x315 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x449 (* (- 1) (* ?x315 ?x315 ?x609 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1148 (* 3 (* ?x315 ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1115 (* 3 (* ?x315 ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68))))
 (let ((?x1108 (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x68)))
 (let ((?x658 (* (- 1) (* ?x315 ?x315 ?x609 ?x609 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x757 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x752 (* 3 (* ?x315 ?x315 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1056 (+ ?x752 ?x757 ?x658 ?x1108 ?x1115 ?x1148 (* ?x315 ?x69 ?x69 ?x69 ?x68) ?x449 ?x998 (* ?x315 ?x315 ?x69 ?x69) ?x972 ?x905 ?x996 (* (- 1) (* ?x315 ?x315 ?x69 ?x69 ?x69)) ?x1042 (* 3 (* ?x315 ?x315 ?x315 ?x69 ?x69)))))
 (let (($x768 (not (= ?x1056 0))))
 (let (($x744 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x616 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x495 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x133 (= (+ m (* (- 6) n)) 6)))
 (let (($x656 (and $x133 (= ?x495 (- 4)) $x616 $x744 $x768)))
 (let ((?x70 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x73 (+ (* 3 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* 3 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x81 (+ (- ?x73 (* ?x68 ?x69 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70)) (* ?x68 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70) (* 3 ?x68 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70 ?x70) (* 3 ?x68 ?x69 ?x69 ?x74 ?x74 ?x70 ?x70 ?x70 ?x70) (* ?x68 ?x69 ?x69 ?x69 ?x70))))
 (let ((?x85 (- (- ?x81 (* ?x68 ?x68 ?x68 ?x69 ?x74 ?x70 ?x70)) (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70))))
 (let ((?x90 (+ ?x85 (* ?x69 ?x69 ?x70 ?x70) (* 3 ?x68 ?x68 ?x68 ?x74 ?x70 ?x70 ?x70) (* 3 ?x68 ?x68 ?x68 ?x74 ?x70 ?x70 ?x70 ?x70) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x95 (+ (- ?x90 (* ?x69 ?x69 ?x69 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x74 ?x70 ?x70) (* 3 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x99 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x95 0))))))
 (rewrite (= $x99 $x656)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x101 (asserted $x100)))
 (let ((@x174 (mp (mp @x101 (quant-intro (proof-bind ?x759) (= $x100 $x279)) $x279) (rewrite (= $x279 $x279)) $x279)))
 (let ((@x566 (mp (mp @x174 (quant-intro (proof-bind ?x556) (= $x279 $x175)) $x175) (quant-intro (proof-bind ?x170) (= $x175 $x633)) $x633)))
 (let ((@x1024 (mp (mp~ @x566 (sk (~ $x633 $x305)) $x305) (rewrite (= $x305 $x213)) $x213)))
 (let ((@x1021 (and-elim @x1024 $x1014)))
 (let ((@x745 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1014) $x983)) @x1021 $x983)))
 (let (($x259 (>= ?x1220 (- 1))))
 (let ((@x276 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1014) $x259)) @x1021 $x259)))
 (let (($x914 (<= ?x164 (- 1))))
 (let ((@x881 (and-elim @x1024 $x177)))
 (let ((@x481 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x914)) @x881 $x914)))
 (let (($x916 (>= ?x164 (- 1))))
 (let ((@x648 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x916)) @x881 $x916)))
 (let (($x245 (<= ?x228 (- 6))))
 (let ((@x1037 (and-elim @x1024 $x232)))
 (let ((@x231 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x232) $x245)) @x1037 $x245)))
 (let (($x312 (>= ?x228 (- 6))))
 (let ((@x698 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x232) $x312)) @x1037 $x312)))
 (let (($x258 (<= ?x152 (- 4))))
 (let ((@x180 (and-elim @x1024 $x256)))
 (let ((@x265 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x256) $x258)) @x180 $x258)))
 (let (($x909 (>= ?x152 (- 4))))
 (let ((@x892 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x256) $x909)) @x180 $x909)))
 (let (($x530 (not (>= ?x113 0))))
 (let (($x194 (<= ?x113 0)))
 (let ((@x541 ((_ th-lemma arith) (hypothesis (not $x194)) @x276 @x745 @x698 @x231 @x698 @x231 @x276 @x745 @x276 @x745 @x648 @x481 @x892 @x265 @x276 @x745 @x648 @x481 @x698 @x231 @x648 @x481 @x276 @x745 false)))
 (let ((@x257 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1119 (not $x194) $x530)) (and-elim @x1024 $x1040) (or (not $x194) $x530))))
 ((_ th-lemma arith) (unit-resolution @x257 (lemma @x541 $x194) $x530) @x276 @x745 @x698 @x231 @x698 @x231 @x276 @x745 @x276 @x745 @x648 @x481 @x892 @x265 @x276 @x745 @x648 @x481 @x698 @x231 @x648 @x481 @x276 @x745 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        26
 :arith-assert-upper        67
 :arith-branch-var          3
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           16
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             682
 :arith-nonlinear-bounds    42
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             6
 :arith-pivots              10
 :arith-row-summations      14
 :arith-tableau-max-columns 87
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 54
 :del-clause                16
 :final-checks              12
 :max-memory                3.84
 :memory                    3.25
 :mk-bool-var               74
 :mk-clause                 16
 :num-allocs                1638644
 :num-checks                1
 :propagations              12
 :rlimit-count              16785
 :time                      0.01
 :total-time                0.02)
