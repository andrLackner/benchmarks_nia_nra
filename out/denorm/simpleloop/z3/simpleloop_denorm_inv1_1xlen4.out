unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x100 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x224 (>= ?x100 0)))
 (let (($x165 (= ?x100 0)))
 (let ((?x186 (+ 1 y!0)))
 (let ((?x187 (+ (- 1) x!1)))
 (let ((?x217 (* ?x187 ?x187 ?x187 ?x186 ?x186 ?x186)))
 (let ((?x190 (* x!1 x!1)))
 (let ((?x180 (* y!0 y!0)))
 (let ((?x133 (* (- 2) x!1)))
 (let ((?x132 (* 2 y!0)))
 (let ((?x273 (+ 1 ?x132 ?x133 ?x180 ?x190 ?x217 (* (- 2) (* y!0 y!0 x!1)) (* 2 (* y!0 x!1 x!1)) (* (- 4) (* y!0 x!1)) (* y!0 y!0 x!1 x!1))))
 (let ((?x268 (* ?x273 (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x286 (= ?x268 0)))
 (let (($x269 (not $x286)))
 (let (($x285 (and $x165 $x269)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x131 (+ x!1 y!0 ?x51 ?x58)))
 (let ((?x202 (+ 1 ?x133 ?x132 ?x217 (* 2 (* x!1 x!1 y!0)) (* (- 4) (* x!1 y!0)) ?x190 (* x!1 x!1 y!0 y!0) (* (- 2) (* x!1 y!0 y!0)) ?x180)))
 (let (($x219 (and (= ?x131 0) (not (= (* ?x202 ?x131) 0)))))
 (let (($x62 (exists ((x Int) (y Int) )(! (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x201 (* y y)))
 (let ((?x154 (* (- 2) (* x y y))))
 (let ((?x192 (* x x y y)))
 (let ((?x184 (* x x)))
 (let ((?x157 (* 2 (* x x y))))
 (let ((?x111 (+ 1 y)))
 (let ((?x67 (+ (- 1) x)))
 (let ((?x114 (* ?x67 ?x67 ?x67 ?x111 ?x111 ?x111)))
 (let ((?x158 (* 2 y)))
 (let ((?x220 (+ 1 (* (- 2) x) ?x158 ?x114 ?x157 (* (- 4) (* x y)) ?x184 ?x192 ?x154 ?x201)))
 (let (($x77 (= ?x72 0)))
 (and $x77 (not (= (* ?x220 ?x72) 0))))))))))))))))) :qid k!26))
 ))
 (let (($x151 (exists ((x Int) (y Int) )(! (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x201 (* y y)))
 (let ((?x154 (* (- 2) (* x y y))))
 (let ((?x192 (* x x y y)))
 (let ((?x184 (* x x)))
 (let ((?x157 (* 2 (* x x y))))
 (let ((?x111 (+ 1 y)))
 (let ((?x67 (+ (- 1) x)))
 (let ((?x114 (* ?x67 ?x67 ?x67 ?x111 ?x111 ?x111)))
 (let ((?x158 (* 2 y)))
 (let ((?x143 (+ 1 (* (- 1) x) ?x158 ?x114 ?x157 (* (- 2) (* x y)) ?x184 ?x192 ?x154 ?x201 (* (- 1) (* x 1 y)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 1)))))
 (let (($x77 (= ?x72 0)))
 (and $x77 (not (= (* ?x143 ?x72) 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x63 (lambda ((x Int) (y Int) )(let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x201 (* y y)))
 (let ((?x154 (* (- 2) (* x y y))))
 (let ((?x192 (* x x y y)))
 (let ((?x184 (* x x)))
 (let ((?x157 (* 2 (* x x y))))
 (let ((?x111 (+ 1 y)))
 (let ((?x67 (+ (- 1) x)))
 (let ((?x114 (* ?x67 ?x67 ?x67 ?x111 ?x111 ?x111)))
 (let ((?x158 (* 2 y)))
 (let ((?x220 (+ 1 (* (- 2) x) ?x158 ?x114 ?x157 (* (- 4) (* x y)) ?x184 ?x192 ?x154 ?x201)))
 (let (($x77 (= ?x72 0)))
 (let (($x54 (and $x77 (not (= (* ?x220 ?x72) 0)))))
 (let ((?x143 (+ 1 (* (- 1) x) ?x158 ?x114 ?x157 (* (- 2) (* x y)) ?x184 ?x192 ?x154 ?x201 (* (- 1) (* x 1 y)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 1)))))
 (let (($x103 (and $x77 (not (= (* ?x143 ?x72) 0)))))
 (rewrite (= $x103 $x54))))))))))))))))))))
 ))
 (let (($x173 (exists ((x Int) (y Int) )(! (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x176 (+ x ?x51 ?x58 y)))
 (let ((?x111 (+ 1 y)))
 (let ((?x67 (+ (- 1) x)))
 (let ((?x114 (* ?x67 ?x67 ?x67 ?x111 ?x111 ?x111)))
 (and (= ?x176 0) (not (= (* (+ ?x114 (* ?x67 ?x67 ?x111 ?x111)) ?x176) 0))))))))) :qid k!26))
 ))
 (let ((?x87 (lambda ((x Int) (y Int) )(let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x72 (+ x y ?x51 ?x58)))
 (let ((?x201 (* y y)))
 (let ((?x154 (* (- 2) (* x y y))))
 (let ((?x192 (* x x y y)))
 (let ((?x184 (* x x)))
 (let ((?x157 (* 2 (* x x y))))
 (let ((?x111 (+ 1 y)))
 (let ((?x67 (+ (- 1) x)))
 (let ((?x114 (* ?x67 ?x67 ?x67 ?x111 ?x111 ?x111)))
 (let ((?x158 (* 2 y)))
 (let ((?x143 (+ 1 (* (- 1) x) ?x158 ?x114 ?x157 (* (- 2) (* x y)) ?x184 ?x192 ?x154 ?x201 (* (- 1) (* x 1 y)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 1)))))
 (let (($x77 (= ?x72 0)))
 (let (($x103 (and $x77 (not (= (* ?x143 ?x72) 0)))))
 (let (($x195 (= (* (+ ?x114 (* ?x67 ?x67 ?x111 ?x111)) (+ x ?x51 ?x58 y)) 0)))
 (let (($x166 (and (= (+ x ?x51 ?x58 y) 0) (not $x195))))
 (rewrite (= $x166 $x103))))))))))))))))))))
 ))
 (let (($x48 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* 0 ?x34 ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x38 ?x38))))
 (let (($x46 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x42) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x46))))) :qid k!26))
 ))
 (let ((?x204 (lambda ((x Int) (y Int) )(let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x176 (+ x ?x51 ?x58 y)))
 (let ((?x111 (+ 1 y)))
 (let ((?x67 (+ (- 1) x)))
 (let ((?x114 (* ?x67 ?x67 ?x67 ?x111 ?x111 ?x111)))
 (let (($x166 (and (= ?x176 0) (not (= (* (+ ?x114 (* ?x67 ?x67 ?x111 ?x111)) ?x176) 0)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38) (* 0 ?x34 ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x38 ?x38))))
 (let (($x46 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x42) 0)))))
 (let (($x47 (and (= (+ (- (- x y00) x00) y) 0) $x46)))
 (rewrite (= $x47 $x166)))))))))))))))
 ))
 (let ((@x49 (asserted $x48)))
 (let ((@x159 (mp (mp @x49 (quant-intro (proof-bind ?x204) (= $x48 $x173)) $x173) (rewrite (= $x173 $x173)) $x173)))
 (let ((@x235 (mp (mp @x159 (quant-intro (proof-bind ?x87) (= $x173 $x151)) $x151) (quant-intro (proof-bind ?x63) (= $x151 $x62)) $x62)))
 (let ((@x248 (mp (mp~ @x235 (sk (~ $x62 $x219)) $x219) (rewrite (= $x219 $x285)) $x285)))
 (let ((@x287 (and-elim @x248 $x165)))
 (let ((@x161 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x165) $x224)) @x287 $x224)))
 (let (($x298 (<= ?x100 0)))
 (let ((@x86 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x165) $x298)) @x287 $x298)))
 (let (($x144 (not (>= ?x268 0))))
 (let (($x295 (<= ?x268 0)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x286 (not $x295) $x144)) (and-elim @x248 $x269) (or (not $x295) $x144))))
 (let ((@x189 (unit-resolution @x297 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x295)) @x86 @x161 false) $x295) $x144)))
 ((_ th-lemma arith farkas 1 1 1) @x189 @x86 @x161 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             54
 :arith-nonlinear-bounds    6
 :arith-num-rows            5
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.48
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1086194
 :num-checks                1
 :propagations              4
 :rlimit-count              1386
 :time                      0.01
 :total-time                0.01)
