unsat
((set-logic NRA)
(declare-fun b!7 () Real)
(declare-fun d!6 () Real)
(declare-fun a!8 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x782 (+ (* (/ 1.0 16.0) (* b00 d!6 d!6 b!7 b!7 b!7)) (* (- (/ 1.0 8.0)) (* d00 y!5 d!6 d!6 b!7)) (* (/ 1.0 4.0) (* d00 y!5 b!7 b!7)) (* (/ 1.0 16.0) (* b00 a!8 d!6 d!6 b!7 b!7)) (* (- (/ 1.0 8.0)) (* b00 y!5 y!5 y!5 a!8 a!8 d!6 d!6 d!6)) (* (- (/ 1.0 4.0)) (* b00 y!5 d!6 b!7)) (* (/ 1.0 8.0) (* b00 y!5 d!6 d!6 d!6)) (* (/ 1.0 8.0) (* d00 y!5 y!5 y!5 a!8 a!8 d!6 d!6 b!7)) (* (- (/ 1.0 16.0)) (* d00 a!8 d!6 b!7 b!7 b!7)) (* (/ 1.0 8.0) (* d00 d!6 b!7 b!7)) (* (- (/ 1.0 16.0)) (* d00 d!6 d!6 d!6 b!7)) (* (- (/ 1.0 8.0)) (* b00 y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7)) (* (- (/ 3.0 16.0)) (* b00 y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7)) (* (- (/ 1.0 4.0)) (* b00 y!5 y!5 y!5 a!8 d!6 d!6 d!6 b!7)) (* (- (/ 3.0 16.0)) (* b00 y!5 y!5 a!8 a!8 d!6 d!6 d!6 d!6)) (* (- (/ 3.0 8.0)) (* b00 y!5 y!5 a!8 d!6 d!6 d!6 d!6 b!7)) (* (- (/ 3.0 32.0)) (* b00 y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7)) (* (- (/ 3.0 16.0)) (* b00 y!5 a!8 d!6 d!6 d!6 d!6 d!6 b!7)) (* (- (/ 3.0 32.0)) (* b00 y!5 a!8 a!8 d!6 d!6 d!6 d!6 d!6)) (* (- (/ 1.0 64.0)) (* b00 d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7)) (* (- (/ 1.0 64.0)) (* b00 a!8 a!8 d!6 d!6 d!6 d!6 d!6 d!6)) (* (- (/ 1.0 32.0)) (* b00 a!8 d!6 d!6 d!6 d!6 d!6 d!6 b!7)) (* (- (/ 1.0 8.0)) (* b00 d!6 d!6 b!7)) (* (/ 1.0 16.0) (* b00 d!6 d!6 d!6 d!6)) (* (/ 1.0 8.0) (* d00 y!5 y!5 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* d00 y!5 y!5 y!5 a!8 d!6 d!6 b!7 b!7)) (* (/ 3.0 16.0) (* d00 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 8.0) (* d00 y!5 y!5 a!8 d!6 d!6 d!6 b!7 b!7)) (* (/ 3.0 32.0) (* d00 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 16.0) (* d00 y!5 y!5 a!8 a!8 d!6 d!6 d!6 b!7)) (* (/ 3.0 32.0) (* d00 y!5 a!8 a!8 d!6 d!6 d!6 d!6 b!7)) (* (/ 3.0 16.0) (* d00 y!5 a!8 d!6 d!6 d!6 d!6 b!7 b!7)) (* (/ 1.0 64.0) (* d00 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 64.0) (* d00 a!8 a!8 d!6 d!6 d!6 d!6 d!6 b!7)) (* (/ 1.0 32.0) (* d00 a!8 d!6 d!6 d!6 d!6 d!6 b!7 b!7)) (* (- (/ 1.0 16.0)) (* d00 d!6 b!7 b!7 b!7 b!7)))))
 (let (($x522 (>= ?x782 0.0)))
 (let ((?x421 (+ (* d00 b!7) (* (- 1.0) (* b00 d!6)))))
 (let (($x511 (>= ?x421 0.0)))
 (let (($x518 (= 0.0 ?x421)))
 (let ((@x605 (symm (commutativity (= $x518 (= ?x421 0.0))) (= (= ?x421 0.0) $x518))))
 (let (($x445 (= ?x421 0.0)))
 (let ((?x542 (+ (* (/ 1.0 8.0) (* d00 y!5 d!6 d!6 b!7)) (* (- (/ 1.0 4.0)) (* d00 y!5 b!7 b!7)) (* (- (/ 1.0 16.0)) (* b00 a!8 d!6 d!6 b!7 b!7)) (* (/ 1.0 8.0) (* b00 y!5 y!5 y!5 a!8 a!8 d!6 d!6 d!6)) (* (/ 1.0 4.0) (* b00 y!5 d!6 b!7)) (* (- (/ 1.0 8.0)) (* b00 y!5 d!6 d!6 d!6)) (* (- (/ 1.0 8.0)) (* d00 y!5 y!5 y!5 a!8 a!8 d!6 d!6 b!7)) (* (/ 1.0 16.0) (* d00 a!8 d!6 b!7 b!7 b!7)))))
 (let (($x543 (= ?x542 0.0)))
 (let (($x548 (not $x543)))
 (let (($x655 (or $x548 (not (= ?x782 0.0)))))
 (let ((?x1298 (* (- 2.0) (* y!5 b!7))))
 (let ((?x489 (+ (* a!8 d!6) (* (- 1.0) (* a00 d!6)) (* 2.0 (* y00 b!7)) ?x1298)))
 (let ((?x96 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x441 (= (+ ?x30 ?x96 (* (- 1.0) (* d00 a!8)) (* 2.0 (* b00 y!5))) 0.0)))
 (let (($x529 (and $x441 $x445 (= ?x489 0.0) $x655)))
 (let ((?x547 (* (- (/ 1.0 16.0)) (* d!6 b!7 b!7 b!7 a!8 d00))))
 (let ((?x832 (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 d!6 b!7 a!8 a!8 d00))))
 (let ((?x454 (* (/ 1.0 8.0) (* y!5 d!6 d!6 d!6 b00))))
 (let ((?x783 (* (- (/ 1.0 4.0)) (* y!5 d!6 b!7 b00))))
 (let ((?x428 (* (- (/ 1.0 8.0)) (* y!5 y!5 y!5 d!6 d!6 d!6 a!8 a!8 b00))))
 (let ((?x790 (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 a!8 b00))))
 (let ((?x374 (* (- (/ 1.0 8.0)) (* y!5 d!6 d!6 b!7 d00))))
 (let ((?x1034 (* (/ 1.0 4.0) (* y!5 b!7 b!7 d00))))
 (let ((?x394 (+ ?x1034 ?x374 ?x790 ?x428 ?x783 (* (/ 1.0 8.0) (* d!6 b!7 b!7 d00)) ?x454 ?x832 ?x547 (* (- (/ 1.0 16.0)) (* d!6 d!6 d!6 b!7 d00)) (* (- (/ 1.0 8.0)) (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b00)) (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 a!8 b00)) (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b00)) (* (- (/ 3.0 8.0)) (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 a!8 b00)) (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 d!6 d!6 a!8 a!8 b00)) (* (- (/ 3.0 32.0)) (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b00)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 a!8 b00)) (* (- (/ 3.0 32.0)) (* y!5 d!6 d!6 d!6 d!6 d!6 a!8 a!8 b00)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b00)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 a!8 b00)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 d!6 d!6 a!8 a!8 b00)) (* (- (/ 1.0 8.0)) (* d!6 d!6 b!7 b00)) (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 b!7 b00)) (* (/ 1.0 16.0) (* d!6 d!6 d!6 d!6 b00)) (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 b!7 d00)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 d00)) (* (/ 3.0 16.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 d00)) (* (/ 3.0 8.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8 d00)) (* (/ 3.0 16.0) (* y!5 y!5 d!6 d!6 d!6 b!7 a!8 a!8 d00)) (* (/ 3.0 32.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 d00)) (* (/ 3.0 16.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8 d00)) (* (/ 3.0 32.0) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8 d00)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 d00)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8 d00)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 d!6 b!7 a!8 a!8 d00)) (* (- (/ 1.0 16.0)) (* d!6 b!7 b!7 b!7 b!7 d00)))))
 (let (($x419 (or (not (= (+ ?x1034 ?x374 ?x790 ?x428 ?x783 ?x454 ?x832 ?x547) 0.0)) (not (= ?x394 0.0)))))
 (let ((?x469 (+ (* d!6 a!8) ?x1298 (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x802 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x96 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x396 (and $x802 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x469 0.0) $x419)))
 (let (($x199 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x324 (* (- (/ 1.0 16.0)) (* d b b b a d00))))
 (let ((?x269 (* (/ 1.0 8.0) (* y y y d d b a a d00))))
 (let ((?x231 (* (/ 1.0 8.0) (* y d d d b00))))
 (let ((?x323 (* (- (/ 1.0 4.0)) (* y d b b00))))
 (let ((?x322 (* (- (/ 1.0 8.0)) (* y y y d d d a a b00))))
 (let ((?x188 (* (/ 1.0 16.0) (* d d b b a b00))))
 (let ((?x321 (* (- (/ 1.0 8.0)) (* y d d b d00))))
 (let ((?x320 (* (/ 1.0 4.0) (* y b b d00))))
 (let ((?x1362 (+ ?x320 ?x321 ?x188 ?x322 ?x323 (* (/ 1.0 8.0) (* d b b d00)) ?x231 ?x269 ?x324 (* (- (/ 1.0 16.0)) (* d d d b d00)) (* (- (/ 1.0 8.0)) (* y y y d d d b b b00)) (* (- (/ 1.0 4.0)) (* y y y d d d b a b00)) (* (- (/ 3.0 16.0)) (* y y d d d d b b b00)) (* (- (/ 3.0 8.0)) (* y y d d d d b a b00)) (* (- (/ 3.0 16.0)) (* y y d d d d a a b00)) (* (- (/ 3.0 32.0)) (* y d d d d d b b b00)) (* (- (/ 3.0 16.0)) (* y d d d d d b a b00)) (* (- (/ 3.0 32.0)) (* y d d d d d a a b00)) (* (- (/ 1.0 64.0)) (* d d d d d d b b b00)) (* (- (/ 1.0 32.0)) (* d d d d d d b a b00)) (* (- (/ 1.0 64.0)) (* d d d d d d a a b00)) (* (- (/ 1.0 8.0)) (* d d b b00)) (* (/ 1.0 16.0) (* d d b b b b00)) (* (/ 1.0 16.0) (* d d d d b00)) (* (/ 1.0 8.0) (* y y y d d b b b d00)) (* (/ 1.0 4.0) (* y y y d d b b a d00)) (* (/ 3.0 16.0) (* y y d d d b b b d00)) (* (/ 3.0 8.0) (* y y d d d b b a d00)) (* (/ 3.0 16.0) (* y y d d d b a a d00)) (* (/ 3.0 32.0) (* y d d d d b b b d00)) (* (/ 3.0 16.0) (* y d d d d b b a d00)) (* (/ 3.0 32.0) (* y d d d d b a a d00)) (* (/ 1.0 64.0) (* d d d d d b b b d00)) (* (/ 1.0 32.0) (* d d d d d b b a d00)) (* (/ 1.0 64.0) (* d d d d d b a a d00)) (* (- (/ 1.0 16.0)) (* d b b b b d00)))))
 (let (($x196 (or (not (= (+ ?x320 ?x321 ?x188 ?x322 ?x323 ?x231 ?x269 ?x324) 0.0)) (not (= ?x1362 0.0)))))
 (let ((?x138 (* (- 2.0) (* y b))))
 (let ((?x113 (* d a)))
 (let (($x173 (= (+ ?x113 ?x138 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x96 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x128 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x96 (* 2.0 (* y b00))) 0.0)))
 (and $x128 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x173 $x196))))))))))))))))) :qid k!33))
 ))
 (let (($x500 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x373 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x71 (+ a b)))
 (let ((?x485 (+ (* (- (/ 1.0 4.0)) (* d00 ?x373 b b)) (* (/ 1.0 8.0) (* d00 ?x373 d d b)) (* (/ 1.0 8.0) (* b00 ?x71 ?x71 ?x373 ?x373 ?x373 d d d)) (* (/ 1.0 4.0) (* b00 ?x373 d b)) (* (- (/ 1.0 16.0)) (* b00 ?x71 d d b b)) (* (- (/ 1.0 8.0)) (* b00 ?x373 d d d)) (* (- (/ 1.0 8.0)) (* d00 ?x71 ?x71 ?x373 ?x373 ?x373 d d b)) (* (/ 1.0 16.0) (* d00 ?x71 d b b b)))))
 (let ((?x367 (+ (* (- (/ 1.0 4.0)) (* d00 y b b)) (* (/ 1.0 8.0) (* d00 y d d b)) (* (/ 1.0 8.0) (* b00 y y y d d d a a)) (* (/ 1.0 4.0) (* b00 y d b)) (* (- (/ 1.0 16.0)) (* b00 d d b b a)) (* (- (/ 1.0 8.0)) (* b00 y d d d)) (* (- (/ 1.0 8.0)) (* d00 y y y d d b a a)) (* (/ 1.0 16.0) (* d00 d b b b a)))))
 (let ((?x138 (* (- 2.0) (* y b))))
 (let ((?x113 (* d a)))
 (let (($x1055 (= (+ ?x113 ?x138 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x96 (* (- 2.0) (* b00 y00))))
 (let (($x775 (= (+ ?x96 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x775 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x1055 (or (not (= ?x367 0.0)) (not (= ?x485 0.0)))))))))))))) :qid k!33))
 ))
 (let ((?x1143 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x324 (* (- (/ 1.0 16.0)) (* d b b b a d00))))
 (let ((?x269 (* (/ 1.0 8.0) (* y y y d d b a a d00))))
 (let ((?x231 (* (/ 1.0 8.0) (* y d d d b00))))
 (let ((?x323 (* (- (/ 1.0 4.0)) (* y d b b00))))
 (let ((?x322 (* (- (/ 1.0 8.0)) (* y y y d d d a a b00))))
 (let ((?x188 (* (/ 1.0 16.0) (* d d b b a b00))))
 (let ((?x321 (* (- (/ 1.0 8.0)) (* y d d b d00))))
 (let ((?x320 (* (/ 1.0 4.0) (* y b b d00))))
 (let ((?x1362 (+ ?x320 ?x321 ?x188 ?x322 ?x323 (* (/ 1.0 8.0) (* d b b d00)) ?x231 ?x269 ?x324 (* (- (/ 1.0 16.0)) (* d d d b d00)) (* (- (/ 1.0 8.0)) (* y y y d d d b b b00)) (* (- (/ 1.0 4.0)) (* y y y d d d b a b00)) (* (- (/ 3.0 16.0)) (* y y d d d d b b b00)) (* (- (/ 3.0 8.0)) (* y y d d d d b a b00)) (* (- (/ 3.0 16.0)) (* y y d d d d a a b00)) (* (- (/ 3.0 32.0)) (* y d d d d d b b b00)) (* (- (/ 3.0 16.0)) (* y d d d d d b a b00)) (* (- (/ 3.0 32.0)) (* y d d d d d a a b00)) (* (- (/ 1.0 64.0)) (* d d d d d d b b b00)) (* (- (/ 1.0 32.0)) (* d d d d d d b a b00)) (* (- (/ 1.0 64.0)) (* d d d d d d a a b00)) (* (- (/ 1.0 8.0)) (* d d b b00)) (* (/ 1.0 16.0) (* d d b b b b00)) (* (/ 1.0 16.0) (* d d d d b00)) (* (/ 1.0 8.0) (* y y y d d b b b d00)) (* (/ 1.0 4.0) (* y y y d d b b a d00)) (* (/ 3.0 16.0) (* y y d d d b b b d00)) (* (/ 3.0 8.0) (* y y d d d b b a d00)) (* (/ 3.0 16.0) (* y y d d d b a a d00)) (* (/ 3.0 32.0) (* y d d d d b b b d00)) (* (/ 3.0 16.0) (* y d d d d b b a d00)) (* (/ 3.0 32.0) (* y d d d d b a a d00)) (* (/ 1.0 64.0) (* d d d d d b b b d00)) (* (/ 1.0 32.0) (* d d d d d b b a d00)) (* (/ 1.0 64.0) (* d d d d d b a a d00)) (* (- (/ 1.0 16.0)) (* d b b b b d00)))))
 (let (($x196 (or (not (= (+ ?x320 ?x321 ?x188 ?x322 ?x323 ?x231 ?x269 ?x324) 0.0)) (not (= ?x1362 0.0)))))
 (let ((?x138 (* (- 2.0) (* y b))))
 (let ((?x113 (* d a)))
 (let (($x173 (= (+ ?x113 ?x138 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x96 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x128 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x96 (* 2.0 (* y b00))) 0.0)))
 (let (($x1369 (and $x128 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x173 $x196)))
 (let ((?x373 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x71 (+ a b)))
 (let ((?x485 (+ (* (- (/ 1.0 4.0)) (* d00 ?x373 b b)) (* (/ 1.0 8.0) (* d00 ?x373 d d b)) (* (/ 1.0 8.0) (* b00 ?x71 ?x71 ?x373 ?x373 ?x373 d d d)) (* (/ 1.0 4.0) (* b00 ?x373 d b)) (* (- (/ 1.0 16.0)) (* b00 ?x71 d d b b)) (* (- (/ 1.0 8.0)) (* b00 ?x373 d d d)) (* (- (/ 1.0 8.0)) (* d00 ?x71 ?x71 ?x373 ?x373 ?x373 d d b)) (* (/ 1.0 16.0) (* d00 ?x71 d b b b)))))
 (let ((?x367 (+ (* (- (/ 1.0 4.0)) (* d00 y b b)) (* (/ 1.0 8.0) (* d00 y d d b)) (* (/ 1.0 8.0) (* b00 y y y d d d a a)) (* (/ 1.0 4.0) (* b00 y d b)) (* (- (/ 1.0 16.0)) (* b00 d d b b a)) (* (- (/ 1.0 8.0)) (* b00 y d d d)) (* (- (/ 1.0 8.0)) (* d00 y y y d d b a a)) (* (/ 1.0 16.0) (* d00 d b b b a)))))
 (let (($x1055 (= (+ ?x113 ?x138 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x775 (= (+ ?x96 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x366 (and $x775 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x1055 (or (not (= ?x367 0.0)) (not (= ?x485 0.0))))))
 (rewrite (= $x366 $x1369)))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x53 (/ d 2.0)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x71 (+ a b)))
 (let ((?x68 (+ y ?x53)))
 (let ((?x74 (+ (* (- 1.0) ?x51 ?x51 d00 ?x68) (* ?x51 ?x53 ?x53 d00 ?x68) (* ?x71 ?x71 b00 ?x53 ?x53 ?x53 ?x68 ?x68 ?x68) (* ?x51 b00 ?x53 ?x68))))
 (let ((?x79 (- (- ?x74 (* ?x71 ?x51 ?x51 b00 ?x53 ?x53)) (* b00 ?x53 ?x53 ?x53 ?x68))))
 (let ((?x82 (+ (- ?x79 (* ?x71 ?x71 ?x51 ?x53 ?x53 d00 ?x68 ?x68 ?x68)) (* ?x71 ?x51 ?x51 ?x51 ?x53 d00))))
 (let ((?x57 (+ (* (- 1.0) ?x51 ?x51 d00 y) (* ?x51 ?x53 ?x53 d00 y) (* a a b00 ?x53 ?x53 ?x53 y y y) (* ?x51 b00 ?x53 y))))
 (let ((?x62 (- (- ?x57 (* a ?x51 ?x51 b00 ?x53 ?x53)) (* b00 ?x53 ?x53 ?x53 y))))
 (let ((?x65 (+ (- ?x62 (* a a ?x51 ?x53 ?x53 d00 y y y)) (* a ?x51 ?x51 ?x51 ?x53 d00))))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= ?x65 0.0)) (not (= ?x82 0.0))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1125 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x373 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x71 (+ a b)))
 (let ((?x485 (+ (* (- (/ 1.0 4.0)) (* d00 ?x373 b b)) (* (/ 1.0 8.0) (* d00 ?x373 d d b)) (* (/ 1.0 8.0) (* b00 ?x71 ?x71 ?x373 ?x373 ?x373 d d d)) (* (/ 1.0 4.0) (* b00 ?x373 d b)) (* (- (/ 1.0 16.0)) (* b00 ?x71 d d b b)) (* (- (/ 1.0 8.0)) (* b00 ?x373 d d d)) (* (- (/ 1.0 8.0)) (* d00 ?x71 ?x71 ?x373 ?x373 ?x373 d d b)) (* (/ 1.0 16.0) (* d00 ?x71 d b b b)))))
 (let ((?x367 (+ (* (- (/ 1.0 4.0)) (* d00 y b b)) (* (/ 1.0 8.0) (* d00 y d d b)) (* (/ 1.0 8.0) (* b00 y y y d d d a a)) (* (/ 1.0 4.0) (* b00 y d b)) (* (- (/ 1.0 16.0)) (* b00 d d b b a)) (* (- (/ 1.0 8.0)) (* b00 y d d d)) (* (- (/ 1.0 8.0)) (* d00 y y y d d b a a)) (* (/ 1.0 16.0) (* d00 d b b b a)))))
 (let ((?x138 (* (- 2.0) (* y b))))
 (let ((?x113 (* d a)))
 (let (($x1055 (= (+ ?x113 ?x138 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x96 (* (- 2.0) (* b00 y00))))
 (let (($x775 (= (+ ?x96 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x366 (and $x775 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x1055 (or (not (= ?x367 0.0)) (not (= ?x485 0.0))))))
 (let ((?x53 (/ d 2.0)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x68 (+ y ?x53)))
 (let ((?x74 (+ (* (- 1.0) ?x51 ?x51 d00 ?x68) (* ?x51 ?x53 ?x53 d00 ?x68) (* ?x71 ?x71 b00 ?x53 ?x53 ?x53 ?x68 ?x68 ?x68) (* ?x51 b00 ?x53 ?x68))))
 (let ((?x79 (- (- ?x74 (* ?x71 ?x51 ?x51 b00 ?x53 ?x53)) (* b00 ?x53 ?x53 ?x53 ?x68))))
 (let ((?x82 (+ (- ?x79 (* ?x71 ?x71 ?x51 ?x53 ?x53 d00 ?x68 ?x68 ?x68)) (* ?x71 ?x51 ?x51 ?x51 ?x53 d00))))
 (let ((?x57 (+ (* (- 1.0) ?x51 ?x51 d00 y) (* ?x51 ?x53 ?x53 d00 y) (* a a b00 ?x53 ?x53 ?x53 y y y) (* ?x51 b00 ?x53 y))))
 (let ((?x62 (- (- ?x57 (* a ?x51 ?x51 b00 ?x53 ?x53)) (* b00 ?x53 ?x53 ?x53 y))))
 (let ((?x65 (+ (- ?x62 (* a a ?x51 ?x53 ?x53 d00 y y y)) (* a ?x51 ?x51 ?x51 ?x53 d00))))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x86 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= ?x65 0.0)) (not (= ?x82 0.0))))))
 (rewrite (= $x86 $x366))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x1261 (mp (mp @x88 (quant-intro (proof-bind ?x1125) (= $x87 $x500)) $x500) (quant-intro (proof-bind ?x1143) (= $x500 $x199)) $x199)))
 (let ((@x657 (mp (mp~ @x1261 (sk (~ $x199 $x396)) $x396) (rewrite (= $x396 $x529)) $x529)))
 (let ((@x613 (mp (and-elim @x657 $x445) @x605 $x518)))
 (let ((@x615 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x511)) @x613 $x511)))
 (let (($x502 (<= ?x421 0.0)))
 (let ((@x610 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x502)) @x613 $x502)))
 (let ((@x463 (unit-resolution ((_ th-lemma arith) (or (not $x502) (not $x511) $x522)) @x610 @x615 (hypothesis (not $x522)) false)))
 (let ((@x622 (lemma @x463 $x522)))
 (let (($x491 (<= ?x782 0.0)))
 (let ((@x627 (unit-resolution ((_ th-lemma arith) (or (not $x511) (not $x502) $x491)) @x610 @x615 (hypothesis (not $x491)) false)))
 (let ((@x626 (lemma @x627 $x491)))
 (let (($x499 (<= ?x542 0.0)))
 (let (($x1139 (not $x499)))
 (let (($x504 (>= ?x542 0.0)))
 (let ((@x1189 (unit-resolution ((_ th-lemma arith) (or (not $x502) (not $x511) (not $x491) (not $x522) $x504)) @x610 @x615 (hypothesis (not $x504)) @x626 @x622 false)))
 (let (($x525 (= 0.0 ?x542)))
 (let (($x789 (not $x525)))
 (let ((@x1164 (monotonicity (symm (commutativity (= $x525 $x543)) (= $x543 $x525)) (= $x548 $x789))))
 (let (($x654 (= ?x782 0.0)))
 (let (($x449 (= 0.0 ?x782)))
 (let ((@x749 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x449 (not $x491) (not $x522))) @x622 (or $x449 (not $x491)))))
 (let ((@x787 (mp (unit-resolution @x749 @x626 $x449) (commutativity (= $x449 $x654)) $x654)))
 (let ((@x933 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x525 $x1139 (not $x504))) (mp (unit-resolution (and-elim @x657 $x655) @x787 $x548) @x1164 $x789) (or $x1139 (not $x504)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x502) (not $x511) (not $x491) (not $x522) $x499)) @x610 @x615 (unit-resolution @x933 (lemma @x1189 $x504) $x1139) @x626 @x622 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       24
 :arith-eq-adapter                26
 :arith-bound-propagations-cheap  21
 :arith-conflicts                 97
 :arith-diseq                     28
 :arith-grobner-calls             4
 :arith-grobner-conflicts         4
 :arith-horner-calls              4
 :arith-horner-cross-nested-forms 41
 :arith-lower                     72
 :arith-make-feasible             63
 :arith-max-columns               63
 :arith-max-rows                  5
 :arith-nla-explanations          42
 :arith-nla-lemmas                97
 :arith-propagations              21
 :arith-upper                     40
 :conflicts                       8
 :decisions                       93
 :del-clause                      83
 :final-checks                    28
 :max-memory                      2.11
 :memory                          1.21
 :mk-bool-var                     177
 :mk-clause                       121
 :num-allocs                      2384591
 :num-checks                      1
 :propagations                    52
 :rlimit-count                    7602
 :time                            0.02
 :total-time                      0.03)
