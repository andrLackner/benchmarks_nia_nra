unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x658 (* k!2 k!2)))
 (let ((?x304 (* 9 n!0)))
 (let ((?x470 (* c!3 n!0)))
 (let ((?x298 (* (- 9) ?x470)))
 (let ((?x466 (* k!2 n!0)))
 (let ((?x662 (* (- 9) ?x466)))
 (let ((?x292 (* (- 5) m!1)))
 (let ((?x305 (* (- 27) c!3)))
 (let ((?x306 (* m!1 m!1)))
 (let ((?x261 (* 2 (* k!2 m!1))))
 (let ((?x353 (* (- 32) k!2)))
 (let ((?x219 (+ 13 ?x353 ?x261 ?x306 ?x305 ?x292 ?x662 ?x298 ?x304 ?x658)))
 (let (($x607 (<= ?x219 0)))
 (let ((?x293 (* (- 3) n!0)))
 (let ((?x520 (* (- 3) (* n!0 n!0))))
 (let ((?x623 (+ k!2 ?x520 ?x293)))
 (let (($x457 (<= ?x623 1)))
 (let (($x382 (= ?x623 1)))
 (let ((?x393 (+ k!2 c!3)))
 (let ((?x519 (+ k!2 m!1)))
 (let ((?x561 (+ 6 m!1)))
 (let ((?x510 (+ 1 n!0)))
 (let ((?x351 (* (- 1) (* k!2 k!2 k!2 m!1))))
 (let ((?x224 (* (- 2) (* k!2 k!2 m!1 m!1))))
 (let ((?x166 (* (- 12) (* k!2 k!2 m!1))))
 (let ((?x418 (* (- 6) (* k!2 m!1 m!1))))
 (let ((?x233 (* (- 1) (* c!3 m!1 m!1 m!1))))
 (let ((?x469 (* (- 6) (* c!3 m!1 m!1))))
 (let ((?x288 (* (- 1) (* k!2 m!1 m!1 m!1))))
 (let ((?x277 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x294 (+ (* (- 2) (* k!2 c!3 m!1 m!1)) ?x277 (* (- 6) (* k!2 k!2 c!3)) (* (- 1) (* k!2 k!2 c!3 m!1)) (* (- 12) (* k!2 c!3 m!1)) (* ?x510 ?x561 ?x561 ?x561 ?x519 ?x519 ?x519 ?x393) ?x288 ?x469 ?x233 ?x418 ?x166 (* (- 1) (* ?x510 ?x510 ?x561 ?x519 ?x393 ?x393)) ?x224 ?x351 (* ?x510 ?x510 ?x561 ?x561 ?x519 ?x519 ?x393 ?x393 ?x393))))
 (let ((?x226 (* ?x294 ?x219)))
 (let (($x652 (= ?x226 0)))
 (let (($x227 (not $x652)))
 (let ((?x521 (* (- 2) n!0)))
 (let ((?x463 (* (- 1) ?x466)))
 (let ((?x517 (* 3 c!3)))
 (let ((?x625 (+ k!2 ?x517 ?x463 ?x521)))
 (let (($x391 (= ?x625 1)))
 (let ((?x637 (* (- 1) ?x658)))
 (let ((?x424 (* (- 9) n!0)))
 (let ((?x468 (* 9 ?x470)))
 (let ((?x460 (* 18 c!3)))
 (let ((?x386 (* 5 k!2)))
 (let ((?x291 (+ ?x386 ?x460 ?x468 ?x424 ?x637)))
 (let (($x628 (= ?x291 4)))
 (let ((?x383 (+ m!1 (* (- 6) n!0))))
 (let (($x565 (= ?x383 6)))
 (let (($x241 (and $x565 $x628 $x391 $x382 $x227)))
 (let ((?x282 (+ c!3 k!2)))
 (let ((?x459 (+ (* ?x510 ?x510 ?x561 ?x561 ?x519 ?x519 ?x282 ?x282 ?x282) (* (- 1) (* ?x510 ?x510 ?x561 ?x519 ?x282 ?x282)) (* ?x510 ?x561 ?x561 ?x561 ?x519 ?x519 ?x519 ?x282) ?x418 ?x469 ?x166 (* (- 12) (* c!3 k!2 m!1)) ?x277 (* (- 6) (* c!3 k!2 k!2)) ?x288 ?x233 ?x224 (* (- 2) (* c!3 k!2 m!1 m!1)) ?x351 (* (- 1) (* c!3 k!2 k!2 m!1)))))
 (let (($x581 (= (* ?x459 (+ 13 ?x305 ?x353 ?x292 ?x304 ?x658 ?x662 ?x298 ?x261 ?x306)) 0)))
 (let (($x339 (and $x565 (= (+ ?x460 ?x386 ?x424 ?x637 ?x468) 4) (= (+ ?x517 k!2 ?x521 ?x463) 1) (= (+ k!2 ?x293 ?x520) 1) (not $x581))))
 (let (($x553 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x483 (+ 13 (* (- 27) c) (* (- 32) k) ?x428 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x655 (* (- 1) (* c k k m))))
 (let ((?x656 (* (- 1) (* k k k m))))
 (let ((?x629 (* (- 2) (* c k m m))))
 (let ((?x632 (* (- 2) (* k k m m))))
 (let ((?x659 (* (- 1) (* c m m m))))
 (let ((?x660 (* (- 1) (* k m m m))))
 (let ((?x635 (* (- 6) (* c k k))))
 (let ((?x638 (* (- 6) (* k k k))))
 (let ((?x641 (* (- 12) (* c k m))))
 (let ((?x644 (* (- 12) (* k k m))))
 (let ((?x648 (* (- 6) (* c m m))))
 (let ((?x651 (* (- 6) (* k m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x270 (* ?x343 ?x488 ?x488 ?x488 ?x72 ?x72 ?x72 ?x68)))
 (let ((?x96 (* (- 1) (* ?x343 ?x343 ?x488 ?x72 ?x68 ?x68))))
 (let ((?x181 (* ?x343 ?x343 ?x488 ?x488 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x450 (+ ?x181 ?x96 ?x270 ?x651 ?x648 ?x644 ?x641 ?x638 ?x635 ?x660 ?x659 ?x632 ?x629 ?x656 ?x655)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x210 $x262 $x300 (not (= (* ?x450 ?x483) 0))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x374 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x513 (* (- 18) c)))
 (let ((?x256 (+ 13 ?x513 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x96 (* (- 1) (* ?x343 ?x343 ?x488 ?x72 ?x68 ?x68))))
 (let ((?x181 (* ?x343 ?x343 ?x488 ?x488 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x270 (* ?x343 ?x488 ?x488 ?x488 ?x72 ?x72 ?x72 ?x68)))
 (let (($x583 (= (* (+ ?x270 (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x181 ?x96) ?x256) 0)))
 (let (($x164 (not $x583)))
 (let (($x248 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x137 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x137 $x248 $x164))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x426 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x483 (+ 13 (* (- 27) c) (* (- 32) k) ?x428 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x655 (* (- 1) (* c k k m))))
 (let ((?x656 (* (- 1) (* k k k m))))
 (let ((?x629 (* (- 2) (* c k m m))))
 (let ((?x632 (* (- 2) (* k k m m))))
 (let ((?x659 (* (- 1) (* c m m m))))
 (let ((?x660 (* (- 1) (* k m m m))))
 (let ((?x635 (* (- 6) (* c k k))))
 (let ((?x638 (* (- 6) (* k k k))))
 (let ((?x641 (* (- 12) (* c k m))))
 (let ((?x644 (* (- 12) (* k k m))))
 (let ((?x648 (* (- 6) (* c m m))))
 (let ((?x651 (* (- 6) (* k m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x488 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x270 (* ?x343 ?x488 ?x488 ?x488 ?x72 ?x72 ?x72 ?x68)))
 (let ((?x96 (* (- 1) (* ?x343 ?x343 ?x488 ?x72 ?x68 ?x68))))
 (let ((?x181 (* ?x343 ?x343 ?x488 ?x488 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x450 (+ ?x181 ?x96 ?x270 ?x651 ?x648 ?x644 ?x641 ?x638 ?x635 ?x660 ?x659 ?x632 ?x629 ?x656 ?x655)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x433 (and $x126 $x210 $x262 $x300 (not (= (* ?x450 ?x483) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x513 (* (- 18) c)))
 (let ((?x256 (+ 13 ?x513 (* (- 23) k) (* (- 9) (* ?x343 ?x68)) ?x428 ?x48 ?x78)))
 (let (($x583 (= (* (+ ?x270 (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x181 ?x96) ?x256) 0)))
 (let (($x164 (not $x583)))
 (let (($x248 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x137 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x253 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x137 $x248 $x164)))
 (rewrite (= $x253 $x433))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x165 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x513 (* (- 18) c)))
 (let ((?x256 (+ 13 ?x513 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x96 (* (- 1) (* ?x343 ?x343 ?x488 ?x72 ?x68 ?x68))))
 (let ((?x181 (* ?x343 ?x343 ?x488 ?x488 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x270 (* ?x343 ?x488 ?x488 ?x488 ?x72 ?x72 ?x72 ?x68)))
 (let (($x583 (= (* (+ ?x270 (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x181 ?x96) ?x256) 0)))
 (let (($x164 (not $x583)))
 (let (($x248 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x325 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x569 (= (+ ?x513 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x569 $x325 $x248 $x164))))))))))))))))))) :qid k!34))
 ))
 (let ((?x375 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x513 (* (- 18) c)))
 (let ((?x256 (+ 13 ?x513 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x96 (* (- 1) (* ?x343 ?x343 ?x488 ?x72 ?x68 ?x68))))
 (let ((?x181 (* ?x343 ?x343 ?x488 ?x488 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x270 (* ?x343 ?x488 ?x488 ?x488 ?x72 ?x72 ?x72 ?x68)))
 (let (($x583 (= (* (+ ?x270 (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x181 ?x96) ?x256) 0)))
 (let (($x164 (not $x583)))
 (let (($x248 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x137 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x253 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x137 $x248 $x164)))
 (let (($x325 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x569 (= (+ ?x513 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x367 (and $x126 $x569 $x325 $x248 $x164)))
 (rewrite (= $x367 $x253)))))))))))))))))))))))))))))
 ))
 (let (($x93 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (- (* ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70) (* ?x68 ?x72 ?x72 ?x80))))
 (let ((?x87 (- (+ ?x83 (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x80 ?x80 ?x70 ?x70)) (* ?x68 ?x68 ?x72 ?x80 ?x70 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x87) 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x345 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x513 (* (- 18) c)))
 (let ((?x256 (+ 13 ?x513 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x488 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x96 (* (- 1) (* ?x343 ?x343 ?x488 ?x72 ?x68 ?x68))))
 (let ((?x181 (* ?x343 ?x343 ?x488 ?x488 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x270 (* ?x343 ?x488 ?x488 ?x488 ?x72 ?x72 ?x72 ?x68)))
 (let (($x583 (= (* (+ ?x270 (* (- 1) (* ?x488 ?x72 ?x72 ?x68)) ?x181 ?x96) ?x256) 0)))
 (let (($x164 (not $x583)))
 (let (($x248 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x325 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x569 (= (+ ?x513 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x367 (and $x126 $x569 $x325 $x248 $x164)))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x83 (- (* ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70) (* ?x68 ?x72 ?x72 ?x80))))
 (let ((?x87 (- (+ ?x83 (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x80 ?x80 ?x70 ?x70)) (* ?x68 ?x68 ?x72 ?x80 ?x70 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x92 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x87) 0))))))
 (rewrite (= $x92 $x367))))))))))))))))))))))))))))))))))
 ))
 (let ((@x94 (asserted $x93)))
 (let ((@x251 (mp (mp @x94 (quant-intro (proof-bind ?x345) (= $x93 $x165)) $x165) (rewrite (= $x165 $x165)) $x165)))
 (let ((@x381 (mp (mp @x251 (quant-intro (proof-bind ?x375) (= $x165 $x374)) $x374) (quant-intro (proof-bind ?x426) (= $x374 $x553)) $x553)))
 (let ((@x392 (mp (mp~ @x381 (sk (~ $x553 $x339)) $x339) (rewrite (= $x339 $x241)) $x241)))
 (let ((@x385 (and-elim @x392 $x382)))
 (let ((@x560 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x382) $x457)) @x385 $x457)))
 (let (($x441 (>= ?x623 1)))
 (let ((@x397 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x382) $x441)) @x385 $x441)))
 (let (($x411 (<= ?x291 4)))
 (let ((@x631 (and-elim @x392 $x628)))
 (let ((@x429 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x628) $x411)) @x631 $x411)))
 (let (($x653 (>= ?x291 4)))
 (let ((@x531 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x628) $x653)) @x631 $x653)))
 (let (($x555 (<= ?x383 6)))
 (let ((@x223 (and-elim @x392 $x565)))
 (let ((@x443 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x565) $x555)) @x223 $x555)))
 (let (($x427 (>= ?x383 6)))
 (let ((@x403 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x565) $x427)) @x223 $x427)))
 (let (($x390 (<= ?x625 1)))
 (let ((@x434 (and-elim @x392 $x391)))
 (let ((@x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x390)) @x434 $x390)))
 (let (($x283 (>= ?x625 1)))
 (let ((@x534 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x283)) @x434 $x283)))
 (let ((@x532 ((_ th-lemma arith) (hypothesis (not $x607)) @x531 @x429 @x397 @x560 @x531 @x429 @x397 @x560 @x531 @x429 @x397 @x560 @x534 @x330 @x531 @x429 @x403 @x443 @x397 @x560 @x397 @x560 @x534 @x330 @x397 @x560 @x531 @x429 @x403 @x443 @x531 @x429 @x403 @x443 @x531 @x429 @x397 @x560 false)))
 (let ((@x692 (lemma @x532 $x607)))
 (let (($x691 (>= ?x219 0)))
 (let ((@x614 ((_ th-lemma arith) (hypothesis (not $x691)) @x397 @x560 @x397 @x560 @x403 @x443 @x397 @x560 @x403 @x443 @x534 @x330 @x397 @x560 @x534 @x330 @x403 @x443 @x531 @x429 false)))
 (let ((@x732 (lemma @x614 $x691)))
 (let (($x128 (not (<= ?x226 0))))
 (let (($x539 (>= ?x226 0)))
 (let (($x622 (= ?x219 0)))
 (let ((@x722 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x622 (not $x607) (not $x691))) @x732 (or $x622 (not $x607)))))
 (let ((@x705 (hypothesis $x622)))
 (let ((@x609 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x539)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x622) $x691)) @x705 $x691) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x622) $x607)) @x705 $x607) false)))
 (let ((@x719 (unit-resolution (lemma @x609 (or (not $x622) $x539)) (unit-resolution @x722 @x692 $x622) $x539)))
 (let ((@x703 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x652 $x128 (not $x539))) (and-elim @x392 $x227) (or $x128 (not $x539)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x703 @x719 $x128) @x732 @x692 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 52
 :arith-assert-diseq        6
 :arith-assert-lower        233
 :arith-assert-upper        248
 :arith-bound-prop          1
 :arith-branch-var          10
 :arith-conflicts           21
 :arith-eq-adapter          13
 :arith-fixed-eqs           55
 :arith-gcd-tests           82
 :arith-gomory-cuts         4
 :arith-grobner             23
 :arith-ineq-splits         10
 :arith-max-min             2210
 :arith-nonlinear-bounds    103
 :arith-nonlinear-horner    257
 :arith-num-rows            19
 :arith-patches             21
 :arith-patches_succ        2
 :arith-pivots              490
 :arith-pseudo-nonlinear    52
 :arith-row-summations      3490
 :arith-tableau-max-columns 69
 :arith-tableau-max-rows    19
 :conflicts                 21
 :decisions                 71
 :del-clause                61
 :final-checks              64
 :max-memory                3.84
 :memory                    3.19
 :minimized-lits            2
 :mk-bool-var               130
 :mk-clause                 97
 :num-allocs                3705654
 :num-checks                1
 :propagations              51
 :rlimit-count              180460
 :time                      0.04
 :total-time                0.05)
