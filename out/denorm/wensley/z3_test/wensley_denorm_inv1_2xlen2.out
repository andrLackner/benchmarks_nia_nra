unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun a!8 () Real)
(declare-fun b!7 () Real)
(declare-fun d!6 () Real)
(proof
(let ((?x877 (* 2.0 (* b00 y!5))))
 (let ((?x1409 (* (- 1.0) (* d00 a!8))))
 (let ((?x88 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x217 (+ ?x30 ?x88 ?x1409 ?x877)))
 (let (($x172 (>= ?x217 0.0)))
 (let (($x456 (= 0.0 ?x217)))
 (let ((@x1023 (symm (commutativity (= $x456 (= ?x217 0.0))) (= (= ?x217 0.0) $x456))))
 (let (($x620 (= ?x217 0.0)))
 (let ((?x538 (* (- 2.0) (* y!5 b!7))))
 (let ((?x788 (+ (* a!8 d!6) ?x538 (* (- 1.0) (* a00 d!6)) (* 2.0 (* y00 b!7)))))
 (let ((?x1496 (* (- 1.0) (* d00 b!7))))
 (let ((?x920 (* b00 d!6)))
 (let ((?x414 (+ ?x920 ?x1496)))
 (let (($x196 (= ?x414 0.0)))
 (let ((?x415 (* (- 1.0) (* y!5 y!5 b!7 b!7 b!7))))
 (let ((?x775 (+ (* (- 3.0) (* a!8 a!8 y!5 b!7 d!6)) (* (/ 3.0 4.0) (* a!8 y!5 y!5 b!7 b!7 d!6 d!6)) (* (/ 1.0 32.0) (* a!8 a!8 b!7 d!6 d!6 d!6 d!6)) (* (- (/ 3.0 4.0)) (* a!8 b!7 b!7 d!6 d!6)) (* (/ 1.0 4.0) (* a!8 a!8 y!5 y!5 y!5 b!7 d!6)) (* (/ 1.0 32.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6)) (* (- 3.0) (* a!8 y!5 b!7 b!7 d!6)) (* (- 1.0) (* y!5 b!7 b!7 b!7 d!6)) (* (- (/ 1.0 4.0)) (* b!7 b!7 b!7 d!6 d!6)) (* (- (/ 3.0 4.0)) (* a!8 a!8 b!7 d!6 d!6)) (* (- 1.0) (* a!8 a!8 a!8 y!5 y!5)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 b!7 b!7 b!7 d!6)) (* (/ 1.0 2.0) (* a!8 y!5 y!5 y!5 b!7 b!7 d!6)) (* (/ 3.0 8.0) (* y!5 y!5 b!7 b!7 b!7 d!6 d!6)) (* (/ 3.0 8.0) (* a!8 a!8 y!5 y!5 b!7 d!6 d!6)) (* (/ 3.0 16.0) (* y!5 b!7 b!7 b!7 d!6 d!6 d!6)) ?x415 (* (/ 3.0 8.0) (* a!8 y!5 b!7 b!7 d!6 d!6 d!6)) (* (/ 3.0 16.0) (* a!8 a!8 y!5 b!7 d!6 d!6 d!6)) (* (/ 1.0 16.0) (* a!8 b!7 b!7 d!6 d!6 d!6 d!6)) (* (- 3.0) (* a!8 y!5 y!5 b!7 b!7)) (* (- 1.0) (* a!8 a!8 a!8 y!5 d!6)) (* (- 3.0) (* a!8 a!8 y!5 y!5 b!7)) (* (- (/ 1.0 4.0)) (* a!8 a!8 a!8 d!6 d!6)))))
 (let ((?x608 (+ (* (/ 1.0 4.0) (* a!8 a!8 y!5 b!7 d!6)) (* (/ 1.0 8.0) (* a!8 a!8 a!8 y!5 d!6 d!6 d!6 d!6)) (* (/ 3.0 8.0) (* a!8 y!5 y!5 b!7 b!7 d!6 d!6 d!6)) (* (/ 1.0 8.0) (* y!5 b!7 b!7 b!7 d!6 d!6 d!6 d!6)) (* (/ 1.0 4.0) (* a!8 b!7 b!7 d!6 d!6)) (* (/ 1.0 32.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6)) (* (/ 1.0 2.0) (* a!8 y!5 b!7 b!7 d!6)) (* (/ 1.0 4.0) (* y!5 b!7 b!7 b!7 d!6)) (* (/ 1.0 8.0) (* b!7 b!7 b!7 d!6 d!6)) (* (/ 1.0 8.0) (* a!8 a!8 b!7 d!6 d!6)) (* (/ 1.0 8.0) (* y!5 y!5 b!7 b!7 b!7 d!6 d!6 d!6)) (* (/ 3.0 8.0) (* a!8 a!8 y!5 y!5 b!7 d!6 d!6 d!6)) (* (/ 3.0 8.0) (* a!8 y!5 b!7 b!7 d!6 d!6 d!6 d!6)) (* (/ 3.0 8.0) (* a!8 a!8 y!5 b!7 d!6 d!6 d!6 d!6)) (* (/ 3.0 32.0) (* a!8 b!7 b!7 d!6 d!6 d!6 d!6 d!6)) (* (/ 1.0 32.0) (* a!8 a!8 a!8 d!6 d!6 d!6 d!6 d!6)) (* (/ 3.0 32.0) (* a!8 a!8 b!7 d!6 d!6 d!6 d!6 d!6)) (* (/ 1.0 8.0) (* a!8 a!8 a!8 y!5 y!5 d!6 d!6 d!6)))))
 (let (($x1494 (= (* ?x608 ?x775 (+ ?x30 ?x88 ?x1409 ?x920 ?x877 ?x1496)) 0.0)))
 (let (($x1435 (not $x1494)))
 (let ((?x980 (* a00 d00 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 b!7 b!7 d!6 d!6)))
 (let ((?x963 (* d00 a!8 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 b!7 d!6)))
 (let ((?x870 (* d00 a!8 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 y!5 b!7 d!6 d!6 d!6 d!6)))
 (let ((?x603 (* d00 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 b!7 b!7 d!6 d!6)))
 (let ((?x487 (* b00 a!8 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x474 (* b00 y00 a!8 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x457 (* b00 y00 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 b!7 d!6)))
 (let ((?x455 (* a00 d00 a!8 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x453 (* b00 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 y!5 y!5 b!7 d!6 d!6 d!6 d!6)))
 (let ((?x449 (* b00 y00 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 y!5 b!7 d!6 d!6 d!6 d!6)))
 (let ((?x427 (* a00 d00 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 y!5 b!7 d!6 d!6 d!6 d!6)))
 (let ((?x426 (* b00 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 b!7 d!6)))
 (let ((?x393 (* a00 d00 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 b!7 d!6)))
 (let ((?x261 (* d00 a!8 a!8 a!8 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x175 (* b00 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 y!5 b!7 b!7 d!6 d!6)))
 (let ((?x154 (* b00 y00 a!8 a!8 a!8 a!8 y!5 y!5 y!5 y!5 b!7 b!7 d!6 d!6)))
 (let ((?x216 (+ (* (/ 1.0 8.0) ?x154) (* (- (/ 1.0 8.0)) ?x175) (* (- (/ 1.0 8.0)) ?x261) (* (/ 1.0 4.0) ?x393) (* (/ 1.0 2.0) ?x426) (* (- (/ 1.0 32.0)) ?x427) (* (/ 1.0 16.0) ?x449) (* (- (/ 1.0 16.0)) ?x453) (* (/ 1.0 8.0) ?x455) (* (- (/ 1.0 2.0)) ?x457) (* (- (/ 1.0 4.0)) ?x474) (* (/ 1.0 4.0) ?x487) (* (/ 1.0 16.0) ?x603) (* (/ 1.0 32.0) ?x870) (* (- (/ 1.0 4.0)) ?x963) (* (- (/ 1.0 16.0)) ?x980))))
 (let (($x557 (= ?x216 0.0)))
 (let (($x406 (not $x557)))
 (let (($x922 (or $x406 $x1435)))
 (let (($x666 (and $x922 $x620 $x196 (= ?x788 0.0))))
 (let ((?x971 (+ (* d!6 a!8) ?x538 (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x514 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x88 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x903 (* d!6 b00)))
 (let ((?x500 (* 2.0 (* y!5 b00))))
 (let ((?x1219 (* (- 1.0) (* a!8 d00))))
 (let ((?x1214 (+ (* (/ 1.0 4.0) (* y!5 y!5 y!5 d!6 b!7 a!8 a!8)) (* (- 1.0) (* y!5 y!5 a!8 a!8 a!8)) (* (- 3.0) (* y!5 d!6 b!7 a!8 a!8)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 d!6 b!7 b!7 b!7)) (* (/ 1.0 2.0) (* y!5 y!5 y!5 d!6 b!7 b!7 a!8)) (* (/ 3.0 8.0) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 4.0) (* y!5 y!5 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 8.0) (* y!5 y!5 d!6 d!6 b!7 a!8 a!8)) (* (/ 3.0 16.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 8.0) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 16.0) (* y!5 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 16.0) (* d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 b!7 a!8 a!8)) ?x415 (* (- 3.0) (* y!5 y!5 b!7 b!7 a!8)) (* (- 3.0) (* y!5 y!5 b!7 a!8 a!8)) (* (- 1.0) (* y!5 d!6 b!7 b!7 b!7)) (* (- 3.0) (* y!5 d!6 b!7 b!7 a!8)) (* (- 1.0) (* y!5 d!6 a!8 a!8 a!8)) (* (- (/ 1.0 4.0)) (* d!6 d!6 b!7 b!7 b!7)) (* (- (/ 3.0 4.0)) (* d!6 d!6 b!7 b!7 a!8)) (* (- (/ 3.0 4.0)) (* d!6 d!6 b!7 a!8 a!8)) (* (- (/ 1.0 4.0)) (* d!6 d!6 a!8 a!8 a!8)))))
 (let ((?x1495 (+ (* (/ 1.0 4.0) (* y!5 d!6 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* y!5 y!5 d!6 d!6 d!6 a!8 a!8 a!8)) (* (/ 1.0 4.0) (* y!5 d!6 b!7 b!7 b!7)) (* (/ 1.0 2.0) (* y!5 d!6 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 8.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 8.0) (* y!5 y!5 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 8.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 8.0) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* y!5 d!6 d!6 d!6 d!6 a!8 a!8 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 32.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 32.0) (* d!6 d!6 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 d!6 a!8 a!8 a!8)))))
 (let ((?x756 (* ?x1495 ?x1214 (+ ?x30 ?x1219 ?x88 ?x500 (* (- 1.0) (* b!7 d00)) ?x903))))
 (let ((?x1394 (* y!5 y!5 y!5 y!5 y!5 d!6 d!6 d!6 a!8 a!8 a!8 a!8 a!8 a!8 b00)))
 (let ((?x1390 (* y!5 y!5 y!5 y!5 d!6 d!6 d!6 a!8 a!8 a!8 a!8 a!8 a!8 b00 y00)))
 (let ((?x499 (* y!5 y!5 y!5 y!5 d!6 d!6 d!6 a!8 a!8 a!8 a!8 a!8 a!8 a!8 d00)))
 (let ((?x1305 (* y!5 y!5 y!5 y!5 d!6 d!6 d!6 a!8 a!8 a!8 a!8 a!8 a!8 a00 d00)))
 (let ((?x476 (* y!5 y!5 y!5 y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8 a!8 a!8 a!8 b00)))
 (let ((?x461 (* y!5 y!5 y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8 a!8 a!8 a!8 b00 y00)))
 (let ((?x970 (* y!5 y!5 y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8 a!8 a!8 a!8 a!8 d00)))
 (let ((?x263 (* y!5 y!5 y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8 a!8 a!8 a!8 a00 d00)))
 (let ((?x1035 (* y!5 y!5 y!5 y!5 d!6 b!7 a!8 a!8 a!8 a!8 a!8 b00)))
 (let ((?x1059 (* y!5 y!5 y!5 d!6 b!7 a!8 a!8 a!8 a!8 a!8 b00 y00)))
 (let ((?x295 (* y!5 y!5 y!5 d!6 b!7 a!8 a!8 a!8 a!8 a!8 a!8 d00)))
 (let ((?x734 (* y!5 y!5 y!5 d!6 b!7 a!8 a!8 a!8 a!8 a!8 a00 d00)))
 (let ((?x769 (* y!5 y!5 y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a!8 b00)))
 (let ((?x1002 (* y!5 y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a!8 b00 y00)))
 (let ((?x1005 (* y!5 y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a!8 a!8 d00)))
 (let ((?x1277 (* y!5 y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a!8 a00 d00)))
 (let ((?x1503 (+ (* (/ 1.0 16.0) ?x1277) (* (- (/ 1.0 16.0)) ?x1005) (* (- (/ 1.0 8.0)) ?x1002) (* (/ 1.0 8.0) ?x769) (* (- (/ 1.0 4.0)) ?x734) (* (/ 1.0 4.0) ?x295) (* (/ 1.0 2.0) ?x1059) (* (- (/ 1.0 2.0)) ?x1035) (* (/ 1.0 32.0) ?x263) (* (- (/ 1.0 32.0)) ?x970) (* (- (/ 1.0 16.0)) ?x461) (* (/ 1.0 16.0) ?x476) (* (- (/ 1.0 8.0)) ?x1305) (* (/ 1.0 8.0) ?x499) (* (/ 1.0 4.0) ?x1390) (* (- (/ 1.0 4.0)) ?x1394))))
 (let (($x973 (and (or (not (= ?x1503 0.0)) (not (= ?x756 0.0))) $x514 (= (+ (* b!7 d00) (* (- 1.0) ?x903)) 0.0) (= ?x971 0.0))))
 (let (($x1527 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x155 (* (- 2.0) (* y b))))
 (let ((?x133 (* d a)))
 (let (($x190 (= (+ ?x133 ?x155 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x126 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x94 (* 2.0 (* y b00))))
 (let ((?x88 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x109 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x120 (= (+ ?x30 ?x109 ?x88 ?x94) 0.0)))
 (let ((?x183 (* (- 1.0) (* y y a a a))))
 (let ((?x171 (* (/ 1.0 4.0) (* y y y d b a a))))
 (let ((?x1056 (+ ?x171 ?x183 (* (- 3.0) (* y d b a a)) (* (/ 1.0 4.0) (* y y y d b b b)) (* (/ 1.0 2.0) (* y y y d b b a)) (* (/ 3.0 8.0) (* y y d d b b b)) (* (/ 3.0 4.0) (* y y d d b b a)) (* (/ 3.0 8.0) (* y y d d b a a)) (* (/ 3.0 16.0) (* y d d d b b b)) (* (/ 3.0 8.0) (* y d d d b b a)) (* (/ 3.0 16.0) (* y d d d b a a)) (* (/ 1.0 32.0) (* d d d d b b b)) (* (/ 1.0 16.0) (* d d d d b b a)) (* (/ 1.0 32.0) (* d d d d b a a)) (* (- 1.0) (* y y b b b)) (* (- 3.0) (* y y b b a)) (* (- 3.0) (* y y b a a)) (* (- 1.0) (* y d b b b)) (* (- 3.0) (* y d b b a)) (* (- 1.0) (* y d a a a)) (* (- (/ 1.0 4.0)) (* d d b b b)) (* (- (/ 3.0 4.0)) (* d d b b a)) (* (- (/ 3.0 4.0)) (* d d b a a)) (* (- (/ 1.0 4.0)) (* d d a a a)))))
 (let ((?x223 (* (/ 1.0 8.0) (* y y d d d a a a))))
 (let ((?x204 (* y d b a a)))
 (let ((?x207 (* (/ 1.0 4.0) ?x204)))
 (let ((?x1474 (+ ?x207 ?x223 (* (/ 1.0 4.0) (* y d b b b)) (* (/ 1.0 2.0) (* y d b b a)) (* (/ 1.0 8.0) (* d d b b b)) (* (/ 1.0 4.0) (* d d b b a)) (* (/ 1.0 8.0) (* d d b a a)) (* (/ 1.0 8.0) (* y y d d d b b b)) (* (/ 3.0 8.0) (* y y d d d b b a)) (* (/ 3.0 8.0) (* y y d d d b a a)) (* (/ 1.0 8.0) (* y d d d d b b b)) (* (/ 3.0 8.0) (* y d d d d b b a)) (* (/ 3.0 8.0) (* y d d d d b a a)) (* (/ 1.0 8.0) (* y d d d d a a a)) (* (/ 1.0 32.0) (* d d d d d b b b)) (* (/ 3.0 32.0) (* d d d d d b b a)) (* (/ 3.0 32.0) (* d d d d d b a a)) (* (/ 1.0 32.0) (* d d d d d a a a)))))
 (let ((?x1558 (* ?x1474 ?x1056 (+ ?x30 ?x109 ?x88 ?x94 (* (- 1.0) (* b d00)) (* d b00)))))
 (let ((?x396 (* y y y y y d d d a a a a a a b00)))
 (let ((?x386 (* y y y y d d d a a a a a a b00 y00)))
 (let ((?x376 (* y y y y d d d a a a a a a a d00)))
 (let ((?x366 (* y y y y d d d a a a a a a a00 d00)))
 (let ((?x356 (* y y y y y y d d d d b a a a a a b00)))
 (let ((?x346 (* y y y y y d d d d b a a a a a b00 y00)))
 (let ((?x336 (* y y y y y d d d d b a a a a a a d00)))
 (let ((?x325 (* y y y y y d d d d b a a a a a a00 d00)))
 (let ((?x317 (* (- (/ 1.0 2.0)) (* y y y y d b a a a a a b00))))
 (let ((?x306 (* (/ 1.0 2.0) (* y y y d b a a a a a b00 y00))))
 (let ((?x296 (* (/ 1.0 4.0) (* y y y d b a a a a a a d00))))
 (let ((?x286 (* (- (/ 1.0 4.0)) (* y y y d b a a a a a a00 d00))))
 (let ((?x272 (* y y y y y d d b b a a a a b00)))
 (let ((?x262 (* y y y y d d b b a a a a b00 y00)))
 (let ((?x251 (* y y y y d d b b a a a a a d00)))
 (let ((?x240 (* y y y y d d b b a a a a a00 d00)))
 (let ((?x401 (+ (* (/ 1.0 16.0) ?x240) (* (- (/ 1.0 16.0)) ?x251) (* (- (/ 1.0 8.0)) ?x262) (* (/ 1.0 8.0) ?x272) ?x286 ?x296 ?x306 ?x317 (* (/ 1.0 32.0) ?x325) (* (- (/ 1.0 32.0)) ?x336) (* (- (/ 1.0 16.0)) ?x346) (* (/ 1.0 16.0) ?x356) (* (- (/ 1.0 8.0)) ?x366) (* (/ 1.0 8.0) ?x376) (* (/ 1.0 4.0) ?x386) (* (- (/ 1.0 4.0)) ?x396))))
 (let (($x151 (not (= ?x401 0.0))))
 (and (or $x151 (not (= ?x1558 0.0))) $x120 $x126 $x190))))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x92 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x155 (* (- 2.0) (* y b))))
 (let ((?x133 (* d a)))
 (let (($x448 (= (+ ?x133 ?x155 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x579 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x170 (* 2.0 (* b00 y))))
 (let ((?x30 (* a00 d00)))
 (let ((?x88 (* (- 2.0) (* b00 y00))))
 (let ((?x141 (+ ?x88 ?x30 ?x170 (* (- 1.0) (* d00 a)))))
 (let (($x508 (= ?x141 0.0)))
 (let ((?x478 (+ ?x88 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x146 (* (/ 1.0 2.0) d)))
 (let ((?x646 (+ y ?x146)))
 (let ((?x65 (+ a b)))
 (let ((?x1082 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 ?x646 ?x646 d b)) (* (- 1.0) (* ?x65 ?x65 ?x65 ?x646 ?x646)))))
 (let ((?x114 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 d b)) (* (/ 1.0 8.0) (* ?x65 ?x65 ?x65 ?x646 ?x646 d d d)))))
 (let ((?x183 (* (- 1.0) (* y y a a a))))
 (let ((?x171 (* (/ 1.0 4.0) (* y y y d b a a))))
 (let ((?x223 (* (/ 1.0 8.0) (* y y d d d a a a))))
 (let ((?x204 (* y d b a a)))
 (let ((?x207 (* (/ 1.0 4.0) ?x204)))
 (let (($x1111 (or (not (= (* (+ ?x207 ?x223) (+ ?x171 ?x183) ?x141) 0.0)) (not (= (* ?x114 ?x1082 ?x478) 0.0)))))
 (and $x1111 $x508 $x579 $x448)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1540 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x155 (* (- 2.0) (* y b))))
 (let ((?x133 (* d a)))
 (let (($x190 (= (+ ?x133 ?x155 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x126 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x94 (* 2.0 (* y b00))))
 (let ((?x88 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x109 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x120 (= (+ ?x30 ?x109 ?x88 ?x94) 0.0)))
 (let ((?x183 (* (- 1.0) (* y y a a a))))
 (let ((?x171 (* (/ 1.0 4.0) (* y y y d b a a))))
 (let ((?x1056 (+ ?x171 ?x183 (* (- 3.0) (* y d b a a)) (* (/ 1.0 4.0) (* y y y d b b b)) (* (/ 1.0 2.0) (* y y y d b b a)) (* (/ 3.0 8.0) (* y y d d b b b)) (* (/ 3.0 4.0) (* y y d d b b a)) (* (/ 3.0 8.0) (* y y d d b a a)) (* (/ 3.0 16.0) (* y d d d b b b)) (* (/ 3.0 8.0) (* y d d d b b a)) (* (/ 3.0 16.0) (* y d d d b a a)) (* (/ 1.0 32.0) (* d d d d b b b)) (* (/ 1.0 16.0) (* d d d d b b a)) (* (/ 1.0 32.0) (* d d d d b a a)) (* (- 1.0) (* y y b b b)) (* (- 3.0) (* y y b b a)) (* (- 3.0) (* y y b a a)) (* (- 1.0) (* y d b b b)) (* (- 3.0) (* y d b b a)) (* (- 1.0) (* y d a a a)) (* (- (/ 1.0 4.0)) (* d d b b b)) (* (- (/ 3.0 4.0)) (* d d b b a)) (* (- (/ 3.0 4.0)) (* d d b a a)) (* (- (/ 1.0 4.0)) (* d d a a a)))))
 (let ((?x223 (* (/ 1.0 8.0) (* y y d d d a a a))))
 (let ((?x204 (* y d b a a)))
 (let ((?x207 (* (/ 1.0 4.0) ?x204)))
 (let ((?x1474 (+ ?x207 ?x223 (* (/ 1.0 4.0) (* y d b b b)) (* (/ 1.0 2.0) (* y d b b a)) (* (/ 1.0 8.0) (* d d b b b)) (* (/ 1.0 4.0) (* d d b b a)) (* (/ 1.0 8.0) (* d d b a a)) (* (/ 1.0 8.0) (* y y d d d b b b)) (* (/ 3.0 8.0) (* y y d d d b b a)) (* (/ 3.0 8.0) (* y y d d d b a a)) (* (/ 1.0 8.0) (* y d d d d b b b)) (* (/ 3.0 8.0) (* y d d d d b b a)) (* (/ 3.0 8.0) (* y d d d d b a a)) (* (/ 1.0 8.0) (* y d d d d a a a)) (* (/ 1.0 32.0) (* d d d d d b b b)) (* (/ 3.0 32.0) (* d d d d d b b a)) (* (/ 3.0 32.0) (* d d d d d b a a)) (* (/ 1.0 32.0) (* d d d d d a a a)))))
 (let ((?x1558 (* ?x1474 ?x1056 (+ ?x30 ?x109 ?x88 ?x94 (* (- 1.0) (* b d00)) (* d b00)))))
 (let ((?x396 (* y y y y y d d d a a a a a a b00)))
 (let ((?x386 (* y y y y d d d a a a a a a b00 y00)))
 (let ((?x376 (* y y y y d d d a a a a a a a d00)))
 (let ((?x366 (* y y y y d d d a a a a a a a00 d00)))
 (let ((?x356 (* y y y y y y d d d d b a a a a a b00)))
 (let ((?x346 (* y y y y y d d d d b a a a a a b00 y00)))
 (let ((?x336 (* y y y y y d d d d b a a a a a a d00)))
 (let ((?x325 (* y y y y y d d d d b a a a a a a00 d00)))
 (let ((?x317 (* (- (/ 1.0 2.0)) (* y y y y d b a a a a a b00))))
 (let ((?x306 (* (/ 1.0 2.0) (* y y y d b a a a a a b00 y00))))
 (let ((?x296 (* (/ 1.0 4.0) (* y y y d b a a a a a a d00))))
 (let ((?x286 (* (- (/ 1.0 4.0)) (* y y y d b a a a a a a00 d00))))
 (let ((?x272 (* y y y y y d d b b a a a a b00)))
 (let ((?x262 (* y y y y d d b b a a a a b00 y00)))
 (let ((?x251 (* y y y y d d b b a a a a a d00)))
 (let ((?x240 (* y y y y d d b b a a a a a00 d00)))
 (let ((?x401 (+ (* (/ 1.0 16.0) ?x240) (* (- (/ 1.0 16.0)) ?x251) (* (- (/ 1.0 8.0)) ?x262) (* (/ 1.0 8.0) ?x272) ?x286 ?x296 ?x306 ?x317 (* (/ 1.0 32.0) ?x325) (* (- (/ 1.0 32.0)) ?x336) (* (- (/ 1.0 16.0)) ?x346) (* (/ 1.0 16.0) ?x356) (* (- (/ 1.0 8.0)) ?x366) (* (/ 1.0 8.0) ?x376) (* (/ 1.0 4.0) ?x386) (* (- (/ 1.0 4.0)) ?x396))))
 (let (($x151 (not (= ?x401 0.0))))
 (let (($x1526 (and (or $x151 (not (= ?x1558 0.0))) $x120 $x126 $x190)))
 (let (($x448 (= (+ ?x133 ?x155 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x579 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x170 (* 2.0 (* b00 y))))
 (let ((?x141 (+ ?x88 ?x30 ?x170 (* (- 1.0) (* d00 a)))))
 (let (($x508 (= ?x141 0.0)))
 (let ((?x478 (+ ?x88 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x146 (* (/ 1.0 2.0) d)))
 (let ((?x646 (+ y ?x146)))
 (let ((?x65 (+ a b)))
 (let ((?x1082 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 ?x646 ?x646 d b)) (* (- 1.0) (* ?x65 ?x65 ?x65 ?x646 ?x646)))))
 (let ((?x114 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 d b)) (* (/ 1.0 8.0) (* ?x65 ?x65 ?x65 ?x646 ?x646 d d d)))))
 (let (($x1111 (or (not (= (* (+ ?x207 ?x223) (+ ?x171 ?x183) ?x141) 0.0)) (not (= (* ?x114 ?x1082 ?x478) 0.0)))))
 (let (($x372 (and $x1111 $x508 $x579 $x448)))
 (rewrite (= $x372 $x1526)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x363 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x88 (* (- 2.0) (* b00 y00))))
 (let ((?x478 (+ ?x88 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x146 (* (/ 1.0 2.0) d)))
 (let ((?x646 (+ y ?x146)))
 (let ((?x65 (+ a b)))
 (let ((?x1082 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 ?x646 ?x646 d b)) (* (- 1.0) (* ?x65 ?x65 ?x65 ?x646 ?x646)))))
 (let ((?x114 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 d b)) (* (/ 1.0 8.0) (* ?x65 ?x65 ?x65 ?x646 ?x646 d d d)))))
 (let ((?x170 (* 2.0 (* b00 y))))
 (let ((?x141 (+ ?x88 ?x30 ?x170 (* (- 1.0) (* d00 a)))))
 (let ((?x183 (* (- 1.0) (* y y a a a))))
 (let ((?x171 (* (/ 1.0 4.0) (* y y y d b a a))))
 (let ((?x223 (* (/ 1.0 8.0) (* y y d d d a a a))))
 (let ((?x204 (* y d b a a)))
 (let ((?x207 (* (/ 1.0 4.0) ?x204)))
 (let (($x1111 (or (not (= (* (+ ?x207 ?x223) (+ ?x171 ?x183) ?x141) 0.0)) (not (= (* ?x114 ?x1082 ?x478) 0.0)))))
 (let ((?x155 (* (- 2.0) (* y b))))
 (let ((?x133 (* d a)))
 (let (($x448 (= (+ ?x133 ?x155 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x579 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x508 (= ?x141 0.0)))
 (and $x508 $x579 $x448 $x1111)))))))))))))))))))))) :qid k!33))
 ))
 (let (($x79 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x52 (/ d 2.0)))
 (let ((?x62 (+ y ?x52)))
 (let ((?x65 (+ a b)))
 (let ((?x73 (+ (* ?x65 ?x65 (/ b 2.0) ?x52 ?x62) (* ?x65 ?x65 ?x65 ?x52 ?x52 ?x52 ?x62 ?x62))))
 (let ((?x70 (- (* ?x65 ?x65 (/ b 2.0) ?x52 ?x62 ?x62 ?x62) (* ?x65 ?x65 ?x65 ?x62 ?x62))))
 (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x74 (* (- (+ ?x27 ?x30 (* 2.0 b00 ?x62)) (* ?x65 d00)) ?x70 ?x73)))
 (let ((?x58 (+ (* a a (/ b 2.0) ?x52 y) (* a a a ?x52 ?x52 ?x52 y y))))
 (let ((?x55 (- (* a a (/ b 2.0) ?x52 y y y) (* a a a y y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ ?x27 ?x30 (* 2.0 b00 y)) ?x33)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x34 ?x55 ?x58) 0.0)) (not (= ?x74 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x537 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x88 (* (- 2.0) (* b00 y00))))
 (let ((?x478 (+ ?x88 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x146 (* (/ 1.0 2.0) d)))
 (let ((?x646 (+ y ?x146)))
 (let ((?x65 (+ a b)))
 (let ((?x1082 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 ?x646 ?x646 d b)) (* (- 1.0) (* ?x65 ?x65 ?x65 ?x646 ?x646)))))
 (let ((?x114 (+ (* (/ 1.0 4.0) (* ?x65 ?x65 ?x646 d b)) (* (/ 1.0 8.0) (* ?x65 ?x65 ?x65 ?x646 ?x646 d d d)))))
 (let ((?x170 (* 2.0 (* b00 y))))
 (let ((?x141 (+ ?x88 ?x30 ?x170 (* (- 1.0) (* d00 a)))))
 (let ((?x183 (* (- 1.0) (* y y a a a))))
 (let ((?x171 (* (/ 1.0 4.0) (* y y y d b a a))))
 (let ((?x223 (* (/ 1.0 8.0) (* y y d d d a a a))))
 (let ((?x204 (* y d b a a)))
 (let ((?x207 (* (/ 1.0 4.0) ?x204)))
 (let (($x1111 (or (not (= (* (+ ?x207 ?x223) (+ ?x171 ?x183) ?x141) 0.0)) (not (= (* ?x114 ?x1082 ?x478) 0.0)))))
 (let ((?x155 (* (- 2.0) (* y b))))
 (let ((?x133 (* d a)))
 (let (($x448 (= (+ ?x133 ?x155 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x579 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x508 (= ?x141 0.0)))
 (let (($x1255 (and $x508 $x579 $x448 $x1111)))
 (let ((?x52 (/ d 2.0)))
 (let ((?x62 (+ y ?x52)))
 (let ((?x73 (+ (* ?x65 ?x65 (/ b 2.0) ?x52 ?x62) (* ?x65 ?x65 ?x65 ?x52 ?x52 ?x52 ?x62 ?x62))))
 (let ((?x70 (- (* ?x65 ?x65 (/ b 2.0) ?x52 ?x62 ?x62 ?x62) (* ?x65 ?x65 ?x65 ?x62 ?x62))))
 (let ((?x67 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 ?x62)) (* ?x65 d00))))
 (let ((?x58 (+ (* a a (/ b 2.0) ?x52 y) (* a a a ?x52 ?x52 ?x52 y y))))
 (let ((?x55 (- (* a a (/ b 2.0) ?x52 y y y) (* a a a y y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33)))
 (let (($x77 (or (not (= (* ?x34 ?x55 ?x58) 0.0)) (not (= (* ?x67 ?x70 ?x73) 0.0)))))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x78 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) $x77)))
 (rewrite (= $x78 $x1255))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x80 (asserted $x79)))
 (let ((@x96 (mp (mp @x80 (quant-intro (proof-bind ?x537) (= $x79 $x363)) $x363) (rewrite (= $x363 $x92)) $x92)))
 (let ((@x978 (mp~ (mp @x96 (quant-intro (proof-bind ?x1540) (= $x92 $x1527)) $x1527) (sk (~ $x1527 $x973)) $x973)))
 (let ((@x1036 (mp @x978 (rewrite (= $x973 $x666)) $x666)))
 (let ((@x933 (mp (and-elim @x1036 $x620) @x1023 $x456)))
 (let ((@x205 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x172)) @x933 $x172)))
 (let (($x588 (<= ?x217 0.0)))
 (let ((@x1033 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x588)) @x933 $x588)))
 (let (($x586 (>= ?x216 0.0)))
 (let (($x1048 (not $x586)))
 (let (($x936 (<= ?x216 0.0)))
 (let ((@x816 (unit-resolution ((_ th-lemma arith) (or (not $x588) (not $x172) $x936)) (hypothesis (not $x936)) @x1033 @x205 false)))
 (let (($x929 (= 0.0 ?x216)))
 (let (($x444 (not $x929)))
 (let ((@x462 (monotonicity (symm (commutativity (= $x929 $x557)) (= $x557 $x929)) (= $x406 $x444))))
 (let ((?x432 (+ ?x877 ?x1496 ?x30 ?x88 ?x1409 ?x920)))
 (let (($x731 (= ?x432 0.0)))
 (let (($x271 (>= ?x414 0.0)))
 (let (($x402 (= 0.0 ?x414)))
 (let ((@x631 (mp (and-elim @x1036 $x196) (symm (commutativity (= $x402 $x196)) (= $x196 $x402)) $x402)))
 (let (($x428 (<= ?x414 0.0)))
 (let ((@x1062 ((_ th-lemma arith) @x1033 @x205 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x402) $x428)) @x631 $x428) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x402) $x271)) @x631 $x271) (= 0.0 ?x432))))
 (let (($x776 (or (not $x731) $x1494)))
 (let ((@x391 (unit-resolution ((_ th-lemma arith) $x776) (hypothesis $x1435) (hypothesis $x731) false)))
 (let ((@x450 (unit-resolution (and-elim @x1036 $x922) (unit-resolution (lemma @x391 $x776) (symm @x1062 $x731) $x1494) $x406)))
 (let ((@x489 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x929 (not $x936) $x1048)) (mp @x450 @x462 $x444) (or (not $x936) $x1048))))
 (unit-resolution ((_ th-lemma arith) (or (not $x588) (not $x172) $x586)) (unit-resolution @x489 (lemma @x816 $x936) $x1048) @x1033 @x205 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       40
 :arith-eq-adapter                36
 :arith-bound-propagations-lp     16
 :arith-conflicts                 191
 :arith-diseq                     110
 :arith-grobner-calls             6
 :arith-grobner-conflicts         2
 :arith-horner-calls              7
 :arith-horner-conflicts          1
 :arith-horner-cross-nested-forms 158
 :arith-lower                     255
 :arith-make-feasible             291
 :arith-max-columns               135
 :arith-max-rows                  59
 :arith-nla-explanations          241
 :arith-nla-lemmas                180
 :arith-nra-calls                 3
 :arith-offset-eqs                3
 :arith-upper                     223
 :conflicts                       29
 :decisions                       482
 :del-clause                      292
 :final-checks                    98
 :max-memory                      22.31
 :memory                          17.51
 :mk-bool-var                     495
 :mk-clause                       359
 :num-allocs                      25575167359.00
 :num-checks                      1
 :propagations                    299
 :rlimit-count                    26002
 :time                            2.46
 :total-time                      2.47)
