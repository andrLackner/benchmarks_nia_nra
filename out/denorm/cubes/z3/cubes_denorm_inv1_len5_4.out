unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x194 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x482 (>= ?x194 (- 6))))
 (let (($x198 (= ?x194 (- 6))))
 (let ((?x277 (+ k!2 c!3)))
 (let ((?x117 (+ k!2 m!1)))
 (let ((?x116 (+ 6 m!1)))
 (let ((?x119 (+ 1 n!0)))
 (let ((?x398 (* c!3 m!1 m!1)))
 (let ((?x211 (* k!2 m!1 m!1)))
 (let ((?x212 (* 2 (* k!2 k!2 m!1))))
 (let ((?x207 (* k!2 k!2 k!2)))
 (let ((?x94 (* k!2 k!2 k!2 n!0)))
 (let ((?x503 (+ ?x94 (* ?x119 ?x119 ?x119 ?x116 ?x116 ?x117 ?x117 ?x117 ?x277 ?x277 ?x277) (* ?x119 ?x116 ?x116 ?x117 ?x117 ?x277 ?x277 ?x277) ?x207 ?x212 ?x211 (* (- 1) (* ?x116 ?x116 ?x116 ?x117 ?x117 ?x277 ?x277)) (* n!0 c!3 m!1 m!1) (* 2 (* k!2 k!2 n!0 m!1)) (* 2 (* k!2 n!0 c!3 m!1)) (* k!2 k!2 n!0 c!3) ?x398 (* k!2 k!2 c!3) (* ?x119 ?x119 ?x119 ?x116 ?x116 ?x116 ?x117 ?x117 ?x117 ?x277 ?x277) (* 2 (* k!2 c!3 m!1)) (* k!2 n!0 m!1 m!1))))
 (let ((?x508 (* (+ (- 6) (* (- 6) n!0) m!1) ?x503)))
 (let (($x394 (= ?x508 0)))
 (let (($x509 (not $x394)))
 (let (($x467 (= (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0)) (- 1))))
 (let (($x376 (= (+ (* k!2 n!0) (* (- 1) k!2) (* 2 n!0) (* (- 3) c!3)) (- 1))))
 (let ((?x286 (* 18 c!3)))
 (let ((?x290 (* (- 9) n!0)))
 (let ((?x292 (* 5 k!2)))
 (let ((?x256 (* (- 1) (* k!2 k!2))))
 (let (($x157 (and $x198 (= (+ (* 9 (* n!0 c!3)) ?x256 ?x292 ?x290 ?x286) 4) $x376 $x467 $x509)))
 (let ((?x115 (+ c!3 k!2)))
 (let ((?x214 (+ (* ?x119 ?x119 ?x119 ?x116 ?x116 ?x117 ?x117 ?x117 ?x115 ?x115 ?x115) (* (- 1) (* ?x116 ?x116 ?x116 ?x117 ?x117 ?x115 ?x115)) (* ?x119 ?x116 ?x116 ?x117 ?x117 ?x115 ?x115 ?x115) ?x94 (* 2 (* c!3 k!2 m!1 n!0)) (* 2 (* k!2 k!2 m!1 n!0)) (* c!3 m!1 m!1 n!0) (* k!2 m!1 m!1 n!0) (* c!3 k!2 k!2) ?x207 (* 2 (* c!3 k!2 m!1)) ?x212 (* ?x119 ?x119 ?x119 ?x116 ?x116 ?x116 ?x117 ?x117 ?x117 ?x115 ?x115) ?x211 ?x398 (* c!3 k!2 k!2 n!0))))
 (let (($x295 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x123 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x286 ?x292 ?x290 ?x256 (* 9 (* c!3 n!0))) 4) $x295 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x214) 0)))))
 (let (($x384 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x479 (* c k k n)))
 (let ((?x474 (* c m m)))
 (let ((?x471 (* k m m)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x414 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x460 (* 2 (* k k m))))
 (let ((?x461 (* 2 (* c k m))))
 (let ((?x383 (* k k k)))
 (let ((?x380 (* c k k)))
 (let ((?x374 (* k m m n)))
 (let ((?x373 (* c m m n)))
 (let ((?x458 (* 2 (* k k m n))))
 (let ((?x459 (* 2 (* c k m n))))
 (let ((?x368 (* k k k n)))
 (let ((?x316 (* ?x318 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x488 (* (- 1) (* ?x362 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72))))
 (let ((?x104 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x111 (+ ?x104 ?x488 ?x316 ?x368 ?x459 ?x458 ?x373 ?x374 ?x380 ?x383 ?x461 ?x460 ?x414 ?x471 ?x474 ?x479)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x111) 0))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x200 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x316 (* ?x318 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x414 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x488 (* (- 1) (* ?x362 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72))))
 (let ((?x104 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x340 (not (= (* ?x118 (+ ?x104 ?x488 (* ?x318 ?x73 ?x73 ?x72) ?x414 ?x316)) 0))))
 (let (($x260 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x203 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x203 $x260 $x340)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x121 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x479 (* c k k n)))
 (let ((?x474 (* c m m)))
 (let ((?x471 (* k m m)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x414 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x460 (* 2 (* k k m))))
 (let ((?x461 (* 2 (* c k m))))
 (let ((?x383 (* k k k)))
 (let ((?x380 (* c k k)))
 (let ((?x374 (* k m m n)))
 (let ((?x373 (* c m m n)))
 (let ((?x458 (* 2 (* k k m n))))
 (let ((?x459 (* 2 (* c k m n))))
 (let ((?x368 (* k k k n)))
 (let ((?x316 (* ?x318 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x488 (* (- 1) (* ?x362 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72))))
 (let ((?x104 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x111 (+ ?x104 ?x488 ?x316 ?x368 ?x459 ?x458 ?x373 ?x374 ?x380 ?x383 ?x461 ?x460 ?x414 ?x471 ?x474 ?x479)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x170 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x111) 0)))))
 (let (($x340 (not (= (* ?x118 (+ ?x104 ?x488 (* ?x318 ?x73 ?x73 ?x72) ?x414 ?x316)) 0))))
 (let (($x260 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x203 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x276 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x203 $x260 $x340)))
 (rewrite (= $x276 $x170))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x342 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x316 (* ?x318 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x414 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x488 (* (- 1) (* ?x362 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72))))
 (let ((?x104 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x340 (not (= (* ?x118 (+ ?x104 ?x488 (* ?x318 ?x73 ?x73 ?x72) ?x414 ?x316)) 0))))
 (let (($x260 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x299 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 (= ?x289 (- 4)) $x299 $x260 $x340)))))))))))))))))) :qid k!34))
 ))
 (let ((?x205 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x316 (* ?x318 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x414 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x488 (* (- 1) (* ?x362 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72))))
 (let ((?x104 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x340 (not (= (* ?x118 (+ ?x104 ?x488 (* ?x318 ?x73 ?x73 ?x72) ?x414 ?x316)) 0))))
 (let (($x260 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x203 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x276 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x203 $x260 $x340)))
 (let (($x299 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x127 (and $x129 (= ?x289 (- 4)) $x299 $x260 $x340)))
 (rewrite (= $x127 $x276)))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x72 (+ c k)))
 (let ((?x77 (- (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74))))
 (let ((?x81 (+ ?x77 (* ?x72 ?x73 ?x73 ?x69) (* ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x69))))
 (let (($x83 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x81) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x83))))))))))))))))) :qid k!34))
 ))
 (let ((?x110 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x316 (* ?x318 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x414 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x488 (* (- 1) (* ?x362 ?x362 ?x362 ?x73 ?x73 ?x72 ?x72))))
 (let ((?x104 (* ?x318 ?x318 ?x318 ?x362 ?x362 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x340 (not (= (* ?x118 (+ ?x104 ?x488 (* ?x318 ?x73 ?x73 ?x72) ?x414 ?x316)) 0))))
 (let (($x260 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x299 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x127 (and $x129 (= ?x289 (- 4)) $x299 $x260 $x340)))
 (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x77 (- (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74))))
 (let ((?x81 (+ ?x77 (* ?x72 ?x73 ?x73 ?x69) (* ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x69))))
 (let (($x83 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x81) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x83)))))
 (rewrite (= $x86 $x127))))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x187 (mp (mp @x88 (quant-intro (proof-bind ?x110) (= $x87 $x342)) $x342) (rewrite (= $x342 $x342)) $x342)))
 (let ((@x390 (mp (mp @x187 (quant-intro (proof-bind ?x205) (= $x342 $x200)) $x200) (quant-intro (proof-bind ?x121) (= $x200 $x384)) $x384)))
 (let ((@x327 (mp (mp~ @x390 (sk (~ $x384 $x123)) $x123) (rewrite (= $x123 $x157)) $x157)))
 (let ((@x361 (and-elim @x327 $x198)))
 (let ((@x512 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x198) $x482)) @x361 $x482)))
 (let (($x455 (<= ?x194 (- 6))))
 (let ((@x404 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x198) $x455)) @x361 $x455)))
 (let (($x375 (not (<= ?x508 0))))
 (let (($x403 (>= ?x508 0)))
 (let ((@x195 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x394 $x375 (not $x403))) (and-elim @x327 $x509) (or $x375 (not $x403)))))
 (let ((@x147 (unit-resolution @x195 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x403)) @x404 @x512 false) $x403) $x375)))
 ((_ th-lemma arith farkas 1 1 1) @x147 @x404 @x512 false)))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             180
 :arith-nonlinear-bounds    3
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      7
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.62
 :memory                    3.12
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1136002
 :num-checks                1
 :propagations              11
 :rlimit-count              2841
 :time                      0.01
 :total-time                0.01)
