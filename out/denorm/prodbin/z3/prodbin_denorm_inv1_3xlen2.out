unsat
((set-logic NRA)
(declare-fun z!4 () Real)
(declare-fun x!6 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x78 (* x00 y00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x98 (* (- 1.0) z00)))
 (let ((?x619 (* y!5 x!6)))
 (let ((?x817 (+ ?x619 z!4 ?x98 ?x79)))
 (let (($x932 (= ?x817 0.0)))
 (let (($x957 (not $x932)))
 (let ((?x898 (* (- (/ 1.0 2.0)) x!6)))
 (let ((?x851 (* x!6 x!6 x!6)))
 (let ((?x893 (* (- (/ 1.0 2.0)) ?x851)))
 (let ((?x827 (* (/ 3.0 2.0) (* z!4 z!4 y!5 x!6))))
 (let ((?x622 (* (- (/ 3.0 2.0)) (* z!4 z!4 x!6))))
 (let ((?x796 (* (- (/ 1.0 2.0)) (* z!4 z!4 z!4))))
 (let ((?x203 (* (/ 3.0 2.0) (* z!4 y!5 x!6 x!6))))
 (let ((?x786 (* (- (/ 3.0 2.0)) (* z!4 x!6 x!6))))
 (let ((?x896 (* (/ 1.0 2.0) (* z!4 z!4 z!4 y!5))))
 (let ((?x514 (* y!5 x!6 x!6 x!6)))
 (let ((?x132 (* (/ 1.0 2.0) ?x514)))
 (let ((?x782 (* (- (/ 1.0 2.0)) (* y!5 y!5 x!6))))
 (let ((?x905 (* (- 1.0) (* y!5 y!5 x!6 x!6))))
 (let ((?x725 (* 3.0 (* y!5 y!5 x!6 x!6 x!6))))
 (let ((?x530 (* x!6 x!6)))
 (let ((?x298 (* (- 1.0) ?x530)))
 (let ((?x280 (* (- 3.0) ?x514)))
 (let ((?x484 (* 2.0 (* y!5 x!6 x!6))))
 (let ((?x300 (* (- 1.0) (* y!5 y!5 y!5 x!6 x!6 x!6))))
 (let ((?x180 (* (+ (* (- 4.0) ?x514) (* (- 4.0) ?x530) (* 4.0 ?x851)) (+ ?x300 ?x484 ?x280 ?x298 ?x725 ?x851 ?x905) (+ ?x782 ?x132 ?x619 ?x896 ?x786 ?x203 ?x796 ?x622 ?x827 ?x893 ?x898) (+ ?x98 ?x79 ?x619 z!4))))
 (let (($x382 (= ?x180 0.0)))
 (let (($x187 (not $x382)))
 (let ((?x949 (* y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x833 (* x00 y00 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x617 (* 2.0 (* z00 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6))))
 (let ((?x819 (* x00 y00 z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6)))
 (let ((?x809 (* x00 y00 z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x793 (* x00 y00 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x776 (* z00 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x763 (* x00 y00 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x762 (* y!5 y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x754 (* z00 z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6)))
 (let ((?x751 (* z00 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x741 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6)))
 (let ((?x737 (* z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x735 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x624 (* z00 z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x459 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x398 (* z!4 z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x331 (* z!4 y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x273 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x255 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x227 (* x00 y00 y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x200 (* z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x178 (* y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x168 (* z00 y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6)))
 (let ((?x885 (+ (* 2.0 ?x168) (* (- 4.0) ?x178) (* (- 2.0) ?x200) (* 2.0 ?x227) (* 4.0 ?x255) (* 2.0 ?x273) (* (- 2.0) ?x331) (* 4.0 ?x398) (* 2.0 ?x459) (* (- 4.0) ?x624) (* 2.0 ?x735) (* (- 4.0) ?x737) (* 2.0 ?x741) (* 4.0 ?x751) (* (- 2.0) ?x754) (* (- 2.0) ?x762) (* 2.0 ?x763) (* (- 2.0) ?x776) (* (- 2.0) ?x793) (* (- 4.0) ?x809) (* (- 2.0) ?x819) ?x617 (* 4.0 ?x833) (* (- 2.0) ?x949))))
 (let (($x891 (= ?x885 0.0)))
 (let (($x838 (= 0.0 ?x885)))
 (let (($x831 (<= ?x885 0.0)))
 (let ((?x630 (+ z00 ?x78 (* (- 1.0) ?x619) (* (- 1.0) z!4))))
 (let (($x901 (>= ?x630 0.0)))
 (let (($x299 (= 0.0 ?x630)))
 (let ((@x825 (symm (commutativity (= $x299 (= ?x630 0.0))) (= (= ?x630 0.0) $x299))))
 (let (($x301 (= ?x630 0.0)))
 (let (($x242 (or $x187 (not $x891))))
 (let (($x829 (and $x301 $x242)))
 (let ((?x260 (* z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x212 (* z!4 z!4 z!4 y!5 y!5 y!5 x!6 x!6 x!6 x!6 z00)))
 (let ((?x201 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x389 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 z00)))
 (let ((?x567 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x535 (* z!4 z!4 z!4 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 z00)))
 (let ((?x943 (* y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x942 (* (- 2.0) (* y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 z00))))
 (let ((?x718 (* y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x707 (* y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 z00)))
 (let ((?x756 (* y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6 x00 y00)))
 (let ((?x747 (* y!5 y!5 y!5 y!5 y!5 y!5 x!6 x!6 x!6 x!6 x!6 x!6 x!6 z00)))
 (let ((?x444 (+ (* 2.0 ?x331) (* (- 2.0) ?x747) (* (- 2.0) ?x756) (* 2.0 ?x762) (* 4.0 ?x737) (* (- 4.0) ?x707) (* (- 4.0) ?x718) (* 4.0 ?x178) (* 2.0 ?x200) ?x942 (* (- 2.0) ?x943) (* 2.0 ?x949) (* (- 2.0) ?x459) (* 2.0 ?x535) (* 2.0 ?x567) (* (- 2.0) ?x273) (* (- 4.0) ?x398) (* 4.0 ?x389) (* 4.0 ?x201) (* (- 4.0) ?x255) (* (- 2.0) ?x741) (* 2.0 ?x212) (* 2.0 ?x260) (* (- 2.0) ?x735))))
 (let ((?x823 (+ z!4 ?x98 ?x79 ?x619)))
 (let ((?x818 (* (+ (* 4.0 ?x851) (* (- 4.0) ?x514) (* (- 4.0) ?x530)) (+ ?x851 ?x280 ?x725 ?x300 ?x298 ?x484 ?x905) (+ ?x898 ?x619 ?x893 ?x132 ?x782 ?x796 ?x622 ?x786 ?x896 ?x827 ?x203) ?x823)))
 (let (($x494 (and (= ?x823 0.0) (or (not (= ?x818 0.0)) (not (= ?x444 0.0))))))
 (let (($x826 (exists ((x Real) (y Real) (z Real) )(! (let ((?x996 (* (- 2.0) (* z z z y y y y x x x x x))))
 (let ((?x995 (* 2.0 (* z z z y y y x x x x x00 y00))))
 (let ((?x994 (* 2.0 (* z z z y y y x x x x z00))))
 (let ((?x993 (* (- 2.0) (* z z z z y y y x x x x))))
 (let ((?x874 (* z z z y y y y y x x x x x x)))
 (let ((?x864 (* z z z y y y y x x x x x x00 y00)))
 (let ((?x854 (* z z z y y y y x x x x x z00)))
 (let ((?x844 (* z z z z y y y y x x x x x)))
 (let ((?x834 (* z z z y y y y y y x x x x x x x)))
 (let ((?x824 (* z z z y y y y y x x x x x x x00 y00)))
 (let ((?x814 (* z z z y y y y y x x x x x x z00)))
 (let ((?x804 (* z z z z y y y y y x x x x x x)))
 (let ((?x984 (* 2.0 (* y y y y y x x x x x x))))
 (let ((?x983 (* (- 2.0) (* y y y y x x x x x x00 y00))))
 (let ((?x722 (* y y y y y y x x x x x x x)))
 (let ((?x712 (* y y y y y x x x x x x x00 y00)))
 (let ((?x978 (* (- 4.0) (* y y y y y x x x x x x z00))))
 (let ((?x977 (* 4.0 (* z y y y y y x x x x x x))))
 (let ((?x682 (* y y y y y y y x x x x x x x x)))
 (let ((?x672 (* y y y y y y x x x x x x x x00 y00)))
 (let ((?x662 (* y y y y y y x x x x x x x z00)))
 (let ((?x652 (* z y y y y y y x x x x x x x)))
 (let ((?x997 (+ (* 2.0 ?x652) (* (- 2.0) ?x662) (* (- 2.0) ?x672) (* 2.0 ?x682) ?x977 ?x978 (* (- 4.0) ?x712) (* 4.0 ?x722) (* 2.0 (* z y y y y x x x x x)) (* (- 2.0) (* y y y y x x x x x z00)) ?x983 ?x984 (* (- 2.0) ?x804) (* 2.0 ?x814) (* 2.0 ?x824) (* (- 2.0) ?x834) (* (- 4.0) ?x844) (* 4.0 ?x854) (* 4.0 ?x864) (* (- 4.0) ?x874) ?x993 ?x994 ?x995 ?x996)))
 (let (($x1003 (not (= ?x997 0.0))))
 (let ((?x84 (* y x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x98 (* (- 1.0) z00)))
 (let ((?x104 (+ z ?x98 ?x79 ?x84)))
 (let ((?x587 (* (/ 3.0 2.0) (* z y x x))))
 (let ((?x586 (* (/ 3.0 2.0) (* z z y x))))
 (let ((?x561 (* (/ 1.0 2.0) (* z z z y))))
 (let ((?x534 (* (- (/ 1.0 2.0)) (* z z z))))
 (let ((?x526 (* (- (/ 1.0 2.0)) (* y y x))))
 (let ((?x196 (* y x x x)))
 (let ((?x407 (* (/ 1.0 2.0) ?x196)))
 (let ((?x186 (* x x x)))
 (let ((?x399 (* (- (/ 1.0 2.0)) ?x186)))
 (let ((?x521 (* (- (/ 1.0 2.0)) x)))
 (let ((?x719 (+ ?x521 ?x84 ?x399 ?x407 ?x526 ?x534 (* (- (/ 3.0 2.0)) (* z z x)) (* (- (/ 3.0 2.0)) (* z x x)) ?x561 ?x586 ?x587)))
 (let ((?x365 (* (- 1.0) (* y y x x))))
 (let ((?x274 (* (- 1.0) (* y y y x x x))))
 (let ((?x378 (+ ?x186 (* (- 3.0) ?x196) (* 3.0 (* y y x x x)) ?x274 (* (- 1.0) (* x x)) (* 2.0 (* y x x)) ?x365)))
 (let ((?x293 (* x x)))
 (let ((?x443 (* (- 4.0) ?x293)))
 (let ((?x425 (* (- 4.0) ?x196)))
 (let ((?x449 (+ (* 4.0 ?x186) ?x425 ?x443)))
 (let (($x109 (= ?x104 0.0)))
 (and $x109 (or (not (= (* ?x449 ?x378 ?x719 ?x104) 0.0)) $x1003)))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x233 (exists ((x Real) (y Real) (z Real) )(! (let ((?x98 (* (- 1.0) z00)))
 (let ((?x84 (* y x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x182 (+ ?x79 ?x84 z ?x98)))
 (let ((?x561 (* (/ 1.0 2.0) (* z z z y))))
 (let ((?x526 (* (- (/ 1.0 2.0)) (* y y x))))
 (let ((?x365 (* (- 1.0) (* y y x x))))
 (let ((?x274 (* (- 1.0) (* y y y x x x))))
 (let ((?x491 (* (+ (* (- 4.0) (* y x x x)) (* (- 4.0) (* x x))) (+ ?x274 ?x365) (+ ?x526 ?x561) ?x182)))
 (let ((?x234 (+ ?x79 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x98)))
 (let ((?x120 (* (/ 1.0 2.0) y)))
 (let ((?x216 (+ (- (/ 1.0 2.0)) ?x120)))
 (let ((?x47 (+ z x)))
 (let ((?x768 (+ (* (- 8.0) (* ?x216 ?x216 ?x216 x x x)) (* (- 4.0) (* ?x216 ?x216 x x)))))
 (let ((?x371 (* (+ (* (- 8.0) (* ?x216 x x x)) (* (- 4.0) (* x x))) ?x768 (+ (* (- 2.0) (* ?x216 ?x216 x)) (* ?x47 ?x47 ?x47 ?x216)) ?x234)))
 (and (= ?x182 0.0) (or (not (= ?x371 0.0)) (not (= ?x491 0.0)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x739 (lambda ((x Real) (y Real) (z Real) )(let ((?x996 (* (- 2.0) (* z z z y y y y x x x x x))))
 (let ((?x995 (* 2.0 (* z z z y y y x x x x x00 y00))))
 (let ((?x994 (* 2.0 (* z z z y y y x x x x z00))))
 (let ((?x993 (* (- 2.0) (* z z z z y y y x x x x))))
 (let ((?x874 (* z z z y y y y y x x x x x x)))
 (let ((?x864 (* z z z y y y y x x x x x x00 y00)))
 (let ((?x854 (* z z z y y y y x x x x x z00)))
 (let ((?x844 (* z z z z y y y y x x x x x)))
 (let ((?x834 (* z z z y y y y y y x x x x x x x)))
 (let ((?x824 (* z z z y y y y y x x x x x x x00 y00)))
 (let ((?x814 (* z z z y y y y y x x x x x x z00)))
 (let ((?x804 (* z z z z y y y y y x x x x x x)))
 (let ((?x984 (* 2.0 (* y y y y y x x x x x x))))
 (let ((?x983 (* (- 2.0) (* y y y y x x x x x x00 y00))))
 (let ((?x722 (* y y y y y y x x x x x x x)))
 (let ((?x712 (* y y y y y x x x x x x x00 y00)))
 (let ((?x978 (* (- 4.0) (* y y y y y x x x x x x z00))))
 (let ((?x977 (* 4.0 (* z y y y y y x x x x x x))))
 (let ((?x682 (* y y y y y y y x x x x x x x x)))
 (let ((?x672 (* y y y y y y x x x x x x x x00 y00)))
 (let ((?x662 (* y y y y y y x x x x x x x z00)))
 (let ((?x652 (* z y y y y y y x x x x x x x)))
 (let ((?x997 (+ (* 2.0 ?x652) (* (- 2.0) ?x662) (* (- 2.0) ?x672) (* 2.0 ?x682) ?x977 ?x978 (* (- 4.0) ?x712) (* 4.0 ?x722) (* 2.0 (* z y y y y x x x x x)) (* (- 2.0) (* y y y y x x x x x z00)) ?x983 ?x984 (* (- 2.0) ?x804) (* 2.0 ?x814) (* 2.0 ?x824) (* (- 2.0) ?x834) (* (- 4.0) ?x844) (* 4.0 ?x854) (* 4.0 ?x864) (* (- 4.0) ?x874) ?x993 ?x994 ?x995 ?x996)))
 (let (($x1003 (not (= ?x997 0.0))))
 (let ((?x84 (* y x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x98 (* (- 1.0) z00)))
 (let ((?x104 (+ z ?x98 ?x79 ?x84)))
 (let ((?x587 (* (/ 3.0 2.0) (* z y x x))))
 (let ((?x586 (* (/ 3.0 2.0) (* z z y x))))
 (let ((?x561 (* (/ 1.0 2.0) (* z z z y))))
 (let ((?x534 (* (- (/ 1.0 2.0)) (* z z z))))
 (let ((?x526 (* (- (/ 1.0 2.0)) (* y y x))))
 (let ((?x196 (* y x x x)))
 (let ((?x407 (* (/ 1.0 2.0) ?x196)))
 (let ((?x186 (* x x x)))
 (let ((?x399 (* (- (/ 1.0 2.0)) ?x186)))
 (let ((?x521 (* (- (/ 1.0 2.0)) x)))
 (let ((?x719 (+ ?x521 ?x84 ?x399 ?x407 ?x526 ?x534 (* (- (/ 3.0 2.0)) (* z z x)) (* (- (/ 3.0 2.0)) (* z x x)) ?x561 ?x586 ?x587)))
 (let ((?x365 (* (- 1.0) (* y y x x))))
 (let ((?x274 (* (- 1.0) (* y y y x x x))))
 (let ((?x378 (+ ?x186 (* (- 3.0) ?x196) (* 3.0 (* y y x x x)) ?x274 (* (- 1.0) (* x x)) (* 2.0 (* y x x)) ?x365)))
 (let ((?x293 (* x x)))
 (let ((?x443 (* (- 4.0) ?x293)))
 (let ((?x425 (* (- 4.0) ?x196)))
 (let ((?x449 (+ (* 4.0 ?x186) ?x425 ?x443)))
 (let (($x109 (= ?x104 0.0)))
 (let (($x721 (and $x109 (or (not (= (* ?x449 ?x378 ?x719 ?x104) 0.0)) $x1003))))
 (let ((?x182 (+ ?x79 ?x84 z ?x98)))
 (let (($x248 (not (= (* (+ ?x425 ?x443) (+ ?x274 ?x365) (+ ?x526 ?x561) ?x182) 0.0))))
 (let ((?x234 (+ ?x79 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x98)))
 (let ((?x120 (* (/ 1.0 2.0) y)))
 (let ((?x216 (+ (- (/ 1.0 2.0)) ?x120)))
 (let ((?x47 (+ z x)))
 (let ((?x768 (+ (* (- 8.0) (* ?x216 ?x216 ?x216 x x x)) (* (- 4.0) (* ?x216 ?x216 x x)))))
 (let ((?x371 (* (+ (* (- 8.0) (* ?x216 x x x)) ?x443) ?x768 (+ (* (- 2.0) (* ?x216 ?x216 x)) (* ?x47 ?x47 ?x47 ?x216)) ?x234)))
 (let (($x231 (and (= ?x182 0.0) (or (not (= ?x371 0.0)) $x248))))
 (rewrite (= $x231 $x721)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((x Real) (y Real) (z Real) )(! (let ((?x64 (+ (* (- 1.0) 2.0 x (/ y 2.0) (/ y 2.0)) (* (/ y 2.0) z z z))))
 (let ((?x44 (* 2.0 x 2.0 x)))
 (let ((?x61 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x (/ y 2.0)) ?x44)))
 (let ((?x53 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x59 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x53 ?x53 ?x53) (* 2.0 x 2.0 x ?x53 ?x53))))
 (let ((?x65 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x53) z) z00) ?x59 ?x61 ?x64)))
 (let ((?x47 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36) (* 2.0 x 2.0 x ?x36 ?x36))))
 (let ((?x50 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36) ?x44) (+ (* ?x24 2.0 x ?x36 ?x36) (* ?x36 ?x47 ?x47 ?x47)))))
 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x50 0.0)) (not (= ?x65 0.0))))))))))))))) :qid k!28))
 ))
 (let ((?x219 (lambda ((x Real) (y Real) (z Real) )(let ((?x98 (* (- 1.0) z00)))
 (let ((?x84 (* y x)))
 (let ((?x78 (* x00 y00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x182 (+ ?x79 ?x84 z ?x98)))
 (let ((?x561 (* (/ 1.0 2.0) (* z z z y))))
 (let ((?x526 (* (- (/ 1.0 2.0)) (* y y x))))
 (let ((?x365 (* (- 1.0) (* y y x x))))
 (let ((?x274 (* (- 1.0) (* y y y x x x))))
 (let ((?x491 (* (+ (* (- 4.0) (* y x x x)) (* (- 4.0) (* x x))) (+ ?x274 ?x365) (+ ?x526 ?x561) ?x182)))
 (let ((?x234 (+ ?x79 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x98)))
 (let ((?x120 (* (/ 1.0 2.0) y)))
 (let ((?x216 (+ (- (/ 1.0 2.0)) ?x120)))
 (let ((?x47 (+ z x)))
 (let ((?x768 (+ (* (- 8.0) (* ?x216 ?x216 ?x216 x x x)) (* (- 4.0) (* ?x216 ?x216 x x)))))
 (let ((?x371 (* (+ (* (- 8.0) (* ?x216 x x x)) (* (- 4.0) (* x x))) ?x768 (+ (* (- 2.0) (* ?x216 ?x216 x)) (* ?x47 ?x47 ?x47 ?x216)) ?x234)))
 (let (($x231 (and (= ?x182 0.0) (or (not (= ?x371 0.0)) (not (= ?x491 0.0))))))
 (let ((?x64 (+ (* (- 1.0) 2.0 x (/ y 2.0) (/ y 2.0)) (* (/ y 2.0) z z z))))
 (let ((?x44 (* 2.0 x 2.0 x)))
 (let ((?x61 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x (/ y 2.0)) ?x44)))
 (let ((?x53 (/ y 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x59 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x53 ?x53 ?x53) (* 2.0 x 2.0 x ?x53 ?x53))))
 (let ((?x65 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x53) z) z00) ?x59 ?x61 ?x64)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x36) (* 2.0 x 2.0 x ?x36 ?x36))))
 (let ((?x50 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x42 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36) ?x44) (+ (* ?x24 2.0 x ?x36 ?x36) (* ?x36 ?x47 ?x47 ?x47)))))
 (let (($x69 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x50 0.0)) (not (= ?x65 0.0))))))
 (rewrite (= $x69 $x231)))))))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x181 (mp (mp @x71 (quant-intro (proof-bind ?x219) (= $x70 $x233)) $x233) (quant-intro (proof-bind ?x739) (= $x233 $x826)) $x826)))
 (let ((@x837 (mp (mp~ @x181 (sk (~ $x826 $x494)) $x494) (rewrite (= $x494 $x829)) $x829)))
 (let ((@x765 (mp (and-elim @x837 $x301) @x825 $x299)))
 (let ((@x845 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x901)) @x765 $x901)))
 (let (($x481 (<= ?x630 0.0)))
 (let ((@x843 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x481)) @x765 $x481)))
 (let ((@x934 (unit-resolution ((_ th-lemma arith) (or (not $x481) (not $x901) $x831)) @x843 @x845 (hypothesis (not $x831)) false)))
 (let (($x749 (>= ?x885 0.0)))
 (let ((@x908 (unit-resolution ((_ th-lemma arith) (or (not $x481) (not $x901) $x749)) @x843 @x845 (hypothesis (not $x749)) false)))
 (let ((@x119 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x838 (not $x831) (not $x749))) (lemma @x908 $x749) (or $x838 (not $x831)))))
 (let ((@x94 (mp (unit-resolution @x119 (lemma @x934 $x831) $x838) (commutativity (= $x838 $x891)) $x891)))
 (let ((@x563 (unit-resolution ((_ th-lemma arith) (or $x957 $x382)) (unit-resolution (and-elim @x837 $x242) @x94 $x187) (hypothesis $x932) false)))
 (let (($x958 (= 0.0 ?x817)))
 (let (($x959 (<= ?x817 0.0)))
 (let (($x623 (>= ?x817 0.0)))
 (let ((@x247 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x958 (not $x959) (not $x623))) (unit-resolution ((_ th-lemma arith) (or (not $x481) $x623)) @x843 $x623) (unit-resolution ((_ th-lemma arith) (or (not $x901) $x959)) @x845 $x959) $x958)))
 (unit-resolution (symm @x247 $x932) (lemma @x563 $x957) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      27
 :arith-eq-adapter               35
 :arith-bound-propagations-cheap 42
 :arith-bound-propagations-lp    2
 :arith-conflicts                127
 :arith-diseq                    45
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    60
 :arith-make-feasible            59
 :arith-max-columns              61
 :arith-max-rows                 10
 :arith-nla-explanations         30
 :arith-nla-lemmas               127
 :arith-propagations             42
 :arith-upper                    79
 :conflicts                      10
 :decisions                      120
 :del-clause                     113
 :final-checks                   28
 :max-memory                     2.16
 :memory                         1.16
 :minimized-lits                 1
 :mk-bool-var                    248
 :mk-clause                      173
 :num-allocs                     109162240
 :num-checks                     1
 :propagations                   101
 :rlimit-count                   6874
 :time                           0.46
 :total-time                     0.46)
