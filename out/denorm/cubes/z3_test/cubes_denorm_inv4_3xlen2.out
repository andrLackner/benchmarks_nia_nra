unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x594 (* (- 1) k!2)))
 (let ((?x156 (* n!0 n!0)))
 (let ((?x389 (* 3 ?x156)))
 (let ((?x130 (+ ?x389 ?x594 (* 3 n!0))))
 (let (($x327 (<= ?x130 (- 1))))
 (let (($x131 (= ?x130 (- 1))))
 (let ((?x295 (+ k!2 c!3)))
 (let ((?x543 (+ k!2 m!1)))
 (let ((?x378 (+ 6 m!1)))
 (let ((?x365 (+ (* (+ 1 n!0) ?x543 ?x543 ?x295 ?x295 ?x295) (* (- 1) (* ?x378 ?x378 ?x543 ?x543 ?x295 ?x295 ?x295)))))
 (let ((?x339 (+ 1 n!0)))
 (let ((?x721 (+ (* ?x339 ?x339 ?x378 ?x378 ?x378 ?x543 ?x543 ?x543 ?x295) (* (- 1) (* ?x339 ?x339 ?x543 ?x543 ?x543 ?x295)))))
 (let ((?x587 (* (- 6) (* k!2 k!2 n!0 n!0))))
 (let ((?x583 (* (- 12) (* k!2 m!1))))
 (let ((?x571 (* (- 12) (* k!2 k!2 n!0))))
 (let ((?x544 (* (- 1) (* m!1 m!1 m!1))))
 (let ((?x370 (* (- 1) (* k!2 k!2 m!1))))
 (let ((?x374 (* (- 2) (* k!2 m!1 m!1))))
 (let ((?x371 (* (- 6) (* m!1 m!1))))
 (let ((?x121 (* k!2 k!2)))
 (let ((?x393 (* (- 6) ?x121)))
 (let ((?x145 (+ ?x393 ?x371 (* (- 2) (* n!0 m!1 m!1 m!1)) (* (- 12) (* k!2 n!0 n!0 m!1)) (* (- 6) (* n!0 n!0 m!1 m!1)) (* (- 12) (* n!0 m!1 m!1)) ?x374 (* ?x339 ?x339 ?x378 ?x543 ?x543 ?x295) (* (- 4) (* k!2 n!0 m!1 m!1)) (* (- 2) (* k!2 n!0 n!0 m!1 m!1)) (* (- 24) (* k!2 n!0 m!1)) (* (- 1) (* n!0 n!0 m!1 m!1 m!1)) ?x370 (* (- 2) (* k!2 k!2 n!0 m!1)) ?x544 ?x571 ?x583 ?x587 (* (- 1) (* k!2 k!2 n!0 n!0 m!1)))))
 (let ((?x634 (* ?x145 ?x721 ?x365 (+ 7 ?x389 ?x594 (* 9 n!0) (* (- 1) m!1)))))
 (let (($x633 (= ?x634 0)))
 (let (($x372 (not $x633)))
 (let ((?x527 (* 9 n!0)))
 (let ((?x251 (+ ?x121 (* (- 9) (* c!3 n!0)) (* (- 5) k!2) (* (- 18) c!3) ?x527)))
 (let ((?x526 (* (- 1) m!1)))
 (let ((?x610 (+ (* 6 n!0) ?x526)))
 (let (($x613 (= ?x610 (- 6))))
 (let (($x164 (and $x613 (= ?x251 (- 4)) (= (+ (* k!2 n!0) ?x594 (* (- 3) c!3) (* 2 n!0)) (- 1)) $x131 $x372)))
 (let ((?x540 (+ c!3 k!2)))
 (let ((?x554 (+ (* (- 1) (* ?x378 ?x378 ?x543 ?x543 ?x540 ?x540 ?x540)) (* ?x339 ?x543 ?x543 ?x540 ?x540 ?x540))))
 (let ((?x552 (+ (* ?x339 ?x339 ?x378 ?x378 ?x378 ?x543 ?x543 ?x543 ?x540) (* (- 1) (* ?x339 ?x339 ?x543 ?x543 ?x543 ?x540)))))
 (let ((?x551 (+ ?x393 (* (- 2) (* m!1 m!1 m!1 n!0)) ?x587 ?x370 ?x583 ?x371 (* (- 12) (* k!2 m!1 n!0 n!0)) (* (- 6) (* m!1 m!1 n!0 n!0)) ?x374 ?x571 (* (- 12) (* m!1 m!1 n!0)) (* (- 2) (* k!2 k!2 m!1 n!0)) (* (- 24) (* k!2 m!1 n!0)) (* (- 4) (* k!2 m!1 m!1 n!0)) (* ?x339 ?x339 ?x378 ?x543 ?x543 ?x540) ?x544 (* (- 1) (* m!1 m!1 m!1 n!0 n!0)) (* (- 2) (* k!2 m!1 m!1 n!0 n!0)) (* (- 1) (* k!2 k!2 m!1 n!0 n!0)))))
 (let (($x578 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x574 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x121) (* 9 (* c!3 n!0)))))
 (let (($x600 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x574 4) $x578 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x156)) 1) (not (= (* ?x551 ?x552 ?x554 (+ 7 ?x594 ?x526 ?x527 ?x389)) 0)))))
 (let (($x791 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x270 (* n n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x323 (* (- 1) (* (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x344 (+ ?x323 (* ?x307 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x624 (* (- 1) (* ?x307 ?x307 ?x71 ?x71 ?x71 ?x76))))
 (let ((?x530 (+ 6 m)))
 (let ((?x321 (* ?x307 ?x307 ?x530 ?x530 ?x530 ?x71 ?x71 ?x71 ?x76)))
 (let ((?x703 (* (- 1) (* k k m n n))))
 (let ((?x639 (* (- 1) (* m m m n n))))
 (let ((?x626 (* ?x307 ?x307 ?x530 ?x71 ?x71 ?x76)))
 (let ((?x773 (+ (* (- 6) (* k k)) (* (- 2) (* m m m n)) (* (- 6) (* k k n n)) (* (- 1) (* k k m)) (* (- 12) (* k m)) (* (- 6) (* m m)) (* (- 12) (* k m n n)) (* (- 6) (* m m n n)) (* (- 2) (* k m m)) (* (- 12) (* k k n)) (* (- 12) (* m m n)) (* (- 2) (* k k m n)) (* (- 24) (* k m n)) (* (- 4) (* k m m n)) ?x626 (* (- 1) (* m m m)) ?x639 (* (- 2) (* k m m n n)) ?x703)))
 (let (($x749 (= (* ?x773 (+ ?x321 ?x624) ?x344 (+ 7 ?x239 ?x355 ?x48 ?x271)) 0)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x213 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x209 (= ?x213 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not $x749))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x207 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let ((?x394 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x239 ?x355 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x323 (* (- 1) (* (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x344 (+ ?x323 (* ?x307 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x530 (+ 6 m)))
 (let ((?x321 (* ?x307 ?x307 ?x530 ?x530 ?x530 ?x71 ?x71 ?x71 ?x76)))
 (let ((?x624 (* (- 1) (* ?x307 ?x307 ?x71 ?x71 ?x71 ?x76))))
 (let ((?x626 (* ?x307 ?x307 ?x530 ?x71 ?x71 ?x76)))
 (let ((?x348 (* (+ (* (- 1) (* ?x307 ?x307 ?x530 ?x71 ?x71)) ?x626) (+ ?x624 ?x321) ?x344 ?x394)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x636 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= ?x636 (- 4)) (= (+ (* (- 3) c) (* n k) ?x239 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x239 ?x65) (- 1)) (not (= ?x348 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x731 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x270 (* n n)))
 (let ((?x271 (* 3 ?x270)))
 (let ((?x48 (* 9 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x323 (* (- 1) (* (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x344 (+ ?x323 (* ?x307 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x624 (* (- 1) (* ?x307 ?x307 ?x71 ?x71 ?x71 ?x76))))
 (let ((?x530 (+ 6 m)))
 (let ((?x321 (* ?x307 ?x307 ?x530 ?x530 ?x530 ?x71 ?x71 ?x71 ?x76)))
 (let ((?x703 (* (- 1) (* k k m n n))))
 (let ((?x639 (* (- 1) (* m m m n n))))
 (let ((?x626 (* ?x307 ?x307 ?x530 ?x71 ?x71 ?x76)))
 (let ((?x773 (+ (* (- 6) (* k k)) (* (- 2) (* m m m n)) (* (- 6) (* k k n n)) (* (- 1) (* k k m)) (* (- 12) (* k m)) (* (- 6) (* m m)) (* (- 12) (* k m n n)) (* (- 6) (* m m n n)) (* (- 2) (* k m m)) (* (- 12) (* k k n)) (* (- 12) (* m m n)) (* (- 2) (* k k m n)) (* (- 24) (* k m n)) (* (- 4) (* k m m n)) ?x626 (* (- 1) (* m m m)) ?x639 (* (- 2) (* k m m n n)) ?x703)))
 (let (($x749 (= (* ?x773 (+ ?x321 ?x624) ?x344 (+ 7 ?x239 ?x355 ?x48 ?x271)) 0)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x213 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x209 (= ?x213 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x748 (and $x125 $x209 $x261 $x299 (not $x749))))
 (let ((?x348 (* (+ (* (- 1) (* ?x307 ?x307 ?x530 ?x71 ?x71)) ?x626) (+ ?x624 ?x321) ?x344 (+ 4 (* 3 (* ?x307 ?x307)) ?x239 ?x355 (* 3 n)))))
 (let ((?x49 (* k k)))
 (let ((?x636 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x208 (and $x125 (= ?x636 (- 4)) (= (+ (* (- 3) c) (* n k) ?x239 (* 2 n)) (- 1)) (= (+ ?x271 ?x239 (* 3 n)) (- 1)) (not (= ?x348 0)))))
 (rewrite (= $x208 $x748)))))))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x86 (+ (* (- 1) ?x71 ?x71 ?x78 ?x68 ?x68) (* ?x76 ?x71 ?x71 ?x78 ?x68 ?x68))))
 (let ((?x83 (+ (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x78 ?x78) (* ?x76 ?x76 ?x76 ?x71 ?x71 ?x68))))
 (let ((?x80 (+ (* (- 1) ?x76 ?x71 ?x71 ?x71 ?x68 ?x68) (* ?x76 ?x71 ?x71 ?x71 ?x78 ?x78 ?x78 ?x68 ?x68))))
 (let ((?x87 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80 ?x83 ?x86)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x87 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x196 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x355 (* (- 1) m)))
 (let ((?x239 (* (- 1) k)))
 (let ((?x394 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x239 ?x355 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x323 (* (- 1) (* (+ 6 m) (+ 6 m) ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x344 (+ ?x323 (* ?x307 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x530 (+ 6 m)))
 (let ((?x321 (* ?x307 ?x307 ?x530 ?x530 ?x530 ?x71 ?x71 ?x71 ?x76)))
 (let ((?x624 (* (- 1) (* ?x307 ?x307 ?x71 ?x71 ?x71 ?x76))))
 (let ((?x626 (* ?x307 ?x307 ?x530 ?x71 ?x71 ?x76)))
 (let ((?x348 (* (+ (* (- 1) (* ?x307 ?x307 ?x530 ?x71 ?x71)) ?x626) (+ ?x624 ?x321) ?x344 ?x394)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x636 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x208 (and $x125 (= ?x636 (- 4)) (= (+ (* (- 3) c) (* n k) ?x239 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x239 ?x65) (- 1)) (not (= ?x348 0)))))
 (let ((?x68 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x75 (- 1)))
 (let ((?x86 (+ (* ?x75 ?x71 ?x71 ?x78 ?x68 ?x68) (* ?x76 ?x71 ?x71 ?x78 ?x68 ?x68))))
 (let ((?x83 (+ (* ?x75 ?x76 ?x76 ?x76 ?x71 ?x71 ?x78 ?x78) (* ?x76 ?x76 ?x76 ?x71 ?x71 ?x68))))
 (let ((?x80 (+ (* ?x75 ?x76 ?x71 ?x71 ?x71 ?x68 ?x68) (* ?x76 ?x71 ?x71 ?x71 ?x78 ?x78 ?x78 ?x68 ?x68))))
 (let ((?x87 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80 ?x83 ?x86)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x87 0))))))
 (rewrite (= $x91 $x208))))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x287 (mp (mp @x93 (quant-intro (proof-bind ?x196) (= $x92 $x207)) $x207) (rewrite (= $x207 $x207)) $x207)))
 (let ((@x556 (mp~ (mp @x287 (quant-intro (proof-bind ?x731) (= $x207 $x791)) $x791) (sk (~ $x791 $x600)) $x600)))
 (let ((@x197 (mp @x556 (rewrite (= $x600 $x164)) $x164)))
 (let ((@x189 (and-elim @x197 $x131)))
 (let ((@x324 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x131) $x327)) @x189 $x327)))
 (let (($x218 (<= ?x610 (- 6))))
 (let ((@x614 (and-elim @x197 $x613)))
 (let ((@x304 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x613) $x218)) @x614 $x218)))
 (let (($x225 (>= ?x130 (- 1))))
 (let ((@x564 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x131) $x225)) @x189 $x225)))
 (let (($x329 (>= ?x610 (- 6))))
 (let ((@x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x613) $x329)) @x614 $x329)))
 (let (($x266 (not (<= ?x634 0))))
 (let (($x330 (>= ?x634 0)))
 (let ((@x267 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x330)) @x240 @x564 @x304 @x324 false) $x330)))
 (let ((@x229 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x633 $x266 (not $x330))) (and-elim @x197 $x372) (or $x266 (not $x330)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x229 @x267 $x266) @x240 @x564 @x304 @x324 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        26
 :arith-assert-upper        25
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             151
 :arith-nonlinear-bounds    25
 :arith-num-rows            12
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      5
 :arith-tableau-max-columns 58
 :arith-tableau-max-rows    12
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                19.68
 :memory                    19.15
 :mk-bool-var               18
 :mk-clause                 16
 :num-allocs                541209
 :num-checks                1
 :propagations              10
 :rlimit-count              3419
 :time                      0.01
 :total-time                0.02)
