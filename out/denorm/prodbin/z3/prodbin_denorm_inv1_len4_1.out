unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(proof
(let ((?x683 (to_real z!0)))
 (let ((?x682 (to_real y!1)))
 (let ((?x48 (to_real z00)))
 (let ((?x345 (to_real x!2)))
 (let ((?x283 (* (- (/ 1.0 2.0)) (* (to_real x00) (to_real y00) ?x345 ?x345 ?x682 ?x682 ?x682))))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x573 (+ (* ?x110 ?x114 ?x345 ?x345 ?x682 ?x682) (* (/ 1.0 2.0) (* ?x345 ?x345 ?x682 ?x682 ?x682 ?x683)) (* (- 1.0) (* ?x345 ?x345 ?x345 ?x682 ?x682 ?x682 ?x683 ?x683)) (* ?x110 ?x114 ?x345 ?x345 ?x345 ?x682 ?x682 ?x682 ?x683) (* (- 1.0) (* ?x345 ?x345 ?x345 ?x345 ?x682 ?x682 ?x682 ?x682 ?x683)) ?x283 (* (- (/ 1.0 2.0)) (* ?x48 ?x345 ?x345 ?x682 ?x682 ?x682)) (* ?x48 ?x345 ?x345 ?x682 ?x682) (* (/ 1.0 8.0) (* ?x110 ?x114 ?x682 ?x682 ?x682 ?x683)) (* (- (/ 1.0 8.0)) (* ?x345 ?x682 ?x682 ?x682 ?x682 ?x683)) (* (- 1.0) (* ?x345 ?x345 ?x682 ?x682 ?x683)) (* (- 1.0) (* ?x345 ?x345 ?x345 ?x682 ?x682 ?x682)) (* (/ 1.0 2.0) (* ?x345 ?x345 ?x345 ?x682 ?x682 ?x682 ?x682)) (* ?x48 ?x345 ?x345 ?x345 ?x682 ?x682 ?x682 ?x683) (* (- (/ 1.0 8.0)) (* ?x682 ?x682 ?x682 ?x683 ?x683)) (* (/ 1.0 8.0) (* ?x48 ?x682 ?x682 ?x682 ?x683)))))
 (let (($x129 (>= ?x573 0.0)))
 (let (($x171 (not $x129)))
 (let (($x506 (= 0.0 ?x573)))
 (let (($x457 (not $x506)))
 (let ((@x222 (symm (commutativity (= $x506 (= ?x573 0.0))) (= (= ?x573 0.0) $x506))))
 (let (($x684 (= ?x573 0.0)))
 (let (($x359 (not $x684)))
 (let ((?x358 (* (- (/ 1.0 8.0)) ?x683)))
 (let ((?x410 (* (/ 1.0 8.0) (* ?x345 ?x682 ?x682 ?x682))))
 (let ((?x380 (* (- (/ 3.0 8.0)) (* ?x345 ?x682 ?x682))))
 (let ((?x363 (* (- 1.0) (* ?x345 ?x345 ?x345 ?x683))))
 (let ((?x372 (* ?x345 ?x345 ?x345 ?x345 ?x682 ?x682 ?x682)))
 (let ((?x362 (* (- 3.0) (* ?x345 ?x345 ?x345 ?x345 ?x682 ?x682))))
 (let ((?x228 (* (- 1.0) (* ?x345 ?x345 ?x345 ?x345))))
 (let ((?x365 (* ?x345 ?x682)))
 (let ((?x378 (* (/ 3.0 8.0) ?x365)))
 (let ((?x370 (* 3.0 (* ?x345 ?x345 ?x345 ?x345 ?x682))))
 (let ((?x368 (* (- (/ 1.0 8.0)) ?x345)))
 (let ((?x271 (* (- (/ 7.0 2.0)) (* ?x345 ?x345 ?x682))))
 (let ((?x482 (* (/ 3.0 2.0) (* ?x345 ?x345))))
 (let ((?x540 (* (/ 5.0 2.0) (* ?x345 ?x345 ?x682 ?x682))))
 (let ((?x518 (* (- (/ 1.0 2.0)) (* ?x345 ?x345 ?x682 ?x682 ?x682))))
 (let ((?x242 (+ (* 3.0 (* ?x345 ?x345 ?x345 ?x682 ?x683)) (* (- 3.0) (* ?x345 ?x345 ?x345 ?x682 ?x682 ?x683)) ?x518 ?x540 ?x482 ?x271 ?x368 ?x370 ?x378 ?x228 ?x362 ?x372 ?x363 ?x380 ?x410 (* ?x345 ?x345 ?x345 ?x682 ?x682 ?x682 ?x683) (* (- (/ 3.0 8.0)) (* ?x682 ?x682 ?x683)) (* (/ 3.0 8.0) (* ?x682 ?x683)) (* (/ 1.0 8.0) (* ?x682 ?x682 ?x682 ?x683)) ?x358)))
 (let (($x237 (= (* ?x242 (+ (* (- 1.0) ?x48) (* (- 1.0) (* ?x110 ?x114)) ?x365 ?x683)) 0.0)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x627 (+ ?x365 ?x683 ?x201 ?x121)))
 (let (($x235 (= 0.0 ?x627)))
 (let (($x440 (>= ?x627 0.0)))
 (let ((?x88 (* x00 y00)))
 (let ((?x519 (+ z00 ?x88 (* (- 1) (* x!2 y!1)) (* (- 1) z!0))))
 (let (($x427 (>= ?x519 0)))
 (let (($x425 (= 0 ?x519)))
 (let ((@x704 (symm (commutativity (= $x425 (= ?x519 0))) (= (= ?x519 0) $x425))))
 (let (($x604 (= ?x519 0)))
 (let (($x623 (not $x237)))
 (let (($x174 (or $x359 $x623)))
 (let (($x314 (and $x604 $x174)))
 (let ((?x528 (+ ?x368 ?x358 ?x228 ?x370 ?x362 ?x372 ?x363 (* 3.0 (* ?x345 ?x345 ?x345 ?x683 ?x682)) (* (- 3.0) (* ?x345 ?x345 ?x345 ?x683 ?x682 ?x682)) (* ?x345 ?x345 ?x345 ?x683 ?x682 ?x682 ?x682) ?x378 ?x380 ?x410 (* (/ 3.0 8.0) (* ?x683 ?x682)) (* (- (/ 3.0 8.0)) (* ?x683 ?x682 ?x682)) (* (/ 1.0 8.0) (* ?x683 ?x682 ?x682 ?x682)) ?x482 ?x271 ?x540 ?x518)))
 (let ((?x561 (* ?x345 ?x345 ?x345 ?x682 ?x682 ?x682)))
 (let ((?x250 (+ (* ?x345 ?x345 ?x345 ?x683 ?x683 ?x682 ?x682 ?x682) (* (- 1.0) (* ?x345 ?x345 ?x345 ?x683 ?x48 ?x682 ?x682 ?x682)) (* (- 1.0) (* ?x345 ?x345 ?x345 ?x683 ?x682 ?x682 ?x682 ?x110 ?x114)) (* ?x345 ?x345 ?x345 ?x345 ?x683 ?x682 ?x682 ?x682 ?x682) (* (/ 1.0 8.0) (* ?x683 ?x683 ?x682 ?x682 ?x682)) (* (- (/ 1.0 8.0)) (* ?x683 ?x48 ?x682 ?x682 ?x682)) (* (- (/ 1.0 8.0)) (* ?x683 ?x682 ?x682 ?x682 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x345 ?x683 ?x682 ?x682 ?x682 ?x682)) (* ?x345 ?x345 ?x683 ?x682 ?x682) (* (- 1.0) (* ?x345 ?x345 ?x48 ?x682 ?x682)) (* (- 1.0) (* ?x345 ?x345 ?x682 ?x682 ?x110 ?x114)) ?x561 (* (- (/ 1.0 2.0)) (* ?x345 ?x345 ?x683 ?x682 ?x682 ?x682)) (* (/ 1.0 2.0) (* ?x345 ?x345 ?x48 ?x682 ?x682 ?x682)) (* (/ 1.0 2.0) (* ?x345 ?x345 ?x682 ?x682 ?x682 ?x110 ?x114)) (* (- (/ 1.0 2.0)) (* ?x345 ?x345 ?x345 ?x682 ?x682 ?x682 ?x682)))))
 (let (($x529 (or (not (= ?x250 0.0)) (not (= (* ?x528 (+ ?x683 ?x201 ?x121 ?x365)) 0.0)))))
 (let (($x530 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x88)) 0) $x529)))
 (let (($x215 (exists ((x Int) (y Int) (z Int) )(! (let ((?x63 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x444 (* ?x43 ?x63)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x650 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x63 ?x63 ?x63))))
 (let ((?x725 (* (/ 5.0 2.0) (* ?x43 ?x43 ?x63 ?x63))))
 (let ((?x723 (* (- (/ 7.0 2.0)) (* ?x43 ?x43 ?x63))))
 (let ((?x721 (* (/ 3.0 2.0) (* ?x43 ?x43))))
 (let ((?x516 (* (/ 1.0 8.0) (* ?x46 ?x63 ?x63 ?x63))))
 (let ((?x475 (* (/ 1.0 8.0) (* ?x43 ?x63 ?x63 ?x63))))
 (let ((?x348 (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63)))
 (let ((?x405 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63))))
 (let ((?x402 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x63))))
 (let ((?x399 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46))))
 (let ((?x298 (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63 ?x63)))
 (let ((?x394 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63))))
 (let ((?x390 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x63))))
 (let ((?x386 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43))))
 (let ((?x477 (* (- (/ 1.0 8.0)) ?x46)))
 (let ((?x437 (* (- (/ 1.0 8.0)) ?x43)))
 (let ((?x505 (+ ?x437 ?x477 ?x386 ?x390 ?x394 ?x298 ?x399 ?x402 ?x405 ?x348 (* (/ 3.0 8.0) ?x444) (* (- (/ 3.0 8.0)) (* ?x43 ?x63 ?x63)) ?x475 (* (/ 3.0 8.0) (* ?x46 ?x63)) (* (- (/ 3.0 8.0)) (* ?x46 ?x63 ?x63)) ?x516 ?x721 ?x723 ?x725 ?x650)))
 (let ((?x864 (+ (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x48 ?x63 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x110 ?x114)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x63) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x46 ?x48 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x46 ?x63 ?x63 ?x63 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x43 ?x46 ?x63 ?x63 ?x63 ?x63)) (* ?x43 ?x43 ?x46 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x48 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x63 ?x63 ?x110 ?x114)) (* ?x43 ?x43 ?x43 ?x63 ?x63 ?x63) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x48 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x63 ?x63 ?x63 ?x110 ?x114)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x63 ?x63 ?x63 ?x63)))))
 (let (($x433 (not (= ?x864 0.0))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x116 (or $x433 (not (= (* ?x505 (+ ?x46 ?x201 ?x121 ?x444)) 0.0)))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x619 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x720 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x648 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x275 (+ (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) ?x648 ?x648 ?x648)) (* (+ ?x46 ?x43) ?x648 ?x648 ?x648) (* (- 4.0) (* ?x43 ?x43 ?x648 ?x648 ?x648)) (* 4.0 (* ?x43 ?x43 ?x648 ?x648)))))
 (let ((?x516 (* (/ 1.0 8.0) (* ?x46 ?x63 ?x63 ?x63))))
 (let ((?x337 (+ (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) ?x516 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x43 ?x43)) (* ?x63 ?x63 ?x43 ?x43))))
 (let (($x286 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x337) 0.0)) (not (= (* ?x275 ?x720) 0.0)))))
 (let (($x628 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x628 $x286)))))))))))))))))) :qid k!28))
 ))
 (let ((?x216 (lambda ((x Int) (y Int) (z Int) )(let ((?x63 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x444 (* ?x43 ?x63)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x650 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x63 ?x63 ?x63))))
 (let ((?x725 (* (/ 5.0 2.0) (* ?x43 ?x43 ?x63 ?x63))))
 (let ((?x723 (* (- (/ 7.0 2.0)) (* ?x43 ?x43 ?x63))))
 (let ((?x721 (* (/ 3.0 2.0) (* ?x43 ?x43))))
 (let ((?x516 (* (/ 1.0 8.0) (* ?x46 ?x63 ?x63 ?x63))))
 (let ((?x475 (* (/ 1.0 8.0) (* ?x43 ?x63 ?x63 ?x63))))
 (let ((?x348 (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63)))
 (let ((?x405 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63))))
 (let ((?x402 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x63))))
 (let ((?x399 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46))))
 (let ((?x298 (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63 ?x63)))
 (let ((?x394 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63))))
 (let ((?x390 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x63))))
 (let ((?x386 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43))))
 (let ((?x477 (* (- (/ 1.0 8.0)) ?x46)))
 (let ((?x437 (* (- (/ 1.0 8.0)) ?x43)))
 (let ((?x505 (+ ?x437 ?x477 ?x386 ?x390 ?x394 ?x298 ?x399 ?x402 ?x405 ?x348 (* (/ 3.0 8.0) ?x444) (* (- (/ 3.0 8.0)) (* ?x43 ?x63 ?x63)) ?x475 (* (/ 3.0 8.0) (* ?x46 ?x63)) (* (- (/ 3.0 8.0)) (* ?x46 ?x63 ?x63)) ?x516 ?x721 ?x723 ?x725 ?x650)))
 (let ((?x864 (+ (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x48 ?x63 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x110 ?x114)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x63) (* (/ 1.0 8.0) (* ?x46 ?x46 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x46 ?x48 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x46 ?x63 ?x63 ?x63 ?x110 ?x114)) (* (/ 1.0 8.0) (* ?x43 ?x46 ?x63 ?x63 ?x63 ?x63)) (* ?x43 ?x43 ?x46 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x48 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x63 ?x63 ?x110 ?x114)) (* ?x43 ?x43 ?x43 ?x63 ?x63 ?x63) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x48 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x63 ?x63 ?x63 ?x110 ?x114)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x63 ?x63 ?x63 ?x63)))))
 (let (($x433 (not (= ?x864 0.0))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x145 (and $x116 (or $x433 (not (= (* ?x505 (+ ?x46 ?x201 ?x121 ?x444)) 0.0))))))
 (let ((?x720 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x63)))) ?x46 ?x43 ?x201)))
 (let ((?x264 (* 4.0 (* ?x43 ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x63)) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x63))))))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x648 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x275 (+ (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) ?x648 ?x648 ?x648)) (* (+ ?x46 ?x43) ?x648 ?x648 ?x648) (* (- 4.0) (* ?x43 ?x43 ?x648 ?x648 ?x648)) ?x264)))
 (let ((?x337 (+ (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) ?x516 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x43 ?x43)) (* ?x63 ?x63 ?x43 ?x43))))
 (let (($x286 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x337) 0.0)) (not (= (* ?x275 ?x720) 0.0)))))
 (let (($x628 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x651 (and $x628 $x286)))
 (rewrite (= $x651 $x145)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x718 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x720 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x648 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x275 (+ (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) ?x648 ?x648 ?x648)) (* (+ ?x46 ?x43) ?x648 ?x648 ?x648) (* (- 4.0) (* ?x43 ?x43 ?x648 ?x648 ?x648)) (* 4.0 (* ?x43 ?x43 ?x648 ?x648)))))
 (let ((?x516 (* (/ 1.0 8.0) (* ?x46 ?x63 ?x63 ?x63))))
 (let ((?x337 (+ (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) ?x516 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x43 ?x43)) (* ?x63 ?x63 ?x43 ?x43))))
 (let (($x286 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x337) 0.0)) (not (= (* ?x275 ?x720) 0.0)))))
 (let (($x149 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x149 $x286)))))))))))))))))) :qid k!28))
 ))
 (let ((?x654 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x720 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x648 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x275 (+ (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) ?x648 ?x648 ?x648)) (* (+ ?x46 ?x43) ?x648 ?x648 ?x648) (* (- 4.0) (* ?x43 ?x43 ?x648 ?x648 ?x648)) (* 4.0 (* ?x43 ?x43 ?x648 ?x648)))))
 (let ((?x516 (* (/ 1.0 8.0) (* ?x46 ?x63 ?x63 ?x63))))
 (let ((?x337 (+ (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) ?x516 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x43 ?x43)) (* ?x63 ?x63 ?x43 ?x43))))
 (let (($x286 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x337) 0.0)) (not (= (* ?x275 ?x720) 0.0)))))
 (let (($x628 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x651 (and $x628 $x286)))
 (let (($x149 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x269 (and $x149 $x286)))
 (rewrite (= $x269 $x651)))))))))))))))))))))))
 ))
 (let (($x80 (exists ((x Int) (y Int) (z Int) )(! (let ((?x60 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x63 (to_real y)))
 (let ((?x64 (/ ?x63 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x70 (+ (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x64 (to_real z)) (* ?x64 ?x64 ?x64 (to_real z)))))
 (let ((?x74 (+ (- ?x70 (* ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x64)) (* ?x41 ?x43 ?x41 ?x43 ?x64 ?x64))))
 (let ((?x48 (to_real z00)))
 (let ((?x46 (to_real z)))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x54 (+ (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x51) (* ?x42 ?x42 ?x42 ?x51))))
 (let ((?x58 (+ (- ?x54 (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42)) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42))))
 (let (($x62 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x58) ?x60))))
 (let (($x78 (or $x62 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x64) ?x46) ?x48) ?x74) ?x60)))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) $x78)))))))))))))))))) :qid k!28))
 ))
 (let ((?x655 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x720 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x648 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x275 (+ (* 8.0 (* ?x43 ?x43 ?x43 (+ ?x46 ?x43) ?x648 ?x648 ?x648)) (* (+ ?x46 ?x43) ?x648 ?x648 ?x648) (* (- 4.0) (* ?x43 ?x43 ?x648 ?x648 ?x648)) (* 4.0 (* ?x43 ?x43 ?x648 ?x648)))))
 (let ((?x516 (* (/ 1.0 8.0) (* ?x46 ?x63 ?x63 ?x63))))
 (let ((?x337 (+ (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) ?x516 (* (- (/ 1.0 2.0)) (* ?x63 ?x63 ?x63 ?x43 ?x43)) (* ?x63 ?x63 ?x43 ?x43))))
 (let (($x286 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x337) 0.0)) (not (= (* ?x275 ?x720) 0.0)))))
 (let (($x149 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x269 (and $x149 $x286)))
 (let ((?x60 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x64 (/ ?x63 ?x41)))
 (let ((?x70 (+ (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x64 ?x46) (* ?x64 ?x64 ?x64 ?x46))))
 (let ((?x74 (+ (- ?x70 (* ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x64)) (* ?x41 ?x43 ?x41 ?x43 ?x64 ?x64))))
 (let ((?x67 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x64) ?x46) ?x48)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x54 (+ (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x51) (* ?x42 ?x42 ?x42 ?x51))))
 (let ((?x58 (+ (- ?x54 (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42)) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x62 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x58) ?x60))))
 (let (($x79 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x62 (not (= (* ?x67 ?x74) ?x60))))))
 (rewrite (= $x79 $x269)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x577 (mp (mp @x81 (quant-intro (proof-bind ?x655) (= $x80 $x718)) $x718) (rewrite (= $x718 $x718)) $x718)))
 (let ((@x414 (mp (mp @x577 (quant-intro (proof-bind ?x654) (= $x718 $x619)) $x619) (quant-intro (proof-bind ?x216) (= $x619 $x215)) $x215)))
 (let ((@x825 (mp (mp~ @x414 (sk (~ $x215 $x530)) $x530) (rewrite (= $x530 $x314)) $x314)))
 (let ((@x635 (mp (and-elim @x825 $x604) @x704 $x425)))
 (let ((@x292 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x425) $x427)) @x635 $x427)))
 (let (($x426 (<= ?x519 0)))
 (let ((@x287 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x425) $x426)) @x635 $x426)))
 (let ((@x493 (unit-resolution ((_ th-lemma arith) (or (not $x426) (not $x427) $x440)) @x287 @x292 (hypothesis (not $x440)) false)))
 (let ((@x626 (lemma @x493 $x440)))
 (let (($x438 (<= ?x627 0.0)))
 (let ((?x150 (+ (* (- 1.0) (to_real (* x!2 y!1))) ?x365)))
 (let (($x256 (<= ?x150 0.0)))
 (let ((@x591 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x150 0.0)) $x256)) ((_ th-lemma arith) (= ?x150 0.0)) $x256)))
 (let ((?x213 (+ (* (- 1.0) (to_real ?x88)) ?x115)))
 (let (($x300 (>= ?x213 0.0)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x213 0.0)) $x300)) ((_ th-lemma arith) (= ?x213 0.0)) $x300)))
 (let ((@x313 (lemma ((_ th-lemma arith) (hypothesis (not $x438)) @x292 @x296 @x591 false) $x438)))
 (let ((@x101 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x235 (not $x438) (not $x440))) @x313 @x626 $x235)))
 (let (($x703 (= ?x627 0.0)))
 (let (($x644 (not $x703)))
 (let ((@x315 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x644 $x237)) (hypothesis $x623) $x644) (symm (hypothesis $x235) $x703) false)))
 (let ((@x711 (unit-resolution (and-elim @x825 $x174) (unit-resolution (lemma @x315 (or (not $x235) $x237)) @x101 $x237) $x359)))
 (let (($x507 (<= ?x573 0.0)))
 (let ((@x483 (unit-resolution ((_ th-lemma arith) (or (not $x440) (not $x438) $x507)) (hypothesis (not $x507)) @x313 @x626 false)))
 (let ((@x220 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x506 (not $x507) $x171)) (lemma @x483 $x507) (mp @x711 (monotonicity @x222 (= $x359 $x457)) $x457) $x171)))
 (unit-resolution ((_ th-lemma arith) (or $x129 (not $x427) (not $x426))) @x287 @x292 @x220 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      27
 :arith-eq-adapter               29
 :arith-bound-propagations-cheap 30
 :arith-bound-propagations-lp    4
 :arith-conflicts                62
 :arith-diseq                    32
 :arith-gcd-calls                5
 :arith-grobner-calls            4
 :arith-grobner-conflicts        3
 :arith-horner-calls             4
 :arith-lower                    48
 :arith-make-feasible            50
 :arith-max-columns              73
 :arith-max-rows                 17
 :arith-nla-explanations         78
 :arith-nla-lemmas               60
 :arith-patches                  5
 :arith-patches-success          5
 :arith-propagations             30
 :arith-upper                    49
 :conflicts                      9
 :decisions                      73
 :del-clause                     106
 :final-checks                   28
 :max-memory                     6.85
 :memory                         3.18
 :mk-bool-var                    173
 :mk-clause                      150
 :num-allocs                     5458568
 :num-checks                     1
 :propagations                   69
 :rlimit-count                   5785
 :time                           0.05
 :total-time                     0.05)
