unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x64 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x64)))
 (let ((?x207 (to_real r!1)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x508 (to_real x!0)))
 (let ((?x162 (to_real b!2)))
 (let ((?x998 (* ?x162 ?x508)))
 (let ((?x691 (+ ?x998 ?x156 ?x207 ?x142)))
 (let (($x628 (<= ?x691 0.0)))
 (let ((?x93 (* b00 x00)))
 (let ((?x923 (to_real ?x93)))
 (let ((?x635 (+ ?x923 ?x156)))
 (let (($x641 (<= ?x635 0.0)))
 (let (($x636 (= 0.0 ?x635)))
 (let ((@x656 (symm (commutativity (= $x636 (= ?x635 0.0))) (= (= ?x635 0.0) $x636))))
 (let ((@x225 (unit-resolution (hypothesis (not $x636)) (mp ((_ th-lemma arith) (= ?x635 0.0)) @x656 $x636) false)))
 (let ((@x234 (lemma @x225 $x636)))
 (let ((@x1123 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x636) $x641)) @x234 $x641)))
 (let ((?x896 (+ r00 ?x93 (* (- 1) r!1) (* (- 1) (* b!2 x!0)))))
 (let (($x594 (>= ?x896 0)))
 (let (($x517 (= 0 ?x896)))
 (let ((@x1044 (symm (commutativity (= $x517 (= ?x896 0))) (= (= ?x896 0) $x517))))
 (let (($x1110 (= ?x896 0)))
 (let ((?x1458 (* ?x162 ?x162 ?x162 ?x162 ?x207 ?x207)))
 (let ((?x1459 (* (- (/ 3.0 16.0)) ?x1458)))
 (let ((?x1444 (* ?x162 ?x162 ?x162 ?x162 ?x162 ?x207)))
 (let ((?x1449 (* (/ 3.0 32.0) ?x1444)))
 (let ((?x1438 (* ?x162 ?x162 ?x162 ?x162 ?x162 ?x162)))
 (let ((?x1439 (* (- (/ 1.0 64.0)) ?x1438)))
 (let ((?x1437 (* ?x162 ?x162 ?x162 ?x162 ?x508 ?x508 ?x508)))
 (let ((?x1421 (* (- (/ 1.0 2.0)) ?x1437)))
 (let ((?x1436 (* ?x162 ?x162 ?x162 ?x162 ?x508 ?x508)))
 (let ((?x1422 (* (- (/ 3.0 4.0)) ?x1436)))
 (let ((?x1419 (* ?x162 ?x162 ?x207)))
 (let ((?x1433 (* (/ 1.0 4.0) ?x1419)))
 (let ((?x1213 (* ?x162 ?x162 ?x162 ?x207 ?x207 ?x207)))
 (let ((?x487 (* (/ 1.0 8.0) ?x1213)))
 (let ((?x1172 (* ?x162 ?x162 ?x207 ?x207 ?x508 ?x508 ?x508)))
 (let ((?x96 (* (- 6.0) ?x1172)))
 (let ((?x1167 (* ?x162 ?x207 ?x207 ?x207 ?x508 ?x508)))
 (let ((?x446 (* 6.0 ?x1167)))
 (let ((?x1164 (* ?x162 ?x162 ?x207 ?x508)))
 (let ((?x1086 (* 2.0 ?x1164)))
 (let ((?x1106 (* ?x162 ?x207 ?x207 ?x207 ?x508)))
 (let ((?x899 (* 3.0 ?x1106)))
 (let ((?x1092 (* ?x162 ?x162 ?x207 ?x508 ?x508)))
 (let ((?x1113 (* 2.0 ?x1092)))
 (let ((?x1091 (* ?x162 ?x207 ?x207 ?x508)))
 (let ((?x640 (* (- 2.0) ?x1091)))
 (let ((?x982 (* ?x162 ?x162 ?x207 ?x207)))
 (let ((?x1285 (* (- (/ 3.0 4.0)) ?x982)))
 (let ((?x905 (* ?x162 ?x207 ?x207 ?x508 ?x508)))
 (let ((?x1036 (* (- 2.0) ?x905)))
 (let ((?x898 (* ?x162 ?x162 ?x162 ?x207 ?x508)))
 (let ((?x604 (* 2.0 ?x898)))
 (let ((?x685 (* ?x162 ?x162 ?x162 ?x508 ?x508)))
 (let ((?x1168 (* (- (/ 1.0 2.0)) ?x685)))
 (let ((?x652 (* ?x162 ?x207 ?x207 ?x207)))
 (let ((?x639 (* (/ 1.0 2.0) ?x652)))
 (let ((?x595 (* ?x162 ?x207 ?x207 ?x207 ?x508 ?x508 ?x508)))
 (let ((?x357 (* 4.0 ?x595)))
 (let ((?x538 (* ?x162 ?x162 ?x162 ?x162 ?x508)))
 (let ((?x947 (* (- (/ 1.0 4.0)) ?x538)))
 (let ((?x533 (* ?x162 ?x162 ?x162 ?x207)))
 (let ((?x341 (* (/ 1.0 4.0) ?x533)))
 (let ((?x379 (* ?x162 ?x207 ?x207)))
 (let ((?x388 (* (- (/ 1.0 2.0)) ?x379)))
 (let ((?x378 (* ?x162 ?x162 ?x162 ?x207 ?x508 ?x508)))
 (let ((?x468 (* (/ 9.0 2.0) ?x378)))
 (let ((?x326 (* ?x162 ?x162 ?x162 ?x508)))
 (let ((?x390 (* (- (/ 1.0 2.0)) ?x326)))
 (let ((?x256 (* ?x162 ?x162 ?x207 ?x207 ?x508)))
 (let ((?x347 (* (- (/ 9.0 2.0)) ?x256)))
 (let ((?x238 (* ?x162 ?x162 ?x207 ?x207 ?x508 ?x508)))
 (let ((?x914 (* (- 9.0) ?x238)))
 (let ((?x214 (* ?x162 ?x162 ?x162 ?x207 ?x508 ?x508 ?x508)))
 (let ((?x191 (* 3.0 ?x214)))
 (let ((?x907 (+ ?x191 ?x914 ?x347 ?x390 ?x468 ?x388 ?x341 ?x947 ?x357 ?x639 ?x1168 ?x604 ?x1036 ?x1285 ?x640 ?x1113 ?x899 ?x1086 ?x446 ?x96 ?x487 ?x1433 ?x1422 ?x1421 ?x1439 ?x1449 ?x1459)))
 (let ((?x921 (* (+ ?x142 ?x156 ?x207 ?x998) ?x907)))
 (let (($x1157 (= ?x921 0.0)))
 (let (($x911 (not $x1157)))
 (let ((?x1064 (* (- (/ 1.0 8.0)) (* ?x162 ?x162 ?x162 ?x207 ?x207 ?x207 ?x207))))
 (let ((?x1325 (* (/ 1.0 4.0) ?x982)))
 (let ((?x1095 (+ (* (/ 1.0 8.0) (* ?x64 ?x162 ?x162 ?x162 ?x207 ?x207 ?x207)) (* (- (/ 1.0 4.0)) (* ?x64 ?x162 ?x162 ?x162 ?x207 ?x508)) (* (- (/ 1.0 4.0)) (* ?x151 ?x152 ?x162 ?x162 ?x162 ?x207 ?x508)) (* (- 4.0) (* ?x162 ?x162 ?x207 ?x207 ?x207 ?x508 ?x508 ?x508 ?x508)) (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x162 ?x207 ?x508 ?x508)) (* (- (/ 1.0 8.0)) (* ?x162 ?x162 ?x162 ?x162 ?x207 ?x207 ?x207 ?x508)) (* (- (/ 1.0 4.0)) (* ?x64 ?x162 ?x162 ?x207)) (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x207 ?x207 ?x508)) (* (- 4.0) (* ?x162 ?x207 ?x207 ?x207 ?x207 ?x508 ?x508 ?x508)) (* 4.0 (* ?x64 ?x162 ?x207 ?x207 ?x207 ?x508 ?x508 ?x508)) (* (- 2.0) (* ?x64 ?x162 ?x207 ?x207 ?x508 ?x508)) (* (- 2.0) (* ?x151 ?x152 ?x162 ?x207 ?x207 ?x508 ?x508)) (* (/ 1.0 4.0) ?x898) (* (- (/ 1.0 4.0)) (* ?x151 ?x152 ?x162 ?x162 ?x207)) ?x1325 ?x1064 (* (/ 1.0 8.0) (* ?x151 ?x152 ?x162 ?x162 ?x162 ?x207 ?x207 ?x207)) (* 2.0 ?x1167) (* 4.0 (* ?x151 ?x152 ?x162 ?x207 ?x207 ?x207 ?x508 ?x508 ?x508)) (* 2.0 ?x1172))))
 (let (($x1107 (= ?x1095 0.0)))
 (let (($x237 (or (not $x1107) $x911)))
 (let (($x967 (and $x1110 $x237)))
 (let ((?x674 (+ ?x487 (* (- 9.0) (* ?x162 ?x162 ?x508 ?x508 ?x207 ?x207)) ?x1433 (* (- 2.0) (* ?x162 ?x508 ?x508 ?x207 ?x207)) (* 2.0 (* ?x162 ?x162 ?x162 ?x508 ?x207)) ?x1285 (* 6.0 (* ?x162 ?x508 ?x508 ?x207 ?x207 ?x207)) (* (- 6.0) (* ?x162 ?x162 ?x508 ?x508 ?x508 ?x207 ?x207)) ?x1422 ?x1421 ?x1439 ?x1449 ?x1459 (* (/ 9.0 2.0) (* ?x162 ?x162 ?x162 ?x508 ?x508 ?x207)) (* 3.0 (* ?x162 ?x162 ?x162 ?x508 ?x508 ?x508 ?x207)) (* 4.0 (* ?x162 ?x508 ?x508 ?x508 ?x207 ?x207 ?x207)) (* (- (/ 9.0 2.0)) (* ?x162 ?x162 ?x508 ?x207 ?x207)) ?x388 ?x390 (* 2.0 (* ?x162 ?x162 ?x508 ?x207)) (* (- 2.0) (* ?x162 ?x508 ?x207 ?x207)) ?x1168 (* 2.0 (* ?x162 ?x162 ?x508 ?x508 ?x207)) ?x341 ?x947 ?x639 (* 3.0 (* ?x162 ?x508 ?x207 ?x207 ?x207)))))
 (let ((?x121 (+ (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x508 ?x207)) ?x1064 (* (/ 1.0 8.0) (* ?x162 ?x162 ?x162 ?x207 ?x207 ?x207 ?x64)) (* (/ 1.0 8.0) (* ?x162 ?x162 ?x162 ?x207 ?x207 ?x207 ?x151 ?x152)) (* (- (/ 1.0 8.0)) (* ?x162 ?x162 ?x162 ?x162 ?x508 ?x207 ?x207 ?x207)) ?x1325 (* (- (/ 1.0 4.0)) (* ?x162 ?x162 ?x207 ?x64)) (* (- (/ 1.0 4.0)) (* ?x162 ?x162 ?x207 ?x151 ?x152)) (* (- 4.0) (* ?x162 ?x508 ?x508 ?x508 ?x207 ?x207 ?x207 ?x207)) (* 4.0 (* ?x162 ?x508 ?x508 ?x508 ?x207 ?x207 ?x207 ?x64)) (* 4.0 (* ?x162 ?x508 ?x508 ?x508 ?x207 ?x207 ?x207 ?x151 ?x152)) (* (- 4.0) (* ?x162 ?x162 ?x508 ?x508 ?x508 ?x508 ?x207 ?x207 ?x207)) (* 2.0 (* ?x162 ?x508 ?x508 ?x207 ?x207 ?x207)) (* (- 2.0) (* ?x162 ?x508 ?x508 ?x207 ?x207 ?x64)) (* (- 2.0) (* ?x162 ?x508 ?x508 ?x207 ?x207 ?x151 ?x152)) (* 2.0 (* ?x162 ?x162 ?x508 ?x508 ?x508 ?x207 ?x207)) (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x508 ?x207 ?x207)) (* (- (/ 1.0 4.0)) (* ?x162 ?x162 ?x162 ?x508 ?x207 ?x64)) (* (- (/ 1.0 4.0)) (* ?x162 ?x162 ?x162 ?x508 ?x207 ?x151 ?x152)) (* (/ 1.0 4.0) (* ?x162 ?x162 ?x162 ?x162 ?x508 ?x508 ?x207)))))
 (let (($x672 (or (not (= ?x121 0.0)) (not (= (* (+ ?x207 ?x142 ?x156 ?x998) ?x674) 0.0)))))
 (let (($x300 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x93)) 0) $x672)))
 (let (($x687 (exists ((b Int) (r Int) (x Int) )(! (let ((?x47 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x1056 (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x47))))
 (let ((?x1022 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x1055 (* (- 2.0) (* ?x40 ?x43 ?x47 ?x47))))
 (let ((?x1054 (* 2.0 (* ?x40 ?x40 ?x43 ?x47))))
 (let ((?x1053 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43))))
 (let ((?x972 (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47))))
 (let ((?x668 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x664 (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x660 (* (- (/ 1.0 64.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x269 (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47))))
 (let ((?x199 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47))))
 (let ((?x189 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x1502 (+ ?x189 (* (- 9.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) ?x199 ?x269 (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x47 ?x47)) (* 6.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 6.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) ?x660 ?x664 ?x668 (* (/ 9.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 9.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47)) ?x972 ?x1053 ?x1054 ?x1055 ?x1022 ?x1056 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x47 ?x47 ?x47)) (* 3.0 (* ?x40 ?x43 ?x47 ?x47 ?x47)))))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x64 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x64)))
 (let ((?x582 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47 ?x64)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47 ?x151 ?x152)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x151 ?x152)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x64)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x151 ?x152)) (* (- 4.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x64)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x151 ?x152)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x151 ?x152)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)))))
 (let (($x588 (not (= ?x582 0.0))))
 (let (($x958 (or $x588 (not (= (* (+ ?x47 ?x142 ?x156 (* ?x40 ?x43)) ?x1502) 0.0)))))
 (let (($x129 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x129 $x958))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x307 (exists ((b Int) (r Int) (x Int) )(! (let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x1170 (+ ?x47 ?x178)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x245 (+ 1.0 ?x255)))
 (let ((?x943 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x1170)) (* (/ 1.0 2.0) (* ?x40 ?x245 ?x245 ?x245 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 2.0)) (* ?x40 ?x245 ?x245 ?x1170 ?x1170)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x245 ?x1170)))))
 (let ((?x64 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x64)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let (($x601 (= (* (+ ?x156 ?x47 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 ?x245))) ?x943) 0.0)))
 (let ((?x309 (+ (* (/ 1.0 8.0) (* ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 4.0)) (* ?x47 ?x40 ?x40)) (* 4.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40)) (* (- (/ 1.0 4.0)) (* ?x43 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x436 (or (not (= (* (+ ?x156 ?x47 ?x142 (* ?x43 ?x40)) ?x309) 0.0)) (not $x601))))
 (let (($x434 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x434 $x436))))))))))))))))))) :qid k!28))
 ))
 (let ((?x688 (lambda ((b Int) (r Int) (x Int) )(let ((?x47 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x1056 (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x47))))
 (let ((?x1022 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x1055 (* (- 2.0) (* ?x40 ?x43 ?x47 ?x47))))
 (let ((?x1054 (* 2.0 (* ?x40 ?x40 ?x43 ?x47))))
 (let ((?x1053 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43))))
 (let ((?x972 (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47))))
 (let ((?x668 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x664 (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x660 (* (- (/ 1.0 64.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x269 (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47))))
 (let ((?x199 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47))))
 (let ((?x189 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x1502 (+ ?x189 (* (- 9.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) ?x199 ?x269 (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x47 ?x47)) (* 6.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 6.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43)) ?x660 ?x664 ?x668 (* (/ 9.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 9.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47)) ?x972 ?x1053 ?x1054 ?x1055 ?x1022 ?x1056 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 1.0 2.0) (* ?x40 ?x47 ?x47 ?x47)) (* 3.0 (* ?x40 ?x43 ?x47 ?x47 ?x47)))))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let ((?x64 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x64)))
 (let ((?x582 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47 ?x64)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47 ?x151 ?x152)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x151 ?x152)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x64)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x151 ?x152)) (* (- 4.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x64)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x151 ?x152)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x151 ?x152)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)))))
 (let (($x588 (not (= ?x582 0.0))))
 (let (($x958 (or $x588 (not (= (* (+ ?x47 ?x142 ?x156 (* ?x40 ?x43)) ?x1502) 0.0)))))
 (let (($x129 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x1529 (and $x129 $x958)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x1170 (+ ?x47 ?x178)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x245 (+ 1.0 ?x255)))
 (let ((?x943 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x1170)) (* (/ 1.0 2.0) (* ?x40 ?x245 ?x245 ?x245 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 2.0)) (* ?x40 ?x245 ?x245 ?x1170 ?x1170)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x245 ?x1170)))))
 (let (($x601 (= (* (+ ?x156 ?x47 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 ?x245))) ?x943) 0.0)))
 (let ((?x309 (+ (* (/ 1.0 8.0) (* ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 4.0)) (* ?x47 ?x40 ?x40)) (* 4.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40)) (* (- (/ 1.0 4.0)) (* ?x43 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x436 (or (not (= (* (+ ?x156 ?x47 ?x142 (* ?x43 ?x40)) ?x309) 0.0)) (not $x601))))
 (let (($x434 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x311 (and $x434 $x436)))
 (rewrite (= $x311 $x1529))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x676 (exists ((b Int) (r Int) (x Int) )(! (let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x1170 (+ ?x47 ?x178)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x245 (+ 1.0 ?x255)))
 (let ((?x943 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x1170)) (* (/ 1.0 2.0) (* ?x40 ?x245 ?x245 ?x245 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 2.0)) (* ?x40 ?x245 ?x245 ?x1170 ?x1170)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x245 ?x1170)))))
 (let ((?x64 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x64)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let (($x601 (= (* (+ ?x156 ?x47 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 ?x245))) ?x943) 0.0)))
 (let ((?x309 (+ (* (/ 1.0 8.0) (* ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 4.0)) (* ?x47 ?x40 ?x40)) (* 4.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40)) (* (- (/ 1.0 4.0)) (* ?x43 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x436 (or (not (= (* (+ ?x156 ?x47 ?x142 (* ?x43 ?x40)) ?x309) 0.0)) (not $x601))))
 (let (($x247 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x247 $x436))))))))))))))))))) :qid k!28))
 ))
 (let ((?x301 (lambda ((b Int) (r Int) (x Int) )(let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x1170 (+ ?x47 ?x178)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x245 (+ 1.0 ?x255)))
 (let ((?x943 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x1170)) (* (/ 1.0 2.0) (* ?x40 ?x245 ?x245 ?x245 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 2.0)) (* ?x40 ?x245 ?x245 ?x1170 ?x1170)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x245 ?x1170)))))
 (let ((?x64 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x64)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let (($x601 (= (* (+ ?x156 ?x47 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 ?x245))) ?x943) 0.0)))
 (let ((?x309 (+ (* (/ 1.0 8.0) (* ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 4.0)) (* ?x47 ?x40 ?x40)) (* 4.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40)) (* (- (/ 1.0 4.0)) (* ?x43 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x436 (or (not (= (* (+ ?x156 ?x47 ?x142 (* ?x43 ?x40)) ?x309) 0.0)) (not $x601))))
 (let (($x434 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x311 (and $x434 $x436)))
 (let (($x247 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x953 (and $x247 $x436)))
 (rewrite (= $x953 $x311))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((b Int) (r Int) (x Int) )(! (let ((?x58 (to_real 0)))
 (let ((?x68 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x47 (to_real r)))
 (let ((?x61 (- ?x47 ?x42)))
 (let ((?x75 (+ (- (* ?x42 ?x42 ?x42 ?x61 ?x61 ?x61) (* ?x42 ?x42 ?x61)) (* ?x42 ?x61 ?x61 ?x61 ?x68 ?x68 ?x68))))
 (let ((?x79 (- (- ?x75 (* ?x42 ?x61 ?x61 ?x68 ?x68)) (* ?x42 ?x42 ?x42 ?x61 ?x68))))
 (let ((?x70 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x61) (to_real r00)) (* ?x42 ?x68))))
 (let ((?x43 (to_real x)))
 (let ((?x52 (+ (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x47) (* ?x42 ?x42 ?x47)) (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x56 (- (- ?x52 (* ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43)) (* ?x42 ?x42 ?x42 ?x47 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x56) ?x58)) (not (= (* ?x70 ?x79) ?x58))))))))))))))))))) :qid k!28))
 ))
 (let ((?x701 (lambda ((b Int) (r Int) (x Int) )(let ((?x40 (to_real b)))
 (let ((?x178 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x1170 (+ ?x47 ?x178)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x245 (+ 1.0 ?x255)))
 (let ((?x943 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x1170)) (* (/ 1.0 2.0) (* ?x40 ?x245 ?x245 ?x245 ?x1170 ?x1170 ?x1170)) (* (- (/ 1.0 2.0)) (* ?x40 ?x245 ?x245 ?x1170 ?x1170)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x245 ?x1170)))))
 (let ((?x64 (to_real r00)))
 (let ((?x142 (* (- 1.0) ?x64)))
 (let ((?x152 (to_real x00)))
 (let ((?x151 (to_real b00)))
 (let ((?x153 (* ?x151 ?x152)))
 (let ((?x156 (* (- 1.0) ?x153)))
 (let (($x601 (= (* (+ ?x156 ?x47 ?x178 ?x142 (* (/ 1.0 2.0) (* ?x40 ?x245))) ?x943) 0.0)))
 (let ((?x309 (+ (* (/ 1.0 8.0) (* ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- (/ 1.0 4.0)) (* ?x47 ?x40 ?x40)) (* 4.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x40)) (* (- (/ 1.0 4.0)) (* ?x43 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x436 (or (not (= (* (+ ?x156 ?x47 ?x142 (* ?x43 ?x40)) ?x309) 0.0)) (not $x601))))
 (let (($x247 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x953 (and $x247 $x436)))
 (let ((?x58 (to_real 0)))
 (let ((?x68 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x61 (- ?x47 ?x42)))
 (let ((?x75 (+ (- (* ?x42 ?x42 ?x42 ?x61 ?x61 ?x61) (* ?x42 ?x42 ?x61)) (* ?x42 ?x61 ?x61 ?x61 ?x68 ?x68 ?x68))))
 (let ((?x79 (- (- ?x75 (* ?x42 ?x61 ?x61 ?x68 ?x68)) (* ?x42 ?x42 ?x42 ?x61 ?x68))))
 (let ((?x70 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x61) ?x64) (* ?x42 ?x68))))
 (let ((?x52 (+ (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x47) (* ?x42 ?x42 ?x47)) (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x56 (- (- ?x52 (* ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43)) (* ?x42 ?x42 ?x42 ?x47 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x84 (and $x38 (or (not (= (* ?x46 ?x56) ?x58)) (not (= (* ?x70 ?x79) ?x58))))))
 (rewrite (= $x84 $x953)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x527 (mp (mp @x86 (quant-intro (proof-bind ?x701) (= $x85 $x676)) $x676) (rewrite (= $x676 $x676)) $x676)))
 (let ((@x1324 (mp (mp @x527 (quant-intro (proof-bind ?x301) (= $x676 $x307)) $x307) (quant-intro (proof-bind ?x688) (= $x307 $x687)) $x687)))
 (let ((@x997 (mp (mp~ @x1324 (sk (~ $x687 $x300)) $x300) (rewrite (= $x300 $x967)) $x967)))
 (let ((@x605 (mp (and-elim @x997 $x1110) @x1044 $x517)))
 (let ((@x522 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x517) $x594)) @x605 $x594)))
 (let ((?x242 (+ ?x998 (* (- 1.0) (to_real (* b!2 x!0))))))
 (let (($x1153 (<= ?x242 0.0)))
 (let (($x949 (= ?x242 0.0)))
 (let ((@x599 (lemma (unit-resolution ((_ th-lemma arith) $x949) (hypothesis (not $x949)) false) $x949)))
 (let ((@x645 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x949) $x1153)) @x599 $x1153)))
 (let ((@x649 (lemma ((_ th-lemma arith) (hypothesis (not $x628)) @x645 @x522 (hypothesis $x641) false) (or (not $x641) $x628))))
 (let ((@x680 (unit-resolution @x649 @x1123 $x628)))
 (let ((?x273 (+ (* (/ 1.0 64.0) ?x1438) (* (- (/ 3.0 32.0)) ?x1444) (* 6.0 ?x1172) (* (- 2.0) ?x898) (* (/ 3.0 4.0) ?x982) (* (- 6.0) ?x1167) (* (/ 3.0 16.0) ?x1458) (* (- 3.0) ?x214) (* 9.0 ?x238) (* (/ 9.0 2.0) ?x256) (* (/ 1.0 2.0) ?x326) (* (- (/ 9.0 2.0)) ?x378) (* (/ 1.0 2.0) ?x379) (* (- (/ 1.0 4.0)) ?x533) (* (/ 1.0 4.0) ?x538) (* (- 4.0) ?x595) (* (- (/ 1.0 2.0)) ?x652) (* (/ 1.0 2.0) ?x685) (* 2.0 ?x905) (* 2.0 ?x1091) (* (- 2.0) ?x1092) (* (- 3.0) ?x1106) (* (- 2.0) ?x1164) (* (- (/ 1.0 8.0)) ?x1213) (* (- (/ 1.0 4.0)) ?x1419) (* (/ 3.0 4.0) ?x1436) (* (/ 1.0 2.0) ?x1437))))
 (let (($x1029 (>= ?x273 0.0)))
 (let (($x173 (not $x1029)))
 (let ((?x1117 (+ ?x1439 ?x1449 ?x96 ?x604 ?x1285 ?x446 ?x1459 ?x191 ?x914 ?x347 ?x390 ?x468 ?x388 ?x341 ?x947 ?x357 ?x639 ?x1168 ?x1036 ?x640 ?x1113 ?x899 ?x1086 ?x487 ?x1433 ?x1422 ?x1421)))
 (let (($x897 (<= ?x1117 0.0)))
 (let (($x1074 (not $x897)))
 (let (($x126 (>= ?x1117 0.0)))
 (let (($x621 (<= ?x273 0.0)))
 (let (($x452 (not $x621)))
 (let ((@x449 (hypothesis $x452)))
 (let (($x89 (>= ?x691 0.0)))
 (let (($x924 (>= ?x242 0.0)))
 (let ((@x1122 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x949) $x924)) @x599 $x924)))
 (let ((?x1098 (+ (* (- 1.0) ?x923) ?x153)))
 (let (($x1105 (<= ?x1098 0.0)))
 (let (($x279 (= 0.0 ?x1098)))
 (let ((@x620 (symm (commutativity (= $x279 (= ?x1098 0.0))) (= (= ?x1098 0.0) $x279))))
 (let ((@x976 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x279) $x1105)) (mp ((_ th-lemma arith) (= ?x1098 0.0)) @x620 $x279) $x1105)))
 (let (($x158 (<= ?x896 0)))
 (let ((@x929 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x517) $x158)) @x605 $x158)))
 (let ((@x346 (lemma ((_ th-lemma arith) (hypothesis (not $x89)) (hypothesis $x924) @x929 @x976 false) (or (not $x924) $x89))))
 (let ((@x175 (unit-resolution @x346 @x1122 $x89)))
 (let (($x1083 (<= ?x921 0.0)))
 (let (($x1138 (not $x1083)))
 (let (($x1108 (>= ?x921 0.0)))
 (let (($x169 (not $x1108)))
 (let ((@x440 (hypothesis $x169)))
 (let ((@x176 (unit-resolution ((_ th-lemma arith) (or (not $x89) $x1029 $x1108)) @x440 (hypothesis $x173) @x175 false)))
 (let ((@x937 ((_ th-lemma arith) (or $x897 $x173))))
 (let ((@x462 (unit-resolution @x937 (unit-resolution (lemma @x176 (or $x1029 $x1108)) @x440 $x1029) $x897)))
 (let ((@x749 (unit-resolution ((_ th-lemma arith) (or (not $x628) $x621 $x1108)) @x440 @x680 @x449 false)))
 (let ((@x748 (lemma ((_ th-lemma arith) (hypothesis (not $x126)) (hypothesis $x621) false) (or $x452 $x126))))
 (let ((@x1073 (unit-resolution @x748 (unit-resolution (lemma @x749 (or $x621 $x1108)) @x440 $x621) $x126)))
 (let (($x880 (= ?x1117 0.0)))
 (let (($x333 (not $x880)))
 (let (($x475 (= 0.0 ?x1095)))
 (let (($x90 (<= ?x1095 0.0)))
 (let (($x615 (>= ?x635 0.0)))
 (let (($x319 (not $x641)))
 (let (($x503 (not $x158)))
 (let (($x401 (not $x594)))
 (let (($x550 (not $x924)))
 (let ((@x1129 (unit-resolution ((_ th-lemma arith) (or $x550 $x401 $x503 $x90 (not $x1153) $x319 (not $x615))) @x929 @x522 (hypothesis (not $x90)) @x1122 @x645 @x1123 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x636) $x615)) @x234 $x615) false)))
 (let (($x92 (>= ?x1095 0.0)))
 (let ((@x403 (unit-resolution ((_ th-lemma arith) (or $x92 $x401 $x503)) @x929 @x522 (hypothesis (not $x92)) false)))
 (let ((@x889 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x475 (not $x90) (not $x92))) (lemma @x403 $x92) (or $x475 (not $x90)))))
 (let ((@x928 (mp (unit-resolution @x889 (lemma @x1129 $x90) $x475) (commutativity (= $x475 $x1107)) $x1107)))
 (let ((@x930 (unit-resolution (and-elim @x997 $x237) @x928 $x911)))
 (let ((@x927 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x333 $x1157)) @x930 $x333) (symm (hypothesis (= 0.0 ?x1117)) $x880) false)))
 (let ((@x1076 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x1117) $x1074 (not $x126))) (lemma @x927 (not (= 0.0 ?x1117))) (or $x1074 (not $x126)))))
 (let (($x1152 (= 0.0 ?x921)))
 (let (($x469 (not $x1152)))
 (let ((@x122 (monotonicity (symm (commutativity (= $x1152 $x1157)) (= $x1157 $x1152)) (= $x911 $x469))))
 (let ((@x470 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1152 $x1138 $x169)) (mp @x930 @x122 $x469) (or $x1138 $x169))))
 (let ((@x131 (unit-resolution @x470 (lemma (unit-resolution @x1076 @x1073 @x462 false) $x1108) $x1138)))
 (let ((@x133 (unit-resolution ((_ th-lemma arith) (or (not $x89) $x621 $x1083)) @x131 @x175 @x449 false)))
 (let ((@x195 (unit-resolution @x1076 (unit-resolution @x748 (lemma @x133 $x621) $x126) $x1074)))
 (unit-resolution ((_ th-lemma arith) (or (not $x628) $x1029 $x1083)) @x131 (unit-resolution @x937 @x195 $x173) @x680 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      40
 :arith-eq-adapter               76
 :arith-bound-propagations-cheap 112
 :arith-bound-propagations-lp    5
 :arith-branch                   1
 :arith-conflicts                291
 :arith-diseq                    79
 :arith-gcd-calls                17
 :arith-grobner-calls            11
 :arith-grobner-conflicts        2
 :arith-horner-calls             11
 :arith-lower                    176
 :arith-make-feasible            166
 :arith-max-columns              84
 :arith-max-rows                 18
 :arith-nla-explanations         142
 :arith-nla-lemmas               286
 :arith-patches                  17
 :arith-patches-success          16
 :arith-propagations             112
 :arith-upper                    164
 :conflicts                      30
 :decisions                      419
 :del-clause                     197
 :final-checks                   80
 :max-memory                     5.13
 :memory                         3.27
 :mk-bool-var                    474
 :mk-clause                      355
 :num-allocs                     12602869
 :num-checks                     1
 :propagations                   392
 :rlimit-count                   13270
 :time                           0.06
 :total-time                     0.06)
