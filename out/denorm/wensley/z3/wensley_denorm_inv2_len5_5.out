unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x673 (+ (* (/ 1.0 2.0) (* (to_real d00) (to_real b!2))) (* (- (/ 1.0 2.0)) (* (to_real b00) (to_real d!1))))))
 (let (($x737 (<= ?x673 0.0)))
 (let ((?x463 (* d00 b!2)))
 (let ((?x537 (+ ?x463 (* (- 1) (* b00 d!1)))))
 (let (($x576 (<= ?x537 0)))
 (let (($x563 (= 0 ?x537)))
 (let ((@x275 (symm (commutativity (= $x563 (= ?x537 0))) (= (= ?x537 0) $x563))))
 (let (($x550 (= ?x537 0)))
 (let ((?x213 (to_real a!3)))
 (let ((?x199 (to_real d!1)))
 (let ((?x193 (to_real b!2)))
 (let ((?x189 (to_real y!0)))
 (let ((?x768 (* (/ 3.0 16.0) (* ?x189 ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x213 ?x213))))
 (let ((?x431 (* (/ 3.0 16.0) (* ?x189 ?x189 ?x193 ?x193 ?x193 ?x193 ?x199 ?x213 ?x213))))
 (let ((?x388 (* (/ 1.0 16.0) (* ?x189 ?x193 ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x199))))
 (let ((?x669 (* (/ 1.0 16.0) (* ?x189 ?x189 ?x193 ?x193 ?x193 ?x193 ?x193 ?x193 ?x199))))
 (let ((?x640 (* (- (/ 1.0 2.0)) (* ?x189 ?x199 ?x213))))
 (let ((?x641 (* (/ 1.0 8.0) (* ?x189 ?x189 ?x193 ?x193 ?x199))))
 (let ((?x642 (* (- (/ 3.0 4.0)) (* ?x189 ?x193 ?x199))))
 (let ((?x630 (* (/ 1.0 16.0) (* ?x189 ?x189 ?x193 ?x193 ?x193 ?x199 ?x213 ?x213 ?x213))))
 (let ((?x598 (* (/ 3.0 64.0) (* ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x199 ?x213))))
 (let ((?x528 (* (- (/ 1.0 4.0)) (* ?x199 ?x199 ?x213))))
 (let ((?x525 (* (- (/ 3.0 8.0)) (* ?x193 ?x199 ?x199))))
 (let ((?x505 (* (/ 1.0 32.0) (* ?x193 ?x193 ?x199 ?x199 ?x199))))
 (let ((?x473 (* (/ 1.0 64.0) (* ?x193 ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x199))))
 (let ((?x484 (* (/ 1.0 64.0) (* ?x193 ?x193 ?x193 ?x199 ?x199 ?x199 ?x213 ?x213 ?x213))))
 (let ((?x479 (* (/ 3.0 64.0) (* ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x199 ?x213 ?x213))))
 (let ((?x435 (* (/ 1.0 8.0) (* ?x193 ?x193 ?x193))))
 (let ((?x375 (* (/ 3.0 16.0) (* ?x189 ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x213))))
 (let ((?x156 (* (/ 3.0 16.0) (* ?x189 ?x189 ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x213))))
 (let ((?x767 (* (/ 1.0 16.0) (* ?x189 ?x193 ?x193 ?x193 ?x199 ?x199 ?x213 ?x213 ?x213))))
 (let ((?x233 (* (/ 1.0 8.0) (* ?x189 ?x193 ?x193 ?x199 ?x199))))
 (let ((?x240 (+ ?x233 ?x767 ?x156 ?x375 ?x435 ?x479 ?x484 ?x473 ?x505 ?x525 ?x528 ?x598 ?x630 ?x642 ?x641 ?x640 ?x669 ?x388 ?x431 ?x768)))
 (let ((?x620 (+ (* (/ 1.0 2.0) (* (to_real b00) ?x199)) (* (- (/ 1.0 2.0)) (* (to_real d00) ?x193)))))
 (let ((?x268 (* ?x620 ?x240)))
 (let (($x633 (= ?x268 0.0)))
 (let (($x224 (not $x633)))
 (let ((?x64 (to_real b00)))
 (let ((?x177 (* (/ 1.0 32.0) (* ?x64 ?x189 ?x189 ?x193 ?x193 ?x193 ?x199 ?x199 ?x213 ?x213 ?x213))))
 (let ((?x60 (to_real d00)))
 (let ((?x848 (* (- (/ 1.0 32.0)) (* ?x60 ?x189 ?x189 ?x193 ?x193 ?x193 ?x193 ?x199 ?x213 ?x213 ?x213))))
 (let ((?x367 (+ (* (/ 1.0 16.0) (* ?x64 ?x193 ?x193 ?x193 ?x199)) (* (- (/ 1.0 4.0)) (* ?x64 ?x189 ?x199 ?x199 ?x213)) ?x848 (* (/ 1.0 16.0) (* ?x64 ?x189 ?x189 ?x193 ?x193 ?x199 ?x199)) ?x177 (* (- (/ 1.0 16.0)) (* ?x60 ?x189 ?x189 ?x193 ?x193 ?x193 ?x199)) (* (/ 1.0 8.0) (* ?x60 ?x189 ?x193 ?x193 ?x199)) (* (- (/ 1.0 8.0)) (* ?x64 ?x189 ?x193 ?x199 ?x199)) (* (- (/ 1.0 16.0)) (* ?x60 ?x193 ?x193 ?x193 ?x193)) (* (/ 1.0 4.0) (* ?x60 ?x189 ?x193 ?x199 ?x213)))))
 (let (($x376 (= ?x367 0.0)))
 (let (($x637 (or (not $x376) $x224)))
 (let ((?x592 (+ (* 2 (* y!0 b!2)) (* (- 1) (* d!1 a!3)) (* a00 d!1) (* (- 2) (* y00 b!2)))))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x554 (= (+ ?x35 ?x107 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x792 (and $x554 $x550 (= ?x592 0) $x637)))
 (let ((?x533 (+ (* (/ 1.0 16.0) (* ?x193 ?x193 ?x193 ?x199 ?x213 ?x213 ?x213 ?x189 ?x189)) (* (/ 1.0 8.0) (* ?x193 ?x193 ?x199 ?x189 ?x189)) (* (- (/ 3.0 4.0)) (* ?x193 ?x199 ?x189)) ?x435 (* (- (/ 1.0 2.0)) (* ?x199 ?x213 ?x189)) (* (/ 1.0 16.0) (* ?x193 ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x189 ?x189)) ?x598 ?x473 ?x479 ?x484 (* (/ 1.0 16.0) (* ?x193 ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x189)) (* (/ 3.0 16.0) (* ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x213 ?x189)) (* (/ 3.0 16.0) (* ?x193 ?x193 ?x193 ?x193 ?x199 ?x199 ?x213 ?x213 ?x189)) (* (/ 1.0 16.0) (* ?x193 ?x193 ?x193 ?x199 ?x199 ?x213 ?x213 ?x213 ?x189)) (* (/ 3.0 16.0) (* ?x193 ?x193 ?x193 ?x193 ?x193 ?x199 ?x213 ?x189 ?x189)) (* (/ 3.0 16.0) (* ?x193 ?x193 ?x193 ?x193 ?x199 ?x213 ?x213 ?x189 ?x189)) ?x505 (* (/ 1.0 8.0) (* ?x193 ?x193 ?x199 ?x199 ?x189)) ?x525 ?x528)))
 (let (($x527 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x193 ?x60)) (* (/ 1.0 2.0) (* ?x199 ?x64))) ?x533) 0.0)))
 (let ((?x215 (* (- (/ 1.0 32.0)) (* ?x193 ?x193 ?x193 ?x199 ?x199 ?x64 ?x213 ?x213 ?x213 ?x189 ?x189))))
 (let ((?x698 (* (/ 1.0 32.0) (* ?x193 ?x193 ?x193 ?x193 ?x60 ?x199 ?x213 ?x213 ?x213 ?x189 ?x189))))
 (let ((?x756 (+ ?x698 ?x215 (* (/ 1.0 16.0) (* ?x193 ?x193 ?x193 ?x60 ?x199 ?x189 ?x189)) (* (- (/ 1.0 16.0)) (* ?x193 ?x193 ?x199 ?x199 ?x64 ?x189 ?x189)) (* (- (/ 1.0 8.0)) (* ?x193 ?x193 ?x60 ?x199 ?x189)) (* (/ 1.0 8.0) (* ?x193 ?x199 ?x199 ?x64 ?x189)) (* (/ 1.0 16.0) (* ?x193 ?x193 ?x193 ?x193 ?x60)) (* (- (/ 1.0 16.0)) (* ?x193 ?x193 ?x193 ?x199 ?x64)) (* (- (/ 1.0 4.0)) (* ?x193 ?x60 ?x199 ?x213 ?x189)) (* (/ 1.0 4.0) (* ?x199 ?x199 ?x64 ?x213 ?x189)))))
 (let ((?x185 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x238 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x107 (* 2 (* y!0 b00))) 0)))
 (let (($x534 (and $x238 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x185 0) (or (not (= ?x756 0.0)) (not $x527)))))
 (let (($x245 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x667 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 (to_real a) (to_real a) ?x68 ?x68))))
 (let ((?x664 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 (to_real a) ?x68 ?x68))))
 (let ((?x67 (to_real a)))
 (let ((?x236 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56))))
 (let ((?x894 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 ?x68 ?x68)) (* (- (/ 3.0 4.0)) (* ?x56 ?x62 ?x68)) ?x236 (* (- (/ 1.0 2.0)) (* ?x62 ?x67 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x68)) ?x664 ?x667 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 ?x62 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x67)))))
 (let ((?x205 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x64 (to_real b00)))
 (let ((?x384 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x64 ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x60 (to_real d00)))
 (let ((?x383 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x349 (+ ?x383 ?x384 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x68 ?x68)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x62 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x62 ?x62 ?x64 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x64)) (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x62 ?x67 ?x68)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x64 ?x67 ?x68)))))
 (let ((?x48 (* a d)))
 (let ((?x176 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x139 (= (+ ?x35 (* (- 1) (* a d00)) ?x107 (* 2 (* y b00))) 0)))
 (and $x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x176 0) (or (not (= ?x349 0.0)) (not (= (* ?x205 ?x894) 0.0)))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x572 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x220 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x582 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x236 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56))))
 (let ((?x516 (+ (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x582 ?x582 ?x582 ?x220 ?x220)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x220 ?x220)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x220)) ?x236 (* (- (/ 1.0 2.0)) (* ?x62 ?x582 ?x220)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x437 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x62 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x68 ?x62 ?x56)) ?x236 (* (- (/ 1.0 2.0)) (* ?x68 ?x62 ?x67)))))
 (let (($x441 (or (not (= (* ?x186 ?x437) 0.0)) (not (= (* ?x186 ?x516) 0.0)))))
 (let ((?x132 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x226 (= ?x132 0)))
 (let ((?x855 (* d00 a)))
 (let ((?x487 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x855)))
 (and (= ?x487 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x226 $x441)))))))))))))))) :qid k!33))
 ))
 (let ((?x411 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x667 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 (to_real a) (to_real a) ?x68 ?x68))))
 (let ((?x664 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 (to_real a) ?x68 ?x68))))
 (let ((?x67 (to_real a)))
 (let ((?x236 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56))))
 (let ((?x894 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x67 ?x68 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 ?x68 ?x68)) (* (- (/ 3.0 4.0)) (* ?x56 ?x62 ?x68)) ?x236 (* (- (/ 1.0 2.0)) (* ?x62 ?x67 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x68 ?x68)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x68)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x68)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x68)) ?x664 ?x667 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 ?x62 ?x68)) (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x62 ?x62 ?x67)))))
 (let ((?x205 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x64 (to_real b00)))
 (let ((?x384 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x64 ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x60 (to_real d00)))
 (let ((?x383 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x67 ?x67 ?x67 ?x68 ?x68))))
 (let ((?x349 (+ ?x383 ?x384 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x68 ?x68)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x68 ?x68)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x62 ?x68)) (* (/ 1.0 8.0) (* ?x56 ?x62 ?x62 ?x64 ?x68)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x64)) (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x62 ?x67 ?x68)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x64 ?x67 ?x68)))))
 (let ((?x48 (* a d)))
 (let ((?x176 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let ((?x35 (* a00 d00)))
 (let (($x139 (= (+ ?x35 (* (- 1) (* a d00)) ?x107 (* 2 (* y b00))) 0)))
 (let (($x916 (and $x139 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x176 0) (or (not (= ?x349 0.0)) (not (= (* ?x205 ?x894) 0.0))))))
 (let ((?x220 (+ ?x68 (* (/ 1.0 2.0) ?x62))))
 (let ((?x582 (+ ?x67 ?x56)))
 (let ((?x516 (+ (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x582 ?x582 ?x582 ?x220 ?x220)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x220 ?x220)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x220)) ?x236 (* (- (/ 1.0 2.0)) (* ?x62 ?x582 ?x220)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) (* (/ 1.0 2.0) (* ?x64 ?x62)))))
 (let ((?x437 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x62 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x68 ?x62 ?x56)) ?x236 (* (- (/ 1.0 2.0)) (* ?x68 ?x62 ?x67)))))
 (let (($x441 (or (not (= (* ?x186 ?x437) 0.0)) (not (= (* ?x186 ?x516) 0.0)))))
 (let ((?x132 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x226 (= ?x132 0)))
 (let ((?x855 (* d00 a)))
 (let (($x458 (= (+ (* 2 ?x106) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x855) 0)))
 (let (($x432 (and $x458 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x226 $x441)))
 (rewrite (= $x432 $x916)))))))))))))))))))))))))))))))))))
 ))
 (let (($x408 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real y)))
 (let ((?x220 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x582 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x236 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56))))
 (let ((?x516 (+ (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x582 ?x582 ?x582 ?x220 ?x220)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x220 ?x220)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x220)) ?x236 (* (- (/ 1.0 2.0)) (* ?x62 ?x582 ?x220)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x437 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x62 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x68 ?x62 ?x56)) ?x236 (* (- (/ 1.0 2.0)) (* ?x68 ?x62 ?x67)))))
 (let (($x441 (or (not (= (* ?x186 ?x437) 0.0)) (not (= (* ?x186 ?x516) 0.0)))))
 (let ((?x132 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x226 (= ?x132 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x879 (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x879 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x226 $x441)))))))))))))))))) :qid k!33))
 ))
 (let ((?x260 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x220 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x582 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x236 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56))))
 (let ((?x516 (+ (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x582 ?x582 ?x582 ?x220 ?x220)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x220 ?x220)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x220)) ?x236 (* (- (/ 1.0 2.0)) (* ?x62 ?x582 ?x220)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x437 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x62 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x68 ?x62 ?x56)) ?x236 (* (- (/ 1.0 2.0)) (* ?x68 ?x62 ?x67)))))
 (let (($x441 (or (not (= (* ?x186 ?x437) 0.0)) (not (= (* ?x186 ?x516) 0.0)))))
 (let ((?x132 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x226 (= ?x132 0)))
 (let ((?x855 (* d00 a)))
 (let ((?x487 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x855)))
 (let (($x432 (and (= ?x487 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x226 $x441)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x529 (and (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) ?x855)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x226 $x441)))
 (rewrite (= $x529 $x432)))))))))))))))))))))))
 ))
 (let (($x98 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x68 (to_real y)))
 (let ((?x83 (+ ?x68 ?x63)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x74 (* ?x58 ?x58 ?x58)))
 (let ((?x87 (+ (* ?x84 ?x84 ?x84 ?x58 ?x58 ?x58 ?x63 ?x83 ?x83) (* ?x58 ?x58 ?x63 ?x83 ?x83))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x93 (* ?x66 (- (+ (- ?x87 (* ?x58 ?x63 ?x83)) ?x74) (* ?x84 ?x63 ?x83)))))
 (let ((?x67 (to_real a)))
 (let ((?x71 (+ (* ?x67 ?x67 ?x67 ?x58 ?x58 ?x58 ?x63 ?x68 ?x68) (* ?x58 ?x58 ?x63 ?x68 ?x68))))
 (let ((?x78 (* ?x66 (- (+ (- ?x71 (* ?x58 ?x63 ?x68)) ?x74) (* ?x67 ?x63 ?x68)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x78 ?x79)) (not (= ?x93 ?x79)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x416 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x68 (to_real y)))
 (let ((?x220 (+ ?x68 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x582 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x236 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56))))
 (let ((?x516 (+ (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x582 ?x582 ?x582 ?x220 ?x220)) (* (/ 1.0 8.0) (* ?x62 ?x56 ?x56 ?x220 ?x220)) (* (- (/ 1.0 4.0)) (* ?x62 ?x56 ?x220)) ?x236 (* (- (/ 1.0 2.0)) (* ?x62 ?x582 ?x220)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x437 (+ (* (/ 1.0 16.0) (* ?x68 ?x68 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x62 ?x56 ?x56)) (* (- (/ 1.0 4.0)) (* ?x68 ?x62 ?x56)) ?x236 (* (- (/ 1.0 2.0)) (* ?x68 ?x62 ?x67)))))
 (let (($x441 (or (not (= (* ?x186 ?x437) 0.0)) (not (= (* ?x186 ?x516) 0.0)))))
 (let ((?x132 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x226 (= ?x132 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x106 (* b00 y00)))
 (let ((?x107 (* (- 2) ?x106)))
 (let (($x879 (= (+ ?x107 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x529 (and $x879 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x226 $x441)))
 (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x83 (+ ?x68 ?x63)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x74 (* ?x58 ?x58 ?x58)))
 (let ((?x87 (+ (* ?x84 ?x84 ?x84 ?x58 ?x58 ?x58 ?x63 ?x83 ?x83) (* ?x58 ?x58 ?x63 ?x83 ?x83))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x93 (* ?x66 (- (+ (- ?x87 (* ?x58 ?x63 ?x83)) ?x74) (* ?x84 ?x63 ?x83)))))
 (let ((?x71 (+ (* ?x67 ?x67 ?x67 ?x58 ?x58 ?x58 ?x63 ?x68 ?x68) (* ?x58 ?x58 ?x63 ?x68 ?x68))))
 (let ((?x78 (* ?x66 (- (+ (- ?x71 (* ?x58 ?x63 ?x68)) ?x74) (* ?x67 ?x63 ?x68)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x97 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x78 ?x79)) (not (= ?x93 ?x79))))))
 (rewrite (= $x97 $x529))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x223 (mp (mp @x99 (quant-intro (proof-bind ?x416) (= $x98 $x408)) $x408) (rewrite (= $x408 $x408)) $x408)))
 (let ((@x615 (mp (mp @x223 (quant-intro (proof-bind ?x260) (= $x408 $x572)) $x572) (quant-intro (proof-bind ?x411) (= $x572 $x245)) $x245)))
 (let ((@x439 (mp (mp~ @x615 (sk (~ $x245 $x534)) $x534) (rewrite (= $x534 $x792)) $x792)))
 (let ((@x608 (mp (and-elim @x439 $x550) @x275 $x563)))
 (let ((@x334 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x563) $x576)) @x608 $x576)))
 (let ((?x607 (* ?x60 ?x193)))
 (let ((?x148 (+ (* (- 1.0) (to_real ?x463)) ?x607)))
 (let (($x581 (<= ?x148 0.0)))
 (let (($x160 (= ?x148 0.0)))
 (let ((@x613 ((_ th-lemma arith) $x160)))
 (let ((?x602 (* ?x64 ?x199)))
 (let ((?x369 (+ ?x602 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x590 (>= ?x369 0.0)))
 (let (($x326 (= ?x369 0.0)))
 (let ((@x119 (lemma (unit-resolution ((_ th-lemma arith) $x326) (hypothesis (not $x326)) false) $x326)))
 (let ((@x206 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x326) $x590)) @x119 $x590)))
 (let ((@x395 ((_ th-lemma arith) @x206 (hypothesis (not $x737)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x160) $x581)) @x613 $x581) @x334 false)))
 (let ((@x882 (lemma @x395 $x737)))
 (let ((?x585 (+ ?x431 ?x768 ?x233 ?x767 ?x156 ?x375 ?x435 ?x479 ?x484 ?x473 ?x505 ?x525 ?x528 ?x598 ?x630 ?x642 ?x641 ?x640 ?x669 ?x388)))
 (let (($x583 (<= ?x585 0.0)))
 (let (($x254 (not $x583)))
 (let (($x404 (>= ?x585 0.0)))
 (let (($x386 (>= ?x673 0.0)))
 (let (($x759 (<= ?x369 0.0)))
 (let ((@x574 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x326) $x759)) @x119 $x759)))
 (let (($x568 (>= ?x537 0)))
 (let ((@x614 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x563) $x568)) @x608 $x568)))
 (let (($x162 (>= ?x148 0.0)))
 (let ((@x621 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x160) $x162)) @x613 $x162) @x614 (hypothesis (not $x386)) (hypothesis $x759) false)))
 (let ((@x875 (unit-resolution (lemma @x621 (or (not $x759) $x386)) @x574 $x386)))
 (let (($x328 (not $x404)))
 (let ((@x335 (hypothesis $x328)))
 (let (($x578 (>= ?x268 0.0)))
 (let (($x343 (not $x578)))
 (let (($x577 (<= ?x268 0.0)))
 (let (($x419 (not $x577)))
 (let ((@x428 (hypothesis $x419)))
 (let ((@x307 (unit-resolution ((_ th-lemma arith) (or (not $x386) $x583 $x577)) @x428 (hypothesis $x254) @x875 false)))
 (let ((@x708 (unit-resolution ((_ th-lemma arith) (or (not $x737) $x404 $x577)) @x428 @x335 @x882 false)))
 (let (($x436 (= ?x585 0.0)))
 (let (($x366 (not $x436)))
 (let (($x570 (<= ?x367 0.0)))
 (let ((@x333 (unit-resolution ((_ th-lemma arith) (or $x570 (not $x568) (not $x590) (not $x759) (not $x576))) @x334 @x614 (hypothesis (not $x570)) @x574 @x206 false)))
 (let (($x889 (>= ?x367 0.0)))
 (let ((@x793 (unit-resolution ((_ th-lemma arith) (or $x889 (not $x568) (not $x590) (not $x759) (not $x576))) @x334 @x614 (hypothesis (not $x889)) @x574 @x206 false)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x376 (not $x570) (not $x889))) (lemma @x793 $x889) (or $x376 (not $x570)))))
 (let ((@x465 (unit-resolution (and-elim @x439 $x637) (unit-resolution @x448 (lemma @x333 $x570) $x376) $x224)))
 (let ((@x381 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x366 $x633)) @x465 $x366) (symm (hypothesis (= 0.0 ?x585)) $x436) false)))
 (let ((@x228 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x585) $x254 $x328)) (lemma @x381 (not (= 0.0 ?x585))) (or $x254 $x328))))
 (let ((@x409 (unit-resolution @x228 (unit-resolution (lemma @x708 (or $x404 $x577)) @x428 $x404) (unit-resolution (lemma @x307 (or $x583 $x577)) @x428 $x583) false)))
 (let ((@x720 (unit-resolution (unit-resolution ((_ th-lemma arith triangle-eq) (or $x633 $x419 $x343)) @x465 (or $x419 $x343)) (lemma @x409 $x577) $x343)))
 (let ((@x722 (unit-resolution ((_ th-lemma arith) (or (not $x386) $x404 $x578)) @x720 @x335 @x875 false)))
 (unit-resolution ((_ th-lemma arith) (or (not $x737) $x583 $x578)) @x720 (unit-resolution @x228 (lemma @x722 $x404) $x254) @x882 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       34
 :arith-eq-adapter                67
 :arith-bound-propagations-cheap  62
 :arith-bound-propagations-lp     4
 :arith-conflicts                 155
 :arith-diseq                     62
 :arith-gcd-calls                 9
 :arith-grobner-calls             6
 :arith-grobner-conflicts         2
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 6
 :arith-lower                     83
 :arith-make-feasible             75
 :arith-max-columns               81
 :arith-max-rows                  18
 :arith-nla-explanations          69
 :arith-nla-lemmas                151
 :arith-patches                   9
 :arith-patches-success           9
 :arith-propagations              62
 :arith-upper                     110
 :conflicts                       20
 :decisions                       186
 :del-clause                      153
 :final-checks                    45
 :max-memory                      5.00
 :memory                          3.19
 :minimized-lits                  1
 :mk-bool-var                     330
 :mk-clause                       243
 :num-allocs                      16580266
 :num-checks                      1
 :propagations                    211
 :rlimit-count                    8651
 :time                            0.05
 :total-time                      0.06)
