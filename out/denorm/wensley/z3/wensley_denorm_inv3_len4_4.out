unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(proof
(let ((?x1035 (to_real y!0)))
 (let ((?x734 (to_real b!2)))
 (let ((?x732 (to_real a!3)))
 (let ((?x652 (to_real d!1)))
 (let ((?x1116 (* (- (/ 1.0 2.0)) (* ?x652 ?x732 ?x732 ?x732 ?x734 ?x1035 ?x1035 ?x1035))))
 (let ((?x1111 (* (/ 1.0 4.0) (* ?x652 ?x652 ?x732 ?x732 ?x732 ?x732 ?x1035 ?x1035))))
 (let ((?x612 (* (- (/ 1.0 4.0)) (* ?x732 ?x732 ?x734 ?x734 ?x734 ?x1035 ?x1035 ?x1035 ?x1035))))
 (let ((?x1095 (* (/ 1.0 8.0) (* ?x652 ?x652 ?x732 ?x732 ?x732 ?x734 ?x1035))))
 (let ((?x924 (* (- (/ 1.0 8.0)) (* (to_real a00) ?x652 ?x732 ?x732 ?x734 ?x734 ?x1035 ?x1035 ?x1035))))
 (let ((?x742 (* (/ 1.0 32.0) (* ?x652 ?x652 ?x732 ?x732 ?x732 ?x732 ?x734 ?x734 ?x734))))
 (let ((?x625 (* ?x652 ?x732 ?x732 ?x734 ?x734 ?x1035 ?x1035)))
 (let ((?x1098 (* (- (/ 1.0 4.0)) ?x625)))
 (let ((?x1102 (* (/ 1.0 8.0) (* ?x652 ?x732 ?x732 ?x732 ?x734 ?x734 ?x1035 ?x1035 ?x1035))))
 (let ((?x335 (* (- (/ 1.0 32.0)) (* (to_real a00) ?x652 ?x652 ?x732 ?x732 ?x732 ?x734 ?x734 ?x734))))
 (let ((?x333 (* (/ 1.0 16.0) (* (to_real y00) ?x652 ?x732 ?x732 ?x732 ?x734 ?x734 ?x734 ?x734))))
 (let ((?x291 (* (/ 1.0 4.0) (* (to_real y00) ?x732 ?x732 ?x734 ?x734 ?x734 ?x1035 ?x1035 ?x1035))))
 (let ((?x439 (* (- (/ 1.0 16.0)) (* ?x652 ?x732 ?x732 ?x732 ?x734 ?x734 ?x734 ?x734 ?x1035))))
 (let ((?x308 (+ (* (/ 1.0 2.0) (* (to_real y00) ?x652 ?x732 ?x732 ?x732 ?x734 ?x1035 ?x1035)) (* (- (/ 1.0 4.0)) (* (to_real a00) ?x652 ?x652 ?x732 ?x732 ?x732 ?x1035 ?x1035)) ?x439 ?x291 (* (/ 1.0 4.0) (* (to_real y00) ?x652 ?x732 ?x732 ?x734 ?x734 ?x1035)) ?x333 (* (- (/ 1.0 8.0)) (* (to_real a00) ?x652 ?x652 ?x732 ?x732 ?x734 ?x1035)) ?x335 ?x1102 ?x1098 ?x742 ?x924 ?x1095 ?x612 ?x1111 ?x1116)))
 (let (($x225 (>= ?x308 0.0)))
 (let (($x671 (not $x225)))
 (let (($x290 (= ?x308 0.0)))
 (let (($x930 (not $x290)))
 (let ((?x891 (* ?x734 ?x1035)))
 (let ((?x911 (* (- 1.0) ?x891)))
 (let ((?x889 (* ?x652 ?x732)))
 (let ((?x909 (* (/ 1.0 2.0) ?x889)))
 (let ((?x69 (to_real a00)))
 (let ((?x289 (* ?x69 ?x652)))
 (let ((?x407 (* (- (/ 1.0 2.0)) ?x289)))
 (let ((?x66 (to_real y00)))
 (let ((?x200 (* ?x66 ?x734)))
 (let ((?x1024 (* (/ 1.0 32.0) (* ?x652 ?x652 ?x652 ?x734 ?x734 ?x734 ?x734))))
 (let ((?x1181 (* (/ 1.0 16.0) (* ?x652 ?x652 ?x652 ?x732 ?x734 ?x734 ?x734))))
 (let ((?x1169 (* (/ 1.0 32.0) (* ?x652 ?x652 ?x652 ?x732 ?x732 ?x734 ?x734))))
 (let ((?x1092 (* (/ 3.0 8.0) (* ?x652 ?x734 ?x734 ?x734 ?x734 ?x1035 ?x1035))))
 (let ((?x993 (* (/ 3.0 16.0) (* ?x652 ?x652 ?x732 ?x732 ?x734 ?x734 ?x1035))))
 (let ((?x979 (* (/ 1.0 4.0) (* ?x734 ?x734 ?x734 ?x734 ?x1035 ?x1035 ?x1035))))
 (let ((?x976 (* (/ 1.0 2.0) (* ?x732 ?x734 ?x734 ?x734 ?x1035 ?x1035 ?x1035))))
 (let ((?x887 (* (/ 1.0 2.0) (* ?x652 ?x734 ?x734 ?x734 ?x1035 ?x1035))))
 (let ((?x885 (* (/ 3.0 2.0) (* ?x652 ?x732 ?x734 ?x734 ?x1035 ?x1035))))
 (let ((?x131 (* (/ 3.0 2.0) (* ?x652 ?x732 ?x732 ?x734 ?x1035 ?x1035))))
 (let ((?x884 (* (/ 1.0 2.0) (* ?x652 ?x652 ?x734 ?x734 ?x734 ?x1035))))
 (let ((?x1287 (* (/ 3.0 2.0) (* ?x652 ?x652 ?x732 ?x734 ?x734 ?x1035))))
 (let ((?x896 (* (/ 3.0 2.0) (* ?x652 ?x652 ?x732 ?x732 ?x734 ?x1035))))
 (let ((?x764 (* (/ 3.0 16.0) (* ?x652 ?x732 ?x734 ?x734 ?x734 ?x734 ?x734))))
 (let ((?x258 (* (/ 3.0 16.0) (* ?x652 ?x732 ?x732 ?x734 ?x734 ?x734 ?x734))))
 (let ((?x690 (* (/ 3.0 4.0) (* ?x652 ?x732 ?x734 ?x734 ?x734 ?x1035 ?x1035))))
 (let ((?x802 (* (/ 3.0 16.0) (* ?x652 ?x652 ?x734 ?x734 ?x734 ?x734 ?x1035))))
 (let ((?x658 (* (/ 1.0 8.0) (* ?x652 ?x652 ?x732 ?x732 ?x734))))
 (let ((?x969 (* (/ 1.0 4.0) (* ?x652 ?x734 ?x734 ?x734 ?x1035))))
 (let ((?x750 (* (/ 3.0 8.0) ?x625)))
 (let ((?x583 (* (/ 1.0 8.0) (* ?x652 ?x652 ?x734 ?x734 ?x734))))
 (let ((?x587 (* (/ 3.0 8.0) (* ?x652 ?x652 ?x652 ?x732 ?x732 ?x734))))
 (let ((?x534 (* (/ 1.0 2.0) (* ?x652 ?x732 ?x732 ?x732 ?x1035 ?x1035))))
 (let ((?x890 (* (/ 1.0 2.0) (* ?x652 ?x652 ?x732 ?x732 ?x732 ?x1035))))
 (let ((?x526 (* (/ 1.0 4.0) (* ?x732 ?x732 ?x734 ?x734 ?x1035 ?x1035 ?x1035))))
 (let ((?x517 (* (/ 3.0 8.0) (* ?x652 ?x652 ?x652 ?x732 ?x734 ?x734))))
 (let ((?x434 (* (/ 1.0 2.0) (* ?x652 ?x732 ?x734 ?x734 ?x1035))))
 (let ((?x459 (* (/ 1.0 16.0) (* ?x652 ?x732 ?x732 ?x732 ?x734 ?x734 ?x734))))
 (let ((?x681 (* (/ 3.0 8.0) (* ?x652 ?x652 ?x732 ?x734 ?x734 ?x734 ?x1035))))
 (let ((?x172 (* (/ 1.0 4.0) (* ?x652 ?x732 ?x732 ?x734 ?x1035))))
 (let ((?x881 (* (/ 1.0 8.0) (* ?x652 ?x652 ?x652 ?x732 ?x732 ?x732))))
 (let ((?x523 (* (/ 1.0 8.0) (* ?x652 ?x652 ?x652 ?x734 ?x734 ?x734))))
 (let ((?x423 (* (/ 1.0 16.0) (* ?x652 ?x734 ?x734 ?x734 ?x734 ?x734 ?x734))))
 (let ((?x599 (* (/ 1.0 4.0) (* ?x652 ?x652 ?x732 ?x734 ?x734))))
 (let ((?x926 (+ ?x599 ?x423 ?x523 ?x881 ?x172 ?x681 ?x459 ?x434 ?x517 ?x526 ?x890 ?x534 ?x587 ?x583 ?x750 ?x969 ?x658 ?x802 ?x690 ?x258 ?x764 ?x896 ?x1287 ?x884 ?x131 ?x885 ?x887 ?x976 ?x979 ?x993 ?x1092 ?x1169 ?x1181 ?x1024)))
 (let (($x326 (= (* ?x926 (+ ?x200 ?x407 ?x909 ?x911)) 0.0)))
 (let ((?x236 (+ ?x911 ?x200 ?x407 ?x909)))
 (let (($x271 (= ?x236 0.0)))
 (let (($x343 (>= ?x236 0.0)))
 (let ((?x1016 (+ (* (- 1.0) (to_real (* d!1 a!3))) ?x889)))
 (let (($x418 (>= ?x1016 0.0)))
 (let (($x450 (= 0.0 ?x1016)))
 (let ((@x281 (symm (commutativity (= $x450 (= ?x1016 0.0))) (= (= ?x1016 0.0) $x450))))
 (let (($x179 (= ?x1016 0.0)))
 (let ((@x921 ((_ th-lemma arith) $x179)))
 (let ((@x311 ((_ th-lemma arith triangle-eq) (or (not $x450) $x418))))
 (let ((?x426 (+ ?x289 (* (- 1.0) (to_real (* a00 d!1))))))
 (let (($x417 (<= ?x426 0.0)))
 (let ((@x516 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x426 0.0)) $x417)) ((_ th-lemma arith) (= ?x426 0.0)) $x417)))
 (let ((?x315 (* a00 d!1)))
 (let ((?x232 (+ ?x315 (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)) (* (- 1) (* d!1 a!3)))))
 (let (($x226 (<= ?x232 0)))
 (let (($x464 (= 0 ?x232)))
 (let ((@x521 (symm (commutativity (= $x464 (= ?x232 0))) (= (= ?x232 0) $x464))))
 (let (($x925 (= ?x232 0)))
 (let (($x293 (not $x326)))
 (let (($x130 (or $x930 $x293)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x216 (= (+ ?x35 ?x108 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x502 (and $x216 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x925 $x130)))
 (let ((?x908 (+ ?x459 ?x172 ?x526 ?x534 ?x750 ?x258 ?x764 ?x423 ?x658 ?x599 ?x583 ?x434 ?x969 ?x976 ?x979 ?x1169 ?x1181 ?x1024 ?x993 ?x681 ?x802 ?x690 ?x1092 ?x881 ?x587 ?x517 ?x523 ?x890 ?x896 ?x1287 ?x884 ?x131 ?x885 ?x887)))
 (let (($x958 (= (* ?x908 (+ ?x909 ?x911 (* ?x734 ?x66) (* (- (/ 1.0 2.0)) (* ?x652 ?x69)))) 0.0)))
 (let ((?x292 (+ ?x742 ?x439 (* (/ 1.0 16.0) (* ?x652 ?x732 ?x732 ?x732 ?x734 ?x734 ?x734 ?x734 ?x66)) (* (- (/ 1.0 32.0)) (* ?x652 ?x652 ?x732 ?x732 ?x732 ?x734 ?x734 ?x734 ?x69)) ?x1095 ?x1098 (* (/ 1.0 4.0) (* ?x652 ?x732 ?x732 ?x734 ?x734 ?x1035 ?x66)) (* (- (/ 1.0 8.0)) (* ?x652 ?x652 ?x732 ?x732 ?x734 ?x1035 ?x69)) ?x1102 ?x612 (* (/ 1.0 4.0) (* ?x732 ?x732 ?x734 ?x734 ?x734 ?x1035 ?x1035 ?x1035 ?x66)) (* (- (/ 1.0 8.0)) (* ?x652 ?x732 ?x732 ?x734 ?x734 ?x1035 ?x1035 ?x1035 ?x69)) ?x1111 ?x1116 (* (/ 1.0 2.0) (* ?x652 ?x732 ?x732 ?x732 ?x734 ?x1035 ?x1035 ?x66)) (* (- (/ 1.0 4.0)) (* ?x652 ?x652 ?x732 ?x732 ?x732 ?x1035 ?x1035 ?x69)))))
 (let ((?x115 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x539 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x108 (* 2 (* y!0 b00))) 0)))
 (let (($x548 (and $x539 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x115 0) (or (not (= ?x292 0.0)) (not $x958)))))
 (let (($x605 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x168 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x252 (+ ?x168 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1125 (* (/ 1.0 2.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x63))))
 (let ((?x1306 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a)))))
 (let ((?x1001 (* (/ 3.0 16.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x992 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61))))
 (let ((?x550 (* (/ 3.0 16.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x61))))
 (let ((?x59 (to_real a)))
 (let ((?x367 (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)))
 (let ((?x1320 (+ (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (/ 3.0 8.0) ?x367) ?x550 (* (/ 3.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 2.0) (* ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x992 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) ?x1001 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 4.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1306 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) ?x1125 (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 2.0) (* ?x56 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 3.0 2.0) (* ?x56 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x425 (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real a00)))))
 (let ((?x415 (* (/ 1.0 4.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x348 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 (to_real a00)))))
 (let ((?x337 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 (to_real y00)))))
 (let ((?x467 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x337 ?x348 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (- (/ 1.0 4.0)) ?x367) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 (to_real y00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 (to_real a00))) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x415 ?x425 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 (to_real a00))))))
 (let (($x154 (not (= ?x467 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x175 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x180 (= ?x175 0)))
 (let (($x105 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (and $x140 $x105 $x180 (or $x154 (not (= (* ?x1320 ?x252) 0.0))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x1108 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x396 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x220 (* ?x66 ?x61)))
 (let ((?x929 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x220 ?x396)))
 (let ((?x63 (to_real y)))
 (let ((?x639 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x372 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1088 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x372 ?x372 ?x372)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x372 ?x372 ?x639)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x372 ?x372 ?x639 ?x639 ?x639)) (* (/ 1.0 2.0) (* ?x56 ?x372 ?x372 ?x372 ?x639 ?x639)))))
 (let ((?x1032 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 2.0) (* ?x63 ?x63 ?x56 ?x59 ?x59 ?x59)))))
 (let ((?x1023 (* ?x1032 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x220 ?x396))))
 (let (($x1057 (or (not (= ?x1023 0.0)) (not (= (* ?x1088 ?x929) 0.0)))))
 (let ((?x615 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x622 (= ?x615 0)))
 (let ((?x328 (* d00 a)))
 (let ((?x936 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x328)))
 (and (= ?x936 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x622 $x1057))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1064 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x168 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x252 (+ ?x168 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1125 (* (/ 1.0 2.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x63))))
 (let ((?x1306 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a)))))
 (let ((?x1001 (* (/ 3.0 16.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x992 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61))))
 (let ((?x550 (* (/ 3.0 16.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x61 ?x61))))
 (let ((?x59 (to_real a)))
 (let ((?x367 (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)))
 (let ((?x1320 (+ (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (/ 3.0 8.0) ?x367) ?x550 (* (/ 3.0 16.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 2.0) (* ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x992 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) ?x1001 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 4.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1306 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) ?x1125 (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 2.0) (* ?x56 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 3.0 2.0) (* ?x56 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x425 (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real a00)))))
 (let ((?x415 (* (/ 1.0 4.0) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real y00)))))
 (let ((?x348 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 (to_real a00)))))
 (let ((?x337 (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 (to_real y00)))))
 (let ((?x467 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x337 ?x348 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (- (/ 1.0 4.0)) ?x367) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 (to_real y00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 (to_real a00))) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) ?x415 ?x425 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 (to_real y00))) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 (to_real a00))))))
 (let (($x154 (not (= ?x467 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x175 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x180 (= ?x175 0)))
 (let (($x105 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (let (($x484 (and $x140 $x105 $x180 (or $x154 (not (= (* ?x1320 ?x252) 0.0))))))
 (let ((?x396 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x220 (* ?x66 ?x61)))
 (let ((?x929 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x59 ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x220 ?x396)))
 (let ((?x639 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x372 (+ ?x59 ?x61)))
 (let ((?x1088 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x372 ?x372 ?x372)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x372 ?x372 ?x639)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x372 ?x372 ?x639 ?x639 ?x639)) (* (/ 1.0 2.0) (* ?x56 ?x372 ?x372 ?x372 ?x639 ?x639)))))
 (let ((?x1032 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 2.0) (* ?x63 ?x63 ?x56 ?x59 ?x59 ?x59)))))
 (let (($x589 (not (= (* ?x1032 (+ ?x168 (* (- 1.0) (* ?x63 ?x61)) ?x220 ?x396)) 0.0))))
 (let (($x1057 (or $x589 (not (= (* ?x1088 ?x929) 0.0)))))
 (let ((?x615 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x622 (= ?x615 0)))
 (let ((?x328 (* d00 a)))
 (let (($x397 (= (+ (* 2 ?x107) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x328) 0)))
 (let (($x1099 (and $x397 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x622 $x1057)))
 (rewrite (= $x1099 $x484))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1063 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x396 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x220 (* ?x66 ?x61)))
 (let ((?x929 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x220 ?x396)))
 (let ((?x63 (to_real y)))
 (let ((?x639 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x372 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1088 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x372 ?x372 ?x372)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x372 ?x372 ?x639)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x372 ?x372 ?x639 ?x639 ?x639)) (* (/ 1.0 2.0) (* ?x56 ?x372 ?x372 ?x372 ?x639 ?x639)))))
 (let ((?x1032 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 2.0) (* ?x63 ?x63 ?x56 ?x59 ?x59 ?x59)))))
 (let ((?x1023 (* ?x1032 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x220 ?x396))))
 (let (($x1057 (or (not (= ?x1023 0.0)) (not (= (* ?x1088 ?x929) 0.0)))))
 (let ((?x615 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x622 (= ?x615 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x572 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x572 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x622 $x1057))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1119 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x396 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x220 (* ?x66 ?x61)))
 (let ((?x929 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x220 ?x396)))
 (let ((?x63 (to_real y)))
 (let ((?x639 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x372 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1088 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x372 ?x372 ?x372)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x372 ?x372 ?x639)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x372 ?x372 ?x639 ?x639 ?x639)) (* (/ 1.0 2.0) (* ?x56 ?x372 ?x372 ?x372 ?x639 ?x639)))))
 (let ((?x1032 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 2.0) (* ?x63 ?x63 ?x56 ?x59 ?x59 ?x59)))))
 (let ((?x1023 (* ?x1032 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x220 ?x396))))
 (let (($x1057 (or (not (= ?x1023 0.0)) (not (= (* ?x1088 ?x929) 0.0)))))
 (let ((?x615 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x622 (= ?x615 0)))
 (let ((?x328 (* d00 a)))
 (let ((?x936 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x328)))
 (let (($x1099 (and (= ?x936 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x622 $x1057)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x606 (and (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) ?x328)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x622 $x1057)))
 (rewrite (= $x606 $x1099))))))))))))))))))))))))))
 ))
 (let (($x99 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x78 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x84 (+ ?x63 ?x58)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x93 (+ (* ?x82 ?x82 ?x82 ?x62 ?x62 ?x62 ?x58) (* ?x82 ?x82 ?x62 ?x58 ?x84) (* ?x82 ?x82 ?x62 ?x62 ?x84 ?x84 ?x84) (* ?x82 ?x82 ?x82 ?x58 ?x84 ?x84))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x95 (= (* (- (+ (- (* ?x82 ?x58) (* ?x57 ?x62 ?x84)) ?x67) ?x70) ?x93) ?x78)))
 (let ((?x76 (+ (* (to_real a) (to_real a) (to_real a) ?x62 ?x62 ?x62 ?x58) (* (to_real a) (to_real a) ?x62 ?x58 ?x63) (* (to_real a) (to_real a) ?x62 ?x62 ?x63 ?x63 ?x63) (* (to_real a) (to_real a) (to_real a) ?x58 ?x63 ?x63))))
 (let ((?x77 (* (- (+ (- (* (to_real a) ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x76)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x77 ?x78)) (not $x95)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x629 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x396 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x220 (* ?x66 ?x61)))
 (let ((?x929 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x220 ?x396)))
 (let ((?x63 (to_real y)))
 (let ((?x639 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x372 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1088 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x372 ?x372 ?x372)) (* (/ 1.0 4.0) (* ?x56 ?x61 ?x372 ?x372 ?x639)) (* (/ 1.0 4.0) (* ?x61 ?x61 ?x372 ?x372 ?x639 ?x639 ?x639)) (* (/ 1.0 2.0) (* ?x56 ?x372 ?x372 ?x372 ?x639 ?x639)))))
 (let ((?x1032 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x56 ?x61 ?x59 ?x59)) (* (/ 1.0 4.0) (* ?x63 ?x63 ?x63 ?x61 ?x61 ?x59 ?x59)) (* (/ 1.0 2.0) (* ?x63 ?x63 ?x56 ?x59 ?x59 ?x59)))))
 (let ((?x1023 (* ?x1032 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x220 ?x396))))
 (let (($x1057 (or (not (= ?x1023 0.0)) (not (= (* ?x1088 ?x929) 0.0)))))
 (let ((?x615 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x622 (= ?x615 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x572 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x606 (and $x572 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x622 $x1057)))
 (let ((?x78 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (+ ?x63 ?x58)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x93 (+ (* ?x82 ?x82 ?x82 (/ ?x61 ?x57) (/ ?x61 ?x57) (/ ?x61 ?x57) ?x58) (* ?x82 ?x82 (/ ?x61 ?x57) ?x58 ?x84) (* ?x82 ?x82 (/ ?x61 ?x57) (/ ?x61 ?x57) ?x84 ?x84 ?x84) (* ?x82 ?x82 ?x82 ?x58 ?x84 ?x84))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x95 (= (* (- (+ (- (* ?x82 ?x58) (* ?x57 ?x62 ?x84)) ?x67) ?x70) ?x93) ?x78)))
 (let ((?x76 (+ (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x58) (* ?x59 ?x59 ?x62 ?x58 ?x63) (* ?x59 ?x59 ?x62 ?x62 ?x63 ?x63 ?x63) (* ?x59 ?x59 ?x59 ?x58 ?x63 ?x63))))
 (let (($x79 (= (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x76) ?x78)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x98 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x79) (not $x95)))))
 (rewrite (= $x98 $x606))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x617 (mp (mp @x100 (quant-intro (proof-bind ?x629) (= $x99 $x1063)) $x1063) (rewrite (= $x1063 $x1063)) $x1063)))
 (let ((@x1079 (mp (mp @x617 (quant-intro (proof-bind ?x1119) (= $x1063 $x1108)) $x1108) (quant-intro (proof-bind ?x1064) (= $x1108 $x605)) $x605)))
 (let ((@x429 (mp (mp~ @x1079 (sk (~ $x605 $x548)) $x548) (rewrite (= $x548 $x502)) $x502)))
 (let ((@x955 (mp (and-elim @x429 $x925) @x521 $x464)))
 (let ((@x527 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x464) $x226)) @x955 $x226)))
 (let ((?x501 (+ ?x200 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x428 (>= ?x501 0.0)))
 (let (($x922 (= 0.0 ?x501)))
 (let ((@x536 (symm (commutativity (= $x922 (= ?x501 0.0))) (= (= ?x501 0.0) $x922))))
 (let ((@x544 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x922) $x428)) (mp ((_ th-lemma arith) (= ?x501 0.0)) @x536 $x922) $x428)))
 (let ((?x416 (+ ?x891 (* (- 1.0) (to_real (* b!2 y!0))))))
 (let (($x305 (<= ?x416 0.0)))
 (let ((@x556 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x416 0.0)) $x305)) ((_ th-lemma arith) (= ?x416 0.0)) $x305)))
 (let ((@x559 ((_ th-lemma arith) @x556 @x544 @x527 @x516 (hypothesis (not $x343)) (unit-resolution @x311 (mp @x921 @x281 $x450) $x418) false)))
 (let (($x358 (<= ?x236 0.0)))
 (let ((@x959 (unit-resolution (hypothesis (not $x450)) (symm (hypothesis $x179) $x450) false)))
 (let ((@x298 (unit-resolution (lemma @x959 (or (not $x179) $x450)) (lemma (unit-resolution @x921 (hypothesis (not $x179)) false) $x179) $x450)))
 (let (($x364 (<= ?x1016 0.0)))
 (let ((@x468 (hypothesis $x450)))
 (let (($x229 (>= ?x232 0)))
 (let ((@x385 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x464) $x229)) @x955 $x229)))
 (let ((@x174 (unit-resolution ((_ th-lemma arith) (or (not $x226) (not $x229) $x358 (not $x418) (not $x364))) @x527 @x385 (hypothesis (not $x358)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x450) $x364)) @x468 $x364) (unit-resolution @x311 @x468 $x418) false)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x271 (not $x358) (not $x343))) (unit-resolution (lemma @x174 (or (not $x450) $x358)) @x298 $x358) (lemma @x559 $x343) $x271)))
 (let (($x250 (or (not $x271) $x326)))
 (let ((@x963 (unit-resolution ((_ th-lemma arith) $x250) (hypothesis $x293) (hypothesis $x271) false)))
 (let ((@x603 (unit-resolution (and-elim @x429 $x130) (unit-resolution (lemma @x963 $x250) @x371 $x326) $x930)))
 (let (($x224 (<= ?x308 0.0)))
 (let ((@x195 (unit-resolution ((_ th-lemma arith) (or $x224 (not $x229) (not $x226))) @x527 @x385 (hypothesis (not $x224)) false)))
 (let ((@x171 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x290 (not $x224) $x671)) (lemma @x195 $x224) @x603 $x671)))
 (unit-resolution ((_ th-lemma arith) (or $x225 (not $x229) (not $x226))) @x527 @x385 @x171 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       42
 :arith-eq-adapter                39
 :arith-bound-propagations-cheap  28
 :arith-bound-propagations-lp     2
 :arith-conflicts                 51
 :arith-diseq                     39
 :arith-gcd-calls                 4
 :arith-grobner-calls             5
 :arith-grobner-conflicts         3
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 13
 :arith-lower                     54
 :arith-make-feasible             44
 :arith-max-columns               107
 :arith-max-rows                  21
 :arith-nla-explanations          99
 :arith-nla-lemmas                50
 :arith-patches                   4
 :arith-patches-success           4
 :arith-propagations              28
 :arith-upper                     38
 :conflicts                       10
 :decisions                       41
 :del-clause                      124
 :final-checks                    35
 :max-memory                      6.70
 :memory                          3.18
 :mk-bool-var                     165
 :mk-clause                       162
 :num-allocs                      18398995
 :num-checks                      1
 :propagations                    81
 :rlimit-count                    7995
 :time                            0.07
 :total-time                      0.09)
