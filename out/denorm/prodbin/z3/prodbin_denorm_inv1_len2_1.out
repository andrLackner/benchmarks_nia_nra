unsat
((set-logic NIA)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x372 (to_real y!1)))
 (let ((?x326 (to_real x!2)))
 (let ((?x91 (* ?x326 ?x372)))
 (let ((?x325 (to_real z!0)))
 (let ((?x406 (+ ?x325 ?x91 ?x114 ?x194)))
 (let (($x320 (>= ?x406 0.0)))
 (let ((?x360 (* x!2 y!1)))
 (let ((?x89 (to_real ?x360)))
 (let ((?x169 (+ ?x89 (* (- 1.0) ?x91))))
 (let (($x116 (<= ?x169 0.0)))
 (let ((@x240 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x169 0.0)) $x116)) ((_ th-lemma arith) (= ?x169 0.0)) $x116)))
 (let ((?x319 (+ (* (- 1.0) (to_real (* x00 y00))) ?x108)))
 (let (($x317 (<= ?x319 0.0)))
 (let (($x332 (= 0.0 ?x319)))
 (let ((@x290 (symm (commutativity (= $x332 (= ?x319 0.0))) (= (= ?x319 0.0) $x332))))
 (let ((@x311 (mp ((_ th-lemma arith) (= ?x319 0.0)) @x290 $x332)))
 (let ((?x81 (* x00 y00)))
 (let ((?x87 (+ z00 ?x81 (* (- 1) z!0) (* (- 1) ?x360))))
 (let (($x182 (<= ?x87 0)))
 (let (($x181 (= 0 ?x87)))
 (let ((@x216 (symm (commutativity (= $x181 (= ?x87 0))) (= (= ?x87 0) $x181))))
 (let (($x88 (= ?x87 0)))
 (let ((?x191 (* (- (/ 1.0 2.0)) (* ?x325 ?x372))))
 (let ((?x151 (* (/ 1.0 2.0) ?x326)))
 (let ((?x154 (* (/ 1.0 2.0) ?x325)))
 (let ((?x323 (* (- 1.0) (* ?x326 ?x326 ?x326))))
 (let ((?x99 (* ?x326 ?x326 ?x326 ?x372)))
 (let ((?x79 (* (- (/ 1.0 2.0)) ?x91)))
 (let ((?x249 (+ ?x79 ?x99 ?x323 (* (- 2.0) (* ?x325 ?x326 ?x326)) ?x154 ?x151 ?x191 (* ?x325 ?x325 ?x326 ?x372) (* (- 1.0) (* ?x325 ?x325 ?x326)) (* 2.0 (* ?x325 ?x326 ?x326 ?x372)))))
 (let (($x142 (= (* ?x249 (+ ?x194 ?x91 ?x114 ?x325)) 0.0)))
 (let (($x143 (not $x142)))
 (let ((?x318 (+ (* (/ 1.0 2.0) (* ?x325 ?x325 ?x372)) (* ?x48 ?x325 ?x325 ?x326 ?x372) (* (- (/ 1.0 2.0)) (* ?x103 ?x107 ?x325 ?x372)) (* (/ 1.0 2.0) (* ?x325 ?x326 ?x372 ?x372)) (* (- (/ 1.0 2.0)) (* ?x48 ?x325 ?x372)) (* (- 1.0) (* ?x325 ?x325 ?x326 ?x326 ?x372 ?x372)) (* (- 1.0) (* ?x325 ?x325 ?x325 ?x326 ?x372)) (* ?x103 ?x107 ?x325 ?x325 ?x326 ?x372))))
 (let (($x208 (= ?x318 0.0)))
 (let (($x312 (not $x208)))
 (let (($x380 (or $x312 $x143)))
 (let (($x351 (and $x88 $x380)))
 (let ((?x274 (+ ?x151 ?x154 ?x79 (* (- 1.0) (* ?x326 ?x325 ?x325)) (* (- 2.0) (* ?x326 ?x326 ?x325)) (* 2.0 (* ?x326 ?x326 ?x325 ?x372)) ?x99 ?x323 (* ?x326 ?x325 ?x325 ?x372) ?x191)))
 (let ((?x121 (+ (* ?x326 ?x325 ?x325 ?x325 ?x372) (* (- 1.0) (* ?x326 ?x325 ?x325 ?x48 ?x372)) (* (- 1.0) (* ?x326 ?x325 ?x325 ?x372 ?x103 ?x107)) (* ?x326 ?x326 ?x325 ?x325 ?x372 ?x372) (* (- (/ 1.0 2.0)) (* ?x325 ?x325 ?x372)) (* (/ 1.0 2.0) (* ?x325 ?x48 ?x372)) (* (/ 1.0 2.0) (* ?x325 ?x372 ?x103 ?x107)) (* (- (/ 1.0 2.0)) (* ?x326 ?x325 ?x372 ?x372)))))
 (let (($x235 (or (not (= ?x121 0.0)) (not (= (* ?x274 (+ ?x325 ?x194 ?x114 ?x91)) 0.0)))))
 (let (($x282 (and (= (+ z!0 ?x360 (* (- 1) z00) (* (- 1) ?x81)) 0) $x235)))
 (let (($x205 (exists ((x Int) (y Int) (z Int) )(! (let ((?x60 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x123 (* ?x43 ?x60)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x234 (* (- (/ 1.0 2.0)) (* ?x46 ?x60))))
 (let ((?x239 (* (/ 1.0 2.0) ?x46)))
 (let ((?x236 (* (/ 1.0 2.0) ?x43)))
 (let ((?x314 (+ ?x236 ?x239 (* (- (/ 1.0 2.0)) ?x123) (* (- 1.0) (* ?x43 ?x46 ?x46)) (* (- 2.0) (* ?x43 ?x43 ?x46)) (* 2.0 (* ?x43 ?x43 ?x46 ?x60)) (* ?x43 ?x43 ?x43 ?x60) (* (- 1.0) (* ?x43 ?x43 ?x43)) (* ?x43 ?x46 ?x46 ?x60) ?x234)))
 (let ((?x381 (+ (* ?x43 ?x46 ?x46 ?x46 ?x60) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x48 ?x60)) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x60 ?x103 ?x107)) (* ?x43 ?x43 ?x46 ?x46 ?x60 ?x60) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x60)) (* (/ 1.0 2.0) (* ?x46 ?x48 ?x60)) (* (/ 1.0 2.0) (* ?x46 ?x60 ?x103 ?x107)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x60 ?x60)))))
 (let (($x272 (not (= ?x381 0.0))))
 (let (($x109 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x109 (or $x272 (not (= (* ?x314 (+ ?x46 ?x194 ?x114 ?x123)) 0.0))))))))))))))))))))) :qid k!28))
 ))
 (let (($x241 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x234 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x106 (* (+ ?x234 (* ?x46 ?x46 (to_real y) (to_real x))) (+ ?x114 (* (to_real y) (to_real x)) ?x46 ?x194))))
 (let ((?x43 (to_real x)))
 (let ((?x127 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x195 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x136 (+ ?x46 ?x43)))
 (let ((?x168 (* (+ (* (- 1.0) (* ?x136 ?x195)) (* 2.0 (* ?x43 ?x136 ?x136 ?x195))) ?x127)))
 (let (($x322 (or (not (= ?x168 0.0)) (not (= ?x106 0.0)))))
 (let (($x132 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x132 $x322))))))))))))))))))) :qid k!28))
 ))
 (let ((?x294 (lambda ((x Int) (y Int) (z Int) )(let ((?x60 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x123 (* ?x43 ?x60)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x234 (* (- (/ 1.0 2.0)) (* ?x46 ?x60))))
 (let ((?x239 (* (/ 1.0 2.0) ?x46)))
 (let ((?x236 (* (/ 1.0 2.0) ?x43)))
 (let ((?x314 (+ ?x236 ?x239 (* (- (/ 1.0 2.0)) ?x123) (* (- 1.0) (* ?x43 ?x46 ?x46)) (* (- 2.0) (* ?x43 ?x43 ?x46)) (* 2.0 (* ?x43 ?x43 ?x46 ?x60)) (* ?x43 ?x43 ?x43 ?x60) (* (- 1.0) (* ?x43 ?x43 ?x43)) (* ?x43 ?x46 ?x46 ?x60) ?x234)))
 (let ((?x381 (+ (* ?x43 ?x46 ?x46 ?x46 ?x60) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x48 ?x60)) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x60 ?x103 ?x107)) (* ?x43 ?x43 ?x46 ?x46 ?x60 ?x60) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x60)) (* (/ 1.0 2.0) (* ?x46 ?x48 ?x60)) (* (/ 1.0 2.0) (* ?x46 ?x60 ?x103 ?x107)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x60 ?x60)))))
 (let (($x272 (not (= ?x381 0.0))))
 (let (($x109 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x339 (and $x109 (or $x272 (not (= (* ?x314 (+ ?x46 ?x194 ?x114 ?x123)) 0.0))))))
 (let ((?x106 (* (+ ?x234 (* ?x46 ?x46 ?x60 ?x43)) (+ ?x114 (* ?x60 ?x43) ?x46 ?x194))))
 (let ((?x127 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60)))) ?x46 ?x43 ?x194)))
 (let ((?x157 (* 2.0 (* ?x43 (+ ?x46 ?x43) (+ ?x46 ?x43) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60))))))
 (let ((?x168 (* (+ (* (- 1.0) (* (+ ?x46 ?x43) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60)))) ?x157) ?x127)))
 (let (($x322 (or (not (= ?x168 0.0)) (not (= ?x106 0.0)))))
 (let (($x132 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x221 (and $x132 $x322)))
 (rewrite (= $x221 $x339))))))))))))))))))))))))))))
 ))
 (let (($x126 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x234 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x106 (* (+ ?x234 (* ?x46 ?x46 (to_real y) (to_real x))) (+ ?x114 (* (to_real y) (to_real x)) ?x46 ?x194))))
 (let ((?x43 (to_real x)))
 (let ((?x127 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x195 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x136 (+ ?x46 ?x43)))
 (let ((?x168 (* (+ (* (- 1.0) (* ?x136 ?x195)) (* 2.0 (* ?x43 ?x136 ?x136 ?x195))) ?x127)))
 (let (($x322 (or (not (= ?x168 0.0)) (not (= ?x106 0.0)))))
 (let (($x77 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x77 $x322))))))))))))))))))) :qid k!28))
 ))
 (let ((?x207 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x234 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x106 (* (+ ?x234 (* ?x46 ?x46 (to_real y) (to_real x))) (+ ?x114 (* (to_real y) (to_real x)) ?x46 ?x194))))
 (let ((?x43 (to_real x)))
 (let ((?x127 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x195 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x136 (+ ?x46 ?x43)))
 (let ((?x168 (* (+ (* (- 1.0) (* ?x136 ?x195)) (* 2.0 (* ?x43 ?x136 ?x136 ?x195))) ?x127)))
 (let (($x322 (or (not (= ?x168 0.0)) (not (= ?x106 0.0)))))
 (let (($x132 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x221 (and $x132 $x322)))
 (let (($x77 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x155 (and $x77 $x322)))
 (rewrite (= $x155 $x221))))))))))))))))))))))))
 ))
 (let (($x73 (exists ((x Int) (y Int) (z Int) )(! (let ((?x57 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x60 (to_real y)))
 (let ((?x61 (/ ?x60 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x48 (to_real z00)))
 (let ((?x64 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x61) ?x46) ?x48)))
 (let ((?x68 (* ?x64 (+ (* (to_real (- 1)) ?x61 ?x46) (* ?x41 ?x43 ?x61 ?x46 ?x46)))))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x56 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (+ (* (to_real ?x28) ?x42 ?x52) (* ?x41 ?x43 ?x42 ?x52 ?x52)))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x56 ?x57)) (not (= ?x68 ?x57))))))))))))))))))) :qid k!28))
 ))
 (let ((?x353 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x234 (* (- (/ 1.0 2.0)) (* ?x46 (to_real y)))))
 (let ((?x106 (* (+ ?x234 (* ?x46 ?x46 (to_real y) (to_real x))) (+ ?x114 (* (to_real y) (to_real x)) ?x46 ?x194))))
 (let ((?x43 (to_real x)))
 (let ((?x127 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x195 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x136 (+ ?x46 ?x43)))
 (let ((?x168 (* (+ (* (- 1.0) (* ?x136 ?x195)) (* 2.0 (* ?x43 ?x136 ?x136 ?x195))) ?x127)))
 (let (($x322 (or (not (= ?x168 0.0)) (not (= ?x106 0.0)))))
 (let (($x77 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x155 (and $x77 $x322)))
 (let ((?x57 (to_real 0)))
 (let ((?x67 (+ (* (to_real (- 1)) (/ ?x60 (to_real 2)) ?x46) (* (to_real 2) ?x43 (/ ?x60 (to_real 2)) ?x46 ?x46))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x64 (- (+ ?x45 (* (to_real 2) ?x43 (/ ?x60 (to_real 2))) ?x46) ?x48)))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x56 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (+ (* (to_real ?x28) ?x42 ?x52) (* ?x41 ?x43 ?x42 ?x52 ?x52)))))
 (let (($x72 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x56 ?x57)) (not (= (* ?x64 ?x67) ?x57))))))
 (rewrite (= $x72 $x155)))))))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x203 (mp (mp @x74 (quant-intro (proof-bind ?x353) (= $x73 $x126)) $x126) (rewrite (= $x126 $x126)) $x126)))
 (let ((@x227 (mp (mp @x203 (quant-intro (proof-bind ?x207) (= $x126 $x241)) $x241) (quant-intro (proof-bind ?x294) (= $x241 $x205)) $x205)))
 (let ((@x358 (mp (mp~ @x227 (sk (~ $x205 $x282)) $x282) (rewrite (= $x282 $x351)) $x351)))
 (let ((@x217 (mp (and-elim @x358 $x88) @x216 $x181)))
 (let ((@x214 ((_ th-lemma arith) (hypothesis (not $x320)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x181) $x182)) @x217 $x182) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x317)) @x311 $x317) @x240 false)))
 (let ((@x386 (lemma @x214 $x320)))
 (let (($x347 (<= ?x406 0.0)))
 (let ((?x129 (+ (* (- 1.0) ?x89) ?x91)))
 (let (($x411 (<= ?x129 0.0)))
 (let ((@x417 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x129 0.0)) $x411)) ((_ th-lemma arith) (= ?x129 0.0)) $x411)))
 (let (($x102 (>= ?x319 0.0)))
 (let (($x183 (>= ?x87 0)))
 (let ((@x166 ((_ th-lemma arith) (hypothesis (not $x347)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x181) $x183)) @x217 $x183) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x102)) @x311 $x102) @x417 false)))
 (let ((@x167 (lemma @x166 $x347)))
 (let (($x187 (<= ?x318 0.0)))
 (let (($x423 (not $x187)))
 (let (($x185 (= 0.0 ?x318)))
 (let (($x436 (not $x185)))
 (let ((@x438 (monotonicity (symm (commutativity (= $x185 $x208)) (= $x208 $x185)) (= $x312 $x436))))
 (let (($x330 (= 0.0 ?x406)))
 (let ((@x370 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x330 (not $x347) (not $x320))) @x167 @x386 $x330)))
 (let (($x298 (= ?x406 0.0)))
 (let (($x389 (not $x298)))
 (let ((@x218 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x389 $x142)) (hypothesis $x143) $x389) (symm (hypothesis $x330) $x298) false)))
 (let ((@x431 (unit-resolution (and-elim @x358 $x380) (unit-resolution (lemma @x218 (or (not $x330) $x142)) @x370 $x142) $x312)))
 (let (($x197 (>= ?x318 0.0)))
 (let ((@x458 (unit-resolution ((_ th-lemma arith) (or $x197 (not $x320) (not $x347))) (hypothesis (not $x197)) @x167 @x386 false)))
 (let ((@x440 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x185 $x423 (not $x197))) (lemma @x458 $x197) (mp @x431 @x438 $x436) $x423)))
 (unit-resolution ((_ th-lemma arith) (or $x187 (not $x320) (not $x347))) @x440 @x167 @x386 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      29
 :arith-eq-adapter               27
 :arith-bound-propagations-cheap 18
 :arith-bound-propagations-lp    9
 :arith-conflicts                46
 :arith-diseq                    22
 :arith-gcd-calls                6
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    43
 :arith-make-feasible            37
 :arith-max-columns              54
 :arith-max-rows                 16
 :arith-nla-explanations         68
 :arith-nla-lemmas               44
 :arith-patches                  6
 :arith-patches-success          6
 :arith-propagations             18
 :arith-upper                    36
 :conflicts                      7
 :decisions                      45
 :del-clause                     95
 :final-checks                   28
 :max-memory                     3.97
 :memory                         3.07
 :mk-bool-var                    141
 :mk-clause                      127
 :num-allocs                     1564245
 :num-checks                     1
 :propagations                   55
 :rlimit-count                   3842
 :time                           0.04
 :total-time                     0.02)
