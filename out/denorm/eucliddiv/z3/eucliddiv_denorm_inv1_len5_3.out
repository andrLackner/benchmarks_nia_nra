unsat
((set-logic NIA)
(proof
(let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x51 (* ?x44 y00 y00)))
 (let ((?x48 (* ?x44 ?x44 ?x44 y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x47 (* 2 ?x43 ?x43 ?x43 ?x44 ?x44 y00)))
 (let ((?x45 (* ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x49 (- ?x45 ?x47)))
 (let ((?x50 (- ?x49 ?x48)))
 (let ((?x52 (+ ?x50 ?x51)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x53 (* ?x42 ?x52)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x56)))))))))))))))))) :qid k!29))
 ))
 (let (($x722 (= $x58 false)))
 (let (($x715 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x721 (elim-unused (= $x715 false))))
 (let (($x718 (= $x58 $x715)))
 (let ((?x813 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x51 (* ?x44 y00 y00)))
 (let ((?x48 (* ?x44 ?x44 ?x44 y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x47 (* 2 ?x43 ?x43 ?x43 ?x44 ?x44 y00)))
 (let ((?x45 (* ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x49 (- ?x45 ?x47)))
 (let ((?x50 (- ?x49 ?x48)))
 (let ((?x52 (+ ?x50 ?x51)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x53 (* ?x42 ?x52)))
 (let (($x54 (= ?x53 0)))
 (let (($x55 (not $x54)))
 (let (($x56 (or $x55)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x57 (and $x33 $x41 $x56)))
 (let (($x713 (= $x57 false)))
 (let (($x752 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x85 (= (+ (* (- 1) y00) y) 0)))
 (let (($x807 (and $x85 $x752 false)))
 (let (($x706 (= $x56 false)))
 (let ((@x705 (rewrite (= (or false) false))))
 (let (($x701 (or false)))
 (let (($x702 (= $x56 $x701)))
 (let (($x699 (= $x55 false)))
 (let ((@x698 (rewrite (= (not true) false))))
 (let (($x694 (not true)))
 (let (($x695 (= $x55 $x694)))
 (let (($x692 (= $x54 true)))
 (let ((@x691 (rewrite (= (= 0 0) true))))
 (let (($x687 (= 0 0)))
 (let (($x688 (= $x54 $x687)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x83 (+ r ?x63)))
 (let ((?x782 (* y00 y00 ?x83)))
 (let ((?x762 (* y00 ?x83 ?x83 ?x83)))
 (let ((?x771 (* (- 1) ?x762)))
 (let ((?x80 (+ 1 q)))
 (let ((?x732 (* y00 ?x80 ?x80 ?x80 ?x83 ?x83)))
 (let ((?x757 (* (- 2) ?x732)))
 (let ((?x86 (* y00 y00 ?x80 ?x80 ?x83 ?x83 ?x83)))
 (let ((?x790 (+ ?x86 ?x757 ?x771 ?x782)))
 (let ((?x795 (* 0 ?x790)))
 (let ((@x88 (rewrite (= ?x44 ?x83))))
 (let ((@x657 (monotonicity @x88 (= ?x51 (* ?x83 y00 y00)))))
 (let ((@x561 (monotonicity @x88 @x88 @x88 (= ?x48 (* ?x83 ?x83 ?x83 y00)))))
 (let ((@x767 (trans @x561 (rewrite (= (* ?x83 ?x83 ?x83 y00) ?x762)) (= ?x48 ?x762))))
 (let ((@x751 (rewrite (= (- ?x86 (* 2 ?x732)) (+ ?x86 (* (- 1) (* 2 ?x732)))))))
 (let ((@x735 (rewrite (= (* 2 ?x80 ?x80 ?x80 ?x83 ?x83 y00) (* 2 ?x732)))))
 (let ((@x82 (rewrite (= ?x43 ?x80))))
 (let ((@x299 (monotonicity @x82 @x82 @x82 @x88 @x88 (= ?x47 (* 2 ?x80 ?x80 ?x80 ?x83 ?x83 y00)))))
 (let ((@x91 (monotonicity @x82 @x82 @x88 @x88 @x88 (= ?x45 (* ?x80 ?x80 ?x83 ?x83 ?x83 y00 y00)))))
 (let ((@x729 (trans @x91 (rewrite (= (* ?x80 ?x80 ?x83 ?x83 ?x83 y00 y00) ?x86)) (= ?x45 ?x86))))
 (let ((@x746 (monotonicity @x729 (trans @x299 @x735 (= ?x47 (* 2 ?x732))) (= ?x49 (- ?x86 (* 2 ?x732))))))
 (let ((@x759 (trans (trans @x746 @x751 (= ?x49 (+ ?x86 (* (- 1) (* 2 ?x732))))) (rewrite (= (+ ?x86 (* (- 1) (* 2 ?x732))) (+ ?x86 ?x757))) (= ?x49 (+ ?x86 ?x757)))))
 (let ((@x776 (trans (monotonicity @x759 @x767 (= ?x50 (- (+ ?x86 ?x757) ?x762))) (rewrite (= (- (+ ?x86 ?x757) ?x762) (+ (+ ?x86 ?x757) ?x771))) (= ?x50 (+ (+ ?x86 ?x757) ?x771)))))
 (let ((@x781 (trans @x776 (rewrite (= (+ (+ ?x86 ?x757) ?x771) (+ ?x86 ?x757 ?x771))) (= ?x50 (+ ?x86 ?x757 ?x771)))))
 (let ((@x789 (monotonicity @x781 (trans @x657 (rewrite (= (* ?x83 y00 y00) ?x782)) (= ?x51 ?x782)) (= ?x52 (+ (+ ?x86 ?x757 ?x771) ?x782)))))
 (let ((@x794 (trans @x789 (rewrite (= (+ (+ ?x86 ?x757 ?x771) ?x782) ?x790)) (= ?x52 ?x790))))
 (let ((@x77 (trans (monotonicity (rewrite (= ?x30 ?x63)) (= ?x42 (+ ?x63 y00))) (rewrite (= (+ ?x63 y00) 0)) (= ?x42 0))))
 (let ((@x800 (trans (monotonicity @x77 @x794 (= ?x53 ?x795)) (rewrite (= ?x795 0)) $x54)))
 (let ((@x804 (trans (monotonicity (trans (monotonicity @x800 $x688) @x691 $x692) $x695) @x698 $x699)))
 (let ((@x809 (monotonicity (rewrite (= $x33 $x85)) (rewrite (= $x41 $x752)) (trans (monotonicity @x804 $x702) @x705 $x706) (= $x57 $x807))))
 (trans @x809 (rewrite (= $x807 false)) $x713)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (mp @x59 (trans (quant-intro (proof-bind ?x813) $x718) @x721 $x722) false))))))))))

(:max-memory   3.41
 :memory       3.11
 :mk-bool-var  5
 :num-allocs   922085
 :rlimit-count 541
 :time         0.01
 :total-time   0.01)
