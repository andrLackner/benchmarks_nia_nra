unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x106 (* 2 x!0)))
 (let ((?x376 (* r!1 r!1)))
 (let ((?x398 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x335 (+ r00 ?x85 ?x101 ?x398 ?x376 ?x106)))
 (let (($x361 (<= ?x335 0)))
 (let (($x296 (= ?x335 0)))
 (let ((?x519 (* 6 (* r!1 r!1 x!0 x!0))))
 (let ((?x517 (* 3 (* r!1 r!1 r!1 x!0 x!0))))
 (let ((?x446 (* (- 2) x!0)))
 (let ((?x265 (* 3 ?x376)))
 (let ((?x355 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x291 (* 3 (* r!1 x!0 x!0))))
 (let ((?x285 (* (- 3) (* r!1 r!1 r!1 r!1 x!0))))
 (let ((?x99 (* 3 (* r!1 r!1 r!1 r!1))))
 (let ((?x264 (* 4 (* r!1 r!1 r!1))))
 (let ((?x250 (* (- 1) (* r!1 r!1 x!0 x!0 x!0))))
 (let ((?x63 (* (- 2) (* r!1 x!0 x!0 x!0))))
 (let ((?x62 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x309 (* (- 7) (* r!1 r!1 r!1 x!0))))
 (let ((?x165 (* (- 6) (* r!1 r!1 x!0))))
 (let ((?x491 (* (- 3) (* r!1 x!0))))
 (let ((?x131 (+ ?x491 ?x165 ?x309 ?x62 ?x63 ?x250 ?x264 ?x99 ?x285 ?x291 ?x355 ?x265 ?x446 ?x517 ?x519)))
 (let ((?x287 (* ?x131 ?x335)))
 (let (($x549 (= ?x287 0)))
 (let (($x546 (not $x549)))
 (let (($x492 (and $x296 $x546)))
 (let ((?x397 (+ ?x446 ?x265 ?x491 ?x165 ?x309 ?x62 ?x63 ?x250 ?x264 ?x99 ?x355 ?x285 ?x291 ?x519 ?x517)))
 (let (($x76 (= (+ r!1 ?x446 (* (- 1) r00) (* (- 1) ?x376) (* 2 x00) ?x36) 0)))
 (let (($x383 (and $x76 (not (= (* ?x397 (+ ?x398 ?x106 r00 ?x376 ?x85 ?x101)) 0)))))
 (let (($x378 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x548 (* 3 (* r r r x x))))
 (let ((?x545 (* 6 (* r r x x))))
 (let ((?x542 (* 3 (* r x x))))
 (let ((?x539 (* (- 3) (* r r r r x))))
 (let ((?x342 (* r r r r r)))
 (let ((?x512 (* (- 1) (* r r x x x))))
 (let ((?x529 (* (- 2) (* r x x x))))
 (let ((?x510 (* (- 1) (* x x x))))
 (let ((?x537 (* (- 7) (* r r r x))))
 (let ((?x115 (* (- 2) x)))
 (let ((?x272 (+ ?x115 (* 3 ?x30) (* (- 3) (* r x)) (* (- 6) (* r r x)) ?x537 ?x510 ?x529 ?x512 (* 4 (* r r r)) (* 3 (* r r r r)) ?x342 ?x539 ?x542 ?x545 ?x548)))
 (let (($x119 (= (+ r ?x115 (* (- 1) r00) (* (- 1) ?x30) (* 2 x00) ?x36) 0)))
 (and $x119 (not (= (* ?x272 ?x107) 0)))))))))))))))))))))) :qid k!26))
 ))
 (let (($x485 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x243 (+ x ?x64)))
 (let ((?x482 (+ 1 r)))
 (let ((?x307 (+ (* (- 1) (* ?x482 ?x482 ?x482 ?x243)) (* (- 1) x) ?x64 (* (- 1) (* ?x482 ?x482 ?x243 ?x243 ?x243)))))
 (let (($x141 (not (= (* ?x307 ?x349) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x141)))))))))))))))) :qid k!26))
 ))
 (let ((?x333 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x548 (* 3 (* r r r x x))))
 (let ((?x545 (* 6 (* r r x x))))
 (let ((?x542 (* 3 (* r x x))))
 (let ((?x539 (* (- 3) (* r r r r x))))
 (let ((?x342 (* r r r r r)))
 (let ((?x512 (* (- 1) (* r r x x x))))
 (let ((?x529 (* (- 2) (* r x x x))))
 (let ((?x510 (* (- 1) (* x x x))))
 (let ((?x537 (* (- 7) (* r r r x))))
 (let ((?x115 (* (- 2) x)))
 (let ((?x272 (+ ?x115 (* 3 ?x30) (* (- 3) (* r x)) (* (- 6) (* r r x)) ?x537 ?x510 ?x529 ?x512 (* 4 (* r r r)) (* 3 (* r r r r)) ?x342 ?x539 ?x542 ?x545 ?x548)))
 (let (($x119 (= (+ r ?x115 (* (- 1) r00) (* (- 1) ?x30) (* 2 x00) ?x36) 0)))
 (let (($x292 (and $x119 (not (= (* ?x272 ?x107) 0)))))
 (let ((?x349 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x243 (+ x ?x64)))
 (let ((?x482 (+ 1 r)))
 (let ((?x307 (+ (* (- 1) (* ?x482 ?x482 ?x482 ?x243)) (* (- 1) x) ?x64 (* (- 1) (* ?x482 ?x482 ?x243 ?x243 ?x243)))))
 (let (($x141 (not (= (* ?x307 ?x349) 0))))
 (let (($x288 (= (+ r (* (- 1) r00) (* (- 1) ?x30) ?x115 (* 2 x00) ?x36) 0)))
 (let (($x337 (and $x288 $x141)))
 (rewrite (= $x337 $x292))))))))))))))))))))))))))))))
 ))
 (let (($x484 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x243 (+ x ?x64)))
 (let ((?x482 (+ 1 r)))
 (let ((?x307 (+ (* (- 1) (* ?x482 ?x482 ?x482 ?x243)) (* (- 1) x) ?x64 (* (- 1) (* ?x482 ?x482 ?x243 ?x243 ?x243)))))
 (let (($x141 (not (= (* ?x307 ?x349) 0))))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x141))))))))))) :qid k!26))
 ))
 (let ((?x522 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x243 (+ x ?x64)))
 (let ((?x482 (+ 1 r)))
 (let ((?x307 (+ (* (- 1) (* ?x482 ?x482 ?x482 ?x243)) (* (- 1) x) ?x64 (* (- 1) (* ?x482 ?x482 ?x243 ?x243 ?x243)))))
 (let (($x141 (not (= (* ?x307 ?x349) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x337 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x141)))
 (let (($x520 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) $x141)))
 (rewrite (= $x520 $x337))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x53 (- (- (- (* (- 1) ?x41 ?x41 ?x41 ?x44) x) r) (* ?x41 ?x41 ?x44 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* ?x48 ?x53) 0))))))))))) :qid k!26))
 ))
 (let ((?x488 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x349 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x243 (+ x ?x64)))
 (let ((?x482 (+ 1 r)))
 (let ((?x307 (+ (* (- 1) (* ?x482 ?x482 ?x482 ?x243)) (* (- 1) x) ?x64 (* (- 1) (* ?x482 ?x482 ?x243 ?x243 ?x243)))))
 (let (($x141 (not (= (* ?x307 ?x349) 0))))
 (let (($x520 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x141)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x53 (- (- (- (* (- 1) ?x41 ?x41 ?x41 ?x44) x) r) (* ?x41 ?x41 ?x44 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= (* ?x48 ?x53) 0))))))
 (rewrite (= $x58 $x520)))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x108 (mp (mp @x60 (quant-intro (proof-bind ?x488) (= $x59 $x484)) $x484) (rewrite (= $x484 $x484)) $x484)))
 (let ((@x230 (mp (mp @x108 (quant-intro (proof-bind ?x522) (= $x484 $x485)) $x485) (quant-intro (proof-bind ?x333) (= $x485 $x378)) $x378)))
 (let ((@x414 (mp (mp~ @x230 (sk (~ $x378 $x383)) $x383) (rewrite (= $x383 $x492)) $x492)))
 (let ((@x503 (and-elim @x414 $x296)))
 (let ((@x406 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x296) $x361)) @x503 $x361)))
 (let (($x311 (>= ?x335 0)))
 (let ((@x130 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x296) $x311)) @x503 $x311)))
 (let (($x431 (not (>= ?x287 0))))
 (let (($x312 (<= ?x287 0)))
 (let ((@x289 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x549 (not $x312) $x431)) (and-elim @x414 $x546) (or (not $x312) $x431))))
 (let ((@x274 (unit-resolution @x289 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x312)) @x130 @x406 false) $x312) $x431)))
 ((_ th-lemma arith farkas 1 1 1) @x274 @x130 @x406 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.60
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1106085
 :num-checks                1
 :propagations              4
 :rlimit-count              1945
 :time                      0.01
 :total-time                0.01)
