unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x228 (to_real b!2)))
 (let ((?x172 (to_real d00)))
 (let ((?x596 (* ?x172 ?x228)))
 (let ((?x680 (+ (* (- 1.0) (to_real (* d00 b!2))) ?x596)))
 (let (($x539 (>= ?x680 0.0)))
 (let (($x615 (= 0.0 ?x680)))
 (let (($x609 (= ?x680 0.0)))
 (let ((@x116 (lemma (unit-resolution ((_ th-lemma arith) $x609) (hypothesis (not $x609)) false) $x609)))
 (let ((@x102 (unit-resolution (hypothesis (not $x615)) (symm (hypothesis $x609) $x615) false)))
 (let ((@x563 (unit-resolution (lemma @x102 (or (not $x609) $x615)) @x116 $x615)))
 (let ((@x534 ((_ th-lemma arith triangle-eq) (or (not $x615) $x539))))
 (let ((@x341 (unit-resolution @x534 @x563 $x539)))
 (let (($x736 (<= ?x680 0.0)))
 (let ((@x731 ((_ th-lemma arith triangle-eq) (or (not $x615) $x736))))
 (let ((@x564 (unit-resolution @x731 @x563 $x736)))
 (let ((?x110 (to_real d!1)))
 (let ((?x72 (to_real b00)))
 (let ((?x693 (* ?x72 ?x110)))
 (let ((?x275 (+ ?x693 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x151 (<= ?x275 0.0)))
 (let (($x148 (= ?x275 0.0)))
 (let ((@x380 (lemma (unit-resolution ((_ th-lemma arith) $x148) (hypothesis (not $x148)) false) $x148)))
 (let ((@x660 ((_ th-lemma arith triangle-eq) (or (not $x148) $x151))))
 (let (($x212 (>= ?x275 0.0)))
 (let ((@x361 ((_ th-lemma arith triangle-eq) (or (not $x148) $x212))))
 (let ((?x265 (to_real y!0)))
 (let ((?x681 (* ?x72 ?x265)))
 (let ((?x692 (* 2.0 ?x681)))
 (let ((?x677 (* (- 1.0) ?x596)))
 (let ((?x206 (to_real y00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x232 (to_real a!3)))
 (let ((?x691 (* ?x172 ?x232)))
 (let ((?x682 (* (- 1.0) ?x691)))
 (let ((?x546 (+ ?x682 ?x693 ?x173 ?x210 ?x677 ?x692)))
 (let (($x196 (>= ?x546 0.0)))
 (let ((?x223 (* d00 a!3)))
 (let ((?x456 (to_real ?x223)))
 (let ((?x661 (+ ?x682 ?x456)))
 (let (($x533 (>= ?x661 0.0)))
 (let (($x671 (= 0.0 ?x661)))
 (let ((@x739 (symm (commutativity (= $x671 (= ?x661 0.0))) (= (= ?x661 0.0) $x671))))
 (let ((@x740 (mp ((_ th-lemma arith) (= ?x661 0.0)) @x739 $x671)))
 (let (($x672 (<= ?x661 0.0)))
 (let ((?x249 (+ (* (- 1.0) (to_real (* b00 y!0))) ?x681)))
 (let (($x214 (>= ?x249 0.0)))
 (let (($x598 (= ?x249 0.0)))
 (let ((@x451 ((_ th-lemma arith) $x598)))
 (let (($x607 (<= ?x249 0.0)))
 (let ((@x476 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x598) $x607)) @x451 $x607)))
 (let ((@x470 ((_ th-lemma arith) $x148)))
 (let ((@x464 (unit-resolution @x660 @x470 $x151)))
 (let ((?x129 (* d00 b!2)))
 (let ((?x225 (+ ?x129 (* (- 1) (* b00 d!1)))))
 (let (($x205 (>= ?x225 0)))
 (let (($x305 (= 0 ?x225)))
 (let ((@x530 (symm (commutativity (= $x305 (= ?x225 0))) (= (= ?x225 0) $x305))))
 (let (($x319 (= ?x225 0)))
 (let ((?x675 (+ (* (/ 3.0 16.0) (* ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x232 ?x265)) (* (/ 3.0 64.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x232 ?x232 ?x265)) (* (/ 1.0 32.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x232 ?x232 ?x232)) (* (/ 1.0 16.0) (* ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x228 ?x265)) (* (/ 1.0 64.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x228 ?x228 ?x265)) (* (/ 1.0 32.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x228)) (* (/ 3.0 128.0) (* ?x110 ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x228 ?x232)) (* (/ 1.0 16.0) (* ?x110 ?x110 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265)) (* (/ 1.0 128.0) (* ?x110 ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x232 ?x232 ?x232)) (* (/ 3.0 128.0) (* ?x110 ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x232 ?x232)) (* (/ 3.0 64.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x228 ?x232 ?x265)) (* (/ 3.0 16.0) (* ?x110 ?x110 ?x228 ?x228 ?x228 ?x232 ?x232 ?x265)) (* (/ 1.0 64.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265)) (* (/ 3.0 32.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x232)) (* (/ 1.0 128.0) (* ?x110 ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x228 ?x228 ?x228)) (* (/ 3.0 32.0) (* ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x232 ?x232)))))
 (let (($x676 (= (* ?x675 (+ ?x173 ?x210 ?x677 ?x692 ?x682 ?x693)) 0.0)))
 (let (($x638 (not $x676)))
 (let ((?x492 (* (- (/ 1.0 32.0)) (* ?x72 ?x110 ?x110 ?x110 ?x206 ?x228 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265))))
 (let ((?x591 (* (/ 1.0 32.0) (* ?x72 ?x110 ?x110 ?x110 ?x228 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265 ?x265))))
 (let ((?x554 (* (- (/ 1.0 64.0)) (* ?x110 ?x110 ?x110 ?x172 ?x228 ?x228 ?x228 ?x232 ?x232 ?x232 ?x232 ?x265))))
 (let ((?x312 (* (/ 1.0 64.0) (* ?x110 ?x110 ?x110 ?x171 ?x172 ?x228 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265))))
 (let ((?x487 (+ ?x312 ?x554 ?x591 ?x492 (* (/ 1.0 16.0) (* ?x110 ?x110 ?x171 ?x172 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265)) (* (/ 1.0 8.0) (* ?x72 ?x110 ?x110 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265 ?x265)) (* (- (/ 1.0 16.0)) (* ?x110 ?x110 ?x172 ?x228 ?x228 ?x232 ?x232 ?x232 ?x232 ?x265)) (* (- (/ 1.0 8.0)) (* ?x72 ?x110 ?x110 ?x206 ?x228 ?x228 ?x232 ?x232 ?x232 ?x265)))))
 (let (($x373 (= ?x487 0.0)))
 (let (($x313 (not $x373)))
 (let (($x593 (or $x313 $x638)))
 (let ((?x164 (+ (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)) (* (- 1) (* d!1 a!3)) (* a00 d!1))))
 (let (($x700 (= ?x164 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let ((?x213 (+ ?x35 ?x99 (* 2 (* b00 y!0)) (* (- 1) ?x223))))
 (let (($x158 (= ?x213 0)))
 (let (($x478 (and $x158 $x319 $x700 $x593)))
 (let ((?x270 (+ ?x173 (* (- 1.0) (* ?x232 ?x172)) ?x210 (* (- 1.0) (* ?x228 ?x172)) (* 2.0 (* ?x265 ?x72)) (* ?x110 ?x72))))
 (let ((?x236 (+ (* (/ 1.0 64.0) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265)) (* (/ 1.0 16.0) (* ?x228 ?x228 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265)) (* (/ 1.0 64.0) (* ?x228 ?x228 ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x265)) (* (/ 1.0 128.0) (* ?x228 ?x228 ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x110)) (* (/ 3.0 128.0) (* ?x228 ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x110 ?x232)) (* (/ 3.0 128.0) (* ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x110 ?x232 ?x232)) (* (/ 1.0 128.0) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x110 ?x232 ?x232 ?x232)) (* (/ 3.0 64.0) (* ?x228 ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x265)) (* (/ 3.0 64.0) (* ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232 ?x265)) (* (/ 1.0 16.0) (* ?x228 ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x265)) (* (/ 1.0 32.0) (* ?x228 ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110)) (* (/ 3.0 32.0) (* ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232)) (* (/ 3.0 32.0) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232)) (* (/ 1.0 32.0) (* ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232 ?x232)) (* (/ 3.0 16.0) (* ?x228 ?x228 ?x228 ?x228 ?x110 ?x110 ?x232 ?x265)) (* (/ 3.0 16.0) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x232 ?x232 ?x265)))))
 (let ((?x112 (* (/ 1.0 32.0) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265 ?x265 ?x72))))
 (let ((?x251 (* (- (/ 1.0 32.0)) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265 ?x72 ?x206))))
 (let ((?x241 (* (- (/ 1.0 64.0)) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232 ?x232 ?x232 ?x265 ?x172))))
 (let ((?x269 (* (/ 1.0 64.0) (* ?x228 ?x228 ?x228 ?x110 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265 ?x171 ?x172))))
 (let ((?x108 (+ ?x269 ?x241 ?x251 ?x112 (* (/ 1.0 16.0) (* ?x228 ?x228 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265 ?x171 ?x172)) (* (- (/ 1.0 16.0)) (* ?x228 ?x228 ?x110 ?x110 ?x232 ?x232 ?x232 ?x232 ?x265 ?x172)) (* (- (/ 1.0 8.0)) (* ?x228 ?x228 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265 ?x72 ?x206)) (* (/ 1.0 8.0) (* ?x228 ?x228 ?x110 ?x110 ?x232 ?x232 ?x232 ?x265 ?x265 ?x72)))))
 (let ((?x233 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x97 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x99 (* 2 (* y!0 b00))) 0)))
 (let (($x155 (and $x97 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x233 0) (or (not (= ?x108 0.0)) (not (= (* ?x236 ?x270) 0.0))))))
 (let (($x407 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x382 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x191 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x744 (+ ?x173 ?x191 ?x210 ?x382 (* 2.0 (* (to_real y) ?x72)) (* (to_real d) ?x72))))
 (let ((?x62 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x707 (+ (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62)))))
 (let ((?x307 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x72))))
 (let ((?x296 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x72 ?x206))))
 (let ((?x285 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x62 ?x172))))
 (let ((?x274 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x171 ?x172))))
 (let ((?x352 (+ ?x274 ?x285 ?x296 ?x307 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x171 ?x172)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x62 ?x172)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x72 ?x206)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x72)))))
 (let (($x152 (not (= ?x352 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x193 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x198 (= ?x193 0)))
 (let (($x137 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (and $x131 $x137 $x198 (or $x152 (not (= (* ?x707 ?x744) 0.0))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x650 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x716 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x371 (+ ?x210 ?x173 ?x716 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x494 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x620 (+ ?x61 ?x56)))
 (let ((?x448 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)))))
 (let ((?x518 (+ (* (/ 1.0 64.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x718 (* ?x518 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x415 (or (not (= ?x718 0.0)) (not (= (* ?x448 ?x371) 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x649 (= ?x646 0)))
 (let ((?x571 (* d00 a)))
 (let ((?x573 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x571)))
 (and (= ?x573 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x649 $x415))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x642 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x382 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x191 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x744 (+ ?x173 ?x191 ?x210 ?x382 (* 2.0 (* (to_real y) ?x72)) (* (to_real d) ?x72))))
 (let ((?x62 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x707 (+ (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x62)))))
 (let ((?x307 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x72))))
 (let ((?x296 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x72 ?x206))))
 (let ((?x285 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x62 ?x172))))
 (let ((?x274 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x171 ?x172))))
 (let ((?x352 (+ ?x274 ?x285 ?x296 ?x307 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x171 ?x172)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x62 ?x172)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x72 ?x206)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x62 ?x62 ?x72)))))
 (let (($x152 (not (= ?x352 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x193 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x198 (= ?x193 0)))
 (let (($x137 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (let (($x768 (and $x131 $x137 $x198 (or $x152 (not (= (* ?x707 ?x744) 0.0))))))
 (let ((?x371 (+ ?x210 ?x173 (* 2.0 (* ?x72 (+ ?x62 (* (/ 1.0 2.0) ?x59)))) (* (- 1.0) (* ?x172 (+ ?x61 ?x56))))))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x494 (+ ?x62 ?x229)))
 (let ((?x620 (+ ?x61 ?x56)))
 (let ((?x448 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)))))
 (let ((?x518 (+ (* (/ 1.0 64.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x718 (* ?x518 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x415 (or (not (= ?x718 0.0)) (not (= (* ?x448 ?x371) 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x649 (= ?x646 0)))
 (let ((?x571 (* d00 a)))
 (let (($x673 (= (+ (* 2 ?x98) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x571) 0)))
 (let (($x641 (and $x673 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x649 $x415)))
 (rewrite (= $x641 $x768))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x417 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x716 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x371 (+ ?x210 ?x173 ?x716 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x494 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x620 (+ ?x61 ?x56)))
 (let ((?x448 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)))))
 (let ((?x518 (+ (* (/ 1.0 64.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x718 (* ?x518 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x415 (or (not (= ?x718 0.0)) (not (= (* ?x448 ?x371) 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x649 (= ?x646 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x592 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x592 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x649 $x415))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x644 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x716 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x371 (+ ?x210 ?x173 ?x716 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x494 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x620 (+ ?x61 ?x56)))
 (let ((?x448 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)))))
 (let ((?x518 (+ (* (/ 1.0 64.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x718 (* ?x518 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x415 (or (not (= ?x718 0.0)) (not (= (* ?x448 ?x371) 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x649 (= ?x646 0)))
 (let ((?x571 (* d00 a)))
 (let ((?x573 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x571)))
 (let (($x641 (and (= ?x573 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x649 $x415)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x537 (and (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) ?x571)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x649 $x415)))
 (rewrite (= $x537 $x641))))))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x68 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x62 (to_real y)))
 (let ((?x71 (+ ?x62 ?x60)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (+ a b)))
 (let ((?x81 (to_real ?x77)))
 (let ((?x84 (+ (* ?x81 ?x81 ?x81 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x71) (* ?x81 ?x81 ?x81 ?x58 ?x58 ?x60 ?x60 ?x71))))
 (let ((?x35 (* a00 d00)))
 (let ((?x75 (to_real ?x35)))
 (let ((?x76 (+ (to_real (* (- 2) b00 y00)) ?x75 (* ?x57 (to_real b00) ?x71))))
 (let ((?x61 (to_real a)))
 (let ((?x65 (+ (* ?x61 ?x61 ?x61 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x62) (* ?x61 ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x62))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x88 (or (not (= (* (to_real ?x39) ?x65) ?x68)) (not (= (* (- ?x76 (to_real (* ?x77 d00))) ?x84) ?x68)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x88)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x719 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x716 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x172 (to_real d00)))
 (let ((?x171 (to_real a00)))
 (let ((?x173 (* ?x171 ?x172)))
 (let ((?x206 (to_real y00)))
 (let ((?x72 (to_real b00)))
 (let ((?x207 (* ?x72 ?x206)))
 (let ((?x210 (* (- 2.0) ?x207)))
 (let ((?x371 (+ ?x210 ?x173 ?x716 (* (- 1.0) (* ?x172 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x229 (* (/ 1.0 2.0) ?x59)))
 (let ((?x62 (to_real y)))
 (let ((?x494 (+ ?x62 ?x229)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x620 (+ ?x61 ?x56)))
 (let ((?x448 (+ (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)) (* (/ 1.0 16.0) (* ?x59 ?x59 ?x56 ?x56 ?x620 ?x620 ?x620 ?x494)))))
 (let ((?x518 (+ (* (/ 1.0 64.0) (* ?x62 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x62 ?x59 ?x59 ?x56 ?x56 ?x61 ?x61 ?x61)))))
 (let ((?x718 (* ?x518 (+ ?x210 ?x173 (* 2.0 (* ?x72 ?x62)) (* (- 1.0) (* ?x172 ?x61))))))
 (let (($x415 (or (not (= ?x718 0.0)) (not (= (* ?x448 ?x371) 0.0)))))
 (let ((?x646 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x649 (= ?x646 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x592 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x537 (and $x592 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x649 $x415)))
 (let ((?x68 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x71 (+ ?x62 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (+ a b)))
 (let ((?x81 (to_real ?x77)))
 (let ((?x84 (+ (* ?x81 ?x81 ?x81 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x71) (* ?x81 ?x81 ?x81 ?x58 ?x58 ?x60 ?x60 ?x71))))
 (let ((?x75 (to_real ?x35)))
 (let ((?x80 (- (+ (to_real (* (- 2) b00 y00)) ?x75 (* ?x57 ?x72 ?x71)) (to_real (* ?x77 d00)))))
 (let ((?x65 (+ (* ?x61 ?x61 ?x61 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x62) (* ?x61 ?x61 ?x61 ?x58 ?x58 ?x60 ?x60 ?x62))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x88 (or (not (= (* (to_real ?x39) ?x65) ?x68)) (not (= (* ?x80 ?x84) ?x68)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x89 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x88)))
 (rewrite (= $x89 $x537)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x617 (mp (mp @x91 (quant-intro (proof-bind ?x719) (= $x90 $x417)) $x417) (rewrite (= $x417 $x417)) $x417)))
 (let ((@x420 (mp (mp @x617 (quant-intro (proof-bind ?x644) (= $x417 $x650)) $x650) (quant-intro (proof-bind ?x642) (= $x650 $x407)) $x407)))
 (let ((@x418 (mp (mp~ @x420 (sk (~ $x407 $x155)) $x155) (rewrite (= $x155 $x478)) $x478)))
 (let ((@x531 (mp (and-elim @x418 $x319) @x530 $x305)))
 (let ((@x370 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x305) $x205)) @x531 $x205)))
 (let (($x334 (<= ?x225 0)))
 (let ((@x268 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x305) $x334)) @x531 $x334)))
 (let (($x303 (>= ?x213 0)))
 (let (($x224 (= 0 ?x213)))
 (let ((@x427 (mp (and-elim @x418 $x158) (symm (commutativity (= $x224 $x158)) (= $x158 $x224)) $x224)))
 (let ((@x294 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x224) $x303)) @x427 $x303)))
 (let (($x302 (<= ?x213 0)))
 (let ((@x640 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x224) $x302)) @x427 $x302)))
 (let (($x142 (not $x212)))
 (let (($x583 (not $x151)))
 (let (($x582 (not $x334)))
 (let (($x580 (not $x205)))
 (let (($x575 (not $x736)))
 (let (($x576 (not $x539)))
 (let (($x572 (not $x303)))
 (let (($x574 (not $x302)))
 (let (($x316 (or $x574 $x572 $x576 $x575 (not $x214) (not $x607) $x580 $x582 $x196 $x583 (not $x672) $x142 (not $x533))))
 (let ((@x616 (unit-resolution ((_ th-lemma arith) $x316) @x640 @x294 @x268 @x370 (hypothesis (not $x196)) @x464 (unit-resolution @x361 @x470 $x212) @x476 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x598) $x214)) @x451 $x214) (unit-resolution @x731 (hypothesis $x615) $x736) (unit-resolution @x534 (hypothesis $x615) $x539) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x671) $x672)) @x740 $x672) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x671) $x533)) @x740 $x533) false)))
 (let ((@x723 (unit-resolution (lemma @x616 (or (not $x615) $x196)) @x563 $x196)))
 (let (($x322 (<= ?x546 0.0)))
 (let ((@x636 ((_ th-lemma arith) $x609)))
 (let ((@x437 (unit-resolution @x534 (mp @x636 (symm (commutativity (= $x615 $x609)) (= $x609 $x615)) $x615) $x539)))
 (let ((?x422 (+ ?x691 (* (- 1.0) ?x456))))
 (let (($x631 (>= ?x422 0.0)))
 (let (($x726 (= 0.0 ?x422)))
 (let ((@x481 (symm (commutativity (= $x726 (= ?x422 0.0))) (= (= ?x422 0.0) $x726))))
 (let ((@x489 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x726) $x631)) (mp ((_ th-lemma arith) (= ?x422 0.0)) @x481 $x726) $x631)))
 (let ((?x490 (+ ?x173 (* (- 1.0) (to_real ?x35)))))
 (let (($x360 (<= ?x490 0.0)))
 (let (($x479 (= 0.0 ?x490)))
 (let ((@x500 (symm (commutativity (= $x479 (= ?x490 0.0))) (= (= ?x490 0.0) $x479))))
 (let ((@x509 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x479) $x360)) (mp ((_ th-lemma arith) (= ?x490 0.0)) @x500 $x479) $x360)))
 (let ((?x463 (+ (* (- 1.0) (to_real ?x98)) ?x207)))
 (let (($x515 (>= ?x463 0.0)))
 (let (($x585 (= 0.0 ?x463)))
 (let ((@x523 (symm (commutativity (= $x585 (= ?x463 0.0))) (= (= ?x463 0.0) $x585))))
 (let ((@x566 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x585) $x515)) (mp ((_ th-lemma arith) (= ?x463 0.0)) @x523 $x585) $x515)))
 (let ((@x540 ((_ th-lemma arith) @x370 @x566 @x509 @x489 @x640 @x464 (hypothesis (not $x322)) @x476 @x437 false)))
 (let ((@x541 (lemma @x540 $x322)))
 (let (($x162 (>= ?x487 0.0)))
 (let (($x146 (not $x162)))
 (let (($x308 (<= ?x487 0.0)))
 (let ((@x344 (unit-resolution ((_ th-lemma arith) (or $x572 $x582 $x580 $x574 $x308 $x575 $x576)) @x640 @x294 @x268 @x370 (hypothesis (not $x308)) @x564 @x341 false)))
 (let (($x301 (= 0.0 ?x487)))
 (let (($x412 (not $x301)))
 (let ((@x153 (monotonicity (symm (commutativity (= $x301 $x373)) (= $x373 $x301)) (= $x313 $x412))))
 (let (($x751 (= 0.0 ?x546)))
 (let ((@x737 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x751 (not $x322) (not $x196))) @x541 @x723 $x751)))
 (let (($x143 (= ?x546 0.0)))
 (let (($x752 (not $x143)))
 (let ((@x773 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x752 $x676)) (hypothesis $x638) $x752) (symm (hypothesis $x751) $x143) false)))
 (let ((@x556 (unit-resolution (and-elim @x418 $x593) (unit-resolution (lemma @x773 (or (not $x751) $x676)) @x737 $x676) $x313)))
 (let ((@x766 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x301 (not $x308) $x146)) (mp @x556 @x153 $x412) (lemma @x344 $x308) $x146)))
 (let (($x298 (>= ?x164 0)))
 (let (($x327 (= 0 ?x164)))
 (let ((@x310 (mp (and-elim @x418 $x700) (symm (commutativity (= $x327 $x700)) (= $x700 $x327)) $x327)))
 (let (($x349 (<= ?x164 0)))
 (let (($x520 (not $x322)))
 (let (($x272 (not $x196)))
 (let (($x434 (or $x272 $x520 (not $x349) (not $x298) $x162 $x576 $x582 $x575 $x580 $x583 $x142)))
 (unit-resolution ((_ th-lemma arith) $x434) @x268 @x370 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x327) $x349)) @x310 $x349) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x327) $x298)) @x310 $x298) @x766 @x541 @x723 (unit-resolution @x361 @x380 $x212) (unit-resolution @x660 @x380 $x151) @x564 @x341 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       69
 :arith-eq-adapter                59
 :arith-bound-propagations-cheap  31
 :arith-bound-propagations-lp     8
 :arith-branch                    1
 :arith-conflicts                 51
 :arith-diseq                     60
 :arith-gcd-calls                 4
 :arith-grobner-calls             5
 :arith-grobner-conflicts         3
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 17
 :arith-lower                     55
 :arith-make-feasible             47
 :arith-max-columns               95
 :arith-max-rows                  28
 :arith-nla-explanations          199
 :arith-nla-lemmas                50
 :arith-patches                   4
 :arith-patches-success           3
 :arith-propagations              31
 :arith-upper                     58
 :conflicts                       9
 :decisions                       81
 :del-clause                      240
 :final-checks                    36
 :max-memory                      4.84
 :memory                          3.17
 :minimized-lits                  4
 :mk-bool-var                     249
 :mk-clause                       279
 :num-allocs                      18436308
 :num-checks                      1
 :propagations                    145
 :rlimit-count                    6769
 :time                            0.04
 :total-time                      0.05)
