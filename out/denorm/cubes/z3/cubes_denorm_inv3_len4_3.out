unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x393 (+ k!2 c!3)))
 (let ((?x401 (+ m!1 k!2)))
 (let ((?x378 (+ 6 m!1)))
 (let ((?x385 (+ 1 n!0)))
 (let ((?x354 (+ (* ?x385 ?x385 ?x378 ?x378 ?x401 ?x393) (* ?x385 ?x378 ?x378 ?x401 ?x401 ?x393) (* ?x385 ?x378 ?x378 ?x401 ?x393 ?x393) (* ?x385 ?x385 ?x378 ?x378 ?x378 ?x401 ?x393))))
 (let (($x1532 (<= ?x354 0)))
 (let ((?x358 (* k!2 n!0)))
 (let ((?x249 (* 2 n!0)))
 (let ((?x248 (* (- 3) c!3)))
 (let ((?x253 (* (- 3) k!2)))
 (let ((?x252 (* m!1 n!0)))
 (let ((?x151 (+ 3 ?x252 ?x253 ?x248 ?x249 ?x358)))
 (let (($x952 (<= ?x151 0)))
 (let ((?x269 (+ m!1 (* (- 6) n!0))))
 (let (($x362 (<= ?x269 6)))
 (let (($x340 (= ?x269 6)))
 (let ((?x148 (* ?x354 ?x151)))
 (let (($x141 (= ?x148 0)))
 (let (($x155 (not $x141)))
 (let ((?x384 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x386 (= ?x384 1)))
 (let ((?x343 (* (- 1) ?x358)))
 (let ((?x178 (* (- 2) n!0)))
 (let ((?x100 (* 3 c!3)))
 (let ((?x175 (+ k!2 ?x100 ?x178 ?x343)))
 (let (($x205 (= ?x175 1)))
 (let ((?x103 (* k!2 k!2)))
 (let ((?x390 (+ ?x103 (* (- 9) (* c!3 n!0)) (* (- 5) k!2) (* (- 18) c!3) (* 9 n!0))))
 (let (($x92 (= ?x390 (- 4))))
 (let (($x137 (and $x340 $x92 $x205 $x386 $x155)))
 (let ((?x193 (+ (* ?x385 ?x378 ?x378 (+ k!2 m!1) (+ k!2 m!1) (+ c!3 k!2)) (* ?x385 ?x378 ?x378 (+ k!2 m!1) (+ c!3 k!2) (+ c!3 k!2)) (* ?x385 ?x385 ?x378 ?x378 ?x378 (+ k!2 m!1) (+ c!3 k!2)) (* ?x385 ?x385 ?x378 ?x378 (+ k!2 m!1) (+ c!3 k!2)))))
 (let ((?x276 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x103) (* 9 (* c!3 n!0)))))
 (let (($x348 (and $x340 (= ?x276 4) (= (+ ?x100 k!2 ?x178 ?x343) 1) $x386 (not (= (* ?x193 (+ 3 ?x248 ?x253 ?x249 ?x358 ?x252)) 0)))))
 (let (($x265 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x407 (+ 3 ?x219 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x464 (+ (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68) (* ?x339 ?x412 ?x412 ?x71 ?x68 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x412 ?x71 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x71 ?x68))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 $x206 $x258 $x296 (not (= (* ?x464 ?x407) 0))))))))))))))))))))) :qid k!34))
 ))
 (let (($x480 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x437 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x464 (+ (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68) (* ?x339 ?x412 ?x412 ?x71 ?x68 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x412 ?x71 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x71 ?x68))))
 (let (($x171 (not (= (* ?x464 ?x437) 0))))
 (let (($x150 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x191 $x150 $x171)))))))))))))))))) :qid k!34))
 ))
 (let ((?x432 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x407 (+ 3 ?x219 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x464 (+ (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68) (* ?x339 ?x412 ?x412 ?x71 ?x68 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x412 ?x71 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x71 ?x68))))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x413 (and $x122 $x206 $x258 $x296 (not (= (* ?x464 ?x407) 0)))))
 (let ((?x461 (* ?x464 (+ 3 ?x219 (* (- 4) k) (* ?x339 ?x71) (* (- 1) m) ?x59))))
 (let (($x171 (not (= ?x461 0))))
 (let (($x150 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x145 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x191 $x150 $x171)))
 (rewrite (= $x145 $x413)))))))))))))))))))))))))))
 ))
 (let (($x172 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x437 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x464 (+ (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68) (* ?x339 ?x412 ?x412 ?x71 ?x68 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x412 ?x71 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x71 ?x68))))
 (let (($x171 (not (= (* ?x464 ?x437) 0))))
 (let (($x150 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x334 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= ?x334 (- 4)) (= (+ ?x219 (* n k) (* (- 1) k) ?x59) (- 1)) $x150 $x171))))))))))))))) :qid k!34))
 ))
 (let ((?x442 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x437 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x464 (+ (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68) (* ?x339 ?x412 ?x412 ?x71 ?x68 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x412 ?x71 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x71 ?x68))))
 (let (($x171 (not (= (* ?x464 ?x437) 0))))
 (let (($x150 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x191 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x145 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x191 $x150 $x171)))
 (let ((?x48 (* 9 n)))
 (let ((?x334 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x195 (and $x122 (= ?x334 (- 4)) (= (+ ?x219 (* n k) (* (- 1) k) ?x59) (- 1)) $x150 $x171)))
 (rewrite (= $x195 $x145))))))))))))))))))))))))
 ))
 (let (($x89 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (+ (* ?x68 ?x71 ?x71 ?x78 ?x78 ?x72) (* ?x68 ?x68 ?x71 ?x78 ?x78 ?x72) (* ?x68 ?x71 ?x78 ?x78 ?x78 ?x72 ?x72) (* ?x68 ?x71 ?x78 ?x78 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x83) 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x174 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x437 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x464 (+ (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68) (* ?x339 ?x412 ?x412 ?x71 ?x68 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x412 ?x71 ?x68) (* ?x339 ?x339 ?x412 ?x412 ?x71 ?x68))))
 (let (($x171 (not (= (* ?x464 ?x437) 0))))
 (let (($x150 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x334 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x195 (and $x122 (= ?x334 (- 4)) (= (+ ?x219 (* n k) (* (- 1) k) ?x59) (- 1)) $x150 $x171)))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x83 (+ (* ?x68 ?x71 ?x71 ?x78 ?x78 ?x72) (* ?x68 ?x68 ?x71 ?x78 ?x78 ?x72) (* ?x68 ?x71 ?x78 ?x78 ?x78 ?x72 ?x72) (* ?x68 ?x71 ?x78 ?x78 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x88 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x83) 0))))))
 (rewrite (= $x88 $x195)))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x403 (mp (mp @x90 (quant-intro (proof-bind ?x174) (= $x89 $x172)) $x172) (rewrite (= $x172 $x172)) $x172)))
 (let ((@x197 (mp (mp @x403 (quant-intro (proof-bind ?x442) (= $x172 $x480)) $x480) (quant-intro (proof-bind ?x432) (= $x480 $x265)) $x265)))
 (let ((@x217 (mp (mp~ @x197 (sk (~ $x265 $x348)) $x348) (rewrite (= $x348 $x137)) $x137)))
 (let ((@x160 (and-elim @x217 $x340)))
 (let ((@x370 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x340) $x362)) @x160 $x362)))
 (let (($x147 (>= ?x269 6)))
 (let ((@x166 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x340) $x147)) @x160 $x147)))
 (let (($x232 (<= ?x175 1)))
 (let ((@x211 (and-elim @x217 $x205)))
 (let ((@x380 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x205) $x232)) @x211 $x232)))
 (let (($x264 (>= ?x175 1)))
 (let ((@x154 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x205) $x264)) @x211 $x264)))
 (let (($x169 (<= ?x384 1)))
 (let ((@x392 (and-elim @x217 $x386)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x386) $x169)) @x392 $x169)))
 (let (($x367 (>= ?x384 1)))
 (let ((@x234 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x386) $x367)) @x392 $x367)))
 (let ((@x956 ((_ th-lemma arith) (hypothesis (not $x952)) @x166 @x370 @x166 @x370 @x234 @x250 @x166 @x370 @x234 @x250 @x154 @x380 @x166 @x370 false)))
 (let ((@x957 (lemma @x956 $x952)))
 (let (($x1477 (not $x1532)))
 (let ((@x1481 (hypothesis $x1477)))
 (let (($x1482 (not (<= ?x148 0))))
 (let (($x317 (>= ?x148 0)))
 (let (($x1533 (>= ?x354 0)))
 (let (($x1527 (not $x1533)))
 (let (($x1531 (= ?x354 0)))
 (let (($x1535 (not $x1531)))
 (let (($x314 (not $x317)))
 (let ((@x229 (hypothesis $x314)))
 (let ((@x1542 ((_ th-lemma arith farkas 1 1 1) @x229 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1535 $x1533)) (hypothesis $x1531) $x1533) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1535 $x1532)) (hypothesis $x1531) $x1532) false)))
 (let ((@x1472 (lemma ((_ th-lemma arith) @x229 @x1481 @x166 @x370 @x234 @x250 @x154 @x380 false) (or $x1532 $x317))))
 (let ((@x1525 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1531 $x1477 $x1527)) (unit-resolution @x1472 @x229 $x1532) (unit-resolution (lemma @x1542 (or $x1535 $x317)) @x229 $x1535) $x1527)))
 (let ((@x405 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x141 $x1482 $x314)) (and-elim @x217 $x155) (or $x1482 $x314))))
 (let ((@x106 (unit-resolution @x405 (lemma ((_ th-lemma arith farkas 1 1 1) @x229 @x1525 @x957 false) $x317) $x1482)))
 (let (($x389 (<= ?x390 (- 4))))
 (let ((@x353 (and-elim @x217 $x92)))
 (let ((@x368 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x92) $x389)) @x353 $x389)))
 (let (($x291 (>= ?x390 (- 4))))
 (let ((@x474 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x92) $x291)) @x353 $x291)))
 (let ((@x1405 ((_ th-lemma arith) @x106 (hypothesis $x1527) @x166 @x370 @x234 @x250 @x474 @x368 @x154 @x380 @x234 @x250 @x474 @x368 false)))
 ((_ th-lemma arith farkas 1 1 1) @x106 (lemma @x1405 $x1533) (lemma ((_ th-lemma arith farkas 1 1 1) @x106 @x1481 @x957 false) $x1532) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 99
 :arith-assert-diseq        22
 :arith-assert-lower        596
 :arith-assert-upper        509
 :arith-bound-prop          25
 :arith-branch-var          32
 :arith-conflicts           49
 :arith-eq-adapter          26
 :arith-fixed-eqs           134
 :arith-gcd-tests           356
 :arith-gomory-cuts         23
 :arith-grobner             47
 :arith-ineq-splits         32
 :arith-max-min             4034
 :arith-nonlinear-bounds    147
 :arith-nonlinear-horner    555
 :arith-num-rows            21
 :arith-offset-eqs          3
 :arith-patches             68
 :arith-patches_succ        5
 :arith-pivots              1032
 :arith-pseudo-nonlinear    121
 :arith-row-summations      7483
 :arith-tableau-max-columns 54
 :arith-tableau-max-rows    21
 :conflicts                 54
 :decisions                 232
 :del-clause                125
 :final-checks              190
 :max-memory                4.05
 :memory                    3.28
 :minimized-lits            4
 :mk-bool-var               304
 :mk-clause                 241
 :num-allocs                22349060
 :num-checks                1
 :propagations              228
 :rlimit-count              558357
 :time                      0.23
 :total-time                0.24)
