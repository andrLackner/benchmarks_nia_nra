unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x521 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x541 (>= ?x521 (- 6))))
 (let (($x532 (= ?x521 (- 6))))
 (let ((?x386 (+ k!2 c!3)))
 (let ((?x96 (+ 1 n!0)))
 (let ((?x505 (* (- 1) (* m!1 m!1 m!1 m!1))))
 (let ((?x349 (* (- 36) (* m!1 m!1))))
 (let ((?x146 (* (- 12) (* m!1 m!1 m!1))))
 (let ((?x223 (* k!2 k!2)))
 (let ((?x458 (* (- 36) ?x223)))
 (let ((?x519 (+ (* (- 24) (* n!0 m!1 m!1 k!2)) (* (- 72) (* n!0 m!1 k!2)) (* (- 2) (* m!1 m!1 m!1 k!2)) ?x458 (* (- 12) (* m!1 k!2 k!2)) (* (- 24) (* m!1 m!1 k!2)) (* (- 36) (* n!0 m!1 m!1)) (* (- 36) (* n!0 k!2 k!2)) ?x146 ?x349 (* (- 1) (* m!1 m!1 k!2 k!2)) (* (- 12) (* n!0 m!1 m!1 m!1)) ?x505 (* (- 1) (* ?x96 ?x96 ?x96 (+ m!1 k!2) ?x386 ?x386 ?x386)) (* (- 12) (* n!0 m!1 k!2 k!2)) (* (- 1) (* n!0 m!1 m!1 k!2 k!2)) (* (- 72) (* m!1 k!2)) (* (- 1) (* n!0 m!1 m!1 m!1 m!1)) (* (- 2) (* n!0 m!1 m!1 m!1 k!2)))))
 (let ((?x395 (* ?x519 (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x372 (= ?x395 0)))
 (let (($x393 (not $x372)))
 (let (($x402 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x430 (= (+ (* 2 n!0) (* (- 1) k!2) (* n!0 k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x190 (+ (* 9 n!0) (* (- 5) k!2) ?x223 (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let (($x374 (and $x532 (= ?x190 (- 4)) $x430 $x402 $x393)))
 (let ((?x116 (+ c!3 k!2)))
 (let ((?x285 (+ ?x458 (* (- 1) (* ?x96 ?x96 ?x96 (+ k!2 m!1) ?x116 ?x116 ?x116)) (* (- 12) (* m!1 m!1 m!1 n!0)) (* (- 24) (* k!2 m!1 m!1 n!0)) (* (- 12) (* k!2 k!2 m!1 n!0)) (* (- 36) (* m!1 m!1 n!0)) (* (- 72) (* k!2 m!1 n!0)) (* (- 36) (* k!2 k!2 n!0)) ?x505 (* (- 2) (* k!2 m!1 m!1 m!1)) (* (- 1) (* k!2 k!2 m!1 m!1)) ?x146 (* (- 24) (* k!2 m!1 m!1)) (* (- 12) (* k!2 k!2 m!1)) ?x349 (* (- 72) (* k!2 m!1)) (* (- 2) (* k!2 m!1 m!1 m!1 n!0)) (* (- 1) (* m!1 m!1 m!1 m!1 n!0)) (* (- 1) (* k!2 k!2 m!1 m!1 n!0)))))
 (let (($x240 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x654 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x223) (* 9 (* c!3 n!0)))))
 (let (($x476 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x654 4) $x240 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x285 (+ (- 6) m!1 (* (- 6) n!0))) 0)))))
 (let (($x433 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x700 (* (- 1) (* k k m m n))))
 (let ((?x699 (* (- 1) (* m m m m n))))
 (let ((?x651 (* (- 2) (* k m m m n))))
 (let ((?x656 (* (- 72) (* k m))))
 (let ((?x657 (* (- 36) (* m m))))
 (let ((?x662 (* (- 12) (* k k m))))
 (let ((?x663 (* (- 24) (* k m m))))
 (let ((?x668 (* (- 12) (* m m m))))
 (let ((?x708 (* (- 1) (* k k m m))))
 (let ((?x669 (* (- 2) (* k m m m))))
 (let ((?x710 (* (- 1) (* m m m m))))
 (let ((?x674 (* (- 36) (* k k n))))
 (let ((?x675 (* (- 72) (* k m n))))
 (let ((?x679 (* (- 36) (* m m n))))
 (let ((?x684 (* (- 12) (* k k m n))))
 (let ((?x685 (* (- 24) (* k m m n))))
 (let ((?x689 (* (- 12) (* m m m n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x317 (* (- 1) (* ?x315 ?x315 ?x315 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x49 (* k k)))
 (let ((?x693 (* (- 36) ?x49)))
 (let ((?x231 (+ ?x693 ?x317 ?x689 ?x685 ?x684 ?x679 ?x675 ?x674 ?x710 ?x669 ?x708 ?x668 ?x663 ?x662 ?x657 ?x656 ?x651 ?x699 ?x700)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 $x210 $x262 $x300 (not (= (* ?x231 ?x115) 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x421 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x74 (+ k m)))
 (let ((?x166 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x317 (* (- 1) (* ?x315 ?x315 ?x315 ?x74 (+ c k) (+ c k) (+ c k)))))
 (let (($x343 (not (= (* (+ ?x317 (* (- 1) (* ?x315 ?x166 ?x166 ?x74 ?x74))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x707 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x707 $x94 $x343)))))))))))))))) :qid k!34))
 ))
 (let ((?x504 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x700 (* (- 1) (* k k m m n))))
 (let ((?x699 (* (- 1) (* m m m m n))))
 (let ((?x651 (* (- 2) (* k m m m n))))
 (let ((?x656 (* (- 72) (* k m))))
 (let ((?x657 (* (- 36) (* m m))))
 (let ((?x662 (* (- 12) (* k k m))))
 (let ((?x663 (* (- 24) (* k m m))))
 (let ((?x668 (* (- 12) (* m m m))))
 (let ((?x708 (* (- 1) (* k k m m))))
 (let ((?x669 (* (- 2) (* k m m m))))
 (let ((?x710 (* (- 1) (* m m m m))))
 (let ((?x674 (* (- 36) (* k k n))))
 (let ((?x675 (* (- 72) (* k m n))))
 (let ((?x679 (* (- 36) (* m m n))))
 (let ((?x684 (* (- 12) (* k k m n))))
 (let ((?x685 (* (- 24) (* k m m n))))
 (let ((?x689 (* (- 12) (* m m m n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x317 (* (- 1) (* ?x315 ?x315 ?x315 ?x74 ?x73 ?x73 ?x73))))
 (let ((?x49 (* k k)))
 (let ((?x693 (* (- 36) ?x49)))
 (let ((?x231 (+ ?x693 ?x317 ?x689 ?x685 ?x684 ?x679 ?x675 ?x674 ?x710 ?x669 ?x708 ?x668 ?x663 ?x662 ?x657 ?x656 ?x651 ?x699 ?x700)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x396 (and $x126 $x210 $x262 $x300 (not (= (* ?x231 ?x115) 0)))))
 (let ((?x489 (+ ?x317 (* (- 1) (* ?x315 (+ 6 m) (+ 6 m) ?x74 ?x74)))))
 (let (($x343 (not (= (* ?x489 ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x707 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x652 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x707 $x94 $x343)))
 (rewrite (= $x652 $x396)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x344 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x74 (+ k m)))
 (let ((?x166 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x317 (* (- 1) (* ?x315 ?x315 ?x315 ?x74 (+ c k) (+ c k) (+ c k)))))
 (let (($x343 (not (= (* (+ ?x317 (* (- 1) (* ?x315 ?x166 ?x166 ?x74 ?x74))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x189 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x497 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m ?x109) 6)))
 (and $x126 (= ?x497 (- 4)) $x189 $x94 $x343)))))))))))))) :qid k!34))
 ))
 (let ((?x418 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x74 (+ k m)))
 (let ((?x166 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x317 (* (- 1) (* ?x315 ?x315 ?x315 ?x74 (+ c k) (+ c k) (+ c k)))))
 (let (($x343 (not (= (* (+ ?x317 (* (- 1) (* ?x315 ?x166 ?x166 ?x74 ?x74))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x707 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x652 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x707 $x94 $x343)))
 (let (($x189 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x497 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x355 (and $x126 (= ?x497 (- 4)) $x189 $x94 $x343)))
 (rewrite (= $x355 $x652)))))))))))))))))))))))
 ))
 (let (($x84 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x78 (- (* (- 1) ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69) (* ?x74 ?x74 ?x76 ?x76 ?x69))))
 (let (($x80 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x78) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x80)))))))))))))))) :qid k!34))
 ))
 (let ((?x346 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x109 (* (- 6) n)))
 (let ((?x115 (+ (- 6) m ?x109)))
 (let ((?x74 (+ k m)))
 (let ((?x166 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x317 (* (- 1) (* ?x315 ?x315 ?x315 ?x74 (+ c k) (+ c k) (+ c k)))))
 (let (($x343 (not (= (* (+ ?x317 (* (- 1) (* ?x315 ?x166 ?x166 ?x74 ?x74))) ?x115) 0))))
 (let (($x94 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x189 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x497 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x126 (= (+ m ?x109) 6)))
 (let (($x355 (and $x126 (= ?x497 (- 4)) $x189 $x94 $x343)))
 (let ((?x69 (+ n 1)))
 (let ((?x73 (+ c k)))
 (let ((?x78 (- (* (- 1) ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 ?x69) (* ?x74 ?x74 (+ m 6) (+ m 6) ?x69))))
 (let (($x80 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x78) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x83 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x80)))))
 (rewrite (= $x83 $x355)))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x645 (mp (mp @x85 (quant-intro (proof-bind ?x346) (= $x84 $x344)) $x344) (rewrite (= $x344 $x344)) $x344)))
 (let ((@x500 (mp (mp @x645 (quant-intro (proof-bind ?x418) (= $x344 $x421)) $x421) (quant-intro (proof-bind ?x504) (= $x421 $x433)) $x433)))
 (let ((@x244 (mp (mp~ @x500 (sk (~ $x433 $x476)) $x476) (rewrite (= $x476 $x374)) $x374)))
 (let ((@x237 (and-elim @x244 $x532)))
 (let ((@x647 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x532) $x541)) @x237 $x541)))
 (let (($x529 (<= ?x521 (- 6))))
 (let ((@x701 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x532) $x529)) @x237 $x529)))
 (let (($x534 (not (<= ?x395 0))))
 (let (($x172 (>= ?x395 0)))
 (let ((@x192 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x372 $x534 (not $x172))) (and-elim @x244 $x393) (or $x534 (not $x172)))))
 (let ((@x191 (unit-resolution @x192 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x172)) @x701 @x647 false) $x172) $x534)))
 ((_ th-lemma arith farkas 1 1 1) @x191 @x701 @x647 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        26
 :arith-assert-upper        24
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             123
 :arith-nonlinear-bounds    25
 :arith-num-rows            9
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      3
 :arith-tableau-max-columns 52
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.64
 :memory                    3.13
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1161563
 :num-checks                1
 :propagations              10
 :rlimit-count              3499
 :time                      0.01
 :total-time                0.01)
