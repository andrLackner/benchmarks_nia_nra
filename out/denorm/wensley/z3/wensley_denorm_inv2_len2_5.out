unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x362 (to_real y!0)))
 (let ((?x360 (to_real d!1)))
 (let ((?x359 (to_real a!3)))
 (let ((?x358 (to_real b!2)))
 (let ((?x64 (to_real b00)))
 (let ((?x274 (* (- (/ 1.0 32.0)) (* ?x64 ?x358 ?x359 ?x359 ?x360 ?x360 ?x360 ?x360 ?x362))))
 (let ((?x284 (* (- (/ 1.0 32.0)) (* (to_real d00) ?x358 ?x358 ?x359 ?x359 ?x360 ?x360 ?x360))))
 (let ((?x290 (* (/ 1.0 32.0) (* (to_real d00) ?x358 ?x358 ?x359 ?x359 ?x360 ?x360 ?x360 ?x362))))
 (let ((?x552 (* (/ 1.0 32.0) (* ?x64 ?x358 ?x359 ?x359 ?x360 ?x360 ?x360 ?x360))))
 (let ((?x422 (+ ?x552 ?x290 ?x284 ?x274)))
 (let (($x473 (<= ?x422 0.0)))
 (let (($x466 (not $x473)))
 (let (($x515 (= 0.0 ?x422)))
 (let (($x650 (not $x515)))
 (let ((@x649 (symm (commutativity (= $x515 (= ?x422 0.0))) (= (= ?x422 0.0) $x515))))
 (let (($x538 (= ?x422 0.0)))
 (let (($x278 (not $x538)))
 (let ((?x532 (* (/ 1.0 16.0) (* (to_real d00) ?x358 ?x358 ?x358 ?x359 ?x360 ?x360 ?x360 ?x362))))
 (let ((?x578 (* (/ 1.0 64.0) (* (to_real d00) ?x358 ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x360))))
 (let ((?x253 (* (/ 1.0 32.0) (* (to_real d00) ?x358 ?x358 ?x358 ?x359 ?x360 ?x360 ?x360 ?x360))))
 (let ((?x572 (* (/ 1.0 32.0) (* (to_real d00) ?x358 ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x362))))
 (let ((?x548 (* (/ 1.0 64.0) (* (to_real d00) ?x358 ?x358 ?x359 ?x359 ?x360 ?x360 ?x360 ?x360))))
 (let ((?x467 (+ ?x548 ?x572 ?x253 (* (- (/ 1.0 16.0)) (* ?x64 ?x358 ?x358 ?x359 ?x360 ?x360 ?x360 ?x360 ?x362)) ?x552 (* (- (/ 1.0 64.0)) (* ?x64 ?x358 ?x359 ?x359 ?x360 ?x360 ?x360 ?x360 ?x360)) (* (- (/ 1.0 32.0)) (* ?x64 ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x362)) ?x290 (* (/ 1.0 16.0) (* ?x64 ?x358 ?x358 ?x359 ?x360 ?x360 ?x360 ?x360)) (* (- (/ 1.0 16.0)) (* (to_real d00) ?x358 ?x358 ?x358 ?x359 ?x360 ?x360 ?x360)) (* (/ 1.0 32.0) (* ?x64 ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x360)) (* (- (/ 1.0 32.0)) (* (to_real d00) ?x358 ?x358 ?x358 ?x358 ?x360 ?x360 ?x360)) ?x578 (* (- (/ 1.0 64.0)) (* ?x64 ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x360)) ?x284 ?x532 (* (- (/ 1.0 32.0)) (* ?x64 ?x358 ?x358 ?x359 ?x360 ?x360 ?x360 ?x360 ?x360)) ?x274)))
 (let (($x459 (= ?x467 0.0)))
 (let (($x545 (= 0.0 ?x467)))
 (let (($x110 (<= ?x467 0.0)))
 (let ((?x136 (+ (* b00 d!1) (* (- 1) (* d00 b!2)))))
 (let (($x342 (>= ?x136 0)))
 (let (($x518 (= 0 ?x136)))
 (let ((@x641 (symm (commutativity (= $x518 (= ?x136 0))) (= (= ?x136 0) $x518))))
 (let (($x137 (= ?x136 0)))
 (let (($x460 (or $x278 (not $x459))))
 (let ((?x425 (+ (* 2 (* y!0 b!2)) (* (- 2) (* y00 b!2)) (* a00 d!1) (* (- 1) (* d!1 a!3)))))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x597 (= (+ ?x35 ?x96 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x404 (and $x597 $x137 (= ?x425 0) $x460)))
 (let ((?x527 (* (/ 1.0 16.0) (* ?x358 ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x359 ?x362))))
 (let ((?x256 (* (/ 1.0 64.0) (* ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x360 ?x359 ?x359))))
 (let ((?x535 (* (/ 1.0 32.0) (* ?x358 ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x360 ?x359))))
 (let ((?x537 (* (/ 1.0 64.0) (* ?x358 ?x358 ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x360))))
 (let ((?x433 (* (/ 1.0 32.0) (* ?x358 ?x358 ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x362))))
 (let ((?x432 (* (/ 1.0 32.0) (* ?x358 ?x360 ?x360 ?x360 ?x360 ?x64 ?x359 ?x359))))
 (let ((?x396 (* (- (/ 1.0 32.0)) (* ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x359 ?x359))))
 (let ((?x393 (* (- (/ 1.0 32.0)) (* ?x358 ?x360 ?x360 ?x360 ?x360 ?x64 ?x359 ?x359 ?x362))))
 (let ((?x369 (* (/ 1.0 32.0) (* ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x359 ?x359 ?x362))))
 (let ((?x269 (+ ?x369 ?x393 ?x396 ?x432 ?x433 (* (- (/ 1.0 32.0)) (* ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x64 ?x362)) ?x537 (* (- (/ 1.0 64.0)) (* ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x360 ?x64)) ?x535 (* (- (/ 1.0 32.0)) (* ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x360 ?x64 ?x359)) ?x256 (* (- (/ 1.0 64.0)) (* ?x358 ?x360 ?x360 ?x360 ?x360 ?x360 ?x64 ?x359 ?x359)) ?x527 (* (- (/ 1.0 16.0)) (* ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x64 ?x359 ?x362)) (* (- (/ 1.0 32.0)) (* ?x358 ?x358 ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360)) (* (/ 1.0 32.0) (* ?x358 ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x64)) (* (- (/ 1.0 16.0)) (* ?x358 ?x358 ?x358 (to_real d00) ?x360 ?x360 ?x360 ?x359)) (* (/ 1.0 16.0) (* ?x358 ?x358 ?x360 ?x360 ?x360 ?x360 ?x64 ?x359)))))
 (let ((?x150 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x198 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x96 (* 2 (* y!0 b00))) 0)))
 (let (($x119 (and $x198 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x150 0) (or (not (= (+ ?x369 ?x393 ?x396 ?x432) 0.0)) (not (= ?x269 0.0))))))
 (let (($x569 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x543 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 (to_real y)))))
 (let ((?x68 (to_real y)))
 (let ((?x60 (to_real d00)))
 (let ((?x250 (* (/ 1.0 32.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67))))
 (let ((?x240 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67 ?x67))))
 (let ((?x230 (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x68))))
 (let ((?x219 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68))))
 (let ((?x585 (+ ?x219 ?x230 ?x240 ?x250 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x68)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 64.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67 ?x68)) ?x543 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x128 (= (+ ?x35 (* (- 1) (* a d00)) ?x96 (* 2 (* y b00))) 0)))
 (and $x128 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= (+ ?x219 ?x230 ?x240 ?x250) 0.0)) (not (= ?x585 0.0)))))))))))))))))))))) :qid k!33))
 ))
 (let (($x389 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x302 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x311 (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302 (+ (to_real y) (* (/ 1.0 2.0) ?x62)))))
 (let ((?x294 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x317 (* ?x294 (+ (* (- (/ 1.0 16.0)) ?x311) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302))))))
 (let ((?x307 (+ (* (- (/ 1.0 16.0)) (* (to_real y) ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)))))
 (let (($x188 (or (not (= (* ?x294 ?x307) 0.0)) (not (= ?x317 0.0)))))
 (let ((?x455 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x217 (= ?x455 0)))
 (let ((?x328 (* d00 a)))
 (let ((?x299 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x328)))
 (and (= ?x299 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x217 $x188)))))))))))))) :qid k!33))
 ))
 (let ((?x211 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x543 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 (to_real y)))))
 (let ((?x68 (to_real y)))
 (let ((?x60 (to_real d00)))
 (let ((?x250 (* (/ 1.0 32.0) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67))))
 (let ((?x240 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67 ?x67))))
 (let ((?x230 (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x68))))
 (let ((?x219 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67 ?x67 ?x68))))
 (let ((?x585 (+ ?x219 ?x230 ?x240 ?x250 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x68)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x68)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 64.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67 ?x68)) ?x543 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x128 (= (+ ?x35 (* (- 1) (* a d00)) ?x96 (* 2 (* y b00))) 0)))
 (let (($x245 (and $x128 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= (+ ?x219 ?x230 ?x240 ?x250) 0.0)) (not (= ?x585 0.0))))))
 (let ((?x302 (+ ?x67 ?x56)))
 (let ((?x315 (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302 (+ ?x68 (* (/ 1.0 2.0) ?x62))))))
 (let ((?x294 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) (* (/ 1.0 2.0) (* ?x64 ?x62)))))
 (let (($x251 (= (* ?x294 (+ ?x315 (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302)))) 0.0)))
 (let ((?x307 (+ (* (- (/ 1.0 16.0)) (* ?x68 ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)))))
 (let (($x188 (or (not (= (* ?x294 ?x307) 0.0)) (not $x251))))
 (let ((?x455 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x217 (= ?x455 0)))
 (let ((?x328 (* d00 a)))
 (let (($x208 (= (+ (* 2 ?x95) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x328) 0)))
 (let (($x221 (and $x208 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x217 $x188)))
 (rewrite (= $x221 $x245)))))))))))))))))))))))))))))))))
 ))
 (let (($x187 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x302 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x311 (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302 (+ (to_real y) (* (/ 1.0 2.0) ?x62)))))
 (let ((?x294 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x317 (* ?x294 (+ (* (- (/ 1.0 16.0)) ?x311) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302))))))
 (let ((?x307 (+ (* (- (/ 1.0 16.0)) (* (to_real y) ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)))))
 (let (($x188 (or (not (= (* ?x294 ?x307) 0.0)) (not (= ?x317 0.0)))))
 (let ((?x455 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x217 (= ?x455 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x348 (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x348 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x217 $x188)))))))))))))))) :qid k!33))
 ))
 (let ((?x296 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x302 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x311 (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302 (+ (to_real y) (* (/ 1.0 2.0) ?x62)))))
 (let ((?x294 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x317 (* ?x294 (+ (* (- (/ 1.0 16.0)) ?x311) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302))))))
 (let ((?x307 (+ (* (- (/ 1.0 16.0)) (* (to_real y) ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)))))
 (let (($x188 (or (not (= (* ?x294 ?x307) 0.0)) (not (= ?x317 0.0)))))
 (let ((?x455 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x217 (= ?x455 0)))
 (let ((?x328 (* d00 a)))
 (let ((?x299 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x328)))
 (let (($x221 (and (= ?x299 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x217 $x188)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x586 (and (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) ?x328)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x217 $x188)))
 (rewrite (= $x586 $x221)))))))))))))))))))))
 ))
 (let (($x87 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x73 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x78 (to_real (+ a b))))
 (let ((?x43 (- 1)))
 (let ((?x59 (to_real ?x43)))
 (let ((?x81 (+ (* ?x59 ?x78 ?x78 ?x58 ?x63 ?x63 ?x63 (+ (to_real y) ?x63)) (* ?x78 ?x78 ?x58 ?x63 ?x63 ?x63))))
 (let ((?x66 (+ (* ?x59 ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x68 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x71 (+ (* ?x59 ?x67 ?x67 ?x58 ?x63 ?x63 ?x63 ?x68) (* ?x67 ?x67 ?x58 ?x63 ?x63 ?x63))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x71) ?x73)) (not (= (* ?x66 ?x81) ?x73)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x197 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x302 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x311 (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302 (+ (to_real y) (* (/ 1.0 2.0) ?x62)))))
 (let ((?x294 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x317 (* ?x294 (+ (* (- (/ 1.0 16.0)) ?x311) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x302 ?x302))))))
 (let ((?x307 (+ (* (- (/ 1.0 16.0)) (* (to_real y) ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x62 ?x56 ?x67 ?x67)))))
 (let (($x188 (or (not (= (* ?x294 ?x307) 0.0)) (not (= ?x317 0.0)))))
 (let ((?x455 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x217 (= ?x455 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x348 (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x586 (and $x348 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x217 $x188)))
 (let ((?x73 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x78 (to_real (+ a b))))
 (let ((?x43 (- 1)))
 (let ((?x59 (to_real ?x43)))
 (let ((?x81 (+ (* ?x59 ?x78 ?x78 ?x58 ?x63 ?x63 ?x63 (+ (to_real y) ?x63)) (* ?x78 ?x78 ?x58 ?x63 ?x63 ?x63))))
 (let ((?x66 (+ (* ?x59 ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x71 (+ (* ?x59 ?x67 ?x67 ?x58 ?x63 ?x63 ?x63 (to_real y)) (* ?x67 ?x67 ?x58 ?x63 ?x63 ?x63))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x86 (and $x41 (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x71) ?x73)) (not (= (* ?x66 ?x81) ?x73))))))
 (rewrite (= $x86 $x586))))))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x204 (mp (mp @x88 (quant-intro (proof-bind ?x197) (= $x87 $x187)) $x187) (rewrite (= $x187 $x187)) $x187)))
 (let ((@x526 (mp (mp @x204 (quant-intro (proof-bind ?x296) (= $x187 $x389)) $x389) (quant-intro (proof-bind ?x211) (= $x389 $x569)) $x569)))
 (let ((@x588 (mp (mp~ @x526 (sk (~ $x569 $x119)) $x119) (rewrite (= $x119 $x404)) $x404)))
 (let ((@x642 (mp (and-elim @x588 $x137) @x641 $x518)))
 (let ((@x138 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x342)) @x642 $x342)))
 (let (($x273 (<= ?x136 0)))
 (let ((@x643 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x273)) @x642 $x273)))
 (let ((@x575 (unit-resolution ((_ th-lemma arith) (or $x110 (not $x342) (not $x273))) @x643 @x138 (hypothesis (not $x110)) false)))
 (let ((@x429 (lemma @x575 $x110)))
 (let (($x112 (>= ?x467 0.0)))
 (let ((@x437 (unit-resolution ((_ th-lemma arith) (or $x112 (not $x342) (not $x273))) @x643 @x138 (hypothesis (not $x112)) false)))
 (let ((@x118 (lemma @x437 $x112)))
 (let ((@x216 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x545 (not $x110) (not $x112))) @x118 (or $x545 (not $x110)))))
 (let ((@x400 (mp (unit-resolution @x216 @x429 $x545) (commutativity (= $x545 $x459)) $x459)))
 (let ((@x653 (mp (unit-resolution (and-elim @x588 $x460) @x400 $x278) (monotonicity @x649 (= $x278 $x650)) $x650)))
 (let (($x178 (>= ?x422 0.0)))
 (let ((@x378 (unit-resolution ((_ th-lemma arith) (or (not $x110) (not $x112) $x178 (not $x342) (not $x273))) @x643 @x138 (hypothesis (not $x178)) @x429 @x118 false)))
 (let ((@x654 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x515 $x466 (not $x178))) (lemma @x378 $x178) @x653 $x466)))
 (unit-resolution ((_ th-lemma arith) (or $x473 (not $x342) (not $x273))) @x643 @x138 @x654 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       63
 :arith-eq-adapter                74
 :arith-bound-propagations-cheap  85
 :arith-bound-propagations-lp     20
 :arith-conflicts                 141
 :arith-diseq                     81
 :arith-gcd-calls                 10
 :arith-grobner-calls             6
 :arith-grobner-conflicts         4
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 30
 :arith-lower                     131
 :arith-make-feasible             99
 :arith-max-columns               65
 :arith-max-rows                  19
 :arith-nla-explanations          116
 :arith-nla-lemmas                139
 :arith-patches                   10
 :arith-patches-success           10
 :arith-propagations              85
 :arith-upper                     86
 :conflicts                       13
 :decisions                       285
 :del-clause                      311
 :final-checks                    42
 :max-memory                      6.61
 :memory                          3.14
 :mk-bool-var                     503
 :mk-clause                       511
 :num-allocs                      32598091
 :num-checks                      1
 :propagations                    300
 :rlimit-count                    8536
 :time                            0.09
 :total-time                      0.10)
