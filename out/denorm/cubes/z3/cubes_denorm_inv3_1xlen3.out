unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x608 (* n!0 k!2)))
 (let ((?x463 (* (- 3) k!2)))
 (let ((?x571 (* 2 n!0)))
 (let ((?x568 (* (- 3) c!3)))
 (let ((?x224 (+ 3 ?x568 ?x571 ?x463 (* n!0 m!1) ?x608)))
 (let (($x2717 (<= ?x224 0)))
 (let ((?x358 (* (- 2) n!0)))
 (let ((?x422 (* 3 c!3)))
 (let ((?x615 (+ ?x422 ?x358 k!2 (* (- 1) ?x608))))
 (let (($x598 (<= ?x615 1)))
 (let (($x471 (= ?x615 1)))
 (let ((?x572 (* (- 6) (* c!3 m!1 m!1 m!1))))
 (let ((?x530 (+ m!1 k!2)))
 (let ((?x356 (+ 6 m!1)))
 (let ((?x343 (+ 1 n!0)))
 (let ((?x386 (* (- 1) (* c!3 m!1 m!1 m!1 m!1))))
 (let ((?x362 (* (- 6) (* c!3 k!2 k!2 k!2))))
 (let ((?x229 (* (- 6) (* k!2 k!2 k!2 k!2))))
 (let ((?x357 (* n!0 n!0)))
 (let ((?x339 (* (- 1) ?x357)))
 (let ((?x187 (+ (- 1) (* (- 3) (* m!1 m!1 k!2 k!2 k!2)) (* (- 18) (* c!3 m!1 m!1 k!2)) (* (- 3) (* c!3 m!1 m!1 k!2 k!2)) (* (- 1) (* m!1 k!2 k!2 k!2 k!2)) (* (- 18) (* m!1 m!1 k!2 k!2)) (* (- 18) (* m!1 k!2 k!2 k!2)) (* (- 18) (* c!3 m!1 k!2 k!2)) ?x358 (* (- 6) (* m!1 m!1 m!1 k!2)) (* (- 1) (* m!1 m!1 m!1 m!1 k!2)) ?x339 ?x229 ?x362 (* (- 3) (* c!3 m!1 m!1 m!1 k!2)) ?x386 (* (- 3) (* m!1 m!1 m!1 k!2 k!2)) (* ?x343 ?x343 ?x343 ?x356 ?x356 ?x356 ?x530 ?x530 ?x530) (* (- 1) (* c!3 m!1 k!2 k!2 k!2)) ?x572)))
 (let ((?x244 (* ?x187 ?x224)))
 (let (($x671 (= ?x244 0)))
 (let (($x428 (not $x671)))
 (let ((?x554 (+ (* 3 n!0) (* 3 ?x357) (* (- 1) k!2))))
 (let (($x460 (= ?x554 (- 1))))
 (let ((?x191 (* k!2 k!2)))
 (let ((?x499 (+ ?x191 (* (- 18) c!3) (* 9 n!0) (* (- 5) k!2) (* (- 9) (* c!3 n!0)))))
 (let ((?x519 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x518 (= ?x519 (- 6))))
 (let (($x685 (and $x518 (= ?x499 (- 4)) $x471 $x460 $x428)))
 (let ((?x477 (+ k!2 m!1)))
 (let ((?x569 (+ (- 1) ?x358 ?x339 (* ?x343 ?x343 ?x343 ?x356 ?x356 ?x356 ?x477 ?x477 ?x477) (* (- 1) (* c!3 k!2 k!2 k!2 m!1)) (* (- 1) (* k!2 k!2 k!2 k!2 m!1)) (* (- 3) (* c!3 k!2 k!2 m!1 m!1)) (* (- 3) (* k!2 k!2 k!2 m!1 m!1)) (* (- 3) (* c!3 k!2 m!1 m!1 m!1)) (* (- 3) (* k!2 k!2 m!1 m!1 m!1)) ?x386 (* (- 1) (* k!2 m!1 m!1 m!1 m!1)) ?x362 ?x229 (* (- 18) (* c!3 k!2 k!2 m!1)) (* (- 18) (* k!2 k!2 k!2 m!1)) (* (- 18) (* c!3 k!2 m!1 m!1)) (* (- 18) (* k!2 k!2 m!1 m!1)) ?x572 (* (- 6) (* k!2 m!1 m!1 m!1)))))
 (let (($x641 (= (* ?x569 (+ 3 ?x568 ?x463 ?x571 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let ((?x595 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x191) (* 9 (* c!3 n!0)))))
 (let (($x465 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x595 4) (= (+ ?x422 k!2 ?x358 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x357)) 1) (not $x641))))
 (let (($x555 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x679 (* (- 6) (* k m m m))))
 (let ((?x676 (* (- 6) (* c m m m))))
 (let ((?x673 (* (- 18) (* k k m m))))
 (let ((?x670 (* (- 18) (* c k m m))))
 (let ((?x667 (* (- 18) (* k k k m))))
 (let ((?x664 (* (- 18) (* c k k m))))
 (let ((?x661 (* (- 6) (* k k k k))))
 (let ((?x658 (* (- 6) (* c k k k))))
 (let ((?x634 (* (- 1) (* k m m m m))))
 (let ((?x633 (* (- 1) (* c m m m m))))
 (let ((?x655 (* (- 3) (* k k m m m))))
 (let ((?x652 (* (- 3) (* c k m m m))))
 (let ((?x649 (* (- 3) (* k k k m m))))
 (let ((?x646 (* (- 3) (* c k k m m))))
 (let ((?x628 (* (- 1) (* k k k k m))))
 (let ((?x627 (* (- 1) (* c k k k m))))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x268 (* n n)))
 (let ((?x424 (* (- 1) ?x268)))
 (let ((?x261 (* (- 2) n)))
 (let ((?x365 (+ (- 1) ?x261 ?x424 ?x293 ?x627 ?x628 ?x646 ?x649 ?x652 ?x655 ?x633 ?x634 ?x658 ?x661 ?x664 ?x667 ?x670 ?x673 ?x676 ?x679)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k ?x261 (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x365 ?x408) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x170 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x423 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let (($x582 (not (= (* ?x217 ?x423) 0))))
 (let (($x464 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x403 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x403 $x464 $x582)))))))))))))))))) :qid k!34))
 ))
 (let ((?x564 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x679 (* (- 6) (* k m m m))))
 (let ((?x676 (* (- 6) (* c m m m))))
 (let ((?x673 (* (- 18) (* k k m m))))
 (let ((?x670 (* (- 18) (* c k m m))))
 (let ((?x667 (* (- 18) (* k k k m))))
 (let ((?x664 (* (- 18) (* c k k m))))
 (let ((?x661 (* (- 6) (* k k k k))))
 (let ((?x658 (* (- 6) (* c k k k))))
 (let ((?x634 (* (- 1) (* k m m m m))))
 (let ((?x633 (* (- 1) (* c m m m m))))
 (let ((?x655 (* (- 3) (* k k m m m))))
 (let ((?x652 (* (- 3) (* c k m m m))))
 (let ((?x649 (* (- 3) (* k k k m m))))
 (let ((?x646 (* (- 3) (* c k k m m))))
 (let ((?x628 (* (- 1) (* k k k k m))))
 (let ((?x627 (* (- 1) (* c k k k m))))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x268 (* n n)))
 (let ((?x424 (* (- 1) ?x268)))
 (let ((?x261 (* (- 2) n)))
 (let ((?x365 (+ (- 1) ?x261 ?x424 ?x293 ?x627 ?x628 ?x646 ?x649 ?x652 ?x655 ?x633 ?x634 ?x658 ?x661 ?x664 ?x667 ?x670 ?x673 ?x676 ?x679)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) ?x268)) 1)))
 (let (($x259 (= (+ (* 3 c) k ?x261 (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x350 (and $x123 $x207 $x259 $x297 (not (= (* ?x365 ?x408) 0)))))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let ((?x231 (* ?x217 (+ 3 ?x220 (* (- 4) k) (* ?x340 ?x71) (* (- 1) m) ?x59))))
 (let (($x582 (not (= ?x231 0))))
 (let (($x464 (= (+ (* 3 ?x268) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x286 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) (= (+ (* 3 c) (* (- 1) (* n k)) k ?x261) 1) $x464 $x582)))
 (rewrite (= $x286 $x350))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x583 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x423 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let (($x582 (not (= (* ?x217 ?x423) 0))))
 (let (($x464 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x272 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x272 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x464 $x582))))))))))))))) :qid k!34))
 ))
 (let ((?x418 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x423 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let (($x582 (not (= (* ?x217 ?x423) 0))))
 (let (($x464 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x403 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x286 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x403 $x464 $x582)))
 (let ((?x48 (* 9 n)))
 (let ((?x272 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x589 (and $x123 (= ?x272 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x464 $x582)))
 (rewrite (= $x589 $x286))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x84 (+ (- (* (- 1) ?x72 ?x72) (* (+ c k) ?x71 ?x71 ?x71 ?x80)) (* ?x71 ?x71 ?x71 ?x80 ?x80 ?x80 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x84) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x584 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x423 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x71 (+ k m)))
 (let ((?x445 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x293 (* ?x340 ?x340 ?x340 ?x445 ?x445 ?x445 ?x71 ?x71 ?x71)))
 (let ((?x217 (+ (* (- 1) (* ?x340 ?x340)) (* (- 1) (* ?x445 ?x71 ?x71 ?x71 (+ c k))) ?x293)))
 (let (($x582 (not (= (* ?x217 ?x423) 0))))
 (let (($x464 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x272 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x589 (and $x123 (= ?x272 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x464 $x582)))
 (let ((?x72 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x84 (+ (- (* (- 1) ?x72 ?x72) (* (+ c k) ?x71 ?x71 ?x71 ?x80)) (* ?x71 ?x71 ?x71 ?x80 ?x80 ?x80 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 (+ c k))) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x84) 0))))))
 (rewrite (= $x89 $x589)))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x154 (mp (mp @x91 (quant-intro (proof-bind ?x584) (= $x90 $x583)) $x583) (rewrite (= $x583 $x583)) $x583)))
 (let ((@x496 (mp (mp @x154 (quant-intro (proof-bind ?x418) (= $x583 $x170)) $x170) (quant-intro (proof-bind ?x564) (= $x170 $x555)) $x555)))
 (let ((@x622 (mp (mp~ @x496 (sk (~ $x555 $x465)) $x465) (rewrite (= $x465 $x685)) $x685)))
 (let ((@x640 (and-elim @x622 $x471)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x471) $x598)) @x640 $x598)))
 (let (($x599 (>= ?x615 1)))
 (let ((@x501 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x471) $x599)) @x640 $x599)))
 (let (($x378 (<= ?x519 (- 6))))
 (let ((@x683 (and-elim @x622 $x518)))
 (let ((@x461 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x378)) @x683 $x378)))
 (let (($x466 (>= ?x519 (- 6))))
 (let ((@x454 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x518) $x466)) @x683 $x466)))
 (let (($x600 (<= ?x554 (- 1))))
 (let ((@x639 (and-elim @x622 $x460)))
 (let ((@x333 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x460) $x600)) @x639 $x600)))
 (let (($x427 (>= ?x554 (- 1))))
 (let ((@x280 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x460) $x427)) @x639 $x427)))
 (let ((@x2626 ((_ th-lemma arith) (hypothesis (not $x2717)) @x454 @x461 @x454 @x461 @x280 @x333 @x454 @x461 @x501 @x274 false)))
 (let ((@x2772 (lemma @x2626 $x2717)))
 (let (($x3366 (>= ?x224 0)))
 (let ((@x3420 ((_ th-lemma arith) (hypothesis (not $x3366)) @x454 @x461 @x501 @x274 @x280 @x333 false)))
 (let ((@x3305 (lemma @x3420 $x3366)))
 (let (($x457 (not (>= ?x244 0))))
 (let (($x327 (<= ?x244 0)))
 (let ((@x3323 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x327)) (hypothesis $x3366) @x2772 false) (or (not $x3366) $x327))))
 (let ((@x2610 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x671 (not $x327) $x457)) (and-elim @x622 $x428) (or (not $x327) $x457))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x2610 (unit-resolution @x3323 @x3305 $x327) $x457) @x3305 @x2772 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 291
 :arith-assert-diseq        52
 :arith-assert-lower        6184
 :arith-assert-upper        4466
 :arith-bound-prop          269
 :arith-branch-var          90
 :arith-conflicts           243
 :arith-eq-adapter          16
 :arith-fixed-eqs           496
 :arith-gcd-tests           811
 :arith-gomory-cuts         67
 :arith-grobner             343
 :arith-ineq-splits         90
 :arith-max-min             27378
 :arith-nonlinear-bounds    871
 :arith-nonlinear-horner    4076
 :arith-num-rows            23
 :arith-offset-eqs          9
 :arith-patches             207
 :arith-patches_succ        28
 :arith-pivots              8658
 :arith-pseudo-nonlinear    777
 :arith-row-summations      62840
 :arith-tableau-max-columns 72
 :arith-tableau-max-rows    23
 :conflicts                 261
 :decisions                 1207
 :del-clause                1406
 :final-checks              819
 :max-memory                7.48
 :memory                    3.54
 :minimized-lits            23
 :mk-bool-var               1582
 :mk-clause                 2393
 :num-allocs                1342001667251.00
 :num-checks                1
 :propagations              3842
 :restarts                  2
 :rlimit-count              13993945
 :time                      131.10
 :total-time                131.09)
