unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x718 (+ m!1 (* (- 6) n!0))))
 (let (($x999 (<= ?x718 6)))
 (let (($x1100 (= ?x718 6)))
 (let ((?x1014 (+ c!3 k!2)))
 (let ((?x905 (+ 6 m!1)))
 (let ((?x766 (+ 1 n!0)))
 (let ((?x1363 (* ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x1014 ?x1014)))
 (let ((?x822 (+ m!1 k!2)))
 (let ((?x981 (+ (* 2 (* ?x766 ?x766 ?x905 ?x905 ?x905 ?x822 ?x822 ?x822 ?x1014)) (* (- 24) (* m!1 m!1 k!2 k!2)) (* (- 2) (* m!1 m!1 m!1 k!2 k!2)) (* ?x905 ?x905 ?x822 ?x822 ?x822 ?x1014) (* (- 1) (* ?x766 ?x905 ?x905 ?x822 ?x822 ?x822 ?x1014)) (* (- 72) (* m!1 k!2 k!2)) (* (- 12) (* m!1 m!1 m!1 c!3)) (* ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x822 ?x1014) (* (- 2) (* ?x766 ?x905 ?x905 ?x822 ?x822 ?x1014)) (* (- 1) (* ?x766 ?x905 ?x905 ?x905 ?x822 ?x822 ?x822 ?x822 ?x1014)) (* 3 (* ?x905 ?x905 ?x822 ?x822 ?x1014 ?x1014)) (* (- 1) (* ?x766 ?x766 ?x766 ?x905 ?x822 ?x822 ?x822 ?x1014 ?x1014 ?x1014)) (* (- 36) (* c!3 k!2 k!2)) (* (- 1) (* ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x1014)) (* (- 1) (* m!1 m!1 c!3 k!2 k!2)) (* (- 72) (* m!1 c!3 k!2)) (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x822 ?x822 ?x822 ?x1014 ?x1014 ?x1014) (* (- 12) (* m!1 c!3 k!2 k!2)) (* (- 1) (* m!1 m!1 m!1 m!1 k!2)) (* (- 12) (* m!1 k!2 k!2 k!2)) (* (- 24) (* m!1 m!1 c!3 k!2)) (* (- 2) (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x1014)) (* (- 36) (* k!2 k!2 k!2)) (* (- 1) (* m!1 m!1 m!1 m!1 c!3)) (* (- 3) (* ?x766 ?x766 ?x766 ?x905 ?x822 ?x822 ?x1014 ?x1014 ?x1014 ?x1014)) (* (- 36) (* m!1 m!1 k!2)) (* (- 36) (* m!1 m!1 c!3)) (* 2 (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x822 ?x822 ?x1014 ?x1014 ?x1014)) (* (- 3) (* ?x766 ?x905 ?x905 ?x905 ?x822 ?x822 ?x822 ?x1014 ?x1014)) (* ?x766 ?x905 ?x905 ?x905 ?x822 ?x822 ?x822 ?x1014) (* (- 2) (* m!1 m!1 m!1 c!3 k!2)) (* (- 1) (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x822 ?x1014)) (* ?x766 ?x766 ?x766 ?x905 ?x822 ?x822 ?x1014 ?x1014 ?x1014) (* (- 1) (* m!1 m!1 k!2 k!2 k!2)) (* (- 12) (* m!1 m!1 m!1 k!2)) (* ?x766 ?x766 ?x905 ?x905 ?x905 ?x822 ?x822 ?x822 ?x822 ?x1014) (* 3 ?x1363))))
 (let (($x977 (= ?x981 0)))
 (let (($x1026 (not $x977)))
 (let ((?x1007 (* (- 1) k!2)))
 (let ((?x205 (+ (* 3 (* n!0 n!0)) ?x1007 (* 3 n!0))))
 (let (($x934 (= ?x205 (- 1))))
 (let ((?x807 (* k!2 n!0)))
 (let ((?x894 (+ ?x807 (* (- 3) c!3) ?x1007 (* 2 n!0))))
 (let (($x735 (= ?x894 (- 1))))
 (let ((?x799 (* (- 1) (* k!2 k!2))))
 (let ((?x866 (* (- 9) n!0)))
 (let ((?x804 (* 5 k!2)))
 (let ((?x805 (* 18 c!3)))
 (let ((?x422 (* 9 (* c!3 n!0))))
 (let (($x1105 (and $x1100 (= (+ ?x422 ?x805 ?x804 ?x866 ?x799) 4) $x735 $x934 $x1026)))
 (let ((?x768 (+ k!2 m!1)))
 (let ((?x818 (* ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x1014)))
 (let ((?x806 (* (- 1) (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x768 ?x768 ?x768 ?x1014 ?x1014 ?x1014))))
 (let ((?x722 (+ (* 72 (* c!3 k!2 m!1)) (* 36 (* k!2 k!2 k!2)) ?x806 (* 36 (* c!3 k!2 k!2)) (* k!2 m!1 m!1 m!1 m!1) (* c!3 m!1 m!1 m!1 m!1) (* 2 (* k!2 k!2 m!1 m!1 m!1)) (* 2 (* c!3 k!2 m!1 m!1 m!1)) (* k!2 k!2 k!2 m!1 m!1) (* c!3 k!2 k!2 m!1 m!1) (* 72 (* k!2 k!2 m!1)) (* (- 3) ?x1363) (* 36 (* c!3 m!1 m!1)) (* 36 (* k!2 m!1 m!1)) (* 12 (* c!3 k!2 k!2 m!1)) (* 12 (* k!2 k!2 k!2 m!1)) (* 24 (* c!3 k!2 m!1 m!1)) (* 24 (* k!2 k!2 m!1 m!1)) (* 12 (* c!3 m!1 m!1 m!1)) (* 12 (* k!2 m!1 m!1 m!1)) (* ?x766 ?x766 ?x766 ?x905 ?x768 ?x768 ?x768 ?x1014 ?x1014 ?x1014) (* (- 1) (* ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x768 ?x1014)) (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x768 ?x1014) (* (- 1) (* ?x905 ?x905 ?x768 ?x768 ?x768 ?x1014)) (* (- 3) (* ?x905 ?x905 ?x768 ?x768 ?x1014 ?x1014)) (* 2 (* ?x766 ?x905 ?x905 ?x768 ?x768 ?x1014)) (* (- 1) (* ?x766 ?x766 ?x766 ?x905 ?x768 ?x768 ?x1014 ?x1014 ?x1014)) (* 3 (* ?x766 ?x766 ?x766 ?x905 ?x768 ?x768 ?x1014 ?x1014 ?x1014 ?x1014)) (* (- 1) (* ?x766 ?x766 ?x905 ?x905 ?x905 ?x768 ?x768 ?x768 ?x768 ?x1014)) (* (- 2) (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x768 ?x768 ?x1014 ?x1014 ?x1014)) ?x818 (* 2 (* ?x766 ?x766 ?x766 ?x766 ?x905 ?x905 ?x905 ?x1014)) (* ?x766 ?x905 ?x905 ?x905 ?x768 ?x768 ?x768 ?x768 ?x1014) (* (- 2) (* ?x766 ?x766 ?x905 ?x905 ?x905 ?x768 ?x768 ?x768 ?x1014)) (* (- 1) (* ?x766 ?x905 ?x905 ?x905 ?x768 ?x768 ?x768 ?x1014)) (* ?x766 ?x905 ?x905 ?x768 ?x768 ?x768 ?x1014) (* 3 (* ?x766 ?x905 ?x905 ?x905 ?x768 ?x768 ?x768 ?x1014 ?x1014)))))
 (let (($x757 (and $x1100 (= (+ ?x805 ?x804 ?x866 ?x799 ?x422) 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x807)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x722 0)))))
 (let (($x214 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x327 (+ 6 m)))
 (let ((?x708 (+ 1 n)))
 (let ((?x1184 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1160 (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1108 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1042 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)))
 (let ((?x709 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x560 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x366 (* c k k m m)))
 (let ((?x365 (* k k k m m)))
 (let ((?x360 (* c m m m m)))
 (let ((?x359 (* k m m m m)))
 (let ((?x352 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1161 (+ (* 72 (* c k m)) (* 36 (* k k k)) (* (- 1) ?x352) (* 36 (* c k k)) ?x359 ?x360 (* 2 (* k k m m m)) (* 2 (* c k m m m)) ?x365 ?x366 (* 72 (* k k m)) (* (- 3) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68 ?x68)) (* 36 (* c m m)) (* 36 (* k m m)) (* 12 (* c k k m)) (* 12 (* k k k m)) (* 24 (* c k m m)) (* 24 (* k k m m)) (* 12 (* c m m m)) (* 12 (* k m m m)) ?x560 (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)) ?x709 (* (- 1) (* ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 3) (* ?x327 ?x327 ?x69 ?x69 ?x68 ?x68)) (* 2 (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x68)) (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 3 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)) (* (- 2) (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x1042 (* 2 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) ?x1108 (* (- 2) (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 1) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) ?x1160 (* 3 ?x1184))))
 (let (($x319 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x281 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x232 (* (- 1) ?x49)))
 (let ((?x231 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x229 (= (+ ?x40 ?x44 ?x231 ?x232 (* 9 (* c n))) 4)))
 (let (($x145 (= (+ m (* (- 6) n)) 6)))
 (and $x145 $x229 $x281 $x319 (not (= ?x1161 0)))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x206 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x327 (+ 6 m)))
 (let ((?x708 (+ 1 n)))
 (let ((?x709 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x695 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x352 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1140 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1018 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x976 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x901 (* ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x334 (+ ?x901 (* (- 1) (* ?x327 ?x327 ?x69 ?x69 ?x68)) (* 3 (* ?x327 ?x327 ?x69 ?x69 ?x68 ?x68)) (* (- 2) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x68)) ?x976 (* (- 3) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)) ?x1018 (* 2 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 2) (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 1) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)) (* 2 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) ?x1140 (* (- 1) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 3) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x352 (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 3 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68 ?x68)) ?x695 (* (- 1) ?x709))))
 (let (($x899 (not (= ?x334 0))))
 (let (($x892 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x851 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x232 (* (- 1) ?x49)))
 (let ((?x231 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x145 (= (+ m (* (- 6) n)) 6)))
 (and $x145 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x231 ?x232) 4) $x851 $x892 $x899)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x1036 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x327 (+ 6 m)))
 (let ((?x708 (+ 1 n)))
 (let ((?x1184 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1160 (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1108 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1042 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)))
 (let ((?x709 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x560 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x366 (* c k k m m)))
 (let ((?x365 (* k k k m m)))
 (let ((?x360 (* c m m m m)))
 (let ((?x359 (* k m m m m)))
 (let ((?x352 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1161 (+ (* 72 (* c k m)) (* 36 (* k k k)) (* (- 1) ?x352) (* 36 (* c k k)) ?x359 ?x360 (* 2 (* k k m m m)) (* 2 (* c k m m m)) ?x365 ?x366 (* 72 (* k k m)) (* (- 3) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68 ?x68)) (* 36 (* c m m)) (* 36 (* k m m)) (* 12 (* c k k m)) (* 12 (* k k k m)) (* 24 (* c k m m)) (* 24 (* k k m m)) (* 12 (* c m m m)) (* 12 (* k m m m)) ?x560 (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)) ?x709 (* (- 1) (* ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 3) (* ?x327 ?x327 ?x69 ?x69 ?x68 ?x68)) (* 2 (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x68)) (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 3 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)) (* (- 2) (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x1042 (* 2 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) ?x1108 (* (- 2) (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 1) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) ?x1160 (* 3 ?x1184))))
 (let (($x319 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x281 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x232 (* (- 1) ?x49)))
 (let ((?x231 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x229 (= (+ ?x40 ?x44 ?x231 ?x232 (* 9 (* c n))) 4)))
 (let (($x145 (= (+ m (* (- 6) n)) 6)))
 (let (($x743 (and $x145 $x229 $x281 $x319 (not (= ?x1161 0)))))
 (let ((?x695 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x1140 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1018 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x976 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x901 (* ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x334 (+ ?x901 (* (- 1) (* ?x327 ?x327 ?x69 ?x69 ?x68)) (* 3 (* ?x327 ?x327 ?x69 ?x69 ?x68 ?x68)) (* (- 2) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x68)) ?x976 (* (- 3) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)) ?x1018 (* 2 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x1042) (* (- 2) (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 1) ?x1108) (* 2 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) ?x1140 (* (- 1) ?x1160) (* (- 3) ?x1184) ?x352 (* (- 1) ?x560) (* 3 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68 ?x68)) ?x695 (* (- 1) ?x709))))
 (let (($x899 (not (= ?x334 0))))
 (let (($x892 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x851 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x1206 (and $x145 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x231 ?x232) 4) $x851 $x892 $x899)))
 (rewrite (= $x1206 $x743)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x900 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x327 (+ 6 m)))
 (let ((?x708 (+ 1 n)))
 (let ((?x709 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x695 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x352 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1140 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1018 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x976 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x901 (* ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x334 (+ ?x901 (* (- 1) (* ?x327 ?x327 ?x69 ?x69 ?x68)) (* 3 (* ?x327 ?x327 ?x69 ?x69 ?x68 ?x68)) (* (- 2) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x68)) ?x976 (* (- 3) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)) ?x1018 (* 2 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 2) (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 1) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)) (* 2 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) ?x1140 (* (- 1) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 3) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x352 (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 3 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68 ?x68)) ?x695 (* (- 1) ?x709))))
 (let (($x899 (not (= ?x334 0))))
 (let (($x892 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x858 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x787 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x145 (= (+ m (* (- 6) n)) 6)))
 (and $x145 (= ?x787 (- 4)) $x858 $x892 $x899)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x212 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x327 (+ 6 m)))
 (let ((?x708 (+ 1 n)))
 (let ((?x709 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x695 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x352 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1140 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1018 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x976 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x901 (* ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x334 (+ ?x901 (* (- 1) (* ?x327 ?x327 ?x69 ?x69 ?x68)) (* 3 (* ?x327 ?x327 ?x69 ?x69 ?x68 ?x68)) (* (- 2) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x68)) ?x976 (* (- 3) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)) ?x1018 (* 2 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 2) (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 1) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)) (* 2 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) ?x1140 (* (- 1) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 3) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x352 (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 3 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68 ?x68)) ?x695 (* (- 1) ?x709))))
 (let (($x899 (not (= ?x334 0))))
 (let (($x892 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x851 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x232 (* (- 1) ?x49)))
 (let ((?x231 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x145 (= (+ m (* (- 6) n)) 6)))
 (let (($x1206 (and $x145 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x231 ?x232) 4) $x851 $x892 $x899)))
 (let (($x858 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x787 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x908 (and $x145 (= ?x787 (- 4)) $x858 $x892 $x899)))
 (rewrite (= $x908 $x1206)))))))))))))))))))))))))))))
 ))
 (let (($x112 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x75 (+ (- (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* ?x68 ?x69 ?x69 ?x70 ?x70)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x80 (+ (- ?x75 (* 2 ?x68 ?x69 ?x69 ?x70 ?x70 ?x76)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76))))
 (let ((?x82 (- ?x80 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76))))
 (let ((?x85 (+ ?x82 (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76) (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76 ?x76))))
 (let ((?x90 (- (- ?x85 (* ?x68 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76)) (* 2 ?x68 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76 ?x76))))
 (let ((?x94 (+ (- ?x90 (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76)) (* 2 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76))))
 (let ((?x98 (- (- ?x94 (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x76)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76))))
 (let ((?x100 (+ ?x98 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76 ?x76))))
 (let ((?x105 (+ (- ?x100 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76)) (* 3 ?x68 ?x68 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76) (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76))))
 (let (($x108 (= (- ?x105 (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76 ?x76)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x108)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x903 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x327 (+ 6 m)))
 (let ((?x708 (+ 1 n)))
 (let ((?x709 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x695 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x68)))
 (let ((?x352 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x1140 (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1018 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x976 (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x901 (* ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x334 (+ ?x901 (* (- 1) (* ?x327 ?x327 ?x69 ?x69 ?x68)) (* 3 (* ?x327 ?x327 ?x69 ?x69 ?x68 ?x68)) (* (- 2) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x68)) ?x976 (* (- 3) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68)) ?x1018 (* 2 (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 2) (* ?x708 ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68)) (* (- 1) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x69 ?x68)) (* 2 (* ?x708 ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) ?x1140 (* (- 1) (* ?x708 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68)) (* (- 3) (* ?x708 ?x327 ?x327 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68)) ?x352 (* (- 1) (* ?x708 ?x708 ?x708 ?x327 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)) (* 3 (* ?x708 ?x708 ?x708 ?x327 ?x327 ?x327 ?x68 ?x68)) ?x695 (* (- 1) ?x709))))
 (let (($x899 (not (= ?x334 0))))
 (let (($x892 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x858 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x787 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x145 (= (+ m (* (- 6) n)) 6)))
 (let (($x908 (and $x145 (= ?x787 (- 4)) $x858 $x892 $x899)))
 (let ((?x76 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x75 (+ (- (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70) (* ?x68 ?x69 ?x69 ?x70 ?x70)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70))))
 (let ((?x80 (+ (- ?x75 (* 2 ?x68 ?x69 ?x69 ?x70 ?x70 ?x76)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76))))
 (let ((?x82 (- ?x80 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76))))
 (let ((?x85 (+ ?x82 (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76) (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76 ?x76))))
 (let ((?x90 (- (- ?x85 (* ?x68 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76)) (* 2 ?x68 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76 ?x76))))
 (let ((?x94 (+ (- ?x90 (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76)) (* 2 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76))))
 (let ((?x98 (- (- ?x94 (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x76)) (* 3 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x76))))
 (let ((?x100 (+ ?x98 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76 ?x76))))
 (let ((?x105 (+ (- ?x100 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x76 ?x76 ?x76)) (* 3 ?x68 ?x68 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76) (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76))))
 (let (($x108 (= (- ?x105 (* ?x68 ?x69 ?x70 ?x70 ?x70 ?x76 ?x76 ?x76 ?x76)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x111 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x108)))))
 (rewrite (= $x111 $x908)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x113 (asserted $x112)))
 (let ((@x553 (mp (mp @x113 (quant-intro (proof-bind ?x903) (= $x112 $x900)) $x900) (rewrite (= $x900 $x900)) $x900)))
 (let ((@x1092 (mp (mp @x553 (quant-intro (proof-bind ?x212) (= $x900 $x206)) $x206) (quant-intro (proof-bind ?x1036) (= $x206 $x214)) $x214)))
 (let ((@x1038 (mp (mp~ @x1092 (sk (~ $x214 $x757)) $x757) (rewrite (= $x757 $x1105)) $x1105)))
 (let ((@x1028 (and-elim @x1038 $x1100)))
 (let ((@x1030 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1100) $x999)) @x1028 $x999)))
 (let (($x733 (>= ?x718 6)))
 (let ((@x920 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1100) $x733)) @x1028 $x733)))
 (let (($x1187 (<= ?x205 (- 1))))
 (let ((@x199 (and-elim @x1038 $x934)))
 (let ((@x732 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x934) $x1187)) @x199 $x1187)))
 (let (($x1202 (>= ?x205 (- 1))))
 (let ((@x1067 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x934) $x1202)) @x199 $x1202)))
 (let (($x1190 (<= ?x894 (- 1))))
 (let ((@x966 (and-elim @x1038 $x735)))
 (let ((@x132 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x735) $x1190)) @x966 $x1190)))
 (let (($x963 (>= ?x894 (- 1))))
 (let ((@x830 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x735) $x963)) @x966 $x963)))
 (let (($x1016 (not (<= ?x981 0))))
 (let (($x978 (>= ?x981 0)))
 (let ((@x1094 ((_ th-lemma arith) (hypothesis (not $x978)) @x1067 @x732 @x1067 @x732 @x830 @x132 @x1067 @x732 @x920 @x1030 @x1067 @x732 @x920 @x1030 @x920 @x1030 false)))
 (let ((@x913 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x977 $x1016 (not $x978))) (and-elim @x1038 $x1026) (or $x1016 (not $x978)))))
 ((_ th-lemma arith) (unit-resolution @x913 (lemma @x1094 $x978) $x1016) @x1067 @x732 @x1067 @x732 @x830 @x132 @x1067 @x732 @x920 @x1030 @x1067 @x732 @x920 @x1030 @x920 @x1030 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        15
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             481
 :arith-nonlinear-bounds    9
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 71
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.92
 :memory                    3.32
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1953177
 :num-checks                1
 :propagations              11
 :rlimit-count              17682
 :time                      0.02
 :total-time                0.03)
