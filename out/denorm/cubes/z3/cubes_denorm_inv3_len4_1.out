unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x292 (* (- 3) k!2)))
 (let ((?x389 (* 2 n!0)))
 (let ((?x293 (* n!0 k!2)))
 (let ((?x241 (* (- 3) c!3)))
 (let ((?x273 (* m!1 n!0)))
 (let ((?x246 (+ 3 ?x273 ?x241 ?x293 ?x389 ?x292)))
 (let (($x130 (<= ?x246 0)))
 (let ((?x222 (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2))))
 (let (($x483 (<= ?x222 (- 1))))
 (let (($x243 (= ?x222 (- 1))))
 (let ((?x340 (+ c!3 k!2)))
 (let ((?x311 (+ m!1 k!2)))
 (let ((?x173 (+ 6 m!1)))
 (let ((?x373 (+ 1 n!0)))
 (let ((?x180 (* 36 k!2)))
 (let ((?x277 (* m!1 m!1 m!1 n!0)))
 (let ((?x282 (* 36 ?x273)))
 (let ((?x154 (* 12 (* m!1 m!1 n!0))))
 (let ((?x226 (* m!1 m!1 m!1)))
 (let ((?x231 (* 36 m!1)))
 (let ((?x324 (* 12 (* m!1 m!1))))
 (let ((?x132 (+ ?x324 ?x231 ?x226 ?x154 ?x282 ?x277 (* (- 1) (* ?x373 ?x373 ?x373 ?x173 ?x311 ?x311 ?x311 ?x340 ?x340)) (* 36 ?x293) (* ?x373 ?x373 ?x373 ?x173 ?x173 ?x173 ?x311 ?x311 ?x340) ?x180 (* m!1 m!1 n!0 k!2) (* 12 (* m!1 n!0 k!2)) (* m!1 m!1 k!2) (* 12 (* m!1 k!2)) (* (- 1) (* ?x373 ?x173 ?x173 ?x311 ?x311 ?x340 ?x340)))))
 (let ((?x219 (* ?x132 ?x246)))
 (let (($x129 (= ?x219 0)))
 (let (($x403 (not $x129)))
 (let ((?x462 (* (- 2) n!0)))
 (let ((?x381 (* 3 c!3)))
 (let ((?x489 (+ ?x381 (* (- 1) ?x293) ?x462 k!2)))
 (let (($x152 (= ?x489 1)))
 (let ((?x175 (* (- 1) (* k!2 k!2))))
 (let ((?x422 (* 5 k!2)))
 (let ((?x336 (* (- 9) n!0)))
 (let ((?x439 (* 18 c!3)))
 (let ((?x103 (* 9 (* c!3 n!0))))
 (let ((?x287 (+ m!1 (* (- 6) n!0))))
 (let (($x274 (= ?x287 6)))
 (let (($x265 (and $x274 (= (+ ?x103 ?x439 ?x336 ?x422 ?x175) 4) $x152 $x243 $x403)))
 (let ((?x251 (* (- 1) (* ?x373 ?x173 ?x173 (+ k!2 m!1) (+ k!2 m!1) ?x340 ?x340))))
 (let ((?x384 (+ k!2 m!1)))
 (let ((?x343 (+ ?x180 ?x231 (* 36 (* k!2 n!0)) (* ?x373 ?x373 ?x373 ?x173 ?x173 ?x173 ?x384 ?x384 ?x340) ?x282 ?x154 (* (- 1) (* ?x373 ?x373 ?x373 ?x173 ?x384 ?x384 ?x384 ?x340 ?x340)) (* k!2 m!1 m!1 n!0) ?x277 (* 12 (* k!2 m!1)) ?x324 (* k!2 m!1 m!1) ?x226 (* 12 (* k!2 m!1 n!0)) ?x251)))
 (let (($x223 (not (= (* ?x343 (+ 3 ?x241 ?x292 ?x389 (* k!2 n!0) ?x273)) 0))))
 (let (($x337 (and $x274 (= (+ ?x439 ?x422 ?x336 ?x175 ?x103) 4) (= (+ ?x381 k!2 ?x462 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) $x223)))
 (let (($x423 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x349 (* m n)))
 (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 ?x349)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x310 (* (- 1) (* ?x341 ?x414 ?x414 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x426 (* 12 (* k m n))))
 (let ((?x503 (* m m m)))
 (let ((?x500 (* k m m)))
 (let ((?x427 (* 12 (* m m))))
 (let ((?x428 (* 12 (* k m))))
 (let ((?x475 (* m m m n)))
 (let ((?x474 (* k m m n)))
 (let ((?x459 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x523 (* 12 (* m m n))))
 (let ((?x515 (* 36 ?x349)))
 (let ((?x126 (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x414 ?x71 ?x71 ?x68)))
 (let ((?x506 (* 36 ?x55)))
 (let ((?x485 (* 36 m)))
 (let ((?x482 (* 36 k)))
 (let ((?x182 (+ ?x482 ?x485 ?x506 ?x126 ?x515 ?x523 ?x459 ?x474 ?x475 ?x428 ?x427 ?x500 ?x503 ?x426 ?x310)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* ?x182 ?x409) 0))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x104 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x101 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x310 (* (- 1) (* ?x341 ?x414 ?x414 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x459 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x126 (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x414 ?x71 ?x71 ?x68)))
 (let (($x302 (not (= (* (+ ?x126 ?x459 ?x310 (* ?x341 ?x414 ?x414 ?x71)) ?x101) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x192 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x192 $x291 $x302)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x120 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x349 (* m n)))
 (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 ?x349)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x310 (* (- 1) (* ?x341 ?x414 ?x414 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x426 (* 12 (* k m n))))
 (let ((?x503 (* m m m)))
 (let ((?x500 (* k m m)))
 (let ((?x427 (* 12 (* m m))))
 (let ((?x428 (* 12 (* k m))))
 (let ((?x475 (* m m m n)))
 (let ((?x474 (* k m m n)))
 (let ((?x459 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x523 (* 12 (* m m n))))
 (let ((?x515 (* 36 ?x349)))
 (let ((?x126 (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x414 ?x71 ?x71 ?x68)))
 (let ((?x506 (* 36 ?x55)))
 (let ((?x485 (* 36 m)))
 (let ((?x482 (* 36 k)))
 (let ((?x182 (+ ?x482 ?x485 ?x506 ?x126 ?x515 ?x523 ?x459 ?x474 ?x475 ?x428 ?x427 ?x500 ?x503 ?x426 ?x310)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x295 (and $x124 $x208 $x260 $x298 (not (= (* ?x182 ?x409) 0)))))
 (let ((?x376 (* (+ ?x126 ?x459 ?x310 (* ?x341 ?x414 ?x414 ?x71)) (+ 3 ?x221 (* (- 4) k) (* ?x341 ?x71) (* (- 1) m) ?x59))))
 (let (($x302 (not (= ?x376 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x192 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x380 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x192 $x291 $x302)))
 (rewrite (= $x380 $x295)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x303 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x101 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x310 (* (- 1) (* ?x341 ?x414 ?x414 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x459 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x126 (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x414 ?x71 ?x71 ?x68)))
 (let (($x302 (not (= (* (+ ?x126 ?x459 ?x310 (* ?x341 ?x414 ?x414 ?x71)) ?x101) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x528 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x528 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x291 $x302))))))))))))))))) :qid k!34))
 ))
 (let ((?x106 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x101 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x310 (* (- 1) (* ?x341 ?x414 ?x414 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x459 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x126 (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x414 ?x71 ?x71 ?x68)))
 (let (($x302 (not (= (* (+ ?x126 ?x459 ?x310 (* ?x341 ?x414 ?x414 ?x71)) ?x101) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x192 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x380 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x192 $x291 $x302)))
 (let ((?x48 (* 9 n)))
 (let ((?x528 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x229 (and $x124 (= ?x528 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x291 $x302)))
 (rewrite (= $x229 $x380))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x82 (- (* ?x68 ?x71 ?x71 ?x78 ?x78 ?x78 ?x72 ?x72 ?x72) (* ?x68 ?x68 ?x71 ?x71 ?x71 ?x78 ?x72 ?x72 ?x72))))
 (let ((?x85 (+ (- ?x82 (* ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72)) (* ?x71 ?x78 ?x78 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x85) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x305 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x101 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x414 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x310 (* (- 1) (* ?x341 ?x414 ?x414 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x459 (* (- 1) (* ?x341 ?x341 ?x341 ?x414 ?x71 ?x71 ?x71 ?x68 ?x68))))
 (let ((?x126 (* ?x341 ?x341 ?x341 ?x414 ?x414 ?x414 ?x71 ?x71 ?x68)))
 (let (($x302 (not (= (* (+ ?x126 ?x459 ?x310 (* ?x341 ?x414 ?x414 ?x71)) ?x101) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x528 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x229 (and $x124 (= ?x528 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x291 $x302)))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x82 (- (* ?x68 ?x71 ?x71 ?x78 ?x78 ?x78 ?x72 ?x72 ?x72) (* ?x68 ?x68 ?x71 ?x71 ?x71 ?x78 ?x72 ?x72 ?x72))))
 (let ((?x85 (+ (- ?x82 (* ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72)) (* ?x71 ?x78 ?x78 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x85) 0))))))
 (rewrite (= $x90 $x229))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x205 (mp (mp @x92 (quant-intro (proof-bind ?x305) (= $x91 $x303)) $x303) (rewrite (= $x303 $x303)) $x303)))
 (let ((@x386 (mp (mp @x205 (quant-intro (proof-bind ?x106) (= $x303 $x104)) $x104) (quant-intro (proof-bind ?x120) (= $x104 $x423)) $x423)))
 (let ((@x473 (mp (mp~ @x386 (sk (~ $x423 $x337)) $x337) (rewrite (= $x337 $x265)) $x265)))
 (let ((@x494 (and-elim @x473 $x243)))
 (let ((@x467 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x243) $x483)) @x494 $x483)))
 (let (($x453 (>= ?x222 (- 1))))
 (let ((@x519 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x243) $x453)) @x494 $x453)))
 (let (($x452 (<= ?x489 1)))
 (let ((@x280 (and-elim @x473 $x152)))
 (let ((@x266 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x152) $x452)) @x280 $x452)))
 (let (($x484 (>= ?x489 1)))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x152) $x484)) @x280 $x484)))
 (let (($x486 (<= ?x287 6)))
 (let ((@x245 (and-elim @x473 $x274)))
 (let ((@x140 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x486)) @x245 $x486)))
 (let (($x461 (>= ?x287 6)))
 (let ((@x178 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x461)) @x245 $x461)))
 (let ((@x433 ((_ th-lemma arith) (hypothesis (not $x130)) @x178 @x140 @x177 @x266 @x519 @x467 false)))
 (let ((@x133 (lemma @x433 $x130)))
 (let (($x1792 (<= ?x246 (- 1))))
 (let (($x1809 (not $x1792)))
 (let ((@x1785 ((_ th-lemma arith) (hypothesis $x1792) @x178 @x140 @x178 @x140 @x519 @x467 @x178 @x140 @x177 @x266 false)))
 (let ((@x1799 (lemma @x1785 $x1809)))
 (let (($x1610 (not (>= ?x219 0))))
 (let (($x331 (<= ?x219 0)))
 (let ((@x1814 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x331)) (hypothesis $x1809) @x133 false) (or $x1792 $x331))))
 (let ((@x1800 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x129 (not $x331) $x1610)) (and-elim @x473 $x403) (or (not $x331) $x1610))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x1800 (unit-resolution @x1814 @x1799 $x331) $x1610) @x1799 @x133 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 131
 :arith-assert-diseq        7
 :arith-assert-lower        945
 :arith-assert-upper        875
 :arith-bound-prop          6
 :arith-branch-var          35
 :arith-conflicts           81
 :arith-eq-adapter          10
 :arith-fixed-eqs           171
 :arith-gcd-tests           358
 :arith-gomory-cuts         27
 :arith-grobner             119
 :arith-ineq-splits         35
 :arith-max-min             8861
 :arith-nonlinear-bounds    196
 :arith-nonlinear-horner    1380
 :arith-num-rows            21
 :arith-offset-eqs          1
 :arith-patches             78
 :arith-patches_succ        8
 :arith-pivots              3278
 :arith-pseudo-nonlinear    300
 :arith-row-summations      18593
 :arith-tableau-max-columns 65
 :arith-tableau-max-rows    21
 :conflicts                 88
 :decisions                 267
 :del-clause                172
 :final-checks              291
 :max-memory                4.68
 :memory                    3.29
 :minimized-lits            9
 :mk-bool-var               436
 :mk-clause                 368
 :num-allocs                253794595
 :num-checks                1
 :propagations              358
 :rlimit-count              2704503
 :time                      1.01
 :total-time                1.02)
