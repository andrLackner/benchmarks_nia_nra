unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x103 (* 2 x!0)))
 (let ((?x156 (* (- 1) r!1)))
 (let ((?x268 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x109 (+ r00 ?x85 ?x101 ?x268 ?x156 ?x103)))
 (let (($x177 (<= ?x109 0)))
 (let (($x293 (= ?x109 0)))
 (let ((?x283 (* 3 (* r!1 r!1 r!1))))
 (let ((?x97 (* 2 ?x268)))
 (let ((?x255 (+ ?x156 x!0)))
 (let ((?x157 (+ 1 r!1)))
 (let ((?x289 (* (- 1) (* ?x157 ?x157 ?x157 ?x255 ?x255 ?x255))))
 (let ((?x239 (* r!1 r!1 r!1 r!1)))
 (let ((?x74 (* (- 2) (* r!1 x!0))))
 (let ((?x269 (* (- 3) (* r!1 r!1 x!0))))
 (let ((?x158 (* (- 1) (* r!1 r!1 r!1 x!0))))
 (let ((?x126 (* (+ ?x158 ?x269 ?x74 ?x239 ?x289 ?x97 ?x283) ?x109)))
 (let (($x152 (= ?x126 0)))
 (let (($x95 (not $x152)))
 (let (($x144 (and $x293 $x95)))
 (let ((?x257 (* (+ ?x97 ?x283 ?x239 ?x269 ?x158 ?x74 ?x289) (+ ?x156 ?x103 r00 ?x268 ?x85 ?x101))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x102 (and (= (+ r!1 (* (- 2) x!0) ?x116 (* (- 1) ?x268) ?x35 ?x36) 0) (not (= ?x257 0)))))
 (let (($x277 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x172 (+ ?x64 x)))
 (let ((?x124 (+ 1 r)))
 (let ((?x358 (* (- 1) (* ?x124 ?x124 ?x124 ?x172 ?x172 ?x172))))
 (let ((?x245 (* (- 1) (* r r r x))))
 (let ((?x206 (+ (* 2 ?x30) (* 3 (* r r r)) (* r r r r) (* (- 3) (* r r x)) ?x245 (* (- 2) (* r x)) ?x358)))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let ((?x115 (* (- 2) x)))
 (let (($x119 (= (+ r ?x115 ?x116 ?x117 ?x35 ?x36) 0)))
 (and $x119 (not (= (* ?x206 ?x107) 0)))))))))))))))))))) :qid k!26))
 ))
 (let (($x258 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x249 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x251 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x99 (+ (* (- 1) (* ?x124 ?x124 ?x124 ?x251)) (* ?x124 ?x251) (* (- 1) (* ?x124 ?x124 ?x124 ?x251 ?x251 ?x251)))))
 (let (($x139 (not (= (* ?x99 ?x249) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x139)))))))))))))))) :qid k!26))
 ))
 (let ((?x175 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x172 (+ ?x64 x)))
 (let ((?x124 (+ 1 r)))
 (let ((?x358 (* (- 1) (* ?x124 ?x124 ?x124 ?x172 ?x172 ?x172))))
 (let ((?x245 (* (- 1) (* r r r x))))
 (let ((?x206 (+ (* 2 ?x30) (* 3 (* r r r)) (* r r r r) (* (- 3) (* r r x)) ?x245 (* (- 2) (* r x)) ?x358)))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let ((?x115 (* (- 2) x)))
 (let (($x119 (= (+ r ?x115 ?x116 ?x117 ?x35 ?x36) 0)))
 (let (($x196 (and $x119 (not (= (* ?x206 ?x107) 0)))))
 (let ((?x73 (* (- 1) (* ?x124 ?x124 ?x124 (+ x ?x64) (+ x ?x64) (+ x ?x64)))))
 (let ((?x99 (+ (* (- 1) (* ?x124 ?x124 ?x124 (+ x ?x64))) (* ?x124 (+ x ?x64)) ?x73)))
 (let ((?x112 (* ?x99 (+ (- 1) (* (- 3) r) r00 (* ?x124 ?x124) ?x32 ?x85 ?x101))))
 (let (($x139 (not (= ?x112 0))))
 (let (($x186 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x139)))
 (rewrite (= $x186 $x196))))))))))))))))))))))))))
 ))
 (let (($x276 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x249 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x251 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x99 (+ (* (- 1) (* ?x124 ?x124 ?x124 ?x251)) (* ?x124 ?x251) (* (- 1) (* ?x124 ?x124 ?x124 ?x251 ?x251 ?x251)))))
 (let (($x139 (not (= (* ?x99 ?x249) 0))))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x139))))))))))) :qid k!26))
 ))
 (let ((?x70 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x249 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x251 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x99 (+ (* (- 1) (* ?x124 ?x124 ?x124 ?x251)) (* ?x124 ?x251) (* (- 1) (* ?x124 ?x124 ?x124 ?x251 ?x251 ?x251)))))
 (let (($x139 (not (= (* ?x99 ?x249) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x116 (* (- 1) r00)))
 (let (($x186 (and (= (+ r ?x116 ?x117 ?x115 ?x35 ?x36) 0) $x139)))
 (let (($x357 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) $x139)))
 (rewrite (= $x357 $x186))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x53 (- (+ (* (- 1) ?x41 ?x41 ?x41 ?x44) (* ?x41 ?x44)) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* ?x48 ?x53) 0))))))))))) :qid k!26))
 ))
 (let ((?x238 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x249 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x251 (+ x ?x64)))
 (let ((?x124 (+ 1 r)))
 (let ((?x99 (+ (* (- 1) (* ?x124 ?x124 ?x124 ?x251)) (* ?x124 ?x251) (* (- 1) (* ?x124 ?x124 ?x124 ?x251 ?x251 ?x251)))))
 (let (($x139 (not (= (* ?x99 ?x249) 0))))
 (let (($x357 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) $x139)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x53 (- (+ (* (- 1) ?x41 ?x41 ?x41 ?x44) (* ?x41 ?x44)) (* ?x41 ?x41 ?x41 ?x44 ?x44 ?x44))))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= (* ?x48 ?x53) 0))))))
 (rewrite (= $x58 $x357)))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x275 (mp (mp @x60 (quant-intro (proof-bind ?x238) (= $x59 $x276)) $x276) (rewrite (= $x276 $x276)) $x276)))
 (let ((@x155 (mp (mp @x275 (quant-intro (proof-bind ?x70) (= $x276 $x258)) $x258) (quant-intro (proof-bind ?x175) (= $x258 $x277)) $x277)))
 (let ((@x153 (mp (mp~ @x155 (sk (~ $x277 $x102)) $x102) (rewrite (= $x102 $x144)) $x144)))
 (let ((@x94 (and-elim @x153 $x293)))
 (let ((@x188 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x293) $x177)) @x94 $x177)))
 (let (($x178 (>= ?x109 0)))
 (let ((@x193 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x293) $x178)) @x94 $x178)))
 (let (($x131 (not (>= ?x126 0))))
 (let (($x179 (<= ?x126 0)))
 (let ((@x262 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x152 (not $x179) $x131)) (and-elim @x153 $x95) (or (not $x179) $x131))))
 (let ((@x263 (unit-resolution @x262 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x179)) @x193 @x188 false) $x179) $x131)))
 ((_ th-lemma arith farkas 1 1 1) @x263 @x193 @x188 false))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            4
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.47
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1048570
 :num-checks                1
 :propagations              4
 :rlimit-count              1333
 :time                      0.01
 :total-time                0.01)
