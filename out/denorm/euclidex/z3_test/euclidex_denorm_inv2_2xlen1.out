unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(declare-fun a!4 () Int)
(declare-fun s!0 () Int)
(declare-fun q!3 () Int)
(declare-fun p!5 () Int)
(proof
(let ((?x284 (* r!1 b!2)))
 (let ((?x122 (* s00 a00)))
 (let ((?x280 (+ ?x122 (* (- 1) (* r00 b00)) (* (- 1) (* s!0 a!4)) ?x284)))
 (let (($x184 (>= ?x280 0)))
 (let (($x214 (= ?x280 0)))
 (let ((?x221 (* s!0 a!4)))
 (let ((?x140 (* r00 b00)))
 (let ((?x129 (* (- 1) ?x122)))
 (let ((?x293 (+ ?x129 ?x140 ?x221 (* (- 1) ?x284))))
 (let ((?x527 (* (- 1) q!3)))
 (let ((?x669 (+ ?x527 p!5)))
 (let ((?x216 (* (- 1) b!2)))
 (let ((?x672 (+ ?x216 a!4)))
 (let ((?x212 (* (- 1) s!0)))
 (let ((?x676 (+ ?x212 r!1)))
 (let ((?x666 (* ?x676 ?x676 ?x672 ?x672 ?x672 ?x669 ?x669 ?x669 ?x669 ?x293 s!0 s!0 s!0 b!2 b!2 b!2 b!2 b!2 q!3 q!3 q!3 q!3 q!3)))
 (let (($x664 (= ?x666 0)))
 (let ((?x295 (* (- 1) p!5)))
 (let ((?x625 (+ q!3 ?x295)))
 (let ((?x202 (* (- 1) a!4)))
 (let ((?x629 (+ b!2 ?x202)))
 (let ((?x220 (* (- 1) r!1)))
 (let ((?x499 (+ s!0 ?x220)))
 (let ((?x623 (* ?x499 ?x499 ?x499 ?x629 ?x629 ?x629 ?x629 ?x629 ?x625 ?x625 ?x625 ?x625 ?x625 ?x293 r!1 r!1 a!4 a!4 a!4 p!5 p!5 p!5 p!5)))
 (let (($x609 (= ?x623 0)))
 (let (($x611 (not $x609)))
 (let (($x690 (or $x611 (not $x664))))
 (let ((?x608 (+ (* q00 r00 b!2) (* (- 1) (* r00 b00 q!3)) (* (- 1) (* p00 s00 b!2)) (* p00 b00 s!0) (* (- 1) (* q00 a00 s!0)) (* s00 a00 q!3))))
 (let ((?x624 (+ (* p00 s00 a!4) (* q00 a00 r!1) (* (- 1) (* s00 a00 p!5)) (* (- 1) (* p00 b00 r!1)) (* r00 b00 p!5) (* (- 1) (* q00 r00 a!4)))))
 (let ((?x128 (* q00 a00)))
 (let ((?x507 (+ ?x128 (* (- 1) (* p00 b00)) (* (- 1) (* q!3 a!4)) (* b!2 p!5))))
 (let ((?x37 (* p00 s00)))
 (let ((?x543 (+ ?x37 (* (- 1) (* q00 r00)) (* (- 1) (* s!0 p!5)) (* r!1 q!3))))
 (let (($x691 (and (= ?x543 0) $x214 (= ?x507 0) (= ?x624 0) (= ?x608 0) $x690)))
 (let ((?x263 (+ (* a!4 s!0) (* (- 1) (* b!2 r!1)) ?x129 ?x140)))
 (let ((?x142 (+ p!5 ?x527)))
 (let ((?x270 (+ a!4 ?x216)))
 (let ((?x215 (+ r!1 ?x212)))
 (let ((?x210 (* ?x215 ?x215 ?x270 ?x270 ?x270 ?x142 ?x142 ?x142 ?x142 ?x263 s!0 s!0 s!0 b!2 b!2 b!2 b!2 b!2 q!3 q!3 q!3 q!3 q!3)))
 (let ((?x191 (+ ?x295 q!3)))
 (let ((?x331 (+ ?x202 b!2)))
 (let ((?x231 (+ ?x220 s!0)))
 (let ((?x193 (* ?x231 ?x231 ?x231 ?x331 ?x331 ?x331 ?x331 ?x331 ?x191 ?x191 ?x191 ?x191 ?x191 ?x263 r!1 r!1 a!4 a!4 a!4 p!5 p!5 p!5 p!5)))
 (let ((?x304 (+ (* b!2 q00 r00) (* (- 1) (* b!2 p00 s00)) (* s!0 p00 b00) (* (- 1) (* q!3 r00 b00)) (* q!3 s00 a00) (* (- 1) (* s!0 q00 a00)))))
 (let ((?x318 (+ (* a!4 p00 s00) (* (- 1) (* a!4 q00 r00)) (* p!5 r00 b00) (* (- 1) (* r!1 p00 b00)) (* (- 1) (* p!5 s00 a00)) (* r!1 q00 a00))))
 (let ((?x133 (* p00 b00)))
 (let ((?x174 (* (- 1) ?x128)))
 (let ((?x41 (* q00 r00)))
 (let ((?x131 (* (- 1) ?x37)))
 (let (($x545 (and (= (+ (* p!5 s!0) ?x131 ?x41 (* (- 1) (* q!3 r!1))) 0) (= ?x263 0) (= (+ (* a!4 q!3) ?x174 ?x133 (* (- 1) (* p!5 b!2))) 0) (= ?x318 0) (= ?x304 0) (or (not (= ?x193 0)) (not (= ?x210 0))))))
 (let (($x227 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x140 (* r00 b00)))
 (let ((?x122 (* s00 a00)))
 (let ((?x129 (* (- 1) ?x122)))
 (let ((?x117 (* (- 1) (* b r))))
 (let ((?x49 (* a s)))
 (let ((?x147 (+ ?x49 ?x117 ?x129 ?x140)))
 (let ((?x328 (+ p (* (- 1) q))))
 (let ((?x291 (+ a (* (- 1) b))))
 (let ((?x252 (* (- 1) s)))
 (let ((?x254 (+ r ?x252)))
 (let ((?x489 (* ?x254 ?x254 ?x291 ?x291 ?x291 ?x328 ?x328 ?x328 ?x328 ?x147 s s s b b b b b q q q q q)))
 (let ((?x528 (* (- 1) p)))
 (let ((?x524 (+ ?x528 q)))
 (let ((?x255 (* (- 1) a)))
 (let ((?x267 (+ ?x255 b)))
 (let ((?x338 (* (- 1) r)))
 (let ((?x568 (+ ?x338 s)))
 (let ((?x553 (* ?x568 ?x568 ?x568 ?x267 ?x267 ?x267 ?x267 ?x267 ?x524 ?x524 ?x524 ?x524 ?x524 ?x147 r r a a a p p p p)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x306 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x311 (= ?x306 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x242 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x243 (= ?x242 0)))
 (let ((?x133 (* p00 b00)))
 (let ((?x128 (* q00 a00)))
 (let ((?x174 (* (- 1) ?x128)))
 (let (($x177 (= (+ (* a q) ?x174 ?x133 (* (- 1) (* p b))) 0)))
 (let (($x155 (= ?x147 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x131 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x150 (= (+ ?x33 ?x131 ?x41 (* (- 1) (* q r))) 0)))
 (and $x150 $x155 $x177 $x243 $x311 (or (not (= ?x553 0)) (not (= ?x489 0)))))))))))))))))))))))))))))))))))))) :qid k!39))
 ))
 (let (($x235 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x51 (* b00 r00)))
 (let ((?x47 (* a00 s00)))
 (let ((?x233 (* (- 1) ?x47)))
 (let ((?x312 (+ (* (- 1) (* (+ r (* (- 1) s)) b)) ?x233 (* (+ a (* (- 1) b)) s) ?x51)))
 (let ((?x328 (+ p (* (- 1) q))))
 (let ((?x291 (+ a (* (- 1) b))))
 (let ((?x252 (* (- 1) s)))
 (let ((?x254 (+ r ?x252)))
 (let ((?x213 (* ?x254 ?x254 ?x291 ?x291 ?x291 ?x328 ?x328 ?x328 ?x328 ?x312 s s s b b b b b q q q q q)))
 (let ((?x223 (+ (* (- 1) (* (+ b (* (- 1) a)) r)) ?x233 (* (+ s (* (- 1) r)) a) ?x51)))
 (let ((?x528 (* (- 1) p)))
 (let ((?x236 (+ q ?x528)))
 (let ((?x255 (* (- 1) a)))
 (let ((?x302 (+ b ?x255)))
 (let ((?x338 (* (- 1) r)))
 (let ((?x182 (+ s ?x338)))
 (let ((?x120 (* ?x182 ?x182 ?x182 ?x302 ?x302 ?x302 ?x302 ?x302 ?x236 ?x236 ?x236 ?x236 ?x236 ?x223 r r a a a p p p p)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x197 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x569 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x268 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x131 (* (- 1) ?x37)))
 (and (= (+ (* (- 1) (* r q)) (* s p) ?x131 ?x41) 0) (= (+ (* (- 1) (* r b)) ?x233 (* s a) ?x51) 0) $x268 (= ?x569 0) (= ?x197 0) (or (not (= ?x120 0)) (not (= ?x213 0))))))))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x134 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x140 (* r00 b00)))
 (let ((?x122 (* s00 a00)))
 (let ((?x129 (* (- 1) ?x122)))
 (let ((?x117 (* (- 1) (* b r))))
 (let ((?x49 (* a s)))
 (let ((?x147 (+ ?x49 ?x117 ?x129 ?x140)))
 (let ((?x328 (+ p (* (- 1) q))))
 (let ((?x291 (+ a (* (- 1) b))))
 (let ((?x252 (* (- 1) s)))
 (let ((?x254 (+ r ?x252)))
 (let ((?x489 (* ?x254 ?x254 ?x291 ?x291 ?x291 ?x328 ?x328 ?x328 ?x328 ?x147 s s s b b b b b q q q q q)))
 (let ((?x528 (* (- 1) p)))
 (let ((?x524 (+ ?x528 q)))
 (let ((?x255 (* (- 1) a)))
 (let ((?x267 (+ ?x255 b)))
 (let ((?x338 (* (- 1) r)))
 (let ((?x568 (+ ?x338 s)))
 (let ((?x553 (* ?x568 ?x568 ?x568 ?x267 ?x267 ?x267 ?x267 ?x267 ?x524 ?x524 ?x524 ?x524 ?x524 ?x147 r r a a a p p p p)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x306 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x311 (= ?x306 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x242 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x243 (= ?x242 0)))
 (let ((?x133 (* p00 b00)))
 (let ((?x128 (* q00 a00)))
 (let ((?x174 (* (- 1) ?x128)))
 (let (($x177 (= (+ (* a q) ?x174 ?x133 (* (- 1) (* p b))) 0)))
 (let (($x155 (= ?x147 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x131 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x150 (= (+ ?x33 ?x131 ?x41 (* (- 1) (* q r))) 0)))
 (let (($x510 (and $x150 $x155 $x177 $x243 $x311 (or (not (= ?x553 0)) (not (= ?x489 0))))))
 (let ((?x51 (* b00 r00)))
 (let ((?x47 (* a00 s00)))
 (let ((?x233 (* (- 1) ?x47)))
 (let ((?x213 (* ?x254 ?x254 ?x291 ?x291 ?x291 ?x328 ?x328 ?x328 ?x328 (+ (* (- 1) (* ?x254 b)) ?x233 (* ?x291 s) ?x51) s s s b b b b b q q q q q)))
 (let ((?x223 (+ (* (- 1) (* (+ b ?x255) r)) ?x233 (* (+ s ?x338) a) ?x51)))
 (let ((?x236 (+ q ?x528)))
 (let ((?x302 (+ b ?x255)))
 (let ((?x182 (+ s ?x338)))
 (let ((?x120 (* ?x182 ?x182 ?x182 ?x302 ?x302 ?x302 ?x302 ?x302 ?x236 ?x236 ?x236 ?x236 ?x236 ?x223 r r a a a p p p p)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x197 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x569 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x268 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let (($x125 (and (= (+ (* (- 1) (* r q)) (* s p) ?x131 ?x41) 0) (= (+ (* (- 1) (* r b)) ?x233 (* s a) ?x51) 0) $x268 (= ?x569 0) (= ?x197 0) (or (not (= ?x120 0)) (not (= ?x213 0))))))
 (rewrite (= $x125 $x510)))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x106 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x100 (- q p)))
 (let ((?x94 (- b a)))
 (let ((?x31 (- 1)))
 (let ((?x97 (- s r)))
 (let ((?x51 (* b00 r00)))
 (let ((?x101 (* (+ (- (* ?x31 ?x94 r) (* a00 s00)) (* a ?x97) ?x51) ?x94 ?x94 p ?x100 ?x100 ?x97 ?x97 ?x97 ?x31 a a a ?x94 ?x94 ?x94 p p p ?x100 ?x100 ?x100 r r)))
 (let ((?x84 (- r s)))
 (let ((?x90 (- p q)))
 (let ((?x87 (- a b)))
 (let ((?x91 (* (+ (- (* ?x31 b ?x84) (* a00 s00)) (* ?x87 s) ?x51) b b ?x90 q q s s s ?x31 ?x87 ?x87 ?x87 b b b ?x90 ?x90 ?x90 q q q ?x84 ?x84)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* ?x31 a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let (($x53 (= (+ (- (* ?x31 b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let (($x44 (= (+ (- (+ (* ?x31 q r) (* p s)) (* p00 s00)) ?x41) 0)))
 (and $x44 $x53 (= ?x60 0) (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= ?x91 0)) (not (= ?x101 0)))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x237 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x51 (* b00 r00)))
 (let ((?x47 (* a00 s00)))
 (let ((?x233 (* (- 1) ?x47)))
 (let ((?x312 (+ (* (- 1) (* (+ r (* (- 1) s)) b)) ?x233 (* (+ a (* (- 1) b)) s) ?x51)))
 (let ((?x328 (+ p (* (- 1) q))))
 (let ((?x291 (+ a (* (- 1) b))))
 (let ((?x252 (* (- 1) s)))
 (let ((?x254 (+ r ?x252)))
 (let ((?x213 (* ?x254 ?x254 ?x291 ?x291 ?x291 ?x328 ?x328 ?x328 ?x328 ?x312 s s s b b b b b q q q q q)))
 (let ((?x223 (+ (* (- 1) (* (+ b (* (- 1) a)) r)) ?x233 (* (+ s (* (- 1) r)) a) ?x51)))
 (let ((?x528 (* (- 1) p)))
 (let ((?x236 (+ q ?x528)))
 (let ((?x255 (* (- 1) a)))
 (let ((?x302 (+ b ?x255)))
 (let ((?x338 (* (- 1) r)))
 (let ((?x182 (+ s ?x338)))
 (let ((?x120 (* ?x182 ?x182 ?x182 ?x302 ?x302 ?x302 ?x302 ?x302 ?x236 ?x236 ?x236 ?x236 ?x236 ?x223 r r a a a p p p p)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x197 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x569 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x268 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x131 (* (- 1) ?x37)))
 (let (($x125 (and (= (+ (* (- 1) (* r q)) (* s p) ?x131 ?x41) 0) (= (+ (* (- 1) (* r b)) ?x233 (* s a) ?x51) 0) $x268 (= ?x569 0) (= ?x197 0) (or (not (= ?x120 0)) (not (= ?x213 0))))))
 (let ((?x100 (- q p)))
 (let ((?x94 (- b a)))
 (let ((?x31 (- 1)))
 (let ((?x97 (- s r)))
 (let ((?x101 (* (+ (- (* ?x31 ?x94 r) ?x47) (* a ?x97) ?x51) ?x94 ?x94 p ?x100 ?x100 ?x97 ?x97 ?x97 ?x31 a a a ?x94 ?x94 ?x94 p p p ?x100 ?x100 ?x100 r r)))
 (let ((?x84 (- r s)))
 (let ((?x90 (- p q)))
 (let ((?x87 (- a b)))
 (let ((?x91 (* (+ (- (* ?x31 b ?x84) ?x47) (* ?x87 s) ?x51) b b ?x90 q q s s s ?x31 ?x87 ?x87 ?x87 b b b ?x90 ?x90 ?x90 q q q ?x84 ?x84)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x105 (and (= (+ (- (+ (* ?x31 q r) (* p s)) ?x37) ?x41) 0) (= (+ (- (* ?x31 b r) ?x47) (* a s) ?x51) 0) (= (+ (- (+ (* ?x31 a q) ?x55) (* b00 p00)) ?x59) 0) (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= ?x91 0)) (not (= ?x101 0))))))
 (rewrite (= $x105 $x125)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x107 (asserted $x106)))
 (let ((@x201 (mp (mp @x107 (quant-intro (proof-bind ?x237) (= $x106 $x235)) $x235) (rewrite (= $x235 $x235)) $x235)))
 (let ((@x130 (mp~ (mp @x201 (quant-intro (proof-bind ?x134) (= $x235 $x227)) $x227) (sk (~ $x227 $x545)) $x545)))
 (let ((@x688 (mp @x130 (rewrite (= $x545 $x691)) $x691)))
 (let ((@x602 (and-elim @x688 $x214)))
 (let ((@x505 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x214) $x184)) @x602 $x184)))
 (let (($x183 (<= ?x280 0)))
 (let ((@x502 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x214) $x183)) @x602 $x183)))
 (let (($x566 (not (<= ?x623 0))))
 (let (($x532 (>= ?x666 0)))
 (let (($x296 (<= ?x666 0)))
 (let ((@x190 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x664 (not $x296) (not $x532))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x296)) @x502 @x505 false) $x296) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x532)) @x502 @x505 false) $x532) $x664)))
 (let (($x146 (>= ?x623 0)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x609 $x566 (not $x146))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x146)) @x502 @x505 false) $x146) (unit-resolution (and-elim @x688 $x690) @x190 $x611) $x566)))
 ((_ th-lemma arith farkas 1 1 1) @x277 @x502 @x505 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 10
 :arith-assert-diseq        3
 :arith-assert-lower        19
 :arith-assert-upper        18
 :arith-conflicts           4
 :arith-eq-adapter          11
 :arith-fixed-eqs           6
 :arith-grobner             4
 :arith-max-min             352
 :arith-nonlinear-horner    42
 :arith-num-rows            12
 :arith-pivots              5
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    12
 :conflicts                 4
 :decisions                 7
 :del-clause                27
 :final-checks              4
 :max-memory                19.64
 :memory                    19.15
 :mk-bool-var               33
 :mk-clause                 40
 :num-allocs                549636
 :num-checks                1
 :propagations              19
 :rlimit-count              7823
 :time                      0.01
 :total-time                0.02)
