unsat
((set-logic NRA)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(declare-fun y!5 () Real)
(declare-fun a!8 () Real)
(proof
(let ((?x453 (+ (* a!8 d!6) (* (- 2.0) (* b!7 y!5)) (* 2.0 (* y00 b!7)) (* (- 1.0) (* a00 d!6)))))
 (let (($x398 (>= ?x453 0.0)))
 (let (($x214 (= 0.0 ?x453)))
 (let ((@x115 (symm (commutativity (= $x214 (= ?x453 0.0))) (= (= ?x453 0.0) $x214))))
 (let (($x503 (= ?x453 0.0)))
 (let ((?x476 (* (- 1.0) (* d00 b!7))))
 (let ((?x331 (* b00 d!6)))
 (let ((?x412 (+ ?x331 ?x476)))
 (let (($x422 (= ?x412 0.0)))
 (let ((?x474 (* 2.0 (* b00 y!5))))
 (let ((?x469 (* (- 1.0) (* d00 a!8))))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x446 (+ ?x30 ?x82 ?x469 ?x474)))
 (let (($x712 (= ?x446 0.0)))
 (let ((?x146 (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 b!7 b!7 b!7))))
 (let ((?x126 (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7))))
 (let ((?x463 (+ ?x126 ?x146 (* (- (/ 1.0 16.0)) (* a!8 a!8 a!8 d!6 d!6 d!6 b!7 b!7 y!5)) (* (- (/ 1.0 16.0)) (* a!8 a!8 a!8 d!6 d!6 b!7 b!7 y!5 y!5)) (* (- (/ 1.0 32.0)) (* d!6 d!6 b!7 b!7 b!7 y!5)) (* (- (/ 1.0 16.0)) (* d!6 d!6 b!7 b!7 b!7 b!7 b!7 y!5 y!5)) (* (- (/ 3.0 16.0)) (* a!8 d!6 d!6 b!7 b!7 b!7 b!7 y!5 y!5)) (* (- (/ 3.0 16.0)) (* a!8 a!8 d!6 d!6 b!7 b!7 b!7 y!5 y!5)) (* (- (/ 1.0 16.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 y!5)) (* (- (/ 3.0 16.0)) (* a!8 d!6 d!6 d!6 b!7 b!7 b!7 b!7 y!5)) (* (- (/ 3.0 16.0)) (* a!8 a!8 d!6 d!6 d!6 b!7 b!7 b!7 y!5)) (* (- (/ 3.0 64.0)) (* a!8 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 64.0)) (* a!8 a!8 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (- (/ 1.0 64.0)) (* a!8 a!8 a!8 d!6 d!6 d!6 d!6 b!7 b!7)))))
 (let (($x478 (= (* ?x463 (+ ?x30 ?x82 ?x331 ?x469 ?x474 ?x476)) 0.0)))
 (let (($x497 (not $x478)))
 (let ((?x373 (* a00 d00 a!8 a!8 a!8 d!6 d!6 b!7 b!7 y!5 y!5)))
 (let ((?x312 (* b00 a!8 a!8 a!8 d!6 d!6 b!7 b!7 y!5 y!5 y!5)))
 (let ((?x287 (* d00 a!8 a!8 a!8 a!8 d!6 d!6 b!7 b!7 y!5 y!5)))
 (let ((?x244 (* b00 y00 a!8 a!8 a!8 d!6 d!6 b!7 b!7 y!5 y!5)))
 (let ((?x438 (+ (* (/ 1.0 8.0) ?x244) (* (/ 1.0 16.0) ?x287) (* (- (/ 1.0 8.0)) ?x312) (* (- (/ 1.0 16.0)) ?x373) (* (- (/ 1.0 32.0)) (* a00 d00 d!6 d!6 b!7 b!7 b!7 y!5)) (* (/ 1.0 32.0) (* d00 a!8 d!6 d!6 b!7 b!7 b!7 y!5)) (* (/ 1.0 16.0) (* b00 y00 d!6 d!6 b!7 b!7 b!7 y!5)) (* (- (/ 1.0 16.0)) (* b00 d!6 d!6 b!7 b!7 b!7 y!5 y!5)))))
 (let (($x439 (= ?x438 0.0)))
 (let (($x309 (not $x439)))
 (let (($x481 (or $x309 $x497)))
 (let (($x457 (and $x481 $x712 $x422 $x503)))
 (let ((?x368 (+ (* d!6 a!8) (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x557 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x82 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x195 (* d!6 b00)))
 (let ((?x579 (* 2.0 (* y!5 b00))))
 (let ((?x563 (* (- 1.0) (* a!8 d00))))
 (let ((?x154 (+ (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 b!7 b!7 b!7)) (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8 a!8 a!8)) ?x126 (* (- (/ 3.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7 a!8 a!8 a!8)) ?x146)))
 (let (($x544 (= (* ?x154 (+ ?x30 ?x563 ?x82 ?x579 (* (- 1.0) (* b!7 d00)) ?x195)) 0.0)))
 (let ((?x408 (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 b00)))
 (let ((?x602 (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 b00 y00)))
 (let ((?x607 (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a!8 d00)))
 (let ((?x226 (* y!5 y!5 d!6 d!6 b!7 b!7 a!8 a!8 a!8 a00 d00)))
 (let ((?x325 (+ (* (/ 1.0 16.0) ?x226) (* (- (/ 1.0 16.0)) ?x607) (* (- (/ 1.0 8.0)) ?x602) (* (/ 1.0 8.0) ?x408) (* (/ 1.0 32.0) (* y!5 d!6 d!6 b!7 b!7 b!7 a00 d00)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 a!8 d00)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 b00 y00)) (* (/ 1.0 16.0) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 b00)))))
 (let (($x297 (and (or (not (= ?x325 0.0)) (not $x544)) $x557 (= (+ (* b!7 d00) (* (- 1.0) ?x195)) 0.0) (= ?x368 0.0))))
 (let (($x119 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x186 (= (+ ?x135 ?x151 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x88 (* 2.0 (* y b00))))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x103 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x114 (= (+ ?x30 ?x103 ?x82 ?x88) 0.0)))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let ((?x715 (+ ?x167 ?x205 (* (- (/ 1.0 16.0)) (* y y d d b b b b b)) (* (- (/ 3.0 16.0)) (* y y d d b b b b a)) (* (- (/ 3.0 16.0)) (* y y d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b b b b)) (* (- (/ 3.0 16.0)) (* y d d d b b b b a)) (* (- (/ 3.0 16.0)) (* y d d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d d b b b b b)) (* (- (/ 3.0 64.0)) (* d d d d b b b b a)) (* (- (/ 3.0 64.0)) (* d d d d b b b a a)) (* (- (/ 1.0 64.0)) (* d d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d b b b)))))
 (let ((?x160 (* ?x715 (+ ?x30 ?x103 ?x82 ?x88 (* (- 1.0) (* b d00)) (* d b00)))))
 (let ((?x282 (* (/ 1.0 8.0) (* y y y d d b b a a a b00))))
 (let ((?x296 (* (- (/ 1.0 8.0)) (* y y d d b b a a a b00 y00))))
 (let ((?x295 (* (- (/ 1.0 16.0)) (* y y d d b b a a a a d00))))
 (let ((?x293 (* (/ 1.0 16.0) (* y y d d b b a a a a00 d00))))
 (let ((?x273 (+ ?x293 ?x295 ?x296 ?x282 (* (/ 1.0 32.0) (* y d d b b b a00 d00)) (* (- (/ 1.0 32.0)) (* y d d b b b a d00)) (* (- (/ 1.0 16.0)) (* y d d b b b b00 y00)) (* (/ 1.0 16.0) (* y y d d b b b b00)))))
 (let (($x266 (not (= ?x273 0.0))))
 (and (or $x266 (not (= ?x160 0.0))) $x114 $x124 $x186))))))))))))))))))))) :qid k!33))
 ))
 (let (($x150 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x409 (= (+ ?x135 ?x151 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x230 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x165 (* 2.0 (* b00 y))))
 (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x683 (+ ?x82 ?x30 ?x165 (* (- 1.0) (* d00 a)))))
 (let (($x685 (= ?x683 0.0)))
 (let ((?x572 (+ ?x82 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x142 (* (/ 1.0 2.0) d)))
 (let ((?x218 (+ y ?x142)))
 (let ((?x62 (+ a b)))
 (let ((?x351 (+ (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x218 ?x218 d d b b)) (* (- (/ 1.0 32.0)) (* ?x218 d d b b b)))))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let (($x363 (or (not (= (* (+ ?x167 ?x205) ?x683) 0.0)) (not (= (* ?x351 ?x572) 0.0)))))
 (and $x363 $x685 $x230 $x409)))))))))))))))))) :qid k!33))
 ))
 (let ((?x649 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x186 (= (+ ?x135 ?x151 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x88 (* 2.0 (* y b00))))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x103 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x114 (= (+ ?x30 ?x103 ?x82 ?x88) 0.0)))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let ((?x715 (+ ?x167 ?x205 (* (- (/ 1.0 16.0)) (* y y d d b b b b b)) (* (- (/ 3.0 16.0)) (* y y d d b b b b a)) (* (- (/ 3.0 16.0)) (* y y d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b b b b)) (* (- (/ 3.0 16.0)) (* y d d d b b b b a)) (* (- (/ 3.0 16.0)) (* y d d d b b b a a)) (* (- (/ 1.0 16.0)) (* y d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d d b b b b b)) (* (- (/ 3.0 64.0)) (* d d d d b b b b a)) (* (- (/ 3.0 64.0)) (* d d d d b b b a a)) (* (- (/ 1.0 64.0)) (* d d d d b b a a a)) (* (- (/ 1.0 64.0)) (* d d d b b b)))))
 (let ((?x160 (* ?x715 (+ ?x30 ?x103 ?x82 ?x88 (* (- 1.0) (* b d00)) (* d b00)))))
 (let ((?x282 (* (/ 1.0 8.0) (* y y y d d b b a a a b00))))
 (let ((?x296 (* (- (/ 1.0 8.0)) (* y y d d b b a a a b00 y00))))
 (let ((?x295 (* (- (/ 1.0 16.0)) (* y y d d b b a a a a d00))))
 (let ((?x293 (* (/ 1.0 16.0) (* y y d d b b a a a a00 d00))))
 (let ((?x273 (+ ?x293 ?x295 ?x296 ?x282 (* (/ 1.0 32.0) (* y d d b b b a00 d00)) (* (- (/ 1.0 32.0)) (* y d d b b b a d00)) (* (- (/ 1.0 16.0)) (* y d d b b b b00 y00)) (* (/ 1.0 16.0) (* y y d d b b b b00)))))
 (let (($x266 (not (= ?x273 0.0))))
 (let (($x130 (and (or $x266 (not (= ?x160 0.0))) $x114 $x124 $x186)))
 (let (($x409 (= (+ ?x135 ?x151 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x230 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x165 (* 2.0 (* b00 y))))
 (let ((?x683 (+ ?x82 ?x30 ?x165 (* (- 1.0) (* d00 a)))))
 (let (($x685 (= ?x683 0.0)))
 (let ((?x572 (+ ?x82 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x142 (* (/ 1.0 2.0) d)))
 (let ((?x218 (+ y ?x142)))
 (let ((?x62 (+ a b)))
 (let ((?x351 (+ (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x218 ?x218 d d b b)) (* (- (/ 1.0 32.0)) (* ?x218 d d b b b)))))
 (let (($x363 (or (not (= (* (+ ?x167 ?x205) ?x683) 0.0)) (not (= (* ?x351 ?x572) 0.0)))))
 (let (($x324 (and $x363 $x685 $x230 $x409)))
 (rewrite (= $x324 $x130))))))))))))))))))))))))))))))))))))
 ))
 (let (($x366 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x572 (+ ?x82 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x142 (* (/ 1.0 2.0) d)))
 (let ((?x218 (+ y ?x142)))
 (let ((?x62 (+ a b)))
 (let ((?x351 (+ (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x218 ?x218 d d b b)) (* (- (/ 1.0 32.0)) (* ?x218 d d b b b)))))
 (let ((?x165 (* 2.0 (* b00 y))))
 (let ((?x683 (+ ?x82 ?x30 ?x165 (* (- 1.0) (* d00 a)))))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let (($x363 (or (not (= (* (+ ?x167 ?x205) ?x683) 0.0)) (not (= (* ?x351 ?x572) 0.0)))))
 (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x409 (= (+ ?x135 ?x151 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x230 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x685 (= ?x683 0.0)))
 (and $x685 $x230 $x409 $x363)))))))))))))))))) :qid k!33))
 ))
 (let (($x73 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x52 (/ d 2.0)))
 (let ((?x59 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x62 (+ a b)))
 (let ((?x38 (- 1.0)))
 (let ((?x67 (- (* ?x38 ?x62 ?x62 ?x62 ?x51 ?x51 ?x52 ?x52 ?x59 ?x59) (* ?x51 ?x51 ?x51 ?x52 ?x52 ?x59))))
 (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let (($x69 (= (* (- (+ ?x27 ?x30 (* 2.0 b00 ?x59)) (* ?x62 d00)) ?x67) 0.0)))
 (let ((?x55 (- (* ?x38 a a a ?x51 ?x51 ?x52 ?x52 y y) (* ?x51 ?x51 ?x51 ?x52 ?x52 y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ ?x27 ?x30 (* 2.0 b00 y)) ?x33)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and (= ?x34 0.0) (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x34 ?x55) 0.0)) (not $x69))))))))))))))))) :qid k!33))
 ))
 (let ((?x268 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x572 (+ ?x82 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x142 (* (/ 1.0 2.0) d)))
 (let ((?x218 (+ y ?x142)))
 (let ((?x62 (+ a b)))
 (let ((?x351 (+ (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x62 ?x218 ?x218 d d b b)) (* (- (/ 1.0 32.0)) (* ?x218 d d b b b)))))
 (let ((?x165 (* 2.0 (* b00 y))))
 (let ((?x683 (+ ?x82 ?x30 ?x165 (* (- 1.0) (* d00 a)))))
 (let ((?x205 (* (- (/ 1.0 32.0)) (* y d d b b b))))
 (let ((?x167 (* (- (/ 1.0 16.0)) (* y y d d b b a a a))))
 (let (($x363 (or (not (= (* (+ ?x167 ?x205) ?x683) 0.0)) (not (= (* ?x351 ?x572) 0.0)))))
 (let ((?x151 (* (- 2.0) (* y b))))
 (let ((?x135 (* d a)))
 (let (($x409 (= (+ ?x135 ?x151 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x230 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x685 (= ?x683 0.0)))
 (let (($x198 (and $x685 $x230 $x409 $x363)))
 (let ((?x52 (/ d 2.0)))
 (let ((?x59 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x67 (- (* (- 1.0) ?x62 ?x62 ?x62 ?x51 ?x51 ?x52 ?x52 ?x59 ?x59) (* ?x51 ?x51 ?x51 ?x52 ?x52 ?x59))))
 (let ((?x64 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 ?x59)) (* ?x62 d00))))
 (let ((?x55 (- (* (- 1.0) a a a ?x51 ?x51 ?x52 ?x52 y y) (* ?x51 ?x51 ?x51 ?x52 ?x52 y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x72 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x34 ?x55) 0.0)) (not (= (* ?x64 ?x67) 0.0))))))
 (rewrite (= $x72 $x198))))))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x337 (mp (mp @x74 (quant-intro (proof-bind ?x268) (= $x73 $x366)) $x366) (rewrite (= $x366 $x150)) $x150)))
 (let ((@x493 (mp~ (mp @x337 (quant-intro (proof-bind ?x649) (= $x150 $x119)) $x119) (sk (~ $x119 $x297)) $x297)))
 (let ((@x516 (mp @x493 (rewrite (= $x297 $x457)) $x457)))
 (let ((@x117 (mp (and-elim @x516 $x503) @x115 $x214)))
 (let (($x216 (<= ?x453 0.0)))
 (let (($x494 (>= ?x412 0.0)))
 (let (($x340 (= 0.0 ?x412)))
 (let ((@x443 (mp (and-elim @x516 $x422) (symm (commutativity (= $x340 $x422)) (= $x422 $x340)) $x340)))
 (let ((@x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x340) $x494)) @x443 $x494)))
 (let (($x491 (<= ?x412 0.0)))
 (let ((@x447 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x340) $x491)) @x443 $x491)))
 (let (($x475 (>= ?x438 0.0)))
 (let (($x622 (not $x475)))
 (let (($x487 (<= ?x438 0.0)))
 (let ((?x421 (+ ?x469 ?x474 ?x476 ?x30 ?x82 ?x331)))
 (let (($x426 (>= ?x421 0.0)))
 (let (($x420 (= 0.0 ?x421)))
 (let (($x441 (>= ?x446 0.0)))
 (let (($x467 (= 0.0 ?x446)))
 (let ((@x511 (mp (and-elim @x516 $x712) (symm (commutativity (= $x467 $x712)) (= $x712 $x467)) $x467)))
 (let (($x480 (<= ?x446 0.0)))
 (let ((@x505 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x467) $x480)) @x511 $x480)))
 (let ((@x219 ((_ th-lemma arith) @x505 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x467) $x441)) @x511 $x441) @x447 @x330 $x420)))
 (let (($x424 (<= ?x421 0.0)))
 (let ((@x601 (unit-resolution ((_ th-lemma arith) (or $x487 (not $x491) (not $x424) (not $x494) (not $x426))) (hypothesis (not $x487)) @x447 @x330 (lemma ((_ th-lemma arith) @x505 (hypothesis (not $x424)) @x447 false) $x424) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x420) $x426)) @x219 $x426) false)))
 (let (($x485 (= 0.0 ?x438)))
 (let (($x659 (not $x485)))
 (let ((@x655 (monotonicity (symm (commutativity (= $x485 $x439)) (= $x439 $x485)) (= $x309 $x659))))
 (let (($x336 (or (not (= ?x421 0.0)) $x478)))
 (let ((@x531 (unit-resolution ((_ th-lemma arith) $x336) (hypothesis $x497) (hypothesis (= ?x421 0.0)) false)))
 (let ((@x626 (unit-resolution (and-elim @x516 $x481) (unit-resolution (lemma @x531 $x336) (symm @x219 (= ?x421 0.0)) $x478) $x309)))
 (let ((@x144 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x485 (not $x487) $x622)) (mp @x626 @x655 $x659) (or (not $x487) $x622))))
 (unit-resolution ((_ th-lemma arith) (or (not $x216) (not $x398) $x475 (not $x491) (not $x494))) (unit-resolution @x144 (lemma @x601 $x487) $x622) @x447 @x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x214) $x216)) @x117 $x216) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x214) $x398)) @x117 $x398) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       31
 :arith-eq-adapter                26
 :arith-conflicts                 41
 :arith-diseq                     35
 :arith-grobner-calls             2
 :arith-grobner-conflicts         2
 :arith-horner-calls              2
 :arith-horner-cross-nested-forms 8
 :arith-lower                     50
 :arith-make-feasible             47
 :arith-max-columns               52
 :arith-max-rows                  7
 :arith-nla-explanations          40
 :arith-nla-lemmas                40
 :arith-offset-eqs                3
 :arith-upper                     30
 :conflicts                       6
 :decisions                       47
 :del-clause                      87
 :final-checks                    28
 :max-memory                      18.28
 :memory                          17.40
 :mk-bool-var                     126
 :mk-clause                       114
 :num-allocs                      1582799
 :num-checks                      1
 :propagations                    43
 :rlimit-count                    4932
 :time                            0.01
 :total-time                      0.02)
