unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(declare-fun a!8 () Real)
(proof
(let ((?x956 (* b00 a!8 a!8 b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5)))
 (let ((?x203 (* (/ 1.0 8.0) (* a00 d00 a!8 a!8 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x812 (* d00 a!8 a!8 a!8 b!7 b!7 b!7 d!6 d!6 d!6 y!5)))
 (let ((?x512 (* (- (/ 1.0 8.0)) (* d00 a!8 a!8 a!8 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x576 (* b00 y00 a!8 a!8 b!7 b!7 b!7 d!6 d!6 d!6 y!5)))
 (let ((?x353 (* a00 d00 a!8 a!8 b!7 b!7 b!7 d!6 d!6 d!6 y!5)))
 (let ((?x520 (* (- (/ 1.0 4.0)) (* b00 y00 a!8 a!8 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x498 (* (/ 1.0 4.0) (* b00 a!8 a!8 b!7 d!6 d!6 y!5 y!5 y!5 y!5))))
 (let ((?x588 (+ ?x498 ?x520 (* (/ 1.0 16.0) (* b00 a!8 b!7 b!7 d!6 d!6 d!6 y!5 y!5)) (* (/ 1.0 64.0) ?x353) (* (- (/ 1.0 4.0)) (* b00 y00 a!8 a!8 b!7 d!6 d!6)) (* (/ 1.0 4.0) (* b00 a!8 a!8 b!7 d!6 d!6 y!5)) (* (- (/ 1.0 32.0)) ?x576) ?x512 (* (- (/ 1.0 16.0)) (* b00 y00 a!8 b!7 b!7 d!6 d!6 d!6 y!5)) (* (/ 1.0 32.0) (* a00 d00 a!8 b!7 b!7 d!6 d!6 d!6 y!5)) (* (- (/ 1.0 32.0)) (* d00 a!8 a!8 b!7 b!7 d!6 d!6 d!6 y!5)) (* (/ 1.0 8.0) (* a00 d00 a!8 a!8 b!7 d!6 d!6)) (* (- (/ 1.0 8.0)) (* d00 a!8 a!8 a!8 b!7 d!6 d!6)) (* (- (/ 1.0 64.0)) ?x812) ?x203 (* (/ 1.0 32.0) ?x956))))
 (let (($x401 (<= ?x588 0.0)))
 (let (($x523 (not $x401)))
 (let (($x392 (>= ?x588 0.0)))
 (let ((?x217 (* 2.0 (* b00 y!5))))
 (let ((?x935 (* (- 1.0) (* d00 a!8))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x684 (+ ?x30 ?x86 ?x935 ?x217)))
 (let (($x918 (>= ?x684 0.0)))
 (let (($x946 (= 0.0 ?x684)))
 (let ((@x332 (symm (commutativity (= $x946 (= ?x684 0.0))) (= (= ?x684 0.0) $x946))))
 (let (($x490 (= ?x684 0.0)))
 (let ((?x325 (* (/ 3.0 16.0) (* a!8 a!8 b!7 d!6 d!6 d!6 y!5 y!5))))
 (let ((?x324 (* (/ 3.0 8.0) (* a!8 b!7 b!7 d!6 d!6 d!6 y!5 y!5))))
 (let ((?x337 (* (/ 1.0 4.0) (* a!8 b!7 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x961 (* (/ 3.0 16.0) (* b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5))))
 (let ((?x931 (* (/ 1.0 8.0) (* b!7 b!7 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x196 (* (/ 3.0 16.0) (* a!8 b!7 b!7 d!6 d!6 d!6 d!6 y!5))))
 (let ((?x418 (* (/ 1.0 4.0) (* a!8 b!7 b!7 d!6 d!6))))
 (let ((?x889 (* (/ 1.0 128.0) (* a!8 a!8 b!7 b!7 b!7 d!6 d!6 d!6 d!6))))
 (let ((?x692 (* (/ 1.0 8.0) (* a!8 a!8 b!7 d!6 d!6 y!5 y!5 y!5))))
 (let ((?x210 (* (/ 1.0 64.0) (* b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 y!5))))
 (let ((?x110 (* (/ 1.0 32.0) (* a!8 b!7 b!7 b!7 b!7 d!6 d!6 d!6 y!5))))
 (let ((?x312 (* (/ 1.0 32.0) (* a!8 b!7 b!7 d!6 d!6 d!6 y!5))))
 (let ((?x676 (* (/ 1.0 8.0) (* a!8 a!8 b!7 d!6 d!6))))
 (let ((?x568 (* (/ 1.0 64.0) (* a!8 a!8 b!7 b!7 b!7 d!6 d!6 d!6 y!5))))
 (let ((?x818 (* (/ 1.0 64.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6))))
 (let ((?x304 (* (/ 1.0 32.0) (* b!7 b!7 b!7 d!6 d!6 d!6 y!5))))
 (let ((?x330 (* (/ 1.0 64.0) (* a!8 b!7 b!7 d!6 d!6 d!6 d!6))))
 (let ((?x420 (* (/ 1.0 8.0) (* b!7 b!7 b!7 d!6 d!6))))
 (let ((?x827 (* (/ 3.0 32.0) (* a!8 a!8 b!7 d!6 d!6 d!6 d!6 y!5))))
 (let ((?x878 (* (/ 1.0 128.0) (* b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6))))
 (let ((?x223 (* (/ 3.0 32.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5))))
 (let ((?x794 (* (/ 1.0 64.0) (* a!8 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6))))
 (let ((?x387 (* (/ 1.0 64.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6))))
 (let ((?x373 (* (/ 1.0 32.0) (* a!8 b!7 b!7 d!6 d!6 d!6 d!6 d!6))))
 (let ((?x344 (* (/ 1.0 64.0) (* a!8 a!8 b!7 d!6 d!6 d!6 d!6 d!6))))
 (let ((?x307 (+ ?x344 ?x373 ?x387 ?x794 ?x223 ?x878 ?x827 ?x420 ?x330 ?x304 ?x818 ?x568 ?x676 ?x312 ?x110 ?x210 ?x692 ?x889 ?x418 ?x196 ?x931 ?x961 ?x337 ?x324 ?x325)))
 (let ((?x147 (* (+ ?x30 ?x86 (* b00 d!6) ?x935 ?x217 (* (- 1.0) (* d00 b!7))) ?x307)))
 (let (($x584 (= ?x147 0.0)))
 (let (($x157 (not $x584)))
 (let (($x791 (= ?x588 0.0)))
 (let (($x941 (not $x791)))
 (let (($x606 (or $x941 $x157)))
 (let ((?x302 (+ (* a!8 d!6) (* 2.0 (* y00 b!7)) (* (- 1.0) (* a00 d!6)) (* (- 2.0) (* b!7 y!5)))))
 (let ((?x508 (* (- 1.0) (* d00 b!7))))
 (let ((?x686 (* b00 d!6)))
 (let ((?x665 (+ ?x686 ?x508)))
 (let (($x663 (= ?x665 0.0)))
 (let (($x391 (and $x490 $x663 (= ?x302 0.0) $x606)))
 (let ((?x636 (+ (* (/ 1.0 64.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 32.0) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 64.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 32.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 128.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 16.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 8.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 16.0) (* y!5 y!5 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 3.0 32.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 16.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 32.0) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 8.0) (* d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 32.0) (* y!5 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 b!7 b!7 a!8)))))
 (let ((?x895 (* d!6 b00)))
 (let ((?x599 (* 2.0 (* y!5 b00))))
 (let ((?x968 (* (- 1.0) (* a!8 d00))))
 (let (($x116 (= (* (+ ?x30 ?x968 ?x86 ?x599 (* (- 1.0) (* b!7 d00)) ?x895) ?x636) 0.0)))
 (let ((?x960 (* (/ 1.0 4.0) (* y!5 y!5 y!5 y!5 d!6 d!6 b!7 a!8 a!8 b00))))
 (let ((?x953 (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 d!6 d!6 b!7 a!8 a!8 b00 y00))))
 (let ((?x899 (* (- (/ 1.0 8.0)) (* y!5 y!5 y!5 d!6 d!6 b!7 a!8 a!8 a!8 d00))))
 (let ((?x833 (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 d!6 b!7 a!8 a!8 a00 d00))))
 (let ((?x837 (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 b00)))
 (let ((?x916 (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 b00 y00)))
 (let ((?x905 (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8 d00)))
 (let ((?x738 (* y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a00 d00)))
 (let ((?x336 (+ (* (/ 1.0 64.0) ?x738) (* (- (/ 1.0 64.0)) ?x905) (* (- (/ 1.0 32.0)) ?x916) (* (/ 1.0 32.0) ?x837) ?x833 ?x899 ?x953 ?x960 (* (/ 1.0 8.0) (* d!6 d!6 b!7 a!8 a!8 a00 d00)) (* (- (/ 1.0 8.0)) (* d!6 d!6 b!7 a!8 a!8 a!8 d00)) (* (- (/ 1.0 4.0)) (* d!6 d!6 b!7 a!8 a!8 b00 y00)) (* (/ 1.0 4.0) (* y!5 d!6 d!6 b!7 a!8 a!8 b00)) (* (/ 1.0 32.0) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8 a00 d00)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8 a!8 d00)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8 b00 y00)) (* (/ 1.0 16.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8 b00)))))
 (let ((?x735 (+ (* d!6 a!8) (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x115 (and (= (+ ?x30 ?x968 ?x86 ?x599) 0.0) (= (+ (* b!7 d00) (* (- 1.0) ?x895)) 0.0) (= ?x735 0.0) (or (not (= ?x336 0.0)) (not $x116)))))
 (let (($x711 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x225 (* (/ 1.0 32.0) (* y d d d b b a))))
 (let ((?x209 (* (/ 1.0 8.0) (* d d b a a))))
 (let ((?x194 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x169 (* (/ 1.0 64.0) (* y d d d b b b a a))))
 (let ((?x964 (+ ?x169 ?x194 ?x209 ?x225 (* (/ 1.0 64.0) (* y d d d b b b b b)) (* (/ 1.0 32.0) (* y d d d b b b b a)) (* (/ 1.0 128.0) (* d d d d b b b b b)) (* (/ 1.0 64.0) (* d d d d b b b b a)) (* (/ 1.0 128.0) (* d d d d b b b a a)) (* (/ 1.0 8.0) (* y y y d d b b b)) (* (/ 1.0 4.0) (* y y y d d b b a)) (* (/ 3.0 16.0) (* y y d d d b b b)) (* (/ 3.0 8.0) (* y y d d d b b a)) (* (/ 3.0 16.0) (* y y d d d b a a)) (* (/ 3.0 32.0) (* y d d d d b b b)) (* (/ 3.0 16.0) (* y d d d d b b a)) (* (/ 3.0 32.0) (* y d d d d b a a)) (* (/ 1.0 64.0) (* d d d d d b b b)) (* (/ 1.0 32.0) (* d d d d d b b a)) (* (/ 1.0 64.0) (* d d d d d b a a)) (* (/ 1.0 8.0) (* d d b b b)) (* (/ 1.0 4.0) (* d d b b a)) (* (/ 1.0 32.0) (* y d d d b b b)) (* (/ 1.0 64.0) (* d d d d b b b)) (* (/ 1.0 64.0) (* d d d d b b a)))))
 (let ((?x132 (* d b00)))
 (let ((?x126 (* b d00)))
 (let ((?x127 (* (- 1.0) ?x126)))
 (let ((?x92 (* 2.0 (* y b00))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x107 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x258 (* (/ 1.0 32.0) (* y y d d d b b b a a b00))))
 (let ((?x248 (* (- (/ 1.0 32.0)) (* y d d d b b b a a b00 y00))))
 (let ((?x237 (* (- (/ 1.0 64.0)) (* y d d d b b b a a a d00))))
 (let ((?x162 (* (/ 1.0 64.0) (* y d d d b b b a a a00 d00))))
 (let ((?x385 (+ ?x162 ?x237 ?x248 ?x258 (* (/ 1.0 8.0) (* y y y d d b a a a00 d00)) (* (- (/ 1.0 8.0)) (* y y y d d b a a a d00)) (* (- (/ 1.0 4.0)) (* y y y d d b a a b00 y00)) (* (/ 1.0 4.0) (* y y y y d d b a a b00)) (* (/ 1.0 8.0) (* d d b a a a00 d00)) (* (- (/ 1.0 8.0)) (* d d b a a a d00)) (* (- (/ 1.0 4.0)) (* d d b a a b00 y00)) (* (/ 1.0 4.0) (* y d d b a a b00)) (* (/ 1.0 32.0) (* y d d d b b a a00 d00)) (* (- (/ 1.0 32.0)) (* y d d d b b a a d00)) (* (- (/ 1.0 16.0)) (* y d d d b b a b00 y00)) (* (/ 1.0 16.0) (* y y d d d b b a b00)))))
 (let (($x227 (not (= ?x385 0.0))))
 (let (($x705 (or $x227 (not (= (* (+ ?x30 ?x107 ?x86 ?x92 ?x127 ?x132) ?x964) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x188 (= (+ ?x131 ?x153 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ ?x126 (* (- 1.0) ?x132)) 0.0)))
 (let (($x118 (= (+ ?x30 ?x107 ?x86 ?x92) 0.0)))
 (and $x118 $x124 $x188 $x705)))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x537 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x585 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x635 (+ (* (/ 1.0 64.0) (* ?x64 ?x64 ?x585 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x585 ?x585 ?x585 d d b)) (* (/ 1.0 8.0) (* ?x64 ?x64 d d b)) (* (/ 1.0 32.0) (* ?x64 ?x585 d d d b b)))))
 (let ((?x30 (* a00 d00)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x625 (* (+ ?x86 ?x30 (* 2.0 (* b00 ?x585)) (* (- 1.0) (* d00 ?x64))) ?x635)))
 (let ((?x225 (* (/ 1.0 32.0) (* y d d d b b a))))
 (let ((?x209 (* (/ 1.0 8.0) (* d d b a a))))
 (let ((?x194 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x169 (* (/ 1.0 64.0) (* y d d d b b b a a))))
 (let ((?x182 (* 2.0 (* b00 y))))
 (let ((?x88 (+ ?x86 ?x30 ?x182 (* (- 1.0) (* d00 a)))))
 (let (($x643 (or (not (= (* ?x88 (+ ?x169 ?x194 ?x209 ?x225)) 0.0)) (not (= ?x625 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x557 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (and (= ?x88 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x557 $x643)))))))))))))))))) :qid k!33))
 ))
 (let ((?x515 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x225 (* (/ 1.0 32.0) (* y d d d b b a))))
 (let ((?x209 (* (/ 1.0 8.0) (* d d b a a))))
 (let ((?x194 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x169 (* (/ 1.0 64.0) (* y d d d b b b a a))))
 (let ((?x964 (+ ?x169 ?x194 ?x209 ?x225 (* (/ 1.0 64.0) (* y d d d b b b b b)) (* (/ 1.0 32.0) (* y d d d b b b b a)) (* (/ 1.0 128.0) (* d d d d b b b b b)) (* (/ 1.0 64.0) (* d d d d b b b b a)) (* (/ 1.0 128.0) (* d d d d b b b a a)) (* (/ 1.0 8.0) (* y y y d d b b b)) (* (/ 1.0 4.0) (* y y y d d b b a)) (* (/ 3.0 16.0) (* y y d d d b b b)) (* (/ 3.0 8.0) (* y y d d d b b a)) (* (/ 3.0 16.0) (* y y d d d b a a)) (* (/ 3.0 32.0) (* y d d d d b b b)) (* (/ 3.0 16.0) (* y d d d d b b a)) (* (/ 3.0 32.0) (* y d d d d b a a)) (* (/ 1.0 64.0) (* d d d d d b b b)) (* (/ 1.0 32.0) (* d d d d d b b a)) (* (/ 1.0 64.0) (* d d d d d b a a)) (* (/ 1.0 8.0) (* d d b b b)) (* (/ 1.0 4.0) (* d d b b a)) (* (/ 1.0 32.0) (* y d d d b b b)) (* (/ 1.0 64.0) (* d d d d b b b)) (* (/ 1.0 64.0) (* d d d d b b a)))))
 (let ((?x132 (* d b00)))
 (let ((?x126 (* b d00)))
 (let ((?x127 (* (- 1.0) ?x126)))
 (let ((?x92 (* 2.0 (* y b00))))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x107 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x258 (* (/ 1.0 32.0) (* y y d d d b b b a a b00))))
 (let ((?x248 (* (- (/ 1.0 32.0)) (* y d d d b b b a a b00 y00))))
 (let ((?x237 (* (- (/ 1.0 64.0)) (* y d d d b b b a a a d00))))
 (let ((?x162 (* (/ 1.0 64.0) (* y d d d b b b a a a00 d00))))
 (let ((?x385 (+ ?x162 ?x237 ?x248 ?x258 (* (/ 1.0 8.0) (* y y y d d b a a a00 d00)) (* (- (/ 1.0 8.0)) (* y y y d d b a a a d00)) (* (- (/ 1.0 4.0)) (* y y y d d b a a b00 y00)) (* (/ 1.0 4.0) (* y y y y d d b a a b00)) (* (/ 1.0 8.0) (* d d b a a a00 d00)) (* (- (/ 1.0 8.0)) (* d d b a a a d00)) (* (- (/ 1.0 4.0)) (* d d b a a b00 y00)) (* (/ 1.0 4.0) (* y d d b a a b00)) (* (/ 1.0 32.0) (* y d d d b b a a00 d00)) (* (- (/ 1.0 32.0)) (* y d d d b b a a d00)) (* (- (/ 1.0 16.0)) (* y d d d b b a b00 y00)) (* (/ 1.0 16.0) (* y y d d d b b a b00)))))
 (let (($x227 (not (= ?x385 0.0))))
 (let (($x705 (or $x227 (not (= (* (+ ?x30 ?x107 ?x86 ?x92 ?x127 ?x132) ?x964) 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x188 (= (+ ?x131 ?x153 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x124 (= (+ ?x126 (* (- 1.0) ?x132)) 0.0)))
 (let (($x118 (= (+ ?x30 ?x107 ?x86 ?x92) 0.0)))
 (let (($x989 (and $x118 $x124 $x188 $x705)))
 (let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x585 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x635 (+ (* (/ 1.0 64.0) (* ?x64 ?x64 ?x585 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x585 ?x585 ?x585 d d b)) (* (/ 1.0 8.0) (* ?x64 ?x64 d d b)) (* (/ 1.0 32.0) (* ?x64 ?x585 d d d b b)))))
 (let ((?x625 (* (+ ?x86 ?x30 (* 2.0 (* b00 ?x585)) (* (- 1.0) (* d00 ?x64))) ?x635)))
 (let ((?x182 (* 2.0 (* b00 y))))
 (let ((?x88 (+ ?x86 ?x30 ?x182 (* (- 1.0) (* d00 a)))))
 (let (($x643 (or (not (= (* ?x88 (+ ?x169 ?x194 ?x209 ?x225)) 0.0)) (not (= ?x625 0.0)))))
 (let (($x557 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x627 (and (= ?x88 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x557 $x643)))
 (rewrite (= $x627 $x989)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x77 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x52 (/ d 2.0)))
 (let ((?x61 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x64 (+ a b)))
 (let ((?x71 (+ (* ?x64 ?x64 ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 ?x61) (* ?x64 ?x64 ?x51 ?x52 ?x52 ?x61 ?x61 ?x61) (* ?x64 ?x64 ?x51 ?x52 ?x52) (* ?x64 ?x51 ?x51 ?x52 ?x52 ?x52 ?x61))))
 (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let (($x73 (= (* (- (+ ?x27 ?x30 (* 2.0 b00 ?x61)) (* ?x64 d00)) ?x71) 0.0)))
 (let ((?x57 (+ (* a a ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 y) (* a a ?x51 ?x52 ?x52 y y y) (* a a ?x51 ?x52 ?x52) (* a ?x51 ?x51 ?x52 ?x52 ?x52 y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ ?x27 ?x30 (* 2.0 b00 y)) ?x33)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x34 ?x57) 0.0)) (not $x73)))))))))))))))) :qid k!33))
 ))
 (let ((?x580 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x144 (* (/ 1.0 2.0) d)))
 (let ((?x585 (+ y ?x144)))
 (let ((?x64 (+ a b)))
 (let ((?x635 (+ (* (/ 1.0 64.0) (* ?x64 ?x64 ?x585 d d d b b b)) (* (/ 1.0 8.0) (* ?x64 ?x64 ?x585 ?x585 ?x585 d d b)) (* (/ 1.0 8.0) (* ?x64 ?x64 d d b)) (* (/ 1.0 32.0) (* ?x64 ?x585 d d d b b)))))
 (let ((?x30 (* a00 d00)))
 (let ((?x86 (* (- 2.0) (* b00 y00))))
 (let ((?x625 (* (+ ?x86 ?x30 (* 2.0 (* b00 ?x585)) (* (- 1.0) (* d00 ?x64))) ?x635)))
 (let ((?x225 (* (/ 1.0 32.0) (* y d d d b b a))))
 (let ((?x209 (* (/ 1.0 8.0) (* d d b a a))))
 (let ((?x194 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x169 (* (/ 1.0 64.0) (* y d d d b b b a a))))
 (let ((?x182 (* 2.0 (* b00 y))))
 (let ((?x88 (+ ?x86 ?x30 ?x182 (* (- 1.0) (* d00 a)))))
 (let (($x643 (or (not (= (* ?x88 (+ ?x169 ?x194 ?x209 ?x225)) 0.0)) (not (= ?x625 0.0)))))
 (let ((?x153 (* (- 2.0) (* y b))))
 (let ((?x131 (* d a)))
 (let (($x557 (= (+ ?x131 ?x153 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x627 (and (= ?x88 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x557 $x643)))
 (let ((?x52 (/ d 2.0)))
 (let ((?x61 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x71 (+ (* ?x64 ?x64 ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 ?x61) (* ?x64 ?x64 ?x51 ?x52 ?x52 ?x61 ?x61 ?x61) (* ?x64 ?x64 ?x51 ?x52 ?x52) (* ?x64 ?x51 ?x51 ?x52 ?x52 ?x52 ?x61))))
 (let ((?x66 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 ?x61)) (* ?x64 d00))))
 (let ((?x57 (+ (* a a ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 y) (* a a ?x51 ?x52 ?x52 y y y) (* a a ?x51 ?x52 ?x52) (* a ?x51 ?x51 ?x52 ?x52 ?x52 y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x76 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x34 ?x57) 0.0)) (not (= (* ?x66 ?x71) 0.0))))))
 (rewrite (= $x76 $x627))))))))))))))))))))))))))))))))
 ))
 (let ((@x78 (asserted $x77)))
 (let ((@x722 (mp (mp @x78 (quant-intro (proof-bind ?x580) (= $x77 $x537)) $x537) (quant-intro (proof-bind ?x515) (= $x537 $x711)) $x711)))
 (let ((@x672 (mp (mp~ @x722 (sk (~ $x711 $x115)) $x115) (rewrite (= $x115 $x391)) $x391)))
 (let ((@x220 (mp (and-elim @x672 $x490) @x332 $x946)))
 (let ((@x379 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x946) $x918)) @x220 $x918)))
 (let (($x678 (<= ?x684 0.0)))
 (let ((@x187 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x946) $x678)) @x220 $x678)))
 (let ((@x454 (unit-resolution ((_ th-lemma arith) (or (not $x678) (not $x918) $x392)) @x187 @x379 (hypothesis (not $x392)) false)))
 (let (($x405 (= 0.0 ?x588)))
 (let (($x815 (not $x405)))
 (let ((@x848 (monotonicity (symm (commutativity (= $x405 $x791)) (= $x791 $x405)) (= $x941 $x815))))
 (let ((?x529 (+ ?x30 ?x686 ?x86 ?x935 ?x217 ?x508)))
 (let (($x592 (>= ?x529 0.0)))
 (let (($x683 (>= ?x665 0.0)))
 (let (($x215 (= 0.0 ?x665)))
 (let ((@x945 (mp (and-elim @x672 $x663) (symm (commutativity (= $x215 $x663)) (= $x663 $x215)) $x215)))
 (let ((@x826 ((_ th-lemma arith) @x379 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x215) $x683)) @x945 $x683) (hypothesis (not $x592)) false)))
 (let ((@x198 (lemma @x826 $x592)))
 (let ((?x273 (+ ?x931 ?x961 ?x337 ?x324 ?x325 ?x344 ?x373 ?x387 ?x794 ?x223 ?x878 ?x827 ?x420 ?x330 ?x304 ?x818 ?x568 ?x676 ?x312 ?x110 ?x210 ?x692 ?x889 ?x418 ?x196)))
 (let (($x581 (>= ?x273 0.0)))
 (let (($x163 (not $x581)))
 (let (($x152 (= 0.0 ?x273)))
 (let (($x582 (not $x152)))
 (let ((@x436 (hypothesis $x157)))
 (let (($x437 (= ?x273 0.0)))
 (let (($x142 (not $x437)))
 (let ((@x879 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x142 $x584)) @x436 $x142) (symm (hypothesis $x152) $x437) false)))
 (let ((@x443 (lemma @x879 (or $x582 $x584))))
 (let (($x655 (<= ?x273 0.0)))
 (let (($x212 (<= ?x147 0.0)))
 (let (($x858 (not $x212)))
 (let (($x333 (>= ?x147 0.0)))
 (let ((@x270 (commutativity (= (= 0.0 ?x147) $x584))))
 (let (($x201 (= 0.0 ?x147)))
 (let (($x571 (not $x201)))
 (let (($x202 (not $x333)))
 (let ((@x208 (hypothesis $x202)))
 (let ((@x390 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x571 $x333)) @x208 $x571) (monotonicity @x270 (= $x571 $x157)) $x157)))
 (let (($x600 (<= ?x529 0.0)))
 (let (($x228 (<= ?x665 0.0)))
 (let ((@x306 ((_ th-lemma arith) (hypothesis (not $x600)) @x187 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x215) $x228)) @x945 $x228) false)))
 (let ((@x292 (lemma @x306 $x600)))
 (let ((@x852 (unit-resolution ((_ th-lemma arith) (or (not $x600) $x581 $x333)) @x208 (hypothesis $x163) @x292 false)))
 (let (($x174 (not $x655)))
 (let ((@x200 (hypothesis $x174)))
 (let ((@x366 (unit-resolution ((_ th-lemma arith) (or (not $x592) $x655 $x333)) @x208 @x200 @x198 false)))
 (let ((@x384 ((_ th-lemma arith triangle-eq) (or $x152 $x174 $x163))))
 (let ((@x386 (unit-resolution @x384 (unit-resolution (lemma @x366 (or $x655 $x333)) @x208 $x655) (unit-resolution (lemma @x852 (or $x581 $x333)) @x208 $x581) $x152)))
 (let ((@x421 (mp @x436 (monotonicity (symm @x270 (= $x584 $x201)) (= $x157 $x571)) $x571)))
 (let ((@x860 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x201 $x858 $x202)) @x421 (lemma (unit-resolution @x443 @x386 @x390 false) $x333) $x858)))
 (let ((@x409 (unit-resolution ((_ th-lemma arith) (or (not $x600) $x655 $x212)) (hypothesis $x858) @x200 @x292 false)))
 (let ((@x395 (unit-resolution @x384 (unit-resolution (lemma @x409 (or $x655 $x212)) @x860 $x655) (unit-resolution @x443 @x436 $x582) $x163)))
 (let ((@x439 (unit-resolution ((_ th-lemma arith) (or (not $x592) $x581 $x212)) @x860 @x395 @x198 false)))
 (let ((@x849 (mp (unit-resolution (and-elim @x672 $x606) (lemma @x439 $x584) $x941) @x848 $x815)))
 (let ((@x170 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x405 $x523 (not $x392))) @x849 (or $x523 (not $x392)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x918) (not $x678) $x401)) @x187 @x379 (unit-resolution @x170 (lemma @x454 $x392) $x523) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       30
 :arith-eq-adapter                30
 :arith-bound-propagations-cheap  22
 :arith-conflicts                 65
 :arith-diseq                     37
 :arith-fixed-eqs                 1
 :arith-grobner-calls             5
 :arith-grobner-conflicts         2
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 4
 :arith-lower                     56
 :arith-make-feasible             34
 :arith-max-columns               72
 :arith-max-rows                  8
 :arith-nla-explanations          6
 :arith-nla-lemmas                63
 :arith-propagations              22
 :arith-upper                     37
 :conflicts                       10
 :decisions                       45
 :del-clause                      100
 :final-checks                    35
 :max-memory                      2.73
 :memory                          1.16
 :mk-bool-var                     161
 :mk-clause                       139
 :num-allocs                      7390950
 :num-checks                      1
 :propagations                    52
 :rlimit-count                    6737
 :time                            0.03
 :total-time                      0.04)
