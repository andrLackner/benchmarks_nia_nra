unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(declare-fun d!1 () Int)
(proof
(let ((?x966 (to_real b!2)))
 (let ((?x60 (to_real d00)))
 (let ((?x834 (* ?x60 ?x966)))
 (let ((?x794 (+ (* (- 1.0) (to_real (* d00 b!2))) ?x834)))
 (let (($x121 (>= ?x794 0.0)))
 (let (($x841 (= 0.0 ?x794)))
 (let ((@x692 (symm (commutativity (= $x841 (= ?x794 0.0))) (= (= ?x794 0.0) $x841))))
 (let ((@x509 (unit-resolution (hypothesis (not $x841)) (mp ((_ th-lemma arith) (= ?x794 0.0)) @x692 $x841) false)))
 (let ((@x505 (lemma @x509 $x841)))
 (let ((@x702 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x841) $x121)) @x505 $x121)))
 (let (($x492 (<= ?x794 0.0)))
 (let ((@x455 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x841) $x492)) @x505 $x492)))
 (let ((?x937 (to_real a!3)))
 (let ((?x228 (to_real y!0)))
 (let ((?x162 (to_real d!1)))
 (let ((?x64 (to_real b00)))
 (let ((?x300 (* (/ 1.0 32.0) (* ?x64 ?x162 ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x937 ?x937 ?x966 ?x966))))
 (let ((?x858 (* (- (/ 1.0 32.0)) (* ?x60 ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x937 ?x937 ?x966 ?x966 ?x966))))
 (let ((?x559 (+ (* (/ 1.0 128.0) (* ?x60 ?x162 ?x162 ?x162 ?x228 ?x966 ?x966 ?x966 ?x966)) ?x858 (* (- (/ 1.0 128.0)) (* ?x64 ?x162 ?x162 ?x162 ?x162 ?x228 ?x966 ?x966 ?x966)) (* (/ 1.0 8.0) (* ?x64 ?x162 ?x162 ?x162 ?x228 ?x228 ?x228)) (* (- (/ 1.0 8.0)) (* ?x60 ?x162 ?x162 ?x228 ?x228 ?x228 ?x966)) ?x300)))
 (let (($x151 (<= ?x559 0.0)))
 (let (($x639 (not $x151)))
 (let (($x185 (>= ?x559 0.0)))
 (let ((?x560 (* d00 b!2)))
 (let ((?x757 (+ ?x560 (* (- 1) (* b00 d!1)))))
 (let (($x290 (>= ?x757 0)))
 (let (($x146 (= 0 ?x757)))
 (let ((@x531 (symm (commutativity (= $x146 (= ?x757 0))) (= (= ?x757 0) $x146))))
 (let (($x608 (= ?x757 0)))
 (let ((?x891 (* (/ 3.0 32.0) (* ?x162 ?x162 ?x162 ?x228 ?x228 ?x937 ?x937 ?x937 ?x966 ?x966))))
 (let ((?x799 (* (/ 9.0 32.0) (* ?x162 ?x162 ?x162 ?x228 ?x228 ?x937 ?x937 ?x966 ?x966 ?x966))))
 (let ((?x616 (* (/ 1.0 128.0) (* ?x162 ?x162 ?x162 ?x162 ?x162 ?x966 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x838 (* (/ 9.0 64.0) (* ?x162 ?x162 ?x162 ?x162 ?x228 ?x937 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x539 (* (/ 3.0 16.0) (* ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x937 ?x966 ?x966 ?x966))))
 (let ((?x802 (* (/ 3.0 64.0) (* ?x162 ?x162 ?x162 ?x162 ?x228 ?x937 ?x937 ?x937 ?x966 ?x966))))
 (let ((?x744 (* (- (/ 1.0 128.0)) (* ?x162 ?x162 ?x162 ?x162 ?x966 ?x966 ?x966))))
 (let ((?x776 (* (- (/ 1.0 64.0)) (* ?x162 ?x162 ?x162 ?x228 ?x966 ?x966 ?x966))))
 (let ((?x486 (* (/ 3.0 16.0) (* ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x496 (* (/ 9.0 64.0) (* ?x162 ?x162 ?x162 ?x162 ?x228 ?x937 ?x937 ?x966 ?x966 ?x966))))
 (let ((?x452 (* (/ 1.0 16.0) (* ?x162 ?x162 ?x228 ?x228 ?x228 ?x966 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x158 (* (/ 1.0 16.0) (* ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x937 ?x937 ?x966 ?x966))))
 (let ((?x1080 (* (/ 9.0 32.0) (* ?x162 ?x162 ?x162 ?x228 ?x228 ?x937 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x646 (* (/ 3.0 8.0) (* ?x162 ?x162 ?x162 ?x228 ?x228))))
 (let ((?x1009 (* (/ 1.0 4.0) (* ?x162 ?x162 ?x228 ?x228 ?x228))))
 (let ((?x522 (* (/ 3.0 128.0) (* ?x162 ?x162 ?x162 ?x162 ?x162 ?x937 ?x937 ?x966 ?x966 ?x966))))
 (let ((?x1019 (* (/ 1.0 128.0) (* ?x162 ?x162 ?x162 ?x162 ?x162 ?x937 ?x937 ?x937 ?x966 ?x966))))
 (let ((?x789 (* (/ 3.0 64.0) (* ?x162 ?x162 ?x162 ?x162 ?x228 ?x966 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x1054 (* (/ 3.0 32.0) (* ?x162 ?x162 ?x162 ?x228 ?x228 ?x966 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x579 (* (/ 3.0 128.0) (* ?x162 ?x162 ?x162 ?x162 ?x162 ?x937 ?x966 ?x966 ?x966 ?x966))))
 (let ((?x431 (* (/ 3.0 16.0) (* ?x162 ?x162 ?x162 ?x162 ?x228))))
 (let ((?x427 (* (/ 1.0 32.0) (* ?x162 ?x162 ?x162 ?x162 ?x162))))
 (let ((?x663 (+ ?x427 ?x431 ?x579 ?x1054 ?x789 ?x1019 ?x522 ?x1009 ?x646 ?x1080 ?x158 ?x452 ?x496 ?x486 ?x776 ?x744 ?x802 ?x539 ?x838 ?x616 ?x799 ?x891)))
 (let ((?x949 (* (+ (* (/ 1.0 2.0) (* ?x64 ?x162)) (* (- (/ 1.0 2.0)) ?x834)) ?x663)))
 (let (($x741 (= ?x949 0.0)))
 (let (($x438 (not $x741)))
 (let (($x829 (= ?x559 0.0)))
 (let (($x944 (not $x829)))
 (let (($x767 (or $x944 $x438)))
 (let ((?x197 (+ (* a00 d!1) (* (- 1) (* d!1 a!3)) (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x688 (= (+ ?x35 ?x98 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x644 (and $x688 $x608 (= ?x197 0) $x767)))
 (let ((?x655 (+ (* (- (/ 1.0 128.0)) (* ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162)) (* (- (/ 1.0 64.0)) (* ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x228)) (* (/ 1.0 16.0) (* ?x966 ?x966 ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x937 ?x937)) ?x1009 (* (/ 1.0 16.0) (* ?x966 ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x228 ?x228 ?x228)) (* (/ 1.0 128.0) (* ?x966 ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x162)) (* (/ 3.0 128.0) (* ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x162 ?x937)) (* (/ 3.0 128.0) (* ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x162 ?x937 ?x937)) (* (/ 1.0 128.0) (* ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x162 ?x937 ?x937 ?x937)) (* (/ 3.0 64.0) (* ?x966 ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x228)) (* (/ 9.0 64.0) (* ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x228 ?x937)) (* (/ 9.0 64.0) (* ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x228 ?x937 ?x937)) (* (/ 3.0 64.0) (* ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x228 ?x937 ?x937 ?x937)) (* (/ 3.0 32.0) (* ?x966 ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x228 ?x228)) (* (/ 9.0 32.0) (* ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x228 ?x228 ?x937)) (* (/ 9.0 32.0) (* ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x228 ?x228 ?x937 ?x937)) (* (/ 3.0 32.0) (* ?x966 ?x966 ?x162 ?x162 ?x162 ?x228 ?x228 ?x937 ?x937 ?x937)) (* (/ 3.0 16.0) (* ?x966 ?x966 ?x966 ?x966 ?x162 ?x162 ?x228 ?x228 ?x228 ?x937)) (* (/ 3.0 16.0) (* ?x966 ?x966 ?x966 ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x937)) ?x427 ?x431 ?x646)))
 (let (($x961 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x966 ?x60)) (* (/ 1.0 2.0) (* ?x162 ?x64))) ?x655) 0.0)))
 (let ((?x736 (* (/ 1.0 32.0) (* ?x966 ?x966 ?x162 ?x162 ?x162 ?x64 ?x228 ?x228 ?x228 ?x937 ?x937 ?x937))))
 (let ((?x727 (* (- (/ 1.0 32.0)) (* ?x966 ?x966 ?x966 ?x60 ?x162 ?x162 ?x228 ?x228 ?x228 ?x937 ?x937 ?x937))))
 (let ((?x921 (+ (* (/ 1.0 128.0) (* ?x966 ?x966 ?x966 ?x966 ?x60 ?x162 ?x162 ?x162 ?x228)) (* (- (/ 1.0 128.0)) (* ?x966 ?x966 ?x966 ?x162 ?x162 ?x162 ?x162 ?x64 ?x228)) ?x727 ?x736 (* (- (/ 1.0 8.0)) (* ?x966 ?x60 ?x162 ?x162 ?x228 ?x228 ?x228)) (* (/ 1.0 8.0) (* ?x162 ?x162 ?x162 ?x64 ?x228 ?x228 ?x228)))))
 (let ((?x404 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x1048 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x98 (* 2 (* y!0 b00))) 0)))
 (let (($x415 (and $x1048 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x404 0) (or (not (= ?x921 0.0)) (not $x961)))))
 (let (($x239 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x69 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x1027 (+ (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69 ?x69)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x69)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x69 ?x69)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x69 ?x69 ?x69)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x69)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x69 ?x69 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69 ?x69)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69)) (* (/ 1.0 32.0) (* ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 3.0 16.0) (* ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 3.0 8.0) (* ?x62 ?x62 ?x62 ?x67 ?x67)))))
 (let ((?x196 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x64 (to_real b00)))
 (let ((?x255 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x60 (to_real d00)))
 (let ((?x244 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x273 (+ (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67)) ?x244 ?x255 (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x167 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x130 (= (+ ?x35 (* (- 1) (* a d00)) ?x98 (* 2 (* y b00))) 0)))
 (and $x130 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x167 0) (or (not (= ?x273 0.0)) (not (= (* ?x196 ?x1027) 0.0))))))))))))))))))))) :qid k!33))
 ))
 (let (($x247 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y)))
 (let ((?x989 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x69 (to_real a)))
 (let ((?x954 (+ ?x69 ?x56)))
 (let ((?x1022 (+ (* (- (/ 1.0 64.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x56 ?x989)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x56 ?x56 ?x954 ?x954 ?x954 ?x989 ?x989 ?x989)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x989 ?x989 ?x989)))))
 (let ((?x960 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x856 (+ (* (- (/ 1.0 64.0)) (* ?x67 ?x62 ?x62 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x67 ?x67 ?x67 ?x62 ?x62 ?x56 ?x56 ?x69 ?x69 ?x69)) (* (/ 1.0 4.0) (* ?x67 ?x67 ?x67 ?x62 ?x62)))))
 (let (($x168 (or (not (= (* ?x960 ?x856) 0.0)) (not (= (* ?x960 ?x1022) 0.0)))))
 (let ((?x198 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x652 (= ?x198 0)))
 (let ((?x617 (* d00 a)))
 (let ((?x645 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x617)))
 (and (= ?x645 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x652 $x168))))))))))))))) :qid k!33))
 ))
 (let ((?x391 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x69 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x1027 (+ (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69 ?x69)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x69)) (* (/ 3.0 128.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x69 ?x69)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x69 ?x69 ?x69)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x69)) (* (/ 9.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x69 ?x69 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69)) (* (/ 9.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69 ?x69)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69)) (* (/ 1.0 32.0) (* ?x62 ?x62 ?x62 ?x62 ?x62)) (* (/ 3.0 16.0) (* ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 3.0 8.0) (* ?x62 ?x62 ?x62 ?x67 ?x67)))))
 (let ((?x196 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x64 (to_real b00)))
 (let ((?x255 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x60 (to_real d00)))
 (let ((?x244 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x273 (+ (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x64 ?x67)) ?x244 ?x255 (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 ?x64 ?x67 ?x67 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x167 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x130 (= (+ ?x35 (* (- 1) (* a d00)) ?x98 (* 2 (* y b00))) 0)))
 (let (($x1049 (and $x130 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x167 0) (or (not (= ?x273 0.0)) (not (= (* ?x196 ?x1027) 0.0))))))
 (let ((?x989 (+ ?x67 (* (/ 1.0 2.0) ?x62))))
 (let ((?x954 (+ ?x69 ?x56)))
 (let ((?x1022 (+ (* (- (/ 1.0 64.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x56 ?x989)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x56 ?x56 ?x954 ?x954 ?x954 ?x989 ?x989 ?x989)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x989 ?x989 ?x989)))))
 (let ((?x960 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) (* (/ 1.0 2.0) (* ?x64 ?x62)))))
 (let ((?x856 (+ (* (- (/ 1.0 64.0)) (* ?x67 ?x62 ?x62 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x67 ?x67 ?x67 ?x62 ?x62 ?x56 ?x56 ?x69 ?x69 ?x69)) (* (/ 1.0 4.0) (* ?x67 ?x67 ?x67 ?x62 ?x62)))))
 (let (($x168 (or (not (= (* ?x960 ?x856) 0.0)) (not (= (* ?x960 ?x1022) 0.0)))))
 (let ((?x198 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x652 (= ?x198 0)))
 (let ((?x617 (* d00 a)))
 (let (($x110 (= (+ (* 2 ?x97) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x617) 0)))
 (let (($x993 (and $x110 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x652 $x168)))
 (rewrite (= $x993 $x1049))))))))))))))))))))))))))))))))
 ))
 (let (($x1024 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real y)))
 (let ((?x989 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x69 (to_real a)))
 (let ((?x954 (+ ?x69 ?x56)))
 (let ((?x1022 (+ (* (- (/ 1.0 64.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x56 ?x989)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x56 ?x56 ?x954 ?x954 ?x954 ?x989 ?x989 ?x989)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x989 ?x989 ?x989)))))
 (let ((?x960 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x856 (+ (* (- (/ 1.0 64.0)) (* ?x67 ?x62 ?x62 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x67 ?x67 ?x67 ?x62 ?x62 ?x56 ?x56 ?x69 ?x69 ?x69)) (* (/ 1.0 4.0) (* ?x67 ?x67 ?x67 ?x62 ?x62)))))
 (let (($x168 (or (not (= (* ?x960 ?x856) 0.0)) (not (= (* ?x960 ?x1022) 0.0)))))
 (let ((?x198 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x652 (= ?x198 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x818 (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x818 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x652 $x168))))))))))))))))) :qid k!33))
 ))
 (let ((?x200 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y)))
 (let ((?x989 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x69 (to_real a)))
 (let ((?x954 (+ ?x69 ?x56)))
 (let ((?x1022 (+ (* (- (/ 1.0 64.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x56 ?x989)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x56 ?x56 ?x954 ?x954 ?x954 ?x989 ?x989 ?x989)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x989 ?x989 ?x989)))))
 (let ((?x960 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x856 (+ (* (- (/ 1.0 64.0)) (* ?x67 ?x62 ?x62 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x67 ?x67 ?x67 ?x62 ?x62 ?x56 ?x56 ?x69 ?x69 ?x69)) (* (/ 1.0 4.0) (* ?x67 ?x67 ?x67 ?x62 ?x62)))))
 (let (($x168 (or (not (= (* ?x960 ?x856) 0.0)) (not (= (* ?x960 ?x1022) 0.0)))))
 (let ((?x198 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x652 (= ?x198 0)))
 (let ((?x617 (* d00 a)))
 (let ((?x645 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x617)))
 (let (($x993 (and (= ?x645 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x652 $x168)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x1023 (and (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) ?x617)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x652 $x168)))
 (rewrite (= $x1023 $x993))))))))))))))))))))))
 ))
 (let (($x89 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x74 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x67 (to_real y)))
 (let ((?x77 (+ ?x67 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x83 (+ (* (to_real (- 1)) ?x58 ?x58 ?x58 ?x63 ?x63 ?x63 ?x77) (* ?x80 ?x80 ?x80 ?x58 ?x58 ?x63 ?x63 ?x77 ?x77 ?x77) (* ?x63 ?x63 ?x77 ?x77 ?x77))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x69 (to_real a)))
 (let ((?x72 (+ (* (to_real (- 1)) ?x58 ?x58 ?x58 ?x63 ?x63 ?x63 ?x67) (* ?x69 ?x69 ?x69 ?x58 ?x58 ?x63 ?x63 ?x67 ?x67 ?x67) (* ?x63 ?x63 ?x67 ?x67 ?x67))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x72) ?x74)) (not (= (* ?x66 ?x83) ?x74))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1021 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real y)))
 (let ((?x989 (+ ?x67 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x69 (to_real a)))
 (let ((?x954 (+ ?x69 ?x56)))
 (let ((?x1022 (+ (* (- (/ 1.0 64.0)) (* ?x62 ?x62 ?x62 ?x56 ?x56 ?x56 ?x989)) (* (/ 1.0 16.0) (* ?x62 ?x62 ?x56 ?x56 ?x954 ?x954 ?x954 ?x989 ?x989 ?x989)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x989 ?x989 ?x989)))))
 (let ((?x960 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x856 (+ (* (- (/ 1.0 64.0)) (* ?x67 ?x62 ?x62 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 16.0) (* ?x67 ?x67 ?x67 ?x62 ?x62 ?x56 ?x56 ?x69 ?x69 ?x69)) (* (/ 1.0 4.0) (* ?x67 ?x67 ?x67 ?x62 ?x62)))))
 (let (($x168 (or (not (= (* ?x960 ?x856) 0.0)) (not (= (* ?x960 ?x1022) 0.0)))))
 (let ((?x198 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x652 (= ?x198 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x818 (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x1023 (and $x818 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x652 $x168)))
 (let ((?x74 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x77 (+ ?x67 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x83 (+ (* (to_real (- 1)) ?x58 ?x58 ?x58 ?x63 ?x63 ?x63 ?x77) (* ?x80 ?x80 ?x80 ?x58 ?x58 ?x63 ?x63 ?x77 ?x77 ?x77) (* ?x63 ?x63 ?x77 ?x77 ?x77))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x72 (+ (* (to_real (- 1)) ?x58 ?x58 ?x58 ?x63 ?x63 ?x63 ?x67) (* ?x69 ?x69 ?x69 ?x58 ?x58 ?x63 ?x63 ?x67 ?x67 ?x67) (* ?x63 ?x63 ?x67 ?x67 ?x67))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x88 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x72) ?x74)) (not (= (* ?x66 ?x83) ?x74))))))
 (rewrite (= $x88 $x1023))))))))))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x592 (mp (mp @x90 (quant-intro (proof-bind ?x1021) (= $x89 $x1024)) $x1024) (rewrite (= $x1024 $x1024)) $x1024)))
 (let ((@x673 (mp (mp @x592 (quant-intro (proof-bind ?x200) (= $x1024 $x247)) $x247) (quant-intro (proof-bind ?x391) (= $x247 $x239)) $x239)))
 (let ((@x1002 (mp (mp~ @x673 (sk (~ $x239 $x415)) $x415) (rewrite (= $x415 $x644)) $x644)))
 (let ((@x169 (mp (and-elim @x1002 $x608) @x531 $x146)))
 (let ((@x641 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x146) $x290)) @x169 $x290)))
 (let (($x147 (<= ?x757 0)))
 (let ((@x670 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x146) $x147)) @x169 $x147)))
 (let ((@x695 (unit-resolution ((_ th-lemma arith) (or $x185 (not $x290) (not $x121) (not $x492) (not $x147))) @x670 @x641 (hypothesis (not $x185)) @x455 @x702 false)))
 (let (($x210 (= 0.0 ?x559)))
 (let (($x698 (not $x210)))
 (let ((@x701 (monotonicity (symm (commutativity (= $x210 $x829)) (= $x829 $x210)) (= $x944 $x698))))
 (let ((?x519 (+ (* (/ 1.0 2.0) ?x834) (* (- (/ 1.0 2.0)) (* ?x64 ?x162)))))
 (let (($x525 (<= ?x519 0.0)))
 (let ((?x735 (* ?x64 ?x162)))
 (let ((?x1066 (+ ?x735 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x790 (>= ?x1066 0.0)))
 (let (($x1079 (= 0.0 ?x1066)))
 (let ((@x105 (symm (commutativity (= $x1079 (= ?x1066 0.0))) (= (= ?x1066 0.0) $x1079))))
 (let ((@x781 (mp ((_ th-lemma arith) (= ?x1066 0.0)) @x105 $x1079)))
 (let ((@x538 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1079) $x790)) @x781 $x790) @x670 (hypothesis (not $x525)) (hypothesis $x492) false)))
 (let ((@x458 (unit-resolution (lemma @x538 (or (not $x492) $x525)) @x455 $x525)))
 (let ((?x258 (+ ?x891 ?x427 ?x431 ?x579 ?x1054 ?x789 ?x1019 ?x522 ?x1009 ?x646 ?x1080 ?x158 ?x452 ?x496 ?x486 ?x776 ?x744 ?x802 ?x539 ?x838 ?x616 ?x799)))
 (let (($x251 (<= ?x258 0.0)))
 (let (($x479 (not $x251)))
 (let (($x814 (= ?x258 0.0)))
 (let (($x475 (not $x814)))
 (let ((@x471 (hypothesis $x438)))
 (let (($x477 (or $x475 $x741)))
 (let ((@x495 (lemma (unit-resolution ((_ th-lemma arith) $x477) @x471 (hypothesis $x814) false) $x477)))
 (let (($x987 (>= ?x258 0.0)))
 (let (($x153 (>= ?x949 0.0)))
 (let (($x570 (not $x153)))
 (let (($x152 (= 0.0 ?x949)))
 (let (($x396 (not $x152)))
 (let ((@x337 (monotonicity (symm (commutativity (= $x152 $x741)) (= $x741 $x152)) (= $x438 $x396))))
 (let (($x186 (<= ?x949 0.0)))
 (let (($x325 (not $x186)))
 (let ((@x453 (hypothesis $x325)))
 (let ((@x467 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x396 $x186)) @x453 $x396) (monotonicity (commutativity (= $x152 $x741)) (= $x396 $x438)) $x438)))
 (let (($x454 (not $x987)))
 (let ((@x456 (hypothesis $x454)))
 (let ((@x459 (unit-resolution ((_ th-lemma arith) (or (not $x525) $x987 $x186)) @x453 @x456 @x458 false)))
 (let (($x501 (>= ?x519 0.0)))
 (let (($x497 (<= ?x1066 0.0)))
 (let ((@x319 ((_ th-lemma arith) @x641 (hypothesis (not $x501)) @x702 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1079) $x497)) @x781 $x497) false)))
 (let ((@x390 (lemma @x319 $x501)))
 (let ((@x483 (unit-resolution ((_ th-lemma arith) (or (not $x501) $x251 $x186)) @x453 (hypothesis $x479) @x390 false)))
 (let ((@x472 ((_ th-lemma arith triangle-eq) (or $x814 $x479 $x454))))
 (let ((@x330 (unit-resolution @x472 (unit-resolution (lemma @x483 (or $x251 $x186)) @x453 $x251) (unit-resolution (lemma @x459 (or $x987 $x186)) @x453 $x987) $x814)))
 (let ((@x338 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x152 $x325 $x570)) (lemma (unit-resolution @x495 @x330 @x467 false) $x186) (or $x152 $x570))))
 (let ((@x569 (unit-resolution @x338 (mp @x471 @x337 $x396) $x570)))
 (let ((@x577 (unit-resolution ((_ th-lemma arith) (or (not $x501) $x987 $x153)) (hypothesis $x570) @x456 @x390 false)))
 (let ((@x588 (unit-resolution @x472 (unit-resolution (lemma @x577 (or $x987 $x153)) @x569 $x987) (unit-resolution @x495 @x471 $x475) $x479)))
 (let ((@x591 (unit-resolution ((_ th-lemma arith) (or (not $x525) $x251 $x153)) @x569 @x588 @x458 false)))
 (let ((@x703 (mp (unit-resolution (and-elim @x1002 $x767) (lemma @x591 $x741) $x944) @x701 $x698)))
 (let ((@x710 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x210 $x639 (not $x185))) @x703 (or $x639 (not $x185)))))
 (unit-resolution ((_ th-lemma arith) (or $x151 (not $x290) (not $x121) (not $x492) (not $x147))) @x670 @x641 (unit-resolution @x710 (lemma @x695 $x185) $x639) @x455 @x702 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       42
 :arith-eq-adapter                54
 :arith-bound-propagations-cheap  70
 :arith-bound-propagations-lp     5
 :arith-conflicts                 180
 :arith-diseq                     64
 :arith-gcd-calls                 10
 :arith-grobner-calls             8
 :arith-grobner-conflicts         2
 :arith-horner-calls              8
 :arith-horner-cross-nested-forms 12
 :arith-lower                     96
 :arith-make-feasible             90
 :arith-max-columns               79
 :arith-max-rows                  19
 :arith-nla-explanations          112
 :arith-nla-lemmas                177
 :arith-patches                   10
 :arith-patches-success           10
 :arith-propagations              70
 :arith-upper                     116
 :conflicts                       18
 :decisions                       192
 :del-clause                      205
 :final-checks                    56
 :max-memory                      5.77
 :memory                          3.21
 :mk-bool-var                     376
 :mk-clause                       311
 :num-allocs                      73547195
 :num-checks                      1
 :propagations                    181
 :rlimit-count                    9105
 :time                            0.10
 :total-time                      0.11)
