unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x578 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x289 (<= ?x578 0)))
 (let (($x582 (= ?x578 0)))
 (let ((?x1062 (+ 1 y!0)))
 (let ((?x1093 (+ (- 1) x!1)))
 (let ((?x1088 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1062 ?x1062)))
 (let ((?x1065 (* ?x1093 ?x1093 ?x1093 ?x1062 ?x1062 ?x1062)))
 (let ((?x931 (* x!1 x!1 x!1 x!1)))
 (let ((?x266 (+ (* 3 y00) (* 3 x00) (* (- 2) y!0) (* 7 (* x00 y!0 x!1 x!1)) (* (- 2) (* x00 y!0 x!1 x!1 x!1)) (* x00 y!0 y!0) (* y00 y!0 y!0) (* (- 3) (* y00 y!0 y!0 x!1)) (* 3 (* y00 y!0 y!0 x!1 x!1)) (* (- 1) (* y00 y!0 y!0 x!1 x!1 x!1)) (* (- 2) (* y00 y!0 x!1 x!1 x!1)) (* (- 2) (* y00 x!1 x!1 x!1)) (* 7 (* y00 x!1 x!1)) (* 2 (* y!0 y!0 x!1)) (* (- 2) (* y!0 x!1 x!1)) (* 4 (* y!0 x!1)) (* (- 1) (* y!0 y!0 x!1 x!1)) (* (- 1) (* x00 y!0 y!0 x!1 x!1 x!1)) (* 3 (* x00 y!0 y!0 x!1 x!1)) (* 7 (* x00 x!1 x!1)) (* 3 (* y00 y!0)) (* (- 2) (* x00 x!1 x!1 x!1)) (* (- 8) (* y00 x!1)) (* 3 (* x00 y!0)) (* (- 2) x!1) (* (- 3) (* x00 y!0 y!0 x!1)) (* (- 4) (* x!1 x!1 x!1)) (* (- 8) (* y00 y!0 x!1)) (* 7 (* y00 y!0 x!1 x!1)) (* (- 8) (* x00 x!1)) (* (- 8) (* x00 y!0 x!1)) ?x931 (* (- 1) (* y!0 y!0)) (* 5 (* x!1 x!1)) ?x1065 ?x1088)))
 (let (($x268 (= ?x266 0)))
 (let (($x635 (not $x268)))
 (let (($x596 (and $x582 $x635)))
 (let ((?x932 (* y!0 y!0)))
 (let ((?x642 (* (- 3) x00)))
 (let ((?x698 (* (- 3) y00)))
 (let ((?x933 (+ (* 2 x!1) (* 2 y!0) ?x698 ?x642 (* (- 3) (* y!0 y00)) (* 8 (* x!1 y!0 y00)) (* (- 7) (* x!1 x!1 y!0 y00)) (* 8 (* x!1 y00)) (* 8 (* x!1 x00)) (* (- 7) (* x!1 x!1 x00)) (* 2 (* x!1 x!1 x!1 x00)) (* (- 3) (* y!0 x00)) (* 8 (* x!1 y!0 x00)) (* (- 7) (* x!1 x!1 y!0 x00)) (* 2 (* x!1 x!1 x!1 y!0 x00)) (* (- 1) (* y!0 y!0 x00)) (* 3 (* x!1 y!0 y!0 x00)) (* (- 3) (* x!1 x!1 y!0 y!0 x00)) (* x!1 x!1 x!1 y!0 y!0 x00) (* (- 1) ?x1088) (* 2 (* x!1 x!1 x!1 y!0 y00)) (* 2 (* x!1 x!1 x!1 y00)) (* (- 7) (* x!1 x!1 y00)) (* x!1 x!1 x!1 y!0 y!0 y00) (* (- 3) (* x!1 x!1 y!0 y!0 y00)) (* 3 (* x!1 y!0 y!0 y00)) (* (- 1) (* y!0 y!0 y00)) (* (- 1) ?x1065) (* 2 (* x!1 x!1 y!0)) (* (- 4) (* x!1 y!0)) (* (- 5) (* x!1 x!1)) (* x!1 x!1 y!0 y!0) (* (- 2) (* x!1 y!0 y!0)) ?x932 (* 4 (* x!1 x!1 x!1)) (* (- 1) ?x931))))
 (let (($x839 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x933 0)))))
 (let (($x237 (exists ((x Int) (y Int) )(! (let ((?x900 (* (- 1) (* x x x x))))
 (let ((?x916 (* 4 (* x x x))))
 (let ((?x778 (* y y)))
 (let ((?x733 (* (- 2) (* x y y))))
 (let ((?x774 (* x x y y)))
 (let ((?x765 (* x x)))
 (let ((?x934 (* (- 5) ?x765)))
 (let ((?x755 (* x y)))
 (let ((?x1200 (* (- 4) ?x755)))
 (let ((?x736 (* 2 (* x x y))))
 (let ((?x91 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x822 (* (- 1) ?x707)))
 (let ((?x471 (* (- 1) (* y y y00))))
 (let ((?x462 (* x y y y00)))
 (let ((?x390 (* 3 ?x462)))
 (let ((?x537 (* (- 3) (* x x y y y00))))
 (let ((?x458 (* x x x y y y00)))
 (let ((?x450 (* x x y00)))
 (let ((?x1199 (* (- 7) ?x450)))
 (let ((?x700 (* 2 (* x x x y00))))
 (let ((?x535 (* 2 (* x x x y y00))))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x523 (* (- 1) ?x404)))
 (let ((?x368 (* x x x y y x00)))
 (let ((?x383 (* (- 3) (* x x y y x00))))
 (let ((?x347 (* x y y x00)))
 (let ((?x349 (* 3 ?x347)))
 (let ((?x342 (* (- 1) (* y y x00))))
 (let ((?x381 (* 2 (* x x x y x00))))
 (let ((?x291 (* x x y x00)))
 (let ((?x1198 (* (- 7) ?x291)))
 (let ((?x282 (* x y x00)))
 (let ((?x1197 (* 8 ?x282)))
 (let ((?x647 (* (- 3) (* y x00))))
 (let ((?x398 (* 2 (* x x x x00))))
 (let ((?x157 (* x x x00)))
 (let ((?x1196 (* (- 7) ?x157)))
 (let ((?x153 (* x x00)))
 (let ((?x1195 (* 8 ?x153)))
 (let ((?x127 (* x y00)))
 (let ((?x1194 (* 8 ?x127)))
 (let ((?x118 (* x x y y00)))
 (let ((?x1193 (* (- 7) ?x118)))
 (let ((?x115 (* x y y00)))
 (let ((?x1191 (* 8 ?x115)))
 (let ((?x549 (* (- 3) (* y y00))))
 (let ((?x642 (* (- 3) x00)))
 (let ((?x698 (* (- 3) y00)))
 (let ((?x737 (* 2 y)))
 (let ((?x1103 (+ (* 2 x) ?x737 ?x698 ?x642 ?x549 ?x1191 ?x1193 ?x1194 ?x1195 ?x1196 ?x398 ?x647 ?x1197 ?x1198 ?x381 ?x342 ?x349 ?x383 ?x368 ?x523 ?x535 ?x700 ?x1199 ?x458 ?x537 ?x390 ?x471 ?x822 ?x736 ?x1200 ?x934 ?x774 ?x733 ?x778 ?x916 ?x900)))
 (let (($x89 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x89 (not (= ?x1103 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1209 (exists ((x Int) (y Int) )(! (let ((?x900 (* (- 1) (* x x x x))))
 (let ((?x916 (* 4 (* x x x))))
 (let ((?x778 (* y y)))
 (let ((?x733 (* (- 2) (* x y y))))
 (let ((?x774 (* x x y y)))
 (let ((?x755 (* x y)))
 (let ((?x1200 (* (- 4) ?x755)))
 (let ((?x736 (* 2 (* x x y))))
 (let ((?x91 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x822 (* (- 1) ?x707)))
 (let ((?x471 (* (- 1) (* y y y00))))
 (let ((?x462 (* x y y y00)))
 (let ((?x390 (* 3 ?x462)))
 (let ((?x537 (* (- 3) (* x x y y y00))))
 (let ((?x458 (* x x x y y y00)))
 (let ((?x450 (* x x y00)))
 (let ((?x1199 (* (- 7) ?x450)))
 (let ((?x700 (* 2 (* x x x y00))))
 (let ((?x535 (* 2 (* x x x y y00))))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x523 (* (- 1) ?x404)))
 (let ((?x368 (* x x x y y x00)))
 (let ((?x383 (* (- 3) (* x x y y x00))))
 (let ((?x347 (* x y y x00)))
 (let ((?x349 (* 3 ?x347)))
 (let ((?x342 (* (- 1) (* y y x00))))
 (let ((?x381 (* 2 (* x x x y x00))))
 (let ((?x291 (* x x y x00)))
 (let ((?x1198 (* (- 7) ?x291)))
 (let ((?x282 (* x y x00)))
 (let ((?x1197 (* 8 ?x282)))
 (let ((?x647 (* (- 3) (* y x00))))
 (let ((?x398 (* 2 (* x x x x00))))
 (let ((?x157 (* x x x00)))
 (let ((?x1196 (* (- 7) ?x157)))
 (let ((?x153 (* x x00)))
 (let ((?x1195 (* 8 ?x153)))
 (let ((?x127 (* x y00)))
 (let ((?x1194 (* 8 ?x127)))
 (let ((?x118 (* x x y y00)))
 (let ((?x1193 (* (- 7) ?x118)))
 (let ((?x115 (* x y y00)))
 (let ((?x1191 (* 8 ?x115)))
 (let ((?x549 (* (- 3) (* y y00))))
 (let ((?x642 (* (- 3) x00)))
 (let ((?x698 (* (- 3) y00)))
 (let ((?x737 (* 2 y)))
 (let ((?x1202 (+ x ?x737 ?x698 ?x642 ?x549 ?x1191 ?x1193 ?x1194 ?x1195 ?x1196 ?x398 ?x647 ?x1197 ?x1198 ?x381 ?x342 ?x349 ?x383 ?x368 ?x523 ?x535 ?x700 ?x1199 ?x458 ?x537 ?x390 ?x471 ?x822 ?x736 ?x1200 (* (- 3) (* x x)) ?x774 ?x733 ?x778 ?x916 ?x900 (* x (- 1) (- 1)) (* x x (- 1)) (* x (- 1) x))))
 (let (($x89 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x89 (not (= ?x1202 0)))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x1106 (lambda ((x Int) (y Int) )(let ((?x900 (* (- 1) (* x x x x))))
 (let ((?x916 (* 4 (* x x x))))
 (let ((?x778 (* y y)))
 (let ((?x733 (* (- 2) (* x y y))))
 (let ((?x774 (* x x y y)))
 (let ((?x765 (* x x)))
 (let ((?x934 (* (- 5) ?x765)))
 (let ((?x755 (* x y)))
 (let ((?x1200 (* (- 4) ?x755)))
 (let ((?x736 (* 2 (* x x y))))
 (let ((?x91 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x822 (* (- 1) ?x707)))
 (let ((?x471 (* (- 1) (* y y y00))))
 (let ((?x462 (* x y y y00)))
 (let ((?x390 (* 3 ?x462)))
 (let ((?x537 (* (- 3) (* x x y y y00))))
 (let ((?x458 (* x x x y y y00)))
 (let ((?x450 (* x x y00)))
 (let ((?x1199 (* (- 7) ?x450)))
 (let ((?x700 (* 2 (* x x x y00))))
 (let ((?x535 (* 2 (* x x x y y00))))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x523 (* (- 1) ?x404)))
 (let ((?x368 (* x x x y y x00)))
 (let ((?x383 (* (- 3) (* x x y y x00))))
 (let ((?x347 (* x y y x00)))
 (let ((?x349 (* 3 ?x347)))
 (let ((?x342 (* (- 1) (* y y x00))))
 (let ((?x381 (* 2 (* x x x y x00))))
 (let ((?x291 (* x x y x00)))
 (let ((?x1198 (* (- 7) ?x291)))
 (let ((?x282 (* x y x00)))
 (let ((?x1197 (* 8 ?x282)))
 (let ((?x647 (* (- 3) (* y x00))))
 (let ((?x398 (* 2 (* x x x x00))))
 (let ((?x157 (* x x x00)))
 (let ((?x1196 (* (- 7) ?x157)))
 (let ((?x153 (* x x00)))
 (let ((?x1195 (* 8 ?x153)))
 (let ((?x127 (* x y00)))
 (let ((?x1194 (* 8 ?x127)))
 (let ((?x118 (* x x y y00)))
 (let ((?x1193 (* (- 7) ?x118)))
 (let ((?x115 (* x y y00)))
 (let ((?x1191 (* 8 ?x115)))
 (let ((?x549 (* (- 3) (* y y00))))
 (let ((?x642 (* (- 3) x00)))
 (let ((?x698 (* (- 3) y00)))
 (let ((?x737 (* 2 y)))
 (let ((?x1103 (+ (* 2 x) ?x737 ?x698 ?x642 ?x549 ?x1191 ?x1193 ?x1194 ?x1195 ?x1196 ?x398 ?x647 ?x1197 ?x1198 ?x381 ?x342 ?x349 ?x383 ?x368 ?x523 ?x535 ?x700 ?x1199 ?x458 ?x537 ?x390 ?x471 ?x822 ?x736 ?x1200 ?x934 ?x774 ?x733 ?x778 ?x916 ?x900)))
 (let (($x89 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1079 (and $x89 (not (= ?x1103 0)))))
 (let ((?x1202 (+ x ?x737 ?x698 ?x642 ?x549 ?x1191 ?x1193 ?x1194 ?x1195 ?x1196 ?x398 ?x647 ?x1197 ?x1198 ?x381 ?x342 ?x349 ?x383 ?x368 ?x523 ?x535 ?x700 ?x1199 ?x458 ?x537 ?x390 ?x471 ?x822 ?x736 ?x1200 (* (- 3) ?x765) ?x774 ?x733 ?x778 ?x916 ?x900 (* x (- 1) (- 1)) (* x x (- 1)) (* x (- 1) x))))
 (let (($x607 (and $x89 (not (= ?x1202 0)))))
 (rewrite (= $x607 $x1079)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x767 (exists ((x Int) (y Int) )(! (let ((?x81 (+ (- 1) x)))
 (let ((?x563 (* ?x81 ?x81 ?x81 ?x81)))
 (let ((?x91 (+ 1 y)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x586 (* x00 ?x81 ?x81 ?x91)))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x781 (* y00 ?x81 ?x81 ?x91)))
 (let ((?x797 (+ ?x781 (* (- 1) (* x00 ?x81 ?x81 ?x81)) (* (- 1) (* x00 ?x81 ?x81 ?x81 ?x91 ?x91)) ?x404 (* (- 1) (* y00 ?x81 ?x81 ?x81 ?x91 ?x91)) ?x586 (* (- 1) (* y00 ?x81 ?x81 ?x81)) ?x707 (* (- 1) (* ?x81 ?x81 ?x91 ?x91)) ?x563)))
 (let (($x787 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x787 (not (= ?x797 0)))))))))))) :qid k!26))
 ))
 (let ((?x1211 (lambda ((x Int) (y Int) )(let ((?x900 (* (- 1) (* x x x x))))
 (let ((?x916 (* 4 (* x x x))))
 (let ((?x778 (* y y)))
 (let ((?x733 (* (- 2) (* x y y))))
 (let ((?x774 (* x x y y)))
 (let ((?x755 (* x y)))
 (let ((?x1200 (* (- 4) ?x755)))
 (let ((?x736 (* 2 (* x x y))))
 (let ((?x91 (+ 1 y)))
 (let ((?x81 (+ (- 1) x)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x822 (* (- 1) ?x707)))
 (let ((?x471 (* (- 1) (* y y y00))))
 (let ((?x462 (* x y y y00)))
 (let ((?x390 (* 3 ?x462)))
 (let ((?x537 (* (- 3) (* x x y y y00))))
 (let ((?x458 (* x x x y y y00)))
 (let ((?x450 (* x x y00)))
 (let ((?x1199 (* (- 7) ?x450)))
 (let ((?x700 (* 2 (* x x x y00))))
 (let ((?x535 (* 2 (* x x x y y00))))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x523 (* (- 1) ?x404)))
 (let ((?x368 (* x x x y y x00)))
 (let ((?x383 (* (- 3) (* x x y y x00))))
 (let ((?x347 (* x y y x00)))
 (let ((?x349 (* 3 ?x347)))
 (let ((?x342 (* (- 1) (* y y x00))))
 (let ((?x381 (* 2 (* x x x y x00))))
 (let ((?x291 (* x x y x00)))
 (let ((?x1198 (* (- 7) ?x291)))
 (let ((?x282 (* x y x00)))
 (let ((?x1197 (* 8 ?x282)))
 (let ((?x647 (* (- 3) (* y x00))))
 (let ((?x398 (* 2 (* x x x x00))))
 (let ((?x157 (* x x x00)))
 (let ((?x1196 (* (- 7) ?x157)))
 (let ((?x153 (* x x00)))
 (let ((?x1195 (* 8 ?x153)))
 (let ((?x127 (* x y00)))
 (let ((?x1194 (* 8 ?x127)))
 (let ((?x118 (* x x y y00)))
 (let ((?x1193 (* (- 7) ?x118)))
 (let ((?x115 (* x y y00)))
 (let ((?x1191 (* 8 ?x115)))
 (let ((?x549 (* (- 3) (* y y00))))
 (let ((?x642 (* (- 3) x00)))
 (let ((?x698 (* (- 3) y00)))
 (let ((?x737 (* 2 y)))
 (let ((?x1202 (+ x ?x737 ?x698 ?x642 ?x549 ?x1191 ?x1193 ?x1194 ?x1195 ?x1196 ?x398 ?x647 ?x1197 ?x1198 ?x381 ?x342 ?x349 ?x383 ?x368 ?x523 ?x535 ?x700 ?x1199 ?x458 ?x537 ?x390 ?x471 ?x822 ?x736 ?x1200 (* (- 3) (* x x)) ?x774 ?x733 ?x778 ?x916 ?x900 (* x (- 1) (- 1)) (* x x (- 1)) (* x (- 1) x))))
 (let (($x89 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x607 (and $x89 (not (= ?x1202 0)))))
 (let ((?x563 (* ?x81 ?x81 ?x81 ?x81)))
 (let ((?x586 (* x00 ?x81 ?x81 ?x91)))
 (let ((?x781 (* y00 ?x81 ?x81 ?x91)))
 (let ((?x797 (+ ?x781 (* (- 1) (* x00 ?x81 ?x81 ?x81)) (* (- 1) (* x00 ?x81 ?x81 ?x81 ?x91 ?x91)) ?x404 (* (- 1) (* y00 ?x81 ?x81 ?x81 ?x91 ?x91)) ?x586 (* (- 1) (* y00 ?x81 ?x81 ?x81)) ?x707 (* (- 1) (* ?x81 ?x81 ?x91 ?x91)) ?x563)))
 (let (($x787 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x752 (and $x787 (not (= ?x797 0)))))
 (rewrite (= $x752 $x607)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x376 (exists ((x Int) (y Int) )(! (let ((?x81 (+ (- 1) x)))
 (let ((?x563 (* ?x81 ?x81 ?x81 ?x81)))
 (let ((?x91 (+ 1 y)))
 (let ((?x936 (* ?x81 ?x81 ?x91 ?x91)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x822 (* (- 1) ?x707)))
 (let ((?x898 (* y00 ?x81 ?x81 ?x81)))
 (let ((?x750 (* y00 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x523 (* (- 1) ?x404)))
 (let ((?x732 (* x00 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x740 (* x00 ?x81 ?x81 ?x81)))
 (let ((?x570 (+ (* (- 1) (* y00 ?x81 ?x81 ?x91)) ?x740 ?x732 ?x523 ?x750 (* (- 1) (* x00 ?x81 ?x81 ?x91)) ?x898 ?x822 ?x936 (* (- 1) ?x563))))
 (let (($x787 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x787 (not (= ?x570 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x837 (lambda ((x Int) (y Int) )(let ((?x81 (+ (- 1) x)))
 (let ((?x563 (* ?x81 ?x81 ?x81 ?x81)))
 (let ((?x91 (+ 1 y)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x586 (* x00 ?x81 ?x81 ?x91)))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x781 (* y00 ?x81 ?x81 ?x91)))
 (let ((?x797 (+ ?x781 (* (- 1) (* x00 ?x81 ?x81 ?x81)) (* (- 1) (* x00 ?x81 ?x81 ?x81 ?x91 ?x91)) ?x404 (* (- 1) (* y00 ?x81 ?x81 ?x81 ?x91 ?x91)) ?x586 (* (- 1) (* y00 ?x81 ?x81 ?x81)) ?x707 (* (- 1) (* ?x81 ?x81 ?x91 ?x91)) ?x563)))
 (let (($x787 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x752 (and $x787 (not (= ?x797 0)))))
 (let ((?x936 (* ?x81 ?x81 ?x91 ?x91)))
 (let ((?x822 (* (- 1) ?x707)))
 (let ((?x898 (* y00 ?x81 ?x81 ?x81)))
 (let ((?x750 (* y00 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x523 (* (- 1) ?x404)))
 (let ((?x732 (* x00 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x740 (* x00 ?x81 ?x81 ?x81)))
 (let ((?x570 (+ (* (- 1) ?x781) ?x740 ?x732 ?x523 ?x750 (* (- 1) ?x586) ?x898 ?x822 ?x936 (* (- 1) ?x563))))
 (let (($x744 (and $x787 (not (= ?x570 0)))))
 (rewrite (= $x744 $x752))))))))))))))))))))))
 ))
 (let (($x60 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x44 (+ (- ?x40 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (let ((?x50 (- (+ (- ?x44 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 ?x35 y00)) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x55 (- (+ ?x50 (* 0 ?x35 ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x55 0)))))))))) :qid k!26))
 ))
 (let ((?x735 (lambda ((x Int) (y Int) )(let ((?x81 (+ (- 1) x)))
 (let ((?x563 (* ?x81 ?x81 ?x81 ?x81)))
 (let ((?x91 (+ 1 y)))
 (let ((?x936 (* ?x81 ?x81 ?x91 ?x91)))
 (let ((?x707 (* ?x81 ?x81 ?x81 ?x91 ?x91 ?x91)))
 (let ((?x822 (* (- 1) ?x707)))
 (let ((?x898 (* y00 ?x81 ?x81 ?x81)))
 (let ((?x750 (* y00 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x404 (* ?x81 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x523 (* (- 1) ?x404)))
 (let ((?x732 (* x00 ?x81 ?x81 ?x81 ?x91 ?x91)))
 (let ((?x740 (* x00 ?x81 ?x81 ?x81)))
 (let ((?x570 (+ (* (- 1) (* y00 ?x81 ?x81 ?x91)) ?x740 ?x732 ?x523 ?x750 (* (- 1) (* x00 ?x81 ?x81 ?x91)) ?x898 ?x822 ?x936 (* (- 1) ?x563))))
 (let (($x787 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x744 (and $x787 (not (= ?x570 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (+ (* (- 1) ?x35 ?x35 ?x36 y00) (* ?x35 ?x35 ?x35 x00) (* ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x44 (+ (- ?x40 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (let ((?x50 (- (+ (- ?x44 (* ?x35 ?x35 x00 ?x36)) (* ?x35 ?x35 ?x35 y00)) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36))))
 (let ((?x55 (- (+ ?x50 (* 0 ?x35 ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35))))
 (let (($x59 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x55 0))))))
 (rewrite (= $x59 $x744)))))))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x585 (mp (mp @x61 (quant-intro (proof-bind ?x735) (= $x60 $x376)) $x376) (rewrite (= $x376 $x376)) $x376)))
 (let ((@x1077 (mp (mp @x585 (quant-intro (proof-bind ?x837) (= $x376 $x767)) $x767) (quant-intro (proof-bind ?x1211) (= $x767 $x1209)) $x1209)))
 (let ((@x938 (mp~ (mp @x1077 (quant-intro (proof-bind ?x1106) (= $x1209 $x237)) $x237) (sk (~ $x237 $x839)) $x839)))
 (let ((@x271 (mp @x938 (rewrite (= $x839 $x596)) $x596)))
 (let ((@x272 (and-elim @x271 $x582)))
 (let ((@x653 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x582) $x289)) @x272 $x289)))
 (let (($x286 (>= ?x578 0)))
 (let ((@x315 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x582) $x286)) @x272 $x286)))
 (let (($x652 (not (>= ?x266 0))))
 (let (($x296 (<= ?x266 0)))
 (let ((@x183 ((_ th-lemma arith) (hypothesis (not $x296)) @x315 @x653 @x315 @x653 @x315 @x653 false)))
 (let ((@x843 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x268 (not $x296) $x652)) (and-elim @x271 $x635) (or (not $x296) $x652))))
 ((_ th-lemma arith) (unit-resolution @x843 (lemma @x183 $x296) $x652) @x315 @x653 @x315 @x653 @x315 @x653 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             294
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-pivots              3
 :arith-row-summations      3
 :arith-tableau-max-columns 52
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.68
 :memory                    3.19
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1357130
 :num-checks                1
 :propagations              4
 :rlimit-count              7033
 :time                      0.01
 :total-time                0.02)
