unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1496 (to_real y!0)))
 (let ((?x1093 (to_real b!2)))
 (let ((?x507 (* ?x1093 ?x1496)))
 (let ((?x140 (+ (* (/ 1.0 2.0) (* (to_real a00) (to_real d!1))) ?x507 (* (- (/ 1.0 2.0)) (* (to_real a!3) (to_real d!1))) (* (- 1.0) (* (to_real y00) ?x1093)))))
 (let (($x113 (>= ?x140 0.0)))
 (let ((?x350 (* d!1 a!3)))
 (let ((?x229 (to_real ?x350)))
 (let ((?x413 (+ ?x229 (* (- 1.0) (* (to_real a!3) (to_real d!1))))))
 (let (($x438 (>= ?x413 0.0)))
 (let (($x415 (= ?x413 0.0)))
 (let ((@x1700 (lemma (unit-resolution ((_ th-lemma arith) $x415) (hypothesis (not $x415)) false) $x415)))
 (let ((?x368 (+ ?x507 (* (- 1.0) (to_real (* y!0 b!2))))))
 (let (($x1938 (>= ?x368 0.0)))
 (let (($x369 (= ?x368 0.0)))
 (let ((@x855 ((_ th-lemma arith) $x369)))
 (let ((?x1225 (to_real d!1)))
 (let ((?x69 (to_real a00)))
 (let ((?x1858 (* ?x69 ?x1225)))
 (let ((?x942 (+ ?x1858 (* (- 1.0) (to_real (* a00 d!1))))))
 (let (($x1893 (>= ?x942 0.0)))
 (let (($x1865 (= 0.0 ?x942)))
 (let ((@x228 (symm (commutativity (= $x1865 (= ?x942 0.0))) (= (= ?x942 0.0) $x1865))))
 (let ((@x758 (mp ((_ th-lemma arith) (= ?x942 0.0)) @x228 $x1865)))
 (let ((?x792 (+ ?x350 (* (- 2) (* y!0 b!2)) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let (($x1623 (<= ?x792 0)))
 (let (($x740 (= 0 ?x792)))
 (let ((@x961 (symm (commutativity (= $x740 (= ?x792 0))) (= (= ?x792 0) $x740))))
 (let (($x1452 (= ?x792 0)))
 (let ((?x1092 (to_real a!3)))
 (let ((?x1915 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496)))
 (let ((?x209 (* (/ 3.0 32.0) ?x1915)))
 (let ((?x1913 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)))
 (let ((?x1198 (* (- (/ 1.0 8.0)) ?x1913)))
 (let ((?x1902 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496)))
 (let ((?x1311 (* (- (/ 3.0 32.0)) ?x1902)))
 (let ((?x1755 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496)))
 (let ((?x1100 (* (- (/ 9.0 16.0)) ?x1755)))
 (let ((?x1748 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225)))
 (let ((?x1128 (* (- (/ 1.0 64.0)) ?x1748)))
 (let ((?x1740 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496)))
 (let ((?x1685 (* (- (/ 9.0 32.0)) ?x1740)))
 (let ((?x1738 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496)))
 (let ((?x1095 (* (- (/ 9.0 16.0)) ?x1738)))
 (let ((?x1696 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496)))
 (let ((?x644 (* (- (/ 3.0 16.0)) ?x1696)))
 (let ((?x1693 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)))
 (let ((?x1892 (* (- (/ 1.0 8.0)) ?x1693)))
 (let ((?x1658 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225)))
 (let ((?x1537 (* (- (/ 3.0 32.0)) ?x1658)))
 (let ((?x1617 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225)))
 (let ((?x626 (* (/ 1.0 64.0) ?x1617)))
 (let ((?x1591 (* ?x1225 ?x1225)))
 (let ((?x169 (* (- (/ 1.0 4.0)) ?x1591)))
 (let ((?x1558 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496)))
 (let ((?x504 (* (- (/ 3.0 32.0)) ?x1558)))
 (let ((?x1539 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1496)))
 (let ((?x1463 (* (- (/ 3.0 8.0)) ?x1539)))
 (let ((?x1530 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1496)))
 (let ((?x791 (* (- (/ 1.0 8.0)) ?x1530)))
 (let ((?x1456 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1496)))
 (let ((?x307 (* (- (/ 3.0 8.0)) ?x1456)))
 (let ((?x1451 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)))
 (let ((?x1078 (* (- (/ 1.0 8.0)) ?x1451)))
 (let ((?x1445 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)))
 (let ((?x1449 (* (- (/ 3.0 8.0)) ?x1445)))
 (let ((?x1365 (* ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496)))
 (let ((?x182 (* (- (/ 3.0 64.0)) ?x1365)))
 (let ((?x1189 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496)))
 (let ((?x321 (* (/ 1.0 32.0) ?x1189)))
 (let ((?x1138 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496)))
 (let ((?x756 (* (- (/ 9.0 32.0)) ?x1138)))
 (let ((?x1098 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)))
 (let ((?x1389 (* (- (/ 3.0 8.0)) ?x1098)))
 (let ((?x1079 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)))
 (let ((?x1405 (* (- (/ 3.0 8.0)) ?x1079)))
 (let ((?x1077 (* ?x1496 ?x1496)))
 (let ((?x1080 (* (- 1.0) ?x1077)))
 (let ((?x1075 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)))
 (let ((?x390 (* (- (/ 3.0 8.0)) ?x1075)))
 (let ((?x1017 (* ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496)))
 (let ((?x542 (* (- (/ 3.0 128.0)) ?x1017)))
 (let ((?x789 (* ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225)))
 (let ((?x351 (* (- (/ 1.0 256.0)) ?x789)))
 (let ((?x651 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496)))
 (let ((?x1888 (* (- (/ 3.0 16.0)) ?x651)))
 (let ((?x473 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225)))
 (let ((?x1875 (* (/ 3.0 64.0) ?x473)))
 (let ((?x387 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496)))
 (let ((?x1401 (* (/ 3.0 32.0) ?x387)))
 (let ((?x377 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225)))
 (let ((?x1667 (* (- (/ 1.0 32.0)) ?x377)))
 (let ((?x371 (* ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)))
 (let ((?x212 (* (- (/ 1.0 32.0)) ?x371)))
 (let ((?x366 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496)))
 (let ((?x1616 (* (/ 1.0 32.0) ?x366)))
 (let ((?x305 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225)))
 (let ((?x1644 (* (- (/ 3.0 64.0)) ?x305)))
 (let ((?x303 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225)))
 (let ((?x1105 (* (- (/ 3.0 64.0)) ?x303)))
 (let ((?x248 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1496)))
 (let ((?x1015 (* (- (/ 1.0 8.0)) ?x248)))
 (let ((?x241 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225)))
 (let ((?x1697 (* (- (/ 1.0 32.0)) ?x241)))
 (let ((?x240 (* ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225)))
 (let ((?x147 (* (- (/ 3.0 32.0)) ?x240)))
 (let ((?x238 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)))
 (let ((?x670 (* (- (/ 1.0 8.0)) ?x238)))
 (let ((?x215 (* ?x1225 ?x1496)))
 (let ((?x952 (* (- 1.0) ?x215)))
 (let ((?x189 (* ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225)))
 (let ((?x1912 (* (/ 3.0 64.0) ?x189)))
 (let ((?x183 (* ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225)))
 (let ((?x1227 (* (/ 1.0 64.0) ?x183)))
 (let ((?x166 (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225)))
 (let ((?x1115 (* (- (/ 1.0 64.0)) ?x166)))
 (let ((?x185 (+ ?x1115 ?x1227 ?x1912 ?x952 ?x670 ?x147 ?x1697 ?x1015 ?x1105 ?x1644 ?x1616 ?x212 ?x1667 ?x1401 ?x1875 ?x1888 ?x351 ?x542 ?x390 ?x1080 ?x1405 ?x1389 ?x756 ?x321 ?x182 ?x1449 ?x1078 ?x307 ?x791 ?x1463 ?x504 ?x169 ?x626 ?x1537 ?x1892 ?x644 ?x1095 ?x1685 ?x1128 ?x1100 ?x1311 ?x1198 ?x209)))
 (let ((?x66 (to_real y00)))
 (let ((?x1827 (* ?x66 ?x1093)))
 (let ((?x510 (* (- 1.0) ?x507)))
 (let ((?x1322 (* (+ ?x510 (* (/ 1.0 2.0) (* ?x1092 ?x1225)) ?x1827 (* (- (/ 1.0 2.0)) ?x1858)) ?x185)))
 (let (($x375 (= ?x1322 0.0)))
 (let (($x1646 (not $x375)))
 (let ((?x441 (* (- (/ 1.0 16.0)) (* ?x1092 ?x1092 ?x1092 ?x1092 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496))))
 (let ((?x1356 (* (- (/ 1.0 8.0)) (* ?x66 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496))))
 (let ((?x1040 (* (/ 1.0 16.0) (* ?x69 ?x1092 ?x1092 ?x1092 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496))))
 (let ((?x432 (* (/ 1.0 64.0) (* ?x1092 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496))))
 (let ((?x706 (* ?x1093 ?x1496 ?x1496 ?x1496)))
 (let ((?x1033 (* (- (/ 1.0 64.0)) (* ?x69 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496))))
 (let ((?x1032 (* (- (/ 1.0 32.0)) (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496 ?x1496))))
 (let ((?x1035 (* (/ 1.0 32.0) (* ?x66 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496))))
 (let ((?x243 (* (/ 1.0 8.0) (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496 ?x1496))))
 (let ((?x1363 (+ ?x243 ?x1035 (* (- (/ 1.0 64.0)) (* ?x1092 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)) ?x1032 ?x1033 (* (/ 1.0 32.0) (* ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496 ?x1496)) ?x706 (* (- (/ 1.0 2.0)) (* ?x1092 ?x1225 ?x1496 ?x1496)) (* (- 1.0) (* ?x66 ?x1093 ?x1496 ?x1496)) (* (/ 1.0 16.0) (* ?x69 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1496 ?x1496)) (* (- (/ 1.0 16.0)) (* ?x1092 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1225 ?x1496 ?x1496)) (* (/ 1.0 64.0) (* ?x69 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)) ?x432 (* (- (/ 1.0 8.0)) (* ?x66 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)) ?x1040 (* (/ 1.0 8.0) (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496)) (* (/ 1.0 2.0) (* ?x69 ?x1225 ?x1496 ?x1496)) ?x1356 ?x441 (* (- (/ 1.0 32.0)) (* ?x66 ?x1093 ?x1093 ?x1093 ?x1225 ?x1225 ?x1225 ?x1496 ?x1496 ?x1496)))))
 (let (($x342 (= ?x1363 0.0)))
 (let (($x1625 (or (not $x342) $x1646)))
 (let ((?x117 (* b00 y00)))
 (let ((?x118 (* (- 2) ?x117)))
 (let ((?x35 (* a00 d00)))
 (let (($x677 (= (+ ?x35 ?x118 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x1753 (and $x677 (= (+ (* b00 d!1) (* (- 1) (* d00 b!2))) 0) $x1452 $x1625)))
 (let ((?x1274 (+ ?x1892 (* (- (/ 1.0 32.0)) (* ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496)) (* (/ 1.0 32.0) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496)) ?x1080 (* (- (/ 1.0 8.0)) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1496 ?x1496 ?x1496)) ?x1449 ?x1078 ?x390 (* (- (/ 1.0 32.0)) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093)) (* (- (/ 3.0 32.0)) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093)) (* (- (/ 3.0 32.0)) (* ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093)) (* (- (/ 1.0 32.0)) (* ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093)) (* (- (/ 1.0 8.0)) (* ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496)) (* (- (/ 3.0 8.0)) (* ?x1225 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496)) (* (- (/ 3.0 8.0)) (* ?x1225 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496)) (* (- (/ 1.0 8.0)) (* ?x1225 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496)) (* (- (/ 1.0 256.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1093 ?x1093)) (* (- (/ 3.0 128.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1496)) (* (- (/ 3.0 64.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1496 ?x1496)) (* (/ 1.0 64.0) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093)) (* (/ 3.0 64.0) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093)) (* (/ 3.0 64.0) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093)) (* (/ 1.0 64.0) (* ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093)) (* (/ 3.0 32.0) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496)) (* (/ 3.0 32.0) (* ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496)) (* (/ 1.0 32.0) (* ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496)) ?x169 ?x952 (* (- (/ 1.0 64.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093)) (* (- (/ 3.0 64.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1093 ?x1093)) (* (- (/ 3.0 64.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1093)) (* (- (/ 1.0 64.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1093)) (* (- (/ 3.0 32.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1496)) (* (- (/ 9.0 32.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1093 ?x1093 ?x1496)) (* (- (/ 9.0 32.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496)) (* (- (/ 3.0 32.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496)) (* (- (/ 3.0 16.0)) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1496 ?x1496)) (* (- (/ 9.0 16.0)) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1093 ?x1093 ?x1496 ?x1496)) (* (- (/ 9.0 16.0)) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)) (* (- (/ 3.0 16.0)) (* ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)) (* (- (/ 3.0 8.0)) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496)) (* (- (/ 3.0 8.0)) (* ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496)) (* (- (/ 1.0 8.0)) (* ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496)))))
 (let ((?x1871 (+ (* (/ 1.0 2.0) (* ?x1225 ?x1092)) ?x510 (* ?x1093 ?x66) (* (- (/ 1.0 2.0)) (* ?x1225 ?x69)))))
 (let ((?x1504 (* (- (/ 1.0 16.0)) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1496 ?x1496 ?x1496 ?x69))))
 (let ((?x1783 (* (/ 1.0 8.0) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496 ?x66))))
 (let ((?x1802 (* (- (/ 1.0 8.0)) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496 ?x1496))))
 (let ((?x1826 (* (/ 1.0 16.0) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1092 ?x1093 ?x1496 ?x1496 ?x1496))))
 (let ((?x707 (* (/ 1.0 64.0) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496 ?x69))))
 (let ((?x514 (* (- (/ 1.0 32.0)) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x66))))
 (let ((?x503 (* (/ 1.0 32.0) (* ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496))))
 (let ((?x696 (* (- (/ 1.0 64.0)) (* ?x1225 ?x1225 ?x1225 ?x1092 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496))))
 (let ((?x1341 (+ (* (/ 1.0 16.0) (* ?x1225 ?x1092 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496)) (* (- (/ 1.0 8.0)) (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496)) (* (/ 1.0 8.0) (* ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x66)) (* (- (/ 1.0 16.0)) (* ?x1225 ?x1092 ?x1092 ?x1092 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x69)) (* (/ 1.0 64.0) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1092 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496)) (* (- (/ 1.0 32.0)) (* ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496 ?x1496)) (* (/ 1.0 32.0) (* ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496 ?x66)) (* (- (/ 1.0 64.0)) (* ?x1225 ?x1225 ?x1225 ?x1225 ?x1093 ?x1093 ?x1496 ?x1496 ?x1496 ?x69)) ?x696 ?x503 ?x514 ?x707 (* (/ 1.0 2.0) (* ?x1225 ?x1092 ?x1496 ?x1496)) (* (- 1.0) ?x706) (* ?x1093 ?x1496 ?x1496 ?x66) (* (- (/ 1.0 2.0)) (* ?x1225 ?x1496 ?x1496 ?x69)) ?x1826 ?x1802 ?x1783 ?x1504)))
 (let ((?x1494 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x1330 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x118 (* 2 (* y!0 b00))) 0)))
 (let (($x1689 (and $x1330 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x1494 0) (or (not (= ?x1341 0.0)) (not (= (* ?x1871 ?x1274) 0.0))))))
 (let (($x530 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1987 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1984 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1978 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1975 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x349 (* (- 1.0) (* ?x63 ?x63))))
 (let ((?x1986 (+ (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) ?x349 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 3.0 8.0)) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 3.0 8.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 3.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56)) (* (- 1.0) (* ?x56 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (- (/ 9.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (- (/ 9.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) ?x1975 ?x1978 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1984 ?x1987 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)))))
 (let ((?x180 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x264 (+ ?x180 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x546 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x550 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x549 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x557 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x567 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x69))))
 (let ((?x566 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x66))))
 (let ((?x564 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x563 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x547 (+ (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69)) ?x563 ?x564 ?x566 ?x567 (* (/ 1.0 2.0) (* ?x56 ?x59 ?x63 ?x63)) (* (- 1.0) (* ?x61 ?x63 ?x63 ?x63)) (* ?x61 ?x63 ?x63 ?x66) (* (- (/ 1.0 2.0)) (* ?x56 ?x63 ?x63 ?x69)) ?x557 ?x549 ?x550 ?x546)))
 (let ((?x48 (* a d)))
 (let ((?x187 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x117 (* b00 y00)))
 (let ((?x118 (* (- 2) ?x117)))
 (let ((?x35 (* a00 d00)))
 (let (($x150 (= (+ ?x35 (* (- 1) (* a d00)) ?x118 (* 2 (* y b00))) 0)))
 (and $x150 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x187 0) (or (not (= ?x547 0.0)) (not (= (* ?x264 ?x1986) 0.0))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x1055 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x1063 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1123 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x440 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x1063 ?x1063 ?x1063)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063)) (* (- 1.0) (* ?x1063 ?x1063)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063 ?x1063)))))
 (let ((?x1106 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1073 (* ?x66 ?x61)))
 (let ((?x632 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1123)) (* (- 1.0) (* ?x61 ?x1063)) ?x1073 ?x1106) ?x440)))
 (let ((?x349 (* (- 1.0) (* ?x63 ?x63))))
 (let ((?x327 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x63 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x349 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x578 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x1073 ?x1106) ?x327)))
 (let (($x312 (or (not (= ?x578 0.0)) (not (= ?x632 0.0)))))
 (let ((?x1897 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1911 (= ?x1897 0)))
 (let ((?x1803 (* d00 a)))
 (let ((?x1111 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1803)))
 (and (= ?x1111 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1911 $x312)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1056 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1987 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1984 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x1978 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1975 (* (- (/ 9.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x349 (* (- 1.0) (* ?x63 ?x63))))
 (let ((?x1986 (+ (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) ?x349 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 3.0 8.0)) (* ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 3.0 8.0)) (* ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 256.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 3.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56)) (* (- 1.0) (* ?x56 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (- (/ 9.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (- (/ 9.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) ?x1975 ?x1978 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) ?x1984 ?x1987 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)))))
 (let ((?x180 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x264 (+ ?x180 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x546 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x550 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66))))
 (let ((?x549 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x557 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x567 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x69))))
 (let ((?x566 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x66))))
 (let ((?x564 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x563 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x547 (+ (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x66)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 ?x69)) ?x563 ?x564 ?x566 ?x567 (* (/ 1.0 2.0) (* ?x56 ?x59 ?x63 ?x63)) (* (- 1.0) (* ?x61 ?x63 ?x63 ?x63)) (* ?x61 ?x63 ?x63 ?x66) (* (- (/ 1.0 2.0)) (* ?x56 ?x63 ?x63 ?x69)) ?x557 ?x549 ?x550 ?x546)))
 (let ((?x48 (* a d)))
 (let ((?x187 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x117 (* b00 y00)))
 (let ((?x118 (* (- 2) ?x117)))
 (let ((?x35 (* a00 d00)))
 (let (($x150 (= (+ ?x35 (* (- 1) (* a d00)) ?x118 (* 2 (* y b00))) 0)))
 (let (($x1969 (and $x150 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x187 0) (or (not (= ?x547 0.0)) (not (= (* ?x264 ?x1986) 0.0))))))
 (let ((?x1063 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x1123 (+ ?x59 ?x61)))
 (let ((?x440 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x1063 ?x1063 ?x1063)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063)) (* (- 1.0) (* ?x1063 ?x1063)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063 ?x1063)))))
 (let ((?x1106 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x1073 (* ?x66 ?x61)))
 (let ((?x632 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1123)) (* (- 1.0) (* ?x61 ?x1063)) ?x1073 ?x1106) ?x440)))
 (let ((?x327 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x63 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x349 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let (($x579 (not (= (* (+ ?x180 (* (- 1.0) (* ?x63 ?x61)) ?x1073 ?x1106) ?x327) 0.0))))
 (let (($x312 (or $x579 (not (= ?x632 0.0)))))
 (let ((?x1897 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1911 (= ?x1897 0)))
 (let ((?x1803 (* d00 a)))
 (let (($x1161 (= (+ (* 2 ?x117) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x1803) 0)))
 (let (($x1244 (and $x1161 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1911 $x312)))
 (rewrite (= $x1244 $x1969)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1234 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x1063 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1123 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x440 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x1063 ?x1063 ?x1063)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063)) (* (- 1.0) (* ?x1063 ?x1063)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063 ?x1063)))))
 (let ((?x1106 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1073 (* ?x66 ?x61)))
 (let ((?x632 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1123)) (* (- 1.0) (* ?x61 ?x1063)) ?x1073 ?x1106) ?x440)))
 (let ((?x349 (* (- 1.0) (* ?x63 ?x63))))
 (let ((?x327 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x63 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x349 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x578 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x1073 ?x1106) ?x327)))
 (let (($x312 (or (not (= ?x578 0.0)) (not (= ?x632 0.0)))))
 (let ((?x1897 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1911 (= ?x1897 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x117 (* b00 y00)))
 (let ((?x118 (* (- 2) ?x117)))
 (let (($x380 (= (+ ?x118 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x380 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1911 $x312)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1103 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x1063 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1123 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x440 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x1063 ?x1063 ?x1063)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063)) (* (- 1.0) (* ?x1063 ?x1063)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063 ?x1063)))))
 (let ((?x1106 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1073 (* ?x66 ?x61)))
 (let ((?x632 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1123)) (* (- 1.0) (* ?x61 ?x1063)) ?x1073 ?x1106) ?x440)))
 (let ((?x349 (* (- 1.0) (* ?x63 ?x63))))
 (let ((?x327 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x63 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x349 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x578 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x1073 ?x1106) ?x327)))
 (let (($x312 (or (not (= ?x578 0.0)) (not (= ?x632 0.0)))))
 (let ((?x1897 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1911 (= ?x1897 0)))
 (let ((?x1803 (* d00 a)))
 (let ((?x1111 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1803)))
 (let (($x1244 (and (= ?x1111 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1911 $x312)))
 (let ((?x35 (* a00 d00)))
 (let ((?x117 (* b00 y00)))
 (let ((?x118 (* (- 2) ?x117)))
 (let (($x1258 (and (= (+ ?x118 ?x35 (* 2 (* b00 y)) (* (- 1) ?x1803)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1911 $x312)))
 (rewrite (= $x1258 $x1244)))))))))))))))))))))))))))
 ))
 (let (($x109 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x84 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x90 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x88 (to_real (+ a b))))
 (let ((?x97 (- (* (to_real (- 1)) ?x88 ?x88 ?x88 ?x62 ?x62 ?x62 ?x90 ?x90) (* ?x62 ?x62 ?x58 ?x58 ?x58 ?x90 ?x90 ?x90))))
 (let ((?x102 (- (+ ?x97 (* ?x88 ?x88 ?x88 ?x62 ?x62 ?x62 ?x58 ?x58 ?x90)) (* ?x90 ?x90))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x104 (* (- (+ (- (* ?x88 ?x58) (* ?x57 ?x62 ?x90)) ?x67) ?x70) (- ?x102 (* ?x88 ?x88 ?x88 ?x62 ?x58 ?x58 ?x90 ?x90 ?x90)))))
 (let ((?x59 (to_real a)))
 (let ((?x75 (- (* (to_real (- 1)) ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x63 ?x63) (* ?x62 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63 ?x63))))
 (let ((?x81 (- (+ ?x75 (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x58 ?x63)) (to_real (* y y)))))
 (let ((?x83 (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) (- ?x81 (* ?x59 ?x59 ?x59 ?x62 ?x58 ?x58 ?x63 ?x63 ?x63)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x83 ?x84)) (not (= ?x104 ?x84)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1233 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x1063 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1123 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x440 (+ (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x1063 ?x1063 ?x1063)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x1123 ?x1123 ?x1123 ?x1063)) (* (- 1.0) (* ?x1063 ?x1063)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x1123 ?x1123 ?x1123 ?x1063 ?x1063 ?x1063)))))
 (let ((?x1106 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x1073 (* ?x66 ?x61)))
 (let ((?x632 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1123)) (* (- 1.0) (* ?x61 ?x1063)) ?x1073 ?x1106) ?x440)))
 (let ((?x349 (* (- 1.0) (* ?x63 ?x63))))
 (let ((?x327 (+ (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 32.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 32.0) (* ?x63 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59)) ?x349 (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x578 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x1073 ?x1106) ?x327)))
 (let (($x312 (or (not (= ?x578 0.0)) (not (= ?x632 0.0)))))
 (let ((?x1897 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1911 (= ?x1897 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x117 (* b00 y00)))
 (let ((?x118 (* (- 2) ?x117)))
 (let (($x380 (= (+ ?x118 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x1258 (and $x380 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1911 $x312)))
 (let ((?x84 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x90 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x88 (to_real (+ a b))))
 (let ((?x97 (- (* (to_real (- 1)) ?x88 ?x88 ?x88 ?x62 ?x62 ?x62 ?x90 ?x90) (* ?x62 ?x62 ?x58 ?x58 ?x58 ?x90 ?x90 ?x90))))
 (let ((?x102 (- (+ ?x97 (* ?x88 ?x88 ?x88 ?x62 ?x62 ?x62 ?x58 ?x58 ?x90)) (* ?x90 ?x90))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x94 (- (+ (- (* ?x88 ?x58) (* ?x57 ?x62 ?x90)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let (($x105 (= (* ?x94 (- ?x102 (* ?x88 ?x88 ?x88 ?x62 ?x58 ?x58 ?x90 ?x90 ?x90))) ?x84)))
 (let ((?x75 (- (* (to_real (- 1)) ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x63 ?x63) (* ?x62 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63 ?x63))))
 (let ((?x81 (- (+ ?x75 (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x58 ?x63)) (to_real (* y y)))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let (($x85 (= (* ?x71 (- ?x81 (* ?x59 ?x59 ?x59 ?x62 ?x58 ?x58 ?x63 ?x63 ?x63))) ?x84)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x108 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x85) (not $x105)))))
 (rewrite (= $x108 $x1258))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x110 (asserted $x109)))
 (let ((@x1598 (mp (mp @x110 (quant-intro (proof-bind ?x1233) (= $x109 $x1234)) $x1234) (rewrite (= $x1234 $x1234)) $x1234)))
 (let ((@x1780 (mp (mp @x1598 (quant-intro (proof-bind ?x1103) (= $x1234 $x1055)) $x1055) (quant-intro (proof-bind ?x1056) (= $x1055 $x530)) $x530)))
 (let ((@x668 (mp (mp~ @x1780 (sk (~ $x530 $x1689)) $x1689) (rewrite (= $x1689 $x1753)) $x1753)))
 (let ((@x482 (mp (and-elim @x668 $x1452) @x961 $x740)))
 (let ((@x660 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x1623)) @x482 $x1623)))
 (let ((?x1265 (+ (* (- 1.0) (to_real (* y00 b!2))) ?x1827)))
 (let (($x1769 (<= ?x1265 0.0)))
 (let (($x171 (= 0.0 ?x1265)))
 (let ((@x1831 (symm (commutativity (= $x171 (= ?x1265 0.0))) (= (= ?x1265 0.0) $x171))))
 (let ((@x558 (unit-resolution (hypothesis (not $x171)) (mp ((_ th-lemma arith) (= ?x1265 0.0)) @x1831 $x171) false)))
 (let ((@x405 (lemma @x558 $x171)))
 (let ((@x1842 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x1769)) @x405 $x1769) (hypothesis (not $x113)) (hypothesis $x438) @x660 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1865) $x1893)) @x758 $x1893) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x369) $x1938)) @x855 $x1938) false)))
 (let ((@x901 (unit-resolution (lemma @x1842 (or (not $x438) $x113)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x415) $x438)) @x1700 $x438) $x113)))
 (let ((?x1177 (+ (* (/ 1.0 32.0) ?x241) (* (/ 1.0 8.0) ?x248) (* (/ 3.0 64.0) ?x303) (* (/ 3.0 64.0) ?x305) (* (- (/ 1.0 32.0)) ?x366) (* (/ 1.0 32.0) ?x371) (* (/ 1.0 32.0) ?x377) (* (- (/ 3.0 32.0)) ?x387) (* (- (/ 3.0 64.0)) ?x473) (* (/ 3.0 16.0) ?x651) (* (/ 1.0 256.0) ?x789) (* (/ 3.0 128.0) ?x1017) (* (/ 3.0 8.0) ?x1075) ?x1077 (* (/ 3.0 8.0) ?x1079) (* (/ 3.0 8.0) ?x1098) (* (/ 9.0 32.0) ?x1138) (* (- (/ 1.0 32.0)) ?x1189) (* (/ 3.0 64.0) ?x1365) (* (/ 3.0 8.0) ?x1445) (* (/ 1.0 8.0) ?x1451) (* (/ 3.0 8.0) ?x1456) (* (/ 1.0 8.0) ?x1530) (* (/ 3.0 8.0) ?x1539) (* (/ 3.0 32.0) ?x1558) (* (/ 1.0 4.0) ?x1591) (* (- (/ 1.0 64.0)) ?x1617) (* (/ 3.0 32.0) ?x1658) (* (/ 1.0 8.0) ?x1693) (* (/ 3.0 16.0) ?x1696) (* (/ 9.0 16.0) ?x1738) (* (/ 9.0 32.0) ?x1740) (* (/ 1.0 64.0) ?x1748) (* (/ 9.0 16.0) ?x1755) (* (/ 3.0 32.0) ?x1902) (* (/ 1.0 8.0) ?x1913) (* (- (/ 3.0 32.0)) ?x1915) (* (/ 1.0 64.0) ?x166) (* (- (/ 1.0 64.0)) ?x183) (* (- (/ 3.0 64.0)) ?x189) ?x215 (* (/ 1.0 8.0) ?x238) (* (/ 3.0 32.0) ?x240))))
 (let (($x650 (>= ?x1177 0.0)))
 (let (($x1317 (not $x650)))
 (let ((?x521 (+ ?x1697 ?x1015 ?x1105 ?x1644 ?x1616 ?x212 ?x1667 ?x1401 ?x1875 ?x1888 ?x351 ?x542 ?x390 ?x1080 ?x1405 ?x1389 ?x756 ?x321 ?x182 ?x1449 ?x1078 ?x307 ?x791 ?x1463 ?x504 ?x169 ?x626 ?x1537 ?x1892 ?x644 ?x1095 ?x1685 ?x1128 ?x1100 ?x1311 ?x1198 ?x209 ?x1115 ?x1227 ?x1912 ?x952 ?x670 ?x147)))
 (let (($x1660 (<= ?x521 0.0)))
 (let (($x916 (not $x1660)))
 (let (($x899 (= ?x521 0.0)))
 (let (($x986 (not $x899)))
 (let (($x1527 (= 0.0 ?x1363)))
 (let (($x1670 (>= ?x1363 0.0)))
 (let (($x1655 (>= ?x792 0)))
 (let ((@x1737 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x1655)) @x482 $x1655)))
 (let ((@x301 (unit-resolution ((_ th-lemma arith) (or $x1670 (not $x1655) (not $x1623))) @x660 @x1737 (hypothesis (not $x1670)) false)))
 (let (($x1325 (<= ?x1363 0.0)))
 (let ((@x1131 (unit-resolution ((_ th-lemma arith) (or $x1325 (not $x1623) (not $x1655))) @x660 @x1737 (hypothesis (not $x1325)) false)))
 (let ((@x1004 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1527 (not $x1325) (not $x1670))) (lemma @x1131 $x1325) (lemma @x301 $x1670) $x1527)))
 (let ((@x1464 (unit-resolution (and-elim @x668 $x1625) (mp @x1004 (commutativity (= $x1527 $x342)) $x342) $x1646)))
 (let ((@x805 (unit-resolution ((_ th-lemma arith) (or $x986 $x375)) @x1464 (hypothesis $x899) false)))
 (let ((@x807 (lemma @x805 $x986)))
 (let (($x1324 (>= ?x521 0.0)))
 (let (($x1448 (<= ?x1177 0.0)))
 (let (($x900 (not $x1448)))
 (let ((@x870 (hypothesis $x900)))
 (let (($x245 (<= ?x140 0.0)))
 (let (($x280 (>= ?x1265 0.0)))
 (let (($x1654 (<= ?x368 0.0)))
 (let (($x1867 (<= ?x942 0.0)))
 (let ((?x1825 (* ?x1092 ?x1225)))
 (let ((?x642 (+ (* (- 1.0) ?x229) ?x1825)))
 (let (($x446 (>= ?x642 0.0)))
 (let (($x1068 (= 0.0 ?x642)))
 (let ((@x1226 (symm (commutativity (= $x1068 (= ?x642 0.0))) (= (= ?x642 0.0) $x1068))))
 (let ((@x403 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1068) $x446)) (mp ((_ th-lemma arith) (= ?x642 0.0)) @x1226 $x1068) $x446)))
 (let ((@x271 ((_ th-lemma arith) @x403 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1865) $x1867)) @x758 $x1867) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x369) $x1654)) @x855 $x1654) @x1737 (hypothesis (not $x245)) (hypothesis $x280) false)))
 (let ((@x1314 (unit-resolution (lemma @x271 (or (not $x280) $x245)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x280)) @x405 $x280) $x245)))
 (let (($x1752 (<= ?x1322 0.0)))
 (let (($x433 (not $x1752)))
 (let (($x1760 (>= ?x1322 0.0)))
 (let (($x1587 (not $x1760)))
 (let ((@x1316 (hypothesis $x1587)))
 (let ((@x613 (unit-resolution ((_ th-lemma arith) (or (not $x245) $x650 $x1760)) @x1316 (hypothesis $x1317) @x1314 false)))
 (let ((@x935 ((_ th-lemma arith) (or $x1660 $x1317))))
 (let ((@x940 (unit-resolution @x935 (unit-resolution (lemma @x613 (or $x650 $x1760)) @x1316 $x650) $x1660)))
 (let ((@x913 (unit-resolution ((_ th-lemma arith) (or (not $x113) $x1448 $x1760)) @x1316 @x870 @x901 false)))
 (let ((@x946 ((_ th-lemma arith) (or $x900 $x1324))))
 (let ((@x947 (unit-resolution @x946 (unit-resolution (lemma @x913 (or $x1448 $x1760)) @x1316 $x1448) $x1324)))
 (let ((@x977 ((_ th-lemma arith triangle-eq) (or $x899 $x916 (not $x1324)))))
 (let (($x1750 (= 0.0 ?x1322)))
 (let (($x1112 (not $x1750)))
 (let ((@x1332 (monotonicity (symm (commutativity (= $x1750 $x375)) (= $x375 $x1750)) (= $x1646 $x1112))))
 (let ((@x1334 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1750 $x433 $x1587)) (mp @x1464 @x1332 $x1112) (or $x433 $x1587))))
 (let ((@x1554 (unit-resolution @x1334 (lemma (unit-resolution @x977 @x947 @x940 @x807 false) $x1760) $x433)))
 (let ((@x1563 (unit-resolution ((_ th-lemma arith) (or (not $x245) $x1448 $x1752)) @x1554 @x1314 @x870 false)))
 (let ((@x1749 (unit-resolution @x977 (unit-resolution @x946 (lemma @x1563 $x1448) $x1324) @x807 $x916)))
 (unit-resolution ((_ th-lemma arith) (or (not $x113) $x650 $x1752)) @x1554 (unit-resolution @x935 @x1749 $x1317) @x901 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       48
 :arith-eq-adapter                44
 :arith-bound-propagations-cheap  26
 :arith-bound-propagations-lp     5
 :arith-conflicts                 65
 :arith-diseq                     35
 :arith-gcd-calls                 4
 :arith-grobner-calls             5
 :arith-grobner-conflicts         2
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 10
 :arith-lower                     55
 :arith-make-feasible             45
 :arith-max-columns               124
 :arith-max-rows                  24
 :arith-nla-explanations          94
 :arith-nla-lemmas                63
 :arith-patches                   4
 :arith-patches-success           4
 :arith-propagations              26
 :arith-upper                     32
 :conflicts                       12
 :decisions                       77
 :del-clause                      147
 :final-checks                    40
 :max-memory                      7.47
 :memory                          3.33
 :mk-bool-var                     204
 :mk-clause                       188
 :num-allocs                      94101245
 :num-checks                      1
 :propagations                    126
 :rlimit-count                    10513
 :time                            0.13
 :total-time                      0.14)
