unsat
((set-logic NIA)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x1093 (to_real y!1)))
 (let ((?x1089 (to_real x!2)))
 (let ((?x1088 (* ?x1089 ?x1093)))
 (let ((?x113 (to_real y00)))
 (let ((?x109 (to_real x00)))
 (let ((?x114 (* ?x109 ?x113)))
 (let ((?x120 (* (- 1.0) ?x114)))
 (let ((?x48 (to_real z00)))
 (let ((?x200 (* (- 1.0) ?x48)))
 (let ((?x1090 (to_real z!0)))
 (let ((?x1132 (+ ?x1090 ?x200 ?x120 ?x1088)))
 (let (($x277 (<= ?x1132 0.0)))
 (let ((?x1161 (+ (* (- 1.0) (to_real (* x!2 y!1))) ?x1088)))
 (let (($x1201 (<= ?x1161 0.0)))
 (let (($x563 (= 0.0 ?x1161)))
 (let ((@x1076 (symm (commutativity (= $x563 (= ?x1161 0.0))) (= (= ?x1161 0.0) $x563))))
 (let ((@x1179 (mp ((_ th-lemma arith) (= ?x1161 0.0)) @x1076 $x563)))
 (let ((?x560 (+ ?x114 (* (- 1.0) (to_real (* x00 y00))))))
 (let (($x1080 (>= ?x560 0.0)))
 (let (($x1204 (= 0.0 ?x560)))
 (let ((@x662 (symm (commutativity (= $x1204 (= ?x560 0.0))) (= (= ?x560 0.0) $x1204))))
 (let ((@x777 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1204) $x1080)) (mp ((_ th-lemma arith) (= ?x560 0.0)) @x662 $x1204) $x1080)))
 (let ((?x87 (* x00 y00)))
 (let ((?x552 (+ z00 ?x87 (* (- 1) (* x!2 y!1)) (* (- 1) z!0))))
 (let (($x1141 (>= ?x552 0)))
 (let (($x912 (= 0 ?x552)))
 (let ((@x1194 (symm (commutativity (= $x912 (= ?x552 0))) (= (= ?x552 0) $x912))))
 (let (($x553 (= ?x552 0)))
 (let ((?x1126 (* (- (/ 1.0 4.0)) (* ?x1090 ?x1090 ?x1090 ?x1093 ?x1093))))
 (let ((?x1123 (* (/ 1.0 2.0) (* ?x1090 ?x1090 ?x1090 ?x1093))))
 (let ((?x1124 (* (- (/ 7.0 4.0)) (* ?x1089 ?x1089 ?x1090))))
 (let ((?x1118 (* (/ 7.0 2.0) (* ?x1089 ?x1089 ?x1090 ?x1093))))
 (let ((?x546 (* (- (/ 3.0 4.0)) (* ?x1089 ?x1089 ?x1089 ?x1093 ?x1093))))
 (let ((?x1115 (* (/ 3.0 2.0) (* ?x1089 ?x1089 ?x1089 ?x1093))))
 (let ((?x518 (* (- (/ 3.0 2.0)) (* ?x1089 ?x1089 ?x1090 ?x1090 ?x1093 ?x1093))))
 (let ((?x1110 (* 3.0 (* ?x1089 ?x1089 ?x1090 ?x1090 ?x1093))))
 (let ((?x1109 (* (- (/ 3.0 2.0)) (* ?x1089 ?x1089 ?x1089 ?x1090))))
 (let ((?x1106 (* 3.0 (* ?x1089 ?x1089 ?x1089 ?x1090 ?x1093))))
 (let ((?x1104 (* (- (/ 1.0 2.0)) (* ?x1089 ?x1089 ?x1089 ?x1089 ?x1093 ?x1093))))
 (let ((?x1102 (* ?x1089 ?x1089 ?x1089 ?x1089 ?x1093)))
 (let ((?x1091 (* ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)))
 (let ((?x533 (* (- (/ 1.0 2.0)) ?x1091)))
 (let ((?x1100 (* (- (/ 1.0 2.0)) (* ?x1089 ?x1089 ?x1089 ?x1089))))
 (let ((?x1113 (* (- (/ 3.0 4.0)) (* ?x1089 ?x1089 ?x1089))))
 (let ((?x832 (* (- (/ 1.0 4.0)) (* ?x1090 ?x1090 ?x1090))))
 (let ((?x547 (* (/ 5.0 2.0) (* ?x1089 ?x1090 ?x1090 ?x1093))))
 (let ((?x544 (* (- (/ 5.0 4.0)) (* ?x1089 ?x1090 ?x1090))))
 (let ((?x541 (* ?x1089 ?x1090 ?x1090 ?x1090 ?x1093)))
 (let ((?x540 (* (- (/ 3.0 2.0)) (* ?x1089 ?x1089 ?x1089 ?x1090 ?x1093 ?x1093))))
 (let ((?x549 (* (- (/ 5.0 4.0)) (* ?x1089 ?x1090 ?x1090 ?x1093 ?x1093))))
 (let ((?x335 (* (- (/ 1.0 2.0)) (* ?x1089 ?x1090 ?x1090 ?x1090))))
 (let ((?x838 (* (- (/ 3.0 2.0)) (* ?x1089 ?x1089 ?x1090 ?x1090))))
 (let ((?x542 (* (- (/ 7.0 4.0)) (* ?x1089 ?x1089 ?x1090 ?x1093 ?x1093))))
 (let ((?x825 (+ 1.0 ?x542 ?x838 ?x335 ?x549 ?x540 ?x541 ?x544 ?x547 ?x832 ?x1113 ?x1100 ?x533 ?x1102 ?x1104 ?x1106 ?x1109 ?x1110 ?x518 ?x1115 ?x546 ?x1118 ?x1124 ?x1123 ?x1126)))
 (let (($x330 (= (* ?x825 (+ ?x200 ?x120 ?x1088 ?x1090)) 0.0)))
 (let (($x557 (not $x330)))
 (let ((?x577 (+ ?x48 ?x114 (* (- (/ 1.0 2.0)) (* ?x48 ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (/ 1.0 2.0) (* ?x1089 ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093 ?x1093)) (* (- (/ 1.0 2.0)) (* ?x48 ?x1089 ?x1090 ?x1090 ?x1093 ?x1093)) (* (- (/ 1.0 4.0)) (* ?x48 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (- (/ 1.0 2.0)) (* ?x109 ?x113 ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (- (/ 1.0 4.0)) (* ?x109 ?x113 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (/ 1.0 2.0) (* ?x1089 ?x1089 ?x1090 ?x1090 ?x1093 ?x1093 ?x1093)) (* (/ 1.0 2.0) (* ?x1089 ?x1090 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (- 1.0) ?x1088) (* (- 1.0) ?x1090) (* (/ 1.0 2.0) ?x1091) (* (/ 1.0 4.0) (* ?x1090 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (/ 1.0 4.0) (* ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093 ?x1093)) (* (- (/ 1.0 2.0)) (* ?x109 ?x113 ?x1089 ?x1090 ?x1090 ?x1093 ?x1093)))))
 (let (($x1016 (= ?x577 0.0)))
 (let (($x1175 (not $x1016)))
 (let (($x337 (or $x1175 $x557)))
 (let (($x886 (and $x553 $x337)))
 (let ((?x550 (+ 1.0 ?x1100 ?x1102 ?x1104 ?x1109 ?x1106 ?x540 ?x838 ?x1110 ?x518 ?x335 ?x541 ?x533 ?x1113 ?x1115 ?x546 ?x1124 ?x1118 ?x542 ?x544 ?x547 ?x549 ?x832 ?x1123 ?x1126)))
 (let ((?x520 (+ ?x1090 ?x200 ?x120 ?x533 ?x1088 (* (- (/ 1.0 2.0)) (* ?x1089 ?x1090 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (/ 1.0 2.0) (* ?x1089 ?x1090 ?x1090 ?x1090 ?x48 ?x1093 ?x1093)) (* (/ 1.0 2.0) (* ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093 ?x109 ?x113)) (* (- (/ 1.0 2.0)) (* ?x1089 ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093 ?x1093)) (* (/ 1.0 2.0) (* ?x1089 ?x1090 ?x1090 ?x48 ?x1093 ?x1093)) (* (/ 1.0 2.0) (* ?x1089 ?x1090 ?x1090 ?x1093 ?x1093 ?x109 ?x113)) (* (- (/ 1.0 2.0)) (* ?x1089 ?x1089 ?x1090 ?x1090 ?x1093 ?x1093 ?x1093)) (* (- (/ 1.0 4.0)) (* ?x1090 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093)) (* (/ 1.0 4.0) (* ?x1090 ?x1090 ?x1090 ?x48 ?x1093 ?x1093)) (* (/ 1.0 4.0) (* ?x1090 ?x1090 ?x1090 ?x1093 ?x1093 ?x109 ?x113)) (* (- (/ 1.0 4.0)) (* ?x1089 ?x1090 ?x1090 ?x1090 ?x1093 ?x1093 ?x1093)))))
 (let (($x288 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x87)) 0) (or (not (= ?x520 0.0)) (not (= (* ?x550 ?x1132) 0.0))))))
 (let (($x396 (exists ((x Int) (y Int) (z Int) )(! (let ((?x63 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x592 (* ?x43 ?x63)))
 (let ((?x113 (to_real y00)))
 (let ((?x109 (to_real x00)))
 (let ((?x114 (* ?x109 ?x113)))
 (let ((?x120 (* (- 1.0) ?x114)))
 (let ((?x48 (to_real z00)))
 (let ((?x200 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x1197 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x63 ?x63))))
 (let ((?x562 (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63))))
 (let ((?x1230 (+ 1.0 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43)) (* ?x43 ?x43 ?x43 ?x43 ?x63) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46)) (* 3.0 (* ?x43 ?x43 ?x46 ?x46 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46)) (* ?x43 ?x46 ?x46 ?x46 ?x63) ?x562 (* (- (/ 3.0 4.0)) (* ?x43 ?x43 ?x43)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x63)) (* (- (/ 3.0 4.0)) (* ?x43 ?x43 ?x43 ?x63 ?x63)) (* (- (/ 7.0 4.0)) (* ?x43 ?x43 ?x46)) (* (/ 7.0 2.0) (* ?x43 ?x43 ?x46 ?x63)) (* (- (/ 7.0 4.0)) (* ?x43 ?x43 ?x46 ?x63 ?x63)) (* (- (/ 5.0 4.0)) (* ?x43 ?x46 ?x46)) (* (/ 5.0 2.0) (* ?x43 ?x46 ?x46 ?x63)) (* (- (/ 5.0 4.0)) (* ?x43 ?x46 ?x46 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x63)) ?x1197)))
 (let ((?x1444 (+ ?x46 ?x200 ?x120 ?x562 ?x592 (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x46 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63 ?x109 ?x113)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x63 ?x63 ?x109 ?x113)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x46 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x63 ?x63 ?x109 ?x113)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63 ?x63)))))
 (let (($x304 (not (= ?x1444 0.0))))
 (let (($x115 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x115 (or $x304 (not (= (* ?x1230 (+ ?x46 ?x200 ?x120 ?x592)) 0.0)))))))))))))))))))) :qid k!28))
 ))
 (let (($x398 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x200 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x113 (to_real y00)))
 (let ((?x109 (to_real x00)))
 (let ((?x114 (* ?x109 ?x113)))
 (let ((?x120 (* (- 1.0) ?x114)))
 (let ((?x1197 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y) (to_real x)))))
 (let ((?x470 (+ 1.0 ?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 (to_real y) (to_real y) (to_real x))) ?x1197)))
 (let (($x479 (= (* ?x470 (+ ?x120 (* (to_real y) (to_real x)) ?x46 ?x200)) 0.0)))
 (let ((?x43 (to_real x)))
 (let ((?x344 (+ ?x120 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x200)))
 (let ((?x63 (to_real y)))
 (let ((?x165 (* (/ 1.0 2.0) ?x63)))
 (let ((?x686 (+ (- (/ 1.0 2.0)) ?x165)))
 (let ((?x351 (+ ?x46 ?x43)))
 (let ((?x419 (+ 1.0 (* (- 2.0) (* ?x43 ?x351 ?x351 ?x351 ?x686 ?x686)) (* (- 2.0) (* ?x43 ?x351 ?x351 ?x686 ?x686)) (* (- 1.0) (* ?x351 ?x351 ?x351 ?x686 ?x686)))))
 (let (($x480 (or (not (= (* ?x419 ?x344) 0.0)) (not $x479))))
 (let (($x416 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x416 $x480))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x242 (lambda ((x Int) (y Int) (z Int) )(let ((?x63 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x592 (* ?x43 ?x63)))
 (let ((?x113 (to_real y00)))
 (let ((?x109 (to_real x00)))
 (let ((?x114 (* ?x109 ?x113)))
 (let ((?x120 (* (- 1.0) ?x114)))
 (let ((?x48 (to_real z00)))
 (let ((?x200 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x1197 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x63 ?x63))))
 (let ((?x562 (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63))))
 (let ((?x1230 (+ 1.0 (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43)) (* ?x43 ?x43 ?x43 ?x43 ?x63) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46)) (* 3.0 (* ?x43 ?x43 ?x46 ?x46 ?x63)) (* (- (/ 3.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46)) (* ?x43 ?x46 ?x46 ?x46 ?x63) ?x562 (* (- (/ 3.0 4.0)) (* ?x43 ?x43 ?x43)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x63)) (* (- (/ 3.0 4.0)) (* ?x43 ?x43 ?x43 ?x63 ?x63)) (* (- (/ 7.0 4.0)) (* ?x43 ?x43 ?x46)) (* (/ 7.0 2.0) (* ?x43 ?x43 ?x46 ?x63)) (* (- (/ 7.0 4.0)) (* ?x43 ?x43 ?x46 ?x63 ?x63)) (* (- (/ 5.0 4.0)) (* ?x43 ?x46 ?x46)) (* (/ 5.0 2.0) (* ?x43 ?x46 ?x46 ?x63)) (* (- (/ 5.0 4.0)) (* ?x43 ?x46 ?x46 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46)) (* (/ 1.0 2.0) (* ?x46 ?x46 ?x46 ?x63)) ?x1197)))
 (let ((?x1444 (+ ?x46 ?x200 ?x120 ?x562 ?x592 (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x46 ?x46 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63 ?x109 ?x113)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x63 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x63 ?x63 ?x109 ?x113)) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 ?x46 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x46 ?x46 ?x46 ?x63 ?x63 ?x109 ?x113)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63 ?x63)))))
 (let (($x304 (not (= ?x1444 0.0))))
 (let (($x115 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x1337 (and $x115 (or $x304 (not (= (* ?x1230 (+ ?x46 ?x200 ?x120 ?x592)) 0.0))))))
 (let ((?x470 (+ 1.0 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 ?x63 ?x63 ?x43)) (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x63 ?x63 ?x43)) ?x1197)))
 (let ((?x344 (+ ?x120 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x63)))) ?x46 ?x43 ?x200)))
 (let ((?x165 (* (/ 1.0 2.0) ?x63)))
 (let ((?x686 (+ (- (/ 1.0 2.0)) ?x165)))
 (let ((?x351 (+ ?x46 ?x43)))
 (let ((?x419 (+ 1.0 (* (- 2.0) (* ?x43 ?x351 ?x351 ?x351 ?x686 ?x686)) (* (- 2.0) (* ?x43 ?x351 ?x351 ?x686 ?x686)) (* (- 1.0) (* ?x351 ?x351 ?x351 ?x686 ?x686)))))
 (let (($x480 (or (not (= (* ?x419 ?x344) 0.0)) (not (= (* ?x470 (+ ?x120 (* ?x63 ?x43) ?x46 ?x200)) 0.0)))))
 (let (($x416 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x391 (and $x416 $x480)))
 (rewrite (= $x391 $x1337)))))))))))))))))))))))))))))
 ))
 (let (($x343 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x200 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x113 (to_real y00)))
 (let ((?x109 (to_real x00)))
 (let ((?x114 (* ?x109 ?x113)))
 (let ((?x120 (* (- 1.0) ?x114)))
 (let ((?x1197 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y) (to_real x)))))
 (let ((?x470 (+ 1.0 ?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 (to_real y) (to_real y) (to_real x))) ?x1197)))
 (let (($x479 (= (* ?x470 (+ ?x120 (* (to_real y) (to_real x)) ?x46 ?x200)) 0.0)))
 (let ((?x43 (to_real x)))
 (let ((?x344 (+ ?x120 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x200)))
 (let ((?x63 (to_real y)))
 (let ((?x165 (* (/ 1.0 2.0) ?x63)))
 (let ((?x686 (+ (- (/ 1.0 2.0)) ?x165)))
 (let ((?x351 (+ ?x46 ?x43)))
 (let ((?x419 (+ 1.0 (* (- 2.0) (* ?x43 ?x351 ?x351 ?x351 ?x686 ?x686)) (* (- 2.0) (* ?x43 ?x351 ?x351 ?x686 ?x686)) (* (- 1.0) (* ?x351 ?x351 ?x351 ?x686 ?x686)))))
 (let (($x480 (or (not (= (* ?x419 ?x344) 0.0)) (not $x479))))
 (let (($x148 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x148 $x480))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1155 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x200 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x113 (to_real y00)))
 (let ((?x109 (to_real x00)))
 (let ((?x114 (* ?x109 ?x113)))
 (let ((?x120 (* (- 1.0) ?x114)))
 (let ((?x1197 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y) (to_real x)))))
 (let ((?x470 (+ 1.0 ?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 (to_real y) (to_real y) (to_real x))) ?x1197)))
 (let (($x479 (= (* ?x470 (+ ?x120 (* (to_real y) (to_real x)) ?x46 ?x200)) 0.0)))
 (let ((?x43 (to_real x)))
 (let ((?x344 (+ ?x120 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x200)))
 (let ((?x63 (to_real y)))
 (let ((?x165 (* (/ 1.0 2.0) ?x63)))
 (let ((?x686 (+ (- (/ 1.0 2.0)) ?x165)))
 (let ((?x351 (+ ?x46 ?x43)))
 (let ((?x419 (+ 1.0 (* (- 2.0) (* ?x43 ?x351 ?x351 ?x351 ?x686 ?x686)) (* (- 2.0) (* ?x43 ?x351 ?x351 ?x686 ?x686)) (* (- 1.0) (* ?x351 ?x351 ?x351 ?x686 ?x686)))))
 (let (($x480 (or (not (= (* ?x419 ?x344) 0.0)) (not $x479))))
 (let (($x416 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x391 (and $x416 $x480)))
 (let (($x148 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x234 (and $x148 $x480)))
 (rewrite (= $x234 $x391))))))))))))))))))))))))))
 ))
 (let (($x79 (exists ((x Int) (y Int) (z Int) )(! (let ((?x60 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x63 (to_real y)))
 (let ((?x64 (/ ?x63 ?x41)))
 (let ((?x72 (- (- (to_real 1) (* ?x41 (to_real x) ?x64 ?x64 ?x46 ?x46 ?x46)) (* ?x41 (to_real x) ?x64 ?x64 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x74 (* (- (+ ?x45 (* ?x41 (to_real x) ?x64) ?x46) ?x48) (- ?x72 (* ?x64 ?x64 ?x46 ?x46 ?x46)))))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (- (- (to_real 1) (* ?x41 (to_real x) ?x42 ?x42 ?x51 ?x51 ?x51)) (* ?x41 (to_real x) ?x42 ?x42 ?x51 ?x51))))
 (let ((?x59 (* (- (+ ?x45 (* ?x41 (to_real x) ?x42) ?x46 (to_real x)) ?x48) (- ?x57 (* ?x42 ?x42 ?x51 ?x51 ?x51)))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x59 ?x60)) (not (= ?x74 ?x60)))))))))))))))))) :qid k!28))
 ))
 (let ((?x944 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x200 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x113 (to_real y00)))
 (let ((?x109 (to_real x00)))
 (let ((?x114 (* ?x109 ?x113)))
 (let ((?x120 (* (- 1.0) ?x114)))
 (let ((?x1197 (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y)))))
 (let ((?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x46 (to_real y) (to_real y) (to_real x)))))
 (let ((?x470 (+ 1.0 ?x246 (* (- (/ 1.0 2.0)) (* ?x46 ?x46 (to_real y) (to_real y) (to_real x))) ?x1197)))
 (let (($x479 (= (* ?x470 (+ ?x120 (* (to_real y) (to_real x)) ?x46 ?x200)) 0.0)))
 (let ((?x43 (to_real x)))
 (let ((?x344 (+ ?x120 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x200)))
 (let ((?x63 (to_real y)))
 (let ((?x165 (* (/ 1.0 2.0) ?x63)))
 (let ((?x686 (+ (- (/ 1.0 2.0)) ?x165)))
 (let ((?x351 (+ ?x46 ?x43)))
 (let ((?x419 (+ 1.0 (* (- 2.0) (* ?x43 ?x351 ?x351 ?x351 ?x686 ?x686)) (* (- 2.0) (* ?x43 ?x351 ?x351 ?x686 ?x686)) (* (- 1.0) (* ?x351 ?x351 ?x351 ?x686 ?x686)))))
 (let (($x480 (or (not (= (* ?x419 ?x344) 0.0)) (not $x479))))
 (let (($x148 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x234 (and $x148 $x480)))
 (let ((?x60 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x64 (/ ?x63 ?x41)))
 (let ((?x72 (- (- (to_real 1) (* ?x41 ?x43 ?x64 ?x64 ?x46 ?x46 ?x46)) (* ?x41 ?x43 ?x64 ?x64 ?x46 ?x46))))
 (let ((?x67 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x64) ?x46) ?x48)))
 (let ((?x51 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (- (- (to_real 1) (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51 ?x51)) (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x59 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (- ?x57 (* ?x42 ?x42 ?x51 ?x51 ?x51)))))
 (let (($x77 (or (not (= ?x59 ?x60)) (not (= (* ?x67 (- ?x72 (* ?x64 ?x64 ?x46 ?x46 ?x46))) ?x60)))))
 (let (($x78 (and (= (- (+ ?x31 (* x y) z) z00) 0) $x77)))
 (rewrite (= $x78 $x234)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x80 (asserted $x79)))
 (let ((@x308 (mp (mp @x80 (quant-intro (proof-bind ?x944) (= $x79 $x343)) $x343) (rewrite (= $x343 $x343)) $x343)))
 (let ((@x561 (mp (mp @x308 (quant-intro (proof-bind ?x1155) (= $x343 $x398)) $x398) (quant-intro (proof-bind ?x242) (= $x398 $x396)) $x396)))
 (let ((@x1150 (mp (mp~ @x561 (sk (~ $x396 $x288)) $x288) (rewrite (= $x288 $x886)) $x886)))
 (let ((@x1195 (mp (and-elim @x1150 $x553) @x1194 $x912)))
 (let ((@x367 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x912) $x1141)) @x1195 $x1141)))
 (let ((@x230 ((_ th-lemma arith) @x367 (hypothesis (not $x277)) @x777 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x563) $x1201)) @x1179 $x1201) false)))
 (let ((@x119 (lemma @x230 $x277)))
 (let (($x338 (>= ?x1132 0.0)))
 (let (($x814 (<= ?x560 0.0)))
 (let ((@x558 (lemma (unit-resolution ((_ th-lemma arith) $x814) (hypothesis (not $x814)) false) $x814)))
 (let (($x514 (>= ?x1161 0.0)))
 (let (($x1136 (<= ?x552 0)))
 (let ((@x1196 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x912) $x1136)) @x1195 $x1136)))
 (let ((@x1199 ((_ th-lemma arith) (hypothesis (not $x338)) (hypothesis $x814) @x1196 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x563) $x514)) @x1179 $x514) false)))
 (let ((@x1149 (unit-resolution (lemma @x1199 (or (not $x814) $x338)) @x558 $x338)))
 (let (($x821 (>= ?x577 0.0)))
 (let (($x524 (not $x821)))
 (let (($x1142 (= 0.0 ?x577)))
 (let (($x500 (not $x1142)))
 (let ((@x272 (monotonicity (symm (commutativity (= $x1142 $x1016)) (= $x1016 $x1142)) (= $x1175 $x500))))
 (let (($x328 (= 0.0 ?x1132)))
 (let ((@x475 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x328 (not $x277) (not $x338))) @x1149 @x119 $x328)))
 (let (($x486 (= ?x1132 0.0)))
 (let (($x1072 (not $x486)))
 (let ((@x1002 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x1072 $x330)) (hypothesis $x557) $x1072) (symm (hypothesis $x328) $x486) false)))
 (let ((@x449 (unit-resolution (and-elim @x1150 $x337) (unit-resolution (lemma @x1002 (or (not $x328) $x330)) @x475 $x330) $x1175)))
 (let (($x1137 (<= ?x577 0.0)))
 (let ((@x123 (unit-resolution ((_ th-lemma arith) (or $x1137 (not $x1141) (not $x1136))) @x1196 @x367 (hypothesis (not $x1137)) false)))
 (let ((@x863 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1142 (not $x1137) $x524)) (lemma @x123 $x1137) (or $x1142 $x524))))
 (unit-resolution ((_ th-lemma arith) (or (not $x277) (not $x338) $x821)) (unit-resolution @x863 (mp @x449 @x272 $x500) $x524) @x1149 @x119 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      22
 :arith-eq-adapter               24
 :arith-bound-propagations-cheap 10
 :arith-conflicts                24
 :arith-diseq                    17
 :arith-gcd-calls                1
 :arith-grobner-calls            3
 :arith-grobner-conflicts        3
 :arith-horner-calls             3
 :arith-lower                    20
 :arith-make-feasible            24
 :arith-max-columns              74
 :arith-max-rows                 16
 :arith-nla-explanations         51
 :arith-nla-lemmas               22
 :arith-patches                  1
 :arith-patches-success          1
 :arith-propagations             10
 :arith-upper                    19
 :conflicts                      8
 :decisions                      31
 :del-clause                     100
 :final-checks                   21
 :max-memory                     4.88
 :memory                         3.26
 :mk-bool-var                    109
 :mk-clause                      104
 :num-allocs                     2906287
 :num-checks                     1
 :propagations                   33
 :rlimit-count                   5622
 :time                           0.02
 :total-time                     0.03)
