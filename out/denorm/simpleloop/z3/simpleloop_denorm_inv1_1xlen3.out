unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x211 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x433 (>= ?x211 0)))
 (let (($x191 (= ?x211 0)))
 (let ((?x197 (* (- 3) (* x!1 x!1 y!0 y!0))))
 (let ((?x206 (* (- 1) (* x!1 y!0 y!0 y!0))))
 (let ((?x122 (* 6 (* x!1 y!0))))
 (let ((?x120 (* 2 (* y!0 y!0))))
 (let ((?x132 (* 5 x!1)))
 (let ((?x203 (* 3 (* x!1 x!1 x!1 y!0))))
 (let ((?x200 (* (- 6) (* x!1 x!1))))
 (let ((?x183 (* x!1 x!1 x!1 y!0 y!0)))
 (let ((?x140 (* y!0 y!0 y!0)))
 (let ((?x202 (* (- 9) (* x!1 x!1 y!0))))
 (let ((?x121 (* 2 (* x!1 x!1 x!1))))
 (let ((?x216 (* (+ (- 1) ?x121 ?x202 ?x140 ?x183 ?x200 ?x203 ?x132 ?x120 ?x122 ?x206 ?x197) (+ (* (- 1) y00) (* (- 1) x00) x!1 y!0))))
 (let (($x319 (= ?x216 0)))
 (let (($x217 (not $x319)))
 (let (($x150 (and $x191 $x217)))
 (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x194 (+ x!1 y!0 ?x52 ?x59)))
 (let ((?x141 (* (+ (- 1) ?x132 ?x120 ?x197 ?x183 ?x200 ?x121 ?x122 ?x202 ?x203 ?x140 ?x206) ?x194)))
 (let (($x189 (and (= ?x194 0) (not (= ?x141 0)))))
 (let (($x351 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x413 (* (- 1) (* x y y y))))
 (let ((?x358 (* y y y)))
 (let ((?x336 (* 3 (* x x x y))))
 (let ((?x330 (* 2 (* x x x))))
 (let ((?x177 (* x x x y y)))
 (let ((?x252 (* (- 3) (* x x y y))))
 (let ((?x455 (* 2 (* y y))))
 (let ((?x355 (+ (- 1) (* 5 x) ?x455 ?x252 ?x177 (* (- 6) (* x x)) ?x330 (* 6 (* x y)) (* (- 9) (* x x y)) ?x336 ?x358 ?x413)))
 (let (($x78 (= ?x73 0)))
 (and $x78 (not (= (* ?x355 ?x73) 0))))))))))))))) :qid k!26))
 ))
 (let (($x401 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x413 (* (- 1) (* x y y y))))
 (let ((?x358 (* y y y)))
 (let ((?x336 (* 3 (* x x x y))))
 (let ((?x330 (* 2 (* x x x))))
 (let ((?x177 (* x x x y y)))
 (let ((?x252 (* (- 3) (* x x y y))))
 (let ((?x455 (* 2 (* y y))))
 (let ((?x456 (+ (- 1) (* 3 x) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) ?x455 (* (- 1) (* x (- 1) y y)) (* (- 1) (* x y y)) ?x252 ?x177 (* (- 4) (* x x)) ?x330 (* 3 (* x y)) (* (- 7) (* x x y)) ?x336 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x358 ?x413)))
 (let (($x78 (= ?x73 0)))
 (and $x78 (not (= (* ?x456 ?x73) 0))))))))))))))) :qid k!26))
 ))
 (let ((?x457 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x413 (* (- 1) (* x y y y))))
 (let ((?x358 (* y y y)))
 (let ((?x336 (* 3 (* x x x y))))
 (let ((?x330 (* 2 (* x x x))))
 (let ((?x177 (* x x x y y)))
 (let ((?x252 (* (- 3) (* x x y y))))
 (let ((?x455 (* 2 (* y y))))
 (let ((?x355 (+ (- 1) (* 5 x) ?x455 ?x252 ?x177 (* (- 6) (* x x)) ?x330 (* 6 (* x y)) (* (- 9) (* x x y)) ?x336 ?x358 ?x413)))
 (let (($x78 (= ?x73 0)))
 (let (($x53 (and $x78 (not (= (* ?x355 ?x73) 0)))))
 (let ((?x456 (+ (- 1) (* 3 x) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) ?x455 (* (- 1) (* x (- 1) y y)) (* (- 1) (* x y y)) ?x252 ?x177 (* (- 4) (* x x)) ?x330 (* 3 (* x y)) (* (- 7) (* x x y)) ?x336 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x358 ?x413)))
 (let (($x445 (and $x78 (not (= (* ?x456 ?x73) 0)))))
 (rewrite (= $x445 $x53))))))))))))))))))
 ))
 (let (($x412 (exists ((x Int) (y Int) )(! (let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x408 (+ x ?x52 ?x59 y)))
 (let ((?x458 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x448 (+ 1 y)))
 (let ((?x406 (+ (- 1) x)))
 (let ((?x294 (* (+ (* ?x406 ?x406 ?x406 ?x448 ?x448) (* ?x406 ?x406 ?x406 ?x448) ?x458) ?x408)))
 (and (= ?x408 0) (not (= ?x294 0)))))))))) :qid k!26))
 ))
 (let ((?x192 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x73 (+ x y ?x52 ?x59)))
 (let ((?x413 (* (- 1) (* x y y y))))
 (let ((?x358 (* y y y)))
 (let ((?x336 (* 3 (* x x x y))))
 (let ((?x330 (* 2 (* x x x))))
 (let ((?x177 (* x x x y y)))
 (let ((?x252 (* (- 3) (* x x y y))))
 (let ((?x455 (* 2 (* y y))))
 (let ((?x456 (+ (- 1) (* 3 x) (* (- 1) (* x (- 1) 1 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x 1 y)) ?x455 (* (- 1) (* x (- 1) y y)) (* (- 1) (* x y y)) ?x252 ?x177 (* (- 4) (* x x)) ?x330 (* 3 (* x y)) (* (- 7) (* x x y)) ?x336 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x358 ?x413)))
 (let (($x78 (= ?x73 0)))
 (let (($x445 (and $x78 (not (= (* ?x456 ?x73) 0)))))
 (let ((?x408 (+ x ?x52 ?x59 y)))
 (let ((?x458 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x448 (+ 1 y)))
 (let ((?x406 (+ (- 1) x)))
 (let ((?x294 (* (+ (* ?x406 ?x406 ?x406 ?x448 ?x448) (* ?x406 ?x406 ?x406 ?x448) ?x458) ?x408)))
 (let (($x427 (and (= ?x408 0) (not (= ?x294 0)))))
 (rewrite (= $x427 $x445))))))))))))))))))))))
 ))
 (let (($x49 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (+ (* ?x34 ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38)) (* ?x34 ?x38 ?x38 ?x38))))
 (let (($x47 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x47))))) :qid k!26))
 ))
 (let ((?x419 (lambda ((x Int) (y Int) )(let ((?x59 (* (- 1) x00)))
 (let ((?x52 (* (- 1) y00)))
 (let ((?x408 (+ x ?x52 ?x59 y)))
 (let ((?x458 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x448 (+ 1 y)))
 (let ((?x406 (+ (- 1) x)))
 (let ((?x294 (* (+ (* ?x406 ?x406 ?x406 ?x448 ?x448) (* ?x406 ?x406 ?x406 ?x448) ?x458) ?x408)))
 (let (($x427 (and (= ?x408 0) (not (= ?x294 0)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (- (+ (* ?x34 ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38)) (* ?x34 ?x38 ?x38 ?x38))))
 (let (($x47 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)))))
 (let (($x48 (and (= (+ (- (- x y00) x00) y) 0) $x47)))
 (rewrite (= $x48 $x427))))))))))))))))
 ))
 (let ((@x50 (asserted $x49)))
 (let ((@x290 (mp (mp @x50 (quant-intro (proof-bind ?x419) (= $x49 $x412)) $x412) (rewrite (= $x412 $x412)) $x412)))
 (let ((@x149 (mp (mp @x290 (quant-intro (proof-bind ?x192) (= $x412 $x401)) $x401) (quant-intro (proof-bind ?x457) (= $x401 $x351)) $x351)))
 (let ((@x446 (mp (mp~ @x149 (sk (~ $x351 $x189)) $x189) (rewrite (= $x189 $x150)) $x150)))
 (let ((@x407 (and-elim @x446 $x191)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x191) $x433)) @x407 $x433)))
 (let (($x432 (<= ?x211 0)))
 (let ((@x151 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x191) $x432)) @x407 $x432)))
 (let (($x144 (not (>= ?x216 0))))
 (let (($x373 (<= ?x216 0)))
 (let ((@x354 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x319 (not $x373) $x144)) (and-elim @x446 $x217) (or (not $x373) $x144))))
 (let ((@x164 (unit-resolution @x354 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x373)) @x151 @x250 false) $x373) $x144)))
 ((_ th-lemma arith farkas 1 1 1) @x164 @x151 @x250 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             58
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 26
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.53
 :memory                    3.13
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1061055
 :num-checks                1
 :propagations              4
 :rlimit-count              1854
 :time                      0.01
 :total-time                0.01)
