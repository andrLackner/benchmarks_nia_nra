unsat
((set-logic NIA)
(proof
(let (($x57 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x51 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x50 (* 0 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00 y00)))
 (let ((?x49 (* 0 ?x42 ?x42 ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00 y00 y00)))
 (let ((?x48 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x47 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 r00 y00 y00 y00)))
 (let ((?x46 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x45 (* 0 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x44 (* 0 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 r00 y00 y00 y00 y00)))
 (let ((?x52 (+ ?x44 ?x45 ?x46 ?x47 ?x48 ?x49 ?x50 ?x51)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x55))))))))))))))))) :qid k!29))
 ))
 (let (($x180 (= $x57 false)))
 (let (($x173 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x179 (elim-unused (= $x173 false))))
 (let (($x176 (= $x57 $x173)))
 (let ((?x191 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x51 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x50 (* 0 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00 y00)))
 (let ((?x49 (* 0 ?x42 ?x42 ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00 y00 y00)))
 (let ((?x48 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 q00 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x47 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 r00 y00 y00 y00)))
 (let ((?x46 (* 0 ?x42 ?x42 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x45 (* 0 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x44 (* 0 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 r00 y00 y00 y00 y00)))
 (let ((?x52 (+ ?x44 ?x45 ?x46 ?x47 ?x48 ?x49 ?x50 ?x51)))
 (let (($x53 (= ?x52 0)))
 (let (($x54 (not $x53)))
 (let (($x55 (or $x54)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x56 (and $x33 $x41 $x55)))
 (let (($x171 (= $x56 false)))
 (let (($x210 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x82 (= (+ (* (- 1) y00) y) 0)))
 (let (($x183 (and $x82 $x210 false)))
 (let ((@x143 (rewrite (= (+ 0 0 0 0 0 0 0 0) 0))))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x68 (+ r ?x62)))
 (let ((?x60 (+ 1 q)))
 (let ((?x132 (* 0 ?x60 ?x60 ?x60 ?x60 ?x60 ?x60 ?x68 ?x68 ?x68 y00 y00 y00 y00)))
 (let ((@x70 (rewrite (= ?x43 ?x68))))
 (let ((@x67 (rewrite (= ?x42 ?x60))))
 (let ((@x134 (monotonicity @x67 @x67 @x67 @x67 @x67 @x67 @x70 @x70 @x70 (= ?x51 ?x132))))
 (let ((?x125 (* 0 ?x60 ?x60 ?x60 ?x60 ?x68 ?x68 ?x68 y00 y00 y00 y00 y00)))
 (let ((@x131 (trans (monotonicity @x67 @x67 @x67 @x67 @x70 @x70 @x70 (= ?x50 ?x125)) (rewrite (= ?x125 0)) (= ?x50 0))))
 (let ((?x118 (* 0 ?x60 ?x60 ?x60 q00 ?x68 ?x68 ?x68 y00 y00 y00 y00 y00)))
 (let ((@x124 (trans (monotonicity @x67 @x67 @x67 @x70 @x70 @x70 (= ?x49 ?x118)) (rewrite (= ?x118 0)) (= ?x49 0))))
 (let ((?x111 (* 0 ?x60 ?x60 ?x60 ?x60 ?x60 q00 ?x68 ?x68 ?x68 y00 y00 y00 y00)))
 (let ((@x117 (trans (monotonicity @x67 @x67 @x67 @x67 @x67 @x70 @x70 @x70 (= ?x48 ?x111)) (rewrite (= ?x111 0)) (= ?x48 0))))
 (let ((?x104 (* 0 ?x60 ?x60 ?x60 ?x60 ?x60 ?x68 ?x68 ?x68 r00 y00 y00 y00)))
 (let ((@x110 (trans (monotonicity @x67 @x67 @x67 @x67 @x67 @x70 @x70 @x70 (= ?x47 ?x104)) (rewrite (= ?x104 0)) (= ?x47 0))))
 (let ((?x96 (* 0 ?x60 ?x60 ?x60 ?x60 ?x60 ?x68 ?x68 ?x68 ?x68 y00 y00 y00)))
 (let ((@x99 (monotonicity @x67 @x67 @x67 @x67 @x67 @x70 @x70 @x70 @x70 (= ?x46 ?x96))))
 (let ((?x86 (* 0 ?x60 ?x60 ?x60 ?x68 ?x68 ?x68 ?x68 y00 y00 y00 y00)))
 (let ((@x93 (trans (monotonicity @x67 @x67 @x67 @x70 @x70 @x70 @x70 (= ?x45 ?x86)) (rewrite (= ?x86 0)) (= ?x45 0))))
 (let ((?x73 (* 0 ?x60 ?x60 ?x60 ?x68 ?x68 ?x68 r00 y00 y00 y00 y00)))
 (let ((@x85 (trans (monotonicity @x67 @x67 @x67 @x70 @x70 @x70 (= ?x44 ?x73)) (rewrite (= ?x73 0)) (= ?x44 0))))
 (let ((@x141 (monotonicity @x85 @x93 (trans @x99 (rewrite (= ?x96 0)) (= ?x46 0)) @x110 @x117 @x124 @x131 (trans @x134 (rewrite (= ?x132 0)) (= ?x51 0)) (= ?x52 (+ 0 0 0 0 0 0 0 0)))))
 (let ((@x151 (trans (monotonicity (trans @x141 @x143 $x53) (= $x53 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x53 true))))
 (let ((@x158 (trans (monotonicity @x151 (= $x54 (not true))) (rewrite (= (not true) false)) (= $x54 false))))
 (let ((@x165 (trans (monotonicity @x158 (= $x55 (or false))) (rewrite (= (or false) false)) (= $x55 false))))
 (let ((@x185 (monotonicity (rewrite (= $x33 $x82)) (rewrite (= $x41 $x210)) @x165 (= $x56 $x183))))
 (trans @x185 (rewrite (= $x183 false)) $x171))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (mp @x58 (trans (quant-intro (proof-bind ?x191) $x176) @x179 $x180) false))))))))))

(:max-memory   3.37
 :memory       3.06
 :mk-bool-var  5
 :num-allocs   913859
 :rlimit-count 129
 :time         0.01
 :total-time   0.01)
