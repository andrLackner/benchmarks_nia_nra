unsat
((set-logic NRA)
(declare-fun d!6 () Real)
(declare-fun a!8 () Real)
(declare-fun b!7 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x684 (* a00 d!6)))
 (let ((?x483 (+ (* 2.0 (* y!5 b!7)) (* (- 2.0) (* y00 b!7)) (* (- 1.0) (* d!6 a!8)) ?x684)))
 (let (($x913 (>= ?x483 0.0)))
 (let (($x914 (= 0.0 ?x483)))
 (let ((@x269 (symm (commutativity (= $x914 (= ?x483 0.0))) (= (= ?x483 0.0) $x914))))
 (let (($x485 (= ?x483 0.0)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x304 (= (+ ?x30 ?x93 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let ((?x484 (* (- (/ 1.0 2.0)) ?x684)))
 (let ((?x164 (* d!6 a!8)))
 (let ((?x380 (* (/ 1.0 2.0) ?x164)))
 (let ((?x123 (* y00 b!7)))
 (let ((?x112 (* y!5 b!7)))
 (let ((?x342 (* (- 1.0) ?x112)))
 (let ((?x670 (* (- (/ 1.0 2.0)) (* y!5 y!5 y!5 b!7 b!7 b!7 a!8))))
 (let ((?x415 (* (- (/ 1.0 16.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8))))
 (let ((?x725 (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7))))
 (let ((?x350 (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 b!7 b!7 a!8 a!8))))
 (let ((?x617 (* (- (/ 1.0 8.0)) (* d!6 b!7 b!7))))
 (let ((?x603 (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 b!7 b!7 b!7 b!7))))
 (let ((?x425 (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 b!7 b!7 a!8 a!8))))
 (let ((?x375 (* (/ 1.0 64.0) (* d!6 d!6 d!6 b!7 b!7 b!7))))
 (let ((?x293 (+ (* (/ 1.0 16.0) (* d!6 y!5 y!5 b!7 b!7 b!7)) (* (- (/ 3.0 4.0)) (* d!6 y!5 y!5 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 8.0)) (* d!6 d!6 y!5 b!7 b!7 b!7 a!8)) ?x375 (* (- (/ 3.0 8.0)) (* d!6 y!5 y!5 b!7 b!7 a!8 a!8)) ?x425 ?x603 ?x617 ?x350 ?x725 ?x415 (* (- (/ 3.0 8.0)) (* d!6 y!5 y!5 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 16.0)) (* d!6 d!6 y!5 b!7 b!7 b!7 b!7)) (* (/ 1.0 16.0) (* d!6 d!6 y!5 b!7 b!7 b!7)) ?x670 (* (- (/ 3.0 16.0)) (* d!6 d!6 y!5 b!7 b!7 a!8 a!8)))))
 (let (($x210 (= (* ?x293 (+ ?x342 ?x123 ?x380 ?x484)) 0.0)))
 (let (($x211 (not $x210)))
 (let ((?x760 (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 a!8))))
 (let ((?x888 (* (- (/ 1.0 4.0)) (* y!5 y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8))))
 (let ((?x251 (+ (* (/ 1.0 8.0) (* d!6 y!5 y!5 y!5 b!7 b!7 a!8 a!8 a!8)) (* (/ 1.0 32.0) (* a00 d!6 d!6 y!5 y!5 b!7 b!7 b!7)) (* (- (/ 1.0 8.0)) (* d!6 y!5 b!7 b!7 b!7)) (* (/ 1.0 8.0) (* y00 d!6 b!7 b!7 b!7)) ?x888 (* (- (/ 1.0 16.0)) (* a00 d!6 d!6 b!7 b!7)) (* (/ 1.0 16.0) (* d!6 y!5 y!5 y!5 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 32.0)) (* d!6 d!6 y!5 y!5 b!7 b!7 b!7 a!8)) ?x760 (* (- (/ 1.0 8.0)) (* a00 d!6 y!5 y!5 y!5 b!7 b!7 a!8 a!8)) (* (- (/ 1.0 16.0)) (* y00 d!6 y!5 y!5 b!7 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* y00 y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8)))))
 (let (($x592 (= ?x251 0.0)))
 (let (($x119 (not $x592)))
 (let (($x208 (or $x119 $x211)))
 (let (($x795 (and $x208 $x304 (= (+ (* b00 d!6) (* (- 1.0) (* d00 b!7))) 0.0) $x485)))
 (let ((?x612 (+ ?x164 (* (- 2.0) ?x112) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x381 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x93 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x384 (+ ?x617 (* (/ 1.0 16.0) (* y!5 y!5 d!6 b!7 b!7 b!7)) ?x350 (* (/ 1.0 16.0) (* y!5 d!6 d!6 b!7 b!7 b!7)) ?x375 ?x603 ?x670 (* (- (/ 3.0 8.0)) (* y!5 y!5 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 4.0)) (* y!5 y!5 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 8.0)) (* y!5 y!5 d!6 b!7 b!7 a!8 a!8)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 3.0 8.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 3.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 a!8 a!8)) ?x725 ?x415 ?x425)))
 (let (($x659 (= (* ?x384 (+ ?x380 ?x342 (* b!7 y00) (* (- (/ 1.0 2.0)) (* d!6 a00)))) 0.0)))
 (let ((?x608 (+ ?x760 (* (- (/ 1.0 8.0)) (* y!5 d!6 b!7 b!7 b!7)) (* (/ 1.0 8.0) (* d!6 b!7 b!7 b!7 y00)) (* (- (/ 1.0 16.0)) (* d!6 d!6 b!7 b!7 a00)) (* (- (/ 1.0 32.0)) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 a!8)) (* (/ 1.0 16.0) (* y!5 y!5 y!5 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 b!7 b!7 b!7 b!7 y00)) (* (/ 1.0 32.0) (* y!5 y!5 d!6 d!6 b!7 b!7 b!7 a00)) (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 b!7 b!7 a!8 a!8 a!8)) ?x888 (* (/ 1.0 4.0) (* y!5 y!5 y!5 b!7 b!7 b!7 a!8 a!8 y00)) (* (- (/ 1.0 8.0)) (* y!5 y!5 y!5 d!6 b!7 b!7 a!8 a!8 a00)))))
 (let (($x553 (and (or (not (= ?x608 0.0)) (not $x659)) $x381 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x612 0.0))))
 (let (($x517 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x116 (* y b)))
 (let ((?x135 (* (- 2.0) ?x116)))
 (let ((?x110 (* d a)))
 (let (($x170 (= (+ ?x110 ?x135 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x96 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x125 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x93 (* 2.0 (* y b00))) 0.0)))
 (let ((?x140 (* b y00)))
 (let ((?x177 (* (- 1.0) ?x116)))
 (let ((?x144 (* (/ 1.0 2.0) ?x110)))
 (let ((?x229 (+ ?x144 ?x177 ?x140 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x946 (+ ?x249 ?x265 ?x288 (* (/ 1.0 16.0) (* y d d b b b)) (* (/ 1.0 64.0) (* d d d b b b)) (* (- (/ 1.0 4.0)) (* y y y b b b b)) (* (- (/ 1.0 2.0)) (* y y y b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b b b)) (* (- (/ 3.0 4.0)) (* y y d b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b a a)) (* (- (/ 3.0 16.0)) (* y d d b b b b)) (* (- (/ 3.0 8.0)) (* y d d b b b a)) (* (- (/ 3.0 16.0)) (* y d d b b a a)) (* (- (/ 1.0 32.0)) (* d d d b b b b)) (* (- (/ 1.0 16.0)) (* d d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b a a)))))
 (let ((?x398 (+ (* (/ 1.0 16.0) (* d d b b a)) (* (- (/ 1.0 8.0)) (* y d b b b)) (* (/ 1.0 8.0) (* d b b b y00)) (* (- (/ 1.0 16.0)) (* d d b b a00)) (* (- (/ 1.0 32.0)) (* y y d d b b b a)) (* (/ 1.0 16.0) (* y y y d b b b b)) (* (- (/ 1.0 16.0)) (* y y d b b b b y00)) (* (/ 1.0 32.0) (* y y d d b b b a00)) (* (/ 1.0 8.0) (* y y y d b b a a a)) (* (- (/ 1.0 4.0)) (* y y y y b b b a a)) (* (/ 1.0 4.0) (* y y y b b b a a y00)) (* (- (/ 1.0 8.0)) (* y y y d b b a a a00)))))
 (let (($x390 (not (= ?x398 0.0))))
 (and (or $x390 (not (= (* ?x946 ?x229) 0.0))) $x125 $x96 $x170))))))))))))))))))) :qid k!33))
 ))
 (let (($x151 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x116 (* y b)))
 (let ((?x135 (* (- 2.0) ?x116)))
 (let ((?x110 (* d a)))
 (let (($x690 (= (+ ?x110 ?x135 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x422 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let (($x122 (= (+ ?x93 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x817 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x370 (* y00 b)))
 (let ((?x613 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x370 ?x817)))
 (let ((?x348 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x679 (+ ?x249 (* (/ 1.0 16.0) (* ?x348 ?x348 d b b b)) (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x348 ?x348 ?x348 b b)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x630 (* (+ ?x249 ?x265 ?x288) (+ (* (/ 1.0 2.0) ?x110) (* (- 1.0) ?x116) ?x370 ?x817))))
 (let (($x700 (or (not (= ?x630 0.0)) (not (= (* ?x679 ?x613) 0.0)))))
 (and $x700 $x122 $x422 $x690))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x527 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x116 (* y b)))
 (let ((?x135 (* (- 2.0) ?x116)))
 (let ((?x110 (* d a)))
 (let (($x170 (= (+ ?x110 ?x135 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x96 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x125 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x93 (* 2.0 (* y b00))) 0.0)))
 (let ((?x140 (* b y00)))
 (let ((?x177 (* (- 1.0) ?x116)))
 (let ((?x144 (* (/ 1.0 2.0) ?x110)))
 (let ((?x229 (+ ?x144 ?x177 ?x140 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x946 (+ ?x249 ?x265 ?x288 (* (/ 1.0 16.0) (* y d d b b b)) (* (/ 1.0 64.0) (* d d d b b b)) (* (- (/ 1.0 4.0)) (* y y y b b b b)) (* (- (/ 1.0 2.0)) (* y y y b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b b b)) (* (- (/ 3.0 4.0)) (* y y d b b b a)) (* (- (/ 3.0 8.0)) (* y y d b b a a)) (* (- (/ 3.0 16.0)) (* y d d b b b b)) (* (- (/ 3.0 8.0)) (* y d d b b b a)) (* (- (/ 3.0 16.0)) (* y d d b b a a)) (* (- (/ 1.0 32.0)) (* d d d b b b b)) (* (- (/ 1.0 16.0)) (* d d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b a a)))))
 (let ((?x398 (+ (* (/ 1.0 16.0) (* d d b b a)) (* (- (/ 1.0 8.0)) (* y d b b b)) (* (/ 1.0 8.0) (* d b b b y00)) (* (- (/ 1.0 16.0)) (* d d b b a00)) (* (- (/ 1.0 32.0)) (* y y d d b b b a)) (* (/ 1.0 16.0) (* y y y d b b b b)) (* (- (/ 1.0 16.0)) (* y y d b b b b y00)) (* (/ 1.0 32.0) (* y y d d b b b a00)) (* (/ 1.0 8.0) (* y y y d b b a a a)) (* (- (/ 1.0 4.0)) (* y y y y b b b a a)) (* (/ 1.0 4.0) (* y y y b b b a a y00)) (* (- (/ 1.0 8.0)) (* y y y d b b a a a00)))))
 (let (($x390 (not (= ?x398 0.0))))
 (let (($x940 (and (or $x390 (not (= (* ?x946 ?x229) 0.0))) $x125 $x96 $x170)))
 (let (($x690 (= (+ ?x110 ?x135 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x422 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x122 (= (+ ?x93 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x817 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x370 (* y00 b)))
 (let ((?x613 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x370 ?x817)))
 (let ((?x348 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x679 (+ ?x249 (* (/ 1.0 16.0) (* ?x348 ?x348 d b b b)) (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x348 ?x348 ?x348 b b)))))
 (let (($x700 (or (not (= (* (+ ?x249 ?x265 ?x288) (+ ?x144 ?x177 ?x370 ?x817)) 0.0)) (not (= (* ?x679 ?x613) 0.0)))))
 (let (($x412 (and $x700 $x122 $x422 $x690)))
 (rewrite (= $x412 $x940))))))))))))))))))))))))))))))))))
 ))
 (let (($x703 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x817 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x370 (* y00 b)))
 (let ((?x613 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x370 ?x817)))
 (let ((?x348 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x679 (+ ?x249 (* (/ 1.0 16.0) (* ?x348 ?x348 d b b b)) (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x348 ?x348 ?x348 b b)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x630 (* (+ ?x249 ?x265 ?x288) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x370 ?x817))))
 (let (($x700 (or (not (= ?x630 0.0)) (not (= (* ?x679 ?x613) 0.0)))))
 (let ((?x116 (* y b)))
 (let ((?x135 (* (- 2.0) ?x116)))
 (let ((?x110 (* d a)))
 (let (($x690 (= (+ ?x110 ?x135 (* 2.0 ?x370) (* (- 1.0) ?x48)) 0.0)))
 (let (($x422 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let (($x122 (= (+ ?x93 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x122 $x422 $x690 $x700))))))))))))))))))))) :qid k!33))
 ))
 (let (($x84 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x70 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x68 (+ a b)))
 (let ((?x38 (- 1.0)))
 (let ((?x60 (* ?x38 ?x53 ?x53 ?x51)))
 (let ((?x78 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 ?x70 ?x70)) (* ?x68 ?x68 ?x53 ?x53 ?x70 ?x70 ?x70))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x74 (- (+ (- (* ?x68 ?x51) (* 2.0 ?x53 ?x70)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x64 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 y y)) (* a a ?x53 ?x53 y y y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x64) 0.0)) (not (= (* ?x74 ?x78) 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x214 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x817 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x370 (* y00 b)))
 (let ((?x613 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x370 ?x817)))
 (let ((?x348 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x68 (+ a b)))
 (let ((?x249 (* (- (/ 1.0 8.0)) (* d b b))))
 (let ((?x679 (+ ?x249 (* (/ 1.0 16.0) (* ?x348 ?x348 d b b b)) (* (- (/ 1.0 4.0)) (* ?x68 ?x68 ?x348 ?x348 ?x348 b b)))))
 (let ((?x288 (* (- (/ 1.0 4.0)) (* y y y b b a a))))
 (let ((?x265 (* (/ 1.0 16.0) (* y y d b b b))))
 (let ((?x630 (* (+ ?x249 ?x265 ?x288) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x370 ?x817))))
 (let (($x700 (or (not (= ?x630 0.0)) (not (= (* ?x679 ?x613) 0.0)))))
 (let ((?x116 (* y b)))
 (let ((?x135 (* (- 2.0) ?x116)))
 (let ((?x110 (* d a)))
 (let (($x690 (= (+ ?x110 ?x135 (* 2.0 ?x370) (* (- 1.0) ?x48)) 0.0)))
 (let (($x422 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x93 (* (- 2.0) (* b00 y00))))
 (let (($x122 (= (+ ?x93 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x557 (and $x122 $x422 $x690 $x700)))
 (let ((?x51 (/ d 2.0)))
 (let ((?x70 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x38 (- 1.0)))
 (let ((?x60 (* ?x38 ?x53 ?x53 ?x51)))
 (let ((?x78 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 ?x70 ?x70)) (* ?x68 ?x68 ?x53 ?x53 ?x70 ?x70 ?x70))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x74 (- (+ (- (* ?x68 ?x51) (* 2.0 ?x53 ?x70)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x64 (- (+ ?x60 (* ?x53 ?x53 ?x53 ?x51 y y)) (* a a ?x53 ?x53 y y y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x83 (and $x36 (= (+ (* ?x38 b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x64) 0.0)) (not (= (* ?x74 ?x78) 0.0))))))
 (rewrite (= $x83 $x557))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x300 (mp (mp @x85 (quant-intro (proof-bind ?x214) (= $x84 $x703)) $x703) (rewrite (= $x703 $x151)) $x151)))
 (let ((@x595 (mp~ (mp @x300 (quant-intro (proof-bind ?x527) (= $x151 $x517)) $x517) (sk (~ $x517 $x553)) $x553)))
 (let ((@x178 (mp @x595 (rewrite (= $x553 $x795)) $x795)))
 (let ((@x951 (mp (and-elim @x178 $x485) @x269 $x914)))
 (let ((@x836 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x914) $x913)) @x951 $x913)))
 (let (($x290 (<= ?x483 0.0)))
 (let ((@x749 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x914) $x290)) @x951 $x290)))
 (let (($x892 (>= ?x251 0.0)))
 (let (($x713 (not $x892)))
 (let (($x682 (<= ?x251 0.0)))
 (let ((@x905 (unit-resolution ((_ th-lemma arith) (or (not $x290) $x682 (not $x913))) (hypothesis (not $x682)) @x749 @x836 false)))
 (let (($x562 (= 0.0 ?x251)))
 (let (($x722 (not $x562)))
 (let ((@x724 (monotonicity (symm (commutativity (= $x562 $x592)) (= $x592 $x562)) (= $x119 $x722))))
 (let ((?x789 (+ ?x484 ?x342 ?x123 ?x380)))
 (let (($x786 (= ?x789 0.0)))
 (let (($x598 (or (not $x786) $x210)))
 (let ((@x518 (unit-resolution ((_ th-lemma arith) $x598) (hypothesis $x211) (hypothesis $x786) false)))
 (let ((@x566 (unit-resolution (lemma @x518 $x598) (symm ((_ th-lemma arith) @x749 @x836 (= 0.0 ?x789)) $x786) $x210)))
 (let ((@x730 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x562 (not $x682) $x713)) (mp (unit-resolution (and-elim @x178 $x208) @x566 $x119) @x724 $x722) (or (not $x682) $x713))))
 (unit-resolution ((_ th-lemma arith) (or (not $x290) (not $x913) $x892)) (unit-resolution @x730 (lemma @x905 $x682) $x713) @x749 @x836 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs               26
 :arith-eq-adapter        15
 :arith-conflicts         10
 :arith-diseq             21
 :arith-grobner-calls     2
 :arith-grobner-conflicts 2
 :arith-horner-calls      2
 :arith-lower             19
 :arith-make-feasible     18
 :arith-max-columns       58
 :arith-max-rows          7
 :arith-nla-explanations  7
 :arith-nla-lemmas        9
 :arith-offset-eqs        3
 :arith-upper             15
 :conflicts               6
 :decisions               21
 :del-clause              35
 :final-checks            14
 :max-memory              18.68
 :memory                  17.34
 :mk-bool-var             57
 :mk-clause               53
 :num-allocs              855816
 :num-checks              1
 :propagations            28
 :rlimit-count            4884
 :time                    0.01
 :total-time              0.02)
