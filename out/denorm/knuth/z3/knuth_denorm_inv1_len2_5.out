unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun q!3 () Int)
(declare-fun x!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x41 (* d00 d00 q00)))
 (let ((?x32 (* 8 r00)))
 (let ((?x1004 (+ ?x32 ?x41 (* 4 (* d00 x00)) (* (- 2) (* d00 q00)) (* 4 (* r!2 d!1)) (* (- 4) (* r00 d00)) (* 2 (* q!3 d!1)) (* (- 8) r!2) (* (- 4) (* d!1 x!0)) (* (- 1) (* q!3 d!1 d!1)))))
 (let (($x1102 (<= ?x1004 0)))
 (let (($x699 (= ?x1004 0)))
 (let ((?x1285 (* (- 1) x!0)))
 (let ((?x518 (* 2 r!2)))
 (let ((?x351 (+ 2 q!3 ?x518 d!1 ?x1285)))
 (let ((?x196 (+ 4 q!3)))
 (let ((?x156 (+ 2 d!1)))
 (let ((?x1192 (* (- 4) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 d00 x00))))
 (let ((?x436 (* (- 1) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 d00 d00 q00))))
 (let ((?x1253 (* 2 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 d00 q00))))
 (let ((?x1217 (* 4 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r00 d00))))
 (let ((?x1370 (* (- 4) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 d!1))))
 (let ((?x312 (* (- 2) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 q!3 d!1))))
 (let ((?x161 (* 4 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 x!0 d!1))))
 (let ((?x656 (+ ?x161 ?x312 (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 q!3 d!1 d!1) ?x1370 (* 8 (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 r!2)) ?x1217 (* 4 (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 r00 d00)) (* (- 8) (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 r00)) (* (- 8) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r00)) (* 4 (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 x!0 d!1)) ?x1253 (* (- 4) (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 r!2 d!1)) (* (- 4) (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 d00 x00)) ?x436 ?x1192 (* (- 1) (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 d00 d00 q00)) (* 2 (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 d00 q00)) (* 8 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2)) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 q!3 d!1 d!1) (* (- 2) (* ?x196 ?x196 ?x196 ?x351 ?x351 ?x351 r!2 q!3 d!1)))))
 (let (($x804 (= ?x656 0)))
 (let (($x1160 (not $x804)))
 (let ((?x978 (* q!3 d!1 d!1)))
 (let ((?x811 (* 8 r!2)))
 (let ((?x688 (* q!3 d!1)))
 (let ((?x917 (* (- 2) ?x688)))
 (let ((?x293 (* r00 d00)))
 (let ((?x294 (* 4 ?x293)))
 (let ((?x268 (* r!2 d!1)))
 (let ((?x1001 (* (- 4) ?x268)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x790 (+ ?x158 ?x206 ?x190 ?x256 ?x1001 ?x294 ?x917 ?x811 (* 4 (* d!1 x!0)) ?x978)))
 (let ((?x690 (* (- 12) (* q!3 q!3 q!3 q!3 r!2 r!2 r!2))))
 (let ((?x389 (* (- 6) (* q!3 q!3 q!3 q!3 q!3 r!2 r!2))))
 (let ((?x520 (* (- 6) (* q!3 q!3 q!3 r!2 r!2 x!0 x!0))))
 (let ((?x761 (* 12 (* q!3 q!3 q!3 r!2 r!2 r!2 x!0))))
 (let ((?x543 (* 12 (* q!3 q!3 q!3 q!3 r!2 r!2 x!0))))
 (let ((?x203 (* 3 (* q!3 q!3 q!3 q!3 q!3 r!2 x!0))))
 (let ((?x909 (* (- 3) (* q!3 q!3 q!3 q!3 r!2 x!0 x!0))))
 (let ((?x555 (* (- 8) (* q!3 q!3 q!3 r!2 r!2 r!2 r!2))))
 (let ((?x415 (* q!3 q!3 q!3 r!2 x!0 x!0 x!0)))
 (let ((?x302 (+ q!3 ?x518 ?x1285)))
 (let ((?x826 (* (- 1) (* ?x156 ?x156 ?x156 ?x302 ?x302 ?x302 q!3 q!3 q!3))))
 (let ((?x680 (* (- 1) (* q!3 q!3 q!3 q!3 q!3 q!3 r!2))))
 (let ((?x1363 (* (+ ?x680 ?x826 ?x415 ?x555 ?x909 ?x203 ?x543 ?x761 ?x520 ?x389 ?x690) ?x790)))
 (let (($x989 (= ?x1363 0)))
 (let ((?x859 (* (- 2) d!1)))
 (let ((?x825 (+ (- 4) q!3 ?x518 ?x859 ?x1285)))
 (let ((?x686 (+ (- 8) q!3)))
 (let ((?x730 (* (- 2) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 q!3 d!1))))
 (let ((?x737 (* 4 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 x!0 d!1))))
 (let ((?x428 (* (- 4) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 r!2 d!1))))
 (let ((?x454 (* (- 1) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 d00 d00 q00))))
 (let ((?x486 (* 2 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 d00 q00))))
 (let ((?x635 (* 4 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 r00 d00))))
 (let ((?x1309 (* (- 4) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 d00 x00))))
 (let ((?x1018 (+ (* 8 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 r!2)) (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 q!3 d!1 d!1) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 q!3 d!1 d!1) (* (- 4) (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 d00 x00)) (* (- 1) (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 d00 d00 q00)) ?x1309 ?x635 (* 8 (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 r!2)) (* 4 (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 r00 d00)) ?x486 (* (- 4) (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 r!2 d!1)) (* (- 2) (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 q!3 d!1)) (* (- 8) (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 r00)) (* 4 (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 x!0 d!1)) ?x454 ?x428 (* 2 (* ?x686 ?x686 ?x686 ?x825 ?x825 ?x825 r!2 d00 q00)) ?x737 (* (- 8) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x825 ?x825 ?x825 r00)) ?x730)))
 (let (($x566 (= ?x1018 0)))
 (let ((?x544 (* (- 1) d!1)))
 (let ((?x775 (+ (- 2) q!3 ?x518 ?x544 ?x1285)))
 (let ((?x864 (+ (- 4) q!3)))
 (let ((?x1273 (* (- 4) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 d00 x00))))
 (let ((?x1226 (* (- 1) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 d00 d00 q00))))
 (let ((?x545 (* (- 4) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 r!2 d!1))))
 (let ((?x672 (* 4 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 x!0 d!1))))
 (let ((?x1227 (* 4 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 r00 d00))))
 (let ((?x649 (* 2 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 d00 q00))))
 (let ((?x1053 (* (- 2) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 q!3 d!1))))
 (let ((?x1276 (+ (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 q!3 d!1 d!1) (* 8 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 r!2)) ?x1053 (* 4 (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 x!0 d!1)) ?x649 (* (- 1) (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 d00 d00 q00)) (* (- 8) (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 r00)) (* (- 2) (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 q!3 d!1)) (* 2 (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 d00 q00)) (* 8 (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 r!2)) ?x1227 (* 4 (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 r00 d00)) (* (- 4) (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 r!2 d!1)) ?x672 (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 q!3 d!1 d!1) ?x545 (* (- 8) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x775 ?x775 ?x775 r00)) ?x1226 (* (- 4) (* ?x864 ?x864 ?x864 ?x775 ?x775 ?x775 r!2 d00 x00)) ?x1273)))
 (let (($x286 (= ?x1276 0)))
 (let (($x511 (not $x286)))
 (let (($x1277 (or $x511 (not $x566) (not $x989) $x1160)))
 (let (($x153 (and $x699 $x1277)))
 (let ((?x856 (+ ?x811 ?x158 ?x206 ?x190 ?x256 ?x294 (* 4 (* x!0 d!1)) ?x1001 ?x978 ?x917)))
 (let ((?x209 (* (+ ?x680 ?x389 ?x203 ?x690 ?x543 ?x826 ?x520 ?x761 ?x909 ?x555 ?x415) ?x856)))
 (let ((?x1286 (+ (- 2) q!3 ?x518 ?x1285 ?x544)))
 (let ((?x844 (* (- 1) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 q!3 d!1 d!1))))
 (let ((?x457 (* (- 2) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 d00 q00))))
 (let ((?x404 (* (- 4) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 x!0 d!1))))
 (let ((?x1169 (* 4 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 d00 x00))))
 (let ((?x1272 (* (- 4) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 r00 d00))))
 (let ((?x554 (* 2 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 q!3 d!1))))
 (let ((?x792 (* 4 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 r!2 d!1))))
 (let ((?x485 (+ ?x792 (* 8 (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 r00)) ?x554 (* (- 8) (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 r!2)) (* 4 (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 r!2 d!1)) (* 8 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 r00)) (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 d00 d00 q00) ?x1272 (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 d00 d00 q00) (* 4 (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 d00 x00)) (* (- 1) (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 q!3 d!1 d!1)) (* (- 8) (* ?x864 ?x864 ?x864 ?x156 ?x156 ?x156 ?x1286 ?x1286 ?x1286 r!2)) ?x1169 (* (- 4) (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 r00 d00)) ?x404 (* (- 2) (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 d00 q00)) ?x457 (* 2 (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 q!3 d!1)) (* (- 4) (* ?x864 ?x864 ?x864 ?x1286 ?x1286 ?x1286 r!2 x!0 d!1)) ?x844)))
 (let ((?x973 (+ 2 q!3 ?x518 ?x1285 d!1)))
 (let ((?x841 (* 4 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 d00 x00))))
 (let ((?x807 (* 2 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 q!3 d!1))))
 (let ((?x919 (* (- 4) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 x!0 d!1))))
 (let ((?x869 (* (- 2) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 d00 q00))))
 (let ((?x633 (* (- 1) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 q!3 d!1 d!1))))
 (let ((?x497 (* (- 4) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r00 d00))))
 (let ((?x893 (* 4 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 d!1))))
 (let ((?x938 (+ ?x893 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 d00 d00 q00) (* (- 8) (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2)) (* (- 4) (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 r00 d00)) (* 8 (* ?x156 ?x156 ?x156 ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r00)) (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 d00 d00 q00) ?x497 ?x633 (* (- 2) (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 d00 q00)) (* 2 (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 q!3 d!1)) ?x869 (* 4 (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 r!2 d!1)) (* (- 4) (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 x!0 d!1)) (* 8 (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 r00)) ?x919 (* 4 (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 d00 x00)) ?x807 (* (- 8) (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 r!2)) (* (- 1) (* ?x196 ?x196 ?x196 ?x973 ?x973 ?x973 r!2 q!3 d!1 d!1)) ?x841)))
 (let ((?x888 (+ (- 4) q!3 ?x518 ?x1285 ?x859)))
 (let ((?x262 (* (- 2) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 q!3 d!1))))
 (let ((?x287 (* (- 4) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 r!2 d!1))))
 (let ((?x828 (* (- 4) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 d00 x00))))
 (let ((?x646 (* 4 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 x!0 d!1))))
 (let ((?x1057 (* 4 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 r00 d00))))
 (let ((?x655 (* (- 1) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 d00 d00 q00))))
 (let ((?x773 (* 2 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 d00 q00))))
 (let ((?x547 (+ (* 8 (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 r!2)) (* (- 4) (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 r!2 d!1)) ?x773 (* (- 2) (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 q!3 d!1)) (* (- 1) (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 d00 d00 q00)) ?x655 (* 2 (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 d00 q00)) (* 4 (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 r00 d00)) (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 q!3 d!1 d!1) (* (- 4) (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 d00 x00)) ?x1057 (* 8 (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 r!2)) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 q!3 d!1 d!1) ?x646 ?x828 (* 4 (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 x!0 d!1)) (* (- 8) (* ?x686 ?x686 ?x686 ?x156 ?x156 ?x156 ?x888 ?x888 ?x888 r00)) ?x287 (* (- 8) (* ?x686 ?x686 ?x686 ?x888 ?x888 ?x888 r!2 r00)) ?x262)))
 (let (($x1194 (or (not (= ?x547 0)) (not (= ?x938 0)) (not (= ?x485 0)) (not (= ?x209 0)))))
 (let (($x1078 (and (= ?x856 0) $x1194)))
 (let (($x1300 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x1595 (* (- 2) (* q d))))
 (let ((?x1599 (* q d d)))
 (let ((?x1598 (* r d)))
 (let ((?x1604 (* (- 4) ?x1598)))
 (let ((?x1209 (* 4 (* x d))))
 (let ((?x293 (* r00 d00)))
 (let ((?x294 (* 4 ?x293)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x187 (* 8 r)))
 (let ((?x325 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 ?x1209 ?x1604 ?x1599 ?x1595)))
 (let ((?x1199 (* q q q r x x x)))
 (let ((?x1189 (* (- 8) (* q q q r r r r))))
 (let ((?x1196 (* (- 3) (* q q q q r x x))))
 (let ((?x1191 (* 12 (* q q q r r r x))))
 (let ((?x1163 (* (- 6) (* q q q r r x x))))
 (let ((?x155 (* (- 1) x)))
 (let ((?x126 (* 2 r)))
 (let ((?x1206 (+ q ?x126 ?x155)))
 (let ((?x702 (+ 2 d)))
 (let ((?x1158 (* 12 (* q q q q r r x))))
 (let ((?x1139 (* (- 12) (* q q q q r r r))))
 (let ((?x1134 (* 3 (* q q q q q r x))))
 (let ((?x1121 (* (- 6) (* q q q q q r r))))
 (let ((?x1119 (* (- 1) (* q q q q q q r))))
 (let ((?x908 (+ ?x1119 ?x1121 ?x1134 ?x1139 ?x1158 (* (- 1) (* ?x702 ?x702 ?x702 ?x1206 ?x1206 ?x1206 q q q)) ?x1163 ?x1191 ?x1196 ?x1189 ?x1199)))
 (let (($x1531 (not (= (* ?x908 ?x325) 0))))
 (let ((?x1050 (* (- 1) d)))
 (let ((?x1215 (+ (- 2) q ?x126 ?x155 ?x1050)))
 (let ((?x1054 (+ (- 4) q)))
 (let ((?x1524 (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 q d d))))
 (let ((?x270 (* (- 2) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 d00 q00))))
 (let ((?x563 (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 x d))))
 (let ((?x229 (* 4 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 d00 x00))))
 (let ((?x458 (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r00 d00))))
 (let ((?x1237 (* 2 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 q d))))
 (let ((?x315 (* 4 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r d))))
 (let ((?x852 (+ ?x315 (* 8 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r00)) ?x1237 (* (- 8) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r)) (* 4 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r d)) (* 8 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r00)) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r d00 d00 q00) ?x458 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 d00 d00 q00) (* 4 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r d00 x00)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r q d d)) (* (- 8) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r)) ?x229 (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r00 d00)) ?x563 (* (- 2) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r d00 q00)) ?x270 (* 2 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r q d)) (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r x d)) ?x1524)))
 (let ((?x473 (+ 2 q ?x126 ?x155 d)))
 (let ((?x703 (+ 4 q)))
 (let ((?x227 (* 4 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 d00 x00))))
 (let ((?x1304 (* 2 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 q d))))
 (let ((?x552 (* (- 4) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 x d))))
 (let ((?x798 (* (- 2) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 d00 q00))))
 (let ((?x733 (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 q d d))))
 (let ((?x234 (* (- 4) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r00 d00))))
 (let ((?x191 (* 4 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d))))
 (let ((?x220 (+ ?x191 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 d00 d00 q00) (* (- 8) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r)) (* (- 4) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r00 d00)) (* 8 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r00)) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d00 d00 q00) ?x234 ?x733 (* (- 2) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d00 q00)) (* 2 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r q d)) ?x798 (* 4 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r d)) (* (- 4) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r x d)) (* 8 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r00)) ?x552 (* 4 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d00 x00)) ?x1304 (* (- 8) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r)) (* (- 1) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r q d d)) ?x227)))
 (let ((?x1025 (* (- 2) d)))
 (let ((?x890 (+ (- 4) q ?x126 ?x155 ?x1025)))
 (let ((?x1029 (+ (- 8) q)))
 (let ((?x188 (* (- 2) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 q d))))
 (let ((?x409 (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r d))))
 (let ((?x465 (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 d00 x00))))
 (let ((?x1005 (* 4 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 x d))))
 (let ((?x808 (* 4 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r00 d00))))
 (let ((?x557 (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 d00 d00 q00))))
 (let ((?x813 (* 2 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 d00 q00))))
 (let ((?x895 (+ (* 8 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r)) (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r d)) ?x813 (* (- 2) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r q d)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r d00 d00 q00)) ?x557 (* 2 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r d00 q00)) (* 4 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r00 d00)) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r q d d) (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r d00 x00)) ?x808 (* 8 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r)) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 q d d) ?x1005 ?x465 (* 4 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r x d)) (* (- 8) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r00)) ?x409 (* (- 8) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r00)) ?x188)))
 (let (($x791 (or (not (= ?x895 0)) (not (= ?x220 0)) (not (= ?x852 0)) $x1531)))
 (let (($x742 (= ?x325 0)))
 (and $x742 $x791))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let (($x897 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x1595 (* (- 2) (* q d))))
 (let ((?x1599 (* q d d)))
 (let ((?x1598 (* r d)))
 (let ((?x1604 (* (- 4) ?x1598)))
 (let ((?x1209 (* 4 (* x d))))
 (let ((?x293 (* r00 d00)))
 (let ((?x294 (* 4 ?x293)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x187 (* 8 r)))
 (let ((?x325 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 ?x1209 ?x1604 ?x1599 ?x1595)))
 (let ((?x1199 (* q q q r x x x)))
 (let ((?x1189 (* (- 8) (* q q q r r r r))))
 (let ((?x1196 (* (- 3) (* q q q q r x x))))
 (let ((?x1191 (* 12 (* q q q r r r x))))
 (let ((?x1163 (* (- 6) (* q q q r r x x))))
 (let ((?x155 (* (- 1) x)))
 (let ((?x126 (* 2 r)))
 (let ((?x1206 (+ q ?x126 ?x155)))
 (let ((?x702 (+ 2 d)))
 (let ((?x1158 (* 12 (* q q q q r r x))))
 (let ((?x1139 (* (- 12) (* q q q q r r r))))
 (let ((?x1134 (* 3 (* q q q q q r x))))
 (let ((?x1121 (* (- 6) (* q q q q q r r))))
 (let ((?x1119 (* (- 1) (* q q q q q q r))))
 (let ((?x908 (+ ?x1119 ?x1121 ?x1134 ?x1139 ?x1158 (* (- 1) (* ?x702 ?x702 ?x702 ?x1206 ?x1206 ?x1206 q q q)) ?x1163 ?x1191 ?x1196 ?x1189 ?x1199)))
 (let (($x1531 (not (= (* ?x908 ?x325) 0))))
 (let ((?x1063 (* 8 d)))
 (let ((?x375 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 (* (- 4) (* d 2)) ?x1209 ?x1063 ?x1604 ?x1599 ?x1595)))
 (let ((?x1050 (* (- 1) d)))
 (let ((?x1215 (+ (- 2) q ?x126 ?x155 ?x1050)))
 (let ((?x1054 (+ (- 4) q)))
 (let ((?x610 (+ (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215)))))
 (let ((?x1030 (* 16 d)))
 (let ((?x288 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 (* (- 8) (* d 2)) ?x1209 ?x1030 ?x1604 ?x1599 ?x1595)))
 (let ((?x1025 (* (- 2) d)))
 (let ((?x890 (+ (- 4) q ?x126 ?x155 ?x1025)))
 (let ((?x1029 (+ (- 8) q)))
 (let ((?x873 (+ (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890)))))
 (let ((?x1600 (* (- 8) d)))
 (let ((?x639 (* 2 (* d 4))))
 (let ((?x473 (+ 2 q ?x126 ?x155 d)))
 (let ((?x703 (+ 4 q)))
 (let ((?x1182 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473)) (* (- 1) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r)))))
 (let ((?x250 (* ?x1182 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 ?x639 ?x1209 ?x1600 ?x1604 ?x1599 ?x1595))))
 (let (($x1043 (or (not (= ?x250 0)) (not (= (* ?x873 ?x288) 0)) (not (= (* ?x610 ?x375) 0)) $x1531)))
 (let (($x742 (= ?x325 0)))
 (and $x742 $x1043))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x1318 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x1595 (* (- 2) (* q d))))
 (let ((?x1599 (* q d d)))
 (let ((?x1598 (* r d)))
 (let ((?x1604 (* (- 4) ?x1598)))
 (let ((?x1209 (* 4 (* x d))))
 (let ((?x293 (* r00 d00)))
 (let ((?x294 (* 4 ?x293)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x187 (* 8 r)))
 (let ((?x325 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 ?x1209 ?x1604 ?x1599 ?x1595)))
 (let ((?x1199 (* q q q r x x x)))
 (let ((?x1189 (* (- 8) (* q q q r r r r))))
 (let ((?x1196 (* (- 3) (* q q q q r x x))))
 (let ((?x1191 (* 12 (* q q q r r r x))))
 (let ((?x1163 (* (- 6) (* q q q r r x x))))
 (let ((?x155 (* (- 1) x)))
 (let ((?x126 (* 2 r)))
 (let ((?x1206 (+ q ?x126 ?x155)))
 (let ((?x702 (+ 2 d)))
 (let ((?x1158 (* 12 (* q q q q r r x))))
 (let ((?x1139 (* (- 12) (* q q q q r r r))))
 (let ((?x1134 (* 3 (* q q q q q r x))))
 (let ((?x1121 (* (- 6) (* q q q q q r r))))
 (let ((?x1119 (* (- 1) (* q q q q q q r))))
 (let ((?x908 (+ ?x1119 ?x1121 ?x1134 ?x1139 ?x1158 (* (- 1) (* ?x702 ?x702 ?x702 ?x1206 ?x1206 ?x1206 q q q)) ?x1163 ?x1191 ?x1196 ?x1189 ?x1199)))
 (let (($x1531 (not (= (* ?x908 ?x325) 0))))
 (let ((?x1050 (* (- 1) d)))
 (let ((?x1215 (+ (- 2) q ?x126 ?x155 ?x1050)))
 (let ((?x1054 (+ (- 4) q)))
 (let ((?x1524 (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 q d d))))
 (let ((?x270 (* (- 2) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 d00 q00))))
 (let ((?x563 (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 x d))))
 (let ((?x229 (* 4 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 d00 x00))))
 (let ((?x458 (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r00 d00))))
 (let ((?x1237 (* 2 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 q d))))
 (let ((?x315 (* 4 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r d))))
 (let ((?x852 (+ ?x315 (* 8 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r00)) ?x1237 (* (- 8) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r)) (* 4 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r d)) (* 8 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r00)) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r d00 d00 q00) ?x458 (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 d00 d00 q00) (* 4 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r d00 x00)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r q d d)) (* (- 8) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215 r)) ?x229 (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r r00 d00)) ?x563 (* (- 2) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r d00 q00)) ?x270 (* 2 (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r q d)) (* (- 4) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r x d)) ?x1524)))
 (let ((?x473 (+ 2 q ?x126 ?x155 d)))
 (let ((?x703 (+ 4 q)))
 (let ((?x227 (* 4 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 d00 x00))))
 (let ((?x1304 (* 2 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 q d))))
 (let ((?x552 (* (- 4) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 x d))))
 (let ((?x798 (* (- 2) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 d00 q00))))
 (let ((?x733 (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 q d d))))
 (let ((?x234 (* (- 4) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r00 d00))))
 (let ((?x191 (* 4 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d))))
 (let ((?x220 (+ ?x191 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 d00 d00 q00) (* (- 8) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r)) (* (- 4) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r00 d00)) (* 8 (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r00)) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d00 d00 q00) ?x234 ?x733 (* (- 2) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d00 q00)) (* 2 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r q d)) ?x798 (* 4 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r d)) (* (- 4) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r x d)) (* 8 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r00)) ?x552 (* 4 (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r d00 x00)) ?x1304 (* (- 8) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r r)) (* (- 1) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r q d d)) ?x227)))
 (let ((?x1025 (* (- 2) d)))
 (let ((?x890 (+ (- 4) q ?x126 ?x155 ?x1025)))
 (let ((?x1029 (+ (- 8) q)))
 (let ((?x188 (* (- 2) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 q d))))
 (let ((?x409 (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r d))))
 (let ((?x465 (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 d00 x00))))
 (let ((?x1005 (* 4 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 x d))))
 (let ((?x808 (* 4 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r00 d00))))
 (let ((?x557 (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 d00 d00 q00))))
 (let ((?x813 (* 2 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 d00 q00))))
 (let ((?x895 (+ (* 8 (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r)) (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r d)) ?x813 (* (- 2) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r q d)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r d00 d00 q00)) ?x557 (* 2 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r d00 q00)) (* 4 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r00 d00)) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r q d d) (* (- 4) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r d00 x00)) ?x808 (* 8 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r)) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 q d d) ?x1005 ?x465 (* 4 (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r x d)) (* (- 8) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890 r00)) ?x409 (* (- 8) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r r00)) ?x188)))
 (let (($x791 (or (not (= ?x895 0)) (not (= ?x220 0)) (not (= ?x852 0)) $x1531)))
 (let (($x742 (= ?x325 0)))
 (let (($x1006 (and $x742 $x791)))
 (let ((?x1063 (* 8 d)))
 (let ((?x375 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 (* (- 4) (* d 2)) ?x1209 ?x1063 ?x1604 ?x1599 ?x1595)))
 (let ((?x610 (+ (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215)))))
 (let ((?x1030 (* 16 d)))
 (let ((?x288 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 (* (- 8) (* d 2)) ?x1209 ?x1030 ?x1604 ?x1599 ?x1595)))
 (let ((?x873 (+ (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890)))))
 (let ((?x1600 (* (- 8) d)))
 (let ((?x639 (* 2 (* d 4))))
 (let ((?x1182 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473)) (* (- 1) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r)))))
 (let ((?x250 (* ?x1182 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 ?x639 ?x1209 ?x1600 ?x1604 ?x1599 ?x1595))))
 (let (($x1043 (or (not (= ?x250 0)) (not (= (* ?x873 ?x288) 0)) (not (= (* ?x610 ?x375) 0)) $x1531)))
 (let (($x1125 (and $x742 $x1043)))
 (rewrite (= $x1125 $x1006))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1073 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x789 (* 4 (* d00 r00))))
 (let ((?x1025 (* (- 2) d)))
 (let ((?x155 (* (- 1) x)))
 (let ((?x126 (* 2 r)))
 (let ((?x675 (+ (- 4) ?x126 ?x155 q ?x1025)))
 (let ((?x702 (+ 2 d)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x631 (* 4 (* ?x702 r))))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x30 (* 8 q)))
 (let ((?x245 (* (- 8) x)))
 (let ((?x403 (* 16 r)))
 (let ((?x1296 (+ (- 32) ?x403 ?x245 ?x30 (* (- 16) d) ?x158 ?x631 ?x190 ?x206 (* (+ (- 8) q) ?x702 ?x702) (* (- 2) (* (+ (- 8) q) ?x702)) ?x256 (* (- 4) (* ?x702 ?x675)) ?x789)))
 (let ((?x1029 (+ (- 8) q)))
 (let ((?x682 (+ (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x675 ?x675 ?x675)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x675 ?x675 ?x675 r)))))
 (let (($x726 (not (= (* ?x682 ?x1296) 0))))
 (let ((?x578 (+ ?x403 ?x245 ?x30 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 q) (* (- 2) (* ?x702 q)) ?x256 (* (- 4) (* ?x702 (+ ?x126 ?x155 q))) ?x789)))
 (let ((?x921 (+ ?x126 ?x155 q)))
 (let ((?x629 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x921 ?x921 ?x921 q q q)) (* (- 1) (* ?x921 ?x921 ?x921 r q q q)))))
 (let (($x673 (not (= (* ?x629 ?x578) 0))))
 (let ((?x1600 (* (- 8) d)))
 (let ((?x1526 (+ (- 16) ?x403 ?x245 ?x30 ?x1600 ?x158 ?x631 ?x190 ?x206 (* (+ (- 4) q) ?x702 ?x702) (* (- 2) (* (+ (- 4) q) ?x702)) ?x256 (* (- 4) (* ?x702 (+ (- 2) ?x126 ?x155 q (* (- 1) d)))) ?x789)))
 (let ((?x1050 (* (- 1) d)))
 (let ((?x383 (+ (- 2) ?x126 ?x155 q ?x1050)))
 (let ((?x1054 (+ (- 4) q)))
 (let ((?x480 (+ (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x383 ?x383 ?x383)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x383 ?x383 ?x383 r)))))
 (let (($x616 (not (= (* ?x480 ?x1526) 0))))
 (let ((?x1063 (* 8 d)))
 (let ((?x464 (+ 16 ?x403 ?x245 ?x30 ?x1063 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 (+ 4 q)) (* (- 2) (* ?x702 (+ 4 q))) ?x256 (* (- 4) (* ?x702 (+ 2 ?x126 ?x155 q d))) ?x789)))
 (let ((?x1299 (+ 2 ?x126 ?x155 q d)))
 (let ((?x703 (+ 4 q)))
 (let ((?x459 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299)) (* (- 1) (* ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299 r)))))
 (let (($x468 (not (= (* ?x459 ?x464) 0))))
 (let ((?x1209 (* 4 (* x d))))
 (let ((?x187 (* 8 r)))
 (let ((?x435 (+ ?x187 ?x158 ?x1209 ?x190 ?x206 (* d d q) (* (- 2) (* d q)) ?x256 (* (- 4) (* d r)) ?x789)))
 (let (($x469 (= ?x435 0)))
 (and $x469 (or $x468 $x616 $x673 $x726)))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x1135 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x1595 (* (- 2) (* q d))))
 (let ((?x1599 (* q d d)))
 (let ((?x1598 (* r d)))
 (let ((?x1604 (* (- 4) ?x1598)))
 (let ((?x1209 (* 4 (* x d))))
 (let ((?x293 (* r00 d00)))
 (let ((?x294 (* 4 ?x293)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x187 (* 8 r)))
 (let ((?x325 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 ?x1209 ?x1604 ?x1599 ?x1595)))
 (let ((?x1199 (* q q q r x x x)))
 (let ((?x1189 (* (- 8) (* q q q r r r r))))
 (let ((?x1196 (* (- 3) (* q q q q r x x))))
 (let ((?x1191 (* 12 (* q q q r r r x))))
 (let ((?x1163 (* (- 6) (* q q q r r x x))))
 (let ((?x155 (* (- 1) x)))
 (let ((?x126 (* 2 r)))
 (let ((?x1206 (+ q ?x126 ?x155)))
 (let ((?x702 (+ 2 d)))
 (let ((?x1158 (* 12 (* q q q q r r x))))
 (let ((?x1139 (* (- 12) (* q q q q r r r))))
 (let ((?x1134 (* 3 (* q q q q q r x))))
 (let ((?x1121 (* (- 6) (* q q q q q r r))))
 (let ((?x1119 (* (- 1) (* q q q q q q r))))
 (let ((?x908 (+ ?x1119 ?x1121 ?x1134 ?x1139 ?x1158 (* (- 1) (* ?x702 ?x702 ?x702 ?x1206 ?x1206 ?x1206 q q q)) ?x1163 ?x1191 ?x1196 ?x1189 ?x1199)))
 (let (($x1531 (not (= (* ?x908 ?x325) 0))))
 (let ((?x1063 (* 8 d)))
 (let ((?x375 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 (* (- 4) (* d 2)) ?x1209 ?x1063 ?x1604 ?x1599 ?x1595)))
 (let ((?x1050 (* (- 1) d)))
 (let ((?x1215 (+ (- 2) q ?x126 ?x155 ?x1050)))
 (let ((?x1054 (+ (- 4) q)))
 (let ((?x610 (+ (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x1215 ?x1215 ?x1215 r)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x1215 ?x1215 ?x1215)))))
 (let ((?x1030 (* 16 d)))
 (let ((?x288 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 (* (- 8) (* d 2)) ?x1209 ?x1030 ?x1604 ?x1599 ?x1595)))
 (let ((?x1025 (* (- 2) d)))
 (let ((?x890 (+ (- 4) q ?x126 ?x155 ?x1025)))
 (let ((?x1029 (+ (- 8) q)))
 (let ((?x873 (+ (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x890 ?x890 ?x890 r)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x890 ?x890 ?x890)))))
 (let ((?x1600 (* (- 8) d)))
 (let ((?x639 (* 2 (* d 4))))
 (let ((?x473 (+ 2 q ?x126 ?x155 d)))
 (let ((?x703 (+ 4 q)))
 (let ((?x1182 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x473 ?x473 ?x473)) (* (- 1) (* ?x703 ?x703 ?x703 ?x473 ?x473 ?x473 r)))))
 (let ((?x250 (* ?x1182 (+ ?x187 ?x158 ?x206 ?x190 ?x256 ?x294 ?x639 ?x1209 ?x1600 ?x1604 ?x1599 ?x1595))))
 (let (($x1043 (or (not (= ?x250 0)) (not (= (* ?x873 ?x288) 0)) (not (= (* ?x610 ?x375) 0)) $x1531)))
 (let (($x742 (= ?x325 0)))
 (let (($x1125 (and $x742 $x1043)))
 (let ((?x789 (* 4 (* d00 r00))))
 (let ((?x631 (* 4 (* ?x702 r))))
 (let ((?x30 (* 8 q)))
 (let ((?x245 (* (- 8) x)))
 (let ((?x403 (* 16 r)))
 (let ((?x1296 (+ (- 32) ?x403 ?x245 ?x30 (* (- 16) d) ?x158 ?x631 ?x190 ?x206 (* ?x1029 ?x702 ?x702) (* (- 2) (* ?x1029 ?x702)) ?x256 (* (- 4) (* ?x702 (+ (- 4) ?x126 ?x155 q ?x1025))) ?x789)))
 (let ((?x675 (+ (- 4) ?x126 ?x155 q ?x1025)))
 (let ((?x682 (+ (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x675 ?x675 ?x675)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x675 ?x675 ?x675 r)))))
 (let (($x726 (not (= (* ?x682 ?x1296) 0))))
 (let ((?x578 (+ ?x403 ?x245 ?x30 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 q) (* (- 2) (* ?x702 q)) ?x256 (* (- 4) (* ?x702 (+ ?x126 ?x155 q))) ?x789)))
 (let ((?x921 (+ ?x126 ?x155 q)))
 (let ((?x629 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x921 ?x921 ?x921 q q q)) (* (- 1) (* ?x921 ?x921 ?x921 r q q q)))))
 (let (($x673 (not (= (* ?x629 ?x578) 0))))
 (let ((?x1526 (+ (- 16) ?x403 ?x245 ?x30 ?x1600 ?x158 ?x631 ?x190 ?x206 (* ?x1054 ?x702 ?x702) (* (- 2) (* ?x1054 ?x702)) ?x256 (* (- 4) (* ?x702 (+ (- 2) ?x126 ?x155 q ?x1050))) ?x789)))
 (let ((?x383 (+ (- 2) ?x126 ?x155 q ?x1050)))
 (let ((?x480 (+ (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x383 ?x383 ?x383)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x383 ?x383 ?x383 r)))))
 (let (($x616 (not (= (* ?x480 ?x1526) 0))))
 (let ((?x464 (+ 16 ?x403 ?x245 ?x30 ?x1063 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 ?x703) (* (- 2) (* ?x702 ?x703)) ?x256 (* (- 4) (* ?x702 (+ 2 ?x126 ?x155 q d))) ?x789)))
 (let ((?x1299 (+ 2 ?x126 ?x155 q d)))
 (let ((?x459 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299)) (* (- 1) (* ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299 r)))))
 (let (($x468 (not (= (* ?x459 ?x464) 0))))
 (let ((?x435 (+ ?x187 ?x158 ?x1209 ?x190 ?x206 (* d d q) (* (- 2) (* d q)) ?x256 (* (- 4) (* d r)) ?x789)))
 (let (($x469 (= ?x435 0)))
 (let (($x698 (and $x469 (or $x468 $x616 $x673 $x726))))
 (rewrite (= $x698 $x1125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x879 (exists ((q Int) (r Int) (d Int) (x Int) )(! (let ((?x789 (* 4 (* d00 r00))))
 (let ((?x1050 (* (- 1) d)))
 (let ((?x155 (* (- 1) x)))
 (let ((?x126 (* 2 r)))
 (let ((?x383 (+ (- 2) ?x126 ?x155 q ?x1050)))
 (let ((?x702 (+ 2 d)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x631 (* 4 (* ?x702 r))))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x1600 (* (- 8) d)))
 (let ((?x30 (* 8 q)))
 (let ((?x245 (* (- 8) x)))
 (let ((?x403 (* 16 r)))
 (let ((?x1526 (+ (- 16) ?x403 ?x245 ?x30 ?x1600 ?x158 ?x631 ?x190 ?x206 (* (+ (- 4) q) ?x702 ?x702) (* (- 2) (* (+ (- 4) q) ?x702)) ?x256 (* (- 4) (* ?x702 ?x383)) ?x789)))
 (let ((?x1054 (+ (- 4) q)))
 (let ((?x480 (+ (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x383 ?x383 ?x383)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x383 ?x383 ?x383 r)))))
 (let (($x616 (not (= (* ?x480 ?x1526) 0))))
 (let ((?x1063 (* 8 d)))
 (let ((?x464 (+ 16 ?x403 ?x245 ?x30 ?x1063 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 (+ 4 q)) (* (- 2) (* ?x702 (+ 4 q))) ?x256 (* (- 4) (* ?x702 (+ 2 ?x126 ?x155 q d))) ?x789)))
 (let ((?x1299 (+ 2 ?x126 ?x155 q d)))
 (let ((?x703 (+ 4 q)))
 (let ((?x459 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299)) (* (- 1) (* ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299 r)))))
 (let (($x468 (not (= (* ?x459 ?x464) 0))))
 (let ((?x1296 (+ (- 32) ?x403 ?x245 ?x30 (* (- 16) d) ?x158 ?x631 ?x190 ?x206 (* (+ (- 8) q) ?x702 ?x702) (* (- 2) (* (+ (- 8) q) ?x702)) ?x256 (* (- 4) (* ?x702 (+ (- 4) ?x126 ?x155 q (* (- 2) d)))) ?x789)))
 (let ((?x1025 (* (- 2) d)))
 (let ((?x675 (+ (- 4) ?x126 ?x155 q ?x1025)))
 (let ((?x1029 (+ (- 8) q)))
 (let ((?x682 (+ (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x675 ?x675 ?x675)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x675 ?x675 ?x675 r)))))
 (let (($x726 (not (= (* ?x682 ?x1296) 0))))
 (let ((?x578 (+ ?x403 ?x245 ?x30 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 q) (* (- 2) (* ?x702 q)) ?x256 (* (- 4) (* ?x702 (+ ?x126 ?x155 q))) ?x789)))
 (let ((?x921 (+ ?x126 ?x155 q)))
 (let ((?x629 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x921 ?x921 ?x921 q q q)) (* (- 1) (* ?x921 ?x921 ?x921 r q q q)))))
 (let (($x673 (not (= (* ?x629 ?x578) 0))))
 (let ((?x1209 (* 4 (* x d))))
 (let ((?x187 (* 8 r)))
 (let ((?x435 (+ ?x187 ?x158 ?x1209 ?x190 ?x206 (* d d q) (* (- 2) (* d q)) ?x256 (* (- 4) (* d r)) ?x789)))
 (let (($x469 (= ?x435 0)))
 (and $x469 (or $x673 $x726 $x468 $x616)))))))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x530 (lambda ((q Int) (r Int) (d Int) (x Int) )(let ((?x789 (* 4 (* d00 r00))))
 (let ((?x1025 (* (- 2) d)))
 (let ((?x155 (* (- 1) x)))
 (let ((?x126 (* 2 r)))
 (let ((?x675 (+ (- 4) ?x126 ?x155 q ?x1025)))
 (let ((?x702 (+ 2 d)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x631 (* 4 (* ?x702 r))))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x30 (* 8 q)))
 (let ((?x245 (* (- 8) x)))
 (let ((?x403 (* 16 r)))
 (let ((?x1296 (+ (- 32) ?x403 ?x245 ?x30 (* (- 16) d) ?x158 ?x631 ?x190 ?x206 (* (+ (- 8) q) ?x702 ?x702) (* (- 2) (* (+ (- 8) q) ?x702)) ?x256 (* (- 4) (* ?x702 ?x675)) ?x789)))
 (let ((?x1029 (+ (- 8) q)))
 (let ((?x682 (+ (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x702 ?x702 ?x702 ?x675 ?x675 ?x675)) (* (- 1) (* ?x1029 ?x1029 ?x1029 ?x675 ?x675 ?x675 r)))))
 (let (($x726 (not (= (* ?x682 ?x1296) 0))))
 (let ((?x578 (+ ?x403 ?x245 ?x30 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 q) (* (- 2) (* ?x702 q)) ?x256 (* (- 4) (* ?x702 (+ ?x126 ?x155 q))) ?x789)))
 (let ((?x921 (+ ?x126 ?x155 q)))
 (let ((?x629 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x921 ?x921 ?x921 q q q)) (* (- 1) (* ?x921 ?x921 ?x921 r q q q)))))
 (let (($x673 (not (= (* ?x629 ?x578) 0))))
 (let ((?x1600 (* (- 8) d)))
 (let ((?x1526 (+ (- 16) ?x403 ?x245 ?x30 ?x1600 ?x158 ?x631 ?x190 ?x206 (* (+ (- 4) q) ?x702 ?x702) (* (- 2) (* (+ (- 4) q) ?x702)) ?x256 (* (- 4) (* ?x702 (+ (- 2) ?x126 ?x155 q (* (- 1) d)))) ?x789)))
 (let ((?x1050 (* (- 1) d)))
 (let ((?x383 (+ (- 2) ?x126 ?x155 q ?x1050)))
 (let ((?x1054 (+ (- 4) q)))
 (let ((?x480 (+ (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x702 ?x702 ?x702 ?x383 ?x383 ?x383)) (* (- 1) (* ?x1054 ?x1054 ?x1054 ?x383 ?x383 ?x383 r)))))
 (let (($x616 (not (= (* ?x480 ?x1526) 0))))
 (let ((?x1063 (* 8 d)))
 (let ((?x464 (+ 16 ?x403 ?x245 ?x30 ?x1063 ?x158 ?x631 ?x190 ?x206 (* ?x702 ?x702 (+ 4 q)) (* (- 2) (* ?x702 (+ 4 q))) ?x256 (* (- 4) (* ?x702 (+ 2 ?x126 ?x155 q d))) ?x789)))
 (let ((?x1299 (+ 2 ?x126 ?x155 q d)))
 (let ((?x703 (+ 4 q)))
 (let ((?x459 (+ (* (- 1) (* ?x702 ?x702 ?x702 ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299)) (* (- 1) (* ?x703 ?x703 ?x703 ?x1299 ?x1299 ?x1299 r)))))
 (let (($x468 (not (= (* ?x459 ?x464) 0))))
 (let ((?x1209 (* 4 (* x d))))
 (let ((?x187 (* 8 r)))
 (let ((?x435 (+ ?x187 ?x158 ?x1209 ?x190 ?x206 (* d d q) (* (- 2) (* d q)) ?x256 (* (- 4) (* d r)) ?x789)))
 (let (($x469 (= ?x435 0)))
 (let (($x698 (and $x469 (or $x468 $x616 $x673 $x726))))
 (let (($x619 (and $x469 (or $x673 $x726 $x468 $x616))))
 (rewrite (= $x619 $x698)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x151 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x128 (- (- (+ (- (* 2 r) x) q) (* 2 d)) 4)))
 (let ((?x134 (- q 8)))
 (let ((?x62 (+ d 2)))
 (let ((?x77 (- 1)))
 (let ((?x145 (- (* ?x77 ?x62 ?x62 ?x62 ?x134 ?x134 ?x134 ?x128 ?x128 ?x128) (* ?x134 ?x134 ?x134 ?x128 ?x128 ?x128 r))))
 (let ((?x53 (* 4 d00 r00)))
 (let ((?x49 (* 2 d00 q00)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x39 (* 4 d00 x00)))
 (let ((?x132 (- (+ (- (* 8 ?x128) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x139 (+ (- (+ (- ?x132 ?x41) (* ?x62 ?x62 ?x134)) (* 2 ?x62 ?x134)) ?x49)))
 (let ((?x105 (- (- (+ (- (* 2 r) x) q) d) 2)))
 (let ((?x111 (- q 4)))
 (let ((?x122 (- (* ?x77 ?x62 ?x62 ?x62 ?x111 ?x111 ?x111 ?x105 ?x105 ?x105) (* ?x111 ?x111 ?x111 ?x105 ?x105 ?x105 r))))
 (let ((?x109 (- (+ (- (* 8 ?x105) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x116 (+ (- (+ (- ?x109 ?x41) (* ?x62 ?x62 ?x111)) (* 2 ?x62 ?x111)) ?x49)))
 (let ((?x57 (* 2 r)))
 (let ((?x58 (- ?x57 x)))
 (let ((?x84 (+ ?x58 q)))
 (let ((?x100 (- (* ?x77 ?x62 ?x62 ?x62 q q q ?x84 ?x84 ?x84) (* q q q ?x84 ?x84 ?x84 r))))
 (let ((?x88 (- (+ (- (* 8 ?x84) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x94 (+ (- (+ (- ?x88 ?x41) (* ?x62 ?x62 q)) (* 2 ?x62 q)) ?x49)))
 (let ((?x59 (+ ?x58 q d 2)))
 (let ((?x67 (+ q 4)))
 (let ((?x80 (- (* ?x77 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67 ?x59 ?x59 ?x59) (* ?x67 ?x67 ?x67 ?x59 ?x59 ?x59 r))))
 (let ((?x65 (- (+ (- (* 8 ?x59) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x72 (+ (- (+ (- ?x65 ?x41) (* ?x62 ?x62 ?x67)) (* 2 ?x62 ?x67)) ?x49)))
 (let (($x149 (or (not (= (* (+ (- ?x72 (* 4 ?x62 ?x59)) ?x53) ?x80) 0)) (not (= (* (+ (- ?x94 (* 4 ?x62 ?x84)) ?x53) ?x100) 0)) (not (= (* (+ (- ?x116 (* 4 ?x62 ?x105)) ?x53) ?x122) 0)) (not (= (* (+ (- ?x139 (* 4 ?x62 ?x128)) ?x53) ?x145) 0)))))
 (let ((?x44 (* d d q)))
 (let ((?x42 (- (+ (- (* 8 r) (* 8 r00)) (* 4 d x)) ?x39)))
 (let ((?x52 (- (+ (- (+ (- ?x42 ?x41) ?x44) (* 2 d q)) ?x49) (* 4 d r))))
 (and (= (+ ?x52 ?x53) 0) $x149)))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let (($x529 (exists ((q Int) (r Int) (d Int) (t Int) (x Int) )(! (let ((?x789 (* 4 (* d00 r00))))
 (let ((?x991 (* (- 1) d)))
 (let ((?x155 (* (- 1) x)))
 (let ((?x57 (* 2 r)))
 (let ((?x237 (+ (- 2) ?x57 ?x155 q ?x991)))
 (let ((?x261 (+ 2 d)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x874 (* 4 (* ?x261 r))))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x448 (* (- 8) d)))
 (let ((?x668 (* 8 q)))
 (let ((?x245 (* (- 8) x)))
 (let ((?x244 (* 16 r)))
 (let ((?x321 (+ (- 16) ?x244 ?x245 ?x668 ?x448 ?x158 ?x874 ?x190 ?x206 (* (+ (- 4) q) ?x261 ?x261) (* (- 2) (* (+ (- 4) q) ?x261)) ?x256 (* (- 4) (* ?x261 ?x237)) ?x789)))
 (let ((?x665 (+ (- 4) q)))
 (let ((?x1303 (+ (* (- 1) (* ?x665 ?x665 ?x665 ?x261 ?x261 ?x261 ?x237 ?x237 ?x237)) (* (- 1) (* ?x665 ?x665 ?x665 ?x237 ?x237 ?x237 r)))))
 (let ((?x187 (* 8 d)))
 (let ((?x1188 (+ 16 ?x244 ?x245 ?x668 ?x187 ?x158 ?x874 ?x190 ?x206 (* ?x261 ?x261 (+ 4 q)) (* (- 2) (* ?x261 (+ 4 q))) ?x256 (* (- 4) (* ?x261 (+ 2 ?x57 ?x155 q d))) ?x789)))
 (let ((?x666 (+ 2 ?x57 ?x155 q d)))
 (let ((?x345 (+ 4 q)))
 (let ((?x1166 (+ (* (- 1) (* ?x261 ?x261 ?x261 ?x345 ?x345 ?x345 ?x666 ?x666 ?x666)) (* (- 1) (* ?x345 ?x345 ?x345 ?x666 ?x666 ?x666 r)))))
 (let ((?x970 (+ (- 32) ?x244 ?x245 ?x668 (* (- 16) d) ?x158 ?x874 ?x190 ?x206 (* (+ (- 8) q) ?x261 ?x261) (* (- 2) (* (+ (- 8) q) ?x261)) ?x256 (* (- 4) (* ?x261 (+ (- 4) ?x57 ?x155 q (* (- 2) d)))) ?x789)))
 (let ((?x331 (* (- 2) d)))
 (let ((?x1044 (+ (- 4) ?x57 ?x155 q ?x331)))
 (let ((?x1056 (+ (- 8) q)))
 (let ((?x939 (+ (* (- 1) (* ?x1056 ?x1056 ?x1056 ?x261 ?x261 ?x261 ?x1044 ?x1044 ?x1044)) (* (- 1) (* ?x1056 ?x1056 ?x1056 ?x1044 ?x1044 ?x1044 r)))))
 (let ((?x1235 (+ ?x244 ?x245 ?x668 ?x158 ?x874 ?x190 ?x206 (* ?x261 ?x261 q) (* (- 2) (* ?x261 q)) ?x256 (* (- 4) (* ?x261 (+ ?x57 ?x155 q))) ?x789)))
 (let ((?x494 (+ ?x57 ?x155 q)))
 (let ((?x1345 (+ (* (- 1) (* ?x261 ?x261 ?x261 ?x494 ?x494 ?x494 q q q)) (* (- 1) (* ?x494 ?x494 ?x494 r q q q)))))
 (let (($x434 (or (not (= (* ?x1345 ?x1235) 0)) (not (= (* ?x939 ?x970) 0)) (not (= (* ?x1166 ?x1188) 0)) (not (= (* ?x1303 ?x321) 0)))))
 (let ((?x44 (* d d q)))
 (let ((?x30 (* 8 r)))
 (let ((?x1386 (+ ?x30 ?x158 (* 4 (* x d)) ?x190 ?x206 ?x44 (* (- 2) (* d q)) ?x256 (* (- 4) (* d r)) ?x789)))
 (and (= ?x1386 0) $x434))))))))))))))))))))))))))))))))))))))) :qid k!32))
 ))
 (let ((?x664 (lambda ((q Int) (r Int) (d Int) (t Int) (x Int) )(let ((?x789 (* 4 (* d00 r00))))
 (let ((?x991 (* (- 1) d)))
 (let ((?x155 (* (- 1) x)))
 (let ((?x57 (* 2 r)))
 (let ((?x237 (+ (- 2) ?x57 ?x155 q ?x991)))
 (let ((?x261 (+ 2 d)))
 (let ((?x255 (* d00 q00)))
 (let ((?x256 (* 2 ?x255)))
 (let ((?x41 (* d00 d00 q00)))
 (let ((?x206 (* (- 1) ?x41)))
 (let ((?x176 (* d00 x00)))
 (let ((?x190 (* (- 4) ?x176)))
 (let ((?x874 (* 4 (* ?x261 r))))
 (let ((?x158 (* (- 8) r00)))
 (let ((?x448 (* (- 8) d)))
 (let ((?x668 (* 8 q)))
 (let ((?x245 (* (- 8) x)))
 (let ((?x244 (* 16 r)))
 (let ((?x321 (+ (- 16) ?x244 ?x245 ?x668 ?x448 ?x158 ?x874 ?x190 ?x206 (* (+ (- 4) q) ?x261 ?x261) (* (- 2) (* (+ (- 4) q) ?x261)) ?x256 (* (- 4) (* ?x261 ?x237)) ?x789)))
 (let ((?x665 (+ (- 4) q)))
 (let ((?x1303 (+ (* (- 1) (* ?x665 ?x665 ?x665 ?x261 ?x261 ?x261 ?x237 ?x237 ?x237)) (* (- 1) (* ?x665 ?x665 ?x665 ?x237 ?x237 ?x237 r)))))
 (let ((?x187 (* 8 d)))
 (let ((?x1188 (+ 16 ?x244 ?x245 ?x668 ?x187 ?x158 ?x874 ?x190 ?x206 (* ?x261 ?x261 (+ 4 q)) (* (- 2) (* ?x261 (+ 4 q))) ?x256 (* (- 4) (* ?x261 (+ 2 ?x57 ?x155 q d))) ?x789)))
 (let ((?x666 (+ 2 ?x57 ?x155 q d)))
 (let ((?x345 (+ 4 q)))
 (let ((?x1166 (+ (* (- 1) (* ?x261 ?x261 ?x261 ?x345 ?x345 ?x345 ?x666 ?x666 ?x666)) (* (- 1) (* ?x345 ?x345 ?x345 ?x666 ?x666 ?x666 r)))))
 (let ((?x970 (+ (- 32) ?x244 ?x245 ?x668 (* (- 16) d) ?x158 ?x874 ?x190 ?x206 (* (+ (- 8) q) ?x261 ?x261) (* (- 2) (* (+ (- 8) q) ?x261)) ?x256 (* (- 4) (* ?x261 (+ (- 4) ?x57 ?x155 q (* (- 2) d)))) ?x789)))
 (let ((?x331 (* (- 2) d)))
 (let ((?x1044 (+ (- 4) ?x57 ?x155 q ?x331)))
 (let ((?x1056 (+ (- 8) q)))
 (let ((?x939 (+ (* (- 1) (* ?x1056 ?x1056 ?x1056 ?x261 ?x261 ?x261 ?x1044 ?x1044 ?x1044)) (* (- 1) (* ?x1056 ?x1056 ?x1056 ?x1044 ?x1044 ?x1044 r)))))
 (let ((?x1235 (+ ?x244 ?x245 ?x668 ?x158 ?x874 ?x190 ?x206 (* ?x261 ?x261 q) (* (- 2) (* ?x261 q)) ?x256 (* (- 4) (* ?x261 (+ ?x57 ?x155 q))) ?x789)))
 (let ((?x494 (+ ?x57 ?x155 q)))
 (let ((?x1345 (+ (* (- 1) (* ?x261 ?x261 ?x261 ?x494 ?x494 ?x494 q q q)) (* (- 1) (* ?x494 ?x494 ?x494 r q q q)))))
 (let (($x434 (or (not (= (* ?x1345 ?x1235) 0)) (not (= (* ?x939 ?x970) 0)) (not (= (* ?x1166 ?x1188) 0)) (not (= (* ?x1303 ?x321) 0)))))
 (let ((?x44 (* d d q)))
 (let ((?x30 (* 8 r)))
 (let ((?x1386 (+ ?x30 ?x158 (* 4 (* x d)) ?x190 ?x206 ?x44 (* (- 2) (* d q)) ?x256 (* (- 4) (* d r)) ?x789)))
 (let (($x472 (and (= ?x1386 0) $x434)))
 (let ((?x128 (- (- (+ (- ?x57 x) q) (* 2 d)) 4)))
 (let ((?x134 (- q 8)))
 (let ((?x62 (+ d 2)))
 (let ((?x77 (- 1)))
 (let ((?x145 (- (* ?x77 ?x62 ?x62 ?x62 ?x134 ?x134 ?x134 ?x128 ?x128 ?x128) (* ?x134 ?x134 ?x134 ?x128 ?x128 ?x128 r))))
 (let ((?x53 (* 4 d00 r00)))
 (let ((?x49 (* 2 d00 q00)))
 (let ((?x39 (* 4 d00 x00)))
 (let ((?x132 (- (+ (- (* 8 ?x128) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x139 (+ (- (+ (- ?x132 ?x41) (* ?x62 ?x62 ?x134)) (* 2 ?x62 ?x134)) ?x49)))
 (let ((?x105 (- (- (+ (- ?x57 x) q) d) 2)))
 (let ((?x111 (- q 4)))
 (let ((?x122 (- (* ?x77 ?x62 ?x62 ?x62 ?x111 ?x111 ?x111 ?x105 ?x105 ?x105) (* ?x111 ?x111 ?x111 ?x105 ?x105 ?x105 r))))
 (let ((?x109 (- (+ (- (* 8 ?x105) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x116 (+ (- (+ (- ?x109 ?x41) (* ?x62 ?x62 ?x111)) (* 2 ?x62 ?x111)) ?x49)))
 (let ((?x58 (- ?x57 x)))
 (let ((?x84 (+ ?x58 q)))
 (let ((?x100 (- (* ?x77 ?x62 ?x62 ?x62 q q q ?x84 ?x84 ?x84) (* q q q ?x84 ?x84 ?x84 r))))
 (let ((?x88 (- (+ (- (* 8 ?x84) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x94 (+ (- (+ (- ?x88 ?x41) (* ?x62 ?x62 q)) (* 2 ?x62 q)) ?x49)))
 (let ((?x59 (+ ?x58 q d 2)))
 (let ((?x67 (+ q 4)))
 (let ((?x80 (- (* ?x77 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67 ?x59 ?x59 ?x59) (* ?x67 ?x67 ?x67 ?x59 ?x59 ?x59 r))))
 (let ((?x65 (- (+ (- (* 8 ?x59) (* 8 r00)) (* 4 ?x62 r)) ?x39)))
 (let ((?x72 (+ (- (+ (- ?x65 ?x41) (* ?x62 ?x62 ?x67)) (* 2 ?x62 ?x67)) ?x49)))
 (let (($x149 (or (not (= (* (+ (- ?x72 (* 4 ?x62 ?x59)) ?x53) ?x80) 0)) (not (= (* (+ (- ?x94 (* 4 ?x62 ?x84)) ?x53) ?x100) 0)) (not (= (* (+ (- ?x116 (* 4 ?x62 ?x105)) ?x53) ?x122) 0)) (not (= (* (+ (- ?x139 (* 4 ?x62 ?x128)) ?x53) ?x145) 0)))))
 (let ((?x45 (+ (- (- (+ (- ?x30 (* 8 r00)) (* 4 d x)) ?x39) ?x41) ?x44)))
 (let ((?x54 (+ (- (+ (- ?x45 (* 2 d q)) ?x49) (* 4 d r)) ?x53)))
 (let (($x150 (and (= ?x54 0) $x149)))
 (rewrite (= $x150 $x472)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x341 (trans (quant-intro (proof-bind ?x664) (= $x151 $x529)) (elim-unused (= $x529 $x879)) (= $x151 $x879))))
 (let ((@x27 (asserted $x151)))
 (let ((@x222 (mp (mp @x27 @x341 $x879) (quant-intro (proof-bind ?x530) (= $x879 $x1073)) $x1073)))
 (let ((@x1284 (mp (mp @x222 (rewrite (= $x1073 $x1073)) $x1073) (quant-intro (proof-bind ?x1135) (= $x1073 $x897)) $x897)))
 (let ((@x731 (mp~ (mp @x1284 (quant-intro (proof-bind ?x1318) (= $x897 $x1300)) $x1300) (sk (~ $x1300 $x1078)) $x1078)))
 (let ((@x877 (mp @x731 (rewrite (= $x1078 $x153)) $x153)))
 (let ((@x363 (and-elim @x877 $x699)))
 (let ((@x1132 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x699) $x1102)) @x363 $x1102)))
 (let (($x1086 (>= ?x1004 0)))
 (let ((@x162 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x699) $x1086)) @x363 $x1086)))
 (let (($x1109 (not (<= ?x656 0))))
 (let (($x565 (<= ?x1276 0)))
 (let (($x1079 (>= ?x1276 0)))
 (let ((@x247 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x286 (not $x565) (not $x1079))) (lemma ((_ th-lemma arith) (hypothesis (not $x1079)) @x162 @x1132 false) $x1079) (lemma ((_ th-lemma arith) (hypothesis (not $x565)) @x162 @x1132 false) $x565) $x286)))
 (let (($x834 (>= ?x1363 0)))
 (let (($x1096 (<= ?x1363 0)))
 (let ((@x691 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x989 (not $x1096) (not $x834))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x1096)) @x1132 @x162 false) $x1096) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x834)) @x1132 @x162 false) $x834) $x989)))
 (let (($x1147 (>= ?x1018 0)))
 (let (($x603 (<= ?x1018 0)))
 (let ((@x777 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x566 (not $x603) (not $x1147))) (lemma ((_ th-lemma arith) (hypothesis (not $x603)) @x162 @x1132 false) $x603) (lemma ((_ th-lemma arith) (hypothesis (not $x1147)) @x162 @x1132 false) $x1147) $x566)))
 (let ((@x455 (unit-resolution (unit-resolution (and-elim @x877 $x1277) @x777 @x691 (or $x511 $x1160)) @x247 $x1160)))
 (let (($x1027 (>= ?x656 0)))
 (let ((@x905 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x804 $x1109 (not $x1027))) (lemma ((_ th-lemma arith) (hypothesis (not $x1027)) @x162 @x1132 false) $x1027) @x455 $x1109)))
 ((_ th-lemma arith) @x905 @x162 @x1132 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        7
 :arith-assert-lower        20
 :arith-assert-upper        20
 :arith-conflicts           8
 :arith-eq-adapter          7
 :arith-fixed-eqs           8
 :arith-gcd-tests           6
 :arith-grobner             8
 :arith-max-min             1558
 :arith-nonlinear-horner    76
 :arith-num-rows            14
 :arith-patches             6
 :arith-patches_succ        6
 :arith-pivots              4
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 115
 :arith-tableau-max-rows    14
 :conflicts                 8
 :decisions                 24
 :del-clause                19
 :final-checks              8
 :max-memory                5.11
 :memory                    3.29
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                127401047
 :num-checks                1
 :propagations              36
 :rlimit-count              174551
 :time                      0.18
 :total-time                0.19)
