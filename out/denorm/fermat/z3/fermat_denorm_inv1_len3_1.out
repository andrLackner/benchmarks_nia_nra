unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x875 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x624 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* 2 v!0) (* (- 1) (* v!0 v!0)) (* (- 2) u!1) (* (- 4) r!2) ?x875)))
 (let (($x425 (>= ?x624 0)))
 (let (($x611 (= ?x624 0)))
 (let ((?x227 (* (- 1) ?x875)))
 (let ((?x593 (* 4 r!2)))
 (let ((?x224 (* 2 u!1)))
 (let ((?x594 (* v!0 v!0)))
 (let ((?x804 (* (- 2) v!0)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x986 (+ ?x106 ?x122 ?x41 ?x46 ?x198 ?x804 ?x594 ?x224 ?x593 ?x227)))
 (let ((?x893 (* (- 8) ?x875)))
 (let ((?x552 (* (- 12) (* u!1 u!1 u!1))))
 (let ((?x543 (* (- 8) (* r!2 r!2))))
 (let ((?x542 (* (- 6) (* u!1 u!1 u!1 u!1))))
 (let ((?x536 (* (- 1) (* u!1 u!1 u!1 u!1 u!1))))
 (let ((?x318 (* v!0 v!0 r!2 r!2 r!2)))
 (let ((?x199 (* (- 1) (* u!1 u!1 u!1 r!2 r!2))))
 (let ((?x522 (+ (* (- 6) (* v!0 u!1 u!1 u!1)) (* (- 1) (* v!0 u!1 u!1 u!1 r!2)) ?x199 ?x318 (* (- 1) (* v!0 u!1 u!1 u!1 u!1)) (* (- 24) (* u!1 u!1 r!2)) (* (- 16) (* u!1 r!2)) ?x536 ?x542 (* v!0 v!0 u!1 u!1 u!1) (* (- 8) (* v!0 r!2)) (* (- 2) (* u!1 u!1 u!1 u!1 r!2)) (* (- 6) (* u!1 u!1 r!2 r!2)) (* (- 12) (* u!1 r!2 r!2)) (* (- 12) (* v!0 u!1 u!1)) (* 3 (* v!0 v!0 u!1 u!1 r!2)) (* 3 (* v!0 v!0 u!1 r!2 r!2)) ?x543 ?x552 (* (- 12) (* v!0 u!1 r!2)) ?x893 (* (- 6) (* v!0 u!1 u!1 r!2)) (* (- 8) (* v!0 u!1)) (* (- 12) (* u!1 u!1 u!1 r!2)))))
 (let ((?x428 (* ?x522 ?x986)))
 (let (($x1047 (= ?x428 0)))
 (let (($x525 (not $x1047)))
 (let ((?x453 (* (- 4) (* v!0 v!0 v!0 v!0))))
 (let ((?x580 (* (- 4) (* v!0 v!0 v!0))))
 (let ((?x467 (* (- 1) (* v!0 v!0 v!0 v!0 v!0))))
 (let ((?x282 (* v!0 u!1 u!1 u!1 r!2)))
 (let ((?x184 (* 4 (* r!2 r!2 r!2))))
 (let ((?x654 (+ (* 2 (* v!0 u!1 u!1 u!1)) ?x184 (* (- 12) (* v!0 v!0 r!2 r!2)) ?x282 ?x199 ?x318 (* 12 (* v!0 v!0 v!0 r!2)) ?x467 ?x580 (* 4 (* v!0 r!2 r!2 r!2)) (* 12 (* v!0 v!0 r!2)) (* (- 12) (* v!0 r!2 r!2)) ?x453 (* (- 3) (* v!0 v!0 v!0 r!2 r!2)) (* 3 (* v!0 v!0 v!0 v!0 r!2)) (* (- 2) (* u!1 u!1 u!1 r!2)))))
 (let ((?x109 (* ?x654 ?x986)))
 (let (($x278 (= ?x109 0)))
 (let (($x1053 (or (not $x278) $x525)))
 (let (($x907 (and $x611 $x1053)))
 (let ((?x396 (+ ?x593 ?x224 ?x804 ?x106 ?x122 ?x41 ?x227 ?x594 ?x46 ?x198)))
 (let ((?x262 (* r!2 r!2 r!2 v!0 v!0)))
 (let ((?x264 (* (- 1) (* r!2 r!2 u!1 u!1 u!1))))
 (let ((?x545 (+ ?x893 (* (- 12) (* r!2 u!1 v!0)) (* (- 6) (* u!1 u!1 u!1 v!0)) (* (- 6) (* r!2 u!1 u!1 v!0)) (* (- 8) (* u!1 v!0)) (* (- 1) (* r!2 u!1 u!1 u!1 v!0)) ?x264 (* u!1 u!1 u!1 v!0 v!0) (* (- 8) (* r!2 v!0)) ?x262 (* (- 1) (* u!1 u!1 u!1 u!1 v!0)) (* (- 2) (* r!2 u!1 u!1 u!1 u!1)) ?x536 ?x543 (* (- 16) (* r!2 u!1)) (* (- 12) (* r!2 r!2 u!1)) (* (- 24) (* r!2 u!1 u!1)) ?x552 (* (- 6) (* r!2 r!2 u!1 u!1)) (* (- 12) (* r!2 u!1 u!1 u!1)) ?x542 (* (- 12) (* u!1 u!1 v!0)) (* 3 (* r!2 u!1 u!1 v!0 v!0)) (* 3 (* r!2 r!2 u!1 v!0 v!0)))))
 (let ((?x126 (* r!2 u!1 u!1 u!1 v!0)))
 (let ((?x256 (+ (* 2 (* u!1 u!1 u!1 v!0)) ?x126 ?x264 ?x262 ?x184 (* (- 12) (* r!2 r!2 v!0)) (* 12 (* r!2 v!0 v!0)) ?x580 (* 4 (* r!2 r!2 r!2 v!0)) (* (- 12) (* r!2 r!2 v!0 v!0)) (* 12 (* r!2 v!0 v!0 v!0)) ?x453 (* (- 3) (* r!2 r!2 v!0 v!0 v!0)) (* 3 (* r!2 v!0 v!0 v!0 v!0)) ?x467 (* (- 2) (* r!2 u!1 u!1 u!1)))))
 (let (($x313 (and (= ?x396 0) (or (not (= (* ?x256 ?x396) 0)) (not (= (* ?x545 ?x396) 0))))))
 (let (($x1017 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x943 (* 3 (* r r u v v))))
 (let ((?x944 (* 3 (* r u u v v))))
 (let ((?x925 (* (- 6) (* u u u u))))
 (let ((?x808 (* r u u u)))
 (let ((?x922 (* (- 12) ?x808)))
 (let ((?x919 (* (- 6) (* r r u u))))
 (let ((?x916 (* (- 12) (* u u u))))
 (let ((?x913 (* (- 24) (* r u u))))
 (let ((?x909 (* (- 12) (* r r u))))
 (let ((?x906 (* (- 16) (* r u))))
 (let ((?x902 (* (- 8) (* r r))))
 (let ((?x883 (* (- 1) (* u u u u u))))
 (let ((?x899 (* (- 2) (* r u u u u))))
 (let ((?x701 (* (- 1) (* u u u u v))))
 (let ((?x441 (* r r r v v)))
 (let ((?x367 (* u u u v v)))
 (let ((?x393 (* (- 1) (* r r u u u))))
 (let ((?x333 (* r u u u v)))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x896 (* (- 8) ?x43)))
 (let ((?x436 (+ ?x896 (* (- 12) (* r u v)) (* (- 6) (* u u u v)) (* (- 6) (* r u u v)) (* (- 8) (* u v)) ?x334 ?x393 ?x367 (* (- 8) (* r v)) ?x441 ?x701 ?x899 ?x883 ?x902 ?x906 ?x909 ?x913 ?x916 ?x919 ?x922 ?x925 (* (- 12) (* u u v)) ?x944 ?x943)))
 (let (($x607 (not (= (* ?x436 ?x204) 0))))
 (let ((?x560 (* (- 2) ?x808)))
 (let ((?x606 (* (- 1) (* v v v v v))))
 (let ((?x623 (* 3 (* r v v v v))))
 (let ((?x621 (* (- 3) (* r r v v v))))
 (let ((?x546 (* v v v v)))
 (let ((?x619 (* (- 4) ?x546)))
 (let ((?x528 (* r v v v)))
 (let ((?x618 (* 12 ?x528)))
 (let ((?x510 (* r r v v)))
 (let ((?x617 (* (- 12) ?x510)))
 (let ((?x616 (* 4 (* r r r v))))
 (let ((?x499 (* (- 4) (* v v v))))
 (let ((?x615 (* 12 (* r v v))))
 (let ((?x613 (* (- 12) (* r r v))))
 (let ((?x455 (* 4 (* r r r))))
 (let ((?x225 (* u u u v)))
 (let ((?x358 (* 2 ?x225)))
 (let ((?x976 (+ ?x358 ?x333 ?x393 ?x441 ?x455 ?x613 ?x615 ?x499 ?x616 ?x617 ?x618 ?x619 ?x621 ?x623 ?x606 ?x560)))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x976 ?x204) 0)) $x607)))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x1063 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x808 (* r u u u)))
 (let ((?x560 (* (- 2) ?x808)))
 (let ((?x606 (* (- 1) (* v v v v v))))
 (let ((?x623 (* 3 (* r v v v v))))
 (let ((?x621 (* (- 3) (* r r v v v))))
 (let ((?x616 (* 4 (* r r r v))))
 (let ((?x499 (* (- 4) (* v v v))))
 (let ((?x615 (* 12 (* r v v))))
 (let ((?x613 (* (- 12) (* r r v))))
 (let ((?x455 (* 4 (* r r r))))
 (let ((?x441 (* r r r v v)))
 (let ((?x393 (* (- 1) (* r r u u u))))
 (let ((?x333 (* r u u u v)))
 (let ((?x225 (* u u u v)))
 (let ((?x358 (* 2 ?x225)))
 (let ((?x1042 (+ (* 2 (* v r r (* (- 1) v))) ?x358 (* 2 (* v r (* (- 1) v) r)) ?x333 ?x393 (* 2 (* v (* (- 1) v) (* (- 1) v) r)) (* 2 (* v (* (- 1) v) r r)) ?x441 ?x455 ?x613 ?x615 ?x499 ?x616 (* (- 6) (* r r v v)) (* 6 (* r v v v)) (* (- 2) (* v v v v)) ?x621 ?x623 ?x606 ?x560 (* 2 (* v (* (- 1) v) r (* (- 1) v))) (* 2 (* v r (* (- 1) v) (* (- 1) v))) (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v))))))
 (let ((?x943 (* 3 (* r r u v v))))
 (let ((?x944 (* 3 (* r u u v v))))
 (let ((?x925 (* (- 6) (* u u u u))))
 (let ((?x922 (* (- 12) ?x808)))
 (let ((?x919 (* (- 6) (* r r u u))))
 (let ((?x916 (* (- 12) (* u u u))))
 (let ((?x913 (* (- 24) (* r u u))))
 (let ((?x909 (* (- 12) (* r r u))))
 (let ((?x906 (* (- 16) (* r u))))
 (let ((?x902 (* (- 8) (* r r))))
 (let ((?x883 (* (- 1) (* u u u u u))))
 (let ((?x899 (* (- 2) (* r u u u u))))
 (let ((?x701 (* (- 1) (* u u u u v))))
 (let ((?x367 (* u u u v v)))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x896 (* (- 8) ?x43)))
 (let ((?x436 (+ ?x896 (* (- 12) (* r u v)) (* (- 6) ?x225) (* (- 6) (* r u u v)) (* (- 8) (* u v)) ?x334 ?x393 ?x367 (* (- 8) (* r v)) ?x441 ?x701 ?x899 ?x883 ?x902 ?x906 ?x909 ?x913 ?x916 ?x919 ?x922 ?x925 (* (- 12) (* u u v)) ?x944 ?x943)))
 (let (($x607 (not (= (* ?x436 ?x204) 0))))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or $x607 (not (= (* ?x1042 ?x204) 0)))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x447 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x943 (* 3 (* r r u v v))))
 (let ((?x944 (* 3 (* r u u v v))))
 (let ((?x925 (* (- 6) (* u u u u))))
 (let ((?x808 (* r u u u)))
 (let ((?x922 (* (- 12) ?x808)))
 (let ((?x919 (* (- 6) (* r r u u))))
 (let ((?x916 (* (- 12) (* u u u))))
 (let ((?x913 (* (- 24) (* r u u))))
 (let ((?x909 (* (- 12) (* r r u))))
 (let ((?x906 (* (- 16) (* r u))))
 (let ((?x902 (* (- 8) (* r r))))
 (let ((?x883 (* (- 1) (* u u u u u))))
 (let ((?x899 (* (- 2) (* r u u u u))))
 (let ((?x701 (* (- 1) (* u u u u v))))
 (let ((?x441 (* r r r v v)))
 (let ((?x367 (* u u u v v)))
 (let ((?x393 (* (- 1) (* r r u u u))))
 (let ((?x333 (* r u u u v)))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x896 (* (- 8) ?x43)))
 (let ((?x436 (+ ?x896 (* (- 12) (* r u v)) (* (- 6) (* u u u v)) (* (- 6) (* r u u v)) (* (- 8) (* u v)) ?x334 ?x393 ?x367 (* (- 8) (* r v)) ?x441 ?x701 ?x899 ?x883 ?x902 ?x906 ?x909 ?x913 ?x916 ?x919 ?x922 ?x925 (* (- 12) (* u u v)) ?x944 ?x943)))
 (let (($x607 (not (= (* ?x436 ?x204) 0))))
 (let ((?x560 (* (- 2) ?x808)))
 (let ((?x606 (* (- 1) (* v v v v v))))
 (let ((?x623 (* 3 (* r v v v v))))
 (let ((?x621 (* (- 3) (* r r v v v))))
 (let ((?x546 (* v v v v)))
 (let ((?x619 (* (- 4) ?x546)))
 (let ((?x528 (* r v v v)))
 (let ((?x618 (* 12 ?x528)))
 (let ((?x510 (* r r v v)))
 (let ((?x617 (* (- 12) ?x510)))
 (let ((?x616 (* 4 (* r r r v))))
 (let ((?x499 (* (- 4) (* v v v))))
 (let ((?x615 (* 12 (* r v v))))
 (let ((?x613 (* (- 12) (* r r v))))
 (let ((?x455 (* 4 (* r r r))))
 (let ((?x225 (* u u u v)))
 (let ((?x358 (* 2 ?x225)))
 (let ((?x976 (+ ?x358 ?x333 ?x393 ?x441 ?x455 ?x613 ?x615 ?x499 ?x616 ?x617 ?x618 ?x619 ?x621 ?x623 ?x606 ?x560)))
 (let (($x209 (= ?x204 0)))
 (let (($x566 (and $x209 (or (not (= (* ?x976 ?x204) 0)) $x607))))
 (let ((?x1042 (+ (* 2 (* v r r (* (- 1) v))) ?x358 (* 2 (* v r (* (- 1) v) r)) ?x333 ?x393 (* 2 (* v (* (- 1) v) (* (- 1) v) r)) (* 2 (* v (* (- 1) v) r r)) ?x441 ?x455 ?x613 ?x615 ?x499 ?x616 (* (- 6) ?x510) (* 6 ?x528) (* (- 2) ?x546) ?x621 ?x623 ?x606 ?x560 (* 2 (* v (* (- 1) v) r (* (- 1) v))) (* 2 (* v r (* (- 1) v) (* (- 1) v))) (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v))))))
 (let (($x1094 (and $x209 (or $x607 (not (= (* ?x1042 ?x204) 0))))))
 (rewrite (= $x1094 $x566))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x395 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x294 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x709 (+ r ?x103)))
 (let ((?x185 (+ 2 v)))
 (let ((?x761 (+ (* (- 1) (* ?x185 ?x709 u u u)) (* (- 1) (* ?x709 ?x709 u u u)) (* ?x185 ?x185 ?x709 ?x709 ?x709))))
 (let ((?x45 (* v v)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x721 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x91 (* ?x75 ?x75 ?x75 v v)))
 (let ((?x728 (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75 ?x75))))
 (let ((?x791 (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75 v))))
 (let (($x860 (or (not (= (* (+ ?x791 ?x728 ?x91) ?x721) 0)) (not (= (* ?x761 ?x294) 0)))))
 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) $x860)))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1065 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x808 (* r u u u)))
 (let ((?x560 (* (- 2) ?x808)))
 (let ((?x606 (* (- 1) (* v v v v v))))
 (let ((?x623 (* 3 (* r v v v v))))
 (let ((?x621 (* (- 3) (* r r v v v))))
 (let ((?x616 (* 4 (* r r r v))))
 (let ((?x499 (* (- 4) (* v v v))))
 (let ((?x615 (* 12 (* r v v))))
 (let ((?x613 (* (- 12) (* r r v))))
 (let ((?x455 (* 4 (* r r r))))
 (let ((?x441 (* r r r v v)))
 (let ((?x393 (* (- 1) (* r r u u u))))
 (let ((?x333 (* r u u u v)))
 (let ((?x225 (* u u u v)))
 (let ((?x358 (* 2 ?x225)))
 (let ((?x1042 (+ (* 2 (* v r r (* (- 1) v))) ?x358 (* 2 (* v r (* (- 1) v) r)) ?x333 ?x393 (* 2 (* v (* (- 1) v) (* (- 1) v) r)) (* 2 (* v (* (- 1) v) r r)) ?x441 ?x455 ?x613 ?x615 ?x499 ?x616 (* (- 6) (* r r v v)) (* 6 (* r v v v)) (* (- 2) (* v v v v)) ?x621 ?x623 ?x606 ?x560 (* 2 (* v (* (- 1) v) r (* (- 1) v))) (* 2 (* v r (* (- 1) v) (* (- 1) v))) (* 2 (* v (* (- 1) v) (* (- 1) v) (* (- 1) v))))))
 (let ((?x943 (* 3 (* r r u v v))))
 (let ((?x944 (* 3 (* r u u v v))))
 (let ((?x925 (* (- 6) (* u u u u))))
 (let ((?x922 (* (- 12) ?x808)))
 (let ((?x919 (* (- 6) (* r r u u))))
 (let ((?x916 (* (- 12) (* u u u))))
 (let ((?x913 (* (- 24) (* r u u))))
 (let ((?x909 (* (- 12) (* r r u))))
 (let ((?x906 (* (- 16) (* r u))))
 (let ((?x902 (* (- 8) (* r r))))
 (let ((?x883 (* (- 1) (* u u u u u))))
 (let ((?x899 (* (- 2) (* r u u u u))))
 (let ((?x701 (* (- 1) (* u u u u v))))
 (let ((?x367 (* u u u v v)))
 (let ((?x334 (* (- 1) ?x333)))
 (let ((?x896 (* (- 8) ?x43)))
 (let ((?x436 (+ ?x896 (* (- 12) (* r u v)) (* (- 6) ?x225) (* (- 6) (* r u u v)) (* (- 8) (* u v)) ?x334 ?x393 ?x367 (* (- 8) (* r v)) ?x441 ?x701 ?x899 ?x883 ?x902 ?x906 ?x909 ?x913 ?x916 ?x919 ?x922 ?x925 (* (- 12) (* u u v)) ?x944 ?x943)))
 (let (($x607 (not (= (* ?x436 ?x204) 0))))
 (let (($x209 (= ?x204 0)))
 (let (($x1094 (and $x209 (or $x607 (not (= (* ?x1042 ?x204) 0))))))
 (let ((?x294 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x709 (+ r ?x103)))
 (let ((?x185 (+ 2 v)))
 (let ((?x761 (+ (* (- 1) (* ?x185 ?x709 u u u)) (* (- 1) (* ?x709 ?x709 u u u)) (* ?x185 ?x185 ?x709 ?x709 ?x709))))
 (let ((?x721 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x91 (* ?x75 ?x75 ?x75 v v)))
 (let ((?x728 (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75 ?x75))))
 (let ((?x791 (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75 v))))
 (let (($x860 (or (not (= (* (+ ?x791 ?x728 ?x91) ?x721) 0)) (not (= (* ?x761 ?x294) 0)))))
 (let (($x936 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) $x860)))
 (rewrite (= $x936 $x1094))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((r Int) (u Int) (v Int) )(! (let ((?x75 (+ r u)))
 (let ((?x91 (* ?x75 ?x75 ?x75 v v)))
 (let ((?x79 (+ u 2)))
 (let ((?x66 (- 1)))
 (let ((?x92 (+ (- (* ?x66 ?x75 ?x79 ?x79 ?x79 v) (* ?x75 ?x75 ?x79 ?x79 ?x79)) ?x91)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) ?x92)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* ?x66 ?x52 u u u ?x57) (* ?x52 ?x52 u u u)) (* ?x52 ?x52 ?x52 ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x815 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x294 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x103 (* (- 1) v)))
 (let ((?x709 (+ r ?x103)))
 (let ((?x185 (+ 2 v)))
 (let ((?x761 (+ (* (- 1) (* ?x185 ?x709 u u u)) (* (- 1) (* ?x709 ?x709 u u u)) (* ?x185 ?x185 ?x709 ?x709 ?x709))))
 (let ((?x45 (* v v)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x721 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x91 (* ?x75 ?x75 ?x75 v v)))
 (let ((?x728 (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75 ?x75))))
 (let ((?x791 (* (- 1) (* (+ 2 u) (+ 2 u) (+ 2 u) ?x75 v))))
 (let (($x860 (or (not (= (* (+ ?x791 ?x728 ?x91) ?x721) 0)) (not (= (* ?x761 ?x294) 0)))))
 (let (($x936 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) $x860)))
 (let ((?x79 (+ u 2)))
 (let ((?x66 (- 1)))
 (let ((?x92 (+ (- (* ?x66 ?x75 ?x79 ?x79 ?x79 v) (* ?x75 ?x75 ?x79 ?x79 ?x79)) ?x91)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) ?x92)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (- (* ?x66 ?x52 u u u ?x57) (* ?x52 ?x52 u u u)) (* ?x52 ?x52 ?x52 ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x97 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0))))))
 (rewrite (= $x97 $x936))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x295 (mp (mp @x99 (quant-intro (proof-bind ?x815) (= $x98 $x395)) $x395) (rewrite (= $x395 $x395)) $x395)))
 (let ((@x603 (mp (mp @x295 (quant-intro (proof-bind ?x1065) (= $x395 $x1063)) $x1063) (quant-intro (proof-bind ?x447) (= $x1063 $x1017)) $x1017)))
 (let ((@x1055 (mp (mp~ @x603 (sk (~ $x1017 $x313)) $x313) (rewrite (= $x313 $x907)) $x907)))
 (let ((@x655 (and-elim @x1055 $x611)))
 (let ((@x193 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x611) $x425)) @x655 $x425)))
 (let (($x988 (<= ?x624 0)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x611) $x988)) @x655 $x988)))
 (let (($x167 (not (<= ?x428 0))))
 (let (($x268 (>= ?x428 0)))
 (let (($x206 (>= ?x109 0)))
 (let (($x319 (<= ?x109 0)))
 (let ((@x492 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x278 (not $x319) (not $x206))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x319)) @x104 @x193 false) $x319) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x206)) @x104 @x193 false) $x206) $x278)))
 (let ((@x490 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1047 $x167 (not $x268))) (unit-resolution (and-elim @x1055 $x1053) @x492 $x525) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x268)) @x104 @x193 false) $x268) $x167)))
 ((_ th-lemma arith farkas 1 1 1) @x490 @x104 @x193 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        51
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             376
 :arith-nonlinear-bounds    34
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 63
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.76
 :memory                    3.23
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1183916
 :num-checks                1
 :propagations              14
 :rlimit-count              6109
 :time                      0.01
 :total-time                0.01)
