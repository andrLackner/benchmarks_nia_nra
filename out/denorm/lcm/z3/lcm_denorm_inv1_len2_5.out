unsat
((set-logic NIA)
(declare-fun y!2 () Int)
(declare-fun v!4 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x766 (+ k!00 k!10 (* (- 1) (* u!5 x!3)) (* (- 1) (* v!4 y!2)))))
 (let (($x772 (>= ?x766 0)))
 (let (($x767 (= ?x766 0)))
 (let ((?x223 (* v!4 y!2)))
 (let ((?x221 (* u!5 x!3)))
 (let ((?x526 (* (- 1) k!10)))
 (let ((?x370 (* (- 1) k!00)))
 (let ((?x759 (+ ?x370 ?x526 ?x221 ?x223)))
 (let ((?x775 (* v!4 v!4 u!5 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x769 (* v!4 u!5 u!5 u!5 y!2 y!2)))
 (let ((?x747 (* 3 (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 y!2))))
 (let ((?x740 (* v!4 v!4 v!4 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x739 (* (- 2) (* v!4 v!4 v!4 v!4 x!3 y!2))))
 (let ((?x734 (* v!4 v!4 v!4 v!4 x!3 x!3)))
 (let ((?x725 (* v!4 v!4 v!4 v!4 y!2 y!2)))
 (let ((?x750 (* (- 3) (* v!4 v!4 v!4 x!3 x!3 x!3 y!2 y!2))))
 (let ((?x743 (* (- 1) (* v!4 v!4 v!4 x!3 x!3 x!3 x!3 x!3))))
 (let ((?x832 (+ ?x743 ?x750 (* (- 6) (* v!4 v!4 v!4 u!5 x!3 y!2)) ?x725 ?x734 ?x739 ?x740 ?x747 ?x769 ?x775 (* 3 (* v!4 v!4 u!5 u!5 y!2 y!2)) (* v!4 u!5 u!5 u!5 x!3 x!3) (* 3 (* v!4 v!4 v!4 u!5 y!2 y!2)) (* (- 2) (* v!4 u!5 u!5 u!5 x!3 y!2)) (* 3 (* v!4 v!4 u!5 u!5 x!3 x!3)) (* 3 (* v!4 v!4 v!4 u!5 x!3 x!3)) (* 3 (* v!4 v!4 u!5 x!3 x!3 x!3 x!3 y!2)) (* (- 3) (* v!4 v!4 u!5 x!3 x!3 x!3 y!2 y!2)) (* (- 1) (* v!4 v!4 u!5 x!3 x!3 x!3 x!3 x!3)) (* (- 6) (* v!4 v!4 u!5 u!5 x!3 y!2)))))
 (let ((?x837 (* ?x832 ?x759)))
 (let (($x794 (= ?x837 0)))
 (let (($x838 (not $x794)))
 (let ((?x792 (* u!5 u!5 u!5 u!5 y!2 y!2)))
 (let ((?x110 (* (- 2) (* u!5 u!5 u!5 x!3 y!2 y!2 y!2 y!2))))
 (let ((?x653 (* u!5 u!5 u!5 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x492 (* u!5 u!5 u!5 y!2 y!2 y!2 y!2 y!2)))
 (let ((?x799 (+ ?x492 ?x653 ?x110 (* (- 2) (* v!4 v!4 u!5 x!3 y!2 y!2 y!2 y!2)) ?x769 (* 2 (* v!4 u!5 u!5 x!3 x!3 y!2 y!2 y!2)) ?x775 (* (- 4) (* v!4 u!5 u!5 x!3 y!2 y!2 y!2 y!2)) (* 2 (* v!4 u!5 u!5 y!2 y!2 y!2 y!2 y!2)) (* v!4 v!4 u!5 y!2 y!2 y!2 y!2 y!2) ?x792)))
 (let ((?x710 (* ?x799 ?x759)))
 (let (($x780 (= ?x710 0)))
 (let (($x708 (or (not $x780) $x838)))
 (let (($x863 (and $x767 $x708)))
 (let ((?x165 (+ ?x221 ?x223 ?x370 ?x526)))
 (let ((?x660 (* u!5 v!4 v!4 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x793 (* u!5 u!5 u!5 v!4 y!2 y!2)))
 (let ((?x751 (+ ?x793 ?x660 (* 3 (* u!5 u!5 v!4 v!4 y!2 y!2)) (* 3 (* u!5 v!4 v!4 v!4 y!2 y!2)) ?x725 (* u!5 u!5 u!5 v!4 x!3 x!3) (* 3 (* u!5 u!5 v!4 v!4 x!3 x!3)) (* 3 (* u!5 v!4 v!4 v!4 x!3 x!3)) ?x734 (* (- 2) (* u!5 u!5 u!5 v!4 x!3 y!2)) (* (- 6) (* u!5 u!5 v!4 v!4 x!3 y!2)) (* (- 6) (* u!5 v!4 v!4 v!4 x!3 y!2)) ?x739 ?x740 (* (- 1) (* u!5 v!4 v!4 x!3 x!3 x!3 x!3 x!3)) ?x743 (* 3 (* u!5 v!4 v!4 x!3 x!3 x!3 x!3 y!2)) ?x747 (* (- 3) (* u!5 v!4 v!4 x!3 x!3 x!3 y!2 y!2)) ?x750)))
 (let ((?x699 (+ ?x792 ?x793 ?x653 (* 2 (* u!5 u!5 v!4 x!3 x!3 y!2 y!2 y!2)) ?x660 ?x110 (* (- 4) (* u!5 u!5 v!4 x!3 y!2 y!2 y!2 y!2)) (* (- 2) (* u!5 v!4 v!4 x!3 y!2 y!2 y!2 y!2)) ?x492 (* 2 (* u!5 u!5 v!4 y!2 y!2 y!2 y!2 y!2)) (* u!5 v!4 v!4 y!2 y!2 y!2 y!2 y!2))))
 (let (($x756 (and (= ?x165 0) (or (not (= (* ?x699 ?x165) 0)) (not (= (* ?x751 ?x165) 0))))))
 (let (($x557 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x526 (* (- 1) k!10)))
 (let ((?x370 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x577 (+ ?x33 ?x34 ?x370 ?x526)))
 (let ((?x158 (* u v v x x y y y)))
 (let ((?x146 (* u u u v y y)))
 (let ((?x613 (+ ?x146 ?x158 (* 3 (* u u v v y y)) (* 3 (* u v v v y y)) (* v v v v y y) (* u u u v x x) (* 3 (* u u v v x x)) (* 3 (* u v v v x x)) (* v v v v x x) (* (- 2) (* u u u v x y)) (* (- 6) (* u u v v x y)) (* (- 6) (* u v v v x y)) (* (- 2) (* v v v v x y)) (* v v v x x y y y) (* (- 1) (* u v v x x x x x)) (* (- 1) (* v v v x x x x x)) (* 3 (* u v v x x x x y)) (* 3 (* v v v x x x x y)) (* (- 3) (* u v v x x x y y)) (* (- 3) (* v v v x x x y y)))))
 (let ((?x267 (+ (* u u u u y y) ?x146 (* u u u x x y y y) (* 2 (* u u v x x y y y)) ?x158 (* (- 2) (* u u u x y y y y)) (* (- 4) (* u u v x y y y y)) (* (- 2) (* u v v x y y y y)) (* u u u y y y y y) (* 2 (* u u v y y y y y)) (* u v v y y y y y))))
 (and (= ?x577 0) (or (not (= (* ?x267 ?x577) 0)) (not (= (* ?x613 ?x577) 0))))))))))))) :qid k!29))
 ))
 (let (($x539 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x526 (* (- 1) k!10)))
 (let ((?x543 (+ y (* (- 1) x))))
 (let ((?x495 (* ?x543 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x370 (* (- 1) k!00)))
 (let ((?x500 (+ (* ?x54 ?x54 ?x54 ?x543 ?x543 v) (* ?x54 ?x543 ?x543 ?x543 x x v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x103 (* ?x89 u)))
 (let ((?x538 (+ (* ?x44 y y u u u) (* ?x44 ?x44 ?x89 ?x89 y y y u))))
 (let (($x498 (or (not (= (* ?x538 (+ ?x370 ?x103 ?x45 ?x526)) 0)) (not (= (* ?x500 (+ ?x370 ?x55 ?x495 ?x526)) 0)))))
 (let ((?x97 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x97 0) $x498))))))))))))))) :qid k!29))
 ))
 (let ((?x544 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x526 (* (- 1) k!10)))
 (let ((?x370 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x577 (+ ?x33 ?x34 ?x370 ?x526)))
 (let ((?x158 (* u v v x x y y y)))
 (let ((?x146 (* u u u v y y)))
 (let ((?x613 (+ ?x146 ?x158 (* 3 (* u u v v y y)) (* 3 (* u v v v y y)) (* v v v v y y) (* u u u v x x) (* 3 (* u u v v x x)) (* 3 (* u v v v x x)) (* v v v v x x) (* (- 2) (* u u u v x y)) (* (- 6) (* u u v v x y)) (* (- 6) (* u v v v x y)) (* (- 2) (* v v v v x y)) (* v v v x x y y y) (* (- 1) (* u v v x x x x x)) (* (- 1) (* v v v x x x x x)) (* 3 (* u v v x x x x y)) (* 3 (* v v v x x x x y)) (* (- 3) (* u v v x x x y y)) (* (- 3) (* v v v x x x y y)))))
 (let ((?x267 (+ (* u u u u y y) ?x146 (* u u u x x y y y) (* 2 (* u u v x x y y y)) ?x158 (* (- 2) (* u u u x y y y y)) (* (- 4) (* u u v x y y y y)) (* (- 2) (* u v v x y y y y)) (* u u u y y y y y) (* 2 (* u u v y y y y y)) (* u v v y y y y y))))
 (let (($x905 (and (= ?x577 0) (or (not (= (* ?x267 ?x577) 0)) (not (= (* ?x613 ?x577) 0))))))
 (let ((?x543 (+ y (* (- 1) x))))
 (let ((?x495 (* ?x543 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x500 (+ (* ?x54 ?x54 ?x54 ?x543 ?x543 v) (* ?x54 ?x543 ?x543 ?x543 x x v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x103 (* ?x89 u)))
 (let ((?x538 (+ (* ?x44 y y u u u) (* ?x44 ?x44 ?x89 ?x89 y y y u))))
 (let (($x498 (or (not (= (* ?x538 (+ ?x370 ?x103 ?x45 ?x526)) 0)) (not (= (* ?x500 (+ ?x370 ?x55 ?x495 ?x526)) 0)))))
 (let ((?x97 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x266 (and (= ?x97 0) $x498)))
 (rewrite (= $x266 $x905))))))))))))))))))))))))))
 ))
 (let (($x496 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x526 (* (- 1) k!10)))
 (let ((?x543 (+ y (* (- 1) x))))
 (let ((?x495 (* ?x543 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x370 (* (- 1) k!00)))
 (let ((?x500 (+ (* ?x54 ?x54 ?x54 ?x543 ?x543 v) (* ?x54 ?x543 ?x543 ?x543 x x v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x103 (* ?x89 u)))
 (let ((?x538 (+ (* ?x44 y y u u u) (* ?x44 ?x44 ?x89 ?x89 y y y u))))
 (let (($x498 (or (not (= (* ?x538 (+ ?x370 ?x103 ?x45 ?x526)) 0)) (not (= (* ?x500 (+ ?x370 ?x55 ?x495 ?x526)) 0)))))
 (and (= (+ ?x370 (* x u) (* y v) ?x526) 0) $x498)))))))))))))) :qid k!29))
 ))
 (let ((?x95 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x526 (* (- 1) k!10)))
 (let ((?x543 (+ y (* (- 1) x))))
 (let ((?x495 (* ?x543 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x370 (* (- 1) k!00)))
 (let ((?x500 (+ (* ?x54 ?x54 ?x54 ?x543 ?x543 v) (* ?x54 ?x543 ?x543 ?x543 x x v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x103 (* ?x89 u)))
 (let ((?x538 (+ (* ?x44 y y u u u) (* ?x44 ?x44 ?x89 ?x89 y y y u))))
 (let (($x498 (or (not (= (* ?x538 (+ ?x370 ?x103 ?x45 ?x526)) 0)) (not (= (* ?x500 (+ ?x370 ?x55 ?x495 ?x526)) 0)))))
 (let ((?x97 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x266 (and (= ?x97 0) $x498)))
 (let (($x537 (and (= (+ ?x370 (* x u) (* y v) ?x526) 0) $x498)))
 (rewrite (= $x537 $x266)))))))))))))))))))
 ))
 (let (($x549 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x543 (+ y (* (- 1) x))))
 (let ((?x495 (* ?x543 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x500 (+ (* ?x54 ?x54 ?x54 ?x543 ?x543 v) (* ?x54 ?x543 ?x543 ?x543 x x v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x103 (* ?x89 u)))
 (let ((?x538 (+ (* ?x44 y y u u u) (* ?x44 ?x44 ?x89 ?x89 y y y u))))
 (let (($x546 (or (not (= (* ?x538 (+ ?x77 ?x103 ?x45 ?x93)) 0)) (not (= (* ?x500 (+ ?x77 ?x55 ?x495 ?x93)) 0)))))
 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x546))))))))))))))) :qid k!29))
 ))
 (let ((?x92 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x526 (* (- 1) k!10)))
 (let ((?x543 (+ y (* (- 1) x))))
 (let ((?x495 (* ?x543 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x370 (* (- 1) k!00)))
 (let ((?x500 (+ (* ?x54 ?x54 ?x54 ?x543 ?x543 v) (* ?x54 ?x543 ?x543 ?x543 x x v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x103 (* ?x89 u)))
 (let ((?x538 (+ (* ?x44 y y u u u) (* ?x44 ?x44 ?x89 ?x89 y y y u))))
 (let (($x498 (or (not (= (* ?x538 (+ ?x370 ?x103 ?x45 ?x526)) 0)) (not (= (* ?x500 (+ ?x370 ?x55 ?x495 ?x526)) 0)))))
 (let (($x537 (and (= (+ ?x370 (* x u) (* y v) ?x526) 0) $x498)))
 (let ((?x559 (* ?x500 (+ (* (- 1) (* u00 x00)) ?x55 ?x495 (* (- 1) (* v00 y00))))))
 (let ((?x535 (* ?x538 (+ (* (- 1) (* u00 x00)) ?x103 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x581 (* y v)))
 (let ((?x575 (* x u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let (($x536 (and (= (+ ?x77 ?x575 ?x581 ?x93) 0) (or (not (= ?x535 0)) (not (= ?x559 0))))))
 (rewrite (= $x536 $x537)))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x56 (- y x)))
 (let ((?x54 (+ u v)))
 (let ((?x62 (+ (* ?x54 ?x54 ?x54 v ?x56 ?x56) (* ?x54 v v x x ?x56 ?x56 ?x56))))
 (let ((?x38 (* v00 y00)))
 (let ((?x63 (* (- (+ (* (- 1) u00 x00) (* ?x54 x) (* v ?x56)) ?x38) ?x62)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x50 (+ (* u u u ?x44 y y) (* u ?x44 ?x44 ?x42 ?x42 y y y))))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x50)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x51 0)) (not (= ?x63 0)))))))))))))) :qid k!29))
 ))
 (let ((?x516 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x543 (+ y (* (- 1) x))))
 (let ((?x495 (* ?x543 v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x500 (+ (* ?x54 ?x54 ?x54 ?x543 ?x543 v) (* ?x54 ?x543 ?x543 ?x543 x x v v))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x103 (* ?x89 u)))
 (let ((?x538 (+ (* ?x44 y y u u u) (* ?x44 ?x44 ?x89 ?x89 y y y u))))
 (let (($x546 (or (not (= (* ?x538 (+ ?x77 ?x103 ?x45 ?x93)) 0)) (not (= (* ?x500 (+ ?x77 ?x55 ?x495 ?x93)) 0)))))
 (let (($x536 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x546)))
 (let ((?x56 (- y x)))
 (let ((?x62 (+ (* ?x54 ?x54 ?x54 v ?x56 ?x56) (* ?x54 v v x x ?x56 ?x56 ?x56))))
 (let (($x64 (= (* (- (+ (* (- 1) u00 x00) ?x55 (* v ?x56)) ?x38) ?x62) 0)))
 (let ((?x50 (+ (* u u u ?x44 y y) (* u ?x44 ?x44 (- x y) (- x y) y y y))))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u (- x y)) ?x45) ?x38) ?x50)))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x67 (and $x41 (or (not (= ?x51 0)) (not $x64)))))
 (rewrite (= $x67 $x536)))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x525 (mp (mp @x69 (quant-intro (proof-bind ?x516) (= $x68 $x549)) $x549) (rewrite (= $x549 $x549)) $x549)))
 (let ((@x552 (mp (mp @x525 (quant-intro (proof-bind ?x92) (= $x549 $x496)) $x496) (quant-intro (proof-bind ?x95) (= $x496 $x539)) $x539)))
 (let ((@x758 (mp~ (mp @x552 (quant-intro (proof-bind ?x544) (= $x539 $x557)) $x557) (sk (~ $x557 $x756)) $x756)))
 (let ((@x798 (mp @x758 (rewrite (= $x756 $x863)) $x863)))
 (let ((@x797 (and-elim @x798 $x767)))
 (let ((@x768 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x767) $x772)) @x797 $x772)))
 (let (($x706 (<= ?x766 0)))
 (let ((@x805 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x767) $x706)) @x797 $x706)))
 (let (($x829 (not (<= ?x837 0))))
 (let (($x782 (>= ?x837 0)))
 (let (($x761 (>= ?x710 0)))
 (let (($x760 (<= ?x710 0)))
 (let ((@x831 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x780 (not $x760) (not $x761))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x760)) @x805 @x768 false) $x760) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x761)) @x805 @x768 false) $x761) $x780)))
 (let ((@x834 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x794 $x829 (not $x782))) (unit-resolution (and-elim @x798 $x708) @x831 $x838) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x782)) @x805 @x768 false) $x782) $x829)))
 ((_ th-lemma arith farkas 1 1 1) @x834 @x805 @x768 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        36
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             312
 :arith-nonlinear-bounds    19
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 50
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.64
 :memory                    3.17
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1109116
 :num-checks                1
 :propagations              14
 :rlimit-count              3820
 :time                      0.01
 :total-time                0.01)
