unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun a!8 () Real)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(proof
(let ((?x106 (* 2.0 (* b00 y!5))))
 (let ((?x496 (* (- 1.0) (* d00 a!8))))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x500 (+ ?x30 ?x94 ?x496 ?x106)))
 (let ((?x685 (* (/ 1.0 8.0) (* b!7 a!8 a!8 y!5 y!5 y!5 d!6 d!6))))
 (let ((?x287 (* (/ 1.0 32.0) (* b!7 b!7 b!7 a!8 a!8 d!6 d!6))))
 (let ((?x285 (+ (* (- (/ 1.0 64.0)) (* b!7 b!7 b!7 y!5 y!5 d!6 d!6 d!6)) ?x287 ?x685)))
 (let ((?x918 (* (- (/ 1.0 8.0)) (* a!8 y!5 y!5 d!6 d!6 d!6))))
 (let ((?x620 (* (- (/ 1.0 16.0)) (* b!7 b!7 y!5 y!5 d!6 d!6))))
 (let ((?x952 (* (- (/ 1.0 16.0)) (* b!7 b!7 a!8 a!8 y!5 d!6 d!6))))
 (let (($x1101 (= (* (+ ?x952 ?x620 ?x918) ?x285 ?x500) 0.0)))
 (let (($x1156 (not $x1101)))
 (let ((?x671 (+ (* (/ 3.0 8.0) (* b!7 b!7 a!8 y!5 y!5 d!6 d!6 d!6)) (* (/ 1.0 4.0) (* b!7 b!7 a!8 y!5 y!5 y!5 d!6 d!6)) (* (/ 3.0 32.0) (* b!7 a!8 a!8 y!5 d!6 d!6 d!6 d!6)) (* (/ 3.0 16.0) (* b!7 b!7 a!8 y!5 d!6 d!6 d!6 d!6)) (* (/ 1.0 64.0) (* b!7 a!8 a!8 d!6 d!6 d!6 d!6 d!6)) (* (/ 1.0 32.0) (* b!7 b!7 a!8 d!6 d!6 d!6 d!6 d!6)) (* (/ 11.0 64.0) (* b!7 b!7 b!7 y!5 y!5 d!6 d!6 d!6)) (* (/ 1.0 16.0) (* b!7 b!7 b!7 b!7 a!8 d!6 d!6)) ?x287 (* (/ 1.0 8.0) (* b!7 b!7 b!7 y!5 y!5 y!5 d!6 d!6)) (* (/ 3.0 256.0) (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6)) (* (/ 1.0 32.0) (* b!7 b!7 b!7 b!7 b!7 d!6 d!6)) (* (/ 5.0 64.0) (* b!7 b!7 b!7 y!5 d!6 d!6 d!6 d!6)) (* (/ 3.0 16.0) (* b!7 a!8 a!8 y!5 y!5 d!6 d!6 d!6)) ?x685)))
 (let ((?x1157 (+ (* (- (/ 1.0 8.0)) (* b!7 y!5 y!5 d!6 d!6 d!6)) (* (- (/ 1.0 32.0)) (* b!7 b!7 a!8 a!8 d!6 d!6 d!6)) (* (- (/ 1.0 8.0)) (* a!8 y!5 d!6 d!6 d!6 d!6)) ?x952 (* (- (/ 1.0 32.0)) (* b!7 d!6 d!6 d!6 d!6 d!6)) ?x620 (* (- (/ 1.0 16.0)) (* b!7 b!7 b!7 a!8 d!6 d!6 d!6)) ?x918 (* (- (/ 1.0 16.0)) (* b!7 b!7 b!7 b!7 y!5 d!6 d!6)) (* (- (/ 1.0 64.0)) (* b!7 b!7 d!6 d!6 d!6 d!6)) (* (- (/ 1.0 16.0)) (* b!7 b!7 y!5 d!6 d!6 d!6)) (* (- (/ 1.0 8.0)) (* b!7 y!5 d!6 d!6 d!6 d!6)) (* (- (/ 1.0 8.0)) (* b!7 b!7 b!7 a!8 y!5 d!6 d!6)) (* (- (/ 1.0 32.0)) (* b!7 b!7 b!7 b!7 d!6 d!6 d!6)) (* (- (/ 1.0 32.0)) (* a!8 d!6 d!6 d!6 d!6 d!6)))))
 (let ((?x682 (* ?x1157 ?x671 (+ ?x30 ?x94 ?x496 ?x106 (* (- 1.0) (* d00 b!7)) (* b00 d!6)))))
 (let (($x670 (= ?x682 0.0)))
 (let ((?x512 (* b00 d!6)))
 (let ((?x510 (* d00 b!7)))
 (let ((?x472 (* (- 1.0) ?x510)))
 (let ((?x1042 (+ ?x30 ?x472 ?x94 ?x496 ?x106 ?x512)))
 (let (($x681 (= ?x1042 0.0)))
 (let ((?x624 (+ (* a!8 d!6) (* (- 2.0) (* b!7 y!5)) (* 2.0 (* y00 b!7)) (* (- 1.0) (* a00 d!6)))))
 (let (($x833 (= ?x624 0.0)))
 (let (($x676 (not $x670)))
 (let (($x672 (or $x1156 $x676)))
 (let ((?x513 (+ ?x510 (* (- 1.0) ?x512))))
 (let (($x91 (= ?x513 0.0)))
 (let (($x90 (= ?x500 0.0)))
 (let (($x731 (and $x90 $x91 $x833 $x672)))
 (let ((?x599 (* d!6 b00)))
 (let ((?x587 (* 2.0 (* y!5 b00))))
 (let ((?x283 (* (- 1.0) (* a!8 d00))))
 (let ((?x458 (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 d!6 b!7 a!8 a!8))))
 (let ((?x545 (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 a!8 a!8))))
 (let ((?x484 (+ (* (/ 11.0 64.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) ?x545 ?x458 (* (/ 5.0 64.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 3.0 256.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 32.0) (* d!6 d!6 b!7 b!7 b!7 b!7 b!7)) (* (/ 1.0 16.0) (* d!6 d!6 b!7 b!7 b!7 b!7 a!8)) (* (/ 1.0 8.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 b!7)) (* (/ 1.0 4.0) (* y!5 y!5 y!5 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 8.0) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 16.0) (* y!5 y!5 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 3.0 16.0) (* y!5 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 3.0 32.0) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 64.0) (* d!6 d!6 d!6 d!6 d!6 b!7 a!8 a!8)))))
 (let ((?x924 (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 a!8 a!8))))
 (let ((?x614 (* (- (/ 1.0 8.0)) (* y!5 y!5 d!6 d!6 d!6 a!8))))
 (let ((?x609 (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 b!7 b!7))))
 (let ((?x304 (+ ?x609 ?x614 ?x924 (* (- (/ 1.0 8.0)) (* y!5 y!5 d!6 d!6 d!6 b!7)) (* (- (/ 1.0 8.0)) (* y!5 d!6 d!6 d!6 d!6 b!7)) (* (- (/ 1.0 8.0)) (* y!5 d!6 d!6 d!6 d!6 a!8)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 d!6 d!6 b!7)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 d!6 d!6 a!8)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 d!6 b!7 b!7)) (* (- (/ 1.0 64.0)) (* d!6 d!6 d!6 d!6 b!7 b!7)) (* (- (/ 1.0 16.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 8.0)) (* y!5 d!6 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 b!7)) (* (- (/ 1.0 16.0)) (* d!6 d!6 d!6 b!7 b!7 b!7 a!8)) (* (- (/ 1.0 32.0)) (* d!6 d!6 d!6 b!7 b!7 a!8 a!8)))))
 (let ((?x488 (* ?x304 ?x484 (+ ?x30 ?x283 ?x94 ?x587 (* (- 1.0) (* b!7 d00)) ?x599))))
 (let ((?x463 (+ ?x30 ?x283 ?x94 ?x587)))
 (let ((?x551 (+ (* (- (/ 1.0 64.0)) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7)) ?x545 ?x458)))
 (let (($x487 (or (not (= (* (+ ?x609 ?x614 ?x924) ?x551 ?x463) 0.0)) (not (= ?x488 0.0)))))
 (let ((?x605 (+ (* d!6 a!8) (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x450 (and (= ?x463 0.0) (= (+ (* b!7 d00) (* (- 1.0) ?x599)) 0.0) (= ?x605 0.0) $x487)))
 (let (($x330 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x140 (* d b00)))
 (let ((?x134 (* b d00)))
 (let ((?x135 (* (- 1.0) ?x134)))
 (let ((?x100 (* 2.0 (* y b00))))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x115 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x220 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x204 (* (/ 1.0 32.0) (* d d b b b a a))))
 (let ((?x787 (+ (* (/ 11.0 64.0) (* y y d d d b b b)) ?x204 ?x220 (* (/ 5.0 64.0) (* y d d d d b b b)) (* (/ 3.0 256.0) (* d d d d d b b b)) (* (/ 1.0 32.0) (* d d b b b b b)) (* (/ 1.0 16.0) (* d d b b b b a)) (* (/ 1.0 8.0) (* y y y d d b b b)) (* (/ 1.0 4.0) (* y y y d d b b a)) (* (/ 3.0 8.0) (* y y d d d b b a)) (* (/ 3.0 16.0) (* y y d d d b a a)) (* (/ 3.0 16.0) (* y d d d d b b a)) (* (/ 3.0 32.0) (* y d d d d b a a)) (* (/ 1.0 32.0) (* d d d d d b b a)) (* (/ 1.0 64.0) (* d d d d d b a a)))))
 (let ((?x278 (* (- (/ 1.0 16.0)) (* y d d b b a a))))
 (let ((?x192 (* (- (/ 1.0 8.0)) (* y y d d d a))))
 (let ((?x241 (* (- (/ 1.0 16.0)) (* y y d d b b))))
 (let ((?x1151 (+ ?x241 ?x192 ?x278 (* (- (/ 1.0 8.0)) (* y y d d d b)) (* (- (/ 1.0 8.0)) (* y d d d d b)) (* (- (/ 1.0 8.0)) (* y d d d d a)) (* (- (/ 1.0 32.0)) (* d d d d d b)) (* (- (/ 1.0 32.0)) (* d d d d d a)) (* (- (/ 1.0 16.0)) (* y d d d b b)) (* (- (/ 1.0 64.0)) (* d d d d b b)) (* (- (/ 1.0 16.0)) (* y d d b b b b)) (* (- (/ 1.0 8.0)) (* y d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b b b)) (* (- (/ 1.0 16.0)) (* d d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b a a)))))
 (let ((?x121 (+ ?x30 ?x115 ?x94 ?x100)))
 (let ((?x222 (+ (* (- (/ 1.0 64.0)) (* y y d d d b b b)) ?x204 ?x220)))
 (let ((?x284 (+ ?x241 ?x192 ?x278)))
 (let (($x771 (or (not (= (* ?x284 ?x222 ?x121) 0.0)) (not (= (* ?x1151 ?x787 (+ ?x30 ?x115 ?x94 ?x100 ?x135 ?x140)) 0.0)))))
 (let ((?x163 (* (- 2.0) (* y b))))
 (let ((?x147 (* d a)))
 (let (($x198 (= (+ ?x147 ?x163 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x136 (= (+ ?x134 (* (- 1.0) ?x140)) 0.0)))
 (let (($x126 (= ?x121 0.0)))
 (and $x126 $x136 $x198 $x771))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x448 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x1060 (+ ?x94 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x154 (* (/ 1.0 2.0) d)))
 (let ((?x948 (+ y ?x154)))
 (let ((?x68 (+ a b)))
 (let ((?x961 (+ (* (- (/ 1.0 64.0)) (* ?x948 ?x948 d d d b b b)) (* (/ 1.0 32.0) (* ?x68 ?x68 d d b b b)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x948 ?x948 ?x948 d d b)))))
 (let ((?x104 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x948 ?x948 d d d)) (* (- (/ 1.0 16.0)) (* ?x948 ?x948 d d b b)) (* (- (/ 1.0 16.0)) (* ?x68 ?x68 ?x948 d d b b)))))
 (let ((?x197 (* 2.0 (* b00 y))))
 (let ((?x838 (+ ?x94 ?x30 ?x197 (* (- 1.0) (* d00 a)))))
 (let ((?x220 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x204 (* (/ 1.0 32.0) (* d d b b b a a))))
 (let ((?x222 (+ (* (- (/ 1.0 64.0)) (* y y d d d b b b)) ?x204 ?x220)))
 (let ((?x278 (* (- (/ 1.0 16.0)) (* y d d b b a a))))
 (let ((?x241 (* (- (/ 1.0 16.0)) (* y y d d b b))))
 (let ((?x192 (* (- (/ 1.0 8.0)) (* y y d d d a))))
 (let (($x124 (or (not (= (* (+ ?x192 ?x241 ?x278) ?x222 ?x838) 0.0)) (not (= (* ?x104 ?x961 ?x1060) 0.0)))))
 (let ((?x163 (* (- 2.0) (* y b))))
 (let ((?x147 (* d a)))
 (let (($x1046 (= (+ ?x147 ?x163 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (and (= ?x838 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x1046 $x124))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x333 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x140 (* d b00)))
 (let ((?x134 (* b d00)))
 (let ((?x135 (* (- 1.0) ?x134)))
 (let ((?x100 (* 2.0 (* y b00))))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x115 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let ((?x220 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x204 (* (/ 1.0 32.0) (* d d b b b a a))))
 (let ((?x787 (+ (* (/ 11.0 64.0) (* y y d d d b b b)) ?x204 ?x220 (* (/ 5.0 64.0) (* y d d d d b b b)) (* (/ 3.0 256.0) (* d d d d d b b b)) (* (/ 1.0 32.0) (* d d b b b b b)) (* (/ 1.0 16.0) (* d d b b b b a)) (* (/ 1.0 8.0) (* y y y d d b b b)) (* (/ 1.0 4.0) (* y y y d d b b a)) (* (/ 3.0 8.0) (* y y d d d b b a)) (* (/ 3.0 16.0) (* y y d d d b a a)) (* (/ 3.0 16.0) (* y d d d d b b a)) (* (/ 3.0 32.0) (* y d d d d b a a)) (* (/ 1.0 32.0) (* d d d d d b b a)) (* (/ 1.0 64.0) (* d d d d d b a a)))))
 (let ((?x278 (* (- (/ 1.0 16.0)) (* y d d b b a a))))
 (let ((?x192 (* (- (/ 1.0 8.0)) (* y y d d d a))))
 (let ((?x241 (* (- (/ 1.0 16.0)) (* y y d d b b))))
 (let ((?x1151 (+ ?x241 ?x192 ?x278 (* (- (/ 1.0 8.0)) (* y y d d d b)) (* (- (/ 1.0 8.0)) (* y d d d d b)) (* (- (/ 1.0 8.0)) (* y d d d d a)) (* (- (/ 1.0 32.0)) (* d d d d d b)) (* (- (/ 1.0 32.0)) (* d d d d d a)) (* (- (/ 1.0 16.0)) (* y d d d b b)) (* (- (/ 1.0 64.0)) (* d d d d b b)) (* (- (/ 1.0 16.0)) (* y d d b b b b)) (* (- (/ 1.0 8.0)) (* y d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b b b)) (* (- (/ 1.0 16.0)) (* d d d b b b a)) (* (- (/ 1.0 32.0)) (* d d d b b a a)))))
 (let ((?x121 (+ ?x30 ?x115 ?x94 ?x100)))
 (let ((?x222 (+ (* (- (/ 1.0 64.0)) (* y y d d d b b b)) ?x204 ?x220)))
 (let ((?x284 (+ ?x241 ?x192 ?x278)))
 (let (($x771 (or (not (= (* ?x284 ?x222 ?x121) 0.0)) (not (= (* ?x1151 ?x787 (+ ?x30 ?x115 ?x94 ?x100 ?x135 ?x140)) 0.0)))))
 (let ((?x163 (* (- 2.0) (* y b))))
 (let ((?x147 (* d a)))
 (let (($x198 (= (+ ?x147 ?x163 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x136 (= (+ ?x134 (* (- 1.0) ?x140)) 0.0)))
 (let (($x126 (= ?x121 0.0)))
 (let (($x127 (and $x126 $x136 $x198 $x771)))
 (let ((?x1060 (+ ?x94 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x154 (* (/ 1.0 2.0) d)))
 (let ((?x948 (+ y ?x154)))
 (let ((?x68 (+ a b)))
 (let ((?x961 (+ (* (- (/ 1.0 64.0)) (* ?x948 ?x948 d d d b b b)) (* (/ 1.0 32.0) (* ?x68 ?x68 d d b b b)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x948 ?x948 ?x948 d d b)))))
 (let ((?x104 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x948 ?x948 d d d)) (* (- (/ 1.0 16.0)) (* ?x948 ?x948 d d b b)) (* (- (/ 1.0 16.0)) (* ?x68 ?x68 ?x948 d d b b)))))
 (let ((?x197 (* 2.0 (* b00 y))))
 (let ((?x838 (+ ?x94 ?x30 ?x197 (* (- 1.0) (* d00 a)))))
 (let (($x124 (or (not (= (* (+ ?x192 ?x241 ?x278) ?x222 ?x838) 0.0)) (not (= (* ?x104 ?x961 ?x1060) 0.0)))))
 (let (($x1046 (= (+ ?x147 ?x163 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x868 (and (= ?x838 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x1046 $x124)))
 (rewrite (= $x868 $x127)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x52 (/ d 2.0)))
 (let ((?x65 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x68 (+ a b)))
 (let ((?x78 (- (* (- 1.0) ?x68 ?x52 ?x52 ?x52 ?x65 ?x65) (* ?x51 ?x51 ?x52 ?x52 ?x65 ?x65))))
 (let ((?x74 (+ (* (- 1.0) ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 ?x65 ?x65) (* ?x68 ?x68 ?x51 ?x51 ?x51 ?x52 ?x52) (* ?x68 ?x68 ?x51 ?x52 ?x52 ?x65 ?x65 ?x65))))
 (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x80 (* (- (+ ?x27 ?x30 (* 2.0 b00 ?x65)) (* ?x68 d00)) ?x74 (- ?x78 (* ?x68 ?x68 ?x51 ?x51 ?x52 ?x52 ?x65)))))
 (let ((?x60 (- (* (- 1.0) a ?x52 ?x52 ?x52 y y) (* ?x51 ?x51 ?x52 ?x52 y y))))
 (let ((?x56 (+ (* (- 1.0) ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 y y) (* a a ?x51 ?x51 ?x51 ?x52 ?x52) (* a a ?x51 ?x52 ?x52 y y y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ ?x27 ?x30 (* 2.0 b00 y)) ?x33)))
 (let (($x63 (= (* ?x34 ?x56 (- ?x60 (* a a ?x51 ?x51 ?x52 ?x52 y))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x63) (not (= ?x80 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x879 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x94 (* (- 2.0) (* b00 y00))))
 (let ((?x1060 (+ ?x94 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let ((?x154 (* (/ 1.0 2.0) d)))
 (let ((?x948 (+ y ?x154)))
 (let ((?x68 (+ a b)))
 (let ((?x961 (+ (* (- (/ 1.0 64.0)) (* ?x948 ?x948 d d d b b b)) (* (/ 1.0 32.0) (* ?x68 ?x68 d d b b b)) (* (/ 1.0 8.0) (* ?x68 ?x68 ?x948 ?x948 ?x948 d d b)))))
 (let ((?x104 (+ (* (- (/ 1.0 8.0)) (* ?x68 ?x948 ?x948 d d d)) (* (- (/ 1.0 16.0)) (* ?x948 ?x948 d d b b)) (* (- (/ 1.0 16.0)) (* ?x68 ?x68 ?x948 d d b b)))))
 (let ((?x197 (* 2.0 (* b00 y))))
 (let ((?x838 (+ ?x94 ?x30 ?x197 (* (- 1.0) (* d00 a)))))
 (let ((?x220 (* (/ 1.0 8.0) (* y y y d d b a a))))
 (let ((?x204 (* (/ 1.0 32.0) (* d d b b b a a))))
 (let ((?x222 (+ (* (- (/ 1.0 64.0)) (* y y d d d b b b)) ?x204 ?x220)))
 (let ((?x278 (* (- (/ 1.0 16.0)) (* y d d b b a a))))
 (let ((?x241 (* (- (/ 1.0 16.0)) (* y y d d b b))))
 (let ((?x192 (* (- (/ 1.0 8.0)) (* y y d d d a))))
 (let (($x124 (or (not (= (* (+ ?x192 ?x241 ?x278) ?x222 ?x838) 0.0)) (not (= (* ?x104 ?x961 ?x1060) 0.0)))))
 (let ((?x163 (* (- 2.0) (* y b))))
 (let ((?x147 (* d a)))
 (let (($x1046 (= (+ ?x147 ?x163 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x868 (and (= ?x838 0.0) (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x1046 $x124)))
 (let ((?x52 (/ d 2.0)))
 (let ((?x65 (+ y ?x52)))
 (let ((?x51 (/ b 2.0)))
 (let ((?x78 (- (* (- 1.0) ?x68 ?x52 ?x52 ?x52 ?x65 ?x65) (* ?x51 ?x51 ?x52 ?x52 ?x65 ?x65))))
 (let ((?x74 (+ (* (- 1.0) ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 ?x65 ?x65) (* ?x68 ?x68 ?x51 ?x51 ?x51 ?x52 ?x52) (* ?x68 ?x68 ?x51 ?x52 ?x52 ?x65 ?x65 ?x65))))
 (let ((?x70 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 ?x65)) (* ?x68 d00))))
 (let (($x81 (= (* ?x70 ?x74 (- ?x78 (* ?x68 ?x68 ?x51 ?x51 ?x52 ?x52 ?x65))) 0.0)))
 (let ((?x60 (- (* (- 1.0) a ?x52 ?x52 ?x52 y y) (* ?x51 ?x51 ?x52 ?x52 y y))))
 (let ((?x56 (+ (* (- 1.0) ?x51 ?x51 ?x51 ?x52 ?x52 ?x52 y y) (* a a ?x51 ?x51 ?x51 ?x52 ?x52) (* a a ?x51 ?x52 ?x52 y y y))))
 (let ((?x33 (* a d00)))
 (let ((?x34 (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33)))
 (let (($x63 (= (* ?x34 ?x56 (- ?x60 (* a a ?x51 ?x51 ?x52 ?x52 y))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x84 (and (= ?x34 0.0) (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x63) (not $x81)))))
 (rewrite (= $x84 $x868)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x1043 (mp (mp @x86 (quant-intro (proof-bind ?x879) (= $x85 $x448)) $x448) (quant-intro (proof-bind ?x333) (= $x448 $x330)) $x330)))
 (let ((@x673 (mp (mp~ @x1043 (sk (~ $x330 $x450)) $x450) (rewrite (= $x450 $x731)) $x731)))
 (let ((@x1089 (and-elim @x673 $x833)))
 (let (($x493 (<= ?x624 0.0)))
 (let (($x495 (= 0.0 ?x624)))
 (let ((@x571 (mp @x1089 (symm (commutativity (= $x495 $x833)) (= $x833 $x495)) $x495)))
 (let (($x499 (>= ?x624 0.0)))
 (let (($x584 (<= ?x1042 0.0)))
 (let (($x1096 (<= ?x500 0.0)))
 (let (($x867 (= 0.0 ?x500)))
 (let ((@x631 (mp (and-elim @x673 $x90) (symm (commutativity (= $x867 $x90)) (= $x90 $x867)) $x867)))
 (let ((@x679 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x867) $x1096)) @x631 $x1096)))
 (let (($x452 (>= ?x513 0.0)))
 (let (($x494 (= 0.0 ?x513)))
 (let ((@x759 (mp (and-elim @x673 $x91) (symm (commutativity (= $x494 $x91)) (= $x91 $x494)) $x494)))
 (let ((@x103 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x494) $x452)) @x759 $x452) @x679 (hypothesis (not $x584)) false)))
 (let (($x625 (>= ?x1042 0.0)))
 (let (($x497 (>= ?x500 0.0)))
 (let ((@x967 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x867) $x497)) @x631 $x497)))
 (let (($x498 (<= ?x513 0.0)))
 (let ((@x696 ((_ th-lemma arith) (hypothesis (not $x625)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x494) $x498)) @x759 $x498) @x967 false)))
 (let ((@x876 ((_ th-lemma arith) (lemma @x696 $x625) (lemma @x103 $x584) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x499)) @x571 $x499) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x493)) @x571 $x493) (= ?x624 ?x1042))))
 (let (($x718 (or (not $x681) $x670)))
 (let ((@x986 (unit-resolution ((_ th-lemma arith) $x718) (hypothesis $x676) (hypothesis $x681) false)))
 (let ((@x1108 (unit-resolution (lemma @x986 $x718) (trans* (symm @x876 (= ?x1042 ?x624)) @x1089 $x681) $x670)))
 (unit-resolution ((_ th-lemma arith) (or $x1101 (not $x1096) (not $x497))) @x679 @x967 (unit-resolution (and-elim @x673 $x672) @x1108 $x1156) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      17
 :arith-eq-adapter               11
 :arith-bound-propagations-cheap 4
 :arith-conflicts                7
 :arith-diseq                    12
 :arith-fixed-eqs                1
 :arith-grobner-calls            1
 :arith-horner-calls             1
 :arith-lower                    10
 :arith-make-feasible            10
 :arith-max-columns              63
 :arith-max-rows                 9
 :arith-nla-explanations         2
 :arith-nla-lemmas               5
 :arith-propagations             4
 :arith-upper                    11
 :conflicts                      5
 :decisions                      18
 :del-clause                     18
 :final-checks                   7
 :max-memory                     1.86
 :memory                         1.13
 :mk-bool-var                    41
 :mk-clause                      36
 :num-allocs                     303840
 :num-checks                     1
 :propagations                   20
 :rlimit-count                   5316
 :time                           0.00
 :total-time                     0.01)
