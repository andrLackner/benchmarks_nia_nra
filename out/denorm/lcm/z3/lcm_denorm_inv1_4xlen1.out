unsat
((set-logic NIA)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!00 () Int)
(declare-fun k!10 () Int)
(proof
(let ((?x349 (+ k!10 k!00 (* (- 1) (* y!2 v!4)) (* (- 1) (* u!5 x!3)))))
 (let (($x348 (>= ?x349 0)))
 (let (($x346 (= ?x349 0)))
 (let ((?x408 (* u!5 x!3)))
 (let ((?x389 (* y!2 v!4)))
 (let ((?x82 (* (- 1) k!00)))
 (let ((?x103 (* (- 1) k!10)))
 (let ((?x146 (+ ?x103 ?x82 ?x389 ?x408)))
 (let ((?x398 (* (- 1) x!3)))
 (let ((?x312 (+ y!2 ?x398)))
 (let ((?x404 (+ u!5 v!4)))
 (let ((?x308 (* ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x312 ?x312 ?x312 ?x312 ?x146 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let (($x306 (= ?x308 0)))
 (let (($x307 (not $x306)))
 (let ((?x403 (* (- 1) y!2)))
 (let ((?x153 (+ ?x403 x!3)))
 (let ((?x156 (* ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x153 ?x153 ?x153 ?x146 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5 u!5)))
 (let (($x161 (= ?x156 0)))
 (let (($x320 (or (not $x161) $x307)))
 (let (($x167 (and $x346 $x320)))
 (let ((?x413 (+ ?x408 (* v!4 y!2) ?x103 ?x82)))
 (let ((?x115 (+ ?x398 y!2)))
 (let ((?x67 (* ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x115 ?x115 ?x115 ?x115 ?x413 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4)))
 (let ((?x402 (+ x!3 ?x403)))
 (let ((?x401 (* ?x404 ?x404 ?x404 ?x404 ?x404 ?x404 ?x402 ?x402 ?x402 ?x413 y!2 y!2 y!2 y!2 u!5 u!5 u!5 u!5 u!5 u!5)))
 (let (($x391 (and (= ?x413 0) (or (not (= ?x401 0)) (not (= ?x67 0))))))
 (let (($x68 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x82 (* (- 1) k!00)))
 (let ((?x103 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x367 (+ ?x33 ?x34 ?x103 ?x82)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x100 (+ ?x89 y)))
 (let ((?x51 (+ u v)))
 (let ((?x388 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x100 ?x100 ?x100 ?x100 ?x367 x x x v v v v v v)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x169 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x77 ?x77 ?x77 ?x367 y y y y u u u u u u)))
 (and (= ?x367 0) (or (not (= ?x169 0)) (not (= ?x388 0))))))))))))))) :qid k!29))
 ))
 (let (($x81 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x103 (* (- 1) k!10)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x106 (+ y ?x89)))
 (let ((?x85 (* ?x106 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x82 (* (- 1) k!00)))
 (let ((?x74 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ ?x82 ?x52 ?x85 ?x103) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x134 (* ?x77 u)))
 (let ((?x105 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x82 ?x134 ?x45 ?x103) y y y y u u u u u u)))
 (let (($x97 (or (not (= ?x105 0)) (not (= ?x74 0)))))
 (let ((?x129 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x129 0) $x97)))))))))))))))) :qid k!29))
 ))
 (let ((?x73 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x82 (* (- 1) k!00)))
 (let ((?x103 (* (- 1) k!10)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x367 (+ ?x33 ?x34 ?x103 ?x82)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x100 (+ ?x89 y)))
 (let ((?x51 (+ u v)))
 (let ((?x388 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x100 ?x100 ?x100 ?x100 ?x367 x x x v v v v v v)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x169 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x77 ?x77 ?x77 ?x367 y y y y u u u u u u)))
 (let (($x450 (and (= ?x367 0) (or (not (= ?x169 0)) (not (= ?x388 0))))))
 (let ((?x106 (+ y ?x89)))
 (let ((?x74 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ ?x82 (* ?x51 x) (* ?x106 v) ?x103) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x105 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x82 (* ?x77 u) (* ?x44 y) ?x103) y y y y u u u u u u)))
 (let (($x97 (or (not (= ?x105 0)) (not (= ?x74 0)))))
 (let ((?x129 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x127 (and (= ?x129 0) $x97)))
 (rewrite (= $x127 $x450))))))))))))))))))))))
 ))
 (let (($x75 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x103 (* (- 1) k!10)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x106 (+ y ?x89)))
 (let ((?x85 (* ?x106 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x82 (* (- 1) k!00)))
 (let ((?x74 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ ?x82 ?x52 ?x85 ?x103) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x134 (* ?x77 u)))
 (let ((?x105 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x82 ?x134 ?x45 ?x103) y y y y u u u u u u)))
 (let (($x97 (or (not (= ?x105 0)) (not (= ?x74 0)))))
 (and (= (+ ?x82 (* x u) (* y v) ?x103) 0) $x97))))))))))))))) :qid k!29))
 ))
 (let ((?x142 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x103 (* (- 1) k!10)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x106 (+ y ?x89)))
 (let ((?x85 (* ?x106 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x82 (* (- 1) k!00)))
 (let ((?x74 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ ?x82 ?x52 ?x85 ?x103) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x134 (* ?x77 u)))
 (let ((?x105 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x82 ?x134 ?x45 ?x103) y y y y u u u u u u)))
 (let (($x97 (or (not (= ?x105 0)) (not (= ?x74 0)))))
 (let ((?x129 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x127 (and (= ?x129 0) $x97)))
 (let (($x111 (and (= (+ ?x82 (* x u) (* y v) ?x103) 0) $x97)))
 (rewrite (= $x111 $x127))))))))))))))))))))
 ))
 (let (($x88 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x106 (+ y ?x89)))
 (let ((?x85 (* ?x106 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x339 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ ?x71 ?x52 ?x85 ?x87) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x134 (* ?x77 u)))
 (let ((?x112 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x71 ?x134 ?x45 ?x87) y y y y u u u u u u)))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x112 0)) (not (= ?x339 0)))))))))))))))))) :qid k!29))
 ))
 (let ((?x99 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x103 (* (- 1) k!10)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x106 (+ y ?x89)))
 (let ((?x85 (* ?x106 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x82 (* (- 1) k!00)))
 (let ((?x74 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ ?x82 ?x52 ?x85 ?x103) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x134 (* ?x77 u)))
 (let ((?x105 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x82 ?x134 ?x45 ?x103) y y y y u u u u u u)))
 (let (($x97 (or (not (= ?x105 0)) (not (= ?x74 0)))))
 (let (($x111 (and (= (+ ?x82 (* x u) (* y v) ?x103) 0) $x97)))
 (let ((?x339 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ (* (- 1) (* u00 x00)) ?x52 ?x85 (* (- 1) (* v00 y00))) x x x v v v v v v)))
 (let ((?x112 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ (* (- 1) (* u00 x00)) ?x134 ?x45 (* (- 1) (* v00 y00))) y y y y u u u u u u)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x125 (* y v)))
 (let ((?x79 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x364 (and (= (+ ?x71 ?x79 ?x125 ?x87) 0) (or (not (= ?x112 0)) (not (= ?x339 0))))))
 (rewrite (= $x364 $x111))))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x51 (+ u v)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) (* ?x51 x) (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v x ?x29 ?x51 ?x51 ?x53 ?x29 v v v ?x51 ?x51 v v x x ?x53 ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) (* ?x44 y)) ?x38) ?x29 u u ?x44 ?x42 ?x29 u u y ?x29 ?x44 ?x44 ?x44 u u ?x44 ?x44 ?x42 ?x42 y y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))))))))) :qid k!29))
 ))
 (let ((?x132 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x89 (* (- 1) x)))
 (let ((?x106 (+ y ?x89)))
 (let ((?x85 (* ?x106 v)))
 (let ((?x51 (+ u v)))
 (let ((?x52 (* ?x51 x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x339 (* ?x51 ?x51 ?x51 ?x51 ?x51 ?x51 ?x106 ?x106 ?x106 ?x106 (+ ?x71 ?x52 ?x85 ?x87) x x x v v v v v v)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x77 (+ x (* (- 1) y))))
 (let ((?x134 (* ?x77 u)))
 (let ((?x112 (* ?x44 ?x44 ?x44 ?x44 ?x44 ?x44 ?x77 ?x77 ?x77 (+ ?x71 ?x134 ?x45 ?x87) y y y y u u u u u u)))
 (let (($x364 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) (or (not (= ?x112 0)) (not (= ?x339 0))))))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 ?x51 ?x51 v x ?x29 ?x51 ?x51 ?x53 ?x29 v v v ?x51 ?x51 v v x x ?x53 ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x29 u u ?x44 ?x42 ?x29 u u y ?x29 ?x44 ?x44 ?x44 u u ?x44 ?x44 ?x42 ?x42 y y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x364)))))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x66 (mp (mp @x63 (quant-intro (proof-bind ?x132) (= $x62 $x88)) $x88) (rewrite (= $x88 $x88)) $x88)))
 (let ((@x84 (mp (mp @x66 (quant-intro (proof-bind ?x99) (= $x88 $x75)) $x75) (quant-intro (proof-bind ?x142) (= $x75 $x81)) $x81)))
 (let ((@x390 (mp~ (mp @x84 (quant-intro (proof-bind ?x73) (= $x81 $x68)) $x68) (sk (~ $x68 $x391)) $x391)))
 (let ((@x313 (mp @x390 (rewrite (= $x391 $x167)) $x167)))
 (let ((@x309 (and-elim @x313 $x346)))
 (let ((@x318 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x346) $x348)) @x309 $x348)))
 (let (($x386 (<= ?x349 0)))
 (let ((@x315 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x346) $x386)) @x309 $x386)))
 (let (($x415 (not (<= ?x308 0))))
 (let (($x147 (>= ?x308 0)))
 (let (($x351 (>= ?x156 0)))
 (let (($x352 (<= ?x156 0)))
 (let ((@x397 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x161 (not $x352) (not $x351))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x352)) @x315 @x318 false) $x352) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x351)) @x315 @x318 false) $x351) $x161)))
 (let ((@x144 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x306 $x415 (not $x147))) (unit-resolution (and-elim @x313 $x320) @x397 $x307) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x147)) @x315 @x318 false) $x147) $x415)))
 ((_ th-lemma arith farkas 1 1 1) @x144 @x315 @x318 false)))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             88
 :arith-nonlinear-horner    15
 :arith-num-rows            5
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 16
 :arith-tableau-max-rows    5
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.62
 :memory                    3.15
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                1129561
 :num-checks                1
 :propagations              14
 :rlimit-count              1655
 :time                      0.01
 :total-time                0.02)
