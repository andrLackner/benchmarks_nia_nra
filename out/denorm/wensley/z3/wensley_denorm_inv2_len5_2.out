unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x470 (+ (* (/ 1.0 2.0) (* (to_real d00) (to_real b!2))) (* (- (/ 1.0 2.0)) (* (to_real b00) (to_real d!1))))))
 (let (($x453 (>= ?x470 0.0)))
 (let ((?x839 (* d00 b!2)))
 (let ((?x1086 (+ ?x839 (* (- 1) (* b00 d!1)))))
 (let (($x1038 (>= ?x1086 0)))
 (let (($x235 (= 0 ?x1086)))
 (let ((@x309 (symm (commutativity (= $x235 (= ?x1086 0))) (= (= ?x1086 0) $x235))))
 (let (($x250 (= ?x1086 0)))
 (let ((?x245 (to_real y!0)))
 (let ((?x242 (to_real a!3)))
 (let ((?x241 (to_real d!1)))
 (let ((?x237 (to_real b!2)))
 (let ((?x138 (* (/ 1.0 16.0) (* ?x237 ?x237 ?x237 ?x241 ?x242 ?x242 ?x245 ?x245 ?x245))))
 (let ((?x864 (* (/ 3.0 32.0) (* ?x237 ?x237 ?x237 ?x237 ?x237 ?x241 ?x241 ?x245 ?x245))))
 (let ((?x989 (* (/ 3.0 32.0) (* ?x237 ?x237 ?x237 ?x241 ?x241 ?x242 ?x242 ?x245 ?x245))))
 (let ((?x985 (* (/ 1.0 8.0) (* ?x237 ?x237 ?x237 ?x237 ?x241 ?x242 ?x245 ?x245 ?x245))))
 (let ((?x148 (* (- (/ 1.0 64.0)) (* ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x241))))
 (let ((?x1001 (* (/ 3.0 64.0) (* ?x237 ?x237 ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x245))))
 (let ((?x982 (* (/ 3.0 32.0) (* ?x237 ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x242 ?x245))))
 (let ((?x980 (* (/ 1.0 128.0) (* ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x241 ?x242 ?x242))))
 (let ((?x153 (* (/ 1.0 16.0) (* ?x237 ?x237 ?x237 ?x237 ?x237 ?x241 ?x245 ?x245 ?x245))))
 (let ((?x978 (* (/ 1.0 64.0) (* ?x237 ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x241 ?x242))))
 (let ((?x834 (* (/ 3.0 16.0) (* ?x237 ?x237 ?x237 ?x237 ?x241 ?x241 ?x242 ?x245 ?x245))))
 (let ((?x438 (* (/ 1.0 4.0) (* ?x237 ?x241 ?x242 ?x242 ?x242))))
 (let ((?x188 (* (- (/ 1.0 64.0)) (* ?x237 ?x237 ?x241 ?x241 ?x241 ?x241 ?x242))))
 (let ((?x998 (* (/ 3.0 64.0) (* ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x242 ?x242 ?x245))))
 (let ((?x126 (* (/ 1.0 2.0) (* ?x237 ?x242 ?x242 ?x242 ?x245))))
 (let ((?x398 (* (/ 3.0 2.0) (* ?x237 ?x237 ?x237 ?x242 ?x245))))
 (let ((?x439 (* (/ 3.0 4.0) (* ?x237 ?x237 ?x237 ?x241 ?x242))))
 (let ((?x409 (* (/ 3.0 2.0) (* ?x237 ?x237 ?x242 ?x242 ?x245))))
 (let ((?x299 (* (- (/ 1.0 16.0)) (* ?x237 ?x237 ?x241 ?x241 ?x242 ?x245 ?x245))))
 (let ((?x1112 (* (- (/ 1.0 8.0)) (* ?x237 ?x237 ?x241 ?x242 ?x242 ?x245))))
 (let ((?x429 (* (/ 3.0 4.0) (* ?x237 ?x237 ?x241 ?x242 ?x242))))
 (let ((?x302 (* (/ 1.0 4.0) (* ?x237 ?x237 ?x237 ?x237 ?x241))))
 (let ((?x298 (* (/ 1.0 2.0) (* ?x237 ?x237 ?x237 ?x237 ?x245))))
 (let ((?x832 (* (/ 1.0 128.0) (* ?x237 ?x237 ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x241))))
 (let ((?x836 (* (- (/ 1.0 16.0)) (* ?x237 ?x237 ?x241 ?x241 ?x241 ?x242 ?x245))))
 (let ((?x190 (* (- (/ 1.0 16.0)) (* ?x237 ?x237 ?x237 ?x241 ?x241 ?x241 ?x245))))
 (let ((?x276 (* (- (/ 1.0 4.0)) (* ?x237 ?x237 ?x237 ?x241 ?x242 ?x245))))
 (let ((?x184 (* (- (/ 1.0 16.0)) (* ?x237 ?x237 ?x237 ?x241 ?x241 ?x245 ?x245))))
 (let ((?x150 (* (- (/ 1.0 8.0)) (* ?x237 ?x237 ?x237 ?x237 ?x241 ?x245))))
 (let ((?x1101 (+ ?x150 ?x184 ?x276 ?x190 ?x836 ?x832 ?x298 ?x302 ?x429 ?x1112 ?x299 ?x409 ?x439 ?x398 ?x126 ?x998 ?x188 ?x438 ?x834 ?x978 ?x153 ?x980 ?x982 ?x1001 ?x148 ?x985 ?x989 ?x864 ?x138)))
 (let ((?x1095 (+ (* (/ 1.0 2.0) (* (to_real b00) ?x241)) (* (- (/ 1.0 2.0)) (* (to_real d00) ?x237)))))
 (let ((?x1093 (* ?x1095 ?x1101)))
 (let (($x1026 (= ?x1093 0.0)))
 (let (($x1024 (not $x1026)))
 (let ((?x1099 (* (/ 1.0 32.0) (* (to_real b00) ?x237 ?x237 ?x241 ?x241 ?x241 ?x242 ?x245 ?x245))))
 (let ((?x1091 (* (- (/ 1.0 32.0)) (* (to_real d00) ?x237 ?x237 ?x237 ?x241 ?x241 ?x242 ?x245 ?x245))))
 (let ((?x60 (to_real d00)))
 (let ((?x1083 (* (/ 1.0 32.0) (* ?x60 ?x237 ?x237 ?x237 ?x237 ?x241 ?x242 ?x242 ?x245 ?x245 ?x245))))
 (let ((?x64 (to_real b00)))
 (let ((?x1085 (* (- (/ 1.0 32.0)) (* ?x64 ?x237 ?x237 ?x237 ?x241 ?x241 ?x242 ?x242 ?x245 ?x245 ?x245))))
 (let ((?x215 (+ (* (/ 1.0 4.0) (* ?x60 ?x237 ?x237 ?x242 ?x242 ?x242 ?x245)) (* (- (/ 1.0 32.0)) (* ?x64 ?x237 ?x237 ?x241 ?x241 ?x241 ?x242 ?x242)) ?x1085 (* (/ 1.0 32.0) (* ?x60 ?x237 ?x237 ?x237 ?x241 ?x241 ?x242 ?x242)) (* (- (/ 1.0 16.0)) (* ?x60 ?x237 ?x237 ?x237 ?x241 ?x242 ?x242 ?x245)) (* (/ 1.0 16.0) (* ?x64 ?x237 ?x237 ?x241 ?x241 ?x242 ?x242 ?x245)) ?x1083 ?x1091 ?x1099 (* (- (/ 1.0 4.0)) (* ?x64 ?x237 ?x241 ?x242 ?x242 ?x242 ?x245)))))
 (let (($x1028 (= ?x215 0.0)))
 (let (($x1025 (or (not $x1028) $x1024)))
 (let ((?x1056 (+ (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)) (* (- 1) (* a!3 d!1)) (* a00 d!1))))
 (let (($x1059 (= ?x1056 0)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x1033 (= (+ ?x35 ?x108 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x311 (and $x1033 $x250 $x1059 $x1025)))
 (let ((?x103 (+ ?x1112 ?x138 ?x299 ?x126 ?x150 ?x276 ?x153 ?x832 ?x978 ?x980 ?x1001 ?x982 ?x998 ?x864 ?x834 ?x989 ?x985 ?x184 ?x148 ?x188 ?x190 ?x836 ?x298 ?x302 ?x439 ?x429 ?x438 ?x398 ?x409)))
 (let (($x407 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x237 ?x60)) (* (/ 1.0 2.0) (* ?x241 ?x64))) ?x103) 0.0)))
 (let ((?x264 (* (- (/ 1.0 32.0)) (* ?x237 ?x237 ?x237 ?x241 ?x241 ?x64 ?x242 ?x242 ?x245 ?x245 ?x245))))
 (let ((?x256 (* (/ 1.0 32.0) (* ?x237 ?x237 ?x237 ?x237 ?x60 ?x241 ?x242 ?x242 ?x245 ?x245 ?x245))))
 (let ((?x272 (+ (* (/ 1.0 32.0) (* ?x237 ?x237 ?x237 ?x60 ?x241 ?x241 ?x242 ?x242)) (* (- (/ 1.0 32.0)) (* ?x237 ?x237 ?x241 ?x241 ?x241 ?x64 ?x242 ?x242)) (* (- (/ 1.0 16.0)) (* ?x237 ?x237 ?x237 ?x60 ?x241 ?x242 ?x242 ?x245)) (* (/ 1.0 16.0) (* ?x237 ?x237 ?x241 ?x241 ?x64 ?x242 ?x242 ?x245)) ?x256 ?x264 (* (- (/ 1.0 32.0)) (* ?x237 ?x237 ?x237 ?x60 ?x241 ?x241 ?x242 ?x245 ?x245)) (* (/ 1.0 32.0) (* ?x237 ?x237 ?x241 ?x241 ?x241 ?x64 ?x242 ?x245 ?x245)) (* (/ 1.0 4.0) (* ?x237 ?x237 ?x60 ?x242 ?x242 ?x242 ?x245)) (* (- (/ 1.0 4.0)) (* ?x237 ?x241 ?x64 ?x242 ?x242 ?x242 ?x245)))))
 (let ((?x970 (* a!3 d!1)))
 (let ((?x227 (+ ?x970 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x996 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x108 (* 2 (* y!0 b00))) 0)))
 (let (($x1079 (and $x996 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x227 0) (or (not (= ?x272 0.0)) (not $x407)))))
 (let (($x180 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x997 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 (to_real d) (to_real d) (to_real d) ?x67 ?x69))))
 (let ((?x994 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real d) (to_real d) (to_real d) ?x69))))
 (let ((?x62 (to_real d)))
 (let ((?x1151 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x69 ?x69 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x69 ?x69 ?x69)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x69)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x69 ?x69)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x67 ?x69 ?x69 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x69 ?x69)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) ?x994 ?x997 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x69)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x62)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x62 ?x67)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x62 ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x56 ?x62 ?x67 ?x67 ?x67)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x56 ?x67 ?x69)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x67 ?x67 ?x69)))))
 (let ((?x206 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x405 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x69 ?x69))))
 (let ((?x404 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x69 ?x69))))
 (let ((?x64 (to_real b00)))
 (let ((?x402 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x64 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x60 (to_real d00)))
 (let ((?x401 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x394 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x67 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x67 ?x67 ?x69)) ?x401 ?x402 ?x404 ?x405 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x64 ?x67 ?x67 ?x67 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x177 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (and $x140 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x177 0) (or (not (= ?x394 0.0)) (not (= (* ?x206 ?x1151) 0.0))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x886 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x542 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x957 (+ ?x67 ?x56)))
 (let ((?x668 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x542 ?x542))))
 (let ((?x629 (* (/ 1.0 16.0) (* (to_real d) ?x56 ?x56 ?x56 ?x957 ?x957 ?x542 ?x542 ?x542))))
 (let ((?x706 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x957)) (* (- (/ 1.0 8.0)) (* (to_real d) ?x56 ?x56 ?x957 ?x957 ?x542)) ?x629 ?x668 (* (/ 1.0 2.0) (* ?x56 ?x957 ?x957 ?x957 ?x542)))))
 (let ((?x961 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) (to_real d))))))
 (let ((?x602 (* (- (/ 1.0 16.0)) (* ?x69 ?x69 (to_real d) (to_real d) ?x56 ?x56 ?x67))))
 (let ((?x565 (* (/ 1.0 16.0) (* ?x69 ?x69 ?x69 (to_real d) ?x56 ?x56 ?x56 ?x67 ?x67))))
 (let ((?x634 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 (to_real d) ?x56 ?x56 ?x67 ?x67)) ?x565 ?x602 (* (/ 1.0 2.0) (* ?x69 ?x56 ?x67 ?x67 ?x67)))))
 (let (($x900 (or (not (= (* ?x961 ?x634) 0.0)) (not (= (* ?x961 ?x706) 0.0)))))
 (let ((?x934 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x939 (= ?x934 0)))
 (let ((?x187 (* d00 a)))
 (let ((?x635 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x187)))
 (and (= ?x635 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x939 $x900)))))))))))))))))) :qid k!33))
 ))
 (let ((?x901 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x997 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 (to_real d) (to_real d) (to_real d) ?x67 ?x69))))
 (let ((?x994 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real d) (to_real d) (to_real d) ?x69))))
 (let ((?x62 (to_real d)))
 (let ((?x1151 (+ (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x67 ?x69 ?x69 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x62 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x69 ?x69 ?x69)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x69)) (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x69 ?x69)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x67 ?x69 ?x69 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x69 ?x69)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) ?x994 ?x997 (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x56 ?x69)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x62)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x56 ?x62 ?x67)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x62 ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x56 ?x62 ?x67 ?x67 ?x67)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x56 ?x67 ?x69)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x67 ?x67 ?x69)))))
 (let ((?x206 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x405 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x69 ?x69))))
 (let ((?x404 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x69 ?x69))))
 (let ((?x64 (to_real b00)))
 (let ((?x402 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x64 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x60 (to_real d00)))
 (let ((?x401 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x67 ?x67 ?x69 ?x69 ?x69))))
 (let ((?x394 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x64 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x67 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x67 ?x67 ?x69)) ?x401 ?x402 ?x404 ?x405 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x64 ?x67 ?x67 ?x67 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x177 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let ((?x35 (* a00 d00)))
 (let (($x140 (= (+ ?x35 (* (- 1) (* a d00)) ?x108 (* 2 (* y b00))) 0)))
 (let (($x1179 (and $x140 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x177 0) (or (not (= ?x394 0.0)) (not (= (* ?x206 ?x1151) 0.0))))))
 (let ((?x542 (+ ?x69 (* (/ 1.0 2.0) ?x62))))
 (let ((?x957 (+ ?x67 ?x56)))
 (let ((?x706 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x56 ?x56 ?x957 ?x957)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x957 ?x957 ?x542)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x957 ?x957 ?x542 ?x542 ?x542)) (* (- (/ 1.0 16.0)) (* ?x62 ?x62 ?x56 ?x56 ?x957 ?x542 ?x542)) (* (/ 1.0 2.0) (* ?x56 ?x957 ?x957 ?x957 ?x542)))))
 (let ((?x961 (+ (* (- (/ 1.0 2.0)) (* ?x60 ?x56)) (* (/ 1.0 2.0) (* ?x64 ?x62)))))
 (let ((?x634 (+ (* (/ 1.0 16.0) (* ?x62 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 ?x62 ?x56 ?x56 ?x67 ?x67)) (* (/ 1.0 16.0) (* ?x69 ?x69 ?x69 ?x62 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x69 ?x69 ?x62 ?x62 ?x56 ?x56 ?x67)) (* (/ 1.0 2.0) (* ?x69 ?x56 ?x67 ?x67 ?x67)))))
 (let (($x900 (or (not (= (* ?x961 ?x634) 0.0)) (not (= (* ?x961 ?x706) 0.0)))))
 (let ((?x934 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x939 (= ?x934 0)))
 (let ((?x187 (* d00 a)))
 (let (($x672 (= (+ (* 2 ?x107) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x187) 0)))
 (let (($x700 (and $x672 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x939 $x900)))
 (rewrite (= $x700 $x1179))))))))))))))))))))))))))))))))))))
 ))
 (let (($x933 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x542 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x957 (+ ?x67 ?x56)))
 (let ((?x668 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x542 ?x542))))
 (let ((?x629 (* (/ 1.0 16.0) (* (to_real d) ?x56 ?x56 ?x56 ?x957 ?x957 ?x542 ?x542 ?x542))))
 (let ((?x706 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x957)) (* (- (/ 1.0 8.0)) (* (to_real d) ?x56 ?x56 ?x957 ?x957 ?x542)) ?x629 ?x668 (* (/ 1.0 2.0) (* ?x56 ?x957 ?x957 ?x957 ?x542)))))
 (let ((?x961 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) (to_real d))))))
 (let ((?x602 (* (- (/ 1.0 16.0)) (* ?x69 ?x69 (to_real d) (to_real d) ?x56 ?x56 ?x67))))
 (let ((?x565 (* (/ 1.0 16.0) (* ?x69 ?x69 ?x69 (to_real d) ?x56 ?x56 ?x56 ?x67 ?x67))))
 (let ((?x634 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 (to_real d) ?x56 ?x56 ?x67 ?x67)) ?x565 ?x602 (* (/ 1.0 2.0) (* ?x69 ?x56 ?x67 ?x67 ?x67)))))
 (let (($x900 (or (not (= (* ?x961 ?x634) 0.0)) (not (= (* ?x961 ?x706) 0.0)))))
 (let ((?x934 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x939 (= ?x934 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x887 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x887 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x939 $x900)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x686 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x542 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x957 (+ ?x67 ?x56)))
 (let ((?x668 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x542 ?x542))))
 (let ((?x629 (* (/ 1.0 16.0) (* (to_real d) ?x56 ?x56 ?x56 ?x957 ?x957 ?x542 ?x542 ?x542))))
 (let ((?x706 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x957)) (* (- (/ 1.0 8.0)) (* (to_real d) ?x56 ?x56 ?x957 ?x957 ?x542)) ?x629 ?x668 (* (/ 1.0 2.0) (* ?x56 ?x957 ?x957 ?x957 ?x542)))))
 (let ((?x961 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) (to_real d))))))
 (let ((?x602 (* (- (/ 1.0 16.0)) (* ?x69 ?x69 (to_real d) (to_real d) ?x56 ?x56 ?x67))))
 (let ((?x565 (* (/ 1.0 16.0) (* ?x69 ?x69 ?x69 (to_real d) ?x56 ?x56 ?x56 ?x67 ?x67))))
 (let ((?x634 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 (to_real d) ?x56 ?x56 ?x67 ?x67)) ?x565 ?x602 (* (/ 1.0 2.0) (* ?x69 ?x56 ?x67 ?x67 ?x67)))))
 (let (($x900 (or (not (= (* ?x961 ?x634) 0.0)) (not (= (* ?x961 ?x706) 0.0)))))
 (let ((?x934 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x939 (= ?x934 0)))
 (let ((?x187 (* d00 a)))
 (let ((?x635 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x187)))
 (let (($x700 (and (= ?x635 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x939 $x900)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x712 (and (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) ?x187)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x939 $x900)))
 (rewrite (= $x712 $x700)))))))))))))))))))))))))
 ))
 (let (($x99 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x69 (to_real y)))
 (let ((?x85 (+ ?x69 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (to_real (+ a b))))
 (let ((?x87 (- (* ?x83 ?x83 ?x58 ?x58 ?x63 ?x63) (* ?x83 ?x83 ?x58 ?x58 ?x63 ?x85))))
 (let ((?x91 (- (+ ?x87 (* ?x83 ?x83 ?x58 ?x58 ?x58 ?x63 ?x85 ?x85 ?x85)) (* ?x83 ?x58 ?x58 ?x63 ?x63 ?x85 ?x85))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x71 (- (* (to_real a) (to_real a) ?x58 ?x58 ?x63 ?x63) (* (to_real a) (to_real a) ?x58 ?x58 ?x63 ?x69))))
 (let ((?x73 (+ ?x71 (* (to_real a) (to_real a) ?x58 ?x58 ?x58 ?x63 ?x69 ?x69 ?x69))))
 (let ((?x77 (+ (- ?x73 (* (to_real a) ?x58 ?x58 ?x63 ?x63 ?x69 ?x69)) (* (to_real a) (to_real a) (to_real a) ?x58 ?x69))))
 (let (($x97 (or (not (= (* ?x66 ?x77) ?x79)) (not (= (* ?x66 (+ ?x91 (* ?x83 ?x83 ?x83 ?x58 ?x85))) ?x79)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x97))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x932 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x542 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x957 (+ ?x67 ?x56)))
 (let ((?x668 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x542 ?x542))))
 (let ((?x629 (* (/ 1.0 16.0) (* (to_real d) ?x56 ?x56 ?x56 ?x957 ?x957 ?x542 ?x542 ?x542))))
 (let ((?x706 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x957 ?x957)) (* (- (/ 1.0 8.0)) (* (to_real d) ?x56 ?x56 ?x957 ?x957 ?x542)) ?x629 ?x668 (* (/ 1.0 2.0) (* ?x56 ?x957 ?x957 ?x957 ?x542)))))
 (let ((?x961 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) (to_real d))))))
 (let ((?x602 (* (- (/ 1.0 16.0)) (* ?x69 ?x69 (to_real d) (to_real d) ?x56 ?x56 ?x67))))
 (let ((?x565 (* (/ 1.0 16.0) (* ?x69 ?x69 ?x69 (to_real d) ?x56 ?x56 ?x56 ?x67 ?x67))))
 (let ((?x634 (+ (* (/ 1.0 16.0) (* (to_real d) (to_real d) ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 (to_real d) ?x56 ?x56 ?x67 ?x67)) ?x565 ?x602 (* (/ 1.0 2.0) (* ?x69 ?x56 ?x67 ?x67 ?x67)))))
 (let (($x900 (or (not (= (* ?x961 ?x634) 0.0)) (not (= (* ?x961 ?x706) 0.0)))))
 (let ((?x934 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x939 (= ?x934 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x107 (* b00 y00)))
 (let ((?x108 (* (- 2) ?x107)))
 (let (($x887 (= (+ ?x108 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x712 (and $x887 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x939 $x900)))
 (let ((?x79 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x85 (+ ?x69 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x83 (to_real (+ a b))))
 (let ((?x87 (- (* ?x83 ?x83 ?x58 ?x58 ?x63 ?x63) (* ?x83 ?x83 ?x58 ?x58 ?x63 ?x85))))
 (let ((?x91 (- (+ ?x87 (* ?x83 ?x83 ?x58 ?x58 ?x58 ?x63 ?x85 ?x85 ?x85)) (* ?x83 ?x58 ?x58 ?x63 ?x63 ?x85 ?x85))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x71 (- (* ?x67 ?x67 ?x58 ?x58 ?x63 ?x63) (* ?x67 ?x67 ?x58 ?x58 ?x63 ?x69))))
 (let ((?x75 (- (+ ?x71 (* ?x67 ?x67 ?x58 ?x58 ?x58 ?x63 ?x69 ?x69 ?x69)) (* ?x67 ?x58 ?x58 ?x63 ?x63 ?x69 ?x69))))
 (let (($x97 (or (not (= (* ?x66 (+ ?x75 (* ?x67 ?x67 ?x67 ?x58 ?x69))) ?x79)) (not (= (* ?x66 (+ ?x91 (* ?x83 ?x83 ?x83 ?x58 ?x85))) ?x79)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x98 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x97)))
 (rewrite (= $x98 $x712)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x100 (asserted $x99)))
 (let ((@x935 (mp (mp @x100 (quant-intro (proof-bind ?x932) (= $x99 $x933)) $x933) (rewrite (= $x933 $x933)) $x933)))
 (let ((@x327 (mp (mp @x935 (quant-intro (proof-bind ?x686) (= $x933 $x886)) $x886) (quant-intro (proof-bind ?x901) (= $x886 $x180)) $x180)))
 (let ((@x1082 (mp (mp~ @x327 (sk (~ $x180 $x1079)) $x1079) (rewrite (= $x1079 $x311)) $x311)))
 (let ((@x195 (mp (and-elim @x1082 $x250) @x309 $x235)))
 (let ((@x754 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x1038)) @x195 $x1038)))
 (let ((?x1111 (* ?x60 ?x237)))
 (let ((?x1118 (+ (* (- 1.0) (to_real ?x839)) ?x1111)))
 (let (($x875 (>= ?x1118 0.0)))
 (let (($x1114 (= 0.0 ?x1118)))
 (let ((@x418 (symm (commutativity (= $x1114 (= ?x1118 0.0))) (= (= ?x1118 0.0) $x1114))))
 (let ((@x269 (mp ((_ th-lemma arith) (= ?x1118 0.0)) @x418 $x1114)))
 (let ((?x1109 (* ?x64 ?x241)))
 (let ((?x1122 (+ ?x1109 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x1057 (<= ?x1122 0.0)))
 (let (($x434 (= 0.0 ?x1122)))
 (let ((@x345 (symm (commutativity (= $x434 (= ?x1122 0.0))) (= (= ?x1122 0.0) $x434))))
 (let ((@x473 (unit-resolution (hypothesis (not $x434)) (mp ((_ th-lemma arith) (= ?x1122 0.0)) @x345 $x434) false)))
 (let ((@x416 (lemma @x473 $x434)))
 (let ((@x764 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x1057)) @x416 $x1057) (hypothesis (not $x453)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1114) $x875)) @x269 $x875) @x754 false)))
 (let ((@x766 (lemma @x764 $x453)))
 (let ((?x873 (+ ?x834 ?x978 ?x153 ?x980 ?x982 ?x1001 ?x148 ?x985 ?x989 ?x864 ?x138 ?x150 ?x184 ?x276 ?x190 ?x836 ?x832 ?x298 ?x302 ?x429 ?x1112 ?x299 ?x409 ?x439 ?x398 ?x126 ?x998 ?x188 ?x438)))
 (let (($x248 (<= ?x873 0.0)))
 (let (($x784 (not $x248)))
 (let (($x1034 (>= ?x873 0.0)))
 (let (($x1100 (<= ?x470 0.0)))
 (let (($x1117 (>= ?x1122 0.0)))
 (let (($x1039 (<= ?x1086 0)))
 (let ((@x196 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x1039)) @x195 $x1039)))
 (let (($x1029 (<= ?x1118 0.0)))
 (let ((@x326 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1114) $x1029)) @x269 $x1029) @x196 (hypothesis (not $x1100)) (hypothesis $x1117) false)))
 (let ((@x739 (unit-resolution (lemma @x326 (or (not $x1117) $x1100)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x434) $x1117)) @x416 $x1117) $x1100)))
 (let (($x286 (not $x1034)))
 (let ((@x511 (hypothesis $x286)))
 (let (($x878 (<= ?x1093 0.0)))
 (let (($x919 (not $x878)))
 (let (($x1048 (>= ?x1093 0.0)))
 (let (($x462 (not $x1048)))
 (let ((@x506 (hypothesis $x462)))
 (let ((@x291 (unit-resolution ((_ th-lemma arith) (or (not $x453) $x1034 $x1048)) @x506 @x511 @x766 false)))
 (let ((@x791 (unit-resolution ((_ th-lemma arith) (or (not $x1100) $x248 $x1048)) @x506 (hypothesis $x784) @x739 false)))
 (let (($x655 (= ?x873 0.0)))
 (let (($x794 (not $x655)))
 (let (($x1049 (<= ?x215 0.0)))
 (let (($x1047 (>= ?x1056 0)))
 (let (($x1046 (= 0 ?x1056)))
 (let ((@x476 (mp (and-elim @x1082 $x1059) (symm (commutativity (= $x1046 $x1059)) (= $x1059 $x1046)) $x1046)))
 (let (($x1041 (<= ?x1056 0)))
 (let ((@x160 (unit-resolution ((_ th-lemma arith) (or $x1049 (not $x1038) (not $x1039) (not $x1047) (not $x1041))) @x196 @x754 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1046) $x1041)) @x476 $x1041) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1046) $x1047)) @x476 $x1047) (hypothesis (not $x1049)) false)))
 (let (($x1042 (>= ?x215 0.0)))
 (let ((@x271 (unit-resolution ((_ th-lemma arith) (or $x1042 (not $x1038) (not $x1039))) @x196 @x754 (hypothesis (not $x1042)) false)))
 (let ((@x455 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1028 (not $x1049) (not $x1042))) (lemma @x271 $x1042) (or $x1028 (not $x1049)))))
 (let ((@x1140 (unit-resolution (and-elim @x1082 $x1025) (unit-resolution @x455 (lemma @x160 $x1049) $x1028) $x1024)))
 (let ((@x337 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x794 $x1026)) @x1140 $x794) (symm (hypothesis (= 0.0 ?x873)) $x655) false)))
 (let ((@x348 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x873) $x784 $x286)) (lemma @x337 (not (= 0.0 ?x873))) (or $x784 $x286))))
 (let ((@x512 (unit-resolution @x348 (unit-resolution (lemma @x791 (or $x248 $x1048)) @x506 $x248) (unit-resolution (lemma @x291 (or $x1034 $x1048)) @x506 $x1034) false)))
 (let (($x1016 (= 0.0 ?x1093)))
 (let (($x118 (not $x1016)))
 (let ((@x141 (monotonicity (symm (commutativity (= $x1016 $x1026)) (= $x1026 $x1016)) (= $x1024 $x118))))
 (let ((@x903 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1016 $x919 $x462)) (mp @x1140 @x141 $x118) (or $x919 $x462))))
 (let ((@x894 (unit-resolution @x903 (lemma @x512 $x1048) $x919)))
 (let ((@x884 (unit-resolution ((_ th-lemma arith) (or (not $x1100) $x1034 $x878)) @x894 @x511 @x739 false)))
 (unit-resolution ((_ th-lemma arith) (or (not $x453) $x248 $x878)) @x894 (unit-resolution @x348 (lemma @x884 $x1034) $x784) @x766 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       43
 :arith-eq-adapter                90
 :arith-bound-propagations-cheap  61
 :arith-bound-propagations-lp     4
 :arith-conflicts                 198
 :arith-diseq                     75
 :arith-gcd-calls                 7
 :arith-grobner-calls             7
 :arith-grobner-conflicts         2
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 14
 :arith-lower                     87
 :arith-make-feasible             88
 :arith-max-columns               90
 :arith-max-rows                  18
 :arith-nla-explanations          84
 :arith-nla-lemmas                196
 :arith-patches                   7
 :arith-patches-success           7
 :arith-propagations              61
 :arith-upper                     105
 :conflicts                       18
 :decisions                       244
 :del-clause                      161
 :final-checks                    49
 :max-memory                      7.38
 :memory                          3.21
 :minimized-lits                  1
 :mk-bool-var                     378
 :mk-clause                       251
 :num-allocs                      55287796
 :num-checks                      1
 :propagations                    211
 :rlimit-count                    10143
 :time                            0.11
 :total-time                      0.11)
