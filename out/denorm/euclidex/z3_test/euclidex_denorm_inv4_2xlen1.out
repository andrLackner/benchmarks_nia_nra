unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun p!5 () Int)
(declare-fun a!4 () Int)
(declare-fun q!3 () Int)
(declare-fun b!2 () Int)
(declare-fun s!0 () Int)
(proof
(let ((?x613 (* q00 a00 r!1)))
 (let ((?x598 (* r00 b00 p!5)))
 (let ((?x590 (* p00 s00 a!4)))
 (let ((?x617 (+ ?x590 (* (- 1) (* q00 r00 a!4)) ?x598 (* (- 1) (* p00 b00 r!1)) (* (- 1) (* s00 a00 p!5)) ?x613)))
 (let (($x629 (>= ?x617 0)))
 (let (($x612 (= ?x617 0)))
 (let ((?x636 (* q00 a00 s!0)))
 (let ((?x447 (* (- 1) (* s00 a00 q!3))))
 (let ((?x627 (* r00 b00 q!3)))
 (let ((?x450 (* (- 1) (* p00 b00 s!0))))
 (let ((?x451 (* (- 1) (* q00 r00 b!2))))
 (let ((?x400 (* (- 1) ?x613)))
 (let ((?x607 (* s00 a00 p!5)))
 (let ((?x602 (* p00 b00 r!1)))
 (let ((?x405 (* (- 1) ?x598)))
 (let ((?x597 (* p00 s00 b!2)))
 (let ((?x593 (* q00 r00 a!4)))
 (let ((?x408 (* (- 1) ?x590)))
 (let ((?x519 (+ p!5 (* (- 1) q!3))))
 (let ((?x510 (* (- 1) b!2)))
 (let ((?x700 (+ ?x510 a!4)))
 (let ((?x504 (* (- 1) s!0)))
 (let ((?x391 (+ ?x504 r!1)))
 (let ((?x683 (* ?x391 ?x391 ?x391 ?x391 ?x700 ?x700 ?x700 ?x700 ?x519 ?x519 ?x519 ?x519 ?x519 (+ ?x408 ?x593 ?x597 ?x405 ?x602 ?x607 ?x400 ?x451 ?x450 ?x627 ?x447 ?x636) s!0 s!0 s!0 s!0 b!2 q!3)))
 (let (($x697 (= ?x683 0)))
 (let ((?x196 (+ (* (- 1) p!5) q!3)))
 (let ((?x275 (* (- 1) r!1)))
 (let ((?x423 (+ s!0 ?x275)))
 (let ((?x394 (* ?x423 ?x423 ?x423 ?x423 (+ b!2 (* (- 1) a!4)) ?x196 (+ ?x408 ?x593 ?x405 ?x602 ?x607 ?x400) r!1 r!1 r!1 r!1 a!4 a!4 a!4 a!4 p!5 p!5 p!5 p!5 p!5)))
 (let (($x395 (= ?x394 0)))
 (let (($x388 (not $x395)))
 (let (($x695 (or $x388 (not $x697))))
 (let ((?x446 (+ ?x597 ?x451 ?x450 ?x627 ?x447 ?x636)))
 (let (($x445 (= ?x446 0)))
 (let ((?x320 (* p!5 b!2)))
 (let ((?x127 (* q00 a00)))
 (let (($x367 (= (+ ?x127 (* (- 1) (* p00 b00)) ?x320 (* (- 1) (* a!4 q!3))) 0)))
 (let ((?x123 (* s00 a00)))
 (let ((?x213 (+ ?x123 (* (- 1) (* r00 b00)) (* r!1 b!2) (* (- 1) (* s!0 a!4)))))
 (let ((?x37 (* p00 s00)))
 (let ((?x374 (+ ?x37 (* (- 1) (* q00 r00)) (* (- 1) (* p!5 s!0)) (* r!1 q!3))))
 (let (($x722 (and (= ?x374 0) (= ?x213 0) $x367 $x612 $x445 $x695)))
 (let ((?x270 (* s!0 q00 a00)))
 (let ((?x429 (* q!3 r00 b00)))
 (let ((?x167 (* r!1 q00 a00)))
 (let ((?x354 (* (- 1) ?x167)))
 (let ((?x149 (* p!5 s00 a00)))
 (let ((?x392 (* r!1 p00 b00)))
 (let ((?x357 (* p!5 r00 b00)))
 (let ((?x200 (* (- 1) ?x357)))
 (let ((?x442 (* b!2 p00 s00)))
 (let ((?x113 (* a!4 q00 r00)))
 (let ((?x242 (* a!4 p00 s00)))
 (let ((?x197 (* (- 1) ?x242)))
 (let ((?x292 (+ ?x197 ?x113 (* (- 1) (* b!2 q00 r00)) ?x442 ?x200 ?x392 ?x149 ?x354 (* (- 1) (* s!0 p00 b00)) ?x429 (* (- 1) (* q!3 s00 a00)) ?x270)))
 (let ((?x511 (+ a!4 ?x510)))
 (let ((?x508 (+ r!1 ?x504)))
 (let ((?x295 (* ?x508 ?x508 ?x508 ?x508 ?x511 ?x511 ?x511 ?x511 ?x519 ?x519 ?x519 ?x519 ?x519 ?x292 s!0 s!0 s!0 s!0 b!2 q!3)))
 (let ((?x131 (+ ?x275 s!0)))
 (let ((?x169 (* ?x131 ?x131 ?x131 ?x131 (+ (* (- 1) a!4) b!2) ?x196 (+ ?x197 ?x113 ?x200 ?x392 ?x149 ?x354) r!1 r!1 r!1 r!1 a!4 a!4 a!4 a!4 p!5 p!5 p!5 p!5 p!5)))
 (let ((?x111 (* q!3 s00 a00)))
 (let ((?x124 (* s!0 p00 b00)))
 (let ((?x112 (* b!2 q00 r00)))
 (let (($x407 (= (+ ?x112 (* (- 1) ?x442) ?x124 (* (- 1) ?x429) ?x111 (* (- 1) ?x270)) 0)))
 (let (($x426 (= (+ ?x242 (* (- 1) ?x113) ?x357 (* (- 1) ?x392) (* (- 1) ?x149) ?x167) 0)))
 (let (($x500 (= (+ (* a!4 q!3) (* (- 1) ?x127) (* p00 b00) (* (- 1) ?x320)) 0)))
 (let ((?x141 (* r00 b00)))
 (let ((?x130 (* (- 1) ?x123)))
 (let ((?x41 (* q00 r00)))
 (let ((?x132 (* (- 1) ?x37)))
 (let ((?x136 (* p!5 s!0)))
 (let (($x311 (and (= (+ ?x136 ?x132 ?x41 (* (- 1) (* q!3 r!1))) 0) (= (+ (* a!4 s!0) (* (- 1) (* b!2 r!1)) ?x130 ?x141) 0) $x500 $x426 $x407 (or (not (= ?x169 0)) (not (= ?x295 0))))))
 (let (($x464 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x291 (* s q00 a00)))
 (let ((?x280 (* q s00 a00)))
 (let ((?x384 (* (- 1) ?x280)))
 (let ((?x246 (* q r00 b00)))
 (let ((?x245 (* s p00 b00)))
 (let ((?x349 (* (- 1) ?x245)))
 (let ((?x216 (* r q00 a00)))
 (let ((?x222 (* (- 1) ?x216)))
 (let ((?x205 (* p s00 a00)))
 (let ((?x202 (* r p00 b00)))
 (let ((?x182 (* p r00 b00)))
 (let ((?x183 (* (- 1) ?x182)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x364 (* (- 1) ?x72)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x191 (* (- 1) ?x63)))
 (let ((?x249 (* (- 1) q)))
 (let ((?x251 (+ p ?x249)))
 (let ((?x272 (+ a (* (- 1) b))))
 (let ((?x332 (+ r (* (- 1) s))))
 (let ((?x529 (* ?x332 ?x332 ?x332 ?x332 ?x272 ?x272 ?x272 ?x272 ?x251 ?x251 ?x251 ?x251 ?x251 (+ ?x191 ?x66 ?x364 ?x76 ?x183 ?x202 ?x205 ?x222 ?x349 ?x246 ?x384 ?x291) s s s s b q)))
 (let ((?x228 (+ ?x191 ?x66 ?x183 ?x202 ?x205 ?x222)))
 (let ((?x252 (* (- 1) p)))
 (let ((?x266 (+ ?x252 q)))
 (let ((?x299 (* (- 1) a)))
 (let ((?x310 (+ ?x299 b)))
 (let ((?x281 (* (- 1) r)))
 (let ((?x288 (+ ?x281 s)))
 (let ((?x317 (* ?x288 ?x288 ?x288 ?x288 ?x310 ?x266 ?x228 r r r r a a a a p p p p p)))
 (let (($x308 (= (+ ?x72 (* (- 1) ?x76) ?x245 (* (- 1) ?x246) ?x280 (* (- 1) ?x291)) 0)))
 (let (($x240 (= (+ ?x63 (* (- 1) ?x66) ?x182 (* (- 1) ?x202) (* (- 1) ?x205) ?x216) 0)))
 (let ((?x128 (* p00 b00)))
 (let ((?x127 (* q00 a00)))
 (let ((?x171 (* (- 1) ?x127)))
 (let (($x174 (= (+ (* a q) ?x171 ?x128 (* (- 1) (* p b))) 0)))
 (let ((?x141 (* r00 b00)))
 (let ((?x123 (* s00 a00)))
 (let ((?x130 (* (- 1) ?x123)))
 (let ((?x49 (* a s)))
 (let (($x156 (= (+ ?x49 (* (- 1) (* b r)) ?x130 ?x141) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x132 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x151 (= (+ ?x33 ?x132 ?x41 (* (- 1) (* q r))) 0)))
 (and $x151 $x156 $x174 $x240 $x308 (or (not (= ?x317 0)) (not (= ?x529 0))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!39))
 ))
 (let (($x159 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x65 (* b00 p00 r)))
 (let ((?x427 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x281 (* (- 1) r)))
 (let ((?x373 (+ s ?x281)))
 (let ((?x393 (* ?x373 ?x373 ?x373 ?x373 (+ b (* (- 1) a)) (+ q (* (- 1) p)) ?x427 r r r r a a a a p p p p p)))
 (let ((?x129 (+ (* (- 1) (* b00 r00 (+ p (* (- 1) q)))) (* (- 1) (* p00 s00 (+ a (* (- 1) b)))) (* b00 p00 (+ r (* (- 1) s))) (* q00 r00 (+ a (* (- 1) b))) (* a00 s00 (+ p (* (- 1) q))) (* (- 1) (* a00 q00 (+ r (* (- 1) s)))))))
 (let ((?x249 (* (- 1) q)))
 (let ((?x251 (+ p ?x249)))
 (let ((?x272 (+ a (* (- 1) b))))
 (let ((?x332 (+ r (* (- 1) s))))
 (let ((?x161 (* ?x332 ?x332 ?x332 ?x332 ?x272 ?x272 ?x272 ?x272 ?x251 ?x251 ?x251 ?x251 ?x251 ?x129 s s s s b q)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x370 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x198 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x181 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x132 (* (- 1) ?x37)))
 (and (= (+ (* (- 1) (* r q)) (* s p) ?x132 ?x41) 0) (= ?x181 0) $x198 (= ?x427 0) (= ?x370 0) (or (not (= ?x161 0)) (not (= ?x393 0))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x410 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x291 (* s q00 a00)))
 (let ((?x280 (* q s00 a00)))
 (let ((?x384 (* (- 1) ?x280)))
 (let ((?x246 (* q r00 b00)))
 (let ((?x245 (* s p00 b00)))
 (let ((?x349 (* (- 1) ?x245)))
 (let ((?x216 (* r q00 a00)))
 (let ((?x222 (* (- 1) ?x216)))
 (let ((?x205 (* p s00 a00)))
 (let ((?x202 (* r p00 b00)))
 (let ((?x182 (* p r00 b00)))
 (let ((?x183 (* (- 1) ?x182)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x364 (* (- 1) ?x72)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x191 (* (- 1) ?x63)))
 (let ((?x249 (* (- 1) q)))
 (let ((?x251 (+ p ?x249)))
 (let ((?x272 (+ a (* (- 1) b))))
 (let ((?x332 (+ r (* (- 1) s))))
 (let ((?x529 (* ?x332 ?x332 ?x332 ?x332 ?x272 ?x272 ?x272 ?x272 ?x251 ?x251 ?x251 ?x251 ?x251 (+ ?x191 ?x66 ?x364 ?x76 ?x183 ?x202 ?x205 ?x222 ?x349 ?x246 ?x384 ?x291) s s s s b q)))
 (let ((?x228 (+ ?x191 ?x66 ?x183 ?x202 ?x205 ?x222)))
 (let ((?x252 (* (- 1) p)))
 (let ((?x266 (+ ?x252 q)))
 (let ((?x299 (* (- 1) a)))
 (let ((?x310 (+ ?x299 b)))
 (let ((?x281 (* (- 1) r)))
 (let ((?x288 (+ ?x281 s)))
 (let ((?x317 (* ?x288 ?x288 ?x288 ?x288 ?x310 ?x266 ?x228 r r r r a a a a p p p p p)))
 (let (($x308 (= (+ ?x72 (* (- 1) ?x76) ?x245 (* (- 1) ?x246) ?x280 (* (- 1) ?x291)) 0)))
 (let (($x240 (= (+ ?x63 (* (- 1) ?x66) ?x182 (* (- 1) ?x202) (* (- 1) ?x205) ?x216) 0)))
 (let ((?x128 (* p00 b00)))
 (let ((?x127 (* q00 a00)))
 (let ((?x171 (* (- 1) ?x127)))
 (let (($x174 (= (+ (* a q) ?x171 ?x128 (* (- 1) (* p b))) 0)))
 (let ((?x141 (* r00 b00)))
 (let ((?x123 (* s00 a00)))
 (let ((?x130 (* (- 1) ?x123)))
 (let ((?x49 (* a s)))
 (let (($x156 (= (+ ?x49 (* (- 1) (* b r)) ?x130 ?x141) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x132 (* (- 1) ?x37)))
 (let ((?x33 (* p s)))
 (let (($x151 (= (+ ?x33 ?x132 ?x41 (* (- 1) (* q r))) 0)))
 (let (($x585 (and $x151 $x156 $x174 $x240 $x308 (or (not (= ?x317 0)) (not (= ?x529 0))))))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x427 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x373 (+ s ?x281)))
 (let ((?x393 (* ?x373 ?x373 ?x373 ?x373 (+ b ?x299) (+ q ?x252) ?x427 r r r r a a a a p p p p p)))
 (let ((?x129 (+ (* (- 1) (* b00 r00 ?x251)) (* (- 1) (* p00 s00 ?x272)) (* b00 p00 ?x332) (* q00 r00 ?x272) (* a00 s00 ?x251) (* (- 1) (* a00 q00 ?x332)))))
 (let ((?x161 (* ?x332 ?x332 ?x332 ?x332 ?x272 ?x272 ?x272 ?x272 ?x251 ?x251 ?x251 ?x251 ?x251 ?x129 s s s s b q)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x370 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x198 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x181 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let (($x322 (and (= (+ (* (- 1) (* r q)) (* s p) ?x132 ?x41) 0) (= ?x181 0) $x198 (= ?x427 0) (= ?x370 0) (or (not (= ?x161 0)) (not (= ?x393 0))))))
 (rewrite (= $x322 $x585)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x107 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x100 (- s r)))
 (let ((?x31 (- 1)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x70 (- ?x68 ?x69)))
 (let ((?x102 (* ?x70 a p p p (- q p) r r ?x100 ?x31 a a a (- b a) p p r r ?x100 ?x100 ?x100)))
 (let ((?x89 (- r s)))
 (let ((?x84 (- p q)))
 (let ((?x86 (- a b)))
 (let ((?x93 (+ (- (* ?x31 b00 ?x84 r00) (* ?x86 p00 s00)) (* b00 p00 ?x89) (* ?x86 q00 r00) (* a00 ?x84 s00))))
 (let ((?x96 (* (- ?x93 (* a00 q00 ?x89)) ?x86 ?x84 ?x84 ?x84 q ?x89 ?x89 s ?x31 ?x86 ?x86 ?x86 b ?x84 ?x84 ?x89 ?x89 s s s)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* ?x31 a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let ((?x41 (* q00 r00)))
 (let (($x44 (= (+ (- (+ (* ?x31 q r) (* p s)) (* p00 s00)) ?x41) 0)))
 (and $x44 (= (+ (- (* ?x31 b r) (* a00 s00)) ?x49 ?x51) 0) (= ?x60 0) (= ?x70 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= ?x96 0)) (not (= ?x102 0)))))))))))))))))))))))))) :qid k!39))
 ))
 (let ((?x154 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x65 (* b00 p00 r)))
 (let ((?x427 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 (* q00 r00 a) (* a00 s00 p) (* (- 1) (* a00 q00 r)))))
 (let ((?x281 (* (- 1) r)))
 (let ((?x373 (+ s ?x281)))
 (let ((?x393 (* ?x373 ?x373 ?x373 ?x373 (+ b (* (- 1) a)) (+ q (* (- 1) p)) ?x427 r r r r a a a a p p p p p)))
 (let ((?x129 (+ (* (- 1) (* b00 r00 (+ p (* (- 1) q)))) (* (- 1) (* p00 s00 (+ a (* (- 1) b)))) (* b00 p00 (+ r (* (- 1) s))) (* q00 r00 (+ a (* (- 1) b))) (* a00 s00 (+ p (* (- 1) q))) (* (- 1) (* a00 q00 (+ r (* (- 1) s)))))))
 (let ((?x249 (* (- 1) q)))
 (let ((?x251 (+ p ?x249)))
 (let ((?x272 (+ a (* (- 1) b))))
 (let ((?x332 (+ r (* (- 1) s))))
 (let ((?x161 (* ?x332 ?x332 ?x332 ?x332 ?x272 ?x272 ?x272 ?x272 ?x251 ?x251 ?x251 ?x251 ?x251 ?x129 s s s s b q)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x370 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x198 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x181 (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) (* s a) ?x51)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x132 (* (- 1) ?x37)))
 (let (($x322 (and (= (+ (* (- 1) (* r q)) (* s p) ?x132 ?x41) 0) (= ?x181 0) $x198 (= ?x427 0) (= ?x370 0) (or (not (= ?x161 0)) (not (= ?x393 0))))))
 (let ((?x100 (- s r)))
 (let ((?x31 (- 1)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* ?x31 b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x70 (- ?x68 ?x69)))
 (let ((?x102 (* ?x70 a p p p (- q p) r r ?x100 ?x31 a a a (- b a) p p r r ?x100 ?x100 ?x100)))
 (let ((?x89 (- r s)))
 (let ((?x84 (- p q)))
 (let ((?x86 (- a b)))
 (let ((?x93 (+ (- (* ?x31 b00 ?x84 r00) (* ?x86 p00 s00)) (* b00 p00 ?x89) (* ?x86 q00 r00) (* a00 ?x84 s00))))
 (let ((?x96 (* (- ?x93 (* a00 q00 ?x89)) ?x86 ?x84 ?x84 ?x84 q ?x89 ?x89 s ?x31 ?x86 ?x86 ?x86 b ?x84 ?x84 ?x89 ?x89 s s s)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let (($x53 (= (+ (- (* ?x31 b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x106 (and (= (+ (- (+ (* ?x31 q r) (* p s)) ?x37) ?x41) 0) $x53 (= (+ (- (+ (* ?x31 a q) ?x55) (* b00 p00)) ?x59) 0) (= ?x70 0) (= (- ?x80 ?x81) 0) (or (not (= ?x96 0)) (not (= ?x102 0))))))
 (rewrite (= $x106 $x322))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x108 (asserted $x107)))
 (let ((@x282 (mp (mp @x108 (quant-intro (proof-bind ?x154) (= $x107 $x159)) $x159) (rewrite (= $x159 $x159)) $x159)))
 (let ((@x201 (mp~ (mp @x282 (quant-intro (proof-bind ?x410) (= $x159 $x464)) $x464) (sk (~ $x464 $x311)) $x311)))
 (let ((@x693 (mp @x201 (rewrite (= $x311 $x722)) $x722)))
 (let ((@x624 (and-elim @x693 $x612)))
 (let ((@x647 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x612) $x629)) @x624 $x629)))
 (let (($x628 (<= ?x617 0)))
 (let ((@x654 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x612) $x628)) @x624 $x628)))
 (let (($x587 (not (<= ?x394 0))))
 (let (($x404 (>= ?x683 0)))
 (let (($x615 (<= ?x446 0)))
 (let ((@x630 (and-elim @x693 $x445)))
 (let ((@x640 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x445) $x615)) @x630 $x615)))
 (let (($x616 (>= ?x446 0)))
 (let ((@x650 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x445) $x616)) @x630 $x616)))
 (let ((@x443 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x404)) @x654 @x650 @x647 @x640 false) $x404)))
 (let (($x406 (<= ?x683 0)))
 (let ((@x608 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x406)) @x654 @x650 @x647 @x640 false) $x406)))
 (let ((@x412 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x697 (not $x406) (not $x404))) @x608 @x443 $x697)))
 (let (($x626 (>= ?x394 0)))
 (let ((@x312 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x395 $x587 (not $x626))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x626)) @x654 @x647 false) $x626) (unit-resolution (and-elim @x693 $x695) @x412 $x388) $x587)))
 ((_ th-lemma arith farkas 1 1 1) @x312 @x654 @x647 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 14
 :arith-assert-diseq        3
 :arith-assert-lower        23
 :arith-assert-upper        22
 :arith-conflicts           4
 :arith-eq-adapter          11
 :arith-fixed-eqs           10
 :arith-grobner             4
 :arith-max-min             360
 :arith-nonlinear-horner    44
 :arith-num-rows            13
 :arith-pivots              5
 :arith-pseudo-nonlinear    8
 :arith-row-summations      3
 :arith-tableau-max-columns 52
 :arith-tableau-max-rows    13
 :conflicts                 4
 :decisions                 7
 :del-clause                27
 :final-checks              4
 :max-memory                19.64
 :memory                    19.18
 :mk-bool-var               33
 :mk-clause                 40
 :num-allocs                498050
 :num-checks                1
 :propagations              19
 :rlimit-count              8847
 :time                      0.01
 :total-time                0.02)
