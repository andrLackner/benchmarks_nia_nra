unsat
((set-logic NIA)
(proof
(let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x48 (* 2 y00 y00 y00 y00)))
 (let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x49 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x50 (+ ?x46 ?x48 ?x49 ?x45)))
 (let ((?x51 (- ?x50 ?x48)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x54)))))))))))))))) :qid k!29))
 ))
 (let (($x116 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x118 (lambda ((q Int) (r Int) (y Int) )(let ((?x48 (* 2 y00 y00 y00 y00)))
 (let ((?x43 (- r y00)))
 (let ((?x45 (* ?x43 y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x49 (* ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x46 (- ?x44 ?x45)))
 (let ((?x50 (+ ?x46 ?x48 ?x49 ?x45)))
 (let ((?x51 (- ?x50 ?x48)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x55 (and $x33 $x41 $x54)))
 (let (($x421 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x290 (= (+ (* (- 1) y00) y) 0)))
 (let (($x102 (and $x290 $x421 false)))
 (let ((?x410 (* y00 y00 y00 y00)))
 (let ((?x411 (* 2 ?x410)))
 (let ((?x222 (* (- 1) ?x411)))
 (let ((?x223 (+ ?x411 ?x222)))
 (let ((@x235 (monotonicity (rewrite (= ?x222 (* (- 2) ?x410))) (= ?x223 (+ ?x411 (* (- 2) ?x410))))))
 (let ((@x80 (trans @x235 (rewrite (= (+ ?x411 (* (- 2) ?x410)) 0)) (= ?x223 0))))
 (let ((@x305 (rewrite (= ?x48 ?x411))))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x296 (+ r ?x61)))
 (let ((?x409 (* y00 ?x296)))
 (let ((?x298 (+ 1 q)))
 (let ((?x397 (* y00 y00 y00 y00 ?x298 ?x298 ?x298 ?x296 ?x296 ?x296)))
 (let ((?x398 (* (- 1) ?x397)))
 (let ((?x497 (+ ?x398 (* (- 1) ?x409))))
 (let ((?x301 (+ ?x497 ?x411 ?x397 ?x409)))
 (let ((@x489 (trans (monotonicity (rewrite (= ?x43 ?x296)) (= ?x45 (* ?x296 y00))) (rewrite (= (* ?x296 y00) ?x409)) (= ?x45 ?x409))))
 (let ((@x350 (rewrite (= (* ?x298 ?x298 ?x298 ?x296 ?x296 ?x296 y00 y00 y00 y00) ?x397))))
 (let ((@x311 (rewrite (= ?x43 ?x296))))
 (let ((@x295 (rewrite (= ?x42 ?x298))))
 (let ((@x343 (monotonicity @x295 @x295 @x295 @x311 @x311 @x311 (= ?x49 (* ?x298 ?x298 ?x298 ?x296 ?x296 ?x296 y00 y00 y00 y00)))))
 (let ((?x444 (* (- 1) ?x298 ?x298 ?x298 ?x296 ?x296 ?x296 y00 y00 y00 y00)))
 (let ((@x392 (monotonicity (rewrite (= ?x28 (- 1))) @x295 @x295 @x295 @x311 @x311 @x311 (= ?x44 ?x444))))
 (let ((@x452 (monotonicity (trans @x392 (rewrite (= ?x444 ?x398)) (= ?x44 ?x398)) @x489 (= ?x46 (- ?x398 ?x409)))))
 (let ((@x303 (monotonicity (trans @x452 (rewrite (= (- ?x398 ?x409) ?x497)) (= ?x46 ?x497)) @x305 (trans @x343 @x350 (= ?x49 ?x397)) @x489 (= ?x50 ?x301))))
 (let ((@x221 (monotonicity (trans @x303 (rewrite (= ?x301 ?x411)) (= ?x50 ?x411)) @x305 (= ?x51 (- ?x411 ?x411)))))
 (let ((@x519 (trans (trans @x221 (rewrite (= (- ?x411 ?x411) ?x223)) (= ?x51 ?x223)) @x80 $x52)))
 (let ((@x249 (trans (monotonicity @x519 (= $x52 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x52 true))))
 (let ((@x81 (trans (monotonicity @x249 (= $x53 (not true))) (rewrite (= (not true) false)) (= $x53 false))))
 (let ((@x101 (trans (monotonicity @x81 (= $x54 (or false))) (rewrite (= (or false) false)) (= $x54 false))))
 (let ((@x106 (monotonicity (rewrite (= $x33 $x290)) (rewrite (= $x41 $x421)) @x101 (= $x55 $x102))))
 (trans @x106 (rewrite (= $x102 false)) (= $x55 false))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x132 (trans (quant-intro (proof-bind ?x118) (= $x56 $x116)) (elim-unused (= $x116 false)) (= $x56 false))))
 (let ((@x57 (asserted $x56)))
 (mp @x57 @x132 false))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   929414
 :rlimit-count 509
 :time         0.01
 :total-time   0.01)
