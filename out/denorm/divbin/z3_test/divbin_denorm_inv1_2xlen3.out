unsat
((set-logic NRA)
(proof
(let (($x921 (exists ((b Real) (x Real) )(! (let ((?x893 (* (- (/ 1.0 2.0)) b)))
 (let ((?x717 (* x b)))
 (let ((?x892 (* (- 1.0) ?x717)))
 (let ((?x78 (* b00 x00)))
 (let ((?x900 (+ ?x78 r00 ?x892 ?x893)))
 (let ((?x53 (* 2.0 x)))
 (let ((?x849 (+ 1.0 ?x53)))
 (let ((?x916 (* ?x849 ?x849 ?x900)))
 (let ((?x909 (* ?x849 ?x849 ?x849 ?x900 b b b)))
 (let ((?x910 (* (- (/ 1.0 8.0)) ?x909)))
 (let ((?x538 (* ?x849 ?x849 ?x849 ?x900 ?x900)))
 (let ((?x915 (+ ?x538 ?x910 ?x916)))
 (let ((?x954 (* ?x849 ?x849 ?x849)))
 (let ((?x906 (* (/ 1.0 4.0) (* ?x849 ?x849 ?x849 ?x900 ?x900 b b))))
 (let ((?x908 (+ (- 1.0) ?x906 ?x954)))
 (let ((?x894 (* ?x849 b)))
 (let ((?x898 (* (/ 1.0 2.0) ?x894)))
 (let ((?x899 (+ ?x892 ?x893 ?x898)))
 (let ((?x917 (* ?x899 ?x908 ?x915)))
 (let (($x918 (= ?x917 0.0)))
 (not $x918))))))))))))))))))))) :qid k!28))
 ))
 (let (($x680 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x681 (lambda ((b Real) (x Real) )(let ((?x893 (* (- (/ 1.0 2.0)) b)))
 (let ((?x717 (* x b)))
 (let ((?x892 (* (- 1.0) ?x717)))
 (let ((?x78 (* b00 x00)))
 (let ((?x900 (+ ?x78 r00 ?x892 ?x893)))
 (let ((?x53 (* 2.0 x)))
 (let ((?x849 (+ 1.0 ?x53)))
 (let ((?x916 (* ?x849 ?x849 ?x900)))
 (let ((?x909 (* ?x849 ?x849 ?x849 ?x900 b b b)))
 (let ((?x910 (* (- (/ 1.0 8.0)) ?x909)))
 (let ((?x538 (* ?x849 ?x849 ?x849 ?x900 ?x900)))
 (let ((?x915 (+ ?x538 ?x910 ?x916)))
 (let ((?x954 (* ?x849 ?x849 ?x849)))
 (let ((?x906 (* (/ 1.0 4.0) (* ?x849 ?x849 ?x849 ?x900 ?x900 b b))))
 (let ((?x908 (+ (- 1.0) ?x906 ?x954)))
 (let ((?x894 (* ?x849 b)))
 (let ((?x898 (* (/ 1.0 2.0) ?x894)))
 (let ((?x899 (+ ?x892 ?x893 ?x898)))
 (let ((?x917 (* ?x899 ?x908 ?x915)))
 (let (($x918 (= ?x917 0.0)))
 (let (($x920 (not $x918)))
 (let ((?x976 (+ ?x893 r00 ?x78 ?x892)))
 (let ((?x1006 (* ?x849 ?x849 ?x849 ?x976 ?x976)))
 (let ((?x998 (* x b b b b)))
 (let ((?x435 (* (/ 1.0 2.0) ?x998)))
 (let ((?x971 (* x x b b b b)))
 (let ((?x693 (* (/ 3.0 2.0) ?x971)))
 (let ((?x75 (* (- 4.0) (* x x x b))))
 (let ((?x83 (* (- 3.0) ?x717)))
 (let ((?x715 (* x x x x b b b b)))
 (let ((?x601 (* x x x b b b b00 x00)))
 (let ((?x649 (* (- 1.0) ?x601)))
 (let ((?x570 (* x b b b b00 x00)))
 (let ((?x660 (* (- (/ 3.0 4.0)) ?x570)))
 (let ((?x564 (* b b b b00 x00)))
 (let ((?x177 (* (- (/ 1.0 8.0)) ?x564)))
 (let ((?x560 (* x x x b b b r00)))
 (let ((?x659 (* (- 1.0) ?x560)))
 (let ((?x539 (* x x b b b r00)))
 (let ((?x633 (* (- (/ 3.0 2.0)) ?x539)))
 (let ((?x530 (* x b b b r00)))
 (let ((?x473 (* (- (/ 3.0 4.0)) ?x530)))
 (let ((?x516 (* b b b r00)))
 (let ((?x168 (* (- (/ 1.0 8.0)) ?x516)))
 (let ((?x513 (* x x x b b b b)))
 (let ((?x1009 (* 2.0 ?x513)))
 (let ((?x493 (* x x b b b b00 x00)))
 (let ((?x760 (* (- (/ 3.0 2.0)) ?x493)))
 (let ((?x432 (* 4.0 (* x x r00))))
 (let ((?x424 (* x r00)))
 (let ((?x85 (* 4.0 ?x424)))
 (let ((?x310 (* 4.0 (* x x b00 x00))))
 (let ((?x171 (* x x b)))
 (let ((?x84 (* (- 6.0) ?x171)))
 (let ((?x147 (* b b b b)))
 (let ((?x755 (* (/ 1.0 16.0) ?x147)))
 (let ((?x101 (* x b00 x00)))
 (let ((?x86 (* 4.0 ?x101)))
 (let ((?x100 (+ ?x893 r00 ?x78 ?x86 ?x755 ?x84 ?x310 ?x85 ?x432 ?x760 ?x1009 ?x168 ?x473 ?x633 ?x659 ?x177 ?x660 ?x649 ?x715 ?x83 ?x75 ?x693 ?x435 ?x1006)))
 (let ((?x1090 (* x x)))
 (let ((?x1106 (* 12.0 ?x1090)))
 (let ((?x988 (* (/ 1.0 4.0) (* ?x849 ?x849 ?x849 ?x976 ?x976 b b))))
 (let ((?x201 (* 8.0 (* x x x))))
 (let ((?x1105 (* 6.0 x)))
 (let ((?x1013 (+ ?x1105 ?x201 ?x988 ?x1106)))
 (let ((?x135 (* 0.0 ?x1013 ?x100)))
 (let ((?x88 (+ ?x893 r00 ?x78 ?x86 ?x84 ?x310 ?x85 ?x432 ?x83 ?x75)))
 (let ((?x272 (+ ?x755 ?x760 ?x1009 ?x168 ?x473 ?x633 ?x659 ?x177 ?x660 ?x649 ?x715 ?x693 ?x435)))
 (let ((?x97 (+ ?x1006 ?x272 ?x88)))
 (let ((?x758 (* ?x53 ?x53 ?x892)))
 (let ((?x762 (* ?x53 ?x892)))
 (let ((?x761 (* ?x53 1.0 ?x892)))
 (let ((?x652 (* 1.0 ?x892)))
 (let ((?x1010 (* ?x53 ?x53 ?x78)))
 (let ((?x632 (* ?x53 ?x78)))
 (let ((?x619 (* ?x53 1.0 ?x78)))
 (let ((?x657 (* 1.0 ?x78)))
 (let ((?x634 (* ?x53 ?x53 r00)))
 (let ((?x642 (* ?x53 r00)))
 (let ((?x641 (* ?x53 1.0 r00)))
 (let ((?x661 (* 1.0 r00)))
 (let ((?x645 (* ?x53 ?x53 ?x893)))
 (let ((?x663 (* ?x53 ?x893)))
 (let ((?x662 (* ?x53 1.0 ?x893)))
 (let ((?x692 (* 1.0 ?x893)))
 (let ((?x759 (+ ?x692 ?x662 ?x663 ?x645 ?x661 ?x641 ?x642 ?x634 ?x657 ?x619 ?x632 ?x1010 ?x652 ?x761 ?x762 ?x758)))
 (let ((?x115 (* (- 2.0) ?x171)))
 (let ((?x102 (* 2.0 ?x101)))
 (let ((?x426 (* 2.0 ?x424)))
 (let ((?x80 (+ ?x893 ?x892 ?x892 ?x115 r00 ?x426 ?x426 ?x432 ?x78 ?x102 ?x102 ?x310 ?x892 ?x115 ?x115 ?x75)))
 (let ((@x82 (monotonicity (rewrite (= ?x692 ?x893)) (rewrite (= ?x662 ?x892)) (rewrite (= ?x663 ?x892)) (rewrite (= ?x645 ?x115)) (rewrite (= ?x661 r00)) (rewrite (= ?x641 ?x426)) (rewrite (= ?x642 ?x426)) (rewrite (= ?x634 ?x432)) (rewrite (= ?x657 ?x78)) (rewrite (= ?x619 ?x102)) (rewrite (= ?x632 ?x102)) (rewrite (= ?x1010 ?x310)) (rewrite (= ?x652 ?x892)) (rewrite (= ?x761 ?x115)) (rewrite (= ?x762 ?x115)) (rewrite (= ?x758 ?x75)) (= ?x759 ?x80))))
 (let ((@x143 (trans (monotonicity (rewrite (= ?x900 ?x976)) (= ?x916 (* ?x849 ?x849 ?x976))) (rewrite (= (* ?x849 ?x849 ?x976) ?x759)) (= ?x916 ?x759))))
 (let ((@x94 (trans @x143 (trans @x82 (rewrite (= ?x80 ?x88)) (= ?x759 ?x88)) (= ?x916 ?x88))))
 (let ((?x748 (+ (* (- (/ 1.0 8.0)) (* (- (/ 1.0 2.0)) ?x147)) (* (- (/ 1.0 8.0)) (* 12.0 ?x493)) (* (- (/ 1.0 8.0)) (* (- 16.0) ?x513)) ?x168 (* (- (/ 1.0 8.0)) (* 6.0 ?x530)) (* (- (/ 1.0 8.0)) (* 12.0 ?x539)) (* (- (/ 1.0 8.0)) (* 8.0 ?x560)) ?x177 (* (- (/ 1.0 8.0)) (* 6.0 ?x570)) (* (- (/ 1.0 8.0)) (* 8.0 ?x601)) (* (- (/ 1.0 8.0)) (* (- 8.0) ?x715)) (* (- (/ 1.0 8.0)) (* (- 12.0) ?x971)) (* (- (/ 1.0 8.0)) (* (- 4.0) ?x998)))))
 (let ((?x699 (* (- 4.0) ?x998)))
 (let ((?x722 (* (- 12.0) ?x971)))
 (let ((?x716 (* (- 8.0) ?x715)))
 (let ((?x605 (* 8.0 ?x601)))
 (let ((?x729 (* 6.0 ?x570)))
 (let ((?x562 (* 8.0 ?x560)))
 (let ((?x727 (* 12.0 ?x539)))
 (let ((?x726 (* 6.0 ?x530)))
 (let ((?x725 (* (- 16.0) ?x513)))
 (let ((?x728 (* 12.0 ?x493)))
 (let ((?x985 (* (- (/ 1.0 2.0)) ?x147)))
 (let ((?x730 (+ ?x985 ?x728 ?x725 ?x516 ?x726 ?x727 ?x562 ?x564 ?x729 ?x605 ?x716 ?x722 ?x699)))
 (let ((?x735 (* (- (/ 1.0 8.0)) ?x730)))
 (let ((?x972 (* ?x53 ?x53 ?x53 ?x892 b b b)))
 (let ((?x997 (* ?x53 ?x53 ?x892 b b b)))
 (let ((?x990 (* ?x53 1.0 ?x53 ?x892 b b b)))
 (let ((?x991 (* ?x53 ?x892 b b b)))
 (let ((?x986 (* ?x53 ?x53 1.0 ?x892 b b b)))
 (let ((?x1081 (* ?x53 1.0 ?x892 b b b)))
 (let ((?x1082 (* ?x53 1.0 1.0 ?x892 b b b)))
 (let ((?x161 (* ?x892 b b b)))
 (let ((?x108 (* ?x53 ?x53 ?x53 ?x78 b b b)))
 (let ((?x109 (* ?x53 ?x53 ?x78 b b b)))
 (let ((?x110 (* ?x53 1.0 ?x53 ?x78 b b b)))
 (let ((?x638 (* ?x53 ?x78 b b b)))
 (let ((?x281 (* ?x53 ?x53 1.0 ?x78 b b b)))
 (let ((?x283 (* ?x53 1.0 ?x78 b b b)))
 (let ((?x289 (* ?x53 1.0 1.0 ?x78 b b b)))
 (let ((?x290 (* ?x78 b b b)))
 (let ((?x292 (* ?x53 ?x53 ?x53 r00 b b b)))
 (let ((?x743 (* ?x53 ?x53 r00 b b b)))
 (let ((?x744 (* ?x53 1.0 ?x53 r00 b b b)))
 (let ((?x751 (* ?x53 r00 b b b)))
 (let ((?x753 (* ?x53 ?x53 1.0 r00 b b b)))
 (let ((?x291 (* ?x53 1.0 r00 b b b)))
 (let ((?x293 (* ?x53 1.0 1.0 r00 b b b)))
 (let ((?x298 (* r00 b b b)))
 (let ((?x300 (* ?x53 ?x53 ?x53 ?x893 b b b)))
 (let ((?x335 (* ?x53 ?x53 ?x893 b b b)))
 (let ((?x338 (* ?x53 1.0 ?x53 ?x893 b b b)))
 (let ((?x344 (* ?x53 ?x893 b b b)))
 (let ((?x345 (* ?x53 ?x53 1.0 ?x893 b b b)))
 (let ((?x347 (* ?x53 1.0 ?x893 b b b)))
 (let ((?x479 (* ?x53 1.0 1.0 ?x893 b b b)))
 (let ((?x499 (* ?x893 b b b)))
 (let ((?x993 (+ ?x499 ?x479 ?x347 ?x345 ?x344 ?x338 ?x335 ?x300 ?x298 ?x293 ?x291 ?x753 ?x751 ?x744 ?x743 ?x292 ?x290 ?x289 ?x283 ?x281 ?x638 ?x110 ?x109 ?x108 ?x161 ?x1082 ?x1081 ?x986 ?x991 ?x990 ?x997 ?x972)))
 (let ((?x518 (* (- 4.0) ?x513)))
 (let ((?x504 (* (- 2.0) ?x971)))
 (let ((?x999 (* (- 1.0) ?x998)))
 (let ((?x584 (* 4.0 ?x493)))
 (let ((?x573 (* 2.0 ?x570)))
 (let ((?x545 (* 4.0 ?x539)))
 (let ((?x483 (* 2.0 ?x530)))
 (let ((?x723 (+ ?x985 ?x999 ?x999 ?x504 ?x999 ?x504 ?x504 ?x518 ?x516 ?x483 ?x483 ?x545 ?x483 ?x545 ?x545 ?x562 ?x564 ?x573 ?x573 ?x584 ?x573 ?x584 ?x584 ?x605 ?x999 ?x504 ?x504 ?x518 ?x504 ?x518 ?x518 ?x716)))
 (let ((@x608 (rewrite (= (* 8.0 (* x x x b00 x00 b b b)) ?x605))))
 (let ((@x599 (rewrite (= ?x108 (* 8.0 (* x x x b00 x00 b b b))))))
 (let ((@x588 (rewrite (= (* 4.0 (* x x b00 x00 b b b)) ?x584))))
 (let ((@x597 (rewrite (= ?x109 (* 4.0 (* x x b00 x00 b b b))))))
 (let ((@x494 (rewrite (= ?x110 (* 4.0 (* x x b00 x00 b b b))))))
 (let ((@x581 (rewrite (= ?x281 (* 4.0 (* x x b00 x00 b b b))))))
 (let ((@x575 (rewrite (= (* 2.0 (* x b00 x00 b b b)) ?x573))))
 (let ((@x492 (trans (rewrite (= ?x283 (* 2.0 (* x b00 x00 b b b)))) @x575 (= ?x283 ?x573))))
 (let ((@x572 (trans (rewrite (= ?x289 (* 2.0 (* x b00 x00 b b b)))) @x575 (= ?x289 ?x573))))
 (let ((@x565 (rewrite (= (* 8.0 (* x x x r00 b b b)) ?x562))))
 (let ((@x559 (rewrite (= ?x292 (* 8.0 (* x x x r00 b b b))))))
 (let ((@x543 (rewrite (= (* 4.0 (* x x r00 b b b)) ?x545))))
 (let ((@x553 (trans (rewrite (= ?x743 (* 4.0 (* x x r00 b b b)))) @x543 (= ?x743 ?x545))))
 (let ((@x551 (trans (rewrite (= ?x744 (* 4.0 (* x x r00 b b b)))) @x543 (= ?x744 ?x545))))
 (let ((@x541 (trans (rewrite (= ?x753 (* 4.0 (* x x r00 b b b)))) @x543 (= ?x753 ?x545))))
 (let ((@x532 (rewrite (= (* 2.0 (* x r00 b b b)) ?x483))))
 (let ((@x534 (trans (rewrite (= ?x291 (* 2.0 (* x r00 b b b)))) @x532 (= ?x291 ?x483))))
 (let ((@x526 (trans (rewrite (= ?x293 (* 2.0 (* x r00 b b b)))) @x532 (= ?x293 ?x483))))
 (let ((@x719 (monotonicity (rewrite (= ?x499 ?x985)) (rewrite (= ?x479 ?x999)) (rewrite (= ?x347 ?x999)) (rewrite (= ?x345 ?x504)) (rewrite (= ?x344 ?x999)) (rewrite (= ?x338 ?x504)) (rewrite (= ?x335 ?x504)) (rewrite (= ?x300 ?x518)) (rewrite (= ?x298 ?x516)) @x526 @x534 @x541 (rewrite (= ?x751 ?x483)) @x551 @x553 (trans @x559 @x565 (= ?x292 ?x562)) (rewrite (= ?x290 ?x564)) @x572 @x492 (trans @x581 @x588 (= ?x281 ?x584)) (rewrite (= ?x638 ?x573)) (trans @x494 @x588 (= ?x110 ?x584)) (trans @x597 @x588 (= ?x109 ?x584)) (trans @x599 @x608 (= ?x108 ?x605)) (rewrite (= ?x161 ?x999)) (rewrite (= ?x1082 ?x504)) (rewrite (= ?x1081 ?x504)) (rewrite (= ?x986 ?x518)) (rewrite (= ?x991 ?x504)) (rewrite (= ?x990 ?x518)) (rewrite (= ?x997 ?x518)) (rewrite (= ?x972 ?x716)) (= ?x993 ?x723))))
 (let ((@x416 (rewrite (= ?x900 ?x976))))
 (let ((@x996 (trans (monotonicity @x416 (= ?x909 (* ?x849 ?x849 ?x849 ?x976 b b b))) (rewrite (= (* ?x849 ?x849 ?x849 ?x976 b b b) ?x993)) (= ?x909 ?x993))))
 (let ((@x701 (trans @x996 (trans @x719 (rewrite (= ?x723 ?x730)) (= ?x993 ?x730)) (= ?x909 ?x730))))
 (let ((@x754 (trans (monotonicity @x701 (= ?x910 ?x735)) (rewrite (= ?x735 ?x748)) (= ?x910 ?x748))))
 (let ((@x99 (monotonicity (rewrite (= ?x538 ?x1006)) (trans @x754 (rewrite (= ?x748 ?x272)) (= ?x910 ?x272)) @x94 (= ?x915 ?x97))))
 (let ((?x1025 (+ 1.0 ?x1105 ?x201 ?x1106)))
 (let ((?x1048 (* ?x53 ?x53 ?x53)))
 (let ((?x1049 (* ?x53 ?x53)))
 (let ((?x1050 (* ?x53 1.0 ?x53)))
 (let ((?x1051 (* 1.0 ?x53)))
 (let ((?x1052 (* ?x53 ?x53 1.0)))
 (let ((?x1083 (* ?x53 1.0)))
 (let ((?x1086 (* ?x53 1.0 1.0)))
 (let ((?x980 (* 1.0 1.0)))
 (let ((?x1047 (+ ?x980 ?x1086 ?x1083 ?x1052 ?x1051 ?x1050 ?x1049 ?x1048)))
 (let ((?x1037 (* 4.0 ?x1090)))
 (let ((?x1027 (+ 1.0 ?x53 ?x53 ?x1037 ?x53 ?x1037 ?x1037 ?x201)))
 (let ((@x1020 (monotonicity (rewrite (= ?x980 1.0)) (rewrite (= ?x1086 ?x53)) (rewrite (= ?x1083 ?x53)) (rewrite (= ?x1052 ?x1037)) (rewrite (= ?x1051 ?x53)) (rewrite (= ?x1050 ?x1037)) (rewrite (= ?x1049 ?x1037)) (rewrite (= ?x1048 ?x201)) (= ?x1047 ?x1027))))
 (let ((@x1018 (trans (rewrite (= ?x954 ?x1047)) (trans @x1020 (rewrite (= ?x1027 ?x1025)) (= ?x1047 ?x1025)) (= ?x954 ?x1025))))
 (let ((@x1015 (monotonicity (rewrite (= ?x906 ?x988)) @x1018 (= ?x908 (+ (- 1.0) ?x988 ?x1025)))))
 (let ((?x940 (* (/ 1.0 2.0) b)))
 (let ((?x925 (+ ?x940 ?x717)))
 (let ((?x945 (+ ?x940 (* (/ 1.0 2.0) (* 2.0 ?x717)))))
 (let ((@x958 (rewrite (= (+ (* 1.0 b) (* ?x53 b)) (+ b (* 2.0 ?x717))))))
 (let ((@x939 (trans (rewrite (= ?x894 (+ (* 1.0 b) (* ?x53 b)))) @x958 (= ?x894 (+ b (* 2.0 ?x717))))))
 (let ((@x962 (trans (monotonicity @x939 (= ?x898 (* (/ 1.0 2.0) (+ b (* 2.0 ?x717))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x717))) ?x945)) (= ?x898 ?x945))))
 (let ((@x974 (monotonicity (trans @x962 (rewrite (= ?x945 ?x925)) (= ?x898 ?x925)) (= ?x899 (+ ?x892 ?x893 ?x925)))))
 (let ((@x144 (monotonicity (trans @x974 (rewrite (= (+ ?x892 ?x893 ?x925) 0.0)) (= ?x899 0.0)) (trans @x1015 (rewrite (= (+ (- 1.0) ?x988 ?x1025) ?x1013)) (= ?x908 ?x1013)) (trans @x99 (rewrite (= ?x97 ?x100)) (= ?x915 ?x100)) (= ?x917 ?x135))))
 (let ((@x690 (monotonicity (trans @x144 (rewrite (= ?x135 0.0)) $x918) (= $x918 (= 0.0 0.0)))))
 (let ((@x688 (monotonicity (trans @x690 (rewrite (= (= 0.0 0.0) true)) (= $x918 true)) (= $x920 (not true)))))
 (trans @x688 (rewrite (= (not true) false)) (= $x920 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x145 (trans (quant-intro (proof-bind ?x681) (= $x921 $x680)) (elim-unused (= $x680 false)) (= $x921 false))))
 (let (($x960 (exists ((b Real) (r Real) (x Real) )(! (let ((?x95 (* (- 1.0) r00)))
 (let ((?x151 (* (- (/ 1.0 2.0)) b)))
 (let ((?x78 (* b00 x00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x866 (+ ?x79 r ?x151 ?x95 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x816 (+ r ?x151)))
 (let ((?x53 (* 2.0 x)))
 (let ((?x849 (+ 1.0 ?x53)))
 (let ((?x935 (+ (* ?x849 ?x849 ?x849 ?x816 ?x816) (* (- (/ 1.0 8.0)) (* ?x849 ?x849 ?x849 ?x816 b b b)) (* ?x849 ?x849 ?x816))))
 (let ((?x954 (* ?x849 ?x849 ?x849)))
 (let ((?x941 (* (+ (- 1.0) (* (/ 1.0 4.0) (* ?x849 ?x849 ?x849 ?x816 ?x816 b b)) ?x954) ?x935 ?x866)))
 (let ((?x106 (* x b)))
 (let ((?x800 (+ ?x79 r ?x95 ?x106)))
 (let ((?x171 (* x x r)))
 (let ((?x174 (* 4.0 ?x171)))
 (let ((?x152 (* x x x r b b b)))
 (let ((?x160 (* (- 1.0) ?x152)))
 (let ((?x141 (* 8.0 (* x x x r r))))
 (let ((?x180 (+ ?x141 ?x160 ?x174)))
 (let ((?x201 (* 8.0 (* x x x))))
 (let ((?x197 (* 2.0 (* x x x r r b b))))
 (let ((?x204 (+ (- 1.0) ?x197 ?x201)))
 (and (= ?x800 0.0) (or (not (= (* ?x204 ?x180 ?x800) 0.0)) (not (= ?x941 0.0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x70 (exists ((b Real) (r Real) (x Real) )(! (let ((?x53 (* 2.0 x)))
 (let ((?x54 (+ ?x53 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x50 (- r ?x36)))
 (let ((?x24 (- 1.0)))
 (let ((?x59 (- (* ?x50 ?x50 ?x54 ?x54 ?x54) (* ?x36 ?x36 ?x36 ?x50 ?x54 ?x54 ?x54))))
 (let ((?x65 (* (+ (- (+ (* ?x24 b00 x00) ?x50) r00) (* ?x36 ?x54)) (+ ?x59 (* ?x50 ?x54 ?x54)) (+ ?x24 (* ?x36 ?x36 ?x50 ?x50 ?x54 ?x54 ?x54) (* ?x54 ?x54 ?x54)))))
 (let ((?x46 (+ ?x24 (* ?x36 ?x36 r r 2.0 x 2.0 x 2.0 x) (* 2.0 x 2.0 x 2.0 x))))
 (let ((?x41 (- (* r r 2.0 x 2.0 x 2.0 x) (* ?x36 ?x36 ?x36 r 2.0 x 2.0 x 2.0 x))))
 (let ((?x47 (* (+ (- (+ (* ?x24 b00 x00) r) r00) (* ?x36 2.0 x)) (+ ?x41 (* r 2.0 x 2.0 x)) ?x46)))
 (let (($x34 (= (+ (- (+ (* ?x24 b00 x00) r) r00) (* b x)) 0.0)))
 (and $x34 (or (not (= ?x47 0.0)) (not (= ?x65 0.0))))))))))))))) :qid k!28))
 ))
 (let ((?x827 (lambda ((b Real) (r Real) (x Real) )(let ((?x95 (* (- 1.0) r00)))
 (let ((?x151 (* (- (/ 1.0 2.0)) b)))
 (let ((?x78 (* b00 x00)))
 (let ((?x79 (* (- 1.0) ?x78)))
 (let ((?x866 (+ ?x79 r ?x151 ?x95 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x816 (+ r ?x151)))
 (let ((?x53 (* 2.0 x)))
 (let ((?x849 (+ 1.0 ?x53)))
 (let ((?x935 (+ (* ?x849 ?x849 ?x849 ?x816 ?x816) (* (- (/ 1.0 8.0)) (* ?x849 ?x849 ?x849 ?x816 b b b)) (* ?x849 ?x849 ?x816))))
 (let ((?x954 (* ?x849 ?x849 ?x849)))
 (let ((?x941 (* (+ (- 1.0) (* (/ 1.0 4.0) (* ?x849 ?x849 ?x849 ?x816 ?x816 b b)) ?x954) ?x935 ?x866)))
 (let ((?x106 (* x b)))
 (let ((?x800 (+ ?x79 r ?x95 ?x106)))
 (let ((?x171 (* x x r)))
 (let ((?x174 (* 4.0 ?x171)))
 (let ((?x152 (* x x x r b b b)))
 (let ((?x160 (* (- 1.0) ?x152)))
 (let ((?x141 (* 8.0 (* x x x r r))))
 (let ((?x180 (+ ?x141 ?x160 ?x174)))
 (let ((?x201 (* 8.0 (* x x x))))
 (let ((?x197 (* 2.0 (* x x x r r b b))))
 (let ((?x204 (+ (- 1.0) ?x197 ?x201)))
 (let (($x823 (and (= ?x800 0.0) (or (not (= (* ?x204 ?x180 ?x800) 0.0)) (not (= ?x941 0.0))))))
 (let ((?x54 (+ ?x53 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x50 (- r ?x36)))
 (let ((?x24 (- 1.0)))
 (let ((?x59 (- (* ?x50 ?x50 ?x54 ?x54 ?x54) (* ?x36 ?x36 ?x36 ?x50 ?x54 ?x54 ?x54))))
 (let ((?x65 (* (+ (- (+ (* ?x24 b00 x00) ?x50) r00) (* ?x36 ?x54)) (+ ?x59 (* ?x50 ?x54 ?x54)) (+ ?x24 (* ?x36 ?x36 ?x50 ?x50 ?x54 ?x54 ?x54) (* ?x54 ?x54 ?x54)))))
 (let ((?x46 (+ ?x24 (* ?x36 ?x36 r r 2.0 x 2.0 x 2.0 x) (* 2.0 x 2.0 x 2.0 x))))
 (let ((?x41 (- (* r r 2.0 x 2.0 x 2.0 x) (* ?x36 ?x36 ?x36 r 2.0 x 2.0 x 2.0 x))))
 (let ((?x47 (* (+ (- (+ (* ?x24 b00 x00) r) r00) (* ?x36 2.0 x)) (+ ?x41 (* r 2.0 x 2.0 x)) ?x46)))
 (let (($x34 (= (+ (- (+ (* ?x24 b00 x00) r) r00) (* b x)) 0.0)))
 (let (($x69 (and $x34 (or (not (= ?x47 0.0)) (not (= ?x65 0.0))))))
 (rewrite (= $x69 $x823)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x846 (mp (mp @x71 (quant-intro (proof-bind ?x827) (= $x70 $x960)) $x960) (rewrite (= $x960 $x921)) $x921)))
 (mp @x846 @x145 false))))))))))))

(:max-memory   17.68
 :memory       17.42
 :num-allocs   62694
 :num-checks   1
 :rlimit-count 1595
 :time         0.00
 :total-time   0.01)
