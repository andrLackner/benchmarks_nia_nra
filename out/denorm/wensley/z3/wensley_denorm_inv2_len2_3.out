unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x395 (to_real y!0)))
 (let ((?x389 (to_real b!2)))
 (let ((?x381 (to_real d!1)))
 (let ((?x308 (to_real a!3)))
 (let ((?x539 (* ?x308 ?x308 ?x308 ?x381 ?x381 ?x381 ?x389 ?x395)))
 (let ((?x746 (+ (* (/ 3.0 8.0) (* ?x308 ?x381 ?x381 ?x389 ?x389 ?x389 ?x395 ?x395)) (* (/ 1.0 8.0) (* ?x308 ?x308 ?x308 ?x381 ?x381 ?x389 ?x395 ?x395)) (* (/ 3.0 8.0) (* ?x308 ?x308 ?x381 ?x381 ?x381 ?x389 ?x389 ?x395)) (* (/ 3.0 8.0) (* ?x308 ?x308 ?x381 ?x381 ?x389 ?x389 ?x395 ?x395)) (* (/ 1.0 32.0) (* ?x381 ?x381 ?x381 ?x381 ?x389 ?x389 ?x389 ?x389)) (* (/ 1.0 8.0) (* ?x381 ?x381 ?x381 ?x389 ?x389 ?x389 ?x389 ?x395)) (* (/ 1.0 2.0) (* ?x308 ?x381)) (* (/ 1.0 8.0) (* ?x381 ?x381 ?x389 ?x389 ?x389 ?x389 ?x395 ?x395)) (* (/ 1.0 2.0) (* ?x381 ?x389)) (* (/ 3.0 32.0) (* ?x308 ?x381 ?x381 ?x381 ?x381 ?x389 ?x389 ?x389)) (* (/ 3.0 32.0) (* ?x308 ?x308 ?x381 ?x381 ?x381 ?x381 ?x389 ?x389)) (* (/ 1.0 32.0) (* ?x308 ?x308 ?x308 ?x381 ?x381 ?x381 ?x381 ?x389)) (* (/ 3.0 8.0) (* ?x308 ?x381 ?x381 ?x381 ?x389 ?x389 ?x389 ?x395)) (* (/ 1.0 8.0) ?x539))))
 (let (($x747 (>= ?x746 0.0)))
 (let (($x754 (not $x747)))
 (let ((?x545 (* (- (/ 1.0 8.0)) ?x539)))
 (let ((?x533 (* ?x308 ?x381 ?x381 ?x381 ?x389 ?x389 ?x389 ?x395)))
 (let ((?x331 (* (- (/ 3.0 8.0)) ?x533)))
 (let ((?x530 (* ?x308 ?x308 ?x308 ?x381 ?x381 ?x381 ?x381 ?x389)))
 (let ((?x329 (* (- (/ 1.0 32.0)) ?x530)))
 (let ((?x521 (* ?x308 ?x308 ?x381 ?x381 ?x381 ?x381 ?x389 ?x389)))
 (let ((?x529 (* (- (/ 3.0 32.0)) ?x521)))
 (let ((?x518 (* ?x308 ?x381 ?x381 ?x381 ?x381 ?x389 ?x389 ?x389)))
 (let ((?x525 (* (- (/ 3.0 32.0)) ?x518)))
 (let ((?x504 (* ?x381 ?x389)))
 (let ((?x517 (* (- (/ 1.0 2.0)) ?x504)))
 (let ((?x503 (* ?x381 ?x381 ?x389 ?x389 ?x389 ?x389 ?x395 ?x395)))
 (let ((?x341 (* (- (/ 1.0 8.0)) ?x503)))
 (let ((?x497 (* ?x308 ?x381)))
 (let ((?x323 (* (- (/ 1.0 2.0)) ?x497)))
 (let ((?x342 (* ?x381 ?x381 ?x381 ?x389 ?x389 ?x389 ?x389 ?x395)))
 (let ((?x536 (* (- (/ 1.0 8.0)) ?x342)))
 (let ((?x340 (* ?x381 ?x381 ?x381 ?x381 ?x389 ?x389 ?x389 ?x389)))
 (let ((?x523 (* (- (/ 1.0 32.0)) ?x340)))
 (let ((?x332 (* ?x308 ?x308 ?x381 ?x381 ?x389 ?x389 ?x395 ?x395)))
 (let ((?x553 (* (- (/ 3.0 8.0)) ?x332)))
 (let ((?x328 (* ?x308 ?x308 ?x381 ?x381 ?x381 ?x389 ?x389 ?x395)))
 (let ((?x347 (* (- (/ 3.0 8.0)) ?x328)))
 (let ((?x322 (* ?x308 ?x308 ?x308 ?x381 ?x381 ?x389 ?x395 ?x395)))
 (let ((?x511 (* (- (/ 1.0 8.0)) ?x322)))
 (let ((?x540 (* ?x308 ?x381 ?x381 ?x389 ?x389 ?x389 ?x395 ?x395)))
 (let ((?x547 (* (- (/ 3.0 8.0)) ?x540)))
 (let ((?x543 (+ ?x547 ?x511 ?x347 ?x553 ?x523 ?x536 ?x323 ?x341 ?x517 ?x525 ?x529 ?x329 ?x331 ?x545)))
 (let (($x544 (<= ?x543 0.0)))
 (let (($x751 (not $x544)))
 (let (($x333 (>= ?x543 0.0)))
 (let (($x711 (<= ?x746 0.0)))
 (let (($x716 (not $x711)))
 (let ((@x176 (hypothesis $x716)))
 (let ((?x249 (+ (* (/ 1.0 2.0) (* (to_real d00) ?x389)) (* (- (/ 1.0 2.0)) (* (to_real b00) ?x381)))))
 (let (($x155 (<= ?x249 0.0)))
 (let ((?x60 (to_real d00)))
 (let ((?x482 (* ?x60 ?x389)))
 (let ((?x346 (+ (* (- 1.0) (to_real (* d00 b!2))) ?x482)))
 (let (($x575 (<= ?x346 0.0)))
 (let (($x120 (= 0.0 ?x346)))
 (let ((@x334 (symm (commutativity (= $x120 (= ?x346 0.0))) (= (= ?x346 0.0) $x120))))
 (let ((@x297 (unit-resolution (hypothesis (not $x120)) (mp ((_ th-lemma arith) (= ?x346 0.0)) @x334 $x120) false)))
 (let ((@x566 (lemma @x297 $x120)))
 (let ((@x496 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x575)) @x566 $x575)))
 (let ((?x453 (* d00 b!2)))
 (let ((?x279 (+ ?x453 (* (- 1) (* b00 d!1)))))
 (let (($x514 (<= ?x279 0)))
 (let (($x515 (= 0 ?x279)))
 (let ((@x352 (symm (commutativity (= $x515 (= ?x279 0))) (= (= ?x279 0) $x515))))
 (let (($x302 (= ?x279 0)))
 (let ((?x559 (+ ?x511 ?x347 ?x553 ?x523 ?x536 ?x323 ?x341 ?x517 ?x525 ?x529 ?x329 ?x331 ?x545 ?x547)))
 (let ((?x562 (* (+ (* (/ 1.0 2.0) (* (to_real b00) ?x381)) (* (- (/ 1.0 2.0)) ?x482)) ?x559)))
 (let (($x502 (= ?x562 0.0)))
 (let (($x563 (not $x502)))
 (let ((?x505 (* (/ 1.0 16.0) (* (to_real b00) ?x308 ?x308 ?x308 ?x381 ?x381 ?x381 ?x389 ?x395 ?x395))))
 (let ((?x516 (+ ?x505 (* (/ 1.0 4.0) (* (to_real b00) ?x308 ?x381 ?x381)) (* (- (/ 1.0 4.0)) (* ?x60 ?x308 ?x381 ?x389)) (* (- (/ 1.0 16.0)) (* ?x60 ?x308 ?x308 ?x308 ?x381 ?x381 ?x389 ?x389 ?x395 ?x395)))))
 (let (($x513 (= ?x516 0.0)))
 (let (($x303 (or (not $x513) $x563)))
 (let ((?x252 (* (- 2) (* b!2 y!0))))
 (let ((?x392 (* a!3 d!1)))
 (let (($x338 (= (+ (* 2 (* y00 b!2)) ?x392 (* (- 1) (* a00 d!1)) ?x252) 0)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x318 (= (+ ?x35 ?x96 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x147 (and $x318 $x302 $x338 $x303)))
 (let ((?x443 (+ (* (- (/ 1.0 2.0)) (* ?x381 ?x308)) (* (- (/ 1.0 8.0)) (* ?x389 ?x381 ?x381 ?x308 ?x308 ?x308 ?x395 ?x395)) (* (- (/ 1.0 2.0)) (* ?x389 ?x381)) (* (- (/ 1.0 8.0)) (* ?x389 ?x389 ?x389 ?x389 ?x381 ?x381 ?x395 ?x395)) (* (- (/ 1.0 32.0)) (* ?x389 ?x389 ?x389 ?x389 ?x381 ?x381 ?x381 ?x381)) (* (- (/ 3.0 32.0)) (* ?x389 ?x389 ?x389 ?x381 ?x381 ?x381 ?x381 ?x308)) (* (- (/ 3.0 32.0)) (* ?x389 ?x389 ?x381 ?x381 ?x381 ?x381 ?x308 ?x308)) (* (- (/ 1.0 32.0)) (* ?x389 ?x381 ?x381 ?x381 ?x381 ?x308 ?x308 ?x308)) (* (- (/ 1.0 8.0)) (* ?x389 ?x389 ?x389 ?x389 ?x381 ?x381 ?x381 ?x395)) (* (- (/ 3.0 8.0)) (* ?x389 ?x389 ?x389 ?x381 ?x381 ?x381 ?x308 ?x395)) (* (- (/ 3.0 8.0)) (* ?x389 ?x389 ?x381 ?x381 ?x381 ?x308 ?x308 ?x395)) (* (- (/ 1.0 8.0)) (* ?x389 ?x381 ?x381 ?x381 ?x308 ?x308 ?x308 ?x395)) (* (- (/ 3.0 8.0)) (* ?x389 ?x389 ?x389 ?x381 ?x381 ?x308 ?x395 ?x395)) (* (- (/ 3.0 8.0)) (* ?x389 ?x389 ?x381 ?x381 ?x308 ?x308 ?x395 ?x395)))))
 (let ((?x277 (* (+ (* (- (/ 1.0 2.0)) (* ?x389 ?x60)) (* (/ 1.0 2.0) (* ?x381 (to_real b00)))) ?x443)))
 (let ((?x398 (* (- (/ 1.0 16.0)) (* ?x389 ?x381 ?x381 ?x381 (to_real b00) ?x308 ?x308 ?x308 ?x395 ?x395))))
 (let ((?x90 (+ (* (/ 1.0 4.0) (* ?x389 ?x60 ?x381 ?x308)) (* (- (/ 1.0 4.0)) (* ?x381 ?x381 (to_real b00) ?x308)) (* (/ 1.0 16.0) (* ?x389 ?x389 ?x60 ?x381 ?x381 ?x308 ?x308 ?x308 ?x395 ?x395)) ?x398)))
 (let (($x387 (= (+ ?x392 ?x252 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x370 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x96 (* 2 (* y!0 b00))) 0)))
 (let (($x447 (and $x370 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x387 (or (not (= ?x90 0.0)) (not (= ?x277 0.0))))))
 (let (($x205 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x162 (* (- (/ 1.0 2.0)) (* ?x62 ?x67))))
 (let ((?x657 (+ ?x162 (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69)) (* (- (/ 1.0 2.0)) (* ?x56 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x69 ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69)))))
 (let ((?x194 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x276 (* (- (/ 1.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x69 ?x69))))
 (let ((?x265 (* (/ 1.0 16.0) (* ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69))))
 (let ((?x278 (+ (* (/ 1.0 4.0) (* ?x56 (to_real d00) ?x62 ?x67)) (* (- (/ 1.0 4.0)) (* ?x62 ?x62 (to_real b00) ?x67)) ?x265 ?x276)))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x128 (= (+ ?x35 (* (- 1) (* a d00)) ?x96 (* 2 (* y b00))) 0)))
 (and $x128 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= ?x278 0.0)) (not (= (* ?x194 ?x657) 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let (($x375 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x235 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x506 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x178 (+ (* (- (/ 1.0 2.0)) (* ?x62 ?x506)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x506 ?x506 ?x506 ?x235 ?x235)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x162 (* (- (/ 1.0 2.0)) (* ?x62 ?x67))))
 (let ((?x126 (* ?x186 (+ ?x162 (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x62 ?x56 ?x67 ?x67 ?x67))))))
 (let (($x455 (or (not (= ?x126 0.0)) (not (= (* ?x186 ?x178) 0.0)))))
 (let ((?x368 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x420 (= ?x368 0)))
 (let ((?x586 (* d00 a)))
 (let ((?x609 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x586)))
 (and (= ?x609 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x420 $x455)))))))))))))))) :qid k!33))
 ))
 (let ((?x393 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x67 (to_real a)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x162 (* (- (/ 1.0 2.0)) (* ?x62 ?x67))))
 (let ((?x657 (+ ?x162 (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69)) (* (- (/ 1.0 2.0)) (* ?x56 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x69 ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x62 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x67 ?x67 ?x67 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x67 ?x69 ?x69)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67 ?x67 ?x69 ?x69)))))
 (let ((?x194 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x276 (* (- (/ 1.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x69 ?x69))))
 (let ((?x265 (* (/ 1.0 16.0) (* ?x56 ?x56 (to_real d00) ?x62 ?x62 ?x67 ?x67 ?x67 ?x69 ?x69))))
 (let ((?x278 (+ (* (/ 1.0 4.0) (* ?x56 (to_real d00) ?x62 ?x67)) (* (- (/ 1.0 4.0)) (* ?x62 ?x62 (to_real b00) ?x67)) ?x265 ?x276)))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x128 (= (+ ?x35 (* (- 1) (* a d00)) ?x96 (* 2 (* y b00))) 0)))
 (let (($x676 (and $x128 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= ?x278 0.0)) (not (= (* ?x194 ?x657) 0.0))))))
 (let ((?x235 (+ ?x69 (* (/ 1.0 2.0) ?x62))))
 (let ((?x506 (+ ?x67 ?x56)))
 (let ((?x178 (+ (* (- (/ 1.0 2.0)) (* ?x62 ?x506)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x506 ?x506 ?x506 ?x235 ?x235)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x126 (* ?x186 (+ ?x162 (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x62 ?x56 ?x67 ?x67 ?x67))))))
 (let (($x455 (or (not (= ?x126 0.0)) (not (= (* ?x186 ?x178) 0.0)))))
 (let ((?x368 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x420 (= ?x368 0)))
 (let ((?x586 (* d00 a)))
 (let (($x382 (= (+ (* 2 ?x95) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x586) 0)))
 (let (($x114 (and $x382 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x420 $x455)))
 (rewrite (= $x114 $x676)))))))))))))))))))))))))))))))
 ))
 (let (($x625 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x235 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x506 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x178 (+ (* (- (/ 1.0 2.0)) (* ?x62 ?x506)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x506 ?x506 ?x506 ?x235 ?x235)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x162 (* (- (/ 1.0 2.0)) (* ?x62 ?x67))))
 (let ((?x126 (* ?x186 (+ ?x162 (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x62 ?x56 ?x67 ?x67 ?x67))))))
 (let (($x455 (or (not (= ?x126 0.0)) (not (= (* ?x186 ?x178) 0.0)))))
 (let ((?x368 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x420 (= ?x368 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x600 (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x600 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x420 $x455)))))))))))))))))) :qid k!33))
 ))
 (let ((?x233 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x235 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x506 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x178 (+ (* (- (/ 1.0 2.0)) (* ?x62 ?x506)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x506 ?x506 ?x506 ?x235 ?x235)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x162 (* (- (/ 1.0 2.0)) (* ?x62 ?x67))))
 (let ((?x126 (* ?x186 (+ ?x162 (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x62 ?x56 ?x67 ?x67 ?x67))))))
 (let (($x455 (or (not (= ?x126 0.0)) (not (= (* ?x186 ?x178) 0.0)))))
 (let ((?x368 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x420 (= ?x368 0)))
 (let ((?x586 (* d00 a)))
 (let ((?x609 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x586)))
 (let (($x114 (and (= ?x609 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x420 $x455)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x289 (and (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) ?x586)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x420 $x455)))
 (rewrite (= $x289 $x114)))))))))))))))))))))))
 ))
 (let (($x87 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x73 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x69 (to_real y)))
 (let ((?x79 (+ ?x69 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (to_real (+ a b))))
 (let ((?x81 (- (* (to_real (- 1)) ?x77 ?x63) (* ?x77 ?x77 ?x77 ?x58 ?x63 ?x63 ?x79 ?x79))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x67 (to_real a)))
 (let ((?x71 (- (* (to_real (- 1)) ?x67 ?x63) (* ?x67 ?x67 ?x67 ?x58 ?x63 ?x63 ?x69 ?x69))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x71) ?x73)) (not (= (* ?x66 ?x81) ?x73))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x663 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x235 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x506 (+ ?x67 ?x56)))
 (let ((?x62 (to_real d)))
 (let ((?x178 (+ (* (- (/ 1.0 2.0)) (* ?x62 ?x506)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x56 ?x506 ?x506 ?x506 ?x235 ?x235)))))
 (let ((?x186 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x162 (* (- (/ 1.0 2.0)) (* ?x62 ?x67))))
 (let ((?x126 (* ?x186 (+ ?x162 (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x62 ?x56 ?x67 ?x67 ?x67))))))
 (let (($x455 (or (not (= ?x126 0.0)) (not (= (* ?x186 ?x178) 0.0)))))
 (let ((?x368 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x420 (= ?x368 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x600 (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x289 (and $x600 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x420 $x455)))
 (let ((?x73 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x79 (+ ?x69 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (to_real (+ a b))))
 (let ((?x81 (- (* (to_real (- 1)) ?x77 ?x63) (* ?x77 ?x77 ?x77 ?x58 ?x63 ?x63 ?x79 ?x79))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x71 (- (* (to_real (- 1)) ?x67 ?x63) (* ?x67 ?x67 ?x67 ?x58 ?x63 ?x63 ?x69 ?x69))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x86 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x71) ?x73)) (not (= (* ?x66 ?x81) ?x73))))))
 (rewrite (= $x86 $x289)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x620 (mp (mp @x88 (quant-intro (proof-bind ?x663) (= $x87 $x625)) $x625) (rewrite (= $x625 $x625)) $x625)))
 (let ((@x548 (mp (mp @x620 (quant-intro (proof-bind ?x233) (= $x625 $x375)) $x375) (quant-intro (proof-bind ?x393) (= $x375 $x205)) $x205)))
 (let ((@x512 (mp (mp~ @x548 (sk (~ $x205 $x447)) $x447) (rewrite (= $x447 $x147)) $x147)))
 (let ((@x215 (mp (and-elim @x512 $x302) @x352 $x515)))
 (let ((@x218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x515) $x514)) @x215 $x514)))
 (let ((?x64 (to_real b00)))
 (let ((?x458 (* ?x64 ?x381)))
 (let ((?x156 (+ ?x458 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x152 (>= ?x156 0.0)))
 (let ((@x204 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x156 0.0)) $x152)) ((_ th-lemma arith) (= ?x156 0.0)) $x152)))
 (let ((@x264 (lemma ((_ th-lemma arith) @x204 @x218 (hypothesis (not $x155)) (hypothesis $x575) false) (or (not $x575) $x155))))
 (let ((@x259 (unit-resolution @x264 @x496 $x155)))
 (let (($x534 (<= ?x562 0.0)))
 (let (($x788 (not $x534)))
 (let (($x343 (>= ?x562 0.0)))
 (let (($x695 (not $x343)))
 (let ((@x696 (hypothesis $x695)))
 (let ((@x698 (unit-resolution ((_ th-lemma arith) (or (not $x155) $x747 $x343)) @x696 @x259 (hypothesis $x754) false)))
 (let ((@x756 (lemma ((_ th-lemma arith) (hypothesis $x751) (hypothesis $x747) false) (or $x754 $x544))))
 (let ((@x769 (unit-resolution @x756 (unit-resolution (lemma @x698 (or $x747 $x343)) @x696 $x747) $x544)))
 (let (($x301 (>= ?x249 0.0)))
 (let (($x541 (>= ?x346 0.0)))
 (let ((@x230 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x541)) @x566 $x541)))
 (let (($x524 (>= ?x279 0)))
 (let ((@x200 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x515) $x524)) @x215 $x524)))
 (let ((?x459 (* b00 d!1)))
 (let ((?x627 (to_real ?x459)))
 (let ((?x546 (+ (* (- 1.0) ?x458) ?x627)))
 (let (($x487 (>= ?x546 0.0)))
 (let (($x557 (= 0.0 ?x546)))
 (let ((@x139 (symm (commutativity (= $x557 (= ?x546 0.0))) (= (= ?x546 0.0) $x557))))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x487)) (mp ((_ th-lemma arith) (= ?x546 0.0)) @x139 $x557) $x487)))
 (let ((@x660 (lemma ((_ th-lemma arith) @x255 @x200 (hypothesis (not $x301)) @x230 false) $x301)))
 (let ((@x292 (unit-resolution ((_ th-lemma arith) (or (not $x301) $x711 $x343)) @x696 @x660 @x176 false)))
 (let ((@x718 (lemma ((_ th-lemma arith) (hypothesis (not $x333)) (hypothesis $x711) false) (or $x716 $x333))))
 (let ((@x771 (unit-resolution @x718 (unit-resolution (lemma @x292 (or $x711 $x343)) @x696 $x711) $x333)))
 (let (($x107 (= ?x543 0.0)))
 (let (($x719 (not $x107)))
 (let (($x526 (= 0.0 ?x516)))
 (let (($x327 (>= ?x516 0.0)))
 (let ((@x345 (unit-resolution ((_ th-lemma arith) (or $x327 (not $x524) (not $x575) (not $x514) (not $x541))) @x218 @x200 (hypothesis (not $x327)) @x496 @x230 false)))
 (let (($x532 (<= ?x516 0.0)))
 (let ((@x572 (unit-resolution ((_ th-lemma arith) (or (not $x514) (not $x524) $x532 (not $x541) (not $x575))) @x218 @x200 (hypothesis (not $x532)) @x496 @x230 false)))
 (let ((@x759 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x526 (not $x532) (not $x327))) (lemma @x572 $x532) (lemma @x345 $x327) $x526)))
 (let ((@x763 (unit-resolution (and-elim @x512 $x303) (mp @x759 (commutativity (= $x526 $x513)) $x513) $x563)))
 (let ((@x765 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x719 $x502)) @x763 $x719) (symm (hypothesis (= 0.0 ?x543)) $x107) false)))
 (let ((@x775 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x543) $x751 (not $x333))) (lemma @x765 (not (= 0.0 ?x543))) (or $x751 (not $x333)))))
 (let (($x535 (= 0.0 ?x562)))
 (let (($x795 (not $x535)))
 (let ((@x797 (monotonicity (symm (commutativity (= $x535 $x502)) (= $x502 $x535)) (= $x563 $x795))))
 (let ((@x800 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x535 $x788 $x695)) (mp @x763 @x797 $x795) (or $x788 $x695))))
 (let ((@x801 (unit-resolution @x800 (lemma (unit-resolution @x775 @x771 @x769 false) $x343) $x788)))
 (let ((@x802 (unit-resolution ((_ th-lemma arith) (or (not $x155) $x711 $x534)) @x801 @x259 @x176 false)))
 (let ((@x809 (unit-resolution @x775 (unit-resolution @x718 (lemma @x802 $x711) $x333) $x751)))
 (unit-resolution ((_ th-lemma arith) (or (not $x301) $x747 $x534)) @x801 @x660 (unit-resolution @x756 @x809 $x754) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       90
 :arith-eq-adapter                84
 :arith-bound-propagations-cheap  108
 :arith-bound-propagations-lp     10
 :arith-conflicts                 241
 :arith-diseq                     113
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 16
 :arith-grobner-calls             10
 :arith-grobner-conflicts         2
 :arith-horner-calls              10
 :arith-horner-cross-nested-forms 34
 :arith-lower                     146
 :arith-make-feasible             116
 :arith-max-columns               73
 :arith-max-rows                  21
 :arith-nla-explanations          150
 :arith-nla-lemmas                232
 :arith-patches                   16
 :arith-patches-success           16
 :arith-propagations              108
 :arith-upper                     192
 :conflicts                       27
 :decisions                       279
 :del-clause                      239
 :final-checks                    73
 :max-memory                      5.16
 :memory                          3.16
 :minimized-lits                  2
 :mk-bool-var                     495
 :mk-clause                       402
 :num-allocs                      16698874
 :num-checks                      1
 :propagations                    296
 :rlimit-count                    9864
 :time                            0.07
 :total-time                      0.07)
