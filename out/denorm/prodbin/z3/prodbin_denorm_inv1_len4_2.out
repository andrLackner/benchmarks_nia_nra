unsat
((set-logic NIA)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x372 (+ (* (- 1.0) (to_real (* x00 y00))) ?x110)))
 (let (($x197 (>= ?x372 0.0)))
 (let ((?x130 (to_real x!2)))
 (let ((?x129 (to_real y!1)))
 (let ((?x445 (* ?x129 ?x130)))
 (let ((?x335 (+ (* (- 1.0) (to_real (* y!1 x!2))) ?x445)))
 (let (($x439 (>= ?x335 0.0)))
 (let (($x133 (= 0.0 ?x335)))
 (let ((@x408 (symm (commutativity (= $x133 (= ?x335 0.0))) (= (= ?x335 0.0) $x133))))
 (let (($x287 (= ?x335 0.0)))
 (let ((@x316 (lemma (unit-resolution ((_ th-lemma arith) $x287) (hypothesis (not $x287)) false) $x287)))
 (let ((@x168 ((_ th-lemma arith triangle-eq) (or (not $x133) $x439))))
 (let ((?x83 (* x00 y00)))
 (let ((?x404 (+ z00 ?x83 (* (- 1) z!0) (* (- 1) (* y!1 x!2)))))
 (let (($x416 (<= ?x404 0)))
 (let (($x214 (= 0 ?x404)))
 (let ((@x351 (symm (commutativity (= $x214 (= ?x404 0))) (= (= ?x404 0) $x214))))
 (let (($x315 (= ?x404 0)))
 (let ((?x320 (* ?x130 ?x130 ?x130 ?x130)))
 (let ((?x131 (* 2.0 (* ?x130 ?x130 ?x130 (to_real z!0)))))
 (let ((?x413 (to_real z!0)))
 (let ((?x210 (* ?x130 ?x130 ?x413 ?x413)))
 (let ((?x415 (+ ?x130 ?x210 (* (- 2.0) (* ?x129 ?x130 ?x130 ?x130 ?x130)) (* ?x129 ?x129 ?x130 ?x130 ?x130 ?x130) (* (- 4.0) (* ?x129 ?x130 ?x130 ?x130 ?x413)) (* 2.0 (* ?x129 ?x129 ?x130 ?x130 ?x130 ?x413)) (* (- 2.0) (* ?x129 ?x130 ?x130 ?x413 ?x413)) ?x131 ?x320 (* (- 1.0) ?x445) (* ?x129 ?x129 ?x130 ?x130 ?x413 ?x413))))
 (let (($x251 (= (* ?x415 (+ (* (- 1.0) (to_real z00)) (* (- 1.0) ?x110) ?x413 ?x445)) 0.0)))
 (let (($x310 (not $x251)))
 (let ((?x343 (+ (* (to_real z00) ?x129 ?x130) (* (- 1.0) (* (to_real z00) ?x129 ?x129 ?x130 ?x130 ?x413 ?x413)) (* (- 1.0) (* ?x105 ?x109 ?x129 ?x129 ?x130 ?x130 ?x413 ?x413)) (* (- 1.0) (* ?x129 ?x130 ?x413)) (* ?x129 ?x129 ?x130 ?x130 ?x413 ?x413 ?x413) (* ?x129 ?x129 ?x129 ?x130 ?x130 ?x130 ?x413 ?x413) (* ?x105 ?x109 ?x129 ?x130) (* (- 1.0) (* ?x129 ?x129 ?x130 ?x130)))))
 (let (($x382 (= ?x343 0.0)))
 (let (($x306 (not $x382)))
 (let (($x388 (or $x306 $x310)))
 (let (($x477 (and $x315 $x388)))
 (let ((?x113 (+ (* ?x130 ?x413 ?x129) (* (- 1.0) (* ?x130 (to_real z00) ?x129)) (* (- 1.0) (* ?x130 ?x129 ?x105 ?x109)) (* ?x130 ?x130 ?x129 ?x129) (* (- 1.0) (* ?x130 ?x130 ?x413 ?x413 ?x413 ?x129 ?x129)) (* ?x130 ?x130 ?x413 ?x413 (to_real z00) ?x129 ?x129) (* ?x130 ?x130 ?x413 ?x413 ?x129 ?x129 ?x105 ?x109) (* (- 1.0) (* ?x130 ?x130 ?x130 ?x413 ?x413 ?x129 ?x129 ?x129)))))
 (let ((?x291 (+ ?x130 (* (- 1.0) (* ?x130 ?x129)) ?x320 (* (- 2.0) (* ?x130 ?x130 ?x130 ?x130 ?x129)) (* ?x130 ?x130 ?x130 ?x130 ?x129 ?x129) ?x131 (* (- 4.0) (* ?x130 ?x130 ?x130 ?x413 ?x129)) (* 2.0 (* ?x130 ?x130 ?x130 ?x413 ?x129 ?x129)) ?x210 (* (- 2.0) (* ?x130 ?x130 ?x413 ?x413 ?x129)) (* ?x130 ?x130 ?x413 ?x413 ?x129 ?x129))))
 (let ((?x545 (* ?x291 (+ ?x413 (* (- 1.0) (to_real z00)) (* (- 1.0) ?x110) (* ?x130 ?x129)))))
 (let (($x98 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x83)) 0) (or (not (= ?x545 0.0)) (not (= ?x113 0.0))))))
 (let (($x309 (exists ((x Int) (y Int) (z Int) )(! (let ((?x61 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x534 (+ (* ?x43 ?x46 ?x61) (* (- 1.0) (* ?x43 (to_real z00) ?x61)) (* (- 1.0) (* ?x43 ?x61 (to_real x00) (to_real y00))) (* ?x43 ?x43 ?x61 ?x61) (* (- 1.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x61 ?x61)) (* ?x43 ?x43 ?x46 ?x46 (to_real z00) ?x61 ?x61) (* ?x43 ?x43 ?x46 ?x46 ?x61 ?x61 (to_real x00) (to_real y00)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x61 ?x61 ?x61)))))
 (let (($x530 (not (= ?x534 0.0))))
 (let ((?x227 (* ?x43 ?x61)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x466 (+ ?x43 (* (- 1.0) ?x227) (* ?x43 ?x43 ?x43 ?x43) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x61)) (* ?x43 ?x43 ?x43 ?x43 ?x61 ?x61) (* 2.0 (* ?x43 ?x43 ?x43 ?x46)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x61)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x61 ?x61)) (* ?x43 ?x43 ?x46 ?x46) (* (- 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x61)) (* ?x43 ?x43 ?x46 ?x46 ?x61 ?x61))))
 (let (($x111 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x111 (or (not (= (* ?x466 (+ ?x46 ?x196 ?x116 ?x227)) 0.0)) $x530)))))))))))))))) :qid k!28))
 ))
 (let (($x325 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x61 (to_real y)))
 (let ((?x294 (* ?x61 ?x43)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x438 (* (+ (* (- 1.0) ?x294) (* ?x46 ?x46 ?x61 ?x61 ?x43 ?x43)) (+ ?x116 ?x294 ?x46 ?x196))))
 (let ((?x350 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x61)))) ?x46 ?x43 ?x196)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x331 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x376 (+ ?x46 ?x43)))
 (let ((?x402 (+ (* (- 2.0) (* ?x43 ?x331)) (* 4.0 (* ?x43 ?x43 ?x376 ?x376 ?x331 ?x331)))))
 (let (($x444 (or (not (= (* ?x402 ?x350) 0.0)) (not (= ?x438 0.0)))))
 (let (($x360 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x360 $x444))))))))))))))))))) :qid k!28))
 ))
 (let ((?x357 (lambda ((x Int) (y Int) (z Int) )(let ((?x61 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x534 (+ (* ?x43 ?x46 ?x61) (* (- 1.0) (* ?x43 (to_real z00) ?x61)) (* (- 1.0) (* ?x43 ?x61 (to_real x00) (to_real y00))) (* ?x43 ?x43 ?x61 ?x61) (* (- 1.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x61 ?x61)) (* ?x43 ?x43 ?x46 ?x46 (to_real z00) ?x61 ?x61) (* ?x43 ?x43 ?x46 ?x46 ?x61 ?x61 (to_real x00) (to_real y00)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x61 ?x61 ?x61)))))
 (let (($x530 (not (= ?x534 0.0))))
 (let ((?x227 (* ?x43 ?x61)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x466 (+ ?x43 (* (- 1.0) ?x227) (* ?x43 ?x43 ?x43 ?x43) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x61)) (* ?x43 ?x43 ?x43 ?x43 ?x61 ?x61) (* 2.0 (* ?x43 ?x43 ?x43 ?x46)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x61)) (* 2.0 (* ?x43 ?x43 ?x43 ?x46 ?x61 ?x61)) (* ?x43 ?x43 ?x46 ?x46) (* (- 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x61)) (* ?x43 ?x43 ?x46 ?x46 ?x61 ?x61))))
 (let (($x111 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x541 (and $x111 (or (not (= (* ?x466 (+ ?x46 ?x196 ?x116 ?x227)) 0.0)) $x530))))
 (let ((?x438 (* (+ (* (- 1.0) (* ?x61 ?x43)) (* ?x46 ?x46 ?x61 ?x61 ?x43 ?x43)) (+ ?x116 (* ?x61 ?x43) ?x46 ?x196))))
 (let ((?x350 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x61)))) ?x46 ?x43 ?x196)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x331 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x376 (+ ?x46 ?x43)))
 (let ((?x402 (+ (* (- 2.0) (* ?x43 ?x331)) (* 4.0 (* ?x43 ?x43 ?x376 ?x376 ?x331 ?x331)))))
 (let (($x444 (or (not (= (* ?x402 ?x350) 0.0)) (not (= ?x438 0.0)))))
 (let (($x360 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x281 (and $x360 $x444)))
 (rewrite (= $x281 $x541)))))))))))))))))))))))))))
 ))
 (let (($x349 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x61 (to_real y)))
 (let ((?x294 (* ?x61 ?x43)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x438 (* (+ (* (- 1.0) ?x294) (* ?x46 ?x46 ?x61 ?x61 ?x43 ?x43)) (+ ?x116 ?x294 ?x46 ?x196))))
 (let ((?x350 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x61)))) ?x46 ?x43 ?x196)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x331 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x376 (+ ?x46 ?x43)))
 (let ((?x402 (+ (* (- 2.0) (* ?x43 ?x331)) (* 4.0 (* ?x43 ?x43 ?x376 ?x376 ?x331 ?x331)))))
 (let (($x444 (or (not (= (* ?x402 ?x350) 0.0)) (not (= ?x438 0.0)))))
 (let (($x144 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x144 $x444))))))))))))))))))) :qid k!28))
 ))
 (let ((?x155 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x61 (to_real y)))
 (let ((?x294 (* ?x61 ?x43)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x438 (* (+ (* (- 1.0) ?x294) (* ?x46 ?x46 ?x61 ?x61 ?x43 ?x43)) (+ ?x116 ?x294 ?x46 ?x196))))
 (let ((?x350 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x61)))) ?x46 ?x43 ?x196)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x331 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x376 (+ ?x46 ?x43)))
 (let ((?x402 (+ (* (- 2.0) (* ?x43 ?x331)) (* 4.0 (* ?x43 ?x43 ?x376 ?x376 ?x331 ?x331)))))
 (let (($x444 (or (not (= (* ?x402 ?x350) 0.0)) (not (= ?x438 0.0)))))
 (let (($x360 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x281 (and $x360 $x444)))
 (let (($x144 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x369 (and $x144 $x444)))
 (rewrite (= $x369 $x281))))))))))))))))))))))))
 ))
 (let (($x75 (exists ((x Int) (y Int) (z Int) )(! (let ((?x53 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x61 (to_real y)))
 (let ((?x62 (/ ?x61 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x69 (+ (* (to_real (- 1)) ?x41 ?x43 ?x62) (* ?x53 ?x62 ?x62 ?x62 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x62 ?x62 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x65 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x62) ?x46) ?x48)))
 (let ((?x54 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (+ (* (to_real (- 1)) ?x41 ?x43 ?x42) (* ?x53 ?x42 ?x42 ?x42 ?x54) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x54 ?x54))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x60 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x57) ?x53))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x60 (not (= (* ?x65 ?x69) ?x53)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x333 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x61 (to_real y)))
 (let ((?x294 (* ?x61 ?x43)))
 (let ((?x109 (to_real y00)))
 (let ((?x105 (to_real x00)))
 (let ((?x110 (* ?x105 ?x109)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x438 (* (+ (* (- 1.0) ?x294) (* ?x46 ?x46 ?x61 ?x61 ?x43 ?x43)) (+ ?x116 ?x294 ?x46 ?x196))))
 (let ((?x350 (+ ?x116 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x61)))) ?x46 ?x43 ?x196)))
 (let ((?x161 (* (/ 1.0 2.0) ?x61)))
 (let ((?x331 (+ (- (/ 1.0 2.0)) ?x161)))
 (let ((?x376 (+ ?x46 ?x43)))
 (let ((?x402 (+ (* (- 2.0) (* ?x43 ?x331)) (* 4.0 (* ?x43 ?x43 ?x376 ?x376 ?x331 ?x331)))))
 (let (($x444 (or (not (= (* ?x402 ?x350) 0.0)) (not (= ?x438 0.0)))))
 (let (($x144 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x369 (and $x144 $x444)))
 (let ((?x53 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x62 (/ ?x61 ?x41)))
 (let ((?x69 (+ (* (to_real (- 1)) ?x41 ?x43 ?x62) (* ?x53 ?x62 ?x62 ?x62 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x62 ?x62 ?x46 ?x46))))
 (let ((?x65 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x62) ?x46) ?x48)))
 (let ((?x54 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x57 (+ (* (to_real (- 1)) ?x41 ?x43 ?x42) (* ?x53 ?x42 ?x42 ?x42 ?x54) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x54 ?x54))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x60 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x57) ?x53))))
 (let (($x74 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x60 (not (= (* ?x65 ?x69) ?x53))))))
 (rewrite (= $x74 $x369)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x76 (asserted $x75)))
 (let ((@x363 (mp (mp @x76 (quant-intro (proof-bind ?x333) (= $x75 $x349)) $x349) (rewrite (= $x349 $x349)) $x349)))
 (let ((@x532 (mp (mp @x363 (quant-intro (proof-bind ?x155) (= $x349 $x325)) $x325) (quant-intro (proof-bind ?x357) (= $x325 $x309)) $x309)))
 (let ((@x341 (mp (mp~ @x532 (sk (~ $x309 $x98)) $x98) (rewrite (= $x98 $x477)) $x477)))
 (let ((@x401 (mp (and-elim @x341 $x315) @x351 $x214)))
 (let ((@x506 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x214) $x416)) @x401 $x416)))
 (let ((?x48 (to_real z00)))
 (let ((?x196 (* (- 1.0) ?x48)))
 (let ((?x116 (* (- 1.0) ?x110)))
 (let ((?x167 (+ ?x116 ?x413 ?x445 ?x196)))
 (let (($x397 (<= ?x167 0.0)))
 (let (($x390 (<= ?x335 0.0)))
 (let ((@x354 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x133) $x390)) (mp ((_ th-lemma arith) $x287) @x408 $x133) $x390)))
 (let (($x285 (>= ?x404 0)))
 (let ((@x221 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x214) $x285)) @x401 $x285)))
 (let (($x225 (= 0.0 ?x372)))
 (let ((@x417 (symm (commutativity (= $x225 (= ?x372 0.0))) (= (= ?x372 0.0) $x225))))
 (let (($x373 (= ?x372 0.0)))
 (let ((@x145 ((_ th-lemma arith) $x373)))
 (let ((@x427 ((_ th-lemma arith triangle-eq) (or (not $x225) $x197))))
 (let ((@x426 ((_ th-lemma arith) (hypothesis (not $x397)) (unit-resolution @x427 (mp @x145 @x417 $x225) $x197) @x221 @x354 false)))
 (let ((@x307 (lemma @x426 $x397)))
 (let ((@x88 ((_ th-lemma arith) @x307 @x506 (unit-resolution @x168 (mp @x316 @x408 $x133) $x439) (hypothesis (not $x197)) false)))
 (let (($x224 (<= ?x372 0.0)))
 (let ((@x317 (unit-resolution (hypothesis (not $x225)) (symm (hypothesis $x373) $x225) false)))
 (let ((@x141 (unit-resolution (lemma @x317 (or (not $x373) $x225)) (lemma (unit-resolution @x145 (hypothesis (not $x373)) false) $x373) $x225)))
 (let ((@x146 ((_ th-lemma arith triangle-eq) (or (not $x225) $x224))))
 (let (($x475 (>= ?x343 0.0)))
 (let (($x137 (not $x475)))
 (let (($x394 (= 0.0 ?x343)))
 (let (($x123 (not $x394)))
 (let ((@x135 (monotonicity (symm (commutativity (= $x394 $x382)) (= $x382 $x394)) (= $x306 $x123))))
 (let (($x359 (= ?x167 0.0)))
 (let (($x368 (>= ?x167 0.0)))
 (let ((?x366 (to_real ?x83)))
 (let ((?x440 (+ ?x366 ?x116)))
 (let (($x121 (>= ?x440 0.0)))
 (let (($x124 (= 0.0 ?x440)))
 (let ((@x358 (symm (commutativity (= $x124 (= ?x440 0.0))) (= (= ?x440 0.0) $x124))))
 (let ((@x280 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x124) $x121)) (mp ((_ th-lemma arith) (= ?x440 0.0)) @x358 $x124) $x121)))
 (let ((@x512 ((_ th-lemma arith) @x280 (hypothesis (not $x368)) @x506 (unit-resolution @x168 (mp (hypothesis $x287) @x408 $x133) $x439) false)))
 (let ((@x432 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x359 (not $x397) (not $x368))) @x307 (unit-resolution (lemma @x512 (or (not $x287) $x368)) @x316 $x368) $x359)))
 (let (($x143 (or (not $x359) $x251)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith) $x143) (hypothesis $x310) (hypothesis $x359) false)))
 (let ((@x448 (unit-resolution (and-elim @x341 $x388) (unit-resolution (lemma @x152 $x143) @x432 $x251) $x306)))
 (let (($x385 (<= ?x343 0.0)))
 (let ((@x234 (unit-resolution ((_ th-lemma arith) (or (not $x197) $x385 (not $x224) (not $x285) (not $x416))) @x506 @x221 (hypothesis (not $x385)) (unit-resolution @x146 (hypothesis $x225) $x224) (unit-resolution @x427 (hypothesis $x225) $x197) false)))
 (let ((@x158 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x394 (not $x385) $x137)) (unit-resolution (lemma @x234 (or (not $x225) $x385)) @x141 $x385) (or $x394 $x137))))
 (unit-resolution ((_ th-lemma arith) (or (not $x197) $x475 (not $x224) (not $x285) (not $x416))) @x506 @x221 (unit-resolution @x158 (mp @x448 @x135 $x123) $x137) (unit-resolution @x146 @x141 $x224) (lemma @x88 $x197) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      34
 :arith-eq-adapter               30
 :arith-bound-propagations-cheap 16
 :arith-conflicts                25
 :arith-diseq                    31
 :arith-gcd-calls                3
 :arith-grobner-calls            3
 :arith-grobner-conflicts        2
 :arith-horner-calls             3
 :arith-lower                    25
 :arith-make-feasible            26
 :arith-max-columns              55
 :arith-max-rows                 15
 :arith-nla-explanations         82
 :arith-nla-lemmas               22
 :arith-patches                  3
 :arith-patches-success          3
 :arith-propagations             16
 :arith-upper                    27
 :conflicts                      10
 :decisions                      48
 :del-clause                     109
 :final-checks                   21
 :max-memory                     4.14
 :memory                         3.10
 :mk-bool-var                    114
 :mk-clause                      126
 :num-allocs                     1840720
 :num-checks                     1
 :propagations                   62
 :rlimit-count                   3760
 :time                           0.01
 :total-time                     0.02)
