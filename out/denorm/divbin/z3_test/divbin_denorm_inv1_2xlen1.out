unsat
((set-logic NRA)
(proof
(let (($x82 (exists ((b Real) (x Real) )(! (let ((?x98 (* (- (/ 1.0 2.0)) b)))
 (let ((?x94 (* x b)))
 (let ((?x168 (* (- 1.0) ?x94)))
 (let ((?x62 (* b00 x00)))
 (let ((?x185 (+ ?x62 r00 ?x168 ?x98)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x110 (* ?x183 b)))
 (let ((?x114 (* (/ 1.0 2.0) ?x110)))
 (let ((?x193 (+ ?x168 ?x98 ?x114)))
 (let ((?x74 (* ?x183 ?x183 ?x183 ?x183 ?x193 ?x185 ?x185 ?x185 ?x185 b)))
 (let (($x76 (= ?x74 0.0)))
 (not $x76))))))))))))) :qid k!28))
 ))
 (let (($x282 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x281 (lambda ((b Real) (x Real) )(let ((?x98 (* (- (/ 1.0 2.0)) b)))
 (let ((?x94 (* x b)))
 (let ((?x168 (* (- 1.0) ?x94)))
 (let ((?x62 (* b00 x00)))
 (let ((?x185 (+ ?x62 r00 ?x168 ?x98)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x110 (* ?x183 b)))
 (let ((?x114 (* (/ 1.0 2.0) ?x110)))
 (let ((?x193 (+ ?x168 ?x98 ?x114)))
 (let ((?x74 (* ?x183 ?x183 ?x183 ?x183 ?x193 ?x185 ?x185 ?x185 ?x185 b)))
 (let (($x76 (= ?x74 0.0)))
 (let (($x81 (not $x76)))
 (let ((?x298 (+ ?x98 r00 ?x62 ?x168)))
 (let ((?x292 (* ?x183 ?x183 ?x183 ?x183 0.0 ?x298 ?x298 ?x298 ?x298 b)))
 (let ((@x294 (rewrite (= ?x185 ?x298))))
 (let ((?x123 (* (/ 1.0 2.0) b)))
 (let ((?x296 (+ ?x123 ?x94)))
 (let ((?x200 (+ ?x123 (* (/ 1.0 2.0) (* 2.0 ?x94)))))
 (let ((@x197 (rewrite (= (+ (* 1.0 b) (* ?x45 b)) (+ b (* 2.0 ?x94))))))
 (let ((@x182 (trans (rewrite (= ?x110 (+ (* 1.0 b) (* ?x45 b)))) @x197 (= ?x110 (+ b (* 2.0 ?x94))))))
 (let ((@x206 (trans (monotonicity @x182 (= ?x114 (* (/ 1.0 2.0) (+ b (* 2.0 ?x94))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x94))) ?x200)) (= ?x114 ?x200))))
 (let ((@x293 (monotonicity (trans @x206 (rewrite (= ?x200 ?x296)) (= ?x114 ?x296)) (= ?x193 (+ ?x168 ?x98 ?x296)))))
 (let ((@x290 (monotonicity (trans @x293 (rewrite (= (+ ?x168 ?x98 ?x296) 0.0)) (= ?x193 0.0)) @x294 @x294 @x294 @x294 (= ?x74 ?x292))))
 (let ((@x213 (monotonicity (trans @x290 (rewrite (= ?x292 0.0)) $x76) (= $x76 (= 0.0 0.0)))))
 (let ((@x285 (monotonicity (trans @x213 (rewrite (= (= 0.0 0.0) true)) (= $x76 true)) (= $x81 (not true)))))
 (trans @x285 (rewrite (= (not true) false)) (= $x81 false)))))))))))))))))))))))))))))
 ))
 (let ((@x274 (trans (quant-intro (proof-bind ?x281) (= $x82 $x282)) (elim-unused (= $x282 false)) (= $x82 false))))
 (let (($x178 (exists ((b Real) (r Real) (x Real) )(! (let ((?x79 (* (- 1.0) r00)))
 (let ((?x112 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x172 (+ ?x63 r ?x112 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x115 (+ r ?x112)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let (($x315 (not (= (* ?x183 ?x183 ?x183 ?x183 ?x115 ?x115 ?x115 ?x115 ?x172 b) 0.0))))
 (let ((?x90 (* x b)))
 (let ((?x133 (+ ?x63 r ?x79 ?x90)))
 (let (($x72 (not (= (* ?x133 x x x x r r r r b) 0.0))))
 (and (= ?x133 0.0) (or $x72 $x315)))))))))))))) :qid k!28))
 ))
 (let (($x54 (exists ((b Real) (r Real) (x Real) )(! (let ((?x45 (* 2.0 x)))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x49 (* (+ (- (+ (* (- 1.0) b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x42 ?x46 ?x46 ?x46 ?x36 ?x42 ?x42 ?x42 ?x46)))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let ((?x39 (* (+ ?x30 (* ?x36 2.0 x)) r 2.0 x 2.0 x 2.0 x ?x36 r r r 2.0 x)))
 (and (= (+ ?x30 (* b x)) 0.0) (or (not (= ?x39 0.0)) (not (= ?x49 0.0))))))))))) :qid k!28))
 ))
 (let ((?x71 (lambda ((b Real) (r Real) (x Real) )(let ((?x79 (* (- 1.0) r00)))
 (let ((?x112 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x172 (+ ?x63 r ?x112 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x115 (+ r ?x112)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let (($x315 (not (= (* ?x183 ?x183 ?x183 ?x183 ?x115 ?x115 ?x115 ?x115 ?x172 b) 0.0))))
 (let ((?x90 (* x b)))
 (let ((?x133 (+ ?x63 r ?x79 ?x90)))
 (let (($x72 (not (= (* ?x133 x x x x r r r r b) 0.0))))
 (let (($x314 (and (= ?x133 0.0) (or $x72 $x315))))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x49 (* (+ (- (+ (* (- 1.0) b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x42 ?x46 ?x46 ?x46 ?x36 ?x42 ?x42 ?x42 ?x46)))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let ((?x39 (* (+ ?x30 (* ?x36 2.0 x)) r 2.0 x 2.0 x 2.0 x ?x36 r r r 2.0 x)))
 (let (($x53 (and (= (+ ?x30 (* b x)) 0.0) (or (not (= ?x39 0.0)) (not (= ?x49 0.0))))))
 (rewrite (= $x53 $x314)))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x116 (mp (mp @x55 (quant-intro (proof-bind ?x71) (= $x54 $x178)) $x178) (rewrite (= $x178 $x82)) $x82)))
 (mp @x116 @x274 false))))))))))))

(:max-memory   17.59
 :memory       17.31
 :num-allocs   55647
 :num-checks   1
 :rlimit-count 525
 :time         0.00
 :total-time   0.01)
