unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x552 (* (- 1) y!0)))
 (let ((?x405 (* (- 1) x!1)))
 (let ((?x404 (+ y00 x00 ?x405 ?x552)))
 (let (($x378 (<= ?x404 0)))
 (let (($x403 (= ?x404 0)))
 (let ((?x244 (+ 1 y!0)))
 (let ((?x583 (+ (- 1) x!1)))
 (let ((?x743 (* ?x583 ?x583 ?x244 ?x244 ?x244 ?x244)))
 (let ((?x614 (+ (* 2 y00) (* 2 x00) (* (- 2) (* x00 x!1 y!0 y!0 y!0)) (* (- 6) (* x00 x!1 y!0 y!0)) (* 3 (* x00 x!1 x!1 y!0)) (* x00 y!0 y!0 y!0) (* (- 4) (* y00 x!1)) (* 2 (* x00 x!1 x!1)) (* 3 (* x00 y!0)) (* (- 6) (* x00 x!1 y!0)) (* 3 (* x00 y!0 y!0)) (* x00 x!1 x!1 y!0 y!0 y!0) (* 3 (* x00 x!1 x!1 y!0 y!0)) ?x405 ?x552 (* 2 (* y00 x!1 x!1)) (* (- 4) (* x00 x!1)) (* (- 1) (* x!1 x!1 x!1)) (* 3 (* y00 y!0)) (* 2 (* x!1 x!1)) (* (- 2) (* y00 x!1 y!0 y!0 y!0)) (* 3 (* y00 y!0 y!0)) (* y00 y!0 y!0 y!0) (* 2 (* x!1 y!0)) (* (- 1) (* ?x583 ?x583 ?x583 ?x244 ?x244 ?x244)) (* (- 6) (* y00 x!1 y!0 y!0)) (* (- 1) ?x743) (* (- 1) (* x!1 x!1 y!0)) (* y00 x!1 x!1 y!0 y!0 y!0) (* (- 6) (* y00 x!1 y!0)) (* 3 (* y00 x!1 x!1 y!0)) (* 3 (* y00 x!1 x!1 y!0 y!0)))))
 (let (($x647 (= ?x614 0)))
 (let (($x677 (not $x647)))
 (let (($x415 (and $x403 $x677)))
 (let ((?x575 (* x!1 x!1 x!1)))
 (let ((?x747 (* x!1 x!1 y!0)))
 (let ((?x726 (* ?x583 ?x583 ?x583 ?x244 ?x244 ?x244)))
 (let ((?x475 (* (- 2) x00)))
 (let ((?x795 (* (- 2) y00)))
 (let ((?x554 (+ x!1 y!0 ?x795 ?x475 (* 4 (* x!1 x00)) (* (- 2) (* x!1 x!1 x00)) (* 4 (* x!1 y00)) (* (- 2) (* x!1 x!1 y00)) (* (- 3) (* y!0 x00)) (* 6 (* x!1 y!0 x00)) (* (- 3) (* x!1 x!1 y!0 x00)) (* (- 3) (* y!0 y!0 x00)) (* 6 (* x!1 y!0 y!0 x00)) (* (- 3) (* x!1 x!1 y!0 y!0 x00)) (* (- 1) (* y!0 y!0 y!0 x00)) (* 2 (* x!1 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0 x00)) ?x743 ?x726 ?x747 (* (- 2) (* x!1 y!0)) (* (- 2) (* x!1 x!1)) ?x575 (* (- 3) (* y!0 y00)) (* (- 3) (* y!0 y!0 y00)) (* (- 1) (* y!0 y!0 y!0 y00)) (* 2 (* x!1 y!0 y!0 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0 y00)) (* 6 (* x!1 y!0 y00)) (* (- 3) (* x!1 x!1 y!0 y00)) (* 6 (* x!1 y!0 y!0 y00)) (* (- 3) (* x!1 x!1 y!0 y!0 y00)))))
 (let (($x436 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x554 0)))))
 (let (($x820 (exists ((x Int) (y Int) )(! (let ((?x777 (* (- 3) (* x x y y y00))))
 (let ((?x784 (* 6 (* x y y y00))))
 (let ((?x771 (* (- 3) (* x x y y00))))
 (let ((?x783 (* 6 (* x y y00))))
 (let ((?x735 (* (- 1) (* x x y y y y00))))
 (let ((?x765 (* 2 (* x y y y y00))))
 (let ((?x635 (* (- 1) (* y y y y00))))
 (let ((?x760 (* (- 3) (* y y y00))))
 (let ((?x753 (* (- 3) (* y y00))))
 (let ((?x532 (* x x x)))
 (let ((?x559 (* (- 2) (* x x))))
 (let ((?x512 (* (- 2) (* x y))))
 (let ((?x489 (* x x y)))
 (let ((?x167 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x487 (* ?x74 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x485 (* ?x74 ?x74 ?x167 ?x167 ?x167 ?x167)))
 (let ((?x401 (* (- 1) (* x x y y y x00))))
 (let ((?x455 (* 2 (* x y y y x00))))
 (let ((?x399 (* (- 1) (* y y y x00))))
 (let ((?x452 (* (- 3) (* x x y y x00))))
 (let ((?x464 (* 6 (* x y y x00))))
 (let ((?x446 (* (- 3) (* y y x00))))
 (let ((?x443 (* (- 3) (* x x y x00))))
 (let ((?x463 (* 6 (* x y x00))))
 (let ((?x437 (* (- 3) (* y x00))))
 (let ((?x798 (* (- 2) (* x x y00))))
 (let ((?x797 (* 4 (* x y00))))
 (let ((?x477 (* (- 2) (* x x x00))))
 (let ((?x475 (* (- 2) x00)))
 (let ((?x795 (* (- 2) y00)))
 (let ((?x813 (+ x y ?x795 ?x475 (* 4 (* x x00)) ?x477 ?x797 ?x798 ?x437 ?x463 ?x443 ?x446 ?x464 ?x452 ?x399 ?x455 ?x401 ?x485 ?x487 ?x489 ?x512 ?x559 ?x532 ?x753 ?x760 ?x635 ?x765 ?x735 ?x783 ?x771 ?x784 ?x777)))
 (let (($x82 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x82 (not (= ?x813 0)))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x762 (exists ((x Int) (y Int) )(! (let ((?x167 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x778 (* y00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x754 (* x00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x745 (* y00 ?x74 ?x74)))
 (let ((?x282 (* x00 ?x74 ?x74)))
 (let ((?x94 (+ ?x282 ?x745 ?x754 (* (- 1) (* ?x74 ?x74 ?x167 ?x167 ?x167 ?x167)) (* (- 1) (* ?x74 ?x74 ?x74 ?x167 ?x167 ?x167)) (* (- 1) (* ?x74 ?x74 ?x167)) (* (- 1) (* ?x74 ?x74 ?x74)) ?x778)))
 (let (($x240 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x240 (not (= ?x94 0))))))))))) :qid k!26))
 ))
 (let ((?x822 (lambda ((x Int) (y Int) )(let ((?x777 (* (- 3) (* x x y y y00))))
 (let ((?x784 (* 6 (* x y y y00))))
 (let ((?x771 (* (- 3) (* x x y y00))))
 (let ((?x783 (* 6 (* x y y00))))
 (let ((?x735 (* (- 1) (* x x y y y y00))))
 (let ((?x765 (* 2 (* x y y y y00))))
 (let ((?x635 (* (- 1) (* y y y y00))))
 (let ((?x760 (* (- 3) (* y y y00))))
 (let ((?x753 (* (- 3) (* y y00))))
 (let ((?x532 (* x x x)))
 (let ((?x559 (* (- 2) (* x x))))
 (let ((?x512 (* (- 2) (* x y))))
 (let ((?x489 (* x x y)))
 (let ((?x167 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x487 (* ?x74 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x485 (* ?x74 ?x74 ?x167 ?x167 ?x167 ?x167)))
 (let ((?x401 (* (- 1) (* x x y y y x00))))
 (let ((?x455 (* 2 (* x y y y x00))))
 (let ((?x399 (* (- 1) (* y y y x00))))
 (let ((?x452 (* (- 3) (* x x y y x00))))
 (let ((?x464 (* 6 (* x y y x00))))
 (let ((?x446 (* (- 3) (* y y x00))))
 (let ((?x443 (* (- 3) (* x x y x00))))
 (let ((?x463 (* 6 (* x y x00))))
 (let ((?x437 (* (- 3) (* y x00))))
 (let ((?x798 (* (- 2) (* x x y00))))
 (let ((?x797 (* 4 (* x y00))))
 (let ((?x477 (* (- 2) (* x x x00))))
 (let ((?x475 (* (- 2) x00)))
 (let ((?x795 (* (- 2) y00)))
 (let ((?x813 (+ x y ?x795 ?x475 (* 4 (* x x00)) ?x477 ?x797 ?x798 ?x437 ?x463 ?x443 ?x446 ?x464 ?x452 ?x399 ?x455 ?x401 ?x485 ?x487 ?x489 ?x512 ?x559 ?x532 ?x753 ?x760 ?x635 ?x765 ?x735 ?x783 ?x771 ?x784 ?x777)))
 (let (($x82 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x420 (and $x82 (not (= ?x813 0)))))
 (let ((?x778 (* y00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x754 (* x00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x745 (* y00 ?x74 ?x74)))
 (let ((?x282 (* x00 ?x74 ?x74)))
 (let ((?x94 (+ ?x282 ?x745 ?x754 (* (- 1) ?x485) (* (- 1) ?x487) (* (- 1) (* ?x74 ?x74 ?x167)) (* (- 1) (* ?x74 ?x74 ?x74)) ?x778)))
 (let (($x240 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x106 (and $x240 (not (= ?x94 0)))))
 (rewrite (= $x106 $x420))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x293 (exists ((x Int) (y Int) )(! (let ((?x167 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x778 (* y00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x702 (* ?x74 ?x74 ?x74)))
 (let ((?x734 (* ?x74 ?x74 ?x167)))
 (let ((?x487 (* ?x74 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x485 (* ?x74 ?x74 ?x167 ?x167 ?x167 ?x167)))
 (let ((?x60 (+ (* (- 1) (* x00 ?x74 ?x74)) (* (- 1) (* y00 ?x74 ?x74)) (* (- 1) (* x00 ?x74 ?x74 ?x167 ?x167 ?x167)) ?x485 ?x487 ?x734 ?x702 (* (- 1) ?x778))))
 (let (($x240 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x240 (not (= ?x60 0)))))))))))) :qid k!26))
 ))
 (let ((?x584 (lambda ((x Int) (y Int) )(let ((?x167 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x778 (* y00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x754 (* x00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x745 (* y00 ?x74 ?x74)))
 (let ((?x282 (* x00 ?x74 ?x74)))
 (let ((?x94 (+ ?x282 ?x745 ?x754 (* (- 1) (* ?x74 ?x74 ?x167 ?x167 ?x167 ?x167)) (* (- 1) (* ?x74 ?x74 ?x74 ?x167 ?x167 ?x167)) (* (- 1) (* ?x74 ?x74 ?x167)) (* (- 1) (* ?x74 ?x74 ?x74)) ?x778)))
 (let (($x240 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x106 (and $x240 (not (= ?x94 0)))))
 (let ((?x702 (* ?x74 ?x74 ?x74)))
 (let ((?x734 (* ?x74 ?x74 ?x167)))
 (let ((?x487 (* ?x74 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x485 (* ?x74 ?x74 ?x167 ?x167 ?x167 ?x167)))
 (let ((?x60 (+ (* (- 1) ?x282) (* (- 1) ?x745) (* (- 1) ?x754) ?x485 ?x487 ?x734 ?x702 (* (- 1) ?x778))))
 (let (($x744 (and $x240 (not (= ?x60 0)))))
 (rewrite (= $x744 $x106))))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (- (* (- 1) ?x35 ?x35 x00) (* ?x35 ?x35 y00)) (* ?x35 ?x35 x00 ?x38 ?x38 ?x38))))
 (let ((?x46 (+ ?x41 (* ?x35 ?x35 ?x38 ?x38 ?x38 ?x38) (* ?x35 ?x35 ?x35 ?x38 ?x38 ?x38) (* ?x35 ?x35 ?x38) (* ?x35 ?x35 ?x35))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x46 (* ?x35 ?x35 ?x38 ?x38 ?x38 y00)) 0)))))))) :qid k!26))
 ))
 (let ((?x245 (lambda ((x Int) (y Int) )(let ((?x167 (+ 1 y)))
 (let ((?x74 (+ (- 1) x)))
 (let ((?x778 (* y00 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x702 (* ?x74 ?x74 ?x74)))
 (let ((?x734 (* ?x74 ?x74 ?x167)))
 (let ((?x487 (* ?x74 ?x74 ?x74 ?x167 ?x167 ?x167)))
 (let ((?x485 (* ?x74 ?x74 ?x167 ?x167 ?x167 ?x167)))
 (let ((?x60 (+ (* (- 1) (* x00 ?x74 ?x74)) (* (- 1) (* y00 ?x74 ?x74)) (* (- 1) (* x00 ?x74 ?x74 ?x167 ?x167 ?x167)) ?x485 ?x487 ?x734 ?x702 (* (- 1) ?x778))))
 (let (($x240 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x744 (and $x240 (not (= ?x60 0)))))
 (let ((?x38 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x41 (- (- (* (- 1) ?x35 ?x35 x00) (* ?x35 ?x35 y00)) (* ?x35 ?x35 x00 ?x38 ?x38 ?x38))))
 (let ((?x46 (+ ?x41 (* ?x35 ?x35 ?x38 ?x38 ?x38 ?x38) (* ?x35 ?x35 ?x35 ?x38 ?x38 ?x38) (* ?x35 ?x35 ?x38) (* ?x35 ?x35 ?x35))))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (- ?x46 (* ?x35 ?x35 ?x38 ?x38 ?x38 y00)) 0))))))
 (rewrite (= $x52 $x744))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x603 (mp (mp @x54 (quant-intro (proof-bind ?x245) (= $x53 $x293)) $x293) (rewrite (= $x293 $x293)) $x293)))
 (let ((@x396 (mp (mp @x603 (quant-intro (proof-bind ?x584) (= $x293 $x762)) $x762) (quant-intro (proof-bind ?x822) (= $x762 $x820)) $x820)))
 (let ((@x680 (mp (mp~ @x396 (sk (~ $x820 $x436)) $x436) (rewrite (= $x436 $x415)) $x415)))
 (let ((@x616 (and-elim @x680 $x403)))
 (let ((@x398 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x403) $x378)) @x616 $x378)))
 (let (($x160 (>= ?x404 0)))
 (let ((@x782 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x403) $x160)) @x616 $x160)))
 (let (($x649 (not (>= ?x614 0))))
 (let (($x384 (<= ?x614 0)))
 (let ((@x419 (lemma ((_ th-lemma arith) (hypothesis (not $x384)) @x782 @x398 @x782 @x398 false) $x384)))
 (let ((@x679 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x647 (not $x384) $x649)) (and-elim @x680 $x677) (or (not $x384) $x649))))
 ((_ th-lemma arith) (unit-resolution @x679 @x419 $x649) @x782 @x398 @x782 @x398 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        7
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             268
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.66
 :memory                    3.17
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1242818
 :num-checks                1
 :propagations              4
 :rlimit-count              4146
 :time                      0.01
 :total-time                0.01)
