unsat
((set-logic NRA)
(declare-fun d!6 () Real)
(declare-fun y!5 () Real)
(declare-fun a!8 () Real)
(declare-fun b!7 () Real)
(proof
(let ((?x676 (* a00 b!7 b!7 b!7 a!8 a!8 a!8 y!5 y!5 y!5 d!6 d!6 d!6 d!6)))
 (let ((?x665 (* y00 b!7 b!7 b!7 b!7 a!8 a!8 a!8 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x659 (* b!7 b!7 b!7 b!7 a!8 a!8 a!8 y!5 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x657 (* b!7 b!7 b!7 a!8 a!8 a!8 a!8 y!5 y!5 y!5 d!6 d!6 d!6 d!6)))
 (let ((?x424 (+ (* (/ 1.0 128.0) ?x657) (* (- (/ 1.0 64.0)) ?x659) (* (/ 1.0 64.0) ?x665) (* (- (/ 1.0 128.0)) ?x676) (* (/ 1.0 32.0) (* b!7 a!8 a!8 y!5 d!6 d!6 d!6 d!6)) (* (- (/ 1.0 16.0)) (* b!7 b!7 a!8 y!5 y!5 d!6 d!6 d!6)) (* (/ 1.0 16.0) (* y00 b!7 b!7 a!8 y!5 d!6 d!6 d!6)) (* (- (/ 1.0 32.0)) (* a00 b!7 a!8 y!5 d!6 d!6 d!6 d!6)))))
 (let (($x425 (>= ?x424 0.0)))
 (let (($x814 (not $x425)))
 (let (($x658 (= 0.0 ?x424)))
 (let (($x809 (not $x658)))
 (let ((@x792 (symm (commutativity (= $x658 (= ?x424 0.0))) (= (= ?x424 0.0) $x658))))
 (let (($x700 (= ?x424 0.0)))
 (let (($x695 (not $x700)))
 (let ((?x667 (* a00 d!6)))
 (let ((?x775 (* (- (/ 1.0 2.0)) ?x667)))
 (let ((?x648 (* b!7 y!5)))
 (let ((?x769 (* (- 1.0) ?x648)))
 (let ((?x395 (* y00 b!7)))
 (let ((?x291 (* a!8 d!6)))
 (let ((?x770 (* (/ 1.0 2.0) ?x291)))
 (let ((?x735 (* b!7 b!7 b!7 b!7 a!8 a!8 d!6 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x734 (* b!7 b!7 b!7 b!7 b!7 a!8 d!6 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x729 (* b!7 b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x723 (* b!7 b!7 b!7 a!8 a!8 a!8 y!5 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x717 (* b!7 b!7 b!7 b!7 b!7 a!8 y!5 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x713 (* b!7 b!7 b!7 a!8 a!8 a!8 y!5 y!5 d!6 d!6 d!6 d!6)))
 (let ((?x712 (* b!7 b!7 b!7 b!7 b!7 b!7 y!5 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x710 (* b!7 b!7 b!7 b!7 a!8 a!8 y!5 y!5 d!6 d!6 d!6 d!6)))
 (let ((?x702 (* b!7 b!7 b!7 b!7 b!7 b!7 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x701 (* b!7 b!7 b!7 b!7 b!7 a!8 y!5 y!5 d!6 d!6 d!6 d!6)))
 (let ((?x699 (* b!7 b!7 b!7 a!8 a!8 a!8 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x681 (* b!7 b!7 b!7 b!7 a!8 a!8 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x674 (* b!7 b!7 b!7 b!7 b!7 b!7 y!5 y!5 d!6 d!6 d!6 d!6)))
 (let ((?x522 (* b!7 b!7 b!7 b!7 a!8 a!8 y!5 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x430 (* b!7 b!7 b!7 a!8 a!8 a!8 d!6 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x401 (* b!7 b!7 b!7 b!7 b!7 a!8 y!5 y!5 y!5 d!6 d!6 d!6)))
 (let ((?x581 (+ (* (/ 3.0 64.0) ?x401) (* (/ 1.0 512.0) ?x430) (* (/ 1.0 32.0) (* b!7 a!8 d!6 d!6 d!6 d!6)) (* (/ 9.0 256.0) ?x522) (* (/ 3.0 128.0) ?x674) (* (/ 3.0 64.0) ?x681) (* (/ 1.0 16.0) (* b!7 a!8 y!5 d!6 d!6 d!6)) (* (/ 1.0 64.0) ?x699) (* (/ 9.0 128.0) ?x701) (* (/ 1.0 64.0) ?x702) (* (/ 9.0 128.0) ?x710) (* (/ 3.0 256.0) ?x712) (* (/ 3.0 128.0) ?x713) (* (/ 9.0 256.0) ?x717) (* (/ 3.0 256.0) ?x723) (* (/ 1.0 512.0) ?x729) (* (/ 3.0 512.0) ?x734) (* (/ 3.0 512.0) ?x735) (* (/ 1.0 16.0) (* b!7 b!7 y!5 d!6 d!6 d!6)) (* (/ 1.0 32.0) (* b!7 b!7 d!6 d!6 d!6 d!6)))))
 (let (($x434 (= (* ?x581 (+ ?x770 ?x395 ?x769 ?x775)) 0.0)))
 (let ((?x436 (+ ?x775 ?x770 ?x395 ?x769)))
 (let (($x791 (= ?x436 0.0)))
 (let ((?x675 (+ ?x291 (* 2.0 ?x395) (* (- 2.0) ?x648) (* (- 1.0) ?x667))))
 (let (($x682 (= ?x675 0.0)))
 (let (($x409 (not $x434)))
 (let (($x772 (or $x695 $x409)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x655 (= (+ ?x30 ?x90 (* (- 1.0) (* d00 a!8)) (* 2.0 (* b00 y!5))) 0.0)))
 (let (($x808 (and $x655 (= (+ (* d00 b!7) (* (- 1.0) (* b00 d!6))) 0.0) $x682 $x772)))
 (let ((?x669 (* b!7 y00)))
 (let ((?x630 (+ (* (/ 1.0 2.0) (* d!6 a!8)) (* (- 1.0) (* y!5 b!7)) ?x669 (* (- (/ 1.0 2.0)) (* d!6 a00)))))
 (let ((?x624 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x394 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x616 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x615 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x516 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x610 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x609 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x532 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x608 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x607 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x493 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x414 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x602 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x908 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x874 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x782 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x468 (+ (* (/ 1.0 64.0) ?x782) (* (/ 1.0 16.0) (* y!5 d!6 d!6 d!6 b!7 a!8)) (* (/ 1.0 64.0) ?x874) (* (/ 3.0 64.0) ?x908) (* (/ 3.0 64.0) ?x602) (* (/ 3.0 128.0) ?x414) (* (/ 9.0 128.0) ?x493) (* (/ 9.0 128.0) ?x607) (* (/ 3.0 128.0) ?x608) (* (/ 3.0 256.0) ?x532) (* (/ 9.0 256.0) ?x609) (* (/ 9.0 256.0) ?x610) (* (/ 3.0 256.0) ?x516) (* (/ 1.0 512.0) ?x615) (* (/ 3.0 512.0) ?x616) (* (/ 3.0 512.0) ?x394) (* (/ 1.0 512.0) ?x624) (* (/ 1.0 16.0) (* y!5 d!6 d!6 d!6 b!7 b!7)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 b!7 b!7)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 b!7 a!8)))))
 (let ((?x943 (* y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8 a00)))
 (let ((?x746 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8 a!8 y00)))
 (let ((?x935 (* y!5 y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x842 (* y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8 a!8)))
 (let ((?x433 (+ (* (/ 1.0 128.0) ?x842) (* (- (/ 1.0 64.0)) ?x935) (* (/ 1.0 64.0) ?x746) (* (- (/ 1.0 128.0)) ?x943) (* (/ 1.0 32.0) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8)) (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 16.0) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8 y00)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a00)))))
 (let ((?x422 (* d!6 a!8)))
 (let ((?x839 (+ ?x422 (* (- 2.0) (* y!5 b!7)) (* 2.0 ?x669) (* (- 1.0) (* d!6 a00)))))
 (let (($x923 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x90 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x396 (and $x923 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x839 0.0) (or (not (= ?x433 0.0)) (not (= (* ?x468 ?x630) 0.0))))))
 (let (($x201 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x135 (* b y00)))
 (let ((?x108 (* y b)))
 (let ((?x172 (* (- 1.0) ?x108)))
 (let ((?x98 (* d a)))
 (let ((?x139 (* (/ 1.0 2.0) ?x98)))
 (let ((?x224 (+ ?x139 ?x172 ?x135 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x1048 (* (/ 1.0 512.0) (* d d d d d d b b b a a a))))
 (let ((?x1045 (* (/ 3.0 512.0) (* d d d d d d b b b b a a))))
 (let ((?x1042 (* (/ 3.0 512.0) (* d d d d d d b b b b b a))))
 (let ((?x1038 (* (/ 1.0 512.0) (* d d d d d d b b b b b b))))
 (let ((?x1034 (* (/ 3.0 256.0) (* y d d d d d b b b a a a))))
 (let ((?x1031 (* (/ 9.0 256.0) (* y d d d d d b b b b a a))))
 (let ((?x1028 (* (/ 9.0 256.0) (* y d d d d d b b b b b a))))
 (let ((?x1024 (* (/ 3.0 256.0) (* y d d d d d b b b b b b))))
 (let ((?x1020 (* (/ 3.0 128.0) (* y y d d d d b b b a a a))))
 (let ((?x1017 (* (/ 9.0 128.0) (* y y d d d d b b b b a a))))
 (let ((?x1014 (* (/ 9.0 128.0) (* y y d d d d b b b b b a))))
 (let ((?x1010 (* (/ 3.0 128.0) (* y y d d d d b b b b b b))))
 (let ((?x1006 (* (/ 3.0 64.0) (* y y y d d d b b b b a a))))
 (let ((?x1003 (* (/ 3.0 64.0) (* y y y d d d b b b b b a))))
 (let ((?x982 (* (/ 1.0 64.0) (* y y y d d d b b b b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x1103 (+ ?x244 ?x260 ?x982 ?x1003 ?x1006 ?x1010 ?x1014 ?x1017 ?x1020 ?x1024 ?x1028 ?x1031 ?x1034 ?x1038 ?x1042 ?x1045 ?x1048 (* (/ 1.0 16.0) (* y d d d b b)) (* (/ 1.0 32.0) (* d d d d b b)) (* (/ 1.0 32.0) (* d d d d b a)))))
 (let ((?x301 (* y y y d d d d b b b a a a a00)))
 (let ((?x290 (* y y y d d d b b b b a a a y00)))
 (let ((?x280 (* y y y y d d d b b b b a a a)))
 (let ((?x269 (* y y y d d d d b b b a a a a)))
 (let ((?x349 (+ (* (/ 1.0 128.0) ?x269) (* (- (/ 1.0 64.0)) ?x280) (* (/ 1.0 64.0) ?x290) (* (- (/ 1.0 128.0)) ?x301) (* (/ 1.0 32.0) (* y d d d d b a a)) (* (- (/ 1.0 16.0)) (* y y d d d b b a)) (* (/ 1.0 16.0) (* y d d d b b a y00)) (* (- (/ 1.0 32.0)) (* y d d d d b a a00)))))
 (let (($x115 (not (= ?x349 0.0))))
 (let (($x165 (= (+ ?x98 (* (- 2.0) ?x108) (* 2.0 ?x135) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x122 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x90 (* 2.0 (* y b00))) 0.0)))
 (and $x122 $x87 $x165 (or $x115 (not (= (* ?x1103 ?x224) 0.0))))))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x547 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x500 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x210 (* y00 b)))
 (let ((?x523 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x210 ?x500)))
 (let ((?x574 (* (/ 1.0 16.0) (* (+ a b) (+ y (* (/ 1.0 2.0) d)) d d d b))))
 (let ((?x621 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x559 (* (/ 1.0 64.0) (* ?x66 ?x66 ?x66 ?x621 ?x621 ?x621 d d d b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x527 (* (+ ?x244 ?x260) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x210 ?x500))))
 (let ((?x108 (* y b)))
 (let ((?x130 (* (- 2.0) ?x108)))
 (let ((?x98 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let (($x203 (= (+ ?x90 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x203 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x98 ?x130 (* 2.0 ?x210) (* (- 1.0) ?x48)) 0.0) (or (not (= ?x527 0.0)) (not (= (* (+ ?x559 ?x574) ?x523) 0.0))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x236 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x135 (* b y00)))
 (let ((?x108 (* y b)))
 (let ((?x172 (* (- 1.0) ?x108)))
 (let ((?x98 (* d a)))
 (let ((?x139 (* (/ 1.0 2.0) ?x98)))
 (let ((?x224 (+ ?x139 ?x172 ?x135 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x1048 (* (/ 1.0 512.0) (* d d d d d d b b b a a a))))
 (let ((?x1045 (* (/ 3.0 512.0) (* d d d d d d b b b b a a))))
 (let ((?x1042 (* (/ 3.0 512.0) (* d d d d d d b b b b b a))))
 (let ((?x1038 (* (/ 1.0 512.0) (* d d d d d d b b b b b b))))
 (let ((?x1034 (* (/ 3.0 256.0) (* y d d d d d b b b a a a))))
 (let ((?x1031 (* (/ 9.0 256.0) (* y d d d d d b b b b a a))))
 (let ((?x1028 (* (/ 9.0 256.0) (* y d d d d d b b b b b a))))
 (let ((?x1024 (* (/ 3.0 256.0) (* y d d d d d b b b b b b))))
 (let ((?x1020 (* (/ 3.0 128.0) (* y y d d d d b b b a a a))))
 (let ((?x1017 (* (/ 9.0 128.0) (* y y d d d d b b b b a a))))
 (let ((?x1014 (* (/ 9.0 128.0) (* y y d d d d b b b b b a))))
 (let ((?x1010 (* (/ 3.0 128.0) (* y y d d d d b b b b b b))))
 (let ((?x1006 (* (/ 3.0 64.0) (* y y y d d d b b b b a a))))
 (let ((?x1003 (* (/ 3.0 64.0) (* y y y d d d b b b b b a))))
 (let ((?x982 (* (/ 1.0 64.0) (* y y y d d d b b b b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x1103 (+ ?x244 ?x260 ?x982 ?x1003 ?x1006 ?x1010 ?x1014 ?x1017 ?x1020 ?x1024 ?x1028 ?x1031 ?x1034 ?x1038 ?x1042 ?x1045 ?x1048 (* (/ 1.0 16.0) (* y d d d b b)) (* (/ 1.0 32.0) (* d d d d b b)) (* (/ 1.0 32.0) (* d d d d b a)))))
 (let ((?x301 (* y y y d d d d b b b a a a a00)))
 (let ((?x290 (* y y y d d d b b b b a a a y00)))
 (let ((?x280 (* y y y y d d d b b b b a a a)))
 (let ((?x269 (* y y y d d d d b b b a a a a)))
 (let ((?x349 (+ (* (/ 1.0 128.0) ?x269) (* (- (/ 1.0 64.0)) ?x280) (* (/ 1.0 64.0) ?x290) (* (- (/ 1.0 128.0)) ?x301) (* (/ 1.0 32.0) (* y d d d d b a a)) (* (- (/ 1.0 16.0)) (* y y d d d b b a)) (* (/ 1.0 16.0) (* y d d d b b a y00)) (* (- (/ 1.0 32.0)) (* y d d d d b a a00)))))
 (let (($x115 (not (= ?x349 0.0))))
 (let (($x165 (= (+ ?x98 (* (- 2.0) ?x108) (* 2.0 ?x135) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x122 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x90 (* 2.0 (* y b00))) 0.0)))
 (let (($x373 (and $x122 $x87 $x165 (or $x115 (not (= (* ?x1103 ?x224) 0.0))))))
 (let ((?x48 (* a00 d)))
 (let ((?x500 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x210 (* y00 b)))
 (let ((?x523 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x210 ?x500)))
 (let ((?x574 (* (/ 1.0 16.0) (* (+ a b) (+ y (* (/ 1.0 2.0) d)) d d d b))))
 (let ((?x621 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x559 (* (/ 1.0 64.0) (* ?x66 ?x66 ?x66 ?x621 ?x621 ?x621 d d d b b b))))
 (let (($x542 (or (not (= (* (+ ?x244 ?x260) (+ ?x139 ?x172 ?x210 ?x500)) 0.0)) (not (= (* (+ ?x559 ?x574) ?x523) 0.0)))))
 (let (($x203 (= (+ ?x90 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x403 (and $x203 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x98 (* (- 2.0) ?x108) (* 2.0 ?x210) (* (- 1.0) ?x48)) 0.0) $x542)))
 (rewrite (= $x403 $x373))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x68 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x66 (+ a b)))
 (let ((?x75 (+ (* ?x66 ?x66 ?x66 ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 ?x68 ?x68 ?x68) (* ?x66 ?x53 ?x51 ?x51 ?x51 ?x68))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x72 (- (+ (- (* ?x66 ?x51) (* 2.0 ?x53 ?x68)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x62 (+ (* a a a ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 y y y) (* a ?x53 ?x51 ?x51 ?x51 y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x62) 0.0)) (not (= (* ?x72 ?x75) 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x360 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x500 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x210 (* y00 b)))
 (let ((?x523 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x210 ?x500)))
 (let ((?x574 (* (/ 1.0 16.0) (* (+ a b) (+ y (* (/ 1.0 2.0) d)) d d d b))))
 (let ((?x621 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x559 (* (/ 1.0 64.0) (* ?x66 ?x66 ?x66 ?x621 ?x621 ?x621 d d d b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x527 (* (+ ?x244 ?x260) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x210 ?x500))))
 (let ((?x108 (* y b)))
 (let ((?x130 (* (- 2.0) ?x108)))
 (let ((?x98 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let (($x203 (= (+ ?x90 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x403 (and $x203 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x98 ?x130 (* 2.0 ?x210) (* (- 1.0) ?x48)) 0.0) (or (not (= ?x527 0.0)) (not (= (* (+ ?x559 ?x574) ?x523) 0.0))))))
 (let ((?x51 (/ d 2.0)))
 (let ((?x68 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x75 (+ (* ?x66 ?x66 ?x66 ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 ?x68 ?x68 ?x68) (* ?x66 ?x53 ?x51 ?x51 ?x51 ?x68))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x72 (- (+ (- (* ?x66 ?x51) (* 2.0 ?x53 ?x68)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x62 (+ (* a a a ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 y y y) (* a ?x53 ?x51 ?x51 ?x51 y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x80 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x62) 0.0)) (not (= (* ?x72 ?x75) 0.0))))))
 (rewrite (= $x80 $x403)))))))))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x354 (mp (mp @x82 (quant-intro (proof-bind ?x360) (= $x81 $x547)) $x547) (quant-intro (proof-bind ?x236) (= $x547 $x201)) $x201)))
 (let ((@x776 (mp (mp~ @x354 (sk (~ $x201 $x396)) $x396) (rewrite (= $x396 $x808)) $x808)))
 (let ((@x234 (and-elim @x776 $x682)))
 (let (($x661 (<= ?x675 0.0)))
 (let (($x660 (= 0.0 ?x675)))
 (let ((@x706 (mp @x234 (symm (commutativity (= $x660 $x682)) (= $x682 $x660)) $x660)))
 (let ((@x711 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x660) $x661)) @x706 $x661)))
 (let (($x650 (>= ?x675 0.0)))
 (let ((@x525 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x660) $x650)) @x706 $x650)))
 (let (($x688 (<= ?x436 0.0)))
 (let (($x685 (>= ?x436 0.0)))
 (let ((@x745 ((_ th-lemma arith) (lemma ((_ th-lemma arith) @x525 (hypothesis (not $x685)) false) $x685) (lemma ((_ th-lemma arith) (hypothesis (not $x688)) @x711 false) $x688) @x525 @x711 (= ?x436 ?x675))))
 (let (($x730 (or (not $x791) $x434)))
 (let ((@x740 (unit-resolution ((_ th-lemma arith) $x730) (hypothesis $x409) (hypothesis $x791) false)))
 (let ((@x797 (unit-resolution (and-elim @x776 $x772) (unit-resolution (lemma @x740 $x730) (trans* @x745 @x234 $x791) $x434) $x695)))
 (let (($x420 (<= ?x424 0.0)))
 (let ((@x753 (unit-resolution ((_ th-lemma arith) (or (not $x661) (not $x650) $x420)) @x711 @x525 (hypothesis (not $x420)) false)))
 (let ((@x816 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x658 (not $x420) $x814)) (lemma @x753 $x420) (mp @x797 (monotonicity @x792 (= $x695 $x809)) $x809) $x814)))
 (unit-resolution ((_ th-lemma arith) (or (not $x661) (not $x650) $x425)) @x711 @x525 @x816 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       21
 :arith-eq-adapter                14
 :arith-bound-propagations-cheap  9
 :arith-conflicts                 12
 :arith-diseq                     20
 :arith-fixed-eqs                 1
 :arith-grobner-calls             2
 :arith-grobner-conflicts         2
 :arith-horner-calls              2
 :arith-horner-cross-nested-forms 2
 :arith-lower                     16
 :arith-make-feasible             16
 :arith-max-columns               58
 :arith-max-rows                  7
 :arith-nla-explanations          6
 :arith-nla-lemmas                10
 :arith-propagations              9
 :arith-upper                     17
 :conflicts                       6
 :decisions                       22
 :del-clause                      18
 :final-checks                    14
 :max-memory                      2.65
 :memory                          1.18
 :mk-bool-var                     55
 :mk-clause                       53
 :num-allocs                      24767868
 :num-checks                      1
 :propagations                    27
 :rlimit-count                    5332
 :time                            0.09
 :total-time                      0.09)
