unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x380 (* d00 b!2)))
 (let ((?x413 (to_real ?x380)))
 (let ((?x344 (to_real b!2)))
 (let ((?x174 (to_real d00)))
 (let ((?x267 (* ?x174 ?x344)))
 (let ((?x240 (* (- 1.0) ?x267)))
 (let ((?x690 (+ ?x240 ?x413)))
 (let (($x704 (= ?x690 0.0)))
 (let ((?x186 (to_real d!1)))
 (let ((?x73 (to_real b00)))
 (let ((?x410 (* ?x73 ?x186)))
 (let ((?x532 (* (- 1.0) ?x410)))
 (let ((?x178 (* b00 d!1)))
 (let ((?x149 (to_real ?x178)))
 (let ((?x708 (+ ?x149 ?x532)))
 (let (($x739 (>= ?x708 0.0)))
 (let (($x737 (= 0.0 ?x708)))
 (let ((@x822 (symm (commutativity (= $x737 (= ?x708 0.0))) (= (= ?x708 0.0) $x737))))
 (let ((@x823 (mp ((_ th-lemma arith) (= ?x708 0.0)) @x822 $x737)))
 (let (($x738 (<= ?x708 0.0)))
 (let (($x707 (>= ?x690 0.0)))
 (let (($x705 (= 0.0 ?x690)))
 (let ((@x810 (mp (hypothesis $x704) (symm (commutativity (= $x705 $x704)) (= $x704 $x705)) $x705)))
 (let (($x706 (<= ?x690 0.0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x76 (to_real ?x35)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x534 (* (- 1.0) ?x175)))
 (let ((?x599 (+ ?x534 ?x76)))
 (let (($x693 (>= ?x599 0.0)))
 (let (($x691 (= 0.0 ?x599)))
 (let (($x740 (= ?x599 0.0)))
 (let ((@x801 (lemma (unit-resolution ((_ th-lemma arith) $x740) (hypothesis (not $x740)) false) $x740)))
 (let ((@x744 (unit-resolution (hypothesis (not $x691)) (symm (hypothesis $x740) $x691) false)))
 (let ((@x802 (unit-resolution (lemma @x744 (or (not $x740) $x691)) @x801 $x691)))
 (let (($x692 (<= ?x599 0.0)))
 (let ((?x472 (to_real y!0)))
 (let ((?x157 (to_real a!3)))
 (let ((?x425 (+ (* ?x73 ?x186 (to_real y00)) (* (- 1.0) (* ?x73 ?x186 ?x472)) (* (- (/ 1.0 2.0)) (* ?x173 ?x174 ?x186)) (* (/ 1.0 2.0) (* ?x157 ?x174 ?x186)) (* (- (/ 1.0 8.0)) (* ?x157 ?x173 ?x174 ?x186 ?x186 ?x344 ?x472)) (* (/ 1.0 4.0) (* ?x73 ?x157 ?x186 ?x186 (to_real y00) ?x344 ?x472)) (* (- (/ 1.0 4.0)) (* ?x73 ?x157 ?x186 ?x186 ?x344 ?x472 ?x472)) (* (/ 1.0 8.0) (* ?x157 ?x157 ?x174 ?x186 ?x186 ?x344 ?x472)))))
 (let (($x127 (<= ?x425 0.0)))
 (let (($x753 (not $x127)))
 (let (($x306 (>= ?x425 0.0)))
 (let ((?x122 (+ (* a00 d!1) (* (- 2) (* y00 b!2)) (* (- 1) (* a!3 d!1)) (* 2 (* b!2 y!0)))))
 (let (($x302 (>= ?x122 0)))
 (let (($x260 (= 0 ?x122)))
 (let ((@x727 (symm (commutativity (= $x260 (= ?x122 0))) (= (= ?x122 0) $x260))))
 (let (($x108 (= ?x122 0)))
 (let ((?x208 (to_real y00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x116 (* ?x157 ?x174)))
 (let ((?x221 (* (- 1.0) ?x116)))
 (let ((?x399 (+ ?x221 (* 2.0 (* ?x73 ?x472)) ?x175 ?x212 ?x240 ?x410)))
 (let ((?x521 (* ?x186 ?x186 ?x344 ?x344 ?x472)))
 (let ((?x107 (* (- (/ 1.0 8.0)) ?x521)))
 (let ((?x355 (* ?x186 ?x186 ?x186 ?x344 ?x344)))
 (let ((?x290 (* (- (/ 1.0 16.0)) ?x355)))
 (let ((?x244 (* (- (/ 1.0 2.0)) ?x186)))
 (let ((?x317 (+ (* (- (/ 1.0 8.0)) (* ?x157 ?x186 ?x186 ?x344 ?x472)) (* (- (/ 1.0 16.0)) (* ?x157 ?x186 ?x186 ?x186 ?x344)) ?x244 ?x290 ?x107)))
 (let ((?x482 (* ?x317 ?x399)))
 (let (($x356 (= ?x482 0.0)))
 (let (($x426 (= ?x425 0.0)))
 (let (($x491 (not $x426)))
 (let (($x251 (or $x491 (not $x356))))
 (let ((?x199 (+ ?x178 (* (- 1) ?x380))))
 (let (($x463 (= ?x199 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x111 (+ ?x35 ?x99 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x320 (= ?x111 0)))
 (let (($x129 (and $x320 $x463 $x108 $x251)))
 (let ((?x169 (+ (* 2.0 (* ?x472 ?x73)) ?x175 ?x221 ?x212 (* (- 1.0) (* ?x344 ?x174)) (* ?x186 ?x73))))
 (let ((?x113 (+ ?x244 (* (- (/ 1.0 8.0)) (* ?x186 ?x186 ?x344 ?x157 ?x472)) ?x290 (* (- (/ 1.0 16.0)) (* ?x186 ?x186 ?x186 ?x344 ?x157)) ?x107)))
 (let ((?x377 (+ (* (/ 1.0 2.0) (* ?x186 ?x173 ?x174)) (* (- (/ 1.0 2.0)) (* ?x186 ?x157 ?x174)) (* (- 1.0) (* ?x186 ?x73 ?x208)) (* ?x186 ?x472 ?x73) (* (/ 1.0 8.0) (* ?x186 ?x186 ?x344 ?x157 ?x472 ?x173 ?x174)) (* (- (/ 1.0 8.0)) (* ?x186 ?x186 ?x344 ?x157 ?x157 ?x472 ?x174)) (* (- (/ 1.0 4.0)) (* ?x186 ?x186 ?x344 ?x157 ?x472 ?x73 ?x208)) (* (/ 1.0 4.0) (* ?x186 ?x186 ?x344 ?x157 ?x472 ?x472 ?x73)))))
 (let ((?x477 (* a!3 d!1)))
 (let ((?x96 (+ ?x477 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x444 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x99 (* 2 (* y!0 b00))) 0)))
 (let (($x291 (and $x444 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x96 0) (or (not (= ?x377 0.0)) (not (= (* ?x113 ?x169) 0.0))))))
 (let (($x421 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x396 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x193 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x494 (+ (* 2.0 (* (to_real y) ?x73)) ?x175 ?x193 ?x212 ?x396 (* (to_real d) ?x73))))
 (let ((?x64 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x238 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x509 (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 (to_real a) ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 (to_real a))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x61 ?x64)))))
 (let ((?x339 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 (to_real a) (to_real a) ?x64 ?x174))))
 (let ((?x343 (+ (* (/ 1.0 2.0) (* ?x56 ?x173 ?x174)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a) ?x174)) (* (- 1.0) (* ?x56 ?x73 ?x208)) (* ?x56 ?x64 ?x73) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 (to_real a) ?x64 ?x173 ?x174)) ?x339 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 (to_real a) ?x64 ?x73 ?x208)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 (to_real a) ?x64 ?x64 ?x73)))))
 (let (($x321 (not (= ?x343 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x195 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x200 (= ?x195 0)))
 (let (($x141 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (and $x131 $x141 $x200 (or $x321 (not (= (* ?x509 ?x494) 0.0)))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x248 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x354 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x95 (+ ?x212 ?x175 ?x354 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x228 (* (/ 1.0 2.0) ?x56)))
 (let ((?x64 (to_real y)))
 (let ((?x190 (+ ?x64 ?x228)))
 (let ((?x61 (to_real b)))
 (let ((?x63 (to_real a)))
 (let ((?x492 (+ ?x63 ?x61)))
 (let ((?x238 (* (- (/ 1.0 2.0)) ?x56)))
 (let (($x233 (= (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x492 ?x190))) ?x95) 0.0)))
 (let ((?x194 (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x64 ?x56 ?x56 ?x61 ?x63))) (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x174 ?x63))))))
 (let (($x234 (or (not (= ?x194 0.0)) (not $x233))))
 (let ((?x246 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x176 (= ?x246 0)))
 (let ((?x324 (* d00 a)))
 (let ((?x467 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x324)))
 (and (= ?x467 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x176 $x234))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x296 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x396 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x193 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x494 (+ (* 2.0 (* (to_real y) ?x73)) ?x175 ?x193 ?x212 ?x396 (* (to_real d) ?x73))))
 (let ((?x64 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x238 (* (- (/ 1.0 2.0)) ?x56)))
 (let ((?x509 (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 (to_real a) ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 (to_real a))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x61 ?x64)))))
 (let ((?x339 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 (to_real a) (to_real a) ?x64 ?x174))))
 (let ((?x343 (+ (* (/ 1.0 2.0) (* ?x56 ?x173 ?x174)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a) ?x174)) (* (- 1.0) (* ?x56 ?x73 ?x208)) (* ?x56 ?x64 ?x73) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 (to_real a) ?x64 ?x173 ?x174)) ?x339 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 (to_real a) ?x64 ?x73 ?x208)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 (to_real a) ?x64 ?x64 ?x73)))))
 (let (($x321 (not (= ?x343 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x195 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x200 (= ?x195 0)))
 (let (($x141 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let ((?x35 (* a00 d00)))
 (let (($x131 (= (+ ?x35 (* (- 1) (* a d00)) ?x99 (* 2 (* y b00))) 0)))
 (let (($x282 (and $x131 $x141 $x200 (or $x321 (not (= (* ?x509 ?x494) 0.0))))))
 (let ((?x95 (+ ?x212 ?x175 (* 2.0 (* ?x73 (+ ?x64 (* (/ 1.0 2.0) ?x56)))) (* (- 1.0) (* ?x174 (+ (to_real a) ?x61))))))
 (let ((?x133 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 (+ (to_real a) ?x61) (+ ?x64 (* (/ 1.0 2.0) ?x56))))))
 (let ((?x273 (* 2.0 (* ?x73 ?x64))))
 (let ((?x194 (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x64 ?x56 ?x56 ?x61 (to_real a)))) (+ ?x212 ?x175 ?x273 (* (- 1.0) (* ?x174 (to_real a)))))))
 (let (($x234 (or (not (= ?x194 0.0)) (not (= (* (+ ?x238 ?x133) ?x95) 0.0)))))
 (let ((?x246 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x176 (= ?x246 0)))
 (let ((?x324 (* d00 a)))
 (let (($x357 (= (+ (* 2 ?x98) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x324) 0)))
 (let (($x515 (and $x357 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x176 $x234)))
 (rewrite (= $x515 $x282))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x236 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x354 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x95 (+ ?x212 ?x175 ?x354 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x228 (* (/ 1.0 2.0) ?x56)))
 (let ((?x64 (to_real y)))
 (let ((?x190 (+ ?x64 ?x228)))
 (let ((?x61 (to_real b)))
 (let ((?x63 (to_real a)))
 (let ((?x492 (+ ?x63 ?x61)))
 (let ((?x238 (* (- (/ 1.0 2.0)) ?x56)))
 (let (($x233 (= (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x492 ?x190))) ?x95) 0.0)))
 (let ((?x194 (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x64 ?x56 ?x56 ?x61 ?x63))) (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x174 ?x63))))))
 (let (($x234 (or (not (= ?x194 0.0)) (not $x233))))
 (let ((?x246 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x176 (= ?x246 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x446 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x446 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x176 $x234))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x422 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x354 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x95 (+ ?x212 ?x175 ?x354 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x228 (* (/ 1.0 2.0) ?x56)))
 (let ((?x64 (to_real y)))
 (let ((?x190 (+ ?x64 ?x228)))
 (let ((?x61 (to_real b)))
 (let ((?x63 (to_real a)))
 (let ((?x492 (+ ?x63 ?x61)))
 (let ((?x238 (* (- (/ 1.0 2.0)) ?x56)))
 (let (($x233 (= (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x492 ?x190))) ?x95) 0.0)))
 (let ((?x194 (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x64 ?x56 ?x56 ?x61 ?x63))) (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x174 ?x63))))))
 (let (($x234 (or (not (= ?x194 0.0)) (not $x233))))
 (let ((?x246 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x176 (= ?x246 0)))
 (let ((?x324 (* d00 a)))
 (let ((?x467 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x324)))
 (let (($x515 (and (= ?x467 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x176 $x234)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x225 (and (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) ?x324)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x176 $x234)))
 (rewrite (= $x225 $x515))))))))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x64 (to_real y)))
 (let ((?x72 (+ ?x64 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x60 (* (to_real (- 1)) ?x58)))
 (let ((?x35 (* a00 d00)))
 (let ((?x76 (to_real ?x35)))
 (let ((?x77 (+ (to_real (* (- 2) b00 y00)) ?x76 (* ?x57 (to_real b00) ?x72))))
 (let ((?x85 (* (- ?x77 (to_real (* (+ a b) d00))) (- ?x60 (* (to_real (+ a b)) ?x62 ?x58 ?x58 ?x72)))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x70 (= (* (to_real ?x39) (- ?x60 (* (to_real a) ?x62 ?x58 ?x58 ?x64))) ?x69)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x70) (not (= ?x85 ?x69)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x347 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x354 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x174 (to_real d00)))
 (let ((?x173 (to_real a00)))
 (let ((?x175 (* ?x173 ?x174)))
 (let ((?x208 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x209 (* ?x73 ?x208)))
 (let ((?x212 (* (- 2.0) ?x209)))
 (let ((?x95 (+ ?x212 ?x175 ?x354 (* (- 1.0) (* ?x174 (+ (to_real a) (to_real b)))))))
 (let ((?x56 (to_real d)))
 (let ((?x228 (* (/ 1.0 2.0) ?x56)))
 (let ((?x64 (to_real y)))
 (let ((?x190 (+ ?x64 ?x228)))
 (let ((?x61 (to_real b)))
 (let ((?x63 (to_real a)))
 (let ((?x492 (+ ?x63 ?x61)))
 (let ((?x238 (* (- (/ 1.0 2.0)) ?x56)))
 (let (($x233 (= (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x61 ?x492 ?x190))) ?x95) 0.0)))
 (let ((?x194 (* (+ ?x238 (* (- (/ 1.0 8.0)) (* ?x64 ?x56 ?x56 ?x61 ?x63))) (+ ?x212 ?x175 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x174 ?x63))))))
 (let (($x234 (or (not (= ?x194 0.0)) (not $x233))))
 (let ((?x246 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x176 (= ?x246 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x98 (* b00 y00)))
 (let ((?x99 (* (- 2) ?x98)))
 (let (($x446 (= (+ ?x99 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x225 (and $x446 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x176 $x234)))
 (let ((?x69 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x72 (+ ?x64 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x60 (* (to_real (- 1)) ?x58)))
 (let ((?x76 (to_real ?x35)))
 (let ((?x81 (- (+ (to_real (* (- 2) b00 y00)) ?x76 (* ?x57 ?x73 ?x72)) (to_real (* (+ a b) d00)))))
 (let (($x86 (= (* ?x81 (- ?x60 (* (to_real (+ a b)) ?x62 ?x58 ?x58 ?x72))) ?x69)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x71 (not (= (* (to_real ?x39) (- ?x60 (* ?x63 ?x62 ?x58 ?x58 ?x64))) ?x69))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x89 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or $x71 (not $x86)))))
 (rewrite (= $x89 $x225)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x480 (mp (mp @x91 (quant-intro (proof-bind ?x347) (= $x90 $x236)) $x236) (rewrite (= $x236 $x236)) $x236)))
 (let ((@x424 (mp (mp @x480 (quant-intro (proof-bind ?x422) (= $x236 $x248)) $x248) (quant-intro (proof-bind ?x296) (= $x248 $x421)) $x421)))
 (let ((@x252 (mp (mp~ @x424 (sk (~ $x421 $x291)) $x291) (rewrite (= $x291 $x129)) $x129)))
 (let ((@x728 (mp (and-elim @x252 $x108) @x727 $x260)))
 (let ((@x732 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x260) $x302)) @x728 $x302)))
 (let (($x398 (<= ?x122 0)))
 (let ((@x729 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x260) $x398)) @x728 $x398)))
 (let (($x366 (>= ?x199 0)))
 (let (($x94 (= 0 ?x199)))
 (let ((@x278 (mp (and-elim @x252 $x463) (symm (commutativity (= $x94 $x463)) (= $x463 $x94)) $x94)))
 (let ((@x570 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x366)) @x278 $x366)))
 (let (($x102 (<= ?x199 0)))
 (let ((@x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x102)) @x278 $x102)))
 (let ((@x735 (unit-resolution ((_ th-lemma arith) (or $x306 (not $x302) (not $x398) (not $x366) (not $x102))) @x275 @x570 @x729 @x732 (hypothesis (not $x306)) false)))
 (let (($x442 (= 0.0 ?x425)))
 (let (($x769 (not $x442)))
 (let ((@x771 (monotonicity (symm (commutativity (= $x442 $x426)) (= $x426 $x442)) (= $x491 $x769))))
 (let (($x242 (= 0.0 ?x482)))
 (let (($x159 (<= ?x482 0.0)))
 (let ((?x583 (+ (* (/ 1.0 2.0) ?x186) (* (/ 1.0 8.0) ?x521) (* (/ 1.0 8.0) (* ?x157 ?x186 ?x186 ?x344 ?x472)) (* (/ 1.0 16.0) (* ?x157 ?x186 ?x186 ?x186 ?x344)) (* (/ 1.0 16.0) ?x355))))
 (let (($x584 (<= ?x583 0.0)))
 (let (($x697 (not $x159)))
 (let ((@x698 (hypothesis $x697)))
 (let (($x530 (<= (+ ?x116 (* (- 2.0) (* ?x73 ?x472)) ?x534 (* 2.0 ?x209) ?x267 ?x532) 0.0)))
 (let ((?x180 (+ ?x267 (* (- 1.0) ?x413))))
 (let (($x544 (<= ?x180 0.0)))
 (let (($x197 (= ?x180 0.0)))
 (let ((@x490 ((_ th-lemma arith) $x197)))
 (let ((?x397 (+ (* (- 1.0) (to_real ?x98)) ?x209)))
 (let (($x543 (<= ?x397 0.0)))
 (let (($x334 (= 0.0 ?x397)))
 (let ((@x301 (symm (commutativity (= $x334 (= ?x397 0.0))) (= (= ?x397 0.0) $x334))))
 (let ((@x381 (mp ((_ th-lemma arith) (= ?x397 0.0)) @x301 $x334)))
 (let ((?x160 (* ?x73 ?x472)))
 (let ((?x498 (+ ?x160 (* (- 1.0) (to_real (* b00 y!0))))))
 (let (($x528 (>= ?x498 0.0)))
 (let (($x300 (= 0.0 ?x498)))
 (let ((@x304 (symm (commutativity (= $x300 (= ?x498 0.0))) (= (= ?x498 0.0) $x300))))
 (let ((@x518 (mp ((_ th-lemma arith) (= ?x498 0.0)) @x304 $x300)))
 (let ((?x481 (+ ?x116 (* (- 1.0) (to_real (* d00 a!3))))))
 (let (($x529 (<= ?x481 0.0)))
 (let (($x501 (= 0.0 ?x481)))
 (let ((@x167 (symm (commutativity (= $x501 (= ?x481 0.0))) (= (= ?x481 0.0) $x501))))
 (let ((@x166 (mp ((_ th-lemma arith) (= ?x481 0.0)) @x167 $x501)))
 (let (($x259 (>= ?x111 0)))
 (let (($x219 (= 0 ?x111)))
 (let ((@x541 (mp (and-elim @x252 $x320) (symm (commutativity (= $x219 $x320)) (= $x320 $x219)) $x219)))
 (let ((@x561 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x219) $x259)) @x541 $x259)))
 (let ((?x414 (+ ?x175 (* (- 1.0) ?x76))))
 (let (($x401 (>= ?x414 0.0)))
 (let (($x258 (= 0.0 ?x414)))
 (let ((@x371 (symm (commutativity (= $x258 (= ?x414 0.0))) (= (= ?x414 0.0) $x258))))
 (let ((@x372 (mp ((_ th-lemma arith) (= ?x414 0.0)) @x371 $x258)))
 (let ((?x365 (+ (* (- 1.0) ?x149) ?x410)))
 (let (($x256 (>= ?x365 0.0)))
 (let (($x382 (= ?x365 0.0)))
 (let ((@x123 ((_ th-lemma arith) $x382)))
 (let ((@x571 ((_ th-lemma arith) @x570 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x382) $x256)) @x123 $x256) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x258) $x401)) @x372 $x401) @x561 (hypothesis (not $x530)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x501) $x529)) @x166 $x529) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x300) $x528)) @x518 $x528) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x334) $x543)) @x381 $x543) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x197) $x544)) @x490 $x544) false)))
 (let ((@x572 (lemma @x571 $x530)))
 (let ((@x701 (unit-resolution ((_ th-lemma arith) (or (not $x530) $x584 $x159)) @x698 @x572 (hypothesis (not $x584)) false)))
 (let (($x428 (<= ?x399 0.0)))
 (let (($x283 (>= ?x180 0.0)))
 (let (($x151 (<= ?x365 0.0)))
 (let (($x125 (<= ?x498 0.0)))
 (let (($x511 (>= ?x481 0.0)))
 (let (($x390 (<= ?x414 0.0)))
 (let (($x456 (>= ?x397 0.0)))
 (let (($x359 (<= ?x111 0)))
 (let ((@x540 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x219) $x359)) @x541 $x359)))
 (let ((@x539 ((_ th-lemma arith) @x540 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x334) $x456)) @x381 $x456) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x258) $x390)) @x372 $x390) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x501) $x511)) @x166 $x511) @x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x300) $x125)) @x518 $x125) (hypothesis (not $x428)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x382) $x151)) @x123 $x151) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x197) $x283)) @x490 $x283) false)))
 (let ((@x538 (lemma @x539 $x428)))
 (let ((@x713 (unit-resolution ((_ th-lemma arith) (or (not $x584) (not $x530) $x159 (not $x428))) @x698 @x538 @x572 (unit-resolution (lemma @x701 (or $x584 $x159)) @x698 $x584) false)))
 (let (($x400 (>= ?x482 0.0)))
 (let (($x600 (>= ?x583 0.0)))
 (let (($x605 (not $x400)))
 (let ((@x606 (hypothesis $x605)))
 (let ((@x642 (unit-resolution ((_ th-lemma arith) (or (not $x530) $x600 $x400)) @x606 @x572 (hypothesis (not $x600)) false)))
 (let ((@x636 (unit-resolution ((_ th-lemma arith) (or (not $x600) (not $x530) $x400 (not $x428))) @x606 @x538 @x572 (unit-resolution (lemma @x642 (or $x600 $x400)) @x606 $x600) false)))
 (let ((@x759 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x242 $x697 $x605)) (lemma @x636 $x400) (or $x242 $x697))))
 (let ((@x763 (mp (unit-resolution @x759 (lemma @x713 $x159) $x242) (commutativity (= $x242 $x356)) $x356)))
 (let ((@x774 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x442 $x753 (not $x306))) (mp (unit-resolution (and-elim @x252 $x251) @x763 $x491) @x771 $x769) (or $x753 (not $x306)))))
 (let (($x718 (not $x102)))
 (let (($x715 (not $x302)))
 (let (($x717 (not $x366)))
 (let (($x716 (not $x398)))
 (let (($x796 (or $x716 $x717 (not $x693) (not $x706) $x715 $x127 (not $x359) (not $x738) (not $x692) $x718 (not $x259) (not $x739) (not $x707))))
 (let ((@x831 (unit-resolution ((_ th-lemma arith) $x796) @x540 @x561 @x275 @x570 @x729 @x732 (unit-resolution @x774 (lemma @x735 $x306) $x753) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x691) $x692)) @x802 $x692) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x691) $x693)) @x802 $x693) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x705) $x706)) @x810 $x706) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x705) $x707)) @x810 $x707) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x737) $x738)) @x823 $x738) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x737) $x739)) @x823 $x739) false)))
 (unit-resolution ((_ th-lemma arith) $x704) (lemma @x831 (not $x704)) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       101
 :arith-eq-adapter                94
 :arith-bound-propagations-cheap  69
 :arith-bound-propagations-lp     9
 :arith-branch                    2
 :arith-conflicts                 183
 :arith-diseq                     49
 :arith-gcd-calls                 9
 :arith-grobner-calls             10
 :arith-grobner-conflicts         3
 :arith-horner-calls              10
 :arith-horner-cross-nested-forms 44
 :arith-lower                     135
 :arith-make-feasible             112
 :arith-max-columns               84
 :arith-max-rows                  29
 :arith-nla-explanations          331
 :arith-nla-lemmas                177
 :arith-patches                   9
 :arith-patches-success           7
 :arith-propagations              69
 :arith-upper                     142
 :conflicts                       21
 :decisions                       238
 :del-clause                      322
 :final-checks                    77
 :max-memory                      4.40
 :memory                          3.13
 :minimized-lits                  2
 :mk-bool-var                     486
 :mk-clause                       426
 :num-allocs                      3521346
 :num-checks                      1
 :propagations                    265
 :rlimit-count                    8749
 :time                            0.04
 :total-time                      0.04)
