unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x442 (+ c!3 k!2)))
 (let ((?x374 (+ m!1 k!2)))
 (let ((?x372 (+ 1 n!0)))
 (let ((?x366 (+ 6 m!1)))
 (let ((?x382 (+ (* ?x372 ?x374 ?x374 ?x374 ?x442 ?x442 ?x442) (* ?x372 ?x372 ?x372 ?x366 ?x366 ?x366 ?x374 ?x442) (* ?x372 ?x372 ?x372 ?x366 ?x366 ?x366 ?x374 ?x374 ?x442) (* (- 1) (* ?x372 ?x374 ?x374 ?x374 ?x442 ?x442)))))
 (let (($x564 (<= ?x382 0)))
 (let ((?x148 (* (- 9) (* n!0 c!3))))
 (let ((?x354 (* 9 n!0)))
 (let ((?x198 (* k!2 k!2)))
 (let ((?x266 (+ ?x198 ?x354 (* (- 18) c!3) ?x148 (* (- 5) k!2))))
 (let (($x337 (<= ?x266 (- 4))))
 (let (($x267 (= ?x266 (- 4))))
 (let ((?x465 (* (- 32) k!2)))
 (let ((?x462 (* (- 27) c!3)))
 (let ((?x271 (* (- 5) m!1)))
 (let ((?x171 (* m!1 m!1)))
 (let ((?x407 (+ 13 ?x171 ?x198 ?x354 ?x271 (* (- 9) (* n!0 k!2)) (* 2 (* m!1 k!2)) ?x462 ?x148 ?x465)))
 (let ((?x335 (* ?x382 ?x407)))
 (let (($x396 (= ?x335 0)))
 (let (($x336 (not $x396)))
 (let ((?x276 (* (- 1) k!2)))
 (let ((?x298 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x276)))
 (let (($x164 (= ?x298 (- 1))))
 (let ((?x350 (* n!0 k!2)))
 (let ((?x279 (+ (* 2 n!0) ?x350 (* (- 3) c!3) ?x276)))
 (let (($x280 (= ?x279 (- 1))))
 (let ((?x243 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x249 (= ?x243 (- 6))))
 (let (($x397 (and $x249 $x267 $x280 $x164 $x336)))
 (let ((?x172 (+ 13 ?x462 ?x465 ?x271 ?x354 ?x198 (* (- 9) (* k!2 n!0)) (* (- 9) (* c!3 n!0)) (* 2 (* k!2 m!1)) ?x171)))
 (let ((?x186 (+ k!2 m!1)))
 (let ((?x466 (+ (* ?x372 ?x372 ?x372 ?x366 ?x366 ?x366 ?x186 ?x186 ?x442) (* (- 1) (* ?x372 ?x186 ?x186 ?x186 ?x442 ?x442)) (* ?x372 ?x186 ?x186 ?x186 ?x442 ?x442 ?x442) (* ?x372 ?x372 ?x372 ?x366 ?x366 ?x366 ?x186 ?x442))))
 (let (($x277 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x329 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x198) (* 9 (* c!3 n!0)))))
 (let (($x141 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x329 4) $x277 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x466 ?x172) 0)))))
 (let (($x103 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x487 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x480 (+ (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x72 ?x68) (* (- 1) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68)) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68) (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x68))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x480 ?x482) 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x392 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x99 (* (- 18) c)))
 (let ((?x319 (+ 13 ?x99 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x480 (+ (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x72 ?x68) (* (- 1) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68)) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68) (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x68))))
 (let (($x305 (not (= (* ?x480 ?x319) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x105 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x105 $x294 $x305)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x242 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x487 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x480 (+ (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x72 ?x68) (* (- 1) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68)) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68) (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x68))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 (* c n))) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x331 (and $x125 $x209 $x261 $x299 (not (= (* ?x480 ?x482) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x99 (* (- 18) c)))
 (let ((?x319 (+ 13 ?x99 (* (- 23) k) (* (- 9) (* ?x342 ?x68)) ?x427 ?x48 ?x78)))
 (let (($x305 (not (= (* ?x480 ?x319) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x105 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x316 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x105 $x294 $x305)))
 (rewrite (= $x316 $x331))))))))))))))))))))))))))))
 ))
 (let (($x306 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x99 (* (- 18) c)))
 (let ((?x319 (+ 13 ?x99 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x480 (+ (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x72 ?x68) (* (- 1) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68)) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68) (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x68))))
 (let (($x305 (not (= (* ?x480 ?x319) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x156 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x217 (= (+ ?x99 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x217 $x156 $x294 $x305)))))))))))))))) :qid k!34))
 ))
 (let ((?x393 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x99 (* (- 18) c)))
 (let ((?x319 (+ 13 ?x99 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x480 (+ (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x72 ?x68) (* (- 1) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68)) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68) (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x68))))
 (let (($x305 (not (= (* ?x480 ?x319) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x105 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x316 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x105 $x294 $x305)))
 (let (($x156 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x217 (= (+ ?x99 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x233 (and $x125 $x217 $x156 $x294 $x305)))
 (rewrite (= $x233 $x316))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (- (* ?x68 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x72 ?x72 ?x72 ?x70))))
 (let ((?x86 (+ ?x83 (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x70) (* ?x68 ?x72 ?x80 ?x80 ?x80 ?x70 ?x70 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x86) 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x220 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x99 (* (- 18) c)))
 (let ((?x319 (+ 13 ?x99 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x480 (+ (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x72 ?x68) (* (- 1) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68)) (* ?x342 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68) (* ?x342 ?x342 ?x342 ?x487 ?x487 ?x487 ?x72 ?x68))))
 (let (($x305 (not (= (* ?x480 ?x319) 0))))
 (let (($x294 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x156 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x217 (= (+ ?x99 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x233 (and $x125 $x217 $x156 $x294 $x305)))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x83 (- (* ?x68 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x72 ?x72 ?x72 ?x70))))
 (let ((?x86 (+ ?x83 (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x70) (* ?x68 ?x72 ?x80 ?x80 ?x80 ?x70 ?x70 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x86) 0))))))
 (rewrite (= $x91 $x233)))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x312 (mp (mp @x93 (quant-intro (proof-bind ?x220) (= $x92 $x306)) $x306) (rewrite (= $x306 $x306)) $x306)))
 (let ((@x326 (mp (mp @x312 (quant-intro (proof-bind ?x393) (= $x306 $x392)) $x392) (quant-intro (proof-bind ?x242) (= $x392 $x103)) $x103)))
 (let ((@x226 (mp (mp~ @x326 (sk (~ $x103 $x141)) $x141) (rewrite (= $x141 $x397)) $x397)))
 (let ((@x288 (and-elim @x226 $x267)))
 (let ((@x95 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x267) $x337)) @x288 $x337)))
 (let (($x394 (>= ?x266 (- 4))))
 (let ((@x537 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x267) $x394)) @x288 $x394)))
 (let (($x389 (<= ?x243 (- 6))))
 (let ((@x359 (and-elim @x226 $x249)))
 (let ((@x343 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x249) $x389)) @x359 $x389)))
 (let (($x390 (>= ?x243 (- 6))))
 (let ((@x441 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x249) $x390)) @x359 $x390)))
 (let (($x388 (<= ?x279 (- 1))))
 (let ((@x289 (and-elim @x226 $x280)))
 (let ((@x418 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x388)) @x289 $x388)))
 (let (($x383 (>= ?x279 (- 1))))
 (let ((@x237 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x383)) @x289 $x383)))
 (let (($x188 (<= ?x298 (- 1))))
 (let ((@x290 (and-elim @x226 $x164)))
 (let ((@x424 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x188)) @x290 $x188)))
 (let (($x286 (>= ?x298 (- 1))))
 (let ((@x183 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x286)) @x290 $x286)))
 (let (($x549 (not $x564)))
 (let ((@x552 (hypothesis $x549)))
 (let (($x130 (not (<= ?x335 0))))
 (let (($x179 (>= ?x335 0)))
 (let (($x560 (>= ?x382 0)))
 (let (($x550 (not $x560)))
 (let (($x558 (= ?x382 0)))
 (let (($x519 (not $x558)))
 (let (($x475 (not $x179)))
 (let ((@x310 (hypothesis $x475)))
 (let ((@x557 ((_ th-lemma arith farkas 1 1 1) @x310 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x519 $x560)) (hypothesis $x558) $x560) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x519 $x564)) (hypothesis $x558) $x564) false)))
 (let ((@x553 ((_ th-lemma arith) @x310 @x552 @x183 @x424 @x441 @x343 @x237 @x418 @x183 @x424 @x237 @x418 @x441 @x343 @x537 @x95 false)))
 (let ((@x513 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x558 $x549 $x550)) (unit-resolution (lemma @x553 (or $x564 $x179)) @x310 $x564) (unit-resolution (lemma @x557 (or $x519 $x179)) @x310 $x519) $x550)))
 (let ((@x530 ((_ th-lemma arith) @x310 @x513 @x183 @x424 @x237 @x418 @x537 @x95 @x183 @x424 @x237 @x418 @x237 @x418 @x183 @x424 @x183 @x424 @x237 @x418 @x237 @x418 @x441 @x343 @x183 @x424 @x183 @x424 @x237 @x418 @x237 @x418 @x441 @x343 @x183 @x424 @x441 @x343 @x537 @x95 false)))
 (let ((@x551 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x396 $x130 $x475)) (and-elim @x226 $x336) (or $x130 $x475))))
 (let ((@x412 (unit-resolution @x551 (lemma @x530 $x179) $x130)))
 (let ((@x151 ((_ th-lemma arith) @x412 @x552 @x237 @x418 @x183 @x424 @x237 @x418 @x183 @x424 @x237 @x418 @x183 @x424 @x183 @x424 @x183 @x424 @x183 @x424 @x441 @x343 @x237 @x418 @x237 @x418 @x183 @x424 @x237 @x418 @x441 @x343 @x237 @x418 @x441 @x343 @x537 @x95 false)))
 (let ((@x597 ((_ th-lemma arith) @x412 (hypothesis $x550) @x237 @x418 @x183 @x424 @x237 @x418 @x183 @x424 @x237 @x418 @x183 @x424 @x237 @x418 @x183 @x424 @x183 @x424 @x537 @x95 @x183 @x424 @x183 @x424 @x441 @x343 @x237 @x418 @x237 @x418 @x183 @x424 @x237 @x418 @x441 @x343 @x237 @x418 @x441 @x343 @x537 @x95 false)))
 ((_ th-lemma arith farkas 1 1 1) @x412 (lemma @x597 $x560) (lemma @x151 $x564) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 33
 :arith-assert-diseq        15
 :arith-assert-lower        179
 :arith-assert-upper        111
 :arith-bound-prop          3
 :arith-branch-var          8
 :arith-conflicts           18
 :arith-eq-adapter          15
 :arith-fixed-eqs           30
 :arith-gcd-tests           61
 :arith-gomory-cuts         3
 :arith-grobner             15
 :arith-ineq-splits         8
 :arith-max-min             1166
 :arith-nonlinear-bounds    37
 :arith-nonlinear-horner    155
 :arith-num-rows            11
 :arith-offset-eqs          1
 :arith-patches             21
 :arith-patches_succ        6
 :arith-pivots              185
 :arith-pseudo-nonlinear    25
 :arith-row-summations      912
 :arith-tableau-max-columns 43
 :arith-tableau-max-rows    11
 :conflicts                 18
 :decisions                 80
 :del-clause                63
 :final-checks              51
 :max-memory                3.91
 :memory                    3.16
 :minimized-lits            2
 :mk-bool-var               106
 :mk-clause                 88
 :num-allocs                24147931
 :num-checks                1
 :propagations              71
 :rlimit-count              300578
 :time                      0.21
 :total-time                0.21)
