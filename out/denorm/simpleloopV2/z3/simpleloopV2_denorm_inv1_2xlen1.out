unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x213 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x106 (>= ?x213 0)))
 (let (($x133 (= ?x213 0)))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x225 (+ ?x56 ?x63 y!0 x!1)))
 (let ((?x86 (+ 1 y!0)))
 (let ((?x93 (+ (- 1) x!1)))
 (let ((?x312 (* ?x93 ?x93 ?x86 ?x86 ?x86 ?x86 ?x86 ?x225)))
 (let (($x313 (= ?x312 0)))
 (let (($x314 (not $x313)))
 (let ((?x181 (+ 1 x!1)))
 (let ((?x109 (+ (- 1) y!0)))
 (let ((?x138 (* ?x109 ?x109 ?x109 ?x109 ?x109 ?x181 ?x181 ?x225)))
 (let (($x146 (= ?x138 0)))
 (let (($x155 (or (not $x146) $x314)))
 (let (($x166 (and $x133 $x155)))
 (let (($x92 (= (* ?x93 ?x93 ?x86 ?x86 ?x86 ?x86 ?x86 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x234 (= (* ?x109 ?x109 ?x109 ?x109 ?x109 ?x181 ?x181 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x227 (and (= (+ x!1 y!0 ?x56 ?x63) 0) (or (not $x234) (not $x92)))))
 (let (($x204 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x62 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x80 ?x77) 0)) (not (= (* ?x72 ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (and $x82 $x62)))))))))) :qid k!27))
 ))
 (let (($x239 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x197 (+ x ?x56 ?x63 y)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x64 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x80 ?x197) 0)) (not (= (* ?x72 ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x197) 0)))))
 (and (= ?x197 0) $x64))))))))) :qid k!27))
 ))
 (let ((?x205 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x62 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x80 ?x77) 0)) (not (= (* ?x72 ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (let (($x203 (and $x82 $x62)))
 (let (($x187 (= (* ?x72 ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 (+ x ?x56 ?x63 y)) 0)))
 (let (($x131 (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x80 (+ x ?x56 ?x63 y)) 0)))
 (let (($x75 (and (= (+ x ?x56 ?x63 y) 0) (or (not $x131) (not $x187)))))
 (rewrite (= $x75 $x203))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x46 (- y 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x38 ?x46 ?x46 ?x46 ?x43 ?x43 ?x46 ?x46)))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 ?x39 ?x39 ?x34 ?x34 ?x39 ?x39)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))))))) :qid k!27))
 ))
 (let ((?x236 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x197 (+ x ?x56 ?x63 y)))
 (let ((?x118 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x80 (+ 1 x)))
 (let ((?x206 (+ (- 1) y)))
 (let (($x64 (or (not (= (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x80 ?x80 ?x197) 0)) (not (= (* ?x72 ?x72 ?x118 ?x118 ?x118 ?x118 ?x118 ?x197) 0)))))
 (let (($x75 (and (= ?x197 0) $x64)))
 (let ((?x46 (- y 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x38 ?x46 ?x46 ?x46 ?x43 ?x43 ?x46 ?x46)))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 ?x39 ?x39 ?x34 ?x34 ?x39 ?x39)))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))
 (rewrite (= $x52 $x75))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x193 (mp (mp @x54 (quant-intro (proof-bind ?x236) (= $x53 $x239)) $x239) (rewrite (= $x239 $x239)) $x239)))
 (let ((@x226 (mp~ (mp @x193 (quant-intro (proof-bind ?x205) (= $x239 $x204)) $x204) (sk (~ $x204 $x227)) $x227)))
 (let ((@x311 (mp @x226 (rewrite (= $x227 $x166)) $x166)))
 (let ((@x315 (and-elim @x311 $x133)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x133) $x106)) @x315 $x106)))
 (let (($x212 (<= ?x213 0)))
 (let ((@x104 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x133) $x212)) @x315 $x212)))
 (let (($x292 (not (<= ?x312 0))))
 (let (($x59 (>= ?x312 0)))
 (let (($x214 (>= ?x138 0)))
 (let (($x198 (<= ?x138 0)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x146 (not $x198) (not $x214))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x198)) @x104 @x114 false) $x198) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x214)) @x104 @x114 false) $x214) $x146)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x313 $x292 (not $x59))) (unit-resolution (and-elim @x311 $x155) @x297 $x314) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x59)) @x104 @x114 false) $x59) $x292)))
 ((_ th-lemma arith farkas 1 1 1) @x296 @x104 @x114 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             48
 :arith-nonlinear-horner    18
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :final-checks              4
 :max-memory                3.54
 :memory                    3.07
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                1171176
 :num-checks                1
 :propagations              14
 :rlimit-count              1390
 :time                      0.01
 :total-time                0.01)
