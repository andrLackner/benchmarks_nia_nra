unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(declare-fun v!0 () Int)
(proof
(let ((?x762 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x543 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 1) (* v!0 v!0)) (* (- 2) u!1) (* 2 v!0) (* (- 4) r!2) ?x762)))
 (let (($x369 (>= ?x543 0)))
 (let (($x736 (= ?x543 0)))
 (let ((?x321 (* (- 1) ?x762)))
 (let ((?x385 (* 4 r!2)))
 (let ((?x764 (* (- 2) v!0)))
 (let ((?x711 (* 2 u!1)))
 (let ((?x106 (* v!0 v!0)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x271 (+ ?x100 ?x116 ?x41 ?x46 ?x192 ?x106 ?x711 ?x764 ?x385 ?x321)))
 (let ((?x599 (* (- 1) v!0)))
 (let ((?x766 (+ ?x599 r!2)))
 (let ((?x548 (+ 2 v!0)))
 (let ((?x760 (* ?x548 ?x548 ?x766 ?x766 ?x766 ?x271 u!1)))
 (let (($x665 (= ?x760 0)))
 (let (($x742 (not $x665)))
 (let ((?x737 (+ u!1 r!2)))
 (let ((?x664 (+ 2 u!1)))
 (let ((?x446 (* ?x664 ?x737 ?x737 ?x737 ?x271 v!0 v!0)))
 (let (($x109 (= ?x446 0)))
 (let (($x464 (or (not $x109) $x742)))
 (let (($x421 (and $x736 $x464)))
 (let ((?x470 (+ ?x385 ?x711 ?x764 ?x100 ?x116 ?x41 ?x321 ?x106 ?x46 ?x192)))
 (let ((?x576 (+ r!2 u!1)))
 (let ((?x784 (+ r!2 ?x599)))
 (let (($x829 (or (not (= (* ?x548 ?x548 ?x784 ?x784 ?x784 ?x470 u!1) 0)) (not (= (* ?x664 ?x576 ?x576 ?x576 ?x470 v!0 v!0) 0)))))
 (let (($x177 (and (= ?x470 0) $x829)))
 (let (($x403 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x129 (+ 2 u)))
 (let ((?x555 (+ r (* (- 1) v))))
 (let ((?x622 (+ 2 v)))
 (let (($x748 (or (not (= (* ?x622 ?x622 ?x555 ?x555 ?x555 ?x198 u) 0)) (not (= (* ?x129 ?x71 ?x71 ?x71 ?x198 v v) 0)))))
 (let (($x203 (= ?x198 0)))
 (and $x203 $x748)))))))))))))))))))) :qid k!28))
 ))
 (let (($x627 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x293 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x129 (+ 2 u)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x770 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x555 (+ r (* (- 1) v))))
 (let ((?x622 (+ 2 v)))
 (let (($x663 (or (not (= (* ?x622 ?x622 ?x555 ?x555 ?x555 ?x770 u) 0)) (not (= (* ?x129 ?x71 ?x71 ?x71 ?x293 v v) 0)))))
 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x663)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x397 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x198 (+ ?x28 ?x36 ?x146 ?x100 ?x116 ?x41 ?x170 ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x129 (+ 2 u)))
 (let ((?x555 (+ r (* (- 1) v))))
 (let ((?x622 (+ 2 v)))
 (let (($x748 (or (not (= (* ?x622 ?x622 ?x555 ?x555 ?x555 ?x198 u) 0)) (not (= (* ?x129 ?x71 ?x71 ?x71 ?x198 v v) 0)))))
 (let (($x203 (= ?x198 0)))
 (let (($x275 (and $x203 $x748)))
 (let ((?x293 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* ?x129 ?x129)) ?x45 ?x46 ?x192)))
 (let ((?x770 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* ?x622 ?x622) ?x46 ?x192)))
 (let (($x663 (or (not (= (* ?x622 ?x622 ?x555 ?x555 ?x555 ?x770 u) 0)) (not (= (* ?x129 ?x71 ?x71 ?x71 ?x293 v v) 0)))))
 (let (($x417 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x663)))
 (rewrite (= $x417 $x275)))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((r Int) (u Int) (v Int) )(! (let ((?x75 (+ u 2)))
 (let ((?x71 (+ r u)))
 (let ((?x86 (- (* 0 ?x71 ?x75 ?x75 ?x75 v v) (* ?x71 ?x71 ?x71 ?x75 v v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 ?x75))))
 (let ((?x87 (* (- (+ (- (+ (- ?x77 ?x38) ?x41) (* ?x75 ?x75)) ?x45 ?x46) ?x48) ?x86)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x67 (- (* 0 ?x52 u u u ?x57 ?x57) (* ?x52 ?x52 ?x52 u ?x57 ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x69 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x67) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x69) (not (= ?x87 0)))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x676 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x192 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x146 (* (- 2) v)))
 (let ((?x116 (* (- 2) u00)))
 (let ((?x100 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x293 (+ 4 ?x28 (* 6 u) ?x100 ?x116 ?x146 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x192)))
 (let ((?x71 (+ r u)))
 (let ((?x129 (+ 2 u)))
 (let ((?x43 (* u u)))
 (let ((?x170 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x770 (+ (- 4) ?x28 (* (- 6) v) ?x100 ?x116 ?x36 ?x41 ?x170 (* (+ 2 v) (+ 2 v)) ?x46 ?x192)))
 (let ((?x555 (+ r (* (- 1) v))))
 (let ((?x622 (+ 2 v)))
 (let (($x663 (or (not (= (* ?x622 ?x622 ?x555 ?x555 ?x555 ?x770 u) 0)) (not (= (* ?x129 ?x71 ?x71 ?x71 ?x293 v v) 0)))))
 (let (($x417 (and (= (+ ?x28 ?x100 ?x116 ?x36 ?x146 ?x41 ?x170 ?x45 ?x46 ?x192) 0) $x663)))
 (let ((?x75 (+ u 2)))
 (let ((?x86 (- (* 0 ?x71 ?x75 ?x75 ?x75 v v) (* ?x71 ?x71 ?x71 ?x75 v v))))
 (let ((?x38 (* 2 v)))
 (let ((?x77 (+ (- (- (* 4 ?x71) (* 4 r00)) (* 2 u00)) (* 2 ?x75))))
 (let ((?x87 (* (- (+ (- (+ (- ?x77 ?x38) ?x41) (* ?x75 ?x75)) ?x45 ?x46) ?x48) ?x86)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x67 (- (* 0 ?x52 u u u ?x57 ?x57) (* ?x52 ?x52 ?x52 u ?x57 ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x69 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x67) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x91 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x69) (not (= ?x87 0))))))
 (rewrite (= $x91 $x417)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x171 (mp (mp @x93 (quant-intro (proof-bind ?x676) (= $x92 $x627)) $x627) (rewrite (= $x627 $x627)) $x627)))
 (let ((@x746 (mp~ (mp @x171 (quant-intro (proof-bind ?x397) (= $x627 $x403)) $x403) (sk (~ $x403 $x177)) $x177)))
 (let ((@x734 (mp @x746 (rewrite (= $x177 $x421)) $x421)))
 (let ((@x444 (and-elim @x734 $x736)))
 (let ((@x453 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x736) $x369)) @x444 $x369)))
 (let (($x727 (<= ?x543 0)))
 (let ((@x827 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x736) $x727)) @x444 $x727)))
 (let (($x176 (not (<= ?x760 0))))
 (let (($x140 (>= ?x760 0)))
 (let (($x379 (>= ?x446 0)))
 (let (($x376 (<= ?x446 0)))
 (let ((@x636 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x109 (not $x376) (not $x379))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x376)) @x827 @x453 false) $x376) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x379)) @x827 @x453 false) $x379) $x109)))
 (let ((@x671 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x665 $x176 (not $x140))) (unit-resolution (and-elim @x734 $x464) @x636 $x742) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x140)) @x827 @x453 false) $x140) $x176)))
 ((_ th-lemma arith farkas 1 1 1) @x671 @x827 @x453 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        33
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             112
 :arith-nonlinear-bounds    16
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.60
 :memory                    19.11
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                500363
 :num-checks                1
 :propagations              14
 :rlimit-count              2315
 :time                      0.01
 :total-time                0.02)
