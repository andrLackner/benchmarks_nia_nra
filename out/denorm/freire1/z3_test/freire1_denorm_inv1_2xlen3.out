unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x515 (* 2 x!0)))
 (let ((?x326 (* r!1 r!1)))
 (let ((?x378 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x500 (+ r00 ?x87 ?x103 ?x378 ?x326 ?x515)))
 (let (($x177 (<= ?x500 0)))
 (let (($x274 (= ?x500 0)))
 (let ((?x430 (* r!1 x!0 x!0)))
 (let ((?x353 (* (- 5) ?x430)))
 (let ((?x422 (* (- 2) (* r!1 r!1 r!1 r!1))))
 (let ((?x320 (* (- 3) (* r!1 r!1 r!1))))
 (let ((?x394 (* r!1 x!0 x!0 x!0)))
 (let ((?x389 (* x!0 x!0 x!0)))
 (let ((?x388 (* 5 (* r!1 r!1 r!1 x!0))))
 (let ((?x414 (* (- 4) (* r!1 r!1 x!0 x!0))))
 (let ((?x375 (* r!1 r!1 x!0)))
 (let ((?x110 (* 7 ?x375)))
 (let ((?x351 (* r!1 x!0)))
 (let ((?x426 (* 2 ?x351)))
 (let ((?x330 (* (- 1) ?x326)))
 (let ((?x521 (* (- 1) (* x!0 x!0))))
 (let ((?x405 (* (- 1) ?x430)))
 (let ((?x428 (* 4 ?x375)))
 (let ((?x374 (* 6 ?x351)))
 (let ((?x73 (* (- 5) ?x326)))
 (let ((?x67 (* (- 2) r!1)))
 (let ((?x290 (* (+ ?x521 ?x67 ?x73 ?x374 ?x515 ?x428 ?x320 ?x405) (+ 1 ?x521 ?x330 ?x426 ?x110 ?x414 ?x388 ?x389 ?x394 ?x320 ?x422 ?x353) ?x500)))
 (let (($x229 (= ?x290 0)))
 (let (($x232 (not $x229)))
 (let (($x289 (and $x274 $x232)))
 (let ((?x241 (* (+ ?x67 ?x515 ?x73 ?x521 ?x405 ?x320 ?x374 ?x428) (+ 1 ?x330 ?x521 ?x353 ?x414 ?x320 ?x422 ?x426 ?x110 ?x388 ?x389 ?x394) (+ ?x378 ?x515 r00 ?x326 ?x87 ?x103))))
 (let (($x510 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x330 (* 2 x00) ?x36) 0)))
 (let (($x245 (and $x510 (not (= ?x241 0)))))
 (let (($x199 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x239 (* r r r)))
 (let ((?x466 (* (- 3) ?x239)))
 (let ((?x316 (* (- 1) (* x x))))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x472 (+ 1 ?x119 ?x316 (* (- 5) (* r x x)) (* (- 4) (* r r x x)) ?x466 (* (- 2) (* r r r r)) (* 2 (* r x)) (* 7 (* r r x)) (* 5 (* r r r x)) (* x x x) (* r x x x))))
 (let ((?x261 (* r r x)))
 (let ((?x337 (* 4 ?x261)))
 (let ((?x230 (* r x x)))
 (let ((?x409 (* (- 1) ?x230)))
 (let ((?x188 (* (- 2) r)))
 (let ((?x547 (+ ?x188 ?x32 (* (- 5) ?x30) ?x316 ?x409 ?x466 (* 6 (* r x)) ?x337)))
 (let (($x121 (= (+ r (* (- 2) x) (* (- 1) r00) ?x119 (* 2 x00) ?x36) 0)))
 (and $x121 (not (= (* ?x547 ?x472 ?x109) 0)))))))))))))))))))))) :qid k!26))
 ))
 (let (($x279 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x364 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x355 (+ x ?x66)))
 (let ((?x278 (+ 1 r)))
 (let ((?x88 (+ 1 (* (- 1) (* ?x278 ?x278 ?x355 ?x355)) (* ?x278 ?x355 ?x355 ?x355))))
 (let ((?x168 (* (+ (* 2 (* ?x278 ?x278 ?x355)) (* (- 1) (* ?x278 ?x355 ?x355))) ?x88 ?x364)))
 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) (not (= ?x168 0))))))))))))) :qid k!26))
 ))
 (let ((?x459 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x239 (* r r r)))
 (let ((?x466 (* (- 3) ?x239)))
 (let ((?x316 (* (- 1) (* x x))))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x472 (+ 1 ?x119 ?x316 (* (- 5) (* r x x)) (* (- 4) (* r r x x)) ?x466 (* (- 2) (* r r r r)) (* 2 (* r x)) (* 7 (* r r x)) (* 5 (* r r r x)) (* x x x) (* r x x x))))
 (let ((?x261 (* r r x)))
 (let ((?x337 (* 4 ?x261)))
 (let ((?x230 (* r x x)))
 (let ((?x409 (* (- 1) ?x230)))
 (let ((?x188 (* (- 2) r)))
 (let ((?x547 (+ ?x188 ?x32 (* (- 5) ?x30) ?x316 ?x409 ?x466 (* 6 (* r x)) ?x337)))
 (let (($x121 (= (+ r (* (- 2) x) (* (- 1) r00) ?x119 (* 2 x00) ?x36) 0)))
 (let (($x306 (and $x121 (not (= (* ?x547 ?x472 ?x109) 0)))))
 (let ((?x364 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x453 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x ?x66) (+ x ?x66)))))
 (let ((?x88 (+ 1 ?x453 (* (+ 1 r) (+ x ?x66) (+ x ?x66) (+ x ?x66)))))
 (let ((?x160 (+ (* 2 (* (+ 1 r) (+ 1 r) (+ x ?x66))) (* (- 1) (* (+ 1 r) (+ x ?x66) (+ x ?x66))))))
 (let (($x382 (and (= (+ ?x66 r00 ?x30 ?x32 ?x87 ?x103) 0) (not (= (* ?x160 ?x88 ?x364) 0)))))
 (rewrite (= $x382 $x306))))))))))))))))))))))))))))
 ))
 (let (($x61 (exists ((r Int) (x Int) )(! (let ((?x55 (- (* 2 (+ r 1) (+ r 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x50 (- 1 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x52 (+ ?x50 (* (+ r 1) (- x r) (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x52 ?x55) 0))))))))))) :qid k!26))
 ))
 (let ((?x64 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x364 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x355 (+ x ?x66)))
 (let ((?x278 (+ 1 r)))
 (let ((?x88 (+ 1 (* (- 1) (* ?x278 ?x278 ?x355 ?x355)) (* ?x278 ?x355 ?x355 ?x355))))
 (let ((?x168 (* (+ (* 2 (* ?x278 ?x278 ?x355)) (* (- 1) (* ?x278 ?x355 ?x355))) ?x88 ?x364)))
 (let (($x382 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) (not (= ?x168 0)))))
 (let ((?x55 (- (* 2 (+ r 1) (+ r 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x50 (- 1 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x52 (+ ?x50 (* (+ r 1) (- x r) (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x60 (and $x40 (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x52 ?x55) 0))))))
 (rewrite (= $x60 $x382)))))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x443 (mp (mp @x62 (quant-intro (proof-bind ?x64) (= $x61 $x279)) $x279) (rewrite (= $x279 $x279)) $x279)))
 (let ((@x221 (mp~ (mp @x443 (quant-intro (proof-bind ?x459) (= $x279 $x199)) $x199) (sk (~ $x199 $x245)) $x245)))
 (let ((@x84 (mp @x221 (rewrite (= $x245 $x289)) $x289)))
 (let ((@x227 (and-elim @x84 $x274)))
 (let ((@x71 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x177)) @x227 $x177)))
 (let (($x497 (>= ?x500 0)))
 (let ((@x76 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x274) $x497)) @x227 $x497)))
 (let (($x79 (not (>= ?x290 0))))
 (let (($x511 (<= ?x290 0)))
 (let ((@x287 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x229 (not $x511) $x79)) (and-elim @x84 $x232) (or (not $x511) $x79))))
 (let ((@x283 (unit-resolution @x287 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x511)) @x76 @x71 false) $x511) $x79)))
 ((_ th-lemma arith farkas 1 1 1) @x283 @x76 @x71 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            3
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                19.59
 :memory                    19.09
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                500779
 :num-checks                1
 :propagations              4
 :rlimit-count              1679
 :time                      0.01
 :total-time                0.02)
