unsat
((set-logic NIA)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(declare-fun x!3 () Int)
(declare-fun u!5 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(proof
(let ((?x434 (* (- 1) k!10)))
 (let ((?x419 (* (- 1) k!00)))
 (let ((?x159 (* u!5 x!3)))
 (let ((?x753 (+ (* y!2 v!4) ?x159 ?x419 ?x434)))
 (let (($x475 (<= ?x753 0)))
 (let (($x715 (= ?x753 0)))
 (let ((?x305 (* (- 1) (* x!3 x!3 x!3))))
 (let ((?x172 (* y!2 y!2 y!2)))
 (let ((?x329 (* (- 1) (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 y!2))))
 (let ((?x157 (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 x!3)))
 (let ((?x192 (+ (* 2 (* u!5 u!5 u!5 u!5 x!3 x!3 x!3 v!4)) ?x157 ?x329 ?x172 (* u!5 u!5 u!5 x!3 x!3 x!3 v!4 v!4) ?x305 (* (- 2) (* u!5 u!5 u!5 u!5 y!2 y!2 y!2 v!4)) (* (- 1) (* u!5 u!5 u!5 y!2 y!2 y!2 v!4 v!4)) (* 3 (* y!2 x!3 x!3)) (* (- 3) (* y!2 y!2 x!3)) (* 3 (* u!5 u!5 u!5 y!2 y!2 x!3 v!4 v!4)) (* 3 (* u!5 u!5 u!5 u!5 u!5 y!2 y!2 x!3)) (* (- 3) (* u!5 u!5 u!5 y!2 x!3 x!3 v!4 v!4)) (* (- 3) (* u!5 u!5 u!5 u!5 u!5 y!2 x!3 x!3)) (* (- 6) (* u!5 u!5 u!5 u!5 y!2 x!3 x!3 v!4)) (* 6 (* u!5 u!5 u!5 u!5 y!2 y!2 x!3 v!4)))))
 (let ((?x536 (* ?x192 ?x753)))
 (let (($x741 (= ?x536 0)))
 (let ((?x205 (* 3 (* u!5 u!5 y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4))))
 (let ((?x470 (* 3 (* u!5 u!5 u!5 x!3 x!3 x!3 x!3 v!4 v!4 v!4))))
 (let ((?x761 (* (- 1) (* k!10 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4))))
 (let ((?x757 (* (- 3) (* u!5 k!10 x!3 x!3 x!3 v!4 v!4 v!4 v!4))))
 (let ((?x754 (* (- 3) (* u!5 u!5 k!10 x!3 x!3 x!3 v!4 v!4 v!4))))
 (let ((?x719 (* (- 1) (* u!5 u!5 u!5 k!10 x!3 x!3 x!3 v!4 v!4))))
 (let ((?x744 (* (- 1) (* k!00 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4))))
 (let ((?x716 (* (- 1) (* u!5 u!5 u!5 k!00 x!3 x!3 x!3 v!4 v!4))))
 (let ((?x717 (* (- 3) (* u!5 u!5 k!00 x!3 x!3 x!3 v!4 v!4 v!4))))
 (let ((?x738 (* (- 3) (* u!5 k!00 x!3 x!3 x!3 v!4 v!4 v!4 v!4))))
 (let ((?x460 (* 3 (* u!5 u!5 x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4))))
 (let ((?x377 (* 3 (* u!5 y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4))))
 (let ((?x286 (* (- 1) (* u!5 x!3 x!3 x!3 x!3))))
 (let ((?x270 (+ (* u!5 x!3 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4) ?x286 (* y!2 x!3 x!3 x!3 v!4 v!4 v!4 v!4 v!4 v!4) ?x377 (* u!5 u!5 u!5 u!5 x!3 x!3 x!3 x!3 v!4 v!4) (* u!5 u!5 u!5 y!2 x!3 x!3 x!3 v!4 v!4 v!4) ?x460 (* (- 1) (* y!2 x!3 x!3 x!3 v!4)) (* k!00 x!3 x!3 x!3) ?x738 ?x717 ?x716 ?x744 (* k!10 x!3 x!3 x!3) ?x719 ?x754 ?x757 ?x761 ?x470 ?x205)))
 (let (($x85 (= ?x270 0)))
 (let (($x730 (not $x85)))
 (let (($x718 (or $x730 (not $x741))))
 (let (($x266 (and $x715 $x718)))
 (let ((?x246 (+ ?x159 (* v!4 y!2) ?x419 ?x434)))
 (let ((?x338 (+ ?x305 ?x157 (* 2 (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 x!3)) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3) (* (- 3) (* u!5 u!5 u!5 u!5 u!5 x!3 x!3 y!2)) (* (- 6) (* u!5 u!5 u!5 u!5 v!4 x!3 x!3 y!2)) (* (- 3) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 y!2)) (* 3 (* u!5 u!5 u!5 u!5 u!5 x!3 y!2 y!2)) (* 6 (* u!5 u!5 u!5 u!5 v!4 x!3 y!2 y!2)) (* 3 (* u!5 u!5 u!5 v!4 v!4 x!3 y!2 y!2)) ?x329 (* (- 2) (* u!5 u!5 u!5 u!5 v!4 y!2 y!2 y!2)) (* (- 1) (* u!5 u!5 u!5 v!4 v!4 y!2 y!2 y!2)) (* 3 (* x!3 x!3 y!2)) (* (- 3) (* x!3 y!2 y!2)) ?x172)))
 (let ((?x292 (* 3 (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x252 (* 3 (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x293 (* 3 (* u!5 u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let ((?x289 (* 3 (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 x!3))))
 (let ((?x285 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!10))))
 (let ((?x245 (* (- 3) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!10))))
 (let ((?x282 (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 k!10))))
 (let ((?x636 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3 k!10))))
 (let ((?x243 (* (- 1) (* v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!00))))
 (let ((?x474 (* (- 3) (* u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 k!00))))
 (let ((?x160 (* (- 3) (* u!5 v!4 v!4 v!4 v!4 x!3 x!3 x!3 k!00))))
 (let ((?x274 (* (- 1) (* u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3 k!00))))
 (let ((?x298 (+ (* x!3 x!3 x!3 k!00) ?x274 ?x160 ?x474 ?x243 (* x!3 x!3 x!3 k!10) ?x636 ?x282 ?x245 ?x285 ?x286 (* (- 1) (* v!4 x!3 x!3 x!3 y!2)) ?x289 ?x293 ?x252 ?x292 (* u!5 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 x!3) (* v!4 v!4 v!4 v!4 v!4 v!4 x!3 x!3 x!3 y!2) (* u!5 u!5 u!5 u!5 v!4 v!4 x!3 x!3 x!3 x!3) (* u!5 u!5 u!5 v!4 v!4 v!4 x!3 x!3 x!3 y!2))))
 (let (($x652 (and (= ?x246 0) (or (not (= ?x298 0)) (not (= (* ?x338 ?x246) 0))))))
 (let (($x92 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x434 (* (- 1) k!10)))
 (let ((?x419 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x84 (+ ?x33 ?x34 ?x419 ?x434)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x464 (+ ?x455 (* u u u u u x x x) (* 2 (* u u u u v x x x)) (* u u u v v x x x) (* (- 3) (* u u u u u x x y)) (* (- 6) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) (* 3 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 3 (* u u u v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 2) (* u u u u v y y y)) (* (- 1) (* u u u v v y y y)) (* 3 (* x x y)) (* (- 3) (* x y y)) (* y y y))))
 (let ((?x672 (* u u u v v v x x x y)))
 (let ((?x669 (* u u u u v v x x x x)))
 (let ((?x658 (* v v v v v v x x x y)))
 (let ((?x654 (* u v v v v v x x x x)))
 (let ((?x336 (+ (* x x x k!00) (* (- 1) (* u u u v v x x x k!00)) (* (- 3) (* u v v v v x x x k!00)) (* (- 3) (* u u v v v x x x k!00)) (* (- 1) (* v v v v v x x x k!00)) (* x x x k!10) (* (- 1) (* u u u v v x x x k!10)) (* (- 3) (* u u v v v x x x k!10)) (* (- 3) (* u v v v v x x x k!10)) (* (- 1) (* v v v v v x x x k!10)) (* (- 1) (* u x x x x)) (* (- 1) (* v x x x y)) (* 3 (* u u u v v v x x x x)) (* 3 (* u u v v v v x x x y)) (* 3 (* u u v v v v x x x x)) (* 3 (* u v v v v v x x x y)) ?x654 ?x658 ?x669 ?x672)))
 (and (= ?x84 0) (or (not (= ?x336 0)) (not (= (* ?x464 ?x84) 0))))))))))))))))) :qid k!29))
 ))
 (let (($x388 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x434 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x406 (+ x (* (- 1) y))))
 (let ((?x410 (* ?x406 u)))
 (let ((?x419 (* (- 1) k!00)))
 (let ((?x181 (+ (* ?x44 ?x44 ?x406 ?x406 ?x406 u u u) (* (- 1) (* ?x406 ?x406 ?x406)))))
 (let ((?x423 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x477 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let (($x143 (or (not (= (* ?x477 (+ ?x419 ?x55 ?x423 ?x434)) 0)) (not (= (* ?x181 (+ ?x419 ?x410 ?x45 ?x434)) 0)))))
 (let ((?x316 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x316 0) $x143)))))))))))))))) :qid k!29))
 ))
 (let ((?x95 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x434 (* (- 1) k!10)))
 (let ((?x419 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let ((?x84 (+ ?x33 ?x34 ?x419 ?x434)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x464 (+ ?x455 (* u u u u u x x x) (* 2 (* u u u u v x x x)) (* u u u v v x x x) (* (- 3) (* u u u u u x x y)) (* (- 6) (* u u u u v x x y)) (* (- 3) (* u u u v v x x y)) (* 3 (* u u u u u x y y)) (* 6 (* u u u u v x y y)) (* 3 (* u u u v v x y y)) (* (- 1) (* u u u u u y y y)) (* (- 2) (* u u u u v y y y)) (* (- 1) (* u u u v v y y y)) (* 3 (* x x y)) (* (- 3) (* x y y)) (* y y y))))
 (let ((?x672 (* u u u v v v x x x y)))
 (let ((?x669 (* u u u u v v x x x x)))
 (let ((?x658 (* v v v v v v x x x y)))
 (let ((?x654 (* u v v v v v x x x x)))
 (let ((?x336 (+ (* x x x k!00) (* (- 1) (* u u u v v x x x k!00)) (* (- 3) (* u v v v v x x x k!00)) (* (- 3) (* u u v v v x x x k!00)) (* (- 1) (* v v v v v x x x k!00)) (* x x x k!10) (* (- 1) (* u u u v v x x x k!10)) (* (- 3) (* u u v v v x x x k!10)) (* (- 3) (* u v v v v x x x k!10)) (* (- 1) (* v v v v v x x x k!10)) (* (- 1) (* u x x x x)) (* (- 1) (* v x x x y)) (* 3 (* u u u v v v x x x x)) (* 3 (* u u v v v v x x x y)) (* 3 (* u u v v v v x x x x)) (* 3 (* u v v v v v x x x y)) ?x654 ?x658 ?x669 ?x672)))
 (let (($x841 (and (= ?x84 0) (or (not (= ?x336 0)) (not (= (* ?x464 ?x84) 0))))))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x406 (+ x (* (- 1) y))))
 (let ((?x410 (* ?x406 u)))
 (let ((?x181 (+ (* ?x44 ?x44 ?x406 ?x406 ?x406 u u u) (* (- 1) (* ?x406 ?x406 ?x406)))))
 (let ((?x423 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x477 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let (($x143 (or (not (= (* ?x477 (+ ?x419 ?x55 ?x423 ?x434)) 0)) (not (= (* ?x181 (+ ?x419 ?x410 ?x45 ?x434)) 0)))))
 (let ((?x316 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x317 (and (= ?x316 0) $x143)))
 (rewrite (= $x317 $x841)))))))))))))))))))))))))))))
 ))
 (let (($x409 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x434 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x406 (+ x (* (- 1) y))))
 (let ((?x410 (* ?x406 u)))
 (let ((?x419 (* (- 1) k!00)))
 (let ((?x181 (+ (* ?x44 ?x44 ?x406 ?x406 ?x406 u u u) (* (- 1) (* ?x406 ?x406 ?x406)))))
 (let ((?x423 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x477 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let (($x143 (or (not (= (* ?x477 (+ ?x419 ?x55 ?x423 ?x434)) 0)) (not (= (* ?x181 (+ ?x419 ?x410 ?x45 ?x434)) 0)))))
 (and (= (+ ?x419 (* x u) (* y v) ?x434) 0) $x143))))))))))))))) :qid k!29))
 ))
 (let ((?x415 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x434 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x406 (+ x (* (- 1) y))))
 (let ((?x410 (* ?x406 u)))
 (let ((?x419 (* (- 1) k!00)))
 (let ((?x181 (+ (* ?x44 ?x44 ?x406 ?x406 ?x406 u u u) (* (- 1) (* ?x406 ?x406 ?x406)))))
 (let ((?x423 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x477 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let (($x143 (or (not (= (* ?x477 (+ ?x419 ?x55 ?x423 ?x434)) 0)) (not (= (* ?x181 (+ ?x419 ?x410 ?x45 ?x434)) 0)))))
 (let ((?x316 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x317 (and (= ?x316 0) $x143)))
 (let (($x436 (and (= (+ ?x419 (* x u) (* y v) ?x434) 0) $x143)))
 (rewrite (= $x436 $x317))))))))))))))))))))
 ))
 (let (($x424 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x406 (+ x (* (- 1) y))))
 (let ((?x410 (* ?x406 u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x181 (+ (* ?x44 ?x44 ?x406 ?x406 ?x406 u u u) (* (- 1) (* ?x406 ?x406 ?x406)))))
 (let ((?x423 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x477 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let (($x417 (or (not (= (* ?x477 (+ ?x77 ?x55 ?x423 ?x93)) 0)) (not (= (* ?x181 (+ ?x77 ?x410 ?x45 ?x93)) 0)))))
 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x417)))))))))))))))) :qid k!29))
 ))
 (let ((?x387 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x434 (* (- 1) k!10)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x406 (+ x (* (- 1) y))))
 (let ((?x410 (* ?x406 u)))
 (let ((?x419 (* (- 1) k!00)))
 (let ((?x181 (+ (* ?x44 ?x44 ?x406 ?x406 ?x406 u u u) (* (- 1) (* ?x406 ?x406 ?x406)))))
 (let ((?x423 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x477 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let (($x143 (or (not (= (* ?x477 (+ ?x419 ?x55 ?x423 ?x434)) 0)) (not (= (* ?x181 (+ ?x419 ?x410 ?x45 ?x434)) 0)))))
 (let (($x436 (and (= (+ ?x419 (* x u) (* y v) ?x434) 0) $x143)))
 (let ((?x88 (* ?x181 (+ (* (- 1) (* u00 x00)) ?x410 ?x45 (* (- 1) (* v00 y00))))))
 (let ((?x567 (* ?x477 (+ (* (- 1) (* u00 x00)) ?x55 ?x423 (* (- 1) (* v00 y00))))))
 (let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x401 (* y v)))
 (let ((?x82 (* x u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let (($x438 (and (= (+ ?x77 ?x82 ?x401 ?x93) 0) (or (not (= ?x567 0)) (not (= ?x88 0))))))
 (rewrite (= $x438 $x436))))))))))))))))))))))))))
 ))
 (let (($x68 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x61 (* x x x)))
 (let ((?x54 (+ u v)))
 (let ((?x38 (* v00 y00)))
 (let ((?x59 (- (+ (* (- 1) u00 x00) (* ?x54 x) (* v (- y x))) ?x38)))
 (let (($x64 (= (* ?x59 (- (* ?x54 ?x54 ?x54 v v x x x) ?x61)) 0)))
 (let ((?x42 (- x y)))
 (let ((?x44 (+ v u)))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u ?x42) (* ?x44 y)) ?x38) (- (* u u u ?x44 ?x44 ?x42 ?x42 ?x42) (* ?x42 ?x42 ?x42)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 (or (not (= ?x51 0)) (not $x64)))))))))))) :qid k!29))
 ))
 (let ((?x408 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x93 (* (- 1) ?x38)))
 (let ((?x44 (+ v u)))
 (let ((?x45 (* ?x44 y)))
 (let ((?x406 (+ x (* (- 1) y))))
 (let ((?x410 (* ?x406 u)))
 (let ((?x77 (* (- 1) (* u00 x00))))
 (let ((?x181 (+ (* ?x44 ?x44 ?x406 ?x406 ?x406 u u u) (* (- 1) (* ?x406 ?x406 ?x406)))))
 (let ((?x423 (* (+ y (* (- 1) x)) v)))
 (let ((?x54 (+ u v)))
 (let ((?x55 (* ?x54 x)))
 (let ((?x61 (* x x x)))
 (let ((?x455 (* (- 1) ?x61)))
 (let ((?x477 (+ (* ?x54 ?x54 ?x54 x x x v v) ?x455)))
 (let (($x417 (or (not (= (* ?x477 (+ ?x77 ?x55 ?x423 ?x93)) 0)) (not (= (* ?x181 (+ ?x77 ?x410 ?x45 ?x93)) 0)))))
 (let (($x438 (and (= (+ ?x77 (* x u) (* y v) ?x93) 0) $x417)))
 (let ((?x63 (* (- (+ (* (- 1) u00 x00) ?x55 (* v (- y x))) ?x38) (- (* ?x54 ?x54 ?x54 v v x x x) ?x61))))
 (let ((?x42 (- x y)))
 (let ((?x51 (* (- (+ (* (- 1) u00 x00) (* u ?x42) ?x45) ?x38) (- (* u u u ?x44 ?x44 ?x42 ?x42 ?x42) (* ?x42 ?x42 ?x42)))))
 (let (($x41 (= (- (+ (* (- 1) u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x67 (and $x41 (or (not (= ?x51 0)) (not (= ?x63 0))))))
 (rewrite (= $x67 $x438))))))))))))))))))))))))
 ))
 (let ((@x69 (asserted $x68)))
 (let ((@x427 (mp (mp @x69 (quant-intro (proof-bind ?x408) (= $x68 $x424)) $x424) (rewrite (= $x424 $x424)) $x424)))
 (let ((@x478 (mp (mp @x427 (quant-intro (proof-bind ?x387) (= $x424 $x409)) $x409) (quant-intro (proof-bind ?x415) (= $x409 $x388)) $x388)))
 (let ((@x686 (mp~ (mp @x478 (quant-intro (proof-bind ?x95) (= $x388 $x92)) $x92) (sk (~ $x92 $x652)) $x652)))
 (let ((@x742 (mp @x686 (rewrite (= $x652 $x266)) $x266)))
 (let ((@x755 (and-elim @x742 $x715)))
 (let ((@x729 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x715) $x475)) @x755 $x475)))
 (let (($x468 (>= ?x753 0)))
 (let ((@x724 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x715) $x468)) @x755 $x468)))
 (let (($x533 (not (<= ?x270 0))))
 (let (($x471 (>= ?x536 0)))
 (let ((@x174 ((_ th-lemma arith eq-propagate 0 0 0) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x471)) @x724 @x729 false) $x471) @x724 @x729 $x741)))
 (let (($x461 (>= ?x270 0)))
 (let ((@x549 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x85 $x533 (not $x461))) (lemma ((_ th-lemma arith) (hypothesis (not $x461)) @x724 @x729 false) $x461) (unit-resolution (and-elim @x742 $x718) @x174 $x730) $x533)))
 ((_ th-lemma arith) @x549 @x724 @x729 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        2
 :arith-assert-lower        10
 :arith-assert-upper        7
 :arith-conflicts           3
 :arith-eq-adapter          3
 :arith-fixed-eqs           1
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             356
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    3
 :conflicts                 3
 :decisions                 2
 :del-clause                3
 :eliminated-applications   2
 :final-checks              4
 :max-memory                4.50
 :memory                    3.17
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                35904101
 :num-checks                1
 :propagations              8
 :rlimit-count              159589
 :time                      0.14
 :total-time                0.15)
