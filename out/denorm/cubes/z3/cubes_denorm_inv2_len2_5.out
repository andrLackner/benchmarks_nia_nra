unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x464 (* k!2 k!2)))
 (let ((?x244 (* m!1 m!1)))
 (let ((?x252 (* 9 n!0)))
 (let ((?x565 (* (- 32) k!2)))
 (let ((?x115 (* k!2 n!0)))
 (let ((?x127 (* (- 9) ?x115)))
 (let ((?x454 (* (- 27) c!3)))
 (let ((?x253 (* (- 5) m!1)))
 (let ((?x92 (* c!3 n!0)))
 (let ((?x250 (* (- 9) ?x92)))
 (let ((?x395 (+ 13 ?x250 ?x253 ?x454 ?x127 ?x565 ?x252 ?x244 (* 2 (* m!1 k!2)) ?x464)))
 (let ((?x462 (+ c!3 k!2)))
 (let ((?x465 (+ 6 m!1)))
 (let ((?x467 (+ 1 n!0)))
 (let ((?x404 (+ 1 n!0 (* ?x467 ?x467 ?x465 ?x465 ?x465 ?x462 ?x462 ?x462))))
 (let (($x402 (= (* ?x404 ?x395) 0)))
 (let (($x376 (<= ?x395 0)))
 (let ((?x202 (* (- 1) ?x464)))
 (let ((?x196 (* (- 9) n!0)))
 (let ((?x133 (* 5 k!2)))
 (let ((?x212 (* 18 c!3)))
 (let ((?x102 (* 9 ?x92)))
 (let ((?x269 (+ ?x102 ?x212 ?x133 ?x196 ?x202)))
 (let (($x190 (<= ?x269 4)))
 (let (($x273 (= ?x269 4)))
 (let (($x387 (not $x402)))
 (let ((?x438 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x468 (= ?x438 1)))
 (let ((?x203 (* (- 2) n!0)))
 (let ((?x99 (* (- 1) ?x115)))
 (let ((?x123 (* 3 c!3)))
 (let ((?x267 (+ ?x123 ?x99 k!2 ?x203)))
 (let (($x232 (= ?x267 1)))
 (let ((?x144 (+ m!1 (* (- 6) n!0))))
 (let (($x390 (= ?x144 6)))
 (let (($x400 (and $x390 $x273 $x232 $x468 $x387)))
 (let ((?x240 (+ 13 ?x454 ?x565 ?x253 ?x252 ?x464 ?x127 ?x250 (* 2 (* k!2 m!1)) ?x244)))
 (let (($x255 (and $x390 (= (+ ?x212 ?x133 ?x196 ?x202 ?x102) 4) (= (+ ?x123 k!2 ?x203 ?x99) 1) $x468 (not (= (* ?x404 ?x240) 0)))))
 (let (($x98 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x423 (* (- 5) m)))
 (let ((?x478 (+ 13 (* (- 27) c) (* (- 32) k) ?x423 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x483 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x410 (* ?x338 ?x338 ?x483 ?x483 ?x483 ?x68 ?x68 ?x68)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= (* (+ 1 n ?x410) ?x478) 0))))))))))))))))))) :qid k!34))
 ))
 (let (($x116 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x423 (* (- 5) m)))
 (let ((?x95 (* (- 18) c)))
 (let ((?x361 (+ 13 ?x95 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x423 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x483 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x410 (* ?x338 ?x338 ?x483 ?x483 ?x483 ?x68 ?x68 ?x68)))
 (let (($x302 (not (= (* (+ 1 ?x410 n) ?x361) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x124 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x124 $x291 $x302)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x93 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x423 (* (- 5) m)))
 (let ((?x478 (+ 13 (* (- 27) c) (* (- 32) k) ?x423 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x483 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x410 (* ?x338 ?x338 ?x483 ?x483 ?x483 ?x68 ?x68 ?x68)))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x226 (and $x121 $x205 $x257 $x295 (not (= (* (+ 1 n ?x410) ?x478) 0)))))
 (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x95 (* (- 18) c)))
 (let ((?x361 (+ 13 ?x95 (* (- 23) k) (* (- 9) (* ?x338 ?x68)) ?x423 ?x48 ?x78)))
 (let (($x302 (not (= (* (+ 1 ?x410 n) ?x361) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x124 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x358 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x124 $x291 $x302)))
 (rewrite (= $x358 $x226))))))))))))))))))))))))))))
 ))
 (let (($x215 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x423 (* (- 5) m)))
 (let ((?x95 (* (- 18) c)))
 (let ((?x361 (+ 13 ?x95 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x423 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x483 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x410 (* ?x338 ?x338 ?x483 ?x483 ?x483 ?x68 ?x68 ?x68)))
 (let (($x302 (not (= (* (+ 1 ?x410 n) ?x361) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x161 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x214 (= (+ ?x95 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x214 $x161 $x291 $x302)))))))))))))))) :qid k!34))
 ))
 (let ((?x119 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x423 (* (- 5) m)))
 (let ((?x95 (* (- 18) c)))
 (let ((?x361 (+ 13 ?x95 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x423 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x483 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x410 (* ?x338 ?x338 ?x483 ?x483 ?x483 ?x68 ?x68 ?x68)))
 (let (($x302 (not (= (* (+ 1 ?x410 n) ?x361) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x124 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x358 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x124 $x291 $x302)))
 (let (($x161 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x214 (= (+ ?x95 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x230 (and $x121 $x214 $x161 $x291 $x302)))
 (rewrite (= $x230 $x358))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x83 (* (+ ?x76 (* 9 ?x70) ?x78) (+ (* ?x68 ?x68 ?x68 ?x80 ?x80 ?x80 ?x70 ?x70) n 1))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x219 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x423 (* (- 5) m)))
 (let ((?x95 (* (- 18) c)))
 (let ((?x361 (+ 13 ?x95 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x423 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x483 (+ 6 m)))
 (let ((?x338 (+ 1 n)))
 (let ((?x410 (* ?x338 ?x338 ?x483 ?x483 ?x483 ?x68 ?x68 ?x68)))
 (let (($x302 (not (= (* (+ 1 ?x410 n) ?x361) 0))))
 (let (($x291 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x161 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x214 (= (+ ?x95 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x230 (and $x121 $x214 $x161 $x291 $x302)))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x83 (* (+ ?x76 (* 9 ?x70) ?x78) (+ (* ?x68 ?x68 ?x68 ?x80 ?x80 ?x80 ?x70 ?x70) n 1))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0))))))
 (rewrite (= $x87 $x230))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x353 (mp (mp @x89 (quant-intro (proof-bind ?x219) (= $x88 $x215)) $x215) (rewrite (= $x215 $x215)) $x215)))
 (let ((@x388 (mp (mp @x353 (quant-intro (proof-bind ?x119) (= $x215 $x116)) $x116) (quant-intro (proof-bind ?x93) (= $x116 $x98)) $x98)))
 (let ((@x289 (mp (mp~ @x388 (sk (~ $x98 $x255)) $x255) (rewrite (= $x255 $x400)) $x400)))
 (let ((@x223 (and-elim @x289 $x273)))
 (let ((@x393 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x273) $x190)) @x223 $x190)))
 (let (($x187 (>= ?x269 4)))
 (let ((@x564 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x273) $x187)) @x223 $x187)))
 (let (($x183 (<= ?x438 1)))
 (let ((@x268 (and-elim @x289 $x468)))
 (let ((@x392 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x183)) @x268 $x183)))
 (let (($x166 (>= ?x438 1)))
 (let ((@x563 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x468) $x166)) @x268 $x166)))
 (let (($x184 (<= ?x267 1)))
 (let ((@x264 (and-elim @x289 $x232)))
 (let ((@x288 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x232) $x184)) @x264 $x184)))
 (let (($x175 (>= ?x267 1)))
 (let ((@x426 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x232) $x175)) @x264 $x175)))
 (let (($x149 (<= ?x144 6)))
 (let ((@x401 (and-elim @x289 $x390)))
 (let ((@x283 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x390) $x149)) @x401 $x149)))
 (let (($x188 (>= ?x144 6)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x390) $x188)) @x401 $x188)))
 (let ((@x994 ((_ th-lemma arith) (hypothesis (not $x376)) @x426 @x288 @x277 @x283 @x426 @x288 @x426 @x288 @x426 @x288 @x564 @x393 @x277 @x283 @x426 @x288 @x426 @x288 @x564 @x393 @x426 @x288 @x564 @x393 @x426 @x288 @x426 @x288 @x563 @x392 @x563 @x392 @x564 @x393 false)))
 (let ((@x1053 (lemma @x994 $x376)))
 (let (($x920 (>= ?x395 0)))
 (let ((@x922 ((_ th-lemma arith) (hypothesis (not $x920)) @x563 @x392 @x277 @x283 @x563 @x392 @x426 @x288 @x563 @x392 @x426 @x288 @x564 @x393 @x277 @x283 false)))
 (let ((@x923 (lemma @x922 $x920)))
 (unit-resolution (and-elim @x289 $x387) ((_ th-lemma arith eq-propagate 0 0 0 0) @x923 @x1053 @x923 @x1053 $x402) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 108
 :arith-assert-diseq        14
 :arith-assert-lower        562
 :arith-assert-upper        532
 :arith-bound-prop          14
 :arith-branch-var          39
 :arith-conflicts           43
 :arith-eq-adapter          17
 :arith-fixed-eqs           121
 :arith-gcd-tests           301
 :arith-gomory-cuts         19
 :arith-grobner             73
 :arith-ineq-splits         39
 :arith-max-min             4127
 :arith-nonlinear-bounds    116
 :arith-nonlinear-horner    793
 :arith-num-rows            15
 :arith-offset-eqs          16
 :arith-patches             86
 :arith-patches_succ        9
 :arith-pivots              1687
 :arith-pseudo-nonlinear    90
 :arith-row-summations      11092
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    15
 :conflicts                 52
 :decisions                 272
 :del-clause                121
 :final-checks              226
 :max-memory                4.28
 :memory                    3.23
 :minimized-lits            2
 :mk-bool-var               300
 :mk-clause                 239
 :num-allocs                109256480
 :num-checks                1
 :propagations              219
 :rlimit-count              1458403
 :time                      0.58
 :total-time                0.59)
