unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1387 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x172 (<= ?x1387 0)))
 (let (($x1388 (= ?x1387 0)))
 (let ((?x1283 (* (- 2) (* x!1 x!1))))
 (let ((?x1308 (+ 1 y!0)))
 (let ((?x1309 (+ (- 1) x!1)))
 (let ((?x1302 (* (- 2) (* ?x1309 ?x1309 ?x1308 ?x1308 ?x1308 ?x1308))))
 (let ((?x1312 (* (- 2) (* ?x1309 ?x1309 ?x1309 ?x1308 ?x1308 ?x1308))))
 (let ((?x1241 (* x!1 x!1 x!1)))
 (let ((?x194 (* (- 1) (* y!0 y!0))))
 (let ((?x142 (* 2 x00)))
 (let ((?x132 (* 2 y00)))
 (let ((?x1275 (+ ?x132 ?x142 (* 2 (* y00 y!0 y!0 y!0)) (* 6 (* x00 y!0 x!1 x!1)) (* 6 (* y00 y!0 y!0)) (* y!0 x!1 x!1) (* (- 4) (* y00 y!0 y!0 y!0 x!1)) (* (- 4) (* x00 y!0 y!0 y!0 x!1)) (* x00 x!1 x!1) (* 7 (* y00 y!0)) (* 6 (* x00 y!0 y!0)) (* 2 (* x00 y!0 y!0 y!0)) (* 6 (* y00 y!0 y!0 x!1 x!1)) (* 6 (* y00 y!0 x!1 x!1)) (* (- 2) (* x00 x!1)) (* (- 2) (* y00 x!1)) ?x194 (* (- 3) (* y!0 x!1)) ?x1241 ?x1312 ?x1302 (* 7 (* x00 y!0)) (* (- 12) (* x00 y!0 x!1)) ?x1283 (* y00 x!1 x!1) (* 6 (* x00 y!0 y!0 x!1 x!1)) (* (- 12) (* x00 y!0 y!0 x!1)) (* 2 (* x00 y!0 y!0 y!0 x!1 x!1)) (* 2 (* y00 y!0 y!0 y!0 x!1 x!1)) (* (- 12) (* y00 y!0 x!1)) (* (- 12) (* y00 y!0 y!0 x!1)))))
 (let (($x1382 (= ?x1275 0)))
 (let (($x994 (not $x1382)))
 (let (($x1383 (and $x1388 $x994)))
 (let ((?x558 (+ ?x132 ?x142 (* (- 3) (* x!1 y!0)) (* 7 (* y!0 x00)) (* x!1 x!1 x00) (* x!1 x!1 y00) (* 7 (* y!0 y00)) (* 6 (* x!1 x!1 y!0 y!0 x00)) (* (- 12) (* x!1 y!0 x00)) (* 6 (* y!0 y!0 x00)) (* (- 12) (* x!1 y!0 y!0 x00)) (* 2 (* y!0 y!0 y!0 x00)) (* (- 4) (* x!1 y!0 y!0 y!0 x00)) ?x194 ?x1283 (* x!1 x!1 y!0) (* 2 (* x!1 x!1 y!0 y!0 y!0 x00)) (* 6 (* x!1 x!1 y!0 y!0 y00)) (* 6 (* x!1 x!1 y!0 y00)) (* (- 2) (* x!1 x00)) (* (- 2) (* x!1 y00)) ?x1241 ?x1302 ?x1312 (* 6 (* x!1 x!1 y!0 x00)) (* 6 (* y!0 y!0 y00)) (* 2 (* y!0 y!0 y!0 y00)) (* (- 4) (* x!1 y!0 y!0 y!0 y00)) (* 2 (* x!1 x!1 y!0 y!0 y!0 y00)) (* (- 12) (* x!1 y!0 y00)) (* (- 12) (* x!1 y!0 y!0 y00)))))
 (let (($x1025 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x558 0)))))
 (let (($x1454 (exists ((x Int) (y Int) )(! (let ((?x215 (+ 1 y)))
 (let ((?x429 (+ (- 1) x)))
 (let ((?x1341 (* ?x429 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1260 (* (- 2) ?x1341)))
 (let ((?x1327 (* ?x429 ?x429 ?x215 ?x215 ?x215 ?x215)))
 (let ((?x1334 (* (- 2) ?x1327)))
 (let ((?x1322 (* x x x)))
 (let ((?x857 (* x x y)))
 (let ((?x851 (* (- 2) (* x x))))
 (let ((?x217 (* x x y00)))
 (let ((?x158 (* x x x00)))
 (let ((?x142 (* 2 x00)))
 (let ((?x132 (* 2 y00)))
 (let ((?x1447 (+ ?x132 ?x142 (* (- 3) (* x y)) (* 7 (* y x00)) ?x158 ?x217 (* 7 (* y y00)) (* 6 (* x x y y x00)) (* (- 12) (* x y x00)) (* 6 (* y y x00)) (* (- 12) (* x y y x00)) (* 2 (* y y y x00)) (* (- 4) (* x y y y x00)) (* (- 1) (* y y)) ?x851 ?x857 (* 2 (* x x y y y x00)) (* 6 (* x x y y y00)) (* 6 (* x x y y00)) (* (- 2) (* x x00)) (* (- 2) (* x y00)) ?x1322 ?x1334 ?x1260 (* 6 (* x x y x00)) (* 6 (* y y y00)) (* 2 (* y y y y00)) (* (- 4) (* x y y y y00)) (* 2 (* x x y y y y00)) (* (- 12) (* x y y00)) (* (- 12) (* x y y y00)))))
 (let (($x92 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x92 (not (= ?x1447 0)))))))))))))))))) :qid k!26))
 ))
 (let (($x1335 (exists ((x Int) (y Int) )(! (let ((?x215 (+ 1 y)))
 (let ((?x429 (+ (- 1) x)))
 (let ((?x1368 (* y00 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1360 (* ?x215 ?x215)))
 (let ((?x1299 (* y00 ?x429 ?x429)))
 (let ((?x473 (* x00 ?x429 ?x429)))
 (let ((?x1285 (* ?x429 ?x215)))
 (let ((?x1240 (+ ?x1285 (* (- 1) (* x00 ?x215)) ?x473 ?x1299 (* (- 1) (* y00 ?x215)) (* (- 2) (* x00 ?x429 ?x429 ?x215 ?x215 ?x215)) (* 2 (* ?x429 ?x429 ?x215 ?x215 ?x215 ?x215)) (* 2 (* ?x429 ?x429 ?x429 ?x215 ?x215 ?x215)) (* (- 1) (* ?x429 ?x429 ?x215)) (* (- 1) (* ?x429 ?x429 ?x429)) ?x1360 (* (- 2) ?x1368))))
 (let (($x156 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x156 (not (= ?x1240 0)))))))))))) :qid k!26))
 ))
 (let ((?x1280 (lambda ((x Int) (y Int) )(let ((?x215 (+ 1 y)))
 (let ((?x429 (+ (- 1) x)))
 (let ((?x1341 (* ?x429 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1260 (* (- 2) ?x1341)))
 (let ((?x1327 (* ?x429 ?x429 ?x215 ?x215 ?x215 ?x215)))
 (let ((?x1334 (* (- 2) ?x1327)))
 (let ((?x1322 (* x x x)))
 (let ((?x857 (* x x y)))
 (let ((?x851 (* (- 2) (* x x))))
 (let ((?x217 (* x x y00)))
 (let ((?x158 (* x x x00)))
 (let ((?x142 (* 2 x00)))
 (let ((?x132 (* 2 y00)))
 (let ((?x1447 (+ ?x132 ?x142 (* (- 3) (* x y)) (* 7 (* y x00)) ?x158 ?x217 (* 7 (* y y00)) (* 6 (* x x y y x00)) (* (- 12) (* x y x00)) (* 6 (* y y x00)) (* (- 12) (* x y y x00)) (* 2 (* y y y x00)) (* (- 4) (* x y y y x00)) (* (- 1) (* y y)) ?x851 ?x857 (* 2 (* x x y y y x00)) (* 6 (* x x y y y00)) (* 6 (* x x y y00)) (* (- 2) (* x x00)) (* (- 2) (* x y00)) ?x1322 ?x1334 ?x1260 (* 6 (* x x y x00)) (* 6 (* y y y00)) (* 2 (* y y y y00)) (* (- 4) (* x y y y y00)) (* 2 (* x x y y y y00)) (* (- 12) (* x y y00)) (* (- 12) (* x y y y00)))))
 (let (($x92 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1661 (and $x92 (not (= ?x1447 0)))))
 (let ((?x1360 (* ?x215 ?x215)))
 (let ((?x1299 (* y00 ?x429 ?x429)))
 (let ((?x473 (* x00 ?x429 ?x429)))
 (let ((?x1285 (* ?x429 ?x215)))
 (let ((?x1240 (+ ?x1285 (* (- 1) (* x00 ?x215)) ?x473 ?x1299 (* (- 1) (* y00 ?x215)) (* (- 2) (* x00 ?x429 ?x429 ?x215 ?x215 ?x215)) (* 2 ?x1327) (* 2 ?x1341) (* (- 1) (* ?x429 ?x429 ?x215)) (* (- 1) (* ?x429 ?x429 ?x429)) ?x1360 (* (- 2) (* y00 ?x429 ?x429 ?x215 ?x215 ?x215)))))
 (let (($x156 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x722 (and $x156 (not (= ?x1240 0)))))
 (rewrite (= $x722 $x1661))))))))))))))))))))))))))
 ))
 (let (($x1292 (exists ((x Int) (y Int) )(! (let ((?x215 (+ 1 y)))
 (let ((?x429 (+ (- 1) x)))
 (let ((?x1368 (* y00 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1063 (* ?x429 ?x429 ?x429)))
 (let ((?x1355 (* ?x429 ?x429 ?x215)))
 (let ((?x1341 (* ?x429 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1260 (* (- 2) ?x1341)))
 (let ((?x1327 (* ?x429 ?x429 ?x215 ?x215 ?x215 ?x215)))
 (let ((?x1334 (* (- 2) ?x1327)))
 (let ((?x983 (* y00 ?x215)))
 (let ((?x1289 (* x00 ?x215)))
 (let ((?x1271 (+ (* (- 1) (* ?x429 ?x215)) ?x1289 (* (- 1) (* x00 ?x429 ?x429)) (* (- 1) (* y00 ?x429 ?x429)) ?x983 (* 2 (* x00 ?x429 ?x429 ?x215 ?x215 ?x215)) ?x1334 ?x1260 ?x1355 ?x1063 (* (- 1) (* ?x215 ?x215)) (* 2 ?x1368))))
 (let (($x156 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x156 (not (= ?x1271 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x1331 (lambda ((x Int) (y Int) )(let ((?x215 (+ 1 y)))
 (let ((?x429 (+ (- 1) x)))
 (let ((?x1368 (* y00 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1360 (* ?x215 ?x215)))
 (let ((?x1299 (* y00 ?x429 ?x429)))
 (let ((?x473 (* x00 ?x429 ?x429)))
 (let ((?x1285 (* ?x429 ?x215)))
 (let ((?x1240 (+ ?x1285 (* (- 1) (* x00 ?x215)) ?x473 ?x1299 (* (- 1) (* y00 ?x215)) (* (- 2) (* x00 ?x429 ?x429 ?x215 ?x215 ?x215)) (* 2 (* ?x429 ?x429 ?x215 ?x215 ?x215 ?x215)) (* 2 (* ?x429 ?x429 ?x429 ?x215 ?x215 ?x215)) (* (- 1) (* ?x429 ?x429 ?x215)) (* (- 1) (* ?x429 ?x429 ?x429)) ?x1360 (* (- 2) ?x1368))))
 (let (($x156 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x722 (and $x156 (not (= ?x1240 0)))))
 (let ((?x1063 (* ?x429 ?x429 ?x429)))
 (let ((?x1355 (* ?x429 ?x429 ?x215)))
 (let ((?x1341 (* ?x429 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1260 (* (- 2) ?x1341)))
 (let ((?x1327 (* ?x429 ?x429 ?x215 ?x215 ?x215 ?x215)))
 (let ((?x1334 (* (- 2) ?x1327)))
 (let ((?x983 (* y00 ?x215)))
 (let ((?x1289 (* x00 ?x215)))
 (let ((?x1271 (+ (* (- 1) ?x1285) ?x1289 (* (- 1) ?x473) (* (- 1) ?x1299) ?x983 (* 2 (* x00 ?x429 ?x429 ?x215 ?x215 ?x215)) ?x1334 ?x1260 ?x1355 ?x1063 (* (- 1) ?x1360) (* 2 ?x1368))))
 (let (($x1287 (and $x156 (not (= ?x1271 0)))))
 (rewrite (= $x1287 $x722)))))))))))))))))))))))
 ))
 (let (($x63 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x43 (- (- (+ (* (- 1) ?x35 ?x36) (* x00 ?x36)) (* ?x35 ?x35 x00)) (* ?x35 ?x35 y00))))
 (let ((?x50 (- (+ ?x43 (* ?x36 y00) (* 2 ?x35 ?x35 x00 ?x36 ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x54 (+ (- ?x50 (* 2 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35))))
 (let ((?x58 (+ (- ?x54 (* ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 y00))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x58 0)))))))))) :qid k!26))
 ))
 (let ((?x1238 (lambda ((x Int) (y Int) )(let ((?x215 (+ 1 y)))
 (let ((?x429 (+ (- 1) x)))
 (let ((?x1368 (* y00 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1063 (* ?x429 ?x429 ?x429)))
 (let ((?x1355 (* ?x429 ?x429 ?x215)))
 (let ((?x1341 (* ?x429 ?x429 ?x429 ?x215 ?x215 ?x215)))
 (let ((?x1260 (* (- 2) ?x1341)))
 (let ((?x1327 (* ?x429 ?x429 ?x215 ?x215 ?x215 ?x215)))
 (let ((?x1334 (* (- 2) ?x1327)))
 (let ((?x983 (* y00 ?x215)))
 (let ((?x1289 (* x00 ?x215)))
 (let ((?x1271 (+ (* (- 1) (* ?x429 ?x215)) ?x1289 (* (- 1) (* x00 ?x429 ?x429)) (* (- 1) (* y00 ?x429 ?x429)) ?x983 (* 2 (* x00 ?x429 ?x429 ?x215 ?x215 ?x215)) ?x1334 ?x1260 ?x1355 ?x1063 (* (- 1) (* ?x215 ?x215)) (* 2 ?x1368))))
 (let (($x156 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x1287 (and $x156 (not (= ?x1271 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x43 (- (- (+ (* (- 1) ?x35 ?x36) (* x00 ?x36)) (* ?x35 ?x35 x00)) (* ?x35 ?x35 y00))))
 (let ((?x50 (- (+ ?x43 (* ?x36 y00) (* 2 ?x35 ?x35 x00 ?x36 ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x54 (+ (- ?x50 (* 2 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35))))
 (let ((?x58 (+ (- ?x54 (* ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 y00))))
 (let (($x62 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x58 0))))))
 (rewrite (= $x62 $x1287))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x1310 (mp (mp @x64 (quant-intro (proof-bind ?x1238) (= $x63 $x1292)) $x1292) (rewrite (= $x1292 $x1292)) $x1292)))
 (let ((@x712 (mp (mp @x1310 (quant-intro (proof-bind ?x1331) (= $x1292 $x1335)) $x1335) (quant-intro (proof-bind ?x1280) (= $x1335 $x1454)) $x1454)))
 (let ((@x993 (mp (mp~ @x712 (sk (~ $x1454 $x1025)) $x1025) (rewrite (= $x1025 $x1383)) $x1383)))
 (let ((@x1320 (and-elim @x993 $x1388)))
 (let ((@x230 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1388) $x172)) @x1320 $x172)))
 (let (($x1068 (>= ?x1387 0)))
 (let ((@x1098 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1388) $x1068)) @x1320 $x1068)))
 (let (($x1386 (not (>= ?x1275 0))))
 (let (($x1357 (<= ?x1275 0)))
 (let ((@x1371 (lemma ((_ th-lemma arith) (hypothesis (not $x1357)) @x1098 @x230 @x1098 @x230 false) $x1357)))
 (let ((@x1395 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1382 (not $x1357) $x1386)) (and-elim @x993 $x994) (or (not $x1357) $x1386))))
 ((_ th-lemma arith) (unit-resolution @x1395 @x1371 $x1386) @x1098 @x230 @x1098 @x230 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             274
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.77
 :memory                    3.28
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1300899
 :num-checks                1
 :propagations              4
 :rlimit-count              5139
 :time                      0.01
 :total-time                0.02)
