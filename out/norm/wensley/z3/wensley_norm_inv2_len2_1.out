unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x595 (to_real a!3)))
 (let ((?x580 (to_real d!1)))
 (let ((?x452 (to_real y!0)))
 (let ((?x60 (to_real b00)))
 (let ((?x390 (* (- (/ 1.0 16.0)) (* ?x60 ?x452 ?x452 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595))))
 (let ((?x566 (to_real b!2)))
 (let ((?x593 (* (- (/ 1.0 64.0)) (* ?x60 ?x566 ?x566 ?x566 ?x580 ?x580 ?x580 ?x595 ?x595 ?x595))))
 (let ((?x389 (* (/ 1.0 64.0) (* (to_real d00) ?x566 ?x566 ?x566 ?x566 ?x580 ?x580 ?x595 ?x595 ?x595))))
 (let ((?x388 (* (/ 1.0 16.0) (* (to_real d00) ?x452 ?x452 ?x566 ?x580 ?x580 ?x580 ?x595 ?x595))))
 (let ((?x391 (+ ?x388 ?x389 ?x593 ?x390)))
 (let (($x269 (<= ?x391 0.0)))
 (let (($x341 (not $x269)))
 (let (($x303 (>= ?x391 0.0)))
 (let ((?x158 (* (/ 1.0 64.0) (* (to_real d00) ?x566 ?x566 ?x566 ?x580 ?x580 ?x580 ?x580 ?x580))))
 (let ((?x572 (* (/ 1.0 16.0) (* (to_real d00) ?x452 ?x566 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595))))
 (let ((?x571 (* (/ 1.0 8.0) (* (to_real d00) ?x452 ?x566 ?x566 ?x580 ?x580 ?x580 ?x580 ?x595))))
 (let ((?x439 (* (/ 1.0 32.0) (* (to_real d00) ?x566 ?x566 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595))))
 (let ((?x570 (* (/ 1.0 8.0) (* (to_real d00) ?x452 ?x452 ?x566 ?x566 ?x580 ?x580 ?x580 ?x595))))
 (let ((?x806 (* (/ 1.0 64.0) (* (to_real d00) ?x566 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595))))
 (let ((?x350 (* (/ 3.0 64.0) (* (to_real d00) ?x566 ?x566 ?x566 ?x566 ?x566 ?x566 ?x580 ?x580 ?x595))))
 (let ((?x217 (* (/ 1.0 16.0) (* (to_real d00) ?x452 ?x452 ?x566 ?x566 ?x566 ?x580 ?x580 ?x580))))
 (let ((?x344 (* (/ 1.0 64.0) (* (to_real d00) ?x566 ?x566 ?x566 ?x566 ?x566 ?x566 ?x566 ?x580 ?x580))))
 (let ((?x342 (* (/ 3.0 64.0) (* (to_real d00) ?x566 ?x566 ?x566 ?x566 ?x566 ?x580 ?x580 ?x595 ?x595))))
 (let ((?x216 (* (/ 1.0 16.0) (* (to_real d00) ?x452 ?x566 ?x566 ?x566 ?x580 ?x580 ?x580 ?x580))))
 (let ((?x178 (+ ?x216 (* (- (/ 1.0 16.0)) (* ?x60 ?x452 ?x452 ?x566 ?x566 ?x580 ?x580 ?x580 ?x580)) (* (- (/ 1.0 8.0)) (* ?x60 ?x452 ?x566 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595)) ?x342 (* (- (/ 1.0 16.0)) (* ?x60 ?x452 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595)) ?x344 (* (- (/ 1.0 32.0)) (* ?x60 ?x566 ?x580 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595)) ?x217 (* (- (/ 1.0 8.0)) (* ?x60 ?x452 ?x452 ?x566 ?x580 ?x580 ?x580 ?x580 ?x595)) ?x350 ?x388 (* (- (/ 3.0 64.0)) (* ?x60 ?x566 ?x566 ?x566 ?x566 ?x580 ?x580 ?x580 ?x595 ?x595)) (* (- (/ 3.0 64.0)) (* ?x60 ?x566 ?x566 ?x566 ?x566 ?x566 ?x580 ?x580 ?x580 ?x595)) (* (- (/ 1.0 64.0)) (* ?x60 ?x566 ?x566 ?x566 ?x566 ?x566 ?x566 ?x580 ?x580 ?x580)) (* (- (/ 1.0 16.0)) (* ?x60 ?x452 ?x566 ?x566 ?x580 ?x580 ?x580 ?x580 ?x580)) ?x389 ?x806 (* (- (/ 1.0 64.0)) (* ?x60 ?x566 ?x566 ?x580 ?x580 ?x580 ?x580 ?x580 ?x580)) ?x593 (* (- (/ 1.0 64.0)) (* ?x60 ?x580 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595)) ?x570 ?x439 ?x571 ?x572 ?x158 ?x390)))
 (let (($x668 (>= ?x178 0.0)))
 (let ((?x219 (+ (* d00 b!2) (* (- 1) (* b00 d!1)))))
 (let (($x186 (>= ?x219 0)))
 (let (($x262 (= 0 ?x219)))
 (let ((@x200 (symm (commutativity (= $x262 (= ?x219 0))) (= (= ?x219 0) $x262))))
 (let (($x652 (= ?x219 0)))
 (let (($x392 (= ?x391 0.0)))
 (let (($x402 (not $x392)))
 (let (($x227 (or $x402 (not (= ?x178 0.0)))))
 (let ((?x625 (* (- 2) (* b!2 y!0))))
 (let ((?x712 (+ (* d!1 a!3) ?x625 (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x395 (= (+ ?x35 ?x98 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x472 (and $x395 $x652 (= ?x712 0) $x227)))
 (let ((?x268 (* (- (/ 1.0 64.0)) (* ?x580 ?x580 ?x566 ?x566 ?x566 ?x566 ?x566 ?x566 ?x566 (to_real d00)))))
 (let ((?x247 (* (- (/ 3.0 64.0)) (* ?x580 ?x580 ?x595 ?x566 ?x566 ?x566 ?x566 ?x566 ?x566 (to_real d00)))))
 (let ((?x503 (* (- (/ 3.0 64.0)) (* ?x580 ?x580 ?x595 ?x595 ?x566 ?x566 ?x566 ?x566 ?x566 (to_real d00)))))
 (let ((?x234 (* (- (/ 1.0 16.0)) (* ?x580 ?x580 ?x580 ?x452 ?x452 ?x566 ?x566 ?x566 (to_real d00)))))
 (let ((?x694 (* (- (/ 1.0 8.0)) (* ?x580 ?x580 ?x580 ?x595 ?x452 ?x452 ?x566 ?x566 (to_real d00)))))
 (let ((?x335 (* (- (/ 1.0 16.0)) (* ?x580 ?x580 ?x580 ?x580 ?x452 ?x566 ?x566 ?x566 (to_real d00)))))
 (let ((?x288 (* (- (/ 1.0 8.0)) (* ?x580 ?x580 ?x580 ?x580 ?x595 ?x452 ?x566 ?x566 (to_real d00)))))
 (let ((?x320 (* (- (/ 1.0 16.0)) (* ?x580 ?x580 ?x580 ?x580 ?x595 ?x595 ?x452 ?x566 (to_real d00)))))
 (let ((?x579 (* (- (/ 1.0 64.0)) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x566 ?x566 ?x566 (to_real d00)))))
 (let ((?x254 (* (- (/ 1.0 32.0)) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x566 ?x566 (to_real d00)))))
 (let ((?x476 (* (- (/ 1.0 64.0)) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595 ?x566 (to_real d00)))))
 (let ((?x314 (* (/ 1.0 64.0) (* ?x580 ?x580 ?x580 ?x595 ?x595 ?x595 ?x60 ?x566 ?x566 ?x566))))
 (let ((?x293 (* (- (/ 1.0 64.0)) (* ?x580 ?x580 ?x595 ?x595 ?x595 ?x566 ?x566 ?x566 ?x566 (to_real d00)))))
 (let ((?x150 (* (- (/ 1.0 16.0)) (* ?x580 ?x580 ?x580 ?x595 ?x595 ?x452 ?x452 ?x566 (to_real d00)))))
 (let ((?x777 (* (/ 1.0 16.0) (* ?x580 ?x580 ?x580 ?x580 ?x595 ?x595 ?x60 ?x452 ?x452))))
 (let ((?x516 (+ ?x777 ?x150 ?x293 (* (/ 1.0 64.0) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595 ?x60)) ?x314 (* (/ 1.0 32.0) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x60 ?x566)) (* (/ 1.0 64.0) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x580 ?x60 ?x566 ?x566)) (* (/ 1.0 16.0) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x595 ?x60 ?x452)) (* (/ 1.0 8.0) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x595 ?x60 ?x452 ?x566)) (* (/ 1.0 16.0) (* ?x580 ?x580 ?x580 ?x580 ?x580 ?x60 ?x452 ?x566 ?x566)) (* (/ 1.0 8.0) (* ?x580 ?x580 ?x580 ?x580 ?x595 ?x60 ?x452 ?x452 ?x566)) (* (/ 1.0 16.0) (* ?x580 ?x580 ?x580 ?x580 ?x60 ?x452 ?x452 ?x566 ?x566)) ?x476 ?x254 ?x579 ?x320 ?x288 ?x335 ?x694 ?x234 ?x503 ?x247 ?x268 (* (/ 3.0 64.0) (* ?x580 ?x580 ?x580 ?x595 ?x595 ?x60 ?x566 ?x566 ?x566 ?x566)) (* (/ 3.0 64.0) (* ?x580 ?x580 ?x580 ?x595 ?x60 ?x566 ?x566 ?x566 ?x566 ?x566)) (* (/ 1.0 64.0) (* ?x580 ?x580 ?x580 ?x60 ?x566 ?x566 ?x566 ?x566 ?x566 ?x566)))))
 (let ((?x799 (+ (* a!3 d!1) ?x625 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x754 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x98 (* 2 (* y!0 b00))) 0)))
 (let (($x359 (and $x754 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x799 0) (or (not (= (+ ?x777 ?x150 ?x293 ?x314) 0.0)) (not (= ?x516 0.0))))))
 (let (($x838 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real b)))
 (let ((?x60 (to_real b00)))
 (let ((?x56 (to_real d)))
 (let ((?x821 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 (to_real a) ?x60 ?x63 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x745 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63 (to_real d00)))))
 (let ((?x742 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x59 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63 (to_real d00)))))
 (let ((?x739 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63 ?x63 ?x63 (to_real d00)))))
 (let ((?x65 (to_real d00)))
 (let ((?x61 (to_real y)))
 (let ((?x261 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x236 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 ?x63 ?x63 ?x65))))
 (let ((?x204 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x65))))
 (let ((?x161 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x61 ?x61))))
 (let ((?x830 (+ ?x161 ?x204 ?x236 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x60)) ?x261 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x65)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x65)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x65)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63 ?x63 ?x65)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 ?x65)) ?x739 ?x742 ?x745 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x63 ?x63 ?x63 ?x63)) ?x821 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x60 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63)))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x130 (= (+ ?x35 (* (- 1) (* a d00)) ?x98 (* 2 (* y b00))) 0)))
 (and $x130 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= (+ ?x161 ?x204 ?x236 ?x261) 0.0)) (not (= ?x830 0.0))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x491 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x457 (+ ?x59 ?x63)))
 (let ((?x56 (to_real d)))
 (let ((?x60 (to_real b00)))
 (let ((?x479 (* (- (/ 1.0 64.0)) (* (to_real d00) ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457))))
 (let ((?x61 (to_real y)))
 (let ((?x811 (+ ?x61 (* (/ 1.0 2.0) ?x56))))
 (let ((?x65 (to_real d00)))
 (let ((?x521 (+ (* (/ 1.0 16.0) (* ?x60 ?x56 ?x56 ?x56 ?x56 ?x457 ?x457 ?x811 ?x811)) (* (- (/ 1.0 16.0)) (* ?x65 ?x56 ?x56 ?x56 ?x63 ?x457 ?x457 ?x811 ?x811)) ?x479 (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457)))))
 (let ((?x446 (+ (* (/ 1.0 16.0) (* ?x60 ?x61 ?x61 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x65 ?x61 ?x61 ?x56 ?x56 ?x56 ?x63 ?x59 ?x59)) (* (- (/ 1.0 64.0)) (* ?x65 ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)))))
 (let (($x523 (or (not (= ?x446 0.0)) (not (= ?x521 0.0)))))
 (let ((?x190 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x536 (= ?x190 0)))
 (let ((?x769 (* d00 a)))
 (let ((?x822 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x769)))
 (and (= ?x822 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x536 $x523))))))))))))))))) :qid k!33))
 ))
 (let ((?x445 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real b)))
 (let ((?x60 (to_real b00)))
 (let ((?x56 (to_real d)))
 (let ((?x821 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 (to_real a) ?x60 ?x63 ?x63 ?x63 ?x63 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x745 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63 (to_real d00)))))
 (let ((?x742 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x59 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63 (to_real d00)))))
 (let ((?x739 (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63 ?x63 ?x63 (to_real d00)))))
 (let ((?x65 (to_real d00)))
 (let ((?x61 (to_real y)))
 (let ((?x261 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x236 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 ?x63 ?x63 ?x65))))
 (let ((?x204 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x65))))
 (let ((?x161 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x61 ?x61))))
 (let ((?x830 (+ ?x161 ?x204 ?x236 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x60)) ?x261 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x65)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x65)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x65)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63 ?x63 ?x65)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x65)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 ?x65)) ?x739 ?x742 ?x745 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x63 ?x63 ?x63 ?x63)) ?x821 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x60 ?x63 ?x63 ?x63 ?x63 ?x63 ?x63)))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x130 (= (+ ?x35 (* (- 1) (* a d00)) ?x98 (* 2 (* y b00))) 0)))
 (let (($x184 (and $x130 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= (+ ?x161 ?x204 ?x236 ?x261) 0.0)) (not (= ?x830 0.0))))))
 (let ((?x457 (+ ?x59 ?x63)))
 (let ((?x811 (+ ?x61 (* (/ 1.0 2.0) ?x56))))
 (let ((?x521 (+ (* (/ 1.0 16.0) (* ?x60 ?x56 ?x56 ?x56 ?x56 ?x457 ?x457 ?x811 ?x811)) (* (- (/ 1.0 16.0)) (* ?x65 ?x56 ?x56 ?x56 ?x63 ?x457 ?x457 ?x811 ?x811)) (* (- (/ 1.0 64.0)) (* ?x65 ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457)) (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457)))))
 (let ((?x446 (+ (* (/ 1.0 16.0) (* ?x60 ?x61 ?x61 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x65 ?x61 ?x61 ?x56 ?x56 ?x56 ?x63 ?x59 ?x59)) (* (- (/ 1.0 64.0)) (* ?x65 ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)))))
 (let (($x523 (or (not (= ?x446 0.0)) (not (= ?x521 0.0)))))
 (let ((?x190 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x536 (= ?x190 0)))
 (let ((?x769 (* d00 a)))
 (let (($x470 (= (+ (* 2 ?x97) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x769) 0)))
 (let (($x482 (and $x470 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x536 $x523)))
 (rewrite (= $x482 $x184)))))))))))))))))))))))))))))))))))
 ))
 (let (($x527 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x457 (+ ?x59 ?x63)))
 (let ((?x56 (to_real d)))
 (let ((?x60 (to_real b00)))
 (let ((?x479 (* (- (/ 1.0 64.0)) (* (to_real d00) ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457))))
 (let ((?x61 (to_real y)))
 (let ((?x811 (+ ?x61 (* (/ 1.0 2.0) ?x56))))
 (let ((?x65 (to_real d00)))
 (let ((?x521 (+ (* (/ 1.0 16.0) (* ?x60 ?x56 ?x56 ?x56 ?x56 ?x457 ?x457 ?x811 ?x811)) (* (- (/ 1.0 16.0)) (* ?x65 ?x56 ?x56 ?x56 ?x63 ?x457 ?x457 ?x811 ?x811)) ?x479 (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457)))))
 (let ((?x446 (+ (* (/ 1.0 16.0) (* ?x60 ?x61 ?x61 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x65 ?x61 ?x61 ?x56 ?x56 ?x56 ?x63 ?x59 ?x59)) (* (- (/ 1.0 64.0)) (* ?x65 ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)))))
 (let (($x523 (or (not (= ?x446 0.0)) (not (= ?x521 0.0)))))
 (let ((?x190 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x536 (= ?x190 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x781 (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x781 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x536 $x523))))))))))))))))))) :qid k!33))
 ))
 (let ((?x489 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x457 (+ ?x59 ?x63)))
 (let ((?x56 (to_real d)))
 (let ((?x60 (to_real b00)))
 (let ((?x479 (* (- (/ 1.0 64.0)) (* (to_real d00) ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457))))
 (let ((?x61 (to_real y)))
 (let ((?x811 (+ ?x61 (* (/ 1.0 2.0) ?x56))))
 (let ((?x65 (to_real d00)))
 (let ((?x521 (+ (* (/ 1.0 16.0) (* ?x60 ?x56 ?x56 ?x56 ?x56 ?x457 ?x457 ?x811 ?x811)) (* (- (/ 1.0 16.0)) (* ?x65 ?x56 ?x56 ?x56 ?x63 ?x457 ?x457 ?x811 ?x811)) ?x479 (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457)))))
 (let ((?x446 (+ (* (/ 1.0 16.0) (* ?x60 ?x61 ?x61 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x65 ?x61 ?x61 ?x56 ?x56 ?x56 ?x63 ?x59 ?x59)) (* (- (/ 1.0 64.0)) (* ?x65 ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)))))
 (let (($x523 (or (not (= ?x446 0.0)) (not (= ?x521 0.0)))))
 (let ((?x190 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x536 (= ?x190 0)))
 (let ((?x769 (* d00 a)))
 (let ((?x822 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x769)))
 (let (($x482 (and (= ?x822 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x536 $x523)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x817 (and (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) ?x769)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x536 $x523)))
 (rewrite (= $x817 $x482))))))))))))))))))))))))
 ))
 (let (($x89 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x60 (to_real b00)))
 (let ((?x63 (to_real b)))
 (let ((?x64 (/ ?x63 ?x57)))
 (let ((?x77 (to_real (+ a b))))
 (let ((?x61 (to_real y)))
 (let ((?x76 (+ ?x61 ?x58)))
 (let ((?x65 (to_real d00)))
 (let ((?x81 (- (* ?x77 ?x77 ?x60 ?x58 ?x58 ?x58 ?x58 ?x76 ?x76) (* ?x77 ?x77 ?x64 ?x58 ?x58 ?x58 ?x65 ?x76 ?x76))))
 (let ((?x84 (+ (- ?x81 (* ?x77 ?x77 ?x77 ?x64 ?x64 ?x64 ?x64 ?x58 ?x58 ?x65)) (* ?x77 ?x77 ?x77 ?x64 ?x64 ?x64 ?x60 ?x58 ?x58 ?x58))))
 (let ((?x59 (to_real a)))
 (let ((?x68 (- (* ?x59 ?x59 ?x60 ?x58 ?x58 ?x58 ?x58 ?x61 ?x61) (* ?x59 ?x59 ?x64 ?x58 ?x58 ?x58 ?x65 ?x61 ?x61))))
 (let ((?x71 (+ (- ?x68 (* ?x59 ?x59 ?x59 ?x64 ?x64 ?x64 ?x64 ?x58 ?x58 ?x65)) (* ?x59 ?x59 ?x59 ?x64 ?x64 ?x64 ?x60 ?x58 ?x58 ?x58))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x71 ?x72)) (not (= ?x84 ?x72)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x363 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x457 (+ ?x59 ?x63)))
 (let ((?x56 (to_real d)))
 (let ((?x60 (to_real b00)))
 (let ((?x479 (* (- (/ 1.0 64.0)) (* (to_real d00) ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457))))
 (let ((?x61 (to_real y)))
 (let ((?x811 (+ ?x61 (* (/ 1.0 2.0) ?x56))))
 (let ((?x65 (to_real d00)))
 (let ((?x521 (+ (* (/ 1.0 16.0) (* ?x60 ?x56 ?x56 ?x56 ?x56 ?x457 ?x457 ?x811 ?x811)) (* (- (/ 1.0 16.0)) (* ?x65 ?x56 ?x56 ?x56 ?x63 ?x457 ?x457 ?x811 ?x811)) ?x479 (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x457 ?x457 ?x457)))))
 (let ((?x446 (+ (* (/ 1.0 16.0) (* ?x60 ?x61 ?x61 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x65 ?x61 ?x61 ?x56 ?x56 ?x56 ?x63 ?x59 ?x59)) (* (- (/ 1.0 64.0)) (* ?x65 ?x56 ?x56 ?x63 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x60 ?x56 ?x56 ?x56 ?x63 ?x63 ?x63 ?x59 ?x59 ?x59)))))
 (let (($x523 (or (not (= ?x446 0.0)) (not (= ?x521 0.0)))))
 (let ((?x190 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x536 (= ?x190 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x781 (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x817 (and $x781 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x536 $x523)))
 (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x64 (/ ?x63 ?x57)))
 (let ((?x77 (to_real (+ a b))))
 (let ((?x81 (- (* ?x77 ?x77 ?x60 ?x58 ?x58 ?x58 ?x58 (+ ?x61 ?x58) (+ ?x61 ?x58)) (* ?x77 ?x77 ?x64 ?x58 ?x58 ?x58 ?x65 (+ ?x61 ?x58) (+ ?x61 ?x58)))))
 (let ((?x84 (+ (- ?x81 (* ?x77 ?x77 ?x77 ?x64 ?x64 ?x64 ?x64 ?x58 ?x58 ?x65)) (* ?x77 ?x77 ?x77 ?x64 ?x64 ?x64 ?x60 ?x58 ?x58 ?x58))))
 (let ((?x68 (- (* ?x59 ?x59 ?x60 ?x58 ?x58 ?x58 ?x58 ?x61 ?x61) (* ?x59 ?x59 ?x64 ?x58 ?x58 ?x58 ?x65 ?x61 ?x61))))
 (let ((?x71 (+ (- ?x68 (* ?x59 ?x59 ?x59 ?x64 ?x64 ?x64 ?x64 ?x58 ?x58 ?x65)) (* ?x59 ?x59 ?x59 ?x64 ?x64 ?x64 ?x60 ?x58 ?x58 ?x58))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x88 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x71 ?x72)) (not (= ?x84 ?x72))))))
 (rewrite (= $x88 $x817))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x431 (mp (mp @x90 (quant-intro (proof-bind ?x363) (= $x89 $x527)) $x527) (rewrite (= $x527 $x527)) $x527)))
 (let ((@x444 (mp (mp @x431 (quant-intro (proof-bind ?x489) (= $x527 $x491)) $x491) (quant-intro (proof-bind ?x445) (= $x491 $x838)) $x838)))
 (let ((@x650 (mp (mp~ @x444 (sk (~ $x838 $x359)) $x359) (rewrite (= $x359 $x472)) $x472)))
 (let ((@x255 (mp (and-elim @x650 $x652) @x200 $x262)))
 (let ((@x270 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x262) $x186)) @x255 $x186)))
 (let (($x264 (<= ?x219 0)))
 (let ((@x259 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x262) $x264)) @x255 $x264)))
 (let ((@x282 (unit-resolution ((_ th-lemma arith) (or $x668 (not $x186) (not $x264))) @x259 @x270 (hypothesis (not $x668)) false)))
 (let ((@x202 (lemma @x282 $x668)))
 (let (($x279 (<= ?x178 0.0)))
 (let ((@x329 (unit-resolution ((_ th-lemma arith) (or $x279 (not $x186) (not $x264))) @x259 @x270 (hypothesis (not $x279)) false)))
 (let ((@x212 (lemma @x329 $x279)))
 (let ((@x287 (unit-resolution ((_ th-lemma arith) (or (not $x279) (not $x668) $x303 (not $x186) (not $x264))) @x259 @x270 (hypothesis (not $x303)) @x212 @x202 false)))
 (let (($x628 (= 0.0 ?x391)))
 (let (($x531 (not $x628)))
 (let ((@x535 (monotonicity (symm (commutativity (= $x628 $x392)) (= $x392 $x628)) (= $x402 $x531))))
 (let (($x180 (= ?x178 0.0)))
 (let ((@x462 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x180 (not $x279) (not $x668))) @x202 (or $x180 (not $x279)))))
 (let ((@x436 (unit-resolution (and-elim @x650 $x227) (unit-resolution @x462 @x212 $x180) $x402)))
 (let ((@x437 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x628 $x341 (not $x303))) (mp @x436 @x535 $x531) (or $x341 (not $x303)))))
 (unit-resolution ((_ th-lemma arith) (or $x269 (not $x186) (not $x264))) @x259 @x270 (unit-resolution @x437 (lemma @x287 $x303) $x341) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       25
 :arith-eq-adapter                27
 :arith-bound-propagations-cheap  35
 :arith-bound-propagations-lp     8
 :arith-conflicts                 90
 :arith-diseq                     36
 :arith-gcd-calls                 7
 :arith-grobner-calls             4
 :arith-grobner-conflicts         4
 :arith-horner-calls              4
 :arith-horner-cross-nested-forms 16
 :arith-lower                     54
 :arith-make-feasible             65
 :arith-max-columns               65
 :arith-max-rows                  11
 :arith-nla-explanations          87
 :arith-nla-lemmas                89
 :arith-patches                   7
 :arith-patches-success           7
 :arith-propagations              35
 :arith-upper                     88
 :conflicts                       9
 :decisions                       105
 :del-clause                      117
 :final-checks                    28
 :max-memory                      4.47
 :memory                          3.18
 :mk-bool-var                     229
 :mk-clause                       176
 :num-allocs                      12296695
 :num-checks                      1
 :propagations                    109
 :rlimit-count                    6574
 :time                            0.04
 :total-time                      0.04)
