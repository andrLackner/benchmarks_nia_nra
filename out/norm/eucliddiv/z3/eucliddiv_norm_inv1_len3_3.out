unsat
((set-logic NIA)
(proof
(let (($x55 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x49 (* ?x42 ?x42 ?x43 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x46 (* ?x42 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x43 y00)))
 (let ((?x47 (- ?x44 ?x45)))
 (let ((?x48 (- ?x47 ?x46)))
 (let ((?x50 (+ ?x48 ?x46 ?x45 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x53)))))))))))))))) :qid k!29))
 ))
 (let (($x218 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x219 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x49 (* ?x42 ?x42 ?x43 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x43 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x46 (* ?x42 ?x43 ?x43 y00 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x44 (* ?x28 ?x42 ?x42 ?x43 y00)))
 (let ((?x47 (- ?x44 ?x45)))
 (let ((?x48 (- ?x47 ?x46)))
 (let ((?x50 (+ ?x48 ?x46 ?x45 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x54 (and $x33 $x41 $x53)))
 (let (($x461 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x80 (= (+ (* (- 1) y00) y) 0)))
 (let (($x211 (and $x80 $x461 false)))
 (let ((?x60 (* (- 1) y00)))
 (let ((?x110 (+ r ?x60)))
 (let ((?x96 (+ 1 q)))
 (let ((?x345 (* y00 ?x96 ?x96 ?x110)))
 (let ((?x463 (* y00 y00 y00 y00 ?x96 ?x96 ?x110 ?x110 ?x110)))
 (let ((?x116 (* y00 y00 y00 y00 ?x96 ?x110 ?x110)))
 (let ((?x169 (* (- 1) ?x116)))
 (let ((?x153 (* (- 1) ?x463)))
 (let ((?x293 (* (- 1) ?x345)))
 (let ((?x173 (+ ?x293 ?x153 ?x169)))
 (let ((?x186 (+ ?x173 ?x116 ?x463 ?x345)))
 (let ((@x336 (rewrite (= ?x43 ?x110))))
 (let ((@x101 (rewrite (= ?x42 ?x96))))
 (let ((@x184 (trans (monotonicity @x101 @x101 @x336 (= ?x49 (* ?x96 ?x96 ?x110 y00))) (rewrite (= (* ?x96 ?x96 ?x110 y00) ?x345)) (= ?x49 ?x345))))
 (let ((@x148 (rewrite (= (* ?x96 ?x96 ?x110 ?x110 ?x110 y00 y00 y00 y00) ?x463))))
 (let ((@x358 (monotonicity @x101 @x101 @x336 @x336 @x336 (= ?x45 (* ?x96 ?x96 ?x110 ?x110 ?x110 y00 y00 y00 y00)))))
 (let ((@x150 (trans @x358 @x148 (= ?x45 ?x463))))
 (let ((@x159 (monotonicity @x101 @x336 @x336 (= ?x46 (* ?x96 ?x110 ?x110 y00 y00 y00 y00)))))
 (let ((@x166 (trans @x159 (rewrite (= (* ?x96 ?x110 ?x110 y00 y00 y00 y00) ?x116)) (= ?x46 ?x116))))
 (let ((@x149 (monotonicity (rewrite (= ?x28 (- 1))) @x101 @x101 @x336 (= ?x44 (* (- 1) ?x96 ?x96 ?x110 y00)))))
 (let ((@x278 (trans @x149 (rewrite (= (* (- 1) ?x96 ?x96 ?x110 y00) ?x293)) (= ?x44 ?x293))))
 (let ((@x161 (trans (monotonicity @x278 @x150 (= ?x47 (- ?x293 ?x463))) (rewrite (= (- ?x293 ?x463) (+ ?x293 ?x153))) (= ?x47 (+ ?x293 ?x153)))))
 (let ((@x172 (trans (monotonicity @x161 @x166 (= ?x48 (- (+ ?x293 ?x153) ?x116))) (rewrite (= (- (+ ?x293 ?x153) ?x116) (+ (+ ?x293 ?x153) ?x169))) (= ?x48 (+ (+ ?x293 ?x153) ?x169)))))
 (let ((@x179 (trans @x172 (rewrite (= (+ (+ ?x293 ?x153) ?x169) ?x173)) (= ?x48 ?x173))))
 (let ((@x189 (trans (monotonicity @x179 @x166 @x150 @x184 (= ?x50 ?x186)) (rewrite (= ?x186 0)) $x51)))
 (let ((@x121 (trans (monotonicity @x189 (= $x51 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x51 true))))
 (let ((@x201 (trans (monotonicity @x121 (= $x52 (not true))) (rewrite (= (not true) false)) (= $x52 false))))
 (let ((@x210 (trans (monotonicity @x201 (= $x53 (or false))) (rewrite (= (or false) false)) (= $x53 false))))
 (let ((@x123 (monotonicity (rewrite (= $x33 $x80)) (rewrite (= $x41 $x461)) @x210 (= $x54 $x211))))
 (trans @x123 (rewrite (= $x211 false)) (= $x54 false)))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x125 (trans (quant-intro (proof-bind ?x219) (= $x55 $x218)) (elim-unused (= $x218 false)) (= $x55 false))))
 (let ((@x56 (asserted $x55)))
 (mp @x56 @x125 false))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   921453
 :rlimit-count 423
 :time         0.01
 :total-time   0.01)
