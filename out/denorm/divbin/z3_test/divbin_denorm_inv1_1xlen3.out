unsat
((set-logic NRA)
(proof
(let (($x424 (exists ((b Real) (x Real) )(! (let ((?x393 (* (- (/ 1.0 2.0)) b)))
 (let ((?x524 (* x b)))
 (let ((?x398 (* (- 1.0) ?x524)))
 (let ((?x70 (* b00 x00)))
 (let ((?x427 (+ ?x70 r00 ?x398 ?x393)))
 (let ((?x49 (* 2.0 x)))
 (let ((?x378 (+ 1.0 ?x49)))
 (let ((?x436 (* ?x378 ?x378 ?x378 ?x427)))
 (let ((?x435 (* (/ 1.0 4.0) (* ?x378 ?x378 ?x427 ?x427 b b))))
 (let ((?x432 (* ?x427 b b)))
 (let ((?x434 (* (/ 1.0 4.0) ?x432)))
 (let ((?x412 (+ ?x434 ?x435 ?x436)))
 (let ((?x394 (* ?x378 b)))
 (let ((?x440 (* (/ 1.0 2.0) ?x394)))
 (let ((?x438 (+ ?x398 ?x393 ?x440)))
 (let ((?x418 (* ?x438 ?x412)))
 (let (($x421 (= ?x418 0.0)))
 (not $x421)))))))))))))))))) :qid k!28))
 ))
 (let (($x298 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x190 (lambda ((b Real) (x Real) )(let ((?x393 (* (- (/ 1.0 2.0)) b)))
 (let ((?x524 (* x b)))
 (let ((?x398 (* (- 1.0) ?x524)))
 (let ((?x70 (* b00 x00)))
 (let ((?x427 (+ ?x70 r00 ?x398 ?x393)))
 (let ((?x49 (* 2.0 x)))
 (let ((?x378 (+ 1.0 ?x49)))
 (let ((?x436 (* ?x378 ?x378 ?x378 ?x427)))
 (let ((?x435 (* (/ 1.0 4.0) (* ?x378 ?x378 ?x427 ?x427 b b))))
 (let ((?x432 (* ?x427 b b)))
 (let ((?x434 (* (/ 1.0 4.0) ?x432)))
 (let ((?x412 (+ ?x434 ?x435 ?x436)))
 (let ((?x394 (* ?x378 b)))
 (let ((?x440 (* (/ 1.0 2.0) ?x394)))
 (let ((?x438 (+ ?x398 ?x393 ?x440)))
 (let ((?x418 (* ?x438 ?x412)))
 (let (($x421 (= ?x418 0.0)))
 (let (($x420 (not $x421)))
 (let ((?x589 (* x x b00 x00)))
 (let ((?x122 (* 12.0 ?x589)))
 (let ((?x584 (* x b00 x00)))
 (let ((?x121 (* 6.0 ?x584)))
 (let ((?x580 (* 8.0 (* x x x r00))))
 (let ((?x571 (* x x r00)))
 (let ((?x166 (* 12.0 ?x571)))
 (let ((?x565 (* x r00)))
 (let ((?x124 (* 6.0 ?x565)))
 (let ((?x557 (* b b b)))
 (let ((?x89 (* (- (/ 1.0 8.0)) ?x557)))
 (let ((?x550 (* x x b)))
 (let ((?x116 (* (- 12.0) ?x550)))
 (let ((?x111 (* (- 4.0) ?x524)))
 (let ((?x596 (* 8.0 (* x x x b00 x00))))
 (let ((?x467 (* b b r00)))
 (let ((?x76 (* (/ 1.0 4.0) ?x467)))
 (let ((?x464 (* b b b00 x00)))
 (let ((?x75 (* (/ 1.0 4.0) ?x464)))
 (let ((?x187 (* (- 8.0) (* x x x x b))))
 (let ((?x179 (* x b b b)))
 (let ((?x84 (* (- (/ 1.0 4.0)) ?x179)))
 (let ((?x159 (* x x x b)))
 (let ((?x118 (* (- 16.0) ?x159)))
 (let ((?x471 (+ ?x393 r00 ?x70 ?x398)))
 (let ((?x97 (* (/ 1.0 4.0) (* ?x378 ?x378 ?x471 ?x471 b b))))
 (let ((?x125 (+ ?x393 r00 ?x70 ?x97 ?x118 ?x84 ?x187 ?x75 ?x76 ?x596 ?x111 ?x116 ?x89 ?x124 ?x166 ?x580 ?x121 ?x122)))
 (let ((?x267 (* 0.0 ?x125)))
 (let ((?x161 (+ ?x393 r00 ?x70 ?x118 ?x187 ?x596 ?x111 ?x116 ?x124 ?x166 ?x580 ?x121 ?x122)))
 (let ((?x92 (+ ?x84 ?x75 ?x76 ?x89)))
 (let ((?x148 (+ ?x92 ?x97 ?x161)))
 (let ((?x523 (* ?x49 ?x49 ?x49 ?x398)))
 (let ((?x527 (* ?x49 ?x49 ?x398)))
 (let ((?x528 (* ?x49 1.0 ?x49 ?x398)))
 (let ((?x530 (* ?x49 ?x398)))
 (let ((?x525 (* ?x49 ?x49 1.0 ?x398)))
 (let ((?x526 (* ?x49 1.0 ?x398)))
 (let ((?x481 (* ?x49 1.0 1.0 ?x398)))
 (let ((?x531 (* 1.0 ?x398)))
 (let ((?x532 (* ?x49 ?x49 ?x49 ?x70)))
 (let ((?x535 (* ?x49 ?x49 ?x70)))
 (let ((?x537 (* ?x49 1.0 ?x49 ?x70)))
 (let ((?x482 (* ?x49 ?x70)))
 (let ((?x538 (* ?x49 ?x49 1.0 ?x70)))
 (let ((?x539 (* ?x49 1.0 ?x70)))
 (let ((?x540 (* ?x49 1.0 1.0 ?x70)))
 (let ((?x541 (* 1.0 ?x70)))
 (let ((?x499 (* ?x49 ?x49 ?x49 r00)))
 (let ((?x542 (* ?x49 ?x49 r00)))
 (let ((?x543 (* ?x49 1.0 ?x49 r00)))
 (let ((?x544 (* ?x49 r00)))
 (let ((?x545 (* ?x49 ?x49 1.0 r00)))
 (let ((?x501 (* ?x49 1.0 r00)))
 (let ((?x546 (* ?x49 1.0 1.0 r00)))
 (let ((?x547 (* 1.0 r00)))
 (let ((?x548 (* ?x49 ?x49 ?x49 ?x393)))
 (let ((?x549 (* ?x49 ?x49 ?x393)))
 (let ((?x553 (* ?x49 1.0 ?x49 ?x393)))
 (let ((?x554 (* ?x49 ?x393)))
 (let ((?x556 (* ?x49 ?x49 1.0 ?x393)))
 (let ((?x551 (* ?x49 1.0 ?x393)))
 (let ((?x552 (* ?x49 1.0 1.0 ?x393)))
 (let ((?x502 (* 1.0 ?x393)))
 (let ((?x522 (+ ?x502 ?x552 ?x551 ?x556 ?x554 ?x553 ?x549 ?x548 ?x547 ?x546 ?x501 ?x545 ?x544 ?x543 ?x542 ?x499 ?x541 ?x540 ?x539 ?x538 ?x482 ?x537 ?x535 ?x532 ?x531 ?x481 ?x526 ?x525 ?x530 ?x528 ?x527 ?x523)))
 (let ((?x284 (* (- 4.0) ?x159)))
 (let ((?x247 (* (- 2.0) ?x550)))
 (let ((?x509 (* 4.0 ?x589)))
 (let ((?x585 (* 2.0 ?x584)))
 (let ((?x572 (* 4.0 ?x571)))
 (let ((?x567 (* 2.0 ?x565)))
 (let ((?x239 (+ ?x393 ?x398 ?x398 ?x247 ?x398 ?x247 ?x247 ?x284 r00 ?x567 ?x567 ?x572 ?x567 ?x572 ?x572 ?x580 ?x70 ?x585 ?x585 ?x509 ?x585 ?x509 ?x509 ?x596 ?x398 ?x247 ?x247 ?x284 ?x247 ?x284 ?x284 ?x187)))
 (let ((@x108 (monotonicity (rewrite (= ?x502 ?x393)) (rewrite (= ?x552 ?x398)) (rewrite (= ?x551 ?x398)) (rewrite (= ?x556 ?x247)) (rewrite (= ?x554 ?x398)) (rewrite (= ?x553 ?x247)) (rewrite (= ?x549 ?x247)) (rewrite (= ?x548 ?x284)) (rewrite (= ?x547 r00)) (rewrite (= ?x546 ?x567)) (rewrite (= ?x501 ?x567)) (rewrite (= ?x545 ?x572)) (rewrite (= ?x544 ?x567)) (rewrite (= ?x543 ?x572)) (rewrite (= ?x542 ?x572)) (rewrite (= ?x499 ?x580)) (rewrite (= ?x541 ?x70)) (rewrite (= ?x540 ?x585)) (rewrite (= ?x539 ?x585)) (rewrite (= ?x538 ?x509)) (rewrite (= ?x482 ?x585)) (rewrite (= ?x537 ?x509)) (rewrite (= ?x535 ?x509)) (rewrite (= ?x532 ?x596)) (rewrite (= ?x531 ?x398)) (rewrite (= ?x481 ?x247)) (rewrite (= ?x526 ?x247)) (rewrite (= ?x525 ?x284)) (rewrite (= ?x530 ?x247)) (rewrite (= ?x528 ?x284)) (rewrite (= ?x527 ?x284)) (rewrite (= ?x523 ?x187)) (= ?x522 ?x239))))
 (let ((@x477 (rewrite (= ?x427 ?x471))))
 (let ((@x519 (trans (monotonicity @x477 (= ?x436 (* ?x378 ?x378 ?x378 ?x471))) (rewrite (= (* ?x378 ?x378 ?x378 ?x471) ?x522)) (= ?x436 ?x522))))
 (let ((@x147 (trans @x519 (trans @x108 (rewrite (= ?x239 ?x161)) (= ?x522 ?x161)) (= ?x436 ?x161))))
 (let ((?x78 (+ (* (/ 1.0 4.0) (* (- 1.0) ?x179)) ?x75 ?x76 (* (/ 1.0 4.0) (* (- (/ 1.0 2.0)) ?x557)))))
 (let ((@x81 (rewrite (= (* (/ 1.0 4.0) (+ (* (- 1.0) ?x179) ?x464 ?x467 (* (- (/ 1.0 2.0)) ?x557))) ?x78))))
 (let ((?x563 (* (- (/ 1.0 2.0)) ?x557)))
 (let ((?x181 (* (- 1.0) ?x179)))
 (let ((?x216 (+ ?x181 ?x464 ?x467 ?x563)))
 (let ((?x480 (* ?x398 b b)))
 (let ((?x463 (* ?x70 b b)))
 (let ((?x468 (* r00 b b)))
 (let ((?x497 (* ?x393 b b)))
 (let ((?x498 (+ ?x497 ?x468 ?x463 ?x480)))
 (let ((@x215 (monotonicity (rewrite (= ?x497 ?x563)) (rewrite (= ?x468 ?x467)) (rewrite (= ?x463 ?x464)) (rewrite (= ?x480 ?x181)) (= ?x498 (+ ?x563 ?x467 ?x464 ?x181)))))
 (let ((@x66 (trans @x215 (rewrite (= (+ ?x563 ?x467 ?x464 ?x181) ?x216)) (= ?x498 ?x216))))
 (let ((@x555 (trans (monotonicity @x477 (= ?x432 (* ?x471 b b))) (rewrite (= (* ?x471 b b) ?x498)) (= ?x432 ?x498))))
 (let ((@x73 (monotonicity (trans @x555 @x66 (= ?x432 ?x216)) (= ?x434 (* (/ 1.0 4.0) ?x216)))))
 (let ((@x91 (trans (trans @x73 @x81 (= ?x434 ?x78)) (rewrite (= ?x78 ?x92)) (= ?x434 ?x92))))
 (let ((@x259 (trans (monotonicity @x91 (rewrite (= ?x435 ?x97)) @x147 (= ?x412 ?x148)) (rewrite (= ?x148 ?x125)) (= ?x412 ?x125))))
 (let ((?x449 (* (/ 1.0 2.0) b)))
 (let ((?x461 (+ ?x449 ?x524)))
 (let ((?x451 (+ ?x449 (* (/ 1.0 2.0) (* 2.0 ?x524)))))
 (let ((@x448 (rewrite (= (+ (* 1.0 b) (* ?x49 b)) (+ b (* 2.0 ?x524))))))
 (let ((@x443 (trans (rewrite (= ?x394 (+ (* 1.0 b) (* ?x49 b)))) @x448 (= ?x394 (+ b (* 2.0 ?x524))))))
 (let ((@x399 (trans (monotonicity @x443 (= ?x440 (* (/ 1.0 2.0) (+ b (* 2.0 ?x524))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x524))) ?x451)) (= ?x440 ?x451))))
 (let ((@x472 (monotonicity (trans @x399 (rewrite (= ?x451 ?x461)) (= ?x440 ?x461)) (= ?x438 (+ ?x398 ?x393 ?x461)))))
 (let ((@x276 (monotonicity (trans @x472 (rewrite (= (+ ?x398 ?x393 ?x461) 0.0)) (= ?x438 0.0)) @x259 (= ?x418 ?x267))))
 (let ((@x287 (monotonicity (trans @x276 (rewrite (= ?x267 0.0)) $x421) (= $x421 (= 0.0 0.0)))))
 (let ((@x293 (monotonicity (trans @x287 (rewrite (= (= 0.0 0.0) true)) (= $x421 true)) (= $x420 (not true)))))
 (trans @x293 (rewrite (= (not true) false)) (= $x420 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x232 (trans (quant-intro (proof-bind ?x190) (= $x424 $x298)) (elim-unused (= $x298 false)) (= $x424 false))))
 (let (($x419 (exists ((b Real) (r Real) (x Real) )(! (let ((?x87 (* (- 1.0) r00)))
 (let ((?x120 (* (- (/ 1.0 2.0)) b)))
 (let ((?x70 (* b00 x00)))
 (let ((?x71 (* (- 1.0) ?x70)))
 (let ((?x395 (+ ?x71 r ?x120 ?x87 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x332 (+ r ?x120)))
 (let ((?x49 (* 2.0 x)))
 (let ((?x378 (+ 1.0 ?x49)))
 (let ((?x437 (+ (* (/ 1.0 4.0) (* ?x332 b b)) (* (/ 1.0 4.0) (* ?x378 ?x378 ?x332 ?x332 b b)) (* ?x378 ?x378 ?x378 ?x332))))
 (let ((?x98 (* x b)))
 (let ((?x316 (+ ?x71 r ?x87 ?x98)))
 (let ((?x159 (* x x x r)))
 (let ((?x162 (* 8.0 ?x159)))
 (let ((?x149 (* x x r r b b)))
 (let ((?x138 (* (/ 1.0 4.0) (* r b b))))
 (let (($x415 (or (not (= (* (+ ?x138 ?x149 ?x162) ?x316) 0.0)) (not (= (* ?x437 ?x395) 0.0)))))
 (and (= ?x316 0.0) $x415))))))))))))))))) :qid k!28))
 ))
 (let (($x62 (exists ((b Real) (r Real) (x Real) )(! (let ((?x49 (* 2.0 x)))
 (let ((?x50 (+ ?x49 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x46 (- r ?x36)))
 (let ((?x56 (+ (* ?x36 ?x36 ?x46) (* ?x36 ?x36 ?x46 ?x46 ?x50 ?x50) (* ?x46 ?x50 ?x50 ?x50))))
 (let ((?x57 (* (+ (- (+ (* (- 1.0) b00 x00) ?x46) r00) (* ?x36 ?x50)) ?x56)))
 (let ((?x42 (+ (* ?x36 ?x36 r) (* ?x36 ?x36 r r 2.0 x 2.0 x) (* r 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x60 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x42) 0.0)) (not (= ?x57 0.0)))))
 (and (= (+ ?x30 (* b x)) 0.0) $x60)))))))))) :qid k!28))
 ))
 (let ((?x366 (lambda ((b Real) (r Real) (x Real) )(let ((?x87 (* (- 1.0) r00)))
 (let ((?x120 (* (- (/ 1.0 2.0)) b)))
 (let ((?x70 (* b00 x00)))
 (let ((?x71 (* (- 1.0) ?x70)))
 (let ((?x395 (+ ?x71 r ?x120 ?x87 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x332 (+ r ?x120)))
 (let ((?x49 (* 2.0 x)))
 (let ((?x378 (+ 1.0 ?x49)))
 (let ((?x437 (+ (* (/ 1.0 4.0) (* ?x332 b b)) (* (/ 1.0 4.0) (* ?x378 ?x378 ?x332 ?x332 b b)) (* ?x378 ?x378 ?x378 ?x332))))
 (let ((?x98 (* x b)))
 (let ((?x316 (+ ?x71 r ?x87 ?x98)))
 (let ((?x159 (* x x x r)))
 (let ((?x162 (* 8.0 ?x159)))
 (let ((?x149 (* x x r r b b)))
 (let ((?x138 (* (/ 1.0 4.0) (* r b b))))
 (let (($x415 (or (not (= (* (+ ?x138 ?x149 ?x162) ?x316) 0.0)) (not (= (* ?x437 ?x395) 0.0)))))
 (let (($x374 (and (= ?x316 0.0) $x415)))
 (let ((?x50 (+ ?x49 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x46 (- r ?x36)))
 (let ((?x56 (+ (* ?x36 ?x36 ?x46) (* ?x36 ?x36 ?x46 ?x46 ?x50 ?x50) (* ?x46 ?x50 ?x50 ?x50))))
 (let ((?x57 (* (+ (- (+ (* (- 1.0) b00 x00) ?x46) r00) (* ?x36 ?x50)) ?x56)))
 (let ((?x42 (+ (* ?x36 ?x36 r) (* ?x36 ?x36 r r 2.0 x 2.0 x) (* r 2.0 x 2.0 x 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x60 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x42) 0.0)) (not (= ?x57 0.0)))))
 (let (($x61 (and (= (+ ?x30 (* b x)) 0.0) $x60)))
 (rewrite (= $x61 $x374)))))))))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x536 (mp (mp @x63 (quant-intro (proof-bind ?x366) (= $x62 $x419)) $x419) (rewrite (= $x419 $x424)) $x424)))
 (mp @x536 @x232 false))))))))))))

(:max-memory   17.63
 :memory       17.36
 :num-allocs   55325
 :num-checks   1
 :rlimit-count 1065
 :time         0.00
 :total-time   0.01)
