unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x190 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x246 (>= ?x190 0)))
 (let (($x92 (= ?x190 0)))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x270 (+ ?x56 ?x63 y!0 x!1)))
 (let ((?x276 (+ 1 y!0)))
 (let ((?x265 (+ (- 1) x!1)))
 (let ((?x304 (* ?x265 ?x265 ?x265 ?x265 ?x276 ?x276 ?x276 ?x270)))
 (let (($x305 (= ?x304 0)))
 (let (($x306 (not $x305)))
 (let ((?x249 (+ 1 x!1)))
 (let ((?x248 (+ (- 1) y!0)))
 (let ((?x74 (* ?x248 ?x248 ?x248 ?x249 ?x249 ?x249 ?x249 ?x270)))
 (let (($x182 (= ?x74 0)))
 (let (($x314 (or (not $x182) $x306)))
 (let (($x309 (and $x92 $x314)))
 (let (($x251 (= (* ?x265 ?x265 ?x265 ?x265 ?x276 ?x276 ?x276 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x275 (= (* ?x248 ?x248 ?x248 ?x249 ?x249 ?x249 ?x249 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x262 (and (= (+ x!1 y!0 ?x56 ?x63) 0) (or (not $x275) (not $x251)))))
 (let (($x271 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let (($x269 (or (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x77) 0)) (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (and $x82 $x269)))))))))) :qid k!27))
 ))
 (let (($x123 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x111 (+ x ?x56 ?x63 y)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let (($x66 (or (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x111) 0)) (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x111) 0)))))
 (and (= ?x111 0) $x66))))))))) :qid k!27))
 ))
 (let ((?x267 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let (($x269 (or (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x77) 0)) (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (let (($x268 (and $x82 $x269)))
 (let (($x188 (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 (+ x ?x56 ?x63 y)) 0)))
 (let (($x212 (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 (+ x ?x56 ?x63 y)) 0)))
 (let (($x101 (and (= (+ x ?x56 ?x63 y) 0) (or (not $x212) (not $x188)))))
 (rewrite (= $x101 $x268))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x46 (- y 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x39 (- 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x46 ?x39 ?x43 ?x46 ?x39 ?x43 ?x43 ?x43 ?x46)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 ?x34 ?x38 ?x39 ?x34 ?x34 ?x34 ?x38)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))))))) :qid k!27))
 ))
 (let ((?x84 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x111 (+ x ?x56 ?x63 y)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let (($x66 (or (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x111) 0)) (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x111) 0)))))
 (let (($x101 (and (= ?x111 0) $x66)))
 (let ((?x46 (- y 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x39 (- 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x46 ?x39 ?x43 ?x46 ?x39 ?x43 ?x43 ?x43 ?x46)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 ?x34 ?x38 ?x39 ?x34 ?x34 ?x34 ?x38)))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))
 (rewrite (= $x52 $x101))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x215 (mp (mp @x54 (quant-intro (proof-bind ?x84) (= $x53 $x123)) $x123) (rewrite (= $x123 $x123)) $x123)))
 (let ((@x83 (mp~ (mp @x215 (quant-intro (proof-bind ?x267) (= $x123 $x271)) $x271) (sk (~ $x271 $x262)) $x262)))
 (let ((@x303 (mp @x83 (rewrite (= $x262 $x309)) $x309)))
 (let ((@x302 (and-elim @x303 $x92)))
 (let ((@x281 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x92) $x246)) @x302 $x246)))
 (let (($x178 (<= ?x190 0)))
 (let ((@x291 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x92) $x178)) @x302 $x178)))
 (let (($x233 (not (<= ?x304 0))))
 (let (($x240 (>= ?x304 0)))
 (let (($x175 (>= ?x74 0)))
 (let (($x242 (<= ?x74 0)))
 (let ((@x289 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x182 (not $x242) (not $x175))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x242)) @x291 @x281 false) $x242) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x175)) @x291 @x281 false) $x175) $x182)))
 (let ((@x183 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x305 $x233 (not $x240))) (unit-resolution (and-elim @x303 $x314) @x289 $x306) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x240)) @x291 @x281 false) $x240) $x233)))
 ((_ th-lemma arith farkas 1 1 1) @x183 @x291 @x281 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             48
 :arith-nonlinear-horner    18
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :final-checks              4
 :max-memory                3.55
 :memory                    3.08
 :mk-bool-var               27
 :mk-clause                 28
 :num-allocs                1176201
 :num-checks                1
 :propagations              14
 :rlimit-count              1394
 :time                      0.01
 :total-time                0.01)
