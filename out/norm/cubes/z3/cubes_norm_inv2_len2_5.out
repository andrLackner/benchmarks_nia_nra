unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x707 (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0)))))
 (let (($x518 (<= ?x707 (- 1))))
 (let (($x417 (= ?x707 (- 1))))
 (let ((?x656 (+ c!3 k!2)))
 (let ((?x402 (+ m!1 k!2)))
 (let ((?x907 (+ 6 m!1)))
 (let ((?x471 (+ 1 n!0)))
 (let ((?x414 (* (- 1) (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x402 ?x402 ?x402 ?x402 ?x656 ?x656))))
 (let ((?x570 (* (- 18) (* ?x907 ?x907 ?x907 ?x656 ?x656 ?x656 ?x656))))
 (let ((?x432 (* 9 (* ?x471 ?x471 ?x471 ?x471 ?x907 ?x907 ?x402 ?x402 ?x656 ?x656 ?x656))))
 (let ((?x356 (* (- 9) (* ?x471 ?x907 ?x907 ?x907 ?x656 ?x656 ?x656 ?x656))))
 (let ((?x357 (* 9 (* ?x471 ?x907 ?x907 ?x907 ?x656 ?x656 ?x656))))
 (let ((?x373 (* 4 (* ?x907 ?x907 ?x907 ?x656 ?x656 ?x656))))
 (let ((?x184 (+ ?x373 ?x357 (* (- 4) (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x402 ?x402 ?x656 ?x656)) (* (- 5) (* ?x907 ?x907 ?x907 ?x402 ?x656 ?x656 ?x656)) (* 5 (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x402 ?x402 ?x402 ?x656 ?x656)) ?x356 (* (- 9) (* ?x471 ?x471 ?x471 ?x471 ?x907 ?x907 ?x402 ?x402 ?x656 ?x656)) (* ?x907 ?x907 ?x907 ?x402 ?x402 ?x656 ?x656 ?x656) ?x432 ?x570 ?x414 (* 18 (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x402 ?x402 ?x656 ?x656 ?x656)))))
 (let (($x252 (= ?x184 0)))
 (let (($x532 (not $x252)))
 (let ((?x426 (* (- 2) n!0)))
 (let ((?x413 (* 3 c!3)))
 (let ((?x824 (+ ?x413 (* (- 1) (* n!0 k!2)) ?x426 k!2)))
 (let (($x419 (= ?x824 1)))
 (let ((?x191 (* (- 1) (* k!2 k!2))))
 (let ((?x638 (* 5 k!2)))
 (let ((?x635 (* (- 9) n!0)))
 (let ((?x832 (* 9 (* c!3 n!0))))
 (let ((?x764 (* 18 c!3)))
 (let ((?x466 (+ ?x764 ?x832 ?x635 ?x638 ?x191)))
 (let (($x459 (= ?x466 4)))
 (let ((?x230 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x779 (= ?x230 (- 6))))
 (let (($x250 (and $x779 $x459 $x419 $x417 $x532)))
 (let ((?x478 (+ k!2 m!1)))
 (let ((?x359 (* 9 (* ?x471 ?x471 ?x471 ?x471 ?x907 ?x907 ?x478 ?x478 ?x656 ?x656 ?x656))))
 (let ((?x631 (* (- 1) (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x478 ?x478 ?x478 ?x478 ?x656 ?x656))))
 (let ((?x819 (+ (* 18 (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x478 ?x478 ?x656 ?x656 ?x656)) ?x631 (* (- 4) (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x478 ?x478 ?x656 ?x656)) (* (- 9) (* ?x471 ?x471 ?x471 ?x471 ?x907 ?x907 ?x478 ?x478 ?x656 ?x656)) ?x356 (* ?x907 ?x907 ?x907 ?x478 ?x478 ?x656 ?x656 ?x656) ?x357 ?x359 (* 5 (* ?x471 ?x471 ?x471 ?x907 ?x907 ?x478 ?x478 ?x478 ?x656 ?x656)) ?x570 (* (- 5) (* ?x907 ?x907 ?x907 ?x478 ?x656 ?x656 ?x656)) ?x373)))
 (let (($x748 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x764 ?x638 ?x635 ?x191 ?x832) 4) (= (+ ?x413 k!2 ?x426 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x819 0)))))
 (let (($x553 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x749 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x664 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x550 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x497 (* ?x312 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x444 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x665 (+ (* 18 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x444) (* (- 4) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* (- 9) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* (- 9) (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) ?x497 (* 9 (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)) (* 9 ?x550) (* 5 ?x664) (* (- 18) (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* (- 5) (* ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)) (* 4 ?x749))))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 $x214 $x266 $x304 (not (= ?x665 0)))))))))))))))))))))) :qid k!34))
 ))
 (let (($x434 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x749 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x664 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x444 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x550 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x780 (+ (* 4 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x312 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 9) (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)) (* (- 9) ?x550) (* (- 18) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x444 (* (- 5) ?x664) (* 18 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* 5 (* ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)) (* (- 4) ?x749))))
 (let (($x494 (not (= ?x780 0))))
 (let (($x470 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x105 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x105 $x470 $x494))))))))))))))))))) :qid k!34))
 ))
 (let ((?x555 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x749 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x664 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x550 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x497 (* ?x312 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x444 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x665 (+ (* 18 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x444) (* (- 4) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* (- 9) (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* (- 9) (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) ?x497 (* 9 (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)) (* 9 ?x550) (* 5 ?x664) (* (- 18) (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* (- 5) (* ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)) (* 4 ?x749))))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x433 (and $x130 $x214 $x266 $x304 (not (= ?x665 0)))))
 (let ((?x780 (+ (* 4 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* (- 1) ?x497) (* (- 9) (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)) (* (- 9) ?x550) (* (- 18) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x444 (* (- 5) ?x664) (* 18 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* 5 (* ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)) (* (- 4) ?x749))))
 (let (($x494 (not (= ?x780 0))))
 (let (($x470 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x105 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x573 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x105 $x470 $x494)))
 (rewrite (= $x573 $x433))))))))))))))))))))))))))))
 ))
 (let (($x496 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x749 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x664 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x444 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x550 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x780 (+ (* 4 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x312 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 9) (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)) (* (- 9) ?x550) (* (- 18) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x444 (* (- 5) ?x664) (* 18 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* 5 (* ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)) (* (- 4) ?x749))))
 (let (($x494 (not (= ?x780 0))))
 (let (($x470 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x236 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x728 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= ?x728 (- 4)) $x236 $x470 $x494))))))))))))))))) :qid k!34))
 ))
 (let ((?x579 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x749 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x664 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x444 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x550 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x780 (+ (* 4 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x312 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 9) (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)) (* (- 9) ?x550) (* (- 18) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x444 (* (- 5) ?x664) (* 18 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* 5 (* ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)) (* (- 4) ?x749))))
 (let (($x494 (not (= ?x780 0))))
 (let (($x470 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x105 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x573 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x105 $x470 $x494)))
 (let (($x236 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x728 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x424 (and $x130 (= ?x728 (- 4)) $x236 $x470 $x494)))
 (rewrite (= $x424 $x573))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ n 1)))
 (let ((?x69 (+ k m)))
 (let ((?x75 (+ (* 4 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 9 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* 9 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x81 (- (- ?x75 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70)) (* 9 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x82 (- ?x81 (* 9 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x83 (- ?x82 (* 18 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x85 (+ ?x83 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x87 (- ?x85 (* 5 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x90 (+ ?x87 (* 18 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70) (* 5 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let (($x95 (or (not (= (- ?x90 (* 4 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70)) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x95)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x486 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x312 (+ 6 m)))
 (let ((?x749 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)))
 (let ((?x69 (+ k m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x664 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x444 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x550 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x780 (+ (* 4 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68)) (* 9 (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* (- 1) (* ?x312 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 9) (* ?x315 ?x312 ?x312 ?x312 ?x68 ?x68 ?x68)) (* (- 9) ?x550) (* (- 18) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68 ?x68)) ?x444 (* (- 5) ?x664) (* 18 (* ?x312 ?x312 ?x312 ?x68 ?x68 ?x68 ?x68)) (* 5 (* ?x312 ?x312 ?x312 ?x69 ?x68 ?x68 ?x68)) (* (- 4) ?x749))))
 (let (($x494 (not (= ?x780 0))))
 (let (($x470 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x236 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x728 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x424 (and $x130 (= ?x728 (- 4)) $x236 $x470 $x494)))
 (let ((?x70 (+ m 6)))
 (let ((?x71 (+ n 1)))
 (let ((?x75 (+ (* 4 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 9 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71) (* 9 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x81 (- (- ?x75 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70)) (* 9 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70 ?x71))))
 (let ((?x82 (- ?x81 (* 9 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x83 (- ?x82 (* 18 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x85 (+ ?x83 (* ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x87 (- ?x85 (* 5 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x90 (+ ?x87 (* 18 ?x68 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70) (* 5 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let (($x95 (or (not (= (- ?x90 (* 4 ?x68 ?x68 ?x68 ?x70 ?x70 ?x70)) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x96 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x95)))
 (rewrite (= $x96 $x424))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x199 (mp (mp @x98 (quant-intro (proof-bind ?x486) (= $x97 $x496)) $x496) (rewrite (= $x496 $x496)) $x496)))
 (let ((@x119 (mp (mp @x199 (quant-intro (proof-bind ?x579) (= $x496 $x434)) $x434) (quant-intro (proof-bind ?x555) (= $x434 $x553)) $x553)))
 (let ((@x524 (mp (mp~ @x119 (sk (~ $x553 $x748)) $x748) (rewrite (= $x748 $x250)) $x250)))
 (let ((@x622 (and-elim @x524 $x417)))
 (let ((@x481 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x417) $x518)) @x622 $x518)))
 (let (($x449 (>= ?x707 (- 1))))
 (let ((@x892 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x417) $x449)) @x622 $x449)))
 (let (($x445 (<= ?x230 (- 6))))
 (let ((@x507 (and-elim @x524 $x779)))
 (let ((@x498 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x779) $x445)) @x507 $x445)))
 (let (($x372 (>= ?x230 (- 6))))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x779) $x372)) @x507 $x372)))
 (let (($x739 (<= ?x466 4)))
 (let ((@x472 (and-elim @x524 $x459)))
 (let ((@x467 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x459) $x739)) @x472 $x739)))
 (let (($x337 (>= ?x466 4)))
 (let ((@x587 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x459) $x337)) @x472 $x337)))
 (let (($x612 (<= ?x824 1)))
 (let ((@x624 (and-elim @x524 $x419)))
 (let ((@x386 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x419) $x612)) @x624 $x612)))
 (let (($x448 (>= ?x824 1)))
 (let ((@x621 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x419) $x448)) @x624 $x448)))
 (let (($x652 (not (<= ?x184 0))))
 (let (($x450 (>= ?x184 0)))
 (let ((@x544 ((_ th-lemma arith) (hypothesis (not $x450)) @x892 @x481 @x394 @x498 @x892 @x481 @x621 @x386 @x892 @x481 @x587 @x467 @x892 @x481 @x394 @x498 @x892 @x481 false)))
 (let ((@x344 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x252 $x652 (not $x450))) (and-elim @x524 $x532) (or $x652 (not $x450)))))
 ((_ th-lemma arith) (unit-resolution @x344 (lemma @x544 $x450) $x652) @x892 @x481 @x394 @x498 @x892 @x481 @x621 @x386 @x892 @x481 @x587 @x467 @x892 @x481 @x394 @x498 @x892 @x481 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             224
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             3
 :arith-patches_succ        2
 :arith-pivots              7
 :arith-row-summations      6
 :arith-tableau-max-columns 43
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.71
 :memory                    3.21
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1483731
 :num-checks                1
 :propagations              11
 :rlimit-count              8681
 :time                      0.01
 :total-time                0.02)
