unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x222 (* (- 1) x!1)))
 (let ((?x261 (* (- 1) y!0)))
 (let ((?x224 (+ y00 x00 ?x261 ?x222)))
 (let (($x99 (>= ?x224 0)))
 (let (($x332 (= ?x224 0)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x246 (+ ?x69 ?x76 y!0 x!1)))
 (let ((?x364 (* x!1 x!1)))
 (let ((?x360 (* y!0 y!0)))
 (let ((?x249 (* (- 1) ?x360)))
 (let ((?x336 (* y!0 x!1 x!1)))
 (let ((?x244 (+ 1 y!0)))
 (let ((?x142 (+ (- 1) x!1)))
 (let ((?x141 (* (- 1) (* ?x142 ?x142 ?x142 ?x244 ?x244 ?x244))))
 (let ((?x81 (* y!0 y!0 x!1)))
 (let ((?x171 (* ?x244 (+ ?x81 ?x141 ?x261 ?x222 ?x336 ?x249 ?x364) ?x246)))
 (let (($x188 (= ?x171 0)))
 (let (($x88 (not $x188)))
 (let ((?x362 (+ 1 x!1)))
 (let ((?x359 (+ (- 1) y!0)))
 (let ((?x145 (* (- 1) (* ?x359 ?x359 ?x359 ?x362 ?x362 ?x362))))
 (let ((?x368 (* (- 1) ?x364)))
 (let ((?x278 (* ?x359 (+ ?x81 ?x261 ?x222 ?x336 ?x360 ?x368 ?x145) ?x246)))
 (let (($x124 (= ?x278 0)))
 (let (($x303 (or (not $x124) $x88)))
 (let (($x182 (and $x332 $x303)))
 (let ((?x91 (+ x!1 y!0 ?x69 ?x76)))
 (let ((?x369 (* (- 1) (* y!0 1))))
 (let ((?x357 (* x!1 y!0 y!0)))
 (let ((?x358 (* x!1 x!1 y!0)))
 (let ((?x365 (* (- 1) (* x!1 1))))
 (let (($x339 (not (= (* ?x244 (+ ?x365 ?x358 ?x364 ?x141 ?x357 ?x249 ?x369) ?x91) 0))))
 (let (($x144 (not (= (* ?x359 (+ ?x365 ?x358 ?x368 ?x357 ?x360 ?x369 ?x145) ?x91) 0))))
 (let (($x168 (and (= ?x91 0) (or $x144 $x339))))
 (let (($x156 (exists ((x Int) (y Int) )(! (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x286 (* (- 1) (* y 1))))
 (let ((?x280 (* x y y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let ((?x170 (* x x)))
 (let ((?x159 (* x x y)))
 (let ((?x152 (* (- 1) (* x 1))))
 (let ((?x248 (+ ?x152 ?x159 ?x170 ?x304 ?x280 (* (- 1) (* y y)) ?x286)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x216 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let ((?x281 (* y y)))
 (let ((?x218 (* (- 1) ?x170)))
 (let (($x126 (not (= (* ?x133 (+ ?x152 ?x159 ?x218 ?x280 ?x281 ?x286 ?x216) ?x90) 0))))
 (let (($x95 (= ?x90 0)))
 (and $x95 (or $x126 (not (= (* ?x129 ?x248 ?x90) 0))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x289 (exists ((x Int) (y Int) )(! (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x161 (+ x ?x69 ?x76 y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let (($x84 (= (* ?x129 (+ (* ?x85 ?x85 ?x129) ?x304 (* ?x85 ?x129 ?x129)) ?x161) 0)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x216 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x308 (= (* ?x133 (+ (* ?x133 ?x147 ?x147) ?x216 (* ?x133 ?x133 ?x147)) ?x161) 0)))
 (and (= ?x161 0) (or (not $x308) (not $x84)))))))))))))) :qid k!27))
 ))
 (let ((?x367 (lambda ((x Int) (y Int) )(let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x286 (* (- 1) (* y 1))))
 (let ((?x280 (* x y y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let ((?x170 (* x x)))
 (let ((?x159 (* x x y)))
 (let ((?x152 (* (- 1) (* x 1))))
 (let ((?x248 (+ ?x152 ?x159 ?x170 ?x304 ?x280 (* (- 1) (* y y)) ?x286)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x216 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let ((?x281 (* y y)))
 (let ((?x218 (* (- 1) ?x170)))
 (let (($x126 (not (= (* ?x133 (+ ?x152 ?x159 ?x218 ?x280 ?x281 ?x286 ?x216) ?x90) 0))))
 (let (($x95 (= ?x90 0)))
 (let (($x193 (and $x95 (or $x126 (not (= (* ?x129 ?x248 ?x90) 0))))))
 (let ((?x161 (+ x ?x69 ?x76 y)))
 (let (($x84 (= (* ?x129 (+ (* ?x85 ?x85 ?x129) ?x304 (* ?x85 ?x129 ?x129)) ?x161) 0)))
 (let (($x308 (= (* ?x133 (+ (* ?x133 ?x147 ?x147) ?x216 (* ?x133 ?x133 ?x147)) ?x161) 0)))
 (let (($x226 (and (= ?x161 0) (or (not $x308) (not $x84)))))
 (rewrite (= $x226 $x193)))))))))))))))))))))))))))
 ))
 (let (($x66 (exists ((x Int) (y Int) )(! (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x60 (+ (- (* ?x49 ?x49 ?x52) (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52)) (* ?x49 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ ?x52 (* 0 ?x49 ?x52 ?x52 ?x52)) ?x60)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (+ (- (* ?x34 ?x34 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38)) (* ?x34 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ y 1 (* 0 ?x34 ?x38 ?x38 ?x38)) ?x45)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0)))))))))))) :qid k!27))
 ))
 (let ((?x282 (lambda ((x Int) (y Int) )(let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x161 (+ x ?x69 ?x76 y)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x304 (* (- 1) (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129))))
 (let (($x84 (= (* ?x129 (+ (* ?x85 ?x85 ?x129) ?x304 (* ?x85 ?x129 ?x129)) ?x161) 0)))
 (let ((?x147 (+ 1 x)))
 (let ((?x133 (+ (- 1) y)))
 (let ((?x216 (* (- 1) (* ?x133 ?x133 ?x133 ?x147 ?x147 ?x147))))
 (let (($x308 (= (* ?x133 (+ (* ?x133 ?x147 ?x147) ?x216 (* ?x133 ?x133 ?x147)) ?x161) 0)))
 (let (($x226 (and (= ?x161 0) (or (not $x308) (not $x84)))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x60 (+ (- (* ?x49 ?x49 ?x52) (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52)) (* ?x49 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ ?x52 (* 0 ?x49 ?x52 ?x52 ?x52)) ?x60)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (+ (- (* ?x34 ?x34 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38)) (* ?x34 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ y 1 (* 0 ?x34 ?x38 ?x38 ?x38)) ?x45)))
 (let (($x65 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0))))))
 (rewrite (= $x65 $x226))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x87 (mp (mp @x67 (quant-intro (proof-bind ?x282) (= $x66 $x289)) $x289) (rewrite (= $x289 $x289)) $x289)))
 (let ((@x121 (mp~ (mp @x87 (quant-intro (proof-bind ?x367) (= $x289 $x156)) $x156) (sk (~ $x156 $x168)) $x168)))
 (let ((@x212 (mp @x121 (rewrite (= $x168 $x182)) $x182)))
 (let ((@x105 (and-elim @x212 $x332)))
 (let ((@x96 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x99)) @x105 $x99)))
 (let (($x312 (<= ?x224 0)))
 (let ((@x267 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x312)) @x105 $x312)))
 (let (($x327 (not (<= ?x171 0))))
 (let (($x196 (>= ?x171 0)))
 (let (($x194 (>= ?x278 0)))
 (let (($x127 (<= ?x278 0)))
 (let ((@x310 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x124 (not $x127) (not $x194))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x127)) @x267 @x96 false) $x127) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x194)) @x267 @x96 false) $x194) $x124)))
 (let ((@x311 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x188 $x327 (not $x196))) (unit-resolution (and-elim @x212 $x303) @x310 $x88) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x196)) @x267 @x96 false) $x196) $x327)))
 ((_ th-lemma arith farkas 1 1 1) @x311 @x267 @x96 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        25
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             128
 :arith-nonlinear-bounds    8
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.43
 :memory                    19.11
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                404530
 :num-checks                1
 :propagations              14
 :rlimit-count              1759
 :time                      0.01
 :total-time                0.02)
