unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x278 (* n!0 n!0)))
 (let ((?x382 (* 3 ?x278)))
 (let ((?x309 (* (- 1) k!2)))
 (let ((?x325 (+ (* 3 n!0) ?x309 ?x382)))
 (let (($x188 (<= ?x325 (- 1))))
 (let (($x324 (= ?x325 (- 1))))
 (let ((?x122 (+ c!3 k!2)))
 (let ((?x191 (+ k!2 m!1)))
 (let ((?x190 (+ 6 m!1)))
 (let ((?x341 (+ 1 n!0)))
 (let ((?x352 (* ?x341 ?x341 ?x341 ?x341 ?x341 ?x190 ?x190 ?x190 ?x190 ?x191 ?x191 ?x122 ?x122 ?x122 (+ 7 (* 9 n!0) ?x309 (* (- 1) m!1) ?x382))))
 (let (($x354 (= ?x352 0)))
 (let (($x351 (not $x354)))
 (let ((?x175 (* k!2 k!2)))
 (let ((?x318 (* 9 n!0)))
 (let ((?x114 (+ ?x318 (* (- 18) c!3) (* (- 5) k!2) ?x175 (* (- 9) (* n!0 c!3)))))
 (let ((?x357 (* (- 1) m!1)))
 (let ((?x321 (+ (* 6 n!0) ?x357)))
 (let (($x322 (= ?x321 (- 6))))
 (let (($x353 (and $x322 (= ?x114 (- 4)) (= (+ (* 2 n!0) (* (- 3) c!3) ?x309 (* n!0 k!2)) (- 1)) $x324 $x351)))
 (let ((?x277 (* ?x341 ?x341 ?x341 ?x341 ?x341 ?x190 ?x190 ?x190 ?x190 ?x191 ?x191 ?x122 ?x122 ?x122 (+ 7 ?x309 ?x357 ?x318 ?x382))))
 (let (($x348 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x170 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x175) (* 9 (* c!3 n!0)))))
 (let (($x128 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x170 4) $x348 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x278)) 1) (not (= ?x277 0)))))
 (let (($x287 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x323 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 $x200 $x252 $x290 (not (= ?x323 0)))))))))))))))))))))) :qid k!34))
 ))
 (let (($x395 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 ?x359)))
 (let (($x565 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x374 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x374 $x173 $x565))))))))))))))))))) :qid k!34))
 ))
 (let ((?x86 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x323 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x92 (and $x116 $x200 $x252 $x290 (not (= ?x323 0)))))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 (+ 4 (* 3 (* ?x298 ?x298)) ?x230 ?x346 (* 3 n)))))
 (let (($x565 (not (= ?x387 0))))
 (let (($x173 (= (+ ?x262 ?x230 (* 3 n)) (- 1))))
 (let (($x374 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x329 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x374 $x173 $x565)))
 (rewrite (= $x329 $x92))))))))))))))))))))))))))))
 ))
 (let (($x563 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 ?x359)))
 (let (($x565 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x173 $x565)))))))))))))))) :qid k!34))
 ))
 (let ((?x347 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 ?x359)))
 (let (($x565 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x374 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x329 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x374 $x173 $x565)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x207 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x173 $x565)))
 (rewrite (= $x207 $x329)))))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x75 ?x75 ?x75 ?x71 ?x76 ?x68 ?x68 (- 1) ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x78 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x560 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x75 ?x75 ?x75 ?x359)))
 (let (($x565 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x207 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x173 $x565)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x75 ?x75 ?x75 ?x71 ?x76 ?x68 ?x68 (- 1) ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x78 0))))))
 (rewrite (= $x82 $x207)))))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x393 (mp (mp @x84 (quant-intro (proof-bind ?x560) (= $x83 $x563)) $x563) (rewrite (= $x563 $x563)) $x563)))
 (let ((@x87 (mp (mp @x393 (quant-intro (proof-bind ?x347) (= $x563 $x395)) $x395) (quant-intro (proof-bind ?x86) (= $x395 $x287)) $x287)))
 (let ((@x501 (mp (mp~ @x87 (sk (~ $x287 $x128)) $x128) (rewrite (= $x128 $x353)) $x353)))
 (let ((@x139 (and-elim @x501 $x324)))
 (let ((@x193 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x188)) @x139 $x188)))
 (let (($x294 (<= ?x321 (- 6))))
 (let ((@x502 (and-elim @x501 $x322)))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x322) $x294)) @x502 $x294)))
 (let (($x187 (>= ?x325 (- 1))))
 (let ((@x571 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x187)) @x139 $x187)))
 (let (($x283 (>= ?x321 (- 6))))
 (let ((@x567 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x322) $x283)) @x502 $x283)))
 (let (($x129 (not (<= ?x352 0))))
 (let (($x171 (>= ?x352 0)))
 (let ((@x557 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x171)) @x567 @x571 @x394 @x193 false) $x171)))
 (let ((@x553 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x354 $x129 (not $x171))) (and-elim @x501 $x351) (or $x129 (not $x171)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x553 @x557 $x129) @x567 @x571 @x394 @x193 false)))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.60
 :memory                    3.13
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1163989
 :num-checks                1
 :propagations              12
 :rlimit-count              4158
 :time                      0.01
 :total-time                0.02)
