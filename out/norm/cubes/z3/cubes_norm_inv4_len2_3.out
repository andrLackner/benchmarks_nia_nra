unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x628 (* (- 1) k!2)))
 (let ((?x766 (* k!2 n!0)))
 (let ((?x189 (+ ?x766 ?x628 (* 2 n!0) (* (- 3) c!3))))
 (let (($x955 (<= ?x189 (- 1))))
 (let (($x679 (= ?x189 (- 1))))
 (let ((?x1161 (* m!1 m!1)))
 (let ((?x820 (* k!2 k!2 n!0)))
 (let ((?x790 (* k!2 k!2 k!2 k!2)))
 (let ((?x761 (* k!2 k!2)))
 (let ((?x713 (* m!1 m!1 m!1 m!1)))
 (let ((?x481 (* m!1 m!1 n!0)))
 (let ((?x498 (+ (* 2 (* m!1 k!2)) (* (- 9) (* m!1 k!2 k!2 n!0 n!0)) (* (- 3) (* k!2 k!2 k!2 n!0 n!0)) (* 2 (* m!1 k!2 n!0)) (* (- 27) (* m!1 m!1 k!2 n!0)) (* (- 12) (* k!2 n!0 n!0)) (* (- 3) (* m!1 n!0 n!0 n!0)) (* (- 9) (* m!1 m!1 m!1 n!0)) (* (- 7) (* k!2 k!2 k!2)) ?x481 (* (- 21) (* m!1 k!2 k!2)) (* (- 7) m!1) (* (- 3) (* m!1 m!1 m!1 n!0 n!0)) ?x713 (* 4 (* m!1 k!2 k!2 k!2)) ?x761 (* 6 (* m!1 m!1 k!2 k!2)) (* 4 (* m!1 m!1 m!1 k!2)) (* (- 16) ?x766) (* (- 21) (* m!1 m!1 k!2)) ?x790 ?x820 (* (- 27) (* m!1 k!2 k!2 n!0)) (* (- 12) (* m!1 n!0 n!0)) (* (- 7) (* m!1 m!1 m!1)) (* (- 9) (* k!2 k!2 k!2 n!0)) (* (- 3) (* k!2 n!0 n!0 n!0)) (* (- 7) k!2) (* (- 16) (* m!1 n!0)) (* (- 9) (* m!1 m!1 k!2 n!0 n!0)) ?x1161)))
 (let (($x499 (= ?x498 0)))
 (let (($x502 (not $x499)))
 (let ((?x636 (+ (* 3 (* n!0 n!0)) ?x628 (* 3 n!0))))
 (let (($x647 (= ?x636 (- 1))))
 (let ((?x754 (+ ?x761 (* (- 9) (* n!0 c!3)) (* (- 5) k!2) (* 9 n!0) (* (- 18) c!3))))
 (let (($x755 (= ?x754 (- 4))))
 (let ((?x969 (+ m!1 (* (- 6) n!0))))
 (let (($x978 (= ?x969 6)))
 (let (($x275 (and $x978 $x755 $x679 $x647 $x502)))
 (let ((?x762 (* (- 1) ?x761)))
 (let ((?x613 (+ (* 7 k!2) (* 7 m!1) ?x762 (* 16 ?x766) (* (- 1) ?x790) (* (- 4) (* k!2 k!2 k!2 m!1)) (* (- 6) (* k!2 k!2 m!1 m!1)) (* (- 4) (* k!2 m!1 m!1 m!1)) (* (- 1) ?x713) (* 7 (* k!2 k!2 k!2)) (* 21 (* k!2 k!2 m!1)) (* 21 (* k!2 m!1 m!1)) (* 7 (* m!1 m!1 m!1)) (* 16 (* m!1 n!0)) (* 12 (* k!2 n!0 n!0)) (* 12 (* m!1 n!0 n!0)) (* 3 (* k!2 n!0 n!0 n!0)) (* 3 (* m!1 n!0 n!0 n!0)) (* 9 (* k!2 k!2 k!2 n!0)) (* 27 (* k!2 k!2 m!1 n!0)) (* 27 (* k!2 m!1 m!1 n!0)) (* 9 (* m!1 m!1 m!1 n!0)) (* (- 1) ?x820) (* (- 2) (* k!2 m!1 n!0)) (* (- 1) ?x481) (* (- 2) (* k!2 m!1)) (* (- 1) ?x1161) (* 3 (* k!2 k!2 k!2 n!0 n!0)) (* 9 (* k!2 k!2 m!1 n!0 n!0)) (* 9 (* k!2 m!1 m!1 n!0 n!0)) (* 3 (* m!1 m!1 m!1 n!0 n!0)))))
 (let ((?x763 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) ?x762 (* 9 (* c!3 n!0)))))
 (let (($x618 (and $x978 (= ?x763 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x766)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x613 0)))))
 (let (($x1241 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x1234 (+ (* 7 k) (* 7 m) ?x209 (* 16 (* k n)) (* (- 1) (* k k k k)) (* (- 4) (* k k k m)) (* (- 6) (* k k m m)) (* (- 4) (* k m m m)) (* (- 1) (* m m m m)) (* 7 (* k k k)) (* 21 (* k k m)) (* 21 (* k m m)) (* 7 (* m m m)) (* 16 (* m n)) (* 12 (* k n n)) (* 12 (* m n n)) (* 3 (* k n n n)) (* 3 (* m n n n)) (* 9 (* k k k n)) (* 27 (* k k m n)) (* 27 (* k m m n)) (* 9 (* m m m n)) (* (- 1) (* k k n)) (* (- 2) (* k m n)) (* (- 1) (* m m n)) (* (- 2) (* k m)) (* (- 1) (* m m)) (* 3 (* k k k n n)) (* 9 (* k k m n n)) (* 9 (* k m m n n)) (* 3 (* m m m n n)))))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4) $x258 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1) (not (= ?x1234 0))))))))))) :qid k!34))
 ))
 (let (($x582 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ k m)))
 (let ((?x818 (+ 1 n)))
 (let ((?x69 (* ?x68 ?x68 ?x68 ?x68)))
 (let ((?x509 (+ ?x69 (* (- 1) (* ?x68 ?x68 ?x68)) (* (- 1) (* ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x68 ?x68 ?x68)) (* ?x818 ?x68 ?x68) (* (- 3) (* ?x818 ?x818 ?x68 ?x68 ?x68)))))
 (let (($x813 (not (= ?x509 0))))
 (let (($x802 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x579 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x579 $x802 $x813)))))))))))))) :qid k!34))
 ))
 (let ((?x986 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x1234 (+ (* 7 k) (* 7 m) ?x209 (* 16 (* k n)) (* (- 1) (* k k k k)) (* (- 4) (* k k k m)) (* (- 6) (* k k m m)) (* (- 4) (* k m m m)) (* (- 1) (* m m m m)) (* 7 (* k k k)) (* 21 (* k k m)) (* 21 (* k m m)) (* 7 (* m m m)) (* 16 (* m n)) (* 12 (* k n n)) (* 12 (* m n n)) (* 3 (* k n n n)) (* 3 (* m n n n)) (* 9 (* k k k n)) (* 27 (* k k m n)) (* 27 (* k m m n)) (* 9 (* m m m n)) (* (- 1) (* k k n)) (* (- 2) (* k m n)) (* (- 1) (* m m n)) (* (- 2) (* k m)) (* (- 1) (* m m)) (* 3 (* k k k n n)) (* 9 (* k k m n n)) (* 9 (* k m m n n)) (* 3 (* m m m n n)))))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x388 (and $x122 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4) $x258 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1) (not (= ?x1234 0)))))
 (let ((?x68 (+ k m)))
 (let ((?x818 (+ 1 n)))
 (let ((?x69 (* ?x68 ?x68 ?x68 ?x68)))
 (let ((?x509 (+ ?x69 (* (- 1) (* ?x68 ?x68 ?x68)) (* (- 1) (* ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x68 ?x68 ?x68)) (* ?x818 ?x68 ?x68) (* (- 3) (* ?x818 ?x818 ?x68 ?x68 ?x68)))))
 (let (($x813 (not (= ?x509 0))))
 (let (($x802 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x579 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x846 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x579 $x802 $x813)))
 (rewrite (= $x846 $x388))))))))))))))))))))
 ))
 (let (($x814 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ k m)))
 (let ((?x818 (+ 1 n)))
 (let ((?x69 (* ?x68 ?x68 ?x68 ?x68)))
 (let ((?x509 (+ ?x69 (* (- 1) (* ?x68 ?x68 ?x68)) (* (- 1) (* ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x68 ?x68 ?x68)) (* ?x818 ?x68 ?x68) (* (- 3) (* ?x818 ?x818 ?x68 ?x68 ?x68)))))
 (let (($x813 (not (= ?x509 0))))
 (let (($x802 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x770 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x701 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= ?x701 (- 4)) $x770 $x802 $x813)))))))))))) :qid k!34))
 ))
 (let ((?x583 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ k m)))
 (let ((?x818 (+ 1 n)))
 (let ((?x69 (* ?x68 ?x68 ?x68 ?x68)))
 (let ((?x509 (+ ?x69 (* (- 1) (* ?x68 ?x68 ?x68)) (* (- 1) (* ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x68 ?x68 ?x68)) (* ?x818 ?x68 ?x68) (* (- 3) (* ?x818 ?x818 ?x68 ?x68 ?x68)))))
 (let (($x813 (not (= ?x509 0))))
 (let (($x802 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x579 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x846 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x579 $x802 $x813)))
 (let (($x770 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x701 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x831 (and $x122 (= ?x701 (- 4)) $x770 $x802 $x813)))
 (rewrite (= $x831 $x846)))))))))))))))))))))
 ))
 (let (($x89 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x68 (+ k m)))
 (let ((?x78 (- (- (- (* ?x68 ?x68 ?x68 ?x68) (* ?x68 ?x68 ?x68)) (* ?x68 ?x71)) (* 3 ?x68 ?x71 ?x71))))
 (let ((?x80 (- (- ?x78 (* 3 ?x68 ?x71 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x71))))
 (let (($x85 (= (- (+ ?x80 (* ?x68 ?x68 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x71 ?x71)) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x85))))))))))))))) :qid k!34))
 ))
 (let ((?x823 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ k m)))
 (let ((?x818 (+ 1 n)))
 (let ((?x69 (* ?x68 ?x68 ?x68 ?x68)))
 (let ((?x509 (+ ?x69 (* (- 1) (* ?x68 ?x68 ?x68)) (* (- 1) (* ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x818 ?x818 ?x68)) (* (- 3) (* ?x818 ?x68 ?x68 ?x68)) (* ?x818 ?x68 ?x68) (* (- 3) (* ?x818 ?x818 ?x68 ?x68 ?x68)))))
 (let (($x813 (not (= ?x509 0))))
 (let (($x802 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x770 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x701 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x831 (and $x122 (= ?x701 (- 4)) $x770 $x802 $x813)))
 (let ((?x78 (- (- (- ?x69 (* ?x68 ?x68 ?x68)) (* ?x68 (+ n 1))) (* 3 ?x68 (+ n 1) (+ n 1)))))
 (let ((?x79 (- ?x78 (* 3 ?x68 (+ n 1) (+ n 1) (+ n 1)))))
 (let ((?x82 (+ (- ?x79 (* 3 ?x68 ?x68 ?x68 (+ n 1))) (* ?x68 ?x68 (+ n 1)))))
 (let (($x85 (= (- ?x82 (* 3 ?x68 ?x68 ?x68 (+ n 1) (+ n 1))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x88 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x85)))))
 (rewrite (= $x88 $x831)))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x949 (mp (mp @x90 (quant-intro (proof-bind ?x823) (= $x89 $x814)) $x814) (rewrite (= $x814 $x814)) $x814)))
 (let ((@x580 (mp (mp @x949 (quant-intro (proof-bind ?x583) (= $x814 $x582)) $x582) (quant-intro (proof-bind ?x986) (= $x582 $x1241)) $x1241)))
 (let ((@x504 (mp (mp~ @x580 (sk (~ $x1241 $x618)) $x618) (rewrite (= $x618 $x275)) $x275)))
 (let ((@x682 (and-elim @x504 $x679)))
 (let ((@x1125 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x679) $x955)) @x682 $x955)))
 (let (($x776 (>= ?x189 (- 1))))
 (let ((@x376 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x679) $x776)) @x682 $x776)))
 (let (($x535 (<= ?x754 (- 4))))
 (let ((@x867 (and-elim @x504 $x755)))
 (let ((@x824 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x755) $x535)) @x867 $x535)))
 (let (($x536 (>= ?x754 (- 4))))
 (let ((@x892 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x755) $x536)) @x867 $x536)))
 (let (($x658 (<= ?x969 6)))
 (let ((@x507 (and-elim @x504 $x978)))
 (let ((@x825 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x978) $x658)) @x507 $x658)))
 (let (($x799 (>= ?x969 6)))
 (let ((@x1116 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x978) $x799)) @x507 $x799)))
 (let (($x623 (<= ?x636 (- 1))))
 (let ((@x685 (and-elim @x504 $x647)))
 (let ((@x900 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x647) $x623)) @x685 $x623)))
 (let (($x616 (>= ?x636 (- 1))))
 (let ((@x756 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x647) $x616)) @x685 $x616)))
 (let (($x656 (not (<= ?x498 0))))
 (let (($x625 (>= ?x498 0)))
 (let ((@x657 ((_ th-lemma arith) (hypothesis (not $x625)) @x756 @x900 @x1116 @x825 @x756 @x900 @x376 @x1125 @x376 @x1125 @x756 @x900 @x756 @x900 @x892 @x824 @x1116 @x825 @x892 @x824 @x376 @x1125 false)))
 (let ((@x349 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x499 $x656 (not $x625))) (and-elim @x504 $x502) (or $x656 (not $x625)))))
 ((_ th-lemma arith) (unit-resolution @x349 (lemma @x657 $x625) $x656) @x756 @x900 @x1116 @x825 @x376 @x1125 @x756 @x900 @x376 @x1125 @x756 @x900 @x756 @x900 @x892 @x824 @x1116 @x825 @x892 @x824 @x376 @x1125 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        19
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             267
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    10
 :arith-num-rows            5
 :arith-patches             2
 :arith-pivots              11
 :arith-row-summations      20
 :arith-tableau-max-columns 57
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.71
 :memory                    3.21
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1276498
 :num-checks                1
 :propagations              10
 :rlimit-count              7039
 :time                      0.01
 :total-time                0.01)
