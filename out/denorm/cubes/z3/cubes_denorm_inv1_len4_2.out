unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x538 (* (- 6) n!0)))
 (let ((?x629 (+ m!1 ?x538)))
 (let (($x710 (<= ?x629 6)))
 (let (($x535 (= ?x629 6)))
 (let ((?x817 (* 2 (* m!1 m!1 m!1 n!0))))
 (let ((?x905 (* 3 (* k!2 m!1 m!1))))
 (let ((?x903 (* 2 (* c!3 k!2 k!2 k!2 k!2))))
 (let ((?x901 (* c!3 c!3 k!2 k!2 k!2)))
 (let ((?x900 (* k!2 k!2 k!2 k!2 k!2)))
 (let ((?x847 (* 3 (* k!2 k!2 k!2 k!2 m!1))))
 (let ((?x813 (* 6 (* c!3 k!2 k!2 m!1 m!1))))
 (let ((?x894 (* 3 (* k!2 k!2 k!2 m!1 m!1))))
 (let ((?x816 (* 3 (* k!2 m!1 m!1 n!0 n!0))))
 (let ((?x840 (* 2 (* c!3 k!2 m!1 m!1 m!1))))
 (let ((?x889 (* c!3 c!3 m!1 m!1 m!1)))
 (let ((?x812 (* 4 (* k!2 k!2 m!1 n!0))))
 (let ((?x882 (* (- 2) (* c!3 c!3 m!1 n!0))))
 (let ((?x837 (* 2 (* k!2 k!2 m!1))))
 (let ((?x810 (* (- 2) (* c!3 k!2 m!1))))
 (let ((?x834 (* (- 1) (* c!3 c!3 m!1))))
 (let ((?x871 (* (- 1) (* c!3 c!3 k!2))))
 (let ((?x833 (* (- 2) (* c!3 k!2 k!2))))
 (let ((?x809 (* 2 (* k!2 k!2 m!1 n!0 n!0))))
 (let ((?x906 (* 6 (* k!2 m!1 m!1 n!0))))
 (let ((?x852 (* m!1 m!1 m!1)))
 (let ((?x848 (* m!1 m!1 m!1 n!0 n!0)))
 (let ((?x841 (* k!2 k!2 m!1 m!1 m!1)))
 (let ((?x879 (* (- 2) (* c!3 c!3 k!2 n!0))))
 (let ((?x899 (* 3 (* c!3 c!3 k!2 k!2 m!1))))
 (let ((?x844 (* 3 (* c!3 c!3 k!2 m!1 m!1))))
 (let ((?x878 (* (- 4) (* c!3 k!2 k!2 n!0))))
 (let ((?x864 (* (- 2) (* c!3 k!2 m!1 n!0 n!0))))
 (let ((?x845 (* 6 (* c!3 k!2 k!2 k!2 m!1))))
 (let ((?x887 (* (- 4) (* c!3 k!2 m!1 n!0))))
 (let ((?x803 (* (- 1) (* c!3 c!3 m!1 n!0 n!0))))
 (let ((?x862 (* (- 2) (* c!3 k!2 k!2 n!0 n!0))))
 (let ((?x351 (* (- 1) (* c!3 c!3 k!2 n!0 n!0))))
 (let ((?x644 (+ k!2 m!1)))
 (let ((?x639 (+ 6 m!1)))
 (let ((?x647 (* (- 1) (* (+ 1 n!0) ?x639 ?x639 ?x644 ?x644 (+ c!3 k!2)))))
 (let ((?x719 (+ ?x647 ?x351 ?x862 ?x803 ?x887 ?x845 ?x864 ?x878 ?x844 ?x899 ?x879 ?x841 ?x848 ?x852 ?x906 ?x809 ?x833 ?x871 ?x834 ?x810 ?x837 ?x882 ?x812 ?x889 ?x840 ?x816 ?x894 ?x813 ?x847 ?x900 ?x901 ?x903 ?x905 ?x817)))
 (let ((?x640 (+ (- 6) m!1 ?x538)))
 (let ((?x533 (* ?x640 ?x719)))
 (let (($x613 (= ?x533 0)))
 (let (($x758 (not $x613)))
 (let (($x643 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x170 (* (- 1) (* k!2 k!2))))
 (let ((?x627 (* (- 9) n!0)))
 (let ((?x628 (* 5 k!2)))
 (let ((?x318 (* 9 (* c!3 n!0))))
 (let ((?x626 (* 18 c!3)))
 (let (($x759 (and $x535 (= (+ ?x626 ?x318 ?x628 ?x627 ?x170) 4) $x643 (= (+ k!2 (* (- 3) (* n!0 n!0)) (* (- 3) n!0)) 1) $x758)))
 (let ((?x908 (+ ?x647 ?x351 ?x862 ?x803 ?x864 ?x809 ?x871 ?x833 ?x834 ?x810 ?x837 ?x879 ?x878 ?x882 ?x887 ?x812 ?x903 ?x900 ?x901 ?x899 ?x845 ?x847 ?x844 ?x813 ?x894 ?x889 ?x840 ?x841 ?x816 ?x848 ?x905 ?x852 ?x906 ?x817)))
 (let (($x911 (and $x535 (= (+ ?x626 ?x628 ?x627 ?x170 ?x318) 4) $x643 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x640 ?x908) 0)))))
 (let (($x568 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x935 (* 2 (* m m m n))))
 (let ((?x934 (* 6 (* k m m n))))
 (let ((?x863 (* m m m)))
 (let ((?x932 (* 3 (* k m m))))
 (let ((?x826 (* m m m n n)))
 (let ((?x937 (* 3 (* k m m n n))))
 (let ((?x738 (* k k m m m)))
 (let ((?x792 (* 2 (* c k m m m))))
 (let ((?x735 (* c c m m m)))
 (let ((?x791 (* 3 (* k k k m m))))
 (let ((?x790 (* 6 (* c k k m m))))
 (let ((?x789 (* 3 (* c c k m m))))
 (let ((?x788 (* 3 (* k k k k m))))
 (let ((?x787 (* 6 (* c k k k m))))
 (let ((?x786 (* 3 (* c c k k m))))
 (let ((?x691 (* c c k k k)))
 (let ((?x689 (* k k k k k)))
 (let ((?x785 (* 2 (* c k k k k))))
 (let ((?x950 (* 4 (* k k m n))))
 (let ((?x706 (* (- 4) (* c k m n))))
 (let ((?x703 (* (- 2) (* c c m n))))
 (let ((?x697 (* (- 4) (* c k k n))))
 (let ((?x693 (* (- 2) (* c c k n))))
 (let ((?x949 (* 2 (* k k m))))
 (let ((?x690 (* (- 2) (* c k m))))
 (let ((?x669 (* (- 1) (* c c m))))
 (let ((?x687 (* (- 2) (* c k k))))
 (let ((?x666 (* (- 1) (* c c k))))
 (let ((?x948 (* 2 (* k k m n n))))
 (let ((?x684 (* (- 2) (* c k m n n))))
 (let ((?x663 (* (- 1) (* c c m n n))))
 (let ((?x681 (* (- 2) (* c k k n n))))
 (let ((?x660 (* (- 1) (* c c k n n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x854 (+ 6 m)))
 (let ((?x705 (+ 1 n)))
 (let ((?x169 (* (- 1) (* ?x705 ?x854 ?x854 ?x74 ?x74 ?x73))))
 (let ((?x929 (+ ?x169 ?x660 ?x681 ?x663 ?x684 ?x948 ?x666 ?x687 ?x669 ?x690 ?x949 ?x693 ?x697 ?x703 ?x706 ?x950 ?x785 ?x689 ?x691 ?x786 ?x787 ?x788 ?x789 ?x790 ?x791 ?x735 ?x792 ?x738 ?x937 ?x826 ?x932 ?x863 ?x934 ?x935)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x929) 0))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x235 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ k m)))
 (let ((?x705 (+ 1 n)))
 (let ((?x169 (* (- 1) (* ?x705 (+ 6 m) (+ 6 m) ?x74 ?x74 (+ c k)))))
 (let ((?x761 (+ ?x169 (* (- 1) (* ?x705 ?x705 ?x74 (+ c k) (+ c k))) (* ?x74 ?x74 ?x74 (+ c k) (+ c k)) (* ?x705 ?x705 ?x74 ?x74 ?x74))))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x765 (not (= (* ?x118 ?x761) 0))))
 (let (($x713 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x250 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x250 $x713 $x765)))))))))))))))) :qid k!34))
 ))
 (let ((?x511 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x935 (* 2 (* m m m n))))
 (let ((?x934 (* 6 (* k m m n))))
 (let ((?x863 (* m m m)))
 (let ((?x932 (* 3 (* k m m))))
 (let ((?x826 (* m m m n n)))
 (let ((?x937 (* 3 (* k m m n n))))
 (let ((?x738 (* k k m m m)))
 (let ((?x792 (* 2 (* c k m m m))))
 (let ((?x735 (* c c m m m)))
 (let ((?x791 (* 3 (* k k k m m))))
 (let ((?x790 (* 6 (* c k k m m))))
 (let ((?x789 (* 3 (* c c k m m))))
 (let ((?x788 (* 3 (* k k k k m))))
 (let ((?x787 (* 6 (* c k k k m))))
 (let ((?x786 (* 3 (* c c k k m))))
 (let ((?x691 (* c c k k k)))
 (let ((?x689 (* k k k k k)))
 (let ((?x785 (* 2 (* c k k k k))))
 (let ((?x950 (* 4 (* k k m n))))
 (let ((?x706 (* (- 4) (* c k m n))))
 (let ((?x703 (* (- 2) (* c c m n))))
 (let ((?x697 (* (- 4) (* c k k n))))
 (let ((?x693 (* (- 2) (* c c k n))))
 (let ((?x949 (* 2 (* k k m))))
 (let ((?x690 (* (- 2) (* c k m))))
 (let ((?x669 (* (- 1) (* c c m))))
 (let ((?x687 (* (- 2) (* c k k))))
 (let ((?x666 (* (- 1) (* c c k))))
 (let ((?x948 (* 2 (* k k m n n))))
 (let ((?x684 (* (- 2) (* c k m n n))))
 (let ((?x663 (* (- 1) (* c c m n n))))
 (let ((?x681 (* (- 2) (* c k k n n))))
 (let ((?x660 (* (- 1) (* c c k n n))))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x854 (+ 6 m)))
 (let ((?x705 (+ 1 n)))
 (let ((?x169 (* (- 1) (* ?x705 ?x854 ?x854 ?x74 ?x74 ?x73))))
 (let ((?x929 (+ ?x169 ?x660 ?x681 ?x663 ?x684 ?x948 ?x666 ?x687 ?x669 ?x690 ?x949 ?x693 ?x697 ?x703 ?x706 ?x950 ?x785 ?x689 ?x691 ?x786 ?x787 ?x788 ?x789 ?x790 ?x791 ?x735 ?x792 ?x738 ?x937 ?x826 ?x932 ?x863 ?x934 ?x935)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x345 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x929) 0)))))
 (let ((?x761 (+ ?x169 (* (- 1) (* ?x705 ?x705 ?x74 ?x73 ?x73)) (* ?x74 ?x74 ?x74 ?x73 ?x73) (* ?x705 ?x705 ?x74 ?x74 ?x74))))
 (let (($x765 (not (= (* ?x118 ?x761) 0))))
 (let (($x713 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x250 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x637 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x250 $x713 $x765)))
 (rewrite (= $x637 $x345)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x766 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ k m)))
 (let ((?x705 (+ 1 n)))
 (let ((?x169 (* (- 1) (* ?x705 (+ 6 m) (+ 6 m) ?x74 ?x74 (+ c k)))))
 (let ((?x761 (+ ?x169 (* (- 1) (* ?x705 ?x705 ?x74 (+ c k) (+ c k))) (* ?x74 ?x74 ?x74 (+ c k) (+ c k)) (* ?x705 ?x705 ?x74 ?x74 ?x74))))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x765 (not (= (* ?x118 ?x761) 0))))
 (let (($x713 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x289 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x611 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 (= ?x611 (- 4)) $x289 $x713 $x765)))))))))))))) :qid k!34))
 ))
 (let ((?x221 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x74 (+ k m)))
 (let ((?x705 (+ 1 n)))
 (let ((?x169 (* (- 1) (* ?x705 (+ 6 m) (+ 6 m) ?x74 ?x74 (+ c k)))))
 (let ((?x761 (+ ?x169 (* (- 1) (* ?x705 ?x705 ?x74 (+ c k) (+ c k))) (* ?x74 ?x74 ?x74 (+ c k) (+ c k)) (* ?x705 ?x705 ?x74 ?x74 ?x74))))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x765 (not (= (* ?x118 ?x761) 0))))
 (let (($x713 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x250 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x637 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x250 $x713 $x765)))
 (let (($x289 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x611 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x175 (and $x129 (= ?x611 (- 4)) $x289 $x713 $x765)))
 (rewrite (= $x175 $x637)))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ k m)))
 (let ((?x75 (+ m 6)))
 (let ((?x73 (+ c k)))
 (let ((?x78 (- (* (- 1) ?x73 ?x74 ?x74 ?x75 ?x75 ?x69) (* ?x73 ?x73 ?x74 ?x69 ?x69))))
 (let ((?x82 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ ?x78 (* ?x73 ?x73 ?x74 ?x74 ?x74) (* ?x74 ?x74 ?x74 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x168 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x74 (+ k m)))
 (let ((?x705 (+ 1 n)))
 (let ((?x169 (* (- 1) (* ?x705 (+ 6 m) (+ 6 m) ?x74 ?x74 (+ c k)))))
 (let ((?x761 (+ ?x169 (* (- 1) (* ?x705 ?x705 ?x74 (+ c k) (+ c k))) (* ?x74 ?x74 ?x74 (+ c k) (+ c k)) (* ?x705 ?x705 ?x74 ?x74 ?x74))))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x765 (not (= (* ?x118 ?x761) 0))))
 (let (($x713 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x289 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x611 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x175 (and $x129 (= ?x611 (- 4)) $x289 $x713 $x765)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x73 (+ c k)))
 (let ((?x78 (- (* (- 1) ?x73 ?x74 ?x74 ?x75 ?x75 ?x69) (* ?x73 ?x73 ?x74 ?x69 ?x69))))
 (let ((?x82 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (+ ?x78 (* ?x73 ?x73 ?x74 ?x74 ?x74) (* ?x74 ?x74 ?x74 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x175))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x226 (mp (mp @x88 (quant-intro (proof-bind ?x168) (= $x87 $x766)) $x766) (rewrite (= $x766 $x766)) $x766)))
 (let ((@x573 (mp (mp @x226 (quant-intro (proof-bind ?x221) (= $x766 $x235)) $x235) (quant-intro (proof-bind ?x511) (= $x235 $x568)) $x568)))
 (let ((@x676 (mp (mp~ @x573 (sk (~ $x568 $x911)) $x911) (rewrite (= $x911 $x759)) $x759)))
 (let ((@x506 (and-elim @x676 $x535)))
 (let ((@x922 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x535) $x710)) @x506 $x710)))
 (let (($x524 (>= ?x629 6)))
 (let ((@x667 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x535) $x524)) @x506 $x524)))
 (let (($x94 (not (<= ?x533 0))))
 (let (($x760 (>= ?x533 0)))
 (let ((@x560 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x613 $x94 (not $x760))) (and-elim @x676 $x758) (or $x94 (not $x760)))))
 (let ((@x366 (unit-resolution @x560 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x760)) @x667 @x922 false) $x760) $x94)))
 ((_ th-lemma arith farkas 1 1 1) @x366 @x667 @x922 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             288
 :arith-nonlinear-bounds    3
 :arith-num-rows            10
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      7
 :arith-tableau-max-columns 66
 :arith-tableau-max-rows    10
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.64
 :memory                    3.14
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1184731
 :num-checks                1
 :propagations              11
 :rlimit-count              4479
 :time                      0.01
 :total-time                0.01)
