unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x382 (* r!1 r!1)))
 (let ((?x498 (* 2 x!0)))
 (let ((?x161 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x392 (+ r00 ?x87 ?x103 ?x161 ?x498 ?x382)))
 (let (($x246 (<= ?x392 0)))
 (let (($x395 (= ?x392 0)))
 (let ((?x509 (* r!1 x!0 x!0)))
 (let ((?x157 (* (- 5) ?x509)))
 (let ((?x97 (* (- 1) (* x!0 x!0))))
 (let ((?x481 (* r!1 r!1 x!0)))
 (let ((?x238 (* 7 ?x481)))
 (let ((?x480 (* r!1 x!0)))
 (let ((?x542 (* 2 ?x480)))
 (let ((?x388 (* r!1 x!0 x!0 x!0)))
 (let ((?x386 (* x!0 x!0 x!0)))
 (let ((?x383 (* (- 1) ?x382)))
 (let ((?x424 (* (- 3) (* r!1 r!1 r!1))))
 (let ((?x384 (* 5 (* r!1 r!1 r!1 x!0))))
 (let ((?x164 (* (- 4) (* r!1 r!1 x!0 x!0))))
 (let ((?x168 (* (- 2) (* r!1 r!1 r!1 r!1))))
 (let ((?x126 (* (- 1) ?x509)))
 (let ((?x128 (* 4 ?x481)))
 (let ((?x127 (* 6 ?x480)))
 (let ((?x507 (* (- 5) ?x382)))
 (let ((?x391 (* (- 2) r!1)))
 (let ((?x526 (* (+ ?x391 ?x498 ?x424 ?x507 ?x127 ?x128 ?x97 ?x126) (+ 1 ?x168 ?x164 ?x384 ?x424 ?x383 ?x386 ?x388 ?x542 ?x238 ?x97 ?x157) ?x392)))
 (let (($x404 (= ?x526 0)))
 (let (($x405 (not $x404)))
 (let (($x406 (and $x395 $x405)))
 (let ((?x425 (* (+ ?x391 ?x498 ?x507 ?x97 ?x126 ?x424 ?x127 ?x128) (+ 1 ?x383 ?x97 ?x157 ?x164 ?x424 ?x168 ?x542 ?x238 ?x384 ?x386 ?x388) (+ ?x161 ?x498 r00 ?x382 ?x87 ?x103))))
 (let (($x389 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x383 (* 2 x00) ?x36) 0)))
 (let (($x434 (and $x389 (not (= ?x425 0)))))
 (let (($x224 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x239 (* r r r)))
 (let ((?x466 (* (- 3) ?x239)))
 (let ((?x316 (* (- 1) (* x x))))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x472 (+ 1 ?x119 ?x316 (* (- 5) (* r x x)) (* (- 4) (* r r x x)) ?x466 (* (- 2) (* r r r r)) (* 2 (* r x)) (* 7 (* r r x)) (* 5 (* r r r x)) (* x x x) (* r x x x))))
 (let ((?x261 (* r r x)))
 (let ((?x337 (* 4 ?x261)))
 (let ((?x230 (* r x x)))
 (let ((?x409 (* (- 1) ?x230)))
 (let ((?x188 (* (- 2) r)))
 (let ((?x439 (+ ?x188 ?x32 (* (- 5) ?x30) ?x316 ?x409 ?x466 (* 6 (* r x)) ?x337)))
 (let (($x121 (= (+ r (* (- 2) x) (* (- 1) r00) ?x119 (* 2 x00) ?x36) 0)))
 (and $x121 (not (= (* ?x439 ?x472 ?x109) 0)))))))))))))))))))))) :qid k!26))
 ))
 (let (($x248 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x528 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x344 (+ x ?x66)))
 (let ((?x393 (+ 1 r)))
 (let ((?x355 (+ 1 (* (- 1) (* ?x393 ?x393 ?x344 ?x344)) (* ?x393 ?x344 ?x344 ?x344))))
 (let ((?x416 (* (+ (* 2 (* ?x393 ?x393 ?x344)) (* (- 1) (* ?x393 ?x344 ?x344))) ?x355 ?x528)))
 (let (($x256 (not (= ?x416 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x256))))))))))))))))) :qid k!26))
 ))
 (let ((?x310 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x109 (+ ?x66 ?x32 r00 ?x30 ?x87 ?x103)))
 (let ((?x239 (* r r r)))
 (let ((?x466 (* (- 3) ?x239)))
 (let ((?x316 (* (- 1) (* x x))))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x472 (+ 1 ?x119 ?x316 (* (- 5) (* r x x)) (* (- 4) (* r r x x)) ?x466 (* (- 2) (* r r r r)) (* 2 (* r x)) (* 7 (* r r x)) (* 5 (* r r r x)) (* x x x) (* r x x x))))
 (let ((?x261 (* r r x)))
 (let ((?x337 (* 4 ?x261)))
 (let ((?x230 (* r x x)))
 (let ((?x409 (* (- 1) ?x230)))
 (let ((?x188 (* (- 2) r)))
 (let ((?x439 (+ ?x188 ?x32 (* (- 5) ?x30) ?x316 ?x409 ?x466 (* 6 (* r x)) ?x337)))
 (let (($x121 (= (+ r (* (- 2) x) (* (- 1) r00) ?x119 (* 2 x00) ?x36) 0)))
 (let (($x312 (and $x121 (not (= (* ?x439 ?x472 ?x109) 0)))))
 (let ((?x528 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x380 (* (- 1) (* (+ 1 r) (+ 1 r) (+ x ?x66) (+ x ?x66)))))
 (let ((?x355 (+ 1 ?x380 (* (+ 1 r) (+ x ?x66) (+ x ?x66) (+ x ?x66)))))
 (let ((?x408 (+ (* 2 (* (+ 1 r) (+ 1 r) (+ x ?x66))) (* (- 1) (* (+ 1 r) (+ x ?x66) (+ x ?x66))))))
 (let (($x256 (not (= (* ?x408 ?x355 ?x528) 0))))
 (let (($x540 (= (+ r (* (- 1) r00) ?x119 (* (- 2) x) (* 2 x00) ?x36) 0)))
 (let (($x247 (and $x540 $x256)))
 (rewrite (= $x247 $x312))))))))))))))))))))))))))))))
 ))
 (let (($x394 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x528 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x344 (+ x ?x66)))
 (let ((?x393 (+ 1 r)))
 (let ((?x355 (+ 1 (* (- 1) (* ?x393 ?x393 ?x344 ?x344)) (* ?x393 ?x344 ?x344 ?x344))))
 (let ((?x416 (* (+ (* 2 (* ?x393 ?x393 ?x344)) (* (- 1) (* ?x393 ?x344 ?x344))) ?x355 ?x528)))
 (let (($x256 (not (= ?x416 0))))
 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) $x256)))))))))))) :qid k!26))
 ))
 (let ((?x324 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x528 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x344 (+ x ?x66)))
 (let ((?x393 (+ 1 r)))
 (let ((?x355 (+ 1 (* (- 1) (* ?x393 ?x393 ?x344 ?x344)) (* ?x393 ?x344 ?x344 ?x344))))
 (let ((?x416 (* (+ (* 2 (* ?x393 ?x393 ?x344)) (* (- 1) (* ?x393 ?x344 ?x344))) ?x355 ?x528)))
 (let (($x256 (not (= ?x416 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x117 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x119 (* (- 1) ?x30)))
 (let ((?x118 (* (- 1) r00)))
 (let (($x247 (and (= (+ r ?x118 ?x119 ?x117 ?x35 ?x36) 0) $x256)))
 (let (($x321 (and (= (+ ?x66 r00 ?x30 ?x32 ?x87 ?x103) 0) $x256)))
 (rewrite (= $x321 $x247)))))))))))))))))))))
 ))
 (let (($x61 (exists ((r Int) (x Int) )(! (let ((?x55 (- (* 2 (+ r 1) (+ r 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x50 (- 1 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x52 (+ ?x50 (* (+ r 1) (- x r) (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x52 ?x55) 0))))))))))) :qid k!26))
 ))
 (let ((?x254 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x103 (* (- 1) ?x36)))
 (let ((?x87 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x528 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x87 ?x103)))
 (let ((?x66 (* (- 1) r)))
 (let ((?x344 (+ x ?x66)))
 (let ((?x393 (+ 1 r)))
 (let ((?x355 (+ 1 (* (- 1) (* ?x393 ?x393 ?x344 ?x344)) (* ?x393 ?x344 ?x344 ?x344))))
 (let ((?x416 (* (+ (* 2 (* ?x393 ?x393 ?x344)) (* (- 1) (* ?x393 ?x344 ?x344))) ?x355 ?x528)))
 (let (($x256 (not (= ?x416 0))))
 (let (($x321 (and (= (+ ?x66 r00 (* r r) ?x32 ?x87 ?x103) 0) $x256)))
 (let ((?x55 (- (* 2 (+ r 1) (+ r 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x50 (- 1 (* (+ r 1) (+ r 1) (- x r) (- x r)))))
 (let ((?x52 (+ ?x50 (* (+ r 1) (- x r) (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x60 (and $x40 (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x52 ?x55) 0))))))
 (rewrite (= $x60 $x321))))))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x544 (mp (mp @x62 (quant-intro (proof-bind ?x254) (= $x61 $x394)) $x394) (rewrite (= $x394 $x394)) $x394)))
 (let ((@x390 (mp (mp @x544 (quant-intro (proof-bind ?x324) (= $x394 $x248)) $x248) (quant-intro (proof-bind ?x310) (= $x248 $x224)) $x224)))
 (let ((@x543 (mp (mp~ @x390 (sk (~ $x224 $x434)) $x434) (rewrite (= $x434 $x406)) $x406)))
 (let ((@x271 (and-elim @x543 $x395)))
 (let ((@x273 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x395) $x246)) @x271 $x246)))
 (let (($x148 (>= ?x392 0)))
 (let ((@x534 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x395) $x148)) @x271 $x148)))
 (let (($x227 (not (>= ?x526 0))))
 (let (($x221 (<= ?x526 0)))
 (let ((@x357 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x404 (not $x221) $x227)) (and-elim @x543 $x405) (or (not $x221) $x227))))
 (let ((@x402 (unit-resolution @x357 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x221)) @x534 @x273 false) $x221) $x227)))
 ((_ th-lemma arith farkas 1 1 1) @x402 @x534 @x273 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            3
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.61
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1104490
 :num-checks                1
 :propagations              4
 :rlimit-count              1909
 :time                      0.01
 :total-time                0.01)
