unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x63 (* y00 q00)))
 (let ((?x275 (+ r00 ?x63 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x260 (<= ?x275 0)))
 (let (($x276 (= ?x275 0)))
 (let ((?x193 (* y00 y00 y00 y00 y00 q00)))
 (let ((?x180 (* y00 y00 y00 y00 r00)))
 (let ((?x363 (+ (* 3 (* y00 y00 y00 y00 y00 q00 q!2)) (* (- 1) (* y00 y00 y00 y00 r!1 q!2 q!2 q!2)) ?x180 ?x193 (* 3 (* y00 y00 y00 y00 r00 q!2)) (* (- 3) (* y00 y00 y00 y00 y00 q!2 q!2 q!2)) (* y00 y00 y00 y00 y00 q00 q!2 q!2 q!2) (* (- 1) (* y00 y00 y00 y00 y00 q!2)) (* (- 1) (* y00 y00 y00 y00 r!1)) (* (- 3) (* y00 y00 y00 y00 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 y00 q!2 q!2)) (* (- 3) (* y00 y00 y00 y00 r!1 q!2 q!2)) (* 3 (* y00 y00 y00 y00 r00 q!2 q!2)) (* 3 (* y00 y00 y00 y00 y00 q00 q!2 q!2)) (* y00 y00 y00 y00 r00 q!2 q!2 q!2) (* (- 1) (* y00 y00 y00 y00 y00 q!2 q!2 q!2 q!2)))))
 (let (($x366 (= ?x363 0)))
 (let (($x76 (not $x366)))
 (let ((?x84 (+ y00 (* (- 1) y!0))))
 (let (($x298 (= ?x84 0)))
 (let (($x287 (and $x298 $x276 $x76)))
 (let ((?x196 (* (- 1) ?x193)))
 (let ((?x183 (* (- 1) ?x180)))
 (let ((?x121 (+ (* r!1 y00 y00 y00 y00) ?x183 (* q!2 y00 y00 y00 y00 y00) ?x196 (* 3 (* q!2 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 y00 y00 y00 y00 r00)) (* 3 (* q!2 q!2 y00 y00 y00 y00 y00)) (* (- 3) (* q!2 y00 y00 y00 y00 y00 q00)) (* 3 (* q!2 q!2 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00 y00 y00 r00)) (* 3 (* q!2 q!2 q!2 y00 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00 y00 y00 y00 q00)) (* q!2 q!2 q!2 r!1 y00 y00 y00 y00) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00 y00 r00)) (* q!2 q!2 q!2 q!2 y00 y00 y00 y00 y00) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00 y00 y00 q00)))))
 (let (($x101 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x63)) 0) (not (= ?x121 0)))))
 (let (($x67 (exists ((q Int) (r Int) (y Int) )(! (let ((?x193 (* y00 y00 y00 y00 y00 q00)))
 (let ((?x196 (* (- 1) ?x193)))
 (let ((?x180 (* y00 y00 y00 y00 r00)))
 (let ((?x183 (* (- 1) ?x180)))
 (let ((?x362 (+ (* r y00 y00 y00 y00) ?x183 (* q y00 y00 y00 y00 y00) ?x196 (* 3 (* q r y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 r00)) (* 3 (* q q y00 y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 y00 q00)) (* 3 (* q q r y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 r00)) (* 3 (* q q q y00 y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 y00 q00)) (* q q q r y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 r00)) (* q q q q y00 y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 y00 q00)))))
 (let (($x92 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x92 (not (= ?x362 0))))))))) :qid k!29))
 ))
 (let (($x189 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x199 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x217 (+ 1 q)))
 (let ((?x246 (* y00 y00 y00 y00 ?x217 ?x217 ?x217 (+ r ?x58 ?x59 ?x199 (* y00 ?x217)))))
 (and (= (+ ?x58 y) 0) (= (+ r ?x59 ?x199 (* y00 q)) 0) (not (= ?x246 0))))))))) :qid k!29))
 ))
 (let ((?x182 (lambda ((q Int) (r Int) (y Int) )(let ((?x193 (* y00 y00 y00 y00 y00 q00)))
 (let ((?x196 (* (- 1) ?x193)))
 (let ((?x180 (* y00 y00 y00 y00 r00)))
 (let ((?x183 (* (- 1) ?x180)))
 (let ((?x362 (+ (* r y00 y00 y00 y00) ?x183 (* q y00 y00 y00 y00 y00) ?x196 (* 3 (* q r y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 r00)) (* 3 (* q q y00 y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 y00 q00)) (* 3 (* q q r y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 r00)) (* 3 (* q q q y00 y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 y00 q00)) (* q q q r y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 r00)) (* q q q q y00 y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 y00 q00)))))
 (let (($x92 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x83 (and (= (+ y (* (- 1) y00)) 0) $x92 (not (= ?x362 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x199 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x217 (+ 1 q)))
 (let ((?x246 (* y00 y00 y00 y00 ?x217 ?x217 ?x217 (+ r ?x58 ?x59 ?x199 (* y00 ?x217)))))
 (let (($x186 (and (= (+ ?x58 y) 0) (= (+ r ?x59 ?x199 (* y00 q)) 0) (not (= ?x246 0)))))
 (rewrite (= $x186 $x83)))))))))))))))))
 ))
 (let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x28 (- 1)))
 (let ((?x45 (+ q 1)))
 (let ((?x48 (* (+ (- (- (- r y00) r00) (* q00 y00)) (* ?x45 y00)) ?x28 ?x45 ?x45 ?x45 y00 y00 y00 ?x28 y00)))
 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x48 0))))))) :qid k!29))
 ))
 (let ((?x197 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x199 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x217 (+ 1 q)))
 (let ((?x246 (* y00 y00 y00 y00 ?x217 ?x217 ?x217 (+ r ?x58 ?x59 ?x199 (* y00 ?x217)))))
 (let (($x186 (and (= (+ ?x58 y) 0) (= (+ r ?x59 ?x199 (* y00 q)) 0) (not (= ?x246 0)))))
 (let ((?x28 (- 1)))
 (let ((?x45 (+ q 1)))
 (let ((?x48 (* (+ (- (- (- r y00) r00) ?x36) (* ?x45 y00)) ?x28 ?x45 ?x45 ?x45 y00 y00 y00 ?x28 y00)))
 (let (($x52 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x48 0))))))
 (rewrite (= $x52 $x186))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x138 (mp (mp @x54 (quant-intro (proof-bind ?x197) (= $x53 $x189)) $x189) (rewrite (= $x189 $x189)) $x189)))
 (let ((@x313 (mp~ (mp @x138 (quant-intro (proof-bind ?x182) (= $x189 $x67)) $x67) (sk (~ $x67 $x101)) $x101)))
 (let ((@x85 (mp @x313 (rewrite (= $x101 $x287)) $x287)))
 (let ((@x178 (and-elim @x85 $x276)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x276) $x260)) @x178 $x260)))
 (let (($x261 (>= ?x275 0)))
 (let ((@x218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x276) $x261)) @x178 $x261)))
 (let (($x216 (<= ?x84 0)))
 (let ((@x86 (and-elim @x85 $x298)))
 (let ((@x271 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x298) $x216)) @x86 $x216)))
 (let (($x201 (>= ?x84 0)))
 (let ((@x156 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x298) $x201)) @x86 $x201)))
 (let (($x289 (not (<= ?x363 0))))
 (let (($x269 (>= ?x363 0)))
 (let ((@x306 (lemma ((_ th-lemma arith) (hypothesis (not $x269)) @x156 @x271 @x218 @x297 false) $x269)))
 (let ((@x145 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x366 $x289 (not $x269))) (and-elim @x85 $x76) (or $x289 (not $x269)))))
 ((_ th-lemma arith) (unit-resolution @x145 @x306 $x289) @x156 @x271 @x218 @x297 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        4
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-gcd-tests           2
 :arith-grobner             2
 :arith-max-min             92
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-patches             2
 :arith-patches_succ        2
 :arith-pivots              3
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                19.56
 :memory                    19.05
 :mk-bool-var               9
 :mk-clause                 10
 :num-allocs                519305
 :num-checks                1
 :propagations              6
 :rlimit-count              2063
 :time                      0.01
 :total-time                0.02)
