unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x1018 (* (- 1) y!0)))
 (let ((?x1020 (* (- 1) x!1)))
 (let ((?x1015 (+ y00 x00 ?x1020 ?x1018)))
 (let (($x606 (<= ?x1015 0)))
 (let (($x1012 (= ?x1015 0)))
 (let ((?x1325 (* 3 (* x00 x!1 x!1 y!0 y!0))))
 (let ((?x1328 (* (- 2) (* y00 x!1 x!1 x!1 y!0))))
 (let ((?x1327 (* (- 2) (* x00 x!1 x!1 x!1 y!0))))
 (let ((?x941 (* y00 x!1 x!1 x!1 y!0 y!0)))
 (let ((?x873 (* x00 x!1 x!1 x!1)))
 (let ((?x762 (* x00 y!0 y!0)))
 (let ((?x514 (* x!1 y!0)))
 (let ((?x487 (* (- 2) ?x514)))
 (let ((?x513 (* x!1 x!1)))
 (let ((?x414 (* (- 2) ?x513)))
 (let ((?x471 (+ 1 x!1)))
 (let ((?x308 (+ (- 1) y!0)))
 (let ((?x512 (* ?x308 ?x308 ?x308 ?x471 ?x471 ?x471)))
 (let ((?x489 (* y00 x!1 x!1 x!1)))
 (let ((?x1316 (* (- 6) (* x00 x!1 y!0))))
 (let ((?x1314 (* (- 6) (* y00 x!1 y!0))))
 (let ((?x209 (* y00 y!0 y!0)))
 (let ((?x86 (* x00 x!1 x!1 x!1 y!0 y!0)))
 (let ((?x132 (* 3 (* y00 x!1 x!1 y!0 y!0))))
 (let ((?x1331 (+ (* 2 y00) (* 2 x00) ?x132 ?x86 (* (- 2) (* x00 y!0)) (* 3 (* y00 x!1 y!0 y!0)) (* (- 2) (* y00 y!0)) ?x209 ?x1314 (* (- 1) (* x!1 x!1 x!1)) ?x1316 (* (- 1) (* ?x308 ?x308 ?x471 ?x471 ?x471 ?x471)) ?x489 (* (- 1) (* x!1 x!1 y!0)) (* (- 1) ?x512) ?x414 ?x487 (* 4 (* y00 x!1 x!1)) (* 5 (* y00 x!1)) ?x1020 (* 3 (* x00 x!1 y!0 y!0)) ?x762 ?x1018 ?x873 (* 4 (* x00 x!1 x!1)) ?x941 ?x1327 (* (- 6) (* y00 x!1 x!1 y!0)) ?x1328 ?x1325 (* (- 6) (* x00 x!1 x!1 y!0)) (* 5 (* x00 x!1)))))
 (let (($x1333 (= ?x1331 0)))
 (let (($x1338 (not $x1333)))
 (let ((?x413 (+ 1 y!0)))
 (let ((?x521 (+ (- 1) x!1)))
 (let ((?x533 (* ?x521 ?x521 ?x521 ?x413 ?x413 ?x413)))
 (let ((?x510 (* x!1 x!1 y!0)))
 (let ((?x382 (* ?x521 ?x521 ?x521 ?x521 ?x413 ?x413)))
 (let ((?x243 (* x!1 x!1 x!1)))
 (let ((?x955 (+ ?x132 (* (- 1) ?x86) (* 2 (* x00 y!0)) (* (- 3) (* y00 x!1 y!0 y!0)) (* 2 (* y00 y!0)) ?x209 ?x1314 ?x243 ?x382 ?x1316 (* (- 1) ?x489) ?x510 ?x414 ?x487 ?x533 (* 2 (* y00 x!1 x!1)) (* (- 1) (* y00 x!1)) x!1 (* (- 3) (* x00 x!1 y!0 y!0)) ?x762 y!0 (* (- 1) ?x873) (* 2 (* x00 x!1 x!1)) (* (- 1) ?x941) ?x1327 (* 6 (* y00 x!1 x!1 y!0)) ?x1328 ?x1325 (* 6 (* x00 x!1 x!1 y!0)) (* (- 1) (* x00 x!1)))))
 (let (($x1048 (= ?x955 0)))
 (let (($x96 (or (not $x1048) $x1338)))
 (let (($x729 (and $x1012 $x96)))
 (let ((?x500 (* (- 1) (* x!1 x!1 x!1 x00))))
 (let ((?x493 (* 2 (* y!0 y00))))
 (let ((?x506 (* y!0 y!0 y00)))
 (let ((?x97 (* (- 3) (* x!1 y!0 y!0 y00))))
 (let ((?x511 (* (- 1) (* x!1 x!1 x!1 y!0 y!0 y00))))
 (let ((?x357 (* (- 1) (* x!1 x!1 x!1 y00))))
 (let ((?x543 (* 6 (* x!1 x!1 y!0 y00))))
 (let ((?x895 (* (- 3) (* x!1 y!0 y!0 x00))))
 (let ((?x526 (* y!0 y!0 x00)))
 (let ((?x266 (* 6 (* x!1 x!1 y!0 x00))))
 (let ((?x99 (* 2 (* y!0 x00))))
 (let ((?x75 (* (- 1) (* x!1 x!1 x!1 y!0 y!0 x00))))
 (let ((?x537 (+ x!1 y!0 (* (- 2) (* x!1 x!1 x!1 y!0 x00)) ?x75 (* (- 1) (* x!1 x00)) (* 2 (* x!1 x!1 x00)) ?x99 (* (- 6) (* x!1 y!0 x00)) ?x266 ?x526 ?x895 (* 3 (* x!1 x!1 y!0 y!0 x00)) ?x382 (* (- 2) (* x!1 x!1 x!1 y!0 y00)) ?x543 (* (- 6) (* x!1 y!0 y00)) ?x357 (* 2 (* x!1 x!1 y00)) (* (- 1) (* x!1 y00)) ?x511 (* 3 (* x!1 x!1 y!0 y!0 y00)) ?x97 ?x506 ?x493 ?x500 ?x533 ?x243 ?x414 ?x510 ?x487)))
 (let ((?x480 (* ?x308 ?x308 ?x471 ?x471 ?x471 ?x471)))
 (let ((?x830 (* (- 2) x00)))
 (let ((?x996 (* (- 2) y00)))
 (let ((?x372 (+ x!1 y!0 ?x996 ?x830 (* 2 (* x!1 x!1 x!1 y!0 x00)) ?x75 (* (- 5) (* x!1 x00)) (* (- 4) (* x!1 x!1 x00)) ?x99 (* 6 (* x!1 y!0 x00)) ?x266 (* (- 1) ?x526) ?x895 (* (- 3) (* x!1 x!1 y!0 y!0 x00)) (* 2 (* x!1 x!1 x!1 y!0 y00)) ?x543 (* 6 (* x!1 y!0 y00)) ?x357 (* (- 4) (* x!1 x!1 y00)) (* (- 5) (* x!1 y00)) ?x511 (* (- 3) (* x!1 x!1 y!0 y!0 y00)) ?x97 (* (- 1) ?x506) ?x493 ?x480 ?x500 ?x243 ?x512 (* 2 ?x513) ?x510 (* 2 ?x514))))
 (let (($x545 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x372 0)) (not (= ?x537 0))))))
 (let (($x842 (exists ((x Int) (y Int) )(! (let ((?x772 (* x y)))
 (let ((?x748 (* (- 2) ?x772)))
 (let ((?x771 (* x x y)))
 (let ((?x760 (* x x)))
 (let ((?x701 (* (- 2) ?x760)))
 (let ((?x730 (* x x x)))
 (let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x665 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x837 (* (- 1) (* x x x x00))))
 (let ((?x525 (* 2 (* y y00))))
 (let ((?x375 (* y y y00)))
 (let ((?x544 (* (- 3) (* x y y y00))))
 (let ((?x361 (* x x y y y00)))
 (let ((?x508 (* 3 ?x361)))
 (let ((?x476 (* (- 1) (* x x x y y y00))))
 (let ((?x351 (* x y00)))
 (let ((?x532 (* (- 1) ?x351)))
 (let ((?x347 (* x x y00)))
 (let ((?x501 (* 2 ?x347)))
 (let ((?x473 (* (- 1) (* x x x y00))))
 (let ((?x335 (* x y y00)))
 (let ((?x541 (* (- 6) ?x335)))
 (let ((?x539 (* 6 (* x x y y00))))
 (let ((?x323 (* x x x y y00)))
 (let ((?x492 (* (- 2) ?x323)))
 (let ((?x307 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x272 (* x y y x00)))
 (let ((?x784 (* (- 3) ?x272)))
 (let ((?x265 (* y y x00)))
 (let ((?x242 (* x x y x00)))
 (let ((?x834 (* 6 ?x242)))
 (let ((?x295 (* 2 (* y x00))))
 (let ((?x786 (* (- 1) (* x x x y y x00))))
 (let ((?x1489 (+ x y (* (- 2) (* x x x y x00)) ?x786 (* (- 1) (* x x00)) (* 2 (* x x x00)) ?x295 (* (- 6) (* x y x00)) ?x834 ?x265 ?x784 (* 3 (* x x y y x00)) ?x307 ?x492 ?x539 ?x541 ?x473 ?x501 ?x532 ?x476 ?x508 ?x544 ?x375 ?x525 ?x837 ?x665 ?x730 ?x701 ?x771 ?x748)))
 (let ((?x1044 (* 2 ?x772)))
 (let ((?x1081 (* 2 ?x760)))
 (let ((?x693 (+ 1 x)))
 (let ((?x427 (+ (- 1) y)))
 (let ((?x757 (* ?x427 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x496 (* ?x427 ?x427 ?x693 ?x693 ?x693 ?x693)))
 (let ((?x376 (* (- 1) ?x375)))
 (let ((?x452 (* (- 3) ?x361)))
 (let ((?x999 (* (- 5) ?x351)))
 (let ((?x997 (* (- 4) ?x347)))
 (let ((?x888 (* 6 ?x335)))
 (let ((?x449 (* 2 ?x323)))
 (let ((?x830 (* (- 2) x00)))
 (let ((?x996 (* (- 2) y00)))
 (let ((?x671 (+ x y ?x996 ?x830 (* 2 (* x x x y x00)) ?x786 (* (- 5) (* x x00)) (* (- 4) (* x x x00)) ?x295 (* 6 (* x y x00)) ?x834 (* (- 1) ?x265) ?x784 (* (- 3) (* x x y y x00)) ?x449 ?x539 ?x888 ?x473 ?x997 ?x999 ?x476 ?x452 ?x544 ?x376 ?x525 ?x496 ?x837 ?x730 ?x757 ?x1081 ?x771 ?x1044)))
 (let (($x100 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x100 (or (not (= ?x671 0)) (not (= ?x1489 0))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x309 (exists ((x Int) (y Int) )(! (let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x665 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x509 (* y00 ?x92 ?x92)))
 (let ((?x470 (* x00 ?x92 ?x92)))
 (let ((?x428 (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x424 (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x278 (+ ?x424 (* (- 1) (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x428 ?x470 ?x509 (* (- 1) ?x665) (* (- 1) (* ?x92 ?x92 ?x102)) (* (- 1) (* ?x92 ?x92 ?x92)))))
 (let ((?x693 (+ 1 x)))
 (let ((?x427 (+ (- 1) y)))
 (let ((?x757 (* ?x427 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x534 (* y00 ?x693 ?x693)))
 (let ((?x515 (* x00 ?x693 ?x693)))
 (let ((?x498 (* y00 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x469 (* x00 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x972 (+ ?x469 (* (- 1) (* ?x427 ?x427 ?x693 ?x693 ?x693 ?x693)) ?x498 ?x515 ?x534 (* (- 1) ?x757) (* (- 1) (* ?x427 ?x693 ?x693)) (* (- 1) (* ?x693 ?x693 ?x693)))))
 (let (($x85 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x85 (or (not (= ?x972 0)) (not (= ?x278 0))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x668 (lambda ((x Int) (y Int) )(let ((?x772 (* x y)))
 (let ((?x748 (* (- 2) ?x772)))
 (let ((?x771 (* x x y)))
 (let ((?x760 (* x x)))
 (let ((?x701 (* (- 2) ?x760)))
 (let ((?x730 (* x x x)))
 (let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x665 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x837 (* (- 1) (* x x x x00))))
 (let ((?x525 (* 2 (* y y00))))
 (let ((?x375 (* y y y00)))
 (let ((?x544 (* (- 3) (* x y y y00))))
 (let ((?x361 (* x x y y y00)))
 (let ((?x508 (* 3 ?x361)))
 (let ((?x476 (* (- 1) (* x x x y y y00))))
 (let ((?x351 (* x y00)))
 (let ((?x532 (* (- 1) ?x351)))
 (let ((?x347 (* x x y00)))
 (let ((?x501 (* 2 ?x347)))
 (let ((?x473 (* (- 1) (* x x x y00))))
 (let ((?x335 (* x y y00)))
 (let ((?x541 (* (- 6) ?x335)))
 (let ((?x539 (* 6 (* x x y y00))))
 (let ((?x323 (* x x x y y00)))
 (let ((?x492 (* (- 2) ?x323)))
 (let ((?x307 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x272 (* x y y x00)))
 (let ((?x784 (* (- 3) ?x272)))
 (let ((?x265 (* y y x00)))
 (let ((?x242 (* x x y x00)))
 (let ((?x834 (* 6 ?x242)))
 (let ((?x295 (* 2 (* y x00))))
 (let ((?x786 (* (- 1) (* x x x y y x00))))
 (let ((?x1489 (+ x y (* (- 2) (* x x x y x00)) ?x786 (* (- 1) (* x x00)) (* 2 (* x x x00)) ?x295 (* (- 6) (* x y x00)) ?x834 ?x265 ?x784 (* 3 (* x x y y x00)) ?x307 ?x492 ?x539 ?x541 ?x473 ?x501 ?x532 ?x476 ?x508 ?x544 ?x375 ?x525 ?x837 ?x665 ?x730 ?x701 ?x771 ?x748)))
 (let ((?x1044 (* 2 ?x772)))
 (let ((?x1081 (* 2 ?x760)))
 (let ((?x693 (+ 1 x)))
 (let ((?x427 (+ (- 1) y)))
 (let ((?x757 (* ?x427 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x496 (* ?x427 ?x427 ?x693 ?x693 ?x693 ?x693)))
 (let ((?x376 (* (- 1) ?x375)))
 (let ((?x452 (* (- 3) ?x361)))
 (let ((?x999 (* (- 5) ?x351)))
 (let ((?x997 (* (- 4) ?x347)))
 (let ((?x888 (* 6 ?x335)))
 (let ((?x449 (* 2 ?x323)))
 (let ((?x830 (* (- 2) x00)))
 (let ((?x996 (* (- 2) y00)))
 (let ((?x671 (+ x y ?x996 ?x830 (* 2 (* x x x y x00)) ?x786 (* (- 5) (* x x00)) (* (- 4) (* x x x00)) ?x295 (* 6 (* x y x00)) ?x834 (* (- 1) ?x265) ?x784 (* (- 3) (* x x y y x00)) ?x449 ?x539 ?x888 ?x473 ?x997 ?x999 ?x476 ?x452 ?x544 ?x376 ?x525 ?x496 ?x837 ?x730 ?x757 ?x1081 ?x771 ?x1044)))
 (let (($x100 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1450 (and $x100 (or (not (= ?x671 0)) (not (= ?x1489 0))))))
 (let ((?x509 (* y00 ?x92 ?x92)))
 (let ((?x470 (* x00 ?x92 ?x92)))
 (let ((?x428 (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x424 (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x278 (+ ?x424 (* (- 1) ?x307) ?x428 ?x470 ?x509 (* (- 1) ?x665) (* (- 1) (* ?x92 ?x92 ?x102)) (* (- 1) (* ?x92 ?x92 ?x92)))))
 (let ((?x534 (* y00 ?x693 ?x693)))
 (let ((?x515 (* x00 ?x693 ?x693)))
 (let ((?x498 (* y00 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x469 (* x00 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x972 (+ ?x469 (* (- 1) ?x496) ?x498 ?x515 ?x534 (* (- 1) ?x757) (* (- 1) (* ?x427 ?x693 ?x693)) (* (- 1) (* ?x693 ?x693 ?x693)))))
 (let (($x85 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x418 (and $x85 (or (not (= ?x972 0)) (not (= ?x278 0))))))
 (rewrite (= $x418 $x1450)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x443 (exists ((x Int) (y Int) )(! (let ((?x92 (+ (- 1) x)))
 (let ((?x522 (* ?x92 ?x92 ?x92)))
 (let ((?x102 (+ 1 y)))
 (let ((?x481 (* ?x92 ?x92 ?x102)))
 (let ((?x665 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x307 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x397 (+ (* (- 1) (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x307 (* (- 1) (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)) (* (- 1) (* x00 ?x92 ?x92)) (* (- 1) (* y00 ?x92 ?x92)) ?x665 ?x481 ?x522)))
 (let ((?x693 (+ 1 x)))
 (let ((?x1071 (* ?x693 ?x693 ?x693)))
 (let ((?x427 (+ (- 1) y)))
 (let ((?x1014 (* ?x427 ?x693 ?x693)))
 (let ((?x757 (* ?x427 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x496 (* ?x427 ?x427 ?x693 ?x693 ?x693 ?x693)))
 (let ((?x80 (+ (* (- 1) (* x00 ?x427 ?x427 ?x693 ?x693 ?x693)) ?x496 (* (- 1) (* y00 ?x427 ?x427 ?x693 ?x693 ?x693)) (* (- 1) (* x00 ?x693 ?x693)) (* (- 1) (* y00 ?x693 ?x693)) ?x757 ?x1014 ?x1071)))
 (let (($x85 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x85 (or (not (= ?x80 0)) (not (= ?x397 0))))))))))))))))))) :qid k!27))
 ))
 (let ((?x968 (lambda ((x Int) (y Int) )(let ((?x102 (+ 1 y)))
 (let ((?x92 (+ (- 1) x)))
 (let ((?x665 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x509 (* y00 ?x92 ?x92)))
 (let ((?x470 (* x00 ?x92 ?x92)))
 (let ((?x428 (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x424 (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x278 (+ ?x424 (* (- 1) (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x428 ?x470 ?x509 (* (- 1) ?x665) (* (- 1) (* ?x92 ?x92 ?x102)) (* (- 1) (* ?x92 ?x92 ?x92)))))
 (let ((?x693 (+ 1 x)))
 (let ((?x427 (+ (- 1) y)))
 (let ((?x757 (* ?x427 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x534 (* y00 ?x693 ?x693)))
 (let ((?x515 (* x00 ?x693 ?x693)))
 (let ((?x498 (* y00 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x469 (* x00 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x972 (+ ?x469 (* (- 1) (* ?x427 ?x427 ?x693 ?x693 ?x693 ?x693)) ?x498 ?x515 ?x534 (* (- 1) ?x757) (* (- 1) (* ?x427 ?x693 ?x693)) (* (- 1) (* ?x693 ?x693 ?x693)))))
 (let (($x85 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x418 (and $x85 (or (not (= ?x972 0)) (not (= ?x278 0))))))
 (let ((?x522 (* ?x92 ?x92 ?x92)))
 (let ((?x481 (* ?x92 ?x92 ?x102)))
 (let ((?x307 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x397 (+ (* (- 1) ?x424) ?x307 (* (- 1) ?x428) (* (- 1) ?x470) (* (- 1) ?x509) ?x665 ?x481 ?x522)))
 (let ((?x1071 (* ?x693 ?x693 ?x693)))
 (let ((?x1014 (* ?x427 ?x693 ?x693)))
 (let ((?x496 (* ?x427 ?x427 ?x693 ?x693 ?x693 ?x693)))
 (let ((?x80 (+ (* (- 1) ?x469) ?x496 (* (- 1) ?x498) (* (- 1) ?x515) (* (- 1) ?x534) ?x757 ?x1014 ?x1071)))
 (let (($x244 (and $x85 (or (not (= ?x80 0)) (not (= ?x397 0))))))
 (rewrite (= $x244 $x418))))))))))))))))))))))))))))))
 ))
 (let (($x71 (exists ((x Int) (y Int) )(! (let ((?x53 (- y 1)))
 (let ((?x52 (+ x 1)))
 (let ((?x56 (+ (* (- 1) ?x52 ?x52 ?x52 x00 ?x53 ?x53) (* ?x52 ?x52 ?x52 ?x52 ?x53 ?x53))))
 (let ((?x61 (- (- ?x56 (* ?x52 ?x52 ?x52 ?x53 ?x53 y00)) (* ?x52 ?x52 x00))))
 (let ((?x66 (+ (- ?x61 (* ?x52 ?x52 y00)) (* ?x52 ?x52 ?x52 ?x53 ?x53 ?x53) (* ?x52 ?x52 ?x53) (* ?x52 ?x52 ?x52))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x39 (+ (* (- 1) ?x35 ?x35 ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x44 (- (- ?x39 (* ?x35 ?x35 ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 x00))))
 (let ((?x49 (+ (- ?x44 (* ?x35 ?x35 y00)) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0)) (not (= ?x66 0)))))))))))))) :qid k!27))
 ))
 (let ((?x966 (lambda ((x Int) (y Int) )(let ((?x92 (+ (- 1) x)))
 (let ((?x522 (* ?x92 ?x92 ?x92)))
 (let ((?x102 (+ 1 y)))
 (let ((?x481 (* ?x92 ?x92 ?x102)))
 (let ((?x665 (* ?x92 ?x92 ?x92 ?x102 ?x102 ?x102)))
 (let ((?x307 (* ?x92 ?x92 ?x92 ?x92 ?x102 ?x102)))
 (let ((?x397 (+ (* (- 1) (* x00 ?x92 ?x92 ?x92 ?x102 ?x102)) ?x307 (* (- 1) (* y00 ?x92 ?x92 ?x92 ?x102 ?x102)) (* (- 1) (* x00 ?x92 ?x92)) (* (- 1) (* y00 ?x92 ?x92)) ?x665 ?x481 ?x522)))
 (let ((?x693 (+ 1 x)))
 (let ((?x1071 (* ?x693 ?x693 ?x693)))
 (let ((?x427 (+ (- 1) y)))
 (let ((?x1014 (* ?x427 ?x693 ?x693)))
 (let ((?x757 (* ?x427 ?x427 ?x427 ?x693 ?x693 ?x693)))
 (let ((?x496 (* ?x427 ?x427 ?x693 ?x693 ?x693 ?x693)))
 (let ((?x80 (+ (* (- 1) (* x00 ?x427 ?x427 ?x693 ?x693 ?x693)) ?x496 (* (- 1) (* y00 ?x427 ?x427 ?x693 ?x693 ?x693)) (* (- 1) (* x00 ?x693 ?x693)) (* (- 1) (* y00 ?x693 ?x693)) ?x757 ?x1014 ?x1071)))
 (let (($x85 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x244 (and $x85 (or (not (= ?x80 0)) (not (= ?x397 0))))))
 (let ((?x53 (- y 1)))
 (let ((?x52 (+ x 1)))
 (let ((?x56 (+ (* (- 1) ?x52 ?x52 ?x52 x00 ?x53 ?x53) (* ?x52 ?x52 ?x52 ?x52 ?x53 ?x53))))
 (let ((?x61 (- (- ?x56 (* ?x52 ?x52 ?x52 ?x53 ?x53 y00)) (* ?x52 ?x52 x00))))
 (let ((?x66 (+ (- ?x61 (* ?x52 ?x52 y00)) (* ?x52 ?x52 ?x52 ?x53 ?x53 ?x53) (* ?x52 ?x52 ?x53) (* ?x52 ?x52 ?x52))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x39 (+ (* (- 1) ?x35 ?x35 ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x44 (- (- ?x39 (* ?x35 ?x35 ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 x00))))
 (let ((?x49 (+ (- ?x44 (* ?x35 ?x35 y00)) (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35))))
 (let (($x70 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x49 0)) (not (= ?x66 0))))))
 (rewrite (= $x70 $x244))))))))))))))))))))))))))))))
 ))
 (let ((@x72 (asserted $x71)))
 (let ((@x474 (mp (mp @x72 (quant-intro (proof-bind ?x966) (= $x71 $x443)) $x443) (rewrite (= $x443 $x443)) $x443)))
 (let ((@x1480 (mp (mp @x474 (quant-intro (proof-bind ?x968) (= $x443 $x309)) $x309) (quant-intro (proof-bind ?x668) (= $x309 $x842)) $x842)))
 (let ((@x1340 (mp (mp~ @x1480 (sk (~ $x842 $x545)) $x545) (rewrite (= $x545 $x729)) $x729)))
 (let ((@x1339 (and-elim @x1340 $x1012)))
 (let ((@x1072 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1012) $x606)) @x1339 $x606)))
 (let (($x464 (>= ?x1015 0)))
 (let ((@x1067 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1012) $x464)) @x1339 $x464)))
 (let (($x900 (not (<= ?x1331 0))))
 (let (($x696 (>= ?x1331 0)))
 (let ((@x549 (lemma ((_ th-lemma arith) (hypothesis (not $x696)) @x1067 @x1072 @x1067 @x1072 false) $x696)))
 (let (($x136 (>= ?x955 0)))
 (let (($x181 (<= ?x955 0)))
 (let ((@x1016 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1048 (not $x181) (not $x136))) (lemma ((_ th-lemma arith) (hypothesis (not $x181)) @x1067 @x1072 false) $x181) (lemma ((_ th-lemma arith) (hypothesis (not $x136)) @x1067 @x1072 false) $x136) $x1048)))
 (let ((@x926 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1333 $x900 (not $x696))) (unit-resolution (and-elim @x1340 $x96) @x1016 $x1338) @x549 $x900)))
 ((_ th-lemma arith) @x926 @x1067 @x1072 @x1067 @x1072 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        18
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-grobner             4
 :arith-max-min             597
 :arith-nonlinear-bounds    11
 :arith-nonlinear-horner    25
 :arith-num-rows            7
 :arith-pivots              4
 :arith-row-summations      1
 :arith-tableau-max-columns 52
 :arith-tableau-max-rows    7
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                3.73
 :memory                    3.25
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1424064
 :num-checks                1
 :propagations              14
 :rlimit-count              8642
 :time                      0.01
 :total-time                0.02)
