unsat
((set-logic NRA)
(declare-fun z!4 () Real)
(declare-fun y!5 () Real)
(declare-fun x!6 () Real)
(proof
(let ((?x325 (+ (* z00 x!6 y!5 z!4 z!4) (* (/ 1.0 2.0) (* x!6 y!5 y!5 z!4 z!4)) (* (- (/ 1.0 2.0)) (* z00 x!6 y!5 y!5 z!4)) (* (- (/ 1.0 2.0)) (* x00 y00 x!6 y!5 y!5 z!4)) (* (/ 1.0 2.0) (* x!6 x!6 y!5 y!5 y!5 z!4)) (* x00 y00 x!6 y!5 z!4 z!4) (* (- 1.0) (* x!6 x!6 y!5 y!5 z!4 z!4)) (* (- 1.0) (* x!6 y!5 z!4 z!4 z!4)))))
 (let (($x116 (>= ?x325 0.0)))
 (let (($x407 (not $x116)))
 (let (($x112 (= 0.0 ?x325)))
 (let (($x181 (not $x112)))
 (let ((@x179 (symm (commutativity (= $x112 (= ?x325 0.0))) (= (= ?x325 0.0) $x112))))
 (let (($x212 (= ?x325 0.0)))
 (let (($x220 (not $x212)))
 (let ((?x184 (* x!6 y!5)))
 (let ((?x67 (* x00 y00)))
 (let ((?x68 (* (- 1.0) ?x67)))
 (let ((?x87 (* (- 1.0) z00)))
 (let ((?x359 (* (- 1.0) (* x!6 x!6 x!6))))
 (let ((?x254 (* (- (/ 1.0 2.0)) (* x!6 x!6))))
 (let ((?x174 (+ (* 2.0 (* x!6 x!6 y!5 z!4)) (* x!6 y!5 z!4 z!4) ?x254 (* (- (/ 1.0 2.0)) (* x!6 z!4)) (* (- 1.0) (* x!6 z!4 z!4)) (* (- 2.0) (* x!6 x!6 z!4)) (* x!6 x!6 x!6 y!5) ?x359 (* x!6 y!5 z!4) (* (- (/ 1.0 2.0)) (* x!6 y!5 y!5 z!4)) (* x!6 x!6 y!5) (* (- (/ 1.0 2.0)) (* x!6 x!6 y!5 y!5)))))
 (let (($x163 (= (* ?x174 (+ ?x87 ?x68 ?x184 z!4)) 0.0)))
 (let ((?x249 (+ ?x184 z!4 ?x87 ?x68)))
 (let (($x224 (= ?x249 0.0)))
 (let ((?x246 (+ z00 ?x67 (* (- 1.0) ?x184) (* (- 1.0) z!4))))
 (let (($x248 (= ?x246 0.0)))
 (let (($x239 (not $x163)))
 (let (($x277 (or $x220 $x239)))
 (let (($x106 (and $x248 $x277)))
 (let ((?x399 (+ z!4 ?x87 ?x68 (* y!5 x!6))))
 (let ((?x88 (+ (* 2.0 (* z!4 y!5 x!6 x!6)) (* (- (/ 1.0 2.0)) (* z!4 x!6)) (* z!4 y!5 x!6) (* (- (/ 1.0 2.0)) (* z!4 y!5 y!5 x!6)) ?x254 (* y!5 x!6 x!6) (* (- (/ 1.0 2.0)) (* y!5 y!5 x!6 x!6)) (* (- 1.0) (* z!4 z!4 x!6)) (* (- 2.0) (* z!4 x!6 x!6)) ?x359 (* y!5 x!6 x!6 x!6) (* z!4 z!4 y!5 x!6))))
 (let ((?x312 (+ (* (/ 1.0 2.0) (* z!4 z!4 y!5 y!5 x!6)) (* (- (/ 1.0 2.0)) (* z!4 y!5 y!5 x!6 z00)) (* (- (/ 1.0 2.0)) (* z!4 y!5 y!5 x!6 x00 y00)) (* (/ 1.0 2.0) (* z!4 y!5 y!5 y!5 x!6 x!6)) (* (- 1.0) (* z!4 z!4 z!4 y!5 x!6)) (* z!4 z!4 y!5 x!6 z00) (* z!4 z!4 y!5 x!6 x00 y00) (* (- 1.0) (* z!4 z!4 y!5 y!5 x!6 x!6)))))
 (let (($x92 (and (= ?x399 0.0) (or (not (= ?x312 0.0)) (not (= (* ?x88 ?x399) 0.0))))))
 (let (($x401 (exists ((x Real) (y Real) (z Real) )(! (let ((?x73 (* y x)))
 (let ((?x67 (* x00 y00)))
 (let ((?x68 (* (- 1.0) ?x67)))
 (let ((?x87 (* (- 1.0) z00)))
 (let ((?x93 (+ z ?x87 ?x68 ?x73)))
 (let ((?x369 (* z z y x)))
 (let ((?x278 (* (- (/ 1.0 2.0)) (* y y x x))))
 (let ((?x219 (* y x x)))
 (let ((?x273 (* (- (/ 1.0 2.0)) (* x x))))
 (let ((?x270 (* (- (/ 1.0 2.0)) (* z y y x))))
 (let ((?x191 (* z y x)))
 (let ((?x265 (* (- (/ 1.0 2.0)) (* z x))))
 (let ((?x386 (+ (* 2.0 (* z y x x)) ?x265 ?x191 ?x270 ?x273 ?x219 ?x278 (* (- 1.0) (* z z x)) (* (- 2.0) (* z x x)) (* (- 1.0) (* x x x)) (* y x x x) ?x369)))
 (let ((?x357 (+ (* (/ 1.0 2.0) (* z z y y x)) (* (- (/ 1.0 2.0)) (* z y y x z00)) (* (- (/ 1.0 2.0)) (* z y y x x00 y00)) (* (/ 1.0 2.0) (* z y y y x x)) (* (- 1.0) (* z z z y x)) (* z z y x z00) (* z z y x x00 y00) (* (- 1.0) (* z z y y x x)))))
 (let (($x318 (not (= ?x357 0.0))))
 (let (($x98 (= ?x93 0.0)))
 (and $x98 (or $x318 (not (= (* ?x386 ?x93) 0.0)))))))))))))))))))) :qid k!28))
 ))
 (let (($x107 (exists ((x Real) (y Real) (z Real) )(! (let ((?x87 (* (- 1.0) z00)))
 (let ((?x67 (* x00 y00)))
 (let ((?x68 (* (- 1.0) ?x67)))
 (let ((?x118 (+ ?x68 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x87)))
 (let ((?x300 (* 2.0 (* (+ z x) (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x))))
 (let ((?x109 (* (/ 1.0 2.0) y)))
 (let ((?x82 (+ (- (/ 1.0 2.0)) ?x109)))
 (let ((?x40 (+ z x)))
 (let (($x105 (not (= (* (+ (* (- 2.0) (* ?x40 ?x82 ?x82 x)) ?x300) ?x118) 0.0))))
 (let ((?x73 (* y x)))
 (let ((?x242 (+ ?x68 ?x73 z ?x87)))
 (let ((?x133 (* (+ (* (- (/ 1.0 2.0)) (* z y y x)) (* z z y x)) ?x242)))
 (and (= ?x242 0.0) (or (not (= ?x133 0.0)) $x105)))))))))))))) :qid k!28))
 ))
 (let ((?x406 (lambda ((x Real) (y Real) (z Real) )(let ((?x73 (* y x)))
 (let ((?x67 (* x00 y00)))
 (let ((?x68 (* (- 1.0) ?x67)))
 (let ((?x87 (* (- 1.0) z00)))
 (let ((?x93 (+ z ?x87 ?x68 ?x73)))
 (let ((?x369 (* z z y x)))
 (let ((?x278 (* (- (/ 1.0 2.0)) (* y y x x))))
 (let ((?x219 (* y x x)))
 (let ((?x273 (* (- (/ 1.0 2.0)) (* x x))))
 (let ((?x270 (* (- (/ 1.0 2.0)) (* z y y x))))
 (let ((?x191 (* z y x)))
 (let ((?x265 (* (- (/ 1.0 2.0)) (* z x))))
 (let ((?x386 (+ (* 2.0 (* z y x x)) ?x265 ?x191 ?x270 ?x273 ?x219 ?x278 (* (- 1.0) (* z z x)) (* (- 2.0) (* z x x)) (* (- 1.0) (* x x x)) (* y x x x) ?x369)))
 (let ((?x357 (+ (* (/ 1.0 2.0) (* z z y y x)) (* (- (/ 1.0 2.0)) (* z y y x z00)) (* (- (/ 1.0 2.0)) (* z y y x x00 y00)) (* (/ 1.0 2.0) (* z y y y x x)) (* (- 1.0) (* z z z y x)) (* z z y x z00) (* z z y x x00 y00) (* (- 1.0) (* z z y y x x)))))
 (let (($x318 (not (= ?x357 0.0))))
 (let (($x98 (= ?x93 0.0)))
 (let (($x448 (and $x98 (or $x318 (not (= (* ?x386 ?x93) 0.0))))))
 (let ((?x118 (+ ?x68 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x87)))
 (let ((?x300 (* 2.0 (* (+ z x) (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x))))
 (let ((?x109 (* (/ 1.0 2.0) y)))
 (let ((?x82 (+ (- (/ 1.0 2.0)) ?x109)))
 (let ((?x40 (+ z x)))
 (let (($x105 (not (= (* (+ (* (- 2.0) (* ?x40 ?x82 ?x82 x)) ?x300) ?x118) 0.0))))
 (let (($x96 (or (not (= (* (+ ?x270 ?x369) (+ ?x68 ?x73 z ?x87)) 0.0)) $x105)))
 (let (($x197 (and (= (+ ?x68 ?x73 z ?x87) 0.0) $x96)))
 (rewrite (= $x197 $x448))))))))))))))))))))))))))))
 ))
 (let (($x59 (exists ((x Real) (y Real) (z Real) )(! (let ((?x53 (+ (* (- 1.0) 2.0 x (/ y 2.0) (/ y 2.0) z) (* 2.0 x (/ y 2.0) z z))))
 (let ((?x50 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x40 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x43 (+ (* (- 1.0) 2.0 x ?x36 ?x36 ?x40) (* 2.0 x ?x36 ?x40 ?x40))))
 (let ((?x39 (- (+ (* (- 1.0) x00 y00) (* 2.0 x ?x36) z x) z00)))
 (let (($x33 (= (- (+ (* (- 1.0) x00 y00) (* x y) z) z00) 0.0)))
 (and $x33 (or (not (= (* ?x39 ?x43) 0.0)) (not (= (* ?x50 ?x53) 0.0))))))))))) :qid k!28))
 ))
 (let ((?x147 (lambda ((x Real) (y Real) (z Real) )(let ((?x87 (* (- 1.0) z00)))
 (let ((?x67 (* x00 y00)))
 (let ((?x68 (* (- 1.0) ?x67)))
 (let ((?x118 (+ ?x68 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x87)))
 (let ((?x300 (* 2.0 (* (+ z x) (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x))))
 (let ((?x109 (* (/ 1.0 2.0) y)))
 (let ((?x82 (+ (- (/ 1.0 2.0)) ?x109)))
 (let ((?x40 (+ z x)))
 (let (($x105 (not (= (* (+ (* (- 2.0) (* ?x40 ?x82 ?x82 x)) ?x300) ?x118) 0.0))))
 (let ((?x73 (* y x)))
 (let ((?x242 (+ ?x68 ?x73 z ?x87)))
 (let ((?x133 (* (+ (* (- (/ 1.0 2.0)) (* z y y x)) (* z z y x)) ?x242)))
 (let (($x197 (and (= ?x242 0.0) (or (not (= ?x133 0.0)) $x105))))
 (let ((?x53 (+ (* (- 1.0) 2.0 x (/ y 2.0) (/ y 2.0) z) (* 2.0 x (/ y 2.0) z z))))
 (let ((?x50 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x24 (- 1.0)))
 (let ((?x43 (+ (* ?x24 2.0 x ?x36 ?x36 ?x40) (* 2.0 x ?x36 ?x40 ?x40))))
 (let ((?x44 (* (- (+ (* ?x24 x00 y00) (* 2.0 x ?x36) z x) z00) ?x43)))
 (let (($x58 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not (= ?x44 0.0)) (not (= (* ?x50 ?x53) 0.0))))))
 (rewrite (= $x58 $x197)))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x330 (mp (mp @x60 (quant-intro (proof-bind ?x147) (= $x59 $x107)) $x107) (quant-intro (proof-bind ?x406) (= $x107 $x401)) $x401)))
 (let ((@x101 (mp (mp~ @x330 (sk (~ $x401 $x92)) $x92) (rewrite (= $x92 $x106)) $x106)))
 (let ((@x223 (and-elim @x101 $x248)))
 (let (($x111 (<= ?x246 0.0)))
 (let (($x329 (= 0.0 ?x246)))
 (let ((@x119 (mp @x223 (symm (commutativity (= $x329 $x248)) (= $x248 $x329)) $x329)))
 (let ((@x204 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x329) $x111)) @x119 $x111)))
 (let (($x281 (>= ?x246 0.0)))
 (let ((@x395 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x329) $x281)) @x119 $x281)))
 (let (($x253 (<= ?x249 0.0)))
 (let (($x280 (>= ?x249 0.0)))
 (let ((@x103 ((_ th-lemma arith) (lemma ((_ th-lemma arith) @x204 (hypothesis (not $x280)) false) $x280) (lemma ((_ th-lemma arith) (hypothesis (not $x253)) @x395 false) $x253) @x395 @x204 (= ?x246 ?x249))))
 (let (($x231 (or (not $x224) $x163)))
 (let ((@x201 (unit-resolution ((_ th-lemma arith) $x231) (hypothesis $x239) (hypothesis $x224) false)))
 (let ((@x79 (unit-resolution (lemma @x201 $x231) (trans* (symm @x103 (= ?x249 ?x246)) @x223 $x224) $x163)))
 (let ((@x400 (mp (unit-resolution (and-elim @x101 $x277) @x79 $x220) (monotonicity @x179 (= $x220 $x181)) $x181)))
 (let (($x110 (<= ?x325 0.0)))
 (let ((@x366 (unit-resolution ((_ th-lemma arith) (or (not $x111) (not $x281) $x110)) @x204 @x395 (hypothesis (not $x110)) false)))
 (let ((@x413 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x112 (not $x110) $x407)) (lemma @x366 $x110) @x400 $x407)))
 (unit-resolution ((_ th-lemma arith) (or (not $x111) (not $x281) $x116)) @x204 @x395 @x413 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      15
 :arith-eq-adapter               13
 :arith-bound-propagations-cheap 10
 :arith-conflicts                12
 :arith-diseq                    21
 :arith-fixed-eqs                1
 :arith-grobner-calls            2
 :arith-grobner-conflicts        2
 :arith-horner-calls             2
 :arith-lower                    22
 :arith-make-feasible            17
 :arith-max-columns              38
 :arith-max-rows                 5
 :arith-nla-explanations         6
 :arith-nla-lemmas               10
 :arith-propagations             10
 :arith-upper                    9
 :conflicts                      6
 :decisions                      22
 :del-clause                     10
 :final-checks                   14
 :max-memory                     1.64
 :memory                         1.04
 :mk-bool-var                    50
 :mk-clause                      51
 :num-allocs                     143129
 :num-checks                     1
 :propagations                   27
 :rlimit-count                   2920
 :time                           0.00
 :total-time                     0.01)
