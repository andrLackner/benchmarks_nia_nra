unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x379 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x324 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) (* (- 4) r!2) (* (- 1) (* v!0 v!0)) ?x379 (* 2 v!0))))
 (let (($x203 (>= ?x324 0)))
 (let (($x423 (= ?x324 0)))
 (let ((?x166 (* (- 2) v!0)))
 (let ((?x303 (* (- 1) ?x379)))
 (let ((?x226 (* v!0 v!0)))
 (let ((?x201 (* 4 r!2)))
 (let ((?x165 (* 2 u!1)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x452 (+ ?x110 ?x126 ?x41 ?x46 ?x202 ?x165 ?x201 ?x226 ?x303 ?x166)))
 (let ((?x595 (* u!1 u!1 u!1)))
 (let ((?x410 (* 4 ?x595)))
 (let ((?x444 (* u!1 u!1 r!2 r!2)))
 (let ((?x270 (+ u!1 r!2)))
 (let ((?x478 (+ 2 u!1)))
 (let ((?x441 (* 4 (* r!2 r!2))))
 (let ((?x407 (* 4 ?x379)))
 (let ((?x244 (* (- 1) u!1)))
 (let ((?x134 (* u!1 u!1 u!1 u!1)))
 (let ((?x247 (+ (- 2) ?x134 ?x244 (* 8 (* u!1 u!1 r!2)) (* 8 (* u!1 r!2)) (* 4 (* u!1 r!2 r!2)) ?x407 ?x441 (* ?x478 ?x478 ?x478 ?x270 ?x270 ?x270) ?x444 ?x410 (* 2 (* u!1 u!1 u!1 r!2)))))
 (let ((?x656 (* u!1 u!1 v!0)))
 (let ((?x363 (* 7 ?x656)))
 (let ((?x173 (* 12 v!0)))
 (let ((?x594 (* u!1 u!1 u!1 v!0)))
 (let ((?x122 (* 4 u!1)))
 (let ((?x519 (* (+ 4 ?x122 ?x379 (* 16 (* u!1 v!0)) ?x594 ?x173 ?x363) ?x247 ?x452)))
 (let (($x331 (= ?x519 0)))
 (let (($x142 (not $x331)))
 (let ((?x489 (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x321 (* u!1 u!1 v!0 v!0)))
 (let ((?x432 (+ ?x244 (* u!1 u!1 u!1 r!2 r!2 r!2) ?x321 ?x489 ?x444 (* (- 2) (* u!1 u!1 r!2 v!0)) (* (- 3) (* u!1 u!1 u!1 r!2 r!2 v!0)) (* 3 (* u!1 u!1 u!1 r!2 v!0 v!0)))))
 (let ((?x242 (+ (* 3 ?x379) ?x594 (* 2 ?x595) ?x656)))
 (let ((?x424 (* ?x242 ?x432 ?x452)))
 (let (($x443 (= ?x424 0)))
 (let (($x596 (or (not $x443) $x142)))
 (let (($x501 (and $x423 $x596)))
 (let ((?x529 (+ ?x201 ?x165 ?x166 ?x110 ?x126 ?x41 ?x303 ?x226 ?x46 ?x202)))
 (let ((?x471 (* r!2 r!2 u!1 u!1)))
 (let ((?x188 (+ (- 2) ?x244 ?x407 ?x410 ?x471 (* 8 (* r!2 u!1 u!1)) (* 4 (* r!2 r!2 u!1)) (* 8 (* r!2 u!1)) ?x441 ?x134 (* 2 (* r!2 u!1 u!1 u!1)) (* ?x478 ?x478 ?x478 (+ r!2 u!1) (+ r!2 u!1) (+ r!2 u!1)))))
 (let ((?x406 (+ 4 ?x122 ?x173 ?x379 ?x594 ?x363 (* 12 (* u!1 v!0)) (* 2 (* u!1 2 v!0)))))
 (let ((?x168 (+ ?x244 (* r!2 r!2 r!2 u!1 u!1 u!1) (* (- 3) (* r!2 r!2 u!1 u!1 u!1 v!0)) (* 3 (* r!2 u!1 u!1 u!1 v!0 v!0)) ?x489 ?x471 (* (- 2) (* r!2 u!1 u!1 v!0)) ?x321)))
 (let (($x150 (or (not (= (* ?x242 ?x168 ?x529) 0)) (not (= (* ?x406 ?x188 ?x529) 0)))))
 (let (($x431 (and (= ?x529 0) $x150)))
 (let (($x632 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x710 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x706 (* 2 (* r u u u))))
 (let ((?x673 (* u u u u)))
 (let ((?x666 (* 4 (* r r))))
 (let ((?x702 (* 8 (* r u))))
 (let ((?x703 (* 4 (* r r u))))
 (let ((?x704 (* 8 (* r u u))))
 (let ((?x467 (* r r u u)))
 (let ((?x338 (* u u u)))
 (let ((?x705 (* 4 ?x338)))
 (let ((?x651 (* 4 ?x43)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x332 (* u u u v)))
 (let ((?x608 (+ 4 (* 4 u) (* 12 v) ?x43 ?x332 (* 7 (* u u v)) (* 12 (* u v)) (* 2 (* u 2 v)))))
 (let ((?x649 (* ?x608 (+ (- 2) ?x380 ?x651 ?x705 ?x467 ?x704 ?x703 ?x702 ?x666 ?x673 ?x706 ?x710) ?x208)))
 (let ((?x510 (+ ?x380 (* r r r u u u) (* (- 3) (* r r u u u v)) (* 3 (* r u u u v v)) (* (- 1) (* u u u v v v)) ?x467 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x356 (* u u v)))
 (let ((?x373 (+ (* 3 ?x43) ?x332 (* 2 ?x338) ?x356)))
 (let (($x213 (= ?x208 0)))
 (and $x213 (or (not (= (* ?x373 ?x510 ?x208) 0)) (not (= ?x649 0)))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x199 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x635 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x710 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x378 (* (+ (* ?x361 ?x361) (* ?x361 ?x361 ?x361 v) (* ?x361 ?x361 v)) (+ (- 2) ?x380 ?x710 (* ?x361 ?x361 ?x77 ?x77)) ?x635)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x495 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x295 (+ r (* (- 1) v))))
 (let ((?x345 (+ ?x43 (* (+ 2 v) u u u) (* (+ 2 v) u u))))
 (let ((?x500 (* ?x345 (+ ?x380 (* ?x295 ?x295 ?x295 u u u) (* ?x295 ?x295 u u)) ?x495)))
 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= ?x500 0)) (not (= ?x378 0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x694 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x208 (+ ?x28 ?x36 ?x156 ?x110 ?x126 ?x41 ?x180 ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x710 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x706 (* 2 (* r u u u))))
 (let ((?x673 (* u u u u)))
 (let ((?x666 (* 4 (* r r))))
 (let ((?x702 (* 8 (* r u))))
 (let ((?x703 (* 4 (* r r u))))
 (let ((?x704 (* 8 (* r u u))))
 (let ((?x467 (* r r u u)))
 (let ((?x338 (* u u u)))
 (let ((?x705 (* 4 ?x338)))
 (let ((?x651 (* 4 ?x43)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x332 (* u u u v)))
 (let ((?x608 (+ 4 (* 4 u) (* 12 v) ?x43 ?x332 (* 7 (* u u v)) (* 12 (* u v)) (* 2 (* u 2 v)))))
 (let ((?x649 (* ?x608 (+ (- 2) ?x380 ?x651 ?x705 ?x467 ?x704 ?x703 ?x702 ?x666 ?x673 ?x706 ?x710) ?x208)))
 (let ((?x510 (+ ?x380 (* r r r u u u) (* (- 3) (* r r u u u v)) (* 3 (* r u u u v v)) (* (- 1) (* u u u v v v)) ?x467 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x356 (* u u v)))
 (let ((?x373 (+ (* 3 ?x43) ?x332 (* 2 ?x338) ?x356)))
 (let (($x213 (= ?x208 0)))
 (let (($x336 (and $x213 (or (not (= (* ?x373 ?x510 ?x208) 0)) (not (= ?x649 0))))))
 (let ((?x635 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* ?x361 ?x361)) ?x45 ?x46 ?x202)))
 (let ((?x378 (* (+ (* ?x361 ?x361) (* ?x361 ?x361 ?x361 v) (* ?x361 ?x361 v)) (+ (- 2) ?x380 ?x710 (* ?x361 ?x361 ?x77 ?x77)) ?x635)))
 (let ((?x495 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x295 (+ r (* (- 1) v))))
 (let ((?x345 (+ ?x43 (* (+ 2 v) u u u) (* (+ 2 v) u u))))
 (let ((?x500 (* ?x345 (+ ?x380 (* ?x295 ?x295 ?x295 u u u) (* ?x295 ?x295 u u)) ?x495)))
 (let (($x315 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= ?x500 0)) (not (= ?x378 0))))))
 (rewrite (= $x315 $x336)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((r Int) (u Int) (v Int) )(! (let ((?x81 (+ u 2)))
 (let ((?x77 (+ r u)))
 (let ((?x96 (+ (* (- 1) ?x81) (* ?x77 ?x77 ?x77 ?x81 ?x81 ?x81) (* ?x77 ?x77 ?x81 ?x81))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x86 (* ?x81 ?x81)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) ?x86) ?x45 ?x46) ?x48) (+ ?x86 (* ?x81 ?x81 ?x81 v) (* ?x81 ?x81 v)) ?x96)))
 (let ((?x73 (+ (* (- 1) u) (* (- r v) (- r v) (- r v) u u u) (* (- r v) (- r v) u u))))
 (let ((?x43 (* u u)))
 (let ((?x67 (+ ?x43 (* u u u (+ v 2)) (* u u (+ v 2)))))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x100 (or (not (= (* (- ?x63 ?x48) ?x67 ?x73) 0)) (not (= ?x97 0)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) $x100)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x285 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x202 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x156 (* (- 2) v)))
 (let ((?x126 (* (- 2) u00)))
 (let ((?x110 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x635 (+ 4 ?x28 (* 6 u) ?x110 ?x126 ?x156 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x202)))
 (let ((?x77 (+ r u)))
 (let ((?x361 (+ 2 u)))
 (let ((?x710 (* ?x361 ?x361 ?x361 ?x77 ?x77 ?x77)))
 (let ((?x380 (* (- 1) u)))
 (let ((?x378 (* (+ (* ?x361 ?x361) (* ?x361 ?x361 ?x361 v) (* ?x361 ?x361 v)) (+ (- 2) ?x380 ?x710 (* ?x361 ?x361 ?x77 ?x77)) ?x635)))
 (let ((?x43 (* u u)))
 (let ((?x180 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x495 (+ (- 4) ?x28 (* (- 6) v) ?x110 ?x126 ?x36 ?x41 ?x180 (* (+ 2 v) (+ 2 v)) ?x46 ?x202)))
 (let ((?x295 (+ r (* (- 1) v))))
 (let ((?x345 (+ ?x43 (* (+ 2 v) u u u) (* (+ 2 v) u u))))
 (let ((?x500 (* ?x345 (+ ?x380 (* ?x295 ?x295 ?x295 u u u) (* ?x295 ?x295 u u)) ?x495)))
 (let (($x315 (and (= (+ ?x28 ?x110 ?x126 ?x36 ?x156 ?x41 ?x180 ?x45 ?x46 ?x202) 0) (or (not (= ?x500 0)) (not (= ?x378 0))))))
 (let ((?x96 (+ (* (- 1) (+ u 2)) (* ?x77 ?x77 ?x77 (+ u 2) (+ u 2) (+ u 2)) (* ?x77 ?x77 (+ u 2) (+ u 2)))))
 (let ((?x81 (+ u 2)))
 (let ((?x86 (* ?x81 ?x81)))
 (let ((?x38 (* 2 v)))
 (let ((?x83 (+ (- (- (* 4 ?x77) (* 4 r00)) (* 2 u00)) (* 2 ?x81))))
 (let ((?x97 (* (- (+ (- (+ (- ?x83 ?x38) ?x41) ?x86) ?x45 ?x46) ?x48) (+ ?x86 (* ?x81 ?x81 ?x81 v) (* ?x81 ?x81 v)) ?x96)))
 (let ((?x73 (+ (* (- 1) u) (* (- r v) (- r v) (- r v) u u u) (* (- r v) (- r v) u u))))
 (let ((?x67 (+ ?x43 (* u u u (+ v 2)) (* u u (+ v 2)))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x100 (or (not (= (* (- ?x63 ?x48) ?x67 ?x73) 0)) (not (= ?x97 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x101 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x100)))
 (rewrite (= $x101 $x315)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x286 (mp (mp @x103 (quant-intro (proof-bind ?x285) (= $x102 $x199)) $x199) (rewrite (= $x199 $x199)) $x199)))
 (let ((@x453 (mp~ (mp @x286 (quant-intro (proof-bind ?x694) (= $x199 $x632)) $x632) (sk (~ $x632 $x431)) $x431)))
 (let ((@x259 (mp @x453 (rewrite (= $x431 $x501)) $x501)))
 (let ((@x228 (and-elim @x259 $x423)))
 (let ((@x170 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x423) $x203)) @x228 $x203)))
 (let (($x625 (<= ?x324 0)))
 (let ((@x130 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x423) $x625)) @x228 $x625)))
 (let (($x121 (not (<= ?x519 0))))
 (let (($x394 (>= ?x519 0)))
 (let (($x636 (>= ?x424 0)))
 (let (($x633 (<= ?x424 0)))
 (let ((@x127 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x443 (not $x633) (not $x636))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x633)) @x130 @x170 false) $x633) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x636)) @x130 @x170 false) $x636) $x443)))
 (let ((@x143 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x331 $x121 (not $x394))) (unit-resolution (and-elim @x259 $x596) @x127 $x142) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x394)) @x130 @x170 false) $x394) $x121)))
 ((_ th-lemma arith farkas 1 1 1) @x143 @x130 @x170 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        48
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             280
 :arith-nonlinear-bounds    31
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.60
 :memory                    19.11
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                502161
 :num-checks                1
 :propagations              14
 :rlimit-count              3603
 :time                      0.01
 :total-time                0.02)
