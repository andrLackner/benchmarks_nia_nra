unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x585 (* (- 6) n!0)))
 (let ((?x518 (+ m!1 ?x585)))
 (let (($x196 (<= ?x518 6)))
 (let (($x515 (= ?x518 6)))
 (let ((?x584 (* 432 n!0)))
 (let ((?x620 (* 36 (* m!1 m!1 n!0))))
 (let ((?x104 (* 18 (* m!1 m!1))))
 (let ((?x349 (* m!1 m!1 m!1 n!0 n!0)))
 (let ((?x345 (* 108 (* m!1 n!0 n!0))))
 (let ((?x344 (* m!1 m!1 m!1)))
 (let ((?x507 (* 18 (* m!1 m!1 n!0 n!0))))
 (let ((?x336 (* 216 (* m!1 n!0))))
 (let ((?x559 (+ k!2 c!3)))
 (let ((?x574 (+ k!2 m!1)))
 (let ((?x582 (+ 6 m!1)))
 (let ((?x550 (+ 1 n!0)))
 (let ((?x619 (* 2 (* m!1 m!1 m!1 n!0))))
 (let ((?x167 (* n!0 n!0)))
 (let ((?x513 (* 216 ?x167)))
 (let ((?x111 (+ 216 (* (- 1) (* ?x550 ?x582 ?x582 ?x574 ?x574 ?x559)) ?x513 ?x619 (* ?x550 ?x550 ?x550 ?x582 ?x574 ?x574 ?x574 ?x559 ?x559) ?x336 ?x507 ?x344 ?x345 ?x349 ?x104 ?x620 (* 108 m!1) ?x584)))
 (let ((?x166 (+ (- 6) m!1 ?x585)))
 (let ((?x570 (* ?x166 ?x111)))
 (let (($x285 (= ?x570 0)))
 (let (($x508 (not $x285)))
 (let (($x630 (= (+ k!2 (* 3 c!3) (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x282 (* (- 9) n!0)))
 (let ((?x281 (* 9 (* c!3 n!0))))
 (let ((?x561 (* (- 1) (* k!2 k!2))))
 (let ((?x623 (* 18 c!3)))
 (let ((?x557 (* 5 k!2)))
 (let (($x563 (and $x515 (= (+ ?x557 ?x623 ?x561 ?x281 ?x282) 4) $x630 (= (+ k!2 (* (- 3) ?x167) (* (- 3) n!0)) 1) $x508)))
 (let ((?x579 (+ c!3 k!2)))
 (let ((?x181 (+ 216 (* 72 m!1) ?x584 (* ?x550 ?x550 ?x550 ?x582 ?x574 ?x574 ?x574 ?x579 ?x579) (* (- 1) (* ?x550 ?x582 ?x582 ?x574 ?x574 ?x579)) ?x513 (* 6 (* m!1 6)) ?x345 ?x507 ?x349 ?x104 ?x344 ?x336 ?x620 ?x619)))
 (let (($x614 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x600 (and $x515 (= (+ ?x623 ?x557 ?x282 ?x561 ?x281) 4) $x614 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x167)) 1) (not (= (* ?x166 ?x181) 0)))))
 (let (($x101 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x641 (* 2 (* m m m n))))
 (let ((?x583 (* m m m)))
 (let ((?x562 (* m m m n n)))
 (let ((?x643 (* 18 (* m m n n))))
 (let ((?x272 (* n n)))
 (let ((?x616 (* 216 ?x272)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x636 (* 432 n)))
 (let ((?x632 (* 72 m)))
 (let ((?x738 (+ 216 ?x632 ?x636 ?x155 ?x271 ?x616 (* 6 (* m 6)) (* 108 (* m n n)) ?x643 ?x562 (* 18 (* m m)) ?x583 (* 216 (* m n)) (* 36 (* m m n)) ?x641)))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x272)) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x215 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x211 (= ?x215 4)))
 (let (($x127 (= (+ m ?x110) 6)))
 (and $x127 $x211 $x263 $x301 (not (= (* ?x116 ?x738) 0))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x159 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x498 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x94 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x542 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x127 (= (+ m ?x110) 6)))
 (and $x127 (= ?x542 (- 4)) $x94 $x498 $x154)))))))))))))))) :qid k!34))
 ))
 (let ((?x310 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x641 (* 2 (* m m m n))))
 (let ((?x583 (* m m m)))
 (let ((?x562 (* m m m n n)))
 (let ((?x643 (* 18 (* m m n n))))
 (let ((?x272 (* n n)))
 (let ((?x616 (* 216 ?x272)))
 (let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x636 (* 432 n)))
 (let ((?x632 (* 72 m)))
 (let ((?x738 (+ 216 ?x632 ?x636 ?x155 ?x271 ?x616 (* 6 (* m 6)) (* 108 (* m n n)) ?x643 ?x562 (* 18 (* m m)) ?x583 (* 216 (* m n)) (* 36 (* m m n)) ?x641)))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x301 (= (+ k (* (- 3) n) (* (- 3) ?x272)) 1)))
 (let (($x263 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x215 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x211 (= ?x215 4)))
 (let (($x127 (= (+ m ?x110) 6)))
 (let (($x283 (and $x127 $x211 $x263 $x301 (not (= (* ?x116 ?x738) 0)))))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x94 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x542 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x290 (and $x127 (= ?x542 (- 4)) $x94 (= (+ (* 3 ?x272) (* (- 1) k) (* 3 n)) (- 1)) $x154)))
 (rewrite (= $x290 $x283))))))))))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x74 (+ k m)))
 (let ((?x73 (+ c k)))
 (let ((?x79 (+ (* (- 1) ?x73 ?x74 ?x74 ?x75 ?x75 ?x69) (* ?x75 ?x75 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x74 ?x75 ?x69 ?x69 ?x69))))
 (let (($x81 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x79) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x81)))))))))))))))) :qid k!34))
 ))
 (let ((?x278 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ c k)))
 (let ((?x74 (+ k m)))
 (let ((?x362 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x155 (* ?x316 ?x316 ?x316 ?x362 ?x74 ?x74 ?x74 ?x73 ?x73)))
 (let ((?x271 (* (- 1) (* ?x316 ?x362 ?x362 ?x74 ?x74 ?x73))))
 (let ((?x110 (* (- 6) n)))
 (let ((?x116 (+ (- 6) m ?x110)))
 (let (($x154 (not (= (* ?x116 (+ ?x271 (* ?x316 ?x316 ?x362 ?x362 ?x362) ?x155)) 0))))
 (let (($x498 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x94 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x542 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x127 (= (+ m ?x110) 6)))
 (let (($x290 (and $x127 (= ?x542 (- 4)) $x94 $x498 $x154)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x79 (+ (* (- 1) ?x73 ?x74 ?x74 ?x75 ?x75 ?x69) (* ?x75 ?x75 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x74 ?x74 ?x74 ?x75 ?x69 ?x69 ?x69))))
 (let (($x81 (= (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x79) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x84 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x81)))))
 (rewrite (= $x84 $x290)))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x354 (mp (mp @x86 (quant-intro (proof-bind ?x278) (= $x85 $x159)) $x159) (rewrite (= $x159 $x159)) $x159)))
 (let ((@x180 (mp~ (mp @x354 (quant-intro (proof-bind ?x310) (= $x159 $x101)) $x101) (sk (~ $x101 $x600)) $x600)))
 (let ((@x534 (mp @x180 (rewrite (= $x600 $x563)) $x563)))
 (let ((@x622 (and-elim @x534 $x515)))
 (let ((@x347 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x515) $x196)) @x622 $x196)))
 (let (($x228 (>= ?x518 6)))
 (let ((@x545 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x515) $x228)) @x622 $x228)))
 (let (($x535 (not (<= ?x570 0))))
 (let (($x511 (>= ?x570 0)))
 (let ((@x170 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x285 $x535 (not $x511))) (and-elim @x534 $x508) (or $x535 (not $x511)))))
 (let ((@x528 (unit-resolution @x170 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x511)) @x545 @x347 false) $x511) $x535)))
 ((_ th-lemma arith farkas 1 1 1) @x528 @x545 @x347 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        22
 :arith-assert-upper        23
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-ineq-splits         2
 :arith-max-min             187
 :arith-nonlinear-bounds    16
 :arith-num-rows            10
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      24
 :arith-tableau-max-columns 45
 :arith-tableau-max-rows    10
 :conflicts                 4
 :decisions                 8
 :del-clause                16
 :final-checks              7
 :max-memory                19.61
 :memory                    19.14
 :mk-bool-var               22
 :mk-clause                 16
 :num-allocs                481444
 :num-checks                1
 :propagations              12
 :rlimit-count              3400
 :time                      0.01
 :total-time                0.02)
