unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x1017 (to_real y!0)))
 (let ((?x1010 (to_real d!1)))
 (let ((?x767 (to_real b!2)))
 (let ((?x73 (to_real y00)))
 (let ((?x733 (* (- (/ 1.0 4.0)) (* ?x73 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 (to_real a!3) ?x1017))))
 (let ((?x1013 (to_real a!3)))
 (let ((?x69 (to_real a00)))
 (let ((?x2026 (* ?x69 ?x767 ?x767 ?x1010 ?x1010 ?x1013 ?x1013 ?x1017 ?x1017)))
 (let ((?x936 (+ (* (/ 1.0 32.0) (* ?x69 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013)) (* (- (/ 1.0 64.0)) (* ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013)) (* (/ 1.0 4.0) (* ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1013 ?x1017 ?x1017 ?x1017)) (* (/ 1.0 8.0) (* ?x767 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1017 ?x1017 ?x1017)) (* (- (/ 1.0 4.0)) (* ?x73 ?x767 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017)) (* (/ 1.0 16.0) (* ?x69 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1017)) (* (/ 3.0 8.0) (* ?x767 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017)) (* (/ 3.0 16.0) (* ?x69 ?x1010 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017)) (* (/ 1.0 4.0) (* ?x767 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017 ?x1017)) (* (/ 1.0 16.0) (* ?x69 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1017)) (* (- (/ 1.0 64.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013)) (* (- (/ 3.0 16.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1017 ?x1017)) (* (- (/ 1.0 16.0)) (* ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1013 ?x1017)) (* (/ 1.0 16.0) (* ?x69 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1017 ?x1017)) (* (/ 3.0 16.0) (* ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017)) (* (- (/ 3.0 32.0)) (* ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1017)) (* (/ 3.0 16.0) (* ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1013 ?x1017 ?x1017)) (* (/ 1.0 32.0) (* ?x767 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1017)) (* (- (/ 3.0 32.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1017)) (* (/ 1.0 8.0) (* ?x69 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017)) (* (/ 1.0 8.0) (* ?x767 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1017 ?x1017)) (* (- (/ 1.0 8.0)) (* ?x1010 ?x1010 ?x1010 ?x1013 ?x1017 ?x1017 ?x1017)) (* (/ 1.0 8.0) (* ?x69 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1013 ?x1017)) (* (/ 1.0 64.0) (* ?x69 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1010)) (* (- (/ 1.0 32.0)) (* ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013)) (* (/ 1.0 8.0) (* ?x69 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1013 ?x1017 ?x1017)) (* (/ 1.0 64.0) (* ?x69 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013)) (* (- (/ 1.0 64.0)) (* ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1013)) (* (/ 1.0 32.0) (* ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1017)) (* (- (/ 1.0 8.0)) (* ?x73 ?x767 ?x767 ?x767 ?x1010 ?x1013 ?x1013 ?x1017 ?x1017)) (* (/ 1.0 16.0) ?x2026) (* (- (/ 1.0 16.0)) (* ?x767 ?x767 ?x1010 ?x1010 ?x1013 ?x1013 ?x1013 ?x1017 ?x1017)) (* (/ 1.0 8.0) (* ?x767 ?x767 ?x767 ?x1010 ?x1013 ?x1013 ?x1017 ?x1017 ?x1017)) (* (- (/ 1.0 32.0)) (* ?x73 ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010)) (* (- (/ 1.0 8.0)) (* ?x73 ?x767 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1017 ?x1017)) (* (- (/ 1.0 32.0)) (* ?x73 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013)) (* (- (/ 1.0 4.0)) (* ?x73 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1013 ?x1017 ?x1017)) (* (- (/ 1.0 32.0)) (* ?x73 ?x767 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010)) (* (- (/ 1.0 16.0)) (* ?x73 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1010 ?x1013)) (* (- (/ 1.0 8.0)) (* ?x73 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1013 ?x1013 ?x1017)) (* (- (/ 1.0 8.0)) (* ?x73 ?x767 ?x767 ?x767 ?x767 ?x767 ?x1010 ?x1010 ?x1017)) ?x733 (* (/ 1.0 64.0) (* ?x69 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010)) (* (/ 3.0 32.0) (* ?x69 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1017)) (* (- (/ 3.0 16.0)) (* ?x73 ?x767 ?x1010 ?x1010 ?x1010 ?x1010 ?x1017)) (* (- (/ 3.0 8.0)) (* ?x73 ?x767 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017)))))
 (let (($x1570 (>= ?x936 0.0)))
 (let ((?x2113 (+ (* d!1 a!3) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) (* (- 2) (* y!0 b!2)))))
 (let (($x2033 (>= ?x2113 0)))
 (let (($x889 (= 0 ?x2113)))
 (let ((@x461 (symm (commutativity (= $x889 (= ?x2113 0))) (= (= ?x2113 0) $x889))))
 (let (($x916 (= ?x2113 0)))
 (let ((?x1018 (* ?x1010 ?x1010 ?x1010 ?x1013 ?x1017 ?x1017 ?x1017)))
 (let ((?x1020 (* (/ 1.0 8.0) ?x1018)))
 (let ((?x1178 (+ (* (/ 1.0 4.0) (* ?x73 ?x767 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017)) (* (- (/ 1.0 4.0)) (* ?x767 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017 ?x1017)) (* (- (/ 1.0 8.0)) (* ?x69 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017)) ?x1020 (* (/ 1.0 8.0) (* ?x73 ?x767 ?x767 ?x767 ?x1010 ?x1013 ?x1013 ?x1017 ?x1017)) (* (- (/ 1.0 16.0)) ?x2026) (* (/ 1.0 16.0) (* ?x767 ?x767 ?x1010 ?x1010 ?x1013 ?x1013 ?x1013 ?x1017 ?x1017)) (* (- (/ 1.0 8.0)) (* ?x767 ?x767 ?x767 ?x1010 ?x1013 ?x1013 ?x1017 ?x1017 ?x1017)))))
 (let (($x1001 (= ?x1178 0.0)))
 (let (($x908 (not $x1001)))
 (let (($x1540 (or $x908 (not (= ?x936 0.0)))))
 (let ((?x113 (* b00 y00)))
 (let ((?x114 (* (- 2) ?x113)))
 (let ((?x35 (* a00 d00)))
 (let (($x2098 (= (+ ?x35 ?x114 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3))) 0)))
 (let (($x900 (and $x2098 (= (+ (* b00 d!1) (* (- 1) (* d00 b!2))) 0) $x916 $x1540)))
 (let ((?x1095 (* (/ 1.0 4.0) (* ?x1010 ?x1010 ?x1017 ?x1017 ?x1017 ?x767 ?x73))))
 (let ((?x1090 (* (- (/ 1.0 8.0)) (* ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017 ?x69))))
 (let ((?x349 (* (/ 1.0 8.0) (* ?x1010 ?x1013 ?x1013 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x73))))
 (let ((?x261 (* (- (/ 1.0 16.0)) (* ?x1010 ?x1010 ?x1013 ?x1013 ?x1017 ?x1017 ?x767 ?x767 ?x69))))
 (let ((?x332 (* (- (/ 1.0 8.0)) (* ?x1010 ?x1013 ?x1013 ?x1017 ?x1017 ?x1017 ?x767 ?x767 ?x767))))
 (let ((?x768 (* (/ 1.0 16.0) (* ?x1010 ?x1010 ?x1013 ?x1013 ?x1013 ?x1017 ?x1017 ?x767 ?x767))))
 (let ((?x925 (* (- (/ 1.0 4.0)) (* ?x1010 ?x1010 ?x1017 ?x1017 ?x1017 ?x1017 ?x767))))
 (let ((?x1903 (+ ?x1020 ?x925 ?x768 (* (/ 1.0 64.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013)) ?x332 (* (/ 3.0 32.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1017)) ?x261 (* (- (/ 1.0 32.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1017 ?x767)) ?x349 (* (/ 3.0 16.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1017 ?x1017)) ?x1090 (* (- (/ 3.0 16.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x767)) ?x1095 (* (- (/ 3.0 8.0)) (* ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x1017 ?x767)) (* (/ 1.0 64.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1013 ?x767 ?x767)) (* (/ 1.0 32.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x767 ?x767 ?x767)) (* (/ 1.0 64.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x767 ?x767 ?x767 ?x767)) (* (/ 1.0 16.0) (* ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1013 ?x1017 ?x767 ?x767)) (* (/ 3.0 32.0) (* ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1017 ?x767 ?x767 ?x767)) (* (- (/ 1.0 32.0)) (* ?x1010 ?x1010 ?x1010 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x767)) (* (- (/ 3.0 16.0)) (* ?x1010 ?x1010 ?x1013 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x767)) (* (- (/ 1.0 8.0)) (* ?x1010 ?x1010 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x767)) (* (- (/ 1.0 4.0)) (* ?x1010 ?x1013 ?x1017 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x767)) (* (- (/ 1.0 8.0)) (* ?x1010 ?x1017 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x767)) (* (- (/ 1.0 64.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x767 ?x767 ?x69)) (* (- (/ 1.0 32.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1013 ?x767 ?x767 ?x767 ?x69)) (* (- (/ 1.0 64.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x767 ?x767 ?x767 ?x767 ?x69)) (* (- (/ 1.0 16.0)) (* ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x1017 ?x767 ?x767 ?x69)) (* (- (/ 1.0 8.0)) (* ?x1010 ?x1010 ?x1010 ?x1013 ?x1017 ?x767 ?x767 ?x767 ?x69)) (* (- (/ 1.0 16.0)) (* ?x1010 ?x1010 ?x1010 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x69)) (* (- (/ 1.0 8.0)) (* ?x1010 ?x1010 ?x1013 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x69)) (* (- (/ 1.0 16.0)) (* ?x1010 ?x1010 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x69)) (* (/ 1.0 32.0) (* ?x1010 ?x1010 ?x1010 ?x1013 ?x1013 ?x767 ?x767 ?x767 ?x73)) (* (/ 1.0 16.0) (* ?x1010 ?x1010 ?x1010 ?x1013 ?x767 ?x767 ?x767 ?x767 ?x73)) (* (/ 1.0 32.0) (* ?x1010 ?x1010 ?x1010 ?x767 ?x767 ?x767 ?x767 ?x767 ?x73)) (* (/ 1.0 8.0) (* ?x1010 ?x1010 ?x1013 ?x1013 ?x1017 ?x767 ?x767 ?x767 ?x73)) (* (/ 1.0 4.0) (* ?x1010 ?x1010 ?x1013 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x73)) (* (/ 1.0 8.0) (* ?x1010 ?x1010 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x767 ?x73)) (* (/ 1.0 4.0) (* ?x1010 ?x1013 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x73)) (* (/ 1.0 8.0) (* ?x1010 ?x1017 ?x1017 ?x767 ?x767 ?x767 ?x767 ?x767 ?x73)) (* (- (/ 1.0 64.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x69)) (* (- (/ 3.0 32.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x1017 ?x69)) (* (- (/ 3.0 16.0)) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x69)) (* (/ 1.0 32.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1010 ?x767 ?x73)) (* (/ 3.0 16.0) (* ?x1010 ?x1010 ?x1010 ?x1010 ?x1017 ?x767 ?x73)) (* (/ 3.0 8.0) (* ?x1010 ?x1010 ?x1010 ?x1017 ?x1017 ?x767 ?x73)))))
 (let (($x1913 (or (not (= (+ ?x1020 ?x925 ?x768 ?x332 ?x261 ?x349 ?x1090 ?x1095) 0.0)) (not (= ?x1903 0.0)))))
 (let ((?x1007 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x1731 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x114 (* 2 (* y!0 b00))) 0)))
 (let (($x1919 (and $x1731 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x1007 0) $x1913)))
 (let (($x2167 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x73 (to_real y00)))
 (let ((?x62 (to_real b)))
 (let ((?x60 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x1883 (* (/ 1.0 4.0) (* ?x56 (to_real a) ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1880 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) ?x60 ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1861 (* (/ 1.0 8.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x60 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1874 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1871 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1695 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 (to_real a00)))))
 (let ((?x69 (to_real a00)))
 (let ((?x59 (to_real a)))
 (let ((?x399 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x62 ?x73))))
 (let ((?x374 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x69))))
 (let ((?x339 (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x314 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x60 ?x60 ?x62 ?x62 ?x69))))
 (let ((?x276 (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x62 ?x62 ?x62))))
 (let ((?x240 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x60 ?x60 ?x62 ?x62))))
 (let ((?x221 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x177 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x60 ?x60 ?x60))))
 (let ((?x2159 (+ ?x177 ?x221 ?x240 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) ?x276 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x60)) ?x314 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x62)) ?x339 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x60)) ?x374 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x62)) ?x399 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x60 ?x62 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x59 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x60 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x62 ?x62 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x60 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x60 ?x60 ?x62 ?x62 ?x62 ?x69)) ?x1695 ?x1871 ?x1874 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x73)) ?x1861 ?x1880 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62 ?x73)) ?x1883 (* (/ 1.0 8.0) (* ?x56 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62 ?x73)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x69)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x69)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x69)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x73)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x73)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x62 ?x73)))))
 (let (($x2165 (or (not (= (+ ?x177 ?x221 ?x240 ?x276 ?x314 ?x339 ?x374 ?x399) 0.0)) (not (= ?x2159 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x181 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x113 (* b00 y00)))
 (let ((?x114 (* (- 2) ?x113)))
 (let ((?x35 (* a00 d00)))
 (let (($x146 (= (+ ?x35 (* (- 1) (* a d00)) ?x114 (* 2 (* y b00))) 0)))
 (and $x146 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x181 0) $x2165))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x1275 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x60 (to_real y)))
 (let ((?x886 (+ ?x60 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x73 (to_real y00)))
 (let ((?x59 (to_real a)))
 (let ((?x803 (+ ?x59 ?x62)))
 (let ((?x813 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886))))
 (let ((?x762 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x803 ?x886 ?x886 ?x886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62 ?x886 ?x886 ?x886 ?x886)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886 ?x886)) ?x813 (* (/ 1.0 8.0) (* ?x73 ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x56 ?x56 ?x56 ?x886 ?x886 ?x886)) (* (/ 1.0 4.0) (* ?x73 ?x56 ?x56 ?x62 ?x886 ?x886 ?x886)))))
 (let ((?x2034 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59))))
 (let ((?x795 (+ (* (/ 1.0 8.0) (* ?x60 ?x60 ?x60 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)) (* (/ 1.0 16.0) (* ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x60 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) ?x2034 (* (/ 1.0 8.0) (* ?x73 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x60 ?x60 ?x60 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x73 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)))))
 (let (($x917 (or (not (= ?x795 0.0)) (not (= ?x762 0.0)))))
 (let ((?x566 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1571 (= ?x566 0)))
 (let ((?x677 (* d00 a)))
 (let ((?x2085 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x677)))
 (and (= ?x2085 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1571 $x917))))))))))))))))) :qid k!33))
 ))
 (let ((?x2003 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x73 (to_real y00)))
 (let ((?x62 (to_real b)))
 (let ((?x60 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x1883 (* (/ 1.0 4.0) (* ?x56 (to_real a) ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1880 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) ?x60 ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1861 (* (/ 1.0 8.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x60 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1874 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) ?x62 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1871 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x62 ?x62 ?x62 ?x73))))
 (let ((?x1695 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 (to_real a00)))))
 (let ((?x69 (to_real a00)))
 (let ((?x59 (to_real a)))
 (let ((?x399 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x62 ?x73))))
 (let ((?x374 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x69))))
 (let ((?x339 (* (/ 1.0 8.0) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x62 ?x62 ?x62 ?x73))))
 (let ((?x314 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x60 ?x60 ?x62 ?x62 ?x69))))
 (let ((?x276 (* (- (/ 1.0 8.0)) (* ?x56 ?x59 ?x59 ?x60 ?x60 ?x60 ?x62 ?x62 ?x62))))
 (let ((?x240 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x60 ?x60 ?x62 ?x62))))
 (let ((?x221 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x60 ?x60 ?x60 ?x60 ?x62))))
 (let ((?x177 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x60 ?x60 ?x60))))
 (let ((?x2159 (+ ?x177 ?x221 ?x240 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) ?x276 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x60)) ?x314 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x62)) ?x339 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x60 ?x60)) ?x374 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x62)) ?x399 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x60 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x62)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x60 ?x62 ?x62)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x62 ?x62 ?x62)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x59 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x60 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x62 ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x60 ?x62 ?x62 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x60 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x60 ?x60 ?x62 ?x62 ?x62 ?x69)) ?x1695 ?x1871 ?x1874 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 ?x62 ?x62 ?x62 ?x73)) ?x1861 ?x1880 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62 ?x73)) ?x1883 (* (/ 1.0 8.0) (* ?x56 ?x60 ?x60 ?x62 ?x62 ?x62 ?x62 ?x62 ?x73)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x56 ?x69)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x60 ?x69)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x69)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x73)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x62 ?x73)) (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x62 ?x73)))))
 (let (($x2165 (or (not (= (+ ?x177 ?x221 ?x240 ?x276 ?x314 ?x339 ?x374 ?x399) 0.0)) (not (= ?x2159 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x181 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x113 (* b00 y00)))
 (let ((?x114 (* (- 2) ?x113)))
 (let ((?x35 (* a00 d00)))
 (let (($x146 (= (+ ?x35 (* (- 1) (* a d00)) ?x114 (* 2 (* y b00))) 0)))
 (let (($x201 (and $x146 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x181 0) $x2165)))
 (let ((?x886 (+ ?x60 (* (/ 1.0 2.0) ?x56))))
 (let ((?x844 (* (/ 1.0 8.0) (* ?x73 ?x56 ?x62 ?x62 ?x62 (+ ?x59 ?x62) (+ ?x59 ?x62) ?x886 ?x886))))
 (let ((?x813 (* (- (/ 1.0 16.0)) (* ?x69 ?x56 ?x56 ?x62 ?x62 (+ ?x59 ?x62) (+ ?x59 ?x62) ?x886 ?x886))))
 (let ((?x1229 (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 (+ ?x59 ?x62) (+ ?x59 ?x62) ?x886 ?x886 ?x886))))
 (let ((?x803 (+ ?x59 ?x62)))
 (let ((?x762 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x803 ?x886 ?x886 ?x886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62 ?x886 ?x886 ?x886 ?x886)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x803 ?x886 ?x886)) ?x1229 ?x813 ?x844 (* (- (/ 1.0 8.0)) (* ?x69 ?x56 ?x56 ?x56 ?x886 ?x886 ?x886)) (* (/ 1.0 4.0) (* ?x73 ?x56 ?x56 ?x62 ?x886 ?x886 ?x886)))))
 (let ((?x795 (+ (* (/ 1.0 8.0) (* ?x60 ?x60 ?x60 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)) (* (/ 1.0 16.0) (* ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x60 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x69 ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59)) (* (/ 1.0 8.0) (* ?x73 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x69 ?x60 ?x60 ?x60 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x73 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)))))
 (let (($x917 (or (not (= ?x795 0.0)) (not (= ?x762 0.0)))))
 (let ((?x566 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1571 (= ?x566 0)))
 (let ((?x677 (* d00 a)))
 (let (($x1183 (= (+ (* 2 ?x113) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x677) 0)))
 (let (($x1562 (and $x1183 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1571 $x917)))
 (rewrite (= $x1562 $x201)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x919 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x60 (to_real y)))
 (let ((?x886 (+ ?x60 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x73 (to_real y00)))
 (let ((?x59 (to_real a)))
 (let ((?x803 (+ ?x59 ?x62)))
 (let ((?x813 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886))))
 (let ((?x762 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x803 ?x886 ?x886 ?x886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62 ?x886 ?x886 ?x886 ?x886)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886 ?x886)) ?x813 (* (/ 1.0 8.0) (* ?x73 ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x56 ?x56 ?x56 ?x886 ?x886 ?x886)) (* (/ 1.0 4.0) (* ?x73 ?x56 ?x56 ?x62 ?x886 ?x886 ?x886)))))
 (let ((?x2034 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59))))
 (let ((?x795 (+ (* (/ 1.0 8.0) (* ?x60 ?x60 ?x60 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)) (* (/ 1.0 16.0) (* ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x60 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) ?x2034 (* (/ 1.0 8.0) (* ?x73 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x60 ?x60 ?x60 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x73 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)))))
 (let (($x917 (or (not (= ?x795 0.0)) (not (= ?x762 0.0)))))
 (let ((?x566 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1571 (= ?x566 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x113 (* b00 y00)))
 (let ((?x114 (* (- 2) ?x113)))
 (let (($x696 (= (+ ?x114 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x696 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1571 $x917))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1231 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x60 (to_real y)))
 (let ((?x886 (+ ?x60 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x73 (to_real y00)))
 (let ((?x59 (to_real a)))
 (let ((?x803 (+ ?x59 ?x62)))
 (let ((?x813 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886))))
 (let ((?x762 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x803 ?x886 ?x886 ?x886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62 ?x886 ?x886 ?x886 ?x886)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886 ?x886)) ?x813 (* (/ 1.0 8.0) (* ?x73 ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x56 ?x56 ?x56 ?x886 ?x886 ?x886)) (* (/ 1.0 4.0) (* ?x73 ?x56 ?x56 ?x62 ?x886 ?x886 ?x886)))))
 (let ((?x2034 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59))))
 (let ((?x795 (+ (* (/ 1.0 8.0) (* ?x60 ?x60 ?x60 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)) (* (/ 1.0 16.0) (* ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x60 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) ?x2034 (* (/ 1.0 8.0) (* ?x73 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x60 ?x60 ?x60 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x73 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)))))
 (let (($x917 (or (not (= ?x795 0.0)) (not (= ?x762 0.0)))))
 (let ((?x566 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1571 (= ?x566 0)))
 (let ((?x677 (* d00 a)))
 (let ((?x2085 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x677)))
 (let (($x1562 (and (= ?x2085 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1571 $x917)))
 (let ((?x35 (* a00 d00)))
 (let ((?x113 (* b00 y00)))
 (let ((?x114 (* (- 2) ?x113)))
 (let (($x1741 (and (= (+ ?x114 ?x35 (* 2 (* b00 y)) (* (- 1) ?x677)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1571 $x917)))
 (rewrite (= $x1741 $x1562))))))))))))))))))))))))
 ))
 (let (($x105 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x80 (to_real 0)))
 (let ((?x73 (to_real y00)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x60 (to_real y)))
 (let ((?x84 (+ ?x60 ?x58)))
 (let ((?x62 (to_real b)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x85 (to_real (+ a b))))
 (let ((?x88 (- (* ?x85 ?x58 ?x58 ?x58 ?x84 ?x84 ?x84) (* ?x57 ?x63 ?x58 ?x58 ?x84 ?x84 ?x84 ?x84))))
 (let ((?x93 (- (+ ?x88 (* ?x85 ?x85 ?x85 ?x63 ?x63 ?x58 ?x58 ?x84 ?x84)) (* ?x57 ?x85 ?x85 ?x63 ?x63 ?x63 ?x58 ?x84 ?x84 ?x84))))
 (let ((?x94 (- ?x93 (* ?x85 ?x85 (to_real a00) ?x63 ?x63 ?x58 ?x58 ?x84 ?x84))))
 (let ((?x98 (- (+ ?x94 (* ?x57 ?x85 ?x85 ?x63 ?x63 ?x63 ?x58 ?x84 ?x84 ?x73)) (* (to_real a00) ?x58 ?x58 ?x58 ?x84 ?x84 ?x84))))
 (let (($x102 (not (= (+ ?x98 (* ?x57 ?x63 ?x58 ?x58 ?x84 ?x84 ?x84 ?x73)) ?x80))))
 (let ((?x59 (to_real a)))
 (let ((?x65 (- (* ?x59 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60) (* ?x57 ?x63 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x71 (- (+ ?x65 (* ?x59 ?x59 ?x59 ?x63 ?x63 ?x58 ?x58 ?x60 ?x60)) (* ?x57 ?x59 ?x59 ?x63 ?x63 ?x63 ?x58 ?x60 ?x60 ?x60))))
 (let ((?x72 (- ?x71 (* ?x59 ?x59 (to_real a00) ?x63 ?x63 ?x58 ?x58 ?x60 ?x60))))
 (let ((?x77 (- (+ ?x72 (* ?x57 ?x59 ?x59 ?x63 ?x63 ?x63 ?x58 ?x60 ?x60 ?x73)) (* (to_real a00) ?x58 ?x58 ?x58 ?x60 ?x60 ?x60))))
 (let (($x82 (not (= (+ ?x77 (* ?x57 ?x63 ?x58 ?x58 ?x60 ?x60 ?x60 ?x73)) ?x80))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or $x82 $x102))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x324 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x60 (to_real y)))
 (let ((?x886 (+ ?x60 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x73 (to_real y00)))
 (let ((?x59 (to_real a)))
 (let ((?x803 (+ ?x59 ?x62)))
 (let ((?x813 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886))))
 (let ((?x762 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x803 ?x886 ?x886 ?x886)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x62 ?x886 ?x886 ?x886 ?x886)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x803 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886 ?x886)) ?x813 (* (/ 1.0 8.0) (* ?x73 ?x56 ?x62 ?x62 ?x62 ?x803 ?x803 ?x886 ?x886)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x56 ?x56 ?x56 ?x886 ?x886 ?x886)) (* (/ 1.0 4.0) (* ?x73 ?x56 ?x56 ?x62 ?x886 ?x886 ?x886)))))
 (let ((?x2034 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59))))
 (let ((?x795 (+ (* (/ 1.0 8.0) (* ?x60 ?x60 ?x60 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 4.0)) (* ?x60 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)) (* (/ 1.0 16.0) (* ?x60 ?x60 ?x56 ?x56 ?x62 ?x62 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x60 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) ?x2034 (* (/ 1.0 8.0) (* ?x73 ?x60 ?x60 ?x56 ?x62 ?x62 ?x62 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x60 ?x60 ?x60 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x73 ?x60 ?x60 ?x60 ?x56 ?x56 ?x62)))))
 (let (($x917 (or (not (= ?x795 0.0)) (not (= ?x762 0.0)))))
 (let ((?x566 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1571 (= ?x566 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x113 (* b00 y00)))
 (let ((?x114 (* (- 2) ?x113)))
 (let (($x696 (= (+ ?x114 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x1741 (and $x696 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1571 $x917)))
 (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (+ ?x60 ?x58)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x85 (to_real (+ a b))))
 (let ((?x88 (- (* ?x85 ?x58 ?x58 ?x58 ?x84 ?x84 ?x84) (* ?x57 ?x63 ?x58 ?x58 ?x84 ?x84 ?x84 ?x84))))
 (let ((?x93 (- (+ ?x88 (* ?x85 ?x85 ?x85 ?x63 ?x63 ?x58 ?x58 ?x84 ?x84)) (* ?x57 ?x85 ?x85 ?x63 ?x63 ?x63 ?x58 ?x84 ?x84 ?x84))))
 (let ((?x94 (- ?x93 (* ?x85 ?x85 (to_real a00) ?x63 ?x63 ?x58 ?x58 ?x84 ?x84))))
 (let ((?x98 (- (+ ?x94 (* ?x57 ?x85 ?x85 ?x63 ?x63 ?x63 ?x58 ?x84 ?x84 ?x73)) (* (to_real a00) ?x58 ?x58 ?x58 ?x84 ?x84 ?x84))))
 (let (($x102 (not (= (+ ?x98 (* ?x57 ?x63 ?x58 ?x58 ?x84 ?x84 ?x84 ?x73)) ?x80))))
 (let ((?x65 (- (* ?x59 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60) (* ?x57 ?x63 ?x58 ?x58 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x71 (- (+ ?x65 (* ?x59 ?x59 ?x59 ?x63 ?x63 ?x58 ?x58 ?x60 ?x60)) (* ?x57 ?x59 ?x59 ?x63 ?x63 ?x63 ?x58 ?x60 ?x60 ?x60))))
 (let ((?x72 (- ?x71 (* ?x59 ?x59 (to_real a00) ?x63 ?x63 ?x58 ?x58 ?x60 ?x60))))
 (let ((?x77 (- (+ ?x72 (* ?x57 ?x59 ?x59 ?x63 ?x63 ?x63 ?x58 ?x60 ?x60 ?x73)) (* (to_real a00) ?x58 ?x58 ?x58 ?x60 ?x60 ?x60))))
 (let (($x82 (not (= (+ ?x77 (* ?x57 ?x63 ?x58 ?x58 ?x60 ?x60 ?x60 ?x73)) ?x80))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x104 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or $x82 $x102))))
 (rewrite (= $x104 $x1741)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x106 (asserted $x105)))
 (let ((@x1560 (mp (mp @x106 (quant-intro (proof-bind ?x324) (= $x105 $x919)) $x919) (rewrite (= $x919 $x919)) $x919)))
 (let ((@x1522 (mp (mp @x1560 (quant-intro (proof-bind ?x1231) (= $x919 $x1275)) $x1275) (quant-intro (proof-bind ?x2003) (= $x1275 $x2167)) $x2167)))
 (let ((@x1544 (mp (mp~ @x1522 (sk (~ $x2167 $x1919)) $x1919) (rewrite (= $x1919 $x900)) $x900)))
 (let ((@x834 (mp (and-elim @x1544 $x916) @x461 $x889)))
 (let ((@x877 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x889) $x2033)) @x834 $x2033)))
 (let (($x761 (<= ?x2113 0)))
 (let ((@x840 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x889) $x761)) @x834 $x761)))
 (let ((@x876 (unit-resolution ((_ th-lemma arith) (or $x1570 (not $x2033) (not $x761))) @x840 @x877 (hypothesis (not $x1570)) false)))
 (let ((@x880 (lemma @x876 $x1570)))
 (let (($x888 (<= ?x936 0.0)))
 (let ((@x2049 (unit-resolution ((_ th-lemma arith) (or $x888 (not $x2033) (not $x761))) @x840 @x877 (hypothesis (not $x888)) false)))
 (let ((@x2086 (lemma @x2049 $x888)))
 (let (($x362 (<= ?x1178 0.0)))
 (let (($x881 (not $x362)))
 (let (($x2077 (>= ?x1178 0.0)))
 (let ((@x640 (unit-resolution ((_ th-lemma arith) (or (not $x888) (not $x1570) $x2077 (not $x2033) (not $x761))) @x840 @x877 (hypothesis (not $x2077)) @x2086 @x880 false)))
 (let (($x853 (= 0.0 ?x1178)))
 (let (($x179 (not $x853)))
 (let ((@x184 (monotonicity (symm (commutativity (= $x853 $x1001)) (= $x1001 $x853)) (= $x908 $x179))))
 (let (($x464 (= ?x936 0.0)))
 (let (($x1280 (= 0.0 ?x936)))
 (let ((@x2089 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1280 (not $x888) (not $x1570))) @x880 (or $x1280 (not $x888)))))
 (let ((@x2158 (mp (unit-resolution @x2089 @x2086 $x1280) (commutativity (= $x1280 $x464)) $x464)))
 (let ((@x191 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x853 $x881 (not $x2077))) (mp (unit-resolution (and-elim @x1544 $x1540) @x2158 $x908) @x184 $x179) (or $x881 (not $x2077)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x888) (not $x1570) $x362 (not $x2033) (not $x761))) @x840 @x877 (unit-resolution @x191 (lemma @x640 $x2077) $x881) @x2086 @x880 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       30
 :arith-eq-adapter                34
 :arith-bound-propagations-cheap  29
 :arith-bound-propagations-lp     5
 :arith-conflicts                 85
 :arith-diseq                     41
 :arith-gcd-calls                 5
 :arith-grobner-calls             4
 :arith-grobner-conflicts         4
 :arith-horner-calls              4
 :arith-horner-cross-nested-forms 8
 :arith-lower                     57
 :arith-make-feasible             69
 :arith-max-columns               85
 :arith-max-rows                  11
 :arith-nla-explanations          88
 :arith-nla-lemmas                84
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              29
 :arith-upper                     60
 :conflicts                       9
 :decisions                       104
 :del-clause                      113
 :final-checks                    28
 :max-memory                      5.07
 :memory                          3.31
 :mk-bool-var                     216
 :mk-clause                       166
 :num-allocs                      18501031
 :num-checks                      1
 :propagations                    74
 :rlimit-count                    9754
 :time                            0.04
 :total-time                      0.05)
