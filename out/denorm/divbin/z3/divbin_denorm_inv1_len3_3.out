unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x86 (* b00 x00)))
 (let ((?x534 (to_real ?x86)))
 (let ((?x990 (+ ?x534 ?x149)))
 (let (($x130 (<= ?x990 0.0)))
 (let (($x137 (= 0.0 ?x990)))
 (let ((@x161 (symm (commutativity (= $x137 (= ?x990 0.0))) (= (= ?x990 0.0) $x137))))
 (let ((@x167 (unit-resolution (hypothesis (not $x137)) (mp ((_ th-lemma arith) (= ?x990 0.0)) @x161 $x137) false)))
 (let ((@x168 (lemma @x167 $x137)))
 (let ((@x92 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x137) $x130)) @x168 $x130)))
 (let (($x225 (>= ?x990 0.0)))
 (let ((@x185 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x137) $x225)) @x168 $x225)))
 (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x177 (to_real b!2)))
 (let ((?x176 (to_real x!0)))
 (let ((?x640 (* ?x176 ?x177)))
 (let ((?x266 (to_real r!1)))
 (let ((?x518 (+ ?x149 ?x266 ?x640 ?x135)))
 (let (($x646 (>= ?x518 0.0)))
 (let ((?x565 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x640)))
 (let (($x134 (>= ?x565 0.0)))
 (let (($x569 (= 0.0 ?x565)))
 (let ((@x605 (symm (commutativity (= $x569 (= ?x565 0.0))) (= (= ?x565 0.0) $x569))))
 (let ((@x608 (mp ((_ th-lemma arith) (= ?x565 0.0)) @x605 $x569)))
 (let ((?x500 (+ r00 ?x86 (* (- 1) r!1) (* (- 1) (* b!2 x!0)))))
 (let (($x415 (<= ?x500 0)))
 (let (($x510 (= 0 ?x500)))
 (let ((@x428 (symm (commutativity (= $x510 (= ?x500 0))) (= (= ?x500 0) $x510))))
 (let (($x501 (= ?x500 0)))
 (let ((?x981 (* (- (/ 1.0 4.0)) (* ?x177 ?x177))))
 (let ((?x753 (* (- 1.0) (* ?x266 ?x266 ?x266))))
 (let ((?x861 (* (/ 1.0 8.0) (* ?x177 ?x177 ?x177))))
 (let ((?x879 (* (- (/ 3.0 4.0)) (* ?x177 ?x177 ?x266))))
 (let ((?x874 (* (/ 3.0 2.0) (* ?x177 ?x266 ?x266))))
 (let ((?x770 (* (- 4.0) (* ?x176 ?x176 ?x266 ?x266 ?x266))))
 (let ((?x688 (* (- (/ 3.0 16.0)) (* ?x177 ?x177 ?x177 ?x177 ?x266))))
 (let ((?x612 (* (/ 1.0 32.0) (* ?x177 ?x177 ?x177 ?x177 ?x177))))
 (let ((?x292 (* (- 4.0) (* ?x176 ?x266 ?x266 ?x266))))
 (let ((?x461 (* (- (/ 1.0 4.0)) (* ?x177 ?x177 ?x266 ?x266 ?x266))))
 (let ((?x138 (* (/ 3.0 8.0) (* ?x177 ?x177 ?x177 ?x266 ?x266))))
 (let ((?x356 (* (/ 1.0 2.0) (* ?x177 ?x266))))
 (let ((?x626 (+ ?x356 (* (- (/ 3.0 4.0)) (* ?x176 ?x177 ?x177 ?x177 ?x177 ?x266)) (* (- 1.0) (* ?x176 ?x176 ?x177 ?x177 ?x266 ?x266 ?x266)) (* (/ 1.0 8.0) (* ?x176 ?x176 ?x177 ?x177 ?x177 ?x177 ?x177)) ?x138 ?x461 (* 6.0 (* ?x176 ?x176 ?x177 ?x266 ?x266)) (* (/ 1.0 2.0) (* ?x176 ?x177 ?x177 ?x177)) (* 2.0 (* ?x176 ?x176 ?x177 ?x266)) (* (- 3.0) (* ?x176 ?x177 ?x177 ?x266)) (* 6.0 (* ?x176 ?x177 ?x266 ?x266)) (* (/ 1.0 2.0) (* ?x176 ?x176 ?x177 ?x177 ?x177)) (* (- 3.0) (* ?x176 ?x176 ?x177 ?x177 ?x266)) (* (/ 1.0 8.0) (* ?x176 ?x177 ?x177 ?x177 ?x177 ?x177)) (* 2.0 (* ?x176 ?x177 ?x266)) (* (/ 3.0 2.0) (* ?x176 ?x177 ?x177 ?x177 ?x266 ?x266)) (* (- 1.0) (* ?x176 ?x177 ?x177)) ?x292 (* (- 1.0) (* ?x176 ?x177 ?x177 ?x266 ?x266 ?x266)) (* (- (/ 3.0 4.0)) (* ?x176 ?x176 ?x177 ?x177 ?x177 ?x177 ?x266)) (* (- 1.0) (* ?x176 ?x176 ?x177 ?x177)) ?x612 ?x688 (* (/ 3.0 2.0) (* ?x176 ?x176 ?x177 ?x177 ?x177 ?x266 ?x266)) ?x770 ?x874 ?x879 ?x861 ?x753 ?x981)))
 (let (($x634 (= (* ?x626 (+ ?x135 ?x149 ?x266 ?x640)) 0.0)))
 (let (($x661 (not $x634)))
 (let ((?x411 (* (- 4.0) (* ?x176 ?x176 ?x266 ?x266 ?x266 ?x266))))
 (let ((?x423 (+ (* 2.0 (* ?x176 ?x176 ?x176 ?x177 ?x177 ?x266)) (* 4.0 (* ?x144 ?x145 ?x176 ?x176 ?x266 ?x266 ?x266)) (* (- 1.0) (* ?x176 ?x176 ?x176 ?x177 ?x177 ?x177 ?x266 ?x266 ?x266)) ?x411 (* (- 2.0) (* ?x61 ?x176 ?x176 ?x177 ?x266)) (* 2.0 (* ?x176 ?x176 ?x177 ?x266 ?x266)) (* (- 2.0) (* ?x144 ?x145 ?x176 ?x176 ?x177 ?x266)) (* 4.0 (* ?x61 ?x176 ?x176 ?x266 ?x266 ?x266)) (* (- 4.0) (* ?x176 ?x176 ?x176 ?x177 ?x266 ?x266 ?x266)) (* (- 1.0) (* ?x176 ?x176 ?x177 ?x177 ?x266 ?x266 ?x266 ?x266)) (* ?x61 ?x176 ?x176 ?x177 ?x177 ?x266 ?x266 ?x266) (* ?x144 ?x145 ?x176 ?x176 ?x177 ?x177 ?x266 ?x266 ?x266))))
 (let (($x573 (= ?x423 0.0)))
 (let (($x516 (not $x573)))
 (let (($x635 (or $x516 $x661)))
 (let (($x158 (and $x501 $x635)))
 (let ((?x477 (+ ?x770 (* (- 1.0) (* ?x177 ?x177 ?x176 ?x176 ?x266 ?x266 ?x266)) (* 6.0 (* ?x177 ?x176 ?x176 ?x266 ?x266)) ?x861 ?x879 ?x874 ?x753 (* (/ 1.0 2.0) (* ?x177 ?x177 ?x177 ?x176)) (* (- 3.0) (* ?x177 ?x177 ?x176 ?x266)) (* 6.0 (* ?x177 ?x176 ?x266 ?x266)) ?x292 (* (/ 1.0 2.0) (* ?x177 ?x177 ?x177 ?x176 ?x176)) (* (- 3.0) (* ?x177 ?x177 ?x176 ?x176 ?x266)) ?x356 ?x981 ?x612 ?x688 (* 2.0 (* ?x177 ?x176 ?x176 ?x266)) ?x138 ?x461 (* (/ 1.0 8.0) (* ?x177 ?x177 ?x177 ?x177 ?x177 ?x176)) (* (- (/ 3.0 4.0)) (* ?x177 ?x177 ?x177 ?x177 ?x176 ?x266)) (* 2.0 (* ?x177 ?x176 ?x266)) (* (/ 3.0 2.0) (* ?x177 ?x177 ?x177 ?x176 ?x266 ?x266)) (* (- 1.0) (* ?x177 ?x177 ?x176)) (* (- 1.0) (* ?x177 ?x177 ?x176 ?x266 ?x266 ?x266)) (* (/ 1.0 8.0) (* ?x177 ?x177 ?x177 ?x177 ?x177 ?x176 ?x176)) (* (- (/ 3.0 4.0)) (* ?x177 ?x177 ?x177 ?x177 ?x176 ?x176 ?x266)) (* (/ 3.0 2.0) (* ?x177 ?x177 ?x177 ?x176 ?x176 ?x266 ?x266)) (* (- 1.0) (* ?x177 ?x177 ?x176 ?x176)))))
 (let ((?x275 (+ (* 2.0 (* ?x177 ?x176 ?x176 ?x266 ?x266)) (* (- 2.0) (* ?x177 ?x176 ?x176 ?x266 ?x61)) (* (- 2.0) (* ?x177 ?x176 ?x176 ?x266 ?x144 ?x145)) (* 2.0 (* ?x177 ?x177 ?x176 ?x176 ?x176 ?x266)) ?x411 (* 4.0 (* ?x176 ?x176 ?x266 ?x266 ?x266 ?x61)) (* 4.0 (* ?x176 ?x176 ?x266 ?x266 ?x266 ?x144 ?x145)) (* (- 4.0) (* ?x177 ?x176 ?x176 ?x176 ?x266 ?x266 ?x266)) (* (- 1.0) (* ?x177 ?x177 ?x176 ?x176 ?x266 ?x266 ?x266 ?x266)) (* ?x177 ?x177 ?x176 ?x176 ?x266 ?x266 ?x266 ?x61) (* ?x177 ?x177 ?x176 ?x176 ?x266 ?x266 ?x266 ?x144 ?x145) (* (- 1.0) (* ?x177 ?x177 ?x177 ?x176 ?x176 ?x176 ?x266 ?x266 ?x266)))))
 (let (($x486 (or (not (= ?x275 0.0)) (not (= (* ?x477 (+ ?x266 ?x135 ?x149 (* ?x177 ?x176))) 0.0)))))
 (let (($x511 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x86)) 0) $x486)))
 (let (($x789 (exists ((b Int) (r Int) (x Int) )(! (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x47 (to_real r)))
 (let ((?x898 (* (- 1.0) (* (to_real b) (to_real b) (to_real x) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x1079 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47))))
 (let ((?x1076 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47))))
 (let ((?x1073 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x1007 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x1070 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47))))
 (let ((?x1067 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47))))
 (let ((?x1064 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43))))
 (let ((?x1061 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x1058 (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x1054 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x1050 (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x724 (* (- 3.0) (* ?x40 ?x40 ?x43 ?x43 ?x47))))
 (let ((?x721 (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x718 (* (- 4.0) (* ?x43 ?x47 ?x47 ?x47))))
 (let ((?x715 (* 6.0 (* ?x40 ?x43 ?x47 ?x47))))
 (let ((?x712 (* (- 3.0) (* ?x40 ?x40 ?x43 ?x47))))
 (let ((?x708 (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43))))
 (let ((?x680 (* (- 1.0) (* ?x47 ?x47 ?x47))))
 (let ((?x705 (* (/ 3.0 2.0) (* ?x40 ?x47 ?x47))))
 (let ((?x701 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x47))))
 (let ((?x697 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40))))
 (let ((?x284 (* ?x40 ?x43 ?x43 ?x47 ?x47)))
 (let ((?x693 (* 6.0 ?x284)))
 (let ((?x249 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x227 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x322 (+ ?x227 ?x249 ?x693 ?x697 ?x701 ?x705 ?x680 ?x708 ?x712 ?x715 ?x718 ?x721 ?x724 (* (/ 1.0 2.0) (* ?x40 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40)) ?x1050 ?x1054 (* 2.0 (* ?x40 ?x43 ?x43 ?x47)) ?x1058 ?x1061 ?x1064 ?x1067 (* 2.0 (* ?x40 ?x43 ?x47)) ?x1070 (* (- 1.0) (* ?x40 ?x40 ?x43)) ?x1007 ?x1073 ?x1076 ?x1079 ?x898)))
 (let ((?x390 (+ (* 2.0 ?x284) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x61)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x144 ?x145)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47)) (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x61)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x144 ?x145)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x61) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x144 ?x145) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)))))
 (let (($x114 (not (= ?x390 0.0))))
 (let (($x289 (or $x114 (not (= (* ?x322 (+ ?x47 ?x135 ?x149 (* ?x40 ?x43))) 0.0)))))
 (let (($x122 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x122 $x289))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x832 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x749 (+ ?x149 ?x47 ?x172 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x801 (+ ?x47 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x261 (* 2.0 ?x43)))
 (let ((?x868 (+ 1.0 ?x261)))
 (let ((?x944 (+ (* (/ 1.0 2.0) (* ?x40 ?x868 ?x868 ?x801)) (* (- 1.0) (* ?x868 ?x868 ?x801 ?x801 ?x801)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x868 ?x868 ?x801 ?x801 ?x801)))))
 (let ((?x227 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x875 (+ (* 2.0 (* ?x43 ?x43 ?x47 ?x40)) ?x227 (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x961 (or (not (= (* ?x875 (+ ?x149 ?x47 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x944 ?x749) 0.0)))))
 (let (($x772 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x772 $x961)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x791 (lambda ((b Int) (r Int) (x Int) )(let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x47 (to_real r)))
 (let ((?x898 (* (- 1.0) (* (to_real b) (to_real b) (to_real x) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x1079 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47))))
 (let ((?x1076 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47))))
 (let ((?x1073 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x1007 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x1070 (* (/ 3.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47))))
 (let ((?x1067 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47))))
 (let ((?x1064 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43))))
 (let ((?x1061 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x1058 (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x1054 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x1050 (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x724 (* (- 3.0) (* ?x40 ?x40 ?x43 ?x43 ?x47))))
 (let ((?x721 (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43))))
 (let ((?x718 (* (- 4.0) (* ?x43 ?x47 ?x47 ?x47))))
 (let ((?x715 (* 6.0 (* ?x40 ?x43 ?x47 ?x47))))
 (let ((?x712 (* (- 3.0) (* ?x40 ?x40 ?x43 ?x47))))
 (let ((?x708 (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43))))
 (let ((?x680 (* (- 1.0) (* ?x47 ?x47 ?x47))))
 (let ((?x705 (* (/ 3.0 2.0) (* ?x40 ?x47 ?x47))))
 (let ((?x701 (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x47))))
 (let ((?x697 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40))))
 (let ((?x284 (* ?x40 ?x43 ?x43 ?x47 ?x47)))
 (let ((?x693 (* 6.0 ?x284)))
 (let ((?x249 (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x227 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x322 (+ ?x227 ?x249 ?x693 ?x697 ?x701 ?x705 ?x680 ?x708 ?x712 ?x715 ?x718 ?x721 ?x724 (* (/ 1.0 2.0) (* ?x40 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40)) ?x1050 ?x1054 (* 2.0 (* ?x40 ?x43 ?x43 ?x47)) ?x1058 ?x1061 ?x1064 ?x1067 (* 2.0 (* ?x40 ?x43 ?x47)) ?x1070 (* (- 1.0) (* ?x40 ?x40 ?x43)) ?x1007 ?x1073 ?x1076 ?x1079 ?x898)))
 (let ((?x390 (+ (* 2.0 ?x284) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x61)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x144 ?x145)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47)) (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x61)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x144 ?x145)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x61) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x144 ?x145) (* (- 1.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)))))
 (let (($x114 (not (= ?x390 0.0))))
 (let (($x289 (or $x114 (not (= (* ?x322 (+ ?x47 ?x135 ?x149 (* ?x40 ?x43))) 0.0)))))
 (let (($x122 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x195 (and $x122 $x289)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x749 (+ ?x149 ?x47 ?x172 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x801 (+ ?x47 ?x172)))
 (let ((?x261 (* 2.0 ?x43)))
 (let ((?x868 (+ 1.0 ?x261)))
 (let ((?x944 (+ (* (/ 1.0 2.0) (* ?x40 ?x868 ?x868 ?x801)) (* (- 1.0) (* ?x868 ?x868 ?x801 ?x801 ?x801)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x868 ?x868 ?x801 ?x801 ?x801)))))
 (let ((?x875 (+ (* 2.0 (* ?x43 ?x43 ?x47 ?x40)) ?x227 (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x961 (or (not (= (* ?x875 (+ ?x149 ?x47 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x944 ?x749) 0.0)))))
 (let (($x772 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x846 (and $x772 $x961)))
 (rewrite (= $x846 $x195))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x958 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x749 (+ ?x149 ?x47 ?x172 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x801 (+ ?x47 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x261 (* 2.0 ?x43)))
 (let ((?x868 (+ 1.0 ?x261)))
 (let ((?x944 (+ (* (/ 1.0 2.0) (* ?x40 ?x868 ?x868 ?x801)) (* (- 1.0) (* ?x868 ?x868 ?x801 ?x801 ?x801)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x868 ?x868 ?x801 ?x801 ?x801)))))
 (let ((?x227 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x875 (+ (* 2.0 (* ?x43 ?x43 ?x47 ?x40)) ?x227 (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x961 (or (not (= (* ?x875 (+ ?x149 ?x47 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x944 ?x749) 0.0)))))
 (let (($x727 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x727 $x961)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x841 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x749 (+ ?x149 ?x47 ?x172 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x801 (+ ?x47 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x261 (* 2.0 ?x43)))
 (let ((?x868 (+ 1.0 ?x261)))
 (let ((?x944 (+ (* (/ 1.0 2.0) (* ?x40 ?x868 ?x868 ?x801)) (* (- 1.0) (* ?x868 ?x868 ?x801 ?x801 ?x801)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x868 ?x868 ?x801 ?x801 ?x801)))))
 (let ((?x227 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x875 (+ (* 2.0 (* ?x43 ?x43 ?x47 ?x40)) ?x227 (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x961 (or (not (= (* ?x875 (+ ?x149 ?x47 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x944 ?x749) 0.0)))))
 (let (($x772 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x846 (and $x772 $x961)))
 (let (($x727 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x892 (and $x727 $x961)))
 (rewrite (= $x892 $x846)))))))))))))))))))))))))
 ))
 (let (($x78 (exists ((b Int) (r Int) (x Int) )(! (let ((?x55 (to_real 0)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x47 (to_real r)))
 (let ((?x58 (- ?x47 ?x42)))
 (let ((?x72 (- (- (* ?x42 ?x58 ?x65 ?x65) (* ?x58 ?x58 ?x58 ?x65 ?x65)) (* ?x42 ?x42 ?x58 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) (to_real r00)) (* ?x42 ?x65))))
 (let ((?x52 (- (* ?x42 ?x47 ?x41 (to_real x) ?x41 (to_real x)) (to_real (* r r r 2 x 2 x)))))
 (let ((?x53 (- ?x52 (* ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x53) ?x55)) (not (= (* ?x67 ?x72) ?x55))))))))))))))))) :qid k!28))
 ))
 (let ((?x382 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x135 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x145 (to_real x00)))
 (let ((?x144 (to_real b00)))
 (let ((?x146 (* ?x144 ?x145)))
 (let ((?x149 (* (- 1.0) ?x146)))
 (let ((?x749 (+ ?x149 ?x47 ?x172 ?x135 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x801 (+ ?x47 ?x172)))
 (let ((?x43 (to_real x)))
 (let ((?x261 (* 2.0 ?x43)))
 (let ((?x868 (+ 1.0 ?x261)))
 (let ((?x944 (+ (* (/ 1.0 2.0) (* ?x40 ?x868 ?x868 ?x801)) (* (- 1.0) (* ?x868 ?x868 ?x801 ?x801 ?x801)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x868 ?x868 ?x801 ?x801 ?x801)))))
 (let ((?x227 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x875 (+ (* 2.0 (* ?x43 ?x43 ?x47 ?x40)) ?x227 (* (- 1.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40)))))
 (let (($x961 (or (not (= (* ?x875 (+ ?x149 ?x47 ?x135 (* ?x43 ?x40))) 0.0)) (not (= (* ?x944 ?x749) 0.0)))))
 (let (($x727 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x892 (and $x727 $x961)))
 (let ((?x55 (to_real 0)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x58 (- ?x47 ?x42)))
 (let ((?x72 (- (- (* ?x42 ?x58 ?x65 ?x65) (* ?x58 ?x58 ?x58 ?x65 ?x65)) (* ?x42 ?x42 ?x58 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) ?x61) (* ?x42 ?x65))))
 (let ((?x52 (- (* ?x42 ?x47 ?x41 ?x43 ?x41 ?x43) (to_real (* r r r 2 x 2 x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x56 (= (* ?x46 (- ?x52 (* ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43))) ?x55)))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x77 (and $x38 (or (not $x56) (not (= (* ?x67 ?x72) ?x55))))))
 (rewrite (= $x77 $x892)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x79 (asserted $x78)))
 (let ((@x878 (mp (mp @x79 (quant-intro (proof-bind ?x382) (= $x78 $x958)) $x958) (rewrite (= $x958 $x958)) $x958)))
 (let ((@x980 (mp (mp @x878 (quant-intro (proof-bind ?x841) (= $x958 $x832)) $x832) (quant-intro (proof-bind ?x791) (= $x832 $x789)) $x789)))
 (let ((@x639 (mp (mp~ @x980 (sk (~ $x789 $x511)) $x511) (rewrite (= $x511 $x158)) $x158)))
 (let ((@x590 (mp (and-elim @x639 $x501) @x428 $x510)))
 (let ((@x999 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x510) $x415)) @x590 $x415)))
 (let ((@x1000 ((_ th-lemma arith) @x999 (hypothesis (not $x646)) (hypothesis $x225) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x569) $x134)) @x608 $x134) false)))
 (let ((@x97 (unit-resolution (lemma @x1000 (or (not $x225) $x646)) @x185 $x646)))
 (let (($x645 (<= ?x518 0.0)))
 (let (($x497 (>= ?x500 0)))
 (let ((@x597 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x510) $x497)) @x590 $x497)))
 (let (($x572 (<= ?x565 0.0)))
 (let ((?x528 (+ (* (- 1.0) ?x534) ?x146)))
 (let (($x420 (>= ?x528 0.0)))
 (let (($x553 (= 0.0 ?x528)))
 (let ((@x621 (symm (commutativity (= $x553 (= ?x528 0.0))) (= (= ?x528 0.0) $x553))))
 (let ((@x435 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x553) $x420)) (mp ((_ th-lemma arith) (= ?x528 0.0)) @x621 $x553) $x420)))
 (let ((@x995 ((_ th-lemma arith) (hypothesis (not $x645)) @x435 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x569) $x572)) @x608 $x572) @x597 false)))
 (let ((@x993 (lemma @x995 $x645)))
 (let (($x505 (<= ?x423 0.0)))
 (let (($x974 (not $x505)))
 (let (($x495 (>= ?x423 0.0)))
 (let ((@x93 (unit-resolution ((_ th-lemma arith) (or (not $x415) (not $x497) $x495 (not $x130) (not $x225))) @x999 @x597 (hypothesis (not $x495)) @x185 @x92 false)))
 (let (($x498 (= 0.0 ?x423)))
 (let (($x972 (not $x498)))
 (let ((@x977 (monotonicity (symm (commutativity (= $x498 $x573)) (= $x573 $x498)) (= $x516 $x972))))
 (let (($x942 (= 0.0 ?x518)))
 (let ((@x100 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x942 (not $x645) (not $x646))) @x993 @x97 $x942)))
 (let (($x941 (= ?x518 0.0)))
 (let (($x437 (not $x941)))
 (let ((@x606 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x437 $x634)) (hypothesis $x661) $x437) (symm (hypothesis $x942) $x941) false)))
 (let ((@x763 (unit-resolution (and-elim @x639 $x635) (unit-resolution (lemma @x606 (or (not $x942) $x634)) @x100 $x634) $x516)))
 (let ((@x982 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x498 $x974 (not $x495))) (mp @x763 @x977 $x972) (lemma @x93 $x495) $x974)))
 (unit-resolution ((_ th-lemma arith) (or (not $x645) (not $x646) (not $x225) $x505 (not $x130))) @x982 @x993 @x97 @x185 @x92 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      31
 :arith-eq-adapter               30
 :arith-bound-propagations-cheap 18
 :arith-bound-propagations-lp    2
 :arith-conflicts                24
 :arith-diseq                    31
 :arith-gcd-calls                5
 :arith-grobner-calls            3
 :arith-grobner-conflicts        2
 :arith-horner-calls             3
 :arith-lower                    29
 :arith-make-feasible            29
 :arith-max-columns              79
 :arith-max-rows                 15
 :arith-nla-explanations         62
 :arith-nla-lemmas               22
 :arith-patches                  5
 :arith-patches-success          5
 :arith-propagations             18
 :arith-upper                    27
 :conflicts                      7
 :decisions                      42
 :del-clause                     67
 :final-checks                   21
 :max-memory                     4.21
 :memory                         3.17
 :mk-bool-var                    110
 :mk-clause                      122
 :num-allocs                     2756553
 :num-checks                     1
 :propagations                   47
 :rlimit-count                   6140
 :time                           0.01
 :total-time                     0.02)
