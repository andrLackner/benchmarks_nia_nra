unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x961 (* x00 y!0)))
 (let ((?x932 (* 2 (* y00 x!1 x!1 y!0))))
 (let ((?x909 (* y00 y!0)))
 (let ((?x225 (* 2 (* x00 x!1 x!1 y!0))))
 (let ((?x545 (* x!1 x!1)))
 (let ((?x303 (* x!1 y!0 y!0)))
 (let ((?x304 (* (- 3) ?x303)))
 (let ((?x254 (* y!0 y!0)))
 (let ((?x255 (* (- 1) ?x254)))
 (let ((?x239 (* x!1 x!1 x!1 y!0)))
 (let ((?x100 (* (- 2) ?x239)))
 (let ((?x160 (* x!1 x!1 y!0 y!0)))
 (let ((?x240 (* (- 2) ?x160)))
 (let ((?x99 (* x!1 x!1 y!0)))
 (let ((?x109 (* (- 2) ?x99)))
 (let ((?x91 (* x!1 x!1 x!1)))
 (let ((?x434 (+ ?x91 ?x109 ?x240 ?x100 ?x255 ?x304 ?x545 ?x225 (* (- 1) (* y00 x!1 x!1)) ?x909 (* 3 (* y00 x!1 y!0)) ?x932 (* (- 1) (* y00 x!1)) (* (- 1) (* x00 x!1)) ?x961 (* 3 (* x00 x!1 y!0)) (* (- 1) (* x00 x!1 x!1)))))
 (let (($x734 (<= ?x434 0)))
 (let ((?x885 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x950 (<= ?x885 0)))
 (let (($x615 (= ?x885 0)))
 (let ((?x1218 (+ (* 4 y00) (* 4 x00) (* (- 3) ?x91) (* 2 ?x99) ?x240 ?x100 (* (- 3) ?x254) (* 5 ?x303) (* 7 ?x545) ?x225 (* 3 (* y00 x!1 x!1)) (* (- 4) x!1) (* 3 ?x909) (* (- 5) (* y00 x!1 y!0)) ?x932 (* 4 (* x!1 y!0)) (* (- 7) (* y00 x!1)) (* (- 7) (* x00 x!1)) (* 3 ?x961) (* (- 5) (* x00 x!1 y!0)) (* 3 (* x00 x!1 x!1)) (* (- 4) y!0))))
 (let (($x1217 (= ?x1218 0)))
 (let (($x1210 (not $x1217)))
 (let (($x391 (or (not (= ?x434 0)) $x1210)))
 (let (($x1222 (and $x615 $x391)))
 (let ((?x1457 (* (- 4) x00)))
 (let ((?x694 (* (- 4) y00)))
 (let ((?x855 (+ (* 4 x!1) (* 4 y!0) ?x694 ?x1457 (* (- 3) (* y!0 y00)) (* 5 (* x!1 y!0 y00)) (* (- 2) (* x!1 x!1 y!0 y00)) (* 7 (* x!1 y00)) (* 7 (* x!1 x00)) (* (- 3) (* y!0 x00)) (* 5 (* x!1 y!0 x00)) (* (- 3) (* x!1 x!1 x00)) (* (- 2) (* x!1 x!1 y!0 x00)) (* (- 3) (* x!1 x!1 y00)) (* (- 4) (* x!1 y!0)) ?x109 (* 2 ?x239) (* (- 7) ?x545) (* 3 ?x254) (* (- 5) ?x303) (* 2 ?x160) (* 3 ?x91))))
 (let ((?x521 (* y!0 x00)))
 (let ((?x745 (* y!0 y00)))
 (let ((?x305 (+ ?x745 (* 3 (* x!1 y!0 y00)) (* 2 (* x!1 x!1 y!0 y00)) (* (- 1) (* x!1 y00)) (* (- 1) (* x!1 x00)) ?x521 (* 3 (* x!1 y!0 x00)) (* (- 1) (* x!1 x!1 x00)) (* 2 (* x!1 x!1 y!0 x00)) (* (- 1) (* x!1 x!1 y00)) ?x109 ?x100 ?x545 ?x255 ?x304 ?x240 ?x91)))
 (let (($x876 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x305 0)) (not (= ?x855 0))))))
 (let (($x412 (exists ((x Int) (y Int) )(! (let ((?x664 (* x x x)))
 (let ((?x1464 (* 3 ?x664)))
 (let ((?x610 (* x x y y)))
 (let ((?x611 (* 2 ?x610)))
 (let ((?x607 (* x y y)))
 (let ((?x1463 (* (- 5) ?x607)))
 (let ((?x601 (* y y)))
 (let ((?x775 (* 3 ?x601)))
 (let ((?x496 (* x x)))
 (let ((?x1462 (* (- 7) ?x496)))
 (let ((?x482 (* x x x y)))
 (let ((?x483 (* 2 ?x482)))
 (let ((?x479 (* x x y)))
 (let ((?x508 (* (- 2) ?x479)))
 (let ((?x473 (* x y)))
 (let ((?x1186 (* (- 4) ?x473)))
 (let ((?x379 (* x x y00)))
 (let ((?x1461 (* (- 3) ?x379)))
 (let ((?x277 (* x x y x00)))
 (let ((?x280 (* (- 2) ?x277)))
 (let ((?x262 (* x x x00)))
 (let ((?x365 (* (- 3) ?x262)))
 (let ((?x218 (* x y x00)))
 (let ((?x702 (* 5 ?x218)))
 (let ((?x207 (* y x00)))
 (let ((?x1460 (* (- 3) ?x207)))
 (let ((?x200 (* x x00)))
 (let ((?x701 (* 7 ?x200)))
 (let ((?x147 (* x y00)))
 (let ((?x1459 (* 7 ?x147)))
 (let ((?x137 (* x x y y00)))
 (let ((?x138 (* (- 2) ?x137)))
 (let ((?x134 (* x y y00)))
 (let ((?x1458 (* 5 ?x134)))
 (let ((?x128 (* y y00)))
 (let ((?x695 (* (- 3) ?x128)))
 (let ((?x1457 (* (- 4) x00)))
 (let ((?x694 (* (- 4) y00)))
 (let ((?x641 (* 4 y)))
 (let ((?x1349 (* 4 x)))
 (let ((?x381 (+ ?x1349 ?x641 ?x694 ?x1457 ?x695 ?x1458 ?x138 ?x1459 ?x701 ?x1460 ?x702 ?x365 ?x280 ?x1461 ?x1186 ?x508 ?x483 ?x1462 ?x775 ?x1463 ?x611 ?x1464)))
 (let ((?x502 (* (- 2) ?x610)))
 (let ((?x776 (* (- 3) ?x607)))
 (let ((?x833 (* (- 1) ?x601)))
 (let ((?x609 (* (- 2) ?x482)))
 (let ((?x410 (* (- 1) ?x379)))
 (let ((?x364 (* 2 ?x277)))
 (let ((?x1007 (* (- 1) ?x262)))
 (let ((?x832 (* 3 ?x218)))
 (let ((?x215 (* (- 1) ?x200)))
 (let ((?x338 (* (- 1) ?x147)))
 (let ((?x193 (* 2 ?x137)))
 (let ((?x697 (* 3 ?x134)))
 (let ((?x716 (+ ?x128 ?x697 ?x193 ?x338 ?x215 ?x207 ?x832 ?x1007 ?x364 ?x410 ?x508 ?x609 ?x496 ?x833 ?x776 ?x502 ?x664)))
 (let (($x107 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x107 (or (not (= ?x716 0)) (not (= ?x381 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x506 (exists ((x Int) (y Int) )(! (let ((?x664 (* x x x)))
 (let ((?x1464 (* 3 ?x664)))
 (let ((?x610 (* x x y y)))
 (let ((?x611 (* 2 ?x610)))
 (let ((?x607 (* x y y)))
 (let ((?x1463 (* (- 5) ?x607)))
 (let ((?x601 (* y y)))
 (let ((?x775 (* 3 ?x601)))
 (let ((?x496 (* x x)))
 (let ((?x1462 (* (- 7) ?x496)))
 (let ((?x482 (* x x x y)))
 (let ((?x483 (* 2 ?x482)))
 (let ((?x479 (* x x y)))
 (let ((?x508 (* (- 2) ?x479)))
 (let ((?x473 (* x y)))
 (let ((?x1186 (* (- 4) ?x473)))
 (let ((?x379 (* x x y00)))
 (let ((?x1461 (* (- 3) ?x379)))
 (let ((?x325 (* y 1)))
 (let ((?x277 (* x x y x00)))
 (let ((?x280 (* (- 2) ?x277)))
 (let ((?x262 (* x x x00)))
 (let ((?x365 (* (- 3) ?x262)))
 (let ((?x218 (* x y x00)))
 (let ((?x702 (* 5 ?x218)))
 (let ((?x207 (* y x00)))
 (let ((?x1460 (* (- 3) ?x207)))
 (let ((?x200 (* x x00)))
 (let ((?x701 (* 7 ?x200)))
 (let ((?x147 (* x y00)))
 (let ((?x1459 (* 7 ?x147)))
 (let ((?x137 (* x x y y00)))
 (let ((?x138 (* (- 2) ?x137)))
 (let ((?x134 (* x y y00)))
 (let ((?x1458 (* 5 ?x134)))
 (let ((?x128 (* y y00)))
 (let ((?x695 (* (- 3) ?x128)))
 (let ((?x1457 (* (- 4) x00)))
 (let ((?x694 (* (- 4) y00)))
 (let ((?x1349 (* 4 x)))
 (let ((?x1465 (+ ?x1349 (* 3 y) ?x694 ?x1457 ?x695 ?x1458 ?x138 ?x1459 ?x701 ?x1460 ?x702 ?x365 ?x280 ?x325 ?x1461 ?x1186 ?x508 ?x483 ?x1462 ?x775 ?x1463 ?x611 ?x1464)))
 (let ((?x502 (* (- 2) ?x610)))
 (let ((?x776 (* (- 3) ?x607)))
 (let ((?x833 (* (- 1) ?x601)))
 (let ((?x609 (* (- 2) ?x482)))
 (let ((?x410 (* (- 1) ?x379)))
 (let ((?x364 (* 2 ?x277)))
 (let ((?x1007 (* (- 1) ?x262)))
 (let ((?x832 (* 3 ?x218)))
 (let ((?x215 (* (- 1) ?x200)))
 (let ((?x338 (* (- 1) ?x147)))
 (let ((?x193 (* 2 ?x137)))
 (let ((?x697 (* 3 ?x134)))
 (let ((?x834 (+ y ?x128 ?x697 ?x193 ?x338 ?x215 ?x207 ?x832 ?x1007 ?x364 (* (- 1) ?x325) ?x410 ?x508 ?x609 ?x496 ?x833 ?x776 ?x502 ?x664)))
 (let (($x107 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x107 (or (not (= ?x834 0)) (not (= ?x1465 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x717 (lambda ((x Int) (y Int) )(let ((?x664 (* x x x)))
 (let ((?x1464 (* 3 ?x664)))
 (let ((?x610 (* x x y y)))
 (let ((?x611 (* 2 ?x610)))
 (let ((?x607 (* x y y)))
 (let ((?x1463 (* (- 5) ?x607)))
 (let ((?x601 (* y y)))
 (let ((?x775 (* 3 ?x601)))
 (let ((?x496 (* x x)))
 (let ((?x1462 (* (- 7) ?x496)))
 (let ((?x482 (* x x x y)))
 (let ((?x483 (* 2 ?x482)))
 (let ((?x479 (* x x y)))
 (let ((?x508 (* (- 2) ?x479)))
 (let ((?x473 (* x y)))
 (let ((?x1186 (* (- 4) ?x473)))
 (let ((?x379 (* x x y00)))
 (let ((?x1461 (* (- 3) ?x379)))
 (let ((?x277 (* x x y x00)))
 (let ((?x280 (* (- 2) ?x277)))
 (let ((?x262 (* x x x00)))
 (let ((?x365 (* (- 3) ?x262)))
 (let ((?x218 (* x y x00)))
 (let ((?x702 (* 5 ?x218)))
 (let ((?x207 (* y x00)))
 (let ((?x1460 (* (- 3) ?x207)))
 (let ((?x200 (* x x00)))
 (let ((?x701 (* 7 ?x200)))
 (let ((?x147 (* x y00)))
 (let ((?x1459 (* 7 ?x147)))
 (let ((?x137 (* x x y y00)))
 (let ((?x138 (* (- 2) ?x137)))
 (let ((?x134 (* x y y00)))
 (let ((?x1458 (* 5 ?x134)))
 (let ((?x128 (* y y00)))
 (let ((?x695 (* (- 3) ?x128)))
 (let ((?x1457 (* (- 4) x00)))
 (let ((?x694 (* (- 4) y00)))
 (let ((?x641 (* 4 y)))
 (let ((?x1349 (* 4 x)))
 (let ((?x381 (+ ?x1349 ?x641 ?x694 ?x1457 ?x695 ?x1458 ?x138 ?x1459 ?x701 ?x1460 ?x702 ?x365 ?x280 ?x1461 ?x1186 ?x508 ?x483 ?x1462 ?x775 ?x1463 ?x611 ?x1464)))
 (let ((?x502 (* (- 2) ?x610)))
 (let ((?x776 (* (- 3) ?x607)))
 (let ((?x833 (* (- 1) ?x601)))
 (let ((?x609 (* (- 2) ?x482)))
 (let ((?x410 (* (- 1) ?x379)))
 (let ((?x364 (* 2 ?x277)))
 (let ((?x1007 (* (- 1) ?x262)))
 (let ((?x832 (* 3 ?x218)))
 (let ((?x215 (* (- 1) ?x200)))
 (let ((?x338 (* (- 1) ?x147)))
 (let ((?x193 (* 2 ?x137)))
 (let ((?x697 (* 3 ?x134)))
 (let ((?x716 (+ ?x128 ?x697 ?x193 ?x338 ?x215 ?x207 ?x832 ?x1007 ?x364 ?x410 ?x508 ?x609 ?x496 ?x833 ?x776 ?x502 ?x664)))
 (let (($x107 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x744 (and $x107 (or (not (= ?x716 0)) (not (= ?x381 0))))))
 (let ((?x325 (* y 1)))
 (let ((?x1465 (+ ?x1349 (* 3 y) ?x694 ?x1457 ?x695 ?x1458 ?x138 ?x1459 ?x701 ?x1460 ?x702 ?x365 ?x280 ?x325 ?x1461 ?x1186 ?x508 ?x483 ?x1462 ?x775 ?x1463 ?x611 ?x1464)))
 (let ((?x834 (+ y ?x128 ?x697 ?x193 ?x338 ?x215 ?x207 ?x832 ?x1007 ?x364 (* (- 1) ?x325) ?x410 ?x508 ?x609 ?x496 ?x833 ?x776 ?x502 ?x664)))
 (let (($x1472 (and $x107 (or (not (= ?x834 0)) (not (= ?x1465 0))))))
 (rewrite (= $x1472 $x744)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x551 (exists ((x Int) (y Int) )(! (let ((?x747 (+ 1 y)))
 (let ((?x371 (+ (- 1) x)))
 (let ((?x920 (* ?x371 ?x747 ?x747)))
 (let ((?x201 (* y00 ?x371 ?x371)))
 (let ((?x180 (* x00 ?x371 ?x371)))
 (let ((?x167 (+ (* 2 (* y00 ?x371 ?x371 ?x747)) (* 2 (* x00 ?x371 ?x371 ?x747)) ?x180 ?x201 (* (- 2) (* ?x371 ?x371 ?x371 ?x747)) (* (- 1) (* y00 ?x371 ?x747)) (* (- 1) (* x00 ?x371 ?x747)) (* (- 2) (* ?x371 ?x371 ?x747 ?x747)) (* (- 1) (* ?x371 ?x371 ?x371)) ?x920)))
 (let ((?x566 (+ 1 x)))
 (let ((?x764 (+ (- 1) y)))
 (let ((?x457 (* ?x764 ?x764 ?x566)))
 (let ((?x118 (* y00 ?x566 ?x566)))
 (let ((?x297 (* x00 ?x566 ?x566)))
 (let ((?x763 (+ (* 2 (* y00 ?x764 ?x566 ?x566)) (* 2 (* x00 ?x764 ?x566 ?x566)) ?x297 ?x118 (* (- 2) (* ?x764 ?x566 ?x566 ?x566)) (* (- 1) (* y00 ?x764 ?x566)) (* (- 1) (* x00 ?x764 ?x566)) (* (- 2) (* ?x764 ?x764 ?x566 ?x566)) (* (- 1) (* ?x566 ?x566 ?x566)) ?x457)))
 (let (($x754 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x754 (or (not (= ?x763 0)) (not (= ?x167 0))))))))))))))))) :qid k!27))
 ))
 (let ((?x396 (lambda ((x Int) (y Int) )(let ((?x664 (* x x x)))
 (let ((?x1464 (* 3 ?x664)))
 (let ((?x610 (* x x y y)))
 (let ((?x611 (* 2 ?x610)))
 (let ((?x607 (* x y y)))
 (let ((?x1463 (* (- 5) ?x607)))
 (let ((?x601 (* y y)))
 (let ((?x775 (* 3 ?x601)))
 (let ((?x496 (* x x)))
 (let ((?x1462 (* (- 7) ?x496)))
 (let ((?x482 (* x x x y)))
 (let ((?x483 (* 2 ?x482)))
 (let ((?x479 (* x x y)))
 (let ((?x508 (* (- 2) ?x479)))
 (let ((?x473 (* x y)))
 (let ((?x1186 (* (- 4) ?x473)))
 (let ((?x379 (* x x y00)))
 (let ((?x1461 (* (- 3) ?x379)))
 (let ((?x325 (* y 1)))
 (let ((?x277 (* x x y x00)))
 (let ((?x280 (* (- 2) ?x277)))
 (let ((?x262 (* x x x00)))
 (let ((?x365 (* (- 3) ?x262)))
 (let ((?x218 (* x y x00)))
 (let ((?x702 (* 5 ?x218)))
 (let ((?x207 (* y x00)))
 (let ((?x1460 (* (- 3) ?x207)))
 (let ((?x200 (* x x00)))
 (let ((?x701 (* 7 ?x200)))
 (let ((?x147 (* x y00)))
 (let ((?x1459 (* 7 ?x147)))
 (let ((?x137 (* x x y y00)))
 (let ((?x138 (* (- 2) ?x137)))
 (let ((?x134 (* x y y00)))
 (let ((?x1458 (* 5 ?x134)))
 (let ((?x128 (* y y00)))
 (let ((?x695 (* (- 3) ?x128)))
 (let ((?x1457 (* (- 4) x00)))
 (let ((?x694 (* (- 4) y00)))
 (let ((?x1349 (* 4 x)))
 (let ((?x1465 (+ ?x1349 (* 3 y) ?x694 ?x1457 ?x695 ?x1458 ?x138 ?x1459 ?x701 ?x1460 ?x702 ?x365 ?x280 ?x325 ?x1461 ?x1186 ?x508 ?x483 ?x1462 ?x775 ?x1463 ?x611 ?x1464)))
 (let ((?x502 (* (- 2) ?x610)))
 (let ((?x776 (* (- 3) ?x607)))
 (let ((?x833 (* (- 1) ?x601)))
 (let ((?x609 (* (- 2) ?x482)))
 (let ((?x410 (* (- 1) ?x379)))
 (let ((?x364 (* 2 ?x277)))
 (let ((?x1007 (* (- 1) ?x262)))
 (let ((?x832 (* 3 ?x218)))
 (let ((?x215 (* (- 1) ?x200)))
 (let ((?x338 (* (- 1) ?x147)))
 (let ((?x193 (* 2 ?x137)))
 (let ((?x697 (* 3 ?x134)))
 (let ((?x834 (+ y ?x128 ?x697 ?x193 ?x338 ?x215 ?x207 ?x832 ?x1007 ?x364 (* (- 1) ?x325) ?x410 ?x508 ?x609 ?x496 ?x833 ?x776 ?x502 ?x664)))
 (let (($x107 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1472 (and $x107 (or (not (= ?x834 0)) (not (= ?x1465 0))))))
 (let ((?x747 (+ 1 y)))
 (let ((?x371 (+ (- 1) x)))
 (let ((?x920 (* ?x371 ?x747 ?x747)))
 (let ((?x201 (* y00 ?x371 ?x371)))
 (let ((?x180 (* x00 ?x371 ?x371)))
 (let ((?x167 (+ (* 2 (* y00 ?x371 ?x371 ?x747)) (* 2 (* x00 ?x371 ?x371 ?x747)) ?x180 ?x201 (* (- 2) (* ?x371 ?x371 ?x371 ?x747)) (* (- 1) (* y00 ?x371 ?x747)) (* (- 1) (* x00 ?x371 ?x747)) (* (- 2) (* ?x371 ?x371 ?x747 ?x747)) (* (- 1) (* ?x371 ?x371 ?x371)) ?x920)))
 (let ((?x566 (+ 1 x)))
 (let ((?x764 (+ (- 1) y)))
 (let ((?x457 (* ?x764 ?x764 ?x566)))
 (let ((?x118 (* y00 ?x566 ?x566)))
 (let ((?x297 (* x00 ?x566 ?x566)))
 (let ((?x763 (+ (* 2 (* y00 ?x764 ?x566 ?x566)) (* 2 (* x00 ?x764 ?x566 ?x566)) ?x297 ?x118 (* (- 2) (* ?x764 ?x566 ?x566 ?x566)) (* (- 1) (* y00 ?x764 ?x566)) (* (- 1) (* x00 ?x764 ?x566)) (* (- 2) (* ?x764 ?x764 ?x566 ?x566)) (* (- 1) (* ?x566 ?x566 ?x566)) ?x457)))
 (let (($x754 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x398 (and $x754 (or (not (= ?x763 0)) (not (= ?x167 0))))))
 (rewrite (= $x398 $x1472)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x581 (exists ((x Int) (y Int) )(! (let ((?x371 (+ (- 1) x)))
 (let ((?x912 (* ?x371 ?x371 ?x371)))
 (let ((?x747 (+ 1 y)))
 (let ((?x533 (* x00 ?x371 ?x747)))
 (let ((?x194 (* y00 ?x371 ?x747)))
 (let ((?x563 (+ (* (- 2) (* y00 ?x371 ?x371 ?x747)) (* (- 2) (* x00 ?x371 ?x371 ?x747)) (* (- 1) (* x00 ?x371 ?x371)) (* (- 1) (* y00 ?x371 ?x371)) (* 2 (* ?x371 ?x371 ?x371 ?x747)) ?x194 ?x533 (* 2 (* ?x371 ?x371 ?x747 ?x747)) ?x912 (* (- 1) (* ?x371 ?x747 ?x747)))))
 (let ((?x566 (+ 1 x)))
 (let ((?x669 (* ?x566 ?x566 ?x566)))
 (let ((?x764 (+ (- 1) y)))
 (let ((?x407 (* x00 ?x764 ?x566)))
 (let ((?x613 (* y00 ?x764 ?x566)))
 (let ((?x1029 (+ (* (- 2) (* y00 ?x764 ?x566 ?x566)) (* (- 2) (* x00 ?x764 ?x566 ?x566)) (* (- 1) (* x00 ?x566 ?x566)) (* (- 1) (* y00 ?x566 ?x566)) (* 2 (* ?x764 ?x566 ?x566 ?x566)) ?x613 ?x407 (* 2 (* ?x764 ?x764 ?x566 ?x566)) ?x669 (* (- 1) (* ?x764 ?x764 ?x566)))))
 (let (($x754 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (and $x754 (or (not (= ?x1029 0)) (not (= ?x563 0))))))))))))))))) :qid k!27))
 ))
 (let ((?x1014 (lambda ((x Int) (y Int) )(let ((?x747 (+ 1 y)))
 (let ((?x371 (+ (- 1) x)))
 (let ((?x920 (* ?x371 ?x747 ?x747)))
 (let ((?x201 (* y00 ?x371 ?x371)))
 (let ((?x180 (* x00 ?x371 ?x371)))
 (let ((?x167 (+ (* 2 (* y00 ?x371 ?x371 ?x747)) (* 2 (* x00 ?x371 ?x371 ?x747)) ?x180 ?x201 (* (- 2) (* ?x371 ?x371 ?x371 ?x747)) (* (- 1) (* y00 ?x371 ?x747)) (* (- 1) (* x00 ?x371 ?x747)) (* (- 2) (* ?x371 ?x371 ?x747 ?x747)) (* (- 1) (* ?x371 ?x371 ?x371)) ?x920)))
 (let ((?x566 (+ 1 x)))
 (let ((?x764 (+ (- 1) y)))
 (let ((?x457 (* ?x764 ?x764 ?x566)))
 (let ((?x118 (* y00 ?x566 ?x566)))
 (let ((?x297 (* x00 ?x566 ?x566)))
 (let ((?x763 (+ (* 2 (* y00 ?x764 ?x566 ?x566)) (* 2 (* x00 ?x764 ?x566 ?x566)) ?x297 ?x118 (* (- 2) (* ?x764 ?x566 ?x566 ?x566)) (* (- 1) (* y00 ?x764 ?x566)) (* (- 1) (* x00 ?x764 ?x566)) (* (- 2) (* ?x764 ?x764 ?x566 ?x566)) (* (- 1) (* ?x566 ?x566 ?x566)) ?x457)))
 (let (($x754 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x398 (and $x754 (or (not (= ?x763 0)) (not (= ?x167 0))))))
 (let ((?x912 (* ?x371 ?x371 ?x371)))
 (let ((?x533 (* x00 ?x371 ?x747)))
 (let ((?x194 (* y00 ?x371 ?x747)))
 (let ((?x563 (+ (* (- 2) (* y00 ?x371 ?x371 ?x747)) (* (- 2) (* x00 ?x371 ?x371 ?x747)) (* (- 1) ?x180) (* (- 1) ?x201) (* 2 (* ?x371 ?x371 ?x371 ?x747)) ?x194 ?x533 (* 2 (* ?x371 ?x371 ?x747 ?x747)) ?x912 (* (- 1) ?x920))))
 (let ((?x669 (* ?x566 ?x566 ?x566)))
 (let ((?x407 (* x00 ?x764 ?x566)))
 (let ((?x613 (* y00 ?x764 ?x566)))
 (let ((?x1029 (+ (* (- 2) (* y00 ?x764 ?x566 ?x566)) (* (- 2) (* x00 ?x764 ?x566 ?x566)) (* (- 1) ?x297) (* (- 1) ?x118) (* 2 (* ?x764 ?x566 ?x566 ?x566)) ?x613 ?x407 (* 2 (* ?x764 ?x764 ?x566 ?x566)) ?x669 (* (- 1) ?x457))))
 (let (($x264 (and $x754 (or (not (= ?x1029 0)) (not (= ?x563 0))))))
 (rewrite (= $x264 $x398))))))))))))))))))))))))))
 ))
 (let (($x78 (exists ((x Int) (y Int) )(! (let ((?x57 (- y 1)))
 (let ((?x56 (+ x 1)))
 (let ((?x62 (- (* (- 2) ?x56 ?x56 ?x57 y00) (* 2 ?x56 ?x56 x00 ?x57))))
 (let ((?x71 (+ (- (- ?x62 (* ?x56 ?x56 x00)) (* ?x56 ?x56 y00)) (* 0 ?x56 ?x56 ?x57) (* 2 ?x56 ?x56 ?x56 ?x57) (* ?x56 ?x57 y00) (* ?x56 x00 ?x57) (* 2 ?x56 ?x56 ?x57 ?x57) (* ?x56 ?x56 ?x56))))
 (let ((?x37 (+ y 1)))
 (let ((?x36 (- x 1)))
 (let ((?x42 (- (* (- 2) ?x36 ?x36 ?x37 y00) (* 2 ?x36 ?x36 x00 ?x37))))
 (let ((?x51 (+ (- (- ?x42 (* ?x36 ?x36 x00)) (* ?x36 ?x36 y00)) (* 0 ?x36 ?x36 ?x37) (* 2 ?x36 ?x36 ?x36 ?x37) (* ?x36 ?x37 y00) (* ?x36 x00 ?x37) (* 2 ?x36 ?x36 ?x37 ?x37) (* ?x36 ?x36 ?x36))))
 (let (($x76 (or (not (= (- ?x51 (* ?x36 ?x37 ?x37)) 0)) (not (= (- ?x71 (* ?x56 ?x57 ?x57)) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x76)))))))))) :qid k!27))
 ))
 (let ((?x603 (lambda ((x Int) (y Int) )(let ((?x371 (+ (- 1) x)))
 (let ((?x912 (* ?x371 ?x371 ?x371)))
 (let ((?x747 (+ 1 y)))
 (let ((?x533 (* x00 ?x371 ?x747)))
 (let ((?x194 (* y00 ?x371 ?x747)))
 (let ((?x563 (+ (* (- 2) (* y00 ?x371 ?x371 ?x747)) (* (- 2) (* x00 ?x371 ?x371 ?x747)) (* (- 1) (* x00 ?x371 ?x371)) (* (- 1) (* y00 ?x371 ?x371)) (* 2 (* ?x371 ?x371 ?x371 ?x747)) ?x194 ?x533 (* 2 (* ?x371 ?x371 ?x747 ?x747)) ?x912 (* (- 1) (* ?x371 ?x747 ?x747)))))
 (let ((?x566 (+ 1 x)))
 (let ((?x669 (* ?x566 ?x566 ?x566)))
 (let ((?x764 (+ (- 1) y)))
 (let ((?x407 (* x00 ?x764 ?x566)))
 (let ((?x613 (* y00 ?x764 ?x566)))
 (let ((?x1029 (+ (* (- 2) (* y00 ?x764 ?x566 ?x566)) (* (- 2) (* x00 ?x764 ?x566 ?x566)) (* (- 1) (* x00 ?x566 ?x566)) (* (- 1) (* y00 ?x566 ?x566)) (* 2 (* ?x764 ?x566 ?x566 ?x566)) ?x613 ?x407 (* 2 (* ?x764 ?x764 ?x566 ?x566)) ?x669 (* (- 1) (* ?x764 ?x764 ?x566)))))
 (let (($x754 (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0)))
 (let (($x264 (and $x754 (or (not (= ?x1029 0)) (not (= ?x563 0))))))
 (let ((?x57 (- y 1)))
 (let ((?x56 (+ x 1)))
 (let ((?x62 (- (* (- 2) ?x56 ?x56 ?x57 y00) (* 2 ?x56 ?x56 x00 ?x57))))
 (let ((?x71 (+ (- (- ?x62 (* ?x56 ?x56 x00)) (* ?x56 ?x56 y00)) (* 0 ?x56 ?x56 ?x57) (* 2 ?x56 ?x56 ?x56 ?x57) (* ?x56 ?x57 y00) (* ?x56 x00 ?x57) (* 2 ?x56 ?x56 ?x57 ?x57) (* ?x56 ?x56 ?x56))))
 (let ((?x37 (+ y 1)))
 (let ((?x36 (- x 1)))
 (let ((?x42 (- (* (- 2) ?x36 ?x36 ?x37 y00) (* 2 ?x36 ?x36 x00 ?x37))))
 (let ((?x51 (+ (- (- ?x42 (* ?x36 ?x36 x00)) (* ?x36 ?x36 y00)) (* 0 ?x36 ?x36 ?x37) (* 2 ?x36 ?x36 ?x36 ?x37) (* ?x36 ?x37 y00) (* ?x36 x00 ?x37) (* 2 ?x36 ?x36 ?x37 ?x37) (* ?x36 ?x36 ?x36))))
 (let (($x76 (or (not (= (- ?x51 (* ?x36 ?x37 ?x37)) 0)) (not (= (- ?x71 (* ?x56 ?x57 ?x57)) 0)))))
 (let (($x77 (and (= (+ (- (- x y00) x00) y) 0) $x76)))
 (rewrite (= $x77 $x264)))))))))))))))))))))))))))
 ))
 (let ((@x79 (asserted $x78)))
 (let ((@x913 (mp (mp @x79 (quant-intro (proof-bind ?x603) (= $x78 $x581)) $x581) (rewrite (= $x581 $x581)) $x581)))
 (let ((@x871 (mp (mp @x913 (quant-intro (proof-bind ?x1014) (= $x581 $x551)) $x551) (quant-intro (proof-bind ?x396) (= $x551 $x506)) $x506)))
 (let ((@x879 (mp~ (mp @x871 (quant-intro (proof-bind ?x717) (= $x506 $x412)) $x412) (sk (~ $x412 $x876)) $x876)))
 (let ((@x585 (mp @x879 (rewrite (= $x876 $x1222)) $x1222)))
 (let ((@x671 (and-elim @x585 $x615)))
 (let ((@x382 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x615) $x950)) @x671 $x950)))
 (let (($x951 (>= ?x885 0)))
 (let ((@x486 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x615) $x951)) @x671 $x951)))
 (let ((@x1219 (lemma ((_ th-lemma arith) (hypothesis (not $x734)) @x486 @x382 false) $x734)))
 (let (($x735 (>= ?x434 0)))
 (let ((@x1271 (lemma ((_ th-lemma arith) (hypothesis (not $x735)) @x486 @x382 false) $x735)))
 (let (($x1056 (not (<= ?x1218 0))))
 (let (($x911 (>= ?x1218 0)))
 (let ((@x1260 (lemma ((_ th-lemma arith) (hypothesis (not $x911)) @x486 @x382 @x486 @x382 false) $x911)))
 (let (($x440 (= ?x434 0)))
 (let ((@x1226 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x440 (not $x734) (not $x735))) @x1219 @x1271 $x440)))
 (let ((@x1228 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1217 $x1056 (not $x911))) (unit-resolution (and-elim @x585 $x391) @x1226 $x1210) @x1260 $x1056)))
 ((_ th-lemma arith) @x1228 @x486 @x382 @x486 @x382 @x1271 @x1219 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        19
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           6
 :arith-grobner             4
 :arith-max-min             340
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             6
 :arith-patches_succ        6
 :arith-pivots              4
 :arith-row-summations      2
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                3.76
 :memory                    3.26
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1270108
 :num-checks                1
 :propagations              14
 :rlimit-count              5401
 :time                      0.01
 :total-time                0.02)
