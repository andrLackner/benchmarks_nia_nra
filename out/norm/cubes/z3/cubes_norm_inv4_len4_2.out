unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x898 (* 3 c!3)))
 (let ((?x677 (* (- 2) n!0)))
 (let ((?x905 (* (- 1) (* k!2 n!0))))
 (let ((?x649 (+ k!2 ?x905 ?x677 ?x898)))
 (let (($x858 (<= ?x649 1)))
 (let (($x757 (= ?x649 1)))
 (let ((?x691 (+ k!2 c!3)))
 (let ((?x910 (+ k!2 m!1)))
 (let ((?x595 (+ 6 m!1)))
 (let ((?x630 (+ 1 n!0)))
 (let ((?x854 (* ?x630 ?x630 ?x630 ?x595 ?x595 ?x595 ?x910 ?x910 ?x910)))
 (let ((?x802 (* m!1 m!1 m!1 m!1 m!1)))
 (let ((?x578 (* ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x910)))
 (let ((?x362 (* ?x630 ?x630 ?x630 ?x630 ?x630 ?x595 ?x595 ?x595 ?x910 ?x910 ?x910)))
 (let ((?x356 (* k!2 k!2 k!2 m!1 m!1)))
 (let ((?x951 (+ (* 3 (* ?x630 ?x630 ?x595 ?x595 ?x910 ?x910 ?x910)) (* 36 (* k!2 k!2 k!2)) ?x356 (* (- 3) (* ?x630 ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 ?x691)) (* 3 ?x362) (* 3 (* ?x630 ?x595 ?x595 ?x910 ?x910 ?x910)) (* 36 (* m!1 m!1 m!1)) (* 3 (* ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x910)) (* 3 (* ?x630 ?x630 ?x630 ?x630 ?x595 ?x595 ?x595 ?x910 ?x910 ?x910)) (* (- 1) (* ?x630 ?x630 ?x630 ?x595 ?x595 ?x595 ?x910 ?x910 ?x910 ?x910)) (* 12 (* k!2 k!2 k!2 m!1)) ?x578 (* (- 1) (* ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x910 ?x910)) (* 36 (* k!2 m!1 m!1 m!1)) (* 12 (* m!1 m!1 m!1 m!1)) (* (- 1) (* ?x630 ?x630 ?x630 ?x595 ?x910 ?x691)) (* ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x691) (* 3 (* ?x630 ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x910)) (* 108 (* k!2 m!1 m!1)) (* 36 (* k!2 k!2 m!1 m!1)) (* 108 (* k!2 k!2 m!1)) ?x802 (* 3 (* k!2 m!1 m!1 m!1 m!1)) (* 3 (* k!2 k!2 m!1 m!1 m!1)) ?x854 (* (- 1) (* ?x595 ?x595 ?x910 ?x910 ?x910 ?x910)) (* (- 3) (* ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 ?x691)))))
 (let (($x340 (= ?x951 0)))
 (let (($x349 (not $x340)))
 (let ((?x848 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x906 (= ?x848 1)))
 (let ((?x359 (* 18 c!3)))
 (let ((?x751 (* (- 1) (* k!2 k!2))))
 (let ((?x377 (* (- 9) n!0)))
 (let ((?x366 (* 5 k!2)))
 (let ((?x547 (+ ?x366 ?x377 ?x751 (* 9 (* n!0 c!3)) ?x359)))
 (let (($x683 (= ?x547 4)))
 (let ((?x343 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x897 (= ?x343 (- 6))))
 (let (($x777 (and $x897 $x683 $x757 $x906 $x349)))
 (let ((?x609 (* ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x910 ?x910)))
 (let ((?x503 (* ?x630 ?x630 ?x630 ?x595 ?x595 ?x595 ?x910 ?x910 ?x910 ?x910)))
 (let ((?x914 (* ?x595 ?x595 ?x910 ?x910 ?x910 ?x910)))
 (let ((?x559 (+ (* 3 (* ?x630 ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 (+ c!3 k!2))) (* (- 1) ?x854) (* (- 3) (* ?x630 ?x630 ?x630 ?x630 ?x595 ?x595 ?x595 ?x910 ?x910 ?x910)) (* (- 1) ?x578) (* (- 3) (* ?x630 ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x910)) ?x914 ?x503 (* (- 3) (* ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 ?x910)) (* (- 1) (* ?x630 ?x630 ?x630 ?x595 ?x910 ?x910 (+ c!3 k!2))) (* (- 1) ?x802) (* (- 3) (* k!2 m!1 m!1 m!1 m!1)) (* (- 3) (* k!2 k!2 m!1 m!1 m!1)) (* (- 1) ?x356) ?x609 (* (- 12) (* m!1 m!1 m!1 m!1)) (* (- 36) (* k!2 m!1 m!1 m!1)) (* (- 3) (* ?x630 ?x630 ?x595 ?x595 ?x910 ?x910 ?x910)) (* (- 36) (* k!2 k!2 m!1 m!1)) (* (- 12) (* k!2 k!2 k!2 m!1)) (* (- 3) (* ?x630 ?x595 ?x595 ?x910 ?x910 ?x910)) (* (- 3) ?x362) (* (- 36) (* m!1 m!1 m!1)) (* (- 108) (* k!2 m!1 m!1)) (* (- 108) (* k!2 k!2 m!1)) (* (- 36) (* k!2 k!2 k!2)) (* ?x630 ?x630 ?x630 ?x595 ?x910 (+ c!3 k!2)) (* 3 (* ?x630 ?x630 ?x630 ?x630 ?x595 ?x910 (+ c!3 k!2))))))
 (let (($x380 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x359 ?x366 ?x377 ?x751 (* 9 (* c!3 n!0))) 4) (= (+ ?x898 k!2 ?x677 ?x905) 1) $x906 (not (= ?x559 0)))))
 (let (($x375 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x478 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x846 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x72)))
 (let ((?x781 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x738 (* (- 3) (* ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x364 (* (- 3) (* ?x325 ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x684 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x868 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x72))))
 (let ((?x462 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x571 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x500 (* ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x908 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x807 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x721 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x549 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x614 (+ ?x549 ?x721 ?x563 ?x807 ?x908 ?x500 ?x571 ?x462 ?x868 (* (- 1) (* m m m m m)) (* (- 3) (* k m m m m)) (* (- 3) (* k k m m m)) (* (- 1) (* k k k m m)) ?x684 (* (- 12) (* m m m m)) (* (- 36) (* k m m m)) ?x364 (* (- 36) (* k k m m)) (* (- 12) (* k k k m)) ?x738 ?x781 (* (- 36) (* m m m)) (* (- 108) (* k m m)) (* (- 108) (* k k m)) (* (- 36) (* k k k)) ?x846 ?x478)))
 (let (($x314 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x276 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x224 (= (+ ?x40 ?x44 ?x226 ?x227 (* 9 (* c n))) 4)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (and $x140 $x224 $x276 $x314 (not (= ?x614 0)))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x796 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x500 (* ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x325 (+ 1 n)))
 (let ((?x908 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x478 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 (+ c k)))))
 (let ((?x868 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 (+ c k)))))
 (let ((?x72 (+ c k)))
 (let ((?x846 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x72)))
 (let ((?x462 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x807 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x571 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x781 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x738 (* (- 3) (* ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x721 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x364 (* (- 3) (* ?x325 ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x549 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x684 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x927 (+ ?x684 ?x549 ?x364 ?x721 ?x738 ?x563 ?x781 ?x571 ?x807 ?x462 ?x846 ?x868 ?x478 (* (- 1) (* ?x322 ?x322 ?x68 ?x68 ?x68)) ?x908 ?x500)))
 (let (($x693 (not (= ?x927 0))))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x768 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (and $x140 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x226 ?x227) 4) $x768 $x354 $x693)))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x742 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ c k)))
 (let ((?x68 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x325 (+ 1 n)))
 (let ((?x478 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x846 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x72)))
 (let ((?x781 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x738 (* (- 3) (* ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x364 (* (- 3) (* ?x325 ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x684 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x868 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x72))))
 (let ((?x462 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x571 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x500 (* ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x908 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x807 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x721 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x549 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x614 (+ ?x549 ?x721 ?x563 ?x807 ?x908 ?x500 ?x571 ?x462 ?x868 (* (- 1) (* m m m m m)) (* (- 3) (* k m m m m)) (* (- 3) (* k k m m m)) (* (- 1) (* k k k m m)) ?x684 (* (- 12) (* m m m m)) (* (- 36) (* k m m m)) ?x364 (* (- 36) (* k k m m)) (* (- 12) (* k k k m)) ?x738 ?x781 (* (- 36) (* m m m)) (* (- 108) (* k m m)) (* (- 108) (* k k m)) (* (- 36) (* k k k)) ?x846 ?x478)))
 (let (($x314 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x276 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x224 (= (+ ?x40 ?x44 ?x226 ?x227 (* 9 (* c n))) 4)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (let (($x332 (and $x140 $x224 $x276 $x314 (not (= ?x614 0)))))
 (let ((?x927 (+ ?x684 ?x549 ?x364 ?x721 ?x738 ?x563 ?x781 ?x571 ?x807 ?x462 ?x846 ?x868 ?x478 (* (- 1) (* ?x322 ?x322 ?x68 ?x68 ?x68)) ?x908 ?x500)))
 (let (($x693 (not (= ?x927 0))))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x768 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x814 (and $x140 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x226 ?x227) 4) $x768 $x354 $x693)))
 (rewrite (= $x814 $x332))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x695 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x500 (* ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x325 (+ 1 n)))
 (let ((?x908 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x478 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 (+ c k)))))
 (let ((?x868 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 (+ c k)))))
 (let ((?x72 (+ c k)))
 (let ((?x846 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x72)))
 (let ((?x462 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x807 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x571 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x781 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x738 (* (- 3) (* ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x721 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x364 (* (- 3) (* ?x325 ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x549 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x684 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x927 (+ ?x684 ?x549 ?x364 ?x721 ?x738 ?x563 ?x781 ?x571 ?x807 ?x462 ?x846 ?x868 ?x478 (* (- 1) (* ?x322 ?x322 ?x68 ?x68 ?x68)) ?x908 ?x500)))
 (let (($x693 (not (= ?x927 0))))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x346 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x705 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (and $x140 (= ?x705 (- 4)) $x346 $x354 $x693)))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x808 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x500 (* ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x325 (+ 1 n)))
 (let ((?x908 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x478 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 (+ c k)))))
 (let ((?x868 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 (+ c k)))))
 (let ((?x72 (+ c k)))
 (let ((?x846 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x72)))
 (let ((?x462 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x807 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x571 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x781 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x738 (* (- 3) (* ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x721 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x364 (* (- 3) (* ?x325 ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x549 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x684 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x927 (+ ?x684 ?x549 ?x364 ?x721 ?x738 ?x563 ?x781 ?x571 ?x807 ?x462 ?x846 ?x868 ?x478 (* (- 1) (* ?x322 ?x322 ?x68 ?x68 ?x68)) ?x908 ?x500)))
 (let (($x693 (not (= ?x927 0))))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x768 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x227 (* (- 1) ?x49)))
 (let ((?x226 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (let (($x814 (and $x140 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x226 ?x227) 4) $x768 $x354 $x693)))
 (let (($x346 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x705 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x358 (and $x140 (= ?x705 (- 4)) $x346 $x354 $x693)))
 (rewrite (= $x358 $x814)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x107 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ m 6)))
 (let ((?x68 (+ k m)))
 (let ((?x70 (+ n 1)))
 (let ((?x74 (+ (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70) (* 3 (+ c k) ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x81 (- (- ?x74 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x83 (- (- ?x81 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x84 (- ?x83 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x89 (- (+ ?x84 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x92 (+ (- ?x89 (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70)) (* (+ c k) ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x96 (+ (- ?x92 (* (+ c k) ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) (* 3 (+ c k) ?x68 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x100 (- (- ?x96 (* ?x68 ?x68 ?x68 ?x69 ?x69)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (+ ?x100 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69)) 0)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x360 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ k m)))
 (let ((?x322 (+ 6 m)))
 (let ((?x500 (* ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x325 (+ 1 n)))
 (let ((?x908 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x478 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 (+ c k)))))
 (let ((?x868 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 (+ c k)))))
 (let ((?x72 (+ c k)))
 (let ((?x846 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x72)))
 (let ((?x462 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x807 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x571 (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x781 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 3) (* ?x325 ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x738 (* (- 3) (* ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x721 (* (- 1) (* ?x325 ?x325 ?x325 ?x322 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x364 (* (- 3) (* ?x325 ?x325 ?x322 ?x322 ?x68 ?x68 ?x68))))
 (let ((?x549 (* 3 (* ?x325 ?x325 ?x325 ?x325 ?x325 ?x322 ?x68 ?x72))))
 (let ((?x684 (* ?x325 ?x325 ?x325 ?x322 ?x68 ?x68 ?x68 ?x68)))
 (let ((?x927 (+ ?x684 ?x549 ?x364 ?x721 ?x738 ?x563 ?x781 ?x571 ?x807 ?x462 ?x846 ?x868 ?x478 (* (- 1) (* ?x322 ?x322 ?x68 ?x68 ?x68)) ?x908 ?x500)))
 (let (($x693 (not (= ?x927 0))))
 (let (($x354 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x346 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x705 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x140 (= (+ m (* (- 6) n)) 6)))
 (let (($x358 (and $x140 (= ?x705 (- 4)) $x346 $x354 $x693)))
 (let ((?x70 (+ n 1)))
 (let ((?x69 (+ m 6)))
 (let ((?x74 (+ (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70) (* 3 ?x72 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x81 (- (- ?x74 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x83 (- (- ?x81 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x84 (- ?x83 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x89 (- (+ ?x84 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x70)) (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x92 (+ (- ?x89 (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70)) (* ?x72 ?x68 ?x69 ?x70 ?x70 ?x70))))
 (let ((?x96 (+ (- ?x92 (* ?x72 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70)) (* 3 ?x72 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70))))
 (let ((?x100 (- (- ?x96 (* ?x68 ?x68 ?x68 ?x69 ?x69)) (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x106 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (+ ?x100 (* ?x68 ?x68 ?x68 ?x68 ?x69 ?x69)) 0))))))
 (rewrite (= $x106 $x358)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x108 (asserted $x107)))
 (let ((@x587 (mp (mp @x108 (quant-intro (proof-bind ?x360) (= $x107 $x695)) $x695) (rewrite (= $x695 $x695)) $x695)))
 (let ((@x382 (mp (mp @x587 (quant-intro (proof-bind ?x808) (= $x695 $x796)) $x796) (quant-intro (proof-bind ?x742) (= $x796 $x375)) $x375)))
 (let ((@x655 (mp (mp~ @x382 (sk (~ $x375 $x380)) $x380) (rewrite (= $x380 $x777)) $x777)))
 (let ((@x561 (and-elim @x655 $x757)))
 (let ((@x791 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x757) $x858)) @x561 $x858)))
 (let (($x607 (>= ?x649 1)))
 (let ((@x538 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x757) $x607)) @x561 $x607)))
 (let (($x129 (<= ?x848 1)))
 (let ((@x348 (and-elim @x655 $x906)))
 (let ((@x372 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x906) $x129)) @x348 $x129)))
 (let (($x536 (>= ?x848 1)))
 (let ((@x378 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x906) $x536)) @x348 $x536)))
 (let (($x210 (<= ?x343 (- 6))))
 (let ((@x551 (and-elim @x655 $x897)))
 (let ((@x199 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x897) $x210)) @x551 $x210)))
 (let (($x337 (>= ?x343 (- 6))))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x897) $x337)) @x551 $x337)))
 (let (($x613 (<= ?x547 4)))
 (let ((@x686 (and-elim @x655 $x683)))
 (let ((@x656 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x683) $x613)) @x686 $x613)))
 (let (($x345 (>= ?x547 4)))
 (let ((@x663 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x683) $x345)) @x686 $x345)))
 (let (($x716 (not (<= ?x951 0))))
 (let (($x125 (>= ?x951 0)))
 (let ((@x709 ((_ th-lemma arith) (hypothesis (not $x125)) @x378 @x372 @x177 @x199 @x177 @x199 @x378 @x372 @x378 @x372 @x538 @x791 @x378 @x372 @x538 @x791 @x663 @x656 @x177 @x199 @x378 @x372 @x538 @x791 false)))
 (let ((@x560 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x340 $x716 (not $x125))) (and-elim @x655 $x349) (or $x716 (not $x125)))))
 ((_ th-lemma arith) (unit-resolution @x560 (lemma @x709 $x125) $x716) @x378 @x372 @x177 @x199 @x177 @x199 @x378 @x372 @x378 @x372 @x538 @x791 @x378 @x372 @x538 @x791 @x663 @x656 @x177 @x199 @x378 @x372 @x538 @x791 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        35
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           12
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             274
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              13
 :arith-row-summations      14
 :arith-tableau-max-columns 59
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 27
 :del-clause                16
 :final-checks              8
 :max-memory                3.90
 :memory                    3.31
 :mk-bool-var               47
 :mk-clause                 16
 :num-allocs                1521005
 :num-checks                1
 :propagations              10
 :rlimit-count              11357
 :time                      0.01
 :total-time                0.02)
