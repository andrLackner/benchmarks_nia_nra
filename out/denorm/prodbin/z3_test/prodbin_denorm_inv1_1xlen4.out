unsat
((set-logic NRA)
(proof
(let (($x602 (exists ((x Real) (y Real) )(! (let ((?x75 (* x00 y00)))
 (let ((?x383 (* y x)))
 (let ((?x89 (* (- 1.0) ?x383)))
 (let ((?x528 (+ ?x89 ?x75 z00 x)))
 (let ((?x228 (* ?x528 x x x)))
 (let ((?x232 (* (- 8.0) ?x228)))
 (let ((?x210 (* 4.0 (* ?x528 ?x528 ?x528 x x))))
 (let ((?x178 (* (/ 1.0 2.0) y)))
 (let ((?x498 (+ (- (/ 1.0 2.0)) ?x178)))
 (let ((?x207 (* ?x498 ?x528 x x x)))
 (let ((?x208 (* (- 8.0) ?x207)))
 (let ((?x534 (* ?x498 ?x528)))
 (let ((?x206 (* (- 1.0) ?x534)))
 (let ((?x242 (+ ?x206 ?x208 ?x210 ?x232)))
 (let ((?x572 (* ?x498 x)))
 (let ((?x636 (* 2.0 ?x572)))
 (let ((?x90 (+ ?x636 ?x89 x)))
 (let ((?x244 (* ?x90 ?x242)))
 (let (($x234 (= ?x244 0.0)))
 (not $x234)))))))))))))))))))) :qid k!28))
 ))
 (let (($x455 (exists ((x Real) (y Real) )(! false :qid k!28))
 ))
 (let ((?x457 (lambda ((x Real) (y Real) )(let ((?x75 (* x00 y00)))
 (let ((?x383 (* y x)))
 (let ((?x89 (* (- 1.0) ?x383)))
 (let ((?x528 (+ ?x89 ?x75 z00 x)))
 (let ((?x228 (* ?x528 x x x)))
 (let ((?x232 (* (- 8.0) ?x228)))
 (let ((?x210 (* 4.0 (* ?x528 ?x528 ?x528 x x))))
 (let ((?x178 (* (/ 1.0 2.0) y)))
 (let ((?x498 (+ (- (/ 1.0 2.0)) ?x178)))
 (let ((?x207 (* ?x498 ?x528 x x x)))
 (let ((?x208 (* (- 8.0) ?x207)))
 (let ((?x534 (* ?x498 ?x528)))
 (let ((?x206 (* (- 1.0) ?x534)))
 (let ((?x242 (+ ?x206 ?x208 ?x210 ?x232)))
 (let ((?x572 (* ?x498 x)))
 (let ((?x636 (* 2.0 ?x572)))
 (let ((?x90 (+ ?x636 ?x89 x)))
 (let ((?x244 (* ?x90 ?x242)))
 (let (($x234 (= ?x244 0.0)))
 (let (($x224 (not $x234)))
 (let ((?x604 (* y y x)))
 (let ((?x601 (* (/ 1.0 2.0) ?x604)))
 (let ((?x538 (* y x00 y00)))
 (let ((?x315 (* (- (/ 1.0 2.0)) ?x538)))
 (let ((?x358 (* y y x x x x)))
 (let ((?x165 (* 4.0 ?x358)))
 (let ((?x349 (* y x x x x00 y00)))
 (let ((?x576 (* (- 4.0) ?x349)))
 (let ((?x297 (* y x x x z00)))
 (let ((?x472 (* (- 4.0) ?x297)))
 (let ((?x582 (+ x z00 ?x75 ?x89)))
 (let ((?x137 (* 4.0 (* ?x582 ?x582 ?x582 x x))))
 (let ((?x104 (* y z00)))
 (let ((?x310 (* (- (/ 1.0 2.0)) ?x104)))
 (let ((?x306 (* (/ 1.0 2.0) ?x75)))
 (let ((?x303 (* (/ 1.0 2.0) z00)))
 (let ((?x117 (* (/ 1.0 2.0) x)))
 (let ((?x174 (+ ?x117 ?x303 ?x306 ?x310 ?x137 (* (- 4.0) (* x x x z00)) ?x472 (* (- 4.0) (* x x x x)) ?x576 ?x165 ?x89 ?x315 (* (- 4.0) (* x x x x00 y00)) ?x601)))
 (let ((?x448 (* 0.0 ?x174)))
 (let ((?x562 (* x x x x00 y00)))
 (let ((?x268 (* (- 8.0) ?x562)))
 (let ((?x313 (* x x x x)))
 (let ((?x294 (* (- 8.0) ?x313)))
 (let ((?x229 (* x x x z00)))
 (let ((?x295 (* (- 8.0) ?x229)))
 (let ((?x109 (+ ?x295 ?x294 (* 8.0 (* y x x x x)) ?x268)))
 (let ((?x367 (* 4.0 ?x562)))
 (let ((?x527 (* 4.0 ?x313)))
 (let ((?x139 (* 4.0 ?x229)))
 (let ((?x183 (+ ?x139 ?x472 ?x527 (* (- 8.0) (* y x x x x)) ?x576 ?x165 ?x367)))
 (let ((?x321 (+ ?x117 ?x303 ?x306 ?x310 ?x89 ?x315 ?x601)))
 (let ((?x194 (+ ?x321 ?x183 ?x137 ?x109)))
 (let ((?x267 (+ ?x295 ?x294 (* (- 8.0) (* (- 1.0) (* y x x x x))) ?x268)))
 (let ((?x337 (* y x x x x)))
 (let ((?x405 (* (- 1.0) ?x337)))
 (let ((?x373 (+ ?x229 ?x313 ?x405 ?x562)))
 (let ((?x355 (* (- 8.0) ?x373)))
 (let ((?x326 (* ?x89 x x x)))
 (let ((?x302 (* ?x75 x x x)))
 (let ((?x304 (* z00 x x x)))
 (let ((?x143 (+ ?x313 ?x304 ?x302 ?x326)))
 (let ((@x374 (monotonicity (rewrite (= ?x304 ?x229)) (rewrite (= ?x302 ?x562)) (rewrite (= ?x326 ?x405)) (= ?x143 (+ ?x313 ?x229 ?x562 ?x405)))))
 (let ((@x364 (trans @x374 (rewrite (= (+ ?x313 ?x229 ?x562 ?x405) ?x373)) (= ?x143 ?x373))))
 (let ((@x638 (rewrite (= ?x528 ?x582))))
 (let ((@x130 (trans (monotonicity @x638 (= ?x228 (* ?x582 x x x))) (rewrite (= (* ?x582 x x x) ?x143)) (= ?x228 ?x143))))
 (let ((@x254 (trans (monotonicity (trans @x130 @x364 (= ?x228 ?x373)) (= ?x232 ?x355)) (rewrite (= ?x355 ?x267)) (= ?x232 ?x267))))
 (let ((?x359 (* (- (/ 1.0 2.0)) ?x358)))
 (let ((?x378 (* (- 8.0) ?x359)))
 (let ((?x350 (* (/ 1.0 2.0) ?x349)))
 (let ((?x449 (* (- 8.0) ?x350)))
 (let ((?x338 (* (/ 1.0 2.0) ?x337)))
 (let ((?x450 (* (- 8.0) ?x338)))
 (let ((?x327 (* (- (/ 1.0 2.0)) ?x326)))
 (let ((?x451 (* (- 8.0) ?x327)))
 (let ((?x308 (* (- (/ 1.0 2.0)) ?x313)))
 (let ((?x431 (* (- 8.0) ?x308)))
 (let ((?x305 (* (- (/ 1.0 2.0)) ?x304)))
 (let ((?x161 (* (- 8.0) ?x305)))
 (let ((?x323 (* (- (/ 1.0 2.0)) ?x302)))
 (let ((?x160 (* (- 8.0) ?x323)))
 (let ((?x341 (* (/ 1.0 2.0) ?x297)))
 (let ((?x156 (* (- 8.0) ?x341)))
 (let ((?x379 (+ ?x156 ?x160 ?x161 ?x431 ?x451 ?x450 ?x449 ?x378)))
 (let ((?x507 (* (- 4.0) ?x337)))
 (let ((?x180 (+ ?x472 ?x367 ?x139 ?x527 ?x507 ?x507 ?x576 ?x165)))
 (let ((@x525 (trans (rewrite (= ?x161 (* 4.0 ?x304))) (rewrite (= (* 4.0 ?x304) ?x139)) (= ?x161 ?x139))))
 (let ((@x571 (trans (rewrite (= ?x160 (* 4.0 (* x00 y00 x x x)))) (rewrite (= (* 4.0 (* x00 y00 x x x)) ?x367)) (= ?x160 ?x367))))
 (let ((@x170 (monotonicity (rewrite (= ?x156 ?x472)) @x571 @x525 (rewrite (= ?x431 ?x527)) (rewrite (= ?x451 ?x507)) (rewrite (= ?x450 ?x507)) (rewrite (= ?x449 ?x576)) (rewrite (= ?x378 ?x165)) (= ?x379 ?x180))))
 (let ((@x463 (rewrite (= (* (- 8.0) (+ ?x341 ?x323 ?x305 ?x308 ?x327 ?x338 ?x350 ?x359)) ?x379))))
 (let ((?x443 (+ ?x341 ?x323 ?x305 ?x308 ?x327 ?x338 ?x350 ?x359)))
 (let ((?x328 (* ?x178 ?x89 x x x)))
 (let ((?x325 (* ?x178 ?x75 x x x)))
 (let ((?x301 (* ?x178 z00 x x x)))
 (let ((?x309 (* ?x178 x x x x)))
 (let ((?x329 (+ ?x308 ?x309 ?x305 ?x301 ?x323 ?x325 ?x327 ?x328)))
 (let ((@x446 (monotonicity (rewrite (= ?x309 ?x338)) (rewrite (= ?x301 ?x341)) (rewrite (= ?x325 ?x350)) (rewrite (= ?x328 ?x359)) (= ?x329 (+ ?x308 ?x338 ?x305 ?x341 ?x323 ?x350 ?x327 ?x359)))))
 (let ((@x637 (trans @x446 (rewrite (= (+ ?x308 ?x338 ?x305 ?x341 ?x323 ?x350 ?x327 ?x359) ?x443)) (= ?x329 ?x443))))
 (let ((@x336 (trans (monotonicity @x638 (= ?x207 (* ?x498 ?x582 x x x))) (rewrite (= (* ?x498 ?x582 x x x) ?x329)) (= ?x207 ?x329))))
 (let ((@x155 (monotonicity (trans @x336 @x637 (= ?x207 ?x443)) (= ?x208 (* (- 8.0) ?x443)))))
 (let ((@x189 (trans (trans @x155 @x463 (= ?x208 ?x379)) (trans @x170 (rewrite (= ?x180 ?x183)) (= ?x379 ?x183)) (= ?x208 ?x183))))
 (let ((?x236 (+ (* (- 1.0) (* (- (/ 1.0 2.0)) x)) (* (- 1.0) (* (- (/ 1.0 2.0)) z00)) (* (- 1.0) (* (- (/ 1.0 2.0)) ?x75)) (* (- 1.0) (* (/ 1.0 2.0) ?x104)) ?x89 (* (- 1.0) (* (/ 1.0 2.0) ?x538)) (* (- 1.0) (* (- (/ 1.0 2.0)) ?x604)))))
 (let ((?x92 (* (- (/ 1.0 2.0)) ?x604)))
 (let ((?x395 (* (/ 1.0 2.0) ?x538)))
 (let ((?x116 (* (/ 1.0 2.0) ?x104)))
 (let ((?x226 (* (- (/ 1.0 2.0)) ?x75)))
 (let ((?x496 (* (- (/ 1.0 2.0)) z00)))
 (let ((?x251 (* (- (/ 1.0 2.0)) x)))
 (let ((?x421 (+ ?x251 ?x496 ?x226 ?x116 ?x383 ?x395 ?x92)))
 (let ((?x401 (* (- 1.0) ?x421)))
 (let ((?x493 (* ?x178 ?x89)))
 (let ((?x640 (* (- (/ 1.0 2.0)) ?x89)))
 (let ((?x97 (* ?x178 ?x75)))
 (let ((?x262 (* ?x178 z00)))
 (let ((?x627 (* ?x178 x)))
 (let ((?x458 (+ ?x251 ?x627 ?x496 ?x262 ?x226 ?x97 ?x640 ?x493)))
 (let ((?x489 (* (/ 1.0 2.0) ?x383)))
 (let ((?x408 (+ ?x251 ?x489 ?x496 ?x116 ?x226 ?x395 ?x489 ?x92)))
 (let ((@x419 (monotonicity (rewrite (= ?x627 ?x489)) (rewrite (= ?x262 ?x116)) (rewrite (= ?x97 ?x395)) (rewrite (= ?x640 ?x489)) (rewrite (= ?x493 ?x92)) (= ?x458 ?x408))))
 (let ((@x514 (trans (monotonicity @x638 (= ?x534 (* ?x498 ?x582))) (rewrite (= (* ?x498 ?x582) ?x458)) (= ?x534 ?x458))))
 (let ((@x366 (trans @x514 (trans @x419 (rewrite (= ?x408 ?x421)) (= ?x458 ?x421)) (= ?x534 ?x421))))
 (let ((@x300 (trans (monotonicity @x366 (= ?x206 ?x401)) (rewrite (= ?x401 ?x236)) (= ?x206 ?x236))))
 (let ((@x177 (monotonicity (trans @x300 (rewrite (= ?x236 ?x321)) (= ?x206 ?x321)) @x189 (rewrite (= ?x210 ?x137)) (trans @x254 (rewrite (= ?x267 ?x109)) (= ?x232 ?x109)) (= ?x242 ?x194))))
 (let ((@x285 (rewrite (= (+ (* 2.0 ?x251) (* 2.0 ?x489)) (+ (* (- 1.0) x) ?x383)))))
 (let ((@x619 (rewrite (= (* 2.0 (+ ?x251 ?x489)) (+ (* 2.0 ?x251) (* 2.0 ?x489))))))
 (let ((@x375 (trans (rewrite (= ?x572 (+ ?x251 ?x627))) (rewrite (= (+ ?x251 ?x627) (+ ?x251 ?x489))) (= ?x572 (+ ?x251 ?x489)))))
 (let ((@x79 (trans (monotonicity @x375 (= ?x636 (* 2.0 (+ ?x251 ?x489)))) @x619 (= ?x636 (+ (* 2.0 ?x251) (* 2.0 ?x489))))))
 (let ((@x287 (monotonicity (trans @x79 @x285 (= ?x636 (+ (* (- 1.0) x) ?x383))) (= ?x90 (+ (+ (* (- 1.0) x) ?x383) ?x89 x)))))
 (let ((@x99 (trans @x287 (rewrite (= (+ (+ (* (- 1.0) x) ?x383) ?x89 x) 0.0)) (= ?x90 0.0))))
 (let ((@x445 (monotonicity @x99 (trans @x177 (rewrite (= ?x194 ?x174)) (= ?x242 ?x174)) (= ?x244 ?x448))))
 (let ((@x438 (monotonicity (trans @x445 (rewrite (= ?x448 0.0)) $x234) (= $x234 (= 0.0 0.0)))))
 (let ((@x433 (monotonicity (trans @x438 (rewrite (= (= 0.0 0.0) true)) (= $x234 true)) (= $x224 (not true)))))
 (trans @x433 (rewrite (= (not true) false)) (= $x224 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x466 (trans (quant-intro (proof-bind ?x457) (= $x602 $x455)) (elim-unused (= $x455 false)) (= $x602 false))))
 (let (($x261 (exists ((x Real) (y Real) (z Real) )(! (let ((?x95 (* (- 1.0) z00)))
 (let ((?x75 (* x00 y00)))
 (let ((?x76 (* (- 1.0) ?x75)))
 (let ((?x82 (+ ?x76 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x95)))
 (let ((?x347 (* (- 8.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x x x))))
 (let ((?x469 (+ (* (- 1.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)))) ?x347 (* 4.0 (* (+ z x) (+ z x) (+ z x) x x)) (* (- 8.0) (* (+ z x) x x x)))))
 (let ((?x345 (* 4.0 (* z z z x x))))
 (let ((?x280 (* (- 4.0) (* z y x x x))))
 (let ((?x115 (+ (* (- (/ 1.0 2.0)) (* z y)) ?x280 ?x345 (* (- 8.0) (* z x x x)))))
 (let ((?x81 (* y x)))
 (let ((?x620 (+ ?x76 ?x81 z ?x95)))
 (and (= ?x620 0.0) (or (not (= (* ?x620 ?x115) 0.0)) (not (= (* ?x469 ?x82) 0.0))))))))))))))) :qid k!28))
 ))
 (let (($x67 (exists ((x Real) (y Real) (z Real) )(! (let ((?x57 (- (* (- 1.0) (/ y 2.0) z) (* 2.0 x 2.0 x 2.0 x (/ y 2.0) z))))
 (let ((?x61 (- (+ ?x57 (* 2.0 x 2.0 x z z z)) (* 2.0 x 2.0 x 2.0 x z))))
 (let ((?x54 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x40 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x43 (- (* (- 1.0) ?x36 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40))))
 (let ((?x47 (- (+ ?x43 (* 2.0 x 2.0 x ?x40 ?x40 ?x40)) (* 2.0 x 2.0 x 2.0 x ?x40))))
 (let ((?x39 (- (+ (* (- 1.0) x00 y00) (* 2.0 x ?x36) z x) z00)))
 (let (($x33 (= (- (+ (* (- 1.0) x00 y00) (* x y) z) z00) 0.0)))
 (and $x33 (or (not (= (* ?x39 ?x47) 0.0)) (not (= (* ?x54 ?x61) 0.0))))))))))))) :qid k!28))
 ))
 (let ((?x227 (lambda ((x Real) (y Real) (z Real) )(let ((?x95 (* (- 1.0) z00)))
 (let ((?x75 (* x00 y00)))
 (let ((?x76 (* (- 1.0) ?x75)))
 (let ((?x82 (+ ?x76 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x95)))
 (let ((?x347 (* (- 8.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x x x))))
 (let ((?x469 (+ (* (- 1.0) (* (+ z x) (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)))) ?x347 (* 4.0 (* (+ z x) (+ z x) (+ z x) x x)) (* (- 8.0) (* (+ z x) x x x)))))
 (let ((?x345 (* 4.0 (* z z z x x))))
 (let ((?x280 (* (- 4.0) (* z y x x x))))
 (let ((?x115 (+ (* (- (/ 1.0 2.0)) (* z y)) ?x280 ?x345 (* (- 8.0) (* z x x x)))))
 (let ((?x81 (* y x)))
 (let ((?x620 (+ ?x76 ?x81 z ?x95)))
 (let (($x346 (and (= ?x620 0.0) (or (not (= (* ?x620 ?x115) 0.0)) (not (= (* ?x469 ?x82) 0.0))))))
 (let ((?x57 (- (* (- 1.0) (/ y 2.0) z) (* 2.0 x 2.0 x 2.0 x (/ y 2.0) z))))
 (let ((?x61 (- (+ ?x57 (* 2.0 x 2.0 x z z z)) (* 2.0 x 2.0 x 2.0 x z))))
 (let ((?x54 (- (+ (* (- 1.0) x00 y00) (* 2.0 x (/ y 2.0)) z) z00)))
 (let ((?x40 (+ z x)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x43 (- (* (- 1.0) ?x36 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40))))
 (let ((?x47 (- (+ ?x43 (* 2.0 x 2.0 x ?x40 ?x40 ?x40)) (* 2.0 x 2.0 x 2.0 x ?x40))))
 (let ((?x39 (- (+ (* (- 1.0) x00 y00) (* 2.0 x ?x36) z x) z00)))
 (let (($x33 (= (- (+ (* (- 1.0) x00 y00) (* x y) z) z00) 0.0)))
 (let (($x66 (and $x33 (or (not (= (* ?x39 ?x47) 0.0)) (not (= (* ?x54 ?x61) 0.0))))))
 (rewrite (= $x66 $x346)))))))))))))))))))))))))
 ))
 (let ((@x68 (asserted $x67)))
 (let ((@x108 (mp (mp @x68 (quant-intro (proof-bind ?x227) (= $x67 $x261)) $x261) (rewrite (= $x261 $x602)) $x602)))
 (mp @x108 @x466 false))))))))))))

(:max-memory   17.61
 :memory       17.35
 :num-allocs   55599
 :num-checks   1
 :rlimit-count 1229
 :time         0.00
 :total-time   0.01)
