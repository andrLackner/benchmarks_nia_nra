unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x397 (to_real b!2)))
 (let ((?x60 (to_real d00)))
 (let ((?x188 (* ?x60 ?x397)))
 (let ((?x199 (* (- (/ 1.0 2.0)) ?x188)))
 (let ((?x192 (to_real d!1)))
 (let ((?x64 (to_real b00)))
 (let ((?x467 (* ?x64 ?x192)))
 (let ((?x306 (* (/ 1.0 2.0) ?x467)))
 (let ((?x335 (+ ?x306 ?x199)))
 (let (($x333 (>= ?x335 0.0)))
 (let ((?x329 (+ (* (- 1.0) (to_real (* d00 b!2))) ?x188)))
 (let (($x401 (<= ?x329 0.0)))
 (let (($x201 (= 0.0 ?x329)))
 (let ((@x164 (symm (commutativity (= $x201 (= ?x329 0.0))) (= (= ?x329 0.0) $x201))))
 (let ((@x443 (unit-resolution (hypothesis (not $x201)) (mp ((_ th-lemma arith) (= ?x329 0.0)) @x164 $x201) false)))
 (let ((@x447 (lemma @x443 $x201)))
 (let ((?x272 (+ ?x467 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x211 (>= ?x272 0.0)))
 (let ((@x215 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x272 0.0)) $x211)) ((_ th-lemma arith) (= ?x272 0.0)) $x211)))
 (let ((?x432 (* d00 b!2)))
 (let ((?x372 (+ ?x432 (* (- 1) (* b00 d!1)))))
 (let (($x513 (<= ?x372 0)))
 (let (($x541 (= 0 ?x372)))
 (let ((@x324 (symm (commutativity (= $x541 (= ?x372 0))) (= (= ?x372 0) $x541))))
 (let (($x430 (= ?x372 0)))
 (let ((?x114 (* (/ 1.0 32.0) (* ?x192 ?x192 ?x397 ?x397 ?x397))))
 (let ((?x536 (* (/ 1.0 8.0) (* ?x192 ?x397 ?x397 (to_real a!3)))))
 (let ((?x155 (* (/ 1.0 2.0) (* ?x397 (to_real a!3) (to_real a!3)))))
 (let ((?x317 (* (/ 1.0 2.0) (* ?x397 ?x397 ?x397))))
 (let ((?x402 (to_real a!3)))
 (let ((?x465 (* ?x397 ?x397 ?x402)))
 (let ((?x457 (* (/ 1.0 4.0) (* ?x192 ?x192 (to_real y!0)))))
 (let ((?x524 (* (/ 1.0 8.0) (* ?x192 ?x397 ?x397 ?x397))))
 (let ((?x511 (* (/ 1.0 16.0) (* ?x192 (to_real y!0) ?x397 ?x397 ?x397))))
 (let ((?x334 (* (/ 1.0 8.0) (* ?x192 ?x192 ?x192))))
 (let ((?x516 (* (/ 1.0 4.0) (* (to_real y!0) ?x397 ?x397 ?x397))))
 (let ((?x374 (* (/ 1.0 4.0) (* (to_real y!0) ?x397 ?x397 ?x402))))
 (let ((?x543 (* (+ ?x199 ?x306) (+ ?x374 ?x516 ?x334 ?x511 ?x524 ?x457 ?x465 ?x317 ?x155 ?x536 ?x114))))
 (let (($x357 (= ?x543 0.0)))
 (let (($x390 (not $x357)))
 (let ((?x303 (+ (* (/ 1.0 32.0) (* ?x60 ?x192 (to_real y!0) ?x397 ?x397 ?x397 ?x397)) (* (- (/ 1.0 32.0)) (* ?x64 ?x192 ?x192 (to_real y!0) ?x397 ?x397 ?x397)) (* (- (/ 1.0 8.0)) (* ?x64 ?x192 (to_real y!0) ?x397 ?x397 ?x402)) (* (/ 1.0 8.0) (* ?x60 ?x192 ?x192 (to_real y!0) ?x397)) (* (/ 1.0 8.0) (* ?x60 (to_real y!0) ?x397 ?x397 ?x397 ?x402)) (* (/ 1.0 4.0) (* ?x60 ?x397 ?x397 ?x402 ?x402)) (* (- (/ 1.0 4.0)) (* ?x64 ?x192 ?x397 ?x402 ?x402)) (* (- (/ 1.0 8.0)) (* ?x64 ?x192 ?x192 ?x192 (to_real y!0))))))
 (let (($x315 (= ?x303 0.0)))
 (let (($x411 (or (not $x315) $x390)))
 (let ((?x491 (* a!3 d!1)))
 (let ((?x495 (* (- 2) (* b!2 y!0))))
 (let ((?x197 (+ (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) ?x495 ?x491)))
 (let (($x118 (= ?x197 0)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let ((?x452 (+ ?x35 ?x100 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3)))))
 (let (($x455 (= ?x452 0)))
 (let (($x278 (and $x455 $x430 $x118 $x411)))
 (let ((?x347 (+ ?x155 (* (/ 1.0 4.0) (* ?x397 ?x397 ?x402 (to_real y!0))) (* (/ 1.0 16.0) (* ?x397 ?x397 ?x397 ?x192 (to_real y!0))) ?x457 ?x317 ?x465 (* (/ 1.0 4.0) (* ?x397 ?x397 ?x397 (to_real y!0))) (* (/ 1.0 8.0) (* ?x397 ?x397 ?x397 ?x192)) (* (/ 1.0 8.0) (* ?x397 ?x397 ?x192 ?x402)) (* (/ 1.0 32.0) (* ?x397 ?x397 ?x397 ?x192 ?x192)) ?x334)))
 (let (($x171 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x397 ?x60)) (* (/ 1.0 2.0) (* ?x192 ?x64))) ?x347) 0.0)))
 (let ((?x140 (+ (* (/ 1.0 4.0) (* ?x397 ?x192 ?x64 ?x402 ?x402)) (* (- (/ 1.0 4.0)) (* ?x397 ?x397 ?x60 ?x402 ?x402)) (* (- (/ 1.0 8.0)) (* ?x397 ?x397 ?x397 ?x60 ?x402 (to_real y!0))) (* (/ 1.0 8.0) (* ?x397 ?x397 ?x192 ?x64 ?x402 (to_real y!0))) (* (- (/ 1.0 32.0)) (* ?x397 ?x397 ?x397 ?x397 ?x60 ?x192 (to_real y!0))) (* (/ 1.0 32.0) (* ?x397 ?x397 ?x397 ?x192 ?x192 ?x64 (to_real y!0))) (* (- (/ 1.0 8.0)) (* ?x397 ?x60 ?x192 ?x192 (to_real y!0))) (* (/ 1.0 8.0) (* ?x192 ?x192 ?x192 ?x64 (to_real y!0))))))
 (let (($x421 (= (+ ?x491 ?x495 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x296 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x100 (* 2 (* y!0 b00))) 0)))
 (let (($x435 (and $x296 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x421 (or (not (= ?x140 0.0)) (not $x171)))))
 (let (($x312 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 (to_real a) (to_real a)))))
 (let ((?x517 (+ ?x125 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real y))) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 (to_real y))) (* (/ 1.0 4.0) (* ?x62 ?x62 (to_real y))) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56)) (* ?x56 ?x56 (to_real a)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 (to_real y))) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 (to_real a))) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62)))))
 (let ((?x198 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x277 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 (to_real b00) (to_real y)))))
 (let ((?x266 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x62 (to_real y)))))
 (let ((?x255 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 (to_real b00) (to_real a) (to_real y)))))
 (let ((?x244 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 (to_real d00) (to_real a) (to_real y)))))
 (let ((?x185 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real d00) (to_real a) (to_real a)))))
 (let ((?x233 (* (/ 1.0 4.0) (* ?x56 ?x62 (to_real b00) (to_real a) (to_real a)))))
 (let ((?x297 (+ ?x233 ?x185 ?x244 ?x255 ?x266 ?x277 (* (- (/ 1.0 8.0)) (* ?x56 (to_real d00) ?x62 ?x62 (to_real y))) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 (to_real b00) (to_real y))))))
 (let ((?x48 (* a d)))
 (let ((?x169 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (and $x132 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x169 0) (or (not (= ?x297 0.0)) (not (= (* ?x198 ?x517) 0.0)))))))))))))))))))))) :qid k!33))
 ))
 (let (($x487 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x285 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x415 (+ ?x67 ?x56)))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x56 ?x415 ?x415)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x415 ?x285)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x285)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x285)))))
 (let ((?x394 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x479 (+ ?x125 (* (/ 1.0 4.0) (* ?x69 ?x56 ?x56 ?x67)) (* (/ 1.0 16.0) (* ?x69 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x69 ?x62 ?x62)))))
 (let (($x217 (or (not (= (* ?x394 ?x479) 0.0)) (not (= (* ?x394 ?x310) 0.0)))))
 (let ((?x216 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x299 (= ?x216 0)))
 (let ((?x195 (* d00 a)))
 (let ((?x423 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x195)))
 (and (= ?x423 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x299 $x217)))))))))))))))) :qid k!33))
 ))
 (let ((?x400 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 (to_real a) (to_real a)))))
 (let ((?x517 (+ ?x125 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real y))) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 (to_real y))) (* (/ 1.0 4.0) (* ?x62 ?x62 (to_real y))) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56)) (* ?x56 ?x56 (to_real a)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 (to_real y))) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x62)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 (to_real a))) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62)))))
 (let ((?x198 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x277 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x62 ?x62 (to_real b00) (to_real y)))))
 (let ((?x266 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x62 (to_real y)))))
 (let ((?x255 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x62 (to_real b00) (to_real a) (to_real y)))))
 (let ((?x244 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 (to_real d00) (to_real a) (to_real y)))))
 (let ((?x185 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real d00) (to_real a) (to_real a)))))
 (let ((?x233 (* (/ 1.0 4.0) (* ?x56 ?x62 (to_real b00) (to_real a) (to_real a)))))
 (let ((?x297 (+ ?x233 ?x185 ?x244 ?x255 ?x266 ?x277 (* (- (/ 1.0 8.0)) (* ?x56 (to_real d00) ?x62 ?x62 (to_real y))) (* (/ 1.0 8.0) (* ?x62 ?x62 ?x62 (to_real b00) (to_real y))))))
 (let ((?x48 (* a d)))
 (let ((?x169 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (let (($x537 (and $x132 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x169 0) (or (not (= ?x297 0.0)) (not (= (* ?x198 ?x517) 0.0))))))
 (let ((?x500 (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 (+ (to_real y) (* (/ 1.0 2.0) ?x62))))))
 (let ((?x69 (to_real y)))
 (let ((?x285 (+ ?x69 (* (/ 1.0 2.0) ?x62))))
 (let ((?x67 (to_real a)))
 (let ((?x415 (+ ?x67 ?x56)))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x56 ?x415 ?x415)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x415 ?x285)) ?x500 (* (/ 1.0 4.0) (* ?x62 ?x62 ?x285)))))
 (let ((?x394 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x479 (+ ?x125 (* (/ 1.0 4.0) (* ?x69 ?x56 ?x56 ?x67)) (* (/ 1.0 16.0) (* ?x69 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x69 ?x62 ?x62)))))
 (let (($x217 (or (not (= (* ?x394 ?x479) 0.0)) (not (= (* ?x394 ?x310) 0.0)))))
 (let ((?x216 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x299 (= ?x216 0)))
 (let ((?x195 (* d00 a)))
 (let (($x480 (= (+ (* 2 ?x99) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x195) 0)))
 (let (($x387 (and $x480 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x299 $x217)))
 (rewrite (= $x387 $x537))))))))))))))))))))))))))))))))))))
 ))
 (let (($x507 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x285 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x415 (+ ?x67 ?x56)))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x56 ?x415 ?x415)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x415 ?x285)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x285)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x285)))))
 (let ((?x394 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x479 (+ ?x125 (* (/ 1.0 4.0) (* ?x69 ?x56 ?x56 ?x67)) (* (/ 1.0 16.0) (* ?x69 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x69 ?x62 ?x62)))))
 (let (($x217 (or (not (= (* ?x394 ?x479) 0.0)) (not (= (* ?x394 ?x310) 0.0)))))
 (let ((?x216 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x299 (= ?x216 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x245 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x245 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x299 $x217)))))))))))))))))) :qid k!33))
 ))
 (let ((?x262 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x285 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x415 (+ ?x67 ?x56)))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x56 ?x415 ?x415)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x415 ?x285)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x285)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x285)))))
 (let ((?x394 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x479 (+ ?x125 (* (/ 1.0 4.0) (* ?x69 ?x56 ?x56 ?x67)) (* (/ 1.0 16.0) (* ?x69 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x69 ?x62 ?x62)))))
 (let (($x217 (or (not (= (* ?x394 ?x479) 0.0)) (not (= (* ?x394 ?x310) 0.0)))))
 (let ((?x216 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x299 (= ?x216 0)))
 (let ((?x195 (* d00 a)))
 (let ((?x423 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x195)))
 (let (($x387 (and (= ?x423 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x299 $x217)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x512 (and (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) ?x195)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x299 $x217)))
 (rewrite (= $x512 $x387)))))))))))))))))))))))
 ))
 (let (($x91 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x69 (to_real y)))
 (let ((?x81 (+ ?x69 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x85 (+ (* (to_real (+ a b)) (to_real (+ a b)) ?x58) (* (to_real (+ a b)) ?x58 ?x58 ?x81) (* ?x58 ?x58 ?x58 ?x63 ?x81) (* ?x63 ?x63 ?x81))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x73 (+ (* (to_real a) (to_real a) ?x58) (* (to_real a) ?x58 ?x58 ?x69) (* ?x58 ?x58 ?x58 ?x63 ?x69) (* ?x63 ?x63 ?x69))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x73) ?x75)) (not (= (* ?x66 ?x85) ?x75))))))))))))))))))) :qid k!33))
 ))
 (let ((?x308 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x285 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x67 (to_real a)))
 (let ((?x415 (+ ?x67 ?x56)))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x56 ?x415 ?x415)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x415 ?x285)) (* (/ 1.0 16.0) (* ?x62 ?x56 ?x56 ?x56 ?x285)) (* (/ 1.0 4.0) (* ?x62 ?x62 ?x285)))))
 (let ((?x394 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x479 (+ ?x125 (* (/ 1.0 4.0) (* ?x69 ?x56 ?x56 ?x67)) (* (/ 1.0 16.0) (* ?x69 ?x62 ?x56 ?x56 ?x56)) (* (/ 1.0 4.0) (* ?x69 ?x62 ?x62)))))
 (let (($x217 (or (not (= (* ?x394 ?x479) 0.0)) (not (= (* ?x394 ?x310) 0.0)))))
 (let ((?x216 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x299 (= ?x216 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x245 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x512 (and $x245 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x299 $x217)))
 (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x81 (+ ?x69 ?x63)))
 (let ((?x85 (+ (* (to_real (+ a b)) (to_real (+ a b)) (/ ?x56 ?x57)) (* (to_real (+ a b)) (/ ?x56 ?x57) (/ ?x56 ?x57) ?x81) (* (/ ?x56 ?x57) (/ ?x56 ?x57) (/ ?x56 ?x57) ?x63 ?x81) (* ?x63 ?x63 ?x81))))
 (let ((?x66 (+ (* (to_real (- 1)) (/ ?x56 ?x57) (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x73 (+ (* ?x67 ?x67 (/ ?x56 ?x57)) (* ?x67 (/ ?x56 ?x57) (/ ?x56 ?x57) ?x69) (* (/ ?x56 ?x57) (/ ?x56 ?x57) (/ ?x56 ?x57) ?x63 ?x69) (* ?x63 ?x63 ?x69))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x90 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x73) ?x75)) (not (= (* ?x66 ?x85) ?x75))))))
 (rewrite (= $x90 $x512)))))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x295 (mp (mp @x92 (quant-intro (proof-bind ?x308) (= $x91 $x507)) $x507) (rewrite (= $x507 $x507)) $x507)))
 (let ((@x236 (mp (mp @x295 (quant-intro (proof-bind ?x262) (= $x507 $x487)) $x487) (quant-intro (proof-bind ?x400) (= $x487 $x312)) $x312)))
 (let ((@x515 (mp (mp~ @x236 (sk (~ $x312 $x435)) $x435) (rewrite (= $x435 $x278)) $x278)))
 (let ((@x325 (mp (and-elim @x515 $x430) @x324 $x541)))
 (let ((@x311 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x541) $x513)) @x325 $x513)))
 (let ((@x346 (lemma ((_ th-lemma arith) @x311 @x215 (hypothesis (not $x333)) (hypothesis $x401) false) (or (not $x401) $x333))))
 (let ((@x525 (unit-resolution @x346 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x201) $x401)) @x447 $x401) $x333)))
 (let ((?x530 (+ ?x524 ?x457 ?x465 ?x317 ?x155 ?x536 ?x114 ?x374 ?x516 ?x334 ?x511)))
 (let (($x389 (<= ?x530 0.0)))
 (let (($x624 (not $x389)))
 (let (($x652 (= ?x530 0.0)))
 (let (($x656 (not $x652)))
 (let (($x96 (<= ?x303 0.0)))
 (let (($x361 (>= ?x372 0)))
 (let ((@x568 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x541) $x361)) @x325 $x361)))
 (let ((@x615 (unit-resolution ((_ th-lemma arith) (or $x96 (not $x361) (not $x513))) @x311 @x568 (hypothesis (not $x96)) false)))
 (let (($x116 (>= ?x303 0.0)))
 (let (($x113 (>= ?x197 0)))
 (let (($x519 (= 0 ?x197)))
 (let ((@x603 (mp (and-elim @x515 $x118) (symm (commutativity (= $x519 $x118)) (= $x118 $x519)) $x519)))
 (let (($x94 (<= ?x197 0)))
 (let (($x463 (>= ?x452 0)))
 (let (($x473 (= 0 ?x452)))
 (let ((@x591 (mp (and-elim @x515 $x455) (symm (commutativity (= $x473 $x455)) (= $x455 $x473)) $x473)))
 (let (($x458 (<= ?x452 0)))
 (let (($x579 (not $x513)))
 (let (($x552 (not $x361)))
 (let ((@x583 ((_ th-lemma arith) (or $x116 (not $x113) (not $x94) $x552 $x579 (not $x463) (not $x458)))))
 (let ((@x610 (unit-resolution @x583 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x473) $x458)) @x591 $x458) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x473) $x463)) @x591 $x463) @x311 @x568 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x519) $x94)) @x603 $x94) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x519) $x113)) @x603 $x113) (hypothesis (not $x116)) false)))
 (let ((@x662 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x315 (not $x96) (not $x116))) (lemma @x610 $x116) (or $x315 (not $x96)))))
 (let ((@x664 (unit-resolution (and-elim @x515 $x411) (unit-resolution @x662 (lemma @x615 $x96) $x315) $x390)))
 (let ((@x666 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x656 $x357)) @x664 $x656) (symm (hypothesis (= 0.0 ?x530)) $x652) false)))
 (let ((@x668 (lemma @x666 (not (= 0.0 ?x530)))))
 (let (($x301 (>= ?x530 0.0)))
 (let (($x136 (<= ?x335 0.0)))
 (let ((?x444 (* b00 d!1)))
 (let ((?x326 (to_real ?x444)))
 (let ((?x425 (+ (* (- 1.0) ?x467) ?x326)))
 (let (($x565 (>= ?x425 0.0)))
 (let (($x328 (= 0.0 ?x425)))
 (let ((@x128 (symm (commutativity (= $x328 (= ?x425 0.0))) (= (= ?x425 0.0) $x328))))
 (let ((@x370 (unit-resolution (hypothesis (not $x328)) (mp ((_ th-lemma arith) (= ?x425 0.0)) @x128 $x328) false)))
 (let ((@x628 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x328) $x565)) (lemma @x370 $x328) $x565)))
 (let (($x529 (>= ?x329 0.0)))
 (let ((@x575 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x201) $x529)) @x447 $x529) (hypothesis (not $x136)) (hypothesis $x565) @x568 false)))
 (let ((@x629 (unit-resolution (lemma @x575 (or (not $x565) $x136)) @x628 $x136)))
 (let (($x532 (not $x301)))
 (let ((@x531 (hypothesis $x532)))
 (let (($x107 (>= ?x543 0.0)))
 (let (($x677 (not $x107)))
 (let (($x95 (<= ?x543 0.0)))
 (let (($x534 (not $x95)))
 (let ((@x533 (hypothesis $x534)))
 (let ((@x538 (unit-resolution ((_ th-lemma arith) (or (not $x333) $x301 $x95)) @x533 @x531 @x525 false)))
 (let ((@x630 (unit-resolution ((_ th-lemma arith) (or (not $x136) $x389 $x95)) @x533 (hypothesis $x624) @x629 false)))
 (let ((@x620 ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x530) $x624 $x532))))
 (let ((@x621 (unit-resolution @x620 (unit-resolution (lemma @x630 (or $x389 $x95)) @x533 $x389) (unit-resolution (lemma @x538 (or $x301 $x95)) @x533 $x301) @x668 false)))
 (let (($x472 (= 0.0 ?x543)))
 (let (($x684 (not $x472)))
 (let ((@x686 (monotonicity (symm (commutativity (= $x472 $x357)) (= $x357 $x472)) (= $x390 $x684))))
 (let ((@x689 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x472 $x534 $x677)) (mp @x664 @x686 $x684) (or $x534 $x677))))
 (let ((@x690 (unit-resolution @x689 (lemma @x621 $x95) $x677)))
 (let ((@x691 (unit-resolution ((_ th-lemma arith) (or (not $x136) $x301 $x107)) @x690 @x531 @x629 false)))
 (unit-resolution ((_ th-lemma arith) (or (not $x333) $x389 $x107)) @x690 (unit-resolution @x620 (lemma @x691 $x301) @x668 $x624) @x525 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       42
 :arith-eq-adapter                56
 :arith-bound-propagations-cheap  41
 :arith-bound-propagations-lp     4
 :arith-conflicts                 133
 :arith-diseq                     54
 :arith-gcd-calls                 5
 :arith-grobner-calls             5
 :arith-grobner-conflicts         2
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 136
 :arith-lower                     75
 :arith-make-feasible             88
 :arith-max-columns               70
 :arith-max-rows                  18
 :arith-nla-explanations          93
 :arith-nla-lemmas                130
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              41
 :arith-upper                     88
 :conflicts                       16
 :decisions                       168
 :del-clause                      154
 :final-checks                    40
 :max-memory                      4.41
 :memory                          3.11
 :mk-bool-var                     306
 :mk-clause                       227
 :num-allocs                      2777897
 :num-checks                      1
 :propagations                    161
 :rlimit-count                    7020
 :time                            0.02
 :total-time                      0.03)
