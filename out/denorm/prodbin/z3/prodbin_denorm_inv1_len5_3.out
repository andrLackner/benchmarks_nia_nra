unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(proof
(let ((?x1434 (to_real z!0)))
 (let ((?x499 (to_real x!2)))
 (let ((?x994 (* ?x499 ?x1434 ?x1434 ?x1434)))
 (let ((?x819 (* ?x499 ?x499 ?x1434)))
 (let ((?x244 (to_real y!1)))
 (let ((?x722 (* ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434)))
 (let ((?x173 (* ?x499 ?x499)))
 (let ((?x168 (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x499)))
 (let ((?x148 (* ?x244 ?x244 ?x499 ?x499)))
 (let ((?x1489 (* ?x244 ?x244 ?x499 ?x499 ?x1434)))
 (let ((?x1208 (* ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434)))
 (let ((?x283 (+ (* 6.0 (* ?x499 ?x499 ?x1434 ?x1434)) (* (/ 1.0 2.0) (* ?x244 ?x244 ?x499 ?x499 ?x499)) (* (- 3.0) (* ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434)) (* 2.0 (* ?x499 ?x499 ?x499 ?x499)) ?x1208 (* (- 2.0) (* ?x244 ?x499 ?x499 ?x1434)) (* (- 1.0) (* ?x244 ?x499 ?x499 ?x499)) (* (- 3.0) (* ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x499)) (* (- 2.0) (* ?x244 ?x499 ?x499)) (* 6.0 (* ?x499 ?x499 ?x499 ?x1434)) ?x1489 (* (- 1.0) (* ?x244 ?x499 ?x1434 ?x1434)) (* (/ 1.0 2.0) (* ?x244 ?x244 ?x499 ?x1434 ?x1434)) ?x148 (* 3.0 (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)) ?x168 ?x173 (* 3.0 (* ?x244 ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434)) (* (- (/ 15.0 2.0)) (* ?x499 ?x499 ?x499)) (* (- 9.0) (* ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)) (* (- 1.0) (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434)) (* 9.0 (* ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)) (* (- 3.0) (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)) (* (- 3.0) (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434)) (* (/ 1.0 2.0) (* ?x499 ?x1434 ?x1434)) (* 3.0 (* ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x499)) (* (- 1.0) (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x499)) (* 9.0 ?x722) (* 3.0 (* ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434)) (* (- 9.0) (* ?x244 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434)) ?x819 (* 2.0 ?x994))))
 (let (($x125 (<= ?x283 0.0)))
 (let (($x230 (not $x125)))
 (let ((?x1401 (* (- 2.0) ?x994)))
 (let ((?x431 (* (- 1.0) ?x819)))
 (let ((?x747 (* ?x244 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434)))
 (let ((?x1135 (* 9.0 ?x747)))
 (let ((?x740 (* ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434)))
 (let ((?x744 (* (- 3.0) ?x740)))
 (let ((?x312 (* (- 9.0) ?x722)))
 (let ((?x672 (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x499)))
 (let ((?x624 (* ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x499)))
 (let ((?x1456 (* (- 3.0) ?x624)))
 (let ((?x544 (* ?x499 ?x1434 ?x1434)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x544)))
 (let ((?x502 (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434)))
 (let ((?x725 (* 3.0 ?x502)))
 (let ((?x466 (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)))
 (let ((?x731 (* 3.0 ?x466)))
 (let ((?x464 (* ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)))
 (let ((?x564 (* (- 9.0) ?x464)))
 (let ((?x445 (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434)))
 (let ((?x436 (* ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)))
 (let ((?x741 (* 9.0 ?x436)))
 (let ((?x331 (* ?x499 ?x499 ?x499)))
 (let ((?x479 (* (/ 15.0 2.0) ?x331)))
 (let ((?x315 (* ?x244 ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434)))
 (let ((?x685 (* (- 3.0) ?x315)))
 (let ((?x613 (* (- 1.0) ?x173)))
 (let ((?x612 (* (- 1.0) ?x168)))
 (let ((?x161 (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434)))
 (let ((?x160 (* (- 3.0) ?x161)))
 (let ((?x1147 (* (- 1.0) ?x148)))
 (let ((?x147 (* ?x244 ?x244 ?x499 ?x1434 ?x1434)))
 (let ((?x1497 (* (- (/ 1.0 2.0)) ?x147)))
 (let ((?x1496 (* ?x244 ?x499 ?x1434 ?x1434)))
 (let ((?x1491 (* (- 1.0) ?x1489)))
 (let ((?x282 (* ?x499 ?x499 ?x499 ?x1434)))
 (let ((?x284 (* (- 6.0) ?x282)))
 (let ((?x1492 (* ?x244 ?x499 ?x499)))
 (let ((?x151 (* 2.0 ?x1492)))
 (let ((?x1476 (* ?x244 ?x499 ?x499 ?x499 ?x499 ?x499 ?x499)))
 (let ((?x665 (* 3.0 ?x1476)))
 (let ((?x1429 (* ?x244 ?x499 ?x499 ?x499)))
 (let ((?x1317 (* ?x244 ?x499 ?x499 ?x1434)))
 (let ((?x926 (* 2.0 ?x1317)))
 (let ((?x255 (* (- 1.0) ?x1208)))
 (let ((?x1189 (* ?x499 ?x499 ?x499 ?x499)))
 (let ((?x288 (* (- 2.0) ?x1189)))
 (let ((?x1139 (* ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434)))
 (let ((?x674 (* 3.0 ?x1139)))
 (let ((?x1083 (* ?x244 ?x244 ?x499 ?x499 ?x499)))
 (let ((?x1117 (* (- (/ 1.0 2.0)) ?x1083)))
 (let ((?x1072 (* ?x499 ?x499 ?x1434 ?x1434)))
 (let ((?x1403 (* (- 6.0) ?x1072)))
 (let ((?x1066 (+ ?x1403 ?x1117 ?x674 ?x288 ?x255 ?x926 ?x1429 ?x665 ?x151 ?x284 ?x1491 ?x1496 ?x1497 ?x1147 ?x160 ?x612 ?x613 ?x685 ?x479 ?x741 ?x445 ?x564 ?x731 ?x725 ?x174 ?x1456 ?x672 ?x312 ?x744 ?x1135 ?x431 ?x1401)))
 (let (($x628 (>= ?x1066 0.0)))
 (let (($x1273 (not $x628)))
 (let (($x1150 (<= ?x1066 0.0)))
 (let (($x278 (>= ?x283 0.0)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x1477 (* ?x244 ?x499)))
 (let ((?x1450 (+ ?x1477 ?x126 ?x1434 ?x206)))
 (let (($x1112 (<= ?x1450 0.0)))
 (let ((?x250 (+ ?x1477 (* (- 1.0) (to_real (* y!1 x!2))))))
 (let (($x519 (<= ?x250 0.0)))
 (let (($x955 (= 0.0 ?x250)))
 (let ((@x1209 (symm (commutativity (= $x955 (= ?x250 0.0))) (= (= ?x250 0.0) $x955))))
 (let ((@x408 (mp ((_ th-lemma arith) (= ?x250 0.0)) @x1209 $x955)))
 (let ((@x1240 (lemma (unit-resolution (hypothesis (not $x955)) @x408 false) $x955)))
 (let ((@x516 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x955) $x519)) @x1240 $x519)))
 (let ((?x1122 (+ (* (- 1.0) (to_real (* x00 y00))) ?x120)))
 (let (($x1154 (>= ?x1122 0.0)))
 (let (($x485 (= 0.0 ?x1122)))
 (let ((@x1136 (symm (commutativity (= $x485 (= ?x1122 0.0))) (= (= ?x1122 0.0) $x485))))
 (let ((@x1172 (unit-resolution (hypothesis (not $x485)) (mp ((_ th-lemma arith) (= ?x1122 0.0)) @x1136 $x485) false)))
 (let ((@x1175 (lemma @x1172 $x485)))
 (let ((?x93 (* x00 y00)))
 (let ((?x1151 (+ z00 ?x93 (* (- 1) z!0) (* (- 1) (* y!1 x!2)))))
 (let (($x623 (>= ?x1151 0)))
 (let (($x1495 (= 0 ?x1151)))
 (let ((@x1202 (symm (commutativity (= $x1495 (= ?x1151 0))) (= (= ?x1151 0) $x1495))))
 (let (($x1444 (= ?x1151 0)))
 (let ((?x616 (+ ?x1497 ?x1147 ?x160 ?x612 ?x613 ?x284 ?x685 ?x479 ?x741 ?x445 ?x564 ?x731 ?x725 ?x174 ?x1456 ?x672 ?x312 ?x744 ?x1135 ?x431 ?x1401 ?x1403 ?x1117 ?x674 ?x288 ?x255 ?x926 ?x1429 ?x665 ?x1491 ?x151 ?x1496)))
 (let ((?x870 (* (+ ?x206 ?x126 ?x1434 ?x1477) ?x616)))
 (let (($x234 (= ?x870 0.0)))
 (let (($x1177 (not $x234)))
 (let ((?x1493 (* (- 1.0) (* ?x244 ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434))))
 (let ((?x322 (* 2.0 (* ?x499 ?x1434 ?x1434 ?x1434 ?x1434))))
 (let ((?x292 (* (- 8.0) ?x282)))
 (let ((?x652 (+ (* (/ 1.0 2.0) (* ?x244 ?x244 ?x499 ?x1434 ?x1434 ?x1434)) (* (- (/ 1.0 2.0)) (* ?x48 ?x244 ?x244 ?x499 ?x1434 ?x1434)) (* (- 2.0) (* ?x48 ?x499 ?x1434 ?x1434 ?x1434)) (* (- 1.0) (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x1434)) ?x292 (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x499) (* (- 1.0) (* ?x115 ?x119 ?x244 ?x244 ?x499 ?x499)) (* (- (/ 1.0 2.0)) (* ?x115 ?x119 ?x244 ?x244 ?x499 ?x1434 ?x1434)) (* (- 1.0) (* ?x48 ?x244 ?x244 ?x499 ?x499)) (* 8.0 (* ?x115 ?x119 ?x499 ?x499 ?x499)) (* ?x48 ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434) (* ?x115 ?x119 ?x244 ?x244 ?x244 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434) (* (/ 1.0 2.0) (* ?x244 ?x244 ?x244 ?x499 ?x499 ?x1434 ?x1434)) (* 2.0 (* ?x244 ?x499 ?x499 ?x1434 ?x1434 ?x1434)) ?x322 ?x1493 (* (- 2.0) (* ?x115 ?x119 ?x499 ?x1434 ?x1434 ?x1434)) (* 8.0 (* ?x48 ?x499 ?x499 ?x499)) ?x1489 (* (- 8.0) (* ?x244 ?x499 ?x499 ?x499 ?x499)))))
 (let (($x871 (= ?x652 0.0)))
 (let (($x1143 (or (not $x871) $x1177)))
 (let (($x726 (and $x1444 $x1143)))
 (let ((?x1311 (* (- 1.0) (* ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x244 ?x244 ?x244 ?x244))))
 (let ((?x1324 (* ?x499 ?x499 ?x1434 ?x244 ?x244)))
 (let ((?x309 (+ ?x1324 ?x292 (* 8.0 (* ?x499 ?x499 ?x499 ?x48)) (* 8.0 (* ?x499 ?x499 ?x499 ?x115 ?x119)) (* (- 8.0) (* ?x499 ?x499 ?x499 ?x499 ?x244)) (* (/ 1.0 2.0) (* ?x499 ?x1434 ?x1434 ?x1434 ?x244 ?x244)) (* (- (/ 1.0 2.0)) (* ?x499 ?x1434 ?x1434 ?x48 ?x244 ?x244)) (* (- (/ 1.0 2.0)) (* ?x499 ?x1434 ?x1434 ?x244 ?x244 ?x115 ?x119)) (* (/ 1.0 2.0) (* ?x499 ?x499 ?x1434 ?x1434 ?x244 ?x244 ?x244)) (* (- 1.0) (* ?x499 ?x499 ?x48 ?x244 ?x244)) (* (- 1.0) (* ?x499 ?x499 ?x244 ?x244 ?x115 ?x119)) (* ?x499 ?x499 ?x499 ?x244 ?x244 ?x244) (* (- 1.0) (* ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x1434 ?x244 ?x244 ?x244)) (* ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x48 ?x244 ?x244 ?x244) (* ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x244 ?x244 ?x244 ?x115 ?x119) ?x1311 ?x322 (* (- 2.0) (* ?x499 ?x1434 ?x1434 ?x1434 ?x48)) (* (- 2.0) (* ?x499 ?x1434 ?x1434 ?x1434 ?x115 ?x119)) (* 2.0 (* ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x244)))))
 (let ((?x289 (+ ?x479 (* ?x499 ?x499 ?x499 ?x244) (* (- (/ 1.0 2.0)) (* ?x499 ?x499 ?x499 ?x244 ?x244)) ?x431 (* 2.0 (* ?x499 ?x499 ?x1434 ?x244)) (* (- 1.0) ?x1324) ?x174 (* ?x499 ?x1434 ?x1434 ?x244) (* (- (/ 1.0 2.0)) (* ?x499 ?x1434 ?x1434 ?x244 ?x244)) ?x613 (* 2.0 (* ?x499 ?x499 ?x244)) (* (- 1.0) (* ?x499 ?x499 ?x244 ?x244)) ?x612 (* 3.0 (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x499 ?x244)) (* (- 3.0) (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x499 ?x244 ?x244)) (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x499 ?x244 ?x244 ?x244) ?x160 (* 9.0 (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x244)) (* (- 9.0) (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x244 ?x244)) (* 3.0 (* ?x499 ?x499 ?x499 ?x499 ?x499 ?x1434 ?x244 ?x244 ?x244)) ?x744 (* 9.0 (* ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x244)) (* (- 9.0) (* ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x244 ?x244)) (* 3.0 (* ?x499 ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x244 ?x244 ?x244)) ?x255 (* 3.0 (* ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x244)) (* (- 3.0) (* ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x244 ?x244)) (* ?x499 ?x499 ?x499 ?x1434 ?x1434 ?x1434 ?x244 ?x244 ?x244) ?x1401 ?x1403 ?x284 ?x288)))
 (let (($x1115 (or (not (= (* (+ ?x1434 ?x206 ?x126 (* ?x499 ?x244)) ?x289) 0.0)) (not (= ?x309 0.0)))))
 (let (($x411 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x93)) 0) $x1115)))
 (let (($x1126 (exists ((x Int) (y Int) (z Int) )(! (let ((?x67 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x1514 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x67))))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x319 (* ?x43 ?x43 ?x46 ?x67 ?x67)))
 (let ((?x1519 (+ ?x319 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 (to_real z00))) (* 8.0 (* ?x43 ?x43 ?x43 ?x115 ?x119)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x67)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 (to_real z00) ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x67 ?x67 ?x115 ?x119)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x67 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 (to_real z00) ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x67 ?x67 ?x115 ?x119)) (* ?x43 ?x43 ?x43 ?x67 ?x67 ?x67) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x67 ?x67 ?x67) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x115 ?x119) ?x1514 (* 2.0 (* ?x43 ?x46 ?x46 ?x46 ?x46)) (* (- 2.0) (* ?x43 ?x46 ?x46 ?x46 (to_real z00))) (* (- 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x115 ?x119)) (* 2.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)))))
 (let (($x1525 (not (= ?x1519 0.0))))
 (let ((?x1253 (+ (* (/ 15.0 2.0) (* ?x43 ?x43 ?x43)) (* ?x43 ?x43 ?x43 ?x67) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x46)) (* 2.0 (* ?x43 ?x43 ?x46 ?x67)) (* (- 1.0) ?x319) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46)) (* ?x43 ?x46 ?x46 ?x67) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43)) (* 2.0 (* ?x43 ?x43 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67 ?x67) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67)) (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67)) (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67) (* (- 2.0) (* ?x43 ?x46 ?x46 ?x46)) (* (- 6.0) (* ?x43 ?x43 ?x46 ?x46)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x46)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43)))))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let (($x1059 (or (not (= (* (+ ?x46 ?x206 ?x126 (* ?x43 ?x67)) ?x1253) 0.0)) $x1525)))
 (let (($x121 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x121 $x1059))))))))))))))))) :qid k!28))
 ))
 (let (($x1121 (exists ((x Int) (y Int) (z Int) )(! (let ((?x329 (* (- 2.0) (* (to_real z) (to_real z) (to_real z) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x261 (* ?x43 ?x43 ?x43)))
 (let ((?x451 (* 8.0 ?x261)))
 (let ((?x334 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x67 ?x67 ?x43)) (* (- 1.0) (* ?x67 ?x67 ?x43 ?x43)) ?x451 (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43) ?x329)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x67)))
 (let ((?x1068 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x1211 (+ ?x46 ?x43)))
 (let ((?x265 (+ (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1068 ?x1068)) (* (- 4.0) (* ?x43 ?x43 ?x1068 ?x1068)) ?x451 (* 8.0 (* ?x43 ?x43 ?x43 ?x1211 ?x1211 ?x1211 ?x1068 ?x1068 ?x1068)) (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1211)))))
 (let (($x1214 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x1068)) ?x46 ?x43 ?x206) ?x265) 0.0)))
 (let (($x863 (or (not $x1214) (not (= (* (+ ?x126 (* ?x67 ?x43) ?x46 ?x206) ?x334) 0.0)))))
 (let (($x1215 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x1215 $x863))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1186 (lambda ((x Int) (y Int) (z Int) )(let ((?x67 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x43 (to_real x)))
 (let ((?x1514 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x67))))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x319 (* ?x43 ?x43 ?x46 ?x67 ?x67)))
 (let ((?x1519 (+ ?x319 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 (to_real z00))) (* 8.0 (* ?x43 ?x43 ?x43 ?x115 ?x119)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x67)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 (to_real z00) ?x67 ?x67)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x67 ?x67 ?x115 ?x119)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x67 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 (to_real z00) ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x67 ?x67 ?x115 ?x119)) (* ?x43 ?x43 ?x43 ?x67 ?x67 ?x67) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 (to_real z00) ?x67 ?x67 ?x67) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x115 ?x119) ?x1514 (* 2.0 (* ?x43 ?x46 ?x46 ?x46 ?x46)) (* (- 2.0) (* ?x43 ?x46 ?x46 ?x46 (to_real z00))) (* (- 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x115 ?x119)) (* 2.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)))))
 (let (($x1525 (not (= ?x1519 0.0))))
 (let ((?x1253 (+ (* (/ 15.0 2.0) (* ?x43 ?x43 ?x43)) (* ?x43 ?x43 ?x43 ?x67) (* (- (/ 1.0 2.0)) (* ?x43 ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x46)) (* 2.0 (* ?x43 ?x43 ?x46 ?x67)) (* (- 1.0) ?x319) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46)) (* ?x43 ?x46 ?x46 ?x67) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43)) (* 2.0 (* ?x43 ?x43 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67 ?x67) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67)) (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67)) (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67) (* (- 2.0) (* ?x43 ?x46 ?x46 ?x46)) (* (- 6.0) (* ?x43 ?x43 ?x46 ?x46)) (* (- 6.0) (* ?x43 ?x43 ?x43 ?x46)) (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43)))))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let (($x1059 (or (not (= (* (+ ?x46 ?x206 ?x126 (* ?x43 ?x67)) ?x1253) 0.0)) $x1525)))
 (let (($x121 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x1114 (and $x121 $x1059)))
 (let ((?x261 (* ?x43 ?x43 ?x43)))
 (let ((?x451 (* 8.0 ?x261)))
 (let ((?x334 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x67 ?x67 ?x43)) (* (- 1.0) (* ?x67 ?x67 ?x43 ?x43)) ?x451 (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43) (* (- 2.0) (* ?x46 ?x46 ?x46 ?x43)))))
 (let ((?x171 (* (/ 1.0 2.0) ?x67)))
 (let ((?x1068 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x1211 (+ ?x46 ?x43)))
 (let ((?x265 (+ (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1068 ?x1068)) (* (- 4.0) (* ?x43 ?x43 ?x1068 ?x1068)) ?x451 (* 8.0 (* ?x43 ?x43 ?x43 ?x1211 ?x1211 ?x1211 ?x1068 ?x1068 ?x1068)) (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1211)))))
 (let (($x1214 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x1068)) ?x46 ?x43 ?x206) ?x265) 0.0)))
 (let (($x863 (or (not $x1214) (not (= (* (+ ?x126 (* ?x67 ?x43) ?x46 ?x206) ?x334) 0.0)))))
 (let (($x1215 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x339 (and $x1215 $x863)))
 (rewrite (= $x339 $x1114)))))))))))))))))))))))))))))))
 ))
 (let (($x276 (exists ((x Int) (y Int) (z Int) )(! (let ((?x329 (* (- 2.0) (* (to_real z) (to_real z) (to_real z) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x261 (* ?x43 ?x43 ?x43)))
 (let ((?x451 (* 8.0 ?x261)))
 (let ((?x334 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x67 ?x67 ?x43)) (* (- 1.0) (* ?x67 ?x67 ?x43 ?x43)) ?x451 (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43) ?x329)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x67)))
 (let ((?x1068 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x1211 (+ ?x46 ?x43)))
 (let ((?x265 (+ (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1068 ?x1068)) (* (- 4.0) (* ?x43 ?x43 ?x1068 ?x1068)) ?x451 (* 8.0 (* ?x43 ?x43 ?x43 ?x1211 ?x1211 ?x1211 ?x1068 ?x1068 ?x1068)) (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1211)))))
 (let (($x1214 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x1068)) ?x46 ?x43 ?x206) ?x265) 0.0)))
 (let (($x863 (or (not $x1214) (not (= (* (+ ?x126 (* ?x67 ?x43) ?x46 ?x206) ?x334) 0.0)))))
 (let (($x1137 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x1137 $x863))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1408 (lambda ((x Int) (y Int) (z Int) )(let ((?x329 (* (- 2.0) (* (to_real z) (to_real z) (to_real z) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x261 (* ?x43 ?x43 ?x43)))
 (let ((?x451 (* 8.0 ?x261)))
 (let ((?x334 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x67 ?x67 ?x43)) (* (- 1.0) (* ?x67 ?x67 ?x43 ?x43)) ?x451 (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43) ?x329)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x67)))
 (let ((?x1068 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x1211 (+ ?x46 ?x43)))
 (let ((?x265 (+ (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1068 ?x1068)) (* (- 4.0) (* ?x43 ?x43 ?x1068 ?x1068)) ?x451 (* 8.0 (* ?x43 ?x43 ?x43 ?x1211 ?x1211 ?x1211 ?x1068 ?x1068 ?x1068)) (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1211)))))
 (let (($x1214 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x1068)) ?x46 ?x43 ?x206) ?x265) 0.0)))
 (let (($x863 (or (not $x1214) (not (= (* (+ ?x126 (* ?x67 ?x43) ?x46 ?x206) ?x334) 0.0)))))
 (let (($x1215 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x339 (and $x1215 $x863)))
 (let (($x1137 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x837 (and $x1137 $x863)))
 (rewrite (= $x837 $x339))))))))))))))))))))))))))
 ))
 (let (($x85 (exists ((x Int) (y Int) (z Int) )(! (let ((?x64 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x67 (to_real y)))
 (let ((?x68 (/ ?x67 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x58 (to_real (* 2 x 2 x 2 x))))
 (let ((?x74 (- (* (to_real (- 1)) ?x41 ?x43 ?x68 ?x68 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x68 ?x68))))
 (let ((?x76 (+ ?x74 ?x58 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x68 ?x68 ?x68 ?x46 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x71 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x68) ?x46) ?x48)))
 (let (($x82 (not (= (* ?x71 (- ?x76 (to_real (* 2 x z z z)))) ?x64))))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* (to_real (- 1)) ?x41 ?x43 ?x42 ?x42 ?x52 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42))))
 (let ((?x59 (+ ?x55 ?x58 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x63 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (- ?x59 (to_real (* 2 x ?x50 ?x50 ?x50))))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x63 ?x64)) $x82))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x1223 (lambda ((x Int) (y Int) (z Int) )(let ((?x329 (* (- 2.0) (* (to_real z) (to_real z) (to_real z) (to_real x)))))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x46 (to_real z)))
 (let ((?x261 (* ?x43 ?x43 ?x43)))
 (let ((?x451 (* 8.0 ?x261)))
 (let ((?x334 (+ (* (- (/ 1.0 2.0)) (* ?x46 ?x46 ?x67 ?x67 ?x43)) (* (- 1.0) (* ?x67 ?x67 ?x43 ?x43)) ?x451 (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43) ?x329)))
 (let ((?x48 (to_real z00)))
 (let ((?x206 (* (- 1.0) ?x48)))
 (let ((?x119 (to_real y00)))
 (let ((?x115 (to_real x00)))
 (let ((?x120 (* ?x115 ?x119)))
 (let ((?x126 (* (- 1.0) ?x120)))
 (let ((?x171 (* (/ 1.0 2.0) ?x67)))
 (let ((?x1068 (+ (- (/ 1.0 2.0)) ?x171)))
 (let ((?x1211 (+ ?x46 ?x43)))
 (let ((?x265 (+ (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1068 ?x1068)) (* (- 4.0) (* ?x43 ?x43 ?x1068 ?x1068)) ?x451 (* 8.0 (* ?x43 ?x43 ?x43 ?x1211 ?x1211 ?x1211 ?x1068 ?x1068 ?x1068)) (* (- 2.0) (* ?x43 ?x1211 ?x1211 ?x1211)))))
 (let (($x1214 (= (* (+ ?x126 (* 2.0 (* ?x43 ?x1068)) ?x46 ?x43 ?x206) ?x265) 0.0)))
 (let (($x863 (or (not $x1214) (not (= (* (+ ?x126 (* ?x67 ?x43) ?x46 ?x206) ?x334) 0.0)))))
 (let (($x1137 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x837 (and $x1137 $x863)))
 (let ((?x64 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x68 (/ ?x67 ?x41)))
 (let ((?x58 (to_real (* 2 x 2 x 2 x))))
 (let ((?x74 (- (* (to_real (- 1)) ?x41 ?x43 ?x68 ?x68 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x68 ?x68))))
 (let ((?x76 (+ ?x74 ?x58 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x68 ?x68 ?x68 ?x46 ?x46 ?x46))))
 (let ((?x71 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x68) ?x46) ?x48)))
 (let (($x82 (not (= (* ?x71 (- ?x76 (to_real (* 2 x z z z)))) ?x64))))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (* (to_real (- 1)) ?x41 ?x43 ?x42 ?x42 ?x52 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42))))
 (let ((?x59 (+ ?x55 ?x58 (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x63 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (- ?x59 (to_real (* 2 x ?x50 ?x50 ?x50))))))
 (let (($x84 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x63 ?x64)) $x82))))
 (rewrite (= $x84 $x837))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x489 (mp (mp @x86 (quant-intro (proof-bind ?x1223) (= $x85 $x276)) $x276) (rewrite (= $x276 $x276)) $x276)))
 (let ((@x501 (mp (mp @x489 (quant-intro (proof-bind ?x1408) (= $x276 $x1121)) $x1121) (quant-intro (proof-bind ?x1186) (= $x1121 $x1126)) $x1126)))
 (let ((@x510 (mp (mp~ @x501 (sk (~ $x1126 $x411)) $x411) (rewrite (= $x411 $x726)) $x726)))
 (let ((@x1203 (mp (and-elim @x510 $x1444) @x1202 $x1495)))
 (let ((@x106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1495) $x623)) @x1203 $x623)))
 (let ((@x457 ((_ th-lemma arith) @x106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x1154)) @x1175 $x1154) (hypothesis $x519) (hypothesis (not $x1112)) false)))
 (let ((@x231 (unit-resolution (lemma @x457 (or (not $x519) $x1112)) @x516 $x1112)))
 (let (($x327 (not $x278)))
 (let ((@x89 (hypothesis $x327)))
 (let (($x1315 (<= ?x870 0.0)))
 (let (($x360 (not $x1315)))
 (let (($x1463 (>= ?x870 0.0)))
 (let (($x790 (not $x1463)))
 (let ((@x786 (hypothesis $x790)))
 (let (($x1452 (>= ?x1450 0.0)))
 (let (($x1213 (<= ?x1122 0.0)))
 (let (($x439 (>= ?x250 0.0)))
 (let ((@x434 ((_ th-lemma arith triangle-eq) (or (not $x955) $x439))))
 (let (($x1490 (<= ?x1151 0)))
 (let ((@x414 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1495) $x1490)) @x1203 $x1490)))
 (let ((@x1427 ((_ th-lemma arith) (hypothesis (not $x1452)) (hypothesis $x1213) @x414 (unit-resolution @x434 @x408 $x439) false)))
 (let ((@x96 (unit-resolution (lemma @x1427 (or (not $x1213) $x1452)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x485) $x1213)) @x1175 $x1213) $x1452)))
 (let ((@x97 (unit-resolution ((_ th-lemma arith) (or (not $x1452) $x278 $x1463)) @x786 @x89 @x96 false)))
 (let ((@x1469 ((_ th-lemma arith) (or $x1150 $x327))))
 (let ((@x344 (unit-resolution @x1469 (unit-resolution (lemma @x97 (or $x278 $x1463)) @x786 $x278) $x1150)))
 (let ((@x995 (unit-resolution ((_ th-lemma arith) (or (not $x1112) $x125 $x1463)) @x786 (hypothesis $x230) @x231 false)))
 (let ((@x1283 ((_ th-lemma arith) (or $x230 $x628))))
 (let ((@x1275 (unit-resolution @x1283 (unit-resolution (lemma @x995 (or $x125 $x1463)) @x786 $x125) $x628)))
 (let (($x420 (= ?x1066 0.0)))
 (let (($x352 (not $x420)))
 (let (($x865 (= 0.0 ?x652)))
 (let (($x149 (>= ?x652 0.0)))
 (let ((@x946 (unit-resolution ((_ th-lemma arith) (or (not $x519) $x149 (not $x439) (not $x623) (not $x1490))) @x414 @x106 (hypothesis (not $x149)) @x516 (unit-resolution @x434 @x1240 $x439) false)))
 (let (($x481 (<= ?x652 0.0)))
 (let ((@x107 (unit-resolution ((_ th-lemma arith) (or $x481 (not $x623) (not $x1490))) @x414 @x106 (hypothesis (not $x481)) false)))
 (let ((@x484 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x865 (not $x481) (not $x149))) (lemma @x107 $x481) (or $x865 (not $x149)))))
 (let ((@x223 (mp (unit-resolution @x484 (lemma @x946 $x149) $x865) (commutativity (= $x865 $x871)) $x871)))
 (let ((@x358 (unit-resolution (and-elim @x510 $x1143) @x223 $x1177)))
 (let ((@x225 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x352 $x234)) @x358 $x352) (symm (hypothesis (= 0.0 ?x1066)) $x420) false)))
 (let ((@x462 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x1066) (not $x1150) $x1273)) (lemma @x225 (not (= 0.0 ?x1066))) (or (not $x1150) $x1273))))
 (let (($x140 (= 0.0 ?x870)))
 (let (($x1343 (not $x140)))
 (let ((@x1349 (monotonicity (symm (commutativity (= $x140 $x234)) (= $x234 $x140)) (= $x1177 $x1343))))
 (let ((@x1352 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x140 $x360 $x790)) (mp @x358 @x1349 $x1343) (or $x360 $x790))))
 (let ((@x130 (unit-resolution @x1352 (lemma (unit-resolution @x462 @x1275 @x344 false) $x1463) $x360)))
 (let ((@x134 (unit-resolution ((_ th-lemma arith) (or (not $x1112) $x278 $x1315)) @x130 @x89 @x231 false)))
 (let ((@x137 (unit-resolution @x462 (unit-resolution @x1469 (lemma @x134 $x278) $x1150) $x1273)))
 (unit-resolution ((_ th-lemma arith) (or (not $x1452) $x125 $x1315)) @x130 @x96 (unit-resolution @x1283 @x137 $x230) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      29
 :arith-eq-adapter               21
 :arith-bound-propagations-cheap 25
 :arith-bound-propagations-lp    4
 :arith-conflicts                85
 :arith-diseq                    28
 :arith-gcd-calls                6
 :arith-grobner-calls            4
 :arith-grobner-conflicts        2
 :arith-horner-calls             4
 :arith-lower                    52
 :arith-make-feasible            56
 :arith-max-columns              90
 :arith-max-rows                 17
 :arith-nla-explanations         56
 :arith-nla-lemmas               83
 :arith-patches                  6
 :arith-patches-success          6
 :arith-propagations             25
 :arith-upper                    73
 :conflicts                      12
 :decisions                      82
 :del-clause                     104
 :final-checks                   33
 :max-memory                     6.79
 :memory                         3.26
 :mk-bool-var                    179
 :mk-clause                      138
 :num-allocs                     24612429
 :num-checks                     1
 :propagations                   119
 :rlimit-count                   7887
 :time                           0.08
 :total-time                     0.08)
