unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x67 (* y00 q00)))
 (let ((?x192 (+ r00 ?x67 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x355 (>= ?x192 0)))
 (let (($x391 (= ?x192 0)))
 (let ((?x420 (* (- 1) q!2)))
 (let ((?x452 (* (- 1) (* y00 y00 y00 y00))))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x358 (+ ?x62 r!1)))
 (let ((?x129 (+ 1 q!2)))
 (let ((?x426 (+ (- 1) (* 3 (* y00 y00 y00 r!1)) (* y00 q!2 q!2 q!2 r!1 r!1 r!1) (* 3 (* y00 y00 y00 q!2 q!2 q!2 r!1)) (* 9 (* y00 y00 y00 q!2 r!1)) (* (- 3) (* y00 y00 r!1 r!1)) (* (- 1) (* y00 y00 y00 y00 q!2 q!2 q!2)) (* (- 9) (* y00 y00 q!2 r!1 r!1)) (* (- 9) (* y00 y00 q!2 q!2 r!1 r!1)) (* (- 3) (* y00 y00 q!2 q!2 q!2 r!1 r!1)) (* 3 (* y00 q!2 r!1 r!1 r!1)) (* 3 (* y00 q!2 q!2 r!1 r!1 r!1)) (* 9 (* y00 y00 y00 q!2 q!2 r!1)) (* (- 3) (* y00 y00 y00 y00 q!2)) (* (- 3) (* y00 y00 y00 y00 q!2 q!2)) (* ?x129 ?x129 ?x129 ?x358 ?x358 ?x358) ?x452 ?x420 (* y00 r!1 r!1 r!1))))
 (let ((?x423 (* ?x426 (+ (* (- 1) r00) (* (- 1) ?x67) r!1 (* y00 q!2)))))
 (let (($x567 (= ?x423 0)))
 (let (($x421 (not $x567)))
 (let (($x569 (and (= (+ y00 (* (- 1) y!0)) 0) $x391 $x421)))
 (let ((?x77 (* (- 1) ?x67)))
 (let ((?x63 (* (- 1) r00)))
 (let ((?x517 (+ r!1 ?x63 (* q!2 y00) ?x77)))
 (let ((?x405 (+ (- 1) ?x420 (* r!1 r!1 r!1 y00) (* 3 (* q!2 r!1 r!1 r!1 y00)) (* 3 (* q!2 q!2 r!1 r!1 r!1 y00)) (* q!2 q!2 q!2 r!1 r!1 r!1 y00) (* (- 3) (* r!1 r!1 y00 y00)) (* (- 9) (* q!2 r!1 r!1 y00 y00)) (* (- 9) (* q!2 q!2 r!1 r!1 y00 y00)) (* (- 3) (* q!2 q!2 q!2 r!1 r!1 y00 y00)) (* 3 (* r!1 y00 y00 y00)) (* 9 (* q!2 r!1 y00 y00 y00)) (* 9 (* q!2 q!2 r!1 y00 y00 y00)) (* 3 (* q!2 q!2 q!2 r!1 y00 y00 y00)) ?x452 (* (- 3) (* q!2 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00 y00)) (* ?x129 ?x129 ?x129 (+ r!1 ?x62) (+ r!1 ?x62) (+ r!1 ?x62)))))
 (let (($x193 (and (= (+ y!0 ?x62) 0) (= ?x517 0) (not (= (* ?x405 ?x517) 0)))))
 (let (($x247 (exists ((q Int) (r Int) (y Int) )(! (let ((?x67 (* y00 q00)))
 (let ((?x77 (* (- 1) ?x67)))
 (let ((?x39 (* q y00)))
 (let ((?x63 (* (- 1) r00)))
 (let ((?x91 (+ r ?x63 ?x39 ?x77)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x64 (+ r ?x62)))
 (let ((?x110 (+ 1 q)))
 (let ((?x501 (* ?x110 ?x110 ?x110 ?x64 ?x64 ?x64)))
 (let ((?x452 (* (- 1) (* y00 y00 y00 y00))))
 (let ((?x138 (* (- 1) q)))
 (let ((?x561 (+ (- 1) ?x138 (* r r r y00) (* 3 (* q r r r y00)) (* 3 (* q q r r r y00)) (* q q q r r r y00) (* (- 3) (* r r y00 y00)) (* (- 9) (* q r r y00 y00)) (* (- 9) (* q q r r y00 y00)) (* (- 3) (* q q q r r y00 y00)) (* 3 (* r y00 y00 y00)) (* 9 (* q r y00 y00 y00)) (* 9 (* q q r y00 y00 y00)) (* 3 (* q q q r y00 y00 y00)) ?x452 (* (- 3) (* q y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00)) (* (- 1) (* q q q y00 y00 y00 y00)) ?x501)))
 (let (($x96 (= ?x91 0)))
 (let (($x73 (= (+ y ?x62) 0)))
 (and $x73 $x96 (not (= (* ?x561 ?x91) 0))))))))))))))))) :qid k!29))
 ))
 (let (($x243 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x226 (* (- 1) ?x36)))
 (let ((?x63 (* (- 1) r00)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x64 (+ r ?x62)))
 (let ((?x110 (+ 1 q)))
 (let ((?x501 (* ?x110 ?x110 ?x110 ?x64 ?x64 ?x64)))
 (let ((?x138 (* (- 1) q)))
 (let ((?x303 (* (+ (- 1) ?x138 (* y00 ?x110 ?x110 ?x110 ?x64 ?x64 ?x64) ?x501) (+ r ?x62 ?x63 ?x226 (* y00 ?x110)))))
 (let (($x224 (not (= ?x303 0))))
 (let (($x246 (= (+ r ?x63 ?x226 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x246 $x224)))))))))))) :qid k!29))
 ))
 (let ((?x257 (lambda ((q Int) (r Int) (y Int) )(let ((?x67 (* y00 q00)))
 (let ((?x77 (* (- 1) ?x67)))
 (let ((?x39 (* q y00)))
 (let ((?x63 (* (- 1) r00)))
 (let ((?x91 (+ r ?x63 ?x39 ?x77)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x64 (+ r ?x62)))
 (let ((?x110 (+ 1 q)))
 (let ((?x501 (* ?x110 ?x110 ?x110 ?x64 ?x64 ?x64)))
 (let ((?x452 (* (- 1) (* y00 y00 y00 y00))))
 (let ((?x138 (* (- 1) q)))
 (let ((?x561 (+ (- 1) ?x138 (* r r r y00) (* 3 (* q r r r y00)) (* 3 (* q q r r r y00)) (* q q q r r r y00) (* (- 3) (* r r y00 y00)) (* (- 9) (* q r r y00 y00)) (* (- 9) (* q q r r y00 y00)) (* (- 3) (* q q q r r y00 y00)) (* 3 (* r y00 y00 y00)) (* 9 (* q r y00 y00 y00)) (* 9 (* q q r y00 y00 y00)) (* 3 (* q q q r y00 y00 y00)) ?x452 (* (- 3) (* q y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00)) (* (- 1) (* q q q y00 y00 y00 y00)) ?x501)))
 (let (($x96 (= ?x91 0)))
 (let (($x73 (= (+ y ?x62) 0)))
 (let (($x662 (and $x73 $x96 (not (= (* ?x561 ?x91) 0)))))
 (let ((?x303 (* (+ (- 1) ?x138 (* y00 ?x110 ?x110 ?x110 ?x64 ?x64 ?x64) ?x501) (+ r ?x62 ?x63 (* (- 1) (* q00 y00)) (* y00 ?x110)))))
 (let (($x224 (not (= ?x303 0))))
 (let (($x246 (= (+ r ?x63 (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x287 (and (= (+ y00 (* (- 1) y)) 0) $x246 $x224)))
 (rewrite (= $x287 $x662))))))))))))))))))))))
 ))
 (let (($x155 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x226 (* (- 1) ?x36)))
 (let ((?x63 (* (- 1) r00)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x64 (+ r ?x62)))
 (let ((?x110 (+ 1 q)))
 (let ((?x501 (* ?x110 ?x110 ?x110 ?x64 ?x64 ?x64)))
 (let ((?x138 (* (- 1) q)))
 (let ((?x303 (* (+ (- 1) ?x138 (* y00 ?x110 ?x110 ?x110 ?x64 ?x64 ?x64) ?x501) (+ r ?x62 ?x63 ?x226 (* y00 ?x110)))))
 (let (($x224 (not (= ?x303 0))))
 (let (($x246 (= (+ r ?x63 ?x226 (* y00 q)) 0)))
 (and (= (+ ?x62 y) 0) $x246 $x224)))))))))))) :qid k!29))
 ))
 (let ((?x274 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x226 (* (- 1) ?x36)))
 (let ((?x63 (* (- 1) r00)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x64 (+ r ?x62)))
 (let ((?x110 (+ 1 q)))
 (let ((?x501 (* ?x110 ?x110 ?x110 ?x64 ?x64 ?x64)))
 (let ((?x138 (* (- 1) q)))
 (let ((?x303 (* (+ (- 1) ?x138 (* y00 ?x110 ?x110 ?x110 ?x64 ?x64 ?x64) ?x501) (+ r ?x62 ?x63 ?x226 (* y00 ?x110)))))
 (let (($x224 (not (= ?x303 0))))
 (let (($x246 (= (+ r ?x63 ?x226 (* y00 q)) 0)))
 (let (($x287 (and (= (+ y00 (* (- 1) y)) 0) $x246 $x224)))
 (let (($x162 (and (= (+ ?x62 y) 0) $x246 $x224)))
 (rewrite (= $x162 $x287))))))))))))))))
 ))
 (let (($x57 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x51 (+ (* (- 1) ?x45) (* ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 y00) (* ?x45 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let (($x53 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x51) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x53))))))) :qid k!29))
 ))
 (let ((?x228 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x226 (* (- 1) ?x36)))
 (let ((?x63 (* (- 1) r00)))
 (let ((?x62 (* (- 1) y00)))
 (let ((?x64 (+ r ?x62)))
 (let ((?x110 (+ 1 q)))
 (let ((?x501 (* ?x110 ?x110 ?x110 ?x64 ?x64 ?x64)))
 (let ((?x138 (* (- 1) q)))
 (let ((?x303 (* (+ (- 1) ?x138 (* y00 ?x110 ?x110 ?x110 ?x64 ?x64 ?x64) ?x501) (+ r ?x62 ?x63 ?x226 (* y00 ?x110)))))
 (let (($x224 (not (= ?x303 0))))
 (let (($x246 (= (+ r ?x63 ?x226 (* y00 q)) 0)))
 (let (($x162 (and (= (+ ?x62 y) 0) $x246 $x224)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x51 (+ (* (- 1) ?x45) (* ?x45 ?x45 ?x45 ?x42 ?x42 ?x42 y00) (* ?x45 ?x45 ?x45 ?x42 ?x42 ?x42))))
 (let (($x54 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x51) 0))))
 (let (($x56 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x54))))
 (rewrite (= $x56 $x162))))))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (let ((@x234 (mp (mp @x58 (quant-intro (proof-bind ?x228) (= $x57 $x155)) $x155) (rewrite (= $x155 $x155)) $x155)))
 (let ((@x496 (mp (mp @x234 (quant-intro (proof-bind ?x274) (= $x155 $x243)) $x243) (quant-intro (proof-bind ?x257) (= $x243 $x247)) $x247)))
 (let ((@x395 (mp (mp~ @x496 (sk (~ $x247 $x193)) $x193) (rewrite (= $x193 $x569)) $x569)))
 (let ((@x412 (and-elim @x395 $x391)))
 (let ((@x368 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x355)) @x412 $x355)))
 (let (($x354 (<= ?x192 0)))
 (let ((@x199 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x391) $x354)) @x412 $x354)))
 (let (($x198 (not (<= ?x423 0))))
 (let (($x255 (>= ?x423 0)))
 (let ((@x346 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x567 $x198 (not $x255))) (and-elim @x395 $x421) (or $x198 (not $x255)))))
 (let ((@x244 (unit-resolution @x346 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x255)) @x199 @x368 false) $x255) $x198)))
 ((_ th-lemma arith farkas 1 1 1) @x244 @x199 @x368 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             110
 :arith-nonlinear-bounds    8
 :arith-num-rows            6
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 38
 :arith-tableau-max-rows    6
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.57
 :memory                    3.11
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1081624
 :num-checks                1
 :propagations              6
 :rlimit-count              2544
 :time                      0.01
 :total-time                0.01)
