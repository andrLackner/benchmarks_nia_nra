unsat
((set-logic NIA)
(proof
(let (($x116 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x51 (* b00 r00)))
 (let ((?x47 (* a00 s00)))
 (let ((?x229 (* (- 1) ?x47)))
 (let ((?x242 (+ (* (- 1) (* (+ b (* (- 1) a)) r)) ?x229 (* (+ s (* (- 1) r)) a) ?x51)))
 (let (($x214 (not (= ?x242 0))))
 (let ((?x202 (+ (* (- 1) (* (+ r (* (- 1) s)) b)) ?x229 (* (+ a (* (- 1) b)) s) ?x51)))
 (let (($x250 (not (= ?x202 0))))
 (let (($x108 (or $x250 $x214)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x293 (* (- 1) ?x69)))
 (let ((?x349 (* a00 s00 p)))
 (let ((?x334 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x264 (* (- 1) (* p00 s00 a))))
 (let ((?x247 (* (- 1) (* b00 r00 p))))
 (let ((?x313 (+ ?x247 ?x264 ?x65 ?x334 ?x349 ?x293)))
 (let (($x272 (= ?x313 0)))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let ((?x259 (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59)))
 (let (($x321 (= ?x259 0)))
 (let (($x280 (= (+ (* (- 1) (* r b)) ?x229 (* s a) ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x127 (* (- 1) ?x37)))
 (let (($x269 (= (+ (* (- 1) (* r q)) (* s p) ?x127 ?x41) 0)))
 (and $x269 $x280 $x321 $x272 $x224 $x108)))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x314 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! false :qid k!38))
 ))
 (let ((?x319 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x51 (* b00 r00)))
 (let ((?x47 (* a00 s00)))
 (let ((?x229 (* (- 1) ?x47)))
 (let ((?x242 (+ (* (- 1) (* (+ b (* (- 1) a)) r)) ?x229 (* (+ s (* (- 1) r)) a) ?x51)))
 (let (($x214 (not (= ?x242 0))))
 (let ((?x202 (+ (* (- 1) (* (+ r (* (- 1) s)) b)) ?x229 (* (+ a (* (- 1) b)) s) ?x51)))
 (let (($x250 (not (= ?x202 0))))
 (let (($x108 (or $x250 $x214)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x293 (* (- 1) ?x69)))
 (let ((?x349 (* a00 s00 p)))
 (let ((?x334 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x264 (* (- 1) (* p00 s00 a))))
 (let ((?x247 (* (- 1) (* b00 r00 p))))
 (let ((?x313 (+ ?x247 ?x264 ?x65 ?x334 ?x349 ?x293)))
 (let (($x272 (= ?x313 0)))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let ((?x259 (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59)))
 (let (($x321 (= ?x259 0)))
 (let (($x280 (= (+ (* (- 1) (* r b)) ?x229 (* s a) ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x127 (* (- 1) ?x37)))
 (let (($x269 (= (+ (* (- 1) (* r q)) (* s p) ?x127 ?x41) 0)))
 (let (($x282 (and $x269 $x280 $x321 $x272 $x224 $x108)))
 (let ((?x136 (* r00 b00)))
 (let ((?x125 (* (- 1) (* s00 a00))))
 (let ((?x113 (* (- 1) (* b r))))
 (let ((?x49 (* a s)))
 (let (($x151 (= (+ ?x49 ?x113 ?x125 ?x136) 0)))
 (let (($x226 (not $x151)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x302 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x307 (= ?x302 0)))
 (let ((?x215 (* r q00 a00)))
 (let ((?x181 (* p r00 b00)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x238 (+ ?x63 (* (- 1) (* a q00 r00)) ?x181 (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) ?x215)))
 (let (($x239 (= ?x238 0)))
 (let ((?x129 (* p00 b00)))
 (let ((?x114 (* a q)))
 (let (($x173 (= (+ ?x114 (* (- 1) (* q00 a00)) ?x129 (* (- 1) (* p b))) 0)))
 (let (($x146 (= (+ (* p s) ?x127 ?x41 (* (- 1) (* q r))) 0)))
 (let (($x157 (and $x146 $x151 $x173 $x239 $x307 $x226)))
 (let ((@x301 (monotonicity (rewrite (= $x250 $x226)) (rewrite (= $x214 $x226)) (= $x108 (or $x226 $x226)))))
 (let ((?x322 (* (- 1) ?x215)))
 (let ((?x204 (* p s00 a00)))
 (let ((?x201 (* r p00 b00)))
 (let ((?x183 (* (- 1) ?x181)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x185 (* (- 1) ?x63)))
 (let ((?x271 (+ ?x185 ?x66 ?x183 ?x201 ?x204 ?x322)))
 (let (($x270 (= ?x271 0)))
 (let ((@x276 (monotonicity (rewrite (= ?x247 ?x183)) (rewrite (= ?x264 ?x185)) (rewrite (= ?x65 ?x201)) (rewrite (= ?x334 ?x66)) (rewrite (= ?x349 ?x204)) (rewrite (= ?x293 ?x322)) (= ?x313 (+ ?x183 ?x185 ?x201 ?x66 ?x204 ?x322)))))
 (let ((@x294 (trans @x276 (rewrite (= (+ ?x183 ?x185 ?x201 ?x66 ?x204 ?x322) ?x271)) (= ?x313 ?x271))))
 (let ((@x192 (trans (monotonicity @x294 (= $x272 $x270)) (rewrite (= $x270 $x239)) (= $x272 $x239))))
 (let ((?x156 (* p b)))
 (let ((?x124 (* q00 a00)))
 (let ((?x265 (+ (* (- 1) ?x114) ?x124 (* (- 1) ?x129) ?x156)))
 (let (($x120 (= ?x265 0)))
 (let ((@x356 (trans (monotonicity (rewrite (= ?x259 ?x265)) (= $x321 $x120)) (rewrite (= $x120 $x173)) (= $x321 $x173))))
 (let ((@x159 (monotonicity (rewrite (= $x269 $x146)) (rewrite (= $x280 $x151)) @x356 @x192 (rewrite (= $x224 $x307)) (trans @x301 (rewrite (= (or $x226 $x226) $x226)) (= $x108 $x226)) (= $x282 $x157))))
 (trans @x159 (rewrite (= $x157 false)) (= $x282 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x342 (trans (quant-intro (proof-bind ?x319) (= $x116 $x314)) (elim-unused (= $x314 false)) (= $x116 false))))
 (let (($x102 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x51 (* b00 r00)))
 (let ((?x97 (+ (- (* (- 1) (- b a) r) (* a00 s00)) (* a (- s r)) ?x51)))
 (let ((?x89 (+ (- (* (- 1) b (- r s)) (* a00 s00)) (* (- a b) s) ?x51)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* (- 1) a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x42 (+ (- (+ (* (- 1) q r) (* p s)) (* p00 s00)) ?x41)))
 (and (= ?x42 0) $x53 (= ?x60 0) (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= ?x89 0)) (not (= ?x97 0))))))))))))))))))) :qid k!38))
 ))
 (let ((?x351 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x51 (* b00 r00)))
 (let ((?x47 (* a00 s00)))
 (let ((?x229 (* (- 1) ?x47)))
 (let ((?x242 (+ (* (- 1) (* (+ b (* (- 1) a)) r)) ?x229 (* (+ s (* (- 1) r)) a) ?x51)))
 (let (($x214 (not (= ?x242 0))))
 (let ((?x202 (+ (* (- 1) (* (+ r (* (- 1) s)) b)) ?x229 (* (+ a (* (- 1) b)) s) ?x51)))
 (let (($x250 (not (= ?x202 0))))
 (let (($x108 (or $x250 $x214)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x293 (* (- 1) ?x69)))
 (let ((?x349 (* a00 s00 p)))
 (let ((?x334 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x264 (* (- 1) (* p00 s00 a))))
 (let ((?x247 (* (- 1) (* b00 r00 p))))
 (let ((?x313 (+ ?x247 ?x264 ?x65 ?x334 ?x349 ?x293)))
 (let (($x272 (= ?x313 0)))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let ((?x259 (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59)))
 (let (($x321 (= ?x259 0)))
 (let (($x280 (= (+ (* (- 1) (* r b)) ?x229 (* s a) ?x51) 0)))
 (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x127 (* (- 1) ?x37)))
 (let (($x269 (= (+ (* (- 1) (* r q)) (* s p) ?x127 ?x41) 0)))
 (let (($x282 (and $x269 $x280 $x321 $x272 $x224 $x108)))
 (let ((?x97 (+ (- (* (- 1) (- b a) r) ?x47) (* a (- s r)) ?x51)))
 (let ((?x89 (+ (- (* (- 1) b (- r s)) ?x47) (* (- a b) s) ?x51)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) ?x55) (* b00 p00)) ?x59) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (let (($x101 (and $x44 (= (+ (- (* (- 1) b r) ?x47) (* a s) ?x51) 0) $x61 (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= ?x89 0)) (not (= ?x97 0))))))
 (rewrite (= $x101 $x282)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x198 (mp (mp @x103 (quant-intro (proof-bind ?x351) (= $x102 $x116)) $x116) (rewrite (= $x116 $x116)) $x116)))
 (mp @x198 @x342 false)))))))))))

(:max-memory   19.34
 :memory       19.06
 :num-allocs   340115
 :num-checks   1
 :rlimit-count 889
 :time         0.01
 :total-time   0.02)
