unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x284 (* r!1 r!1)))
 (let ((?x1097 (* (- 1) r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1321 (* (- 1) ?x36)))
 (let ((?x1306 (* (- 2) x00)))
 (let ((?x915 (+ r00 ?x1306 ?x1321 (* 2 x!0) ?x1097 ?x284)))
 (let (($x738 (<= ?x915 0)))
 (let (($x923 (= ?x915 0)))
 (let ((?x258 (+ x!0 ?x1097)))
 (let ((?x1140 (+ 1 r!1)))
 (let ((?x867 (* (- 1) (* x!0 x!0))))
 (let ((?x1115 (* (- 2) (* x!0 x!0 x!0))))
 (let ((?x488 (* 8 (* r!1 r!1 r!1 r!1))))
 (let ((?x486 (* 4 (* r!1 r!1 r!1))))
 (let ((?x496 (* 4 (* r!1 r!1 r!1 r!1 r!1))))
 (let ((?x946 (+ (* r00 r00 x!0 x!0) (* (- 2) (* x00 r!1)) (* (- 4) (* x!0 x!0 x!0 r!1)) (* (- 2) (* r00 r00 x!0 r!1 r!1 r!1)) (* (- 17) (* x!0 r!1 r!1 r!1)) (* 13 (* x!0 x!0 r!1 r!1)) ?x496 (* (- 7) (* x!0 r!1 r!1)) (* (- 9) (* x!0 r!1 r!1 r!1 r!1)) (* (- 1) (* r00 r00 r!1 r!1)) (* r00 r00 r!1 r!1 r!1) (* (- 6) (* x00 x!0 r!1 r!1)) ?x486 ?x488 (* (- 3) (* r00 r00 x!0 r!1 r!1)) (* r00 r00 r!1 r!1 r!1 r!1) (* (- 2) (* r00 x!0 x!0 r!1)) (* (- 1) (* r00 x!0 x!0 r!1 r!1)) (* 2 (* r00 r00 x!0 x!0 r!1)) (* r00 r00 x!0 x!0 r!1 r!1) (* 2 (* x00 x!0 x!0)) (* 4 (* x00 x!0 x!0 r!1)) (* 2 (* x00 x!0 x!0 r!1 r!1)) (* (- 2) (* x00 r!1 r!1)) (* 2 (* x00 r!1 r!1 r!1)) (* 2 (* x00 r!1 r!1 r!1 r!1)) (* (- 4) (* x00 x!0 r!1 r!1 r!1)) ?x1115 ?x867 (* (- 1) (* ?x1140 ?x1140 ?x1140 ?x1140 ?x258 ?x258)) (* (- 1) (* r00 x!0 x!0)) (* x!0 r!1) (* (- 1) (* r00 x!0)) (* r00 r!1) (* 3 (* r00 x!0 r!1 r!1)) (* (- 1) (* r00 r!1 r!1 r!1)) (* (- 1) (* r00 r!1 r!1 r!1 r!1)) (* 2 (* x00 x!0)) (* r00 r!1 r!1) (* 2 (* r00 x!0 r!1 r!1 r!1)) (* r00 r00 x!0) (* (- 1) (* r00 r00 r!1)) (* 5 (* x!0 x!0 r!1)) (* 7 (* x!0 x!0 r!1 r!1 r!1)) (* (- 2) (* x!0 x!0 x!0 r!1 r!1)))))
 (let (($x942 (= ?x946 0)))
 (let (($x1130 (not $x942)))
 (let (($x122 (and $x923 $x1130)))
 (let ((?x891 (+ (* 2 (* x!0 x00)) (* (- 6) (* r!1 r!1 x!0 x00)) (* r!1 r!1 r00) (* (- 1) (* r!1 r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* 2 (* r!1 r!1 r!1 x!0 r00)) (* (- 1) (* x!0 x!0 r00)) (* (- 2) (* r!1 x!0 x!0 r00)) (* (- 1) (* r!1 r!1 x!0 x!0 r00)) (* r!1 x!0) (* (- 7) (* r!1 r!1 x!0)) (* (- 17) (* r!1 r!1 r!1 x!0)) ?x486 ?x488 (* (- 9) (* r!1 r!1 r!1 r!1 x!0)) ?x496 (* (- 1) (* r!1 r!1 r00 r00)) (* r!1 r!1 r!1 r00 r00) (* r!1 r!1 r!1 r!1 r00 r00) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* (- 2) (* r!1 r!1 r!1 x!0 r00 r00)) (* x!0 x!0 r00 r00) (* 2 (* r!1 x!0 x!0 r00 r00)) (* r!1 r!1 x!0 x!0 r00 r00) (* 2 (* x!0 x!0 x00)) (* 4 (* r!1 x!0 x!0 x00)) (* 2 (* r!1 r!1 x!0 x!0 x00)) (* (- 2) (* r!1 r!1 x00)) (* 2 (* r!1 r!1 r!1 x00)) (* 2 (* r!1 r!1 r!1 r!1 x00)) (* (- 4) (* r!1 r!1 r!1 x!0 x00)) (* (- 1) (* ?x1140 ?x1140 ?x1140 ?x1140 (+ ?x1097 x!0) (+ ?x1097 x!0))) ?x1115 (* (- 4) (* r!1 x!0 x!0 x!0)) (* (- 2) (* r!1 r!1 x!0 x!0 x!0)) ?x867 (* 5 (* r!1 x!0 x!0)) (* 13 (* r!1 r!1 x!0 x!0)) (* 7 (* r!1 r!1 r!1 x!0 x!0)) (* (- 1) (* r!1 r00 r00)) (* x!0 r00 r00) (* r!1 r00) (* (- 1) (* x!0 r00)) (* (- 2) (* r!1 x00)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x899 (and (= (+ r!1 (* (- 2) x!0) ?x125 (* (- 1) ?x284) ?x35 ?x36) 0) (not (= ?x891 0)))))
 (let (($x717 (exists ((r Int) (x Int) )(! (let ((?x1436 (* (- 1) (* x r00))))
 (let ((?x1300 (* r r00)))
 (let ((?x1223 (* x r00 r00)))
 (let ((?x1200 (* (- 1) (* r r00 r00))))
 (let ((?x1109 (* (- 1) (* x x))))
 (let ((?x1422 (* (- 2) (* r r x x x))))
 (let ((?x1391 (* (- 2) (* x x x))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x141 (+ ?x75 x)))
 (let ((?x135 (+ 1 r)))
 (let ((?x1390 (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x141 ?x141))))
 (let ((?x1389 (* (- 4) (* r r r x x00))))
 (let ((?x1388 (* 2 (* r r r r x00))))
 (let ((?x732 (* 2 (* r r x x x00))))
 (let ((?x1385 (* 4 (* r x x x00))))
 (let ((?x726 (* 2 (* x x x00))))
 (let ((?x639 (* r r x x r00 r00)))
 (let ((?x649 (* 2 (* r x x r00 r00))))
 (let ((?x628 (* x x r00 r00)))
 (let ((?x648 (* (- 2) (* r r r x r00 r00))))
 (let ((?x1384 (* (- 3) (* r r x r00 r00))))
 (let ((?x562 (* r r r r r00 r00)))
 (let ((?x550 (* r r r r00 r00)))
 (let ((?x666 (* (- 1) (* r r r00 r00))))
 (let ((?x336 (* r x)))
 (let ((?x1376 (* (- 1) (* r r x x r00))))
 (let ((?x1375 (* (- 2) (* r x x r00))))
 (let ((?x1374 (* (- 1) (* x x r00))))
 (let ((?x1373 (* 2 (* r r r x r00))))
 (let ((?x1372 (* 3 (* r r x r00))))
 (let ((?x1371 (* (- 1) (* r r r r r00))))
 (let ((?x1325 (* (- 1) (* r r r r00))))
 (let ((?x197 (* r r r00)))
 (let ((?x1370 (* (- 6) (* r r x x00))))
 (let ((?x1368 (* 2 (* x x00))))
 (let ((?x1623 (+ ?x1368 ?x1370 ?x197 ?x1325 ?x1371 ?x1372 ?x1373 ?x1374 ?x1375 ?x1376 ?x336 (* (- 7) (* r r x)) (* (- 17) (* r r r x)) (* 4 (* r r r)) (* 8 (* r r r r)) (* (- 9) (* r r r r x)) (* 4 (* r r r r r)) ?x666 ?x550 ?x562 ?x1384 ?x648 ?x628 ?x649 ?x639 ?x726 ?x1385 ?x732 (* (- 2) (* r r x00)) (* 2 (* r r r x00)) ?x1388 ?x1389 ?x1390 ?x1391 (* (- 4) (* r x x x)) ?x1422 ?x1109 (* 5 (* r x x)) (* 13 (* r r x x)) (* 7 (* r r r x x)) ?x1200 ?x1223 ?x1300 ?x1436 (* (- 2) (* r x00)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (and $x128 (not (= ?x1623 0)))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1309 (exists ((r Int) (x Int) )(! (let ((?x75 (* (- 1) r)))
 (let ((?x1315 (+ x ?x75)))
 (let ((?x135 (+ 1 r)))
 (let ((?x1181 (* r00 ?x135 ?x135 ?x1315)))
 (let ((?x834 (* r00 r00 ?x135 ?x135 ?x1315)))
 (let ((?x814 (* ?x135 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x768 (* r00 r00 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1323 (* ?x135 ?x135 ?x135 ?x1315)))
 (let ((?x1302 (+ (* 2 (* x00 ?x135 ?x135 ?x1315)) (* (- 1) (* r00 ?x135 ?x135 ?x1315 ?x1315)) ?x1323 (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x1315)) ?x768 (* 2 (* x00 ?x135 ?x135 ?x1315 ?x1315)) (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x1315 ?x1315)) (* (- 2) (* ?x135 ?x135 ?x1315 ?x1315 ?x1315)) ?x814 (* (- 2) (* ?x135 ?x135 ?x1315 ?x1315)) ?x834 (* (- 1) ?x1181))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) (not (= ?x1302 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x722 (lambda ((r Int) (x Int) )(let ((?x1436 (* (- 1) (* x r00))))
 (let ((?x1300 (* r r00)))
 (let ((?x1223 (* x r00 r00)))
 (let ((?x1200 (* (- 1) (* r r00 r00))))
 (let ((?x1109 (* (- 1) (* x x))))
 (let ((?x1422 (* (- 2) (* r r x x x))))
 (let ((?x1391 (* (- 2) (* x x x))))
 (let ((?x75 (* (- 1) r)))
 (let ((?x141 (+ ?x75 x)))
 (let ((?x135 (+ 1 r)))
 (let ((?x1390 (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x141 ?x141))))
 (let ((?x1389 (* (- 4) (* r r r x x00))))
 (let ((?x1388 (* 2 (* r r r r x00))))
 (let ((?x732 (* 2 (* r r x x x00))))
 (let ((?x1385 (* 4 (* r x x x00))))
 (let ((?x726 (* 2 (* x x x00))))
 (let ((?x639 (* r r x x r00 r00)))
 (let ((?x649 (* 2 (* r x x r00 r00))))
 (let ((?x628 (* x x r00 r00)))
 (let ((?x648 (* (- 2) (* r r r x r00 r00))))
 (let ((?x1384 (* (- 3) (* r r x r00 r00))))
 (let ((?x562 (* r r r r r00 r00)))
 (let ((?x550 (* r r r r00 r00)))
 (let ((?x666 (* (- 1) (* r r r00 r00))))
 (let ((?x336 (* r x)))
 (let ((?x1376 (* (- 1) (* r r x x r00))))
 (let ((?x1375 (* (- 2) (* r x x r00))))
 (let ((?x1374 (* (- 1) (* x x r00))))
 (let ((?x1373 (* 2 (* r r r x r00))))
 (let ((?x1372 (* 3 (* r r x r00))))
 (let ((?x1371 (* (- 1) (* r r r r r00))))
 (let ((?x1325 (* (- 1) (* r r r r00))))
 (let ((?x197 (* r r r00)))
 (let ((?x1370 (* (- 6) (* r r x x00))))
 (let ((?x1368 (* 2 (* x x00))))
 (let ((?x1623 (+ ?x1368 ?x1370 ?x197 ?x1325 ?x1371 ?x1372 ?x1373 ?x1374 ?x1375 ?x1376 ?x336 (* (- 7) (* r r x)) (* (- 17) (* r r r x)) (* 4 (* r r r)) (* 8 (* r r r r)) (* (- 9) (* r r r r x)) (* 4 (* r r r r r)) ?x666 ?x550 ?x562 ?x1384 ?x648 ?x628 ?x649 ?x639 ?x726 ?x1385 ?x732 (* (- 2) (* r r x00)) (* 2 (* r r r x00)) ?x1388 ?x1389 ?x1390 ?x1391 (* (- 4) (* r x x x)) ?x1422 ?x1109 (* 5 (* r x x)) (* 13 (* r r x x)) (* 7 (* r r r x x)) ?x1200 ?x1223 ?x1300 ?x1436 (* (- 2) (* r x00)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let ((?x124 (* (- 2) x)))
 (let (($x128 (= (+ r ?x124 ?x125 ?x126 ?x35 ?x36) 0)))
 (let (($x1629 (and $x128 (not (= ?x1623 0)))))
 (let ((?x1315 (+ x ?x75)))
 (let ((?x834 (* r00 r00 ?x135 ?x135 ?x1315)))
 (let ((?x814 (* ?x135 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x768 (* r00 r00 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1323 (* ?x135 ?x135 ?x135 ?x1315)))
 (let ((?x1302 (+ (* 2 (* x00 ?x135 ?x135 ?x1315)) (* (- 1) (* r00 ?x135 ?x135 ?x1315 ?x1315)) ?x1323 (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x1315)) ?x768 (* 2 (* x00 ?x135 ?x135 ?x1315 ?x1315)) (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x1315 ?x1315)) (* (- 2) (* ?x135 ?x135 ?x1315 ?x1315 ?x1315)) ?x814 (* (- 2) (* ?x135 ?x135 ?x1315 ?x1315)) ?x834 (* (- 1) (* r00 ?x135 ?x135 ?x1315)))))
 (let (($x1297 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) (not (= ?x1302 0)))))
 (rewrite (= $x1297 $x1629))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1291 (exists ((r Int) (x Int) )(! (let ((?x75 (* (- 1) r)))
 (let ((?x1315 (+ x ?x75)))
 (let ((?x135 (+ 1 r)))
 (let ((?x1181 (* r00 ?x135 ?x135 ?x1315)))
 (let ((?x715 (* ?x135 ?x135 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1339 (* ?x135 ?x135 ?x135 ?x135 ?x1315)))
 (let ((?x1289 (* r00 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1208 (+ (* (- 2) (* x00 ?x135 ?x135 ?x1315)) ?x1289 (* (- 1) (* ?x135 ?x135 ?x135 ?x1315)) ?x1339 (* (- 1) (* r00 r00 ?x135 ?x135 ?x1315 ?x1315)) (* (- 2) (* x00 ?x135 ?x135 ?x1315 ?x1315)) ?x715 (* 2 (* ?x135 ?x135 ?x1315 ?x1315 ?x1315)) (* (- 1) (* ?x135 ?x135 ?x135 ?x1315 ?x1315)) (* 2 (* ?x135 ?x135 ?x1315 ?x1315)) (* (- 1) (* r00 r00 ?x135 ?x135 ?x1315)) ?x1181)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1321 (* (- 1) ?x36)))
 (let ((?x1306 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x75 r00 ?x30 ?x32 ?x1306 ?x1321) 0) (not (= ?x1208 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x1311 (lambda ((r Int) (x Int) )(let ((?x75 (* (- 1) r)))
 (let ((?x1315 (+ x ?x75)))
 (let ((?x135 (+ 1 r)))
 (let ((?x1181 (* r00 ?x135 ?x135 ?x1315)))
 (let ((?x834 (* r00 r00 ?x135 ?x135 ?x1315)))
 (let ((?x814 (* ?x135 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x768 (* r00 r00 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1323 (* ?x135 ?x135 ?x135 ?x1315)))
 (let ((?x1302 (+ (* 2 (* x00 ?x135 ?x135 ?x1315)) (* (- 1) (* r00 ?x135 ?x135 ?x1315 ?x1315)) ?x1323 (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x1315)) ?x768 (* 2 (* x00 ?x135 ?x135 ?x1315 ?x1315)) (* (- 1) (* ?x135 ?x135 ?x135 ?x135 ?x1315 ?x1315)) (* (- 2) (* ?x135 ?x135 ?x1315 ?x1315 ?x1315)) ?x814 (* (- 2) (* ?x135 ?x135 ?x1315 ?x1315)) ?x834 (* (- 1) ?x1181))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x124 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x126 (* (- 1) ?x30)))
 (let ((?x125 (* (- 1) r00)))
 (let (($x1297 (and (= (+ r ?x125 ?x126 ?x124 ?x35 ?x36) 0) (not (= ?x1302 0)))))
 (let ((?x715 (* ?x135 ?x135 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1339 (* ?x135 ?x135 ?x135 ?x135 ?x1315)))
 (let ((?x1289 (* r00 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1208 (+ (* (- 2) (* x00 ?x135 ?x135 ?x1315)) ?x1289 (* (- 1) ?x1323) ?x1339 (* (- 1) ?x768) (* (- 2) (* x00 ?x135 ?x135 ?x1315 ?x1315)) ?x715 (* 2 (* ?x135 ?x135 ?x1315 ?x1315 ?x1315)) (* (- 1) ?x814) (* 2 (* ?x135 ?x135 ?x1315 ?x1315)) (* (- 1) ?x834) ?x1181)))
 (let (($x1331 (= (+ ?x75 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x1303 (and $x1331 (not (= ?x1208 0)))))
 (rewrite (= $x1303 $x1297)))))))))))))))))))))))))
 ))
 (let (($x70 (exists ((r Int) (x Int) )(! (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x46 (+ (* (- 2) ?x42 ?x42 ?x43 x00) (* ?x42 ?x42 r00 ?x43 ?x43))))
 (let ((?x53 (- (+ (- ?x46 (* ?x42 ?x42 ?x42 ?x43)) (* ?x42 ?x42 ?x42 ?x42 ?x43)) (* ?x42 ?x42 r00 r00 ?x43 ?x43))))
 (let ((?x57 (+ (- ?x53 (* 2 ?x42 ?x42 ?x43 ?x43 x00)) (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43) (* 2 ?x42 ?x42 ?x43 ?x43 ?x43))))
 (let ((?x61 (+ (- ?x57 (* ?x42 ?x42 ?x42 ?x43 ?x43)) (* 2 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x65 (+ (- ?x61 (* ?x42 ?x42 r00 r00 ?x43)) (* ?x42 ?x42 r00 ?x43))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x65 0)))))))))))))) :qid k!26))
 ))
 (let ((?x226 (lambda ((r Int) (x Int) )(let ((?x75 (* (- 1) r)))
 (let ((?x1315 (+ x ?x75)))
 (let ((?x135 (+ 1 r)))
 (let ((?x1181 (* r00 ?x135 ?x135 ?x1315)))
 (let ((?x715 (* ?x135 ?x135 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1339 (* ?x135 ?x135 ?x135 ?x135 ?x1315)))
 (let ((?x1289 (* r00 ?x135 ?x135 ?x1315 ?x1315)))
 (let ((?x1208 (+ (* (- 2) (* x00 ?x135 ?x135 ?x1315)) ?x1289 (* (- 1) (* ?x135 ?x135 ?x135 ?x1315)) ?x1339 (* (- 1) (* r00 r00 ?x135 ?x135 ?x1315 ?x1315)) (* (- 2) (* x00 ?x135 ?x135 ?x1315 ?x1315)) ?x715 (* 2 (* ?x135 ?x135 ?x1315 ?x1315 ?x1315)) (* (- 1) (* ?x135 ?x135 ?x135 ?x1315 ?x1315)) (* 2 (* ?x135 ?x135 ?x1315 ?x1315)) (* (- 1) (* r00 r00 ?x135 ?x135 ?x1315)) ?x1181)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1321 (* (- 1) ?x36)))
 (let ((?x1306 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x1303 (and (= (+ ?x75 r00 ?x30 ?x32 ?x1306 ?x1321) 0) (not (= ?x1208 0)))))
 (let ((?x43 (- x r)))
 (let ((?x42 (+ r 1)))
 (let ((?x46 (+ (* (- 2) ?x42 ?x42 ?x43 x00) (* ?x42 ?x42 r00 ?x43 ?x43))))
 (let ((?x53 (- (+ (- ?x46 (* ?x42 ?x42 ?x42 ?x43)) (* ?x42 ?x42 ?x42 ?x42 ?x43)) (* ?x42 ?x42 r00 r00 ?x43 ?x43))))
 (let ((?x57 (+ (- ?x53 (* 2 ?x42 ?x42 ?x43 ?x43 x00)) (* ?x42 ?x42 ?x42 ?x42 ?x43 ?x43) (* 2 ?x42 ?x42 ?x43 ?x43 ?x43))))
 (let ((?x61 (+ (- ?x57 (* ?x42 ?x42 ?x42 ?x43 ?x43)) (* 2 ?x42 ?x42 ?x43 ?x43))))
 (let ((?x65 (+ (- ?x61 (* ?x42 ?x42 r00 r00 ?x43)) (* ?x42 ?x42 r00 ?x43))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x69 (and (= ?x38 0) (or (not (= ?x65 0))))))
 (rewrite (= $x69 $x1303))))))))))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x1312 (mp (mp @x71 (quant-intro (proof-bind ?x226) (= $x70 $x1291)) $x1291) (rewrite (= $x1291 $x1291)) $x1291)))
 (let ((@x275 (mp (mp @x1312 (quant-intro (proof-bind ?x1311) (= $x1291 $x1309)) $x1309) (quant-intro (proof-bind ?x722) (= $x1309 $x717)) $x717)))
 (let ((@x1124 (mp (mp~ @x275 (sk (~ $x717 $x899)) $x899) (rewrite (= $x899 $x122)) $x122)))
 (let ((@x1123 (and-elim @x1124 $x923)))
 (let ((@x505 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x923) $x738)) @x1123 $x738)))
 (let (($x736 (>= ?x915 0)))
 (let ((@x917 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x923) $x736)) @x1123 $x736)))
 (let (($x1094 (not (>= ?x946 0))))
 (let (($x735 (<= ?x946 0)))
 (let ((@x945 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x942 (not $x735) $x1094)) (and-elim @x1124 $x1130) (or (not $x735) $x1094))))
 (let ((@x1099 (unit-resolution @x945 (lemma ((_ th-lemma arith) (hypothesis (not $x735)) @x917 @x505 false) $x735) $x1094)))
 ((_ th-lemma arith) @x1099 @x917 @x505 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        23
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             404
 :arith-nonlinear-bounds    20
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 72
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.77
 :memory                    3.25
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1309376
 :num-checks                1
 :propagations              4
 :rlimit-count              7021
 :time                      0.01
 :total-time                0.02)
