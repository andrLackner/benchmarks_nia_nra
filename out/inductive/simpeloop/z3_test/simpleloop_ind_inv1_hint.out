unsat
((set-logic NIA)
(declare-fun i!1 () Int)
(declare-fun i!0 () Int)
(proof
(let (($x686 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let (($x109 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (or $x113 $x109))))) :pattern ( (inv i) ) :qid k!58))
 ))
 (let ((?x214 (inv i!1)))
 (let (($x215 (= ?x214 0)))
 (let (($x216 (not $x215)))
 (let ((?x211 (+ 1 i!1)))
 (let ((?x212 (inv ?x211)))
 (let (($x213 (= ?x212 0)))
 (let (($x209 (>= i!1 0)))
 (let (($x210 (not $x209)))
 (let (($x217 (or $x210 $x213 $x216)))
 (let ((?x2301 (y i!1)))
 (let ((?x2306 (* (- 1) ?x2301)))
 (let ((?x2297 (x i!1)))
 (let ((?x2305 (* (- 1) ?x2297)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let ((?x2342 (+ ?x25 ?x28 ?x214 ?x2305 ?x2306)))
 (let (($x2364 (<= ?x2342 0)))
 (let (($x2346 (= ?x2342 0)))
 (let (($x2344 (not $x2346)))
 (let ((?x2221 (y ?x211)))
 (let ((?x2334 (+ ?x2221 ?x2306)))
 (let (($x2335 (= ?x2334 1)))
 (let (($x2340 (not $x2335)))
 (let ((?x2214 (x ?x211)))
 (let ((?x2319 (+ ?x2214 ?x2305)))
 (let (($x2320 (= ?x2319 (- 1))))
 (let (($x2325 (not $x2320)))
 (let (($x2348 (or $x2325 $x2340 $x2344)))
 (let (($x2345 (not $x2348)))
 (let (($x218 (not $x217)))
 (let ((@x3088 (hypothesis $x218)))
 (let ((@x3089 (unit-resolution (def-axiom (or $x217 $x209)) @x3088 $x209)))
 (let (($x678 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let (($x142 (= (+ ?x25 ?x28 (* (- 1) (x i)) (* (- 1) (y i)) ?x47) 0)))
 (let (($x249 (or (not (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)) (not (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))) (not $x142))))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (or $x113 (not $x249))))))))) :pattern ( (x i) ) :pattern ( (y i) ) :pattern ( (inv i) ) :qid k!46))
 ))
 (let (($x255 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let (($x142 (= (+ ?x25 ?x28 (* (- 1) (x i)) (* (- 1) (y i)) ?x47) 0)))
 (let (($x249 (or (not (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)) (not (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))) (not $x142))))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (or $x113 (not $x249))))))))) :qid k!46))
 ))
 (let ((?x681 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let (($x142 (= (+ ?x25 ?x28 (* (- 1) (x i)) (* (- 1) (y i)) ?x47) 0)))
 (let (($x249 (or (not (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)) (not (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))) (not $x142))))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (let (($x253 (or $x113 (not $x249))))
 (refl (= $x253 $x253)))))))))))
 ))
 (let (($x121 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let (($x142 (= (+ ?x25 ?x28 (* (- 1) (x i)) (* (- 1) (y i)) ?x47) 0)))
 (let (($x98 (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))))
 (let (($x82 (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)))
 (let (($x147 (and $x82 $x98 $x142)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (or $x113 $x147)))))))))) :qid k!46))
 ))
 (let ((?x257 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let (($x142 (= (+ ?x25 ?x28 (* (- 1) (x i)) (* (- 1) (y i)) ?x47) 0)))
 (let (($x249 (or (not (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)) (not (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))) (not $x142))))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (let (($x253 (or $x113 (not $x249))))
 (let (($x98 (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))))
 (let (($x82 (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)))
 (let (($x147 (and $x82 $x98 $x142)))
 (let (($x114 (or $x113 $x147)))
 (rewrite (= $x114 $x253)))))))))))))))
 ))
 (let ((?x185 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let (($x142 (= (+ ?x25 ?x28 (* (- 1) (x i)) (* (- 1) (y i)) ?x47) 0)))
 (let (($x98 (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))))
 (let (($x82 (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)))
 (let (($x147 (and $x82 $x98 $x142)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (let (($x114 (or $x113 $x147)))
 (refl (~ $x114 $x114)))))))))))))
 ))
 (let (($x163 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let (($x180 (= ?x47 (+ (x i) (* (- 1) (y 0)) (* (- 1) (x 0)) (y i)))))
 (let (($x65 (and (= (x (+ 1 i)) (+ (- 1) (x i))) (= (y (+ 1 i)) (+ 1 (y i))) $x180)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (or $x113 $x65)))))) :qid k!46))
 ))
 (let ((?x191 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let ((?x28 (y 0)))
 (let ((?x25 (x 0)))
 (let (($x142 (= (+ ?x25 ?x28 (* (- 1) (x i)) (* (- 1) (y i)) ?x47) 0)))
 (let (($x98 (= (+ (y i) (* (- 1) (y (+ 1 i)))) (- 1))))
 (let (($x82 (= (+ (x i) (* (- 1) (x (+ 1 i)))) 1)))
 (let (($x147 (and $x82 $x98 $x142)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (let (($x114 (or $x113 $x147)))
 (let (($x65 (and (= (x (+ 1 i)) (+ (- 1) (x i))) (= (y (+ 1 i)) (+ 1 (y i))) (= ?x47 (+ (x i) (* (- 1) ?x28) (* (- 1) ?x25) (y i))))))
 (let (($x158 (or $x113 $x65)))
 (rewrite (= $x158 $x114)))))))))))))))
 ))
 (let (($x54 (forall ((i Int) )(! (let (($x52 (and (= (x (+ i 1)) (- (x i) 1)) (= (y (+ i 1)) (+ (y i) 1)) (= (inv i) (+ (- (- (x i) (y 0)) (x 0)) (y i))))))
 (let (($x36 (>= i 0)))
 (=> $x36 $x52))) :qid k!46))
 ))
 (let ((?x164 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let (($x180 (= ?x47 (+ (x i) (* (- 1) (y 0)) (* (- 1) (x 0)) (y i)))))
 (let (($x65 (and (= (x (+ 1 i)) (+ (- 1) (x i))) (= (y (+ 1 i)) (+ 1 (y i))) $x180)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (let (($x158 (or $x113 $x65)))
 (let (($x52 (and (= (x (+ i 1)) (- (x i) 1)) (= (y (+ i 1)) (+ (y i) 1)) (= ?x47 (+ (- (- (x i) (y 0)) (x 0)) (y i))))))
 (let (($x53 (=> $x36 $x52)))
 (trans (monotonicity (rewrite (= $x52 $x65)) (= $x53 (=> $x36 $x65))) (rewrite (= (=> $x36 $x65) $x158)) (= $x53 $x158)))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x174 (mp (mp @x55 (quant-intro (proof-bind ?x164) (= $x54 $x163)) $x163) (rewrite (= $x163 $x163)) $x163)))
 (let ((@x190 (mp~ (mp @x174 (quant-intro (proof-bind ?x191) (= $x163 $x121)) $x121) (nnf-pos (proof-bind ?x185) (~ $x121 $x121)) $x121)))
 (let ((@x685 (mp (mp @x190 (quant-intro (proof-bind ?x257) (= $x121 $x255)) $x255) (quant-intro (proof-bind ?x681) (= $x255 $x678)) $x678)))
 (let (($x756 (not $x678)))
 (let (($x2350 (or $x756 $x210 $x2345)))
 (let (($x2310 (or (not (= (+ ?x2297 (* (- 1) ?x2214)) 1)) (not (= (+ ?x2301 (* (- 1) ?x2221)) (- 1))) (not (= (+ ?x25 ?x28 ?x2305 ?x2306 ?x214) 0)))))
 (let (($x2312 (or $x210 (not $x2310))))
 (let (($x2343 (or $x756 $x2312)))
 (let ((@x2354 (monotonicity (rewrite (= $x2312 (or $x210 $x2345))) (= $x2343 (or $x756 (or $x210 $x2345))))))
 (let ((@x2358 (trans @x2354 (rewrite (= (or $x756 (or $x210 $x2345)) $x2350)) (= $x2343 $x2350))))
 (let ((@x3090 (unit-resolution (mp ((_ quant-inst i!1) $x2343) @x2358 $x2350) @x685 @x3089 $x2345)))
 (let ((@x3091 (unit-resolution (def-axiom (or $x2348 $x2346)) @x3090 $x2346)))
 (let ((?x2228 (* (- 1) ?x2221)))
 (let ((?x2227 (* (- 1) ?x2214)))
 (let ((?x2263 (+ ?x25 ?x28 ?x212 ?x2227 ?x2228)))
 (let (($x2288 (>= ?x2263 0)))
 (let (($x2269 (= ?x2263 0)))
 (let (($x2267 (not $x2269)))
 (let (($x2271 (or (not (= (+ ?x2214 (* (- 1) (x (+ 2 i!1)))) 1)) (not (= (+ ?x2221 (* (- 1) (y (+ 2 i!1)))) (- 1))) $x2267)))
 (let (($x2268 (not $x2271)))
 (let (($x2235 (>= i!1 (- 1))))
 (let (($x2238 (not $x2235)))
 (let (($x2273 (or $x756 $x2238 $x2268)))
 (let (($x2232 (or (not (= (+ ?x2214 (* (- 1) (x (+ 1 ?x211)))) 1)) (not (= (+ ?x2221 (* (- 1) (y (+ 1 ?x211)))) (- 1))) (not (= (+ ?x25 ?x28 ?x2227 ?x2228 ?x212) 0)))))
 (let (($x2234 (or (not (>= ?x211 0)) (not $x2232))))
 (let (($x2266 (or $x756 $x2234)))
 (let ((@x2277 (monotonicity (rewrite (= $x2234 (or $x2238 $x2268))) (= $x2266 (or $x756 (or $x2238 $x2268))))))
 (let ((@x2281 (trans @x2277 (rewrite (= (or $x756 (or $x2238 $x2268)) $x2273)) (= $x2266 $x2273))))
 (let ((@x3098 (unit-resolution (mp ((_ quant-inst (+ 1 i!1)) $x2266) @x2281 $x2273) @x685 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x2235 $x210)) @x3089 $x2235) $x2268)))
 (let ((@x3099 (unit-resolution (def-axiom (or $x2271 $x2269)) @x3098 $x2269)))
 (let (($x3122 (not (>= ?x212 0))))
 (let (($x2376 (<= ?x212 0)))
 (let (($x2365 (>= ?x2342 0)))
 (let (($x2287 (<= ?x2263 0)))
 (let (($x2362 (<= ?x2334 1)))
 (let ((@x3109 (unit-resolution (def-axiom (or $x2348 $x2335)) @x3090 $x2335)))
 (let (($x2360 (<= ?x2319 (- 1))))
 (let ((@x3113 (unit-resolution (def-axiom (or $x2348 $x2320)) @x3090 $x2320)))
 (let (($x2374 (<= ?x214 0)))
 (let ((@x3119 (unit-resolution (def-axiom (or $x217 $x215)) @x3088 $x215)))
 (let ((@x3080 ((_ th-lemma arith farkas -1 -1 -1 1 -1 1) (hypothesis $x2374) (hypothesis $x2360) (hypothesis $x2362) (hypothesis (not $x2376)) (hypothesis $x2287) (hypothesis $x2365) false)))
 (let ((@x3087 (lemma @x3080 (or $x2376 (not $x2374) (not $x2360) (not $x2362) (not $x2287) (not $x2365)))))
 (let ((@x3121 (unit-resolution @x3087 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x216 $x2374)) @x3119 $x2374) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2325 $x2360)) @x3113 $x2360) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2340 $x2362)) @x3109 $x2362) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2267 $x2287)) @x3099 $x2287) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2344 $x2365)) @x3091 $x2365) $x2376)))
 (let ((@x3127 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x213 (not $x2376) $x3122)) (unit-resolution (def-axiom (or $x217 (not $x213))) @x3088 (not $x213)) (or (not $x2376) $x3122))))
 (let (($x2363 (>= ?x2334 1)))
 (let (($x2361 (>= ?x2319 (- 1))))
 (let (($x2375 (>= ?x214 0)))
 (let ((@x3138 ((_ th-lemma arith farkas -1 -1 -1 1 -1 1) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x216 $x2375)) @x3119 $x2375) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2325 $x2361)) @x3113 $x2361) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2340 $x2363)) @x3109 $x2363) (unit-resolution @x3127 @x3121 $x3122) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2267 $x2288)) @x3099 $x2288) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2344 $x2364)) @x3091 $x2364) false)))
 (let ((?x110 (inv 0)))
 (let (($x63 (= ?x110 0)))
 (let (($x202 (not $x63)))
 (let (($x839 (or $x202 (not (= (+ ?x25 (* (- 1) (x 1))) 1)) (not (= (+ ?x28 (* (- 1) (y 1))) (- 1))))))
 (let (($x844 (not $x839)))
 (let (($x837 (or $x756 $x844)))
 (let (($x796 (or (not (= (+ ?x25 (* (- 1) (x (+ 1 0)))) 1)) (not (= (+ ?x28 (* (- 1) (y (+ 1 0)))) (- 1))) (not (= (+ ?x25 ?x28 (* (- 1) ?x25) (* (- 1) ?x28) ?x110) 0)))))
 (let (($x797 (not $x796)))
 (let (($x780 (>= 0 0)))
 (let (($x781 (not $x780)))
 (let (($x798 (or $x781 $x797)))
 (let (($x838 (or $x756 $x798)))
 (let (($x841 (= $x838 $x837)))
 (let ((@x807 (trans (monotonicity (rewrite (= $x780 true)) (= $x781 (not true))) (rewrite (= (not true) false)) (= $x781 false))))
 (let ((@x830 (monotonicity @x807 (rewrite (= $x797 $x844)) (= $x798 (or false $x844)))))
 (let ((@x842 (monotonicity (trans @x830 (rewrite (= (or false $x844) $x844)) (= $x798 $x844)) $x841)))
 (let ((@x2801 (unit-resolution (mp ((_ quant-inst 0) $x838) (trans @x842 (rewrite (= $x837 $x837)) $x841) $x837) @x685 $x844)))
 (let (($x697 (or $x202 $x218 $x686)))
 (let (($x693 (or $x686 $x202 $x218)))
 (let (($x698 (= $x693 $x697)))
 (let ((@x702 (trans (monotonicity (rewrite (= $x218 $x218)) (= $x693 $x693)) (rewrite $x698) $x698)))
 (let (($x111 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let (($x109 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (or $x113 $x109))))) :qid k!58))
 ))
 (let (($x243 (or $x111 $x202 $x218)))
 (let (($x222 (or $x202 $x218)))
 (let (($x231 (or $x222 $x111)))
 (let (($x244 (= $x231 $x243)))
 (let ((@x242 (monotonicity (monotonicity (rewrite (= $x218 $x218)) (= $x222 $x222)) (= $x231 $x231))))
 (let (($x97 (forall ((i Int) )(! (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (or $x113 (= (inv (+ 1 i)) 0) (not (= (inv i) 0))))) :qid k!76))
 ))
 (let (($x57 (and $x63 $x97)))
 (let (($x145 (not $x57)))
 (let (($x146 (or $x145 $x111)))
 (let ((?x227 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let (($x109 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (let (($x125 (or $x113 $x109)))
 (refl (~ $x125 $x125))))))))
 ))
 (let ((@x224 (nnf-neg (refl (~ $x202 $x202)) (sk (~ (not $x97) $x218)) (~ $x145 $x222))))
 (let ((@x233 (monotonicity @x224 (nnf-pos (proof-bind ?x227) (~ $x111 $x111)) (~ $x146 $x231))))
 (let (($x87 (= $x146 $x146)))
 (let ((@x88 (monotonicity (monotonicity (rewrite (= $x57 $x57)) (= $x145 $x145)) $x87)))
 (let (($x118 (forall ((i Int) )(! (let ((?x47 (inv i)))
 (let (($x109 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (=> $x36 $x109)))) :qid k!58))
 ))
 (let (($x73 (forall ((i Int) )(! (let (($x36 (>= i 0)))
 (=> (and $x36 (= (inv i) 0)) (= (inv (+ i 1)) 0))) :qid k!76))
 ))
 (let (($x74 (and $x63 $x73)))
 (let (($x75 (=> $x74 $x118)))
 (let ((?x130 (lambda ((i Int) )(let ((?x47 (inv i)))
 (let (($x109 (= ?x47 0)))
 (let (($x36 (>= i 0)))
 (let (($x113 (not $x36)))
 (let (($x125 (or $x113 $x109)))
 (let (($x117 (=> $x36 $x109)))
 (rewrite (= $x117 $x125)))))))))
 ))
 (let ((@x137 (quant-intro (proof-bind ?x130) (= $x118 $x111))))
 (let ((@x94 (trans (monotonicity (rewrite (= $x74 $x57)) @x137 (= $x75 (=> $x57 $x111))) (rewrite (= (=> $x57 $x111) $x146)) (= $x75 $x146))))
 (let ((@x95 (mp (asserted $x75) @x94 $x146)))
 (let ((@x189 (mp (mp (mp (mp @x95 @x88 $x146) (rewrite $x87) $x146) @x88 $x146) @x88 $x146)))
 (let ((@x695 (mp (mp (mp~ @x189 @x233 $x231) (trans @x242 (rewrite $x244) $x244) $x243) (rewrite (= $x243 $x693)) $x693)))
 (let ((@x2816 (unit-resolution (mp @x695 @x702 $x697) (unit-resolution (def-axiom (or $x839 $x63)) @x2801 $x63) (or $x218 $x686))))
 (let (($x196 (= (inv i!0) 0)))
 (let (($x169 (>= i!0 0)))
 (let (($x184 (not $x169)))
 (let (($x197 (or $x184 $x196)))
 (let (($x198 (not $x197)))
 (let (($x69 (not $x111)))
 (let ((@x80 (rewrite (= $x69 $x69))))
 (let ((@x106 (mp (asserted (not $x118)) (rewrite (= (not $x118) $x69)) $x69)))
 (let ((@x201 (mp~ (mp (mp (mp (mp @x106 @x80 $x69) @x80 $x69) @x80 $x69) @x80 $x69) (sk (~ $x69 $x198)) $x198)))
 (let (($x2291 (not $x686)))
 (let (($x2292 (or $x2291 $x184 $x196)))
 (let ((@x2414 (mp ((_ quant-inst i!0) (or $x2291 $x197)) (rewrite (= (or $x2291 $x197) $x2292)) $x2292)))
 (unit-resolution @x2414 (not-or-elim @x201 $x169) (not-or-elim @x201 (not $x196)) (unit-resolution @x2816 (lemma @x3138 $x217) $x686) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                   123
 :arith-assert-diseq          2
 :arith-assert-lower          94
 :arith-assert-upper          94
 :arith-conflicts             2
 :arith-eq-adapter            100
 :arith-fixed-eqs             8
 :arith-num-rows              110
 :arith-offset-eqs            24
 :arith-pivots                94
 :arith-row-summations        147
 :arith-tableau-max-columns   220
 :arith-tableau-max-rows      110
 :conflicts                   3
 :decisions                   3
 :del-clause                  479
 :eliminated-vars             2
 :max-generation              10
 :max-memory                  20.30
 :max-missed-qa-cost          11.00
 :memory                      19.29
 :min-missed-qa-cost          11.00
 :missed-quant-instantiations 4
 :mk-bool-var                 361
 :mk-clause                   519
 :num-allocs                  921900
 :num-checks                  1
 :propagations                276
 :quant-instantiations        39
 :rlimit-count                8564
 :time                        0.01
 :total-time                  0.03)
