unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x95 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x360 (>= ?x95 1)))
 (let (($x337 (= ?x95 1)))
 (let ((?x132 (+ 7 (* (- 1) k!2) (* (- 1) m!1) (* 9 n!0) (* 3 (* n!0 n!0)))))
 (let ((?x275 (* (- 1) (* k!2 k!2 n!0))))
 (let ((?x282 (* (- 1) (* c!3 m!1))))
 (let ((?x283 (* (- 1) (* k!2 m!1))))
 (let ((?x287 (+ c!3 k!2)))
 (let ((?x288 (+ k!2 m!1)))
 (let ((?x224 (+ 6 m!1)))
 (let ((?x289 (+ 1 n!0)))
 (let ((?x221 (* (- 1) (* ?x289 ?x289 ?x224 ?x224 ?x288 ?x288 ?x288 ?x287 ?x287 ?x287))))
 (let ((?x276 (* (- 1) (* c!3 k!2))))
 (let ((?x273 (* (- 1) (* c!3 k!2 n!0))))
 (let ((?x286 (* (- 1) (* ?x289 ?x289 ?x289 ?x224 ?x224 ?x224 ?x288 ?x287 ?x287 ?x287))))
 (let ((?x299 (* (- 1) (* c!3 m!1 n!0))))
 (let ((?x278 (* (- 1) (* k!2 m!1 n!0))))
 (let ((?x159 (* (- 1) (* k!2 k!2))))
 (let ((?x586 (* (+ ?x159 ?x278 ?x299 ?x286 ?x273 ?x276 ?x221 ?x283 ?x282 ?x275) ?x132)))
 (let (($x309 (= ?x586 0)))
 (let (($x653 (not $x309)))
 (let (($x331 (= (+ (* 3 c!3) (* (- 1) (* k!2 n!0)) k!2 (* (- 2) n!0)) 1)))
 (let ((?x355 (* (- 9) n!0)))
 (let ((?x161 (* 9 (* c!3 n!0))))
 (let ((?x156 (* 5 k!2)))
 (let ((?x590 (* 18 c!3)))
 (let ((?x96 (+ m!1 (* (- 6) n!0))))
 (let (($x356 (= ?x96 6)))
 (let (($x579 (and $x356 (= (+ ?x590 ?x156 ?x161 ?x159 ?x355) 4) $x331 $x337 $x653)))
 (let (($x465 (= (* (+ ?x159 ?x221 ?x286 ?x283 ?x282 ?x276 ?x278 ?x275 ?x299 ?x273) ?x132) 0)))
 (let (($x170 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x464 (and $x356 (= (+ ?x590 ?x156 ?x355 ?x159 ?x161) 4) $x170 $x337 (not $x465))))
 (let (($x346 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x654 (* (- 1) (* c k n))))
 (let ((?x657 (* (- 1) (* c m n))))
 (let ((?x656 (* (- 1) (* k k n))))
 (let ((?x659 (* (- 1) (* k m n))))
 (let ((?x658 (* (- 1) (* c k))))
 (let ((?x661 (* (- 1) (* c m))))
 (let ((?x660 (* (- 1) (* k m))))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x390 ?x390 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* (- 1) (* ?x303 ?x303 ?x390 ?x390 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x184 (* (+ ?x208 ?x102 ?x316 ?x660 ?x661 ?x658 ?x659 ?x656 ?x657 ?x654) (+ 7 ?x235 ?x351 ?x48 ?x267))))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) ?x266)) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 $x205 $x257 $x295 (not (= ?x184 0))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x199 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x206 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x390 ?x390 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* (- 1) (* ?x303 ?x303 ?x390 ?x390 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let (($x136 (not (= (* (+ ?x102 (* (- 1) (* ?x303 ?x71 ?x76)) ?x316) ?x206) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x151 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x151 $x252 $x136)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x317 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x266 (* n n)))
 (let ((?x267 (* 3 ?x266)))
 (let ((?x48 (* 9 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x654 (* (- 1) (* c k n))))
 (let ((?x657 (* (- 1) (* c m n))))
 (let ((?x656 (* (- 1) (* k k n))))
 (let ((?x659 (* (- 1) (* k m n))))
 (let ((?x658 (* (- 1) (* c k))))
 (let ((?x661 (* (- 1) (* c m))))
 (let ((?x660 (* (- 1) (* k m))))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x390 ?x390 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* (- 1) (* ?x303 ?x303 ?x390 ?x390 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x184 (* (+ ?x208 ?x102 ?x316 ?x660 ?x661 ?x658 ?x659 ?x656 ?x657 ?x654) (+ 7 ?x235 ?x351 ?x48 ?x267))))
 (let (($x295 (= (+ k (* (- 3) n) (* (- 3) ?x266)) 1)))
 (let (($x257 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x205 (= (+ ?x40 ?x44 ?x207 ?x208 (* 9 (* c n))) 4)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x617 (and $x121 $x205 $x257 $x295 (not (= ?x184 0)))))
 (let ((?x343 (* (+ ?x102 (* (- 1) (* ?x303 ?x71 ?x76)) ?x316) (+ 4 (* 3 (* ?x303 ?x303)) ?x235 ?x351 (* 3 n)))))
 (let (($x136 (not (= ?x343 0))))
 (let (($x252 (= (+ ?x267 ?x235 (* 3 n)) (- 1))))
 (let (($x151 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x329 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x151 $x252 $x136)))
 (rewrite (= $x329 $x617)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x140 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x206 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x390 ?x390 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* (- 1) (* ?x303 ?x303 ?x390 ?x390 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let (($x136 (not (= (* (+ ?x102 (* (- 1) (* ?x303 ?x71 ?x76)) ?x316) ?x206) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x648 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (and $x121 (= ?x648 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x252 $x136))))))))))))))))) :qid k!34))
 ))
 (let ((?x200 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x206 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x390 ?x390 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* (- 1) (* ?x303 ?x303 ?x390 ?x390 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let (($x136 (not (= (* (+ ?x102 (* (- 1) (* ?x303 ?x71 ?x76)) ?x316) ?x206) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let (($x151 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x208 (* (- 1) ?x49)))
 (let ((?x207 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x329 (and $x121 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x207 ?x208) 4) $x151 $x252 $x136)))
 (let ((?x48 (* 9 n)))
 (let ((?x648 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x146 (and $x121 (= ?x648 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x252 $x136)))
 (rewrite (= $x146 $x329))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x81 (- (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x77 ?x68 ?x68) (* ?x76 ?x71 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x81 (* ?x76 ?x76 ?x76 ?x71 ?x77 ?x77 ?x77 ?x68 ?x68 ?x68)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x83 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x265 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x351 (* (- 1) m)))
 (let ((?x235 (* (- 1) k)))
 (let ((?x206 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x235 ?x351 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x390 (+ 6 m)))
 (let ((?x303 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x303 ?x303 ?x303 ?x390 ?x390 ?x390 ?x71 ?x76 ?x76 ?x76))))
 (let ((?x102 (* (- 1) (* ?x303 ?x303 ?x390 ?x390 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76))))
 (let (($x136 (not (= (* (+ ?x102 (* (- 1) (* ?x303 ?x71 ?x76)) ?x316) ?x206) 0))))
 (let (($x252 (= (+ (* 3 (* n n)) ?x235 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x648 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x121 (= (+ m (* (- 6) n)) 6)))
 (let (($x146 (and $x121 (= ?x648 (- 4)) (= (+ (* (- 3) c) (* n k) ?x235 (* 2 n)) (- 1)) $x252 $x136)))
 (let ((?x68 (+ n 1)))
 (let ((?x77 (+ m 6)))
 (let ((?x81 (- (* (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x77 ?x77 ?x68 ?x68) (* ?x76 ?x71 ?x68))))
 (let ((?x83 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) (- ?x81 (* ?x76 ?x76 ?x76 ?x71 ?x77 ?x77 ?x77 ?x68 ?x68 ?x68)))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x87 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x83 0))))))
 (rewrite (= $x87 $x146)))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x192 (mp (mp @x89 (quant-intro (proof-bind ?x265) (= $x88 $x140)) $x140) (rewrite (= $x140 $x140)) $x140)))
 (let ((@x588 (mp (mp @x192 (quant-intro (proof-bind ?x200) (= $x140 $x199)) $x199) (quant-intro (proof-bind ?x317) (= $x199 $x346)) $x346)))
 (let ((@x186 (mp (mp~ @x588 (sk (~ $x346 $x464)) $x464) (rewrite (= $x464 $x579)) $x579)))
 (let ((@x141 (and-elim @x186 $x337)))
 (let ((@x195 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x337) $x360)) @x141 $x360)))
 (let (($x361 (>= ?x96 6)))
 (let ((@x223 (and-elim @x186 $x356)))
 (let ((@x194 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x356) $x361)) @x223 $x361)))
 (let (($x614 (<= ?x95 1)))
 (let ((@x201 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x337) $x614)) @x141 $x614)))
 (let (($x597 (<= ?x96 6)))
 (let ((@x294 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x356) $x597)) @x223 $x597)))
 (let (($x203 (not (<= ?x586 0))))
 (let (($x93 (>= ?x586 0)))
 (let ((@x212 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x93)) @x294 @x201 @x194 @x195 false) $x93)))
 (let ((@x584 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x309 $x203 (not $x93))) (and-elim @x186 $x653) (or $x203 (not $x93)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x584 @x212 $x203) @x294 @x201 @x194 @x195 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        18
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             91
 :arith-nonlinear-bounds    8
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      5
 :arith-tableau-max-columns 40
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.63
 :memory                    3.12
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1160065
 :num-checks                1
 :propagations              10
 :rlimit-count              2636
 :time                      0.01
 :total-time                0.01)
