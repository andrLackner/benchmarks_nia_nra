unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x1360 (to_real d!1)))
 (let ((?x1357 (to_real y!0)))
 (let ((?x1356 (to_real a!3)))
 (let ((?x1053 (to_real b!2)))
 (let ((?x62 (to_real d00)))
 (let ((?x174 (* (/ 1.0 128.0) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360))))
 (let ((?x453 (* (- (/ 3.0 32.0)) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1356 ?x1357 ?x1360 ?x1360 ?x1360))))
 (let ((?x486 (* (/ 1.0 16.0) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1357 ?x1360 ?x1360))))
 (let ((?x151 (* (- (/ 1.0 8.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1357 ?x1360))))
 (let ((?x146 (* (- (/ 3.0 16.0)) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1356 ?x1357 ?x1357 ?x1360 ?x1360))))
 (let ((?x1331 (* (- (/ 3.0 8.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1360 ?x1360))))
 (let ((?x116 (* (- (/ 3.0 16.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1360 ?x1360))))
 (let ((?x448 (* (- (/ 3.0 16.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1360 ?x1360 ?x1360))))
 (let ((?x424 (* (- (/ 1.0 64.0)) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1356 ?x1360 ?x1360 ?x1360 ?x1360))))
 (let ((?x430 (* (- (/ 3.0 32.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1360 ?x1360 ?x1360))))
 (let ((?x417 (* (- (/ 1.0 64.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360))))
 (let ((?x383 (* (/ 1.0 8.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1356 ?x1357 ?x1357 ?x1357))))
 (let ((?x381 (* (- (/ 1.0 8.0)) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1356 ?x1357 ?x1357 ?x1357 ?x1360))))
 (let ((?x378 (* (- (/ 1.0 16.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1357 ?x1360))))
 (let ((?x374 (* (/ 1.0 16.0) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1357 ?x1360 ?x1360))))
 (let ((?x422 (* (- (/ 1.0 32.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1356 ?x1360 ?x1360 ?x1360 ?x1360))))
 (let ((?x1304 (* (/ 3.0 32.0) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1360 ?x1360 ?x1360))))
 (let ((?x214 (* (/ 3.0 64.0) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1357 ?x1360 ?x1360 ?x1360 ?x1360))))
 (let ((?x244 (* (/ 3.0 32.0) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1360 ?x1360 ?x1360))))
 (let ((?x209 (* (/ 3.0 64.0) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1357 ?x1360 ?x1360 ?x1360 ?x1360))))
 (let ((?x201 (* (/ 1.0 128.0) (* (to_real b00) ?x1053 ?x1053 ?x1356 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360))))
 (let ((?x1338 (* (- (/ 1.0 4.0)) (* (to_real b00) ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1357 ?x1360))))
 (let ((?x720 (+ (* (/ 1.0 32.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1356 ?x1360 ?x1360 ?x1360)) ?x1338 ?x201 ?x209 ?x244 ?x214 ?x1304 ?x422 (* (/ 1.0 8.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1357)) ?x374 ?x378 ?x381 ?x383 (* (- (/ 1.0 16.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1357 ?x1360)) (* (- (/ 1.0 128.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 1.0 128.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 64.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 32.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1360 ?x1360)) (* (- (/ 3.0 32.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1360 ?x1360)) ?x417 ?x430 ?x424 ?x448 ?x116 ?x1331 (* (/ 1.0 4.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1357)) ?x146 (* (/ 3.0 32.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1360 ?x1360)) ?x151 (* (/ 3.0 16.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1360 ?x1360)) (* (/ 3.0 32.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1356 ?x1357 ?x1360 ?x1360)) (* (/ 3.0 16.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1357 ?x1360)) ?x486 (* (/ 1.0 64.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360)) (* (/ 3.0 16.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1356 ?x1357 ?x1357 ?x1360)) (* (/ 1.0 64.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1356 ?x1356 ?x1360 ?x1360 ?x1360)) (* (- (/ 3.0 64.0)) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1357 ?x1360 ?x1360 ?x1360)) ?x453 ?x174 (* (/ 3.0 8.0) (* ?x62 ?x1053 ?x1053 ?x1053 ?x1053 ?x1356 ?x1357 ?x1357 ?x1360)))))
 (let (($x343 (>= ?x720 0.0)))
 (let ((?x1320 (+ (* b00 d!1) (* (- 1) (* d00 b!2)))))
 (let (($x375 (>= ?x1320 0)))
 (let (($x384 (= 0 ?x1320)))
 (let ((@x335 (symm (commutativity (= $x384 (= ?x1320 0))) (= (= ?x1320 0) $x384))))
 (let (($x330 (= ?x1320 0)))
 (let ((?x376 (+ ?x374 ?x378 ?x381 ?x383)))
 (let (($x1325 (= ?x376 0.0)))
 (let (($x388 (not $x1325)))
 (let (($x1014 (or $x388 (not (= ?x720 0.0)))))
 (let ((?x366 (+ (* a00 d!1) (* 2 (* y!0 b!2)) (* (- 2) (* y00 b!2)) (* (- 1) (* a!3 d!1)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x316 (= (+ ?x35 ?x98 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x392 (and $x316 $x330 (= ?x366 0) $x1014)))
 (let ((?x259 (* (/ 1.0 16.0) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1357 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x266 (* (/ 3.0 32.0) (* ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1356 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x254 (* (/ 3.0 32.0) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x239 (* (/ 3.0 64.0) (* ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1356 ?x1357 (to_real b00)))))
 (let ((?x234 (* (/ 3.0 64.0) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1357 (to_real b00)))))
 (let ((?x229 (* (/ 1.0 128.0) (* ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 ?x1356 (to_real b00)))))
 (let ((?x1311 (* (/ 1.0 128.0) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1360 (to_real b00)))))
 (let ((?x581 (* (- (/ 1.0 4.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1356 ?x1357 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x588 (* (- (/ 1.0 8.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1357 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x141 (* (- (/ 3.0 16.0)) (* ?x1053 ?x1053 ?x1360 ?x1360 ?x1356 ?x1356 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x124 (* (- (/ 3.0 8.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1356 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x433 (* (- (/ 3.0 16.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x138 (* (- (/ 3.0 32.0)) (* ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1356 ?x1356 ?x1357 (to_real b00)))))
 (let ((?x113 (* (- (/ 3.0 16.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1356 ?x1357 (to_real b00)))))
 (let ((?x543 (* (- (/ 3.0 32.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1357 (to_real b00)))))
 (let ((?x958 (* (- (/ 1.0 64.0)) (* ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1356 ?x1356 (to_real b00)))))
 (let ((?x949 (* (- (/ 1.0 32.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1356 (to_real b00)))))
 (let ((?x571 (* (- (/ 1.0 64.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 (to_real b00)))))
 (let ((?x1365 (* (/ 1.0 8.0) (* ?x1053 ?x1053 ?x1053 ?x1356 ?x1356 ?x62 ?x1357 ?x1357 ?x1357))))
 (let ((?x1367 (* (- (/ 1.0 8.0)) (* ?x1053 ?x1053 ?x1360 ?x1356 ?x1356 ?x1357 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x1363 (* (- (/ 1.0 16.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1356 ?x62 ?x1357 ?x1357 ?x1357))))
 (let ((?x1359 (* (/ 1.0 16.0) (* ?x1053 ?x1053 ?x1360 ?x1360 ?x1356 ?x1357 ?x1357 ?x1357 (to_real b00)))))
 (let ((?x290 (+ ?x1359 ?x1363 ?x1367 ?x1365 (* (- (/ 1.0 16.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x62 ?x1357 ?x1357 ?x1357)) (* (- (/ 1.0 128.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x62)) (* (- (/ 1.0 128.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1360 ?x1356 ?x62)) (* (- (/ 3.0 64.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x62 ?x1357)) (* (- (/ 3.0 64.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1356 ?x62 ?x1357)) (* (- (/ 3.0 32.0)) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x62 ?x1357 ?x1357)) (* (- (/ 3.0 32.0)) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1356 ?x62 ?x1357 ?x1357)) ?x571 ?x949 ?x958 ?x543 ?x113 ?x138 ?x433 ?x124 ?x141 ?x588 ?x581 ?x1311 ?x229 ?x234 ?x239 ?x254 ?x266 ?x259 (* (/ 1.0 8.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x62 ?x1357 ?x1357 ?x1357)) (* (/ 1.0 64.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x62)) (* (/ 1.0 32.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1356 ?x62)) (* (/ 1.0 64.0) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1360 ?x1356 ?x1356 ?x62)) (* (/ 3.0 32.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x62 ?x1357)) (* (/ 3.0 16.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1356 ?x62 ?x1357)) (* (/ 3.0 32.0) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1360 ?x1356 ?x1356 ?x62 ?x1357)) (* (/ 3.0 16.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x62 ?x1357 ?x1357)) (* (/ 3.0 8.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1360 ?x1356 ?x62 ?x1357 ?x1357)) (* (/ 3.0 16.0) (* ?x1053 ?x1053 ?x1053 ?x1360 ?x1356 ?x1356 ?x62 ?x1357 ?x1357)) (* (/ 1.0 4.0) (* ?x1053 ?x1053 ?x1053 ?x1053 ?x1356 ?x62 ?x1357 ?x1357 ?x1357)))))
 (let ((?x1346 (* a!3 d!1)))
 (let ((?x1355 (+ ?x1346 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x226 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x98 (* 2 (* y!0 b00))) 0)))
 (let (($x294 (and $x226 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x1355 0) (or (not (= (+ ?x1359 ?x1363 ?x1367 ?x1365) 0.0)) (not (= ?x290 0.0))))))
 (let (($x203 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x62 (to_real d00)))
 (let ((?x61 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x1402 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real d) ?x61 ?x61 ?x62 ?x63 ?x63))))
 (let ((?x1399 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d) ?x61 ?x62 ?x63 ?x63))))
 (let ((?x1396 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real d) ?x62 ?x63 ?x63))))
 (let ((?x1393 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61 ?x61 ?x62 ?x63))))
 (let ((?x1390 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61 ?x62 ?x63))))
 (let ((?x1387 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x62 ?x63))))
 (let ((?x59 (to_real d)))
 (let ((?x986 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1007 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 (to_real b00)))))
 (let ((?x1004 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 (to_real b00)))))
 (let ((?x1001 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 (to_real b00)))))
 (let ((?x998 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x63 (to_real b00)))))
 (let ((?x995 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 (to_real b00)))))
 (let ((?x992 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 (to_real b00)))))
 (let ((?x1469 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1468 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1467 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real b00)))))
 (let ((?x1466 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 (to_real b00)))))
 (let ((?x1465 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 (to_real b00)))))
 (let ((?x1464 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 (to_real b00)))))
 (let ((?x1463 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 (to_real b00)))))
 (let ((?x1462 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 (to_real b00)))))
 (let ((?x1461 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 (to_real b00)))))
 (let ((?x1460 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 (to_real b00)))))
 (let ((?x1458 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 (to_real b00)))))
 (let ((?x230 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x263 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x262 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x162 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1470 (+ ?x162 ?x262 ?x263 ?x230 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62 ?x63 ?x63 ?x63)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x63)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x63 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62 ?x63 ?x63)) ?x1458 ?x1460 ?x1461 ?x1462 ?x1463 ?x1464 ?x1465 ?x1466 ?x1467 ?x1468 ?x1469 ?x992 ?x995 ?x998 ?x1001 ?x1004 ?x1007 ?x986 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x63 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) ?x1387 ?x1390 ?x1393 ?x1396 ?x1399 ?x1402 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x62 ?x63 ?x63 ?x63)))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x130 (= (+ ?x35 (* (- 1) (* a d00)) ?x98 (* 2 (* y b00))) 0)))
 (and $x130 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= (+ ?x162 ?x262 ?x263 ?x230) 0.0)) (not (= ?x1470 0.0)))))))))))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x1100 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x789 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x1125 (+ ?x61 ?x56)))
 (let ((?x62 (to_real d00)))
 (let ((?x59 (to_real d)))
 (let ((?x65 (to_real b00)))
 (let ((?x1192 (+ (* (/ 1.0 16.0) (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (/ 1.0 8.0) (* ?x65 ?x59 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 16.0)) (* ?x65 ?x59 ?x59 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)))))
 (let ((?x1120 (+ (* (/ 1.0 16.0) (* ?x62 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x59 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x62 ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x1200 (or (not (= ?x1120 0.0)) (not (= ?x1192 0.0)))))
 (let ((?x1165 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x962 (= ?x1165 0)))
 (let ((?x1303 (* d00 a)))
 (let ((?x1168 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1303)))
 (and (= ?x1168 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x962 $x1200)))))))))))))))) :qid k!33))
 ))
 (let ((?x935 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x62 (to_real d00)))
 (let ((?x61 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x1402 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real d) ?x61 ?x61 ?x62 ?x63 ?x63))))
 (let ((?x1399 (* (/ 3.0 8.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d) ?x61 ?x62 ?x63 ?x63))))
 (let ((?x1396 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real d) ?x62 ?x63 ?x63))))
 (let ((?x1393 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61 ?x61 ?x62 ?x63))))
 (let ((?x1390 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61 ?x62 ?x63))))
 (let ((?x1387 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x62 ?x63))))
 (let ((?x59 (to_real d)))
 (let ((?x986 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1007 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 (to_real b00)))))
 (let ((?x1004 (* (/ 3.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 (to_real b00)))))
 (let ((?x1001 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 (to_real b00)))))
 (let ((?x998 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x63 (to_real b00)))))
 (let ((?x995 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 (to_real b00)))))
 (let ((?x992 (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 (to_real b00)))))
 (let ((?x1469 (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1468 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1467 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real b00)))))
 (let ((?x1466 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 (to_real b00)))))
 (let ((?x1465 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 (to_real b00)))))
 (let ((?x1464 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 (to_real b00)))))
 (let ((?x1463 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 (to_real b00)))))
 (let ((?x1462 (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 (to_real b00)))))
 (let ((?x1461 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 (to_real b00)))))
 (let ((?x1460 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 (to_real b00)))))
 (let ((?x1458 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 (to_real b00)))))
 (let ((?x230 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x263 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x262 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x162 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 (to_real b00)))))
 (let ((?x1470 (+ ?x162 ?x262 ?x263 ?x230 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62 ?x63 ?x63 ?x63)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 1.0 128.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x63)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x62 ?x63 ?x63)) (* (- (/ 3.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x62 ?x63 ?x63)) ?x1458 ?x1460 ?x1461 ?x1462 ?x1463 ?x1464 ?x1465 ?x1466 ?x1467 ?x1468 ?x1469 ?x992 ?x995 ?x998 ?x1001 ?x1004 ?x1007 ?x986 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62 ?x63 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x62)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x62)) ?x1387 ?x1390 ?x1393 ?x1396 ?x1399 ?x1402 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x62 ?x63 ?x63 ?x63)))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let ((?x35 (* a00 d00)))
 (let (($x130 (= (+ ?x35 (* (- 1) (* a d00)) ?x98 (* 2 (* y b00))) 0)))
 (let (($x1477 (and $x130 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x165 0) (or (not (= (+ ?x162 ?x262 ?x263 ?x230) 0.0)) (not (= ?x1470 0.0))))))
 (let ((?x789 (+ ?x63 (* (/ 1.0 2.0) ?x59))))
 (let ((?x1125 (+ ?x61 ?x56)))
 (let ((?x1136 (* (- (/ 1.0 16.0)) (* (to_real b00) ?x59 ?x59 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789))))
 (let ((?x1112 (* (/ 1.0 8.0) (* (to_real b00) ?x59 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789))))
 (let ((?x1192 (+ (* (/ 1.0 16.0) (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) ?x1112 ?x1136 (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)))))
 (let ((?x1071 (* (- (/ 1.0 16.0)) (* (to_real b00) ?x63 ?x63 ?x63 ?x59 ?x59 ?x56 ?x56 ?x61))))
 (let ((?x1058 (* (/ 1.0 8.0) (* (to_real b00) ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x61 ?x61))))
 (let ((?x1120 (+ (* (/ 1.0 16.0) (* ?x62 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) ?x1058 ?x1071 (* (- (/ 1.0 8.0)) (* ?x62 ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x1200 (or (not (= ?x1120 0.0)) (not (= ?x1192 0.0)))))
 (let ((?x1165 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x962 (= ?x1165 0)))
 (let ((?x1303 (* d00 a)))
 (let (($x553 (= (+ (* 2 ?x97) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x1303) 0)))
 (let (($x1209 (and $x553 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x962 $x1200)))
 (rewrite (= $x1209 $x1477))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1197 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x789 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x1125 (+ ?x61 ?x56)))
 (let ((?x62 (to_real d00)))
 (let ((?x59 (to_real d)))
 (let ((?x65 (to_real b00)))
 (let ((?x1192 (+ (* (/ 1.0 16.0) (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (/ 1.0 8.0) (* ?x65 ?x59 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 16.0)) (* ?x65 ?x59 ?x59 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)))))
 (let ((?x1120 (+ (* (/ 1.0 16.0) (* ?x62 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x59 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x62 ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x1200 (or (not (= ?x1120 0.0)) (not (= ?x1192 0.0)))))
 (let ((?x1165 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x962 (= ?x1165 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x898 (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x898 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x962 $x1200)))))))))))))))))) :qid k!33))
 ))
 (let ((?x1276 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x789 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x1125 (+ ?x61 ?x56)))
 (let ((?x62 (to_real d00)))
 (let ((?x59 (to_real d)))
 (let ((?x65 (to_real b00)))
 (let ((?x1192 (+ (* (/ 1.0 16.0) (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (/ 1.0 8.0) (* ?x65 ?x59 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 16.0)) (* ?x65 ?x59 ?x59 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)))))
 (let ((?x1120 (+ (* (/ 1.0 16.0) (* ?x62 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x59 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x62 ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x1200 (or (not (= ?x1120 0.0)) (not (= ?x1192 0.0)))))
 (let ((?x1165 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x962 (= ?x1165 0)))
 (let ((?x1303 (* d00 a)))
 (let ((?x1168 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1303)))
 (let (($x1209 (and (= ?x1168 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x962 $x1200)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x1132 (and (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) ?x1303)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x962 $x1200)))
 (rewrite (= $x1132 $x1209)))))))))))))))))))))))
 ))
 (let (($x89 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x76 (+ ?x63 ?x60)))
 (let ((?x62 (to_real d00)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (to_real (+ a b))))
 (let ((?x80 (+ (* ?x77 ?x58 ?x58 ?x58 ?x60 ?x62 ?x76 ?x76 ?x76) (* ?x77 ?x77 ?x58 ?x58 (to_real b00) ?x60 ?x76 ?x76 ?x76))))
 (let ((?x83 (- ?x80 (* ?x77 ?x58 ?x58 (to_real b00) ?x60 ?x60 ?x76 ?x76 ?x76))))
 (let (($x86 (not (= (- ?x83 (* ?x77 ?x77 ?x58 ?x58 ?x58 ?x62 ?x76 ?x76 ?x76)) ?x72))))
 (let ((?x65 (to_real b00)))
 (let ((?x61 (to_real a)))
 (let ((?x67 (+ (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x62 ?x63 ?x63 ?x63) (* ?x61 ?x61 ?x58 ?x58 ?x65 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x71 (- (- ?x67 (* ?x61 ?x58 ?x58 ?x65 ?x60 ?x60 ?x63 ?x63 ?x63)) (* ?x61 ?x61 ?x58 ?x58 ?x58 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x71 ?x72)) $x86))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1091 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x789 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x1125 (+ ?x61 ?x56)))
 (let ((?x62 (to_real d00)))
 (let ((?x59 (to_real d)))
 (let ((?x65 (to_real b00)))
 (let ((?x1192 (+ (* (/ 1.0 16.0) (* ?x62 ?x59 ?x56 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (/ 1.0 8.0) (* ?x65 ?x59 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 16.0)) (* ?x65 ?x59 ?x59 ?x56 ?x56 ?x1125 ?x789 ?x789 ?x789)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x56 ?x1125 ?x1125 ?x789 ?x789 ?x789)))))
 (let ((?x1120 (+ (* (/ 1.0 16.0) (* ?x62 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x65 ?x63 ?x63 ?x63 ?x59 ?x59 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x62 ?x63 ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let (($x1200 (or (not (= ?x1120 0.0)) (not (= ?x1192 0.0)))))
 (let ((?x1165 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x962 (= ?x1165 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x97 (* b00 y00)))
 (let ((?x98 (* (- 2) ?x97)))
 (let (($x898 (= (+ ?x98 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x1132 (and $x898 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x962 $x1200)))
 (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x76 (+ ?x63 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x77 (to_real (+ a b))))
 (let ((?x80 (+ (* ?x77 ?x58 ?x58 ?x58 ?x60 ?x62 ?x76 ?x76 ?x76) (* ?x77 ?x77 ?x58 ?x58 ?x65 ?x60 ?x76 ?x76 ?x76))))
 (let ((?x84 (- (- ?x80 (* ?x77 ?x58 ?x58 ?x65 ?x60 ?x60 ?x76 ?x76 ?x76)) (* ?x77 ?x77 ?x58 ?x58 ?x58 ?x62 ?x76 ?x76 ?x76))))
 (let ((?x67 (+ (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x62 ?x63 ?x63 ?x63) (* ?x61 ?x61 ?x58 ?x58 ?x65 ?x60 ?x63 ?x63 ?x63))))
 (let ((?x71 (- (- ?x67 (* ?x61 ?x58 ?x58 ?x65 ?x60 ?x60 ?x63 ?x63 ?x63)) (* ?x61 ?x61 ?x58 ?x58 ?x58 ?x62 ?x63 ?x63 ?x63))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x88 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x71 ?x72)) (not (= ?x84 ?x72))))))
 (rewrite (= $x88 $x1132))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x1061 (mp (mp @x90 (quant-intro (proof-bind ?x1091) (= $x89 $x1197)) $x1197) (rewrite (= $x1197 $x1197)) $x1197)))
 (let ((@x1229 (mp (mp @x1061 (quant-intro (proof-bind ?x1276) (= $x1197 $x1100)) $x1100) (quant-intro (proof-bind ?x935) (= $x1100 $x203)) $x203)))
 (let ((@x1020 (mp (mp~ @x1229 (sk (~ $x203 $x294)) $x294) (rewrite (= $x294 $x392)) $x392)))
 (let ((@x336 (mp (and-elim @x1020 $x330) @x335 $x384)))
 (let ((@x322 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x375)) @x336 $x375)))
 (let (($x380 (<= ?x1320 0)))
 (let ((@x338 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x384) $x380)) @x336 $x380)))
 (let ((@x1328 (unit-resolution ((_ th-lemma arith) (or $x343 (not $x375) (not $x380))) @x338 @x322 (hypothesis (not $x343)) false)))
 (let ((@x406 (lemma @x1328 $x343)))
 (let (($x352 (<= ?x720 0.0)))
 (let ((@x172 (unit-resolution ((_ th-lemma arith) (or $x352 (not $x375) (not $x380))) @x338 @x322 (hypothesis (not $x352)) false)))
 (let ((@x1253 (lemma @x172 $x352)))
 (let (($x351 (>= ?x376 0.0)))
 (let (($x1257 (not $x351)))
 (let (($x353 (<= ?x376 0.0)))
 (let ((@x1258 (unit-resolution ((_ th-lemma arith) (or (not $x352) (not $x343) $x353 (not $x375) (not $x380))) @x338 @x322 (hypothesis (not $x353)) @x1253 @x406 false)))
 (let (($x350 (= 0.0 ?x376)))
 (let (($x909 (not $x350)))
 (let ((@x842 (monotonicity (symm (commutativity (= $x350 $x1325)) (= $x1325 $x350)) (= $x388 $x909))))
 (let (($x222 (= ?x720 0.0)))
 (let (($x354 (= 0.0 ?x720)))
 (let ((@x1147 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x354 (not $x352) (not $x343))) @x406 (or $x354 (not $x352)))))
 (let ((@x611 (mp (unit-resolution @x1147 @x1253 $x354) (commutativity (= $x354 $x222)) $x222)))
 (let ((@x627 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x350 (not $x353) $x1257)) (mp (unit-resolution (and-elim @x1020 $x1014) @x611 $x388) @x842 $x909) (or (not $x353) $x1257))))
 (unit-resolution ((_ th-lemma arith) (or (not $x352) (not $x343) $x351 (not $x375) (not $x380))) @x338 @x322 (unit-resolution @x627 (lemma @x1258 $x353) $x1257) @x1253 @x406 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       96
 :arith-eq-adapter                125
 :arith-bound-propagations-cheap  155
 :arith-bound-propagations-lp     35
 :arith-branch                    1
 :arith-conflicts                 202
 :arith-cube-calls                1
 :arith-diseq                     230
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 11
 :arith-grobner-calls             7
 :arith-grobner-conflicts         4
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 24
 :arith-lower                     229
 :arith-make-feasible             170
 :arith-max-columns               107
 :arith-max-rows                  39
 :arith-nla-explanations          120
 :arith-nla-lemmas                194
 :arith-patches                   11
 :arith-patches-success           10
 :arith-propagations              155
 :arith-upper                     157
 :conflicts                       17
 :decisions                       538
 :del-clause                      626
 :final-checks                    50
 :max-memory                      7.88
 :memory                          3.27
 :mk-bool-var                     963
 :mk-clause                       953
 :num-allocs                      267684510
 :num-checks                      1
 :propagations                    555
 :rlimit-count                    15403
 :time                            0.27
 :total-time                      0.28)
