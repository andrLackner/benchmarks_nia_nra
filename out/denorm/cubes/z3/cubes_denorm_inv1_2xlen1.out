unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x272 (* (- 6) n!0)))
 (let ((?x140 (+ m!1 ?x272)))
 (let (($x231 (<= ?x140 6)))
 (let (($x611 (= ?x140 6)))
 (let ((?x317 (+ (- 6) m!1 ?x272)))
 (let ((?x335 (+ c!3 k!2)))
 (let ((?x114 (+ m!1 k!2)))
 (let ((?x337 (+ 6 m!1)))
 (let ((?x605 (+ 1 n!0)))
 (let ((?x216 (* ?x605 ?x605 ?x337 ?x337 ?x337 ?x337 ?x114 ?x114 ?x114 ?x114 ?x114 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x317)))
 (let (($x245 (= ?x216 0)))
 (let (($x215 (not $x245)))
 (let (($x281 (= (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2)) (- 1))))
 (let (($x274 (= (+ (* n!0 k!2) (* (- 3) c!3) (* 2 n!0) (* (- 1) k!2)) (- 1))))
 (let ((?x247 (* k!2 k!2)))
 (let ((?x342 (+ ?x247 (* (- 18) c!3) (* (- 9) (* c!3 n!0)) (* 9 n!0) (* (- 5) k!2))))
 (let (($x483 (and $x611 (= ?x342 (- 4)) $x274 $x281 $x215)))
 (let ((?x336 (+ k!2 m!1)))
 (let ((?x334 (* ?x605 ?x605 ?x337 ?x337 ?x337 ?x337 ?x336 ?x336 ?x336 ?x336 ?x336 ?x335 ?x335 ?x335 ?x335 ?x335 ?x335 ?x317)))
 (let (($x597 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x578 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x247) (* 9 (* c!3 n!0)))))
 (let (($x325 (and $x611 (= ?x578 4) $x597 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x334 0)))))
 (let (($x276 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 $x207 $x259 $x297 $x572)))))))))))))))))) :qid k!34))
 ))
 (let (($x362 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x359 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x359 $x205 $x572))))))))))))))))) :qid k!34))
 ))
 (let ((?x164 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x575 (and $x123 $x207 $x259 $x297 $x572)))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x359 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x355 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x359 $x205 $x572)))
 (rewrite (= $x355 $x575))))))))))))))))))))))))
 ))
 (let (($x570 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x572))))))))))))))) :qid k!34))
 ))
 (let ((?x331 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x359 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x355 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x359 $x205 $x572)))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x572)))
 (rewrite (= $x105 $x355))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x72 (+ c k)))
 (let ((?x69 (+ n 1)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 (- 1) ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x569 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x588 (* ?x312 ?x312 ?x356 ?x356 ?x356 ?x356 ?x73 ?x73 ?x73 ?x73 ?x73 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x112)))
 (let (($x572 (not (= ?x588 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x572)))
 (let ((?x74 (+ m 6)))
 (let ((?x69 (+ n 1)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x69 ?x69 (- 1) ?x72 ?x72 ?x72 ?x73 ?x73 ?x74 ?x74 ?x74)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x80 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0))))))
 (rewrite (= $x80 $x105)))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x354 (mp (mp @x82 (quant-intro (proof-bind ?x569) (= $x81 $x570)) $x570) (rewrite (= $x570 $x570)) $x570)))
 (let ((@x367 (mp (mp @x354 (quant-intro (proof-bind ?x331) (= $x570 $x362)) $x362) (quant-intro (proof-bind ?x164) (= $x362 $x276)) $x276)))
 (let ((@x481 (mp (mp~ @x367 (sk (~ $x276 $x325)) $x325) (rewrite (= $x325 $x483)) $x483)))
 (let ((@x486 (and-elim @x481 $x611)))
 (let ((@x97 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x611) $x231)) @x486 $x231)))
 (let (($x232 (>= ?x140 6)))
 (let ((@x139 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x611) $x232)) @x486 $x232)))
 (let (($x196 (not (<= ?x216 0))))
 (let (($x203 (>= ?x216 0)))
 (let ((@x584 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x245 $x196 (not $x203))) (and-elim @x481 $x215) (or $x196 (not $x203)))))
 (let ((@x101 (unit-resolution @x584 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x203)) @x139 @x97 false) $x203) $x196)))
 ((_ th-lemma arith farkas 1 1 1) @x101 @x139 @x97 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      19
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.65
 :memory                    3.17
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1160481
 :num-checks                1
 :propagations              12
 :rlimit-count              3535
 :time                      0.01
 :total-time                0.01)
