unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x122 (* k!2 k!2)))
 (let (($x208 (>= ?x122 0)))
 (let ((?x123 (* 18 c!3)))
 (let ((?x210 (* (- 1) ?x122)))
 (let ((?x387 (* (- 9) n!0)))
 (let ((?x381 (* 5 k!2)))
 (let ((?x688 (+ ?x381 ?x387 ?x210 ?x123 (* 9 (* n!0 c!3)))))
 (let (($x406 (>= ?x688 4)))
 (let (($x695 (= ?x688 4)))
 (let ((?x424 (* m!1 m!1)))
 (let ((?x179 (* 2 (* k!2 m!1))))
 (let ((?x323 (* k!2 n!0)))
 (let ((?x419 (* (- 9) ?x323)))
 (let ((?x175 (* (- 27) c!3)))
 (let ((?x176 (* (- 5) m!1)))
 (let ((?x417 (* 9 n!0)))
 (let ((?x249 (* (- 32) k!2)))
 (let ((?x701 (+ 13 ?x249 ?x417 ?x176 ?x122 ?x175 ?x419 ?x179 ?x424 (* (- 9) (* n!0 c!3)))))
 (let ((?x687 (+ k!2 c!3)))
 (let ((?x168 (+ k!2 m!1)))
 (let ((?x167 (+ 6 m!1)))
 (let ((?x158 (+ 1 n!0)))
 (let ((?x474 (* ?x158 ?x158 ?x167 ?x167 ?x167 ?x167 ?x167 ?x167 ?x168 ?x168 ?x168 ?x168 ?x168 ?x168 ?x168 ?x687 ?x687 ?x687 ?x687 ?x701)))
 (let (($x694 (= ?x474 0)))
 (let (($x478 (not $x694)))
 (let ((?x309 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x157 (= ?x309 1)))
 (let ((?x411 (* (- 1) ?x323)))
 (let ((?x388 (* 3 c!3)))
 (let ((?x302 (* (- 2) n!0)))
 (let ((?x686 (+ k!2 ?x302 ?x388 ?x411)))
 (let (($x692 (= ?x686 1)))
 (let ((?x262 (* (- 1) m!1)))
 (let ((?x298 (+ (* 6 n!0) ?x262)))
 (let (($x299 (= ?x298 (- 6))))
 (let (($x698 (and $x299 $x695 $x692 $x157 $x478)))
 (let ((?x427 (+ 13 ?x175 ?x249 ?x176 ?x417 ?x122 ?x419 (* (- 9) (* c!3 n!0)) ?x179 ?x424)))
 (let ((?x453 (+ c!3 k!2)))
 (let ((?x425 (* ?x158 ?x158 ?x167 ?x167 ?x167 ?x167 ?x167 ?x167 ?x168 ?x168 ?x168 ?x168 ?x168 ?x168 ?x168 ?x453 ?x453 ?x453 ?x453 ?x427)))
 (let (($x681 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x123 ?x381 ?x387 ?x210 (* 9 (* c!3 n!0))) 4) (= (+ ?x388 k!2 ?x302 ?x411) 1) $x157 (not (= ?x425 0)))))
 (let (($x371 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x231 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x476)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= ?x231 0)))))))))))))))))))) :qid k!34))
 ))
 (let (($x174 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x300 (not (= ?x440 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x89 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x89 $x289 $x300)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x386 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x476 (+ 13 (* (- 27) c) (* (- 32) k) ?x421 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x231 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x476)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x301 (and $x119 $x203 $x255 $x293 (not (= ?x231 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* ?x336 ?x68)) ?x421 ?x48 ?x78)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x300 (not (= ?x440 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x89 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x403 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x89 $x289 $x300)))
 (rewrite (= $x403 $x301)))))))))))))))))))))))))))))
 ))
 (let (($x213 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x300 (not (= ?x440 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x212 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x212 $x159 $x289 $x300)))))))))))))))) :qid k!34))
 ))
 (let ((?x201 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x300 (not (= ?x440 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x89 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x403 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x89 $x289 $x300)))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x212 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x228 (and $x119 $x212 $x159 $x289 $x300)))
 (rewrite (= $x228 $x403))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x81 (* (+ ?x76 (* 9 ?x70) ?x78) ?x68 ?x68 ?x72 ?x80 ?x80 ?x80 ?x70 ?x68 ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x72 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x217 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x421 (* (- 5) m)))
 (let ((?x93 (* (- 18) c)))
 (let ((?x408 (+ 13 ?x93 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x421 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x481 (+ 6 m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x440 (* ?x336 ?x336 ?x481 ?x481 ?x481 ?x481 ?x481 ?x481 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 ?x68 ?x408)))
 (let (($x300 (not (= ?x440 0))))
 (let (($x289 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x159 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x212 (= (+ ?x93 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x228 (and $x119 $x212 $x159 $x289 $x300)))
 (let ((?x70 (+ n 1)))
 (let ((?x80 (+ m 6)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let ((?x81 (* (+ ?x76 (* 9 ?x70) ?x78) ?x68 ?x68 ?x72 ?x80 ?x80 ?x80 ?x70 ?x68 ?x68 ?x72 ?x72 ?x72 ?x80 ?x80 ?x80 ?x70 ?x72 ?x72 ?x72)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x81 0))))))
 (rewrite (= $x85 $x228))))))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x365 (mp (mp @x87 (quant-intro (proof-bind ?x217) (= $x86 $x213)) $x213) (rewrite (= $x213 $x213)) $x213)))
 (let ((@x120 (mp (mp @x365 (quant-intro (proof-bind ?x201) (= $x213 $x174)) $x174) (quant-intro (proof-bind ?x386) (= $x174 $x371)) $x371)))
 (let ((@x651 (mp (mp~ @x120 (sk (~ $x371 $x681)) $x681) (rewrite (= $x681 $x698)) $x698)))
 (let ((@x693 (and-elim @x651 $x695)))
 (let ((@x290 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x695) $x406)) @x693 $x406)))
 (let (($x1080 (>= ?x158 1)))
 (let (($x797 (>= m!1 2)))
 (let (($x413 (<= ?x298 (- 6))))
 (let ((@x703 (and-elim @x651 $x299)))
 (let ((@x343 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x413)) @x703 $x413)))
 (let (($x410 (>= ?x298 (- 6))))
 (let ((@x370 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x299) $x410)) @x703 $x410)))
 (let (($x1155 (not (<= ?x167 5))))
 (let (($x944 (>= ?x167 6)))
 (let (($x535 (>= n!0 (- 1))))
 (let (($x622 (<= ?x167 0)))
 (let (($x794 (not $x622)))
 (let (($x785 (>= ?x167 0)))
 (let (($x668 (>= (+ (* 5 n!0) ?x262) (- 3))))
 (let (($x1084 (not $x668)))
 (let (($x564 (>= ?x687 0)))
 (let (($x777 (not $x564)))
 (let (($x566 (<= ?x687 0)))
 (let (($x409 (<= ?x686 1)))
 (let ((@x691 (and-elim @x651 $x692)))
 (let ((@x297 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x692) $x409)) @x691 $x409)))
 (let (($x363 (>= ?x686 1)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x692) $x363)) @x691 $x363)))
 (let (($x362 (<= ?x309 1)))
 (let ((@x697 (and-elim @x651 $x157)))
 (let ((@x384 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x157) $x362)) @x697 $x362)))
 (let (($x402 (>= ?x309 1)))
 (let ((@x389 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x157) $x402)) @x697 $x402)))
 (let (($x407 (<= ?x688 4)))
 (let ((@x148 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x695) $x407)) @x693 $x407)))
 (let (($x630 (>= n!0 0)))
 (let (($x783 (not $x566)))
 (let ((@x784 (hypothesis $x783)))
 (let ((@x774 (hypothesis (not $x630))))
 (let (($x527 (not $x535)))
 (let ((@x938 (hypothesis $x527)))
 (let (($x941 (>= (+ (* 3 n!0) ?x262 (* (- 1) (* n!0 n!0))) (- 3))))
 (let ((@x847 (hypothesis $x941)))
 (let ((?x327 (* n!0 n!0)))
 (let (($x357 (>= ?x327 0)))
 (let ((@x349 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x357)) false) $x357)))
 (let ((@x843 (lemma ((_ th-lemma arith) @x343 @x349 @x847 @x847 @x370 @x343 @x370 @x343 @x370 @x343 false) (not $x941))))
 (let ((@x768 (lemma ((_ th-lemma arith) @x370 @x843 @x389 @x938 @x784 @x938 @x938 @x297 false) (or $x535 $x566))))
 (let ((@x990 (unit-resolution @x768 @x784 $x535)))
 (let (($x1014 (<= ?x167 6)))
 (let ((@x1039 (unit-resolution @x774 ((_ th-lemma arith gomory-cut 1 1) @x370 (hypothesis (not $x1014)) $x630) false)))
 (let ((@x1043 ((_ th-lemma arith farkas -1/3 -1/3 -5/18 -1/3 -1/3 -5/18 -1 -1 -1 -1 1) @x990 @x774 @x343 @x297 @x384 (unit-resolution (lemma @x1039 (or $x1014 $x630)) @x774 $x1014) @x990 @x774 @x990 @x774 @x784 false)))
 (let ((@x1023 (unit-resolution (lemma @x1043 (or $x630 $x566)) @x784 $x630)))
 (let (($x1050 (not (<= ?x474 0))))
 (let (($x348 (>= ?x474 0)))
 (let (($x429 (<= ?x168 0)))
 (let (($x373 (not $x429)))
 (let ((@x1048 (unit-resolution ((_ th-lemma arith assign-bounds 3 -2 -1) (or $x373 $x941 (not $x410) (not $x402))) @x389 @x370 @x843 $x373)))
 (let (($x608 (= ?x687 0)))
 (let (($x559 (not $x608)))
 (let (($x292 (not $x348)))
 (let ((@x282 (hypothesis $x292)))
 (let ((@x552 ((_ th-lemma arith farkas 1 1 1) @x282 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x559 $x564)) (hypothesis $x608) $x564) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x559 $x566)) (hypothesis $x608) $x566) false)))
 (let ((@x342 (hypothesis $x373)))
 (let (($x814 (>= ?x701 0)))
 (let ((@x838 ((_ th-lemma arith) (hypothesis (not $x814)) @x370 @x343 @x389 @x384 @x389 @x384 @x370 @x343 @x250 @x297 @x389 @x384 @x389 @x384 @x370 @x343 @x290 @x148 @x250 @x297 false)))
 (let ((@x839 (lemma @x838 $x814)))
 (let ((@x915 (unit-resolution (lemma ((_ th-lemma arith farkas 1 1 1 1) @x282 @x839 @x342 @x784 false) (or $x566 $x348 $x429)) @x342 @x282 $x566)))
 (let ((@x918 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x608 $x783 $x777)) @x915 (unit-resolution (lemma @x552 (or $x559 $x348)) @x282 $x559) $x777)))
 (let ((@x1049 (unit-resolution (lemma ((_ th-lemma arith farkas 1 1 1 1) @x282 @x839 @x342 @x918 false) (or $x429 $x348)) @x1048 $x348)))
 (let ((@x1054 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x694 $x1050 $x292)) (and-elim @x651 $x478) (or $x1050 $x292))))
 (let ((@x1055 (unit-resolution @x1054 @x1049 $x1050)))
 (let ((@x1060 ((_ th-lemma arith) @x1055 @x784 @x343 @x389 @x349 @x1023 @x1023 @x343 @x1023 @x370 @x343 @x389 @x384 @x370 @x343 @x370 @x343 @x250 @x297 @x370 @x343 @x290 @x148 @x389 @x384 @x250 @x297 false)))
 (let ((@x804 (lemma ((_ th-lemma arith farkas 1 1 1) @x1055 (hypothesis $x564) (lemma @x1060 $x566) false) $x777)))
 (let ((@x1073 (hypothesis $x668)))
 (let ((@x937 ((_ th-lemma arith) @x1055 (hypothesis $x777) @x1048 @x343 @x1073 @x1073 @x343 @x370 @x343 @x250 @x297 @x250 @x297 @x370 @x343 @x250 @x297 @x389 @x384 @x370 @x343 @x389 @x384 @x370 @x343 @x389 @x384 @x250 @x297 @x389 @x384 @x250 @x297 @x250 @x297 @x389 @x384 @x250 @x297 @x389 @x384 @x370 @x343 @x290 @x148 @x370 @x343 @x389 @x384 @x370 @x343 @x250 @x297 @x370 @x343 @x290 @x148 @x389 @x384 false)))
 (let ((@x153 (lemma ((_ th-lemma arith farkas -5 6 1) @x370 (hypothesis $x1084) (hypothesis (not $x785)) false) (or $x668 $x785))))
 (let ((@x1159 (unit-resolution @x153 (unit-resolution (lemma @x937 (or $x1084 $x564)) @x804 $x1084) $x785)))
 (let ((@x621 (lemma ((_ th-lemma arith farkas 1 1 1) @x1055 (hypothesis $x785) (hypothesis $x622) false) (or (not $x785) $x794))))
 (let ((@x1164 (unit-resolution ((_ th-lemma arith assign-bounds -1/6 1) (or $x622 (not $x410) $x535)) @x370 (or $x622 $x535))))
 (let ((@x1170 (unit-resolution ((_ th-lemma arith assign-bounds 1 -6) (or $x944 (not $x413) $x527)) @x343 (or $x944 $x527))))
 (let ((@x1171 (unit-resolution @x1170 (unit-resolution @x1164 (unit-resolution @x621 @x1159 $x794) $x535) $x944)))
 (let ((@x1173 ((_ th-lemma arith farkas 1 1 1 1 1) @x1055 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x1155 (not $x944))) @x1171 $x1155) @x370 @x343 (hypothesis (not $x797)) false)))
 (let ((@x1077 (lemma ((_ th-lemma arith farkas -1/6 -1/6 1) @x370 (lemma @x1173 $x797) (hypothesis (not $x1080)) false) $x1080)))
 (let ((?x939 (* (- 1) ?x327)))
 (let (($x949 (>= (+ ?x381 ?x387 (* 16 c!3) ?x939 (* 8 (* n!0 c!3))) 5)))
 (let ((@x781 ((_ th-lemma arith farkas -2 11/8 21/4 17/4 1/8 1 1 1 1 1) @x804 @x389 @x1077 @x349 (hypothesis $x949) @x1077 @x804 @x389 @x1077 @x349 false)))
 ((_ th-lemma arith farkas 3/4 -9/8 5/8 3/4 1 1) @x349 (lemma @x781 (not $x949)) @x389 @x1077 @x290 (lemma ((_ th-lemma arith farkas 1) (hypothesis (not $x208)) false) $x208) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 86
 :arith-assert-diseq        16
 :arith-assert-lower        450
 :arith-assert-upper        378
 :arith-bound-prop          34
 :arith-branch-var          27
 :arith-conflicts           50
 :arith-eq-adapter          17
 :arith-fixed-eqs           134
 :arith-gcd-tests           230
 :arith-gomory-cuts         19
 :arith-grobner             47
 :arith-ineq-splits         27
 :arith-max-min             2644
 :arith-nonlinear-bounds    105
 :arith-nonlinear-horner    489
 :arith-num-rows            16
 :arith-offset-eqs          10
 :arith-patches             62
 :arith-patches_succ        8
 :arith-pivots              579
 :arith-pseudo-nonlinear    73
 :arith-row-summations      2651
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    16
 :conflicts                 52
 :decisions                 225
 :del-clause                190
 :final-checks              162
 :max-memory                3.95
 :memory                    3.28
 :minimized-lits            7
 :mk-bool-var               238
 :mk-clause                 194
 :num-allocs                3388040
 :num-checks                1
 :propagations              228
 :rlimit-count              176886
 :time                      0.05
 :total-time                0.06)
