unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(proof
(let ((?x782 (* d00 a!3)))
 (let ((?x1200 (to_real ?x782)))
 (let ((?x803 (to_real a!3)))
 (let ((?x178 (to_real d00)))
 (let ((?x910 (* ?x178 ?x803)))
 (let ((?x832 (* (- 1.0) ?x910)))
 (let ((?x434 (+ ?x832 ?x1200)))
 (let (($x424 (= ?x434 0.0)))
 (let (($x1308 (not $x424)))
 (let (($x440 (>= ?x434 0.0)))
 (let ((@x597 (hypothesis $x424)))
 (let (($x437 (<= ?x434 0.0)))
 (let ((?x1066 (to_real y!0)))
 (let ((?x902 (to_real b!2)))
 (let ((?x75 (to_real b00)))
 (let ((?x894 (* (/ 1.0 4.0) (* ?x75 (to_real y00) ?x803 ?x803 ?x902 ?x902 ?x902 ?x1066 ?x1066))))
 (let ((?x891 (* (- (/ 1.0 8.0)) (* (to_real a00) ?x178 ?x803 ?x803 ?x902 ?x902 ?x902 ?x1066 ?x1066))))
 (let ((?x907 (to_real d!1)))
 (let ((?x212 (to_real y00)))
 (let ((?x876 (* (- (/ 1.0 64.0)) (* (to_real a00) ?x178 ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x1066))))
 (let ((?x855 (* (- (/ 1.0 16.0)) (* (to_real a00) ?x178 ?x803 ?x902 ?x902 ?x902 ?x907 ?x1066 ?x1066))))
 (let ((?x835 (* (- (/ 1.0 8.0)) (* (to_real a00) ?x178 ?x803 ?x803 ?x907 ?x907 ?x907 ?x1066 ?x1066 ?x1066))))
 (let ((?x694 (+ (* (/ 1.0 4.0) (* ?x75 ?x212 ?x803 ?x803 ?x902 ?x902 ?x907)) (* (- (/ 1.0 8.0)) (* (to_real a00) ?x178 ?x803 ?x803 ?x902 ?x902 ?x907)) (* (- (/ 1.0 4.0)) (* ?x75 ?x803 ?x803 ?x902 ?x902 ?x907 ?x1066)) (* (/ 1.0 8.0) (* ?x178 ?x803 ?x803 ?x803 ?x902 ?x902 ?x907)) ?x835 (* (/ 1.0 8.0) (* ?x178 ?x803 ?x803 ?x803 ?x907 ?x907 ?x907 ?x1066 ?x1066 ?x1066)) (* (/ 1.0 4.0) (* ?x75 ?x212 ?x803 ?x803 ?x907 ?x907 ?x907 ?x1066 ?x1066 ?x1066)) (* (- (/ 1.0 4.0)) (* ?x75 ?x803 ?x803 ?x907 ?x907 ?x907 ?x1066 ?x1066 ?x1066 ?x1066)) ?x855 (* (/ 1.0 16.0) (* ?x178 ?x803 ?x803 ?x902 ?x902 ?x902 ?x907 ?x1066 ?x1066)) (* (- (/ 1.0 8.0)) (* ?x75 ?x803 ?x902 ?x902 ?x902 ?x907 ?x1066 ?x1066 ?x1066)) (* (/ 1.0 8.0) (* ?x75 ?x212 ?x803 ?x902 ?x902 ?x902 ?x907 ?x1066 ?x1066)) (* (/ 1.0 64.0) (* ?x178 ?x803 ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x1066)) ?x876 (* (- (/ 1.0 32.0)) (* ?x75 ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x1066 ?x1066)) (* (/ 1.0 32.0) (* ?x75 ?x212 ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x1066)) ?x891 ?x894 (* (/ 1.0 8.0) (* ?x178 ?x803 ?x803 ?x803 ?x902 ?x902 ?x902 ?x1066 ?x1066)) (* (- (/ 1.0 4.0)) (* ?x75 ?x803 ?x803 ?x902 ?x902 ?x902 ?x1066 ?x1066 ?x1066)))))
 (let (($x919 (<= ?x694 0.0)))
 (let (($x1303 (not $x919)))
 (let (($x914 (>= ?x694 0.0)))
 (let ((?x796 (* d00 b!2)))
 (let ((?x687 (to_real ?x796)))
 (let ((?x831 (* ?x178 ?x902)))
 (let ((?x851 (* (- 1.0) ?x831)))
 (let ((?x1307 (+ ?x851 ?x687)))
 (let (($x1293 (= 0.0 ?x1307)))
 (let (($x296 (= ?x1307 0.0)))
 (let ((@x668 (lemma (unit-resolution ((_ th-lemma arith) $x296) (hypothesis (not $x296)) false) $x296)))
 (let ((@x1098 (unit-resolution (hypothesis (not $x1293)) (symm (hypothesis $x296) $x1293) false)))
 (let (($x598 (>= ?x1307 0.0)))
 (let ((@x574 (hypothesis $x1293)))
 (let (($x1310 (<= ?x1307 0.0)))
 (let ((?x177 (to_real a00)))
 (let ((?x179 (* ?x177 ?x178)))
 (let ((?x1168 (+ ?x179 (* (- 1.0) (to_real (* a00 d00))))))
 (let (($x935 (<= ?x1168 0.0)))
 (let (($x1170 (= 0.0 ?x1168)))
 (let ((@x649 (symm (commutativity (= $x1170 (= ?x1168 0.0))) (= (= ?x1168 0.0) $x1170))))
 (let ((@x1157 (unit-resolution (hypothesis (not $x1170)) (mp ((_ th-lemma arith) (= ?x1168 0.0)) @x649 $x1170) false)))
 (let ((@x182 (lemma @x1157 $x1170)))
 (let ((@x713 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1170) $x935)) @x182 $x935)))
 (let (($x1272 (>= ?x1168 0.0)))
 (let ((@x738 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1170) $x1272)) @x182 $x1272)))
 (let ((?x1205 (* a!3 d!1)))
 (let ((?x1233 (* (- 2) (* b!2 y!0))))
 (let ((?x823 (+ (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)) ?x1233 ?x1205)))
 (let (($x908 (>= ?x823 0)))
 (let (($x898 (= 0 ?x823)))
 (let ((@x992 (symm (commutativity (= $x898 (= ?x823 0))) (= (= ?x823 0) $x898))))
 (let (($x829 (= ?x823 0)))
 (let ((?x523 (* (/ 1.0 8.0) (* ?x803 ?x803 ?x902 ?x902 ?x902 ?x907 ?x1066))))
 (let ((?x1265 (* (/ 1.0 32.0) (* ?x803 ?x803 ?x902 ?x902 ?x902 ?x907 ?x907))))
 (let ((?x962 (* (/ 1.0 128.0) (* ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x907))))
 (let ((?x979 (* (/ 1.0 16.0) (* ?x803 ?x902 ?x902 ?x902 ?x902 ?x907 ?x907))))
 (let ((?x670 (* (/ 1.0 16.0) (* ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x1066))))
 (let ((?x956 (* (/ 1.0 64.0) (* ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907))))
 (let ((?x954 (* (/ 1.0 4.0) (* ?x803 ?x902 ?x907 ?x907 ?x907 ?x1066 ?x1066 ?x1066))))
 (let ((?x938 (* (/ 3.0 8.0) (* ?x803 ?x902 ?x907 ?x907 ?x907 ?x907 ?x1066 ?x1066))))
 (let ((?x698 (* (/ 3.0 16.0) (* ?x803 ?x803 ?x907 ?x907 ?x907 ?x907 ?x1066 ?x1066))))
 (let ((?x929 (* (/ 3.0 16.0) (* ?x803 ?x902 ?x907 ?x907 ?x907 ?x907 ?x907 ?x1066))))
 (let ((?x920 (* (/ 1.0 64.0) (* ?x803 ?x803 ?x907 ?x907 ?x907 ?x907 ?x907 ?x907))))
 (let ((?x912 (* (/ 1.0 4.0) (* ?x803 ?x902 ?x902 ?x902 ?x907))))
 (let ((?x913 (* (/ 1.0 32.0) (* ?x803 ?x902 ?x907 ?x907 ?x907 ?x907 ?x907 ?x907))))
 (let ((?x903 (* (/ 1.0 8.0) (* ?x803 ?x803 ?x902 ?x902 ?x902 ?x1066 ?x1066))))
 (let ((?x900 (* (/ 1.0 64.0) (* ?x803 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x1066))))
 (let ((?x883 (* (/ 1.0 8.0) (* ?x803 ?x803 ?x902 ?x902 ?x907))))
 (let ((?x693 (* (/ 1.0 16.0) (* ?x803 ?x902 ?x902 ?x902 ?x907 ?x1066 ?x1066))))
 (let ((?x889 (* (/ 1.0 8.0) (* ?x803 ?x803 ?x907 ?x907 ?x907 ?x1066 ?x1066 ?x1066))))
 (let ((?x382 (* (/ 3.0 32.0) (* ?x902 ?x902 ?x907 ?x907 ?x907 ?x907 ?x907 ?x1066))))
 (let ((?x561 (* (/ 1.0 8.0) (* ?x902 ?x902 ?x907 ?x907 ?x907 ?x1066 ?x1066 ?x1066))))
 (let ((?x775 (* (/ 1.0 8.0) (* ?x902 ?x902 ?x902 ?x902 ?x907))))
 (let ((?x679 (* (/ 1.0 8.0) (* ?x902 ?x902 ?x902 ?x902 ?x902 ?x907 ?x1066))))
 (let ((?x743 (* (/ 1.0 32.0) (* ?x902 ?x902 ?x902 ?x902 ?x902 ?x907 ?x907))))
 (let ((?x740 (* (/ 1.0 128.0) (* ?x902 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x907))))
 (let ((?x727 (* (/ 1.0 64.0) (* ?x902 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x1066))))
 (let ((?x230 (* (/ 1.0 4.0) (* ?x803 ?x902 ?x902 ?x902 ?x902 ?x907 ?x1066))))
 (let ((?x928 (* (/ 3.0 32.0) (* ?x803 ?x803 ?x907 ?x907 ?x907 ?x907 ?x907 ?x1066))))
 (let ((?x737 (* (/ 1.0 8.0) (* ?x902 ?x902 ?x902 ?x902 ?x902 ?x1066 ?x1066))))
 (let ((?x569 (* (/ 1.0 64.0) (* ?x902 ?x902 ?x907 ?x907 ?x907 ?x907 ?x907 ?x907))))
 (let ((?x455 (* (/ 3.0 16.0) (* ?x902 ?x902 ?x907 ?x907 ?x907 ?x907 ?x1066 ?x1066))))
 (let ((?x316 (* (/ 1.0 64.0) (* ?x902 ?x902 ?x902 ?x902 ?x907 ?x907 ?x907))))
 (let ((?x206 (* (/ 1.0 16.0) (* ?x902 ?x902 ?x902 ?x902 ?x907 ?x1066 ?x1066))))
 (let ((?x702 (* (/ 1.0 4.0) (* ?x803 ?x902 ?x902 ?x902 ?x902 ?x1066 ?x1066))))
 (let ((?x677 (* (/ 1.0 16.0) (* ?x902 ?x902 ?x902 ?x902 ?x907 ?x907 ?x1066))))
 (let ((?x1171 (+ ?x677 ?x702 ?x206 ?x316 ?x455 ?x569 ?x737 ?x928 ?x230 ?x727 ?x740 ?x743 ?x679 ?x775 ?x561 ?x382 ?x889 ?x693 ?x883 ?x900 ?x903 ?x913 ?x912 ?x920 ?x929 ?x698 ?x938 ?x954 ?x956 ?x670 ?x979 ?x962 ?x1265 ?x523)))
 (let ((?x834 (* ?x75 ?x907)))
 (let ((?x213 (* ?x75 ?x212)))
 (let ((?x216 (* (- 2.0) ?x213)))
 (let ((?x704 (* (+ ?x179 ?x216 ?x851 ?x834 ?x832 (* 2.0 (* ?x75 ?x1066))) ?x1171)))
 (let (($x884 (= ?x704 0.0)))
 (let (($x1178 (not $x884)))
 (let (($x695 (= ?x694 0.0)))
 (let (($x798 (not $x695)))
 (let (($x692 (or $x798 $x1178)))
 (let ((?x784 (+ ?x796 (* (- 1) (* b00 d!1)))))
 (let (($x811 (= ?x784 0)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let ((?x809 (+ ?x35 ?x105 (* (- 1) ?x782) (* 2 (* b00 y!0)))))
 (let (($x813 (= ?x809 0)))
 (let (($x711 (and $x813 $x811 $x829 $x692)))
 (let ((?x763 (+ (* (/ 1.0 8.0) (* ?x902 ?x902 ?x907 ?x803 ?x803)) (* (/ 1.0 8.0) (* ?x907 ?x907 ?x907 ?x803 ?x803 ?x1066 ?x1066 ?x1066)) (* (/ 1.0 16.0) (* ?x902 ?x902 ?x902 ?x907 ?x803 ?x1066 ?x1066)) (* (/ 1.0 64.0) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x803 ?x1066)) (* (/ 1.0 8.0) (* ?x902 ?x902 ?x902 ?x803 ?x803 ?x1066 ?x1066)) ?x775 (* (/ 1.0 4.0) (* ?x902 ?x902 ?x902 ?x907 ?x803)) ?x561 ?x569 (* (/ 1.0 32.0) (* ?x902 ?x907 ?x907 ?x907 ?x907 ?x907 ?x907 ?x803)) (* (/ 1.0 64.0) (* ?x907 ?x907 ?x907 ?x907 ?x907 ?x907 ?x803 ?x803)) ?x382 (* (/ 3.0 16.0) (* ?x902 ?x907 ?x907 ?x907 ?x907 ?x907 ?x803 ?x1066)) (* (/ 3.0 32.0) (* ?x907 ?x907 ?x907 ?x907 ?x907 ?x803 ?x803 ?x1066)) ?x455 (* (/ 3.0 8.0) (* ?x902 ?x907 ?x907 ?x907 ?x907 ?x803 ?x1066 ?x1066)) (* (/ 3.0 16.0) (* ?x907 ?x907 ?x907 ?x907 ?x803 ?x803 ?x1066 ?x1066)) (* (/ 1.0 4.0) (* ?x902 ?x907 ?x907 ?x907 ?x803 ?x1066 ?x1066 ?x1066)) ?x206 ?x316 (* (/ 1.0 64.0) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x803)) ?x677 (* (/ 1.0 16.0) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x803 ?x1066)) ?x727 ?x740 (* (/ 1.0 128.0) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x907 ?x803)) ?x737 ?x743 (* (/ 1.0 16.0) (* ?x902 ?x902 ?x902 ?x902 ?x907 ?x907 ?x803)) (* (/ 1.0 32.0) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x803 ?x803)) ?x679 (* (/ 1.0 4.0) (* ?x902 ?x902 ?x902 ?x902 ?x907 ?x803 ?x1066)) (* (/ 1.0 8.0) (* ?x902 ?x902 ?x902 ?x907 ?x803 ?x803 ?x1066)) (* (/ 1.0 4.0) (* ?x902 ?x902 ?x902 ?x902 ?x803 ?x1066 ?x1066)))))
 (let ((?x1291 (+ ?x179 (* (- 1.0) (* ?x803 ?x178)) ?x216 (* 2.0 (* ?x1066 ?x75)) (* (- 1.0) (* ?x902 ?x178)) (* ?x907 ?x75))))
 (let ((?x477 (+ (* (/ 1.0 8.0) (* ?x902 ?x902 ?x907 ?x803 ?x803 ?x803 ?x178)) (* (- (/ 1.0 8.0)) (* ?x902 ?x902 ?x907 ?x803 ?x803 ?x177 ?x178)) (* (/ 1.0 4.0) (* ?x902 ?x902 ?x907 ?x803 ?x803 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x902 ?x902 ?x907 ?x803 ?x803 ?x1066 ?x75)) (* (- (/ 1.0 8.0)) (* ?x907 ?x907 ?x907 ?x803 ?x803 ?x1066 ?x1066 ?x1066 ?x177 ?x178)) (* (/ 1.0 8.0) (* ?x907 ?x907 ?x907 ?x803 ?x803 ?x803 ?x1066 ?x1066 ?x1066 ?x178)) (* (/ 1.0 4.0) (* ?x907 ?x907 ?x907 ?x803 ?x803 ?x1066 ?x1066 ?x1066 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x907 ?x907 ?x907 ?x803 ?x803 ?x1066 ?x1066 ?x1066 ?x1066 ?x75)) (* (- (/ 1.0 16.0)) (* ?x902 ?x902 ?x902 ?x907 ?x803 ?x1066 ?x1066 ?x177 ?x178)) (* (/ 1.0 16.0) (* ?x902 ?x902 ?x902 ?x907 ?x803 ?x803 ?x1066 ?x1066 ?x178)) (* (/ 1.0 8.0) (* ?x902 ?x902 ?x902 ?x907 ?x803 ?x1066 ?x1066 ?x75 ?x212)) (* (- (/ 1.0 8.0)) (* ?x902 ?x902 ?x902 ?x907 ?x803 ?x1066 ?x1066 ?x1066 ?x75)) (* (- (/ 1.0 64.0)) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x803 ?x1066 ?x177 ?x178)) (* (/ 1.0 64.0) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x803 ?x803 ?x1066 ?x178)) (* (/ 1.0 32.0) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x803 ?x1066 ?x75 ?x212)) (* (- (/ 1.0 32.0)) (* ?x902 ?x902 ?x902 ?x907 ?x907 ?x907 ?x803 ?x1066 ?x1066 ?x75)) (* (- (/ 1.0 8.0)) (* ?x902 ?x902 ?x902 ?x803 ?x803 ?x1066 ?x1066 ?x177 ?x178)) (* (/ 1.0 8.0) (* ?x902 ?x902 ?x902 ?x803 ?x803 ?x803 ?x1066 ?x1066 ?x178)) (* (/ 1.0 4.0) (* ?x902 ?x902 ?x902 ?x803 ?x803 ?x1066 ?x1066 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x902 ?x902 ?x902 ?x803 ?x803 ?x1066 ?x1066 ?x1066 ?x75)))))
 (let (($x1279 (= (+ ?x1205 ?x1233 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x1239 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x105 (* 2 (* y!0 b00))) 0)))
 (let (($x769 (and $x1239 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x1279 (or (not (= ?x477 0.0)) (not (= (* ?x1291 ?x763) 0.0))))))
 (let (($x1020 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x1324 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61 ?x61))))
 (let ((?x1321 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61))))
 (let ((?x1318 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d)))))
 (let ((?x59 (to_real d)))
 (let ((?x1323 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 3.0 16.0) (* ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63)) ?x1318 ?x1321 ?x1324 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)))))
 (let ((?x593 (* (- 1.0) (* ?x56 (to_real d00)))))
 (let ((?x212 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x213 (* ?x75 ?x212)))
 (let ((?x216 (* (- 2.0) ?x213)))
 (let ((?x197 (* (- 1.0) (* ?x61 (to_real d00)))))
 (let ((?x178 (to_real d00)))
 (let ((?x177 (to_real a00)))
 (let ((?x179 (* ?x177 ?x178)))
 (let ((?x1364 (* (+ ?x179 ?x197 ?x216 (* 2.0 (* ?x63 ?x75)) ?x593 (* ?x59 ?x75)) ?x1323)))
 (let ((?x547 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x178)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x177 ?x178)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x75)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x177 ?x178)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x178)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63 ?x75)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x177 ?x178)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x178)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x75 ?x212)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63 ?x75)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x177 ?x178)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x178)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x75 ?x212)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x75)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x177 ?x178)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x178)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 ?x75)))))
 (let (($x553 (not (= ?x547 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x199 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x204 (= ?x199 0)))
 (let (($x143 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let (($x137 (= (+ ?x35 (* (- 1) (* a d00)) ?x105 (* 2 (* y b00))) 0)))
 (and $x137 $x143 $x204 (or $x553 (not (= ?x1364 0.0)))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x741 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x59 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x1002 (+ ?x63 ?x235)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x646 (+ ?x61 ?x56)))
 (let ((?x374 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x646 ?x646)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x646 ?x646 ?x1002 ?x1002 ?x1002)) (* (/ 1.0 16.0) (* ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002 ?x1002)) (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x646 ?x646 ?x1002 ?x1002)))))
 (let ((?x178 (to_real d00)))
 (let ((?x177 (to_real a00)))
 (let ((?x179 (* ?x177 ?x178)))
 (let ((?x212 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x213 (* ?x75 ?x212)))
 (let ((?x216 (* (- 2.0) ?x213)))
 (let ((?x314 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x1002)) (* (- 1.0) (* ?x178 ?x646))) ?x374)))
 (let ((?x1077 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let ((?x173 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x63)) (* (- 1.0) (* ?x178 ?x61))) ?x1077)))
 (let (($x373 (or (not (= ?x173 0.0)) (not (= ?x314 0.0)))))
 (let ((?x1258 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1207 (= ?x1258 0)))
 (let ((?x945 (* d00 a)))
 (let ((?x181 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x945)))
 (and (= ?x181 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1207 $x373)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1215 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x61 (to_real a)))
 (let ((?x56 (to_real b)))
 (let ((?x1324 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61 ?x61))))
 (let ((?x1321 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d) ?x61))))
 (let ((?x1318 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 (to_real d) (to_real d)))))
 (let ((?x59 (to_real d)))
 (let ((?x1323 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x59)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 32.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 3.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63)) (* (/ 3.0 32.0) (* ?x59 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (/ 3.0 16.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (/ 3.0 8.0) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (/ 3.0 16.0) (* ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x63)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59)) (* (/ 1.0 128.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x63 ?x63)) ?x1318 ?x1321 ?x1324 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)))))
 (let ((?x593 (* (- 1.0) (* ?x56 (to_real d00)))))
 (let ((?x212 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x213 (* ?x75 ?x212)))
 (let ((?x216 (* (- 2.0) ?x213)))
 (let ((?x197 (* (- 1.0) (* ?x61 (to_real d00)))))
 (let ((?x178 (to_real d00)))
 (let ((?x177 (to_real a00)))
 (let ((?x179 (* ?x177 ?x178)))
 (let ((?x1364 (* (+ ?x179 ?x197 ?x216 (* 2.0 (* ?x63 ?x75)) ?x593 (* ?x59 ?x75)) ?x1323)))
 (let ((?x547 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x178)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x177 ?x178)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x75)) (* (- (/ 1.0 8.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x177 ?x178)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63 ?x178)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63 ?x63 ?x75)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x177 ?x178)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x63 ?x63 ?x178)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x75 ?x212)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63 ?x75)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x177 ?x178)) (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x178)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x75 ?x212)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x75)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x177 ?x178)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x178)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x75 ?x212)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63 ?x75)))))
 (let (($x553 (not (= ?x547 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x199 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x204 (= ?x199 0)))
 (let (($x143 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let ((?x35 (* a00 d00)))
 (let (($x137 (= (+ ?x35 (* (- 1) (* a d00)) ?x105 (* 2 (* y b00))) 0)))
 (let (($x1383 (and $x137 $x143 $x204 (or $x553 (not (= ?x1364 0.0))))))
 (let ((?x235 (* (/ 1.0 2.0) ?x59)))
 (let ((?x1002 (+ ?x63 ?x235)))
 (let ((?x646 (+ ?x61 ?x56)))
 (let ((?x374 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x646 ?x646)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x646 ?x646 ?x1002 ?x1002 ?x1002)) (* (/ 1.0 16.0) (* ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002 ?x1002)) (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x646 ?x646 ?x1002 ?x1002)))))
 (let ((?x314 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x1002)) (* (- 1.0) (* ?x178 ?x646))) ?x374)))
 (let ((?x1077 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let ((?x173 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x63)) (* (- 1.0) (* ?x178 ?x61))) ?x1077)))
 (let (($x373 (or (not (= ?x173 0.0)) (not (= ?x314 0.0)))))
 (let ((?x1258 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1207 (= ?x1258 0)))
 (let ((?x945 (* d00 a)))
 (let (($x657 (= (+ (* 2 ?x104) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x945) 0)))
 (let (($x429 (and $x657 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1207 $x373)))
 (rewrite (= $x429 $x1383)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1062 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x59 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x1002 (+ ?x63 ?x235)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x646 (+ ?x61 ?x56)))
 (let ((?x374 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x646 ?x646)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x646 ?x646 ?x1002 ?x1002 ?x1002)) (* (/ 1.0 16.0) (* ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002 ?x1002)) (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x646 ?x646 ?x1002 ?x1002)))))
 (let ((?x178 (to_real d00)))
 (let ((?x177 (to_real a00)))
 (let ((?x179 (* ?x177 ?x178)))
 (let ((?x212 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x213 (* ?x75 ?x212)))
 (let ((?x216 (* (- 2.0) ?x213)))
 (let ((?x314 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x1002)) (* (- 1.0) (* ?x178 ?x646))) ?x374)))
 (let ((?x1077 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let ((?x173 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x63)) (* (- 1.0) (* ?x178 ?x61))) ?x1077)))
 (let (($x373 (or (not (= ?x173 0.0)) (not (= ?x314 0.0)))))
 (let ((?x1258 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1207 (= ?x1258 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x258 (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x258 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1207 $x373)))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1025 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x59 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x1002 (+ ?x63 ?x235)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x646 (+ ?x61 ?x56)))
 (let ((?x374 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x646 ?x646)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x646 ?x646 ?x1002 ?x1002 ?x1002)) (* (/ 1.0 16.0) (* ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002 ?x1002)) (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x646 ?x646 ?x1002 ?x1002)))))
 (let ((?x178 (to_real d00)))
 (let ((?x177 (to_real a00)))
 (let ((?x179 (* ?x177 ?x178)))
 (let ((?x212 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x213 (* ?x75 ?x212)))
 (let ((?x216 (* (- 2.0) ?x213)))
 (let ((?x314 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x1002)) (* (- 1.0) (* ?x178 ?x646))) ?x374)))
 (let ((?x1077 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let ((?x173 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x63)) (* (- 1.0) (* ?x178 ?x61))) ?x1077)))
 (let (($x373 (or (not (= ?x173 0.0)) (not (= ?x314 0.0)))))
 (let ((?x1258 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1207 (= ?x1258 0)))
 (let ((?x945 (* d00 a)))
 (let ((?x181 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x945)))
 (let (($x429 (and (= ?x181 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1207 $x373)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x365 (and (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) ?x945)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1207 $x373)))
 (rewrite (= $x365 $x429)))))))))))))))))))))))))))))))
 ))
 (let (($x96 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x71 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x74 (+ ?x63 ?x60)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (+ a b)))
 (let ((?x84 (to_real ?x80)))
 (let ((?x90 (+ (* ?x84 ?x84 ?x58 ?x58 ?x60) (* ?x84 ?x84 ?x60 ?x60 ?x60 ?x74 ?x74 ?x74) (* ?x84 ?x58 ?x58 ?x58 ?x60 ?x74 ?x74) (* ?x84 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x74) (* ?x84 ?x84 ?x58 ?x58 ?x58 ?x74 ?x74))))
 (let ((?x35 (* a00 d00)))
 (let ((?x78 (to_real ?x35)))
 (let ((?x79 (+ (to_real (* (- 2) b00 y00)) ?x78 (* ?x57 (to_real b00) ?x74))))
 (let ((?x68 (+ (* (to_real a) (to_real a) ?x58 ?x58 ?x60) (* (to_real a) (to_real a) ?x60 ?x60 ?x60 ?x63 ?x63 ?x63) (* (to_real a) ?x58 ?x58 ?x58 ?x60 ?x63 ?x63) (* (to_real a) ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63) (* (to_real a) (to_real a) ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x94 (or (not (= (* (to_real ?x39) ?x68) ?x71)) (not (= (* (- ?x79 (to_real (* ?x80 d00))) ?x90) ?x71)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x94))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x998 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x59 (to_real d)))
 (let ((?x235 (* (/ 1.0 2.0) ?x59)))
 (let ((?x63 (to_real y)))
 (let ((?x1002 (+ ?x63 ?x235)))
 (let ((?x56 (to_real b)))
 (let ((?x61 (to_real a)))
 (let ((?x646 (+ ?x61 ?x56)))
 (let ((?x374 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x646 ?x646)) (* (/ 1.0 8.0) (* ?x59 ?x59 ?x59 ?x646 ?x646 ?x1002 ?x1002 ?x1002)) (* (/ 1.0 16.0) (* ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002 ?x1002)) (* (/ 1.0 64.0) (* ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x646 ?x1002)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x646 ?x646 ?x1002 ?x1002)))))
 (let ((?x178 (to_real d00)))
 (let ((?x177 (to_real a00)))
 (let ((?x179 (* ?x177 ?x178)))
 (let ((?x212 (to_real y00)))
 (let ((?x75 (to_real b00)))
 (let ((?x213 (* ?x75 ?x212)))
 (let ((?x216 (* (- 2.0) ?x213)))
 (let ((?x314 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x1002)) (* (- 1.0) (* ?x178 ?x646))) ?x374)))
 (let ((?x1077 (+ (* (/ 1.0 8.0) (* ?x59 ?x56 ?x56 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x63 ?x59 ?x59 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x63 ?x63 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x61)) (* (/ 1.0 8.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61)))))
 (let ((?x173 (* (+ ?x216 ?x179 (* 2.0 (* ?x75 ?x63)) (* (- 1.0) (* ?x178 ?x61))) ?x1077)))
 (let (($x373 (or (not (= ?x173 0.0)) (not (= ?x314 0.0)))))
 (let ((?x1258 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1207 (= ?x1258 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x104 (* b00 y00)))
 (let ((?x105 (* (- 2) ?x104)))
 (let (($x258 (= (+ ?x105 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x365 (and $x258 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1207 $x373)))
 (let ((?x71 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x74 (+ ?x63 ?x60)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x80 (+ a b)))
 (let ((?x84 (to_real ?x80)))
 (let ((?x90 (+ (* ?x84 ?x84 ?x58 ?x58 ?x60) (* ?x84 ?x84 ?x60 ?x60 ?x60 ?x74 ?x74 ?x74) (* ?x84 ?x58 ?x58 ?x58 ?x60 ?x74 ?x74) (* ?x84 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x74) (* ?x84 ?x84 ?x58 ?x58 ?x58 ?x74 ?x74))))
 (let ((?x78 (to_real ?x35)))
 (let ((?x83 (- (+ (to_real (* (- 2) b00 y00)) ?x78 (* ?x57 ?x75 ?x74)) (to_real (* ?x80 d00)))))
 (let ((?x68 (+ (* ?x61 ?x61 ?x58 ?x58 ?x60) (* ?x61 ?x61 ?x60 ?x60 ?x60 ?x63 ?x63 ?x63) (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x63 ?x63) (* ?x61 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63) (* ?x61 ?x61 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x94 (or (not (= (* (to_real ?x39) ?x68) ?x71)) (not (= (* ?x83 ?x90) ?x71)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x95 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x94)))
 (rewrite (= $x95 $x365))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x97 (asserted $x96)))
 (let ((@x641 (mp (mp @x97 (quant-intro (proof-bind ?x998) (= $x96 $x1062)) $x1062) (rewrite (= $x1062 $x1062)) $x1062)))
 (let ((@x734 (mp (mp @x641 (quant-intro (proof-bind ?x1025) (= $x1062 $x741)) $x741) (quant-intro (proof-bind ?x1215) (= $x741 $x1020)) $x1020)))
 (let ((@x888 (mp (mp~ @x734 (sk (~ $x1020 $x769)) $x769) (rewrite (= $x769 $x711)) $x711)))
 (let ((@x1290 (mp (and-elim @x888 $x829) @x992 $x898)))
 (let ((@x517 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x898) $x908)) @x1290 $x908)))
 (let (($x904 (<= ?x823 0)))
 (let ((@x1295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x898) $x904)) @x1290 $x904)))
 (let (($x890 (>= ?x784 0)))
 (let (($x817 (= 0 ?x784)))
 (let ((@x276 (mp (and-elim @x888 $x811) (symm (commutativity (= $x817 $x811)) (= $x811 $x817)) $x817)))
 (let ((@x1031 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x817) $x890)) @x276 $x890)))
 (let (($x887 (<= ?x784 0)))
 (let ((@x285 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x817) $x887)) @x276 $x887)))
 (let (($x816 (>= ?x809 0)))
 (let (($x683 (= 0 ?x809)))
 (let ((@x1139 (mp (and-elim @x888 $x813) (symm (commutativity (= $x683 $x813)) (= $x813 $x683)) $x683)))
 (let ((@x1145 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x683) $x816)) @x1139 $x816)))
 (let (($x814 (<= ?x809 0)))
 (let ((@x988 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x683) $x814)) @x1139 $x814)))
 (let (($x334 (not $x814)))
 (let (($x991 (not $x1272)))
 (let (($x1334 (not $x908)))
 (let (($x1313 (not $x904)))
 (let (($x971 (not $x816)))
 (let (($x336 (not $x887)))
 (let (($x560 (not $x935)))
 (let (($x340 (not $x890)))
 (let (($x1336 (or $x340 $x560 (not $x598) $x336 (not $x1310) $x914 $x971 $x1313 $x1334 $x991 $x334)))
 (let ((@x1285 (unit-resolution ((_ th-lemma arith) $x1336) @x988 @x1145 @x285 @x1031 @x1295 @x517 (hypothesis (not $x914)) @x738 @x713 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1293) $x1310)) @x574 $x1310) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1293) $x598)) @x574 $x598) false)))
 (let ((@x1163 (unit-resolution (lemma @x1285 (or (not $x1293) $x914)) (unit-resolution (lemma @x1098 (or (not $x296) $x1293)) @x668 $x1293) $x914)))
 (let (($x917 (= 0.0 ?x694)))
 (let (($x1100 (not $x917)))
 (let ((@x604 (monotonicity (symm (commutativity (= $x917 $x695)) (= $x695 $x917)) (= $x798 $x1100))))
 (let ((@x551 (commutativity (= (= 0.0 ?x704) $x884))))
 (let (($x918 (= 0.0 ?x704)))
 (let ((?x960 (+ (* 2.0 ?x213) ?x831 (* (- 1.0) ?x834) ?x910 (* (- 2.0) (* ?x75 ?x1066)) (* (- 1.0) ?x179))))
 (let (($x961 (<= ?x960 0.0)))
 (let ((?x915 (* ?x75 ?x1066)))
 (let ((?x1174 (+ (* (- 1.0) (to_real (* b00 y!0))) ?x915)))
 (let (($x839 (>= ?x1174 0.0)))
 (let (($x1172 (= 0.0 ?x1174)))
 (let ((@x705 (symm (commutativity (= $x1172 (= ?x1174 0.0))) (= (= ?x1174 0.0) $x1172))))
 (let ((@x1182 (mp ((_ th-lemma arith) (= ?x1174 0.0)) @x705 $x1172)))
 (let ((@x1206 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1172) $x839)) @x1182 $x839)))
 (let ((?x706 (+ ?x910 (* (- 1.0) ?x1200))))
 (let (($x1198 (<= ?x706 0.0)))
 (let (($x1191 (= 0.0 ?x706)))
 (let ((@x449 (symm (commutativity (= $x1191 (= ?x706 0.0))) (= (= ?x706 0.0) $x1191))))
 (let ((@x599 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1191) $x1198)) (mp ((_ th-lemma arith) (= ?x706 0.0)) @x449 $x1191) $x1198)))
 (let ((?x1199 (+ ?x213 (* (- 1.0) (to_real ?x104)))))
 (let (($x1195 (<= ?x1199 0.0)))
 (let (($x1196 (= 0.0 ?x1199)))
 (let ((@x1029 (symm (commutativity (= $x1196 (= ?x1199 0.0))) (= (= ?x1199 0.0) $x1196))))
 (let ((@x1119 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1196) $x1195)) (mp ((_ th-lemma arith) (= ?x1199 0.0)) @x1029 $x1196) $x1195)))
 (let ((?x865 (+ ?x834 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x875 (>= ?x865 0.0)))
 (let (($x690 (= 0.0 ?x865)))
 (let ((@x1132 (symm (commutativity (= $x690 (= ?x865 0.0))) (= (= ?x865 0.0) $x690))))
 (let ((@x1133 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x690) $x875)) (mp ((_ th-lemma arith) (= ?x865 0.0)) @x1132 $x690) $x875)))
 (let ((?x848 (+ ?x831 (* (- 1.0) ?x687))))
 (let (($x852 (<= ?x848 0.0)))
 (let (($x859 (= 0.0 ?x848)))
 (let ((@x1043 (symm (commutativity (= $x859 (= ?x848 0.0))) (= (= ?x848 0.0) $x859))))
 (let ((@x1086 (mp ((_ th-lemma arith) (= ?x848 0.0)) @x1043 $x859)))
 (let ((@x1009 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x859) $x852)) @x1086 $x852)))
 (let ((@x1006 ((_ th-lemma arith) @x1009 @x285 @x1145 @x1133 @x1119 @x599 (hypothesis (not $x961)) (hypothesis $x1272) @x1206 false)))
 (let ((@x355 (unit-resolution (lemma @x1006 (or $x991 $x961)) @x738 $x961)))
 (let ((?x930 (+ ?x206 ?x316 ?x455 ?x569 ?x737 ?x928 ?x230 ?x727 ?x740 ?x743 ?x679 ?x775 ?x561 ?x382 ?x889 ?x693 ?x883 ?x900 ?x903 ?x913 ?x912 ?x920 ?x929 ?x698 ?x938 ?x954 ?x956 ?x670 ?x979 ?x962 ?x1265 ?x523 ?x677 ?x702)))
 (let (($x937 (<= ?x930 0.0)))
 (let (($x1016 (not $x937)))
 (let (($x359 (= 0.0 ?x930)))
 (let (($x1041 (not $x359)))
 (let (($x963 (not $x918)))
 (let ((@x228 (hypothesis $x963)))
 (let ((@x642 (mp @x228 (monotonicity @x551 (= $x963 $x1178)) $x1178)))
 (let (($x631 (= ?x930 0.0)))
 (let (($x379 (not $x631)))
 (let ((@x384 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x379 $x884)) (hypothesis $x1178) $x379) (symm (hypothesis $x359) $x631) false)))
 (let ((@x388 (lemma @x384 (or $x1041 $x884))))
 (let (($x939 (>= ?x930 0.0)))
 (let (($x927 (>= ?x704 0.0)))
 (let (($x356 (not $x927)))
 (let (($x923 (<= ?x704 0.0)))
 (let (($x344 (not $x923)))
 (let ((@x342 (hypothesis $x344)))
 (let (($x346 (not $x939)))
 (let ((@x348 (hypothesis $x346)))
 (let ((@x357 (unit-resolution ((_ th-lemma arith) (or (not $x961) $x939 $x923)) @x342 @x348 @x355 false)))
 (let (($x508 (>= ?x960 0.0)))
 (let (($x978 (>= ?x848 0.0)))
 (let (($x940 (<= ?x1174 0.0)))
 (let (($x664 (or $x560 (not $x839) $x971 (not $x940) $x334 $x336 $x508 $x340 (not $x852) (not $x978) $x991)))
 (let ((@x625 (unit-resolution ((_ th-lemma arith) $x664) @x988 @x1145 @x285 @x1031 @x738 @x713 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1172) $x940)) @x1182 $x940) @x1206 @x1009 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x859) $x978)) @x1086 $x978) (hypothesis (not $x508)) false)))
 (let ((@x968 (lemma @x625 $x508)))
 (let ((@x308 (unit-resolution ((_ th-lemma arith) (or (not $x508) $x937 $x923)) @x342 (hypothesis $x1016) @x968 false)))
 (let ((@x1064 ((_ th-lemma arith triangle-eq) (or $x359 $x1016 $x346))))
 (let ((@x1083 (unit-resolution @x1064 (unit-resolution (lemma @x308 (or $x937 $x923)) @x342 $x937) (unit-resolution (lemma @x357 (or $x939 $x923)) @x342 $x939) $x359)))
 (let ((@x1354 (unit-resolution (lemma (unit-resolution @x388 @x1083 @x642 false) (or $x923 $x918)) @x228 $x923)))
 (let ((@x1356 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x918 $x344 $x356)) @x1354 @x228 $x356)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith) (or (not $x508) $x939 $x927)) (hypothesis $x356) @x348 @x968 false)))
 (let ((@x1358 (unit-resolution @x1064 (unit-resolution (lemma @x448 (or $x939 $x927)) @x1356 $x939) (unit-resolution @x388 @x642 $x1041) $x1016)))
 (let ((@x1373 (unit-resolution ((_ th-lemma arith) (or (not $x961) $x937 $x927)) @x1356 @x1358 @x355 false)))
 (let ((@x1300 (unit-resolution (and-elim @x888 $x692) (mp (lemma @x1373 $x918) @x551 $x884) $x798)))
 (let ((@x1306 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x917 $x1303 (not $x914))) (mp @x1300 @x604 $x1100) (or $x1303 (not $x914)))))
 (let ((@x1315 (unit-resolution ((_ th-lemma arith) (or $x1313 $x1334 $x971 (not $x440) $x334 $x919 (not $x437))) @x988 @x1145 @x1295 @x517 (unit-resolution @x1306 @x1163 $x1303) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1308 $x437)) @x597 $x437) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1308 $x440)) @x597 $x440) false)))
 (unit-resolution ((_ th-lemma arith) $x424) (lemma @x1315 $x1308) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       95
 :arith-eq-adapter                99
 :arith-bound-propagations-cheap  66
 :arith-bound-propagations-lp     1
 :arith-conflicts                 213
 :arith-diseq                     76
 :arith-gcd-calls                 9
 :arith-grobner-calls             9
 :arith-grobner-conflicts         3
 :arith-horner-calls              9
 :arith-horner-cross-nested-forms 13
 :arith-lower                     129
 :arith-make-feasible             102
 :arith-max-columns               125
 :arith-max-rows                  28
 :arith-nla-explanations          234
 :arith-nla-lemmas                212
 :arith-patches                   9
 :arith-patches-success           9
 :arith-propagations              66
 :arith-upper                     99
 :conflicts                       21
 :decisions                       214
 :del-clause                      325
 :final-checks                    64
 :max-memory                      7.46
 :memory                          3.27
 :minimized-lits                  5
 :mk-bool-var                     499
 :mk-clause                       417
 :num-allocs                      36894160
 :num-checks                      1
 :propagations                    241
 :rlimit-count                    11809
 :time                            0.09
 :total-time                      0.10)
