unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x72 (* y00 q00)))
 (let ((?x158 (+ r00 ?x72 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x271 (<= ?x158 0)))
 (let (($x310 (= ?x158 0)))
 (let ((?x513 (+ (* 3 (* y00 y00 y00 q!2 q!2 q!2)) (* 3 (* y00 y00 r!1 q!2 q!2)) (* (- 3) (* y00 y00 r00 q!2)) (* (- 3) (* y00 y00 r00 q!2 q!2)) (* (- 1) (* y00 y00 r00 q!2 q!2 q!2)) (* 3 (* y00 y00 y00 q!2 q!2)) (* y00 y00 y00 q!2 q!2 q!2 q!2) (* (- 3) (* y00 y00 y00 q00 q!2)) (* (- 3) (* y00 y00 y00 q00 q!2 q!2)) (* (- 1) (* y00 y00 y00 q00 q!2 q!2 q!2)) (* 3 (* y00 y00 r!1 q!2)) (* y00 y00 r!1 q!2 q!2 q!2))))
 (let (($x349 (= ?x513 0)))
 (let (($x350 (not $x349)))
 (let ((?x247 (+ y00 (* (- 1) y!0))))
 (let (($x251 (= ?x247 0)))
 (let (($x421 (and $x251 $x310 $x350)))
 (let ((?x160 (+ (* 3 (* q!2 y00 y00 r00)) (* 3 (* q!2 q!2 y00 y00 r00)) (* q!2 q!2 q!2 y00 y00 r00) (* (- 3) (* q!2 q!2 y00 y00 y00)) (* (- 3) (* q!2 q!2 q!2 y00 y00 y00)) (* (- 1) (* q!2 q!2 q!2 q!2 y00 y00 y00)) (* 3 (* q!2 y00 y00 y00 q00)) (* 3 (* q!2 q!2 y00 y00 y00 q00)) (* q!2 q!2 q!2 y00 y00 y00 q00) (* (- 3) (* q!2 r!1 y00 y00)) (* (- 3) (* q!2 q!2 r!1 y00 y00)) (* (- 1) (* q!2 q!2 q!2 r!1 y00 y00)))))
 (let (($x163 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x72)) 0) (not (= ?x160 0)))))
 (let (($x492 (exists ((q Int) (r Int) (y Int) )(! (let ((?x485 (+ (* 3 (* q y00 y00 r00)) (* 3 (* q q y00 y00 r00)) (* q q q y00 y00 r00) (* (- 3) (* q q y00 y00 y00)) (* (- 3) (* q q q y00 y00 y00)) (* (- 1) (* q q q q y00 y00 y00)) (* 3 (* q y00 y00 y00 q00)) (* 3 (* q q y00 y00 y00 q00)) (* q q q y00 y00 y00 q00) (* (- 3) (* q r y00 y00)) (* (- 3) (* q q r y00 y00)) (* (- 1) (* q q q r y00 y00)))))
 (let (($x101 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x101 (not (= ?x485 0))))) :qid k!29))
 ))
 (let (($x183 (exists ((q Int) (r Int) (y Int) )(! (let ((?x67 (* (- 1) y00)))
 (let ((?x107 (+ r ?x67)))
 (let ((?x152 (* y00 y00 ?x107)))
 (let ((?x240 (+ 1 q)))
 (let ((?x134 (* y00 y00 ?x240 ?x240 ?x240 ?x107)))
 (let ((?x456 (* q00 y00 y00 y00 ?x240 ?x240 ?x240)))
 (let ((?x339 (* r00 y00 y00 ?x240 ?x240 ?x240)))
 (let ((?x324 (* y00 y00 y00 ?x240)))
 (let ((?x74 (+ ?x324 ?x339 (* (- 1) (* y00 y00 y00 ?x240 ?x240 ?x240 ?x240)) (* (- 1) (* q00 y00 y00 y00)) ?x456 (* (- 1) ?x134) ?x152 (* (- 1) (* r00 y00 y00)))))
 (let (($x342 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x342 (not (= ?x74 0))))))))))))) :qid k!29))
 ))
 (let ((?x268 (lambda ((q Int) (r Int) (y Int) )(let ((?x485 (+ (* 3 (* q y00 y00 r00)) (* 3 (* q q y00 y00 r00)) (* q q q y00 y00 r00) (* (- 3) (* q q y00 y00 y00)) (* (- 3) (* q q q y00 y00 y00)) (* (- 1) (* q q q q y00 y00 y00)) (* 3 (* q y00 y00 y00 q00)) (* 3 (* q q y00 y00 y00 q00)) (* q q q y00 y00 y00 q00) (* (- 3) (* q r y00 y00)) (* (- 3) (* q q r y00 y00)) (* (- 1) (* q q q r y00 y00)))))
 (let (($x101 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x95 (and (= (+ y (* (- 1) y00)) 0) $x101 (not (= ?x485 0)))))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x107 (+ r ?x67)))
 (let ((?x152 (* y00 y00 ?x107)))
 (let ((?x240 (+ 1 q)))
 (let ((?x134 (* y00 y00 ?x240 ?x240 ?x240 ?x107)))
 (let ((?x456 (* q00 y00 y00 y00 ?x240 ?x240 ?x240)))
 (let ((?x339 (* r00 y00 y00 ?x240 ?x240 ?x240)))
 (let ((?x324 (* y00 y00 y00 ?x240)))
 (let ((?x74 (+ ?x324 ?x339 (* (- 1) (* y00 y00 y00 ?x240 ?x240 ?x240 ?x240)) (* (- 1) (* q00 y00 y00 y00)) ?x456 (* (- 1) ?x134) ?x152 (* (- 1) (* r00 y00 y00)))))
 (let (($x342 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x195 (and (= (+ y00 (* (- 1) y)) 0) $x342 (not (= ?x74 0)))))
 (rewrite (= $x195 $x95)))))))))))))))))
 ))
 (let (($x315 (exists ((q Int) (r Int) (y Int) )(! (let ((?x56 (* r00 y00 y00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x107 (+ r ?x67)))
 (let ((?x240 (+ 1 q)))
 (let ((?x134 (* y00 y00 ?x240 ?x240 ?x240 ?x107)))
 (let ((?x47 (* q00 y00 y00 y00)))
 (let ((?x84 (* y00 y00 y00 ?x240 ?x240 ?x240 ?x240)))
 (let ((?x221 (+ (* (- 1) (* y00 y00 y00 ?x240)) (* (- 1) (* r00 y00 y00 ?x240 ?x240 ?x240)) ?x84 ?x47 (* (- 1) (* q00 y00 y00 y00 ?x240 ?x240 ?x240)) ?x134 (* (- 1) (* y00 y00 ?x107)) ?x56)))
 (let (($x342 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ ?x67 y) 0) $x342 (not (= ?x221 0)))))))))))) :qid k!29))
 ))
 (let ((?x124 (lambda ((q Int) (r Int) (y Int) )(let ((?x67 (* (- 1) y00)))
 (let ((?x107 (+ r ?x67)))
 (let ((?x152 (* y00 y00 ?x107)))
 (let ((?x240 (+ 1 q)))
 (let ((?x134 (* y00 y00 ?x240 ?x240 ?x240 ?x107)))
 (let ((?x456 (* q00 y00 y00 y00 ?x240 ?x240 ?x240)))
 (let ((?x339 (* r00 y00 y00 ?x240 ?x240 ?x240)))
 (let ((?x324 (* y00 y00 y00 ?x240)))
 (let ((?x74 (+ ?x324 ?x339 (* (- 1) (* y00 y00 y00 ?x240 ?x240 ?x240 ?x240)) (* (- 1) (* q00 y00 y00 y00)) ?x456 (* (- 1) ?x134) ?x152 (* (- 1) (* r00 y00 y00)))))
 (let (($x342 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x195 (and (= (+ y00 (* (- 1) y)) 0) $x342 (not (= ?x74 0)))))
 (let ((?x56 (* r00 y00 y00)))
 (let ((?x47 (* q00 y00 y00 y00)))
 (let ((?x84 (* y00 y00 y00 ?x240 ?x240 ?x240 ?x240)))
 (let ((?x221 (+ (* (- 1) ?x324) (* (- 1) ?x339) ?x84 ?x47 (* (- 1) ?x456) ?x134 (* (- 1) ?x152) ?x56)))
 (let (($x330 (and (= (+ ?x67 y) 0) $x342 (not (= ?x221 0)))))
 (rewrite (= $x330 $x195)))))))))))))))))))
 ))
 (let (($x62 (exists ((q Int) (r Int) (y Int) )(! (let ((?x56 (* r00 y00 y00)))
 (let ((?x51 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x47 (* q00 y00 y00 y00)))
 (let ((?x45 (- (* (- 1) ?x42 y00 y00 y00) (* ?x42 ?x42 ?x42 r00 y00 y00))))
 (let ((?x50 (- (+ ?x45 (* ?x42 ?x42 ?x42 ?x42 y00 y00 y00) ?x47) (* ?x42 ?x42 ?x42 q00 y00 y00 y00))))
 (let ((?x55 (- (+ ?x50 (* ?x42 ?x42 ?x42 ?x51 y00 y00)) (* ?x51 y00 y00))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= (+ ?x55 ?x56) 0))))))))))) :qid k!29))
 ))
 (let ((?x326 (lambda ((q Int) (r Int) (y Int) )(let ((?x56 (* r00 y00 y00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x107 (+ r ?x67)))
 (let ((?x240 (+ 1 q)))
 (let ((?x134 (* y00 y00 ?x240 ?x240 ?x240 ?x107)))
 (let ((?x47 (* q00 y00 y00 y00)))
 (let ((?x84 (* y00 y00 y00 ?x240 ?x240 ?x240 ?x240)))
 (let ((?x221 (+ (* (- 1) (* y00 y00 y00 ?x240)) (* (- 1) (* r00 y00 y00 ?x240 ?x240 ?x240)) ?x84 ?x47 (* (- 1) (* q00 y00 y00 y00 ?x240 ?x240 ?x240)) ?x134 (* (- 1) (* y00 y00 ?x107)) ?x56)))
 (let (($x342 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x330 (and (= (+ ?x67 y) 0) $x342 (not (= ?x221 0)))))
 (let ((?x51 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x45 (- (* (- 1) ?x42 y00 y00 y00) (* ?x42 ?x42 ?x42 r00 y00 y00))))
 (let ((?x50 (- (+ ?x45 (* ?x42 ?x42 ?x42 ?x42 y00 y00 y00) ?x47) (* ?x42 ?x42 ?x42 q00 y00 y00 y00))))
 (let ((?x55 (- (+ ?x50 (* ?x42 ?x42 ?x42 ?x51 y00 y00)) (* ?x51 y00 y00))))
 (let (($x61 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= (+ ?x55 ?x56) 0))))))
 (rewrite (= $x61 $x330)))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x167 (mp (mp @x63 (quant-intro (proof-bind ?x326) (= $x62 $x315)) $x315) (rewrite (= $x315 $x315)) $x315)))
 (let ((@x455 (mp (mp @x167 (quant-intro (proof-bind ?x124) (= $x315 $x183)) $x183) (quant-intro (proof-bind ?x268) (= $x183 $x492)) $x492)))
 (let ((@x521 (mp (mp~ @x455 (sk (~ $x492 $x163)) $x163) (rewrite (= $x163 $x421)) $x421)))
 (let ((@x259 (and-elim @x521 $x310)))
 (let ((@x467 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x310) $x271)) @x259 $x271)))
 (let (($x272 (>= ?x158 0)))
 (let ((@x414 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x310) $x272)) @x259 $x272)))
 (let (($x261 (<= ?x247 0)))
 (let ((@x523 (and-elim @x521 $x251)))
 (let ((@x257 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x251) $x261)) @x523 $x261)))
 (let (($x262 (>= ?x247 0)))
 (let ((@x256 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x251) $x262)) @x523 $x262)))
 (let (($x422 (not (<= ?x513 0))))
 (let (($x274 (>= ?x513 0)))
 (let ((@x190 (lemma ((_ th-lemma arith) (hypothesis (not $x274)) @x256 @x257 @x414 @x467 false) $x274)))
 (let ((@x504 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x349 $x422 (not $x274))) (and-elim @x521 $x350) (or $x422 (not $x274)))))
 ((_ th-lemma arith) (unit-resolution @x504 @x190 $x422) @x256 @x257 @x414 @x467 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        4
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-grobner             2
 :arith-max-min             76
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-pivots              3
 :arith-tableau-max-columns 27
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.61
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1113833
 :num-checks                1
 :propagations              6
 :rlimit-count              2167
 :time                      0.01
 :total-time                0.01)
