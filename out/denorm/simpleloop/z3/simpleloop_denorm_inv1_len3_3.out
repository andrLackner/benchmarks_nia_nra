unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x185 (* (- 1) x!1)))
 (let ((?x163 (* (- 1) y!0)))
 (let ((?x209 (+ y00 x00 ?x163 ?x185)))
 (let (($x142 (<= ?x209 0)))
 (let (($x164 (= ?x209 0)))
 (let ((?x62 (* x!1 x!1)))
 (let ((?x261 (+ y00 x00 ?x62 (* (- 1) (* y!0 y!0)) ?x163 (* x00 y!0) (* y!0 y!0 x!1) (* y00 y!0) (* (- 1) (* y00 x!1)) (* y!0 x!1 x!1) ?x185 (* (- 1) (* y00 y!0 x!1)) (* (- 1) (* x00 y!0 x!1)) (* (- 1) (* x00 x!1)))))
 (let (($x262 (= ?x261 0)))
 (let (($x84 (not $x262)))
 (let (($x166 (and $x164 $x84)))
 (let ((?x65 (* y!0 y!0)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x138 (+ x!1 y!0 ?x51 ?x58 ?x65 (* (- 1) (* y!0 y00)) (* (- 1) (* y!0 x00)) (* (- 1) ?x62) (* x!1 y00) (* x!1 x00) (* (- 1) (* x!1 x!1 y!0)) (* (- 1) (* x!1 y!0 y!0)) (* x!1 y!0 y00) (* x!1 y!0 x00))))
 (let (($x115 (and (= (+ x!1 y!0 ?x51 ?x58) 0) (not (= ?x138 0)))))
 (let (($x76 (exists ((x Int) (y Int) )(! (let ((?x250 (* x y x00)))
 (let ((?x242 (* x y y00)))
 (let ((?x236 (* (- 1) (* x y y))))
 (let ((?x226 (* (- 1) (* x x y))))
 (let ((?x220 (* x x00)))
 (let ((?x212 (* x y00)))
 (let ((?x198 (* (- 1) (* x x))))
 (let ((?x165 (* y y)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x258 (+ x y ?x51 ?x58 ?x165 (* (- 1) (* y y00)) (* (- 1) (* y x00)) ?x198 ?x212 ?x220 ?x226 ?x236 ?x242 ?x250)))
 (let (($x77 (= (+ x y ?x51 ?x58) 0)))
 (and $x77 (not (= ?x258 0))))))))))))))) :qid k!26))
 ))
 (let (($x218 (exists ((x Int) (y Int) )(! (let ((?x250 (* x y x00)))
 (let ((?x242 (* x y y00)))
 (let ((?x236 (* (- 1) (* x y y))))
 (let ((?x226 (* (- 1) (* x x y))))
 (let ((?x220 (* x x00)))
 (let ((?x212 (* x y00)))
 (let ((?x198 (* (- 1) (* x x))))
 (let ((?x165 (* y y)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x206 (+ x y ?x51 ?x58 (* (- 1) (* x y)) (* y ?x51) ?x165 ?x198 ?x212 ?x220 (* y x) ?x226 ?x236 (* y ?x58) ?x242 ?x250)))
 (let (($x77 (= (+ x y ?x51 ?x58) 0)))
 (and $x77 (not (= ?x206 0))))))))))))))) :qid k!26))
 ))
 (let ((?x186 (lambda ((x Int) (y Int) )(let ((?x250 (* x y x00)))
 (let ((?x242 (* x y y00)))
 (let ((?x236 (* (- 1) (* x y y))))
 (let ((?x226 (* (- 1) (* x x y))))
 (let ((?x220 (* x x00)))
 (let ((?x212 (* x y00)))
 (let ((?x198 (* (- 1) (* x x))))
 (let ((?x165 (* y y)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x258 (+ x y ?x51 ?x58 ?x165 (* (- 1) (* y y00)) (* (- 1) (* y x00)) ?x198 ?x212 ?x220 ?x226 ?x236 ?x242 ?x250)))
 (let (($x77 (= (+ x y ?x51 ?x58) 0)))
 (let (($x90 (and $x77 (not (= ?x258 0)))))
 (let ((?x206 (+ x y ?x51 ?x58 (* (- 1) (* x y)) (* y ?x51) ?x165 ?x198 ?x212 ?x220 (* y x) ?x226 ?x236 (* y ?x58) ?x242 ?x250)))
 (let (($x126 (and $x77 (not (= ?x206 0)))))
 (rewrite (= $x126 $x90))))))))))))))))))
 ))
 (let (($x240 (exists ((x Int) (y Int) )(! (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x141 (+ x ?x51 ?x58 y)))
 (and (= ?x141 0) (not (= (* (+ (- 1) x) (+ 1 y) ?x141) 0)))))) :qid k!26))
 ))
 (let ((?x172 (lambda ((x Int) (y Int) )(let ((?x250 (* x y x00)))
 (let ((?x242 (* x y y00)))
 (let ((?x236 (* (- 1) (* x y y))))
 (let ((?x226 (* (- 1) (* x x y))))
 (let ((?x220 (* x x00)))
 (let ((?x212 (* x y00)))
 (let ((?x198 (* (- 1) (* x x))))
 (let ((?x165 (* y y)))
 (let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x206 (+ x y ?x51 ?x58 (* (- 1) (* x y)) (* y ?x51) ?x165 ?x198 ?x212 ?x220 (* y x) ?x226 ?x236 (* y ?x58) ?x242 ?x250)))
 (let (($x77 (= (+ x y ?x51 ?x58) 0)))
 (let (($x126 (and $x77 (not (= ?x206 0)))))
 (let (($x231 (= (* (+ (- 1) x) (+ 1 y) (+ x ?x51 ?x58 y)) 0)))
 (let (($x59 (and (= (+ x ?x51 ?x58 y) 0) (not $x231))))
 (rewrite (= $x59 $x126))))))))))))))))))
 ))
 (let (($x48 (exists ((x Int) (y Int) )(! (let ((?x42 (+ (* (- 1) (- x 1) (+ y 1)) (* 0 (+ y 1)))))
 (let (($x44 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x42) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x44))))) :qid k!26))
 ))
 (let ((?x243 (lambda ((x Int) (y Int) )(let ((?x58 (* (- 1) x00)))
 (let ((?x51 (* (- 1) y00)))
 (let ((?x141 (+ x ?x51 ?x58 y)))
 (let (($x59 (and (= ?x141 0) (not (= (* (+ (- 1) x) (+ 1 y) ?x141) 0)))))
 (let ((?x42 (+ (* (- 1) (- x 1) (+ y 1)) (* 0 (+ y 1)))))
 (let (($x44 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x42) 0)))
 (let (($x47 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x44)))))
 (rewrite (= $x47 $x59))))))))))
 ))
 (let ((@x49 (asserted $x48)))
 (let ((@x67 (mp (mp @x49 (quant-intro (proof-bind ?x243) (= $x48 $x240)) $x240) (rewrite (= $x240 $x240)) $x240)))
 (let ((@x125 (mp (mp @x67 (quant-intro (proof-bind ?x172) (= $x240 $x218)) $x218) (quant-intro (proof-bind ?x186) (= $x218 $x76)) $x76)))
 (let ((@x85 (mp (mp~ @x125 (sk (~ $x76 $x115)) $x115) (rewrite (= $x115 $x166)) $x166)))
 (let ((@x78 (and-elim @x85 $x164)))
 (let ((@x244 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x142)) @x78 $x142)))
 (let (($x162 (>= ?x209 0)))
 (let ((@x175 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x162)) @x78 $x162)))
 (let (($x176 (not (>= ?x261 0))))
 (let (($x183 (<= ?x261 0)))
 (let ((@x254 (lemma ((_ th-lemma arith) (hypothesis (not $x183)) @x175 @x244 @x175 @x244 false) $x183)))
 (let ((@x83 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x262 (not $x183) $x176)) (and-elim @x85 $x84) (or (not $x183) $x176))))
 ((_ th-lemma arith) (unit-resolution @x83 @x254 $x176) @x175 @x244 @x175 @x244 false)))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        7
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             108
 :arith-nonlinear-bounds    4
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 18
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.55
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1081804
 :num-checks                1
 :propagations              4
 :rlimit-count              1597
 :time                      0.01
 :total-time                0.01)
