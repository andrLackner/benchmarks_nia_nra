unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x1047 (* (- 1) r!1)))
 (let ((?x1049 (* 2 x!0)))
 (let ((?x734 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1132 (* (- 1) ?x36)))
 (let ((?x1178 (* (- 2) x00)))
 (let ((?x1028 (+ r00 ?x1178 ?x1132 ?x734 ?x1049 ?x1047)))
 (let (($x1041 (<= ?x1028 0)))
 (let (($x1051 (= ?x1028 0)))
 (let ((?x971 (* r!1 r!1 r!1 r!1)))
 (let ((?x217 (+ r00 ?x1178 ?x1132 (* x!0 r!1 r!1) (* 2 (* x00 x!0 x!0)) (* (- 3) (* x!0 x!0 r!1 r!1 r!1)) (* x!0 x!0 x!0 r!1 r!1) (* 2 (* r00 x!0 r!1 r!1)) (* r00 r00 x!0 x!0) (* r00 x!0 x!0 x!0) (* (- 2) (* x00 r!1)) (* r00 r!1) (* (- 2) (* r00 r00 x!0 r!1 r!1)) (* 3 (* r00 r00 x!0 x!0 r!1)) (* x!0 x!0 r!1) (* (- 2) (* x00 r!1 r!1)) (* (- 2) (* x!0 x!0 x!0)) ?x971 (* 2 (* x00 x!0)) (* r00 r!1 r!1) (* 6 (* x!0 x!0 r!1 r!1)) (* (- 2) (* x!0 x!0)) (* (- 1) (* r00 r00 r!1 r!1)) (* (- 1) (* r00 r00 x!0 x!0 x!0)) (* (- 1) (* r00 r00 r!1)) (* r00 r00 x!0) (* (- 1) (* r00 x!0 x!0)) (* (- 3) (* r00 x!0 x!0 r!1)) ?x1049 ?x1047 (* 2 (* x!0 x!0 x!0 x!0)) (* (- 4) (* x00 x!0 r!1 r!1)) (* (- 2) (* x00 x!0 x!0 x!0)) (* 6 (* x00 x!0 x!0 r!1)) (* 3 (* x!0 r!1)) (* (- 2) (* x!0 r!1 r!1 r!1)) (* 2 (* x!0 r!1 r!1 r!1 r!1)) (* (- 7) (* x!0 x!0 x!0 r!1)) (* (- 1) (* r00 x!0)))))
 (let (($x263 (= ?x217 0)))
 (let (($x1489 (not $x263)))
 (let (($x1618 (and $x1051 $x1489)))
 (let ((?x35 (* 2 x00)))
 (let ((?x140 (* (- 1) r00)))
 (let ((?x1345 (* (- 2) x!0)))
 (let ((?x1289 (+ r!1 ?x1345 ?x140 ?x35 ?x36 (* (- 2) (* x!0 x00)) (* 4 (* r!1 r!1 x!0 x00)) (* 2 (* x!0 x!0 x!0 x00)) (* (- 6) (* r!1 x!0 x!0 x00)) (* (- 3) (* r!1 x!0)) (* (- 1) (* r!1 r!1 x!0)) (* 2 (* r!1 r!1 r!1 x!0)) (* (- 1) ?x971) (* (- 2) (* r!1 r!1 r!1 r!1 x!0)) (* (- 2) (* x!0 x!0 x00)) (* 2 (* x!0 x!0 x!0)) (* 7 (* r!1 x!0 x!0 x!0)) (* (- 1) (* r!1 r!1 x!0 x!0 x!0)) (* (- 1) (* r!1 x!0 x!0)) (* (- 6) (* r!1 r!1 x!0 x!0)) (* 3 (* r!1 r!1 r!1 x!0 x!0)) (* 2 (* x!0 x!0)) (* (- 1) (* r!1 r00)) (* (- 1) (* r!1 r!1 r00)) (* x!0 r00) (* (- 2) (* r!1 r!1 x!0 r00)) (* 2 (* r!1 x00)) (* (- 2) (* x!0 x!0 x!0 x!0)) (* r!1 r!1 r00 r00) (* (- 1) (* x!0 x!0 r00 r00)) (* 2 (* r!1 r!1 x!0 r00 r00)) (* (- 3) (* r!1 x!0 x!0 r00 r00)) (* x!0 x!0 x!0 r00 r00) (* 2 (* r!1 r!1 x00)) (* r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* x!0 x!0 r00) (* 3 (* r!1 x!0 x!0 r00)) (* (- 1) (* x!0 x!0 x!0 r00)))))
 (let (($x1292 (and (= (+ r!1 ?x1345 ?x140 (* (- 1) ?x734) ?x35 ?x36) 0) (not (= ?x1289 0)))))
 (let (($x1445 (exists ((r Int) (x Int) )(! (let ((?x1822 (* (- 1) (* x x x r00))))
 (let ((?x1821 (* 3 (* r x x r00))))
 (let ((?x1639 (* x x r00)))
 (let ((?x1820 (* (- 1) (* x r00 r00))))
 (let ((?x1545 (* r r00 r00)))
 (let ((?x1463 (* x x x r00 r00)))
 (let ((?x1471 (* (- 3) (* r x x r00 r00))))
 (let ((?x1819 (* 2 (* r r x r00 r00))))
 (let ((?x1818 (* (- 1) (* x x r00 r00))))
 (let ((?x1327 (* r r r00 r00)))
 (let ((?x1817 (* (- 2) (* x x x x))))
 (let ((?x1801 (* (- 2) (* r r x r00))))
 (let ((?x1160 (* x r00)))
 (let ((?x1144 (* (- 1) (* r r r00))))
 (let ((?x1134 (* (- 1) (* r r00))))
 (let ((?x1800 (* 2 (* x x))))
 (let ((?x1799 (* 3 (* r r r x x))))
 (let ((?x646 (* (- 1) (* r x x))))
 (let ((?x1797 (* (- 1) (* r r x x x))))
 (let ((?x914 (* 2 (* x x x))))
 (let ((?x1796 (* (- 2) (* x x x00))))
 (let ((?x1792 (* (- 2) (* r r r r x))))
 (let ((?x1082 (* (- 1) (* r r x))))
 (let ((?x1790 (* (- 3) (* r x))))
 (let ((?x1789 (* (- 6) (* r x x x00))))
 (let ((?x201 (* 2 (* x x x x00))))
 (let ((?x1787 (* 4 (* r r x x00))))
 (let ((?x1784 (* (- 2) (* x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x140 (* (- 1) r00)))
 (let ((?x139 (* (- 2) x)))
 (let ((?x1377 (+ r ?x139 ?x140 ?x35 ?x36 ?x1784 ?x1787 ?x201 ?x1789 ?x1790 ?x1082 (* 2 (* r r r x)) (* (- 1) (* r r r r)) ?x1792 ?x1796 ?x914 (* 7 (* r x x x)) ?x1797 ?x646 (* (- 6) (* r r x x)) ?x1799 ?x1800 ?x1134 ?x1144 ?x1160 ?x1801 (* 2 (* r x00)) ?x1817 ?x1327 ?x1818 ?x1819 ?x1471 ?x1463 (* 2 (* r r x00)) ?x1545 ?x1820 ?x1639 ?x1821 ?x1822)))
 (let (($x143 (= (+ r ?x139 ?x140 (* (- 1) (* r r)) ?x35 ?x36) 0)))
 (and $x143 (not (= ?x1377 0))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1442 (exists ((r Int) (x Int) )(! (let ((?x90 (* (- 1) r)))
 (let ((?x1195 (+ x ?x90)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1132 (* (- 1) ?x36)))
 (let ((?x1178 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x1284 (+ 1 r)))
 (let ((?x710 (+ (* 2 (* x00 ?x1284 ?x1284 ?x1195)) (* (- 2) (* x00 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1284 ?x1284 ?x1195) (* (- 1) (* ?x1284 ?x1284 ?x1284 ?x1284 ?x1195)) (* 2 (* x00 ?x1195 ?x1195)) (* ?x1284 ?x1284) (* ?x1284 ?x1284 ?x1195 ?x1195 ?x1195) (* (- 3) (* ?x1284 ?x1284 ?x1195 ?x1195)) (* (- 2) (* ?x1195 ?x1195 ?x1195)) (* (- 1) (* ?x1284 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1195 ?x1195) (* (- 1) (* r00 ?x1284 ?x1284 ?x1195)) (* 2 (* ?x1195 ?x1195 ?x1195 ?x1195)) (* (- 3) r) r00 ?x32 (* r00 r00 ?x1195 ?x1195) ?x1178 (* (- 1) (* r00 r00 ?x1195 ?x1195 ?x1195)) ?x1132 (* r00 r00 ?x1284 ?x1284 ?x1195) (* (- 1) (* r00 ?x1195 ?x1195)) (* r00 ?x1195 ?x1195 ?x1195))))
 (let (($x188 (not (= ?x710 1))))
 (let ((?x35 (* 2 x00)))
 (let ((?x139 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x141 (* (- 1) ?x30)))
 (let ((?x140 (* (- 1) r00)))
 (and (= (+ r ?x140 ?x141 ?x139 ?x35 ?x36) 0) $x188))))))))))))))) :qid k!26))
 ))
 (let ((?x1447 (lambda ((r Int) (x Int) )(let ((?x1822 (* (- 1) (* x x x r00))))
 (let ((?x1821 (* 3 (* r x x r00))))
 (let ((?x1639 (* x x r00)))
 (let ((?x1820 (* (- 1) (* x r00 r00))))
 (let ((?x1545 (* r r00 r00)))
 (let ((?x1463 (* x x x r00 r00)))
 (let ((?x1471 (* (- 3) (* r x x r00 r00))))
 (let ((?x1819 (* 2 (* r r x r00 r00))))
 (let ((?x1818 (* (- 1) (* x x r00 r00))))
 (let ((?x1327 (* r r r00 r00)))
 (let ((?x1817 (* (- 2) (* x x x x))))
 (let ((?x1801 (* (- 2) (* r r x r00))))
 (let ((?x1160 (* x r00)))
 (let ((?x1144 (* (- 1) (* r r r00))))
 (let ((?x1134 (* (- 1) (* r r00))))
 (let ((?x1800 (* 2 (* x x))))
 (let ((?x1799 (* 3 (* r r r x x))))
 (let ((?x646 (* (- 1) (* r x x))))
 (let ((?x1797 (* (- 1) (* r r x x x))))
 (let ((?x914 (* 2 (* x x x))))
 (let ((?x1796 (* (- 2) (* x x x00))))
 (let ((?x1792 (* (- 2) (* r r r r x))))
 (let ((?x1082 (* (- 1) (* r r x))))
 (let ((?x1790 (* (- 3) (* r x))))
 (let ((?x1789 (* (- 6) (* r x x x00))))
 (let ((?x201 (* 2 (* x x x x00))))
 (let ((?x1787 (* 4 (* r r x x00))))
 (let ((?x1784 (* (- 2) (* x x00))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x140 (* (- 1) r00)))
 (let ((?x139 (* (- 2) x)))
 (let ((?x1377 (+ r ?x139 ?x140 ?x35 ?x36 ?x1784 ?x1787 ?x201 ?x1789 ?x1790 ?x1082 (* 2 (* r r r x)) (* (- 1) (* r r r r)) ?x1792 ?x1796 ?x914 (* 7 (* r x x x)) ?x1797 ?x646 (* (- 6) (* r r x x)) ?x1799 ?x1800 ?x1134 ?x1144 ?x1160 ?x1801 (* 2 (* r x00)) ?x1817 ?x1327 ?x1818 ?x1819 ?x1471 ?x1463 (* 2 (* r r x00)) ?x1545 ?x1820 ?x1639 ?x1821 ?x1822)))
 (let (($x143 (= (+ r ?x139 ?x140 (* (- 1) (* r r)) ?x35 ?x36) 0)))
 (let (($x1398 (and $x143 (not (= ?x1377 0)))))
 (let ((?x90 (* (- 1) r)))
 (let ((?x1195 (+ x ?x90)))
 (let ((?x1132 (* (- 1) ?x36)))
 (let ((?x1178 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x1284 (+ 1 r)))
 (let ((?x710 (+ (* 2 (* x00 ?x1284 ?x1284 ?x1195)) (* (- 2) (* x00 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1284 ?x1284 ?x1195) (* (- 1) (* ?x1284 ?x1284 ?x1284 ?x1284 ?x1195)) (* 2 (* x00 ?x1195 ?x1195)) (* ?x1284 ?x1284) (* ?x1284 ?x1284 ?x1195 ?x1195 ?x1195) (* (- 3) (* ?x1284 ?x1284 ?x1195 ?x1195)) (* (- 2) (* ?x1195 ?x1195 ?x1195)) (* (- 1) (* ?x1284 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1195 ?x1195) (* (- 1) (* r00 ?x1284 ?x1284 ?x1195)) (* 2 (* ?x1195 ?x1195 ?x1195 ?x1195)) (* (- 3) r) r00 ?x32 (* r00 r00 ?x1195 ?x1195) ?x1178 (* (- 1) (* r00 r00 ?x1195 ?x1195 ?x1195)) ?x1132 (* r00 r00 ?x1284 ?x1284 ?x1195) (* (- 1) (* r00 ?x1195 ?x1195)) (* r00 ?x1195 ?x1195 ?x1195))))
 (let (($x188 (not (= ?x710 1))))
 (let (($x1397 (and (= (+ r ?x140 (* (- 1) (* r r)) ?x139 ?x35 ?x36) 0) $x188)))
 (rewrite (= $x1397 $x1398)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x189 (exists ((r Int) (x Int) )(! (let ((?x90 (* (- 1) r)))
 (let ((?x1195 (+ x ?x90)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1132 (* (- 1) ?x36)))
 (let ((?x1178 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x1284 (+ 1 r)))
 (let ((?x710 (+ (* 2 (* x00 ?x1284 ?x1284 ?x1195)) (* (- 2) (* x00 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1284 ?x1284 ?x1195) (* (- 1) (* ?x1284 ?x1284 ?x1284 ?x1284 ?x1195)) (* 2 (* x00 ?x1195 ?x1195)) (* ?x1284 ?x1284) (* ?x1284 ?x1284 ?x1195 ?x1195 ?x1195) (* (- 3) (* ?x1284 ?x1284 ?x1195 ?x1195)) (* (- 2) (* ?x1195 ?x1195 ?x1195)) (* (- 1) (* ?x1284 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1195 ?x1195) (* (- 1) (* r00 ?x1284 ?x1284 ?x1195)) (* 2 (* ?x1195 ?x1195 ?x1195 ?x1195)) (* (- 3) r) r00 ?x32 (* r00 r00 ?x1195 ?x1195) ?x1178 (* (- 1) (* r00 r00 ?x1195 ?x1195 ?x1195)) ?x1132 (* r00 r00 ?x1284 ?x1284 ?x1195) (* (- 1) (* r00 ?x1195 ?x1195)) (* r00 ?x1195 ?x1195 ?x1195))))
 (let (($x188 (not (= ?x710 1))))
 (and (= (+ ?x90 r00 (* r r) ?x32 ?x1178 ?x1132) 0) $x188)))))))))) :qid k!26))
 ))
 (let ((?x1436 (lambda ((r Int) (x Int) )(let ((?x90 (* (- 1) r)))
 (let ((?x1195 (+ x ?x90)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1132 (* (- 1) ?x36)))
 (let ((?x1178 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x1284 (+ 1 r)))
 (let ((?x710 (+ (* 2 (* x00 ?x1284 ?x1284 ?x1195)) (* (- 2) (* x00 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1284 ?x1284 ?x1195) (* (- 1) (* ?x1284 ?x1284 ?x1284 ?x1284 ?x1195)) (* 2 (* x00 ?x1195 ?x1195)) (* ?x1284 ?x1284) (* ?x1284 ?x1284 ?x1195 ?x1195 ?x1195) (* (- 3) (* ?x1284 ?x1284 ?x1195 ?x1195)) (* (- 2) (* ?x1195 ?x1195 ?x1195)) (* (- 1) (* ?x1284 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1195 ?x1195) (* (- 1) (* r00 ?x1284 ?x1284 ?x1195)) (* 2 (* ?x1195 ?x1195 ?x1195 ?x1195)) (* (- 3) r) r00 ?x32 (* r00 r00 ?x1195 ?x1195) ?x1178 (* (- 1) (* r00 r00 ?x1195 ?x1195 ?x1195)) ?x1132 (* r00 r00 ?x1284 ?x1284 ?x1195) (* (- 1) (* r00 ?x1195 ?x1195)) (* r00 ?x1195 ?x1195 ?x1195))))
 (let (($x188 (not (= ?x710 1))))
 (let ((?x35 (* 2 x00)))
 (let ((?x139 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x141 (* (- 1) ?x30)))
 (let ((?x140 (* (- 1) r00)))
 (let (($x1397 (and (= (+ r ?x140 ?x141 ?x139 ?x35 ?x36) 0) $x188)))
 (let (($x1136 (and (= (+ ?x90 r00 ?x30 ?x32 ?x1178 ?x1132) 0) $x188)))
 (rewrite (= $x1136 $x1397)))))))))))))))))))
 ))
 (let (($x85 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (- (* 2 ?x41 ?x41 (- x r) x00) (* 2 (- x r) (- x r) (- x r) x00))))
 (let ((?x49 (- (+ ?x45 (* ?x41 ?x41 ?x41 (- x r))) (* ?x41 ?x41 ?x41 ?x41 (- x r)))))
 (let ((?x53 (+ ?x49 (* 2 (- x r) (- x r) x00) (* ?x41 ?x41) (* ?x41 ?x41 (- x r) (- x r) (- x r)))))
 (let ((?x59 (- (- ?x53 (* 3 ?x41 ?x41 (- x r) (- x r))) (* 2 (- x r) (- x r) (- x r)))))
 (let ((?x62 (+ (- ?x59 (* ?x41 (- x r) (- x r) (- x r))) (* ?x41 (- x r) (- x r)))))
 (let ((?x66 (+ (- ?x62 (* ?x41 ?x41 r00 (- x r))) (* 2 (- x r) (- x r) (- x r) (- x r)))))
 (let ((?x70 (+ (- ?x66 ?x41) r00 (* 2 (- x r)) (* r00 r00 (- x r) (- x r)))))
 (let ((?x73 (- (- ?x70 ?x35) (* r00 r00 (- x r) (- x r) (- x r)))))
 (let ((?x78 (- (+ (- ?x73 ?x36) (* ?x41 ?x41 r00 r00 (- x r))) (* r00 (- x r) (- x r)))))
 (let (($x81 (= (+ ?x78 (* r00 (- x r) (- x r) (- x r))) 0)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not $x81))))))))))))))))) :qid k!26))
 ))
 (let ((?x231 (lambda ((r Int) (x Int) )(let ((?x90 (* (- 1) r)))
 (let ((?x1195 (+ x ?x90)))
 (let ((?x36 (* r00 r00)))
 (let ((?x1132 (* (- 1) ?x36)))
 (let ((?x1178 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x1284 (+ 1 r)))
 (let ((?x710 (+ (* 2 (* x00 ?x1284 ?x1284 ?x1195)) (* (- 2) (* x00 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1284 ?x1284 ?x1195) (* (- 1) (* ?x1284 ?x1284 ?x1284 ?x1284 ?x1195)) (* 2 (* x00 ?x1195 ?x1195)) (* ?x1284 ?x1284) (* ?x1284 ?x1284 ?x1195 ?x1195 ?x1195) (* (- 3) (* ?x1284 ?x1284 ?x1195 ?x1195)) (* (- 2) (* ?x1195 ?x1195 ?x1195)) (* (- 1) (* ?x1284 ?x1195 ?x1195 ?x1195)) (* ?x1284 ?x1195 ?x1195) (* (- 1) (* r00 ?x1284 ?x1284 ?x1195)) (* 2 (* ?x1195 ?x1195 ?x1195 ?x1195)) (* (- 3) r) r00 ?x32 (* r00 r00 ?x1195 ?x1195) ?x1178 (* (- 1) (* r00 r00 ?x1195 ?x1195 ?x1195)) ?x1132 (* r00 r00 ?x1284 ?x1284 ?x1195) (* (- 1) (* r00 ?x1195 ?x1195)) (* r00 ?x1195 ?x1195 ?x1195))))
 (let (($x188 (not (= ?x710 1))))
 (let (($x1136 (and (= (+ ?x90 r00 (* r r) ?x32 ?x1178 ?x1132) 0) $x188)))
 (let ((?x35 (* 2 x00)))
 (let ((?x41 (+ r 1)))
 (let ((?x45 (- (* 2 ?x41 ?x41 (- x r) x00) (* 2 (- x r) (- x r) (- x r) x00))))
 (let ((?x49 (- (+ ?x45 (* ?x41 ?x41 ?x41 (- x r))) (* ?x41 ?x41 ?x41 ?x41 (- x r)))))
 (let ((?x53 (+ ?x49 (* 2 (- x r) (- x r) x00) (* ?x41 ?x41) (* ?x41 ?x41 (- x r) (- x r) (- x r)))))
 (let ((?x59 (- (- ?x53 (* 3 ?x41 ?x41 (- x r) (- x r))) (* 2 (- x r) (- x r) (- x r)))))
 (let ((?x62 (+ (- ?x59 (* ?x41 (- x r) (- x r) (- x r))) (* ?x41 (- x r) (- x r)))))
 (let ((?x66 (+ (- ?x62 (* ?x41 ?x41 r00 (- x r))) (* 2 (- x r) (- x r) (- x r) (- x r)))))
 (let ((?x70 (+ (- ?x66 ?x41) r00 (* 2 (- x r)) (* r00 r00 (- x r) (- x r)))))
 (let ((?x73 (- (- ?x70 ?x35) (* r00 r00 (- x r) (- x r) (- x r)))))
 (let ((?x78 (- (+ (- ?x73 ?x36) (* ?x41 ?x41 r00 r00 (- x r))) (* r00 (- x r) (- x r)))))
 (let (($x81 (= (+ ?x78 (* r00 (- x r) (- x r) (- x r))) 0)))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x84 (and $x40 (or (not $x81)))))
 (rewrite (= $x84 $x1136)))))))))))))))))))))))))))
 ))
 (let ((@x86 (asserted $x85)))
 (let ((@x1438 (mp (mp @x86 (quant-intro (proof-bind ?x231) (= $x85 $x189)) $x189) (rewrite (= $x189 $x189)) $x189)))
 (let ((@x481 (mp (mp @x1438 (quant-intro (proof-bind ?x1436) (= $x189 $x1442)) $x1442) (quant-intro (proof-bind ?x1447) (= $x1442 $x1445)) $x1445)))
 (let ((@x288 (mp (mp~ @x481 (sk (~ $x1445 $x1292)) $x1292) (rewrite (= $x1292 $x1618)) $x1618)))
 (let ((@x296 (and-elim @x288 $x1051)))
 (let ((@x1635 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1051) $x1041)) @x296 $x1041)))
 (let (($x1042 (>= ?x1028 0)))
 (let ((@x1395 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1051) $x1042)) @x296 $x1042)))
 (let (($x342 (not (>= ?x217 0))))
 (let (($x1053 (<= ?x217 0)))
 (let ((@x182 (lemma ((_ th-lemma arith) (hypothesis (not $x1053)) @x1395 @x1635 @x1395 @x1635 false) $x1053)))
 (let ((@x482 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x263 (not $x1053) $x342)) (and-elim @x288 $x1489) (or (not $x1053) $x342))))
 ((_ th-lemma arith) (unit-resolution @x482 @x182 $x342) @x1395 @x1635 @x1395 @x1635 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        19
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             304
 :arith-nonlinear-bounds    16
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.83
 :memory                    3.32
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1251950
 :num-checks                1
 :propagations              4
 :rlimit-count              5523
 :time                      0.01
 :total-time                0.02)
