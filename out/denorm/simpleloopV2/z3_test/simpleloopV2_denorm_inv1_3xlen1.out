unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x94 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x227 (>= ?x94 0)))
 (let (($x205 (= ?x94 0)))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x59 (+ ?x56 ?x63 x!1 y!0)))
 (let ((?x62 (+ 1 x!1)))
 (let ((?x207 (+ (- 1) y!0)))
 (let ((?x309 (* ?x207 ?x207 ?x207 ?x62 ?x62 ?x62 ?x62 ?x59)))
 (let (($x310 (= ?x309 0)))
 (let (($x311 (not $x310)))
 (let ((?x183 (+ 1 y!0)))
 (let ((?x233 (+ (- 1) x!1)))
 (let ((?x197 (* ?x233 ?x233 ?x233 ?x233 ?x183 ?x183 ?x183 ?x59)))
 (let (($x69 (= ?x197 0)))
 (let (($x79 (or (not $x69) $x311)))
 (let (($x85 (and $x205 $x79)))
 (let (($x201 (= (* ?x207 ?x207 ?x207 ?x62 ?x62 ?x62 ?x62 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x110 (= (* ?x233 ?x233 ?x233 ?x233 ?x183 ?x183 ?x183 (+ x!1 y!0 ?x56 ?x63)) 0)))
 (let (($x206 (and (= (+ x!1 y!0 ?x56 ?x63) 0) (or (not $x110) (not $x201)))))
 (let (($x263 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let (($x191 (or (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x77) 0)) (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (and $x82 $x191)))))))))) :qid k!27))
 ))
 (let (($x61 (exists ((x Int) (y Int) )(! (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x91 (+ x ?x56 ?x63 y)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let (($x211 (or (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x91) 0)) (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x91) 0)))))
 (and (= ?x91 0) $x211))))))))) :qid k!27))
 ))
 (let ((?x267 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let (($x191 (or (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x77) 0)) (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x77) 0)))))
 (let (($x82 (= ?x77 0)))
 (let (($x187 (and $x82 $x191)))
 (let (($x212 (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 (+ x ?x56 ?x63 y)) 0)))
 (let (($x188 (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 (+ x ?x56 ?x63 y)) 0)))
 (let (($x70 (and (= (+ x ?x56 ?x63 y) 0) (or (not $x188) (not $x212)))))
 (rewrite (= $x70 $x187))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x46 (- y 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x39 (- 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x46 ?x39 ?x43 ?x46 ?x39 ?x43 ?x43 ?x43 ?x46)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 ?x34 ?x38 ?x39 ?x34 ?x34 ?x34 ?x38)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))))))) :qid k!27))
 ))
 (let ((?x75 (lambda ((x Int) (y Int) )(let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x91 (+ x ?x56 ?x63 y)))
 (let ((?x208 (+ 1 x)))
 (let ((?x202 (+ (- 1) y)))
 (let ((?x116 (+ 1 y)))
 (let ((?x72 (+ (- 1) x)))
 (let (($x211 (or (not (= (* ?x72 ?x72 ?x72 ?x72 ?x116 ?x116 ?x116 ?x91) 0)) (not (= (* ?x202 ?x202 ?x202 ?x208 ?x208 ?x208 ?x208 ?x91) 0)))))
 (let (($x70 (and (= ?x91 0) $x211)))
 (let ((?x46 (- y 1)))
 (let ((?x43 (+ x 1)))
 (let ((?x39 (- 1)))
 (let ((?x48 (* (+ (- (- ?x43 y00) x00) ?x46) ?x46 ?x39 ?x43 ?x46 ?x39 ?x43 ?x43 ?x43 ?x46)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x40 (* (+ (- (- ?x34 y00) x00) y 1) ?x38 ?x39 ?x34 ?x38 ?x39 ?x34 ?x34 ?x34 ?x38)))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x40 0)) (not (= ?x48 0))))))
 (rewrite (= $x52 $x70))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x127 (mp (mp @x54 (quant-intro (proof-bind ?x75) (= $x53 $x61)) $x61) (rewrite (= $x61 $x61)) $x61)))
 (let ((@x119 (mp~ (mp @x127 (quant-intro (proof-bind ?x267) (= $x61 $x263)) $x263) (sk (~ $x263 $x206)) $x206)))
 (let ((@x222 (mp @x119 (rewrite (= $x206 $x85)) $x85)))
 (let ((@x78 (and-elim @x222 $x205)))
 (let ((@x133 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x205) $x227)) @x78 $x227)))
 (let (($x221 (<= ?x94 0)))
 (let ((@x210 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x205) $x221)) @x78 $x221)))
 (let (($x150 (not (<= ?x309 0))))
 (let (($x131 (>= ?x309 0)))
 (let (($x225 (>= ?x197 0)))
 (let (($x220 (<= ?x197 0)))
 (let ((@x149 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x69 (not $x220) (not $x225))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x220)) @x210 @x133 false) $x220) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x225)) @x210 @x133 false) $x225) $x69)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x310 $x150 (not $x131))) (unit-resolution (and-elim @x222 $x79) @x149 $x311) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x131)) @x210 @x133 false) $x131) $x150)))
 ((_ th-lemma arith farkas 1 1 1) @x152 @x210 @x133 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        6
 :arith-assert-lower        17
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           5
 :arith-grobner             4
 :arith-max-min             48
 :arith-nonlinear-horner    18
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                24
 :final-checks              4
 :max-memory                19.54
 :memory                    19.13
 :mk-bool-var               21
 :mk-clause                 28
 :num-allocs                466477
 :num-checks                1
 :propagations              14
 :rlimit-count              1289
 :time                      0.01
 :total-time                0.02)
