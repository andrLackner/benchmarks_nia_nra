unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x748 (to_real d!1)))
 (let ((?x456 (to_real a!3)))
 (let ((?x349 (to_real y!0)))
 (let ((?x311 (to_real b!2)))
 (let ((?x710 (* (/ 3.0 64.0) (* ?x311 ?x311 ?x311 ?x311 ?x349 ?x349 ?x456 ?x456 ?x748 ?x748 ?x748))))
 (let ((?x207 (* (- (/ 1.0 16.0)) (* ?x311 ?x311 ?x748 ?x748))))
 (let ((?x400 (* (/ 1.0 16.0) (* ?x311 ?x311 ?x311 ?x456 ?x456 ?x748))))
 (let ((?x935 (* (- (/ 1.0 8.0)) (* ?x349 ?x349 ?x456 ?x748 ?x748 ?x748))))
 (let ((?x219 (* (/ 3.0 256.0) (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x456 ?x748 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x215 (* (- (/ 1.0 8.0)) (* ?x311 ?x349 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x187 (* (- (/ 1.0 8.0)) (* ?x349 ?x456 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x176 (* (/ 3.0 64.0) (* ?x311 ?x311 ?x311 ?x311 ?x349 ?x456 ?x456 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x241 (* (/ 1.0 64.0) (* ?x311 ?x311 ?x311 ?x349 ?x456 ?x456 ?x456 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x707 (* (/ 1.0 64.0) (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x311 ?x349 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x307 (* (/ 1.0 256.0) (* ?x311 ?x311 ?x311 ?x456 ?x456 ?x456 ?x748 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x951 (* (/ 3.0 64.0) (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x349 ?x456 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x198 (* (/ 1.0 256.0) (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x311 ?x748 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x199 (* (- (/ 1.0 8.0)) (* ?x311 ?x349 ?x349 ?x748 ?x748 ?x748))))
 (let ((?x573 (* (/ 1.0 64.0) (* ?x311 ?x311 ?x311 ?x349 ?x349 ?x456 ?x456 ?x456 ?x748 ?x748 ?x748))))
 (let ((?x733 (* (/ 1.0 64.0) (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349 ?x748 ?x748 ?x748))))
 (let ((?x942 (* (/ 3.0 256.0) (* ?x311 ?x311 ?x311 ?x311 ?x456 ?x456 ?x748 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x177 (* (- (/ 1.0 32.0)) (* ?x311 ?x748 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x260 (* (- (/ 1.0 32.0)) (* ?x456 ?x748 ?x748 ?x748 ?x748 ?x748))))
 (let ((?x959 (* (/ 3.0 64.0) (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349 ?x456 ?x748 ?x748 ?x748))))
 (let ((?x150 (* (/ 1.0 8.0) (* ?x311 ?x311 ?x311 ?x311 ?x456 ?x748))))
 (let ((?x129 (* (/ 1.0 16.0) (* ?x311 ?x311 ?x311 ?x311 ?x311 ?x748))))
 (let ((?x604 (+ ?x129 ?x150 ?x959 ?x260 ?x177 ?x942 ?x733 ?x573 ?x199 ?x198 ?x951 ?x307 ?x707 ?x241 ?x176 ?x187 ?x215 ?x219 ?x935 ?x400 ?x207 ?x710)))
 (let (($x820 (<= ?x604 0.0)))
 (let ((?x931 (* ?x311 ?x349)))
 (let ((?x217 (+ (* (/ 1.0 2.0) (* (to_real a00) ?x748)) (* (- 1.0) (* (to_real y00) ?x311)) (* (- (/ 1.0 2.0)) (* ?x456 ?x748)) ?x931)))
 (let (($x960 (>= ?x217 0.0)))
 (let ((?x723 (* ?x456 ?x748)))
 (let ((?x243 (+ ?x723 (* (- 1.0) (to_real (* d!1 a!3))))))
 (let (($x752 (<= ?x243 0.0)))
 (let (($x949 (= ?x243 0.0)))
 (let ((@x966 ((_ th-lemma arith) $x949)))
 (let ((?x69 (to_real a00)))
 (let ((?x501 (* ?x69 ?x748)))
 (let ((?x182 (+ ?x501 (* (- 1.0) (to_real (* a00 d!1))))))
 (let (($x751 (>= ?x182 0.0)))
 (let (($x189 (= ?x182 0.0)))
 (let ((@x530 ((_ th-lemma arith) $x189)))
 (let ((?x242 (+ (* (- 1.0) (to_real (* y!0 b!2))) ?x931)))
 (let (($x750 (>= ?x242 0.0)))
 (let (($x212 (= ?x242 0.0)))
 (let ((@x745 ((_ th-lemma arith) $x212)))
 (let ((?x66 (to_real y00)))
 (let ((?x719 (* ?x66 ?x311)))
 (let ((?x141 (+ ?x719 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x749 (<= ?x141 0.0)))
 (let (($x156 (= ?x141 0.0)))
 (let ((@x950 ((_ th-lemma arith) $x156)))
 (let ((?x137 (* d!1 a!3)))
 (let ((?x422 (+ ?x137 (* (- 2) (* y!0 b!2)) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let (($x309 (<= ?x422 0)))
 (let (($x510 (= 0 ?x422)))
 (let ((@x711 (symm (commutativity (= $x510 (= ?x422 0))) (= (= ?x422 0) $x510))))
 (let (($x413 (= ?x422 0)))
 (let ((?x1032 (* (- 1.0) ?x931)))
 (let ((?x911 (+ (* (- (/ 1.0 2.0)) ?x501) ?x719 (* (/ 1.0 2.0) ?x723) ?x1032)))
 (let ((?x700 (+ ?x573 ?x199 ?x198 ?x951 ?x307 ?x707 ?x241 ?x176 ?x187 ?x215 ?x219 ?x935 ?x400 ?x207 ?x710 ?x129 ?x150 ?x959 ?x260 ?x177 ?x942 ?x733)))
 (let ((?x542 (* ?x700 ?x911)))
 (let (($x717 (= ?x542 0.0)))
 (let (($x549 (not $x717)))
 (let ((?x577 (* ?x311 ?x311 ?x311 ?x349 ?x349 ?x456 ?x456 ?x456 ?x456 ?x748 ?x748 ?x748 ?x748)))
 (let ((?x268 (* ?x69 ?x311 ?x311 ?x311 ?x349 ?x349 ?x456 ?x456 ?x456 ?x748 ?x748 ?x748 ?x748)))
 (let ((?x149 (* ?x66 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349 ?x456 ?x456 ?x456 ?x748 ?x748 ?x748)))
 (let ((?x130 (* ?x311 ?x311 ?x311 ?x311 ?x349 ?x349 ?x349 ?x456 ?x456 ?x456 ?x748 ?x748 ?x748)))
 (let ((?x170 (+ (* (/ 1.0 64.0) ?x130) (* (- (/ 1.0 64.0)) ?x149) (* (- (/ 1.0 16.0)) (* ?x311 ?x311 ?x311 ?x349 ?x748 ?x748)) (* (- (/ 1.0 32.0)) (* ?x69 ?x311 ?x311 ?x748 ?x748 ?x748)) (* (/ 1.0 32.0) (* ?x311 ?x311 ?x456 ?x748 ?x748 ?x748)) (* (/ 1.0 128.0) ?x268) (* (- (/ 1.0 16.0)) (* ?x66 ?x311 ?x311 ?x311 ?x311 ?x456 ?x456 ?x748)) (* (- (/ 1.0 32.0)) (* ?x311 ?x311 ?x311 ?x456 ?x456 ?x456 ?x748 ?x748)) (* (/ 1.0 32.0) (* ?x69 ?x311 ?x311 ?x311 ?x456 ?x456 ?x748 ?x748)) (* (/ 1.0 16.0) (* ?x311 ?x311 ?x311 ?x311 ?x349 ?x456 ?x456 ?x748)) (* (/ 1.0 16.0) (* ?x349 ?x349 ?x456 ?x456 ?x748 ?x748 ?x748 ?x748)) (* (- (/ 1.0 8.0)) (* ?x311 ?x349 ?x349 ?x349 ?x456 ?x748 ?x748 ?x748)) (* (- (/ 1.0 128.0)) ?x577) (* (- (/ 1.0 16.0)) (* ?x69 ?x349 ?x349 ?x456 ?x748 ?x748 ?x748 ?x748)) (* (/ 1.0 8.0) (* ?x66 ?x311 ?x349 ?x349 ?x456 ?x748 ?x748 ?x748)) (* (/ 1.0 16.0) (* ?x66 ?x311 ?x311 ?x311 ?x748 ?x748)))))
 (let (($x197 (= ?x170 0.0)))
 (let (($x499 (or (not $x197) $x549)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let ((?x35 (* a00 d00)))
 (let (($x450 (= (+ ?x35 ?x111 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3))) 0)))
 (let (($x954 (and $x450 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x413 $x499)))
 (let ((?x932 (+ (* (/ 1.0 2.0) (* ?x748 ?x456)) ?x1032 (* ?x311 ?x66) (* (- (/ 1.0 2.0)) (* ?x748 ?x69)))))
 (let ((?x1027 (* (/ 1.0 64.0) (* ?x748 ?x748 ?x748 ?x311 ?x311 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349))))
 (let ((?x1023 (* (/ 3.0 64.0) (* ?x748 ?x748 ?x748 ?x456 ?x311 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349))))
 (let ((?x1021 (* (/ 3.0 64.0) (* ?x748 ?x748 ?x748 ?x456 ?x456 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349))))
 (let ((?x1019 (* (/ 1.0 64.0) (* ?x748 ?x748 ?x748 ?x748 ?x311 ?x311 ?x311 ?x311 ?x311 ?x311 ?x349))))
 (let ((?x1017 (* (/ 3.0 64.0) (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x311 ?x311 ?x311 ?x311 ?x311 ?x349))))
 (let ((?x927 (* (/ 3.0 64.0) (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x456 ?x311 ?x311 ?x311 ?x311 ?x349))))
 (let ((?x1008 (* (/ 1.0 64.0) (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311 ?x349))))
 (let ((?x1006 (* (/ 1.0 256.0) (* ?x748 ?x748 ?x748 ?x748 ?x748 ?x311 ?x311 ?x311 ?x311 ?x311 ?x311))))
 (let ((?x1000 (* (/ 3.0 256.0) (* ?x748 ?x748 ?x748 ?x748 ?x748 ?x456 ?x311 ?x311 ?x311 ?x311 ?x311))))
 (let ((?x1004 (* (/ 3.0 256.0) (* ?x748 ?x748 ?x748 ?x748 ?x748 ?x456 ?x456 ?x311 ?x311 ?x311 ?x311))))
 (let ((?x998 (* (/ 1.0 256.0) (* ?x748 ?x748 ?x748 ?x748 ?x748 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311))))
 (let ((?x973 (* (/ 1.0 64.0) (* ?x748 ?x748 ?x748 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311 ?x349 ?x349))))
 (let ((?x1029 (+ (* (/ 1.0 16.0) (* ?x748 ?x456 ?x456 ?x311 ?x311 ?x311)) (* (- (/ 1.0 8.0)) (* ?x748 ?x748 ?x748 ?x456 ?x349 ?x349)) ?x973 (* (- (/ 1.0 16.0)) (* ?x748 ?x748 ?x311 ?x311)) (* (/ 1.0 16.0) (* ?x748 ?x311 ?x311 ?x311 ?x311 ?x311)) (* (/ 1.0 8.0) (* ?x748 ?x456 ?x311 ?x311 ?x311 ?x311)) (* (- (/ 1.0 32.0)) (* ?x748 ?x748 ?x748 ?x748 ?x748 ?x456)) (* (- (/ 1.0 32.0)) (* ?x748 ?x748 ?x748 ?x748 ?x748 ?x311)) (* (- (/ 1.0 8.0)) (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x349)) (* (- (/ 1.0 8.0)) (* ?x748 ?x748 ?x748 ?x748 ?x311 ?x349)) (* (- (/ 1.0 8.0)) (* ?x748 ?x748 ?x748 ?x311 ?x349 ?x349)) ?x998 ?x1004 ?x1000 ?x1006 ?x1008 ?x927 ?x1017 ?x1019 ?x1021 ?x1023 ?x1027)))
 (let ((?x891 (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311 ?x349 ?x349 ?x69)))
 (let ((?x866 (* ?x748 ?x748 ?x748 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349 ?x66)))
 (let ((?x880 (* ?x748 ?x748 ?x748 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311 ?x311 ?x349 ?x349 ?x349)))
 (let ((?x631 (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311 ?x349 ?x349)))
 (let ((?x705 (+ (* (/ 1.0 32.0) (* ?x748 ?x748 ?x456 ?x456 ?x456 ?x311 ?x311 ?x311)) (* (- (/ 1.0 16.0)) (* ?x748 ?x456 ?x456 ?x311 ?x311 ?x311 ?x311 ?x349)) (* (/ 1.0 16.0) (* ?x748 ?x456 ?x456 ?x311 ?x311 ?x311 ?x311 ?x66)) (* (- (/ 1.0 32.0)) (* ?x748 ?x748 ?x456 ?x456 ?x311 ?x311 ?x311 ?x69)) (* (- (/ 1.0 16.0)) (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x456 ?x349 ?x349)) (* (/ 1.0 8.0) (* ?x748 ?x748 ?x748 ?x456 ?x311 ?x349 ?x349 ?x349)) (* (- (/ 1.0 8.0)) (* ?x748 ?x748 ?x748 ?x456 ?x311 ?x349 ?x349 ?x66)) (* (/ 1.0 16.0) (* ?x748 ?x748 ?x748 ?x748 ?x456 ?x349 ?x349 ?x69)) (* (/ 1.0 128.0) ?x631) (* (- (/ 1.0 64.0)) ?x880) (* (/ 1.0 64.0) ?x866) (* (- (/ 1.0 128.0)) ?x891) (* (- (/ 1.0 32.0)) (* ?x748 ?x748 ?x748 ?x456 ?x311 ?x311)) (* (/ 1.0 16.0) (* ?x748 ?x748 ?x311 ?x311 ?x311 ?x349)) (* (- (/ 1.0 16.0)) (* ?x748 ?x748 ?x311 ?x311 ?x311 ?x66)) (* (/ 1.0 32.0) (* ?x748 ?x748 ?x748 ?x311 ?x311 ?x69)))))
 (let ((?x437 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x991 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x111 (* 2 (* y!0 b00))) 0)))
 (let (($x1068 (and $x991 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x437 0) (or (not (= ?x705 0.0)) (not (= (* ?x1029 ?x932) 0.0))))))
 (let (($x662 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x171 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x255 (+ ?x171 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1036 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x1066 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1063 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1033 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1060 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1057 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1030 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1053 (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x1050 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x1047 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x1043 (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61))))
 (let ((?x359 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61))))
 (let ((?x323 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1079 (+ (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x63 ?x63)) ?x323 ?x359 (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)) ?x1043 ?x1047 ?x1050 ?x1053 ?x1030 ?x1057 ?x1060 ?x1033 ?x1063 ?x1066 ?x1036)))
 (let ((?x69 (to_real a00)))
 (let ((?x515 (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)))
 (let ((?x66 (to_real y00)))
 (let ((?x504 (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66)))
 (let ((?x494 (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)))
 (let ((?x483 (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)))
 (let ((?x560 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x66)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x69)) (* (/ 1.0 128.0) ?x483) (* (- (/ 1.0 64.0)) ?x494) (* (/ 1.0 64.0) ?x504) (* (- (/ 1.0 128.0)) ?x515) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x69)))))
 (let (($x157 (not (= ?x560 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x178 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x183 (= ?x178 0)))
 (let (($x108 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let ((?x35 (* a00 d00)))
 (let (($x143 (= (+ ?x35 (* (- 1) (* a d00)) ?x111 (* 2 (* y b00))) 0)))
 (and $x143 $x108 $x183 (or $x157 (not (= (* ?x1079 ?x255) 0.0)))))))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x295 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x620 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x841 (* ?x66 ?x61)))
 (let ((?x665 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x841 ?x620)))
 (let ((?x359 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x61 ?x61))))
 (let ((?x63 (to_real y)))
 (let ((?x922 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x793 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x824 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x793 ?x793 ?x793 ?x922 ?x922))))
 (let ((?x846 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x793 ?x793)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x793 ?x922 ?x922)) ?x824 ?x359)))
 (let ((?x867 (* (/ 1.0 64.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59))))
 (let ((?x771 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) ?x867 ?x359)))
 (let ((?x784 (* ?x771 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x841 ?x620))))
 (let (($x865 (or (not (= ?x784 0.0)) (not (= (* ?x846 ?x665) 0.0)))))
 (let ((?x322 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x180 (= ?x322 0)))
 (let ((?x405 (* d00 a)))
 (let ((?x618 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x405)))
 (and (= ?x618 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x180 $x865)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x961 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x171 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x255 (+ ?x171 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1036 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x1066 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1063 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1033 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1060 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1057 (* (/ 3.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1030 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1053 (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x1050 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x1047 (* (/ 3.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61))))
 (let ((?x1043 (* (/ 1.0 256.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61))))
 (let ((?x359 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61))))
 (let ((?x323 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1079 (+ (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x63 ?x63)) ?x323 ?x359 (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x63 ?x63)) ?x1043 ?x1047 ?x1050 ?x1053 ?x1030 ?x1057 ?x1060 ?x1033 ?x1063 ?x1066 ?x1036)))
 (let ((?x69 (to_real a00)))
 (let ((?x515 (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)))
 (let ((?x66 (to_real y00)))
 (let ((?x504 (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x66)))
 (let ((?x494 (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)))
 (let ((?x483 (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)))
 (let ((?x560 (+ (* (/ 1.0 32.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x61 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x61 ?x61 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x66)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x63 ?x63 ?x69)) (* (/ 1.0 128.0) ?x483) (* (- (/ 1.0 64.0)) ?x494) (* (/ 1.0 64.0) ?x504) (* (- (/ 1.0 128.0)) ?x515) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x69)))))
 (let (($x157 (not (= ?x560 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x178 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x183 (= ?x178 0)))
 (let (($x108 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let ((?x35 (* a00 d00)))
 (let (($x143 (= (+ ?x35 (* (- 1) (* a d00)) ?x111 (* 2 (* y b00))) 0)))
 (let (($x109 (and $x143 $x108 $x183 (or $x157 (not (= (* ?x1079 ?x255) 0.0))))))
 (let ((?x620 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x841 (* ?x66 ?x61)))
 (let ((?x665 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x59 ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x841 ?x620)))
 (let ((?x922 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x793 (+ ?x59 ?x61)))
 (let ((?x824 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x793 ?x793 ?x793 ?x922 ?x922))))
 (let ((?x846 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x793 ?x793)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x793 ?x922 ?x922)) ?x824 ?x359)))
 (let ((?x867 (* (/ 1.0 64.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59))))
 (let ((?x771 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) ?x867 ?x359)))
 (let (($x448 (not (= (* ?x771 (+ ?x171 (* (- 1.0) (* ?x63 ?x61)) ?x841 ?x620)) 0.0))))
 (let (($x865 (or $x448 (not (= (* ?x846 ?x665) 0.0)))))
 (let ((?x322 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x180 (= ?x322 0)))
 (let ((?x405 (* d00 a)))
 (let (($x835 (= (+ (* 2 ?x110) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x405) 0)))
 (let (($x851 (and $x835 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x180 $x865)))
 (rewrite (= $x851 $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x869 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x620 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x841 (* ?x66 ?x61)))
 (let ((?x665 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x841 ?x620)))
 (let ((?x359 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x61 ?x61))))
 (let ((?x63 (to_real y)))
 (let ((?x922 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x793 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x824 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x793 ?x793 ?x793 ?x922 ?x922))))
 (let ((?x846 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x793 ?x793)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x793 ?x922 ?x922)) ?x824 ?x359)))
 (let ((?x867 (* (/ 1.0 64.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59))))
 (let ((?x771 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) ?x867 ?x359)))
 (let ((?x784 (* ?x771 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x841 ?x620))))
 (let (($x865 (or (not (= ?x784 0.0)) (not (= (* ?x846 ?x665) 0.0)))))
 (let ((?x322 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x180 (= ?x322 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let (($x634 (= (+ ?x111 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x634 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x180 $x865)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x371 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x620 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x841 (* ?x66 ?x61)))
 (let ((?x665 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x841 ?x620)))
 (let ((?x359 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x61 ?x61))))
 (let ((?x63 (to_real y)))
 (let ((?x922 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x793 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x824 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x793 ?x793 ?x793 ?x922 ?x922))))
 (let ((?x846 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x793 ?x793)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x793 ?x922 ?x922)) ?x824 ?x359)))
 (let ((?x867 (* (/ 1.0 64.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59))))
 (let ((?x771 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) ?x867 ?x359)))
 (let ((?x784 (* ?x771 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x841 ?x620))))
 (let (($x865 (or (not (= ?x784 0.0)) (not (= (* ?x846 ?x665) 0.0)))))
 (let ((?x322 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x180 (= ?x322 0)))
 (let ((?x405 (* d00 a)))
 (let ((?x618 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x405)))
 (let (($x851 (and (= ?x618 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x180 $x865)))
 (let ((?x35 (* a00 d00)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let (($x302 (and (= (+ ?x111 ?x35 (* 2 (* b00 y)) (* (- 1) ?x405)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x180 $x865)))
 (rewrite (= $x302 $x851)))))))))))))))))))))))))))))
 ))
 (let (($x102 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x77 (* ?x62 ?x62 ?x58 ?x58)))
 (let ((?x63 (to_real y)))
 (let ((?x86 (+ ?x63 ?x58)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x93 (- (* ?x84 ?x84 ?x62 ?x62 ?x62 ?x58) (* ?x84 ?x58 ?x58 ?x58 ?x86 ?x86))))
 (let ((?x95 (+ ?x93 (* ?x84 ?x84 ?x84 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x86 ?x86))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let ((?x97 (* (- (+ (- (* ?x84 ?x58) (* ?x57 ?x62 ?x86)) ?x67) ?x70) (- ?x95 ?x77))))
 (let ((?x59 (to_real a)))
 (let ((?x74 (- (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x58) (* ?x59 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x76 (+ ?x74 (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x79 (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) (- ?x76 ?x77))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x79 ?x80)) (not (= ?x97 ?x80))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x477 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x620 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x841 (* ?x66 ?x61)))
 (let ((?x665 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x841 ?x620)))
 (let ((?x359 (* (- (/ 1.0 16.0)) (* (to_real d) (to_real d) ?x61 ?x61))))
 (let ((?x63 (to_real y)))
 (let ((?x922 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x793 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x824 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x793 ?x793 ?x793 ?x922 ?x922))))
 (let ((?x846 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x793 ?x793)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x793 ?x922 ?x922)) ?x824 ?x359)))
 (let ((?x867 (* (/ 1.0 64.0) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x59 ?x59 ?x59))))
 (let ((?x771 (+ (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x59)) ?x867 ?x359)))
 (let ((?x784 (* ?x771 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x841 ?x620))))
 (let (($x865 (or (not (= ?x784 0.0)) (not (= (* ?x846 ?x665) 0.0)))))
 (let ((?x322 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x180 (= ?x322 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x110 (* b00 y00)))
 (let ((?x111 (* (- 2) ?x110)))
 (let (($x634 (= (+ ?x111 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x302 (and $x634 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x180 $x865)))
 (let ((?x80 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x77 (* ?x62 ?x62 ?x58 ?x58)))
 (let ((?x86 (+ ?x63 ?x58)))
 (let ((?x84 (to_real (+ a b))))
 (let ((?x93 (- (* ?x84 ?x84 ?x62 ?x62 ?x62 ?x58) (* ?x84 ?x58 ?x58 ?x58 ?x86 ?x86))))
 (let ((?x95 (+ ?x93 (* ?x84 ?x84 ?x84 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x86 ?x86))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x90 (- (+ (- (* ?x84 ?x58) (* ?x57 ?x62 ?x86)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x74 (- (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x58) (* ?x59 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x76 (+ ?x74 (* ?x59 ?x59 ?x59 ?x62 ?x62 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let (($x100 (or (not (= (* ?x71 (- ?x76 ?x77)) ?x80)) (not (= (* ?x90 (- ?x95 ?x77)) ?x80)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x101 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x100)))
 (rewrite (= $x101 $x302))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x103 (asserted $x102)))
 (let ((@x766 (mp (mp @x103 (quant-intro (proof-bind ?x477) (= $x102 $x869)) $x869) (rewrite (= $x869 $x869)) $x869)))
 (let ((@x802 (mp (mp @x766 (quant-intro (proof-bind ?x371) (= $x869 $x295)) $x295) (quant-intro (proof-bind ?x961) (= $x295 $x662)) $x662)))
 (let ((@x203 (mp (mp~ @x802 (sk (~ $x662 $x1068)) $x1068) (rewrite (= $x1068 $x954)) $x954)))
 (let ((@x731 (mp (and-elim @x203 $x413) @x711 $x510)))
 (let ((@x653 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x510) $x309)) @x731 $x309)))
 (let ((@x655 ((_ th-lemma arith) (hypothesis (not $x960)) @x653 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x156) $x749)) @x950 $x749) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x212) $x750)) @x745 $x750) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x751)) @x530 $x751) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x949) $x752)) @x966 $x752) false)))
 (let ((@x667 (lemma @x655 $x960)))
 (let (($x540 (<= ?x542 0.0)))
 (let (($x970 (not $x540)))
 (let (($x563 (>= ?x542 0.0)))
 (let (($x324 (>= ?x604 0.0)))
 (let (($x612 (not $x563)))
 (let ((@x614 (hypothesis $x612)))
 (let ((@x813 (unit-resolution ((_ th-lemma arith) (or (not $x960) $x324 $x563)) @x614 @x667 (hypothesis (not $x324)) false)))
 (let (($x576 (>= ?x911 0.0)))
 (let (($x941 (>= ?x141 0.0)))
 (let (($x670 (>= ?x422 0)))
 (let ((@x965 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x510) $x670)) @x731 $x670)))
 (let (($x238 (>= ?x243 0.0)))
 (let (($x298 (<= ?x242 0.0)))
 (let (($x213 (<= ?x182 0.0)))
 (let ((@x532 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x213)) @x530 $x213) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x212) $x298)) @x745 $x298) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x949) $x238)) @x966 $x238) @x965 (hypothesis (not $x576)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x156) $x941)) @x950 $x941) false)))
 (let ((@x416 (lemma @x532 $x576)))
 (let ((@x823 (unit-resolution ((_ th-lemma arith) (or (not $x324) (not $x960) $x563 (not $x576))) @x614 @x416 @x667 (unit-resolution (lemma @x813 (or $x324 $x563)) @x614 $x324) false)))
 (let (($x344 (<= ?x170 0.0)))
 (let ((@x790 (unit-resolution ((_ th-lemma arith) (or $x344 (not $x670) (not $x309))) @x653 @x965 (hypothesis (not $x344)) false)))
 (let (($x345 (>= ?x170 0.0)))
 (let ((@x775 (unit-resolution ((_ th-lemma arith) (or $x345 (not $x670) (not $x309))) @x653 @x965 (hypothesis (not $x345)) false)))
 (let ((@x825 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x197 (not $x344) (not $x345))) (lemma @x775 $x345) (lemma @x790 $x344) $x197)))
 (let ((@x829 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x717 $x970 $x612)) (unit-resolution (and-elim @x203 $x499) @x825 $x549) (or $x970 $x612))))
 (let ((@x833 (unit-resolution @x829 (lemma @x823 $x563) $x970)))
 (let ((@x858 (unit-resolution ((_ th-lemma arith) (or (not $x960) $x820 $x540)) @x833 @x667 (hypothesis (not $x820)) false)))
 (unit-resolution ((_ th-lemma arith) (or (not $x820) (not $x960) $x540 (not $x576))) @x833 @x416 @x667 (lemma @x858 $x820) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       29
 :arith-eq-adapter                35
 :arith-bound-propagations-cheap  44
 :arith-bound-propagations-lp     1
 :arith-conflicts                 112
 :arith-diseq                     32
 :arith-gcd-calls                 7
 :arith-grobner-calls             7
 :arith-grobner-conflicts         2
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 11
 :arith-lower                     80
 :arith-make-feasible             75
 :arith-max-columns               97
 :arith-max-rows                  22
 :arith-nla-explanations          93
 :arith-nla-lemmas                110
 :arith-patches                   7
 :arith-patches-success           7
 :arith-propagations              44
 :arith-upper                     89
 :conflicts                       12
 :decisions                       140
 :del-clause                      149
 :final-checks                    50
 :max-memory                      5.87
 :memory                          3.23
 :mk-bool-var                     234
 :mk-clause                       198
 :num-allocs                      136707019
 :num-checks                      1
 :propagations                    144
 :rlimit-count                    8840
 :time                            0.18
 :total-time                      0.20)
