unsat
((set-logic NIA)
(proof
(let (($x55 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x46 (* ?x42 ?x42 ?x42 y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* ?x44 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x48 (+ ?x43 ?x45 ?x46 ?x47)))
 (let ((?x49 (- ?x48 ?x45)))
 (let ((?x50 (- ?x49 ?x46)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x53)))))))))))))))) :qid k!29))
 ))
 (let (($x228 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x268 (lambda ((q Int) (r Int) (y Int) )(let ((?x42 (- r y00)))
 (let ((?x46 (* ?x42 ?x42 ?x42 y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* ?x44 ?x42 ?x42 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 ?x42 y00 y00)))
 (let ((?x48 (+ ?x43 ?x45 ?x46 ?x47)))
 (let ((?x49 (- ?x48 ?x45)))
 (let ((?x50 (- ?x49 ?x46)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x54 (and $x33 $x41 $x53)))
 (let (($x192 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x160 (= (+ (* (- 1) y00) y) 0)))
 (let (($x251 (and $x160 $x192 false)))
 (let ((?x60 (* (- 1) y00)))
 (let ((?x165 (+ r ?x60)))
 (let ((?x203 (* y00 ?x165 ?x165 ?x165)))
 (let ((?x272 (+ ?x203 (* (- 1) ?x203))))
 (let ((@x167 (rewrite (= ?x42 ?x165))))
 (let ((@x207 (trans (monotonicity @x167 @x167 @x167 (= ?x46 (* ?x165 ?x165 ?x165 y00))) (rewrite (= (* ?x165 ?x165 ?x165 y00) ?x203)) (= ?x46 ?x203))))
 (let ((?x188 (+ 1 q)))
 (let ((?x194 (* y00 y00 y00 y00 ?x188 ?x165 ?x165)))
 (let ((?x220 (+ ?x194 ?x203)))
 (let ((?x91 (+ ?x220 (* (- 1) ?x194))))
 (let ((@x191 (monotonicity (rewrite (= ?x44 ?x188)) @x167 @x167 (= ?x45 (* ?x188 ?x165 ?x165 y00 y00 y00 y00)))))
 (let ((@x199 (trans @x191 (rewrite (= (* ?x188 ?x165 ?x165 y00 y00 y00 y00) ?x194)) (= ?x45 ?x194))))
 (let ((?x173 (* y00 y00 ?x165 ?x165 ?x165)))
 (let ((?x174 (* (- 1) ?x173)))
 (let ((?x217 (+ ?x174 ?x194 ?x203 ?x173)))
 (let ((@x210 (monotonicity @x167 @x167 @x167 (= ?x47 (* ?x165 ?x165 ?x165 y00 y00)))))
 (let ((@x215 (trans @x210 (rewrite (= (* ?x165 ?x165 ?x165 y00 y00) ?x173)) (= ?x47 ?x173))))
 (let ((@x172 (monotonicity (rewrite (= ?x28 (- 1))) @x167 @x167 @x167 (= ?x43 (* (- 1) ?x165 ?x165 ?x165 y00 y00)))))
 (let ((@x186 (trans @x172 (rewrite (= (* (- 1) ?x165 ?x165 ?x165 y00 y00) ?x174)) (= ?x43 ?x174))))
 (let ((@x224 (trans (monotonicity @x186 @x199 @x207 @x215 (= ?x48 ?x217)) (rewrite (= ?x217 ?x220)) (= ?x48 ?x220))))
 (let ((@x111 (trans (monotonicity @x224 @x199 (= ?x49 (- ?x220 ?x194))) (rewrite (= (- ?x220 ?x194) ?x91)) (= ?x49 ?x91))))
 (let ((@x144 (monotonicity (trans @x111 (rewrite (= ?x91 ?x203)) (= ?x49 ?x203)) @x207 (= ?x50 (- ?x203 ?x203)))))
 (let ((@x259 (trans (trans @x144 (rewrite (= (- ?x203 ?x203) ?x272)) (= ?x50 ?x272)) (rewrite (= ?x272 0)) $x51)))
 (let ((@x235 (trans (monotonicity @x259 (= $x51 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x51 true))))
 (let ((@x245 (trans (monotonicity @x235 (= $x52 (not true))) (rewrite (= (not true) false)) (= $x52 false))))
 (let ((@x250 (trans (monotonicity @x245 (= $x53 (or false))) (rewrite (= (or false) false)) (= $x53 false))))
 (let ((@x253 (monotonicity (rewrite (= $x33 $x160)) (rewrite (= $x41 $x192)) @x250 (= $x54 $x251))))
 (trans @x253 (rewrite (= $x251 false)) (= $x54 false)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x277 (trans (quant-intro (proof-bind ?x268) (= $x55 $x228)) (elim-unused (= $x228 false)) (= $x55 false))))
 (let ((@x56 (asserted $x55)))
 (mp @x56 @x277 false))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   919594
 :rlimit-count 309
 :time         0.01
 :total-time   0.01)
