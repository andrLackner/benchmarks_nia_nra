unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x387 (+ m!1 (* (- 6) n!0))))
 (let (($x516 (<= ?x387 6)))
 (let (($x1077 (= ?x387 6)))
 (let ((?x1241 (* 72 (* c!3 m!1 n!0))))
 (let ((?x1308 (* (- 1) (* c!3 m!1 m!1 m!1))))
 (let ((?x641 (* 18 (* c!3 m!1 m!1 n!0))))
 (let ((?x861 (* k!2 k!2)))
 (let ((?x1272 (* 36 ?x861)))
 (let ((?x1126 (* 36 (* c!3 m!1 n!0 n!0))))
 (let ((?x1316 (* 6 (* c!3 k!2 k!2))))
 (let ((?x587 (* 12 (* c!3 m!1 m!1 n!0 n!0))))
 (let ((?x649 (+ c!3 k!2)))
 (let ((?x1104 (+ m!1 k!2)))
 (let ((?x646 (+ 1 n!0)))
 (let ((?x453 (* 36 (* c!3 m!1))))
 (let ((?x1137 (* (- 1) (* c!3 m!1 m!1 m!1 n!0))))
 (let ((?x403 (* 36 (* c!3 k!2))))
 (let ((?x488 (* 6 (* k!2 k!2 k!2))))
 (let ((?x345 (* 6 (* c!3 m!1 m!1))))
 (let ((?x1038 (+ (* 72 (* c!3 n!0 k!2)) (* (- 1) (* c!3 m!1 m!1 n!0 k!2)) (* 12 (* m!1 m!1 n!0 n!0 k!2)) ?x345 (* 18 (* c!3 m!1 n!0 n!0 k!2)) ?x488 (* (- 1) (* c!3 m!1 m!1 k!2)) (* 6 (* m!1 m!1 k!2)) (* (- 1) (* ?x646 ?x646 (+ 6 m!1) ?x1104 ?x1104 ?x649)) (* 12 (* c!3 n!0 k!2 k!2)) ?x403 ?x1137 ?x453 (* 72 (* m!1 n!0 k!2)) (* 72 (* n!0 k!2 k!2)) (* (- 1) (* m!1 m!1 k!2 k!2)) (* 12 (* m!1 k!2 k!2)) (* 6 (* ?x646 ?x646 ?x646 ?x1104 ?x1104 ?x649)) (* 12 (* n!0 k!2 k!2 k!2)) (* 36 (* m!1 k!2)) ?x587 ?x1316 (* 12 (* c!3 m!1 k!2)) (* 36 (* c!3 n!0 n!0 k!2)) (* 36 (* n!0 n!0 k!2 k!2)) ?x1126 (* 18 (* m!1 n!0 n!0 k!2 k!2)) (* (- 1) (* m!1 m!1 m!1 n!0 k!2)) (* 36 (* m!1 n!0 n!0 k!2)) ?x1272 (* (- 1) (* m!1 m!1 m!1 k!2)) ?x641 (* (- 1) (* m!1 m!1 n!0 k!2 k!2)) (* 6 (* n!0 n!0 k!2 k!2 k!2)) ?x1308 (* 18 (* m!1 m!1 n!0 k!2)) (* 30 (* m!1 n!0 k!2 k!2)) ?x1241 (* 6 (* c!3 n!0 n!0 k!2 k!2)) (* 30 (* c!3 m!1 n!0 k!2)))))
 (let (($x1357 (= ?x1038 0)))
 (let (($x305 (not $x1357)))
 (let ((?x1023 (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2))))
 (let (($x1095 (= ?x1023 (- 1))))
 (let ((?x1117 (* (- 2) n!0)))
 (let ((?x1116 (* 3 c!3)))
 (let ((?x1047 (+ ?x1116 ?x1117 k!2 (* (- 1) (* n!0 k!2)))))
 (let (($x1046 (= ?x1047 1)))
 (let ((?x1053 (* (- 1) ?x861)))
 (let ((?x549 (* 9 (* c!3 n!0))))
 (let ((?x590 (* 5 k!2)))
 (let ((?x807 (* (- 9) n!0)))
 (let ((?x1237 (* 18 c!3)))
 (let ((?x306 (+ ?x1237 ?x807 ?x590 ?x549 ?x1053)))
 (let (($x429 (= ?x306 4)))
 (let (($x1359 (and $x1077 $x429 $x1046 $x1095 $x305)))
 (let ((?x1280 (* (- 1) (* ?x646 ?x646 (+ 6 m!1) (+ k!2 m!1) (+ k!2 m!1) ?x649))))
 (let ((?x1140 (+ ?x1272 (* 6 (* c!3 k!2 k!2 n!0 n!0)) (* 6 (* k!2 k!2 k!2 n!0 n!0)) (* 18 (* c!3 k!2 m!1 n!0 n!0)) (* 18 (* k!2 k!2 m!1 n!0 n!0)) ?x587 (* 12 (* k!2 m!1 m!1 n!0 n!0)) (* (- 1) (* c!3 k!2 m!1 m!1 n!0)) (* (- 1) (* k!2 k!2 m!1 m!1 n!0)) ?x1137 (* (- 1) (* k!2 m!1 m!1 m!1 n!0)) ?x403 ?x453 (* 36 (* k!2 m!1)) (* 12 (* c!3 k!2 m!1)) (* 12 (* k!2 k!2 m!1)) ?x345 (* 6 (* k!2 m!1 m!1)) (* (- 1) (* c!3 k!2 m!1 m!1)) (* (- 1) (* k!2 k!2 m!1 m!1)) ?x1308 (* (- 1) (* k!2 m!1 m!1 m!1)) (* 72 (* c!3 k!2 n!0)) (* 72 (* k!2 k!2 n!0)) ?x1241 (* 72 (* k!2 m!1 n!0)) (* 30 (* c!3 k!2 m!1 n!0)) (* 30 (* k!2 k!2 m!1 n!0)) ?x641 (* 18 (* k!2 m!1 m!1 n!0)) ?x1280 ?x1316 ?x488 (* 12 (* c!3 k!2 k!2 n!0)) (* 12 (* k!2 k!2 k!2 n!0)) (* 6 (* ?x646 ?x646 ?x646 (+ k!2 m!1) (+ k!2 m!1) ?x649)) (* 36 (* k!2 m!1 n!0 n!0)) ?x1126 (* 36 (* k!2 k!2 n!0 n!0)) (* 36 (* c!3 k!2 n!0 n!0)))))
 (let (($x191 (and $x1077 (= (+ ?x1237 ?x590 ?x807 ?x1053 ?x549) 4) (= (+ ?x1116 k!2 ?x1117 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x1140 0)))))
 (let (($x968 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x1421 (* 36 (* c k n n))))
 (let ((?x1420 (* 36 (* k k n n))))
 (let ((?x1419 (* 36 (* c m n n))))
 (let ((?x1418 (* 36 (* k m n n))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x1155 (* ?x304 ?x304 ?x304 ?x69 ?x69 ?x68)))
 (let ((?x972 (* 6 ?x1155)))
 (let ((?x1414 (* 6 (* k k k))))
 (let ((?x1413 (* 6 (* c k k))))
 (let ((?x379 (+ 6 m)))
 (let ((?x585 (* ?x304 ?x304 ?x379 ?x69 ?x69 ?x68)))
 (let ((?x499 (* (- 1) ?x585)))
 (let ((?x1405 (* 72 (* k m n))))
 (let ((?x1404 (* 72 (* c m n))))
 (let ((?x1403 (* 72 (* k k n))))
 (let ((?x1402 (* 72 (* c k n))))
 (let ((?x1400 (* (- 1) (* k m m m))))
 (let ((?x1399 (* (- 1) (* c m m m))))
 (let ((?x1398 (* (- 1) (* k k m m))))
 (let ((?x1397 (* (- 1) (* c k m m))))
 (let ((?x451 (* 6 (* k m m))))
 (let ((?x447 (* 6 (* c m m))))
 (let ((?x519 (* 12 (* k k m))))
 (let ((?x518 (* 12 (* c k m))))
 (let ((?x435 (* 36 (* k m))))
 (let ((?x431 (* 36 (* c m))))
 (let ((?x424 (* 36 (* c k))))
 (let ((?x1396 (* (- 1) (* k m m m n))))
 (let ((?x1395 (* (- 1) (* c m m m n))))
 (let ((?x1394 (* (- 1) (* k k m m n))))
 (let ((?x1393 (* (- 1) (* c k m m n))))
 (let ((?x49 (* k k)))
 (let ((?x427 (* 36 ?x49)))
 (let ((?x829 (+ ?x427 (* 6 (* c k k n n)) (* 6 (* k k k n n)) (* 18 (* c k m n n)) (* 18 (* k k m n n)) (* 12 (* c m m n n)) (* 12 (* k m m n n)) ?x1393 ?x1394 ?x1395 ?x1396 ?x424 ?x431 ?x435 ?x518 ?x519 ?x447 ?x451 ?x1397 ?x1398 ?x1399 ?x1400 ?x1402 ?x1403 ?x1404 ?x1405 (* 30 (* c k m n)) (* 30 (* k k m n)) (* 18 (* c m m n)) (* 18 (* k m m n)) ?x499 ?x1413 ?x1414 (* 12 (* c k k n)) (* 12 (* k k k n)) ?x972 ?x1418 ?x1419 ?x1420 ?x1421)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 $x206 $x258 $x296 (not (= ?x829 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x1151 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x379 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x601 (* ?x304 ?x304 ?x379 ?x69 ?x68)))
 (let ((?x585 (* ?x304 ?x304 ?x379 ?x69 ?x69 ?x68)))
 (let ((?x499 (* (- 1) ?x585)))
 (let ((?x1155 (* ?x304 ?x304 ?x304 ?x69 ?x69 ?x68)))
 (let ((?x972 (* 6 ?x1155)))
 (let ((?x106 (+ (* 6 (* ?x304 ?x304 ?x69 ?x69 ?x68)) (* (- 1) (* ?x304 ?x379 ?x379 ?x69 ?x68)) ?x972 (* 6 (* ?x304 ?x379 ?x69 ?x68)) ?x499 (* 6 ?x601))))
 (let (($x1189 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1083 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x1083 $x1189 (not (= ?x106 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x1064 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x1421 (* 36 (* c k n n))))
 (let ((?x1420 (* 36 (* k k n n))))
 (let ((?x1419 (* 36 (* c m n n))))
 (let ((?x1418 (* 36 (* k m n n))))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x1155 (* ?x304 ?x304 ?x304 ?x69 ?x69 ?x68)))
 (let ((?x972 (* 6 ?x1155)))
 (let ((?x1414 (* 6 (* k k k))))
 (let ((?x1413 (* 6 (* c k k))))
 (let ((?x379 (+ 6 m)))
 (let ((?x585 (* ?x304 ?x304 ?x379 ?x69 ?x69 ?x68)))
 (let ((?x499 (* (- 1) ?x585)))
 (let ((?x1405 (* 72 (* k m n))))
 (let ((?x1404 (* 72 (* c m n))))
 (let ((?x1403 (* 72 (* k k n))))
 (let ((?x1402 (* 72 (* c k n))))
 (let ((?x1400 (* (- 1) (* k m m m))))
 (let ((?x1399 (* (- 1) (* c m m m))))
 (let ((?x1398 (* (- 1) (* k k m m))))
 (let ((?x1397 (* (- 1) (* c k m m))))
 (let ((?x451 (* 6 (* k m m))))
 (let ((?x447 (* 6 (* c m m))))
 (let ((?x519 (* 12 (* k k m))))
 (let ((?x518 (* 12 (* c k m))))
 (let ((?x435 (* 36 (* k m))))
 (let ((?x431 (* 36 (* c m))))
 (let ((?x424 (* 36 (* c k))))
 (let ((?x1396 (* (- 1) (* k m m m n))))
 (let ((?x1395 (* (- 1) (* c m m m n))))
 (let ((?x1394 (* (- 1) (* k k m m n))))
 (let ((?x1393 (* (- 1) (* c k m m n))))
 (let ((?x49 (* k k)))
 (let ((?x427 (* 36 ?x49)))
 (let ((?x829 (+ ?x427 (* 6 (* c k k n n)) (* 6 (* k k k n n)) (* 18 (* c k m n n)) (* 18 (* k k m n n)) (* 12 (* c m m n n)) (* 12 (* k m m n n)) ?x1393 ?x1394 ?x1395 ?x1396 ?x424 ?x431 ?x435 ?x518 ?x519 ?x447 ?x451 ?x1397 ?x1398 ?x1399 ?x1400 ?x1402 ?x1403 ?x1404 ?x1405 (* 30 (* c k m n)) (* 30 (* k k m n)) (* 18 (* c m m n)) (* 18 (* k m m n)) ?x499 ?x1413 ?x1414 (* 12 (* c k k n)) (* 12 (* k k k n)) ?x972 ?x1418 ?x1419 ?x1420 ?x1421)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x834 (and $x122 $x206 $x258 $x296 (not (= ?x829 0)))))
 (let ((?x106 (+ (* 6 (* ?x304 ?x304 ?x69 ?x69 ?x68)) (* (- 1) (* ?x304 ?x379 ?x379 ?x69 ?x68)) ?x972 (* 6 (* ?x304 ?x379 ?x69 ?x68)) ?x499 (* 6 (* ?x304 ?x304 ?x379 ?x69 ?x68)))))
 (let (($x1189 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1083 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x1085 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x1083 $x1189 (not (= ?x106 0)))))
 (rewrite (= $x1085 $x834))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1148 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x379 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x601 (* ?x304 ?x304 ?x379 ?x69 ?x68)))
 (let ((?x585 (* ?x304 ?x304 ?x379 ?x69 ?x69 ?x68)))
 (let ((?x1156 (* ?x304 ?x379 ?x379 ?x69 ?x68)))
 (let ((?x622 (+ (* (- 6) (* ?x304 ?x304 ?x69 ?x69 ?x68)) ?x1156 (* (- 6) (* ?x304 ?x304 ?x304 ?x69 ?x69 ?x68)) (* (- 6) (* ?x304 ?x379 ?x69 ?x68)) ?x585 (* (- 6) ?x601))))
 (let (($x1189 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x187 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x1069 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= ?x1069 (- 4)) $x187 $x1189 (not (= ?x622 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x1034 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x379 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x601 (* ?x304 ?x304 ?x379 ?x69 ?x68)))
 (let ((?x585 (* ?x304 ?x304 ?x379 ?x69 ?x69 ?x68)))
 (let ((?x499 (* (- 1) ?x585)))
 (let ((?x1155 (* ?x304 ?x304 ?x304 ?x69 ?x69 ?x68)))
 (let ((?x972 (* 6 ?x1155)))
 (let ((?x106 (+ (* 6 (* ?x304 ?x304 ?x69 ?x69 ?x68)) (* (- 1) (* ?x304 ?x379 ?x379 ?x69 ?x68)) ?x972 (* 6 (* ?x304 ?x379 ?x69 ?x68)) ?x499 (* 6 ?x601))))
 (let (($x1189 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1083 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x1085 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x1083 $x1189 (not (= ?x106 0)))))
 (let ((?x1156 (* ?x304 ?x379 ?x379 ?x69 ?x68)))
 (let ((?x622 (+ (* (- 6) (* ?x304 ?x304 ?x69 ?x69 ?x68)) ?x1156 (* (- 6) ?x1155) (* (- 6) (* ?x304 ?x379 ?x69 ?x68)) ?x585 (* (- 6) ?x601))))
 (let (($x187 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x1069 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x1177 (and $x122 (= ?x1069 (- 4)) $x187 $x1189 (not (= ?x622 0)))))
 (rewrite (= $x1177 $x1085))))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x72 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (+ (* (- 6) ?x68 ?x69 ?x69 ?x70 ?x70) (* ?x68 ?x69 ?x72 ?x72 ?x70))))
 (let ((?x78 (- (- ?x74 (* 6 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70)) (* 6 ?x68 ?x69 ?x72 ?x70))))
 (let ((?x82 (- (+ ?x78 (* ?x68 ?x69 ?x69 ?x72 ?x70 ?x70)) (* 6 ?x68 ?x69 ?x72 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x1158 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x379 (+ 6 m)))
 (let ((?x304 (+ 1 n)))
 (let ((?x601 (* ?x304 ?x304 ?x379 ?x69 ?x68)))
 (let ((?x585 (* ?x304 ?x304 ?x379 ?x69 ?x69 ?x68)))
 (let ((?x1156 (* ?x304 ?x379 ?x379 ?x69 ?x68)))
 (let ((?x622 (+ (* (- 6) (* ?x304 ?x304 ?x69 ?x69 ?x68)) ?x1156 (* (- 6) (* ?x304 ?x304 ?x304 ?x69 ?x69 ?x68)) (* (- 6) (* ?x304 ?x379 ?x69 ?x68)) ?x585 (* (- 6) ?x601))))
 (let (($x1189 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x187 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x1069 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x1177 (and $x122 (= ?x1069 (- 4)) $x187 $x1189 (not (= ?x622 0)))))
 (let ((?x70 (+ n 1)))
 (let ((?x74 (+ (* (- 6) ?x68 ?x69 ?x69 ?x70 ?x70) (* ?x68 ?x69 (+ m 6) (+ m 6) ?x70))))
 (let ((?x78 (- (- ?x74 (* 6 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70)) (* 6 ?x68 ?x69 (+ m 6) ?x70))))
 (let ((?x82 (- (+ ?x78 (* ?x68 ?x69 ?x69 (+ m 6) ?x70 ?x70)) (* 6 ?x68 ?x69 (+ m 6) ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x1177))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x1036 (mp (mp @x88 (quant-intro (proof-bind ?x1158) (= $x87 $x1148)) $x1148) (rewrite (= $x1148 $x1148)) $x1148)))
 (let ((@x343 (mp (mp @x1036 (quant-intro (proof-bind ?x1034) (= $x1148 $x1151)) $x1151) (quant-intro (proof-bind ?x1064) (= $x1151 $x968)) $x968)))
 (let ((@x548 (mp (mp~ @x343 (sk (~ $x968 $x191)) $x191) (rewrite (= $x191 $x1359)) $x1359)))
 (let ((@x281 (and-elim @x548 $x1077)))
 (let ((@x428 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1077) $x516)) @x281 $x516)))
 (let (($x412 (>= ?x387 6)))
 (let ((@x1096 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1077) $x412)) @x281 $x412)))
 (let (($x511 (<= ?x306 4)))
 (let ((@x445 (and-elim @x548 $x429)))
 (let (($x941 (>= ?x306 4)))
 (let (($x660 (<= ?x1047 1)))
 (let ((@x90 (and-elim @x548 $x1046)))
 (let ((@x623 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1046) $x660)) @x90 $x660)))
 (let (($x509 (>= ?x1047 1)))
 (let ((@x758 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1046) $x509)) @x90 $x509)))
 (let (($x943 (<= ?x1023 (- 1))))
 (let ((@x425 (and-elim @x548 $x1095)))
 (let ((@x1350 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1095) $x943)) @x425 $x943)))
 (let (($x108 (>= ?x1023 (- 1))))
 (let ((@x237 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1095) $x108)) @x425 $x108)))
 (let (($x114 (not (<= ?x1038 0))))
 (let (($x99 (>= ?x1038 0)))
 (let ((@x242 ((_ th-lemma arith) (hypothesis (not $x99)) @x237 @x1350 @x1096 @x428 @x1096 @x428 @x237 @x1350 @x237 @x1350 @x758 @x623 @x1096 @x428 @x237 @x1350 @x758 @x623 false)))
 (let ((@x463 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1357 $x114 (not $x99))) (and-elim @x548 $x305) (or $x114 (not $x99)))))
 ((_ th-lemma arith) (unit-resolution @x463 (lemma @x242 $x99) $x114) @x237 @x1350 @x1096 @x428 @x237 @x1350 @x758 @x623 @x1096 @x428 @x237 @x1350 @x237 @x1350 @x758 @x623 @x237 @x1350 @x758 @x623 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x429) $x941)) @x445 $x941) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x429) $x511)) @x445 $x511) @x1096 @x428 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        16
 :arith-assert-upper        48
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           15
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             359
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      18
 :arith-tableau-max-columns 71
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 40
 :del-clause                16
 :final-checks              8
 :max-memory                3.82
 :memory                    3.27
 :mk-bool-var               60
 :mk-clause                 16
 :num-allocs                1450648
 :num-checks                1
 :propagations              10
 :rlimit-count              11737
 :time                      0.01
 :total-time                0.02)
