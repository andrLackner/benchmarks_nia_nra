unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x123 (+ (* (/ 1.0 2.0) (* (to_real d00) (to_real b!2))) (* (- (/ 1.0 2.0)) (* (to_real b00) (to_real d!1))))))
 (let (($x421 (>= ?x123 0.0)))
 (let ((?x479 (to_real d!1)))
 (let ((?x64 (to_real b00)))
 (let ((?x151 (* ?x64 ?x479)))
 (let ((?x208 (+ ?x151 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x447 (<= ?x208 0.0)))
 (let (($x471 (= ?x208 0.0)))
 (let ((@x510 (lemma (unit-resolution ((_ th-lemma arith) $x471) (hypothesis (not $x471)) false) $x471)))
 (let ((?x243 (* d00 b!2)))
 (let ((?x494 (+ ?x243 (* (- 1) (* b00 d!1)))))
 (let (($x261 (>= ?x494 0)))
 (let (($x361 (= 0 ?x494)))
 (let ((@x318 (symm (commutativity (= $x361 (= ?x494 0))) (= (= ?x494 0) $x361))))
 (let (($x348 (= ?x494 0)))
 (let ((?x517 (to_real a!3)))
 (let ((?x516 (to_real b!2)))
 (let ((?x539 (* ?x479 ?x516 ?x516 ?x516 ?x517 ?x517)))
 (let ((?x449 (* (- (/ 1.0 16.0)) ?x539)))
 (let ((?x527 (* ?x479 ?x479 ?x479 ?x516 ?x516)))
 (let ((?x256 (* (- (/ 1.0 32.0)) ?x527)))
 (let ((?x521 (* ?x479 ?x516 ?x516 ?x516 ?x516 ?x516)))
 (let ((?x154 (* (- (/ 1.0 16.0)) ?x521)))
 (let ((?x469 (* ?x479 ?x516 ?x516 ?x516 ?x516 ?x517)))
 (let ((?x561 (* (- (/ 1.0 8.0)) ?x469)))
 (let ((?x523 (to_real y!0)))
 (let ((?x439 (* ?x479 ?x479 ?x516 ?x516 ?x523)))
 (let ((?x179 (* (- (/ 1.0 8.0)) ?x439)))
 (let ((?x248 (* ?x479 ?x516 ?x516 ?x523 ?x523)))
 (let ((?x267 (* (- (/ 1.0 8.0)) ?x248)))
 (let ((?x232 (* ?x516 ?x516 ?x516 ?x516 ?x516 ?x523)))
 (let ((?x415 (* (- (/ 1.0 8.0)) ?x232)))
 (let ((?x195 (* ?x516 ?x516 ?x516 ?x516 ?x517 ?x523)))
 (let ((?x491 (* (- (/ 1.0 4.0)) ?x195)))
 (let ((?x183 (* ?x516 ?x516 ?x517)))
 (let ((?x181 (* ?x516 ?x516 ?x516)))
 (let ((?x182 (* (/ 1.0 2.0) ?x181)))
 (let ((?x178 (* ?x516 ?x516 ?x516 ?x517 ?x517 ?x523)))
 (let ((?x180 (* (- (/ 1.0 8.0)) ?x178)))
 (let ((?x173 (* ?x516 ?x517 ?x517)))
 (let ((?x176 (* (/ 1.0 2.0) ?x173)))
 (let ((?x373 (* (+ (* (/ 1.0 2.0) ?x151) (* (- (/ 1.0 2.0)) (* (to_real d00) ?x516))) (+ ?x176 ?x180 ?x182 ?x183 ?x491 ?x415 ?x267 ?x179 ?x561 ?x154 ?x256 ?x449))))
 (let (($x225 (= ?x373 0.0)))
 (let (($x551 (not $x225)))
 (let ((?x321 (+ (* (/ 1.0 16.0) (* (to_real d00) ?x479 ?x516 ?x516 ?x516 ?x523 ?x523)) (* (- (/ 1.0 16.0)) (* ?x64 ?x479 ?x479 ?x516 ?x516 ?x523 ?x523)) (* (- (/ 1.0 16.0)) (* ?x64 ?x479 ?x516 ?x516 ?x516 ?x517 ?x517 ?x523)) (* (- (/ 1.0 4.0)) (* (to_real d00) ?x516 ?x516 ?x517 ?x517)) (* (/ 1.0 4.0) (* ?x64 ?x479 ?x516 ?x517 ?x517)) (* (/ 1.0 16.0) (* (to_real d00) ?x516 ?x516 ?x516 ?x516 ?x517 ?x517 ?x523)))))
 (let (($x501 (= ?x321 0.0)))
 (let (($x246 (or (not $x501) $x551)))
 (let ((?x322 (+ (* 2 (* b!2 y!0)) (* (- 2) (* y00 b!2)) (* a00 d!1) (* (- 1) (* a!3 d!1)))))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x433 (= (+ ?x35 ?x100 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x236 (and $x433 $x348 (= ?x322 0) $x246)))
 (let ((?x285 (+ ?x176 ?x180 ?x182 ?x183 (* (- (/ 1.0 8.0)) (* ?x516 ?x516 ?x479 ?x523 ?x523)) ?x415 (* (- (/ 1.0 16.0)) (* ?x516 ?x516 ?x516 ?x516 ?x516 ?x479)) (* (- (/ 1.0 8.0)) (* ?x516 ?x516 ?x516 ?x516 ?x479 ?x517)) (* (- (/ 1.0 16.0)) (* ?x516 ?x516 ?x516 ?x479 ?x517 ?x517)) ?x491 (* (- (/ 1.0 32.0)) (* ?x516 ?x516 ?x479 ?x479 ?x479)) (* (- (/ 1.0 8.0)) (* ?x516 ?x516 ?x479 ?x479 ?x523)))))
 (let ((?x228 (* (+ (* (- (/ 1.0 2.0)) (* ?x516 (to_real d00))) (* (/ 1.0 2.0) (* ?x479 ?x64))) ?x285)))
 (let ((?x131 (+ (* (/ 1.0 4.0) (* ?x516 ?x516 (to_real d00) ?x517 ?x517)) (* (- (/ 1.0 4.0)) (* ?x516 ?x479 ?x64 ?x517 ?x517)) (* (- (/ 1.0 16.0)) (* ?x516 ?x516 ?x516 ?x516 (to_real d00) ?x517 ?x517 ?x523)) (* (/ 1.0 16.0) (* ?x516 ?x516 ?x516 ?x479 ?x64 ?x517 ?x517 ?x523)) (* (- (/ 1.0 16.0)) (* ?x516 ?x516 ?x516 (to_real d00) ?x479 ?x523 ?x523)) (* (/ 1.0 16.0) (* ?x516 ?x516 ?x479 ?x479 ?x64 ?x523 ?x523)))))
 (let ((?x496 (* a!3 d!1)))
 (let ((?x513 (+ ?x496 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x145 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x100 (* 2 (* y!0 b00))) 0)))
 (let (($x129 (and $x145 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x513 0) (or (not (= ?x131 0.0)) (not (= ?x228 0.0))))))
 (let (($x168 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 (to_real a) (to_real a)))))
 (let ((?x560 (+ ?x125 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x69)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56)) (* ?x56 ?x56 (to_real a)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x69 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 (to_real a))) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 (to_real a) (to_real a))) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x69)))))
 (let ((?x198 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x67 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x299 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real d00) ?x67 ?x67)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x64 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x64 ?x67 ?x67 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x69 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x69 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x169 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (and $x132 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x169 0) (or (not (= ?x299 0.0)) (not (= (* ?x198 ?x560) 0.0))))))))))))))))))) :qid k!33))
 ))
 (let (($x153 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x259 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d)))
 (let ((?x67 (to_real a)))
 (let ((?x409 (+ ?x67 ?x56)))
 (let ((?x438 (+ (* (/ 1.0 2.0) (* ?x56 ?x409 ?x409)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x409 ?x409 ?x259)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x259 ?x259)))))
 (let ((?x184 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x440 (+ ?x125 (* (- (/ 1.0 8.0)) (* ?x69 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x56 ?x56)))))
 (let (($x239 (or (not (= (* ?x184 ?x440) 0.0)) (not (= (* ?x184 ?x438) 0.0)))))
 (let ((?x386 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x395 (= ?x386 0)))
 (let ((?x547 (* d00 a)))
 (let ((?x426 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x547)))
 (and (= ?x426 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x395 $x239)))))))))))))))) :qid k!33))
 ))
 (let ((?x355 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 (to_real a) (to_real a)))))
 (let ((?x560 (+ ?x125 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x69)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56)) (* ?x56 ?x56 (to_real a)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x69 ?x69)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x62 (to_real a))) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x62 (to_real a) (to_real a))) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x69)))))
 (let ((?x198 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x67 (to_real a)))
 (let ((?x64 (to_real b00)))
 (let ((?x299 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real d00) ?x67 ?x67)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x64 ?x67 ?x67)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x62 ?x64 ?x67 ?x67 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 (to_real d00) ?x62 ?x69 ?x69)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x62 ?x62 ?x64 ?x69 ?x69)))))
 (let ((?x48 (* a d)))
 (let ((?x169 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (let (($x584 (and $x132 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x169 0) (or (not (= ?x299 0.0)) (not (= (* ?x198 ?x560) 0.0))))))
 (let ((?x259 (+ ?x69 (* (/ 1.0 2.0) ?x62))))
 (let ((?x438 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x67 ?x56) (+ ?x67 ?x56))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 (+ ?x67 ?x56) (+ ?x67 ?x56) ?x259)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x259 ?x259)))))
 (let ((?x184 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* ?x64 ?x62)))))
 (let ((?x440 (+ ?x125 (* (- (/ 1.0 8.0)) (* ?x69 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x56 ?x56)))))
 (let (($x239 (or (not (= (* ?x184 ?x440) 0.0)) (not (= (* ?x184 ?x438) 0.0)))))
 (let ((?x386 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x395 (= ?x386 0)))
 (let ((?x547 (* d00 a)))
 (let (($x273 (= (+ (* 2 ?x99) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x547) 0)))
 (let (($x255 (and $x273 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x395 $x239)))
 (rewrite (= $x255 $x584)))))))))))))))))))))))))))))
 ))
 (let (($x380 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real y)))
 (let ((?x259 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d)))
 (let ((?x67 (to_real a)))
 (let ((?x409 (+ ?x67 ?x56)))
 (let ((?x438 (+ (* (/ 1.0 2.0) (* ?x56 ?x409 ?x409)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x409 ?x409 ?x259)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x259 ?x259)))))
 (let ((?x184 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x440 (+ ?x125 (* (- (/ 1.0 8.0)) (* ?x69 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x56 ?x56)))))
 (let (($x239 (or (not (= (* ?x184 ?x440) 0.0)) (not (= (* ?x184 ?x438) 0.0)))))
 (let ((?x386 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x395 (= ?x386 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x558 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x558 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x395 $x239)))))))))))))))))) :qid k!33))
 ))
 (let ((?x432 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x259 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d)))
 (let ((?x67 (to_real a)))
 (let ((?x409 (+ ?x67 ?x56)))
 (let ((?x438 (+ (* (/ 1.0 2.0) (* ?x56 ?x409 ?x409)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x409 ?x409 ?x259)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x259 ?x259)))))
 (let ((?x184 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x440 (+ ?x125 (* (- (/ 1.0 8.0)) (* ?x69 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x56 ?x56)))))
 (let (($x239 (or (not (= (* ?x184 ?x440) 0.0)) (not (= (* ?x184 ?x438) 0.0)))))
 (let ((?x386 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x395 (= ?x386 0)))
 (let ((?x547 (* d00 a)))
 (let ((?x426 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x547)))
 (let (($x255 (and (= ?x426 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x395 $x239)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x339 (and (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) ?x547)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x395 $x239)))
 (rewrite (= $x339 $x255)))))))))))))))))))))))
 ))
 (let (($x91 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x69 (to_real y)))
 (let ((?x81 (+ ?x69 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x79 (to_real (+ a b))))
 (let ((?x85 (- (- (* ?x79 ?x79 ?x58) (* ?x79 ?x79 ?x58 ?x58 ?x58 ?x81)) (* ?x58 ?x58 ?x63 ?x81 ?x81))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x72 (- (* (to_real a) (to_real a) ?x58) (* (to_real a) (to_real a) ?x58 ?x58 ?x58 ?x69))))
 (let (($x89 (or (not (= (* ?x66 (- ?x72 (* ?x58 ?x58 ?x63 ?x69 ?x69))) ?x75)) (not (= (* ?x66 ?x85) ?x75)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) $x89)))))))))))))))))) :qid k!33))
 ))
 (let ((?x382 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real y)))
 (let ((?x259 (+ ?x69 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real d)))
 (let ((?x67 (to_real a)))
 (let ((?x409 (+ ?x67 ?x56)))
 (let ((?x438 (+ (* (/ 1.0 2.0) (* ?x56 ?x409 ?x409)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x409 ?x409 ?x259)) (* (- (/ 1.0 8.0)) (* ?x62 ?x56 ?x56 ?x259 ?x259)))))
 (let ((?x184 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x125 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x440 (+ ?x125 (* (- (/ 1.0 8.0)) (* ?x69 ?x56 ?x56 ?x56 ?x67 ?x67)) (* (- (/ 1.0 8.0)) (* ?x69 ?x69 ?x62 ?x56 ?x56)))))
 (let (($x239 (or (not (= (* ?x184 ?x440) 0.0)) (not (= (* ?x184 ?x438) 0.0)))))
 (let ((?x386 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x395 (= ?x386 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x558 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x339 (and $x558 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x395 $x239)))
 (let ((?x75 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x81 (+ ?x69 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x79 (to_real (+ a b))))
 (let ((?x85 (- (- (* ?x79 ?x79 ?x58) (* ?x79 ?x79 ?x58 ?x58 ?x58 ?x81)) (* ?x58 ?x58 ?x63 ?x81 ?x81))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x73 (- (- (* ?x67 ?x67 ?x58) (* ?x67 ?x67 ?x58 ?x58 ?x58 ?x69)) (* ?x58 ?x58 ?x63 ?x69 ?x69))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x90 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x66 ?x73) ?x75)) (not (= (* ?x66 ?x85) ?x75))))))
 (rewrite (= $x90 $x339)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x388 (mp (mp @x92 (quant-intro (proof-bind ?x382) (= $x91 $x380)) $x380) (rewrite (= $x380 $x380)) $x380)))
 (let ((@x282 (mp (mp @x388 (quant-intro (proof-bind ?x432) (= $x380 $x153)) $x153) (quant-intro (proof-bind ?x355) (= $x153 $x168)) $x168)))
 (let ((@x544 (mp (mp~ @x282 (sk (~ $x168 $x129)) $x129) (rewrite (= $x129 $x236)) $x236)))
 (let ((@x152 (mp (and-elim @x544 $x348) @x318 $x361)))
 (let ((@x164 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x361) $x261)) @x152 $x261)))
 (let ((?x60 (to_real d00)))
 (let ((?x463 (* ?x60 ?x516)))
 (let ((?x459 (+ (* (- 1.0) (to_real ?x243)) ?x463)))
 (let (($x112 (>= ?x459 0.0)))
 (let (($x233 (= 0.0 ?x459)))
 (let ((@x303 (symm (commutativity (= $x233 (= ?x459 0.0))) (= (= ?x459 0.0) $x233))))
 (let ((@x306 (mp ((_ th-lemma arith) (= ?x459 0.0)) @x303 $x233)))
 (let ((@x492 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x233) $x112)) @x306 $x112) @x164 (hypothesis (not $x421)) (hypothesis $x447) false)))
 (let ((@x678 (unit-resolution (lemma @x492 (or (not $x447) $x421)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x471) $x447)) @x510 $x447) $x421)))
 (let ((?x419 (+ (* (/ 1.0 8.0) ?x248) (* (/ 1.0 8.0) ?x439) (* (/ 1.0 8.0) ?x469) (* (/ 1.0 16.0) ?x521) (* (/ 1.0 32.0) ?x527) (* (/ 1.0 16.0) ?x539) (* (- (/ 1.0 2.0)) ?x173) (* (/ 1.0 8.0) ?x178) (* (- (/ 1.0 2.0)) ?x181) (* (- 1.0) ?x183) (* (/ 1.0 4.0) ?x195) (* (/ 1.0 8.0) ?x232))))
 (let (($x249 (<= ?x419 0.0)))
 (let (($x325 (not $x249)))
 (let ((?x268 (+ ?x267 ?x179 ?x561 ?x154 ?x256 ?x449 ?x176 ?x180 ?x182 ?x183 ?x491 ?x415)))
 (let (($x411 (>= ?x268 0.0)))
 (let (($x699 (not $x411)))
 (let (($x424 (<= ?x268 0.0)))
 (let (($x636 (>= ?x419 0.0)))
 (let (($x660 (not $x636)))
 (let ((@x679 (hypothesis $x660)))
 (let (($x188 (<= ?x123 0.0)))
 (let (($x434 (<= ?x459 0.0)))
 (let ((@x114 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x233) $x434)) (lemma (unit-resolution (hypothesis (not $x233)) @x306 false) $x233) $x434)))
 (let (($x429 (>= ?x208 0.0)))
 (let ((@x324 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x471) $x429)) @x510 $x429)))
 (let (($x199 (<= ?x494 0)))
 (let ((@x335 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x361) $x199)) @x152 $x199)))
 (let (($x265 (>= ?x373 0.0)))
 (let (($x711 (not $x265)))
 (let (($x264 (<= ?x373 0.0)))
 (let (($x316 (not $x264)))
 (let ((@x323 (hypothesis $x316)))
 (let (($x122 (not $x188)))
 (let ((@x295 (unit-resolution ((_ th-lemma arith) (or $x122 $x249 $x264)) @x323 (hypothesis $x325) $x122)))
 (let ((@x137 (lemma ((_ th-lemma arith) @x295 @x335 @x324 (hypothesis $x434) false) (or (not $x434) $x264 $x249))))
 (let ((@x695 ((_ th-lemma arith) (or $x411 $x325))))
 (let ((@x696 (unit-resolution @x695 (unit-resolution (unit-resolution @x137 @x114 (or $x264 $x249)) @x323 $x249) $x411)))
 (let ((@x680 (unit-resolution ((_ th-lemma arith) (or (not $x421) $x636 $x264)) @x323 @x678 @x679 false)))
 (let ((@x662 (lemma ((_ th-lemma arith) (hypothesis $x636) (hypothesis (not $x424)) false) (or $x660 $x424))))
 (let ((@x698 (unit-resolution @x662 (unit-resolution (lemma @x680 (or $x636 $x264)) @x323 $x636) $x424)))
 (let (($x472 (= ?x268 0.0)))
 (let (($x684 (not $x472)))
 (let (($x270 (>= ?x321 0.0)))
 (let ((@x437 (unit-resolution ((_ th-lemma arith) (or $x270 (not $x261) (not $x199))) @x335 @x164 (hypothesis (not $x270)) false)))
 (let (($x262 (<= ?x321 0.0)))
 (let ((@x481 (unit-resolution ((_ th-lemma arith) (or $x262 (not $x261) (not $x199))) @x335 @x164 (hypothesis (not $x262)) false)))
 (let ((@x689 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x501 (not $x262) (not $x270))) (lemma @x481 $x262) (lemma @x437 $x270) $x501)))
 (let ((@x690 (unit-resolution (and-elim @x544 $x246) @x689 $x551)))
 (let ((@x692 (unit-resolution ((_ th-lemma arith) (or $x684 $x225)) @x690 (hypothesis $x472) false)))
 (let ((@x703 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x472 (not $x424) $x699)) (lemma @x692 $x684) (or (not $x424) $x699))))
 (let (($x263 (= 0.0 ?x373)))
 (let (($x718 (not $x263)))
 (let ((@x720 (monotonicity (symm (commutativity (= $x263 $x225)) (= $x225 $x263)) (= $x551 $x718))))
 (let ((@x723 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x263 $x316 $x711)) (mp @x690 @x720 $x718) (or $x316 $x711))))
 (let ((@x724 (unit-resolution @x723 (lemma (unit-resolution @x703 @x698 @x696 false) $x264) $x711)))
 (let ((@x725 (unit-resolution ((_ th-lemma arith) (or $x122 $x636 $x265)) @x724 (lemma ((_ th-lemma arith) (hypothesis $x122) @x335 @x324 @x114 false) $x188) @x679 false)))
 (let ((@x730 (unit-resolution @x703 (unit-resolution @x662 (lemma @x725 $x636) $x424) $x699)))
 (unit-resolution ((_ th-lemma arith) (or (not $x421) $x249 $x265)) @x724 (unit-resolution @x695 @x730 $x325) @x678 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       44
 :arith-eq-adapter                64
 :arith-bound-propagations-cheap  59
 :arith-bound-propagations-lp     17
 :arith-conflicts                 160
 :arith-diseq                     63
 :arith-fixed-eqs                 2
 :arith-gcd-calls                 11
 :arith-grobner-calls             8
 :arith-grobner-conflicts         2
 :arith-horner-calls              8
 :arith-horner-cross-nested-forms 40
 :arith-lower                     101
 :arith-make-feasible             96
 :arith-max-columns               70
 :arith-max-rows                  19
 :arith-nla-explanations          85
 :arith-nla-lemmas                156
 :arith-patches                   11
 :arith-patches-success           11
 :arith-propagations              59
 :arith-upper                     127
 :conflicts                       22
 :decisions                       232
 :del-clause                      216
 :final-checks                    59
 :max-memory                      4.34
 :memory                          3.13
 :mk-bool-var                     403
 :mk-clause                       323
 :num-allocs                      3000829
 :num-checks                      1
 :propagations                    225
 :rlimit-count                    8337
 :time                            0.04
 :total-time                      0.06)
