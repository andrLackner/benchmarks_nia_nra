unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x65 (* y00 q00)))
 (let ((?x273 (+ r00 ?x65 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x116 (>= ?x273 0)))
 (let (($x275 (= ?x273 0)))
 (let ((?x318 (* 2 (* y00 y00 y00 y00))))
 (let ((?x136 (* y00 y00)))
 (let ((?x232 (+ (* (- 1) (* y00 r!1 r!1 r!1)) (* (- 1) (* y00 r!1 r!1 r!1 q!2)) ?x136 (* 4 (* y00 y00 r!1 r!1)) ?x318 (* y00 y00 y00 y00 q!2) (* 3 (* y00 y00 r!1 r!1 q!2)) (* (- 3) (* y00 y00 y00 r!1 q!2)) (* y00 y00 q!2) (* (- 5) (* y00 y00 y00 r!1)))))
 (let ((?x233 (* ?x232 (+ (* (- 1) r00) (* (- 1) ?x65) (* y00 q!2) r!1))))
 (let (($x283 (= ?x233 0)))
 (let (($x291 (not $x283)))
 (let (($x68 (and (= (+ y00 (* (- 1) y!0)) 0) $x275 $x291)))
 (let ((?x76 (* (- 1) ?x65)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x70 (+ r!1 ?x64 (* q!2 y00) ?x76)))
 (let ((?x253 (+ ?x136 (* q!2 y00 y00) (* 4 (* r!1 r!1 y00 y00)) (* (- 5) (* r!1 y00 y00 y00)) ?x318 (* (- 1) (* r!1 r!1 r!1 y00)) (* (- 1) (* q!2 r!1 r!1 r!1 y00)) (* 3 (* q!2 r!1 r!1 y00 y00)) (* (- 3) (* q!2 r!1 y00 y00 y00)) (* q!2 y00 y00 y00 y00))))
 (let (($x272 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x70 0) (not (= (* ?x253 ?x70) 0)))))
 (let (($x286 (exists ((q Int) (r Int) (y Int) )(! (let ((?x65 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x65)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x90 (+ r ?x64 ?x39 ?x76)))
 (let ((?x318 (* 2 (* y00 y00 y00 y00))))
 (let ((?x136 (* y00 y00)))
 (let ((?x319 (+ ?x136 (* q y00 y00) (* 4 (* r r y00 y00)) (* (- 5) (* r y00 y00 y00)) ?x318 (* (- 1) (* r r r y00)) (* (- 1) (* q r r r y00)) (* 3 (* q r r y00 y00)) (* (- 3) (* q r y00 y00 y00)) (* q y00 y00 y00 y00))))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (and $x72 $x95 (not (= (* ?x319 ?x90) 0))))))))))))) :qid k!29))
 ))
 (let (($x288 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x160 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x83 (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63) (+ r ?x63)))))
 (let ((?x230 (+ (* y00 y00 (+ 1 q)) (* y00 y00 (+ r ?x63) (+ r ?x63)) ?x83)))
 (let (($x217 (= (* ?x230 (+ r ?x63 ?x64 ?x160 (* y00 (+ 1 q)))) 0)))
 (let (($x148 (not $x217)))
 (let (($x300 (= (+ r ?x64 ?x160 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x300 $x148)))))))))) :qid k!29))
 ))
 (let ((?x306 (lambda ((q Int) (r Int) (y Int) )(let ((?x65 (* y00 q00)))
 (let ((?x76 (* (- 1) ?x65)))
 (let ((?x39 (* q y00)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x90 (+ r ?x64 ?x39 ?x76)))
 (let ((?x318 (* 2 (* y00 y00 y00 y00))))
 (let ((?x136 (* y00 y00)))
 (let ((?x319 (+ ?x136 (* q y00 y00) (* 4 (* r r y00 y00)) (* (- 5) (* r y00 y00 y00)) ?x318 (* (- 1) (* r r r y00)) (* (- 1) (* q r r r y00)) (* 3 (* q r r y00 y00)) (* (- 3) (* q r y00 y00 y00)) (* q y00 y00 y00 y00))))
 (let (($x95 (= ?x90 0)))
 (let (($x72 (= (+ y (* (- 1) y00)) 0)))
 (let (($x385 (and $x72 $x95 (not (= (* ?x319 ?x90) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x160 (* (- 1) ?x36)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x83 (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63) (+ r ?x63)))))
 (let ((?x230 (+ (* y00 y00 (+ 1 q)) (* y00 y00 (+ r ?x63) (+ r ?x63)) ?x83)))
 (let (($x217 (= (* ?x230 (+ r ?x63 ?x64 ?x160 (* y00 (+ 1 q)))) 0)))
 (let (($x148 (not $x217)))
 (let (($x300 (= (+ r ?x64 ?x160 (* y00 q)) 0)))
 (let (($x235 (and (= (+ y00 (* (- 1) y)) 0) $x300 $x148)))
 (rewrite (= $x235 $x385)))))))))))))))))))))))
 ))
 (let (($x159 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x160 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x83 (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63) (+ r ?x63)))))
 (let ((?x230 (+ (* y00 y00 (+ 1 q)) (* y00 y00 (+ r ?x63) (+ r ?x63)) ?x83)))
 (let (($x217 (= (* ?x230 (+ r ?x63 ?x64 ?x160 (* y00 (+ 1 q)))) 0)))
 (let (($x148 (not $x217)))
 (let (($x300 (= (+ r ?x64 ?x160 (* y00 q)) 0)))
 (and (= (+ ?x63 y) 0) $x300 $x148)))))))))) :qid k!29))
 ))
 (let ((?x266 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x160 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x83 (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63) (+ r ?x63)))))
 (let ((?x230 (+ (* y00 y00 (+ 1 q)) (* y00 y00 (+ r ?x63) (+ r ?x63)) ?x83)))
 (let (($x217 (= (* ?x230 (+ r ?x63 ?x64 ?x160 (* y00 (+ 1 q)))) 0)))
 (let (($x148 (not $x217)))
 (let (($x300 (= (+ r ?x64 ?x160 (* y00 q)) 0)))
 (let (($x235 (and (= (+ y00 (* (- 1) y)) 0) $x300 $x148)))
 (let (($x289 (and (= (+ ?x63 y) 0) $x300 $x148)))
 (rewrite (= $x289 $x235))))))))))))))
 ))
 (let (($x58 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (- (+ (* ?x45 y00 y00) (* ?x42 ?x42 y00 y00)) (* ?x45 ?x42 ?x42 ?x42 y00))))
 (let (($x54 (= (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) ?x52) 0)))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not $x54))))))) :qid k!29))
 ))
 (let ((?x150 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x160 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) r00)))
 (let ((?x63 (* (- 1) y00)))
 (let ((?x83 (* (- 1) (* y00 (+ 1 q) (+ r ?x63) (+ r ?x63) (+ r ?x63)))))
 (let ((?x230 (+ (* y00 y00 (+ 1 q)) (* y00 y00 (+ r ?x63) (+ r ?x63)) ?x83)))
 (let (($x217 (= (* ?x230 (+ r ?x63 ?x64 ?x160 (* y00 (+ 1 q)))) 0)))
 (let (($x148 (not $x217)))
 (let (($x300 (= (+ r ?x64 ?x160 (* y00 q)) 0)))
 (let (($x289 (and (= (+ ?x63 y) 0) $x300 $x148)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x52 (- (+ (* ?x45 y00 y00) (* ?x42 ?x42 y00 y00)) (* ?x45 ?x42 ?x42 ?x42 y00))))
 (let (($x55 (not (= (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) ?x52) 0))))
 (let (($x57 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or $x55))))
 (rewrite (= $x57 $x289))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x173 (mp (mp @x59 (quant-intro (proof-bind ?x150) (= $x58 $x159)) $x159) (rewrite (= $x159 $x159)) $x159)))
 (let ((@x184 (mp (mp @x173 (quant-intro (proof-bind ?x266) (= $x159 $x288)) $x288) (quant-intro (proof-bind ?x306) (= $x288 $x286)) $x286)))
 (let ((@x178 (mp (mp~ @x184 (sk (~ $x286 $x272)) $x272) (rewrite (= $x272 $x68)) $x68)))
 (let ((@x214 (and-elim @x178 $x275)))
 (let ((@x220 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x275) $x116)) @x214 $x116)))
 (let (($x123 (<= ?x273 0)))
 (let ((@x209 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x275) $x123)) @x214 $x123)))
 (let (($x339 (not (<= ?x233 0))))
 (let (($x333 (>= ?x233 0)))
 (let ((@x236 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x283 $x339 (not $x333))) (and-elim @x178 $x291) (or $x339 (not $x333)))))
 (let ((@x125 (unit-resolution @x236 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x333)) @x209 @x220 false) $x333) $x339)))
 ((_ th-lemma arith farkas 1 1 1) @x125 @x209 @x220 false))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        14
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             74
 :arith-nonlinear-bounds    6
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.58
 :memory                    3.10
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1082680
 :num-checks                1
 :propagations              6
 :rlimit-count              1836
 :time                      0.01
 :total-time                0.01)
