unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x133 (* (- 1) x!1)))
 (let ((?x248 (+ y00 x00 (* (- 1) y!0) ?x133)))
 (let (($x270 (>= ?x248 0)))
 (let (($x255 (= ?x248 0)))
 (let ((?x275 (* (- 2) x!1)))
 (let ((?x61 (* (- 2) y!0)))
 (let ((?x117 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x59 (* 3 (* x!1 x!1))))
 (let ((?x101 (* (- 1) (* y!0 y!0 y!0))))
 (let ((?x73 (* (- 3) (* y!0 y!0))))
 (let ((?x205 (+ ?x73 (* (- 1) (* y!0 x!1 x!1 x!1)) ?x101 ?x59 ?x117 ?x61 (* y!0 y!0 y!0 x!1) (* 3 (* y!0 x!1 x!1)) (* 3 (* y!0 y!0 x!1)) ?x275)))
 (let ((?x260 (* ?x205 (+ 2 y!0 ?x133) (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x235 (= ?x260 0)))
 (let (($x261 (not $x235)))
 (let (($x259 (and $x255 $x261)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x103 (+ x!1 y!0 ?x53 ?x60)))
 (let ((?x134 (+ ?x275 ?x61 ?x117 (* 3 (* x!1 x!1 y!0)) (* (- 1) (* x!1 x!1 x!1 y!0)) ?x59 ?x73 ?x101 (* x!1 y!0 y!0 y!0) (* 3 (* x!1 y!0 y!0)))))
 (let (($x196 (and (= ?x103 0) (not (= (* ?x134 (+ 2 ?x133 y!0) ?x103) 0)))))
 (let (($x76 (exists ((x Int) (y Int) )(! (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let ((?x171 (* (- 1) x)))
 (let ((?x290 (+ 2 ?x171 y)))
 (let ((?x256 (* 3 (* x y y))))
 (let ((?x226 (* x y y y)))
 (let ((?x225 (* (- 1) (* y y y))))
 (let ((?x176 (* x x)))
 (let ((?x281 (* 3 ?x176)))
 (let ((?x163 (* (- 1) (* x x x y))))
 (let ((?x159 (* x x y)))
 (let ((?x250 (* 3 ?x159)))
 (let ((?x204 (* (- 1) (* x x x))))
 (let ((?x215 (* (- 2) x)))
 (let ((?x155 (+ ?x215 (* (- 2) y) ?x204 ?x250 ?x163 ?x281 (* (- 3) (* y y)) ?x225 ?x226 ?x256)))
 (let (($x79 (= ?x74 0)))
 (and $x79 (not (= (* ?x155 ?x290 ?x74) 0)))))))))))))))))))) :qid k!26))
 ))
 (let (($x332 (exists ((x Int) (y Int) )(! (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let ((?x171 (* (- 1) x)))
 (let ((?x290 (+ 2 ?x171 y)))
 (let ((?x256 (* 3 (* x y y))))
 (let ((?x226 (* x y y y)))
 (let ((?x225 (* (- 1) (* y y y))))
 (let ((?x221 (* y y)))
 (let ((?x222 (* (- 1) ?x221)))
 (let ((?x219 (* (- 1) (* y 1 y))))
 (let ((?x213 (* (- 1) (* y y 1))))
 (let ((?x210 (* (- 1) (* y 1))))
 (let ((?x207 (* (- 1) (* y 1 1))))
 (let ((?x176 (* x x)))
 (let ((?x281 (* 3 ?x176)))
 (let ((?x163 (* (- 1) (* x x x y))))
 (let ((?x159 (* x x y)))
 (let ((?x250 (* 3 ?x159)))
 (let ((?x204 (* (- 1) (* x x x))))
 (let ((?x215 (* (- 2) x)))
 (let ((?x109 (+ ?x215 ?x204 ?x250 ?x163 ?x281 ?x207 ?x210 ?x213 ?x219 ?x222 ?x225 ?x226 ?x256)))
 (let (($x79 (= ?x74 0)))
 (and $x79 (not (= (* ?x109 ?x290 ?x74) 0)))))))))))))))))))))))))) :qid k!26))
 ))
 (let ((?x149 (lambda ((x Int) (y Int) )(let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let ((?x171 (* (- 1) x)))
 (let ((?x290 (+ 2 ?x171 y)))
 (let ((?x256 (* 3 (* x y y))))
 (let ((?x226 (* x y y y)))
 (let ((?x225 (* (- 1) (* y y y))))
 (let ((?x176 (* x x)))
 (let ((?x281 (* 3 ?x176)))
 (let ((?x163 (* (- 1) (* x x x y))))
 (let ((?x159 (* x x y)))
 (let ((?x250 (* 3 ?x159)))
 (let ((?x204 (* (- 1) (* x x x))))
 (let ((?x215 (* (- 2) x)))
 (let ((?x155 (+ ?x215 (* (- 2) y) ?x204 ?x250 ?x163 ?x281 (* (- 3) (* y y)) ?x225 ?x226 ?x256)))
 (let (($x79 (= ?x74 0)))
 (let (($x145 (and $x79 (not (= (* ?x155 ?x290 ?x74) 0)))))
 (let ((?x221 (* y y)))
 (let ((?x222 (* (- 1) ?x221)))
 (let ((?x219 (* (- 1) (* y 1 y))))
 (let ((?x213 (* (- 1) (* y y 1))))
 (let ((?x210 (* (- 1) (* y 1))))
 (let ((?x207 (* (- 1) (* y 1 1))))
 (let ((?x109 (+ ?x215 ?x204 ?x250 ?x163 ?x281 ?x207 ?x210 ?x213 ?x219 ?x222 ?x225 ?x226 ?x256)))
 (let (($x56 (and $x79 (not (= (* ?x109 ?x290 ?x74) 0)))))
 (rewrite (= $x56 $x145)))))))))))))))))))))))))))))
 ))
 (let (($x178 (exists ((x Int) (y Int) )(! (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x137 (+ x ?x53 ?x60 y)))
 (let ((?x171 (* (- 1) x)))
 (let ((?x290 (+ 2 ?x171 y)))
 (let ((?x64 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x57 (+ ?x64 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (and (= ?x137 0) (not (= (* ?x57 ?x290 ?x137) 0)))))))))) :qid k!26))
 ))
 (let ((?x284 (lambda ((x Int) (y Int) )(let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let ((?x171 (* (- 1) x)))
 (let ((?x290 (+ 2 ?x171 y)))
 (let ((?x256 (* 3 (* x y y))))
 (let ((?x226 (* x y y y)))
 (let ((?x225 (* (- 1) (* y y y))))
 (let ((?x221 (* y y)))
 (let ((?x222 (* (- 1) ?x221)))
 (let ((?x219 (* (- 1) (* y 1 y))))
 (let ((?x213 (* (- 1) (* y y 1))))
 (let ((?x210 (* (- 1) (* y 1))))
 (let ((?x207 (* (- 1) (* y 1 1))))
 (let ((?x176 (* x x)))
 (let ((?x281 (* 3 ?x176)))
 (let ((?x163 (* (- 1) (* x x x y))))
 (let ((?x159 (* x x y)))
 (let ((?x250 (* 3 ?x159)))
 (let ((?x204 (* (- 1) (* x x x))))
 (let ((?x215 (* (- 2) x)))
 (let ((?x109 (+ ?x215 ?x204 ?x250 ?x163 ?x281 ?x207 ?x210 ?x213 ?x219 ?x222 ?x225 ?x226 ?x256)))
 (let (($x79 (= ?x74 0)))
 (let (($x56 (and $x79 (not (= (* ?x109 ?x290 ?x74) 0)))))
 (let ((?x137 (+ x ?x53 ?x60 y)))
 (let ((?x64 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x57 (+ ?x64 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let (($x183 (and (= ?x137 0) (not (= (* ?x57 ?x290 ?x137) 0)))))
 (rewrite (= $x183 $x56)))))))))))))))))))))))))))))))
 ))
 (let (($x50 (exists ((x Int) (y Int) )(! (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x38 (- 1)))
 (let ((?x45 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x38 ?x34 ?x34 ?x34 ?x39) (* ?x34 ?x39 ?x39 ?x39)) (+ (* ?x38 ?x34) y 1))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x45 0)))))))) :qid k!26))
 ))
 (let ((?x180 (lambda ((x Int) (y Int) )(let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x137 (+ x ?x53 ?x60 y)))
 (let ((?x171 (* (- 1) x)))
 (let ((?x290 (+ 2 ?x171 y)))
 (let ((?x64 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x57 (+ ?x64 (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let (($x183 (and (= ?x137 0) (not (= (* ?x57 ?x290 ?x137) 0)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x38 (- 1)))
 (let ((?x45 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x38 ?x34 ?x34 ?x34 ?x39) (* ?x34 ?x39 ?x39 ?x39)) (+ (* ?x38 ?x34) y 1))))
 (let (($x49 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x45 0))))))
 (rewrite (= $x49 $x183))))))))))))))))
 ))
 (let ((@x51 (asserted $x50)))
 (let ((@x189 (mp (mp @x51 (quant-intro (proof-bind ?x180) (= $x50 $x178)) $x178) (rewrite (= $x178 $x178)) $x178)))
 (let ((@x138 (mp (mp @x189 (quant-intro (proof-bind ?x284) (= $x178 $x332)) $x332) (quant-intro (proof-bind ?x149) (= $x332 $x76)) $x76)))
 (let ((@x84 (mp (mp~ @x138 (sk (~ $x76 $x196)) $x196) (rewrite (= $x196 $x259)) $x259)))
 (let ((@x246 (and-elim @x84 $x255)))
 (let ((@x200 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x255) $x270)) @x246 $x270)))
 (let (($x269 (<= ?x248 0)))
 (let ((@x234 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x255) $x269)) @x246 $x269)))
 (let (($x203 (not (>= ?x260 0))))
 (let (($x168 (<= ?x260 0)))
 (let ((@x217 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x235 (not $x168) $x203)) (and-elim @x84 $x261) (or (not $x168) $x203))))
 (let ((@x244 (unit-resolution @x217 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x168)) @x234 @x200 false) $x168) $x203)))
 ((_ th-lemma arith farkas 1 1 1) @x244 @x234 @x200 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             54
 :arith-nonlinear-bounds    4
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.59
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1101084
 :num-checks                1
 :propagations              4
 :rlimit-count              1656
 :time                      0.01
 :total-time                0.01)
