unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x226 (* (- 1) k!2)))
 (let ((?x257 (+ (* 3 n!0) ?x226 (* 3 (* n!0 n!0)))))
 (let (($x216 (<= ?x257 (- 1))))
 (let (($x256 (= ?x257 (- 1))))
 (let ((?x268 (+ k!2 c!3)))
 (let ((?x131 (+ m!1 k!2)))
 (let ((?x303 (+ 6 m!1)))
 (let ((?x338 (+ 1 n!0)))
 (let ((?x432 (* (- 3) (* ?x338 ?x338 ?x338 ?x338 ?x338 ?x303 ?x303 ?x131 ?x268 ?x268 ?x268))))
 (let ((?x454 (+ (* 3 (* ?x338 ?x338 ?x338 ?x303 ?x131 ?x131 ?x268 ?x268 ?x268)) ?x432 (* 3 (* ?x338 ?x338 ?x303 ?x131 ?x131 ?x268 ?x268 ?x268)) (* ?x338 ?x338 ?x338 ?x303 ?x303 ?x131 ?x131 ?x268 ?x268 ?x268) (* ?x338 ?x303 ?x131 ?x131 ?x268 ?x268 ?x268) (* (- 1) (* ?x338 ?x303 ?x131 ?x131 ?x131 ?x268 ?x268 ?x268)) (* (- 3) (* ?x338 ?x338 ?x338 ?x338 ?x303 ?x303 ?x131 ?x268 ?x268 ?x268)) (* (- 1) (* ?x338 ?x338 ?x338 ?x303 ?x303 ?x131 ?x268 ?x268 ?x268)))))
 (let (($x450 (= ?x454 0)))
 (let (($x443 (not $x450)))
 (let ((?x231 (+ (* 2 n!0) ?x226 (* (- 3) c!3) (* n!0 k!2))))
 (let (($x235 (= ?x231 (- 1))))
 (let ((?x330 (* k!2 k!2)))
 (let ((?x180 (+ (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) ?x330 (* (- 9) (* n!0 c!3)))))
 (let (($x176 (= ?x180 (- 4))))
 (let ((?x548 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x246 (= ?x548 (- 6))))
 (let (($x375 (and $x246 $x176 $x235 $x256 $x443)))
 (let ((?x248 (+ c!3 k!2)))
 (let ((?x228 (+ k!2 m!1)))
 (let ((?x345 (* 3 (* ?x338 ?x338 ?x338 ?x338 ?x338 ?x303 ?x303 ?x228 ?x248 ?x248 ?x248))))
 (let ((?x471 (+ ?x345 (* (- 3) (* ?x338 ?x338 ?x338 ?x303 ?x228 ?x228 ?x248 ?x248 ?x248)) (* ?x338 ?x303 ?x228 ?x228 ?x228 ?x248 ?x248 ?x248) (* ?x338 ?x338 ?x338 ?x303 ?x303 ?x228 ?x248 ?x248 ?x248) (* (- 3) (* ?x338 ?x338 ?x303 ?x228 ?x228 ?x248 ?x248 ?x248)) (* (- 1) (* ?x338 ?x338 ?x338 ?x303 ?x303 ?x228 ?x228 ?x248 ?x248 ?x248)) (* (- 1) (* ?x338 ?x303 ?x228 ?x228 ?x248 ?x248 ?x248)) (* 3 (* ?x338 ?x338 ?x338 ?x338 ?x303 ?x303 ?x228 ?x248 ?x248 ?x248)))))
 (let (($x134 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x190 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x330) (* 9 (* c!3 n!0)))))
 (let (($x98 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x190 4) $x134 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x471 0)))))
 (let (($x114 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x550 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 1) (* ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x486 (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x344 (* (- 3) (* ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x420 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x316 (* ?x309 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x371 (* (- 3) (* ?x309 ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x106 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x212 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x208 (= ?x212 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (+ ?x106 ?x371 ?x316 ?x420 ?x344 ?x486 ?x563 ?x550) 0)))))))))))))))))))))) :qid k!34))
 ))
 (let (($x215 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x316 (* ?x309 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x563 (* (- 1) (* ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x486 (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x420 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x344 (* (- 3) (* ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x550 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x371 (* (- 3) (* ?x309 ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x106 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let (($x201 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x130 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x285 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x285 (- 4)) $x130 $x201 (not (= (+ ?x106 ?x371 ?x550 ?x344 ?x420 ?x486 ?x563 ?x316) 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x476 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x550 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x563 (* (- 1) (* ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x486 (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x344 (* (- 3) (* ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x420 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x316 (* ?x309 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x371 (* (- 3) (* ?x309 ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x106 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x212 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x208 (= ?x212 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x115 (and $x124 $x208 $x260 $x298 (not (= (+ ?x106 ?x371 ?x316 ?x420 ?x344 ?x486 ?x563 ?x550) 0)))))
 (let (($x201 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x130 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x285 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x105 (and $x124 (= ?x285 (- 4)) $x130 $x201 (not (= (+ ?x106 ?x371 ?x550 ?x344 ?x420 ?x486 ?x563 ?x316) 0)))))
 (rewrite (= $x105 $x115)))))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (- (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x76 (+ ?x74 (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x80 (+ (- ?x76 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x84 (- (- ?x80 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71))))
 (let (($x88 (not (= (+ ?x84 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71)) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x88)))))))))))))))))) :qid k!34))
 ))
 (let ((?x95 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x306 (+ 6 m)))
 (let ((?x309 (+ 1 n)))
 (let ((?x316 (* ?x309 ?x306 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x563 (* (- 1) (* ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x486 (* (- 1) (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x420 (* ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x344 (* (- 3) (* ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x550 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x371 (* (- 3) (* ?x309 ?x309 ?x309 ?x306 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x106 (* 3 (* ?x309 ?x309 ?x309 ?x309 ?x309 ?x306 ?x306 ?x69 ?x68 ?x68 ?x68))))
 (let (($x201 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x130 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x285 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x105 (and $x124 (= ?x285 (- 4)) $x130 $x201 (not (= (+ ?x106 ?x371 ?x550 ?x344 ?x420 ?x486 ?x563 ?x316) 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (- (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71 ?x71) (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x76 (+ ?x74 (* 3 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x80 (+ (- ?x76 (* 3 ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x84 (- (- ?x80 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71))))
 (let (($x88 (not (= (+ ?x84 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x71)) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x88))))
 (rewrite (= $x90 $x105)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x302 (mp (mp @x92 (quant-intro (proof-bind ?x95) (= $x91 $x215)) $x215) (rewrite (= $x215 $x215)) $x215)))
 (let ((@x282 (mp~ (mp @x302 (quant-intro (proof-bind ?x476) (= $x215 $x114)) $x114) (sk (~ $x114 $x98)) $x98)))
 (let ((@x467 (mp @x282 (rewrite (= $x98 $x375)) $x375)))
 (let ((@x243 (and-elim @x467 $x256)))
 (let ((@x346 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x256) $x216)) @x243 $x216)))
 (let (($x101 (>= ?x257 (- 1))))
 (let ((@x421 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x256) $x101)) @x243 $x101)))
 (let (($x362 (<= ?x548 (- 6))))
 (let ((@x466 (and-elim @x467 $x246)))
 (let ((@x182 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x246) $x362)) @x466 $x362)))
 (let (($x266 (>= ?x548 (- 6))))
 (let ((@x487 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x246) $x266)) @x466 $x266)))
 (let (($x132 (<= ?x231 (- 1))))
 (let ((@x247 (and-elim @x467 $x235)))
 (let ((@x150 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x132)) @x247 $x132)))
 (let (($x258 (>= ?x231 (- 1))))
 (let ((@x225 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x235) $x258)) @x247 $x258)))
 (let (($x136 (<= ?x180 (- 4))))
 (let ((@x242 (and-elim @x467 $x176)))
 (let ((@x239 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x136)) @x242 $x136)))
 (let (($x251 (>= ?x180 (- 4))))
 (let ((@x417 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x176) $x251)) @x242 $x251)))
 (let (($x218 (not (<= ?x454 0))))
 (let (($x436 (>= ?x454 0)))
 (let ((@x217 ((_ th-lemma arith) (hypothesis (not $x436)) @x421 @x346 @x421 @x346 @x225 @x150 @x421 @x346 @x225 @x150 @x417 @x239 @x225 @x150 @x421 @x346 @x487 @x182 @x487 @x182 @x421 @x346 false)))
 (let ((@x273 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x450 $x218 (not $x436))) (and-elim @x467 $x443) (or $x218 (not $x436)))))
 ((_ th-lemma arith) (unit-resolution @x273 (lemma @x217 $x436) $x218) @x421 @x346 @x421 @x346 @x225 @x150 @x421 @x346 @x225 @x150 @x417 @x239 @x225 @x150 @x421 @x346 @x487 @x182 @x487 @x182 @x421 @x346 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        12
 :arith-assert-upper        24
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           10
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             135
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              8
 :arith-row-summations      10
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 15
 :del-clause                16
 :final-checks              8
 :max-memory                19.60
 :memory                    19.12
 :mk-bool-var               29
 :mk-clause                 16
 :num-allocs                538099
 :num-checks                1
 :propagations              12
 :rlimit-count              5955
 :time                      0.01
 :total-time                0.02)
