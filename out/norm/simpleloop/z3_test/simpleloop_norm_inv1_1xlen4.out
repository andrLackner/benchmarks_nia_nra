unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x562 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x1099 (<= ?x562 0)))
 (let (($x568 (= ?x562 0)))
 (let ((?x1412 (+ 1 y!0)))
 (let ((?x1411 (+ (- 1) x!1)))
 (let ((?x707 (* (- 2) (* ?x1411 ?x1411 ?x1411 ?x1412 ?x1412 ?x1412))))
 (let ((?x1325 (* x!1 x!1 x!1)))
 (let ((?x1324 (* (- 2) (* ?x1411 ?x1411 ?x1412 ?x1412 ?x1412 ?x1412))))
 (let ((?x949 (* x!1 x!1 y!0)))
 (let ((?x1291 (* (- 3) (* x!1 y!0))))
 (let ((?x708 (* (- 1) (* y!0 y!0))))
 (let ((?x953 (* (- 2) (* x!1 x!1))))
 (let ((?x518 (* 2 x00)))
 (let ((?x450 (* 2 y00)))
 (let ((?x116 (+ ?x450 ?x518 (* (- 12) (* y00 x!1 y!0 y!0)) (* 6 (* y00 y!0 y!0)) (* 2 (* y00 y!0 y!0 y!0)) (* (- 2) (* y00 x!1)) ?x953 ?x708 (* 7 (* x00 y!0)) (* (- 12) (* y00 x!1 y!0)) (* (- 2) (* x00 x!1)) ?x1291 ?x949 (* 6 (* y00 x!1 x!1 y!0 y!0)) (* 7 (* y00 y!0)) (* (- 12) (* x00 x!1 y!0)) (* 6 (* y00 x!1 x!1 y!0)) (* (- 4) (* y00 x!1 y!0 y!0 y!0)) (* y00 x!1 x!1) (* (- 12) (* x00 x!1 y!0 y!0)) (* (- 4) (* x00 x!1 y!0 y!0 y!0)) ?x1324 ?x1325 (* x00 x!1 x!1) (* 6 (* x00 y!0 y!0)) (* 2 (* x00 y!0 y!0 y!0)) (* 6 (* x00 x!1 x!1 y!0 y!0)) (* 6 (* x00 x!1 x!1 y!0)) (* 2 (* x00 x!1 x!1 y!0 y!0 y!0)) ?x707 (* 2 (* y00 x!1 x!1 y!0 y!0 y!0)))))
 (let (($x1088 (= ?x116 0)))
 (let (($x739 (not $x1088)))
 (let (($x1435 (and $x568 $x739)))
 (let ((?x710 (+ ?x450 ?x518 (* (- 1) (* x!1 1)) (* 6 (* x!1 x!1 y!0 y!0 x00)) ?x1291 (* 7 (* y!0 x00)) (* (- 2) (* x!1 x00)) (* x!1 x!1 x00) (* x!1 x!1 y00) (* 7 (* y!0 y00)) (* 6 (* x!1 x!1 y!0 y!0 y00)) (* (- 12) (* x!1 y!0 x00)) (* 6 (* y!0 y!0 x00)) (* (- 12) (* x!1 y!0 y!0 x00)) (* 2 (* y!0 y!0 y!0 x00)) (* (- 4) (* x!1 y!0 y!0 y!0 x00)) (* 6 (* x!1 x!1 y!0 y00)) ?x708 ?x953 ?x949 ?x707 (* (- 2) (* x!1 y00)) ?x1324 ?x1325 (* 6 (* x!1 x!1 y!0 x00)) (* 2 (* x!1 x!1 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 (- 1))) (* 6 (* y!0 y!0 y00)) (* 2 (* y!0 y!0 y!0 y00)) (* (- 4) (* x!1 y!0 y!0 y!0 y00)) (* 2 (* x!1 x!1 y!0 y!0 y!0 y00)) (* (- 12) (* x!1 y!0 y00)) (* (- 12) (* x!1 y!0 y!0 y00)))))
 (let (($x543 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x710 0)))))
 (let (($x155 (exists ((x Int) (y Int) )(! (let ((?x1322 (* x x x)))
 (let ((?x168 (+ 1 y)))
 (let ((?x235 (+ (- 1) x)))
 (let ((?x1008 (* (- 2) (* ?x235 ?x235 ?x168 ?x168 ?x168 ?x168))))
 (let ((?x1038 (* (- 2) (* ?x235 ?x235 ?x235 ?x168 ?x168 ?x168))))
 (let ((?x857 (* x x y)))
 (let ((?x851 (* (- 2) (* x x))))
 (let ((?x217 (* x x y00)))
 (let ((?x158 (* x x x00)))
 (let ((?x518 (* 2 x00)))
 (let ((?x450 (* 2 y00)))
 (let ((?x478 (+ ?x450 ?x518 (* (- 1) (* x 1)) (* 6 (* x x y y x00)) (* (- 3) (* x y)) (* 7 (* y x00)) (* (- 2) (* x x00)) ?x158 ?x217 (* 7 (* y y00)) (* 6 (* x x y y y00)) (* (- 12) (* x y x00)) (* 6 (* y y x00)) (* (- 12) (* x y y x00)) (* 2 (* y y y x00)) (* (- 4) (* x y y y x00)) (* 6 (* x x y y00)) (* (- 1) (* y y)) ?x851 ?x857 ?x1038 (* (- 2) (* x y00)) ?x1008 ?x1322 (* 6 (* x x y x00)) (* 2 (* x x y y y x00)) (* (- 1) (* x (- 1))) (* 6 (* y y y00)) (* 2 (* y y y y00)) (* (- 4) (* x y y y y00)) (* 2 (* x x y y y y00)) (* (- 12) (* x y y00)) (* (- 12) (* x y y y00)))))
 (let (($x92 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x92 (not (= ?x478 0)))))))))))))))) :qid k!26))
 ))
 (let (($x1213 (exists ((x Int) (y Int) )(! (let ((?x168 (+ 1 y)))
 (let ((?x235 (+ (- 1) x)))
 (let ((?x1038 (* (- 2) (* ?x235 ?x235 ?x235 ?x168 ?x168 ?x168))))
 (let ((?x1008 (* (- 2) (* ?x235 ?x235 ?x168 ?x168 ?x168 ?x168))))
 (let ((?x1367 (+ (* (- 1) (* ?x235 ?x168)) (* x00 ?x168) (* (- 1) (* x00 ?x235 ?x235)) (* (- 1) (* y00 ?x235 ?x235)) (* y00 ?x168) (* 2 (* x00 ?x235 ?x235 ?x168 ?x168 ?x168)) ?x1008 ?x1038 (* ?x235 ?x235 ?x168) (* ?x235 ?x235 ?x235) (* (- 1) (* ?x168 ?x168)) (* 2 (* y00 ?x235 ?x235 ?x168 ?x168 ?x168)))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1367 0)))))))) :qid k!26))
 ))
 (let ((?x1043 (lambda ((x Int) (y Int) )(let ((?x1322 (* x x x)))
 (let ((?x168 (+ 1 y)))
 (let ((?x235 (+ (- 1) x)))
 (let ((?x1008 (* (- 2) (* ?x235 ?x235 ?x168 ?x168 ?x168 ?x168))))
 (let ((?x1038 (* (- 2) (* ?x235 ?x235 ?x235 ?x168 ?x168 ?x168))))
 (let ((?x857 (* x x y)))
 (let ((?x851 (* (- 2) (* x x))))
 (let ((?x217 (* x x y00)))
 (let ((?x158 (* x x x00)))
 (let ((?x518 (* 2 x00)))
 (let ((?x450 (* 2 y00)))
 (let ((?x478 (+ ?x450 ?x518 (* (- 1) (* x 1)) (* 6 (* x x y y x00)) (* (- 3) (* x y)) (* 7 (* y x00)) (* (- 2) (* x x00)) ?x158 ?x217 (* 7 (* y y00)) (* 6 (* x x y y y00)) (* (- 12) (* x y x00)) (* 6 (* y y x00)) (* (- 12) (* x y y x00)) (* 2 (* y y y x00)) (* (- 4) (* x y y y x00)) (* 6 (* x x y y00)) (* (- 1) (* y y)) ?x851 ?x857 ?x1038 (* (- 2) (* x y00)) ?x1008 ?x1322 (* 6 (* x x y x00)) (* 2 (* x x y y y x00)) (* (- 1) (* x (- 1))) (* 6 (* y y y00)) (* 2 (* y y y y00)) (* (- 4) (* x y y y y00)) (* 2 (* x x y y y y00)) (* (- 12) (* x y y00)) (* (- 12) (* x y y y00)))))
 (let (($x92 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x464 (and $x92 (not (= ?x478 0)))))
 (let ((?x1367 (+ (* (- 1) (* ?x235 ?x168)) (* x00 ?x168) (* (- 1) (* x00 ?x235 ?x235)) (* (- 1) (* y00 ?x235 ?x235)) (* y00 ?x168) (* 2 (* x00 ?x235 ?x235 ?x168 ?x168 ?x168)) ?x1008 ?x1038 (* ?x235 ?x235 ?x168) (* ?x235 ?x235 ?x235) (* (- 1) (* ?x168 ?x168)) (* 2 (* y00 ?x235 ?x235 ?x168 ?x168 ?x168)))))
 (let (($x1307 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1367 0)))))
 (rewrite (= $x1307 $x464)))))))))))))))))))
 ))
 (let (($x63 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x43 (- (- (+ (* (- 1) ?x35 ?x36) (* x00 ?x36)) (* ?x35 ?x35 x00)) (* ?x35 ?x35 y00))))
 (let ((?x50 (- (+ ?x43 (* ?x36 y00) (* 2 ?x35 ?x35 x00 ?x36 ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x54 (+ (- ?x50 (* 2 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35))))
 (let ((?x58 (+ (- ?x54 (* ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 y00))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x58 0)))))))))) :qid k!26))
 ))
 (let ((?x1285 (lambda ((x Int) (y Int) )(let ((?x168 (+ 1 y)))
 (let ((?x235 (+ (- 1) x)))
 (let ((?x1038 (* (- 2) (* ?x235 ?x235 ?x235 ?x168 ?x168 ?x168))))
 (let ((?x1008 (* (- 2) (* ?x235 ?x235 ?x168 ?x168 ?x168 ?x168))))
 (let ((?x1367 (+ (* (- 1) (* ?x235 ?x168)) (* x00 ?x168) (* (- 1) (* x00 ?x235 ?x235)) (* (- 1) (* y00 ?x235 ?x235)) (* y00 ?x168) (* 2 (* x00 ?x235 ?x235 ?x168 ?x168 ?x168)) ?x1008 ?x1038 (* ?x235 ?x235 ?x168) (* ?x235 ?x235 ?x235) (* (- 1) (* ?x168 ?x168)) (* 2 (* y00 ?x235 ?x235 ?x168 ?x168 ?x168)))))
 (let (($x1307 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x1367 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x43 (- (- (+ (* (- 1) ?x35 ?x36) (* x00 ?x36)) (* ?x35 ?x35 x00)) (* ?x35 ?x35 y00))))
 (let ((?x50 (- (+ ?x43 (* ?x36 y00) (* 2 ?x35 ?x35 x00 ?x36 ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x54 (+ (- ?x50 (* 2 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36) (* ?x35 ?x35 ?x35))))
 (let ((?x58 (+ (- ?x54 (* ?x36 ?x36)) (* 2 ?x35 ?x35 ?x36 ?x36 ?x36 y00))))
 (let (($x62 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x58 0))))))
 (rewrite (= $x62 $x1307))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x1039 (mp (mp @x64 (quant-intro (proof-bind ?x1285) (= $x63 $x1213)) $x1213) (rewrite (= $x1213 $x1213)) $x1213)))
 (let ((@x702 (mp~ (mp @x1039 (quant-intro (proof-bind ?x1043) (= $x1213 $x155)) $x155) (sk (~ $x155 $x543)) $x543)))
 (let ((@x641 (mp @x702 (rewrite (= $x543 $x1435)) $x1435)))
 (let ((@x1351 (and-elim @x641 $x568)))
 (let ((@x1378 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x568) $x1099)) @x1351 $x1099)))
 (let (($x498 (>= ?x562 0)))
 (let ((@x1381 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x568) $x498)) @x1351 $x498)))
 (let (($x318 (not (>= ?x116 0))))
 (let (($x379 (<= ?x116 0)))
 (let ((@x389 (lemma ((_ th-lemma arith) (hypothesis (not $x379)) @x1381 @x1378 @x1381 @x1378 false) $x379)))
 (let ((@x302 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1088 (not $x379) $x318)) (and-elim @x641 $x739) (or (not $x379) $x318))))
 ((_ th-lemma arith) (unit-resolution @x302 @x389 $x318) @x1381 @x1378 @x1381 @x1378 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        9
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             274
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.70
 :memory                    19.21
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                559999
 :num-checks                1
 :propagations              4
 :rlimit-count              4627
 :time                      0.01
 :total-time                0.02)
