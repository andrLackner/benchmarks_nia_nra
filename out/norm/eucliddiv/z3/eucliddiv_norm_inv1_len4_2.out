unsat
((set-logic NIA)
(proof
(let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x43 ?x43 ?x43 y00)))
 (let ((?x52 (* ?x42 ?x42 ?x43 y00 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x42 y00)))
 (let ((?x49 (+ (- (+ (* (- 1) ?x42 ?x42 ?x43 ?x43 y00 y00) ?x45) ?x45) (* ?x42 ?x42 ?x43 ?x43 y00 y00))))
 (let ((?x53 (+ (- ?x49 ?x50) ?x52)))
 (let ((?x54 (- ?x53 ?x52)))
 (let ((?x55 (+ ?x54 ?x50)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (and $x33 $x41 $x58))))))))))))))) :qid k!29))
 ))
 (let (($x276 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x277 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x50 (* ?x42 ?x43 ?x43 ?x43 y00)))
 (let ((?x52 (* ?x42 ?x42 ?x43 y00 y00)))
 (let ((?x45 (* ?x42 ?x42 ?x42 y00)))
 (let ((?x49 (+ (- (+ (* (- 1) ?x42 ?x42 ?x43 ?x43 y00 y00) ?x45) ?x45) (* ?x42 ?x42 ?x43 ?x43 y00 y00))))
 (let ((?x53 (+ (- ?x49 ?x50) ?x52)))
 (let ((?x54 (- ?x53 ?x52)))
 (let ((?x55 (+ ?x54 ?x50)))
 (let (($x56 (= ?x55 0)))
 (let (($x57 (not $x56)))
 (let (($x58 (or $x57)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* (- 1) y00) y) 0)))
 (let (($x59 (and $x33 $x41 $x58)))
 (let (($x84 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x254 (= (+ (* (- 1) y00) y) 0)))
 (let (($x269 (and $x254 $x84 false)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x75 (+ r ?x65)))
 (let ((?x72 (+ 1 q)))
 (let ((?x220 (* y00 ?x72 ?x75 ?x75 ?x75)))
 (let ((?x229 (* (- 1) ?x220)))
 (let ((?x191 (+ ?x229 ?x220)))
 (let ((@x136 (rewrite (= ?x43 ?x75))))
 (let ((@x74 (rewrite (= ?x42 ?x72))))
 (let ((@x219 (monotonicity @x74 @x136 @x136 @x136 (= ?x50 (* ?x72 ?x75 ?x75 ?x75 y00)))))
 (let ((@x228 (trans @x219 (rewrite (= (* ?x72 ?x75 ?x75 ?x75 y00) ?x220)) (= ?x50 ?x220))))
 (let ((?x245 (* y00 y00 ?x72 ?x72 ?x75)))
 (let ((?x258 (+ ?x229 ?x245)))
 (let ((?x137 (+ ?x258 (* (- 1) ?x245))))
 (let ((@x243 (monotonicity @x74 @x74 @x136 (= ?x52 (* ?x72 ?x72 ?x75 y00 y00)))))
 (let ((@x257 (trans @x243 (rewrite (= (* ?x72 ?x72 ?x75 y00 y00) ?x245)) (= ?x52 ?x245))))
 (let ((@x114 (trans (monotonicity (rewrite (= ?x53 ?x258)) @x257 (= ?x54 (- ?x258 ?x245))) (rewrite (= (- ?x258 ?x245) ?x137)) (= ?x54 ?x137))))
 (let ((@x198 (monotonicity (trans @x114 (rewrite (= ?x137 ?x229)) (= ?x54 ?x229)) @x228 (= ?x55 ?x191))))
 (let ((@x420 (monotonicity (trans @x198 (rewrite (= ?x191 0)) $x56) (= $x56 (= 0 0)))))
 (let ((@x232 (monotonicity (trans @x420 (rewrite (= (= 0 0) true)) (= $x56 true)) (= $x57 (not true)))))
 (let ((@x209 (monotonicity (trans @x232 (rewrite (= (not true) false)) (= $x57 false)) (= $x58 (or false)))))
 (let ((@x271 (monotonicity (rewrite (= $x33 $x254)) (rewrite (= $x41 $x84)) (trans @x209 (rewrite (= (or false) false)) (= $x58 false)) (= $x59 $x269))))
 (trans @x271 (rewrite (= $x269 false)) (= $x59 false))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x294 (trans (quant-intro (proof-bind ?x277) (= $x60 $x276)) (elim-unused (= $x276 false)) (= $x60 false))))
 (let ((@x61 (asserted $x60)))
 (mp @x61 @x294 false))))))))

(:max-memory   3.41
 :memory       3.10
 :mk-bool-var  5
 :num-allocs   923431
 :rlimit-count 441
 :time         0.01
 :total-time   0.01)
