unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x186 (* (- 1) x!1)))
 (let ((?x596 (* (- 1) y!0)))
 (let ((?x327 (+ y00 x00 ?x596 ?x186)))
 (let (($x500 (>= ?x327 0)))
 (let (($x333 (= ?x327 0)))
 (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x308 (+ ?x72 ?x79 y!0 x!1)))
 (let ((?x176 (* 2 x!1)))
 (let ((?x561 (* y!0 x!1)))
 (let ((?x543 (* 4 ?x561)))
 (let ((?x552 (* (- 1) (* y!0 y!0 x!1 x!1))))
 (let ((?x522 (* x!1 x!1)))
 (let ((?x446 (* (- 1) ?x522)))
 (let ((?x152 (* (- 1) (* y!0 y!0))))
 (let ((?x564 (+ (* 2 (* y!0 y!0 x!1)) ?x152 ?x596 (* (- 2) (* y!0 x!1 x!1)) ?x446 ?x552 ?x543 ?x176)))
 (let ((?x518 (* 3 x!1)))
 (let ((?x121 (* 3 ?x561)))
 (let ((?x526 (* x!1 x!1 x!1)))
 (let ((?x122 (* (- 3) ?x522)))
 (let ((?x159 (* (- 2) y!0)))
 (let ((?x95 (* y!0 x!1 x!1 x!1)))
 (let ((?x530 (+ (- 2) ?x95 ?x159 (* (- 3) (* y!0 x!1 x!1)) ?x122 ?x526 ?x121 ?x518)))
 (let ((?x578 (* (+ (- 2) ?x596 ?x446 ?x561 ?x518) ?x530 ?x564 ?x308)))
 (let (($x392 (= ?x578 0)))
 (let (($x611 (not $x392)))
 (let ((?x397 (* (- 2) x!1)))
 (let ((?x372 (* 3 y!0)))
 (let ((?x529 (+ (- 2) (* (- 2) (* y!0 y!0 x!1)) ?x152 ?x372 (* 2 (* y!0 x!1 x!1)) ?x446 ?x552 ?x543 ?x397)))
 (let ((?x178 (* (- 3) x!1)))
 (let ((?x127 (* (- 1) ?x526)))
 (let ((?x440 (* (+ (- 2) y!0 ?x446 ?x561 ?x178) (+ ?x95 (* 3 (* y!0 x!1 x!1)) ?x122 ?x127 ?x121 ?x178) ?x529 ?x308)))
 (let (($x89 (= ?x440 0)))
 (let (($x295 (or (not $x89) $x611)))
 (let (($x362 (and $x333 $x295)))
 (let ((?x301 (+ x!1 y!0 ?x72 ?x79)))
 (let ((?x161 (* (- 1) (* x!1 x!1 y!0 y!0))))
 (let ((?x521 (* x!1 y!0)))
 (let ((?x442 (* 4 ?x521)))
 (let ((?x154 (+ (- 2) ?x397 ?x372 ?x442 ?x446 ?x152 (* (- 2) (* x!1 y!0 y!0)) ?x161 (* 2 (* x!1 x!1 y!0)))))
 (let ((?x150 (* x!1 x!1 x!1 y!0)))
 (let ((?x283 (* (- 1) (* x!1 x!1 1))))
 (let ((?x128 (+ ?x186 (* 3 ?x521) ?x446 (* (- 1) (* x!1 1 x!1)) (* 3 (* x!1 x!1 y!0)) (* (- 1) (* x!1 1)) ?x283 (* (- 1) (* x!1 1 1)) ?x150 ?x127)))
 (let ((?x531 (+ ?x176 ?x596 ?x442 ?x446 ?x152 (* 2 (* x!1 y!0 y!0)) ?x161 (* (- 2) (* x!1 x!1 y!0)))))
 (let ((?x527 (+ (- 2) ?x176 ?x159 (* 2 ?x521) (* (- 2) ?x522) (* (- 3) (* x!1 x!1 y!0)) (* (- 1) (* x!1 (- 1) 1)) ?x283 (* (- 1) (* x!1 (- 1) y!0)) ?x150 ?x526)))
 (let (($x113 (or (not (= (* (+ (- 2) ?x518 ?x596 ?x521 ?x446) ?x527 ?x531 ?x301) 0)) (not (= (* (+ (- 2) ?x178 y!0 ?x521 ?x446) ?x128 ?x154 ?x301) 0)))))
 (let (($x114 (and (= ?x301 0) $x113)))
 (let (($x257 (exists ((x Int) (y Int) )(! (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x93 (+ x y ?x72 ?x79)))
 (let ((?x302 (* (- 1) (* x x y y))))
 (let ((?x237 (* (- 1) (* y y))))
 (let ((?x157 (* x x)))
 (let ((?x189 (* (- 1) ?x157)))
 (let ((?x140 (* x y)))
 (let ((?x331 (* 4 ?x140)))
 (let ((?x534 (+ (- 2) (* (- 2) x) (* 3 y) ?x331 ?x189 ?x237 (* (- 2) (* x y y)) ?x302 (* 2 (* x x y)))))
 (let ((?x404 (* x x x)))
 (let ((?x591 (* (- 1) ?x404)))
 (let ((?x388 (* x x x y)))
 (let ((?x377 (* (- 1) (* x x 1))))
 (let ((?x259 (* x x y)))
 (let ((?x605 (* 3 ?x259)))
 (let ((?x604 (* 3 ?x140)))
 (let ((?x243 (+ (* (- 1) x) ?x604 ?x189 (* (- 1) (* x 1 x)) ?x605 (* (- 1) (* x 1)) ?x377 (* (- 1) (* x 1 1)) ?x388 ?x591)))
 (let ((?x463 (* (- 3) x)))
 (let ((?x462 (+ (- 2) ?x463 y ?x140 ?x189)))
 (let ((?x139 (* (- 1) y)))
 (let ((?x194 (* 2 x)))
 (let ((?x342 (+ ?x194 ?x139 ?x331 ?x189 ?x237 (* 2 (* x y y)) ?x302 (* (- 2) ?x259))))
 (let ((?x433 (+ (- 2) ?x194 (* (- 2) y) (* 2 ?x140) (* (- 2) ?x157) (* (- 3) ?x259) (* (- 1) (* x (- 1) 1)) ?x377 (* (- 1) (* x (- 1) y)) ?x388 ?x404)))
 (let ((?x205 (+ (- 2) (* 3 x) ?x139 ?x140 ?x189)))
 (let (($x536 (or (not (= (* ?x205 ?x433 ?x342 ?x93) 0)) (not (= (* ?x462 ?x243 ?x534 ?x93) 0)))))
 (let (($x98 (= ?x93 0)))
 (and $x98 $x536)))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x592 (exists ((x Int) (y Int) )(! (let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x570 (+ x ?x72 ?x79 y)))
 (let ((?x398 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x139 (* (- 1) y)))
 (let ((?x426 (+ 1 ?x139 (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x458 (+ (* (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ 1 x) (+ 1 x))))))
 (let ((?x323 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x465 (+ (- 1) ?x139 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x226 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x125 (or (not (= (* ?x226 ?x465 (+ 1 y ?x323) ?x570) 0)) (not (= (* ?x458 ?x426 (+ (- 1) y ?x398) ?x570) 0)))))
 (and (= ?x570 0) $x125)))))))))))) :qid k!27))
 ))
 (let ((?x503 (lambda ((x Int) (y Int) )(let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x93 (+ x y ?x72 ?x79)))
 (let ((?x302 (* (- 1) (* x x y y))))
 (let ((?x237 (* (- 1) (* y y))))
 (let ((?x157 (* x x)))
 (let ((?x189 (* (- 1) ?x157)))
 (let ((?x140 (* x y)))
 (let ((?x331 (* 4 ?x140)))
 (let ((?x534 (+ (- 2) (* (- 2) x) (* 3 y) ?x331 ?x189 ?x237 (* (- 2) (* x y y)) ?x302 (* 2 (* x x y)))))
 (let ((?x404 (* x x x)))
 (let ((?x591 (* (- 1) ?x404)))
 (let ((?x388 (* x x x y)))
 (let ((?x377 (* (- 1) (* x x 1))))
 (let ((?x259 (* x x y)))
 (let ((?x605 (* 3 ?x259)))
 (let ((?x604 (* 3 ?x140)))
 (let ((?x243 (+ (* (- 1) x) ?x604 ?x189 (* (- 1) (* x 1 x)) ?x605 (* (- 1) (* x 1)) ?x377 (* (- 1) (* x 1 1)) ?x388 ?x591)))
 (let ((?x463 (* (- 3) x)))
 (let ((?x462 (+ (- 2) ?x463 y ?x140 ?x189)))
 (let ((?x139 (* (- 1) y)))
 (let ((?x194 (* 2 x)))
 (let ((?x342 (+ ?x194 ?x139 ?x331 ?x189 ?x237 (* 2 (* x y y)) ?x302 (* (- 2) ?x259))))
 (let ((?x433 (+ (- 2) ?x194 (* (- 2) y) (* 2 ?x140) (* (- 2) ?x157) (* (- 3) ?x259) (* (- 1) (* x (- 1) 1)) ?x377 (* (- 1) (* x (- 1) y)) ?x388 ?x404)))
 (let ((?x205 (+ (- 2) (* 3 x) ?x139 ?x140 ?x189)))
 (let (($x536 (or (not (= (* ?x205 ?x433 ?x342 ?x93) 0)) (not (= (* ?x462 ?x243 ?x534 ?x93) 0)))))
 (let (($x98 (= ?x93 0)))
 (let (($x514 (and $x98 $x536)))
 (let ((?x570 (+ x ?x72 ?x79 y)))
 (let ((?x398 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x426 (+ 1 ?x139 (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x458 (+ (* (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ 1 x) (+ 1 x))))))
 (let ((?x323 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x465 (+ (- 1) ?x139 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x226 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x125 (or (not (= (* ?x226 ?x465 (+ 1 y ?x323) ?x570) 0)) (not (= (* ?x458 ?x426 (+ (- 1) y ?x398) ?x570) 0)))))
 (let (($x607 (and (= ?x570 0) $x125)))
 (rewrite (= $x607 $x514))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x69 (exists ((x Int) (y Int) )(! (let ((?x63 (+ (* (- 1) (- y 1)) (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x54 (- y 1)))
 (let ((?x64 (* (+ (- (- (+ x 1) y00) x00) ?x54) (- (* (+ x 1) ?x54) (* (+ x 1) (+ x 1))) (- ?x54 (* (+ x 1) (+ x 1) ?x54 ?x54)) ?x63)))
 (let ((?x47 (+ (* (- 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x38 (+ y 1)))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) (- (* (- x 1) ?x38) (* (- x 1) (- x 1))) (- ?x38 (* (- x 1) (- x 1) ?x38 ?x38)) ?x47)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)) (not (= ?x64 0)))))))))) :qid k!27))
 ))
 (let ((?x594 (lambda ((x Int) (y Int) )(let ((?x79 (* (- 1) x00)))
 (let ((?x72 (* (- 1) y00)))
 (let ((?x570 (+ x ?x72 ?x79 y)))
 (let ((?x398 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x139 (* (- 1) y)))
 (let ((?x426 (+ 1 ?x139 (* (+ (- 1) y) (+ 1 x) (+ 1 x) (+ 1 x)))))
 (let ((?x458 (+ (* (+ (- 1) y) (+ 1 x)) (* (- 1) (* (+ 1 x) (+ 1 x))))))
 (let ((?x323 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x465 (+ (- 1) ?x139 (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)))))
 (let ((?x226 (+ (* (+ (- 1) x) (+ 1 y)) (* (- 1) (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x125 (or (not (= (* ?x226 ?x465 (+ 1 y ?x323) ?x570) 0)) (not (= (* ?x458 ?x426 (+ (- 1) y ?x398) ?x570) 0)))))
 (let (($x607 (and (= ?x570 0) $x125)))
 (let ((?x63 (+ (* (- 1) (- y 1)) (* (+ x 1) (+ x 1) (+ x 1) (- y 1)))))
 (let ((?x54 (- y 1)))
 (let ((?x64 (* (+ (- (- (+ x 1) y00) x00) ?x54) (- (* (+ x 1) ?x54) (* (+ x 1) (+ x 1))) (- ?x54 (* (+ x 1) (+ x 1) ?x54 ?x54)) ?x63)))
 (let ((?x47 (+ (* (- 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x38 (+ y 1)))
 (let ((?x48 (* (+ (- (- (- x 1) y00) x00) y 1) (- (* (- x 1) ?x38) (* (- x 1) (- x 1))) (- ?x38 (* (- x 1) (- x 1) ?x38 ?x38)) ?x47)))
 (let (($x68 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)) (not (= ?x64 0))))))
 (rewrite (= $x68 $x607))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x579 (mp (mp @x70 (quant-intro (proof-bind ?x594) (= $x69 $x592)) $x592) (rewrite (= $x592 $x592)) $x592)))
 (let ((@x606 (mp~ (mp @x579 (quant-intro (proof-bind ?x503) (= $x592 $x257)) $x257) (sk (~ $x257 $x114)) $x114)))
 (let ((@x345 (mp @x606 (rewrite (= $x114 $x362)) $x362)))
 (let ((@x560 (and-elim @x345 $x333)))
 (let ((@x99 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x333) $x500)) @x560 $x500)))
 (let (($x519 (<= ?x327 0)))
 (let ((@x556 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x333) $x519)) @x560 $x519)))
 (let (($x75 (not (<= ?x578 0))))
 (let (($x84 (>= ?x578 0)))
 (let (($x77 (>= ?x440 0)))
 (let (($x214 (<= ?x440 0)))
 (let ((@x92 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x89 (not $x214) (not $x77))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x214)) @x556 @x99 false) $x214) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x77)) @x556 @x99 false) $x77) $x89)))
 (let ((@x94 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x392 $x75 (not $x84))) (unit-resolution (and-elim @x345 $x295) @x92 $x611) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x84)) @x556 @x99 false) $x84) $x75)))
 ((_ th-lemma arith farkas 1 1 1) @x94 @x556 @x99 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             144
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.60
 :memory                    19.09
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                509052
 :num-checks                1
 :propagations              14
 :rlimit-count              2665
 :time                      0.01
 :total-time                0.02)
