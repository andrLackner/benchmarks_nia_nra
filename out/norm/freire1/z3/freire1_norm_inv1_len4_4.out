unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x761 (* (- 1) r!1)))
 (let ((?x1231 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x934 (* (- 1) ?x36)))
 (let ((?x888 (* (- 2) x00)))
 (let ((?x1570 (+ r00 ?x888 ?x934 ?x1231 ?x761 (* 2 x!0))))
 (let (($x670 (<= ?x1570 0)))
 (let (($x1856 (= ?x1570 0)))
 (let ((?x1893 (* r!1 r!1 r!1)))
 (let ((?x641 (* (- 1) ?x1231)))
 (let ((?x121 (+ ?x761 x!0)))
 (let ((?x764 (+ 1 r!1)))
 (let ((?x784 (* ?x764 ?x764 ?x764 ?x764 ?x764 ?x121 ?x121 ?x121)))
 (let ((?x779 (* ?x764 ?x764 ?x764 ?x764 ?x121 ?x121 ?x121)))
 (let ((?x1008 (+ (* 3 (* r00 r!1 r!1 r!1 r!1 x!0 x!0)) (* (- 9) (* r00 r00 r!1 r!1 x!0 x!0)) (* (- 1) (* r00 x!0 x!0 x!0)) (* 6 (* x00 r!1 r!1 r!1 r!1 r!1 x!0)) (* 3 (* r!1 x!0)) (* 9 (* r00 r!1 r!1 x!0 x!0)) (* (- 1) (* r!1 r!1 x!0)) (* 9 (* r00 r!1 r!1 r!1 x!0 x!0)) (* 3 (* r00 r00 r!1 r!1 x!0 x!0 x!0)) (* 3 (* r00 r00 r!1 r!1 x!0)) (* (- 2) (* x00 r!1)) (* (- 1) (* r00 x!0)) (* r00 r00 r!1 r!1 r!1 x!0 x!0 x!0) (* r00 r!1 r!1 r!1 r!1 r!1 r!1) (* 3 (* r00 r00 r!1 x!0 x!0 x!0)) (* (- 1) (* r00 r00 r!1 r!1 r!1)) (* (- 2) (* x!0 x!0)) (* (- 3) (* r00 r!1 r!1 x!0)) (* (- 9) (* r00 r!1 r!1 r!1 x!0)) (* (- 9) (* r00 r!1 r!1 r!1 r!1 x!0)) (* 3 (* r00 r!1 r!1 r!1 r!1)) (* (- 2) (* ?x764 ?x764 ?x764 ?x121 ?x121 ?x121 ?x121)) (* 3 (* r00 r00 r!1 r!1 r!1 r!1 r!1 x!0)) (* (- 6) (* x00 r!1 r!1 r!1 r!1 x!0 x!0)) (* (- 3) (* r00 r!1 x!0 x!0 x!0)) (* (- 3) (* r00 r!1 r!1 x!0 x!0 x!0)) (* 9 (* r00 r00 r!1 r!1 r!1 x!0)) (* (- 18) (* x00 r!1 r!1 r!1 x!0 x!0)) (* r00 r00 x!0 x!0 x!0) (* r00 r!1) ?x779 (* (- 1) ?x784) (* r00 r!1 r!1 r!1) (* 18 (* x00 r!1 r!1 r!1 r!1 x!0)) (* (- 1) (* r00 r!1 r!1 r!1 x!0 x!0 x!0)) (* (- 3) (* r00 r00 r!1 x!0 x!0)) (* 18 (* x00 r!1 r!1 r!1 x!0)) (* (- 3) (* r00 r00 r!1 r!1 r!1 r!1 r!1)) (* (- 9) (* r00 r00 r!1 r!1 r!1 x!0 x!0)) (* (- 3) (* r00 r!1 r!1 r!1 r!1 r!1 x!0)) (* 3 (* r00 r!1 x!0 x!0)) (* (- 3) (* r00 r00 r!1 r!1 r!1 r!1 x!0 x!0)) (* (- 2) (* x00 r!1 r!1 r!1 r!1 r!1 r!1)) (* (- 18) (* x00 r!1 r!1 x!0 x!0)) (* (- 3) (* r00 r00 r!1 r!1 r!1 r!1)) (* r00 r00 x!0) (* 6 (* x00 r!1 r!1 x!0)) ?x641 (* (- 1) (* r00 r00 r!1 r!1 r!1 r!1 r!1 r!1)) (* (- 2) (* x00 r!1 r!1 r!1)) (* 9 (* r00 r00 r!1 r!1 r!1 r!1 x!0)) (* (- 1) (* r00 r00 r!1)) (* (- 6) (* x00 r!1 r!1 r!1 r!1 r!1)) (* 2 (* x00 x!0)) (* 3 (* r00 r!1 r!1 r!1 r!1 r!1)) (* 2 (* x00 r!1 r!1 r!1 x!0 x!0 x!0)) ?x1893 (* (- 6) (* x00 r!1 r!1 r!1 r!1)) (* 2 (* x00 x!0 x!0 x!0)) (* 6 (* x00 r!1 x!0 x!0 x!0)) (* 6 (* x00 r!1 r!1 x!0 x!0 x!0)) (* (- 6) (* x00 r!1 x!0 x!0)))))
 (let (($x297 (= ?x1008 0)))
 (let (($x604 (not $x297)))
 (let (($x1946 (and $x1856 $x604)))
 (let ((?x125 (* r!1 r!1 x!0)))
 (let ((?x490 (+ ?x1231 (* (- 2) (* x!0 x!0 x!0 x00)) (* (- 6) (* r!1 x!0 x!0 x!0 x00)) (* (- 6) (* r!1 r!1 x!0 x!0 x!0 x00)) (* (- 2) (* r!1 r!1 r!1 x!0 x!0 x!0 x00)) (* (- 3) (* r!1 x!0)) ?x125 (* (- 1) ?x1893) (* (- 1) (* r!1 r!1 r!1 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 r!1 r00)) (* (- 1) (* r!1 r!1 r!1 r!1 r!1 r!1 r00)) (* 3 (* r!1 r!1 x!0 r00)) (* 9 (* r!1 r!1 r!1 x!0 r00)) (* 9 (* r!1 r!1 r!1 r!1 x!0 r00)) (* 3 (* r!1 r!1 r!1 r!1 r!1 x!0 r00)) (* (- 3) (* r!1 x!0 x!0 r00)) (* (- 9) (* r!1 r!1 x!0 x!0 r00)) (* (- 9) (* r!1 r!1 r!1 x!0 x!0 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 x!0 x!0 r00)) (* x!0 x!0 x!0 r00) (* 3 (* r!1 x!0 x!0 x!0 r00)) (* 3 (* r!1 r!1 x!0 x!0 x!0 r00)) (* r!1 r!1 r!1 x!0 x!0 x!0 r00) (* 2 (* r!1 x00)) (* x!0 r00) (* (- 1) (* r!1 r00)) (* (- 1) ?x779) ?x784 (* 2 (* x!0 x!0)) (* 2 (* ?x764 ?x764 ?x764 ?x121 ?x121 ?x121 ?x121)) (* r!1 r00 r00) (* (- 1) (* x!0 r00 r00)) (* (- 2) (* x!0 x00)) (* 6 (* r!1 r!1 r!1 r!1 r!1 x00)) (* (- 6) (* r!1 r!1 x!0 x00)) (* 18 (* r!1 r!1 x!0 x!0 x00)) (* 6 (* r!1 r!1 r!1 r!1 x!0 x!0 x00)) (* r!1 r!1 r!1 r00 r00) (* 3 (* r!1 r!1 r!1 r!1 r00 r00)) (* 3 (* r!1 r!1 r!1 r!1 r!1 r00 r00)) (* 2 (* r!1 r!1 r!1 x00)) (* r!1 r!1 r!1 r!1 r!1 r!1 r00 r00) (* 6 (* r!1 r!1 r!1 r!1 x00)) (* (- 3) (* r!1 r!1 x!0 r00 r00)) (* (- 9) (* r!1 r!1 r!1 x!0 r00 r00)) (* (- 9) (* r!1 r!1 r!1 r!1 x!0 r00 r00)) (* (- 3) (* r!1 r!1 r!1 r!1 r!1 x!0 r00 r00)) (* 2 (* r!1 r!1 r!1 r!1 r!1 r!1 x00)) (* (- 18) (* r!1 r!1 r!1 x!0 x00)) (* (- 18) (* r!1 r!1 r!1 r!1 x!0 x00)) (* 3 (* r!1 x!0 x!0 r00 r00)) (* 9 (* r!1 r!1 x!0 x!0 r00 r00)) (* (- 6) (* r!1 r!1 r!1 r!1 r!1 x!0 x00)) (* 9 (* r!1 r!1 r!1 x!0 x!0 r00 r00)) (* 3 (* r!1 r!1 r!1 r!1 x!0 x!0 r00 r00)) (* 6 (* r!1 x!0 x!0 x00)) (* 18 (* r!1 r!1 r!1 x!0 x!0 x00)) (* (- 1) (* x!0 x!0 x!0 r00 r00)) (* (- 3) (* r!1 x!0 x!0 x!0 r00 r00)) (* (- 3) (* r!1 r!1 x!0 x!0 x!0 r00 r00)) (* (- 1) (* r!1 r!1 r!1 x!0 x!0 x!0 r00 r00)))))
 (let (($x479 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x641 (* 2 x00) ?x36) 0)))
 (let (($x872 (and $x479 (not (= ?x490 0)))))
 (let (($x907 (exists ((r Int) (x Int) )(! (let ((?x1728 (* (- 1) (* r r r x x x r00 r00))))
 (let ((?x1727 (* (- 3) (* r r x x x r00 r00))))
 (let ((?x1726 (* (- 3) (* r x x x r00 r00))))
 (let ((?x1725 (* (- 1) (* x x x r00 r00))))
 (let ((?x1724 (* 3 (* r r r r x x r00 r00))))
 (let ((?x1723 (* 9 (* r r r x x r00 r00))))
 (let ((?x1722 (* 9 (* r r x x r00 r00))))
 (let ((?x1721 (* 3 (* r x x r00 r00))))
 (let ((?x1720 (* (- 3) (* r r r r r x r00 r00))))
 (let ((?x1719 (* (- 9) (* r r r r x r00 r00))))
 (let ((?x1718 (* (- 9) (* r r r x r00 r00))))
 (let ((?x1717 (* (- 3) (* r r x r00 r00))))
 (let ((?x1290 (* r r r r r r r00 r00)))
 (let ((?x1716 (* 3 (* r r r r r r00 r00))))
 (let ((?x1715 (* 3 (* r r r r r00 r00))))
 (let ((?x1244 (* r r r r00 r00)))
 (let ((?x1714 (* (- 2) (* x x00))))
 (let ((?x1712 (* (- 1) (* x r00 r00))))
 (let ((?x1137 (* r r00 r00)))
 (let ((?x80 (* (- 1) r)))
 (let ((?x144 (+ ?x80 x)))
 (let ((?x138 (+ 1 r)))
 (let ((?x1711 (* 2 (* ?x138 ?x138 ?x138 ?x144 ?x144 ?x144 ?x144))))
 (let ((?x1027 (* 2 (* x x))))
 (let ((?x1013 (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x144 ?x144 ?x144)))
 (let ((?x1710 (* (- 1) (* ?x138 ?x138 ?x138 ?x138 ?x144 ?x144 ?x144))))
 (let ((?x901 (* (- 1) (* r r00))))
 (let ((?x903 (* x r00)))
 (let ((?x837 (* r r r x x x r00)))
 (let ((?x858 (* 3 (* r r x x x r00))))
 (let ((?x857 (* 3 (* r x x x r00))))
 (let ((?x811 (* x x x r00)))
 (let ((?x856 (* (- 3) (* r r r r x x r00))))
 (let ((?x855 (* (- 9) (* r r r x x r00))))
 (let ((?x854 (* (- 9) (* r r x x r00))))
 (let ((?x852 (* (- 3) (* r x x r00))))
 (let ((?x851 (* 3 (* r r r r r x r00))))
 (let ((?x850 (* 9 (* r r r r x r00))))
 (let ((?x849 (* 9 (* r r r x r00))))
 (let ((?x847 (* 3 (* r r x r00))))
 (let ((?x521 (* (- 1) (* r r r r r r r00))))
 (let ((?x845 (* (- 3) (* r r r r r r00))))
 (let ((?x844 (* (- 3) (* r r r r r00))))
 (let ((?x475 (* (- 1) (* r r r r00))))
 (let ((?x343 (* (- 1) (* r r r))))
 (let ((?x334 (* r r x)))
 (let ((?x1709 (* (- 3) (* r x))))
 (let ((?x1708 (* (- 2) (* r r r x x x x00))))
 (let ((?x1701 (* (- 2) (* x x x x00))))
 (let ((?x30 (* r r)))
 (let ((?x2114 (+ ?x30 ?x1701 (* (- 6) (* r x x x x00)) (* (- 6) (* r r x x x x00)) ?x1708 ?x1709 ?x334 ?x343 ?x475 ?x844 ?x845 ?x521 ?x847 ?x849 ?x850 ?x851 ?x852 ?x854 ?x855 ?x856 ?x811 ?x857 ?x858 ?x837 (* 2 (* r x00)) ?x903 ?x901 ?x1710 ?x1013 ?x1027 ?x1711 ?x1137 ?x1712 ?x1714 (* 6 (* r r r r r x00)) (* (- 6) (* r r x x00)) (* 18 (* r r x x x00)) (* 6 (* r r r r x x x00)) ?x1244 ?x1715 ?x1716 (* 2 (* r r r x00)) ?x1290 (* 6 (* r r r r x00)) ?x1717 ?x1718 ?x1719 ?x1720 (* 2 (* r r r r r r x00)) (* (- 18) (* r r r x x00)) (* (- 18) (* r r r r x x00)) ?x1721 ?x1722 (* (- 6) (* r r r r r x x00)) ?x1723 ?x1724 (* 6 (* r x x x00)) (* 18 (* r r r x x x00)) ?x1725 ?x1726 ?x1727 ?x1728)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x131 (* (- 1) ?x30)))
 (let ((?x130 (* (- 1) r00)))
 (let ((?x129 (* (- 2) x)))
 (let (($x133 (= (+ r ?x129 ?x130 ?x131 ?x35 ?x36) 0)))
 (and $x133 (not (= ?x2114 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x889 (exists ((r Int) (x Int) )(! (let ((?x80 (* (- 1) r)))
 (let ((?x878 (+ x ?x80)))
 (let ((?x138 (+ 1 r)))
 (let ((?x1441 (+ (* 2 (* x00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x878) (* (- 1) (* ?x138 ?x138 ?x878)) (* (- 1) (* r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* (- 2) (* ?x138 ?x138 ?x138 ?x878 ?x878 ?x878 ?x878)) (* (- 1) (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878) (* (- 2) (* ?x878 ?x878)) (* (- 1) (* r00 ?x878)) (* r00 r00 ?x878) (* 2 (* x00 ?x878)) (* r00 r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878))))
 (let (($x884 (not (= ?x1441 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x129 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x131 (* (- 1) ?x30)))
 (let ((?x130 (* (- 1) r00)))
 (and (= (+ r ?x130 ?x131 ?x129 ?x35 ?x36) 0) $x884)))))))))))) :qid k!26))
 ))
 (let ((?x913 (lambda ((r Int) (x Int) )(let ((?x1728 (* (- 1) (* r r r x x x r00 r00))))
 (let ((?x1727 (* (- 3) (* r r x x x r00 r00))))
 (let ((?x1726 (* (- 3) (* r x x x r00 r00))))
 (let ((?x1725 (* (- 1) (* x x x r00 r00))))
 (let ((?x1724 (* 3 (* r r r r x x r00 r00))))
 (let ((?x1723 (* 9 (* r r r x x r00 r00))))
 (let ((?x1722 (* 9 (* r r x x r00 r00))))
 (let ((?x1721 (* 3 (* r x x r00 r00))))
 (let ((?x1720 (* (- 3) (* r r r r r x r00 r00))))
 (let ((?x1719 (* (- 9) (* r r r r x r00 r00))))
 (let ((?x1718 (* (- 9) (* r r r x r00 r00))))
 (let ((?x1717 (* (- 3) (* r r x r00 r00))))
 (let ((?x1290 (* r r r r r r r00 r00)))
 (let ((?x1716 (* 3 (* r r r r r r00 r00))))
 (let ((?x1715 (* 3 (* r r r r r00 r00))))
 (let ((?x1244 (* r r r r00 r00)))
 (let ((?x1714 (* (- 2) (* x x00))))
 (let ((?x1712 (* (- 1) (* x r00 r00))))
 (let ((?x1137 (* r r00 r00)))
 (let ((?x80 (* (- 1) r)))
 (let ((?x144 (+ ?x80 x)))
 (let ((?x138 (+ 1 r)))
 (let ((?x1711 (* 2 (* ?x138 ?x138 ?x138 ?x144 ?x144 ?x144 ?x144))))
 (let ((?x1027 (* 2 (* x x))))
 (let ((?x1013 (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x144 ?x144 ?x144)))
 (let ((?x1710 (* (- 1) (* ?x138 ?x138 ?x138 ?x138 ?x144 ?x144 ?x144))))
 (let ((?x901 (* (- 1) (* r r00))))
 (let ((?x903 (* x r00)))
 (let ((?x837 (* r r r x x x r00)))
 (let ((?x858 (* 3 (* r r x x x r00))))
 (let ((?x857 (* 3 (* r x x x r00))))
 (let ((?x811 (* x x x r00)))
 (let ((?x856 (* (- 3) (* r r r r x x r00))))
 (let ((?x855 (* (- 9) (* r r r x x r00))))
 (let ((?x854 (* (- 9) (* r r x x r00))))
 (let ((?x852 (* (- 3) (* r x x r00))))
 (let ((?x851 (* 3 (* r r r r r x r00))))
 (let ((?x850 (* 9 (* r r r r x r00))))
 (let ((?x849 (* 9 (* r r r x r00))))
 (let ((?x847 (* 3 (* r r x r00))))
 (let ((?x521 (* (- 1) (* r r r r r r r00))))
 (let ((?x845 (* (- 3) (* r r r r r r00))))
 (let ((?x844 (* (- 3) (* r r r r r00))))
 (let ((?x475 (* (- 1) (* r r r r00))))
 (let ((?x343 (* (- 1) (* r r r))))
 (let ((?x334 (* r r x)))
 (let ((?x1709 (* (- 3) (* r x))))
 (let ((?x1708 (* (- 2) (* r r r x x x x00))))
 (let ((?x1701 (* (- 2) (* x x x x00))))
 (let ((?x30 (* r r)))
 (let ((?x2114 (+ ?x30 ?x1701 (* (- 6) (* r x x x x00)) (* (- 6) (* r r x x x x00)) ?x1708 ?x1709 ?x334 ?x343 ?x475 ?x844 ?x845 ?x521 ?x847 ?x849 ?x850 ?x851 ?x852 ?x854 ?x855 ?x856 ?x811 ?x857 ?x858 ?x837 (* 2 (* r x00)) ?x903 ?x901 ?x1710 ?x1013 ?x1027 ?x1711 ?x1137 ?x1712 ?x1714 (* 6 (* r r r r r x00)) (* (- 6) (* r r x x00)) (* 18 (* r r x x x00)) (* 6 (* r r r r x x x00)) ?x1244 ?x1715 ?x1716 (* 2 (* r r r x00)) ?x1290 (* 6 (* r r r r x00)) ?x1717 ?x1718 ?x1719 ?x1720 (* 2 (* r r r r r r x00)) (* (- 18) (* r r r x x00)) (* (- 18) (* r r r r x x00)) ?x1721 ?x1722 (* (- 6) (* r r r r r x x00)) ?x1723 ?x1724 (* 6 (* r x x x00)) (* 18 (* r r r x x x00)) ?x1725 ?x1726 ?x1727 ?x1728)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x131 (* (- 1) ?x30)))
 (let ((?x130 (* (- 1) r00)))
 (let ((?x129 (* (- 2) x)))
 (let (($x133 (= (+ r ?x129 ?x130 ?x131 ?x35 ?x36) 0)))
 (let (($x910 (and $x133 (not (= ?x2114 0)))))
 (let ((?x878 (+ x ?x80)))
 (let ((?x1441 (+ (* 2 (* x00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x878) (* (- 1) (* ?x138 ?x138 ?x878)) (* (- 1) (* r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* (- 2) (* ?x138 ?x138 ?x138 ?x878 ?x878 ?x878 ?x878)) (* (- 1) (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878) (* (- 2) (* ?x878 ?x878)) (* (- 1) (* r00 ?x878)) (* r00 r00 ?x878) (* 2 (* x00 ?x878)) (* r00 r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878))))
 (let (($x884 (not (= ?x1441 0))))
 (let (($x882 (and (= (+ r ?x130 ?x131 ?x129 ?x35 ?x36) 0) $x884)))
 (rewrite (= $x882 $x910)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x885 (exists ((r Int) (x Int) )(! (let ((?x80 (* (- 1) r)))
 (let ((?x878 (+ x ?x80)))
 (let ((?x138 (+ 1 r)))
 (let ((?x1441 (+ (* 2 (* x00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x878) (* (- 1) (* ?x138 ?x138 ?x878)) (* (- 1) (* r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* (- 2) (* ?x138 ?x138 ?x138 ?x878 ?x878 ?x878 ?x878)) (* (- 1) (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878) (* (- 2) (* ?x878 ?x878)) (* (- 1) (* r00 ?x878)) (* r00 r00 ?x878) (* 2 (* x00 ?x878)) (* r00 r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878))))
 (let (($x884 (not (= ?x1441 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x934 (* (- 1) ?x36)))
 (let ((?x888 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (and (= (+ ?x80 r00 ?x30 ?x32 ?x888 ?x934) 0) $x884))))))))))) :qid k!26))
 ))
 (let ((?x876 (lambda ((r Int) (x Int) )(let ((?x80 (* (- 1) r)))
 (let ((?x878 (+ x ?x80)))
 (let ((?x138 (+ 1 r)))
 (let ((?x1441 (+ (* 2 (* x00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x878) (* (- 1) (* ?x138 ?x138 ?x878)) (* (- 1) (* r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* (- 2) (* ?x138 ?x138 ?x138 ?x878 ?x878 ?x878 ?x878)) (* (- 1) (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878) (* (- 2) (* ?x878 ?x878)) (* (- 1) (* r00 ?x878)) (* r00 r00 ?x878) (* 2 (* x00 ?x878)) (* r00 r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878))))
 (let (($x884 (not (= ?x1441 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x129 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x131 (* (- 1) ?x30)))
 (let ((?x130 (* (- 1) r00)))
 (let (($x882 (and (= (+ r ?x130 ?x131 ?x129 ?x35 ?x36) 0) $x884)))
 (let (($x1245 (= (+ ?x80 r00 ?x30 (* 2 x) (* (- 2) x00) (* (- 1) ?x36)) 0)))
 (let (($x1241 (and $x1245 $x884)))
 (rewrite (= $x1241 $x882)))))))))))))))))
 ))
 (let (($x75 (exists ((r Int) (x Int) )(! (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x46 (+ (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00) (* ?x41 ?x42) (* 0 ?x41 ?x41))))
 (let ((?x52 (- (- ?x46 (* ?x41 ?x41 ?x42)) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42))))
 (let ((?x54 (- (- ?x52 (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (+ ?x54 (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* 2 ?x42 ?x42))))
 (let ((?x70 (+ (- (+ ?x58 (* 0 ?x41)) (* r00 ?x42)) (* 0 r00) (* r00 r00 ?x42) (* 0 ?x42) (* 2 ?x42 x00) (* 0 x00) (* 0 r00 r00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x70 0)))))))))))))) :qid k!26))
 ))
 (let ((?x922 (lambda ((r Int) (x Int) )(let ((?x80 (* (- 1) r)))
 (let ((?x878 (+ x ?x80)))
 (let ((?x138 (+ 1 r)))
 (let ((?x1441 (+ (* 2 (* x00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x878) (* (- 1) (* ?x138 ?x138 ?x878)) (* (- 1) (* r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* (- 2) (* ?x138 ?x138 ?x138 ?x878 ?x878 ?x878 ?x878)) (* (- 1) (* ?x138 ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878)) (* ?x138 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878) (* (- 2) (* ?x878 ?x878)) (* (- 1) (* r00 ?x878)) (* r00 r00 ?x878) (* 2 (* x00 ?x878)) (* r00 r00 ?x138 ?x138 ?x138 ?x878 ?x878 ?x878))))
 (let (($x884 (not (= ?x1441 0))))
 (let ((?x36 (* r00 r00)))
 (let ((?x934 (* (- 1) ?x36)))
 (let ((?x888 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x30 (* r r)))
 (let (($x1241 (and (= (+ ?x80 r00 ?x30 ?x32 ?x888 ?x934) 0) $x884)))
 (let ((?x42 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x46 (+ (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 x00) (* ?x41 ?x42) (* 0 ?x41 ?x41))))
 (let ((?x52 (- (- ?x46 (* ?x41 ?x41 ?x42)) (* ?x41 ?x41 ?x41 r00 ?x42 ?x42 ?x42))))
 (let ((?x54 (- (- ?x52 (* 2 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42 ?x42)) (* ?x41 ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42))))
 (let ((?x58 (- (+ ?x54 (* ?x41 ?x41 ?x41 ?x41 ?x42 ?x42 ?x42)) (* 2 ?x42 ?x42))))
 (let ((?x70 (+ (- (+ ?x58 (* 0 ?x41)) (* r00 ?x42)) (* 0 r00) (* r00 r00 ?x42) (* 0 ?x42) (* 2 ?x42 x00) (* 0 x00) (* 0 r00 r00) (* ?x41 ?x41 ?x41 r00 r00 ?x42 ?x42 ?x42))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 ?x30 ?x32) (* 2 x00)) ?x36)))
 (let (($x74 (and (= ?x38 0) (or (not (= ?x70 0))))))
 (rewrite (= $x74 $x1241)))))))))))))))))))))))
 ))
 (let ((@x76 (asserted $x75)))
 (let ((@x1175 (mp (mp @x76 (quant-intro (proof-bind ?x922) (= $x75 $x885)) $x885) (rewrite (= $x885 $x885)) $x885)))
 (let ((@x1582 (mp (mp @x1175 (quant-intro (proof-bind ?x876) (= $x885 $x889)) $x889) (quant-intro (proof-bind ?x913) (= $x889 $x907)) $x907)))
 (let ((@x421 (mp (mp~ @x1582 (sk (~ $x907 $x872)) $x872) (rewrite (= $x872 $x1946)) $x1946)))
 (let ((@x608 (and-elim @x421 $x1856)))
 (let ((@x383 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1856) $x670)) @x608 $x670)))
 (let (($x1455 (>= ?x1570 0)))
 (let ((@x648 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1856) $x1455)) @x608 $x1455)))
 (let (($x1358 (not (>= ?x1008 0))))
 (let (($x1458 (<= ?x1008 0)))
 (let ((@x626 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x297 (not $x1458) $x1358)) (and-elim @x421 $x604) (or (not $x1458) $x1358))))
 (let ((@x124 (unit-resolution @x626 (lemma ((_ th-lemma arith) (hypothesis (not $x1458)) @x648 @x383 false) $x1458) $x1358)))
 ((_ th-lemma arith) @x124 @x648 @x383 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             538
 :arith-nonlinear-bounds    14
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-tableau-max-columns 84
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.83
 :memory                    3.27
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1390263
 :num-checks                1
 :propagations              4
 :rlimit-count              9026
 :time                      0.01
 :total-time                0.02)
