unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun a!3 () Int)
(proof
(let ((?x126 (to_real b!2)))
 (let ((?x60 (to_real d00)))
 (let ((?x202 (* ?x60 ?x126)))
 (let ((?x346 (+ ?x202 (* (- 1.0) (to_real (* d00 b!2))))))
 (let (($x221 (<= ?x346 0.0)))
 (let (($x332 (= 0.0 ?x346)))
 (let ((@x448 (symm (commutativity (= $x332 (= ?x346 0.0))) (= (= ?x346 0.0) $x332))))
 (let ((@x369 (unit-resolution (hypothesis (not $x332)) (mp ((_ th-lemma arith) (= ?x346 0.0)) @x448 $x332) false)))
 (let ((@x370 (lemma @x369 $x332)))
 (let ((@x543 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x221)) @x370 $x221)))
 (let (($x366 (>= ?x346 0.0)))
 (let ((@x209 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x366)) @x370 $x366)))
 (let ((?x233 (to_real d!1)))
 (let ((?x127 (to_real y!0)))
 (let ((?x64 (to_real b00)))
 (let ((?x315 (+ (* (/ 1.0 4.0) (* ?x60 ?x126 ?x126 ?x127 ?x127 ?x127 (to_real a!3))) (* (- (/ 1.0 4.0)) (* ?x60 ?x126 ?x126 ?x127 ?x127)) (* (- (/ 1.0 4.0)) (* ?x64 ?x126 ?x127 ?x127 ?x127 ?x233 (to_real a!3))) (* (/ 1.0 4.0) (* ?x64 ?x126 ?x127 ?x127 ?x233)))))
 (let (($x100 (<= ?x315 0.0)))
 (let (($x697 (not $x100)))
 (let (($x104 (>= ?x315 0.0)))
 (let ((?x342 (* ?x64 ?x233)))
 (let ((?x283 (+ (* (- 1.0) (to_real (* b00 d!1))) ?x342)))
 (let (($x284 (<= ?x283 0.0)))
 (let (($x360 (= 0.0 ?x283)))
 (let ((@x375 (symm (commutativity (= $x360 (= ?x283 0.0))) (= (= ?x283 0.0) $x360))))
 (let ((@x371 (mp ((_ th-lemma arith) (= ?x283 0.0)) @x375 $x360)))
 (let ((@x536 (lemma (unit-resolution (hypothesis (not $x360)) @x371 false) $x360)))
 (let ((@x288 ((_ th-lemma arith triangle-eq) (or (not $x360) $x284))))
 (let (($x520 (>= ?x283 0.0)))
 (let ((@x551 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x360) $x520)) @x536 $x520)))
 (let ((?x124 (* b00 d!1)))
 (let ((?x131 (+ ?x124 (* (- 1) (* d00 b!2)))))
 (let (($x115 (>= ?x131 0)))
 (let (($x110 (= 0 ?x131)))
 (let ((@x490 (symm (commutativity (= $x110 (= ?x131 0))) (= (= ?x131 0) $x110))))
 (let (($x181 (= ?x131 0)))
 (let ((?x511 (* ?x126 ?x126 ?x127 ?x233 ?x233)))
 (let ((?x384 (* (- (/ 3.0 8.0)) ?x511)))
 (let ((?x510 (* ?x126 ?x126 ?x127 ?x127 ?x233)))
 (let ((?x330 (* (- (/ 3.0 4.0)) ?x510)))
 (let ((?x401 (to_real a!3)))
 (let ((?x452 (* ?x126 ?x233 ?x233 ?x233 ?x401)))
 (let ((?x453 (* (- (/ 1.0 16.0)) ?x452)))
 (let ((?x432 (* ?x126 ?x126 ?x127 ?x127 ?x127)))
 (let ((?x433 (* (- (/ 1.0 2.0)) ?x432)))
 (let ((?x421 (* ?x126 ?x127 ?x127)))
 (let ((?x431 (* (/ 1.0 2.0) ?x421)))
 (let ((?x419 (* ?x126 ?x127 ?x127 ?x127 ?x401)))
 (let ((?x398 (* (- (/ 1.0 2.0)) ?x419)))
 (let ((?x400 (* ?x126 ?x233 ?x233)))
 (let ((?x217 (* (/ 1.0 8.0) ?x400)))
 (let ((?x365 (* ?x126 ?x127 ?x233)))
 (let ((?x502 (* (/ 1.0 2.0) ?x365)))
 (let ((?x324 (* ?x126 ?x127 ?x127 ?x233 ?x401)))
 (let ((?x498 (* (- (/ 3.0 4.0)) ?x324)))
 (let ((?x279 (* ?x126 ?x127 ?x233 ?x233 ?x401)))
 (let ((?x341 (* (- (/ 3.0 8.0)) ?x279)))
 (let ((?x219 (* ?x126 ?x126 ?x233 ?x233 ?x233)))
 (let ((?x229 (* (- (/ 1.0 16.0)) ?x219)))
 (let ((?x240 (* (+ (* (- (/ 1.0 2.0)) ?x202) (* (/ 1.0 2.0) ?x342)) (+ ?x229 ?x341 ?x498 ?x502 ?x217 ?x398 ?x431 ?x433 ?x453 ?x330 ?x384))))
 (let (($x495 (= ?x240 0.0)))
 (let (($x302 (not $x495)))
 (let (($x343 (= ?x315 0.0)))
 (let (($x268 (not $x343)))
 (let (($x350 (or $x268 $x302)))
 (let ((?x193 (* a!3 d!1)))
 (let ((?x237 (+ ?x193 (* (- 2) (* y!0 b!2)) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x92 (= (+ ?x35 ?x96 (* 2 (* b00 y!0)) (* (- 1) (* d00 a!3))) 0)))
 (let (($x354 (and $x92 $x181 (= ?x237 0) $x350)))
 (let ((?x169 (+ ?x398 ?x431 ?x433 ?x229 ?x453 (* (- (/ 3.0 8.0)) (* ?x126 ?x126 ?x233 ?x233 ?x127)) (* (- (/ 3.0 8.0)) (* ?x126 ?x233 ?x233 ?x127 ?x401)) (* (- (/ 3.0 4.0)) (* ?x126 ?x126 ?x233 ?x127 ?x127)) (* (/ 1.0 2.0) (* ?x126 ?x233 ?x127)) (* (- (/ 3.0 4.0)) (* ?x126 ?x233 ?x127 ?x127 ?x401)) ?x217)))
 (let (($x174 (= (* (+ (* (- (/ 1.0 2.0)) (* ?x126 ?x60)) (* (/ 1.0 2.0) (* ?x233 ?x64))) ?x169) 0.0)))
 (let ((?x397 (+ (* (/ 1.0 4.0) (* ?x126 ?x126 ?x60 ?x127 ?x127 ?x127 ?x401)) (* (- (/ 1.0 4.0)) (* ?x126 ?x233 ?x64 ?x127 ?x127 ?x127 ?x401)) (* (- (/ 1.0 4.0)) (* ?x126 ?x126 ?x60 ?x127 ?x127)) (* (/ 1.0 4.0) (* ?x126 ?x233 ?x64 ?x127 ?x127)))))
 (let ((?x139 (+ ?x193 (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x263 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x96 (* 2 (* y!0 b00))) 0)))
 (let (($x247 (and $x263 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x139 0) (or (not (= ?x397 0.0)) (not $x174)))))
 (let (($x145 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real a)))
 (let ((?x67 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x489 (* (- (/ 3.0 4.0)) (* ?x56 ?x62 ?x67 ?x67 ?x69))))
 (let ((?x486 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67))))
 (let ((?x482 (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x69))))
 (let ((?x479 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67))))
 (let ((?x475 (* (- (/ 1.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x69))))
 (let ((?x472 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62))))
 (let ((?x468 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x67 ?x67 ?x67))))
 (let ((?x186 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x208 (* (- (/ 1.0 2.0)) (* ?x56 ?x67 ?x67 ?x67 ?x69))))
 (let ((?x523 (+ ?x208 ?x186 ?x468 ?x472 ?x475 ?x479 ?x482 ?x486 (* (/ 1.0 2.0) (* ?x56 ?x62 ?x67)) ?x489 (* (/ 1.0 8.0) (* ?x56 ?x62 ?x62)))))
 (let ((?x194 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x274 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real d00) ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x56 ?x62 (to_real b00) ?x67 ?x67)))))
 (let (($x180 (not (= ?x274 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x170 (= ?x165 0)))
 (let (($x99 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x128 (= (+ ?x35 (* (- 1) (* a d00)) ?x96 (* 2 (* y b00))) 0)))
 (and $x128 $x99 $x170 (or $x180 (not (= (* ?x194 ?x523) 0.0))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x304 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x62 (to_real d)))
 (let ((?x175 (* (/ 1.0 2.0) ?x62)))
 (let ((?x67 (to_real y)))
 (let ((?x148 (+ ?x67 ?x175)))
 (let ((?x56 (to_real b)))
 (let ((?x281 (+ (* (/ 1.0 2.0) (* ?x56 ?x148 ?x148)) (* (- (/ 1.0 2.0)) (* ?x56 (+ (to_real a) ?x56) ?x148 ?x148 ?x148)))))
 (let ((?x166 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x67 ?x67 ?x56)) (* (- (/ 1.0 2.0)) (* ?x67 ?x67 ?x67 ?x56 (to_real a))))))
 (let (($x493 (or (not (= (* ?x166 ?x310) 0.0)) (not (= (* ?x166 ?x281) 0.0)))))
 (let ((?x108 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x228 (= ?x108 0)))
 (let ((?x442 (* d00 a)))
 (let ((?x147 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x442)))
 (and (= ?x147 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x228 $x493)))))))))))))) :qid k!33))
 ))
 (let ((?x163 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x69 (to_real a)))
 (let ((?x67 (to_real y)))
 (let ((?x62 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x489 (* (- (/ 3.0 4.0)) (* ?x56 ?x62 ?x67 ?x67 ?x69))))
 (let ((?x486 (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x62 ?x67 ?x67))))
 (let ((?x482 (* (- (/ 3.0 8.0)) (* ?x56 ?x62 ?x62 ?x67 ?x69))))
 (let ((?x479 (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x62 ?x62 ?x67))))
 (let ((?x475 (* (- (/ 1.0 16.0)) (* ?x56 ?x62 ?x62 ?x62 ?x69))))
 (let ((?x472 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x62 ?x62))))
 (let ((?x468 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x67 ?x67 ?x67))))
 (let ((?x186 (* (/ 1.0 2.0) (* ?x56 ?x67 ?x67))))
 (let ((?x208 (* (- (/ 1.0 2.0)) (* ?x56 ?x67 ?x67 ?x67 ?x69))))
 (let ((?x523 (+ ?x208 ?x186 ?x468 ?x472 ?x475 ?x479 ?x482 ?x486 (* (/ 1.0 2.0) (* ?x56 ?x62 ?x67)) ?x489 (* (/ 1.0 8.0) (* ?x56 ?x62 ?x62)))))
 (let ((?x194 (+ (* (- (/ 1.0 2.0)) (* ?x56 (to_real d00))) (* (/ 1.0 2.0) (* ?x62 (to_real b00))))))
 (let ((?x274 (+ (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real d00) ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 (to_real b00) ?x67 ?x67 ?x67 ?x69)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 (to_real d00) ?x67 ?x67)) (* (/ 1.0 4.0) (* ?x56 ?x62 (to_real b00) ?x67 ?x67)))))
 (let (($x180 (not (= ?x274 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x165 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x170 (= ?x165 0)))
 (let (($x99 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let ((?x35 (* a00 d00)))
 (let (($x128 (= (+ ?x35 (* (- 1) (* a d00)) ?x96 (* 2 (* y b00))) 0)))
 (let (($x548 (and $x128 $x99 $x170 (or $x180 (not (= (* ?x194 ?x523) 0.0))))))
 (let ((?x175 (* (/ 1.0 2.0) ?x62)))
 (let ((?x148 (+ ?x67 ?x175)))
 (let ((?x281 (+ (* (/ 1.0 2.0) (* ?x56 ?x148 ?x148)) (* (- (/ 1.0 2.0)) (* ?x56 (+ ?x69 ?x56) ?x148 ?x148 ?x148)))))
 (let ((?x166 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x67 ?x67 ?x56)) (* (- (/ 1.0 2.0)) (* ?x67 ?x67 ?x67 ?x56 ?x69)))))
 (let (($x493 (or (not (= (* ?x166 ?x310) 0.0)) (not (= (* ?x166 ?x281) 0.0)))))
 (let ((?x108 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x228 (= ?x108 0)))
 (let ((?x442 (* d00 a)))
 (let (($x382 (= (+ (* 2 ?x95) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x442) 0)))
 (let (($x480 (and $x382 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x228 $x493)))
 (rewrite (= $x480 $x548))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x411 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x62 (to_real d)))
 (let ((?x175 (* (/ 1.0 2.0) ?x62)))
 (let ((?x67 (to_real y)))
 (let ((?x148 (+ ?x67 ?x175)))
 (let ((?x56 (to_real b)))
 (let ((?x281 (+ (* (/ 1.0 2.0) (* ?x56 ?x148 ?x148)) (* (- (/ 1.0 2.0)) (* ?x56 (+ (to_real a) ?x56) ?x148 ?x148 ?x148)))))
 (let ((?x166 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x67 ?x67 ?x56)) (* (- (/ 1.0 2.0)) (* ?x67 ?x67 ?x67 ?x56 (to_real a))))))
 (let (($x493 (or (not (= (* ?x166 ?x310) 0.0)) (not (= (* ?x166 ?x281) 0.0)))))
 (let ((?x108 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x228 (= ?x108 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x461 (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x461 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x228 $x493)))))))))))))))) :qid k!33))
 ))
 (let ((?x322 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x62 (to_real d)))
 (let ((?x175 (* (/ 1.0 2.0) ?x62)))
 (let ((?x67 (to_real y)))
 (let ((?x148 (+ ?x67 ?x175)))
 (let ((?x56 (to_real b)))
 (let ((?x281 (+ (* (/ 1.0 2.0) (* ?x56 ?x148 ?x148)) (* (- (/ 1.0 2.0)) (* ?x56 (+ (to_real a) ?x56) ?x148 ?x148 ?x148)))))
 (let ((?x166 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x67 ?x67 ?x56)) (* (- (/ 1.0 2.0)) (* ?x67 ?x67 ?x67 ?x56 (to_real a))))))
 (let (($x493 (or (not (= (* ?x166 ?x310) 0.0)) (not (= (* ?x166 ?x281) 0.0)))))
 (let ((?x108 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x228 (= ?x108 0)))
 (let ((?x442 (* d00 a)))
 (let ((?x147 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x442)))
 (let (($x480 (and (= ?x147 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x228 $x493)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x345 (and (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) ?x442)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x228 $x493)))
 (rewrite (= $x345 $x480)))))))))))))))))))))
 ))
 (let (($x87 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x73 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x62 (to_real d)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x67 (to_real y)))
 (let ((?x76 (+ ?x67 ?x63)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x81 (- (* ?x58 ?x76 ?x76) (* (to_real (+ a b)) ?x58 ?x76 ?x76 ?x76))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x72 (* ?x66 (- (* ?x58 ?x67 ?x67) (* (to_real a) ?x58 ?x67 ?x67 ?x67)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x72 ?x73)) (not (= (* ?x66 ?x81) ?x73))))))))))))))))))) :qid k!33))
 ))
 (let ((?x455 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x62 (to_real d)))
 (let ((?x175 (* (/ 1.0 2.0) ?x62)))
 (let ((?x67 (to_real y)))
 (let ((?x148 (+ ?x67 ?x175)))
 (let ((?x56 (to_real b)))
 (let ((?x281 (+ (* (/ 1.0 2.0) (* ?x56 ?x148 ?x148)) (* (- (/ 1.0 2.0)) (* ?x56 (+ (to_real a) ?x56) ?x148 ?x148 ?x148)))))
 (let ((?x166 (+ (* (- (/ 1.0 2.0)) (* (to_real d00) ?x56)) (* (/ 1.0 2.0) (* (to_real b00) ?x62)))))
 (let ((?x310 (+ (* (/ 1.0 2.0) (* ?x67 ?x67 ?x56)) (* (- (/ 1.0 2.0)) (* ?x67 ?x67 ?x67 ?x56 (to_real a))))))
 (let (($x493 (or (not (= (* ?x166 ?x310) 0.0)) (not (= (* ?x166 ?x281) 0.0)))))
 (let ((?x108 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x228 (= ?x108 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x95 (* b00 y00)))
 (let ((?x96 (* (- 2) ?x95)))
 (let (($x461 (= (+ ?x96 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x345 (and $x461 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x228 $x493)))
 (let ((?x73 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x63 (/ ?x62 ?x57)))
 (let ((?x76 (+ ?x67 ?x63)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x81 (- (* ?x58 ?x76 ?x76) (* (to_real (+ a b)) ?x58 ?x76 ?x76 ?x76))))
 (let ((?x66 (+ (* (to_real (- 1)) ?x58 (to_real d00)) (* (to_real b00) ?x63))))
 (let ((?x72 (* ?x66 (- (* ?x58 ?x67 ?x67) (* (to_real a) ?x58 ?x67 ?x67 ?x67)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x86 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x72 ?x73)) (not (= (* ?x66 ?x81) ?x73))))))
 (rewrite (= $x86 $x345))))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x391 (mp (mp @x88 (quant-intro (proof-bind ?x455) (= $x87 $x411)) $x411) (rewrite (= $x411 $x411)) $x411)))
 (let ((@x308 (mp (mp @x391 (quant-intro (proof-bind ?x322) (= $x411 $x304)) $x304) (quant-intro (proof-bind ?x163) (= $x304 $x145)) $x145)))
 (let ((@x325 (mp (mp~ @x308 (sk (~ $x145 $x247)) $x247) (rewrite (= $x247 $x354)) $x354)))
 (let ((@x476 (mp (and-elim @x325 $x181) @x490 $x110)))
 (let ((@x530 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x110) $x115)) @x476 $x115)))
 (let (($x291 (<= ?x131 0)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x110) $x291)) @x476 $x291)))
 (let ((@x585 (unit-resolution ((_ th-lemma arith) (or $x104 (not $x291) (not $x284) (not $x115) (not $x520))) @x296 @x530 (hypothesis (not $x104)) @x551 (unit-resolution @x288 @x536 $x284) false)))
 (let (($x404 (= 0.0 ?x315)))
 (let (($x705 (not $x404)))
 (let ((@x707 (monotonicity (symm (commutativity (= $x404 $x343)) (= $x343 $x404)) (= $x268 $x705))))
 (let ((?x494 (* (- (/ 1.0 2.0)) ?x202)))
 (let ((?x456 (* (/ 1.0 2.0) ?x342)))
 (let ((?x500 (+ ?x456 ?x494)))
 (let (($x514 (>= ?x500 0.0)))
 (let ((@x539 (lemma ((_ th-lemma arith) @x543 (hypothesis (not $x514)) @x530 (hypothesis $x520) false) (or (not $x520) $x514))))
 (let ((@x552 (unit-resolution @x539 @x551 $x514)))
 (let ((?x136 (+ (* (/ 1.0 16.0) ?x452) (* (/ 3.0 4.0) ?x510) (* (/ 3.0 8.0) ?x511) (* (/ 1.0 16.0) ?x219) (* (/ 3.0 8.0) ?x279) (* (/ 3.0 4.0) ?x324) (* (- (/ 1.0 2.0)) ?x365) (* (- (/ 1.0 8.0)) ?x400) (* (/ 1.0 2.0) ?x419) (* (- (/ 1.0 2.0)) ?x421) (* (/ 1.0 2.0) ?x432))))
 (let (($x301 (<= ?x136 0.0)))
 (let (($x393 (not $x301)))
 (let ((?x207 (+ ?x453 ?x330 ?x384 ?x229 ?x341 ?x498 ?x502 ?x217 ?x398 ?x431 ?x433)))
 (let (($x103 (>= ?x207 0.0)))
 (let (($x287 (not $x103)))
 (let (($x107 (= ?x207 0.0)))
 (let (($x557 (not $x107)))
 (let ((@x560 (hypothesis $x302)))
 (let (($x558 (or $x557 $x495)))
 (let ((@x563 (lemma (unit-resolution ((_ th-lemma arith) $x558) @x560 (hypothesis $x107) false) $x558)))
 (let (($x412 (<= ?x207 0.0)))
 (let (($x515 (>= ?x136 0.0)))
 (let (($x111 (<= ?x240 0.0)))
 (let (($x608 (not $x111)))
 (let (($x129 (>= ?x240 0.0)))
 (let (($x392 (not $x129)))
 (let ((@x289 (hypothesis $x392)))
 (let (($x528 (<= ?x500 0.0)))
 (let ((@x406 ((_ th-lemma arith) @x296 (unit-resolution @x288 @x371 $x284) (hypothesis (not $x528)) (hypothesis $x366) false)))
 (let ((@x210 (unit-resolution (lemma @x406 (or (not $x366) $x528)) @x209 $x528)))
 (let ((@x508 (unit-resolution ((_ th-lemma arith) (or (not $x528) $x301 $x129)) @x289 (hypothesis $x393) @x210 false)))
 (let ((@x565 ((_ th-lemma arith) (or $x103 $x393))))
 (let ((@x566 (unit-resolution @x565 (unit-resolution (lemma @x508 (or $x301 $x129)) @x289 $x301) $x103)))
 (let (($x533 (not $x515)))
 (let ((@x532 (hypothesis $x533)))
 (let ((@x553 (unit-resolution ((_ th-lemma arith) (or (not $x514) $x515 $x129)) @x289 @x532 @x552 false)))
 (let ((@x525 ((_ th-lemma arith) (or $x533 $x412))))
 (let ((@x522 (unit-resolution @x525 (unit-resolution (lemma @x553 (or $x515 $x129)) @x289 $x515) $x412)))
 (let ((@x496 ((_ th-lemma arith triangle-eq) (or $x107 (not $x412) $x287))))
 (let ((@x568 (unit-resolution @x563 (unit-resolution @x496 @x522 @x566 $x107) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x302 $x129)) @x289 $x302) false)))
 (let ((@x601 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x495 $x608 $x392)) @x560 (lemma @x568 $x129) $x608)))
 (let ((@x610 (unit-resolution ((_ th-lemma arith) (or (not $x528) $x515 $x111)) (hypothesis $x608) @x210 @x532 false)))
 (let ((@x615 (unit-resolution @x525 (unit-resolution (lemma @x610 (or $x515 $x111)) @x601 $x515) $x412)))
 (let ((@x617 (unit-resolution @x565 (unit-resolution @x496 @x615 (unit-resolution @x563 @x560 $x557) $x287) $x393)))
 (let ((@x618 (unit-resolution ((_ th-lemma arith) (or (not $x514) $x301 $x111)) @x601 @x617 @x552 false)))
 (let ((@x708 (mp (unit-resolution (and-elim @x325 $x350) (lemma @x618 $x495) $x268) @x707 $x705)))
 (let ((@x710 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x404 $x697 (not $x104))) @x708 (or $x697 (not $x104)))))
 (unit-resolution ((_ th-lemma arith) (or $x100 (not $x221) (not $x366) (not $x115) (not $x291))) @x296 @x530 (unit-resolution @x710 (lemma @x585 $x104) $x697) @x209 @x543 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       47
 :arith-eq-adapter                69
 :arith-bound-propagations-cheap  65
 :arith-bound-propagations-lp     14
 :arith-conflicts                 156
 :arith-diseq                     61
 :arith-gcd-calls                 8
 :arith-grobner-calls             7
 :arith-grobner-conflicts         2
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 20
 :arith-lower                     104
 :arith-make-feasible             86
 :arith-max-columns               67
 :arith-max-rows                  19
 :arith-nla-explanations          73
 :arith-nla-lemmas                152
 :arith-patches                   8
 :arith-patches-success           8
 :arith-propagations              65
 :arith-upper                     99
 :conflicts                       18
 :decisions                       171
 :del-clause                      197
 :final-checks                    49
 :max-memory                      4.70
 :memory                          3.14
 :mk-bool-var                     380
 :mk-clause                       303
 :num-allocs                      3038926
 :num-checks                      1
 :propagations                    192
 :rlimit-count                    7221
 :time                            0.03
 :total-time                      0.04)
