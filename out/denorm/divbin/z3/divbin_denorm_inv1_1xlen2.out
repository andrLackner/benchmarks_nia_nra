unsat
((set-logic NRA)
(declare-fun b!6 () Real)
(declare-fun r!5 () Real)
(declare-fun x!4 () Real)
(proof
(let ((?x571 (+ (* b00 x00 x!4 r!5 r!5 b!6) (* 2.0 (* b00 x00 x!4 x!4 r!5 r!5 r!5 b!6)) (* 2.0 (* r00 x!4 x!4 r!5 r!5 r!5 b!6)) (* r00 x!4 r!5 r!5 b!6) (* (- 2.0) (* x!4 x!4 x!4 r!5 r!5 r!5 b!6 b!6)) (* (- 2.0) (* x!4 x!4 r!5 r!5 r!5 r!5 b!6)) (* (- 1.0) (* x!4 r!5 r!5 r!5 b!6)) (* (- 1.0) (* x!4 x!4 r!5 r!5 b!6 b!6)))))
 (let (($x104 (>= ?x571 0.0)))
 (let (($x336 (not $x104)))
 (let (($x93 (= 0.0 ?x571)))
 (let (($x160 (not $x93)))
 (let ((@x344 (symm (commutativity (= $x93 (= ?x571 0.0))) (= (= ?x571 0.0) $x93))))
 (let (($x572 (= ?x571 0.0)))
 (let (($x595 (not $x572)))
 (let ((?x341 (* x!4 b!6)))
 (let ((?x68 (* b00 x00)))
 (let ((?x69 (* (- 1.0) ?x68)))
 (let ((?x85 (* (- 1.0) r00)))
 (let ((?x605 (* x!4 x!4 r!5 r!5 b!6 b!6)))
 (let ((?x536 (* (- 3.0) ?x605)))
 (let ((?x559 (* (/ 1.0 4.0) (* x!4 b!6 b!6 b!6))))
 (let ((?x557 (* (/ 1.0 8.0) (* b!6 b!6 b!6))))
 (let ((?x555 (* (- 1.0) (* x!4 r!5 b!6 b!6))))
 (let ((?x552 (* (- (/ 1.0 2.0)) (* r!5 b!6 b!6))))
 (let ((?x548 (* (- (/ 1.0 4.0)) (* x!4 b!6 b!6 b!6 b!6))))
 (let ((?x516 (* (- (/ 1.0 16.0)) (* b!6 b!6 b!6 b!6))))
 (let ((?x542 (* (/ 3.0 2.0) (* x!4 r!5 b!6 b!6 b!6))))
 (let ((?x539 (* x!4 r!5 r!5 b!6)))
 (let ((?x519 (* (/ 3.0 8.0) (* r!5 b!6 b!6 b!6))))
 (let ((?x534 (* (- 3.0) (* x!4 r!5 r!5 b!6 b!6))))
 (let ((?x499 (* 2.0 (* x!4 x!4 r!5 r!5 r!5 b!6))))
 (let ((?x543 (* (/ 3.0 2.0) (* x!4 x!4 r!5 b!6 b!6 b!6))))
 (let ((?x550 (* (- (/ 1.0 4.0)) (* x!4 x!4 b!6 b!6 b!6 b!6))))
 (let ((?x553 (* (/ 1.0 2.0) (* r!5 r!5 b!6))))
 (let ((?x524 (* (- (/ 3.0 4.0)) (* r!5 r!5 b!6 b!6))))
 (let ((?x496 (* (/ 1.0 2.0) (* r!5 r!5 r!5 b!6))))
 (let ((?x369 (* x!4 r!5 r!5 r!5 b!6)))
 (let ((?x541 (* 2.0 ?x369)))
 (let ((?x109 (+ ?x541 ?x496 ?x524 ?x553 ?x550 ?x543 ?x499 ?x534 ?x519 ?x539 ?x542 ?x516 ?x548 ?x552 ?x555 ?x557 ?x559 ?x536)))
 (let (($x73 (= (* ?x109 (+ ?x85 ?x69 ?x341 r!5)) 0.0)))
 (let ((?x408 (+ ?x341 r!5 ?x85 ?x69)))
 (let (($x403 (= ?x408 0.0)))
 (let ((?x175 (+ r00 ?x68 (* (- 1.0) ?x341) (* (- 1.0) r!5))))
 (let (($x65 (= ?x175 0.0)))
 (let (($x134 (not $x73)))
 (let (($x152 (or $x595 $x134)))
 (let (($x593 (and $x65 $x152)))
 (let ((?x343 (+ r!5 ?x85 ?x69 ?x341)))
 (let ((?x560 (+ ?x499 ?x524 ?x496 ?x534 ?x539 ?x541 ?x536 ?x519 ?x542 ?x543 ?x516 ?x548 ?x550 ?x552 ?x553 ?x555 ?x557 ?x559)))
 (let ((?x602 (+ (* 2.0 (* x!4 x!4 r!5 r!5 r!5 r!5 b!6)) (* (- 2.0) (* x!4 x!4 r!5 r!5 r!5 b!6 r00)) (* (- 2.0) (* x!4 x!4 r!5 r!5 r!5 b!6 b00 x00)) (* 2.0 (* x!4 x!4 x!4 r!5 r!5 r!5 b!6 b!6)) ?x369 (* (- 1.0) (* x!4 r!5 r!5 b!6 r00)) (* (- 1.0) (* x!4 r!5 r!5 b!6 b00 x00)) ?x605)))
 (let (($x450 (and (= ?x343 0.0) (or (not (= ?x602 0.0)) (not (= (* ?x560 ?x343) 0.0))))))
 (let (($x604 (exists ((b Real) (r Real) (x Real) )(! (let ((?x96 (* x b)))
 (let ((?x68 (* b00 x00)))
 (let ((?x69 (* (- 1.0) ?x68)))
 (let ((?x85 (* (- 1.0) r00)))
 (let ((?x102 (+ r ?x85 ?x69 ?x96)))
 (let ((?x174 (* x r r b)))
 (let ((?x90 (* 2.0 (* x x r r r b))))
 (let ((?x584 (+ ?x90 (* (- (/ 3.0 4.0)) (* r r b b)) (* (/ 1.0 2.0) (* r r r b)) (* (- 3.0) (* x r r b b)) ?x174 (* 2.0 (* x r r r b)) (* (- 3.0) (* x x r r b b)) (* (/ 3.0 8.0) (* r b b b)) (* (/ 3.0 2.0) (* x r b b b)) (* (/ 3.0 2.0) (* x x r b b b)) (* (- (/ 1.0 16.0)) (* b b b b)) (* (- (/ 1.0 4.0)) (* x b b b b)) (* (- (/ 1.0 4.0)) (* x x b b b b)) (* (- (/ 1.0 2.0)) (* r b b)) (* (/ 1.0 2.0) (* r r b)) (* (- 1.0) (* x r b b)) (* (/ 1.0 8.0) (* b b b)) (* (/ 1.0 4.0) (* x b b b)))))
 (let ((?x204 (* x x r r b b)))
 (let ((?x192 (* x r r r b)))
 (let ((?x207 (+ (* 2.0 (* x x r r r r b)) (* (- 2.0) (* x x r r r b r00)) (* (- 2.0) (* x x r r r b b00 x00)) (* 2.0 (* x x x r r r b b)) ?x192 (* (- 1.0) (* x r r b r00)) (* (- 1.0) (* x r r b b00 x00)) ?x204)))
 (let (($x101 (not (= ?x207 0.0))))
 (let (($x107 (= ?x102 0.0)))
 (and $x107 (or $x101 (not (= (* ?x584 ?x102) 0.0))))))))))))))))) :qid k!28))
 ))
 (let (($x327 (exists ((b Real) (r Real) (x Real) )(! (let ((?x85 (* (- 1.0) r00)))
 (let ((?x118 (* (- (/ 1.0 2.0)) b)))
 (let ((?x68 (* b00 x00)))
 (let ((?x69 (* (- 1.0) ?x68)))
 (let ((?x298 (+ ?x69 r ?x118 ?x85 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x130 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) (+ r ?x118) (+ r ?x118) b))))
 (let ((?x72 (+ r ?x118)))
 (let ((?x48 (* 2.0 x)))
 (let ((?x142 (+ 1.0 ?x48)))
 (let (($x321 (= (* (+ (* (/ 1.0 2.0) (* ?x142 ?x142 ?x72 ?x72 ?x72 b)) ?x130) ?x298) 0.0)))
 (let ((?x96 (* x b)))
 (let ((?x193 (+ ?x69 r ?x85 ?x96)))
 (let ((?x174 (* x r r b)))
 (let ((?x90 (* 2.0 (* x x r r r b))))
 (and (= ?x193 0.0) (or (not (= (* (+ ?x90 ?x174) ?x193) 0.0)) (not $x321))))))))))))))))) :qid k!28))
 ))
 (let ((?x601 (lambda ((b Real) (r Real) (x Real) )(let ((?x96 (* x b)))
 (let ((?x68 (* b00 x00)))
 (let ((?x69 (* (- 1.0) ?x68)))
 (let ((?x85 (* (- 1.0) r00)))
 (let ((?x102 (+ r ?x85 ?x69 ?x96)))
 (let ((?x174 (* x r r b)))
 (let ((?x90 (* 2.0 (* x x r r r b))))
 (let ((?x584 (+ ?x90 (* (- (/ 3.0 4.0)) (* r r b b)) (* (/ 1.0 2.0) (* r r r b)) (* (- 3.0) (* x r r b b)) ?x174 (* 2.0 (* x r r r b)) (* (- 3.0) (* x x r r b b)) (* (/ 3.0 8.0) (* r b b b)) (* (/ 3.0 2.0) (* x r b b b)) (* (/ 3.0 2.0) (* x x r b b b)) (* (- (/ 1.0 16.0)) (* b b b b)) (* (- (/ 1.0 4.0)) (* x b b b b)) (* (- (/ 1.0 4.0)) (* x x b b b b)) (* (- (/ 1.0 2.0)) (* r b b)) (* (/ 1.0 2.0) (* r r b)) (* (- 1.0) (* x r b b)) (* (/ 1.0 8.0) (* b b b)) (* (/ 1.0 4.0) (* x b b b)))))
 (let ((?x204 (* x x r r b b)))
 (let ((?x192 (* x r r r b)))
 (let ((?x207 (+ (* 2.0 (* x x r r r r b)) (* (- 2.0) (* x x r r r b r00)) (* (- 2.0) (* x x r r r b b00 x00)) (* 2.0 (* x x x r r r b b)) ?x192 (* (- 1.0) (* x r r b r00)) (* (- 1.0) (* x r r b b00 x00)) ?x204)))
 (let (($x101 (not (= ?x207 0.0))))
 (let (($x107 (= ?x102 0.0)))
 (let (($x648 (and $x107 (or $x101 (not (= (* ?x584 ?x102) 0.0))))))
 (let ((?x118 (* (- (/ 1.0 2.0)) b)))
 (let ((?x298 (+ ?x69 r ?x118 ?x85 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x130 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) (+ r ?x118) (+ r ?x118) b))))
 (let ((?x72 (+ r ?x118)))
 (let ((?x48 (* 2.0 x)))
 (let ((?x142 (+ 1.0 ?x48)))
 (let (($x321 (= (* (+ (* (/ 1.0 2.0) (* ?x142 ?x142 ?x72 ?x72 ?x72 b)) ?x130) ?x298) 0.0)))
 (let (($x322 (or (not (= (* (+ ?x90 ?x174) (+ ?x69 r ?x85 ?x96)) 0.0)) (not $x321))))
 (let (($x164 (and (= (+ ?x69 r ?x85 ?x96) 0.0) $x322)))
 (rewrite (= $x164 $x648))))))))))))))))))))))))))
 ))
 (let (($x60 (exists ((b Real) (r Real) (x Real) )(! (let ((?x48 (* 2.0 x)))
 (let ((?x49 (+ ?x48 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x45 (- r ?x36)))
 (let ((?x55 (* (+ (- (+ (* (- 1.0) b00 x00) ?x45) r00) (* ?x36 ?x49)) (+ (* ?x36 ?x45 ?x45 ?x45 ?x49 ?x49) (* ?x36 ?x45 ?x45 ?x49)))))
 (let ((?x41 (+ (* ?x36 r r r 2.0 x 2.0 x) (* ?x36 r r 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x58 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41) 0.0)) (not (= ?x55 0.0)))))
 (and (= (+ ?x30 (* b x)) 0.0) $x58))))))))) :qid k!28))
 ))
 (let ((?x95 (lambda ((b Real) (r Real) (x Real) )(let ((?x85 (* (- 1.0) r00)))
 (let ((?x118 (* (- (/ 1.0 2.0)) b)))
 (let ((?x68 (* b00 x00)))
 (let ((?x69 (* (- 1.0) ?x68)))
 (let ((?x298 (+ ?x69 r ?x118 ?x85 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x130 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) (+ r ?x118) (+ r ?x118) b))))
 (let ((?x72 (+ r ?x118)))
 (let ((?x48 (* 2.0 x)))
 (let ((?x142 (+ 1.0 ?x48)))
 (let (($x321 (= (* (+ (* (/ 1.0 2.0) (* ?x142 ?x142 ?x72 ?x72 ?x72 b)) ?x130) ?x298) 0.0)))
 (let ((?x96 (* x b)))
 (let ((?x193 (+ ?x69 r ?x85 ?x96)))
 (let ((?x174 (* x r r b)))
 (let ((?x90 (* 2.0 (* x x r r r b))))
 (let (($x164 (and (= ?x193 0.0) (or (not (= (* (+ ?x90 ?x174) ?x193) 0.0)) (not $x321)))))
 (let ((?x49 (+ ?x48 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x45 (- r ?x36)))
 (let ((?x55 (* (+ (- (+ (* (- 1.0) b00 x00) ?x45) r00) (* ?x36 ?x49)) (+ (* ?x36 ?x45 ?x45 ?x45 ?x49 ?x49) (* ?x36 ?x45 ?x45 ?x49)))))
 (let ((?x41 (+ (* ?x36 r r r 2.0 x 2.0 x) (* ?x36 r r 2.0 x))))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let (($x58 (or (not (= (* (+ ?x30 (* ?x36 2.0 x)) ?x41) 0.0)) (not (= ?x55 0.0)))))
 (let (($x59 (and (= (+ ?x30 (* b x)) 0.0) $x58)))
 (rewrite (= $x59 $x164))))))))))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x594 (mp (mp @x61 (quant-intro (proof-bind ?x95) (= $x60 $x327)) $x327) (quant-intro (proof-bind ?x601) (= $x327 $x604)) $x604)))
 (let ((@x592 (mp (mp~ @x594 (sk (~ $x604 $x450)) $x450) (rewrite (= $x450 $x593)) $x593)))
 (let ((@x573 (and-elim @x592 $x65)))
 (let (($x81 (<= ?x175 0.0)))
 (let (($x80 (= 0.0 ?x175)))
 (let ((@x168 (mp @x573 (symm (commutativity (= $x80 $x65)) (= $x65 $x80)) $x80)))
 (let ((@x363 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x80) $x81)) @x168 $x81)))
 (let (($x91 (>= ?x175 0.0)))
 (let ((@x183 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x80) $x91)) @x168 $x91)))
 (let (($x621 (<= ?x408 0.0)))
 (let (($x619 (>= ?x408 0.0)))
 (let ((@x482 ((_ th-lemma arith) (lemma ((_ th-lemma arith) @x363 (hypothesis (not $x619)) false) $x619) (lemma ((_ th-lemma arith) (hypothesis (not $x621)) @x183 false) $x621) @x183 @x363 (= ?x175 ?x408))))
 (let (($x457 (or (not $x403) $x73)))
 (let ((@x460 (unit-resolution ((_ th-lemma arith) $x457) (hypothesis $x134) (hypothesis $x403) false)))
 (let ((@x222 (unit-resolution (lemma @x460 $x457) (trans* (symm @x482 (= ?x408 ?x175)) @x573 $x403) $x73)))
 (let ((@x337 (mp (unit-resolution (and-elim @x592 $x152) @x222 $x595) (monotonicity @x344 (= $x595 $x160)) $x160)))
 (let (($x203 (<= ?x571 0.0)))
 (let ((@x488 (unit-resolution ((_ th-lemma arith) (or (not $x81) (not $x91) $x203)) @x363 @x183 (hypothesis (not $x203)) false)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x93 (not $x203) $x336)) (lemma @x488 $x203) @x337 $x336)))
 (unit-resolution ((_ th-lemma arith) (or (not $x81) (not $x91) $x104)) @x363 @x183 @x332 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      16
 :arith-eq-adapter               14
 :arith-bound-propagations-cheap 11
 :arith-conflicts                19
 :arith-diseq                    23
 :arith-fixed-eqs                1
 :arith-grobner-calls            2
 :arith-grobner-conflicts        2
 :arith-horner-calls             2
 :arith-lower                    26
 :arith-make-feasible            18
 :arith-max-columns              42
 :arith-max-rows                 5
 :arith-nla-explanations         6
 :arith-nla-lemmas               17
 :arith-propagations             11
 :arith-upper                    13
 :conflicts                      6
 :decisions                      23
 :del-clause                     10
 :final-checks                   14
 :max-memory                     1.88
 :memory                         1.05
 :mk-bool-var                    60
 :mk-clause                      56
 :num-allocs                     267574
 :num-checks                     1
 :propagations                   28
 :rlimit-count                   3332
 :time                           0.01
 :total-time                     0.01)
