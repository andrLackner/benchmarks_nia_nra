unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(declare-fun d!1 () Int)
(proof
(let ((?x969 (to_real b!2)))
 (let ((?x829 (to_real a!3)))
 (let ((?x827 (to_real y!0)))
 (let ((?x820 (to_real d!1)))
 (let ((?x66 (to_real y00)))
 (let ((?x393 (* (/ 1.0 16.0) (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x827 ?x829 ?x829 ?x829 ?x969 ?x969))))
 (let ((?x1359 (* (- (/ 1.0 32.0)) (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829 ?x829 ?x829 ?x969))))
 (let ((?x871 (* (/ 1.0 8.0) (* (to_real a00) ?x820 ?x820 ?x820 ?x827 ?x827 ?x827 ?x829 ?x829))))
 (let ((?x983 (* (- (/ 1.0 16.0)) (* ?x66 ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829 ?x829 ?x969 ?x969))))
 (let ((?x69 (to_real a00)))
 (let ((?x869 (* (/ 1.0 32.0) (* ?x69 ?x820 ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829 ?x829 ?x969))))
 (let ((?x1064 (+ (* (/ 1.0 32.0) (* ?x820 ?x820 ?x827 ?x829 ?x969 ?x969 ?x969)) (* (- (/ 1.0 8.0)) (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x827 ?x829 ?x829 ?x829)) ?x869 (* (- (/ 1.0 4.0)) (* ?x66 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829 ?x969)) (* (- (/ 1.0 8.0)) (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829 ?x829)) ?x983 ?x871 (* (/ 1.0 4.0) (* ?x820 ?x820 ?x827 ?x827 ?x827 ?x829 ?x829 ?x969)) (* (/ 1.0 8.0) (* ?x69 ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829)) (* (- (/ 1.0 32.0)) (* ?x69 ?x820 ?x820 ?x827 ?x969 ?x969 ?x969)) (* (- (/ 1.0 16.0)) (* ?x820 ?x827 ?x827 ?x969 ?x969 ?x969 ?x969)) (* (/ 1.0 16.0) (* ?x66 ?x820 ?x827 ?x969 ?x969 ?x969 ?x969)) ?x1359 ?x393 (* (/ 1.0 4.0) (* ?x820 ?x820 ?x827 ?x827 ?x827 ?x827 ?x829 ?x829 ?x969)) (* (- (/ 1.0 4.0)) (* ?x66 ?x820 ?x820 ?x827 ?x827 ?x827 ?x829 ?x829 ?x969)))))
 (let (($x770 (<= ?x1064 0.0)))
 (let (($x226 (not $x770)))
 (let (($x775 (>= ?x1064 0.0)))
 (let ((?x559 (* a00 d!1)))
 (let ((?x1100 (+ (* 2 (* b!2 y!0)) ?x559 (* (- 1) (* d!1 a!3)) (* (- 2) (* y00 b!2)))))
 (let (($x702 (>= ?x1100 0)))
 (let (($x1489 (= 0 ?x1100)))
 (let ((@x1344 (symm (commutativity (= $x1489 (= ?x1100 0))) (= (= ?x1100 0) $x1489))))
 (let (($x443 (= ?x1100 0)))
 (let ((?x1432 (* ?x820 ?x820 ?x820 ?x827 ?x969 ?x969)))
 (let ((?x107 (* (- (/ 1.0 4.0)) ?x1432)))
 (let ((?x1417 (* ?x820 ?x820 ?x827 ?x827 ?x827 ?x829 ?x829)))
 (let ((?x1110 (* (- (/ 1.0 4.0)) ?x1417)))
 (let ((?x1383 (* ?x820 ?x820 ?x820 ?x820 ?x820 ?x969 ?x969)))
 (let ((?x1362 (* (- (/ 1.0 32.0)) ?x1383)))
 (let ((?x1382 (* ?x820 ?x820 ?x820 ?x820 ?x820 ?x829 ?x969)))
 (let ((?x1357 (* (- (/ 1.0 16.0)) ?x1382)))
 (let ((?x1361 (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x829 ?x829 ?x969 ?x969)))
 (let ((?x1002 (* (- (/ 3.0 16.0)) ?x1361)))
 (let ((?x1355 (* ?x820 ?x820 ?x820 ?x820 ?x820 ?x829 ?x829)))
 (let ((?x1356 (* (- (/ 1.0 32.0)) ?x1355)))
 (let ((?x1306 (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x969)))
 (let ((?x672 (* (- (/ 1.0 8.0)) ?x1306)))
 (let ((?x1297 (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x969 ?x969)))
 (let ((?x509 (* (- (/ 3.0 16.0)) ?x1297)))
 (let ((?x1294 (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x969 ?x969 ?x969 ?x969)))
 (let ((?x732 (* (- (/ 1.0 16.0)) ?x1294)))
 (let ((?x1205 (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829 ?x969 ?x969)))
 (let ((?x1302 (* (- (/ 3.0 16.0)) ?x1205)))
 (let ((?x1150 (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x829 ?x829)))
 (let ((?x210 (* (- (/ 3.0 16.0)) ?x1150)))
 (let ((?x1145 (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829 ?x829 ?x969)))
 (let ((?x399 (* (- (/ 1.0 16.0)) ?x1145)))
 (let ((?x1037 (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x829 ?x969 ?x969 ?x969)))
 (let ((?x1211 (* (- (/ 3.0 16.0)) ?x1037)))
 (let ((?x995 (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x969 ?x969 ?x969 ?x969)))
 (let ((?x235 (* (- (/ 1.0 16.0)) ?x995)))
 (let ((?x971 (* ?x820 ?x820 ?x820 ?x820 ?x820 ?x969 ?x969 ?x969 ?x969)))
 (let ((?x882 (* (- (/ 1.0 64.0)) ?x971)))
 (let ((?x967 (* ?x820 ?x820 ?x820 ?x827 ?x829 ?x969)))
 (let ((?x153 (* (- (/ 1.0 2.0)) ?x967)))
 (let ((?x885 (* ?x820 ?x820 ?x820 ?x820 ?x820 ?x829 ?x969 ?x969 ?x969)))
 (let ((?x959 (* (- (/ 3.0 64.0)) ?x885)))
 (let ((?x845 (* ?x820 ?x820 ?x827 ?x827 ?x827 ?x829 ?x969)))
 (let ((?x385 (* (- (/ 1.0 2.0)) ?x845)))
 (let ((?x830 (* ?x820 ?x820 ?x827 ?x827 ?x829 ?x829)))
 (let ((?x1151 (* (- (/ 1.0 4.0)) ?x830)))
 (let ((?x718 (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x969 ?x969)))
 (let ((?x847 (* (- (/ 3.0 8.0)) ?x718)))
 (let ((?x644 (* ?x820 ?x820 ?x820 ?x820 ?x969 ?x969)))
 (let ((?x841 (* (- (/ 1.0 16.0)) ?x644)))
 (let ((?x638 (* ?x820 ?x820 ?x969 ?x969 ?x969)))
 (let ((?x583 (* (/ 1.0 32.0) ?x638)))
 (let ((?x592 (* ?x820 ?x820 ?x820 ?x820 ?x820 ?x829 ?x829 ?x969 ?x969)))
 (let ((?x595 (* (- (/ 3.0 64.0)) ?x592)))
 (let ((?x585 (* ?x820 ?x820 ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x969)))
 (let ((?x440 (* (- (/ 1.0 64.0)) ?x585)))
 (let ((?x497 (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x829 ?x829 ?x829 ?x969)))
 (let ((?x1010 (* (- (/ 1.0 16.0)) ?x497)))
 (let ((?x468 (* ?x820 ?x820 ?x827 ?x827 ?x827 ?x969 ?x969)))
 (let ((?x156 (* (- (/ 1.0 4.0)) ?x468)))
 (let ((?x434 (* ?x820 ?x820 ?x827 ?x827 ?x969 ?x969)))
 (let ((?x964 (* (- (/ 1.0 4.0)) ?x434)))
 (let ((?x425 (* ?x820 ?x820 ?x820 ?x827 ?x829 ?x829)))
 (let ((?x143 (* (- (/ 1.0 4.0)) ?x425)))
 (let ((?x395 (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x829)))
 (let ((?x397 (* (- (/ 1.0 16.0)) ?x395)))
 (let ((?x389 (* ?x820 ?x820 ?x820 ?x820 ?x827 ?x829 ?x969)))
 (let ((?x500 (* (- (/ 3.0 8.0)) ?x389)))
 (let ((?x329 (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x969)))
 (let ((?x689 (* (- (/ 3.0 4.0)) ?x329)))
 (let ((?x275 (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x829)))
 (let ((?x507 (* (- (/ 3.0 8.0)) ?x275)))
 (let ((?x228 (* ?x820 ?x820 ?x820 ?x827 ?x827 ?x829 ?x969 ?x969 ?x969)))
 (let ((?x1532 (* (- (/ 3.0 16.0)) ?x228)))
 (let ((?x223 (* ?x820 ?x827 ?x969 ?x969 ?x969)))
 (let ((?x391 (* (/ 1.0 16.0) ?x223)))
 (let ((?x164 (* ?x820 ?x820 ?x827 ?x827 ?x829 ?x969)))
 (let ((?x1351 (* (- (/ 1.0 2.0)) ?x164)))
 (let ((?x1246 (+ ?x1351 ?x391 ?x1532 ?x507 ?x689 ?x500 ?x397 ?x143 ?x964 ?x156 ?x1010 ?x440 ?x595 ?x583 ?x841 ?x847 ?x1151 ?x385 ?x959 ?x153 ?x882 ?x235 ?x1211 ?x399 ?x210 ?x1302 ?x732 ?x509 ?x672 ?x1356 ?x1002 ?x1357 ?x1362 ?x1110 ?x107)))
 (let ((?x1329 (* ?x820 ?x829)))
 (let ((?x1334 (* (/ 1.0 2.0) ?x1329)))
 (let ((?x1032 (* ?x66 ?x969)))
 (let ((?x1030 (* ?x827 ?x969)))
 (let ((?x1018 (* (- 1.0) ?x1030)))
 (let ((?x1020 (* ?x69 ?x820)))
 (let ((?x312 (* (- (/ 1.0 2.0)) ?x1020)))
 (let ((?x597 (* (+ ?x312 ?x1018 ?x1032 ?x1334) ?x1246)))
 (let (($x1152 (= ?x597 0.0)))
 (let (($x406 (not $x1152)))
 (let (($x1090 (= ?x1064 0.0)))
 (let (($x455 (not $x1090)))
 (let (($x1146 (or $x455 $x406)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let ((?x35 (* a00 d00)))
 (let (($x1034 (= (+ ?x35 ?x113 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x1559 (and $x1034 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x443 $x1146)))
 (let ((?x361 (+ (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x829 ?x829 ?x827 ?x827 ?x827)) (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x829 ?x829 ?x827 ?x827)) (* (/ 1.0 16.0) (* ?x820 ?x969 ?x969 ?x969 ?x827)) (* (- (/ 1.0 16.0)) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x969 ?x827 ?x827)) ?x1356 ?x1357 ?x1362 (* (- (/ 3.0 16.0)) (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x829 ?x827)) (* (- (/ 3.0 8.0)) (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x969 ?x827)) (* (- (/ 3.0 16.0)) (* ?x820 ?x820 ?x820 ?x820 ?x969 ?x969 ?x827)) (* (- (/ 3.0 8.0)) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x827 ?x827)) (* (- (/ 3.0 4.0)) (* ?x820 ?x820 ?x820 ?x829 ?x969 ?x827 ?x827)) (* (- (/ 3.0 8.0)) (* ?x820 ?x820 ?x820 ?x969 ?x969 ?x827 ?x827)) (* (- (/ 1.0 2.0)) (* ?x820 ?x820 ?x829 ?x969 ?x827 ?x827 ?x827)) (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x969 ?x969 ?x827 ?x827 ?x827)) ?x397 ?x672 ?x841 (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x827)) (* (- (/ 1.0 2.0)) (* ?x820 ?x820 ?x820 ?x829 ?x969 ?x827)) (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x820 ?x969 ?x969 ?x827)) (* (- (/ 1.0 2.0)) (* ?x820 ?x820 ?x829 ?x969 ?x827 ?x827)) (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x969 ?x969 ?x827 ?x827)) ?x583 ?x440 ?x595 ?x959 ?x882 (* (- (/ 1.0 16.0)) (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x969 ?x827)) (* (- (/ 3.0 16.0)) (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x829 ?x969 ?x969 ?x827)) (* (- (/ 3.0 16.0)) (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x969 ?x969 ?x969 ?x827)) (* (- (/ 1.0 16.0)) (* ?x820 ?x820 ?x820 ?x820 ?x969 ?x969 ?x969 ?x969 ?x827)) (* (- (/ 3.0 16.0)) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x969 ?x969 ?x827 ?x827)) (* (- (/ 3.0 16.0)) (* ?x820 ?x820 ?x820 ?x829 ?x969 ?x969 ?x969 ?x827 ?x827)) (* (- (/ 1.0 16.0)) (* ?x820 ?x820 ?x820 ?x969 ?x969 ?x969 ?x969 ?x827 ?x827)))))
 (let ((?x268 (+ ?x1334 (* (- 1.0) (* ?x969 ?x827)) (* ?x969 ?x66) (* (- (/ 1.0 2.0)) (* ?x820 ?x69)))))
 (let ((?x949 (* (- (/ 1.0 32.0)) (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x969 ?x827 ?x827 ?x69))))
 (let ((?x1122 (* (/ 1.0 16.0) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x969 ?x969 ?x827 ?x827 ?x66))))
 (let ((?x933 (* (- (/ 1.0 16.0)) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x969 ?x969 ?x827 ?x827 ?x827))))
 (let ((?x313 (* (/ 1.0 32.0) (* ?x820 ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x829 ?x969 ?x827 ?x827))))
 (let ((?x1324 (+ (* (/ 1.0 8.0) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x827 ?x827 ?x827)) (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x829 ?x829 ?x969 ?x827 ?x827 ?x827 ?x827)) (* (/ 1.0 4.0) (* ?x820 ?x820 ?x829 ?x829 ?x969 ?x827 ?x827 ?x827 ?x66)) (* (- (/ 1.0 8.0)) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x827 ?x827 ?x827 ?x69)) (* (/ 1.0 8.0) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x829 ?x827 ?x827)) (* (- (/ 1.0 4.0)) (* ?x820 ?x820 ?x829 ?x829 ?x969 ?x827 ?x827 ?x827)) (* (/ 1.0 4.0) (* ?x820 ?x820 ?x829 ?x829 ?x969 ?x827 ?x827 ?x66)) (* (- (/ 1.0 8.0)) (* ?x820 ?x820 ?x820 ?x829 ?x829 ?x827 ?x827 ?x69)) (* (- (/ 1.0 32.0)) (* ?x820 ?x820 ?x829 ?x969 ?x969 ?x969 ?x827)) (* (/ 1.0 16.0) (* ?x820 ?x969 ?x969 ?x969 ?x969 ?x827 ?x827)) (* (- (/ 1.0 16.0)) (* ?x820 ?x969 ?x969 ?x969 ?x969 ?x827 ?x66)) (* (/ 1.0 32.0) (* ?x820 ?x820 ?x969 ?x969 ?x969 ?x827 ?x69)) ?x313 ?x933 ?x1122 ?x949)))
 (let ((?x1517 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x250 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x113 (* 2 (* y!0 b00))) 0)))
 (let (($x198 (and $x250 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x1517 0) (or (not (= ?x1324 0.0)) (not (= (* ?x268 ?x361) 0.0))))))
 (let (($x463 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1566 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1563 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1557 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1554 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x1565 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) ?x1554 ?x1557 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x1563 ?x1566 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x175 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x259 (+ ?x175 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x515 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x514 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x66))))
 (let ((?x512 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x511 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63))))
 (let ((?x501 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63 ?x69)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x69)) ?x511 ?x512 ?x514 ?x515)))
 (let ((?x48 (* a d)))
 (let ((?x182 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let ((?x35 (* a00 d00)))
 (let (($x145 (= (+ ?x35 (* (- 1) (* a d00)) ?x113 (* 2 (* y b00))) 0)))
 (and $x145 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x182 0) (or (not (= ?x501 0.0)) (not (= (* ?x259 ?x1565) 0.0)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x446 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x792 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1426 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1154 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792 ?x792)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x792)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x1426 ?x1426 ?x1426 ?x792 ?x792)))))
 (let ((?x336 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x849 (* ?x66 ?x61)))
 (let ((?x1158 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1426)) (* (- 1.0) (* ?x61 ?x792)) ?x849 ?x336) ?x1154)))
 (let ((?x137 (+ (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x264 (* ?x137 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x849 ?x336))))
 (let (($x1260 (or (not (= ?x264 0.0)) (not (= ?x1158 0.0)))))
 (let ((?x734 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1019 (= ?x734 0)))
 (let ((?x1066 (* d00 a)))
 (let ((?x1500 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1066)))
 (and (= ?x1500 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1019 $x1260))))))))))))))))))) :qid k!33))
 ))
 (let ((?x1103 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x1566 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1563 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x1557 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63))))
 (let ((?x1554 (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x59 (to_real a)))
 (let ((?x1565 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x63)) (* (- (/ 3.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 3.0 8.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x56 ?x59 ?x61 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x63)) (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x61 ?x61)) (* (- (/ 3.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x61 ?x61 ?x61)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63)) ?x1554 ?x1557 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x1563 ?x1566 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)))))
 (let ((?x175 (* (/ 1.0 2.0) (* ?x56 ?x59))))
 (let ((?x259 (+ ?x175 (* (- 1.0) (* ?x61 ?x63)) (* ?x61 (to_real y00)) (* (- (/ 1.0 2.0)) (* ?x56 (to_real a00))))))
 (let ((?x69 (to_real a00)))
 (let ((?x515 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x69))))
 (let ((?x66 (to_real y00)))
 (let ((?x514 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x66))))
 (let ((?x512 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63))))
 (let ((?x511 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63))))
 (let ((?x501 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x63 ?x69)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x61 ?x63 ?x63 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x63 ?x63 ?x69)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x59 ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 16.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x63 ?x69)) ?x511 ?x512 ?x514 ?x515)))
 (let ((?x48 (* a d)))
 (let ((?x182 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let ((?x35 (* a00 d00)))
 (let (($x145 (= (+ ?x35 (* (- 1) (* a d00)) ?x113 (* 2 (* y b00))) 0)))
 (let (($x1544 (and $x145 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x182 0) (or (not (= ?x501 0.0)) (not (= (* ?x259 ?x1565) 0.0))))))
 (let ((?x792 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x1426 (+ ?x59 ?x61)))
 (let ((?x1154 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792 ?x792)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x792)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x1426 ?x1426 ?x1426 ?x792 ?x792)))))
 (let ((?x336 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x849 (* ?x66 ?x61)))
 (let ((?x1158 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1426)) (* (- 1.0) (* ?x61 ?x792)) ?x849 ?x336) ?x1154)))
 (let ((?x137 (+ (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let (($x400 (not (= (* ?x137 (+ ?x175 (* (- 1.0) (* ?x63 ?x61)) ?x849 ?x336)) 0.0))))
 (let (($x1260 (or $x400 (not (= ?x1158 0.0)))))
 (let ((?x734 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1019 (= ?x734 0)))
 (let ((?x1066 (* d00 a)))
 (let (($x506 (= (+ (* 2 ?x112) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x1066) 0)))
 (let (($x150 (and $x506 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1019 $x1260)))
 (rewrite (= $x150 $x1544))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x957 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x63 (to_real y)))
 (let ((?x792 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1426 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1154 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792 ?x792)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x792)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x1426 ?x1426 ?x1426 ?x792 ?x792)))))
 (let ((?x336 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x849 (* ?x66 ?x61)))
 (let ((?x1158 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1426)) (* (- 1.0) (* ?x61 ?x792)) ?x849 ?x336) ?x1154)))
 (let ((?x137 (+ (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x264 (* ?x137 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x849 ?x336))))
 (let (($x1260 (or (not (= ?x264 0.0)) (not (= ?x1158 0.0)))))
 (let ((?x734 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1019 (= ?x734 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let (($x1089 (= (+ ?x113 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x1089 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1019 $x1260))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x295 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x792 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1426 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1154 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792 ?x792)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x792)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x1426 ?x1426 ?x1426 ?x792 ?x792)))))
 (let ((?x336 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x849 (* ?x66 ?x61)))
 (let ((?x1158 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1426)) (* (- 1.0) (* ?x61 ?x792)) ?x849 ?x336) ?x1154)))
 (let ((?x137 (+ (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x264 (* ?x137 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x849 ?x336))))
 (let (($x1260 (or (not (= ?x264 0.0)) (not (= ?x1158 0.0)))))
 (let ((?x734 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1019 (= ?x734 0)))
 (let ((?x1066 (* d00 a)))
 (let ((?x1500 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1066)))
 (let (($x150 (and (= ?x1500 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x1019 $x1260)))
 (let ((?x35 (* a00 d00)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let (($x1161 (and (= (+ ?x113 ?x35 (* 2 (* b00 y)) (* (- 1) ?x1066)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1019 $x1260)))
 (rewrite (= $x1161 $x150))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x81 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x87 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x85 (to_real (+ a b))))
 (let ((?x94 (- (* (to_real (- 1)) ?x85 ?x85 ?x58 ?x58 ?x87 ?x87 ?x87) (* ?x85 ?x85 ?x58 ?x58 ?x87 ?x87))))
 (let ((?x98 (- (+ ?x94 (* ?x62 ?x62 ?x62 ?x58 ?x87)) (* ?x85 ?x85 ?x85 ?x62 ?x58 ?x58 ?x58 ?x87 ?x87))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x100 (= (* (- (+ (- (* ?x85 ?x58) (* ?x57 ?x62 ?x87)) ?x67) ?x70) ?x98) ?x81)))
 (let ((?x59 (to_real a)))
 (let ((?x75 (- (* (to_real (- 1)) ?x59 ?x59 ?x58 ?x58 ?x63 ?x63 ?x63) (* ?x59 ?x59 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x79 (- (+ ?x75 (* ?x62 ?x62 ?x62 ?x58 ?x63)) (* ?x59 ?x59 ?x59 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let (($x82 (= (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x79) ?x81)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x82) (not $x100))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x418 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x63 (to_real y)))
 (let ((?x792 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x59 (to_real a)))
 (let ((?x1426 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x1154 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792 ?x792)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x1426 ?x1426 ?x792 ?x792)) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x792)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x61 ?x1426 ?x1426 ?x1426 ?x792 ?x792)))))
 (let ((?x336 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x849 (* ?x66 ?x61)))
 (let ((?x1158 (* (+ (* (/ 1.0 2.0) (* ?x56 ?x1426)) (* (- 1.0) (* ?x61 ?x792)) ?x849 ?x336) ?x1154)))
 (let ((?x137 (+ (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (- (/ 1.0 4.0)) (* ?x63 ?x63 ?x56 ?x56 ?x59 ?x59)) (* (/ 1.0 16.0) (* ?x63 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 16.0)) (* ?x63 ?x63 ?x56 ?x56 ?x56 ?x61 ?x59 ?x59 ?x59)))))
 (let ((?x264 (* ?x137 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x849 ?x336))))
 (let (($x1260 (or (not (= ?x264 0.0)) (not (= ?x1158 0.0)))))
 (let ((?x734 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x1019 (= ?x734 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x112 (* b00 y00)))
 (let ((?x113 (* (- 2) ?x112)))
 (let (($x1089 (= (+ ?x113 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x1161 (and $x1089 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x1019 $x1260)))
 (let ((?x81 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x87 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x85 (to_real (+ a b))))
 (let ((?x94 (- (* (to_real (- 1)) ?x85 ?x85 ?x58 ?x58 ?x87 ?x87 ?x87) (* ?x85 ?x85 ?x58 ?x58 ?x87 ?x87))))
 (let ((?x98 (- (+ ?x94 (* ?x62 ?x62 ?x62 ?x58 ?x87)) (* ?x85 ?x85 ?x85 ?x62 ?x58 ?x58 ?x58 ?x87 ?x87))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x91 (- (+ (- (* ?x85 ?x58) (* ?x57 ?x62 ?x87)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x75 (- (* (to_real (- 1)) ?x59 ?x59 ?x58 ?x58 ?x63 ?x63 ?x63) (* ?x59 ?x59 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x79 (- (+ ?x75 (* ?x62 ?x62 ?x62 ?x58 ?x63)) (* ?x59 ?x59 ?x59 ?x62 ?x58 ?x58 ?x58 ?x63 ?x63))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x103 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x71 ?x79) ?x81)) (not (= (* ?x91 ?x98) ?x81))))))
 (rewrite (= $x103 $x1161)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x1133 (mp (mp @x105 (quant-intro (proof-bind ?x418) (= $x104 $x957)) $x957) (rewrite (= $x957 $x957)) $x957)))
 (let ((@x1471 (mp (mp @x1133 (quant-intro (proof-bind ?x295) (= $x957 $x446)) $x446) (quant-intro (proof-bind ?x1103) (= $x446 $x463)) $x463)))
 (let ((@x390 (mp (mp~ @x1471 (sk (~ $x463 $x198)) $x198) (rewrite (= $x198 $x1559)) $x1559)))
 (let ((@x831 (mp (and-elim @x390 $x443) @x1344 $x1489)))
 (let ((@x1407 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1489) $x702)) @x831 $x702)))
 (let (($x691 (<= ?x1100 0)))
 (let ((@x828 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1489) $x691)) @x831 $x691)))
 (let ((@x508 (unit-resolution ((_ th-lemma arith) (or $x775 (not $x702) (not $x691))) @x828 @x1407 (hypothesis (not $x775)) false)))
 (let (($x706 (= 0.0 ?x1064)))
 (let (($x1263 (not $x706)))
 (let ((@x1268 (monotonicity (symm (commutativity (= $x706 $x1090)) (= $x1090 $x706)) (= $x455 $x1263))))
 (let ((?x1236 (+ (* (/ 1.0 16.0) ?x497) (* (/ 1.0 64.0) ?x585) (* (/ 3.0 64.0) ?x592) (* (- (/ 1.0 32.0)) ?x638) (* (/ 1.0 16.0) ?x644) (* (/ 3.0 8.0) ?x718) (* (/ 1.0 4.0) ?x830) (* (/ 1.0 2.0) ?x845) (* (/ 3.0 64.0) ?x885) (* (/ 1.0 2.0) ?x967) (* (/ 1.0 64.0) ?x971) (* (/ 1.0 16.0) ?x995) (* (/ 3.0 16.0) ?x1037) (* (/ 1.0 16.0) ?x1145) (* (/ 3.0 16.0) ?x1150) (* (/ 3.0 16.0) ?x1205) (* (/ 1.0 16.0) ?x1294) (* (/ 3.0 16.0) ?x1297) (* (/ 1.0 8.0) ?x1306) (* (/ 1.0 32.0) ?x1355) (* (/ 3.0 16.0) ?x1361) (* (/ 1.0 16.0) ?x1382) (* (/ 1.0 32.0) ?x1383) (* (/ 1.0 4.0) ?x1417) (* (/ 1.0 4.0) ?x1432) (* (/ 1.0 2.0) ?x164) (* (- (/ 1.0 16.0)) ?x223) (* (/ 3.0 16.0) ?x228) (* (/ 3.0 8.0) ?x275) (* (/ 3.0 4.0) ?x329) (* (/ 3.0 8.0) ?x389) (* (/ 1.0 16.0) ?x395) (* (/ 1.0 4.0) ?x425) (* (/ 1.0 4.0) ?x434) (* (/ 1.0 4.0) ?x468))))
 (let (($x1416 (<= ?x1236 0.0)))
 (let (($x518 (not $x1416)))
 (let ((?x420 (+ ?x1010 ?x440 ?x595 ?x583 ?x841 ?x847 ?x1151 ?x385 ?x959 ?x153 ?x882 ?x235 ?x1211 ?x399 ?x210 ?x1302 ?x732 ?x509 ?x672 ?x1356 ?x1002 ?x1357 ?x1362 ?x1110 ?x107 ?x1351 ?x391 ?x1532 ?x507 ?x689 ?x500 ?x397 ?x143 ?x964 ?x156)))
 (let (($x1221 (>= ?x420 0.0)))
 (let (($x1486 (not $x1221)))
 (let (($x410 (= ?x420 0.0)))
 (let (($x579 (not $x410)))
 (let ((@x580 (hypothesis $x406)))
 (let (($x582 (or $x579 $x1152)))
 (let ((@x586 (lemma (unit-resolution ((_ th-lemma arith) $x582) @x580 (hypothesis $x410) false) $x582)))
 (let (($x590 (<= ?x420 0.0)))
 (let (($x1249 (>= ?x1236 0.0)))
 (let (($x783 (<= ?x597 0.0)))
 (let (($x262 (not $x783)))
 (let (($x236 (>= ?x597 0.0)))
 (let ((@x1447 (commutativity (= (= 0.0 ?x597) $x1152))))
 (let (($x778 (= 0.0 ?x597)))
 (let (($x656 (not $x778)))
 (let (($x1465 (not $x236)))
 (let ((@x1466 (hypothesis $x1465)))
 (let ((@x1457 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x656 $x236)) @x1466 $x656) (monotonicity @x1447 (= $x656 $x406)) $x406)))
 (let ((?x211 (+ ?x1334 ?x312 ?x1018 ?x1032)))
 (let (($x1195 (<= ?x211 0.0)))
 (let ((?x589 (+ ?x1020 (* (- 1.0) (to_real ?x559)))))
 (let (($x423 (>= ?x589 0.0)))
 (let (($x1273 (= 0.0 ?x589)))
 (let ((@x735 (symm (commutativity (= $x1273 (= ?x589 0.0))) (= (= ?x589 0.0) $x1273))))
 (let ((@x1420 (unit-resolution (hypothesis (not $x1273)) (mp ((_ th-lemma arith) (= ?x589 0.0)) @x735 $x1273) false)))
 (let ((@x1439 (lemma @x1420 $x1273)))
 (let (($x1042 (<= ?x589 0.0)))
 (let ((@x1469 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1273) $x1042)) @x1439 $x1042)))
 (let ((@x444 (unit-resolution ((_ th-lemma arith) (or (not $x691) (not $x702) $x1195 (not $x423) (not $x1042))) @x828 @x1407 @x1469 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1273) $x423)) @x1439 $x423) (hypothesis (not $x1195)) false)))
 (let ((@x453 (lemma @x444 $x1195)))
 (let ((@x1409 (unit-resolution ((_ th-lemma arith) (or (not $x1195) $x1416 $x236)) @x1466 (hypothesis $x518) @x453 false)))
 (let ((@x1406 ((_ th-lemma arith) (or $x518 $x1221))))
 (let ((@x575 (unit-resolution @x1406 (unit-resolution (lemma @x1409 (or $x1416 $x236)) @x1466 $x1416) $x1221)))
 (let (($x714 (>= ?x211 0.0)))
 (let ((?x781 (+ ?x1032 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x1131 (>= ?x781 0.0)))
 (let (($x1118 (= 0.0 ?x781)))
 (let ((@x861 (symm (commutativity (= $x1118 (= ?x781 0.0))) (= (= ?x781 0.0) $x1118))))
 (let ((@x1493 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1118) $x1131)) (mp ((_ th-lemma arith) (= ?x781 0.0)) @x861 $x1118) $x1131)))
 (let ((?x408 (+ ?x1030 (* (- 1.0) (to_real (* b!2 y!0))))))
 (let (($x1186 (<= ?x408 0.0)))
 (let ((@x953 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x408 0.0)) $x1186)) ((_ th-lemma arith) (= ?x408 0.0)) $x1186)))
 (let ((?x1068 (+ ?x1329 (* (- 1.0) (to_real (* d!1 a!3))))))
 (let (($x1419 (>= ?x1068 0.0)))
 (let (($x319 (= 0.0 ?x1068)))
 (let ((@x1311 (symm (commutativity (= $x319 (= ?x1068 0.0))) (= (= ?x1068 0.0) $x319))))
 (let ((@x1227 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x319) $x1419)) (mp ((_ th-lemma arith) (= ?x1068 0.0)) @x1311 $x319) $x1419)))
 (let ((@x1229 ((_ th-lemma arith) @x1227 @x828 @x953 @x1493 (hypothesis (not $x714)) (hypothesis $x1042) false)))
 (let ((@x1413 (unit-resolution (lemma @x1229 (or (not $x1042) $x714)) @x1469 $x714)))
 (let (($x1467 (not $x1249)))
 (let ((@x1470 (hypothesis $x1467)))
 (let ((@x1474 (unit-resolution ((_ th-lemma arith) (or (not $x714) $x1249 $x236)) @x1466 @x1470 @x1413 false)))
 (let ((@x1405 ((_ th-lemma arith) (or $x590 $x1467))))
 (let ((@x412 (unit-resolution @x1405 (unit-resolution (lemma @x1474 (or $x1249 $x236)) @x1466 $x1249) $x590)))
 (let ((@x1524 ((_ th-lemma arith triangle-eq) (or $x410 (not $x590) $x1486))))
 (let ((@x578 (unit-resolution @x586 (unit-resolution @x1524 @x412 @x575 $x410) @x1457 false)))
 (let ((@x449 (mp @x580 (monotonicity (symm @x1447 (= $x1152 $x778)) (= $x406 $x656)) $x656)))
 (let ((@x162 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x778 $x262 $x1465)) @x449 (lemma @x578 $x236) $x262)))
 (let ((@x263 (unit-resolution ((_ th-lemma arith) (or (not $x1195) $x1249 $x783)) (hypothesis $x262) @x1470 @x453 false)))
 (let ((@x171 (unit-resolution @x1405 (unit-resolution (lemma @x263 (or $x1249 $x783)) @x162 $x1249) $x590)))
 (let ((@x437 (unit-resolution @x1406 (unit-resolution @x1524 @x171 (unit-resolution @x586 @x580 $x579) $x1486) $x518)))
 (let ((@x479 (unit-resolution ((_ th-lemma arith) (or (not $x714) $x1416 $x783)) @x162 @x1413 @x437 false)))
 (let ((@x1275 (mp (unit-resolution (and-elim @x390 $x1146) (lemma @x479 $x1152) $x455) @x1268 $x1263)))
 (let ((@x767 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x706 $x226 (not $x775))) @x1275 (or $x226 (not $x775)))))
 (unit-resolution ((_ th-lemma arith) (or $x770 (not $x702) (not $x691))) @x828 @x1407 (unit-resolution @x767 (lemma @x508 $x775) $x226) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       42
 :arith-eq-adapter                40
 :arith-bound-propagations-cheap  50
 :arith-bound-propagations-lp     8
 :arith-conflicts                 130
 :arith-diseq                     37
 :arith-gcd-calls                 6
 :arith-grobner-calls             7
 :arith-grobner-conflicts         3
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 17
 :arith-lower                     79
 :arith-make-feasible             55
 :arith-max-columns               111
 :arith-max-rows                  23
 :arith-nla-explanations          89
 :arith-nla-lemmas                129
 :arith-patches                   6
 :arith-patches-success           6
 :arith-propagations              50
 :arith-upper                     94
 :conflicts                       12
 :decisions                       126
 :del-clause                      141
 :final-checks                    49
 :max-memory                      7.53
 :memory                          3.28
 :mk-bool-var                     270
 :mk-clause                       210
 :num-allocs                      90911493
 :num-checks                      1
 :propagations                    148
 :rlimit-count                    10149
 :time                            0.15
 :total-time                      0.17)
