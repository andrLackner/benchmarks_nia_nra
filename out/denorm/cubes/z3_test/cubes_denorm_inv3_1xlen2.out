unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x437 (* k!2 k!2 n!0)))
 (let ((?x456 (+ k!2 c!3)))
 (let ((?x137 (+ k!2 m!1)))
 (let ((?x279 (+ 1 n!0)))
 (let ((?x238 (* k!2 k!2)))
 (let ((?x162 (* c!3 c!3)))
 (let ((?x154 (+ (* n!0 c!3 c!3) ?x162 ?x238 (* ?x279 ?x279 ?x137 ?x456 ?x456 ?x456) (* 2 (* k!2 c!3)) (* 2 (* k!2 n!0 c!3)) ?x437)))
 (let (($x324 (<= ?x154 0)))
 (let ((?x231 (+ m!1 (* (- 6) n!0))))
 (let (($x100 (<= ?x231 6)))
 (let (($x230 (= ?x231 6)))
 (let ((?x291 (* k!2 n!0)))
 (let ((?x166 (* (- 3) c!3)))
 (let ((?x212 (* 2 n!0)))
 (let ((?x219 (* m!1 n!0)))
 (let ((?x211 (* (- 3) k!2)))
 (let ((?x133 (* ?x154 (+ 3 ?x211 ?x219 ?x212 ?x166 ?x291))))
 (let (($x144 (= ?x133 0)))
 (let (($x263 (not $x144)))
 (let ((?x151 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x277 (= ?x151 1)))
 (let ((?x146 (* (- 1) ?x291)))
 (let ((?x299 (* 3 c!3)))
 (let ((?x292 (* (- 2) n!0)))
 (let ((?x123 (+ k!2 ?x292 ?x299 ?x146)))
 (let (($x116 (= ?x123 1)))
 (let ((?x242 (* 18 c!3)))
 (let ((?x227 (* (- 1) ?x238)))
 (let ((?x228 (* (- 9) n!0)))
 (let ((?x229 (* 5 k!2)))
 (let (($x134 (and $x230 (= (+ ?x229 (* 9 (* n!0 c!3)) ?x228 ?x227 ?x242) 4) $x116 $x277 $x263)))
 (let ((?x165 (+ ?x238 (* ?x279 ?x279 ?x137 (+ c!3 k!2) (+ c!3 k!2) (+ c!3 k!2)) (* c!3 c!3 n!0) (* 2 (* c!3 k!2 n!0)) ?x437 ?x162 (* 2 (* c!3 k!2)))))
 (let (($x251 (and $x230 (= (+ ?x242 ?x229 ?x228 ?x227 (* 9 (* c!3 n!0))) 4) (= (+ ?x299 k!2 ?x292 ?x146) 1) $x277 (not (= (* ?x165 (+ 3 ?x166 ?x211 ?x212 ?x291 ?x219)) 0)))))
 (let (($x225 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x404 (+ 3 ?x216 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x445 (* 2 (* c k))))
 (let ((?x425 (* c c)))
 (let ((?x419 (* k k n)))
 (let ((?x446 (* 2 (* c k n))))
 (let ((?x416 (* c c n)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let ((?x49 (* k k)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x207 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x203 (= ?x207 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* (+ ?x49 ?x369 ?x416 ?x446 ?x419 ?x425 ?x445) ?x404) 0)))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x254 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x347 (+ 3 ?x216 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x321 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x321 (- 4)) (= (+ ?x216 (* n k) (* (- 1) k) ?x59) (- 1)) $x246 (not (= (* (+ (* ?x336 ?x68 ?x68) ?x369) ?x347) 0))))))))))))))) :qid k!34))
 ))
 (let ((?x127 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x404 (+ 3 ?x216 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x445 (* 2 (* c k))))
 (let ((?x425 (* c c)))
 (let ((?x419 (* k k n)))
 (let ((?x446 (* 2 (* c k n))))
 (let ((?x416 (* c c n)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let ((?x49 (* k k)))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x207 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x203 (= ?x207 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x236 (and $x119 $x203 $x255 $x293 (not (= (* (+ ?x49 ?x369 ?x416 ?x446 ?x419 ?x425 ?x445) ?x404) 0)))))
 (let ((?x371 (* (+ (* ?x336 ?x68 ?x68) ?x369) (+ 3 ?x216 (* (- 4) k) (* ?x336 ?x71) (* (- 1) m) ?x59))))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x321 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x128 (and $x119 (= ?x321 (- 4)) (= (+ ?x216 (* n k) (* (- 1) k) ?x59) (- 1)) $x246 (not (= ?x371 0)))))
 (rewrite (= $x128 $x236))))))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x82 (= (* ?x77 (+ (* ?x68 ?x68 ?x72) (* ?x68 ?x68 ?x68 ?x71 ?x72 ?x72))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82))))))))))))))) :qid k!34))
 ))
 (let ((?x261 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x216 (* (- 3) c)))
 (let ((?x347 (+ 3 ?x216 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x336 (+ 1 n)))
 (let ((?x369 (* ?x336 ?x336 ?x71 ?x68 ?x68 ?x68)))
 (let (($x246 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x321 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x128 (and $x119 (= ?x321 (- 4)) (= (+ ?x216 (* n k) (* (- 1) k) ?x59) (- 1)) $x246 (not (= (* (+ (* ?x336 ?x68 ?x68) ?x369) ?x347) 0)))))
 (let ((?x80 (+ (* ?x68 ?x68 (+ n 1)) (* ?x68 ?x68 ?x68 ?x71 (+ n 1) (+ n 1)))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x80) 0))))))
 (rewrite (= $x85 $x128)))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x374 (mp (mp @x87 (quant-intro (proof-bind ?x261) (= $x86 $x254)) $x254) (rewrite (= $x254 $x254)) $x254)))
 (let ((@x103 (mp~ (mp @x374 (quant-intro (proof-bind ?x127) (= $x254 $x225)) $x225) (sk (~ $x225 $x251)) $x251)))
 (let ((@x109 (mp @x103 (rewrite (= $x251 $x134)) $x134)))
 (let ((@x380 (and-elim @x109 $x230)))
 (let ((@x346 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x100)) @x380 $x100)))
 (let (($x452 (>= ?x231 6)))
 (let ((@x313 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x452)) @x380 $x452)))
 (let (($x424 (<= ?x123 1)))
 (let ((@x302 (and-elim @x109 $x116)))
 (let ((@x376 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x116) $x424)) @x302 $x424)))
 (let (($x377 (>= ?x123 1)))
 (let ((@x359 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x116) $x377)) @x302 $x377)))
 (let (($x129 (<= ?x151 1)))
 (let ((@x179 (and-elim @x109 $x277)))
 (let ((@x352 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x277) $x129)) @x179 $x129)))
 (let (($x200 (>= ?x151 1)))
 (let ((@x438 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x277) $x200)) @x179 $x200)))
 (let ((@x362 (hypothesis (not $x324))))
 (let (($x2200 (not (>= ?x133 0))))
 (let (($x113 (<= ?x133 0)))
 (let (($x1687 (>= ?x154 0)))
 (let (($x1800 (not $x1687)))
 (let (($x353 (not $x113)))
 (let ((@x387 (hypothesis $x353)))
 (let ((@x99 ((_ th-lemma arith) @x387 @x362 @x359 @x376 @x438 @x352 @x438 @x352 @x438 @x352 @x359 @x376 @x438 @x352 @x359 @x376 @x438 @x352 @x359 @x376 @x359 @x376 @x313 @x346 @x438 @x352 false)))
 (let ((@x1785 ((_ th-lemma arith farkas 1 1 1) @x387 (hypothesis $x1687) (unit-resolution (lemma @x99 (or $x324 $x113)) @x387 $x324) false)))
 (let ((@x1842 ((_ th-lemma arith) @x387 (unit-resolution (lemma @x1785 (or $x1800 $x113)) @x387 $x1800) @x359 @x376 @x359 @x376 @x313 @x346 @x313 @x346 @x313 @x346 @x438 @x352 @x359 @x376 false)))
 (let ((@x2431 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x144 $x353 $x2200)) (and-elim @x109 $x263) (or $x353 $x2200))))
 (let ((@x2448 (unit-resolution @x2431 (lemma @x1842 $x113) $x2200)))
 (let ((@x2710 (lemma ((_ th-lemma arith) @x2448 @x362 @x438 @x352 @x438 @x352 @x359 @x376 @x313 @x346 false) $x324)))
 (let ((@x2714 ((_ th-lemma arith) @x2448 (hypothesis $x1800) @x313 @x346 @x313 @x346 @x438 @x352 @x313 @x346 @x438 @x352 @x359 @x376 @x313 @x346 false)))
 ((_ th-lemma arith farkas 1 1 1) @x2448 (lemma @x2714 $x1687) @x2710 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 86
 :arith-assert-diseq        31
 :arith-assert-lower        1209
 :arith-assert-upper        1279
 :arith-bound-prop          46
 :arith-branch-var          71
 :arith-conflicts           95
 :arith-eq-adapter          26
 :arith-fixed-eqs           198
 :arith-gcd-tests           1196
 :arith-gomory-cuts         58
 :arith-grobner             136
 :arith-ineq-splits         71
 :arith-max-min             9250
 :arith-nonlinear-bounds    157
 :arith-nonlinear-horner    1792
 :arith-num-rows            24
 :arith-offset-eqs          2
 :arith-patches             154
 :arith-patches_succ        13
 :arith-pivots              4282
 :arith-pseudo-nonlinear    249
 :arith-row-summations      43509
 :arith-tableau-max-columns 69
 :arith-tableau-max-rows    24
 :conflicts                 105
 :decisions                 392
 :del-clause                392
 :final-checks              435
 :max-memory                20.96
 :memory                    19.37
 :minimized-lits            22
 :mk-bool-var               697
 :mk-clause                 726
 :num-allocs                3547996794
 :num-checks                1
 :propagations              556
 :restarts                  1
 :rlimit-count              7484403
 :time                      7.20
 :total-time                7.21)
