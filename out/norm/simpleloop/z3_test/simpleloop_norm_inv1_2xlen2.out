unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1337 (* (- 1) x!1)))
 (let ((?x1336 (* (- 1) y!0)))
 (let ((?x1338 (+ y00 x00 ?x1336 ?x1337)))
 (let (($x916 (<= ?x1338 0)))
 (let (($x1284 (= ?x1338 0)))
 (let ((?x1242 (+ 1 y!0)))
 (let ((?x1296 (+ (- 1) x!1)))
 (let ((?x1307 (* ?x1296 ?x1296 ?x1296 ?x1296 ?x1296 ?x1296 ?x1242 ?x1242 ?x1242 ?x1242)))
 (let ((?x1288 (* (- 1) (* ?x1296 ?x1296 ?x1242 ?x1242 ?x1242 ?x1242 ?x1242))))
 (let ((?x1305 (* (- 1) (* y!0 y!0 y!0))))
 (let ((?x1291 (* (- 1) (* ?x1296 ?x1296 ?x1296 ?x1296 ?x1296 ?x1242 ?x1242))))
 (let ((?x1298 (* ?x1296 ?x1296 ?x1296 ?x1296 ?x1296 ?x1242 ?x1242 ?x1242 ?x1242 ?x1242)))
 (let ((?x1246 (* x!1 x!1)))
 (let ((?x1239 (* (- 1) (* ?x1296 ?x1296 ?x1296 ?x1242 ?x1242 ?x1242 ?x1242))))
 (let ((?x1067 (* (- 1) (* ?x1296 ?x1296 ?x1296 ?x1296 ?x1242 ?x1242 ?x1242))))
 (let ((?x1293 (* (- 1) (* y00 ?x1296 ?x1296 ?x1296 ?x1296 ?x1296 ?x1242 ?x1242 ?x1242 ?x1242))))
 (let ((?x1096 (* (- 1) (* x00 ?x1296 ?x1296 ?x1296 ?x1296 ?x1296 ?x1242 ?x1242 ?x1242 ?x1242))))
 (let ((?x1690 (* 3 x00)))
 (let ((?x1689 (* 3 y00)))
 (let ((?x1256 (+ ?x1689 ?x1690 (* (- 8) (* x00 y!0 y!0 y!0 x!1)) ?x1336 (* y00 y!0 y!0 y!0 y!0 x!1 x!1) (* x00 y!0 y!0 y!0 y!0) (* 4 (* x00 y!0 y!0 y!0)) (* y!0 y!0 y!0 x!1) ?x1096 (* y!0 y!0 x!1 x!1) (* (- 4) (* y00 x!1 x!1 x!1)) (* 2 (* y!0 x!1 x!1)) (* y00 y!0 y!0 y!0 y!0) (* (- 2) (* y00 y!0 y!0 y!0 y!0 x!1)) (* 4 (* y00 y!0 y!0 y!0)) ?x1337 ?x1293 (* (- 18) (* x00 y!0 x!1)) ?x1067 (* 8 (* x00 y!0)) (* (- 4) (* y00 y!0 y!0 x!1 x!1 x!1)) (* 4 (* y00 y!0 y!0 y!0 x!1 x!1)) (* 16 (* y00 y!0 x!1 x!1)) (* 2 (* x00 y!0 x!1 x!1 x!1 x!1)) (* (- 8) (* x00 y!0 x!1 x!1 x!1)) (* 16 (* x00 y!0 x!1 x!1)) (* (- 4) (* x00 x!1 x!1 x!1)) ?x1239 ?x1246 (* (- 7) (* x00 x!1)) (* x00 y!0 y!0 x!1 x!1 x!1 x!1) (* 8 (* y00 y!0 y!0)) ?x1298 ?x1291 ?x1305 ?x1288 ?x1307 (* 8 (* x00 y!0 y!0)) (* y!0 y!0 x!1) (* (- 1) (* y!0 x!1)) (* 2 (* y00 y!0 x!1 x!1 x!1 x!1)) (* y00 x!1 x!1 x!1 x!1) (* y00 y!0 y!0 x!1 x!1 x!1 x!1) (* (- 2) (* x00 y!0 y!0 y!0 y!0 x!1)) (* x00 y!0 y!0 y!0 y!0 x!1 x!1) (* (- 8) (* y00 y!0 y!0 y!0 x!1)) (* 12 (* y00 y!0 y!0 x!1 x!1)) (* (- 17) (* y00 y!0 y!0 x!1)) (* (- 18) (* y00 y!0 x!1)) (* 7 (* y00 x!1 x!1)) (* (- 7) (* y00 x!1)) (* 8 (* y00 y!0)) (* (- 2) (* y!0 y!0)) (* (- 4) (* x00 y!0 y!0 x!1 x!1 x!1)) (* 12 (* x00 y!0 y!0 x!1 x!1)) (* (- 17) (* x00 y!0 y!0 x!1)) (* x00 x!1 x!1 x!1 x!1) (* 7 (* x00 x!1 x!1)) (* (- 8) (* y00 y!0 x!1 x!1 x!1)) (* 4 (* x00 y!0 y!0 y!0 x!1 x!1)))))
 (let (($x296 (= ?x1256 0)))
 (let (($x911 (not $x296)))
 (let (($x1262 (and $x1284 $x911)))
 (let ((?x1330 (+ y!0 ?x1689 ?x1690 (* 8 (* y!0 x00)) (* 8 (* y!0 y!0 x00)) (* (- 1) (* x!1 1 1)) (* (- 1) (* y!0 1)) (* (- 1) (* x!1 y!0 1)) (* (- 1) (* x!1 1 y!0)) (* x!1 y!0 y!0) (* x!1 x!1 y!0 y!0) ?x1246 (* x!1 y!0) (* 2 (* x!1 x!1 y!0)) ?x1239 (* (- 7) (* x!1 x00)) (* 7 (* x!1 x!1 x00)) (* (- 4) (* x!1 x!1 x!1 x00)) (* x!1 x!1 x!1 x!1 x00) (* (- 18) (* x!1 y!0 x00)) (* 16 (* x!1 x!1 y!0 x00)) (* (- 8) (* x!1 x!1 x!1 y!0 x00)) (* 2 (* x!1 x!1 x!1 x!1 y!0 x00)) (* (- 17) (* x!1 y!0 y!0 x00)) (* 12 (* x!1 x!1 y!0 y!0 x00)) (* (- 4) (* x!1 x!1 x!1 y!0 y!0 x00)) (* x!1 x!1 x!1 x!1 y!0 y!0 x00) ?x1067 (* x!1 x!1 y!0 y!0 y!0 y!0 y00) (* (- 2) (* x!1 y!0 y!0 y!0 y!0 y00)) (* y!0 y!0 y!0 y!0 y00) (* 4 (* y!0 y!0 y!0 y00)) ?x1293 (* 8 (* y!0 y!0 y00)) (* 8 (* y!0 y00)) (* (- 7) (* x!1 y00)) (* 7 (* x!1 x!1 y00)) (* (- 18) (* x!1 y!0 y00)) (* 16 (* x!1 x!1 y!0 y00)) (* (- 17) (* x!1 y!0 y!0 y00)) (* 12 (* x!1 x!1 y!0 y!0 y00)) (* (- 8) (* x!1 y!0 y!0 y!0 y00)) (* 4 (* x!1 x!1 y!0 y!0 y!0 y00)) ?x1298 ?x1291 (* (- 1) (* y!0 1 1)) (* (- 1) (* y!0 y!0 1)) (* (- 1) (* y!0 1 y!0)) ?x1305 ?x1096 (* x!1 y!0 y!0 y!0) ?x1288 ?x1307 (* 4 (* y!0 y!0 y!0 x00)) (* (- 8) (* x!1 y!0 y!0 y!0 x00)) (* 4 (* x!1 x!1 y!0 y!0 y!0 x00)) (* y!0 y!0 y!0 y!0 x00) (* (- 2) (* x!1 y!0 y!0 y!0 y!0 x00)) (* x!1 x!1 y!0 y!0 y!0 y!0 x00) (* (- 4) (* x!1 x!1 x!1 y!0 y!0 y00)) (* x!1 x!1 x!1 x!1 y!0 y!0 y00) (* (- 4) (* x!1 x!1 x!1 y00)) (* x!1 x!1 x!1 x!1 y00) (* (- 8) (* x!1 x!1 x!1 y!0 y00)) (* 2 (* x!1 x!1 x!1 x!1 y!0 y00)))))
 (let (($x902 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x1330 0)))))
 (let (($x853 (exists ((x Int) (y Int) )(! (let ((?x1675 (* 2 (* x x x x y y00))))
 (let ((?x1591 (* x x x x y00)))
 (let ((?x1561 (* x x x x y y y00)))
 (let ((?x1678 (* (- 4) (* x x x y y y00))))
 (let ((?x1430 (* x x y y y y x00)))
 (let ((?x1445 (* (- 2) (* x y y y y x00))))
 (let ((?x1418 (* y y y y x00)))
 (let ((?x1444 (* 4 (* x x y y y x00))))
 (let ((?x1442 (* 4 (* y y y x00))))
 (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x976 (* (- 1) (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x1002 (* x y y y)))
 (let ((?x1000 (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x997 (* (- 1) (* y y y))))
 (let ((?x994 (* (- 1) (* y 1 y))))
 (let ((?x991 (* (- 1) (* y y 1))))
 (let ((?x985 (* (- 1) (* y 1 1))))
 (let ((?x1185 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100))))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x884 (* 4 (* x x y y y y00))))
 (let ((?x1705 (* 8 (* y y00))))
 (let ((?x1704 (* 8 (* y y y00))))
 (let ((?x852 (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x882 (* 4 (* y y y y00))))
 (let ((?x639 (* y y y y y00)))
 (let ((?x885 (* (- 2) (* x y y y y y00))))
 (let ((?x632 (* x x y y y y y00)))
 (let ((?x756 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100))))
 (let ((?x590 (* x x x x y y x00)))
 (let ((?x610 (* (- 4) (* x x x y y x00))))
 (let ((?x606 (* 2 (* x x x x y x00))))
 (let ((?x416 (* x x x x x00)))
 (let ((?x226 (* (- 1) (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x302 (* 2 (* x x y))))
 (let ((?x281 (* x y)))
 (let ((?x276 (* x x)))
 (let ((?x267 (* x x y y)))
 (let ((?x261 (* x y y)))
 (let ((?x255 (* (- 1) (* x 1 y))))
 (let ((?x251 (* (- 1) (* x y 1))))
 (let ((?x247 (* (- 1) (* y 1))))
 (let ((?x242 (* (- 1) (* x 1 1))))
 (let ((?x1692 (* 8 (* y y x00))))
 (let ((?x1691 (* 8 (* y x00))))
 (let ((?x1690 (* 3 x00)))
 (let ((?x1689 (* 3 y00)))
 (let ((?x2141 (+ y ?x1689 ?x1690 ?x1691 ?x1692 ?x242 ?x247 ?x251 ?x255 ?x261 ?x267 ?x276 ?x281 ?x302 ?x226 (* (- 7) (* x x00)) (* 7 (* x x x00)) (* (- 4) (* x x x x00)) ?x416 (* (- 18) (* x y x00)) (* 16 (* x x y x00)) (* (- 8) (* x x x y x00)) ?x606 (* (- 17) (* x y y x00)) (* 12 (* x x y y x00)) ?x610 ?x590 ?x756 ?x632 ?x885 ?x639 ?x882 ?x852 ?x1704 ?x1705 (* (- 7) (* x y00)) (* 7 (* x x y00)) (* (- 18) (* x y y00)) (* 16 (* x x y y00)) (* (- 17) (* x y y y00)) (* 12 (* x x y y y00)) (* (- 8) (* x y y y y00)) ?x884 ?x893 ?x1185 ?x985 ?x991 ?x994 ?x997 ?x1000 ?x1002 ?x976 ?x1175 ?x1442 (* (- 8) (* x y y y x00)) ?x1444 ?x1418 ?x1445 ?x1430 ?x1678 ?x1561 (* (- 4) (* x x x y00)) ?x1591 (* (- 8) (* x x x y y00)) ?x1675)))
 (let (($x98 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x98 (not (= ?x2141 0))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x479 (exists ((x Int) (y Int) )(! (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x852 (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1185 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100))))
 (let ((?x976 (* (- 1) (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x756 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100))))
 (let ((?x226 (* (- 1) (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x1000 (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x635 (+ (* (- 1) (* x00 ?x90 ?x100 ?x100)) ?x1000 ?x226 (* ?x90 ?x90 ?x100 ?x100) (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100) ?x756 (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100) ?x893 ?x976 (* ?x90 ?x100 ?x100 ?x100) (* (- 1) (* y00 ?x90 ?x100 ?x100)) ?x1185 ?x1175 ?x852 (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100) (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x635 0)))))))))))))) :qid k!26))
 ))
 (let ((?x1038 (lambda ((x Int) (y Int) )(let ((?x1675 (* 2 (* x x x x y y00))))
 (let ((?x1591 (* x x x x y00)))
 (let ((?x1561 (* x x x x y y y00)))
 (let ((?x1678 (* (- 4) (* x x x y y y00))))
 (let ((?x1430 (* x x y y y y x00)))
 (let ((?x1445 (* (- 2) (* x y y y y x00))))
 (let ((?x1418 (* y y y y x00)))
 (let ((?x1444 (* 4 (* x x y y y x00))))
 (let ((?x1442 (* 4 (* y y y x00))))
 (let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x976 (* (- 1) (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x1002 (* x y y y)))
 (let ((?x1000 (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x997 (* (- 1) (* y y y))))
 (let ((?x994 (* (- 1) (* y 1 y))))
 (let ((?x991 (* (- 1) (* y y 1))))
 (let ((?x985 (* (- 1) (* y 1 1))))
 (let ((?x1185 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100))))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x884 (* 4 (* x x y y y y00))))
 (let ((?x1705 (* 8 (* y y00))))
 (let ((?x1704 (* 8 (* y y y00))))
 (let ((?x852 (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x882 (* 4 (* y y y y00))))
 (let ((?x639 (* y y y y y00)))
 (let ((?x885 (* (- 2) (* x y y y y y00))))
 (let ((?x632 (* x x y y y y y00)))
 (let ((?x756 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100))))
 (let ((?x590 (* x x x x y y x00)))
 (let ((?x610 (* (- 4) (* x x x y y x00))))
 (let ((?x606 (* 2 (* x x x x y x00))))
 (let ((?x416 (* x x x x x00)))
 (let ((?x226 (* (- 1) (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x302 (* 2 (* x x y))))
 (let ((?x281 (* x y)))
 (let ((?x276 (* x x)))
 (let ((?x267 (* x x y y)))
 (let ((?x261 (* x y y)))
 (let ((?x255 (* (- 1) (* x 1 y))))
 (let ((?x251 (* (- 1) (* x y 1))))
 (let ((?x247 (* (- 1) (* y 1))))
 (let ((?x242 (* (- 1) (* x 1 1))))
 (let ((?x1692 (* 8 (* y y x00))))
 (let ((?x1691 (* 8 (* y x00))))
 (let ((?x1690 (* 3 x00)))
 (let ((?x1689 (* 3 y00)))
 (let ((?x2141 (+ y ?x1689 ?x1690 ?x1691 ?x1692 ?x242 ?x247 ?x251 ?x255 ?x261 ?x267 ?x276 ?x281 ?x302 ?x226 (* (- 7) (* x x00)) (* 7 (* x x x00)) (* (- 4) (* x x x x00)) ?x416 (* (- 18) (* x y x00)) (* 16 (* x x y x00)) (* (- 8) (* x x x y x00)) ?x606 (* (- 17) (* x y y x00)) (* 12 (* x x y y x00)) ?x610 ?x590 ?x756 ?x632 ?x885 ?x639 ?x882 ?x852 ?x1704 ?x1705 (* (- 7) (* x y00)) (* 7 (* x x y00)) (* (- 18) (* x y y00)) (* 16 (* x x y y00)) (* (- 17) (* x y y y00)) (* 12 (* x x y y y00)) (* (- 8) (* x y y y y00)) ?x884 ?x893 ?x1185 ?x985 ?x991 ?x994 ?x997 ?x1000 ?x1002 ?x976 ?x1175 ?x1442 (* (- 8) (* x y y y x00)) ?x1444 ?x1418 ?x1445 ?x1430 ?x1678 ?x1561 (* (- 4) (* x x x y00)) ?x1591 (* (- 8) (* x x x y y00)) ?x1675)))
 (let (($x98 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x2147 (and $x98 (not (= ?x2141 0)))))
 (let ((?x635 (+ (* (- 1) (* x00 ?x90 ?x100 ?x100)) ?x1000 ?x226 (* ?x90 ?x90 ?x100 ?x100) (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100) ?x756 (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100) ?x893 ?x976 (* ?x90 ?x100 ?x100 ?x100) (* (- 1) (* y00 ?x90 ?x100 ?x100)) ?x1185 ?x1175 ?x852 (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100) (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100))))
 (let (($x995 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x635 0)))))
 (rewrite (= $x995 $x2147))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x69 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (- (* (- 1) ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x44 (+ (- ?x40 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x49 (+ (- ?x44 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x53 (+ (- ?x49 (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36))))
 (let ((?x57 (- (- ?x53 (* ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x61 (- (+ ?x57 (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00))))
 (let ((?x64 (+ ?x61 (* ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x64 0))))))))))))) :qid k!26))
 ))
 (let ((?x1015 (lambda ((x Int) (y Int) )(let ((?x100 (+ 1 y)))
 (let ((?x90 (+ (- 1) x)))
 (let ((?x852 (* (- 1) (* y00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x1175 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x1185 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100))))
 (let ((?x976 (* (- 1) (* ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x893 (* ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100 ?x100)))
 (let ((?x756 (* (- 1) (* ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100))))
 (let ((?x226 (* (- 1) (* ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x1000 (* (- 1) (* x00 ?x90 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100))))
 (let ((?x635 (+ (* (- 1) (* x00 ?x90 ?x100 ?x100)) ?x1000 ?x226 (* ?x90 ?x90 ?x100 ?x100) (* x00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100) ?x756 (* y00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100) ?x893 ?x976 (* ?x90 ?x100 ?x100 ?x100) (* (- 1) (* y00 ?x90 ?x100 ?x100)) ?x1185 ?x1175 ?x852 (* x00 ?x90 ?x90 ?x100 ?x100 ?x100 ?x100) (* y00 ?x90 ?x90 ?x90 ?x90 ?x100 ?x100))))
 (let (($x995 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x635 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x35 (- x 1)))
 (let ((?x40 (- (* (- 1) ?x35 x00 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x44 (+ (- ?x40 (* ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 x00 ?x36 ?x36))))
 (let ((?x49 (+ (- ?x44 (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36))))
 (let ((?x53 (+ (- ?x49 (* ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x36 ?x36 ?x36))))
 (let ((?x57 (- (- ?x53 (* ?x35 ?x36 ?x36 y00)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36))))
 (let ((?x61 (- (+ ?x57 (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36)) (* ?x35 ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 ?x36 ?x36 y00))))
 (let ((?x64 (+ ?x61 (* ?x35 ?x35 x00 ?x36 ?x36 ?x36 ?x36) (* ?x35 ?x35 ?x35 ?x35 ?x36 ?x36 y00))))
 (let (($x68 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x64 0))))))
 (rewrite (= $x68 $x995)))))))))))))))))))))))))
 ))
 (let ((@x70 (asserted $x69)))
 (let ((@x838 (mp (mp @x70 (quant-intro (proof-bind ?x1015) (= $x69 $x479)) $x479) (rewrite (= $x479 $x479)) $x479)))
 (let ((@x1105 (mp~ (mp @x838 (quant-intro (proof-bind ?x1038) (= $x479 $x853)) $x853) (sk (~ $x853 $x902)) $x902)))
 (let ((@x914 (mp @x1105 (rewrite (= $x902 $x1262)) $x1262)))
 (let ((@x1111 (and-elim @x914 $x1284)))
 (let ((@x273 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1284) $x916)) @x1111 $x916)))
 (let (($x644 (>= ?x1338 0)))
 (let ((@x890 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1284) $x644)) @x1111 $x644)))
 (let (($x1172 (not (>= ?x1256 0))))
 (let (($x782 (<= ?x1256 0)))
 (let ((@x1373 (lemma ((_ th-lemma arith) (hypothesis (not $x782)) @x890 @x273 @x890 @x273 false) $x782)))
 (let ((@x306 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x296 (not $x782) $x1172)) (and-elim @x914 $x911) (or (not $x782) $x1172))))
 ((_ th-lemma arith) (unit-resolution @x306 @x1373 $x1172) @x890 @x273 @x890 @x273 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             488
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    8
 :arith-num-rows            4
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 80
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                19.76
 :memory                    19.25
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                661259
 :num-checks                1
 :propagations              4
 :rlimit-count              7386
 :time                      0.01
 :total-time                0.03)
