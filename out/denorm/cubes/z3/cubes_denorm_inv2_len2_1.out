unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x508 (+ m!1 (* (- 6) n!0))))
 (let (($x345 (<= ?x508 6)))
 (let (($x425 (= ?x508 6)))
 (let ((?x463 (+ k!2 c!3)))
 (let ((?x663 (+ k!2 m!1)))
 (let ((?x168 (+ 6 m!1)))
 (let ((?x154 (+ 1 n!0)))
 (let ((?x796 (+ (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 m!1 m!1) (* 9 (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 n!0)) (* 9 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 k!2 n!0)) (* 27 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 c!3)) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 k!2 k!2) (* 13 (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463)) (* 9 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 c!3 n!0)) (* 5 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 m!1)) (* (- 9) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 c!3 n!0)) (* (- 9) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 k!2 n!0)) (* (- 2) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 k!2 m!1)) (* (- 1) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 k!2 k!2)) (* 2 (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 k!2 m!1)) (* (- 13) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463)) (* (- 32) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 k!2)) (* (- 27) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 c!3)) (* 32 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 k!2)) (* (- 1) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 m!1 m!1)) (* (- 9) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x463 n!0)) (* (- 5) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x463 ?x463 ?x463 m!1)))))
 (let (($x727 (= ?x796 0)))
 (let (($x749 (not $x727)))
 (let ((?x428 (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0))))
 (let (($x324 (= ?x428 (- 1))))
 (let ((?x269 (* (- 1) (* k!2 n!0))))
 (let ((?x163 (* (- 2) n!0)))
 (let ((?x276 (* 3 c!3)))
 (let ((?x342 (+ k!2 ?x276 ?x163 ?x269)))
 (let (($x662 (= ?x342 1)))
 (let ((?x287 (* (- 1) (* k!2 k!2))))
 (let ((?x422 (* (- 9) n!0)))
 (let ((?x225 (* 18 c!3)))
 (let ((?x423 (* 9 (* c!3 n!0))))
 (let ((?x312 (* 5 k!2)))
 (let ((?x193 (+ ?x312 ?x423 ?x225 ?x422 ?x287)))
 (let (($x350 (= ?x193 4)))
 (let (($x792 (and $x425 $x350 $x662 $x324 $x749)))
 (let ((?x184 (* (- 1) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 (+ c!3 k!2) m!1 m!1))))
 (let ((?x435 (* (- 1) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 (+ c!3 k!2) k!2 k!2))))
 (let ((?x723 (+ c!3 k!2)))
 (let ((?x529 (+ (* 9 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723 k!2 n!0)) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 k!2 k!2) (* (- 32) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 k!2)) (* (- 9) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 k!2 n!0)) (* (- 13) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723)) (* 32 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723 k!2)) (* 9 (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 n!0)) (* (- 5) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 m!1)) (* 13 (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723)) (* (- 27) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 c!3)) (* 27 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723 c!3)) (* (- 9) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723 n!0)) (* 5 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723 m!1)) (* (- 9) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 c!3 n!0)) (* 9 (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723 c!3 n!0)) (* 2 (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 k!2 m!1)) (* (- 2) (* ?x168 ?x168 ?x168 ?x663 ?x663 ?x663 ?x723 k!2 m!1)) (* ?x154 ?x168 ?x663 ?x663 ?x663 ?x723 ?x723 ?x723 m!1 m!1) ?x435 ?x184)))
 (let (($x585 (and $x425 (= (+ ?x225 ?x312 ?x422 ?x287 ?x423) 4) (= (+ ?x276 k!2 ?x163 ?x269) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x529 0)))))
 (let (($x235 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x487 (+ 6 m)))
 (let ((?x686 (* 2 (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k m))))
 (let ((?x401 (* (- 9) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 c n))))
 (let ((?x264 (* (- 27) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 c))))
 (let ((?x194 (* (- 5) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 m))))
 (let ((?x179 (* 9 (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 n))))
 (let ((?x166 (* (- 9) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k n))))
 (let ((?x141 (* (- 32) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k))))
 (let ((?x724 (+ (* 9 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k n)) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k k) ?x141 ?x166 (* (- 13) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68)) (* 32 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k)) ?x179 ?x194 (* 13 (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)) ?x264 (* 27 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 c)) (* (- 9) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 n)) (* 5 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 m)) ?x401 (* 9 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 c n)) ?x686 (* (- 2) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k m)) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 m m) (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k k)) (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 m m)))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= ?x724 0))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x349 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68)) ?x195) ?x142) 0)))
 (let (($x507 (not $x158)))
 (let (($x526 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x227 $x526 $x507)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x285 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x487 (+ 6 m)))
 (let ((?x686 (* 2 (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k m))))
 (let ((?x401 (* (- 9) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 c n))))
 (let ((?x264 (* (- 27) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 c))))
 (let ((?x194 (* (- 5) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 m))))
 (let ((?x179 (* 9 (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 n))))
 (let ((?x166 (* (- 9) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k n))))
 (let ((?x141 (* (- 32) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k))))
 (let ((?x724 (+ (* 9 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k n)) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 k k) ?x141 ?x166 (* (- 13) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68)) (* 32 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k)) ?x179 ?x194 (* 13 (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)) ?x264 (* 27 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 c)) (* (- 9) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 n)) (* 5 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 m)) ?x401 (* 9 (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 c n)) ?x686 (* (- 2) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k m)) (* (+ 1 n) ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68 m m) (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 k k)) (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68 m m)))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x316 (and $x123 $x207 $x259 $x297 (not (= ?x724 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) ?x68)) (* (- 5) m) ?x48 ?x78)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68)) ?x195) ?x142) 0)))
 (let (($x507 (not $x158)))
 (let (($x526 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x233 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x227 $x526 $x507)))
 (rewrite (= $x233 $x316)))))))))))))))))))))))))))))))))))
 ))
 (let (($x584 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68)) ?x195) ?x142) 0)))
 (let (($x507 (not $x158)))
 (let (($x526 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x402 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x143 (= (+ ?x189 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x143 $x402 $x526 $x507)))))))))))))))) :qid k!34))
 ))
 (let ((?x377 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68)) ?x195) ?x142) 0)))
 (let (($x507 (not $x158)))
 (let (($x526 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x227 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x233 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x227 $x526 $x507)))
 (let (($x402 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x143 (= (+ ?x189 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x588 (and $x123 $x143 $x402 $x526 $x507)))
 (rewrite (= $x588 $x233))))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81) (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x84) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x503 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x189 (* (- 18) c)))
 (let ((?x142 (+ 13 ?x189 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) (* (- 5) m) ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x487 (+ 6 m)))
 (let ((?x340 (+ 1 n)))
 (let ((?x195 (* ?x340 ?x487 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x158 (= (* (+ (* (- 1) (* ?x487 ?x487 ?x487 ?x72 ?x72 ?x72 ?x68)) ?x195) ?x142) 0)))
 (let (($x507 (not $x158)))
 (let (($x526 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x402 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x143 (= (+ ?x189 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x588 (and $x123 $x143 $x402 $x526 $x507)))
 (let ((?x81 (+ m 6)))
 (let ((?x84 (+ (* (- 1) ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81) (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 (+ n 1)))))
 (let ((?x75 (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 (+ n 1)))))
 (let (($x86 (= (* (+ (- ?x75 (* 5 ?x72)) (* 9 (+ n 1)) ?x78) ?x84) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x86)))))
 (rewrite (= $x89 $x588))))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x135 (mp (mp @x91 (quant-intro (proof-bind ?x503) (= $x90 $x584)) $x584) (rewrite (= $x584 $x584)) $x584)))
 (let ((@x108 (mp (mp @x135 (quant-intro (proof-bind ?x377) (= $x584 $x349)) $x349) (quant-intro (proof-bind ?x285) (= $x349 $x235)) $x235)))
 (let ((@x733 (mp (mp~ @x108 (sk (~ $x235 $x585)) $x585) (rewrite (= $x585 $x792)) $x792)))
 (let ((@x100 (and-elim @x733 $x425)))
 (let ((@x755 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x425) $x345)) @x100 $x345)))
 (let (($x734 (>= ?x508 6)))
 (let ((@x213 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x425) $x734)) @x100 $x734)))
 (let (($x124 (<= ?x428 (- 1))))
 (let ((@x232 (and-elim @x733 $x324)))
 (let ((@x165 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x124)) @x232 $x124)))
 (let (($x105 (>= ?x428 (- 1))))
 (let ((@x118 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x105)) @x232 $x105)))
 (let (($x245 (<= ?x193 4)))
 (let ((@x464 (and-elim @x733 $x350)))
 (let ((@x205 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x350) $x245)) @x464 $x245)))
 (let (($x94 (>= ?x193 4)))
 (let ((@x454 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x350) $x94)) @x464 $x94)))
 (let (($x781 (<= ?x342 1)))
 (let ((@x592 (and-elim @x733 $x662)))
 (let ((@x129 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x662) $x781)) @x592 $x781)))
 (let (($x214 (>= ?x342 1)))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x662) $x214)) @x592 $x214)))
 (let (($x93 (not (<= ?x796 0))))
 (let (($x400 (>= ?x796 0)))
 (let ((@x396 ((_ th-lemma arith) (hypothesis (not $x400)) @x118 @x165 @x118 @x165 @x250 @x129 @x118 @x165 @x213 @x755 @x118 @x165 @x454 @x205 @x118 @x165 @x213 @x755 @x213 @x755 false)))
 (let ((@x787 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x727 $x93 (not $x400))) (and-elim @x733 $x749) (or $x93 (not $x400)))))
 ((_ th-lemma arith) (unit-resolution @x787 (lemma @x396 $x400) $x93) @x118 @x165 @x118 @x165 @x250 @x129 @x118 @x165 @x213 @x755 @x118 @x165 @x454 @x205 @x118 @x165 @x213 @x755 @x213 @x755 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             315
 :arith-nonlinear-bounds    3
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      6
 :arith-tableau-max-columns 56
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.65
 :memory                    3.16
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1439630
 :num-checks                1
 :propagations              11
 :rlimit-count              10043
 :time                      0.02
 :total-time                0.02)
