unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x279 (* n!0 n!0)))
 (let ((?x310 (* 3 ?x279)))
 (let ((?x192 (* (- 1) k!2)))
 (let ((?x281 (+ (* 3 n!0) ?x192 ?x310)))
 (let (($x336 (<= ?x281 (- 1))))
 (let (($x283 (= ?x281 (- 1))))
 (let ((?x167 (+ k!2 c!3)))
 (let ((?x172 (+ m!1 k!2)))
 (let ((?x183 (+ 6 m!1)))
 (let ((?x149 (* ?x183 ?x172 ?x172 ?x167 ?x167 (+ 7 (* 9 n!0) (* (- 1) m!1) ?x192 ?x310))))
 (let (($x165 (= ?x149 0)))
 (let (($x150 (not $x165)))
 (let ((?x176 (* k!2 k!2)))
 (let ((?x123 (* 9 n!0)))
 (let ((?x217 (+ ?x123 (* (- 5) k!2) (* (- 18) c!3) ?x176 (* (- 9) (* n!0 c!3)))))
 (let ((?x193 (* (- 1) m!1)))
 (let ((?x324 (+ (* 6 n!0) ?x193)))
 (let (($x325 (= ?x324 (- 6))))
 (let (($x151 (and $x325 (= ?x217 (- 4)) (= (+ (* 2 n!0) ?x192 (* (- 3) c!3) (* n!0 k!2)) (- 1)) $x283 $x150)))
 (let ((?x341 (+ c!3 k!2)))
 (let ((?x390 (+ k!2 m!1)))
 (let (($x278 (= (* ?x183 ?x390 ?x390 ?x341 ?x341 (+ 7 ?x192 ?x193 ?x123 ?x310)) 0)))
 (let (($x348 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x179 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x176) (* 9 (* c!3 n!0)))))
 (let (($x185 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x179 4) $x348 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x279)) 1) (not $x278))))
 (let (($x288 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x201 (= (* ?x385 ?x71 ?x71 ?x76 ?x76 (+ 7 ?x230 ?x346 ?x48 ?x262)) 0)))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 $x200 $x252 $x290 (not $x201)))))))))))))))))))) :qid k!34))
 ))
 (let (($x332 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x460 (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x393 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x393 $x174 $x460))))))))))))))))) :qid k!34))
 ))
 (let ((?x88 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x201 (= (* ?x385 ?x71 ?x71 ?x76 ?x76 (+ 7 ?x230 ?x346 ?x48 ?x262)) 0)))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x94 (and $x116 $x200 $x252 $x290 (not $x201))))
 (let ((?x65 (* 3 n)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let (($x460 (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0))))
 (let (($x174 (= (+ ?x262 ?x230 ?x65) (- 1))))
 (let (($x393 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x210 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x393 $x174 $x460)))
 (rewrite (= $x210 $x94))))))))))))))))))))))))))))
 ))
 (let (($x458 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x460 (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x174 $x460)))))))))))))) :qid k!34))
 ))
 (let ((?x146 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x460 (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x393 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x210 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x393 $x174 $x460)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x98 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x174 $x460)))
 (rewrite (= $x98 $x210)))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let (($x80 (not (= (* ?x74 (- 1) ?x76 ?x76 ?x71 ?x71 (+ m 6)) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x80))))))))))))) :qid k!34))
 ))
 (let ((?x455 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let (($x460 (not (= (* ?x385 ?x71 ?x71 ?x76 ?x76 ?x361) 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x98 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x174 $x460)))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let (($x80 (not (= (* ?x74 (- 1) ?x76 ?x76 ?x71 ?x71 (+ m 6)) 0))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or $x80))))
 (rewrite (= $x82 $x98))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x334 (mp (mp @x84 (quant-intro (proof-bind ?x455) (= $x83 $x458)) $x458) (rewrite (= $x458 $x458)) $x458)))
 (let ((@x92 (mp (mp @x334 (quant-intro (proof-bind ?x146) (= $x458 $x332)) $x332) (quant-intro (proof-bind ?x88) (= $x332 $x288)) $x288)))
 (let ((@x464 (mp (mp~ @x92 (sk (~ $x288 $x185)) $x185) (rewrite (= $x185 $x151)) $x151)))
 (let ((@x214 (and-elim @x464 $x283)))
 (let ((@x300 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x283) $x336)) @x214 $x336)))
 (let (($x208 (<= ?x324 (- 6))))
 (let ((@x466 (and-elim @x464 $x325)))
 (let ((@x357 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x208)) @x466 $x208)))
 (let (($x331 (>= ?x281 (- 1))))
 (let ((@x259 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x283) $x331)) @x214 $x331)))
 (let (($x237 (>= ?x324 (- 6))))
 (let ((@x216 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x325) $x237)) @x466 $x237)))
 (let (($x375 (not (<= ?x149 0))))
 (let (($x339 (>= ?x149 0)))
 (let ((@x104 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x339)) @x216 @x259 @x357 @x300 false) $x339)))
 (let ((@x274 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x165 $x375 (not $x339))) (and-elim @x464 $x150) (or $x375 (not $x339)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x274 @x104 $x375) @x216 @x259 @x357 @x300 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        21
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             83
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    14
 :arith-num-rows            8
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 28
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.56
 :memory                    3.05
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1145209
 :num-checks                1
 :propagations              12
 :rlimit-count              4016
 :time                      0.01
 :total-time                0.01)
