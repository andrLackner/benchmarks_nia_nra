unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x301 (* 2 x!0)))
 (let ((?x354 (* (- 1) r!1)))
 (let ((?x163 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x160 (+ r00 ?x88 ?x104 ?x163 ?x354 ?x301)))
 (let (($x557 (<= ?x160 0)))
 (let (($x536 (= ?x160 0)))
 (let ((?x477 (* 3 (* r!1 r!1 r!1 x!0 x!0))))
 (let ((?x459 (* r!1 r!1 r!1)))
 (let ((?x288 (* (- 6) (* r!1 r!1 r!1 x!0))))
 (let ((?x267 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x409 (* r!1 x!0 x!0)))
 (let ((?x527 (* 3 ?x409)))
 (let ((?x502 (* (- 3) (* r!1 r!1 r!1 r!1 x!0))))
 (let ((?x370 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x469 (* 6 (* r!1 r!1 x!0 x!0))))
 (let ((?x369 (* 2 (* r!1 r!1 r!1 r!1))))
 (let ((?x279 (* (- 2) (* r!1 x!0 x!0 x!0))))
 (let ((?x285 (* (- 1) (* r!1 r!1 x!0 x!0 x!0))))
 (let ((?x98 (* r!1 r!1 x!0)))
 (let ((?x427 (* (- 3) ?x98)))
 (let ((?x384 (+ (- 1) ?x427 ?x285 ?x279 ?x369 ?x469 ?x370 ?x502 ?x527 ?x267 ?x288 ?x459 ?x477 ?x354)))
 (let ((?x418 (* (- 1) x!0)))
 (let ((?x465 (* x!0 x!0)))
 (let ((?x429 (* r!1 x!0)))
 (let ((?x177 (* (- 2) ?x429)))
 (let ((?x604 (* (- 2) ?x98)))
 (let ((?x415 (* (- 2) r!1)))
 (let ((?x82 (* (- 1) ?x459)))
 (let ((?x432 (* (- 1) ?x429)))
 (let ((?x428 (* (- 2) ?x163)))
 (let ((?x624 (* (+ (- 1) ?x428 ?x432 ?x82 ?x415 ?x418) (+ ?x604 ?x163 ?x409 ?x177 ?x459 ?x465 r!1 ?x418) ?x384 ?x160)))
 (let (($x174 (= ?x624 0)))
 (let (($x532 (not $x174)))
 (let (($x178 (and $x536 $x532)))
 (let ((?x417 (+ (- 1) ?x354 ?x459 ?x267 ?x279 ?x285 ?x369 ?x370 ?x427 ?x288 ?x502 ?x527 ?x469 ?x477)))
 (let ((?x383 (* (+ (- 1) ?x415 ?x418 ?x428 ?x432 ?x82) (+ r!1 ?x418 ?x163 ?x177 ?x459 ?x604 ?x409 ?x465) ?x417 (+ ?x354 ?x301 r00 ?x163 ?x88 ?x104))))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x125 (and (= (+ r!1 (* (- 2) x!0) ?x119 (* (- 1) ?x163) ?x35 ?x36) 0) (not (= ?x383 0)))))
 (let (($x190 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x251 (* r r r)))
 (let ((?x561 (+ (- 1) ?x67 ?x251 (* (- 1) (* x x x)) (* (- 2) (* r x x x)) (* (- 1) (* r r x x x)) (* 2 (* r r r r)) (* r r r r r) (* (- 3) (* r r x)) (* (- 6) (* r r r x)) (* (- 3) (* r r r r x)) (* 3 (* r x x)) (* 6 (* r r x x)) (* 3 (* r r r x x)))))
 (let ((?x420 (* r x x)))
 (let ((?x232 (* (- 1) x)))
 (let ((?x631 (+ r ?x232 ?x30 (* (- 2) (* r x)) ?x251 (* (- 2) (* r r x)) ?x420 (* x x))))
 (let ((?x287 (* (- 1) ?x251)))
 (let ((?x223 (* r x)))
 (let ((?x224 (* (- 1) ?x223)))
 (let ((?x189 (* (- 2) r)))
 (let (($x126 (= (* (+ (- 1) ?x189 ?x232 (* (- 2) ?x30) ?x224 ?x287) ?x631 ?x561 ?x110) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x122 (= (+ r (* (- 2) x) ?x119 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (and $x122 (not $x126)))))))))))))))))))))) :qid k!26))
 ))
 (let (($x308 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x367 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x305 (+ x ?x67)))
 (let ((?x94 (+ 1 r)))
 (let ((?x520 (* (+ (* (- 1) (* ?x94 ?x305)) (* (- 1) (* ?x94 ?x94 ?x94))) (+ (* (- 1) x) r (* ?x94 ?x305 ?x305)) (+ (- 1) ?x67 (* (- 1) (* ?x94 ?x94 ?x305 ?x305 ?x305))) ?x367)))
 (and (= (+ ?x67 r00 (* r r) ?x32 ?x88 ?x104) 0) (not (= ?x520 0)))))))))))) :qid k!26))
 ))
 (let ((?x348 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x110 (+ ?x67 ?x32 r00 ?x30 ?x88 ?x104)))
 (let ((?x251 (* r r r)))
 (let ((?x561 (+ (- 1) ?x67 ?x251 (* (- 1) (* x x x)) (* (- 2) (* r x x x)) (* (- 1) (* r r x x x)) (* 2 (* r r r r)) (* r r r r r) (* (- 3) (* r r x)) (* (- 6) (* r r r x)) (* (- 3) (* r r r r x)) (* 3 (* r x x)) (* 6 (* r r x x)) (* 3 (* r r r x x)))))
 (let ((?x420 (* r x x)))
 (let ((?x232 (* (- 1) x)))
 (let ((?x631 (+ r ?x232 ?x30 (* (- 2) (* r x)) ?x251 (* (- 2) (* r r x)) ?x420 (* x x))))
 (let ((?x287 (* (- 1) ?x251)))
 (let ((?x223 (* r x)))
 (let ((?x224 (* (- 1) ?x223)))
 (let ((?x189 (* (- 2) r)))
 (let (($x126 (= (* (+ (- 1) ?x189 ?x232 (* (- 2) ?x30) ?x224 ?x287) ?x631 ?x561 ?x110) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x119 (* (- 1) r00)))
 (let (($x122 (= (+ r (* (- 2) x) ?x119 (* (- 1) ?x30) ?x35 ?x36) 0)))
 (let (($x579 (and $x122 (not $x126))))
 (let ((?x367 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x305 (+ x ?x67)))
 (let ((?x94 (+ 1 r)))
 (let ((?x520 (* (+ (* (- 1) (* ?x94 ?x305)) (* (- 1) (* ?x94 ?x94 ?x94))) (+ ?x232 r (* ?x94 ?x305 ?x305)) (+ (- 1) ?x67 (* (- 1) (* ?x94 ?x94 ?x305 ?x305 ?x305))) ?x367)))
 (let (($x95 (and (= (+ ?x67 r00 ?x30 ?x32 ?x88 ?x104) 0) (not (= ?x520 0)))))
 (rewrite (= $x95 $x579)))))))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((r Int) (x Int) )(! (let ((?x56 (+ (* (- 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x36 (* r00 r00)))
 (let ((?x48 (- (- (+ ?x42 r00 (* ?x41 ?x41) (* 2 ?x44)) (* 2 x00)) ?x36)))
 (let ((?x57 (* ?x48 (- (* ?x27 ?x41 ?x44) (* ?x41 ?x41 ?x41)) (- ?x42 (* ?x41 ?x41 ?x44 ?x44 ?x44)) ?x56)))
 (let ((?x35 (* 2 x00)))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x57 0)))))))))))))) :qid k!26))
 ))
 (let ((?x89 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x104 (* (- 1) ?x36)))
 (let ((?x88 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x367 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x88 ?x104)))
 (let ((?x67 (* (- 1) r)))
 (let ((?x305 (+ x ?x67)))
 (let ((?x94 (+ 1 r)))
 (let ((?x520 (* (+ (* (- 1) (* ?x94 ?x305)) (* (- 1) (* ?x94 ?x94 ?x94))) (+ (* (- 1) x) r (* ?x94 ?x305 ?x305)) (+ (- 1) ?x67 (* (- 1) (* ?x94 ?x94 ?x305 ?x305 ?x305))) ?x367)))
 (let (($x95 (and (= (+ ?x67 r00 (* r r) ?x32 ?x88 ?x104) 0) (not (= ?x520 0)))))
 (let ((?x56 (+ (* (- 1) (- x r)) (* (+ r 1) (- x r) (- x r)))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x27 (- 1)))
 (let ((?x42 (* ?x27 ?x41)))
 (let ((?x48 (- (- (+ ?x42 r00 (* ?x41 ?x41) (* 2 ?x44)) (* 2 x00)) ?x36)))
 (let ((?x57 (* ?x48 (- (* ?x27 ?x41 ?x44) (* ?x41 ?x41 ?x41)) (- ?x42 (* ?x41 ?x41 ?x44 ?x44 ?x44)) ?x56)))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) ?x32) (* 2 x00)) ?x36)))
 (let (($x61 (and (= ?x38 0) (or (not (= ?x57 0))))))
 (rewrite (= $x61 $x95))))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x547 (mp (mp @x63 (quant-intro (proof-bind ?x89) (= $x62 $x308)) $x308) (rewrite (= $x308 $x308)) $x308)))
 (let ((@x115 (mp~ (mp @x547 (quant-intro (proof-bind ?x348) (= $x308 $x190)) $x190) (sk (~ $x190 $x125)) $x125)))
 (let ((@x84 (mp @x115 (rewrite (= $x125 $x178)) $x178)))
 (let ((@x356 (and-elim @x84 $x536)))
 (let ((@x441 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x536) $x557)) @x356 $x557)))
 (let (($x129 (>= ?x160 0)))
 (let ((@x447 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x536) $x129)) @x356 $x129)))
 (let (($x184 (not (>= ?x624 0))))
 (let (($x144 (<= ?x624 0)))
 (let ((@x575 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x174 (not $x144) $x184)) (and-elim @x84 $x532) (or (not $x144) $x184))))
 (let ((@x172 (unit-resolution @x575 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x144)) @x447 @x441 false) $x144) $x184)))
 ((_ th-lemma arith farkas 1 1 1) @x172 @x447 @x441 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            4
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 32
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                19.57
 :memory                    19.08
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                507729
 :num-checks                1
 :propagations              4
 :rlimit-count              1943
 :time                      0.01
 :total-time                0.02)
