unsat
((set-logic NRA)
(declare-fun d!6 () Real)
(declare-fun a!8 () Real)
(declare-fun b!7 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x204 (* a00 d!6)))
 (let ((?x205 (+ (* 2.0 (* b!7 y!5)) (* (- 2.0) (* y00 b!7)) ?x204 (* (- 1.0) (* a!8 d!6)))))
 (let (($x175 (<= ?x205 0.0)))
 (let (($x154 (= 0.0 ?x205)))
 (let ((@x151 (symm (commutativity (= $x154 (= ?x205 0.0))) (= (= ?x205 0.0) $x154))))
 (let (($x203 (= ?x205 0.0)))
 (let ((?x156 (* b!7 y!5)))
 (let ((?x277 (+ ?x156 (* (- 1.0) (* y00 b!7)) (* (/ 1.0 2.0) ?x204) (* (- (/ 1.0 2.0)) (* a!8 d!6)))))
 (let (($x278 (= ?x277 0.0)))
 (let (($x283 (not $x278)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x237 (= (+ ?x30 ?x82 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let (($x172 (and $x237 (= (+ (* d00 b!7) (* (- 1.0) (* b00 d!6))) 0.0) $x203 $x283)))
 (let ((?x168 (* b!7 y00)))
 (let ((?x199 (+ (* (/ 1.0 2.0) (* d!6 a!8)) (* (- 1.0) (* y!5 b!7)) ?x168 (* (- (/ 1.0 2.0)) (* d!6 a00)))))
 (let ((?x194 (* d!6 a!8)))
 (let ((?x244 (+ ?x194 (* (- 2.0) (* y!5 b!7)) (* 2.0 ?x168) (* (- 1.0) (* d!6 a00)))))
 (let (($x198 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x82 (* 2.0 (* y!5 b00))) 0.0)))
 (let (($x206 (and $x198 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x244 0.0) (not (= ?x199 0.0)))))
 (let (($x108 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x127 (* b y00)))
 (let ((?x100 (* y b)))
 (let ((?x164 (* (- 1.0) ?x100)))
 (let ((?x90 (* d a)))
 (let ((?x131 (* (/ 1.0 2.0) ?x90)))
 (let (($x157 (= (+ ?x90 (* (- 2.0) ?x100) (* 2.0 ?x127) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x114 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x82 (* 2.0 (* y b00))) 0.0)))
 (and $x114 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x157 (not (= (+ ?x131 ?x164 ?x127 (* (- (/ 1.0 2.0)) (* d a00))) 0.0)))))))))))) :qid k!32))
 ))
 (let (($x234 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x165 (* y00 b)))
 (let ((?x89 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x165 ?x174)))
 (let (($x121 (= (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x165 ?x174) 0.0)))
 (let ((?x100 (* y b)))
 (let ((?x122 (* (- 2.0) ?x100)))
 (let ((?x90 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let (($x162 (= (+ ?x82 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x162 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x90 ?x122 (* 2.0 ?x165) (* (- 1.0) ?x48)) 0.0) (or (not $x121) (not (= ?x89 0.0))))))))))))))) :qid k!32))
 ))
 (let ((?x227 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x127 (* b y00)))
 (let ((?x100 (* y b)))
 (let ((?x164 (* (- 1.0) ?x100)))
 (let ((?x90 (* d a)))
 (let ((?x131 (* (/ 1.0 2.0) ?x90)))
 (let (($x157 (= (+ ?x90 (* (- 2.0) ?x100) (* 2.0 ?x127) (* (- 1.0) (* d a00))) 0.0)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x114 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x82 (* 2.0 (* y b00))) 0.0)))
 (let (($x143 (and $x114 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0) $x157 (not (= (+ ?x131 ?x164 ?x127 (* (- (/ 1.0 2.0)) (* d a00))) 0.0)))))
 (let ((?x48 (* a00 d)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x165 (* y00 b)))
 (let ((?x89 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x165 ?x174)))
 (let (($x162 (= (+ ?x82 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x142 (and $x162 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x90 (* (- 2.0) ?x100) (* 2.0 ?x165) (* (- 1.0) ?x48)) 0.0) (or (not (= (+ ?x131 ?x164 ?x165 ?x174) 0.0)) (not (= ?x89 0.0))))))
 (rewrite (= $x142 $x143)))))))))))))))))))
 ))
 (let (($x73 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x68 (- (+ (- (* (+ a b) ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58)))
 (let (($x60 (= (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x60) (not (= ?x68 0.0))))))))))))))) :qid k!32))
 ))
 (let ((?x262 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x174 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x165 (* y00 b)))
 (let ((?x89 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x165 ?x174)))
 (let (($x121 (= (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x165 ?x174) 0.0)))
 (let ((?x100 (* y b)))
 (let ((?x122 (* (- 2.0) ?x100)))
 (let ((?x90 (* d a)))
 (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let (($x162 (= (+ ?x82 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x142 (and $x162 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) (= (+ ?x90 ?x122 (* 2.0 ?x165) (* (- 1.0) ?x48)) 0.0) (or (not $x121) (not (= ?x89 0.0))))))
 (let ((?x51 (/ d 2.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x68 (- (+ (- (* (+ a b) ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58)))
 (let (($x60 (= (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) 0.0)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x72 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x60) (not (= ?x68 0.0))))))
 (rewrite (= $x72 $x142)))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x104 (mp (mp @x74 (quant-intro (proof-bind ?x262) (= $x73 $x234)) $x234) (quant-intro (proof-bind ?x227) (= $x234 $x108)) $x108)))
 (let ((@x284 (mp (mp~ @x104 (sk (~ $x108 $x206)) $x206) (rewrite (= $x206 $x172)) $x172)))
 (let ((@x155 (mp (and-elim @x284 $x203) @x151 $x154)))
 (let (($x128 (not (<= ?x277 0.0))))
 (let (($x271 (>= ?x277 0.0)))
 (let (($x270 (>= ?x205 0.0)))
 (let ((@x275 ((_ th-lemma arith) (hypothesis (not $x271)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x270)) @x155 $x270) false)))
 (let (($x268 (= 0.0 ?x277)))
 (let (($x93 (not $x268)))
 (let ((@x76 (monotonicity (symm (commutativity (= $x268 $x278)) (= $x278 $x268)) (= $x283 $x93))))
 (let ((@x235 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x268 $x128 (not $x271))) (mp (and-elim @x284 $x283) @x76 $x93) (or $x128 (not $x271)))))
 ((_ th-lemma arith) (unit-resolution @x235 (lemma @x275 $x271) $x128) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x175)) @x155 $x175) false))))))))))))))))))))))))))))))))))))))))

(:added-eqs           10
 :arith-eq-adapter    4
 :arith-conflicts     2
 :arith-diseq         2
 :arith-lower         5
 :arith-make-feasible 3
 :arith-max-columns   26
 :arith-max-rows      4
 :arith-upper         5
 :conflicts           2
 :decisions           1
 :del-clause          14
 :max-memory          1.41
 :memory              0.97
 :mk-bool-var         18
 :mk-clause           16
 :num-allocs          68589
 :num-checks          1
 :propagations        8
 :rlimit-count        1691
 :time                0.00
 :total-time          0.00)
