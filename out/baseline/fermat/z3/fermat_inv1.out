unsat
((set-logic NIA)
(proof
(let (($x101 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x184 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x138 (* (- 2) v)))
 (let ((?x108 (* (- 2) u00)))
 (let ((?x92 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x378 (+ ?x28 (* 6 u) ?x92 ?x108 ?x138 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x184)))
 (let (($x385 (not (= ?x378 (- 4)))))
 (let ((?x43 (* u u)))
 (let ((?x162 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x269 (+ ?x28 (* (- 6) v) ?x92 ?x108 ?x36 ?x41 ?x162 (* (+ 2 v) (+ 2 v)) ?x46 ?x184)))
 (let (($x299 (not (= ?x269 4))))
 (let (($x345 (or $x299 $x385)))
 (let (($x158 (= (+ ?x28 ?x92 ?x108 ?x36 ?x138 ?x41 ?x162 ?x45 ?x46 ?x184) 0)))
 (and $x158 $x345))))))))))))))))))) :qid k!27))
 ))
 (let (($x186 (exists ((r Int) (u Int) (v Int) )(! false :qid k!27))
 ))
 (let ((@x215 (elim-unused (= $x186 false))))
 (let ((?x202 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x184 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x138 (* (- 2) v)))
 (let ((?x108 (* (- 2) u00)))
 (let ((?x92 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x378 (+ ?x28 (* 6 u) ?x92 ?x108 ?x138 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x184)))
 (let (($x385 (not (= ?x378 (- 4)))))
 (let ((?x43 (* u u)))
 (let ((?x162 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x269 (+ ?x28 (* (- 6) v) ?x92 ?x108 ?x36 ?x41 ?x162 (* (+ 2 v) (+ 2 v)) ?x46 ?x184)))
 (let (($x299 (not (= ?x269 4))))
 (let (($x345 (or $x299 $x385)))
 (let (($x158 (= (+ ?x28 ?x92 ?x108 ?x36 ?x138 ?x41 ?x162 ?x45 ?x46 ?x184) 0)))
 (let (($x132 (and $x158 $x345)))
 (let (($x195 (= (+ ?x28 ?x36 ?x138 ?x92 ?x108 ?x41 ?x162 ?x45 ?x46 ?x184) 0)))
 (let (($x93 (not $x195)))
 (let (($x127 (and $x195 $x93)))
 (let ((@x171 (rewrite (= $x127 false))))
 (let ((@x119 (rewrite (= (or $x93 $x93) $x93))))
 (let ((@x274 (monotonicity (rewrite (= $x299 $x93)) (rewrite (= $x385 $x93)) (= $x345 (or $x93 $x93)))))
 (let ((@x355 (monotonicity (rewrite (= $x158 $x195)) (trans @x274 @x119 (= $x345 $x93)) (= $x132 $x127))))
 (trans @x355 @x171 (= $x132 false)))))))))))))))))))))))))))))
 ))
 (let ((@x334 (trans (quant-intro (proof-bind ?x202) (= $x101 $x186)) @x215 (= $x101 false))))
 (let (($x84 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x73 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x78 (+ (- (+ (- ?x73 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let (($x81 (not (= (- ?x78 ?x48) 0))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x66 (not (= (- ?x63 ?x48) 0))))
 (let (($x82 (or $x66 $x81)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (let (($x51 (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0)))
 (and $x51 $x82))))))))))))))))) :qid k!27))
 ))
 (let ((?x136 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x184 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x138 (* (- 2) v)))
 (let ((?x108 (* (- 2) u00)))
 (let ((?x92 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x378 (+ ?x28 (* 6 u) ?x92 ?x108 ?x138 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x184)))
 (let (($x385 (not (= ?x378 (- 4)))))
 (let ((?x43 (* u u)))
 (let ((?x162 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x269 (+ ?x28 (* (- 6) v) ?x92 ?x108 ?x36 ?x41 ?x162 (* (+ 2 v) (+ 2 v)) ?x46 ?x184)))
 (let (($x299 (not (= ?x269 4))))
 (let (($x345 (or $x299 $x385)))
 (let (($x158 (= (+ ?x28 ?x92 ?x108 ?x36 ?x138 ?x41 ?x162 ?x45 ?x46 ?x184) 0)))
 (let (($x132 (and $x158 $x345)))
 (let ((?x38 (* 2 v)))
 (let ((?x73 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x78 (+ (- (+ (- ?x73 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let (($x81 (not (= (- ?x78 ?x48) 0))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x66 (not (= (- ?x63 ?x48) 0))))
 (let (($x82 (or $x66 $x81)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x51 (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0)))
 (let (($x83 (and $x51 $x82)))
 (rewrite (= $x83 $x132)))))))))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x255 (mp (mp @x85 (quant-intro (proof-bind ?x136) (= $x84 $x101)) $x101) (rewrite (= $x101 $x101)) $x101)))
 (mp @x255 @x334 false))))))))))))

(:max-memory   3.37
 :memory       3.06
 :mk-bool-var  6
 :num-allocs   980815
 :num-checks   1
 :rlimit-count 803
 :time         0.01
 :total-time   0.01)
