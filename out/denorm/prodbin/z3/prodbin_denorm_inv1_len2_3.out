unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun x!2 () Int)
(declare-fun y!1 () Int)
(proof
(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x438 (to_real z!0)))
 (let ((?x446 (to_real x!2)))
 (let ((?x435 (to_real y!1)))
 (let ((?x369 (* ?x435 ?x446)))
 (let ((?x567 (+ ?x369 ?x438 ?x114 ?x194)))
 (let (($x77 (>= ?x567 0.0)))
 (let ((?x458 (+ (* (- 1.0) (to_real (* x00 y00))) ?x108)))
 (let (($x621 (<= ?x458 0.0)))
 (let (($x510 (= 0.0 ?x458)))
 (let ((@x404 (symm (commutativity (= $x510 (= ?x458 0.0))) (= (= ?x458 0.0) $x510))))
 (let ((@x500 (mp ((_ th-lemma arith) (= ?x458 0.0)) @x404 $x510)))
 (let ((?x445 (+ ?x369 (* (- 1.0) (to_real (* y!1 x!2))))))
 (let (($x622 (>= ?x445 0.0)))
 (let (($x450 (= 0.0 ?x445)))
 (let ((@x399 (symm (commutativity (= $x450 (= ?x445 0.0))) (= (= ?x445 0.0) $x450))))
 (let ((@x487 (mp ((_ th-lemma arith) (= ?x445 0.0)) @x399 $x450)))
 (let ((?x81 (* x00 y00)))
 (let ((?x566 (+ z00 ?x81 (* (- 1) z!0) (* (- 1) (* y!1 x!2)))))
 (let (($x85 (<= ?x566 0)))
 (let (($x461 (= 0 ?x566)))
 (let ((@x389 (symm (commutativity (= $x461 (= ?x566 0))) (= (= ?x566 0) $x461))))
 (let (($x76 (= ?x566 0)))
 (let ((?x400 (* (- (/ 1.0 4.0)) ?x446)))
 (let ((?x401 (* (- (/ 1.0 4.0)) ?x438)))
 (let ((?x297 (* (- 1.0) (* ?x446 ?x446 ?x446 ?x446 ?x446))))
 (let ((?x498 (+ (* (/ 1.0 2.0) (* ?x435 ?x438)) (* (- 3.0) (* ?x435 ?x435 ?x446 ?x446 ?x446 ?x446 ?x446)) ?x297 (* (- 2.0) (* ?x438 ?x446 ?x446 ?x446 ?x446)) (* (/ 1.0 2.0) ?x369) (* (- 1.0) (* ?x438 ?x438 ?x446 ?x446 ?x446)) (* (- 3.0) (* ?x435 ?x435 ?x438 ?x438 ?x446 ?x446 ?x446)) ?x401 (* 3.0 (* ?x435 ?x446 ?x446 ?x446 ?x446 ?x446)) ?x400 (* ?x435 ?x435 ?x435 ?x446 ?x446 ?x446 ?x446 ?x446) (* 6.0 (* ?x435 ?x438 ?x446 ?x446 ?x446 ?x446)) (* (- 6.0) (* ?x435 ?x435 ?x438 ?x446 ?x446 ?x446 ?x446)) (* 2.0 (* ?x435 ?x435 ?x435 ?x438 ?x446 ?x446 ?x446 ?x446)) (* 3.0 (* ?x435 ?x438 ?x438 ?x446 ?x446 ?x446)) (* ?x435 ?x435 ?x435 ?x438 ?x438 ?x446 ?x446 ?x446) (* (- (/ 1.0 4.0)) (* ?x435 ?x435 ?x446)) (* (- (/ 1.0 4.0)) (* ?x435 ?x435 ?x438)))))
 (let (($x406 (= (* ?x498 (+ ?x194 ?x114 ?x369 ?x438)) 0.0)))
 (let (($x511 (not $x406)))
 (let ((?x372 (+ (* (/ 1.0 4.0) (* ?x103 ?x107 ?x435 ?x435 ?x438)) (* (- 1.0) (* ?x48 ?x435 ?x435 ?x435 ?x438 ?x438 ?x446 ?x446 ?x446)) (* (- 1.0) (* ?x103 ?x107 ?x435 ?x435 ?x435 ?x438 ?x438 ?x446 ?x446 ?x446)) (* ?x435 ?x435 ?x435 ?x435 ?x438 ?x438 ?x446 ?x446 ?x446 ?x446) (* (/ 1.0 4.0) (* ?x48 ?x435 ?x435 ?x438)) (* (- (/ 1.0 4.0)) (* ?x435 ?x435 ?x438 ?x438)) (* ?x435 ?x435 ?x435 ?x438 ?x438 ?x438 ?x446 ?x446 ?x446) (* (- (/ 1.0 4.0)) (* ?x435 ?x435 ?x435 ?x438 ?x446)))))
 (let (($x455 (= ?x372 0.0)))
 (let (($x639 (not $x455)))
 (let (($x507 (or $x639 $x511)))
 (let (($x421 (and $x76 $x507)))
 (let ((?x254 (+ ?x400 ?x401 (* (/ 1.0 2.0) (* ?x446 ?x435)) (* (/ 1.0 2.0) (* ?x438 ?x435)) (* (- (/ 1.0 4.0)) (* ?x446 ?x435 ?x435)) (* (- (/ 1.0 4.0)) (* ?x438 ?x435 ?x435)) ?x297 (* 3.0 (* ?x446 ?x446 ?x446 ?x446 ?x446 ?x435)) (* (- 3.0) (* ?x446 ?x446 ?x446 ?x446 ?x446 ?x435 ?x435)) (* ?x446 ?x446 ?x446 ?x446 ?x446 ?x435 ?x435 ?x435) (* (- 2.0) (* ?x446 ?x446 ?x446 ?x446 ?x438)) (* 6.0 (* ?x446 ?x446 ?x446 ?x446 ?x438 ?x435)) (* (- 6.0) (* ?x446 ?x446 ?x446 ?x446 ?x438 ?x435 ?x435)) (* 2.0 (* ?x446 ?x446 ?x446 ?x446 ?x438 ?x435 ?x435 ?x435)) (* (- 1.0) (* ?x446 ?x446 ?x446 ?x438 ?x438)) (* 3.0 (* ?x446 ?x446 ?x446 ?x438 ?x438 ?x435)) (* (- 3.0) (* ?x446 ?x446 ?x446 ?x438 ?x438 ?x435 ?x435)) (* ?x446 ?x446 ?x446 ?x438 ?x438 ?x435 ?x435 ?x435))))
 (let ((?x392 (+ (* ?x446 ?x446 ?x446 ?x438 ?x438 ?x438 ?x435 ?x435 ?x435) (* (- 1.0) (* ?x446 ?x446 ?x446 ?x438 ?x438 ?x48 ?x435 ?x435 ?x435)) (* (- 1.0) (* ?x446 ?x446 ?x446 ?x438 ?x438 ?x435 ?x435 ?x435 ?x103 ?x107)) (* ?x446 ?x446 ?x446 ?x446 ?x438 ?x438 ?x435 ?x435 ?x435 ?x435) (* (- (/ 1.0 4.0)) (* ?x438 ?x438 ?x435 ?x435)) (* (/ 1.0 4.0) (* ?x438 ?x48 ?x435 ?x435)) (* (/ 1.0 4.0) (* ?x438 ?x435 ?x435 ?x103 ?x107)) (* (- (/ 1.0 4.0)) (* ?x446 ?x438 ?x435 ?x435 ?x435)))))
 (let (($x181 (or (not (= ?x392 0.0)) (not (= (* ?x254 (+ ?x438 ?x194 ?x114 (* ?x446 ?x435))) 0.0)))))
 (let (($x557 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x81)) 0) $x181)))
 (let (($x153 (exists ((x Int) (y Int) (z Int) )(! (let ((?x60 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x257 (* ?x43 ?x60)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x525 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60)))
 (let ((?x607 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60))))
 (let ((?x604 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60))))
 (let ((?x601 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x598 (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x595 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60))))
 (let ((?x591 (* 6.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60))))
 (let ((?x587 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x377 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60 ?x60)))
 (let ((?x581 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60))))
 (let ((?x577 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60))))
 (let ((?x573 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x320 (* (- (/ 1.0 4.0)) (* ?x46 ?x60 ?x60))))
 (let ((?x262 (* (- (/ 1.0 4.0)) ?x46)))
 (let ((?x249 (* (- (/ 1.0 4.0)) ?x43)))
 (let ((?x111 (+ ?x249 ?x262 (* (/ 1.0 2.0) ?x257) (* (/ 1.0 2.0) (* ?x46 ?x60)) (* (- (/ 1.0 4.0)) (* ?x43 ?x60 ?x60)) ?x320 ?x573 ?x577 ?x581 ?x377 ?x587 ?x591 ?x595 ?x598 ?x601 ?x604 ?x607 ?x525)))
 (let ((?x695 (+ (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x48 ?x60 ?x60 ?x60)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60 ?x103 ?x107)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60 ?x60) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x46 ?x48 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x46 ?x60 ?x60 ?x103 ?x107)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x60 ?x60 ?x60)))))
 (let (($x292 (not (= ?x695 0.0))))
 (let (($x109 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x109 (or $x292 (not (= (* ?x111 (+ ?x46 ?x194 ?x114 ?x257)) 0.0))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x667 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x278 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x234 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x449 (+ ?x46 ?x43)))
 (let ((?x300 (+ (* (- 1.0) (* ?x449 ?x234 ?x234)) (* 8.0 (* ?x43 ?x43 ?x43 ?x449 ?x449 ?x234 ?x234 ?x234)))))
 (let ((?x320 (* (- (/ 1.0 4.0)) (* ?x46 ?x60 ?x60))))
 (let ((?x327 (* (+ ?x320 (* ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43 ?x43)) (+ ?x114 (* ?x60 ?x43) ?x46 ?x194))))
 (let (($x282 (or (not (= ?x327 0.0)) (not (= (* ?x300 ?x278) 0.0)))))
 (let (($x684 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x684 $x282))))))))))))))))))) :qid k!28))
 ))
 (let ((?x160 (lambda ((x Int) (y Int) (z Int) )(let ((?x60 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x257 (* ?x43 ?x60)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x525 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60)))
 (let ((?x607 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60))))
 (let ((?x604 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60))))
 (let ((?x601 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46))))
 (let ((?x598 (* 2.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60 ?x60))))
 (let ((?x595 (* (- 6.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60 ?x60))))
 (let ((?x591 (* 6.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x60))))
 (let ((?x587 (* (- 2.0) (* ?x43 ?x43 ?x43 ?x43 ?x46))))
 (let ((?x377 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60 ?x60)))
 (let ((?x581 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60 ?x60))))
 (let ((?x577 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x60))))
 (let ((?x573 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43))))
 (let ((?x320 (* (- (/ 1.0 4.0)) (* ?x46 ?x60 ?x60))))
 (let ((?x262 (* (- (/ 1.0 4.0)) ?x46)))
 (let ((?x249 (* (- (/ 1.0 4.0)) ?x43)))
 (let ((?x111 (+ ?x249 ?x262 (* (/ 1.0 2.0) ?x257) (* (/ 1.0 2.0) (* ?x46 ?x60)) (* (- (/ 1.0 4.0)) (* ?x43 ?x60 ?x60)) ?x320 ?x573 ?x577 ?x581 ?x377 ?x587 ?x591 ?x595 ?x598 ?x601 ?x604 ?x607 ?x525)))
 (let ((?x695 (+ (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x60 ?x60 ?x60) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x48 ?x60 ?x60 ?x60)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60 ?x103 ?x107)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x60 ?x60 ?x60 ?x60) (* (- (/ 1.0 4.0)) (* ?x46 ?x46 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x46 ?x48 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x46 ?x60 ?x60 ?x103 ?x107)) (* (- (/ 1.0 4.0)) (* ?x43 ?x46 ?x60 ?x60 ?x60)))))
 (let (($x292 (not (= ?x695 0.0))))
 (let (($x109 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x679 (and $x109 (or $x292 (not (= (* ?x111 (+ ?x46 ?x194 ?x114 ?x257)) 0.0))))))
 (let ((?x278 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x60)))) ?x46 ?x43 ?x194)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x234 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x449 (+ ?x46 ?x43)))
 (let ((?x300 (+ (* (- 1.0) (* ?x449 ?x234 ?x234)) (* 8.0 (* ?x43 ?x43 ?x43 ?x449 ?x449 ?x234 ?x234 ?x234)))))
 (let ((?x327 (* (+ ?x320 (* ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43 ?x43)) (+ ?x114 (* ?x60 ?x43) ?x46 ?x194))))
 (let (($x282 (or (not (= ?x327 0.0)) (not (= (* ?x300 ?x278) 0.0)))))
 (let (($x684 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x441 (and $x684 $x282)))
 (rewrite (= $x441 $x679))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x277 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x278 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x234 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x449 (+ ?x46 ?x43)))
 (let ((?x300 (+ (* (- 1.0) (* ?x449 ?x234 ?x234)) (* 8.0 (* ?x43 ?x43 ?x43 ?x449 ?x449 ?x234 ?x234 ?x234)))))
 (let ((?x320 (* (- (/ 1.0 4.0)) (* ?x46 ?x60 ?x60))))
 (let ((?x327 (* (+ ?x320 (* ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43 ?x43)) (+ ?x114 (* ?x60 ?x43) ?x46 ?x194))))
 (let (($x282 (or (not (= ?x327 0.0)) (not (= (* ?x300 ?x278) 0.0)))))
 (let (($x142 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x142 $x282))))))))))))))))))) :qid k!28))
 ))
 (let ((?x144 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x278 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x234 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x449 (+ ?x46 ?x43)))
 (let ((?x300 (+ (* (- 1.0) (* ?x449 ?x234 ?x234)) (* 8.0 (* ?x43 ?x43 ?x43 ?x449 ?x449 ?x234 ?x234 ?x234)))))
 (let ((?x320 (* (- (/ 1.0 4.0)) (* ?x46 ?x60 ?x60))))
 (let ((?x327 (* (+ ?x320 (* ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43 ?x43)) (+ ?x114 (* ?x60 ?x43) ?x46 ?x194))))
 (let (($x282 (or (not (= ?x327 0.0)) (not (= (* ?x300 ?x278) 0.0)))))
 (let (($x684 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x441 (and $x684 $x282)))
 (let (($x142 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x306 (and $x142 $x282)))
 (rewrite (= $x306 $x441))))))))))))))))))))))))
 ))
 (let (($x73 (exists ((x Int) (y Int) (z Int) )(! (let ((?x57 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x60 (to_real y)))
 (let ((?x61 (/ ?x60 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x67 (+ (* (to_real (- 1)) ?x61 ?x61 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x61 ?x61 ?x61 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x64 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x61) ?x46) ?x48)))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (+ (* (to_real (- 1)) ?x42 ?x42 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x59 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x55) ?x57))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x59 (not (= (* ?x64 ?x67) ?x57)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x240 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x194 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x107 (to_real y00)))
 (let ((?x103 (to_real x00)))
 (let ((?x108 (* ?x103 ?x107)))
 (let ((?x114 (* (- 1.0) ?x108)))
 (let ((?x278 (+ ?x114 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x194)))
 (let ((?x60 (to_real y)))
 (let ((?x159 (* (/ 1.0 2.0) ?x60)))
 (let ((?x234 (+ (- (/ 1.0 2.0)) ?x159)))
 (let ((?x449 (+ ?x46 ?x43)))
 (let ((?x300 (+ (* (- 1.0) (* ?x449 ?x234 ?x234)) (* 8.0 (* ?x43 ?x43 ?x43 ?x449 ?x449 ?x234 ?x234 ?x234)))))
 (let ((?x320 (* (- (/ 1.0 4.0)) (* ?x46 ?x60 ?x60))))
 (let ((?x327 (* (+ ?x320 (* ?x46 ?x46 ?x60 ?x60 ?x60 ?x43 ?x43 ?x43)) (+ ?x114 (* ?x60 ?x43) ?x46 ?x194))))
 (let (($x282 (or (not (= ?x327 0.0)) (not (= (* ?x300 ?x278) 0.0)))))
 (let (($x142 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x306 (and $x142 $x282)))
 (let ((?x57 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x61 (/ ?x60 ?x41)))
 (let ((?x67 (+ (* (to_real (- 1)) ?x61 ?x61 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x61 ?x61 ?x61 ?x46 ?x46))))
 (let ((?x64 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x61) ?x46) ?x48)))
 (let ((?x52 (to_real (+ z x))))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (+ (* (to_real (- 1)) ?x42 ?x42 ?x52) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52))))
 (let ((?x28 (- 1)))
 (let ((?x31 (* ?x28 x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let (($x59 (not (= (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) ?x55) ?x57))))
 (let (($x72 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or $x59 (not (= (* ?x64 ?x67) ?x57))))))
 (rewrite (= $x72 $x306)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x305 (mp (mp @x74 (quant-intro (proof-bind ?x240) (= $x73 $x277)) $x277) (rewrite (= $x277 $x277)) $x277)))
 (let ((@x119 (mp (mp @x305 (quant-intro (proof-bind ?x144) (= $x277 $x667)) $x667) (quant-intro (proof-bind ?x160) (= $x667 $x153)) $x153)))
 (let ((@x504 (mp (mp~ @x119 (sk (~ $x153 $x557)) $x557) (rewrite (= $x557 $x421)) $x421)))
 (let ((@x475 (mp (and-elim @x504 $x76) @x389 $x461)))
 (let ((@x291 ((_ th-lemma arith) (hypothesis (not $x77)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x461) $x85)) @x475 $x85) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x450) $x622)) @x487 $x622) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x510) $x621)) @x500 $x621) false)))
 (let ((@x428 (lemma @x291 $x77)))
 (let (($x551 (<= ?x567 0.0)))
 (let (($x189 (>= ?x566 0)))
 (let (($x368 (<= ?x445 0.0)))
 (let (($x547 (>= ?x458 0.0)))
 (let ((@x420 ((_ th-lemma arith) (hypothesis (not $x551)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x510) $x547)) @x500 $x547) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x450) $x368)) @x487 $x368) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x461) $x189)) @x475 $x189) false)))
 (let ((@x528 (lemma @x420 $x551)))
 (let (($x197 (<= ?x372 0.0)))
 (let (($x383 (not $x197)))
 (let (($x559 (>= ?x372 0.0)))
 (let ((@x258 (unit-resolution ((_ th-lemma arith) (or $x559 (not $x77) (not $x551))) (hypothesis (not $x559)) @x528 @x428 false)))
 (let (($x556 (= 0.0 ?x372)))
 (let (($x432 (not $x556)))
 (let ((@x613 (monotonicity (symm (commutativity (= $x556 $x455)) (= $x455 $x556)) (= $x639 $x432))))
 (let (($x329 (= ?x567 0.0)))
 (let (($x549 (= 0.0 ?x567)))
 (let ((@x522 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x549 (not $x551) (not $x77))) @x528 @x428 $x549)))
 (let (($x127 (not $x329)))
 (let ((@x239 (hypothesis $x511)))
 (let (($x162 (or $x127 $x406)))
 (let ((@x276 (lemma (unit-resolution ((_ th-lemma arith) $x162) @x239 (hypothesis $x329) false) $x162)))
 (let ((@x517 (unit-resolution (unit-resolution @x276 @x239 $x127) (symm @x522 $x329) false)))
 (let ((@x615 (mp (unit-resolution (and-elim @x504 $x507) (lemma @x517 $x406) $x639) @x613 $x432)))
 (let ((@x611 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x556 $x383 (not $x559))) @x615 (or $x383 (not $x559)))))
 (unit-resolution ((_ th-lemma arith) (or $x197 (not $x77) (not $x551))) (unit-resolution @x611 (lemma @x258 $x559) $x383) @x528 @x428 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      58
 :arith-eq-adapter               43
 :arith-bound-propagations-cheap 31
 :arith-bound-propagations-lp    4
 :arith-conflicts                89
 :arith-diseq                    44
 :arith-fixed-eqs                2
 :arith-gcd-calls                7
 :arith-grobner-calls            5
 :arith-grobner-conflicts        2
 :arith-horner-calls             5
 :arith-lower                    67
 :arith-make-feasible            45
 :arith-max-columns              62
 :arith-max-rows                 16
 :arith-nla-explanations         84
 :arith-nla-lemmas               85
 :arith-patches                  7
 :arith-patches-success          7
 :arith-propagations             31
 :arith-upper                    63
 :conflicts                      12
 :decisions                      67
 :del-clause                     177
 :final-checks                   35
 :max-memory                     4.71
 :memory                         3.15
 :mk-bool-var                    256
 :mk-clause                      225
 :num-allocs                     5414448
 :num-checks                     1
 :propagations                   96
 :rlimit-count                   5350
 :time                           0.03
 :total-time                     0.03)
