unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x202 (+ (* (- 1.0) (* (to_real b!2) (to_real x!0))) (to_real (* b!2 x!0)))))
 (let (($x513 (>= ?x202 0.0)))
 (let (($x801 (= ?x202 0.0)))
 (let ((@x274 (lemma (unit-resolution ((_ th-lemma arith) $x801) (hypothesis (not $x801)) false) $x801)))
 (let ((@x124 ((_ th-lemma arith triangle-eq) (or (not $x801) $x513))))
 (let (($x1210 (<= ?x202 0.0)))
 (let ((@x852 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x801) $x1210)) @x274 $x1210)))
 (let ((?x1045 (to_real x!0)))
 (let ((?x665 (to_real r!1)))
 (let ((?x666 (to_real b!2)))
 (let ((?x150 (to_real x00)))
 (let ((?x149 (to_real b00)))
 (let ((?x469 (+ (* (/ 1.0 4.0) (* (to_real r00) ?x665 ?x665 ?x665 ?x666 ?x666)) (* (- (/ 1.0 4.0)) (* ?x665 ?x665 ?x665 ?x665 ?x666 ?x666 ?x666 ?x1045)) (* (- 4.0) (* ?x149 ?x150 ?x665 ?x665 ?x1045 ?x1045)) (* 2.0 (* (to_real r00) ?x665 ?x665 ?x666 ?x666 ?x1045 ?x1045 ?x1045)) (* (- 2.0) (* ?x665 ?x665 ?x665 ?x666 ?x666 ?x1045 ?x1045 ?x1045)) (* 4.0 (* ?x665 ?x665 ?x666 ?x1045 ?x1045 ?x1045)) (* (/ 1.0 4.0) (* ?x149 ?x150 ?x665 ?x665 ?x665 ?x666 ?x666)) (* (- (/ 1.0 4.0)) (* ?x665 ?x665 ?x665 ?x666 ?x666 ?x666 ?x1045)) (* (- (/ 1.0 4.0)) (* ?x665 ?x665 ?x665 ?x665 ?x666 ?x666)) (* 8.0 (* ?x149 ?x150 ?x665 ?x665 ?x665 ?x1045 ?x1045 ?x1045)) (* 4.0 (* ?x665 ?x665 ?x665 ?x1045 ?x1045)) (* (- 8.0) (* ?x665 ?x665 ?x665 ?x666 ?x1045 ?x1045 ?x1045 ?x1045)) (* (- 2.0) (* ?x665 ?x665 ?x666 ?x666 ?x666 ?x1045 ?x1045 ?x1045 ?x1045)) (* 8.0 (* (to_real r00) ?x665 ?x665 ?x665 ?x1045 ?x1045 ?x1045)) (* (/ 1.0 4.0) (* (to_real r00) ?x665 ?x665 ?x665 ?x666 ?x666 ?x666 ?x1045)) (* 2.0 (* ?x149 ?x150 ?x665 ?x665 ?x666 ?x666 ?x1045 ?x1045 ?x1045)) (* (- (/ 1.0 4.0)) (* ?x665 ?x665 ?x665 ?x666 ?x666 ?x666 ?x666 ?x1045 ?x1045)) (* (/ 1.0 4.0) (* ?x149 ?x150 ?x665 ?x665 ?x665 ?x666 ?x666 ?x666 ?x1045)) (* (- 4.0) (* (to_real r00) ?x665 ?x665 ?x1045 ?x1045)) (* (- 8.0) (* ?x665 ?x665 ?x665 ?x665 ?x1045 ?x1045 ?x1045)))))
 (let (($x325 (>= ?x469 0.0)))
 (let (($x94 (not $x325)))
 (let (($x490 (= ?x469 0.0)))
 (let (($x292 (not $x490)))
 (let ((?x316 (* (/ 3.0 16.0) (* ?x665 ?x666 ?x666 ?x666 ?x666))))
 (let ((?x268 (* 4.0 (* ?x665 ?x666 ?x1045))))
 (let ((?x331 (* (- 4.0) (* ?x665 ?x665 ?x1045))))
 (let ((?x1032 (* ?x665 ?x666)))
 (let ((?x228 (* 2.0 (* ?x665 ?x665 ?x666 ?x666 ?x1045 ?x1045 ?x1045))))
 (let ((?x307 (* (- 4.0) (* ?x665 ?x665 ?x1045 ?x1045))))
 (let ((?x1009 (* (/ 1.0 4.0) (* ?x665 ?x665 ?x665 ?x666 ?x666))))
 (let ((?x1012 (* (- (/ 3.0 8.0)) (* ?x665 ?x665 ?x666 ?x666 ?x666 ?x666 ?x1045))))
 (let ((?x772 (* (- (/ 1.0 32.0)) (* ?x666 ?x666 ?x666 ?x666 ?x666 ?x666 ?x1045))))
 (let ((?x683 (* (- (/ 1.0 2.0)) ?x666)))
 (let ((?x295 (+ ?x665 ?x683)))
 (let ((?x677 (+ 1.0 (* 2.0 ?x1045))))
 (let ((?x812 (* ?x677 ?x677 ?x677 ?x295 ?x295 ?x295)))
 (let ((?x811 (* (- (/ 1.0 64.0)) (* ?x666 ?x666 ?x666 ?x666 ?x666 ?x666))))
 (let ((?x125 (* (/ 3.0 2.0) (* ?x665 ?x665 ?x666 ?x666 ?x1045))))
 (let ((?x763 (* (/ 3.0 8.0) (* ?x666 ?x666 ?x666 ?x666 ?x1045))))
 (let ((?x599 (* (- (/ 1.0 32.0)) (* ?x666 ?x666 ?x666 ?x666 ?x666))))
 (let ((?x1085 (* (/ 3.0 4.0) (* ?x666 ?x666 ?x666 ?x666 ?x1045 ?x1045))))
 (let ((?x893 (* (- 1.0) (* ?x666 ?x666 ?x1045 ?x1045))))
 (let ((?x329 (* (- 3.0) (* ?x665 ?x666 ?x666 ?x666 ?x1045 ?x1045))))
 (let ((?x86 (* (- (/ 1.0 4.0)) (* ?x665 ?x666 ?x666 ?x666))))
 (let ((?x283 (* (- 1.0) (* ?x666 ?x666 ?x1045))))
 (let ((?x279 (* (- 1.0) (* ?x665 ?x665))))
 (let ((?x452 (* (- (/ 1.0 4.0)) (* ?x666 ?x666))))
 (let ((?x1039 (* (- 2.0) (* ?x665 ?x666 ?x666 ?x666 ?x1045 ?x1045 ?x1045))))
 (let ((?x381 (* ?x665 ?x665 ?x665 ?x666 ?x666 ?x666 ?x1045)))
 (let ((?x106 (* (/ 1.0 4.0) ?x381)))
 (let ((?x304 (* (- (/ 3.0 8.0)) (* ?x665 ?x665 ?x666 ?x666 ?x666))))
 (let ((?x291 (* (/ 3.0 32.0) (* ?x665 ?x666 ?x666 ?x666 ?x666 ?x666))))
 (let ((?x155 (* (/ 1.0 4.0) (* ?x665 ?x665 ?x666 ?x666))))
 (let ((?x552 (* (/ 1.0 8.0) (* ?x665 ?x665 ?x665 ?x666 ?x666 ?x666))))
 (let ((?x341 (* 4.0 (* ?x665 ?x666 ?x1045 ?x1045))))
 (let ((?x1046 (* (- (/ 3.0 16.0)) (* ?x665 ?x665 ?x666 ?x666 ?x666 ?x666))))
 (let ((?x404 (* (/ 3.0 16.0) (* ?x665 ?x666 ?x666 ?x666 ?x666 ?x666 ?x1045))))
 (let ((?x319 (* (- (/ 3.0 2.0)) (* ?x665 ?x666 ?x666 ?x666 ?x1045))))
 (let ((?x1112 (* 3.0 (* ?x665 ?x665 ?x666 ?x666 ?x1045 ?x1045))))
 (let ((?x755 (* (/ 1.0 16.0) (* ?x666 ?x666 ?x666 ?x666))))
 (let ((?x282 (* (/ 1.0 2.0) (* ?x666 ?x666 ?x666 ?x666 ?x1045 ?x1045 ?x1045))))
 (let ((?x254 (+ ?x282 ?x755 ?x1112 ?x319 ?x404 ?x1046 ?x341 ?x552 ?x155 ?x291 ?x304 ?x106 ?x1039 ?x452 ?x279 ?x283 ?x86 ?x329 ?x893 ?x1085 ?x599 ?x763 ?x125 ?x811 ?x812 ?x772 ?x1012 ?x1009 ?x307 ?x228 ?x1032 ?x331 ?x268 ?x316)))
 (let ((?x1053 (* ?x666 ?x1045)))
 (let ((?x154 (* (- 1.0) (* ?x149 ?x150))))
 (let ((?x64 (to_real r00)))
 (let ((?x140 (* (- 1.0) ?x64)))
 (let ((?x361 (* (+ ?x140 ?x154 ?x665 ?x1053) ?x254)))
 (let (($x1011 (= ?x361 0.0)))
 (let ((?x459 (+ ?x1053 ?x154 ?x665 ?x140)))
 (let (($x290 (<= ?x459 0.0)))
 (let ((?x950 (+ ?x154 (to_real (* b00 x00)))))
 (let (($x1018 (<= ?x950 0.0)))
 (let (($x300 (= 0.0 ?x950)))
 (let ((@x1223 (symm (commutativity (= $x300 (= ?x950 0.0))) (= (= ?x950 0.0) $x300))))
 (let ((@x273 (unit-resolution (hypothesis (not $x300)) (mp ((_ th-lemma arith) (= ?x950 0.0)) @x1223 $x300) false)))
 (let ((@x405 (lemma @x273 $x300)))
 (let ((@x1191 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x300) $x1018)) @x405 $x1018)))
 (let ((?x91 (* b00 x00)))
 (let ((?x339 (+ r00 ?x91 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x255 (>= ?x339 0)))
 (let (($x265 (= 0 ?x339)))
 (let ((@x345 (symm (commutativity (= $x265 (= ?x339 0))) (= (= ?x339 0) $x265))))
 (let (($x1221 (= ?x339 0)))
 (let (($x362 (not $x1011)))
 (let (($x306 (or $x292 $x362)))
 (let (($x242 (and $x1221 $x306)))
 (let ((?x850 (* (/ 1.0 4.0) (* ?x666 ?x666 ?x666 ?x1045 ?x665 ?x665 ?x665))))
 (let ((?x1130 (+ (* (/ 1.0 4.0) (* ?x666 ?x666 ?x665 ?x665 ?x665)) (* (- 4.0) (* ?x1045 ?x1045 ?x665 ?x665)) ?x850 (* 2.0 (* ?x666 ?x666 ?x1045 ?x1045 ?x1045 ?x665 ?x665)) (* ?x677 ?x677 ?x677 (+ ?x683 ?x665) (+ ?x683 ?x665) (+ ?x683 ?x665)) ?x599 (* (/ 3.0 16.0) (* ?x666 ?x666 ?x666 ?x666 ?x665)) (* (- (/ 3.0 8.0)) (* ?x666 ?x666 ?x666 ?x665 ?x665)) ?x811 (* (/ 3.0 32.0) (* ?x666 ?x666 ?x666 ?x666 ?x666 ?x665)) (* (- (/ 3.0 16.0)) (* ?x666 ?x666 ?x666 ?x666 ?x665 ?x665)) (* (/ 1.0 8.0) (* ?x666 ?x666 ?x666 ?x665 ?x665 ?x665)) ?x772 (* (/ 3.0 16.0) (* ?x666 ?x666 ?x666 ?x666 ?x666 ?x1045 ?x665)) (* (- (/ 3.0 8.0)) (* ?x666 ?x666 ?x666 ?x666 ?x1045 ?x665 ?x665)) (* (/ 1.0 4.0) (* ?x666 ?x666 ?x665 ?x665)) (* (- (/ 1.0 4.0)) (* ?x666 ?x666 ?x666 ?x665)) ?x755 ?x763 (* (- (/ 3.0 2.0)) (* ?x666 ?x666 ?x666 ?x1045 ?x665)) (* (/ 3.0 2.0) (* ?x666 ?x666 ?x1045 ?x665 ?x665)) ?x1085 (* (- 3.0) (* ?x666 ?x666 ?x666 ?x1045 ?x1045 ?x665)) (* 3.0 (* ?x666 ?x666 ?x1045 ?x1045 ?x665 ?x665)) ?x282 (* (- 2.0) (* ?x666 ?x666 ?x666 ?x1045 ?x1045 ?x1045 ?x665)) ?x452 (* ?x666 ?x665) ?x279 ?x283 (* 4.0 (* ?x666 ?x1045 ?x665)) (* (- 4.0) (* ?x1045 ?x665 ?x665)) ?x893 (* 4.0 (* ?x666 ?x1045 ?x1045 ?x665)))))
 (let ((?x1037 (+ ?x850 (* (/ 1.0 4.0) (* ?x666 ?x666 ?x665 ?x665 ?x665 ?x665)) (* (- (/ 1.0 4.0)) (* ?x666 ?x666 ?x665 ?x665 ?x665 ?x64)) (* (- (/ 1.0 4.0)) (* ?x666 ?x666 ?x665 ?x665 ?x665 ?x149 ?x150)) (* (- 4.0) (* ?x1045 ?x1045 ?x665 ?x665 ?x665)) (* 4.0 (* ?x1045 ?x1045 ?x665 ?x665 ?x64)) (* 4.0 (* ?x1045 ?x1045 ?x665 ?x665 ?x149 ?x150)) (* (- 4.0) (* ?x666 ?x1045 ?x1045 ?x1045 ?x665 ?x665)) (* (/ 1.0 4.0) (* ?x666 ?x666 ?x666 ?x1045 ?x665 ?x665 ?x665 ?x665)) (* (- (/ 1.0 4.0)) (* ?x666 ?x666 ?x666 ?x1045 ?x665 ?x665 ?x665 ?x64)) (* (- (/ 1.0 4.0)) (* ?x666 ?x666 ?x666 ?x1045 ?x665 ?x665 ?x665 ?x149 ?x150)) (* (/ 1.0 4.0) (* ?x666 ?x666 ?x666 ?x666 ?x1045 ?x1045 ?x665 ?x665 ?x665)) (* 8.0 (* ?x1045 ?x1045 ?x1045 ?x665 ?x665 ?x665 ?x665)) (* (- 8.0) (* ?x1045 ?x1045 ?x1045 ?x665 ?x665 ?x665 ?x64)) (* (- 8.0) (* ?x1045 ?x1045 ?x1045 ?x665 ?x665 ?x665 ?x149 ?x150)) (* 8.0 (* ?x666 ?x1045 ?x1045 ?x1045 ?x1045 ?x665 ?x665 ?x665)) (* 2.0 (* ?x666 ?x666 ?x1045 ?x1045 ?x1045 ?x665 ?x665 ?x665)) (* (- 2.0) (* ?x666 ?x666 ?x1045 ?x1045 ?x1045 ?x665 ?x665 ?x64)) (* (- 2.0) (* ?x666 ?x666 ?x1045 ?x1045 ?x1045 ?x665 ?x665 ?x149 ?x150)) (* 2.0 (* ?x666 ?x666 ?x666 ?x1045 ?x1045 ?x1045 ?x1045 ?x665 ?x665)))))
 (let (($x554 (or (not (= ?x1037 0.0)) (not (= (* (+ ?x665 ?x140 ?x154 ?x1053) ?x1130) 0.0)))))
 (let (($x1242 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x91)) 0) $x554)))
 (let (($x719 (exists ((b Int) (r Int) (x Int) )(! (let ((?x1277 (* 4.0 (* (to_real b) (to_real x) (to_real x) (to_real r)))))
 (let ((?x1261 (* (- 1.0) (* (to_real b) (to_real b) (to_real x) (to_real x)))))
 (let ((?x1274 (* (- 4.0) (* (to_real x) (to_real r) (to_real r)))))
 (let ((?x1271 (* 4.0 (* (to_real b) (to_real x) (to_real r)))))
 (let ((?x1258 (* (- 1.0) (* (to_real b) (to_real b) (to_real x)))))
 (let ((?x1257 (* (- 1.0) (* (to_real r) (to_real r)))))
 (let ((?x47 (to_real r)))
 (let ((?x40 (to_real b)))
 (let ((?x1147 (* ?x40 ?x47)))
 (let ((?x1266 (* (- (/ 1.0 4.0)) (* ?x40 ?x40))))
 (let ((?x1119 (* (- 2.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) (to_real x) ?x47))))
 (let ((?x1116 (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x) (to_real x)))))
 (let ((?x1113 (* 3.0 (* ?x40 ?x40 (to_real x) (to_real x) ?x47 ?x47))))
 (let ((?x1110 (* (- 3.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) ?x47))))
 (let ((?x1107 (* (/ 3.0 4.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x)))))
 (let ((?x1104 (* (/ 3.0 2.0) (* ?x40 ?x40 (to_real x) ?x47 ?x47))))
 (let ((?x1101 (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 (to_real x) ?x47))))
 (let ((?x1098 (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x)))))
 (let ((?x1094 (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40))))
 (let ((?x1090 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x47))))
 (let ((?x1072 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47))))
 (let ((?x832 (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 (to_real x) ?x47 ?x47))))
 (let ((?x829 (* (/ 3.0 16.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 (to_real x) ?x47))))
 (let ((?x826 (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 (to_real x)))))
 (let ((?x803 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x823 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x819 (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x815 (* (- (/ 1.0 64.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x634 (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x630 (* (/ 3.0 16.0) (* ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x626 (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x177 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x250 (+ ?x177 ?x47)))
 (let ((?x43 (to_real x)))
 (let ((?x512 (* 2.0 ?x43)))
 (let ((?x517 (+ 1.0 ?x512)))
 (let ((?x244 (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47))))
 (let ((?x204 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x191 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47))))
 (let ((?x187 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x474 (+ ?x187 ?x191 ?x204 ?x244 (* ?x517 ?x517 ?x517 ?x250 ?x250 ?x250) ?x626 ?x630 ?x634 ?x815 ?x819 ?x823 ?x803 ?x826 ?x829 ?x832 ?x1072 ?x1090 ?x1094 ?x1098 ?x1101 ?x1104 ?x1107 ?x1110 ?x1113 ?x1116 ?x1119 ?x1266 ?x1147 ?x1257 ?x1258 ?x1271 ?x1274 ?x1261 ?x1277)))
 (let ((?x154 (* (- 1.0) (* (to_real b00) (to_real x00)))))
 (let ((?x64 (to_real r00)))
 (let ((?x140 (* (- 1.0) ?x64)))
 (let ((?x150 (to_real x00)))
 (let ((?x149 (to_real b00)))
 (let ((?x482 (+ ?x204 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47 ?x149 ?x150)) (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x64)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x149 ?x150)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x149 ?x150)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 8.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x149 ?x150)) (* 8.0 (* ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x64)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x149 ?x150)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47)))))
 (let (($x119 (not (= ?x482 0.0))))
 (let (($x1034 (or $x119 (not (= (* (+ ?x47 ?x140 ?x154 (* ?x40 ?x43)) ?x474) 0.0)))))
 (let (($x127 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x127 $x1034))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x817 (exists ((b Int) (r Int) (x Int) )(! (let ((?x40 (to_real b)))
 (let ((?x177 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x924 (+ ?x47 ?x177)))
 (let ((?x43 (to_real x)))
 (let ((?x512 (* 2.0 ?x43)))
 (let ((?x517 (+ 1.0 ?x512)))
 (let ((?x968 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x924 ?x924 ?x924)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x517 ?x924 ?x924 ?x924)) (* ?x517 ?x517 ?x517 ?x924 ?x924 ?x924) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x517 ?x517 ?x517 ?x924 ?x924)) (* (- 1.0) (* ?x517 ?x517 ?x924 ?x924)))))
 (let ((?x64 (to_real r00)))
 (let ((?x140 (* (- 1.0) ?x64)))
 (let ((?x154 (* (- 1.0) (* (to_real b00) (to_real x00)))))
 (let (($x996 (= (* (+ ?x154 ?x47 ?x177 ?x140 (* (/ 1.0 2.0) (* ?x40 ?x517))) ?x968) 0.0)))
 (let ((?x191 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47))))
 (let ((?x735 (+ (* (/ 1.0 4.0) (* ?x47 ?x47 ?x47 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* 8.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x40 ?x40)) ?x191)))
 (let (($x998 (or (not (= (* (+ ?x154 ?x47 ?x140 (* ?x43 ?x40)) ?x735) 0.0)) (not $x996))))
 (let (($x897 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x897 $x998))))))))))))))))) :qid k!28))
 ))
 (let ((?x682 (lambda ((b Int) (r Int) (x Int) )(let ((?x1277 (* 4.0 (* (to_real b) (to_real x) (to_real x) (to_real r)))))
 (let ((?x1261 (* (- 1.0) (* (to_real b) (to_real b) (to_real x) (to_real x)))))
 (let ((?x1274 (* (- 4.0) (* (to_real x) (to_real r) (to_real r)))))
 (let ((?x1271 (* 4.0 (* (to_real b) (to_real x) (to_real r)))))
 (let ((?x1258 (* (- 1.0) (* (to_real b) (to_real b) (to_real x)))))
 (let ((?x1257 (* (- 1.0) (* (to_real r) (to_real r)))))
 (let ((?x47 (to_real r)))
 (let ((?x40 (to_real b)))
 (let ((?x1147 (* ?x40 ?x47)))
 (let ((?x1266 (* (- (/ 1.0 4.0)) (* ?x40 ?x40))))
 (let ((?x1119 (* (- 2.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) (to_real x) ?x47))))
 (let ((?x1116 (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x) (to_real x)))))
 (let ((?x1113 (* 3.0 (* ?x40 ?x40 (to_real x) (to_real x) ?x47 ?x47))))
 (let ((?x1110 (* (- 3.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) ?x47))))
 (let ((?x1107 (* (/ 3.0 4.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x)))))
 (let ((?x1104 (* (/ 3.0 2.0) (* ?x40 ?x40 (to_real x) ?x47 ?x47))))
 (let ((?x1101 (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 (to_real x) ?x47))))
 (let ((?x1098 (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x)))))
 (let ((?x1094 (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40))))
 (let ((?x1090 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x47))))
 (let ((?x1072 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47))))
 (let ((?x832 (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 (to_real x) ?x47 ?x47))))
 (let ((?x829 (* (/ 3.0 16.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 (to_real x) ?x47))))
 (let ((?x826 (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 (to_real x)))))
 (let ((?x803 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x823 (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x819 (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x815 (* (- (/ 1.0 64.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x634 (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x630 (* (/ 3.0 16.0) (* ?x40 ?x40 ?x40 ?x40 ?x47))))
 (let ((?x626 (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x177 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x250 (+ ?x177 ?x47)))
 (let ((?x43 (to_real x)))
 (let ((?x512 (* 2.0 ?x43)))
 (let ((?x517 (+ 1.0 ?x512)))
 (let ((?x244 (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47))))
 (let ((?x204 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47))))
 (let ((?x191 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47))))
 (let ((?x187 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47 ?x47))))
 (let ((?x474 (+ ?x187 ?x191 ?x204 ?x244 (* ?x517 ?x517 ?x517 ?x250 ?x250 ?x250) ?x626 ?x630 ?x634 ?x815 ?x819 ?x823 ?x803 ?x826 ?x829 ?x832 ?x1072 ?x1090 ?x1094 ?x1098 ?x1101 ?x1104 ?x1107 ?x1110 ?x1113 ?x1116 ?x1119 ?x1266 ?x1147 ?x1257 ?x1258 ?x1271 ?x1274 ?x1261 ?x1277)))
 (let ((?x154 (* (- 1.0) (* (to_real b00) (to_real x00)))))
 (let ((?x64 (to_real r00)))
 (let ((?x140 (* (- 1.0) ?x64)))
 (let ((?x150 (to_real x00)))
 (let ((?x149 (to_real b00)))
 (let ((?x482 (+ ?x204 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x47 ?x47 ?x149 ?x150)) (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47 ?x47)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x64)) (* 4.0 (* ?x43 ?x43 ?x47 ?x47 ?x149 ?x150)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x64)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47 ?x149 ?x150)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 8.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x64)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47 ?x149 ?x150)) (* 8.0 (* ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x64)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x149 ?x150)) (* 2.0 (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x43 ?x47 ?x47)))))
 (let (($x119 (not (= ?x482 0.0))))
 (let (($x1034 (or $x119 (not (= (* (+ ?x47 ?x140 ?x154 (* ?x40 ?x43)) ?x474) 0.0)))))
 (let (($x127 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x538 (and $x127 $x1034)))
 (let ((?x993 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x517 ?x517 ?x517 (+ ?x47 ?x177) (+ ?x47 ?x177)))))
 (let ((?x975 (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x517 (+ ?x47 ?x177) (+ ?x47 ?x177) (+ ?x47 ?x177)))))
 (let ((?x968 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 (+ ?x47 ?x177) (+ ?x47 ?x177) (+ ?x47 ?x177))) ?x975 (* ?x517 ?x517 ?x517 (+ ?x47 ?x177) (+ ?x47 ?x177) (+ ?x47 ?x177)) ?x993 (* (- 1.0) (* ?x517 ?x517 (+ ?x47 ?x177) (+ ?x47 ?x177))))))
 (let (($x996 (= (* (+ ?x154 ?x47 ?x177 ?x140 (* (/ 1.0 2.0) (* ?x40 ?x517))) ?x968) 0.0)))
 (let ((?x735 (+ (* (/ 1.0 4.0) (* ?x47 ?x47 ?x47 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* 8.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x40 ?x40)) ?x191)))
 (let (($x998 (or (not (= (* (+ ?x154 ?x47 ?x140 (* ?x43 ?x40)) ?x735) 0.0)) (not $x996))))
 (let (($x897 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x580 (and $x897 $x998)))
 (rewrite (= $x580 $x538))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x862 (exists ((b Int) (r Int) (x Int) )(! (let ((?x40 (to_real b)))
 (let ((?x177 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x924 (+ ?x47 ?x177)))
 (let ((?x43 (to_real x)))
 (let ((?x512 (* 2.0 ?x43)))
 (let ((?x517 (+ 1.0 ?x512)))
 (let ((?x968 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x924 ?x924 ?x924)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x517 ?x924 ?x924 ?x924)) (* ?x517 ?x517 ?x517 ?x924 ?x924 ?x924) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x517 ?x517 ?x517 ?x924 ?x924)) (* (- 1.0) (* ?x517 ?x517 ?x924 ?x924)))))
 (let ((?x64 (to_real r00)))
 (let ((?x140 (* (- 1.0) ?x64)))
 (let ((?x154 (* (- 1.0) (* (to_real b00) (to_real x00)))))
 (let (($x996 (= (* (+ ?x154 ?x47 ?x177 ?x140 (* (/ 1.0 2.0) (* ?x40 ?x517))) ?x968) 0.0)))
 (let ((?x191 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47))))
 (let ((?x735 (+ (* (/ 1.0 4.0) (* ?x47 ?x47 ?x47 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* 8.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x40 ?x40)) ?x191)))
 (let (($x998 (or (not (= (* (+ ?x154 ?x47 ?x140 (* ?x43 ?x40)) ?x735) 0.0)) (not $x996))))
 (let (($x556 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x556 $x998))))))))))))))))) :qid k!28))
 ))
 (let ((?x548 (lambda ((b Int) (r Int) (x Int) )(let ((?x40 (to_real b)))
 (let ((?x177 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x924 (+ ?x47 ?x177)))
 (let ((?x43 (to_real x)))
 (let ((?x512 (* 2.0 ?x43)))
 (let ((?x517 (+ 1.0 ?x512)))
 (let ((?x968 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x924 ?x924 ?x924)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x517 ?x924 ?x924 ?x924)) (* ?x517 ?x517 ?x517 ?x924 ?x924 ?x924) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x517 ?x517 ?x517 ?x924 ?x924)) (* (- 1.0) (* ?x517 ?x517 ?x924 ?x924)))))
 (let ((?x64 (to_real r00)))
 (let ((?x140 (* (- 1.0) ?x64)))
 (let ((?x154 (* (- 1.0) (* (to_real b00) (to_real x00)))))
 (let (($x996 (= (* (+ ?x154 ?x47 ?x177 ?x140 (* (/ 1.0 2.0) (* ?x40 ?x517))) ?x968) 0.0)))
 (let ((?x191 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47))))
 (let ((?x735 (+ (* (/ 1.0 4.0) (* ?x47 ?x47 ?x47 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* 8.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x40 ?x40)) ?x191)))
 (let (($x998 (or (not (= (* (+ ?x154 ?x47 ?x140 (* ?x43 ?x40)) ?x735) 0.0)) (not $x996))))
 (let (($x897 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x580 (and $x897 $x998)))
 (let (($x556 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x956 (and $x556 $x998)))
 (rewrite (= $x956 $x580))))))))))))))))))))))
 ))
 (let (($x83 (exists ((b Int) (r Int) (x Int) )(! (let ((?x58 (to_real 0)))
 (let ((?x68 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x47 (to_real r)))
 (let ((?x61 (- ?x47 ?x42)))
 (let ((?x75 (+ (* ?x42 ?x42 ?x61 ?x61 ?x61) (* ?x42 ?x42 ?x42 ?x61 ?x61 ?x61 ?x68) (* ?x61 ?x61 ?x61 ?x68 ?x68 ?x68) (* ?x42 ?x42 ?x61 ?x61 ?x68 ?x68 ?x68))))
 (let ((?x70 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x61) (to_real r00)) (* ?x42 ?x68))))
 (let ((?x43 (to_real x)))
 (let ((?x53 (+ (* ?x42 ?x42 ?x47 ?x47 ?x47) (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 ?x43) (to_real (* r r r 2 x 2 x 2 x)) (* ?x42 ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x59 (= (* ?x46 (- ?x53 (to_real (* r r 2 x 2 x)))) ?x58)))
 (let (($x81 (or (not $x59) (not (= (* ?x70 (- ?x75 (* ?x61 ?x61 ?x68 ?x68))) ?x58)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 $x81)))))))))))))))) :qid k!28))
 ))
 (let ((?x988 (lambda ((b Int) (r Int) (x Int) )(let ((?x40 (to_real b)))
 (let ((?x177 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x924 (+ ?x47 ?x177)))
 (let ((?x43 (to_real x)))
 (let ((?x512 (* 2.0 ?x43)))
 (let ((?x517 (+ 1.0 ?x512)))
 (let ((?x968 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x924 ?x924 ?x924)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x517 ?x924 ?x924 ?x924)) (* ?x517 ?x517 ?x517 ?x924 ?x924 ?x924) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x517 ?x517 ?x517 ?x924 ?x924)) (* (- 1.0) (* ?x517 ?x517 ?x924 ?x924)))))
 (let ((?x64 (to_real r00)))
 (let ((?x140 (* (- 1.0) ?x64)))
 (let ((?x154 (* (- 1.0) (* (to_real b00) (to_real x00)))))
 (let (($x996 (= (* (+ ?x154 ?x47 ?x177 ?x140 (* (/ 1.0 2.0) (* ?x40 ?x517))) ?x968) 0.0)))
 (let ((?x191 (* (- 4.0) (* ?x43 ?x43 ?x47 ?x47))))
 (let ((?x735 (+ (* (/ 1.0 4.0) (* ?x47 ?x47 ?x47 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* 8.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* 2.0 (* ?x43 ?x43 ?x43 ?x47 ?x47 ?x40 ?x40)) ?x191)))
 (let (($x998 (or (not (= (* (+ ?x154 ?x47 ?x140 (* ?x43 ?x40)) ?x735) 0.0)) (not $x996))))
 (let (($x556 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x956 (and $x556 $x998)))
 (let ((?x58 (to_real 0)))
 (let ((?x68 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x61 (- ?x47 ?x42)))
 (let ((?x75 (+ (* ?x42 ?x42 ?x61 ?x61 ?x61) (* ?x42 ?x42 ?x42 ?x61 ?x61 ?x61 ?x68) (* ?x61 ?x61 ?x61 ?x68 ?x68 ?x68) (* ?x42 ?x42 ?x61 ?x61 ?x68 ?x68 ?x68))))
 (let ((?x70 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x61) ?x64) (* ?x42 ?x68))))
 (let ((?x53 (+ (* ?x42 ?x42 ?x47 ?x47 ?x47) (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 ?x43) (to_real (* r r r 2 x 2 x 2 x)) (* ?x42 ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x59 (= (* ?x46 (- ?x53 (to_real (* r r 2 x 2 x)))) ?x58)))
 (let (($x81 (or (not $x59) (not (= (* ?x70 (- ?x75 (* ?x61 ?x61 ?x68 ?x68))) ?x58)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x82 (and $x38 $x81)))
 (rewrite (= $x82 $x956)))))))))))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x881 (mp (mp @x84 (quant-intro (proof-bind ?x988) (= $x83 $x862)) $x862) (rewrite (= $x862 $x862)) $x862)))
 (let ((@x1056 (mp (mp @x881 (quant-intro (proof-bind ?x548) (= $x862 $x817)) $x817) (quant-intro (proof-bind ?x682) (= $x817 $x719)) $x719)))
 (let ((@x215 (mp (mp~ @x1056 (sk (~ $x719 $x1242)) $x1242) (rewrite (= $x1242 $x242)) $x242)))
 (let ((@x342 (mp (and-elim @x215 $x1221) @x345 $x265)))
 (let ((@x253 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x265) $x255)) @x342 $x255)))
 (let ((@x332 ((_ th-lemma arith) @x253 (hypothesis (not $x290)) (hypothesis $x1018) (unit-resolution @x124 ((_ th-lemma arith) $x801) $x513) false)))
 (let ((@x609 (unit-resolution (lemma @x332 (or (not $x1018) $x290)) @x1191 $x290)))
 (let ((?x374 (+ ?x763 ?x125 ?x811 ?x812 ?x772 ?x1012 ?x1009 ?x307 ?x228 ?x1032 ?x331 ?x268 ?x106 ?x316 ?x282 ?x755 ?x1112 ?x319 ?x404 ?x1046 ?x341 ?x552 ?x155 ?x291 ?x304 ?x1039 ?x452 ?x279 ?x283 ?x86 ?x329 ?x893 ?x1085 ?x599)))
 (let (($x372 (<= ?x374 0.0)))
 (let (($x984 (not $x372)))
 (let (($x961 (= ?x374 0.0)))
 (let (($x963 (not $x961)))
 (let ((@x962 (hypothesis $x362)))
 (let (($x858 (or $x963 $x1011)))
 (let ((@x838 (lemma (unit-resolution ((_ th-lemma arith) $x858) @x962 (hypothesis $x961) false) $x858)))
 (let (($x337 (>= ?x374 0.0)))
 (let (($x821 (<= ?x361 0.0)))
 (let (($x767 (not $x821)))
 (let (($x450 (>= ?x361 0.0)))
 (let (($x430 (not $x450)))
 (let ((@x280 (hypothesis $x430)))
 (let (($x436 (not $x337)))
 (let ((@x1177 (hypothesis $x436)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith) (or (not $x290) $x337 $x450)) @x280 @x1177 @x609 false)))
 (let (($x579 (>= ?x459 0.0)))
 (let (($x873 (not $x579)))
 (let ((@x990 (unit-resolution ((_ th-lemma arith) (or $x873 $x372 $x450)) @x280 (hypothesis $x984) $x873)))
 (let (($x303 (<= ?x339 0)))
 (let ((@x311 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x265) $x303)) @x342 $x303)))
 (let (($x1214 (>= ?x950 0.0)))
 (let ((@x931 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x300) $x1214)) @x405 $x1214)))
 (let ((@x983 (lemma ((_ th-lemma arith) @x931 @x311 @x990 (hypothesis $x1210) false) (or (not $x1210) $x450 $x372))))
 (let ((@x934 ((_ th-lemma arith triangle-eq) (or $x961 $x984 $x436))))
 (let ((@x752 (unit-resolution @x934 (unit-resolution (unit-resolution @x983 @x852 (or $x450 $x372)) @x280 $x372) (unit-resolution (lemma @x448 (or $x337 $x450)) @x280 $x337) $x961)))
 (let ((@x753 (unit-resolution @x838 @x752 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x362 $x450)) @x280 $x362) false)))
 (let ((@x758 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1011 $x767 $x430)) @x962 (lemma @x753 $x450) $x767)))
 (let ((@x715 (unit-resolution ((_ th-lemma arith) (or $x873 $x337 $x821)) (hypothesis $x767) @x1177 (lemma ((_ th-lemma arith) @x931 @x311 (hypothesis $x873) @x852 false) $x579) false)))
 (let ((@x716 (unit-resolution @x934 (unit-resolution (lemma @x715 (or $x337 $x821)) @x758 $x337) (unit-resolution @x838 @x962 $x963) $x984)))
 (let ((@x782 (unit-resolution ((_ th-lemma arith) (or (not $x290) $x372 $x821)) @x758 @x716 @x609 false)))
 (let (($x314 (<= ?x469 0.0)))
 (let ((@x966 (unit-resolution ((_ th-lemma arith) (or $x314 (not $x303) (not $x255) (not $x1214) (not $x1018))) @x311 @x253 (hypothesis (not $x314)) @x1191 @x931 false)))
 (let ((@x520 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x490 (not $x314) $x94)) (lemma @x966 $x314) (or $x490 $x94))))
 (let ((@x178 (unit-resolution @x520 (unit-resolution (and-elim @x215 $x306) (lemma @x782 $x1011) $x292) $x94)))
 (unit-resolution ((_ th-lemma arith) (or (not $x303) (not $x255) $x325 (not $x1210) (not $x513))) @x311 @x253 @x178 @x852 (unit-resolution @x124 @x274 $x513) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      69
 :arith-eq-adapter               98
 :arith-bound-propagations-cheap 155
 :arith-bound-propagations-lp    44
 :arith-branch                   12
 :arith-conflicts                313
 :arith-cube-calls               3
 :arith-diseq                    156
 :arith-fixed-eqs                3
 :arith-gcd-calls                24
 :arith-gomory-cuts              1
 :arith-grobner-calls            10
 :arith-grobner-conflicts        2
 :arith-horner-calls             10
 :arith-lower                    240
 :arith-make-feasible            219
 :arith-max-columns              120
 :arith-max-rows                 44
 :arith-nla-explanations         242
 :arith-nla-lemmas               302
 :arith-patches                  24
 :arith-patches-success          11
 :arith-propagations             155
 :arith-upper                    204
 :conflicts                      32
 :decisions                      459
 :del-clause                     496
 :final-checks                   92
 :max-memory                     7.81
 :memory                         3.22
 :mk-bool-var                    771
 :mk-clause                      818
 :num-allocs                     99488596
 :num-checks                     1
 :propagations                   500
 :rlimit-count                   15511
 :time                           0.30
 :total-time                     0.31)
