unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x69 (* y00 q00)))
 (let ((?x463 (+ r00 ?x69 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x644 (>= ?x463 0)))
 (let (($x457 (= ?x463 0)))
 (let ((?x399 (* y00 y00 y00 y00)))
 (let ((?x344 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x426 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x491 (+ y00 (* 2 (* y00 y00 y00 r!1 r!1 r!1 q!2)) (* y00 y00 y00 r!1 r!1 r!1 q!2 q!2) (* (- 6) (* y00 y00 y00 y00 r!1 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 r!1 r!1 q!2 q!2)) (* 3 (* y00 y00 y00 y00 y00 r!1)) (* 2 (* y00 y00 y00 y00 r!1)) (* 6 (* y00 y00 y00 y00 y00 r!1 q!2)) (* (- 3) (* y00 y00 y00 y00 r!1 r!1)) ?x426 ?x344 (* (- 1) (* y00 y00 y00 y00 y00 q!2 q!2)) ?x399 (* 4 (* y00 y00 y00 y00 r!1 q!2)) (* (- 2) (* y00 y00 y00 y00 y00 y00 q!2)) (* (- 2) (* y00 y00 y00 y00 y00 q!2)) (* 2 (* y00 y00 y00 y00 r!1 q!2 q!2)) (* 3 (* y00 y00 y00 y00 y00 r!1 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 y00 y00 q!2 q!2)) (* (- 1) (* y00 y00 y00 r!1)) (* y00 y00 y00 r!1 r!1 r!1) (* (- 1) (* y00 y00 y00 r!1 r!1)) (* (- 2) (* y00 y00 y00 r!1 r!1 q!2)) (* (- 1) (* y00 y00 y00 r!1 r!1 q!2 q!2)))))
 (let ((?x495 (* ?x491 (+ (* (- 1) r00) (* (- 1) ?x69) r!1 (* y00 q!2)))))
 (let (($x519 (= ?x495 0)))
 (let (($x496 (not $x519)))
 (let (($x526 (and (= (+ y00 (* (- 1) y!0)) 0) $x457 $x496)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x231 (+ r!1 ?x65 (* q!2 y00) ?x79)))
 (let ((?x326 (+ y00 (* (- 1) (* r!1 r!1 y00 y00 y00)) (* (- 2) (* q!2 r!1 r!1 y00 y00 y00)) (* (- 1) (* q!2 q!2 r!1 r!1 y00 y00 y00)) (* r!1 r!1 r!1 y00 y00 y00) (* 2 (* q!2 r!1 r!1 r!1 y00 y00 y00)) (* q!2 q!2 r!1 r!1 r!1 y00 y00 y00) ?x426 (* (- 3) (* r!1 r!1 y00 y00 y00 y00)) (* (- 6) (* q!2 r!1 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 r!1 r!1 y00 y00 y00 y00)) (* 3 (* r!1 y00 y00 y00 y00 y00)) (* 2 (* r!1 y00 y00 y00 y00)) (* 6 (* q!2 r!1 y00 y00 y00 y00 y00)) (* 4 (* q!2 r!1 y00 y00 y00 y00)) (* 3 (* q!2 q!2 r!1 y00 y00 y00 y00 y00)) (* 2 (* q!2 q!2 r!1 y00 y00 y00 y00)) ?x344 (* (- 2) (* q!2 y00 y00 y00 y00 y00)) (* (- 2) (* q!2 y00 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 y00)) (* (- 1) (* r!1 y00 y00 y00)) ?x399)))
 (let (($x458 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x231 0) (not (= (* ?x326 ?x231) 0)))))
 (let (($x119 (exists ((q Int) (r Int) (y Int) )(! (let ((?x69 (* y00 q00)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x39 (* q y00)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x93 (+ r ?x65 ?x39 ?x79)))
 (let ((?x399 (* y00 y00 y00 y00)))
 (let ((?x415 (* (- 1) (* r y00 y00 y00))))
 (let ((?x354 (* (- 1) (* q q y00 y00 y00 y00 y00 y00))))
 (let ((?x373 (* (- 2) (* q y00 y00 y00 y00 y00 y00))))
 (let ((?x344 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x371 (* 3 (* q q r y00 y00 y00 y00 y00))))
 (let ((?x370 (* 6 (* q r y00 y00 y00 y00 y00))))
 (let ((?x368 (* 3 (* r y00 y00 y00 y00 y00))))
 (let ((?x366 (* (- 3) (* q q r r y00 y00 y00 y00))))
 (let ((?x365 (* (- 6) (* q r r y00 y00 y00 y00))))
 (let ((?x363 (* (- 3) (* r r y00 y00 y00 y00))))
 (let ((?x426 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x182 (* q q r r r y00 y00 y00)))
 (let ((?x361 (* 2 (* q r r r y00 y00 y00))))
 (let ((?x179 (* r r r y00 y00 y00)))
 (let ((?x146 (* (- 1) (* q q r r y00 y00 y00))))
 (let ((?x140 (* (- 1) (* r r y00 y00 y00))))
 (let ((?x649 (+ y00 ?x140 (* (- 2) (* q r r y00 y00 y00)) ?x146 ?x179 ?x361 ?x182 ?x426 ?x363 ?x365 ?x366 ?x368 (* 2 (* r y00 y00 y00 y00)) ?x370 (* 4 (* q r y00 y00 y00 y00)) ?x371 (* 2 (* q q r y00 y00 y00 y00)) ?x344 (* (- 2) (* q y00 y00 y00 y00 y00)) ?x373 ?x354 (* (- 1) (* q q y00 y00 y00 y00 y00)) ?x415 ?x399)))
 (let (($x98 (= ?x93 0)))
 (let (($x75 (= (+ y (* (- 1) y00)) 0)))
 (and $x75 $x98 (not (= (* ?x649 ?x93) 0)))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x298 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x332 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x112 (+ r ?x64)))
 (let ((?x234 (+ 1 q)))
 (let ((?x280 (+ (* (- 1) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112)) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112 ?x112) (* (- 1) (* y00 y00 y00 ?x112)) y00)))
 (let (($x328 (not (= (* ?x280 (+ r ?x64 ?x65 ?x332 (* y00 ?x234))) 0))))
 (let (($x220 (= (+ r ?x65 ?x332 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x220 $x328)))))))))) :qid k!29))
 ))
 (let ((?x180 (lambda ((q Int) (r Int) (y Int) )(let ((?x69 (* y00 q00)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x39 (* q y00)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x93 (+ r ?x65 ?x39 ?x79)))
 (let ((?x399 (* y00 y00 y00 y00)))
 (let ((?x415 (* (- 1) (* r y00 y00 y00))))
 (let ((?x354 (* (- 1) (* q q y00 y00 y00 y00 y00 y00))))
 (let ((?x373 (* (- 2) (* q y00 y00 y00 y00 y00 y00))))
 (let ((?x344 (* (- 1) (* y00 y00 y00 y00 y00 y00))))
 (let ((?x371 (* 3 (* q q r y00 y00 y00 y00 y00))))
 (let ((?x370 (* 6 (* q r y00 y00 y00 y00 y00))))
 (let ((?x368 (* 3 (* r y00 y00 y00 y00 y00))))
 (let ((?x366 (* (- 3) (* q q r r y00 y00 y00 y00))))
 (let ((?x365 (* (- 6) (* q r r y00 y00 y00 y00))))
 (let ((?x363 (* (- 3) (* r r y00 y00 y00 y00))))
 (let ((?x426 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x182 (* q q r r r y00 y00 y00)))
 (let ((?x361 (* 2 (* q r r r y00 y00 y00))))
 (let ((?x179 (* r r r y00 y00 y00)))
 (let ((?x146 (* (- 1) (* q q r r y00 y00 y00))))
 (let ((?x140 (* (- 1) (* r r y00 y00 y00))))
 (let ((?x649 (+ y00 ?x140 (* (- 2) (* q r r y00 y00 y00)) ?x146 ?x179 ?x361 ?x182 ?x426 ?x363 ?x365 ?x366 ?x368 (* 2 (* r y00 y00 y00 y00)) ?x370 (* 4 (* q r y00 y00 y00 y00)) ?x371 (* 2 (* q q r y00 y00 y00 y00)) ?x344 (* (- 2) (* q y00 y00 y00 y00 y00)) ?x373 ?x354 (* (- 1) (* q q y00 y00 y00 y00 y00)) ?x415 ?x399)))
 (let (($x98 (= ?x93 0)))
 (let (($x75 (= (+ y (* (- 1) y00)) 0)))
 (let (($x657 (and $x75 $x98 (not (= (* ?x649 ?x93) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x332 (* (- 1) ?x36)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x112 (+ r ?x64)))
 (let ((?x234 (+ 1 q)))
 (let ((?x280 (+ (* (- 1) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112)) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112 ?x112) (* (- 1) (* y00 y00 y00 ?x112)) y00)))
 (let (($x328 (not (= (* ?x280 (+ r ?x64 ?x65 ?x332 (* y00 ?x234))) 0))))
 (let (($x220 (= (+ r ?x65 ?x332 (* y00 q)) 0)))
 (let (($x67 (and (= (+ y00 (* (- 1) y)) 0) $x220 $x328)))
 (rewrite (= $x67 $x657))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x331 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x332 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x112 (+ r ?x64)))
 (let ((?x234 (+ 1 q)))
 (let ((?x280 (+ (* (- 1) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112)) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112 ?x112) (* (- 1) (* y00 y00 y00 ?x112)) y00)))
 (let (($x328 (not (= (* ?x280 (+ r ?x64 ?x65 ?x332 (* y00 ?x234))) 0))))
 (let (($x220 (= (+ r ?x65 ?x332 (* y00 q)) 0)))
 (and (= (+ ?x64 y) 0) $x220 $x328)))))))))) :qid k!29))
 ))
 (let ((?x266 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x332 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x112 (+ r ?x64)))
 (let ((?x234 (+ 1 q)))
 (let ((?x280 (+ (* (- 1) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112)) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112 ?x112) (* (- 1) (* y00 y00 y00 ?x112)) y00)))
 (let (($x328 (not (= (* ?x280 (+ r ?x64 ?x65 ?x332 (* y00 ?x234))) 0))))
 (let (($x220 (= (+ r ?x65 ?x332 (* y00 q)) 0)))
 (let (($x67 (and (= (+ y00 (* (- 1) y)) 0) $x220 $x328)))
 (let (($x216 (and (= (+ ?x64 y) 0) $x220 $x328)))
 (rewrite (= $x216 $x67))))))))))))))
 ))
 (let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let ((?x54 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) (+ (- ?x50 (* ?x42 y00 y00 y00)) y00))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x54 0)))))))) :qid k!29))
 ))
 (let ((?x86 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x332 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x112 (+ r ?x64)))
 (let ((?x234 (+ 1 q)))
 (let ((?x280 (+ (* (- 1) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112)) (* y00 y00 y00 ?x234 ?x234 ?x112 ?x112 ?x112) (* (- 1) (* y00 y00 y00 ?x112)) y00)))
 (let (($x328 (not (= (* ?x280 (+ r ?x64 ?x65 ?x332 (* y00 ?x234))) 0))))
 (let (($x220 (= (+ r ?x65 ?x332 (* y00 q)) 0)))
 (let (($x216 (and (= (+ ?x64 y) 0) $x220 $x328)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (+ (* (- 1) ?x45 ?x45 ?x42 ?x42 y00 y00 y00) (* ?x45 ?x45 ?x42 ?x42 ?x42 y00 y00 y00))))
 (let ((?x54 (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) (+ (- ?x50 (* ?x42 y00 y00 y00)) y00))))
 (let (($x58 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x54 0))))))
 (rewrite (= $x58 $x216))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x348 (mp (mp @x60 (quant-intro (proof-bind ?x86) (= $x59 $x331)) $x331) (rewrite (= $x331 $x331)) $x331)))
 (let ((@x695 (mp (mp @x348 (quant-intro (proof-bind ?x266) (= $x331 $x298)) $x298) (quant-intro (proof-bind ?x180) (= $x298 $x119)) $x119)))
 (let ((@x518 (mp (mp~ @x695 (sk (~ $x119 $x458)) $x458) (rewrite (= $x458 $x526)) $x526)))
 (let ((@x122 (and-elim @x518 $x457)))
 (let ((@x488 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x457) $x644)) @x122 $x644)))
 (let (($x646 (<= ?x463 0)))
 (let ((@x106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x457) $x646)) @x122 $x646)))
 (let (($x631 (not (<= ?x495 0))))
 (let (($x636 (>= ?x495 0)))
 (let ((@x621 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x519 $x631 (not $x636))) (and-elim @x518 $x496) (or $x631 (not $x636)))))
 (let ((@x437 (unit-resolution @x621 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x636)) @x106 @x488 false) $x636) $x631)))
 ((_ th-lemma arith farkas 1 1 1) @x437 @x106 @x488 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             126
 :arith-nonlinear-bounds    10
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 44
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.57
 :memory                    3.14
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1082638
 :num-checks                1
 :propagations              6
 :rlimit-count              2868
 :time                      0.01
 :total-time                0.01)
