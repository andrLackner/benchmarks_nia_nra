unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x611 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x602 (<= ?x611 0)))
 (let (($x964 (= ?x611 0)))
 (let ((?x223 (+ (* 2 y00) (* 2 x00) (* 2 (* y00 y!0 y!0 y!0)) (* (- 6) (* x00 x!1 y!0 y!0)) (* (- 2) x!1) (* (- 7) (* y!0 y!0)) (* (- 4) (* x!1 y!0)) (* x00 x!1 x!1) (* (- 2) (* x00 x!1 y!0 y!0 y!0)) (* (- 2) y!0) (* 6 (* x00 y!0 y!0)) (* 2 (* x!1 y!0 y!0 y!0 y!0)) (* 4 (* x!1 y!0 y!0 y!0)) (* (- 2) (* y!0 y!0 y!0 y!0)) (* 7 (* x00 y!0)) (* 7 (* y00 y!0)) (* y00 x!1 x!1) (* 6 (* y00 y!0 y!0)) (* 2 (* x!1 x!1 y!0 y!0 y!0)) (* (- 6) (* y00 x!1 y!0 y!0)) (* (- 3) (* x00 x!1)) (* (- 8) (* x00 x!1 y!0)) (* 2 (* x!1 y!0 y!0)) (* 7 (* x!1 x!1 y!0)) (* (- 1) (* x!1 x!1 x!1 y!0)) (* 3 (* x!1 x!1)) (* (- 1) (* x!1 x!1 x!1)) (* (- 2) (* y00 x!1 y!0 y!0 y!0)) (* x00 x!1 x!1 y!0) (* 5 (* x!1 x!1 y!0 y!0)) (* (- 8) (* y00 x!1 y!0)) (* (- 3) (* y00 x!1)) (* y00 x!1 x!1 y!0) (* 2 (* x00 y!0 y!0 y!0)) (* (- 6) (* y!0 y!0 y!0)))))
 (let (($x712 (= ?x223 0)))
 (let (($x954 (not $x712)))
 (let (($x543 (and $x964 $x954)))
 (let ((?x789 (* x!1 x!1 x!1)))
 (let ((?x786 (* x!1 x!1 x!1 y!0)))
 (let ((?x237 (* (- 2) x00)))
 (let ((?x680 (* (- 2) y00)))
 (let ((?x554 (+ (* 2 x!1) (* 2 y!0) ?x680 ?x237 (* (- 7) (* y!0 y00)) (* 8 (* x!1 y!0 y00)) (* (- 1) (* x!1 x!1 y!0 y00)) (* 3 (* x!1 y00)) (* (- 1) (* x!1 x!1 y00)) (* 4 (* x!1 y!0)) (* (- 7) (* y!0 x00)) (* (- 6) (* y!0 y!0 x00)) (* (- 2) (* y!0 y!0 y!0 x00)) (* 3 (* x!1 x00)) (* 8 (* x!1 y!0 x00)) (* 6 (* x!1 y!0 y!0 x00)) (* 2 (* x!1 y!0 y!0 y!0 x00)) (* (- 1) (* x!1 x!1 x00)) (* (- 1) (* x!1 x!1 y!0 x00)) (* 7 (* y!0 y!0)) (* 6 (* y!0 y!0 y!0)) (* (- 4) (* x!1 y!0 y!0 y!0)) (* (- 2) (* x!1 x!1 y!0 y!0 y!0)) (* (- 2) (* x!1 y!0 y!0)) (* (- 6) (* y!0 y!0 y00)) (* (- 2) (* y!0 y!0 y!0 y00)) (* 2 (* x!1 y!0 y!0 y!0 y00)) (* 6 (* x!1 y!0 y!0 y00)) (* (- 7) (* x!1 x!1 y!0)) ?x786 (* (- 3) (* x!1 x!1)) ?x789 (* (- 5) (* x!1 x!1 y!0 y!0)) (* 2 (* y!0 y!0 y!0 y!0)) (* (- 2) (* x!1 y!0 y!0 y!0 y!0)))))
 (let (($x601 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x554 0)))))
 (let (($x1259 (exists ((x Int) (y Int) )(! (let ((?x1311 (* (- 2) (* x y y y y))))
 (let ((?x1310 (* 2 (* y y y y))))
 (let ((?x860 (* x x x)))
 (let ((?x842 (* x x x y)))
 (let ((?x1294 (* 6 (* x y y y00))))
 (let ((?x674 (* 2 (* x y y y y00))))
 (let ((?x697 (* (- 2) (* y y y y00))))
 (let ((?x704 (* (- 6) (* y y y00))))
 (let ((?x1292 (* (- 2) (* x x y y y))))
 (let ((?x1289 (* 6 (* y y y))))
 (let ((?x1286 (* 7 (* y y))))
 (let ((?x1273 (* (- 1) (* x x y x00))))
 (let ((?x1272 (* (- 1) (* x x x00))))
 (let ((?x1271 (* 2 (* x y y y x00))))
 (let ((?x1270 (* 6 (* x y y x00))))
 (let ((?x1269 (* 8 (* x y x00))))
 (let ((?x282 (* (- 2) (* y y y x00))))
 (let ((?x292 (* (- 6) (* y y x00))))
 (let ((?x1267 (* (- 7) (* y x00))))
 (let ((?x1265 (* (- 1) (* x x y00))))
 (let ((?x1263 (* (- 1) (* x x y y00))))
 (let ((?x1262 (* 8 (* x y y00))))
 (let ((?x1261 (* (- 7) (* y y00))))
 (let ((?x237 (* (- 2) x00)))
 (let ((?x680 (* (- 2) y00)))
 (let ((?x567 (* 2 y)))
 (let ((?x876 (* 2 x)))
 (let ((?x1252 (+ ?x876 ?x567 ?x680 ?x237 ?x1261 ?x1262 ?x1263 (* 3 (* x y00)) ?x1265 (* 4 (* x y)) ?x1267 ?x292 ?x282 (* 3 (* x x00)) ?x1269 ?x1270 ?x1271 ?x1272 ?x1273 ?x1286 ?x1289 (* (- 4) (* x y y y)) ?x1292 (* (- 2) (* x y y)) ?x704 ?x697 ?x674 ?x1294 (* (- 7) (* x x y)) ?x842 (* (- 3) (* x x)) ?x860 (* (- 5) (* x x y y)) ?x1310 ?x1311)))
 (let (($x91 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x91 (not (= ?x1252 0)))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x514 (exists ((x Int) (y Int) )(! (let ((?x963 (+ 1 y)))
 (let ((?x962 (+ (- 1) x)))
 (let ((?x361 (+ (* y00 ?x962 ?x962 ?x963) (* (- 1) (* ?x962 ?x963)) (* (- 2) (* x00 ?x962 ?x963 ?x963 ?x963)) (* x00 ?x962 ?x962 ?x963) (* 2 (* ?x962 ?x962 ?x963 ?x963 ?x963)) (* (- 2) (* y00 ?x962 ?x963 ?x963 ?x963)) (* x00 ?x962) (* y00 ?x962) (* (- 1) (* ?x962 ?x962 ?x962 ?x963)) (* (- 1) (* ?x962 ?x962 ?x963 ?x963)) (* (- 1) (* ?x962 ?x962)) (* 2 (* ?x962 ?x963 ?x963 ?x963 ?x963)))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x361 0)))))) :qid k!26))
 ))
 (let ((?x1314 (lambda ((x Int) (y Int) )(let ((?x1311 (* (- 2) (* x y y y y))))
 (let ((?x1310 (* 2 (* y y y y))))
 (let ((?x860 (* x x x)))
 (let ((?x842 (* x x x y)))
 (let ((?x1294 (* 6 (* x y y y00))))
 (let ((?x674 (* 2 (* x y y y y00))))
 (let ((?x697 (* (- 2) (* y y y y00))))
 (let ((?x704 (* (- 6) (* y y y00))))
 (let ((?x1292 (* (- 2) (* x x y y y))))
 (let ((?x1289 (* 6 (* y y y))))
 (let ((?x1286 (* 7 (* y y))))
 (let ((?x1273 (* (- 1) (* x x y x00))))
 (let ((?x1272 (* (- 1) (* x x x00))))
 (let ((?x1271 (* 2 (* x y y y x00))))
 (let ((?x1270 (* 6 (* x y y x00))))
 (let ((?x1269 (* 8 (* x y x00))))
 (let ((?x282 (* (- 2) (* y y y x00))))
 (let ((?x292 (* (- 6) (* y y x00))))
 (let ((?x1267 (* (- 7) (* y x00))))
 (let ((?x1265 (* (- 1) (* x x y00))))
 (let ((?x1263 (* (- 1) (* x x y y00))))
 (let ((?x1262 (* 8 (* x y y00))))
 (let ((?x1261 (* (- 7) (* y y00))))
 (let ((?x237 (* (- 2) x00)))
 (let ((?x680 (* (- 2) y00)))
 (let ((?x567 (* 2 y)))
 (let ((?x876 (* 2 x)))
 (let ((?x1252 (+ ?x876 ?x567 ?x680 ?x237 ?x1261 ?x1262 ?x1263 (* 3 (* x y00)) ?x1265 (* 4 (* x y)) ?x1267 ?x292 ?x282 (* 3 (* x x00)) ?x1269 ?x1270 ?x1271 ?x1272 ?x1273 ?x1286 ?x1289 (* (- 4) (* x y y y)) ?x1292 (* (- 2) (* x y y)) ?x704 ?x697 ?x674 ?x1294 (* (- 7) (* x x y)) ?x842 (* (- 3) (* x x)) ?x860 (* (- 5) (* x x y y)) ?x1310 ?x1311)))
 (let (($x91 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x848 (and $x91 (not (= ?x1252 0)))))
 (let ((?x963 (+ 1 y)))
 (let ((?x962 (+ (- 1) x)))
 (let ((?x361 (+ (* y00 ?x962 ?x962 ?x963) (* (- 1) (* ?x962 ?x963)) (* (- 2) (* x00 ?x962 ?x963 ?x963 ?x963)) (* x00 ?x962 ?x962 ?x963) (* 2 (* ?x962 ?x962 ?x963 ?x963 ?x963)) (* (- 2) (* y00 ?x962 ?x963 ?x963 ?x963)) (* x00 ?x962) (* y00 ?x962) (* (- 1) (* ?x962 ?x962 ?x962 ?x963)) (* (- 1) (* ?x962 ?x962 ?x963 ?x963)) (* (- 1) (* ?x962 ?x962)) (* 2 (* ?x962 ?x963 ?x963 ?x963 ?x963)))))
 (let (($x536 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x361 0)))))
 (rewrite (= $x536 $x848)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x62 (exists ((x Int) (y Int) )(! (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (- (- (* ?x34 ?x34 ?x35 y00) (* ?x34 ?x35)) (* 2 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x44 (+ ?x41 (* ?x34 ?x34 x00 ?x35) (* 2 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x49 (+ (- ?x44 (* 2 ?x34 ?x35 ?x35 ?x35 y00)) (* ?x34 x00) (* ?x34 y00))))
 (let ((?x55 (- (- (- ?x49 (* ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x34 ?x35 ?x35)) (* ?x34 ?x34))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x55 (* 2 ?x34 ?x35 ?x35 ?x35 ?x35)) 0)))))))))) :qid k!26))
 ))
 (let ((?x992 (lambda ((x Int) (y Int) )(let ((?x963 (+ 1 y)))
 (let ((?x962 (+ (- 1) x)))
 (let ((?x361 (+ (* y00 ?x962 ?x962 ?x963) (* (- 1) (* ?x962 ?x963)) (* (- 2) (* x00 ?x962 ?x963 ?x963 ?x963)) (* x00 ?x962 ?x962 ?x963) (* 2 (* ?x962 ?x962 ?x963 ?x963 ?x963)) (* (- 2) (* y00 ?x962 ?x963 ?x963 ?x963)) (* x00 ?x962) (* y00 ?x962) (* (- 1) (* ?x962 ?x962 ?x962 ?x963)) (* (- 1) (* ?x962 ?x962 ?x963 ?x963)) (* (- 1) (* ?x962 ?x962)) (* 2 (* ?x962 ?x963 ?x963 ?x963 ?x963)))))
 (let (($x536 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x361 0)))))
 (let ((?x35 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (- (- (* ?x34 ?x34 ?x35 y00) (* ?x34 ?x35)) (* 2 ?x34 x00 ?x35 ?x35 ?x35))))
 (let ((?x44 (+ ?x41 (* ?x34 ?x34 x00 ?x35) (* 2 ?x34 ?x34 ?x35 ?x35 ?x35))))
 (let ((?x49 (+ (- ?x44 (* 2 ?x34 ?x35 ?x35 ?x35 y00)) (* ?x34 x00) (* ?x34 y00))))
 (let ((?x55 (- (- (- ?x49 (* ?x34 ?x34 ?x34 ?x35)) (* ?x34 ?x34 ?x35 ?x35)) (* ?x34 ?x34))))
 (let (($x61 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x55 (* 2 ?x34 ?x35 ?x35 ?x35 ?x35)) 0))))))
 (rewrite (= $x61 $x536))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x347 (mp (mp @x63 (quant-intro (proof-bind ?x992) (= $x62 $x514)) $x514) (rewrite (= $x514 $x514)) $x514)))
 (let ((@x530 (mp~ (mp @x347 (quant-intro (proof-bind ?x1314) (= $x514 $x1259)) $x1259) (sk (~ $x1259 $x601)) $x601)))
 (let ((@x955 (mp @x530 (rewrite (= $x601 $x543)) $x543)))
 (let ((@x714 (and-elim @x955 $x964)))
 (let ((@x893 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x964) $x602)) @x714 $x602)))
 (let (($x603 (>= ?x611 0)))
 (let ((@x713 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x964) $x603)) @x714 $x603)))
 (let (($x144 (not (>= ?x223 0))))
 (let (($x532 (<= ?x223 0)))
 (let ((@x975 (lemma ((_ th-lemma arith) (hypothesis (not $x532)) @x713 @x893 @x713 @x893 false) $x532)))
 (let ((@x978 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x712 (not $x532) $x144)) (and-elim @x955 $x954) (or (not $x532) $x144))))
 ((_ th-lemma arith) (unit-resolution @x978 @x975 $x144) @x713 @x893 @x713 @x893 false)))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             272
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.72
 :memory                    3.23
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1204720
 :num-checks                1
 :propagations              4
 :rlimit-count              4513
 :time                      0.01
 :total-time                0.01)
