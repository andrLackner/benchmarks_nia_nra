unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x247 (to_real x!0)))
 (let ((?x207 (to_real b!2)))
 (let ((?x724 (* ?x207 ?x247 ?x247 ?x247)))
 (let ((?x240 (to_real r!1)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x836 (* (/ 1.0 2.0) (* (to_real r00) ?x207 ?x207 ?x207 ?x240 ?x240 ?x240 ?x247 ?x247))))
 (let ((?x846 (+ (* 2.0 (* ?x207 ?x207 ?x240 ?x240 ?x240 ?x247 ?x247 ?x247)) (* 4.0 (* ?x240 ?x247 ?x247)) (* (- 4.0) (* ?x145 ?x146 ?x247 ?x247)) (* (- 4.0) (* (to_real r00) ?x247 ?x247)) (* (- (/ 1.0 2.0)) (* ?x207 ?x207 ?x207 ?x240 ?x240 ?x240 ?x240 ?x247 ?x247)) (* 2.0 (* ?x207 ?x240 ?x240 ?x240 ?x240 ?x247 ?x247)) ?x836 (* (/ 1.0 2.0) (* ?x145 ?x146 ?x207 ?x207 ?x207 ?x240 ?x240 ?x240 ?x247 ?x247)) (* (- (/ 1.0 2.0)) (* ?x207 ?x207 ?x207 ?x207 ?x240 ?x240 ?x240 ?x247 ?x247 ?x247)) (* (- 2.0) (* (to_real r00) ?x207 ?x240 ?x240 ?x240 ?x247 ?x247)) (* (- 2.0) (* ?x145 ?x146 ?x207 ?x240 ?x240 ?x240 ?x247 ?x247)) (* 4.0 ?x724))))
 (let (($x620 (<= ?x846 0.0)))
 (let (($x1023 (not $x620)))
 (let (($x628 (>= ?x846 0.0)))
 (let ((?x87 (* b00 x00)))
 (let ((?x623 (+ r00 ?x87 (* (- 1) r!1) (* (- 1) (* b!2 x!0)))))
 (let (($x1072 (>= ?x623 0)))
 (let (($x424 (= 0 ?x623)))
 (let ((@x923 (symm (commutativity (= $x424 (= ?x623 0))) (= (= ?x623 0) $x424))))
 (let (($x624 (= ?x623 0)))
 (let ((?x637 (* ?x207 ?x247)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x767 (* (- 4.0) (* ?x247 ?x247))))
 (let ((?x626 (* (- (/ 1.0 64.0)) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x207))))
 (let ((?x632 (* (/ 3.0 32.0) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x240))))
 (let ((?x947 (* (- (/ 3.0 8.0)) (* ?x207 ?x207 ?x207 ?x240))))
 (let ((?x965 (* (- (/ 1.0 2.0)) (* ?x207 ?x240 ?x240 ?x240))))
 (let ((?x733 (* (/ 1.0 4.0) (* ?x207 ?x207 ?x207 ?x207 ?x247))))
 (let ((?x191 (* (- (/ 1.0 16.0)) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x207 ?x247))))
 (let ((?x971 (* (/ 3.0 4.0) (* ?x207 ?x207 ?x240 ?x240))))
 (let ((?x159 (* (/ 1.0 4.0) (* ?x207 ?x207 ?x207 ?x207 ?x247 ?x247))))
 (let ((?x808 (* (/ 1.0 16.0) (* ?x207 ?x207 ?x207 ?x207))))
 (let ((?x182 (* (/ 1.0 8.0) (* ?x207 ?x207 ?x207 ?x240 ?x240 ?x240))))
 (let ((?x611 (* (- (/ 3.0 16.0)) (* ?x207 ?x207 ?x207 ?x207 ?x240 ?x240))))
 (let ((?x85 (* (- 4.0) ?x247)))
 (let ((?x129 (* (- (/ 1.0 16.0)) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x207 ?x247 ?x247))))
 (let ((?x795 (+ (- 1.0) ?x129 (* (- (/ 3.0 4.0)) (* ?x207 ?x207 ?x207 ?x207 ?x240 ?x240 ?x247 ?x247)) (* (- (/ 3.0 2.0)) (* ?x207 ?x207 ?x207 ?x240 ?x247)) ?x85 (* (- 2.0) (* ?x207 ?x240 ?x240 ?x240 ?x247)) (* (- 2.0) (* ?x207 ?x240 ?x240 ?x240 ?x247 ?x247)) ?x611 ?x182 (* (/ 1.0 2.0) (* ?x207 ?x207 ?x207 ?x240 ?x240 ?x240 ?x247 ?x247)) (* (/ 3.0 8.0) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x240 ?x247)) (* (- (/ 3.0 4.0)) (* ?x207 ?x207 ?x207 ?x207 ?x240 ?x240 ?x247)) (* (/ 1.0 2.0) (* ?x207 ?x207 ?x207 ?x240 ?x240 ?x240 ?x247)) (* (/ 3.0 8.0) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x240 ?x247 ?x247)) ?x808 (* 3.0 (* ?x207 ?x207 ?x240 ?x240 ?x247 ?x247)) ?x159 ?x971 (* 3.0 (* ?x207 ?x207 ?x240 ?x240 ?x247)) (* (- (/ 3.0 2.0)) (* ?x207 ?x207 ?x207 ?x240 ?x247 ?x247)) ?x191 ?x733 ?x965 ?x947 ?x632 ?x626 ?x767)))
 (let (($x796 (= (* ?x795 (+ ?x136 ?x150 ?x240 ?x637)) 0.0)))
 (let (($x877 (not $x796)))
 (let (($x847 (= ?x846 0.0)))
 (let (($x570 (not $x847)))
 (let (($x874 (or $x570 $x877)))
 (let (($x593 (and $x624 $x874)))
 (let ((?x426 (+ (- 1.0) ?x85 (* (/ 1.0 2.0) (* ?x207 ?x207 ?x207 ?x247 ?x247 ?x240 ?x240 ?x240)) (* (- 2.0) (* ?x207 ?x247 ?x247 ?x240 ?x240 ?x240)) ?x767 ?x626 ?x632 ?x611 ?x182 ?x191 (* (/ 3.0 8.0) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x247 ?x240)) (* (- (/ 3.0 4.0)) (* ?x207 ?x207 ?x207 ?x207 ?x247 ?x240 ?x240)) (* (/ 1.0 2.0) (* ?x207 ?x207 ?x207 ?x247 ?x240 ?x240 ?x240)) ?x129 (* (/ 3.0 8.0) (* ?x207 ?x207 ?x207 ?x207 ?x207 ?x247 ?x247 ?x240)) (* (- (/ 3.0 4.0)) (* ?x207 ?x207 ?x207 ?x207 ?x247 ?x247 ?x240 ?x240)) ?x965 ?x971 ?x947 ?x808 ?x733 (* (- (/ 3.0 2.0)) (* ?x207 ?x207 ?x207 ?x247 ?x240)) (* 3.0 (* ?x207 ?x207 ?x247 ?x240 ?x240)) (* (- 2.0) (* ?x207 ?x247 ?x240 ?x240 ?x240)) ?x159 (* (- (/ 3.0 2.0)) (* ?x207 ?x207 ?x207 ?x247 ?x247 ?x240)) (* 3.0 (* ?x207 ?x207 ?x247 ?x247 ?x240 ?x240)))))
 (let ((?x83 (+ (* (/ 1.0 2.0) (* ?x207 ?x207 ?x207 ?x247 ?x247 ?x240 ?x240 ?x240 ?x240)) (* (- (/ 1.0 2.0)) (* ?x207 ?x207 ?x207 ?x247 ?x247 ?x240 ?x240 ?x240 ?x61)) (* (- (/ 1.0 2.0)) (* ?x207 ?x207 ?x207 ?x247 ?x247 ?x240 ?x240 ?x240 ?x145 ?x146)) (* (/ 1.0 2.0) (* ?x207 ?x207 ?x207 ?x207 ?x247 ?x247 ?x247 ?x240 ?x240 ?x240)) (* (- 2.0) (* ?x207 ?x247 ?x247 ?x240 ?x240 ?x240 ?x240)) (* 2.0 (* ?x207 ?x247 ?x247 ?x240 ?x240 ?x240 ?x61)) (* 2.0 (* ?x207 ?x247 ?x247 ?x240 ?x240 ?x240 ?x145 ?x146)) (* (- 2.0) (* ?x207 ?x207 ?x247 ?x247 ?x247 ?x240 ?x240 ?x240)) (* (- 4.0) (* ?x247 ?x247 ?x240)) (* 4.0 (* ?x247 ?x247 ?x61)) (* 4.0 (* ?x247 ?x247 ?x145 ?x146)) (* (- 4.0) ?x724))))
 (let (($x153 (or (not (= ?x83 0.0)) (not (= (* ?x426 (+ ?x240 ?x136 ?x150 ?x637)) 0.0)))))
 (let (($x1045 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x87)) 0) $x153)))
 (let (($x359 (exists ((b Int) (r Int) (x Int) )(! (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x47 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x256 (* (- 4.0) (* ?x43 ?x43))))
 (let ((?x1135 (+ (- 1.0) (* (- 4.0) ?x43) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) ?x256 (* (- (/ 1.0 64.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40)) (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x47)) (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)))))
 (let ((?x404 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x61)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x145 ?x146)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x61)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x145 ?x146)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 4.0) (* ?x43 ?x43 ?x47)) (* 4.0 (* ?x43 ?x43 ?x61)) (* 4.0 (* ?x43 ?x43 ?x145 ?x146)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43)))))
 (let (($x115 (not (= ?x404 0.0))))
 (let (($x161 (or $x115 (not (= (* ?x1135 (+ ?x47 ?x136 ?x150 (* ?x40 ?x43))) 0.0)))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x123 $x161)))))))))))))))) :qid k!28))
 ))
 (let (($x972 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x1006 (+ ?x150 ?x47 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x269 (* 2.0 ?x43)))
 (let ((?x1064 (+ 1.0 ?x269)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) (* ?x40 ?x1064 ?x1064 (+ ?x47 ?x172) (+ ?x47 ?x172) (+ ?x47 ?x172)))))
 (let ((?x727 (+ ?x47 ?x172)))
 (let ((?x236 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1064 ?x1064 ?x727 ?x727 ?x727)) ?x1051 (* (- 1.0) (* ?x1064 ?x1064)))))
 (let ((?x256 (* (- 4.0) (* ?x43 ?x43))))
 (let ((?x1081 (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x256)))
 (let (($x454 (or (not (= (* ?x1081 (+ ?x150 ?x47 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x236 ?x1006) 0.0)))))
 (let (($x1092 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x1092 $x454))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x434 (lambda ((b Int) (r Int) (x Int) )(let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x47 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x256 (* (- 4.0) (* ?x43 ?x43))))
 (let ((?x1135 (+ (- 1.0) (* (- 4.0) ?x43) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) ?x256 (* (- (/ 1.0 64.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40)) (* (/ 3.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x47)) (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* (- (/ 3.0 4.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x47 ?x47 ?x47)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x47 ?x47 ?x47)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43)) (* (- (/ 3.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47)) (* 3.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)))))
 (let ((?x404 (+ (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x61)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x145 ?x146)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 2.0) (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x47)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x61)) (* 2.0 (* ?x40 ?x43 ?x43 ?x47 ?x47 ?x47 ?x145 ?x146)) (* (- 2.0) (* ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- 4.0) (* ?x43 ?x43 ?x47)) (* 4.0 (* ?x43 ?x43 ?x61)) (* 4.0 (* ?x43 ?x43 ?x145 ?x146)) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x43)))))
 (let (($x115 (not (= ?x404 0.0))))
 (let (($x161 (or $x115 (not (= (* ?x1135 (+ ?x47 ?x136 ?x150 (* ?x40 ?x43))) 0.0)))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x109 (and $x123 $x161)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x1006 (+ ?x150 ?x47 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x92 (* (- 1.0) (* (+ 1.0 (* 2.0 ?x43)) (+ 1.0 (* 2.0 ?x43))))))
 (let ((?x727 (+ ?x47 ?x172)))
 (let ((?x269 (* 2.0 ?x43)))
 (let ((?x1064 (+ 1.0 ?x269)))
 (let ((?x236 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1064 ?x1064 ?x727 ?x727 ?x727)) (* (- (/ 1.0 2.0)) (* ?x40 ?x1064 ?x1064 ?x727 ?x727 ?x727)) ?x92)))
 (let ((?x1081 (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x256)))
 (let (($x454 (or (not (= (* ?x1081 (+ ?x150 ?x47 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x236 ?x1006) 0.0)))))
 (let (($x1092 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x619 (and $x1092 $x454)))
 (rewrite (= $x619 $x109))))))))))))))))))))))))))))))
 ))
 (let (($x463 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x1006 (+ ?x150 ?x47 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x269 (* 2.0 ?x43)))
 (let ((?x1064 (+ 1.0 ?x269)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) (* ?x40 ?x1064 ?x1064 (+ ?x47 ?x172) (+ ?x47 ?x172) (+ ?x47 ?x172)))))
 (let ((?x727 (+ ?x47 ?x172)))
 (let ((?x236 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1064 ?x1064 ?x727 ?x727 ?x727)) ?x1051 (* (- 1.0) (* ?x1064 ?x1064)))))
 (let ((?x256 (* (- 4.0) (* ?x43 ?x43))))
 (let ((?x1081 (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x256)))
 (let (($x454 (or (not (= (* ?x1081 (+ ?x150 ?x47 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x236 ?x1006) 0.0)))))
 (let (($x258 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x258 $x454))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x601 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x1006 (+ ?x150 ?x47 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x269 (* 2.0 ?x43)))
 (let ((?x1064 (+ 1.0 ?x269)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) (* ?x40 ?x1064 ?x1064 (+ ?x47 ?x172) (+ ?x47 ?x172) (+ ?x47 ?x172)))))
 (let ((?x727 (+ ?x47 ?x172)))
 (let ((?x236 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1064 ?x1064 ?x727 ?x727 ?x727)) ?x1051 (* (- 1.0) (* ?x1064 ?x1064)))))
 (let ((?x256 (* (- 4.0) (* ?x43 ?x43))))
 (let ((?x1081 (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x256)))
 (let (($x454 (or (not (= (* ?x1081 (+ ?x150 ?x47 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x236 ?x1006) 0.0)))))
 (let (($x1092 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x619 (and $x1092 $x454)))
 (let (($x258 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x859 (and $x258 $x454)))
 (rewrite (= $x859 $x619))))))))))))))))))))))))))
 ))
 (let (($x79 (exists ((b Int) (r Int) (x Int) )(! (let ((?x55 (to_real 0)))
 (let ((?x64 (+ (* 2 x) 1)))
 (let ((?x65 (to_real ?x64)))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x47 (to_real r)))
 (let ((?x58 (- ?x47 ?x42)))
 (let ((?x71 (- (* ?x42 ?x42 ?x42 ?x58 ?x58 ?x58 ?x65 ?x65) (* ?x42 ?x58 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) (to_real r00)) (* ?x42 ?x65))))
 (let ((?x43 (to_real x)))
 (let ((?x51 (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x57 (not (= (* ?x46 (- ?x51 (to_real (* 2 x 2 x)))) ?x55))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or $x57 (not (= (* ?x67 (- ?x71 (to_real (* ?x64 ?x64)))) ?x55))))))))))))))))))) :qid k!28))
 ))
 (let ((?x260 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x172 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x1006 (+ ?x150 ?x47 ?x172 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x43 (to_real x)))
 (let ((?x269 (* 2.0 ?x43)))
 (let ((?x1064 (+ 1.0 ?x269)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) (* ?x40 ?x1064 ?x1064 (+ ?x47 ?x172) (+ ?x47 ?x172) (+ ?x47 ?x172)))))
 (let ((?x727 (+ ?x47 ?x172)))
 (let ((?x236 (+ (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x1064 ?x1064 ?x727 ?x727 ?x727)) ?x1051 (* (- 1.0) (* ?x1064 ?x1064)))))
 (let ((?x256 (* (- 4.0) (* ?x43 ?x43))))
 (let ((?x1081 (+ (* (/ 1.0 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40 ?x40 ?x40)) (* (- 2.0) (* ?x43 ?x43 ?x47 ?x47 ?x47 ?x40)) ?x256)))
 (let (($x454 (or (not (= (* ?x1081 (+ ?x150 ?x47 ?x136 (* ?x43 ?x40))) 0.0)) (not (= (* ?x236 ?x1006) 0.0)))))
 (let (($x258 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x859 (and $x258 $x454)))
 (let ((?x55 (to_real 0)))
 (let ((?x64 (+ (* 2 x) 1)))
 (let ((?x65 (to_real ?x64)))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x58 (- ?x47 ?x42)))
 (let ((?x71 (- (* ?x42 ?x42 ?x42 ?x58 ?x58 ?x58 ?x65 ?x65) (* ?x42 ?x58 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) ?x61) (* ?x42 ?x65))))
 (let ((?x51 (- (* ?x42 ?x42 ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x57 (not (= (* ?x46 (- ?x51 (to_real (* 2 x 2 x)))) ?x55))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x78 (and $x38 (or $x57 (not (= (* ?x67 (- ?x71 (to_real (* ?x64 ?x64)))) ?x55))))))
 (rewrite (= $x78 $x859)))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x80 (asserted $x79)))
 (let ((@x748 (mp (mp @x80 (quant-intro (proof-bind ?x260) (= $x79 $x463)) $x463) (rewrite (= $x463 $x463)) $x463)))
 (let ((@x756 (mp (mp @x748 (quant-intro (proof-bind ?x601) (= $x463 $x972)) $x972) (quant-intro (proof-bind ?x434) (= $x972 $x359)) $x359)))
 (let ((@x649 (mp (mp~ @x756 (sk (~ $x359 $x1045)) $x1045) (rewrite (= $x1045 $x593)) $x593)))
 (let ((@x926 (mp (and-elim @x649 $x624) @x923 $x424)))
 (let ((@x596 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x424) $x1072)) @x926 $x1072)))
 (let (($x578 (<= ?x623 0)))
 (let ((@x602 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x424) $x578)) @x926 $x578)))
 (let ((@x985 (unit-resolution ((_ th-lemma arith) (or $x628 (not $x578) (not $x1072))) @x602 @x596 (hypothesis (not $x628)) false)))
 (let (($x618 (= 0.0 ?x846)))
 (let (($x961 (not $x618)))
 (let ((@x966 (monotonicity (symm (commutativity (= $x618 $x847)) (= $x847 $x618)) (= $x570 $x961))))
 (let ((?x574 (+ ?x637 ?x150 ?x240 ?x136)))
 (let (($x816 (= 0.0 ?x574)))
 (let (($x176 (>= ?x574 0.0)))
 (let ((?x797 (+ ?x637 (* (- 1.0) (to_real (* b!2 x!0))))))
 (let (($x597 (>= ?x797 0.0)))
 (let (($x897 (= 0.0 ?x797)))
 (let ((@x907 (symm (commutativity (= $x897 (= ?x797 0.0))) (= (= ?x797 0.0) $x897))))
 (let ((@x594 (mp ((_ th-lemma arith) (= ?x797 0.0)) @x907 $x897)))
 (let ((?x566 (+ (* (- 1.0) (to_real ?x87)) ?x147)))
 (let (($x939 (<= ?x566 0.0)))
 (let (($x937 (= 0.0 ?x566)))
 (let ((@x604 (symm (commutativity (= $x937 (= ?x566 0.0))) (= (= ?x566 0.0) $x937))))
 (let ((@x599 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x937) $x939)) (mp ((_ th-lemma arith) (= ?x566 0.0)) @x604 $x937) $x939)))
 (let ((@x600 ((_ th-lemma arith) (hypothesis (not $x176)) @x599 @x602 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x897) $x597)) @x594 $x597) false)))
 (let (($x173 (<= ?x574 0.0)))
 (let (($x879 (>= ?x566 0.0)))
 (let ((@x900 (lemma (unit-resolution ((_ th-lemma arith) $x879) (hypothesis (not $x879)) false) $x879)))
 (let (($x899 (<= ?x797 0.0)))
 (let ((@x803 ((_ th-lemma arith) (hypothesis (not $x173)) (hypothesis $x879) @x596 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x897) $x899)) @x594 $x899) false)))
 (let ((@x963 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x816 (not $x173) (not $x176))) (unit-resolution (lemma @x803 (or (not $x879) $x173)) @x900 $x173) (lemma @x600 $x176) $x816)))
 (let (($x992 (= ?x574 0.0)))
 (let (($x996 (not $x992)))
 (let ((@x1001 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x996 $x796)) (hypothesis $x877) $x996) (symm (hypothesis $x816) $x992) false)))
 (let ((@x871 (unit-resolution (and-elim @x649 $x874) (unit-resolution (lemma @x1001 (or (not $x816) $x796)) @x963 $x796) $x570)))
 (let ((@x970 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x618 $x1023 (not $x628))) (mp @x871 @x966 $x961) (or $x1023 (not $x628)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x1072) $x620 (not $x578))) @x602 @x596 (unit-resolution @x970 (lemma @x985 $x628) $x1023) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      31
 :arith-eq-adapter               31
 :arith-bound-propagations-cheap 30
 :arith-bound-propagations-lp    2
 :arith-conflicts                65
 :arith-diseq                    40
 :arith-gcd-calls                4
 :arith-grobner-calls            4
 :arith-grobner-conflicts        3
 :arith-horner-calls             4
 :arith-lower                    42
 :arith-make-feasible            50
 :arith-max-columns              76
 :arith-max-rows                 16
 :arith-nla-explanations         53
 :arith-nla-lemmas               62
 :arith-patches                  4
 :arith-patches-success          4
 :arith-propagations             30
 :arith-upper                    57
 :conflicts                      10
 :decisions                      65
 :del-clause                     115
 :final-checks                   28
 :max-memory                     5.03
 :memory                         3.17
 :mk-bool-var                    172
 :mk-clause                      153
 :num-allocs                     5851495
 :num-checks                     1
 :propagations                   65
 :rlimit-count                   6518
 :time                           0.03
 :total-time                     0.03)
