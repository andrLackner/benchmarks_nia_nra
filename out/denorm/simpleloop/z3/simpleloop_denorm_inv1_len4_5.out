unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x58 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x330 (>= ?x58 0)))
 (let (($x59 (= ?x58 0)))
 (let ((?x188 (* (- 6) x!1)))
 (let ((?x156 (* 4 (* x!1 x!1))))
 (let ((?x60 (* 4 y!0)))
 (let ((?x318 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x347 (* 2 (* y!0 y!0))))
 (let ((?x369 (+ 2 (* (- 8) (* y!0 y!0 x!1)) ?x347 ?x318 ?x60 ?x156 ?x188 (* (- 1) (* y!0 y!0 x!1 x!1 x!1)) (* 4 (* y!0 y!0 x!1 x!1)) (* (- 13) (* y!0 x!1)) (* 8 (* y!0 x!1 x!1)) (* (- 2) (* y!0 x!1 x!1 x!1)) (* (- 1) (* y!0 y!0 y!0 x!1)))))
 (let ((?x331 (* (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1) ?x369)))
 (let (($x489 (= ?x331 0)))
 (let (($x371 (not $x489)))
 (let (($x478 (and $x59 $x371)))
 (let ((?x170 (+ 2 ?x188 ?x60 ?x347 (* (- 8) (* x!1 y!0 y!0)) (* 4 (* x!1 x!1 y!0 y!0)) ?x156 (* (- 13) (* x!1 y!0)) (* 8 (* x!1 x!1 y!0)) (* (- 1) (* x!1 x!1 x!1 y!0 y!0)) ?x318 (* (- 2) (* x!1 x!1 x!1 y!0)) (* (- 1) (* x!1 y!0 y!0 y!0)))))
 (let ((?x61 (* (- 1) x00)))
 (let ((?x54 (* (- 1) y00)))
 (let ((?x142 (+ x!1 y!0 ?x54 ?x61)))
 (let (($x350 (and (= ?x142 0) (not (= (* ?x142 ?x170) 0)))))
 (let (($x129 (exists ((x Int) (y Int) )(! (let ((?x485 (* (- 1) (* x y y y))))
 (let ((?x374 (* (- 2) (* x x x y))))
 (let ((?x333 (* (- 1) (* x x x))))
 (let ((?x332 (* (- 1) (* x x x y y))))
 (let ((?x407 (* 8 (* x x y))))
 (let ((?x403 (* 4 (* x x))))
 (let ((?x402 (* 4 (* x x y y))))
 (let ((?x524 (* (- 8) (* x y y))))
 (let ((?x399 (* 2 (* y y))))
 (let ((?x398 (* 4 y)))
 (let ((?x123 (+ 2 (* (- 6) x) ?x398 ?x399 ?x524 ?x402 ?x403 (* (- 13) (* x y)) ?x407 ?x332 ?x333 ?x374 ?x485)))
 (let ((?x61 (* (- 1) x00)))
 (let ((?x54 (* (- 1) y00)))
 (let ((?x75 (+ x y ?x54 ?x61)))
 (let (($x80 (= ?x75 0)))
 (and $x80 (not (= (* ?x75 ?x123) 0)))))))))))))))))) :qid k!26))
 ))
 (let (($x618 (exists ((x Int) (y Int) )(! (let ((?x485 (* (- 1) (* x y y y))))
 (let ((?x374 (* (- 2) (* x x x y))))
 (let ((?x333 (* (- 1) (* x x x))))
 (let ((?x332 (* (- 1) (* x x x y y))))
 (let ((?x407 (* 8 (* x x y))))
 (let ((?x403 (* 4 (* x x))))
 (let ((?x402 (* 4 (* x x y y))))
 (let ((?x524 (* (- 8) (* x y y))))
 (let ((?x399 (* 2 (* y y))))
 (let ((?x398 (* 4 y)))
 (let ((?x588 (+ 2 (* (- 5) x) ?x398 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x399 ?x524 ?x402 ?x403 (* (- 11) (* x y)) ?x407 ?x332 ?x333 ?x374 ?x485)))
 (let ((?x61 (* (- 1) x00)))
 (let ((?x54 (* (- 1) y00)))
 (let ((?x75 (+ x y ?x54 ?x61)))
 (let (($x80 (= ?x75 0)))
 (and $x80 (not (= (* ?x75 ?x588) 0)))))))))))))))))) :qid k!26))
 ))
 (let ((?x221 (lambda ((x Int) (y Int) )(let ((?x485 (* (- 1) (* x y y y))))
 (let ((?x374 (* (- 2) (* x x x y))))
 (let ((?x333 (* (- 1) (* x x x))))
 (let ((?x332 (* (- 1) (* x x x y y))))
 (let ((?x407 (* 8 (* x x y))))
 (let ((?x403 (* 4 (* x x))))
 (let ((?x402 (* 4 (* x x y y))))
 (let ((?x524 (* (- 8) (* x y y))))
 (let ((?x399 (* 2 (* y y))))
 (let ((?x398 (* 4 y)))
 (let ((?x123 (+ 2 (* (- 6) x) ?x398 ?x399 ?x524 ?x402 ?x403 (* (- 13) (* x y)) ?x407 ?x332 ?x333 ?x374 ?x485)))
 (let ((?x61 (* (- 1) x00)))
 (let ((?x54 (* (- 1) y00)))
 (let ((?x75 (+ x y ?x54 ?x61)))
 (let (($x80 (= ?x75 0)))
 (let (($x205 (and $x80 (not (= (* ?x75 ?x123) 0)))))
 (let ((?x588 (+ 2 (* (- 5) x) ?x398 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x399 ?x524 ?x402 ?x403 (* (- 11) (* x y)) ?x407 ?x332 ?x333 ?x374 ?x485)))
 (let (($x196 (and $x80 (not (= (* ?x75 ?x588) 0)))))
 (rewrite (= $x196 $x205)))))))))))))))))))))
 ))
 (let (($x358 (exists ((x Int) (y Int) )(! (let ((?x292 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x295 (+ 1 y)))
 (let ((?x128 (+ (- 1) x)))
 (let ((?x354 (+ (* ?x128 ?x128 ?x295 ?x295) (* (- 1) (* ?x128 ?x128 ?x128 ?x295 ?x295)) ?x292 (* (- 1) (* ?x295 ?x295 ?x295)))))
 (let ((?x61 (* (- 1) x00)))
 (let ((?x54 (* (- 1) y00)))
 (let ((?x165 (+ x ?x54 ?x61 y)))
 (and (= ?x165 0) (not (= (* ?x165 ?x354) 0)))))))))) :qid k!26))
 ))
 (let ((?x83 (lambda ((x Int) (y Int) )(let ((?x485 (* (- 1) (* x y y y))))
 (let ((?x374 (* (- 2) (* x x x y))))
 (let ((?x333 (* (- 1) (* x x x))))
 (let ((?x332 (* (- 1) (* x x x y y))))
 (let ((?x407 (* 8 (* x x y))))
 (let ((?x403 (* 4 (* x x))))
 (let ((?x402 (* 4 (* x x y y))))
 (let ((?x524 (* (- 8) (* x y y))))
 (let ((?x399 (* 2 (* y y))))
 (let ((?x398 (* 4 y)))
 (let ((?x588 (+ 2 (* (- 5) x) ?x398 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x399 ?x524 ?x402 ?x403 (* (- 11) (* x y)) ?x407 ?x332 ?x333 ?x374 ?x485)))
 (let ((?x61 (* (- 1) x00)))
 (let ((?x54 (* (- 1) y00)))
 (let ((?x75 (+ x y ?x54 ?x61)))
 (let (($x80 (= ?x75 0)))
 (let (($x196 (and $x80 (not (= (* ?x75 ?x588) 0)))))
 (let ((?x292 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x295 (+ 1 y)))
 (let ((?x128 (+ (- 1) x)))
 (let ((?x354 (+ (* ?x128 ?x128 ?x295 ?x295) (* (- 1) (* ?x128 ?x128 ?x128 ?x295 ?x295)) ?x292 (* (- 1) (* ?x295 ?x295 ?x295)))))
 (let ((?x165 (+ x ?x54 ?x61 y)))
 (let (($x317 (and (= ?x165 0) (not (= (* ?x165 ?x354) 0)))))
 (rewrite (= $x317 $x196)))))))))))))))))))))))))
 ))
 (let (($x51 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (- (- (* ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38)) (* ?x34 ?x38 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (- ?x44 (* ?x38 ?x38 ?x38)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)))))))) :qid k!26))
 ))
 (let ((?x365 (lambda ((x Int) (y Int) )(let ((?x292 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x295 (+ 1 y)))
 (let ((?x128 (+ (- 1) x)))
 (let ((?x354 (+ (* ?x128 ?x128 ?x295 ?x295) (* (- 1) (* ?x128 ?x128 ?x128 ?x295 ?x295)) ?x292 (* (- 1) (* ?x295 ?x295 ?x295)))))
 (let ((?x61 (* (- 1) x00)))
 (let ((?x54 (* (- 1) y00)))
 (let ((?x165 (+ x ?x54 ?x61 y)))
 (let (($x317 (and (= ?x165 0) (not (= (* ?x165 ?x354) 0)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x44 (- (- (* ?x34 ?x34 ?x38 ?x38) (* ?x34 ?x34 ?x34 ?x38 ?x38)) (* ?x34 ?x38 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (- ?x44 (* ?x38 ?x38 ?x38)))))
 (let (($x50 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0))))))
 (rewrite (= $x50 $x317))))))))))))))))
 ))
 (let ((@x52 (asserted $x51)))
 (let ((@x319 (mp (mp @x52 (quant-intro (proof-bind ?x365) (= $x51 $x358)) $x358) (rewrite (= $x358 $x358)) $x358)))
 (let ((@x66 (mp (mp @x319 (quant-intro (proof-bind ?x83) (= $x358 $x618)) $x618) (quant-intro (proof-bind ?x221) (= $x618 $x129)) $x129)))
 (let ((@x383 (mp (mp~ @x66 (sk (~ $x129 $x350)) $x350) (rewrite (= $x350 $x478)) $x478)))
 (let ((@x491 (and-elim @x383 $x59)))
 (let ((@x498 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x59) $x330)) @x491 $x330)))
 (let (($x143 (<= ?x58 0)))
 (let ((@x409 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x59) $x143)) @x491 $x143)))
 (let (($x487 (not (>= ?x331 0))))
 (let (($x172 (<= ?x331 0)))
 (let ((@x370 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x489 (not $x172) $x487)) (and-elim @x383 $x371) (or (not $x172) $x487))))
 (let ((@x296 (unit-resolution @x370 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x172)) @x409 @x498 false) $x172) $x487)))
 ((_ th-lemma arith farkas 1 1 1) @x296 @x409 @x498 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             58
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 26
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.57
 :memory                    3.17
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1084795
 :num-checks                1
 :propagations              4
 :rlimit-count              2188
 :time                      0.01
 :total-time                0.01)
