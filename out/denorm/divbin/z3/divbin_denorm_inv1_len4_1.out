unsat
((set-logic NIA)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x465 (to_real x!0)))
 (let ((?x396 (to_real b!2)))
 (let ((?x773 (* ?x396 ?x465)))
 (let ((?x348 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x773)))
 (let (($x694 (>= ?x348 0.0)))
 (let (($x356 (= ?x348 0.0)))
 (let ((@x282 (lemma (unit-resolution ((_ th-lemma arith) $x356) (hypothesis (not $x356)) false) $x356)))
 (let ((@x709 ((_ th-lemma arith triangle-eq) (or (not $x356) $x694))))
 (let (($x353 (<= ?x348 0.0)))
 (let ((@x703 ((_ th-lemma arith triangle-eq) (or (not $x356) $x353))))
 (let ((?x323 (* (- (/ 1.0 4.0)) (* (to_real r!1) (to_real b00) (to_real x00) ?x396 ?x396))))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x112 (to_real r!1)))
 (let ((?x89 (+ (* ?x112 ?x112 ?x396 ?x396 ?x396 ?x465 ?x465 ?x465) (* (/ 1.0 8.0) (* (to_real r00) ?x112 ?x112 ?x396 ?x396 ?x396)) (* (/ 1.0 8.0) (* ?x112 ?x112 ?x145 ?x146 ?x396 ?x396 ?x396)) (* (- (/ 1.0 8.0)) (* ?x112 ?x112 ?x396 ?x396 ?x396 ?x396 ?x465)) (* (- (/ 1.0 4.0)) (* (to_real r00) ?x112 ?x396 ?x396)) (* (/ 1.0 4.0) (* ?x112 ?x396 ?x396 ?x396 ?x465)) (* ?x112 ?x112 ?x112 ?x112 ?x396 ?x465) (* 2.0 (* ?x112 ?x112 ?x112 ?x396 ?x396 ?x465 ?x465)) (* (- 1.0) (* (to_real r00) ?x112 ?x112 ?x112 ?x396 ?x465)) (* (- 1.0) (* ?x112 ?x112 ?x112 ?x145 ?x146 ?x396 ?x465)) (* (- (/ 1.0 8.0)) (* ?x112 ?x112 ?x112 ?x396 ?x396 ?x396)) (* (- 1.0) (* (to_real r00) ?x112 ?x112 ?x396 ?x396 ?x465 ?x465)) (* (- 1.0) (* ?x112 ?x112 ?x145 ?x146 ?x396 ?x396 ?x465 ?x465)) ?x323 (* (/ 1.0 4.0) (* ?x112 ?x112 ?x396 ?x396)))))
 (let (($x814 (<= ?x89 0.0)))
 (let (($x429 (not $x814)))
 (let (($x789 (>= ?x89 0.0)))
 (let ((?x87 (* b00 x00)))
 (let ((?x640 (+ r00 ?x87 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x812 (>= ?x640 0)))
 (let (($x324 (= 0 ?x640)))
 (let ((@x385 (symm (commutativity (= $x324 (= ?x640 0))) (= (= ?x640 0) $x324))))
 (let (($x553 (= ?x640 0)))
 (let ((?x390 (* (- (/ 1.0 32.0)) (* ?x396 ?x396 ?x396 ?x396 ?x396))))
 (let ((?x644 (* (- (/ 1.0 8.0)) (* ?x396 ?x396 ?x396))))
 (let ((?x535 (* (/ 1.0 4.0) (* ?x396 ?x396 ?x396 ?x396 ?x465 ?x465))))
 (let ((?x241 (* (/ 1.0 8.0) (* ?x396 ?x396 ?x396 ?x396 ?x465))))
 (let ((?x382 (+ (* (- (/ 1.0 8.0)) (* ?x112 ?x112 ?x396 ?x396 ?x396)) (* (/ 1.0 8.0) (* ?x112 ?x396 ?x396 ?x396 ?x396)) (* (/ 1.0 2.0) (* ?x112 ?x112 ?x112 ?x396)) (* (- (/ 1.0 2.0)) (* ?x112 ?x112 ?x396 ?x396 ?x465)) (* (- 1.0) (* ?x112 ?x396 ?x396 ?x396 ?x465 ?x465)) (* (/ 1.0 4.0) (* ?x112 ?x396 ?x396)) (* (/ 1.0 8.0) (* ?x112 ?x396 ?x396 ?x396)) (* (- (/ 1.0 4.0)) (* ?x112 ?x396 ?x396 ?x396 ?x465)) (* ?x112 ?x112 ?x396 ?x396 ?x465 ?x465) ?x241 (* ?x112 ?x112 ?x112 ?x396 ?x465) ?x535 ?x644 ?x390 (* (- (/ 1.0 2.0)) (* ?x112 ?x112 ?x396 ?x396)))))
 (let ((?x393 (* ?x382 (+ (* (- 1.0) (to_real r00)) ?x112 (* (- 1.0) (* ?x145 ?x146)) ?x773))))
 (let (($x401 (= ?x393 0.0)))
 (let (($x684 (not $x401)))
 (let (($x90 (= ?x89 0.0)))
 (let (($x237 (not $x90)))
 (let (($x403 (or $x237 $x684)))
 (let (($x706 (and $x553 $x403)))
 (let ((?x774 (+ (* (/ 1.0 4.0) (* ?x396 ?x396 ?x112)) (* (- (/ 1.0 8.0)) (* ?x396 ?x396 ?x396 ?x112 ?x112)) (* ?x396 ?x396 ?x465 ?x465 ?x112 ?x112) (* (- (/ 1.0 2.0)) (* ?x396 ?x396 ?x112 ?x112)) (* (- (/ 1.0 4.0)) (* ?x396 ?x396 ?x396 ?x465 ?x112)) ?x644 (* ?x396 ?x465 ?x112 ?x112 ?x112) (* (/ 1.0 8.0) (* ?x396 ?x396 ?x396 ?x112)) ?x241 (* (- (/ 1.0 2.0)) (* ?x396 ?x396 ?x465 ?x112 ?x112)) ?x535 (* (- 1.0) (* ?x396 ?x396 ?x396 ?x465 ?x465 ?x112)) ?x390 (* (/ 1.0 8.0) (* ?x396 ?x396 ?x396 ?x396 ?x112)) (* (/ 1.0 2.0) (* ?x396 ?x112 ?x112 ?x112)))))
 (let ((?x776 (* ?x774 (+ ?x112 (* (- 1.0) (to_real r00)) (* (- 1.0) (* ?x145 ?x146)) ?x773))))
 (let ((?x646 (+ (* (/ 1.0 4.0) (* ?x396 ?x396 ?x112 ?x112)) (* (- (/ 1.0 4.0)) (* ?x396 ?x396 ?x112 (to_real r00))) (* (- (/ 1.0 4.0)) (* ?x396 ?x396 ?x112 ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x396 ?x396 ?x396 ?x465 ?x112)) (* ?x396 ?x465 ?x112 ?x112 ?x112 ?x112) (* (- 1.0) (* ?x396 ?x465 ?x112 ?x112 ?x112 (to_real r00))) (* (- 1.0) (* ?x396 ?x465 ?x112 ?x112 ?x112 ?x145 ?x146)) (* 2.0 (* ?x396 ?x396 ?x465 ?x465 ?x112 ?x112 ?x112)) (* (- (/ 1.0 8.0)) (* ?x396 ?x396 ?x396 ?x112 ?x112 ?x112)) (* (/ 1.0 8.0) (* ?x396 ?x396 ?x396 ?x112 ?x112 (to_real r00))) (* (/ 1.0 8.0) (* ?x396 ?x396 ?x396 ?x112 ?x112 ?x145 ?x146)) (* (- (/ 1.0 8.0)) (* ?x396 ?x396 ?x396 ?x396 ?x465 ?x112 ?x112)) (* (- 1.0) (* ?x396 ?x396 ?x465 ?x465 ?x112 ?x112 (to_real r00))) (* (- 1.0) (* ?x396 ?x396 ?x465 ?x465 ?x112 ?x112 ?x145 ?x146)) (* ?x396 ?x396 ?x396 ?x465 ?x465 ?x465 ?x112 ?x112))))
 (let (($x785 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x87)) 0) (or (not (= ?x646 0.0)) (not (= ?x776 0.0))))))
 (let (($x521 (exists ((b Int) (r Int) (x Int) )(! (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x47 (to_real r)))
 (let ((?x755 (* (/ 1.0 8.0) (* (to_real b) (to_real b) (to_real b) (to_real b) ?x47))))
 (let ((?x40 (to_real b)))
 (let ((?x752 (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x669 (* (- 1.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) ?x47))))
 (let ((?x649 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x)))))
 (let ((?x455 (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40))))
 (let ((?x43 (to_real x)))
 (let ((?x209 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)))
 (let ((?x180 (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x183 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47))))
 (let ((?x819 (+ ?x183 ?x180 ?x209 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) ?x455 (* ?x40 ?x43 ?x47 ?x47 ?x47) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47)) ?x649 ?x669 ?x752 ?x755 (* (/ 1.0 2.0) (* ?x40 ?x47 ?x47 ?x47)))))
 (let ((?x253 (* ?x40 ?x40 ?x47 ?x47)))
 (let ((?x256 (* (/ 1.0 4.0) ?x253)))
 (let ((?x361 (+ ?x256 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* ?x40 ?x43 ?x47 ?x47 ?x47 ?x47) (* (- 1.0) (* ?x40 ?x43 ?x47 ?x47 ?x47 ?x61)) (* (- 1.0) (* ?x40 ?x43 ?x47 ?x47 ?x47 ?x145 ?x146)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x61)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x145 ?x146)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x61)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x145 ?x146)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47))))
 (let (($x115 (not (= ?x361 0.0))))
 (let (($x826 (or $x115 (not (= (* ?x819 (+ ?x47 ?x136 ?x150 (* ?x40 ?x43))) 0.0)))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x123 $x826))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x618 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x173 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x449 (+ ?x150 ?x47 ?x173 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x547 (+ ?x47 ?x173)))
 (let ((?x43 (to_real x)))
 (let ((?x395 (* 2.0 ?x43)))
 (let ((?x439 (+ 1.0 ?x395)))
 (let ((?x165 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x547)) (* (/ 1.0 2.0) (* ?x40 ?x439 ?x547 ?x547 ?x547)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x439 ?x439 ?x547 ?x547)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x547 ?x547)))))
 (let ((?x652 (+ (* (/ 1.0 4.0) (* ?x47 ?x40 ?x40)) (* ?x43 ?x47 ?x47 ?x47 ?x40) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40) (* (- (/ 1.0 8.0)) (* ?x47 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x235 (or (not (= (* (+ ?x150 ?x47 ?x136 (* ?x43 ?x40)) ?x652) 0.0)) (not (= (* ?x165 ?x449) 0.0)))))
 (let (($x579 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x579 $x235))))))))))))))))))) :qid k!28))
 ))
 (let ((?x523 (lambda ((b Int) (r Int) (x Int) )(let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x47 (to_real r)))
 (let ((?x755 (* (/ 1.0 8.0) (* (to_real b) (to_real b) (to_real b) (to_real b) ?x47))))
 (let ((?x40 (to_real b)))
 (let ((?x752 (* (- (/ 1.0 32.0)) (* ?x40 ?x40 ?x40 ?x40 ?x40))))
 (let ((?x669 (* (- 1.0) (* ?x40 ?x40 ?x40 (to_real x) (to_real x) ?x47))))
 (let ((?x649 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x40 (to_real x) (to_real x)))))
 (let ((?x455 (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40))))
 (let ((?x43 (to_real x)))
 (let ((?x209 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47)))
 (let ((?x180 (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47))))
 (let ((?x183 (* (/ 1.0 4.0) (* ?x40 ?x40 ?x47))))
 (let ((?x819 (+ ?x183 ?x180 ?x209 (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x47 ?x47)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x40 ?x43 ?x47)) ?x455 (* ?x40 ?x43 ?x47 ?x47 ?x47) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x47 ?x47)) ?x649 ?x669 ?x752 ?x755 (* (/ 1.0 2.0) (* ?x40 ?x47 ?x47 ?x47)))))
 (let ((?x253 (* ?x40 ?x40 ?x47 ?x47)))
 (let ((?x256 (* (/ 1.0 4.0) ?x253)))
 (let ((?x361 (+ ?x256 (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x61)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x47 ?x145 ?x146)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x47)) (* ?x40 ?x43 ?x47 ?x47 ?x47 ?x47) (* (- 1.0) (* ?x40 ?x43 ?x47 ?x47 ?x47 ?x61)) (* (- 1.0) (* ?x40 ?x43 ?x47 ?x47 ?x47 ?x145 ?x146)) (* 2.0 (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x47)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x47)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x61)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40 ?x47 ?x47 ?x145 ?x146)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x47 ?x47)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x61)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x47 ?x47 ?x145 ?x146)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x47 ?x47))))
 (let (($x115 (not (= ?x361 0.0))))
 (let (($x826 (or $x115 (not (= (* ?x819 (+ ?x47 ?x136 ?x150 (* ?x40 ?x43))) 0.0)))))
 (let (($x123 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x883 (and $x123 $x826)))
 (let ((?x173 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x449 (+ ?x150 ?x47 ?x173 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x547 (+ ?x47 ?x173)))
 (let ((?x395 (* 2.0 ?x43)))
 (let ((?x439 (+ 1.0 ?x395)))
 (let ((?x165 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x547)) (* (/ 1.0 2.0) (* ?x40 ?x439 ?x547 ?x547 ?x547)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x439 ?x439 ?x547 ?x547)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x547 ?x547)))))
 (let ((?x652 (+ (* (/ 1.0 4.0) (* ?x47 ?x40 ?x40)) (* ?x43 ?x47 ?x47 ?x47 ?x40) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40) (* (- (/ 1.0 8.0)) (* ?x47 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x235 (or (not (= (* (+ ?x150 ?x47 ?x136 (* ?x43 ?x40)) ?x652) 0.0)) (not (= (* ?x165 ?x449) 0.0)))))
 (let (($x579 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x567 (and $x579 $x235)))
 (rewrite (= $x567 $x883))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x303 (exists ((b Int) (r Int) (x Int) )(! (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x173 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x449 (+ ?x150 ?x47 ?x173 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x547 (+ ?x47 ?x173)))
 (let ((?x43 (to_real x)))
 (let ((?x395 (* 2.0 ?x43)))
 (let ((?x439 (+ 1.0 ?x395)))
 (let ((?x165 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x547)) (* (/ 1.0 2.0) (* ?x40 ?x439 ?x547 ?x547 ?x547)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x439 ?x439 ?x547 ?x547)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x547 ?x547)))))
 (let ((?x652 (+ (* (/ 1.0 4.0) (* ?x47 ?x40 ?x40)) (* ?x43 ?x47 ?x47 ?x47 ?x40) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40) (* (- (/ 1.0 8.0)) (* ?x47 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x235 (or (not (= (* (+ ?x150 ?x47 ?x136 (* ?x43 ?x40)) ?x652) 0.0)) (not (= (* ?x165 ?x449) 0.0)))))
 (let (($x548 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x548 $x235))))))))))))))))))) :qid k!28))
 ))
 (let ((?x555 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x173 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x449 (+ ?x150 ?x47 ?x173 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x547 (+ ?x47 ?x173)))
 (let ((?x43 (to_real x)))
 (let ((?x395 (* 2.0 ?x43)))
 (let ((?x439 (+ 1.0 ?x395)))
 (let ((?x165 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x547)) (* (/ 1.0 2.0) (* ?x40 ?x439 ?x547 ?x547 ?x547)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x439 ?x439 ?x547 ?x547)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x547 ?x547)))))
 (let ((?x652 (+ (* (/ 1.0 4.0) (* ?x47 ?x40 ?x40)) (* ?x43 ?x47 ?x47 ?x47 ?x40) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40) (* (- (/ 1.0 8.0)) (* ?x47 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x235 (or (not (= (* (+ ?x150 ?x47 ?x136 (* ?x43 ?x40)) ?x652) 0.0)) (not (= (* ?x165 ?x449) 0.0)))))
 (let (($x579 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x567 (and $x579 $x235)))
 (let (($x548 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x636 (and $x548 $x235)))
 (rewrite (= $x636 $x567))))))))))))))))))))))))
 ))
 (let (($x79 (exists ((b Int) (r Int) (x Int) )(! (let ((?x55 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x47 (to_real r)))
 (let ((?x58 (- ?x47 ?x42)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x71 (+ (* ?x42 ?x42 ?x58) (* ?x42 ?x58 ?x58 ?x58 ?x65) (* ?x42 ?x42 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) (to_real r00)) (* ?x42 ?x65))))
 (let ((?x51 (+ (* ?x42 ?x42 ?x47) (* ?x42 ?x47 ?x47 ?x47 ?x41 (to_real x)) (* ?x42 ?x42 ?x47 ?x47 ?x41 (to_real x) ?x41 (to_real x)))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x77 (or (not (= (* ?x46 (- ?x51 (* ?x42 ?x42 ?x42 ?x47 ?x47))) ?x55)) (not (= (* ?x67 (- ?x71 (* ?x42 ?x42 ?x42 ?x58 ?x58))) ?x55)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 $x77)))))))))))))) :qid k!28))
 ))
 (let ((?x641 (lambda ((b Int) (r Int) (x Int) )(let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x40 (to_real b)))
 (let ((?x173 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x47 (to_real r)))
 (let ((?x146 (to_real x00)))
 (let ((?x145 (to_real b00)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x449 (+ ?x150 ?x47 ?x173 ?x136 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x547 (+ ?x47 ?x173)))
 (let ((?x43 (to_real x)))
 (let ((?x395 (* 2.0 ?x43)))
 (let ((?x439 (+ 1.0 ?x395)))
 (let ((?x165 (+ (* (/ 1.0 4.0) (* ?x40 ?x40 ?x547)) (* (/ 1.0 2.0) (* ?x40 ?x439 ?x547 ?x547 ?x547)) (* (/ 1.0 4.0) (* ?x40 ?x40 ?x439 ?x439 ?x547 ?x547)) (* (- (/ 1.0 8.0)) (* ?x40 ?x40 ?x40 ?x547 ?x547)))))
 (let ((?x652 (+ (* (/ 1.0 4.0) (* ?x47 ?x40 ?x40)) (* ?x43 ?x47 ?x47 ?x47 ?x40) (* ?x43 ?x43 ?x47 ?x47 ?x40 ?x40) (* (- (/ 1.0 8.0)) (* ?x47 ?x47 ?x40 ?x40 ?x40)))))
 (let (($x235 (or (not (= (* (+ ?x150 ?x47 ?x136 (* ?x43 ?x40)) ?x652) 0.0)) (not (= (* ?x165 ?x449) 0.0)))))
 (let (($x548 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x636 (and $x548 $x235)))
 (let ((?x55 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x58 (- ?x47 ?x42)))
 (let ((?x65 (to_real (+ (* 2 x) 1))))
 (let ((?x71 (+ (* ?x42 ?x42 ?x58) (* ?x42 ?x58 ?x58 ?x58 ?x65) (* ?x42 ?x42 ?x58 ?x58 ?x65 ?x65))))
 (let ((?x67 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x58) ?x61) (* ?x42 ?x65))))
 (let ((?x51 (+ (* ?x42 ?x42 ?x47) (* ?x42 ?x47 ?x47 ?x47 ?x41 ?x43) (* ?x42 ?x42 ?x47 ?x47 ?x41 ?x43 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x77 (or (not (= (* ?x46 (- ?x51 (* ?x42 ?x42 ?x42 ?x47 ?x47))) ?x55)) (not (= (* ?x67 (- ?x71 (* ?x42 ?x42 ?x42 ?x58 ?x58))) ?x55)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x78 (and $x38 $x77)))
 (rewrite (= $x78 $x636))))))))))))))))))))))))))))))))))
 ))
 (let ((@x80 (asserted $x79)))
 (let ((@x623 (mp (mp @x80 (quant-intro (proof-bind ?x641) (= $x79 $x303)) $x303) (rewrite (= $x303 $x303)) $x303)))
 (let ((@x827 (mp (mp @x623 (quant-intro (proof-bind ?x555) (= $x303 $x618)) $x618) (quant-intro (proof-bind ?x523) (= $x618 $x521)) $x521)))
 (let ((@x332 (mp (mp~ @x827 (sk (~ $x521 $x785)) $x785) (rewrite (= $x785 $x706)) $x706)))
 (let ((@x302 (mp (and-elim @x332 $x553) @x385 $x324)))
 (let ((@x693 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x812)) @x302 $x812)))
 (let (($x319 (<= ?x640 0)))
 (let ((@x307 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x319)) @x302 $x319)))
 (let ((@x558 (unit-resolution ((_ th-lemma arith) (or $x789 (not $x812) (not $x319))) @x307 @x693 (hypothesis (not $x789)) false)))
 (let ((?x61 (to_real r00)))
 (let ((?x136 (* (- 1.0) ?x61)))
 (let ((?x147 (* ?x145 ?x146)))
 (let ((?x150 (* (- 1.0) ?x147)))
 (let ((?x800 (+ ?x773 ?x150 ?x112 ?x136)))
 (let (($x761 (= 0.0 ?x800)))
 (let (($x320 (>= ?x800 0.0)))
 (let ((?x363 (to_real ?x87)))
 (let ((?x304 (+ ?x150 ?x363)))
 (let (($x236 (>= ?x304 0.0)))
 (let ((@x166 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x304 0.0)) $x236)) ((_ th-lemma arith) (= ?x304 0.0)) $x236)))
 (let ((@x174 ((_ th-lemma arith) @x166 (hypothesis (not $x320)) (unit-resolution @x709 (hypothesis $x356) $x694) @x307 false)))
 (let (($x315 (<= ?x800 0.0)))
 (let ((?x184 (+ ?x147 (* (- 1.0) ?x363))))
 (let (($x84 (>= ?x184 0.0)))
 (let ((@x377 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x184 0.0)) $x84)) ((_ th-lemma arith) (= ?x184 0.0)) $x84)))
 (let ((@x701 ((_ th-lemma arith) (hypothesis (not $x315)) (unit-resolution @x703 ((_ th-lemma arith) $x356) $x353) @x693 @x377 false)))
 (let ((@x612 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x761 (not $x315) (not $x320))) (lemma @x701 $x315) (unit-resolution (lemma @x174 (or (not $x356) $x320)) @x282 $x320) $x761)))
 (let (($x629 (= ?x800 0.0)))
 (let (($x422 (not $x629)))
 (let ((@x428 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x422 $x401)) (hypothesis $x684) $x422) (symm (hypothesis $x761) $x629) false)))
 (let ((@x445 (unit-resolution (and-elim @x332 $x403) (unit-resolution (lemma @x428 (or (not $x761) $x401)) @x612 $x401) $x237)))
 (let ((@x268 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x90 $x429 (not $x789))) @x445 (lemma @x558 $x789) $x429)))
 (unit-resolution ((_ th-lemma arith) (or (not $x812) (not $x319) $x814 (not $x694) (not $x353))) @x307 @x693 @x268 (unit-resolution @x703 @x282 $x353) (unit-resolution @x709 @x282 $x694) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      20
 :arith-eq-adapter               37
 :arith-bound-propagations-cheap 20
 :arith-bound-propagations-lp    5
 :arith-conflicts                35
 :arith-diseq                    29
 :arith-gcd-calls                4
 :arith-grobner-calls            3
 :arith-grobner-conflicts        2
 :arith-horner-calls             3
 :arith-lower                    37
 :arith-make-feasible            34
 :arith-max-columns              67
 :arith-max-rows                 16
 :arith-nla-explanations         70
 :arith-nla-lemmas               33
 :arith-patches                  4
 :arith-patches-success          4
 :arith-propagations             20
 :arith-upper                    36
 :conflicts                      7
 :decisions                      37
 :del-clause                     106
 :final-checks                   21
 :max-memory                     4.21
 :memory                         3.15
 :mk-bool-var                    132
 :mk-clause                      160
 :num-allocs                     2119886
 :num-checks                     1
 :propagations                   60
 :rlimit-count                   4959
 :time                           0.01
 :total-time                     0.02)
