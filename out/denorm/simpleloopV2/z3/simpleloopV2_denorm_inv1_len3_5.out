unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x65 (* (- 1) y!0)))
 (let ((?x193 (* (- 1) x!1)))
 (let ((?x153 (+ y00 x00 ?x193 ?x65)))
 (let (($x126 (>= ?x153 0)))
 (let (($x80 (= ?x153 0)))
 (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x166 (+ ?x61 ?x68 x!1 y!0)))
 (let ((?x294 (* y!0 y!0 y!0)))
 (let ((?x76 (* (- 1) ?x294)))
 (let ((?x144 (* 3 (* x!1 y!0))))
 (let ((?x148 (* x!1 y!0 y!0 y!0)))
 (let ((?x137 (* (- 2) (* y!0 y!0))))
 (let ((?x64 (* x!1 y!0 y!0)))
 (let ((?x203 (* 3 ?x64)))
 (let ((?x231 (* (+ 1 x!1 ?x203 ?x137 ?x148 ?x144 ?x65 ?x76) ?x166)))
 (let (($x140 (= ?x231 0)))
 (let (($x264 (not $x140)))
 (let ((?x91 (* (+ 1 ?x193 (* (- 3) ?x64) ?x137 ?x148 ?x144 y!0 ?x294) ?x166)))
 (let (($x211 (= ?x91 0)))
 (let (($x157 (or (not $x211) $x264)))
 (let (($x98 (and $x80 $x157)))
 (let ((?x70 (+ x!1 y!0 ?x61 ?x68)))
 (let (($x92 (not (= (* (+ 1 x!1 ?x65 ?x137 ?x76 ?x148 ?x144 ?x203) ?x70) 0))))
 (let (($x143 (= (* (+ 1 ?x193 y!0 ?x137 ?x294 ?x148 ?x144 (* (- 3) ?x64)) ?x70) 0)))
 (let (($x110 (and (= ?x70 0) (or (not $x143) $x92))))
 (let (($x84 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x191 (* x y y)))
 (let ((?x208 (* 3 ?x191)))
 (let ((?x186 (* x y)))
 (let ((?x207 (* 3 ?x186)))
 (let ((?x176 (* x y y y)))
 (let ((?x174 (* y y y)))
 (let ((?x175 (* (- 1) ?x174)))
 (let ((?x130 (* y y)))
 (let ((?x317 (* (- 2) ?x130)))
 (let (($x189 (= (* (+ 1 x (* (- 1) y) ?x317 ?x175 ?x176 ?x207 ?x208) ?x82) 0)))
 (let ((?x168 (* (+ 1 (* (- 1) x) y ?x317 ?x174 ?x176 ?x207 (* (- 3) ?x191)) ?x82)))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or (not (= ?x168 0)) (not $x189)))))))))))))))))) :qid k!27))
 ))
 (let (($x79 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x191 (* x y y)))
 (let ((?x208 (* 3 ?x191)))
 (let ((?x186 (* x y)))
 (let ((?x207 (* 3 ?x186)))
 (let ((?x176 (* x y y y)))
 (let ((?x174 (* y y y)))
 (let ((?x175 (* (- 1) ?x174)))
 (let ((?x165 (* (- 1) (* y y 1))))
 (let ((?x219 (+ 1 x y (* (- 1) (* y 1)) (* (- 1) (* y 1 1)) ?x165 (* (- 1) (* y 1 y)) ?x175 ?x176 ?x207 ?x208)))
 (let ((?x306 (* (- 3) ?x191)))
 (let ((?x277 (* (- 1) x)))
 (let ((?x322 (+ 1 ?x277 (* (- 1) (* y (- 1) 1)) (* (- 1) (* y (- 1) x)) (* (- 1) (* y y)) ?x165 ?x174 ?x176 (* 2 ?x186) ?x306)))
 (let (($x87 (= ?x82 0)))
 (and $x87 (or (not (= (* ?x322 ?x82) 0)) (not (= (* ?x219 ?x82) 0)))))))))))))))))))) :qid k!27))
 ))
 (let ((?x183 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x191 (* x y y)))
 (let ((?x208 (* 3 ?x191)))
 (let ((?x186 (* x y)))
 (let ((?x207 (* 3 ?x186)))
 (let ((?x176 (* x y y y)))
 (let ((?x174 (* y y y)))
 (let ((?x175 (* (- 1) ?x174)))
 (let ((?x130 (* y y)))
 (let ((?x317 (* (- 2) ?x130)))
 (let (($x189 (= (* (+ 1 x (* (- 1) y) ?x317 ?x175 ?x176 ?x207 ?x208) ?x82) 0)))
 (let ((?x168 (* (+ 1 (* (- 1) x) y ?x317 ?x174 ?x176 ?x207 (* (- 3) ?x191)) ?x82)))
 (let (($x87 (= ?x82 0)))
 (let (($x173 (and $x87 (or (not (= ?x168 0)) (not $x189)))))
 (let ((?x165 (* (- 1) (* y y 1))))
 (let ((?x219 (+ 1 x y (* (- 1) (* y 1)) (* (- 1) (* y 1 1)) ?x165 (* (- 1) (* y 1 y)) ?x175 ?x176 ?x207 ?x208)))
 (let ((?x306 (* (- 3) ?x191)))
 (let ((?x277 (* (- 1) x)))
 (let ((?x322 (+ 1 ?x277 (* (- 1) (* y (- 1) 1)) (* (- 1) (* y (- 1) x)) (* (- 1) ?x130) ?x165 ?x174 ?x176 (* 2 ?x186) ?x306)))
 (let (($x321 (and $x87 (or (not (= (* ?x322 ?x82) 0)) (not (= (* ?x219 ?x82) 0))))))
 (rewrite (= $x321 $x173)))))))))))))))))))))))))
 ))
 (let (($x278 (exists ((x Int) (y Int) )(! (let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x257 (+ x ?x61 ?x68 y)))
 (let ((?x125 (+ 1 (* (+ (- 1) y) (+ (- 1) y)) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x310 (+ 1 (* (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (and (= ?x257 0) (or (not (= (* ?x310 ?x257) 0)) (not (= (* ?x125 ?x257) 0))))))))) :qid k!27))
 ))
 (let ((?x103 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x82 (+ x y ?x61 ?x68)))
 (let ((?x191 (* x y y)))
 (let ((?x208 (* 3 ?x191)))
 (let ((?x186 (* x y)))
 (let ((?x207 (* 3 ?x186)))
 (let ((?x176 (* x y y y)))
 (let ((?x174 (* y y y)))
 (let ((?x175 (* (- 1) ?x174)))
 (let ((?x165 (* (- 1) (* y y 1))))
 (let ((?x219 (+ 1 x y (* (- 1) (* y 1)) (* (- 1) (* y 1 1)) ?x165 (* (- 1) (* y 1 y)) ?x175 ?x176 ?x207 ?x208)))
 (let ((?x306 (* (- 3) ?x191)))
 (let ((?x277 (* (- 1) x)))
 (let ((?x322 (+ 1 ?x277 (* (- 1) (* y (- 1) 1)) (* (- 1) (* y (- 1) x)) (* (- 1) (* y y)) ?x165 ?x174 ?x176 (* 2 ?x186) ?x306)))
 (let (($x87 (= ?x82 0)))
 (let (($x321 (and $x87 (or (not (= (* ?x322 ?x82) 0)) (not (= (* ?x219 ?x82) 0))))))
 (let ((?x257 (+ x ?x61 ?x68 y)))
 (let ((?x125 (+ 1 (* (+ (- 1) y) (+ (- 1) y)) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x310 (+ 1 (* (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let (($x292 (and (= ?x257 0) (or (not (= (* ?x310 ?x257) 0)) (not (= (* ?x125 ?x257) 0))))))
 (rewrite (= $x292 $x321))))))))))))))))))))))))
 ))
 (let (($x58 (exists ((x Int) (y Int) )(! (let ((?x52 (+ 1 (* (- y 1) (- y 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let (($x54 (= (* (+ (- (- (+ x 1) y00) x00) (- y 1)) ?x52) 0)))
 (let ((?x41 (+ 1 (* (+ y 1) (+ y 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x43 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x41) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x43) (not $x54))))))) :qid k!27))
 ))
 (let ((?x282 (lambda ((x Int) (y Int) )(let ((?x68 (* (- 1) x00)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x257 (+ x ?x61 ?x68 y)))
 (let ((?x125 (+ 1 (* (+ (- 1) y) (+ (- 1) y)) (* (+ (- 1) y) (+ (- 1) y) (+ (- 1) y) (+ 1 x)))))
 (let ((?x310 (+ 1 (* (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let (($x292 (and (= ?x257 0) (or (not (= (* ?x310 ?x257) 0)) (not (= (* ?x125 ?x257) 0))))))
 (let ((?x52 (+ 1 (* (- y 1) (- y 1)) (* (+ x 1) (- y 1) (- y 1) (- y 1)))))
 (let (($x54 (= (* (+ (- (- (+ x 1) y00) x00) (- y 1)) ?x52) 0)))
 (let ((?x41 (+ 1 (* (+ y 1) (+ y 1)) (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x43 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x41) 0)))
 (let (($x57 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x43) (not $x54)))))
 (rewrite (= $x57 $x292))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x285 (mp (mp @x59 (quant-intro (proof-bind ?x282) (= $x58 $x278)) $x278) (rewrite (= $x278 $x278)) $x278)))
 (let ((@x280 (mp (mp @x285 (quant-intro (proof-bind ?x103) (= $x278 $x79)) $x79) (quant-intro (proof-bind ?x183) (= $x79 $x84)) $x84)))
 (let ((@x233 (mp (mp~ @x280 (sk (~ $x84 $x110)) $x110) (rewrite (= $x110 $x98)) $x98)))
 (let ((@x220 (and-elim @x233 $x80)))
 (let ((@x198 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x80) $x126)) @x220 $x126)))
 (let (($x190 (<= ?x153 0)))
 (let ((@x180 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x80) $x190)) @x220 $x190)))
 (let (($x249 (not (<= ?x231 0))))
 (let (($x89 (>= ?x231 0)))
 (let (($x227 (>= ?x91 0)))
 (let (($x229 (<= ?x91 0)))
 (let ((@x194 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x211 (not $x229) (not $x227))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x229)) @x180 @x198 false) $x229) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x227)) @x180 @x198 false) $x227) $x211)))
 (let ((@x129 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x140 $x249 (not $x89))) (unit-resolution (and-elim @x233 $x157) @x194 $x264) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x89)) @x180 @x198 false) $x89) $x249)))
 ((_ th-lemma arith farkas 1 1 1) @x129 @x180 @x198 false))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        21
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             88
 :arith-nonlinear-bounds    4
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 20
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.49
 :memory                    3.09
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1054701
 :num-checks                1
 :propagations              14
 :rlimit-count              1893
 :time                      0.01
 :total-time                0.01)
