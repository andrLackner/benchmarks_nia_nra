unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x254 (* y00 q!2)))
 (let ((?x181 (* (- 1) ?x254)))
 (let ((?x69 (* y00 q00)))
 (let ((?x83 (+ r00 ?x69 (* (- 1) r!1) ?x181)))
 (let (($x271 (>= ?x83 0)))
 (let (($x84 (= ?x83 0)))
 (let ((?x168 (* y00 y00 y00)))
 (let ((?x205 (* (- 1) ?x168)))
 (let ((?x88 (* y00 y00 y00 y00)))
 (let ((?x269 (+ ?x88 ?x205 (* y00 y00 r!1) (* (- 1) (* y00 y00 y00 r!1)))))
 (let ((?x121 (* q!2 r!1)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x81 (* (+ ?x64 (* y00 y00 y00 q!2) ?x121 ?x168 r!1 ?x181) ?x269 (+ (* (- 1) r00) (* (- 1) ?x69) r!1 ?x254))))
 (let (($x158 (= ?x81 0)))
 (let (($x111 (not $x158)))
 (let (($x170 (and (= (+ y00 (* (- 1) y!0)) 0) $x84 $x111)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x266 (* q!2 y00)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x261 (+ r!1 ?x65 ?x266 ?x79)))
 (let ((?x265 (+ ?x88 ?x205 (* (- 1) (* r!1 y00 y00 y00)) (* r!1 y00 y00))))
 (let ((?x85 (* (+ r!1 ?x64 (* (- 1) ?x266) ?x121 ?x168 (* q!2 y00 y00 y00)) ?x265 ?x261)))
 (let (($x107 (and (= (+ y!0 ?x64) 0) (= ?x261 0) (not (= ?x85 0)))))
 (let (($x119 (exists ((q Int) (r Int) (y Int) )(! (let ((?x69 (* y00 q00)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x39 (* q y00)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x93 (+ r ?x65 ?x39 ?x79)))
 (let ((?x198 (* r y00 y00)))
 (let ((?x187 (* (- 1) (* r y00 y00 y00))))
 (let ((?x168 (* y00 y00 y00)))
 (let ((?x205 (* (- 1) ?x168)))
 (let ((?x88 (* y00 y00 y00 y00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x178 (+ r ?x64 (* (- 1) ?x39) (* q r) ?x168 (* q y00 y00 y00))))
 (let (($x98 (= ?x93 0)))
 (let (($x75 (= (+ y ?x64) 0)))
 (and $x75 $x98 (not (= (* ?x178 (+ ?x88 ?x205 ?x187 ?x198) ?x93) 0))))))))))))))))) :qid k!29))
 ))
 (let (($x113 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x150 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x167 (+ (* (- 1) (* y00 y00 y00 (+ r ?x64))) (* y00 y00 (+ r ?x64)))))
 (let ((?x136 (+ (* (+ 1 q) (+ r ?x64)) (* y00 y00 y00 (+ 1 q)))))
 (let (($x218 (= (* ?x136 ?x167 (+ r ?x64 ?x65 ?x150 (* y00 (+ 1 q)))) 0)))
 (let (($x149 (not $x218)))
 (let (($x86 (= (+ r ?x65 ?x150 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x86 $x149)))))))))) :qid k!29))
 ))
 (let ((?x126 (lambda ((q Int) (r Int) (y Int) )(let ((?x69 (* y00 q00)))
 (let ((?x79 (* (- 1) ?x69)))
 (let ((?x39 (* q y00)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x93 (+ r ?x65 ?x39 ?x79)))
 (let ((?x198 (* r y00 y00)))
 (let ((?x187 (* (- 1) (* r y00 y00 y00))))
 (let ((?x168 (* y00 y00 y00)))
 (let ((?x205 (* (- 1) ?x168)))
 (let ((?x88 (* y00 y00 y00 y00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x178 (+ r ?x64 (* (- 1) ?x39) (* q r) ?x168 (* q y00 y00 y00))))
 (let (($x98 (= ?x93 0)))
 (let (($x75 (= (+ y ?x64) 0)))
 (let (($x230 (and $x75 $x98 (not (= (* ?x178 (+ ?x88 ?x205 ?x187 ?x198) ?x93) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x150 (* (- 1) ?x36)))
 (let ((?x167 (+ (* (- 1) (* y00 y00 y00 (+ r ?x64))) (* y00 y00 (+ r ?x64)))))
 (let ((?x136 (+ (* (+ 1 q) (+ r ?x64)) (* y00 y00 y00 (+ 1 q)))))
 (let (($x218 (= (* ?x136 ?x167 (+ r ?x64 ?x65 ?x150 (* y00 (+ 1 q)))) 0)))
 (let (($x149 (not $x218)))
 (let (($x86 (= (+ r ?x65 ?x150 (* y00 q)) 0)))
 (let (($x155 (and (= (+ y00 (* (- 1) y)) 0) $x86 $x149)))
 (rewrite (= $x155 $x230))))))))))))))))))))))))))
 ))
 (let (($x141 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x150 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x167 (+ (* (- 1) (* y00 y00 y00 (+ r ?x64))) (* y00 y00 (+ r ?x64)))))
 (let ((?x136 (+ (* (+ 1 q) (+ r ?x64)) (* y00 y00 y00 (+ 1 q)))))
 (let (($x218 (= (* ?x136 ?x167 (+ r ?x64 ?x65 ?x150 (* y00 (+ 1 q)))) 0)))
 (let (($x149 (not $x218)))
 (let (($x86 (= (+ r ?x65 ?x150 (* y00 q)) 0)))
 (and (= (+ ?x64 y) 0) $x86 $x149)))))))))) :qid k!29))
 ))
 (let ((?x82 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x150 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x167 (+ (* (- 1) (* y00 y00 y00 (+ r ?x64))) (* y00 y00 (+ r ?x64)))))
 (let ((?x136 (+ (* (+ 1 q) (+ r ?x64)) (* y00 y00 y00 (+ 1 q)))))
 (let (($x218 (= (* ?x136 ?x167 (+ r ?x64 ?x65 ?x150 (* y00 (+ 1 q)))) 0)))
 (let (($x149 (not $x218)))
 (let (($x86 (= (+ r ?x65 ?x150 (* y00 q)) 0)))
 (let (($x155 (and (= (+ y00 (* (- 1) y)) 0) $x86 $x149)))
 (let (($x67 (and (= (+ ?x64 y) 0) $x86 $x149)))
 (rewrite (= $x67 $x155))))))))))))))
 ))
 (let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x53 (+ (* (- 1) (- r y00) y00 y00 y00) (* (- r y00) y00 y00))))
 (let ((?x50 (+ (* (+ q 1) (- r y00)) (* (+ q 1) y00 y00 y00))))
 (let ((?x47 (+ (- (- (- r y00) r00) (* q00 y00)) (* (+ q 1) y00))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= (* ?x47 ?x50 ?x53) 0))))))) :qid k!29))
 ))
 (let ((?x154 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x150 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) r00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x167 (+ (* (- 1) (* y00 y00 y00 (+ r ?x64))) (* y00 y00 (+ r ?x64)))))
 (let ((?x136 (+ (* (+ 1 q) (+ r ?x64)) (* y00 y00 y00 (+ 1 q)))))
 (let (($x218 (= (* ?x136 ?x167 (+ r ?x64 ?x65 ?x150 (* y00 (+ 1 q)))) 0)))
 (let (($x149 (not $x218)))
 (let (($x86 (= (+ r ?x65 ?x150 (* y00 q)) 0)))
 (let (($x67 (and (= (+ ?x64 y) 0) $x86 $x149)))
 (let ((?x53 (+ (* (- 1) (- r y00) y00 y00 y00) (* (- r y00) y00 y00))))
 (let ((?x50 (+ (* (+ q 1) (- r y00)) (* (+ q 1) y00 y00 y00))))
 (let ((?x54 (* (+ (- (- (- r y00) r00) ?x36) (* (+ q 1) y00)) ?x50 ?x53)))
 (let (($x58 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x54 0))))))
 (rewrite (= $x58 $x67)))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x190 (mp (mp @x60 (quant-intro (proof-bind ?x154) (= $x59 $x141)) $x141) (rewrite (= $x141 $x141)) $x141)))
 (let ((@x212 (mp (mp @x190 (quant-intro (proof-bind ?x82) (= $x141 $x113)) $x113) (quant-intro (proof-bind ?x126) (= $x113 $x119)) $x119)))
 (let ((@x174 (mp (mp~ @x212 (sk (~ $x119 $x107)) $x107) (rewrite (= $x107 $x170)) $x170)))
 (let ((@x245 (and-elim @x174 $x84)))
 (let ((@x99 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x84) $x271)) @x245 $x271)))
 (let (($x272 (<= ?x83 0)))
 (let ((@x62 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x84) $x272)) @x245 $x272)))
 (let (($x94 (not (<= ?x81 0))))
 (let (($x268 (>= ?x81 0)))
 (let ((@x247 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x158 $x94 (not $x268))) (and-elim @x174 $x111) (or $x94 (not $x268)))))
 (let ((@x248 (unit-resolution @x247 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x268)) @x62 @x99 false) $x268) $x94)))
 ((_ th-lemma arith farkas 1 1 1) @x248 @x62 @x99 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        10
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             62
 :arith-nonlinear-bounds    2
 :arith-num-rows            5
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 21
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.44
 :memory                    3.03
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1028632
 :num-checks                1
 :propagations              6
 :rlimit-count              1452
 :time                      0.01
 :total-time                0.01)
