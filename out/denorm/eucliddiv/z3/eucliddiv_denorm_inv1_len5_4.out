unsat
((set-logic NIA)
(proof
(let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x52 (* ?x43 ?x43 ?x44 y00 y00)))
 (let ((?x50 (* ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x47 (* ?x44 ?x44 y00 y00 y00)))
 (let ((?x46 (* ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x48 (- ?x45 ?x46)))
 (let ((?x49 (- ?x48 ?x47)))
 (let ((?x51 (+ ?x49 ?x50)))
 (let ((?x53 (- ?x51 ?x52)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x54 (* ?x42 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x57))))))))))))))))))))) :qid k!29))
 ))
 (let (($x488 (= $x59 false)))
 (let (($x481 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x487 (elim-unused (= $x481 false))))
 (let (($x484 (= $x59 $x481)))
 (let ((?x592 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x52 (* ?x43 ?x43 ?x44 y00 y00)))
 (let ((?x50 (* ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x47 (* ?x44 ?x44 y00 y00 y00)))
 (let ((?x46 (* ?x43 ?x43 ?x43 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x48 (- ?x45 ?x46)))
 (let ((?x49 (- ?x48 ?x47)))
 (let ((?x51 (+ ?x49 ?x50)))
 (let ((?x53 (- ?x51 ?x52)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x54 (* ?x42 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x58 (and $x33 $x41 $x57)))
 (let (($x479 (= $x58 false)))
 (let (($x518 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x88 (= (+ (* (- 1) y00) y) 0)))
 (let (($x586 (and $x88 $x518 false)))
 (let (($x472 (= $x57 false)))
 (let ((@x471 (rewrite (= (or false) false))))
 (let (($x467 (or false)))
 (let (($x468 (= $x57 $x467)))
 (let (($x465 (= $x56 false)))
 (let ((@x464 (rewrite (= (not true) false))))
 (let (($x460 (not true)))
 (let (($x461 (= $x56 $x460)))
 (let (($x458 (= $x55 true)))
 (let ((@x457 (rewrite (= (= 0 0) true))))
 (let (($x453 (= 0 0)))
 (let (($x454 (= $x55 $x453)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x86 (+ r ?x64)))
 (let ((?x83 (+ 1 q)))
 (let ((?x555 (* y00 y00 ?x83 ?x83 ?x86)))
 (let ((?x563 (* (- 1) ?x555)))
 (let ((?x542 (* y00 y00 ?x86 ?x86 ?x86)))
 (let ((?x523 (* y00 y00 y00 ?x86 ?x86)))
 (let ((?x531 (* (- 1) ?x523)))
 (let ((?x499 (* y00 y00 y00 ?x83 ?x83 ?x83)))
 (let ((?x514 (* (- 1) ?x499)))
 (let ((?x491 (* (- 1) (* y00 y00 y00 ?x83 ?x83 ?x83 ?x86 ?x86))))
 (let ((?x569 (+ ?x491 ?x514 ?x531 ?x542 ?x563)))
 (let ((?x574 (* 0 ?x569)))
 (let ((?x550 (+ ?x491 ?x514 ?x531 ?x542)))
 (let ((?x564 (+ ?x550 ?x563)))
 (let ((?x560 (- ?x550 ?x555)))
 (let ((@x91 (rewrite (= ?x44 ?x86))))
 (let ((@x85 (rewrite (= ?x43 ?x83))))
 (let ((@x373 (monotonicity @x85 @x85 @x91 (= ?x52 (* ?x83 ?x83 ?x86 y00 y00)))))
 (let ((@x559 (trans @x373 (rewrite (= (* ?x83 ?x83 ?x86 y00 y00) ?x555)) (= ?x52 ?x555))))
 (let ((@x302 (monotonicity @x91 @x91 @x91 (= ?x50 (* ?x86 ?x86 ?x86 y00 y00)))))
 (let ((@x546 (trans @x302 (rewrite (= (* ?x86 ?x86 ?x86 y00 y00) ?x542)) (= ?x50 ?x542))))
 (let ((@x241 (monotonicity @x91 @x91 (= ?x47 (* ?x86 ?x86 y00 y00 y00)))))
 (let ((@x527 (trans @x241 (rewrite (= (* ?x86 ?x86 y00 y00 y00) ?x523)) (= ?x47 ?x523))))
 (let ((@x170 (monotonicity @x85 @x85 @x85 (= ?x46 (* ?x83 ?x83 ?x83 y00 y00 y00)))))
 (let ((@x506 (trans @x170 (rewrite (= (* ?x83 ?x83 ?x83 y00 y00 y00) ?x499)) (= ?x46 ?x499))))
 (let ((@x494 (rewrite (= (* (- 1) ?x83 ?x83 ?x83 ?x86 ?x86 y00 y00 y00) ?x491))))
 (let ((@x94 (monotonicity (rewrite (= ?x28 (- 1))) @x85 @x85 @x85 @x91 @x91 (= ?x45 (* (- 1) ?x83 ?x83 ?x83 ?x86 ?x86 y00 y00 y00)))))
 (let ((@x512 (monotonicity (trans @x94 @x494 (= ?x45 ?x491)) @x506 (= ?x48 (- ?x491 ?x499)))))
 (let ((@x522 (trans @x512 (rewrite (= (- ?x491 ?x499) (+ ?x491 ?x514))) (= ?x48 (+ ?x491 ?x514)))))
 (let ((@x536 (trans (monotonicity @x522 @x527 (= ?x49 (- (+ ?x491 ?x514) ?x523))) (rewrite (= (- (+ ?x491 ?x514) ?x523) (+ (+ ?x491 ?x514) ?x531))) (= ?x49 (+ (+ ?x491 ?x514) ?x531)))))
 (let ((@x541 (trans @x536 (rewrite (= (+ (+ ?x491 ?x514) ?x531) (+ ?x491 ?x514 ?x531))) (= ?x49 (+ ?x491 ?x514 ?x531)))))
 (let ((@x554 (trans (monotonicity @x541 @x546 (= ?x51 (+ (+ ?x491 ?x514 ?x531) ?x542))) (rewrite (= (+ (+ ?x491 ?x514 ?x531) ?x542) ?x550)) (= ?x51 ?x550))))
 (let ((@x568 (trans (monotonicity @x554 @x559 (= ?x53 ?x560)) (rewrite (= ?x560 ?x564)) (= ?x53 ?x564))))
 (let ((@x80 (trans (monotonicity (rewrite (= ?x30 ?x64)) (= ?x42 (+ ?x64 y00))) (rewrite (= (+ ?x64 y00) 0)) (= ?x42 0))))
 (let ((@x576 (monotonicity @x80 (trans @x568 (rewrite (= ?x564 ?x569)) (= ?x53 ?x569)) (= ?x54 ?x574))))
 (let ((@x581 (trans (monotonicity (trans @x576 (rewrite (= ?x574 0)) $x55) $x454) @x457 $x458)))
 (let ((@x585 (trans (monotonicity (trans (monotonicity @x581 $x461) @x464 $x465) $x468) @x471 $x472)))
 (let ((@x588 (monotonicity (rewrite (= $x33 $x88)) (rewrite (= $x41 $x518)) @x585 (= $x58 $x586))))
 (trans @x588 (rewrite (= $x586 false)) $x479))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (mp @x60 (trans (quant-intro (proof-bind ?x592) $x484) @x487 $x488) false))))))))))

(:max-memory   3.36
 :memory       3.06
 :mk-bool-var  5
 :num-allocs   905919
 :rlimit-count 365
 :time         0.01
 :total-time   0.01)
