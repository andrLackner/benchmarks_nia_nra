unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x513 (+ ?x142 (* (- 1.0) (to_real (* b00 x00))))))
 (let (($x452 (>= ?x513 0.0)))
 (let (($x492 (= 0.0 ?x513)))
 (let ((@x542 (symm (commutativity (= $x492 (= ?x513 0.0))) (= (= ?x513 0.0) $x492))))
 (let ((@x225 (mp ((_ th-lemma arith) (= ?x513 0.0)) @x542 $x492)))
 (let ((@x595 (lemma (unit-resolution (hypothesis (not $x492)) @x225 false) $x492)))
 (let ((@x235 ((_ th-lemma arith triangle-eq) (or (not $x492) $x452))))
 (let ((@x356 (unit-resolution @x235 @x595 $x452)))
 (let (($x566 (<= ?x513 0.0)))
 (let ((@x596 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x492) $x566)) @x595 $x566)))
 (let ((?x302 (to_real r!1)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x312 (to_real x!0)))
 (let ((?x239 (to_real b!2)))
 (let ((?x418 (* ?x239 ?x312)))
 (let ((?x504 (+ ?x418 ?x145 ?x131 ?x302)))
 (let (($x485 (>= ?x504 0.0)))
 (let ((?x535 (+ (* (- 1.0) (to_real (* b!2 x!0))) ?x418)))
 (let (($x567 (>= ?x535 0.0)))
 (let (($x531 (= 0.0 ?x535)))
 (let ((@x529 (symm (commutativity (= $x531 (= ?x535 0.0))) (= (= ?x535 0.0) $x531))))
 (let ((@x527 (mp ((_ th-lemma arith) (= ?x535 0.0)) @x529 $x531)))
 (let ((?x82 (* b00 x00)))
 (let ((?x393 (+ r00 ?x82 (* (- 1) (* b!2 x!0)) (* (- 1) r!1))))
 (let (($x667 (<= ?x393 0)))
 (let (($x180 (= 0 ?x393)))
 (let ((@x538 (symm (commutativity (= $x180 (= ?x393 0))) (= (= ?x393 0) $x180))))
 (let (($x387 (= ?x393 0)))
 (let ((?x648 (* (/ 1.0 32.0) (* ?x239 ?x239 ?x239 ?x239 ?x239))))
 (let ((?x124 (* (- (/ 3.0 16.0)) (* ?x239 ?x239 ?x239 ?x239 ?x302))))
 (let ((?x671 (* (/ 1.0 8.0) (* ?x239 ?x239 ?x239))))
 (let ((?x276 (* (/ 3.0 8.0) (* ?x239 ?x239 ?x239 ?x302 ?x302))))
 (let ((?x390 (* (- (/ 1.0 4.0)) (* ?x239 ?x239 ?x302 ?x302 ?x302))))
 (let ((?x349 (* (/ 1.0 2.0) (* ?x239 ?x239 ?x239 ?x312 ?x312))))
 (let ((?x482 (* (- (/ 1.0 4.0)) (* ?x239 ?x239 ?x302))))
 (let ((?x607 (* (/ 1.0 2.0) (* ?x239 ?x239 ?x239 ?x312))))
 (let ((?x403 (* (/ 1.0 16.0) (* ?x239 ?x239 ?x239 ?x239 ?x239 ?x312))))
 (let ((?x491 (+ ?x403 (* (/ 3.0 4.0) (* ?x239 ?x239 ?x239 ?x302 ?x302 ?x312)) ?x607 ?x482 ?x349 ?x390 (* (- 1.0) (* ?x239 ?x239 ?x302 ?x312 ?x312)) (* (- (/ 3.0 8.0)) (* ?x239 ?x239 ?x239 ?x239 ?x302 ?x312)) (* (- (/ 1.0 2.0)) (* ?x239 ?x239 ?x302 ?x302 ?x302 ?x312)) (* (- 1.0) (* ?x239 ?x239 ?x302 ?x312)) ?x276 ?x671 ?x124 ?x648)))
 (let (($x453 (= (* ?x491 (+ ?x131 ?x145 ?x302 ?x418)) 0.0)))
 (let (($x506 (not $x453)))
 (let ((?x481 (+ (* (/ 1.0 2.0) (* ?x239 ?x239 ?x302 ?x302 ?x302 ?x302 ?x312)) (* ?x239 ?x239 ?x302 ?x302 ?x312 ?x312) (* (- 1.0) (* ?x59 ?x239 ?x239 ?x302 ?x312 ?x312)) (* (- 1.0) (* ?x140 ?x141 ?x239 ?x239 ?x302 ?x312 ?x312)) (* ?x239 ?x239 ?x239 ?x302 ?x312 ?x312 ?x312) (* (- (/ 1.0 2.0)) (* ?x59 ?x239 ?x239 ?x302 ?x302 ?x302 ?x312)) (* (- (/ 1.0 2.0)) (* ?x140 ?x141 ?x239 ?x239 ?x302 ?x302 ?x302 ?x312)) (* (/ 1.0 2.0) (* ?x239 ?x239 ?x239 ?x302 ?x302 ?x302 ?x312 ?x312)))))
 (let (($x490 (= ?x481 0.0)))
 (let (($x399 (not $x490)))
 (let (($x147 (or $x399 $x506)))
 (let (($x534 (and $x387 $x147)))
 (let ((?x415 (+ (* (- 1.0) (* ?x239 ?x239 ?x312 ?x312 ?x302)) (* (- (/ 1.0 2.0)) (* ?x239 ?x239 ?x312 ?x302 ?x302 ?x302)) ?x671 ?x482 ?x607 (* (- 1.0) (* ?x239 ?x239 ?x312 ?x302)) ?x349 ?x648 ?x124 ?x276 ?x390 ?x403 (* (- (/ 3.0 8.0)) (* ?x239 ?x239 ?x239 ?x239 ?x312 ?x302)) (* (/ 3.0 4.0) (* ?x239 ?x239 ?x239 ?x312 ?x302 ?x302)))))
 (let ((?x265 (+ (* ?x239 ?x239 ?x312 ?x312 ?x302 ?x302) (* (- 1.0) (* ?x239 ?x239 ?x312 ?x312 ?x302 ?x59)) (* (- 1.0) (* ?x239 ?x239 ?x312 ?x312 ?x302 ?x140 ?x141)) (* ?x239 ?x239 ?x239 ?x312 ?x312 ?x312 ?x302) (* (/ 1.0 2.0) (* ?x239 ?x239 ?x312 ?x302 ?x302 ?x302 ?x302)) (* (- (/ 1.0 2.0)) (* ?x239 ?x239 ?x312 ?x302 ?x302 ?x302 ?x59)) (* (- (/ 1.0 2.0)) (* ?x239 ?x239 ?x312 ?x302 ?x302 ?x302 ?x140 ?x141)) (* (/ 1.0 2.0) (* ?x239 ?x239 ?x239 ?x312 ?x312 ?x302 ?x302 ?x302)))))
 (let (($x402 (or (not (= ?x265 0.0)) (not (= (* ?x415 (+ ?x302 ?x131 ?x145 ?x418)) 0.0)))))
 (let (($x411 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x82)) 0) $x402)))
 (let (($x353 (exists ((b Int) (r Int) (x Int) )(! (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x48 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x672 (+ (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43)) (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x48)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x48)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x48)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)))))
 (let ((?x280 (+ (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x59)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x140 ?x141)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48 ?x59)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48 ?x140 ?x141)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x258 (not (= ?x280 0.0))))
 (let (($x598 (or $x258 (not (= (* ?x672 (+ ?x48 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x118 $x598))))))))))))))) :qid k!28))
 ))
 (let (($x472 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x166 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x114 (+ ?x145 ?x48 ?x166 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x371 (+ ?x48 ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x526 (+ 1.0 ?x255)))
 (let ((?x474 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x526 ?x371)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x371 ?x371 ?x371)))))
 (let ((?x576 (+ (* (- 1.0) (* ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x48 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x487 (or (not (= (* ?x576 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x474 ?x114) 0.0)))))
 (let (($x317 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x317 $x487))))))))))))))))))) :qid k!28))
 ))
 (let ((?x354 (lambda ((b Int) (r Int) (x Int) )(let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x48 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x672 (+ (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48)) (* (/ 1.0 8.0) (* ?x40 ?x40 ?x40)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x48)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43)) (* (/ 1.0 32.0) (* ?x40 ?x40 ?x40 ?x40 ?x40)) (* (- (/ 3.0 16.0)) (* ?x40 ?x40 ?x40 ?x40 ?x48)) (* (/ 3.0 8.0) (* ?x40 ?x40 ?x40 ?x48 ?x48)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x48 ?x48 ?x48)) (* (/ 1.0 16.0) (* ?x40 ?x40 ?x40 ?x40 ?x40 ?x43)) (* (- (/ 3.0 8.0)) (* ?x40 ?x40 ?x40 ?x40 ?x43 ?x48)) (* (/ 3.0 4.0) (* ?x40 ?x40 ?x40 ?x43 ?x48 ?x48)))))
 (let ((?x280 (+ (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x48) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x59)) (* (- 1.0) (* ?x40 ?x40 ?x43 ?x43 ?x48 ?x140 ?x141)) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x43 ?x48) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48 ?x48)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48 ?x59)) (* (- (/ 1.0 2.0)) (* ?x40 ?x40 ?x43 ?x48 ?x48 ?x48 ?x140 ?x141)) (* (/ 1.0 2.0) (* ?x40 ?x40 ?x40 ?x43 ?x43 ?x48 ?x48 ?x48)))))
 (let (($x258 (not (= ?x280 0.0))))
 (let (($x598 (or $x258 (not (= (* ?x672 (+ ?x48 ?x131 ?x145 (* ?x40 ?x43))) 0.0)))))
 (let (($x118 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x95 (and $x118 $x598)))
 (let ((?x166 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x114 (+ ?x145 ?x48 ?x166 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x371 (+ ?x48 ?x166)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x526 (+ 1.0 ?x255)))
 (let ((?x474 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x526 ?x371)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x371 ?x371 ?x371)))))
 (let ((?x576 (+ (* (- 1.0) (* ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x48 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x487 (or (not (= (* ?x576 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x474 ?x114) 0.0)))))
 (let (($x317 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x379 (and $x317 $x487)))
 (rewrite (= $x379 $x95))))))))))))))))))))))))))))
 ))
 (let (($x489 (exists ((b Int) (r Int) (x Int) )(! (let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x166 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x114 (+ ?x145 ?x48 ?x166 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x371 (+ ?x48 ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x526 (+ 1.0 ?x255)))
 (let ((?x474 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x526 ?x371)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x371 ?x371 ?x371)))))
 (let ((?x576 (+ (* (- 1.0) (* ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x48 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x487 (or (not (= (* ?x576 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x474 ?x114) 0.0)))))
 (let (($x651 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x651 $x487))))))))))))))))))) :qid k!28))
 ))
 (let ((?x678 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x166 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x114 (+ ?x145 ?x48 ?x166 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x371 (+ ?x48 ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x526 (+ 1.0 ?x255)))
 (let ((?x474 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x526 ?x371)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x371 ?x371 ?x371)))))
 (let ((?x576 (+ (* (- 1.0) (* ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x48 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x487 (or (not (= (* ?x576 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x474 ?x114) 0.0)))))
 (let (($x317 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x379 (and $x317 $x487)))
 (let (($x651 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x591 (and $x651 $x487)))
 (rewrite (= $x591 $x379))))))))))))))))))))))))
 ))
 (let (($x74 (exists ((b Int) (r Int) (x Int) )(! (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x48 (to_real r)))
 (let ((?x56 (- ?x48 ?x42)))
 (let ((?x68 (- (* (to_real (- 1)) ?x42 ?x42 ?x56 ?x63 ?x63) (* ?x42 ?x42 ?x56 ?x56 ?x56 ?x63))))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) (to_real r00)) (* ?x42 ?x63))))
 (let ((?x43 (to_real x)))
 (let ((?x28 (- 1)))
 (let ((?x47 (to_real ?x28)))
 (let ((?x51 (- (* ?x47 ?x42 ?x42 ?x48 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x42 ?x48 ?x48 ?x48 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* ?x28 b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* ?x28 b00 x00) r) r00) (* b x)) 0)))
 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= (* ?x65 ?x68) ?x53))))))))))))))))))) :qid k!28))
 ))
 (let ((?x682 (lambda ((b Int) (r Int) (x Int) )(let ((?x59 (to_real r00)))
 (let ((?x131 (* (- 1.0) ?x59)))
 (let ((?x40 (to_real b)))
 (let ((?x166 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x48 (to_real r)))
 (let ((?x141 (to_real x00)))
 (let ((?x140 (to_real b00)))
 (let ((?x142 (* ?x140 ?x141)))
 (let ((?x145 (* (- 1.0) ?x142)))
 (let ((?x114 (+ ?x145 ?x48 ?x166 ?x131 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x371 (+ ?x48 ?x166)))
 (let ((?x43 (to_real x)))
 (let ((?x255 (* 2.0 ?x43)))
 (let ((?x526 (+ 1.0 ?x255)))
 (let ((?x474 (+ (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x526 ?x371)) (* (- (/ 1.0 4.0)) (* ?x40 ?x40 ?x526 ?x371 ?x371 ?x371)))))
 (let ((?x576 (+ (* (- 1.0) (* ?x43 ?x43 ?x48 ?x40 ?x40)) (* (- (/ 1.0 2.0)) (* ?x43 ?x48 ?x48 ?x48 ?x40 ?x40)))))
 (let (($x487 (or (not (= (* ?x576 (+ ?x145 ?x48 ?x131 (* ?x43 ?x40))) 0.0)) (not (= (* ?x474 ?x114) 0.0)))))
 (let (($x651 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x591 (and $x651 $x487)))
 (let ((?x53 (to_real 0)))
 (let ((?x63 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x56 (- ?x48 ?x42)))
 (let ((?x68 (- (* (to_real (- 1)) ?x42 ?x42 ?x56 ?x63 ?x63) (* ?x42 ?x42 ?x56 ?x56 ?x56 ?x63))))
 (let ((?x65 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x56) ?x59) (* ?x42 ?x63))))
 (let ((?x51 (- (* (to_real (- 1)) ?x42 ?x42 ?x48 ?x41 ?x43 ?x41 ?x43) (* ?x42 ?x42 ?x48 ?x48 ?x48 ?x41 ?x43))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x73 (and $x38 (or (not (= (* ?x46 ?x51) ?x53)) (not (= (* ?x65 ?x68) ?x53))))))
 (rewrite (= $x73 $x591)))))))))))))))))))))))))))))))))
 ))
 (let ((@x75 (asserted $x74)))
 (let ((@x307 (mp (mp @x75 (quant-intro (proof-bind ?x682) (= $x74 $x489)) $x489) (rewrite (= $x489 $x489)) $x489)))
 (let ((@x495 (mp (mp @x307 (quant-intro (proof-bind ?x678) (= $x489 $x472)) $x472) (quant-intro (proof-bind ?x354) (= $x472 $x353)) $x353)))
 (let ((@x519 (mp (mp~ @x495 (sk (~ $x353 $x411)) $x411) (rewrite (= $x411 $x534)) $x534)))
 (let ((@x537 (mp (and-elim @x519 $x387) @x538 $x180)))
 (let ((@x298 ((_ th-lemma arith) (hypothesis (not $x485)) (hypothesis $x566) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x180) $x667)) @x537 $x667) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x531) $x567)) @x527 $x567) false)))
 (let ((@x152 (unit-resolution (lemma @x298 (or (not $x566) $x485)) @x596 $x485)))
 (let (($x484 (<= ?x504 0.0)))
 (let (($x528 (<= ?x535 0.0)))
 (let (($x274 (>= ?x393 0)))
 (let ((@x558 ((_ th-lemma arith) (hypothesis (not $x484)) (unit-resolution @x235 @x225 $x452) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x180) $x274)) @x537 $x274) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x531) $x528)) @x527 $x528) false)))
 (let ((@x237 (lemma @x558 $x484)))
 (let (($x391 (>= ?x481 0.0)))
 (let (($x618 (not $x391)))
 (let (($x394 (= 0.0 ?x481)))
 (let (($x208 (not $x394)))
 (let ((@x324 (monotonicity (symm (commutativity (= $x394 $x490)) (= $x490 $x394)) (= $x399 $x208))))
 (let (($x559 (= 0.0 ?x504)))
 (let ((@x159 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x559 (not $x484) (not $x485))) @x237 @x152 $x559)))
 (let (($x571 (= ?x504 0.0)))
 (let (($x228 (not $x571)))
 (let ((@x231 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x228 $x453)) (hypothesis $x506) $x228) (symm (hypothesis $x559) $x571) false)))
 (let ((@x338 (unit-resolution (and-elim @x519 $x147) (unit-resolution (lemma @x231 (or (not $x559) $x453)) @x159 $x453) $x399)))
 (let (($x378 (<= ?x481 0.0)))
 (let ((@x365 (unit-resolution ((_ th-lemma arith) (or (not $x452) $x378 (not $x566) (not $x485) (not $x484))) (hypothesis (not $x378)) @x237 @x152 @x596 @x356 false)))
 (let ((@x326 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x394 (not $x378) $x618)) (lemma @x365 $x378) (mp @x338 @x324 $x208) $x618)))
 (unit-resolution ((_ th-lemma arith) (or (not $x452) $x391 (not $x566) (not $x485) (not $x484))) @x326 @x237 @x152 @x596 @x356 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       73
 :arith-eq-adapter                100
 :arith-bound-propagations-cheap  88
 :arith-bound-propagations-lp     21
 :arith-branch                    2
 :arith-conflicts                 148
 :arith-cube-calls                1
 :arith-diseq                     103
 :arith-gcd-calls                 16
 :arith-grobner-calls             9
 :arith-grobner-conflicts         2
 :arith-horner-calls              9
 :arith-horner-cross-nested-forms 4
 :arith-lower                     110
 :arith-make-feasible             96
 :arith-max-columns               70
 :arith-max-rows                  26
 :arith-nla-explanations          166
 :arith-nla-lemmas                142
 :arith-patches                   16
 :arith-patches-success           14
 :arith-propagations              88
 :arith-upper                     140
 :conflicts                       21
 :decisions                       263
 :del-clause                      385
 :final-checks                    66
 :max-memory                      4.90
 :memory                          3.15
 :mk-bool-var                     596
 :mk-clause                       575
 :num-allocs                      6599380
 :num-checks                      1
 :propagations                    365
 :rlimit-count                    8825
 :time                            0.04
 :total-time                      0.05)
