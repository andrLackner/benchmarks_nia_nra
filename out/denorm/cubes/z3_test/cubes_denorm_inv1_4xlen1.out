unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x630 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x181 (>= ?x630 (- 6))))
 (let (($x632 (= ?x630 (- 6))))
 (let ((?x89 (+ m!1 k!2)))
 (let ((?x359 (+ 6 m!1)))
 (let ((?x355 (+ 1 n!0)))
 (let ((?x238 (* ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x359 ?x359 ?x359 ?x89 ?x89 ?x89 ?x89 ?x89 ?x89 ?x89 (+ k!2 c!3) (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x107 (= ?x238 0)))
 (let (($x237 (not $x107)))
 (let (($x183 (= (+ (* 3 n!0) (* 3 (* n!0 n!0)) (* (- 1) k!2)) (- 1))))
 (let (($x278 (= (+ (* 2 n!0) (* n!0 k!2) (* (- 1) k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x322 (* k!2 k!2)))
 (let ((?x170 (+ (* 9 n!0) ?x322 (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let (($x243 (and $x632 (= ?x170 (- 4)) $x278 $x183 $x237)))
 (let ((?x360 (+ k!2 m!1)))
 (let ((?x650 (* ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x355 ?x359 ?x359 ?x359 ?x360 ?x360 ?x360 ?x360 ?x360 ?x360 ?x360 (+ c!3 k!2) (+ (- 6) m!1 (* (- 6) n!0)))))
 (let (($x651 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x252 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x322) (* 9 (* c!3 n!0)))))
 (let (($x368 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x252 4) $x651 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x650 0)))))
 (let (($x627 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 $x207 $x259 $x297 $x612)))))))))))))))) :qid k!34))
 ))
 (let (($x610 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x612))))))))))))))) :qid k!34))
 ))
 (let ((?x186 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x211 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x207 (= ?x211 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x613 (and $x123 $x207 $x259 $x297 $x612)))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x612)))
 (rewrite (= $x105 $x613)))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x72 (+ k m)))
 (let ((?x73 (+ m 6)))
 (let ((?x74 (+ c k)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x73 ?x69 ?x69 ?x69 ?x74 ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x72 ?x72 ?x72 ?x69 ?x69 ?x69 (- 1) ?x69 ?x69)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x609 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x612)))
 (let ((?x69 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x73 ?x69 ?x69 ?x69 ?x74 ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x72 ?x72 ?x72 ?x69 ?x69 ?x69 (- 1) ?x69 ?x69)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x80 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0))))))
 (rewrite (= $x80 $x105)))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x350 (mp (mp @x82 (quant-intro (proof-bind ?x609) (= $x81 $x610)) $x610) (rewrite (= $x610 $x610)) $x610)))
 (let ((@x369 (mp~ (mp @x350 (quant-intro (proof-bind ?x186) (= $x610 $x627)) $x627) (sk (~ $x627 $x368)) $x368)))
 (let ((@x519 (mp @x369 (rewrite (= $x368 $x243)) $x243)))
 (let ((@x229 (and-elim @x519 $x632)))
 (let ((@x113 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x632) $x181)) @x229 $x181)))
 (let (($x194 (<= ?x630 (- 6))))
 (let ((@x110 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x632) $x194)) @x229 $x194)))
 (let (($x164 (not (>= ?x238 0))))
 (let (($x155 (<= ?x238 0)))
 (let ((@x340 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x107 (not $x155) $x164)) (and-elim @x519 $x237) (or (not $x155) $x164))))
 (let ((@x339 (unit-resolution @x340 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x155)) @x110 @x113 false) $x155) $x164)))
 ((_ th-lemma arith farkas 1 1 1) @x339 @x110 @x113 false)))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      19
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                19.61
 :memory                    19.16
 :mk-bool-var               28
 :mk-clause                 24
 :num-allocs                487207
 :num-checks                1
 :propagations              12
 :rlimit-count              3409
 :time                      0.01
 :total-time                0.02)
