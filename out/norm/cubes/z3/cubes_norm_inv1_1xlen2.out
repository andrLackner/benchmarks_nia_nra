unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x428 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x330 (<= ?x428 (- 6))))
 (let (($x426 (= ?x428 (- 6))))
 (let ((?x393 (+ k!2 c!3)))
 (let ((?x591 (+ k!2 m!1)))
 (let ((?x736 (+ 6 m!1)))
 (let ((?x588 (+ 1 n!0)))
 (let ((?x410 (* (- 6) (* ?x588 ?x588 ?x588 ?x736 ?x736 ?x736 ?x591))))
 (let ((?x476 (* ?x588 ?x588 ?x736 ?x736 ?x736 ?x736 ?x591)))
 (let ((?x473 (* (- 6) (* ?x588 ?x588 ?x736 ?x736 ?x736 ?x591))))
 (let ((?x543 (+ (* 6 (* ?x588 ?x588 ?x588 ?x588 ?x736 ?x736 ?x591 ?x591 ?x393 ?x393)) (* 6 (* ?x588 ?x588 ?x588 ?x736 ?x736 ?x591 ?x591 ?x393 ?x393)) ?x473 ?x476 ?x410 (* (- 1) (* ?x588 ?x588 ?x588 ?x736 ?x736 ?x736 ?x591 ?x591 ?x393 ?x393)))))
 (let (($x107 (= ?x543 0)))
 (let (($x560 (not $x107)))
 (let (($x523 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x315 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 1) k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x94 (* k!2 k!2)))
 (let ((?x547 (+ ?x94 (* 9 n!0) (* (- 5) k!2) (* (- 9) (* n!0 c!3)) (* (- 18) c!3))))
 (let (($x108 (and $x426 (= ?x547 (- 4)) $x315 $x523 $x560)))
 (let ((?x593 (+ c!3 k!2)))
 (let ((?x407 (+ (* 6 (* ?x588 ?x588 ?x588 ?x736 ?x736 ?x591 ?x591 ?x593 ?x593)) (* 6 (* ?x588 ?x588 ?x588 ?x588 ?x736 ?x736 ?x591 ?x591 ?x593 ?x593)) (* (- 1) (* ?x588 ?x588 ?x588 ?x736 ?x736 ?x736 ?x591 ?x591 ?x593 ?x593)) ?x476 ?x473 ?x410)))
 (let (($x353 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x437 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x94) (* 9 (* c!3 n!0)))))
 (let (($x414 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x437 4) $x353 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x407 0)))))
 (let (($x317 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x592 (+ (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69) (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)) (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)))))
 (let (($x480 (not (= ?x592 0))))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x204 $x256 $x294 $x480)))))))))))))))) :qid k!34))
 ))
 (let (($x182 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x592 (+ (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69) (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)) (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)))))
 (let (($x480 (not (= ?x592 0))))
 (let (($x434 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x463 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x463 $x434 $x480))))))))))))))) :qid k!34))
 ))
 (let ((?x319 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x592 (+ (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69) (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)) (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)))))
 (let (($x480 (not (= ?x592 0))))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x370 (and $x120 $x204 $x256 $x294 $x480)))
 (let (($x434 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x463 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x163 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x463 $x434 $x480)))
 (rewrite (= $x163 $x370))))))))))))))))))))))
 ))
 (let (($x482 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x592 (+ (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69) (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)) (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)))))
 (let (($x480 (not (= ?x592 0))))
 (let (($x434 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x400 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x339 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= ?x339 (- 4)) $x400 $x434 $x480))))))))))))) :qid k!34))
 ))
 (let ((?x183 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x592 (+ (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69) (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)) (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)))))
 (let (($x480 (not (= ?x592 0))))
 (let (($x434 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x463 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x163 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x463 $x434 $x480)))
 (let (($x400 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x339 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x439 (and $x120 (= ?x339 (- 4)) $x400 $x434 $x480)))
 (rewrite (= $x439 $x163))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (+ (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x74 (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (- ?x78 (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x467 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x302 (+ 6 m)))
 (let ((?x305 (+ 1 n)))
 (let ((?x68 (+ c k)))
 (let ((?x592 (+ (* 6 (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x305 ?x305 ?x305 ?x305 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69 ?x69 ?x68 ?x68)) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x302 ?x69) (* (- 6) (* ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)) (* (- 6) (* ?x305 ?x305 ?x305 ?x302 ?x302 ?x302 ?x69)))))
 (let (($x480 (not (= ?x592 0))))
 (let (($x434 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x400 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x339 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x439 (and $x120 (= ?x339 (- 4)) $x400 $x434 $x480)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x74 (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x82 (- (- ?x78 (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71)) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x439)))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x157 (mp (mp @x88 (quant-intro (proof-bind ?x467) (= $x87 $x482)) $x482) (rewrite (= $x482 $x482)) $x482)))
 (let ((@x486 (mp (mp @x157 (quant-intro (proof-bind ?x183) (= $x482 $x182)) $x182) (quant-intro (proof-bind ?x319) (= $x182 $x317)) $x317)))
 (let ((@x545 (mp (mp~ @x486 (sk (~ $x317 $x414)) $x414) (rewrite (= $x414 $x108)) $x108)))
 (let ((@x575 (and-elim @x545 $x426)))
 (let ((@x173 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x426) $x330)) @x575 $x330)))
 (let (($x327 (>= ?x428 (- 6))))
 (let ((@x681 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x426) $x327)) @x575 $x327)))
 (let (($x923 (not (<= ?x543 0))))
 (let (($x179 (>= ?x543 0)))
 (let ((@x334 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x107 $x923 (not $x179))) (and-elim @x545 $x560) (or $x923 (not $x179)))))
 (let ((@x531 (unit-resolution @x334 (lemma ((_ th-lemma arith) (hypothesis (not $x179)) @x681 @x173 false) $x179) $x923)))
 ((_ th-lemma arith) @x531 @x681 @x173 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        10
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           11
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             128
 :arith-nonlinear-bounds    6
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        2
 :arith-pivots              9
 :arith-row-summations      10
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.66
 :memory                    3.15
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1205294
 :num-checks                1
 :propagations              10
 :rlimit-count              4833
 :time                      0.01
 :total-time                0.02)
