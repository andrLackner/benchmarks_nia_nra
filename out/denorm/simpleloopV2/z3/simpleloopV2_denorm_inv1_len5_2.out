unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x527 (* (- 1) x!1)))
 (let ((?x549 (+ y00 x00 ?x527 (* (- 1) y!0))))
 (let (($x565 (>= ?x549 0)))
 (let (($x211 (= ?x549 0)))
 (let ((?x655 (* x!1 y!0 y!0)))
 (let ((?x607 (* (- 8) ?x655)))
 (let ((?x650 (* x!1 x!1 y!0)))
 (let ((?x559 (* 5 ?x650)))
 (let ((?x635 (* y!0 y!0)))
 (let ((?x374 (* (- 4) ?x635)))
 (let ((?x634 (* x!1 y!0)))
 (let ((?x531 (* 10 ?x634)))
 (let ((?x529 (* 6 y!0)))
 (let ((?x566 (* x!1 x!1)))
 (let ((?x564 (* x!1 y!0 y!0 y!0)))
 (let ((?x542 (* 2 ?x564)))
 (let ((?x562 (* x!1 x!1 y!0 y!0 y!0)))
 (let ((?x540 (* y!0 y!0 y!0)))
 (let ((?x563 (+ 1 x!1)))
 (let ((?x488 (+ (- 1) y!0)))
 (let ((?x494 (* ?x488 ?x488 ?x488 ?x563 ?x563 ?x563)))
 (let ((?x293 (* x!1 x!1 x!1)))
 (let ((?x274 (* x!1 x!1 y!0 y!0)))
 (let ((?x604 (* (- 4) ?x274)))
 (let ((?x454 (+ (- 2) ?x604 ?x527 ?x293 ?x494 ?x540 ?x562 ?x542 ?x566 ?x529 ?x531 ?x374 ?x559 ?x607)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x119 (+ ?x69 ?x76 x!1 y!0)))
 (let ((?x455 (* ?x119 ?x454)))
 (let (($x512 (= ?x455 0)))
 (let (($x416 (not $x512)))
 (let ((?x652 (* (- 4) ?x655)))
 (let ((?x550 (* 2 ?x635)))
 (let ((?x645 (* (- 2) ?x634)))
 (let ((?x554 (* 2 y!0)))
 (let ((?x560 (* (- 3) ?x566)))
 (let ((?x651 (* (- 2) ?x564)))
 (let ((?x541 (* 3 x!1)))
 (let ((?x648 (* 2 ?x274)))
 (let ((?x546 (+ 1 y!0)))
 (let ((?x371 (+ (- 1) x!1)))
 (let ((?x96 (* ?x371 ?x371 ?x371 ?x546 ?x546 ?x546)))
 (let ((?x456 (+ ?x96 ?x648 ?x541 ?x293 ?x540 ?x562 ?x651 ?x560 ?x554 ?x645 ?x550 ?x650 ?x652)))
 (let ((?x396 (* ?x119 ?x456)))
 (let (($x100 (= ?x396 0)))
 (let (($x513 (or (not $x100) $x416)))
 (let (($x633 (and $x211 $x513)))
 (let ((?x612 (+ (- 2) ?x527 ?x529 ?x374 ?x540 ?x542 ?x562 ?x566 ?x531 ?x559 ?x607 ?x604 ?x494 ?x293)))
 (let ((?x539 (+ x!1 y!0 ?x69 ?x76)))
 (let ((?x532 (+ ?x541 ?x554 ?x550 ?x540 ?x651 ?x562 ?x560 ?x645 ?x650 ?x652 ?x648 ?x96 ?x293)))
 (let (($x503 (and (= ?x539 0) (or (not (= (* ?x539 ?x532) 0)) (not (= (* ?x539 ?x612) 0))))))
 (let (($x545 (exists ((x Int) (y Int) )(! (let ((?x409 (* x x x)))
 (let ((?x133 (+ 1 x)))
 (let ((?x400 (+ (- 1) y)))
 (let ((?x364 (* ?x400 ?x400 ?x400 ?x133 ?x133 ?x133)))
 (let ((?x225 (* x x y y)))
 (let ((?x621 (* (- 4) ?x225)))
 (let ((?x221 (* x y y)))
 (let ((?x620 (* (- 8) ?x221)))
 (let ((?x210 (* x x y)))
 (let ((?x618 (* 5 ?x210)))
 (let ((?x206 (* x y)))
 (let ((?x617 (* 10 ?x206)))
 (let ((?x201 (* x x)))
 (let ((?x190 (* x x y y y)))
 (let ((?x188 (* x y y y)))
 (let ((?x516 (* 2 ?x188)))
 (let ((?x184 (* y y y)))
 (let ((?x177 (* y y)))
 (let ((?x603 (* (- 4) ?x177)))
 (let ((?x198 (* (- 1) x)))
 (let ((?x392 (+ (- 2) ?x198 (* 6 y) ?x603 ?x184 ?x516 ?x190 ?x201 ?x617 ?x618 ?x620 ?x621 ?x364 ?x409)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x270 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x391 (* 2 ?x225)))
 (let ((?x426 (* (- 3) ?x201)))
 (let ((?x262 (* (- 2) ?x188)))
 (let ((?x390 (* 2 ?x177)))
 (let ((?x284 (* 2 y)))
 (let ((?x437 (* 3 x)))
 (let ((?x657 (+ ?x437 ?x284 ?x390 ?x184 ?x262 ?x190 ?x426 (* (- 2) ?x206) ?x210 (* (- 4) ?x221) ?x391 ?x270 ?x409)))
 (let (($x95 (= ?x90 0)))
 (and $x95 (or (not (= (* ?x90 ?x657) 0)) (not (= (* ?x90 ?x392) 0))))))))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x180 (exists ((x Int) (y Int) )(! (let ((?x409 (* x x x)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x270 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x225 (* x x y y)))
 (let ((?x391 (* 2 ?x225)))
 (let ((?x210 (* x x y)))
 (let ((?x206 (* x y)))
 (let ((?x201 (* x x)))
 (let ((?x426 (* (- 3) ?x201)))
 (let ((?x190 (* x x y y y)))
 (let ((?x188 (* x y y y)))
 (let ((?x262 (* (- 2) ?x188)))
 (let ((?x184 (* y y y)))
 (let ((?x177 (* y y)))
 (let ((?x390 (* 2 ?x177)))
 (let ((?x284 (* 2 y)))
 (let ((?x437 (* 3 x)))
 (let ((?x438 (+ ?x437 ?x284 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x390 (* (- 1) (* x 1 y y)) ?x184 ?x262 ?x190 ?x426 ?x206 ?x210 (* (- 1) (* x y y)) ?x391 ?x270 (* (- 1) (* x (- 1))) ?x409)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let (($x444 (not (= (* ?x90 ?x438) 0))))
 (let ((?x133 (+ 1 x)))
 (let ((?x400 (+ (- 1) y)))
 (let ((?x364 (* ?x400 ?x400 ?x400 ?x133 ?x133 ?x133)))
 (let ((?x621 (* (- 4) ?x225)))
 (let ((?x516 (* 2 ?x188)))
 (let ((?x606 (* 5 y)))
 (let ((?x198 (* (- 1) x)))
 (let ((?x578 (+ (- 2) ?x198 ?x606 (* (- 1) (* y (- 1) x x)) (* (- 1) (* y (- 1) 1 x)) (* (- 3) ?x177) ?x184 ?x516 ?x190 ?x201 (* 8 ?x206) (* 4 ?x210) (* (- 1) (* y y 1 x)) (* (- 6) (* x y y)) ?x621 (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y y x 1)) ?x364 ?x409)))
 (let (($x95 (= ?x90 0)))
 (and $x95 (or (not (= (* ?x90 ?x578) 0)) $x444)))))))))))))))))))))))))))))))))) :qid k!27))
 ))
 (let ((?x585 (lambda ((x Int) (y Int) )(let ((?x409 (* x x x)))
 (let ((?x133 (+ 1 x)))
 (let ((?x400 (+ (- 1) y)))
 (let ((?x364 (* ?x400 ?x400 ?x400 ?x133 ?x133 ?x133)))
 (let ((?x225 (* x x y y)))
 (let ((?x621 (* (- 4) ?x225)))
 (let ((?x221 (* x y y)))
 (let ((?x620 (* (- 8) ?x221)))
 (let ((?x210 (* x x y)))
 (let ((?x618 (* 5 ?x210)))
 (let ((?x206 (* x y)))
 (let ((?x617 (* 10 ?x206)))
 (let ((?x201 (* x x)))
 (let ((?x190 (* x x y y y)))
 (let ((?x188 (* x y y y)))
 (let ((?x516 (* 2 ?x188)))
 (let ((?x184 (* y y y)))
 (let ((?x177 (* y y)))
 (let ((?x603 (* (- 4) ?x177)))
 (let ((?x198 (* (- 1) x)))
 (let ((?x392 (+ (- 2) ?x198 (* 6 y) ?x603 ?x184 ?x516 ?x190 ?x201 ?x617 ?x618 ?x620 ?x621 ?x364 ?x409)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x270 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x391 (* 2 ?x225)))
 (let ((?x426 (* (- 3) ?x201)))
 (let ((?x262 (* (- 2) ?x188)))
 (let ((?x390 (* 2 ?x177)))
 (let ((?x284 (* 2 y)))
 (let ((?x437 (* 3 x)))
 (let ((?x657 (+ ?x437 ?x284 ?x390 ?x184 ?x262 ?x190 ?x426 (* (- 2) ?x206) ?x210 (* (- 4) ?x221) ?x391 ?x270 ?x409)))
 (let (($x95 (= ?x90 0)))
 (let (($x457 (and $x95 (or (not (= (* ?x90 ?x657) 0)) (not (= (* ?x90 ?x392) 0))))))
 (let ((?x438 (+ ?x437 ?x284 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x390 (* (- 1) (* x 1 y y)) ?x184 ?x262 ?x190 ?x426 ?x206 ?x210 (* (- 1) ?x221) ?x391 ?x270 (* (- 1) (* x (- 1))) ?x409)))
 (let (($x444 (not (= (* ?x90 ?x438) 0))))
 (let ((?x606 (* 5 y)))
 (let ((?x578 (+ (- 2) ?x198 ?x606 (* (- 1) (* y (- 1) x x)) (* (- 1) (* y (- 1) 1 x)) (* (- 3) ?x177) ?x184 ?x516 ?x190 ?x201 (* 8 ?x206) (* 4 ?x210) (* (- 1) (* y y 1 x)) (* (- 6) ?x221) ?x621 (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y y x 1)) ?x364 ?x409)))
 (let (($x691 (and $x95 (or (not (= (* ?x90 ?x578) 0)) $x444))))
 (rewrite (= $x691 $x457))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x361 (exists ((x Int) (y Int) )(! (let ((?x401 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x270 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x353 (+ 1 (* ?x85 ?x85 ?x129 ?x129 ?x129) y ?x270 ?x401 (* ?x85 ?x85 ?x85))))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x312 (+ x ?x69 ?x76 y)))
 (let ((?x256 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x133 (+ 1 x)))
 (let ((?x400 (+ (- 1) y)))
 (let ((?x364 (* ?x400 ?x400 ?x400 ?x133 ?x133 ?x133)))
 (let ((?x97 (+ (- 1) (* ?x400 ?x400 ?x400 ?x133 ?x133) y ?x364 ?x256 (* ?x133 ?x133 ?x133))))
 (and (= ?x312 0) (or (not (= (* ?x312 ?x97) 0)) (not (= (* ?x312 ?x353) 0))))))))))))))))) :qid k!27))
 ))
 (let ((?x242 (lambda ((x Int) (y Int) )(let ((?x409 (* x x x)))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x270 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x225 (* x x y y)))
 (let ((?x391 (* 2 ?x225)))
 (let ((?x210 (* x x y)))
 (let ((?x206 (* x y)))
 (let ((?x201 (* x x)))
 (let ((?x426 (* (- 3) ?x201)))
 (let ((?x190 (* x x y y y)))
 (let ((?x188 (* x y y y)))
 (let ((?x262 (* (- 2) ?x188)))
 (let ((?x184 (* y y y)))
 (let ((?x177 (* y y)))
 (let ((?x390 (* 2 ?x177)))
 (let ((?x284 (* 2 y)))
 (let ((?x437 (* 3 x)))
 (let ((?x438 (+ ?x437 ?x284 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x390 (* (- 1) (* x 1 y y)) ?x184 ?x262 ?x190 ?x426 ?x206 ?x210 (* (- 1) (* x y y)) ?x391 ?x270 (* (- 1) (* x (- 1))) ?x409)))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x90 (+ x y ?x69 ?x76)))
 (let (($x444 (not (= (* ?x90 ?x438) 0))))
 (let ((?x133 (+ 1 x)))
 (let ((?x400 (+ (- 1) y)))
 (let ((?x364 (* ?x400 ?x400 ?x400 ?x133 ?x133 ?x133)))
 (let ((?x621 (* (- 4) ?x225)))
 (let ((?x516 (* 2 ?x188)))
 (let ((?x606 (* 5 y)))
 (let ((?x198 (* (- 1) x)))
 (let ((?x578 (+ (- 2) ?x198 ?x606 (* (- 1) (* y (- 1) x x)) (* (- 1) (* y (- 1) 1 x)) (* (- 3) ?x177) ?x184 ?x516 ?x190 ?x201 (* 8 ?x206) (* 4 ?x210) (* (- 1) (* y y 1 x)) (* (- 6) (* x y y)) ?x621 (* (- 1) (* y y 1 1)) (* (- 1) (* y (- 1) x 1)) (* (- 1) (* y (- 1) 1 1)) (* (- 1) (* y y x 1)) ?x364 ?x409)))
 (let (($x95 (= ?x90 0)))
 (let (($x691 (and $x95 (or (not (= (* ?x90 ?x578) 0)) $x444))))
 (let ((?x353 (+ 1 (* ?x85 ?x85 ?x129 ?x129 ?x129) y ?x270 (* (- 1) (* ?x85 ?x85 ?x129 ?x129)) (* ?x85 ?x85 ?x85))))
 (let ((?x312 (+ x ?x69 ?x76 y)))
 (let ((?x97 (+ (- 1) (* ?x400 ?x400 ?x400 ?x133 ?x133) y ?x364 (* (- 1) (* ?x400 ?x400 ?x133 ?x133)) (* ?x133 ?x133 ?x133))))
 (let (($x367 (and (= ?x312 0) (or (not (= (* ?x312 ?x97) 0)) (not (= (* ?x312 ?x353) 0))))))
 (rewrite (= $x367 $x691))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x66 (exists ((x Int) (y Int) )(! (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x56 (+ (* ?x49 ?x49 ?x52 ?x52 ?x52) ?x52 (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ (- ?x56 (* ?x49 ?x49 ?x52 ?x52)) (* ?x49 ?x49 ?x49)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) y 1 (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ (- ?x41 (* ?x34 ?x34 ?x38 ?x38)) (* ?x34 ?x34 ?x34)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0)))))))))))) :qid k!27))
 ))
 (let ((?x511 (lambda ((x Int) (y Int) )(let ((?x401 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x129 (+ 1 y)))
 (let ((?x85 (+ (- 1) x)))
 (let ((?x270 (* ?x85 ?x85 ?x85 ?x129 ?x129 ?x129)))
 (let ((?x353 (+ 1 (* ?x85 ?x85 ?x129 ?x129 ?x129) y ?x270 ?x401 (* ?x85 ?x85 ?x85))))
 (let ((?x76 (* (- 1) x00)))
 (let ((?x69 (* (- 1) y00)))
 (let ((?x312 (+ x ?x69 ?x76 y)))
 (let ((?x256 (* (- 1) (* (+ (- 1) y) (+ (- 1) y) (+ 1 x) (+ 1 x)))))
 (let ((?x133 (+ 1 x)))
 (let ((?x400 (+ (- 1) y)))
 (let ((?x364 (* ?x400 ?x400 ?x400 ?x133 ?x133 ?x133)))
 (let ((?x97 (+ (- 1) (* ?x400 ?x400 ?x400 ?x133 ?x133) y ?x364 ?x256 (* ?x133 ?x133 ?x133))))
 (let (($x367 (and (= ?x312 0) (or (not (= (* ?x312 ?x97) 0)) (not (= (* ?x312 ?x353) 0))))))
 (let ((?x52 (- y 1)))
 (let ((?x49 (+ x 1)))
 (let ((?x56 (+ (* ?x49 ?x49 ?x52 ?x52 ?x52) ?x52 (* ?x49 ?x49 ?x49 ?x52 ?x52 ?x52))))
 (let ((?x61 (* (+ (- (- ?x49 y00) x00) ?x52) (+ (- ?x56 (* ?x49 ?x49 ?x52 ?x52)) (* ?x49 ?x49 ?x49)))))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) y 1 (* ?x34 ?x34 ?x34 ?x38 ?x38 ?x38))))
 (let ((?x46 (* (+ (- (- ?x34 y00) x00) y 1) (+ (- ?x41 (* ?x34 ?x34 ?x38 ?x38)) (* ?x34 ?x34 ?x34)))))
 (let (($x65 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x61 0))))))
 (rewrite (= $x65 $x367))))))))))))))))))))))))))
 ))
 (let ((@x67 (asserted $x66)))
 (let ((@x342 (mp (mp @x67 (quant-intro (proof-bind ?x511) (= $x66 $x361)) $x361) (rewrite (= $x361 $x361)) $x361)))
 (let ((@x584 (mp (mp @x342 (quant-intro (proof-bind ?x242) (= $x361 $x180)) $x180) (quant-intro (proof-bind ?x585) (= $x180 $x545)) $x545)))
 (let ((@x104 (mp (mp~ @x584 (sk (~ $x545 $x503)) $x503) (rewrite (= $x503 $x633)) $x633)))
 (let ((@x80 (and-elim @x104 $x211)))
 (let ((@x431 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x211) $x565)) @x80 $x565)))
 (let (($x159 (<= ?x549 0)))
 (let ((@x408 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x211) $x159)) @x80 $x159)))
 (let (($x536 (not (<= ?x455 0))))
 (let (($x556 (>= ?x455 0)))
 (let (($x624 (>= ?x396 0)))
 (let (($x555 (<= ?x396 0)))
 (let ((@x656 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x100 (not $x555) (not $x624))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x555)) @x408 @x431 false) $x555) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x624)) @x408 @x431 false) $x624) $x100)))
 (let ((@x118 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x512 $x536 (not $x556))) (unit-resolution (and-elim @x104 $x513) @x656 $x416) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x556)) @x408 @x431 false) $x556) $x536)))
 ((_ th-lemma arith farkas 1 1 1) @x118 @x408 @x431 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             176
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 37
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.67
 :memory                    3.18
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1231374
 :num-checks                1
 :propagations              14
 :rlimit-count              3257
 :time                      0.01
 :total-time                0.01)
