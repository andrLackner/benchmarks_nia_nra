unsat
((set-logic NIA)
(proof
(let (($x59 (exists ((q Int) (r Int) (y Int) )(! (let ((?x43 (+ q 1)))
 (let ((?x50 (* ?x43 y00 y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y00)))
 (let ((?x48 (* ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x46 (* ?x43 ?x44 y00 y00)))
 (let ((?x45 (* ?x43 ?x44)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x51 (- ?x47 ?x48)))
 (let ((?x52 (- ?x51 ?x49)))
 (let ((?x53 (- ?x52 ?x50)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x54 (* ?x42 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x57)))))))))))))))))))) :qid k!29))
 ))
 (let (($x412 (= $x59 false)))
 (let (($x405 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x411 (elim-unused (= $x405 false))))
 (let (($x408 (= $x59 $x405)))
 (let ((?x511 (lambda ((q Int) (r Int) (y Int) )(let ((?x43 (+ q 1)))
 (let ((?x50 (* ?x43 y00 y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x49 (* ?x44 ?x44 ?x44 y00)))
 (let ((?x48 (* ?x43 ?x44 ?x44 y00 y00 y00)))
 (let ((?x46 (* ?x43 ?x44 y00 y00)))
 (let ((?x45 (* ?x43 ?x44)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x51 (- ?x47 ?x48)))
 (let ((?x52 (- ?x51 ?x49)))
 (let ((?x53 (- ?x52 ?x50)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x54 (* ?x42 ?x53)))
 (let (($x55 (= ?x54 0)))
 (let (($x56 (not $x55)))
 (let (($x57 (or $x56)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x58 (and $x33 $x41 $x57)))
 (let (($x403 (= $x58 false)))
 (let (($x442 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x86 (= (+ (* (- 1) y00) y) 0)))
 (let (($x505 (and $x86 $x442 false)))
 (let (($x396 (= $x57 false)))
 (let ((@x395 (rewrite (= (or false) false))))
 (let (($x391 (or false)))
 (let (($x392 (= $x57 $x391)))
 (let (($x389 (= $x56 false)))
 (let ((@x388 (rewrite (= (not true) false))))
 (let (($x384 (not true)))
 (let (($x385 (= $x56 $x384)))
 (let (($x382 (= $x55 true)))
 (let ((@x381 (rewrite (= (= 0 0) true))))
 (let (($x377 (= 0 0)))
 (let (($x378 (= $x55 $x377)))
 (let ((?x81 (+ 1 q)))
 (let ((?x474 (* y00 y00 y00 ?x81)))
 (let ((?x482 (* (- 1) ?x474)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x84 (+ r ?x64)))
 (let ((?x455 (* y00 ?x84 ?x84 ?x84)))
 (let ((?x463 (* (- 1) ?x455)))
 (let ((?x425 (* y00 y00 y00 ?x81 ?x84 ?x84)))
 (let ((?x441 (* (- 1) ?x425)))
 (let ((?x415 (* y00 y00 ?x81 ?x84)))
 (let ((?x90 (* ?x81 ?x84)))
 (let ((?x488 (+ ?x90 ?x415 ?x441 ?x463 ?x482)))
 (let ((?x493 (* 0 ?x488)))
 (let ((?x469 (+ ?x90 ?x415 ?x441 ?x463)))
 (let ((?x483 (+ ?x469 ?x482)))
 (let ((?x479 (- ?x469 ?x474)))
 (let ((@x83 (rewrite (= ?x43 ?x81))))
 (let ((@x341 (monotonicity @x83 (= ?x50 (* ?x81 y00 y00 y00)))))
 (let ((@x478 (trans @x341 (rewrite (= (* ?x81 y00 y00 y00) ?x474)) (= ?x50 ?x474))))
 (let ((@x466 (rewrite (= (- (+ ?x90 ?x415 ?x441) ?x455) (+ (+ ?x90 ?x415 ?x441) ?x463)))))
 (let ((@x89 (rewrite (= ?x44 ?x84))))
 (let ((@x243 (monotonicity @x89 @x89 @x89 (= ?x49 (* ?x84 ?x84 ?x84 y00)))))
 (let ((@x459 (trans @x243 (rewrite (= (* ?x84 ?x84 ?x84 y00) ?x455)) (= ?x49 ?x455))))
 (let ((@x154 (monotonicity @x83 @x89 @x89 (= ?x48 (* ?x81 ?x84 ?x84 y00 y00 y00)))))
 (let ((@x436 (trans @x154 (rewrite (= (* ?x81 ?x84 ?x84 y00 y00 y00) ?x425)) (= ?x48 ?x425))))
 (let ((@x440 (monotonicity (rewrite (= ?x47 (+ ?x90 ?x415))) @x436 (= ?x51 (- (+ ?x90 ?x415) ?x425)))))
 (let ((@x449 (trans @x440 (rewrite (= (- (+ ?x90 ?x415) ?x425) (+ (+ ?x90 ?x415) ?x441))) (= ?x51 (+ (+ ?x90 ?x415) ?x441)))))
 (let ((@x454 (trans @x449 (rewrite (= (+ (+ ?x90 ?x415) ?x441) (+ ?x90 ?x415 ?x441))) (= ?x51 (+ ?x90 ?x415 ?x441)))))
 (let ((@x468 (trans (monotonicity @x454 @x459 (= ?x52 (- (+ ?x90 ?x415 ?x441) ?x455))) @x466 (= ?x52 (+ (+ ?x90 ?x415 ?x441) ?x463)))))
 (let ((@x473 (trans @x468 (rewrite (= (+ (+ ?x90 ?x415 ?x441) ?x463) ?x469)) (= ?x52 ?x469))))
 (let ((@x487 (trans (monotonicity @x473 @x478 (= ?x53 ?x479)) (rewrite (= ?x479 ?x483)) (= ?x53 ?x483))))
 (let ((@x78 (trans (monotonicity (rewrite (= ?x30 ?x64)) (= ?x42 (+ ?x64 y00))) (rewrite (= (+ ?x64 y00) 0)) (= ?x42 0))))
 (let ((@x495 (monotonicity @x78 (trans @x487 (rewrite (= ?x483 ?x488)) (= ?x53 ?x488)) (= ?x54 ?x493))))
 (let ((@x500 (trans (monotonicity (trans @x495 (rewrite (= ?x493 0)) $x55) $x378) @x381 $x382)))
 (let ((@x504 (trans (monotonicity (trans (monotonicity @x500 $x385) @x388 $x389) $x392) @x395 $x396)))
 (let ((@x507 (monotonicity (rewrite (= $x33 $x86)) (rewrite (= $x41 $x442)) @x504 (= $x58 $x505))))
 (trans @x507 (rewrite (= $x505 false)) $x403))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (mp @x60 (trans (quant-intro (proof-bind ?x511) $x408) @x411 $x412) false))))))))))

(:max-memory   3.38
 :memory       3.07
 :mk-bool-var  5
 :num-allocs   918305
 :rlimit-count 321
 :time         0.01
 :total-time   0.01)
