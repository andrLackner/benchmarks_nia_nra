unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x179 (* (- 3) c!3)))
 (let ((?x314 (* (- 3) k!2)))
 (let ((?x356 (* n!0 k!2)))
 (let ((?x328 (* 2 n!0)))
 (let ((?x130 (+ 3 ?x328 (* n!0 m!1) ?x356 ?x314 ?x179)))
 (let (($x121 (<= ?x130 0)))
 (let ((?x221 (* (- 1) k!2)))
 (let ((?x280 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x221)))
 (let (($x134 (<= ?x280 (- 1))))
 (let (($x278 (= ?x280 (- 1))))
 (let ((?x151 (+ k!2 c!3)))
 (let ((?x310 (+ m!1 k!2)))
 (let ((?x391 (+ 6 m!1)))
 (let ((?x390 (+ 1 n!0)))
 (let ((?x123 (* ?x390 ?x390 ?x390 ?x391 ?x391 ?x310 ?x310 ?x151 ?x151 ?x130)))
 (let (($x142 (= ?x123 0)))
 (let (($x122 (not $x142)))
 (let ((?x219 (+ ?x328 ?x356 ?x221 ?x179)))
 (let (($x216 (= ?x219 (- 1))))
 (let ((?x195 (* k!2 k!2)))
 (let ((?x322 (+ (* 9 n!0) ?x195 (* (- 9) (* n!0 c!3)) (* (- 5) k!2) (* (- 18) c!3))))
 (let ((?x288 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x211 (= ?x288 (- 6))))
 (let (($x136 (and $x211 (= ?x322 (- 4)) $x216 $x278 $x122)))
 (let ((?x326 (+ c!3 k!2)))
 (let ((?x245 (+ k!2 m!1)))
 (let ((?x331 (* ?x390 ?x390 ?x390 ?x391 ?x391 ?x245 ?x245 ?x326 ?x326 (+ 3 ?x179 ?x314 ?x328 (* k!2 n!0) (* m!1 n!0)))))
 (let (($x271 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x181 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x195) (* 9 (* c!3 n!0)))))
 (let (($x127 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x181 4) $x271 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x331 0)))))
 (let (($x184 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x402 (+ 3 ?x214 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x95 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x402) 0))))
 (let (($x291 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x253 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x205 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x201 (= ?x205 4)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 $x201 $x253 $x291 $x95))))))))))))))))) :qid k!34))
 ))
 (let (($x167 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x408 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (and $x117 (= ?x408 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))))))))))))) :qid k!34))
 ))
 (let ((?x164 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x402 (+ 3 ?x214 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x95 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x402) 0))))
 (let (($x291 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x253 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x205 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) (* k k)) (* 9 (* c n)))))
 (let (($x201 (= ?x205 4)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x101 (and $x117 $x201 $x253 $x291 $x95)))
 (let ((?x511 (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 (+ 3 ?x214 (* (- 4) k) (* ?x334 ?x71) (* (- 1) m) ?x59))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x408 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x190 (and $x117 (= ?x408 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 (not (= ?x511 0)))))
 (rewrite (= $x190 $x101))))))))))))))))))))))))))
 ))
 (let (($x84 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x81 (not (= (* ?x77 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72 ?x72) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x81))))))))))))))) :qid k!34))
 ))
 (let ((?x169 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x214 (* (- 3) c)))
 (let ((?x522 (+ 3 ?x214 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x407 (+ 6 m)))
 (let ((?x334 (+ 1 n)))
 (let (($x166 (not (= (* ?x334 ?x334 ?x334 ?x407 ?x407 ?x71 ?x71 ?x68 ?x68 ?x522) 0))))
 (let (($x145 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x408 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x117 (= (+ m (* (- 6) n)) 6)))
 (let (($x190 (and $x117 (= ?x408 (- 4)) (= (+ ?x214 (* n k) (* (- 1) k) ?x59) (- 1)) $x145 $x166)))
 (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x81 (not (= (* ?x77 ?x68 ?x68 ?x71 ?x71 ?x78 ?x78 ?x72 ?x72 ?x72) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x83 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x81))))
 (rewrite (= $x83 $x190))))))))))))))))))))))))))
 ))
 (let ((@x85 (asserted $x84)))
 (let ((@x269 (mp (mp @x85 (quant-intro (proof-bind ?x169) (= $x84 $x167)) $x167) (rewrite (= $x167 $x167)) $x167)))
 (let ((@x369 (mp~ (mp @x269 (quant-intro (proof-bind ?x164) (= $x167 $x184)) $x184) (sk (~ $x184 $x127)) $x127)))
 (let ((@x525 (mp @x369 (rewrite (= $x127 $x136)) $x136)))
 (let ((@x286 (and-elim @x525 $x278)))
 (let ((@x348 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x278) $x134)) @x286 $x134)))
 (let (($x157 (>= ?x280 (- 1))))
 (let ((@x397 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x278) $x157)) @x286 $x157)))
 (let (($x148 (<= ?x219 (- 1))))
 (let ((@x289 (and-elim @x525 $x216)))
 (let ((@x381 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x216) $x148)) @x289 $x148)))
 (let (($x137 (>= ?x219 (- 1))))
 (let ((@x379 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x216) $x137)) @x289 $x137)))
 (let (($x161 (<= ?x288 (- 6))))
 (let ((@x131 (and-elim @x525 $x211)))
 (let ((@x364 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x211) $x161)) @x131 $x161)))
 (let (($x147 (>= ?x288 (- 6))))
 (let ((@x135 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x211) $x147)) @x131 $x147)))
 (let ((@x376 ((_ th-lemma arith) (hypothesis (not $x121)) @x135 @x364 @x379 @x381 @x397 @x348 false)))
 (let ((@x375 (lemma @x376 $x121)))
 (let (($x251 (>= ?x130 0)))
 (let ((@x208 ((_ th-lemma arith) (hypothesis (not $x251)) @x135 @x364 @x397 @x348 @x379 @x381 @x135 @x364 false)))
 (let ((@x512 (lemma @x208 $x251)))
 (let (($x465 (not (<= ?x123 0))))
 (let (($x232 (>= ?x123 0)))
 (let ((@x277 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x232)) (hypothesis $x251) (hypothesis $x121) false)))
 (let ((@x283 (unit-resolution (lemma @x277 (or (not $x121) $x232 (not $x251))) @x375 (or $x232 (not $x251)))))
 (let ((@x439 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x142 $x465 (not $x232))) (and-elim @x525 $x122) (or $x465 (not $x232)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x439 (unit-resolution @x283 @x512 $x232) $x465) @x512 @x375 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 13
 :arith-assert-diseq        5
 :arith-assert-lower        75
 :arith-assert-upper        48
 :arith-branch-var          5
 :arith-conflicts           13
 :arith-eq-adapter          9
 :arith-fixed-eqs           9
 :arith-gcd-tests           29
 :arith-gomory-cuts         3
 :arith-grobner             9
 :arith-ineq-splits         5
 :arith-max-min             445
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    84
 :arith-num-rows            11
 :arith-offset-eqs          1
 :arith-patches             11
 :arith-patches_succ        2
 :arith-pivots              107
 :arith-pseudo-nonlinear    6
 :arith-row-summations      306
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    11
 :conflicts                 13
 :decisions                 24
 :del-clause                27
 :final-checks              29
 :max-memory                19.58
 :memory                    19.09
 :minimized-lits            3
 :mk-bool-var               55
 :mk-clause                 42
 :num-allocs                559487
 :num-checks                1
 :propagations              25
 :rlimit-count              24904
 :time                      0.01
 :total-time                0.02)
