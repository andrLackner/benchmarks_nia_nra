unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x399 (* (- 3) c!3)))
 (let ((?x398 (* (- 3) k!2)))
 (let ((?x205 (* n!0 k!2)))
 (let ((?x391 (* 2 n!0)))
 (let ((?x550 (+ 3 ?x391 ?x205 ?x398 ?x399 (* n!0 m!1))))
 (let (($x349 (<= ?x550 0)))
 (let ((?x385 (* (- 1) k!2)))
 (let ((?x453 (+ (* 3 n!0) (* 3 (* n!0 n!0)) ?x385)))
 (let (($x543 (<= ?x453 (- 1))))
 (let (($x242 (= ?x453 (- 1))))
 (let ((?x368 (+ k!2 c!3)))
 (let ((?x212 (+ 6 m!1)))
 (let ((?x378 (* k!2 k!2)))
 (let ((?x231 (* (- 6) ?x378)))
 (let ((?x560 (+ (* (- 6) (* n!0 m!1 c!3)) (* (- 1) (* m!1 k!2 c!3)) (* (- 6) (* n!0 m!1 k!2)) (* (- 6) (* k!2 c!3)) (* (- 6) (* n!0 k!2 c!3)) (* (- 1) (* m!1 m!1 k!2)) (* (- 1) (* m!1 m!1 c!3)) (* (- 6) (* m!1 c!3)) (* (+ 1 n!0) (+ 1 n!0) (+ 1 n!0) ?x212 ?x368 ?x368) (* (- 1) (* m!1 k!2 k!2)) ?x231 (* (- 6) (* m!1 k!2)) (* (- 6) (* n!0 k!2 k!2)) (* (- 1) (* n!0 m!1 k!2 c!3)) (* (- 1) (* ?x212 ?x212 (+ m!1 k!2) ?x368 ?x368 ?x368)) (* (- 1) (* n!0 m!1 m!1 c!3)) (* (- 1) (* n!0 m!1 m!1 k!2)) (* (- 1) (* n!0 m!1 k!2 k!2)))))
 (let ((?x545 (* ?x560 ?x550)))
 (let (($x555 (= ?x545 0)))
 (let (($x542 (not $x555)))
 (let ((?x314 (+ ?x391 ?x205 ?x385 ?x399)))
 (let (($x337 (= ?x314 (- 1))))
 (let ((?x172 (+ (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) ?x378 (* (- 9) (* n!0 c!3)))))
 (let ((?x417 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x154 (= ?x417 (- 6))))
 (let (($x553 (and $x154 (= ?x172 (- 4)) $x337 $x242 $x542)))
 (let ((?x294 (+ c!3 k!2)))
 (let ((?x321 (+ ?x231 (* (- 6) (* k!2 m!1 n!0)) (* (- 6) (* c!3 k!2)) (* (- 6) (* c!3 k!2 n!0)) (* (- 1) (* k!2 m!1 m!1)) (* (- 1) (* c!3 k!2 m!1)) (* (- 6) (* k!2 m!1)) (* (- 1) (* k!2 k!2 m!1)) (* (- 6) (* c!3 m!1 n!0)) (* (- 1) (* c!3 m!1 m!1)) (* (- 6) (* c!3 m!1)) (* (- 6) (* k!2 k!2 n!0)) (* (+ 1 n!0) (+ 1 n!0) (+ 1 n!0) ?x212 ?x294 ?x294) (* (- 1) (* ?x212 ?x212 (+ k!2 m!1) ?x294 ?x294 ?x294)) (* (- 1) (* c!3 k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 m!1 n!0)) (* (- 1) (* c!3 m!1 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1 n!0)))))
 (let (($x400 (= (* ?x321 (+ 3 ?x399 ?x398 ?x391 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let (($x289 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x146 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x378) (* 9 (* c!3 n!0)))))
 (let (($x469 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x146 4) $x289 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x400))))
 (let (($x255 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x452 (* (- 1) (* k m m n))))
 (let ((?x450 (* (- 1) (* c m m n))))
 (let ((?x448 (* (- 1) (* k k m n))))
 (let ((?x446 (* (- 1) (* c k m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x415 (+ 6 m)))
 (let ((?x392 (* (- 1) (* ?x415 ?x415 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x340 (+ 1 n)))
 (let ((?x406 (* ?x340 ?x340 ?x340 ?x415 ?x68 ?x68)))
 (let ((?x495 (+ (* (- 6) (* k k)) (* (- 6) (* k m n)) (* (- 6) (* c k)) (* (- 6) (* c k n)) (* (- 1) (* k m m)) (* (- 1) (* c k m)) (* (- 6) (* k m)) (* (- 1) (* k k m)) (* (- 6) (* c m n)) (* (- 1) (* c m m)) (* (- 6) (* c m)) (* (- 6) (* k k n)) ?x406 ?x392 ?x446 ?x448 ?x450 ?x452)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 $x207 $x259 $x297 (not (= (* ?x495 ?x408) 0))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x354 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x415 (+ 6 m)))
 (let ((?x392 (* (- 1) (* ?x415 ?x415 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x340 (+ 1 n)))
 (let ((?x406 (* ?x340 ?x340 ?x340 ?x415 ?x68 ?x68)))
 (let (($x155 (not (= (* (+ (* (- 1) (* ?x340 ?x415 ?x71 ?x68)) ?x406 ?x392) ?x367) 0))))
 (let (($x141 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x187 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x187 $x141 $x155))))))))))))))))))) :qid k!34))
 ))
 (let ((?x257 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x408 (+ 3 ?x220 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x452 (* (- 1) (* k m m n))))
 (let ((?x450 (* (- 1) (* c m m n))))
 (let ((?x448 (* (- 1) (* k k m n))))
 (let ((?x446 (* (- 1) (* c k m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x415 (+ 6 m)))
 (let ((?x392 (* (- 1) (* ?x415 ?x415 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x340 (+ 1 n)))
 (let ((?x406 (* ?x340 ?x340 ?x340 ?x415 ?x68 ?x68)))
 (let ((?x495 (+ (* (- 6) (* k k)) (* (- 6) (* k m n)) (* (- 6) (* c k)) (* (- 6) (* c k n)) (* (- 1) (* k m m)) (* (- 1) (* c k m)) (* (- 6) (* k m)) (* (- 1) (* k k m)) (* (- 6) (* c m n)) (* (- 1) (* c m m)) (* (- 6) (* c m)) (* (- 6) (* k k n)) ?x406 ?x392 ?x446 ?x448 ?x450 ?x452)))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x472 (and $x123 $x207 $x259 $x297 (not (= (* ?x495 ?x408) 0)))))
 (let ((?x476 (* (+ (* (- 1) (* ?x340 ?x415 ?x71 ?x68)) ?x406 ?x392) (+ 3 ?x220 (* (- 4) k) (* ?x340 ?x71) (* (- 1) m) ?x59))))
 (let (($x155 (not (= ?x476 0))))
 (let (($x141 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x187 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x412 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x187 $x141 $x155)))
 (rewrite (= $x412 $x472)))))))))))))))))))))))))))))))))
 ))
 (let (($x156 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x415 (+ 6 m)))
 (let ((?x392 (* (- 1) (* ?x415 ?x415 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x340 (+ 1 n)))
 (let ((?x406 (* ?x340 ?x340 ?x340 ?x415 ?x68 ?x68)))
 (let (($x155 (not (= (* (+ (* (- 1) (* ?x340 ?x415 ?x71 ?x68)) ?x406 ?x392) ?x367) 0))))
 (let (($x141 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (and $x123 (= ?x329 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x141 $x155)))))))))))))))) :qid k!34))
 ))
 (let ((?x355 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x415 (+ 6 m)))
 (let ((?x392 (* (- 1) (* ?x415 ?x415 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x340 (+ 1 n)))
 (let ((?x406 (* ?x340 ?x340 ?x340 ?x415 ?x68 ?x68)))
 (let (($x155 (not (= (* (+ (* (- 1) (* ?x340 ?x415 ?x71 ?x68)) ?x406 ?x392) ?x367) 0))))
 (let (($x141 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x187 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x412 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x187 $x141 $x155)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x179 (and $x123 (= ?x329 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x141 $x155)))
 (rewrite (= $x179 $x412)))))))))))))))))))))))))
 ))
 (let (($x90 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x82 (+ (* (- 1) ?x68 ?x71 ?x79 (+ n 1)) (* ?x68 ?x68 ?x79 (+ n 1) (+ n 1) (+ n 1)))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let (($x87 (not (= (* ?x77 (- ?x82 (* ?x68 ?x68 ?x68 ?x71 ?x79 ?x79))) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x87))))))))))))))) :qid k!34))
 ))
 (let ((?x158 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x220 (* (- 3) c)))
 (let ((?x367 (+ 3 ?x220 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x415 (+ 6 m)))
 (let ((?x392 (* (- 1) (* ?x415 ?x415 ?x71 ?x68 ?x68 ?x68))))
 (let ((?x340 (+ 1 n)))
 (let ((?x406 (* ?x340 ?x340 ?x340 ?x415 ?x68 ?x68)))
 (let (($x155 (not (= (* (+ (* (- 1) (* ?x340 ?x415 ?x71 ?x68)) ?x406 ?x392) ?x367) 0))))
 (let (($x141 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x329 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m (* (- 6) n)) 6)))
 (let (($x179 (and $x123 (= ?x329 (- 4)) (= (+ ?x220 (* n k) (* (- 1) k) ?x59) (- 1)) $x141 $x155)))
 (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x82 (+ (* (- 1) ?x68 ?x71 ?x79 ?x72) (* ?x68 ?x68 ?x79 ?x72 ?x72 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x87 (not (= (* ?x77 (- ?x82 (* ?x68 ?x68 ?x68 ?x71 ?x79 ?x79))) 0))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x89 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or $x87))))
 (rewrite (= $x89 $x179)))))))))))))))))))))))))))))
 ))
 (let ((@x91 (asserted $x90)))
 (let ((@x345 (mp (mp @x91 (quant-intro (proof-bind ?x158) (= $x90 $x156)) $x156) (rewrite (= $x156 $x156)) $x156)))
 (let ((@x200 (mp (mp @x345 (quant-intro (proof-bind ?x355) (= $x156 $x354)) $x354) (quant-intro (proof-bind ?x257) (= $x354 $x255)) $x255)))
 (let ((@x365 (mp (mp~ @x200 (sk (~ $x255 $x469)) $x469) (rewrite (= $x469 $x553)) $x553)))
 (let ((@x224 (and-elim @x365 $x242)))
 (let ((@x214 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x242) $x543)) @x224 $x543)))
 (let (($x556 (>= ?x453 (- 1))))
 (let ((@x384 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x242) $x556)) @x224 $x556)))
 (let (($x360 (<= ?x314 (- 1))))
 (let ((@x223 (and-elim @x365 $x337)))
 (let ((@x548 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x337) $x360)) @x223 $x360)))
 (let (($x352 (>= ?x314 (- 1))))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x337) $x352)) @x223 $x352)))
 (let (($x353 (<= ?x417 (- 6))))
 (let ((@x549 (and-elim @x365 $x154)))
 (let ((@x533 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x353)) @x549 $x353)))
 (let (($x505 (>= ?x417 (- 6))))
 (let ((@x534 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x505)) @x549 $x505)))
 (let ((@x366 ((_ th-lemma arith) (hypothesis (not $x349)) @x534 @x533 @x371 @x548 @x384 @x214 false)))
 (let ((@x143 (lemma @x366 $x349)))
 (let (($x174 (>= ?x550 0)))
 (let ((@x544 ((_ th-lemma arith) (hypothesis (not $x174)) @x534 @x533 @x371 @x548 @x384 @x214 false)))
 (let ((@x320 (lemma @x544 $x174)))
 (let (($x333 (not (<= ?x545 0))))
 (let (($x557 (>= ?x545 0)))
 (let (($x116 (= ?x550 0)))
 (let ((@x477 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x116 (not $x349) (not $x174))) @x320 (or $x116 (not $x349)))))
 (let ((@x474 (hypothesis $x116)))
 (let ((@x546 ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x557)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x116) $x174)) @x474 $x174) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x116) $x349)) @x474 $x349) false)))
 (let ((@x522 (unit-resolution (lemma @x546 (or (not $x116) $x557)) (unit-resolution @x477 @x143 $x116) $x557)))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x555 $x333 (not $x557))) (and-elim @x365 $x542) (or $x333 (not $x557)))))
 ((_ th-lemma arith farkas 1 1 1) (unit-resolution @x394 @x522 $x333) @x320 @x143 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 17
 :arith-assert-diseq        5
 :arith-assert-lower        57
 :arith-assert-upper        52
 :arith-branch-var          3
 :arith-conflicts           7
 :arith-eq-adapter          9
 :arith-fixed-eqs           9
 :arith-gcd-tests           18
 :arith-gomory-cuts         1
 :arith-grobner             4
 :arith-ineq-splits         3
 :arith-max-min             684
 :arith-nonlinear-bounds    33
 :arith-nonlinear-horner    47
 :arith-num-rows            11
 :arith-offset-eqs          1
 :arith-patches             6
 :arith-pivots              45
 :arith-pseudo-nonlinear    11
 :arith-row-summations      242
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    11
 :conflicts                 7
 :decisions                 16
 :del-clause                30
 :final-checks              19
 :max-memory                3.69
 :memory                    3.11
 :mk-bool-var               47
 :mk-clause                 39
 :num-allocs                2845745
 :num-checks                1
 :propagations              28
 :rlimit-count              51432
 :time                      0.03
 :total-time                0.03)
