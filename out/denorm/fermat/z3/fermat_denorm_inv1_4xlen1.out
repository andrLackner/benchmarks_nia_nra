unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x181 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x424 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 ?x181 (* (- 4) r!2) (* (- 2) u!1) (* 2 v!0) (* (- 1) (* v!0 v!0)))))
 (let (($x348 (>= ?x424 0)))
 (let (($x427 (= ?x424 0)))
 (let ((?x376 (* v!0 v!0)))
 (let ((?x302 (* (- 2) v!0)))
 (let ((?x230 (* 2 u!1)))
 (let ((?x394 (* 4 r!2)))
 (let ((?x380 (* (- 1) ?x181)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x397 (+ ?x96 ?x112 ?x41 ?x46 ?x188 ?x380 ?x394 ?x230 ?x302 ?x376)))
 (let ((?x254 (+ r!2 (* (- 1) v!0))))
 (let ((?x387 (+ 2 v!0)))
 (let ((?x422 (* ?x387 ?x387 ?x387 ?x387 ?x387 ?x387 ?x387 ?x254 ?x254 ?x254 ?x254 ?x254 ?x397 u!1 u!1 u!1 u!1 u!1)))
 (let (($x426 (= ?x422 0)))
 (let (($x419 (not $x426)))
 (let ((?x186 (+ r!2 u!1)))
 (let ((?x178 (+ 2 u!1)))
 (let ((?x432 (* ?x178 ?x178 ?x178 ?x178 ?x178 ?x186 ?x186 ?x186 ?x186 ?x186 ?x397 v!0 v!0 v!0 v!0 v!0 v!0 v!0)))
 (let (($x433 (= ?x432 0)))
 (let (($x418 (or (not $x433) $x419)))
 (let (($x415 (and $x427 $x418)))
 (let ((?x117 (+ ?x394 ?x230 ?x302 ?x96 ?x112 ?x41 ?x380 ?x376 ?x46 ?x188)))
 (let ((?x193 (* ?x178 ?x178 ?x178 ?x178 ?x178 ?x186 ?x186 ?x186 ?x186 ?x186 ?x117 v!0 v!0 v!0 v!0 v!0 v!0 v!0)))
 (let ((?x375 (* ?x387 ?x387 ?x387 ?x387 ?x387 ?x387 ?x387 ?x254 ?x254 ?x254 ?x254 ?x254 ?x117 u!1 u!1 u!1 u!1 u!1)))
 (let (($x395 (and (= ?x117 0) (or (not (= ?x375 0)) (not (= ?x193 0))))))
 (let (($x390 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let ((?x368 (* ?x217 ?x217 ?x217 ?x217 ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v v v v)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x184 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u u u u u)))
 (let (($x199 (= ?x194 0)))
 (and $x199 (or (not (= ?x184 0)) (not (= ?x368 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x201 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x488 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let ((?x453 (* ?x217 ?x217 ?x217 ?x217 ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x488 v v v v v v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x224 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u u u u u)))
 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not (= ?x224 0)) (not (= ?x453 0)))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x392 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x194 (+ ?x28 ?x36 ?x142 ?x96 ?x112 ?x41 ?x166 ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let ((?x368 (* ?x217 ?x217 ?x217 ?x217 ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x194 v v v v v v v)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x184 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x194 u u u u u)))
 (let (($x199 (= ?x194 0)))
 (let (($x428 (and $x199 (or (not (= ?x184 0)) (not (= ?x368 0))))))
 (let ((?x488 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* ?x217 ?x217)) ?x45 ?x46 ?x188)))
 (let ((?x453 (* ?x217 ?x217 ?x217 ?x217 ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x488 v v v v v v v)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* ?x206 ?x206) ?x46 ?x188)))
 (let ((?x224 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u u u u u)))
 (let (($x436 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not (= ?x224 0)) (not (= ?x453 0))))))
 (rewrite (= $x436 $x428)))))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((r Int) (u Int) (v Int) )(! (let ((?x74 (+ u 2)))
 (let ((?x70 (+ r u)))
 (let ((?x66 (- 1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x66 ?x70 ?x70 ?x70 v v ?x74 ?x74 v v ?x66 ?x74 v v v ?x66 ?x70 ?x70 ?x74 ?x74)))
 (let ((?x52 (- r v)))
 (let ((?x57 (+ v 2)))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x66 ?x52 ?x52 ?x52 ?x57 ?x57 u u ?x57 ?x57 ?x66 u ?x57 ?x57 ?x57 ?x66 ?x52 ?x52 u u)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x204 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x188 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x142 (* (- 2) v)))
 (let ((?x112 (* (- 2) u00)))
 (let ((?x96 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x488 (+ 4 ?x28 (* 6 u) ?x96 ?x112 ?x142 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x188)))
 (let ((?x70 (+ r u)))
 (let ((?x217 (+ 2 u)))
 (let ((?x453 (* ?x217 ?x217 ?x217 ?x217 ?x217 ?x70 ?x70 ?x70 ?x70 ?x70 ?x488 v v v v v v v)))
 (let ((?x43 (* u u)))
 (let ((?x166 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x124 (+ (- 4) ?x28 (* (- 6) v) ?x96 ?x112 ?x36 ?x41 ?x166 (* (+ 2 v) (+ 2 v)) ?x46 ?x188)))
 (let ((?x94 (+ r (* (- 1) v))))
 (let ((?x206 (+ 2 v)))
 (let ((?x224 (* ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x206 ?x94 ?x94 ?x94 ?x94 ?x94 ?x124 u u u u u)))
 (let (($x436 (and (= (+ ?x28 ?x96 ?x112 ?x36 ?x142 ?x41 ?x166 ?x45 ?x46 ?x188) 0) (or (not (= ?x224 0)) (not (= ?x453 0))))))
 (let ((?x74 (+ u 2)))
 (let ((?x66 (- 1)))
 (let ((?x38 (* 2 v)))
 (let ((?x76 (+ (- (- (* 4 ?x70) (* 4 r00)) (* 2 u00)) (* 2 ?x74))))
 (let ((?x83 (* (- (+ (- (+ (- ?x76 ?x38) ?x41) (* ?x74 ?x74)) ?x45 ?x46) ?x48) ?x66 ?x70 ?x70 ?x70 v v ?x74 ?x74 v v ?x66 ?x74 v v v ?x66 ?x70 ?x70 ?x74 ?x74)))
 (let ((?x52 (- r v)))
 (let ((?x57 (+ v 2)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let ((?x67 (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x66 ?x52 ?x52 ?x52 ?x57 ?x57 u u ?x57 ?x57 ?x66 u ?x57 ?x57 ?x57 ?x66 ?x52 ?x52 u u)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x87 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not (= ?x67 0)) (not (= ?x83 0))))))
 (rewrite (= $x87 $x436)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x200 (mp (mp @x89 (quant-intro (proof-bind ?x204) (= $x88 $x201)) $x201) (rewrite (= $x201 $x201)) $x201)))
 (let ((@x386 (mp~ (mp @x200 (quant-intro (proof-bind ?x392) (= $x201 $x390)) $x390) (sk (~ $x390 $x395)) $x395)))
 (let ((@x431 (mp @x386 (rewrite (= $x395 $x415)) $x415)))
 (let ((@x364 (and-elim @x431 $x427)))
 (let ((@x347 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x427) $x348)) @x364 $x348)))
 (let (($x336 (<= ?x424 0)))
 (let ((@x361 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x427) $x336)) @x364 $x336)))
 (let (($x421 (not (<= ?x422 0))))
 (let (($x341 (>= ?x422 0)))
 (let (($x340 (>= ?x432 0)))
 (let (($x339 (<= ?x432 0)))
 (let ((@x362 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x433 (not $x339) (not $x340))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x339)) @x361 @x347 false) $x339) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x340)) @x361 @x347 false) $x340) $x433)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x426 $x421 (not $x341))) (unit-resolution (and-elim @x431 $x418) @x362 $x419) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x341)) @x361 @x347 false) $x341) $x421)))
 ((_ th-lemma arith farkas 1 1 1) @x371 @x361 @x347 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        33
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             112
 :arith-nonlinear-bounds    16
 :arith-num-rows            6
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.65
 :memory                    3.17
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1131418
 :num-checks                1
 :propagations              14
 :rlimit-count              2156
 :time                      0.01
 :total-time                0.02)
