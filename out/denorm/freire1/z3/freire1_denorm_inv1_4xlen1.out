unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x90 (* r!1 r!1)))
 (let ((?x84 (* (- 1) r!1)))
 (let ((?x143 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x73 (+ r00 ?x80 ?x96 ?x143 ?x84 ?x90)))
 (let (($x301 (<= ?x73 0)))
 (let (($x280 (= ?x73 0)))
 (let ((?x285 (+ x!0 ?x84)))
 (let ((?x109 (+ 1 r!1)))
 (let ((?x290 (* ?x109 ?x109 ?x109 ?x109 ?x109 ?x285 ?x285 ?x285 ?x285 ?x285 ?x73)))
 (let (($x288 (= ?x290 0)))
 (let (($x291 (not $x288)))
 (let (($x289 (and $x280 $x291)))
 (let ((?x138 (+ ?x84 x!0)))
 (let ((?x91 (* ?x109 ?x109 ?x109 ?x109 ?x109 ?x138 ?x138 ?x138 ?x138 ?x138 (+ ?x84 ?x143 r00 ?x90 ?x80 ?x96))))
 (let ((?x35 (* 2 x00)))
 (let ((?x111 (* (- 1) r00)))
 (let (($x95 (and (= (+ r!1 (* (- 2) x!0) ?x111 (* (- 1) ?x90) ?x35 ?x36) 0) (not (= ?x91 0)))))
 (let (($x168 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x102 (+ ?x59 ?x32 r00 ?x30 ?x80 ?x96)))
 (let ((?x167 (+ ?x59 x)))
 (let ((?x119 (+ 1 r)))
 (let (($x85 (= (* ?x119 ?x119 ?x119 ?x119 ?x119 ?x167 ?x167 ?x167 ?x167 ?x167 ?x102) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let (($x114 (= (+ r ?x110 ?x111 ?x112 ?x35 ?x36) 0)))
 (and $x114 (not $x85))))))))))))))))) :qid k!26))
 ))
 (let (($x160 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x135 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x151 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x193 (= (* ?x119 ?x119 ?x119 ?x119 ?x119 ?x151 ?x151 ?x151 ?x151 ?x151 ?x135) 0)))
 (let (($x198 (not $x193)))
 (let ((?x35 (* 2 x00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x198)))))))))))))))) :qid k!26))
 ))
 (let ((?x169 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x102 (+ ?x59 ?x32 r00 ?x30 ?x80 ?x96)))
 (let ((?x167 (+ ?x59 x)))
 (let ((?x119 (+ 1 r)))
 (let (($x85 (= (* ?x119 ?x119 ?x119 ?x119 ?x119 ?x167 ?x167 ?x167 ?x167 ?x167 ?x102) 0)))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (let ((?x110 (* (- 2) x)))
 (let (($x114 (= (+ r ?x110 ?x111 ?x112 ?x35 ?x36) 0)))
 (let (($x87 (and $x114 (not $x85))))
 (let ((?x151 (+ x ?x59)))
 (let ((?x180 (* ?x119 ?x119 ?x119 ?x119 ?x119 ?x151 ?x151 ?x151 ?x151 ?x151 (+ (- 1) (* (- 3) r) r00 (* ?x119 ?x119) ?x32 ?x80 ?x96))))
 (let (($x198 (not (= ?x180 0))))
 (let (($x148 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x198)))
 (rewrite (= $x148 $x87)))))))))))))))))))))))
 ))
 (let (($x199 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x135 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x151 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x193 (= (* ?x119 ?x119 ?x119 ?x119 ?x119 ?x151 ?x151 ?x151 ?x151 ?x151 ?x135) 0)))
 (let (($x198 (not $x193)))
 (and (= (+ ?x59 r00 (* r r) ?x32 ?x80 ?x96) 0) $x198))))))))))) :qid k!26))
 ))
 (let ((?x185 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x135 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x151 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x193 (= (* ?x119 ?x119 ?x119 ?x119 ?x119 ?x151 ?x151 ?x151 ?x151 ?x151 ?x135) 0)))
 (let (($x198 (not $x193)))
 (let ((?x35 (* 2 x00)))
 (let ((?x110 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x112 (* (- 1) ?x30)))
 (let ((?x111 (* (- 1) r00)))
 (let (($x148 (and (= (+ r ?x111 ?x112 ?x110 ?x35 ?x36) 0) $x198)))
 (let (($x104 (and (= (+ ?x59 r00 ?x30 ?x32 ?x80 ?x96) 0) $x198)))
 (rewrite (= $x104 $x148))))))))))))))))))))
 ))
 (let (($x54 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x27 (- 1)))
 (let ((?x41 (+ r 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* ?x27 ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x49 (* ?x48 ?x41 ?x41 ?x44 ?x27 ?x41 ?x41 ?x41 ?x27 ?x44 ?x27 ?x44 ?x44 ?x44)))
 (let ((?x38 (- (- (+ (* ?x27 r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x49 0)))))))))))) :qid k!26))
 ))
 (let ((?x201 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x96 (* (- 1) ?x36)))
 (let ((?x80 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x135 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x80 ?x96)))
 (let ((?x59 (* (- 1) r)))
 (let ((?x151 (+ x ?x59)))
 (let ((?x119 (+ 1 r)))
 (let (($x193 (= (* ?x119 ?x119 ?x119 ?x119 ?x119 ?x151 ?x151 ?x151 ?x151 ?x151 ?x135) 0)))
 (let (($x198 (not $x193)))
 (let (($x104 (and (= (+ ?x59 r00 (* r r) ?x32 ?x80 ?x96) 0) $x198)))
 (let ((?x44 (- x r)))
 (let ((?x27 (- 1)))
 (let ((?x41 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* ?x27 ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x49 (* ?x48 ?x41 ?x41 ?x44 ?x27 ?x41 ?x41 ?x41 ?x27 ?x44 ?x27 ?x44 ?x44 ?x44)))
 (let (($x40 (= (- (- (+ (* ?x27 r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x53 (and $x40 (or (not (= ?x49 0))))))
 (rewrite (= $x53 $x104))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x171 (mp (mp @x55 (quant-intro (proof-bind ?x201) (= $x54 $x199)) $x199) (rewrite (= $x199 $x199)) $x199)))
 (let ((@x65 (mp (mp @x171 (quant-intro (proof-bind ?x185) (= $x199 $x160)) $x160) (quant-intro (proof-bind ?x169) (= $x160 $x168)) $x168)))
 (let ((@x265 (mp (mp~ @x65 (sk (~ $x168 $x95)) $x95) (rewrite (= $x95 $x289)) $x289)))
 (let ((@x267 (and-elim @x265 $x280)))
 (let ((@x310 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x301)) @x267 $x301)))
 (let (($x302 (>= ?x73 0)))
 (let ((@x313 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x280) $x302)) @x267 $x302)))
 (let (($x321 (not (>= ?x290 0))))
 (let (($x303 (<= ?x290 0)))
 (let ((@x214 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x288 (not $x303) $x321)) (and-elim @x265 $x291) (or (not $x303) $x321))))
 (let ((@x213 (unit-resolution @x214 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x303)) @x313 @x310 false) $x303) $x321)))
 ((_ th-lemma arith farkas 1 1 1) @x213 @x313 @x310 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            3
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 14
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.50
 :memory                    3.11
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1065519
 :num-checks                1
 :propagations              4
 :rlimit-count              823
 :time                      0.01
 :total-time                0.01)
