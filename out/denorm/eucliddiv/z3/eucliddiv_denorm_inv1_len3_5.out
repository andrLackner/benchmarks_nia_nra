unsat
((set-logic NIA)
(proof
(let (($x55 (exists ((q Int) (r Int) (y Int) )(! (let ((?x48 (* y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x43 ?x44 ?x44)))
 (let ((?x45 (* ?x43 ?x43 ?x44 ?x44 y00 y00)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x53)))))))))))))))) :qid k!29))
 ))
 (let (($x397 (= $x55 false)))
 (let (($x390 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x396 (elim-unused (= $x390 false))))
 (let (($x393 (= $x55 $x390)))
 (let ((?x452 (lambda ((q Int) (r Int) (y Int) )(let ((?x48 (* y00 y00)))
 (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x43 ?x44 ?x44)))
 (let ((?x45 (* ?x43 ?x43 ?x44 ?x44 y00 y00)))
 (let ((?x47 (+ ?x45 ?x46)))
 (let ((?x49 (- ?x47 ?x48)))
 (let ((?x30 (* (- 1) y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x50 (* ?x42 ?x49)))
 (let (($x51 (= ?x50 0)))
 (let (($x52 (not $x51)))
 (let (($x53 (or $x52)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x54 (and $x33 $x41 $x53)))
 (let (($x388 (= $x54 false)))
 (let (($x427 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x82 (= (+ (* (- 1) y00) y) 0)))
 (let (($x446 (and $x82 $x427 false)))
 (let (($x381 (= $x53 false)))
 (let ((@x380 (rewrite (= (or false) false))))
 (let (($x376 (or false)))
 (let (($x377 (= $x53 $x376)))
 (let (($x374 (= $x52 false)))
 (let ((@x373 (rewrite (= (not true) false))))
 (let (($x369 (not true)))
 (let (($x370 (= $x52 $x369)))
 (let (($x367 (= $x51 true)))
 (let ((@x366 (rewrite (= (= 0 0) true))))
 (let (($x362 (= 0 0)))
 (let (($x363 (= $x51 $x362)))
 (let ((?x345 (* (- 1) ?x48)))
 (let ((?x60 (* (- 1) y00)))
 (let ((?x80 (+ r ?x60)))
 (let ((?x77 (+ 1 q)))
 (let ((?x181 (* ?x77 ?x77 ?x77 ?x80 ?x80)))
 (let ((?x83 (* y00 y00 ?x77 ?x77 ?x80 ?x80)))
 (let ((?x426 (+ ?x83 ?x181 ?x345)))
 (let ((?x434 (* 0 ?x426)))
 (let ((@x419 (monotonicity (rewrite (= ?x47 (+ ?x83 ?x181))) (= ?x49 (- (+ ?x83 ?x181) ?x48)))))
 (let ((@x425 (trans @x419 (rewrite (= (- (+ ?x83 ?x181) ?x48) (+ (+ ?x83 ?x181) ?x345))) (= ?x49 (+ (+ ?x83 ?x181) ?x345)))))
 (let ((@x433 (trans @x425 (rewrite (= (+ (+ ?x83 ?x181) ?x345) ?x426)) (= ?x49 ?x426))))
 (let ((@x74 (trans (monotonicity (rewrite (= ?x30 ?x60)) (= ?x42 (+ ?x60 y00))) (rewrite (= (+ ?x60 y00) 0)) (= ?x42 0))))
 (let ((@x439 (trans (monotonicity @x74 @x433 (= ?x50 ?x434)) (rewrite (= ?x434 0)) $x51)))
 (let ((@x443 (trans (monotonicity (trans (monotonicity @x439 $x363) @x366 $x367) $x370) @x373 $x374)))
 (let ((@x448 (monotonicity (rewrite (= $x33 $x82)) (rewrite (= $x41 $x427)) (trans (monotonicity @x443 $x377) @x380 $x381) (= $x54 $x446))))
 (trans @x448 (rewrite (= $x446 false)) $x388)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x56 (asserted $x55)))
 (mp @x56 (trans (quant-intro (proof-bind ?x452) $x393) @x396 $x397) false))))))))))

(:max-memory   3.40
 :memory       3.09
 :mk-bool-var  5
 :num-allocs   917082
 :rlimit-count 293
 :time         0.01
 :total-time   0.01)
