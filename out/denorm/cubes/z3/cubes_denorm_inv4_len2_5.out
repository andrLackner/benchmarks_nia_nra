unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x182 (* (- 1) k!2)))
 (let ((?x222 (* n!0 n!0)))
 (let ((?x352 (* 3 ?x222)))
 (let ((?x184 (+ ?x352 ?x182 (* 3 n!0))))
 (let (($x139 (<= ?x184 (- 1))))
 (let (($x283 (= ?x184 (- 1))))
 (let ((?x568 (* 36 (* k!2 k!2 k!2))))
 (let ((?x559 (* (- 6) (* k!2 m!1 m!1 m!1))))
 (let ((?x552 (* (- 1) (* k!2 m!1 m!1 m!1 m!1))))
 (let ((?x550 (* (- 1) (* c!3 m!1 m!1 m!1 m!1))))
 (let ((?x470 (* (- 3) (* k!2 k!2 m!1 m!1 m!1))))
 (let ((?x161 (* (- 1) (* k!2 k!2 k!2 k!2 m!1))))
 (let ((?x611 (* (- 6) (* k!2 k!2 k!2 k!2))))
 (let ((?x513 (* (- 6) (* c!3 m!1 m!1 m!1))))
 (let ((?x554 (* 36 (* c!3 c!3 c!3))))
 (let ((?x475 (* c!3 c!3 c!3 m!1 m!1)))
 (let ((?x328 (* (- 6) (* k!2 k!2 k!2 m!1))))
 (let ((?x443 (* (- 18) (* k!2 k!2 m!1 m!1))))
 (let ((?x178 (* (- 2) (* k!2 k!2 k!2 m!1 m!1))))
 (let ((?x444 (* 12 (* c!3 c!3 c!3 m!1))))
 (let ((?x253 (+ ?x444 ?x178 ?x443 (* 3 (* k!2 c!3 c!3 m!1 m!1)) (* 108 (* k!2 k!2 c!3)) (* 36 (* k!2 c!3 c!3 m!1)) (* 18 (* k!2 k!2 c!3 m!1)) (* (- 6) (* k!2 k!2 k!2 c!3)) (* (- 18) (* k!2 c!3 m!1 m!1)) (* (- 3) (* k!2 c!3 m!1 m!1 m!1)) ?x328 (* 108 (* k!2 c!3 c!3)) ?x475 ?x554 ?x513 ?x611 ?x161 ?x470 ?x550 (* (- 1) (* k!2 k!2 k!2 c!3 m!1)) ?x552 ?x559 ?x568)))
 (let ((?x262 (* ?x253 (+ 7 ?x352 ?x182 (* 9 n!0) (* (- 1) m!1)))))
 (let (($x260 (= ?x262 0)))
 (let (($x127 (not $x260)))
 (let (($x459 (= (+ k!2 (* 3 c!3) (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x690 (* 9 (* c!3 n!0))))
 (let ((?x518 (* (- 9) n!0)))
 (let ((?x109 (* 18 c!3)))
 (let ((?x304 (* (- 1) (* k!2 k!2))))
 (let ((?x466 (* 5 k!2)))
 (let ((?x350 (* (- 1) m!1)))
 (let ((?x322 (+ (* 6 n!0) ?x350)))
 (let (($x323 (= ?x322 (- 6))))
 (let (($x261 (and $x323 (= (+ ?x466 ?x304 ?x109 ?x518 ?x690) 4) $x459 $x283 $x127)))
 (let ((?x179 (+ ?x513 (* (- 6) (* c!3 k!2 k!2 k!2)) (* (- 18) (* c!3 k!2 m!1 m!1)) (* (- 1) (* c!3 k!2 k!2 k!2 m!1)) ?x161 (* (- 3) (* c!3 k!2 m!1 m!1 m!1)) ?x470 ?x550 ?x552 ?x475 (* 3 (* c!3 c!3 k!2 m!1 m!1)) ?x554 ?x559 (* 108 (* c!3 c!3 k!2)) (* 108 (* c!3 k!2 k!2)) ?x443 ?x568 ?x444 (* 36 (* c!3 c!3 k!2 m!1)) (* 18 (* c!3 k!2 k!2 m!1)) ?x328 ?x611 ?x178)))
 (let (($x158 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x355 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x109 ?x466 ?x518 ?x304 ?x690) 4) $x158 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x222)) 1) (not (= (* ?x179 (+ 7 ?x182 ?x350 (* 9 n!0) ?x352)) 0)))))
 (let (($x515 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x636 (* 36 (* c c k m))))
 (let ((?x635 (* 12 (* c c c m))))
 (let ((?x545 (* 36 (* k k k))))
 (let ((?x633 (* 108 (* c k k))))
 (let ((?x632 (* 108 (* c c k))))
 (let ((?x501 (* 36 (* c c c))))
 (let ((?x639 (* 3 (* c c k m m))))
 (let ((?x488 (* c c c m m)))
 (let ((?x457 (* (- 1) (* k m m m m))))
 (let ((?x455 (* (- 1) (* c m m m m))))
 (let ((?x429 (* (- 1) (* k k k k m))))
 (let ((?x427 (* (- 1) (* c k k k m))))
 (let ((?x763 (+ (* (- 6) (* c m m m)) (* (- 6) (* c k k k)) (* (- 18) (* c k m m)) ?x427 ?x429 (* (- 3) (* c k m m m)) (* (- 3) (* k k m m m)) ?x455 ?x457 ?x488 ?x639 ?x501 (* (- 6) (* k m m m)) ?x632 ?x633 (* (- 18) (* k k m m)) ?x545 ?x635 ?x636 (* 18 (* c k k m)) (* (- 6) (* k k k m)) (* (- 6) (* k k k k)) (* (- 2) (* k k k m m)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* ?x763 (+ 7 ?x233 ?x349 ?x48 ?x265)) 0)))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x478 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x326 (+ 6 m)))
 (let ((?x276 (+ (* (- 1) (* ?x326 (+ k m) (+ k m) (+ k m) ?x76)) (* ?x326 ?x326 ?x76 ?x76 ?x76))))
 (let (($x301 (not (= (* ?x276 ?x320) 0))))
 (let (($x277 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let (($x511 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x511 $x277 $x301))))))))))))))))) :qid k!34))
 ))
 (let ((?x517 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x636 (* 36 (* c c k m))))
 (let ((?x635 (* 12 (* c c c m))))
 (let ((?x545 (* 36 (* k k k))))
 (let ((?x633 (* 108 (* c k k))))
 (let ((?x632 (* 108 (* c c k))))
 (let ((?x501 (* 36 (* c c c))))
 (let ((?x639 (* 3 (* c c k m m))))
 (let ((?x488 (* c c c m m)))
 (let ((?x457 (* (- 1) (* k m m m m))))
 (let ((?x455 (* (- 1) (* c m m m m))))
 (let ((?x429 (* (- 1) (* k k k k m))))
 (let ((?x427 (* (- 1) (* c k k k m))))
 (let ((?x763 (+ (* (- 6) (* c m m m)) (* (- 6) (* c k k k)) (* (- 18) (* c k m m)) ?x427 ?x429 (* (- 3) (* c k m m m)) (* (- 3) (* k k m m m)) ?x455 ?x457 ?x488 ?x639 ?x501 (* (- 6) (* k m m m)) ?x632 ?x633 (* (- 18) (* k k m m)) ?x545 ?x635 ?x636 (* 18 (* c k k m)) (* (- 6) (* k k k m)) (* (- 6) (* k k k k)) (* (- 2) (* k k k m m)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x203 (= (+ ?x40 ?x44 ?x205 ?x206 (* 9 (* c n))) 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x772 (and $x119 $x203 $x255 $x293 (not (= (* ?x763 (+ 7 ?x233 ?x349 ?x48 ?x265)) 0)))))
 (let ((?x65 (* 3 n)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x326 (+ 6 m)))
 (let ((?x276 (+ (* (- 1) (* ?x326 (+ k m) (+ k m) (+ k m) ?x76)) (* ?x326 ?x326 ?x76 ?x76 ?x76))))
 (let (($x301 (not (= (* ?x276 ?x320) 0))))
 (let (($x277 (= (+ ?x265 ?x233 ?x65) (- 1))))
 (let (($x511 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x588 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x511 $x277 $x301)))
 (rewrite (= $x588 $x772))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x303 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x326 (+ 6 m)))
 (let ((?x276 (+ (* (- 1) (* ?x326 (+ k m) (+ k m) (+ k m) ?x76)) (* ?x326 ?x326 ?x76 ?x76 ?x76))))
 (let (($x301 (not (= (* ?x276 ?x320) 0))))
 (let (($x277 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x476 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x476 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x277 $x301)))))))))))))) :qid k!34))
 ))
 (let ((?x581 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x326 (+ 6 m)))
 (let ((?x276 (+ (* (- 1) (* ?x326 (+ k m) (+ k m) (+ k m) ?x76)) (* ?x326 ?x326 ?x76 ?x76 ?x76))))
 (let (($x301 (not (= (* ?x276 ?x320) 0))))
 (let (($x277 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let (($x511 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x206 (* (- 1) ?x49)))
 (let ((?x205 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x588 (and $x119 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x205 ?x206) 4) $x511 $x277 $x301)))
 (let ((?x48 (* 9 n)))
 (let ((?x476 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x335 (and $x119 (= ?x476 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x277 $x301)))
 (rewrite (= $x335 $x588)))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x77 (+ m 6)))
 (let ((?x76 (+ c k)))
 (let ((?x80 (+ (* (- 1) ?x76 (+ k m) (+ k m) (+ k m) ?x77) (* ?x76 ?x76 ?x76 ?x77 ?x77))))
 (let ((?x71 (+ k m)))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x74 ?x80) 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x234 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x320 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x326 (+ 6 m)))
 (let ((?x276 (+ (* (- 1) (* ?x326 (+ k m) (+ k m) (+ k m) ?x76)) (* ?x326 ?x326 ?x76 ?x76 ?x76))))
 (let (($x301 (not (= (* ?x276 ?x320) 0))))
 (let (($x277 (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x476 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x335 (and $x119 (= ?x476 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) $x277 $x301)))
 (let ((?x77 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x80 (+ (* (- 1) ?x76 ?x71 ?x71 ?x71 ?x77) (* ?x76 ?x76 ?x76 ?x77 ?x77))))
 (let ((?x74 (+ (- (+ 1 (* 3 (+ n 1) (+ n 1))) ?x71) (* 3 (+ n 1)))))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= (* ?x74 ?x80) 0))))))
 (rewrite (= $x85 $x335))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x354 (mp (mp @x87 (quant-intro (proof-bind ?x234) (= $x86 $x303)) $x303) (rewrite (= $x303 $x303)) $x303)))
 (let ((@x166 (mp (mp @x354 (quant-intro (proof-bind ?x581) (= $x303 $x478)) $x478) (quant-intro (proof-bind ?x517) (= $x478 $x515)) $x515)))
 (let ((@x171 (mp (mp~ @x166 (sk (~ $x515 $x355)) $x355) (rewrite (= $x355 $x261)) $x261)))
 (let ((@x597 (and-elim @x171 $x283)))
 (let ((@x547 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x283) $x139)) @x597 $x139)))
 (let (($x185 (<= ?x322 (- 6))))
 (let ((@x213 (and-elim @x171 $x323)))
 (let ((@x243 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x185)) @x213 $x185)))
 (let (($x375 (>= ?x184 (- 1))))
 (let ((@x247 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x283) $x375)) @x597 $x375)))
 (let (($x273 (>= ?x322 (- 6))))
 (let ((@x521 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x273)) @x213 $x273)))
 (let (($x284 (not (<= ?x262 0))))
 (let (($x311 (>= ?x262 0)))
 (let ((@x570 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x311)) @x521 @x247 @x243 @x547 false) $x311)))
 (let ((@x170 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x260 $x284 (not $x311))) (and-elim @x171 $x127) (or $x284 (not $x311)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x170 @x570 $x284) @x521 @x247 @x243 @x547 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        22
 :arith-assert-upper        21
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           5
 :arith-ineq-splits         2
 :arith-max-min             259
 :arith-nonlinear-bounds    19
 :arith-num-rows            6
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      10
 :arith-tableau-max-columns 54
 :arith-tableau-max-rows    6
 :conflicts                 4
 :decisions                 8
 :del-clause                16
 :final-checks              7
 :max-memory                3.69
 :memory                    3.17
 :mk-bool-var               28
 :mk-clause                 16
 :num-allocs                1180634
 :num-checks                1
 :propagations              12
 :rlimit-count              4244
 :time                      0.01
 :total-time                0.01)
