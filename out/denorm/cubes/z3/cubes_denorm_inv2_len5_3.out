unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x347 (+ c!3 k!2)))
 (let ((?x115 (+ m!1 k!2)))
 (let ((?x252 (+ 6 m!1)))
 (let ((?x351 (+ 1 n!0)))
 (let ((?x461 (* (- 1) (* ?x351 ?x351 ?x351 ?x252 ?x252 ?x115 ?x115 ?x115 ?x347 ?x347 ?x347))))
 (let ((?x296 (* c!3 c!3 k!2 k!2)))
 (let ((?x255 (* (- 1) (* ?x351 ?x351 ?x351 ?x252 ?x252 ?x252 ?x347))))
 (let ((?x185 (* k!2 k!2 k!2 k!2)))
 (let ((?x183 (* c!3 c!3 m!1 m!1)))
 (let ((?x186 (* 2 (* c!3 k!2 k!2 k!2))))
 (let ((?x293 (+ (* m!1 m!1 k!2 k!2) ?x186 ?x183 ?x185 (* (- 1) (* ?x351 ?x351 ?x252 ?x252 ?x252 ?x115)) ?x255 ?x296 (* ?x351 ?x351 ?x351 ?x252 ?x252 ?x252 ?x115 ?x115 ?x115 ?x347 ?x347) (* 4 (* c!3 m!1 k!2 k!2)) (* 2 (* c!3 c!3 m!1 k!2)) (* 2 (* m!1 k!2 k!2 k!2)) (* 2 (* c!3 m!1 m!1 k!2)) ?x461)))
 (let (($x173 (<= ?x293 0)))
 (let ((?x269 (* 5 k!2)))
 (let ((?x298 (* c!3 n!0)))
 (let ((?x147 (* 9 ?x298)))
 (let ((?x284 (* (- 9) n!0)))
 (let ((?x137 (* k!2 k!2)))
 (let ((?x285 (* (- 1) ?x137)))
 (let ((?x157 (* 18 c!3)))
 (let ((?x116 (+ ?x157 ?x285 ?x284 ?x147 ?x269)))
 (let (($x138 (<= ?x116 4)))
 (let (($x597 (= ?x116 4)))
 (let ((?x375 (* (- 32) k!2)))
 (let ((?x434 (* m!1 m!1)))
 (let ((?x577 (* (- 9) ?x298)))
 (let ((?x188 (* 9 n!0)))
 (let ((?x385 (* (- 5) m!1)))
 (let ((?x428 (* (- 27) c!3)))
 (let ((?x231 (+ 13 ?x428 ?x385 ?x137 ?x188 ?x577 (* (- 9) (* n!0 k!2)) (* 2 (* m!1 k!2)) ?x434 ?x375)))
 (let ((?x169 (* ?x293 ?x231)))
 (let (($x380 (= ?x169 0)))
 (let (($x605 (not $x380)))
 (let ((?x352 (+ (* 3 n!0) (* 3 (* n!0 n!0)) (* (- 1) k!2))))
 (let (($x189 (= ?x352 (- 1))))
 (let ((?x289 (* (- 2) n!0)))
 (let ((?x297 (* 3 c!3)))
 (let ((?x602 (+ ?x297 ?x289 (* (- 1) (* n!0 k!2)) k!2)))
 (let (($x308 (= ?x602 1)))
 (let ((?x335 (+ m!1 (* (- 6) n!0))))
 (let (($x318 (= ?x335 6)))
 (let (($x369 (and $x318 $x597 $x308 $x189 $x605)))
 (let ((?x431 (+ 13 ?x428 ?x375 ?x385 ?x188 ?x137 (* (- 9) (* k!2 n!0)) ?x577 (* 2 (* k!2 m!1)) ?x434)))
 (let ((?x239 (+ k!2 m!1)))
 (let ((?x162 (* (- 1) (* ?x351 ?x351 ?x351 ?x252 ?x252 ?x239 ?x239 ?x239 ?x347 ?x347 ?x347))))
 (let ((?x429 (+ ?x162 (* ?x351 ?x351 ?x351 ?x252 ?x252 ?x252 ?x239 ?x239 ?x239 ?x347 ?x347) ?x296 ?x255 (* (- 1) (* ?x351 ?x351 ?x252 ?x252 ?x252 ?x239)) (* k!2 k!2 m!1 m!1) (* 2 (* c!3 k!2 m!1 m!1)) ?x183 (* 2 (* k!2 k!2 k!2 m!1)) (* 4 (* c!3 k!2 k!2 m!1)) (* 2 (* c!3 c!3 k!2 m!1)) ?x185 ?x186)))
 (let (($x576 (and $x318 (= (+ ?x157 ?x269 ?x284 ?x285 ?x147) 4) (= (+ ?x297 k!2 ?x289 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x429 ?x431) 0)))))
 (let (($x156 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x485 (+ 13 (* (- 27) c) (* (- 32) k) ?x430 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x582 (* 2 (* c k k k))))
 (let ((?x615 (* k k k k)))
 (let ((?x581 (* 2 (* c c k m))))
 (let ((?x580 (* 4 (* c k k m))))
 (let ((?x579 (* 2 (* k k k m))))
 (let ((?x606 (* c c m m)))
 (let ((?x578 (* 2 (* c k m m))))
 (let ((?x603 (* k k m m)))
 (let ((?x72 (+ k m)))
 (let ((?x492 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x345 ?x345 ?x492 ?x492 ?x492 ?x72))))
 (let ((?x618 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 (+ c k)))))
 (let ((?x535 (* c c k k)))
 (let ((?x68 (+ c k)))
 (let ((?x360 (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x129 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x276 (+ ?x129 ?x360 ?x535 ?x618 ?x316 ?x603 ?x578 ?x606 ?x579 ?x580 ?x581 ?x615 ?x582)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 $x212 $x264 $x302 (not (= (* ?x276 ?x485) 0))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x311 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x102 (* (- 18) c)))
 (let ((?x98 (+ 13 ?x102 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x492 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x360 (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x316 (* (- 1) (* ?x345 ?x345 ?x492 ?x492 ?x492 ?x72))))
 (let ((?x618 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x68))))
 (let ((?x129 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x175 (not (= (* (+ ?x129 ?x618 ?x316 ?x360 (* ?x72 ?x72 ?x68 ?x68)) ?x98) 0))))
 (let (($x159 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x155 $x159 $x175))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x256 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x485 (+ 13 (* (- 27) c) (* (- 32) k) ?x430 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x582 (* 2 (* c k k k))))
 (let ((?x615 (* k k k k)))
 (let ((?x581 (* 2 (* c c k m))))
 (let ((?x580 (* 4 (* c k k m))))
 (let ((?x579 (* 2 (* k k k m))))
 (let ((?x606 (* c c m m)))
 (let ((?x578 (* 2 (* c k m m))))
 (let ((?x603 (* k k m m)))
 (let ((?x72 (+ k m)))
 (let ((?x492 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x316 (* (- 1) (* ?x345 ?x345 ?x492 ?x492 ?x492 ?x72))))
 (let ((?x618 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 (+ c k)))))
 (let ((?x535 (* c c k k)))
 (let ((?x68 (+ c k)))
 (let ((?x360 (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x129 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x276 (+ ?x129 ?x360 ?x535 ?x618 ?x316 ?x603 ?x578 ?x606 ?x579 ?x580 ?x581 ?x615 ?x582)))
 (let (($x302 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x264 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x212 (= (+ ?x40 ?x44 ?x214 ?x215 (* 9 (* c n))) 4)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x294 (and $x128 $x212 $x264 $x302 (not (= (* ?x276 ?x485) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x102 (* (- 18) c)))
 (let ((?x98 (+ 13 ?x102 (* (- 23) k) (* (- 9) (* ?x345 ?x68)) ?x430 ?x48 ?x78)))
 (let (($x175 (not (= (* (+ ?x129 ?x618 ?x316 ?x360 (* ?x72 ?x72 ?x68 ?x68)) ?x98) 0))))
 (let (($x159 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x219 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x155 $x159 $x175)))
 (rewrite (= $x219 $x294)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x133 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x102 (* (- 18) c)))
 (let ((?x98 (+ 13 ?x102 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x492 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x360 (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x316 (* (- 1) (* ?x345 ?x345 ?x492 ?x492 ?x492 ?x72))))
 (let ((?x618 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x68))))
 (let ((?x129 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x175 (not (= (* (+ ?x129 ?x618 ?x316 ?x360 (* ?x72 ?x72 ?x68 ?x68)) ?x98) 0))))
 (let (($x159 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x410 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x243 (= (+ ?x102 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (and $x128 $x243 $x410 $x159 $x175))))))))))))))))))) :qid k!34))
 ))
 (let ((?x332 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x102 (* (- 18) c)))
 (let ((?x98 (+ 13 ?x102 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x492 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x360 (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x316 (* (- 1) (* ?x345 ?x345 ?x492 ?x492 ?x492 ?x72))))
 (let ((?x618 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x68))))
 (let ((?x129 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x175 (not (= (* (+ ?x129 ?x618 ?x316 ?x360 (* ?x72 ?x72 ?x68 ?x68)) ?x98) 0))))
 (let (($x159 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x215 (* (- 1) ?x49)))
 (let ((?x214 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x219 (and $x128 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x214 ?x215) 4) $x155 $x159 $x175)))
 (let (($x410 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x243 (= (+ ?x102 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x278 (and $x128 $x243 $x410 $x159 $x175)))
 (rewrite (= $x278 $x219)))))))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x82 (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x70 ?x70 ?x70)))
 (let ((?x86 (- (- ?x82 (* ?x68 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70)) (* ?x72 ?x81 ?x81 ?x81 ?x70 ?x70))))
 (let ((?x89 (+ ?x86 (* ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x72 ?x72))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x89) 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x139 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x430 (* (- 5) m)))
 (let ((?x102 (* (- 18) c)))
 (let ((?x98 (+ 13 ?x102 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x430 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x492 (+ 6 m)))
 (let ((?x345 (+ 1 n)))
 (let ((?x360 (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68)))
 (let ((?x316 (* (- 1) (* ?x345 ?x345 ?x492 ?x492 ?x492 ?x72))))
 (let ((?x618 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x492 ?x68))))
 (let ((?x129 (* (- 1) (* ?x345 ?x345 ?x345 ?x492 ?x492 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let (($x175 (not (= (* (+ ?x129 ?x618 ?x316 ?x360 (* ?x72 ?x72 ?x68 ?x68)) ?x98) 0))))
 (let (($x159 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x410 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x243 (= (+ ?x102 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x128 (= (+ m (* (- 6) n)) 6)))
 (let (($x278 (and $x128 $x243 $x410 $x159 $x175)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x82 (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x70 ?x70 ?x70)))
 (let ((?x86 (- (- ?x82 (* ?x68 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70)) (* ?x72 ?x81 ?x81 ?x81 ?x70 ?x70))))
 (let ((?x89 (+ ?x86 (* ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70 ?x70) (* ?x68 ?x68 ?x72 ?x72))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x94 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x89) 0))))))
 (rewrite (= $x94 $x278)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x217 (mp (mp @x96 (quant-intro (proof-bind ?x139) (= $x95 $x133)) $x133) (rewrite (= $x133 $x133)) $x133)))
 (let ((@x334 (mp (mp @x217 (quant-intro (proof-bind ?x332) (= $x133 $x311)) $x311) (quant-intro (proof-bind ?x256) (= $x311 $x156)) $x156)))
 (let ((@x191 (mp (mp~ @x334 (sk (~ $x156 $x576)) $x576) (rewrite (= $x576 $x369)) $x369)))
 (let ((@x591 (and-elim @x191 $x597)))
 (let ((@x132 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x597) $x138)) @x591 $x138)))
 (let (($x196 (>= ?x116 4)))
 (let ((@x398 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x597) $x196)) @x591 $x196)))
 (let (($x182 (<= ?x335 6)))
 (let ((@x361 (and-elim @x191 $x318)))
 (let ((@x493 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x318) $x182)) @x361 $x182)))
 (let (($x387 (>= ?x335 6)))
 (let ((@x542 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x318) $x387)) @x361 $x387)))
 (let (($x397 (<= ?x602 1)))
 (let ((@x326 (and-elim @x191 $x308)))
 (let ((@x395 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x397)) @x326 $x397)))
 (let (($x307 (>= ?x602 1)))
 (let ((@x317 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x308) $x307)) @x326 $x307)))
 (let (($x396 (<= ?x352 (- 1))))
 (let ((@x279 (and-elim @x191 $x189)))
 (let ((@x151 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x396)) @x279 $x396)))
 (let (($x601 (>= ?x352 (- 1))))
 (let ((@x210 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x189) $x601)) @x279 $x601)))
 (let (($x108 (not $x173)))
 (let ((@x306 (hypothesis $x108)))
 (let (($x371 (not (>= ?x169 0))))
 (let (($x472 (<= ?x169 0)))
 (let (($x201 (>= ?x293 0)))
 (let (($x563 (not $x201)))
 (let (($x218 (= ?x293 0)))
 (let (($x362 (not $x218)))
 (let (($x550 (not $x472)))
 (let ((@x543 (hypothesis $x550)))
 (let ((@x141 ((_ th-lemma arith farkas 1 1 1) @x543 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x362 $x201)) (hypothesis $x218) $x201) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x362 $x173)) (hypothesis $x218) $x173) false)))
 (let ((@x592 ((_ th-lemma arith) @x543 @x306 @x398 @x132 @x398 @x132 @x210 @x151 @x317 @x395 @x398 @x132 @x542 @x493 @x317 @x395 @x542 @x493 @x398 @x132 false)))
 (let ((@x110 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x218 $x108 $x563)) (unit-resolution (lemma @x592 (or $x173 $x472)) @x543 $x173) (unit-resolution (lemma @x141 (or $x362 $x472)) @x543 $x362) $x563)))
 (let ((@x99 ((_ th-lemma arith) @x543 @x110 @x210 @x151 @x542 @x493 @x210 @x151 @x317 @x395 @x542 @x493 @x398 @x132 false)))
 (let ((@x208 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x380 $x550 $x371)) (and-elim @x191 $x605) (or $x550 $x371))))
 (let ((@x199 (unit-resolution @x208 (lemma @x99 $x472) $x371)))
 (let ((@x370 ((_ th-lemma arith) @x199 @x306 @x210 @x151 @x542 @x493 @x210 @x151 @x398 @x132 @x210 @x151 @x398 @x132 @x210 @x151 @x210 @x151 @x317 @x395 @x398 @x132 @x317 @x395 @x542 @x493 @x398 @x132 false)))
 (let ((@x466 ((_ th-lemma arith) @x199 (hypothesis $x563) @x398 @x132 @x398 @x132 @x210 @x151 @x398 @x132 @x317 @x395 @x398 @x132 @x542 @x493 @x317 @x395 @x542 @x493 @x398 @x132 false)))
 ((_ th-lemma arith farkas 1 1 1) @x199 (lemma @x466 $x201) (lemma @x370 $x173) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 6
 :arith-assert-diseq        7
 :arith-assert-lower        72
 :arith-assert-upper        46
 :arith-bound-prop          1
 :arith-branch-var          5
 :arith-conflicts           9
 :arith-eq-adapter          10
 :arith-gcd-tests           24
 :arith-gomory-cuts         1
 :arith-grobner             7
 :arith-ineq-splits         5
 :arith-max-min             819
 :arith-nonlinear-bounds    54
 :arith-nonlinear-horner    71
 :arith-num-rows            11
 :arith-patches             11
 :arith-patches_succ        2
 :arith-pivots              46
 :arith-pseudo-nonlinear    2
 :arith-row-summations      226
 :arith-tableau-max-columns 53
 :arith-tableau-max-rows    11
 :conflicts                 9
 :decisions                 28
 :del-clause                39
 :final-checks              26
 :max-memory                3.74
 :memory                    3.18
 :mk-bool-var               57
 :mk-clause                 42
 :num-allocs                5627897
 :num-checks                1
 :propagations              32
 :rlimit-count              107868
 :time                      0.05
 :total-time                0.06)
