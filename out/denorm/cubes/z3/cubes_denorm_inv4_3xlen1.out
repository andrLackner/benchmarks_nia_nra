unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x278 (* n!0 n!0)))
 (let ((?x277 (* 3 ?x278)))
 (let ((?x309 (* (- 1) k!2)))
 (let ((?x580 (+ (* 3 n!0) ?x309 ?x277)))
 (let (($x612 (<= ?x580 (- 1))))
 (let (($x579 (= ?x580 (- 1))))
 (let ((?x122 (+ c!3 k!2)))
 (let ((?x592 (+ m!1 k!2)))
 (let ((?x190 (+ 6 m!1)))
 (let ((?x350 (+ 1 n!0)))
 (let ((?x593 (* ?x350 ?x350 ?x350 ?x350 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x592 ?x592 ?x592 ?x592 ?x592 ?x592 ?x592 ?x592 ?x122 ?x122 ?x122 ?x122 ?x122 (+ 7 (* (- 1) m!1) (* 9 n!0) ?x309 ?x277))))
 (let (($x588 (= ?x593 0)))
 (let (($x595 (not $x588)))
 (let (($x581 (= (+ (* 3 c!3) (* (- 2) n!0) k!2 (* (- 1) (* n!0 k!2))) 1)))
 (let ((?x170 (* 9 (* c!3 n!0))))
 (let ((?x94 (* 5 k!2)))
 (let ((?x178 (* (- 1) (* k!2 k!2))))
 (let ((?x93 (* (- 9) n!0)))
 (let ((?x97 (* 18 c!3)))
 (let ((?x88 (+ m!1 (* (- 6) n!0))))
 (let (($x110 (= ?x88 6)))
 (let (($x594 (and $x110 (= (+ ?x97 ?x93 ?x178 ?x94 ?x170) 4) $x581 $x579 $x595)))
 (let ((?x191 (+ k!2 m!1)))
 (let ((?x574 (* ?x350 ?x350 ?x350 ?x350 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x190 ?x191 ?x191 ?x191 ?x191 ?x191 ?x191 ?x191 ?x191 ?x122 ?x122 ?x122 ?x122 ?x122 (+ 7 ?x309 (* (- 1) m!1) (* 9 n!0) ?x277))))
 (let (($x349 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x128 (and $x110 (= (+ ?x97 ?x94 ?x93 ?x178 ?x170) 4) $x349 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x278)) 1) (not (= ?x574 0)))))
 (let (($x287 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x323 (* ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x76 ?x76 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 $x200 $x252 $x290 (not (= ?x323 0)))))))))))))))))))))) :qid k!34))
 ))
 (let (($x395 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x76 ?x76 ?x359)))
 (let (($x705 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x169 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x169 $x173 $x705))))))))))))))))))) :qid k!34))
 ))
 (let ((?x86 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x323 (* ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x76 ?x76 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x92 (and $x116 $x200 $x252 $x290 (not (= ?x323 0)))))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x76 ?x76 (+ 4 (* 3 (* ?x298 ?x298)) ?x230 ?x346 (* 3 n)))))
 (let (($x705 (not (= ?x387 0))))
 (let (($x173 (= (+ ?x262 ?x230 (* 3 n)) (- 1))))
 (let (($x169 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x329 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x169 $x173 $x705)))
 (rewrite (= $x329 $x92))))))))))))))))))))))))))))
 ))
 (let (($x703 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x76 ?x76 ?x359)))
 (let (($x705 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x173 $x705)))))))))))))))) :qid k!34))
 ))
 (let ((?x348 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x76 ?x76 ?x359)))
 (let (($x705 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x169 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x329 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x169 $x173 $x705)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x207 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x173 $x705)))
 (rewrite (= $x207 $x329)))))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x76 (+ c k)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x68 ?x68 ?x76 ?x76 ?x71 ?x71 ?x75 ?x75 ?x75 ?x68 (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x68)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x78 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x700 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x359 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x76 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x383 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x387 (* ?x298 ?x298 ?x298 ?x298 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x383 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x76 ?x76 ?x76 ?x76 ?x76 ?x359)))
 (let (($x705 (not (= ?x387 0))))
 (let (($x173 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x264 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x207 (and $x116 (= ?x264 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x173 $x705)))
 (let ((?x68 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x68 ?x68 ?x76 ?x76 ?x71 ?x71 ?x75 ?x75 ?x75 ?x68 (- 1) ?x76 ?x76 ?x76 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x68)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x78 0))))))
 (rewrite (= $x82 $x207)))))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x393 (mp (mp @x84 (quant-intro (proof-bind ?x700) (= $x83 $x703)) $x703) (rewrite (= $x703 $x703)) $x703)))
 (let ((@x87 (mp (mp @x393 (quant-intro (proof-bind ?x348) (= $x703 $x395)) $x395) (quant-intro (proof-bind ?x86) (= $x395 $x287)) $x287)))
 (let ((@x552 (mp (mp~ @x87 (sk (~ $x287 $x128)) $x128) (rewrite (= $x128 $x594)) $x594)))
 (let ((@x366 (and-elim @x552 $x579)))
 (let ((@x645 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x579) $x612)) @x366 $x612)))
 (let (($x605 (>= ?x88 6)))
 (let ((@x553 (and-elim @x552 $x110)))
 (let ((@x650 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x110) $x605)) @x553 $x605)))
 (let (($x613 (>= ?x580 (- 1))))
 (let ((@x652 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x579) $x613)) @x366 $x613)))
 (let (($x597 (<= ?x88 6)))
 (let ((@x655 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x110) $x597)) @x553 $x597)))
 (let (($x641 (not (<= ?x593 0))))
 (let (($x614 (>= ?x593 0)))
 (let ((@x656 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x614)) @x655 @x652 @x650 @x645 false) $x614)))
 (let ((@x666 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x588 $x641 (not $x614))) (and-elim @x552 $x595) (or $x641 (not $x614)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x666 @x656 $x641) @x655 @x652 @x650 @x645 false)))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.70
 :memory                    3.19
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1201960
 :num-checks                1
 :propagations              12
 :rlimit-count              4180
 :time                      0.01
 :total-time                0.02)
