unsat
((set-logic NIA)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(declare-fun z!0 () Int)
(proof
(let ((?x832 (to_real y!1)))
 (let ((?x346 (to_real x!2)))
 (let ((?x1118 (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832)))
 (let ((?x103 (to_real z!0)))
 (let ((?x884 (* ?x103 ?x103 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832)))
 (let ((?x452 (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832)))
 (let ((?x312 (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832)))
 (let ((?x1142 (* ?x346 ?x346)))
 (let ((?x350 (+ ?x1142 (* (- 4.0) (* ?x103 ?x103 ?x103 ?x346 ?x346)) (* (- 9.0) (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832)) (* 3.0 (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832)) (* (- 3.0) (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832 ?x832)) (* (- 5.0) (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x346)) (* (- 4.0) (* ?x346 ?x346 ?x346 ?x346 ?x346)) ?x312 (* (- 12.0) (* ?x103 ?x103 ?x346 ?x346 ?x346)) (* (- 1.0) (* ?x103 ?x103)) (* 3.0 (* ?x103 ?x103 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832)) ?x452 (* 7.0 (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832)) (* 21.0 (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832)) (* (- 2.0) (* ?x103 ?x346)) (* (- 5.0) (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346)) (* 21.0 (* ?x103 ?x103 ?x346 ?x346 ?x346 ?x346 ?x832)) (* (- 12.0) (* ?x103 ?x346 ?x346 ?x346 ?x346)) (* (- 15.0) (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346)) (* (- 9.0) ?x884) (* 7.0 (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832)) (* (- 15.0) (* ?x103 ?x103 ?x346 ?x346 ?x346 ?x346)) (* (- 3.0) ?x1118) (* (- 2.0) (* ?x346 ?x346 ?x832)))))
 (let (($x152 (<= ?x350 0.0)))
 (let (($x508 (not $x152)))
 (let ((?x1122 (* ?x346 ?x346 ?x832)))
 (let ((?x1154 (* 2.0 ?x1122)))
 (let ((?x1119 (* 3.0 ?x1118)))
 (let ((?x1007 (* ?x103 ?x103 ?x346 ?x346 ?x346 ?x346)))
 (let ((?x945 (* 15.0 ?x1007)))
 (let ((?x1002 (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832)))
 (let ((?x1006 (* (- 7.0) ?x1002)))
 (let ((?x1217 (* 9.0 ?x884)))
 (let ((?x844 (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346)))
 (let ((?x998 (* 15.0 ?x844)))
 (let ((?x839 (* ?x103 ?x346 ?x346 ?x346 ?x346)))
 (let ((?x464 (* 12.0 ?x839)))
 (let ((?x565 (* ?x103 ?x103 ?x346 ?x346 ?x346 ?x346 ?x832)))
 (let ((?x172 (* (- 21.0) ?x565)))
 (let ((?x490 (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346)))
 (let ((?x596 (* 5.0 ?x490)))
 (let ((?x472 (* ?x103 ?x346)))
 (let ((?x1254 (* 2.0 ?x472)))
 (let ((?x459 (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832)))
 (let ((?x495 (* (- 21.0) ?x459)))
 (let ((?x393 (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832)))
 (let ((?x938 (* (- 7.0) ?x393)))
 (let ((?x1162 (* (- 1.0) ?x452)))
 (let ((?x404 (* ?x103 ?x103 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832)))
 (let ((?x441 (* (- 3.0) ?x404)))
 (let ((?x367 (* ?x103 ?x103)))
 (let ((?x323 (* ?x103 ?x103 ?x346 ?x346 ?x346)))
 (let ((?x156 (* 12.0 ?x323)))
 (let ((?x984 (* (- 1.0) ?x312)))
 (let ((?x241 (* ?x346 ?x346 ?x346 ?x346 ?x346)))
 (let ((?x1187 (* 4.0 ?x241)))
 (let ((?x180 (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x346)))
 (let ((?x1001 (* 5.0 ?x180)))
 (let ((?x106 (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832 ?x832)))
 (let ((?x244 (* 3.0 ?x106)))
 (let ((?x1395 (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832)))
 (let ((?x453 (* (- 3.0) ?x1395)))
 (let ((?x646 (* ?x103 ?x346 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832)))
 (let ((?x887 (* 9.0 ?x646)))
 (let ((?x1148 (* ?x103 ?x103 ?x103 ?x346 ?x346)))
 (let ((?x497 (* 4.0 ?x1148)))
 (let ((?x1121 (* (- 1.0) ?x1142)))
 (let ((?x571 (+ ?x1121 ?x497 ?x887 ?x453 ?x244 ?x1001 ?x1187 ?x984 ?x156 ?x367 ?x441 ?x1162 ?x938 ?x495 ?x1254 ?x596 ?x172 ?x464 ?x998 ?x1217 ?x1006 ?x945 ?x1119 ?x1154)))
 (let (($x980 (>= ?x571 0.0)))
 (let (($x579 (not $x980)))
 (let (($x450 (<= ?x571 0.0)))
 (let (($x885 (>= ?x350 0.0)))
 (let ((?x48 (to_real z00)))
 (let ((?x209 (* (- 1.0) ?x48)))
 (let ((?x122 (to_real y00)))
 (let ((?x118 (to_real x00)))
 (let ((?x123 (* ?x118 ?x122)))
 (let ((?x129 (* (- 1.0) ?x123)))
 (let ((?x175 (* ?x346 ?x832)))
 (let ((?x682 (+ ?x175 ?x129 ?x103 ?x209)))
 (let (($x217 (<= ?x682 0.0)))
 (let ((?x1251 (+ (* (- 1.0) (to_real (* x00 y00))) ?x123)))
 (let (($x1061 (>= ?x1251 0.0)))
 (let (($x777 (= 0.0 ?x1251)))
 (let ((@x1110 (symm (commutativity (= $x777 (= ?x1251 0.0))) (= (= ?x1251 0.0) $x777))))
 (let ((@x1070 (mp ((_ th-lemma arith) (= ?x1251 0.0)) @x1110 $x777)))
 (let ((@x165 ((_ th-lemma arith triangle-eq) (or (not $x777) $x1061))))
 (let ((@x740 (unit-resolution @x165 (lemma (unit-resolution (hypothesis (not $x777)) @x1070 false) $x777) $x1061)))
 (let ((?x221 (+ ?x175 (* (- 1.0) (to_real (* x!2 y!1))))))
 (let (($x164 (<= ?x221 0.0)))
 (let (($x1218 (= ?x221 0.0)))
 (let ((@x419 (lemma (unit-resolution ((_ th-lemma arith) $x1218) (hypothesis (not $x1218)) false) $x1218)))
 (let ((@x182 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1218) $x164)) @x419 $x164)))
 (let ((?x96 (* x00 y00)))
 (let ((?x352 (+ z00 ?x96 (* (- 1) z!0) (* (- 1) (* x!2 y!1)))))
 (let (($x825 (>= ?x352 0)))
 (let (($x917 (= 0 ?x352)))
 (let ((@x357 (symm (commutativity (= $x917 (= ?x352 0))) (= (= ?x352 0) $x917))))
 (let (($x893 (= ?x352 0)))
 (let ((?x716 (+ ?x244 ?x1001 ?x1187 ?x984 ?x156 ?x367 ?x938 ?x441 ?x1162 ?x495 ?x1254 ?x596 ?x172 ?x887 ?x464 ?x998 ?x1217 ?x1006 ?x945 ?x1119 ?x1154 ?x1121 ?x497 ?x453)))
 (let ((?x1173 (* (+ ?x209 ?x103 ?x129 ?x175) ?x716)))
 (let (($x665 (= ?x1173 0.0)))
 (let (($x1197 (not $x665)))
 (let ((?x964 (* ?x103 ?x103 ?x103)))
 (let ((?x939 (* (- 1.0) (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832 ?x832))))
 (let ((?x448 (* (- 1.0) (* ?x103 ?x103 ?x118 ?x122))))
 (let ((?x1033 (* 2.0 (* ?x346 ?x346 ?x346 ?x832 ?x832))))
 (let ((?x714 (+ ?x1033 (* ?x48 ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832) (* 4.0 ?x393) ?x448 (* (- 4.0) (* ?x103 ?x103 ?x103 ?x118 ?x122 ?x346 ?x346)) (* (- 2.0) (* ?x48 ?x346 ?x346 ?x832)) (* ?x103 ?x103 ?x103 ?x118 ?x122 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832) (* (- 2.0) (* ?x118 ?x122 ?x346 ?x346 ?x832)) (* 4.0 (* ?x103 ?x103 ?x103 ?x103 ?x346 ?x346)) (* (- 4.0) (* ?x48 ?x103 ?x103 ?x103 ?x346 ?x346)) (* (- 1.0) (* ?x103 ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832 ?x832 ?x832)) (* (- 4.0) (* ?x103 ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832)) (* (- 4.0) (* ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x346 ?x832 ?x832)) ?x939 (* ?x103 ?x103 ?x346 ?x832) (* (- 1.0) (* ?x48 ?x103 ?x103)) ?x964 (* 4.0 (* ?x103 ?x103 ?x103 ?x118 ?x122 ?x346 ?x346 ?x346 ?x832)) (* 4.0 (* ?x48 ?x103 ?x103 ?x103 ?x346 ?x346 ?x346 ?x832)) (* 2.0 (* ?x103 ?x346 ?x346 ?x832)))))
 (let (($x1404 (= ?x714 0.0)))
 (let (($x855 (or (not $x1404) $x1197)))
 (let (($x1101 (and $x893 $x855)))
 (let ((?x1124 (+ ?x1187 (* 12.0 (* ?x346 ?x346 ?x346 ?x346 ?x103)) (* 12.0 (* ?x346 ?x346 ?x346 ?x103 ?x103)) (* 4.0 (* ?x346 ?x346 ?x103 ?x103 ?x103)) ?x1001 ?x1006 (* 15.0 (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x103)) (* (- 21.0) (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x103 ?x832)) (* 15.0 (* ?x346 ?x346 ?x346 ?x346 ?x103 ?x103)) (* (- 21.0) (* ?x346 ?x346 ?x346 ?x346 ?x103 ?x103 ?x832)) (* 5.0 (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103)) (* (- 7.0) (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832)) ?x1121 ?x1154 ?x1119 ?x984 (* 9.0 (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x103 ?x832 ?x832)) (* (- 3.0) (* ?x346 ?x346 ?x346 ?x346 ?x346 ?x103 ?x832 ?x832 ?x832)) (* 9.0 (* ?x346 ?x346 ?x346 ?x346 ?x103 ?x103 ?x832 ?x832)) (* (- 3.0) (* ?x346 ?x346 ?x346 ?x346 ?x103 ?x103 ?x832 ?x832 ?x832)) (* 3.0 (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832 ?x832)) (* (- 1.0) (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832 ?x832 ?x832)) ?x367 (* 2.0 (* ?x346 ?x103)))))
 (let ((?x685 (* (- 1.0) (* ?x346 ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832 ?x832 ?x832 ?x832))))
 (let ((?x378 (+ (* 4.0 (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832)) (* 4.0 (* ?x346 ?x346 ?x103 ?x103 ?x103 ?x103)) (* (- 4.0) (* ?x346 ?x346 ?x103 ?x103 ?x103 ?x48)) (* (- 4.0) (* ?x346 ?x346 ?x103 ?x103 ?x103 ?x118 ?x122)) (* (- 4.0) (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x103 ?x832)) (* 4.0 (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x48 ?x832)) (* 4.0 (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832 ?x118 ?x122)) (* (- 4.0) (* ?x346 ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832 ?x832)) (* 2.0 (* ?x346 ?x346 ?x103 ?x832)) (* (- 2.0) (* ?x346 ?x346 ?x48 ?x832)) (* (- 2.0) (* ?x346 ?x346 ?x832 ?x118 ?x122)) ?x1033 (* (- 1.0) (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x103 ?x832 ?x832 ?x832)) (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x48 ?x832 ?x832 ?x832) (* ?x346 ?x346 ?x346 ?x103 ?x103 ?x103 ?x832 ?x832 ?x832 ?x118 ?x122) ?x685 ?x964 (* (- 1.0) (* ?x103 ?x103 ?x48)) ?x448 (* ?x346 ?x103 ?x103 ?x832))))
 (let (($x890 (or (not (= ?x378 0.0)) (not (= (* (+ ?x103 ?x209 ?x129 ?x175) ?x1124) 0.0)))))
 (let (($x1072 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x96)) 0) $x890)))
 (let (($x440 (exists ((x Int) (y Int) (z Int) )(! (let ((?x46 (to_real z)))
 (let ((?x1286 (* ?x46 ?x46)))
 (let ((?x67 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x1315 (+ (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43)) (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x46)) (* 12.0 (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46)) (* 5.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* (- 7.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67)) (* 15.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* (- 21.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67)) (* 15.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* (- 21.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67)) (* 5.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* (- 7.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)) (* (- 1.0) (* ?x43 ?x43)) (* 2.0 (* ?x43 ?x43 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67 ?x67)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67 ?x67)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67)) ?x1286 (* 2.0 (* ?x43 ?x46)))))
 (let ((?x122 (to_real y00)))
 (let ((?x118 (to_real x00)))
 (let ((?x123 (* ?x118 ?x122)))
 (let ((?x129 (* (- 1.0) ?x123)))
 (let ((?x48 (to_real z00)))
 (let ((?x209 (* (- 1.0) ?x48)))
 (let ((?x1509 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x67))))
 (let ((?x1529 (+ (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)) (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x48)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x118 ?x122)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x67)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x67)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x118 ?x122)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* 2.0 (* ?x43 ?x43 ?x46 ?x67)) (* (- 2.0) (* ?x43 ?x43 ?x48 ?x67)) (* (- 2.0) (* ?x43 ?x43 ?x67 ?x118 ?x122)) (* 2.0 (* ?x43 ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x67 ?x67 ?x67) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x118 ?x122) ?x1509 (* ?x46 ?x46 ?x46) (* (- 1.0) (* ?x46 ?x46 ?x48)) (* (- 1.0) (* ?x46 ?x46 ?x118 ?x122)) (* ?x43 ?x46 ?x46 ?x67))))
 (let (($x295 (not (= ?x1529 0.0))))
 (let (($x390 (or $x295 (not (= (* (+ ?x46 ?x209 ?x129 (* ?x43 ?x67)) ?x1315) 0.0)))))
 (let (($x124 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x124 $x390))))))))))))))))) :qid k!28))
 ))
 (let (($x358 (exists ((x Int) (y Int) (z Int) )(! (let ((?x46 (to_real z)))
 (let ((?x1286 (* ?x46 ?x46)))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x425 (+ (* 4.0 (* ?x46 ?x46 ?x46 ?x43 ?x43)) (* (- 4.0) (* ?x46 ?x46 ?x46 ?x67 ?x43 ?x43 ?x43)) (* 2.0 (* ?x67 ?x43 ?x43)) (* (- 1.0) (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43)) ?x1286)))
 (let ((?x48 (to_real z00)))
 (let ((?x209 (* (- 1.0) ?x48)))
 (let ((?x122 (to_real y00)))
 (let ((?x118 (to_real x00)))
 (let ((?x123 (* ?x118 ?x122)))
 (let ((?x129 (* (- 1.0) ?x123)))
 (let ((?x174 (* (/ 1.0 2.0) ?x67)))
 (let ((?x407 (+ (- (/ 1.0 2.0)) ?x174)))
 (let ((?x250 (+ ?x46 ?x43)))
 (let ((?x467 (+ (* 4.0 (* ?x43 ?x43 ?x250 ?x250 ?x250)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407)) (* 4.0 (* ?x43 ?x43 ?x407)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407 ?x407 ?x407)) (* ?x250 ?x250))))
 (let (($x196 (= (* (+ ?x129 (* 2.0 (* ?x43 ?x407)) ?x46 ?x43 ?x209) ?x467) 0.0)))
 (let (($x1181 (or (not $x196) (not (= (* (+ ?x129 (* ?x67 ?x43) ?x46 ?x209) ?x425) 0.0)))))
 (let (($x1215 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x1215 $x1181))))))))))))))))))) :qid k!28))
 ))
 (let ((?x975 (lambda ((x Int) (y Int) (z Int) )(let ((?x46 (to_real z)))
 (let ((?x1286 (* ?x46 ?x46)))
 (let ((?x67 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x1315 (+ (* 4.0 (* ?x43 ?x43 ?x43 ?x43 ?x43)) (* 12.0 (* ?x43 ?x43 ?x43 ?x43 ?x46)) (* 12.0 (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46)) (* 5.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43)) (* (- 7.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67)) (* 15.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46)) (* (- 21.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67)) (* 15.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46)) (* (- 21.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67)) (* 5.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46)) (* (- 7.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)) (* (- 1.0) (* ?x43 ?x43)) (* 2.0 (* ?x43 ?x43 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x43 ?x67 ?x67 ?x67)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x43 ?x46 ?x67 ?x67 ?x67)) (* 9.0 (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x67 ?x67 ?x67)) (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67)) ?x1286 (* 2.0 (* ?x43 ?x46)))))
 (let ((?x122 (to_real y00)))
 (let ((?x118 (to_real x00)))
 (let ((?x123 (* ?x118 ?x122)))
 (let ((?x129 (* (- 1.0) ?x123)))
 (let ((?x48 (to_real z00)))
 (let ((?x209 (* (- 1.0) ?x48)))
 (let ((?x1509 (* (- 1.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x67))))
 (let ((?x1529 (+ (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67)) (* 4.0 (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x46)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x48)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x46 ?x46 ?x118 ?x122)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x67)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x67)) (* 4.0 (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x118 ?x122)) (* (- 4.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67)) (* 2.0 (* ?x43 ?x43 ?x46 ?x67)) (* (- 2.0) (* ?x43 ?x43 ?x48 ?x67)) (* (- 2.0) (* ?x43 ?x43 ?x67 ?x118 ?x122)) (* 2.0 (* ?x43 ?x43 ?x43 ?x67 ?x67)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x48 ?x67 ?x67 ?x67) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x118 ?x122) ?x1509 (* ?x46 ?x46 ?x46) (* (- 1.0) (* ?x46 ?x46 ?x48)) (* (- 1.0) (* ?x46 ?x46 ?x118 ?x122)) (* ?x43 ?x46 ?x46 ?x67))))
 (let (($x295 (not (= ?x1529 0.0))))
 (let (($x390 (or $x295 (not (= (* (+ ?x46 ?x209 ?x129 (* ?x43 ?x67)) ?x1315) 0.0)))))
 (let (($x124 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x292 (and $x124 $x390)))
 (let ((?x425 (+ (* 4.0 (* ?x46 ?x46 ?x46 ?x43 ?x43)) (* (- 4.0) (* ?x46 ?x46 ?x46 ?x67 ?x43 ?x43 ?x43)) (* 2.0 (* ?x67 ?x43 ?x43)) (* (- 1.0) (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43)) ?x1286)))
 (let ((?x174 (* (/ 1.0 2.0) ?x67)))
 (let ((?x407 (+ (- (/ 1.0 2.0)) ?x174)))
 (let ((?x250 (+ ?x46 ?x43)))
 (let ((?x467 (+ (* 4.0 (* ?x43 ?x43 ?x250 ?x250 ?x250)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407)) (* 4.0 (* ?x43 ?x43 ?x407)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407 ?x407 ?x407)) (* ?x250 ?x250))))
 (let (($x196 (= (* (+ ?x129 (* 2.0 (* ?x43 ?x407)) ?x46 ?x43 ?x209) ?x467) 0.0)))
 (let (($x1181 (or (not $x196) (not (= (* (+ ?x129 (* ?x67 ?x43) ?x46 ?x209) ?x425) 0.0)))))
 (let (($x1215 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x1484 (and $x1215 $x1181)))
 (rewrite (= $x1484 $x292)))))))))))))))))))))))))))))
 ))
 (let (($x326 (exists ((x Int) (y Int) (z Int) )(! (let ((?x46 (to_real z)))
 (let ((?x1286 (* ?x46 ?x46)))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x425 (+ (* 4.0 (* ?x46 ?x46 ?x46 ?x43 ?x43)) (* (- 4.0) (* ?x46 ?x46 ?x46 ?x67 ?x43 ?x43 ?x43)) (* 2.0 (* ?x67 ?x43 ?x43)) (* (- 1.0) (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43)) ?x1286)))
 (let ((?x48 (to_real z00)))
 (let ((?x209 (* (- 1.0) ?x48)))
 (let ((?x122 (to_real y00)))
 (let ((?x118 (to_real x00)))
 (let ((?x123 (* ?x118 ?x122)))
 (let ((?x129 (* (- 1.0) ?x123)))
 (let ((?x174 (* (/ 1.0 2.0) ?x67)))
 (let ((?x407 (+ (- (/ 1.0 2.0)) ?x174)))
 (let ((?x250 (+ ?x46 ?x43)))
 (let ((?x467 (+ (* 4.0 (* ?x43 ?x43 ?x250 ?x250 ?x250)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407)) (* 4.0 (* ?x43 ?x43 ?x407)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407 ?x407 ?x407)) (* ?x250 ?x250))))
 (let (($x196 (= (* (+ ?x129 (* 2.0 (* ?x43 ?x407)) ?x46 ?x43 ?x209) ?x467) 0.0)))
 (let (($x1181 (or (not $x196) (not (= (* (+ ?x129 (* ?x67 ?x43) ?x46 ?x209) ?x425) 0.0)))))
 (let (($x348 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x348 $x1181))))))))))))))))))) :qid k!28))
 ))
 (let ((?x415 (lambda ((x Int) (y Int) (z Int) )(let ((?x46 (to_real z)))
 (let ((?x1286 (* ?x46 ?x46)))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x425 (+ (* 4.0 (* ?x46 ?x46 ?x46 ?x43 ?x43)) (* (- 4.0) (* ?x46 ?x46 ?x46 ?x67 ?x43 ?x43 ?x43)) (* 2.0 (* ?x67 ?x43 ?x43)) (* (- 1.0) (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43)) ?x1286)))
 (let ((?x48 (to_real z00)))
 (let ((?x209 (* (- 1.0) ?x48)))
 (let ((?x122 (to_real y00)))
 (let ((?x118 (to_real x00)))
 (let ((?x123 (* ?x118 ?x122)))
 (let ((?x129 (* (- 1.0) ?x123)))
 (let ((?x174 (* (/ 1.0 2.0) ?x67)))
 (let ((?x407 (+ (- (/ 1.0 2.0)) ?x174)))
 (let ((?x250 (+ ?x46 ?x43)))
 (let ((?x467 (+ (* 4.0 (* ?x43 ?x43 ?x250 ?x250 ?x250)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407)) (* 4.0 (* ?x43 ?x43 ?x407)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407 ?x407 ?x407)) (* ?x250 ?x250))))
 (let (($x196 (= (* (+ ?x129 (* 2.0 (* ?x43 ?x407)) ?x46 ?x43 ?x209) ?x467) 0.0)))
 (let (($x1181 (or (not $x196) (not (= (* (+ ?x129 (* ?x67 ?x43) ?x46 ?x209) ?x425) 0.0)))))
 (let (($x1215 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x1484 (and $x1215 $x1181)))
 (let (($x348 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x1183 (and $x348 $x1181)))
 (rewrite (= $x1183 $x1484))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((x Int) (y Int) (z Int) )(! (let ((?x64 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x67 (to_real y)))
 (let ((?x68 (/ ?x67 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x75 (- (to_real (* 2 x 2 x z z z)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x68 ?x46 ?x46 ?x46))))
 (let ((?x79 (- (+ ?x75 (* ?x41 ?x43 ?x41 ?x43 ?x68)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x68 ?x68 ?x68 ?x46 ?x46 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x71 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x68) ?x46) ?x48)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (to_real (* 2 x 2 x ?x50 ?x50 ?x50)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x59 (- (+ ?x55 (* ?x41 ?x43 ?x41 ?x43 ?x42)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x63 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (+ ?x59 (to_real (* ?x50 ?x50))))))
 (let (($x86 (or (not (= ?x63 ?x64)) (not (= (* ?x71 (+ ?x79 (to_real (* z z)))) ?x64)))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) $x86)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x443 (lambda ((x Int) (y Int) (z Int) )(let ((?x46 (to_real z)))
 (let ((?x1286 (* ?x46 ?x46)))
 (let ((?x43 (to_real x)))
 (let ((?x67 (to_real y)))
 (let ((?x425 (+ (* 4.0 (* ?x46 ?x46 ?x46 ?x43 ?x43)) (* (- 4.0) (* ?x46 ?x46 ?x46 ?x67 ?x43 ?x43 ?x43)) (* 2.0 (* ?x67 ?x43 ?x43)) (* (- 1.0) (* ?x46 ?x46 ?x46 ?x67 ?x67 ?x67 ?x43 ?x43 ?x43)) ?x1286)))
 (let ((?x48 (to_real z00)))
 (let ((?x209 (* (- 1.0) ?x48)))
 (let ((?x122 (to_real y00)))
 (let ((?x118 (to_real x00)))
 (let ((?x123 (* ?x118 ?x122)))
 (let ((?x129 (* (- 1.0) ?x123)))
 (let ((?x174 (* (/ 1.0 2.0) ?x67)))
 (let ((?x407 (+ (- (/ 1.0 2.0)) ?x174)))
 (let ((?x250 (+ ?x46 ?x43)))
 (let ((?x467 (+ (* 4.0 (* ?x43 ?x43 ?x250 ?x250 ?x250)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407)) (* 4.0 (* ?x43 ?x43 ?x407)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x250 ?x250 ?x250 ?x407 ?x407 ?x407)) (* ?x250 ?x250))))
 (let (($x196 (= (* (+ ?x129 (* 2.0 (* ?x43 ?x407)) ?x46 ?x43 ?x209) ?x467) 0.0)))
 (let (($x1181 (or (not $x196) (not (= (* (+ ?x129 (* ?x67 ?x43) ?x46 ?x209) ?x425) 0.0)))))
 (let (($x348 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x1183 (and $x348 $x1181)))
 (let ((?x64 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x68 (/ ?x67 ?x41)))
 (let ((?x75 (- (to_real (* 2 x 2 x z z z)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x68 ?x46 ?x46 ?x46))))
 (let ((?x79 (- (+ ?x75 (* ?x41 ?x43 ?x41 ?x43 ?x68)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x68 ?x68 ?x68 ?x46 ?x46 ?x46))))
 (let ((?x71 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x68) ?x46) ?x48)))
 (let ((?x50 (+ z x)))
 (let ((?x52 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (- (to_real (* 2 x 2 x ?x50 ?x50 ?x50)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x59 (- (+ ?x55 (* ?x41 ?x43 ?x41 ?x43 ?x42)) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x52 ?x52 ?x52))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x63 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (+ ?x59 (to_real (* ?x50 ?x50))))))
 (let (($x86 (or (not (= ?x63 ?x64)) (not (= (* ?x71 (+ ?x79 (to_real (* z z)))) ?x64)))))
 (let (($x87 (and (= (- (+ ?x31 (* x y) z) z00) 0) $x86)))
 (rewrite (= $x87 $x1183))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x247 (mp (mp @x89 (quant-intro (proof-bind ?x443) (= $x88 $x326)) $x326) (rewrite (= $x326 $x326)) $x326)))
 (let ((@x677 (mp (mp @x247 (quant-intro (proof-bind ?x415) (= $x326 $x358)) $x358) (quant-intro (proof-bind ?x975) (= $x358 $x440)) $x440)))
 (let ((@x486 (mp (mp~ @x677 (sk (~ $x440 $x1072)) $x1072) (rewrite (= $x1072 $x1101)) $x1101)))
 (let ((@x1226 (mp (and-elim @x486 $x893) @x357 $x917)))
 (let ((@x502 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x917) $x825)) @x1226 $x825)))
 (let ((@x718 (lemma ((_ th-lemma arith) @x502 (hypothesis (not $x217)) @x182 (hypothesis $x1061) false) (or (not $x1061) $x217))))
 (let (($x1150 (not $x885)))
 (let ((@x506 (hypothesis $x1150)))
 (let (($x489 (<= ?x1173 0.0)))
 (let (($x730 (not $x489)))
 (let (($x379 (>= ?x1173 0.0)))
 (let (($x1147 (not $x379)))
 (let ((@x1149 (hypothesis $x1147)))
 (let (($x680 (>= ?x682 0.0)))
 (let (($x462 (>= ?x221 0.0)))
 (let ((@x201 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1218) $x462)) @x419 $x462)))
 (let (($x1201 (<= ?x1251 0.0)))
 (let (($x399 (<= ?x352 0)))
 (let ((@x400 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x917) $x399)) @x1226 $x399)))
 (let ((@x408 ((_ th-lemma arith) (hypothesis (not $x680)) (hypothesis $x462) @x400 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x777) $x1201)) @x1070 $x1201) false)))
 (let ((@x1152 (unit-resolution (lemma @x408 (or (not $x462) $x680)) @x201 $x680)))
 (let ((@x1128 (unit-resolution ((_ th-lemma arith) (or (not $x680) $x885 $x379)) @x1149 @x506 @x1152 false)))
 (let ((@x695 ((_ th-lemma arith) (or $x450 $x1150))))
 (let ((@x1039 (unit-resolution @x695 (unit-resolution (lemma @x1128 (or $x885 $x379)) @x1149 $x885) $x450)))
 (let (($x507 (not $x217)))
 (let ((@x531 (unit-resolution ((_ th-lemma arith) (or $x507 $x152 $x379)) @x1149 (hypothesis $x508) $x507)))
 (let ((@x528 (lemma ((_ th-lemma arith) @x502 @x531 @x182 (unit-resolution @x165 @x1070 $x1061) false) (or $x152 $x379))))
 (let ((@x1117 ((_ th-lemma arith) (or $x508 $x980))))
 (let (($x1127 (= ?x571 0.0)))
 (let (($x510 (not $x1127)))
 (let (($x662 (= 0.0 ?x714)))
 (let (($x111 (>= ?x714 0.0)))
 (let ((@x1434 (unit-resolution ((_ th-lemma arith) (or $x111 (not $x825) (not $x399))) @x400 @x502 (hypothesis (not $x111)) false)))
 (let (($x104 (<= ?x714 0.0)))
 (let ((@x372 (unit-resolution ((_ th-lemma arith) (or (not $x399) (not $x825) $x104 (not $x462) (not $x164))) @x400 @x502 (hypothesis (not $x104)) @x201 @x182 false)))
 (let ((@x511 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x662 (not $x104) (not $x111))) (lemma @x372 $x104) (lemma @x1434 $x111) $x662)))
 (let ((@x537 (unit-resolution (and-elim @x486 $x855) (mp @x511 (commutativity (= $x662 $x1404)) $x1404) $x1197)))
 (let ((@x582 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x510 $x665)) @x537 $x510) (symm (hypothesis (= 0.0 ?x571)) $x1127) false)))
 (let ((@x572 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= 0.0 ?x571) (not $x450) $x579)) (lemma @x582 (not (= 0.0 ?x571))) (or (not $x450) $x579))))
 (let ((@x515 (unit-resolution @x572 (unit-resolution @x1117 (unit-resolution @x528 @x1149 $x152) $x980) @x1039 false)))
 (let (($x112 (= 0.0 ?x1173)))
 (let (($x734 (not $x112)))
 (let ((@x522 (monotonicity (symm (commutativity (= $x112 $x665)) (= $x665 $x112)) (= $x1197 $x734))))
 (let ((@x523 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x112 $x730 $x1147)) (mp @x537 @x522 $x734) (or $x730 $x1147))))
 (let ((@x649 (unit-resolution @x523 (lemma @x515 $x379) $x730)))
 (let ((@x742 (unit-resolution ((_ th-lemma arith) (or $x507 $x885 $x489)) @x649 @x506 (unit-resolution @x718 @x740 $x217) false)))
 (let ((@x745 (unit-resolution @x572 (unit-resolution @x695 (lemma @x742 $x885) $x450) $x579)))
 (unit-resolution ((_ th-lemma arith) (or (not $x680) $x152 $x489)) @x649 @x1152 (unit-resolution @x1117 @x745 $x508) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      40
 :arith-eq-adapter               53
 :arith-bound-propagations-cheap 43
 :arith-bound-propagations-lp    7
 :arith-conflicts                118
 :arith-diseq                    39
 :arith-gcd-calls                6
 :arith-grobner-calls            5
 :arith-grobner-conflicts        2
 :arith-horner-calls             5
 :arith-lower                    83
 :arith-make-feasible            55
 :arith-max-columns              84
 :arith-max-rows                 18
 :arith-nla-explanations         73
 :arith-nla-lemmas               115
 :arith-patches                  6
 :arith-patches-success          6
 :arith-propagations             43
 :arith-upper                    68
 :conflicts                      13
 :decisions                      135
 :del-clause                     136
 :final-checks                   38
 :max-memory                     4.88
 :memory                         3.29
 :mk-bool-var                    276
 :mk-clause                      217
 :num-allocs                     13726481
 :num-checks                     1
 :propagations                   166
 :rlimit-count                   8480
 :time                           0.04
 :total-time                     0.05)
