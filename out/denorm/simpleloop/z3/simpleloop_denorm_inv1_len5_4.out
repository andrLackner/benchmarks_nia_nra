unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x328 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x213 (>= ?x328 0)))
 (let (($x327 (= ?x328 0)))
 (let ((?x376 (* x!1 x!1 x!1 y!0)))
 (let ((?x313 (* y!0 y!0 y!0)))
 (let ((?x309 (* 4 (* y!0 y!0))))
 (let ((?x286 (* 5 y!0)))
 (let ((?x364 (* (- 1) (* x!1 y!0 y!0 y!0))))
 (let ((?x312 (* (- 1) (* x!1 x!1 y!0))))
 (let ((?x121 (* (- 2) (* x!1 x!1))))
 (let ((?x236 (* (- 5) (* x!1 y!0 y!0))))
 (let ((?x75 (* (- 4) (* x!1 y!0))))
 (let ((?x76 (* x!1 x!1 x!1)))
 (let ((?x67 (* x!1 x!1 y!0 y!0)))
 (let ((?x295 (* (+ (* (- 1) y00) (* (- 1) x00) x!1 y!0) (+ 1 ?x67 ?x76 ?x75 ?x236 ?x121 ?x312 ?x364 ?x286 ?x309 ?x313 ?x376))))
 (let (($x279 (= ?x295 0)))
 (let (($x131 (not $x279)))
 (let (($x176 (and $x327 $x131)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x68 (+ x!1 y!0 ?x53 ?x60)))
 (let ((?x89 (* ?x68 (+ 1 ?x286 ?x309 ?x236 ?x67 ?x121 ?x75 ?x312 ?x376 ?x76 ?x313 ?x364))))
 (let (($x372 (and (= ?x68 0) (not (= ?x89 0)))))
 (let (($x207 (exists ((x Int) (y Int) )(! (let ((?x347 (* (- 1) (* x y y y))))
 (let ((?x292 (* y y y)))
 (let ((?x240 (* x x x)))
 (let ((?x223 (* x x x y)))
 (let ((?x222 (* (- 1) (* x x y))))
 (let ((?x148 (* x x y y)))
 (let ((?x389 (* (- 5) (* x y y))))
 (let ((?x387 (* 4 (* y y))))
 (let ((?x385 (* 5 y)))
 (let ((?x369 (+ 1 ?x385 ?x387 ?x389 ?x148 (* (- 2) (* x x)) (* (- 4) (* x y)) ?x222 ?x223 ?x240 ?x292 ?x347)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let (($x79 (= ?x74 0)))
 (and $x79 (not (= (* ?x74 ?x369) 0))))))))))))))))) :qid k!26))
 ))
 (let (($x418 (exists ((x Int) (y Int) )(! (let ((?x347 (* (- 1) (* x y y y))))
 (let ((?x292 (* y y y)))
 (let ((?x240 (* x x x)))
 (let ((?x223 (* x x x y)))
 (let ((?x222 (* (- 1) (* x x y))))
 (let ((?x148 (* x x y y)))
 (let ((?x389 (* (- 5) (* x y y))))
 (let ((?x387 (* 4 (* y y))))
 (let ((?x385 (* 5 y)))
 (let ((?x390 (+ 1 ?x385 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x387 ?x389 ?x148 (* (- 1) (* x x)) (* (- 3) (* x y)) ?x222 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x223 ?x240 ?x292 ?x347)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let (($x79 (= ?x74 0)))
 (and $x79 (not (= (* ?x74 ?x390) 0))))))))))))))))) :qid k!26))
 ))
 (let ((?x162 (lambda ((x Int) (y Int) )(let ((?x347 (* (- 1) (* x y y y))))
 (let ((?x292 (* y y y)))
 (let ((?x240 (* x x x)))
 (let ((?x223 (* x x x y)))
 (let ((?x222 (* (- 1) (* x x y))))
 (let ((?x148 (* x x y y)))
 (let ((?x389 (* (- 5) (* x y y))))
 (let ((?x387 (* 4 (* y y))))
 (let ((?x385 (* 5 y)))
 (let ((?x369 (+ 1 ?x385 ?x387 ?x389 ?x148 (* (- 2) (* x x)) (* (- 4) (* x y)) ?x222 ?x223 ?x240 ?x292 ?x347)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let (($x79 (= ?x74 0)))
 (let (($x255 (and $x79 (not (= (* ?x74 ?x369) 0)))))
 (let ((?x390 (+ 1 ?x385 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x387 ?x389 ?x148 (* (- 1) (* x x)) (* (- 3) (* x y)) ?x222 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x223 ?x240 ?x292 ?x347)))
 (let (($x195 (and $x79 (not (= (* ?x74 ?x390) 0)))))
 (rewrite (= $x195 $x255))))))))))))))))))))
 ))
 (let (($x253 (exists ((x Int) (y Int) )(! (let ((?x244 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x248 (+ y (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x244)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x166 (+ x ?x53 ?x60 y)))
 (and (= ?x166 0) (not (= (* ?x166 ?x248) 0)))))))) :qid k!26))
 ))
 (let ((?x266 (lambda ((x Int) (y Int) )(let ((?x347 (* (- 1) (* x y y y))))
 (let ((?x292 (* y y y)))
 (let ((?x240 (* x x x)))
 (let ((?x223 (* x x x y)))
 (let ((?x222 (* (- 1) (* x x y))))
 (let ((?x148 (* x x y y)))
 (let ((?x389 (* (- 5) (* x y y))))
 (let ((?x387 (* 4 (* y y))))
 (let ((?x385 (* 5 y)))
 (let ((?x390 (+ 1 ?x385 (* (- 1) (* x 1 1)) (* (- 1) (* x y 1)) (* (- 1) (* x 1 y)) ?x387 ?x389 ?x148 (* (- 1) (* x x)) (* (- 3) (* x y)) ?x222 (* (- 1) (* x (- 1) 1)) (* (- 1) (* x x 1)) (* (- 1) (* x (- 1) y)) ?x223 ?x240 ?x292 ?x347)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x74 (+ x y ?x53 ?x60)))
 (let (($x79 (= ?x74 0)))
 (let (($x195 (and $x79 (not (= (* ?x74 ?x390) 0)))))
 (let ((?x244 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x248 (+ y (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x244)))
 (let ((?x166 (+ x ?x53 ?x60 y)))
 (let (($x209 (and (= ?x166 0) (not (= (* ?x166 ?x248) 0)))))
 (rewrite (= $x209 $x195))))))))))))))))))))))
 ))
 (let (($x50 (exists ((x Int) (y Int) )(! (let ((?x42 (+ (- 1) y 1 (* (- x 1) (- x 1) (+ y 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x44 (- ?x42 (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x46 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x44) 0)))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x46)))))) :qid k!26))
 ))
 (let ((?x235 (lambda ((x Int) (y Int) )(let ((?x244 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x248 (+ y (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ 1 y)) ?x244)))
 (let ((?x60 (* (- 1) x00)))
 (let ((?x53 (* (- 1) y00)))
 (let ((?x166 (+ x ?x53 ?x60 y)))
 (let (($x209 (and (= ?x166 0) (not (= (* ?x166 ?x248) 0)))))
 (let ((?x42 (+ (- 1) y 1 (* (- x 1) (- x 1) (+ y 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1) (+ y 1)))))
 (let ((?x44 (- ?x42 (* (- x 1) (+ y 1) (+ y 1) (+ y 1)))))
 (let (($x46 (= (* (+ (- (- (- x 1) y00) x00) y 1) ?x44) 0)))
 (let (($x49 (and (= (+ (- (- x y00) x00) y) 0) (or (not $x46)))))
 (rewrite (= $x49 $x209)))))))))))))
 ))
 (let ((@x51 (asserted $x50)))
 (let ((@x179 (mp (mp @x51 (quant-intro (proof-bind ?x235) (= $x50 $x253)) $x253) (rewrite (= $x253 $x253)) $x253)))
 (let ((@x256 (mp (mp @x179 (quant-intro (proof-bind ?x266) (= $x253 $x418)) $x418) (quant-intro (proof-bind ?x162) (= $x418 $x207)) $x207)))
 (let ((@x169 (mp (mp~ @x256 (sk (~ $x207 $x372)) $x372) (rewrite (= $x372 $x176)) $x176)))
 (let ((@x163 (and-elim @x169 $x327)))
 (let ((@x246 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x327) $x213)) @x163 $x213)))
 (let (($x214 (<= ?x328 0)))
 (let ((@x206 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x327) $x214)) @x163 $x214)))
 (let (($x152 (not (>= ?x295 0))))
 (let (($x156 (<= ?x295 0)))
 (let ((@x155 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x279 (not $x156) $x152)) (and-elim @x169 $x131) (or (not $x156) $x152))))
 (let ((@x242 (unit-resolution @x155 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x156)) @x206 @x246 false) $x156) $x152)))
 ((_ th-lemma arith farkas 1 1 1) @x242 @x206 @x246 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             58
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 25
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.59
 :memory                    3.10
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1105451
 :num-checks                1
 :propagations              4
 :rlimit-count              1720
 :time                      0.01
 :total-time                0.01)
