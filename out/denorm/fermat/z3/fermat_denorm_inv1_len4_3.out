unsat
((set-logic NIA)
(declare-fun u!1 () Int)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x971 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x680 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 2) u!1) (* (- 4) r!2) (* 2 v!0) (* (- 1) (* v!0 v!0)) ?x971)))
 (let (($x887 (>= ?x680 0)))
 (let (($x682 (= ?x680 0)))
 (let ((?x972 (* (- 1) ?x971)))
 (let ((?x939 (* v!0 v!0)))
 (let ((?x296 (* (- 2) v!0)))
 (let ((?x301 (* 4 r!2)))
 (let ((?x652 (* 2 u!1)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x196 (+ ?x106 ?x122 ?x41 ?x46 ?x198 ?x652 ?x301 ?x296 ?x939 ?x972)))
 (let ((?x695 (* 8 (* u!1 u!1 v!0))))
 (let ((?x979 (* u!1 u!1 u!1 r!2 r!2 v!0)))
 (let ((?x1029 (* 8 (* r!2 r!2 v!0))))
 (let ((?x525 (* (- 2) ?x939)))
 (let ((?x882 (* 6 (* u!1 u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x698 (* u!1 u!1 u!1 r!2 r!2 r!2 v!0 v!0)))
 (let ((?x655 (* 6 (* u!1 u!1 u!1 u!1 v!0))))
 (let ((?x498 (* u!1 u!1 u!1 u!1 u!1 v!0)))
 (let ((?x403 (* 12 (* u!1 u!1 u!1 u!1 v!0 v!0))))
 (let ((?x356 (* r!2 r!2)))
 (let ((?x348 (* u!1 u!1 u!1 v!0 v!0)))
 (let ((?x505 (* 8 ?x348)))
 (let ((?x101 (* (- 1) (* u!1 v!0 v!0))))
 (let ((?x288 (* 8 (* r!2 r!2 r!2 v!0 v!0))))
 (let ((?x182 (* u!1 u!1 u!1 u!1 u!1 u!1 v!0 v!0)))
 (let ((?x319 (* 12 (* u!1 u!1 u!1 v!0))))
 (let ((?x896 (+ ?x319 ?x182 ?x288 (* 36 (* u!1 u!1 u!1 r!2 v!0 v!0)) ?x101 ?x505 ?x356 (* 16 (* u!1 r!2 v!0)) (* 12 (* u!1 u!1 u!1 r!2 v!0)) (* 2 (* u!1 u!1 u!1 u!1 r!2 v!0)) (* 24 (* u!1 u!1 r!2 v!0 v!0)) ?x403 (* 12 (* u!1 r!2 r!2 r!2 v!0 v!0)) (* 36 (* u!1 u!1 r!2 r!2 v!0 v!0)) (* 2 (* u!1 r!2)) ?x498 (* 6 (* u!1 u!1 r!2 r!2 r!2 v!0 v!0)) ?x655 ?x698 (* 6 (* u!1 u!1 r!2 r!2 v!0)) (* 24 (* u!1 u!1 r!2 v!0)) ?x882 (* 24 (* u!1 r!2 r!2 v!0 v!0)) (* 12 (* u!1 r!2 r!2 v!0)) (* 3 (* u!1 u!1 u!1 u!1 r!2 r!2 v!0 v!0)) (* 18 (* u!1 u!1 u!1 u!1 r!2 v!0 v!0)) (* 3 (* u!1 u!1 u!1 u!1 u!1 r!2 v!0 v!0)) (* 18 (* u!1 u!1 u!1 r!2 r!2 v!0 v!0)) ?x525 ?x1029 ?x971 ?x979 ?x695)))
 (let ((?x597 (* ?x896 ?x196)))
 (let (($x406 (= ?x597 0)))
 (let (($x635 (not $x406)))
 (let ((?x293 (* (- 1) (* u!1 u!1 u!1 v!0 v!0 v!0 v!0 v!0))))
 (let ((?x681 (* (- 3) (* u!1 u!1 u!1 v!0 v!0 v!0))))
 (let ((?x448 (* (- 4) (* u!1 u!1 u!1 v!0 v!0 v!0 v!0))))
 (let ((?x453 (* 2 ?x348)))
 (let ((?x115 (* (- 4) u!1)))
 (let ((?x173 (* (- 2) (* r!2 v!0))))
 (let ((?x1192 (* (- 4) (* u!1 v!0))))
 (let ((?x636 (+ ?x1192 (* 10 (* u!1 u!1 u!1 r!2 v!0 v!0)) ?x173 ?x115 ?x101 ?x453 ?x356 (* (- 4) (* u!1 u!1 u!1 r!2 v!0)) ?x448 (* 4 (* u!1 u!1 u!1 r!2 r!2 r!2 v!0)) (* 12 (* u!1 u!1 u!1 r!2 v!0 v!0 v!0)) (* (- 3) (* u!1 u!1 u!1 r!2 r!2 v!0 v!0 v!0)) (* 3 (* u!1 u!1 u!1 r!2 v!0 v!0 v!0 v!0)) ?x681 ?x698 (* 2 (* u!1 u!1 u!1 r!2 r!2)) (* (- 12) (* u!1 u!1 u!1 r!2 r!2 v!0 v!0)) ?x939 (* (- 11) ?x979) (* 4 (* u!1 u!1 u!1 r!2 r!2 r!2)) ?x293)))
 (let ((?x316 (* ?x636 ?x196)))
 (let (($x431 (= ?x316 0)))
 (let (($x424 (or (not $x431) $x635)))
 (let (($x970 (and $x682 $x424)))
 (let ((?x860 (+ ?x301 ?x652 ?x296 ?x106 ?x122 ?x41 ?x972 ?x939 ?x46 ?x198)))
 (let ((?x1262 (* r!2 r!2 r!2 u!1 u!1 u!1 v!0 v!0)))
 (let ((?x223 (+ ?x115 ?x939 ?x101 ?x1262 (* 4 (* r!2 r!2 r!2 u!1 u!1 u!1)) (* (- 11) (* r!2 r!2 u!1 u!1 u!1 v!0)) (* 10 (* r!2 u!1 u!1 u!1 v!0 v!0)) ?x681 (* 4 (* r!2 r!2 r!2 u!1 u!1 u!1 v!0)) (* (- 12) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)) (* 12 (* r!2 u!1 u!1 u!1 v!0 v!0 v!0)) ?x1192 ?x448 (* (- 3) (* r!2 r!2 u!1 u!1 u!1 v!0 v!0 v!0)) (* 3 (* r!2 u!1 u!1 u!1 v!0 v!0 v!0 v!0)) ?x293 ?x356 ?x173 (* 2 (* r!2 r!2 u!1 u!1 u!1)) (* (- 4) (* r!2 u!1 u!1 u!1 v!0)) ?x453)))
 (let ((?x551 (* r!2 r!2 u!1 u!1 u!1 v!0)))
 (let ((?x978 (+ ?x971 ?x525 ?x101 ?x1262 ?x551 (* 36 (* r!2 u!1 u!1 u!1 v!0 v!0)) (* 18 (* r!2 r!2 u!1 u!1 u!1 v!0 v!0)) ?x356 (* 12 (* r!2 u!1 u!1 u!1 v!0)) ?x505 (* 3 (* r!2 r!2 u!1 u!1 u!1 u!1 v!0 v!0)) (* 3 (* r!2 u!1 u!1 u!1 u!1 u!1 v!0 v!0)) ?x182 ?x288 (* 24 (* r!2 r!2 u!1 v!0 v!0)) (* 24 (* r!2 u!1 u!1 v!0 v!0)) (* 12 (* r!2 r!2 r!2 u!1 v!0 v!0)) (* 36 (* r!2 r!2 u!1 u!1 v!0 v!0)) ?x403 (* 6 (* r!2 r!2 r!2 u!1 u!1 v!0 v!0)) (* 18 (* r!2 u!1 u!1 u!1 u!1 v!0 v!0)) ?x882 (* 2 (* r!2 u!1)) (* 2 (* r!2 u!1 u!1 u!1 u!1 v!0)) ?x498 ?x1029 (* 16 (* r!2 u!1 v!0)) ?x695 (* 12 (* r!2 r!2 u!1 v!0)) (* 24 (* r!2 u!1 u!1 v!0)) ?x319 (* 6 (* r!2 r!2 u!1 u!1 v!0)) ?x655)))
 (let (($x962 (and (= ?x860 0) (or (not (= (* ?x978 ?x860) 0)) (not (= (* ?x223 ?x860) 0))))))
 (let (($x497 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x690 (* u u u v v)))
 (let ((?x693 (* 2 ?x690)))
 (let ((?x672 (* r u u u v)))
 (let ((?x717 (* (- 4) ?x672)))
 (let ((?x665 (* 2 (* r r u u u))))
 (let ((?x641 (* (- 2) (* r v))))
 (let ((?x621 (* r r)))
 (let ((?x593 (* (- 1) (* u u u v v v v v))))
 (let ((?x610 (* 3 (* r u u u v v v v))))
 (let ((?x608 (* (- 3) (* r r u u u v v v))))
 (let ((?x508 (* u u u v v v v)))
 (let ((?x606 (* (- 4) ?x508)))
 (let ((?x439 (* (- 4) (* u v))))
 (let ((?x474 (* r u u u v v v)))
 (let ((?x605 (* 12 ?x474)))
 (let ((?x456 (* r r u u u v v)))
 (let ((?x604 (* (- 12) ?x456)))
 (let ((?x603 (* 4 (* r r r u u u v))))
 (let ((?x733 (* (- 3) (* u u u v v v))))
 (let ((?x408 (* r u u u v v)))
 (let ((?x732 (* 10 ?x408)))
 (let ((?x390 (* r r u u u v)))
 (let ((?x730 (* (- 11) ?x390)))
 (let ((?x383 (* 4 (* r r r u u u))))
 (let ((?x369 (* r r r u u u v v)))
 (let ((?x336 (* (- 1) (* u v v))))
 (let ((?x435 (* (- 4) u)))
 (let ((?x579 (+ ?x435 ?x45 ?x336 ?x369 ?x383 ?x730 ?x732 ?x733 ?x603 ?x604 ?x605 ?x439 ?x606 ?x608 ?x610 ?x593 ?x621 ?x641 ?x665 ?x717 ?x693)))
 (let ((?x1294 (* 6 (* u u u u v))))
 (let ((?x1292 (* 6 (* r r u u v))))
 (let ((?x1200 (* 8 (* u u v))))
 (let ((?x1288 (* 16 (* r u v))))
 (let ((?x1184 (* 8 (* r r v))))
 (let ((?x1177 (* u u u u u v)))
 (let ((?x1295 (* 2 (* r u u u u v))))
 (let ((?x1136 (* 2 (* r u))))
 (let ((?x1116 (* 6 (* u u u u u v v))))
 (let ((?x1115 (* 18 (* r u u u u v v))))
 (let ((?x1112 (* 6 (* r r r u u v v))))
 (let ((?x1106 (* 24 (* r u u v v))))
 (let ((?x1105 (* 24 (* r r u v v))))
 (let ((?x858 (* 8 (* r r r v v))))
 (let ((?x850 (* u u u u u u v v)))
 (let ((?x1118 (* 3 (* r u u u u u v v))))
 (let ((?x1117 (* 3 (* r r u u u u v v))))
 (let ((?x901 (* 8 ?x690)))
 (let ((?x1293 (* 12 ?x672)))
 (let ((?x1114 (* 18 ?x456)))
 (let ((?x779 (* (- 2) ?x45)))
 (let ((?x1306 (+ ?x43 ?x779 ?x336 ?x369 ?x390 (* 36 ?x408) ?x1114 ?x621 ?x1293 ?x901 ?x1117 ?x1118 ?x850 ?x858 ?x1105 ?x1106 (* 12 (* r r r u v v)) (* 36 (* r r u u v v)) (* 12 (* u u u u v v)) ?x1112 ?x1115 ?x1116 ?x1136 ?x1295 ?x1177 ?x1184 ?x1288 ?x1200 (* 12 (* r r u v)) (* 24 (* r u u v)) (* 12 (* u u u v)) ?x1292 ?x1294)))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x1306 ?x204) 0)) (not (= (* ?x579 ?x204) 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x871 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x665 (* 2 (* r r u u u))))
 (let ((?x641 (* (- 2) (* r v))))
 (let ((?x621 (* r r)))
 (let ((?x593 (* (- 1) (* u u u v v v v v))))
 (let ((?x610 (* 3 (* r u u u v v v v))))
 (let ((?x560 (* 2 (* v (* (- 1) v) r (* (- 1) v) u u u))))
 (let ((?x608 (* (- 3) (* r r u u u v v v))))
 (let ((?x520 (* 2 (* v (* (- 1) v) (* (- 1) v) r u u u))))
 (let ((?x439 (* (- 4) (* u v))))
 (let ((?x355 (* 2 (* v r (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x603 (* 4 (* r r r u u u v))))
 (let ((?x733 (* (- 3) (* u u u v v v))))
 (let ((?x408 (* r u u u v v)))
 (let ((?x732 (* 10 ?x408)))
 (let ((?x390 (* r r u u u v)))
 (let ((?x730 (* (- 11) ?x390)))
 (let ((?x383 (* 4 (* r r r u u u))))
 (let ((?x369 (* r r r u u u v v)))
 (let ((?x502 (* (- 1) v)))
 (let ((?x336 (* (- 1) (* u v v))))
 (let ((?x435 (* (- 4) u)))
 (let ((?x709 (+ ?x435 ?x45 (* 2 (* ?x502 r u u u)) (* 2 (* r ?x502 u u u)) (* 2 (* ?x502 ?x502 u u u)) ?x336 (* 2 (* v ?x502 r r u u u)) (* 2 (* v ?x502 ?x502 ?x502 u u u)) ?x369 ?x383 ?x730 ?x732 ?x733 ?x603 (* (- 6) (* r r u u u v v)) ?x355 (* 6 (* r u u u v v v)) ?x439 (* (- 2) (* u u u v v v v)) (* 2 (* v r ?x502 r u u u)) ?x520 ?x608 (* 2 (* v r r ?x502 u u u)) ?x560 ?x610 ?x593 ?x621 ?x641 ?x665)))
 (let ((?x1294 (* 6 (* u u u u v))))
 (let ((?x1292 (* 6 (* r r u u v))))
 (let ((?x1200 (* 8 (* u u v))))
 (let ((?x1288 (* 16 (* r u v))))
 (let ((?x1184 (* 8 (* r r v))))
 (let ((?x1177 (* u u u u u v)))
 (let ((?x1295 (* 2 (* r u u u u v))))
 (let ((?x1136 (* 2 (* r u))))
 (let ((?x1116 (* 6 (* u u u u u v v))))
 (let ((?x1115 (* 18 (* r u u u u v v))))
 (let ((?x1112 (* 6 (* r r r u u v v))))
 (let ((?x1106 (* 24 (* r u u v v))))
 (let ((?x1105 (* 24 (* r r u v v))))
 (let ((?x858 (* 8 (* r r r v v))))
 (let ((?x850 (* u u u u u u v v)))
 (let ((?x1118 (* 3 (* r u u u u u v v))))
 (let ((?x1117 (* 3 (* r r u u u u v v))))
 (let ((?x690 (* u u u v v)))
 (let ((?x901 (* 8 ?x690)))
 (let ((?x672 (* r u u u v)))
 (let ((?x1293 (* 12 ?x672)))
 (let ((?x456 (* r r u u u v v)))
 (let ((?x1114 (* 18 ?x456)))
 (let ((?x779 (* (- 2) ?x45)))
 (let ((?x1307 (+ ?x43 ?x779 (* 2 (* u 2 r u u v v)) (* 2 (* u 2 u u r v v)) (* 2 (* u 2 u r v)) (* 2 (* u 2 u u u v v)) (* 2 (* u 2 r u r v v)) ?x336 ?x369 ?x390 (* 2 (* u 2 r r r v v)) (* 24 ?x408) ?x1114 ?x621 ?x1293 ?x901 (* 2 (* u 2 u r r v v)) ?x1117 ?x1118 ?x850 ?x858 ?x1105 ?x1106 (* 8 (* r r r u v v)) (* 24 (* r r u u v v)) (* 8 (* u u u u v v)) ?x1112 ?x1115 (* 2 (* u 2 u r u v v)) ?x1116 (* 2 (* u 2 r r v)) ?x1136 (* 2 (* u 2 r r u v v)) (* 2 (* u 2 r u v)) (* 2 (* u 2 u u v)) ?x1295 ?x1177 ?x1184 ?x1288 ?x1200 (* 8 (* r r u v)) (* 16 (* r u u v)) (* 8 (* u u u v)) ?x1292 ?x1294)))
 (let (($x209 (= ?x204 0)))
 (and $x209 (or (not (= (* ?x1307 ?x204) 0)) (not (= (* ?x709 ?x204) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x691 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x690 (* u u u v v)))
 (let ((?x693 (* 2 ?x690)))
 (let ((?x672 (* r u u u v)))
 (let ((?x717 (* (- 4) ?x672)))
 (let ((?x665 (* 2 (* r r u u u))))
 (let ((?x641 (* (- 2) (* r v))))
 (let ((?x621 (* r r)))
 (let ((?x593 (* (- 1) (* u u u v v v v v))))
 (let ((?x610 (* 3 (* r u u u v v v v))))
 (let ((?x608 (* (- 3) (* r r u u u v v v))))
 (let ((?x508 (* u u u v v v v)))
 (let ((?x606 (* (- 4) ?x508)))
 (let ((?x439 (* (- 4) (* u v))))
 (let ((?x474 (* r u u u v v v)))
 (let ((?x605 (* 12 ?x474)))
 (let ((?x456 (* r r u u u v v)))
 (let ((?x604 (* (- 12) ?x456)))
 (let ((?x603 (* 4 (* r r r u u u v))))
 (let ((?x733 (* (- 3) (* u u u v v v))))
 (let ((?x408 (* r u u u v v)))
 (let ((?x732 (* 10 ?x408)))
 (let ((?x390 (* r r u u u v)))
 (let ((?x730 (* (- 11) ?x390)))
 (let ((?x383 (* 4 (* r r r u u u))))
 (let ((?x369 (* r r r u u u v v)))
 (let ((?x336 (* (- 1) (* u v v))))
 (let ((?x435 (* (- 4) u)))
 (let ((?x579 (+ ?x435 ?x45 ?x336 ?x369 ?x383 ?x730 ?x732 ?x733 ?x603 ?x604 ?x605 ?x439 ?x606 ?x608 ?x610 ?x593 ?x621 ?x641 ?x665 ?x717 ?x693)))
 (let ((?x1294 (* 6 (* u u u u v))))
 (let ((?x1292 (* 6 (* r r u u v))))
 (let ((?x1200 (* 8 (* u u v))))
 (let ((?x1288 (* 16 (* r u v))))
 (let ((?x1184 (* 8 (* r r v))))
 (let ((?x1177 (* u u u u u v)))
 (let ((?x1295 (* 2 (* r u u u u v))))
 (let ((?x1136 (* 2 (* r u))))
 (let ((?x1116 (* 6 (* u u u u u v v))))
 (let ((?x1115 (* 18 (* r u u u u v v))))
 (let ((?x1112 (* 6 (* r r r u u v v))))
 (let ((?x1106 (* 24 (* r u u v v))))
 (let ((?x1105 (* 24 (* r r u v v))))
 (let ((?x858 (* 8 (* r r r v v))))
 (let ((?x850 (* u u u u u u v v)))
 (let ((?x1118 (* 3 (* r u u u u u v v))))
 (let ((?x1117 (* 3 (* r r u u u u v v))))
 (let ((?x901 (* 8 ?x690)))
 (let ((?x1293 (* 12 ?x672)))
 (let ((?x1114 (* 18 ?x456)))
 (let ((?x779 (* (- 2) ?x45)))
 (let ((?x1306 (+ ?x43 ?x779 ?x336 ?x369 ?x390 (* 36 ?x408) ?x1114 ?x621 ?x1293 ?x901 ?x1117 ?x1118 ?x850 ?x858 ?x1105 ?x1106 (* 12 (* r r r u v v)) (* 36 (* r r u u v v)) (* 12 (* u u u u v v)) ?x1112 ?x1115 ?x1116 ?x1136 ?x1295 ?x1177 ?x1184 ?x1288 ?x1200 (* 12 (* r r u v)) (* 24 (* r u u v)) (* 12 (* u u u v)) ?x1292 ?x1294)))
 (let (($x209 (= ?x204 0)))
 (let (($x130 (and $x209 (or (not (= (* ?x1306 ?x204) 0)) (not (= (* ?x579 ?x204) 0))))))
 (let ((?x560 (* 2 (* v (* (- 1) v) r (* (- 1) v) u u u))))
 (let ((?x520 (* 2 (* v (* (- 1) v) (* (- 1) v) r u u u))))
 (let ((?x355 (* 2 (* v r (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x502 (* (- 1) v)))
 (let ((?x709 (+ ?x435 ?x45 (* 2 (* ?x502 r u u u)) (* 2 (* r ?x502 u u u)) (* 2 (* ?x502 ?x502 u u u)) ?x336 (* 2 (* v ?x502 r r u u u)) (* 2 (* v ?x502 ?x502 ?x502 u u u)) ?x369 ?x383 ?x730 ?x732 ?x733 ?x603 (* (- 6) ?x456) ?x355 (* 6 ?x474) ?x439 (* (- 2) ?x508) (* 2 (* v r ?x502 r u u u)) ?x520 ?x608 (* 2 (* v r r ?x502 u u u)) ?x560 ?x610 ?x593 ?x621 ?x641 ?x665)))
 (let ((?x1307 (+ ?x43 ?x779 (* 2 (* u 2 r u u v v)) (* 2 (* u 2 u u r v v)) (* 2 (* u 2 u r v)) (* 2 (* u 2 u u u v v)) (* 2 (* u 2 r u r v v)) ?x336 ?x369 ?x390 (* 2 (* u 2 r r r v v)) (* 24 ?x408) ?x1114 ?x621 ?x1293 ?x901 (* 2 (* u 2 u r r v v)) ?x1117 ?x1118 ?x850 ?x858 ?x1105 ?x1106 (* 8 (* r r r u v v)) (* 24 (* r r u u v v)) (* 8 (* u u u u v v)) ?x1112 ?x1115 (* 2 (* u 2 u r u v v)) ?x1116 (* 2 (* u 2 r r v)) ?x1136 (* 2 (* u 2 r r u v v)) (* 2 (* u 2 r u v)) (* 2 (* u 2 u u v)) ?x1295 ?x1177 ?x1184 ?x1288 ?x1200 (* 8 (* r r u v)) (* 16 (* r u u v)) (* 8 (* u u u v)) ?x1292 ?x1294)))
 (let (($x143 (and $x209 (or (not (= (* ?x1307 ?x204) 0)) (not (= (* ?x709 ?x204) 0))))))
 (rewrite (= $x143 $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1243 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x637 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x494 (+ 2 u)))
 (let ((?x90 (* ?x75 ?x75)))
 (let ((?x773 (+ (* (- 1) (* ?x494 v v)) (* ?x494 ?x494 ?x494 ?x75 ?x75 ?x75 v v) ?x90 (* ?x494 ?x494 ?x494 ?x75 ?x75 v))))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x561 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x502 (* (- 1) v)))
 (let ((?x504 (+ r ?x502)))
 (let ((?x481 (+ 2 v)))
 (let ((?x591 (+ (* (- 1) (* ?x481 ?x481 u)) (* ?x481 ?x481 ?x504 ?x504 ?x504 u u u) (* ?x504 ?x504) (* ?x481 ?x504 ?x504 u u u))))
 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x591 ?x561) 0)) (not (= (* ?x773 ?x637) 0)))))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x735 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x204 (+ ?x28 ?x36 ?x152 ?x106 ?x122 ?x41 ?x176 ?x45 ?x46 ?x198)))
 (let ((?x665 (* 2 (* r r u u u))))
 (let ((?x641 (* (- 2) (* r v))))
 (let ((?x621 (* r r)))
 (let ((?x593 (* (- 1) (* u u u v v v v v))))
 (let ((?x610 (* 3 (* r u u u v v v v))))
 (let ((?x560 (* 2 (* v (* (- 1) v) r (* (- 1) v) u u u))))
 (let ((?x608 (* (- 3) (* r r u u u v v v))))
 (let ((?x520 (* 2 (* v (* (- 1) v) (* (- 1) v) r u u u))))
 (let ((?x439 (* (- 4) (* u v))))
 (let ((?x355 (* 2 (* v r (* (- 1) v) (* (- 1) v) u u u))))
 (let ((?x603 (* 4 (* r r r u u u v))))
 (let ((?x733 (* (- 3) (* u u u v v v))))
 (let ((?x408 (* r u u u v v)))
 (let ((?x732 (* 10 ?x408)))
 (let ((?x390 (* r r u u u v)))
 (let ((?x730 (* (- 11) ?x390)))
 (let ((?x383 (* 4 (* r r r u u u))))
 (let ((?x369 (* r r r u u u v v)))
 (let ((?x502 (* (- 1) v)))
 (let ((?x336 (* (- 1) (* u v v))))
 (let ((?x435 (* (- 4) u)))
 (let ((?x709 (+ ?x435 ?x45 (* 2 (* ?x502 r u u u)) (* 2 (* r ?x502 u u u)) (* 2 (* ?x502 ?x502 u u u)) ?x336 (* 2 (* v ?x502 r r u u u)) (* 2 (* v ?x502 ?x502 ?x502 u u u)) ?x369 ?x383 ?x730 ?x732 ?x733 ?x603 (* (- 6) (* r r u u u v v)) ?x355 (* 6 (* r u u u v v v)) ?x439 (* (- 2) (* u u u v v v v)) (* 2 (* v r ?x502 r u u u)) ?x520 ?x608 (* 2 (* v r r ?x502 u u u)) ?x560 ?x610 ?x593 ?x621 ?x641 ?x665)))
 (let ((?x1294 (* 6 (* u u u u v))))
 (let ((?x1292 (* 6 (* r r u u v))))
 (let ((?x1200 (* 8 (* u u v))))
 (let ((?x1288 (* 16 (* r u v))))
 (let ((?x1184 (* 8 (* r r v))))
 (let ((?x1177 (* u u u u u v)))
 (let ((?x1295 (* 2 (* r u u u u v))))
 (let ((?x1136 (* 2 (* r u))))
 (let ((?x1116 (* 6 (* u u u u u v v))))
 (let ((?x1115 (* 18 (* r u u u u v v))))
 (let ((?x1112 (* 6 (* r r r u u v v))))
 (let ((?x1106 (* 24 (* r u u v v))))
 (let ((?x1105 (* 24 (* r r u v v))))
 (let ((?x858 (* 8 (* r r r v v))))
 (let ((?x850 (* u u u u u u v v)))
 (let ((?x1118 (* 3 (* r u u u u u v v))))
 (let ((?x1117 (* 3 (* r r u u u u v v))))
 (let ((?x690 (* u u u v v)))
 (let ((?x901 (* 8 ?x690)))
 (let ((?x672 (* r u u u v)))
 (let ((?x1293 (* 12 ?x672)))
 (let ((?x456 (* r r u u u v v)))
 (let ((?x1114 (* 18 ?x456)))
 (let ((?x779 (* (- 2) ?x45)))
 (let ((?x1307 (+ ?x43 ?x779 (* 2 (* u 2 r u u v v)) (* 2 (* u 2 u u r v v)) (* 2 (* u 2 u r v)) (* 2 (* u 2 u u u v v)) (* 2 (* u 2 r u r v v)) ?x336 ?x369 ?x390 (* 2 (* u 2 r r r v v)) (* 24 ?x408) ?x1114 ?x621 ?x1293 ?x901 (* 2 (* u 2 u r r v v)) ?x1117 ?x1118 ?x850 ?x858 ?x1105 ?x1106 (* 8 (* r r r u v v)) (* 24 (* r r u u v v)) (* 8 (* u u u u v v)) ?x1112 ?x1115 (* 2 (* u 2 u r u v v)) ?x1116 (* 2 (* u 2 r r v)) ?x1136 (* 2 (* u 2 r r u v v)) (* 2 (* u 2 r u v)) (* 2 (* u 2 u u v)) ?x1295 ?x1177 ?x1184 ?x1288 ?x1200 (* 8 (* r r u v)) (* 16 (* r u u v)) (* 8 (* u u u v)) ?x1292 ?x1294)))
 (let (($x209 (= ?x204 0)))
 (let (($x143 (and $x209 (or (not (= (* ?x1307 ?x204) 0)) (not (= (* ?x709 ?x204) 0))))))
 (let ((?x637 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x494 (+ 2 u)))
 (let ((?x90 (* ?x75 ?x75)))
 (let ((?x773 (+ (* (- 1) (* ?x494 v v)) (* ?x494 ?x494 ?x494 ?x75 ?x75 ?x75 v v) ?x90 (* ?x494 ?x494 ?x494 ?x75 ?x75 v))))
 (let ((?x561 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x504 (+ r ?x502)))
 (let ((?x481 (+ 2 v)))
 (let ((?x591 (+ (* (- 1) (* ?x481 ?x481 u)) (* ?x481 ?x481 ?x504 ?x504 ?x504 u u u) (* ?x504 ?x504) (* ?x481 ?x504 ?x504 u u u))))
 (let (($x392 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x591 ?x561) 0)) (not (= (* ?x773 ?x637) 0))))))
 (rewrite (= $x392 $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((r Int) (u Int) (v Int) )(! (let ((?x79 (+ u 2)))
 (let ((?x75 (+ r u)))
 (let ((?x90 (* ?x75 ?x75)))
 (let ((?x92 (+ (* (- 1) ?x79 v v) (* ?x75 ?x75 ?x75 ?x79 ?x79 ?x79 v v) ?x90 (* ?x75 ?x75 ?x79 ?x79 ?x79 v))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) ?x92)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (* (- 1) u ?x57 ?x57) (* ?x52 ?x52 ?x52 u u u ?x57 ?x57) (* ?x52 ?x52) (* ?x52 ?x52 u u u ?x57))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x407 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x198 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x152 (* (- 2) v)))
 (let ((?x122 (* (- 2) u00)))
 (let ((?x106 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x637 (+ 4 ?x28 (* 6 u) ?x106 ?x122 ?x152 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x198)))
 (let ((?x75 (+ r u)))
 (let ((?x494 (+ 2 u)))
 (let ((?x90 (* ?x75 ?x75)))
 (let ((?x773 (+ (* (- 1) (* ?x494 v v)) (* ?x494 ?x494 ?x494 ?x75 ?x75 ?x75 v v) ?x90 (* ?x494 ?x494 ?x494 ?x75 ?x75 v))))
 (let ((?x43 (* u u)))
 (let ((?x176 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x561 (+ (- 4) ?x28 (* (- 6) v) ?x106 ?x122 ?x36 ?x41 ?x176 (* (+ 2 v) (+ 2 v)) ?x46 ?x198)))
 (let ((?x502 (* (- 1) v)))
 (let ((?x504 (+ r ?x502)))
 (let ((?x481 (+ 2 v)))
 (let ((?x591 (+ (* (- 1) (* ?x481 ?x481 u)) (* ?x481 ?x481 ?x504 ?x504 ?x504 u u u) (* ?x504 ?x504) (* ?x481 ?x504 ?x504 u u u))))
 (let (($x392 (and (= (+ ?x28 ?x106 ?x122 ?x36 ?x152 ?x41 ?x176 ?x45 ?x46 ?x198) 0) (or (not (= (* ?x591 ?x561) 0)) (not (= (* ?x773 ?x637) 0))))))
 (let ((?x79 (+ u 2)))
 (let ((?x92 (+ (* (- 1) ?x79 v v) (* ?x75 ?x75 ?x75 ?x79 ?x79 ?x79 v v) ?x90 (* ?x75 ?x75 ?x79 ?x79 ?x79 v))))
 (let ((?x38 (* 2 v)))
 (let ((?x81 (+ (- (- (* 4 ?x75) (* 4 r00)) (* 2 u00)) (* 2 ?x79))))
 (let ((?x93 (* (- (+ (- (+ (- ?x81 ?x38) ?x41) (* ?x79 ?x79)) ?x45 ?x46) ?x48) ?x92)))
 (let ((?x57 (+ v 2)))
 (let ((?x52 (- r v)))
 (let ((?x71 (+ (* (- 1) u ?x57 ?x57) (* ?x52 ?x52 ?x52 u u u ?x57 ?x57) (* ?x52 ?x52) (* ?x52 ?x52 u u u ?x57))))
 (let ((?x59 (- (+ (- (- (* 4 ?x52) (* 4 r00)) (* 2 u00)) ?x36) (* 2 ?x57))))
 (let (($x73 (= (* (- (+ (- (+ ?x59 ?x41) ?x43) (* ?x57 ?x57) ?x46) ?x48) ?x71) 0)))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x97 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) (or (not $x73) (not (= ?x93 0))))))
 (rewrite (= $x97 $x392))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x563 (mp (mp @x99 (quant-intro (proof-bind ?x407) (= $x98 $x1243)) $x1243) (rewrite (= $x1243 $x1243)) $x1243)))
 (let ((@x298 (mp (mp @x563 (quant-intro (proof-bind ?x735) (= $x1243 $x871)) $x871) (quant-intro (proof-bind ?x691) (= $x871 $x497)) $x497)))
 (let ((@x373 (mp (mp~ @x298 (sk (~ $x497 $x962)) $x962) (rewrite (= $x962 $x970)) $x970)))
 (let ((@x573 (and-elim @x373 $x682)))
 (let ((@x211 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x682) $x887)) @x573 $x887)))
 (let (($x707 (<= ?x680 0)))
 (let ((@x515 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x682) $x707)) @x573 $x707)))
 (let (($x118 (not (<= ?x597 0))))
 (let (($x255 (>= ?x597 0)))
 (let (($x127 (>= ?x316 0)))
 (let (($x700 (<= ?x316 0)))
 (let ((@x669 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x431 (not $x700) (not $x127))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x700)) @x515 @x211 false) $x700) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x127)) @x515 @x211 false) $x127) $x431)))
 (let ((@x984 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x406 $x118 (not $x255))) (unit-resolution (and-elim @x373 $x424) @x669 $x635) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x255)) @x515 @x211 false) $x255) $x118)))
 ((_ th-lemma arith farkas 1 1 1) @x984 @x515 @x211 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        53
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             440
 :arith-nonlinear-bounds    36
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 75
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.77
 :memory                    3.22
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1199378
 :num-checks                1
 :propagations              14
 :rlimit-count              7063
 :time                      0.01
 :total-time                0.02)
