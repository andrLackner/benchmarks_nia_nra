unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun q!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x67 (* y00 q00)))
 (let ((?x253 (+ r00 ?x67 (* (- 1) (* y00 q!2)) (* (- 1) r!1))))
 (let (($x232 (>= ?x253 0)))
 (let (($x254 (= ?x253 0)))
 (let ((?x519 (* 2 r!1)))
 (let ((?x474 (* (- 1) (* y00 y00))))
 (let ((?x394 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x249 (* y00 y00 y00)))
 (let ((?x448 (* (- 2) y00)))
 (let ((?x348 (+ ?x448 (* (- 1) (* y00 y00 y00 r!1 r!1)) (* (- 2) (* y00 y00 y00 r!1 r!1 q!2)) (* 3 (* y00 r!1 r!1 q!2)) (* 3 (* y00 y00 y00 q!2)) (* (- 1) (* y00 y00 y00 r!1 r!1 q!2 q!2)) (* 4 (* r!1 q!2)) (* (- 4) (* y00 q!2)) ?x249 (* y00 r!1 r!1) (* 3 (* y00 r!1 r!1 q!2 q!2)) (* y00 r!1 r!1 q!2 q!2 q!2) (* (- 2) (* y00 y00 r!1)) (* (- 1) (* y00 y00 y00 y00 y00 q!2 q!2)) (* y00 r!1 q!2) (* 2 (* r!1 q!2 q!2)) (* y00 r!1) (* (- 2) (* y00 q!2 q!2)) (* (- 1) (* y00 y00 q!2)) ?x394 (* 2 (* y00 y00 y00 y00 r!1)) (* (- 2) (* y00 y00 y00 y00 y00 q!2)) (* 2 (* y00 y00 y00 y00 r!1 q!2 q!2)) (* 4 (* y00 y00 y00 y00 r!1 q!2)) (* (- 6) (* y00 y00 r!1 q!2)) (* (- 6) (* y00 y00 r!1 q!2 q!2)) (* (- 2) (* y00 y00 r!1 q!2 q!2 q!2)) (* 3 (* y00 y00 y00 q!2 q!2)) (* y00 y00 y00 q!2 q!2 q!2) ?x474 ?x519)))
 (let ((?x351 (* ?x348 (+ (* (- 1) r00) (* (- 1) ?x67) (* y00 q!2) r!1))))
 (let (($x140 (= ?x351 0)))
 (let (($x305 (not $x140)))
 (let (($x264 (and (= (+ y00 (* (- 1) y!0)) 0) $x254 $x305)))
 (let ((?x78 (* (- 1) ?x67)))
 (let ((?x598 (* q!2 y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x599 (+ r!1 ?x66 ?x598 ?x78)))
 (let ((?x221 (+ ?x519 ?x448 (* (- 4) ?x598) (* r!1 r!1 y00) (* 3 (* q!2 r!1 r!1 y00)) (* 3 (* q!2 q!2 r!1 r!1 y00)) (* q!2 q!2 q!2 r!1 r!1 y00) (* (- 2) (* r!1 y00 y00)) (* (- 6) (* q!2 r!1 y00 y00)) (* (- 6) (* q!2 q!2 r!1 y00 y00)) (* (- 2) (* q!2 q!2 q!2 r!1 y00 y00)) ?x249 (* 3 (* q!2 y00 y00 y00)) (* 3 (* q!2 q!2 y00 y00 y00)) (* q!2 q!2 q!2 y00 y00 y00) (* (- 1) (* r!1 r!1 y00 y00 y00)) (* (- 2) (* q!2 r!1 r!1 y00 y00 y00)) (* (- 1) (* q!2 q!2 r!1 r!1 y00 y00 y00)) (* 2 (* r!1 y00 y00 y00 y00)) (* 4 (* q!2 r!1 y00 y00 y00 y00)) (* 2 (* q!2 q!2 r!1 y00 y00 y00 y00)) ?x394 (* (- 2) (* q!2 y00 y00 y00 y00 y00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 y00)) (* 4 (* q!2 r!1)) (* 2 (* q!2 q!2 r!1)) (* r!1 y00) (* q!2 r!1 y00) ?x474 (* (- 1) (* q!2 y00 y00)) (* (- 2) (* q!2 q!2 y00)))))
 (let (($x226 (and (= (+ y!0 (* (- 1) y00)) 0) (= ?x599 0) (not (= (* ?x221 ?x599) 0)))))
 (let (($x371 (exists ((q Int) (r Int) (y Int) )(! (let ((?x67 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x67)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x92 (+ r ?x66 ?x39 ?x78)))
 (let ((?x478 (* (- 1) (* q y00 y00))))
 (let ((?x474 (* (- 1) (* y00 y00))))
 (let ((?x465 (* q r y00)))
 (let ((?x464 (* r y00)))
 (let ((?x431 (* 2 (* q q r))))
 (let ((?x396 (* (- 1) (* q q y00 y00 y00 y00 y00))))
 (let ((?x413 (* (- 2) (* q y00 y00 y00 y00 y00))))
 (let ((?x394 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x410 (* 2 (* q q r y00 y00 y00 y00))))
 (let ((?x407 (* 4 (* q r y00 y00 y00 y00))))
 (let ((?x403 (* 2 (* r y00 y00 y00 y00))))
 (let ((?x390 (* (- 1) (* q q r r y00 y00 y00))))
 (let ((?x400 (* (- 2) (* q r r y00 y00 y00))))
 (let ((?x388 (* (- 1) (* r r y00 y00 y00))))
 (let ((?x266 (* q q q y00 y00 y00)))
 (let ((?x282 (* 3 (* q q y00 y00 y00))))
 (let ((?x281 (* 3 (* q y00 y00 y00))))
 (let ((?x249 (* y00 y00 y00)))
 (let ((?x280 (* (- 2) (* q q q r y00 y00))))
 (let ((?x279 (* (- 6) (* q q r y00 y00))))
 (let ((?x278 (* (- 6) (* q r y00 y00))))
 (let ((?x276 (* (- 2) (* r y00 y00))))
 (let ((?x145 (* q q q r r y00)))
 (let ((?x274 (* 3 (* q q r r y00))))
 (let ((?x273 (* 3 (* q r r y00))))
 (let ((?x138 (* r r y00)))
 (let ((?x448 (* (- 2) y00)))
 (let ((?x445 (* 2 r)))
 (let ((?x649 (+ ?x445 ?x448 (* (- 4) ?x39) ?x138 ?x273 ?x274 ?x145 ?x276 ?x278 ?x279 ?x280 ?x249 ?x281 ?x282 ?x266 ?x388 ?x400 ?x390 ?x403 ?x407 ?x410 ?x394 ?x413 ?x396 (* 4 (* q r)) ?x431 ?x464 ?x465 ?x474 ?x478 (* (- 2) (* q q y00)))))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y (* (- 1) y00)) 0)))
 (and $x74 $x97 (not (= (* ?x649 ?x92) 0))))))))))))))))))))))))))))))))))))))) :qid k!29))
 ))
 (let (($x125 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x466 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x187 (+ r ?x65)))
 (let ((?x72 (+ 1 q)))
 (let ((?x154 (+ (* y00 ?x72 ?x72 ?x72 ?x187 ?x187) (* (- 1) (* y00 y00 y00 ?x72 ?x72 ?x187 ?x187)) (* 2 (* ?x72 ?x72 ?x187)) (* y00 ?x72 ?x187))))
 (let (($x195 (not (= (* ?x154 (+ r ?x65 ?x66 ?x466 (* y00 ?x72))) 0))))
 (let (($x391 (= (+ r ?x66 ?x466 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x391 $x195)))))))))) :qid k!29))
 ))
 (let ((?x395 (lambda ((q Int) (r Int) (y Int) )(let ((?x67 (* y00 q00)))
 (let ((?x78 (* (- 1) ?x67)))
 (let ((?x39 (* q y00)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x92 (+ r ?x66 ?x39 ?x78)))
 (let ((?x478 (* (- 1) (* q y00 y00))))
 (let ((?x474 (* (- 1) (* y00 y00))))
 (let ((?x465 (* q r y00)))
 (let ((?x464 (* r y00)))
 (let ((?x431 (* 2 (* q q r))))
 (let ((?x396 (* (- 1) (* q q y00 y00 y00 y00 y00))))
 (let ((?x413 (* (- 2) (* q y00 y00 y00 y00 y00))))
 (let ((?x394 (* (- 1) (* y00 y00 y00 y00 y00))))
 (let ((?x410 (* 2 (* q q r y00 y00 y00 y00))))
 (let ((?x407 (* 4 (* q r y00 y00 y00 y00))))
 (let ((?x403 (* 2 (* r y00 y00 y00 y00))))
 (let ((?x390 (* (- 1) (* q q r r y00 y00 y00))))
 (let ((?x400 (* (- 2) (* q r r y00 y00 y00))))
 (let ((?x388 (* (- 1) (* r r y00 y00 y00))))
 (let ((?x266 (* q q q y00 y00 y00)))
 (let ((?x282 (* 3 (* q q y00 y00 y00))))
 (let ((?x281 (* 3 (* q y00 y00 y00))))
 (let ((?x249 (* y00 y00 y00)))
 (let ((?x280 (* (- 2) (* q q q r y00 y00))))
 (let ((?x279 (* (- 6) (* q q r y00 y00))))
 (let ((?x278 (* (- 6) (* q r y00 y00))))
 (let ((?x276 (* (- 2) (* r y00 y00))))
 (let ((?x145 (* q q q r r y00)))
 (let ((?x274 (* 3 (* q q r r y00))))
 (let ((?x273 (* 3 (* q r r y00))))
 (let ((?x138 (* r r y00)))
 (let ((?x448 (* (- 2) y00)))
 (let ((?x445 (* 2 r)))
 (let ((?x649 (+ ?x445 ?x448 (* (- 4) ?x39) ?x138 ?x273 ?x274 ?x145 ?x276 ?x278 ?x279 ?x280 ?x249 ?x281 ?x282 ?x266 ?x388 ?x400 ?x390 ?x403 ?x407 ?x410 ?x394 ?x413 ?x396 (* 4 (* q r)) ?x431 ?x464 ?x465 ?x474 ?x478 (* (- 2) (* q q y00)))))
 (let (($x97 (= ?x92 0)))
 (let (($x74 (= (+ y (* (- 1) y00)) 0)))
 (let (($x662 (and $x74 $x97 (not (= (* ?x649 ?x92) 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x466 (* (- 1) ?x36)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x187 (+ r ?x65)))
 (let ((?x72 (+ 1 q)))
 (let ((?x154 (+ (* y00 ?x72 ?x72 ?x72 ?x187 ?x187) (* (- 1) (* y00 y00 y00 ?x72 ?x72 ?x187 ?x187)) (* 2 (* ?x72 ?x72 ?x187)) (* y00 ?x72 ?x187))))
 (let (($x195 (not (= (* ?x154 (+ r ?x65 ?x66 ?x466 (* y00 ?x72))) 0))))
 (let (($x391 (= (+ r ?x66 ?x466 (* y00 q)) 0)))
 (let (($x467 (and (= (+ y00 (* (- 1) y)) 0) $x391 $x195)))
 (rewrite (= $x467 $x662)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x197 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x466 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x187 (+ r ?x65)))
 (let ((?x72 (+ 1 q)))
 (let ((?x154 (+ (* y00 ?x72 ?x72 ?x72 ?x187 ?x187) (* (- 1) (* y00 y00 y00 ?x72 ?x72 ?x187 ?x187)) (* 2 (* ?x72 ?x72 ?x187)) (* y00 ?x72 ?x187))))
 (let (($x195 (not (= (* ?x154 (+ r ?x65 ?x66 ?x466 (* y00 ?x72))) 0))))
 (let (($x391 (= (+ r ?x66 ?x466 (* y00 q)) 0)))
 (and (= (+ ?x65 y) 0) $x391 $x195)))))))))) :qid k!29))
 ))
 (let ((?x150 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x466 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x187 (+ r ?x65)))
 (let ((?x72 (+ 1 q)))
 (let ((?x154 (+ (* y00 ?x72 ?x72 ?x72 ?x187 ?x187) (* (- 1) (* y00 y00 y00 ?x72 ?x72 ?x187 ?x187)) (* 2 (* ?x72 ?x72 ?x187)) (* y00 ?x72 ?x187))))
 (let (($x195 (not (= (* ?x154 (+ r ?x65 ?x66 ?x466 (* y00 ?x72))) 0))))
 (let (($x391 (= (+ r ?x66 ?x466 (* y00 q)) 0)))
 (let (($x467 (and (= (+ y00 (* (- 1) y)) 0) $x391 $x195)))
 (let (($x366 (and (= (+ ?x65 y) 0) $x391 $x195)))
 (rewrite (= $x366 $x467))))))))))))))
 ))
 (let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (- (* ?x45 ?x45 ?x45 ?x42 ?x42 y00) (* ?x45 ?x45 ?x42 ?x42 y00 y00 y00))))
 (let ((?x55 (* (+ (- (- ?x42 r00) (* q00 y00)) (* ?x45 y00)) (+ ?x50 (* 2 ?x45 ?x45 ?x42) (* ?x45 ?x42 y00)))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x55 0)))))))) :qid k!29))
 ))
 (let ((?x482 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x466 (* (- 1) ?x36)))
 (let ((?x66 (* (- 1) r00)))
 (let ((?x65 (* (- 1) y00)))
 (let ((?x187 (+ r ?x65)))
 (let ((?x72 (+ 1 q)))
 (let ((?x154 (+ (* y00 ?x72 ?x72 ?x72 ?x187 ?x187) (* (- 1) (* y00 y00 y00 ?x72 ?x72 ?x187 ?x187)) (* 2 (* ?x72 ?x72 ?x187)) (* y00 ?x72 ?x187))))
 (let (($x195 (not (= (* ?x154 (+ r ?x65 ?x66 ?x466 (* y00 ?x72))) 0))))
 (let (($x391 (= (+ r ?x66 ?x466 (* y00 q)) 0)))
 (let (($x366 (and (= (+ ?x65 y) 0) $x391 $x195)))
 (let ((?x42 (- r y00)))
 (let ((?x45 (+ q 1)))
 (let ((?x50 (- (* ?x45 ?x45 ?x45 ?x42 ?x42 y00) (* ?x45 ?x45 ?x42 ?x42 y00 y00 y00))))
 (let ((?x55 (* (+ (- (- ?x42 r00) ?x36) (* ?x45 y00)) (+ ?x50 (* 2 ?x45 ?x45 ?x42) (* ?x45 ?x42 y00)))))
 (let (($x59 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x55 0))))))
 (rewrite (= $x59 $x366))))))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x117 (mp (mp @x61 (quant-intro (proof-bind ?x482) (= $x60 $x197)) $x197) (rewrite (= $x197 $x197)) $x197)))
 (let ((@x139 (mp (mp @x117 (quant-intro (proof-bind ?x150) (= $x197 $x125)) $x125) (quant-intro (proof-bind ?x395) (= $x125 $x371)) $x371)))
 (let ((@x375 (mp (mp~ @x139 (sk (~ $x371 $x226)) $x226) (rewrite (= $x226 $x264)) $x264)))
 (let ((@x247 (and-elim @x375 $x254)))
 (let ((@x68 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x254) $x232)) @x247 $x232)))
 (let (($x234 (<= ?x253 0)))
 (let ((@x246 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x254) $x234)) @x247 $x234)))
 (let (($x158 (not (<= ?x351 0))))
 (let (($x228 (>= ?x351 0)))
 (let ((@x239 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x140 $x158 (not $x228))) (and-elim @x375 $x305) (or $x158 (not $x228)))))
 (let ((@x265 (unit-resolution @x239 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x228)) @x246 @x68 false) $x228) $x158)))
 ((_ th-lemma arith farkas 1 1 1) @x265 @x246 @x68 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        10
 :arith-assert-upper        7
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-fixed-eqs           2
 :arith-max-min             146
 :arith-nonlinear-bounds    2
 :arith-num-rows            4
 :arith-offset-eqs          1
 :arith-pivots              2
 :arith-pseudo-nonlinear    2
 :arith-row-summations      2
 :arith-tableau-max-columns 48
 :arith-tableau-max-rows    4
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.62
 :memory                    3.14
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1107922
 :num-checks                1
 :propagations              6
 :rlimit-count              3234
 :time                      0.01
 :total-time                0.01)
