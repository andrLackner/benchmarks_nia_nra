unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x63 (* y00 q00)))
 (let ((?x206 (+ r00 ?x63 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x282 (<= ?x206 0)))
 (let (($x294 (= ?x206 0)))
 (let ((?x193 (* y00 y00 y00 y00 y00 q00)))
 (let ((?x180 (* y00 y00 y00 y00 r00)))
 (let ((?x85 (+ ?x180 ?x193 (* 3 (* y00 y00 y00 y00 r00 q!2)) (* 3 (* y00 y00 y00 y00 y00 q00 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 r!1)) (* (- 3) (* y00 y00 y00 y00 q!2 r!1)) (* (- 1) (* y00 y00 y00 y00 y00 q!2)) (* (- 3) (* y00 y00 y00 y00 y00 q!2 q!2)) (* 3 (* y00 y00 y00 y00 y00 q00 q!2)) (* (- 3) (* y00 y00 y00 y00 q!2 q!2 r!1)) (* (- 3) (* y00 y00 y00 y00 y00 q!2 q!2 q!2)) (* 3 (* y00 y00 y00 y00 r00 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 q!2 q!2 q!2 r!1)) (* y00 y00 y00 y00 r00 q!2 q!2 q!2) (* (- 1) (* y00 y00 y00 y00 y00 q!2 q!2 q!2 q!2)) (* y00 y00 y00 y00 y00 q00 q!2 q!2 q!2))))
 (let (($x86 (= ?x85 0)))
 (let (($x57 (not $x86)))
 (let ((?x275 (+ y00 (* (- 1) y!0))))
 (let (($x276 (= ?x275 0)))
 (let (($x299 (and $x276 $x294 $x57)))
 (let ((?x196 (* (- 1) ?x193)))
 (let ((?x183 (* (- 1) ?x180)))
 (let ((?x256 (+ (* r!1 y00 y00 y00 y00) ?x183 (* q!2 y00 y00 y00 y00 y00) ?x196 (* 3 (* q!2 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 y00 y00 y00 y00 r00)) (* 3 (* q!2 q!2 y00 y00 y00 y00 y00)) (* (- 3) (* q!2 y00 y00 y00 y00 y00 q00)) (* 3 (* q!2 q!2 r!1 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00 y00 y00 r00)) (* 3 (* q!2 q!2 q!2 y00 y00 y00 y00 y00)) (* (- 3) (* q!2 q!2 y00 y00 y00 y00 y00 q00)) (* q!2 q!2 q!2 r!1 y00 y00 y00 y00) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00 y00 r00)) (* q!2 q!2 q!2 q!2 y00 y00 y00 y00 y00) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00 y00 y00 q00)))))
 (let (($x261 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x63)) 0) (not (= ?x256 0)))))
 (let (($x67 (exists ((q Int) (r Int) (y Int) )(! (let ((?x193 (* y00 y00 y00 y00 y00 q00)))
 (let ((?x196 (* (- 1) ?x193)))
 (let ((?x180 (* y00 y00 y00 y00 r00)))
 (let ((?x183 (* (- 1) ?x180)))
 (let ((?x362 (+ (* r y00 y00 y00 y00) ?x183 (* q y00 y00 y00 y00 y00) ?x196 (* 3 (* q r y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 r00)) (* 3 (* q q y00 y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 y00 q00)) (* 3 (* q q r y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 r00)) (* 3 (* q q q y00 y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 y00 q00)) (* q q q r y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 r00)) (* q q q q y00 y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 y00 q00)))))
 (let (($x92 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x92 (not (= ?x362 0))))))))) :qid k!29))
 ))
 (let (($x267 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x266 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x169 (+ 1 q)))
 (let ((?x203 (* y00 y00 y00 y00 ?x169 ?x169 ?x169 (+ r ?x58 ?x59 ?x266 (* y00 ?x169)))))
 (let (($x232 (not (= ?x203 0))))
 (let (($x155 (= (+ r ?x59 ?x266 (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x155 $x232))))))))) :qid k!29))
 ))
 (let ((?x194 (lambda ((q Int) (r Int) (y Int) )(let ((?x193 (* y00 y00 y00 y00 y00 q00)))
 (let ((?x196 (* (- 1) ?x193)))
 (let ((?x180 (* y00 y00 y00 y00 r00)))
 (let ((?x183 (* (- 1) ?x180)))
 (let ((?x362 (+ (* r y00 y00 y00 y00) ?x183 (* q y00 y00 y00 y00 y00) ?x196 (* 3 (* q r y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 r00)) (* 3 (* q q y00 y00 y00 y00 y00)) (* (- 3) (* q y00 y00 y00 y00 y00 q00)) (* 3 (* q q r y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 r00)) (* 3 (* q q q y00 y00 y00 y00 y00)) (* (- 3) (* q q y00 y00 y00 y00 y00 q00)) (* q q q r y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 r00)) (* q q q q y00 y00 y00 y00 y00) (* (- 1) (* q q q y00 y00 y00 y00 y00 q00)))))
 (let (($x92 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x83 (and (= (+ y (* (- 1) y00)) 0) $x92 (not (= ?x362 0)))))
 (let ((?x36 (* q00 y00)))
 (let ((?x266 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x169 (+ 1 q)))
 (let ((?x203 (* y00 y00 y00 y00 ?x169 ?x169 ?x169 (+ r ?x58 ?x59 ?x266 (* y00 ?x169)))))
 (let (($x232 (not (= ?x203 0))))
 (let (($x155 (= (+ r ?x59 ?x266 (* y00 q)) 0)))
 (let (($x140 (and (= (+ y00 (* (- 1) y)) 0) $x155 $x232)))
 (rewrite (= $x140 $x83)))))))))))))))))))
 ))
 (let (($x60 (exists ((q Int) (r Int) (y Int) )(! (let ((?x36 (* q00 y00)))
 (let ((?x266 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x169 (+ 1 q)))
 (let ((?x203 (* y00 y00 y00 y00 ?x169 ?x169 ?x169 (+ r ?x58 ?x59 ?x266 (* y00 ?x169)))))
 (let (($x232 (not (= ?x203 0))))
 (let (($x155 (= (+ r ?x59 ?x266 (* y00 q)) 0)))
 (and (= (+ ?x58 y) 0) $x155 $x232))))))))) :qid k!29))
 ))
 (let ((?x226 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x266 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x169 (+ 1 q)))
 (let ((?x203 (* y00 y00 y00 y00 ?x169 ?x169 ?x169 (+ r ?x58 ?x59 ?x266 (* y00 ?x169)))))
 (let (($x232 (not (= ?x203 0))))
 (let (($x155 (= (+ r ?x59 ?x266 (* y00 q)) 0)))
 (let (($x140 (and (= (+ y00 (* (- 1) y)) 0) $x155 $x232)))
 (let (($x143 (and (= (+ ?x58 y) 0) $x155 $x232)))
 (rewrite (= $x143 $x140)))))))))))))
 ))
 (let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x28 (- 1)))
 (let ((?x45 (+ q 1)))
 (let ((?x48 (* (+ (- (- (- r y00) r00) (* q00 y00)) (* ?x45 y00)) ?x28 ?x45 ?x45 ?x45 y00 y00 y00 ?x28 y00)))
 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x48 0))))))) :qid k!29))
 ))
 (let ((?x260 (lambda ((q Int) (r Int) (y Int) )(let ((?x36 (* q00 y00)))
 (let ((?x266 (* (- 1) ?x36)))
 (let ((?x59 (* (- 1) r00)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x169 (+ 1 q)))
 (let ((?x203 (* y00 y00 y00 y00 ?x169 ?x169 ?x169 (+ r ?x58 ?x59 ?x266 (* y00 ?x169)))))
 (let (($x232 (not (= ?x203 0))))
 (let (($x155 (= (+ r ?x59 ?x266 (* y00 q)) 0)))
 (let (($x143 (and (= (+ ?x58 y) 0) $x155 $x232)))
 (let ((?x28 (- 1)))
 (let ((?x45 (+ q 1)))
 (let ((?x48 (* (+ (- (- (- r y00) r00) ?x36) (* ?x45 y00)) ?x28 ?x45 ?x45 ?x45 y00 y00 y00 ?x28 y00)))
 (let (($x52 (and (= (+ (* ?x28 y00) y) 0) (= (+ (- (- r r00) ?x36) (* q y00)) 0) (or (not (= ?x48 0))))))
 (rewrite (= $x52 $x143))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x106 (mp (mp @x54 (quant-intro (proof-bind ?x260) (= $x53 $x60)) $x60) (rewrite (= $x60 $x60)) $x60)))
 (let ((@x168 (mp (mp @x106 (quant-intro (proof-bind ?x226) (= $x60 $x267)) $x267) (quant-intro (proof-bind ?x194) (= $x267 $x67)) $x67)))
 (let ((@x227 (mp (mp~ @x168 (sk (~ $x67 $x261)) $x261) (rewrite (= $x261 $x299)) $x299)))
 (let ((@x284 (and-elim @x227 $x294)))
 (let ((@x213 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x282)) @x284 $x282)))
 (let (($x283 (>= ?x206 0)))
 (let ((@x347 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x283)) @x284 $x283)))
 (let (($x198 (<= ?x275 0)))
 (let ((@x77 (and-elim @x227 $x276)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x276) $x198)) @x77 $x198)))
 (let (($x287 (>= ?x275 0)))
 (let ((@x310 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x276) $x287)) @x77 $x287)))
 (let (($x367 (not (<= ?x85 0))))
 (let (($x200 (>= ?x85 0)))
 (let ((@x312 (lemma ((_ th-lemma arith) (hypothesis (not $x200)) @x310 @x332 @x347 @x213 false) $x200)))
 (let ((@x349 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x86 $x367 (not $x200))) (and-elim @x227 $x57) (or $x367 (not $x200)))))
 ((_ th-lemma arith) (unit-resolution @x349 @x312 $x367) @x310 @x332 @x347 @x213 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        4
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-gcd-tests           2
 :arith-grobner             2
 :arith-max-min             92
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-patches             2
 :arith-patches_succ        2
 :arith-pivots              3
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              2
 :max-memory                3.57
 :memory                    3.08
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1126668
 :num-checks                1
 :propagations              6
 :rlimit-count              2265
 :time                      0.01
 :total-time                0.01)
