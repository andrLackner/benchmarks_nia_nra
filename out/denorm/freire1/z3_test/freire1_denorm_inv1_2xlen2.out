unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x384 (* (- 1) r!1)))
 (let ((?x214 (* 2 x!0)))
 (let ((?x147 (* r!1 r!1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x267 (+ r00 ?x85 ?x101 ?x147 ?x214 ?x384)))
 (let (($x409 (<= ?x267 0)))
 (let (($x268 (= ?x267 0)))
 (let ((?x459 (* r!1 r!1 r!1 r!1)))
 (let ((?x440 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x401 (* x!0 r!1)))
 (let ((?x259 (* r!1 r!1 r!1)))
 (let ((?x162 (* (- 1) ?x147)))
 (let ((?x145 (+ (* 3 (* x!0 x!0 r!1)) (* (- 1) (* x!0 x!0 x!0 r!1)) (* (- 3) (* x!0 r!1 r!1 r!1)) (* 3 (* x!0 x!0 r!1 r!1)) ?x162 ?x259 ?x401 (* (- 3) (* x!0 r!1 r!1)) x!0 ?x384 ?x440 ?x459)))
 (let ((?x387 (* (+ ?x147 ?x259 (* (- 1) ?x401) (* (- 1) (* x!0 r!1 r!1))) ?x145 ?x267)))
 (let (($x160 (= ?x387 0)))
 (let (($x164 (not $x160)))
 (let (($x161 (and $x268 $x164)))
 (let ((?x236 (* r!1 x!0)))
 (let ((?x354 (+ ?x384 x!0 ?x162 ?x236 (* (- 3) (* r!1 r!1 x!0)) ?x259 ?x440 (* (- 1) (* r!1 x!0 x!0 x!0)) ?x459 (* (- 3) (* r!1 r!1 r!1 x!0)) (* 3 (* r!1 x!0 x!0)) (* 3 (* r!1 r!1 x!0 x!0)))))
 (let ((?x251 (* (+ ?x147 (* (- 1) ?x236) (* (- 1) (* r!1 r!1 x!0)) ?x259) ?x354 (+ ?x384 ?x214 r00 ?x147 ?x85 ?x101))))
 (let (($x165 (= (+ r!1 (* (- 2) x!0) (* (- 1) r00) ?x162 (* 2 x00) ?x36) 0)))
 (let (($x243 (and $x165 (not (= ?x251 0)))))
 (let (($x137 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x253 (* r r r)))
 (let ((?x217 (* r x)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x454 (+ ?x64 x ?x117 ?x217 (* (- 3) (* r r x)) ?x253 (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r r) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x289 (+ ?x30 (* (- 1) ?x217) (* (- 1) (* r r x)) ?x253)))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (and $x119 (not (= (* ?x289 ?x454 ?x107) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x375 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x346 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x450 (+ x ?x64)))
 (let ((?x109 (+ 1 r)))
 (let ((?x314 (* ?x109 ?x450)))
 (let ((?x382 (* (+ ?x314 (* (- 1) (* ?x109 ?x109 ?x450))) (+ ?x314 (* (- 1) (* ?x109 ?x450 ?x450 ?x450))) ?x346)))
 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) (not (= ?x382 0))))))))))))) :qid k!26))
 ))
 (let ((?x111 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x107 (+ ?x64 ?x32 r00 ?x30 ?x85 ?x101)))
 (let ((?x253 (* r r r)))
 (let ((?x217 (* r x)))
 (let ((?x117 (* (- 1) ?x30)))
 (let ((?x454 (+ ?x64 x ?x117 ?x217 (* (- 3) (* r r x)) ?x253 (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r r) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x289 (+ ?x30 (* (- 1) ?x217) (* (- 1) (* r r x)) ?x253)))
 (let (($x119 (= (+ r (* (- 2) x) (* (- 1) r00) ?x117 (* 2 x00) ?x36) 0)))
 (let (($x74 (and $x119 (not (= (* ?x289 ?x454 ?x107) 0)))))
 (let ((?x346 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x373 (* (- 1) (* (+ 1 r) (+ x ?x64) (+ x ?x64) (+ x ?x64)))))
 (let ((?x450 (+ x ?x64)))
 (let ((?x109 (+ 1 r)))
 (let ((?x314 (* ?x109 ?x450)))
 (let (($x388 (= (* (+ ?x314 (* (- 1) (* ?x109 ?x109 ?x450))) (+ ?x314 ?x373) ?x346) 0)))
 (let (($x461 (and (= (+ ?x64 r00 ?x30 ?x32 ?x85 ?x101) 0) (not $x388))))
 (rewrite (= $x461 $x74))))))))))))))))))))))))
 ))
 (let (($x59 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x49 (* ?x41 ?x44)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x54 (* ?x48 (- ?x49 (* ?x41 ?x41 ?x44)) (- ?x49 (* ?x41 ?x44 ?x44 ?x44)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x54 0)))))))))))) :qid k!26))
 ))
 (let ((?x334 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x101 (* (- 1) ?x36)))
 (let ((?x85 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x346 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x85 ?x101)))
 (let ((?x64 (* (- 1) r)))
 (let ((?x450 (+ x ?x64)))
 (let ((?x109 (+ 1 r)))
 (let ((?x314 (* ?x109 ?x450)))
 (let ((?x382 (* (+ ?x314 (* (- 1) (* ?x109 ?x109 ?x450))) (+ ?x314 (* (- 1) (* ?x109 ?x450 ?x450 ?x450))) ?x346)))
 (let (($x461 (and (= (+ ?x64 r00 (* r r) ?x32 ?x85 ?x101) 0) (not (= ?x382 0)))))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x49 (* ?x41 ?x44)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x54 (* ?x48 (- ?x49 (* ?x41 ?x41 ?x44)) (- ?x49 (* ?x41 ?x44 ?x44 ?x44)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x58 (and $x40 (or (not (= ?x54 0))))))
 (rewrite (= $x58 $x461))))))))))))))))))))))
 ))
 (let ((@x60 (asserted $x59)))
 (let ((@x349 (mp (mp @x60 (quant-intro (proof-bind ?x334) (= $x59 $x375)) $x375) (rewrite (= $x375 $x375)) $x375)))
 (let ((@x244 (mp~ (mp @x349 (quant-intro (proof-bind ?x111) (= $x375 $x137)) $x137) (sk (~ $x137 $x243)) $x243)))
 (let ((@x283 (mp @x244 (rewrite (= $x243 $x161)) $x161)))
 (let ((@x79 (and-elim @x283 $x268)))
 (let ((@x144 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x409)) @x79 $x409)))
 (let (($x378 (>= ?x267 0)))
 (let ((@x155 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x268) $x378)) @x79 $x378)))
 (let (($x423 (not (>= ?x387 0))))
 (let (($x322 (<= ?x387 0)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x160 (not $x322) $x423)) (and-elim @x283 $x164) (or (not $x322) $x423))))
 (let ((@x266 (unit-resolution @x371 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x322)) @x155 @x144 false) $x322) $x423)))
 ((_ th-lemma arith farkas 1 1 1) @x266 @x155 @x144 false))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            3
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 24
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                19.47
 :memory                    19.14
 :mk-bool-var               6
 :mk-clause                 7
 :num-allocs                421530
 :num-checks                1
 :propagations              4
 :rlimit-count              1477
 :time                      0.01
 :total-time                0.02)
