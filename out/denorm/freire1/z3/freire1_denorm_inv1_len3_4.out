unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x333 (* r!1 r!1)))
 (let ((?x154 (* (- 1) r!1)))
 (let ((?x281 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x302 (+ r00 ?x84 ?x100 ?x281 ?x154 ?x333)))
 (let (($x234 (<= ?x302 0)))
 (let (($x227 (= ?x302 0)))
 (let ((?x264 (* 3 (* r!1 r!1 r!1 r!1))))
 (let ((?x303 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x221 (* r!1 r!1 r!1 r!1 r!1)))
 (let ((?x89 (* x!0 x!0)))
 (let ((?x249 (* 4 (* r!1 r!1 r!1))))
 (let ((?x344 (+ ?x249 ?x89 ?x221 (* (- 2) (* x!0 r!1)) (* (- 2) (* x!0 r!1 r!1 r!1 r!1)) ?x303 ?x264 (* 6 (* x!0 x!0 r!1)) (* 3 (* x!0 x!0 r!1 r!1)) (* x!0 x!0 r!1 r!1 r!1) (* (- 9) (* x!0 r!1 r!1)) (* (- 6) (* x!0 r!1 r!1 r!1)) x!0 ?x154 ?x333)))
 (let ((?x350 (* ?x344 ?x302)))
 (let (($x347 (= ?x350 0)))
 (let (($x353 (not $x347)))
 (let (($x348 (and $x227 $x353)))
 (let ((?x222 (+ ?x154 x!0 ?x333 ?x89 (* 6 (* r!1 x!0 x!0)) (* 3 (* r!1 r!1 x!0 x!0)) (* r!1 r!1 r!1 x!0 x!0) ?x249 ?x264 ?x221 (* (- 2) (* r!1 x!0)) (* (- 9) (* r!1 r!1 x!0)) (* (- 6) (* r!1 r!1 r!1 x!0)) (* (- 2) (* r!1 r!1 r!1 r!1 x!0)) ?x303)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x223 (and (= (+ r!1 (* (- 2) x!0) ?x115 (* (- 1) ?x333) ?x35 ?x36) 0) (not (= (* ?x222 (+ ?x154 ?x281 r00 ?x333 ?x84 ?x100)) 0)))))
 (let (($x469 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x474 (+ ?x63 x ?x30 (* x x) (* 6 (* r x x)) (* 3 (* r r x x)) (* r r r x x) (* 4 (* r r r)) (* 3 (* r r r r)) (* r r r r r) (* (- 2) (* r x)) (* (- 9) (* r r x)) (* (- 6) (* r r r x)) (* (- 2) (* r r r r x)) (* (- 1) (* x x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (and $x118 (not (= (* ?x474 ?x106) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x270 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x322 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x262 (+ x ?x63)))
 (let ((?x340 (+ x ?x63 (* (+ 1 r) (+ 1 r) (+ 1 r) ?x262 ?x262) (* (- 1) (* ?x262 ?x262 ?x262)))))
 (let (($x140 (not (= (* ?x340 ?x322) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x140))))))))))))))) :qid k!26))
 ))
 (let ((?x282 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x106 (+ ?x63 ?x32 r00 ?x30 ?x84 ?x100)))
 (let ((?x474 (+ ?x63 x ?x30 (* x x) (* 6 (* r x x)) (* 3 (* r r x x)) (* r r r x x) (* 4 (* r r r)) (* 3 (* r r r r)) (* r r r r r) (* (- 2) (* r x)) (* (- 9) (* r r x)) (* (- 6) (* r r r x)) (* (- 2) (* r r r r x)) (* (- 1) (* x x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let ((?x114 (* (- 2) x)))
 (let (($x118 (= (+ r ?x114 ?x115 ?x116 ?x35 ?x36) 0)))
 (let (($x70 (and $x118 (not (= (* ?x474 ?x106) 0)))))
 (let ((?x322 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x262 (+ x ?x63)))
 (let ((?x293 (+ 1 r)))
 (let ((?x340 (+ x ?x63 (* ?x293 ?x293 ?x293 ?x262 ?x262) (* (- 1) (* ?x262 ?x262 ?x262)))))
 (let (($x140 (not (= (* ?x340 ?x322) 0))))
 (let (($x259 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x140)))
 (rewrite (= $x259 $x70)))))))))))))))))))))))
 ))
 (let (($x294 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x322 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x262 (+ x ?x63)))
 (let ((?x340 (+ x ?x63 (* (+ 1 r) (+ 1 r) (+ 1 r) ?x262 ?x262) (* (- 1) (* ?x262 ?x262 ?x262)))))
 (let (($x140 (not (= (* ?x340 ?x322) 0))))
 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) $x140)))))))))) :qid k!26))
 ))
 (let ((?x274 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x322 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x262 (+ x ?x63)))
 (let ((?x340 (+ x ?x63 (* (+ 1 r) (+ 1 r) (+ 1 r) ?x262 ?x262) (* (- 1) (* ?x262 ?x262 ?x262)))))
 (let (($x140 (not (= (* ?x340 ?x322) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x116 (* (- 1) ?x30)))
 (let ((?x115 (* (- 1) r00)))
 (let (($x259 (and (= (+ r ?x115 ?x116 ?x114 ?x35 ?x36) 0) $x140)))
 (let (($x215 (and (= (+ ?x63 r00 ?x30 ?x32 ?x84 ?x100) 0) $x140)))
 (rewrite (= $x215 $x259)))))))))))))))))))
 ))
 (let (($x58 (exists ((r Int) (x Int) )(! (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x53 (* ?x48 (- (+ ?x44 (* ?x41 ?x41 ?x41 ?x44 ?x44)) (* ?x44 ?x44 ?x44)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x53 0))))))))))) :qid k!26))
 ))
 (let ((?x453 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x100 (* (- 1) ?x36)))
 (let ((?x84 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x322 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x84 ?x100)))
 (let ((?x63 (* (- 1) r)))
 (let ((?x262 (+ x ?x63)))
 (let ((?x340 (+ x ?x63 (* (+ 1 r) (+ 1 r) (+ 1 r) ?x262 ?x262) (* (- 1) (* ?x262 ?x262 ?x262)))))
 (let (($x140 (not (= (* ?x340 ?x322) 0))))
 (let (($x215 (and (= (+ ?x63 r00 (* r r) ?x32 ?x84 ?x100) 0) $x140)))
 (let ((?x44 (- x r)))
 (let ((?x41 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x48 (- (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 ?x44)) ?x35) ?x36)))
 (let ((?x53 (* ?x48 (- (+ ?x44 (* ?x41 ?x41 ?x41 ?x44 ?x44)) (* ?x44 ?x44 ?x44)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x57 (and $x40 (or (not (= ?x53 0))))))
 (rewrite (= $x57 $x215))))))))))))))))))))
 ))
 (let ((@x59 (asserted $x58)))
 (let ((@x452 (mp (mp @x59 (quant-intro (proof-bind ?x453) (= $x58 $x294)) $x294) (rewrite (= $x294 $x294)) $x294)))
 (let ((@x411 (mp (mp @x452 (quant-intro (proof-bind ?x274) (= $x294 $x270)) $x270) (quant-intro (proof-bind ?x282) (= $x270 $x469)) $x469)))
 (let ((@x447 (mp (mp~ @x411 (sk (~ $x469 $x223)) $x223) (rewrite (= $x223 $x348)) $x348)))
 (let ((@x317 (and-elim @x447 $x227)))
 (let ((@x231 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x227) $x234)) @x317 $x234)))
 (let (($x296 (>= ?x302 0)))
 (let ((@x325 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x227) $x296)) @x317 $x296)))
 (let (($x295 (not (>= ?x350 0))))
 (let (($x239 (<= ?x350 0)))
 (let ((@x341 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x347 (not $x239) $x295)) (and-elim @x447 $x353) (or (not $x239) $x295))))
 (let ((@x343 (unit-resolution @x341 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x239)) @x325 @x231 false) $x239) $x295)))
 ((_ th-lemma arith farkas 1 1 1) @x343 @x325 @x231 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.48
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1051882
 :num-checks                1
 :propagations              4
 :rlimit-count              1681
 :time                      0.01
 :total-time                0.01)
