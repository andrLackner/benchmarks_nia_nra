unsat
((set-logic NIA)
(declare-fun u!5 () Int)
(declare-fun x!3 () Int)
(declare-fun v!4 () Int)
(declare-fun y!2 () Int)
(declare-fun k!10 () Int)
(declare-fun k!00 () Int)
(proof
(let ((?x84 (+ k!00 k!10 (* (- 1) (* y!2 v!4)) (* (- 1) (* x!3 u!5)))))
 (let (($x372 (<= ?x84 0)))
 (let (($x178 (= ?x84 0)))
 (let ((?x574 (* (- 1) (* x!3 x!3 x!3 x!3 k!00))))
 (let ((?x145 (* (- 1) (* x!3 x!3 x!3 x!3 k!10))))
 (let ((?x388 (* y!2 y!2 y!2 x!3 k!10)))
 (let ((?x375 (* y!2 y!2 y!2 x!3 k!00)))
 (let ((?x429 (+ (* 3 (* y!2 x!3 x!3 x!3 k!10)) (* (- 3) (* y!2 y!2 x!3 x!3 k!10)) (* (- 3) (* y!2 y!2 x!3 x!3 x!3 v!4)) (* (- 3) (* y!2 x!3 x!3 x!3 x!3 u!5)) (* (- 1) (* y!2 y!2 y!2 x!3 x!3 u!5)) (* (- 1) (* y!2 y!2 y!2 y!2 x!3 v!4)) (* x!3 x!3 x!3 x!3 x!3 u!5) ?x375 ?x388 (* 3 (* y!2 x!3 x!3 x!3 k!00)) (* y!2 x!3 x!3 x!3 x!3 v!4) (* (- 3) (* y!2 y!2 x!3 x!3 k!00)) ?x145 (* 3 (* y!2 y!2 x!3 x!3 x!3 u!5)) (* 3 (* y!2 y!2 y!2 x!3 x!3 v!4)) ?x574)))
 (let (($x597 (= ?x429 0)))
 (let (($x389 (not $x597)))
 (let ((?x512 (* y!2 y!2 y!2 y!2 k!10)))
 (let ((?x351 (* y!2 y!2 y!2 y!2 x!3 v!4)))
 (let ((?x350 (* y!2 y!2 y!2 x!3 x!3 u!5)))
 (let ((?x130 (* y!2 y!2 y!2 y!2 k!00)))
 (let ((?x410 (+ ?x130 ?x350 ?x351 (* (- 1) (* y!2 y!2 y!2 y!2 x!3 u!5)) (* (- 1) (* y!2 y!2 y!2 y!2 y!2 v!4)) (* (- 1) ?x375) (* (- 1) ?x388) ?x512)))
 (let (($x416 (= ?x410 0)))
 (let (($x600 (or (not $x416) $x389)))
 (let (($x398 (and $x178 $x600)))
 (let ((?x131 (* x!3 y!2 y!2 y!2 k!10)))
 (let ((?x122 (* x!3 y!2 y!2 y!2 k!00)))
 (let ((?x436 (+ (* 3 (* x!3 x!3 x!3 y!2 k!00)) ?x574 (* (- 3) (* x!3 x!3 y!2 y!2 k!00)) (* (- 1) (* u!5 x!3 x!3 y!2 y!2 y!2)) (* (- 1) (* v!4 x!3 y!2 y!2 y!2 y!2)) (* u!5 x!3 x!3 x!3 x!3 x!3) (* v!4 x!3 x!3 x!3 x!3 y!2) (* (- 3) (* u!5 x!3 x!3 x!3 x!3 y!2)) (* (- 3) (* v!4 x!3 x!3 x!3 y!2 y!2)) (* 3 (* u!5 x!3 x!3 x!3 y!2 y!2)) (* 3 (* v!4 x!3 x!3 y!2 y!2 y!2)) ?x122 ?x131 ?x145 (* 3 (* x!3 x!3 x!3 y!2 k!10)) (* (- 3) (* x!3 x!3 y!2 y!2 k!10)))))
 (let ((?x405 (* v!4 x!3 y!2 y!2 y!2 y!2)))
 (let ((?x396 (* u!5 x!3 x!3 y!2 y!2 y!2)))
 (let ((?x522 (+ ?x396 ?x405 (* (- 1) (* u!5 x!3 y!2 y!2 y!2 y!2)) (* (- 1) (* v!4 y!2 y!2 y!2 y!2 y!2)) (* (- 1) ?x122) ?x130 (* (- 1) ?x131) ?x512)))
 (let ((?x256 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) k!00)))
 (let (($x440 (and (= (+ (* u!5 x!3) (* v!4 y!2) ?x215 ?x256) 0) (or (not (= ?x522 0)) (not (= ?x436 0))))))
 (let (($x232 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x397 (* x y y y k!10)))
 (let ((?x381 (* x y y y k!00)))
 (let ((?x260 (* v x x x x y)))
 (let ((?x252 (* u x x x x x)))
 (let ((?x641 (+ (* 3 (* x x x y k!00)) (* (- 1) (* x x x x k!00)) (* (- 3) (* x x y y k!00)) (* (- 1) (* u x x y y y)) (* (- 1) (* v x y y y y)) ?x252 ?x260 (* (- 3) (* u x x x x y)) (* (- 3) (* v x x x y y)) (* 3 (* u x x x y y)) (* 3 (* v x x y y y)) ?x381 ?x397 (* (- 1) (* x x x x k!10)) (* 3 (* x x x y k!10)) (* (- 3) (* x x y y k!10)))))
 (let ((?x175 (* (- 1) (* v y y y y y))))
 (let ((?x171 (* (- 1) (* u x y y y y))))
 (let ((?x159 (* v x y y y y)))
 (let ((?x156 (* u x x y y y)))
 (let ((?x420 (+ ?x156 ?x159 ?x171 ?x175 (* (- 1) ?x381) (* y y y y k!00) (* (- 1) ?x397) (* y y y y k!10))))
 (let ((?x256 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (and (= (+ ?x33 ?x34 ?x215 ?x256) 0) (or (not (= ?x420 0)) (not (= ?x641 0)))))))))))))))))) :qid k!29))
 ))
 (let (($x221 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x256 (* (- 1) k!10)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x233 (* ?x238 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x215 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x224 (* ?x89 u)))
 (let (($x355 (or (not (= (* ?x89 (+ ?x215 ?x224 ?x45 ?x256) y y y) 0)) (not (= (* ?x238 ?x238 ?x238 (+ ?x215 ?x52 ?x233 ?x256) x) 0)))))
 (let ((?x283 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (and (= ?x283 0) $x355))))))))))) :qid k!29))
 ))
 (let ((?x234 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x397 (* x y y y k!10)))
 (let ((?x381 (* x y y y k!00)))
 (let ((?x260 (* v x x x x y)))
 (let ((?x252 (* u x x x x x)))
 (let ((?x641 (+ (* 3 (* x x x y k!00)) (* (- 1) (* x x x x k!00)) (* (- 3) (* x x y y k!00)) (* (- 1) (* u x x y y y)) (* (- 1) (* v x y y y y)) ?x252 ?x260 (* (- 3) (* u x x x x y)) (* (- 3) (* v x x x y y)) (* 3 (* u x x x y y)) (* 3 (* v x x y y y)) ?x381 ?x397 (* (- 1) (* x x x x k!10)) (* 3 (* x x x y k!10)) (* (- 3) (* x x y y k!10)))))
 (let ((?x175 (* (- 1) (* v y y y y y))))
 (let ((?x171 (* (- 1) (* u x y y y y))))
 (let ((?x159 (* v x y y y y)))
 (let ((?x156 (* u x x y y y)))
 (let ((?x420 (+ ?x156 ?x159 ?x171 ?x175 (* (- 1) ?x381) (* y y y y k!00) (* (- 1) ?x397) (* y y y y k!10))))
 (let ((?x256 (* (- 1) k!10)))
 (let ((?x215 (* (- 1) k!00)))
 (let ((?x34 (* v y)))
 (let ((?x33 (* u x)))
 (let (($x648 (and (= (+ ?x33 ?x34 ?x215 ?x256) 0) (or (not (= ?x420 0)) (not (= ?x641 0))))))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x233 (* ?x238 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x224 (* ?x89 u)))
 (let (($x355 (or (not (= (* ?x89 (+ ?x215 ?x224 ?x45 ?x256) y y y) 0)) (not (= (* ?x238 ?x238 ?x238 (+ ?x215 ?x52 ?x233 ?x256) x) 0)))))
 (let ((?x283 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x298 (and (= ?x283 0) $x355)))
 (rewrite (= $x298 $x648)))))))))))))))))))))))))))
 ))
 (let (($x257 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x256 (* (- 1) k!10)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x233 (* ?x238 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x215 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x224 (* ?x89 u)))
 (let (($x355 (or (not (= (* ?x89 (+ ?x215 ?x224 ?x45 ?x256) y y y) 0)) (not (= (* ?x238 ?x238 ?x238 (+ ?x215 ?x52 ?x233 ?x256) x) 0)))))
 (and (= (+ ?x215 (* x u) (* y v) ?x256) 0) $x355)))))))))) :qid k!29))
 ))
 (let ((?x227 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x256 (* (- 1) k!10)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x233 (* ?x238 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x215 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x224 (* ?x89 u)))
 (let (($x355 (or (not (= (* ?x89 (+ ?x215 ?x224 ?x45 ?x256) y y y) 0)) (not (= (* ?x238 ?x238 ?x238 (+ ?x215 ?x52 ?x233 ?x256) x) 0)))))
 (let ((?x283 (+ k!00 (* (- 1) (* x u)) (* (- 1) (* y v)) k!10)))
 (let (($x298 (and (= ?x283 0) $x355)))
 (let (($x358 (and (= (+ ?x215 (* x u) (* y v) ?x256) 0) $x355)))
 (rewrite (= $x358 $x298)))))))))))))))
 ))
 (let (($x273 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x233 (* ?x238 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x224 (* ?x89 u)))
 (let (($x246 (or (not (= (* ?x89 (+ ?x71 ?x224 ?x45 ?x87) y y y) 0)) (not (= (* ?x238 ?x238 ?x238 (+ ?x71 ?x52 ?x233 ?x87) x) 0)))))
 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) $x246))))))))))) :qid k!29))
 ))
 (let ((?x266 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x256 (* (- 1) k!10)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x233 (* ?x238 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x215 (* (- 1) k!00)))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x224 (* ?x89 u)))
 (let (($x355 (or (not (= (* ?x89 (+ ?x215 ?x224 ?x45 ?x256) y y y) 0)) (not (= (* ?x238 ?x238 ?x238 (+ ?x215 ?x52 ?x233 ?x256) x) 0)))))
 (let (($x358 (and (= (+ ?x215 (* x u) (* y v) ?x256) 0) $x355)))
 (let ((?x279 (* ?x238 ?x238 ?x238 (+ (* (- 1) (* u00 x00)) ?x52 ?x233 (* (- 1) (* v00 y00))) x)))
 (let ((?x249 (* ?x89 (+ (* (- 1) (* u00 x00)) ?x224 ?x45 (* (- 1) (* v00 y00))) y y y)))
 (let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x308 (* y v)))
 (let ((?x299 (* x u)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let (($x243 (and (= (+ ?x71 ?x299 ?x308 ?x87) 0) (or (not (= ?x249 0)) (not (= ?x279 0))))))
 (rewrite (= $x243 $x358)))))))))))))))))))))
 ))
 (let (($x62 (exists ((u Int) (v Int) (x Int) (y Int) )(! (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x38 (* v00 y00)))
 (let ((?x56 (- (+ (* ?x29 u00 x00) (* (+ u v) x) (* v ?x53)) ?x38)))
 (let ((?x42 (- x y)))
 (let ((?x47 (- (+ (* ?x29 u00 x00) (* u ?x42) (* (+ v u) y)) ?x38)))
 (let (($x60 (or (not (= (* ?x47 ?x29 ?x42 y y y) 0)) (not (= (* ?x56 ?x29 x ?x53 ?x53 ?x53) 0)))))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (and $x41 $x60))))))))) :qid k!29))
 ))
 (let ((?x275 (lambda ((u Int) (v Int) (x Int) (y Int) )(let ((?x38 (* v00 y00)))
 (let ((?x87 (* (- 1) ?x38)))
 (let ((?x238 (+ y (* (- 1) x))))
 (let ((?x233 (* ?x238 v)))
 (let ((?x52 (* (+ u v) x)))
 (let ((?x71 (* (- 1) (* u00 x00))))
 (let ((?x45 (* (+ v u) y)))
 (let ((?x89 (+ x (* (- 1) y))))
 (let ((?x224 (* ?x89 u)))
 (let (($x246 (or (not (= (* ?x89 (+ ?x71 ?x224 ?x45 ?x87) y y y) 0)) (not (= (* ?x238 ?x238 ?x238 (+ ?x71 ?x52 ?x233 ?x87) x) 0)))))
 (let (($x243 (and (= (+ ?x71 (* x u) (* y v) ?x87) 0) $x246)))
 (let ((?x53 (- y x)))
 (let ((?x29 (- 1)))
 (let ((?x57 (* (- (+ (* ?x29 u00 x00) ?x52 (* v ?x53)) ?x38) ?x29 x ?x53 ?x53 ?x53)))
 (let ((?x42 (- x y)))
 (let ((?x48 (* (- (+ (* ?x29 u00 x00) (* u ?x42) ?x45) ?x38) ?x29 ?x42 y y y)))
 (let (($x41 (= (- (+ (* ?x29 u00 x00) (* u x) (* v y)) ?x38) 0)))
 (let (($x61 (and $x41 (or (not (= ?x48 0)) (not (= ?x57 0))))))
 (rewrite (= $x61 $x243)))))))))))))))))))))
 ))
 (let ((@x63 (asserted $x62)))
 (let ((@x225 (mp (mp @x63 (quant-intro (proof-bind ?x275) (= $x62 $x273)) $x273) (rewrite (= $x273 $x273)) $x273)))
 (let ((@x229 (mp (mp @x225 (quant-intro (proof-bind ?x266) (= $x273 $x257)) $x257) (quant-intro (proof-bind ?x227) (= $x257 $x221)) $x221)))
 (let ((@x508 (mp~ (mp @x229 (quant-intro (proof-bind ?x234) (= $x221 $x232)) $x232) (sk (~ $x232 $x440)) $x440)))
 (let ((@x547 (mp @x508 (rewrite (= $x440 $x398)) $x398)))
 (let ((@x399 (and-elim @x547 $x178)))
 (let ((@x126 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x372)) @x399 $x372)))
 (let (($x373 (>= ?x84 0)))
 (let ((@x129 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x178) $x373)) @x399 $x373)))
 (let (($x153 (not (<= ?x429 0))))
 (let (($x394 (>= ?x429 0)))
 (let (($x370 (>= ?x410 0)))
 (let (($x369 (<= ?x410 0)))
 (let ((@x140 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x416 (not $x369) (not $x370))) (lemma ((_ th-lemma arith) (hypothesis (not $x369)) @x129 @x126 false) $x369) (lemma ((_ th-lemma arith) (hypothesis (not $x370)) @x129 @x126 false) $x370) $x416)))
 (let ((@x177 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x597 $x153 (not $x394))) (unit-resolution (and-elim @x547 $x600) @x140 $x389) (lemma ((_ th-lemma arith) (hypothesis (not $x394)) @x129 @x126 false) $x394) $x153)))
 ((_ th-lemma arith) @x177 @x129 @x126 false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        7
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           4
 :arith-grobner             4
 :arith-max-min             224
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              3
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :eliminated-applications   2
 :final-checks              4
 :max-memory                3.59
 :memory                    3.12
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1146770
 :num-checks                1
 :propagations              14
 :rlimit-count              3288
 :time                      0.01
 :total-time                0.02)
