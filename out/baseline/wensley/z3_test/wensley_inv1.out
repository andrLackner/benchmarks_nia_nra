unsat
((set-logic NRA)
(declare-fun a!8 () Real)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x140 (* (- 1.0) (* d00 a!8))))
 (let ((?x218 (* b00 d!6)))
 (let ((?x67 (* 2.0 (* b00 y!5))))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x222 (+ ?x30 ?x72 ?x67 (* (- 1.0) (* d00 b!7)) ?x218 ?x140)))
 (let (($x268 (not (<= ?x222 0.0))))
 (let (($x170 (>= ?x222 0.0)))
 (let ((?x197 (* d00 b!7)))
 (let ((?x176 (+ ?x197 (* (- 1.0) ?x218))))
 (let (($x177 (<= ?x176 0.0)))
 (let (($x171 (= 0.0 ?x176)))
 (let ((@x254 (symm (commutativity (= $x171 (= ?x176 0.0))) (= (= ?x176 0.0) $x171))))
 (let (($x220 (= ?x176 0.0)))
 (let ((?x216 (* d!6 a!8)))
 (let ((?x245 (+ ?x216 (* (- 2.0) (* b!7 y!5)) (* (- 1.0) (* a00 d!6)) (* 2.0 (* y00 b!7)))))
 (let ((?x103 (+ ?x30 ?x72 ?x67 ?x140)))
 (let (($x94 (= ?x103 0.0)))
 (let (($x228 (= ?x222 0.0)))
 (let (($x175 (not $x228)))
 (let (($x229 (or (not $x94) $x175)))
 (let (($x230 (and $x229 $x94 $x220 (= ?x245 0.0))))
 (let ((?x115 (+ ?x216 (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x133 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x72 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x198 (* d!6 b00)))
 (let ((?x119 (* 2.0 (* y!5 b00))))
 (let ((?x120 (* (- 1.0) (* a!8 d00))))
 (let (($x209 (not (= (+ ?x30 ?x120 ?x72 ?x119 (* (- 1.0) (* b!7 d00)) ?x198) 0.0))))
 (let (($x187 (and (or (not $x133) $x209) $x133 (= (+ (* b!7 d00) (* (- 1.0) ?x198)) 0.0) (= ?x115 0.0))))
 (let (($x191 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x156 (= (+ ?x90 ?x121 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x82 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x78 (* 2.0 (* y b00))))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x93 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x104 (= (+ ?x30 ?x93 ?x72 ?x78) 0.0)))
 (let (($x231 (= (+ ?x30 ?x93 ?x72 ?x78 (* (- 1.0) (* b d00)) (* d b00)) 0.0)))
 (let (($x102 (not $x104)))
 (and (or $x102 (not $x231)) $x104 $x82 $x156))))))))))))) :qid k!32))
 ))
 (let (($x165 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x162 (= (+ ?x90 ?x121 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x188 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x123 (* 2.0 (* b00 y))))
 (let ((?x30 (* a00 d00)))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let (($x146 (= (+ ?x72 ?x30 ?x123 (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x136 (+ ?x72 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let (($x148 (or (not $x146) (not (= ?x136 0.0)))))
 (and $x148 $x146 $x188 $x162))))))))))) :qid k!32))
 ))
 (let ((?x200 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x156 (= (+ ?x90 ?x121 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x82 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x78 (* 2.0 (* y b00))))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x93 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x104 (= (+ ?x30 ?x93 ?x72 ?x78) 0.0)))
 (let (($x231 (= (+ ?x30 ?x93 ?x72 ?x78 (* (- 1.0) (* b d00)) (* d b00)) 0.0)))
 (let (($x102 (not $x104)))
 (let (($x190 (and (or $x102 (not $x231)) $x104 $x82 $x156)))
 (let (($x162 (= (+ ?x90 ?x121 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x188 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x146 (= (+ ?x72 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x136 (+ ?x72 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let (($x148 (or (not $x146) (not (= ?x136 0.0)))))
 (let (($x160 (and $x148 $x146 $x188 $x162)))
 (rewrite (= $x160 $x190))))))))))))))))))))))
 ))
 (let (($x158 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x136 (+ ?x72 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let (($x146 (= (+ ?x72 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x148 (or (not $x146) (not (= ?x136 0.0)))))
 (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x162 (= (+ ?x90 ?x121 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x188 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (and $x146 $x188 $x162 $x148)))))))))) :qid k!32))
 ))
 (let (($x63 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x58 (- (+ ?x27 ?x30 (* 2.0 b00 (+ y (/ d 2.0)))) (* (+ a b) d00))))
 (let (($x36 (= (- (+ ?x27 ?x30 (* 2.0 b00 y)) (* a d00)) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x36) (not (= ?x58 0.0)))))))))) :qid k!32))
 ))
 (let ((?x105 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x136 (+ ?x72 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let (($x146 (= (+ ?x72 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x148 (or (not $x146) (not (= ?x136 0.0)))))
 (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x162 (= (+ ?x90 ?x121 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x188 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x132 (and $x146 $x188 $x162 $x148)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x58 (- (+ ?x27 ?x30 (* 2.0 b00 (+ y (/ d 2.0)))) (* (+ a b) d00))))
 (let (($x36 (= (- (+ ?x27 ?x30 (* 2.0 b00 y)) (* a d00)) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x62 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x36) (not (= ?x58 0.0))))))
 (rewrite (= $x62 $x132)))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x173 (mp (mp @x64 (quant-intro (proof-bind ?x105) (= $x63 $x158)) $x158) (rewrite (= $x158 $x165)) $x165)))
 (let ((@x179 (mp~ (mp @x173 (quant-intro (proof-bind ?x200) (= $x165 $x191)) $x191) (sk (~ $x191 $x187)) $x187)))
 (let ((@x251 (mp @x179 (rewrite (= $x187 $x230)) $x230)))
 (let ((@x255 (mp (and-elim @x251 $x220) @x254 $x171)))
 (let (($x172 (>= ?x103 0.0)))
 (let (($x204 (= 0.0 ?x103)))
 (let ((@x95 (and-elim @x251 $x94)))
 (let ((@x264 (mp @x95 (symm (commutativity (= $x204 $x94)) (= $x94 $x204)) $x204)))
 (let ((@x266 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x204) $x172)) @x264 $x172) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x177)) @x255 $x177) (hypothesis (not $x170)) false)))
 (let (($x178 (= 0.0 ?x222)))
 (let (($x276 (not $x178)))
 (let ((@x278 (monotonicity (symm (commutativity (= $x178 $x228)) (= $x228 $x178)) (= $x175 $x276))))
 (let ((@x281 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x178 $x268 (not $x170))) (mp (unit-resolution (and-elim @x251 $x229) @x95 $x175) @x278 $x276) (or $x268 (not $x170)))))
 (let (($x138 (>= ?x176 0.0)))
 (let (($x215 (<= ?x103 0.0)))
 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x204) $x215)) @x264 $x215) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x171) $x138)) @x255 $x138) (unit-resolution @x281 (lemma @x266 $x170) $x268) false))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs           11
 :arith-eq-adapter    4
 :arith-conflicts     2
 :arith-diseq         2
 :arith-lower         5
 :arith-make-feasible 4
 :arith-max-columns   26
 :arith-max-rows      4
 :arith-offset-eqs    1
 :arith-upper         5
 :conflicts           2
 :decisions           1
 :del-clause          15
 :max-memory          17.83
 :memory              17.31
 :mk-bool-var         16
 :mk-clause           17
 :num-allocs          98547
 :num-checks          1
 :propagations        9
 :rlimit-count        1606
 :time                0.01
 :total-time          0.01)
