unsat
((set-logic NRA)
(proof
(let (($x139 (exists ((b Real) (x Real) )(! (let ((?x81 (* (- (/ 1.0 2.0)) b)))
 (let ((?x77 (* x b)))
 (let ((?x78 (* (- 1.0) ?x77)))
 (let ((?x62 (* b00 x00)))
 (let ((?x130 (+ ?x62 r00 ?x78 ?x81)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x83 (* ?x183 b)))
 (let ((?x127 (* (/ 1.0 2.0) ?x83)))
 (let ((?x129 (+ ?x78 ?x81 ?x127)))
 (let ((?x148 (* ?x183 ?x183 ?x129 ?x130 ?x130 ?x130 ?x130 b b b b b b)))
 (let (($x146 (= ?x148 0.0)))
 (not $x146))))))))))))) :qid k!28))
 ))
 (let (($x314 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x313 (lambda ((b Real) (x Real) )(let ((?x81 (* (- (/ 1.0 2.0)) b)))
 (let ((?x77 (* x b)))
 (let ((?x78 (* (- 1.0) ?x77)))
 (let ((?x62 (* b00 x00)))
 (let ((?x130 (+ ?x62 r00 ?x78 ?x81)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x83 (* ?x183 b)))
 (let ((?x127 (* (/ 1.0 2.0) ?x83)))
 (let ((?x129 (+ ?x78 ?x81 ?x127)))
 (let ((?x148 (* ?x183 ?x183 ?x129 ?x130 ?x130 ?x130 ?x130 b b b b b b)))
 (let (($x146 (= ?x148 0.0)))
 (let (($x122 (not $x146)))
 (let ((?x330 (+ ?x81 r00 ?x62 ?x78)))
 (let ((?x324 (* ?x183 ?x183 0.0 ?x330 ?x330 ?x330 ?x330 b b b b b b)))
 (let ((@x326 (rewrite (= ?x130 ?x330))))
 (let ((?x162 (* (/ 1.0 2.0) b)))
 (let ((?x328 (+ ?x162 ?x77)))
 (let ((?x199 (+ ?x162 (* (/ 1.0 2.0) (* 2.0 ?x77)))))
 (let ((@x196 (rewrite (= (+ (* 1.0 b) (* ?x45 b)) (+ b (* 2.0 ?x77))))))
 (let ((@x177 (trans (rewrite (= ?x83 (+ (* 1.0 b) (* ?x45 b)))) @x196 (= ?x83 (+ b (* 2.0 ?x77))))))
 (let ((@x204 (trans (monotonicity @x177 (= ?x127 (* (/ 1.0 2.0) (+ b (* 2.0 ?x77))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x77))) ?x199)) (= ?x127 ?x199))))
 (let ((@x325 (monotonicity (trans @x204 (rewrite (= ?x199 ?x328)) (= ?x127 ?x328)) (= ?x129 (+ ?x78 ?x81 ?x328)))))
 (let ((@x322 (monotonicity (trans @x325 (rewrite (= (+ ?x78 ?x81 ?x328) 0.0)) (= ?x129 0.0)) @x326 @x326 @x326 @x326 (= ?x148 ?x324))))
 (let ((@x213 (monotonicity (trans @x322 (rewrite (= ?x324 0.0)) $x146) (= $x146 (= 0.0 0.0)))))
 (let ((@x317 (monotonicity (trans @x213 (rewrite (= (= 0.0 0.0) true)) (= $x146 true)) (= $x122 (not true)))))
 (trans @x317 (rewrite (= (not true) false)) (= $x122 false)))))))))))))))))))))))))))))
 ))
 (let ((@x306 (trans (quant-intro (proof-bind ?x313) (= $x139 $x314)) (elim-unused (= $x314 false)) (= $x139 false))))
 (let (($x68 (exists ((b Real) (r Real) (x Real) )(! (let ((?x79 (* (- 1.0) r00)))
 (let ((?x112 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x171 (+ ?x63 r ?x112 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x115 (+ r ?x112)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x198 (* ?x183 ?x183 ?x115 ?x115 ?x115 ?x115 ?x171 b b b b b b)))
 (let ((?x90 (* x b)))
 (let ((?x80 (+ ?x63 r ?x79 ?x90)))
 (let ((?x82 (* ?x80 x x r r r r b b b b b b)))
 (and (= ?x80 0.0) (or (not (= ?x82 0.0)) (not (= ?x198 0.0)))))))))))))))) :qid k!28))
 ))
 (let (($x54 (exists ((b Real) (r Real) (x Real) )(! (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x49 (* (+ (- (+ (* (- 1.0) b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x36 ?x42 ?x36 ?x36 ?x36 ?x42 ?x42 ?x46 ?x46 ?x36 ?x36 ?x42)))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let ((?x39 (* (+ ?x30 (* ?x36 2.0 x)) ?x36 r ?x36 ?x36 ?x36 r r 2.0 x 2.0 x ?x36 ?x36 r)))
 (and (= (+ ?x30 (* b x)) 0.0) (or (not (= ?x39 0.0)) (not (= ?x49 0.0))))))))))) :qid k!28))
 ))
 (let ((?x72 (lambda ((b Real) (r Real) (x Real) )(let ((?x79 (* (- 1.0) r00)))
 (let ((?x112 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x171 (+ ?x63 r ?x112 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x115 (+ r ?x112)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x198 (* ?x183 ?x183 ?x115 ?x115 ?x115 ?x115 ?x171 b b b b b b)))
 (let ((?x90 (* x b)))
 (let ((?x80 (+ ?x63 r ?x79 ?x90)))
 (let ((?x82 (* ?x80 x x r r r r b b b b b b)))
 (let (($x345 (and (= ?x80 0.0) (or (not (= ?x82 0.0)) (not (= ?x198 0.0))))))
 (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x49 (* (+ (- (+ (* (- 1.0) b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x36 ?x42 ?x36 ?x36 ?x36 ?x42 ?x42 ?x46 ?x46 ?x36 ?x36 ?x42)))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let ((?x39 (* (+ ?x30 (* ?x36 2.0 x)) ?x36 r ?x36 ?x36 ?x36 r r 2.0 x 2.0 x ?x36 ?x36 r)))
 (let (($x53 (and (= (+ ?x30 (* b x)) 0.0) (or (not (= ?x39 0.0)) (not (= ?x49 0.0))))))
 (rewrite (= $x53 $x345)))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x103 (mp (mp @x55 (quant-intro (proof-bind ?x72) (= $x54 $x68)) $x68) (rewrite (= $x68 $x139)) $x139)))
 (mp @x103 @x306 false))))))))))))

(:max-memory   17.60
 :memory       17.33
 :num-allocs   55771
 :num-checks   1
 :rlimit-count 525
 :time         0.00
 :total-time   0.02)
