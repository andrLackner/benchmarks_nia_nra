unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x121 (* (- 1) y!0)))
 (let ((?x118 (+ y00 x00 (* (- 1) x!1) ?x121)))
 (let (($x135 (>= ?x118 0)))
 (let (($x320 (= ?x118 0)))
 (let ((?x475 (* x!1 x!1 x!1)))
 (let ((?x372 (* x!1 y!0 y!0)))
 (let ((?x151 (* 3 ?x372)))
 (let ((?x329 (* x!1 x!1 x!1 y!0 y!0)))
 (let ((?x312 (* x!1 x!1)))
 (let ((?x293 (* 3 ?x312)))
 (let ((?x300 (* x!1 x!1 y!0)))
 (let ((?x248 (* (- 6) ?x300)))
 (let ((?x290 (* x!1 x!1 y!0 y!0)))
 (let ((?x330 (* 3 ?x290)))
 (let ((?x432 (* 2 x!1)))
 (let ((?x211 (* y!0 y!0)))
 (let ((?x95 (* x!1 x!1 x!1 y!0)))
 (let ((?x474 (* (- 2) ?x95)))
 (let ((?x473 (+ 1 x!1)))
 (let ((?x389 (+ (- 1) y!0)))
 (let ((?x92 (* ?x389 ?x389 ?x389 ?x473 ?x473 ?x473)))
 (let ((?x187 (+ (- 1) ?x92 ?x474 ?x211 ?x432 ?x330 ?x248 ?x293 ?x329 ?x121 ?x151 (* (- 5) (* x!1 y!0)) ?x475)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x464 (+ ?x64 ?x71 x!1 y!0)))
 (let ((?x253 (* ?x464 ?x187)))
 (let (($x195 (= ?x253 0)))
 (let (($x242 (not $x195)))
 (let ((?x140 (+ 1 y!0)))
 (let ((?x452 (+ (- 1) x!1)))
 (let ((?x443 (* ?x452 ?x452 ?x452 ?x140 ?x140 ?x140)))
 (let ((?x468 (* (- 3) y!0)))
 (let ((?x453 (* (- 3) ?x290)))
 (let ((?x455 (* (- 1) ?x211)))
 (let ((?x451 (* 2 ?x95)))
 (let ((?x165 (+ (- 3) ?x451 ?x455 (* 4 x!1) ?x453 ?x248 (* (- 3) ?x312) ?x329 ?x468 ?x151 (* 7 (* x!1 y!0)) ?x443 ?x475)))
 (let ((?x164 (* ?x464 ?x165)))
 (let (($x366 (= ?x164 0)))
 (let (($x395 (or (not $x366) $x242)))
 (let (($x382 (and $x320 $x395)))
 (let ((?x461 (+ (- 3) (* 3 x!1) ?x468 (* 5 (* x!1 y!0)) ?x443 ?x451 (* (- 4) ?x300) ?x475 (* (- 2) ?x312) ?x453 ?x329 (* 2 ?x372) (* (- 1) (* x!1 (- 1) y!0 y!0)) ?x455 (* (- 1) (* x!1 x!1 1 y!0)) (* (- 1) (* x!1 (- 1) 1 y!0)) (* (- 1) (* x!1 x!1 y!0 1)) (* (- 1) (* x!1 (- 1) y!0 1)) (* (- 1) (* x!1 x!1 1 1)) (* (- 1) (* x!1 (- 1) 1 1)))))
 (let ((?x429 (+ x!1 y!0 ?x64 ?x71)))
 (let ((?x444 (+ (- 1) ?x432 (* (- 2) (* x!1 y!0)) ?x92 ?x474 (* (- 3) ?x300) ?x475 ?x293 ?x330 ?x329 ?x151 ?x211 (* (- 1) (* y!0 1 x!1 x!1)) (* (- 1) (* y!0 1 1 1)) (* (- 1) (* y!0 x!1 1 1)) (* (- 1) (* y!0 1 x!1 1)) (* (- 1) (* y!0 1 1 x!1)) (* (- 1) (* y!0 x!1 1 x!1)) (* (- 1) (* y!0 x!1 x!1 1)))))
 (let (($x355 (and (= ?x429 0) (or (not (= (* ?x429 ?x444) 0)) (not (= (* ?x429 ?x461) 0))))))
 (let (($x431 (exists ((x Int) (y Int) )(! (let ((?x203 (* x x x y y)))
 (let ((?x184 (* x x x)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x299 (+ (- 3) (* 3 x) (* (- 3) y) (* 5 (* x y)) ?x144 (* 2 (* x x x y)) (* (- 4) (* x x y)) ?x184 (* (- 2) (* x x)) (* (- 3) (* x x y y)) ?x203 (* 2 (* x y y)) (* (- 1) (* x (- 1) y y)) (* (- 1) (* y y)) (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)))))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x85 (+ x y ?x64 ?x71)))
 (let (($x305 (not (= (* ?x85 ?x299) 0))))
 (let ((?x215 (* y y)))
 (let ((?x207 (* x y y)))
 (let ((?x426 (* 3 ?x207)))
 (let ((?x201 (* x x y y)))
 (let ((?x427 (* 3 ?x201)))
 (let ((?x190 (* x x)))
 (let ((?x421 (* 3 ?x190)))
 (let ((?x169 (* x x x y)))
 (let ((?x425 (* (- 2) ?x169)))
 (let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x150 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x272 (* 2 x)))
 (let ((?x67 (+ (- 1) ?x272 (* (- 2) (* x y)) ?x150 ?x425 (* (- 3) (* x x y)) ?x184 ?x421 ?x427 ?x203 ?x426 ?x215 (* (- 1) (* y 1 x x)) (* (- 1) (* y 1 1 1)) (* (- 1) (* y x 1 1)) (* (- 1) (* y 1 x 1)) (* (- 1) (* y 1 1 x)) (* (- 1) (* y x 1 x)) (* (- 1) (* y x x 1)))))
 (let (($x90 (= ?x85 0)))
 (and $x90 (or (not (= (* ?x85 ?x67) 0)) $x305))))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x233 (exists ((x Int) (y Int) )(! (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x111 (+ x ?x64 ?x71 y)))
 (let (($x228 (= (* ?x111 (+ (- 1) (* ?x80 ?x126) ?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126))) 0)))
 (let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x150 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let (($x277 (= (* ?x111 (+ (- 1) (* ?x105 ?x130) ?x150 (* ?x105 ?x105 ?x130 ?x130 ?x130))) 0)))
 (and (= ?x111 0) (or (not $x277) (not $x228)))))))))))))) :qid k!27))
 ))
 (let ((?x68 (lambda ((x Int) (y Int) )(let ((?x203 (* x x x y y)))
 (let ((?x184 (* x x x)))
 (let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x299 (+ (- 3) (* 3 x) (* (- 3) y) (* 5 (* x y)) ?x144 (* 2 (* x x x y)) (* (- 4) (* x x y)) ?x184 (* (- 2) (* x x)) (* (- 3) (* x x y y)) ?x203 (* 2 (* x y y)) (* (- 1) (* x (- 1) y y)) (* (- 1) (* y y)) (* (- 1) (* x x 1 y)) (* (- 1) (* x (- 1) 1 y)) (* (- 1) (* x x y 1)) (* (- 1) (* x (- 1) y 1)) (* (- 1) (* x x 1 1)) (* (- 1) (* x (- 1) 1 1)))))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x85 (+ x y ?x64 ?x71)))
 (let (($x305 (not (= (* ?x85 ?x299) 0))))
 (let ((?x215 (* y y)))
 (let ((?x207 (* x y y)))
 (let ((?x426 (* 3 ?x207)))
 (let ((?x201 (* x x y y)))
 (let ((?x427 (* 3 ?x201)))
 (let ((?x190 (* x x)))
 (let ((?x421 (* 3 ?x190)))
 (let ((?x169 (* x x x y)))
 (let ((?x425 (* (- 2) ?x169)))
 (let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x150 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let ((?x272 (* 2 x)))
 (let ((?x67 (+ (- 1) ?x272 (* (- 2) (* x y)) ?x150 ?x425 (* (- 3) (* x x y)) ?x184 ?x421 ?x427 ?x203 ?x426 ?x215 (* (- 1) (* y 1 x x)) (* (- 1) (* y 1 1 1)) (* (- 1) (* y x 1 1)) (* (- 1) (* y 1 x 1)) (* (- 1) (* y 1 1 x)) (* (- 1) (* y x 1 x)) (* (- 1) (* y x x 1)))))
 (let (($x90 (= ?x85 0)))
 (let (($x72 (and $x90 (or (not (= (* ?x85 ?x67) 0)) $x305))))
 (let ((?x111 (+ x ?x64 ?x71 y)))
 (let (($x228 (= (* ?x111 (+ (- 1) (* ?x80 ?x126) ?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126))) 0)))
 (let (($x277 (= (* ?x111 (+ (- 1) (* ?x105 ?x130) ?x150 (* ?x105 ?x105 ?x130 ?x130 ?x130))) 0)))
 (let (($x182 (and (= ?x111 0) (or (not $x277) (not $x228)))))
 (rewrite (= $x182 $x72)))))))))))))))))))))))))))))))))
 ))
 (let (($x61 (exists ((x Int) (y Int) )(! (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x55 (+ ?x38 (* ?x47 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (+ ?x38 (* ?x34 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39))))
 (let (($x59 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x55) 0)))))
 (and (= (+ (- (- x y00) x00) y) 0) $x59))))))))) :qid k!27))
 ))
 (let ((?x259 (lambda ((x Int) (y Int) )(let ((?x126 (+ 1 y)))
 (let ((?x80 (+ (- 1) x)))
 (let ((?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126 ?x126)))
 (let ((?x71 (* (- 1) x00)))
 (let ((?x64 (* (- 1) y00)))
 (let ((?x111 (+ x ?x64 ?x71 y)))
 (let (($x228 (= (* ?x111 (+ (- 1) (* ?x80 ?x126) ?x144 (* ?x80 ?x80 ?x80 ?x126 ?x126))) 0)))
 (let ((?x130 (+ 1 x)))
 (let ((?x105 (+ (- 1) y)))
 (let ((?x150 (* ?x105 ?x105 ?x105 ?x130 ?x130 ?x130)))
 (let (($x277 (= (* ?x111 (+ (- 1) (* ?x105 ?x130) ?x150 (* ?x105 ?x105 ?x130 ?x130 ?x130))) 0)))
 (let (($x182 (and (= ?x111 0) (or (not $x277) (not $x228)))))
 (let ((?x50 (- y 1)))
 (let ((?x47 (+ x 1)))
 (let ((?x38 (- 1)))
 (let ((?x55 (+ ?x38 (* ?x47 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50 ?x50) (* ?x47 ?x47 ?x47 ?x50 ?x50))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x43 (+ ?x38 (* ?x34 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39))))
 (let (($x59 (or (not (= (* (+ (- (- ?x34 y00) x00) y 1) ?x43) 0)) (not (= (* (+ (- (- ?x47 y00) x00) ?x50) ?x55) 0)))))
 (let (($x60 (and (= (+ (- (- x y00) x00) y) 0) $x59)))
 (rewrite (= $x60 $x182))))))))))))))))))))))))
 ))
 (let ((@x62 (asserted $x61)))
 (let ((@x176 (mp (mp @x62 (quant-intro (proof-bind ?x259) (= $x61 $x233)) $x233) (rewrite (= $x233 $x233)) $x233)))
 (let ((@x315 (mp~ (mp @x176 (quant-intro (proof-bind ?x68) (= $x233 $x431)) $x431) (sk (~ $x431 $x355)) $x355)))
 (let ((@x264 (mp @x315 (rewrite (= $x355 $x382)) $x382)))
 (let ((@x342 (and-elim @x264 $x320)))
 (let ((@x394 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x320) $x135)) @x342 $x135)))
 (let (($x158 (<= ?x118 0)))
 (let ((@x94 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x320) $x158)) @x342 $x158)))
 (let (($x206 (not (<= ?x253 0))))
 (let (($x159 (>= ?x253 0)))
 (let (($x241 (>= ?x164 0)))
 (let (($x173 (<= ?x164 0)))
 (let ((@x65 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x366 (not $x173) (not $x241))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x173)) @x94 @x394 false) $x173) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x241)) @x94 @x394 false) $x241) $x366)))
 (let ((@x243 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x195 $x206 (not $x159))) (unit-resolution (and-elim @x264 $x395) @x65 $x242) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x159)) @x94 @x394 false) $x159) $x206)))
 ((_ th-lemma arith farkas 1 1 1) @x243 @x94 @x394 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        29
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             168
 :arith-nonlinear-bounds    12
 :arith-num-rows            8
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 35
 :arith-tableau-max-rows    8
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                19.59
 :memory                    19.10
 :mk-bool-var               9
 :mk-clause                 12
 :num-allocs                522616
 :num-checks                1
 :propagations              14
 :rlimit-count              2413
 :time                      0.01
 :total-time                0.02)
