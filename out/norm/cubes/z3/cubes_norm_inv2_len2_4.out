unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x541 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x669 (<= ?x541 1)))
 (let (($x727 (= ?x541 1)))
 (let ((?x638 (* 48 (* k!2 k!2 n!0))))
 (let ((?x324 (+ c!3 k!2)))
 (let ((?x583 (+ k!2 m!1)))
 (let ((?x542 (+ 6 m!1)))
 (let ((?x581 (+ 1 n!0)))
 (let ((?x564 (* 9 (* ?x581 ?x581 ?x581 ?x542 ?x542 ?x583 ?x583 ?x324 ?x324))))
 (let ((?x384 (* (- 1) (* ?x581 ?x581 ?x542 ?x542 ?x583 ?x583 ?x583 ?x583 ?x324))))
 (let ((?x728 (* 24 (* m!1 m!1))))
 (let ((?x433 (* 5 (* ?x581 ?x581 ?x542 ?x542 ?x583 ?x583 ?x583 ?x324))))
 (let ((?x466 (* 9 (* ?x581 ?x581 ?x581 ?x542 ?x583 ?x583))))
 (let ((?x657 (* k!2 k!2)))
 (let ((?x671 (* 24 ?x657)))
 (let ((?x637 (* 24 (* k!2 k!2 n!0 n!0))))
 (let ((?x612 (* 4 (* k!2 k!2 m!1))))
 (let ((?x601 (* 8 (* k!2 m!1 m!1))))
 (let ((?x390 (* (- 5) (* ?x581 ?x581 ?x542 ?x583 ?x583 ?x583))))
 (let ((?x399 (* (- 4) (* ?x581 ?x581 ?x542 ?x542 ?x583 ?x583 ?x324))))
 (let ((?x452 (* ?x581 ?x581 ?x542 ?x583 ?x583 ?x583 ?x583)))
 (let ((?x635 (* (- 9) (* ?x581 ?x581 ?x581 ?x542 ?x542 ?x583 ?x583 ?x324))))
 (let ((?x373 (* 48 (* k!2 m!1))))
 (let ((?x454 (* 18 (* ?x581 ?x581 ?x542 ?x542 ?x583 ?x583 ?x324 ?x324))))
 (let ((?x404 (* (- 18) (* ?x581 ?x581 ?x542 ?x583 ?x583 ?x324))))
 (let ((?x780 (* (- 9) (* ?x581 ?x581 ?x581 ?x542 ?x583 ?x583 ?x324))))
 (let ((?x722 (* 4 (* m!1 m!1 m!1))))
 (let ((?x620 (+ ?x722 ?x780 (* 96 (* k!2 n!0 m!1)) (* 8 (* k!2 k!2 n!0 m!1)) (* 8 (* n!0 m!1 m!1 m!1)) ?x404 ?x454 (* 48 (* n!0 m!1 m!1)) ?x373 ?x635 ?x452 (* 48 (* k!2 n!0 n!0 m!1)) ?x399 ?x390 ?x601 ?x612 ?x637 (* 16 (* k!2 n!0 m!1 m!1)) ?x671 (* 4 (* k!2 k!2 n!0 n!0 m!1)) ?x466 ?x433 (* 24 (* n!0 n!0 m!1 m!1)) ?x728 ?x384 ?x564 (* 4 (* n!0 n!0 m!1 m!1 m!1)) (* 8 (* k!2 n!0 n!0 m!1 m!1)) ?x638)))
 (let (($x714 (= ?x620 0)))
 (let (($x371 (not $x714)))
 (let ((?x510 (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0)))))
 (let (($x490 (= ?x510 1)))
 (let ((?x655 (* (- 9) n!0)))
 (let ((?x348 (* (- 1) ?x657)))
 (let ((?x447 (* 5 k!2)))
 (let ((?x386 (* 18 c!3)))
 (let ((?x599 (* 9 (* c!3 n!0))))
 (let ((?x458 (+ ?x599 ?x386 ?x447 ?x348 ?x655)))
 (let (($x323 (= ?x458 4)))
 (let ((?x634 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x456 (= ?x634 (- 6))))
 (let (($x624 (and $x456 $x323 $x490 $x727 $x371)))
 (let ((?x760 (+ ?x671 (* 48 (* k!2 m!1 n!0 n!0)) ?x466 (* 96 (* k!2 m!1 n!0)) ?x454 ?x384 ?x433 ?x373 (* 8 (* m!1 m!1 m!1 n!0)) (* 16 (* k!2 m!1 m!1 n!0)) (* 8 (* k!2 k!2 m!1 n!0)) ?x638 (* 48 (* m!1 m!1 n!0)) (* 24 (* m!1 m!1 n!0 n!0)) ?x564 ?x399 (* 4 (* m!1 m!1 m!1 n!0 n!0)) (* 8 (* k!2 m!1 m!1 n!0 n!0)) ?x390 (* 4 (* k!2 k!2 m!1 n!0 n!0)) ?x728 ?x635 ?x452 ?x780 ?x612 ?x404 ?x637 ?x601 ?x722)))
 (let (($x737 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x386 ?x447 ?x655 ?x348 ?x599) 4) $x490 $x727 (not (= ?x760 0)))))
 (let (($x732 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x544 (* (- 18) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x502 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x797 (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69 ?x69)))
 (let ((?x463 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x745 (* (- 5) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69))))
 (let ((?x445 (* (- 4) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x712 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x507 (* 5 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x467 (* 18 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x793 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69))))
 (let ((?x839 (+ (* 24 (* k k)) (* 48 (* k m n n)) ?x793 (* 96 (* k m n)) ?x467 ?x808 ?x507 (* 48 (* k m)) (* 8 (* m m m n)) (* 16 (* k m m n)) (* 8 (* k k m n)) (* 48 (* k k n)) (* 48 (* m m n)) (* 24 (* m m n n)) ?x712 ?x445 (* 4 (* m m m n n)) (* 8 (* k m m n n)) ?x745 (* 4 (* k k m n n)) (* 24 (* m m)) ?x463 ?x797 ?x502 (* 4 (* k k m)) ?x544 (* 24 (* k k n n)) (* 8 (* k m m)) (* 4 (* m m m)))))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 $x214 $x266 $x304 (not (= ?x839 0)))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x570 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x507 (* 5 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x544 (* (- 18) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x502 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x797 (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69 ?x69)))
 (let ((?x793 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69))))
 (let ((?x467 (* 18 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x463 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x745 (* (- 5) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69))))
 (let ((?x445 (* (- 4) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x712 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x863 (+ ?x712 ?x445 ?x745 (* 4 (* ?x315 ?x315 ?x312 ?x69 ?x69)) ?x463 ?x467 ?x793 ?x797 ?x808 ?x502 ?x544 ?x507)))
 (let (($x709 (not (= ?x863 0))))
 (let (($x702 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x746 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x746 $x702 $x709)))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x387 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x544 (* (- 18) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x502 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x797 (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69 ?x69)))
 (let ((?x463 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x745 (* (- 5) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69))))
 (let ((?x445 (* (- 4) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x712 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x507 (* 5 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x467 (* 18 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x793 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69))))
 (let ((?x839 (+ (* 24 (* k k)) (* 48 (* k m n n)) ?x793 (* 96 (* k m n)) ?x467 ?x808 ?x507 (* 48 (* k m)) (* 8 (* m m m n)) (* 16 (* k m m n)) (* 8 (* k k m n)) (* 48 (* k k n)) (* 48 (* m m n)) (* 24 (* m m n n)) ?x712 ?x445 (* 4 (* m m m n n)) (* 8 (* k m m n n)) ?x745 (* 4 (* k k m n n)) (* 24 (* m m)) ?x463 ?x797 ?x502 (* 4 (* k k m)) ?x544 (* 24 (* k k n n)) (* 8 (* k m m)) (* 4 (* m m m)))))
 (let (($x304 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x266 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x214 (= (+ ?x40 ?x44 ?x216 ?x217 (* 9 (* c n))) 4)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x824 (and $x130 $x214 $x266 $x304 (not (= ?x839 0)))))
 (let ((?x863 (+ ?x712 ?x445 ?x745 (* 4 (* ?x315 ?x315 ?x312 ?x69 ?x69)) ?x463 ?x467 ?x793 ?x797 ?x808 ?x502 ?x544 ?x507)))
 (let (($x709 (not (= ?x863 0))))
 (let (($x702 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x746 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x572 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x746 $x702 $x709)))
 (rewrite (= $x572 $x824))))))))))))))))))))))))))))))))))
 ))
 (let (($x711 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x507 (* 5 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x544 (* (- 18) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x502 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x797 (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69 ?x69)))
 (let ((?x793 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69))))
 (let ((?x467 (* 18 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x463 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x745 (* (- 5) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69))))
 (let ((?x445 (* (- 4) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x712 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x863 (+ ?x712 ?x445 ?x745 (* 4 (* ?x315 ?x315 ?x312 ?x69 ?x69)) ?x463 ?x467 ?x793 ?x797 ?x808 ?x502 ?x544 ?x507)))
 (let (($x709 (not (= ?x863 0))))
 (let (($x702 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x677 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (and $x130 (= ?x346 (- 4)) $x677 $x702 $x709)))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x563 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x507 (* 5 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x544 (* (- 18) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x502 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x797 (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69 ?x69)))
 (let ((?x793 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69))))
 (let ((?x467 (* 18 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x463 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x745 (* (- 5) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69))))
 (let ((?x445 (* (- 4) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x712 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x863 (+ ?x712 ?x445 ?x745 (* 4 (* ?x315 ?x315 ?x312 ?x69 ?x69)) ?x463 ?x467 ?x793 ?x797 ?x808 ?x502 ?x544 ?x507)))
 (let (($x709 (not (= ?x863 0))))
 (let (($x702 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x746 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x217 (* (- 1) ?x49)))
 (let ((?x216 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x572 (and $x130 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x216 ?x217) 4) $x746 $x702 $x709)))
 (let (($x677 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x718 (and $x130 (= ?x346 (- 4)) $x677 $x702 $x709)))
 (rewrite (= $x718 $x572)))))))))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x75 (- (* 9 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 4 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x75 (* 5 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 4 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x84 (+ (- ?x78 (* 9 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 18 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71) (* 9 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x89 (- (- ?x84 (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71)) (* 9 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x92 (+ (- ?x89 (* 18 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 5 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x439 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x312 (+ 6 m)))
 (let ((?x315 (+ 1 n)))
 (let ((?x507 (* 5 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x544 (* (- 18) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x502 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 1) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x797 (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69 ?x69)))
 (let ((?x793 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x69 ?x69))))
 (let ((?x467 (* 18 (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x463 (* (- 9) (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x745 (* (- 5) (* ?x315 ?x315 ?x312 ?x69 ?x69 ?x69))))
 (let ((?x445 (* (- 4) (* ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68))))
 (let ((?x712 (* 9 (* ?x315 ?x315 ?x315 ?x312 ?x312 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x863 (+ ?x712 ?x445 ?x745 (* 4 (* ?x315 ?x315 ?x312 ?x69 ?x69)) ?x463 ?x467 ?x793 ?x797 ?x808 ?x502 ?x544 ?x507)))
 (let (($x709 (not (= ?x863 0))))
 (let (($x702 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x677 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x130 (= (+ m (* (- 6) n)) 6)))
 (let (($x718 (and $x130 (= ?x346 (- 4)) $x677 $x702 $x709)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x75 (- (* 9 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71) (* 4 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x78 (+ (- ?x75 (* 5 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 4 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x84 (+ (- ?x78 (* 9 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 18 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71) (* 9 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71) (* ?x69 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x89 (- (- ?x84 (* ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71)) (* 9 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x92 (+ (- ?x89 (* 18 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 5 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x96 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0))))))
 (rewrite (= $x96 $x718))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x565 (mp (mp @x98 (quant-intro (proof-bind ?x439) (= $x97 $x711)) $x711) (rewrite (= $x711 $x711)) $x711)))
 (let ((@x743 (mp (mp @x565 (quant-intro (proof-bind ?x563) (= $x711 $x570)) $x570) (quant-intro (proof-bind ?x387) (= $x570 $x732)) $x732)))
 (let ((@x470 (mp (mp~ @x743 (sk (~ $x732 $x737)) $x737) (rewrite (= $x737 $x624)) $x624)))
 (let ((@x457 (and-elim @x470 $x727)))
 (let ((@x465 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x727) $x669)) @x457 $x669)))
 (let (($x449 (>= ?x541 1)))
 (let ((@x429 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x727) $x449)) @x457 $x449)))
 (let (($x744 (<= ?x634 (- 6))))
 (let ((@x622 (and-elim @x470 $x456)))
 (let ((@x350 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x744)) @x622 $x744)))
 (let (($x435 (>= ?x634 (- 6))))
 (let ((@x850 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x456) $x435)) @x622 $x435)))
 (let (($x598 (<= ?x510 1)))
 (let ((@x562 (and-elim @x470 $x490)))
 (let ((@x621 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x490) $x598)) @x562 $x598)))
 (let (($x660 (>= ?x510 1)))
 (let ((@x540 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x490) $x660)) @x562 $x660)))
 (let (($x695 (<= ?x458 4)))
 (let ((@x774 (and-elim @x470 $x323)))
 (let ((@x628 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x695)) @x774 $x695)))
 (let (($x694 (>= ?x458 4)))
 (let ((@x610 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x323) $x694)) @x774 $x694)))
 (let (($x683 (not (<= ?x620 0))))
 (let (($x395 (>= ?x620 0)))
 (let ((@x667 ((_ th-lemma arith) (hypothesis (not $x395)) @x850 @x350 @x429 @x465 @x429 @x465 @x540 @x621 @x429 @x465 @x540 @x621 @x610 @x628 @x429 @x465 @x540 @x621 @x850 @x350 @x850 @x350 @x429 @x465 false)))
 (let ((@x333 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x714 $x683 (not $x395))) (and-elim @x470 $x371) (or $x683 (not $x395)))))
 ((_ th-lemma arith) (unit-resolution @x333 (lemma @x667 $x395) $x683) @x850 @x350 @x429 @x465 @x429 @x465 @x540 @x621 @x429 @x465 @x540 @x621 @x610 @x628 @x429 @x465 @x540 @x621 @x850 @x350 @x850 @x350 @x429 @x465 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        20
 :arith-assert-upper        35
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           13
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             280
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      18
 :arith-tableau-max-columns 65
 :arith-tableau-max-rows    9
 :conflicts                 2
 :decisions                 27
 :del-clause                16
 :final-checks              8
 :max-memory                3.87
 :memory                    3.31
 :mk-bool-var               47
 :mk-clause                 16
 :num-allocs                1642559
 :num-checks                1
 :propagations              10
 :rlimit-count              14760
 :time                      0.01
 :total-time                0.02)
