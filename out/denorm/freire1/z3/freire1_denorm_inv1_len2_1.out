unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x344 (* r!1 r!1)))
 (let ((?x75 (* (- 1) r!1)))
 (let ((?x239 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x268 (+ r00 ?x82 ?x98 ?x239 ?x75 ?x344)))
 (let (($x253 (<= ?x268 0)))
 (let (($x292 (= ?x268 0)))
 (let ((?x121 (* (- 1) (* x!0 x!0 x!0))))
 (let ((?x156 (* r!1 r!1 r!1 r!1)))
 (let ((?x144 (* r!1 r!1 r!1)))
 (let ((?x73 (+ 1 ?x144 ?x156 r!1 (* (- 1) (* x!0 x!0 x!0 r!1)) (* (- 3) (* x!0 r!1 r!1)) (* (- 3) (* x!0 r!1 r!1 r!1)) (* 3 (* x!0 x!0 r!1 r!1)) (* 3 (* x!0 x!0 r!1)) ?x121)))
 (let ((?x263 (* ?x73 ?x268)))
 (let (($x105 (= ?x263 0)))
 (let (($x106 (not $x105)))
 (let (($x244 (and $x292 $x106)))
 (let ((?x353 (+ 1 r!1 ?x121 (* (- 1) (* r!1 x!0 x!0 x!0)) ?x144 ?x156 (* (- 3) (* r!1 r!1 x!0)) (* (- 3) (* r!1 r!1 r!1 x!0)) (* 3 (* r!1 x!0 x!0)) (* 3 (* r!1 r!1 x!0 x!0)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 1) r00)))
 (let (($x59 (and (= (+ r!1 (* (- 2) x!0) ?x113 (* (- 1) ?x344) ?x35 ?x36) 0) (not (= (* ?x353 (+ ?x75 ?x239 r00 ?x344 ?x82 ?x98)) 0)))))
 (let (($x186 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x104 (+ ?x61 ?x32 r00 ?x30 ?x82 ?x98)))
 (let ((?x359 (+ 1 r (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r) (* r r r r) (* (- 3) (* r r x)) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (let ((?x112 (* (- 2) x)))
 (let (($x116 (= (+ r ?x112 ?x113 ?x114 ?x35 ?x36) 0)))
 (and $x116 (not (= (* ?x359 ?x104) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x341 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x150 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x167 (+ x ?x61)))
 (let ((?x237 (+ 1 r)))
 (let (($x241 (= (* (+ 1 r (* (- 1) (* ?x237 ?x167 ?x167 ?x167))) ?x150) 0)))
 (let (($x138 (not $x241)))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x138)))))))))))))))) :qid k!26))
 ))
 (let ((?x364 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x104 (+ ?x61 ?x32 r00 ?x30 ?x82 ?x98)))
 (let ((?x359 (+ 1 r (* (- 1) (* x x x)) (* (- 1) (* r x x x)) (* r r r) (* r r r r) (* (- 3) (* r r x)) (* (- 3) (* r r r x)) (* 3 (* r x x)) (* 3 (* r r x x)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (let ((?x112 (* (- 2) x)))
 (let (($x116 (= (+ r ?x112 ?x113 ?x114 ?x35 ?x36) 0)))
 (let (($x230 (and $x116 (not (= (* ?x359 ?x104) 0)))))
 (let ((?x150 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x158 (* (- 1) (* (+ 1 r) (+ x ?x61) (+ x ?x61) (+ x ?x61)))))
 (let (($x138 (not (= (* (+ 1 r ?x158) ?x150) 0))))
 (let (($x170 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x138)))
 (rewrite (= $x170 $x230)))))))))))))))))))))
 ))
 (let (($x248 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x150 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x167 (+ x ?x61)))
 (let ((?x237 (+ 1 r)))
 (let (($x241 (= (* (+ 1 r (* (- 1) (* ?x237 ?x167 ?x167 ?x167))) ?x150) 0)))
 (let (($x138 (not $x241)))
 (and (= (+ ?x61 r00 (* r r) ?x32 ?x82 ?x98) 0) $x138))))))))))) :qid k!26))
 ))
 (let ((?x347 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x150 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x167 (+ x ?x61)))
 (let ((?x237 (+ 1 r)))
 (let (($x241 (= (* (+ 1 r (* (- 1) (* ?x237 ?x167 ?x167 ?x167))) ?x150) 0)))
 (let (($x138 (not $x241)))
 (let ((?x35 (* 2 x00)))
 (let ((?x112 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x114 (* (- 1) ?x30)))
 (let ((?x113 (* (- 1) r00)))
 (let (($x170 (and (= (+ r ?x113 ?x114 ?x112 ?x35 ?x36) 0) $x138)))
 (let (($x240 (and (= (+ ?x61 r00 ?x30 ?x32 ?x82 ?x98) 0) $x138)))
 (rewrite (= $x240 $x170))))))))))))))))))))
 ))
 (let (($x56 (exists ((r Int) (x Int) )(! (let ((?x41 (+ r 1)))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35)))
 (let ((?x51 (* (- ?x47 ?x36) (- ?x41 (* ?x41 (- x r) (- x r) (- x r))))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= ?x51 0)))))))))) :qid k!26))
 ))
 (let ((?x99 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x98 (* (- 1) ?x36)))
 (let ((?x82 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x150 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x82 ?x98)))
 (let ((?x61 (* (- 1) r)))
 (let ((?x167 (+ x ?x61)))
 (let ((?x237 (+ 1 r)))
 (let (($x241 (= (* (+ 1 r (* (- 1) (* ?x237 ?x167 ?x167 ?x167))) ?x150) 0)))
 (let (($x138 (not $x241)))
 (let (($x240 (and (= (+ ?x61 r00 (* r r) ?x32 ?x82 ?x98) 0) $x138)))
 (let ((?x41 (+ r 1)))
 (let ((?x35 (* 2 x00)))
 (let ((?x47 (- (+ (* (- 1) ?x41) r00 (* ?x41 ?x41) (* 2 (- x r))) ?x35)))
 (let ((?x51 (* (- ?x47 ?x36) (- ?x41 (* ?x41 (- x r) (- x r) (- x r))))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x55 (and $x40 (or (not (= ?x51 0))))))
 (rewrite (= $x55 $x240))))))))))))))))))))
 ))
 (let ((@x57 (asserted $x56)))
 (let ((@x88 (mp (mp @x57 (quant-intro (proof-bind ?x99) (= $x56 $x248)) $x248) (rewrite (= $x248 $x248)) $x248)))
 (let ((@x303 (mp (mp @x88 (quant-intro (proof-bind ?x347) (= $x248 $x341)) $x341) (quant-intro (proof-bind ?x364) (= $x341 $x186)) $x186)))
 (let ((@x122 (mp (mp~ @x303 (sk (~ $x186 $x59)) $x59) (rewrite (= $x59 $x244)) $x244)))
 (let ((@x328 (and-elim @x122 $x292)))
 (let ((@x63 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x292) $x253)) @x328 $x253)))
 (let (($x74 (>= ?x268 0)))
 (let ((@x221 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x292) $x74)) @x328 $x74)))
 (let (($x291 (not (>= ?x263 0))))
 (let (($x71 (<= ?x263 0)))
 (let ((@x308 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x105 (not $x71) $x291)) (and-elim @x122 $x106) (or (not $x71) $x291))))
 (let ((@x127 (unit-resolution @x308 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x71)) @x221 @x63 false) $x71) $x291)))
 ((_ th-lemma arith farkas 1 1 1) @x127 @x221 @x63 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.47
 :memory                    3.07
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1047580
 :num-checks                1
 :propagations              4
 :rlimit-count              1411
 :time                      0.01
 :total-time                0.01)
