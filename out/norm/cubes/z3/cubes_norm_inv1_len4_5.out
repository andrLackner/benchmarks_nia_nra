unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x512 (* n!0 k!2)))
 (let ((?x815 (* (- 1) k!2)))
 (let ((?x1005 (+ (* 2 n!0) ?x815 ?x512 (* (- 3) c!3))))
 (let (($x898 (<= ?x1005 (- 1))))
 (let (($x640 (= ?x1005 (- 1))))
 (let ((?x942 (+ m!1 k!2)))
 (let ((?x649 (+ 6 m!1)))
 (let ((?x705 (+ 1 n!0)))
 (let ((?x990 (* 6 (* ?x705 ?x705 ?x705 ?x705 ?x942 ?x942 (+ k!2 c!3) (+ k!2 c!3)))))
 (let ((?x1288 (* (- 1) (* ?x705 ?x705 ?x705 ?x649 ?x942 ?x942 (+ k!2 c!3) (+ k!2 c!3)))))
 (let ((?x907 (+ k!2 c!3)))
 (let ((?x863 (* 72 (* m!1 m!1))))
 (let ((?x800 (* 6 (* m!1 m!1 m!1))))
 (let ((?x927 (* (- 6) (* k!2 k!2 k!2))))
 (let ((?x100 (* 216 k!2)))
 (let ((?x120 (* 216 m!1)))
 (let ((?x806 (+ (* 144 (* n!0 m!1 m!1)) (* 72 (* n!0 n!0 m!1 k!2)) (* ?x705 ?x705 ?x649 ?x942 ?x942 ?x907) (* (- 6) (* ?x705 ?x705 ?x649 ?x649 ?x649 ?x942 ?x907 ?x907 ?x907)) (* 6 (* ?x705 ?x705 ?x705 ?x942 ?x942 ?x907 ?x907)) (* 144 (* n!0 m!1 k!2)) (* (- 6) (* ?x705 ?x705 ?x705 ?x649 ?x649 ?x649 ?x942 ?x907 ?x907 ?x907)) ?x120 ?x100 (* 432 ?x512) (* 12 (* n!0 m!1 m!1 m!1)) (* (- 12) (* m!1 k!2 c!3)) (* (- 12) (* m!1 k!2 k!2)) (* (- 24) (* n!0 m!1 k!2 k!2)) (* 72 (* n!0 n!0 m!1 m!1)) ?x927 (* 216 (* n!0 n!0 m!1)) (* (- 6) (* k!2 k!2 c!3)) (* (- 6) (* n!0 n!0 m!1 m!1 c!3)) (* (- 12) (* n!0 n!0 m!1 k!2 k!2)) ?x800 ?x863 (* (- 24) (* n!0 m!1 k!2 c!3)) (* (- 6) (* n!0 n!0 k!2 k!2 c!3)) (* (- 6) (* n!0 n!0 k!2 k!2 k!2)) (* (- 6) (* m!1 m!1 c!3)) (* (- 12) (* n!0 k!2 k!2 k!2)) (* ?x705 ?x705 ?x649 ?x649 ?x649 ?x649 ?x942 ?x907 ?x907 ?x907) (* (- 12) (* n!0 m!1 m!1 c!3)) (* 72 (* m!1 k!2)) (* 216 (* n!0 n!0 k!2)) (* (- 12) (* n!0 k!2 k!2 c!3)) (* 432 (* n!0 m!1)) ?x1288 (* 6 (* ?x705 ?x705 ?x705 ?x649 ?x649 ?x942)) (* 6 (* n!0 n!0 m!1 m!1 m!1)) ?x990 (* (- 6) (* ?x705 ?x705 ?x705 ?x942 ?x942 ?x907)) (* (- 12) (* n!0 n!0 m!1 k!2 c!3)) (* (- 1) (* ?x705 ?x705 ?x649 ?x649 ?x649 ?x942)))))
 (let (($x639 (= ?x806 0)))
 (let (($x905 (not $x639)))
 (let ((?x826 (+ (* 3 n!0) ?x815 (* 3 (* n!0 n!0)))))
 (let (($x827 (= ?x826 (- 1))))
 (let ((?x934 (* k!2 k!2)))
 (let ((?x739 (+ (* 9 n!0) (* (- 5) k!2) (* (- 18) c!3) (* (- 9) (* n!0 c!3)) ?x934)))
 (let (($x738 (= ?x739 (- 4))))
 (let ((?x831 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x745 (= ?x831 (- 6))))
 (let (($x960 (and $x745 $x738 $x640 $x827 $x905)))
 (let ((?x658 (+ c!3 k!2)))
 (let ((?x650 (+ k!2 m!1)))
 (let ((?x764 (+ ?x100 ?x120 (* 432 (* k!2 n!0)) (* ?x705 ?x705 ?x649 ?x650 ?x650 ?x658) (* (- 12) (* k!2 k!2 k!2 n!0)) (* (- 12) (* c!3 k!2 k!2 n!0)) (* 216 (* k!2 n!0 n!0)) (* (- 6) (* c!3 m!1 m!1)) (* (- 12) (* k!2 k!2 m!1)) (* (- 12) (* c!3 k!2 m!1)) (* 12 (* m!1 m!1 m!1 n!0)) ?x927 (* (- 6) (* c!3 k!2 k!2)) (* (- 6) (* c!3 m!1 m!1 n!0 n!0)) (* (- 12) (* k!2 k!2 m!1 n!0 n!0)) (* (- 12) (* c!3 k!2 m!1 n!0 n!0)) (* (- 6) (* k!2 k!2 k!2 n!0 n!0)) (* (- 6) (* c!3 k!2 k!2 n!0 n!0)) (* (- 24) (* c!3 k!2 m!1 n!0)) (* (- 24) (* k!2 k!2 m!1 n!0)) (* (- 12) (* c!3 m!1 m!1 n!0)) (* ?x705 ?x705 ?x649 ?x649 ?x649 ?x649 ?x650 ?x658 ?x658 ?x658) (* 72 (* k!2 m!1 n!0 n!0)) ?x863 (* (- 6) (* ?x705 ?x705 ?x649 ?x649 ?x649 ?x650 ?x658 ?x658 ?x658)) ?x800 (* 6 (* ?x705 ?x705 ?x705 ?x650 ?x650 ?x658 ?x658)) (* 432 (* m!1 n!0)) (* (- 6) (* ?x705 ?x705 ?x705 ?x650 ?x650 ?x658)) (* 6 (* ?x705 ?x705 ?x705 ?x705 ?x650 ?x650 ?x658 ?x658)) (* (- 1) (* ?x705 ?x705 ?x705 ?x649 ?x650 ?x650 ?x658 ?x658)) (* 216 (* m!1 n!0 n!0)) (* 144 (* k!2 m!1 n!0)) (* (- 6) (* ?x705 ?x705 ?x705 ?x649 ?x649 ?x649 ?x650 ?x658 ?x658 ?x658)) (* 72 (* k!2 m!1)) (* (- 1) (* ?x705 ?x705 ?x649 ?x649 ?x649 ?x650)) (* 144 (* m!1 m!1 n!0)) (* 6 (* ?x705 ?x705 ?x705 ?x649 ?x649 ?x650)) (* 72 (* m!1 m!1 n!0 n!0)) (* 6 (* m!1 m!1 m!1 n!0 n!0)))))
 (let (($x468 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x956 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x934) (* 9 (* c!3 n!0)))))
 (let (($x199 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x956 4) $x468 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x764 0)))))
 (let (($x598 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x1311 (* 6 (* m m m n n))))
 (let ((?x69 (+ k m)))
 (let ((?x314 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x972 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x69)))
 (let ((?x973 (* 6 ?x972)))
 (let ((?x941 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69)))
 (let ((?x949 (* (- 1) ?x941)))
 (let ((?x68 (+ c k)))
 (let ((?x910 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x525 (* (- 6) ?x910)))
 (let ((?x890 (* ?x317 ?x317 ?x317 ?x314 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x896 (* (- 1) ?x890)))
 (let ((?x876 (* ?x317 ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x877 (* 6 ?x876)))
 (let ((?x839 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68)))
 (let ((?x859 (* (- 6) ?x839)))
 (let ((?x822 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x823 (* 6 ?x822)))
 (let ((?x790 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x791 (* (- 6) ?x790)))
 (let ((?x565 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x338 (* ?x317 ?x317 ?x314 ?x69 ?x69 ?x68)))
 (let ((?x603 (+ (* 216 k) (* 216 m) (* 432 (* k n)) ?x338 (* (- 12) (* k k k n)) (* (- 12) (* c k k n)) (* 216 (* k n n)) (* (- 6) (* c m m)) (* (- 12) (* k k m)) (* (- 12) (* c k m)) (* 12 (* m m m n)) (* (- 6) (* k k k)) (* (- 6) (* c k k)) (* (- 6) (* c m m n n)) (* (- 12) (* k k m n n)) (* (- 12) (* c k m n n)) (* (- 6) (* k k k n n)) (* (- 6) (* c k k n n)) (* (- 24) (* c k m n)) (* (- 24) (* k k m n)) (* (- 12) (* c m m n)) ?x565 (* 72 (* k m n n)) (* 72 (* m m)) ?x791 (* 6 (* m m m)) ?x823 (* 432 (* m n)) ?x859 ?x877 ?x896 (* 216 (* m n n)) (* 144 (* k m n)) ?x525 (* 72 (* k m)) ?x949 (* 144 (* m m n)) ?x973 (* 72 (* m m n n)) ?x1311)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x216 (= (+ ?x40 ?x44 ?x218 ?x219 (* 9 (* c n))) 4)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 $x216 $x268 $x306 (not (= ?x603 0)))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x922 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x314 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x972 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x69)))
 (let ((?x941 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69)))
 (let ((?x68 (+ c k)))
 (let ((?x910 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x890 (* ?x317 ?x317 ?x317 ?x314 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x469 (+ (* 6 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x317 ?x317 ?x69 ?x69 ?x68)) (* (- 6) (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68)) (* (- 6) (* ?x317 ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)) ?x890 (* 6 ?x910) (* (- 1) (* ?x317 ?x317 ?x314 ?x69 ?x69 ?x68)) ?x941 (* (- 6) (* ?x317 ?x317 ?x314 ?x314 ?x69)) (* (- 6) ?x972))))
 (let (($x779 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x485 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x485 $x779 (not (= ?x469 0)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x596 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x1311 (* 6 (* m m m n n))))
 (let ((?x69 (+ k m)))
 (let ((?x314 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x972 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x69)))
 (let ((?x973 (* 6 ?x972)))
 (let ((?x941 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69)))
 (let ((?x949 (* (- 1) ?x941)))
 (let ((?x68 (+ c k)))
 (let ((?x910 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x525 (* (- 6) ?x910)))
 (let ((?x890 (* ?x317 ?x317 ?x317 ?x314 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x896 (* (- 1) ?x890)))
 (let ((?x876 (* ?x317 ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x877 (* 6 ?x876)))
 (let ((?x839 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68)))
 (let ((?x859 (* (- 6) ?x839)))
 (let ((?x822 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x823 (* 6 ?x822)))
 (let ((?x790 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x791 (* (- 6) ?x790)))
 (let ((?x565 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x338 (* ?x317 ?x317 ?x314 ?x69 ?x69 ?x68)))
 (let ((?x603 (+ (* 216 k) (* 216 m) (* 432 (* k n)) ?x338 (* (- 12) (* k k k n)) (* (- 12) (* c k k n)) (* 216 (* k n n)) (* (- 6) (* c m m)) (* (- 12) (* k k m)) (* (- 12) (* c k m)) (* 12 (* m m m n)) (* (- 6) (* k k k)) (* (- 6) (* c k k)) (* (- 6) (* c m m n n)) (* (- 12) (* k k m n n)) (* (- 12) (* c k m n n)) (* (- 6) (* k k k n n)) (* (- 6) (* c k k n n)) (* (- 24) (* c k m n)) (* (- 24) (* k k m n)) (* (- 12) (* c m m n)) ?x565 (* 72 (* k m n n)) (* 72 (* m m)) ?x791 (* 6 (* m m m)) ?x823 (* 432 (* m n)) ?x859 ?x877 ?x896 (* 216 (* m n n)) (* 144 (* k m n)) ?x525 (* 72 (* k m)) ?x949 (* 144 (* m m n)) ?x973 (* 72 (* m m n n)) ?x1311)))
 (let (($x306 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x268 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x216 (= (+ ?x40 ?x44 ?x218 ?x219 (* 9 (* c n))) 4)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x504 (and $x132 $x216 $x268 $x306 (not (= ?x603 0)))))
 (let ((?x469 (+ (* 6 ?x790) (* 6 (* ?x317 ?x317 ?x69 ?x69 ?x68)) (* (- 6) ?x822) (* 6 ?x839) (* (- 6) ?x876) (* (- 1) ?x565) ?x890 (* 6 ?x910) (* (- 1) ?x338) ?x941 (* (- 6) (* ?x317 ?x317 ?x314 ?x314 ?x69)) (* (- 6) ?x972))))
 (let (($x779 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x485 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x465 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x485 $x779 (not (= ?x469 0)))))
 (rewrite (= $x465 $x504)))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x789 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ k m)))
 (let ((?x314 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x972 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x69)))
 (let ((?x973 (* 6 ?x972)))
 (let ((?x941 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69)))
 (let ((?x949 (* (- 1) ?x941)))
 (let ((?x68 (+ c k)))
 (let ((?x338 (* ?x317 ?x317 ?x314 ?x69 ?x69 ?x68)))
 (let ((?x910 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x525 (* (- 6) ?x910)))
 (let ((?x890 (* ?x317 ?x317 ?x317 ?x314 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x896 (* (- 1) ?x890)))
 (let ((?x565 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x876 (* ?x317 ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x877 (* 6 ?x876)))
 (let ((?x839 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68)))
 (let ((?x859 (* (- 6) ?x839)))
 (let ((?x822 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x823 (* 6 ?x822)))
 (let ((?x790 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x791 (* (- 6) ?x790)))
 (let ((?x981 (+ ?x791 (* (- 6) (* ?x317 ?x317 ?x69 ?x69 ?x68)) ?x823 ?x859 ?x877 ?x565 ?x896 ?x525 ?x338 ?x949 (* 6 (* ?x317 ?x317 ?x314 ?x314 ?x69)) ?x973)))
 (let (($x779 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x740 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x675 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (and $x132 (= ?x675 (- 4)) $x740 $x779 (not (= ?x981 0)))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x918 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x314 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x972 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x69)))
 (let ((?x941 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69)))
 (let ((?x68 (+ c k)))
 (let ((?x910 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x890 (* ?x317 ?x317 ?x317 ?x314 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x469 (+ (* 6 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)) (* 6 (* ?x317 ?x317 ?x69 ?x69 ?x68)) (* (- 6) (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68)) (* (- 6) (* ?x317 ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)) (* (- 1) (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)) ?x890 (* 6 ?x910) (* (- 1) (* ?x317 ?x317 ?x314 ?x69 ?x69 ?x68)) ?x941 (* (- 6) (* ?x317 ?x317 ?x314 ?x314 ?x69)) (* (- 6) ?x972))))
 (let (($x779 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x485 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x219 (* (- 1) ?x49)))
 (let ((?x218 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x465 (and $x132 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x218 ?x219) 4) $x485 $x779 (not (= ?x469 0)))))
 (let ((?x973 (* 6 ?x972)))
 (let ((?x949 (* (- 1) ?x941)))
 (let ((?x338 (* ?x317 ?x317 ?x314 ?x69 ?x69 ?x68)))
 (let ((?x525 (* (- 6) ?x910)))
 (let ((?x896 (* (- 1) ?x890)))
 (let ((?x565 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x876 (* ?x317 ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x877 (* 6 ?x876)))
 (let ((?x839 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68)))
 (let ((?x859 (* (- 6) ?x839)))
 (let ((?x822 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x823 (* 6 ?x822)))
 (let ((?x790 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x791 (* (- 6) ?x790)))
 (let ((?x981 (+ ?x791 (* (- 6) (* ?x317 ?x317 ?x69 ?x69 ?x68)) ?x823 ?x859 ?x877 ?x565 ?x896 ?x525 ?x338 ?x949 (* 6 (* ?x317 ?x317 ?x314 ?x314 ?x69)) ?x973)))
 (let (($x740 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x675 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x798 (and $x132 (= ?x675 (- 4)) $x740 $x779 (not (= ?x981 0)))))
 (rewrite (= $x798 $x465))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x69 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x74 (- (* (- 6) ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x69 ?x69 ?x71 ?x71))))
 (let ((?x78 (- (+ ?x74 (* 6 ?x68 ?x68 ?x69 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x69 ?x69 ?x71 ?x71 ?x71))))
 (let ((?x81 (+ ?x78 (* 6 ?x68 ?x68 ?x69 ?x69 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x85 (- (- ?x81 (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x89 (- (+ ?x85 (* ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x92 (+ ?x89 (* 6 ?x69 ?x70 ?x70 ?x71 ?x71) (* 6 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x793 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ k m)))
 (let ((?x314 (+ 6 m)))
 (let ((?x317 (+ 1 n)))
 (let ((?x972 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x69)))
 (let ((?x973 (* 6 ?x972)))
 (let ((?x941 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69)))
 (let ((?x949 (* (- 1) ?x941)))
 (let ((?x68 (+ c k)))
 (let ((?x338 (* ?x317 ?x317 ?x314 ?x69 ?x69 ?x68)))
 (let ((?x910 (* ?x317 ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x525 (* (- 6) ?x910)))
 (let ((?x890 (* ?x317 ?x317 ?x317 ?x314 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x896 (* (- 1) ?x890)))
 (let ((?x565 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x876 (* ?x317 ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x877 (* 6 ?x876)))
 (let ((?x839 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68)))
 (let ((?x859 (* (- 6) ?x839)))
 (let ((?x822 (* ?x317 ?x317 ?x317 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x823 (* 6 ?x822)))
 (let ((?x790 (* ?x317 ?x317 ?x314 ?x314 ?x314 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x791 (* (- 6) ?x790)))
 (let ((?x981 (+ ?x791 (* (- 6) (* ?x317 ?x317 ?x69 ?x69 ?x68)) ?x823 ?x859 ?x877 ?x565 ?x896 ?x525 ?x338 ?x949 (* 6 (* ?x317 ?x317 ?x314 ?x314 ?x69)) ?x973)))
 (let (($x779 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x740 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x675 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x132 (= (+ m (* (- 6) n)) 6)))
 (let (($x798 (and $x132 (= ?x675 (- 4)) $x740 $x779 (not (= ?x981 0)))))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (- (* (- 6) ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) (* 6 ?x68 ?x69 ?x69 ?x71 ?x71))))
 (let ((?x78 (- (+ ?x74 (* 6 ?x68 ?x68 ?x69 ?x69 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x69 ?x69 ?x71 ?x71 ?x71))))
 (let ((?x81 (+ ?x78 (* 6 ?x68 ?x68 ?x69 ?x69 ?x71 ?x71 ?x71 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x85 (- (- ?x81 (* ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71)) (* 6 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x89 (- (+ ?x85 (* ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x92 (+ ?x89 (* 6 ?x69 ?x70 ?x70 ?x71 ?x71) (* 6 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x96 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x92 0))))))
 (rewrite (= $x96 $x798)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x897 (mp (mp @x98 (quant-intro (proof-bind ?x793) (= $x97 $x789)) $x789) (rewrite (= $x789 $x789)) $x789)))
 (let ((@x821 (mp (mp @x897 (quant-intro (proof-bind ?x918) (= $x789 $x922)) $x922) (quant-intro (proof-bind ?x596) (= $x922 $x598)) $x598)))
 (let ((@x940 (mp (mp~ @x821 (sk (~ $x598 $x199)) $x199) (rewrite (= $x199 $x960)) $x960)))
 (let ((@x503 (and-elim @x940 $x640)))
 (let ((@x484 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x640) $x898)) @x503 $x898)))
 (let (($x837 (>= ?x1005 (- 1))))
 (let ((@x708 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x640) $x837)) @x503 $x837)))
 (let (($x698 (<= ?x831 (- 6))))
 (let ((@x953 (and-elim @x940 $x745)))
 (let ((@x513 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x745) $x698)) @x953 $x698)))
 (let (($x917 (>= ?x831 (- 6))))
 (let ((@x665 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x745) $x917)) @x953 $x917)))
 (let (($x617 (<= ?x826 (- 1))))
 (let ((@x1341 (and-elim @x940 $x827)))
 (let ((@x802 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x827) $x617)) @x1341 $x617)))
 (let (($x786 (>= ?x826 (- 1))))
 (let ((@x663 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x827) $x786)) @x1341 $x786)))
 (let (($x846 (<= ?x739 (- 4))))
 (let ((@x506 (and-elim @x940 $x738)))
 (let ((@x1106 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x738) $x846)) @x506 $x846)))
 (let (($x849 (>= ?x739 (- 4))))
 (let ((@x780 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x738) $x849)) @x506 $x849)))
 (let (($x787 (not (<= ?x806 0))))
 (let (($x967 (>= ?x806 0)))
 (let ((@x116 ((_ th-lemma arith) (hypothesis (not $x967)) @x665 @x513 @x663 @x802 @x663 @x802 @x665 @x513 @x665 @x513 @x663 @x802 @x780 @x1106 @x663 @x802 @x708 @x484 @x663 @x802 @x663 @x802 @x665 @x513 @x708 @x484 false)))
 (let ((@x725 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x639 $x787 (not $x967))) (and-elim @x940 $x905) (or $x787 (not $x967)))))
 ((_ th-lemma arith) (unit-resolution @x725 (lemma @x116 $x967) $x787) @x665 @x513 @x663 @x802 @x663 @x802 @x665 @x513 @x665 @x513 @x663 @x802 @x780 @x1106 @x663 @x802 @x708 @x484 @x663 @x802 @x663 @x802 @x665 @x513 @x708 @x484 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             479
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      9
 :arith-tableau-max-columns 73
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.78
 :memory                    3.29
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1439465
 :num-checks                1
 :propagations              11
 :rlimit-count              11843
 :time                      0.01
 :total-time                0.02)
