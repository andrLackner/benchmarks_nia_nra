unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x212 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x166 (>= ?x212 0)))
 (let (($x213 (= ?x212 0)))
 (let ((?x69 (* 3 (* y!0 y!0))))
 (let ((?x92 (* (- 2) x!1)))
 (let ((?x97 (* x!1 x!1)))
 (let ((?x63 (* 2 y!0)))
 (let ((?x58 (* y!0 y!0 y!0)))
 (let ((?x165 (+ ?x58 ?x63 ?x97 ?x92 (* (- 2) (* y!0 y!0 y!0 x!1)) (* (- 6) (* y!0 x!1)) (* (- 6) (* y!0 y!0 x!1)) (* 3 (* y!0 y!0 x!1 x!1)) (* y!0 y!0 y!0 x!1 x!1) (* 3 (* y!0 x!1 x!1)) ?x69)))
 (let ((?x167 (* ?x165 (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x135 (= ?x167 0)))
 (let (($x228 (not $x135)))
 (let (($x216 (and $x213 $x228)))
 (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x183 (+ x!1 y!0 ?x49 ?x56)))
 (let ((?x55 (+ ?x92 ?x63 ?x69 ?x58 (* (- 2) (* x!1 y!0 y!0 y!0)) (* x!1 x!1 y!0 y!0 y!0) ?x97 (* (- 6) (* x!1 y!0)) (* 3 (* x!1 x!1 y!0)) (* (- 6) (* x!1 y!0 y!0)) (* 3 (* x!1 x!1 y!0 y!0)))))
 (let (($x194 (and (= ?x183 0) (not (= (* ?x55 ?x183) 0)))))
 (let (($x137 (exists ((x Int) (y Int) )(! (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x272 (* 2 y)))
 (let ((?x99 (+ (* (- 2) x) ?x272 ?x238 ?x164 ?x242 ?x170 ?x181 (* (- 6) (* x y)) ?x237 (* (- 6) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (and $x75 (not (= (* ?x99 ?x70) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x279 (exists ((x Int) (y Int) )(! (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x272 (* 2 y)))
 (let ((?x273 (+ (* (- 1) x) ?x272 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x238 (* (- 1) (* x 1 y y)) ?x164 ?x242 ?x170 ?x181 (* (- 3) (* x y)) ?x237 (* (- 3) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (and $x75 (not (= (* ?x273 ?x70) 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x136 (lambda ((x Int) (y Int) )(let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x272 (* 2 y)))
 (let ((?x99 (+ (* (- 2) x) ?x272 ?x238 ?x164 ?x242 ?x170 ?x181 (* (- 6) (* x y)) ?x237 (* (- 6) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (let (($x206 (and $x75 (not (= (* ?x99 ?x70) 0)))))
 (let ((?x273 (+ (* (- 1) x) ?x272 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x238 (* (- 1) (* x 1 y y)) ?x164 ?x242 ?x170 ?x181 (* (- 3) (* x y)) ?x237 (* (- 3) (* x y y)) ?x240)))
 (let (($x110 (and $x75 (not (= (* ?x273 ?x70) 0)))))
 (rewrite (= $x110 $x206)))))))))))))))))))
 ))
 (let (($x67 (exists ((x Int) (y Int) )(! (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x60 (+ x ?x49 ?x56 y)))
 (let ((?x191 (+ 1 y)))
 (let ((?x51 (+ (- 1) x)))
 (let (($x217 (= (* (+ (- 1) (* ?x51 ?x51 ?x191 ?x191 ?x191) (* (- 1) y)) ?x60) 0)))
 (and (= ?x60 0) (not $x217)))))))) :qid k!26))
 ))
 (let ((?x245 (lambda ((x Int) (y Int) )(let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x272 (* 2 y)))
 (let ((?x273 (+ (* (- 1) x) ?x272 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x238 (* (- 1) (* x 1 y y)) ?x164 ?x242 ?x170 ?x181 (* (- 3) (* x y)) ?x237 (* (- 3) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (let (($x110 (and $x75 (not (= (* ?x273 ?x70) 0)))))
 (let ((?x60 (+ x ?x49 ?x56 y)))
 (let ((?x191 (+ 1 y)))
 (let ((?x51 (+ (- 1) x)))
 (let (($x217 (= (* (+ (- 1) (* ?x51 ?x51 ?x191 ?x191 ?x191) (* (- 1) y)) ?x60) 0)))
 (let (($x266 (and (= ?x60 0) (not $x217))))
 (rewrite (= $x266 $x110))))))))))))))))))))))
 ))
 (let (($x46 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x41 (* (+ (- (- (- x 1) y00) x00) y 1) (- (* (- x 1) (- x 1) ?x38 ?x38 ?x38) ?x38))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x41 0)))))) :qid k!26))
 ))
 (let ((?x72 (lambda ((x Int) (y Int) )(let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x60 (+ x ?x49 ?x56 y)))
 (let ((?x191 (+ 1 y)))
 (let ((?x51 (+ (- 1) x)))
 (let (($x217 (= (* (+ (- 1) (* ?x51 ?x51 ?x191 ?x191 ?x191) (* (- 1) y)) ?x60) 0)))
 (let (($x266 (and (= ?x60 0) (not $x217))))
 (let ((?x38 (+ y 1)))
 (let ((?x41 (* (+ (- (- (- x 1) y00) x00) y 1) (- (* (- x 1) (- x 1) ?x38 ?x38 ?x38) ?x38))))
 (let (($x45 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x41 0))))))
 (rewrite (= $x45 $x266)))))))))))))
 ))
 (let ((@x47 (asserted $x46)))
 (let ((@x121 (mp (mp @x47 (quant-intro (proof-bind ?x72) (= $x46 $x67)) $x67) (rewrite (= $x67 $x67)) $x67)))
 (let ((@x64 (mp (mp @x121 (quant-intro (proof-bind ?x245) (= $x67 $x279)) $x279) (quant-intro (proof-bind ?x136) (= $x279 $x137)) $x137)))
 (let ((@x277 (mp (mp~ @x64 (sk (~ $x137 $x194)) $x194) (rewrite (= $x194 $x216)) $x216)))
 (let ((@x145 (and-elim @x277 $x213)))
 (let ((@x223 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x213) $x166)) @x145 $x166)))
 (let (($x226 (<= ?x212 0)))
 (let ((@x214 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x213) $x226)) @x145 $x226)))
 (let (($x243 (not (>= ?x167 0))))
 (let (($x263 (<= ?x167 0)))
 (let ((@x227 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x135 (not $x263) $x243)) (and-elim @x277 $x228) (or (not $x263) $x243))))
 (let ((@x229 (unit-resolution @x227 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x263)) @x214 @x223 false) $x263) $x243)))
 ((_ th-lemma arith farkas 1 1 1) @x229 @x214 @x223 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             54
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 22
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.48
 :memory                    3.09
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1051090
 :num-checks                1
 :propagations              4
 :rlimit-count              1596
 :time                      0.01
 :total-time                0.01)
