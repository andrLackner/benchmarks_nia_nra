unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x652 (+ c!3 k!2)))
 (let ((?x131 (+ k!2 m!1)))
 (let ((?x506 (+ 6 m!1)))
 (let ((?x423 (* (- 1) (* ?x506 ?x131 ?x131 ?x131 ?x652 ?x652 ?x652))))
 (let ((?x505 (+ 1 n!0)))
 (let ((?x625 (* ?x505 ?x505 ?x506 ?x131 ?x131 ?x131 ?x652 ?x652 ?x652)))
 (let ((?x606 (* k!2 n!0)))
 (let ((?x382 (* 216 ?x606)))
 (let ((?x593 (* c!3 n!0)))
 (let ((?x615 (* 216 ?x593)))
 (let ((?x529 (* 19 (* k!2 m!1 m!1))))
 (let ((?x528 (* m!1 m!1 m!1)))
 (let ((?x588 (* 18 (* c!3 m!1 m!1))))
 (let ((?x602 (* 36 m!1)))
 (let ((?x269 (* c!3 m!1 m!1 m!1)))
 (let ((?x159 (* m!1 m!1)))
 (let ((?x469 (* 12 ?x159)))
 (let ((?x550 (* 252 k!2)))
 (let ((?x551 (* 216 c!3)))
 (let ((?x132 (* k!2 m!1 m!1 m!1)))
 (let ((?x620 (+ ?x132 ?x551 ?x550 ?x469 (* 120 (* k!2 m!1)) ?x269 (* c!3 n!0 m!1 m!1 m!1) ?x602 (* 18 (* c!3 n!0 m!1 m!1)) (* k!2 n!0 m!1 m!1 m!1) ?x588 (* 108 (* c!3 m!1)) ?x528 ?x529 (* 108 (* k!2 n!0 m!1)) (* 18 (* k!2 n!0 m!1 m!1)) ?x615 (* 108 (* c!3 n!0 m!1)) ?x382 ?x625 ?x423)))
 (let (($x1324 (<= ?x620 0)))
 (let ((?x560 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x473 (<= ?x560 1)))
 (let (($x557 (= ?x560 1)))
 (let ((?x590 (* (- 9) ?x606)))
 (let ((?x581 (* (- 9) ?x593)))
 (let ((?x533 (* (- 5) m!1)))
 (let ((?x515 (* 9 n!0)))
 (let ((?x173 (* k!2 m!1)))
 (let ((?x286 (* 2 ?x173)))
 (let ((?x596 (* (- 32) k!2)))
 (let ((?x498 (* (- 27) c!3)))
 (let ((?x133 (* k!2 k!2)))
 (let ((?x649 (* ?x620 (+ 13 ?x133 ?x498 ?x596 ?x159 ?x286 ?x515 ?x533 ?x581 ?x590))))
 (let (($x358 (= ?x649 0)))
 (let (($x392 (not $x358)))
 (let ((?x496 (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x606))))
 (let (($x351 (= ?x496 1)))
 (let ((?x390 (+ ?x133 (* (- 18) c!3) (* (- 5) k!2) ?x515 ?x581)))
 (let (($x387 (= ?x390 (- 4))))
 (let ((?x324 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x332 (= ?x324 (- 6))))
 (let (($x366 (and $x332 $x387 $x351 $x557 $x392)))
 (let ((?x495 (+ ?x551 ?x550 ?x602 ?x382 ?x615 ?x625 ?x423 (* 6 (* m!1 6 c!3)) (* 84 ?x173) ?x469 (* 18 (* k!2 m!1 m!1 n!0)) (* 18 (* c!3 m!1 m!1 n!0)) (* 6 (* m!1 6 k!2)) (* 108 (* k!2 m!1 n!0)) (* 108 (* c!3 m!1 n!0)) ?x132 ?x269 ?x588 (* 72 (* c!3 m!1)) (* k!2 m!1 m!1 m!1 n!0) (* c!3 m!1 m!1 m!1 n!0) ?x528 ?x529)))
 (let (($x359 (= (* ?x495 (+ 13 ?x498 ?x596 ?x533 ?x515 ?x133 ?x590 ?x581 ?x286 ?x159)) 0)))
 (let ((?x349 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x133) (* 9 ?x593))))
 (let (($x517 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x349 4) $x351 $x557 (not $x359))))
 (let (($x295 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x764 (* 19 (* k m m))))
 (let ((?x647 (* m m m)))
 (let ((?x580 (* c m m m n)))
 (let ((?x577 (* k m m m n)))
 (let ((?x666 (* 18 (* c m m))))
 (let ((?x536 (* c m m m)))
 (let ((?x531 (* k m m m)))
 (let ((?x668 (* 108 (* c m n))))
 (let ((?x669 (* 108 (* k m n))))
 (let ((?x670 (* 18 (* c m m n))))
 (let ((?x671 (* 18 (* k m m n))))
 (let ((?x619 (* 12 ?x461)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x489 (+ 6 m)))
 (let ((?x290 (* (- 1) (* ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x342 (+ 1 n)))
 (let ((?x235 (* ?x342 ?x342 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x147 (* c n)))
 (let ((?x530 (* 216 ?x147)))
 (let ((?x55 (* k n)))
 (let ((?x525 (* 216 ?x55)))
 (let ((?x637 (* 36 m)))
 (let ((?x768 (* 252 k)))
 (let ((?x572 (* 216 c)))
 (let ((?x107 (+ ?x572 ?x768 ?x637 ?x525 ?x530 ?x235 ?x290 (* 6 (* m 6 c)) (* 84 (* k m)) ?x619 ?x671 ?x670 (* 6 (* m 6 k)) ?x669 ?x668 ?x531 ?x536 ?x666 (* 72 (* c m)) ?x577 ?x580 ?x647 ?x764)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 ?x147)) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= (* ?x107 ?x482) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x583 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x653 (* (- 18) c)))
 (let ((?x277 (+ 13 ?x653 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x235 (* ?x342 ?x342 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x290 (* (- 1) (* ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x237 (* (+ ?x290 (* ?x489 ?x489 ?x72) (* ?x342 ?x489 ?x489 ?x489 ?x68) ?x235) ?x277)))
 (let (($x507 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x598 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x407 (= (+ ?x653 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x407 $x598 $x507 (not (= ?x237 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x175 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x461 (* m m)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x482 (+ 13 (* (- 27) c) (* (- 32) k) ?x427 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) ?x461)))
 (let ((?x764 (* 19 (* k m m))))
 (let ((?x647 (* m m m)))
 (let ((?x580 (* c m m m n)))
 (let ((?x577 (* k m m m n)))
 (let ((?x666 (* 18 (* c m m))))
 (let ((?x536 (* c m m m)))
 (let ((?x531 (* k m m m)))
 (let ((?x668 (* 108 (* c m n))))
 (let ((?x669 (* 108 (* k m n))))
 (let ((?x670 (* 18 (* c m m n))))
 (let ((?x671 (* 18 (* k m m n))))
 (let ((?x619 (* 12 ?x461)))
 (let ((?x68 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x489 (+ 6 m)))
 (let ((?x290 (* (- 1) (* ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x342 (+ 1 n)))
 (let ((?x235 (* ?x342 ?x342 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x147 (* c n)))
 (let ((?x530 (* 216 ?x147)))
 (let ((?x55 (* k n)))
 (let ((?x525 (* 216 ?x55)))
 (let ((?x637 (* 36 m)))
 (let ((?x768 (* 252 k)))
 (let ((?x572 (* 216 c)))
 (let ((?x107 (+ ?x572 ?x768 ?x637 ?x525 ?x530 ?x235 ?x290 (* 6 (* m 6 c)) (* 84 (* k m)) ?x619 ?x671 ?x670 (* 6 (* m 6 k)) ?x669 ?x668 ?x531 ?x536 ?x666 (* 72 (* c m)) ?x577 ?x580 ?x647 ?x764)))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 ?x147)) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x205 (and $x125 $x209 $x261 $x299 (not (= (* ?x107 ?x482) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x653 (* (- 18) c)))
 (let ((?x277 (+ 13 ?x653 (* (- 23) k) (* (- 9) (* ?x342 ?x68)) ?x427 ?x48 ?x78)))
 (let ((?x237 (* (+ ?x290 (* ?x489 ?x489 ?x72) (* ?x342 ?x489 ?x489 ?x489 ?x68) ?x235) ?x277)))
 (let (($x507 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x598 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x407 (= (+ ?x653 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x582 (and $x125 $x407 $x598 $x507 (not (= ?x237 0)))))
 (rewrite (= $x582 $x205)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x86 (+ (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81) (* ?x72 ?x81 ?x81) (* ?x68 ?x81 ?x81 ?x81 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x70 ?x70))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x86) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x499 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x427 (* (- 5) m)))
 (let ((?x653 (* (- 18) c)))
 (let ((?x277 (+ 13 ?x653 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x427 ?x48 ?x78)))
 (let ((?x68 (+ c k)))
 (let ((?x489 (+ 6 m)))
 (let ((?x342 (+ 1 n)))
 (let ((?x235 (* ?x342 ?x342 ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x290 (* (- 1) (* ?x489 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68))))
 (let ((?x237 (* (+ ?x290 (* ?x489 ?x489 ?x72) (* ?x342 ?x489 ?x489 ?x489 ?x68) ?x235) ?x277)))
 (let (($x507 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x598 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x407 (= (+ ?x653 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x582 (and $x125 $x407 $x598 $x507 (not (= ?x237 0)))))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x86 (+ (* (- 1) ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81) (* ?x72 ?x81 ?x81) (* ?x68 ?x81 ?x81 ?x81 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x81 ?x70 ?x70))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x86) 0))))))
 (rewrite (= $x91 $x582)))))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x308 (mp (mp @x93 (quant-intro (proof-bind ?x499) (= $x92 $x583)) $x583) (rewrite (= $x583 $x583)) $x583)))
 (let ((@x344 (mp~ (mp @x308 (quant-intro (proof-bind ?x175) (= $x583 $x295)) $x295) (sk (~ $x295 $x517)) $x517)))
 (let ((@x434 (mp @x344 (rewrite (= $x517 $x366)) $x366)))
 (let ((@x441 (and-elim @x434 $x557)))
 (let ((@x563 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x473)) @x441 $x473)))
 (let (($x600 (>= ?x560 1)))
 (let ((@x491 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x557) $x600)) @x441 $x600)))
 (let (($x329 (<= ?x324 (- 6))))
 (let ((@x315 (and-elim @x434 $x332)))
 (let ((@x521 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x329)) @x315 $x329)))
 (let (($x321 (>= ?x324 (- 6))))
 (let ((@x228 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x332) $x321)) @x315 $x321)))
 (let (($x383 (<= ?x390 (- 4))))
 (let ((@x568 (and-elim @x434 $x387)))
 (let ((@x605 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x383)) @x568 $x383)))
 (let (($x384 (>= ?x390 (- 4))))
 (let ((@x163 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x387) $x384)) @x568 $x384)))
 (let (($x534 (<= ?x496 1)))
 (let ((@x523 (and-elim @x434 $x351)))
 (let ((@x426 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x534)) @x523 $x534)))
 (let (($x503 (>= ?x496 1)))
 (let ((@x597 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x351) $x503)) @x523 $x503)))
 (let ((@x2384 (hypothesis (not $x1324))))
 (let (($x2586 (not (<= ?x649 0))))
 (let (($x673 (>= ?x649 0)))
 (let (($x307 (not $x673)))
 (let ((@x222 (hypothesis $x307)))
 (let ((@x2476 ((_ th-lemma arith) @x222 @x2384 @x597 @x426 @x597 @x426 @x228 @x521 @x597 @x426 @x597 @x426 @x228 @x521 @x491 @x563 @x597 @x426 @x163 @x605 @x228 @x521 false)))
 (let (($x1346 (>= ?x620 0)))
 (let ((@x2343 (hypothesis (not $x1346))))
 (let ((@x2490 ((_ th-lemma arith) @x222 @x2343 @x491 @x563 @x491 @x563 @x228 @x521 @x491 @x563 @x228 @x521 @x491 @x563 @x228 @x521 @x491 @x563 @x491 @x563 @x228 @x521 @x597 @x426 @x597 @x426 @x491 @x563 @x163 @x605 @x228 @x521 false)))
 (let ((@x2359 ((_ th-lemma arith farkas 1 1 1) @x222 (unit-resolution (lemma @x2490 (or $x1346 $x673)) @x222 $x1346) (unit-resolution (lemma @x2476 (or $x1324 $x673)) @x222 $x1324) false)))
 (let ((@x2538 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x358 $x2586 $x307)) (and-elim @x434 $x392) (or $x2586 $x307))))
 (let ((@x2543 (unit-resolution @x2538 (lemma @x2359 $x673) $x2586)))
 (let ((@x2528 ((_ th-lemma arith) @x2543 @x2384 @x597 @x426 @x597 @x426 @x491 @x563 @x597 @x426 @x228 @x521 @x597 @x426 @x597 @x426 @x163 @x605 @x228 @x521 @x228 @x521 @x491 @x563 false)))
 (let ((@x2529 ((_ th-lemma arith) @x2543 @x2343 @x491 @x563 @x597 @x426 @x491 @x563 @x597 @x426 @x597 @x426 @x491 @x563 @x597 @x426 @x597 @x426 @x491 @x563 @x228 @x521 @x491 @x563 @x228 @x521 @x491 @x563 @x597 @x426 @x163 @x605 @x228 @x521 false)))
 ((_ th-lemma arith farkas 1 1 1) @x2543 (lemma @x2529 $x1346) (lemma @x2528 $x1324) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 100
 :arith-assert-diseq        42
 :arith-assert-lower        832
 :arith-assert-upper        967
 :arith-bound-prop          12
 :arith-branch-var          30
 :arith-conflicts           109
 :arith-eq-adapter          24
 :arith-fixed-eqs           296
 :arith-gcd-tests           470
 :arith-gomory-cuts         27
 :arith-grobner             105
 :arith-ineq-splits         30
 :arith-max-min             8772
 :arith-nonlinear-bounds    322
 :arith-nonlinear-horner    1503
 :arith-num-rows            32
 :arith-offset-eqs          2
 :arith-patches             65
 :arith-patches_succ        6
 :arith-pivots              3097
 :arith-pseudo-nonlinear    364
 :arith-row-summations      30473
 :arith-tableau-max-columns 95
 :arith-tableau-max-rows    32
 :conflicts                 110
 :decisions                 573
 :del-clause                148
 :final-checks              288
 :max-memory                22.57
 :memory                    19.34
 :minimized-lits            5
 :mk-bool-var               460
 :mk-clause                 529
 :num-allocs                13351364834.00
 :num-checks                1
 :propagations              1034
 :restarts                  1
 :rlimit-count              9093894
 :time                      11.18
 :total-time                11.19)
