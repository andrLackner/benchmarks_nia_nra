unsat
((set-logic NIA)
(proof
(let (($x53 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x43 ?x44 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x47 (- ?x45 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (* ?x42 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (and $x33 $x41 $x51))))))))))))))) :qid k!29))
 ))
 (let (($x378 (= $x53 false)))
 (let (($x371 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((@x377 (elim-unused (= $x371 false))))
 (let (($x374 (= $x53 $x371)))
 (let ((?x431 (lambda ((q Int) (r Int) (y Int) )(let ((?x44 (- r y00)))
 (let ((?x43 (+ q 1)))
 (let ((?x46 (* ?x43 ?x43 ?x43 ?x44 y00 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x45 (* ?x28 ?x43 ?x43 ?x43 ?x44 ?x44 ?x44 y00 y00)))
 (let ((?x47 (- ?x45 ?x46)))
 (let ((?x30 (* ?x28 y00)))
 (let ((?x42 (+ ?x30 y00)))
 (let ((?x48 (* ?x42 ?x47)))
 (let (($x49 (= ?x48 0)))
 (let (($x50 (not $x49)))
 (let (($x51 (or $x50)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ ?x30 y) 0)))
 (let (($x52 (and $x33 $x41 $x51)))
 (let (($x369 (= $x52 false)))
 (let (($x408 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x82 (= (+ (* (- 1) y00) y) 0)))
 (let (($x425 (and $x82 $x408 false)))
 (let (($x362 (= $x51 false)))
 (let ((@x361 (rewrite (= (or false) false))))
 (let (($x357 (or false)))
 (let (($x358 (= $x51 $x357)))
 (let (($x355 (= $x50 false)))
 (let ((@x354 (rewrite (= (not true) false))))
 (let (($x350 (not true)))
 (let (($x351 (= $x50 $x350)))
 (let (($x348 (= $x49 true)))
 (let ((@x347 (rewrite (= (= 0 0) true))))
 (let (($x343 (= 0 0)))
 (let (($x344 (= $x49 $x343)))
 (let ((?x58 (* (- 1) y00)))
 (let ((?x80 (+ r ?x58)))
 (let ((?x77 (+ 1 q)))
 (let ((?x389 (* y00 y00 y00 ?x77 ?x77 ?x77 ?x80)))
 (let ((?x381 (* (- 1) (* y00 y00 ?x77 ?x77 ?x77 ?x80 ?x80 ?x80))))
 (let ((?x405 (+ ?x381 (* (- 1) ?x389))))
 (let ((?x413 (* 0 ?x405)))
 (let ((@x85 (rewrite (= ?x44 ?x80))))
 (let ((@x79 (rewrite (= ?x43 ?x77))))
 (let ((@x228 (monotonicity @x79 @x79 @x79 @x85 (= ?x46 (* ?x77 ?x77 ?x77 ?x80 y00 y00 y00)))))
 (let ((@x396 (trans @x228 (rewrite (= (* ?x77 ?x77 ?x77 ?x80 y00 y00 y00) ?x389)) (= ?x46 ?x389))))
 (let ((@x384 (rewrite (= (* (- 1) ?x77 ?x77 ?x77 ?x80 ?x80 ?x80 y00 y00) ?x381))))
 (let ((@x88 (monotonicity (rewrite (= ?x28 (- 1))) @x79 @x79 @x79 @x85 @x85 @x85 (= ?x45 (* (- 1) ?x77 ?x77 ?x77 ?x80 ?x80 ?x80 y00 y00)))))
 (let ((@x402 (monotonicity (trans @x88 @x384 (= ?x45 ?x381)) @x396 (= ?x47 (- ?x381 ?x389)))))
 (let ((@x74 (trans (monotonicity (rewrite (= ?x30 ?x58)) (= ?x42 (+ ?x58 y00))) (rewrite (= (+ ?x58 y00) 0)) (= ?x42 0))))
 (let ((@x415 (monotonicity @x74 (trans @x402 (rewrite (= (- ?x381 ?x389) ?x405)) (= ?x47 ?x405)) (= ?x48 ?x413))))
 (let ((@x420 (trans (monotonicity (trans @x415 (rewrite (= ?x413 0)) $x49) $x344) @x347 $x348)))
 (let ((@x424 (trans (monotonicity (trans (monotonicity @x420 $x351) @x354 $x355) $x358) @x361 $x362)))
 (let ((@x427 (monotonicity (rewrite (= $x33 $x82)) (rewrite (= $x41 $x408)) @x424 (= $x52 $x425))))
 (trans @x427 (rewrite (= $x425 false)) $x369))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (mp @x54 (trans (quant-intro (proof-bind ?x431) $x374) @x377 $x378) false))))))))))

(:max-memory   3.39
 :memory       3.08
 :mk-bool-var  5
 :num-allocs   922812
 :rlimit-count 333
 :time         0.01
 :total-time   0.01)
