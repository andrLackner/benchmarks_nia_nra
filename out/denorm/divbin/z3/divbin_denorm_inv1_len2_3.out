unsat
((set-logic NIA)
(declare-fun b!2 () Int)
(declare-fun x!0 () Int)
(declare-fun r!1 () Int)
(proof
(let ((?x199 (* x!0 b!2)))
 (let ((?x293 (to_real ?x199)))
 (let ((?x102 (+ ?x293 (* (- 1.0) (* (to_real x!0) (to_real b!2))))))
 (let (($x105 (>= ?x102 0.0)))
 (let (($x103 (= ?x102 0.0)))
 (let ((@x107 (lemma (unit-resolution ((_ th-lemma arith) $x103) (hypothesis (not $x103)) false) $x103)))
 (let ((@x135 ((_ th-lemma arith triangle-eq) (or (not $x103) $x105))))
 (let (($x104 (<= ?x102 0.0)))
 (let ((@x120 ((_ th-lemma arith triangle-eq) (or (not $x103) $x104))))
 (let ((?x433 (to_real r!1)))
 (let ((?x282 (to_real x!0)))
 (let ((?x139 (to_real x00)))
 (let ((?x138 (to_real b00)))
 (let ((?x430 (to_real b!2)))
 (let ((?x183 (* ?x430 ?x433)))
 (let ((?x178 (* (/ 1.0 2.0) ?x183)))
 (let ((?x159 (* 4.0 (* ?x282 ?x282 ?x433 ?x433 ?x433))))
 (let ((?x160 (+ ?x159 (* (- (/ 1.0 2.0)) (* (to_real r00) ?x430)) ?x178 (* 4.0 (* ?x282 ?x282 ?x282 ?x430 ?x433 ?x433)) (* (/ 1.0 2.0) (* ?x282 ?x430 ?x430)) (* (- (/ 1.0 2.0)) (* ?x138 ?x139 ?x430)) (* (- 4.0) (* (to_real r00) ?x282 ?x282 ?x433 ?x433)) (* (- 4.0) (* ?x138 ?x139 ?x282 ?x282 ?x433 ?x433)))))
 (let (($x125 (>= ?x160 0.0)))
 (let (($x130 (not $x125)))
 (let (($x167 (= ?x160 0.0)))
 (let (($x391 (not $x167)))
 (let ((?x166 (* ?x282 ?x430)))
 (let ((?x140 (* ?x138 ?x139)))
 (let ((?x143 (* (- 1.0) ?x140)))
 (let ((?x58 (to_real r00)))
 (let ((?x129 (* (- 1.0) ?x58)))
 (let ((?x417 (* (/ 1.0 2.0) ?x430)))
 (let ((?x396 (* 4.0 (* ?x282 ?x433 ?x433))))
 (let ((?x385 (* ?x282 ?x430 ?x430)))
 (let ((?x337 (* ?x433 ?x433)))
 (let ((?x133 (* 4.0 (* ?x282 ?x282 ?x433 ?x433))))
 (let ((?x348 (* (/ 1.0 4.0) (* ?x430 ?x430))))
 (let ((?x418 (* (- 1.0) ?x183)))
 (let ((?x147 (+ ?x418 (* (- 4.0) (* ?x282 ?x430 ?x433)) ?x348 ?x133 ?x337 ?x385 ?x396 (* ?x282 ?x282 ?x430 ?x430) ?x417 (* (- 4.0) (* ?x282 ?x282 ?x430 ?x433)))))
 (let (($x168 (= (* ?x147 (+ ?x129 ?x143 ?x166 ?x433)) 0.0)))
 (let ((?x152 (+ ?x433 ?x129 ?x143 ?x166)))
 (let (($x334 (= ?x152 0.0)))
 (let (($x375 (>= ?x152 0.0)))
 (let ((?x435 (+ (* (- 1.0) ?x293) ?x166)))
 (let (($x445 (>= ?x435 0.0)))
 (let (($x136 (= 0.0 ?x435)))
 (let ((@x149 (symm (commutativity (= $x136 (= ?x435 0.0))) (= (= ?x435 0.0) $x136))))
 (let ((@x223 (mp ((_ th-lemma arith) (= ?x435 0.0)) @x149 $x136)))
 (let ((?x80 (* b00 x00)))
 (let ((?x413 (+ r00 ?x80 (* (- 1) ?x199) (* (- 1) r!1))))
 (let (($x398 (<= ?x413 0)))
 (let (($x390 (= 0 ?x413)))
 (let ((@x389 (symm (commutativity (= $x390 (= ?x413 0))) (= (= ?x413 0) $x390))))
 (let (($x194 (= ?x413 0)))
 (let (($x350 (not $x168)))
 (let (($x425 (or $x391 $x350)))
 (let (($x100 (and $x194 $x425)))
 (let ((?x210 (* ?x430 ?x430 ?x282)))
 (let ((?x373 (+ ?x417 ?x133 ?x418 ?x210 ?x348 ?x337 (* (- 4.0) (* ?x430 ?x282 ?x433)) ?x396 (* ?x430 ?x430 ?x282 ?x282) (* (- 4.0) (* ?x430 ?x282 ?x282 ?x433)))))
 (let ((?x422 (+ ?x178 (* (- (/ 1.0 2.0)) (* ?x430 ?x58)) (* (- (/ 1.0 2.0)) (* ?x430 ?x138 ?x139)) (* (/ 1.0 2.0) ?x210) ?x159 (* (- 4.0) (* ?x282 ?x282 ?x433 ?x433 ?x58)) (* (- 4.0) (* ?x282 ?x282 ?x433 ?x433 ?x138 ?x139)) (* 4.0 (* ?x430 ?x282 ?x282 ?x282 ?x433 ?x433)))))
 (let (($x236 (or (not (= ?x422 0.0)) (not (= (* ?x373 (+ ?x433 ?x129 ?x143 (* ?x430 ?x282))) 0.0)))))
 (let (($x112 (and (= (+ r!1 (* (- 1) r00) (* b!2 x!0) (* (- 1) ?x80)) 0) $x236)))
 (let (($x376 (exists ((b Int) (r Int) (x Int) )(! (let ((?x139 (to_real x00)))
 (let ((?x138 (to_real b00)))
 (let ((?x140 (* ?x138 ?x139)))
 (let ((?x143 (* (- 1.0) ?x140)))
 (let ((?x58 (to_real r00)))
 (let ((?x129 (* (- 1.0) ?x58)))
 (let ((?x54 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x239 (* ?x40 ?x40 ?x43)))
 (let ((?x197 (* 4.0 (* ?x43 ?x43 ?x54 ?x54))))
 (let ((?x150 (* (/ 1.0 2.0) ?x40)))
 (let ((?x454 (+ ?x150 ?x197 (* (- 1.0) (* ?x40 ?x54)) ?x239 (* (/ 1.0 4.0) (* ?x40 ?x40)) (* ?x54 ?x54) (* (- 4.0) (* ?x40 ?x43 ?x54)) (* 4.0 (* ?x43 ?x54 ?x54)) (* ?x40 ?x40 ?x43 ?x43) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x54)))))
 (let ((?x280 (+ (* (/ 1.0 2.0) (* ?x40 ?x54)) (* (- (/ 1.0 2.0)) (* ?x40 ?x58)) (* (- (/ 1.0 2.0)) (* ?x40 ?x138 ?x139)) (* (/ 1.0 2.0) ?x239) (* 4.0 (* ?x43 ?x43 ?x54 ?x54 ?x54)) (* (- 4.0) (* ?x43 ?x43 ?x54 ?x54 ?x58)) (* (- 4.0) (* ?x43 ?x43 ?x54 ?x54 ?x138 ?x139)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x54 ?x54)))))
 (let (($x108 (not (= ?x280 0.0))))
 (let (($x209 (or $x108 (not (= (* ?x454 (+ ?x54 ?x129 ?x143 (* ?x40 ?x43))) 0.0)))))
 (let (($x116 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (and $x116 $x209)))))))))))))))))) :qid k!28))
 ))
 (let (($x131 (exists ((b Int) (r Int) (x Int) )(! (let ((?x58 (to_real r00)))
 (let ((?x129 (* (- 1.0) ?x58)))
 (let ((?x40 (to_real b)))
 (let ((?x165 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x54 (to_real r)))
 (let ((?x139 (to_real x00)))
 (let ((?x138 (to_real b00)))
 (let ((?x140 (* ?x138 ?x139)))
 (let ((?x143 (* (- 1.0) ?x140)))
 (let ((?x243 (+ ?x143 ?x54 ?x165 ?x129 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x372 (+ ?x54 ?x165)))
 (let ((?x43 (to_real x)))
 (let ((?x296 (* 2.0 ?x43)))
 (let ((?x339 (+ 1.0 ?x296)))
 (let ((?x150 (* (/ 1.0 2.0) ?x40)))
 (let ((?x392 (* (+ ?x150 (* 4.0 (* ?x43 ?x43 ?x54 ?x54))) (+ ?x143 ?x54 ?x129 (* ?x43 ?x40)))))
 (let (($x162 (or (not (= ?x392 0.0)) (not (= (* (+ ?x150 (* ?x339 ?x339 ?x372 ?x372)) ?x243) 0.0)))))
 (let (($x327 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (and $x327 $x162))))))))))))))))))) :qid k!28))
 ))
 (let ((?x371 (lambda ((b Int) (r Int) (x Int) )(let ((?x139 (to_real x00)))
 (let ((?x138 (to_real b00)))
 (let ((?x140 (* ?x138 ?x139)))
 (let ((?x143 (* (- 1.0) ?x140)))
 (let ((?x58 (to_real r00)))
 (let ((?x129 (* (- 1.0) ?x58)))
 (let ((?x54 (to_real r)))
 (let ((?x43 (to_real x)))
 (let ((?x40 (to_real b)))
 (let ((?x239 (* ?x40 ?x40 ?x43)))
 (let ((?x197 (* 4.0 (* ?x43 ?x43 ?x54 ?x54))))
 (let ((?x150 (* (/ 1.0 2.0) ?x40)))
 (let ((?x454 (+ ?x150 ?x197 (* (- 1.0) (* ?x40 ?x54)) ?x239 (* (/ 1.0 4.0) (* ?x40 ?x40)) (* ?x54 ?x54) (* (- 4.0) (* ?x40 ?x43 ?x54)) (* 4.0 (* ?x43 ?x54 ?x54)) (* ?x40 ?x40 ?x43 ?x43) (* (- 4.0) (* ?x40 ?x43 ?x43 ?x54)))))
 (let ((?x280 (+ (* (/ 1.0 2.0) (* ?x40 ?x54)) (* (- (/ 1.0 2.0)) (* ?x40 ?x58)) (* (- (/ 1.0 2.0)) (* ?x40 ?x138 ?x139)) (* (/ 1.0 2.0) ?x239) (* 4.0 (* ?x43 ?x43 ?x54 ?x54 ?x54)) (* (- 4.0) (* ?x43 ?x43 ?x54 ?x54 ?x58)) (* (- 4.0) (* ?x43 ?x43 ?x54 ?x54 ?x138 ?x139)) (* 4.0 (* ?x40 ?x43 ?x43 ?x43 ?x54 ?x54)))))
 (let (($x108 (not (= ?x280 0.0))))
 (let (($x209 (or $x108 (not (= (* ?x454 (+ ?x54 ?x129 ?x143 (* ?x40 ?x43))) 0.0)))))
 (let (($x116 (= (+ r (* (- 1) r00) (* b x) (* (- 1) (* b00 x00))) 0)))
 (let (($x118 (and $x116 $x209)))
 (let ((?x165 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x243 (+ ?x143 ?x54 ?x165 ?x129 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 ?x43)))))))
 (let ((?x372 (+ ?x54 ?x165)))
 (let ((?x296 (* 2.0 ?x43)))
 (let ((?x339 (+ 1.0 ?x296)))
 (let (($x153 (not (= (* (+ ?x150 ?x197) (+ ?x143 ?x54 ?x129 (* ?x43 ?x40))) 0.0))))
 (let (($x162 (or $x153 (not (= (* (+ ?x150 (* ?x339 ?x339 ?x372 ?x372)) ?x243) 0.0)))))
 (let (($x327 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x325 (and $x327 $x162)))
 (rewrite (= $x325 $x118))))))))))))))))))))))))))))))
 ))
 (let (($x164 (exists ((b Int) (r Int) (x Int) )(! (let ((?x58 (to_real r00)))
 (let ((?x129 (* (- 1.0) ?x58)))
 (let ((?x40 (to_real b)))
 (let ((?x165 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x54 (to_real r)))
 (let ((?x139 (to_real x00)))
 (let ((?x138 (to_real b00)))
 (let ((?x140 (* ?x138 ?x139)))
 (let ((?x143 (* (- 1.0) ?x140)))
 (let ((?x243 (+ ?x143 ?x54 ?x165 ?x129 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x372 (+ ?x54 ?x165)))
 (let ((?x43 (to_real x)))
 (let ((?x296 (* 2.0 ?x43)))
 (let ((?x339 (+ 1.0 ?x296)))
 (let ((?x150 (* (/ 1.0 2.0) ?x40)))
 (let ((?x392 (* (+ ?x150 (* 4.0 (* ?x43 ?x43 ?x54 ?x54))) (+ ?x143 ?x54 ?x129 (* ?x43 ?x40)))))
 (let (($x162 (or (not (= ?x392 0.0)) (not (= (* (+ ?x150 (* ?x339 ?x339 ?x372 ?x372)) ?x243) 0.0)))))
 (let (($x354 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (and $x354 $x162))))))))))))))))))) :qid k!28))
 ))
 (let ((?x179 (lambda ((b Int) (r Int) (x Int) )(let ((?x58 (to_real r00)))
 (let ((?x129 (* (- 1.0) ?x58)))
 (let ((?x40 (to_real b)))
 (let ((?x165 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x54 (to_real r)))
 (let ((?x139 (to_real x00)))
 (let ((?x138 (to_real b00)))
 (let ((?x140 (* ?x138 ?x139)))
 (let ((?x143 (* (- 1.0) ?x140)))
 (let ((?x243 (+ ?x143 ?x54 ?x165 ?x129 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x372 (+ ?x54 ?x165)))
 (let ((?x43 (to_real x)))
 (let ((?x296 (* 2.0 ?x43)))
 (let ((?x339 (+ 1.0 ?x296)))
 (let ((?x150 (* (/ 1.0 2.0) ?x40)))
 (let ((?x392 (* (+ ?x150 (* 4.0 (* ?x43 ?x43 ?x54 ?x54))) (+ ?x143 ?x54 ?x129 (* ?x43 ?x40)))))
 (let (($x162 (or (not (= ?x392 0.0)) (not (= (* (+ ?x150 (* ?x339 ?x339 ?x372 ?x372)) ?x243) 0.0)))))
 (let (($x327 (= (+ (* b00 x00) (* (- 1) r) r00 (* (- 1) (* x b))) 0)))
 (let (($x325 (and $x327 $x162)))
 (let (($x354 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x405 (and $x354 $x162)))
 (rewrite (= $x405 $x325))))))))))))))))))))))))
 ))
 (let (($x72 (exists ((b Int) (r Int) (x Int) )(! (let ((?x51 (to_real 0)))
 (let ((?x62 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x40 (to_real b)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x54 (to_real r)))
 (let ((?x55 (- ?x54 ?x42)))
 (let ((?x64 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x55) (to_real r00)) (* ?x42 ?x62))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 (to_real x)))))
 (let (($x52 (= (* ?x46 (+ ?x42 (to_real (* r r 2 x 2 x)))) ?x51)))
 (let (($x70 (or (not $x52) (not (= (* ?x64 (+ ?x42 (* ?x55 ?x55 ?x62 ?x62))) ?x51)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (and $x38 $x70))))))))))))) :qid k!28))
 ))
 (let ((?x237 (lambda ((b Int) (r Int) (x Int) )(let ((?x58 (to_real r00)))
 (let ((?x129 (* (- 1.0) ?x58)))
 (let ((?x40 (to_real b)))
 (let ((?x165 (* (- (/ 1.0 2.0)) ?x40)))
 (let ((?x54 (to_real r)))
 (let ((?x139 (to_real x00)))
 (let ((?x138 (to_real b00)))
 (let ((?x140 (* ?x138 ?x139)))
 (let ((?x143 (* (- 1.0) ?x140)))
 (let ((?x243 (+ ?x143 ?x54 ?x165 ?x129 (* (/ 1.0 2.0) (* ?x40 (+ 1.0 (* 2.0 (to_real x))))))))
 (let ((?x372 (+ ?x54 ?x165)))
 (let ((?x43 (to_real x)))
 (let ((?x296 (* 2.0 ?x43)))
 (let ((?x339 (+ 1.0 ?x296)))
 (let ((?x150 (* (/ 1.0 2.0) ?x40)))
 (let ((?x392 (* (+ ?x150 (* 4.0 (* ?x43 ?x43 ?x54 ?x54))) (+ ?x143 ?x54 ?x129 (* ?x43 ?x40)))))
 (let (($x162 (or (not (= ?x392 0.0)) (not (= (* (+ ?x150 (* ?x339 ?x339 ?x372 ?x372)) ?x243) 0.0)))))
 (let (($x354 (= (+ (* (- 1) (* b00 x00)) r (* (- 1) r00) (* x b)) 0)))
 (let (($x405 (and $x354 $x162)))
 (let ((?x51 (to_real 0)))
 (let ((?x62 (to_real (+ (* 2 x) 1))))
 (let ((?x41 (to_real 2)))
 (let ((?x42 (/ ?x40 ?x41)))
 (let ((?x55 (- ?x54 ?x42)))
 (let ((?x64 (+ (- (+ (to_real (* (- 1) b00 x00)) ?x55) ?x58) (* ?x42 ?x62))))
 (let ((?x46 (+ (to_real (- (+ (* (- 1) b00 x00) r) r00)) (* ?x42 ?x41 ?x43))))
 (let (($x52 (= (* ?x46 (+ ?x42 (to_real (* r r 2 x 2 x)))) ?x51)))
 (let (($x70 (or (not $x52) (not (= (* ?x64 (+ ?x42 (* ?x55 ?x55 ?x62 ?x62))) ?x51)))))
 (let (($x38 (= (+ (- (+ (* (- 1) b00 x00) r) r00) (* b x)) 0)))
 (let (($x71 (and $x38 $x70)))
 (rewrite (= $x71 $x405)))))))))))))))))))))))))))))))))
 ))
 (let ((@x73 (asserted $x72)))
 (let ((@x347 (mp (mp @x73 (quant-intro (proof-bind ?x237) (= $x72 $x164)) $x164) (rewrite (= $x164 $x164)) $x164)))
 (let ((@x145 (mp (mp @x347 (quant-intro (proof-bind ?x179) (= $x164 $x131)) $x131) (quant-intro (proof-bind ?x371) (= $x131 $x376)) $x376)))
 (let ((@x196 (mp (mp~ @x145 (sk (~ $x376 $x112)) $x112) (rewrite (= $x112 $x100)) $x100)))
 (let ((@x91 (mp (and-elim @x196 $x194) @x389 $x390)))
 (let ((@x90 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x390) $x398)) @x91 $x398)))
 (let ((?x379 (+ ?x140 (* (- 1.0) (to_real ?x80)))))
 (let (($x195 (<= ?x379 0.0)))
 (let (($x393 (= 0.0 ?x379)))
 (let ((@x87 (symm (commutativity (= $x393 (= ?x379 0.0))) (= (= ?x379 0.0) $x393))))
 (let ((@x86 (mp ((_ th-lemma arith) (= ?x379 0.0)) @x87 $x393)))
 (let ((@x302 ((_ th-lemma arith) (hypothesis (not $x375)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x393) $x195)) @x86 $x195) @x90 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x136) $x445)) @x223 $x445) false)))
 (let (($x412 (<= ?x152 0.0)))
 (let (($x137 (<= ?x435 0.0)))
 (let (($x176 (>= ?x379 0.0)))
 (let (($x358 (>= ?x413 0)))
 (let ((@x365 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x390) $x358)) @x91 $x358)))
 (let ((@x369 ((_ th-lemma arith) @x365 (hypothesis (not $x412)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x393) $x176)) @x86 $x176) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x136) $x137)) @x223 $x137) false)))
 (let ((@x235 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x334 (not $x412) (not $x375))) (lemma @x369 $x412) (lemma @x302 $x375) $x334)))
 (let ((@x182 (unit-resolution ((_ th-lemma arith) (or (not $x334) $x168)) (hypothesis $x350) @x235 false)))
 (let (($x383 (<= ?x160 0.0)))
 (let ((@x202 (unit-resolution ((_ th-lemma arith) (or $x383 (not $x358) (not $x105) (not $x398) (not $x104))) @x90 @x365 (hypothesis (not $x383)) (unit-resolution @x120 (hypothesis $x103) $x104) (unit-resolution @x135 (hypothesis $x103) $x105) false)))
 (let ((@x248 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x167 (not $x383) $x130)) (unit-resolution (lemma @x202 (or (not $x103) $x383)) @x107 $x383) (unit-resolution (and-elim @x196 $x425) (lemma @x182 $x168) $x391) $x130)))
 (unit-resolution ((_ th-lemma arith) (or (not $x358) $x125 (not $x398) (not $x105) (not $x104))) @x90 @x365 @x248 (unit-resolution @x120 @x107 $x104) (unit-resolution @x135 @x107 $x105) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       28
 :arith-eq-adapter                27
 :arith-bound-propagations-cheap  24
 :arith-bound-propagations-lp     11
 :arith-conflicts                 47
 :arith-diseq                     22
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 5
 :arith-grobner-calls             4
 :arith-grobner-conflicts         2
 :arith-horner-calls              4
 :arith-horner-cross-nested-forms 12
 :arith-lower                     40
 :arith-make-feasible             38
 :arith-max-columns               53
 :arith-max-rows                  15
 :arith-nla-explanations          75
 :arith-nla-lemmas                45
 :arith-patches                   5
 :arith-patches-success           5
 :arith-propagations              24
 :arith-upper                     43
 :conflicts                       7
 :decisions                       49
 :del-clause                      117
 :final-checks                    28
 :max-memory                      3.98
 :memory                          3.10
 :mk-bool-var                     165
 :mk-clause                       148
 :num-allocs                      1630543
 :num-checks                      1
 :propagations                    62
 :rlimit-count                    3976
 :time                            0.01
 :total-time                      0.02)
