unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x501 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x79 (>= ?x501 0)))
 (let (($x653 (= ?x501 0)))
 (let ((?x275 (* 6 (* x!1 y!0 y!0))))
 (let ((?x204 (* (- 1) (* x!1 x!1 x!1 y!0 y!0))))
 (let ((?x421 (* (- 4) y!0)))
 (let ((?x552 (* x!1 x!1)))
 (let ((?x521 (* 3 (* x!1 y!0))))
 (let ((?x485 (* (- 5) (* y!0 y!0))))
 (let ((?x432 (* (- 2) (* x!1 x!1 x!1 y!0))))
 (let ((?x651 (* (- 2) (* y!0 y!0 y!0))))
 (let ((?x612 (* (- 2) (* x!1 x!1 y!0 y!0 y!0))))
 (let ((?x440 (* (- 3) (* x!1 x!1 y!0 y!0))))
 (let ((?x85 (* 3 (* x!1 y!0 y!0 y!0))))
 (let ((?x209 (* (- 1) (* x!1 x!1 x!1))))
 (let ((?x572 (+ (- 1) ?x209 ?x85 ?x440 ?x612 ?x651 ?x432 ?x485 ?x521 ?x552 ?x421 ?x204 ?x275)))
 (let ((?x329 (* (+ (* (- 1) y00) (* (- 1) x00) x!1 y!0) ?x572)))
 (let (($x654 (= ?x329 0)))
 (let (($x399 (not $x654)))
 (let (($x328 (and $x653 $x399)))
 (let ((?x277 (+ (- 1) ?x421 ?x485 ?x651 ?x85 ?x612 ?x521 ?x440 ?x204 ?x552 ?x209 ?x432 ?x275)))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x542 (+ x!1 y!0 ?x56 ?x63)))
 (let (($x616 (and (= ?x542 0) (not (= (* ?x542 ?x277) 0)))))
 (let (($x669 (exists ((x Int) (y Int) )(! (let ((?x473 (* (- 2) (* x x x y))))
 (let ((?x425 (* (- 1) (* x x x))))
 (let ((?x334 (* x x)))
 (let ((?x423 (* (- 1) (* x x x y y))))
 (let ((?x212 (* (- 2) (* x x y y y))))
 (let ((?x253 (* (- 2) (* y y y))))
 (let ((?x496 (* (- 5) (* y y))))
 (let ((?x494 (* (- 4) y)))
 (let ((?x94 (+ (- 1) ?x494 ?x496 ?x253 (* 3 (* x y y y)) ?x212 (* 3 (* x y)) (* (- 3) (* x x y y)) ?x423 ?x334 ?x425 ?x473 (* 6 (* x y y)))))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let (($x82 (= ?x77 0)))
 (and $x82 (not (= (* ?x77 ?x94) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x278 (exists ((x Int) (y Int) )(! (let ((?x587 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x560 (+ 1 y)))
 (let ((?x126 (+ (- 1) x)))
 (let ((?x618 (+ (* (- 2) (* ?x126 ?x126 ?x560 ?x560 ?x560)) (* (- 1) (* ?x126 ?x126 ?x126 ?x560 ?x560)) ?x587 (* (- 1) (* ?x560 ?x560 ?x560)))))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x447 (+ x ?x56 ?x63 y)))
 (and (= ?x447 0) (not (= (* ?x447 ?x618) 0)))))))))) :qid k!26))
 ))
 (let ((?x340 (lambda ((x Int) (y Int) )(let ((?x473 (* (- 2) (* x x x y))))
 (let ((?x425 (* (- 1) (* x x x))))
 (let ((?x334 (* x x)))
 (let ((?x423 (* (- 1) (* x x x y y))))
 (let ((?x212 (* (- 2) (* x x y y y))))
 (let ((?x253 (* (- 2) (* y y y))))
 (let ((?x496 (* (- 5) (* y y))))
 (let ((?x494 (* (- 4) y)))
 (let ((?x94 (+ (- 1) ?x494 ?x496 ?x253 (* 3 (* x y y y)) ?x212 (* 3 (* x y)) (* (- 3) (* x x y y)) ?x423 ?x334 ?x425 ?x473 (* 6 (* x y y)))))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x77 (+ x y ?x56 ?x63)))
 (let (($x82 (= ?x77 0)))
 (let (($x579 (and $x82 (not (= (* ?x77 ?x94) 0)))))
 (let ((?x587 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x560 (+ 1 y)))
 (let ((?x126 (+ (- 1) x)))
 (let ((?x618 (+ (* (- 2) (* ?x126 ?x126 ?x560 ?x560 ?x560)) (* (- 1) (* ?x126 ?x126 ?x126 ?x560 ?x560)) ?x587 (* (- 1) (* ?x560 ?x560 ?x560)))))
 (let ((?x447 (+ x ?x56 ?x63 y)))
 (let (($x481 (and (= ?x447 0) (not (= (* ?x447 ?x618) 0)))))
 (rewrite (= $x481 $x579)))))))))))))))))))))))
 ))
 (let (($x53 (exists ((x Int) (y Int) )(! (let ((?x40 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (- (* (- 2) ?x34 ?x34 ?x40 ?x40 ?x40) (* ?x34 ?x34 ?x34 ?x40 ?x40))))
 (let ((?x48 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x45 (* ?x34 ?x40 ?x40 ?x40)) (* ?x40 ?x40 ?x40)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0)))))))) :qid k!26))
 ))
 (let ((?x565 (lambda ((x Int) (y Int) )(let ((?x587 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x560 (+ 1 y)))
 (let ((?x126 (+ (- 1) x)))
 (let ((?x618 (+ (* (- 2) (* ?x126 ?x126 ?x560 ?x560 ?x560)) (* (- 1) (* ?x126 ?x126 ?x126 ?x560 ?x560)) ?x587 (* (- 1) (* ?x560 ?x560 ?x560)))))
 (let ((?x63 (* (- 1) x00)))
 (let ((?x56 (* (- 1) y00)))
 (let ((?x447 (+ x ?x56 ?x63 y)))
 (let (($x481 (and (= ?x447 0) (not (= (* ?x447 ?x618) 0)))))
 (let ((?x40 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x45 (- (* (- 2) ?x34 ?x34 ?x40 ?x40 ?x40) (* ?x34 ?x34 ?x34 ?x40 ?x40))))
 (let ((?x48 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x45 (* ?x34 ?x40 ?x40 ?x40)) (* ?x40 ?x40 ?x40)))))
 (let (($x52 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x48 0))))))
 (rewrite (= $x52 $x481))))))))))))))))
 ))
 (let ((@x54 (asserted $x53)))
 (let ((@x545 (mp (mp @x54 (quant-intro (proof-bind ?x565) (= $x53 $x278)) $x278) (rewrite (= $x278 $x278)) $x278)))
 (let ((@x265 (mp~ (mp @x545 (quant-intro (proof-bind ?x340) (= $x278 $x669)) $x669) (sk (~ $x669 $x616)) $x616)))
 (let ((@x511 (mp @x265 (rewrite (= $x616 $x328)) $x328)))
 (let ((@x509 (and-elim @x511 $x653)))
 (let ((@x262 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x653) $x79)) @x509 $x79)))
 (let (($x406 (<= ?x501 0)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x653) $x406)) @x509 $x406)))
 (let (($x606 (not (>= ?x329 0))))
 (let (($x512 (<= ?x329 0)))
 (let ((@x403 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x654 (not $x512) $x606)) (and-elim @x511 $x399) (or (not $x512) $x606))))
 (let ((@x402 (unit-resolution @x403 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x512)) @x332 @x262 false) $x512) $x606)))
 ((_ th-lemma arith farkas 1 1 1) @x402 @x332 @x262 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             62
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 26
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.65
 :memory                    3.16
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1125874
 :num-checks                1
 :propagations              4
 :rlimit-count              2089
 :time                      0.01
 :total-time                0.01)
