unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x366 (* (- 1) k!2)))
 (let ((?x436 (+ (* 3 (* n!0 n!0)) (* 3 n!0) ?x366)))
 (let (($x358 (<= ?x436 (- 1))))
 (let (($x115 (= ?x436 (- 1))))
 (let ((?x621 (+ c!3 k!2)))
 (let ((?x845 (+ m!1 k!2)))
 (let ((?x232 (+ 1 n!0)))
 (let ((?x106 (* (- 3) (* ?x232 ?x232 (+ 6 m!1) (+ 6 m!1) ?x845 ?x845 ?x845 ?x621))))
 (let ((?x541 (* (- 3) (* ?x232 (+ 6 m!1) (+ 6 m!1) ?x845 ?x845 ?x845 ?x621))))
 (let ((?x368 (+ (* 9 (* m!1 m!1 n!0 n!0 k!2)) ?x541 (* (- 3) (* ?x232 ?x232 ?x232 ?x845 ?x845 ?x621 ?x621 ?x621)) (* 27 (* m!1 m!1 n!0 k!2)) (* 27 (* m!1 n!0 k!2 k!2)) (* 9 (* m!1 m!1 m!1 n!0)) (* (- 4) (* m!1 k!2 k!2 k!2)) (* ?x232 ?x845 ?x845 ?x845 ?x621 ?x621 ?x621) (* 21 (* m!1 k!2 k!2)) (* 3 (* m!1 m!1 m!1 n!0 n!0)) (* (- 6) (* m!1 m!1 k!2 k!2)) (* (- 1) (* (+ 6 m!1) (+ 6 m!1) ?x845 ?x845 ?x845 ?x621)) (* 9 (* m!1 n!0 n!0 k!2 k!2)) (* (- 1) (* m!1 m!1 m!1 m!1)) (* (+ 6 m!1) (+ 6 m!1) ?x845 ?x845 ?x845 ?x845 ?x621) (* (- 3) (* ?x232 ?x232 ?x845 ?x845 ?x621 ?x621 ?x621)) ?x106 (* 7 (* k!2 k!2 k!2)) (* (- 1) (* ?x232 ?x845 ?x845 ?x621 ?x621 ?x621)) (* 7 (* m!1 m!1 m!1)) (* (- 1) (* k!2 k!2 k!2 k!2)) (* 9 (* n!0 k!2 k!2 k!2)) (* 21 (* m!1 m!1 k!2)) (* 3 (* n!0 n!0 k!2 k!2 k!2)) (* (- 4) (* m!1 m!1 m!1 k!2)))))
 (let (($x281 (= ?x368 0)))
 (let (($x324 (not $x281)))
 (let ((?x362 (+ (* 2 n!0) (* (- 3) c!3) ?x366 (* n!0 k!2))))
 (let (($x330 (= ?x362 (- 1))))
 (let ((?x552 (* k!2 k!2)))
 (let ((?x603 (+ (* 9 n!0) ?x552 (* (- 18) c!3) (* (- 5) k!2) (* (- 9) (* n!0 c!3)))))
 (let (($x676 (= ?x603 (- 4))))
 (let ((?x524 (+ m!1 (* (- 6) n!0))))
 (let (($x190 (= ?x524 6)))
 (let (($x641 (and $x190 $x676 $x330 $x115 $x324)))
 (let ((?x420 (* 3 (* ?x232 ?x232 ?x232 (+ k!2 m!1) (+ k!2 m!1) ?x621 ?x621 ?x621))))
 (let ((?x277 (+ k!2 m!1)))
 (let ((?x619 (+ 6 m!1)))
 (let ((?x522 (* m!1 m!1 m!1 m!1)))
 (let ((?x742 (* k!2 k!2 k!2 k!2)))
 (let ((?x771 (+ (* 3 (* ?x232 ?x232 ?x277 ?x277 ?x621 ?x621 ?x621)) (* 3 (* ?x232 ?x232 ?x619 ?x619 ?x277 ?x277 ?x277 ?x621)) (* (- 1) (* ?x619 ?x619 ?x277 ?x277 ?x277 ?x277 ?x621)) (* (- 1) (* ?x232 ?x277 ?x277 ?x277 ?x621 ?x621 ?x621)) ?x742 (* 4 (* k!2 k!2 k!2 m!1)) (* 6 (* k!2 k!2 m!1 m!1)) (* 4 (* k!2 m!1 m!1 m!1)) ?x522 (* ?x619 ?x619 ?x277 ?x277 ?x277 ?x621) (* (- 7) (* k!2 k!2 k!2)) (* (- 21) (* k!2 k!2 m!1)) (* (- 21) (* k!2 m!1 m!1)) (* (- 7) (* m!1 m!1 m!1)) (* ?x232 ?x277 ?x277 ?x621 ?x621 ?x621) (* (- 9) (* k!2 m!1 m!1 n!0 n!0)) (* (- 9) (* k!2 k!2 m!1 n!0 n!0)) (* (- 3) (* k!2 k!2 k!2 n!0 n!0)) (* (- 3) (* m!1 m!1 m!1 n!0 n!0)) (* 3 (* ?x232 ?x619 ?x619 ?x277 ?x277 ?x277 ?x621)) (* (- 9) (* k!2 k!2 k!2 n!0)) (* (- 27) (* k!2 k!2 m!1 n!0)) (* (- 27) (* k!2 m!1 m!1 n!0)) (* (- 9) (* m!1 m!1 m!1 n!0)) ?x420)))
 (let (($x562 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x744 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x552) (* 9 (* c!3 n!0)))))
 (let (($x625 (and $x190 (= ?x744 4) $x562 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x771 0)))))
 (let (($x525 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x583 (+ 1 n)))
 (let ((?x863 (* ?x583 ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x332 (* 3 ?x863)))
 (let ((?x315 (+ 6 m)))
 (let ((?x813 (* ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x263 (* 3 ?x813)))
 (let ((?x704 (* (- 3) (* m m m n n))))
 (let ((?x718 (* (- 3) (* k k k n n))))
 (let ((?x586 (* ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x503 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x469 (* m m m m)))
 (let ((?x500 (* 4 (* k m m m))))
 (let ((?x499 (* 6 (* k k m m))))
 (let ((?x498 (* 4 (* k k k m))))
 (let ((?x454 (* k k k k)))
 (let ((?x295 (* ?x583 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x348 (* (- 1) ?x295)))
 (let ((?x285 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x342 (* (- 1) ?x285)))
 (let ((?x229 (* ?x583 ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x346 (* 3 ?x229)))
 (let ((?x173 (* ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x568 (* 3 ?x173)))
 (let ((?x283 (+ ?x568 ?x346 ?x342 ?x348 ?x454 ?x498 ?x499 ?x500 ?x469 ?x503 (* (- 7) (* k k k)) (* (- 21) (* k k m)) (* (- 21) (* k m m)) (* (- 7) (* m m m)) ?x586 (* (- 9) (* k m m n n)) (* (- 9) (* k k m n n)) ?x718 ?x704 ?x263 (* (- 9) (* k k k n)) (* (- 27) (* k k m n)) (* (- 27) (* k m m n)) (* (- 9) (* m m m n)) ?x332)))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x215 (= (+ ?x40 ?x44 ?x217 ?x218 (* 9 (* c n))) 4)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (and $x131 $x215 $x267 $x305 (not (= ?x283 0)))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x303 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ k m)))
 (let ((?x583 (+ 1 n)))
 (let ((?x145 (* ?x583 ?x583 ?x70 ?x70 ?x70)))
 (let ((?x69 (+ c k)))
 (let ((?x315 (+ 6 m)))
 (let ((?x229 (* ?x583 ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x346 (* 3 ?x229)))
 (let ((?x295 (* ?x583 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x348 (* (- 1) ?x295)))
 (let ((?x285 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x342 (* (- 1) ?x285)))
 (let ((?x586 (* ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x173 (* ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x568 (* 3 ?x173)))
 (let ((?x813 (* ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x263 (* 3 ?x813)))
 (let ((?x863 (* ?x583 ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x332 (* 3 ?x863)))
 (let ((?x73 (* ?x70 ?x70 ?x70 ?x70)))
 (let ((?x503 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x356 (+ ?x503 ?x73 (* (- 1) (* ?x70 ?x70 ?x70)) ?x332 ?x263 ?x568 ?x586 ?x342 ?x348 ?x346 (* (- 3) (* ?x583 ?x70 ?x70 ?x70)) (* (- 3) ?x145))))
 (let (($x490 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x344 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x344 $x490 (not (= ?x356 0)))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x440 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x583 (+ 1 n)))
 (let ((?x863 (* ?x583 ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x332 (* 3 ?x863)))
 (let ((?x315 (+ 6 m)))
 (let ((?x813 (* ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x263 (* 3 ?x813)))
 (let ((?x704 (* (- 3) (* m m m n n))))
 (let ((?x718 (* (- 3) (* k k k n n))))
 (let ((?x586 (* ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x503 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x469 (* m m m m)))
 (let ((?x500 (* 4 (* k m m m))))
 (let ((?x499 (* 6 (* k k m m))))
 (let ((?x498 (* 4 (* k k k m))))
 (let ((?x454 (* k k k k)))
 (let ((?x295 (* ?x583 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x348 (* (- 1) ?x295)))
 (let ((?x285 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x342 (* (- 1) ?x285)))
 (let ((?x229 (* ?x583 ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x346 (* 3 ?x229)))
 (let ((?x173 (* ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x568 (* 3 ?x173)))
 (let ((?x283 (+ ?x568 ?x346 ?x342 ?x348 ?x454 ?x498 ?x499 ?x500 ?x469 ?x503 (* (- 7) (* k k k)) (* (- 21) (* k k m)) (* (- 21) (* k m m)) (* (- 7) (* m m m)) ?x586 (* (- 9) (* k m m n n)) (* (- 9) (* k k m n n)) ?x718 ?x704 ?x263 (* (- 9) (* k k k n)) (* (- 27) (* k k m n)) (* (- 27) (* k m m n)) (* (- 9) (* m m m n)) ?x332)))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x215 (= (+ ?x40 ?x44 ?x217 ?x218 (* 9 (* c n))) 4)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (let (($x288 (and $x131 $x215 $x267 $x305 (not (= ?x283 0)))))
 (let ((?x73 (* ?x70 ?x70 ?x70 ?x70)))
 (let ((?x356 (+ ?x503 ?x73 (* (- 1) (* ?x70 ?x70 ?x70)) ?x332 ?x263 ?x568 ?x586 ?x342 ?x348 ?x346 (* (- 3) (* ?x583 ?x70 ?x70 ?x70)) (* (- 3) (* ?x583 ?x583 ?x70 ?x70 ?x70)))))
 (let (($x490 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x344 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x519 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x344 $x490 (not (= ?x356 0)))))
 (rewrite (= $x519 $x288))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x494 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ k m)))
 (let ((?x583 (+ 1 n)))
 (let ((?x145 (* ?x583 ?x583 ?x70 ?x70 ?x70)))
 (let ((?x69 (+ c k)))
 (let ((?x315 (+ 6 m)))
 (let ((?x229 (* ?x583 ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x295 (* ?x583 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x285 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x75 (* ?x70 ?x70 ?x70)))
 (let ((?x163 (+ (* (- 1) (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)) (* (- 1) (* ?x70 ?x70 ?x70 ?x70)) ?x75 (* (- 3) (* ?x583 ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)) (* (- 3) (* ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)) (* (- 3) (* ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)) (* (- 1) (* ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)) ?x285 ?x295 (* (- 3) ?x229) (* 3 (* ?x583 ?x70 ?x70 ?x70)) (* 3 ?x145))))
 (let (($x490 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x530 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x199 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (and $x131 (= ?x199 (- 4)) $x530 $x490 (not (= ?x163 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x259 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x70 (+ k m)))
 (let ((?x583 (+ 1 n)))
 (let ((?x145 (* ?x583 ?x583 ?x70 ?x70 ?x70)))
 (let ((?x69 (+ c k)))
 (let ((?x315 (+ 6 m)))
 (let ((?x229 (* ?x583 ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x346 (* 3 ?x229)))
 (let ((?x295 (* ?x583 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x348 (* (- 1) ?x295)))
 (let ((?x285 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x342 (* (- 1) ?x285)))
 (let ((?x586 (* ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x173 (* ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x568 (* 3 ?x173)))
 (let ((?x813 (* ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x263 (* 3 ?x813)))
 (let ((?x863 (* ?x583 ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x332 (* 3 ?x863)))
 (let ((?x73 (* ?x70 ?x70 ?x70 ?x70)))
 (let ((?x503 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x356 (+ ?x503 ?x73 (* (- 1) (* ?x70 ?x70 ?x70)) ?x332 ?x263 ?x568 ?x586 ?x342 ?x348 ?x346 (* (- 3) (* ?x583 ?x70 ?x70 ?x70)) (* (- 3) ?x145))))
 (let (($x490 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x344 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (let (($x519 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x344 $x490 (not (= ?x356 0)))))
 (let ((?x75 (* ?x70 ?x70 ?x70)))
 (let ((?x163 (+ (* (- 1) ?x503) (* (- 1) ?x73) ?x75 (* (- 3) ?x863) (* (- 3) ?x813) (* (- 3) ?x173) (* (- 1) ?x586) ?x285 ?x295 (* (- 3) ?x229) (* 3 (* ?x583 ?x70 ?x70 ?x70)) (* 3 ?x145))))
 (let (($x530 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x199 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x868 (and $x131 (= ?x199 (- 4)) $x530 $x490 (not (= ?x163 0)))))
 (rewrite (= $x868 $x519)))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x77 (+ n 1)))
 (let ((?x70 (+ k m)))
 (let ((?x71 (+ m 6)))
 (let ((?x69 (+ c k)))
 (let ((?x75 (* ?x70 ?x70 ?x70)))
 (let ((?x73 (* ?x70 ?x70 ?x70 ?x70)))
 (let ((?x82 (- (+ (- (* (- 1) ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) ?x73) ?x75) (* 3 ?x69 ?x69 ?x69 ?x70 ?x70 ?x77 ?x77 ?x77))))
 (let ((?x84 (- (- ?x82 (* 3 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x77)) (* 3 ?x69 ?x69 ?x69 ?x70 ?x70 ?x77 ?x77))))
 (let ((?x88 (+ (- ?x84 (* ?x69 ?x69 ?x69 ?x70 ?x70 ?x77)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71) (* ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x77))))
 (let ((?x93 (+ (- ?x88 (* 3 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x77 ?x77)) (* 3 ?x70 ?x70 ?x70 ?x77) (* 3 ?x70 ?x70 ?x70 ?x77 ?x77))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x93 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x497 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x70 (+ k m)))
 (let ((?x583 (+ 1 n)))
 (let ((?x145 (* ?x583 ?x583 ?x70 ?x70 ?x70)))
 (let ((?x69 (+ c k)))
 (let ((?x315 (+ 6 m)))
 (let ((?x229 (* ?x583 ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x295 (* ?x583 ?x70 ?x70 ?x70 ?x69 ?x69 ?x69)))
 (let ((?x285 (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x75 (* ?x70 ?x70 ?x70)))
 (let ((?x163 (+ (* (- 1) (* ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)) (* (- 1) (* ?x70 ?x70 ?x70 ?x70)) ?x75 (* (- 3) (* ?x583 ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)) (* (- 3) (* ?x583 ?x315 ?x315 ?x70 ?x70 ?x70 ?x69)) (* (- 3) (* ?x583 ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)) (* (- 1) (* ?x583 ?x70 ?x70 ?x69 ?x69 ?x69)) ?x285 ?x295 (* (- 3) ?x229) (* 3 (* ?x583 ?x70 ?x70 ?x70)) (* 3 ?x145))))
 (let (($x490 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x530 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x199 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m (* (- 6) n)) 6)))
 (let (($x868 (and $x131 (= ?x199 (- 4)) $x530 $x490 (not (= ?x163 0)))))
 (let ((?x77 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x73 (* ?x70 ?x70 ?x70 ?x70)))
 (let ((?x82 (- (+ (- (* (- 1) ?x69 ?x70 ?x70 ?x70 ?x71 ?x71) ?x73) ?x75) (* 3 ?x69 ?x69 ?x69 ?x70 ?x70 ?x77 ?x77 ?x77))))
 (let ((?x84 (- (- ?x82 (* 3 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x77)) (* 3 ?x69 ?x69 ?x69 ?x70 ?x70 ?x77 ?x77))))
 (let ((?x88 (+ (- ?x84 (* ?x69 ?x69 ?x69 ?x70 ?x70 ?x77)) (* ?x69 ?x70 ?x70 ?x70 ?x70 ?x71 ?x71) (* ?x69 ?x69 ?x69 ?x70 ?x70 ?x70 ?x77))))
 (let ((?x93 (+ (- ?x88 (* 3 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x77 ?x77)) (* 3 ?x70 ?x70 ?x70 ?x77) (* 3 ?x70 ?x70 ?x70 ?x77 ?x77))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x97 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x93 0))))))
 (rewrite (= $x97 $x868)))))))))))))))))))))))))))))))))
 ))
 (let ((@x99 (asserted $x98)))
 (let ((@x336 (mp (mp @x99 (quant-intro (proof-bind ?x497) (= $x98 $x494)) $x494) (rewrite (= $x494 $x494)) $x494)))
 (let ((@x450 (mp (mp @x336 (quant-intro (proof-bind ?x259) (= $x494 $x303)) $x303) (quant-intro (proof-bind ?x440) (= $x303 $x525)) $x525)))
 (let ((@x827 (mp (mp~ @x450 (sk (~ $x525 $x625)) $x625) (rewrite (= $x625 $x641)) $x641)))
 (let ((@x593 (and-elim @x827 $x115)))
 (let ((@x152 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x115) $x358)) @x593 $x358)))
 (let (($x807 (>= ?x436 (- 1))))
 (let ((@x547 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x115) $x807)) @x593 $x807)))
 (let (($x645 (<= ?x603 (- 4))))
 (let ((@x328 (and-elim @x827 $x676)))
 (let ((@x853 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x676) $x645)) @x328 $x645)))
 (let (($x774 (>= ?x603 (- 4))))
 (let ((@x446 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x676) $x774)) @x328 $x774)))
 (let (($x743 (<= ?x524 6)))
 (let ((@x338 (and-elim @x827 $x190)))
 (let ((@x451 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x190) $x743)) @x338 $x743)))
 (let (($x531 (>= ?x524 6)))
 (let ((@x627 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x190) $x531)) @x338 $x531)))
 (let (($x859 (<= ?x362 (- 1))))
 (let ((@x326 (and-elim @x827 $x330)))
 (let ((@x636 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x330) $x859)) @x326 $x859)))
 (let (($x867 (>= ?x362 (- 1))))
 (let ((@x154 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x330) $x867)) @x326 $x867)))
 (let (($x143 (not (<= ?x368 0))))
 (let (($x861 (>= ?x368 0)))
 (let ((@x234 ((_ th-lemma arith) (hypothesis (not $x861)) @x627 @x451 @x547 @x152 @x446 @x853 @x547 @x152 @x627 @x451 @x547 @x152 @x547 @x152 @x154 @x636 @x446 @x853 @x446 @x853 @x547 @x152 @x627 @x451 @x446 @x853 @x547 @x152 false)))
 (let ((@x572 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x281 $x143 (not $x861))) (and-elim @x827 $x324) (or $x143 (not $x861)))))
 ((_ th-lemma arith) (unit-resolution @x572 (lemma @x234 $x861) $x143) @x547 @x152 @x627 @x451 @x627 @x451 @x547 @x152 @x154 @x636 @x547 @x152 @x627 @x451 @x547 @x152 @x446 @x853 @x547 @x152 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        29
 :arith-branch-var          2
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-gcd-tests           13
 :arith-gomory-cuts         1
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             262
 :arith-nonlinear-bounds    10
 :arith-nonlinear-horner    19
 :arith-num-rows            10
 :arith-patches             4
 :arith-pivots              12
 :arith-row-summations      18
 :arith-tableau-max-columns 60
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 24
 :del-clause                16
 :final-checks              8
 :max-memory                3.75
 :memory                    3.19
 :mk-bool-var               45
 :mk-clause                 16
 :num-allocs                1557210
 :num-checks                1
 :propagations              10
 :rlimit-count              14175
 :time                      0.01
 :total-time                0.02)
