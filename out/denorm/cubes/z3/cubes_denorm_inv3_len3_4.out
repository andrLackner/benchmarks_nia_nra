unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(declare-fun n!0 () Int)
(proof
(let ((?x574 (* (- 1) (* k!2 k!2 k!2))))
 (let ((?x181 (* (- 1) (* c!3 k!2 k!2))))
 (let ((?x285 (* (- 1) (* k!2 k!2))))
 (let ((?x459 (+ c!3 k!2)))
 (let ((?x532 (+ m!1 k!2)))
 (let ((?x419 (+ 6 m!1)))
 (let ((?x420 (+ 1 n!0)))
 (let ((?x328 (* (- 1) (* c!3 m!1 m!1))))
 (let ((?x110 (* (- 1) (* m!1 m!1))))
 (let ((?x485 (+ ?x110 (* (- 2) (* m!1 k!2 k!2)) (* (- 2) (* c!3 n!0 m!1 k!2)) (* (- 1) (* n!0 k!2 k!2)) ?x328 (* (- 1) (* c!3 n!0 k!2 k!2)) (* (- 2) (* n!0 m!1 k!2)) (* (- 2) (* m!1 k!2)) (* (- 1) (* n!0 m!1 m!1)) (* (- 1) (* n!0 k!2 k!2 k!2)) (* (- 1) (* m!1 m!1 k!2)) (* ?x420 ?x419 ?x419 ?x532 ?x532 ?x459) ?x285 (* (- 2) (* n!0 m!1 k!2 k!2)) (* (- 1) (* c!3 n!0 m!1 m!1)) (* (- 1) (* n!0 m!1 m!1 k!2)) ?x181 ?x574 (* (- 2) (* c!3 m!1 k!2)))))
 (let (($x1864 (<= ?x485 0)))
 (let ((?x489 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x444 (<= ?x489 (- 6))))
 (let (($x536 (= ?x489 (- 6))))
 (let ((?x113 (* (- 3) k!2)))
 (let ((?x112 (* 2 n!0)))
 (let ((?x336 (* n!0 k!2)))
 (let ((?x106 (* (- 3) c!3)))
 (let ((?x271 (* ?x485 (+ 3 ?x106 ?x336 ?x112 ?x113 (* n!0 m!1)))))
 (let (($x471 (= ?x271 0)))
 (let (($x275 (not $x471)))
 (let ((?x479 (+ (* 3 (* n!0 n!0)) (* 3 n!0) (* (- 1) k!2))))
 (let (($x495 (= ?x479 (- 1))))
 (let ((?x293 (* (- 2) n!0)))
 (let ((?x562 (* 3 c!3)))
 (let ((?x166 (+ ?x562 (* (- 1) ?x336) ?x293 k!2)))
 (let (($x161 (= ?x166 1)))
 (let ((?x564 (* 9 (* c!3 n!0))))
 (let ((?x470 (* 5 k!2)))
 (let ((?x167 (* (- 9) n!0)))
 (let ((?x431 (* 18 c!3)))
 (let ((?x191 (+ ?x431 ?x167 ?x470 ?x285 ?x564)))
 (let (($x175 (= ?x191 4)))
 (let (($x160 (and $x536 $x175 $x161 $x495 $x275)))
 (let ((?x603 (+ ?x285 (* ?x420 ?x419 ?x419 (+ k!2 m!1) (+ k!2 m!1) ?x459) (* (- 1) (* k!2 m!1 m!1)) ?x328 (* (- 2) (* k!2 k!2 m!1)) (* (- 2) (* c!3 k!2 m!1)) ?x574 ?x181 (* (- 1) (* k!2 m!1 m!1 n!0)) (* (- 1) (* c!3 m!1 m!1 n!0)) (* (- 2) (* k!2 k!2 m!1 n!0)) (* (- 2) (* c!3 k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 k!2 n!0)) (* (- 1) (* c!3 k!2 k!2 n!0)) (* (- 2) (* k!2 m!1)) (* (- 1) (* m!1 m!1 n!0)) (* (- 2) (* k!2 m!1 n!0)) (* (- 1) (* k!2 k!2 n!0)) ?x110)))
 (let (($x214 (= (* ?x603 (+ 3 ?x106 ?x113 ?x112 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let (($x604 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x431 ?x470 ?x167 ?x285 ?x564) 4) (= (+ ?x562 k!2 ?x293 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x214))))
 (let (($x434 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x407 (+ 3 ?x219 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x593 (* (- 1) (* m m))))
 (let ((?x592 (* (- 1) (* k k n))))
 (let ((?x600 (* (- 2) (* k m n))))
 (let ((?x590 (* (- 1) (* m m n))))
 (let ((?x597 (* (- 2) (* k m))))
 (let ((?x550 (* (- 1) (* c k k n))))
 (let ((?x551 (* (- 1) (* k k k n))))
 (let ((?x537 (* (- 2) (* c k m n))))
 (let ((?x540 (* (- 2) (* k k m n))))
 (let ((?x554 (* (- 1) (* c m m n))))
 (let ((?x555 (* (- 1) (* k m m n))))
 (let ((?x556 (* (- 1) (* c k k))))
 (let ((?x557 (* (- 1) (* k k k))))
 (let ((?x543 (* (- 2) (* c k m))))
 (let ((?x546 (* (- 2) (* k k m))))
 (let ((?x560 (* (- 1) (* c m m))))
 (let ((?x561 (* (- 1) (* k m m))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x263 (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x530 (+ ?x209 ?x263 ?x561 ?x560 ?x546 ?x543 ?x557 ?x556 ?x555 ?x554 ?x540 ?x537 ?x551 ?x550 ?x597 ?x590 ?x600 ?x592 ?x593)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 $x206 $x258 $x296 (not (= (* ?x530 ?x407) 0))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x240 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x249 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x148 (* (- 1) (* (+ 1 n) (+ k m) (+ k m) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x263 (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68)))
 (let (($x480 (not (= (* (+ ?x263 ?x148 (* (- 1) (* ?x339 ?x71 ?x71))) ?x249) 0))))
 (let (($x421 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x502 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x502 $x421 $x480))))))))))))))))))) :qid k!34))
 ))
 (let ((?x254 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x407 (+ 3 ?x219 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x593 (* (- 1) (* m m))))
 (let ((?x592 (* (- 1) (* k k n))))
 (let ((?x600 (* (- 2) (* k m n))))
 (let ((?x590 (* (- 1) (* m m n))))
 (let ((?x597 (* (- 2) (* k m))))
 (let ((?x550 (* (- 1) (* c k k n))))
 (let ((?x551 (* (- 1) (* k k k n))))
 (let ((?x537 (* (- 2) (* c k m n))))
 (let ((?x540 (* (- 2) (* k k m n))))
 (let ((?x554 (* (- 1) (* c m m n))))
 (let ((?x555 (* (- 1) (* k m m n))))
 (let ((?x556 (* (- 1) (* c k k))))
 (let ((?x557 (* (- 1) (* k k k))))
 (let ((?x543 (* (- 2) (* c k m))))
 (let ((?x546 (* (- 2) (* k k m))))
 (let ((?x560 (* (- 1) (* c m m))))
 (let ((?x561 (* (- 1) (* k m m))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x263 (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x530 (+ ?x209 ?x263 ?x561 ?x560 ?x546 ?x543 ?x557 ?x556 ?x555 ?x554 ?x540 ?x537 ?x551 ?x550 ?x597 ?x590 ?x600 ?x592 ?x593)))
 (let (($x296 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x258 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x206 (= (+ ?x40 ?x44 ?x208 ?x209 (* 9 (* c n))) 4)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x475 (and $x122 $x206 $x258 $x296 (not (= (* ?x530 ?x407) 0)))))
 (let ((?x199 (+ ?x263 (* (- 1) (* ?x339 ?x71 ?x71 ?x68)) (* (- 1) (* ?x339 ?x71 ?x71)))))
 (let ((?x211 (* ?x199 (+ 3 ?x219 (* (- 4) k) (* ?x339 ?x71) (* (- 1) m) ?x59))))
 (let (($x480 (not (= ?x211 0))))
 (let (($x421 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x502 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x320 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x502 $x421 $x480)))
 (rewrite (= $x320 $x475))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x486 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x249 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x148 (* (- 1) (* (+ 1 n) (+ k m) (+ k m) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x263 (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68)))
 (let (($x480 (not (= (* (+ ?x263 ?x148 (* (- 1) (* ?x339 ?x71 ?x71))) ?x249) 0))))
 (let (($x421 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x326 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (and $x122 (= ?x326 (- 4)) (= (+ ?x219 (* n k) (* (- 1) k) ?x59) (- 1)) $x421 $x480)))))))))))))))) :qid k!34))
 ))
 (let ((?x241 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x249 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x148 (* (- 1) (* (+ 1 n) (+ k m) (+ k m) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x263 (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68)))
 (let (($x480 (not (= (* (+ ?x263 ?x148 (* (- 1) (* ?x339 ?x71 ?x71))) ?x249) 0))))
 (let (($x421 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x502 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x209 (* (- 1) ?x49)))
 (let ((?x208 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x320 (and $x122 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x208 ?x209) 4) $x502 $x421 $x480)))
 (let ((?x48 (* 9 n)))
 (let ((?x326 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x606 (and $x122 (= ?x326 (- 4)) (= (+ ?x219 (* n k) (* (- 1) k) ?x59) (- 1)) $x421 $x480)))
 (rewrite (= $x606 $x320)))))))))))))))))))))))))
 ))
 (let (($x89 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x78 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (- (- (* ?x68 ?x71 ?x71 ?x78 ?x78 ?x72) (* ?x68 ?x71 ?x71 ?x72)) (* ?x71 ?x71 ?x72))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 ?x83) 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x488 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x219 (* (- 3) c)))
 (let ((?x249 (+ 3 ?x219 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x148 (* (- 1) (* (+ 1 n) (+ k m) (+ k m) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x412 (+ 6 m)))
 (let ((?x339 (+ 1 n)))
 (let ((?x263 (* ?x339 ?x412 ?x412 ?x71 ?x71 ?x68)))
 (let (($x480 (not (= (* (+ ?x263 ?x148 (* (- 1) (* ?x339 ?x71 ?x71))) ?x249) 0))))
 (let (($x421 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x326 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x122 (= (+ m (* (- 6) n)) 6)))
 (let (($x606 (and $x122 (= ?x326 (- 4)) (= (+ ?x219 (* n k) (* (- 1) k) ?x59) (- 1)) $x421 $x480)))
 (let ((?x82 (- (* ?x68 ?x71 ?x71 (+ m 6) (+ m 6) (+ n 1)) (* ?x68 ?x71 ?x71 (+ n 1)))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let (($x87 (or (not (= (* ?x77 (- ?x82 (* ?x71 ?x71 (+ n 1)))) 0)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x88 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 $x87)))
 (rewrite (= $x88 $x606)))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x231 (mp (mp @x90 (quant-intro (proof-bind ?x488) (= $x89 $x486)) $x486) (rewrite (= $x486 $x486)) $x486)))
 (let ((@x168 (mp (mp @x231 (quant-intro (proof-bind ?x241) (= $x486 $x240)) $x240) (quant-intro (proof-bind ?x254) (= $x240 $x434)) $x434)))
 (let ((@x277 (mp (mp~ @x168 (sk (~ $x434 $x604)) $x604) (rewrite (= $x604 $x160)) $x160)))
 (let ((@x217 (and-elim @x277 $x536)))
 (let ((@x137 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x536) $x444)) @x217 $x444)))
 (let (($x149 (>= ?x489 (- 6))))
 (let ((@x147 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x536) $x149)) @x217 $x149)))
 (let (($x273 (<= ?x479 (- 1))))
 (let ((@x201 (and-elim @x277 $x495)))
 (let ((@x255 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x273)) @x201 $x273)))
 (let (($x457 (>= ?x479 (- 1))))
 (let ((@x250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x495) $x457)) @x201 $x457)))
 (let (($x272 (<= ?x166 1)))
 (let ((@x595 (and-elim @x277 $x161)))
 (let ((@x304 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x161) $x272)) @x595 $x272)))
 (let (($x270 (>= ?x166 1)))
 (let ((@x253 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x161) $x270)) @x595 $x270)))
 (let ((@x1953 (hypothesis (not $x1864))))
 (let (($x1950 (not (<= ?x271 0))))
 (let (($x418 (>= ?x271 0)))
 (let (($x100 (not $x418)))
 (let ((@x558 (hypothesis $x100)))
 (let ((@x1862 ((_ th-lemma arith) @x558 @x1953 @x250 @x255 @x147 @x137 @x250 @x255 @x147 @x137 @x147 @x137 @x253 @x304 @x147 @x137 @x147 @x137 @x250 @x255 @x253 @x304 @x250 @x255 @x250 @x255 @x147 @x137 @x253 @x304 @x250 @x255 false)))
 (let (($x1857 (>= ?x485 0)))
 (let (($x276 (<= ?x191 4)))
 (let ((@x602 (and-elim @x277 $x175)))
 (let ((@x127 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x175) $x276)) @x602 $x276)))
 (let (($x482 (>= ?x191 4)))
 (let ((@x130 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x175) $x482)) @x602 $x482)))
 (let ((@x2000 (hypothesis (not $x1857))))
 (let ((@x2022 ((_ th-lemma arith) @x558 @x2000 @x147 @x137 @x147 @x137 @x253 @x304 @x147 @x137 @x147 @x137 @x130 @x127 @x253 @x304 @x147 @x137 @x250 @x255 @x147 @x137 false)))
 (let ((@x1998 ((_ th-lemma arith farkas 1 1 1) @x558 (unit-resolution (lemma @x2022 (or $x1857 $x418)) @x558 $x1857) (unit-resolution (lemma @x1862 (or $x1864 $x418)) @x558 $x1864) false)))
 (let ((@x2001 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x471 $x1950 $x100)) (and-elim @x277 $x275) (or $x1950 $x100))))
 (let ((@x2006 (unit-resolution @x2001 (lemma @x1998 $x418) $x1950)))
 (let ((@x2013 ((_ th-lemma arith) @x2006 @x1953 @x147 @x137 @x147 @x137 @x253 @x304 @x147 @x137 @x253 @x304 @x147 @x137 @x250 @x255 @x147 @x137 false)))
 (let ((@x1947 ((_ th-lemma arith) @x2006 @x2000 @x147 @x137 @x147 @x137 @x147 @x137 @x253 @x304 @x147 @x137 @x147 @x137 @x130 @x127 @x253 @x304 @x147 @x137 @x250 @x255 @x147 @x137 false)))
 ((_ th-lemma arith farkas 1 1 1) @x2006 (lemma @x1947 $x1857) (lemma @x2013 $x1864) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 234
 :arith-assert-diseq        20
 :arith-assert-lower        3366
 :arith-assert-upper        1869
 :arith-bound-prop          23
 :arith-branch-var          45
 :arith-conflicts           101
 :arith-eq-adapter          16
 :arith-fixed-eqs           361
 :arith-gcd-tests           424
 :arith-gomory-cuts         33
 :arith-grobner             141
 :arith-ineq-splits         45
 :arith-max-min             14843
 :arith-nonlinear-bounds    949
 :arith-nonlinear-horner    1630
 :arith-num-rows            24
 :arith-offset-eqs          15
 :arith-patches             117
 :arith-patches_succ        27
 :arith-pivots              3322
 :arith-pseudo-nonlinear    643
 :arith-row-summations      24403
 :arith-tableau-max-columns 77
 :arith-tableau-max-rows    24
 :conflicts                 109
 :decisions                 549
 :del-clause                226
 :final-checks              379
 :max-memory                4.57
 :memory                    3.31
 :minimized-lits            15
 :mk-bool-var               544
 :mk-clause                 513
 :num-allocs                229774720
 :num-checks                1
 :propagations              1013
 :restarts                  1
 :rlimit-count              3151738
 :time                      1.68
 :total-time                1.68)
