unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun u!1 () Int)
(declare-fun r!2 () Int)
(proof
(let ((?x353 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x412 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 (* (- 4) r!2) (* (- 2) u!1) (* 2 v!0) ?x353 (* (- 1) (* v!0 v!0)))))
 (let (($x141 (>= ?x412 0)))
 (let (($x260 (= ?x412 0)))
 (let ((?x522 (* v!0 v!0)))
 (let ((?x307 (* (- 1) ?x353)))
 (let ((?x226 (* (- 2) v!0)))
 (let ((?x169 (* 2 u!1)))
 (let ((?x301 (* 4 r!2)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x192 (+ ?x102 ?x118 ?x41 ?x46 ?x194 ?x301 ?x169 ?x226 ?x307 ?x522)))
 (let ((?x295 (* r!2 r!2 u!1 u!1)))
 (let ((?x212 (* (- 2) (* r!2 u!1 u!1 v!0))))
 (let ((?x238 (* u!1 u!1 v!0 v!0)))
 (let ((?x270 (* (- 1) v!0)))
 (let ((?x439 (* (+ (- 2) ?x270 ?x238 ?x212 ?x295) ?x192)))
 (let (($x468 (= ?x439 0)))
 (let (($x461 (not $x468)))
 (let ((?x171 (* 4 (* r!2 r!2))))
 (let ((?x264 (* 8 (* r!2 u!1 u!1))))
 (let ((?x275 (* 4 ?x353)))
 (let ((?x131 (* 2 (* r!2 u!1 u!1 u!1))))
 (let ((?x460 (* 4 (* u!1 u!1 u!1))))
 (let ((?x323 (* 8 (* r!2 u!1))))
 (let ((?x476 (* 4 (* r!2 r!2 u!1))))
 (let ((?x119 (* u!1 u!1 u!1 u!1)))
 (let ((?x136 (* (+ ?x119 ?x476 ?x270 ?x323 ?x460 ?x131 ?x295 ?x275 ?x264 ?x171) ?x192)))
 (let (($x266 (= ?x136 0)))
 (let (($x313 (or (not $x266) $x461)))
 (let (($x138 (and $x260 $x313)))
 (let ((?x262 (+ ?x301 ?x169 ?x226 ?x102 ?x118 ?x41 ?x307 ?x522 ?x46 ?x194)))
 (let (($x144 (= (* (+ ?x270 ?x275 ?x295 ?x131 ?x119 ?x171 ?x323 ?x476 ?x264 ?x460) ?x262) 0)))
 (let (($x245 (or (not $x144) (not (= (* (+ (- 2) ?x270 ?x295 ?x212 ?x238) ?x262) 0)))))
 (let (($x186 (and (= ?x262 0) $x245)))
 (let (($x404 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x339 (* r r u u)))
 (let ((?x99 (* (- 1) v)))
 (let ((?x382 (+ (- 2) ?x99 ?x339 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x528 (+ ?x99 (* 4 ?x43) ?x339 (* 2 (* r u u u)) (* u u u u) (* 4 (* r r)) (* 8 (* r u)) (* 4 (* r r u)) (* 8 (* r u u)) (* 4 (* u u u)))))
 (let (($x205 (= ?x200 0)))
 (and $x205 (or (not (= (* ?x528 ?x200) 0)) (not (= (* ?x382 ?x200) 0)))))))))))))))))))))) :qid k!28))
 ))
 (let (($x111 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x511 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x99 (* (- 1) v)))
 (let (($x128 (= (* (+ (- 2) ?x99 (* (+ r ?x99) (+ r ?x99) u u)) ?x511) 0)))
 (let ((?x45 (* v v)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x300 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x255 (+ ?x99 (* (+ 2 u) (+ 2 u) (+ r u) (+ r u)))))
 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= (* ?x255 ?x300) 0)) (not $x128)))))))))))))))))))) :qid k!28))
 ))
 (let ((?x146 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x200 (+ ?x28 ?x36 ?x148 ?x102 ?x118 ?x41 ?x172 ?x45 ?x46 ?x194)))
 (let ((?x339 (* r r u u)))
 (let ((?x99 (* (- 1) v)))
 (let ((?x382 (+ (- 2) ?x99 ?x339 (* (- 2) (* r u u v)) (* u u v v))))
 (let ((?x528 (+ ?x99 (* 4 ?x43) ?x339 (* 2 (* r u u u)) (* u u u u) (* 4 (* r r)) (* 8 (* r u)) (* 4 (* r r u)) (* 8 (* r u u)) (* 4 (* u u u)))))
 (let (($x205 (= ?x200 0)))
 (let (($x286 (and $x205 (or (not (= (* ?x528 ?x200) 0)) (not (= (* ?x382 ?x200) 0))))))
 (let ((?x511 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let (($x128 (= (* (+ (- 2) ?x99 (* (+ r ?x99) (+ r ?x99) u u)) ?x511) 0)))
 (let ((?x300 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x255 (+ ?x99 (* (+ 2 u) (+ 2 u) (+ r u) (+ r u)))))
 (let (($x168 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= (* ?x255 ?x300) 0)) (not $x128)))))
 (rewrite (= $x168 $x286)))))))))))))))))))))))))))
 ))
 (let (($x94 (exists ((r Int) (u Int) (v Int) )(! (let ((?x88 (+ (* (- 1) v) (* (+ r u) (+ r u) (+ u 2) (+ u 2)))))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x69 (+ (* (- 1) (+ v 2)) (* (- r v) (- r v) u u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x92 (or (not (= (* (- ?x63 ?x48) ?x69) 0)) (not (= (* (- ?x84 ?x48) ?x88) 0)))))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) $x92)))))))))))))))) :qid k!28))
 ))
 (let ((?x133 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x194 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x43 (* u u)))
 (let ((?x172 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x36 (* 2 u)))
 (let ((?x118 (* (- 2) u00)))
 (let ((?x102 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x511 (+ (- 4) ?x28 (* (- 6) v) ?x102 ?x118 ?x36 ?x41 ?x172 (* (+ 2 v) (+ 2 v)) ?x46 ?x194)))
 (let ((?x99 (* (- 1) v)))
 (let (($x128 (= (* (+ (- 2) ?x99 (* (+ r ?x99) (+ r ?x99) u u)) ?x511) 0)))
 (let ((?x45 (* v v)))
 (let ((?x148 (* (- 2) v)))
 (let ((?x300 (+ 4 ?x28 (* 6 u) ?x102 ?x118 ?x148 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x194)))
 (let ((?x255 (+ ?x99 (* (+ 2 u) (+ 2 u) (+ r u) (+ r u)))))
 (let (($x168 (and (= (+ ?x28 ?x102 ?x118 ?x36 ?x148 ?x41 ?x172 ?x45 ?x46 ?x194) 0) (or (not (= (* ?x255 ?x300) 0)) (not $x128)))))
 (let ((?x88 (+ (* (- 1) v) (* (+ r u) (+ r u) (+ u 2) (+ u 2)))))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 (+ r u)) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x69 (+ (* (- 1) (+ v 2)) (* (- r v) (- r v) u u))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x92 (or (not (= (* (- ?x63 ?x48) ?x69) 0)) (not (= (* (- ?x84 ?x48) ?x88) 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x93 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x92)))
 (rewrite (= $x93 $x168)))))))))))))))))))))))))))))))
 ))
 (let ((@x95 (asserted $x94)))
 (let ((@x519 (mp (mp @x95 (quant-intro (proof-bind ?x133) (= $x94 $x111)) $x111) (rewrite (= $x111 $x111)) $x111)))
 (let ((@x160 (mp~ (mp @x519 (quant-intro (proof-bind ?x146) (= $x111 $x404)) $x404) (sk (~ $x404 $x186)) $x186)))
 (let ((@x440 (mp @x160 (rewrite (= $x186 $x138)) $x138)))
 (let ((@x467 (and-elim @x440 $x260)))
 (let ((@x400 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x260) $x141)) @x467 $x141)))
 (let (($x183 (<= ?x412 0)))
 (let ((@x204 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x260) $x183)) @x467 $x183)))
 (let (($x179 (not (<= ?x439 0))))
 (let (($x479 (>= ?x439 0)))
 (let (($x145 (>= ?x136 0)))
 (let (($x443 (<= ?x136 0)))
 (let ((@x187 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x266 (not $x443) (not $x145))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x443)) @x204 @x400 false) $x443) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x145)) @x204 @x400 false) $x145) $x266)))
 (let ((@x473 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x468 $x179 (not $x479))) (unit-resolution (and-elim @x440 $x313) @x187 $x461) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x479)) @x204 @x400 false) $x479) $x179)))
 ((_ th-lemma arith farkas 1 1 1) @x473 @x204 @x400 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        47
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             184
 :arith-nonlinear-bounds    30
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 32
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.60
 :memory                    3.10
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1108581
 :num-checks                1
 :propagations              14
 :rlimit-count              2936
 :time                      0.02
 :total-time                0.03)
