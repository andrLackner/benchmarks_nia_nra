unsat
((set-logic NIA)
(declare-fun y!0 () Int)
(declare-fun x!1 () Int)
(proof
(let ((?x384 (+ y00 x00 (* (- 1) x!1) (* (- 1) y!0))))
 (let (($x288 (<= ?x384 0)))
 (let (($x383 (= ?x384 0)))
 (let ((?x150 (* (- 1) (* y00 y!0))))
 (let ((?x345 (* y!0 y!0)))
 (let ((?x433 (* (- 1) (* y00 x!1 x!1 x!1))))
 (let ((?x430 (* (- 1) (* x00 y!0))))
 (let ((?x85 (* (- 2) y!0)))
 (let ((?x183 (* x!1 x!1 x!1 x!1)))
 (let ((?x151 (* x!1 x!1 x!1 y!0)))
 (let ((?x84 (* (- 1) (* x00 x!1 x!1 x!1))))
 (let ((?x218 (* (- 2) x!1)))
 (let ((?x217 (* 2 x00)))
 (let ((?x330 (* 2 y00)))
 (let ((?x200 (+ ?x330 ?x217 ?x218 ?x84 ?x151 ?x183 ?x85 (* 8 (* x!1 y!0)) (* (- 7) (* y00 x!1)) ?x430 (* 5 (* y00 x!1 x!1)) ?x433 (* (- 5) (* x!1 x!1 x!1)) ?x345 (* 7 (* x!1 x!1)) (* (- 7) (* x00 x!1)) (* 5 (* x00 x!1 x!1)) ?x150 (* (- 5) (* x!1 x!1 y!0)))))
 (let (($x226 (= ?x200 0)))
 (let (($x321 (not $x226)))
 (let ((?x458 (* x!1 x!1 y!0)))
 (let ((?x364 (* x00 x!1)))
 (let ((?x317 (* x!1 x!1 x!1)))
 (let ((?x278 (* y00 x!1)))
 (let ((?x71 (+ ?x330 ?x217 ?x218 ?x84 ?x151 ?x183 ?x85 ?x278 ?x430 (* (- 1) (* y00 x!1 x!1)) ?x433 ?x317 ?x345 (* (- 1) (* x!1 x!1)) ?x364 (* (- 1) (* x00 x!1 x!1)) ?x150 ?x458)))
 (let (($x387 (= ?x71 0)))
 (let (($x124 (or (not $x387) $x321)))
 (let (($x355 (and $x383 $x124)))
 (let ((?x248 (* x!1 x!1 x!1 x00)))
 (let ((?x114 (* x!1 x!1 x!1 y00)))
 (let ((?x105 (* (- 1) ?x183)))
 (let ((?x176 (* (- 1) ?x151)))
 (let ((?x167 (* y!0 x00)))
 (let ((?x223 (* y!0 y00)))
 (let ((?x346 (* (- 1) ?x345)))
 (let ((?x166 (* (- 2) x00)))
 (let ((?x148 (* (- 2) y00)))
 (let ((?x131 (* 2 y!0)))
 (let ((?x445 (* 2 x!1)))
 (let ((?x252 (+ ?x445 ?x131 ?x148 ?x166 (* (- 5) (* x!1 x!1 x00)) (* 7 (* x!1 x00)) (* 5 ?x458) (* (- 7) (* x!1 x!1)) (* 5 ?x317) (* (- 8) (* x!1 y!0)) (* 7 (* x!1 y00)) (* (- 5) (* x!1 x!1 y00)) ?x346 ?x223 ?x167 ?x176 ?x105 ?x114 ?x248)))
 (let ((?x340 (* x!1 x!1 y00)))
 (let ((?x356 (* x!1 x!1)))
 (let ((?x446 (* x!1 x!1 x00)))
 (let ((?x207 (+ ?x445 ?x131 ?x148 ?x166 ?x446 (* (- 1) (* x!1 x00)) (* (- 1) ?x458) ?x356 (* (- 1) ?x317) (* (- 1) (* x!1 y00)) ?x340 ?x346 ?x223 ?x167 ?x176 ?x105 ?x114 ?x248)))
 (let (($x255 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (or (not (= ?x207 0)) (not (= ?x252 0))))))
 (let (($x208 (exists ((x Int) (y Int) )(! (let ((?x404 (* x x x x00)))
 (let ((?x396 (* x x x y00)))
 (let ((?x388 (* (- 1) (* x x x x))))
 (let ((?x378 (* (- 1) (* x x x y))))
 (let ((?x362 (* y x00)))
 (let ((?x338 (* y y00)))
 (let ((?x314 (* (- 1) (* y y))))
 (let ((?x166 (* (- 2) x00)))
 (let ((?x148 (* (- 2) y00)))
 (let ((?x127 (* 2 y)))
 (let ((?x227 (* 2 x)))
 (let ((?x414 (+ ?x227 ?x127 ?x148 ?x166 (* (- 5) (* x x x00)) (* 7 (* x x00)) (* 5 (* x x y)) (* (- 7) (* x x)) (* 5 (* x x x)) (* (- 8) (* x y)) (* 7 (* x y00)) (* (- 5) (* x x y00)) ?x314 ?x338 ?x362 ?x378 ?x388 ?x396 ?x404)))
 (let ((?x194 (* x x y00)))
 (let ((?x160 (* x x x)))
 (let ((?x201 (* (- 1) ?x160)))
 (let ((?x158 (* x x)))
 (let ((?x99 (* x x x00)))
 (let ((?x517 (+ ?x227 ?x127 ?x148 ?x166 ?x99 (* (- 1) (* x x00)) (* (- 1) (* x x y)) ?x158 ?x201 (* (- 1) (* x y00)) ?x194 ?x314 ?x338 ?x362 ?x378 ?x388 ?x396 ?x404)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x88 (+ x y ?x67 ?x74)))
 (let (($x93 (= ?x88 0)))
 (and $x93 (or (not (= ?x517 0)) (not (= ?x414 0)))))))))))))))))))))))))) :qid k!27))
 ))
 (let (($x141 (exists ((x Int) (y Int) )(! (let ((?x135 (* (- 1) y)))
 (let ((?x75 (+ 1 ?x135 (* (- 1) (* (+ 1 x) (+ 1 x) (+ 1 x))) (* 2 (* (+ 1 x) (+ 1 x))))))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x102 (+ x ?x67 ?x74 y)))
 (let ((?x335 (+ (- 1) ?x135 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x))) (* 2 (* (+ (- 1) x) (+ (- 1) x))))))
 (and (= ?x102 0) (or (not (= (* ?x102 ?x335) 0)) (not (= (* ?x102 ?x75) 0)))))))))) :qid k!27))
 ))
 (let ((?x221 (lambda ((x Int) (y Int) )(let ((?x404 (* x x x x00)))
 (let ((?x396 (* x x x y00)))
 (let ((?x388 (* (- 1) (* x x x x))))
 (let ((?x378 (* (- 1) (* x x x y))))
 (let ((?x362 (* y x00)))
 (let ((?x338 (* y y00)))
 (let ((?x314 (* (- 1) (* y y))))
 (let ((?x166 (* (- 2) x00)))
 (let ((?x148 (* (- 2) y00)))
 (let ((?x127 (* 2 y)))
 (let ((?x227 (* 2 x)))
 (let ((?x414 (+ ?x227 ?x127 ?x148 ?x166 (* (- 5) (* x x x00)) (* 7 (* x x00)) (* 5 (* x x y)) (* (- 7) (* x x)) (* 5 (* x x x)) (* (- 8) (* x y)) (* 7 (* x y00)) (* (- 5) (* x x y00)) ?x314 ?x338 ?x362 ?x378 ?x388 ?x396 ?x404)))
 (let ((?x194 (* x x y00)))
 (let ((?x160 (* x x x)))
 (let ((?x201 (* (- 1) ?x160)))
 (let ((?x158 (* x x)))
 (let ((?x99 (* x x x00)))
 (let ((?x517 (+ ?x227 ?x127 ?x148 ?x166 ?x99 (* (- 1) (* x x00)) (* (- 1) (* x x y)) ?x158 ?x201 (* (- 1) (* x y00)) ?x194 ?x314 ?x338 ?x362 ?x378 ?x388 ?x396 ?x404)))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x88 (+ x y ?x67 ?x74)))
 (let (($x93 (= ?x88 0)))
 (let (($x419 (and $x93 (or (not (= ?x517 0)) (not (= ?x414 0))))))
 (let ((?x135 (* (- 1) y)))
 (let ((?x75 (+ 1 ?x135 (* (- 1) (* (+ 1 x) (+ 1 x) (+ 1 x))) (* 2 (* (+ 1 x) (+ 1 x))))))
 (let ((?x102 (+ x ?x67 ?x74 y)))
 (let ((?x335 (+ (- 1) ?x135 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x))) (* 2 (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x351 (and (= ?x102 0) (or (not (= (* ?x102 ?x335) 0)) (not (= (* ?x102 ?x75) 0))))))
 (rewrite (= $x351 $x419)))))))))))))))))))))))))))))))
 ))
 (let (($x64 (exists ((x Int) (y Int) )(! (let ((?x56 (- (* (- 1) (- y 1)) (* (+ x 1) (+ x 1) (+ x 1)))))
 (let ((?x59 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (+ ?x56 (* 2 (+ x 1) (+ x 1))))))
 (let ((?x42 (- (* (- 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1)))))
 (let ((?x46 (* (+ (- (- (- x 1) y00) x00) y 1) (+ ?x42 (* 2 (- x 1) (- x 1))))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x59 0)))))))) :qid k!27))
 ))
 (let ((?x228 (lambda ((x Int) (y Int) )(let ((?x135 (* (- 1) y)))
 (let ((?x75 (+ 1 ?x135 (* (- 1) (* (+ 1 x) (+ 1 x) (+ 1 x))) (* 2 (* (+ 1 x) (+ 1 x))))))
 (let ((?x74 (* (- 1) x00)))
 (let ((?x67 (* (- 1) y00)))
 (let ((?x102 (+ x ?x67 ?x74 y)))
 (let ((?x335 (+ (- 1) ?x135 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x))) (* 2 (* (+ (- 1) x) (+ (- 1) x))))))
 (let (($x351 (and (= ?x102 0) (or (not (= (* ?x102 ?x335) 0)) (not (= (* ?x102 ?x75) 0))))))
 (let ((?x56 (- (* (- 1) (- y 1)) (* (+ x 1) (+ x 1) (+ x 1)))))
 (let ((?x59 (* (+ (- (- (+ x 1) y00) x00) (- y 1)) (+ ?x56 (* 2 (+ x 1) (+ x 1))))))
 (let ((?x42 (- (* (- 1) (+ y 1)) (* (- x 1) (- x 1) (- x 1)))))
 (let ((?x46 (* (+ (- (- (- x 1) y00) x00) y 1) (+ ?x42 (* 2 (- x 1) (- x 1))))))
 (let (($x63 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x46 0)) (not (= ?x59 0))))))
 (rewrite (= $x63 $x351)))))))))))))))
 ))
 (let ((@x65 (asserted $x64)))
 (let ((@x282 (mp (mp @x65 (quant-intro (proof-bind ?x228) (= $x64 $x141)) $x141) (rewrite (= $x141 $x141)) $x141)))
 (let ((@x240 (mp~ (mp @x282 (quant-intro (proof-bind ?x221) (= $x141 $x208)) $x208) (sk (~ $x208 $x255)) $x255)))
 (let ((@x285 (mp @x240 (rewrite (= $x255 $x355)) $x355)))
 (let ((@x284 (and-elim @x285 $x383)))
 (let ((@x241 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x383) $x288)) @x284 $x288)))
 (let (($x287 (>= ?x384 0)))
 (let ((@x118 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x383) $x287)) @x284 $x287)))
 (let (($x251 (<= ?x71 0)))
 (let ((@x115 (lemma ((_ th-lemma arith) (hypothesis (not $x251)) @x118 @x241 @x118 @x241 false) $x251)))
 (let (($x243 (>= ?x71 0)))
 (let ((@x347 (lemma ((_ th-lemma arith) (hypothesis (not $x243)) @x118 @x241 @x118 @x241 false) $x243)))
 (let (($x363 (not (<= ?x200 0))))
 (let (($x231 (>= ?x200 0)))
 (let ((@x301 (lemma ((_ th-lemma arith) (hypothesis (not $x231)) @x118 @x241 @x118 @x241 false) $x231)))
 (let ((@x402 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x387 (not $x251) (not $x243))) @x115 @x347 $x387)))
 (let ((@x405 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x226 $x363 (not $x231))) (unit-resolution (and-elim @x285 $x124) @x402 $x321) @x301 $x363)))
 ((_ th-lemma arith) @x405 @x347 @x115 @x118 @x241 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        19
 :arith-assert-upper        6
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-gcd-tests           6
 :arith-grobner             4
 :arith-max-min             292
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    11
 :arith-num-rows            3
 :arith-patches             6
 :arith-patches_succ        6
 :arith-pivots              3
 :arith-row-summations      3
 :arith-tableau-max-columns 31
 :arith-tableau-max-rows    3
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              8
 :max-memory                3.55
 :memory                    3.10
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1092372
 :num-checks                1
 :propagations              14
 :rlimit-count              3366
 :time                      0.01
 :total-time                0.01)
