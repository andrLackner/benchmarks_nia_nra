unsat
((set-logic NRA)
(proof
(let (($x185 (exists ((x Real) (y Real) )(! (let ((?x90 (* y x)))
 (let ((?x1116 (* (- 1.0) ?x90)))
 (let ((?x78 (* (/ 1.0 2.0) y)))
 (let ((?x88 (+ (- (/ 1.0 2.0)) ?x78)))
 (let ((?x1303 (* ?x88 x)))
 (let ((?x414 (* 2.0 ?x1303)))
 (let ((?x515 (+ ?x414 ?x1116 x)))
 (let ((?x71 (* x00 y00)))
 (let ((?x1113 (+ ?x1116 ?x71 z00 x)))
 (let ((?x110 (+ (* (- 4.0) (* ?x88 ?x88 ?x88 ?x1113 ?x1113 ?x1113 x x)) (* 8.0 (* ?x88 ?x1113 ?x1113 ?x1113 x x x)))))
 (let ((?x317 (* (- 2.0) ?x1303)))
 (let ((?x1111 (* ?x88 ?x88 ?x1113 x x x)))
 (let ((?x1301 (* (- 8.0) ?x1111)))
 (let ((?x327 (+ ?x1301 ?x317)))
 (let ((?x81 (* ?x327 ?x110 ?x515)))
 (let (($x462 (= ?x81 0.0)))
 (not $x462))))))))))))))))) :qid k!28))
 ))
 (let (($x574 (exists ((x Real) (y Real) )(! false :qid k!28))
 ))
 (let ((?x576 (lambda ((x Real) (y Real) )(let ((?x90 (* y x)))
 (let ((?x1116 (* (- 1.0) ?x90)))
 (let ((?x78 (* (/ 1.0 2.0) y)))
 (let ((?x88 (+ (- (/ 1.0 2.0)) ?x78)))
 (let ((?x1303 (* ?x88 x)))
 (let ((?x414 (* 2.0 ?x1303)))
 (let ((?x515 (+ ?x414 ?x1116 x)))
 (let ((?x71 (* x00 y00)))
 (let ((?x1113 (+ ?x1116 ?x71 z00 x)))
 (let ((?x110 (+ (* (- 4.0) (* ?x88 ?x88 ?x88 ?x1113 ?x1113 ?x1113 x x)) (* 8.0 (* ?x88 ?x1113 ?x1113 ?x1113 x x x)))))
 (let ((?x317 (* (- 2.0) ?x1303)))
 (let ((?x1111 (* ?x88 ?x88 ?x1113 x x x)))
 (let ((?x1301 (* (- 8.0) ?x1111)))
 (let ((?x327 (+ ?x1301 ?x317)))
 (let ((?x81 (* ?x327 ?x110 ?x515)))
 (let (($x462 (= ?x81 0.0)))
 (let (($x467 (not $x462)))
 (let ((?x203 (+ x z00 ?x71 ?x1116)))
 (let ((?x652 (+ (* (- 4.0) (* ?x88 ?x88 ?x88 ?x203 ?x203 ?x203 x x)) (* 8.0 (* ?x88 ?x203 ?x203 ?x203 x x x)))))
 (let ((?x977 (* x x x x)))
 (let ((?x418 (* (- 2.0) ?x977)))
 (let ((?x312 (* y y y x x x x)))
 (let ((?x412 (* 2.0 ?x312)))
 (let ((?x298 (* y y x x x x00 y00)))
 (let ((?x410 (* (- 2.0) ?x298)))
 (let ((?x284 (* y x x x x00 y00)))
 (let ((?x426 (* 4.0 ?x284)))
 (let ((?x274 (* x x x x00 y00)))
 (let ((?x402 (* (- 2.0) ?x274)))
 (let ((?x263 (* y y x x x z00)))
 (let ((?x400 (* (- 2.0) ?x263)))
 (let ((?x255 (* y x x x z00)))
 (let ((?x431 (* 4.0 ?x255)))
 (let ((?x242 (* x x x z00)))
 (let ((?x393 (* (- 2.0) ?x242)))
 (let ((?x228 (* y y x x x x)))
 (let ((?x430 (* (- 6.0) ?x228)))
 (let ((?x223 (* y x x x x)))
 (let ((?x429 (* 6.0 ?x223)))
 (let ((?x479 (+ x ?x1116 ?x429 ?x430 ?x393 ?x431 ?x400 ?x402 ?x426 ?x410 ?x412 ?x418)))
 (let ((?x565 (* ?x479 ?x652 0.0)))
 (let ((?x554 (+ (* (- 1.0) x) ?x90)))
 (let ((?x538 (+ (* 2.0 (* (- (/ 1.0 2.0)) x)) (* 2.0 (* (/ 1.0 2.0) ?x90)))))
 (let ((?x444 (* (/ 1.0 2.0) ?x90)))
 (let ((?x439 (* (- (/ 1.0 2.0)) x)))
 (let ((?x450 (+ ?x439 ?x444)))
 (let ((?x441 (+ ?x439 (* ?x78 x))))
 (let ((@x446 (trans (rewrite (= ?x1303 ?x441)) (rewrite (= ?x441 ?x450)) (= ?x1303 ?x450))))
 (let ((@x546 (trans (monotonicity @x446 (= ?x414 (* 2.0 ?x450))) (rewrite (= (* 2.0 ?x450) ?x538)) (= ?x414 ?x538))))
 (let ((@x560 (monotonicity (trans @x546 (rewrite (= ?x538 ?x554)) (= ?x414 ?x554)) (= ?x515 (+ ?x554 ?x1116 x)))))
 (let ((?x473 (+ x ?x1116)))
 (let ((?x432 (+ ?x429 ?x430 ?x393 ?x431 ?x400 ?x402 ?x426 ?x410 ?x412 ?x418)))
 (let ((?x468 (+ ?x432 ?x473)))
 (let ((@x466 (trans (monotonicity @x446 (= ?x317 (* (- 2.0) ?x450))) (rewrite (= (* (- 2.0) ?x450) (+ (* (- 2.0) ?x439) (* (- 2.0) ?x444)))) (= ?x317 (+ (* (- 2.0) ?x439) (* (- 2.0) ?x444))))))
 (let ((@x472 (trans @x466 (rewrite (= (+ (* (- 2.0) ?x439) (* (- 2.0) ?x444)) ?x473)) (= ?x317 ?x473))))
 (let ((?x222 (* (/ 1.0 4.0) ?x977)))
 (let ((?x356 (* (- 8.0) ?x222)))
 (let ((?x314 (* (- (/ 1.0 4.0)) ?x312)))
 (let ((?x354 (* (- 8.0) ?x314)))
 (let ((?x304 (* (/ 1.0 4.0) ?x298)))
 (let ((?x353 (* (- 8.0) ?x304)))
 (let ((?x290 (* (- (/ 1.0 4.0)) ?x284)))
 (let ((?x357 (* (- 8.0) ?x290)))
 (let ((?x277 (* (/ 1.0 4.0) ?x274)))
 (let ((?x355 (* (- 8.0) ?x277)))
 (let ((?x269 (* (/ 1.0 4.0) ?x263)))
 (let ((?x352 (* (- 8.0) ?x269)))
 (let ((?x253 (* (- (/ 1.0 4.0)) ?x255)))
 (let ((?x351 (* (- 8.0) ?x253)))
 (let ((?x213 (* (/ 1.0 4.0) ?x242)))
 (let ((?x350 (* (- 8.0) ?x213)))
 (let ((?x326 (* (/ 1.0 2.0) ?x228)))
 (let ((?x348 (* (- 8.0) ?x326)))
 (let ((?x323 (* (- (/ 1.0 2.0)) ?x223)))
 (let ((?x345 (* (- 8.0) ?x323)))
 (let ((?x224 (* (- (/ 1.0 2.0)) (* ?x78 ?x1116 x x x))))
 (let ((?x344 (* (- 8.0) ?x224)))
 (let ((?x209 (* (- (/ 1.0 2.0)) (* ?x78 ?x71 x x x))))
 (let ((?x342 (* (- 8.0) ?x209)))
 (let ((?x197 (* (- (/ 1.0 2.0)) (* ?x78 z00 x x x))))
 (let ((?x341 (* (- 8.0) ?x197)))
 (let ((?x189 (* (- (/ 1.0 2.0)) (* ?x78 x x x x))))
 (let ((?x338 (* (- 8.0) ?x189)))
 (let ((?x358 (+ ?x338 ?x341 ?x342 ?x344 ?x345 ?x348 ?x350 ?x351 ?x352 ?x355 ?x357 ?x353 ?x354 ?x356)))
 (let ((?x381 (* 2.0 ?x284)))
 (let ((?x371 (* 2.0 ?x255)))
 (let ((?x392 (* (- 4.0) ?x228)))
 (let ((?x389 (* 4.0 ?x223)))
 (let ((?x386 (* (- 2.0) ?x228)))
 (let ((?x361 (* 2.0 ?x223)))
 (let ((?x421 (+ ?x361 ?x371 ?x381 ?x386 ?x389 ?x392 ?x393 ?x371 ?x400 ?x402 ?x381 ?x410 ?x412 ?x418)))
 (let ((@x385 (trans (rewrite (= ?x342 (* 2.0 (* y x00 y00 x x x)))) (rewrite (= (* 2.0 (* y x00 y00 x x x)) ?x381)) (= ?x342 ?x381))))
 (let ((@x373 (trans (rewrite (= ?x341 (* 2.0 (* y z00 x x x)))) (rewrite (= (* 2.0 (* y z00 x x x)) ?x371)) (= ?x341 ?x371))))
 (let ((@x423 (monotonicity (rewrite (= ?x338 ?x361)) @x373 @x385 (rewrite (= ?x344 ?x386)) (rewrite (= ?x345 ?x389)) (rewrite (= ?x348 ?x392)) (rewrite (= ?x350 ?x393)) (rewrite (= ?x351 ?x371)) (rewrite (= ?x352 ?x400)) (rewrite (= ?x355 ?x402)) (rewrite (= ?x357 ?x381)) (rewrite (= ?x353 ?x410)) (rewrite (= ?x354 ?x412)) (rewrite (= ?x356 ?x418)) (= ?x358 ?x421))))
 (let ((?x328 (+ ?x189 ?x197 ?x209 ?x224 ?x323 ?x326 ?x213 ?x253 ?x269 ?x277 ?x290 ?x304 ?x314 ?x222)))
 (let ((?x335 (* (- 8.0) ?x328)))
 (let ((?x230 (* ?x78 ?x78 ?x1116 x x x)))
 (let ((?x217 (* ?x78 (- (/ 1.0 2.0)) ?x1116 x x x)))
 (let ((?x211 (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) (* ?x1116 x x x)))))
 (let ((?x207 (* ?x78 ?x78 ?x71 x x x)))
 (let ((?x205 (* ?x78 (- (/ 1.0 2.0)) ?x71 x x x)))
 (let ((?x173 (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) (* ?x71 x x x)))))
 (let ((?x200 (* ?x78 ?x78 z00 x x x)))
 (let ((?x195 (* ?x78 (- (/ 1.0 2.0)) z00 x x x)))
 (let ((?x194 (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) (* z00 x x x)))))
 (let ((?x190 (* ?x78 ?x78 x x x x)))
 (let ((?x186 (* ?x78 (- (/ 1.0 2.0)) x x x x)))
 (let ((?x1250 (* (- (/ 1.0 2.0)) (* (- (/ 1.0 2.0)) ?x977))))
 (let ((?x225 (+ ?x1250 ?x186 ?x189 ?x190 ?x194 ?x195 ?x197 ?x200 ?x173 ?x205 ?x209 ?x207 ?x211 ?x217 ?x224 ?x230)))
 (let ((?x237 (* (/ 1.0 4.0) ?x228)))
 (let ((?x227 (* (- (/ 1.0 4.0)) ?x223)))
 (let ((?x319 (+ ?x222 ?x227 ?x189 ?x237 ?x213 ?x253 ?x197 ?x269 ?x277 ?x290 ?x209 ?x304 ?x227 ?x237 ?x224 ?x314)))
 (let ((@x311 (rewrite (= (* (/ 1.0 4.0) (* y y x00 y00 x x x)) ?x304))))
 (let ((@x296 (rewrite (= ?x207 (* (/ 1.0 4.0) (* y y x00 y00 x x x))))))
 (let ((@x286 (trans (rewrite (= ?x205 (* (- (/ 1.0 4.0)) (* y x00 y00 x x x)))) (rewrite (= (* (- (/ 1.0 4.0)) (* y x00 y00 x x x)) ?x290)) (= ?x205 ?x290))))
 (let ((@x276 (trans (rewrite (= ?x173 (* (/ 1.0 4.0) (* x00 y00 x x x)))) (rewrite (= (* (/ 1.0 4.0) (* x00 y00 x x x)) ?x277)) (= ?x173 ?x277))))
 (let ((@x268 (trans (rewrite (= ?x200 (* (/ 1.0 4.0) (* y y z00 x x x)))) (rewrite (= (* (/ 1.0 4.0) (* y y z00 x x x)) ?x269)) (= ?x200 ?x269))))
 (let ((@x252 (trans (rewrite (= ?x195 (* (- (/ 1.0 4.0)) (* y z00 x x x)))) (rewrite (= (* (- (/ 1.0 4.0)) (* y z00 x x x)) ?x253)) (= ?x195 ?x253))))
 (let ((@x212 (trans (rewrite (= ?x194 (* (/ 1.0 4.0) (* z00 x x x)))) (rewrite (= (* (/ 1.0 4.0) (* z00 x x x)) ?x213)) (= ?x194 ?x213))))
 (let ((@x322 (monotonicity (rewrite (= ?x1250 ?x222)) (rewrite (= ?x186 ?x227)) (rewrite (= ?x190 ?x237)) @x212 @x252 @x268 @x276 @x286 (trans @x296 @x311 (= ?x207 ?x304)) (rewrite (= ?x211 ?x227)) (rewrite (= ?x217 ?x237)) (rewrite (= ?x230 ?x314)) (= ?x225 ?x319))))
 (let ((@x154 (monotonicity (rewrite (= ?x1113 ?x203)) (= ?x1111 (* ?x88 ?x88 ?x203 x x x)))))
 (let ((@x231 (trans @x154 (rewrite (= (* ?x88 ?x88 ?x203 x x x) ?x225)) (= ?x1111 ?x225))))
 (let ((@x334 (trans @x231 (trans @x322 (rewrite (= ?x319 ?x328)) (= ?x225 ?x328)) (= ?x1111 ?x328))))
 (let ((@x365 (trans (monotonicity @x334 (= ?x1301 ?x335)) (rewrite (= ?x335 ?x358)) (= ?x1301 ?x358))))
 (let ((@x438 (trans @x365 (trans @x423 (rewrite (= ?x421 ?x432)) (= ?x358 ?x432)) (= ?x1301 ?x432))))
 (let ((@x480 (trans (monotonicity @x438 @x472 (= ?x327 ?x468)) (rewrite (= ?x468 ?x479)) (= ?x327 ?x479))))
 (let ((@x562 (monotonicity @x480 (rewrite (= ?x110 ?x652)) (trans @x560 (rewrite (= (+ ?x554 ?x1116 x) 0.0)) (= ?x515 0.0)) (= ?x81 ?x565))))
 (let ((@x571 (monotonicity (trans @x562 (rewrite (= ?x565 0.0)) $x462) (= $x462 (= 0.0 0.0)))))
 (let ((@x577 (monotonicity (trans @x571 (rewrite (= (= 0.0 0.0) true)) (= $x462 true)) (= $x467 (not true)))))
 (trans @x577 (rewrite (= (not true) false)) (= $x467 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x586 (trans (quant-intro (proof-bind ?x576) (= $x185 $x574)) (elim-unused (= $x574 false)) (= $x185 false))))
 (let (($x1115 (exists ((x Real) (y Real) (z Real) )(! (let ((?x91 (* (- 1.0) z00)))
 (let ((?x71 (* x00 y00)))
 (let ((?x72 (* (- 1.0) ?x71)))
 (let ((?x318 (+ ?x72 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x91)))
 (let ((?x113 (* (/ 1.0 2.0) y)))
 (let ((?x851 (+ (- (/ 1.0 2.0)) ?x113)))
 (let ((?x40 (+ z x)))
 (let ((?x114 (+ (* (- 4.0) (* ?x40 ?x40 ?x40 ?x851 ?x851 ?x851 x x)) (* 8.0 (* ?x40 ?x40 ?x40 ?x851 x x x)))))
 (let ((?x155 (+ (* (- 8.0) (* ?x40 ?x851 ?x851 x x x)) (* (- 2.0) (* ?x851 x)))))
 (let ((?x77 (* y x)))
 (let ((?x292 (+ ?x72 ?x77 z ?x91)))
 (let ((?x925 (* 4.0 (* z z z y x x x))))
 (let ((?x708 (* (- (/ 1.0 2.0)) (* z z z y y y x x))))
 (let ((?x193 (* (+ (* (- 2.0) (* z y y x x x)) (* (- 1.0) ?x77)) (+ ?x708 ?x925) ?x292)))
 (and (= ?x292 0.0) (or (not (= ?x193 0.0)) (not (= (* ?x155 ?x114 ?x318) 0.0)))))))))))))))))) :qid k!28))
 ))
 (let (($x63 (exists ((x Real) (y Real) (z Real) )(! (let ((?x49 (/ y 2.0)))
 (let ((?x50 (* 2.0 x ?x49)))
 (let ((?x57 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x ?x49 ?x49 z) ?x50)))
 (let ((?x24 (- 1.0)))
 (let ((?x55 (+ (* ?x24 2.0 x 2.0 x ?x49 ?x49 ?x49 z z z) (* 2.0 x 2.0 x 2.0 x ?x49 z z z))))
 (let (($x59 (= (* (- (+ (* ?x24 x00 y00) ?x50 z) z00) ?x55 ?x57) 0.0)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x37 (* 2.0 x ?x36)))
 (let ((?x40 (+ z x)))
 (let ((?x45 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x40) ?x37)))
 (let ((?x43 (+ (* ?x24 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x40 ?x40 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40 ?x40 ?x40))))
 (let (($x47 (= (* (- (+ (* ?x24 x00 y00) ?x37 z x) z00) ?x43 ?x45) 0.0)))
 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not $x47) (not $x59))))))))))))))) :qid k!28))
 ))
 (let ((?x1114 (lambda ((x Real) (y Real) (z Real) )(let ((?x91 (* (- 1.0) z00)))
 (let ((?x71 (* x00 y00)))
 (let ((?x72 (* (- 1.0) ?x71)))
 (let ((?x318 (+ ?x72 (* 2.0 (* (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) y)) x)) z x ?x91)))
 (let ((?x113 (* (/ 1.0 2.0) y)))
 (let ((?x851 (+ (- (/ 1.0 2.0)) ?x113)))
 (let ((?x40 (+ z x)))
 (let ((?x114 (+ (* (- 4.0) (* ?x40 ?x40 ?x40 ?x851 ?x851 ?x851 x x)) (* 8.0 (* ?x40 ?x40 ?x40 ?x851 x x x)))))
 (let ((?x155 (+ (* (- 8.0) (* ?x40 ?x851 ?x851 x x x)) (* (- 2.0) (* ?x851 x)))))
 (let ((?x77 (* y x)))
 (let ((?x292 (+ ?x72 ?x77 z ?x91)))
 (let ((?x925 (* 4.0 (* z z z y x x x))))
 (let ((?x708 (* (- (/ 1.0 2.0)) (* z z z y y y x x))))
 (let ((?x193 (* (+ (* (- 2.0) (* z y y x x x)) (* (- 1.0) ?x77)) (+ ?x708 ?x925) ?x292)))
 (let (($x85 (and (= ?x292 0.0) (or (not (= ?x193 0.0)) (not (= (* ?x155 ?x114 ?x318) 0.0))))))
 (let ((?x49 (/ y 2.0)))
 (let ((?x50 (* 2.0 x ?x49)))
 (let ((?x57 (- (* (- 1.0) 2.0 x 2.0 x 2.0 x ?x49 ?x49 z) ?x50)))
 (let ((?x24 (- 1.0)))
 (let ((?x55 (+ (* ?x24 2.0 x 2.0 x ?x49 ?x49 ?x49 z z z) (* 2.0 x 2.0 x 2.0 x ?x49 z z z))))
 (let (($x59 (= (* (- (+ (* ?x24 x00 y00) ?x50 z) z00) ?x55 ?x57) 0.0)))
 (let ((?x36 (/ (- y 1.0) 2.0)))
 (let ((?x37 (* 2.0 x ?x36)))
 (let ((?x45 (- (* ?x24 2.0 x 2.0 x 2.0 x ?x36 ?x36 ?x40) ?x37)))
 (let ((?x43 (+ (* ?x24 2.0 x 2.0 x ?x36 ?x36 ?x36 ?x40 ?x40 ?x40) (* 2.0 x 2.0 x 2.0 x ?x36 ?x40 ?x40 ?x40))))
 (let (($x47 (= (* (- (+ (* ?x24 x00 y00) ?x37 z x) z00) ?x43 ?x45) 0.0)))
 (let (($x62 (and (= (- (+ (* ?x24 x00 y00) (* x y) z) z00) 0.0) (or (not $x47) (not $x59)))))
 (rewrite (= $x62 $x85))))))))))))))))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x1005 (mp (mp @x64 (quant-intro (proof-bind ?x1114) (= $x63 $x1115)) $x1115) (rewrite (= $x1115 $x185)) $x185)))
 (mp @x1005 @x586 false))))))))))))

(:max-memory   17.69
 :memory       17.42
 :num-allocs   64390
 :num-checks   1
 :rlimit-count 1645
 :time         0.00
 :total-time   0.01)
