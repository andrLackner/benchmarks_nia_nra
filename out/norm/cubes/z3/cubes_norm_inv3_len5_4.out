unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x460 (+ m!1 (* (- 6) n!0))))
 (let (($x655 (<= ?x460 6)))
 (let (($x639 (= ?x460 6)))
 (let ((?x145 (+ c!3 k!2)))
 (let ((?x892 (+ 6 m!1)))
 (let ((?x751 (+ 1 n!0)))
 (let ((?x511 (* (- 2) (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x145 ?x145))))
 (let ((?x585 (+ m!1 k!2)))
 (let ((?x1285 (* (- 1) (* ?x751 ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x585 ?x585 ?x145 ?x145 ?x145))))
 (let ((?x815 (* (- 3) (* m!1 m!1))))
 (let ((?x570 (* (- 1) (* m!1 m!1 m!1 n!0 n!0))))
 (let ((?x1065 (* (- 1) (* ?x751 ?x751 ?x892 ?x892 ?x145 ?x145))))
 (let ((?x1186 (* (- 1) (* ?x751 ?x751 ?x892 ?x892 ?x585 ?x585 ?x585 ?x585 ?x145 ?x145 ?x145))))
 (let ((?x593 (* (- 60) (* m!1 n!0 n!0))))
 (let ((?x518 (* (- 17) (* m!1 m!1 n!0))))
 (let ((?x878 (* 108 k!2)))
 (let ((?x627 (* n!0 n!0)))
 (let ((?x1209 (* (- 72) ?x627)))
 (let ((?x445 (* (- 180) n!0)))
 (let ((?x463 (* (- 1) (* m!1 m!1 m!1 n!0))))
 (let ((?x1054 (* 3 (* ?x751 ?x751 ?x892 ?x892 ?x145 ?x145 ?x145))))
 (let ((?x672 (* 108 c!3)))
 (let ((?x443 (* c!3 n!0)))
 (let ((?x846 (* 108 ?x443)))
 (let ((?x626 (* (- 36) m!1)))
 (let ((?x562 (* (- 2) (* ?x751 ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x585 ?x145 ?x145 ?x145))))
 (let ((?x1057 (* (- 14) (* m!1 m!1 n!0 n!0))))
 (let ((?x534 (* (- 96) (* m!1 n!0))))
 (let ((?x176 (* 3 (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x585 ?x145 ?x145 ?x145 ?x145))))
 (let ((?x762 (+ (* ?x751 ?x892 ?x892 ?x585 ?x585 ?x585 ?x585 ?x145 ?x145 ?x145) (* (- 12) (* m!1 n!0 n!0 k!2)) (* (- 2) (* ?x751 ?x751 ?x751 ?x892 ?x585 ?x585 ?x145)) (* (- 36) (* n!0 n!0 k!2)) (* 36 (* m!1 c!3)) (* ?x751 ?x751 ?x892 ?x892 ?x585 ?x145 ?x145) (* (- 1) (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x585 ?x145 ?x145 ?x145)) ?x176 ?x534 ?x1057 ?x562 (* (- 1) (* ?x751 ?x751 ?x892 ?x585 ?x585 ?x145)) ?x626 ?x846 ?x672 ?x1054 ?x463 ?x445 ?x1209 ?x878 (* 24 (* m!1 n!0 k!2)) (* (- 1) (* ?x751 ?x751 ?x751 ?x892 ?x585 ?x585 ?x585 ?x145)) (* 3 (* m!1 m!1 c!3)) (* 2 (* m!1 m!1 n!0 k!2)) (* 3 (* ?x751 ?x892 ?x892 ?x585 ?x585 ?x585 ?x145 ?x145 ?x145 ?x145)) (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x585 ?x585 ?x145 ?x145 ?x145) (* (- 1) (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x585 ?x145 ?x145)) ?x518 ?x593 (* 72 (* n!0 k!2)) (* (- 1) (* ?x751 ?x892 ?x892 ?x585 ?x585 ?x585 ?x145 ?x145 ?x145)) ?x1186 (* ?x751 ?x751 ?x892 ?x585 ?x585 ?x585 ?x145) ?x1065 ?x570 ?x815 (* (- 2) (* ?x751 ?x751 ?x892 ?x892 ?x585 ?x585 ?x585 ?x145 ?x145 ?x145)) (* 3 (* ?x751 ?x751 ?x892 ?x585 ?x585 ?x145 ?x145)) (* 36 (* m!1 c!3 n!0)) ?x1285 (* 36 (* m!1 k!2)) (* 3 (* m!1 m!1 k!2)) (* 3 (* m!1 m!1 c!3 n!0)) ?x511 (* (- 1) (* m!1 m!1 n!0 n!0 k!2)))))
 (let (($x607 (= ?x762 108)))
 (let (($x818 (not $x607)))
 (let ((?x668 (+ (* 3 n!0) (* 3 ?x627) (* (- 1) k!2))))
 (let (($x365 (= ?x668 (- 1))))
 (let ((?x670 (* (- 2) n!0)))
 (let ((?x1053 (* 3 c!3)))
 (let ((?x644 (+ ?x1053 ?x670 k!2 (* (- 1) (* n!0 k!2)))))
 (let (($x924 (= ?x644 1)))
 (let ((?x572 (* (- 1) (* k!2 k!2))))
 (let ((?x629 (* 5 k!2)))
 (let ((?x363 (* (- 9) n!0)))
 (let ((?x1058 (* 18 c!3)))
 (let ((?x555 (* 9 ?x443)))
 (let ((?x1016 (+ ?x555 ?x1058 ?x363 ?x629 ?x572)))
 (let (($x1279 (= ?x1016 4)))
 (let (($x715 (and $x639 $x1279 $x924 $x365 $x818)))
 (let ((?x888 (+ k!2 m!1)))
 (let ((?x352 (* 3 (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x888 ?x145 ?x145 ?x145 ?x145))))
 (let ((?x571 (* (- 1) (* ?x751 ?x751 ?x892 ?x892 ?x888 ?x888 ?x888 ?x888 ?x145 ?x145 ?x145))))
 (let ((?x633 (* (- 1) (* ?x751 ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x888 ?x888 ?x145 ?x145 ?x145))))
 (let ((?x148 (* (- 2) (* ?x751 ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x888 ?x145 ?x145 ?x145))))
 (let ((?x925 (+ ?x672 ?x878 ?x626 ?x445 (* 72 (* k!2 n!0)) ?x846 (* 3 (* ?x751 ?x892 ?x892 ?x888 ?x888 ?x888 ?x145 ?x145 ?x145 ?x145)) (* 36 (* c!3 m!1 n!0)) (* (- 1) (* ?x751 ?x751 ?x892 ?x888 ?x888 ?x145)) ?x1209 ?x148 ?x570 (* (- 1) (* k!2 m!1 m!1 n!0 n!0)) ?x1065 (* ?x751 ?x751 ?x892 ?x892 ?x888 ?x145 ?x145) (* (- 1) (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x888 ?x145 ?x145)) (* 24 (* k!2 m!1 n!0)) ?x518 (* 2 (* k!2 m!1 m!1 n!0)) ?x463 (* (- 36) (* k!2 n!0 n!0)) ?x815 (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x888 ?x888 ?x145 ?x145 ?x145) ?x534 ?x593 ?x511 (* (- 12) (* k!2 m!1 n!0 n!0)) ?x1057 ?x1054 (* (- 1) (* ?x751 ?x751 ?x751 ?x892 ?x892 ?x892 ?x888 ?x145 ?x145 ?x145)) (* (- 1) (* ?x751 ?x892 ?x892 ?x888 ?x888 ?x888 ?x145 ?x145 ?x145)) (* (- 2) (* ?x751 ?x751 ?x751 ?x892 ?x888 ?x888 ?x145)) (* ?x751 ?x892 ?x892 ?x888 ?x888 ?x888 ?x888 ?x145 ?x145 ?x145) ?x633 (* 3 (* c!3 m!1 m!1)) ?x571 (* 3 (* c!3 m!1 m!1 n!0)) (* 3 (* k!2 m!1 m!1)) (* 36 (* k!2 m!1)) (* 3 (* ?x751 ?x751 ?x892 ?x888 ?x888 ?x145 ?x145)) (* 36 (* c!3 m!1)) ?x352 (* ?x751 ?x751 ?x892 ?x888 ?x888 ?x888 ?x145) (* (- 1) (* ?x751 ?x751 ?x751 ?x892 ?x888 ?x888 ?x888 ?x145)) (* (- 2) (* ?x751 ?x751 ?x892 ?x892 ?x888 ?x888 ?x888 ?x145 ?x145 ?x145)))))
 (let (($x215 (and $x639 (= (+ ?x1058 ?x629 ?x363 ?x572 ?x555) 4) (= (+ ?x1053 k!2 ?x670 (* (- 1) (* k!2 n!0))) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x627)) 1) (not (= ?x925 108)))))
 (let (($x582 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x338 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x1189 (* (- 2) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1265 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1232 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1223 (* 3 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1088 (* 3 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x1083 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1066 (* (- 1) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x766 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x808 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x1292 (* (- 1) (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x784 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x577 (* 3 (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68 ?x68))))
 (let ((?x529 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x489 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x498 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68))))
 (let ((?x377 (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68)))
 (let ((?x436 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x835 (* (- 2) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1056 (* (- 1) (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x256 (* 3 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x376 (+ (* 108 c) (* 108 k) (* (- 36) m) (* (- 180) n) (* 72 (* k n)) (* 108 (* c n)) ?x256 (* 36 (* c m n)) ?x1056 (* (- 72) (* n n)) ?x835 (* (- 1) (* m m m n n)) (* (- 1) (* k m m n n)) ?x436 ?x377 ?x498 (* 24 (* k m n)) (* (- 17) (* m m n)) (* 2 (* k m m n)) (* (- 1) (* m m m n)) (* (- 36) (* k n n)) (* (- 3) (* m m)) ?x489 (* (- 96) (* m n)) (* (- 60) (* m n n)) ?x529 (* (- 12) (* k m n n)) (* (- 14) (* m m n n)) ?x577 ?x784 ?x1292 ?x808 ?x766 ?x1066 (* 3 (* c m m)) ?x1083 (* 3 (* c m m n)) (* 3 (* k m m)) (* 36 (* k m)) ?x1088 (* 36 (* c m)) ?x1223 ?x1232 ?x1265 ?x1189)))
 (let (($x330 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x292 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x243 (* (- 1) ?x49)))
 (let ((?x242 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x240 (= (+ ?x40 ?x44 ?x242 ?x243 (* 9 (* c n))) 4)))
 (let (($x156 (= (+ m (* (- 6) n)) 6)))
 (and $x156 $x240 $x292 $x330 (not (= ?x376 108))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x394 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x338 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x529 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x436 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x377 (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68)))
 (let ((?x498 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68))))
 (let ((?x1066 (* (- 1) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x489 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x256 (* 3 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1056 (* (- 1) (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x784 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x835 (* (- 2) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1223 (* 3 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1189 (* (- 2) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1292 (* (- 1) (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x577 (* 3 (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68 ?x68))))
 (let ((?x1265 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1232 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1083 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1088 (* 3 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x766 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x327 (+ ?x766 ?x1088 ?x1083 ?x1232 ?x1265 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69)) ?x577 ?x1292 ?x1189 ?x1223 (* 3 (* ?x341 ?x338 ?x338 ?x68)) ?x835 ?x784 ?x808 ?x1056 ?x256 ?x489 ?x1066 (* (- 2) (* ?x341 ?x341 ?x338 ?x338)) (* ?x341 ?x338 ?x338 ?x69) ?x498 ?x377 ?x436 ?x529 (* (- 1) (* ?x341 ?x338 ?x338)))))
 (let (($x916 (not (= ?x327 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x548 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x243 (* (- 1) ?x49)))
 (let ((?x242 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x156 (= (+ m (* (- 6) n)) 6)))
 (and $x156 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x242 ?x243) 4) $x548 $x143 $x916))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x566 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x338 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x1189 (* (- 2) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1265 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1232 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1223 (* 3 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1088 (* 3 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x1083 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1066 (* (- 1) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x766 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x808 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x1292 (* (- 1) (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x784 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x577 (* 3 (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68 ?x68))))
 (let ((?x529 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x489 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x498 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68))))
 (let ((?x377 (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68)))
 (let ((?x436 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x835 (* (- 2) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1056 (* (- 1) (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x256 (* 3 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x376 (+ (* 108 c) (* 108 k) (* (- 36) m) (* (- 180) n) (* 72 (* k n)) (* 108 (* c n)) ?x256 (* 36 (* c m n)) ?x1056 (* (- 72) (* n n)) ?x835 (* (- 1) (* m m m n n)) (* (- 1) (* k m m n n)) ?x436 ?x377 ?x498 (* 24 (* k m n)) (* (- 17) (* m m n)) (* 2 (* k m m n)) (* (- 1) (* m m m n)) (* (- 36) (* k n n)) (* (- 3) (* m m)) ?x489 (* (- 96) (* m n)) (* (- 60) (* m n n)) ?x529 (* (- 12) (* k m n n)) (* (- 14) (* m m n n)) ?x577 ?x784 ?x1292 ?x808 ?x766 ?x1066 (* 3 (* c m m)) ?x1083 (* 3 (* c m m n)) (* 3 (* k m m)) (* 36 (* k m)) ?x1088 (* 36 (* c m)) ?x1223 ?x1232 ?x1265 ?x1189)))
 (let (($x330 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x292 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x243 (* (- 1) ?x49)))
 (let ((?x242 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x240 (= (+ ?x40 ?x44 ?x242 ?x243 (* 9 (* c n))) 4)))
 (let (($x156 (= (+ m (* (- 6) n)) 6)))
 (let (($x545 (and $x156 $x240 $x292 $x330 (not (= ?x376 108)))))
 (let ((?x327 (+ ?x766 ?x1088 ?x1083 ?x1232 ?x1265 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69)) ?x577 ?x1292 ?x1189 ?x1223 (* 3 (* ?x341 ?x338 ?x338 ?x68)) ?x835 ?x784 ?x808 ?x1056 ?x256 ?x489 ?x1066 (* (- 2) (* ?x341 ?x341 ?x338 ?x338)) (* ?x341 ?x338 ?x338 ?x69) ?x498 ?x377 ?x436 ?x529 (* (- 1) (* ?x341 ?x338 ?x338)))))
 (let (($x916 (not (= ?x327 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x548 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x455 (and $x156 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x242 ?x243) 4) $x548 $x143 $x916)))
 (rewrite (= $x455 $x545)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x410 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x338 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x529 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x436 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x377 (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68)))
 (let ((?x498 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68))))
 (let ((?x1066 (* (- 1) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x489 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x256 (* 3 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1056 (* (- 1) (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x784 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x835 (* (- 2) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1223 (* 3 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1189 (* (- 2) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1292 (* (- 1) (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x577 (* 3 (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68 ?x68))))
 (let ((?x1265 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1232 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1083 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1088 (* 3 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x766 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x327 (+ ?x766 ?x1088 ?x1083 ?x1232 ?x1265 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69)) ?x577 ?x1292 ?x1189 ?x1223 (* 3 (* ?x341 ?x338 ?x338 ?x68)) ?x835 ?x784 ?x808 ?x1056 ?x256 ?x489 ?x1066 (* (- 2) (* ?x341 ?x341 ?x338 ?x338)) (* ?x341 ?x338 ?x338 ?x69) ?x498 ?x377 ?x436 ?x529 (* (- 1) (* ?x341 ?x338 ?x338)))))
 (let (($x916 (not (= ?x327 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x220 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x538 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x156 (= (+ m (* (- 6) n)) 6)))
 (and $x156 (= ?x538 (- 4)) $x220 $x143 $x916))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x342 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x338 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x529 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x436 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x377 (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68)))
 (let ((?x498 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68))))
 (let ((?x1066 (* (- 1) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x489 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x256 (* 3 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1056 (* (- 1) (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x784 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x835 (* (- 2) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1223 (* 3 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1189 (* (- 2) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1292 (* (- 1) (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x577 (* 3 (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68 ?x68))))
 (let ((?x1265 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1232 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1083 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1088 (* 3 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x766 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x327 (+ ?x766 ?x1088 ?x1083 ?x1232 ?x1265 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69)) ?x577 ?x1292 ?x1189 ?x1223 (* 3 (* ?x341 ?x338 ?x338 ?x68)) ?x835 ?x784 ?x808 ?x1056 ?x256 ?x489 ?x1066 (* (- 2) (* ?x341 ?x341 ?x338 ?x338)) (* ?x341 ?x338 ?x338 ?x69) ?x498 ?x377 ?x436 ?x529 (* (- 1) (* ?x341 ?x338 ?x338)))))
 (let (($x916 (not (= ?x327 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x548 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x243 (* (- 1) ?x49)))
 (let ((?x242 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x156 (= (+ m (* (- 6) n)) 6)))
 (let (($x455 (and $x156 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x242 ?x243) 4) $x548 $x143 $x916)))
 (let (($x220 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x538 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x600 (and $x156 (= ?x538 (- 4)) $x220 $x143 $x916)))
 (rewrite (= $x600 $x455))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x123 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x74 (+ (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x76 (- ?x74 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x81 (- (+ ?x76 (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x84 (+ (- ?x81 (* ?x69 ?x70 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x88 (- (- ?x84 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71)) (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x91 (+ ?x88 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71) (* 3 ?x68 ?x70 ?x70 ?x71))))
 (let ((?x96 (- ?x91 (* 2 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x98 (- (- ?x96 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 2 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x102 (+ (- ?x98 (* ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x105 (- ?x102 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x110 (- (+ (- ?x105 (* 2 ?x70 ?x70 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x71)) (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x116 (- (+ ?x110 (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71)) (* ?x68 ?x68 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x118 (- (- ?x116 (* 2 ?x68 ?x68 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x70 ?x70 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x118 0)))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x1086 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x338 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x529 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x436 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68))))
 (let ((?x69 (+ k m)))
 (let ((?x377 (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68)))
 (let ((?x498 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x69 ?x68 ?x68))))
 (let ((?x1066 (* (- 1) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x489 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x256 (* 3 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1056 (* (- 1) (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x808 (* (- 2) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x68))))
 (let ((?x784 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x835 (* (- 2) (* ?x341 ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1223 (* 3 (* ?x341 ?x341 ?x341 ?x338 ?x338 ?x338 ?x69 ?x68 ?x68 ?x68 ?x68))))
 (let ((?x1189 (* (- 2) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1292 (* (- 1) (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x577 (* 3 (* ?x341 ?x341 ?x338 ?x338 ?x68 ?x68 ?x68))))
 (let ((?x1265 (* (- 1) (* ?x341 ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68))))
 (let ((?x1232 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x1083 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68))))
 (let ((?x1088 (* 3 (* ?x341 ?x341 ?x338 ?x69 ?x69 ?x68 ?x68))))
 (let ((?x766 (* ?x341 ?x338 ?x338 ?x69 ?x69 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x327 (+ ?x766 ?x1088 ?x1083 ?x1232 ?x1265 (* (- 1) (* ?x341 ?x341 ?x338 ?x338 ?x69)) ?x577 ?x1292 ?x1189 ?x1223 (* 3 (* ?x341 ?x338 ?x338 ?x68)) ?x835 ?x784 ?x808 ?x1056 ?x256 ?x489 ?x1066 (* (- 2) (* ?x341 ?x341 ?x338 ?x338)) (* ?x341 ?x338 ?x338 ?x69) ?x498 ?x377 ?x436 ?x529 (* (- 1) (* ?x341 ?x338 ?x338)))))
 (let (($x916 (not (= ?x327 0))))
 (let (($x143 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x220 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x538 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x156 (= (+ m (* (- 6) n)) 6)))
 (let (($x600 (and $x156 (= ?x538 (- 4)) $x220 $x143 $x916)))
 (let ((?x71 (+ n 1)))
 (let ((?x70 (+ m 6)))
 (let ((?x74 (+ (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71) (* 3 ?x68 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71))))
 (let ((?x76 (- ?x74 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x81 (- (+ ?x76 (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71)) (* ?x68 ?x69 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x84 (+ (- ?x81 (* ?x69 ?x70 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x88 (- (- ?x84 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71)) (* 2 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x91 (+ ?x88 (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71) (* 3 ?x68 ?x70 ?x70 ?x71))))
 (let ((?x96 (- ?x91 (* 2 ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x98 (- (- ?x96 (* ?x68 ?x68 ?x68 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71)) (* 2 ?x68 ?x69 ?x69 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x102 (+ (- ?x98 (* ?x68 ?x69 ?x69 ?x70 ?x71 ?x71)) (* 3 ?x68 ?x68 ?x68 ?x68 ?x69 ?x69 ?x69 ?x70 ?x70 ?x71) (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x105 (- ?x102 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x71))))
 (let ((?x110 (- (+ (- ?x105 (* 2 ?x70 ?x70 ?x71 ?x71)) (* ?x69 ?x70 ?x70 ?x71)) (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71 ?x71))))
 (let ((?x116 (- (+ ?x110 (* ?x68 ?x68 ?x69 ?x70 ?x70 ?x71 ?x71)) (* ?x68 ?x68 ?x70 ?x70 ?x71 ?x71))))
 (let ((?x118 (- (- ?x116 (* 2 ?x68 ?x68 ?x70 ?x70 ?x71 ?x71 ?x71)) (* ?x70 ?x70 ?x71))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x122 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x118 0))))))
 (rewrite (= $x122 $x600)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x124 (asserted $x123)))
 (let ((@x393 (mp (mp @x124 (quant-intro (proof-bind ?x1086) (= $x123 $x410)) $x410) (rewrite (= $x410 $x410)) $x410)))
 (let ((@x1281 (mp (mp @x393 (quant-intro (proof-bind ?x342) (= $x410 $x394)) $x394) (quant-intro (proof-bind ?x566) (= $x394 $x582)) $x582)))
 (let ((@x746 (mp (mp~ @x1281 (sk (~ $x582 $x215)) $x215) (rewrite (= $x215 $x715)) $x715)))
 (let ((@x752 (and-elim @x746 $x639)))
 (let ((@x149 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x639) $x655)) @x752 $x655)))
 (let (($x853 (>= ?x460 6)))
 (let ((@x799 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x639) $x853)) @x752 $x853)))
 (let (($x816 (<= ?x668 (- 1))))
 (let ((@x588 (and-elim @x746 $x365)))
 (let ((@x172 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x365) $x816)) @x588 $x816)))
 (let (($x843 (>= ?x668 (- 1))))
 (let ((@x592 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x365) $x843)) @x588 $x843)))
 (let (($x683 (<= ?x644 1)))
 (let ((@x216 (and-elim @x746 $x924)))
 (let ((@x135 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x924) $x683)) @x216 $x683)))
 (let (($x814 (>= ?x644 1)))
 (let ((@x950 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x924) $x814)) @x216 $x814)))
 (let (($x712 (<= ?x1016 4)))
 (let ((@x638 (and-elim @x746 $x1279)))
 (let ((@x831 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1279) $x712)) @x638 $x712)))
 (let (($x1218 (>= ?x1016 4)))
 (let ((@x800 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1279) $x1218)) @x638 $x1218)))
 (let (($x1193 (not (<= ?x762 108))))
 (let (($x439 (>= ?x762 108)))
 (let ((@x1191 ((_ th-lemma arith) (hypothesis (not $x439)) @x799 @x149 @x592 @x172 @x950 @x135 @x592 @x172 @x592 @x172 @x800 @x831 @x592 @x172 @x799 @x149 @x592 @x172 @x799 @x149 @x950 @x135 @x799 @x149 @x800 @x831 @x592 @x172 false)))
 (let ((@x872 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x607 $x1193 (not $x439))) (and-elim @x746 $x818) (or $x1193 (not $x439)))))
 ((_ th-lemma arith) (unit-resolution @x872 (lemma @x1191 $x439) $x1193) @x592 @x172 @x799 @x149 @x950 @x135 @x592 @x172 @x592 @x172 @x800 @x831 @x592 @x172 @x799 @x149 @x592 @x172 @x799 @x149 @x950 @x135 @x592 @x172 @x799 @x149 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        25
 :arith-assert-upper        26
 :arith-branch-var          1
 :arith-conflicts           4
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             566
 :arith-nonlinear-bounds    36
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        2
 :arith-pivots              8
 :arith-row-summations      13
 :arith-tableau-max-columns 80
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                16
 :final-checks              8
 :max-memory                3.93
 :memory                    3.32
 :mk-bool-var               26
 :mk-clause                 16
 :num-allocs                2533483
 :num-checks                1
 :propagations              11
 :rlimit-count              25497
 :time                      0.02
 :total-time                0.03)
