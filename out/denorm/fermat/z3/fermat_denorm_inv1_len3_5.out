unsat
((set-logic NIA)
(declare-fun v!0 () Int)
(declare-fun r!2 () Int)
(declare-fun u!1 () Int)
(proof
(let ((?x125 (* u!1 u!1)))
 (let ((?x48 (* v00 v00)))
 (let ((?x33 (* 2 u00)))
 (let ((?x30 (* 4 r00)))
 (let ((?x441 (+ ?x30 ?x33 (* (- 2) v00) (* (- 1) (* u00 u00)) ?x48 ?x125 (* (- 2) u!1) (* 2 v!0) (* (- 4) r!2) (* (- 1) (* v!0 v!0)))))
 (let (($x299 (>= ?x441 0)))
 (let (($x120 (= ?x441 0)))
 (let ((?x843 (* v!0 v!0)))
 (let ((?x647 (* 4 r!2)))
 (let ((?x434 (* (- 2) v!0)))
 (let ((?x781 (* 2 u!1)))
 (let ((?x108 (* (- 1) ?x125)))
 (let ((?x195 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x41 (* 2 v00)))
 (let ((?x119 (* (- 2) u00)))
 (let ((?x103 (* (- 4) r00)))
 (let ((?x452 (+ ?x103 ?x119 ?x41 ?x46 ?x195 ?x108 ?x781 ?x434 ?x647 ?x843)))
 (let ((?x720 (* (- 1) (* v!0 r!2 r!2))))
 (let ((?x736 (* (- 1) (* u!1 u!1 r!2 r!2 r!2))))
 (let ((?x462 (* (- 1) (* u!1 u!1 v!0))))
 (let ((?x817 (* (- 4) (* r!2 r!2 r!2))))
 (let ((?x431 (* (- 1) (* u!1 u!1 u!1 u!1 u!1))))
 (let ((?x808 (* (- 4) (* u!1 u!1 u!1 u!1))))
 (let ((?x617 (* (- 4) (* u!1 u!1 u!1))))
 (let ((?x763 (+ 1 ?x617 (* (- 2) (* u!1 v!0 r!2)) ?x808 ?x431 ?x817 ?x462 (* (- 3) (* u!1 u!1 u!1 r!2 r!2)) (* (- 12) (* u!1 u!1 r!2)) (* (- 3) (* u!1 u!1 u!1 u!1 r!2)) (* (- 12) (* u!1 r!2 r!2)) (* (- 4) (* u!1 r!2 r!2 r!2)) (* (- 12) (* u!1 u!1 r!2 r!2)) (* (- 12) (* u!1 u!1 u!1 r!2)) ?x736 ?x720)))
 (let ((?x638 (* ?x763 ?x452)))
 (let (($x746 (= ?x638 0)))
 (let (($x769 (not $x746)))
 (let ((?x719 (* (- 2) ?x843)))
 (let ((?x667 (* (- 1) (* v!0 v!0 v!0))))
 (let ((?x461 (* (- 2) (* r!2 r!2))))
 (let ((?x166 (* u!1 u!1 v!0 v!0 v!0)))
 (let ((?x631 (+ 1 ?x166 ?x461 ?x667 (* (- 3) (* u!1 u!1 v!0 v!0 r!2)) (* 4 (* v!0 r!2)) (* 2 (* v!0 v!0 r!2)) ?x736 (* 3 (* u!1 u!1 v!0 r!2 r!2)) ?x720 ?x719)))
 (let ((?x675 (* ?x631 ?x452)))
 (let (($x786 (= ?x675 0)))
 (let (($x737 (or (not $x786) $x769)))
 (let (($x779 (and $x120 $x737)))
 (let ((?x788 (+ ?x647 ?x781 ?x434 ?x103 ?x119 ?x41 ?x108 ?x843 ?x46 ?x195)))
 (let ((?x493 (* (- 1) (* r!2 r!2 r!2 u!1 u!1))))
 (let ((?x455 (* (- 1) (* r!2 r!2 v!0))))
 (let ((?x813 (+ 1 ?x455 ?x493 (* (- 2) (* r!2 u!1 v!0)) ?x462 (* (- 3) (* r!2 r!2 u!1 u!1 u!1)) (* (- 3) (* r!2 u!1 u!1 u!1 u!1)) ?x431 ?x817 (* (- 12) (* r!2 r!2 u!1)) (* (- 12) (* r!2 u!1 u!1)) ?x617 (* (- 4) (* r!2 r!2 r!2 u!1)) (* (- 12) (* r!2 r!2 u!1 u!1)) (* (- 12) (* r!2 u!1 u!1 u!1)) ?x808)))
 (let ((?x150 (+ 1 ?x719 ?x455 ?x461 (* 4 (* r!2 v!0)) (* 2 (* r!2 v!0 v!0)) ?x667 ?x493 (* 3 (* r!2 r!2 u!1 u!1 v!0)) (* (- 3) (* r!2 u!1 u!1 v!0 v!0)) ?x166)))
 (let (($x451 (and (= ?x788 0) (or (not (= (* ?x150 ?x788) 0)) (not (= (* ?x813 ?x788) 0))))))
 (let (($x303 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x195 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x173 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x119 (* (- 2) u00)))
 (let ((?x103 (* (- 4) r00)))
 (let ((?x149 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x201 (+ ?x28 ?x36 ?x149 ?x103 ?x119 ?x41 ?x173 ?x45 ?x46 ?x195)))
 (let ((?x505 (* (- 1) (* r r r u u))))
 (let ((?x387 (* (- 1) (* r r v))))
 (let ((?x846 (+ 1 ?x387 ?x505 (* (- 2) (* r u v)) (* (- 1) (* u u v)) (* (- 3) (* r r u u u)) (* (- 3) (* r u u u u)) (* (- 1) (* u u u u u)) (* (- 4) (* r r r)) (* (- 12) (* r r u)) (* (- 12) (* r u u)) (* (- 4) (* u u u)) (* (- 4) (* r r r u)) (* (- 12) (* r r u u)) (* (- 12) (* r u u u)) (* (- 4) (* u u u u)))))
 (let ((?x514 (+ 1 (* (- 2) ?x45) ?x387 (* (- 2) (* r r)) (* 4 (* r v)) (* 2 (* r v v)) (* (- 1) (* v v v)) ?x505 (* 3 (* r r u u v)) (* (- 3) (* r u u v v)) (* u u v v v))))
 (let (($x206 (= ?x201 0)))
 (and $x206 (or (not (= (* ?x514 ?x201) 0)) (not (= (* ?x846 ?x201) 0)))))))))))))))))))))) :qid k!28))
 ))
 (let (($x271 (exists ((r Int) (u Int) (v Int) )(! (let ((?x48 (* v00 v00)))
 (let ((?x195 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x149 (* (- 2) v)))
 (let ((?x119 (* (- 2) u00)))
 (let ((?x103 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x618 (+ 4 ?x28 (* 6 u) ?x103 ?x119 ?x149 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x195)))
 (let ((?x73 (+ r u)))
 (let ((?x784 (+ 2 u)))
 (let ((?x691 (+ 1 (* (- 1) (* ?x73 ?x73 v)) (* (- 1) (* ?x784 ?x784 ?x73 ?x73 ?x73)))))
 (let ((?x43 (* u u)))
 (let ((?x173 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x564 (+ (- 4) ?x28 (* (- 6) v) ?x103 ?x119 ?x36 ?x41 ?x173 (* (+ 2 v) (+ 2 v)) ?x46 ?x195)))
 (let ((?x714 (+ r (* (- 1) v))))
 (let ((?x342 (+ 1 (* (- 1) (* (+ 2 v) ?x714 ?x714)) (* (- 1) (* ?x714 ?x714 ?x714 u u)))))
 (and (= (+ ?x28 ?x103 ?x119 ?x36 ?x149 ?x41 ?x173 ?x45 ?x46 ?x195) 0) (or (not (= (* ?x342 ?x564) 0)) (not (= (* ?x691 ?x618) 0))))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x386 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x195 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x43 (* u u)))
 (let ((?x173 (* (- 1) ?x43)))
 (let ((?x41 (* 2 v00)))
 (let ((?x119 (* (- 2) u00)))
 (let ((?x103 (* (- 4) r00)))
 (let ((?x149 (* (- 2) v)))
 (let ((?x36 (* 2 u)))
 (let ((?x28 (* 4 r)))
 (let ((?x201 (+ ?x28 ?x36 ?x149 ?x103 ?x119 ?x41 ?x173 ?x45 ?x46 ?x195)))
 (let ((?x505 (* (- 1) (* r r r u u))))
 (let ((?x387 (* (- 1) (* r r v))))
 (let ((?x846 (+ 1 ?x387 ?x505 (* (- 2) (* r u v)) (* (- 1) (* u u v)) (* (- 3) (* r r u u u)) (* (- 3) (* r u u u u)) (* (- 1) (* u u u u u)) (* (- 4) (* r r r)) (* (- 12) (* r r u)) (* (- 12) (* r u u)) (* (- 4) (* u u u)) (* (- 4) (* r r r u)) (* (- 12) (* r r u u)) (* (- 12) (* r u u u)) (* (- 4) (* u u u u)))))
 (let ((?x514 (+ 1 (* (- 2) ?x45) ?x387 (* (- 2) (* r r)) (* 4 (* r v)) (* 2 (* r v v)) (* (- 1) (* v v v)) ?x505 (* 3 (* r r u u v)) (* (- 3) (* r u u v v)) (* u u v v v))))
 (let (($x206 (= ?x201 0)))
 (let (($x506 (and $x206 (or (not (= (* ?x514 ?x201) 0)) (not (= (* ?x846 ?x201) 0))))))
 (let ((?x618 (+ 4 ?x28 (* 6 u) ?x103 ?x119 ?x149 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x195)))
 (let ((?x73 (+ r u)))
 (let ((?x784 (+ 2 u)))
 (let ((?x691 (+ 1 (* (- 1) (* ?x73 ?x73 v)) (* (- 1) (* ?x784 ?x784 ?x73 ?x73 ?x73)))))
 (let ((?x564 (+ (- 4) ?x28 (* (- 6) v) ?x103 ?x119 ?x36 ?x41 ?x173 (* (+ 2 v) (+ 2 v)) ?x46 ?x195)))
 (let ((?x714 (+ r (* (- 1) v))))
 (let ((?x342 (+ 1 (* (- 1) (* (+ 2 v) ?x714 ?x714)) (* (- 1) (* ?x714 ?x714 ?x714 u u)))))
 (let (($x446 (and (= (+ ?x28 ?x103 ?x119 ?x36 ?x149 ?x41 ?x173 ?x45 ?x46 ?x195) 0) (or (not (= (* ?x342 ?x564) 0)) (not (= (* ?x691 ?x618) 0))))))
 (rewrite (= $x446 $x506))))))))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((r Int) (u Int) (v Int) )(! (let ((?x77 (+ u 2)))
 (let ((?x73 (+ r u)))
 (let ((?x48 (* v00 v00)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 ?x73) (* 4 r00)) (* 2 u00)) (* 2 ?x77))))
 (let ((?x90 (* (- (+ (- (+ (- ?x79 ?x38) ?x41) (* ?x77 ?x77)) ?x45 ?x46) ?x48) (- (- 1 (* ?x73 ?x73 v)) (* ?x73 ?x73 ?x73 ?x77 ?x77)))))
 (let ((?x69 (- (- 1 (* (- r v) (- r v) (+ v 2))) (* (- r v) (- r v) (- r v) u u))))
 (let ((?x43 (* u u)))
 (let ((?x36 (* 2 u)))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let ((?x39 (- (+ (- (- (* 4 r) (* 4 r00)) (* 2 u00)) ?x36) ?x38)))
 (and (= (- (+ (- (+ ?x39 ?x41) ?x43) ?x45 ?x46) ?x48) 0) (or (not (= (* (- ?x63 ?x48) ?x69) 0)) (not (= ?x90 0))))))))))))))))))) :qid k!28))
 ))
 (let ((?x143 (lambda ((r Int) (u Int) (v Int) )(let ((?x48 (* v00 v00)))
 (let ((?x195 (* (- 1) ?x48)))
 (let ((?x46 (* u00 u00)))
 (let ((?x45 (* v v)))
 (let ((?x41 (* 2 v00)))
 (let ((?x149 (* (- 2) v)))
 (let ((?x119 (* (- 2) u00)))
 (let ((?x103 (* (- 4) r00)))
 (let ((?x28 (* 4 r)))
 (let ((?x618 (+ 4 ?x28 (* 6 u) ?x103 ?x119 ?x149 ?x41 (* (- 1) (* (+ 2 u) (+ 2 u))) ?x45 ?x46 ?x195)))
 (let ((?x73 (+ r u)))
 (let ((?x784 (+ 2 u)))
 (let ((?x691 (+ 1 (* (- 1) (* ?x73 ?x73 v)) (* (- 1) (* ?x784 ?x784 ?x73 ?x73 ?x73)))))
 (let ((?x43 (* u u)))
 (let ((?x173 (* (- 1) ?x43)))
 (let ((?x36 (* 2 u)))
 (let ((?x564 (+ (- 4) ?x28 (* (- 6) v) ?x103 ?x119 ?x36 ?x41 ?x173 (* (+ 2 v) (+ 2 v)) ?x46 ?x195)))
 (let ((?x714 (+ r (* (- 1) v))))
 (let ((?x342 (+ 1 (* (- 1) (* (+ 2 v) ?x714 ?x714)) (* (- 1) (* ?x714 ?x714 ?x714 u u)))))
 (let (($x446 (and (= (+ ?x28 ?x103 ?x119 ?x36 ?x149 ?x41 ?x173 ?x45 ?x46 ?x195) 0) (or (not (= (* ?x342 ?x564) 0)) (not (= (* ?x691 ?x618) 0))))))
 (let ((?x89 (- (- 1 (* ?x73 ?x73 v)) (* ?x73 ?x73 ?x73 (+ u 2) (+ u 2)))))
 (let ((?x38 (* 2 v)))
 (let ((?x79 (+ (- (- (* 4 ?x73) (* 4 r00)) (* 2 u00)) (* 2 (+ u 2)))))
 (let ((?x84 (+ (- (+ (- ?x79 ?x38) ?x41) (* (+ u 2) (+ u 2))) ?x45 ?x46)))
 (let ((?x69 (- (- 1 (* (- r v) (- r v) (+ v 2))) (* (- r v) (- r v) (- r v) u u))))
 (let ((?x56 (+ (- (- (* 4 (- r v)) (* 4 r00)) (* 2 u00)) ?x36)))
 (let ((?x63 (+ (- (+ (- ?x56 (* 2 (+ v 2))) ?x41) ?x43) (* (+ v 2) (+ v 2)) ?x46)))
 (let (($x93 (or (not (= (* (- ?x63 ?x48) ?x69) 0)) (not (= (* (- ?x84 ?x48) ?x89) 0)))))
 (let ((?x42 (+ (- (+ (- (- ?x28 (* 4 r00)) (* 2 u00)) ?x36) ?x38) ?x41)))
 (let (($x94 (and (= (- (+ (- ?x42 ?x43) ?x45 ?x46) ?x48) 0) $x93)))
 (rewrite (= $x94 $x446)))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x298 (mp (mp @x96 (quant-intro (proof-bind ?x143) (= $x95 $x271)) $x271) (rewrite (= $x271 $x271)) $x271)))
 (let ((@x115 (mp~ (mp @x298 (quant-intro (proof-bind ?x386) (= $x271 $x303)) $x303) (sk (~ $x303 $x451)) $x451)))
 (let ((@x747 (mp @x115 (rewrite (= $x451 $x779)) $x779)))
 (let ((@x655 (and-elim @x747 $x120)))
 (let ((@x715 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x299)) @x655 $x299)))
 (let (($x475 (<= ?x441 0)))
 (let ((@x636 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x120) $x475)) @x655 $x475)))
 (let (($x637 (not (<= ?x638 0))))
 (let (($x739 (>= ?x638 0)))
 (let (($x627 (>= ?x675 0)))
 (let (($x722 (<= ?x675 0)))
 (let ((@x778 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x786 (not $x722) (not $x627))) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x722)) @x636 @x715 false) $x722) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x627)) @x636 @x715 false) $x627) $x786)))
 (let ((@x777 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x746 $x637 (not $x739))) (unit-resolution (and-elim @x747 $x737) @x778 $x769) (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x739)) @x636 @x715 false) $x739) $x637)))
 ((_ th-lemma arith farkas 1 1 1) @x777 @x636 @x715 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 2
 :arith-assert-diseq        6
 :arith-assert-lower        44
 :arith-assert-upper        14
 :arith-conflicts           4
 :arith-eq-adapter          3
 :arith-fixed-eqs           5
 :arith-max-min             280
 :arith-nonlinear-bounds    27
 :arith-num-rows            4
 :arith-pivots              1
 :arith-pseudo-nonlinear    8
 :arith-row-summations      1
 :arith-tableau-max-columns 47
 :arith-tableau-max-rows    4
 :conflicts                 4
 :decisions                 6
 :del-clause                12
 :final-checks              4
 :max-memory                3.65
 :memory                    3.13
 :mk-bool-var               15
 :mk-clause                 12
 :num-allocs                1177701
 :num-checks                1
 :propagations              14
 :rlimit-count              4348
 :time                      0.01
 :total-time                0.01)
