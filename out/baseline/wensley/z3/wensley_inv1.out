unsat
((set-logic NRA)
(declare-fun b!7 () Real)
(declare-fun d!6 () Real)
(declare-fun y!5 () Real)
(declare-fun a!8 () Real)
(proof
(let ((?x176 (* (- 1.0) (* d00 b!7))))
 (let ((?x165 (* b00 d!6)))
 (let ((?x141 (* 2.0 (* b00 y!5))))
 (let ((?x200 (* (- 1.0) (* d00 a!8))))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let ((?x272 (+ ?x30 ?x72 ?x200 ?x141 ?x165 ?x176)))
 (let (($x211 (not (<= ?x272 0.0))))
 (let (($x239 (>= ?x272 0.0)))
 (let ((?x221 (+ ?x165 ?x176)))
 (let (($x116 (>= ?x221 0.0)))
 (let (($x101 (= 0.0 ?x221)))
 (let ((@x251 (symm (commutativity (= $x101 (= ?x221 0.0))) (= (= ?x221 0.0) $x101))))
 (let (($x223 (= ?x221 0.0)))
 (let (($x277 (= ?x272 0.0)))
 (let (($x266 (not $x277)))
 (let (($x278 (or (not (= (+ ?x30 ?x72 ?x200 ?x141) 0.0)) $x266)))
 (let ((?x258 (+ (* 2.0 (* y!5 b!7)) (* (- 1.0) (* a!8 d!6)) (* (- 2.0) (* y00 b!7)) (* a00 d!6))))
 (let ((?x74 (+ ?x30 ?x72 ?x200 ?x141)))
 (let (($x124 (= ?x74 0.0)))
 (let (($x269 (and $x124 $x223 (= ?x258 0.0) $x278)))
 (let ((?x88 (* d!6 b00)))
 (let ((?x227 (* 2.0 (* y!5 b00))))
 (let ((?x196 (* (- 1.0) (* a!8 d00))))
 (let (($x217 (not (= (+ ?x30 ?x196 ?x72 ?x227 (* (- 1.0) (* b!7 d00)) ?x88) 0.0))))
 (let ((?x209 (+ (* d!6 a!8) (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x131 (= (+ ?x30 ?x196 ?x72 ?x227) 0.0)))
 (let (($x186 (and $x131 (= (+ (* b!7 d00) (* (- 1.0) ?x88)) 0.0) (= ?x209 0.0) (or (not $x131) $x217))))
 (let (($x243 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x91 (* d b00)))
 (let ((?x85 (* b d00)))
 (let ((?x86 (* (- 1.0) ?x85)))
 (let ((?x78 (* 2.0 (* y b00))))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x93 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x104 (= (+ ?x30 ?x93 ?x72 ?x78) 0.0)))
 (let (($x102 (not $x104)))
 (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x156 (= (+ ?x90 ?x121 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x82 (= (+ ?x85 (* (- 1.0) ?x91)) 0.0)))
 (and $x104 $x82 $x156 (or $x102 (not (= (+ ?x30 ?x93 ?x72 ?x78 ?x86 ?x91) 0.0)))))))))))))))))) :qid k!32))
 ))
 (let (($x158 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x136 (+ ?x72 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let (($x181 (= (+ ?x72 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x162 (= (+ ?x90 ?x121 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (and $x181 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x162 (or (not $x181) (not (= ?x136 0.0))))))))))) :qid k!32))
 ))
 (let ((?x178 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x91 (* d b00)))
 (let ((?x85 (* b d00)))
 (let ((?x86 (* (- 1.0) ?x85)))
 (let ((?x78 (* 2.0 (* y b00))))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x33 (* a d00)))
 (let ((?x93 (* (- 1.0) ?x33)))
 (let ((?x30 (* a00 d00)))
 (let (($x104 (= (+ ?x30 ?x93 ?x72 ?x78) 0.0)))
 (let (($x102 (not $x104)))
 (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x156 (= (+ ?x90 ?x121 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x82 (= (+ ?x85 (* (- 1.0) ?x91)) 0.0)))
 (let (($x127 (and $x104 $x82 $x156 (or $x102 (not (= (+ ?x30 ?x93 ?x72 ?x78 ?x86 ?x91) 0.0))))))
 (let ((?x136 (+ ?x72 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let (($x181 (= (+ ?x72 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x162 (= (+ ?x90 ?x121 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x132 (and $x181 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x162 (or (not $x181) (not (= ?x136 0.0))))))
 (rewrite (= $x132 $x127))))))))))))))))))))))
 ))
 (let (($x63 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x30 (* a00 d00)))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x58 (- (+ ?x27 ?x30 (* 2.0 b00 (+ y (/ d 2.0)))) (* (+ a b) d00))))
 (let (($x36 (= (- (+ ?x27 ?x30 (* 2.0 b00 y)) (* a d00)) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x36) (not (= ?x58 0.0)))))))))) :qid k!32))
 ))
 (let ((?x146 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x30 (* a00 d00)))
 (let ((?x72 (* (- 2.0) (* b00 y00))))
 (let ((?x136 (+ ?x72 ?x30 (* 2.0 (* b00 (+ y (* (/ 1.0 2.0) d)))) (* (- 1.0) (* d00 (+ a b))))))
 (let (($x181 (= (+ ?x72 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x121 (* (- 2.0) (* y b))))
 (let ((?x90 (* d a)))
 (let (($x162 (= (+ ?x90 ?x121 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x132 (and $x181 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0) $x162 (or (not $x181) (not (= ?x136 0.0))))))
 (let ((?x27 (* (- 2.0) b00 y00)))
 (let ((?x58 (- (+ ?x27 ?x30 (* 2.0 b00 (+ y (/ d 2.0)))) (* (+ a b) d00))))
 (let (($x36 (= (- (+ ?x27 ?x30 (* 2.0 b00 y)) (* a d00)) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let (($x62 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x36) (not (= ?x58 0.0))))))
 (rewrite (= $x62 $x132)))))))))))))))))
 ))
 (let ((@x64 (asserted $x63)))
 (let ((@x170 (mp (mp @x64 (quant-intro (proof-bind ?x146) (= $x63 $x158)) $x158) (quant-intro (proof-bind ?x178) (= $x158 $x243)) $x243)))
 (let ((@x280 (mp (mp~ @x170 (sk (~ $x243 $x186)) $x186) (rewrite (= $x186 $x269)) $x269)))
 (let ((@x252 (mp (and-elim @x280 $x223) @x251 $x101)))
 (let (($x153 (>= ?x74 0.0)))
 (let (($x164 (= 0.0 ?x74)))
 (let ((@x271 (and-elim @x280 $x124)))
 (let ((@x204 (mp @x271 (symm (commutativity (= $x164 $x124)) (= $x124 $x164)) $x164)))
 (let ((@x199 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x153)) @x204 $x153) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x101) $x116)) @x252 $x116) (hypothesis (not $x239)) false)))
 (let (($x202 (= 0.0 ?x272)))
 (let (($x224 (not $x202)))
 (let ((@x226 (monotonicity (symm (commutativity (= $x202 $x277)) (= $x277 $x202)) (= $x266 $x224))))
 (let ((@x268 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x202 $x211 (not $x239))) (mp (unit-resolution (and-elim @x280 $x278) @x271 $x266) @x226 $x224) (or $x211 (not $x239)))))
 (let (($x109 (<= ?x221 0.0)))
 (let (($x171 (<= ?x74 0.0)))
 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x164) $x171)) @x204 $x171) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x101) $x109)) @x252 $x109) (unit-resolution @x268 (lemma @x199 $x239) $x211) false)))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs           10
 :arith-eq-adapter    4
 :arith-conflicts     2
 :arith-diseq         2
 :arith-lower         5
 :arith-make-feasible 3
 :arith-max-columns   26
 :arith-max-rows      4
 :arith-upper         5
 :conflicts           2
 :decisions           1
 :del-clause          14
 :max-memory          1.40
 :memory              0.97
 :mk-bool-var         18
 :mk-clause           16
 :num-allocs          68339
 :num-checks          1
 :propagations        8
 :rlimit-count        1531
 :time                0.00
 :total-time          0.01)
