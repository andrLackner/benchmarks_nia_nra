unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x156 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x171 (>= ?x156 0)))
 (let (($x218 (= ?x156 0)))
 (let ((?x136 (* 3 (* y!0 y!0))))
 (let ((?x98 (* (- 2) x!1)))
 (let ((?x99 (* x!1 x!1)))
 (let ((?x51 (* 4 y!0)))
 (let ((?x59 (* y!0 y!0 y!0)))
 (let ((?x229 (+ 2 (* (- 2) (* y!0 y!0 y!0 x!1)) ?x59 (* y!0 y!0 y!0 x!1 x!1) ?x51 ?x99 (* (- 6) (* y!0 x!1)) ?x98 (* 3 (* y!0 y!0 x!1 x!1)) ?x136 (* 3 (* y!0 x!1 x!1)) (* (- 6) (* y!0 y!0 x!1)))))
 (let ((?x232 (* ?x229 (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1))))
 (let (($x121 (= ?x232 0)))
 (let (($x234 (not $x121)))
 (let (($x160 (and $x218 $x234)))
 (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x188 (+ x!1 y!0 ?x49 ?x56)))
 (let ((?x52 (+ 2 ?x98 ?x51 ?x136 ?x59 (* (- 2) (* x!1 y!0 y!0 y!0)) (* x!1 x!1 y!0 y!0 y!0) ?x99 (* (- 6) (* x!1 y!0)) (* 3 (* x!1 x!1 y!0)) (* (- 6) (* x!1 y!0 y!0)) (* 3 (* x!1 x!1 y!0 y!0)))))
 (let (($x213 (and (= ?x188 0) (not (= (* ?x52 ?x188) 0)))))
 (let (($x216 (exists ((x Int) (y Int) )(! (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x255 (* 4 y)))
 (let ((?x62 (+ 2 (* (- 2) x) ?x255 ?x238 ?x164 ?x242 ?x170 ?x181 (* (- 6) (* x y)) ?x237 (* (- 6) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (and $x75 (not (= (* ?x62 ?x70) 0)))))))))))))))) :qid k!26))
 ))
 (let (($x102 (exists ((x Int) (y Int) )(! (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x255 (* 4 y)))
 (let ((?x256 (+ 2 (* (- 1) x) ?x255 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x238 (* (- 1) (* x 1 y y)) ?x164 ?x242 ?x170 ?x181 (* (- 3) (* x y)) ?x237 (* (- 3) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (and $x75 (not (= (* ?x256 ?x70) 0)))))))))))))))) :qid k!26))
 ))
 (let ((?x153 (lambda ((x Int) (y Int) )(let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x255 (* 4 y)))
 (let ((?x62 (+ 2 (* (- 2) x) ?x255 ?x238 ?x164 ?x242 ?x170 ?x181 (* (- 6) (* x y)) ?x237 (* (- 6) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (let (($x111 (and $x75 (not (= (* ?x62 ?x70) 0)))))
 (let ((?x256 (+ 2 (* (- 1) x) ?x255 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x238 (* (- 1) (* x 1 y y)) ?x164 ?x242 ?x170 ?x181 (* (- 3) (* x y)) ?x237 (* (- 3) (* x y y)) ?x240)))
 (let (($x193 (and $x75 (not (= (* ?x256 ?x70) 0)))))
 (rewrite (= $x193 $x111)))))))))))))))))))
 ))
 (let (($x69 (exists ((x Int) (y Int) )(! (let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x65 (+ x ?x49 ?x56 y)))
 (let ((?x132 (+ 1 y)))
 (let ((?x58 (+ (- 1) x)))
 (let (($x68 (not (= (* (+ 1 (* ?x58 ?x58 ?x132 ?x132 ?x132) y) ?x65) 0))))
 (and (= ?x65 0) $x68))))))) :qid k!26))
 ))
 (let ((?x85 (lambda ((x Int) (y Int) )(let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x70 (+ x y ?x49 ?x56)))
 (let ((?x240 (* 3 (* x x y y))))
 (let ((?x237 (* 3 (* x x y))))
 (let ((?x181 (* x x)))
 (let ((?x170 (* x x y y y)))
 (let ((?x242 (* (- 2) (* x y y y))))
 (let ((?x164 (* y y y)))
 (let ((?x238 (* 3 (* y y))))
 (let ((?x255 (* 4 y)))
 (let ((?x256 (+ 2 (* (- 1) x) ?x255 (* (- 1) (* x 1 1 1)) (* (- 1) (* x y 1 1)) (* (- 1) (* x 1 y 1)) (* (- 1) (* x y y 1)) (* (- 1) (* x 1 1 y)) (* (- 1) (* x y 1 y)) ?x238 (* (- 1) (* x 1 y y)) ?x164 ?x242 ?x170 ?x181 (* (- 3) (* x y)) ?x237 (* (- 3) (* x y y)) ?x240)))
 (let (($x75 (= ?x70 0)))
 (let (($x193 (and $x75 (not (= (* ?x256 ?x70) 0)))))
 (let ((?x65 (+ x ?x49 ?x56 y)))
 (let ((?x132 (+ 1 y)))
 (let ((?x58 (+ (- 1) x)))
 (let (($x68 (not (= (* (+ 1 (* ?x58 ?x58 ?x132 ?x132 ?x132) y) ?x65) 0))))
 (let (($x179 (and (= ?x65 0) $x68)))
 (rewrite (= $x179 $x193))))))))))))))))))))))
 ))
 (let (($x46 (exists ((x Int) (y Int) )(! (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) y 1))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x41 0))))))) :qid k!26))
 ))
 (let ((?x110 (lambda ((x Int) (y Int) )(let ((?x56 (* (- 1) x00)))
 (let ((?x49 (* (- 1) y00)))
 (let ((?x65 (+ x ?x49 ?x56 y)))
 (let ((?x132 (+ 1 y)))
 (let ((?x58 (+ (- 1) x)))
 (let (($x68 (not (= (* (+ 1 (* ?x58 ?x58 ?x132 ?x132 ?x132) y) ?x65) 0))))
 (let (($x179 (and (= ?x65 0) $x68)))
 (let ((?x38 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (* (+ (- (- ?x34 y00) x00) y 1) (+ (* ?x34 ?x34 ?x38 ?x38 ?x38) y 1))))
 (let (($x45 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x41 0))))))
 (rewrite (= $x45 $x179))))))))))))))
 ))
 (let ((@x47 (asserted $x46)))
 (let ((@x185 (mp (mp @x47 (quant-intro (proof-bind ?x110) (= $x46 $x69)) $x69) (rewrite (= $x69 $x69)) $x69)))
 (let ((@x55 (mp (mp @x185 (quant-intro (proof-bind ?x85) (= $x69 $x102)) $x102) (quant-intro (proof-bind ?x153) (= $x102 $x216)) $x216)))
 (let ((@x83 (mp (mp~ @x55 (sk (~ $x216 $x213)) $x213) (rewrite (= $x213 $x160)) $x160)))
 (let ((@x124 (and-elim @x83 $x218)))
 (let ((@x226 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x171)) @x124 $x171)))
 (let (($x230 (<= ?x156 0)))
 (let ((@x159 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x218) $x230)) @x124 $x230)))
 (let (($x84 (not (>= ?x232 0))))
 (let (($x130 (<= ?x232 0)))
 (let ((@x231 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x121 (not $x130) $x84)) (and-elim @x83 $x234) (or (not $x130) $x84))))
 (let ((@x243 (unit-resolution @x231 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x130)) @x159 @x226 false) $x130) $x84)))
 ((_ th-lemma arith farkas 1 1 1) @x243 @x159 @x226 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             54
 :arith-nonlinear-bounds    6
 :arith-num-rows            3
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 23
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.47
 :memory                    3.08
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1050439
 :num-checks                1
 :propagations              4
 :rlimit-count              1560
 :time                      0.01
 :total-time                0.01)
