unsat
((set-logic NIA)
(proof
(let (($x56 (exists ((q Int) (r Int) (y Int) )(! (let ((?x42 (- r y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* ?x44 ?x44 ?x42 y00)))
 (let ((?x49 (* ?x44 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00 y00)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x48 (+ ?x46 ?x47)))
 (let ((?x50 (- ?x48 ?x49)))
 (let ((?x51 (+ ?x50 ?x49 ?x45)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (and $x33 $x41 $x54))))))))))))))))) :qid k!29))
 ))
 (let (($x229 (exists ((q Int) (r Int) (y Int) )(! false :qid k!29))
 ))
 (let ((?x238 (lambda ((q Int) (r Int) (y Int) )(let ((?x42 (- r y00)))
 (let ((?x44 (+ q 1)))
 (let ((?x45 (* ?x44 ?x44 ?x42 y00)))
 (let ((?x49 (* ?x44 y00 y00 y00 y00)))
 (let ((?x47 (* ?x42 ?x42 y00 y00)))
 (let ((?x28 (- 1)))
 (let ((?x43 (* ?x28 ?x42 ?x42 y00 y00)))
 (let ((?x46 (- ?x43 ?x45)))
 (let ((?x48 (+ ?x46 ?x47)))
 (let ((?x50 (- ?x48 ?x49)))
 (let ((?x51 (+ ?x50 ?x49 ?x45)))
 (let (($x52 (= ?x51 0)))
 (let (($x53 (not $x52)))
 (let (($x54 (or $x53)))
 (let (($x41 (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0)))
 (let (($x33 (= (+ (* ?x28 y00) y) 0)))
 (let (($x55 (and $x33 $x41 $x54)))
 (let (($x128 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x193 (= (+ (* (- 1) y00) y) 0)))
 (let (($x217 (and $x193 $x128 false)))
 (let ((?x61 (* (- 1) y00)))
 (let ((?x184 (+ r ?x61)))
 (let ((?x157 (+ 1 q)))
 (let ((?x160 (* y00 ?x157 ?x157 ?x184)))
 (let ((?x131 (* y00 y00 y00 y00 ?x157)))
 (let ((?x99 (* (- 1) ?x160)))
 (let ((?x143 (+ ?x99 (* (- 1) ?x131))))
 (let ((?x85 (+ ?x143 ?x131 ?x160)))
 (let ((@x199 (rewrite (= ?x42 ?x184))))
 (let ((@x158 (rewrite (= ?x44 ?x157))))
 (let ((@x175 (trans (monotonicity @x158 @x158 @x199 (= ?x45 (* ?x157 ?x157 ?x184 y00))) (rewrite (= (* ?x157 ?x157 ?x184 y00) ?x160)) (= ?x45 ?x160))))
 (let ((@x134 (trans (monotonicity @x158 (= ?x49 (* ?x157 y00 y00 y00 y00))) (rewrite (= (* ?x157 y00 y00 y00 y00) ?x131)) (= ?x49 ?x131))))
 (let ((?x204 (* y00 y00 ?x184 ?x184)))
 (let ((?x205 (* (- 1) ?x204)))
 (let ((?x236 (+ ?x205 ?x99)))
 (let ((?x121 (+ ?x236 ?x204)))
 (let ((@x120 (trans (monotonicity @x199 @x199 (= ?x47 (* ?x184 ?x184 y00 y00))) (rewrite (= (* ?x184 ?x184 y00 y00) ?x204)) (= ?x47 ?x204))))
 (let ((@x203 (monotonicity (rewrite (= ?x28 (- 1))) @x199 @x199 (= ?x43 (* (- 1) ?x184 ?x184 y00 y00)))))
 (let ((@x106 (trans @x203 (rewrite (= (* (- 1) ?x184 ?x184 y00 y00) ?x205)) (= ?x43 ?x205))))
 (let ((@x82 (trans (monotonicity @x106 @x175 (= ?x46 (- ?x205 ?x160))) (rewrite (= (- ?x205 ?x160) ?x236)) (= ?x46 ?x236))))
 (let ((@x126 (trans (monotonicity @x82 @x120 (= ?x48 ?x121)) (rewrite (= ?x121 ?x99)) (= ?x48 ?x99))))
 (let ((@x80 (trans (monotonicity @x126 @x134 (= ?x50 (- ?x99 ?x131))) (rewrite (= (- ?x99 ?x131) ?x143)) (= ?x50 ?x143))))
 (let ((@x101 (trans (monotonicity @x80 @x134 @x175 (= ?x51 ?x85)) (rewrite (= ?x85 0)) $x52)))
 (let ((@x145 (trans (monotonicity @x101 (= $x52 (= 0 0))) (rewrite (= (= 0 0) true)) (= $x52 true))))
 (let ((@x170 (trans (monotonicity @x145 (= $x53 (not true))) (rewrite (= (not true) false)) (= $x53 false))))
 (let ((@x178 (trans (monotonicity @x170 (= $x54 (or false))) (rewrite (= (or false) false)) (= $x54 false))))
 (let ((@x219 (monotonicity (rewrite (= $x33 $x193)) (rewrite (= $x41 $x128)) @x178 (= $x55 $x217))))
 (trans @x219 (rewrite (= $x217 false)) (= $x55 false))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x244 (trans (quant-intro (proof-bind ?x238) (= $x56 $x229)) (elim-unused (= $x229 false)) (= $x56 false))))
 (let ((@x57 (asserted $x56)))
 (mp @x57 @x244 false))))))))

(:max-memory   3.36
 :memory       3.05
 :mk-bool-var  5
 :num-allocs   900528
 :rlimit-count 233
 :time         0.01
 :total-time   0.01)
