unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x359 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x399 (>= ?x359 (- 6))))
 (let (($x483 (= ?x359 (- 6))))
 (let ((?x176 (* 6 (* m!1 m!1))))
 (let ((?x613 (* 2 (* k!2 m!1 m!1))))
 (let ((?x122 (* 6 (* k!2 k!2 n!0 n!0))))
 (let ((?x324 (+ k!2 c!3)))
 (let ((?x96 (+ k!2 m!1)))
 (let ((?x506 (+ 1 n!0)))
 (let ((?x504 (* k!2 k!2 m!1)))
 (let ((?x480 (+ 6 m!1)))
 (let ((?x457 (* ?x506 ?x506 ?x506 ?x480 ?x480 ?x480 ?x96 ?x96)))
 (let ((?x443 (* m!1 m!1 m!1)))
 (let ((?x296 (* ?x506 ?x506 ?x480 ?x480 ?x480 ?x96 ?x96)))
 (let ((?x474 (* 12 (* k!2 k!2 n!0))))
 (let ((?x297 (* (- 1) (* ?x506 ?x506 ?x506 ?x96 ?x96 ?x96))))
 (let ((?x494 (* 12 (* k!2 m!1))))
 (let ((?x98 (* k!2 k!2)))
 (let ((?x449 (* 6 ?x98)))
 (let ((?x113 (+ ?x449 ?x494 (* 12 (* k!2 n!0 n!0 m!1)) (* 2 (* n!0 m!1 m!1 m!1)) (* 6 (* n!0 n!0 m!1 m!1)) ?x297 (* k!2 k!2 n!0 n!0 m!1) (* 2 (* k!2 n!0 n!0 m!1 m!1)) (* 4 (* k!2 n!0 m!1 m!1)) ?x474 ?x296 (* 12 (* n!0 m!1 m!1)) (* 2 (* k!2 k!2 n!0 m!1)) (* 24 (* k!2 n!0 m!1)) ?x443 ?x457 ?x504 (* n!0 n!0 m!1 m!1 m!1) (* ?x506 ?x506 ?x506 ?x96 ?x96 ?x324 ?x324 ?x324) ?x122 ?x613 ?x176)))
 (let ((?x380 (* (+ (- 6) (* (- 6) n!0) m!1) ?x113)))
 (let (($x536 (= ?x380 0)))
 (let (($x375 (not $x536)))
 (let (($x423 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1)))
 (let (($x350 (= (+ k!2 (* (- 1) (* k!2 n!0)) (* (- 2) n!0) (* 3 c!3)) 1)))
 (let ((?x478 (+ ?x98 (* (- 5) k!2) (* 9 n!0) (* (- 18) c!3) (* (- 9) (* n!0 c!3)))))
 (let (($x352 (and $x483 (= ?x478 (- 4)) $x350 $x423 $x375)))
 (let ((?x289 (+ c!3 k!2)))
 (let ((?x413 (+ ?x449 ?x457 ?x296 ?x297 (* ?x506 ?x506 ?x506 ?x96 ?x96 ?x289 ?x289 ?x289) ?x474 ?x443 ?x613 ?x504 ?x176 ?x494 (* m!1 m!1 m!1 n!0 n!0) (* 2 (* k!2 m!1 m!1 n!0 n!0)) (* k!2 k!2 m!1 n!0 n!0) (* 24 (* k!2 m!1 n!0)) (* 12 (* m!1 m!1 n!0)) (* 2 (* k!2 k!2 m!1 n!0)) (* 4 (* k!2 m!1 m!1 n!0)) (* 2 (* m!1 m!1 m!1 n!0)) ?x122 (* 12 (* k!2 m!1 n!0 n!0)) (* 6 (* m!1 m!1 n!0 n!0)))))
 (let (($x239 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x357 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x98) (* 9 (* c!3 n!0)))))
 (let (($x501 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x357 4) $x239 $x423 (not (= (* (+ (- 6) m!1 (* (- 6) n!0)) ?x413) 0)))))
 (let (($x428 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x516 (* 6 (* m m n n))))
 (let ((?x534 (* 12 (* k m n n))))
 (let ((?x500 (* 6 (* k k n n))))
 (let ((?x533 (* 2 (* m m m n))))
 (let ((?x532 (* 4 (* k m m n))))
 (let ((?x531 (* 2 (* k k m n))))
 (let ((?x530 (* 12 (* m m n))))
 (let ((?x529 (* 24 (* k m n))))
 (let ((?x411 (* k k m n n)))
 (let ((?x535 (* 2 (* k m m n n))))
 (let ((?x408 (* m m m n n)))
 (let ((?x395 (* k m)))
 (let ((?x525 (* 12 ?x395)))
 (let ((?x386 (* 6 (* m m))))
 (let ((?x383 (* k k m)))
 (let ((?x526 (* 2 (* k m m))))
 (let ((?x370 (* m m m)))
 (let ((?x527 (* 12 (* k k n))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x402 (* 6 ?x49)))
 (let ((?x193 (+ ?x402 ?x242 ?x254 ?x247 ?x307 ?x527 ?x370 ?x526 ?x383 ?x386 ?x525 ?x408 ?x535 ?x411 ?x529 ?x530 ?x531 ?x532 ?x533 ?x500 ?x534 ?x516)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x193) 0)))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x120 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x516 (* 6 (* m m n n))))
 (let ((?x534 (* 12 (* k m n n))))
 (let ((?x500 (* 6 (* k k n n))))
 (let ((?x533 (* 2 (* m m m n))))
 (let ((?x532 (* 4 (* k m m n))))
 (let ((?x531 (* 2 (* k k m n))))
 (let ((?x530 (* 12 (* m m n))))
 (let ((?x529 (* 24 (* k m n))))
 (let ((?x411 (* k k m n n)))
 (let ((?x535 (* 2 (* k m m n n))))
 (let ((?x408 (* m m m n n)))
 (let ((?x386 (* 6 (* m m))))
 (let ((?x383 (* k k m)))
 (let ((?x526 (* 2 (* k m m))))
 (let ((?x370 (* m m m)))
 (let ((?x527 (* 12 (* k k n))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x402 (* 6 ?x49)))
 (let ((?x95 (+ ?x402 ?x242 ?x254 ?x247 ?x307 ?x527 ?x370 ?x526 ?x383 ?x386 (* 6 (* k m)) ?x408 ?x535 ?x411 (* 6 (* m k)) ?x529 ?x530 ?x531 ?x532 ?x533 ?x500 ?x534 ?x516)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x95) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x493 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x516 (* 6 (* m m n n))))
 (let ((?x534 (* 12 (* k m n n))))
 (let ((?x500 (* 6 (* k k n n))))
 (let ((?x533 (* 2 (* m m m n))))
 (let ((?x532 (* 4 (* k m m n))))
 (let ((?x531 (* 2 (* k k m n))))
 (let ((?x530 (* 12 (* m m n))))
 (let ((?x529 (* 24 (* k m n))))
 (let ((?x411 (* k k m n n)))
 (let ((?x535 (* 2 (* k m m n n))))
 (let ((?x408 (* m m m n n)))
 (let ((?x395 (* k m)))
 (let ((?x525 (* 12 ?x395)))
 (let ((?x386 (* 6 (* m m))))
 (let ((?x383 (* k k m)))
 (let ((?x526 (* 2 (* k m m))))
 (let ((?x370 (* m m m)))
 (let ((?x527 (* 12 (* k k n))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x402 (* 6 ?x49)))
 (let ((?x193 (+ ?x402 ?x242 ?x254 ?x247 ?x307 ?x527 ?x370 ?x526 ?x383 ?x386 ?x525 ?x408 ?x535 ?x411 ?x529 ?x530 ?x531 ?x532 ?x533 ?x500 ?x534 ?x516)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x192 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x193) 0)))))
 (let ((?x95 (+ ?x402 ?x242 ?x254 ?x247 ?x307 ?x527 ?x370 ?x526 ?x383 ?x386 (* 6 ?x395) ?x408 ?x535 ?x411 (* 6 (* m k)) ?x529 ?x530 ?x531 ?x532 ?x533 ?x500 ?x534 ?x516)))
 (let (($x450 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x95) 0)))))
 (rewrite (= $x450 $x192)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x277 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x72 (+ c k)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x260 (= (* ?x118 (+ ?x307 (* ?x318 ?x318 ?x364 ?x73 ?x73) ?x242 ?x254 ?x247)) 0)))
 (let (($x309 (not $x260)))
 (let (($x517 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x280 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x280 $x517 $x309))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x320 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x516 (* 6 (* m m n n))))
 (let ((?x534 (* 12 (* k m n n))))
 (let ((?x500 (* 6 (* k k n n))))
 (let ((?x533 (* 2 (* m m m n))))
 (let ((?x532 (* 4 (* k m m n))))
 (let ((?x531 (* 2 (* k k m n))))
 (let ((?x530 (* 12 (* m m n))))
 (let ((?x529 (* 24 (* k m n))))
 (let ((?x411 (* k k m n n)))
 (let ((?x535 (* 2 (* k m m n n))))
 (let ((?x408 (* m m m n n)))
 (let ((?x386 (* 6 (* m m))))
 (let ((?x383 (* k k m)))
 (let ((?x526 (* 2 (* k m m))))
 (let ((?x370 (* m m m)))
 (let ((?x527 (* 12 (* k k n))))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x49 (* k k)))
 (let ((?x402 (* 6 ?x49)))
 (let ((?x95 (+ ?x402 ?x242 ?x254 ?x247 ?x307 ?x527 ?x370 ?x526 ?x383 ?x386 (* 6 (* k m)) ?x408 ?x535 ?x411 (* 6 (* m k)) ?x529 ?x530 ?x531 ?x532 ?x533 ?x500 ?x534 ?x516)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x303 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x265 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x213 (= (+ ?x40 ?x44 ?x215 ?x216 (* 9 (* c n))) 4)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x450 (and $x129 $x213 $x265 $x303 (not (= (* ?x118 ?x95) 0)))))
 (let (($x260 (= (* ?x118 (+ ?x307 (* ?x318 ?x318 ?x364 ?x73 ?x73) ?x242 ?x254 ?x247)) 0)))
 (let (($x309 (not $x260)))
 (let (($x517 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x280 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x425 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x280 $x517 $x309)))
 (rewrite (= $x425 $x450))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x223 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x72 (+ c k)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x260 (= (* ?x118 (+ ?x307 (* ?x318 ?x318 ?x364 ?x73 ?x73) ?x242 ?x254 ?x247)) 0)))
 (let (($x309 (not $x260)))
 (let (($x517 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x486 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x434 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m ?x112) 6)))
 (and $x129 (= ?x434 (- 4)) $x486 $x517 $x309))))))))))))))))))) :qid k!34))
 ))
 (let ((?x286 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x72 (+ c k)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x260 (= (* ?x118 (+ ?x307 (* ?x318 ?x318 ?x364 ?x73 ?x73) ?x242 ?x254 ?x247)) 0)))
 (let (($x309 (not $x260)))
 (let (($x517 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x280 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x216 (* (- 1) ?x49)))
 (let ((?x215 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x425 (and $x129 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x215 ?x216) 4) $x280 $x517 $x309)))
 (let (($x486 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x434 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x245 (and $x129 (= ?x434 (- 4)) $x486 $x517 $x309)))
 (rewrite (= $x245 $x425))))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x73 (+ k m)))
 (let ((?x75 (+ m 6)))
 (let ((?x72 (+ c k)))
 (let ((?x79 (+ (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x75 ?x75 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x75 ?x75 ?x69 ?x69))))
 (let ((?x82 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x79 (* ?x73 ?x73 ?x73 ?x69 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x256 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x73 (+ k m)))
 (let ((?x318 (+ 1 n)))
 (let ((?x247 (* (- 1) (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x73))))
 (let ((?x364 (+ 6 m)))
 (let ((?x254 (* ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x242 (* ?x318 ?x318 ?x318 ?x364 ?x364 ?x364 ?x73 ?x73)))
 (let ((?x72 (+ c k)))
 (let ((?x307 (* ?x318 ?x318 ?x318 ?x73 ?x73 ?x72 ?x72 ?x72)))
 (let ((?x112 (* (- 6) n)))
 (let ((?x118 (+ (- 6) m ?x112)))
 (let (($x260 (= (* ?x118 (+ ?x307 (* ?x318 ?x318 ?x364 ?x73 ?x73) ?x242 ?x254 ?x247)) 0)))
 (let (($x309 (not $x260)))
 (let (($x517 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x486 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x434 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x129 (= (+ m ?x112) 6)))
 (let (($x245 (and $x129 (= ?x434 (- 4)) $x486 $x517 $x309)))
 (let ((?x69 (+ n 1)))
 (let ((?x75 (+ m 6)))
 (let ((?x79 (+ (* ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x75 ?x75 ?x69 ?x69 ?x69) (* ?x73 ?x73 ?x75 ?x75 ?x75 ?x69 ?x69))))
 (let ((?x82 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) (- ?x79 (* ?x73 ?x73 ?x73 ?x69 ?x69 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x245))))))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x276 (mp (mp @x88 (quant-intro (proof-bind ?x256) (= $x87 $x223)) $x223) (rewrite (= $x223 $x223)) $x223)))
 (let ((@x282 (mp (mp @x276 (quant-intro (proof-bind ?x286) (= $x223 $x277)) $x277) (quant-intro (proof-bind ?x320) (= $x277 $x120)) $x120)))
 (let ((@x121 (mp~ (mp @x282 (quant-intro (proof-bind ?x493) (= $x120 $x428)) $x428) (sk (~ $x428 $x501)) $x501)))
 (let ((@x391 (mp @x121 (rewrite (= $x501 $x352)) $x352)))
 (let ((@x263 (and-elim @x391 $x483)))
 (let ((@x196 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x483) $x399)) @x263 $x399)))
 (let (($x325 (<= ?x359 (- 6))))
 (let ((@x537 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x483) $x325)) @x263 $x325)))
 (let (($x230 (not (<= ?x380 0))))
 (let (($x264 (>= ?x380 0)))
 (let ((@x454 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x536 $x230 (not $x264))) (and-elim @x391 $x375) (or $x230 (not $x264)))))
 (let ((@x251 (unit-resolution @x454 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x264)) @x537 @x196 false) $x264) $x230)))
 ((_ th-lemma arith farkas 1 1 1) @x251 @x537 @x196 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        27
 :arith-assert-upper        25
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             139
 :arith-nonlinear-bounds    26
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      4
 :arith-tableau-max-columns 55
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                3.63
 :memory                    3.15
 :mk-bool-var               24
 :mk-clause                 16
 :num-allocs                1114739
 :num-checks                1
 :propagations              10
 :rlimit-count              3770
 :time                      0.01
 :total-time                0.01)
