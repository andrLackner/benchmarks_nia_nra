unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x755 (to_real d!1)))
 (let ((?x640 (to_real b!2)))
 (let ((?x355 (to_real a!3)))
 (let ((?x61 (to_real b00)))
 (let ((?x194 (to_real y!0)))
 (let ((?x66 (to_real d00)))
 (let ((?x1123 (* (/ 1.0 4.0) (* ?x66 ?x194 ?x355 ?x640 ?x755))))
 (let ((?x1142 (* (- (/ 1.0 16.0)) (* ?x61 ?x194 ?x355 ?x355 ?x640 ?x755 ?x755 ?x755))))
 (let ((?x1111 (* (- (/ 1.0 8.0)) (* ?x66 ?x194 ?x640 ?x640 ?x640))))
 (let ((?x1104 (* (/ 1.0 8.0) (* ?x66 ?x194 ?x194 ?x355 ?x355 ?x640 ?x640 ?x640))))
 (let ((?x1097 (* (/ 1.0 16.0) (* ?x66 ?x194 ?x355 ?x355 ?x640 ?x640 ?x755 ?x755))))
 (let ((?x1099 (* (- (/ 1.0 8.0)) (* ?x61 ?x194 ?x194 ?x355 ?x355 ?x640 ?x640 ?x755))))
 (let ((?x1208 (* (- (/ 1.0 4.0)) (* ?x61 ?x194 ?x355 ?x755 ?x755))))
 (let ((?x1207 (* (/ 1.0 8.0) (* ?x61 ?x194 ?x640 ?x640 ?x755))))
 (let ((?x433 (+ (* (/ 1.0 8.0) (* ?x66 ?x194 ?x355 ?x355 ?x640 ?x640 ?x640 ?x755)) (* (- (/ 1.0 16.0)) (* ?x66 ?x640 ?x640 ?x640 ?x755)) (* (/ 1.0 16.0) (* ?x61 ?x640 ?x640 ?x755 ?x755)) (* (/ 1.0 32.0) (* ?x66 ?x355 ?x355 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (- (/ 1.0 4.0)) (* ?x61 ?x194 ?x355 ?x640 ?x640 ?x640 ?x755 ?x755)) (* (- (/ 1.0 8.0)) (* ?x61 ?x194 ?x194 ?x640 ?x640 ?x640 ?x640 ?x755)) (* (/ 1.0 16.0) (* ?x66 ?x194 ?x640 ?x640 ?x640 ?x640 ?x755 ?x755)) (* (- (/ 1.0 32.0)) (* ?x61 ?x640 ?x640 ?x640 ?x755 ?x755 ?x755 ?x755)) (* (/ 1.0 16.0) (* ?x66 ?x355 ?x640 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (/ 1.0 8.0) (* ?x66 ?x355 ?x640 ?x755 ?x755)) (* (/ 1.0 4.0) (* ?x66 ?x194 ?x640 ?x640 ?x755)) (* (- (/ 1.0 32.0)) (* ?x61 ?x355 ?x355 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (- (/ 1.0 32.0)) (* ?x61 ?x640 ?x640 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (- (/ 1.0 16.0)) (* ?x61 ?x194 ?x640 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (- (/ 1.0 8.0)) (* ?x61 ?x194 ?x355 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (/ 1.0 8.0) (* ?x66 ?x640 ?x640 ?x755 ?x755)) (* (/ 1.0 8.0) (* ?x66 ?x194 ?x355 ?x640 ?x640 ?x640 ?x755 ?x755)) (* (- (/ 1.0 16.0)) (* ?x61 ?x355 ?x640 ?x640 ?x755 ?x755 ?x755 ?x755)) (* (- (/ 1.0 8.0)) (* ?x61 ?x194 ?x355 ?x355 ?x640 ?x640 ?x755 ?x755)) ?x1207 ?x1208 ?x1099 ?x1097 ?x1104 ?x1111 ?x1142 ?x1123 (* (- (/ 1.0 8.0)) (* ?x61 ?x355 ?x755 ?x755 ?x755)) (* (- (/ 1.0 8.0)) (* ?x61 ?x640 ?x755 ?x755 ?x755)) (* (- (/ 1.0 16.0)) (* ?x61 ?x355 ?x640 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (- (/ 1.0 8.0)) (* ?x61 ?x194 ?x640 ?x640 ?x640 ?x640 ?x755 ?x755)) (* (/ 1.0 4.0) (* ?x66 ?x194 ?x355 ?x640 ?x640 ?x640 ?x640 ?x755)) (* (/ 1.0 8.0) (* ?x66 ?x194 ?x640 ?x640 ?x640 ?x640 ?x640 ?x755)) (* (/ 1.0 4.0) (* ?x66 ?x194 ?x194 ?x355 ?x640 ?x640 ?x640 ?x640)) (* (- (/ 1.0 4.0)) (* ?x61 ?x194 ?x194 ?x355 ?x640 ?x640 ?x640 ?x755)) (* (/ 1.0 8.0) (* ?x66 ?x194 ?x194 ?x640 ?x640 ?x640 ?x640 ?x640)) (* (- (/ 1.0 4.0)) (* ?x61 ?x194 ?x640 ?x755 ?x755)) (* (/ 1.0 32.0) (* ?x66 ?x355 ?x355 ?x640 ?x640 ?x640 ?x755 ?x755)) (* (/ 1.0 32.0) (* ?x66 ?x640 ?x640 ?x640 ?x640 ?x755 ?x755 ?x755)) (* (/ 1.0 16.0) (* ?x66 ?x355 ?x640 ?x640 ?x640 ?x640 ?x755 ?x755)) (* (/ 1.0 32.0) (* ?x66 ?x640 ?x640 ?x640 ?x640 ?x640 ?x755 ?x755)) (* (- (/ 1.0 32.0)) (* ?x61 ?x355 ?x355 ?x640 ?x755 ?x755 ?x755 ?x755)))))
 (let (($x864 (>= ?x433 0.0)))
 (let ((?x734 (+ (* d00 b!2) (* (- 1) (* b00 d!1)))))
 (let (($x857 (>= ?x734 0)))
 (let (($x248 (= 0 ?x734)))
 (let ((@x875 (symm (commutativity (= $x248 (= ?x734 0))) (= (= ?x734 0) $x248))))
 (let (($x735 (= ?x734 0)))
 (let ((?x1143 (+ ?x1207 ?x1208 ?x1099 ?x1097 ?x1104 ?x1111 ?x1142 ?x1123)))
 (let (($x706 (= ?x1143 0.0)))
 (let (($x1153 (not $x706)))
 (let (($x1083 (or $x1153 (not (= ?x433 0.0)))))
 (let ((?x850 (+ (* d!1 a!3) (* (- 2) (* y!0 b!2)) (* (- 1) (* a00 d!1)) (* 2 (* y00 b!2)))))
 (let ((?x114 (* b00 y00)))
 (let ((?x115 (* (- 2) ?x114)))
 (let ((?x35 (* a00 d00)))
 (let (($x818 (= (+ ?x35 ?x115 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x517 (and $x818 $x735 (= ?x850 0) $x1083)))
 (let ((?x170 (* (- (/ 1.0 4.0)) (* ?x755 ?x355 ?x194 ?x640 ?x66))))
 (let ((?x156 (* (/ 1.0 16.0) (* ?x755 ?x755 ?x755 ?x355 ?x355 ?x61 ?x194 ?x640))))
 (let ((?x647 (* (- (/ 1.0 8.0)) (* ?x755 ?x61 ?x194 ?x640 ?x640))))
 (let ((?x1093 (* (/ 1.0 8.0) (* ?x194 ?x640 ?x640 ?x640 ?x66))))
 (let ((?x1079 (* (- (/ 1.0 8.0)) (* ?x355 ?x355 ?x194 ?x194 ?x640 ?x640 ?x640 ?x66))))
 (let ((?x216 (* (- (/ 1.0 16.0)) (* ?x755 ?x755 ?x355 ?x355 ?x194 ?x640 ?x640 ?x66))))
 (let ((?x416 (* (/ 1.0 4.0) (* ?x755 ?x755 ?x355 ?x61 ?x194))))
 (let ((?x779 (* (/ 1.0 8.0) (* ?x755 ?x355 ?x355 ?x61 ?x194 ?x194 ?x640 ?x640))))
 (let ((?x730 (+ ?x779 ?x416 ?x216 ?x1079 (* (/ 1.0 8.0) (* ?x755 ?x755 ?x755 ?x355 ?x61)) (* (/ 1.0 8.0) (* ?x755 ?x755 ?x755 ?x61 ?x640)) ?x1093 (* (/ 1.0 4.0) (* ?x755 ?x755 ?x61 ?x194 ?x640)) ?x647 ?x156 ?x170 (* (- (/ 1.0 32.0)) (* ?x755 ?x755 ?x755 ?x355 ?x355 ?x640 ?x640 ?x66)) (* (- (/ 1.0 16.0)) (* ?x755 ?x755 ?x755 ?x355 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 32.0)) (* ?x755 ?x755 ?x755 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 8.0)) (* ?x755 ?x755 ?x355 ?x194 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 16.0)) (* ?x755 ?x755 ?x194 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (/ 1.0 32.0) (* ?x755 ?x755 ?x755 ?x355 ?x355 ?x61 ?x640 ?x640)) (* (/ 1.0 16.0) (* ?x755 ?x755 ?x755 ?x355 ?x61 ?x640 ?x640 ?x640)) (* (/ 1.0 32.0) (* ?x755 ?x755 ?x755 ?x61 ?x640 ?x640 ?x640 ?x640)) (* (/ 1.0 8.0) (* ?x755 ?x755 ?x355 ?x355 ?x61 ?x194 ?x640 ?x640)) (* (/ 1.0 4.0) (* ?x755 ?x755 ?x355 ?x61 ?x194 ?x640 ?x640 ?x640)) (* (/ 1.0 8.0) (* ?x755 ?x755 ?x61 ?x194 ?x640 ?x640 ?x640 ?x640)) (* (/ 1.0 4.0) (* ?x755 ?x355 ?x61 ?x194 ?x194 ?x640 ?x640 ?x640)) (* (/ 1.0 8.0) (* ?x755 ?x61 ?x194 ?x194 ?x640 ?x640 ?x640 ?x640)) (* (- (/ 1.0 32.0)) (* ?x755 ?x755 ?x355 ?x355 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 16.0)) (* ?x755 ?x755 ?x355 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 32.0)) (* ?x755 ?x755 ?x640 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 8.0)) (* ?x755 ?x355 ?x355 ?x194 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 4.0)) (* ?x755 ?x355 ?x194 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 8.0)) (* ?x755 ?x194 ?x640 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 4.0)) (* ?x355 ?x194 ?x194 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 8.0)) (* ?x194 ?x194 ?x640 ?x640 ?x640 ?x640 ?x640 ?x66)) (* (/ 1.0 16.0) (* ?x755 ?x640 ?x640 ?x640 ?x66)) (* (- (/ 1.0 16.0)) (* ?x755 ?x755 ?x61 ?x640 ?x640)) (* (/ 1.0 32.0) (* ?x755 ?x755 ?x755 ?x755 ?x355 ?x355 ?x61 ?x640)) (* (/ 1.0 16.0) (* ?x755 ?x755 ?x755 ?x755 ?x355 ?x61 ?x640 ?x640)) (* (/ 1.0 32.0) (* ?x755 ?x755 ?x755 ?x755 ?x61 ?x640 ?x640 ?x640)) (* (/ 1.0 8.0) (* ?x755 ?x755 ?x755 ?x355 ?x61 ?x194 ?x640 ?x640)) (* (/ 1.0 16.0) (* ?x755 ?x755 ?x755 ?x61 ?x194 ?x640 ?x640 ?x640)) (* (- (/ 1.0 8.0)) (* ?x755 ?x755 ?x355 ?x640 ?x66)) (* (- (/ 1.0 8.0)) (* ?x755 ?x755 ?x640 ?x640 ?x66)) (* (- (/ 1.0 4.0)) (* ?x755 ?x194 ?x640 ?x640 ?x66)))))
 (let (($x785 (or (not (= (+ ?x779 ?x416 ?x216 ?x1079 ?x1093 ?x647 ?x156 ?x170) 0.0)) (not (= ?x730 0.0)))))
 (let ((?x751 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x820 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x115 (* 2 (* y!0 b00))) 0)))
 (let (($x786 (and $x820 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x751 0) $x785)))
 (let (($x193 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x66 (to_real d00)))
 (let ((?x64 (to_real b)))
 (let ((?x62 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x1151 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real b00) ?x62 ?x64 ?x64))))
 (let ((?x1136 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real b00) ?x64 ?x64))))
 (let ((?x61 (to_real b00)))
 (let ((?x60 (to_real a)))
 (let ((?x400 (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x62 ?x64 ?x66))))
 (let ((?x340 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x62 ?x64))))
 (let ((?x399 (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x62 ?x64 ?x64))))
 (let ((?x280 (* (/ 1.0 8.0) (* ?x62 ?x64 ?x64 ?x64 ?x66))))
 (let ((?x398 (* (- (/ 1.0 8.0)) (* ?x60 ?x60 ?x62 ?x62 ?x64 ?x64 ?x64 ?x66))))
 (let ((?x397 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x62 ?x64 ?x64 ?x66))))
 (let ((?x396 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x61 ?x62))))
 (let ((?x182 (* (/ 1.0 8.0) (* ?x56 ?x60 ?x60 ?x61 ?x62 ?x62 ?x64 ?x64))))
 (let ((?x1293 (+ ?x182 ?x396 ?x397 ?x398 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x64)) ?x280 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x62 ?x64)) ?x399 ?x340 ?x400 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x62 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x64 ?x64)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x61 ?x64 ?x64 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x64 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x60 ?x60 ?x61 ?x62 ?x64 ?x64)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x61 ?x62 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 ?x62 ?x64 ?x64 ?x64 ?x64)) (* (/ 1.0 4.0) (* ?x56 ?x60 ?x61 ?x62 ?x62 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x61 ?x62 ?x62 ?x64 ?x64 ?x64 ?x64)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x60 ?x60 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x60 ?x62 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x62 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 4.0)) (* ?x60 ?x62 ?x62 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (/ 1.0 16.0) (* ?x56 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x64 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x64)) ?x1136 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x64 ?x64 ?x64)) ?x1151 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x64 ?x64 ?x66)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x64 ?x64 ?x66)))))
 (let (($x187 (or (not (= (+ ?x182 ?x396 ?x397 ?x398 ?x280 ?x399 ?x340 ?x400) 0.0)) (not (= ?x1293 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x184 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x114 (* b00 y00)))
 (let ((?x115 (* (- 2) ?x114)))
 (let ((?x35 (* a00 d00)))
 (let (($x147 (= (+ ?x35 (* (- 1) (* a d00)) ?x115 (* 2 (* y b00))) 0)))
 (and $x147 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x184 0) $x187))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x661 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x62 (to_real y)))
 (let ((?x575 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x445 (+ ?x60 ?x64)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x733 (* ?x66 ?x56 ?x64 ?x445 ?x575)))
 (let ((?x457 (+ (* (/ 1.0 4.0) (* (to_real b00) ?x56 ?x56 ?x445 ?x575)) (* (- (/ 1.0 16.0)) (* ?x66 ?x56 ?x56 ?x64 ?x64 ?x445 ?x445 ?x575)) (* (/ 1.0 8.0) (* (to_real b00) ?x56 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (- (/ 1.0 8.0)) (* ?x66 ?x64 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (/ 1.0 8.0) (* ?x66 ?x64 ?x64 ?x64 ?x575)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x56 ?x64 ?x64 ?x575)) (* (/ 1.0 16.0) (* (to_real b00) ?x56 ?x56 ?x56 ?x64 ?x445 ?x445 ?x575)) (* (- (/ 1.0 4.0)) ?x733))))
 (let ((?x550 (+ (* (/ 1.0 4.0) (* (to_real b00) ?x62 ?x56 ?x56 ?x60)) (* (- (/ 1.0 16.0)) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* (to_real b00) ?x62 ?x62 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x62 ?x64 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x62 ?x56 ?x64 ?x64)) (* (/ 1.0 16.0) (* (to_real b00) ?x62 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x66 ?x62 ?x56 ?x64 ?x60)))))
 (let ((?x552 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x555 (= ?x552 0)))
 (let ((?x1112 (* d00 a)))
 (let ((?x481 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1112)))
 (and (= ?x481 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x555 (or (not (= ?x550 0.0)) (not (= ?x457 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x327 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x66 (to_real d00)))
 (let ((?x64 (to_real b)))
 (let ((?x62 (to_real y)))
 (let ((?x56 (to_real d)))
 (let ((?x1151 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real b00) ?x62 ?x64 ?x64))))
 (let ((?x1136 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x56 (to_real a) (to_real b00) ?x64 ?x64))))
 (let ((?x61 (to_real b00)))
 (let ((?x60 (to_real a)))
 (let ((?x400 (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x62 ?x64 ?x66))))
 (let ((?x340 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x62 ?x64))))
 (let ((?x399 (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x62 ?x64 ?x64))))
 (let ((?x280 (* (/ 1.0 8.0) (* ?x62 ?x64 ?x64 ?x64 ?x66))))
 (let ((?x398 (* (- (/ 1.0 8.0)) (* ?x60 ?x60 ?x62 ?x62 ?x64 ?x64 ?x64 ?x66))))
 (let ((?x397 (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x60 ?x62 ?x64 ?x64 ?x66))))
 (let ((?x396 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x61 ?x62))))
 (let ((?x182 (* (/ 1.0 8.0) (* ?x56 ?x60 ?x60 ?x61 ?x62 ?x62 ?x64 ?x64))))
 (let ((?x1293 (+ ?x182 ?x396 ?x397 ?x398 (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x60 ?x61)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x61 ?x64)) ?x280 (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x62 ?x64)) ?x399 ?x340 ?x400 (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x60 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x62 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x62 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x64 ?x64)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x60 ?x61 ?x64 ?x64 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x61 ?x64 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x60 ?x60 ?x61 ?x62 ?x64 ?x64)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x60 ?x61 ?x62 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x61 ?x62 ?x64 ?x64 ?x64 ?x64)) (* (/ 1.0 4.0) (* ?x56 ?x60 ?x61 ?x62 ?x62 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* ?x56 ?x61 ?x62 ?x62 ?x64 ?x64 ?x64 ?x64)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x60 ?x60 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x60 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x60 ?x60 ?x62 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 4.0)) (* ?x56 ?x60 ?x62 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x62 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 4.0)) (* ?x60 ?x62 ?x62 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x62 ?x62 ?x64 ?x64 ?x64 ?x64 ?x64 ?x66)) (* (/ 1.0 16.0) (* ?x56 ?x64 ?x64 ?x64 ?x66)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x61 ?x64 ?x64)) (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x60 ?x60 ?x61 ?x64)) ?x1136 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x61 ?x64 ?x64 ?x64)) ?x1151 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x62 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x60 ?x64 ?x66)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x64 ?x64 ?x66)) (* (- (/ 1.0 4.0)) (* ?x56 ?x62 ?x64 ?x64 ?x66)))))
 (let (($x187 (or (not (= (+ ?x182 ?x396 ?x397 ?x398 ?x280 ?x399 ?x340 ?x400) 0.0)) (not (= ?x1293 0.0)))))
 (let ((?x48 (* a d)))
 (let ((?x184 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x114 (* b00 y00)))
 (let ((?x115 (* (- 2) ?x114)))
 (let ((?x35 (* a00 d00)))
 (let (($x147 (= (+ ?x35 (* (- 1) (* a d00)) ?x115 (* 2 (* y b00))) 0)))
 (let (($x1300 (and $x147 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x184 0) $x187)))
 (let ((?x575 (+ ?x62 (* (/ 1.0 2.0) ?x56))))
 (let ((?x445 (+ ?x60 ?x64)))
 (let ((?x733 (* ?x66 ?x56 ?x64 ?x445 ?x575)))
 (let ((?x457 (+ (* (/ 1.0 4.0) (* ?x61 ?x56 ?x56 ?x445 ?x575)) (* (- (/ 1.0 16.0)) (* ?x66 ?x56 ?x56 ?x64 ?x64 ?x445 ?x445 ?x575)) (* (/ 1.0 8.0) (* ?x61 ?x56 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (- (/ 1.0 8.0)) (* ?x66 ?x64 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (/ 1.0 8.0) (* ?x66 ?x64 ?x64 ?x64 ?x575)) (* (- (/ 1.0 8.0)) (* ?x61 ?x56 ?x64 ?x64 ?x575)) (* (/ 1.0 16.0) (* ?x61 ?x56 ?x56 ?x56 ?x64 ?x445 ?x445 ?x575)) (* (- (/ 1.0 4.0)) ?x733))))
 (let ((?x550 (+ (* (/ 1.0 4.0) (* ?x61 ?x62 ?x56 ?x56 ?x60)) (* (- (/ 1.0 16.0)) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x61 ?x62 ?x62 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x62 ?x64 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* ?x61 ?x62 ?x56 ?x64 ?x64)) (* (/ 1.0 16.0) (* ?x61 ?x62 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x66 ?x62 ?x56 ?x64 ?x60)))))
 (let ((?x552 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x555 (= ?x552 0)))
 (let ((?x1112 (* d00 a)))
 (let (($x596 (= (+ (* 2 ?x114) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x1112) 0)))
 (let (($x140 (and $x596 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x555 (or (not (= ?x550 0.0)) (not (= ?x457 0.0))))))
 (rewrite (= $x140 $x1300))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x808 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x62 (to_real y)))
 (let ((?x575 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x445 (+ ?x60 ?x64)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x733 (* ?x66 ?x56 ?x64 ?x445 ?x575)))
 (let ((?x800 (+ (* (- (/ 1.0 4.0)) (* (to_real b00) ?x56 ?x56 ?x445 ?x575)) (* (/ 1.0 16.0) (* ?x66 ?x56 ?x56 ?x64 ?x64 ?x445 ?x445 ?x575)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x56 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (/ 1.0 8.0) (* ?x66 ?x64 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (- (/ 1.0 8.0)) (* ?x66 ?x64 ?x64 ?x64 ?x575)) (* (/ 1.0 8.0) (* (to_real b00) ?x56 ?x64 ?x64 ?x575)) (* (- (/ 1.0 16.0)) (* (to_real b00) ?x56 ?x56 ?x56 ?x64 ?x445 ?x445 ?x575)) (* (/ 1.0 4.0) ?x733))))
 (let ((?x432 (+ (* (- (/ 1.0 4.0)) (* (to_real b00) ?x62 ?x56 ?x56 ?x60)) (* (/ 1.0 16.0) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x62 ?x62 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x62 ?x64 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* (to_real b00) ?x62 ?x56 ?x64 ?x64)) (* (- (/ 1.0 16.0)) (* (to_real b00) ?x62 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x66 ?x62 ?x56 ?x64 ?x60)))))
 (let ((?x552 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x555 (= ?x552 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x114 (* b00 y00)))
 (let ((?x115 (* (- 2) ?x114)))
 (let (($x504 (= (+ ?x115 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x504 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x555 (or (not (= ?x432 0.0)) (not (= ?x800 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x346 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x62 (to_real y)))
 (let ((?x575 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x445 (+ ?x60 ?x64)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x733 (* ?x66 ?x56 ?x64 ?x445 ?x575)))
 (let ((?x457 (+ (* (/ 1.0 4.0) (* (to_real b00) ?x56 ?x56 ?x445 ?x575)) (* (- (/ 1.0 16.0)) (* ?x66 ?x56 ?x56 ?x64 ?x64 ?x445 ?x445 ?x575)) (* (/ 1.0 8.0) (* (to_real b00) ?x56 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (- (/ 1.0 8.0)) (* ?x66 ?x64 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (/ 1.0 8.0) (* ?x66 ?x64 ?x64 ?x64 ?x575)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x56 ?x64 ?x64 ?x575)) (* (/ 1.0 16.0) (* (to_real b00) ?x56 ?x56 ?x56 ?x64 ?x445 ?x445 ?x575)) (* (- (/ 1.0 4.0)) ?x733))))
 (let ((?x550 (+ (* (/ 1.0 4.0) (* (to_real b00) ?x62 ?x56 ?x56 ?x60)) (* (- (/ 1.0 16.0)) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* (to_real b00) ?x62 ?x62 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x62 ?x64 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x64 ?x64 ?x64)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x62 ?x56 ?x64 ?x64)) (* (/ 1.0 16.0) (* (to_real b00) ?x62 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60)) (* (- (/ 1.0 4.0)) (* ?x66 ?x62 ?x56 ?x64 ?x60)))))
 (let ((?x552 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x555 (= ?x552 0)))
 (let ((?x1112 (* d00 a)))
 (let ((?x481 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x1112)))
 (let (($x140 (and (= ?x481 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x555 (or (not (= ?x550 0.0)) (not (= ?x457 0.0))))))
 (let ((?x800 (+ (* (- (/ 1.0 4.0)) (* (to_real b00) ?x56 ?x56 ?x445 ?x575)) (* (/ 1.0 16.0) (* ?x66 ?x56 ?x56 ?x64 ?x64 ?x445 ?x445 ?x575)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x56 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (/ 1.0 8.0) (* ?x66 ?x64 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (- (/ 1.0 8.0)) (* ?x66 ?x64 ?x64 ?x64 ?x575)) (* (/ 1.0 8.0) (* (to_real b00) ?x56 ?x64 ?x64 ?x575)) (* (- (/ 1.0 16.0)) (* (to_real b00) ?x56 ?x56 ?x56 ?x64 ?x445 ?x445 ?x575)) (* (/ 1.0 4.0) ?x733))))
 (let ((?x432 (+ (* (- (/ 1.0 4.0)) (* (to_real b00) ?x62 ?x56 ?x56 ?x60)) (* (/ 1.0 16.0) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x62 ?x62 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x62 ?x64 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* (to_real b00) ?x62 ?x56 ?x64 ?x64)) (* (- (/ 1.0 16.0)) (* (to_real b00) ?x62 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x66 ?x62 ?x56 ?x64 ?x60)))))
 (let ((?x35 (* a00 d00)))
 (let ((?x114 (* b00 y00)))
 (let ((?x115 (* (- 2) ?x114)))
 (let (($x493 (and (= (+ ?x115 ?x35 (* 2 (* b00 y)) (* (- 1) ?x1112)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x555 (or (not (= ?x432 0.0)) (not (= ?x800 0.0))))))
 (rewrite (= $x493 $x140))))))))))))))))))))))))
 ))
 (let (($x106 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x81 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x62 (to_real y)))
 (let ((?x85 (+ ?x62 ?x58)))
 (let ((?x66 (to_real d00)))
 (let ((?x64 (to_real b)))
 (let ((?x65 (/ ?x64 ?x57)))
 (let ((?x86 (to_real (+ a b))))
 (let ((?x89 (+ (* (to_real (- 1)) ?x86 (to_real b00) ?x58 ?x58 ?x85) (* ?x86 ?x86 ?x65 ?x65 ?x58 ?x58 ?x66 ?x85))))
 (let ((?x93 (+ (- ?x89 (* ?x86 ?x86 ?x65 ?x65 (to_real b00) ?x58 ?x85 ?x85)) (* ?x86 ?x86 ?x65 ?x65 ?x65 ?x66 ?x85 ?x85))))
 (let ((?x97 (+ (- ?x93 (* ?x65 ?x65 ?x65 ?x66 ?x85)) (* ?x65 ?x65 (to_real b00) ?x58 ?x85))))
 (let ((?x101 (+ (- ?x97 (* ?x86 ?x86 ?x65 (to_real b00) ?x58 ?x58 ?x58 ?x85)) (* ?x86 ?x65 ?x58 ?x66 ?x85))))
 (let ((?x61 (to_real b00)))
 (let ((?x60 (to_real a)))
 (let ((?x68 (+ (* (to_real (- 1)) ?x60 ?x61 ?x58 ?x58 ?x62) (* ?x60 ?x60 ?x65 ?x65 ?x58 ?x58 ?x66 ?x62))))
 (let ((?x72 (+ (- ?x68 (* ?x60 ?x60 ?x65 ?x65 ?x61 ?x58 ?x62 ?x62)) (* ?x60 ?x60 ?x65 ?x65 ?x65 ?x66 ?x62 ?x62))))
 (let ((?x76 (+ (- ?x72 (* ?x65 ?x65 ?x65 ?x66 ?x62)) (* ?x65 ?x65 ?x61 ?x58 ?x62))))
 (let ((?x80 (+ (- ?x76 (* ?x60 ?x60 ?x65 ?x61 ?x58 ?x58 ?x58 ?x62)) (* ?x60 ?x65 ?x58 ?x66 ?x62))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x80 ?x81)) (not (= ?x101 ?x81)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x620 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x62 (to_real y)))
 (let ((?x575 (+ ?x62 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x64 (to_real b)))
 (let ((?x60 (to_real a)))
 (let ((?x445 (+ ?x60 ?x64)))
 (let ((?x56 (to_real d)))
 (let ((?x66 (to_real d00)))
 (let ((?x733 (* ?x66 ?x56 ?x64 ?x445 ?x575)))
 (let ((?x800 (+ (* (- (/ 1.0 4.0)) (* (to_real b00) ?x56 ?x56 ?x445 ?x575)) (* (/ 1.0 16.0) (* ?x66 ?x56 ?x56 ?x64 ?x64 ?x445 ?x445 ?x575)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x56 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (/ 1.0 8.0) (* ?x66 ?x64 ?x64 ?x64 ?x445 ?x445 ?x575 ?x575)) (* (- (/ 1.0 8.0)) (* ?x66 ?x64 ?x64 ?x64 ?x575)) (* (/ 1.0 8.0) (* (to_real b00) ?x56 ?x64 ?x64 ?x575)) (* (- (/ 1.0 16.0)) (* (to_real b00) ?x56 ?x56 ?x56 ?x64 ?x445 ?x445 ?x575)) (* (/ 1.0 4.0) ?x733))))
 (let ((?x432 (+ (* (- (/ 1.0 4.0)) (* (to_real b00) ?x62 ?x56 ?x56 ?x60)) (* (/ 1.0 16.0) (* ?x66 ?x62 ?x56 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* (to_real b00) ?x62 ?x62 ?x56 ?x64 ?x64 ?x60 ?x60)) (* (/ 1.0 8.0) (* ?x66 ?x62 ?x62 ?x64 ?x64 ?x64 ?x60 ?x60)) (* (- (/ 1.0 8.0)) (* ?x66 ?x62 ?x64 ?x64 ?x64)) (* (/ 1.0 8.0) (* (to_real b00) ?x62 ?x56 ?x64 ?x64)) (* (- (/ 1.0 16.0)) (* (to_real b00) ?x62 ?x56 ?x56 ?x56 ?x64 ?x60 ?x60)) (* (/ 1.0 4.0) (* ?x66 ?x62 ?x56 ?x64 ?x60)))))
 (let ((?x552 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x555 (= ?x552 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x114 (* b00 y00)))
 (let ((?x115 (* (- 2) ?x114)))
 (let (($x504 (= (+ ?x115 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x493 (and $x504 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x555 (or (not (= ?x432 0.0)) (not (= ?x800 0.0))))))
 (let ((?x81 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x85 (+ ?x62 ?x58)))
 (let ((?x65 (/ ?x64 ?x57)))
 (let ((?x86 (to_real (+ a b))))
 (let ((?x89 (+ (* (to_real (- 1)) ?x86 (to_real b00) ?x58 ?x58 ?x85) (* ?x86 ?x86 ?x65 ?x65 ?x58 ?x58 ?x66 ?x85))))
 (let ((?x93 (+ (- ?x89 (* ?x86 ?x86 ?x65 ?x65 (to_real b00) ?x58 ?x85 ?x85)) (* ?x86 ?x86 ?x65 ?x65 ?x65 ?x66 ?x85 ?x85))))
 (let ((?x97 (+ (- ?x93 (* ?x65 ?x65 ?x65 ?x66 ?x85)) (* ?x65 ?x65 (to_real b00) ?x58 ?x85))))
 (let ((?x101 (+ (- ?x97 (* ?x86 ?x86 ?x65 (to_real b00) ?x58 ?x58 ?x58 ?x85)) (* ?x86 ?x65 ?x58 ?x66 ?x85))))
 (let ((?x68 (+ (* (to_real (- 1)) ?x60 (to_real b00) ?x58 ?x58 ?x62) (* ?x60 ?x60 ?x65 ?x65 ?x58 ?x58 ?x66 ?x62))))
 (let ((?x72 (+ (- ?x68 (* ?x60 ?x60 ?x65 ?x65 (to_real b00) ?x58 ?x62 ?x62)) (* ?x60 ?x60 ?x65 ?x65 ?x65 ?x66 ?x62 ?x62))))
 (let ((?x76 (+ (- ?x72 (* ?x65 ?x65 ?x65 ?x66 ?x62)) (* ?x65 ?x65 (to_real b00) ?x58 ?x62))))
 (let ((?x80 (+ (- ?x76 (* ?x60 ?x60 ?x65 (to_real b00) ?x58 ?x58 ?x58 ?x62)) (* ?x60 ?x65 ?x58 ?x66 ?x62))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x105 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x80 ?x81)) (not (= ?x101 ?x81))))))
 (rewrite (= $x105 $x493)))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x107 (asserted $x106)))
 (let ((@x606 (mp (mp @x107 (quant-intro (proof-bind ?x620) (= $x106 $x808)) $x808) (rewrite (= $x808 $x808)) $x808)))
 (let ((@x772 (mp (mp @x606 (quant-intro (proof-bind ?x346) (= $x808 $x661)) $x661) (quant-intro (proof-bind ?x327) (= $x661 $x193)) $x193)))
 (let ((@x267 (mp (mp~ @x772 (sk (~ $x193 $x786)) $x786) (rewrite (= $x786 $x517)) $x517)))
 (let ((@x876 (mp (and-elim @x267 $x735) @x875 $x248)))
 (let ((@x1250 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x248) $x857)) @x876 $x857)))
 (let (($x855 (<= ?x734 0)))
 (let ((@x997 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x248) $x855)) @x876 $x855)))
 (let ((@x252 (unit-resolution ((_ th-lemma arith) (or $x864 (not $x857) (not $x855))) @x997 @x1250 (hypothesis (not $x864)) false)))
 (let ((@x228 (lemma @x252 $x864)))
 (let (($x866 (<= ?x433 0.0)))
 (let ((@x284 (unit-resolution ((_ th-lemma arith) (or $x866 (not $x857) (not $x855))) @x997 @x1250 (hypothesis (not $x866)) false)))
 (let ((@x1201 (lemma @x284 $x866)))
 (let (($x870 (>= ?x1143 0.0)))
 (let (($x358 (not $x870)))
 (let (($x867 (<= ?x1143 0.0)))
 (let ((@x1075 (unit-resolution ((_ th-lemma arith) (or (not $x866) (not $x864) $x867 (not $x857) (not $x855))) @x997 @x1250 (hypothesis (not $x867)) @x1201 @x228 false)))
 (let (($x865 (= 0.0 ?x1143)))
 (let (($x310 (not $x865)))
 (let ((@x259 (monotonicity (symm (commutativity (= $x865 $x706)) (= $x706 $x865)) (= $x1153 $x310))))
 (let (($x498 (= ?x433 0.0)))
 (let (($x743 (= 0.0 ?x433)))
 (let ((@x892 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x743 (not $x866) (not $x864))) @x228 (or $x743 (not $x866)))))
 (let ((@x373 (mp (unit-resolution @x892 @x1201 $x743) (commutativity (= $x743 $x498)) $x498)))
 (let ((@x245 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x865 (not $x867) $x358)) (mp (unit-resolution (and-elim @x267 $x1083) @x373 $x1153) @x259 $x310) (or (not $x867) $x358))))
 (unit-resolution ((_ th-lemma arith) (or (not $x866) (not $x864) $x870 (not $x857) (not $x855))) @x997 @x1250 (unit-resolution @x245 (lemma @x1075 $x867) $x358) @x1201 @x228 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       26
 :arith-eq-adapter                31
 :arith-bound-propagations-cheap  63
 :arith-bound-propagations-lp     8
 :arith-conflicts                 170
 :arith-diseq                     45
 :arith-gcd-calls                 9
 :arith-grobner-calls             6
 :arith-grobner-conflicts         4
 :arith-horner-calls              6
 :arith-horner-cross-nested-forms 282
 :arith-lower                     101
 :arith-make-feasible             79
 :arith-max-columns               82
 :arith-max-rows                  12
 :arith-nla-explanations          108
 :arith-nla-lemmas                168
 :arith-patches                   9
 :arith-patches-success           9
 :arith-propagations              63
 :arith-upper                     112
 :conflicts                       14
 :decisions                       144
 :del-clause                      131
 :final-checks                    42
 :max-memory                      5.39
 :memory                          3.20
 :mk-bool-var                     330
 :mk-clause                       244
 :num-allocs                      15291167
 :num-checks                      1
 :propagations                    132
 :rlimit-count                    9120
 :time                            0.06
 :total-time                      0.06)
