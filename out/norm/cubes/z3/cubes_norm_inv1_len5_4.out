unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x774 (* (- 1) k!2)))
 (let ((?x773 (+ (* 3 (* n!0 n!0)) ?x774 (* 3 n!0))))
 (let (($x772 (<= ?x773 (- 1))))
 (let (($x869 (= ?x773 (- 1))))
 (let ((?x572 (+ k!2 c!3)))
 (let ((?x893 (+ k!2 m!1)))
 (let ((?x971 (+ 6 m!1)))
 (let ((?x972 (+ 1 n!0)))
 (let ((?x733 (* 6 (* ?x972 ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x572 ?x572 ?x572))))
 (let ((?x746 (* (- 1) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x971 ?x893 ?x893 ?x572 ?x572 ?x572))))
 (let ((?x519 (+ (* 12 (* k!2 c!3 c!3 m!1)) (* (- 1) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x572)) (* 6 (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x572 ?x572 ?x572)) (* 6 (* c!3 c!3 m!1 m!1)) (* (- 6) (* k!2 n!0 n!0 n!0 m!1)) (* (- 1) (* ?x972 ?x971 ?x893 ?x893 ?x572 ?x572)) (* (- 18) (* c!3 n!0 m!1)) (* (- 108) (* c!3 n!0 n!0)) (* (- 108) (* k!2 n!0)) (* (- 108) (* k!2 n!0 n!0)) (* 6 (* k!2 k!2 m!1 m!1)) (* (- 6) (* ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x893 ?x572)) (* (- 6) (* c!3 n!0 n!0 n!0 m!1)) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x572) (* 6 (* ?x972 ?x972 ?x972 ?x972 ?x971 ?x893 ?x893 ?x572)) (* (- 6) (* ?x972 ?x972 ?x972 ?x972 ?x971 ?x572)) (* (- 6) (* k!2 m!1)) (* 12 (* k!2 c!3 m!1 m!1)) (* 6 (* ?x972 ?x972 ?x972 ?x971 ?x893 ?x893 ?x572)) (* 12 (* k!2 c!3 n!0 m!1 m!1)) (* 12 (* k!2 k!2 k!2 m!1)) (* 6 (* k!2 k!2 k!2 k!2 n!0)) ?x746 (* ?x972 ?x972 ?x971 ?x971 ?x971 ?x893 ?x893 ?x893 ?x572) (* 24 (* k!2 k!2 c!3 m!1)) (* (- 6) (* c!3 m!1)) (* 6 (* c!3 c!3 n!0 m!1 m!1)) (* 24 (* k!2 k!2 c!3 n!0 m!1)) (* (- 18) (* c!3 n!0 n!0 m!1)) (* (- 36) k!2) (* (- 36) c!3) (* (- 36) (* k!2 n!0 n!0 n!0)) (* 6 (* ?x972 ?x972 ?x893 ?x893 ?x572 ?x572)) (* (- 18) (* k!2 n!0 n!0 m!1)) (* 12 (* k!2 k!2 k!2 n!0 m!1)) (* 6 (* k!2 k!2 n!0 m!1 m!1)) (* 6 (* k!2 k!2 k!2 k!2)) (* (- 36) (* c!3 n!0 n!0 n!0)) (* (- 108) (* c!3 n!0)) ?x733 (* (- 18) (* k!2 n!0 m!1)) (* 6 (* k!2 k!2 c!3 c!3 n!0)) (* 12 (* k!2 k!2 k!2 c!3 n!0)) (* 12 (* k!2 k!2 k!2 c!3)) (* 6 (* k!2 k!2 c!3 c!3)) (* 12 (* k!2 c!3 c!3 n!0 m!1)) (* (- 6) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x893 ?x572)))))
 (let (($x423 (= ?x519 0)))
 (let (($x397 (not $x423)))
 (let ((?x401 (* k!2 n!0)))
 (let ((?x622 (+ ?x401 ?x774 (* (- 3) c!3) (* 2 n!0))))
 (let (($x813 (= ?x622 (- 1))))
 (let ((?x713 (* k!2 k!2)))
 (let ((?x1019 (+ ?x713 (* (- 5) k!2) (* (- 18) c!3) (* 9 n!0) (* (- 9) (* c!3 n!0)))))
 (let (($x379 (= ?x1019 (- 4))))
 (let ((?x704 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x1013 (= ?x704 (- 6))))
 (let (($x784 (and $x1013 $x379 $x813 $x869 $x397)))
 (let ((?x670 (+ c!3 k!2)))
 (let ((?x693 (* (- 6) (* ?x972 ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x670 ?x670 ?x670))))
 (let ((?x980 (+ (* 36 c!3) (* 36 k!2) (* 108 ?x401) (* 108 (* c!3 n!0)) (* (- 24) (* c!3 k!2 k!2 m!1)) (* (- 12) (* c!3 k!2 k!2 k!2)) (* (- 12) (* k!2 k!2 k!2 m!1)) (* (- 6) (* c!3 c!3 k!2 k!2 n!0)) (* (- 12) (* c!3 k!2 k!2 k!2 n!0)) (* (- 6) (* k!2 k!2 k!2 k!2 n!0)) (* (- 6) (* c!3 c!3 k!2 k!2)) (* (- 12) (* c!3 c!3 k!2 m!1 n!0)) (* (- 24) (* c!3 k!2 k!2 m!1 n!0)) (* (- 12) (* k!2 k!2 k!2 m!1 n!0)) (* (- 6) (* c!3 c!3 m!1 m!1 n!0)) (* (- 12) (* c!3 k!2 m!1 m!1 n!0)) (* (- 6) (* k!2 k!2 m!1 m!1 n!0)) (* (- 12) (* c!3 k!2 m!1 m!1)) (* (- 1) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x670)) (* (- 6) (* ?x972 ?x972 ?x972 ?x972 ?x971 ?x893 ?x893 ?x670)) (* ?x972 ?x971 ?x893 ?x893 ?x670 ?x670) ?x693 (* (- 6) (* c!3 c!3 m!1 m!1)) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x971 ?x893 ?x893 ?x670 ?x670 ?x670) (* 6 (* ?x972 ?x972 ?x972 ?x972 ?x971 ?x670)) (* (- 6) (* ?x972 ?x972 ?x893 ?x893 ?x670 ?x670)) (* (- 6) (* ?x972 ?x972 ?x972 ?x971 ?x893 ?x893 ?x670)) (* 6 (* k!2 m!1 n!0 n!0 n!0)) (* 18 (* c!3 m!1 n!0)) (* 18 (* k!2 m!1 n!0)) (* (- 6) (* k!2 k!2 k!2 k!2)) (* 108 (* c!3 n!0 n!0)) (* 108 (* k!2 n!0 n!0)) (* 18 (* c!3 m!1 n!0 n!0)) (* 18 (* k!2 m!1 n!0 n!0)) (* (- 6) (* k!2 k!2 m!1 m!1)) (* 36 (* c!3 n!0 n!0 n!0)) (* 36 (* k!2 n!0 n!0 n!0)) (* 6 (* c!3 m!1 n!0 n!0 n!0)) (* 6 (* ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x893 ?x670)) (* 6 (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x893 ?x670)) (* 6 (* c!3 m!1)) (* 6 (* k!2 m!1)) (* (- 1) (* ?x972 ?x972 ?x971 ?x971 ?x971 ?x893 ?x893 ?x893 ?x670)) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x670) (* (- 12) (* c!3 c!3 k!2 m!1)) (* (- 6) (* ?x972 ?x972 ?x972 ?x971 ?x971 ?x893 ?x893 ?x670 ?x670 ?x670)))))
 (let ((?x563 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x713) (* 9 (* c!3 n!0)))))
 (let (($x681 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x563 4) (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) ?x401)) 1) (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x980 0)))))
 (let (($x351 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x527 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x1020 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x992 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68)))
 (let ((?x776 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x708 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x692 (* ?x316 ?x527 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1434 (* (- 6) (* k k m m n))))
 (let ((?x1431 (* (- 6) (* c c m m n))))
 (let ((?x1422 (* (- 6) (* k k k k n))))
 (let ((?x1419 (* (- 6) (* c c k k n))))
 (let ((?x1118 (+ (* 36 c) (* 36 k) (* 108 (* k n)) (* 108 (* c n)) (* (- 24) (* c k k m)) (* (- 12) (* c k k k)) (* (- 12) (* k k k m)) ?x1419 (* (- 12) (* c k k k n)) ?x1422 (* (- 6) (* c c k k)) (* (- 12) (* c c k m n)) (* (- 24) (* c k k m n)) (* (- 12) (* k k k m n)) ?x1431 (* (- 12) (* c k m m n)) ?x1434 (* (- 12) (* c k m m)) (* (- 1) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) ?x692 (* (- 6) ?x708) (* (- 6) (* c c m m)) ?x776 (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 (* k m n n n)) (* 18 (* c m n)) (* 18 (* k m n)) (* (- 6) (* k k k k)) (* 108 (* c n n)) (* 108 (* k n n)) (* 18 (* c m n n)) (* 18 (* k m n n)) (* (- 6) (* k k m m)) (* 36 (* c n n n)) (* 36 (* k n n n)) (* 6 (* c m n n n)) (* 6 (* ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* 6 (* c m)) (* 6 (* k m)) (* (- 1) (* ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) ?x992 (* (- 12) (* c c k m)) (* (- 6) ?x1020))))
 (let (($x308 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x270 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x218 (= (+ ?x40 ?x44 ?x220 ?x221 (* 9 (* c n))) 4)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (and $x134 $x218 $x270 $x308 (not (= ?x1118 0)))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x1069 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x527 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x69 (+ k m)))
 (let ((?x776 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x708 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x986 (* ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x621 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x68)))
 (let ((?x1073 (+ (* 6 (* ?x316 ?x316 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x69 ?x69 ?x68 ?x68)) ?x621 (* (- 6) (* ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) ?x986 (* (- 1) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68)) (* (- 1) (* ?x316 ?x527 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 ?x708) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x776) (* (- 6) (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x68)))))
 (let (($x861 (not (= ?x1073 0))))
 (let (($x858 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1023 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (and $x134 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x220 ?x221) 4) $x1023 $x858 $x861))))))))))))))))))) :qid k!34))
 ))
 (let ((?x333 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x527 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x1020 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x992 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68)))
 (let ((?x776 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x708 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x692 (* ?x316 ?x527 ?x69 ?x69 ?x68 ?x68)))
 (let ((?x1434 (* (- 6) (* k k m m n))))
 (let ((?x1431 (* (- 6) (* c c m m n))))
 (let ((?x1422 (* (- 6) (* k k k k n))))
 (let ((?x1419 (* (- 6) (* c c k k n))))
 (let ((?x1118 (+ (* 36 c) (* 36 k) (* 108 (* k n)) (* 108 (* c n)) (* (- 24) (* c k k m)) (* (- 12) (* c k k k)) (* (- 12) (* k k k m)) ?x1419 (* (- 12) (* c k k k n)) ?x1422 (* (- 6) (* c c k k)) (* (- 12) (* c c k m n)) (* (- 24) (* c k k m n)) (* (- 12) (* k k k m n)) ?x1431 (* (- 12) (* c k m m n)) ?x1434 (* (- 12) (* c k m m)) (* (- 1) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) ?x692 (* (- 6) ?x708) (* (- 6) (* c c m m)) ?x776 (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x69 ?x69 ?x68 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 (* k m n n n)) (* 18 (* c m n)) (* 18 (* k m n)) (* (- 6) (* k k k k)) (* 108 (* c n n)) (* 108 (* k n n)) (* 18 (* c m n n)) (* 18 (* k m n n)) (* (- 6) (* k k m m)) (* 36 (* c n n n)) (* 36 (* k n n n)) (* 6 (* c m n n n)) (* 6 (* ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* 6 (* c m)) (* 6 (* k m)) (* (- 1) (* ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) ?x992 (* (- 12) (* c c k m)) (* (- 6) ?x1020))))
 (let (($x308 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x270 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x218 (= (+ ?x40 ?x44 ?x220 ?x221 (* 9 (* c n))) 4)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (let (($x491 (and $x134 $x218 $x270 $x308 (not (= ?x1118 0)))))
 (let ((?x986 (* ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x621 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x68)))
 (let ((?x1073 (+ (* 6 (* ?x316 ?x316 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x69 ?x69 ?x68 ?x68)) ?x621 (* (- 6) (* ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) ?x986 (* (- 1) ?x992) (* (- 1) ?x692) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 ?x708) (* 6 ?x1020) (* (- 1) ?x776) (* (- 6) (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x68)))))
 (let (($x861 (not (= ?x1073 0))))
 (let (($x858 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1023 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x1070 (and $x134 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x220 ?x221) 4) $x1023 $x858 $x861)))
 (rewrite (= $x1070 $x491))))))))))))))))))))))))))))))))))
 ))
 (let (($x964 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ c k)))
 (let ((?x527 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x69 (+ k m)))
 (let ((?x776 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x708 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x986 (* ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x621 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x68)))
 (let ((?x1073 (+ (* 6 (* ?x316 ?x316 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x69 ?x69 ?x68 ?x68)) ?x621 (* (- 6) (* ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) ?x986 (* (- 1) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68)) (* (- 1) (* ?x316 ?x527 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 ?x708) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x776) (* (- 6) (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x68)))))
 (let (($x861 (not (= ?x1073 0))))
 (let (($x858 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x729 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x558 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (and $x134 (= ?x558 (- 4)) $x729 $x858 $x861))))))))))))))))) :qid k!34))
 ))
 (let ((?x818 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x527 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x69 (+ k m)))
 (let ((?x776 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x708 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x986 (* ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x621 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x68)))
 (let ((?x1073 (+ (* 6 (* ?x316 ?x316 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x69 ?x69 ?x68 ?x68)) ?x621 (* (- 6) (* ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) ?x986 (* (- 1) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68)) (* (- 1) (* ?x316 ?x527 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 ?x708) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x776) (* (- 6) (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x68)))))
 (let (($x861 (not (= ?x1073 0))))
 (let (($x858 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x1023 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x221 (* (- 1) ?x49)))
 (let ((?x220 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (let (($x1070 (and $x134 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x220 ?x221) 4) $x1023 $x858 $x861)))
 (let (($x729 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x558 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x626 (and $x134 (= ?x558 (- 4)) $x729 $x858 $x861)))
 (rewrite (= $x626 $x1070))))))))))))))))))))))))))
 ))
 (let (($x101 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x68 (+ c k)))
 (let ((?x69 (+ k m)))
 (let ((?x75 (+ (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70) (* ?x68 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x79 (- (- ?x75 (* 6 ?x68 ?x69 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70)) (* 6 ?x68 ?x69 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x84 (- (+ ?x79 (* ?x68 ?x69 ?x69 ?x69 ?x73 ?x73 ?x73 ?x70 ?x70)) (* ?x68 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x90 (+ (- ?x84 (* ?x68 ?x68 ?x69 ?x69 ?x73 ?x70)) (* 6 ?x68 ?x69 ?x69 ?x73 ?x70 ?x70 ?x70) (* 6 ?x68 ?x69 ?x69 ?x73 ?x70 ?x70 ?x70 ?x70) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70 ?x70) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x94 (- ?x90 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x73 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x96 (- (- ?x94 (* 6 ?x68 ?x73 ?x70 ?x70 ?x70 ?x70)) (* 6 ?x68 ?x73 ?x70 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x96 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x630 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x68 (+ c k)))
 (let ((?x527 (+ 6 m)))
 (let ((?x316 (+ 1 n)))
 (let ((?x69 (+ k m)))
 (let ((?x776 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x708 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)))
 (let ((?x986 (* ?x316 ?x316 ?x527 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)))
 (let ((?x621 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x68)))
 (let ((?x1073 (+ (* 6 (* ?x316 ?x316 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x69 ?x69 ?x68 ?x68)) ?x621 (* (- 6) (* ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x69 ?x68)) ?x986 (* (- 1) (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68)) (* (- 1) (* ?x316 ?x527 ?x69 ?x69 ?x68 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x69 ?x69 ?x68)) (* 6 ?x708) (* 6 (* ?x316 ?x316 ?x316 ?x527 ?x527 ?x69 ?x69 ?x68 ?x68 ?x68)) (* (- 1) ?x776) (* (- 6) (* ?x316 ?x316 ?x316 ?x316 ?x527 ?x68)) (* (- 6) (* ?x316 ?x316 ?x316 ?x527 ?x68)))))
 (let (($x861 (not (= ?x1073 0))))
 (let (($x858 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x729 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x558 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x134 (= (+ m (* (- 6) n)) 6)))
 (let (($x626 (and $x134 (= ?x558 (- 4)) $x729 $x858 $x861)))
 (let ((?x70 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x75 (+ (* 6 ?x68 ?x68 ?x69 ?x69 ?x70 ?x70) (* 6 ?x68 ?x68 ?x69 ?x69 ?x70) (* ?x68 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x79 (- (- ?x75 (* 6 ?x68 ?x69 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70)) (* 6 ?x68 ?x69 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x84 (- (+ ?x79 (* ?x68 ?x69 ?x69 ?x69 ?x73 ?x73 ?x73 ?x70 ?x70)) (* ?x68 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x90 (+ (- ?x84 (* ?x68 ?x68 ?x69 ?x69 ?x73 ?x70)) (* 6 ?x68 ?x69 ?x69 ?x73 ?x70 ?x70 ?x70) (* 6 ?x68 ?x69 ?x69 ?x73 ?x70 ?x70 ?x70 ?x70) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70 ?x70) (* 6 ?x68 ?x68 ?x68 ?x69 ?x69 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x94 (- ?x90 (* ?x68 ?x68 ?x68 ?x69 ?x69 ?x73 ?x73 ?x73 ?x70 ?x70 ?x70))))
 (let ((?x96 (- (- ?x94 (* 6 ?x68 ?x73 ?x70 ?x70 ?x70 ?x70)) (* 6 ?x68 ?x73 ?x70 ?x70 ?x70))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x100 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x96 0))))))
 (rewrite (= $x100 $x626))))))))))))))))))))))))))))))))))
 ))
 (let ((@x102 (asserted $x101)))
 (let ((@x1068 (mp (mp @x102 (quant-intro (proof-bind ?x630) (= $x101 $x964)) $x964) (rewrite (= $x964 $x964)) $x964)))
 (let ((@x445 (mp (mp @x1068 (quant-intro (proof-bind ?x818) (= $x964 $x1069)) $x1069) (quant-intro (proof-bind ?x333) (= $x1069 $x351)) $x351)))
 (let ((@x659 (mp (mp~ @x445 (sk (~ $x351 $x681)) $x681) (rewrite (= $x681 $x784)) $x784)))
 (let ((@x1028 (and-elim @x659 $x869)))
 (let ((@x1014 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x869) $x772)) @x1028 $x772)))
 (let (($x856 (>= ?x773 (- 1))))
 (let ((@x1046 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x869) $x856)) @x1028 $x856)))
 (let (($x698 (<= ?x622 (- 1))))
 (let ((@x759 (and-elim @x659 $x813)))
 (let ((@x949 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x813) $x698)) @x759 $x698)))
 (let (($x624 (>= ?x622 (- 1))))
 (let ((@x1151 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x813) $x624)) @x759 $x624)))
 (let (($x1004 (<= ?x704 (- 6))))
 (let ((@x564 (and-elim @x659 $x1013)))
 (let ((@x662 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1013) $x1004)) @x564 $x1004)))
 (let (($x921 (>= ?x704 (- 6))))
 (let ((@x958 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1013) $x921)) @x564 $x921)))
 (let (($x555 (<= ?x1019 (- 4))))
 (let ((@x1027 (and-elim @x659 $x379)))
 (let ((@x1025 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x379) $x555)) @x1027 $x555)))
 (let (($x936 (>= ?x1019 (- 4))))
 (let ((@x359 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x379) $x936)) @x1027 $x936)))
 (let (($x822 (not (>= ?x519 0))))
 (let (($x937 (<= ?x519 0)))
 (let ((@x941 ((_ th-lemma arith) (hypothesis (not $x937)) @x958 @x662 @x1046 @x1014 @x1151 @x949 @x1046 @x1014 @x958 @x662 @x1046 @x1014 @x359 @x1025 @x1046 @x1014 @x1046 @x1014 @x958 @x662 @x359 @x1025 @x1151 @x949 @x1046 @x1014 false)))
 (let ((@x1204 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x423 (not $x937) $x822)) (and-elim @x659 $x397) (or (not $x937) $x822))))
 ((_ th-lemma arith) (unit-resolution @x1204 (lemma @x941 $x937) $x822) @x958 @x662 @x1046 @x1014 @x1046 @x1014 @x1151 @x949 @x958 @x662 @x1046 @x1014 @x1046 @x1014 @x1046 @x1014 @x359 @x1025 @x958 @x662 @x1151 @x949 @x1046 @x1014 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        41
 :arith-assert-upper        133
 :arith-branch-var          3
 :arith-conflicts           5
 :arith-eq-adapter          5
 :arith-gcd-tests           12
 :arith-grobner             2
 :arith-ineq-splits         3
 :arith-max-min             615
 :arith-nonlinear-bounds    34
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             6
 :arith-pivots              12
 :arith-row-summations      19
 :arith-tableau-max-columns 76
 :arith-tableau-max-rows    9
 :conflicts                 5
 :decisions                 122
 :del-clause                16
 :final-checks              13
 :max-memory                3.88
 :memory                    3.29
 :mk-bool-var               111
 :mk-clause                 17
 :num-allocs                1476596
 :num-checks                1
 :propagations              14
 :rlimit-count              15178
 :time                      0.01
 :total-time                0.02)
