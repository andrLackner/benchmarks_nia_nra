unsat
((set-logic NIA)
(declare-fun d!1 () Int)
(declare-fun a!3 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x597 (* a00 d!1)))
 (let ((?x439 (to_real ?x597)))
 (let ((?x271 (+ ?x439 (* (- 1.0) (* (to_real a00) (to_real d!1))))))
 (let (($x237 (>= ?x271 0.0)))
 (let (($x827 (= ?x271 0.0)))
 (let ((@x618 (lemma (unit-resolution ((_ th-lemma arith) $x827) (hypothesis (not $x827)) false) $x827)))
 (let ((@x751 ((_ th-lemma arith triangle-eq) (or (not $x827) $x237))))
 (let (($x828 (<= ?x271 0.0)))
 (let ((@x722 ((_ th-lemma arith triangle-eq) (or (not $x827) $x828))))
 (let ((?x616 (to_real d!1)))
 (let ((?x544 (to_real a!3)))
 (let ((?x787 (* ?x544 ?x616)))
 (let ((?x679 (+ ?x787 (* (- 1.0) (to_real (* a!3 d!1))))))
 (let (($x698 (<= ?x679 0.0)))
 (let (($x545 (= 0.0 ?x679)))
 (let ((@x312 (symm (commutativity (= $x545 (= ?x679 0.0))) (= (= ?x679 0.0) $x545))))
 (let ((@x311 (mp ((_ th-lemma arith) (= ?x679 0.0)) @x312 $x545)))
 (let ((@x123 (lemma (unit-resolution (hypothesis (not $x545)) @x311 false) $x545)))
 (let ((@x382 ((_ th-lemma arith triangle-eq) (or (not $x545) $x698))))
 (let ((@x233 (unit-resolution @x382 @x123 $x698)))
 (let (($x119 (>= ?x679 0.0)))
 (let ((@x178 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x545) $x119)) @x123 $x119)))
 (let ((?x638 (to_real y!0)))
 (let ((?x221 (to_real b!2)))
 (let ((?x648 (* (/ 1.0 4.0) (* (to_real y00) ?x221 ?x221 ?x544 ?x544 ?x544 ?x616 ?x638 ?x638))))
 (let ((?x651 (* (- (/ 1.0 8.0)) (* (to_real a00) ?x221 ?x544 ?x544 ?x544 ?x616 ?x616 ?x638 ?x638))))
 (let ((?x581 (* (/ 1.0 8.0) (* ?x221 ?x221 ?x221 ?x221 ?x638 ?x638 ?x638))))
 (let ((?x674 (+ ?x581 ?x651 (* (- (/ 1.0 4.0)) (* ?x221 ?x221 ?x544 ?x544 ?x544 ?x616 ?x638 ?x638 ?x638)) ?x648 (* (- (/ 1.0 16.0)) (* ?x221 ?x221 ?x221 ?x544 ?x616 ?x638 ?x638)) (* (/ 1.0 16.0) (* (to_real a00) ?x221 ?x221 ?x221 ?x616 ?x638 ?x638)) (* (- (/ 1.0 8.0)) (* (to_real y00) ?x221 ?x221 ?x221 ?x221 ?x638 ?x638)) (* (/ 1.0 8.0) (* ?x221 ?x544 ?x544 ?x544 ?x544 ?x616 ?x616 ?x638 ?x638)))))
 (let (($x267 (>= ?x674 0.0)))
 (let (($x448 (not $x267)))
 (let (($x807 (<= ?x674 0.0)))
 (let ((?x677 (* b!2 y!0)))
 (let ((?x676 (* (- 2) ?x677)))
 (let ((?x450 (* a!3 d!1)))
 (let ((?x644 (+ ?x450 (* (- 1) ?x597) ?x676 (* 2 (* y00 b!2)))))
 (let (($x803 (>= ?x644 0)))
 (let (($x789 (= 0 ?x644)))
 (let ((@x837 (symm (commutativity (= $x789 (= ?x644 0))) (= (= ?x644 0) $x789))))
 (let (($x646 (= ?x644 0)))
 (let ((?x66 (to_real y00)))
 (let ((?x788 (* ?x66 ?x221)))
 (let ((?x527 (* ?x221 ?x638)))
 (let ((?x531 (* (- 1.0) ?x527)))
 (let ((?x806 (+ ?x531 (* (/ 1.0 2.0) ?x787) ?x788 (* (- (/ 1.0 2.0)) (* (to_real a00) ?x616)))))
 (let ((?x762 (* (- (/ 1.0 32.0)) (* ?x221 ?x221 ?x221 ?x616 ?x616))))
 (let ((?x776 (* (- (/ 1.0 8.0)) (* ?x221 ?x221 ?x221 ?x616 ?x638))))
 (let ((?x726 (* (/ 3.0 4.0) (* ?x221 ?x221 ?x544 ?x544 ?x616 ?x638 ?x638))))
 (let ((?x773 (* (/ 3.0 4.0) (* ?x221 ?x221 ?x221 ?x544 ?x616 ?x616 ?x638))))
 (let ((?x701 (* (/ 3.0 4.0) (* ?x221 ?x221 ?x544 ?x544 ?x616 ?x616 ?x638))))
 (let ((?x686 (* (/ 1.0 16.0) (* ?x221 ?x221 ?x221 ?x221 ?x616 ?x616 ?x616))))
 (let ((?x455 (* (/ 3.0 16.0) (* ?x221 ?x221 ?x221 ?x544 ?x616 ?x616 ?x616))))
 (let ((?x640 (* ?x221 ?x221 ?x221 ?x544 ?x616 ?x638 ?x638)))
 (let ((?x684 (* (/ 3.0 4.0) ?x640)))
 (let ((?x653 (* (/ 1.0 4.0) (* ?x221 ?x544 ?x544 ?x544 ?x616 ?x638 ?x638))))
 (let ((?x692 (* (/ 1.0 4.0) (* ?x221 ?x544 ?x544 ?x544 ?x616 ?x616 ?x638))))
 (let ((?x727 (* (/ 1.0 4.0) (* ?x221 ?x221 ?x221 ?x221 ?x616 ?x616 ?x638))))
 (let ((?x510 (* (- (/ 1.0 8.0)) (* ?x221 ?x221 ?x221 ?x638 ?x638))))
 (let ((?x671 (* (/ 1.0 16.0) (* ?x221 ?x544 ?x544 ?x544 ?x616 ?x616 ?x616))))
 (let ((?x669 (* (/ 3.0 16.0) (* ?x221 ?x221 ?x544 ?x544 ?x616 ?x616 ?x616))))
 (let ((?x759 (* (/ 1.0 4.0) (* ?x221 ?x221 ?x221 ?x221 ?x616 ?x638 ?x638))))
 (let ((?x783 (+ ?x759 ?x669 ?x671 ?x510 ?x727 ?x692 ?x653 ?x684 ?x455 ?x686 ?x701 ?x773 ?x726 ?x776 ?x762)))
 (let ((?x278 (* ?x783 ?x806)))
 (let (($x792 (= ?x278 0.0)))
 (let (($x680 (= ?x674 0.0)))
 (let (($x813 (not $x680)))
 (let (($x794 (or $x813 (not $x792))))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x459 (= (+ ?x35 ?x104 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x330 (and $x459 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x646 $x794)))
 (let ((?x696 (+ (* (/ 1.0 2.0) (* ?x616 ?x544)) ?x531 (* ?x221 ?x66) (* (- (/ 1.0 2.0)) (* ?x616 (to_real a00))))))
 (let ((?x587 (+ (* (/ 1.0 4.0) (* ?x616 ?x544 ?x544 ?x544 ?x221 ?x638 ?x638)) ?x510 (* (/ 3.0 4.0) (* ?x616 ?x544 ?x221 ?x221 ?x221 ?x638 ?x638)) (* (/ 1.0 16.0) (* ?x616 ?x616 ?x616 ?x544 ?x544 ?x544 ?x221)) (* (/ 3.0 16.0) (* ?x616 ?x616 ?x616 ?x544 ?x544 ?x221 ?x221)) (* (/ 3.0 16.0) (* ?x616 ?x616 ?x616 ?x544 ?x221 ?x221 ?x221)) (* (/ 1.0 16.0) (* ?x616 ?x616 ?x616 ?x221 ?x221 ?x221 ?x221)) (* (/ 1.0 4.0) (* ?x616 ?x616 ?x544 ?x544 ?x544 ?x221 ?x638)) (* (/ 3.0 4.0) (* ?x616 ?x616 ?x544 ?x544 ?x221 ?x221 ?x638)) (* (/ 3.0 4.0) (* ?x616 ?x616 ?x544 ?x221 ?x221 ?x221 ?x638)) (* (/ 1.0 4.0) (* ?x616 ?x616 ?x221 ?x221 ?x221 ?x221 ?x638)) (* (/ 3.0 4.0) (* ?x616 ?x544 ?x544 ?x221 ?x221 ?x638 ?x638)) (* (/ 1.0 4.0) (* ?x616 ?x221 ?x221 ?x221 ?x221 ?x638 ?x638)) (* (- (/ 1.0 32.0)) (* ?x616 ?x616 ?x221 ?x221 ?x221)) (* (- (/ 1.0 8.0)) (* ?x616 ?x221 ?x221 ?x221 ?x638)))))
 (let ((?x532 (* (- (/ 1.0 8.0)) (* ?x616 ?x616 ?x544 ?x544 ?x544 ?x221 ?x638 ?x638 (to_real a00)))))
 (let ((?x589 (+ (* (/ 1.0 8.0) (* ?x616 ?x616 ?x544 ?x544 ?x544 ?x544 ?x221 ?x638 ?x638)) (* (- (/ 1.0 4.0)) (* ?x616 ?x544 ?x544 ?x544 ?x221 ?x221 ?x638 ?x638 ?x638)) (* (/ 1.0 4.0) (* ?x616 ?x544 ?x544 ?x544 ?x221 ?x221 ?x638 ?x638 ?x66)) ?x532 (* (- (/ 1.0 16.0)) (* ?x616 ?x544 ?x221 ?x221 ?x221 ?x638 ?x638)) ?x581 (* (- (/ 1.0 8.0)) (* ?x221 ?x221 ?x221 ?x221 ?x638 ?x638 ?x66)) (* (/ 1.0 16.0) (* ?x616 ?x221 ?x221 ?x221 ?x638 ?x638 (to_real a00))))))
 (let (($x615 (= (+ ?x450 ?x676 (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00))) 0)))
 (let (($x681 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x104 (* 2 (* y!0 b00))) 0)))
 (let (($x707 (and $x681 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) $x615 (or (not (= ?x589 0.0)) (not (= (* ?x587 ?x696) 0.0))))))
 (let (($x468 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x164 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x248 (+ ?x164 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x747 (* (/ 3.0 4.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x741 (* (/ 3.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x714 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x61 ?x63))))
 (let ((?x732 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61))))
 (let ((?x728 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x61))))
 (let ((?x268 (* (/ 1.0 4.0) (* ?x56 (to_real a) (to_real a) (to_real a) ?x61 ?x63 ?x63))))
 (let ((?x840 (+ ?x268 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 4.0) (* ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63)) ?x728 ?x732 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) ?x714 ?x741 (* (/ 3.0 4.0) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x747 (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x61 ?x61 ?x63)))))
 (let ((?x69 (to_real a00)))
 (let ((?x59 (to_real a)))
 (let ((?x341 (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x389 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x341 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00))) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)))))
 (let (($x150 (not (= ?x389 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x171 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x176 (= ?x171 0)))
 (let (($x101 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (and $x136 $x101 $x176 (or $x150 (not (= (* ?x840 ?x248) 0.0))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x540 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x547 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x512 (* ?x66 ?x61)))
 (let ((?x594 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x512 ?x547)))
 (let ((?x63 (to_real y)))
 (let ((?x432 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x620 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x645 (+ (* (/ 1.0 4.0) (* ?x56 ?x61 ?x620 ?x620 ?x620 ?x432 ?x432)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x432 ?x432)))))
 (let ((?x444 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x56 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61)))))
 (let ((?x614 (* ?x444 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x512 ?x547))))
 (let (($x657 (or (not (= ?x614 0.0)) (not (= (* ?x645 ?x594) 0.0)))))
 (let ((?x480 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x481 (= ?x480 0)))
 (let ((?x342 (* d00 a)))
 (let ((?x555 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x342)))
 (and (= ?x555 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x481 $x657))))))))))))))))))) :qid k!33))
 ))
 (let ((?x479 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x164 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x248 (+ ?x164 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x63 (to_real y)))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x747 (* (/ 3.0 4.0) (* ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63 ?x63))))
 (let ((?x741 (* (/ 3.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61 ?x63))))
 (let ((?x714 (* (/ 1.0 4.0) (* ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x61 ?x63))))
 (let ((?x732 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) ?x61 ?x61))))
 (let ((?x728 (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) (to_real a) (to_real a) ?x61))))
 (let ((?x268 (* (/ 1.0 4.0) (* ?x56 (to_real a) (to_real a) (to_real a) ?x61 ?x63 ?x63))))
 (let ((?x840 (+ ?x268 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 3.0 4.0) (* ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63 ?x63)) ?x728 ?x732 (* (/ 3.0 16.0) (* ?x56 ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61)) (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x61 ?x61 ?x61 ?x61)) ?x714 ?x741 (* (/ 3.0 4.0) (* ?x56 ?x56 (to_real a) ?x61 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x61 ?x61 ?x61 ?x61 ?x63)) ?x747 (* (/ 1.0 4.0) (* ?x56 ?x61 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x61 ?x61 ?x61)) (* (- (/ 1.0 8.0)) (* ?x56 ?x61 ?x61 ?x61 ?x63)))))
 (let ((?x69 (to_real a00)))
 (let ((?x59 (to_real a)))
 (let ((?x341 (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 (to_real y00)))))
 (let ((?x389 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63 ?x63 ?x63)) ?x341 (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x63 ?x63 ?x69)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x61 ?x61 ?x61 ?x63 ?x63)) (* (/ 1.0 8.0) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 ?x63)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x61 ?x63 ?x63 (to_real y00))) (* (/ 1.0 16.0) (* ?x56 ?x61 ?x61 ?x61 ?x63 ?x63 ?x69)))))
 (let (($x150 (not (= ?x389 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x171 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x176 (= ?x171 0)))
 (let (($x101 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let ((?x35 (* a00 d00)))
 (let (($x136 (= (+ ?x35 (* (- 1) (* a d00)) ?x104 (* 2 (* y b00))) 0)))
 (let (($x337 (and $x136 $x101 $x176 (or $x150 (not (= (* ?x840 ?x248) 0.0))))))
 (let ((?x547 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x512 (* ?x66 ?x61)))
 (let ((?x594 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x59 ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x512 ?x547)))
 (let ((?x432 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x446 (* (/ 1.0 4.0) (* ?x56 ?x61 (+ ?x59 ?x61) (+ ?x59 ?x61) (+ ?x59 ?x61) ?x432 ?x432))))
 (let (($x656 (= (* (+ ?x446 (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x432 ?x432))) ?x594) 0.0)))
 (let ((?x444 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x56 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61)))))
 (let (($x798 (not (= (* ?x444 (+ ?x164 (* (- 1.0) (* ?x63 ?x61)) ?x512 ?x547)) 0.0))))
 (let (($x657 (or $x798 (not $x656))))
 (let ((?x480 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x481 (= ?x480 0)))
 (let ((?x342 (* d00 a)))
 (let (($x463 (= (+ (* 2 ?x103) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x342) 0)))
 (let (($x551 (and $x463 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x481 $x657)))
 (rewrite (= $x551 $x337))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x662 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x547 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x512 (* ?x66 ?x61)))
 (let ((?x594 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x512 ?x547)))
 (let ((?x63 (to_real y)))
 (let ((?x432 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x620 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x645 (+ (* (/ 1.0 4.0) (* ?x56 ?x61 ?x620 ?x620 ?x620 ?x432 ?x432)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x432 ?x432)))))
 (let ((?x444 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x56 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61)))))
 (let ((?x614 (* ?x444 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x512 ?x547))))
 (let (($x657 (or (not (= ?x614 0.0)) (not (= (* ?x645 ?x594) 0.0)))))
 (let ((?x480 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x481 (= ?x480 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x670 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x670 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x481 $x657))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x549 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x547 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x512 (* ?x66 ?x61)))
 (let ((?x594 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x512 ?x547)))
 (let ((?x63 (to_real y)))
 (let ((?x432 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x620 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x645 (+ (* (/ 1.0 4.0) (* ?x56 ?x61 ?x620 ?x620 ?x620 ?x432 ?x432)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x432 ?x432)))))
 (let ((?x444 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x56 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61)))))
 (let ((?x614 (* ?x444 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x512 ?x547))))
 (let (($x657 (or (not (= ?x614 0.0)) (not (= (* ?x645 ?x594) 0.0)))))
 (let ((?x480 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x481 (= ?x480 0)))
 (let ((?x342 (* d00 a)))
 (let ((?x555 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x342)))
 (let (($x551 (and (= ?x555 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x481 $x657)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x465 (and (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) ?x342)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x481 $x657)))
 (rewrite (= $x465 $x551))))))))))))))))))))))))))
 ))
 (let (($x95 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x76 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x82 (+ ?x63 ?x58)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x89 (- (* ?x80 ?x80 ?x80 ?x62 ?x58 ?x82 ?x82) (* ?x62 ?x62 ?x62 ?x82 ?x82))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x91 (= (* (- (+ (- (* ?x80 ?x58) (* ?x57 ?x62 ?x82)) ?x67) ?x70) ?x89) ?x76)))
 (let ((?x74 (- (* (to_real a) (to_real a) (to_real a) ?x62 ?x58 ?x63 ?x63) (* ?x62 ?x62 ?x62 ?x63 ?x63))))
 (let ((?x75 (* (- (+ (- (* (to_real a) ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x74)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= ?x75 ?x76)) (not $x91)))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x486 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x547 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x512 (* ?x66 ?x61)))
 (let ((?x594 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x512 ?x547)))
 (let ((?x63 (to_real y)))
 (let ((?x432 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x620 (+ ?x59 ?x61)))
 (let ((?x56 (to_real d)))
 (let ((?x645 (+ (* (/ 1.0 4.0) (* ?x56 ?x61 ?x620 ?x620 ?x620 ?x432 ?x432)) (* (- (/ 1.0 8.0)) (* ?x61 ?x61 ?x61 ?x432 ?x432)))))
 (let ((?x444 (+ (* (/ 1.0 4.0) (* ?x63 ?x63 ?x56 ?x61 ?x59 ?x59 ?x59)) (* (- (/ 1.0 8.0)) (* ?x63 ?x63 ?x61 ?x61 ?x61)))))
 (let ((?x614 (* ?x444 (+ (* (/ 1.0 2.0) (* ?x56 ?x59)) (* (- 1.0) (* ?x63 ?x61)) ?x512 ?x547))))
 (let (($x657 (or (not (= ?x614 0.0)) (not (= (* ?x645 ?x594) 0.0)))))
 (let ((?x480 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x481 (= ?x480 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x103 (* b00 y00)))
 (let ((?x104 (* (- 2) ?x103)))
 (let (($x670 (= (+ ?x104 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x465 (and $x670 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x481 $x657)))
 (let ((?x76 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x82 (+ ?x63 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x80 (to_real (+ a b))))
 (let ((?x89 (- (* ?x80 ?x80 ?x80 ?x62 ?x58 ?x82 ?x82) (* ?x62 ?x62 ?x62 ?x82 ?x82))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x86 (- (+ (- (* ?x80 ?x58) (* ?x57 ?x62 ?x82)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x74 (- (* ?x59 ?x59 ?x59 ?x62 ?x58 ?x63 ?x63) (* ?x62 ?x62 ?x62 ?x63 ?x63))))
 (let ((?x71 (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) (* ?x57 ?x62 ?x66)) ?x70)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x94 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not (= (* ?x71 ?x74) ?x76)) (not (= (* ?x86 ?x89) ?x76))))))
 (rewrite (= $x94 $x465)))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x96 (asserted $x95)))
 (let ((@x639 (mp (mp @x96 (quant-intro (proof-bind ?x486) (= $x95 $x662)) $x662) (rewrite (= $x662 $x662)) $x662)))
 (let ((@x213 (mp (mp @x639 (quant-intro (proof-bind ?x549) (= $x662 $x540)) $x540) (quant-intro (proof-bind ?x479) (= $x540 $x468)) $x468)))
 (let ((@x736 (mp (mp~ @x213 (sk (~ $x468 $x707)) $x707) (rewrite (= $x707 $x330)) $x330)))
 (let ((@x839 (mp (and-elim @x736 $x646) @x837 $x789)))
 (let ((@x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x789) $x803)) @x839 $x803)))
 (let (($x801 (<= ?x644 0)))
 (let ((@x834 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x789) $x801)) @x839 $x801)))
 (let (($x155 (not $x698)))
 (let (($x705 (not $x237)))
 (let (($x122 (not $x119)))
 (let (($x704 (not $x801)))
 (let (($x461 (not $x803)))
 (let (($x460 (not $x828)))
 (let ((@x475 (unit-resolution ((_ th-lemma arith) (or $x460 $x461 $x704 $x122 $x807 $x705 $x155)) @x834 @x332 (hypothesis (not $x807)) @x178 @x233 (unit-resolution @x722 (hypothesis $x827) $x828) (unit-resolution @x751 (hypothesis $x827) $x237) false)))
 (let (($x571 (= 0.0 ?x674)))
 (let (($x169 (not $x571)))
 (let ((@x499 (monotonicity (symm (commutativity (= $x571 $x680)) (= $x680 $x571)) (= $x813 $x169))))
 (let (($x188 (>= ?x278 0.0)))
 (let ((?x143 (+ ?x684 ?x762 ?x759 ?x669 ?x671 ?x510 ?x727 ?x692 ?x653 ?x455 ?x686 ?x701 ?x773 ?x726 ?x776)))
 (let (($x257 (<= ?x143 0.0)))
 (let (($x206 (not $x188)))
 (let ((@x207 (hypothesis $x206)))
 (let ((?x568 (+ ?x527 (* (- (/ 1.0 2.0)) ?x787) (* (- 1.0) ?x788) (* (/ 1.0 2.0) (* (to_real a00) ?x616)))))
 (let (($x297 (<= ?x568 0.0)))
 (let ((?x562 (+ ?x527 (* (- 1.0) (to_real ?x677)))))
 (let (($x322 (<= ?x562 0.0)))
 (let (($x740 (= 0.0 ?x562)))
 (let ((@x841 (symm (commutativity (= $x740 (= ?x562 0.0))) (= (= ?x562 0.0) $x740))))
 (let ((@x842 (mp ((_ th-lemma arith) (= ?x562 0.0)) @x841 $x740)))
 (let ((?x567 (+ ?x788 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x145 (>= ?x567 0.0)))
 (let (($x778 (= 0.0 ?x567)))
 (let ((@x298 (symm (commutativity (= $x778 (= ?x567 0.0))) (= (= ?x567 0.0) $x778))))
 (let ((@x292 (mp ((_ th-lemma arith) (= ?x567 0.0)) @x298 $x778)))
 (let ((?x69 (to_real a00)))
 (let ((?x795 (* ?x69 ?x616)))
 (let ((?x761 (+ (* (- 1.0) ?x439) ?x795)))
 (let (($x129 (<= ?x761 0.0)))
 (let (($x765 (= 0.0 ?x761)))
 (let ((@x172 (symm (commutativity (= $x765 (= ?x761 0.0))) (= (= ?x761 0.0) $x765))))
 (let ((@x173 (mp ((_ th-lemma arith) (= ?x761 0.0)) @x172 $x765)))
 (let ((@x200 ((_ th-lemma arith) (hypothesis (not $x297)) (hypothesis $x119) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x765) $x129)) @x173 $x129) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x778) $x145)) @x292 $x145) @x332 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x322)) @x842 $x322) false)))
 (let ((@x180 (unit-resolution (lemma @x200 (or $x122 $x297)) @x178 $x297)))
 (let ((@x488 (unit-resolution ((_ th-lemma arith) (or (not $x297) $x257 $x188)) @x207 @x180 (hypothesis (not $x257)) false)))
 (let (($x675 (<= ?x806 0.0)))
 (let (($x779 (<= ?x567 0.0)))
 (let (($x771 (>= ?x761 0.0)))
 (let (($x730 (>= ?x562 0.0)))
 (let ((@x598 ((_ th-lemma arith) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x730)) @x842 $x730) @x834 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x765) $x771)) @x173 $x771) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x778) $x779)) @x292 $x779) (hypothesis (not $x675)) (unit-resolution @x382 @x311 $x698) false)))
 (let ((@x294 (lemma @x598 $x675)))
 (let ((@x580 (unit-resolution ((_ th-lemma arith) (or (not $x257) (not $x297) $x188 (not $x675))) @x207 @x294 @x180 (unit-resolution (lemma @x488 (or $x257 $x188)) @x207 $x257) false)))
 (let (($x280 (<= ?x278 0.0)))
 (let (($x602 (>= ?x143 0.0)))
 (let (($x611 (not $x602)))
 (let (($x445 (not $x280)))
 (let ((@x174 (hypothesis $x445)))
 (let ((@x181 (unit-resolution ((_ th-lemma arith) (or $x611 (not $x297) $x280 (not $x675))) @x174 @x294 @x180 (hypothesis $x602) false)))
 (let ((@x202 (unit-resolution ((_ th-lemma arith) (or (not $x297) $x602 $x280)) @x174 @x180 (unit-resolution (lemma @x181 (or $x611 $x280)) @x174 $x611) false)))
 (let ((@x117 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x792 $x445 $x206)) (lemma @x202 $x280) (or $x792 $x206))))
 (let ((@x318 (unit-resolution (and-elim @x736 $x794) (unit-resolution @x117 (lemma @x580 $x188) $x792) $x813)))
 (let ((@x138 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x571 (not $x807) $x448)) (mp @x318 @x499 $x169) (or (not $x807) $x448))))
 (let ((@x467 (unit-resolution @x138 (unit-resolution (lemma @x475 (or (not $x827) $x807)) @x618 $x807) $x448)))
 (unit-resolution ((_ th-lemma arith) (or $x461 $x704 $x267 $x122 $x460 $x155 $x705)) @x834 @x332 @x467 @x178 @x233 (unit-resolution @x722 @x618 $x828) (unit-resolution @x751 @x618 $x237) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       67
 :arith-eq-adapter                54
 :arith-bound-propagations-cheap  31
 :arith-bound-propagations-lp     8
 :arith-conflicts                 103
 :arith-diseq                     32
 :arith-gcd-calls                 6
 :arith-grobner-calls             8
 :arith-grobner-conflicts         2
 :arith-horner-calls              8
 :arith-horner-cross-nested-forms 12
 :arith-lower                     67
 :arith-make-feasible             64
 :arith-max-columns               83
 :arith-max-rows                  24
 :arith-nla-explanations          138
 :arith-nla-lemmas                101
 :arith-patches                   6
 :arith-patches-success           6
 :arith-propagations              31
 :arith-upper                     71
 :conflicts                       14
 :decisions                       92
 :del-clause                      234
 :final-checks                    56
 :max-memory                      5.73
 :memory                          3.15
 :mk-bool-var                     318
 :mk-clause                       276
 :num-allocs                      11650943
 :num-checks                      1
 :propagations                    130
 :rlimit-count                    7169
 :time                            0.05
 :total-time                      0.06)
