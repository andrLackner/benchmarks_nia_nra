unsat
((set-logic NIA)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x321 (* (- 1) k!2)))
 (let ((?x87 (* n!0 n!0)))
 (let ((?x596 (* 3 ?x87)))
 (let ((?x642 (+ ?x596 (* 3 n!0) ?x321)))
 (let (($x708 (<= ?x642 (- 1))))
 (let (($x641 (= ?x642 (- 1))))
 (let ((?x650 (+ k!2 c!3)))
 (let ((?x647 (+ m!1 k!2)))
 (let ((?x142 (+ 6 m!1)))
 (let ((?x286 (+ 1 n!0)))
 (let ((?x655 (* ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x142 ?x647 ?x647 ?x647 ?x647 ?x647 ?x647 ?x647 ?x647 ?x647 ?x647 ?x650 ?x650 ?x650 ?x650 ?x650 ?x650 ?x650 (+ 7 ?x596 (* (- 1) m!1) (* 9 n!0) ?x321))))
 (let (($x654 (= ?x655 0)))
 (let (($x657 (not $x654)))
 (let ((?x180 (* k!2 k!2)))
 (let ((?x324 (* 9 n!0)))
 (let ((?x605 (+ ?x324 (* (- 5) k!2) (* (- 18) c!3) ?x180 (* (- 9) (* n!0 c!3)))))
 (let ((?x178 (+ m!1 (* (- 6) n!0))))
 (let (($x363 (= ?x178 6)))
 (let (($x656 (and $x363 (= ?x605 (- 4)) (= (+ (* 2 n!0) ?x321 (* (- 3) c!3) (* n!0 k!2)) (- 1)) $x641 $x657)))
 (let ((?x380 (+ c!3 k!2)))
 (let ((?x143 (+ k!2 m!1)))
 (let ((?x198 (* ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x286 ?x142 ?x143 ?x143 ?x143 ?x143 ?x143 ?x143 ?x143 ?x143 ?x143 ?x143 ?x380 ?x380 ?x380 ?x380 ?x380 ?x380 ?x380 (+ 7 ?x321 (* (- 1) m!1) ?x324 ?x596))))
 (let (($x279 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x184 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x180) (* 9 (* c!3 n!0)))))
 (let (($x389 (and $x363 (= ?x184 4) $x279 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x87)) 1) (not (= ?x198 0)))))
 (let (($x206 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x90 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x385 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 $x200 $x252 $x290 (not (= ?x90 0)))))))))))))))))))))) :qid k!34))
 ))
 (let (($x343 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x388 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x385 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x361)))
 (let (($x207 (not (= ?x388 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x155 $x174 $x207))))))))))))))))))) :qid k!34))
 ))
 (let ((?x93 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x261 (* n n)))
 (let ((?x262 (* 3 ?x261)))
 (let ((?x48 (* 9 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x90 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x385 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 (+ 7 ?x230 ?x346 ?x48 ?x262))))
 (let (($x290 (= (+ k (* (- 3) n) (* (- 3) ?x261)) 1)))
 (let (($x252 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x200 (= (+ ?x40 ?x44 ?x202 ?x203 (* 9 (* c n))) 4)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x112 (and $x116 $x200 $x252 $x290 (not (= ?x90 0)))))
 (let ((?x388 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x385 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 (+ 4 (* 3 (* ?x298 ?x298)) ?x230 ?x346 (* 3 n)))))
 (let (($x207 (not (= ?x388 0))))
 (let (($x174 (= (+ ?x262 ?x230 (* 3 n)) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x210 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x155 $x174 $x207)))
 (rewrite (= $x210 $x112))))))))))))))))))))))))))))
 ))
 (let (($x98 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x388 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x385 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x361)))
 (let (($x207 (not (= ?x388 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x174 $x207)))))))))))))))) :qid k!34))
 ))
 (let ((?x344 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x388 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x385 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x361)))
 (let (($x207 (not (= ?x388 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let (($x155 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x203 (* (- 1) ?x49)))
 (let ((?x202 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x210 (and $x116 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x202 ?x203) 4) $x155 $x174 $x207)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x86 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x174 $x207)))
 (rewrite (= $x86 $x210)))))))))))))))))))))))))
 ))
 (let (($x83 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x68 (+ n 1)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x76 (- 1)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x75 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x76 ?x75 ?x75 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x76 ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 (+ m 6) ?x75 ?x71 ?x68 ?x68 ?x68)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x78 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x194 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x346 (* (- 1) m)))
 (let ((?x230 (* (- 1) k)))
 (let ((?x361 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x230 ?x346 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x385 (+ 6 m)))
 (let ((?x298 (+ 1 n)))
 (let ((?x388 (* ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x298 ?x385 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x71 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x75 ?x361)))
 (let (($x207 (not (= ?x388 0))))
 (let (($x174 (= (+ (* 3 (* n n)) ?x230 ?x65) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x267 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x116 (= (+ m (* (- 6) n)) 6)))
 (let (($x86 (and $x116 (= ?x267 (- 4)) (= (+ (* (- 3) c) (* n k) ?x230 (* 2 n)) (- 1)) $x174 $x207)))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (- 1)))
 (let ((?x78 (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x75 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x76 ?x75 ?x75 ?x71 ?x71 ?x71 ?x68 ?x68 ?x68 ?x76 ?x75 ?x75 ?x75 ?x71 ?x71 ?x71 (+ m 6) ?x75 ?x71 ?x68 ?x68 ?x68)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x82 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not (= ?x78 0))))))
 (rewrite (= $x82 $x86)))))))))))))))))))))))))))
 ))
 (let ((@x84 (asserted $x83)))
 (let ((@x334 (mp (mp @x84 (quant-intro (proof-bind ?x194) (= $x83 $x98)) $x98) (rewrite (= $x98 $x98)) $x98)))
 (let ((@x94 (mp (mp @x334 (quant-intro (proof-bind ?x344) (= $x98 $x343)) $x343) (quant-intro (proof-bind ?x93) (= $x343 $x206)) $x206)))
 (let ((@x533 (mp (mp~ @x94 (sk (~ $x206 $x389)) $x389) (rewrite (= $x389 $x656)) $x656)))
 (let ((@x636 (and-elim @x533 $x641)))
 (let ((@x338 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x641) $x708)) @x636 $x708)))
 (let (($x703 (>= ?x178 6)))
 (let ((@x535 (and-elim @x533 $x363)))
 (let ((@x330 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x363) $x703)) @x535 $x703)))
 (let (($x709 (>= ?x642 (- 1))))
 (let ((@x208 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x641) $x709)) @x636 $x709)))
 (let (($x702 (<= ?x178 6)))
 (let ((@x236 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x363) $x702)) @x535 $x702)))
 (let (($x376 (not (<= ?x655 0))))
 (let (($x712 (>= ?x655 0)))
 (let ((@x95 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x712)) @x236 @x208 @x330 @x338 false) $x712)))
 (let ((@x371 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x654 $x376 (not $x712))) (and-elim @x533 $x657) (or $x376 (not $x712)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x371 @x95 $x376) @x236 @x208 @x330 @x338 false))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      20
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.69
 :memory                    3.17
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1215805
 :num-checks                1
 :propagations              12
 :rlimit-count              4166
 :time                      0.01
 :total-time                0.02)
