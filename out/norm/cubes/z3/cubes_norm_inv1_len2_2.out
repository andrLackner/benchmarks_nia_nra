unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x561 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x761 (<= ?x561 (- 6))))
 (let (($x429 (= ?x561 (- 6))))
 (let ((?x553 (+ k!2 c!3)))
 (let ((?x732 (+ m!1 k!2)))
 (let ((?x679 (+ 6 m!1)))
 (let ((?x680 (+ 1 n!0)))
 (let ((?x221 (* m!1 m!1)))
 (let ((?x163 (+ ?x221 (* 3 (* n!0 n!0 m!1 m!1)) (* (- 6) (* n!0 n!0 n!0 n!0 m!1)) (* 6 (* ?x680 ?x680 ?x679 ?x679 ?x732 ?x732 ?x732 ?x553)) (* (- 144) n!0) (* n!0 n!0 n!0 m!1 m!1) (* (- 216) (* n!0 n!0)) (* (- 36) (* n!0 n!0 n!0 n!0)) (* (- 144) (* n!0 n!0 n!0)) (* (- 6) (* n!0 m!1)) (* (- 1) (* ?x680 ?x679 ?x679 ?x679 ?x732 ?x732 ?x732 ?x553)) (* 6 (* ?x680 ?x679 ?x679 ?x732 ?x732 ?x732 ?x553)) (* 3 (* n!0 m!1 m!1)) (* (- 18) (* n!0 n!0 m!1)) (* (- 18) (* n!0 n!0 n!0 m!1)))))
 (let (($x312 (= ?x163 36)))
 (let (($x391 (not $x312)))
 (let (($x697 (= (+ (* 3 n!0) (* 3 (* n!0 n!0)) (* (- 1) k!2)) (- 1))))
 (let (($x719 (= (+ (* n!0 k!2) (* 2 n!0) (* (- 1) k!2) (* (- 3) c!3)) (- 1))))
 (let ((?x491 (* 18 c!3)))
 (let ((?x666 (* 5 k!2)))
 (let ((?x522 (* (- 9) n!0)))
 (let ((?x592 (* (- 1) (* k!2 k!2))))
 (let (($x700 (and $x429 (= (+ (* 9 (* n!0 c!3)) ?x592 ?x522 ?x666 ?x491) 4) $x719 $x697 $x391)))
 (let ((?x344 (+ c!3 k!2)))
 (let ((?x678 (+ k!2 m!1)))
 (let ((?x535 (+ (* 144 n!0) (* 216 (* n!0 n!0)) (* ?x680 ?x679 ?x679 ?x679 ?x678 ?x678 ?x678 ?x344) (* (- 6) (* ?x680 ?x679 ?x679 ?x678 ?x678 ?x678 ?x344)) (* 144 (* n!0 n!0 n!0)) (* 6 (* m!1 n!0 n!0 n!0 n!0)) (* 36 (* n!0 n!0 n!0 n!0)) (* 6 (* m!1 n!0)) (* 18 (* m!1 n!0 n!0)) (* 18 (* m!1 n!0 n!0 n!0)) (* (- 6) (* ?x680 ?x680 ?x679 ?x679 ?x678 ?x678 ?x678 ?x344)) (* (- 1) (* m!1 m!1 n!0 n!0 n!0)) (* (- 1) ?x221) (* (- 3) (* m!1 m!1 n!0)) (* (- 3) (* m!1 m!1 n!0 n!0)))))
 (let (($x489 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x555 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x491 ?x666 ?x522 ?x592 (* 9 (* c!3 n!0))) 4) $x489 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x535 (- 36))))))
 (let (($x201 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x917 (* (- 3) (* m m n n))))
 (let ((?x920 (* (- 3) (* m m n))))
 (let ((?x919 (* (- 1) (* m m))))
 (let ((?x922 (* (- 1) (* m m n n n))))
 (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x304 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x525 (* ?x307 ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x597 (* (- 6) ?x525)))
 (let ((?x930 (* 18 (* m n n n))))
 (let ((?x454 (* 36 (* n n n n))))
 (let ((?x414 (* 6 (* m n n n n))))
 (let ((?x464 (* 144 (* n n n))))
 (let ((?x385 (* ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x448 (* (- 6) ?x385)))
 (let ((?x361 (* ?x307 ?x304 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x265 (* n n)))
 (let ((?x459 (* 216 ?x265)))
 (let ((?x457 (* 144 n)))
 (let ((?x102 (+ ?x457 ?x459 ?x361 ?x448 ?x464 ?x414 ?x454 (* 6 (* m n)) (* 18 (* m n n)) ?x930 ?x597 ?x922 ?x919 ?x920 ?x917)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) ?x265)) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 $x204 $x256 $x294 (not (= ?x102 (- 36)))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x501 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x304 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x525 (* ?x307 ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x597 (* (- 6) ?x525)))
 (let ((?x385 (* ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x448 (* (- 6) ?x385)))
 (let ((?x361 (* ?x307 ?x304 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x599 (+ ?x361 ?x448 (* 6 (* ?x307 ?x307 ?x307 ?x307 ?x304)) (* 6 (* ?x307 ?x307 ?x307 ?x304)) (* (- 1) (* ?x307 ?x307 ?x307 ?x304 ?x304)) ?x597)))
 (let (($x412 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x181 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x181 $x412 (not (= ?x599 0))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x199 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x917 (* (- 3) (* m m n n))))
 (let ((?x920 (* (- 3) (* m m n))))
 (let ((?x919 (* (- 1) (* m m))))
 (let ((?x922 (* (- 1) (* m m n n n))))
 (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x304 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x525 (* ?x307 ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x597 (* (- 6) ?x525)))
 (let ((?x930 (* 18 (* m n n n))))
 (let ((?x454 (* 36 (* n n n n))))
 (let ((?x414 (* 6 (* m n n n n))))
 (let ((?x464 (* 144 (* n n n))))
 (let ((?x385 (* ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x448 (* (- 6) ?x385)))
 (let ((?x361 (* ?x307 ?x304 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x265 (* n n)))
 (let ((?x459 (* 216 ?x265)))
 (let ((?x457 (* 144 n)))
 (let ((?x102 (+ ?x457 ?x459 ?x361 ?x448 ?x464 ?x414 ?x454 (* 6 (* m n)) (* 18 (* m n n)) ?x930 ?x597 ?x922 ?x919 ?x920 ?x917)))
 (let (($x294 (= (+ k (* (- 3) n) (* (- 3) ?x265)) 1)))
 (let (($x256 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x204 (= (+ ?x40 ?x44 ?x206 ?x207 (* 9 (* c n))) 4)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x319 (and $x120 $x204 $x256 $x294 (not (= ?x102 (- 36))))))
 (let ((?x599 (+ ?x361 ?x448 (* 6 (* ?x307 ?x307 ?x307 ?x307 ?x304)) (* 6 (* ?x307 ?x307 ?x307 ?x304)) (* (- 1) (* ?x307 ?x307 ?x307 ?x304 ?x304)) ?x597)))
 (let (($x412 (= (+ (* 3 ?x265) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x181 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x419 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x181 $x412 (not (= ?x599 0)))))
 (rewrite (= $x419 $x319))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x405 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x304 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x525 (* ?x307 ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x520 (* ?x307 ?x307 ?x307 ?x304 ?x304)))
 (let ((?x532 (+ (* (- 1) (* ?x307 ?x304 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)) (* 6 (* ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)) (* (- 6) (* ?x307 ?x307 ?x307 ?x307 ?x304)) (* (- 6) (* ?x307 ?x307 ?x307 ?x304)) ?x520 (* 6 ?x525))))
 (let (($x412 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x339 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x614 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (and $x120 (= ?x614 (- 4)) $x339 $x412 (not (= ?x532 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x468 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x304 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x525 (* ?x307 ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x597 (* (- 6) ?x525)))
 (let ((?x385 (* ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x448 (* (- 6) ?x385)))
 (let ((?x361 (* ?x307 ?x304 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x599 (+ ?x361 ?x448 (* 6 (* ?x307 ?x307 ?x307 ?x307 ?x304)) (* 6 (* ?x307 ?x307 ?x307 ?x304)) (* (- 1) (* ?x307 ?x307 ?x307 ?x304 ?x304)) ?x597)))
 (let (($x412 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x181 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x207 (* (- 1) ?x49)))
 (let ((?x206 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x419 (and $x120 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x206 ?x207) 4) $x181 $x412 (not (= ?x599 0)))))
 (let ((?x520 (* ?x307 ?x307 ?x307 ?x304 ?x304)))
 (let ((?x532 (+ (* (- 1) ?x361) (* 6 ?x385) (* (- 6) (* ?x307 ?x307 ?x307 ?x307 ?x304)) (* (- 6) (* ?x307 ?x307 ?x307 ?x304)) ?x520 (* 6 ?x525))))
 (let (($x339 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x614 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x341 (and $x120 (= ?x614 (- 4)) $x339 $x412 (not (= ?x532 0)))))
 (rewrite (= $x341 $x419))))))))))))))))))))))))))))
 ))
 (let (($x87 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x70 (+ k m)))
 (let ((?x69 (+ c k)))
 (let ((?x75 (+ (* (- 1) ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x79 (- (- ?x75 (* 6 ?x71 ?x72 ?x72 ?x72 ?x72)) (* 6 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x82 (+ ?x79 (* ?x71 ?x71 ?x72 ?x72 ?x72) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x384 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x69 (+ c k)))
 (let ((?x70 (+ k m)))
 (let ((?x304 (+ 6 m)))
 (let ((?x307 (+ 1 n)))
 (let ((?x525 (* ?x307 ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)))
 (let ((?x520 (* ?x307 ?x307 ?x307 ?x304 ?x304)))
 (let ((?x532 (+ (* (- 1) (* ?x307 ?x304 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)) (* 6 (* ?x307 ?x304 ?x304 ?x70 ?x70 ?x70 ?x69)) (* (- 6) (* ?x307 ?x307 ?x307 ?x307 ?x304)) (* (- 6) (* ?x307 ?x307 ?x307 ?x304)) ?x520 (* 6 ?x525))))
 (let (($x412 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x339 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x614 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x120 (= (+ m (* (- 6) n)) 6)))
 (let (($x341 (and $x120 (= ?x614 (- 4)) $x339 $x412 (not (= ?x532 0)))))
 (let ((?x72 (+ n 1)))
 (let ((?x71 (+ m 6)))
 (let ((?x75 (+ (* (- 1) ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x71 ?x72) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72))))
 (let ((?x79 (- (- ?x75 (* 6 ?x71 ?x72 ?x72 ?x72 ?x72)) (* 6 ?x71 ?x72 ?x72 ?x72))))
 (let ((?x82 (+ ?x79 (* ?x71 ?x71 ?x72 ?x72 ?x72) (* 6 ?x69 ?x70 ?x70 ?x70 ?x71 ?x71 ?x72 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x86 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x82 0))))))
 (rewrite (= $x86 $x341))))))))))))))))))))))))))))
 ))
 (let ((@x88 (asserted $x87)))
 (let ((@x654 (mp (mp @x88 (quant-intro (proof-bind ?x384) (= $x87 $x405)) $x405) (rewrite (= $x405 $x405)) $x405)))
 (let ((@x626 (mp (mp @x654 (quant-intro (proof-bind ?x468) (= $x405 $x501)) $x501) (quant-intro (proof-bind ?x199) (= $x501 $x201)) $x201)))
 (let ((@x423 (mp (mp~ @x626 (sk (~ $x201 $x555)) $x555) (rewrite (= $x555 $x700)) $x700)))
 (let ((@x354 (and-elim @x423 $x429)))
 (let ((@x550 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x429) $x761)) @x354 $x761)))
 (let (($x413 (>= ?x561 (- 6))))
 (let ((@x713 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x429) $x413)) @x354 $x413)))
 (let (($x746 (not (<= ?x163 36))))
 (let (($x704 (>= ?x163 36)))
 (let ((@x166 (lemma ((_ th-lemma arith) (hypothesis (not $x704)) @x713 @x550 @x713 @x550 false) $x704)))
 (let ((@x734 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x312 $x746 (not $x704))) (and-elim @x423 $x391) (or $x746 (not $x704)))))
 ((_ th-lemma arith) (unit-resolution @x734 @x166 $x746) @x713 @x550 @x713 @x550 false)))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        17
 :arith-assert-upper        9
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-gcd-tests           5
 :arith-grobner             2
 :arith-ineq-splits         1
 :arith-max-min             239
 :arith-nonlinear-bounds    12
 :arith-nonlinear-horner    18
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        3
 :arith-pivots              6
 :arith-row-summations      8
 :arith-tableau-max-columns 46
 :arith-tableau-max-rows    9
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              6
 :max-memory                3.70
 :memory                    3.22
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1189876
 :num-checks                1
 :propagations              11
 :rlimit-count              5608
 :time                      0.01
 :total-time                0.01)
