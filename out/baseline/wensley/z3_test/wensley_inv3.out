unsat
((set-logic NRA)
(declare-fun y!5 () Real)
(declare-fun b!7 () Real)
(declare-fun d!6 () Real)
(declare-fun a!8 () Real)
(proof
(let ((?x110 (* d!6 a!8)))
 (let ((?x141 (+ ?x110 (* (- 1.0) (* a00 d!6)) (* 2.0 (* y00 b!7)) (* (- 2.0) (* b!7 y!5)))))
 (let (($x186 (<= ?x141 0.0)))
 (let (($x134 (= 0.0 ?x141)))
 (let ((@x229 (symm (commutativity (= $x134 (= ?x141 0.0))) (= (= ?x141 0.0) $x134))))
 (let (($x98 (= ?x141 0.0)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x128 (= (+ ?x30 ?x82 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let ((?x136 (* y00 b!7)))
 (let ((?x269 (* (/ 1.0 2.0) ?x110)))
 (let ((?x101 (+ ?x269 (* (- (/ 1.0 2.0)) (* a00 d!6)) ?x136 (* (- 1.0) (* b!7 y!5)))))
 (let (($x239 (= ?x101 0.0)))
 (let (($x163 (not $x239)))
 (let (($x125 (and $x163 $x128 (= (+ (* d00 b!7) (* (- 1.0) (* b00 d!6))) 0.0) $x98)))
 (let ((?x175 (+ ?x110 (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x254 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x82 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x96 (* b!7 y00)))
 (let (($x80 (= (+ ?x269 (* (- 1.0) (* y!5 b!7)) ?x96 (* (- (/ 1.0 2.0)) (* d!6 a00))) 0.0)))
 (let (($x155 (and (not $x80) $x254 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x175 0.0))))
 (let (($x138 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x100 (* y b)))
 (let ((?x122 (* (- 2.0) ?x100)))
 (let ((?x90 (* d a)))
 (let (($x157 (= (+ ?x90 ?x122 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x79 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x114 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x82 (* 2.0 (* y b00))) 0.0)))
 (let ((?x127 (* b y00)))
 (let ((?x164 (* (- 1.0) ?x100)))
 (let ((?x131 (* (/ 1.0 2.0) ?x90)))
 (let (($x107 (not (= (+ ?x131 ?x164 ?x127 (* (- (/ 1.0 2.0)) (* d a00))) 0.0))))
 (and $x107 $x114 $x79 $x157))))))))))))) :qid k!32))
 ))
 (let (($x162 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x100 (* y b)))
 (let ((?x122 (* (- 2.0) ?x100)))
 (let ((?x90 (* d a)))
 (let (($x166 (= (+ ?x90 ?x122 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x104 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let (($x196 (= (+ ?x82 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x191 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x89 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x191)))
 (let (($x231 (or (not (= (+ (* (/ 1.0 2.0) ?x90) (* (- 1.0) ?x100) ?x271 ?x191) 0.0)) (not (= ?x89 0.0)))))
 (and $x231 $x196 $x104 $x166)))))))))))))) :qid k!32))
 ))
 (let ((?x194 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x100 (* y b)))
 (let ((?x122 (* (- 2.0) ?x100)))
 (let ((?x90 (* d a)))
 (let (($x157 (= (+ ?x90 ?x122 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x79 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x114 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x82 (* 2.0 (* y b00))) 0.0)))
 (let ((?x127 (* b y00)))
 (let ((?x164 (* (- 1.0) ?x100)))
 (let ((?x131 (* (/ 1.0 2.0) ?x90)))
 (let (($x107 (not (= (+ ?x131 ?x164 ?x127 (* (- (/ 1.0 2.0)) (* d a00))) 0.0))))
 (let (($x276 (and $x107 $x114 $x79 $x157)))
 (let (($x166 (= (+ ?x90 ?x122 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x104 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x196 (= (+ ?x82 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x191 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x89 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x191)))
 (let (($x231 (or (not (= (+ ?x131 ?x164 ?x271 ?x191) 0.0)) (not (= ?x89 0.0)))))
 (let (($x149 (and $x231 $x196 $x104 $x166)))
 (rewrite (= $x149 $x276)))))))))))))))))))))))))
 ))
 (let (($x234 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x191 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x89 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x191)))
 (let (($x121 (= (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x271 ?x191) 0.0)))
 (let (($x231 (or (not $x121) (not (= ?x89 0.0)))))
 (let ((?x100 (* y b)))
 (let ((?x122 (* (- 2.0) ?x100)))
 (let ((?x90 (* d a)))
 (let (($x166 (= (+ ?x90 ?x122 (* 2.0 ?x271) (* (- 1.0) ?x48)) 0.0)))
 (let (($x104 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let (($x196 (= (+ ?x82 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x196 $x104 $x166 $x231))))))))))))))) :qid k!32))
 ))
 (let (($x73 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x68 (- (+ (- (* (+ a b) ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58)))
 (let (($x60 (= (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x60) (not (= ?x68 0.0))))))))))))))) :qid k!32))
 ))
 (let ((?x274 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x191 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x89 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x191)))
 (let (($x121 (= (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x271 ?x191) 0.0)))
 (let (($x231 (or (not $x121) (not (= ?x89 0.0)))))
 (let ((?x100 (* y b)))
 (let ((?x122 (* (- 2.0) ?x100)))
 (let ((?x90 (* d a)))
 (let (($x166 (= (+ ?x90 ?x122 (* 2.0 ?x271) (* (- 1.0) ?x48)) 0.0)))
 (let (($x104 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x82 (* (- 2.0) (* b00 y00))))
 (let (($x196 (= (+ ?x82 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x142 (and $x196 $x104 $x166 $x231)))
 (let ((?x51 (/ d 2.0)))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x56 (* 2.0 ?x53 y00)))
 (let ((?x68 (- (+ (- (* (+ a b) ?x51) (* 2.0 ?x53 (+ y ?x51))) ?x56) ?x58)))
 (let (($x60 (= (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) ?x56) ?x58) 0.0)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x72 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not $x60) (not (= ?x68 0.0))))))
 (rewrite (= $x72 $x142))))))))))))))))))))))))))))
 ))
 (let ((@x74 (asserted $x73)))
 (let ((@x154 (mp (mp @x74 (quant-intro (proof-bind ?x274) (= $x73 $x234)) $x234) (rewrite (= $x234 $x162)) $x162)))
 (let ((@x171 (mp~ (mp @x154 (quant-intro (proof-bind ?x194) (= $x162 $x138)) $x138) (sk (~ $x138 $x155)) $x155)))
 (let ((@x92 (mp @x171 (rewrite (= $x155 $x125)) $x125)))
 (let ((@x228 (mp (and-elim @x92 $x98) @x229 $x134)))
 (let (($x242 (not (<= ?x101 0.0))))
 (let (($x130 (>= ?x101 0.0)))
 (let (($x189 (>= ?x141 0.0)))
 (let ((@x245 ((_ th-lemma arith) (hypothesis (not $x130)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x134) $x189)) @x228 $x189) false)))
 (let (($x94 (= 0.0 ?x101)))
 (let (($x257 (not $x94)))
 (let ((@x259 (monotonicity (symm (commutativity (= $x94 $x239)) (= $x239 $x94)) (= $x163 $x257))))
 (let ((@x279 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x94 $x242 (not $x130))) (mp (and-elim @x92 $x163) @x259 $x257) (or $x242 (not $x130)))))
 ((_ th-lemma arith) (unit-resolution @x279 (lemma @x245 $x130) $x242) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x134) $x186)) @x228 $x186) false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs           11
 :arith-eq-adapter    4
 :arith-conflicts     2
 :arith-diseq         2
 :arith-lower         5
 :arith-make-feasible 4
 :arith-max-columns   26
 :arith-max-rows      4
 :arith-offset-eqs    1
 :arith-upper         5
 :conflicts           2
 :decisions           1
 :del-clause          14
 :max-memory          17.73
 :memory              17.31
 :mk-bool-var         16
 :mk-clause           16
 :num-allocs          83335
 :num-checks          1
 :propagations        8
 :rlimit-count        1760
 :time                0.00
 :total-time          0.01)
