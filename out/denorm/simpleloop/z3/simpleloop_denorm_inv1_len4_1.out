unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x459 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x453 (>= ?x459 0)))
 (let (($x414 (= ?x459 0)))
 (let ((?x168 (* 3 x!1)))
 (let ((?x167 (* (- 3) (* y!0 y!0))))
 (let ((?x124 (* (- 3) y!0)))
 (let ((?x142 (+ 1 y!0)))
 (let ((?x303 (+ (- 1) x!1)))
 (let ((?x301 (* ?x303 ?x303 ?x303 ?x142 ?x142 ?x142)))
 (let ((?x399 (* (- 2) (* x!1 x!1))))
 (let ((?x304 (* (- 1) (* y!0 y!0 y!0))))
 (let ((?x263 (+ (- 1) (* (- 4) (* y!0 y!0 x!1 x!1)) ?x304 ?x399 ?x301 (* (- 5) (* y!0 x!1 x!1)) (* 7 (* y!0 y!0 x!1)) (* 8 (* y!0 x!1)) (* (- 1) (* y!0 y!0 y!0 x!1 x!1)) (* 2 (* y!0 y!0 y!0 x!1)) ?x124 ?x167 ?x168)))
 (let ((?x308 (* (+ (* (- 1) y00) (* (- 1) x00) y!0 x!1) ?x263)))
 (let (($x392 (= ?x308 0)))
 (let (($x146 (not $x392)))
 (let (($x449 (and $x414 $x146)))
 (let ((?x282 (+ (- 1) ?x168 ?x124 ?x167 ?x304 (* 2 (* x!1 y!0 y!0 y!0)) (* (- 1) (* x!1 x!1 y!0 y!0 y!0)) (* 8 (* x!1 y!0)) (* 7 (* x!1 y!0 y!0)) ?x301 (* (- 4) (* x!1 x!1 y!0 y!0)) ?x399 (* (- 5) (* x!1 x!1 y!0)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x431 (+ x!1 y!0 ?x55 ?x62)))
 (let (($x398 (and (= ?x431 0) (not (= (* ?x431 ?x282) 0)))))
 (let (($x516 (exists ((x Int) (y Int) )(! (let ((?x117 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x267 (* ?x71 ?x71 ?x71 ?x117 ?x117 ?x117)))
 (let ((?x210 (* (- 1) (* x x y y y))))
 (let ((?x201 (* (- 1) (* y y y))))
 (let ((?x258 (* (- 3) (* y y))))
 (let ((?x255 (* (- 3) y)))
 (let ((?x112 (+ (- 1) (* 3 x) ?x255 ?x258 ?x201 (* 2 (* x y y y)) ?x210 (* 8 (* x y)) (* 7 (* x y y)) ?x267 (* (- 4) (* x x y y)) (* (- 2) (* x x)) (* (- 5) (* x x y)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (and $x81 (not (= (* ?x76 ?x112) 0))))))))))))))) :qid k!26))
 ))
 (let (($x163 (exists ((x Int) (y Int) )(! (let ((?x338 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x117 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x267 (* ?x71 ?x71 ?x71 ?x117 ?x117 ?x117)))
 (let ((?x229 (+ (* (- 1) (* ?x71 ?x71 ?x117 ?x117 ?x117)) ?x267 ?x338 (* (- 1) (* ?x71 ?x117 ?x117)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x145 (+ x ?x55 ?x62 y)))
 (and (= ?x145 0) (not (= (* ?x145 ?x229) 0))))))))))) :qid k!26))
 ))
 (let ((?x203 (lambda ((x Int) (y Int) )(let ((?x117 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x267 (* ?x71 ?x71 ?x71 ?x117 ?x117 ?x117)))
 (let ((?x210 (* (- 1) (* x x y y y))))
 (let ((?x201 (* (- 1) (* y y y))))
 (let ((?x258 (* (- 3) (* y y))))
 (let ((?x255 (* (- 3) y)))
 (let ((?x112 (+ (- 1) (* 3 x) ?x255 ?x258 ?x201 (* 2 (* x y y y)) ?x210 (* 8 (* x y)) (* 7 (* x y y)) ?x267 (* (- 4) (* x x y y)) (* (- 2) (* x x)) (* (- 5) (* x x y)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x76 (+ x y ?x55 ?x62)))
 (let (($x81 (= ?x76 0)))
 (let (($x224 (and $x81 (not (= (* ?x76 ?x112) 0)))))
 (let ((?x229 (+ (* (- 1) (* ?x71 ?x71 ?x117 ?x117 ?x117)) ?x267 (* (- 1) (* ?x71 ?x71 ?x117 ?x117)) (* (- 1) (* ?x71 ?x117 ?x117)))))
 (let ((?x145 (+ x ?x55 ?x62 y)))
 (let (($x129 (and (= ?x145 0) (not (= (* ?x145 ?x229) 0)))))
 (rewrite (= $x129 $x224)))))))))))))))))))
 ))
 (let (($x52 (exists ((x Int) (y Int) )(! (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x34 ?x34 ?x39 ?x39)) (* ?x34 ?x39 ?x39)))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0)))))))) :qid k!26))
 ))
 (let ((?x331 (lambda ((x Int) (y Int) )(let ((?x338 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ 1 y) (+ 1 y)))))
 (let ((?x117 (+ 1 y)))
 (let ((?x71 (+ (- 1) x)))
 (let ((?x267 (* ?x71 ?x71 ?x71 ?x117 ?x117 ?x117)))
 (let ((?x229 (+ (* (- 1) (* ?x71 ?x71 ?x117 ?x117 ?x117)) ?x267 ?x338 (* (- 1) (* ?x71 ?x117 ?x117)))))
 (let ((?x62 (* (- 1) x00)))
 (let ((?x55 (* (- 1) y00)))
 (let ((?x145 (+ x ?x55 ?x62 y)))
 (let (($x129 (and (= ?x145 0) (not (= (* ?x145 ?x229) 0)))))
 (let ((?x39 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x42 (+ (* (- 1) ?x34 ?x34 ?x39 ?x39 ?x39) (* ?x34 ?x34 ?x34 ?x39 ?x39 ?x39))))
 (let ((?x47 (* (+ (- (- ?x34 y00) x00) y 1) (- (- ?x42 (* ?x34 ?x34 ?x39 ?x39)) (* ?x34 ?x39 ?x39)))))
 (let (($x51 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= ?x47 0))))))
 (rewrite (= $x51 $x129)))))))))))))))))
 ))
 (let ((@x53 (asserted $x52)))
 (let ((@x276 (mp (mp @x53 (quant-intro (proof-bind ?x331) (= $x52 $x163)) $x163) (rewrite (= $x163 $x163)) $x163)))
 (let ((@x236 (mp~ (mp @x276 (quant-intro (proof-bind ?x203) (= $x163 $x516)) $x516) (sk (~ $x516 $x398)) $x398)))
 (let ((@x471 (mp @x236 (rewrite (= $x398 $x449)) $x449)))
 (let ((@x79 (and-elim @x471 $x414)))
 (let ((@x60 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x414) $x453)) @x79 $x453)))
 (let (($x93 (<= ?x459 0)))
 (let ((@x173 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x414) $x93)) @x79 $x93)))
 (let (($x89 (not (>= ?x308 0))))
 (let (($x450 (<= ?x308 0)))
 (let ((@x385 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x392 (not $x450) $x89)) (and-elim @x471 $x146) (or (not $x450) $x89))))
 (let ((@x207 (unit-resolution @x385 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x450)) @x173 @x60 false) $x450) $x89)))
 ((_ th-lemma arith farkas 1 1 1) @x207 @x173 @x60 false)))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        13
 :arith-assert-upper        6
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-fixed-eqs           2
 :arith-max-min             66
 :arith-nonlinear-bounds    6
 :arith-num-rows            5
 :arith-pivots              1
 :arith-pseudo-nonlinear    2
 :arith-row-summations      1
 :arith-tableau-max-columns 30
 :arith-tableau-max-rows    5
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              2
 :max-memory                3.63
 :memory                    3.14
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1147271
 :num-checks                1
 :propagations              4
 :rlimit-count              1879
 :time                      0.01
 :total-time                0.01)
