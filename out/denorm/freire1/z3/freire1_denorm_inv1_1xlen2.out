unsat
((set-logic NIA)
(declare-fun r!1 () Int)
(declare-fun x!0 () Int)
(proof
(let ((?x264 (* r!1 r!1)))
 (let ((?x152 (* (- 1) r!1)))
 (let ((?x85 (* 2 x!0)))
 (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x159 (+ r00 ?x83 ?x99 ?x85 ?x152 ?x264)))
 (let (($x189 (<= ?x159 0)))
 (let (($x160 (= ?x159 0)))
 (let ((?x170 (* 2 ?x264)))
 (let ((?x232 (* (- 1) x!0)))
 (let ((?x84 (* x!0 x!0)))
 (let ((?x111 (* (+ ?x84 ?x232 (* (- 3) (* x!0 r!1)) r!1 ?x170) ?x159)))
 (let (($x65 (= ?x111 0)))
 (let (($x112 (not $x65)))
 (let (($x102 (and $x160 $x112)))
 (let ((?x154 (* (+ r!1 ?x232 ?x170 (* (- 3) (* r!1 x!0)) ?x84) (+ ?x152 ?x85 r00 ?x264 ?x83 ?x99))))
 (let ((?x35 (* 2 x00)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x156 (and (= (+ r!1 (* (- 2) x!0) ?x114 (* (- 1) ?x264) ?x35 ?x36) 0) (not (= ?x154 0)))))
 (let (($x90 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x246 (* x x)))
 (let ((?x279 (* (- 3) (* r x))))
 (let ((?x227 (* (- 1) x)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let ((?x113 (* (- 2) x)))
 (let (($x117 (= (+ r ?x113 ?x114 ?x115 ?x35 ?x36) 0)))
 (and $x117 (not (= (* (+ r ?x227 (* 2 ?x30) ?x279 ?x246) ?x105) 0)))))))))))))))))) :qid k!26))
 ))
 (let (($x270 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x184 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let (($x89 (not (= (* ?x70 ?x184) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x89))))))))))))) :qid k!26))
 ))
 (let ((?x228 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x30 (* r r)))
 (let ((?x32 (* 2 x)))
 (let ((?x62 (* (- 1) r)))
 (let ((?x105 (+ ?x62 ?x32 r00 ?x30 ?x83 ?x99)))
 (let ((?x246 (* x x)))
 (let ((?x279 (* (- 3) (* r x))))
 (let ((?x227 (* (- 1) x)))
 (let ((?x35 (* 2 x00)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let ((?x113 (* (- 2) x)))
 (let (($x117 (= (+ r ?x113 ?x114 ?x115 ?x35 ?x36) 0)))
 (let (($x110 (and $x117 (not (= (* (+ r ?x227 (* 2 ?x30) ?x279 ?x246) ?x105) 0)))))
 (let ((?x184 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x ?x62))) (* (+ x ?x62) (+ x ?x62)))))
 (let (($x89 (not (= (* ?x70 ?x184) 0))))
 (let (($x219 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x89)))
 (rewrite (= $x219 $x110)))))))))))))))))))))))
 ))
 (let (($x168 (exists ((r Int) (x Int) )(! (let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x184 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let (($x89 (not (= (* ?x70 ?x184) 0))))
 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x83 ?x99) 0) $x89)))))))) :qid k!26))
 ))
 (let ((?x212 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x184 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let (($x89 (not (= (* ?x70 ?x184) 0))))
 (let ((?x35 (* 2 x00)))
 (let ((?x113 (* (- 2) x)))
 (let ((?x30 (* r r)))
 (let ((?x115 (* (- 1) ?x30)))
 (let ((?x114 (* (- 1) r00)))
 (let (($x219 (and (= (+ r ?x114 ?x115 ?x113 ?x35 ?x36) 0) $x89)))
 (let (($x244 (and (= (+ (* (- 1) r) r00 ?x30 ?x32 ?x83 ?x99) 0) $x89)))
 (rewrite (= $x244 $x219)))))))))))))))))
 ))
 (let (($x57 (exists ((r Int) (x Int) )(! (let ((?x51 (+ (* (- 1) (+ r 1) (- x r)) (* (- x r) (- x r)))))
 (let ((?x36 (* r00 r00)))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let ((?x38 (- (- (+ (* (- 1) r) r00 (* r r) (* 2 x)) ?x35) ?x36)))
 (and (= ?x38 0) (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))))) :qid k!26))
 ))
 (let ((?x76 (lambda ((r Int) (x Int) )(let ((?x36 (* r00 r00)))
 (let ((?x99 (* (- 1) ?x36)))
 (let ((?x83 (* (- 2) x00)))
 (let ((?x32 (* 2 x)))
 (let ((?x184 (+ (- 1) (* (- 3) r) r00 (* (+ 1 r) (+ 1 r)) ?x32 ?x83 ?x99)))
 (let ((?x70 (+ (* (- 1) (* (+ 1 r) (+ x (* (- 1) r)))) (* (+ x (* (- 1) r)) (+ x (* (- 1) r))))))
 (let (($x89 (not (= (* ?x70 ?x184) 0))))
 (let (($x244 (and (= (+ (* (- 1) r) r00 (* r r) ?x32 ?x83 ?x99) 0) $x89)))
 (let ((?x51 (+ (* (- 1) (+ r 1) (- x r)) (* (- x r) (- x r)))))
 (let ((?x35 (* 2 x00)))
 (let ((?x46 (+ (* (- 1) (+ r 1)) r00 (* (+ r 1) (+ r 1)) (* 2 (- x r)))))
 (let (($x40 (= (- (- (+ (* (- 1) r) r00 (* r r) ?x32) ?x35) ?x36) 0)))
 (let (($x56 (and $x40 (or (not (= (* (- (- ?x46 ?x35) ?x36) ?x51) 0))))))
 (rewrite (= $x56 $x244))))))))))))))))
 ))
 (let ((@x58 (asserted $x57)))
 (let ((@x174 (mp (mp @x58 (quant-intro (proof-bind ?x76) (= $x57 $x168)) $x168) (rewrite (= $x168 $x168)) $x168)))
 (let ((@x188 (mp (mp @x174 (quant-intro (proof-bind ?x212) (= $x168 $x270)) $x270) (quant-intro (proof-bind ?x228) (= $x270 $x90)) $x90)))
 (let ((@x127 (mp (mp~ @x188 (sk (~ $x90 $x156)) $x156) (rewrite (= $x156 $x102)) $x102)))
 (let ((@x178 (and-elim @x127 $x160)))
 (let ((@x71 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x160) $x189)) @x178 $x189)))
 (let (($x283 (>= ?x159 0)))
 (let ((@x163 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x160) $x283)) @x178 $x283)))
 (let (($x157 (not (>= ?x111 0))))
 (let (($x87 (<= ?x111 0)))
 (let ((@x277 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x65 (not $x87) $x157)) (and-elim @x127 $x112) (or (not $x87) $x157))))
 (let ((@x276 (unit-resolution @x277 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x87)) @x163 @x71 false) $x87) $x157)))
 ((_ th-lemma arith farkas 1 1 1) @x276 @x163 @x71 false))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        5
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-num-rows            2
 :arith-pseudo-nonlinear    2
 :arith-tableau-max-columns 15
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                5
 :max-memory                3.45
 :memory                    3.04
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1049051
 :num-checks                1
 :propagations              4
 :rlimit-count              1033
 :time                      0.01
 :total-time                0.01)
