unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x477 (* k!2 n!0)))
 (let ((?x912 (* (- 1) ?x477)))
 (let ((?x918 (* (- 2) n!0)))
 (let ((?x906 (* 3 c!3)))
 (let ((?x1168 (+ k!2 ?x906 ?x918 ?x912)))
 (let (($x179 (<= ?x1168 1)))
 (let (($x191 (= ?x1168 1)))
 (let ((?x879 (* k!2 m!1)))
 (let ((?x582 (* c!3 m!1)))
 (let ((?x1031 (+ k!2 m!1)))
 (let ((?x117 (+ 6 m!1)))
 (let ((?x564 (* ?x117 ?x117 ?x117 ?x117 ?x1031 ?x1031 ?x1031)))
 (let ((?x130 (+ (* 6 (* (+ 1 n!0) ?x117 ?x117 ?x117 ?x1031 ?x1031 ?x1031)) (* 3 (* k!2 n!0 m!1)) (* 3 (* c!3 n!0 m!1)) (* 3 (* c!3 n!0 n!0 m!1)) (* (- 6) k!2) (* (- 6) c!3) (* (- 6) (* m!1 m!1)) (* 648 (* n!0 n!0)) (* k!2 n!0 n!0 n!0 m!1) (* 648 n!0) (* (- 24) (* c!3 n!0)) (* (- 24) ?x477) (* (- 6) (* c!3 n!0 n!0 n!0 n!0)) (* 6 (* ?x117 ?x117 ?x117 ?x1031 ?x1031 ?x1031)) (* 216 (* n!0 n!0 n!0)) (* (- 24) (* k!2 n!0 n!0 n!0)) (* (- 1) ?x564) (* (- 6) (* k!2 n!0 n!0 n!0 n!0)) ?x582 (* 36 m!1) (* (- 36) (* c!3 n!0 n!0)) ?x879 (* (- 24) (* c!3 n!0 n!0 n!0)) (* (- 36) (* k!2 n!0 n!0)) (* 180 (* n!0 n!0 m!1)) (* (- 1) (* m!1 m!1 m!1)) (* 3 (* k!2 n!0 n!0 m!1)) (* c!3 n!0 n!0 n!0 m!1) (* (- 1) (* n!0 n!0 m!1 m!1 m!1)) (* (- 6) (* n!0 m!1 m!1)) (* 6 (* n!0 n!0 m!1 m!1)) (* 144 (* n!0 m!1)) (* 6 (* n!0 n!0 n!0 m!1 m!1)) (* 72 (* n!0 n!0 n!0 m!1)) (* (- 2) (* n!0 m!1 m!1 m!1)))))
 (let (($x693 (= ?x130 (- 216))))
 (let (($x706 (not $x693)))
 (let ((?x427 (* (- 3) n!0)))
 (let ((?x406 (* n!0 n!0)))
 (let ((?x921 (* (- 3) ?x406)))
 (let ((?x190 (+ k!2 ?x921 ?x427)))
 (let (($x1338 (= ?x190 1)))
 (let ((?x909 (* (- 1) (* k!2 k!2))))
 (let ((?x468 (* c!3 n!0)))
 (let ((?x471 (* 9 ?x468)))
 (let ((?x469 (* (- 9) n!0)))
 (let ((?x396 (* 18 c!3)))
 (let ((?x476 (* 5 k!2)))
 (let ((?x1017 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x980 (= ?x1017 (- 6))))
 (let (($x351 (and $x980 (= (+ ?x476 ?x396 ?x469 ?x471 ?x909) 4) $x191 $x1338 $x706)))
 (let ((?x1172 (* m!1 m!1 m!1)))
 (let ((?x104 (+ (* 6 c!3) (* 6 k!2) (* (- 36) m!1) (* (- 648) n!0) (* 24 ?x477) (* 24 ?x468) (* (- 648) ?x406) (* (- 180) (* m!1 n!0 n!0)) (* (- 6) (* m!1 m!1 n!0 n!0)) (* (- 144) (* m!1 n!0)) (* m!1 m!1 m!1 n!0 n!0) (* 6 (* m!1 m!1)) ?x1172 (* 6 (* m!1 m!1 n!0)) (* 2 (* m!1 m!1 m!1 n!0)) (* (- 216) (* n!0 n!0 n!0)) (* (- 72) (* m!1 n!0 n!0 n!0)) (* (- 6) (* m!1 m!1 n!0 n!0 n!0)) (* 24 (* c!3 n!0 n!0 n!0)) (* 24 (* k!2 n!0 n!0 n!0)) (* 36 (* c!3 n!0 n!0)) (* 36 (* k!2 n!0 n!0)) (* (- 1) (* c!3 m!1 n!0 n!0 n!0)) (* (- 1) (* k!2 m!1 n!0 n!0 n!0)) (* (- 1) ?x582) (* (- 1) ?x879) (* (- 3) (* c!3 m!1 n!0)) (* (- 3) (* k!2 m!1 n!0)) (* (- 3) (* c!3 m!1 n!0 n!0)) (* (- 3) (* k!2 m!1 n!0 n!0)) (* (- 6) (* ?x117 ?x117 ?x117 ?x1031 ?x1031 ?x1031)) (* 6 (* k!2 n!0 n!0 n!0 n!0)) (* 6 (* c!3 n!0 n!0 n!0 n!0)) ?x564 (* (- 6) (* (+ 1 n!0) ?x117 ?x117 ?x117 ?x1031 ?x1031 ?x1031)))))
 (let (($x926 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x396 ?x476 ?x469 ?x909 ?x471) 4) (= (+ ?x906 k!2 ?x918 ?x912) 1) (= (+ k!2 ?x427 ?x921) 1) (not (= ?x104 216)))))
 (let (($x925 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x75 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x1320 (* ?x310 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1304 (* ?x307 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1246 (* 6 (* c n n n n))))
 (let ((?x1244 (* 6 (* k n n n n))))
 (let ((?x1492 (* (- 3) (* k m n n))))
 (let ((?x1491 (* (- 3) (* c m n n))))
 (let ((?x1490 (* (- 3) (* k m n))))
 (let ((?x1489 (* (- 3) (* c m n))))
 (let ((?x1488 (* (- 1) (* k m))))
 (let ((?x1487 (* (- 1) (* c m))))
 (let ((?x1486 (* (- 1) (* k m n n n))))
 (let ((?x1485 (* (- 1) (* c m n n n))))
 (let ((?x1484 (* 36 (* k n n))))
 (let ((?x1483 (* 36 (* c n n))))
 (let ((?x1482 (* 24 (* k n n n))))
 (let ((?x1481 (* 24 (* c n n n))))
 (let ((?x1416 (* (- 6) (* m m n n n))))
 (let ((?x1413 (* (- 216) (* n n n))))
 (let ((?x472 (* 2 (* m m m n))))
 (let ((?x434 (* m m m)))
 (let ((?x420 (* m m m n n)))
 (let ((?x270 (* n n)))
 (let ((?x1388 (* (- 648) ?x270)))
 (let ((?x147 (* c n)))
 (let ((?x1387 (* 24 ?x147)))
 (let ((?x55 (* k n)))
 (let ((?x1385 (* 24 ?x55)))
 (let ((?x1384 (* (- 648) n)))
 (let ((?x1068 (* 6 k)))
 (let ((?x1065 (* 6 c)))
 (let ((?x196 (+ ?x1065 ?x1068 (* (- 36) m) ?x1384 ?x1385 ?x1387 ?x1388 (* (- 180) (* m n n)) (* (- 6) (* m m n n)) (* (- 144) (* m n)) ?x420 (* 6 (* m m)) ?x434 (* 6 (* m m n)) ?x472 ?x1413 (* (- 72) (* m n n n)) ?x1416 ?x1481 ?x1482 ?x1483 ?x1484 ?x1485 ?x1486 ?x1487 ?x1488 ?x1489 ?x1490 ?x1491 ?x1492 (* (- 6) (* ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) ?x1244 ?x1246 ?x1304 (* (- 6) ?x1320))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 ?x147)) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 $x209 $x261 $x299 (not (= ?x196 216)))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x900 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x80 (+ c k)))
 (let ((?x310 (+ 1 n)))
 (let ((?x75 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x1320 (* ?x310 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1360 (+ (* 6 (* ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x310 ?x310 ?x307 ?x307 ?x307)) (* 6 (* ?x310 ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x307 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* 6 (* ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* (- 6) (* ?x310 ?x310 ?x310 ?x80)) (* ?x310 ?x310 ?x310 ?x307 ?x80) (* 6 ?x1320) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x80)))))
 (let (($x1263 (not (= ?x1360 0))))
 (let (($x1250 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x141 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x141 $x1250 $x1263)))))))))))))))) :qid k!34))
 ))
 (let ((?x142 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x75 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x310 (+ 1 n)))
 (let ((?x1320 (* ?x310 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1304 (* ?x307 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1246 (* 6 (* c n n n n))))
 (let ((?x1244 (* 6 (* k n n n n))))
 (let ((?x1492 (* (- 3) (* k m n n))))
 (let ((?x1491 (* (- 3) (* c m n n))))
 (let ((?x1490 (* (- 3) (* k m n))))
 (let ((?x1489 (* (- 3) (* c m n))))
 (let ((?x1488 (* (- 1) (* k m))))
 (let ((?x1487 (* (- 1) (* c m))))
 (let ((?x1486 (* (- 1) (* k m n n n))))
 (let ((?x1485 (* (- 1) (* c m n n n))))
 (let ((?x1484 (* 36 (* k n n))))
 (let ((?x1483 (* 36 (* c n n))))
 (let ((?x1482 (* 24 (* k n n n))))
 (let ((?x1481 (* 24 (* c n n n))))
 (let ((?x1416 (* (- 6) (* m m n n n))))
 (let ((?x1413 (* (- 216) (* n n n))))
 (let ((?x472 (* 2 (* m m m n))))
 (let ((?x434 (* m m m)))
 (let ((?x420 (* m m m n n)))
 (let ((?x270 (* n n)))
 (let ((?x1388 (* (- 648) ?x270)))
 (let ((?x147 (* c n)))
 (let ((?x1387 (* 24 ?x147)))
 (let ((?x55 (* k n)))
 (let ((?x1385 (* 24 ?x55)))
 (let ((?x1384 (* (- 648) n)))
 (let ((?x1068 (* 6 k)))
 (let ((?x1065 (* 6 c)))
 (let ((?x196 (+ ?x1065 ?x1068 (* (- 36) m) ?x1384 ?x1385 ?x1387 ?x1388 (* (- 180) (* m n n)) (* (- 6) (* m m n n)) (* (- 144) (* m n)) ?x420 (* 6 (* m m)) ?x434 (* 6 (* m m n)) ?x472 ?x1413 (* (- 72) (* m n n n)) ?x1416 ?x1481 ?x1482 ?x1483 ?x1484 ?x1485 ?x1486 ?x1487 ?x1488 ?x1489 ?x1490 ?x1491 ?x1492 (* (- 6) (* ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) ?x1244 ?x1246 ?x1304 (* (- 6) ?x1320))))
 (let (($x299 (= (+ k (* (- 3) n) (* (- 3) ?x270)) 1)))
 (let (($x261 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x209 (= (+ ?x40 ?x44 ?x211 ?x212 (* 9 ?x147)) 4)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x1215 (and $x125 $x209 $x261 $x299 (not (= ?x196 216)))))
 (let ((?x1360 (+ (* 6 (* ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x310 ?x310 ?x307 ?x307 ?x307)) (* 6 (* ?x310 ?x310 ?x310 ?x307 ?x307)) (* (- 1) ?x1304) (* 6 (* ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* (- 6) (* ?x310 ?x310 ?x310 (+ c k))) (* ?x310 ?x310 ?x310 ?x307 (+ c k)) (* 6 ?x1320) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 (+ c k))))))
 (let (($x1263 (not (= ?x1360 0))))
 (let (($x1250 (= (+ (* 3 ?x270) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x141 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x184 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x141 $x1250 $x1263)))
 (rewrite (= $x184 $x1215))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1260 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x80 (+ c k)))
 (let ((?x310 (+ 1 n)))
 (let ((?x75 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x1320 (* ?x310 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1360 (+ (* 6 (* ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x310 ?x310 ?x307 ?x307 ?x307)) (* 6 (* ?x310 ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x307 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* 6 (* ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* (- 6) (* ?x310 ?x310 ?x310 ?x80)) (* ?x310 ?x310 ?x310 ?x307 ?x80) (* 6 ?x1320) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x80)))))
 (let (($x1263 (not (= ?x1360 0))))
 (let (($x1250 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x917 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x419 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (and $x125 (= ?x419 (- 4)) $x917 $x1250 $x1263)))))))))))))) :qid k!34))
 ))
 (let ((?x901 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x80 (+ c k)))
 (let ((?x310 (+ 1 n)))
 (let ((?x75 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x1320 (* ?x310 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1360 (+ (* 6 (* ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x310 ?x310 ?x307 ?x307 ?x307)) (* 6 (* ?x310 ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x307 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* 6 (* ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* (- 6) (* ?x310 ?x310 ?x310 ?x80)) (* ?x310 ?x310 ?x310 ?x307 ?x80) (* 6 ?x1320) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x80)))))
 (let (($x1263 (not (= ?x1360 0))))
 (let (($x1250 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x141 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x212 (* (- 1) ?x49)))
 (let ((?x211 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x184 (and $x125 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x211 ?x212) 4) $x141 $x1250 $x1263)))
 (let (($x917 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x419 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x1273 (and $x125 (= ?x419 (- 4)) $x917 $x1250 $x1263)))
 (rewrite (= $x1273 $x184)))))))))))))))))))))))
 ))
 (let (($x92 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x80 (+ c k)))
 (let ((?x68 (+ m 6)))
 (let ((?x75 (+ k m)))
 (let ((?x74 (+ (- (* 6 ?x68 ?x68 ?x69 ?x69) (* ?x68 ?x68 ?x68 ?x69 ?x69)) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69))))
 (let ((?x79 (+ (- ?x74 (* ?x75 ?x75 ?x75 ?x68 ?x68 ?x68 ?x68)) (* 6 ?x75 ?x75 ?x75 ?x68 ?x68 ?x68))))
 (let ((?x85 (+ (- ?x79 (* 6 ?x80 ?x69 ?x69 ?x69)) (* ?x80 ?x68 ?x69 ?x69 ?x69) (* 6 ?x75 ?x75 ?x75 ?x68 ?x68 ?x68 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x85 (* 6 ?x80 ?x69 ?x69 ?x69 ?x69)) 0)))))))))))))))))) :qid k!34))
 ))
 (let ((?x1264 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x80 (+ c k)))
 (let ((?x310 (+ 1 n)))
 (let ((?x75 (+ k m)))
 (let ((?x307 (+ 6 m)))
 (let ((?x1320 (* ?x310 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)))
 (let ((?x1360 (+ (* 6 (* ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x310 ?x310 ?x307 ?x307 ?x307)) (* 6 (* ?x310 ?x310 ?x310 ?x307 ?x307)) (* (- 1) (* ?x307 ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* 6 (* ?x307 ?x307 ?x307 ?x75 ?x75 ?x75)) (* (- 6) (* ?x310 ?x310 ?x310 ?x80)) (* ?x310 ?x310 ?x310 ?x307 ?x80) (* 6 ?x1320) (* (- 6) (* ?x310 ?x310 ?x310 ?x310 ?x80)))))
 (let (($x1263 (not (= ?x1360 0))))
 (let (($x1250 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x917 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x419 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x125 (= (+ m (* (- 6) n)) 6)))
 (let (($x1273 (and $x125 (= ?x419 (- 4)) $x917 $x1250 $x1263)))
 (let ((?x69 (+ n 1)))
 (let ((?x68 (+ m 6)))
 (let ((?x74 (+ (- (* 6 ?x68 ?x68 ?x69 ?x69) (* ?x68 ?x68 ?x68 ?x69 ?x69)) (* 6 ?x68 ?x68 ?x69 ?x69 ?x69))))
 (let ((?x79 (+ (- ?x74 (* ?x75 ?x75 ?x75 ?x68 ?x68 ?x68 ?x68)) (* 6 ?x75 ?x75 ?x75 ?x68 ?x68 ?x68))))
 (let ((?x85 (+ (- ?x79 (* 6 ?x80 ?x69 ?x69 ?x69)) (* ?x80 ?x68 ?x69 ?x69 ?x69) (* 6 ?x75 ?x75 ?x75 ?x68 ?x68 ?x68 ?x69))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x91 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (- ?x85 (* 6 ?x80 ?x69 ?x69 ?x69 ?x69)) 0))))))
 (rewrite (= $x91 $x1273))))))))))))))))))))))))))))
 ))
 (let ((@x93 (asserted $x92)))
 (let ((@x895 (mp (mp @x93 (quant-intro (proof-bind ?x1264) (= $x92 $x1260)) $x1260) (rewrite (= $x1260 $x1260)) $x1260)))
 (let ((@x353 (mp (mp @x895 (quant-intro (proof-bind ?x901) (= $x1260 $x900)) $x900) (quant-intro (proof-bind ?x142) (= $x900 $x925)) $x925)))
 (let ((@x703 (mp (mp~ @x353 (sk (~ $x925 $x926)) $x926) (rewrite (= $x926 $x351)) $x351)))
 (let ((@x1258 (and-elim @x703 $x191)))
 (let ((@x708 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x191) $x179)) @x1258 $x179)))
 (let (($x349 (>= ?x1168 1)))
 (let ((@x640 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x191) $x349)) @x1258 $x349)))
 (let (($x1346 (<= ?x1017 (- 6))))
 (let ((@x694 (and-elim @x703 $x980)))
 (let ((@x707 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x980) $x1346)) @x694 $x1346)))
 (let (($x259 (>= ?x1017 (- 6))))
 (let ((@x486 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x980) $x259)) @x694 $x259)))
 (let (($x1301 (<= ?x190 1)))
 (let ((@x1353 (and-elim @x703 $x1338)))
 (let ((@x138 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1338) $x1301)) @x1353 $x1301)))
 (let (($x1354 (>= ?x190 1)))
 (let ((@x678 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1338) $x1354)) @x1353 $x1354)))
 (let (($x1344 (not (>= ?x130 (- 216)))))
 (let (($x1268 (<= ?x130 (- 216))))
 (let ((@x730 ((_ th-lemma arith) (hypothesis (not $x1268)) @x678 @x138 @x486 @x707 @x678 @x138 @x486 @x707 @x486 @x707 @x640 @x708 @x678 @x138 @x678 @x138 @x486 @x707 @x640 @x708 false)))
 (let ((@x1091 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x693 (not $x1268) $x1344)) (and-elim @x703 $x706) (or (not $x1268) $x1344))))
 ((_ th-lemma arith) (unit-resolution @x1091 (lemma @x730 $x1268) $x1344) @x678 @x138 @x486 @x707 @x678 @x138 @x486 @x707 @x486 @x707 @x640 @x708 @x678 @x138 @x678 @x138 @x486 @x707 @x640 @x708 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 4
 :arith-assert-diseq        1
 :arith-assert-lower        48
 :arith-assert-upper        94
 :arith-branch-var          2
 :arith-conflicts           8
 :arith-eq-adapter          5
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             612
 :arith-nonlinear-bounds    67
 :arith-nonlinear-horner    16
 :arith-num-rows            8
 :arith-patches             3
 :arith-pivots              7
 :arith-row-summations      9
 :arith-tableau-max-columns 64
 :arith-tableau-max-rows    8
 :conflicts                 8
 :decisions                 82
 :del-clause                14
 :final-checks              13
 :max-memory                3.87
 :memory                    3.31
 :mk-bool-var               61
 :mk-clause                 20
 :num-allocs                1433478
 :num-checks                1
 :propagations              20
 :rlimit-count              11065
 :time                      0.01
 :total-time                0.02)
