unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x358 (to_real a!3)))
 (let ((?x296 (to_real d!1)))
 (let ((?x174 (to_real b!2)))
 (let ((?x69 (to_real a00)))
 (let ((?x549 (+ (* (/ 1.0 2.0) (* ?x296 ?x358 ?x358 ?x358 ?x358 (to_real y!0))) (* (- (/ 1.0 8.0)) (* ?x174 ?x296 ?x296 ?x358 ?x358 ?x358 ?x358)) (* (/ 1.0 4.0) (* ?x174 ?x174 ?x296 ?x358 ?x358 ?x358 (to_real y!0))) (* (- 1.0) (* ?x174 ?x358 ?x358 ?x358 (to_real y!0) (to_real y!0))) (* (to_real y00) ?x174 ?x358 ?x358 ?x358 (to_real y!0)) (* (- (/ 1.0 2.0)) (* ?x69 ?x296 ?x358 ?x358 ?x358 (to_real y!0))) (* (- (/ 1.0 4.0)) (* (to_real y00) ?x174 ?x174 ?x296 ?x358 ?x358 ?x358)) (* (/ 1.0 8.0) (* ?x69 ?x174 ?x296 ?x296 ?x358 ?x358 ?x358)))))
 (let (($x153 (>= ?x549 0.0)))
 (let (($x682 (not $x153)))
 (let (($x582 (<= ?x549 0.0)))
 (let ((?x348 (* ?x296 ?x358)))
 (let ((?x132 (* (/ 1.0 2.0) ?x348)))
 (let ((?x491 (to_real y!0)))
 (let ((?x144 (* ?x174 ?x491)))
 (let ((?x357 (* (- 1.0) ?x144)))
 (let ((?x546 (* ?x69 ?x296)))
 (let ((?x555 (* (- (/ 1.0 2.0)) ?x546)))
 (let ((?x66 (to_real y00)))
 (let ((?x369 (* ?x66 ?x174)))
 (let ((?x231 (+ ?x369 ?x555 ?x357 ?x132)))
 (let (($x585 (>= ?x231 0.0)))
 (let ((?x586 (+ ?x369 (* (- 1.0) (to_real (* y00 b!2))))))
 (let (($x346 (>= ?x586 0.0)))
 (let (($x293 (= 0.0 ?x586)))
 (let ((@x218 (symm (commutativity (= $x293 (= ?x586 0.0))) (= (= ?x586 0.0) $x293))))
 (let ((@x220 (mp ((_ th-lemma arith) (= ?x586 0.0)) @x218 $x293)))
 (let ((@x235 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x293) $x346)) @x220 $x346)))
 (let ((?x342 (* a00 d!1)))
 (let ((?x392 (+ (* 2 (* y!0 b!2)) (* (- 2) (* y00 b!2)) ?x342 (* (- 1) (* d!1 a!3)))))
 (let (($x147 (<= ?x392 0)))
 (let (($x131 (= 0 ?x392)))
 (let ((@x255 (symm (commutativity (= $x131 (= ?x392 0))) (= (= ?x392 0) $x131))))
 (let (($x393 (= ?x392 0)))
 (let ((?x386 (* (/ 1.0 2.0) (* ?x296 ?x358 ?x358 ?x358))))
 (let ((?x322 (* ?x358 ?x358 ?x358 ?x491)))
 (let ((?x228 (* ?x174 ?x174 ?x174 ?x491)))
 (let ((?x182 (+ (* (- (/ 1.0 4.0)) (* ?x174 ?x174 ?x174 ?x174 ?x296)) (* 3.0 (* ?x174 ?x358 ?x358 ?x491)) ?x228 (* 3.0 (* ?x174 ?x174 ?x358 ?x491)) (* (/ 3.0 2.0) (* ?x174 ?x174 ?x296 ?x358)) (* (- (/ 1.0 4.0)) (* ?x174 ?x296 ?x358 ?x358 ?x358)) (* (- (/ 3.0 4.0)) (* ?x174 ?x174 ?x296 ?x358 ?x358)) (* (- (/ 3.0 4.0)) (* ?x174 ?x174 ?x174 ?x296 ?x358)) (* (/ 1.0 2.0) (* ?x174 ?x174 ?x174 ?x296)) ?x322 ?x386 (* (/ 3.0 2.0) (* ?x174 ?x296 ?x358 ?x358)))))
 (let (($x170 (= (* ?x182 (+ ?x357 ?x132 ?x369 ?x555)) 0.0)))
 (let (($x573 (not $x170)))
 (let (($x367 (= ?x549 0.0)))
 (let (($x382 (not $x367)))
 (let (($x540 (or $x382 $x573)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x151 (= (+ ?x35 ?x106 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0))) 0)))
 (let (($x513 (and $x151 (= (+ (* d00 b!2) (* (- 1) (* b00 d!1))) 0) $x393 $x540)))
 (let ((?x337 (+ (* (- (/ 1.0 4.0)) (* ?x296 ?x358 ?x358 ?x358 ?x174)) ?x322 (* (- (/ 3.0 4.0)) (* ?x296 ?x358 ?x358 ?x174 ?x174)) (* (- (/ 3.0 4.0)) (* ?x296 ?x358 ?x174 ?x174 ?x174)) (* (- (/ 1.0 4.0)) (* ?x296 ?x174 ?x174 ?x174 ?x174)) (* 3.0 (* ?x358 ?x358 ?x174 ?x491)) (* 3.0 (* ?x358 ?x174 ?x174 ?x491)) ?x228 ?x386 (* (/ 3.0 2.0) (* ?x296 ?x358 ?x358 ?x174)) (* (/ 3.0 2.0) (* ?x296 ?x358 ?x174 ?x174)) (* (/ 1.0 2.0) (* ?x296 ?x174 ?x174 ?x174)))))
 (let (($x146 (= (* ?x337 (+ ?x132 ?x357 (* ?x174 ?x66) (* (- (/ 1.0 2.0)) (* ?x296 ?x69)))) 0.0)))
 (let ((?x162 (+ (* (/ 1.0 8.0) (* ?x296 ?x296 ?x358 ?x358 ?x358 ?x358 ?x174)) (* (- (/ 1.0 4.0)) (* ?x296 ?x358 ?x358 ?x358 ?x174 ?x174 ?x491)) (* (/ 1.0 4.0) (* ?x296 ?x358 ?x358 ?x358 ?x174 ?x174 ?x66)) (* (- (/ 1.0 8.0)) (* ?x296 ?x296 ?x358 ?x358 ?x358 ?x174 ?x69)) (* (- (/ 1.0 2.0)) (* ?x296 ?x358 ?x358 ?x358 ?x358 ?x491)) (* ?x358 ?x358 ?x358 ?x174 ?x491 ?x491) (* (- 1.0) (* ?x358 ?x358 ?x358 ?x174 ?x491 ?x66)) (* (/ 1.0 2.0) (* ?x296 ?x358 ?x358 ?x358 ?x491 ?x69)))))
 (let ((?x429 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x312 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x106 (* 2 (* y!0 b00))) 0)))
 (let (($x193 (and $x312 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x429 0) (or (not (= ?x162 0.0)) (not $x146)))))
 (let (($x201 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x168 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x252 (+ ?x168 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x580 (* (/ 1.0 2.0) (* (to_real d) (to_real b) (to_real b) (to_real b)))))
 (let ((?x596 (* (/ 3.0 2.0) (* (to_real d) (to_real a) (to_real b) (to_real b)))))
 (let ((?x595 (* (/ 3.0 2.0) (* (to_real d) (to_real a) (to_real a) (to_real b)))))
 (let ((?x518 (* (/ 1.0 2.0) (* (to_real d) (to_real a) (to_real a) (to_real a)))))
 (let ((?x598 (* 3.0 (* (to_real a) (to_real b) (to_real b) (to_real y)))))
 (let ((?x597 (* 3.0 (* (to_real a) (to_real a) (to_real b) (to_real y)))))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x609 (+ (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) (to_real a) (to_real a) ?x61)) (* (to_real a) (to_real a) (to_real a) (to_real y)) (* (- (/ 3.0 4.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61)) (* (- (/ 3.0 4.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61)) ?x597 ?x598 (* ?x61 ?x61 ?x61 (to_real y)) ?x518 ?x595 ?x596 ?x580)))
 (let ((?x69 (to_real a00)))
 (let ((?x63 (to_real y)))
 (let ((?x59 (to_real a)))
 (let ((?x321 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 (to_real y00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x69)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x63)) (* ?x59 ?x59 ?x59 ?x61 ?x63 ?x63) (* (- 1.0) (* ?x59 ?x59 ?x59 ?x61 ?x63 (to_real y00))) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x59 ?x63 ?x69)))))
 (let (($x297 (not (= ?x321 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x175 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x180 (= ?x175 0)))
 (let (($x109 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (and $x138 $x109 $x180 (or $x297 (not (= (* ?x609 ?x252) 0.0)))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x581 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x176 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x365 (* ?x66 ?x61)))
 (let ((?x469 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x365 ?x176)))
 (let ((?x63 (to_real y)))
 (let ((?x171 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x564 (+ ?x59 ?x61)))
 (let ((?x527 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x564 ?x564 ?x564)) (* ?x564 ?x564 ?x564 ?x171))))
 (let ((?x168 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x465 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x59 ?x59 ?x59)) (* ?x63 ?x59 ?x59 ?x59))))
 (let (($x427 (not (= (* ?x465 (+ ?x168 (* (- 1.0) (* ?x63 ?x61)) ?x365 ?x176)) 0.0))))
 (let (($x521 (or $x427 (not (= (* ?x527 ?x469) 0.0)))))
 (let ((?x464 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x194 (= ?x464 0)))
 (let ((?x247 (* d00 a)))
 (let ((?x475 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x247)))
 (and (= ?x475 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x194 $x521))))))))))))))))))) :qid k!33))
 ))
 (let ((?x219 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x168 (* (/ 1.0 2.0) (* (to_real d) (to_real a)))))
 (let ((?x252 (+ ?x168 (* (- 1.0) (* (to_real b) (to_real y))) (* (to_real b) (to_real y00)) (* (- (/ 1.0 2.0)) (* (to_real d) (to_real a00))))))
 (let ((?x580 (* (/ 1.0 2.0) (* (to_real d) (to_real b) (to_real b) (to_real b)))))
 (let ((?x596 (* (/ 3.0 2.0) (* (to_real d) (to_real a) (to_real b) (to_real b)))))
 (let ((?x595 (* (/ 3.0 2.0) (* (to_real d) (to_real a) (to_real a) (to_real b)))))
 (let ((?x518 (* (/ 1.0 2.0) (* (to_real d) (to_real a) (to_real a) (to_real a)))))
 (let ((?x598 (* 3.0 (* (to_real a) (to_real b) (to_real b) (to_real y)))))
 (let ((?x597 (* 3.0 (* (to_real a) (to_real a) (to_real b) (to_real y)))))
 (let ((?x61 (to_real b)))
 (let ((?x56 (to_real d)))
 (let ((?x609 (+ (* (- (/ 1.0 4.0)) (* ?x56 (to_real a) (to_real a) (to_real a) ?x61)) (* (to_real a) (to_real a) (to_real a) (to_real y)) (* (- (/ 3.0 4.0)) (* ?x56 (to_real a) (to_real a) ?x61 ?x61)) (* (- (/ 3.0 4.0)) (* ?x56 (to_real a) ?x61 ?x61 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x61 ?x61 ?x61)) ?x597 ?x598 (* ?x61 ?x61 ?x61 (to_real y)) ?x518 ?x595 ?x596 ?x580)))
 (let ((?x69 (to_real a00)))
 (let ((?x63 (to_real y)))
 (let ((?x59 (to_real a)))
 (let ((?x321 (+ (* (/ 1.0 8.0) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x61)) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 ?x63)) (* (/ 1.0 4.0) (* ?x56 ?x59 ?x59 ?x59 ?x61 ?x61 (to_real y00))) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x61 ?x69)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59 ?x63)) (* ?x59 ?x59 ?x59 ?x61 ?x63 ?x63) (* (- 1.0) (* ?x59 ?x59 ?x59 ?x61 ?x63 (to_real y00))) (* (/ 1.0 2.0) (* ?x56 ?x59 ?x59 ?x59 ?x63 ?x69)))))
 (let (($x297 (not (= ?x321 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x175 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x180 (= ?x175 0)))
 (let (($x109 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let ((?x35 (* a00 d00)))
 (let (($x138 (= (+ ?x35 (* (- 1) (* a d00)) ?x106 (* 2 (* y b00))) 0)))
 (let (($x626 (and $x138 $x109 $x180 (or $x297 (not (= (* ?x609 ?x252) 0.0))))))
 (let ((?x176 (* (- (/ 1.0 2.0)) (* ?x69 ?x56))))
 (let ((?x66 (to_real y00)))
 (let ((?x365 (* ?x66 ?x61)))
 (let ((?x469 (+ (* (/ 1.0 2.0) (* ?x56 (+ ?x59 ?x61))) (* (- 1.0) (* ?x61 (+ ?x63 (* (/ 1.0 2.0) ?x56)))) ?x365 ?x176)))
 (let ((?x171 (+ ?x63 (* (/ 1.0 2.0) ?x56))))
 (let ((?x564 (+ ?x59 ?x61)))
 (let ((?x527 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x564 ?x564 ?x564)) (* ?x564 ?x564 ?x564 ?x171))))
 (let ((?x465 (+ (* (- (/ 1.0 4.0)) (* ?x56 ?x61 ?x59 ?x59 ?x59)) (* ?x63 ?x59 ?x59 ?x59))))
 (let (($x427 (not (= (* ?x465 (+ ?x168 (* (- 1.0) (* ?x63 ?x61)) ?x365 ?x176)) 0.0))))
 (let (($x521 (or $x427 (not (= (* ?x527 ?x469) 0.0)))))
 (let ((?x464 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x194 (= ?x464 0)))
 (let ((?x247 (* d00 a)))
 (let (($x177 (= (+ (* 2 ?x105) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x247) 0)))
 (let (($x280 (and $x177 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x194 $x521)))
 (rewrite (= $x280 $x626)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x532 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x176 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x365 (* ?x66 ?x61)))
 (let ((?x469 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x365 ?x176)))
 (let ((?x63 (to_real y)))
 (let ((?x171 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x564 (+ ?x59 ?x61)))
 (let ((?x527 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x564 ?x564 ?x564)) (* ?x564 ?x564 ?x564 ?x171))))
 (let ((?x168 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x465 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x59 ?x59 ?x59)) (* ?x63 ?x59 ?x59 ?x59))))
 (let (($x427 (not (= (* ?x465 (+ ?x168 (* (- 1.0) (* ?x63 ?x61)) ?x365 ?x176)) 0.0))))
 (let (($x521 (or $x427 (not (= (* ?x527 ?x469) 0.0)))))
 (let ((?x464 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x194 (= ?x464 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x197 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x197 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x194 $x521))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x538 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x176 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x365 (* ?x66 ?x61)))
 (let ((?x469 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x365 ?x176)))
 (let ((?x63 (to_real y)))
 (let ((?x171 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x564 (+ ?x59 ?x61)))
 (let ((?x527 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x564 ?x564 ?x564)) (* ?x564 ?x564 ?x564 ?x171))))
 (let ((?x168 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x465 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x59 ?x59 ?x59)) (* ?x63 ?x59 ?x59 ?x59))))
 (let (($x427 (not (= (* ?x465 (+ ?x168 (* (- 1.0) (* ?x63 ?x61)) ?x365 ?x176)) 0.0))))
 (let (($x521 (or $x427 (not (= (* ?x527 ?x469) 0.0)))))
 (let ((?x464 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x194 (= ?x464 0)))
 (let ((?x247 (* d00 a)))
 (let ((?x475 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x247)))
 (let (($x280 (and (= ?x475 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x194 $x521)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x452 (and (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) ?x247)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x194 $x521)))
 (rewrite (= $x452 $x280))))))))))))))))))))))))))
 ))
 (let (($x97 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x78 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real y)))
 (let ((?x84 (+ ?x63 ?x58)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x91 (+ (* (to_real (- 1)) ?x82 ?x82 ?x82 (/ (to_real b) ?x57) ?x58) (* ?x82 ?x82 ?x82 ?x84))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x66 (to_real y00)))
 (let ((?x61 (to_real b)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x93 (= (* (- (+ (- (* ?x82 ?x58) (* ?x57 ?x62 ?x84)) ?x67) ?x70) ?x91) ?x78)))
 (let ((?x59 (to_real a)))
 (let ((?x43 (- 1)))
 (let ((?x72 (to_real ?x43)))
 (let ((?x76 (+ (* ?x72 ?x59 ?x59 ?x59 ?x62 ?x58) (to_real (* a a a y)))))
 (let (($x79 (= (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x76) ?x78)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x79) (not $x93))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x166 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x176 (* (- (/ 1.0 2.0)) (* (to_real a00) (to_real d)))))
 (let ((?x61 (to_real b)))
 (let ((?x66 (to_real y00)))
 (let ((?x365 (* ?x66 ?x61)))
 (let ((?x469 (+ (* (/ 1.0 2.0) (* (to_real d) (+ (to_real a) ?x61))) (* (- 1.0) (* ?x61 (+ (to_real y) (* (/ 1.0 2.0) (to_real d))))) ?x365 ?x176)))
 (let ((?x63 (to_real y)))
 (let ((?x171 (+ ?x63 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x59 (to_real a)))
 (let ((?x564 (+ ?x59 ?x61)))
 (let ((?x527 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x564 ?x564 ?x564)) (* ?x564 ?x564 ?x564 ?x171))))
 (let ((?x168 (* (/ 1.0 2.0) (* (to_real d) ?x59))))
 (let ((?x465 (+ (* (- (/ 1.0 4.0)) (* (to_real d) ?x61 ?x59 ?x59 ?x59)) (* ?x63 ?x59 ?x59 ?x59))))
 (let (($x427 (not (= (* ?x465 (+ ?x168 (* (- 1.0) (* ?x63 ?x61)) ?x365 ?x176)) 0.0))))
 (let (($x521 (or $x427 (not (= (* ?x527 ?x469) 0.0)))))
 (let ((?x464 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x194 (= ?x464 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x105 (* b00 y00)))
 (let ((?x106 (* (- 2) ?x105)))
 (let (($x197 (= (+ ?x106 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x452 (and $x197 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x194 $x521)))
 (let ((?x78 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x56 (to_real d)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x84 (+ ?x63 ?x58)))
 (let ((?x82 (to_real (+ a b))))
 (let ((?x91 (+ (* (to_real (- 1)) ?x82 ?x82 ?x82 (/ ?x61 ?x57) ?x58) (* ?x82 ?x82 ?x82 ?x84))))
 (let ((?x69 (to_real a00)))
 (let ((?x70 (* ?x69 ?x58)))
 (let ((?x62 (/ ?x61 ?x57)))
 (let ((?x67 (* ?x57 ?x62 ?x66)))
 (let (($x93 (= (* (- (+ (- (* ?x82 ?x58) (* ?x57 ?x62 ?x84)) ?x67) ?x70) ?x91) ?x78)))
 (let ((?x76 (+ (* (to_real (- 1)) ?x59 ?x59 ?x59 ?x62 ?x58) (to_real (* a a a y)))))
 (let (($x79 (= (* (- (+ (- (* ?x59 ?x58) (* ?x57 ?x62 ?x63)) ?x67) ?x70) ?x76) ?x78)))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x96 (and $x41 (= (+ (* (- 1) b d00) (* b00 d)) 0) (= ?x54 0) (or (not $x79) (not $x93)))))
 (rewrite (= $x96 $x452)))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x98 (asserted $x97)))
 (let ((@x164 (mp (mp @x98 (quant-intro (proof-bind ?x166) (= $x97 $x532)) $x532) (rewrite (= $x532 $x532)) $x532)))
 (let ((@x122 (mp (mp @x164 (quant-intro (proof-bind ?x538) (= $x532 $x581)) $x581) (quant-intro (proof-bind ?x219) (= $x581 $x201)) $x201)))
 (let ((@x234 (mp (mp~ @x122 (sk (~ $x201 $x193)) $x193) (rewrite (= $x193 $x513)) $x513)))
 (let ((@x526 (mp (and-elim @x234 $x393) @x255 $x131)))
 (let ((@x530 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x131) $x147)) @x526 $x147)))
 (let ((?x240 (+ (* (- 1.0) (to_real (* d!1 a!3))) ?x348)))
 (let (($x520 (>= ?x240 0.0)))
 (let ((@x260 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x240 0.0)) $x520)) ((_ th-lemma arith) (= ?x240 0.0)) $x520)))
 (let ((?x206 (+ (* (- 1.0) (to_real (* y!0 b!2))) ?x144)))
 (let (($x212 (<= ?x206 0.0)))
 (let ((@x443 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x206 0.0)) $x212)) ((_ th-lemma arith) (= ?x206 0.0)) $x212)))
 (let ((?x265 (+ ?x546 (* (- 1.0) (to_real ?x342)))))
 (let (($x192 (<= ?x265 0.0)))
 (let ((@x516 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x265 0.0)) $x192)) ((_ th-lemma arith) (= ?x265 0.0)) $x192)))
 (let ((@x537 (lemma ((_ th-lemma arith) @x516 @x443 @x260 @x530 (hypothesis (not $x585)) @x235 false) $x585)))
 (let (($x375 (<= ?x231 0.0)))
 (let (($x267 (<= ?x586 0.0)))
 (let (($x275 (>= ?x392 0)))
 (let ((@x256 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x131) $x275)) @x526 $x275)))
 (let ((@x263 (unit-resolution ((_ th-lemma arith) (or (not $x147) (not $x275) $x375 (not $x346) (not $x267))) @x530 @x256 (hypothesis (not $x375)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x293) $x267)) @x220 $x267) @x235 false)))
 (let ((@x468 (lemma @x263 $x375)))
 (let ((@x658 (unit-resolution ((_ th-lemma arith) (or (not $x375) (not $x585) $x582)) (hypothesis (not $x582)) @x468 @x537 false)))
 (let (($x351 (= 0.0 ?x549)))
 (let (($x691 (not $x351)))
 (let ((@x701 (monotonicity (symm (commutativity (= $x351 $x367)) (= $x367 $x351)) (= $x382 $x691))))
 (let (($x476 (= ?x231 0.0)))
 (let ((@x487 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x476 (not $x375) (not $x585))) @x468 @x537 $x476)))
 (let (($x477 (or (not $x476) $x170)))
 (let ((@x121 (unit-resolution ((_ th-lemma arith) $x477) (hypothesis $x573) (hypothesis $x476) false)))
 (let ((@x686 (unit-resolution (and-elim @x234 $x540) (unit-resolution (lemma @x121 $x477) @x487 $x170) $x382)))
 (let ((@x704 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x351 (not $x582) $x682)) (mp @x686 @x701 $x691) (or (not $x582) $x682))))
 (unit-resolution ((_ th-lemma arith) (or $x153 (not $x147) (not $x275))) @x530 @x256 (unit-resolution @x704 (lemma @x658 $x582) $x682) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       63
 :arith-eq-adapter                70
 :arith-bound-propagations-cheap  51
 :arith-bound-propagations-lp     10
 :arith-conflicts                 100
 :arith-diseq                     52
 :arith-fixed-eqs                 1
 :arith-gcd-calls                 9
 :arith-grobner-calls             8
 :arith-grobner-conflicts         4
 :arith-horner-calls              8
 :arith-horner-cross-nested-forms 12
 :arith-lower                     56
 :arith-make-feasible             77
 :arith-max-columns               78
 :arith-max-rows                  21
 :arith-nla-explanations          155
 :arith-nla-lemmas                94
 :arith-patches                   9
 :arith-patches-success           9
 :arith-propagations              51
 :arith-upper                     136
 :conflicts                       15
 :decisions                       135
 :del-clause                      234
 :final-checks                    56
 :max-memory                      4.36
 :memory                          3.15
 :mk-bool-var                     346
 :mk-clause                       341
 :num-allocs                      2777742
 :num-checks                      1
 :propagations                    207
 :rlimit-count                    7212
 :time                            0.02
 :total-time                      0.03)
