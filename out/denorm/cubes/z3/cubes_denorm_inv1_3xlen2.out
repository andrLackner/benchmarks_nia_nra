unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x93 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x292 (>= ?x93 (- 6))))
 (let (($x491 (= ?x93 (- 6))))
 (let ((?x96 (+ c!3 k!2)))
 (let ((?x240 (+ m!1 k!2)))
 (let ((?x195 (+ 6 m!1)))
 (let ((?x97 (+ 1 n!0)))
 (let ((?x226 (+ (* ?x97 ?x97 ?x97 ?x195 ?x195 ?x195 ?x240 ?x240 ?x96) (* (- 1) (* ?x97 ?x97 ?x97 ?x195 ?x195 ?x240 ?x240 ?x240 ?x96)))))
 (let ((?x321 (* (- 18) (* c!3 m!1 m!1))))
 (let ((?x405 (* (- 216) k!2)))
 (let ((?x407 (* (- 108) (* c!3 m!1))))
 (let ((?x379 (* c!3 m!1 m!1 m!1)))
 (let ((?x390 (* (- 1) ?x379)))
 (let ((?x402 (* (- 216) c!3)))
 (let ((?x118 (* c!3 n!0)))
 (let ((?x618 (* (- 216) ?x118)))
 (let ((?x352 (+ ?x618 (* (- 108) (* c!3 n!0 m!1)) (* ?x195 ?x195 ?x240 ?x240 ?x240 ?x96 ?x96) (* (- 1) (* c!3 n!0 m!1 m!1 m!1)) (* (- 18) (* c!3 n!0 m!1 m!1)) ?x402 ?x390 ?x407 (* (- 108) (* m!1 k!2)) (* (- 216) (* n!0 k!2)) ?x405 ?x321 (* (- 1) (* m!1 m!1 m!1 k!2)) (* (- 1) (* n!0 m!1 m!1 m!1 k!2)) (* (- 18) (* m!1 m!1 k!2)) (* (- 108) (* n!0 m!1 k!2)) (* (- 18) (* n!0 m!1 m!1 k!2)))))
 (let ((?x611 (* 36 (* m!1 m!1))))
 (let ((?x577 (* k!2 k!2 k!2 k!2)))
 (let ((?x538 (* c!3 k!2 k!2 k!2)))
 (let ((?x525 (* k!2 k!2)))
 (let ((?x510 (* 36 ?x525)))
 (let ((?x446 (* m!1 m!1 m!1 m!1)))
 (let ((?x694 (* 12 (* m!1 m!1 m!1))))
 (let ((?x589 (+ (* n!0 m!1 m!1 k!2 k!2) (* 12 (* n!0 m!1 m!1 m!1)) (* 12 (* n!0 m!1 k!2 k!2)) (* 36 (* n!0 m!1 m!1)) (* 12 (* m!1 k!2 k!2)) (* 36 (* n!0 k!2 k!2)) (* n!0 m!1 m!1 m!1 m!1) ?x379 ?x694 (* 72 (* m!1 k!2)) ?x446 ?x510 ?x538 ?x577 ?x611 (* 3 (* c!3 m!1 m!1 k!2)) (* 3 (* m!1 m!1 m!1 k!2)) (* 2 (* n!0 m!1 m!1 m!1 k!2)) (* 24 (* m!1 m!1 k!2)) (* 72 (* n!0 m!1 k!2)) (* 24 (* n!0 m!1 m!1 k!2)) (* 4 (* m!1 m!1 k!2 k!2)) (* 3 (* m!1 k!2 k!2 k!2)) (* 3 (* c!3 m!1 k!2 k!2)))))
 (let ((?x291 (* ?x589 ?x352 ?x226 (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x108 (= ?x291 0)))
 (let (($x449 (not $x108)))
 (let (($x697 (= (+ (* 3 n!0) (* (- 1) k!2) (* 3 (* n!0 n!0))) (- 1))))
 (let (($x741 (= (+ (* 3 c!3) (* (- 1) (* n!0 k!2)) (* (- 2) n!0) k!2) 1)))
 (let ((?x573 (* 5 k!2)))
 (let ((?x117 (* (- 9) n!0)))
 (let ((?x523 (* (- 1) ?x525)))
 (let ((?x366 (* 18 c!3)))
 (let ((?x119 (* 9 ?x118)))
 (let (($x115 (and $x491 (= (+ ?x119 ?x366 ?x523 ?x117 ?x573) 4) $x741 $x697 $x449)))
 (let ((?x98 (+ k!2 m!1)))
 (let ((?x191 (+ (* ?x97 ?x97 ?x97 ?x195 ?x195 ?x195 ?x98 ?x98 ?x96) (* (- 1) (* ?x97 ?x97 ?x97 ?x195 ?x195 ?x98 ?x98 ?x98 ?x96)))))
 (let ((?x193 (+ ?x402 ?x405 (* (- 216) (* k!2 n!0)) ?x618 (* (- 1) (* k!2 m!1 m!1 m!1)) ?x390 (* (- 1) (* c!3 m!1 m!1 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1 m!1 n!0)) ?x407 (* (- 108) (* k!2 m!1)) ?x321 (* (- 18) (* k!2 m!1 m!1)) (* (- 108) (* c!3 m!1 n!0)) (* (- 108) (* k!2 m!1 n!0)) (* (- 18) (* c!3 m!1 m!1 n!0)) (* (- 18) (* k!2 m!1 m!1 n!0)) (* ?x195 ?x195 ?x98 ?x98 ?x98 ?x96 ?x96))))
 (let ((?x456 (+ ?x510 (* 3 (* k!2 m!1 m!1 m!1)) ?x379 (* 2 (* k!2 m!1 m!1 m!1 n!0)) (* 72 (* k!2 m!1)) (* 24 (* k!2 m!1 m!1)) (* 72 (* k!2 m!1 n!0)) (* 24 (* k!2 m!1 m!1 n!0)) (* 4 (* k!2 k!2 m!1 m!1)) (* 3 (* c!3 k!2 m!1 m!1)) ?x577 ?x538 (* 3 (* k!2 k!2 k!2 m!1)) (* 3 (* c!3 k!2 k!2 m!1)) (* k!2 k!2 m!1 m!1 n!0) (* m!1 m!1 m!1 m!1 n!0) ?x611 (* 12 (* k!2 k!2 m!1)) ?x694 ?x446 (* 36 (* k!2 k!2 n!0)) (* 36 (* m!1 m!1 n!0)) (* 12 (* k!2 k!2 m!1 n!0)) (* 12 (* m!1 m!1 m!1 n!0)))))
 (let (($x717 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x696 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x366 ?x573 ?x117 ?x523 ?x119) 4) $x717 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= (* ?x456 ?x193 ?x191 (+ (- 6) m!1 (* (- 6) n!0))) 0)))))
 (let (($x642 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x721 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x650 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x493 (* k m m n)))
 (let ((?x553 (* (- 18) ?x493)))
 (let ((?x556 (* (- 18) (* c m m n))))
 (let ((?x481 (* k m n)))
 (let ((?x559 (* (- 108) ?x481)))
 (let ((?x562 (* (- 108) (* c m n))))
 (let ((?x457 (* k m m)))
 (let ((?x565 (* (- 18) ?x457)))
 (let ((?x568 (* (- 18) (* c m m))))
 (let ((?x445 (* k m)))
 (let ((?x571 (* (- 108) ?x445)))
 (let ((?x574 (* (- 108) (* c m))))
 (let ((?x427 (* k m m m n)))
 (let ((?x600 (* (- 1) ?x427)))
 (let ((?x601 (* (- 1) (* c m m m n))))
 (let ((?x383 (* c m m m)))
 (let ((?x602 (* (- 1) ?x383)))
 (let ((?x380 (* k m m m)))
 (let ((?x603 (* (- 1) ?x380)))
 (let ((?x153 (* c n)))
 (let ((?x578 (* (- 216) ?x153)))
 (let ((?x55 (* k n)))
 (let ((?x581 (* (- 216) ?x55)))
 (let ((?x584 (* (- 216) k)))
 (let ((?x587 (* (- 216) c)))
 (let ((?x373 (+ ?x587 ?x584 ?x581 ?x578 ?x603 ?x602 ?x601 ?x600 ?x574 ?x571 ?x568 ?x565 ?x562 ?x559 ?x556 ?x553 ?x650)))
 (let ((?x785 (+ (* 36 (* k k)) (* 3 ?x380) ?x383 (* 2 ?x427) (* 72 ?x445) (* 24 ?x457) (* 72 ?x481) (* 24 ?x493) (* 4 (* k k m m)) (* 3 (* c k m m)) (* k k k k) (* c k k k) (* 3 (* k k k m)) (* 3 (* c k k m)) (* k k m m n) (* m m m m n) (* 36 (* m m)) (* 12 (* k k m)) (* 12 (* m m m)) (* m m m m) (* 36 (* k k n)) (* 36 (* m m n)) (* 12 (* k k m n)) (* 12 (* m m m n)))))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x215 (= (+ ?x40 ?x44 ?x217 ?x218 (* 9 ?x153)) 4)))
 (let (($x131 (= (+ m ?x114) 6)))
 (and $x131 $x215 $x267 $x305 (not (= (* ?x785 ?x373 ?x721 ?x120) 0))))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x200 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x721 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x650 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x767 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x650 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x721 ?x120)))
 (let (($x720 (not (= ?x767 0))))
 (let (($x735 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x691 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x131 (= (+ m ?x114) 6)))
 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x691 $x735 $x720))))))))))))))))))) :qid k!34))
 ))
 (let ((?x404 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x721 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x650 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x493 (* k m m n)))
 (let ((?x553 (* (- 18) ?x493)))
 (let ((?x556 (* (- 18) (* c m m n))))
 (let ((?x481 (* k m n)))
 (let ((?x559 (* (- 108) ?x481)))
 (let ((?x562 (* (- 108) (* c m n))))
 (let ((?x457 (* k m m)))
 (let ((?x565 (* (- 18) ?x457)))
 (let ((?x568 (* (- 18) (* c m m))))
 (let ((?x445 (* k m)))
 (let ((?x571 (* (- 108) ?x445)))
 (let ((?x574 (* (- 108) (* c m))))
 (let ((?x427 (* k m m m n)))
 (let ((?x600 (* (- 1) ?x427)))
 (let ((?x601 (* (- 1) (* c m m m n))))
 (let ((?x383 (* c m m m)))
 (let ((?x602 (* (- 1) ?x383)))
 (let ((?x380 (* k m m m)))
 (let ((?x603 (* (- 1) ?x380)))
 (let ((?x153 (* c n)))
 (let ((?x578 (* (- 216) ?x153)))
 (let ((?x55 (* k n)))
 (let ((?x581 (* (- 216) ?x55)))
 (let ((?x584 (* (- 216) k)))
 (let ((?x587 (* (- 216) c)))
 (let ((?x373 (+ ?x587 ?x584 ?x581 ?x578 ?x603 ?x602 ?x601 ?x600 ?x574 ?x571 ?x568 ?x565 ?x562 ?x559 ?x556 ?x553 ?x650)))
 (let ((?x785 (+ (* 36 (* k k)) (* 3 ?x380) ?x383 (* 2 ?x427) (* 72 ?x445) (* 24 ?x457) (* 72 ?x481) (* 24 ?x493) (* 4 (* k k m m)) (* 3 (* c k m m)) (* k k k k) (* c k k k) (* 3 (* k k k m)) (* 3 (* c k k m)) (* k k m m n) (* m m m m n) (* 36 (* m m)) (* 12 (* k k m)) (* 12 (* m m m)) (* m m m m) (* 36 (* k k n)) (* 36 (* m m n)) (* 12 (* k k m n)) (* 12 (* m m m n)))))
 (let (($x305 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x267 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x215 (= (+ ?x40 ?x44 ?x217 ?x218 (* 9 ?x153)) 4)))
 (let (($x131 (= (+ m ?x114) 6)))
 (let (($x298 (and $x131 $x215 $x267 $x305 (not (= (* ?x785 ?x373 ?x721 ?x120) 0)))))
 (let ((?x767 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x650 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x721 ?x120)))
 (let (($x720 (not (= ?x767 0))))
 (let (($x735 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x691 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x684 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x691 $x735 $x720)))
 (rewrite (= $x684 $x298)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x725 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x721 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x650 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x767 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x650 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x721 ?x120)))
 (let (($x720 (not (= ?x767 0))))
 (let (($x735 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x609 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x422 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m ?x114) 6)))
 (and $x131 (= ?x422 (- 4)) $x609 $x735 $x720))))))))))))))))) :qid k!34))
 ))
 (let ((?x201 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x721 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x650 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x767 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x650 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x721 ?x120)))
 (let (($x720 (not (= ?x767 0))))
 (let (($x735 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x691 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x218 (* (- 1) ?x49)))
 (let ((?x217 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x131 (= (+ m ?x114) 6)))
 (let (($x684 (and $x131 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x217 ?x218) 4) $x691 $x735 $x720)))
 (let (($x609 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x422 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x673 (and $x131 (= ?x422 (- 4)) $x609 $x735 $x720)))
 (rewrite (= $x673 $x684))))))))))))))))))))))))))
 ))
 (let (($x89 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x73 (+ k m)))
 (let ((?x80 (- (* (+ c k) (+ c k) ?x73 ?x73 ?x73 ?x74 ?x74) (* (+ c k) ?x74 ?x74 ?x74 ?x69))))
 (let ((?x77 (- (* (+ c k) ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* (+ c k) ?x73 ?x73 ?x73 ?x74 ?x74 ?x69 ?x69 ?x69))))
 (let ((?x84 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77 ?x80 (+ (* (+ c k) ?x73 ?x73 ?x73) (* ?x73 ?x73 ?x74 ?x74 ?x69)))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x84 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x228 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x114 (* (- 6) n)))
 (let ((?x120 (+ (- 6) m ?x114)))
 (let ((?x72 (+ c k)))
 (let ((?x73 (+ k m)))
 (let ((?x364 (+ 6 m)))
 (let ((?x320 (+ 1 n)))
 (let ((?x721 (+ (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x364 ?x73 ?x73 ?x72) (* (- 1) (* ?x320 ?x320 ?x320 ?x364 ?x364 ?x73 ?x73 ?x73 ?x72)))))
 (let ((?x650 (* ?x364 ?x364 ?x73 ?x73 ?x73 ?x72 ?x72)))
 (let ((?x767 (* (+ (* ?x73 ?x73 ?x73 ?x72) (* ?x320 ?x364 ?x364 ?x73 ?x73)) (+ ?x650 (* (- 1) (* ?x320 ?x364 ?x364 ?x364 ?x72))) ?x721 ?x120)))
 (let (($x720 (not (= ?x767 0))))
 (let (($x735 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x609 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x422 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x131 (= (+ m ?x114) 6)))
 (let (($x673 (and $x131 (= ?x422 (- 4)) $x609 $x735 $x720)))
 (let ((?x83 (+ (* ?x72 ?x73 ?x73 ?x73) (* ?x73 ?x73 (+ m 6) (+ m 6) (+ n 1)))))
 (let ((?x69 (+ n 1)))
 (let ((?x74 (+ m 6)))
 (let ((?x80 (- (* ?x72 ?x72 ?x73 ?x73 ?x73 ?x74 ?x74) (* ?x72 ?x74 ?x74 ?x74 ?x69))))
 (let ((?x77 (- (* ?x72 ?x73 ?x73 ?x74 ?x74 ?x74 ?x69 ?x69 ?x69) (* ?x72 ?x73 ?x73 ?x73 ?x74 ?x74 ?x69 ?x69 ?x69))))
 (let ((?x84 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x77 ?x80 ?x83)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x88 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x84 0))))))
 (rewrite (= $x88 $x673))))))))))))))))))))))))))))))))
 ))
 (let ((@x90 (asserted $x89)))
 (let ((@x639 (mp (mp @x90 (quant-intro (proof-bind ?x228) (= $x89 $x725)) $x725) (rewrite (= $x725 $x725)) $x725)))
 (let ((@x94 (mp (mp @x639 (quant-intro (proof-bind ?x201) (= $x725 $x200)) $x200) (quant-intro (proof-bind ?x404) (= $x200 $x642)) $x642)))
 (let ((@x159 (mp (mp~ @x94 (sk (~ $x642 $x696)) $x696) (rewrite (= $x696 $x115)) $x115)))
 (let ((@x590 (and-elim @x159 $x491)))
 (let ((@x554 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x491) $x292)) @x590 $x292)))
 (let (($x176 (<= ?x93 (- 6))))
 (let ((@x551 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x491) $x176)) @x590 $x176)))
 (let (($x335 (not (<= ?x291 0))))
 (let (($x661 (>= ?x291 0)))
 (let ((@x514 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x108 $x335 (not $x661))) (and-elim @x159 $x449) (or $x335 (not $x661)))))
 (let ((@x387 (unit-resolution @x514 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x661)) @x551 @x554 false) $x661) $x335)))
 ((_ th-lemma arith farkas 1 1 1) @x387 @x551 @x554 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        13
 :arith-branch-var          1
 :arith-conflicts           3
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           1
 :arith-ineq-splits         1
 :arith-max-min             282
 :arith-nonlinear-bounds    15
 :arith-num-rows            12
 :arith-patches             1
 :arith-pivots              5
 :arith-pseudo-nonlinear    3
 :arith-row-summations      11
 :arith-tableau-max-columns 70
 :arith-tableau-max-rows    12
 :conflicts                 3
 :decisions                 3
 :del-clause                16
 :final-checks              4
 :max-memory                3.67
 :memory                    3.18
 :mk-bool-var               23
 :mk-clause                 16
 :num-allocs                1158472
 :num-checks                1
 :propagations              11
 :rlimit-count              5077
 :time                      0.02
 :total-time                0.05)
