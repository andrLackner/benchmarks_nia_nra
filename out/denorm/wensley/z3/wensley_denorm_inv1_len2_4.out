unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun y!0 () Int)
(declare-fun b!2 () Int)
(proof
(let ((?x287 (to_real a!3)))
 (let ((?x278 (to_real d!1)))
 (let ((?x134 (to_real y!0)))
 (let ((?x73 (to_real b00)))
 (let ((?x158 (* (- (/ 1.0 2.0)) (* ?x134 ?x134 ?x134 (to_real a00) (to_real d00) ?x278 ?x287))))
 (let ((?x327 (to_real b!2)))
 (let ((?x175 (to_real d00)))
 (let ((?x162 (+ (* (/ 1.0 2.0) (* ?x134 ?x134 ?x134 ?x175 ?x278 ?x287 ?x287)) (* (- (/ 1.0 8.0)) (* ?x73 ?x134 ?x278 ?x287 ?x287 ?x327 ?x327 ?x327)) (* (/ 1.0 8.0) (* ?x73 (to_real y00) ?x278 ?x287 ?x287 ?x327 ?x327 ?x327)) (* (- (/ 1.0 16.0)) (* (to_real a00) ?x175 ?x278 ?x287 ?x287 ?x327 ?x327 ?x327)) (* (/ 1.0 16.0) (* ?x175 ?x278 ?x287 ?x287 ?x287 ?x327 ?x327 ?x327)) ?x158 (* ?x73 ?x134 ?x134 ?x134 (to_real y00) ?x278 ?x287) (* (- 1.0) (* ?x73 ?x134 ?x134 ?x134 ?x134 ?x278 ?x287)))))
 (let (($x358 (<= ?x162 0.0)))
 (let (($x255 (not $x358)))
 (let (($x163 (= ?x162 0.0)))
 (let (($x223 (not $x163)))
 (let ((?x689 (* ?x73 ?x134)))
 (let ((?x496 (* 2.0 ?x689)))
 (let ((?x447 (* ?x175 ?x287)))
 (let ((?x442 (* (- 1.0) ?x447)))
 (let ((?x297 (* ?x175 ?x327)))
 (let ((?x648 (* (- 1.0) ?x297)))
 (let ((?x209 (to_real y00)))
 (let ((?x210 (* ?x73 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x123 (* ?x73 ?x278)))
 (let ((?x526 (* (- (/ 1.0 16.0)) (* ?x278 ?x278 ?x278 ?x278 ?x287))))
 (let ((?x237 (+ (* (- (/ 3.0 4.0)) (* ?x134 ?x134 ?x278 ?x278 ?x287)) (* (- (/ 3.0 8.0)) (* ?x134 ?x278 ?x278 ?x278 ?x287)) (* (- (/ 3.0 8.0)) (* ?x134 ?x278 ?x278 ?x278 ?x327)) (* (- (/ 3.0 4.0)) (* ?x134 ?x134 ?x278 ?x278 ?x327)) (* (- (/ 1.0 16.0)) (* ?x278 ?x327 ?x327 ?x327 ?x327 ?x327)) ?x526 (* (- (/ 1.0 2.0)) (* ?x134 ?x134 ?x134 ?x278 ?x287)) (* (- (/ 1.0 16.0)) (* ?x278 ?x287 ?x287 ?x327 ?x327 ?x327)) (* (- (/ 1.0 8.0)) (* ?x278 ?x287 ?x327 ?x327 ?x327 ?x327)) (* (- (/ 1.0 2.0)) (* ?x134 ?x134 ?x134 ?x278 ?x327)) (* (- (/ 1.0 16.0)) (* ?x278 ?x278 ?x278 ?x278 ?x327)))))
 (let (($x191 (= (* ?x237 (+ ?x123 ?x176 ?x213 ?x648 ?x442 ?x496)) 0.0)))
 (let ((?x620 (+ ?x176 ?x213 ?x648 ?x442 ?x496 ?x123)))
 (let (($x115 (= 0.0 ?x620)))
 (let (($x185 (>= ?x620 0.0)))
 (let ((?x226 (+ (* (- 1.0) (to_real (* b00 y!0))) ?x689)))
 (let (($x230 (= ?x226 0.0)))
 (let ((@x150 (lemma (unit-resolution ((_ th-lemma arith) $x230) (hypothesis (not $x230)) false) $x230)))
 (let ((?x222 (+ ?x447 (* (- 1.0) (to_real (* d00 a!3))))))
 (let (($x415 (>= ?x222 0.0)))
 (let (($x657 (= ?x222 0.0)))
 (let ((@x207 ((_ th-lemma arith) $x657)))
 (let ((@x348 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x657) $x415)) @x207 $x415)))
 (let (($x137 (<= ?x222 0.0)))
 (let ((?x231 (+ ?x123 (* (- 1.0) (to_real (* b00 d!1))))))
 (let (($x148 (>= ?x231 0.0)))
 (let (($x234 (= ?x231 0.0)))
 (let ((@x107 ((_ th-lemma arith) $x234)))
 (let (($x373 (<= ?x231 0.0)))
 (let ((@x662 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x234) $x373)) @x107 $x373)))
 (let (($x444 (>= ?x226 0.0)))
 (let ((@x389 (hypothesis $x230)))
 (let (($x205 (<= ?x226 0.0)))
 (let ((@x611 ((_ th-lemma arith triangle-eq) (or (not $x230) $x205))))
 (let ((?x568 (* d00 b!2)))
 (let ((?x571 (+ ?x568 (* (- 1) (* b00 d!1)))))
 (let (($x536 (>= ?x571 0)))
 (let (($x203 (= 0 ?x571)))
 (let ((@x94 (symm (commutativity (= $x203 (= ?x571 0))) (= (= ?x571 0) $x203))))
 (let (($x582 (= ?x571 0)))
 (let (($x220 (not $x191)))
 (let (($x129 (or $x223 $x220)))
 (let ((?x588 (+ (* d!1 a!3) (* (- 2) (* y!0 b!2)) (* 2 (* y00 b!2)) (* (- 1) (* a00 d!1)))))
 (let (($x606 (= ?x588 0)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let ((?x579 (+ ?x35 ?x100 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x403 (= ?x579 0)))
 (let (($x645 (and $x403 $x582 $x606 $x129)))
 (let ((?x548 (+ ?x176 (* (- 1.0) (* ?x287 ?x175)) ?x213 (* 2.0 (* ?x134 ?x73)) (* (- 1.0) (* ?x327 ?x175)) (* ?x278 ?x73))))
 (let ((?x539 (+ (* (- (/ 1.0 16.0)) (* ?x327 ?x327 ?x327 ?x278 ?x287 ?x287)) (* (- (/ 1.0 2.0)) (* ?x278 ?x287 ?x134 ?x134 ?x134)) (* (- (/ 1.0 16.0)) (* ?x327 ?x327 ?x327 ?x327 ?x327 ?x278)) (* (- (/ 1.0 8.0)) (* ?x327 ?x327 ?x327 ?x327 ?x278 ?x287)) (* (- (/ 1.0 2.0)) (* ?x327 ?x278 ?x134 ?x134 ?x134)) (* (- (/ 1.0 16.0)) (* ?x327 ?x278 ?x278 ?x278 ?x278)) ?x526 (* (- (/ 3.0 8.0)) (* ?x327 ?x278 ?x278 ?x278 ?x134)) (* (- (/ 3.0 8.0)) (* ?x278 ?x278 ?x278 ?x287 ?x134)) (* (- (/ 3.0 4.0)) (* ?x327 ?x278 ?x278 ?x134 ?x134)) (* (- (/ 3.0 4.0)) (* ?x278 ?x278 ?x287 ?x134 ?x134)))))
 (let ((?x136 (+ (* (/ 1.0 16.0) (* ?x327 ?x327 ?x327 ?x278 ?x287 ?x287 ?x174 ?x175)) (* (- (/ 1.0 16.0)) (* ?x327 ?x327 ?x327 ?x278 ?x287 ?x287 ?x287 ?x175)) (* (- (/ 1.0 8.0)) (* ?x327 ?x327 ?x327 ?x278 ?x287 ?x287 ?x73 ?x209)) (* (/ 1.0 8.0) (* ?x327 ?x327 ?x327 ?x278 ?x287 ?x287 ?x134 ?x73)) (* (/ 1.0 2.0) (* ?x278 ?x287 ?x134 ?x134 ?x134 ?x174 ?x175)) (* (- (/ 1.0 2.0)) (* ?x278 ?x287 ?x287 ?x134 ?x134 ?x134 ?x175)) (* (- 1.0) (* ?x278 ?x287 ?x134 ?x134 ?x134 ?x73 ?x209)) (* ?x278 ?x287 ?x134 ?x134 ?x134 ?x134 ?x73))))
 (let ((?x318 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x421 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x100 (* 2 (* y!0 b00))) 0)))
 (let (($x552 (and $x421 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x318 0) (or (not (= ?x136 0.0)) (not (= (* ?x539 ?x548) 0.0))))))
 (let (($x696 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x395 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x209 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x210 (* ?x73 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x194 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x273 (+ ?x176 ?x194 ?x213 (* 2.0 (* (to_real y) ?x73)) ?x395 (* (to_real d) ?x73))))
 (let ((?x64 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x685 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x59 ?x62 ?x64 ?x64 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x64 ?x64 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x64)) (* (- (/ 3.0 8.0)) (* ?x59 ?x59 ?x59 ?x62 ?x64)) (* (- (/ 3.0 4.0)) (* ?x56 ?x59 ?x59 ?x64 ?x64)) (* (- (/ 3.0 4.0)) (* ?x59 ?x59 ?x62 ?x64 ?x64)))))
 (let ((?x355 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x174 ?x175)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x175)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x73 ?x209)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x64 ?x73)) (* (/ 1.0 2.0) (* ?x59 ?x62 ?x64 ?x64 ?x64 ?x174 ?x175)) (* (- (/ 1.0 2.0)) (* ?x59 ?x62 ?x62 ?x64 ?x64 ?x64 ?x175)) (* (- 1.0) (* ?x59 ?x62 ?x64 ?x64 ?x64 ?x73 ?x209)) (* ?x59 ?x62 ?x64 ?x64 ?x64 ?x64 ?x73))))
 (let (($x331 (not (= ?x355 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x196 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x201 (= ?x196 0)))
 (let (($x142 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (and $x132 $x142 $x201 (or $x331 (not (= (* ?x685 ?x273) 0.0))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x301 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x114 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x210 (* ?x73 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x624 (+ ?x213 ?x176 ?x114 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x238 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x101 (+ ?x64 ?x238)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x178 (+ ?x62 ?x56)))
 (let ((?x387 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x178 ?x178)) (* (- (/ 1.0 2.0)) (* ?x59 ?x178 ?x101 ?x101 ?x101)))))
 (let ((?x412 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x59 ?x62)))))
 (let ((?x608 (* ?x412 (+ ?x213 ?x176 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x175 ?x62))))))
 (let (($x479 (or (not (= ?x608 0.0)) (not (= (* ?x387 ?x624) 0.0)))))
 (let ((?x366 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x295 (= ?x366 0)))
 (let ((?x635 (* d00 a)))
 (let ((?x182 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x635)))
 (and (= ?x182 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x295 $x479))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x126 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x395 (* (- 1.0) (* (to_real b) (to_real d00)))))
 (let ((?x209 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x210 (* ?x73 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x194 (* (- 1.0) (* (to_real a) (to_real d00)))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x273 (+ ?x176 ?x194 ?x213 (* 2.0 (* (to_real y) ?x73)) ?x395 (* (to_real d) ?x73))))
 (let ((?x64 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x685 (+ (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x59 ?x62 ?x64 ?x64 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x62)) (* (- (/ 1.0 2.0)) (* ?x56 ?x59 ?x64 ?x64 ?x64)) (* (- (/ 1.0 16.0)) (* ?x56 ?x59 ?x59 ?x59 ?x59)) (* (- (/ 1.0 16.0)) (* ?x59 ?x59 ?x59 ?x59 ?x62)) (* (- (/ 3.0 8.0)) (* ?x56 ?x59 ?x59 ?x59 ?x64)) (* (- (/ 3.0 8.0)) (* ?x59 ?x59 ?x59 ?x62 ?x64)) (* (- (/ 3.0 4.0)) (* ?x56 ?x59 ?x59 ?x64 ?x64)) (* (- (/ 3.0 4.0)) (* ?x59 ?x59 ?x62 ?x64 ?x64)))))
 (let ((?x355 (+ (* (/ 1.0 16.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x174 ?x175)) (* (- (/ 1.0 16.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x62 ?x175)) (* (- (/ 1.0 8.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x73 ?x209)) (* (/ 1.0 8.0) (* ?x56 ?x56 ?x56 ?x59 ?x62 ?x62 ?x64 ?x73)) (* (/ 1.0 2.0) (* ?x59 ?x62 ?x64 ?x64 ?x64 ?x174 ?x175)) (* (- (/ 1.0 2.0)) (* ?x59 ?x62 ?x62 ?x64 ?x64 ?x64 ?x175)) (* (- 1.0) (* ?x59 ?x62 ?x64 ?x64 ?x64 ?x73 ?x209)) (* ?x59 ?x62 ?x64 ?x64 ?x64 ?x64 ?x73))))
 (let (($x331 (not (= ?x355 0.0))))
 (let ((?x48 (* a d)))
 (let ((?x196 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let (($x201 (= ?x196 0)))
 (let (($x142 (= (+ (* b d00) (* (- 1) (* d b00))) 0)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let ((?x35 (* a00 d00)))
 (let (($x132 (= (+ ?x35 (* (- 1) (* a d00)) ?x100 (* 2 (* y b00))) 0)))
 (let (($x393 (and $x132 $x142 $x201 (or $x331 (not (= (* ?x685 ?x273) 0.0))))))
 (let ((?x624 (+ ?x213 ?x176 (* 2.0 (* ?x73 (+ ?x64 (* (/ 1.0 2.0) ?x59)))) (* (- 1.0) (* ?x175 (+ ?x62 ?x56))))))
 (let ((?x238 (* (/ 1.0 2.0) ?x59)))
 (let ((?x101 (+ ?x64 ?x238)))
 (let ((?x178 (+ ?x62 ?x56)))
 (let ((?x387 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x178 ?x178)) (* (- (/ 1.0 2.0)) (* ?x59 ?x178 ?x101 ?x101 ?x101)))))
 (let ((?x412 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x59 ?x62)))))
 (let ((?x608 (* ?x412 (+ ?x213 ?x176 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x175 ?x62))))))
 (let (($x479 (or (not (= ?x608 0.0)) (not (= (* ?x387 ?x624) 0.0)))))
 (let ((?x366 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x295 (= ?x366 0)))
 (let ((?x635 (* d00 a)))
 (let (($x666 (= (+ (* 2 ?x99) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x635) 0)))
 (let (($x313 (and $x666 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x295 $x479)))
 (rewrite (= $x313 $x393))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x481 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x114 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x210 (* ?x73 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x624 (+ ?x213 ?x176 ?x114 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x238 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x101 (+ ?x64 ?x238)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x178 (+ ?x62 ?x56)))
 (let ((?x387 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x178 ?x178)) (* (- (/ 1.0 2.0)) (* ?x59 ?x178 ?x101 ?x101 ?x101)))))
 (let ((?x412 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x59 ?x62)))))
 (let ((?x608 (* ?x412 (+ ?x213 ?x176 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x175 ?x62))))))
 (let (($x479 (or (not (= ?x608 0.0)) (not (= (* ?x387 ?x624) 0.0)))))
 (let ((?x366 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x295 (= ?x366 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x320 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x320 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x295 $x479))))))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x195 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x114 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x210 (* ?x73 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x624 (+ ?x213 ?x176 ?x114 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x238 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x101 (+ ?x64 ?x238)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x178 (+ ?x62 ?x56)))
 (let ((?x387 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x178 ?x178)) (* (- (/ 1.0 2.0)) (* ?x59 ?x178 ?x101 ?x101 ?x101)))))
 (let ((?x412 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x59 ?x62)))))
 (let ((?x608 (* ?x412 (+ ?x213 ?x176 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x175 ?x62))))))
 (let (($x479 (or (not (= ?x608 0.0)) (not (= (* ?x387 ?x624) 0.0)))))
 (let ((?x366 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x295 (= ?x366 0)))
 (let ((?x635 (* d00 a)))
 (let ((?x182 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x635)))
 (let (($x313 (and (= ?x182 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x295 $x479)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x130 (and (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) ?x635)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x295 $x479)))
 (rewrite (= $x130 $x313))))))))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x69 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x64 (to_real y)))
 (let ((?x72 (+ ?x64 ?x60)))
 (let ((?x78 (+ a b)))
 (let ((?x82 (to_real ?x78)))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x43 (- 1)))
 (let ((?x61 (to_real ?x43)))
 (let ((?x85 (- (* ?x61 ?x82 ?x82 ?x58 ?x58 ?x58 ?x60) (* ?x82 ?x60 ?x72 ?x72 ?x72))))
 (let ((?x35 (* a00 d00)))
 (let ((?x76 (to_real ?x35)))
 (let ((?x77 (+ (to_real (* (- 2) b00 y00)) ?x76 (* ?x57 (to_real b00) ?x72))))
 (let ((?x66 (- (* ?x61 (to_real a) (to_real a) ?x58 ?x58 ?x58 ?x60) (* (to_real a) ?x60 ?x64 ?x64 ?x64))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x89 (or (not (= (* (to_real ?x39) ?x66) ?x69)) (not (= (* (- ?x77 (to_real (* ?x78 d00))) ?x85) ?x69)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) $x89))))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x110 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x114 (* 2.0 (* (to_real b00) (+ (to_real y) (* (/ 1.0 2.0) (to_real d)))))))
 (let ((?x175 (to_real d00)))
 (let ((?x174 (to_real a00)))
 (let ((?x176 (* ?x174 ?x175)))
 (let ((?x209 (to_real y00)))
 (let ((?x73 (to_real b00)))
 (let ((?x210 (* ?x73 ?x209)))
 (let ((?x213 (* (- 2.0) ?x210)))
 (let ((?x624 (+ ?x213 ?x176 ?x114 (* (- 1.0) (* ?x175 (+ (to_real a) (to_real b)))))))
 (let ((?x59 (to_real d)))
 (let ((?x238 (* (/ 1.0 2.0) ?x59)))
 (let ((?x64 (to_real y)))
 (let ((?x101 (+ ?x64 ?x238)))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x178 (+ ?x62 ?x56)))
 (let ((?x387 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x178 ?x178)) (* (- (/ 1.0 2.0)) (* ?x59 ?x178 ?x101 ?x101 ?x101)))))
 (let ((?x412 (+ (* (- (/ 1.0 16.0)) (* ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x64 ?x64 ?x64 ?x59 ?x62)))))
 (let ((?x608 (* ?x412 (+ ?x213 ?x176 (* 2.0 (* ?x73 ?x64)) (* (- 1.0) (* ?x175 ?x62))))))
 (let (($x479 (or (not (= ?x608 0.0)) (not (= (* ?x387 ?x624) 0.0)))))
 (let ((?x366 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x295 (= ?x366 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x99 (* b00 y00)))
 (let ((?x100 (* (- 2) ?x99)))
 (let (($x320 (= (+ ?x100 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x130 (and $x320 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x295 $x479)))
 (let ((?x69 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x72 (+ ?x64 ?x60)))
 (let ((?x78 (+ a b)))
 (let ((?x82 (to_real ?x78)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x43 (- 1)))
 (let ((?x61 (to_real ?x43)))
 (let ((?x85 (- (* ?x61 ?x82 ?x82 ?x58 ?x58 ?x58 ?x60) (* ?x82 ?x60 ?x72 ?x72 ?x72))))
 (let ((?x76 (to_real ?x35)))
 (let ((?x81 (- (+ (to_real (* (- 2) b00 y00)) ?x76 (* ?x57 ?x73 ?x72)) (to_real (* ?x78 d00)))))
 (let ((?x66 (- (* ?x61 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60) (* ?x62 ?x60 ?x64 ?x64 ?x64))))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38)))
 (let (($x89 (or (not (= (* (to_real ?x39) ?x66) ?x69)) (not (= (* ?x81 ?x85) ?x69)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let (($x90 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) $x89)))
 (rewrite (= $x90 $x130)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x455 (mp (mp @x92 (quant-intro (proof-bind ?x110) (= $x91 $x481)) $x481) (rewrite (= $x481 $x481)) $x481)))
 (let ((@x613 (mp (mp @x455 (quant-intro (proof-bind ?x195) (= $x481 $x301)) $x301) (quant-intro (proof-bind ?x126) (= $x301 $x696)) $x696)))
 (let ((@x197 (mp (mp~ @x613 (sk (~ $x696 $x552)) $x552) (rewrite (= $x552 $x645)) $x645)))
 (let ((@x665 (mp (and-elim @x197 $x582) @x94 $x203)))
 (let ((@x95 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x203) $x536)) @x665 $x536)))
 (let (($x102 (<= ?x571 0)))
 (let ((@x299 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x203) $x102)) @x665 $x102)))
 (let (($x586 (>= ?x579 0)))
 (let (($x572 (= 0 ?x579)))
 (let ((@x219 (mp (and-elim @x197 $x403) (symm (commutativity (= $x572 $x403)) (= $x403 $x572)) $x572)))
 (let (($x584 (<= ?x579 0)))
 (let ((@x271 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x572) $x584)) @x219 $x584)))
 (let (($x650 (not $x102)))
 (let (($x669 (not $x536)))
 (let (($x640 (or (not $x586) (not $x584) (not $x148) $x185 (not $x373) $x669 (not $x415) (not $x444) $x650 (not $x137) (not $x205))))
 (let ((@x349 (unit-resolution ((_ th-lemma arith) $x640) @x271 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x572) $x586)) @x219 $x586) @x299 @x95 (hypothesis (not $x185)) (unit-resolution @x611 @x389 $x205) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x230) $x444)) @x389 $x444) @x662 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x234) $x148)) @x107 $x148) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x657) $x137)) @x207 $x137) @x348 false)))
 (let (($x314 (<= ?x620 0.0)))
 (let ((?x122 (+ ?x210 (* (- 1.0) (to_real ?x99)))))
 (let (($x566 (>= ?x122 0.0)))
 (let ((@x651 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x122 0.0)) $x566)) ((_ th-lemma arith) (= ?x122 0.0)) $x566)))
 (let ((?x241 (+ ?x176 (* (- 1.0) (to_real ?x35)))))
 (let (($x236 (<= ?x241 0.0)))
 (let ((@x405 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x241 0.0)) $x236)) ((_ th-lemma arith) (= ?x241 0.0)) $x236)))
 (let ((?x243 (+ (* (- 1.0) (to_real ?x568)) ?x297)))
 (let (($x688 (>= ?x243 0.0)))
 (let ((@x259 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x243 0.0)) $x688)) ((_ th-lemma arith) (= ?x243 0.0)) $x688)))
 (let ((@x350 ((_ th-lemma arith) @x348 @x259 @x405 @x271 @x95 @x651 (hypothesis (not $x314)) @x662 (unit-resolution @x611 ((_ th-lemma arith) $x230) $x205) false)))
 (let ((@x448 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x115 (not $x314) (not $x185))) (lemma @x350 $x314) (unit-resolution (lemma @x349 (or (not $x230) $x185)) @x150 $x185) $x115)))
 (let (($x563 (= ?x620 0.0)))
 (let (($x151 (not $x563)))
 (let ((@x468 (unit-resolution (unit-resolution ((_ th-lemma arith) (or $x151 $x191)) (hypothesis $x220) $x151) (symm (hypothesis $x115) $x563) false)))
 (let ((@x270 (unit-resolution (and-elim @x197 $x129) (unit-resolution (lemma @x468 (or (not $x115) $x191)) @x448 $x191) $x223)))
 (let (($x108 (>= ?x162 0.0)))
 (let (($x308 (>= ?x588 0)))
 (let (($x499 (= 0 ?x588)))
 (let ((@x697 (mp (and-elim @x197 $x606) (symm (commutativity (= $x499 $x606)) (= $x606 $x499)) $x499)))
 (let ((@x715 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x499) $x308)) @x697 $x308)))
 (let (($x509 (<= ?x588 0)))
 (let ((@x712 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x499) $x509)) @x697 $x509)))
 (let ((@x718 (unit-resolution ((_ th-lemma arith) (or $x108 $x650 $x669 (not $x308) (not $x509))) @x299 @x95 @x712 @x715 (hypothesis (not $x108)) false)))
 (let ((@x275 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x163 $x255 (not $x108))) (lemma @x718 $x108) @x270 $x255)))
 (unit-resolution ((_ th-lemma arith) (or $x358 $x669 $x650 (not $x308) (not $x509))) @x299 @x95 @x712 @x715 @x275 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       43
 :arith-eq-adapter                50
 :arith-bound-propagations-cheap  28
 :arith-bound-propagations-lp     7
 :arith-conflicts                 69
 :arith-diseq                     34
 :arith-gcd-calls                 8
 :arith-grobner-calls             7
 :arith-grobner-conflicts         3
 :arith-horner-calls              7
 :arith-horner-cross-nested-forms 19
 :arith-lower                     74
 :arith-make-feasible             62
 :arith-max-columns               89
 :arith-max-rows                  27
 :arith-nla-explanations          168
 :arith-nla-lemmas                67
 :arith-patches                   8
 :arith-patches-success           8
 :arith-propagations              28
 :arith-upper                     60
 :conflicts                       10
 :decisions                       59
 :del-clause                      197
 :final-checks                    49
 :max-memory                      4.94
 :memory                          3.14
 :mk-bool-var                     221
 :mk-clause                       237
 :num-allocs                      4701266
 :num-checks                      1
 :propagations                    115
 :rlimit-count                    6307
 :time                            0.03
 :total-time                      0.04)
