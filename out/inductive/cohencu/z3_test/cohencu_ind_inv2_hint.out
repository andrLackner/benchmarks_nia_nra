unsat
((set-logic NIA)
(declare-fun i!1 () Int)
(declare-fun i!0 () Int)
(proof
(let (($x720 (forall ((i Int) )(! (let ((?x64 (inv i)))
 (let (($x194 (= ?x64 0)))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (or $x145 $x194))))) :pattern ( (inv i) ) :qid k!69))
 ))
 (let ((?x251 (+ 1 i!1)))
 (let ((?x253 (inv ?x251)))
 (let (($x254 (= ?x253 0)))
 (let ((?x236 (inv i!1)))
 (let (($x111 (= ?x236 0)))
 (let (($x88 (not $x111)))
 (let (($x103 (>= i!1 0)))
 (let (($x233 (not $x103)))
 (let (($x255 (or $x233 $x88 $x254)))
 (let ((?x3090 (z ?x251)))
 (let ((?x3104 (* ?x3090 ?x3090)))
 (let ((?x3102 (* (- 6) ?x3090)))
 (let ((?x3084 (y ?x251)))
 (let ((?x3101 (* (- 12) ?x3084)))
 (let ((?x3103 (* (- 1) ?x253)))
 (let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let ((?x3161 (+ ?x68 ?x74 ?x148 ?x3103 ?x3101 ?x3102 ?x3104)))
 (let (($x3185 (<= ?x3161 0)))
 (let (($x3167 (= ?x3161 0)))
 (let (($x3165 (not $x3167)))
 (let ((?x3147 (+ ?x3084 ?x3090 (* (- 1) (y (+ 2 i!1))))))
 (let (($x3146 (= ?x3147 0)))
 (let (($x3149 (not $x3146)))
 (let (($x3169 (or (not (= (+ (n ?x251) (* (- 1) (n (+ 2 i!1)))) (- 1))) (not (= (+ (x ?x251) ?x3084 (* (- 1) (x (+ 2 i!1)))) 0)) $x3149 (not (= (+ ?x3090 (* (- 1) (z (+ 2 i!1)))) (- 6))) $x3165)))
 (let (($x3177 (not $x3169)))
 (let (($x3111 (>= i!1 (- 1))))
 (let (($x256 (not $x255)))
 (let ((@x4815 (hypothesis $x256)))
 (let ((@x4816 (unit-resolution (def-axiom (or $x255 $x103)) @x4815 $x103)))
 (let (($x712 (forall ((i Int) )(! (let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let (($x217 (= (+ ?x68 ?x74 ?x171 ?x193 (* (- 1) (inv i)) ?x75 ?x148) 0)))
 (let (($x282 (or (not (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))) (not (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)) (not (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)) (not (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))) (not $x217))))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (or $x145 (not $x282))))))))))))))))) :pattern ( (n i) ) :pattern ( (x i) ) :pattern ( (y i) ) :pattern ( (z i) ) :pattern ( (inv i) ) :qid k!57))
 ))
 (let (($x288 (forall ((i Int) )(! (let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let (($x217 (= (+ ?x68 ?x74 ?x171 ?x193 (* (- 1) (inv i)) ?x75 ?x148) 0)))
 (let (($x282 (or (not (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))) (not (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)) (not (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)) (not (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))) (not $x217))))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (or $x145 (not $x282))))))))))))))))) :qid k!57))
 ))
 (let ((?x715 (lambda ((i Int) )(let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let (($x217 (= (+ ?x68 ?x74 ?x171 ?x193 (* (- 1) (inv i)) ?x75 ?x148) 0)))
 (let (($x282 (or (not (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))) (not (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)) (not (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)) (not (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))) (not $x217))))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (let (($x286 (or $x145 (not $x282))))
 (refl (= $x286 $x286)))))))))))))))))))
 ))
 (let (($x153 (forall ((i Int) )(! (let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let (($x217 (= (+ ?x68 ?x74 ?x171 ?x193 (* (- 1) (inv i)) ?x75 ?x148) 0)))
 (let (($x135 (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))))
 (let (($x118 (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)))
 (let (($x105 (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x92 (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))))
 (let (($x224 (and $x92 $x105 $x118 $x135 $x217)))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (or $x145 $x224)))))))))))))))))))) :qid k!57))
 ))
 (let ((?x290 (lambda ((i Int) )(let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let (($x217 (= (+ ?x68 ?x74 ?x171 ?x193 (* (- 1) (inv i)) ?x75 ?x148) 0)))
 (let (($x282 (or (not (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))) (not (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)) (not (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)) (not (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))) (not $x217))))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (let (($x286 (or $x145 (not $x282))))
 (let (($x135 (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))))
 (let (($x118 (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)))
 (let (($x105 (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x92 (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))))
 (let (($x224 (and $x92 $x105 $x118 $x135 $x217)))
 (let (($x146 (or $x145 $x224)))
 (rewrite (= $x146 $x286)))))))))))))))))))))))))
 ))
 (let ((?x89 (lambda ((i Int) )(let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let (($x217 (= (+ ?x68 ?x74 ?x171 ?x193 (* (- 1) (inv i)) ?x75 ?x148) 0)))
 (let (($x135 (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))))
 (let (($x118 (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)))
 (let (($x105 (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x92 (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))))
 (let (($x224 (and $x92 $x105 $x118 $x135 $x217)))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (let (($x146 (or $x145 $x224)))
 (refl (~ $x146 $x146)))))))))))))))))))))))
 ))
 (let (($x209 (forall ((i Int) )(! (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x34 (z 0)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x64 (inv i)))
 (let (($x139 (and (= (n (+ 1 i)) (+ 1 (n i))) (= (x (+ 1 i)) (+ (x i) ?x53)) (= (y (+ 1 i)) (+ ?x53 ?x57)) (= (z (+ 1 i)) (+ 6 ?x57)) (= ?x64 (+ ?x148 ?x68 ?x171 ?x193 ?x74 ?x75)))))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (or $x145 $x139)))))))))))))))) :qid k!57))
 ))
 (let ((?x96 (lambda ((i Int) )(let ((?x34 (z 0)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let (($x217 (= (+ ?x68 ?x74 ?x171 ?x193 (* (- 1) (inv i)) ?x75 ?x148) 0)))
 (let (($x135 (= (+ ?x57 (* (- 1) (z (+ 1 i)))) (- 6))))
 (let (($x118 (= (+ ?x53 ?x57 (* (- 1) (y (+ 1 i)))) 0)))
 (let (($x105 (= (+ (x i) ?x53 (* (- 1) (x (+ 1 i)))) 0)))
 (let (($x92 (= (+ (n i) (* (- 1) (n (+ 1 i)))) (- 1))))
 (let (($x224 (and $x92 $x105 $x118 $x135 $x217)))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (let (($x146 (or $x145 $x224)))
 (let (($x139 (and (= (n (+ 1 i)) (+ 1 (n i))) (= (x (+ 1 i)) (+ (x i) ?x53)) (= (y (+ 1 i)) (+ ?x53 ?x57)) (= (z (+ 1 i)) (+ 6 ?x57)) (= (inv i) (+ ?x148 ?x68 ?x171 ?x193 ?x74 ?x75)))))
 (let (($x129 (or $x145 $x139)))
 (rewrite (= $x129 $x146)))))))))))))))))))))))))
 ))
 (let (($x80 (forall ((i Int) )(! (let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x34 (z 0)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x72 (- (+ (* (- 1) ?x34 ?x34) (* 12 (y 0))) (* 12 (y i)))))
 (let ((?x64 (inv i)))
 (let (($x78 (and (= (n (+ i 1)) (+ 1 (n i))) (= (x (+ i 1)) (+ (x i) (y i))) (= (y (+ i 1)) (+ (y i) ?x57)) (= (z (+ i 1)) (+ ?x57 6)) (= ?x64 (+ (- ?x72 (* 6 ?x57)) ?x74 ?x75)))))
 (let (($x44 (>= i 0)))
 (=> $x44 $x78))))))))) :qid k!57))
 ))
 (let ((?x212 (lambda ((i Int) )(let ((?x57 (z i)))
 (let ((?x75 (* ?x57 ?x57)))
 (let ((?x34 (z 0)))
 (let ((?x74 (* 6 ?x34)))
 (let ((?x193 (* (- 6) ?x57)))
 (let ((?x53 (y i)))
 (let ((?x171 (* (- 12) ?x53)))
 (let ((?x31 (y 0)))
 (let ((?x68 (* 12 ?x31)))
 (let ((?x147 (* ?x34 ?x34)))
 (let ((?x148 (* (- 1) ?x147)))
 (let ((?x64 (inv i)))
 (let (($x139 (and (= (n (+ 1 i)) (+ 1 (n i))) (= (x (+ 1 i)) (+ (x i) ?x53)) (= (y (+ 1 i)) (+ ?x53 ?x57)) (= (z (+ 1 i)) (+ 6 ?x57)) (= ?x64 (+ ?x148 ?x68 ?x171 ?x193 ?x74 ?x75)))))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (let (($x129 (or $x145 $x139)))
 (let ((?x73 (- (- (+ (* (- 1) ?x34 ?x34) ?x68) (* 12 ?x53)) (* 6 ?x57))))
 (let (($x78 (and (= (n (+ i 1)) (+ 1 (n i))) (= (x (+ i 1)) (+ (x i) ?x53)) (= (y (+ i 1)) (+ ?x53 ?x57)) (= (z (+ i 1)) (+ ?x57 6)) (= ?x64 (+ ?x73 ?x74 ?x75)))))
 (let (($x79 (=> $x44 $x78)))
 (trans (monotonicity (rewrite (= $x78 $x139)) (= $x79 (=> $x44 $x139))) (rewrite (= (=> $x44 $x139) $x129)) (= $x79 $x129))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x228 (mp (mp @x81 (quant-intro (proof-bind ?x212) (= $x80 $x209)) $x209) (rewrite (= $x209 $x209)) $x209)))
 (let ((@x90 (mp~ (mp @x228 (quant-intro (proof-bind ?x96) (= $x209 $x153)) $x153) (nnf-pos (proof-bind ?x89) (~ $x153 $x153)) $x153)))
 (let ((@x719 (mp (mp @x90 (quant-intro (proof-bind ?x290) (= $x153 $x288)) $x288) (quant-intro (proof-bind ?x715) (= $x288 $x712)) $x712)))
 (let (($x3114 (not $x3111)))
 (let (($x801 (not $x712)))
 (let (($x3178 (or $x801 $x3114 $x3177)))
 (let (($x3108 (or (not (= (+ (n ?x251) (* (- 1) (n (+ 1 ?x251)))) (- 1))) (not (= (+ (x ?x251) ?x3084 (* (- 1) (x (+ 1 ?x251)))) 0)) (not (= (+ ?x3084 ?x3090 (* (- 1) (y (+ 1 ?x251)))) 0)) (not (= (+ ?x3090 (* (- 1) (z (+ 1 ?x251)))) (- 6))) (not (= (+ ?x68 ?x74 ?x3101 ?x3102 ?x3103 ?x3104 ?x148) 0)))))
 (let (($x3110 (or (not (>= ?x251 0)) (not $x3108))))
 (let (($x3180 (or $x801 $x3110)))
 (let ((@x3162 (monotonicity (rewrite (= $x3110 (or $x3114 $x3177))) (= $x3180 (or $x801 (or $x3114 $x3177))))))
 (let ((@x3172 (trans @x3162 (rewrite (= (or $x801 (or $x3114 $x3177)) $x3178)) (= $x3180 $x3178))))
 (let ((@x4818 (unit-resolution (mp ((_ quant-inst (+ 1 i!1)) $x3180) @x3172 $x3178) @x719 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x3111 $x233)) @x4816 $x3111) $x3177)))
 (let ((@x4819 (unit-resolution (def-axiom (or $x3169 $x3167)) @x4818 $x3167)))
 (let ((@x4822 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3165 $x3185)) @x4819 $x3185)))
 (let (($x3186 (>= ?x3161 0)))
 (let ((@x4825 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3165 $x3186)) @x4819 $x3186)))
 (let ((?x3210 (z i!1)))
 (let ((?x3268 (* (- 1) ?x3210)))
 (let ((?x3284 (+ ?x3090 ?x3268)))
 (let (($x3312 (<= ?x3284 6)))
 (let (($x3285 (= ?x3284 6)))
 (let ((?x3222 (* ?x3210 ?x3210)))
 (let ((?x3220 (* (- 6) ?x3210)))
 (let ((?x3205 (y i!1)))
 (let ((?x3219 (* (- 12) ?x3205)))
 (let ((?x3221 (* (- 1) ?x236)))
 (let ((?x3292 (+ ?x68 ?x74 ?x148 ?x3221 ?x3219 ?x3220 ?x3222)))
 (let (($x3296 (= ?x3292 0)))
 (let (($x3294 (not $x3296)))
 (let (($x3290 (not $x3285)))
 (let ((?x3252 (* (- 1) ?x3205)))
 (let ((?x3269 (+ ?x3084 ?x3252 ?x3268)))
 (let (($x3270 (= ?x3269 0)))
 (let (($x3275 (not $x3270)))
 (let (($x3298 (or (not (= (+ (n ?x251) (* (- 1) (n i!1))) 1)) (not (= (+ (x ?x251) (* (- 1) (x i!1)) ?x3252) 0)) $x3275 $x3290 $x3294)))
 (let (($x3306 (not $x3298)))
 (let (($x3307 (or $x801 $x233 $x3306)))
 (let (($x3226 (or (not (= (+ (n i!1) (* (- 1) (n ?x251))) (- 1))) (not (= (+ (x i!1) ?x3205 (* (- 1) (x ?x251))) 0)) (not (= (+ ?x3205 ?x3210 (* (- 1) ?x3084)) 0)) (not (= (+ ?x3210 (* (- 1) ?x3090)) (- 6))) (not (= (+ ?x68 ?x74 ?x3219 ?x3220 ?x3221 ?x3222 ?x148) 0)))))
 (let (($x3228 (or $x233 (not $x3226))))
 (let (($x3309 (or $x801 $x3228)))
 (let ((@x3291 (monotonicity (rewrite (= $x3228 (or $x233 $x3306))) (= $x3309 (or $x801 (or $x233 $x3306))))))
 (let ((@x3301 (trans @x3291 (rewrite (= (or $x801 (or $x233 $x3306)) $x3307)) (= $x3309 $x3307))))
 (let ((@x4826 (unit-resolution (mp ((_ quant-inst i!1) $x3309) @x3301 $x3307) @x719 @x4816 $x3306)))
 (let ((@x5677 (unit-resolution (def-axiom (or $x3298 $x3285)) @x4826 $x3285)))
 (let ((@x5680 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3290 $x3312)) @x5677 $x3312)))
 (let (($x3313 (>= ?x3284 6)))
 (let ((@x5683 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3290 $x3313)) @x5677 $x3313)))
 (let (($x3328 (<= ?x236 0)))
 (let ((@x5686 (unit-resolution (def-axiom (or $x255 $x111)) @x4815 $x111)))
 (let ((@x5687 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x88 $x3328)) @x5686 $x3328)))
 (let (($x3329 (>= ?x236 0)))
 (let ((@x5690 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x88 $x3329)) @x5686 $x3329)))
 (let (($x3314 (<= ?x3292 0)))
 (let ((@x5691 (unit-resolution (def-axiom (or $x3298 $x3296)) @x4826 $x3296)))
 (let ((@x5694 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3294 $x3314)) @x5691 $x3314)))
 (let (($x3315 (>= ?x3292 0)))
 (let ((@x5697 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3294 $x3315)) @x5691 $x3315)))
 (let (($x3310 (<= ?x3269 0)))
 (let ((@x5698 (unit-resolution (def-axiom (or $x3298 $x3270)) @x4826 $x3270)))
 (let ((@x5701 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3275 $x3310)) @x5698 $x3310)))
 (let (($x3311 (>= ?x3269 0)))
 (let ((@x5704 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3275 $x3311)) @x5698 $x3311)))
 (let (($x5713 (not (>= ?x253 0))))
 (let (($x3330 (<= ?x253 0)))
 (let (($x3181 (<= ?x3147 0)))
 (let ((@x5705 (unit-resolution (def-axiom (or $x3169 $x3146)) @x4818 $x3146)))
 (let (($x3182 (>= ?x3147 0)))
 (let (($x4933 (or $x3330 (not $x3311) (not $x3310) (not $x3182) (not $x3181) (not $x3313) (not $x3312) (not $x3315) (not $x3314) (not $x3329) (not $x3328) (not $x3186) (not $x3185))))
 (let ((?x2399 (z 7)))
 (let ((?x2656 (+ ?x2399 (* (- 1) (z 8)))))
 (let (($x2685 (<= ?x2656 (- 6))))
 (let (($x2655 (= ?x2656 (- 6))))
 (let ((?x2603 (* ?x2399 ?x2399)))
 (let ((?x2602 (* (- 1) (inv 7))))
 (let ((?x2600 (* (- 6) ?x2399)))
 (let ((?x2388 (y 7)))
 (let ((?x2599 (* (- 12) ?x2388)))
 (let (($x2658 (not $x2655)))
 (let (($x2667 (or (not (= (+ (n 7) (* (- 1) (n 8))) (- 1))) (not (= (+ (x 7) ?x2388 (* (- 1) (x 8))) 0)) (not (= (+ ?x2388 ?x2399 (* (- 1) (y 8))) 0)) $x2658 (not (= (+ ?x68 ?x74 ?x148 ?x2599 ?x2600 ?x2602 ?x2603) 0)))))
 (let (($x2675 (not $x2667)))
 (let (($x2662 (or $x801 $x2675)))
 (let (($x2607 (or (not (= (+ (n 7) (* (- 1) (n (+ 1 7)))) (- 1))) (not (= (+ (x 7) ?x2388 (* (- 1) (x (+ 1 7)))) 0)) (not (= (+ ?x2388 ?x2399 (* (- 1) (y (+ 1 7)))) 0)) (not (= (+ ?x2399 (* (- 1) (z (+ 1 7)))) (- 6))) (not (= (+ ?x68 ?x74 ?x2599 ?x2600 ?x2602 ?x2603 ?x148) 0)))))
 (let (($x2608 (not $x2607)))
 (let (($x2576 (>= 7 0)))
 (let (($x2577 (not $x2576)))
 (let (($x2609 (or $x2577 $x2608)))
 (let (($x2664 (or $x801 $x2609)))
 (let (($x2670 (= $x2664 $x2662)))
 (let ((@x871 (rewrite (= (not true) false))))
 (let ((@x2615 (trans (monotonicity (rewrite (= $x2576 true)) (= $x2577 (not true))) @x871 (= $x2577 false))))
 (let ((@x2638 (monotonicity @x2615 (rewrite (= $x2608 $x2675)) (= $x2609 (or false $x2675)))))
 (let ((@x2671 (monotonicity (trans @x2638 (rewrite (= (or false $x2675) $x2675)) (= $x2609 $x2675)) $x2670)))
 (let ((@x4829 (unit-resolution (mp ((_ quant-inst 7) $x2664) (trans @x2671 (rewrite (= $x2662 $x2662)) $x2670) $x2662) @x719 $x2675)))
 (let ((@x4830 (unit-resolution (def-axiom (or $x2667 $x2655)) @x4829 $x2655)))
 (let ((@x4831 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2658 $x2685)) @x4830 $x2685)))
 (let (($x2686 (>= ?x2656 (- 6))))
 (let ((@x4834 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2658 $x2686)) @x4830 $x2686)))
 (let ((?x2648 (z 8)))
 (let ((?x2905 (+ ?x2648 (* (- 1) (z 9)))))
 (let (($x2934 (<= ?x2905 (- 6))))
 (let (($x2904 (= ?x2905 (- 6))))
 (let ((?x2852 (* ?x2648 ?x2648)))
 (let ((?x2851 (* (- 1) (inv 8))))
 (let ((?x2849 (* (- 6) ?x2648)))
 (let ((?x2637 (y 8)))
 (let ((?x2848 (* (- 12) ?x2637)))
 (let (($x2907 (not $x2904)))
 (let (($x2916 (or (not (= (+ (n 8) (* (- 1) (n 9))) (- 1))) (not (= (+ (x 8) ?x2637 (* (- 1) (x 9))) 0)) (not (= (+ ?x2637 ?x2648 (* (- 1) (y 9))) 0)) $x2907 (not (= (+ ?x68 ?x74 ?x148 ?x2848 ?x2849 ?x2851 ?x2852) 0)))))
 (let (($x2924 (not $x2916)))
 (let (($x2911 (or $x801 $x2924)))
 (let (($x2856 (or (not (= (+ (n 8) (* (- 1) (n (+ 1 8)))) (- 1))) (not (= (+ (x 8) ?x2637 (* (- 1) (x (+ 1 8)))) 0)) (not (= (+ ?x2637 ?x2648 (* (- 1) (y (+ 1 8)))) 0)) (not (= (+ ?x2648 (* (- 1) (z (+ 1 8)))) (- 6))) (not (= (+ ?x68 ?x74 ?x2848 ?x2849 ?x2851 ?x2852 ?x148) 0)))))
 (let (($x2857 (not $x2856)))
 (let (($x2825 (>= 8 0)))
 (let (($x2826 (not $x2825)))
 (let (($x2858 (or $x2826 $x2857)))
 (let (($x2913 (or $x801 $x2858)))
 (let (($x2919 (= $x2913 $x2911)))
 (let ((@x2864 (trans (monotonicity (rewrite (= $x2825 true)) (= $x2826 (not true))) @x871 (= $x2826 false))))
 (let ((@x2887 (monotonicity @x2864 (rewrite (= $x2857 $x2924)) (= $x2858 (or false $x2924)))))
 (let ((@x2920 (monotonicity (trans @x2887 (rewrite (= (or false $x2924) $x2924)) (= $x2858 $x2924)) $x2919)))
 (let ((@x4837 (unit-resolution (mp ((_ quant-inst 8) $x2913) (trans @x2920 (rewrite (= $x2911 $x2911)) $x2919) $x2911) @x719 $x2924)))
 (let ((@x4838 (unit-resolution (def-axiom (or $x2916 $x2904)) @x4837 $x2904)))
 (let (($x2935 (>= ?x2905 (- 6))))
 (let ((?x2151 (z 6)))
 (let ((?x2407 (+ ?x2151 (* (- 1) ?x2399))))
 (let (($x2436 (<= ?x2407 (- 6))))
 (let (($x2406 (= ?x2407 (- 6))))
 (let ((?x2354 (* ?x2151 ?x2151)))
 (let ((?x2353 (* (- 1) (inv 6))))
 (let ((?x2351 (* (- 6) ?x2151)))
 (let ((?x2140 (y 6)))
 (let ((?x2350 (* (- 12) ?x2140)))
 (let (($x2409 (not $x2406)))
 (let (($x2418 (or (not (= (+ (n 6) (* (- 1) (n 7))) (- 1))) (not (= (+ (x 6) ?x2140 (* (- 1) (x 7))) 0)) (not (= (+ ?x2140 ?x2151 (* (- 1) ?x2388)) 0)) $x2409 (not (= (+ ?x68 ?x74 ?x148 ?x2350 ?x2351 ?x2353 ?x2354) 0)))))
 (let (($x2426 (not $x2418)))
 (let (($x2413 (or $x801 $x2426)))
 (let (($x2358 (or (not (= (+ (n 6) (* (- 1) (n (+ 1 6)))) (- 1))) (not (= (+ (x 6) ?x2140 (* (- 1) (x (+ 1 6)))) 0)) (not (= (+ ?x2140 ?x2151 (* (- 1) (y (+ 1 6)))) 0)) (not (= (+ ?x2151 (* (- 1) (z (+ 1 6)))) (- 6))) (not (= (+ ?x68 ?x74 ?x2350 ?x2351 ?x2353 ?x2354 ?x148) 0)))))
 (let (($x2359 (not $x2358)))
 (let (($x2327 (>= 6 0)))
 (let (($x2328 (not $x2327)))
 (let (($x2360 (or $x2328 $x2359)))
 (let (($x2415 (or $x801 $x2360)))
 (let (($x2421 (= $x2415 $x2413)))
 (let ((@x2366 (trans (monotonicity (rewrite (= $x2327 true)) (= $x2328 (not true))) @x871 (= $x2328 false))))
 (let ((@x2389 (monotonicity @x2366 (rewrite (= $x2359 $x2426)) (= $x2360 (or false $x2426)))))
 (let ((@x2422 (monotonicity (trans @x2389 (rewrite (= (or false $x2426) $x2426)) (= $x2360 $x2426)) $x2421)))
 (let ((@x4845 (unit-resolution (mp ((_ quant-inst 6) $x2415) (trans @x2422 (rewrite (= $x2413 $x2413)) $x2421) $x2413) @x719 $x2426)))
 (let ((@x4846 (unit-resolution (def-axiom (or $x2418 $x2406)) @x4845 $x2406)))
 (let ((@x4847 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2409 $x2436)) @x4846 $x2436)))
 (let (($x2437 (>= ?x2407 (- 6))))
 (let ((@x4850 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2409 $x2437)) @x4846 $x2437)))
 (let ((?x1903 (z 5)))
 (let ((?x2159 (+ ?x1903 (* (- 1) ?x2151))))
 (let (($x2188 (<= ?x2159 (- 6))))
 (let (($x2158 (= ?x2159 (- 6))))
 (let ((?x2106 (* ?x1903 ?x1903)))
 (let ((?x2105 (* (- 1) (inv 5))))
 (let ((?x2103 (* (- 6) ?x1903)))
 (let ((?x1892 (y 5)))
 (let ((?x2102 (* (- 12) ?x1892)))
 (let (($x2161 (not $x2158)))
 (let (($x2170 (or (not (= (+ (n 5) (* (- 1) (n 6))) (- 1))) (not (= (+ (x 5) ?x1892 (* (- 1) (x 6))) 0)) (not (= (+ ?x1892 ?x1903 (* (- 1) ?x2140)) 0)) $x2161 (not (= (+ ?x68 ?x74 ?x148 ?x2102 ?x2103 ?x2105 ?x2106) 0)))))
 (let (($x2178 (not $x2170)))
 (let (($x2165 (or $x801 $x2178)))
 (let (($x2110 (or (not (= (+ (n 5) (* (- 1) (n (+ 1 5)))) (- 1))) (not (= (+ (x 5) ?x1892 (* (- 1) (x (+ 1 5)))) 0)) (not (= (+ ?x1892 ?x1903 (* (- 1) (y (+ 1 5)))) 0)) (not (= (+ ?x1903 (* (- 1) (z (+ 1 5)))) (- 6))) (not (= (+ ?x68 ?x74 ?x2102 ?x2103 ?x2105 ?x2106 ?x148) 0)))))
 (let (($x2111 (not $x2110)))
 (let (($x2079 (>= 5 0)))
 (let (($x2080 (not $x2079)))
 (let (($x2112 (or $x2080 $x2111)))
 (let (($x2167 (or $x801 $x2112)))
 (let (($x2173 (= $x2167 $x2165)))
 (let ((@x2118 (trans (monotonicity (rewrite (= $x2079 true)) (= $x2080 (not true))) @x871 (= $x2080 false))))
 (let ((@x2141 (monotonicity @x2118 (rewrite (= $x2111 $x2178)) (= $x2112 (or false $x2178)))))
 (let ((@x2174 (monotonicity (trans @x2141 (rewrite (= (or false $x2178) $x2178)) (= $x2112 $x2178)) $x2173)))
 (let ((@x4853 (unit-resolution (mp ((_ quant-inst 5) $x2167) (trans @x2174 (rewrite (= $x2165 $x2165)) $x2173) $x2165) @x719 $x2178)))
 (let ((@x4854 (unit-resolution (def-axiom (or $x2170 $x2158)) @x4853 $x2158)))
 (let ((@x4855 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2161 $x2188)) @x4854 $x2188)))
 (let (($x2189 (>= ?x2159 (- 6))))
 (let ((@x4858 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2161 $x2189)) @x4854 $x2189)))
 (let ((@x4859 (hypothesis $x3181)))
 (let ((@x4860 (hypothesis $x3182)))
 (let ((?x903 (+ ?x31 ?x34 (* (- 1) (y 1)))))
 (let (($x945 (<= ?x903 0)))
 (let (($x902 (= ?x903 0)))
 (let ((?x914 (+ ?x34 (* (- 1) (z 1)))))
 (let (($x913 (= ?x914 (- 6))))
 (let (($x916 (not $x913)))
 (let (($x905 (not $x902)))
 (let ((?x199 (inv 0)))
 (let (($x201 (= ?x199 0)))
 (let (($x133 (not $x201)))
 (let (($x934 (or $x133 (not (= (+ (n 0) (* (- 1) (n 1))) (- 1))) (not (= (+ (x 0) ?x31 (* (- 1) (x 1))) 0)) $x905 $x916)))
 (let (($x939 (not $x934)))
 (let (($x920 (or $x801 $x939)))
 (let ((?x859 (+ ?x68 ?x74 (* (- 12) ?x31) (* (- 6) ?x34) (* (- 1) ?x199) ?x147 ?x148)))
 (let (($x862 (or (not (= (+ (n 0) (* (- 1) (n (+ 1 0)))) (- 1))) (not (= (+ (x 0) ?x31 (* (- 1) (x (+ 1 0)))) 0)) (not (= (+ ?x31 ?x34 (* (- 1) (y (+ 1 0)))) 0)) (not (= (+ ?x34 (* (- 1) (z (+ 1 0)))) (- 6))) (not (= ?x859 0)))))
 (let (($x863 (not $x862)))
 (let (($x833 (>= 0 0)))
 (let (($x834 (not $x833)))
 (let (($x864 (or $x834 $x863)))
 (let (($x929 (or $x801 $x864)))
 (let (($x930 (= $x929 $x920)))
 (let ((@x873 (trans (monotonicity (rewrite (= $x833 true)) (= $x834 (not true))) @x871 (= $x834 false))))
 (let ((@x896 (monotonicity @x873 (rewrite (= $x863 $x939)) (= $x864 (or false $x939)))))
 (let ((@x932 (monotonicity (trans @x896 (rewrite (= (or false $x939) $x939)) (= $x864 $x939)) $x930)))
 (let ((@x4865 (unit-resolution (mp ((_ quant-inst 0) $x929) (trans @x932 (rewrite (= $x920 $x920)) $x930) $x920) @x719 $x939)))
 (let ((@x4866 (unit-resolution (def-axiom (or $x934 $x902)) @x4865 $x902)))
 (let ((@x4867 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x905 $x945)) @x4866 $x945)))
 (let (($x946 (>= ?x903 0)))
 (let ((@x4870 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x905 $x946)) @x4866 $x946)))
 (let ((@x4871 (hypothesis $x3312)))
 (let ((@x4872 (hypothesis $x3313)))
 (let ((@x4873 (hypothesis $x3328)))
 (let ((@x4874 (hypothesis $x3329)))
 (let ((?x1654 (z 4)))
 (let ((?x1911 (+ ?x1654 (* (- 1) ?x1903))))
 (let (($x1940 (<= ?x1911 (- 6))))
 (let (($x1910 (= ?x1911 (- 6))))
 (let ((?x1858 (* ?x1654 ?x1654)))
 (let ((?x1857 (* (- 1) (inv 4))))
 (let ((?x1855 (* (- 6) ?x1654)))
 (let ((?x1643 (y 4)))
 (let ((?x1854 (* (- 12) ?x1643)))
 (let (($x1913 (not $x1910)))
 (let (($x1922 (or (not (= (+ (n 4) (* (- 1) (n 5))) (- 1))) (not (= (+ (x 4) ?x1643 (* (- 1) (x 5))) 0)) (not (= (+ ?x1643 ?x1654 (* (- 1) ?x1892)) 0)) $x1913 (not (= (+ ?x68 ?x74 ?x148 ?x1854 ?x1855 ?x1857 ?x1858) 0)))))
 (let (($x1930 (not $x1922)))
 (let (($x1917 (or $x801 $x1930)))
 (let (($x1862 (or (not (= (+ (n 4) (* (- 1) (n (+ 1 4)))) (- 1))) (not (= (+ (x 4) ?x1643 (* (- 1) (x (+ 1 4)))) 0)) (not (= (+ ?x1643 ?x1654 (* (- 1) (y (+ 1 4)))) 0)) (not (= (+ ?x1654 (* (- 1) (z (+ 1 4)))) (- 6))) (not (= (+ ?x68 ?x74 ?x1854 ?x1855 ?x1857 ?x1858 ?x148) 0)))))
 (let (($x1863 (not $x1862)))
 (let (($x1831 (>= 4 0)))
 (let (($x1832 (not $x1831)))
 (let (($x1864 (or $x1832 $x1863)))
 (let (($x1919 (or $x801 $x1864)))
 (let (($x1925 (= $x1919 $x1917)))
 (let ((@x1870 (trans (monotonicity (rewrite (= $x1831 true)) (= $x1832 (not true))) @x871 (= $x1832 false))))
 (let ((@x1893 (monotonicity @x1870 (rewrite (= $x1863 $x1930)) (= $x1864 (or false $x1930)))))
 (let ((@x1926 (monotonicity (trans @x1893 (rewrite (= (or false $x1930) $x1930)) (= $x1864 $x1930)) $x1925)))
 (let ((@x4877 (unit-resolution (mp ((_ quant-inst 4) $x1919) (trans @x1926 (rewrite (= $x1917 $x1917)) $x1925) $x1917) @x719 $x1930)))
 (let ((@x4878 (unit-resolution (def-axiom (or $x1922 $x1910)) @x4877 $x1910)))
 (let ((@x4879 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1913 $x1940)) @x4878 $x1940)))
 (let (($x1941 (>= ?x1911 (- 6))))
 (let ((@x4882 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1913 $x1941)) @x4878 $x1941)))
 (let ((@x4883 (hypothesis $x3314)))
 (let ((@x4884 (hypothesis $x3315)))
 (let ((?x1405 (z 3)))
 (let ((?x1662 (+ ?x1405 (* (- 1) ?x1654))))
 (let (($x1691 (<= ?x1662 (- 6))))
 (let (($x1661 (= ?x1662 (- 6))))
 (let ((?x1609 (* ?x1405 ?x1405)))
 (let ((?x1608 (* (- 1) (inv 3))))
 (let ((?x1606 (* (- 6) ?x1405)))
 (let ((?x1394 (y 3)))
 (let ((?x1605 (* (- 12) ?x1394)))
 (let (($x1664 (not $x1661)))
 (let (($x1673 (or (not (= (+ (n 3) (* (- 1) (n 4))) (- 1))) (not (= (+ (x 3) ?x1394 (* (- 1) (x 4))) 0)) (not (= (+ ?x1394 ?x1405 (* (- 1) ?x1643)) 0)) $x1664 (not (= (+ ?x68 ?x74 ?x148 ?x1605 ?x1606 ?x1608 ?x1609) 0)))))
 (let (($x1681 (not $x1673)))
 (let (($x1668 (or $x801 $x1681)))
 (let (($x1613 (or (not (= (+ (n 3) (* (- 1) (n (+ 1 3)))) (- 1))) (not (= (+ (x 3) ?x1394 (* (- 1) (x (+ 1 3)))) 0)) (not (= (+ ?x1394 ?x1405 (* (- 1) (y (+ 1 3)))) 0)) (not (= (+ ?x1405 (* (- 1) (z (+ 1 3)))) (- 6))) (not (= (+ ?x68 ?x74 ?x1605 ?x1606 ?x1608 ?x1609 ?x148) 0)))))
 (let (($x1614 (not $x1613)))
 (let (($x1582 (>= 3 0)))
 (let (($x1583 (not $x1582)))
 (let (($x1615 (or $x1583 $x1614)))
 (let (($x1670 (or $x801 $x1615)))
 (let (($x1676 (= $x1670 $x1668)))
 (let ((@x1621 (trans (monotonicity (rewrite (= $x1582 true)) (= $x1583 (not true))) @x871 (= $x1583 false))))
 (let ((@x1644 (monotonicity @x1621 (rewrite (= $x1614 $x1681)) (= $x1615 (or false $x1681)))))
 (let ((@x1677 (monotonicity (trans @x1644 (rewrite (= (or false $x1681) $x1681)) (= $x1615 $x1681)) $x1676)))
 (let ((@x4887 (unit-resolution (mp ((_ quant-inst 3) $x1670) (trans @x1677 (rewrite (= $x1668 $x1668)) $x1676) $x1668) @x719 $x1681)))
 (let ((@x4888 (unit-resolution (def-axiom (or $x1673 $x1661)) @x4887 $x1661)))
 (let ((@x4889 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1664 $x1691)) @x4888 $x1691)))
 (let (($x1692 (>= ?x1662 (- 6))))
 (let ((@x4892 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1664 $x1692)) @x4888 $x1692)))
 (let ((?x1156 (z 2)))
 (let ((?x1413 (+ ?x1156 (* (- 1) ?x1405))))
 (let (($x1442 (<= ?x1413 (- 6))))
 (let (($x1412 (= ?x1413 (- 6))))
 (let ((?x1360 (* ?x1156 ?x1156)))
 (let ((?x1359 (* (- 1) (inv 2))))
 (let ((?x1357 (* (- 6) ?x1156)))
 (let ((?x1145 (y 2)))
 (let ((?x1356 (* (- 12) ?x1145)))
 (let (($x1415 (not $x1412)))
 (let (($x1424 (or (not (= (+ (n 2) (* (- 1) (n 3))) (- 1))) (not (= (+ (x 2) ?x1145 (* (- 1) (x 3))) 0)) (not (= (+ ?x1145 ?x1156 (* (- 1) ?x1394)) 0)) $x1415 (not (= (+ ?x68 ?x74 ?x148 ?x1356 ?x1357 ?x1359 ?x1360) 0)))))
 (let (($x1432 (not $x1424)))
 (let (($x1419 (or $x801 $x1432)))
 (let (($x1364 (or (not (= (+ (n 2) (* (- 1) (n (+ 1 2)))) (- 1))) (not (= (+ (x 2) ?x1145 (* (- 1) (x (+ 1 2)))) 0)) (not (= (+ ?x1145 ?x1156 (* (- 1) (y (+ 1 2)))) 0)) (not (= (+ ?x1156 (* (- 1) (z (+ 1 2)))) (- 6))) (not (= (+ ?x68 ?x74 ?x1356 ?x1357 ?x1359 ?x1360 ?x148) 0)))))
 (let (($x1365 (not $x1364)))
 (let (($x1333 (>= 2 0)))
 (let (($x1334 (not $x1333)))
 (let (($x1366 (or $x1334 $x1365)))
 (let (($x1421 (or $x801 $x1366)))
 (let (($x1427 (= $x1421 $x1419)))
 (let ((@x1372 (trans (monotonicity (rewrite (= $x1333 true)) (= $x1334 (not true))) @x871 (= $x1334 false))))
 (let ((@x1395 (monotonicity @x1372 (rewrite (= $x1365 $x1432)) (= $x1366 (or false $x1432)))))
 (let ((@x1428 (monotonicity (trans @x1395 (rewrite (= (or false $x1432) $x1432)) (= $x1366 $x1432)) $x1427)))
 (let ((@x4895 (unit-resolution (mp ((_ quant-inst 2) $x1421) (trans @x1428 (rewrite (= $x1419 $x1419)) $x1427) $x1419) @x719 $x1432)))
 (let ((@x4896 (unit-resolution (def-axiom (or $x1424 $x1412)) @x4895 $x1412)))
 (let ((@x4897 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1415 $x1442)) @x4896 $x1442)))
 (let (($x1443 (>= ?x1413 (- 6))))
 (let ((@x4900 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1415 $x1443)) @x4896 $x1443)))
 (let ((@x4901 (hypothesis $x3310)))
 (let ((@x4902 (hypothesis $x3311)))
 (let ((?x906 (z 1)))
 (let ((?x1164 (+ ?x906 (* (- 1) ?x1156))))
 (let (($x1193 (<= ?x1164 (- 6))))
 (let (($x1163 (= ?x1164 (- 6))))
 (let ((?x1111 (* ?x906 ?x906)))
 (let ((?x1110 (* (- 1) (inv 1))))
 (let ((?x1108 (* (- 6) ?x906)))
 (let ((?x895 (y 1)))
 (let ((?x1107 (* (- 12) ?x895)))
 (let (($x1166 (not $x1163)))
 (let (($x1175 (or (not (= (+ (n 1) (* (- 1) (n 2))) (- 1))) (not (= (+ (x 1) ?x895 (* (- 1) (x 2))) 0)) (not (= (+ ?x895 ?x906 (* (- 1) ?x1145)) 0)) $x1166 (not (= (+ ?x68 ?x74 ?x148 ?x1107 ?x1108 ?x1110 ?x1111) 0)))))
 (let (($x1183 (not $x1175)))
 (let (($x1170 (or $x801 $x1183)))
 (let (($x1115 (or (not (= (+ (n 1) (* (- 1) (n (+ 1 1)))) (- 1))) (not (= (+ (x 1) ?x895 (* (- 1) (x (+ 1 1)))) 0)) (not (= (+ ?x895 ?x906 (* (- 1) (y (+ 1 1)))) 0)) (not (= (+ ?x906 (* (- 1) (z (+ 1 1)))) (- 6))) (not (= (+ ?x68 ?x74 ?x1107 ?x1108 ?x1110 ?x1111 ?x148) 0)))))
 (let (($x1116 (not $x1115)))
 (let (($x1084 (>= 1 0)))
 (let (($x1085 (not $x1084)))
 (let (($x1117 (or $x1085 $x1116)))
 (let (($x1172 (or $x801 $x1117)))
 (let (($x1178 (= $x1172 $x1170)))
 (let ((@x1123 (trans (monotonicity (rewrite (= $x1084 true)) (= $x1085 (not true))) @x871 (= $x1085 false))))
 (let ((@x1146 (monotonicity @x1123 (rewrite (= $x1116 $x1183)) (= $x1117 (or false $x1183)))))
 (let ((@x1179 (monotonicity (trans @x1146 (rewrite (= (or false $x1183) $x1183)) (= $x1117 $x1183)) $x1178)))
 (let ((@x4905 (unit-resolution (mp ((_ quant-inst 1) $x1172) (trans @x1179 (rewrite (= $x1170 $x1170)) $x1178) $x1170) @x719 $x1183)))
 (let ((@x4906 (unit-resolution (def-axiom (or $x1175 $x1163)) @x4905 $x1163)))
 (let ((@x4907 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1166 $x1193)) @x4906 $x1193)))
 (let (($x1194 (>= ?x1164 (- 6))))
 (let ((@x4910 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1166 $x1194)) @x4906 $x1194)))
 (let (($x947 (<= ?x914 (- 6))))
 (let ((@x4913 (unit-resolution (def-axiom (or $x934 $x913)) @x4865 $x913)))
 (let ((@x4914 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x916 $x947)) @x4913 $x947)))
 (let (($x948 (>= ?x914 (- 6))))
 (let ((@x4917 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x916 $x948)) @x4913 $x948)))
 (let ((@x4920 ((_ th-lemma arith) (hypothesis (not $x3330)) @x4917 @x4914 @x4902 @x4901 @x4910 @x4907 @x4917 @x4914 @x4917 @x4914 @x4917 @x4914 @x4917 @x4914 @x4917 @x4914 @x4917 @x4914 @x4917 @x4914 @x4917 @x4914 @x4860 @x4859 @x4860 @x4859 @x4872 @x4871 @x4900 @x4897 @x4910 @x4907 @x4910 @x4907 @x4910 @x4907 @x4910 @x4907 @x4910 @x4907 @x4910 @x4907 @x4910 @x4907 @x4902 @x4901 @x4902 @x4901 @x4884 @x4883 @x4892 @x4889 @x4900 @x4897 @x4900 @x4897 @x4900 @x4897 @x4900 @x4897 @x4900 @x4897 @x4900 @x4897 @x4872 @x4871 @x4884 @x4883 @x4874 @x4873 @x4882 @x4879 @x4892 @x4889 @x4892 @x4889 @x4892 @x4889 @x4892 @x4889 @x4892 @x4889 @x4884 @x4883 @x4874 @x4873 @x4870 @x4867 @x4858 @x4855 @x4882 @x4879 @x4882 @x4879 @x4882 @x4879 @x4882 @x4879 @x4870 @x4867 @x4874 @x4873 @x4872 @x4871 @x4870 @x4867 (hypothesis $x3186) (hypothesis $x3185) @x4860 @x4859 @x4850 @x4847 @x4858 @x4855 @x4858 @x4855 @x4858 @x4855 @x4834 @x4831 @x4850 @x4847 @x4850 @x4847 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2907 $x2935)) @x4838 $x2935) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2907 $x2934)) @x4838 $x2934) @x4834 @x4831 false)))
 (let ((@x5712 (unit-resolution (lemma @x4920 $x4933) @x5704 @x5701 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3149 $x3182)) @x5705 $x3182) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3149 $x3181)) @x5705 $x3181) @x5683 @x5680 @x5697 @x5694 @x5690 @x5687 @x4825 @x4822 $x3330)))
 (let ((@x5718 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x254 (not $x3330) $x5713)) (unit-resolution (def-axiom (or $x255 (not $x254))) @x4815 (not $x254)) (or (not $x3330) $x5713))))
 (let ((@x5720 ((_ th-lemma arith) (unit-resolution @x5718 @x5712 $x5713) @x5704 @x5701 @x5683 @x5680 @x5704 @x5701 @x5697 @x5694 @x5697 @x5694 @x4825 @x4822 @x5690 @x5687 @x5690 @x5687 @x5683 @x5680 @x4825 @x4822 false)))
 (let (($x733 (or $x133 $x256 $x720)))
 (let (($x727 (or $x133 $x720 $x256)))
 (let (($x200 (forall ((i Int) )(! (let ((?x64 (inv i)))
 (let (($x194 (= ?x64 0)))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (or $x145 $x194))))) :qid k!69))
 ))
 (let (($x273 (or $x133 $x200 $x256)))
 (let (($x260 (or $x133 $x256)))
 (let (($x269 (or $x260 $x200)))
 (let (($x204 (forall ((i Int) )(! (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (or $x145 (not (= (inv i) 0)) (= (inv (+ 1 i)) 0)))) :qid k!87))
 ))
 (let (($x176 (and $x201 $x204)))
 (let (($x182 (not $x176)))
 (let (($x183 (or $x182 $x200)))
 (let ((?x265 (lambda ((i Int) )(let ((?x64 (inv i)))
 (let (($x194 (= ?x64 0)))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (let (($x197 (or $x145 $x194)))
 (refl (~ $x197 $x197))))))))
 ))
 (let ((@x262 (nnf-neg (refl (~ $x133 $x133)) (sk (~ (not $x204) $x256)) (~ $x182 $x260))))
 (let ((@x271 (monotonicity @x262 (nnf-pos (proof-bind ?x265) (~ $x200 $x200)) (~ $x183 $x269))))
 (let (($x120 (= $x183 $x183)))
 (let ((@x123 (monotonicity (monotonicity (rewrite (= $x176 $x176)) (= $x182 $x182)) $x120)))
 (let (($x177 (forall ((i Int) )(! (let ((?x64 (inv i)))
 (let (($x194 (= ?x64 0)))
 (let (($x44 (>= i 0)))
 (=> $x44 $x194)))) :qid k!69))
 ))
 (let (($x173 (forall ((i Int) )(! (let (($x44 (>= i 0)))
 (=> (and $x44 (= (inv i) 0)) (= (inv (+ i 1)) 0))) :qid k!87))
 ))
 (let (($x165 (and $x201 $x173)))
 (let (($x174 (=> $x165 $x177)))
 (let ((?x180 (lambda ((i Int) )(let ((?x64 (inv i)))
 (let (($x194 (= ?x64 0)))
 (let (($x44 (>= i 0)))
 (let (($x145 (not $x44)))
 (let (($x197 (or $x145 $x194)))
 (let (($x195 (=> $x44 $x194)))
 (rewrite (= $x195 $x197)))))))))
 ))
 (let ((@x166 (quant-intro (proof-bind ?x180) (= $x177 $x200))))
 (let ((@x190 (trans (monotonicity (rewrite (= $x165 $x176)) @x166 (= $x174 (=> $x176 $x200))) (rewrite (= (=> $x176 $x200) $x183)) (= $x174 $x183))))
 (let ((@x191 (mp (asserted $x174) @x190 $x183)))
 (let ((@x252 (mp (mp (mp (mp @x191 @x123 $x183) (rewrite $x120) $x183) @x123 $x183) @x123 $x183)))
 (let ((@x729 (mp (mp (mp~ @x252 @x271 $x269) (rewrite (= $x269 $x273)) $x273) (rewrite (= $x273 $x727)) $x727)))
 (let ((@x4429 (unit-resolution (mp @x729 (rewrite (= $x727 $x733)) $x733) (unit-resolution (def-axiom (or $x934 $x201)) @x4865 $x201) (or $x256 $x720))))
 (let (($x97 (= (inv i!0) 0)))
 (let (($x248 (>= i!0 0)))
 (let (($x140 (not $x248)))
 (let (($x98 (or $x140 $x97)))
 (let (($x230 (not $x98)))
 (let (($x84 (not $x200)))
 (let ((@x116 (rewrite (= $x84 $x84))))
 (let ((@x198 (mp (asserted (not $x177)) (rewrite (= (not $x177) $x84)) $x84)))
 (let ((@x106 (mp~ (mp (mp (mp (mp @x198 @x116 $x84) @x116 $x84) @x116 $x84) @x116 $x84) (sk (~ $x84 $x230)) $x230)))
 (let (($x3189 (not $x720)))
 (let (($x3190 (or $x3189 $x140 $x97)))
 (let ((@x3316 (mp ((_ quant-inst i!0) (or $x3189 $x98)) (rewrite (= (or $x3189 $x98) $x3190)) $x3190)))
 (unit-resolution @x3316 (not-or-elim @x106 $x248) (not-or-elim @x106 (not $x97)) (unit-resolution @x4429 (lemma @x5720 $x255) $x720) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                   211
 :arith-assert-diseq          2
 :arith-assert-lower          277
 :arith-assert-upper          217
 :arith-branch-var            1
 :arith-conflicts             2
 :arith-eq-adapter            227
 :arith-gcd-tests             86
 :arith-grobner               2
 :arith-ineq-splits           1
 :arith-max-min               496
 :arith-nonlinear-bounds      63
 :arith-nonlinear-horner      87
 :arith-num-rows              221
 :arith-patches               3
 :arith-patches_succ          2
 :arith-pivots                360
 :arith-row-summations        2053
 :arith-tableau-max-columns   486
 :arith-tableau-max-rows      221
 :conflicts                   3
 :decisions                   5
 :del-clause                  1091
 :eliminated-vars             4
 :final-checks                9
 :lazy-quant-instantiations   12
 :max-generation              13
 :max-memory                  21.64
 :max-missed-qa-cost          11.00
 :memory                      19.53
 :min-missed-qa-cost          11.00
 :missed-quant-instantiations 4
 :mk-bool-var                 770
 :mk-clause                   1165
 :num-allocs                  2116280
 :num-checks                  1
 :propagations                637
 :quant-instantiations        58
 :rlimit-count                195607
 :time                        0.03
 :total-time                  0.05)
