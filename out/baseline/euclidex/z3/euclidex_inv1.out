unsat
((set-logic NIA)
(proof
(let (($x357 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x41 (* q00 r00)))
 (let ((?x185 (* (- 1) ?x41)))
 (let ((?x37 (* p00 s00)))
 (let ((?x362 (* (+ q (* (- 1) p)) r)))
 (let (($x177 (= (+ ?x362 (* (- 1) (* (+ s (* (- 1) r)) p)) ?x37 ?x185) 0)))
 (let (($x291 (not $x177)))
 (let ((?x304 (* (+ r (* (- 1) s)) q)))
 (let (($x122 (= (+ ?x304 (* (- 1) (* (+ p (* (- 1) q)) s)) ?x37 ?x185) 0)))
 (let (($x223 (not $x122)))
 (let (($x220 (or $x223 $x291)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x280 (* p00 s00 a)))
 (let ((?x196 (* b00 r00 p)))
 (let ((?x274 (+ ?x196 ?x280 (* (- 1) (* b00 p00 r)) (* (- 1) (* q00 r00 a)) (* (- 1) (* a00 s00 p)) ?x69)))
 (let (($x226 (= ?x274 0)))
 (let ((?x57 (* b00 p00)))
 (let ((?x340 (* q a)))
 (let (($x119 (= (+ ?x340 (* (- 1) (* a00 q00)) ?x57 (* (- 1) (* b p))) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x180 (* (- 1) ?x51)))
 (let ((?x302 (* s a)))
 (let ((?x264 (* (- 1) ?x302)))
 (let ((?x47 (* a00 s00)))
 (let ((?x323 (* r b)))
 (let ((?x278 (+ ?x323 ?x47 ?x264 ?x180)))
 (let (($x200 (= ?x278 0)))
 (let ((?x343 (* s p)))
 (let ((?x183 (* (- 1) ?x343)))
 (let ((?x337 (* r q)))
 (let ((?x184 (+ ?x337 ?x183 ?x37 ?x185)))
 (let (($x339 (= ?x184 0)))
 (and $x339 $x200 $x119 $x226 $x224 $x220))))))))))))))))))))))))))))))))))) :qid k!38))
 ))
 (let (($x444 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! false :qid k!38))
 ))
 (let ((?x445 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x41 (* q00 r00)))
 (let ((?x185 (* (- 1) ?x41)))
 (let ((?x37 (* p00 s00)))
 (let ((?x362 (* (+ q (* (- 1) p)) r)))
 (let (($x177 (= (+ ?x362 (* (- 1) (* (+ s (* (- 1) r)) p)) ?x37 ?x185) 0)))
 (let (($x291 (not $x177)))
 (let ((?x304 (* (+ r (* (- 1) s)) q)))
 (let (($x122 (= (+ ?x304 (* (- 1) (* (+ p (* (- 1) q)) s)) ?x37 ?x185) 0)))
 (let (($x223 (not $x122)))
 (let (($x220 (or $x223 $x291)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x280 (* p00 s00 a)))
 (let ((?x196 (* b00 r00 p)))
 (let ((?x274 (+ ?x196 ?x280 (* (- 1) (* b00 p00 r)) (* (- 1) (* q00 r00 a)) (* (- 1) (* a00 s00 p)) ?x69)))
 (let (($x226 (= ?x274 0)))
 (let ((?x57 (* b00 p00)))
 (let ((?x340 (* q a)))
 (let (($x119 (= (+ ?x340 (* (- 1) (* a00 q00)) ?x57 (* (- 1) (* b p))) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x180 (* (- 1) ?x51)))
 (let ((?x302 (* s a)))
 (let ((?x264 (* (- 1) ?x302)))
 (let ((?x47 (* a00 s00)))
 (let ((?x323 (* r b)))
 (let ((?x278 (+ ?x323 ?x47 ?x264 ?x180)))
 (let (($x200 (= ?x278 0)))
 (let ((?x343 (* s p)))
 (let ((?x183 (* (- 1) ?x343)))
 (let ((?x337 (* r q)))
 (let ((?x184 (+ ?x337 ?x183 ?x37 ?x185)))
 (let (($x339 (= ?x184 0)))
 (let (($x293 (and $x339 $x200 $x119 $x226 $x224 $x220)))
 (let (($x148 (= (+ (* p s) (* (- 1) ?x37) ?x41 (* (- 1) (* q r))) 0)))
 (let (($x395 (not $x148)))
 (let ((?x72 (* b q00 r00)))
 (let ((?x300 (+ ?x72 (* (- 1) (* b p00 s00)) (* s p00 b00) (* (- 1) (* q r00 b00)) (* q s00 a00) (* (- 1) (* s q00 a00)))))
 (let (($x305 (= ?x300 0)))
 (let ((?x63 (* a p00 s00)))
 (let ((?x236 (+ ?x63 (* (- 1) (* a q00 r00)) (* p r00 b00) (* (- 1) (* r p00 b00)) (* (- 1) (* p s00 a00)) (* r q00 a00))))
 (let (($x237 (= ?x236 0)))
 (let ((?x170 (+ (* a q) (* (- 1) (* q00 a00)) (* p00 b00) (* (- 1) (* p b)))))
 (let (($x171 (= ?x170 0)))
 (let ((?x138 (* r00 b00)))
 (let ((?x49 (* a s)))
 (let (($x153 (= (+ ?x49 (* (- 1) (* b r)) (* (- 1) (* s00 a00)) ?x138) 0)))
 (let (($x434 (and $x148 $x153 $x171 $x237 $x305 $x395)))
 (let ((@x427 (monotonicity (rewrite (= $x223 $x395)) (rewrite (= $x291 $x395)) (= $x220 (or $x395 $x395)))))
 (let ((?x232 (* (- 1) ?x138)))
 (let ((?x120 (* s00 a00)))
 (let ((?x114 (* b r)))
 (let ((?x253 (* (- 1) ?x49)))
 (let ((?x111 (+ ?x253 ?x114 ?x120 ?x232)))
 (let (($x140 (= ?x111 0)))
 (let ((@x110 (monotonicity (rewrite (= ?x323 ?x114)) (rewrite (= ?x47 ?x120)) (rewrite (= ?x264 ?x253)) (rewrite (= ?x180 ?x232)) (= ?x278 (+ ?x114 ?x120 ?x253 ?x232)))))
 (let ((@x139 (trans @x110 (rewrite (= (+ ?x114 ?x120 ?x253 ?x232) ?x111)) (= ?x278 ?x111))))
 (let ((@x158 (trans (monotonicity @x139 (= $x200 $x140)) (rewrite (= $x140 $x153)) (= $x200 $x153))))
 (let ((?x112 (* q r)))
 (let ((?x33 (* p s)))
 (let ((?x209 (* (- 1) ?x33)))
 (let ((?x322 (+ ?x209 ?x37 ?x185 ?x112)))
 (let (($x364 (= ?x322 0)))
 (let ((@x221 (monotonicity (rewrite (= ?x337 ?x112)) (rewrite (= ?x183 ?x209)) (= ?x184 (+ ?x112 ?x209 ?x37 ?x185)))))
 (let ((@x178 (trans @x221 (rewrite (= (+ ?x112 ?x209 ?x37 ?x185) ?x322)) (= ?x184 ?x322))))
 (let ((@x186 (trans (monotonicity @x178 (= $x339 $x364)) (rewrite (= $x364 $x148)) (= $x339 $x148))))
 (let ((@x438 (monotonicity @x186 @x158 (rewrite (= $x119 $x171)) (rewrite (= $x226 $x237)) (rewrite (= $x224 $x305)) (trans @x427 (rewrite (= (or $x395 $x395) $x395)) (= $x220 $x395)) (= $x293 $x434))))
 (trans @x438 (rewrite (= $x434 false)) (= $x293 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x454 (trans (quant-intro (proof-bind ?x445) (= $x357 $x444)) (elim-unused (= $x444 false)) (= $x357 false))))
 (let (($x126 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x214 (* (+ s (* (- 1) r)) p)))
 (let (($x241 (= (+ (* (- 1) (* (+ q (* (- 1) p)) r)) ?x214 ?x129 ?x41) 0)))
 (let ((?x306 (* (+ p (* (- 1) q)) s)))
 (let (($x205 (= (+ (* (- 1) (* (+ r (* (- 1) s)) q)) ?x306 ?x129 ?x41) 0)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x262 (* a00 s00 p)))
 (let ((?x332 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x263 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 ?x332 ?x262 (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x363 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x302 (* s a)))
 (let (($x297 (= (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) ?x302 ?x51) 0)))
 (and (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0) $x297 $x363 (= ?x263 0) $x224 (or (not $x205) (not $x241))))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x317 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x41 (* q00 r00)))
 (let ((?x185 (* (- 1) ?x41)))
 (let ((?x37 (* p00 s00)))
 (let ((?x362 (* (+ q (* (- 1) p)) r)))
 (let (($x177 (= (+ ?x362 (* (- 1) (* (+ s (* (- 1) r)) p)) ?x37 ?x185) 0)))
 (let (($x291 (not $x177)))
 (let ((?x304 (* (+ r (* (- 1) s)) q)))
 (let (($x122 (= (+ ?x304 (* (- 1) (* (+ p (* (- 1) q)) s)) ?x37 ?x185) 0)))
 (let (($x223 (not $x122)))
 (let (($x220 (or $x223 $x291)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x280 (* p00 s00 a)))
 (let ((?x196 (* b00 r00 p)))
 (let ((?x274 (+ ?x196 ?x280 (* (- 1) (* b00 p00 r)) (* (- 1) (* q00 r00 a)) (* (- 1) (* a00 s00 p)) ?x69)))
 (let (($x226 (= ?x274 0)))
 (let ((?x57 (* b00 p00)))
 (let ((?x340 (* q a)))
 (let (($x119 (= (+ ?x340 (* (- 1) (* a00 q00)) ?x57 (* (- 1) (* b p))) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x180 (* (- 1) ?x51)))
 (let ((?x302 (* s a)))
 (let ((?x264 (* (- 1) ?x302)))
 (let ((?x47 (* a00 s00)))
 (let ((?x323 (* r b)))
 (let ((?x278 (+ ?x323 ?x47 ?x264 ?x180)))
 (let (($x200 (= ?x278 0)))
 (let ((?x343 (* s p)))
 (let ((?x183 (* (- 1) ?x343)))
 (let ((?x337 (* r q)))
 (let ((?x184 (+ ?x337 ?x183 ?x37 ?x185)))
 (let (($x339 (= ?x184 0)))
 (let (($x293 (and $x339 $x200 $x119 $x226 $x224 $x220)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x214 (* (+ s (* (- 1) r)) p)))
 (let (($x205 (= (+ (* (- 1) ?x304) (* (+ p (* (- 1) q)) s) ?x129 ?x41) 0)))
 (let ((?x262 (* a00 s00 p)))
 (let ((?x332 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let (($x308 (= (+ (* (- 1) ?x196) (* (- 1) ?x280) ?x65 ?x332 ?x262 (* (- 1) ?x69)) 0)))
 (let (($x363 (= (+ (* (- 1) ?x340) (* a00 q00) (* (- 1) ?x57) (* b p)) 0)))
 (let (($x238 (and (= (+ (* (- 1) ?x337) ?x343 ?x129 ?x41) 0) (= (+ (* (- 1) ?x323) (* (- 1) ?x47) ?x302 ?x51) 0) $x363 $x308 $x224 (or (not $x205) (not (= (+ (* (- 1) ?x362) ?x214 ?x129 ?x41) 0))))))
 (rewrite (= $x238 $x293)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x104 (exists ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(! (let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x98 (- (+ (* (- 1) (- q p) r) (* p (- s r))) ?x37)))
 (let ((?x89 (- (+ (* (- 1) q (- r s)) (* (- p q) s)) ?x37)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x77 (- (+ (* b q00 r00) (* b00 p00 s)) (* b00 q r00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let ((?x59 (* b p)))
 (let ((?x60 (+ (- (+ (* (- 1) a q) (* a00 q00)) (* b00 p00)) ?x59)))
 (let ((?x51 (* b00 r00)))
 (let ((?x49 (* a s)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) ?x49 ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (and $x44 $x53 (= ?x60 0) (= (- ?x68 ?x69) 0) (= (- (+ (- ?x77 ?x76) (* a00 q s00)) ?x81) 0) (or (not (= (+ ?x89 ?x41) 0)) (not (= (+ ?x98 ?x41) 0))))))))))))))))))))) :qid k!38))
 ))
 (let ((?x204 (lambda ((p Int) (a Int) (q Int) (b Int) (r Int) (s Int) )(let ((?x41 (* q00 r00)))
 (let ((?x37 (* p00 s00)))
 (let ((?x129 (* (- 1) ?x37)))
 (let ((?x214 (* (+ s (* (- 1) r)) p)))
 (let (($x241 (= (+ (* (- 1) (* (+ q (* (- 1) p)) r)) ?x214 ?x129 ?x41) 0)))
 (let ((?x306 (* (+ p (* (- 1) q)) s)))
 (let (($x205 (= (+ (* (- 1) (* (+ r (* (- 1) s)) q)) ?x306 ?x129 ?x41) 0)))
 (let ((?x73 (* b00 p00 s)))
 (let ((?x217 (+ (* q00 r00 b) ?x73 (* (- 1) (* b00 r00 q)) (* (- 1) (* p00 s00 b)) (* a00 s00 q) (* (- 1) (* a00 q00 s)))))
 (let (($x224 (= ?x217 0)))
 (let ((?x262 (* a00 s00 p)))
 (let ((?x332 (* q00 r00 a)))
 (let ((?x65 (* b00 p00 r)))
 (let ((?x263 (+ (* (- 1) (* b00 r00 p)) (* (- 1) (* p00 s00 a)) ?x65 ?x332 ?x262 (* (- 1) (* a00 q00 r)))))
 (let ((?x59 (* b p)))
 (let ((?x55 (* a00 q00)))
 (let (($x363 (= (+ (* (- 1) (* q a)) ?x55 (* (- 1) (* b00 p00)) ?x59) 0)))
 (let ((?x51 (* b00 r00)))
 (let ((?x302 (* s a)))
 (let (($x297 (= (+ (* (- 1) (* r b)) (* (- 1) (* a00 s00)) ?x302 ?x51) 0)))
 (let (($x238 (and (= (+ (* (- 1) (* r q)) (* s p) ?x129 ?x41) 0) $x297 $x363 (= ?x263 0) $x224 (or (not $x205) (not $x241)))))
 (let ((?x98 (- (+ (* (- 1) (- q p) r) (* p (- s r))) ?x37)))
 (let ((?x89 (- (+ (* (- 1) q (- r s)) (* (- p q) s)) ?x37)))
 (let ((?x81 (* a00 q00 s)))
 (let ((?x76 (* b p00 s00)))
 (let ((?x80 (+ (- (- (+ (* b q00 r00) ?x73) (* b00 q r00)) ?x76) (* a00 q s00))))
 (let ((?x69 (* a00 q00 r)))
 (let ((?x66 (* a q00 r00)))
 (let ((?x68 (+ (- (* (- 1) b00 p r00) (* a p00 s00)) ?x65 ?x66 (* a00 p s00))))
 (let (($x61 (= (+ (- (+ (* (- 1) a q) ?x55) (* b00 p00)) ?x59) 0)))
 (let (($x53 (= (+ (- (* (- 1) b r) (* a00 s00)) (* a s) ?x51) 0)))
 (let (($x44 (= (+ (- (+ (* (- 1) q r) (* p s)) ?x37) ?x41) 0)))
 (let (($x103 (and $x44 $x53 $x61 (= (- ?x68 ?x69) 0) (= (- ?x80 ?x81) 0) (or (not (= (+ ?x89 ?x41) 0)) (not (= (+ ?x98 ?x41) 0))))))
 (rewrite (= $x103 $x238))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x105 (asserted $x104)))
 (let ((@x270 (mp (mp @x105 (quant-intro (proof-bind ?x204) (= $x104 $x126)) $x126) (rewrite (= $x126 $x126)) $x126)))
 (mp (mp @x270 (quant-intro (proof-bind ?x317) (= $x126 $x357)) $x357) @x454 false)))))))))))))

(:max-memory   3.35
 :memory       3.04
 :mk-bool-var  6
 :num-allocs   965925
 :num-checks   1
 :rlimit-count 1029
 :time         0.01
 :total-time   0.01)
