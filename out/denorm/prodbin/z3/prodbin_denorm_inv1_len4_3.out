unsat
((set-logic NIA)
(declare-fun z!0 () Int)
(declare-fun y!1 () Int)
(declare-fun x!2 () Int)
(proof
(let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x112 (+ (* (- 1.0) (to_real (* x00 y00))) ?x115)))
 (let (($x479 (= ?x112 0.0)))
 (let (($x697 (not $x479)))
 (let (($x468 (>= ?x112 0.0)))
 (let ((@x109 (hypothesis $x479)))
 (let ((@x822 ((_ th-lemma arith triangle-eq) (or $x697 $x468))))
 (let (($x540 (<= ?x112 0.0)))
 (let ((@x648 ((_ th-lemma arith triangle-eq) (or $x697 $x540))))
 (let ((?x322 (to_real z!0)))
 (let ((?x319 (to_real y!1)))
 (let ((?x193 (to_real x!2)))
 (let ((?x531 (* ?x193 ?x193 ?x193 ?x319 ?x319 ?x319 ?x322)))
 (let ((?x140 (* (- 8.0) (* ?x193 ?x193 ?x193 ?x322 ?x322))))
 (let ((?x812 (+ (* ?x193 ?x193 ?x193 ?x319 ?x319 ?x319 ?x322 ?x322) ?x140 (* (- 8.0) (* ?x193 ?x193 ?x193 ?x193 ?x319 ?x322)) (* ?x193 ?x193 ?x319 ?x319 ?x322 ?x322) (* (/ 1.0 2.0) (* ?x193 ?x193 ?x319 ?x319 ?x319 ?x322 ?x322)) (* (- 1.0) (* (to_real z00) ?x193 ?x193 ?x319 ?x319 ?x322)) ?x531 (* (- 1.0) (* (to_real z00) ?x193 ?x193 ?x193 ?x319 ?x319 ?x319 ?x322)) (* (- 1.0) (* ?x110 ?x114 ?x193 ?x193 ?x193 ?x319 ?x319 ?x319 ?x322)) (* ?x193 ?x193 ?x193 ?x193 ?x319 ?x319 ?x319 ?x319 ?x322) (* (/ 1.0 2.0) (* ?x193 ?x319 ?x319 ?x322 ?x322 ?x322)) (* (- (/ 1.0 2.0)) (* (to_real z00) ?x193 ?x319 ?x319 ?x322 ?x322)) (* (- 1.0) (* ?x110 ?x114 ?x193 ?x193 ?x319 ?x319 ?x322)) (* 8.0 (* (to_real z00) ?x193 ?x193 ?x193 ?x322)) (* 8.0 (* ?x110 ?x114 ?x193 ?x193 ?x193 ?x322)) (* (- (/ 1.0 2.0)) (* ?x110 ?x114 ?x193 ?x319 ?x319 ?x322 ?x322)))))
 (let (($x405 (>= ?x812 0.0)))
 (let (($x559 (not $x405)))
 (let (($x403 (= 0.0 ?x812)))
 (let (($x422 (not $x403)))
 (let ((@x421 (symm (commutativity (= $x403 (= ?x812 0.0))) (= (= ?x812 0.0) $x403))))
 (let (($x474 (= ?x812 0.0)))
 (let (($x320 (not $x474)))
 (let ((?x386 (* (/ 1.0 2.0) (* ?x193 ?x322 ?x322))))
 (let ((?x383 (* (/ 3.0 2.0) (* ?x193 ?x193 ?x193 ?x319 ?x319))))
 (let ((?x278 (* (- 3.0) (* ?x193 ?x193 ?x193 ?x319))))
 (let ((?x377 (* (- 9.0) (* ?x193 ?x193 ?x193 ?x322))))
 (let ((?x286 (* (- 3.0) (* ?x193 ?x193 ?x193 ?x193 ?x319 ?x319))))
 (let ((?x373 (* (- 9.0) (* ?x193 ?x193 ?x193 ?x193))))
 (let ((?x327 (* ?x193 ?x193 ?x193 ?x193 ?x319 ?x319 ?x319)))
 (let ((?x380 (* (/ 3.0 2.0) (* ?x193 ?x193 ?x193))))
 (let ((?x288 (* 2.0 (* ?x193 ?x193 ?x322))))
 (let ((?x374 (* 3.0 (* ?x193 ?x193 ?x193 ?x193 ?x319))))
 (let ((?x454 (+ (* 2.0 (* ?x193 ?x193 ?x319 ?x319 ?x322)) ?x374 ?x288 ?x380 ?x327 ?x373 ?x286 ?x377 ?x278 ?x383 ?x386 (* (- 4.0) (* ?x193 ?x193 ?x319 ?x322)) ?x531 (* (/ 1.0 2.0) (* ?x193 ?x319 ?x319 ?x322 ?x322)) (* 3.0 (* ?x193 ?x193 ?x193 ?x319 ?x322)) (* (- 1.0) (* ?x193 ?x319 ?x322 ?x322)) (* (- 3.0) (* ?x193 ?x193 ?x193 ?x319 ?x319 ?x322)))))
 (let ((?x637 (* ?x454 (+ (* (- 1.0) (to_real z00)) (* (- 1.0) ?x115) ?x322 (* ?x193 ?x319)))))
 (let (($x619 (= ?x637 0.0)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x347 (* ?x193 ?x319)))
 (let ((?x155 (+ ?x322 ?x347 ?x121 ?x201)))
 (let (($x473 (= ?x155 0.0)))
 (let (($x260 (>= ?x155 0.0)))
 (let ((?x828 (+ (* (- 1.0) (to_real (* y!1 x!2))) ?x347)))
 (let (($x803 (>= ?x828 0.0)))
 (let (($x826 (= 0.0 ?x828)))
 (let ((@x701 (symm (commutativity (= $x826 (= ?x828 0.0))) (= (= ?x828 0.0) $x826))))
 (let ((@x480 (mp ((_ th-lemma arith) (= ?x828 0.0)) @x701 $x826)))
 (let ((?x88 (* x00 y00)))
 (let ((?x162 (+ z00 ?x88 (* (- 1) z!0) (* (- 1) (* y!1 x!2)))))
 (let (($x746 (<= ?x162 0)))
 (let (($x767 (= 0 ?x162)))
 (let ((@x629 (symm (commutativity (= $x767 (= ?x162 0))) (= (= ?x162 0) $x767))))
 (let (($x163 (= ?x162 0)))
 (let (($x553 (not $x619)))
 (let (($x630 (or $x320 $x553)))
 (let (($x609 (and $x163 $x630)))
 (let ((?x513 (* ?x193 ?x193 ?x193 ?x322 ?x319 ?x319 ?x319)))
 (let ((?x389 (+ ?x373 ?x374 ?x286 ?x327 ?x377 (* 3.0 (* ?x193 ?x193 ?x193 ?x322 ?x319)) (* (- 3.0) (* ?x193 ?x193 ?x193 ?x322 ?x319 ?x319)) ?x513 ?x380 ?x278 ?x383 ?x288 (* (- 4.0) (* ?x193 ?x193 ?x322 ?x319)) ?x386 (* 2.0 (* ?x193 ?x193 ?x322 ?x319 ?x319)) (* (- 1.0) (* ?x193 ?x322 ?x322 ?x319)) (* (/ 1.0 2.0) (* ?x193 ?x322 ?x322 ?x319 ?x319)))))
 (let ((?x368 (+ ?x513 ?x140 (* 8.0 (* ?x193 ?x193 ?x193 ?x322 ?x48)) (* 8.0 (* ?x193 ?x193 ?x193 ?x322 ?x110 ?x114)) (* (- 8.0) (* ?x193 ?x193 ?x193 ?x193 ?x322 ?x319)) (* ?x193 ?x193 ?x193 ?x322 ?x322 ?x319 ?x319 ?x319) (* (- 1.0) (* ?x193 ?x193 ?x193 ?x322 ?x48 ?x319 ?x319 ?x319)) (* (- 1.0) (* ?x193 ?x193 ?x193 ?x322 ?x319 ?x319 ?x319 ?x110 ?x114)) (* ?x193 ?x193 ?x193 ?x193 ?x322 ?x319 ?x319 ?x319 ?x319) (* ?x193 ?x193 ?x322 ?x322 ?x319 ?x319) (* (- 1.0) (* ?x193 ?x193 ?x322 ?x48 ?x319 ?x319)) (* (- 1.0) (* ?x193 ?x193 ?x322 ?x319 ?x319 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x193 ?x322 ?x322 ?x322 ?x319 ?x319)) (* (- (/ 1.0 2.0)) (* ?x193 ?x322 ?x322 ?x48 ?x319 ?x319)) (* (- (/ 1.0 2.0)) (* ?x193 ?x322 ?x322 ?x319 ?x319 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x193 ?x193 ?x322 ?x322 ?x319 ?x319 ?x319)))))
 (let (($x395 (or (not (= ?x368 0.0)) (not (= (* ?x389 (+ ?x322 ?x201 ?x121 ?x347)) 0.0)))))
 (let (($x396 (and (= (+ z!0 (* x!2 y!1) (* (- 1) z00) (* (- 1) ?x88)) 0) $x395)))
 (let (($x488 (exists ((x Int) (y Int) (z Int) )(! (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x63 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x514 (* ?x43 ?x43 ?x46 ?x63 ?x63)))
 (let ((?x388 (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63)))
 (let ((?x445 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63))))
 (let ((?x442 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x63))))
 (let ((?x646 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x46))))
 (let ((?x338 (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63 ?x63)))
 (let ((?x434 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63))))
 (let ((?x430 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x63))))
 (let ((?x645 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43))))
 (let ((?x602 (+ ?x645 ?x430 ?x434 ?x338 ?x646 ?x442 ?x445 ?x388 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x63)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x63 ?x63)) (* 2.0 (* ?x43 ?x43 ?x46)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46)) (* 2.0 ?x514) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x63 ?x63)))))
 (let ((?x825 (+ ?x388 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x110 ?x114)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x63)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x48 ?x63 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x110 ?x114)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x63) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x46 ?x48 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x46 ?x63 ?x63 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x63 ?x63 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63)))))
 (let (($x271 (not (= ?x825 0.0))))
 (let (($x128 (or $x271 (not (= (* ?x602 (+ ?x46 ?x201 ?x121 (* ?x43 ?x63))) 0.0)))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (and $x116 $x128)))))))))))))))))))))))) :qid k!28))
 ))
 (let (($x372 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x748 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x728 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x698 (+ ?x46 ?x43)))
 (let ((?x452 (+ (* 2.0 (* ?x43 ?x698 ?x698 ?x728 ?x728)) (* 8.0 (* ?x43 ?x43 ?x43 ?x698 ?x728 ?x728 ?x728)) (* 4.0 (* ?x43 ?x43 ?x698 ?x728 ?x728)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x698)))))
 (let ((?x526 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x63 ?x63 ?x43)) (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) (* ?x46 ?x63 ?x63 ?x43 ?x43) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let (($x503 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x526) 0.0)) (not (= (* ?x452 ?x748) 0.0)))))
 (let (($x727 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (and $x727 $x503)))))))))))))))))) :qid k!28))
 ))
 (let ((?x494 (lambda ((x Int) (y Int) (z Int) )(let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x46 (to_real z)))
 (let ((?x63 (to_real y)))
 (let ((?x43 (to_real x)))
 (let ((?x514 (* ?x43 ?x43 ?x46 ?x63 ?x63)))
 (let ((?x388 (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63)))
 (let ((?x445 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63))))
 (let ((?x442 (* 3.0 (* ?x43 ?x43 ?x43 ?x46 ?x63))))
 (let ((?x646 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x46))))
 (let ((?x338 (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63 ?x63)))
 (let ((?x434 (* (- 3.0) (* ?x43 ?x43 ?x43 ?x43 ?x63 ?x63))))
 (let ((?x430 (* 3.0 (* ?x43 ?x43 ?x43 ?x43 ?x63))))
 (let ((?x645 (* (- 9.0) (* ?x43 ?x43 ?x43 ?x43))))
 (let ((?x602 (+ ?x645 ?x430 ?x434 ?x338 ?x646 ?x442 ?x445 ?x388 (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43)) (* (- 3.0) (* ?x43 ?x43 ?x43 ?x63)) (* (/ 3.0 2.0) (* ?x43 ?x43 ?x43 ?x63 ?x63)) (* 2.0 (* ?x43 ?x43 ?x46)) (* (- 4.0) (* ?x43 ?x43 ?x46 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46)) (* 2.0 ?x514) (* (- 1.0) (* ?x43 ?x46 ?x46 ?x63)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x63 ?x63)))))
 (let ((?x825 (+ ?x388 (* (- 8.0) (* ?x43 ?x43 ?x43 ?x46 ?x46)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x48)) (* 8.0 (* ?x43 ?x43 ?x43 ?x46 ?x110 ?x114)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x63)) (* ?x43 ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x48 ?x63 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x110 ?x114)) (* ?x43 ?x43 ?x43 ?x43 ?x46 ?x63 ?x63 ?x63 ?x63) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63) (* (- 1.0) (* ?x43 ?x43 ?x46 ?x48 ?x63 ?x63)) (* (- 1.0) (* ?x43 ?x43 ?x46 ?x63 ?x63 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x46 ?x46 ?x46 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x48 ?x63 ?x63)) (* (- (/ 1.0 2.0)) (* ?x43 ?x46 ?x46 ?x63 ?x63 ?x110 ?x114)) (* (/ 1.0 2.0) (* ?x43 ?x43 ?x46 ?x46 ?x63 ?x63 ?x63)))))
 (let (($x271 (not (= ?x825 0.0))))
 (let (($x128 (or $x271 (not (= (* ?x602 (+ ?x46 ?x201 ?x121 (* ?x43 ?x63))) 0.0)))))
 (let (($x116 (= (+ z (* x y) (* (- 1) z00) (* (- 1) (* x00 y00))) 0)))
 (let (($x566 (and $x116 $x128)))
 (let ((?x748 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) ?x63)))) ?x46 ?x43 ?x201)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x728 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x698 (+ ?x46 ?x43)))
 (let ((?x452 (+ (* 2.0 (* ?x43 ?x698 ?x698 ?x728 ?x728)) (* 8.0 (* ?x43 ?x43 ?x43 ?x698 ?x728 ?x728 ?x728)) (* 4.0 (* ?x43 ?x43 ?x698 ?x728 ?x728)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x698)))))
 (let ((?x526 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x63 ?x63 ?x43)) (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) (* ?x46 ?x63 ?x63 ?x43 ?x43) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let (($x503 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x526) 0.0)) (not (= (* ?x452 ?x748) 0.0)))))
 (let (($x727 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x695 (and $x727 $x503)))
 (rewrite (= $x695 $x566))))))))))))))))))))))))))))))))))))
 ))
 (let (($x747 (exists ((x Int) (y Int) (z Int) )(! (let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x748 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x728 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x698 (+ ?x46 ?x43)))
 (let ((?x452 (+ (* 2.0 (* ?x43 ?x698 ?x698 ?x728 ?x728)) (* 8.0 (* ?x43 ?x43 ?x43 ?x698 ?x728 ?x728 ?x728)) (* 4.0 (* ?x43 ?x43 ?x698 ?x728 ?x728)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x698)))))
 (let ((?x526 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x63 ?x63 ?x43)) (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) (* ?x46 ?x63 ?x63 ?x43 ?x43) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let (($x503 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x526) 0.0)) (not (= (* ?x452 ?x748) 0.0)))))
 (let (($x641 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (and $x641 $x503)))))))))))))))))) :qid k!28))
 ))
 (let ((?x720 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x748 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x728 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x698 (+ ?x46 ?x43)))
 (let ((?x452 (+ (* 2.0 (* ?x43 ?x698 ?x698 ?x728 ?x728)) (* 8.0 (* ?x43 ?x43 ?x43 ?x698 ?x728 ?x728 ?x728)) (* 4.0 (* ?x43 ?x43 ?x698 ?x728 ?x728)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x698)))))
 (let ((?x526 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x63 ?x63 ?x43)) (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) (* ?x46 ?x63 ?x63 ?x43 ?x43) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let (($x503 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x526) 0.0)) (not (= (* ?x452 ?x748) 0.0)))))
 (let (($x727 (= (+ (* x00 y00) (* (- 1) (* y x)) (* (- 1) z) z00) 0)))
 (let (($x695 (and $x727 $x503)))
 (let (($x641 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x492 (and $x641 $x503)))
 (rewrite (= $x492 $x695)))))))))))))))))))))))
 ))
 (let (($x80 (exists ((x Int) (y Int) (z Int) )(! (let ((?x60 (to_real 0)))
 (let ((?x46 (to_real z)))
 (let ((?x41 (to_real 2)))
 (let ((?x63 (to_real y)))
 (let ((?x64 (/ ?x63 ?x41)))
 (let ((?x43 (to_real x)))
 (let ((?x71 (+ (* ?x41 ?x43 ?x64 ?x64 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x64 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x46))))
 (let ((?x48 (to_real z00)))
 (let ((?x67 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x64) ?x46) ?x48)))
 (let ((?x75 (* ?x67 (- ?x71 (to_real (* 2 x 2 x 2 x z))))))
 (let ((?x50 (+ z x)))
 (let ((?x51 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (+ (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x51) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x59 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (- ?x55 (to_real (* 2 x 2 x 2 x ?x50))))))
 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x59 ?x60)) (not (= ?x75 ?x60))))))))))))))))))))) :qid k!28))
 ))
 (let ((?x734 (lambda ((x Int) (y Int) (z Int) )(let ((?x48 (to_real z00)))
 (let ((?x201 (* (- 1.0) ?x48)))
 (let ((?x43 (to_real x)))
 (let ((?x46 (to_real z)))
 (let ((?x114 (to_real y00)))
 (let ((?x110 (to_real x00)))
 (let ((?x115 (* ?x110 ?x114)))
 (let ((?x121 (* (- 1.0) ?x115)))
 (let ((?x748 (+ ?x121 (* 2.0 (* ?x43 (+ (- (/ 1.0 2.0)) (* (/ 1.0 2.0) (to_real y))))) ?x46 ?x43 ?x201)))
 (let ((?x63 (to_real y)))
 (let ((?x166 (* (/ 1.0 2.0) ?x63)))
 (let ((?x728 (+ (- (/ 1.0 2.0)) ?x166)))
 (let ((?x698 (+ ?x46 ?x43)))
 (let ((?x452 (+ (* 2.0 (* ?x43 ?x698 ?x698 ?x728 ?x728)) (* 8.0 (* ?x43 ?x43 ?x43 ?x698 ?x728 ?x728 ?x728)) (* 4.0 (* ?x43 ?x43 ?x698 ?x728 ?x728)) (* (- 8.0) (* ?x43 ?x43 ?x43 ?x698)))))
 (let ((?x526 (+ (* (/ 1.0 2.0) (* ?x46 ?x46 ?x63 ?x63 ?x43)) (* ?x46 ?x63 ?x63 ?x63 ?x43 ?x43 ?x43) (* ?x46 ?x63 ?x63 ?x43 ?x43) (* (- 8.0) (* ?x46 ?x43 ?x43 ?x43)))))
 (let (($x503 (or (not (= (* (+ ?x121 (* ?x63 ?x43) ?x46 ?x201) ?x526) 0.0)) (not (= (* ?x452 ?x748) 0.0)))))
 (let (($x641 (= (+ (* (- 1) (* x00 y00)) (* y x) z (* (- 1) z00)) 0)))
 (let (($x492 (and $x641 $x503)))
 (let ((?x60 (to_real 0)))
 (let ((?x41 (to_real 2)))
 (let ((?x64 (/ ?x63 ?x41)))
 (let ((?x71 (+ (* ?x41 ?x43 ?x64 ?x64 ?x46 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x64 ?x46) (* ?x41 ?x43 ?x41 ?x43 ?x64 ?x64 ?x46))))
 (let ((?x67 (- (+ (to_real (* (- 1) x00 y00)) (* ?x41 ?x43 ?x64) ?x46) ?x48)))
 (let ((?x75 (* ?x67 (- ?x71 (to_real (* 2 x 2 x 2 x z))))))
 (let ((?x50 (+ z x)))
 (let ((?x51 (to_real ?x50)))
 (let ((?x42 (/ (to_real (- y 1)) ?x41)))
 (let ((?x55 (+ (* ?x41 ?x43 ?x42 ?x42 ?x51 ?x51) (* ?x41 ?x43 ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x42 ?x51) (* ?x41 ?x43 ?x41 ?x43 ?x42 ?x42 ?x51))))
 (let ((?x31 (* (- 1) x00 y00)))
 (let ((?x45 (to_real ?x31)))
 (let ((?x59 (* (- (+ ?x45 (* ?x41 ?x43 ?x42) ?x46 ?x43) ?x48) (- ?x55 (to_real (* 2 x 2 x 2 x ?x50))))))
 (let (($x79 (and (= (- (+ ?x31 (* x y) z) z00) 0) (or (not (= ?x59 ?x60)) (not (= ?x75 ?x60))))))
 (rewrite (= $x79 $x492)))))))))))))))))))))))))))))))))))
 ))
 (let ((@x81 (asserted $x80)))
 (let ((@x768 (mp (mp @x81 (quant-intro (proof-bind ?x734) (= $x80 $x747)) $x747) (rewrite (= $x747 $x747)) $x747)))
 (let ((@x528 (mp (mp @x768 (quant-intro (proof-bind ?x720) (= $x747 $x372)) $x372) (quant-intro (proof-bind ?x494) (= $x372 $x488)) $x488)))
 (let ((@x151 (mp (mp~ @x528 (sk (~ $x488 $x396)) $x396) (rewrite (= $x396 $x609)) $x609)))
 (let ((@x778 (mp (and-elim @x151 $x163) @x629 $x767)))
 (let ((@x807 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x767) $x746)) @x778 $x746)))
 (let ((@x694 ((_ th-lemma arith) @x807 (hypothesis (not $x260)) (unit-resolution @x648 ((_ th-lemma arith) $x479) $x540) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x826) $x803)) @x480 $x803) false)))
 (let (($x143 (<= ?x155 0.0)))
 (let (($x400 (>= ?x162 0)))
 (let ((@x774 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x767) $x400)) @x778 $x400)))
 (let (($x217 (<= ?x828 0.0)))
 (let ((@x426 ((_ th-lemma arith) (hypothesis (not $x143)) (unit-resolution @x822 ((_ th-lemma arith) $x479) $x468) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x826) $x217)) @x480 $x217) @x774 false)))
 (let ((@x706 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x473 (not $x143) (not $x260))) (lemma @x426 $x143) (lemma @x694 $x260) $x473)))
 (let ((@x783 (unit-resolution ((_ th-lemma arith) (or (not $x473) $x619)) (hypothesis $x553) @x706 false)))
 (let ((@x547 (mp (unit-resolution (and-elim @x151 $x630) (lemma @x783 $x619) $x320) (monotonicity @x421 (= $x320 $x422)) $x422)))
 (let (($x404 (<= ?x812 0.0)))
 (let ((@x339 (unit-resolution ((_ th-lemma arith) (or (not $x400) $x404 (not $x746))) @x807 @x774 (hypothesis (not $x404)) false)))
 (let ((@x627 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x403 (not $x404) $x559)) (lemma @x339 $x404) @x547 $x559)))
 (let ((@x118 (unit-resolution ((_ th-lemma arith) (or (not $x400) $x405 (not $x468) (not $x746) (not $x540))) @x807 @x774 @x627 (unit-resolution @x648 @x109 $x540) (unit-resolution @x822 @x109 $x468) false)))
 (let ((@x817 ((_ th-lemma arith) $x479)))
 (unit-resolution @x817 (lemma @x118 $x697) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                      41
 :arith-eq-adapter               41
 :arith-bound-propagations-cheap 47
 :arith-bound-propagations-lp    15
 :arith-branch                   2
 :arith-conflicts                113
 :arith-diseq                    45
 :arith-fixed-eqs                1
 :arith-gcd-calls                8
 :arith-grobner-calls            6
 :arith-grobner-conflicts        2
 :arith-horner-calls             6
 :arith-lower                    94
 :arith-make-feasible            77
 :arith-max-columns              71
 :arith-max-rows                 16
 :arith-nla-explanations         131
 :arith-nla-lemmas               108
 :arith-patches                  8
 :arith-patches-success          6
 :arith-propagations             47
 :arith-upper                    67
 :conflicts                      12
 :decisions                      118
 :del-clause                     207
 :final-checks                   47
 :max-memory                     4.42
 :memory                         3.14
 :mk-bool-var                    288
 :mk-clause                      322
 :num-allocs                     4620095
 :num-checks                     1
 :propagations                   161
 :rlimit-count                   6868
 :time                           0.02
 :total-time                     0.03)
