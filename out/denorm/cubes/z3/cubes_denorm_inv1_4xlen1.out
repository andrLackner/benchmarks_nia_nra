unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(proof
(let ((?x166 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x160 (>= ?x166 (- 6))))
 (let (($x294 (= ?x166 (- 6))))
 (let ((?x118 (+ k!2 m!1)))
 (let ((?x124 (+ 6 m!1)))
 (let ((?x125 (+ 1 n!0)))
 (let ((?x249 (* ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x124 ?x124 ?x124 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 (+ k!2 c!3) (+ (- 6) (* (- 6) n!0) m!1))))
 (let (($x251 (= ?x249 0)))
 (let (($x248 (not $x251)))
 (let (($x128 (= (+ (* 3 (* n!0 n!0)) (* (- 1) k!2) (* 3 n!0)) (- 1))))
 (let (($x244 (= (+ (* k!2 n!0) (* (- 1) k!2) (* 2 n!0) (* (- 3) c!3)) (- 1))))
 (let ((?x247 (* k!2 k!2)))
 (let ((?x358 (+ ?x247 (* (- 9) (* n!0 c!3)) (* (- 5) k!2) (* 9 n!0) (* (- 18) c!3))))
 (let (($x250 (and $x294 (= ?x358 (- 4)) $x244 $x128 $x248)))
 (let ((?x350 (* ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x125 ?x124 ?x124 ?x124 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 ?x118 (+ c!3 k!2) (+ (- 6) m!1 (* (- 6) n!0)))))
 (let (($x328 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let ((?x639 (+ (* 18 c!3) (* 5 k!2) (* (- 9) n!0) (* (- 1) ?x247) (* 9 (* c!3 n!0)))))
 (let (($x346 (and (= (+ m!1 (* (- 6) n!0)) 6) (= ?x639 4) $x328 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not (= ?x350 0)))))
 (let (($x272 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 $x207 $x259 $x297 $x612)))))))))))))))))) :qid k!34))
 ))
 (let (($x362 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x359 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x359 $x205 $x612))))))))))))))))) :qid k!34))
 ))
 (let ((?x163 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x297 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x259 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x207 (= (+ ?x40 ?x44 ?x209 ?x210 (* 9 (* c n))) 4)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x632 (and $x123 $x207 $x259 $x297 $x612)))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x359 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x355 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x359 $x205 $x612)))
 (rewrite (= $x355 $x632))))))))))))))))))))))))
 ))
 (let (($x610 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x612))))))))))))))) :qid k!34))
 ))
 (let ((?x331 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x359 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x210 (* (- 1) ?x49)))
 (let ((?x209 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x355 (and $x123 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x209 ?x210) 4) $x359 $x205 $x612)))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x612)))
 (rewrite (= $x105 $x355))))))))))))))))))))))))
 ))
 (let (($x81 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x69 (+ n 1)))
 (let ((?x72 (+ k m)))
 (let ((?x73 (+ m 6)))
 (let ((?x74 (+ c k)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x73 ?x69 ?x69 ?x69 ?x74 ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x72 ?x72 ?x72 ?x69 ?x69 ?x69 (- 1) ?x69 ?x69)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0)))))))))))))))) :qid k!34))
 ))
 (let ((?x609 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x106 (* (- 6) n)))
 (let ((?x112 (+ (- 6) m ?x106)))
 (let ((?x74 (+ c k)))
 (let ((?x72 (+ k m)))
 (let ((?x356 (+ 6 m)))
 (let ((?x312 (+ 1 n)))
 (let ((?x628 (* ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x312 ?x356 ?x356 ?x356 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x72 ?x74 ?x112)))
 (let (($x612 (not (= ?x628 0))))
 (let (($x205 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x136 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x289 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x123 (= (+ m ?x106) 6)))
 (let (($x105 (and $x123 (= ?x289 (- 4)) $x136 $x205 $x612)))
 (let ((?x69 (+ n 1)))
 (let ((?x73 (+ m 6)))
 (let ((?x76 (* (- (+ (* (- 6) 1) m 6) (* 6 ?x69)) ?x72 ?x73 ?x69 ?x69 ?x69 ?x74 ?x72 ?x72 ?x72 ?x73 ?x73 ?x69 ?x72 ?x72 ?x72 ?x69 ?x69 ?x69 (- 1) ?x69 ?x69)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x80 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= ?x76 0))))))
 (rewrite (= $x80 $x105)))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x354 (mp (mp @x82 (quant-intro (proof-bind ?x609) (= $x81 $x610)) $x610) (rewrite (= $x610 $x610)) $x610)))
 (let ((@x367 (mp (mp @x354 (quant-intro (proof-bind ?x331) (= $x610 $x362)) $x362) (quant-intro (proof-bind ?x163) (= $x362 $x272)) $x272)))
 (let ((@x514 (mp (mp~ @x367 (sk (~ $x272 $x346)) $x346) (rewrite (= $x346 $x250)) $x250)))
 (let ((@x242 (and-elim @x514 $x294)))
 (let ((@x157 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x160)) @x242 $x160)))
 (let (($x139 (<= ?x166 (- 6))))
 (let ((@x624 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x294) $x139)) @x242 $x139)))
 (let (($x90 (not (<= ?x249 0))))
 (let (($x110 (>= ?x249 0)))
 (let ((@x326 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x251 $x90 (not $x110))) (and-elim @x514 $x248) (or $x90 (not $x110)))))
 (let ((@x193 (unit-resolution @x326 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis (not $x110)) @x624 @x157 false) $x110) $x90)))
 ((_ th-lemma arith farkas 1 1 1) @x193 @x624 @x157 false))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        18
 :arith-assert-upper        22
 :arith-branch-var          2
 :arith-conflicts           4
 :arith-eq-adapter          7
 :arith-fixed-eqs           1
 :arith-gcd-tests           6
 :arith-grobner             2
 :arith-ineq-splits         2
 :arith-max-min             91
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    16
 :arith-num-rows            9
 :arith-patches             4
 :arith-patches_succ        1
 :arith-pivots              9
 :arith-pseudo-nonlinear    4
 :arith-row-summations      19
 :arith-tableau-max-columns 29
 :arith-tableau-max-rows    9
 :conflicts                 4
 :decisions                 8
 :del-clause                20
 :final-checks              7
 :max-memory                3.66
 :memory                    3.19
 :mk-bool-var               34
 :mk-clause                 24
 :num-allocs                1154929
 :num-checks                1
 :propagations              12
 :rlimit-count              3159
 :time                      0.01
 :total-time                0.01)
