unsat
((set-logic NIA)
(declare-fun n!0 () Int)
(declare-fun k!2 () Int)
(declare-fun m!1 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x570 (* n!0 n!0)))
 (let ((?x162 (* 3 ?x570)))
 (let ((?x164 (* (- 1) k!2)))
 (let ((?x292 (+ (* 3 n!0) ?x164 ?x162)))
 (let (($x569 (<= ?x292 (- 1))))
 (let (($x134 (= ?x292 (- 1))))
 (let ((?x234 (* 18 (* c!3 m!1 m!1 m!1))))
 (let ((?x479 (* m!1 m!1 m!1)))
 (let ((?x593 (* 36 k!2)))
 (let ((?x594 (* 36 m!1)))
 (let ((?x455 (* 216 (* c!3 k!2))))
 (let ((?x485 (* 216 (* c!3 m!1))))
 (let ((?x448 (* c!3 m!1 m!1 m!1 m!1)))
 (let ((?x441 (* 12 (* m!1 m!1))))
 (let ((?x550 (+ c!3 k!2)))
 (let ((?x179 (+ 6 m!1)))
 (let ((?x262 (+ 1 n!0)))
 (let ((?x387 (* k!2 k!2)))
 (let ((?x254 (* 216 ?x387)))
 (let ((?x177 (+ (* n!0 m!1 m!1 m!1) (* 228 (* m!1 k!2)) (* 109 (* m!1 m!1 k!2)) (* 108 (* c!3 m!1 m!1)) (* 36 (* n!0 m!1)) (* 12 (* n!0 m!1 k!2)) (* 12 (* n!0 m!1 m!1)) (* 108 (* c!3 m!1 k!2)) (* m!1 m!1 m!1 m!1 k!2) (* c!3 m!1 m!1 m!1 k!2) (* n!0 m!1 m!1 k!2) (* 18 (* m!1 m!1 m!1 k!2)) (* 18 (* m!1 m!1 k!2 k!2)) ?x254 (* ?x262 ?x262 ?x262 ?x179 ?x179 ?x179 (+ m!1 k!2) ?x550 ?x550 ?x550) ?x441 ?x448 ?x485 ?x455 ?x594 ?x593 ?x479 ?x234 (* 36 (* n!0 k!2)) (* 18 (* c!3 m!1 m!1 k!2)) (* m!1 m!1 m!1 k!2 k!2) (* 108 (* m!1 k!2 k!2)))))
 (let ((?x377 (* ?x177 (+ 7 (* 9 n!0) (* (- 1) m!1) ?x164 ?x162))))
 (let (($x196 (= ?x377 0)))
 (let (($x198 (not $x196)))
 (let (($x146 (= (+ (* 3 c!3) (* (- 2) n!0) k!2 (* (- 1) (* n!0 k!2))) 1)))
 (let ((?x110 (* 9 (* c!3 n!0))))
 (let ((?x322 (* 5 k!2)))
 (let ((?x157 (* (- 9) n!0)))
 (let ((?x424 (* (- 1) ?x387)))
 (let ((?x266 (* 18 c!3)))
 (let ((?x160 (* (- 1) m!1)))
 (let ((?x476 (+ (* 6 n!0) ?x160)))
 (let (($x94 (= ?x476 (- 6))))
 (let (($x197 (and $x94 (= (+ ?x266 ?x424 ?x157 ?x322 ?x110) 4) $x146 $x134 $x198)))
 (let ((?x163 (+ ?x593 ?x594 ?x254 (* 36 (* k!2 n!0)) (* ?x262 ?x262 ?x262 ?x179 ?x179 ?x179 (+ k!2 m!1) ?x550 ?x550 ?x550) (* 6 (* m!1 6 k!2 c!3)) (* 12 (* m!1 m!1 n!0)) (* 12 (* k!2 m!1 n!0)) (* 36 (* m!1 n!0)) ?x479 (* 73 (* k!2 m!1 m!1)) ?x441 (* 228 (* k!2 m!1)) (* m!1 m!1 m!1 n!0) (* k!2 m!1 m!1 n!0) (* 6 (* m!1 6 k!2 k!2)) (* c!3 k!2 m!1 m!1 m!1) (* k!2 k!2 m!1 m!1 m!1) ?x448 (* k!2 m!1 m!1 m!1 m!1) ?x455 ?x485 (* 72 (* c!3 k!2 m!1)) (* 72 (* k!2 k!2 m!1)) (* 72 (* c!3 m!1 m!1)) (* 18 (* c!3 k!2 m!1 m!1)) (* 6 (* m!1 6 m!1 c!3)) (* 18 (* k!2 k!2 m!1 m!1)) ?x234 (* 18 (* k!2 m!1 m!1 m!1)) (* 6 (* m!1 6 m!1 k!2)))))
 (let (($x326 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x158 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x266 ?x322 ?x157 ?x424 ?x110) 4) $x326 (= (+ k!2 (* (- 3) n!0) (* (- 3) ?x570)) 1) (not (= (* ?x163 (+ 7 ?x164 ?x160 (* 9 n!0) ?x162)) 0)))))
 (let (($x632 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x604 (* 18 (* k m m m))))
 (let ((?x603 (* 18 (* c m m m))))
 (let ((?x602 (* 18 (* k k m m))))
 (let ((?x601 (* 18 (* c k m m))))
 (let ((?x524 (* 216 (* c m))))
 (let ((?x517 (* 216 (* c k))))
 (let ((?x509 (* k m m m m)))
 (let ((?x508 (* c m m m m)))
 (let ((?x507 (* k k m m m)))
 (let ((?x506 (* c k m m m)))
 (let ((?x475 (* k m m n)))
 (let ((?x474 (* m m m n)))
 (let ((?x618 (* 228 (* k m))))
 (let ((?x419 (* 12 (* m m))))
 (let ((?x446 (* m m m)))
 (let ((?x439 (* 36 (* m n))))
 (let ((?x418 (* 12 (* k m n))))
 (let ((?x417 (* 12 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x324 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x443 (* 36 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x520 (* 216 ?x49)))
 (let ((?x464 (* 36 m)))
 (let ((?x467 (* 36 k)))
 (let ((?x123 (+ ?x467 ?x464 ?x520 ?x443 ?x324 (* 6 (* m 6 k c)) ?x417 ?x418 ?x439 ?x446 (* 73 (* k m m)) ?x419 ?x618 ?x474 ?x475 (* 6 (* m 6 k k)) ?x506 ?x507 ?x508 ?x509 ?x517 ?x524 (* 72 (* c k m)) (* 72 (* k k m)) (* 72 (* c m m)) ?x601 (* 6 (* m 6 m c)) ?x602 ?x603 ?x604 (* 6 (* m 6 m k)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x207 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x203 (= ?x207 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 $x203 $x255 $x293 (not (= (* ?x123 (+ 7 ?x233 ?x349 ?x48 ?x265)) 0))))))))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x350 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x318 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x324 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x275 (* (+ ?x324 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) ?x318)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x268 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (and $x119 (= ?x268 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1)) (not (= ?x275 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x333 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x264 (* n n)))
 (let ((?x265 (* 3 ?x264)))
 (let ((?x48 (* 9 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x604 (* 18 (* k m m m))))
 (let ((?x603 (* 18 (* c m m m))))
 (let ((?x602 (* 18 (* k k m m))))
 (let ((?x601 (* 18 (* c k m m))))
 (let ((?x524 (* 216 (* c m))))
 (let ((?x517 (* 216 (* c k))))
 (let ((?x509 (* k m m m m)))
 (let ((?x508 (* c m m m m)))
 (let ((?x507 (* k k m m m)))
 (let ((?x506 (* c k m m m)))
 (let ((?x475 (* k m m n)))
 (let ((?x474 (* m m m n)))
 (let ((?x618 (* 228 (* k m))))
 (let ((?x419 (* 12 (* m m))))
 (let ((?x446 (* m m m)))
 (let ((?x439 (* 36 (* m n))))
 (let ((?x418 (* 12 (* k m n))))
 (let ((?x417 (* 12 (* m m n))))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x324 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x55 (* k n)))
 (let ((?x443 (* 36 ?x55)))
 (let ((?x49 (* k k)))
 (let ((?x520 (* 216 ?x49)))
 (let ((?x464 (* 36 m)))
 (let ((?x467 (* 36 k)))
 (let ((?x123 (+ ?x467 ?x464 ?x520 ?x443 ?x324 (* 6 (* m 6 k c)) ?x417 ?x418 ?x439 ?x446 (* 73 (* k m m)) ?x419 ?x618 ?x474 ?x475 (* 6 (* m 6 k k)) ?x506 ?x507 ?x508 ?x509 ?x517 ?x524 (* 72 (* c k m)) (* 72 (* k k m)) (* 72 (* c m m)) ?x601 (* 6 (* m 6 m c)) ?x602 ?x603 ?x604 (* 6 (* m 6 m k)))))
 (let (($x293 (= (+ k (* (- 3) n) (* (- 3) ?x264)) 1)))
 (let (($x255 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let ((?x207 (+ ?x40 ?x44 (* (- 9) n) (* (- 1) ?x49) (* 9 (* c n)))))
 (let (($x203 (= ?x207 4)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x612 (and $x119 $x203 $x255 $x293 (not (= (* ?x123 (+ 7 ?x233 ?x349 ?x48 ?x265)) 0)))))
 (let ((?x275 (* (+ ?x324 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) (+ 4 (* 3 (* ?x301 ?x301)) ?x233 ?x349 (* 3 n)))))
 (let ((?x268 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x351 (and $x119 (= ?x268 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) (= (+ ?x265 ?x233 (* 3 n)) (- 1)) (not (= ?x275 0)))))
 (rewrite (= $x351 $x612)))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x86 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x76 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x75 (+ c k)))
 (let ((?x68 (+ n 1)))
 (let ((?x80 (+ (* ?x75 ?x75 ?x75 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x71 ?x76 ?x76 ?x68) (* ?x75 ?x71 ?x76 ?x76 ?x76))))
 (let (($x82 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x82)))))))))))))))) :qid k!34))
 ))
 (let ((?x104 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x65 (* 3 n)))
 (let ((?x349 (* (- 1) m)))
 (let ((?x233 (* (- 1) k)))
 (let ((?x318 (+ 4 (* 3 (* (+ 1 n) (+ 1 n))) ?x233 ?x349 ?x65)))
 (let ((?x75 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x386 (+ 6 m)))
 (let ((?x301 (+ 1 n)))
 (let ((?x324 (* ?x301 ?x301 ?x301 ?x386 ?x386 ?x386 ?x71 ?x75 ?x75 ?x75)))
 (let ((?x275 (* (+ ?x324 (* ?x301 ?x386 ?x386 ?x71) (* ?x386 ?x386 ?x386 ?x71 ?x75)) ?x318)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x268 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x119 (= (+ m (* (- 6) n)) 6)))
 (let (($x351 (and $x119 (= ?x268 (- 4)) (= (+ (* (- 3) c) (* n k) ?x233 (* 2 n)) (- 1)) (= (+ (* 3 (* n n)) ?x233 ?x65) (- 1)) (not (= ?x275 0)))))
 (let ((?x68 (+ n 1)))
 (let ((?x76 (+ m 6)))
 (let ((?x80 (+ (* ?x75 ?x75 ?x75 ?x71 ?x76 ?x76 ?x76 ?x68 ?x68 ?x68) (* ?x71 ?x76 ?x76 ?x68) (* ?x75 ?x71 ?x76 ?x76 ?x76))))
 (let (($x82 (= (* (+ (- (+ 1 (* 3 ?x68 ?x68)) ?x71) (* 3 ?x68)) ?x80) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x85 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 (= (+ (- (+ 1 (* 3 n n)) k) ?x65) 0) (or (not $x82)))))
 (rewrite (= $x85 $x351)))))))))))))))))))))))))))
 ))
 (let ((@x87 (asserted $x86)))
 (let ((@x489 (mp (mp @x87 (quant-intro (proof-bind ?x104) (= $x86 $x350)) $x350) (rewrite (= $x350 $x350)) $x350)))
 (let ((@x413 (mp~ (mp @x489 (quant-intro (proof-bind ?x333) (= $x350 $x632)) $x632) (sk (~ $x632 $x158)) $x158)))
 (let ((@x514 (mp @x413 (rewrite (= $x158 $x197)) $x197)))
 (let ((@x245 (and-elim @x514 $x134)))
 (let ((@x185 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x134) $x569)) @x245 $x569)))
 (let (($x281 (<= ?x476 (- 6))))
 (let ((@x406 (and-elim @x514 $x94)))
 (let ((@x540 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x281)) @x406 $x281)))
 (let (($x320 (>= ?x292 (- 1))))
 (let ((@x462 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x134) $x320)) @x245 $x320)))
 (let (($x280 (>= ?x476 (- 6))))
 (let ((@x284 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x94) $x280)) @x406 $x280)))
 (let (($x221 (not (<= ?x377 0))))
 (let (($x307 (>= ?x377 0)))
 (let ((@x217 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) (hypothesis (not $x307)) @x284 @x462 @x540 @x185 false) $x307)))
 (let ((@x226 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x196 $x221 (not $x307))) (and-elim @x514 $x198) (or $x221 (not $x307)))))
 ((_ th-lemma arith farkas 1 1 1 1 1) (unit-resolution @x226 @x217 $x221) @x284 @x462 @x540 @x185 false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 5
 :arith-assert-diseq        1
 :arith-assert-lower        24
 :arith-assert-upper        23
 :arith-branch-var          1
 :arith-conflicts           2
 :arith-eq-adapter          5
 :arith-fixed-eqs           1
 :arith-gcd-tests           3
 :arith-ineq-splits         1
 :arith-max-min             147
 :arith-nonlinear-bounds    21
 :arith-num-rows            10
 :arith-patches             2
 :arith-pivots              5
 :arith-pseudo-nonlinear    2
 :arith-row-summations      7
 :arith-tableau-max-columns 59
 :arith-tableau-max-rows    10
 :conflicts                 2
 :decisions                 4
 :del-clause                16
 :final-checks              4
 :max-memory                19.60
 :memory                    19.14
 :mk-bool-var               18
 :mk-clause                 16
 :num-allocs                472775
 :num-checks                1
 :propagations              10
 :rlimit-count              3457
 :time                      0.01
 :total-time                0.02)
