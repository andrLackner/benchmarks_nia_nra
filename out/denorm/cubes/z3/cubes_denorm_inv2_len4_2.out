unsat
((set-logic NIA)
(declare-fun m!1 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun c!3 () Int)
(proof
(let ((?x566 (* 18 (* k!2 m!1 m!1))))
 (let ((?x368 (* 3 (* k!2 k!2 m!1 m!1))))
 (let ((?x393 (* k!2 k!2 k!2 m!1)))
 (let ((?x223 (* 3 (* k!2 m!1 m!1 m!1))))
 (let ((?x388 (* m!1 m!1 m!1 m!1)))
 (let ((?x386 (* 6 (* k!2 k!2 k!2))))
 (let ((?x575 (* 18 (* k!2 k!2 m!1))))
 (let ((?x361 (+ k!2 m!1)))
 (let ((?x403 (+ 6 m!1)))
 (let ((?x429 (+ 1 n!0)))
 (let ((?x380 (* (- 1) (* ?x429 ?x429 ?x403 ?x403 ?x403 ?x361 ?x361 ?x361))))
 (let ((?x345 (+ k!2 c!3)))
 (let ((?x396 (* 6 (* m!1 m!1 m!1))))
 (let ((?x279 (+ ?x396 (* ?x429 ?x429 ?x361 ?x361 ?x361 ?x345 ?x345 ?x345) (* ?x429 ?x403 ?x403 ?x361 ?x345 ?x345 ?x345) ?x380 ?x575 ?x386 ?x388 ?x223 ?x393 ?x368 ?x566)))
 (let (($x654 (<= ?x279 0)))
 (let ((?x321 (* k!2 k!2)))
 (let ((?x431 (* (- 1) ?x321)))
 (let ((?x281 (* c!3 n!0)))
 (let ((?x287 (* 9 ?x281)))
 (let ((?x171 (* (- 9) n!0)))
 (let ((?x432 (* 18 c!3)))
 (let ((?x434 (* 5 k!2)))
 (let ((?x351 (+ ?x434 ?x432 ?x171 ?x287 ?x431)))
 (let (($x515 (<= ?x351 4)))
 (let (($x142 (= ?x351 4)))
 (let ((?x558 (* k!2 n!0)))
 (let ((?x507 (* (- 9) ?x558)))
 (let ((?x397 (* (- 5) m!1)))
 (let ((?x294 (* (- 9) ?x281)))
 (let ((?x505 (* 9 n!0)))
 (let ((?x381 (* (- 27) c!3)))
 (let ((?x235 (* m!1 m!1)))
 (let ((?x293 (* (- 32) k!2)))
 (let ((?x186 (* 2 (* k!2 m!1))))
 (let ((?x328 (* ?x279 (+ 13 ?x186 ?x293 ?x235 ?x381 ?x505 ?x294 ?x321 ?x397 ?x507))))
 (let (($x329 (= ?x328 0)))
 (let (($x117 (not $x329)))
 (let ((?x331 (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0)))))
 (let (($x324 (= ?x331 1)))
 (let ((?x536 (* (- 1) ?x558)))
 (let ((?x280 (* (- 2) n!0)))
 (let ((?x578 (* 3 c!3)))
 (let ((?x352 (+ k!2 ?x578 ?x280 ?x536)))
 (let (($x203 (= ?x352 1)))
 (let ((?x394 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x309 (= ?x394 (- 6))))
 (let (($x333 (and $x309 $x142 $x203 $x324 $x117)))
 (let ((?x157 (+ c!3 k!2)))
 (let ((?x399 (+ (* ?x429 ?x429 ?x361 ?x361 ?x361 ?x157 ?x157 ?x157) (* ?x429 ?x403 ?x403 ?x361 ?x157 ?x157 ?x157) ?x380 ?x566 ?x575 ?x386 ?x388 ?x223 ?x368 ?x393 ?x396)))
 (let (($x418 (= (* ?x399 (+ 13 ?x381 ?x293 ?x397 ?x505 ?x321 ?x507 ?x294 ?x186 ?x235)) 0)))
 (let (($x236 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x432 ?x434 ?x171 ?x431 ?x287) 4) (= (+ ?x578 k!2 ?x280 ?x536) 1) $x324 (not $x418))))
 (let (($x334 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x483 (+ 13 (* (- 27) c) (* (- 32) k) ?x428 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x582 (* 6 (* m m m))))
 (let ((?x552 (* k k k m)))
 (let ((?x598 (* 3 (* k k m m))))
 (let ((?x599 (* 3 (* k m m m))))
 (let ((?x545 (* m m m m)))
 (let ((?x538 (* 6 (* k k k))))
 (let ((?x531 (* k k m)))
 (let ((?x596 (* 18 ?x531)))
 (let ((?x513 (* k m m)))
 (let ((?x597 (* 18 ?x513)))
 (let ((?x72 (+ k m)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x245 (* (+ ?x154 ?x177 ?x159 ?x597 ?x596 ?x538 ?x545 ?x599 ?x598 ?x552 ?x582) ?x483)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x210 $x262 $x300 (not (= ?x245 0))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x231 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x483 (+ 13 (* (- 27) c) (* (- 32) k) ?x428 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x582 (* 6 (* m m m))))
 (let ((?x552 (* k k k m)))
 (let ((?x598 (* 3 (* k k m m))))
 (let ((?x599 (* 3 (* k m m m))))
 (let ((?x545 (* m m m m)))
 (let ((?x538 (* 6 (* k k k))))
 (let ((?x72 (+ k m)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x426 (+ ?x154 ?x177 ?x159 (* 6 (* k m k)) (* 6 (* m k m)) (* 6 (* m k k)) (* 6 (* k m m)) (* 6 (* m m k)) (* 6 (* k k m)) ?x538 ?x545 ?x599 ?x598 ?x552 ?x582)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x210 $x262 $x300 (not (= (* ?x426 ?x483) 0))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x525 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x483 (+ 13 (* (- 27) c) (* (- 32) k) ?x428 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x582 (* 6 (* m m m))))
 (let ((?x552 (* k k k m)))
 (let ((?x598 (* 3 (* k k m m))))
 (let ((?x599 (* 3 (* k m m m))))
 (let ((?x545 (* m m m m)))
 (let ((?x538 (* 6 (* k k k))))
 (let ((?x531 (* k k m)))
 (let ((?x596 (* 18 ?x531)))
 (let ((?x513 (* k m m)))
 (let ((?x597 (* 18 ?x513)))
 (let ((?x72 (+ k m)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x245 (* (+ ?x154 ?x177 ?x159 ?x597 ?x596 ?x538 ?x545 ?x599 ?x598 ?x552 ?x582) ?x483)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x160 (and $x126 $x210 $x262 $x300 (not (= ?x245 0)))))
 (let ((?x426 (+ ?x154 ?x177 ?x159 (* 6 (* k m k)) (* 6 (* m k m)) (* 6 (* m k k)) (* 6 ?x513) (* 6 (* m m k)) (* 6 ?x531) ?x538 ?x545 ?x599 ?x598 ?x552 ?x582)))
 (let (($x274 (and $x126 $x210 $x262 $x300 (not (= (* ?x426 ?x483) 0)))))
 (rewrite (= $x274 $x160))))))))))))))))))))))))))))))))))))
 ))
 (let (($x580 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x535 (* (- 18) c)))
 (let ((?x140 (+ 13 ?x535 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x374 (not (= (* (+ ?x154 ?x177 ?x159 (* ?x490 ?x72 ?x72 ?x72)) ?x140) 0))))
 (let (($x349 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x224 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x224 $x349 $x374)))))))))))))))))))))) :qid k!34))
 ))
 (let ((?x233 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x483 (+ 13 (* (- 27) c) (* (- 32) k) ?x428 ?x48 ?x49 (* (- 9) (* k n)) (* (- 9) (* c n)) (* 2 (* k m)) (* m m))))
 (let ((?x582 (* 6 (* m m m))))
 (let ((?x552 (* k k k m)))
 (let ((?x598 (* 3 (* k k m m))))
 (let ((?x599 (* 3 (* k m m m))))
 (let ((?x545 (* m m m m)))
 (let ((?x538 (* 6 (* k k k))))
 (let ((?x72 (+ k m)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x426 (+ ?x154 ?x177 ?x159 (* 6 (* k m k)) (* 6 (* m k m)) (* 6 (* m k k)) (* 6 (* k m m)) (* 6 (* m m k)) (* 6 (* k k m)) ?x538 ?x545 ?x599 ?x598 ?x552 ?x582)))
 (let (($x300 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x262 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) (* k n))) 1)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x210 (= (+ ?x40 ?x44 ?x212 ?x213 (* 9 (* c n))) 4)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x274 (and $x126 $x210 $x262 $x300 (not (= (* ?x426 ?x483) 0)))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x535 (* (- 18) c)))
 (let ((?x140 (+ 13 ?x535 (* (- 23) k) (* (- 9) (* ?x343 ?x68)) ?x428 ?x48 ?x78)))
 (let (($x374 (not (= (* (+ ?x154 ?x177 ?x159 (* ?x490 ?x72 ?x72 ?x72)) ?x140) 0))))
 (let (($x349 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x224 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x135 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x224 $x349 $x374)))
 (rewrite (= $x135 $x274)))))))))))))))))))))))))))))))))))))
 ))
 (let (($x375 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x535 (* (- 18) c)))
 (let ((?x140 (+ 13 ?x535 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x374 (not (= (* (+ ?x154 ?x177 ?x159 (* ?x490 ?x72 ?x72 ?x72)) ?x140) 0))))
 (let (($x349 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x544 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x475 (= (+ ?x535 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (and $x126 $x475 $x544 $x349 $x374)))))))))))))))))) :qid k!34))
 ))
 (let ((?x553 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x535 (* (- 18) c)))
 (let ((?x140 (+ 13 ?x535 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x374 (not (= (* (+ ?x154 ?x177 ?x159 (* ?x490 ?x72 ?x72 ?x72)) ?x140) 0))))
 (let (($x349 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x224 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x213 (* (- 1) ?x49)))
 (let ((?x212 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x135 (and $x126 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x212 ?x213) 4) $x224 $x349 $x374)))
 (let (($x544 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x475 (= (+ ?x535 (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49) (- 4))))
 (let (($x385 (and $x126 $x475 $x544 $x349 $x374)))
 (rewrite (= $x385 $x135))))))))))))))))))))))))))))
 ))
 (let (($x93 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x72 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (+ (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x81 ?x81 ?x70))))
 (let ((?x87 (+ (- ?x83 (* ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70)) (* ?x72 ?x72 ?x72 ?x81))))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x87) 0))))))))))))))))))) :qid k!34))
 ))
 (let ((?x377 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x72 (+ k m)))
 (let ((?x78 (* ?x72 ?x72)))
 (let ((?x48 (* 9 n)))
 (let ((?x428 (* (- 5) m)))
 (let ((?x535 (* (- 18) c)))
 (let ((?x140 (+ 13 ?x535 (* (- 23) k) (* (- 9) (* (+ 1 n) (+ c k))) ?x428 ?x48 ?x78)))
 (let ((?x490 (+ 6 m)))
 (let ((?x343 (+ 1 n)))
 (let ((?x159 (* (- 1) (* ?x343 ?x343 ?x490 ?x490 ?x490 ?x72 ?x72 ?x72))))
 (let ((?x68 (+ c k)))
 (let ((?x177 (* ?x343 ?x490 ?x490 ?x72 ?x68 ?x68 ?x68)))
 (let ((?x154 (* ?x343 ?x343 ?x72 ?x72 ?x72 ?x68 ?x68 ?x68)))
 (let (($x374 (not (= (* (+ ?x154 ?x177 ?x159 (* ?x490 ?x72 ?x72 ?x72)) ?x140) 0))))
 (let (($x349 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x544 (= (+ (* (- 3) c) (* n k) (* (- 1) k) (* 2 n)) (- 1))))
 (let (($x475 (= (+ ?x535 (* (- 9) (* n c)) (* (- 5) k) ?x48 (* k k)) (- 4))))
 (let (($x126 (= (+ m (* (- 6) n)) 6)))
 (let (($x385 (and $x126 $x475 $x544 $x349 $x374)))
 (let ((?x70 (+ n 1)))
 (let ((?x81 (+ m 6)))
 (let ((?x83 (+ (* ?x68 ?x68 ?x68 ?x72 ?x72 ?x72 ?x70 ?x70) (* ?x68 ?x68 ?x68 ?x72 ?x81 ?x81 ?x70))))
 (let ((?x87 (+ (- ?x83 (* ?x72 ?x72 ?x72 ?x81 ?x81 ?x81 ?x70 ?x70)) (* ?x72 ?x72 ?x72 ?x81))))
 (let ((?x76 (- (- (- (* 4 1) (* 18 ?x68)) (* 9 ?x68 ?x70)) (* 5 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x92 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* (+ ?x76 (* 9 ?x70) ?x78) ?x87) 0))))))
 (rewrite (= $x92 $x385)))))))))))))))))))))))))))))))))
 ))
 (let ((@x94 (asserted $x93)))
 (let ((@x133 (mp (mp @x94 (quant-intro (proof-bind ?x377) (= $x93 $x375)) $x375) (rewrite (= $x375 $x375)) $x375)))
 (let ((@x315 (mp (mp @x133 (quant-intro (proof-bind ?x553) (= $x375 $x580)) $x580) (quant-intro (proof-bind ?x233) (= $x580 $x231)) $x231)))
 (let ((@x503 (mp~ (mp @x315 (quant-intro (proof-bind ?x525) (= $x231 $x334)) $x334) (sk (~ $x334 $x236)) $x236)))
 (let ((@x590 (mp @x503 (rewrite (= $x236 $x333)) $x333)))
 (let ((@x427 (and-elim @x590 $x142)))
 (let ((@x600 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x142) $x515)) @x427 $x515)))
 (let (($x512 (>= ?x351 4)))
 (let ((@x588 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x142) $x512)) @x427 $x512)))
 (let (($x425 (<= ?x394 (- 6))))
 (let ((@x285 (and-elim @x590 $x309)))
 (let ((@x195 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x425)) @x285 $x425)))
 (let (($x227 (>= ?x394 (- 6))))
 (let ((@x112 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x309) $x227)) @x285 $x227)))
 (let (($x460 (<= ?x352 1)))
 (let ((@x359 (and-elim @x590 $x203)))
 (let ((@x595 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x203) $x460)) @x359 $x460)))
 (let (($x383 (>= ?x352 1)))
 (let ((@x551 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x203) $x383)) @x359 $x383)))
 (let (($x232 (<= ?x331 1)))
 (let ((@x344 (and-elim @x590 $x324)))
 (let ((@x192 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x232)) @x344 $x232)))
 (let (($x305 (>= ?x331 1)))
 (let ((@x585 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x324) $x305)) @x344 $x305)))
 (let (($x839 (not (<= ?x328 0))))
 (let (($x398 (>= ?x328 0)))
 (let (($x740 (not $x654)))
 (let (($x810 (= ?x279 0)))
 (let (($x852 (not $x810)))
 (let (($x316 (not $x398)))
 (let ((@x560 (hypothesis $x316)))
 (let (($x830 (>= ?x279 0)))
 (let ((@x809 (hypothesis $x810)))
 (let ((@x849 ((_ th-lemma arith farkas 1 1 1) @x560 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x852 $x830)) @x809 $x830) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x852 $x654)) @x809 $x654) false)))
 (let (($x837 (not $x830)))
 (let ((@x860 (hypothesis $x837)))
 (let ((@x861 ((_ th-lemma arith) @x560 @x860 @x112 @x195 @x588 @x600 @x112 @x195 @x585 @x192 @x112 @x195 @x112 @x195 @x551 @x595 @x112 @x195 @x588 @x600 @x551 @x595 false)))
 (let ((@x691 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x810 $x740 $x837)) (unit-resolution (lemma @x861 (or $x830 $x398)) @x560 $x830) (unit-resolution (lemma @x849 (or $x852 $x398)) @x560 $x852) $x740)))
 (let ((@x875 ((_ th-lemma arith) @x560 @x691 @x551 @x595 @x112 @x195 @x551 @x595 @x112 @x195 @x585 @x192 @x551 @x595 @x585 @x192 @x551 @x595 @x588 @x600 @x112 @x195 @x551 @x595 false)))
 (let ((@x118 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x329 $x839 $x316)) (and-elim @x590 $x117) (or $x839 $x316))))
 (let ((@x834 (unit-resolution @x118 (lemma @x875 $x398) $x839)))
 (let ((@x874 ((_ th-lemma arith) @x834 (hypothesis $x740) @x585 @x192 @x588 @x600 @x551 @x595 @x588 @x600 @x551 @x595 @x551 @x595 @x551 @x595 @x112 @x195 @x551 @x595 @x112 @x195 @x588 @x600 @x588 @x600 @x585 @x192 @x588 @x600 @x551 @x595 @x112 @x195 @x588 @x600 false)))
 (let ((@x835 ((_ th-lemma arith) @x834 @x860 @x551 @x595 @x112 @x195 @x551 @x595 @x585 @x192 @x551 @x595 @x585 @x192 @x588 @x600 @x551 @x595 @x112 @x195 false)))
 ((_ th-lemma arith farkas 1 1 1) @x834 (lemma @x835 $x830) (lemma @x874 $x654) false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 55
 :arith-assert-diseq        14
 :arith-assert-lower        323
 :arith-assert-upper        402
 :arith-bound-prop          2
 :arith-branch-var          15
 :arith-conflicts           31
 :arith-eq-adapter          14
 :arith-fixed-eqs           74
 :arith-gcd-tests           124
 :arith-gomory-cuts         9
 :arith-grobner             30
 :arith-ineq-splits         15
 :arith-max-min             2534
 :arith-nonlinear-bounds    92
 :arith-nonlinear-horner    362
 :arith-num-rows            18
 :arith-patches             31
 :arith-patches_succ        2
 :arith-pivots              564
 :arith-pseudo-nonlinear    68
 :arith-row-summations      3454
 :arith-tableau-max-columns 61
 :arith-tableau-max-rows    18
 :conflicts                 32
 :decisions                 145
 :del-clause                82
 :final-checks              95
 :max-memory                4.02
 :memory                    3.21
 :minimized-lits            3
 :mk-bool-var               199
 :mk-clause                 141
 :num-allocs                13715873
 :num-checks                1
 :propagations              111
 :rlimit-count              369185
 :time                      0.12
 :total-time                0.13)
