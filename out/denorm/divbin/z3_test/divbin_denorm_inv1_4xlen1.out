unsat
((set-logic NRA)
(proof
(let (($x78 (exists ((b Real) (x Real) )(! (let ((?x60 (* (- (/ 1.0 2.0)) b)))
 (let ((?x58 (* x b)))
 (let ((?x59 (* (- 1.0) ?x58)))
 (let ((?x62 (* b00 x00)))
 (let ((?x179 (+ ?x62 r00 ?x59 ?x60)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x64 (* ?x183 b)))
 (let ((?x124 (* (/ 1.0 2.0) ?x64)))
 (let ((?x178 (+ ?x59 ?x60 ?x124)))
 (let ((?x184 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x178 ?x179 ?x179 ?x179 ?x179 ?x179 ?x179 ?x179 ?x179 b b b b b b b b b b b)))
 (let (($x73 (= ?x184 0.0)))
 (not $x73))))))))))))) :qid k!28))
 ))
 (let (($x454 (exists ((b Real) (x Real) )(! false :qid k!28))
 ))
 (let ((?x453 (lambda ((b Real) (x Real) )(let ((?x60 (* (- (/ 1.0 2.0)) b)))
 (let ((?x58 (* x b)))
 (let ((?x59 (* (- 1.0) ?x58)))
 (let ((?x62 (* b00 x00)))
 (let ((?x179 (+ ?x62 r00 ?x59 ?x60)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x64 (* ?x183 b)))
 (let ((?x124 (* (/ 1.0 2.0) ?x64)))
 (let ((?x178 (+ ?x59 ?x60 ?x124)))
 (let ((?x184 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x178 ?x179 ?x179 ?x179 ?x179 ?x179 ?x179 ?x179 ?x179 b b b b b b b b b b b)))
 (let (($x73 (= ?x184 0.0)))
 (let (($x75 (not $x73)))
 (let ((?x470 (+ ?x60 r00 ?x59 ?x62)))
 (let ((?x464 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 0.0 ?x470 ?x470 ?x470 ?x470 ?x470 ?x470 ?x470 ?x470 b b b b b b b b b b b)))
 (let ((@x466 (rewrite (= ?x179 ?x470))))
 (let ((?x88 (* (/ 1.0 2.0) b)))
 (let ((?x468 (+ ?x88 ?x58)))
 (let ((?x199 (+ ?x88 (* (/ 1.0 2.0) (* 2.0 ?x58)))))
 (let ((@x196 (rewrite (= (+ (* 1.0 b) (* ?x45 b)) (+ b (* 2.0 ?x58))))))
 (let ((@x177 (trans (rewrite (= ?x64 (+ (* 1.0 b) (* ?x45 b)))) @x196 (= ?x64 (+ b (* 2.0 ?x58))))))
 (let ((@x204 (trans (monotonicity @x177 (= ?x124 (* (/ 1.0 2.0) (+ b (* 2.0 ?x58))))) (rewrite (= (* (/ 1.0 2.0) (+ b (* 2.0 ?x58))) ?x199)) (= ?x124 ?x199))))
 (let ((@x465 (monotonicity (trans @x204 (rewrite (= ?x199 ?x468)) (= ?x124 ?x468)) (= ?x178 (+ ?x59 ?x60 ?x468)))))
 (let ((@x462 (monotonicity (trans @x465 (rewrite (= (+ ?x59 ?x60 ?x468) 0.0)) (= ?x178 0.0)) @x466 @x466 @x466 @x466 @x466 @x466 @x466 @x466 (= ?x184 ?x464))))
 (let ((@x213 (monotonicity (trans @x462 (rewrite (= ?x464 0.0)) $x73) (= $x73 (= 0.0 0.0)))))
 (let ((@x457 (monotonicity (trans @x213 (rewrite (= (= 0.0 0.0) true)) (= $x73 true)) (= $x75 (not true)))))
 (trans @x457 (rewrite (= (not true) false)) (= $x75 false)))))))))))))))))))))))))))))
 ))
 (let ((@x446 (trans (quant-intro (proof-bind ?x453) (= $x78 $x454)) (elim-unused (= $x454 false)) (= $x78 false))))
 (let (($x110 (exists ((b Real) (r Real) (x Real) )(! (let ((?x79 (* (- 1.0) r00)))
 (let ((?x112 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x171 (+ ?x63 r ?x112 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x115 (+ r ?x112)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x198 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x115 ?x115 ?x115 ?x115 ?x115 ?x115 ?x115 ?x115 ?x171 b b b b b b b b b b b)))
 (let ((?x90 (* x b)))
 (let ((?x163 (+ ?x63 r ?x79 ?x90)))
 (let ((?x61 (* ?x163 x x x x x x x r r r r r r r r b b b b b b b b b b b)))
 (and (= ?x163 0.0) (or (not (= ?x61 0.0)) (not (= ?x198 0.0)))))))))))))))) :qid k!28))
 ))
 (let (($x54 (exists ((b Real) (r Real) (x Real) )(! (let ((?x45 (* 2.0 x)))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x49 (* (+ (- (+ (* (- 1.0) b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x36 ?x36 ?x36 ?x42 ?x42 ?x46 ?x46 ?x36 ?x36 ?x42 ?x42 ?x42 ?x46 ?x46 ?x36 ?x36 ?x36 ?x42 ?x42 ?x46 ?x36 ?x36 ?x36 ?x42 ?x46 ?x46)))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let ((?x39 (* (+ ?x30 (* ?x36 2.0 x)) ?x36 ?x36 ?x36 r r 2.0 x 2.0 x ?x36 ?x36 r r r 2.0 x 2.0 x ?x36 ?x36 ?x36 r r 2.0 x ?x36 ?x36 ?x36 r 2.0 x 2.0 x)))
 (and (= (+ ?x30 (* b x)) 0.0) (or (not (= ?x39 0.0)) (not (= ?x49 0.0))))))))))) :qid k!28))
 ))
 (let ((?x113 (lambda ((b Real) (r Real) (x Real) )(let ((?x79 (* (- 1.0) r00)))
 (let ((?x112 (* (- (/ 1.0 2.0)) b)))
 (let ((?x62 (* b00 x00)))
 (let ((?x63 (* (- 1.0) ?x62)))
 (let ((?x171 (+ ?x63 r ?x112 ?x79 (* (/ 1.0 2.0) (* (+ 1.0 (* 2.0 x)) b)))))
 (let ((?x115 (+ r ?x112)))
 (let ((?x45 (* 2.0 x)))
 (let ((?x183 (+ 1.0 ?x45)))
 (let ((?x198 (* ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x183 ?x115 ?x115 ?x115 ?x115 ?x115 ?x115 ?x115 ?x115 ?x171 b b b b b b b b b b b)))
 (let ((?x90 (* x b)))
 (let ((?x163 (+ ?x63 r ?x79 ?x90)))
 (let ((?x61 (* ?x163 x x x x x x x r r r r r r r r b b b b b b b b b b b)))
 (let (($x485 (and (= ?x163 0.0) (or (not (= ?x61 0.0)) (not (= ?x198 0.0))))))
 (let ((?x46 (+ ?x45 1.0)))
 (let ((?x36 (/ b 2.0)))
 (let ((?x42 (- r ?x36)))
 (let ((?x49 (* (+ (- (+ (* (- 1.0) b00 x00) ?x42) r00) (* ?x36 ?x46)) ?x36 ?x36 ?x36 ?x42 ?x42 ?x46 ?x46 ?x36 ?x36 ?x42 ?x42 ?x42 ?x46 ?x46 ?x36 ?x36 ?x36 ?x42 ?x42 ?x46 ?x36 ?x36 ?x36 ?x42 ?x46 ?x46)))
 (let ((?x30 (- (+ (* (- 1.0) b00 x00) r) r00)))
 (let ((?x39 (* (+ ?x30 (* ?x36 2.0 x)) ?x36 ?x36 ?x36 r r 2.0 x 2.0 x ?x36 ?x36 r r r 2.0 x 2.0 x ?x36 ?x36 ?x36 r r 2.0 x ?x36 ?x36 ?x36 r 2.0 x 2.0 x)))
 (let (($x53 (and (= (+ ?x30 (* b x)) 0.0) (or (not (= ?x39 0.0)) (not (= ?x49 0.0))))))
 (rewrite (= $x53 $x485)))))))))))))))))))))))
 ))
 (let ((@x55 (asserted $x54)))
 (let ((@x186 (mp (mp @x55 (quant-intro (proof-bind ?x113) (= $x54 $x110)) $x110) (rewrite (= $x110 $x78)) $x78)))
 (mp @x186 @x446 false))))))))))))

(:max-memory   17.58
 :memory       17.30
 :num-allocs   57814
 :num-checks   1
 :rlimit-count 525
 :time         0.00
 :total-time   0.01)
