unsat
((set-logic NRA)
(declare-fun a!8 () Real)
(declare-fun d!6 () Real)
(declare-fun b!7 () Real)
(declare-fun y!5 () Real)
(proof
(let ((?x270 (* a00 d!6)))
 (let ((?x1077 (+ ?x270 (* 2.0 (* b!7 y!5)) (* (- 2.0) (* y00 b!7)) (* (- 1.0) (* d!6 a!8)))))
 (let (($x292 (>= ?x1077 0.0)))
 (let (($x573 (= 0.0 ?x1077)))
 (let ((@x701 (symm (commutativity (= $x573 (= ?x1077 0.0))) (= (= ?x1077 0.0) $x573))))
 (let (($x967 (= ?x1077 0.0)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x863 (= (+ ?x30 ?x90 (* 2.0 (* b00 y!5)) (* (- 1.0) (* d00 a!8))) 0.0)))
 (let ((?x929 (* d!6 a!8)))
 (let ((?x448 (* (/ 1.0 2.0) ?x929)))
 (let ((?x871 (* y00 b!7)))
 (let ((?x615 (* b!7 y!5)))
 (let ((?x622 (* (- 1.0) ?x615)))
 (let ((?x311 (* (- (/ 1.0 2.0)) ?x270)))
 (let ((?x1082 (* b!7 b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 d!6)))
 (let ((?x985 (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 a!8 a!8 a!8)))
 (let ((?x960 (* b!7 b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5)))
 (let ((?x838 (* b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 a!8)))
 (let ((?x754 (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 d!6 a!8 a!8 a!8)))
 (let ((?x736 (* b!7 b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 y!5)))
 (let ((?x699 (* b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 a!8 a!8 a!8)))
 (let ((?x693 (* b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 a!8 a!8)))
 (let ((?x627 (* b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 y!5 a!8)))
 (let ((?x576 (* b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 y!5 a!8 a!8)))
 (let ((?x473 (* b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 d!6 a!8 a!8)))
 (let ((?x441 (* b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 a!8)))
 (let ((?x427 (* b!7 b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 a!8 a!8)))
 (let ((?x178 (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 y!5 a!8 a!8 a!8)))
 (let ((?x109 (* b!7 b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5)))
 (let ((?x106 (* b!7 b!7 b!7 b!7 b!7 d!6 d!6 d!6 d!6 d!6 d!6 a!8)))
 (let ((?x526 (+ (* (/ 3.0 512.0) ?x106) (* (/ 1.0 64.0) ?x109) (* (/ 1.0 32.0) (* b!7 b!7 d!6 d!6 d!6 d!6)) (* (/ 3.0 256.0) ?x178) (* (/ 3.0 64.0) ?x427) (* (/ 3.0 64.0) ?x441) (* (/ 3.0 512.0) ?x473) (* (/ 1.0 32.0) (* b!7 d!6 d!6 d!6 d!6 a!8)) (* (/ 1.0 16.0) (* b!7 b!7 d!6 d!6 d!6 y!5)) (* (/ 9.0 256.0) ?x576) (* (/ 9.0 256.0) ?x627) (* (/ 9.0 128.0) ?x693) (* (/ 1.0 64.0) ?x699) (* (/ 3.0 256.0) ?x736) (* (/ 1.0 512.0) ?x754) (* (/ 9.0 128.0) ?x838) (* (/ 3.0 128.0) ?x960) (* (/ 1.0 16.0) (* b!7 d!6 d!6 d!6 y!5 a!8)) (* (/ 3.0 128.0) ?x985) (* (/ 1.0 512.0) ?x1082))))
 (let (($x530 (= (* ?x526 (+ ?x311 ?x622 ?x871 ?x448)) 0.0)))
 (let (($x605 (not $x530)))
 (let ((?x947 (* a00 b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 y!5 a!8 a!8 a!8)))
 (let ((?x703 (* b!7 b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 y!5 a!8 a!8 a!8)))
 (let ((?x425 (* b!7 b!7 b!7 d!6 d!6 d!6 d!6 y!5 y!5 y!5 a!8 a!8 a!8 a!8)))
 (let ((?x329 (* y00 b!7 b!7 b!7 b!7 d!6 d!6 d!6 y!5 y!5 y!5 a!8 a!8 a!8)))
 (let ((?x905 (+ (* (/ 1.0 64.0) ?x329) (* (/ 1.0 32.0) (* b!7 d!6 d!6 d!6 d!6 y!5 a!8 a!8)) (* (/ 1.0 128.0) ?x425) (* (- (/ 1.0 64.0)) ?x703) (* (/ 1.0 16.0) (* y00 b!7 b!7 d!6 d!6 d!6 y!5 a!8)) (* (- (/ 1.0 16.0)) (* b!7 b!7 d!6 d!6 d!6 y!5 y!5 a!8)) (* (- (/ 1.0 128.0)) ?x947) (* (- (/ 1.0 32.0)) (* a00 b!7 d!6 d!6 d!6 d!6 y!5 a!8)))))
 (let (($x696 (= ?x905 0.0)))
 (let (($x426 (not $x696)))
 (let (($x112 (or $x426 $x605)))
 (let (($x499 (and $x112 $x863 (= (+ (* d00 b!7) (* (- 1.0) (* b00 d!6))) 0.0) $x967)))
 (let ((?x357 (+ ?x929 (* (- 2.0) (* y!5 b!7)) (* 2.0 (* b!7 y00)) (* (- 1.0) (* d!6 a00)))))
 (let (($x123 (= (+ ?x30 (* (- 1.0) (* a!8 d00)) ?x90 (* 2.0 (* y!5 b00))) 0.0)))
 (let ((?x892 (* b!7 y00)))
 (let ((?x881 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x447 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x921 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x920 (* d!6 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x919 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x446 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x867 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x913 (* y!5 d!6 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x912 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x500 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x490 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x1025 (* y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x250 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8)))
 (let ((?x477 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 a!8)))
 (let ((?x763 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 b!7 b!7)))
 (let ((?x887 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x778 (+ (* (/ 1.0 64.0) ?x887) (* (/ 1.0 16.0) (* y!5 d!6 d!6 d!6 b!7 a!8)) (* (/ 1.0 64.0) ?x763) (* (/ 3.0 64.0) ?x477) (* (/ 3.0 64.0) ?x250) (* (/ 3.0 128.0) ?x1025) (* (/ 9.0 128.0) ?x490) (* (/ 9.0 128.0) ?x500) (* (/ 3.0 128.0) ?x912) (* (/ 3.0 256.0) ?x913) (* (/ 9.0 256.0) ?x867) (* (/ 9.0 256.0) ?x446) (* (/ 3.0 256.0) ?x919) (* (/ 1.0 512.0) ?x920) (* (/ 3.0 512.0) ?x921) (* (/ 3.0 512.0) ?x447) (* (/ 1.0 512.0) ?x881) (* (/ 1.0 16.0) (* y!5 d!6 d!6 d!6 b!7 b!7)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 b!7 b!7)) (* (/ 1.0 32.0) (* d!6 d!6 d!6 d!6 b!7 a!8)))))
 (let ((?x936 (* ?x778 (+ ?x448 (* (- 1.0) (* y!5 b!7)) ?x892 (* (- (/ 1.0 2.0)) (* d!6 a00))))))
 (let ((?x471 (* y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8 a00)))
 (let ((?x422 (* y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8 a!8 y00)))
 (let ((?x727 (* y!5 y!5 y!5 y!5 d!6 d!6 d!6 b!7 b!7 b!7 b!7 a!8 a!8 a!8)))
 (let ((?x788 (* y!5 y!5 y!5 d!6 d!6 d!6 d!6 b!7 b!7 b!7 a!8 a!8 a!8 a!8)))
 (let ((?x476 (+ (* (/ 1.0 128.0) ?x788) (* (- (/ 1.0 64.0)) ?x727) (* (/ 1.0 64.0) ?x422) (* (- (/ 1.0 128.0)) ?x471) (* (/ 1.0 32.0) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a!8)) (* (- (/ 1.0 16.0)) (* y!5 y!5 d!6 d!6 d!6 b!7 b!7 a!8)) (* (/ 1.0 16.0) (* y!5 d!6 d!6 d!6 b!7 b!7 a!8 y00)) (* (- (/ 1.0 32.0)) (* y!5 d!6 d!6 d!6 d!6 b!7 a!8 a00)))))
 (let (($x221 (and (or (not (= ?x476 0.0)) (not (= ?x936 0.0))) $x123 (= (+ (* b!7 d00) (* (- 1.0) (* d!6 b00))) 0.0) (= ?x357 0.0))))
 (let (($x125 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x108 (* y b)))
 (let ((?x130 (* (- 2.0) ?x108)))
 (let ((?x98 (* d a)))
 (let (($x165 (= (+ ?x98 ?x130 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x122 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x90 (* 2.0 (* y b00))) 0.0)))
 (let ((?x135 (* b y00)))
 (let ((?x172 (* (- 1.0) ?x108)))
 (let ((?x139 (* (/ 1.0 2.0) ?x98)))
 (let ((?x224 (+ ?x139 ?x172 ?x135 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x1048 (* (/ 1.0 512.0) (* d d d d d d b b b a a a))))
 (let ((?x1045 (* (/ 3.0 512.0) (* d d d d d d b b b b a a))))
 (let ((?x1042 (* (/ 3.0 512.0) (* d d d d d d b b b b b a))))
 (let ((?x1038 (* (/ 1.0 512.0) (* d d d d d d b b b b b b))))
 (let ((?x1034 (* (/ 3.0 256.0) (* y d d d d d b b b a a a))))
 (let ((?x1031 (* (/ 9.0 256.0) (* y d d d d d b b b b a a))))
 (let ((?x1028 (* (/ 9.0 256.0) (* y d d d d d b b b b b a))))
 (let ((?x1024 (* (/ 3.0 256.0) (* y d d d d d b b b b b b))))
 (let ((?x1020 (* (/ 3.0 128.0) (* y y d d d d b b b a a a))))
 (let ((?x1017 (* (/ 9.0 128.0) (* y y d d d d b b b b a a))))
 (let ((?x1014 (* (/ 9.0 128.0) (* y y d d d d b b b b b a))))
 (let ((?x1010 (* (/ 3.0 128.0) (* y y d d d d b b b b b b))))
 (let ((?x1006 (* (/ 3.0 64.0) (* y y y d d d b b b b a a))))
 (let ((?x1003 (* (/ 3.0 64.0) (* y y y d d d b b b b b a))))
 (let ((?x982 (* (/ 1.0 64.0) (* y y y d d d b b b b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x1103 (+ ?x244 ?x260 ?x982 ?x1003 ?x1006 ?x1010 ?x1014 ?x1017 ?x1020 ?x1024 ?x1028 ?x1031 ?x1034 ?x1038 ?x1042 ?x1045 ?x1048 (* (/ 1.0 16.0) (* y d d d b b)) (* (/ 1.0 32.0) (* d d d d b b)) (* (/ 1.0 32.0) (* d d d d b a)))))
 (let ((?x301 (* y y y d d d d b b b a a a a00)))
 (let ((?x290 (* y y y d d d b b b b a a a y00)))
 (let ((?x280 (* y y y y d d d b b b b a a a)))
 (let ((?x269 (* y y y d d d d b b b a a a a)))
 (let ((?x349 (+ (* (/ 1.0 128.0) ?x269) (* (- (/ 1.0 64.0)) ?x280) (* (/ 1.0 64.0) ?x290) (* (- (/ 1.0 128.0)) ?x301) (* (/ 1.0 32.0) (* y d d d d b a a)) (* (- (/ 1.0 16.0)) (* y y d d d b b a)) (* (/ 1.0 16.0) (* y d d d b b a y00)) (* (- (/ 1.0 32.0)) (* y d d d d b a a00)))))
 (let (($x115 (not (= ?x349 0.0))))
 (and (or $x115 (not (= (* ?x1103 ?x224) 0.0))) $x122 $x87 $x165))))))))))))))))))))))))))))))))))))) :qid k!33))
 ))
 (let (($x146 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x108 (* y b)))
 (let ((?x130 (* (- 2.0) ?x108)))
 (let ((?x98 (* d a)))
 (let (($x749 (= (+ ?x98 ?x130 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x623 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let (($x890 (= (+ ?x90 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x203 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x1051)))
 (let ((?x596 (* (/ 1.0 16.0) (* (+ a b) (+ y (* (/ 1.0 2.0) d)) d d d b))))
 (let ((?x361 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x495 (* (/ 1.0 64.0) (* ?x66 ?x66 ?x66 ?x361 ?x361 ?x361 d d d b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let (($x1057 (= (* (+ ?x244 ?x260) (+ (* (/ 1.0 2.0) ?x98) (* (- 1.0) ?x108) ?x271 ?x1051)) 0.0)))
 (let (($x611 (or (not $x1057) (not (= (* (+ ?x495 ?x596) ?x203) 0.0)))))
 (and $x611 $x890 $x623 $x749))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x385 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x108 (* y b)))
 (let ((?x130 (* (- 2.0) ?x108)))
 (let ((?x98 (* d a)))
 (let (($x165 (= (+ ?x98 ?x130 (* 2.0 (* b y00)) (* (- 1.0) (* d a00))) 0.0)))
 (let (($x87 (= (+ (* b d00) (* (- 1.0) (* d b00))) 0.0)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let ((?x30 (* a00 d00)))
 (let (($x122 (= (+ ?x30 (* (- 1.0) (* a d00)) ?x90 (* 2.0 (* y b00))) 0.0)))
 (let ((?x135 (* b y00)))
 (let ((?x172 (* (- 1.0) ?x108)))
 (let ((?x139 (* (/ 1.0 2.0) ?x98)))
 (let ((?x224 (+ ?x139 ?x172 ?x135 (* (- (/ 1.0 2.0)) (* d a00)))))
 (let ((?x1048 (* (/ 1.0 512.0) (* d d d d d d b b b a a a))))
 (let ((?x1045 (* (/ 3.0 512.0) (* d d d d d d b b b b a a))))
 (let ((?x1042 (* (/ 3.0 512.0) (* d d d d d d b b b b b a))))
 (let ((?x1038 (* (/ 1.0 512.0) (* d d d d d d b b b b b b))))
 (let ((?x1034 (* (/ 3.0 256.0) (* y d d d d d b b b a a a))))
 (let ((?x1031 (* (/ 9.0 256.0) (* y d d d d d b b b b a a))))
 (let ((?x1028 (* (/ 9.0 256.0) (* y d d d d d b b b b b a))))
 (let ((?x1024 (* (/ 3.0 256.0) (* y d d d d d b b b b b b))))
 (let ((?x1020 (* (/ 3.0 128.0) (* y y d d d d b b b a a a))))
 (let ((?x1017 (* (/ 9.0 128.0) (* y y d d d d b b b b a a))))
 (let ((?x1014 (* (/ 9.0 128.0) (* y y d d d d b b b b b a))))
 (let ((?x1010 (* (/ 3.0 128.0) (* y y d d d d b b b b b b))))
 (let ((?x1006 (* (/ 3.0 64.0) (* y y y d d d b b b b a a))))
 (let ((?x1003 (* (/ 3.0 64.0) (* y y y d d d b b b b b a))))
 (let ((?x982 (* (/ 1.0 64.0) (* y y y d d d b b b b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x1103 (+ ?x244 ?x260 ?x982 ?x1003 ?x1006 ?x1010 ?x1014 ?x1017 ?x1020 ?x1024 ?x1028 ?x1031 ?x1034 ?x1038 ?x1042 ?x1045 ?x1048 (* (/ 1.0 16.0) (* y d d d b b)) (* (/ 1.0 32.0) (* d d d d b b)) (* (/ 1.0 32.0) (* d d d d b a)))))
 (let ((?x301 (* y y y d d d d b b b a a a a00)))
 (let ((?x290 (* y y y d d d b b b b a a a y00)))
 (let ((?x280 (* y y y y d d d b b b b a a a)))
 (let ((?x269 (* y y y d d d d b b b a a a a)))
 (let ((?x349 (+ (* (/ 1.0 128.0) ?x269) (* (- (/ 1.0 64.0)) ?x280) (* (/ 1.0 64.0) ?x290) (* (- (/ 1.0 128.0)) ?x301) (* (/ 1.0 32.0) (* y d d d d b a a)) (* (- (/ 1.0 16.0)) (* y y d d d b b a)) (* (/ 1.0 16.0) (* y d d d b b a y00)) (* (- (/ 1.0 32.0)) (* y d d d d b a a00)))))
 (let (($x115 (not (= ?x349 0.0))))
 (let (($x94 (and (or $x115 (not (= (* ?x1103 ?x224) 0.0))) $x122 $x87 $x165)))
 (let (($x749 (= (+ ?x98 ?x130 (* 2.0 (* y00 b)) (* (- 1.0) (* a00 d))) 0.0)))
 (let (($x623 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let (($x890 (= (+ ?x90 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let ((?x48 (* a00 d)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x203 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x1051)))
 (let ((?x596 (* (/ 1.0 16.0) (* (+ a b) (+ y (* (/ 1.0 2.0) d)) d d d b))))
 (let ((?x361 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x495 (* (/ 1.0 64.0) (* ?x66 ?x66 ?x66 ?x361 ?x361 ?x361 d d d b b b))))
 (let (($x611 (or (not (= (* (+ ?x244 ?x260) (+ ?x139 ?x172 ?x271 ?x1051)) 0.0)) (not (= (* (+ ?x495 ?x596) ?x203) 0.0)))))
 (let (($x831 (and $x611 $x890 $x623 $x749)))
 (rewrite (= $x831 $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x1084 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x48 (* a00 d)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x203 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x1051)))
 (let ((?x596 (* (/ 1.0 16.0) (* (+ a b) (+ y (* (/ 1.0 2.0) d)) d d d b))))
 (let ((?x361 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x495 (* (/ 1.0 64.0) (* ?x66 ?x66 ?x66 ?x361 ?x361 ?x361 d d d b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x918 (* (+ ?x244 ?x260) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x271 ?x1051))))
 (let (($x611 (or (not (= ?x918 0.0)) (not (= (* (+ ?x495 ?x596) ?x203) 0.0)))))
 (let ((?x108 (* y b)))
 (let ((?x130 (* (- 2.0) ?x108)))
 (let ((?x98 (* d a)))
 (let (($x749 (= (+ ?x98 ?x130 (* 2.0 ?x271) (* (- 1.0) ?x48)) 0.0)))
 (let (($x623 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let (($x890 (= (+ ?x90 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (and $x890 $x623 $x749 $x611))))))))))))))))))))) :qid k!33))
 ))
 (let (($x81 (exists ((a Real) (b Real) (d Real) (y Real) )(! (let ((?x51 (/ d 2.0)))
 (let ((?x68 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x66 (+ a b)))
 (let ((?x75 (+ (* ?x66 ?x66 ?x66 ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 ?x68 ?x68 ?x68) (* ?x66 ?x53 ?x51 ?x51 ?x51 ?x68))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x72 (- (+ (- (* ?x66 ?x51) (* 2.0 ?x53 ?x68)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x62 (+ (* a a a ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 y y y) (* a ?x53 ?x51 ?x51 ?x51 y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x48 (* a00 d)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let ((?x30 (* a00 d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x62) 0.0)) (not (= (* ?x72 ?x75) 0.0)))))))))))))))))) :qid k!33))
 ))
 (let ((?x352 (lambda ((a Real) (b Real) (d Real) (y Real) )(let ((?x48 (* a00 d)))
 (let ((?x1051 (* (- (/ 1.0 2.0)) ?x48)))
 (let ((?x271 (* y00 b)))
 (let ((?x203 (+ (* (/ 1.0 2.0) (* (+ a b) d)) (* (- 1.0) (* (+ y (* (/ 1.0 2.0) d)) b)) ?x271 ?x1051)))
 (let ((?x596 (* (/ 1.0 16.0) (* (+ a b) (+ y (* (/ 1.0 2.0) d)) d d d b))))
 (let ((?x361 (+ y (* (/ 1.0 2.0) d))))
 (let ((?x66 (+ a b)))
 (let ((?x495 (* (/ 1.0 64.0) (* ?x66 ?x66 ?x66 ?x361 ?x361 ?x361 d d d b b b))))
 (let ((?x260 (* (/ 1.0 16.0) (* y d d d b a))))
 (let ((?x244 (* (/ 1.0 64.0) (* y y y d d d b b b a a a))))
 (let ((?x918 (* (+ ?x244 ?x260) (+ (* (/ 1.0 2.0) (* d a)) (* (- 1.0) (* y b)) ?x271 ?x1051))))
 (let (($x611 (or (not (= ?x918 0.0)) (not (= (* (+ ?x495 ?x596) ?x203) 0.0)))))
 (let ((?x108 (* y b)))
 (let ((?x130 (* (- 2.0) ?x108)))
 (let ((?x98 (* d a)))
 (let (($x749 (= (+ ?x98 ?x130 (* 2.0 ?x271) (* (- 1.0) ?x48)) 0.0)))
 (let (($x623 (= (+ (* (- 1.0) (* d00 b)) (* b00 d)) 0.0)))
 (let ((?x30 (* a00 d00)))
 (let ((?x90 (* (- 2.0) (* b00 y00))))
 (let (($x890 (= (+ ?x90 ?x30 (* 2.0 (* b00 y)) (* (- 1.0) (* d00 a))) 0.0)))
 (let (($x195 (and $x890 $x623 $x749 $x611)))
 (let ((?x51 (/ d 2.0)))
 (let ((?x68 (+ y ?x51)))
 (let ((?x53 (/ b 2.0)))
 (let ((?x75 (+ (* ?x66 ?x66 ?x66 ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 ?x68 ?x68 ?x68) (* ?x66 ?x53 ?x51 ?x51 ?x51 ?x68))))
 (let ((?x58 (* a00 ?x51)))
 (let ((?x72 (- (+ (- (* ?x66 ?x51) (* 2.0 ?x53 ?x68)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x62 (+ (* a a a ?x53 ?x53 ?x53 ?x51 ?x51 ?x51 y y y) (* a ?x53 ?x51 ?x51 ?x51 y))))
 (let ((?x59 (- (+ (- (* a ?x51) (* 2.0 ?x53 y)) (* 2.0 ?x53 y00)) ?x58)))
 (let ((?x49 (- (+ (- (* a d) (* 2.0 b y)) (* 2.0 b y00)) ?x48)))
 (let ((?x33 (* a d00)))
 (let (($x36 (= (- (+ (* (- 2.0) b00 y00) ?x30 (* 2.0 b00 y)) ?x33) 0.0)))
 (let (($x80 (and $x36 (= (+ (* (- 1.0) b d00) (* b00 d)) 0.0) (= ?x49 0.0) (or (not (= (* ?x59 ?x62) 0.0)) (not (= (* ?x72 ?x75) 0.0))))))
 (rewrite (= $x80 $x195))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x82 (asserted $x81)))
 (let ((@x318 (mp (mp @x82 (quant-intro (proof-bind ?x352) (= $x81 $x1084)) $x1084) (rewrite (= $x1084 $x146)) $x146)))
 (let ((@x164 (mp~ (mp @x318 (quant-intro (proof-bind ?x385) (= $x146 $x125)) $x125) (sk (~ $x125 $x221)) $x221)))
 (let ((@x199 (mp @x164 (rewrite (= $x221 $x499)) $x499)))
 (let ((@x598 (mp (and-elim @x199 $x967) @x701 $x573)))
 (let ((@x923 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x573) $x292)) @x598 $x292)))
 (let (($x578 (<= ?x1077 0.0)))
 (let ((@x899 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x573) $x578)) @x598 $x578)))
 (let (($x683 (>= ?x905 0.0)))
 (let (($x467 (not $x683)))
 (let (($x268 (<= ?x905 0.0)))
 (let ((@x829 (unit-resolution ((_ th-lemma arith) (or (not $x578) $x268 (not $x292))) (hypothesis (not $x268)) @x899 @x923 false)))
 (let (($x119 (= 0.0 ?x905)))
 (let (($x974 (not $x119)))
 (let ((@x972 (monotonicity (symm (commutativity (= $x119 $x696)) (= $x696 $x119)) (= $x426 $x974))))
 (let ((?x1088 (+ ?x448 ?x311 ?x622 ?x871)))
 (let (($x103 (= ?x1088 0.0)))
 (let (($x511 (or (not $x103) $x530)))
 (let ((@x612 (unit-resolution ((_ th-lemma arith) $x511) (hypothesis $x605) (hypothesis $x103) false)))
 (let ((@x265 (unit-resolution (lemma @x612 $x511) (symm ((_ th-lemma arith) @x899 @x923 (= 0.0 ?x1088)) $x103) $x530)))
 (let ((@x950 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x119 (not $x268) $x467)) (mp (unit-resolution (and-elim @x199 $x112) @x265 $x426) @x972 $x974) (or (not $x268) $x467))))
 (unit-resolution ((_ th-lemma arith) (or (not $x578) (not $x292) $x683)) (unit-resolution @x950 (lemma @x829 $x268) $x467) @x899 @x923 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       29
 :arith-eq-adapter                18
 :arith-conflicts                 23
 :arith-diseq                     25
 :arith-grobner-calls             2
 :arith-grobner-conflicts         2
 :arith-horner-calls              2
 :arith-horner-cross-nested-forms 6
 :arith-lower                     24
 :arith-make-feasible             23
 :arith-max-columns               58
 :arith-max-rows                  7
 :arith-nla-explanations          20
 :arith-nla-lemmas                22
 :arith-offset-eqs                3
 :arith-upper                     23
 :conflicts                       5
 :decisions                       24
 :del-clause                      35
 :final-checks                    21
 :max-memory                      19.21
 :memory                          17.40
 :mk-bool-var                     78
 :mk-clause                       68
 :num-allocs                      36108992
 :num-checks                      1
 :propagations                    33
 :rlimit-count                    5450
 :time                            0.09
 :total-time                      0.09)
