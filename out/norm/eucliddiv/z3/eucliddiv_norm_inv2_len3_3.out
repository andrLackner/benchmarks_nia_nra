unsat
((set-logic NIA)
(declare-fun q!2 () Int)
(declare-fun r!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x77 (* y00 q00)))
 (let ((?x581 (+ r00 ?x77 (* (- 1) r!1) (* (- 1) (* y00 q!2)))))
 (let (($x797 (<= ?x581 0)))
 (let (($x740 (= ?x581 0)))
 (let ((?x978 (* y00 y00 y00 r00)))
 (let ((?x293 (* y00 y00 y00 y00 q00)))
 (let ((?x545 (+ ?x293 (* 2 (* r!1 r!1 r!1 q!2)) (* (- 2) (* y00 q00 r!1 r!1 q!2)) (* (- 2) (* y00 y00 y00 r!1 q!2)) (* (- 1) (* y00 y00 y00 r!1)) (* r!1 r!1 r!1 q!2 q!2) (* (- 1) (* y00 y00 y00 r!1 q!2 q!2)) (* 2 (* y00 y00 y00 r00 q!2)) (* (- 1) (* y00 q00 r!1 r!1 q!2 q!2)) (* 4 (* y00 y00 q00 r!1 q!2)) (* 2 (* y00 y00 q00 r!1 q!2 q!2)) (* (- 2) (* y00 y00 y00 q00 q!2)) (* (- 1) (* y00 y00 y00 q00 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 q!2 q!2 q!2)) (* 2 (* y00 y00 r!1 q!2)) (* (- 1) (* y00 y00 r00 q!2 q!2)) (* y00 y00 y00 r00 q!2 q!2) (* y00 y00 y00 y00 q00 q!2 q!2) (* y00 y00 y00 q!2 q!2 q!2) (* (- 2) (* r00 r!1 r!1 q!2)) (* (- 2) (* y00 y00 y00 y00 q!2 q!2)) (* (- 1) (* y00 y00 y00 y00 q!2)) (* 2 (* y00 y00 y00 y00 q00 q!2)) (* (- 4) (* y00 r!1 r!1 q!2)) (* y00 r!1 r!1 q!2 q!2 q!2) (* (- 3) (* y00 y00 r!1 q!2 q!2)) (* (- 2) (* y00 y00 r!1 q!2 q!2 q!2)) (* 2 (* y00 y00 y00 q!2 q!2)) (* (- 1) (* r00 r!1 r!1 q!2 q!2)) (* 4 (* y00 r00 r!1 q!2)) (* 2 (* y00 r00 r!1 q!2 q!2)) (* (- 2) (* y00 y00 r00 q!2)) ?x978)))
 (let (($x537 (= ?x545 0)))
 (let (($x453 (not $x537)))
 (let ((?x786 (+ y00 (* (- 1) y!0))))
 (let (($x787 (= ?x786 0)))
 (let (($x820 (and $x787 $x740 $x453)))
 (let ((?x1011 (* (- 1) ?x978)))
 (let ((?x326 (* (- 1) ?x293)))
 (let ((?x768 (+ (* q!2 y00 y00 y00 y00) (* 2 (* q!2 q!2 y00 y00 y00 y00)) (* q!2 q!2 q!2 y00 y00 y00 y00) ?x326 (* (- 2) (* q!2 y00 y00 y00 y00 q00)) (* (- 1) (* q!2 q!2 y00 y00 y00 y00 q00)) (* 4 (* q!2 r!1 r!1 y00)) (* (- 1) (* q!2 q!2 q!2 r!1 r!1 y00)) (* (- 2) (* q!2 r!1 y00 y00)) (* 3 (* q!2 q!2 r!1 y00 y00)) (* 2 (* q!2 q!2 q!2 r!1 y00 y00)) (* (- 2) (* q!2 q!2 y00 y00 y00)) (* (- 1) (* q!2 q!2 q!2 y00 y00 y00)) (* 2 (* q!2 r!1 r!1 r00)) (* q!2 q!2 r!1 r!1 r00) (* (- 4) (* q!2 r!1 y00 r00)) (* (- 2) (* q!2 q!2 r!1 y00 r00)) (* 2 (* q!2 y00 y00 r00)) (* q!2 q!2 y00 y00 r00) (* (- 2) (* q!2 r!1 r!1 r!1)) (* (- 1) (* q!2 q!2 r!1 r!1 r!1)) (* 2 (* q!2 r!1 y00 y00 y00)) (* r!1 y00 y00 y00) (* q!2 q!2 r!1 y00 y00 y00) ?x1011 (* (- 2) (* q!2 y00 y00 y00 r00)) (* (- 1) (* q!2 q!2 y00 y00 y00 r00)) (* 2 (* q!2 r!1 r!1 y00 q00)) (* q!2 q!2 r!1 r!1 y00 q00) (* (- 4) (* q!2 r!1 y00 y00 q00)) (* (- 2) (* q!2 q!2 r!1 y00 y00 q00)) (* 2 (* q!2 y00 y00 y00 q00)) (* q!2 q!2 y00 y00 y00 q00))))
 (let (($x772 (and (= (+ y!0 (* (- 1) y00)) 0) (= (+ r!1 (* (- 1) r00) (* q!2 y00) (* (- 1) ?x77)) 0) (not (= ?x768 0)))))
 (let (($x82 (exists ((q Int) (r Int) (y Int) )(! (let ((?x978 (* y00 y00 y00 r00)))
 (let ((?x1011 (* (- 1) ?x978)))
 (let ((?x293 (* y00 y00 y00 y00 q00)))
 (let ((?x326 (* (- 1) ?x293)))
 (let ((?x1144 (+ (* q y00 y00 y00 y00) (* 2 (* q q y00 y00 y00 y00)) (* q q q y00 y00 y00 y00) ?x326 (* (- 2) (* q y00 y00 y00 y00 q00)) (* (- 1) (* q q y00 y00 y00 y00 q00)) (* 4 (* q r r y00)) (* (- 1) (* q q q r r y00)) (* (- 2) (* q r y00 y00)) (* 3 (* q q r y00 y00)) (* 2 (* q q q r y00 y00)) (* (- 2) (* q q y00 y00 y00)) (* (- 1) (* q q q y00 y00 y00)) (* 2 (* q r r r00)) (* q q r r r00) (* (- 4) (* q r y00 r00)) (* (- 2) (* q q r y00 r00)) (* 2 (* q y00 y00 r00)) (* q q y00 y00 r00) (* (- 2) (* q r r r)) (* (- 1) (* q q r r r)) (* 2 (* q r y00 y00 y00)) (* r y00 y00 y00) (* q q r y00 y00 y00) ?x1011 (* (- 2) (* q y00 y00 y00 r00)) (* (- 1) (* q q y00 y00 y00 r00)) (* 2 (* q r r y00 q00)) (* q q r r y00 q00) (* (- 4) (* q r y00 y00 q00)) (* (- 2) (* q q r y00 y00 q00)) (* 2 (* q y00 y00 y00 q00)) (* q q y00 y00 y00 q00))))
 (let (($x107 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (and (= (+ y (* (- 1) y00)) 0) $x107 (not (= ?x1144 0))))))))) :qid k!29))
 ))
 (let (($x161 (exists ((q Int) (r Int) (y Int) )(! (let ((?x75 (* (- 1) y00)))
 (let ((?x212 (+ r ?x75)))
 (let ((?x1012 (+ 1 q)))
 (let ((?x972 (+ (* y00 y00 y00 y00 ?x1012 ?x1012 ?x1012) (* (- 1) (* r00 ?x212 ?x212)) (* (- 1) (* q00 y00 ?x212 ?x212)) (* (- 1) (* q00 y00 y00 y00 y00 ?x1012 ?x1012)) (* ?x212 ?x212 ?x212) (* (- 1) (* y00 ?x1012 ?x1012 ?x1012 ?x212 ?x212)) (* r00 ?x1012 ?x1012 ?x212 ?x212) (* y00 ?x1012 ?x212 ?x212) (* (- 1) (* ?x1012 ?x1012 ?x212 ?x212 ?x212)) (* y00 y00 y00 ?x1012 ?x1012 ?x212) (* (- 1) (* r00 y00 y00 y00 ?x1012 ?x1012)) (* q00 y00 ?x1012 ?x1012 ?x212 ?x212))))
 (let (($x1021 (not (= ?x972 0))))
 (let (($x221 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ y00 (* (- 1) y)) 0) $x221 $x1021))))))) :qid k!29))
 ))
 (let ((?x111 (lambda ((q Int) (r Int) (y Int) )(let ((?x978 (* y00 y00 y00 r00)))
 (let ((?x1011 (* (- 1) ?x978)))
 (let ((?x293 (* y00 y00 y00 y00 q00)))
 (let ((?x326 (* (- 1) ?x293)))
 (let ((?x1144 (+ (* q y00 y00 y00 y00) (* 2 (* q q y00 y00 y00 y00)) (* q q q y00 y00 y00 y00) ?x326 (* (- 2) (* q y00 y00 y00 y00 q00)) (* (- 1) (* q q y00 y00 y00 y00 q00)) (* 4 (* q r r y00)) (* (- 1) (* q q q r r y00)) (* (- 2) (* q r y00 y00)) (* 3 (* q q r y00 y00)) (* 2 (* q q q r y00 y00)) (* (- 2) (* q q y00 y00 y00)) (* (- 1) (* q q q y00 y00 y00)) (* 2 (* q r r r00)) (* q q r r r00) (* (- 4) (* q r y00 r00)) (* (- 2) (* q q r y00 r00)) (* 2 (* q y00 y00 r00)) (* q q y00 y00 r00) (* (- 2) (* q r r r)) (* (- 1) (* q q r r r)) (* 2 (* q r y00 y00 y00)) (* r y00 y00 y00) (* q q r y00 y00 y00) ?x1011 (* (- 2) (* q y00 y00 y00 r00)) (* (- 1) (* q q y00 y00 y00 r00)) (* 2 (* q r r y00 q00)) (* q q r r y00 q00) (* (- 4) (* q r y00 y00 q00)) (* (- 2) (* q q r y00 y00 q00)) (* 2 (* q y00 y00 y00 q00)) (* q q y00 y00 y00 q00))))
 (let (($x107 (= (+ r (* (- 1) r00) (* q y00) (* (- 1) (* y00 q00))) 0)))
 (let (($x129 (and (= (+ y (* (- 1) y00)) 0) $x107 (not (= ?x1144 0)))))
 (let ((?x75 (* (- 1) y00)))
 (let ((?x212 (+ r ?x75)))
 (let ((?x1012 (+ 1 q)))
 (let ((?x972 (+ (* y00 y00 y00 y00 ?x1012 ?x1012 ?x1012) (* (- 1) (* r00 ?x212 ?x212)) (* (- 1) (* q00 y00 ?x212 ?x212)) (* (- 1) (* q00 y00 y00 y00 y00 ?x1012 ?x1012)) (* ?x212 ?x212 ?x212) (* (- 1) (* y00 ?x1012 ?x1012 ?x1012 ?x212 ?x212)) (* r00 ?x1012 ?x1012 ?x212 ?x212) (* y00 ?x1012 ?x212 ?x212) (* (- 1) (* ?x1012 ?x1012 ?x212 ?x212 ?x212)) (* y00 y00 y00 ?x1012 ?x1012 ?x212) (* (- 1) (* r00 y00 y00 y00 ?x1012 ?x1012)) (* q00 y00 ?x1012 ?x1012 ?x212 ?x212))))
 (let (($x1021 (not (= ?x972 0))))
 (let (($x221 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x484 (and (= (+ y00 (* (- 1) y)) 0) $x221 $x1021)))
 (rewrite (= $x484 $x129)))))))))))))))))
 ))
 (let (($x1023 (exists ((q Int) (r Int) (y Int) )(! (let ((?x75 (* (- 1) y00)))
 (let ((?x212 (+ r ?x75)))
 (let ((?x1012 (+ 1 q)))
 (let ((?x972 (+ (* y00 y00 y00 y00 ?x1012 ?x1012 ?x1012) (* (- 1) (* r00 ?x212 ?x212)) (* (- 1) (* q00 y00 ?x212 ?x212)) (* (- 1) (* q00 y00 y00 y00 y00 ?x1012 ?x1012)) (* ?x212 ?x212 ?x212) (* (- 1) (* y00 ?x1012 ?x1012 ?x1012 ?x212 ?x212)) (* r00 ?x1012 ?x1012 ?x212 ?x212) (* y00 ?x1012 ?x212 ?x212) (* (- 1) (* ?x1012 ?x1012 ?x212 ?x212 ?x212)) (* y00 y00 y00 ?x1012 ?x1012 ?x212) (* (- 1) (* r00 y00 y00 y00 ?x1012 ?x1012)) (* q00 y00 ?x1012 ?x1012 ?x212 ?x212))))
 (let (($x1021 (not (= ?x972 0))))
 (let (($x221 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (and (= (+ ?x75 y) 0) $x221 $x1021))))))) :qid k!29))
 ))
 (let ((?x327 (lambda ((q Int) (r Int) (y Int) )(let ((?x75 (* (- 1) y00)))
 (let ((?x212 (+ r ?x75)))
 (let ((?x1012 (+ 1 q)))
 (let ((?x972 (+ (* y00 y00 y00 y00 ?x1012 ?x1012 ?x1012) (* (- 1) (* r00 ?x212 ?x212)) (* (- 1) (* q00 y00 ?x212 ?x212)) (* (- 1) (* q00 y00 y00 y00 y00 ?x1012 ?x1012)) (* ?x212 ?x212 ?x212) (* (- 1) (* y00 ?x1012 ?x1012 ?x1012 ?x212 ?x212)) (* r00 ?x1012 ?x1012 ?x212 ?x212) (* y00 ?x1012 ?x212 ?x212) (* (- 1) (* ?x1012 ?x1012 ?x212 ?x212 ?x212)) (* y00 y00 y00 ?x1012 ?x1012 ?x212) (* (- 1) (* r00 y00 y00 y00 ?x1012 ?x1012)) (* q00 y00 ?x1012 ?x1012 ?x212 ?x212))))
 (let (($x1021 (not (= ?x972 0))))
 (let (($x221 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x484 (and (= (+ y00 (* (- 1) y)) 0) $x221 $x1021)))
 (let (($x216 (and (= (+ ?x75 y) 0) $x221 $x1021)))
 (rewrite (= $x216 $x484)))))))))))
 ))
 (let (($x70 (exists ((q Int) (r Int) (y Int) )(! (let ((?x44 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x49 (- (- (* ?x42 ?x42 ?x42 y00 y00 y00 y00) (* ?x44 ?x44 r00)) (* q00 ?x44 ?x44 y00))))
 (let ((?x52 (+ (- ?x49 (* ?x42 ?x42 q00 y00 y00 y00 y00)) (* ?x44 ?x44 ?x44))))
 (let ((?x57 (+ (- ?x52 (* ?x42 ?x42 ?x42 ?x44 ?x44 y00)) (* ?x42 ?x42 ?x44 ?x44 r00) (* ?x42 ?x44 ?x44 y00))))
 (let ((?x61 (+ (- ?x57 (* ?x42 ?x42 ?x44 ?x44 ?x44)) (* ?x42 ?x42 ?x44 y00 y00 y00))))
 (let ((?x65 (+ (- ?x61 (* ?x42 ?x42 r00 y00 y00 y00)) (* ?x42 ?x42 q00 ?x44 ?x44 y00))))
 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x65 0))))))))))) :qid k!29))
 ))
 (let ((?x371 (lambda ((q Int) (r Int) (y Int) )(let ((?x75 (* (- 1) y00)))
 (let ((?x212 (+ r ?x75)))
 (let ((?x1012 (+ 1 q)))
 (let ((?x972 (+ (* y00 y00 y00 y00 ?x1012 ?x1012 ?x1012) (* (- 1) (* r00 ?x212 ?x212)) (* (- 1) (* q00 y00 ?x212 ?x212)) (* (- 1) (* q00 y00 y00 y00 y00 ?x1012 ?x1012)) (* ?x212 ?x212 ?x212) (* (- 1) (* y00 ?x1012 ?x1012 ?x1012 ?x212 ?x212)) (* r00 ?x1012 ?x1012 ?x212 ?x212) (* y00 ?x1012 ?x212 ?x212) (* (- 1) (* ?x1012 ?x1012 ?x212 ?x212 ?x212)) (* y00 y00 y00 ?x1012 ?x1012 ?x212) (* (- 1) (* r00 y00 y00 y00 ?x1012 ?x1012)) (* q00 y00 ?x1012 ?x1012 ?x212 ?x212))))
 (let (($x1021 (not (= ?x972 0))))
 (let (($x221 (= (+ r (* (- 1) r00) (* (- 1) (* q00 y00)) (* y00 q)) 0)))
 (let (($x216 (and (= (+ ?x75 y) 0) $x221 $x1021)))
 (let ((?x44 (- r y00)))
 (let ((?x42 (+ q 1)))
 (let ((?x49 (- (- (* ?x42 ?x42 ?x42 y00 y00 y00 y00) (* ?x44 ?x44 r00)) (* q00 ?x44 ?x44 y00))))
 (let ((?x52 (+ (- ?x49 (* ?x42 ?x42 q00 y00 y00 y00 y00)) (* ?x44 ?x44 ?x44))))
 (let ((?x57 (+ (- ?x52 (* ?x42 ?x42 ?x42 ?x44 ?x44 y00)) (* ?x42 ?x42 ?x44 ?x44 r00) (* ?x42 ?x44 ?x44 y00))))
 (let ((?x61 (+ (- ?x57 (* ?x42 ?x42 ?x44 ?x44 ?x44)) (* ?x42 ?x42 ?x44 y00 y00 y00))))
 (let ((?x65 (+ (- ?x61 (* ?x42 ?x42 r00 y00 y00 y00)) (* ?x42 ?x42 q00 ?x44 ?x44 y00))))
 (let (($x69 (and (= (+ (* (- 1) y00) y) 0) (= (+ (- (- r r00) (* q00 y00)) (* q y00)) 0) (or (not (= ?x65 0))))))
 (rewrite (= $x69 $x216))))))))))))))))))
 ))
 (let ((@x71 (asserted $x70)))
 (let ((@x244 (mp (mp @x71 (quant-intro (proof-bind ?x371) (= $x70 $x1023)) $x1023) (rewrite (= $x1023 $x1023)) $x1023)))
 (let ((@x872 (mp (mp @x244 (quant-intro (proof-bind ?x327) (= $x1023 $x161)) $x161) (quant-intro (proof-bind ?x111) (= $x161 $x82)) $x82)))
 (let ((@x549 (mp (mp~ @x872 (sk (~ $x82 $x772)) $x772) (rewrite (= $x772 $x820)) $x820)))
 (let ((@x793 (and-elim @x549 $x740)))
 (let ((@x825 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x797)) @x793 $x797)))
 (let (($x798 (>= ?x581 0)))
 (let ((@x547 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x740) $x798)) @x793 $x798)))
 (let (($x579 (<= ?x786 0)))
 (let ((@x990 (and-elim @x549 $x787)))
 (let ((@x131 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x787) $x579)) @x990 $x579)))
 (let (($x796 (>= ?x786 0)))
 (let ((@x479 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x787) $x796)) @x990 $x796)))
 (let (($x490 (not (<= ?x545 0))))
 (let (($x554 (>= ?x545 0)))
 (let ((@x512 (lemma ((_ th-lemma arith) (hypothesis (not $x554)) @x479 @x131 @x547 @x825 false) $x554)))
 (let ((@x516 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x537 $x490 (not $x554))) (and-elim @x549 $x453) (or $x490 (not $x554)))))
 ((_ th-lemma arith) (unit-resolution @x516 @x512 $x490) @x479 @x131 @x547 @x825 false)))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 3
 :arith-assert-diseq        1
 :arith-assert-lower        6
 :arith-assert-upper        4
 :arith-conflicts           2
 :arith-eq-adapter          3
 :arith-gcd-tests           4
 :arith-grobner             2
 :arith-max-min             318
 :arith-nonlinear-bounds    2
 :arith-nonlinear-horner    6
 :arith-num-rows            3
 :arith-offset-eqs          1
 :arith-patches             4
 :arith-patches_succ        4
 :arith-pivots              3
 :arith-tableau-max-columns 51
 :arith-tableau-max-rows    3
 :conflicts                 2
 :decisions                 1
 :del-clause                10
 :final-checks              4
 :max-memory                3.70
 :memory                    3.21
 :mk-bool-var               15
 :mk-clause                 10
 :num-allocs                1218079
 :num-checks                1
 :propagations              6
 :rlimit-count              4944
 :time                      0.01
 :total-time                0.02)
