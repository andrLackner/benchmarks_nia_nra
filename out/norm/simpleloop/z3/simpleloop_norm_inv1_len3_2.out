unsat
((set-logic NIA)
(declare-fun x!1 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x1203 (+ y00 x00 (* (- 1) y!0) (* (- 1) x!1))))
 (let (($x330 (<= ?x1203 0)))
 (let (($x1213 (= ?x1203 0)))
 (let ((?x205 (+ (* 3 y00) (* 3 x00) (* 3 (* y00 y!0 x!1 x!1)) (* (- 5) (* y00 y!0 x!1)) (* (- 1) (* y00 y!0 x!1 x!1 x!1)) (* 3 (* y00 y!0)) (* 6 (* y00 x!1 x!1)) (* (- 7) (* y00 x!1)) (* (- 2) (* y00 x!1 x!1 x!1)) (* 4 (* y!0 y!0 x!1)) (* 3 (* x00 y!0 x!1 x!1)) (* (- 1) (* x00 y!0 x!1 x!1 x!1)) (* (- 3) (* y!0 y!0)) (* (- 2) (* x00 x!1 x!1 x!1)) (* (- 3) y!0) (* (- 3) x!1) (* (- 6) (* x!1 x!1 x!1)) (* 7 (* x!1 x!1)) (* (- 1) (* y!0 y!0 y!0)) (* 2 (* x!1 x!1 x!1 x!1)) (* (- 5) (* x00 y!0 x!1)) (* 3 (* x00 y!0)) (* (- 7) (* x00 x!1)) (* 6 (* x00 x!1 x!1)) (* (- 1) (* x00 y!0 y!0 x!1)) (* (- 1) (* y!0 x!1 x!1 x!1)) (* (- 2) (* y!0 y!0 x!1 x!1)) (* 4 (* y!0 x!1)) (* (- 1) (* y!0 x!1 x!1)) (* y!0 y!0 x!1 x!1 x!1) (* x00 y!0 y!0) (* y!0 x!1 x!1 x!1 x!1) (* y!0 y!0 y!0 x!1) (* (- 1) (* y00 y!0 y!0 x!1)) (* y00 y!0 y!0))))
 (let (($x444 (= ?x205 0)))
 (let (($x1134 (not $x444)))
 (let (($x378 (and $x1213 $x1134)))
 (let ((?x1036 (* y!0 y!0 y!0)))
 (let ((?x1342 (* (- 3) x00)))
 (let ((?x1295 (* (- 3) y00)))
 (let ((?x104 (+ (* 3 x!1) (* 3 y!0) ?x1295 ?x1342 (* 7 (* x!1 x00)) (* (- 6) (* x!1 x!1 x00)) (* 2 (* x!1 x!1 x!1 x00)) (* 5 (* x!1 y!0 x00)) (* x!1 y!0 y!0 x00) (* (- 3) (* y!0 y00)) (* 5 (* x!1 y!0 y00)) (* (- 3) (* x!1 x!1 y!0 y00)) (* x!1 x!1 x!1 y!0 y00) (* 7 (* x!1 y00)) (* (- 6) (* x!1 x!1 y00)) (* 2 (* x!1 x!1 x!1 y00)) (* (- 3) (* y!0 x00)) (* (- 3) (* x!1 x!1 y!0 x00)) (* x!1 x!1 x!1 y!0 x00) (* 3 (* y!0 y!0)) (* (- 4) (* x!1 y!0 y!0)) (* 2 (* x!1 x!1 y!0 y!0)) (* (- 7) (* x!1 x!1)) (* (- 4) (* x!1 y!0)) (* x!1 x!1 y!0) (* (- 1) (* x!1 x!1 x!1 y!0 y!0)) (* 6 (* x!1 x!1 x!1)) (* x!1 x!1 x!1 y!0) (* (- 1) (* y!0 y!0 x00)) (* (- 1) (* x!1 x!1 x!1 x!1 y!0)) (* (- 2) (* x!1 x!1 x!1 x!1)) ?x1036 (* (- 1) (* x!1 y!0 y!0 y!0)) (* (- 1) (* y!0 y!0 y00)) (* x!1 y!0 y!0 y00))))
 (let (($x389 (and (= (+ x!1 y!0 (* (- 1) y00) (* (- 1) x00)) 0) (not (= ?x104 0)))))
 (let (($x468 (exists ((x Int) (y Int) )(! (let ((?x1268 (* x y y y00)))
 (let ((?x1267 (* (- 1) (* y y y00))))
 (let ((?x1110 (* (- 1) (* x y y y))))
 (let ((?x1058 (* y y y)))
 (let ((?x1250 (* (- 2) (* x x x x))))
 (let ((?x981 (* (- 1) (* x x x x y))))
 (let ((?x613 (* x x x y)))
 (let ((?x1249 (* 6 (* x x x))))
 (let ((?x675 (* (- 1) (* x x x y y))))
 (let ((?x465 (* x x y)))
 (let ((?x711 (* (- 4) (* x y))))
 (let ((?x1248 (* (- 7) (* x x))))
 (let ((?x740 (* 2 (* x x y y))))
 (let ((?x1141 (* (- 4) (* x y y))))
 (let ((?x1130 (* 3 (* y y))))
 (let ((?x380 (* x x x y x00)))
 (let ((?x387 (* (- 3) (* x x y x00))))
 (let ((?x409 (* 2 (* x x x y00))))
 (let ((?x218 (* x x x y y00)))
 (let ((?x257 (* (- 3) (* x x y y00))))
 (let ((?x172 (* x y y x00)))
 (let ((?x403 (* 2 (* x x x x00))))
 (let ((?x1342 (* (- 3) x00)))
 (let ((?x1295 (* (- 3) y00)))
 (let ((?x1129 (* 3 y)))
 (let ((?x986 (* 3 x)))
 (let ((?x1351 (+ ?x986 ?x1129 ?x1295 ?x1342 (* 7 (* x x00)) (* (- 6) (* x x x00)) ?x403 (* 5 (* x y x00)) ?x172 (* (- 3) (* y y00)) (* 5 (* x y y00)) ?x257 ?x218 (* 7 (* x y00)) (* (- 6) (* x x y00)) ?x409 (* (- 3) (* y x00)) ?x387 ?x380 ?x1130 ?x1141 ?x740 ?x1248 ?x711 ?x465 ?x675 ?x1249 ?x613 (* (- 1) (* y y x00)) ?x981 ?x1250 ?x1058 ?x1110 ?x1267 ?x1268)))
 (let (($x89 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (and $x89 (not (= ?x1351 0))))))))))))))))))))))))))))))) :qid k!26))
 ))
 (let (($x1138 (exists ((x Int) (y Int) )(! (let ((?x488 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x422 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x459 (+ 1 y)))
 (let ((?x1098 (+ (- 1) x)))
 (let ((?x787 (+ (* x00 ?x1098 ?x1098 ?x1098) (* x00 ?x1098 ?x459 ?x459) (* y00 ?x1098 ?x1098 ?x1098 ?x459) (* y00 ?x1098 ?x1098 ?x1098) (* x00 ?x1098 ?x1098 ?x1098 ?x459) (* (- 1) (* ?x1098 ?x1098 ?x459 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x459 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x1098 ?x459)) ?x422 ?x488 (* y00 ?x1098 ?x459 ?x459))))
 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x787 0)))))))) :qid k!26))
 ))
 (let ((?x682 (lambda ((x Int) (y Int) )(let ((?x1268 (* x y y y00)))
 (let ((?x1267 (* (- 1) (* y y y00))))
 (let ((?x1110 (* (- 1) (* x y y y))))
 (let ((?x1058 (* y y y)))
 (let ((?x1250 (* (- 2) (* x x x x))))
 (let ((?x981 (* (- 1) (* x x x x y))))
 (let ((?x613 (* x x x y)))
 (let ((?x1249 (* 6 (* x x x))))
 (let ((?x675 (* (- 1) (* x x x y y))))
 (let ((?x465 (* x x y)))
 (let ((?x711 (* (- 4) (* x y))))
 (let ((?x1248 (* (- 7) (* x x))))
 (let ((?x740 (* 2 (* x x y y))))
 (let ((?x1141 (* (- 4) (* x y y))))
 (let ((?x1130 (* 3 (* y y))))
 (let ((?x380 (* x x x y x00)))
 (let ((?x387 (* (- 3) (* x x y x00))))
 (let ((?x409 (* 2 (* x x x y00))))
 (let ((?x218 (* x x x y y00)))
 (let ((?x257 (* (- 3) (* x x y y00))))
 (let ((?x172 (* x y y x00)))
 (let ((?x403 (* 2 (* x x x x00))))
 (let ((?x1342 (* (- 3) x00)))
 (let ((?x1295 (* (- 3) y00)))
 (let ((?x1129 (* 3 y)))
 (let ((?x986 (* 3 x)))
 (let ((?x1351 (+ ?x986 ?x1129 ?x1295 ?x1342 (* 7 (* x x00)) (* (- 6) (* x x x00)) ?x403 (* 5 (* x y x00)) ?x172 (* (- 3) (* y y00)) (* 5 (* x y y00)) ?x257 ?x218 (* 7 (* x y00)) (* (- 6) (* x x y00)) ?x409 (* (- 3) (* y x00)) ?x387 ?x380 ?x1130 ?x1141 ?x740 ?x1248 ?x711 ?x465 ?x675 ?x1249 ?x613 (* (- 1) (* y y x00)) ?x981 ?x1250 ?x1058 ?x1110 ?x1267 ?x1268)))
 (let (($x89 (= (+ x y (* (- 1) y00) (* (- 1) x00)) 0)))
 (let (($x1357 (and $x89 (not (= ?x1351 0)))))
 (let ((?x488 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x422 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x459 (+ 1 y)))
 (let ((?x1098 (+ (- 1) x)))
 (let ((?x787 (+ (* x00 ?x1098 ?x1098 ?x1098) (* x00 ?x1098 ?x459 ?x459) (* y00 ?x1098 ?x1098 ?x1098 ?x459) (* y00 ?x1098 ?x1098 ?x1098) (* x00 ?x1098 ?x1098 ?x1098 ?x459) (* (- 1) (* ?x1098 ?x1098 ?x459 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x459 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x1098 ?x459)) ?x422 ?x488 (* y00 ?x1098 ?x459 ?x459))))
 (let (($x1131 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x787 0)))))
 (rewrite (= $x1131 $x1357))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x60 (exists ((x Int) (y Int) )(! (let ((?x36 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (+ (* ?x34 ?x34 ?x34 x00) (* ?x34 x00 ?x36 ?x36) (* ?x34 ?x34 ?x34 ?x36 y00) (* ?x34 ?x34 ?x34 y00) (* ?x34 ?x34 ?x34 x00 ?x36))))
 (let ((?x50 (- (- (- ?x41 (* ?x34 ?x34 ?x36 ?x36)) (* ?x34 ?x34 ?x34 ?x36 ?x36)) (* ?x34 ?x34 ?x34 ?x36))))
 (let ((?x53 (- (- (- ?x50 (* ?x34 ?x34 ?x34 ?x34 ?x36)) (* ?x34 ?x36 ?x36 ?x36)) (* ?x34 ?x34 ?x34 ?x34))))
 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x53 (* ?x34 ?x36 ?x36 y00)) 0))))))))) :qid k!26))
 ))
 (let ((?x407 (lambda ((x Int) (y Int) )(let ((?x488 (* (- 1) (* (+ (- 1) x) (+ (- 1) x) (+ (- 1) x) (+ (- 1) x)))))
 (let ((?x422 (* (- 1) (* (+ (- 1) x) (+ 1 y) (+ 1 y) (+ 1 y)))))
 (let ((?x459 (+ 1 y)))
 (let ((?x1098 (+ (- 1) x)))
 (let ((?x787 (+ (* x00 ?x1098 ?x1098 ?x1098) (* x00 ?x1098 ?x459 ?x459) (* y00 ?x1098 ?x1098 ?x1098 ?x459) (* y00 ?x1098 ?x1098 ?x1098) (* x00 ?x1098 ?x1098 ?x1098 ?x459) (* (- 1) (* ?x1098 ?x1098 ?x459 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x459 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x459)) (* (- 1) (* ?x1098 ?x1098 ?x1098 ?x1098 ?x459)) ?x422 ?x488 (* y00 ?x1098 ?x459 ?x459))))
 (let (($x1131 (and (= (+ x (* (- 1) y00) (* (- 1) x00) y) 0) (not (= ?x787 0)))))
 (let ((?x36 (+ y 1)))
 (let ((?x34 (- x 1)))
 (let ((?x41 (+ (* ?x34 ?x34 ?x34 x00) (* ?x34 x00 ?x36 ?x36) (* ?x34 ?x34 ?x34 ?x36 y00) (* ?x34 ?x34 ?x34 y00) (* ?x34 ?x34 ?x34 x00 ?x36))))
 (let ((?x50 (- (- (- ?x41 (* ?x34 ?x34 ?x36 ?x36)) (* ?x34 ?x34 ?x34 ?x36 ?x36)) (* ?x34 ?x34 ?x34 ?x36))))
 (let ((?x53 (- (- (- ?x50 (* ?x34 ?x34 ?x34 ?x34 ?x36)) (* ?x34 ?x36 ?x36 ?x36)) (* ?x34 ?x34 ?x34 ?x34))))
 (let (($x59 (and (= (+ (- (- x y00) x00) y) 0) (or (not (= (+ ?x53 (* ?x34 ?x36 ?x36 y00)) 0))))))
 (rewrite (= $x59 $x1131)))))))))))))))
 ))
 (let ((@x61 (asserted $x60)))
 (let ((@x452 (mp (mp @x61 (quant-intro (proof-bind ?x407) (= $x60 $x1138)) $x1138) (rewrite (= $x1138 $x1138)) $x1138)))
 (let ((@x391 (mp~ (mp @x452 (quant-intro (proof-bind ?x682) (= $x1138 $x468)) $x468) (sk (~ $x468 $x389)) $x389)))
 (let ((@x1121 (mp @x391 (rewrite (= $x389 $x378)) $x378)))
 (let ((@x1126 (and-elim @x1121 $x1213)))
 (let ((@x1324 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1213) $x330)) @x1126 $x330)))
 (let (($x117 (>= ?x1203 0)))
 (let ((@x1259 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x1213) $x117)) @x1126 $x117)))
 (let (($x1331 (not (>= ?x205 0))))
 (let (($x1066 (<= ?x205 0)))
 (let ((@x1330 (lemma ((_ th-lemma arith) (hypothesis (not $x1066)) @x1259 @x1324 @x1259 @x1324 false) $x1066)))
 (let ((@x1333 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x444 (not $x1066) $x1331)) (and-elim @x1121 $x1134) (or (not $x1066) $x1331))))
 ((_ th-lemma arith) (unit-resolution @x1333 @x1330 $x1331) @x1259 @x1324 @x1259 @x1324 false))))))))))))))))))))))))))))))))

(:added-eqs                 1
 :arith-assert-diseq        1
 :arith-assert-lower        11
 :arith-assert-upper        3
 :arith-conflicts           2
 :arith-eq-adapter          2
 :arith-grobner             2
 :arith-max-min             272
 :arith-nonlinear-bounds    8
 :arith-nonlinear-horner    4
 :arith-num-rows            2
 :arith-pivots              2
 :arith-row-summations      1
 :arith-tableau-max-columns 49
 :arith-tableau-max-rows    2
 :conflicts                 2
 :decisions                 1
 :del-clause                7
 :final-checks              4
 :max-memory                3.73
 :memory                    3.21
 :mk-bool-var               12
 :mk-clause                 7
 :num-allocs                1258488
 :num-checks                1
 :propagations              4
 :rlimit-count              4513
 :time                      0.01
 :total-time                0.01)
