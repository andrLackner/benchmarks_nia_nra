unsat
((set-logic NIA)
(declare-fun a!3 () Int)
(declare-fun d!1 () Int)
(declare-fun b!2 () Int)
(declare-fun y!0 () Int)
(proof
(let ((?x436 (to_real a!3)))
 (let ((?x435 (to_real d!1)))
 (let ((?x433 (to_real b!2)))
 (let ((?x63 (to_real d00)))
 (let ((?x680 (* ?x63 ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x436 ?x436)))
 (let ((?x116 (* (- (/ 1.0 32.0)) (* (to_real b00) ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x435 ?x436))))
 (let ((?x649 (* (- (/ 1.0 64.0)) (* (to_real b00) ?x433 ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x435))))
 (let ((?x67 (to_real b00)))
 (let ((?x111 (* ?x67 ?x433 ?x433 ?x435 ?x435 ?x435 ?x435 ?x436 ?x436)))
 (let ((?x670 (+ (* (/ 1.0 32.0) (* ?x63 ?x433 ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x436)) (* (/ 1.0 64.0) (* ?x63 ?x433 ?x433 ?x433 ?x433 ?x433 ?x435 ?x435 ?x435)) (* (- (/ 1.0 64.0)) ?x111) (* (/ 1.0 4.0) (* ?x67 ?x435 ?x435 ?x436 ?x436 ?x436)) (* (/ 1.0 2.0) (* ?x67 ?x433 ?x433 ?x433 ?x435 (to_real y!0))) (* (- (/ 1.0 2.0)) (* ?x63 ?x433 ?x436 ?x436 ?x436 (to_real y!0))) (* (- (/ 3.0 2.0)) (* ?x63 ?x433 ?x433 ?x433 ?x436 (to_real y!0))) (* (- (/ 3.0 2.0)) (* ?x63 ?x433 ?x433 ?x436 ?x436 (to_real y!0))) (* (- (/ 3.0 4.0)) (* ?x63 ?x433 ?x433 ?x435 ?x436 ?x436)) (* (- (/ 1.0 4.0)) (* ?x63 ?x433 ?x435 ?x436 ?x436 ?x436)) (* (/ 1.0 2.0) (* ?x67 ?x435 ?x436 ?x436 ?x436 (to_real y!0))) (* (- (/ 1.0 2.0)) (* ?x63 ?x433 ?x433 ?x433 ?x433 (to_real y!0))) (* (/ 3.0 2.0) (* ?x67 ?x433 ?x433 ?x435 ?x436 (to_real y!0))) (* (/ 3.0 2.0) (* ?x67 ?x433 ?x435 ?x436 ?x436 (to_real y!0))) ?x649 ?x116 (* (/ 1.0 4.0) (* ?x67 ?x433 ?x433 ?x433 ?x435 ?x435)) (* (- (/ 1.0 4.0)) (* ?x63 ?x433 ?x433 ?x433 ?x433 ?x435)) (* (- (/ 3.0 4.0)) (* ?x63 ?x433 ?x433 ?x433 ?x435 ?x436)) (* (/ 3.0 4.0) (* ?x67 ?x433 ?x435 ?x435 ?x436 ?x436)) (* (/ 3.0 4.0) (* ?x67 ?x433 ?x433 ?x435 ?x435 ?x436)) (* (/ 1.0 64.0) ?x680))))
 (let (($x261 (>= ?x670 0.0)))
 (let ((?x285 (+ (* d00 b!2) (* (- 1) (* b00 d!1)))))
 (let (($x488 (>= ?x285 0)))
 (let (($x443 (= 0 ?x285)))
 (let ((@x502 (symm (commutativity (= $x443 (= ?x285 0))) (= (= ?x285 0) $x443))))
 (let (($x211 (= ?x285 0)))
 (let ((?x641 (+ (* (/ 1.0 64.0) ?x111) (* (/ 1.0 2.0) (* ?x63 ?x433 ?x436 ?x436 ?x436 (to_real y!0))) (* (- (/ 1.0 2.0)) (* ?x67 ?x435 ?x436 ?x436 ?x436 (to_real y!0))) (* (- (/ 1.0 64.0)) ?x680))))
 (let (($x642 (= ?x641 0.0)))
 (let (($x223 (not $x642)))
 (let (($x716 (or $x223 (not (= ?x670 0.0)))))
 (let ((?x220 (+ (* 2 (* y!0 b!2)) (* (- 2) (* y00 b!2)) (* a00 d!1) (* (- 1) (* d!1 a!3)))))
 (let (($x587 (= ?x220 0)))
 (let ((?x96 (* b00 y00)))
 (let ((?x97 (* (- 2) ?x96)))
 (let ((?x35 (* a00 d00)))
 (let ((?x499 (+ ?x35 ?x97 (* (- 1) (* d00 a!3)) (* 2 (* b00 y!0)))))
 (let (($x231 (= ?x499 0)))
 (let (($x630 (and $x231 $x211 $x587 $x716)))
 (let ((?x543 (* (- (/ 1.0 64.0)) (* ?x433 ?x433 ?x435 ?x435 ?x435 ?x435 ?x436 ?x436 ?x67))))
 (let ((?x456 (* (- (/ 1.0 2.0)) (* ?x433 ?x436 ?x436 ?x436 ?x63 (to_real y!0)))))
 (let ((?x460 (* (/ 1.0 2.0) (* ?x435 ?x436 ?x436 ?x436 (to_real y!0) ?x67))))
 (let ((?x448 (* (/ 1.0 64.0) (* ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x436 ?x436 ?x63))))
 (let ((?x159 (+ (* (/ 1.0 64.0) (* ?x433 ?x433 ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x63)) ?x448 ?x460 ?x456 ?x543 (* (/ 1.0 32.0) (* ?x433 ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x436 ?x63)) (* (- (/ 1.0 2.0)) (* ?x433 ?x433 ?x433 ?x433 ?x63 (to_real y!0))) (* (- (/ 1.0 4.0)) (* ?x433 ?x433 ?x433 ?x433 ?x435 ?x63)) (* (- (/ 3.0 4.0)) (* ?x433 ?x433 ?x433 ?x435 ?x436 ?x63)) (* (- (/ 3.0 4.0)) (* ?x433 ?x433 ?x435 ?x436 ?x436 ?x63)) (* (- (/ 1.0 4.0)) (* ?x433 ?x435 ?x436 ?x436 ?x436 ?x63)) (* (- (/ 3.0 2.0)) (* ?x433 ?x433 ?x433 ?x436 ?x63 (to_real y!0))) (* (- (/ 3.0 2.0)) (* ?x433 ?x433 ?x436 ?x436 ?x63 (to_real y!0))) (* (- (/ 1.0 64.0)) (* ?x433 ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x435 ?x67)) (* (- (/ 1.0 32.0)) (* ?x433 ?x433 ?x433 ?x435 ?x435 ?x435 ?x435 ?x436 ?x67)) (* (/ 1.0 4.0) (* ?x433 ?x433 ?x433 ?x435 ?x435 ?x67)) (* (/ 3.0 4.0) (* ?x433 ?x433 ?x435 ?x435 ?x436 ?x67)) (* (/ 3.0 4.0) (* ?x433 ?x435 ?x435 ?x436 ?x436 ?x67)) (* (/ 1.0 4.0) (* ?x435 ?x435 ?x436 ?x436 ?x436 ?x67)) (* (/ 1.0 2.0) (* ?x433 ?x433 ?x433 ?x435 (to_real y!0) ?x67)) (* (/ 3.0 2.0) (* ?x433 ?x433 ?x435 ?x436 (to_real y!0) ?x67)) (* (/ 3.0 2.0) (* ?x433 ?x435 ?x436 ?x436 (to_real y!0) ?x67)))))
 (let ((?x429 (+ (* a!3 d!1) (* (- 2) (* b!2 y!0)) (* 2 (* b!2 y00)) (* (- 1) (* d!1 a00)))))
 (let (($x362 (= (+ ?x35 (* (- 1) (* a!3 d00)) ?x97 (* 2 (* y!0 b00))) 0)))
 (let (($x162 (and $x362 (= (+ (* b!2 d00) (* (- 1) (* d!1 b00))) 0) (= ?x429 0) (or (not (= (+ ?x448 ?x460 ?x456 ?x543) 0.0)) (not (= ?x159 0.0))))))
 (let (($x188 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x67 (to_real b00)))
 (let ((?x65 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x723 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 (to_real d00)))))
 (let ((?x240 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62 ?x67))))
 (let ((?x239 (* (- (/ 1.0 2.0)) (* ?x56 ?x62 ?x62 ?x62 (to_real d00) ?x65))))
 (let ((?x192 (* (/ 1.0 2.0) (* ?x59 ?x62 ?x62 ?x62 ?x65 ?x67))))
 (let ((?x238 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 (to_real d00)))))
 (let ((?x722 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 (to_real d00)))))
 (let ((?x733 (+ ?x722 ?x238 ?x192 ?x239 ?x240 ?x723 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x65)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 (to_real d00))) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 (to_real d00))) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x62 ?x62 (to_real d00))) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x62 ?x62 ?x62 (to_real d00))) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x56 ?x62 (to_real d00) ?x65)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x62 ?x62 (to_real d00) ?x65)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x67)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x67)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x62 ?x67)) (* (/ 3.0 4.0) (* ?x56 ?x59 ?x59 ?x62 ?x62 ?x67)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x59 ?x65 ?x67)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 ?x62 ?x65 ?x67)) (* (/ 3.0 2.0) (* ?x56 ?x59 ?x62 ?x62 ?x65 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x166 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x96 (* b00 y00)))
 (let ((?x97 (* (- 2) ?x96)))
 (let ((?x35 (* a00 d00)))
 (let (($x129 (= (+ ?x35 (* (- 1) (* a d00)) ?x97 (* 2 (* y b00))) 0)))
 (and $x129 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x166 0) (or (not (= (+ ?x238 ?x192 ?x239 ?x240) 0.0)) (not (= ?x733 0.0)))))))))))))))))))))) :qid k!33))
 ))
 (let (($x344 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x65 (to_real y)))
 (let ((?x313 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x403 (+ ?x62 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x67 (to_real b00)))
 (let ((?x407 (* ?x67 ?x59 ?x403 ?x403 ?x403 ?x313)))
 (let ((?x63 (to_real d00)))
 (let ((?x371 (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x403 ?x403)))
 (let ((?x337 (+ (* (/ 1.0 64.0) ?x371) (* (- (/ 1.0 2.0)) (* ?x63 ?x56 ?x403 ?x403 ?x403 ?x313)) (* (- (/ 1.0 64.0)) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x403 ?x403)) (* (/ 1.0 2.0) ?x407))))
 (let ((?x338 (+ (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x63 ?x65 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x67 ?x65 ?x59 ?x62 ?x62 ?x62)))))
 (let ((?x339 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x342 (= ?x339 0)))
 (let ((?x268 (* d00 a)))
 (let ((?x375 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x268)))
 (and (= ?x375 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x342 (or (not (= ?x338 0.0)) (not (= ?x337 0.0)))))))))))))))))))) :qid k!33))
 ))
 (let ((?x170 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x67 (to_real b00)))
 (let ((?x65 (to_real y)))
 (let ((?x62 (to_real a)))
 (let ((?x59 (to_real d)))
 (let ((?x56 (to_real b)))
 (let ((?x723 (* (/ 1.0 32.0) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 (to_real d00)))))
 (let ((?x240 (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x62 ?x67))))
 (let ((?x239 (* (- (/ 1.0 2.0)) (* ?x56 ?x62 ?x62 ?x62 (to_real d00) ?x65))))
 (let ((?x192 (* (/ 1.0 2.0) (* ?x59 ?x62 ?x62 ?x62 ?x65 ?x67))))
 (let ((?x238 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x62 ?x62 (to_real d00)))))
 (let ((?x722 (* (/ 1.0 64.0) (* ?x56 ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 (to_real d00)))))
 (let ((?x733 (+ ?x722 ?x238 ?x192 ?x239 ?x240 ?x723 (* (- (/ 1.0 2.0)) (* ?x56 ?x56 ?x56 ?x56 (to_real d00) ?x65)) (* (- (/ 1.0 4.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 (to_real d00))) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x56 ?x59 ?x62 (to_real d00))) (* (- (/ 3.0 4.0)) (* ?x56 ?x56 ?x59 ?x62 ?x62 (to_real d00))) (* (- (/ 1.0 4.0)) (* ?x56 ?x59 ?x62 ?x62 ?x62 (to_real d00))) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x56 ?x62 (to_real d00) ?x65)) (* (- (/ 3.0 2.0)) (* ?x56 ?x56 ?x62 ?x62 (to_real d00) ?x65)) (* (- (/ 1.0 64.0)) (* ?x56 ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x67)) (* (- (/ 1.0 32.0)) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x59 ?x59 ?x62 ?x67)) (* (/ 1.0 4.0) (* ?x56 ?x56 ?x56 ?x59 ?x59 ?x67)) (* (/ 3.0 4.0) (* ?x56 ?x56 ?x59 ?x59 ?x62 ?x67)) (* (/ 3.0 4.0) (* ?x56 ?x59 ?x59 ?x62 ?x62 ?x67)) (* (/ 1.0 4.0) (* ?x59 ?x59 ?x62 ?x62 ?x62 ?x67)) (* (/ 1.0 2.0) (* ?x56 ?x56 ?x56 ?x59 ?x65 ?x67)) (* (/ 3.0 2.0) (* ?x56 ?x56 ?x59 ?x62 ?x65 ?x67)) (* (/ 3.0 2.0) (* ?x56 ?x59 ?x62 ?x62 ?x65 ?x67)))))
 (let ((?x48 (* a d)))
 (let ((?x166 (+ ?x48 (* (- 2) (* b y)) (* 2 (* b y00)) (* (- 1) (* d a00)))))
 (let ((?x96 (* b00 y00)))
 (let ((?x97 (* (- 2) ?x96)))
 (let ((?x35 (* a00 d00)))
 (let (($x129 (= (+ ?x35 (* (- 1) (* a d00)) ?x97 (* 2 (* y b00))) 0)))
 (let (($x740 (and $x129 (= (+ (* b d00) (* (- 1) (* d b00))) 0) (= ?x166 0) (or (not (= (+ ?x238 ?x192 ?x239 ?x240) 0.0)) (not (= ?x733 0.0))))))
 (let ((?x313 (+ ?x65 (* (/ 1.0 2.0) ?x59))))
 (let ((?x403 (+ ?x62 ?x56)))
 (let ((?x407 (* ?x67 ?x59 ?x403 ?x403 ?x403 ?x313)))
 (let ((?x63 (to_real d00)))
 (let ((?x371 (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x403 ?x403)))
 (let ((?x337 (+ (* (/ 1.0 64.0) ?x371) (* (- (/ 1.0 2.0)) (* ?x63 ?x56 ?x403 ?x403 ?x403 ?x313)) (* (- (/ 1.0 64.0)) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x403 ?x403)) (* (/ 1.0 2.0) ?x407))))
 (let ((?x338 (+ (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x63 ?x65 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x67 ?x65 ?x59 ?x62 ?x62 ?x62)))))
 (let ((?x339 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x342 (= ?x339 0)))
 (let ((?x268 (* d00 a)))
 (let (($x372 (= (+ (* 2 ?x96) (* (- 1) ?x35) (* (- 2) (* b00 y)) ?x268) 0)))
 (let (($x394 (and $x372 (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x342 (or (not (= ?x338 0.0)) (not (= ?x337 0.0))))))
 (rewrite (= $x394 $x740))))))))))))))))))))))))))))))))))
 ))
 (let (($x434 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x65 (to_real y)))
 (let ((?x313 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x403 (+ ?x62 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x67 (to_real b00)))
 (let ((?x407 (* ?x67 ?x59 ?x403 ?x403 ?x403 ?x313)))
 (let ((?x63 (to_real d00)))
 (let ((?x371 (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x403 ?x403)))
 (let ((?x424 (+ (* (- (/ 1.0 64.0)) ?x371) (* (/ 1.0 2.0) (* ?x63 ?x56 ?x403 ?x403 ?x403 ?x313)) (* (/ 1.0 64.0) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x403 ?x403)) (* (- (/ 1.0 2.0)) ?x407))))
 (let ((?x396 (+ (* (- (/ 1.0 64.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x63 ?x65 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x67 ?x65 ?x59 ?x62 ?x62 ?x62)))))
 (let ((?x339 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x342 (= ?x339 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x96 (* b00 y00)))
 (let ((?x97 (* (- 2) ?x96)))
 (let (($x149 (= (+ ?x97 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (and $x149 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x342 (or (not (= ?x396 0.0)) (not (= ?x424 0.0)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x312 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x65 (to_real y)))
 (let ((?x313 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x403 (+ ?x62 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x67 (to_real b00)))
 (let ((?x407 (* ?x67 ?x59 ?x403 ?x403 ?x403 ?x313)))
 (let ((?x63 (to_real d00)))
 (let ((?x371 (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x403 ?x403)))
 (let ((?x337 (+ (* (/ 1.0 64.0) ?x371) (* (- (/ 1.0 2.0)) (* ?x63 ?x56 ?x403 ?x403 ?x403 ?x313)) (* (- (/ 1.0 64.0)) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x403 ?x403)) (* (/ 1.0 2.0) ?x407))))
 (let ((?x338 (+ (* (/ 1.0 64.0) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x63 ?x65 ?x56 ?x62 ?x62 ?x62)) (* (- (/ 1.0 64.0)) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x67 ?x65 ?x59 ?x62 ?x62 ?x62)))))
 (let ((?x339 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x342 (= ?x339 0)))
 (let ((?x268 (* d00 a)))
 (let ((?x375 (+ (* 2 (* b00 y00)) (* (- 1) (* a00 d00)) (* (- 2) (* b00 y)) ?x268)))
 (let (($x394 (and (= ?x375 0) (= (+ (* d00 b) (* (- 1) (* b00 d))) 0) $x342 (or (not (= ?x338 0.0)) (not (= ?x337 0.0))))))
 (let ((?x424 (+ (* (- (/ 1.0 64.0)) ?x371) (* (/ 1.0 2.0) (* ?x63 ?x56 ?x403 ?x403 ?x403 ?x313)) (* (/ 1.0 64.0) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x403 ?x403)) (* (- (/ 1.0 2.0)) ?x407))))
 (let ((?x396 (+ (* (- (/ 1.0 64.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x63 ?x65 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x67 ?x65 ?x59 ?x62 ?x62 ?x62)))))
 (let ((?x35 (* a00 d00)))
 (let ((?x96 (* b00 y00)))
 (let ((?x97 (* (- 2) ?x96)))
 (let (($x295 (and (= (+ ?x97 ?x35 (* 2 (* b00 y)) (* (- 1) ?x268)) 0) (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x342 (or (not (= ?x396 0.0)) (not (= ?x424 0.0))))))
 (rewrite (= $x295 $x394))))))))))))))))))))))))))
 ))
 (let (($x88 (exists ((a Int) (b Int) (d Int) (y Int) )(! (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x59 (to_real d)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x65 (to_real y)))
 (let ((?x78 (+ ?x65 ?x60)))
 (let ((?x67 (to_real b00)))
 (let ((?x76 (to_real (+ a b))))
 (let ((?x56 (to_real b)))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x63 (to_real d00)))
 (let ((?x43 (- 1)))
 (let ((?x61 (to_real ?x43)))
 (let ((?x81 (+ (* ?x61 ?x76 ?x76 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63) (* ?x76 ?x76 ?x76 ?x58 ?x63 ?x78) (* ?x76 ?x76 ?x58 ?x58 ?x67 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x62 (to_real a)))
 (let ((?x69 (+ (* ?x61 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63) (* ?x62 ?x62 ?x62 ?x58 ?x63 ?x65) (* ?x62 ?x62 ?x58 ?x58 ?x67 ?x60 ?x60 ?x60 ?x60))))
 (let (($x86 (or (not (= (- ?x69 (* ?x62 ?x62 ?x62 ?x67 ?x60 ?x65)) ?x72)) (not (= (- ?x81 (* ?x76 ?x76 ?x76 ?x67 ?x60 ?x78)) ?x72)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let ((?x39 (- (+ (* (- 2) b00 y00) (* a00 d00) (* 2 b00 y)) ?x38)))
 (and (= ?x39 0) (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) $x86)))))))))))))))))))))) :qid k!33))
 ))
 (let ((?x577 (lambda ((a Int) (b Int) (d Int) (y Int) )(let ((?x65 (to_real y)))
 (let ((?x313 (+ ?x65 (* (/ 1.0 2.0) (to_real d)))))
 (let ((?x56 (to_real b)))
 (let ((?x62 (to_real a)))
 (let ((?x403 (+ ?x62 ?x56)))
 (let ((?x59 (to_real d)))
 (let ((?x67 (to_real b00)))
 (let ((?x407 (* ?x67 ?x59 ?x403 ?x403 ?x403 ?x313)))
 (let ((?x63 (to_real d00)))
 (let ((?x371 (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x403 ?x403)))
 (let ((?x424 (+ (* (- (/ 1.0 64.0)) ?x371) (* (/ 1.0 2.0) (* ?x63 ?x56 ?x403 ?x403 ?x403 ?x313)) (* (/ 1.0 64.0) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x403 ?x403)) (* (- (/ 1.0 2.0)) ?x407))))
 (let ((?x396 (+ (* (- (/ 1.0 64.0)) (* ?x63 ?x59 ?x59 ?x59 ?x56 ?x56 ?x56 ?x62 ?x62)) (* (/ 1.0 2.0) (* ?x63 ?x65 ?x56 ?x62 ?x62 ?x62)) (* (/ 1.0 64.0) (* ?x67 ?x59 ?x59 ?x59 ?x59 ?x56 ?x56 ?x62 ?x62)) (* (- (/ 1.0 2.0)) (* ?x67 ?x65 ?x59 ?x62 ?x62 ?x62)))))
 (let ((?x339 (+ (* d a) (* (- 2) (* y b)) (* 2 (* y00 b)) (* (- 1) (* a00 d)))))
 (let (($x342 (= ?x339 0)))
 (let ((?x35 (* a00 d00)))
 (let ((?x96 (* b00 y00)))
 (let ((?x97 (* (- 2) ?x96)))
 (let (($x149 (= (+ ?x97 ?x35 (* 2 (* b00 y)) (* (- 1) (* d00 a))) 0)))
 (let (($x295 (and $x149 (= (+ (* (- 1) (* d00 b)) (* b00 d)) 0) $x342 (or (not (= ?x396 0.0)) (not (= ?x424 0.0))))))
 (let ((?x72 (to_real 0)))
 (let ((?x57 (to_real 2)))
 (let ((?x60 (/ ?x59 ?x57)))
 (let ((?x78 (+ ?x65 ?x60)))
 (let ((?x76 (to_real (+ a b))))
 (let ((?x58 (/ ?x56 ?x57)))
 (let ((?x43 (- 1)))
 (let ((?x61 (to_real ?x43)))
 (let ((?x81 (+ (* ?x61 ?x76 ?x76 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63) (* ?x76 ?x76 ?x76 ?x58 ?x63 ?x78) (* ?x76 ?x76 ?x58 ?x58 ?x67 ?x60 ?x60 ?x60 ?x60))))
 (let ((?x69 (+ (* ?x61 ?x62 ?x62 ?x58 ?x58 ?x58 ?x60 ?x60 ?x60 ?x63) (* ?x62 ?x62 ?x62 ?x58 ?x63 ?x65) (* ?x62 ?x62 ?x58 ?x58 ?x67 ?x60 ?x60 ?x60 ?x60))))
 (let (($x86 (or (not (= (- ?x69 (* ?x62 ?x62 ?x62 ?x67 ?x60 ?x65)) ?x72)) (not (= (- ?x81 (* ?x76 ?x76 ?x76 ?x67 ?x60 ?x78)) ?x72)))))
 (let ((?x53 (* a00 d)))
 (let ((?x54 (- (+ (- (* a d) (* 2 b y)) (* 2 b y00)) ?x53)))
 (let ((?x38 (* a d00)))
 (let (($x41 (= (- (+ (* (- 2) b00 y00) ?x35 (* 2 b00 y)) ?x38) 0)))
 (let (($x87 (and $x41 (= (+ (* ?x43 b d00) (* b00 d)) 0) (= ?x54 0) $x86)))
 (rewrite (= $x87 $x295))))))))))))))))))))))))))))))))))))))
 ))
 (let ((@x89 (asserted $x88)))
 (let ((@x378 (mp (mp @x89 (quant-intro (proof-bind ?x577) (= $x88 $x434)) $x434) (rewrite (= $x434 $x434)) $x434)))
 (let ((@x289 (mp (mp @x378 (quant-intro (proof-bind ?x312) (= $x434 $x344)) $x344) (quant-intro (proof-bind ?x170) (= $x344 $x188)) $x188)))
 (let ((@x510 (mp (mp~ @x289 (sk (~ $x188 $x162)) $x162) (rewrite (= $x162 $x630)) $x630)))
 (let ((@x540 (mp (and-elim @x510 $x211) @x502 $x443)))
 (let ((@x678 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x443) $x488)) @x540 $x488)))
 (let (($x485 (<= ?x285 0)))
 (let ((@x645 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x443) $x485)) @x540 $x485)))
 (let ((@x121 (unit-resolution ((_ th-lemma arith) (or $x261 (not $x488) (not $x485))) @x645 @x678 (hypothesis (not $x261)) false)))
 (let ((@x134 (lemma @x121 $x261)))
 (let (($x260 (<= ?x670 0.0)))
 (let ((@x592 (unit-resolution ((_ th-lemma arith) (or (not $x485) (not $x488) $x260)) @x645 @x678 (hypothesis (not $x260)) false)))
 (let ((@x593 (lemma @x592 $x260)))
 (let (($x255 (<= ?x641 0.0)))
 (let (($x636 (not $x255)))
 (let (($x257 (>= ?x641 0.0)))
 (let (($x252 (>= ?x220 0)))
 (let (($x489 (= 0 ?x220)))
 (let ((@x248 (mp (and-elim @x510 $x587) (symm (commutativity (= $x489 $x587)) (= $x587 $x489)) $x489)))
 (let (($x101 (<= ?x220 0)))
 (let (($x487 (>= ?x499 0)))
 (let (($x298 (= 0 ?x499)))
 (let ((@x400 (mp (and-elim @x510 $x231) (symm (commutativity (= $x298 $x231)) (= $x231 $x298)) $x298)))
 (let (($x537 (<= ?x499 0)))
 (let (($x222 (not $x485)))
 (let (($x631 (not $x488)))
 (let ((@x398 ((_ th-lemma arith) (or $x257 (not $x487) (not $x537) $x631 $x222 (not $x252) (not $x101)))))
 (let ((@x217 (unit-resolution @x398 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x298) $x537)) @x400 $x537) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x298) $x487)) @x400 $x487) @x645 @x678 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x489) $x101)) @x248 $x101) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x489) $x252)) @x248 $x252) (hypothesis (not $x257)) false)))
 (let (($x254 (= 0.0 ?x641)))
 (let (($x453 (not $x254)))
 (let ((@x450 (monotonicity (symm (commutativity (= $x254 $x642)) (= $x642 $x254)) (= $x223 $x453))))
 (let (($x693 (= ?x670 0.0)))
 (let (($x259 (= 0.0 ?x670)))
 (let ((@x296 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x259 (not $x260) (not $x261))) @x134 (or $x259 (not $x260)))))
 (let ((@x282 (mp (unit-resolution @x296 @x593 $x259) (commutativity (= $x259 $x693)) $x693)))
 (let ((@x439 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x254 $x636 (not $x257))) (mp (unit-resolution (and-elim @x510 $x716) @x282 $x223) @x450 $x453) (or $x636 (not $x257)))))
 (unit-resolution ((_ th-lemma arith) (or (not $x260) (not $x261) $x255 $x631 $x222)) @x645 @x678 (unit-resolution @x439 (lemma @x217 $x257) $x636) @x593 @x134 false))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                       26
 :arith-eq-adapter                25
 :arith-bound-propagations-cheap  44
 :arith-bound-propagations-lp     8
 :arith-conflicts                 87
 :arith-diseq                     40
 :arith-gcd-calls                 8
 :arith-grobner-calls             5
 :arith-grobner-conflicts         4
 :arith-horner-calls              5
 :arith-horner-cross-nested-forms 14
 :arith-lower                     85
 :arith-make-feasible             48
 :arith-max-columns               61
 :arith-max-rows                  11
 :arith-nla-explanations          94
 :arith-nla-lemmas                86
 :arith-patches                   8
 :arith-patches-success           8
 :arith-propagations              44
 :arith-upper                     50
 :conflicts                       14
 :decisions                       90
 :del-clause                      106
 :final-checks                    35
 :max-memory                      4.49
 :memory                          3.18
 :mk-bool-var                     212
 :mk-clause                       181
 :num-allocs                      4290748
 :num-checks                      1
 :propagations                    100
 :rlimit-count                    6135
 :time                            0.03
 :total-time                      0.03)
