unsat
((set-logic NIA)
(declare-fun c!3 () Int)
(declare-fun k!2 () Int)
(declare-fun n!0 () Int)
(declare-fun m!1 () Int)
(proof
(let ((?x245 (* (- 1) (* k!2 k!2))))
 (let ((?x547 (* (- 1) (* c!3 c!3))))
 (let ((?x469 (* (- 36) c!3)))
 (let ((?x540 (* (- 36) k!2)))
 (let ((?x599 (+ k!2 m!1)))
 (let ((?x600 (+ 6 m!1)))
 (let ((?x542 (+ 1 n!0)))
 (let ((?x587 (* (- 12) (* k!2 m!1))))
 (let ((?x389 (* k!2 k!2 k!2 k!2)))
 (let ((?x270 (* (- 1) (* k!2 m!1 m!1))))
 (let ((?x238 (* k!2 k!2 k!2 m!1)))
 (let ((?x173 (+ (* (- 1) (* n!0 m!1 m!1 c!3)) (* (- 36) (* n!0 k!2)) (* (- 36) (* n!0 c!3)) (* k!2 c!3 c!3 c!3) (* (- 12) (* m!1 c!3)) ?x238 (* 3 (* k!2 m!1 c!3 c!3)) (* (- 1) (* n!0 k!2 m!1 m!1)) ?x270 (* (- 1) (* n!0 n!0 c!3 c!3)) (* 3 (* k!2 k!2 c!3 c!3)) (* (- 12) (* n!0 k!2 m!1)) (* m!1 c!3 c!3 c!3) ?x389 ?x587 (* ?x542 ?x542 ?x600 ?x599 ?x599 (+ k!2 c!3)) ?x540 ?x469 (* (- 1) (* m!1 m!1 c!3)) (* 3 (* k!2 k!2 m!1 c!3)) (* (- 2) (* n!0 n!0 k!2 c!3)) (* (- 4) (* n!0 k!2 c!3)) (* (- 12) (* n!0 m!1 c!3)) ?x547 (* (- 1) (* n!0 n!0 k!2 k!2)) ?x245 (* (- 2) (* k!2 c!3)) (* (- 2) (* n!0 k!2 k!2)) (* (- 2) (* n!0 c!3 c!3)) (* 3 (* k!2 k!2 k!2 c!3)))))
 (let (($x1273 (<= ?x173 0)))
 (let ((?x204 (* (- 1) k!2)))
 (let ((?x272 (+ (* 3 n!0) ?x204 (* 3 (* n!0 n!0)))))
 (let (($x277 (<= ?x272 (- 1))))
 (let (($x177 (= ?x272 (- 1))))
 (let ((?x114 (* (- 3) c!3)))
 (let ((?x115 (* (- 3) k!2)))
 (let ((?x116 (* 2 n!0)))
 (let ((?x143 (* n!0 k!2)))
 (let ((?x497 (* ?x173 (+ 3 ?x143 ?x116 ?x115 ?x114 (* n!0 m!1)))))
 (let (($x144 (= ?x497 0)))
 (let (($x496 (not $x144)))
 (let ((?x343 (+ ?x143 ?x116 ?x204 ?x114)))
 (let (($x154 (= ?x343 (- 1))))
 (let ((?x637 (* 18 c!3)))
 (let ((?x478 (* 5 k!2)))
 (let ((?x227 (* (- 9) n!0)))
 (let ((?x254 (+ (* 6 n!0) (* (- 1) m!1))))
 (let (($x623 (= ?x254 (- 6))))
 (let (($x330 (and $x623 (= (+ (* 9 (* n!0 c!3)) ?x227 ?x478 ?x637 ?x245) 4) $x154 $x177 $x496)))
 (let ((?x273 (+ ?x469 ?x540 ?x245 (* (- 36) (* k!2 n!0)) (* ?x542 ?x542 ?x600 ?x599 ?x599 (+ c!3 k!2)) (* (- 36) (* c!3 n!0)) (* (- 12) (* c!3 m!1 n!0)) (* (- 12) (* c!3 m!1)) (* (- 12) (* k!2 m!1 n!0)) (* (- 1) (* c!3 m!1 m!1 n!0)) (* (- 1) (* k!2 m!1 m!1 n!0)) (* c!3 c!3 c!3 k!2) (* (- 1) (* c!3 m!1 m!1)) ?x587 ?x238 (* 3 (* c!3 k!2 k!2 m!1)) (* 3 (* c!3 c!3 k!2 m!1)) ?x270 (* c!3 c!3 c!3 m!1) ?x389 (* 3 (* c!3 k!2 k!2 k!2)) (* 3 (* c!3 c!3 k!2 k!2)) (* (- 1) (* c!3 c!3 n!0 n!0)) (* (- 2) (* c!3 k!2 n!0 n!0)) (* (- 1) (* k!2 k!2 n!0 n!0)) ?x547 (* (- 2) (* c!3 k!2)) (* (- 2) (* c!3 c!3 n!0)) (* (- 4) (* c!3 k!2 n!0)) (* (- 2) (* k!2 k!2 n!0)))))
 (let (($x293 (= (* ?x273 (+ 3 ?x114 ?x115 ?x116 (* k!2 n!0) (* m!1 n!0))) 0)))
 (let (($x295 (= (+ (* 3 c!3) k!2 (* (- 2) n!0) (* (- 1) (* k!2 n!0))) 1)))
 (let (($x232 (and (= (+ m!1 (* (- 6) n!0)) 6) (= (+ ?x637 ?x478 ?x227 ?x245 (* 9 (* c!3 n!0))) 4) $x295 (= (+ k!2 (* (- 3) n!0) (* (- 3) (* n!0 n!0))) 1) (not $x293))))
 (let (($x521 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x634 (* (- 2) (* k k n))))
 (let ((?x631 (* (- 4) (* c k n))))
 (let ((?x627 (* (- 2) (* c c n))))
 (let ((?x624 (* (- 2) (* c k))))
 (let ((?x613 (* (- 1) (* c c))))
 (let ((?x612 (* (- 1) (* k k n n))))
 (let ((?x621 (* (- 2) (* c k n n))))
 (let ((?x610 (* (- 1) (* c c n n))))
 (let ((?x484 (* 3 (* c c k k))))
 (let ((?x483 (* 3 (* c k k k))))
 (let ((?x515 (* k k k k)))
 (let ((?x514 (* c c c m)))
 (let ((?x482 (* 3 (* c c k m))))
 (let ((?x481 (* 3 (* c k k m))))
 (let ((?x507 (* k k k m)))
 (let ((?x461 (* c c c k)))
 (let ((?x453 (* (- 1) (* k m m n))))
 (let ((?x451 (* (- 1) (* c m m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x122 (+ (* (- 36) c) (* (- 36) k) ?x211 (* (- 36) ?x55) ?x142 (* (- 36) (* c n)) (* (- 12) (* c m n)) (* (- 12) (* c m)) (* (- 12) (* k m n)) ?x451 ?x453 ?x461 (* (- 1) (* c m m)) (* (- 12) (* k m)) ?x507 ?x481 ?x482 (* (- 1) (* k m m)) ?x514 ?x515 ?x483 ?x484 ?x610 ?x621 ?x612 ?x613 ?x624 ?x627 ?x631 ?x634)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 $x208 $x260 $x298 (not (= (* ?x122 ?x409) 0)))))))))))))))))))))))))))))))))))))))) :qid k!34))
 ))
 (let (($x247 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x253 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x268 (* (- 1) (* (+ 1 n) (+ 1 n) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) ?x268)))
 (let (($x506 (not (= (* ?x159 ?x253) 0))))
 (let (($x492 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x314 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x314 $x492 $x506)))))))))))))))))))) :qid k!34))
 ))
 (let ((?x265 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x55 (* k n)))
 (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x409 (+ 3 ?x221 (* (- 3) k) ?x59 ?x55 (* m n))))
 (let ((?x634 (* (- 2) (* k k n))))
 (let ((?x631 (* (- 4) (* c k n))))
 (let ((?x627 (* (- 2) (* c c n))))
 (let ((?x624 (* (- 2) (* c k))))
 (let ((?x613 (* (- 1) (* c c))))
 (let ((?x612 (* (- 1) (* k k n n))))
 (let ((?x621 (* (- 2) (* c k n n))))
 (let ((?x610 (* (- 1) (* c c n n))))
 (let ((?x484 (* 3 (* c c k k))))
 (let ((?x483 (* 3 (* c k k k))))
 (let ((?x515 (* k k k k)))
 (let ((?x514 (* c c c m)))
 (let ((?x482 (* 3 (* c c k m))))
 (let ((?x481 (* 3 (* c k k m))))
 (let ((?x507 (* k k k m)))
 (let ((?x461 (* c c c k)))
 (let ((?x453 (* (- 1) (* k m m n))))
 (let ((?x451 (* (- 1) (* c m m n))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x122 (+ (* (- 36) c) (* (- 36) k) ?x211 (* (- 36) ?x55) ?x142 (* (- 36) (* c n)) (* (- 12) (* c m n)) (* (- 12) (* c m)) (* (- 12) (* k m n)) ?x451 ?x453 ?x461 (* (- 1) (* c m m)) (* (- 12) (* k m)) ?x507 ?x481 ?x482 (* (- 1) (* k m m)) ?x514 ?x515 ?x483 ?x484 ?x610 ?x621 ?x612 ?x613 ?x624 ?x627 ?x631 ?x634)))
 (let (($x298 (= (+ k (* (- 3) n) (* (- 3) (* n n))) 1)))
 (let (($x260 (= (+ (* 3 c) k (* (- 2) n) (* (- 1) ?x55)) 1)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x208 (= (+ ?x40 ?x44 ?x210 ?x211 (* 9 (* c n))) 4)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x467 (and $x124 $x208 $x260 $x298 (not (= (* ?x122 ?x409) 0)))))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) (* (- 1) (* ?x341 ?x341 ?x68 ?x68)))))
 (let ((?x182 (* ?x159 (+ 3 ?x221 (* (- 4) k) (* ?x341 ?x71) (* (- 1) m) ?x59))))
 (let (($x506 (not (= ?x182 0))))
 (let (($x492 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x314 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let (($x535 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x314 $x492 $x506)))
 (rewrite (= $x535 $x467)))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x487 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x253 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x268 (* (- 1) (* (+ 1 n) (+ 1 n) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) ?x268)))
 (let (($x506 (not (= (* ?x159 ?x253) 0))))
 (let (($x492 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x532 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (and $x124 (= ?x532 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x492 $x506))))))))))))))))) :qid k!34))
 ))
 (let ((?x248 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x253 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x268 (* (- 1) (* (+ 1 n) (+ 1 n) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) ?x268)))
 (let (($x506 (not (= (* ?x159 ?x253) 0))))
 (let (($x492 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let (($x314 (= (+ (* 3 c) (* (- 1) (* n k)) k (* (- 2) n)) 1)))
 (let ((?x49 (* k k)))
 (let ((?x211 (* (- 1) ?x49)))
 (let ((?x210 (* (- 9) n)))
 (let ((?x44 (* 5 k)))
 (let ((?x40 (* 18 c)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x535 (and $x124 (= (+ ?x40 (* 9 (* n c)) ?x44 ?x210 ?x211) 4) $x314 $x492 $x506)))
 (let ((?x48 (* 9 n)))
 (let ((?x532 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x230 (and $x124 (= ?x532 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x492 $x506)))
 (rewrite (= $x230 $x535))))))))))))))))))))))))))
 ))
 (let (($x91 (exists ((c Int) (k Int) (m Int) (n Int) )(! (let ((?x72 (+ n 1)))
 (let ((?x79 (+ m 6)))
 (let ((?x71 (+ k m)))
 (let ((?x68 (+ c k)))
 (let ((?x83 (+ (* (- 1) ?x68 ?x79 ?x79 ?x72) (* ?x68 ?x71 ?x71 ?x79 ?x72 ?x72) (* ?x68 ?x68 ?x68 ?x71))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 ?x72)) ?x71) (* 2 ?x72))))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let ((?x59 (* 2 n)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not (= (* ?x77 (- ?x83 (* ?x68 ?x68 ?x72 ?x72))) 0))))))))))))))))) :qid k!34))
 ))
 (let ((?x485 (lambda ((c Int) (k Int) (m Int) (n Int) )(let ((?x59 (* 2 n)))
 (let ((?x221 (* (- 3) c)))
 (let ((?x253 (+ 3 ?x221 (* (- 4) k) (* (+ 1 n) (+ k m)) (* (- 1) m) ?x59)))
 (let ((?x268 (* (- 1) (* (+ 1 n) (+ 1 n) (+ c k) (+ c k)))))
 (let ((?x68 (+ c k)))
 (let ((?x71 (+ k m)))
 (let ((?x416 (+ 6 m)))
 (let ((?x341 (+ 1 n)))
 (let ((?x142 (* ?x341 ?x341 ?x416 ?x71 ?x71 ?x68)))
 (let ((?x159 (+ (* (- 1) (* ?x341 ?x416 ?x416 ?x68)) ?x142 (* ?x71 ?x68 ?x68 ?x68) ?x268)))
 (let (($x506 (not (= (* ?x159 ?x253) 0))))
 (let (($x492 (= (+ (* 3 (* n n)) (* (- 1) k) (* 3 n)) (- 1))))
 (let ((?x49 (* k k)))
 (let ((?x48 (* 9 n)))
 (let ((?x532 (+ (* (- 18) c) (* (- 9) (* n c)) (* (- 5) k) ?x48 ?x49)))
 (let (($x124 (= (+ m (* (- 6) n)) 6)))
 (let (($x230 (and $x124 (= ?x532 (- 4)) (= (+ ?x221 (* n k) (* (- 1) k) ?x59) (- 1)) $x492 $x506)))
 (let ((?x83 (+ (* (- 1) ?x68 (+ m 6) (+ m 6) (+ n 1)) (* ?x68 ?x71 ?x71 (+ m 6) (+ n 1) (+ n 1)) (* ?x68 ?x68 ?x68 ?x71))))
 (let ((?x77 (+ (- (+ (- 1 (* 3 ?x68)) (* ?x71 (+ n 1))) ?x71) (* 2 (+ n 1)))))
 (let (($x87 (= (* ?x77 (- ?x83 (* ?x68 ?x68 (+ n 1) (+ n 1)))) 0)))
 (let (($x67 (= (+ (- (+ 1 (* 3 n n)) k) (* 3 n)) 0)))
 (let (($x61 (= (+ (- (+ (- 1 (* 3 c)) (* k n)) k) ?x59) 0)))
 (let ((?x44 (* 5 k)))
 (let ((?x47 (- (- (- (* 4 1) (* 18 c)) (* 9 c n)) ?x44)))
 (let (($x90 (and (= (- (+ (* (- 6) 1) m) (* 6 n)) 0) (= (+ ?x47 ?x48 ?x49) 0) $x61 $x67 (or (not $x87)))))
 (rewrite (= $x90 $x230))))))))))))))))))))))))))))
 ))
 (let ((@x92 (asserted $x91)))
 (let ((@x235 (mp (mp @x92 (quant-intro (proof-bind ?x485) (= $x91 $x487)) $x487) (rewrite (= $x487 $x487)) $x487)))
 (let ((@x288 (mp (mp @x235 (quant-intro (proof-bind ?x248) (= $x487 $x247)) $x247) (quant-intro (proof-bind ?x265) (= $x247 $x521)) $x521)))
 (let ((@x567 (mp (mp~ @x288 (sk (~ $x521 $x232)) $x232) (rewrite (= $x232 $x330)) $x330)))
 (let ((@x279 (and-elim @x567 $x177)))
 (let ((@x553 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x277)) @x279 $x277)))
 (let (($x166 (>= ?x272 (- 1))))
 (let ((@x319 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x177) $x166)) @x279 $x166)))
 (let (($x186 (<= ?x254 (- 6))))
 (let ((@x337 (and-elim @x567 $x623)))
 (let ((@x383 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x623) $x186)) @x337 $x186)))
 (let (($x544 (>= ?x254 (- 6))))
 (let ((@x360 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x623) $x544)) @x337 $x544)))
 (let (($x303 (<= ?x343 (- 1))))
 (let ((@x406 (and-elim @x567 $x154)))
 (let ((@x201 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x303)) @x406 $x303)))
 (let (($x625 (>= ?x343 (- 1))))
 (let ((@x494 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x154) $x625)) @x406 $x625)))
 (let (($x1375 (not (>= ?x497 0))))
 (let (($x164 (<= ?x497 0)))
 (let (($x1361 (not $x1273)))
 (let (($x1351 (= ?x173 0)))
 (let (($x974 (not $x1351)))
 (let (($x741 (not $x164)))
 (let ((@x742 (hypothesis $x741)))
 (let (($x1394 (>= ?x173 0)))
 (let ((@x1069 (hypothesis $x1351)))
 (let ((@x1354 ((_ th-lemma arith farkas 1 1 1) @x742 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x974 $x1394)) @x1069 $x1394) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x974 $x1273)) @x1069 $x1273) false)))
 (let (($x1272 (not $x1394)))
 (let ((@x1331 (hypothesis $x1272)))
 (let ((@x1312 ((_ th-lemma arith) @x742 @x1331 @x494 @x201 @x319 @x553 @x319 @x553 @x360 @x383 @x319 @x553 @x360 @x383 @x319 @x553 false)))
 (let ((@x1363 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x1351 $x1361 $x1272)) (unit-resolution (lemma @x1312 (or $x1394 $x164)) @x742 $x1394) (unit-resolution (lemma @x1354 (or $x974 $x164)) @x742 $x974) $x1361)))
 (let ((@x1373 ((_ th-lemma arith) @x742 @x1363 @x494 @x201 @x319 @x553 @x319 @x553 @x360 @x383 @x319 @x553 @x360 @x383 @x319 @x553 false)))
 (let ((@x1075 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x144 $x741 $x1375)) (and-elim @x567 $x496) (or $x741 $x1375))))
 (let ((@x1318 (unit-resolution @x1075 (lemma @x1373 $x164) $x1375)))
 (let ((@x1267 ((_ th-lemma arith) @x1318 (hypothesis $x1361) @x494 @x201 @x319 @x553 @x319 @x553 @x360 @x383 @x319 @x553 @x360 @x383 @x319 @x553 false)))
 (let ((@x1374 ((_ th-lemma arith) @x1318 @x1331 @x494 @x201 @x319 @x553 @x319 @x553 @x360 @x383 @x319 @x553 @x360 @x383 @x319 @x553 false)))
 ((_ th-lemma arith farkas 1 1 1) @x1318 (lemma @x1374 $x1394) (lemma @x1267 $x1273) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(:added-eqs                 140
 :arith-assert-diseq        14
 :arith-assert-lower        1076
 :arith-assert-upper        995
 :arith-bound-prop          10
 :arith-branch-var          25
 :arith-conflicts           49
 :arith-eq-adapter          16
 :arith-fixed-eqs           181
 :arith-gcd-tests           233
 :arith-gomory-cuts         21
 :arith-grobner             50
 :arith-ineq-splits         25
 :arith-max-min             7543
 :arith-nonlinear-bounds    360
 :arith-nonlinear-horner    706
 :arith-num-rows            27
 :arith-offset-eqs          10
 :arith-patches             54
 :arith-patches_succ        5
 :arith-pivots              1812
 :arith-pseudo-nonlinear    307
 :arith-row-summations      18791
 :arith-tableau-max-columns 85
 :arith-tableau-max-rows    27
 :conflicts                 53
 :decisions                 186
 :del-clause                126
 :final-checks              171
 :max-memory                4.12
 :memory                    3.26
 :minimized-lits            3
 :mk-bool-var               318
 :mk-clause                 220
 :num-allocs                69220654
 :num-checks                1
 :propagations              201
 :rlimit-count              1452454
 :time                      0.66
 :total-time                0.66)
